VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
  Persistable = 0  'NotPersistable
  DataBindingBehavior = 0  'vbNone
  DataSourceBehavior  = 0  'vbNone
  MTSTransactionMode  = 0  'NotAnMTSObject
END
Attribute VB_Name = "ClassCPRSelect"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Option Explicit

Private Declare Function Comando_BindVarInt Lib "ADSQLMN.DLL" Alias "AD_Comando_BindVar" (ByVal lComando As Long, lpVar As Variant) As Long
Private Declare Function Comando_PrepararInt Lib "ADSQLMN.DLL" Alias "AD_Comando_Preparar" (ByVal lComando As Long, ByVal lpSQLStmt As String) As Long
Private Declare Function Comando_ExecutarInt Lib "ADSQLMN.DLL" Alias "AD_Comando_Executar" (ByVal lComando As Long) As Long

Public Function BorderoDescChq_Le_ChequesPre(ByVal lNumBordero As Long, ByVal colChequesPre As Collection, Optional ByVal iTipo As Integer = BORDERO_DESCONTO) As Long
'função que recebe um número de borderô (input) e preenche uma coleção de chequesPre(output) que estão ligados a esse borderô

Dim lErro As Long
Dim lComando As Long
Dim tChequePre As typeChequePre
Dim objChequePre As ClassChequePre

On Error GoTo Erro_BorderoDescChq_Le_ChequesPre

    'abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 109336
    
    'inicializa as strings de ChequePre
    tChequePre.sAgencia = String(STRING_AGENCIA, 0)
    tChequePre.sContaCorrente = String(STRING_CONTA_CORRENTE, 0)
    tChequePre.sCPFCGC = String(STRING_CGC, 0)
    
    'seleciona todos os cheques que pertencem ao borderô em questão
    lErro = Comando_Executar(lComando, "SELECT ChequePre.NumIntCheque, ChequePre.FilialEmpresa, Cliente, Filial, Banco, Agencia, ContaCorrente, Numero, DataDeposito, Valor, ChequePre.NumBordero, CPFCGC, NumMovtoCaixa, NumMovtoSangria, Aprovado, NaoEspecificado, NumBorderoLoja, SequencialLoja, SequencialBack, FilialEmpresaLoja, Status, ChequePre.TipoBordero " & _
                                       "FROM ChequePre, ChequeBordero " & _
                                       "WHERE ChequePre.NumIntCheque = ChequeBordero.NumIntCheque " & _
                                       "AND ChequeBordero.FilialEmpresa = ? " & _
                                       "AND ChequeBordero.NumBordero = ?  " & _
                                       "AND ChequeBordero.TipoBordero = ?", _
                                       tChequePre.lNumIntCheque, tChequePre.iFilialEmpresa, tChequePre.lCliente, tChequePre.iFilial, tChequePre.iBanco, tChequePre.sAgencia, tChequePre.sContaCorrente, tChequePre.lNumero, tChequePre.dtDataDeposito, tChequePre.dValor, tChequePre.lNumBordero, tChequePre.sCPFCGC, tChequePre.lNumMovtoCaixa, tChequePre.lNumMovtoSangria, tChequePre.iAprovado, tChequePre.iNaoEspecificado, tChequePre.lNumBorderoLoja, tChequePre.lSequencialLoja, tChequePre.lSequencialBack, tChequePre.iFilialEmpresaLoja, tChequePre.iStatus, tChequePre.iTipoBordero, _
                                       giFilialEmpresa, _
                                       lNumBordero, _
                                       iTipo)
    If lErro <> AD_SQL_SUCESSO Then gError 109337
    
    'busca o primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109338
    
    'se não encontrar-> erro
    If lErro = AD_SQL_SEM_DADOS Then gError 109333
    
    'enquanto houver registros
    Do While lErro <> AD_SQL_SEM_DADOS
    
        'instancia um objChequePre
        Set objChequePre = New ClassChequePre
        
        'preenche seus atributos
        objChequePre.lNumIntCheque = tChequePre.lNumIntCheque
        objChequePre.iFilialEmpresa = tChequePre.iFilialEmpresa
        objChequePre.lCliente = tChequePre.lCliente
        objChequePre.iFilial = tChequePre.iFilial
        objChequePre.iBanco = tChequePre.iBanco
        objChequePre.sAgencia = tChequePre.sAgencia
        objChequePre.sContaCorrente = tChequePre.sContaCorrente
        objChequePre.lNumero = tChequePre.lNumero
        objChequePre.dtDataDeposito = tChequePre.dtDataDeposito
        objChequePre.dValor = tChequePre.dValor
        objChequePre.lNumBordero = tChequePre.lNumBordero
        objChequePre.sCPFCGC = tChequePre.sCPFCGC
        objChequePre.lNumMovtoCaixa = tChequePre.lNumMovtoCaixa
        objChequePre.lNumMovtoSangria = tChequePre.lNumMovtoSangria
        objChequePre.iAprovado = tChequePre.iAprovado
        objChequePre.iNaoEspecificado = tChequePre.iNaoEspecificado
        objChequePre.lNumBorderoLoja = tChequePre.lNumBorderoLoja
        objChequePre.lSequencialLoja = tChequePre.lSequencialLoja
        objChequePre.lSequencialBack = tChequePre.lSequencialBack
        objChequePre.iFilialEmpresaLoja = tChequePre.iFilialEmpresaLoja
        objChequePre.iStatus = tChequePre.iStatus
        objChequePre.iTipoBordero = tChequePre.iTipoBordero
        
        'adiciona o objeto à coleção
        colChequesPre.Add objChequePre
        
        'busca o próximo
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109339
    
    Loop

    'fecha o comando
    Call Comando_Fechar(lComando)

    BorderoDescChq_Le_ChequesPre = SUCESSO
    
    Exit Function
    
Erro_BorderoDescChq_Le_ChequesPre:

    BorderoDescChq_Le_ChequesPre = gErr
    
    Select Case gErr
    
        Case 109336
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 109337 To 109339
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUEPRE3", gErr)
        
        Case 109333
        'será tratado na rotina chamadora
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148473)
    
    End Select
    
    'fecha o comando
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Public Function BorderoDescChq_Le(ByVal objBorderoDescChq As ClassBorderoDescChq) As Long
'função que recebe um objBorderoDescChq com lNumBordero e FilialEmpresa preenchidos e o retorna totalmente preenchido

Dim lErro As Long
Dim lComando As Long
Dim tBorderoDescChq As typeBorderoDescChq

On Error GoTo Erro_BorderoDescChq_Le

    'abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 109294
    
    'inicializar as strings
    tBorderoDescChq.sCarteiraCobranca = String(STRING_CARTEIRACOBRANCA_DESCRICAO, 0)
    tBorderoDescChq.sCobrador = String(STRING_COBRADOR_NOME_REDUZIDO, 0)
    tBorderoDescChq.sContaCorrente = String(STRING_CONTA_CORRENTE_NOME_REDUZIDO, 0)
    
    'executa o select para localizar o bordero de desconto de cheques
    lErro = Comando_Executar(lComando, "SELECT BorderoDescChq.ContaCorrente, BorderoDescChq.DataEmissao, BorderoDescChq.DataContabil, BorderoDescChq.Cobrador, BorderoDescChq.CarteiraCobranca, BorderoDescChq.DataDeposito, BorderoDescChq.ValorCredito, CarteirasCobranca.Descricao, ContasCorrentesInternas.NomeReduzido, Cobradores.NomeReduzido " & _
                                       "FROM BorderoDescChq, ContasCorrentesInternas, Cobradores, CarteirasCobranca " & _
                                       "WHERE BorderoDescChq.ContaCorrente = ContasCorrentesInternas.Codigo " & _
                                       "AND BorderoDescChq.Cobrador = Cobradores.Codigo " & _
                                       "AND BorderoDescChq.FilialEmpresa = Cobradores.FilialEmpresa " & _
                                       "AND BorderoDescChq.CarteiraCobranca = CarteirasCobranca.Codigo " & _
                                       "AND BorderoDescChq.NumBordero = ? " & _
                                       "AND BorderoDescChq.FilialEmpresa = ?", _
                                       tBorderoDescChq.iContaCorrente, tBorderoDescChq.dtDataEmissao, tBorderoDescChq.dtDataContabil, tBorderoDescChq.iCobrador, tBorderoDescChq.iCarteiraCobranca, tBorderoDescChq.dtDataDeposito, tBorderoDescChq.dValorCredito, tBorderoDescChq.sCarteiraCobranca, tBorderoDescChq.sContaCorrente, tBorderoDescChq.sCobrador, _
                                       objBorderoDescChq.lNumBordero, _
                                       objBorderoDescChq.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 109295
    
    'busca o primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109296
    
    'se não encontrou-> erro
    If lErro = AD_SQL_SEM_DADOS Then gError 109291
    
    'preenche os dados do obj
    objBorderoDescChq.iContaCorrente = tBorderoDescChq.iContaCorrente
    objBorderoDescChq.dtDataEmissao = tBorderoDescChq.dtDataEmissao
    objBorderoDescChq.dtDataContabil = tBorderoDescChq.dtDataContabil
    objBorderoDescChq.iCobrador = tBorderoDescChq.iCobrador
    objBorderoDescChq.iCarteiraCobranca = tBorderoDescChq.iCarteiraCobranca
    objBorderoDescChq.dtDataDeposito = tBorderoDescChq.dtDataDeposito
    objBorderoDescChq.dValorCredito = tBorderoDescChq.dValorCredito
    objBorderoDescChq.sCarteiraCobranca = tBorderoDescChq.sCarteiraCobranca
    objBorderoDescChq.sContaCorrente = tBorderoDescChq.sContaCorrente
    objBorderoDescChq.sCobrador = tBorderoDescChq.sCobrador

    'fecha o comando
    Call Comando_Fechar(lComando)

    BorderoDescChq_Le = SUCESSO
    
    Exit Function
    
Erro_BorderoDescChq_Le:

    BorderoDescChq_Le = gErr
    
    Select Case gErr
    
        Case 109294
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 109295, 109296
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BORDERODESCCHQ1", gErr, objBorderoDescChq.iFilialEmpresa, objBorderoDescChq.lNumBordero)
            
        Case 109291
        'será tratado na rotina chamadora
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148474)
    
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Public Function BorderoDescChq_Le_ChequesPre_Disp(ByVal objBorderoDescChq As ClassBorderoDescChq) As Long
'função que lê os Cheques que ainda podem ser associados a um borderô seguindo filtros opcionais de Data para depósito,
'Banco e Agência

Dim lComando As Long
Dim lErro As Long
Dim sSQL As String
Dim lNumIntCheque As Long
Dim iFilialEmpresa As Integer
Dim lCliente As Long
Dim iFilial As Integer
Dim iBanco As Integer
Dim sAgencia As String
Dim sContaCorrente As String
Dim lNumero As Long
Dim dtDataDeposito As Date
Dim dValor As Double
Dim lNumBordero As Long
Dim sCPFCGC As String
Dim lNumMovtoCaixa As Long
Dim lNumMovtoSangria As Long
Dim iAprovado As Integer
Dim iNaoEspecificado As Integer
Dim lNumBorderoLoja As Long
Dim lSequencialLoja As Long
Dim lSequencialBack As Long
Dim iFilialEmpresaLoja As Integer
Dim iStatus As Integer
Dim iTipoBordero As Integer

On Error GoTo Erro_BorderoDescChq_Le_ChequesPre_Disp

    'abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 109194
    
    'inicializa as strings
    sAgencia = String(STRING_AGENCIA, 0)
    sContaCorrente = String(STRING_CONTA_CORRENTE, 0)
    sCPFCGC = String(STRING_CGC, 0)
    
    'monta o esqueleto do select
    Call BorderoDescChq_Le_ChequesPre_Disp1(objBorderoDescChq, sSQL)
    
    'monta a parte do select que faz o bind dos campos de retorno
    lErro = BorderoDescChq_Le_ChequesPre_Disp2(lComando, sSQL, lNumIntCheque, iFilialEmpresa, lCliente, iFilial, iBanco, sAgencia, sContaCorrente, lNumero, dtDataDeposito, dValor, lNumBordero, sCPFCGC, lNumMovtoCaixa, lNumMovtoSangria, iAprovado, iNaoEspecificado, lNumBorderoLoja, lSequencialLoja, lSequencialBack, iFilialEmpresaLoja, iStatus, iTipoBordero)
    If lErro <> SUCESSO Then gError 109218
    
    'monta a parte do select que faz o bind dos filtros
    lErro = BorderoDescChq_Le_ChequesPre_Disp3(lComando, objBorderoDescChq)
    If lErro <> SUCESSO Then gError 109219
    
    'executa o comando sql
    lErro = BorderoDescChq_Le_ChequesPre_Disp4(lComando, objBorderoDescChq.colChequePre, lNumIntCheque, iFilialEmpresa, lCliente, iFilial, iBanco, sAgencia, sContaCorrente, lNumero, dtDataDeposito, dValor, lNumBordero, sCPFCGC, lNumMovtoCaixa, lNumMovtoSangria, iAprovado, iNaoEspecificado, lNumBorderoLoja, lSequencialLoja, lSequencialBack, iFilialEmpresaLoja, iStatus, iTipoBordero)
    If lErro <> SUCESSO And lErro <> 109227 Then gError 109220
    
    If lErro = 109227 Then gError 109228
    
    'fecha o comando
    Call Comando_Fechar(lComando)

    BorderoDescChq_Le_ChequesPre_Disp = SUCESSO
    
    Exit Function
    
Erro_BorderoDescChq_Le_ChequesPre_Disp:
    
    BorderoDescChq_Le_ChequesPre_Disp = gErr
    
    Select Case gErr
    
        Case 109194
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 109218 To 109220
        
        Case 109228
            'será tratado na rotina chamadora
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148475)
    
    End Select
    
    'fecha o comando
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Private Sub BorderoDescChq_Le_ChequesPre_Disp1(ByVal objBorderoDescChq As ClassBorderoDescChq, sSQL As String)

Dim sSelect As String
Dim sFrom As String
Dim sWhere As String
Dim sOrderBy As String

On Error GoTo Erro_BorderoDescChq_Le_ChequesPre_Disp1

    'parte select SQL
    sSelect = "SELECT NumIntCheque, FilialEmpresa, Cliente, Filial, Banco, Agencia, ContaCorrente, Numero, DataDeposito, Valor, NumBordero, CPFCGC, NumMovtoCaixa, NumMovtoSangria, Aprovado, NaoEspecificado, NumBorderoLoja, SequencialLoja, SequencialBack, FilialEmpresaLoja, Status, TipoBordero "
           
    'cláusula FROM
    sFrom = "FROM ChequesPre_Disp "
    
    'cláusula WHERE fixa
    sWhere = "WHERE Status <> 5 "
    
    'se NÃO estiver na empresa toda
    If giFilialEmpresa <> EMPRESA_TODA Then sWhere = sWhere & "AND FilialEmpresa = ? "
    
    'se a data foi especificada
    If objBorderoDescChq.dtDataBomParaAte <> DATA_NULA Then sWhere = sWhere & "AND DataDeposito <= ? "
    
    'se o banco foi especificado
    If objBorderoDescChq.iBanco <> 0 Then sWhere = sWhere & "AND Banco = ? "
    
    'se a agência foi especificada
    If Len(Trim(objBorderoDescChq.sAgencia)) <> 0 Then sWhere = sWhere & "AND Agencia = ? "
    
    'cláusula order by
    sOrderBy = "ORDER BY DataDeposito"
    
    'concatenação do comando SQL
    sSQL = sSelect & sFrom & sWhere & sOrderBy

    Exit Sub
    
Erro_BorderoDescChq_Le_ChequesPre_Disp1:
    
    Select Case gErr
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148476)
    
    End Select
    
    Exit Sub

End Sub

Private Function BorderoDescChq_Le_ChequesPre_Disp2(ByVal lComando As Long, ByVal sSQL As String, vlNumIntCheque As Variant, viFilialEmpresa As Variant, vlCliente As Variant, viFilial As Variant, viBanco As Variant, vsAgencia As Variant, vsContaCorrente As Variant, vlNumero As Variant, vdtDataDeposito As Variant, vdValor As Variant, vlNumBordero As Variant, vsCPFCGC As Variant, vlNumMovtoCaixa As Variant, vlNumMovtoSangria As Variant, viAprovado As Variant, viNaoEspecificado As Variant, vlNumBorderoLoja As Variant, vlSequencialLoja As Variant, vlSequencialBack As Variant, viFilialEmpresaLoja As Variant, viStatus As Variant, viTipoBordero As Variant) As Long

Dim lErro As Long

On Error GoTo Erro_BorderoDescChq_Le_ChequesPre_Disp2

    'prepara o comando sql
    lErro = Comando_PrepararInt(lComando, sSQL)
    If lErro <> AD_SQL_SUCESSO Then gError 109195
    
    'faz o bind das colunas
    lErro = Comando_BindVarInt(lComando, vlNumIntCheque)
    If lErro <> AD_SQL_SUCESSO Then gError 109196
    
    lErro = Comando_BindVarInt(lComando, viFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 109197
    
    lErro = Comando_BindVarInt(lComando, vlCliente)
    If lErro <> AD_SQL_SUCESSO Then gError 109198
    
    lErro = Comando_BindVarInt(lComando, viFilial)
    If lErro <> AD_SQL_SUCESSO Then gError 109199
    
    lErro = Comando_BindVarInt(lComando, viBanco)
    If lErro <> AD_SQL_SUCESSO Then gError 109200
    
    lErro = Comando_BindVarInt(lComando, vsAgencia)
    If lErro <> AD_SQL_SUCESSO Then gError 109201
    
    lErro = Comando_BindVarInt(lComando, vsContaCorrente)
    If lErro <> AD_SQL_SUCESSO Then gError 109202
    
    lErro = Comando_BindVarInt(lComando, vlNumero)
    If lErro <> AD_SQL_SUCESSO Then gError 109203
    
    lErro = Comando_BindVarInt(lComando, vdtDataDeposito)
    If lErro <> AD_SQL_SUCESSO Then gError 109204
    
    lErro = Comando_BindVarInt(lComando, vdValor)
    If lErro <> AD_SQL_SUCESSO Then gError 109205
    
    lErro = Comando_BindVarInt(lComando, vlNumBordero)
    If lErro <> AD_SQL_SUCESSO Then gError 109206
    
    lErro = Comando_BindVarInt(lComando, vsCPFCGC)
    If lErro <> AD_SQL_SUCESSO Then gError 109207
    
    lErro = Comando_BindVarInt(lComando, vlNumMovtoCaixa)
    If lErro <> AD_SQL_SUCESSO Then gError 109208
    
    lErro = Comando_BindVarInt(lComando, vlNumMovtoSangria)
    If lErro <> AD_SQL_SUCESSO Then gError 109209
    
    lErro = Comando_BindVarInt(lComando, viAprovado)
    If lErro <> AD_SQL_SUCESSO Then gError 109210
    
    lErro = Comando_BindVarInt(lComando, viNaoEspecificado)
    If lErro <> AD_SQL_SUCESSO Then gError 109211
    
    lErro = Comando_BindVarInt(lComando, vlNumBorderoLoja)
    If lErro <> AD_SQL_SUCESSO Then gError 109212
    
    lErro = Comando_BindVarInt(lComando, vlSequencialLoja)
    If lErro <> AD_SQL_SUCESSO Then gError 109213
    
    lErro = Comando_BindVarInt(lComando, vlSequencialBack)
    If lErro <> AD_SQL_SUCESSO Then gError 109214
    
    lErro = Comando_BindVarInt(lComando, viFilialEmpresaLoja)
    If lErro <> AD_SQL_SUCESSO Then gError 109215
    
    lErro = Comando_BindVarInt(lComando, viStatus)
    If lErro <> AD_SQL_SUCESSO Then gError 109216
    
    lErro = Comando_BindVarInt(lComando, viTipoBordero)
    If lErro <> AD_SQL_SUCESSO Then gError 109217

    BorderoDescChq_Le_ChequesPre_Disp2 = SUCESSO
    
    Exit Function
    
Erro_BorderoDescChq_Le_ChequesPre_Disp2:
    
    BorderoDescChq_Le_ChequesPre_Disp2 = gErr
    
    Select Case gErr
    
        Case 109195 To 109217
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUESPRE_DISP", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148477)
    
    End Select
    
    Exit Function
    
End Function

Private Function BorderoDescChq_Le_ChequesPre_Disp3(ByVal lComando As Long, ByVal objBorderoDescChq As ClassBorderoDescChq) As Long

Dim viFilialEmpresa As Variant
Dim vdtDataBomParaAte As Variant
Dim viBanco As Variant
Dim vsAgencia As Variant
Dim lErro As Long

On Error GoTo Erro_BorderoDescChq_Le_ChequesPre_Disp3

    'se NÃO estiver na empresa toda
    If giFilialEmpresa <> EMPRESA_TODA Then
        
        viFilialEmpresa = giFilialEmpresa
        lErro = Comando_BindVarInt(lComando, viFilialEmpresa)
        If lErro <> AD_SQL_SUCESSO Then gError 109221
    
    End If
    
    'se a data foi especificada
    If objBorderoDescChq.dtDataBomParaAte <> DATA_NULA Then
        
        vdtDataBomParaAte = objBorderoDescChq.dtDataBomParaAte
        lErro = Comando_BindVarInt(lComando, vdtDataBomParaAte)
        If lErro <> AD_SQL_SUCESSO Then gError 109222
        
    End If
    
    'se o banco foi especificado
    If objBorderoDescChq.iBanco <> 0 Then
        
        viBanco = objBorderoDescChq.iBanco
        lErro = Comando_BindVarInt(lComando, viBanco)
        If lErro <> AD_SQL_SUCESSO Then gError 109223
    
    End If
    
    'se a agência foi especificada
    If Len(Trim(objBorderoDescChq.sAgencia)) <> 0 Then
        
        vsAgencia = objBorderoDescChq.sAgencia
        lErro = Comando_BindVarInt(lComando, vsAgencia)
        If lErro <> AD_SQL_SUCESSO Then gError 109224
    
    End If
    
    lErro = Comando_ExecutarInt(lComando)
    If lErro <> AD_SQL_SUCESSO Then gError 109225

    BorderoDescChq_Le_ChequesPre_Disp3 = SUCESSO
    
    Exit Function
    
Erro_BorderoDescChq_Le_ChequesPre_Disp3:
    
    BorderoDescChq_Le_ChequesPre_Disp3 = gErr
    
    Select Case gErr
    
        Case 109221 To 109225
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUESPRE_DISP", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148478)
    
    End Select
    
    Exit Function

End Function

Private Function BorderoDescChq_Le_ChequesPre_Disp4(ByVal lComando As Long, ByVal colChequesPre As Collection, lNumIntCheque As Long, iFilialEmpresa As Integer, lCliente As Long, iFilial As Integer, iBanco As Integer, sAgencia As String, sContaCorrente As String, lNumero As Long, dtDataDeposito As Date, dValor As Double, lNumBordero As Long, sCPFCGC As String, lNumMovtoCaixa As Long, lNumMovtoSangria As Long, iAprovado As Integer, iNaoEspecificado As Integer, lNumBorderoLoja As Long, lSequencialLoja As Long, lSequencialBack As Long, iFilialEmpresaLoja As Integer, iStatus As Integer, iTipoBordero As Integer) As Long

Dim lErro As Long
Dim objChequePre As ClassChequePre

On Error GoTo Erro_BorderoDescChq_Le_ChequesPre_Disp4

    'busca o primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109226
    
    'se retornou sem dados-> erro
    If lErro = AD_SQL_SEM_DADOS Then gError 109227
    
    'enquanto houver registro na seleção
    Do While lErro <> AD_SQL_SEM_DADOS
    
        'cria um objChequePre
        Set objChequePre = New ClassChequePre
        
        'preenche os atributos do objeto
        objChequePre.lNumIntCheque = lNumIntCheque
        objChequePre.iFilialEmpresa = iFilialEmpresa
        objChequePre.lCliente = lCliente
        objChequePre.iFilial = iFilial
        objChequePre.iBanco = iBanco
        objChequePre.sAgencia = sAgencia
        objChequePre.sContaCorrente = sContaCorrente
        objChequePre.lNumero = lNumero
        objChequePre.dtDataDeposito = dtDataDeposito
        objChequePre.dValor = dValor
        objChequePre.lNumBordero = lNumBordero
        objChequePre.sCPFCGC = sCPFCGC
        objChequePre.lNumMovtoCaixa = lNumMovtoCaixa
        objChequePre.lNumMovtoSangria = lNumMovtoSangria
        objChequePre.iAprovado = iAprovado
        objChequePre.iNaoEspecificado = iNaoEspecificado
        objChequePre.lNumBorderoLoja = lNumBorderoLoja
        objChequePre.lSequencialLoja = lSequencialLoja
        objChequePre.lSequencialBack = lSequencialBack
        objChequePre.iFilialEmpresaLoja = iFilialEmpresaLoja
        objChequePre.iStatus = iStatus
        objChequePre.iTipoBordero = iTipoBordero
        
        'adiciona o objeto à coleção
        colChequesPre.Add objChequePre
        
        'busca o próximo
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109228
    
    Loop

    BorderoDescChq_Le_ChequesPre_Disp4 = SUCESSO
    
    Exit Function
    
Erro_BorderoDescChq_Le_ChequesPre_Disp4:
    
    BorderoDescChq_Le_ChequesPre_Disp4 = gErr
    
    Select Case gErr
    
        Case 109226, 109228
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUESPRE_DISP", gErr)
            
        Case 109227
            'será tratado na rotina chamadora
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148479)
    
    End Select
    
    Exit Function

End Function

Public Function Cobrador_Le_Carteiras2(ByVal iCodCobrador As Integer, ByVal colCarteirasCobranca As Collection) As Long
'Esta função recebe um codigo de cobrador e retorna a coleção de carteiras de cobrança a ele associada

Dim tCarteiraCobranca As typeCarteiraCobranca
Dim lErro As Long
Dim lComando As Long
Dim objCarteiraCobranca As ClassCarteiraCobranca

On Error GoTo Erro_Cobrador_Le_Carteiras2

    'abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 109172
    
    'inicializa as strings
    tCarteiraCobranca.sDescricao = String(STRING_CARTEIRACOBRANCA_DESCRICAO, 0)

    'executa a seleção na tabela
    lErro = Comando_Executar(lComando, "SELECT CarteirasCobranca.Codigo, CarteirasCobranca.Descricao, CarteirasCobranca.ValidaPara " & _
                                       "FROM CarteirasCobranca, CarteirasCobrador " & _
                                       "WHERE CarteirasCobranca.Codigo = CarteirasCobrador.CodCarteiraCobranca " & _
                                       "AND CarteirasCobrador.Cobrador = ? ", _
                                       tCarteiraCobranca.iCodigo, tCarteiraCobranca.sDescricao, tCarteiraCobranca.iValidaPara, _
                                       iCodCobrador)
    If lErro <> AD_SQL_SUCESSO Then gError 109173
    
    'busca o primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109174
    
    If lErro = AD_SQL_SEM_DADOS Then gError 109175
    
    Do While lErro <> AD_SQL_SEM_DADOS
    
        'instancia uma nova carteira de cobrança
        Set objCarteiraCobranca = New ClassCarteiraCobranca
        
        'preenche os seus atributos
        objCarteiraCobranca.iCodigo = tCarteiraCobranca.iCodigo
        objCarteiraCobranca.iValidaPara = tCarteiraCobranca.iValidaPara
        objCarteiraCobranca.sDescricao = tCarteiraCobranca.sDescricao
        
        'adiciona à coleção
        colCarteirasCobranca.Add objCarteiraCobranca
        
        'busca o próximo registro
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109176
    
    Loop
    
    'fecha o comando
    Call Comando_Fechar(lComando)
    
    Cobrador_Le_Carteiras2 = SUCESSO

    Exit Function
    
Erro_Cobrador_Le_Carteiras2:
    
    Cobrador_Le_Carteiras2 = gErr
    
    Select Case gErr
    
        Case 109172
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 109173, 109174, 109176
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CARTEIRASCOBRANCA_CARTEIRASCOBRADOR", gErr)
            
        Case 109175
            'tratado na rotina chamadora
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148480)
    
    End Select
    
    'fecha o comando
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Public Function Conta_NomeRed_Automatico(ByVal iFilialEmpresa As Integer, sNomeRed As String) As Long
'essa função gera um nomereduzido automático para um conta corrente interna seguindo a
'a regra de formação "ChequePre x", onde x será o primeiro inteiro
'maior ou igual à filial atual da coleção que ainda não tenha sido usado

Dim lComando As Long
Dim lErro As Long
Dim iCodigoCCI As Integer

On Error GoTo Erro_Conta_NomeRed_Automatico

    'abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 109255
        
    Do While lErro = AD_SQL_SUCESSO
    
        'tento achar se já existe cci usando esse nome reduzido
        lErro = Comando_Executar(lComando, "SELECT Codigo " & _
                                           "FROM ContasCorrentesInternas " & _
                                           "WHERE NomeReduzido = ?", _
                                           iCodigoCCI, CONTA_CHEQUE_PRE & " " & CStr(iFilialEmpresa))
        If lErro <> AD_SQL_SUCESSO Then gError 109256
        
        'busca o primeiro
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109257
        
        'se não achou, ok. esse é o nome reduzido a ser usado
        If lErro = AD_SQL_SEM_DADOS Then Exit Do
        
        'se chegar aki, significa que achou uma com o nome já sendo usado, logo, incrementaremos o iFilialEmpresa
        iFilialEmpresa = iFilialEmpresa + 1
    
    Loop
    
    'ao sair do loop, gera-se o nome reduzido que, com certeza ainda não existe no BD
    sNomeRed = CONTA_CHEQUE_PRE_NOMERED & " " & CStr(iFilialEmpresa)

    Conta_NomeRed_Automatico = SUCESSO
    
    'fecha o comando
    Call Comando_Fechar(lComando)
        
    Exit Function
    
Erro_Conta_NomeRed_Automatico:

    Conta_NomeRed_Automatico = gErr
    
    Select Case gErr
    
        Case 109255
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 109256, 109257
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CCI", gErr)
    
    End Select
    
    Exit Function

End Function

Function ContaCorrente_ObterDadosImpCheque(ByVal iCodigoConta As Integer, iFilialEmpresa As Integer, sLayoutCheque As String) As Long
'auxiliar para impressao de cheques pelo sistema
'obtem a filial da empresa que possui a conta corrente e o layout de cheque que deve ser usado p/impressao

Dim lErro As Long, objContasCorrentesInternas As New ClassContasCorrentesInternas
Dim objBanco As New ClassBanco

On Error GoTo Erro_ContaCorrente_ObterDadosImpCheque

    'para obter o codigo do banco da conta corrente selecionada e a filialempresa
    lErro = CF("ContaCorrenteInt_Le", iCodigoConta, objContasCorrentesInternas)
    If lErro <> SUCESSO Then Error 7421
    
    iFilialEmpresa = objContasCorrentesInternas.iFilialEmpresa
    
    'para obter o layout do cheque correspondente ao banco
    objBanco.iCodBanco = objContasCorrentesInternas.iCodBanco
    If objBanco.iCodBanco = 0 Then Error 7450

    lErro = CF("Banco_Le", objBanco)
    If lErro <> SUCESSO Then Error 7422
    
    sLayoutCheque = objBanco.sLayoutCheque
    
    ContaCorrente_ObterDadosImpCheque = SUCESSO
    
    Exit Function

Erro_ContaCorrente_ObterDadosImpCheque:

    ContaCorrente_ObterDadosImpCheque = Err
    
    Select Case Err
    
        Case 7421, 7422
        
        Case 7450
            'banco tem que ter layout de cheque definido
            Call Rotina_Erro(vbOKOnly, "ERRO_BANCO_SEM_LAYOUT_CHEQUE", Err)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148481)
    
    End Select
    
    Exit Function

End Function

Function Banco_Le(ByVal objBanco As ClassBanco) As Long
Attribute Banco_Le.VB_Description = "le os dados do banco, cujo codigo foi passado como parametro"
'le os dados do banco, cujo codigo foi passado como parametro

Dim lErro As Long
Dim lComando As Long
Dim tBanco As typeBanco

On Error GoTo Erro_Banco_Le

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 16088

    tBanco.sNome = String(STRING_BANCO_NOME, 0)
    tBanco.sNomeReduzido = String(STRING_BANCO_NOME_REDUZIDO, 0)
    tBanco.sLayoutCheque = String(STRING_BANCO_LAYOUT_CHEQUE, 0)
    tBanco.sLayoutBoleto = String(STRING_BANCO_LAYOUT_BOLETO, 0)
    
    lErro = Comando_Executar(lComando, "SELECT  Nome, NomeReduzido, LayoutCheque, LayoutBoleto, LayoutCnabConciliacao FROM Bancos WHERE CodBanco = ? ", tBanco.sNome, tBanco.sNomeReduzido, tBanco.sLayoutCheque, tBanco.sLayoutBoleto, tBanco.iLayoutCnabConciliacao, objBanco.iCodBanco)
    If lErro <> AD_SQL_SUCESSO Then Error 16089

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 16090

    If lErro = AD_SQL_SEM_DADOS Then Error 16091
    
    objBanco.sNome = tBanco.sNome
    objBanco.sNomeReduzido = tBanco.sNomeReduzido
    objBanco.sLayoutCheque = tBanco.sLayoutCheque
    objBanco.sLayoutBoleto = tBanco.sLayoutBoleto
    objBanco.iLayoutCnabConciliacao = tBanco.iLayoutCnabConciliacao

    lErro = Comando_Fechar(lComando)
    
    Banco_Le = SUCESSO
    
    Exit Function
 
Erro_Banco_Le:

    Banco_Le = Err
    
    Select Case Err
    
        Case 16088
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
              
        Case 16089, 16090
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BANCOS", Err, objBanco.iCodBanco)
          
        Case 16091
            'Erro será tratado na rotina chamadora
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148482)
    
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function ContasCorrentesInternas_Le_Banco(ByVal iCodigo As Integer) As Long
'Verifica se existem contas correntes internas relacionadas ao codigo do banco passado como parametro

Dim lErro As Long
Dim lComando As Long
Dim iCodigo1 As Integer

On Error GoTo Erro_ContasCorrentesinternas_Le_Banco

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 16109

    'pesquisa contas correntes internas no BD
    lErro = Comando_Executar(lComando, "SELECT Codigo FROM ContasCorrentesInternas WHERE CodBanco = ? ", iCodigo1, iCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 16110

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 16111

    If lErro = AD_SQL_SEM_DADOS Then Error 16112
    
    lErro = Comando_Fechar(lComando)
    
    ContasCorrentesInternas_Le_Banco = SUCESSO
    
    Exit Function
 
Erro_ContasCorrentesinternas_Le_Banco:

    ContasCorrentesInternas_Le_Banco = Err
    
    Select Case Err
    
        Case 16109
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
              
        Case 16110, 16111
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONTASCORRENTESINTERNAS", Err)
          
        Case 16112
                       
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148483)
    
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function
    
End Function

Public Function RegiaoVenda_Le_Descricao(ByVal objRegiaoVenda As ClassRegiaoVenda) As Long
'Le a regiao de venda a partir do campo descricao (q eh chave candidata da tabela RegiaoVenda)
'objRegiaoVenda RECEBE(INPUT) a descrição da região de venda que será usada na leitura
'objRegiaoVenda RETORNA(OUTPUT) os dados lidos do BD

Dim lErro As Long
Dim lComando As Long
Dim tRegiaoVenda As typeRegiaoVenda

On Error GoTo Erro_RegiaoVenda_Le_Descricao

    'inicializa o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 98837
    
    'inicializa as strings
    tRegiaoVenda.sDescricao = String(STRING_REGIAO_VENDA_DESCRICAO, 0)
    tRegiaoVenda.sGerente = String(STRING_REGIAO_VENDA_GERENTE, 0)
    
    'le a tabela RegioesVenda afim de obter um conjunto unitarios de registro da mesma...
    lErro = Comando_Executar(lComando, "SELECT Codigo, Descricao, CodigoPais, Gerente FROM RegioesVendas WHERE Descricao = ?", tRegiaoVenda.iCodigo, tRegiaoVenda.sDescricao, tRegiaoVenda.iCodigoPais, tRegiaoVenda.sGerente, objRegiaoVenda.sDescricao)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 98838
    
    'busca o registro obtido anteriormente
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 98839
    
    'se nao achou...
    If lErro <> AD_SQL_SUCESSO Then gError 98828
    
    'Guarda os dados no obj
    With objRegiaoVenda
    
        .iCodigo = tRegiaoVenda.iCodigo
        .iCodigoPais = tRegiaoVenda.iCodigoPais
        .sDescricao = tRegiaoVenda.sDescricao
        .sGerente = tRegiaoVenda.sGerente
    
    End With
    
    'fecha o comando
    Call Comando_Fechar(lComando)
    
    RegiaoVenda_Le_Descricao = SUCESSO
    
    Exit Function

Erro_RegiaoVenda_Le_Descricao:

    RegiaoVenda_Le_Descricao = gErr

    Select Case gErr
        
        Case 98828
        
        Case 98837
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 98838, 98839
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_REGIOESVENDAS", gErr, objRegiaoVenda.sDescricao)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, 148484)
            
    End Select
    
    'fecha o comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function RegiaoVenda_Le(ByVal objRegiaoVenda As ClassRegiaoVenda) As Long
'le os dados da Regiao de Venda, cujo codigo foi passado como parametro

Dim lErro As Long
Dim lComando As Long
Dim tRegiaoVenda As typeRegiaoVenda

On Error GoTo Erro_RegiaoVenda_Le

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 16134

    tRegiaoVenda.sDescricao = String(STRING_REGIAO_VENDA_DESCRICAO, 0)
    tRegiaoVenda.sGerente = String(STRING_REGIAO_VENDA_GERENTE, 0)
    tRegiaoVenda.sUsuarioCobrador = String(STRING_USUARIO_CODIGO, 0)
    tRegiaoVenda.sUsuRespCallCenter = String(STRING_USUARIO_CODIGO, 0)

    'pesquisa regiao de vendas no BD
    lErro = Comando_Executar(lComando, "SELECT  Descricao, CodigoPais, Gerente, UsuarioCobrador, UsuRespCallCenter FROM RegioesVendas WHERE Codigo = ? ", tRegiaoVenda.sDescricao, tRegiaoVenda.iCodigoPais, tRegiaoVenda.sGerente, tRegiaoVenda.sUsuarioCobrador, tRegiaoVenda.sUsuRespCallCenter, objRegiaoVenda.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 16135

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 16136

    If lErro = AD_SQL_SEM_DADOS Then Error 16137

    objRegiaoVenda.sDescricao = tRegiaoVenda.sDescricao
    objRegiaoVenda.iCodigoPais = tRegiaoVenda.iCodigoPais
    objRegiaoVenda.sGerente = tRegiaoVenda.sGerente
    objRegiaoVenda.sUsuarioCobrador = tRegiaoVenda.sUsuarioCobrador
    objRegiaoVenda.sUsuRespCallCenter = tRegiaoVenda.sUsuRespCallCenter

    lErro = Comando_Fechar(lComando)

    RegiaoVenda_Le = SUCESSO

    Exit Function

Erro_RegiaoVenda_Le:

    RegiaoVenda_Le = Err

    Select Case Err

        Case 16134
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 16135, 16136
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_REGIOESVENDAS", Err, objRegiaoVenda.iCodigo)

        Case 16137
            'Erro será tratado na rotina chamadora

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148485)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function Vendedores_Le_Regiao(ByVal iCodigo As Integer) As Long
'Verifica se existem vendedores relacionados ao codigo da regiao de venda passado como parametro

Dim lErro As Long
Dim lComando As Long
Dim iCodigo1 As Integer

On Error GoTo Erro_Vendedores_Le_Regiao

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 16169

    'pesquisa vendedores no BD
    lErro = Comando_Executar(lComando, "SELECT CodRegiao FROM Vendedores WHERE CodRegiao = ? ", iCodigo1, iCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 16170

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 16171

    If lErro = AD_SQL_SEM_DADOS Then Error 16172

    lErro = Comando_Fechar(lComando)

    Vendedores_Le_Regiao = SUCESSO

    Exit Function

Erro_Vendedores_Le_Regiao:

    Vendedores_Le_Regiao = Err

    Select Case Err

        Case 16169
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 16170, 16171
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_VENDEDORES", Err)

        Case 16172

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148486)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function TiposDeCliente_Le_Regiao(ByVal iCodigo As Integer) As Long
'Verifica se existem tipos de clientes relacionados ao codigo da regiao de venda passado como parametro

Dim lErro As Long
Dim lComando As Long
Dim iCodigo1 As Integer

On Error GoTo Erro_TiposDeCliente_Le_Regiao

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 16177

    'pesquisa tipos de cliente no BD
    lErro = Comando_Executar(lComando, "SELECT Regiao FROM TiposDeCliente WHERE Regiao = ? ", iCodigo1, iCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 16178

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 16179

    If lErro = AD_SQL_SEM_DADOS Then Error 16180

    lErro = Comando_Fechar(lComando)

    TiposDeCliente_Le_Regiao = SUCESSO

    Exit Function

Erro_TiposDeCliente_Le_Regiao:

    TiposDeCliente_Le_Regiao = Err

    Select Case Err

        Case 16177
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 16178, 16179
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOSDECLIENTE", Err)

        Case 16180

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148487)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function FiliaisClientes_Le_Regiao(ByVal iCodigo As Integer) As Long
'Verifica se existem filiais clientes relacionadas ao codigo da regiao de venda passado como parametro

Dim lErro As Long
Dim lComando As Long
Dim iCodigo1 As Integer

On Error GoTo Erro_FiliaisClientes_Le_Regiao

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 16173

    'pesquisa filiais clientes no BD
    lErro = Comando_Executar(lComando, "SELECT Regiao FROM FiliaisClientes WHERE Regiao = ? ", iCodigo1, iCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 16174

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 16175

    If lErro = AD_SQL_SEM_DADOS Then Error 16176

    lErro = Comando_Fechar(lComando)

    FiliaisClientes_Le_Regiao = SUCESSO

    Exit Function

Erro_FiliaisClientes_Le_Regiao:

    FiliaisClientes_Le_Regiao = Err

    Select Case Err

        Case 16173
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 16174, 16175
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIAISCLIENTES", Err)

        Case 16176

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148488)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function Fornecedor_Le_NomeReduzido(ByVal objFornecedor As ClassFornecedor) As Long
'Le o Fornecedor (e dados da matriz) a partir do NomeReduzido fornecido em objFornecedor. Devolve os dados em objFornecedor

'*** ALTERADA EM 26/06/2001 POR LUIZ GUSTAVO DE FREITAS NOGUEIRA ***
'Incluído código para leitura do Campo ContaFornConsig
'*******************************************************************

Dim lComando1 As Long
Dim lComando2 As Long
Dim lErro As Long
Dim tFornecedor As typeFornecedor

On Error GoTo Erro_Fornecedor_Le_NomeReduzido

    lComando1 = 0
    lComando2 = 0

    tFornecedor.sRazaoSocial = String(STRING_FORNECEDOR_RAZAO_SOC, 0)
    tFornecedor.sObservacao = String(STRING_FORNECEDOR_OBS, 0)
    tFornecedor.sCgc = String(STRING_CGC, 0)
    tFornecedor.sIdEstrangeiro = String(STRING_ID_ESTRANGEIRO, 0)
    tFornecedor.sInscricaoEstadual = String(STRING_INSCR_EST, 0)
    tFornecedor.sInscricaoSuframa = String(STRING_INSCR_SUF, 0)
    tFornecedor.sInscricaoMunicipal = String(STRING_INSCR_MUN, 0)
    tFornecedor.sContaContabil = String(STRING_CONTA, 0)
    tFornecedor.sContaFornConsig = String(STRING_CONTA, 0)
    tFornecedor.sAgencia = String(STRING_AGENCIA, 0)
    tFornecedor.sContaCorrente = String(STRING_CONTA_CORRENTE, 0)
    tFornecedor.sObservacao2 = String(STRING_FILIAL_FORNECEDOR_OBS, 0)
    tFornecedor.sInscricaoINSS = String(STRING_INSCR_INSS, 0)
    tFornecedor.sContaDespesa = String(STRING_CONTA, 0)
    tFornecedor.sNatureza = String(STRING_NATMOVCTA_CODIGO, 0)

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 6678

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 6679

    'Pega os dados da tabela Fornecedores
    lErro = Comando_Executar(lComando1, "SELECT Codigo, RazaoSocial, Tipo, Observacao, CondicaoPagto, Desconto, ProxCodFilial, Ativo, Natureza FROM Fornecedores WHERE NomeReduzido = ?", _
        tFornecedor.lCodigo, tFornecedor.sRazaoSocial, tFornecedor.iTipo, tFornecedor.sObservacao, tFornecedor.iCondicaoPagto, tFornecedor.dDesconto, tFornecedor.iProxCodFilial, tFornecedor.iAtivo, tFornecedor.sNatureza, objFornecedor.sNomeReduzido)
    If lErro <> AD_SQL_SUCESSO Then Error 6680

    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 6685

    If lErro = AD_SQL_SEM_DADOS Then Error 6681

    objFornecedor.lCodigo = tFornecedor.lCodigo
    objFornecedor.sRazaoSocial = tFornecedor.sRazaoSocial
    objFornecedor.iTipo = tFornecedor.iTipo
    objFornecedor.sObservacao = tFornecedor.sObservacao
    objFornecedor.iCondicaoPagto = tFornecedor.iCondicaoPagto
    objFornecedor.dDesconto = tFornecedor.dDesconto
    objFornecedor.iProxCodFilial = tFornecedor.iProxCodFilial
    objFornecedor.iAtivo = tFornecedor.iAtivo
    objFornecedor.sNatureza = tFornecedor.sNatureza

    'Pega os dados da tabela Filiais Fornecedores
    lErro = Comando_Executar(lComando2, "SELECT  Endereco, CGC, IdEstrangeiro, InscricaoEstadual,InscricaoSuframa, InscricaoMunicipal, ContaContabil, ContaFornConsig, Banco, Agencia, ContaCorrente, Observacao, TipoFrete, InscricaoINSS, TipoCobranca, GeraCredICMS, ContaDespesa FROM FiliaisFornecedores WHERE CodFornecedor = ? AND CodFilial = ?", _
    tFornecedor.lEndereco, tFornecedor.sCgc, tFornecedor.sIdEstrangeiro, tFornecedor.sInscricaoEstadual, tFornecedor.sInscricaoSuframa, tFornecedor.sInscricaoMunicipal, tFornecedor.sContaContabil, tFornecedor.sContaFornConsig, tFornecedor.iBanco, tFornecedor.sAgencia, tFornecedor.sContaCorrente, tFornecedor.sObservacao2, tFornecedor.iTipoFrete, tFornecedor.sInscricaoINSS, tFornecedor.iTipoCobranca, tFornecedor.iGeraCredICMS, tFornecedor.sContaDespesa, objFornecedor.lCodigo, FILIAL_MATRIZ)

    If lErro <> AD_SQL_SUCESSO Then Error 6682

    lErro = Comando_BuscarPrimeiro(lComando2)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 6683

    If lErro = AD_SQL_SEM_DADOS Then Error 6684

    objFornecedor.lEndereco = tFornecedor.lEndereco
    objFornecedor.sCgc = tFornecedor.sCgc
    objFornecedor.sIdEstrangeiro = tFornecedor.sIdEstrangeiro
    objFornecedor.sInscricaoEstadual = tFornecedor.sInscricaoEstadual
    objFornecedor.sInscricaoMunicipal = tFornecedor.sInscricaoMunicipal
    objFornecedor.sInscricaoSuframa = tFornecedor.sInscricaoSuframa
    objFornecedor.sContaContabil = tFornecedor.sContaContabil
    objFornecedor.sContaFornConsig = tFornecedor.sContaFornConsig
    objFornecedor.iBanco = tFornecedor.iBanco
    objFornecedor.sAgencia = tFornecedor.sAgencia
    objFornecedor.sContaCorrente = tFornecedor.sContaCorrente
    objFornecedor.sObservacao2 = tFornecedor.sObservacao2
    objFornecedor.iTipoFrete = tFornecedor.iTipoFrete
    objFornecedor.sInscricaoINSS = tFornecedor.sInscricaoINSS
    objFornecedor.iTipoCobranca = tFornecedor.iTipoCobranca
    objFornecedor.iGeraCredICMS = tFornecedor.iGeraCredICMS
    objFornecedor.sContaDespesa = tFornecedor.sContaDespesa

    lErro = Comando_Fechar(lComando1)
    lErro = Comando_Fechar(lComando2)

    Fornecedor_Le_NomeReduzido = SUCESSO

    Exit Function

Erro_Fornecedor_Le_NomeReduzido:

    Fornecedor_Le_NomeReduzido = Err

    Select Case Err

        Case 6678, 6679
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 6680, 6685
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FORNECEDORES", Err)

        Case 6681 'Fornecedor nao cadastrado em Fornecedores

        Case 6682, 6683
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIAISFORNECEDORES", Err)

        Case 6684
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECEDOR_SEM_FILIAL", Err, objFornecedor.lCodigo)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148489)

    End Select

    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)

    Exit Function

End Function

Function Fornecedor_Le_Cgc(ByVal objFornecedor As ClassFornecedor, iCodFilial As Integer) As Long
'Le o Fornecedor a partir do Cgc fornecido em objFornecedor. Devolve os dados em objFornecedor
'Devolve combinação de Fornecedor + FilialFornecedor com este CGC
'Devolve o código da filial em iCodFilial

'*** ALTERADA EM 26/06/2001 POR LUIZ GUSTAVO DE FREITAS NOGUEIRA ***
'Incluído código para leitura do Campo ContaFornConsig
'*******************************************************************

Dim lComando1 As Long
Dim lComando2 As Long
Dim lErro As Long
Dim tFornecedor As typeFornecedor

On Error GoTo Erro_Fornecedor_Le_Cgc

    lComando1 = 0
    lComando2 = 0

    tFornecedor.sRazaoSocial = String(STRING_FORNECEDOR_RAZAO_SOC, 0)
    tFornecedor.sNomeReduzido = String(STRING_FORNECEDOR_NOME_REDUZIDO, 0)
    tFornecedor.sObservacao = String(STRING_FORNECEDOR_OBS, 0)
    tFornecedor.sInscricaoEstadual = String(STRING_INSCR_EST, 0)
    tFornecedor.sInscricaoMunicipal = String(STRING_INSCR_MUN, 0)
    tFornecedor.sInscricaoSuframa = String(STRING_INSCR_SUF, 0)
    tFornecedor.sContaContabil = String(STRING_CONTA, 0)
    tFornecedor.sContaFornConsig = String(STRING_CONTA, 0)
    tFornecedor.sAgencia = String(STRING_AGENCIA, 0)
    tFornecedor.sContaCorrente = String(STRING_CONTA_CORRENTE, 0)
    tFornecedor.sObservacao2 = String(STRING_FILIAL_FORNECEDOR_OBS, 0)
    tFornecedor.sInscricaoINSS = String(STRING_INSCR_INSS, 0)
    tFornecedor.sNatureza = String(STRING_NATMOVCTA_CODIGO, 0)
    
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 6690

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 6691

    'Pega os dados da tabela Filiais Fornecedores
    lErro = Comando_Executar(lComando1, "SELECT CodFornecedor, CodFilial, Endereco, InscricaoEstadual,InscricaoSuframa, InscricaoMunicipal, ContaContabil, ContaFornConsig, Banco, Agencia, ContaCorrente, Observacao, InscricaoINSS FROM FiliaisFornecedores WHERE CGC=?", _
    tFornecedor.lCodigo, iCodFilial, tFornecedor.lEndereco, tFornecedor.sInscricaoEstadual, tFornecedor.sInscricaoSuframa, tFornecedor.sInscricaoMunicipal, tFornecedor.sContaContabil, tFornecedor.sContaFornConsig, tFornecedor.iBanco, tFornecedor.sAgencia, tFornecedor.sContaCorrente, tFornecedor.sObservacao2, tFornecedor.sInscricaoINSS, objFornecedor.sCgc)

    If lErro <> AD_SQL_SUCESSO Then Error 6692

    lErro = Comando_BuscarPrimeiro(lComando1)
    
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 6693
    If lErro = AD_SQL_SEM_DADOS Then Error 6694

    objFornecedor.lCodigo = tFornecedor.lCodigo
    objFornecedor.lEndereco = tFornecedor.lEndereco
    objFornecedor.sInscricaoEstadual = tFornecedor.sInscricaoEstadual
    objFornecedor.sInscricaoMunicipal = tFornecedor.sInscricaoMunicipal
    objFornecedor.sInscricaoSuframa = tFornecedor.sInscricaoSuframa
    objFornecedor.sContaContabil = tFornecedor.sContaContabil
    objFornecedor.sContaFornConsig = tFornecedor.sContaFornConsig
    objFornecedor.iBanco = tFornecedor.iBanco
    objFornecedor.sAgencia = tFornecedor.sAgencia
    objFornecedor.sContaCorrente = tFornecedor.sContaCorrente
    objFornecedor.sObservacao2 = tFornecedor.sObservacao2
    objFornecedor.sInscricaoINSS = tFornecedor.sInscricaoINSS

    'Pega os dados da tabela Fornecedores
    lErro = Comando_Executar(lComando2, "SELECT RazaoSocial, NomeReduzido, Tipo, Observacao, CondicaoPagto, Desconto, ProxCodFilial, Ativo, Natureza FROM Fornecedores WHERE Codigo = ?", _
        tFornecedor.sRazaoSocial, tFornecedor.sNomeReduzido, tFornecedor.iTipo, tFornecedor.sObservacao, tFornecedor.iCondicaoPagto, tFornecedor.dDesconto, tFornecedor.iProxCodFilial, tFornecedor.iAtivo, tFornecedor.sNatureza, objFornecedor.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 6695

    lErro = Comando_BuscarPrimeiro(lComando2)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 6696

    If lErro = AD_SQL_SEM_DADOS Then Error 6697

    objFornecedor.sRazaoSocial = tFornecedor.sRazaoSocial
    objFornecedor.sNomeReduzido = tFornecedor.sNomeReduzido
    objFornecedor.iTipo = tFornecedor.iTipo
    objFornecedor.sObservacao = tFornecedor.sObservacao
    objFornecedor.iCondicaoPagto = tFornecedor.iCondicaoPagto
    objFornecedor.dDesconto = tFornecedor.dDesconto
    objFornecedor.iProxCodFilial = tFornecedor.iProxCodFilial
    objFornecedor.iAtivo = tFornecedor.iAtivo
    objFornecedor.sNatureza = tFornecedor.sNatureza

    lErro = Comando_Fechar(lComando1)
    lErro = Comando_Fechar(lComando2)

    Fornecedor_Le_Cgc = SUCESSO

Exit Function

Erro_Fornecedor_Le_Cgc:

    Fornecedor_Le_Cgc = Err

    Select Case Err

        Case 6690, 6691
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 6692, 6693
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIAISFORNECEDORES", Err)

        Case 6694  'Não existe FilialFornecedor com este CGC

        Case 6695, 6696
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FORNECEDORES", Err)

        Case 6697
            Call Rotina_Erro(vbOKOnly, "ERRO_FILIAL_DESASSOCIADA_FORNECEDOR", Err, objFornecedor.sCgc)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148490)

    End Select

    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)

    Exit Function

End Function

Function FiliaisFornecedores_Le_Fornecedor(ByVal objFornecedor As ClassFornecedor, ByVal colCodigoNome As AdmColCodigoNome) As Long
'Le na tabela FiliaisFornecedores todos os Codigos e Nomes de Filiais
'relacionadas ao objFornecedor. Retorna na colecao colCodigoNome

Dim lComando As Long
Dim iCodFilial As Integer
Dim sNome As String
Dim lErro As Long

On Error GoTo Erro_FiliaisFornecedores_Le_Fornecedor

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 6686

    sNome = String(STRING_FILIAL_FORNECEDOR_NOME, 0)

    lErro = Comando_Executar(lComando, "SELECT CodFilial, Nome FROM FiliaisFornecedores WHERE CodFornecedor=? ORDER BY CodFilial", iCodFilial, sNome, objFornecedor.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 6687

    'le a primeira filial
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 6688
    If lErro = AD_SQL_SEM_DADOS Then Error 6698

    Do While lErro <> AD_SQL_SEM_DADOS

        'coloca a filial lida na coleção
        colCodigoNome.Add iCodFilial, sNome

        'le a proxima filial
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 6689

    Loop

    lErro = Comando_Fechar(lComando)

    FiliaisFornecedores_Le_Fornecedor = SUCESSO

    Exit Function

Erro_FiliaisFornecedores_Le_Fornecedor:

    FiliaisFornecedores_Le_Fornecedor = Err

    Select Case Err

        Case 6686
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 6687, 6688, 6689
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIAISFORNECEDORES", Err)

        Case 6698
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECEDOR_SEM_FILIAL", Err, objFornecedor.lCodigo)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148491)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function FiliaisClientes_Le_Cliente(ByVal objCliente As ClassCliente, ByVal colCodigoNome As AdmColCodigoNome) As Long
'Le na tabela FiliaisClientes todos os Codigos e Nomes de Filiais
'relacionadas ao objCliente. Retorna na colecao colCodigoNome

Dim lComando As Long
Dim iCodFilial As Integer
Dim sNome As String
Dim lErro As Long
Dim lCodigoCliente As Long

On Error GoTo Erro_FiliaisClientes_Le_Cliente

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 6715

    sNome = String(STRING_FILIAL_CLIENTE_NOME, 0)
    
    lCodigoCliente = objCliente.lCodigo
    lErro = Comando_Executar(lComando, "SELECT CodFilial, Nome FROM FiliaisClientes WHERE CodCliente=? AND CodFilial <> 0 ORDER BY CodFilial", iCodFilial, sNome, objCliente.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 6716

    'le a primeira filial
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 6717
    If lErro = AD_SQL_SEM_DADOS Then Error 6718

    Do While lErro <> AD_SQL_SEM_DADOS

        'coloca a filial lida na coleção
        colCodigoNome.Add iCodFilial, sNome

        'le a proxima filial
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 6719

    Loop

    Call Comando_Fechar(lComando)

    FiliaisClientes_Le_Cliente = SUCESSO

    Exit Function

Erro_FiliaisClientes_Le_Cliente:

    FiliaisClientes_Le_Cliente = Err

    Select Case Err

        Case 6715
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 6716, 6717, 6719
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIAISCLIENTES", Err)

        Case 6718
            Call Rotina_Erro(vbOKOnly, "ERRO_CLIENTE_SEM_FILIAL", Err, lCodigoCliente)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148492)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function Enderecos_Le_Cliente(ByVal colEnderecos As ColEndereco, ByVal objCliente As ClassCliente) As Long
'Le cada um dos 3 tipos de enderecos(principal,entrega e cobranca) na tabela Enderecos e coloca na colecao

Dim lErro As Long
Dim objEndereco As ClassEndereco

On Error GoTo Erro_Enderecos_Le_Cliente

    'Endereco Principal

    Set objEndereco = New ClassEndereco

    objEndereco.lCodigo = objCliente.lEndereco

    lErro = CF("Endereco_Le", objEndereco)
    If lErro <> SUCESSO And lErro <> 12309 Then Error 12305

    'colEnderecos.Add objEndereco.sEndereco, objEndereco.sBairro, objEndereco.sCidade, objEndereco.sSiglaEstado, objEndereco.iCodigoPais, objEndereco.sCEP, objEndereco.sTelefone1, objEndereco.sTelefone2, objEndereco.sEmail, objEndereco.sFax, objEndereco.sContato, objEndereco.lCodigo
    colEnderecos.AddObj objEndereco

    'Endereco de Entrega

    Set objEndereco = New ClassEndereco

    objEndereco.lCodigo = objCliente.lEnderecoEntrega

    lErro = CF("Endereco_Le", objEndereco)
    If lErro <> SUCESSO And lErro <> 12309 Then Error 12493

    'colEnderecos.Add objEndereco.sEndereco, objEndereco.sBairro, objEndereco.sCidade, objEndereco.sSiglaEstado, objEndereco.iCodigoPais, objEndereco.sCEP, objEndereco.sTelefone1, objEndereco.sTelefone2, objEndereco.sEmail, objEndereco.sFax, objEndereco.sContato, objEndereco.lCodigo
    colEnderecos.AddObj objEndereco
    
    'Endereco de Cobranca

    Set objEndereco = New ClassEndereco

    objEndereco.lCodigo = objCliente.lEnderecoCobranca

    lErro = CF("Endereco_Le", objEndereco)
    If lErro <> SUCESSO And lErro <> 12309 Then Error 12492

    'colEnderecos.Add objEndereco.sEndereco, objEndereco.sBairro, objEndereco.sCidade, objEndereco.sSiglaEstado, objEndereco.iCodigoPais, objEndereco.sCEP, objEndereco.sTelefone1, objEndereco.sTelefone2, objEndereco.sEmail, objEndereco.sFax, objEndereco.sContato, objEndereco.lCodigo
    colEnderecos.AddObj objEndereco

    Enderecos_Le_Cliente = SUCESSO

Exit Function

Erro_Enderecos_Le_Cliente:

    Enderecos_Le_Cliente = Err

    Select Case Err

        Case 12305, 12492, 12493

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148493)

    End Select

    Exit Function

End Function

Function Endereco_Le(ByVal objEndereco As ClassEndereco, Optional ByVal lComandoP As Long = 0) As Long
'le o endereco a partir da chave fornecida em objEndereco. Devolve os dados em objEndereco

Dim lComando As Long
Dim lErro As Long
Dim tEndereco As typeEndereco

On Error GoTo Erro_Endereco_Le

    If lComandoP <> 0 Then
        lComando = lComandoP
    Else
        lComando = Comando_Abrir()
        If lComando = 0 Then Error 12306
    End If

    tEndereco.sEndereco = String(STRING_ENDERECO, 0)
    tEndereco.sBairro = String(STRING_BAIRRO, 0)
    tEndereco.sCidade = String(STRING_CIDADE, 0)
    tEndereco.sSiglaEstado = String(STRING_ESTADO, 0)
    tEndereco.sCEP = String(STRING_CEP, 0)
    tEndereco.sTelefone1 = String(STRING_TELEFONE, 0)
    tEndereco.sTelefone2 = String(STRING_TELEFONE, 0)
    tEndereco.sEmail = String(STRING_EMAIL, 0)
    tEndereco.sFax = String(STRING_FAX, 0)
    tEndereco.sContato = String(STRING_CONTATO, 0)

    tEndereco.sReferencia = String(STRING_ENDERECO_REFERENCIA, 0)
    tEndereco.sLogradouro = String(STRING_ENDERECO_LOGRADOURO, 0)
    tEndereco.sComplemento = String(STRING_ENDERECO_COMPLEMENTO, 0)
    tEndereco.sTipoLogradouro = String(STRING_ENDERECO_TIPOLOGRADOURO, 0)
    tEndereco.sEmail2 = String(STRING_EMAIL, 0)
    tEndereco.sTelNumero1 = String(STRING_TELEFONE, 0)
    tEndereco.sTelNumero2 = String(STRING_TELEFONE, 0)
    tEndereco.sFaxNumero = String(STRING_FAX, 0)

     'Verifica se o endereco existe, e se existir carrega seus dados em objEndereco
    lErro = Comando_Executar(lComando, "SELECT Endereco, Bairro, Cidade, SiglaEstado, CodigoPais, CEP, telefone1, telefone2, Email, Fax, Contato, Referencia,Logradouro,Complemento,TipoLogradouro,Email2,Numero,TelDDD1,TelDDD2,FaxDDD,TelNumero1,TelNumero2,FaxNumero FROM Enderecos WHERE Codigo = ?", tEndereco.sEndereco, tEndereco.sBairro, tEndereco.sCidade, tEndereco.sSiglaEstado, tEndereco.iCodigoPais, tEndereco.sCEP, tEndereco.sTelefone1, tEndereco.sTelefone2, tEndereco.sEmail, tEndereco.sFax, tEndereco.sContato, tEndereco.sReferencia, tEndereco.sLogradouro, tEndereco.sComplemento, tEndereco.sTipoLogradouro, tEndereco.sEmail2, tEndereco.lNumero, tEndereco.iTelDDD1, tEndereco.iTelDDD2, tEndereco.iFaxDDD, tEndereco.sTelNumero1, tEndereco.sTelNumero2, tEndereco.sFaxNumero, objEndereco.lCodigo)

    If lErro <> AD_SQL_SUCESSO Then Error 12307

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 12308

    'Endereco não está cadastrado
    If lErro = AD_SQL_SEM_DADOS Then Error 12309

    objEndereco.sEndereco = tEndereco.sEndereco
    objEndereco.sBairro = tEndereco.sBairro
    objEndereco.sCidade = tEndereco.sCidade
    objEndereco.sSiglaEstado = tEndereco.sSiglaEstado
    objEndereco.iCodigoPais = tEndereco.iCodigoPais
    objEndereco.sCEP = tEndereco.sCEP
    objEndereco.sTelefone1 = tEndereco.sTelefone1
    objEndereco.sTelefone2 = tEndereco.sTelefone2
    objEndereco.sEmail = tEndereco.sEmail
    objEndereco.sFax = tEndereco.sFax
    objEndereco.sContato = tEndereco.sContato
    
    objEndereco.sReferencia = tEndereco.sReferencia
    objEndereco.sLogradouro = tEndereco.sLogradouro
    objEndereco.sComplemento = tEndereco.sComplemento
    objEndereco.sTipoLogradouro = tEndereco.sTipoLogradouro
    objEndereco.sEmail2 = tEndereco.sEmail2
    objEndereco.lNumero = tEndereco.lNumero
    objEndereco.iTelDDD1 = tEndereco.iTelDDD1
    objEndereco.iTelDDD2 = tEndereco.iTelDDD2
    objEndereco.iFaxDDD = tEndereco.iFaxDDD
    objEndereco.sTelNumero1 = tEndereco.sTelNumero1
    objEndereco.sTelNumero2 = tEndereco.sTelNumero2
    objEndereco.sFaxNumero = tEndereco.sFaxNumero
    
    If Len(Trim(objEndereco.sLogradouro)) = 0 Then objEndereco.sLogradouro = objEndereco.sEndereco
    If Len(Trim(objEndereco.sTelNumero1)) = 0 Then objEndereco.sTelNumero1 = objEndereco.sTelefone1
    If Len(Trim(objEndereco.sTelNumero2)) = 0 Then objEndereco.sTelNumero2 = objEndereco.sTelefone2
    If Len(Trim(objEndereco.sFaxNumero)) = 0 Then objEndereco.sFaxNumero = objEndereco.sFax

    If lComandoP = 0 Then
        Call Comando_Fechar(lComando)
    End If

    Endereco_Le = SUCESSO

Exit Function

Erro_Endereco_Le:

    Endereco_Le = Err

    Select Case Err

        Case 12306
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 12307, 12308
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ENDERECOS", Err)

        Case 12309 'Endereco nao cadastrado

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148494)

    End Select

    If lComandoP = 0 Then
        Call Comando_Fechar(lComando)
    End If
    
    Exit Function

End Function

Function TipoCliente_Le(ByVal objTipoCliente As ClassTipoCliente) As Long
'Le todos os dados da tabela TipoCliente, correspondente a chave passada por parametro

Dim lComando As Long
Dim lErro As Long
Dim tTipoCliente As typeTipoCliente

On Error GoTo Erro_TipoCliente_Le

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 19059

    tTipoCliente.sDescricao = String(STRING_TIPO_CLIENTE_DESCRICAO, 0)
    tTipoCliente.sObservacao = String(STRING_TIPO_CLIENTE_OBS, 0)
    tTipoCliente.sContaContabil = String(STRING_CONTA, 0)

    'Pega os dados da tabela TiposDeClientes
    lErro = Comando_Executar(lComando, "SELECT Descricao, LimiteCredito, CondicaoPagto, Desconto, CodMensagem, TabelaPreco, Observacao, ContaContabil, Vendedor, ComissaoVendas, Regiao, FreqVisitas, CodTransportadora, CodCobrador, PadraoCobranca FROM TiposDeCliente WHERE Codigo = ? ", _
    tTipoCliente.sDescricao, tTipoCliente.dLimiteCredito, tTipoCliente.iCondicaoPagto, tTipoCliente.dDesconto, tTipoCliente.iCodMensagem, tTipoCliente.iTabelaPreco, tTipoCliente.sObservacao, tTipoCliente.sContaContabil, tTipoCliente.iVendedor, tTipoCliente.dComissaoVendas, tTipoCliente.iRegiao, tTipoCliente.iFreqVisitas, tTipoCliente.iCodTransportadora, tTipoCliente.iCodCobrador, tTipoCliente.iPadraoCobranca, objTipoCliente.iCodigo)

    If lErro <> AD_SQL_SUCESSO Then Error 19060

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 19061

    If lErro = AD_SQL_SEM_DADOS Then Error 19062

    objTipoCliente.sDescricao = tTipoCliente.sDescricao
    objTipoCliente.dLimiteCredito = tTipoCliente.dLimiteCredito
    objTipoCliente.iCondicaoPagto = tTipoCliente.iCondicaoPagto
    objTipoCliente.dDesconto = tTipoCliente.dDesconto
    objTipoCliente.iCodMensagem = tTipoCliente.iCodMensagem
    objTipoCliente.iTabelaPreco = tTipoCliente.iTabelaPreco
    objTipoCliente.sObservacao = tTipoCliente.sObservacao
    objTipoCliente.sContaContabil = tTipoCliente.sContaContabil
    objTipoCliente.iVendedor = tTipoCliente.iVendedor
    objTipoCliente.dComissaoVendas = tTipoCliente.dComissaoVendas
    objTipoCliente.iRegiao = tTipoCliente.iRegiao
    objTipoCliente.iFreqVisitas = tTipoCliente.iFreqVisitas
    objTipoCliente.iCodTransportadora = tTipoCliente.iCodTransportadora
    objTipoCliente.iCodCobrador = tTipoCliente.iCodCobrador
    objTipoCliente.iPadraoCobranca = tTipoCliente.iPadraoCobranca

    lErro = Comando_Fechar(lComando)

    TipoCliente_Le = SUCESSO

    Exit Function

Erro_TipoCliente_Le:

    TipoCliente_Le = Err

    Select Case Err

        Case 19059
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 19060, 19061
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOCLIENTE", Err)

        Case 19062 'nao encontrou o Tipo Cliente (sem dados)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148495)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function Vendedor_Le(ByVal objVendedor As ClassVendedor, Optional ByVal lComandoP As Long = 0) As Long
'Le todos os dados da tabela Vendedores, correspondente ao codigo do vendedor passado por parametro
'Incluido leitura do campo Vinculo por Mauricio Maciel em 11/04/03

Dim lComando As Long
Dim lErro As Long
Dim tVendedor As typeVendedor

On Error GoTo Erro_Vendedor_Le

    If lComandoP = 0 Then
        'Abre comando
        lComando = Comando_Abrir()
        If lComando = 0 Then Error 12579
    Else
        lComando = lComandoP
    End If

    'Prepara variáveis string para receber conteúdo do BD
    tVendedor.sNome = String(STRING_VENDEDOR_NOME, 0)
    tVendedor.sNomeReduzido = String(STRING_VENDEDOR_NOME_REDUZIDO, 0)
    tVendedor.sMatricula = String(STRING_VENDEDOR_MATRICULA, 0)
    tVendedor.sAgencia = String(STRING_VENDEDOR_AGENCIA, 0)
    tVendedor.sContaCorrente = String(STRING_VENDEDOR_CONTA_CORRENTE, 0)
    tVendedor.sCgc = String(STRING_CGC, 0)
    tVendedor.sInscricaoEstadual = String(STRING_INSCR_EST, 0)
    tVendedor.sRazaoSocial = String(STRING_RAZAO_SOCIAL, 0)
    tVendedor.sCodUsuario = String(STRING_USUARIO_CODIGO, 0)
    tVendedor.sRG = String(STRING_RG, 0)
    
    'Seleciona os dados da tabela Vendedores
    lErro = Comando_Executar(lComando, "SELECT Nome, NomeReduzido, Endereco, Tipo, Matricula, CodRegiao, PercComissao, PercComissaoBaixa, PercComissaoEmissao, ComissaoSobreTotal, ComissaoFrete, ComissaoICM, ComissaoIPI, ComissaoSeguro, Banco, Agencia, ContaCorrente, Ativo, Vinculo, CGC, InscricaoEstadual, RazaoSocial, Cargo, Superior, CodUsuario, RG FROM Vendedores WHERE Codigo = ? ", _
        tVendedor.sNome, tVendedor.sNomeReduzido, tVendedor.lEndereco, tVendedor.iTipo, tVendedor.sMatricula, tVendedor.iCodRegiao, tVendedor.dPercComissao, tVendedor.dPercComissaoBaixa, tVendedor.dPercComissaoEmissao, tVendedor.iComissaoSobreTotal, tVendedor.iComissaoFrete, tVendedor.iComissaoICM, tVendedor.iComissaoIPI, tVendedor.iComissaoSeguro, tVendedor.iBanco, tVendedor.sAgencia, tVendedor.sContaCorrente, tVendedor.iAtivo, tVendedor.iVinculo, tVendedor.sCgc, tVendedor.sInscricaoEstadual, tVendedor.sRazaoSocial, tVendedor.iCargo, tVendedor.iSuperior, tVendedor.sCodUsuario, tVendedor.sRG, objVendedor.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 12580

    'Tenta ler
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 12581

    'Vendedor não existe ---> erro
    If lErro = AD_SQL_SEM_DADOS Then Error 12582

    'Passa dados lidas para objVendedor
    objVendedor.sNome = tVendedor.sNome
    objVendedor.sNomeReduzido = tVendedor.sNomeReduzido
    objVendedor.lEndereco = tVendedor.lEndereco
    objVendedor.iTipo = tVendedor.iTipo
    objVendedor.sMatricula = tVendedor.sMatricula
    objVendedor.iCodRegiao = tVendedor.iCodRegiao
    objVendedor.dPercComissao = tVendedor.dPercComissao
    objVendedor.dPercComissaoBaixa = tVendedor.dPercComissaoBaixa
    objVendedor.dPercComissaoEmissao = tVendedor.dPercComissaoEmissao
    objVendedor.iComissaoSobreTotal = tVendedor.iComissaoSobreTotal
    objVendedor.iComissaoFrete = tVendedor.iComissaoFrete
    objVendedor.iComissaoICM = tVendedor.iComissaoICM
    objVendedor.iComissaoIPI = tVendedor.iComissaoIPI
    objVendedor.iComissaoSeguro = tVendedor.iComissaoSeguro
    objVendedor.iBanco = tVendedor.iBanco
    objVendedor.sAgencia = tVendedor.sAgencia
    objVendedor.sContaCorrente = tVendedor.sContaCorrente
    objVendedor.iAtivo = tVendedor.iAtivo
    objVendedor.iVinculo = tVendedor.iVinculo
    objVendedor.sCgc = tVendedor.sCgc
    objVendedor.sInscricaoEstadual = tVendedor.sInscricaoEstadual
    objVendedor.sRazaoSocial = tVendedor.sRazaoSocial
    objVendedor.iCargo = tVendedor.iCargo
    objVendedor.iSuperior = tVendedor.iSuperior
    objVendedor.sCodUsuario = tVendedor.sCodUsuario
    objVendedor.sRG = tVendedor.sRG
    
    'Fecha comando
    If lComandoP = 0 Then Call Comando_Fechar(lComando)

    Vendedor_Le = SUCESSO

    Exit Function

Erro_Vendedor_Le:

    Vendedor_Le = Err

    Select Case Err

        Case 12579
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 12580, 12581
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_VENDEDOR", Err, objVendedor.iCodigo)

        Case 12582 'Não existe o vendedor (sem dados)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148496)

    End Select

    If lComandoP = 0 Then Call Comando_Fechar(lComando)

    Exit Function

End Function

Function Vendedor_Le_NomeReduzido(ByVal objVendedor As ClassVendedor, Optional ByVal lComandoP As Long = 0) As Long
'Lê os dados do Vendedor, correspondente ao NomeReduzido passado por parâmetro
'Incluido leitura do campo Vinculo por Mauricio Maciel em 11/04/03

Dim lComando As Long
Dim lErro As Long
Dim tVendedor As typeVendedor

On Error GoTo Erro_Vendedor_Le_NomeReduzido

    If lComandoP = 0 Then
        'Abre comando
        lComando = Comando_Abrir()
        If lComando = 0 Then Error 25005
    Else
        lComando = lComandoP
    End If

    'Prepara variáveis tipo String para receber do BD
    tVendedor.sNome = String(STRING_VENDEDOR_NOME, 0)
    tVendedor.sMatricula = String(STRING_VENDEDOR_MATRICULA, 0)
    tVendedor.sAgencia = String(STRING_VENDEDOR_AGENCIA, 0)
    tVendedor.sContaCorrente = String(STRING_VENDEDOR_CONTA_CORRENTE, 0)
    tVendedor.sCgc = String(STRING_CGC, 0)
    tVendedor.sInscricaoEstadual = String(STRING_INSCR_EST, 0)
    tVendedor.sRazaoSocial = String(STRING_RAZAO_SOCIAL, 0)
    tVendedor.sCodUsuario = String(STRING_USUARIO_CODIGO, 0)
    tVendedor.sRG = String(STRING_RG, 0)
    
    'Seleciona Vendedor correspondente ao NomeReduzido
    lErro = Comando_Executar(lComando, "SELECT Codigo, Nome, Endereco, Tipo, Matricula, CodRegiao, PercComissao, PercComissaoBaixa, PercComissaoEmissao, ComissaoSobreTotal, ComissaoFrete, ComissaoICM, ComissaoIPI, Banco, Agencia, ContaCorrente, Ativo, Vinculo, CGC, InscricaoEstadual, RazaoSocial, Cargo, Superior, CodUsuario, RG FROM Vendedores WHERE NomeReduzido = ? ", _
        tVendedor.iCodigo, tVendedor.sNome, tVendedor.lEndereco, tVendedor.iTipo, tVendedor.sMatricula, tVendedor.iCodRegiao, tVendedor.dPercComissao, tVendedor.dPercComissaoBaixa, tVendedor.dPercComissaoEmissao, tVendedor.iComissaoSobreTotal, tVendedor.iComissaoFrete, tVendedor.iComissaoICM, tVendedor.iComissaoIPI, tVendedor.iBanco, tVendedor.sAgencia, tVendedor.sContaCorrente, tVendedor.iAtivo, tVendedor.iVinculo, tVendedor.sCgc, tVendedor.sInscricaoEstadual, tVendedor.sRazaoSocial, tVendedor.iCargo, tVendedor.iSuperior, tVendedor.sCodUsuario, tVendedor.sRG, objVendedor.sNomeReduzido)
    If lErro <> AD_SQL_SUCESSO Then Error 25006

    'Tenta ler
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 25007

    'Se não existe ---> erro
    If lErro = AD_SQL_SEM_DADOS Then Error 25008

    'Passa dados lidos para objVendedor
    objVendedor.iCodigo = tVendedor.iCodigo
    objVendedor.sNome = tVendedor.sNome
    objVendedor.lEndereco = tVendedor.lEndereco
    objVendedor.iTipo = tVendedor.iTipo
    objVendedor.sMatricula = tVendedor.sMatricula
    objVendedor.iCodRegiao = tVendedor.iCodRegiao
    objVendedor.dPercComissao = tVendedor.dPercComissao
    objVendedor.dPercComissaoBaixa = tVendedor.dPercComissaoBaixa
    objVendedor.dPercComissaoEmissao = tVendedor.dPercComissaoEmissao
    objVendedor.iComissaoSobreTotal = tVendedor.iComissaoSobreTotal
    objVendedor.iComissaoFrete = tVendedor.iComissaoFrete
    objVendedor.iComissaoICM = tVendedor.iComissaoICM
    objVendedor.iComissaoIPI = tVendedor.iComissaoIPI
    objVendedor.iBanco = tVendedor.iBanco
    objVendedor.sAgencia = tVendedor.sAgencia
    objVendedor.sContaCorrente = tVendedor.sContaCorrente
    objVendedor.iAtivo = tVendedor.iAtivo
    objVendedor.iVinculo = tVendedor.iVinculo
    objVendedor.sCgc = tVendedor.sCgc
    objVendedor.sInscricaoEstadual = tVendedor.sInscricaoEstadual
    objVendedor.sRazaoSocial = tVendedor.sRazaoSocial
    objVendedor.iCargo = tVendedor.iCargo
    objVendedor.iSuperior = tVendedor.iSuperior
    objVendedor.sCodUsuario = tVendedor.sCodUsuario
    objVendedor.sRG = tVendedor.sRG
     
    'Fecha comando
    If lComandoP = 0 Then Call Comando_Fechar(lComando)

    Vendedor_Le_NomeReduzido = SUCESSO

    Exit Function

Erro_Vendedor_Le_NomeReduzido:

    Vendedor_Le_NomeReduzido = Err

    Select Case Err

        Case 25005
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 25006, 25007
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_VENDEDOR1", Err, objVendedor.sNomeReduzido)

        Case 25008 'Não existe o vendedor (sem dados)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148497)

    End Select

    If lComandoP = 0 Then Call Comando_Fechar(lComando)

    Exit Function

End Function

Function FiliaisClientes_Lock(ByVal lCodigo As Long) As Long
'Faz lock das Filiais Clientes relacionadas ao cliente passado por parametro para garantir a exclusao de um Cliente
'Chamada por Cliente_Exclui DENTRO DE TRANSAÇÃO

Dim lErro As Long
Dim lComando1 As Long
Dim iCodFilial As Integer

On Error GoTo Erro_FiliaisClientes_Lock

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 12734
    
    'Seleciona as Filiais do Cliente a serem lockadas
    lErro = Comando_ExecutarLockado(lComando1, "SELECT CodFilial FROM FiliaisClientes WHERE CodCliente =?", iCodFilial, lCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 12735

    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 12736

    If lErro = AD_SQL_SEM_DADOS Then Error 12737

    Do While lErro = AD_SQL_SUCESSO

        lErro = Comando_LockExclusive(lComando1)
        If lErro <> AD_SQL_SUCESSO Then Error 12738

        lErro = Comando_BuscarProximo(lComando1)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 12736

    Loop

    lErro = Comando_Fechar(lComando1)

    FiliaisClientes_Lock = SUCESSO

    Exit Function

Erro_FiliaisClientes_Lock:

    FiliaisClientes_Lock = Err

    Select Case Err
        
        Case 12734
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
                
        Case 12735, 12736
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIAISCLIENTES", Err)

        Case 12737
            Call Rotina_Erro(vbOKOnly, "ERRO_CLIENTE_SEM_FILIAL", Err, lCodigo)

        Case 12738
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_FILIAISCLIENTES", Err, lCodigo, iCodFilial)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148498)

    End Select

    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Function FiliaisClientes_Le_Tabelas_Lock(ByVal objFilialCliente As ClassFilialCliente) As Long
'Faz o lock das tabelas relacionadas a tabela FiliaisClientes para a gravação de novo Cliente
'CHAMADA EM TRANSAÇÃO por FiliaisClientes_Grava

Dim lComando(6) As Long
Dim lCodigo As Long
Dim iCodigo As Integer
Dim iTipoConta As Integer
Dim iAtivo As Integer
Dim lErro As Long
Dim iIndice As Integer

On Error GoTo Erro_FiliaisClientes_Le_Tabelas_Lock

    'Abrir comandos
    For iIndice = 0 To 5
    
        lComando(iIndice) = Comando_Abrir()
        If lComando(iIndice) = 0 Then Error 12633
        
    Next

    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL And objFilialCliente.lCodCliente = 0 Then

        'Seleciona o Cliente relacionado a Filial para ser lockado
        lErro = Comando_ExecutarLockado(lComando(0), "SELECT Codigo FROM Clientes WHERE FilialEmpresaLoja = ? AND CodigoLoja =?", lCodigo, objFilialCliente.iFilialEmpresaLoja, objFilialCliente.lCodClienteLoja)
        If lErro <> AD_SQL_SUCESSO Then Error 12741

    Else
    
        'Seleciona o Cliente relacionado a Filial para ser lockado
        lErro = Comando_ExecutarLockado(lComando(0), "SELECT Codigo FROM Clientes WHERE Codigo =?", lCodigo, objFilialCliente.lCodCliente)
        If lErro <> AD_SQL_SUCESSO Then Error 12741
    
    End If

    'Tenta ler
    lErro = Comando_BuscarPrimeiro(lComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 12742
    If lErro = AD_SQL_SEM_DADOS Then Error 12743 'Cliente não existe no BD

    'Lock do Cliente
    lErro = Comando_LockShared(lComando(0))
    If lErro <> AD_SQL_SUCESSO Then Error 12744

    'PlanoConta
    If Len(Trim(objFilialCliente.sContaContabil)) > 0 Then
    
        lErro = CF("Conta_Analitica_Lock", objFilialCliente.sContaContabil, MODULO_CONTABILIDADE)
        If lErro <> SUCESSO Then Error 59053
        
    End If

    'Cobrador
    If objFilialCliente.iCodCobrador > 0 Then
    
        lErro = CF("Cobrador_Lock", lComando(2), objFilialCliente.iCodCobrador)
        If lErro <> SUCESSO Then Error 59054
    
    End If
    
    'Transportadora
    If objFilialCliente.iCodTransportadora > 0 Then
    
        lErro = CF("Transportadora_Lock", lComando(3), objFilialCliente.iCodTransportadora)
        If lErro <> SUCESSO Then Error 59055
        
    End If

    'Transportadora de redespacho
    If objFilialCliente.iCodTranspRedesp > 0 Then
    
        lErro = CF("Transportadora_Lock", lComando(3), objFilialCliente.iCodTranspRedesp)
        If lErro <> SUCESSO Then Error 59055
        
    End If

    'Vendedor
    If objFilialCliente.iVendedor > 0 Then
    
        lErro = CF("Vendedor_Lock", lComando(4), objFilialCliente.iVendedor)
        If lErro <> SUCESSO Then Error 59056
        
    End If

    'RegioesVendas
    If objFilialCliente.iRegiao > 0 Then
    
        lErro = CF("RegiaoVenda_Lock", lComando(5), objFilialCliente.iRegiao)
        If lErro <> SUCESSO Then Error 59057
        
    End If

    For iIndice = 0 To 5
        Call Comando_Fechar(lComando(iIndice))
    Next

    FiliaisClientes_Le_Tabelas_Lock = SUCESSO

    Exit Function

Erro_FiliaisClientes_Le_Tabelas_Lock:

    FiliaisClientes_Le_Tabelas_Lock = Err

    Select Case Err

        Case 12633
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 12741, 12742
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CLIENTES", Err)

        Case 12743
            Call Rotina_Erro(vbOKOnly, "ERRO_CLIENTE_NAO_CADASTRADO", Err, objFilialCliente.lCodCliente)

        Case 12744
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CLIENTES", Err, objFilialCliente.lCodCliente)

        Case 59053, 59054, 59055, 59056, 59057
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148499)

    End Select

    For iIndice = 0 To 5
        Call Comando_Fechar(lComando(iIndice))
    Next

    Exit Function

End Function

Function FiliaisClientes_Le_Chave(ByVal colFiliais As ColChaveFilial) As Long
'Le todos os Codigos de Cliente , Codigos de Filiais e Nomes da tabela Filiais de Clientes e coloca na colecao ColFiliais
'serve para construir a treeview de clientes e sua filiais

Dim lComando As Long
Dim lCodCliente As Long
Dim iCodFilial As Integer
Dim sNome As String
Dim lErro As Long

On Error GoTo Erro_FiliaisClientes_Le_Chave

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 12535

    sNome = String(STRING_FILIAL_CLIENTE_NOME, 0)

    lErro = Comando_Executar(lComando, "SELECT CodCliente, CodFilial , Nome FROM FiliaisClientes ORDER BY CodCliente, CodFilial", lCodCliente, iCodFilial, sNome)
    If lErro <> AD_SQL_SUCESSO Then Error 12536

    'le a primeira filial
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 12537

    Do While lErro <> AD_SQL_SEM_DADOS

        'coloca a filial lida na coleção
        colFiliais.Add iCodFilial, lCodCliente, sNome

        'le a proxima filial
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 12538

    Loop

    lErro = Comando_Fechar(lComando)

    FiliaisClientes_Le_Chave = SUCESSO

    Exit Function

Erro_FiliaisClientes_Le_Chave:

    FiliaisClientes_Le_Chave = Err

    Select Case Err

        Case 12535
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 12536, 12537, 12538
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIAISCLIENTES", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148500)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function FilialCliente_Le(ByVal objFilialCliente As ClassFilialCliente, Optional ByVal lComandoP As Long = 0) As Long
'Le todos os dados da tabela FiliaisClientes, correspondente a chave passada por parametro

Dim lComando As Long
Dim lErro As Long
Dim tFilialCliente As typeFilialCliente
Dim iAtivo As Integer
Dim lCodCliente As Long
Dim iCodFilial As Integer

On Error GoTo Erro_FilialCliente_Le

    tFilialCliente.sNome = String(STRING_FILIAL_CLIENTE_NOME, 0)
    tFilialCliente.sRG = String(STRING_RG, 0)
    tFilialCliente.sCgc = String(STRING_CGC, 0)
    tFilialCliente.sInscricaoEstadual = String(STRING_INSCR_EST, 0)
    tFilialCliente.sInscricaoMunicipal = String(STRING_INSCR_MUN, 0)
    tFilialCliente.sInscricaoSuframa = String(STRING_INSCR_SUF, 0)
    tFilialCliente.sObservacao = String(STRING_CLIENTE_OBSERVACAO, 0)
    tFilialCliente.sContaContabil = String(STRING_CONTA, 0)
    tFilialCliente.sGuia = String(STRING_CLIENTE_GUIA, 0)

    If lComandoP <> 0 Then
        lComando = lComandoP
    Else
        lComando = Comando_Abrir()
        If lComando = 0 Then gError 12564
    End If

    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL And objFilialCliente.lCodCliente = 0 And objFilialCliente.iCodFilialLoja <> 0 Then

        lCodCliente = objFilialCliente.lCodClienteLoja
        iCodFilial = objFilialCliente.iCodFilialLoja

        '###########################################
        'Alterado por Wagner 27/09/05
        'Incluido Campos CodMensagem
        'Pega os dados da tabela Filiais Clientes
        lErro = Comando_Executar(lComando, "SELECT IENaoContrib, IEIsento, Nome, CGC, InscricaoEstadual, InscricaoMunicipal,InscricaoSuframa, Endereco, EnderecoEntrega, EnderecoCobranca, CodTransportadora, Observacao, ContaContabil, Vendedor, ComissaoVendas, Regiao, FreqVisitas, DataUltVisita, CodCobrador, TipoFrete, RG, Ativo, CodTranspRedesp, DetPagFrete, Guia, CodMensagem, RegimeTributario FROM FiliaisClientes WHERE FilialEmpresaLoja = ? And CodClienteLoja = ? AND CodFilialLoja = ?", _
            tFilialCliente.iIENaoContrib, tFilialCliente.iIEIsento, tFilialCliente.sNome, tFilialCliente.sCgc, tFilialCliente.sInscricaoEstadual, tFilialCliente.sInscricaoMunicipal, tFilialCliente.sInscricaoSuframa, tFilialCliente.lEndereco, tFilialCliente.lEnderecoEntrega, tFilialCliente.lEnderecoCobranca, tFilialCliente.iCodTransportadora, tFilialCliente.sObservacao, tFilialCliente.sContaContabil, tFilialCliente.iVendedor, tFilialCliente.dComissaoVendas, tFilialCliente.iRegiao, tFilialCliente.iFreqVisitas, tFilialCliente.dtDataUltVisita, tFilialCliente.iCodCobrador, tFilialCliente.iTipoFrete, tFilialCliente.sRG, iAtivo, tFilialCliente.iCodTranspRedesp, tFilialCliente.iDetPagFrete, tFilialCliente.sGuia, tFilialCliente.iCodMensagem, tFilialCliente.iRegimeTributario, objFilialCliente.iFilialEmpresaLoja, objFilialCliente.lCodClienteLoja, objFilialCliente.iCodFilialLoja)
        If lErro <> AD_SQL_SUCESSO Then gError 105993
        '###########################################


    ElseIf giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL And objFilialCliente.lCodCliente <> 0 And objFilialCliente.iCodFilialLoja <> 0 Then

        lCodCliente = objFilialCliente.lCodCliente
        iCodFilial = objFilialCliente.iCodFilialLoja

        '###########################################
        'Alterado por Wagner 27/09/05
        'Incluido Campos CodMensagem
        'Pega os dados da tabela Filiais Clientes
        lErro = Comando_Executar(lComando, "SELECT IENaoContrib, IEIsento, Nome, CGC, InscricaoEstadual, InscricaoMunicipal,InscricaoSuframa, Endereco, EnderecoEntrega, EnderecoCobranca, CodTransportadora, Observacao, ContaContabil, Vendedor, ComissaoVendas, Regiao, FreqVisitas, DataUltVisita, CodCobrador, TipoFrete, RG, Ativo, CodTranspRedesp, DetPagFrete, Guia, CodMensagem, RegimeTributario FROM FiliaisClientes WHERE FilialEmpresaLoja = ? AND CodCliente = ? AND CodFilialLoja = ?", _
            tFilialCliente.iIENaoContrib, tFilialCliente.iIEIsento, tFilialCliente.sNome, tFilialCliente.sCgc, tFilialCliente.sInscricaoEstadual, tFilialCliente.sInscricaoMunicipal, tFilialCliente.sInscricaoSuframa, tFilialCliente.lEndereco, tFilialCliente.lEnderecoEntrega, tFilialCliente.lEnderecoCobranca, tFilialCliente.iCodTransportadora, tFilialCliente.sObservacao, tFilialCliente.sContaContabil, tFilialCliente.iVendedor, tFilialCliente.dComissaoVendas, tFilialCliente.iRegiao, tFilialCliente.iFreqVisitas, tFilialCliente.dtDataUltVisita, tFilialCliente.iCodCobrador, tFilialCliente.iTipoFrete, tFilialCliente.sRG, iAtivo, tFilialCliente.iCodTranspRedesp, tFilialCliente.iDetPagFrete, tFilialCliente.sGuia, tFilialCliente.iCodMensagem, tFilialCliente.iRegimeTributario, objFilialCliente.iFilialEmpresaLoja, objFilialCliente.lCodCliente, objFilialCliente.iCodFilialLoja)
        If lErro <> AD_SQL_SUCESSO Then gError 105994
        '###########################################

    Else
        
        lCodCliente = objFilialCliente.lCodCliente
        iCodFilial = objFilialCliente.iCodFilial
        
        '###########################################
        'Alterado por Wagner 27/09/05
        'Incluido Campos CodMensagem
        'Pega os dados da tabela Filiais Clientes
        lErro = Comando_Executar(lComando, "SELECT IENaoContrib, IEIsento, Nome, CGC, InscricaoEstadual, InscricaoMunicipal,InscricaoSuframa, Endereco, EnderecoEntrega, EnderecoCobranca, CodTransportadora, Observacao, ContaContabil, Vendedor, ComissaoVendas, Regiao, FreqVisitas, DataUltVisita, CodCobrador, TipoFrete, RG, Ativo, CodTranspRedesp, DetPagFrete, Guia, CodMensagem, RegimeTributario FROM FiliaisClientes WHERE CodCliente = ? AND CodFilial = ?", _
            tFilialCliente.iIENaoContrib, tFilialCliente.iIEIsento, tFilialCliente.sNome, tFilialCliente.sCgc, tFilialCliente.sInscricaoEstadual, tFilialCliente.sInscricaoMunicipal, tFilialCliente.sInscricaoSuframa, tFilialCliente.lEndereco, tFilialCliente.lEnderecoEntrega, tFilialCliente.lEnderecoCobranca, tFilialCliente.iCodTransportadora, tFilialCliente.sObservacao, tFilialCliente.sContaContabil, tFilialCliente.iVendedor, tFilialCliente.dComissaoVendas, tFilialCliente.iRegiao, tFilialCliente.iFreqVisitas, tFilialCliente.dtDataUltVisita, tFilialCliente.iCodCobrador, tFilialCliente.iTipoFrete, tFilialCliente.sRG, iAtivo, tFilialCliente.iCodTranspRedesp, tFilialCliente.iDetPagFrete, tFilialCliente.sGuia, tFilialCliente.iCodMensagem, tFilialCliente.iRegimeTributario, objFilialCliente.lCodCliente, objFilialCliente.iCodFilial)
        If lErro <> AD_SQL_SUCESSO Then gError 12565
        '###########################################

    End If
    
    If lErro <> AD_SQL_SUCESSO Then gError 12565

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 12566

    If lErro = AD_SQL_SEM_DADOS Then gError 12567

    objFilialCliente.sNome = tFilialCliente.sNome
    objFilialCliente.sCgc = tFilialCliente.sCgc
    objFilialCliente.sRG = tFilialCliente.sRG
    objFilialCliente.sInscricaoEstadual = tFilialCliente.sInscricaoEstadual
    objFilialCliente.sInscricaoMunicipal = tFilialCliente.sInscricaoMunicipal
    objFilialCliente.sInscricaoSuframa = tFilialCliente.sInscricaoSuframa
    objFilialCliente.lEndereco = tFilialCliente.lEndereco
    objFilialCliente.lEnderecoEntrega = tFilialCliente.lEnderecoEntrega
    objFilialCliente.lEnderecoCobranca = tFilialCliente.lEnderecoCobranca
    objFilialCliente.iCodTransportadora = tFilialCliente.iCodTransportadora
    objFilialCliente.sObservacao = tFilialCliente.sObservacao
    objFilialCliente.sContaContabil = tFilialCliente.sContaContabil
    objFilialCliente.iVendedor = tFilialCliente.iVendedor
    objFilialCliente.dComissaoVendas = tFilialCliente.dComissaoVendas
    objFilialCliente.iRegiao = tFilialCliente.iRegiao
    objFilialCliente.iFreqVisitas = tFilialCliente.iFreqVisitas
    objFilialCliente.dtDataUltVisita = tFilialCliente.dtDataUltVisita
    objFilialCliente.iCodCobrador = tFilialCliente.iCodCobrador
    objFilialCliente.iTipoFrete = tFilialCliente.iTipoFrete
    objFilialCliente.iAtivo = iAtivo
    objFilialCliente.iCodTranspRedesp = tFilialCliente.iCodTranspRedesp
    objFilialCliente.iDetPagFrete = tFilialCliente.iDetPagFrete
    objFilialCliente.sGuia = tFilialCliente.sGuia
    objFilialCliente.iCodMensagem = tFilialCliente.iCodMensagem 'Inserido por wagner 27/09/05
    objFilialCliente.iRegimeTributario = tFilialCliente.iRegimeTributario
    objFilialCliente.iIEIsento = tFilialCliente.iIEIsento
    objFilialCliente.iIENaoContrib = tFilialCliente.iIENaoContrib
    
    If lComandoP = 0 Then
        Call Comando_Fechar(lComando)
    End If

    FilialCliente_Le = SUCESSO

    Exit Function

Erro_FilialCliente_Le:

    FilialCliente_Le = gErr

    Select Case gErr

        Case 12564
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 12565, 12566, 105993, 105994
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIAISCLIENTES", gErr, lCodCliente, iCodFilial)

        Case 12567 'nao encontrou a filial (sem dados)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148501)

    End Select

    If lComandoP = 0 Then
        Call Comando_Fechar(lComando)
    End If

    Exit Function

End Function

Function TipoCliente_Le_Tabelas_Lock(ByVal objTipoCliente As ClassTipoCliente) As Long
'Faz o lock das tabelas relacionadas a tabela TiposDeCliente para assegurar a gravação de um novo Tipo de Cliente
'função chamada por TipoCliente_Grava dentro de uma transação

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(0 To 7) As Long

On Error GoTo Erro_TipoCliente_Le_Tabelas_Lock

    'Abre comandos
    For iIndice = 0 To 7
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 43417
    Next
    
    If objTipoCliente.iTabelaPreco <> 0 Then
        'Lê a Tabela de Preço
        lErro = CF("TabelaDePreco_Lock", objTipoCliente.iTabelaPreco)
        If lErro <> SUCESSO And lErro <> 43128 Then Error 43418
        'Se não encontrou a Tabela de Preço --> Erro
        If lErro <> SUCESSO Then Error 43419
    End If

    If objTipoCliente.iCondicaoPagto <> 0 Then
        'Lê a Condição de Pagamento
        lErro = CF("CondicaoPagto_Lock", alComando(0), objTipoCliente.iCondicaoPagto)
        If lErro <> SUCESSO Then Error 43420
    End If
    
    If objTipoCliente.iVendedor <> 0 Then
        'Lê o Vendedor
        lErro = CF("Vendedor_Lock", alComando(6), objTipoCliente.iVendedor)
        If lErro <> SUCESSO And lErro <> 43044 Then Error 43421
        'Se não encontrou o Vendedor --> Erro
        If lErro <> SUCESSO Then Error 43437
    End If
    
    If objTipoCliente.iCodMensagem <> 0 Then
        'Lê a Mensagem
        lErro = CF("Mensagem_Lock", alComando(1), objTipoCliente.iCodMensagem)
        If lErro <> SUCESSO Then Error 43426
    End If
    
    If objTipoCliente.sContaContabil <> "" Then
        'Lê a Conta
        lErro = CF("Conta_Analitica_Lock", objTipoCliente.sContaContabil, MODULO_CONTABILIDADE)
        If lErro <> SUCESSO Then Error 43431
    End If

    If objTipoCliente.iCodCobrador <> 0 Then
        'Lê o Cobrador
        lErro = CF("Cobrador_Lock", alComando(3), objTipoCliente.iCodCobrador)
        If lErro <> SUCESSO Then Error 43432
    End If

    If objTipoCliente.iCodTransportadora <> 0 Then
        'Lê a Transportadora
        lErro = CF("Transportadora_Lock", alComando(7), objTipoCliente.iCodTransportadora)
        If lErro <> SUCESSO And lErro <> 43038 Then Error 43438
        'Se não encontrou a Transportadora --> Erro
        If lErro <> SUCESSO Then Error 43439
    End If
    
    If objTipoCliente.iRegiao <> 0 Then
        'Lê a Região de Venda
        lErro = CF("RegiaoVenda_Lock", alComando(4), objTipoCliente.iRegiao)
        If lErro <> SUCESSO Then Error 43440
    End If
    
    If objTipoCliente.iPadraoCobranca <> 0 Then
        'Lê o Padrão de Cobrança
        lErro = CF("PadraoCobranca_Lock", alComando(5), objTipoCliente.iPadraoCobranca)
        If lErro <> SUCESSO Then Error 43441
    End If
    
    'Fecha os comandos
    For iIndice = 0 To 7
        Call Comando_Fechar(alComando(iIndice))
    Next

    TipoCliente_Le_Tabelas_Lock = SUCESSO

    Exit Function

Erro_TipoCliente_Le_Tabelas_Lock:

    TipoCliente_Le_Tabelas_Lock = Err

    Select Case Err

        Case 43417
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
            
        Case 43418, 43420, 43421, 43426, 43431, 43432, 43438, 43440, 43441

        Case 43419
            Call Rotina_Erro(vbOKOnly, "ERRO_TABELAPRECO_INEXISTENTE", Err, objTipoCliente.iTabelaPreco)
            
        Case 43437
            Call Rotina_Erro(vbOKOnly, "ERRO_VENDEDOR_NAO_CADASTRADO", Err, objTipoCliente.iVendedor)
        
        Case 43439
            Call Rotina_Erro(vbOKOnly, "ERRO_TRANSPORTADORA_NAO_CADASTRADA", Err, objTipoCliente.iCodTransportadora)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148502)

    End Select

    'Fecha os comandos
    For iIndice = 0 To 7
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Fornecedor_Le(ByVal objFornecedor As ClassFornecedor) As Long
'le o Fornecedor a partir da chave(lCodigo) fornecida em objFornecedor. Devolve os dados em objFornecedor

'*** ALTERADA EM 26/06/2001 POR LUIZ GUSTAVO DE FREITAS NOGUEIRA ***
'Incluído código para leitura do Campo ContaFornConsig
'*******************************************************************

Dim lComando1 As Long
Dim lComando2 As Long
Dim lErro As Long
Dim tFornecedor As typeFornecedor

On Error GoTo Erro_Fornecedor_Le

    lComando1 = 0
    lComando2 = 0

    tFornecedor.sRazaoSocial = String(STRING_FORNECEDOR_RAZAO_SOC, 0)
    tFornecedor.sNomeReduzido = String(STRING_FORNECEDOR_NOME_REDUZIDO, 0)
    tFornecedor.sObservacao = String(STRING_FORNECEDOR_OBS, 0)
    tFornecedor.sCgc = String(STRING_CGC, 0)
    tFornecedor.sIdEstrangeiro = String(STRING_ID_ESTRANGEIRO, 0)
    tFornecedor.sInscricaoEstadual = String(STRING_INSCR_EST, 0)
    tFornecedor.sInscricaoMunicipal = String(STRING_INSCR_MUN, 0)
    tFornecedor.sInscricaoSuframa = String(STRING_INSCR_SUF, 0)
    tFornecedor.sContaContabil = String(STRING_CONTA, 0)
    tFornecedor.sContaFornConsig = String(STRING_CONTA, 0)
    tFornecedor.sAgencia = String(STRING_AGENCIA, 0)
    tFornecedor.sContaCorrente = String(STRING_CONTA_CORRENTE, 0)
    tFornecedor.sObservacao2 = String(STRING_FILIAL_FORNECEDOR_OBS, 0)
    tFornecedor.sInscricaoINSS = String(STRING_INSCR_INSS, 0)
    tFornecedor.sContaDespesa = String(STRING_CONTA, 0)
    tFornecedor.sNatureza = String(STRING_NATMOVCTA_CODIGO, 0)

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 12725

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 12726

    'Pega os dados da tabela Fornecedores
    lErro = Comando_Executar(lComando1, "SELECT RazaoSocial, NomeReduzido, Tipo, Observacao, CondicaoPagto, Desconto, ProxCodFilial, Ativo, Natureza FROM Fornecedores WHERE Codigo = ?", _
        tFornecedor.sRazaoSocial, tFornecedor.sNomeReduzido, tFornecedor.iTipo, tFornecedor.sObservacao, tFornecedor.iCondicaoPagto, tFornecedor.dDesconto, tFornecedor.iProxCodFilial, tFornecedor.iAtivo, tFornecedor.sNatureza, objFornecedor.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 12727

    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 12728

    If lErro = AD_SQL_SEM_DADOS Then Error 12729

    objFornecedor.sRazaoSocial = tFornecedor.sRazaoSocial
    objFornecedor.sNomeReduzido = tFornecedor.sNomeReduzido
    objFornecedor.iTipo = tFornecedor.iTipo
    objFornecedor.sObservacao = tFornecedor.sObservacao
    objFornecedor.iCondicaoPagto = tFornecedor.iCondicaoPagto
    objFornecedor.dDesconto = tFornecedor.dDesconto
    objFornecedor.iProxCodFilial = tFornecedor.iProxCodFilial
    objFornecedor.iAtivo = tFornecedor.iAtivo
    objFornecedor.sNatureza = tFornecedor.sNatureza

    'Pega os dados da tabela Filiais Fornecedores
    lErro = Comando_Executar(lComando2, "SELECT  IENaoContrib, IEIsento, Endereco, CGC, IdEstrangeiro, InscricaoEstadual,InscricaoSuframa, InscricaoMunicipal, ContaContabil, ContaFornConsig, Banco, Agencia, ContaCorrente, Observacao, TipoFrete, InscricaoINSS, TipoCobranca, GeraCredICMS, ContaDespesa, RegimeTributario FROM FiliaisFornecedores WHERE CodFornecedor = ? AND CodFilial = ?", _
        tFornecedor.iIENaoContrib, tFornecedor.iIEIsento, tFornecedor.lEndereco, tFornecedor.sCgc, tFornecedor.sIdEstrangeiro, tFornecedor.sInscricaoEstadual, tFornecedor.sInscricaoSuframa, tFornecedor.sInscricaoMunicipal, tFornecedor.sContaContabil, tFornecedor.sContaFornConsig, tFornecedor.iBanco, tFornecedor.sAgencia, tFornecedor.sContaCorrente, tFornecedor.sObservacao2, tFornecedor.iTipoFrete, tFornecedor.sInscricaoINSS, tFornecedor.iTipoCobranca, tFornecedor.iGeraCredICMS, tFornecedor.sContaDespesa, tFornecedor.iRegimeTributario, objFornecedor.lCodigo, FILIAL_MATRIZ)
    If lErro <> AD_SQL_SUCESSO Then Error 12730

    lErro = Comando_BuscarPrimeiro(lComando2)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 12731

    If lErro = AD_SQL_SEM_DADOS Then Error 12732

    objFornecedor.lEndereco = tFornecedor.lEndereco
    objFornecedor.sCgc = tFornecedor.sCgc
    objFornecedor.sIdEstrangeiro = tFornecedor.sIdEstrangeiro
    objFornecedor.sInscricaoEstadual = tFornecedor.sInscricaoEstadual
    objFornecedor.sInscricaoMunicipal = tFornecedor.sInscricaoMunicipal
    objFornecedor.sInscricaoSuframa = tFornecedor.sInscricaoSuframa
    objFornecedor.sContaContabil = tFornecedor.sContaContabil
    objFornecedor.sContaFornConsig = tFornecedor.sContaFornConsig
    objFornecedor.iBanco = tFornecedor.iBanco
    objFornecedor.sAgencia = tFornecedor.sAgencia
    objFornecedor.sContaCorrente = tFornecedor.sContaCorrente
    objFornecedor.sObservacao2 = tFornecedor.sObservacao2
    
    objFornecedor.iTipoFrete = tFornecedor.iTipoFrete
    objFornecedor.sInscricaoINSS = tFornecedor.sInscricaoINSS
    objFornecedor.iTipoCobranca = tFornecedor.iTipoCobranca
    objFornecedor.iGeraCredICMS = tFornecedor.iGeraCredICMS
    objFornecedor.sContaDespesa = tFornecedor.sContaDespesa
    objFornecedor.iRegimeTributario = tFornecedor.iRegimeTributario
    objFornecedor.iIEIsento = tFornecedor.iIEIsento
    objFornecedor.iIENaoContrib = tFornecedor.iIENaoContrib

    lErro = Comando_Fechar(lComando1)
    lErro = Comando_Fechar(lComando2)

    Fornecedor_Le = SUCESSO

Exit Function

Erro_Fornecedor_Le:

    Fornecedor_Le = Err

    Select Case Err

        Case 12725, 12726
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 12727, 12728
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FORNECEDORES", Err)

        Case 12729 'Fornecedor nao cadastrado em Fornecedores

        Case 12730, 12731
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIAISFORNECEDORES", Err)

        Case 12732
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECEDOR_SEM_FILIAL", Err, objFornecedor.lCodigo)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148503)

    End Select

    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)

    Exit Function

End Function

Function TipoFornecedor_Le(ByVal objTipoFornecedor As ClassTipoFornecedor) As Long
'le os dados do Tipo de Fornecedor a partir da chave . Devolve os dados em objTipoFornecedor

Dim lComando As Long
Dim lErro As Long
Dim tTipoFornecedor As typeTipoFornecedor

On Error GoTo Erro_TipoFornecedor_Le

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 12762

    tTipoFornecedor.sDescricao = String(STRING_TIPO_FORNECEDOR_DESCRICAO, 0)
    tTipoFornecedor.sObservacao = String(STRING_TIPO_FORNECEDOR_OBS, 0)
    tTipoFornecedor.sContaDespesa = String(STRING_CONTA, 0)

     'Verifica se o TipodeFornecedor existe, e se existir carrega seus dados em objTipoFornecedor
    lErro = Comando_Executar(lComando, "SELECT Descricao, CondicaoPagto, Desconto, Observacao, ContaDespesa,  HistPadraoDespesa FROM TiposDeFornecedor WHERE Codigo = ?", tTipoFornecedor.sDescricao, tTipoFornecedor.iCondicaoPagto, tTipoFornecedor.dDesconto, tTipoFornecedor.sObservacao, tTipoFornecedor.sContaDespesa, tTipoFornecedor.iHistPadraoDespesa, objTipoFornecedor.iCodigo)

    If lErro <> AD_SQL_SUCESSO Then Error 12763

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 12764

    'Tipo de Fornecedor não está cadastrado
    If lErro = AD_SQL_SEM_DADOS Then Error 12765

    objTipoFornecedor.sDescricao = tTipoFornecedor.sDescricao
    objTipoFornecedor.iCondicaoPagto = tTipoFornecedor.iCondicaoPagto
    objTipoFornecedor.dDesconto = tTipoFornecedor.dDesconto
    objTipoFornecedor.sObservacao = tTipoFornecedor.sObservacao
    objTipoFornecedor.sContaDespesa = tTipoFornecedor.sContaDespesa
    objTipoFornecedor.iHistPadraoDespesa = tTipoFornecedor.iHistPadraoDespesa

    lErro = Comando_Fechar(lComando)

    TipoFornecedor_Le = SUCESSO

Exit Function

Erro_TipoFornecedor_Le:

    TipoFornecedor_Le = Err

    Select Case Err

        Case 12762
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 12763, 12764
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOSFORNECEDOR", Err)

        Case 12765 'nao esta cadastrado Tipo de Fornecedor no BD

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148504)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function FiliaisFornecedores_Le_CodFornecedor(ByVal lCodigo As Long, ByVal colFiliais As Collection) As Long
'Le apenas os códigos de filiais de Fornecedores relacionadas a chave Fornecedor (lCodigo) passada
'Retorna os códigos de filiais em colFiliais

Dim lComando As Long
Dim iCodFilial As Integer
Dim lErro As Long

On Error GoTo Erro_FiliaisFornecedores_Le_CodFornecedor

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 12829

    lErro = Comando_Executar(lComando, "SELECT CodFilial FROM FiliaisFornecedores WHERE CodFornecedor = ? ", iCodFilial, lCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 12830

    'le a primeira filial
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 12831

    If lErro = AD_SQL_SEM_DADOS Then Error 12832

    Do While lErro <> AD_SQL_SEM_DADOS

        'coloca a filial lida na coleção
        colFiliais.Add iCodFilial

        'le a proxima filial
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 12833

    Loop

    lErro = Comando_Fechar(lComando)

    FiliaisFornecedores_Le_CodFornecedor = SUCESSO

    Exit Function

Erro_FiliaisFornecedores_Le_CodFornecedor:

    FiliaisFornecedores_Le_CodFornecedor = Err

    Select Case Err

        Case 12829
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 12830, 12831, 12833
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIAISFORNECEDORES", Err)

        Case 12832
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECEDOR_SEM_FILIAL", Err, lCodigo)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148505)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function Fornecedores_Le_Tabelas_Lock(ByVal objFornecedor As ClassFornecedor) As Long
'Faz o lock das tabelas relacionadas a tabela Fornecedor para assegurar a gravação de um novo Fornecedor
'função chamada por Fornecedor_Grava dentro de uma transação

'*** ALTERADA EM 26/06/2001 POR LUIZ GUSTAVO DE FREITAS NOGUEIRA ***
'Incluído código para lock do Campo ContaFornConsig
'*******************************************************************

Dim lErro As Long
Dim lComando1 As Long
Dim lComando2 As Long
Dim lComando3 As Long
Dim iCodigo As Integer, iEmPagamento As Integer
Dim iTipoConta As Integer
Dim iAtivo As Integer

On Error GoTo Erro_Fornecedores_Le_Tabelas_Lock

    'Inicializa os comandos
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 12864

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then gError 12865

    lComando3 = Comando_Abrir()
    If lComando3 = 0 Then gError 12866

    'Tipos de Fornecedor
    If objFornecedor.iTipo > 0 Then
    
        lErro = Comando_ExecutarLockado(lComando1, "SELECT Codigo FROM TiposDeFornecedor WHERE Codigo=?", iCodigo, objFornecedor.iTipo)
        If lErro <> AD_SQL_SUCESSO Then gError 12867
    
        lErro = Comando_BuscarPrimeiro(lComando1)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 12868
    
        'Não encontrou o Tipo do Fornecedor --> erro
        If lErro = AD_SQL_SEM_DADOS Then gError 33844
    
        lErro = Comando_LockShared(lComando1)
        If lErro <> AD_SQL_SUCESSO Then gError 12869
            
    End If
    
    'CondiçõesPagto
    If objFornecedor.iCondicaoPagto > 0 Then
    
        lErro = Comando_ExecutarLockado(lComando2, "SELECT EmPagamento FROM CondicoesPagto WHERE Codigo=?", iEmPagamento, objFornecedor.iCondicaoPagto)
        If lErro <> AD_SQL_SUCESSO Then gError 12870
    
        lErro = Comando_BuscarPrimeiro(lComando2)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 12871
    
        'Não encontrou a Condição de Pagamento --> erro
        If lErro = AD_SQL_SEM_DADOS Then gError 33845
    
        lErro = Comando_LockShared(lComando2)
        If lErro <> AD_SQL_SUCESSO Then gError 12872
        
    End If
    
    'PlanoConta
    'Conta Fornecedores
    If Len(Trim(objFornecedor.sContaContabil)) > 0 Then
    
        lErro = CF("Conta_Analitica_Lock", objFornecedor.sContaContabil, MODULO_CONTABILIDADE)
        If lErro <> SUCESSO Then gError 59058
        
    End If
    
    'Conta Fornecedores em consginação
    If Len(Trim(objFornecedor.sContaFornConsig)) > 0 Then
    
        lErro = CF("Conta_Analitica_Lock", objFornecedor.sContaFornConsig, MODULO_CONTABILIDADE)
        If lErro <> SUCESSO Then gError 90545
        
    End If
    
    'Libera os comandos
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)

    Fornecedores_Le_Tabelas_Lock = SUCESSO

    Exit Function

Erro_Fornecedores_Le_Tabelas_Lock:

    Fornecedores_Le_Tabelas_Lock = gErr

    Select Case gErr

        Case 12864, 12865, 12866
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 12867, 12868
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOSFORNECEDOR", gErr, objFornecedor.iTipo)

        Case 12869
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_TIPOSFORNECEDOR", gErr)

        Case 12870, 12871
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONDICAOPAGTO", gErr, objFornecedor.iCondicaoPagto)

        Case 12872
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CONDICAOPAGTO", gErr)

        Case 33844
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPO_FORNECEDOR_NAO_CADASTRADO", gErr, objFornecedor.iTipo)

        Case 33845
            Call Rotina_Erro(vbOKOnly, "ERRO_CONDICAO_PAGTO_NAO_ENCONTRADA3", gErr, objFornecedor.iCondicaoPagto)

        Case 59058, 90545
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148506)

    End Select

    'Libera os comandos
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)

    Exit Function

End Function

Function FiliaisFornecedores_Lock(ByVal lCodigo As Long) As Long
'faz o lock das Filiais Fornecedores relacionadas ao Fornecedor passado por parametro para garantir a exclusao de um Fornecedor
'funcao chamada por Fornecedor_Exclui dentro de uma transacao

Dim lErro As Long
Dim lComando1 As Long
Dim lCodFornecedor As Long

On Error GoTo Erro_FiliaisFornecedores_Lock

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 12878

    'Seleciona as Filiais do Fornecedor a serem lockadas
    lErro = Comando_ExecutarLockado(lComando1, "SELECT CodFornecedor FROM FiliaisFornecedores WHERE CodFornecedor =?", lCodFornecedor, lCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 12879

    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 12880

    If lErro = AD_SQL_SEM_DADOS Then Error 12881

    Do While lErro = AD_SQL_SUCESSO

        lErro = Comando_LockExclusive(lComando1)
        If lErro <> AD_SQL_SUCESSO Then Error 12882

        lErro = Comando_BuscarProximo(lComando1)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 12880

    Loop

    lErro = Comando_Fechar(lComando1)

    FiliaisFornecedores_Lock = SUCESSO

    Exit Function

Erro_FiliaisFornecedores_Lock:

    FiliaisFornecedores_Lock = Err

    Select Case Err

        Case 12878
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 12879, 12880
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIAISFORNECEDORES", Err)

        Case 12881
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECEDOR_SEM_FILIAL", Err, lCodigo)

        Case 12882
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_FILIAISFORNECEDORES", Err, lCodigo)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148507)

    End Select

    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Function FilialFornecedor_Le(ByVal objFilialFornecedor As ClassFilialFornecedor) As Long
'Le todos os dados da tabela FiliaisFornecedores, correspondente a chave passada por parametro

'*** ALTERADA EM 26/06/2001 POR LUIZ GUSTAVO DE FREITAS NOGUEIRA ***
'Incluído código para leitura do Campo ContaFornConsig
'*******************************************************************

Dim lComando As Long
Dim lErro As Long
Dim tFilialFornecedor As typeFilialFornecedor

On Error GoTo Erro_FilialFornecedor_Le

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 12926

    tFilialFornecedor.sNome = String(STRING_FILIAL_FORNECEDOR_NOME, 0)
    tFilialFornecedor.sCgc = String(STRING_CGC, 0)
    tFilialFornecedor.sIdEstrangeiro = String(STRING_ID_ESTRANGEIRO, 0)
    tFilialFornecedor.sInscricaoEstadual = String(STRING_INSCR_EST, 0)
    tFilialFornecedor.sInscricaoMunicipal = String(STRING_INSCR_MUN, 0)
    tFilialFornecedor.sInscricaoSuframa = String(STRING_INSCR_SUF, 0)
    tFilialFornecedor.sContaContabil = String(STRING_CONTA, 0)
    tFilialFornecedor.sContaFornConsig = String(STRING_CONTA, 0)
    tFilialFornecedor.sAgencia = String(STRING_AGENCIA, 0)
    tFilialFornecedor.sContaCorrente = String(STRING_CONTA_CORRENTE, 0)
    tFilialFornecedor.sObservacao = String(STRING_FILIAL_FORNECEDOR_OBS, 0)
    tFilialFornecedor.sInscricaoINSS = String(STRING_INSCR_INSS, 0)
    tFilialFornecedor.sContaDespesa = String(STRING_CONTA, 0)

    'Pega os dados da tabela Filiais Fornecedores
    lErro = Comando_Executar(lComando, "SELECT IENaoContrib, IEIsento, Nome, Endereco,  CGC, IdEstrangeiro, InscricaoEstadual,InscricaoSuframa, InscricaoMunicipal, ContaContabil, ContaFornConsig, Banco, Agencia, ContaCorrente, Observacao, TipoFrete, InscricaoINSS, TipoCobranca, GeraCredICMS, ContaDespesa, RegimeTributario FROM FiliaisFornecedores WHERE CodFornecedor = ? AND CodFilial = ?", _
        tFilialFornecedor.iIENaoContrib, tFilialFornecedor.iIEIsento, tFilialFornecedor.sNome, tFilialFornecedor.lEndereco, tFilialFornecedor.sCgc, tFilialFornecedor.sIdEstrangeiro, tFilialFornecedor.sInscricaoEstadual, tFilialFornecedor.sInscricaoSuframa, tFilialFornecedor.sInscricaoMunicipal, tFilialFornecedor.sContaContabil, tFilialFornecedor.sContaFornConsig, tFilialFornecedor.iBanco, tFilialFornecedor.sAgencia, tFilialFornecedor.sContaCorrente, tFilialFornecedor.sObservacao, tFilialFornecedor.iTipoFrete, tFilialFornecedor.sInscricaoINSS, tFilialFornecedor.iTipoCobranca, tFilialFornecedor.iGeraCredICMS, tFilialFornecedor.sContaDespesa, tFilialFornecedor.iRegimeTributario, objFilialFornecedor.lCodFornecedor, objFilialFornecedor.iCodFilial)
    If lErro <> AD_SQL_SUCESSO Then Error 12927

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 12928

    If lErro = AD_SQL_SEM_DADOS Then Error 12929
    
    objFilialFornecedor.sNome = tFilialFornecedor.sNome
    objFilialFornecedor.lEndereco = tFilialFornecedor.lEndereco
    objFilialFornecedor.sCgc = tFilialFornecedor.sCgc
    objFilialFornecedor.sIdEstrangeiro = tFilialFornecedor.sIdEstrangeiro
    objFilialFornecedor.sInscricaoEstadual = tFilialFornecedor.sInscricaoEstadual
    objFilialFornecedor.sInscricaoMunicipal = tFilialFornecedor.sInscricaoMunicipal
    objFilialFornecedor.sInscricaoSuframa = tFilialFornecedor.sInscricaoSuframa
    objFilialFornecedor.sContaContabil = tFilialFornecedor.sContaContabil
    objFilialFornecedor.sContaFornConsig = tFilialFornecedor.sContaFornConsig
    objFilialFornecedor.iBanco = tFilialFornecedor.iBanco
    objFilialFornecedor.sAgencia = tFilialFornecedor.sAgencia
    objFilialFornecedor.sContaCorrente = tFilialFornecedor.sContaCorrente
    objFilialFornecedor.sObservacao = tFilialFornecedor.sObservacao
    objFilialFornecedor.iTipoFrete = tFilialFornecedor.iTipoFrete
    objFilialFornecedor.sInscricaoINSS = tFilialFornecedor.sInscricaoINSS
    objFilialFornecedor.iTipoCobranca = tFilialFornecedor.iTipoCobranca
    objFilialFornecedor.iGeraCredICMS = tFilialFornecedor.iGeraCredICMS
    objFilialFornecedor.sContaDespesa = tFilialFornecedor.sContaDespesa
    objFilialFornecedor.iRegimeTributario = tFilialFornecedor.iRegimeTributario
    objFilialFornecedor.iIEIsento = tFilialFornecedor.iIEIsento
    objFilialFornecedor.iIENaoContrib = tFilialFornecedor.iIENaoContrib

    lErro = Comando_Fechar(lComando)

    FilialFornecedor_Le = SUCESSO

    Exit Function

Erro_FilialFornecedor_Le:

    FilialFornecedor_Le = Err

    Select Case Err

        Case 12926
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 12927, 12928
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIAISFORNECEDORES", Err)

        Case 12929 'nao encontrou a filial (sem dados)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148508)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function FiliaisFornecedores_Le_Chave(ByVal colFiliais As ColChaveFilial) As Long
'Le na tabela FiliaisFornecedores todos os Codigos de Fornecedor,
'Codigos de Filiais e Nomes e coloca na colecao ColFiliais
'Serve para construir TreeView de Fornecedores com suas filiais

Dim lComando As Long
Dim lCodFornecedor As Long
Dim iCodFilial As Integer
Dim sNome As String
Dim lErro As Long

On Error GoTo Erro_FiliaisFornecedores_Le_Chave

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 12920

    sNome = String(STRING_FILIAL_FORNECEDOR_NOME, 0)

    lErro = Comando_Executar(lComando, "SELECT CodFornecedor, CodFilial, Nome FROM FiliaisFornecedores ORDER BY CodFornecedor, CodFilial", lCodFornecedor, iCodFilial, sNome)
    If lErro <> AD_SQL_SUCESSO Then Error 12921

    'le a primeira filial
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 12922

    Do While lErro <> AD_SQL_SEM_DADOS

        'coloca a filial lida na coleção
        colFiliais.Add iCodFilial, lCodFornecedor, sNome

        'le a proxima filial
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 12923

    Loop

    lErro = Comando_Fechar(lComando)

    FiliaisFornecedores_Le_Chave = SUCESSO

    Exit Function

Erro_FiliaisFornecedores_Le_Chave:

    FiliaisFornecedores_Le_Chave = Err

    Select Case Err

        Case 12920
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 12921, 12922, 12923
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIAISFORNECEDORES", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148509)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function Fornecedor_Le_NomeRed(ByVal objFornecedor As AdmlCodigoNome) As Long
'Le o NomeReduzido do Fornecedor a partir da chave(lCodigo) fornecida em objFornecedor.

Dim lComando As Long
Dim lErro As Long
Dim sNomeReduzido As String

On Error GoTo Erro_Fornecedor_Le_NomeRed

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 12934

    sNomeReduzido = String(STRING_FORNECEDOR_NOME_REDUZIDO, 0)

    'Le o NomeReduzido da tabela Fornecedores
    lErro = Comando_Executar(lComando, "SELECT NomeReduzido FROM Fornecedores WHERE Codigo = ?", sNomeReduzido, objFornecedor.lCodigo)

    If lErro <> AD_SQL_SUCESSO Then Error 12935

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 12936

    If lErro = AD_SQL_SEM_DADOS Then Error 12937

    objFornecedor.sNome = sNomeReduzido

    lErro = Comando_Fechar(lComando)

    Fornecedor_Le_NomeRed = SUCESSO

Exit Function

Erro_Fornecedor_Le_NomeRed:

    Fornecedor_Le_NomeRed = Err

    Select Case Err

        Case 12934
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 12935, 12936
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FORNECEDORES", Err)

        Case 12937 'Fornecedor nao cadastrado em Fornecedores

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148510)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

''Function FilialFornecedor_Objetos_Relacionados_Testa(objFilialFornecedor As ClassFilialFornecedor) As Long
'''Lê os objetos relacionados com a Filial do Fornecedor
'''auxiliar a exclusao de uma filial
''
''Dim lErro As Long
''Dim lCodigo As Long
''
''On Error GoTo Erro_FilialFornecedor_Objetos_Relacionados_Testa
''
''    lErro = NFiscal_Le_FilialFornecedor_Uma(objFilialFornecedor, lCodigo)
''    If lErro <> SUCESSO And lErro <> 33853 Then Error 33854
''
''    'Filial do Fornecedor está relacionado com Nota Fiscal --> erro
''    If lErro = SUCESSO Then Error 33855
''
''    'Filial do Fornecedor está relacionado com Nota Fiscal Baixada --> erro
''    If lErro = SUCESSO Then Error 33861
''
''    lErro = NFPag_Le_FilialFornecedor_Uma(objFilialFornecedor, lCodigo)
''    If lErro <> SUCESSO And lErro <> 33865 Then Error 33866
''
''    'Filial do Fornecedor está relacionado com Nota Fiscal à Pagar --> erro
''    If lErro = SUCESSO Then Error 33867
''
''    lErro = NFPagBaixada_Le_FilialFornecedor_Uma(objFilialFornecedor, lCodigo)
''    If lErro <> SUCESSO And lErro <> 33876 Then Error 33877
''
''    'Filial do Fornecedor está relacionado com Nota Fiscal à Pagar Baixada --> erro
''    If lErro = SUCESSO Then Error 33878
''
''    lErro = TituloPagar_Le_FilialFornecedor_Um(objFilialFornecedor, lCodigo)
''    If lErro <> SUCESSO And lErro <> 33882 Then Error 33883
''
''    'Filial do Fornecedor está relacionado com Título à Pagar --> erro
''    If lErro = SUCESSO Then Error 33884
''
''    lErro = TituloPagarBaixado_Le_FilialFornecedor_Um(objFilialFornecedor, lCodigo)
''    If lErro <> SUCESSO And lErro <> 33894 Then Error 33895
''
''    'Filial do Fornecedor está relacionado com Título à Pagar Baixado --> erro
''    If lErro = SUCESSO Then Error 33896
''
''    lErro = CreditoPagForn_Le_FilialFornecedor_Um(objFilialFornecedor, lCodigo)
''    If lErro <> SUCESSO And lErro <> 33900 Then Error 33901
''
''    'Filial do Fornecedor está relacionado com Crédito à Pagar Fornecedor --> erro
''    If lErro = SUCESSO Then Error 33902
''
''    lErro = PagtoAntecipado_Le_FilialFornecedor_Um(objFilialFornecedor, lCodigo)
''    If lErro <> SUCESSO And lErro <> 33906 Then Error 33907
''
''    'Filial do Fornecedor está relacionado com Pagamento Antecipado --> erro
''    If lErro = SUCESSO Then Error 33908
''
''    FilialFornecedor_Objetos_Relacionados_Testa = SUCESSO
''
''    Exit Function
''
''Erro_FilialFornecedor_Objetos_Relacionados_Testa:
''
''    FilialFornecedor_Objetos_Relacionados_Testa = Err
''
''    Select Case Err
''
''        Case 33854, 33860, 33866, 33877, 33883, 33895, 33901, 33907
''
''        Case 33855
''            Call Rotina_Erro(vbOKOnly, "ERRO_FILIAL_FORNECEDOR_REL_NFISCAL", Err, objFilialFornecedor.iCodFilial, objFilialFornecedor.lCodFornecedor, lCodigo)
''
''        Case 33861
''            Call Rotina_Erro(vbOKOnly, "ERRO_FILIAL_FORNECEDOR_REL_NFISCALBAIXADA", Err, objFilialFornecedor.iCodFilial, objFilialFornecedor.lCodFornecedor, lCodigo)
''
''        Case 33867
''            Call Rotina_Erro(vbOKOnly, "ERRO_FILIAL_FORNECEDOR_REL_NFISCALPAG", Err, objFilialFornecedor.iCodFilial, objFilialFornecedor.lCodFornecedor, lCodigo)
''
''        Case 33878
''            Call Rotina_Erro(vbOKOnly, "ERRO_FILIAL_FORNECEDOR_REL_NFISCALPAGBAIXADA", Err, objFilialFornecedor.iCodFilial, objFilialFornecedor.lCodFornecedor, lCodigo)
''
''        Case 33884
''            Call Rotina_Erro(vbOKOnly, "ERRO_FILIAL_FORNECEDOR_REL_TIT_PAGAR", Err, objFilialFornecedor.iCodFilial, objFilialFornecedor.lCodFornecedor, lCodigo)
''
''        Case 33896
''            Call Rotina_Erro(vbOKOnly, "ERRO_FILIAL_FORNECEDOR_REL_TIT_PAGAR_BAIXADO", Err, objFilialFornecedor.iCodFilial, objFilialFornecedor.lCodFornecedor, lCodigo)
''
''        Case 33902
''            Call Rotina_Erro(vbOKOnly, "ERRO_FILIAL_FORNECEDOR_REL_CREDITO_PAGAR_FORN", Err, objFilialFornecedor.iCodFilial, objFilialFornecedor.lCodFornecedor, lCodigo)
''
''        Case 33908
''            Call Rotina_Erro(vbOKOnly, "ERRO_FILIAL_FORNECEDOR_REL_PAGTO_ANTECIPADO", Err, objFilialFornecedor.iCodFilial, objFilialFornecedor.lCodFornecedor, lCodigo)
''
''        Case Else
''            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148511)
''
''    End Select
''
''    Exit Function
''
''End Function
''
Function FiliaisFornecedores_Le_Tabelas_Lock(ByVal objFilialFornecedor As ClassFilialFornecedor) As Long
'faz o lock das tabelas relacionadas a tabela FiliaisFornecedores para assegurar a gravacao de um novo Fornecedor
'funcao chamada por FiliaisFornecedores_Grava dentro de uma transacao

'*** ALTERADA EM 26/06/2001 POR LUIZ GUSTAVO DE FREITAS NOGUEIRA ***
'Incluído código para leitura do Campo ContaFornConsig
'*******************************************************************

Dim lErro As Long
Dim lComando1 As Long
Dim lComando2 As Long
Dim lCodigo As Long
Dim iTipoConta As Integer
Dim iAtivo As Integer

On Error GoTo Erro_FiliaisFornecedores_Le_Tabelas_Lock

    'Inicializa os comandos
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 12983

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then gError 12984

    'Seleciona o Fornecedor relacionado a filial para ser lockado
    lErro = Comando_ExecutarLockado(lComando1, "SELECT Codigo FROM Fornecedores WHERE Codigo =?", lCodigo, objFilialFornecedor.lCodFornecedor)
    If lErro <> AD_SQL_SUCESSO Then gError 12985

    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 12986

    'Não encontrou o Fornecedor --> erro
    If lErro = AD_SQL_SEM_DADOS Then gError 12987

    'Lock do Fornecedor
    lErro = Comando_LockShared(lComando1)
    If lErro <> AD_SQL_SUCESSO Then gError 12988

    'PlanoConta
    'Conta de Fornecedores
    If Len(Trim(objFilialFornecedor.sContaContabil)) > 0 Then
    
        lErro = CF("Conta_Analitica_Lock", objFilialFornecedor.sContaContabil, MODULO_CONTABILIDADE)
        If lErro <> SUCESSO Then gError 59059
        
    End If

    'Conta de Fornecedores em Consignação
    If Len(Trim(objFilialFornecedor.sContaFornConsig)) > 0 Then
    
        lErro = CF("Conta_Analitica_Lock", objFilialFornecedor.sContaFornConsig, MODULO_CONTABILIDADE)
        If lErro <> SUCESSO Then gError 90544
        
    End If

    '??? será que nao está faltando lockar outras tabelas ???
    
    'Libera os comandos
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)

    FiliaisFornecedores_Le_Tabelas_Lock = SUCESSO

    Exit Function

Erro_FiliaisFornecedores_Le_Tabelas_Lock:

    FiliaisFornecedores_Le_Tabelas_Lock = gErr

    Select Case gErr

        Case 12983, 12984
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 12985, 12986
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FORNECEDORES", gErr)

        Case 12987
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECEDOR_NAO_CADASTRADO", gErr, objFilialFornecedor.lCodFornecedor)

        Case 12988
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_FORNECEDORES", gErr, objFilialFornecedor.lCodFornecedor)
        
        Case 59059, 90544
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148512)

    End Select

    'Libera os comandos
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)

    Exit Function

End Function

Function Favorecidos_Le_Todos(ByVal colFavorecidos As Collection) As Long
'le todos os favorecidos contidos na tabela de Favorecidos padrão e coloca-os em colFavorecidos

Dim lComando As Long
Dim lErro As Long
Dim objFavorecidos As ClassFavorecidos
Dim iCodigo As Integer
Dim sNome As String
Dim iInativo As Integer
    
On Error GoTo Erro_Favorecidos_Le_Todos

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 17005

    sNome = String(STRING_FAVORECIDO, 0)

    'le a tabela de Favorecidos
    lErro = Comando_Executar(lComando, "SELECT Codigo, Nome, Inativo FROM Favorecidos ORDER BY Codigo", iCodigo, sNome, iInativo)
    If lErro <> AD_SQL_SUCESSO Then Error 17006

    'le o primeiro favorecido
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 17007
    
    Do While lErro <> AD_SQL_SEM_DADOS

        Set objFavorecidos = New ClassFavorecidos
        
        objFavorecidos.iCodigo = iCodigo
        objFavorecidos.sNome = sNome
        objFavorecidos.iInativo = iInativo
        
        'coloca o favorecido lido na coleção
        colFavorecidos.Add objFavorecidos
        
        'le o proximo favorecido
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 17008

    Loop

    lErro = Comando_Fechar(lComando)
    
    Favorecidos_Le_Todos = SUCESSO

    Exit Function

Erro_Favorecidos_Le_Todos:

    Favorecidos_Le_Todos = Err
    
    Select Case Err

        Case 17005
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 17006, 17007, 17008
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FAVORECIDOS1", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148513)

    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function
    
End Function

Function Favorecido_Le(ByVal objFavorecidos As ClassFavorecidos) As Long
'Le o favorecido a partir da chave fornecida em objFavorecidos. Retorna os dados em objFavorecidos

Dim lComando As Long
Dim lErro As Long
Dim sNome As String
Dim iInativo As Integer
    
On Error GoTo Erro_Favorecido_Le

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 17012
    
    sNome = String(STRING_FAVORECIDO, 0)
    
    lErro = Comando_Executar(lComando, "SELECT Nome, Inativo FROM Favorecidos WHERE Codigo = ?", sNome, iInativo, objFavorecidos.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 17013
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 17014
        
    If lErro = AD_SQL_SEM_DADOS Then Error 17015
    
    objFavorecidos.sNome = sNome
    objFavorecidos.iInativo = iInativo
    
    lErro = Comando_Fechar(lComando)
    
    Favorecido_Le = SUCESSO

    Exit Function

Erro_Favorecido_Le:

    Favorecido_Le = Err
    
    Select Case Err
    
        Case 17012
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
    
        Case 17013, 17014
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FAVORECIDO", Err, objFavorecidos.iCodigo)
        
        Case 17015
           
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148514)

    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function CondicoesPagto_Le_Recebimento(ByVal colCod_DescReduzida As AdmColCodigoNome) As Long
'Le todos os Codigos e DescReduzida da tabela CondicoesPagto com a condicao EmRecebimento = 1 e coloca na colecao

Dim lComando As Long
Dim lErro As Long
Dim tCondicaoPagto As typeCondicaoPagto
Dim sOrder As String

On Error GoTo Erro_CondicoesPagto_Le_Recebimento

    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 19194
    
    tCondicaoPagto.sDescReduzida = String(STRING_CONDICAO_PAGTO_DESCRICAO_REDUZIDA, 0)
    
    If gobjCRFAT.iCondPagtoSemCodigo = MARCADO Then
        sOrder = "DescReduzida"
    Else
        sOrder = "Codigo"
    End If

    'Seleciona Condições de Pagamento de Contas a Receber
    lErro = Comando_Executar(lComando, "SELECT Codigo, DescReduzida FROM CondicoesPagto WHERE EmRecebimento = ? ORDER BY " & sOrder, tCondicaoPagto.iCodigo, tCondicaoPagto.sDescReduzida, 1)
    If lErro <> AD_SQL_SUCESSO Then Error 19195

    'Lê o primeiro Codigo e DescReduzida
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 19196

    Do While lErro <> AD_SQL_SEM_DADOS

        'Coloca o Codigo e a DescReduzida lidos na coleção
        colCod_DescReduzida.Add tCondicaoPagto.iCodigo, tCondicaoPagto.sDescReduzida

        'Lê o próximo Codigo e DescReduzida
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 19197

    Loop

    'Fecha o comando
    lErro = Comando_Fechar(lComando)

    CondicoesPagto_Le_Recebimento = SUCESSO

    Exit Function

Erro_CondicoesPagto_Le_Recebimento:

    CondicoesPagto_Le_Recebimento = Err

    Select Case Err

        Case 19194
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 19195
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONDICOESPAGTO", Err)

        Case 19196, 19197
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONDICAOPAGTO", Err, tCondicaoPagto.iCodigo)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148515)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function CondicoesPagto_Le_Pagamento(ByVal colCod_DescReduzida As AdmColCodigoNome) As Long
'Le todos os Codigos e DescReduzida da tabela CondicoesPagto com a condicao EmPagamento = 1 e coloca na colecao

Dim lComando As Long
Dim lErro As Long
Dim tCondicaoPagto As typeCondicaoPagto
Dim sOrder As String

On Error GoTo Erro_CondicoesPagto_Le_Pagamento

    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 19198
   
    tCondicaoPagto.sDescReduzida = String(STRING_CONDICAO_PAGTO_DESCRICAO_REDUZIDA, 0)
    
    If gobjCRFAT.iCondPagtoSemCodigo = MARCADO Then
        sOrder = "DescReduzida"
    Else
        sOrder = "Codigo"
    End If

    'Seleciona Condições de Pagamento de Contas a Pagar
    lErro = Comando_Executar(lComando, "SELECT Codigo, DescReduzida FROM CondicoesPagto WHERE EmPagamento = ? ORDER BY " & sOrder, tCondicaoPagto.iCodigo, tCondicaoPagto.sDescReduzida, 1)
    If lErro <> AD_SQL_SUCESSO Then Error 19199

    'Lê o primeiro Codigo e DescReduzida
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 19200

    Do While lErro <> AD_SQL_SEM_DADOS

        'Coloca o Codigo e a DescReduzida lidos na coleção
        colCod_DescReduzida.Add tCondicaoPagto.iCodigo, tCondicaoPagto.sDescReduzida

        'Lê o próximo Codigo e DescReduzida
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 19201

    Loop

    'Fecha comando
    lErro = Comando_Fechar(lComando)

    CondicoesPagto_Le_Pagamento = SUCESSO

    Exit Function

Erro_CondicoesPagto_Le_Pagamento:

    CondicoesPagto_Le_Pagamento = Err

    Select Case Err

        Case 19198
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 19199
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONDICOESPAGTO", Err)

        Case 19200, 19201
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONDICAOPAGTO", Err, tCondicaoPagto.iCodigo)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148516)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function CondicaoPagto_Le(ByVal objCondicaoPagto As ClassCondicaoPagto) As Long
'le a Condicao de Pagto a partir da chave fornecida em objCondicaoPagto. Devolve os dados em objCondicaoPagto

Dim lComando As Long
Dim lErro As Long
Dim tCondicaoPagto As typeCondicaoPagto

On Error GoTo Erro_CondicaoPagto_Le

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 19202

    tCondicaoPagto.sDescReduzida = String(STRING_CONDICAO_PAGTO_DESCRICAO_REDUZIDA, 0)
    tCondicaoPagto.sDescricao = String(STRING_CONDICAO_PAGTO_DESCRICAO, 0)
    
     'Verifica se a CondicaoPagto existe
    lErro = Comando_Executar(lComando, "SELECT DescReduzida, Descricao, EmPagamento, EmRecebimento, NumeroParcelas, DiasParaPrimeiraParcela, IntervaloParcelas, Mensal, DiaDoMes, AcrescimoFinanceiro, Modificador, DataFixa, CargoMinimo, FormaPagamento, TetoParcela FROM CondicoesPagto WHERE Codigo = ?", tCondicaoPagto.sDescReduzida, tCondicaoPagto.sDescricao, tCondicaoPagto.iEmPagamento, tCondicaoPagto.iEmRecebimento, tCondicaoPagto.iNumeroParcelas, tCondicaoPagto.iDiasParaPrimeiraParcela, tCondicaoPagto.iIntervaloParcelas, tCondicaoPagto.iMensal, tCondicaoPagto.iDiaDoMes, tCondicaoPagto.dAcrescimoFinanceiro, tCondicaoPagto.iModificador, tCondicaoPagto.iDataFixa, tCondicaoPagto.iCargoMinimo, tCondicaoPagto.iFormaPagamento, tCondicaoPagto.dTetoParcela, objCondicaoPagto.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 19203

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 19204

    'CondicaoPagto não está cadastrada
    If lErro = AD_SQL_SEM_DADOS Then Error 19205

    objCondicaoPagto.sDescReduzida = tCondicaoPagto.sDescReduzida
    objCondicaoPagto.sDescricao = tCondicaoPagto.sDescricao
    objCondicaoPagto.iEmPagamento = tCondicaoPagto.iEmPagamento
    objCondicaoPagto.iEmRecebimento = tCondicaoPagto.iEmRecebimento
    objCondicaoPagto.iNumeroParcelas = tCondicaoPagto.iNumeroParcelas
    objCondicaoPagto.iDiasParaPrimeiraParcela = tCondicaoPagto.iDiasParaPrimeiraParcela
    objCondicaoPagto.iIntervaloParcelas = tCondicaoPagto.iIntervaloParcelas
    objCondicaoPagto.iMensal = tCondicaoPagto.iMensal
    objCondicaoPagto.iDiaDoMes = tCondicaoPagto.iDiaDoMes
    objCondicaoPagto.dAcrescimoFinanceiro = tCondicaoPagto.dAcrescimoFinanceiro
    objCondicaoPagto.iModificador = tCondicaoPagto.iModificador
    objCondicaoPagto.iDataFixa = tCondicaoPagto.iDataFixa
    objCondicaoPagto.iCargoMinimo = tCondicaoPagto.iCargoMinimo
    objCondicaoPagto.iFormaPagamento = tCondicaoPagto.iFormaPagamento
    objCondicaoPagto.dTetoParcela = tCondicaoPagto.dTetoParcela
    
    lErro = Comando_Fechar(lComando)

    CondicaoPagto_Le = SUCESSO

Exit Function

Erro_CondicaoPagto_Le:

    CondicaoPagto_Le = Err

    Select Case Err

        Case 19202
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 19203, 19204
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONDICAOPAGTO", Err, objCondicaoPagto.iCodigo)

        Case 19205 'CondicaoPagto nao cadastrada (sem dados)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148517)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function TipoMeioPagto_Le_Todos(ByVal colTipoMeioPagto As Collection) As Long
'Le todos os tipos de meio de Pagamento

Dim lErro As Long
Dim objTipoMeioPagto As ClassTipoMeioPagto
Dim tTipoMeioPagto As typeTipoMeioPagto
Dim lComando As Long

On Error GoTo Erro_TipoMeioPagto_Le_Todos

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 11875

    tTipoMeioPagto.sDescricao = String(STRING_TIPO_MEIO_PAGTO_DESCRICAO, 0)

    'Le todos os tipos de pagamento
    lErro = Comando_Executar(lComando, "SELECT Tipo, Descricao, Inativo, ExigeNumero FROM TipoMeioPagto", tTipoMeioPagto.iTipo, tTipoMeioPagto.sDescricao, tTipoMeioPagto.iInativo, tTipoMeioPagto.iExigeNumero)
    If lErro <> AD_SQL_SUCESSO Then Error 11876

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 11877

    'Passa todos para a collection
    Do While lErro = AD_SQL_SUCESSO

        Set objTipoMeioPagto = New ClassTipoMeioPagto

        objTipoMeioPagto.iTipo = tTipoMeioPagto.iTipo
        objTipoMeioPagto.sDescricao = tTipoMeioPagto.sDescricao
        objTipoMeioPagto.iInativo = tTipoMeioPagto.iInativo
        objTipoMeioPagto.iExigeNumero = tTipoMeioPagto.iExigeNumero

        colTipoMeioPagto.Add objTipoMeioPagto

        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 11878

    Loop

    TipoMeioPagto_Le_Todos = SUCESSO

    Call Comando_Fechar(lComando)

    Exit Function

Erro_TipoMeioPagto_Le_Todos:

    TipoMeioPagto_Le_Todos = Err

    Select Case Err

        Case 11875
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 11876, 11877, 11878
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOMEIOPAGTO", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148518)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function MovContaCorrente_Le(ByVal objMovContaCorrente As ClassMovContaCorrente) As Long
'Le o movimento de conta corrente passado como parametro

Dim lErro As Long
Dim lComando As Long
Dim tMovContaCorrente As typeMovContaCorrente

On Error GoTo Erro_MovContaCorrente_Le

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 11890

    tMovContaCorrente.sHistorico = String(STRING_HISTORICOMOVCONTA, 0)
    tMovContaCorrente.sNumRefExterna = String(STRING_NUMREFEXTERNA, 0)
    tMovContaCorrente.sNatureza = String(STRING_NATMOVCTA_CODIGO, 0)
    tMovContaCorrente.sCcl = String(STRING_CCL, 0)
        
    '#######################################
    'Inserido por Wagner 04/01/2005
    tMovContaCorrente.sObservacao = String(STRING_OBSERVACAO, 0)
    '#######################################
        
    '#######################################
    'Alterado por Wagner 04/01/2005
    'Le o movimento com o codigo passado como Parametro
    lErro = Comando_Executar(lComando, "SELECT FilialEmpresa, CodConta, Sequencial,Tipo,Excluido,TipoMeioPagto,Numero, DataMovimento, Valor, Historico, Portador, Conciliado, Favorecido, NumRefExterna, NumRefInterna, Observacao, Natureza, Ccl FROM MovimentosContaCorrente WHERE NumMovto = ?", tMovContaCorrente.iFilialEmpresa, tMovContaCorrente.iCodConta, tMovContaCorrente.lSequencial, tMovContaCorrente.iTipo, tMovContaCorrente.iExcluido, tMovContaCorrente.iTipoMeioPagto, tMovContaCorrente.lNumero, tMovContaCorrente.dtDataMovimento, tMovContaCorrente.dValor, tMovContaCorrente.sHistorico, _
        tMovContaCorrente.iPortador, tMovContaCorrente.iConciliado, tMovContaCorrente.iFavorecido, tMovContaCorrente.sNumRefExterna, tMovContaCorrente.lNumRefInterna, tMovContaCorrente.sObservacao, tMovContaCorrente.sNatureza, tMovContaCorrente.sCcl, objMovContaCorrente.lNumMovto)
    If lErro <> AD_SQL_SUCESSO Then Error 11891
    '#######################################

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 11892

    'Armazena em objMovcontacorrente
    If lErro = AD_SQL_SEM_DADOS Then Error 11893

    objMovContaCorrente.iFilialEmpresa = tMovContaCorrente.iFilialEmpresa
    objMovContaCorrente.iCodConta = tMovContaCorrente.iCodConta
    objMovContaCorrente.lSequencial = tMovContaCorrente.lSequencial
    objMovContaCorrente.iTipo = tMovContaCorrente.iTipo
    objMovContaCorrente.iExcluido = tMovContaCorrente.iExcluido
    objMovContaCorrente.iTipoMeioPagto = tMovContaCorrente.iTipoMeioPagto
    objMovContaCorrente.lNumero = tMovContaCorrente.lNumero
    objMovContaCorrente.dtDataMovimento = tMovContaCorrente.dtDataMovimento
    objMovContaCorrente.dValor = tMovContaCorrente.dValor
    objMovContaCorrente.sHistorico = tMovContaCorrente.sHistorico
    objMovContaCorrente.iPortador = tMovContaCorrente.iPortador
    objMovContaCorrente.iConciliado = tMovContaCorrente.iConciliado
    objMovContaCorrente.iFavorecido = tMovContaCorrente.iFavorecido
    objMovContaCorrente.sNumRefExterna = tMovContaCorrente.sNumRefExterna
    objMovContaCorrente.lNumRefInterna = tMovContaCorrente.lNumRefInterna

    '#######################################
    'Inserido por Wagner 04/01/2005
    objMovContaCorrente.sObservacao = tMovContaCorrente.sObservacao
    objMovContaCorrente.sNatureza = tMovContaCorrente.sNatureza
    objMovContaCorrente.sCcl = tMovContaCorrente.sCcl
    '#######################################

    Call Comando_Fechar(lComando)

    MovContaCorrente_Le = SUCESSO

    Exit Function

Erro_MovContaCorrente_Le:

    MovContaCorrente_Le = Err

    Select Case Err

        Case 11890
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 11891, 11892
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCONTACORRENTE", Err)

        Case 11893

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148519)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function TipoMeioPagto_Le(ByVal objTipoMeioPagto As ClassTipoMeioPagto) As Long
'Le o Tipo de Pagamento com o codigo passado como parametro

Dim lErro As Long
Dim lComando As Long
Dim tTipoMeioPagto As typeTipoMeioPagto

On Error GoTo Erro_TipoMeioPagto_Le

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 11906

    tTipoMeioPagto.sDescricao = String(STRING_NOME, 0)

    'Seleciona o tipo com o codigo passado
    lErro = Comando_Executar(lComando, "SELECT Descricao, ExigeNumero, Inativo FROM TipoMeioPagto WHERE Tipo = ? ", tTipoMeioPagto.sDescricao, tTipoMeioPagto.iExigeNumero, tTipoMeioPagto.iInativo, objTipoMeioPagto.iTipo)
    If lErro <> AD_SQL_SUCESSO Then Error 11907

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 11908

    'Verifica se existe
    If lErro = AD_SQL_SEM_DADOS Then Error 11909

    'Guarda os dados em objTipoMeioPagto
    objTipoMeioPagto.sDescricao = tTipoMeioPagto.sDescricao
    objTipoMeioPagto.iExigeNumero = tTipoMeioPagto.iExigeNumero
    objTipoMeioPagto.iInativo = tTipoMeioPagto.iInativo

    Call Comando_Fechar(lComando)

    TipoMeioPagto_Le = SUCESSO

    Exit Function

Erro_TipoMeioPagto_Le:

    TipoMeioPagto_Le = Err

    Select Case Err

        Case 11906
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 11907, 11908
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOMEIOPAGTO", Err, objTipoMeioPagto.iTipo)

        Case 11909

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148520)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function ContaCorrenteInt_Le(ByVal iCodigo As Integer, ByVal objContaCorrenteInt As ClassContasCorrentesInternas) As Long
'le os dados da contacorrente, cujo codigo foi passado como parametro
'??? no futuro trocar interface p/passar o codigo no proprio objeto

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim tContaCorrenteInt As typeContaCorrenteInt

On Error GoTo Erro_ContaCorrenteInt_Le

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 11803
    
    tContaCorrenteInt.sAgencia = String(STRING_AGENCIA, 0)
    tContaCorrenteInt.sContaContabil = String(STRING_CONTA, 0)
    tContaCorrenteInt.sContato = String(STRING_CONTATO, 0)
    tContaCorrenteInt.sConvenioPagto = String(STRING_CONVENIO_PAGTO, 0)
    tContaCorrenteInt.sDescricao = String(STRING_CONTA_CORRENTE_DESCRICAO, 0)
    tContaCorrenteInt.sDVAgConta = String(STRING_DV, 0)
    tContaCorrenteInt.sDVAgencia = String(STRING_DV, 0)
    tContaCorrenteInt.sDVNumConta = String(STRING_DV, 0)
    tContaCorrenteInt.sNomeReduzido = String(STRING_NOME, 0)
    tContaCorrenteInt.sNumConta = String(STRING_NUMCONTA, 0)
    tContaCorrenteInt.sTelefone = String(STRING_TELEFONE, 0)
    tContaCorrenteInt.sFax = String(STRING_TELEFONE, 0)
    tContaCorrenteInt.sDirArqBordPagto = String(STRING_CONTA_DIRARQBORDPAGTO, 0)
    tContaCorrenteInt.sContaContabilChqPre = String(STRING_CONTA, 0)
    
    'SEleciona todos os dados relacionados a conta passada como parametro
    lErro = Comando_Executar(lComando, "SELECT FilialEmpresa, NomeReduzido, Descricao, CodBanco, Agencia, DVAgencia, NumConta, DVNumConta, DVagConta, Contato, ConvenioPagto, Telefone,Fax, SaldoInicial, DataSaldoInicial, ContaContabil, DirArqBordPagto, Rotativo, ContaContabilChqPre, CNABProxSeqArqCobr FROM ContasCorrentesInternas WHERE Codigo = ? ", tContaCorrenteInt.iFilialEmpresa, tContaCorrenteInt.sNomeReduzido, tContaCorrenteInt.sDescricao, _
        tContaCorrenteInt.iCodBanco, tContaCorrenteInt.sAgencia, tContaCorrenteInt.sDVAgencia, tContaCorrenteInt.sNumConta, tContaCorrenteInt.sDVNumConta, tContaCorrenteInt.sDVAgConta, tContaCorrenteInt.sContato, tContaCorrenteInt.sConvenioPagto, tContaCorrenteInt.sTelefone, tContaCorrenteInt.sFax, _
        tContaCorrenteInt.dSaldoInicial, tContaCorrenteInt.dtDataSaldoInicial, tContaCorrenteInt.sContaContabil, tContaCorrenteInt.sDirArqBordPagto, tContaCorrenteInt.dRotativo, tContaCorrenteInt.sContaContabilChqPre, tContaCorrenteInt.lCNABProxSeqArqCobr, iCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 11805

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 11867
    
    'Verifica se a conta foi encontrada
    If lErro = AD_SQL_SEM_DADOS Then Error 11807

    'transafere os dados para objcontacorrenteint
    objContaCorrenteInt.iCodigo = iCodigo
    objContaCorrenteInt.iFilialEmpresa = tContaCorrenteInt.iFilialEmpresa
    objContaCorrenteInt.sNomeReduzido = tContaCorrenteInt.sNomeReduzido
    objContaCorrenteInt.sDescricao = tContaCorrenteInt.sDescricao
    objContaCorrenteInt.iCodBanco = tContaCorrenteInt.iCodBanco
    objContaCorrenteInt.sAgencia = tContaCorrenteInt.sAgencia
    objContaCorrenteInt.sDVAgencia = tContaCorrenteInt.sDVAgencia
    objContaCorrenteInt.sNumConta = tContaCorrenteInt.sNumConta
    objContaCorrenteInt.sDVNumConta = tContaCorrenteInt.sDVNumConta
    objContaCorrenteInt.sDVAgConta = tContaCorrenteInt.sDVAgConta
    objContaCorrenteInt.sContato = tContaCorrenteInt.sContato
    objContaCorrenteInt.sConvenioPagto = tContaCorrenteInt.sConvenioPagto
    objContaCorrenteInt.sTelefone = tContaCorrenteInt.sTelefone
    objContaCorrenteInt.dSaldoInicial = tContaCorrenteInt.dSaldoInicial
    objContaCorrenteInt.sContaContabil = tContaCorrenteInt.sContaContabil
    objContaCorrenteInt.sFax = tContaCorrenteInt.sFax
    objContaCorrenteInt.dtDataInicial = tContaCorrenteInt.dtDataSaldoInicial
    objContaCorrenteInt.sDirArqBordPagto = tContaCorrenteInt.sDirArqBordPagto
    objContaCorrenteInt.dRotativo = tContaCorrenteInt.dRotativo
    objContaCorrenteInt.sContaContabilChqPre = tContaCorrenteInt.sContaContabilChqPre
    objContaCorrenteInt.lCNABProxSeqArqCobr = tContaCorrenteInt.lCNABProxSeqArqCobr
    
    lErro = Comando_Fechar(lComando)
    
    ContaCorrenteInt_Le = SUCESSO
    
    Exit Function
 
Erro_ContaCorrenteInt_Le:

    ContaCorrenteInt_Le = Err
    
    Select Case Err
    
        Case 11803
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
              
        Case 11805, 11867
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONTASCORRENTESINTERNAS", Err)
        
        Case 11807
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148521)
    
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function Mensagem_Le(ByVal objMensagem As ClassMensagem) As Long
'le a Mensagem a partir da chave fornecida em objMensagem. Devolve os dados em objMensagem

Dim lComando As Long
Dim lErro As Long
Dim tMensagem As typeMensagem

On Error GoTo Erro_Mensagem_Le

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 19231

    tMensagem.sDescricao = String(STRING_NFISCAL_MENSAGEM, 0)

     'Verifica se a Mensagem existe, e se existir carrega seus dados em objMensagem
    lErro = Comando_Executar(lComando, "SELECT Descricao FROM Mensagens WHERE Codigo = ?", tMensagem.sDescricao, objMensagem.iCodigo)

    If lErro <> AD_SQL_SUCESSO Then Error 19232

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 19233

    'Mensagem não está cadastrada
    If lErro = AD_SQL_SEM_DADOS Then Error 19234

    objMensagem.sDescricao = tMensagem.sDescricao
    
    lErro = Comando_Fechar(lComando)

    Mensagem_Le = SUCESSO

Exit Function

Erro_Mensagem_Le:

    Mensagem_Le = Err

    Select Case Err

        Case 19231
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 19232, 19233
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MENSAGEM", Err, objMensagem.iCodigo)

        Case 19234 'Mensagem nao cadastrada

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148522)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function Transportadora_Le(ByVal objTransportadora As ClassTransportadora) As Long
'Lê a Transportadora a partir do código em objTransportadora.
'Devolve os dados em objTransportadora.

'Alteração Daniel em 21/01/02 - Inclusão do campo Inscrição Municipal

Dim lComando As Long
Dim lErro As Long
Dim tTransportadora As typeTransportadora

On Error GoTo Erro_Transportadora_Le

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 19247

    tTransportadora.sNome = String(STRING_TRANSPORTADORA_NOME, 0)
    tTransportadora.sNomeReduzido = String(STRING_TRANSPORTADORA_NOME_REDUZIDO, 0)
    tTransportadora.sCgc = String(STRING_CGC, 0)
    tTransportadora.sInscricaoEstadual = String(STRING_INSCR_EST, 0)
    tTransportadora.sInscricaoMunicipal = String(STRING_INSCR_MUN, 0)
    tTransportadora.sGuia = String(STRING_TRANSPORTADORA_GUIA, 0)
    tTransportadora.sObservacao = String(STRING_TRANSPORTADORA_OBS, 0)

     'Verifica se a Transportadora existe, e se existir carrega seus dados em objTransportadora
    lErro = Comando_Executar(lComando, "SELECT IENaoContrib, IEIsento, Nome, NomeReduzido, CGC, InscricaoEstadual, InscricaoMunicipal, Endereco, ViaTransporte, PesoMinimo, Guia, Observacao FROM Transportadoras WHERE Codigo = ?", tTransportadora.iIENaoContrib, tTransportadora.iIEIsento, tTransportadora.sNome, tTransportadora.sNomeReduzido, tTransportadora.sCgc, tTransportadora.sInscricaoEstadual, tTransportadora.sInscricaoMunicipal, tTransportadora.lEndereco, tTransportadora.iViaTransporte, tTransportadora.dPesoMinimo, tTransportadora.sGuia, tTransportadora.sObservacao, objTransportadora.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 19248

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 19249

    'Transportadora não está cadastrada
    If lErro = AD_SQL_SEM_DADOS Then Error 19250

    'Carrega os dados lidos no objTransportadora
    objTransportadora.sNome = tTransportadora.sNome
    objTransportadora.sNomeReduzido = tTransportadora.sNomeReduzido
    objTransportadora.sCgc = tTransportadora.sCgc
    objTransportadora.sInscricaoEstadual = tTransportadora.sInscricaoEstadual
    objTransportadora.sInscricaoMunicipal = tTransportadora.sInscricaoMunicipal
    objTransportadora.lEndereco = tTransportadora.lEndereco
    objTransportadora.iViaTransporte = tTransportadora.iViaTransporte
    objTransportadora.dPesoMinimo = tTransportadora.dPesoMinimo
    objTransportadora.sGuia = tTransportadora.sGuia
    objTransportadora.sObservacao = tTransportadora.sObservacao
    objTransportadora.iIEIsento = tTransportadora.iIEIsento
    objTransportadora.iIENaoContrib = tTransportadora.iIENaoContrib

    Call Comando_Fechar(lComando)

    Transportadora_Le = SUCESSO

    Exit Function

Erro_Transportadora_Le:

    Transportadora_Le = Err

    Select Case Err

        Case 19247
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 19248, 19249
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TRANSPORTADORA", Err, objTransportadora.iCodigo)

        Case 19250 'Transportadora nao cadastrada

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148523)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function HistMovCta_Le(ByVal objHistMovCta As ClassHistMovCta) As Long
'Lê o Histórico a partir da chave fornecida em objHistMovCta (Código) e retorna os dados em objHistMovCta

Dim lComando As Long
Dim lErro As Long
Dim sDescricao As String

On Error GoTo Erro_HistMovCta_Le

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 15009

    sDescricao = String(STRING_HISTORICOMOVCONTA, 0)

    'Seleciona os Históricos cujo Código está no Obj e coloca a descrição no sDescricao
    lErro = Comando_Executar(lComando, "SELECT Descricao FROM HistPadraoMovConta WHERE Codigo = ?", sDescricao, objHistMovCta.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 15010

    'Posiciona no primeiro Histórico dos que foram lidos
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 15012

    'Se não encontrou nenhum Histórico com o Código em questão
    If lErro = AD_SQL_SEM_DADOS Then Error 15011

    'Passa a descrição do Histórico lido para sDescricao
    objHistMovCta.sDescricao = sDescricao

    Call Comando_Fechar(lComando)

    HistMovCta_Le = SUCESSO

    Exit Function

Erro_HistMovCta_Le:

    HistMovCta_Le = Err

    Select Case Err

        Case 15009
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 15010, 15012
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TABELA_HISTMOVCTA1", Err, objHistMovCta.iCodigo)

        Case 15011

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148524)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function TiposDeAplicacao_Le_Todos(ByVal colTiposDeAplicacao As Collection) As Long
'Lê todos os Tipos de Aplicação contidos na tabela TiposDeAplicacao e os coloca na coleçao colTiposDeAplicacao

Dim lComando As Long
Dim lErro As Long
Dim objTiposDeAplicacao As ClassTiposDeAplicacao
Dim tTiposDeAplicacao As typeTiposDeAplicacao

On Error GoTo Erro_TiposDeAplicacao_Le_Todos

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 15080
    
    'Inicializa o Type
    tTiposDeAplicacao.sDescricao = String(STRING_DESCRICAO_CAMPO, 0)
    tTiposDeAplicacao.sContaAplicacao = String(STRING_CONTA, 0)
    tTiposDeAplicacao.sContaReceita = String(STRING_CONTA, 0)
    tTiposDeAplicacao.sHistorico = String(STRING_HISTORICOMOVCONTA, 0)
    
    'Lê toda a tabela TiposDeAplicacao e coloca no Type
    lErro = Comando_Executar(lComando, "SELECT Codigo, Descricao, ContaContabilAplicacao, ContaReceitaFinanceira, Historico, Inativo FROM TiposDeAplicacao ORDER BY Descricao", tTiposDeAplicacao.iCodigo, tTiposDeAplicacao.sDescricao, tTiposDeAplicacao.sContaAplicacao, tTiposDeAplicacao.sContaReceita, tTiposDeAplicacao.sHistorico, tTiposDeAplicacao.iInativo)
    If lErro <> AD_SQL_SUCESSO Then Error 15081

    'Posiciona no primeiro Tipo de aplicação dos que foram lidos
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 15082
    
    'Passa os Tipos de aplicação lidos para o Obj
    Do While lErro <> AD_SQL_SEM_DADOS

        Set objTiposDeAplicacao = New ClassTiposDeAplicacao
        
        objTiposDeAplicacao.iCodigo = tTiposDeAplicacao.iCodigo
        objTiposDeAplicacao.sDescricao = tTiposDeAplicacao.sDescricao
        objTiposDeAplicacao.sContaAplicacao = tTiposDeAplicacao.sContaAplicacao
        objTiposDeAplicacao.sContaReceita = tTiposDeAplicacao.sContaReceita
        objTiposDeAplicacao.sHistorico = tTiposDeAplicacao.sHistorico
        objTiposDeAplicacao.iInativo = tTiposDeAplicacao.iInativo
        
        'Coloca o Tipo de aplicação lido na coleção
        colTiposDeAplicacao.Add objTiposDeAplicacao
        
        'Lê o próximo Tipo de aplicação
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 15083

    Loop

    Call Comando_Fechar(lComando)
    
    TiposDeAplicacao_Le_Todos = SUCESSO

    Exit Function

Erro_TiposDeAplicacao_Le_Todos:

    TiposDeAplicacao_Le_Todos = Err
    
    Select Case Err

        Case 15080
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 15081, 15082, 15083
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TABELA", Err, "TiposDeAplicacao")
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148525)

    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function
    
End Function

Function TiposDeAplicacao_Le(ByVal objTiposDeAplicacao As ClassTiposDeAplicacao) As Long
'Lê o Tipo de aplicação a partir da chave fornecida em objTiposDeAplicacao (Código) e retorna os dados em objTiposDeAplicacao

Dim lComando As Long
Dim lErro As Long
Dim tTiposDeAplicacao As typeTiposDeAplicacao

On Error GoTo Erro_TiposDeAplicacao_Le

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 15065
    
    'Inicializa o Type
    tTiposDeAplicacao.sDescricao = String(STRING_DESCRICAO_CAMPO, 0)
    tTiposDeAplicacao.sContaAplicacao = String(STRING_CONTA, 0)
    tTiposDeAplicacao.sContaReceita = String(STRING_CONTA, 0)
    tTiposDeAplicacao.sHistorico = String(STRING_HISTORICOMOVCONTA, 0)
       
    'Seleciona os Tipos de aplicação cujo Código está no Obj e coloca no Type
    lErro = Comando_Executar(lComando, "SELECT Descricao, ContaContabilAplicacao, ContaReceitaFinanceira, Historico, Inativo FROM TiposDeAplicacao WHERE Codigo = ?", tTiposDeAplicacao.sDescricao, tTiposDeAplicacao.sContaAplicacao, tTiposDeAplicacao.sContaReceita, tTiposDeAplicacao.sHistorico, tTiposDeAplicacao.iInativo, objTiposDeAplicacao.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 15066
    
    'Posiciona no primeiro Tipo de aplicação dos que foram lidos
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 15067
        
    'Se não encontrou nenhum Tipo de aplicação com o código em questão
    If lErro = AD_SQL_SEM_DADOS Then Error 15068
    
    'Passa os dados do Tipo de Aplicação lido para o Obj
    objTiposDeAplicacao.sDescricao = tTiposDeAplicacao.sDescricao
    objTiposDeAplicacao.sContaAplicacao = tTiposDeAplicacao.sContaAplicacao
    objTiposDeAplicacao.sContaReceita = tTiposDeAplicacao.sContaReceita
    objTiposDeAplicacao.sHistorico = tTiposDeAplicacao.sHistorico
    objTiposDeAplicacao.iInativo = tTiposDeAplicacao.iInativo

    Call Comando_Fechar(lComando)
    
    TiposDeAplicacao_Le = SUCESSO

    Exit Function

Erro_TiposDeAplicacao_Le:

    TiposDeAplicacao_Le = Err
    
    Select Case Err
    
        Case 15065
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
    
        Case 15066, 15067
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOSDEAPLICACAO", Err, objTiposDeAplicacao.iCodigo)
        
        Case 15068
                       
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148526)

    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function MovContaCorrente_Le_Conciliacao(ByVal sSelecaoSQL As String, avCampo() As Variant, ByVal iNumCampo As Integer, ByVal colMovCCI As Collection, ByVal sOrdenacaoSQL As String) As Long
'Le os movimentos de conta correntes selecionados com a ajuda da expressão sSQL e dos valores contidos em avCampo. iNumCampo contem o numero de elementos de avCampo.
'O número de elementos lidos serão limitados conforme a constante MAX_CONCILIACAO
'Retorna os registros lidos em colMovCCI.

Dim lErro As Long
Dim avCampo1(1 To 50) As Variant
Dim iNumCampo1 As Integer
Dim iIndice As Integer
Dim sComandoSQL As String
Dim lComando As Long
Dim colSelecao As Collection
Dim objMovCCI As ClassMovContaCorrente
Dim iNumReg As Integer, iCredito As Integer

On Error GoTo Erro_MovContaCorrente_Le_Conciliacao

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 10754

    'numero do movimento
    avCampo1(1) = CLng(0)

    'codigo da conta corrente
    avCampo1(2) = CInt(0)

    'sequencial
    avCampo1(3) = CLng(0)
    
    'data do movimento
    avCampo1(4) = DATA_NULA
    
    'valor
    avCampo1(5) = CDbl(0)
    
    'historico
    avCampo1(6) = String(STRING_HISTORICOMOVCONTA, 0)

    'referencia externa
    avCampo1(7) = String(STRING_NUMREFEXTERNA, 0)
    
    'conciliado
    avCampo1(8) = CInt(0)
    
    avCampo1(9) = CInt(0)
    
    avCampo1(10) = CInt(0)
    avCampo1(11) = CInt(0)
    avCampo1(12) = CLng(0)
    
    iNumCampo1 = 12
    
    For iIndice = 1 To iNumCampo
    
        iNumCampo1 = iNumCampo1 + 1
        
        avCampo1(iNumCampo1) = avCampo(iIndice)
        
    Next
    
    sComandoSQL = "SELECT NumMovTo, CodConta, Sequencial, DataMovimento, Valor, Historico, NumRefExterna, Conciliado, TiposMovtoCtaCorrente.Credito, Tipo, TipoMeioPagto, Numero FROM MovimentosContaCorrente, TiposMovtoCtaCorrente WHERE MovimentosContaCorrente.Tipo = TiposMovtoCtaCorrente.Codigo AND "
    
    sComandoSQL = sComandoSQL & sSelecaoSQL & " AND Excluido = ? " & sOrdenacaoSQL
    
    iNumCampo1 = iNumCampo1 + 1
        
    avCampo1(iNumCampo1) = MOVCONTACORRENTE_NAO_EXCLUIDO
    
    'executa o comando SQL passado como parametro
    lErro = CF("Browse_Prepara_Comando_SQL", sComandoSQL, iNumCampo1, lComando, avCampo1(), colSelecao, 1)
    If lErro <> SUCESSO Then Error 10755
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 10756

    'Se não tiver nenhum registro para a condição selecionada
    If lErro = AD_SQL_SEM_DADOS Then Error 10757

    iNumReg = 0

    Do While lErro = AD_SQL_SUCESSO
    
        iNumReg = iNumReg + 1
        
        If iNumReg > MAX_CONCILIACAO Then Error 10758
        
        Set objMovCCI = New ClassMovContaCorrente
        
        objMovCCI.lNumMovto = avCampo1(1)
        objMovCCI.iCodConta = avCampo1(2)
        objMovCCI.lSequencial = avCampo1(3)
        objMovCCI.dtDataMovimento = avCampo1(4)
        'se for um credito
        If avCampo1(9) = 1 Then
            objMovCCI.dValor = avCampo1(5)
        Else
            objMovCCI.dValor = -avCampo1(5)
        End If
        objMovCCI.sHistorico = avCampo1(6)
        objMovCCI.sNumRefExterna = avCampo1(7)
        objMovCCI.iConciliado = avCampo1(8)
        objMovCCI.iTipo = avCampo1(10)
        objMovCCI.iTipoMeioPagto = avCampo1(11)
        objMovCCI.lNumero = avCampo1(12)
        
        colMovCCI.Add objMovCCI
        
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 10759
        
    Loop

    Call Comando_Fechar(lComando)

    MovContaCorrente_Le_Conciliacao = SUCESSO

    Exit Function

Erro_MovContaCorrente_Le_Conciliacao:

    MovContaCorrente_Le_Conciliacao = Err

    Select Case Err

        Case 10754
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 10755, 10757, 10758
        
        Case 10756, 10759
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCONTACORRENTE", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148527)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function LctosExtratoBancario_Le_Conciliacao(ByVal sSelecaoSQL As String, avCampo() As Variant, ByVal iNumCampo As Integer, ByVal colExtrato As Collection, ByVal sOrdenacaoSQL As String) As Long
'Le os lançamentos dos extratos bancários da conta correntes selecionados com a ajuda da expressão sSQL e dos valores contidos em avCampo. iNumCampo contem o numero de elementos de avCampo.
'O número de elementos lidos serão limitados conforme a constante MAX_CONCILIACAO
'Retorna os registros lidos em colExtrato

Dim lErro As Long
Dim avCampo1(1 To 50) As Variant
Dim iNumCampo1 As Integer
Dim iIndice As Integer
Dim sComandoSQL As String
Dim lComando As Long
Dim colSelecao As Collection
Dim objExtrBcoDet As ClassExtrBcoDet
Dim iNumReg As Integer

On Error GoTo Erro_LctosExtratoBancario_Le_Conciliacao

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 10765

    'numero do extrato
    avCampo1(1) = CInt(0)

    'codigo da conta corrente
    avCampo1(2) = CInt(0)

    'sequencial
    avCampo1(3) = CLng(0)
    
    'data do lançamento
    avCampo1(4) = DATA_NULA
    
    'valor
    avCampo1(5) = CDbl(0)
    
    'historico
    avCampo1(6) = String(STRING_EXTRATO_HISTORICO, 0)

    'categoria
    avCampo1(7) = CInt(0)
    
    'codigo do lancto no banco
    avCampo1(8) = String(STRING_EXTRATO_CODIGO_LANCAMENTO, 0)
    
    'documento
    avCampo1(9) = String(STRING_EXTRATO_DOCUMENTO, 0)
    
    'conciliado
    avCampo1(10) = CInt(0)
    
    iNumCampo1 = 10
    
    For iIndice = 1 To iNumCampo
    
        iNumCampo1 = iNumCampo1 + 1
        
        avCampo1(iNumCampo1) = avCampo(iIndice)
        
    Next
    
    sComandoSQL = "SELECT NumExtrato, CodConta, SeqLcto, Data, Valor, Historico, Categoria, CodLctoBco, Documento, Conciliado FROM LctosExtratoBancario WHERE "
    
    sComandoSQL = sComandoSQL & sSelecaoSQL & sOrdenacaoSQL
    
    'executa o comando SQL passado como parametro
    lErro = CF("Browse_Prepara_Comando_SQL", sComandoSQL, iNumCampo1, lComando, avCampo1(), colSelecao, 1)
    If lErro <> SUCESSO Then Error 10766
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 10767

    'Se não tiver nenhum registro para a condição selecionada
    If lErro = AD_SQL_SEM_DADOS Then Error 10768

    iNumReg = 0

    Do While lErro = AD_SQL_SUCESSO
    
        iNumReg = iNumReg + 1
        
        If iNumReg > MAX_CONCILIACAO Then Error 10769
        
        Set objExtrBcoDet = New ClassExtrBcoDet
        
        objExtrBcoDet.iNumExtrato = avCampo1(1)
        objExtrBcoDet.iCodConta = avCampo1(2)
        objExtrBcoDet.lSeqLcto = avCampo1(3)
        objExtrBcoDet.dtData = avCampo1(4)
        objExtrBcoDet.dValor = avCampo1(5)
        objExtrBcoDet.sHistorico = avCampo1(6)
        objExtrBcoDet.iCategoria = avCampo1(7)
        objExtrBcoDet.sCodLctoBco = avCampo1(8)
        objExtrBcoDet.sDocumento = avCampo1(9)
        objExtrBcoDet.iConciliado = avCampo1(10)
        
        colExtrato.Add objExtrBcoDet
        
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 10770
        
    Loop

    Call Comando_Fechar(lComando)

    LctosExtratoBancario_Le_Conciliacao = SUCESSO

    Exit Function

Erro_LctosExtratoBancario_Le_Conciliacao:

    LctosExtratoBancario_Le_Conciliacao = Err

    Select Case Err

        Case 10765
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 10766, 10768, 10769
        
        Case 10767, 10770
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_LCTOSEXTRATOBANCARIO", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148528)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function ConciliacaoBancaria_Le_Ext(ByVal iCodConta As Integer, ByVal iNumExtrato As Integer, ByVal lSeqExtrBco As Long, ByVal colConciliacao As Collection) As Long
Attribute ConciliacaoBancaria_Le_Ext.VB_Description = "Lê as conciliações selecionadas de acordo com a conta, numero do extrato e sequencial do extrato. Retorna os dados em colConciliacao."
'le as conciliações selecionadas de acordo com a conta, numero do extrato e sequencial do extrato. Retorna os dados em colConciliacao.

Dim lErro As Long
Dim objConciliacaoBancaria As ClassConciliacaoBancaria
Dim lComando As Long
Dim iTipo As Integer
Dim lSequencialMovto As Long

On Error GoTo Erro_ConciliacaoBancaria_Le_Ext

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 10866

    lErro = Comando_Executar(lComando, "SELECT SequencialMovto, Tipo FROM ConciliacaoBancaria WHERE CodConta=? AND NumExtrato=? AND SeqExtrBco=?", lSequencialMovto, iTipo, iCodConta, iNumExtrato, lSeqExtrBco)
    If lErro <> AD_SQL_SUCESSO Then Error 10867

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 10868
    
    Do While lErro = AD_SQL_SUCESSO
    
        Set objConciliacaoBancaria = New ClassConciliacaoBancaria

        objConciliacaoBancaria.iCodConta = iCodConta
        objConciliacaoBancaria.lSequencialMovto = lSequencialMovto
        objConciliacaoBancaria.iNumExtrato = iNumExtrato
        objConciliacaoBancaria.lSeqExtrBco = lSeqExtrBco
        objConciliacaoBancaria.iTipo = iTipo
        
        colConciliacao.Add objConciliacaoBancaria

        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 10870

    Loop

    Call Comando_Fechar(lComando)

    ConciliacaoBancaria_Le_Ext = SUCESSO
    
    Exit Function
    
Erro_ConciliacaoBancaria_Le_Ext:

    ConciliacaoBancaria_Le_Ext = SUCESSO
    
    Select Case Err
    
        Case 10866
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 10867, 10868, 10870
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONCILIACAOBANCARIA", Err, iCodConta, iNumExtrato, lSeqExtrBco)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148529)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function ConciliacaoBancaria_Le_Mov(ByVal iCodConta As Integer, ByVal lSequencial As Long, colConciliacao As Collection) As Long
Attribute ConciliacaoBancaria_Le_Mov.VB_Description = "Lê as conciliações selecionadas de acordo com a conta e sequencial do movimento. Retorna os dados em colConciliacao.\r\n"
'le as conciliações selecionadas de acordo com a conta e sequencial do movimento. Retorna os dados em colConciliacao.

Dim lErro As Long
Dim objConciliacaoBancaria As ClassConciliacaoBancaria
Dim lComando As Long
Dim iTipo As Integer
Dim iNumExtrato As Integer
Dim lSeqExtrBco As Long

On Error GoTo Erro_ConciliacaoBancaria_Le_Mov

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 10877

    lErro = Comando_Executar(lComando, "SELECT NumExtrato, SeqExtrBco, Tipo FROM ConciliacaoBancaria WHERE CodConta=? AND SequencialMovto=?", iNumExtrato, lSeqExtrBco, iTipo, iCodConta, lSequencial)
    If lErro <> AD_SQL_SUCESSO Then Error 10878

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 10879
    
    Do While lErro = AD_SQL_SUCESSO
    
        Set objConciliacaoBancaria = New ClassConciliacaoBancaria

        objConciliacaoBancaria.iCodConta = iCodConta
        objConciliacaoBancaria.lSequencialMovto = lSequencial
        objConciliacaoBancaria.iNumExtrato = iNumExtrato
        objConciliacaoBancaria.lSeqExtrBco = lSeqExtrBco
        objConciliacaoBancaria.iTipo = iTipo
        
        colConciliacao.Add objConciliacaoBancaria

        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 10880

    Loop

    Call Comando_Fechar(lComando)

    ConciliacaoBancaria_Le_Mov = SUCESSO
    
    Exit Function
    
Erro_ConciliacaoBancaria_Le_Mov:

    ConciliacaoBancaria_Le_Mov = SUCESSO
    
    Select Case Err
    
        Case 10877
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 10878, 10879, 10880
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONCILIACAOBANCARIA2", Err, iCodConta, lSequencial)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148530)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Sub ParcelasPagar_Le_ChequesPag1(ByVal objChequesPag As ClassChequesPag, sSelect As String, iParamFilialEmpresa As Integer, iParamPortador As Integer)
' auxliar a ParcelasPagar_Le_ChequesPag
'monta o SELECT dinamicamente
Dim sFrom As String, sWhere As String, sFields As String, sOrderBy As String

    sFields = " Fornecedores.NomeReduzido, Fornecedores.RazaoSocial, FiliaisFornecedores.ContaContabil"
    sFields = sFields & ", TitulosPag.FilialEmpresa , TitulosPag.NumTitulo, TitulosPag.Fornecedor, TitulosPag.Filial, TitulosPag.SiglaDocumento"
    sFields = sFields & ", ParcelasPag.NumIntDoc, ParcelasPag.NumParcela, ParcelasPag.DataVencimento, ParcelasPag.Saldo, ParcelasPag.TipoCobranca, ParcelasPag.Portador"
    
    sFrom = " FROM ParcelasPag, TitulosPag, Fornecedores, TiposDeCobranca, FiliaisFornecedores"
    sWhere = " WHERE TitulosPag.Fornecedor = FiliaisFornecedores.CodFornecedor AND TitulosPag.Filial = FiliaisFornecedores.CodFilial AND ParcelasPag.DataVencimentoReal >= ? AND ParcelasPag.DataVencimentoReal <= ? AND ParcelasPag.Status = ? AND ParcelasPag.NumIntTitulo = TitulosPag.NumIntDoc AND TitulosPag.Fornecedor = Fornecedores.Codigo AND ParcelasPag.TipoCobranca = TiposDeCobranca.Codigo AND TiposDeCobranca.ValidoParaCheque = 1"

    'Se entrar como empresa toda pode pegar titulos de todas as filiais,
    If giFilialEmpresa = EMPRESA_TODA Or giFilialEmpresa = gobjCP.iFilialCentralizadora Then
        iParamFilialEmpresa = 0
    Else 'Senao pegar titulos somente da filial corrente
        sWhere = sWhere & " AND TitulosPag.FilialEmpresa = ?"
        iParamFilialEmpresa = 1
    End If

    'Se portador especifico
    If objChequesPag.iQualquerPortador = 0 Then
        sWhere = sWhere & " AND ParcelasPag.Portador =  ?" '? = objChequesPag.iPortador
        iParamPortador = 1
        sOrderBy = " ORDER BY ParcelasPag.TipoCobranca, Fornecedores.RazaoSocial, TitulosPag.Fornecedor, TitulosPag.Filial, ParcelasPag.DataVencimento, TitulosPag.NumTitulo"
        '(TitulosPag.FilialFornecedor talvez nao seja necessario)
    Else
        sOrderBy = " ORDER BY ParcelasPag.TipoCobranca, ParcelasPag.Portador, Fornecedores.RazaoSocial, TitulosPag.Fornecedor, TitulosPag.Filial, ParcelasPag.DataVencimento, TitulosPag.NumTitulo"
        iParamPortador = 0
    End If

    sSelect = "SELECT " & sFields & sFrom & sWhere & sOrderBy

End Sub

Private Function ParcelasPagar_Le_ChequesPag3(ByVal objChequesPag As ClassChequesPag, iTipoCobrancaAnt As Integer, ByVal iParcelasPagTipoCobranca As Integer, iSeqCheque As Integer, iPortadorAnt As Integer, ByVal iParcelasPagPortador As Integer, lFornecedorAnt As Long, ByVal lTitulosPagFornecedor As Long, iFilialFornAnt As Integer, ByVal iTitulosPagFilial As Integer, ByVal sTitulosPagSiglaDocumento As String, ByVal dtParcelasPagDataVencimento As Date, ByVal dParcelasPagSaldo As Double, ByVal iParcelasPagNumParcela As Integer, ByVal lParcelasPagNumIntDoc As Long, ByVal lTitulosPagNumTitulo As Long, ByVal sFornecedoresNomeReduzido As String, ByVal sNomeRedPortador As String, ByVal sFornecedoresRazaoSocial As String, ByVal dtVctoMinSemAtraso As Date, iNumParcsAtraso As Integer, ByVal sFilFornContaContabil As String, ByVal iTitulosPagFilialEmpresa As Integer) As Long
' auxiliar a ParcelasPagar_Le_ChequesPag
' inclui a parcela na colecao (objChequesPag.colInfoParcPag) fazendo a quebra das parcelas por cheques e desmarcando as parcelas atrasadas
    '    criterios p/"quebrar" cheques:
    '    1)troca de tipo de cobranca,
    '    2)troca de portador
    '    3)se tipo de cobranca <> cobranca bancaria e fornec-filial <>.
    '    4)se tipo de cobranca = cobranca bancaria e portador = "" e fornec-filial <>.
    
Dim lErro As Long, objInfoParcPag As ClassInfoParcPag
Dim iNovoCheque As Integer
On Error GoTo Erro_ParcelasPagar_Le_ChequesPag3

    Set objInfoParcPag = New ClassInfoParcPag

    With objInfoParcPag
        .dtDataVencimento = dtParcelasPagDataVencimento
        .dValor = dParcelasPagSaldo
        .iFilialForn = iTitulosPagFilial
        .iNumParcela = iParcelasPagNumParcela
        .iPortador = iParcelasPagPortador
        .iTipoCobranca = iParcelasPagTipoCobranca
        .lFornecedor = lTitulosPagFornecedor
        .lNumIntParc = lParcelasPagNumIntDoc
        .lNumTitulo = lTitulosPagNumTitulo
        .sNomeRedForn = sFornecedoresNomeReduzido
        .sNomeRedPortador = sNomeRedPortador
        .sRazaoSocialForn = sFornecedoresRazaoSocial
        .sSiglaDocumento = sTitulosPagSiglaDocumento
        .sContaFilForn = sFilFornContaContabil
        .iFilialEmpresa = iTitulosPagFilialEmpresa
    End With
    
    'parcelas em atraso vao entrar desmarcadas vao ficar antes das marcadas na colecao
    'obs, mais adiante podemos deixar as parcelas marcadas na posicao lida desde que modifiquemos a tela que usa esta colecao.
    If dtVctoMinSemAtraso > dtParcelasPagDataVencimento Then
        objInfoParcPag.iSeqCheque = 0
        If objChequesPag.colInfoParcPag.Count = 0 Then
            objChequesPag.colInfoParcPag.Add objInfoParcPag
        Else
            If iNumParcsAtraso = 0 Then
                objChequesPag.colInfoParcPag.Add Item:=objInfoParcPag, Before:=1
            Else
                objChequesPag.colInfoParcPag.Add Item:=objInfoParcPag, After:=iNumParcsAtraso
            End If
        End If
        iNumParcsAtraso = iNumParcsAtraso + 1
    Else
        
        If iTipoCobrancaAnt <> iParcelasPagTipoCobranca Then
            iNovoCheque = 1
        Else
            If iPortadorAnt <> iParcelasPagPortador Then
                iNovoCheque = 1
            Else
                If lFornecedorAnt <> lTitulosPagFornecedor Or iFilialFornAnt <> iTitulosPagFilial Then
                    If iParcelasPagTipoCobranca <> TIPO_COBRANCA_BANCARIA Then iNovoCheque = 1
                    If iParcelasPagTipoCobranca = TIPO_COBRANCA_BANCARIA And iParcelasPagPortador = 0 Then iNovoCheque = 1
                End If
            End If
        End If

        If iNovoCheque = 1 Then
            iSeqCheque = iSeqCheque + 1
        End If
        
        objInfoParcPag.iSeqCheque = iSeqCheque
        objChequesPag.colInfoParcPag.Add objInfoParcPag
    
        iTipoCobrancaAnt = iParcelasPagTipoCobranca
        iPortadorAnt = iParcelasPagPortador
        lFornecedorAnt = lTitulosPagFornecedor
        iFilialFornAnt = iTitulosPagFilial
            
    End If

    ParcelasPagar_Le_ChequesPag3 = SUCESSO
    
    Exit Function
        
Erro_ParcelasPagar_Le_ChequesPag3:

    ParcelasPagar_Le_ChequesPag3 = Err
    
    Select Case Err

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148531)

    End Select

    Exit Function

End Function

Public Function Portador_ObterNomeReduzido(ByVal iPortador As Integer, sNomeRedPortador As String, ByVal lComandoPortador As Long) As Long
'obtem o nome reduzido do portador identificado por iPortador (p/iPortador = 0 retorna "")

Dim objPortador As New ClassPortador, lErro As Long
On Error GoTo Erro_Portador_ObterNomeReduzido

    If iPortador <> 0 Then
        'carregar seu nome reduzido
        objPortador.iCodigo = iPortador
        lErro = CF("Portador_Le_EmTransacao", objPortador, lComandoPortador)
        If lErro <> SUCESSO Then Error 7271
        sNomeRedPortador = objPortador.sNomeReduzido
    Else
        sNomeRedPortador = ""
    End If
    
    Portador_ObterNomeReduzido = SUCESSO
    
    Exit Function
        
Erro_Portador_ObterNomeReduzido:

    Portador_ObterNomeReduzido = Err

    Select Case Err

        Case 7271
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148532)

    End Select

    Exit Function

End Function

Function ParcelasPagar_Le_ChequesPag2(ByVal objChequesPag As ClassChequesPag, ByVal lComando As Long, sFornecedoresNomeReduzido As String, sFornecedoresRazaoSocial As String, iTitulosPagFilialEmpresa As Integer, lTitulosPagNumTitulo As Long, lTitulosPagFornecedor As Long, iTitulosPagFilial As Integer, sTitulosPagSiglaDocumento As String, lParcelasPagNumIntDoc As Long, iParcelasPagNumParcela As Integer, dtParcelasPagDataVencimento As Date, dParcelasPagSaldo As Double, iParcelasPagTipoCobranca As Integer, iParcelasPagPortador As Integer, sFilFornContaContabil As String) As Long
'Ler as parcelas p/colecao, já agrupando parcelas em cheques, auxiliar a ParcelasPagar_Le_ChequesPag

Dim lErro As Long, lComandoPortador As Long, iSeqCheque As Integer
Dim iTipoCobrancaAnt As Integer, iPortadorAnt As Integer, lFornecedorAnt As Long, iFilialFornAnt As Integer, iNumParcsAtraso As Integer
Dim dtVctoMinSemAtraso As Date, objInfoParcPag As ClassInfoParcPag, objPortador As New ClassPortador, sNomeRedPortador As String
On Error GoTo Erro_ParcelasPagar_Le_ChequesPag2

    lErro = CF("ObterVctoMinSemAtraso", giFilialEmpresa, objChequesPag.dtEmissao, dtVctoMinSemAtraso)
    If lErro <> SUCESSO Then Error 7268

    lComandoPortador = Comando_Abrir()
    If lComandoPortador = 0 Then Error 7269

    iSeqCheque = 0
    iTipoCobrancaAnt = 0
    iPortadorAnt = 0
    lFornecedorAnt = 0
    iFilialFornAnt = 0
    iNumParcsAtraso = 0
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7262

    If lErro = AD_SQL_SEM_DADOS Then Error 7270

    'Se portador especifico
    If objChequesPag.iQualquerPortador = 0 Then
        lErro = Portador_ObterNomeReduzido(iParcelasPagPortador, sNomeRedPortador, lComandoPortador)
        If lErro <> SUCESSO Then Error 7447
    End If

    Do While lErro = AD_SQL_SUCESSO

        'Se portador nao é especifico
        If objChequesPag.iQualquerPortador = 1 Then
            lErro = Portador_ObterNomeReduzido(iParcelasPagPortador, sNomeRedPortador, lComandoPortador)
            If lErro <> SUCESSO Then Error 7448
        End If

        ' inclui a parcela na colecao (objChequesPag.colInfoParcPag) fazendo a quebra das parcelas por cheques e desmarcando as parcelas atrasadas
        lErro = ParcelasPagar_Le_ChequesPag3(objChequesPag, iTipoCobrancaAnt, iParcelasPagTipoCobranca, iSeqCheque, iPortadorAnt, iParcelasPagPortador, lFornecedorAnt, lTitulosPagFornecedor, iFilialFornAnt, iTitulosPagFilial, sTitulosPagSiglaDocumento, dtParcelasPagDataVencimento, dParcelasPagSaldo, iParcelasPagNumParcela, lParcelasPagNumIntDoc, lTitulosPagNumTitulo, sFornecedoresNomeReduzido, sNomeRedPortador, sFornecedoresRazaoSocial, dtVctoMinSemAtraso, iNumParcsAtraso, sFilFornContaContabil, iTitulosPagFilialEmpresa)
        If lErro <> SUCESSO Then Error 7445
        
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7263

    Loop

    lErro = Comando_Fechar(lComandoPortador)

    ParcelasPagar_Le_ChequesPag2 = SUCESSO
    
    Exit Function

Erro_ParcelasPagar_Le_ChequesPag2:

    ParcelasPagar_Le_ChequesPag2 = Err
    
    Select Case Err

        Case 7268, 7445, 7447, 7448
    
        Case 7262, 7263
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_PAG", Err)
    
        Case 7269
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 7270
            Call Rotina_Erro(vbOKOnly, "ERRO_SEM_PARCELAS_PAG_SEL", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148533)

    End Select
    
    Call Comando_Fechar(lComandoPortador)
    
    Exit Function

End Function

Function ParcelasPagar_Le_ChequesPag(ByVal objChequesPag As ClassChequesPag) As Long
'preenche a colecao de parcelas (objChequesPag) que podem ser pagas por cheques automaticos durante a geracao de cheques automaticos

Dim sSelect As String, lErro As Long, iParamFilialEmpresa As Integer, iParamPortador As Integer, iStatusAberto As Integer, lComando As Long
Dim iFilialEmpresa As Integer, sLayoutCheque As String
'buffers para leitura de parcelas
Dim sFornecedoresNomeReduzido As String, sFornecedoresRazaoSocial As String
Dim iTitulosPagFilialEmpresa As Integer, lTitulosPagNumTitulo As Long, lTitulosPagFornecedor As Long, iTitulosPagFilial As Integer
Dim lParcelasPagNumIntDoc As Long, iParcelasPagNumParcela As Integer, dtParcelasPagDataVencimento As Date, dParcelasPagSaldo As Double, iParcelasPagTipoCobranca As Integer, iParcelasPagPortador As Integer
Dim sTitulosPagSiglaDocumento As String, sFilFornContaContabil As String

On Error GoTo Erro_ParcelasPagar_Le_ChequesPag

    iStatusAberto = STATUS_ABERTO

    lErro = CF("ContaCorrente_ObterDadosImpCheque", objChequesPag.iCta, iFilialEmpresa, sLayoutCheque)
    If lErro <> SUCESSO Then Error 7451
    
    objChequesPag.iFilialEmpresaCta = iFilialEmpresa
    objChequesPag.sLayoutCheque = sLayoutCheque
    
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 7260

    'monta o SELECT dinamicamente
    Call CF("ParcelasPagar_Le_ChequesPag1", objChequesPag, sSelect, iParamFilialEmpresa, iParamPortador)

    sFornecedoresNomeReduzido = String(STRING_FORNECEDOR_NOME_REDUZIDO, 0)
    sFornecedoresRazaoSocial = String(STRING_FORNECEDOR_RAZAO_SOC, 0)
    sTitulosPagSiglaDocumento = String(STRING_SIGLA_DOCUMENTO, 0)
    sFilFornContaContabil = String(STRING_CONTA, 0)
    
    If iParamFilialEmpresa And iParamPortador Then
        lErro = Comando_Executar(lComando, sSelect, sFornecedoresNomeReduzido, sFornecedoresRazaoSocial, sFilFornContaContabil, iTitulosPagFilialEmpresa, lTitulosPagNumTitulo, lTitulosPagFornecedor, iTitulosPagFilial, sTitulosPagSiglaDocumento, lParcelasPagNumIntDoc, iParcelasPagNumParcela, dtParcelasPagDataVencimento, dParcelasPagSaldo, iParcelasPagTipoCobranca, iParcelasPagPortador, objChequesPag.dtVenctoDe, objChequesPag.dtVencto, iStatusAberto, giFilialEmpresa, objChequesPag.iPortador)
    Else
        If iParamFilialEmpresa Then
            lErro = Comando_Executar(lComando, sSelect, sFornecedoresNomeReduzido, sFornecedoresRazaoSocial, sFilFornContaContabil, iTitulosPagFilialEmpresa, lTitulosPagNumTitulo, lTitulosPagFornecedor, iTitulosPagFilial, sTitulosPagSiglaDocumento, lParcelasPagNumIntDoc, iParcelasPagNumParcela, dtParcelasPagDataVencimento, dParcelasPagSaldo, iParcelasPagTipoCobranca, iParcelasPagPortador, objChequesPag.dtVenctoDe, objChequesPag.dtVencto, iStatusAberto, giFilialEmpresa)
        Else
            If iParamPortador Then
                lErro = Comando_Executar(lComando, sSelect, sFornecedoresNomeReduzido, sFornecedoresRazaoSocial, sFilFornContaContabil, iTitulosPagFilialEmpresa, lTitulosPagNumTitulo, lTitulosPagFornecedor, iTitulosPagFilial, sTitulosPagSiglaDocumento, lParcelasPagNumIntDoc, iParcelasPagNumParcela, dtParcelasPagDataVencimento, dParcelasPagSaldo, iParcelasPagTipoCobranca, iParcelasPagPortador, objChequesPag.dtVenctoDe, objChequesPag.dtVencto, iStatusAberto, objChequesPag.iPortador)
            Else
                lErro = Comando_Executar(lComando, sSelect, sFornecedoresNomeReduzido, sFornecedoresRazaoSocial, sFilFornContaContabil, iTitulosPagFilialEmpresa, lTitulosPagNumTitulo, lTitulosPagFornecedor, iTitulosPagFilial, sTitulosPagSiglaDocumento, lParcelasPagNumIntDoc, iParcelasPagNumParcela, dtParcelasPagDataVencimento, dParcelasPagSaldo, iParcelasPagTipoCobranca, iParcelasPagPortador, objChequesPag.dtVenctoDe, objChequesPag.dtVencto, iStatusAberto)
            End If
        End If
    End If

    If lErro <> AD_SQL_SUCESSO Then Error 7261

    'processa as parcelas obtidas atraves do SELECT acima
    lErro = CF("ParcelasPagar_Le_ChequesPag2", objChequesPag, lComando, sFornecedoresNomeReduzido, sFornecedoresRazaoSocial, iTitulosPagFilialEmpresa, lTitulosPagNumTitulo, lTitulosPagFornecedor, iTitulosPagFilial, sTitulosPagSiglaDocumento, lParcelasPagNumIntDoc, iParcelasPagNumParcela, dtParcelasPagDataVencimento, dParcelasPagSaldo, iParcelasPagTipoCobranca, iParcelasPagPortador, sFilFornContaContabil)
    If lErro <> SUCESSO Then Error 7446
    
    lErro = Comando_Fechar(lComando)

    ParcelasPagar_Le_ChequesPag = SUCESSO

    Exit Function

Erro_ParcelasPagar_Le_ChequesPag:

    ParcelasPagar_Le_ChequesPag = Err

    Select Case Err

        Case 7446, 7451

        Case 7260
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 7261
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_PAG", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148534)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function ChequesPag_ChequesSelecionados(ByVal objChequesPag As ClassChequesPag) As Long
Attribute ChequesPag_ChequesSelecionados.VB_Description = "preenche colecao (em objChequesPag) com informacoes sobre os cheques\r\ndeve ser chamada apos a selecao das parcelas que efetivamente serao pagas, com os agrupamentos definitivos de parcelas em cheques\r\n"
'utilizada na emissao de cheques automaticos
'preenche colecao (em objChequesPag) com informacoes sobre os cheques
'deve ser chamada apos a selecao das parcelas que efetivamente serao pagas com os agrupamentos definitivos de parcelas em cheques
Dim objInfoParcPag As ClassInfoParcPag, objInfoChequePag As ClassInfoChequePag
Dim iSeqChequeAnterior As Integer, dValor As Double, sFavorecido As String, lNumRealCheque As Long, iPortadorAnterior As Integer
Dim lComandoSelPort As Long, lComandoSelForn As Long, lErro As Long
On Error GoTo Erro_ChequesPag_ChequesSelecionados

    'p/usuario poder voltar do passo 3 p/o 2 alterar dados
    'e prosseguir, esvazio a colecao
    Do While objChequesPag.ColInfoChequePag.Count <> 0
        objChequesPag.ColInfoChequePag.Remove (1)
    Loop
    
    lComandoSelPort = Comando_Abrir()
    If lComandoSelPort = 0 Then Error 7390

    lComandoSelForn = Comando_Abrir()
    If lComandoSelForn = 0 Then Error 7391

    'flag para tratar o primeiro cheque
    iSeqChequeAnterior = -1

    For Each objInfoParcPag In objChequesPag.colInfoParcPag

        'pula parcelas que nao serao pagas
        If objInfoParcPag.iSeqCheque <> 0 Then

            If iSeqChequeAnterior = -1 Then
                'prepara para o primeiro cheque
                iSeqChequeAnterior = objInfoParcPag.iSeqCheque
                dValor = 0
                iPortadorAnterior = objInfoParcPag.iPortador
                
                lErro = CF("FavorecidoChequeTitulo_Obter", sFavorecido, objInfoParcPag.lFornecedor, objInfoParcPag.iTipoCobranca, objInfoParcPag.sNomeRedPortador, lComandoSelPort, lComandoSelForn)
                If lErro <> SUCESSO Then Error 7392

                lNumRealCheque = objChequesPag.lNumCheque
            End If

            'terminou de incluir todas as parcelas do cheque
            If iSeqChequeAnterior <> objInfoParcPag.iSeqCheque Then
                Call objChequesPag.ColInfoChequePag.Add(iSeqChequeAnterior, sFavorecido, dValor, lNumRealCheque, 1, iPortadorAnterior)

                'prepara para o proximo cheque
                iSeqChequeAnterior = objInfoParcPag.iSeqCheque
                dValor = 0
                iPortadorAnterior = objInfoParcPag.iPortador

                lErro = CF("FavorecidoChequeTitulo_Obter", sFavorecido, objInfoParcPag.lFornecedor, objInfoParcPag.iTipoCobranca, objInfoParcPag.sNomeRedPortador, lComandoSelPort, lComandoSelForn)
                If lErro <> SUCESSO Then Error 7393

                lNumRealCheque = lNumRealCheque + 1
            End If

            dValor = dValor + objInfoParcPag.dValor + objInfoParcPag.dValorJuros + objInfoParcPag.dValorMulta - objInfoParcPag.dValorDesconto

        End If

    Next

    'incluir o ultimo cheque, se existir
    If iSeqChequeAnterior <> -1 Then
        Call objChequesPag.ColInfoChequePag.Add(iSeqChequeAnterior, sFavorecido, dValor, lNumRealCheque, 1, iPortadorAnterior)
    End If

    lErro = Comando_Fechar(lComandoSelPort)
    lErro = Comando_Fechar(lComandoSelForn)

    ChequesPag_ChequesSelecionados = SUCESSO

    Exit Function

Erro_ChequesPag_ChequesSelecionados:

    ChequesPag_ChequesSelecionados = Err

    Select Case Err

        Case 7390, 7391
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 7392, 7393

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148535)

    End Select

    Call Comando_Fechar(lComandoSelPort)
    Call Comando_Fechar(lComandoSelForn)
    
    Exit Function

End Function

Function ObterVctoMinSemAtraso(ByVal iFilialEmpresa As Integer, ByVal dtDataPagto As Date, dtVctoMinSemAtraso As Date) As Long
'retorna em dtVctoMinSemAtraso a data mais antiga de vcto p/que um pagto
' possa ser efetuado em dtDataPagto sem multa,juros, etc
' Ex1: se pagto na 2a feira com 6a feira normal retorna sabado
' Ex2: se pagto na 2a feira com 6a feira feriado retorna sexta
Dim vDiaDaSemana As Variant, dtFeriado As Date
Dim lComando As Long, lErro As Long

On Error GoTo Erro_ObterVctoMinSemAtraso

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 7264

    dtVctoMinSemAtraso = dtDataPagto

    vDiaDaSemana = Weekday(dtVctoMinSemAtraso)
    'se data pagto em 2a ou dom, retroceder até sabado
    If (vDiaDaSemana = vbMonday) Then dtVctoMinSemAtraso = dtVctoMinSemAtraso - 2
    If (vDiaDaSemana = vbSunday) Then dtVctoMinSemAtraso = dtVctoMinSemAtraso - 1

    'obter feriados anteriores a data de pagto
    lErro = Comando_Executar(lComando, "SELECT Data FROM Feriados WHERE FilialEmpresa = ? AND Data < ? ORDER BY Data DESC", dtFeriado, iFilialEmpresa, dtVctoMinSemAtraso)
    If lErro <> AD_SQL_SUCESSO Then Error 7265

    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7266

    Do While lErro = AD_SQL_SUCESSO

        If (dtFeriado < dtVctoMinSemAtraso - 1) Then
            Exit Do
        Else
            If dtFeriado = dtVctoMinSemAtraso - 1 Then
                dtVctoMinSemAtraso = dtFeriado
                vDiaDaSemana = Weekday(dtVctoMinSemAtraso)
                'se feriado em 2a ou dom, retroceder até sabado
                If (vDiaDaSemana = vbMonday) Then dtVctoMinSemAtraso = dtVctoMinSemAtraso - 2
                If (vDiaDaSemana = vbSunday) Then dtVctoMinSemAtraso = dtVctoMinSemAtraso - 1
            End If
        End If

        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7267

    Loop

    lErro = Comando_Fechar(lComando)

    ObterVctoMinSemAtraso = SUCESSO

    Exit Function

Erro_ObterVctoMinSemAtraso:

    ObterVctoMinSemAtraso = Err

    Select Case Err

        Case 7264
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 7265, 7266, 7267
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FERIADOS", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148536)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function Portador_Le(ByVal objPortador As ClassPortador) As Long
'preenche objPortador com os dados correspondentes a objPortador.iCodigo na tabela de portadores

Dim lErro As Long
Dim lComando As Long

On Error GoTo Erro_Portador_Le

    'Inicializa comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 7444

    lErro = CF("Portador_Le_EmTransacao", objPortador, lComando)
    If lErro <> SUCESSO And lErro <> 7396 Then Error 7443
    
    'Se não achou o Portador --> erro
    If lErro = 7396 Then Error 15971
    
    'Libera comando
    Call Comando_Fechar(lComando)
    
    Portador_Le = SUCESSO

    Exit Function

Erro_Portador_Le:

    Portador_Le = Err

    Select Case Err

        Case 7443, 15971

        Case 7444
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148537)

    End Select

    'Libera comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function Portador_Le_EmTransacao(ByVal objPortador As ClassPortador, ByVal lComando As Long) As Long
'preenche objPortador com os dados correspondentes a objPortador.iCodigo na tabela de portadores
'o parametro lComando é passado para permitir uma otimizacao no caso de leitura de varios portadores numa mesma operacao
Dim lErro As Long
Dim tPortador As typePortador

On Error GoTo Erro_Portador_Le_EmTransacao

    tPortador.sNomeReduzido = String(STRING_PORTADOR_NOME_REDUZIDO, 0)
    tPortador.sNome = String(STRING_PORTADOR_NOME, 0)

    'pesquisa Portadores no BD
    lErro = Comando_Executar(lComando, "SELECT NomeReduzido, Nome, Inativo, Banco FROM Portador WHERE Codigo = ? ", tPortador.sNomeReduzido, tPortador.sNome, tPortador.iInativo, tPortador.iBanco, objPortador.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 7394

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7395

    'Não achou o Portador --> erro
    If lErro = AD_SQL_SEM_DADOS Then Error 7396

    objPortador.sNomeReduzido = tPortador.sNomeReduzido
    objPortador.sNome = tPortador.sNome
    objPortador.iInativo = tPortador.iInativo
    objPortador.iBanco = tPortador.iBanco

    Portador_Le_EmTransacao = SUCESSO

    Exit Function

Erro_Portador_Le_EmTransacao:

    Portador_Le_EmTransacao = Err

    Select Case Err

        Case 7394, 7395
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PORTADOR", Err, objPortador.iCodigo)

        Case 7396
            'Call Rotina_Erro(vbOKOnly, "ERRO_PORTADOR_NAO_CADASTRADO", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148538)

    End Select

    Exit Function

End Function

Function FavorecidoChequeTitulo_Obter(sFavorecido As String, ByVal lFornecedor As Long, ByVal iTipoCobranca As Integer, ByVal sNomeRedPortador As String, ByVal lComandoSelPort As Long, ByVal lComandoSelForn As Long) As Long
'obtem o nome a ser impresso no cheque para pagto de titulo
Dim lErro As Long
On Error GoTo Erro_FavorecidoChequeTitulo_Obter

    sFavorecido = String(IIf(STRING_PORTADOR_NOME > STRING_FORNECEDOR_RAZAO_SOC, STRING_PORTADOR_NOME, STRING_FORNECEDOR_RAZAO_SOC), 0)

    'se o tipo de cobranca for bancaria
    If iTipoCobranca = TIPO_COBRANCA_BANCARIA And sNomeRedPortador <> "" Then

        'obter nome da tabela de portadores
        lErro = Comando_Executar(lComandoSelPort, "SELECT Nome FROM Portador WHERE NomeReduzido = ?", sFavorecido, sNomeRedPortador)
        If lErro <> AD_SQL_SUCESSO Then Error 7384

        lErro = Comando_BuscarProximo(lComandoSelPort)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7385

        If lErro <> AD_SQL_SUCESSO Then Error 7386

    Else

        'obter a razao social do fornecedor
        lErro = Comando_Executar(lComandoSelForn, "SELECT RazaoSocial FROM Fornecedores WHERE Codigo = ?", sFavorecido, lFornecedor)
        If lErro <> AD_SQL_SUCESSO Then Error 7387

        lErro = Comando_BuscarProximo(lComandoSelForn)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7388

        If lErro <> AD_SQL_SUCESSO Then Error 7389

    End If

    FavorecidoChequeTitulo_Obter = SUCESSO

    Exit Function

Erro_FavorecidoChequeTitulo_Obter:

    FavorecidoChequeTitulo_Obter = Err

    Select Case Err

        Case 7384, 7385
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PORTADORES", Err)

        Case 7386
            Call Rotina_Erro(vbOKOnly, "ERRO_PORTADOR_NAO_CADASTRADO", Err)

        Case 7387, 7388
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FORNECEDORES", Err)

        Case 7389
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECEDOR_INEXISTENTE", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148539)

    End Select

    Exit Function

End Function

Sub ParcelasPagar_Le_ChequesPagAvulso2(ByVal objChequesPagAvulso As ClassChequesPagAvulso, sSelect As String, iParamFilialEmpresa As Integer, iParamPortador As Integer, iParamForn As Integer, iParamFilial As Integer, iParamTitulo As Integer, iParamParcela As Integer)
'auxiliar a ParcelasPagar_Le_ChequesPagAvulso
'monta o SELECT para obtencao das parcelas dinamicamente.
Dim sFrom As String, sWhere As String, sFields As String, sOrderBy As String

    sFields = " Fornecedores.NomeReduzido, Fornecedores.RazaoSocial, FiliaisFornecedores.ContaContabil"
    sFields = sFields & ", TitulosPag.FilialEmpresa , TitulosPag.NumTitulo, TitulosPag.Fornecedor, TitulosPag.Filial, TitulosPag.SiglaDocumento"
    sFields = sFields & ", ParcelasPag.NumIntDoc, ParcelasPag.NumParcela, ParcelasPag.DataVencimento, ParcelasPag.Saldo, ParcelasPag.TipoCobranca, ParcelasPag.Portador, ParcelasPag.BancoCobrador"

    sFrom = " FROM ParcelasPag, TitulosPag, Fornecedores, TiposDeCobranca, FiliaisFornecedores"
    sWhere = " WHERE TitulosPag.Fornecedor = FiliaisFornecedores.CodFornecedor AND TitulosPag.Filial = FiliaisFornecedores.CodFilial AND ParcelasPag.DataVencimentoReal <= ? AND ParcelasPag.Status = ? AND ParcelasPag.NumIntTitulo = TitulosPag.NumIntDoc AND TitulosPag.Fornecedor = Fornecedores.Codigo AND ParcelasPag.TipoCobranca = TiposDeCobranca.Codigo AND TiposDeCobranca.ValidoParaCheque = 1"

    'Se entrar como empresa toda pode pegar titulos de todas as filiais,
    If giFilialEmpresa = EMPRESA_TODA Or giFilialEmpresa = gobjCP.iFilialCentralizadora Then
        iParamFilialEmpresa = 0
    Else 'Senao pegar titulos somente da filial corrente
        sWhere = sWhere & " AND TitulosPag.FilialEmpresa = ?"
        iParamFilialEmpresa = 1
    End If

    'Se portador especifico
    If objChequesPagAvulso.iQualquerPortador = 0 Then
        sWhere = sWhere & " AND ParcelasPag.Portador =  ?" '? = objChequesPagAvulso.iPortador
        iParamPortador = 1
        sOrderBy = " ORDER BY ParcelasPag.TipoCobranca, ParcelasPag.BancoCobrador, Fornecedores.RazaoSocial, TitulosPag.Fornecedor, TitulosPag.Filial, ParcelasPag.DataVencimento, TitulosPag.NumTitulo"
        '(TitulosPag.FilialFornecedor talvez nao seja necessario)
    Else
        sOrderBy = " ORDER BY ParcelasPag.TipoCobranca, ParcelasPag.BancoCobrador, ParcelasPag.Portador, Fornecedores.RazaoSocial, TitulosPag.Fornecedor, TitulosPag.Filial, ParcelasPag.DataVencimento, TitulosPag.NumTitulo"
        iParamPortador = 0
    End If

    'Se fornecedor estiver definido, incluir restricao
    If (objChequesPagAvulso.lFornecedor <> 0) Then
       sWhere = sWhere & " AND TitulosPag.Fornecedor = ?"  '? = objChequesPagAvulso.lFornecedor
       iParamForn = 1
    Else
        iParamForn = 0
    End If

    'Se filial especifica
    If (objChequesPagAvulso.iFilial <> 0) Then
       sWhere = sWhere & " AND TitulosPag.Filial = ?" ' ? = objChequesPagAvulso.iFilial"
       iParamFilial = 1
    Else
        iParamFilial = 0
    End If

    'Se titulo especifico
    If (objChequesPagAvulso.lNumTitulo <> 0) Then
       sWhere = sWhere & " AND TitulosPag.NumTitulo = ?" '? = objChequesPagAvulso.lNumTitulo
       iParamTitulo = 1
    Else
        iParamTitulo = 0
    End If

    'Se Parcela especifica
    If (objChequesPagAvulso.iNumParcela <> 0) Then
       sWhere = sWhere & " AND ParcelasPag.NumParcela = ?"  '? = objChequesPagAvulso.iNumParcela
       iParamParcela = 1
    Else
        iParamParcela = 0
    End If

    sSelect = "SELECT " & sFields & sFrom & sWhere & sOrderBy

End Sub

Private Function ParcelasPagar_Le_ChequesPagAvulso3(ByVal objChequesPagAvulso As ClassChequesPagAvulso, ByVal lComando As Long, ByVal iParamFilialEmpresa As Integer, ByVal iParamPortador As Integer, ByVal iParamForn As Integer, ByVal iParamFilial As Integer, ByVal iParamTitulo As Integer, ByVal iParamParcela As Integer) As Long
'auxiliar a ParcelasPagar_Le_ChequesPagAvulso
'complementa a passagem dos parametros que variam de acordo com a selecao do usuario e executa o SELECT p/obtencao das parcelas
Dim lErro As Long, ret As Integer, viFilialEmpresaCta As Variant, viPortador As Variant, vlFornecedor As Variant, viFilial As Variant, vlNumTitulo As Variant, viNumParcela As Variant
On Error GoTo Erro_ParcelasPagar_Le_ChequesPagAvulso3

    If (iParamFilialEmpresa = 1) Then
        viFilialEmpresaCta = objChequesPagAvulso.iFilialEmpresaCta
        ret = Comando_BindVarInt(lComando, viFilialEmpresaCta)
        If (ret <> AD_SQL_SUCESSO) Then Error 7295
    End If

    If (iParamPortador = 1) Then
        viPortador = objChequesPagAvulso.iPortador
        ret = Comando_BindVarInt(lComando, viPortador)
        If (ret <> AD_SQL_SUCESSO) Then Error 7296
    End If

    If (iParamForn = 1) Then
        vlFornecedor = objChequesPagAvulso.lFornecedor
        ret = Comando_BindVarInt(lComando, vlFornecedor)
        If (ret <> AD_SQL_SUCESSO) Then Error 7297
    End If

    If (iParamFilial = 1) Then
        viFilial = objChequesPagAvulso.iFilial
        ret = Comando_BindVarInt(lComando, viFilial)
        If (ret <> AD_SQL_SUCESSO) Then Error 7298
    End If

    If (iParamTitulo = 1) Then
        vlNumTitulo = objChequesPagAvulso.lNumTitulo
        ret = Comando_BindVarInt(lComando, vlNumTitulo)
        If (ret <> AD_SQL_SUCESSO) Then Error 7299
    End If

    If (iParamParcela = 1) Then
        viNumParcela = objChequesPagAvulso.iNumParcela
        ret = Comando_BindVarInt(lComando, viNumParcela)
        If (ret <> AD_SQL_SUCESSO) Then Error 7300
    End If

    ret = Comando_ExecutarInt(lComando)
    If (ret <> AD_SQL_SUCESSO) Then Error 7301

    ParcelasPagar_Le_ChequesPagAvulso3 = SUCESSO

    Exit Function
    
Erro_ParcelasPagar_Le_ChequesPagAvulso3:

    ParcelasPagar_Le_ChequesPagAvulso3 = Err

    Select Case Err

        Case 7295 To 7301
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_PAG", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148540)

    End Select

    Exit Function

End Function

Private Sub ParcelasPagar_Le_ChequesPagAvulso4(ByVal objChequesPagAvulso As ClassChequesPagAvulso, ByVal dtParcelasPagDataVencimento As Date, ByVal dParcelasPagSaldo As Double, ByVal iParcelasPagBancoCobrador As Integer, ByVal iTitulosPagFilial As Integer, ByVal sTitulosPagSiglaDocumento As String, ByVal iParcelasPagNumParcela As Integer, ByVal iParcelasPagPortador As Integer, ByVal iParcelasPagTipoCobranca As Integer, ByVal lTitulosPagFornecedor As Long, ByVal lParcelasPagNumIntDoc As Long, ByVal lTitulosPagNumTitulo As Long, ByVal sFornecedoresNomeReduzido As String, ByVal sNomeRedPortador As String, ByVal sFornecedoresRazaoSocial As String, ByVal sFilFornContaContabil As String, ByVal iTitulosPagFilialEmpresa As Integer)
'auxiliar a ParcelasPagar_Le_ChequesPagAvulso
' inclui a parcela lida na colecao (objChequesPagAvulso.colInfoParcPag)
Dim objInfoParcPag As ClassInfoParcPag

        Set objInfoParcPag = New ClassInfoParcPag

        With objInfoParcPag
            .dtDataVencimento = dtParcelasPagDataVencimento
            .dValor = dParcelasPagSaldo
            .iBancoCobrador = iParcelasPagBancoCobrador
            .iFilialForn = iTitulosPagFilial
            .sSiglaDocumento = sTitulosPagSiglaDocumento
            .iNumParcela = iParcelasPagNumParcela
            .iPortador = iParcelasPagPortador
            .iTipoCobranca = iParcelasPagTipoCobranca
            .lFornecedor = lTitulosPagFornecedor
            .lNumIntParc = lParcelasPagNumIntDoc
            .lNumTitulo = lTitulosPagNumTitulo
            .sNomeRedForn = sFornecedoresNomeReduzido
            .sNomeRedPortador = sNomeRedPortador
            .sRazaoSocialForn = sFornecedoresRazaoSocial
            .iSeqCheque = 0
            .sContaFilForn = sFilFornContaContabil
            .iFilialEmpresa = iTitulosPagFilialEmpresa
        End With

        objChequesPagAvulso.colInfoParcPag.Add objInfoParcPag

End Sub

Function ParcelasPagar_Le_ChequesPagAvulso(ByVal objChequesPagAvulso As ClassChequesPagAvulso) As Long
'preenche a colecao de parcelas a pagar por cheque avulso "candidatas"

Dim lErro As Long, sSelect As String
Dim iParamFilialEmpresa As Integer, iParamPortador As Integer, iParamForn As Integer, iParamFilial As Integer, iParamTitulo As Integer, iParamParcela As Integer
Dim lComando As Long, lComandoPortador As Long, sNomeRedPortador As String
Dim iFilialEmpresa As Integer, sLayoutCheque As String
'buffers para receber registros das parcelas
Dim vsFornecedoresNomeReduzido  As Variant, vsFornecedoresRazaoSocial As Variant
Dim viTitulosPagFilialEmpresa As Variant, vlTitulosPagNumTitulo As Variant, vlTitulosPagFornecedor As Variant, viTitulosPagFilial As Variant
Dim vlParcelasPagNumIntDoc As Variant, viParcelasPagNumParcela As Variant, vdtParcelasPagDataVencimento As Variant, vdParcelasPagSaldo As Variant, viParcelasPagTipoCobranca As Variant, viParcelasPagPortador As Variant, viParcelasPagBancoCobrador As Variant
Dim vsTitulosPagSiglaDocumento As Variant, vsFilFornContaContabil As Variant
'parametros
Dim vdtVencto As Variant, viStatusAberto  As Variant

On Error GoTo Erro_ParcelasPagar_Le_ChequesPagAvulso

    lErro = CF("ContaCorrente_ObterDadosImpCheque", objChequesPagAvulso.iCta, iFilialEmpresa, sLayoutCheque)
    If lErro <> SUCESSO Then Error 7440
    
    objChequesPagAvulso.iFilialEmpresaCta = iFilialEmpresa
    objChequesPagAvulso.sLayoutCheque = sLayoutCheque
        
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 7302

    lComandoPortador = Comando_Abrir()
    If lComandoPortador = 0 Then Error 7303

    viStatusAberto = STATUS_ABERTO
    vdtVencto = objChequesPagAvulso.dtVencto
    
    'monta o SELECT para obtencao das parcelas dinamicamente
    Call CF("ParcelasPagar_Le_ChequesPagAvulso2", objChequesPagAvulso, sSelect, iParamFilialEmpresa, iParamPortador, iParamForn, iParamFilial, iParamTitulo, iParamParcela)
    
    vsFornecedoresNomeReduzido = String(STRING_FORNECEDOR_NOME_REDUZIDO, 0)
    vsFornecedoresRazaoSocial = String(STRING_FORNECEDOR_RAZAO_SOC, 0)
    vsTitulosPagSiglaDocumento = String(STRING_SIGLA_DOCUMENTO, 0)
    vsFilFornContaContabil = String(STRING_CONTA, 0)
    
    viTitulosPagFilialEmpresa = CInt(0)
    vlTitulosPagNumTitulo = CLng(0)
    vlTitulosPagFornecedor = CLng(0)
    viTitulosPagFilial = CInt(0)
    vlParcelasPagNumIntDoc = CLng(0)
    viParcelasPagNumParcela = CInt(0)
    vdtParcelasPagDataVencimento = DATA_NULA
    vdParcelasPagSaldo = CDbl(0)
    viParcelasPagTipoCobranca = CInt(0)
    viParcelasPagPortador = CInt(0)
    viParcelasPagBancoCobrador = CInt(0)
    
    'executa a preparacao da parte fixa do SELECT
    lErro = CF("ParcelasPagar_Le_ChequesPagAvulso1", lComando, sSelect, vsFornecedoresNomeReduzido, vsFornecedoresRazaoSocial, vsFilFornContaContabil, viTitulosPagFilialEmpresa, vlTitulosPagNumTitulo, vlTitulosPagFornecedor, viTitulosPagFilial, vsTitulosPagSiglaDocumento, vlParcelasPagNumIntDoc, viParcelasPagNumParcela, vdtParcelasPagDataVencimento, vdParcelasPagSaldo, viParcelasPagTipoCobranca, viParcelasPagPortador, viParcelasPagBancoCobrador, vdtVencto, viStatusAberto)
    If lErro <> SUCESSO Then Error 7294

    'complementa a passagem dos parametros que variam de acordo com a selecao do usuario
    'e executa o SELECT p/obtencao das parcelas
    lErro = ParcelasPagar_Le_ChequesPagAvulso3(objChequesPagAvulso, lComando, iParamFilialEmpresa, iParamPortador, iParamForn, iParamFilial, iParamTitulo, iParamParcela)
    If lErro <> SUCESSO Then Error 7449
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7304

    If lErro = AD_SQL_SEM_DADOS Then Error 7305

    'Se portador especifico
    If objChequesPagAvulso.iQualquerPortador = 0 Then
        lErro = Portador_ObterNomeReduzido(objChequesPagAvulso.iPortador, sNomeRedPortador, lComandoPortador)
        If lErro <> SUCESSO Then Error 7306
    End If

    Do While lErro = AD_SQL_SUCESSO

        'Se portador nao é especifico
        If objChequesPagAvulso.iQualquerPortador = 1 Then
              lErro = Portador_ObterNomeReduzido(viParcelasPagPortador, sNomeRedPortador, lComandoPortador)
              If lErro <> SUCESSO Then Error 7307
        End If

        ' inclui a parcela lida na colecao (objChequesPagAvulso.colInfoParcPag)
        Call ParcelasPagar_Le_ChequesPagAvulso4(objChequesPagAvulso, vdtParcelasPagDataVencimento, vdParcelasPagSaldo, viParcelasPagBancoCobrador, viTitulosPagFilial, vsTitulosPagSiglaDocumento, viParcelasPagNumParcela, viParcelasPagPortador, viParcelasPagTipoCobranca, vlTitulosPagFornecedor, vlParcelasPagNumIntDoc, vlTitulosPagNumTitulo, vsFornecedoresNomeReduzido, sNomeRedPortador, vsFornecedoresRazaoSocial, vsFilFornContaContabil, viTitulosPagFilialEmpresa)

        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7308

    Loop

    lErro = Comando_Fechar(lComando)
    lErro = Comando_Fechar(lComandoPortador)

    ParcelasPagar_Le_ChequesPagAvulso = SUCESSO

    Exit Function

Erro_ParcelasPagar_Le_ChequesPagAvulso:

    ParcelasPagar_Le_ChequesPagAvulso = Err

    Select Case Err

        Case 7294, 7306, 7307, 7440, 7449

        Case 7302, 7303
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 7304, 7308
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_PAG", Err)

        Case 7305
            Call Rotina_Erro(vbOKOnly, "ERRO_SEM_PARCELAS_PAG_SEL", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148541)

    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComandoPortador)

    Exit Function

End Function

Function ParcelasPagar_Le_ChequesPagAvulso1(ByVal lComando As Long, sSelect As String, vFornecedoresNomeReduzido As Variant, vFornecedoresRazaoSocial As Variant, vFilFornContaContabil As Variant, vTitulosPagFilialEmpresa As Variant, vTitulosPagNumTitulo As Variant, vTitulosPagFornecedor As Variant, vTitulosPagFilial As Variant, vTitulosPagSiglaDocumento As Variant, vParcelasPagNumIntDoc As Variant, vParcelasPagNumParcela As Variant, vParcelasPagDataVencimento As Variant, vParcelasPagSaldo As Variant, vParcelasPagTipoCobranca As Variant, vParcelasPagPortador As Variant, vParcelasPagBancoCobrador As Variant, vVencto As Variant, vStatusAberto As Variant) As Long
'isola a preparacao da parte fixa do SELECT, serve apenas para diminuir o tamanho de ParcelasPagar_Le_ChequesPagAvulso

Dim ret As Integer, lErro As Long
On Error GoTo Erro_ParcelasPagar_Le_ChequesPagAvulso1

    ret = Comando_PrepararInt(lComando, sSelect)
    If (ret <> AD_SQL_SUCESSO) Then Error 7279

    ret = Comando_BindVarInt(lComando, vFornecedoresNomeReduzido)
    If (ret <> AD_SQL_SUCESSO) Then Error 7280

    ret = Comando_BindVarInt(lComando, vFornecedoresRazaoSocial)
    If (ret <> AD_SQL_SUCESSO) Then Error 7281

    ret = Comando_BindVarInt(lComando, vFilFornContaContabil)
    If (ret <> AD_SQL_SUCESSO) Then Error 7281

    ret = Comando_BindVarInt(lComando, vTitulosPagFilialEmpresa)
    If (ret <> AD_SQL_SUCESSO) Then Error 7282

    ret = Comando_BindVarInt(lComando, vTitulosPagNumTitulo)
    If (ret <> AD_SQL_SUCESSO) Then Error 7283

    ret = Comando_BindVarInt(lComando, vTitulosPagFornecedor)
    If (ret <> AD_SQL_SUCESSO) Then Error 7284

    ret = Comando_BindVarInt(lComando, vTitulosPagFilial)
    If (ret <> AD_SQL_SUCESSO) Then Error 7285

    ret = Comando_BindVarInt(lComando, vTitulosPagSiglaDocumento)
    If (ret <> AD_SQL_SUCESSO) Then Error 61001

    ret = Comando_BindVarInt(lComando, vParcelasPagNumIntDoc)
    If (ret <> AD_SQL_SUCESSO) Then Error 7286

    ret = Comando_BindVarInt(lComando, vParcelasPagNumParcela)
    If (ret <> AD_SQL_SUCESSO) Then Error 7287

    ret = Comando_BindVarInt(lComando, vParcelasPagDataVencimento)
    If (ret <> AD_SQL_SUCESSO) Then Error 7288

    ret = Comando_BindVarInt(lComando, vParcelasPagSaldo)
    If (ret <> AD_SQL_SUCESSO) Then Error 7289

    ret = Comando_BindVarInt(lComando, vParcelasPagTipoCobranca)
    If (ret <> AD_SQL_SUCESSO) Then Error 7290

    ret = Comando_BindVarInt(lComando, vParcelasPagPortador)
    If (ret <> AD_SQL_SUCESSO) Then Error 7291

    ret = Comando_BindVarInt(lComando, vParcelasPagBancoCobrador)
    If (ret <> AD_SQL_SUCESSO) Then Error 7309

    ret = Comando_BindVarInt(lComando, vVencto)
    If (ret <> AD_SQL_SUCESSO) Then Error 7292

    ret = Comando_BindVarInt(lComando, vStatusAberto)
    If (ret <> AD_SQL_SUCESSO) Then Error 7293

    ParcelasPagar_Le_ChequesPagAvulso1 = SUCESSO

    Exit Function

Erro_ParcelasPagar_Le_ChequesPagAvulso1:

    ParcelasPagar_Le_ChequesPagAvulso1 = Err

    Select Case Err

        Case 7309, 7279 To 7293, 61001
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_PAG", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148542)

    End Select

    Exit Function

End Function

Sub ParcelasPagar_Le_BorderoPag1(ByVal objBorderoPagEmissao As ClassBorderoPagEmissao, sSelect As String, iParamFilialEmpresa As Integer, iParamBcoCta As Integer)
' auxliar a ParcelasPagar_Le_BorderoPag
'monta o SELECT dinamicamente
Dim sFrom As String, sWhere As String, sFields As String, sOrderBy As String

    sFields = " Fornecedores.NomeReduzido, Fornecedores.RazaoSocial"
    sFields = sFields & ", TitulosPag.FilialEmpresa , TitulosPag.NumTitulo, TitulosPag.DataEmissao, TitulosPag.Fornecedor, TitulosPag.Filial, TitulosPag.SiglaDocumento"
    sFields = sFields & ", ParcelasPag.NumIntDoc, ParcelasPag.NumParcela, ParcelasPag.DataVencimento, ParcelasPag.Saldo, ParcelasPag.Portador"
    sFields = sFields & ", FiliaisFornecedores.ContaContabil"

    sFrom = " FROM ParcelasPag, TitulosPag, Fornecedores, FiliaisFornecedores"
    sWhere = " WHERE ParcelasPag.DataVencimentoReal >= ? AND ParcelasPag.DataVencimentoReal <= ? AND ParcelasPag.Status = ? AND ParcelasPag.NumIntTitulo = TitulosPag.NumIntDoc AND TitulosPag.Fornecedor = Fornecedores.Codigo AND TitulosPag.Fornecedor = FiliaisFornecedores.CodFornecedor AND TitulosPag.Filial = FiliaisFornecedores.CodFilial"
    sOrderBy = " ORDER BY ParcelasPag.DataVencimento, Fornecedores.RazaoSocial, TitulosPag.NumTitulo "
    
    'Se entrar como empresa toda pode pegar titulos de todas as filiais,
    If giFilialEmpresa = EMPRESA_TODA Or giFilialEmpresa = gobjCP.iFilialCentralizadora Then
        iParamFilialEmpresa = 0
    Else 'Senao pegar titulos somente da filial corrente
        sWhere = sWhere & " AND TitulosPag.FilialEmpresa = ?"
        iParamFilialEmpresa = 1
    End If

    iParamBcoCta = 0

    'se tipo de cobranca dep em cta corrente
    If objBorderoPagEmissao.iTipoCobranca = TIPO_COBRANCA_DEP_CONTA Then
        If objBorderoPagEmissao.iPodeDepCtaOutroBco = 0 Then
            sWhere = sWhere & " AND FiliaisFornecedores.Banco = ?" '? = bco da cta do bordero
            iParamBcoCta = 1
        End If
    End If

    If objBorderoPagEmissao.iTipoCobranca = TIPO_COBRANCA_BANCARIA Then
        If objBorderoPagEmissao.iLiqTitOutroBco = LIQUID_TITULO_OUTRO_BANCO Then
            sWhere = sWhere & " AND ParcelasPag.BancoCobrador <> ?" '? = bco da cta do bordero
            iParamBcoCta = 1
        ElseIf objBorderoPagEmissao.iLiqTitOutroBco = NAO_PERMITE_DEP_OUTRO_BANCO Then
            sWhere = sWhere & " AND ParcelasPag.BancoCobrador =  ?" '? = bco da cta do bordero
            iParamBcoCta = 1
        End If
    End If
    
    'se o tipo de cobrança for diferente de todas, pesquisa o tipo. se for todas, pesquisa todas diferente de carteira
    If objBorderoPagEmissao.iTipoCobranca <> TIPO_COBRANCA_TODAS Then
        sWhere = sWhere & " AND ParcelasPag.TipoCobranca = ?"
    Else
        sWhere = sWhere & " AND ParcelasPag.TipoCobranca NOT IN (" & CStr(TIPO_COBRANCA_CARTEIRA) & "," & CStr(TIPO_COBRANCA_CHEQUE_PRE) & ")"
    End If
    
    sSelect = "SELECT " & sFields & sFrom & sWhere & sOrderBy
    
End Sub

Private Function ParcelasPagar_Le_BorderoPag2(ByVal objBorderoPagEmissao As ClassBorderoPagEmissao, ByVal lComando As Long, sFornecedoresNomeReduzido As String, sFornecedoresRazaoSocial As String, iTitulosPagFilialEmpresa As Integer, lTitulosPagNumTitulo As Long, dtTitulosPagDataEmissao As Date, lTitulosPagFornecedor As Long, iTitulosPagFilial As Integer, sTitulosPagSiglaDocumento As String, lParcelasPagNumIntDoc As Long, iParcelasPagNumParcela As Integer, dtParcelasPagDataVencimento As Date, dParcelasPagSaldo As Double, iParcelasPagPortador As Integer, sFilFornContaContabil As String) As Long
'utilizada durante a geracao de bordero de pagto
'preenche a colecao de parcelas "candidatas" a pagar por bordero, a partir do comando executado anteriormente
Dim objInfoParcPag As ClassInfoParcPag, dtVctoMinSemAtraso As Date
Dim lErro As Long, iSeqCheque As Integer, iQdteSel As Integer
Dim dValorAcumSel As Double, dValorAcumTotal As Double, iDesmarcar As Integer
Dim iIndice As Integer, iPortadorOK As Integer, colPortadores As New Collection

On Error GoTo Erro_ParcelasPagar_Le_BorderoPag2

    lErro = CF("ObterVctoMinSemAtraso", giFilialEmpresa, objBorderoPagEmissao.dtEmissao, dtVctoMinSemAtraso)
    If lErro <> SUCESSO Then Error 7273
        
    'obter os portadores que sao o proprio banco utilizado p/pagto
    lErro = Portadores_Le_Banco(objBorderoPagEmissao.iBcoCta, colPortadores)
    If lErro <> SUCESSO Then Error 19411
    
    'Ler as parcelas p/colecao

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7276

    If lErro = AD_SQL_SEM_DADOS Then Error 7277

    dValorAcumSel = 0
    dValorAcumTotal = 0
    iQdteSel = 0
    
    Do While lErro = AD_SQL_SUCESSO

        'verifica se o portador está marcado
        If iParcelasPagPortador <> 0 Then
        
            iPortadorOK = 0
            
            'verifica se o portador é o proprio banco
            For iIndice = 1 To colPortadores.Count
            
                If colPortadores.Item(iIndice) = iParcelasPagPortador Then
                
                    iPortadorOK = 1
                    Exit For
                    
                End If
                
            Next
            
            'Se nao é o banco do bordero
            If iPortadorOK <> 1 Then GoTo proxima
            
        End If
        
        iDesmarcar = 0
        If objBorderoPagEmissao.dValorMaximo <> 0 Then
            'Se acumulado de valor selecionado incluindo esta parcela ultrapassa o limite
            If (dValorAcumSel + dParcelasPagSaldo > objBorderoPagEmissao.dValorMaximo) Then
                'se dValorAcumTotal incluindo esta parcela <= limite + 20%
                If (dValorAcumTotal + dParcelasPagSaldo <= 1.2 * objBorderoPagEmissao.dValorMaximo) Then
                    'incluir como desmarcada
                    iDesmarcar = 1
                Else
                    'ignorar a parcela e pegar a proxima
                    GoTo proxima
                End If
            End If
        End If

        Set objInfoParcPag = New ClassInfoParcPag

        objInfoParcPag.dtDataEmissao = dtTitulosPagDataEmissao
        objInfoParcPag.dtDataVencimento = dtParcelasPagDataVencimento
        objInfoParcPag.dValor = dParcelasPagSaldo
        objInfoParcPag.iFilialForn = iTitulosPagFilial
        objInfoParcPag.sSiglaDocumento = sTitulosPagSiglaDocumento
        objInfoParcPag.iNumParcela = iParcelasPagNumParcela
        objInfoParcPag.iTipoCobranca = objBorderoPagEmissao.iTipoCobranca
        objInfoParcPag.lFornecedor = lTitulosPagFornecedor
        objInfoParcPag.lNumIntParc = lParcelasPagNumIntDoc
        objInfoParcPag.lNumTitulo = lTitulosPagNumTitulo
        objInfoParcPag.sNomeRedForn = sFornecedoresNomeReduzido
        objInfoParcPag.sRazaoSocialForn = sFornecedoresRazaoSocial
        objInfoParcPag.iSeqCheque = 1
        objInfoParcPag.sContaFilForn = sFilFornContaContabil
        objInfoParcPag.iFilialEmpresa = iTitulosPagFilialEmpresa
        
        'parcelas em atraso vao entrar desmarcadas
        If dtVctoMinSemAtraso > dtParcelasPagDataVencimento Then iDesmarcar = 1

        If iDesmarcar = 1 Then
            objInfoParcPag.iSeqCheque = 0
        Else
            dValorAcumSel = dValorAcumSel + dParcelasPagSaldo
            iQdteSel = iQdteSel + 1
        End If

        dValorAcumTotal = dValorAcumTotal + dParcelasPagSaldo
        
        objBorderoPagEmissao.colInfoParcPag.Add objInfoParcPag

        If objBorderoPagEmissao.dValorMaximo <> 0 Then
            'Se acumulado de valor selecionado ( incluindo esta parcela ) ultrapassa 98% do limite
            'pode parar de pesquisar parcelas
            If (dValorAcumSel > 0.98 * objBorderoPagEmissao.dValorMaximo) Then Exit Do
        End If

proxima:
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7278

    Loop

    If objBorderoPagEmissao.colInfoParcPag.Count = 0 Then Error 19432
    
    objBorderoPagEmissao.dValorParcelasSelecionadas = dValorAcumSel
    objBorderoPagEmissao.iQtdeParcelasSelecionadas = iQdteSel
    
    ParcelasPagar_Le_BorderoPag2 = SUCESSO

    Exit Function

Erro_ParcelasPagar_Le_BorderoPag2:

    ParcelasPagar_Le_BorderoPag2 = Err

    Select Case Err

        Case 7273, 19411

        Case 7277, 19432
            Call Rotina_Erro(vbOKOnly, "ERRO_SEM_PARCELAS_PAG_SEL", Err)

        Case 7276, 7278
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_PAG", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148543)

    End Select

    Exit Function

End Function

Function ParcelasPagar_Le_BorderoPag(ByVal objBorderoPagEmissao As ClassBorderoPagEmissao) As Long
'utilizada durante a geracao de bordero de pagto
'preenche a colecao de parcelas a pagar por bordero "candidatas"

Dim sSelect As String, lErro As Long, iParamFilialEmpresa As Integer, iParamBcoCta As Integer, iStatusAberto As Integer
Dim lComando As Long, objContasCorrentesInternas As New ClassContasCorrentesInternas
'buffers p/registros pesquisados
Dim sFornecedoresNomeReduzido As String, sFornecedoresRazaoSocial As String
Dim iTitulosPagFilialEmpresa As Integer, lTitulosPagNumTitulo As Long, dtTitulosPagDataEmissao As Date, lTitulosPagFornecedor As Long, iTitulosPagFilial As Integer
Dim lParcelasPagNumIntDoc As Long, iParcelasPagNumParcela As Integer, dtParcelasPagDataVencimento As Date, dParcelasPagSaldo As Double, iParcelasPagPortador As Integer
Dim sFilFornContaContabil As String, sTitulosPagSiglaDocumento As String

On Error GoTo Erro_ParcelasPagar_Le_BorderoPag

    iStatusAberto = STATUS_ABERTO

    'para obter o codigo do banco da conta corrente selecionada
    lErro = CF("ContaCorrenteInt_Le", objBorderoPagEmissao.iCta, objContasCorrentesInternas)
    If lErro <> SUCESSO Then Error 7420
    
    objBorderoPagEmissao.iBcoCta = objContasCorrentesInternas.iCodBanco
    
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 7274

    'p/montagem do comando SQL SELECT dinamicamente
    Call CF("ParcelasPagar_Le_BorderoPag1", objBorderoPagEmissao, sSelect, iParamFilialEmpresa, iParamBcoCta)

    sFornecedoresNomeReduzido = String(STRING_FORNECEDOR_NOME_REDUZIDO, 0)
    sFornecedoresRazaoSocial = String(STRING_FORNECEDOR_RAZAO_SOC, 0)
    sFilFornContaContabil = String(STRING_CONTA, 0)
    sTitulosPagSiglaDocumento = String(STRING_SIGLA_DOCUMENTO, 0)
    
    'executa o SELECT de acordo com os flags setados
    If iParamFilialEmpresa And iParamBcoCta And objBorderoPagEmissao.iTipoCobranca <> TIPO_COBRANCA_TODAS Then
        lErro = Comando_Executar(lComando, sSelect, sFornecedoresNomeReduzido, sFornecedoresRazaoSocial, iTitulosPagFilialEmpresa, lTitulosPagNumTitulo, dtTitulosPagDataEmissao, lTitulosPagFornecedor, iTitulosPagFilial, sTitulosPagSiglaDocumento, lParcelasPagNumIntDoc, iParcelasPagNumParcela, dtParcelasPagDataVencimento, dParcelasPagSaldo, iParcelasPagPortador, sFilFornContaContabil, objBorderoPagEmissao.dtVenctoDe, objBorderoPagEmissao.dtVencto, iStatusAberto, giFilialEmpresa, objBorderoPagEmissao.iBcoCta, objBorderoPagEmissao.iTipoCobranca)
    ElseIf iParamFilialEmpresa And iParamBcoCta And objBorderoPagEmissao.iTipoCobranca = TIPO_COBRANCA_TODAS Then
        lErro = Comando_Executar(lComando, sSelect, sFornecedoresNomeReduzido, sFornecedoresRazaoSocial, iTitulosPagFilialEmpresa, lTitulosPagNumTitulo, dtTitulosPagDataEmissao, lTitulosPagFornecedor, iTitulosPagFilial, sTitulosPagSiglaDocumento, lParcelasPagNumIntDoc, iParcelasPagNumParcela, dtParcelasPagDataVencimento, dParcelasPagSaldo, iParcelasPagPortador, sFilFornContaContabil, objBorderoPagEmissao.dtVenctoDe, objBorderoPagEmissao.dtVencto, iStatusAberto, giFilialEmpresa, objBorderoPagEmissao.iBcoCta)
    Else
        If iParamFilialEmpresa And objBorderoPagEmissao.iTipoCobranca <> TIPO_COBRANCA_TODAS Then
            lErro = Comando_Executar(lComando, sSelect, sFornecedoresNomeReduzido, sFornecedoresRazaoSocial, iTitulosPagFilialEmpresa, lTitulosPagNumTitulo, dtTitulosPagDataEmissao, lTitulosPagFornecedor, iTitulosPagFilial, sTitulosPagSiglaDocumento, lParcelasPagNumIntDoc, iParcelasPagNumParcela, dtParcelasPagDataVencimento, dParcelasPagSaldo, iParcelasPagPortador, sFilFornContaContabil, objBorderoPagEmissao.dtVenctoDe, objBorderoPagEmissao.dtVencto, iStatusAberto, giFilialEmpresa, objBorderoPagEmissao.iTipoCobranca)
        ElseIf iParamFilialEmpresa And objBorderoPagEmissao.iTipoCobranca = TIPO_COBRANCA_TODAS Then
            lErro = Comando_Executar(lComando, sSelect, sFornecedoresNomeReduzido, sFornecedoresRazaoSocial, iTitulosPagFilialEmpresa, lTitulosPagNumTitulo, dtTitulosPagDataEmissao, lTitulosPagFornecedor, iTitulosPagFilial, sTitulosPagSiglaDocumento, lParcelasPagNumIntDoc, iParcelasPagNumParcela, dtParcelasPagDataVencimento, dParcelasPagSaldo, iParcelasPagPortador, sFilFornContaContabil, objBorderoPagEmissao.dtVenctoDe, objBorderoPagEmissao.dtVencto, iStatusAberto, giFilialEmpresa)
        Else
            If iParamBcoCta And objBorderoPagEmissao.iTipoCobranca <> TIPO_COBRANCA_TODAS Then
                lErro = Comando_Executar(lComando, sSelect, sFornecedoresNomeReduzido, sFornecedoresRazaoSocial, iTitulosPagFilialEmpresa, lTitulosPagNumTitulo, dtTitulosPagDataEmissao, lTitulosPagFornecedor, iTitulosPagFilial, sTitulosPagSiglaDocumento, lParcelasPagNumIntDoc, iParcelasPagNumParcela, dtParcelasPagDataVencimento, dParcelasPagSaldo, iParcelasPagPortador, sFilFornContaContabil, objBorderoPagEmissao.dtVenctoDe, objBorderoPagEmissao.dtVencto, iStatusAberto, objBorderoPagEmissao.iBcoCta, objBorderoPagEmissao.iTipoCobranca)
            ElseIf iParamBcoCta And objBorderoPagEmissao.iTipoCobranca = TIPO_COBRANCA_TODAS Then
                lErro = Comando_Executar(lComando, sSelect, sFornecedoresNomeReduzido, sFornecedoresRazaoSocial, iTitulosPagFilialEmpresa, lTitulosPagNumTitulo, dtTitulosPagDataEmissao, lTitulosPagFornecedor, iTitulosPagFilial, sTitulosPagSiglaDocumento, lParcelasPagNumIntDoc, iParcelasPagNumParcela, dtParcelasPagDataVencimento, dParcelasPagSaldo, iParcelasPagPortador, sFilFornContaContabil, objBorderoPagEmissao.dtVenctoDe, objBorderoPagEmissao.dtVencto, iStatusAberto, objBorderoPagEmissao.iBcoCta)
            ElseIf objBorderoPagEmissao.iTipoCobranca <> TIPO_COBRANCA_TODAS Then
                lErro = Comando_Executar(lComando, sSelect, sFornecedoresNomeReduzido, sFornecedoresRazaoSocial, iTitulosPagFilialEmpresa, lTitulosPagNumTitulo, dtTitulosPagDataEmissao, lTitulosPagFornecedor, iTitulosPagFilial, sTitulosPagSiglaDocumento, lParcelasPagNumIntDoc, iParcelasPagNumParcela, dtParcelasPagDataVencimento, dParcelasPagSaldo, iParcelasPagPortador, sFilFornContaContabil, objBorderoPagEmissao.dtVenctoDe, objBorderoPagEmissao.dtVencto, iStatusAberto, objBorderoPagEmissao.iTipoCobranca)
            Else
                lErro = Comando_Executar(lComando, sSelect, sFornecedoresNomeReduzido, sFornecedoresRazaoSocial, iTitulosPagFilialEmpresa, lTitulosPagNumTitulo, dtTitulosPagDataEmissao, lTitulosPagFornecedor, iTitulosPagFilial, sTitulosPagSiglaDocumento, lParcelasPagNumIntDoc, iParcelasPagNumParcela, dtParcelasPagDataVencimento, dParcelasPagSaldo, iParcelasPagPortador, sFilFornContaContabil, objBorderoPagEmissao.dtVenctoDe, objBorderoPagEmissao.dtVencto, iStatusAberto)
            End If
        End If
    End If

    If lErro <> AD_SQL_SUCESSO Then Error 7275

    'processa todas as parcelas retornadas pelo SELECT executado acima
    lErro = ParcelasPagar_Le_BorderoPag2(objBorderoPagEmissao, lComando, sFornecedoresNomeReduzido, sFornecedoresRazaoSocial, iTitulosPagFilialEmpresa, lTitulosPagNumTitulo, dtTitulosPagDataEmissao, lTitulosPagFornecedor, iTitulosPagFilial, sTitulosPagSiglaDocumento, lParcelasPagNumIntDoc, iParcelasPagNumParcela, dtParcelasPagDataVencimento, dParcelasPagSaldo, iParcelasPagPortador, sFilFornContaContabil)
    If lErro <> SUCESSO Then Error 7442
    
    lErro = Comando_Fechar(lComando)

    ParcelasPagar_Le_BorderoPag = SUCESSO

    Exit Function

Erro_ParcelasPagar_Le_BorderoPag:

    ParcelasPagar_Le_BorderoPag = Err

    Select Case Err

        Case 7420, 7442

        Case 7274
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 7275
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_PAG", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148544)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function ChequesPagAvulso_ChequesSelecionados(ByVal objChequesPagAvulso As ClassChequesPagAvulso) As Long
Attribute ChequesPagAvulso_ChequesSelecionados.VB_Description = "preenche informacoes sobre o cheque. Deve ser chamada apos a selecao das parcelas que efetivamente serao pagas em cheque"
'utilizada na emissao de cheque manual (ou avulso)
'preenche informacoes sobre o cheque
'deve ser chamada apos a selecao das parcelas que efetivamente serao pagas em cheque
Dim objInfoParcPag As ClassInfoParcPag, objInfoChequePag As ClassInfoChequePag
Dim iPrimeiro As Integer, dValor As Double, sFavorecido As String, lNumRealCheque As Long, iPortador As Integer
Dim lComandoSelPort As Long, lComandoSelForn As Long, lErro As Long
On Error GoTo Erro_ChequesPagAvulso_ChequesSelecionados

    lComandoSelPort = Comando_Abrir()
    If lComandoSelPort = 0 Then Error 7397

    lComandoSelForn = Comando_Abrir()
    If lComandoSelForn = 0 Then Error 7398

    dValor = 0
    iPrimeiro = 1

    For Each objInfoParcPag In objChequesPagAvulso.colInfoParcPag

        'pula parcelas que nao serao pagas
        If objInfoParcPag.iSeqCheque <> 0 Then

            If iPrimeiro = 1 Then
                iPrimeiro = 0
                iPortador = objInfoParcPag.iPortador
                
                lErro = CF("FavorecidoChequeTitulo_Obter", sFavorecido, objInfoParcPag.lFornecedor, objInfoParcPag.iTipoCobranca, objInfoParcPag.sNomeRedPortador, lComandoSelPort, lComandoSelForn)
                If lErro <> SUCESSO Then Error 7399
            End If

            dValor = dValor + objInfoParcPag.dValor + objInfoParcPag.dValorJuros + objInfoParcPag.dValorMulta - objInfoParcPag.dValorDesconto

        End If

    Next

    'incluir o cheque, se existir
    If iPrimeiro <> 1 Then
        objChequesPagAvulso.objInfoChequePag.dValor = dValor
        objChequesPagAvulso.objInfoChequePag.iImprimir = 1
        objChequesPagAvulso.objInfoChequePag.iSeqCheque = 1
        objChequesPagAvulso.objInfoChequePag.lNumRealCheque = objChequesPagAvulso.lNumCheque
        objChequesPagAvulso.objInfoChequePag.sFavorecido = sFavorecido
        objChequesPagAvulso.objInfoChequePag.iPortador = iPortador
    End If

    lErro = Comando_Fechar(lComandoSelForn)
    lErro = Comando_Fechar(lComandoSelPort)

    ChequesPagAvulso_ChequesSelecionados = SUCESSO

    Exit Function

Erro_ChequesPagAvulso_ChequesSelecionados:

    ChequesPagAvulso_ChequesSelecionados = Err

    Select Case Err

        Case 7397, 7398
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 7399

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148545)

    End Select

    Call Comando_Fechar(lComandoSelForn)
    Call Comando_Fechar(lComandoSelPort)
    
    Exit Function

End Function

Function Fluxo_Le_Todos(ByVal colFluxo As Collection) As Long
'Lê todos os fluxos contidos na tabela Fluxo e os coloca na coleçao colFluxo

Dim lComando As Long
Dim lErro As Long
Dim objFluxo As ClassFluxo
Dim tFluxo As typeFluxo

On Error GoTo Erro_Fluxo_Le_Todos

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 10915
    
    tFluxo.sFluxo = String(STRING_FLUXO_NOME, 0)
    tFluxo.sDescricao = String(STRING_FLUXO_DESCRICAO, 0)
    
    'Lê todos os fluxos
    lErro = Comando_Executar(lComando, "SELECT Fluxo, Descricao, DataInicial, DataFinal, DataDadosReais, FluxoId FROM Fluxo WHERE FilialEmpresa = ? ORDER BY Fluxo", tFluxo.sFluxo, tFluxo.sDescricao, tFluxo.dtDataBase, tFluxo.dtDataFinal, tFluxo.dtDataDadosReais, tFluxo.lFluxoId, giFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then Error 10916

    'le o primeiro Fluxo
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 10917
    
    'le os demais fluxos
    Do While lErro <> AD_SQL_SEM_DADOS

        Set objFluxo = New ClassFluxo
        
        objFluxo.dtDataBase = tFluxo.dtDataBase
        objFluxo.dtDataDadosReais = tFluxo.dtDataDadosReais
        objFluxo.dtDataFinal = tFluxo.dtDataFinal
        objFluxo.lFluxoId = tFluxo.lFluxoId
        objFluxo.sDescricao = tFluxo.sDescricao
        objFluxo.sFluxo = tFluxo.sFluxo
        
        'Coloca o fluxo lido na coleção
        colFluxo.Add objFluxo
        
        'Lê o próximo Fluxo
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 10918

    Loop

    Call Comando_Fechar(lComando)
    
    Fluxo_Le_Todos = SUCESSO

    Exit Function

Erro_Fluxo_Le_Todos:

    Fluxo_Le_Todos = Err
    
    Select Case Err

        Case 10915
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 10916, 10917, 10918
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TABELA", Err, "Fluxo")
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148546)

    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function
    
End Function

Function ContasCorrentesInternas_Le_CodigosNomesRed(ByVal colCodigoNomeRed As AdmColCodigoNome, Optional ByVal bSemChequePre As Boolean = True) As Long
'Lê códigos e nomes reduzidos das contacorrentes da FilialEmpresa
'Se FilialEmpresa=EMPRESA_TODA lê de todas as filiais

Dim lComando As Long
Dim lErro As Long
Dim iCodigo As Integer
Dim sNome As String
Dim sSQL As String

On Error GoTo Erro_ContasCorrentesInternas_Le_CodigosNomesRed

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 6754

    sNome = String(STRING_CONTA_CORRENTE_NOME_REDUZIDO, 0)

    If giFilialEmpresa <> EMPRESA_TODA Then
        
        'Seleciona códigos, nomes reduzidos de CtaCorrentes da filial empresa
        sSQL = "SELECT Codigo, NomeReduzido FROM ContasCorrentesInternas WHERE FilialEmpresa=?"
        If bSemChequePre Then sSQL = sSQL & " AND ChequePre=0"
        sSQL = sSQL & " ORDER BY Codigo"
        
        lErro = Comando_Executar(lComando, sSQL, iCodigo, sNome, giFilialEmpresa)
        If lErro <> AD_SQL_SUCESSO Then Error 6755
    
    Else  'FilialEmpresa=EMPRESA_TODA
    
        sSQL = "SELECT Codigo, NomeReduzido FROM ContasCorrentesInternas"
        If bSemChequePre Then sSQL = sSQL & " WHERE ChequePre=0"
        sSQL = sSQL & " ORDER BY Codigo"
        
        'Seleciona códigos, nomes reduzidos de CtaCorrentes de todas as filiais da empresa
        lErro = Comando_Executar(lComando, sSQL, iCodigo, sNome)
        If lErro <> AD_SQL_SUCESSO Then Error 6767
        
    End If
   
    'Lê o primeiro registro da tabela ContaCorrente
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 6756

    Do While lErro <> AD_SQL_SEM_DADOS

        'coloca o objCodigoDescricao lido na coleção
        colCodigoNomeRed.Add iCodigo, sNome

        'le o proximo registro da tabela
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 6757

    Loop

    Call Comando_Fechar(lComando)

    ContasCorrentesInternas_Le_CodigosNomesRed = SUCESSO

    Exit Function

Erro_ContasCorrentesInternas_Le_CodigosNomesRed:

    ContasCorrentesInternas_Le_CodigosNomesRed = Err

    Select Case Err

        Case 6754
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 6755
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONTASCORRENTESINTERNAS", Err)

        Case 6767
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONTASCORRENTESINTERNAS", Err)
        
        Case 6756, 6757
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONTASCORRENTESINTERNAS", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148547)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function Portadores_Le_CodigosNomesRed(ByVal colCodigoNomeRed As AdmColCodigoNome) As Long
'Lê códigos e nomes reduzidos dos Portadores que não estão Inativos

Dim lComando As Long
Dim lErro As Long
Dim iCodigo As Integer
Dim sNome As String

On Error GoTo Erro_Portadores_Le_CodigosNomesRed

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 6763
        
    sNome = String(STRING_PORTADOR_NOME_REDUZIDO, 0)

    'Seleciona códigos, nomes reduzidos
    lErro = Comando_Executar(lComando, "SELECT Codigo, NomeReduzido FROM Portador WHERE Inativo<>? ORDER BY Codigo", iCodigo, sNome, Inativo)
    If lErro <> AD_SQL_SUCESSO Then Error 6764

    'Lê o primeiro registro da tabela Portador
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 6765

    Do While lErro <> AD_SQL_SEM_DADOS

        'coloca o objCodigoDescricao lido na coleção
        colCodigoNomeRed.Add iCodigo, sNome

        'le o proximo registro da tabela
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 6766

    Loop

    Call Comando_Fechar(lComando)

    Portadores_Le_CodigosNomesRed = SUCESSO

    Exit Function

Erro_Portadores_Le_CodigosNomesRed:

    Portadores_Le_CodigosNomesRed = Err

    Select Case Err

        Case 6763
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 6764, 6765, 6766
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PORTADOR2", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148548)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function ParcelasRec_Le_BorderoCobranca(ByVal objBorderoCobrancaEmissao As ClassBorderoCobrancaEmissao) As Long
'utilizada durante a geracao de bordero de cobranca
'preenche a colecao de parcelas a receber por bordero "candidatas"

Dim sSelect As String, lErro As Long, iParamFilialEmpresa As Integer, iParamTipoCliente As Integer
Dim lComando As Long, iStatusAberto As Integer, dtVencto As Date
'buffers p/registros pesquisados
Dim sClientesNomeReduzido As String, sClientesRazaoSocial As String, iClientesPadraoCobranca As Integer
Dim lTitulosRecNumTitulo As Long, iTitulosRecFilialEmpresa As Integer, lTitulosRecCliente As Long, iTitulosRecFilial As Integer
Dim lParcelasRecNumIntDoc As Long, iParcelasRecNumParcela As Integer, dtParcelasRecDataVencimento As Date, dParcelasRecSaldo As Double
Dim sTitulosRecSiglaDocumento As String, iCondPagto As Integer

Dim iCobradorEmpresa As Integer, iCarteiraEmCarteira As Integer, iCobradorBordero As Integer

On Error GoTo Erro_ParcelasRec_Le_BorderoCobranca

    iStatusAberto = STATUS_ABERTO
    iCobradorEmpresa = COBRADOR_PROPRIA_EMPRESA
    iCarteiraEmCarteira = CARTEIRA_CARTEIRA
    iCobradorBordero = objBorderoCobrancaEmissao.iCobrador
    
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 7508

    'p/montagem do comando SQL SELECT dinamicamente
    Call CF("ParcelasRec_Le_BorderoCobranca1", objBorderoCobrancaEmissao, sSelect, iParamFilialEmpresa, iParamTipoCliente)

    sClientesNomeReduzido = String(STRING_CLIENTE_NOME_REDUZIDO, 0)
    sClientesRazaoSocial = String(STRING_CLIENTE_RAZAO_SOCIAL, 0)
    sTitulosRecSiglaDocumento = String(STRING_SIGLA_DOCUMENTO, 0)
    
    dtVencto = objBorderoCobrancaEmissao.dtDataVencimento
    
    'executa a preparacao da parte fixa do SELECT
    lErro = ParcelasRec_Le_BorderoCobranca2(lComando, sSelect, sClientesNomeReduzido, sClientesRazaoSocial, iClientesPadraoCobranca, lTitulosRecNumTitulo, iTitulosRecFilialEmpresa, lTitulosRecCliente, iTitulosRecFilial, sTitulosRecSiglaDocumento, lParcelasRecNumIntDoc, iParcelasRecNumParcela, dtParcelasRecDataVencimento, dParcelasRecSaldo, dtVencto, iStatusAberto, iCobradorEmpresa, iCarteiraEmCarteira, iCobradorBordero)
    If lErro <> SUCESSO Then Error 7509

    'complementa a passagem dos parametros que variam de acordo com a selecao do usuario
    'e executa o SELECT p/obtencao das parcelas
    lErro = ParcelasRec_Le_BorderoCobranca3(objBorderoCobrancaEmissao, lComando, iParamFilialEmpresa, iParamTipoCliente)
    If lErro <> SUCESSO Then Error 7510

    'processa todas as parcelas retornadas pelo SELECT executado acima
    lErro = ParcelasRec_Le_BorderoCobranca4(objBorderoCobrancaEmissao, lComando, sClientesNomeReduzido, sClientesRazaoSocial, iClientesPadraoCobranca, lTitulosRecNumTitulo, iTitulosRecFilialEmpresa, lTitulosRecCliente, iTitulosRecFilial, sTitulosRecSiglaDocumento, lParcelasRecNumIntDoc, iParcelasRecNumParcela, dtParcelasRecDataVencimento, dParcelasRecSaldo)
    If lErro <> SUCESSO Then Error 7512
    
    lErro = Comando_Fechar(lComando)

    ParcelasRec_Le_BorderoCobranca = SUCESSO

    Exit Function

Erro_ParcelasRec_Le_BorderoCobranca:

    ParcelasRec_Le_BorderoCobranca = Err

    Select Case Err

        Case 7509, 7510, 7512

        Case 7508
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148549)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function ParcelasRec_Le_BorderoCobranca1(ByVal objBorderoCobrancaEmissao As ClassBorderoCobrancaEmissao, sSelect As String, iParamFilialEmpresa As Integer, iParamTipoCliente As Integer) As Long
'auxiliar a ParcelasRec_Le_BorderoCobranca
'monta o SELECT dinamicamente
Dim sFrom As String, sWhere As String, sFields As String, sOrderBy As String

    sFields = " Clientes.NomeReduzido, Clientes.RazaoSocial, Clientes.CodPadraoCobranca"
    sFields = sFields & ", TitulosRec.NumTitulo, TitulosRec.FilialEmpresa, TitulosRec.Cliente, TitulosRec.Filial, TitulosRec.SiglaDocumento"
    sFields = sFields & ", ParcelasRec.NumIntDoc, ParcelasRec.NumParcela, ParcelasRec.DataVencimento, ParcelasRec.Saldo"

    sFrom = " FROM ParcelasRec, TitulosRec, Clientes, FiliaisClientes"
    sWhere = " WHERE TitulosRec.SiglaDocumento <> 'TL' AND TitulosRec.SiglaDocumento <> 'CRT' AND ParcelasRec.DataVencimento <= ? AND ParcelasRec.Status = ? AND ParcelasRec.NumIntTitulo = TitulosRec.NumIntDoc AND TitulosRec.Cliente = Clientes.Codigo AND ParcelasRec.Cobrador = ? AND ParcelasRec.CarteiraCobranca = ? AND Clientes.Codigo = FiliaisClientes.CodCliente AND TitulosRec.Filial = FiliaisClientes.CodFilial AND ( FiliaisClientes.CodCobrador = ? OR FiliaisClientes.CodCobrador = 0 )"
    sWhere = sWhere & " AND (TitulosRec.CondicaoPagto =0 OR TitulosRec.CondicaoPagto IN (SELECT Codigo from CondicoesPagto WHERE FormaPagamento =0 OR FormaPagamento IN (SELECT Codigo FROM FormasPagamento WHERE CobrancaBancaria =1)))"

    'Se entrar como filial centralizadora da cobranca pode pegar titulos de todas as filiais,
    If giFilialEmpresa = gobjCR.iFilialCentralizadora Then
        iParamFilialEmpresa = 0
    Else 'Senao pegar titulos somente da filial corrente
        sWhere = sWhere & " AND TitulosRec.FilialEmpresa = ?"
        iParamFilialEmpresa = 1
    End If

    If objBorderoCobrancaEmissao.sSiglaEstado <> "" Then
        sWhere = sWhere & " AND FiliaisClientes.EnderecoCobranca = Enderecos.Codigo AND Enderecos.SiglaEstado = '" & objBorderoCobrancaEmissao.sSiglaEstado & "'"
        sFrom = sFrom & ", Enderecos"
    End If
    
    If objBorderoCobrancaEmissao.iTipoCliente <> 0 Then
        sWhere = sWhere & " AND Clientes.Tipo = ?"
        iParamTipoCliente = 1
    Else
        iParamTipoCliente = 0
    End If
    
    If objBorderoCobrancaEmissao.iTipoAceite <> TIPO_ACEITE_AMBOS Then
        sWhere = sWhere & " AND ParcelasRec.Aceite = ?"
    End If
    
    sOrderBy = " ORDER BY TitulosRec.Cliente, TitulosRec.Filial, TitulosRec.NumTitulo, ParcelasRec.NumParcela"
    
    sSelect = "SELECT " & sFields & sFrom & sWhere & sOrderBy

    ParcelasRec_Le_BorderoCobranca1 = SUCESSO
    
End Function

Private Function ParcelasRec_Le_BorderoCobranca2(ByVal lComando As Long, ByVal sSelect As String, vsClientesNomeReduzido As Variant, vsClientesRazaoSocial As Variant, viClientesPadraoCobranca As Variant, vlTitulosRecNumTitulo As Variant, viTitulosRecFilialEmpresa As Variant, vlTitulosRecCliente As Variant, viTitulosRecFilial As Variant, vsTitulosRecSiglaDocumento As Variant, vlParcelasRecNumIntDoc As Variant, viParcelasRecNumParcela As Variant, vdtParcelasRecDataVencimento As Variant, vdParcelasRecSaldo As Variant, vdtVencto As Variant, viStatusAberto As Variant, viCobradorEmpresa As Variant, viCarteiraEmCarteira As Variant, viCobradorBordero As Variant) As Long
'isola a preparacao da parte fixa do SELECT, serve apenas para diminuir o tamanho de ParcelasRec_Le_BorderoCobranca
Dim ret As Integer, lErro As Long
On Error GoTo Erro_ParcelasRec_Le_BorderoCobranca2

    ret = Comando_PrepararInt(lComando, sSelect)
    If (ret <> AD_SQL_SUCESSO) Then Error 7513

    ret = Comando_BindVarInt(lComando, vsClientesNomeReduzido)
    If (ret <> AD_SQL_SUCESSO) Then Error 7514

    ret = Comando_BindVarInt(lComando, vsClientesRazaoSocial)
    If (ret <> AD_SQL_SUCESSO) Then Error 7515

    ret = Comando_BindVarInt(lComando, viClientesPadraoCobranca)
    If (ret <> AD_SQL_SUCESSO) Then Error 19320
    
    ret = Comando_BindVarInt(lComando, vlTitulosRecNumTitulo)
    If (ret <> AD_SQL_SUCESSO) Then Error 7516

    ret = Comando_BindVarInt(lComando, viTitulosRecFilialEmpresa)
    If (ret <> AD_SQL_SUCESSO) Then Error 19321

    ret = Comando_BindVarInt(lComando, vlTitulosRecCliente)
    If (ret <> AD_SQL_SUCESSO) Then Error 7517

    ret = Comando_BindVarInt(lComando, viTitulosRecFilial)
    If (ret <> AD_SQL_SUCESSO) Then Error 7518

    ret = Comando_BindVarInt(lComando, vsTitulosRecSiglaDocumento)
    If (ret <> AD_SQL_SUCESSO) Then Error 61003

    ret = Comando_BindVarInt(lComando, vlParcelasRecNumIntDoc)
    If (ret <> AD_SQL_SUCESSO) Then Error 7519

    ret = Comando_BindVarInt(lComando, viParcelasRecNumParcela)
    If (ret <> AD_SQL_SUCESSO) Then Error 7520

    ret = Comando_BindVarInt(lComando, vdtParcelasRecDataVencimento)
    If (ret <> AD_SQL_SUCESSO) Then Error 7521

    ret = Comando_BindVarInt(lComando, vdParcelasRecSaldo)
    If (ret <> AD_SQL_SUCESSO) Then Error 7522

    ret = Comando_BindVarInt(lComando, vdtVencto)
    If (ret <> AD_SQL_SUCESSO) Then Error 7523

    ret = Comando_BindVarInt(lComando, viStatusAberto)
    If (ret <> AD_SQL_SUCESSO) Then Error 7524

    ret = Comando_BindVarInt(lComando, viCobradorEmpresa)
    If (ret <> AD_SQL_SUCESSO) Then Error 19438

    ret = Comando_BindVarInt(lComando, viCarteiraEmCarteira)
    If (ret <> AD_SQL_SUCESSO) Then Error 19439

    ret = Comando_BindVarInt(lComando, viCobradorBordero)
    If (ret <> AD_SQL_SUCESSO) Then Error 19440

    ParcelasRec_Le_BorderoCobranca2 = SUCESSO

    Exit Function

Erro_ParcelasRec_Le_BorderoCobranca2:

    ParcelasRec_Le_BorderoCobranca2 = Err

    Select Case Err

        Case 7513 To 7524, 19320, 19321, 61003
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_REC", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148550)

    End Select

    Exit Function

End Function

Function ParcelasRec_Le_BorderoCobranca3(ByVal objBorderoCobrancaEmissao As ClassBorderoCobrancaEmissao, ByVal lComando As Long, ByVal iParamFilialEmpresa As Integer, ByVal iParamTipoCliente As Integer) As Long
'auxiliar a ParcelasRec_Le_BorderoCobranca
'complementa a passagem dos parametros que variam de acordo com a selecao do usuario
'e executa o SELECT p/obtencao das parcelas
Dim lErro As Long, ret As Integer
Dim viFilialEmpresa As Variant, viTipoCliente As Variant, viTipoAceite As Variant

On Error GoTo Erro_ParcelasRec_Le_BorderoCobranca3

    If (iParamFilialEmpresa = 1) Then
        viFilialEmpresa = giFilialEmpresa
        ret = Comando_BindVarInt(lComando, viFilialEmpresa)
        If (ret <> AD_SQL_SUCESSO) Then Error 7525
    End If

    If (iParamTipoCliente = 1) Then
        viTipoCliente = objBorderoCobrancaEmissao.iTipoCliente
        ret = Comando_BindVarInt(lComando, viTipoCliente)
        If (ret <> AD_SQL_SUCESSO) Then Error 7526
    End If

    If objBorderoCobrancaEmissao.iTipoAceite <> TIPO_ACEITE_AMBOS Then
        If objBorderoCobrancaEmissao.iTipoAceite = TIPO_ACEITE_SEM Then
            viTipoAceite = 0
        Else
            viTipoAceite = 1
        End If
        ret = Comando_BindVarInt(lComando, viTipoAceite)
        If (ret <> AD_SQL_SUCESSO) Then Error 7526
    End If
    
    ret = Comando_ExecutarInt(lComando)
    If (ret <> AD_SQL_SUCESSO) Then Error 7527

    ParcelasRec_Le_BorderoCobranca3 = SUCESSO

    Exit Function

Erro_ParcelasRec_Le_BorderoCobranca3:

    ParcelasRec_Le_BorderoCobranca3 = Err

    Select Case Err

        Case 7525 To 7527
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_REC", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148551)

    End Select

    Exit Function

End Function

Private Function ParcelasRec_Le_BorderoCobranca4(ByVal objBorderoCobrancaEmissao As ClassBorderoCobrancaEmissao, ByVal lComando As Long, sClientesNomeReduzido As String, sClientesRazaoSocial As String, iClientesPadraoCobranca As Integer, lTitulosRecNumTitulo As Long, iTitulosRecFilialEmpresa As Integer, lTitulosRecCliente As Long, iTitulosRecFilial As Integer, sTitulosRecSiglaDocumento As String, lParcelasRecNumIntDoc As Long, iParcelasRecNumParcela As Integer, dtParcelasRecDataVencimento As Date, dParcelasRecSaldo As Double) As Long
'auxiliar a ParcelasRec_Le_BorderoCobranca
'processa os registros lidos
Dim lErro As Long, dValorAcumSel As Double, dValorAcumTotal As Double, iDesmarcar As Integer
Dim objInfoParcRec As ClassInfoParcRec, iQtdeParcSel As Integer

On Error GoTo Erro_ParcelasRec_Le_BorderoCobranca4

    iQtdeParcSel = 0
    dValorAcumSel = 0
    dValorAcumTotal = 0
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7528

    Do While lErro = AD_SQL_SUCESSO

        iDesmarcar = 0
        If objBorderoCobrancaEmissao.dValorMaximo <> 0 Then
            'Se acumulado de valor selecionado incluindo esta parcela ultrapassa o limite
            If (dValorAcumSel + dParcelasRecSaldo > objBorderoCobrancaEmissao.dValorMaximo) Then
                'se dValorAcumTotal incluindo esta parcela <= limite + 20%
                If (dValorAcumTotal + dParcelasRecSaldo <= 1.2 * objBorderoCobrancaEmissao.dValorMaximo) Then
                    'incluir como desmarcada
                    iDesmarcar = 1
                Else
                    'ignorar a parcela e pegar a proxima
                    GoTo proxima
                End If
            End If
        End If

        Set objInfoParcRec = New ClassInfoParcRec

        objInfoParcRec.dtVencimento = dtParcelasRecDataVencimento
        objInfoParcRec.dValor = dParcelasRecSaldo
        objInfoParcRec.iFilialCliente = iTitulosRecFilial
        objInfoParcRec.iFilialEmpresa = iTitulosRecFilialEmpresa
        objInfoParcRec.iNumParcela = iParcelasRecNumParcela
        objInfoParcRec.lCliente = lTitulosRecCliente
        objInfoParcRec.lNumIntParc = lParcelasRecNumIntDoc
        objInfoParcRec.lNumTitulo = lTitulosRecNumTitulo
        objInfoParcRec.sNomeRedCliente = sClientesNomeReduzido
        objInfoParcRec.sRazaoSocialCli = sClientesRazaoSocial
        objInfoParcRec.iPadraoCobranca = iClientesPadraoCobranca
        objInfoParcRec.sSiglaDocumento = sTitulosRecSiglaDocumento
        
        If iDesmarcar = 1 Then
            objInfoParcRec.iMarcada = 0
        Else
            objInfoParcRec.iMarcada = 1
            dValorAcumSel = dValorAcumSel + dParcelasRecSaldo
            iQtdeParcSel = iQtdeParcSel + 1
        End If

        dValorAcumTotal = dValorAcumTotal + dParcelasRecSaldo

        objBorderoCobrancaEmissao.colInfoParcRec.Add objInfoParcRec
        
        If objBorderoCobrancaEmissao.dValorMaximo <> 0 Then
            'Se acumulado de valor selecionado ( incluindo esta parcela ) ultrapassa 98% do limite
            'pode parar de pesquisar parcelas
            If (dValorAcumSel > 0.98 * objBorderoCobrancaEmissao.dValorMaximo) Then Exit Do
        End If

proxima:
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7530

    Loop

    If objBorderoCobrancaEmissao.colInfoParcRec.Count = 0 Then Error 7529

    objBorderoCobrancaEmissao.dValorParcelasSelecionadas = dValorAcumSel
    objBorderoCobrancaEmissao.iQtdeParcelasSelecionadas = iQtdeParcSel

    ParcelasRec_Le_BorderoCobranca4 = SUCESSO
    
    Exit Function

Erro_ParcelasRec_Le_BorderoCobranca4:

    ParcelasRec_Le_BorderoCobranca4 = Err

    Select Case Err

        Case 7529
            Call Rotina_Erro(vbOKOnly, "ERRO_SEM_PARCELAS_REC_SEL", Err)

        Case 7528, 7530
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_REC", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148552)

    End Select

    Exit Function

End Function

Function AntecipPag_Le_NumMovto(ByVal objAntecipPag As ClassAntecipPag) As Long
'Le dados de adiantamento a fornecedor a partir do identificador do movto de cta corrente

Dim lErro As Long
Dim lComando As Long
Dim tAntecipPag As typeAntecipPag

On Error GoTo Erro_AntecipPag_Le_NumMovto

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 42842
    
    lErro = Comando_Executar(lComando, "SELECT NumIntPag,Excluido, SaldoNaoApropriado,Fornecedor,Filial_Fornecedor, FilialPedCompra, NumPedCompra FROM PagtosAntecipados WHERE NumMovto = ? ", tAntecipPag.lNumIntPag, tAntecipPag.iExcluido, tAntecipPag.dSaldoNaoApropriado, tAntecipPag.lFornecedor, tAntecipPag.iFilial, tAntecipPag.iFilialPedCompra, tAntecipPag.lNumPedCompra, objAntecipPag.lNumMovto)
    If lErro <> AD_SQL_SUCESSO Then Error 42843
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 42844
    If lErro <> AD_SQL_SUCESSO Then Error 42845
    
    objAntecipPag.lFornecedor = tAntecipPag.lFornecedor
    objAntecipPag.dSaldoNaoApropriado = tAntecipPag.dSaldoNaoApropriado
    objAntecipPag.iExcluido = tAntecipPag.iExcluido
    objAntecipPag.iFilial = tAntecipPag.iFilial
    objAntecipPag.lNumIntPag = tAntecipPag.lNumIntPag
    objAntecipPag.iFilialPedCompra = tAntecipPag.iFilialPedCompra
    objAntecipPag.lNumPedCompra = tAntecipPag.lNumPedCompra
    
    Call Comando_Fechar(lComando)
    
    AntecipPag_Le_NumMovto = SUCESSO

    Exit Function
    
Erro_AntecipPag_Le_NumMovto:

    AntecipPag_Le_NumMovto = Err
    
    Select Case Err
    
        Case 42842
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_ARQUIVO_SORT", Err)
        
        Case 42843, 42844
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PAGTO_ANTECIPADO2", Err)
                    
        Case 42845
    
              
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function AntecipPag_Movto_Le(ByVal objAntecipPag As ClassAntecipPag) As Long
'Lê os dados do Pagamento antecipado nas tabelas PagtosAntecipados e MovimentosContaCorrente

Dim lErro As Long
Dim lComando As Long
Dim tAntecipPag As typeAntecipPag
Dim tMovContaCorrente As typeMovContaCorrente

On Error GoTo Erro_AntecipPag_Movto_Le

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 15391

    tMovContaCorrente.sHistorico = String(STRING_HISTORICOMOVCONTA, 0)
    tMovContaCorrente.sNatureza = String(STRING_NATMOVCTA_CODIGO, 0)
    
    lErro = Comando_Executar(lComando, "SELECT PagtosAntecipados.Fornecedor, PagtosAntecipados.Filial_Fornecedor, PagtosAntecipados.NumMovto, MovimentosContaCorrente.CodConta, MovimentosContaCorrente.Sequencial, " & _
        "MovimentosContaCorrente.DataMovimento, MovimentosContaCorrente.Valor, MovimentosContaCorrente.TipoMeioPagto, MovimentosContaCorrente.Numero, MovimentosContaCorrente.Historico, MovimentosContaCorrente.Natureza, PagtosAntecipados.SaldoNaoApropriado, PagtosAntecipados.FilialPedCompra, PagtosAntecipados.NumPedCompra FROM MovimentosContaCorrente, PagtosAntecipados WHERE PagtosAntecipados.NumIntPag = ? AND MovimentosContaCorrente.NumMovto = PagtosAntecipados.NumMovto ", _
        tAntecipPag.lFornecedor, tAntecipPag.iFilial, tAntecipPag.lNumMovto, tMovContaCorrente.iCodConta, _
        tMovContaCorrente.lSequencial, tMovContaCorrente.dtDataMovimento, tMovContaCorrente.dValor, tMovContaCorrente.iTipoMeioPagto, tMovContaCorrente.lNumero, tMovContaCorrente.sHistorico, tMovContaCorrente.sNatureza, tAntecipPag.dSaldoNaoApropriado, tAntecipPag.iFilialPedCompra, _
        tAntecipPag.lNumPedCompra, objAntecipPag.lNumIntPag)
    If lErro <> AD_SQL_SUCESSO Then Error 15392
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 15393

    'Se o Pagamento antecipado não está cadastrado
    If lErro = AD_SQL_SEM_DADOS Then Error 15394

    'Armazena em objAntecipPag os dados lidos
    
    'da propria tabela antecippag
    objAntecipPag.lNumMovto = tAntecipPag.lNumMovto
    objAntecipPag.dSaldoNaoApropriado = tAntecipPag.dSaldoNaoApropriado
    objAntecipPag.lFornecedor = tAntecipPag.lFornecedor
    objAntecipPag.iFilial = tAntecipPag.iFilial
    objAntecipPag.iExcluido = tAntecipPag.iExcluido
    objAntecipPag.iFilialPedCompra = tAntecipPag.iFilialPedCompra
    objAntecipPag.lNumPedCompra = tAntecipPag.lNumPedCompra

    'da tabela de movtos de cta corrente
    objAntecipPag.iCodConta = tMovContaCorrente.iCodConta
    objAntecipPag.lSequencial = tMovContaCorrente.lSequencial
    objAntecipPag.dtData = tMovContaCorrente.dtDataMovimento
    objAntecipPag.dValor = tMovContaCorrente.dValor
    objAntecipPag.iTipoMeioPagto = tMovContaCorrente.iTipoMeioPagto
    objAntecipPag.lNumero = tMovContaCorrente.lNumero
    objAntecipPag.sHistorico = tMovContaCorrente.sHistorico
    objAntecipPag.sNatureza = tMovContaCorrente.sNatureza

    Call Comando_Fechar(lComando)

    AntecipPag_Movto_Le = SUCESSO

    Exit Function

Erro_AntecipPag_Movto_Le:

    AntecipPag_Movto_Le = Err

    Select Case Err

        Case 15391
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 15392, 15393
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ANTECIPPAG", Err, objAntecipPag.lNumIntPag)

        Case 15394
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148553)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function AntecipRec_Movto_Le(ByVal objAntecipReceb As ClassAntecipReceb) As Long
'Lê os dados do Recebimento antecipado nas tabelas RecebAntecipados e MovimentosContaCorrente

Dim lErro As Long
Dim lComando As Long
Dim tAntecipRec As typeAntecipRec
Dim tMovContaCorrente As typeMovContaCorrente
Dim sNumRefExterna As String
Dim sHistorico As String

On Error GoTo Erro_AntecipRec_Movto_Le

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 15483

    sNumRefExterna = String(STRING_NUMREFEXTERNA, 0)
    sHistorico = String(STRING_HISTORICOMOVCONTA, 0)
    tMovContaCorrente.sNatureza = String(STRING_NATMOVCTA_CODIGO, 0)
    
    'Lê o Recebimento antecipado com o código passado como Parâmetro
    lErro = Comando_Executar(lComando, "SELECT RecebAntecipados.Cliente, RecebAntecipados.Filial_Cliente, RecebAntecipados.NumMovto, MovimentosContaCorrente.CodConta, MovimentosContaCorrente.Sequencial, MovimentosContaCorrente.DataMovimento, MovimentosContaCorrente.Valor, MovimentosContaCorrente.TipoMeioPagto, MovimentosContaCorrente.NumRefExterna, MovimentosContaCorrente.Historico, MovimentosContaCorrente.Natureza, RecebAntecipados.SaldoNaoApropriado FROM MovimentosContaCorrente, RecebAntecipados WHERE RecebAntecipados.NumIntRec = ? AND MovimentosContaCorrente.NumMovto = RecebAntecipados.NumMovto ", tAntecipRec.lCliente, tAntecipRec.iFilial_Cliente, tAntecipRec.lNumMovto, tMovContaCorrente.iCodConta, tMovContaCorrente.lSequencial, tMovContaCorrente.dtDataMovimento, tMovContaCorrente.dValor, tMovContaCorrente.iTipoMeioPagto, sNumRefExterna, sHistorico, tMovContaCorrente.sNatureza, tAntecipRec.dSaldoNaoApropriado, objAntecipReceb.lNumIntRec)
    If lErro <> AD_SQL_SUCESSO Then Error 15484
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 15485

    'Se o Recebimento antecipado não está cadastrado
    If lErro = AD_SQL_SEM_DADOS Then Error 15486

    'Armazena em objAntecipRec
    objAntecipReceb.lCliente = tAntecipRec.lCliente
    objAntecipReceb.iFilial = tAntecipRec.iFilial_Cliente
    objAntecipReceb.iCodConta = tMovContaCorrente.iCodConta
    objAntecipReceb.lSequencial = tMovContaCorrente.lSequencial
    objAntecipReceb.dtData = tMovContaCorrente.dtDataMovimento
    objAntecipReceb.dValor = tMovContaCorrente.dValor
    objAntecipReceb.iTipoMeioPagto = tMovContaCorrente.iTipoMeioPagto
    objAntecipReceb.sNumRefExterna = sNumRefExterna
    objAntecipReceb.sHistorico = sHistorico
    objAntecipReceb.sNatureza = tMovContaCorrente.sNatureza
    objAntecipReceb.dSaldoNaoApropriado = tAntecipRec.dSaldoNaoApropriado
    objAntecipReceb.lNumMovto = tAntecipRec.lNumMovto
    objAntecipReceb.iExcluido = tAntecipRec.iExcluido

    Call Comando_Fechar(lComando)

    AntecipRec_Movto_Le = SUCESSO

    Exit Function

Erro_AntecipRec_Movto_Le:

    AntecipRec_Movto_Le = Err

    Select Case Err

        Case 15483
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 15484, 15485
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ANTECIPREC", Err, objAntecipReceb.lNumIntRec)

        Case 15486
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148554)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function CreditoPagar_Le(ByVal objCreditoPagar As ClassCreditoPagar, Optional ByVal iExclusao As Integer = 0) As Long
'Lê o Crédito a Pagar a partir da chave fornecida em objCreditoPagar. Retorna os dados em objCreditoPagar

Dim lComando As Long
Dim lErro As Long
Dim tCreditoPagar As typeCreditoPagar

On Error GoTo Erro_CreditoPagar_Le

    tCreditoPagar.sSiglaDocumento = String(STRING_CRED_PAG_SIGLA, 0)
    tCreditoPagar.sObservacao = String(STRING_CRED_PAG_OBS, 0)

    'Abertura comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 17068

    If iExclusao = 1 Then

        'Pega os dados da tabela CreditosPagForn
        lErro = Comando_Executar(lComando, "SELECT FilialEmpresa, Fornecedor, Filial, SiglaDocumento, NumTitulo, DataEmissao, Status, Saldo, ValorTotal, ValorSeguro, ValorFrete, OutrasDespesas, ValorProdutos, ValorICMS, ValorICMSSubst, DebitoICMS, ValorIPI, DebitoIPI, ValorIRRF, Observacao, PISRetido, COFINSRetido, CSLLRetido FROM CreditosPagForn WHERE NumIntDoc = ? ", _
            tCreditoPagar.iFilialEmpresa, tCreditoPagar.lFornecedor, tCreditoPagar.iFilial, tCreditoPagar.sSiglaDocumento, tCreditoPagar.lNumTitulo, tCreditoPagar.dtDataEmissao, tCreditoPagar.iStatus, tCreditoPagar.dSaldo, tCreditoPagar.dValorTotal, tCreditoPagar.dValorSeguro, tCreditoPagar.dValorFrete, tCreditoPagar.dOutrasDespesas, tCreditoPagar.dValorProdutos, tCreditoPagar.dValorICMS, tCreditoPagar.dValorICMSSubst, tCreditoPagar.iDebitoICMS, tCreditoPagar.dValorIPI, tCreditoPagar.iDebitoIPI, tCreditoPagar.dValorIRRF, tCreditoPagar.sObservacao, tCreditoPagar.dPISRetido, tCreditoPagar.dCOFINSRetido, tCreditoPagar.dCSLLRetido, objCreditoPagar.lNumIntDoc)
        If lErro <> AD_SQL_SUCESSO Then Error 17069

    Else

        'Pega os dados da tabela CreditosPagForn
        lErro = Comando_Executar(lComando, "SELECT FilialEmpresa, Fornecedor, Filial, SiglaDocumento, NumTitulo, DataEmissao, Status, Saldo, ValorTotal, ValorSeguro, ValorFrete, OutrasDespesas, ValorProdutos, ValorICMS, ValorICMSSubst, DebitoICMS, ValorIPI, DebitoIPI, ValorIRRF, Observacao, PISRetido, COFINSRetido, CSLLRetido FROM CreditosPagForn WHERE NumIntDoc = ? AND Status <> ?", _
            tCreditoPagar.iFilialEmpresa, tCreditoPagar.lFornecedor, tCreditoPagar.iFilial, tCreditoPagar.sSiglaDocumento, tCreditoPagar.lNumTitulo, tCreditoPagar.dtDataEmissao, tCreditoPagar.iStatus, tCreditoPagar.dSaldo, tCreditoPagar.dValorTotal, tCreditoPagar.dValorSeguro, tCreditoPagar.dValorFrete, tCreditoPagar.dOutrasDespesas, tCreditoPagar.dValorProdutos, tCreditoPagar.dValorICMS, tCreditoPagar.dValorICMSSubst, tCreditoPagar.iDebitoICMS, tCreditoPagar.dValorIPI, tCreditoPagar.iDebitoIPI, tCreditoPagar.dValorIRRF, tCreditoPagar.sObservacao, tCreditoPagar.dPISRetido, tCreditoPagar.dCOFINSRetido, tCreditoPagar.dCSLLRetido, objCreditoPagar.lNumIntDoc, STATUS_EXCLUIDO)
        If lErro <> AD_SQL_SUCESSO Then Error 17069

    End If
    
    'Tenta ler
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 17070

    'Não encontrou ==> Erro
    If lErro = AD_SQL_SEM_DADOS Then Error 17071

    'Preenche objCreditoPagar
    objCreditoPagar.iFilialEmpresa = tCreditoPagar.iFilialEmpresa
    objCreditoPagar.lFornecedor = tCreditoPagar.lFornecedor
    objCreditoPagar.iFilial = tCreditoPagar.iFilial
    objCreditoPagar.sSiglaDocumento = tCreditoPagar.sSiglaDocumento
    objCreditoPagar.lNumTitulo = tCreditoPagar.lNumTitulo
    objCreditoPagar.dtDataEmissao = tCreditoPagar.dtDataEmissao
    objCreditoPagar.iStatus = tCreditoPagar.iStatus
    objCreditoPagar.dSaldo = tCreditoPagar.dSaldo
    objCreditoPagar.dValorTotal = tCreditoPagar.dValorTotal
    objCreditoPagar.dValorSeguro = tCreditoPagar.dValorSeguro
    objCreditoPagar.dValorFrete = tCreditoPagar.dValorFrete
    objCreditoPagar.dOutrasDespesas = tCreditoPagar.dOutrasDespesas
    objCreditoPagar.dValorProdutos = tCreditoPagar.dValorProdutos
    objCreditoPagar.dValorICMS = tCreditoPagar.dValorICMS
    objCreditoPagar.dValorICMSSubst = tCreditoPagar.dValorICMSSubst
    objCreditoPagar.iDebitoICMS = tCreditoPagar.iDebitoICMS
    objCreditoPagar.dValorIPI = tCreditoPagar.dValorIPI
    objCreditoPagar.iDebitoIPI = tCreditoPagar.iDebitoIPI
    objCreditoPagar.dValorIRRF = tCreditoPagar.dValorIRRF
    objCreditoPagar.sObservacao = tCreditoPagar.sObservacao
    objCreditoPagar.dPISRetido = tCreditoPagar.dPISRetido
    objCreditoPagar.dCOFINSRetido = tCreditoPagar.dCOFINSRetido
    objCreditoPagar.dCSLLRetido = tCreditoPagar.dCSLLRetido
    
    'Fechamento comando
    Call Comando_Fechar(lComando)

    CreditoPagar_Le = SUCESSO

    Exit Function

Erro_CreditoPagar_Le:

    CreditoPagar_Le = Err

    Select Case Err

        Case 17068
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 17069, 17070
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CREDITOSPAGFORN1", Err, objCreditoPagar.lNumIntDoc)

        Case 17071
            'Não encontrou Devoluções / Crédito. Erro tratado na rotina chamadora.

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148555)

    End Select

    'Fechamento comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function CreditoPagar_Le_Numero(ByVal objCreditoPagar As ClassCreditoPagar) As Long
'Lê Crédito a Pagar para a filialempresa corrente na tabela de Créditos a Pagar Fornecedor a partir do número dos campos: fornecedor, filial, sigla, num título, data de emissao

Dim lErro As Long
Dim lComando As Long
Dim tCreditoPagar As typeCreditoPagar

On Error GoTo Erro_Creditopagar_Le_Numero

    tCreditoPagar.sObservacao = String(STRING_CRED_PAG_OBS, 0)

    'Abertura comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 17170

    'Verifica se o Crédito a Pagar existe
    lErro = Comando_Executar(lComando, "SELECT  NumIntDoc, Status, Saldo, ValorTotal, ValorSeguro, ValorFrete, OutrasDespesas, ValorProdutos, ValorICMS, ValorICMSSubst, DebitoICMS, ValorIPI, DebitoIPI, ValorIRRF, Observacao, PISRetido, COFINSRetido, CSLLRetido FROM CreditosPagForn WHERE FilialEmpresa = ? AND Fornecedor = ? AND Filial = ? AND SiglaDocumento = ? AND NumTitulo = ? AND DataEmissao = ? AND Status <> ?", _
        tCreditoPagar.lNumIntDoc, tCreditoPagar.iStatus, tCreditoPagar.dSaldo, tCreditoPagar.dValorTotal, tCreditoPagar.dValorSeguro, tCreditoPagar.dValorFrete, tCreditoPagar.dOutrasDespesas, tCreditoPagar.dValorProdutos, tCreditoPagar.dValorICMS, tCreditoPagar.dValorICMSSubst, tCreditoPagar.iDebitoICMS, tCreditoPagar.dValorIPI, tCreditoPagar.iDebitoIPI, tCreditoPagar.dValorIRRF, tCreditoPagar.sObservacao, tCreditoPagar.dPISRetido, tCreditoPagar.dCOFINSRetido, tCreditoPagar.dCSLLRetido, giFilialEmpresa, objCreditoPagar.lFornecedor, objCreditoPagar.iFilial, objCreditoPagar.sSiglaDocumento, objCreditoPagar.lNumTitulo, objCreditoPagar.dtDataEmissao, STATUS_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then Error 17168

    'Lê o Crédito a Pagar, se estiver no BD
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 17169

    'Crédito a Pagar não existe no BD
    If lErro = AD_SQL_SEM_DADOS Then Error 17172

    objCreditoPagar.lNumIntDoc = tCreditoPagar.lNumIntDoc
    objCreditoPagar.iStatus = tCreditoPagar.iStatus
    objCreditoPagar.dSaldo = tCreditoPagar.dSaldo
    objCreditoPagar.dValorTotal = tCreditoPagar.dValorTotal
    objCreditoPagar.dValorSeguro = tCreditoPagar.dValorSeguro
    objCreditoPagar.dValorFrete = tCreditoPagar.dValorFrete
    objCreditoPagar.dOutrasDespesas = tCreditoPagar.dOutrasDespesas
    objCreditoPagar.dValorProdutos = tCreditoPagar.dValorProdutos
    objCreditoPagar.dValorICMS = tCreditoPagar.dValorICMS
    objCreditoPagar.dValorICMSSubst = tCreditoPagar.dValorICMSSubst
    objCreditoPagar.iDebitoICMS = tCreditoPagar.iDebitoICMS
    objCreditoPagar.dValorIPI = tCreditoPagar.dValorIPI
    objCreditoPagar.iDebitoIPI = tCreditoPagar.iDebitoIPI
    objCreditoPagar.dValorIRRF = tCreditoPagar.dValorIRRF
    objCreditoPagar.sObservacao = tCreditoPagar.sObservacao
    objCreditoPagar.dPISRetido = tCreditoPagar.dPISRetido
    objCreditoPagar.dCOFINSRetido = tCreditoPagar.dCOFINSRetido
    objCreditoPagar.dCSLLRetido = tCreditoPagar.dCSLLRetido

    Call Comando_Fechar(lComando)

    CreditoPagar_Le_Numero = SUCESSO

    Exit Function

Erro_Creditopagar_Le_Numero:

    CreditoPagar_Le_Numero = Err

    Select Case Err

        Case 17168, 17169
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CREDITOSPAGFORN", Err, objCreditoPagar.lFornecedor, objCreditoPagar.iFilial, objCreditoPagar.sSiglaDocumento, objCreditoPagar.lNumTitulo, objCreditoPagar.dtDataEmissao)

        Case 17170
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 17172
            'Não encontrou Devolução/Crédito. Erro tratado na rotina chamadora.
    
         Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148556)

    End Select

    'Fechamento comando
    Call Comando_Fechar(lComando)

End Function

Function NFPag_Le(ByVal objNFPag As ClassNFsPag, Optional ByVal iExclusao As Integer = 0) As Long
'Retorna os dados da Nota Fiscal com nº interno passado como parametro

Dim lErro As Long
Dim lComando As Long
Dim tNFsPag As typeNFsPag

On Error GoTo Erro_NFPag_Le

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 18254

    tNFsPag.sHistorico = String(STRING_NFSPAG_HISTORICO, 0)

    If iExclusao = 1 Then

        'Procura a Nota com o NumIntDoc passado como parametro
        lErro = Comando_Executar(lComando, "SELECT FilialEmpresa, Fornecedor, Filial, NumNotaFiscal, DataEmissao, Status, NumIntTitPag, DataVencimento, ValorTotal, ValorSeguro, ValorFrete, OutrasDespesas, ValorProdutos, ValorIRRF, ValorICMS, ValorICMSSubst, CreditoICMS, ValorIPI, CreditoIPI, PISRetido, ISSRetido, COFINSRetido, CSLLRetido, TaxaMoeda, Historico, ISSRetido, INSSRetido, ValorINSS FROM NFsPag WHERE NumIntDoc = ?", tNFsPag.iFilialEmpresa, tNFsPag.lFornecedor, tNFsPag.iFilial, tNFsPag.lNumNotaFiscal, tNFsPag.dtDataEmissao, tNFsPag.iStatus, tNFsPag.lNumIntTitPag, tNFsPag.dtDataVencimento, tNFsPag.dValorTotal, tNFsPag.dValorSeguro, tNFsPag.dValorFrete, tNFsPag.dOutrasDespesas, tNFsPag.dValorProdutos, tNFsPag.dValorIRRF, tNFsPag.dValorICMS, tNFsPag.dValorICMSSubst, tNFsPag.iCreditoICMS, tNFsPag.dValorIPI, tNFsPag.iCreditoIPI, tNFsPag.dPISRetido, tNFsPag.dISSRetido, tNFsPag.dCOFINSRetido, tNFsPag.dCSLLRetido, tNFsPag.dTaxaMoeda, tNFsPag.sHistorico, _
        tNFsPag.dISSRetido, tNFsPag.iINSSRetido, tNFsPag.dValorINSS, objNFPag.lNumIntDoc)
        If lErro <> AD_SQL_SUCESSO Then Error 18255

    Else
    
        'Procura a Nota com o NumIntDoc passado como parametro
        lErro = Comando_Executar(lComando, "SELECT FilialEmpresa, Fornecedor, Filial, NumNotaFiscal, DataEmissao, Status, NumIntTitPag, DataVencimento, ValorTotal, ValorSeguro, ValorFrete, OutrasDespesas, ValorProdutos, ValorIRRF, ValorICMS, ValorICMSSubst, CreditoICMS, ValorIPI, CreditoIPI, PISRetido, ISSRetido, COFINSRetido, CSLLRetido, TaxaMoeda, Historico, ISSRetido, INSSRetido, ValorINSS FROM NFsPag WHERE NumIntDoc = ? AND Status <> ?", tNFsPag.iFilialEmpresa, tNFsPag.lFornecedor, tNFsPag.iFilial, tNFsPag.lNumNotaFiscal, tNFsPag.dtDataEmissao, tNFsPag.iStatus, tNFsPag.lNumIntTitPag, tNFsPag.dtDataVencimento, tNFsPag.dValorTotal, tNFsPag.dValorSeguro, tNFsPag.dValorFrete, tNFsPag.dOutrasDespesas, tNFsPag.dValorProdutos, tNFsPag.dValorIRRF, tNFsPag.dValorICMS, tNFsPag.dValorICMSSubst, tNFsPag.iCreditoICMS, tNFsPag.dValorIPI, tNFsPag.iCreditoIPI, tNFsPag.dPISRetido, tNFsPag.dISSRetido, tNFsPag.dCOFINSRetido, tNFsPag.dCSLLRetido, tNFsPag.dTaxaMoeda, tNFsPag.sHistorico, _
        tNFsPag.dISSRetido, tNFsPag.iINSSRetido, tNFsPag.dValorINSS, objNFPag.lNumIntDoc, STATUS_EXCLUIDO)
        If lErro <> AD_SQL_SUCESSO Then Error 18255
    
    End If
    
    'Le a nota
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 18256

    'Se não existe erro
    If lErro = AD_SQL_SEM_DADOS Then Error 18257

    'Passa para objNFPag os dados Lidos
    objNFPag.iFilialEmpresa = tNFsPag.iFilialEmpresa
    objNFPag.lFornecedor = tNFsPag.lFornecedor
    objNFPag.iFilial = tNFsPag.iFilial
    objNFPag.lNumNotaFiscal = tNFsPag.lNumNotaFiscal
    objNFPag.dtDataEmissao = tNFsPag.dtDataEmissao
    objNFPag.iStatus = tNFsPag.iStatus
    objNFPag.lNumIntTitPag = tNFsPag.lNumIntTitPag
    objNFPag.dtDataVencimento = tNFsPag.dtDataVencimento
    objNFPag.dValorTotal = tNFsPag.dValorTotal
    objNFPag.dValorSeguro = tNFsPag.dValorSeguro
    objNFPag.dValorFrete = tNFsPag.dValorFrete
    objNFPag.dOutrasDespesas = tNFsPag.dOutrasDespesas
    objNFPag.dValorProdutos = tNFsPag.dValorProdutos
    objNFPag.dValorIRRF = tNFsPag.dValorIRRF
    objNFPag.dValorICMS = tNFsPag.dValorICMS
    objNFPag.dValorICMSSubst = tNFsPag.dValorICMSSubst
    objNFPag.iCreditoICMS = tNFsPag.iCreditoICMS
    objNFPag.dValorIPI = tNFsPag.dValorIPI
    objNFPag.iCreditoIPI = tNFsPag.iCreditoIPI
    objNFPag.dPISRetido = tNFsPag.dPISRetido
    objNFPag.dISSRetido = tNFsPag.dISSRetido
    objNFPag.dCOFINSRetido = tNFsPag.dCOFINSRetido
    objNFPag.dCSLLRetido = tNFsPag.dCSLLRetido
    objNFPag.dTaxaMoeda = tNFsPag.dTaxaMoeda
    objNFPag.sHistorico = tNFsPag.sHistorico

    objNFPag.dISSRetido = tNFsPag.dISSRetido
    objNFPag.iINSSRetido = tNFsPag.iINSSRetido
    objNFPag.dValorINSS = tNFsPag.dValorINSS

    Call Comando_Fechar(lComando)

    NFPag_Le = SUCESSO

    Exit Function

Erro_NFPag_Le:

    NFPag_Le = Err

    Select Case Err

        Case 18254
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 18255, 18256
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFSPAG1", Err, objNFPag.lNumNotaFiscal)

        Case 18257  'Será tratado na rotina chamadora

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, 148557)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function NFPag_Le_Numero(ByVal objNFsPag As ClassNFsPag) As Long
'Le os dados da Nota Fiscal com o Fornecedor, Filial, Numero Nota Fiscal e Data de Emissão passados por parametro

Dim lErro As Long
Dim lComando As Long
Dim tNFsPag As typeNFsPag
Dim iFilialEmpresa As Integer

On Error GoTo Erro_NFPag_Le_Numero

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 18335
    
    tNFsPag.sHistorico = String(STRING_NFSPAG_HISTORICO, 0)
    
    If objNFsPag.iFilialEmpresa = 0 Then
        iFilialEmpresa = giFilialEmpresa
    Else
        iFilialEmpresa = objNFsPag.iFilialEmpresa
    End If
    
    'Seleciona a nota com os dados passados
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc, Status, NumIntTitPag, DataVencimento, ValorTotal, ValorSeguro, ValorFrete, OutrasDespesas, ValorProdutos, ValorIRRF, ValorICMS, ValorICMSSubst, CreditoICMS, ValorIPI, CreditoIPI, PISRetido, ISSRetido, COFINSRetido, CSLLRetido, TaxaMoeda, Historico, ISSRetido, INSSRetido, ValorINSS FROM NFsPag WHERE Fornecedor = ? AND Filial = ? AND NumNotaFiscal = ? AND DataEmissao = ? AND FilialEmpresa = ? AND Status <> ? ", tNFsPag.lNumIntDoc, tNFsPag.iStatus, tNFsPag.lNumIntTitPag, tNFsPag.dtDataVencimento, tNFsPag.dValorTotal, tNFsPag.dValorSeguro, tNFsPag.dValorFrete, tNFsPag.dOutrasDespesas, tNFsPag.dValorProdutos, tNFsPag.dValorIRRF, tNFsPag.dValorICMS, tNFsPag.dValorICMSSubst, tNFsPag.iCreditoICMS, tNFsPag.dValorIPI, tNFsPag.iCreditoIPI, tNFsPag.dPISRetido, tNFsPag.dISSRetido, tNFsPag.dCOFINSRetido, tNFsPag.dCSLLRetido, tNFsPag.dTaxaMoeda, tNFsPag.sHistorico, tNFsPag.dISSRetido, tNFsPag.iINSSRetido, tNFsPag.dValorINSS, _
    objNFsPag.lFornecedor, objNFsPag.iFilial, objNFsPag.lNumNotaFiscal, objNFsPag.dtDataEmissao, iFilialEmpresa, STATUS_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then Error 18336
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 18337
    
    'Se nao encontra erro
    If lErro = AD_SQL_SEM_DADOS Then Error 18338
    
    'Preenche o objNFsPag
    objNFsPag.lNumIntDoc = tNFsPag.lNumIntDoc
    objNFsPag.iFilialEmpresa = iFilialEmpresa
    objNFsPag.iStatus = tNFsPag.iStatus
    objNFsPag.lNumIntTitPag = tNFsPag.lNumIntTitPag
    objNFsPag.dtDataVencimento = tNFsPag.dtDataVencimento
    objNFsPag.dValorTotal = tNFsPag.dValorTotal
    objNFsPag.dValorSeguro = tNFsPag.dValorSeguro
    objNFsPag.dValorFrete = tNFsPag.dValorFrete
    objNFsPag.dOutrasDespesas = tNFsPag.dOutrasDespesas
    objNFsPag.dValorProdutos = tNFsPag.dValorProdutos
    objNFsPag.dValorIRRF = tNFsPag.dValorIRRF
    objNFsPag.dValorICMS = tNFsPag.dValorICMS
    objNFsPag.dValorICMSSubst = tNFsPag.dValorICMSSubst
    objNFsPag.iCreditoICMS = tNFsPag.iCreditoICMS
    objNFsPag.dValorIPI = tNFsPag.dValorIPI
    objNFsPag.iCreditoIPI = tNFsPag.iCreditoIPI
    objNFsPag.dPISRetido = tNFsPag.dPISRetido
    objNFsPag.dISSRetido = tNFsPag.dISSRetido
    objNFsPag.dCOFINSRetido = tNFsPag.dCOFINSRetido
    objNFsPag.dCSLLRetido = tNFsPag.dCSLLRetido
    objNFsPag.dTaxaMoeda = tNFsPag.dTaxaMoeda
    objNFsPag.sHistorico = tNFsPag.sHistorico
    
    objNFsPag.dISSRetido = tNFsPag.dISSRetido
    objNFsPag.iINSSRetido = tNFsPag.iINSSRetido
    objNFsPag.dValorINSS = tNFsPag.dValorINSS
    
    Call Comando_Fechar(lComando)
    
    NFPag_Le_Numero = SUCESSO
    
    Exit Function
    
Erro_NFPag_Le_Numero:

    NFPag_Le_Numero = Err
    
    Select Case Err
    
        Case 18335
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
            
        Case 18336, 18337
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFSPAG1", Err, objNFsPag.lNumNotaFiscal)
        
        Case 18338  'Erro tratado na rotina chamadora
                
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148558)

    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function
    
End Function

Function NFPagBaixada_Le_Numero(ByVal objNFsPag As ClassNFsPag) As Long
'Retorna os dados da nota fiscal com Fornecedor, Filial, NumNotaFiscal e DataEmissao passados passado por parametro

Dim lErro As Long
Dim lComando As Long
Dim tNFsPag As typeNFsPag
Dim iFilialEmpresa As Integer

On Error GoTo Erro_NFPagBaixada_Le_Numero

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 18341
    
    If objNFsPag.iFilialEmpresa = 0 Then
        iFilialEmpresa = giFilialEmpresa
    Else
        iFilialEmpresa = objNFsPag.iFilialEmpresa
    End If
    
    tNFsPag.sHistorico = String(STRING_NFSPAG_HISTORICO, 0)
    
    'Pesquisa a nota com os dados dos parametros
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc, Status, NumIntTitPag, DataVencimento, ValorTotal, ValorSeguro, ValorFrete, OutrasDespesas, ValorProdutos, ValorIRRF, ValorICMS, ValorICMSSubst, CreditoICMS, ValorIPI, CreditoIPI, PISRetido, ISSRetido, COFINSRetido, CSLLRetido, TaxaMoeda, Historico, ISSRetido, INSSRetido, ValorINSS FROM NFsPagBaixadas WHERE Fornecedor = ? AND Filial = ? AND NumNotaFiscal = ? AND DataEmissao = ? AND FilialEmpresa = ? AND Status <> ? ", tNFsPag.lNumIntDoc, tNFsPag.iStatus, tNFsPag.lNumIntTitPag, tNFsPag.dtDataVencimento, tNFsPag.dValorTotal, tNFsPag.dValorSeguro, tNFsPag.dValorFrete, tNFsPag.dOutrasDespesas, tNFsPag.dValorProdutos, tNFsPag.dValorIRRF, tNFsPag.dValorICMS, tNFsPag.dValorICMSSubst, tNFsPag.iCreditoICMS, tNFsPag.dValorIPI, tNFsPag.iCreditoIPI, tNFsPag.dPISRetido, tNFsPag.dISSRetido, tNFsPag.dCOFINSRetido, tNFsPag.dCSLLRetido, tNFsPag.dTaxaMoeda, tNFsPag.sHistorico, tNFsPag.dISSRetido, tNFsPag.iINSSRetido, tNFsPag.dValorINSS, _
    objNFsPag.lFornecedor, objNFsPag.iFilial, objNFsPag.lNumNotaFiscal, objNFsPag.dtDataEmissao, iFilialEmpresa, STATUS_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then Error 18342
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 18343
    
    'NÃo encontrou
    If lErro = AD_SQL_SEM_DADOS Then Error 18344
    
    'Preenche o objNFsPag
    objNFsPag.lNumIntDoc = tNFsPag.lNumIntDoc
    objNFsPag.iFilialEmpresa = iFilialEmpresa
    objNFsPag.iStatus = tNFsPag.iStatus
    objNFsPag.lNumIntTitPag = tNFsPag.lNumIntTitPag
    objNFsPag.dtDataVencimento = tNFsPag.dtDataVencimento
    objNFsPag.dValorTotal = tNFsPag.dValorTotal
    objNFsPag.dValorSeguro = tNFsPag.dValorSeguro
    objNFsPag.dValorFrete = tNFsPag.dValorFrete
    objNFsPag.dOutrasDespesas = tNFsPag.dOutrasDespesas
    objNFsPag.dValorProdutos = tNFsPag.dValorProdutos
    objNFsPag.dValorIRRF = tNFsPag.dValorIRRF
    objNFsPag.dValorICMS = tNFsPag.dValorICMS
    objNFsPag.dValorICMSSubst = tNFsPag.dValorICMSSubst
    objNFsPag.iCreditoICMS = tNFsPag.iCreditoICMS
    objNFsPag.dValorIPI = tNFsPag.dValorIPI
    objNFsPag.iCreditoIPI = tNFsPag.iCreditoIPI
    objNFsPag.dPISRetido = tNFsPag.dPISRetido
    objNFsPag.dISSRetido = tNFsPag.dISSRetido
    objNFsPag.dCOFINSRetido = tNFsPag.dCOFINSRetido
    objNFsPag.dCSLLRetido = tNFsPag.dCSLLRetido
    objNFsPag.dTaxaMoeda = tNFsPag.dTaxaMoeda
    objNFsPag.sHistorico = tNFsPag.sHistorico
    
    objNFsPag.dISSRetido = tNFsPag.dISSRetido
    objNFsPag.iINSSRetido = tNFsPag.iINSSRetido
    objNFsPag.dValorINSS = tNFsPag.dValorINSS
    
    Call Comando_Fechar(lComando)
    
    NFPagBaixada_Le_Numero = SUCESSO
    
    Exit Function
    
Erro_NFPagBaixada_Le_Numero:

    NFPagBaixada_Le_Numero = Err
    
    Select Case Err
    
        Case 18341
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
            
        Case 18342, 18343
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFSPAGBAIXADAS", Err, objNFsPag.lNumNotaFiscal)
        
        Case 18344 ' Erro tratado na rotina chamadora
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148559)

    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function
    
End Function

Function Fornecedores_Le_Tipo(ByVal iTipo As Integer) As Long
'Verifica se existem fornecedores do Tipo (de Fornecedor) passado como parametro

Dim lErro As Long
Dim lComando As Long
Dim iTipo1 As Integer

On Error GoTo Erro_Fornecedores_Le_Tipo

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 16345

    'pesquisa Fornecedores no BD
    lErro = Comando_Executar(lComando, "SELECT Tipo FROM Fornecedores WHERE Tipo = ? ", iTipo1, iTipo)
    If lErro <> AD_SQL_SUCESSO Then Error 16346

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 16347

    If lErro = AD_SQL_SEM_DADOS Then Error 16348

    lErro = Comando_Fechar(lComando)

    Fornecedores_Le_Tipo = SUCESSO

    Exit Function

Erro_Fornecedores_Le_Tipo:

    Fornecedores_Le_Tipo = Err

    Select Case Err

        Case 16345
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 16346, 16347
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FORNECEDORES", Err)

        Case 16348

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148560)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function Resgate_Le_Todos(ByVal objResgate As ClassResgate, ByVal colCodigo As Collection) As Long
'Le todos os codigos de resgates referentes ao codigo da aplicacao passado em objResgate e coloca-os na colecao
'??? o primeiro parametro deveria ser objAplicacao em vez de objResgate
Dim lErro As Long
Dim tResgate As typeResgate
Dim lComando As Long

On Error GoTo Erro_Resgate_Le_Todos

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 17513

    'Le todos os resgates da aplicacao
    lErro = Comando_Executar(lComando, "SELECT SeqResgate FROM Resgates WHERE CodigoAplicacao = ?", tResgate.iSeqResgate, objResgate.lCodigoAplicacao)
    If lErro <> AD_SQL_SUCESSO Then Error 17514

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 17515

    'Passa todos para a colecao
    Do While lErro = AD_SQL_SUCESSO
    
        Set objResgate = New ClassResgate

        objResgate.iSeqResgate = tResgate.iSeqResgate

        colCodigo.Add objResgate

        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 17516

    Loop

    Resgate_Le_Todos = SUCESSO

    Call Comando_Fechar(lComando)

    Exit Function

Erro_Resgate_Le_Todos:

    Resgate_Le_Todos = Err

    Select Case Err

        Case 17513
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 17514, 17515, 17516
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RESGATES", Err, objResgate.lCodigoAplicacao)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148561)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function Resgate_Le(ByVal objResgate As ClassResgate) As Long
'Le o resgate a partir da chave fornecida em objResgate. Devolve os dados em objResgate

Dim lComando1 As Long
Dim lErro As Long
Dim tResgate As typeResgate

On Error GoTo Erro_Resgate_Le

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 17496

    'Pega os dados da tabela Resgates
    lErro = Comando_Executar(lComando1, "SELECT Status, NumMovto, ValorResgatado, Rendimentos, ValorIRRF, Descontos, SaldoAnterior FROM Resgates WHERE SeqResgate =? And CodigoAplicacao = ?", _
    tResgate.iStatus, tResgate.lNumMovto, tResgate.dValorResgatado, tResgate.dRendimentos, tResgate.dValorIRRF, tResgate.dDescontos, tResgate.dSaldoAnterior, objResgate.iSeqResgate, objResgate.lCodigoAplicacao)
    If lErro <> AD_SQL_SUCESSO Then Error 17497

    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 17498

    If lErro = AD_SQL_SEM_DADOS Then Error 17499
    
    objResgate.iStatus = tResgate.iStatus
    objResgate.lNumMovto = tResgate.lNumMovto
    objResgate.dValorResgatado = tResgate.dValorResgatado
    objResgate.dRendimentos = tResgate.dRendimentos
    objResgate.dValorIRRF = tResgate.dValorIRRF
    objResgate.dDescontos = tResgate.dDescontos
    objResgate.dSaldoAnterior = tResgate.dSaldoAnterior

    lErro = Comando_Fechar(lComando1)

    Resgate_Le = SUCESSO

Exit Function

Erro_Resgate_Le:

    Resgate_Le = Err

    Select Case Err

        Case 17496
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 17497, 17498
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RESGATES", Err, objResgate.lCodigoAplicacao)

        Case 17499

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148562)

    End Select

    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Function Aplicacao_Le(ByVal objAplicacao As ClassAplicacao) As Long
'le a Aplicacao a partir da chave(lCodigo) fornecida em objAplicacao. Devolve os dados em objAplicacao

Dim lComando1 As Long
Dim lErro As Long
Dim tAplicacao As typeAplicacao

On Error GoTo Erro_Aplicacao_Le

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 17242

    'Pega os dados da tabela Aplicacoes
    lErro = Comando_Executar(lComando1, "SELECT Status, TipoAplicacao, NumMovto, SaldoAplicado, DataResgatePrevista, ValorResgatePrevisto, TaxaPrevista, ProxSeqResgate, DataAplicacao, ValorAplicado FROM Aplicacoes WHERE Codigo = ?", _
        tAplicacao.iStatus, tAplicacao.iTipoAplicacao, tAplicacao.lNumMovto, tAplicacao.dSaldoAplicado, tAplicacao.dtDataResgatePrevista, tAplicacao.dValorResgatePrevisto, tAplicacao.dTaxaPrevista, tAplicacao.iProxSeqResgate, tAplicacao.dtDataAplicacao, tAplicacao.dValorAplicado, objAplicacao.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 17239

    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 17240

    If lErro = AD_SQL_SEM_DADOS Then Error 17241

    objAplicacao.iStatus = tAplicacao.iStatus
    objAplicacao.iTipoAplicacao = tAplicacao.iTipoAplicacao
    objAplicacao.lNumMovto = tAplicacao.lNumMovto
    objAplicacao.dSaldoAplicado = tAplicacao.dSaldoAplicado
    objAplicacao.dtDataResgatePrevista = tAplicacao.dtDataResgatePrevista
    objAplicacao.dValorResgatePrevisto = tAplicacao.dValorResgatePrevisto
    objAplicacao.dTaxaPrevista = tAplicacao.dTaxaPrevista
    objAplicacao.iProxSeqResgate = tAplicacao.iProxSeqResgate
    objAplicacao.dtDataAplicacao = tAplicacao.dtDataAplicacao
    objAplicacao.dValorAplicado = tAplicacao.dValorAplicado
    
    Call Comando_Fechar(lComando1)

    Aplicacao_Le = SUCESSO

Exit Function

Erro_Aplicacao_Le:

    Aplicacao_Le = Err

    Select Case Err

        Case 17239, 17240
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_APLICACOES2", Err, objAplicacao.lCodigo)

        Case 17241

        Case 17242
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148563)

    End Select

    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Function Fornecedor_ObterDadosBasicos(ByVal objFornecedor As ClassFornecedor, ByVal lComando As Long) As Long
'le o Fornecedor a partir da chave(lCodigo) fornecida em objFornecedor.
'Devolve os dados em objFornecedor.
'IMPORTANTE: Ao contrario de Fornecedor_Le nao obtem dados da matriz

Dim lErro As Long
Dim tFornecedor As typeFornecedor

On Error GoTo Erro_Fornecedor_ObterDadosBasicos

    tFornecedor.sRazaoSocial = String(STRING_FORNECEDOR_RAZAO_SOC, 0)
    tFornecedor.sNomeReduzido = String(STRING_FORNECEDOR_NOME_REDUZIDO, 0)
    tFornecedor.sObservacao = String(STRING_FORNECEDOR_OBS, 0)
    tFornecedor.sCgc = String(STRING_CGC, 0)
    tFornecedor.sIdEstrangeiro = String(STRING_ID_ESTRANGEIRO, 0)
    tFornecedor.sInscricaoEstadual = String(STRING_INSCR_EST, 0)
    tFornecedor.sInscricaoMunicipal = String(STRING_INSCR_MUN, 0)
    tFornecedor.sInscricaoSuframa = String(STRING_INSCR_SUF, 0)
    tFornecedor.sContaContabil = String(STRING_CONTA, 0)
    tFornecedor.sAgencia = String(STRING_AGENCIA, 0)
    tFornecedor.sContaCorrente = String(STRING_CONTA_CORRENTE, 0)
    tFornecedor.sObservacao2 = String(STRING_FILIAL_FORNECEDOR_OBS, 0)
    tFornecedor.sNatureza = String(STRING_NATMOVCTA_CODIGO, 0)

    'Pega os dados da tabela Fornecedores
    lErro = Comando_Executar(lComando, "SELECT RazaoSocial, NomeReduzido, Tipo, Observacao, CondicaoPagto, Desconto, ProxCodFilial, Ativo, Natureza FROM Fornecedores WHERE Codigo = ?", _
        tFornecedor.sRazaoSocial, tFornecedor.sNomeReduzido, tFornecedor.iTipo, tFornecedor.sObservacao, tFornecedor.iCondicaoPagto, tFornecedor.dDesconto, tFornecedor.iProxCodFilial, tFornecedor.iAtivo, tFornecedor.sNatureza, objFornecedor.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 7587

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7588

    If lErro = AD_SQL_SEM_DADOS Then Error 7589

    objFornecedor.sRazaoSocial = tFornecedor.sRazaoSocial
    objFornecedor.sNomeReduzido = tFornecedor.sNomeReduzido
    objFornecedor.iTipo = tFornecedor.iTipo
    objFornecedor.sObservacao = tFornecedor.sObservacao
    objFornecedor.iCondicaoPagto = tFornecedor.iCondicaoPagto
    objFornecedor.dDesconto = tFornecedor.dDesconto
    objFornecedor.iProxCodFilial = tFornecedor.iProxCodFilial
    objFornecedor.iAtivo = tFornecedor.iAtivo
    objFornecedor.sNatureza = tFornecedor.sNatureza

    Fornecedor_ObterDadosBasicos = SUCESSO

    Exit Function

Erro_Fornecedor_ObterDadosBasicos:

    Fornecedor_ObterDadosBasicos = Err

    Select Case Err

        Case 7587, 7588
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FORNECEDORES", Err)

        Case 7589 'Fornecedor nao cadastrado em Fornecedores
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECEDOR_INEXISTENTE", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148564)

    End Select

    Exit Function

End Function

Function Fluxo_Le(ByVal objFluxo As ClassFluxo) As Long
'le o Fluxo a partir do nome fornecido em objFluxo. Devolve os dados em objFluxo

Dim lComando1 As Long
Dim lErro As Long
Dim tFluxo As typeFluxo

On Error GoTo Erro_Fluxo_Le

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 20101

    tFluxo.sDescricao = String(STRING_FLUXO_DESCRICAO, 0)

    'Pega os dados da tabela de Fluxo
    lErro = Comando_Executar(lComando1, "SELECT Descricao, DataInicial, DataFinal, DataDadosReais, FluxoId, NumMovCta, NumIntBaixaPag, NumIntBaixaRec FROM Fluxo WHERE Fluxo = ? AND FilialEmpresa = ?", _
    tFluxo.sDescricao, tFluxo.dtDataBase, tFluxo.dtDataFinal, tFluxo.dtDataDadosReais, tFluxo.lFluxoId, tFluxo.lNumMovCta, tFluxo.lNumIntBaixaPag, tFluxo.lNumIntBaixaRec, objFluxo.sFluxo, objFluxo.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then Error 20102

    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 20103

    If lErro = AD_SQL_SEM_DADOS Then Error 20104

    objFluxo.sDescricao = tFluxo.sDescricao
    objFluxo.dtDataBase = tFluxo.dtDataBase
    objFluxo.dtDataFinal = tFluxo.dtDataFinal
    objFluxo.dtDataDadosReais = tFluxo.dtDataDadosReais
    objFluxo.lFluxoId = tFluxo.lFluxoId
    objFluxo.iFilialEmpresa = giFilialEmpresa
    objFluxo.lNumMovCta = tFluxo.lNumMovCta
    objFluxo.lNumIntBaixaPag = tFluxo.lNumIntBaixaPag
    objFluxo.lNumIntBaixaRec = tFluxo.lNumIntBaixaRec

    Call Comando_Fechar(lComando1)

    Fluxo_Le = SUCESSO

Exit Function

Erro_Fluxo_Le:

    Fluxo_Le = Err

    Select Case Err

        Case 20101
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 20102, 20103
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FLUXO", Err, objFluxo.sFluxo)

        Case 20104

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148565)

    End Select

    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Function FluxoAnalitico_Le(ByVal colFluxoAnalitico As Collection, ByVal sOrdenacao As String, ByVal lFluxoId As Long, ByVal dtData As Date, ByVal iTipoReg As Integer) As Long
'le todos os fluxos analiticos relacionados a pagamentos

Dim lNumero As Long
Dim lErro As Long
Dim tFluxoAnalitico As typeFluxoAnalitico
Dim objFluxoAnalitico As ClassFluxoAnalitico
Dim lComando As Long

On Error GoTo Erro_FluxoAnalitico_Le

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 20164
    
    tFluxoAnalitico.sNomeReduzido = String(255, 0)
    tFluxoAnalitico.sSiglaDocumento = String(STRING_SIGLA_DOCUMENTO, 0)
    tFluxoAnalitico.sTitulo = String(STRING_FLUXOANALITICO_TITULO, 0)
    
    lErro = Comando_Executar(lComando, "SELECT NomeReduzido, Filial, SiglaDocumento, NumTitulo, Item, NumParcela, Valor, NumIntDoc, DataReferencia, FilialEmpresa FROM FluxoAnalitico WHERE FluxoId = ? AND Data = ? AND TipoReg = ?" & sOrdenacao, tFluxoAnalitico.sNomeReduzido, tFluxoAnalitico.iFilial, tFluxoAnalitico.sSiglaDocumento, tFluxoAnalitico.sTitulo, tFluxoAnalitico.iItem, tFluxoAnalitico.iNumParcela, tFluxoAnalitico.dValor, tFluxoAnalitico.lNumIntDoc, tFluxoAnalitico.dtDataReferencia, tFluxoAnalitico.iFilialEmpresa, lFluxoId, dtData, iTipoReg)
    If lErro <> AD_SQL_SUCESSO Then Error 20165
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 20166
        
    Do While lErro = AD_SQL_SUCESSO
    
        Set objFluxoAnalitico = New ClassFluxoAnalitico
    
        objFluxoAnalitico.sNomeReduzido = tFluxoAnalitico.sNomeReduzido
        objFluxoAnalitico.iFilial = tFluxoAnalitico.iFilial
        objFluxoAnalitico.sSiglaDocumento = tFluxoAnalitico.sSiglaDocumento
        objFluxoAnalitico.sTitulo = tFluxoAnalitico.sTitulo
        objFluxoAnalitico.iItem = tFluxoAnalitico.iItem
        objFluxoAnalitico.iNumParcela = tFluxoAnalitico.iNumParcela
        objFluxoAnalitico.dValor = tFluxoAnalitico.dValor
        objFluxoAnalitico.lNumIntDoc = tFluxoAnalitico.lNumIntDoc
        objFluxoAnalitico.dtDataReferencia = tFluxoAnalitico.dtDataReferencia
        objFluxoAnalitico.iFilialEmpresa = tFluxoAnalitico.iFilialEmpresa
        
        colFluxoAnalitico.Add objFluxoAnalitico
        
        If colFluxoAnalitico.Count = MAX_FLUXO Then Error 20170
        
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 20167
        
    Loop
        
    Call Comando_Fechar(lComando)
    
    FluxoAnalitico_Le = SUCESSO
    
    Exit Function
        
Erro_FluxoAnalitico_Le:

    FluxoAnalitico_Le = Err
    
    Select Case Err
    
        Case 20164
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 20165, 20166, 20167
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FLUXOANALITICO", Err, lFluxoId, CStr(dtData), iTipoReg)
        
        Case 20170
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148566)
        
    End Select
    
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function FluxoForn_Le(ByVal colFluxoForn As Collection, ByVal lFluxoId As Long, ByVal dtData As Date, ByVal iTipoReg As Integer) As Long
'le o fluxo do fluxo, data e tiporeg em questão consolidado por fornecedor

Dim lNumero As Long
Dim lErro As Long
Dim tFluxoForn As typeFluxoForn
Dim objFluxoForn As ClassFluxoForn
Dim lComando As Long

On Error GoTo Erro_FluxoForn_Le

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 20202
    
    tFluxoForn.sNomeReduzido = String(255, 0)
    
    lErro = Comando_Executar(lComando, "SELECT Usuario, Fornecedor, NomeReduzido, TipoFornecedor, TotalSistema, TotalAjustado, TotalReal FROM FluxoForn WHERE FluxoId = ? AND Data = ? AND TipoReg = ? ORDER BY NomeReduzido", tFluxoForn.iUsuario, tFluxoForn.lFornecedor, tFluxoForn.sNomeReduzido, tFluxoForn.iTipoFornecedor, tFluxoForn.dTotalSistema, tFluxoForn.dTotalAjustado, tFluxoForn.dTotalReal, lFluxoId, dtData, iTipoReg)
    If lErro <> AD_SQL_SUCESSO Then Error 20203
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 20204
    
    Do While lErro = AD_SQL_SUCESSO
    
        Set objFluxoForn = New ClassFluxoForn
    
        objFluxoForn.iUsuario = tFluxoForn.iUsuario
        objFluxoForn.sNomeReduzido = tFluxoForn.sNomeReduzido
        objFluxoForn.dTotalSistema = tFluxoForn.dTotalSistema
        objFluxoForn.dTotalAjustado = tFluxoForn.dTotalAjustado
        objFluxoForn.dTotalReal = tFluxoForn.dTotalReal
        objFluxoForn.lFluxoId = lFluxoId
        objFluxoForn.dtData = dtData
        objFluxoForn.iTipoReg = iTipoReg
        objFluxoForn.lFornecedor = tFluxoForn.lFornecedor
        objFluxoForn.iTipoFornecedor = tFluxoForn.iTipoFornecedor
        
        colFluxoForn.Add objFluxoForn
        
        If colFluxoForn.Count = MAX_FLUXO Then Error 20205
        
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 20206
        
    Loop
        
    Call Comando_Fechar(lComando)
    
    FluxoForn_Le = SUCESSO
    
    Exit Function
        
Erro_FluxoForn_Le:

    FluxoForn_Le = Err
    
    Select Case Err
    
        Case 20202
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 20203, 20204, 20206
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FLUXOFORN", Err, lFluxoId, CStr(dtData), iTipoReg)
        
        Case 20205
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148567)
        
    End Select
    
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function BaixaPagar_Le(ByVal objBaixaPagar As ClassBaixaPagar) As Long
'carrega dados de uma baixa de parcelas efetuada em Contas a Pagar

Dim lErro As Long
Dim tBaixaPagar As typeBaixaPagar
Dim lComando As Long

On Error GoTo Erro_BaixaPagar_Le

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 42809
    
    tBaixaPagar.sHistorico = String(STRING_HISTORICOMOVCONTA, 0)
    
    lErro = Comando_Executar(lComando, "SELECT Status, Historico, Motivo, Data, DataContabil, DataRegistro, NumMovCta,NumIntDoc, NumIntCheque, FilialEmpresaCheque, NumIntDocBaixaAgrupada FROM BaixasPag WHERE NumIntBaixa = ? ", tBaixaPagar.iStatus, tBaixaPagar.sHistorico, tBaixaPagar.iMotivo, tBaixaPagar.dtData, tBaixaPagar.dtDataContabil, tBaixaPagar.dtDataRegistro, tBaixaPagar.lNumMovConta, tBaixaPagar.lNumIntDoc, tBaixaPagar.lNumIntCheque, tBaixaPagar.iFilialEmpresaCheque, tBaixaPagar.lNumIntDocBaixaAgrupada, objBaixaPagar.lNumIntBaixa)
    If lErro <> AD_SQL_SUCESSO Then Error 42810
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 42811
    If lErro = AD_SQL_SEM_DADOS Then Error 42812

    objBaixaPagar.dtData = tBaixaPagar.dtData
    objBaixaPagar.dtDataContabil = tBaixaPagar.dtDataContabil
    objBaixaPagar.dtDataRegistro = tBaixaPagar.dtDataRegistro
    objBaixaPagar.iMotivo = tBaixaPagar.iMotivo
    objBaixaPagar.iStatus = tBaixaPagar.iStatus
    objBaixaPagar.lNumIntDoc = tBaixaPagar.lNumIntDoc
    objBaixaPagar.lNumMovConta = tBaixaPagar.lNumMovConta
    objBaixaPagar.sHistorico = tBaixaPagar.sHistorico
    objBaixaPagar.lNumIntCheque = tBaixaPagar.lNumIntCheque
    objBaixaPagar.iFilialEmpresaCheque = tBaixaPagar.iFilialEmpresaCheque
    objBaixaPagar.lNumIntDocBaixaAgrupada = tBaixaPagar.lNumIntDocBaixaAgrupada

    Call Comando_Fechar(lComando)
    
    BaixaPagar_Le = SUCESSO
    
    Exit Function
    
Erro_BaixaPagar_Le:

    BaixaPagar_Le = Err
    
    Select Case Err
    
        Case 42809
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
            
        Case 42810, 42811
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BAIXAPAG", Err)
        
        Case 42812
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, 148568)
            
    End Select
            
    Call Comando_Fechar(lComando)
    
    Exit Function
    
End Function

Function BaixaPagCancelar_Le_Parcela(ByVal lNumIntTitulo As Long, ByVal iNumParcela As Integer, ByVal iSequencial As Integer, ByVal objParcPagBaixa As ClassBaixaParcPagar) As Long
'Le dados de uma baixa efetuada sobre uma parcela de titulo a pagar, baixado ou nao (o titulo)

Dim lErro As Long
Dim lComando As Long
Dim tBaixaParcPag As typeBaixaParcPag
Dim lNumIntBaixa As Long

On Error GoTo Erro_BaixaPagCancelar_Le_Parcela

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 42804
    
    lErro = Comando_Executar(lComando, "SELECT BaixasParcPag.NumIntDoc, BaixasParcPag.NumIntBaixa, BaixasParcPag.ValorDesconto, BaixasParcPag.ValorMulta, BaixasParcPag.ValorBaixado, BaixasParcPag.ValorJuros,BaixasParcPag.NumIntParcela FROM BaixasParcPag, TitulosPagBaixados,ParcelasPagBaixadas WHERE BaixasParcPag.NumIntParcela =ParcelasPagBaixadas.NumIntDoc and TitulosPagBaixados.NumIntdoc = ParcelasPagBaixadas.NumIntTitulo AND ParcelasPagBaixadas.NumIntTitulo = ? AND ParcelasPagBaixadas.Numparcela = ? AND BaixasParcPag.Sequencial = ? UNION " & _
        "SELECT BaixasParcPag.NumIntDoc,BaixasParcPag.NumIntBaixa, BaixasParcPag.ValorDesconto, BaixasParcPag.ValorMulta, BaixasParcPag.ValorBaixado, BaixasParcPag.ValorJuros,BaixasParcPag.NumIntParcela FROM BaixasParcPag, TitulosPag,ParcelasPag WHERE BaixasParcPag.NumIntParcela =ParcelasPag.NumIntDoc and TitulosPag.NumIntdoc = ParcelasPag.NumIntTitulo AND ParcelasPag.NumIntTitulo = ? AND ParcelasPag.Numparcela = ? AND BaixasParcPag.Sequencial = ?", _
        tBaixaParcPag.lNumIntDoc, tBaixaParcPag.lNumIntBaixa, tBaixaParcPag.dValorDesconto, tBaixaParcPag.dValorMulta, tBaixaParcPag.dValorBaixado, tBaixaParcPag.dValorJuros, tBaixaParcPag.lNumIntParcela, _
        lNumIntTitulo, iNumParcela, iSequencial, lNumIntTitulo, iNumParcela, iSequencial)
    If lErro <> AD_SQL_SUCESSO Then Error 42805
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 42806
    
    If lErro = AD_SQL_SEM_DADOS Then Error 42807
    
    objParcPagBaixa.lNumIntBaixa = tBaixaParcPag.lNumIntBaixa
    objParcPagBaixa.dValorDesconto = tBaixaParcPag.dValorDesconto
    objParcPagBaixa.dValorMulta = tBaixaParcPag.dValorMulta
    objParcPagBaixa.dValorBaixado = tBaixaParcPag.dValorBaixado
    objParcPagBaixa.dValorJuros = tBaixaParcPag.dValorJuros
    objParcPagBaixa.lNumIntParcela = tBaixaParcPag.lNumIntParcela
    objParcPagBaixa.lNumIntDoc = tBaixaParcPag.lNumIntDoc
        
    Call Comando_Fechar(lComando)
    
    BaixaPagCancelar_Le_Parcela = SUCESSO
    
    Exit Function
    
Erro_BaixaPagCancelar_Le_Parcela:

    BaixaPagCancelar_Le_Parcela = Err
    
    Select Case Err
    
        Case 42804
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
    
        Case 42805, 42806
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BAIXASPARCPAG", Err)
        
        Case 42807
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148569)
            
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function
    
End Function

Function FilialFornecedor_Le_NomeRed_CodFilial(ByVal sNomeRed As String, ByVal objFilialFornecedor As ClassFilialFornecedor) As Long
'Lê a FilialFornecedor a partir do NomeReduzido do Fornecedor passado em sNomeRed
'e do código da Filial passado em objFilialFornecedor. Devolve a Filial em objFilialFornecedor.

'*** ALTERADA EM 26/06/2001 POR LUIZ GUSTAVO DE FREITAS NOGUEIRA ***
'Incluído código para leitura do Campo ContaFornConsig
'*******************************************************************

Dim lErro As Long
Dim lComando As Long
Dim tFilialFornecedor As typeFilialFornecedor
Dim sNome As String

On Error GoTo Erro_FilialFornecedor_Le_NomeRed_CodFilial

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 18269
    
    tFilialFornecedor.sNome = String(STRING_FILIAL_FORNECEDOR_NOME, 0)
    tFilialFornecedor.sCgc = String(STRING_CGC, 0)
    tFilialFornecedor.sIdEstrangeiro = String(STRING_ID_ESTRANGEIRO, 0)
    tFilialFornecedor.sInscricaoEstadual = String(STRING_INSCR_EST, 0)
    tFilialFornecedor.sInscricaoMunicipal = String(STRING_INSCR_MUN, 0)
    tFilialFornecedor.sInscricaoSuframa = String(STRING_INSCR_SUF, 0)
    tFilialFornecedor.sContaContabil = String(STRING_CONTA, 0)
    tFilialFornecedor.sContaFornConsig = String(STRING_CONTA, 0)
    tFilialFornecedor.sAgencia = String(STRING_AGENCIA, 0)
    tFilialFornecedor.sContaCorrente = String(STRING_CONTA_CORRENTE, 0)
    tFilialFornecedor.sObservacao = String(STRING_FILIAL_FORNECEDOR_OBS, 0)
    tFilialFornecedor.sInscricaoINSS = String(STRING_INSCR_INSS, 0)
    tFilialFornecedor.sContaDespesa = String(STRING_CONTA, 0)
    
    lErro = Comando_Executar(lComando, "SELECT FiliaisFornecedores.IENaoContrib, FiliaisFornecedores.IEIsento, FiliaisFornecedores.CodFornecedor, FiliaisFornecedores.Nome, FiliaisFornecedores.Endereco, FiliaisFornecedores.CGC, FiliaisFornecedores.IdEstrangeiro, FiliaisFornecedores.InscricaoEstadual,FiliaisFornecedores.InscricaoSuframa, FiliaisFornecedores.InscricaoMunicipal, FiliaisFornecedores.ContaContabil, FiliaisFornecedores.ContaFornConsig, FiliaisFornecedores.Banco, FiliaisFornecedores.Agencia, FiliaisFornecedores.ContaCorrente, FiliaisFornecedores.Observacao, " & _
        "FiliaisFornecedores.TipoFrete, FiliaisFornecedores.InscricaoINSS, FiliaisFornecedores.TipoCobranca, FiliaisFornecedores.GeraCredICMS, FiliaisFornecedores.ContaDespesa, FiliaisFornecedores.RegimeTributario FROM FiliaisFornecedores, Fornecedores WHERE FiliaisFornecedores.CodFilial = ? AND FiliaisFornecedores.CodFornecedor = Fornecedores.Codigo AND Fornecedores.NomeReduzido = ?", tFilialFornecedor.iIENaoContrib, tFilialFornecedor.iIEIsento, tFilialFornecedor.lCodFornecedor, tFilialFornecedor.sNome, tFilialFornecedor.lEndereco, tFilialFornecedor.sCgc, tFilialFornecedor.sIdEstrangeiro, tFilialFornecedor.sInscricaoEstadual, tFilialFornecedor.sInscricaoSuframa, tFilialFornecedor.sInscricaoMunicipal, tFilialFornecedor.sContaContabil, tFilialFornecedor.sContaFornConsig, _
        tFilialFornecedor.iBanco, tFilialFornecedor.sAgencia, tFilialFornecedor.sContaCorrente, tFilialFornecedor.sObservacao, tFilialFornecedor.iTipoFrete, tFilialFornecedor.sInscricaoINSS, tFilialFornecedor.iTipoCobranca, tFilialFornecedor.iGeraCredICMS, tFilialFornecedor.sContaDespesa, tFilialFornecedor.iRegimeTributario, objFilialFornecedor.iCodFilial, sNomeRed)
    If lErro <> SUCESSO Then Error 18270
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 18271
    
    If lErro = AD_SQL_SEM_DADOS Then Error 18272
    
    objFilialFornecedor.lCodFornecedor = tFilialFornecedor.lCodFornecedor
    objFilialFornecedor.sNome = tFilialFornecedor.sNome
    objFilialFornecedor.lEndereco = tFilialFornecedor.lEndereco
    objFilialFornecedor.sCgc = tFilialFornecedor.sCgc
    objFilialFornecedor.sIdEstrangeiro = tFilialFornecedor.sIdEstrangeiro
    objFilialFornecedor.sInscricaoEstadual = tFilialFornecedor.sInscricaoEstadual
    objFilialFornecedor.sInscricaoMunicipal = tFilialFornecedor.sInscricaoMunicipal
    objFilialFornecedor.sInscricaoSuframa = tFilialFornecedor.sInscricaoSuframa
    objFilialFornecedor.sContaContabil = tFilialFornecedor.sContaContabil
    objFilialFornecedor.sContaFornConsig = tFilialFornecedor.sContaFornConsig
    objFilialFornecedor.iBanco = tFilialFornecedor.iBanco
    objFilialFornecedor.sAgencia = tFilialFornecedor.sAgencia
    objFilialFornecedor.sContaCorrente = tFilialFornecedor.sContaCorrente
    objFilialFornecedor.sObservacao = tFilialFornecedor.sObservacao
    objFilialFornecedor.iTipoFrete = tFilialFornecedor.iTipoFrete
    objFilialFornecedor.sInscricaoINSS = tFilialFornecedor.sInscricaoINSS
    objFilialFornecedor.iTipoCobranca = tFilialFornecedor.iTipoCobranca
    objFilialFornecedor.iGeraCredICMS = tFilialFornecedor.iGeraCredICMS
    objFilialFornecedor.sContaDespesa = tFilialFornecedor.sContaDespesa
    objFilialFornecedor.iRegimeTributario = tFilialFornecedor.iRegimeTributario
    objFilialFornecedor.iIEIsento = tFilialFornecedor.iIEIsento
    objFilialFornecedor.iIENaoContrib = tFilialFornecedor.iIENaoContrib
    
    Call Comando_Fechar(lComando)
    
    FilialFornecedor_Le_NomeRed_CodFilial = SUCESSO
    
    Exit Function
    
Erro_FilialFornecedor_Le_NomeRed_CodFilial:

    FilialFornecedor_Le_NomeRed_CodFilial = Err
    
    Select Case Err
    
        Case 18269
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 18270, 18271
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIAISFORNECEDORES1", Err, sNomeRed, objFilialFornecedor.iCodFilial)
        
        Case 18272 'será tratado na rotina chamadora.
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, 148570)
        
    End Select
    
    Call Comando_Fechar(lComando)
        
    Exit Function
        
End Function

Function ParcelasPagar_Le(ByVal objTituloPagar As ClassTituloPagar, ByVal colParcelasPag As colParcelaPagar) As Long
'Lê as Parcelas a Pagar do Titulo cujo NumIntDoc foi passado em objTituloPagar

Dim lErro As Long
Dim lComando As Long
Dim tParcelaPagar As typeParcelaPagar

On Error GoTo Erro_ParcelasPagar_Le

    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 18378
    
    tParcelaPagar.sNossoNumero = String(STRING_PARCELA_PAGAR_NOSSO_NUMERO, 0)
    tParcelaPagar.sCodigoDeBarras = String(STRING_CODIGO_BARRAS_PARC_CPR, 0)
    tParcelaPagar.sCodUsuarioLib = String(STRING_USUARIO_CODIGO, 0)
    
    'Seleciona Parcelas vinculadas ao Título
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc, NumParcela, Status, DataVencimento, DataVencimentoReal, Saldo, Valor, ValorOriginal, MotivoDiferenca, TipoCobranca, Portador, BancoCobrador, ProxSeqBaixa, NossoNumero, CodigoDeBarras, CodUsuarioLib, DataLib FROM ParcelasPag WHERE NumIntTitulo = ? AND Status <> ? ORDER BY DataVencimento", tParcelaPagar.lNumIntDoc, tParcelaPagar.iNumParcela, tParcelaPagar.iStatus, tParcelaPagar.dtDataVencimento, tParcelaPagar.dtDataVencimentoReal, tParcelaPagar.dSaldo, tParcelaPagar.dValor, tParcelaPagar.dValorOriginal, tParcelaPagar.iMotivoDiferenca, tParcelaPagar.iTipoCobranca, tParcelaPagar.iPortador, tParcelaPagar.iBancoCobrador, tParcelaPagar.iProxSeqBaixa, tParcelaPagar.sNossoNumero, tParcelaPagar.sCodigoDeBarras, tParcelaPagar.sCodUsuarioLib, tParcelaPagar.dtDataLib, objTituloPagar.lNumIntDoc, STATUS_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then Error 18379

    'Tenta ler a primeira Parcela
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 18380
    If lErro = AD_SQL_SEM_DADOS Then Error 18790
        
    'Loop de adição de Parcelas à coleção
    Do While lErro <> AD_SQL_SEM_DADOS
    
        'Adiciona Parcela na coleção
        With tParcelaPagar
            colParcelasPag.Add .lNumIntDoc, objTituloPagar.lNumIntDoc, .iNumParcela, .iStatus, .dtDataVencimento, .dtDataVencimentoReal, .dSaldo, .dValor, .iPortador, .iProxSeqBaixa, .iTipoCobranca, .iBancoCobrador, .sNossoNumero, .sCodigoDeBarras, , .dValorOriginal, .iMotivoDiferenca, .sCodUsuarioLib, .dtDataLib
        End With
        
        'Vai para a próxima Parcela
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 18382
    
    Loop
    
    'Fecha comando
    Call Comando_Fechar(lComando)
    
    ParcelasPagar_Le = SUCESSO
    
    Exit Function
    
Erro_ParcelasPagar_Le:

    ParcelasPagar_Le = Err
    
    Select Case Err
    
        Case 18378
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
            
        Case 18379, 18380, 18382
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELASPAG", Err, objTituloPagar.lNumIntDoc)
        
        Case 18790
            Call Rotina_Erro(vbOKOnly, "ERRO_TITULOPAGAR_SEM_PARCELAS", Err, objTituloPagar.lNumIntDoc)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148571)
    
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function TituloPagar_Le(ByVal objTituloPagar As ClassTituloPagar, Optional ByVal bLeExcluido As Boolean = False) As Long
'Lê Titulo a Pagar com o Número Interno passado como parâmetro

Dim lErro As Long
Dim lComando As Long
Dim tTituloPagar As typeTituloPagar

On Error GoTo Erro_TituloPagar_Le

    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 18369
    
    tTituloPagar.sSiglaDocumento = String(STRING_SIGLA_DOCUMENTO, 0)
    tTituloPagar.sObservacao = String(STRING_TITULO_OBSERVACAO, 0)
    tTituloPagar.sHistorico = String(STRING_NFSPAG_HISTORICO, 0)
    tTituloPagar.sNatureza = String(STRING_NATMOVCTA_CODIGO, 0)
    tTituloPagar.sCcl = String(STRING_CCL, 0)
    
    'Seleciona o TituloPagar a partir do NumIntDoc
    If bLeExcluido Then
        lErro = Comando_Executar(lComando, "SELECT FilialEmpresa, Fornecedor, Filial, SiglaDocumento, NumTitulo, DataEmissao, Saldo, NumParcelas, ValorTotal, ValorSeguro, ValorFrete, OutrasDespesas, ValorProdutos, ValorICMS, ValorICMSSubst, CreditoICMS, ValorIPI, CreditoIPI, ValorIRRF, ValorINSS, INSSRetido, DataRegistro, " & _
            "CondicaoPagto, Observacao, Status, FilialPedCompra, NumPedCompra, PISRetido, ISSRetido, COFINSRetido, CSLLRetido, TaxaMoeda, Historico, Natureza, Ccl FROM TitulosPag WHERE NumIntDoc = ? ", tTituloPagar.iFilialEmpresa, tTituloPagar.lFornecedor, tTituloPagar.iFilial, tTituloPagar.sSiglaDocumento, tTituloPagar.lNumTitulo, tTituloPagar.dtDataEmissao, tTituloPagar.dSaldo, tTituloPagar.iNumParcelas, tTituloPagar.dValorTotal, tTituloPagar.dValorSeguro, tTituloPagar.dValorFrete, tTituloPagar.dOutrasDespesas, tTituloPagar.dValorProdutos, tTituloPagar.dValorICMS, tTituloPagar.dValorICMSSubst, tTituloPagar.iCreditoICMS, tTituloPagar.dValorIPI, tTituloPagar.iCreditoIPI, tTituloPagar.dValorIRRF, tTituloPagar.dValorINSS, tTituloPagar.iINSSRetido, tTituloPagar.dtDataRegistro, tTituloPagar.iCondicaoPagto, _
        tTituloPagar.sObservacao, tTituloPagar.iStatus, tTituloPagar.iFilialPedCompra, tTituloPagar.lNumPedCompra, tTituloPagar.dPISRetido, tTituloPagar.dISSRetido, tTituloPagar.dCOFINSRetido, tTituloPagar.dCSLLRetido, tTituloPagar.dTaxaMoeda, tTituloPagar.sHistorico, tTituloPagar.sNatureza, tTituloPagar.sCcl, objTituloPagar.lNumIntDoc)
    Else
        lErro = Comando_Executar(lComando, "SELECT FilialEmpresa, Fornecedor, Filial, SiglaDocumento, NumTitulo, DataEmissao, Saldo, NumParcelas, ValorTotal, ValorSeguro, ValorFrete, OutrasDespesas, ValorProdutos, ValorICMS, ValorICMSSubst, CreditoICMS, ValorIPI, CreditoIPI, ValorIRRF, ValorINSS, INSSRetido, DataRegistro, " & _
            "CondicaoPagto, Observacao, Status, FilialPedCompra, NumPedCompra, PISRetido, ISSRetido, COFINSRetido, CSLLRetido, TaxaMoeda, Historico, Natureza, Ccl FROM TitulosPag WHERE NumIntDoc = ? AND Status <> ?", tTituloPagar.iFilialEmpresa, tTituloPagar.lFornecedor, tTituloPagar.iFilial, tTituloPagar.sSiglaDocumento, tTituloPagar.lNumTitulo, tTituloPagar.dtDataEmissao, tTituloPagar.dSaldo, tTituloPagar.iNumParcelas, tTituloPagar.dValorTotal, tTituloPagar.dValorSeguro, tTituloPagar.dValorFrete, tTituloPagar.dOutrasDespesas, tTituloPagar.dValorProdutos, tTituloPagar.dValorICMS, tTituloPagar.dValorICMSSubst, tTituloPagar.iCreditoICMS, tTituloPagar.dValorIPI, tTituloPagar.iCreditoIPI, tTituloPagar.dValorIRRF, tTituloPagar.dValorINSS, tTituloPagar.iINSSRetido, tTituloPagar.dtDataRegistro, tTituloPagar.iCondicaoPagto, _
        tTituloPagar.sObservacao, tTituloPagar.iStatus, tTituloPagar.iFilialPedCompra, tTituloPagar.lNumPedCompra, tTituloPagar.dPISRetido, tTituloPagar.dISSRetido, tTituloPagar.dCOFINSRetido, tTituloPagar.dCSLLRetido, tTituloPagar.dTaxaMoeda, tTituloPagar.sHistorico, tTituloPagar.sNatureza, tTituloPagar.sCcl, objTituloPagar.lNumIntDoc, STATUS_EXCLUIDO)
    End If
    If lErro <> AD_SQL_SUCESSO Then Error 18370
    
    'Tenta ler
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 18371
    
    'Se não encontrou --> Erro
    If lErro = AD_SQL_SEM_DADOS Then Error 18372
    
    tTituloPagar.lNumIntDoc = objTituloPagar.lNumIntDoc
    
    'Preenche objTituloPagar com os dados do Título
    Call TituloPagar_MoverCamposObj(objTituloPagar, tTituloPagar)

    'Fecha o comando
    Call Comando_Fechar(lComando)
    
    TituloPagar_Le = SUCESSO
    
    Exit Function
    
Erro_TituloPagar_Le:

    TituloPagar_Le = Err
    
    Select Case Err
    
        Case 18369
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 18370, 18371
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TITULOSPAG", Err, objTituloPagar.lNumIntDoc)
        
        Case 18372  'Título não encontrado
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148572)
    
    End Select
    
    'Fecha o comando
    Call Comando_Fechar(lComando)
    
    Exit Function
    
End Function

Function TituloPagar_Le_Numero(ByVal objTituloPagar As ClassTituloPagar) As Long
'Lê o Titulo da filial corrente com o Fornecedor, Filial, Numtitulo, Data de Emissao e Sigla do Documento passados em objtitulopagar

Dim lErro As Long
Dim lComando As Long
Dim tTituloPagar As typeTituloPagar

On Error GoTo Erro_TituloPagar_Le_Numero
    
    'Abre comando
    lComando = Comando_Abrir
    If lComando = 0 Then Error 18548
    
    tTituloPagar.sObservacao = String(STRING_TITULO_OBSERVACAO, 0)
    tTituloPagar.sHistorico = String(STRING_NFSPAG_HISTORICO, 0)
    tTituloPagar.sNatureza = String(STRING_NATMOVCTA_CODIGO, 0)
    tTituloPagar.sCcl = String(STRING_CCL, 0)
    
    If objTituloPagar.iFilialEmpresa = 0 Then
        objTituloPagar.iFilialEmpresa = giFilialEmpresa
    End If
    
    'Seleciona TituloPagar a partir dos dados fornecidos
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc, ValorTotal, ValorSeguro, ValorFrete, OutrasDespesas, ValorProdutos, ValorICMS, ValorICMSSubst, CreditoICMS, ValorIPI, CreditoIPI, ValorIRRF, ValorINSS,INSSRetido,DataRegistro, Observacao, Saldo, NumParcelas, Status, CondicaoPagto, FilialPedCompra, NumPedCompra, PISRetido, ISSRetido, COFINSRetido, CSLLRetido, TaxaMoeda, Historico, Natureza, Ccl FROM TitulosPag WHERE Fornecedor = ? AND Filial = ? AND NumTitulo = ? AND DataEmissao = ? AND SiglaDocumento = ? AND FilialEmpresa = ? AND Status <> ? ", _
        tTituloPagar.lNumIntDoc, tTituloPagar.dValorTotal, tTituloPagar.dValorSeguro, _
        tTituloPagar.dValorFrete, tTituloPagar.dOutrasDespesas, tTituloPagar.dValorProdutos, tTituloPagar.dValorICMS, tTituloPagar.dValorICMSSubst, tTituloPagar.iCreditoICMS, tTituloPagar.dValorIPI, tTituloPagar.iCreditoIPI, tTituloPagar.dValorIRRF, tTituloPagar.dValorINSS, tTituloPagar.iINSSRetido, tTituloPagar.dtDataRegistro, tTituloPagar.sObservacao, tTituloPagar.dSaldo, tTituloPagar.iNumParcelas, tTituloPagar.iStatus, tTituloPagar.iCondicaoPagto, tTituloPagar.iFilialPedCompra, tTituloPagar.lNumPedCompra, tTituloPagar.dPISRetido, tTituloPagar.dISSRetido, tTituloPagar.dCOFINSRetido, tTituloPagar.dCSLLRetido, tTituloPagar.dTaxaMoeda, tTituloPagar.sHistorico, tTituloPagar.sNatureza, _
        tTituloPagar.sCcl, objTituloPagar.lFornecedor, objTituloPagar.iFilial, objTituloPagar.lNumTitulo, objTituloPagar.dtDataEmissao, objTituloPagar.sSiglaDocumento, objTituloPagar.iFilialEmpresa, STATUS_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then Error 18549
    
    'Tenta ler
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 18550
    'Se não encontrou --> Erro
    If lErro = AD_SQL_SEM_DADOS Then Error 18551
    
    'Preenche objTituloPagar com os dados lidos
    tTituloPagar.iFilialEmpresa = objTituloPagar.iFilialEmpresa
    tTituloPagar.lFornecedor = objTituloPagar.lFornecedor
    tTituloPagar.iFilial = objTituloPagar.iFilial
    tTituloPagar.lNumTitulo = objTituloPagar.lNumTitulo
    tTituloPagar.dtDataEmissao = objTituloPagar.dtDataEmissao
    tTituloPagar.sSiglaDocumento = objTituloPagar.sSiglaDocumento
    Call TituloPagar_MoverCamposObj(objTituloPagar, tTituloPagar)
    
    'Fecha comando
    Call Comando_Fechar(lComando)
    
    TituloPagar_Le_Numero = SUCESSO
    
    Exit Function
    
Erro_TituloPagar_Le_Numero:

    TituloPagar_Le_Numero = Err

    Select Case Err
    
        Case 18548
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 18549, 18550
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFFATURA", Err, objTituloPagar.lNumTitulo)
        
        Case 18551
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, 148573)
            
    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function TituloPagarBaixado_Le_Numero(ByVal objTituloPagar As ClassTituloPagar) As Long
'Lê na Tabela de Titulos Baixados o Titulo da filial corrente com o Fornecedor, Filial, NumTitulo e Data de Emissao passados em objTituloPagar

Dim lErro As Long
Dim lComando As Long
Dim tTituloPagar As typeTituloPagar

On Error GoTo Erro_TituloPagarBaixado_Le_Numero

    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 18553
    
    tTituloPagar.sObservacao = String(STRING_TITULO_OBSERVACAO, 0)
    tTituloPagar.sHistorico = String(STRING_NFSPAG_HISTORICO, 0)
    tTituloPagar.sNatureza = String(STRING_NATMOVCTA_CODIGO, 0)
    tTituloPagar.sCcl = String(STRING_CCL, 0)
    
    If objTituloPagar.iFilialEmpresa = 0 Then
        objTituloPagar.iFilialEmpresa = giFilialEmpresa
    End If
    
    'Seleciona TítuloPagarBaixado com os dados passados
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc, ValorTotal, ValorSeguro, ValorFrete, OutrasDespesas, ValorProdutos, ValorICMS, ValorICMSSubst, CreditoICMS, ValorIPI, CreditoIPI, ValorIRRF, ValorINSS, INSSRetido, DataRegistro, Observacao, Saldo, NumParcelas, Status, CondicaoPagto, FilialPedCompra, NumPedCompra, PISRetido, ISSRetido, COFINSRetido, CSLLRetido, TaxaMoeda, Historico, Natureza FROM TitulosPagBaixados WHERE Fornecedor = ? AND Filial = ? AND NumTitulo = ? AND DataEmissao = ? AND SiglaDocumento = ? AND FilialEmpresa = ? AND Status <> ? ", _
        tTituloPagar.lNumIntDoc, tTituloPagar.dValorTotal, tTituloPagar.dValorSeguro, tTituloPagar.dValorFrete, tTituloPagar.dOutrasDespesas, tTituloPagar.dValorProdutos, tTituloPagar.dValorICMS, tTituloPagar.dValorICMSSubst, tTituloPagar.iCreditoICMS, tTituloPagar.dValorIPI, tTituloPagar.iCreditoIPI, tTituloPagar.dValorIRRF, tTituloPagar.dValorINSS, tTituloPagar.iINSSRetido, tTituloPagar.dtDataRegistro, tTituloPagar.sObservacao, tTituloPagar.dSaldo, tTituloPagar.iNumParcelas, tTituloPagar.iStatus, tTituloPagar.iCondicaoPagto, _
        tTituloPagar.iFilialPedCompra, tTituloPagar.lNumPedCompra, tTituloPagar.dPISRetido, tTituloPagar.dISSRetido, tTituloPagar.dCOFINSRetido, tTituloPagar.dCSLLRetido, tTituloPagar.dTaxaMoeda, tTituloPagar.sHistorico, tTituloPagar.sNatureza, objTituloPagar.lFornecedor, objTituloPagar.iFilial, objTituloPagar.lNumTitulo, objTituloPagar.dtDataEmissao, objTituloPagar.sSiglaDocumento, objTituloPagar.iFilialEmpresa, STATUS_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then Error 18554
    
    'Tenta ler
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 18555
    
    'Se não encontrou --> Erro
    If lErro = AD_SQL_SEM_DADOS Then Error 18556
    
    'Preenche objTituloPagar com os dados do Título
    tTituloPagar.lFornecedor = objTituloPagar.lFornecedor
    tTituloPagar.iFilial = objTituloPagar.iFilial
    tTituloPagar.lNumTitulo = objTituloPagar.lNumTitulo
    tTituloPagar.dtDataEmissao = objTituloPagar.dtDataEmissao
    tTituloPagar.sSiglaDocumento = objTituloPagar.sSiglaDocumento
    tTituloPagar.iFilialEmpresa = objTituloPagar.iFilialEmpresa
    Call TituloPagar_MoverCamposObj(objTituloPagar, tTituloPagar)
    
    'Fecha comando
    Call Comando_Fechar(lComando)
    
    TituloPagarBaixado_Le_Numero = SUCESSO
    
    Exit Function

Erro_TituloPagarBaixado_Le_Numero:

    TituloPagarBaixado_Le_Numero = Err
    
    Select Case Err
    
        Case 18553
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 18554, 18555
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFFATBAIXADA", Err, objTituloPagar.lNumTitulo)
        
        Case 18556 'Título não encontrado
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148574)
            
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function NFPag_Testa_Repeticao(ByVal objNFsPag As ClassNFsPag) As Long
'Teste se há NotaFiscalPagar (lançada ou baixada)
'com os mesmos Fornecedor, Filial, Número e DataEmissao dentro da faixa PERIODO_EMISSAO
'Função retorna SUCESSO se NÃO há ou se há e deseja prosseguir na INSERÇÃO de nova NotaFiscal

Dim lErro As Long
Dim lNumIntDoc As Long
Dim lComando As Long
Dim vbMsgRes As VbMsgBoxResult
Dim dtDataEmissao As Date

On Error GoTo Erro_NFPag_Testa_Repeticao

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 18531

    If objNFsPag.dtDataEmissao <> DATA_NULA Then
    
        'Seleciona NotaFiscalPagar com os mesmos Fornecedor, Filial, Número e DataEmissao dentro da faixa PERIODO_EMISSAO
        lErro = Comando_Executar(lComando, "SELECT NumIntDoc, DataEmissao FROM NFsPag WHERE Fornecedor = ? AND Filial = ? AND NumNotaFiscal = ? AND DataEmissao > ?  AND DataEmissao < ? AND Status <> ?", lNumIntDoc, dtDataEmissao, objNFsPag.lFornecedor, objNFsPag.iFilial, objNFsPag.lNumNotaFiscal, objNFsPag.dtDataEmissao - PERIODO_EMISSAO, objNFsPag.dtDataEmissao + PERIODO_EMISSAO, STATUS_EXCLUIDO)
        
    Else
    
        'Seleciona NotaFiscalPagar com os mesmos Fornecedor, Filial, Número independente de DataEmissao
        lErro = Comando_Executar(lComando, "SELECT NumIntDoc, DataEmissao FROM NFsPag WHERE Fornecedor = ? AND Filial = ? AND NumNotaFiscal = ? AND Status <> ?", lNumIntDoc, dtDataEmissao, objNFsPag.lFornecedor, objNFsPag.iFilial, objNFsPag.lNumNotaFiscal, STATUS_EXCLUIDO)
    
    End If
    
    If lErro <> AD_SQL_SUCESSO Then Error 18499

    'Tenta ler
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 18500
    
    If lErro = AD_SQL_SUCESSO Then
    
        vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_NFPAG_MESMO_NUMERO", objNFsPag.lFornecedor, objNFsPag.iFilial, objNFsPag.lNumNotaFiscal, dtDataEmissao)
        
        If vbMsgRes = vbNo Then Error 18501
    
    End If
           
    If objNFsPag.dtDataEmissao <> DATA_NULA Then
    
        'Seleciona NotaFiscalPagarBaixada com os mesmos Fornecedor, Filial, Número e DataEmissao dentro da faixa PERIODO_EMISSAO
        lErro = Comando_Executar(lComando, "SELECT NumIntDoc FROM NFsPagBaixadas WHERE Fornecedor = ? AND Filial = ? AND NumNotaFiscal = ? AND DataEmissao > ?  AND DataEmissao < ? AND Status <> ?", lNumIntDoc, objNFsPag.lFornecedor, objNFsPag.iFilial, objNFsPag.lNumNotaFiscal, objNFsPag.dtDataEmissao - PERIODO_EMISSAO, objNFsPag.dtDataEmissao + PERIODO_EMISSAO, STATUS_EXCLUIDO)
        
    Else
    
        'Seleciona NotaFiscalPagarBaixada com os mesmos Fornecedor, Filial, Número independente de DataEmissao
        lErro = Comando_Executar(lComando, "SELECT NumIntDoc FROM NFsPagBaixadas WHERE Fornecedor = ? AND Filial = ? AND NumNotaFiscal = ? AND Status <> ?", lNumIntDoc, objNFsPag.lFornecedor, objNFsPag.iFilial, objNFsPag.lNumNotaFiscal, STATUS_EXCLUIDO)
    
    End If
    
    If lErro <> AD_SQL_SUCESSO Then Error 18535

    'Tenta ler
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 18536
    
    If lErro = AD_SQL_SUCESSO Then
    
        vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_NFPAG_BAIXADA_MESMO_NUMERO", objNFsPag.lFornecedor, objNFsPag.iFilial, objNFsPag.lNumNotaFiscal, objNFsPag.dtDataEmissao)
        
        If vbMsgRes = vbNo Then Error 18537
    
    End If
    
    Call Comando_Fechar(lComando)
    
    NFPag_Testa_Repeticao = SUCESSO
    
    Exit Function
    
Erro_NFPag_Testa_Repeticao:

    NFPag_Testa_Repeticao = Err

    Select Case Err
    
        Case 18499, 18500
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFSPAG1", Err, objNFsPag.lNumNotaFiscal)
        
        Case 18531
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
            
        Case 18501, 18537
        
        Case 18535, 18536
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFSPAGBAIXADAS", Err, objNFsPag.lNumNotaFiscal)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148575)
            
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function ContasCorrentes_Bancarias_Le_CodigosNomesRed(ByVal colCodigoNomeConta As AdmColCodigoNome) As Long
'Carrega a Coleção colCodigoNomeConta com as Contas Correntes que possuem o campo CodBanco preenchido, e referentes à Filial selecionada

Dim lErro As Long
Dim iCodigo As Integer
Dim sNome As String
Dim lComando As Long

On Error GoTo Erro_ContasCorrentes_Bancarias_Le_CodigosNomesRed

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 15627

    sNome = String(STRING_CONTA_CORRENTE_NOME_REDUZIDO, 0)

    'Pesquisa no BD as Contas correntes internas que têm o campo CodBanco diferente de zero
    'Se FilialEmpresa for diferente de Empresa Toda, seleciono apenas as Contas da Filial
    
    'Se alguma Filial está selecionada
    If giFilialEmpresa <> EMPRESA_TODA Then
        lErro = Comando_Executar(lComando, "SELECT Codigo, NomeReduzido FROM ContasCorrentesInternas WHERE CodBanco <> ? AND FilialEmpresa = ? ORDER BY Codigo", iCodigo, sNome, BANCO_NAO_PREENCHIDO, giFilialEmpresa)
    Else
        lErro = Comando_Executar(lComando, "SELECT Codigo, NomeReduzido FROM ContasCorrentesInternas WHERE CodBanco <> ?  ORDER BY Codigo", iCodigo, sNome, BANCO_NAO_PREENCHIDO)
    End If
    If lErro <> AD_SQL_SUCESSO Then Error 15628

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 15629

    'Enquanto houver Conta Corrente no Select feito
    Do While lErro <> AD_SQL_SEM_DADOS

        'Coloca a Conta lida na coleção
        colCodigoNomeConta.Add iCodigo, sNome

        'Lê o próximo registro do Select
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 15631

    Loop

    Call Comando_Fechar(lComando)

    ContasCorrentes_Bancarias_Le_CodigosNomesRed = SUCESSO

    Exit Function

Erro_ContasCorrentes_Bancarias_Le_CodigosNomesRed:

    ContasCorrentes_Bancarias_Le_CodigosNomesRed = Err

    Select Case Err

        Case 15627
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
            
        Case 15628, 15629, 15631
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONTASCORRENTESINTERNAS", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148576)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function TiposDocumento_Le_OutrosPag(ByVal colSigla As Collection) As Long
'Le as Siglas de Tipos de Documento que tem campo EmNFFatPag = 1

Dim lErro As Long
Dim lComando As Long
Dim objTipoDocumento As ClassTipoDocumento
Dim tTipoDocumento As typeTipoDocumento

On Error GoTo Erro_TiposDocumento_Le_OutrosPag

    'Inicializa comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 18794

    tTipoDocumento.sSigla = String(STRING_SIGLA_DOCUMENTO, 0)
    tTipoDocumento.sDescricao = String(STRING_DESCRICAO_CAMPO, 0)
    tTipoDocumento.sDescricaoReduzida = String(STRING_DESCRICAO_CAMPO, 0)
    
    lErro = Comando_Executar(lComando, "SELECT Sigla, Descricao, DescricaoReduzida FROM TiposDeDocumento WHERE EmNFFatPag = 1", tTipoDocumento.sSigla, tTipoDocumento.sDescricao, tTipoDocumento.sDescricaoReduzida)
    If lErro <> AD_SQL_SUCESSO Then Error 18795
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 18796
        
    Do While lErro <> AD_SQL_SEM_DADOS

        Set objTipoDocumento = New ClassTipoDocumento
        
        objTipoDocumento.sSigla = tTipoDocumento.sSigla
        objTipoDocumento.sDescricao = tTipoDocumento.sDescricao
        objTipoDocumento.sDescricaoReduzida = tTipoDocumento.sDescricaoReduzida
        
        colSigla.Add objTipoDocumento
        
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 18797
        
    Loop
    
    'Libera comando
    Call Comando_Fechar(lComando)
    
    TiposDocumento_Le_OutrosPag = SUCESSO
    
    Exit Function

Erro_TiposDocumento_Le_OutrosPag:

    TiposDocumento_Le_OutrosPag = Err
    
    Select Case Err
        
        Case 18794
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
            
        Case 18795, 18796, 18797
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOSDEDOCUMENTO", Err)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148577)
    
    End Select
    
    'Libera comando
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function TiposDocumento_Le_NaoOutrosPag(ByVal colSigla As Collection) As Long
'Le as Siglas de Tipos de Documento que tem campo EmNFFatPag = 0

Dim lErro As Long
Dim lComando As Long
Dim sSigla As String

On Error GoTo Erro_TiposDocumento_Le_NaoOutrosPag

    'Abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 18805

    sSigla = String(STRING_SIGLA_DOCUMENTO, 0)

    'Seleciona os Tipos de d\Documento com EmNFFatPag = 0
    lErro = Comando_Executar(lComando, "SELECT Sigla FROM TiposDeDocumento WHERE EmNFFatPag = 0", sSigla)
    If lErro <> AD_SQL_SUCESSO Then Error 18806

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 18807

    'Armazena em colSigla as Siglas encontradas
    Do While lErro <> AD_SQL_SEM_DADOS

        colSigla.Add sSigla

        'Buasca a próxima Sigla
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 18808

    Loop

    'Fecha o comando
    Call Comando_Fechar(lComando)

    TiposDocumento_Le_NaoOutrosPag = SUCESSO

    Exit Function

Erro_TiposDocumento_Le_NaoOutrosPag:

    TiposDocumento_Le_NaoOutrosPag = Err

    Select Case Err

        Case 18805
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 18806, 18807, 18808
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPODOCUMENTO1", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148578)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function MovContaCorrente_Le_MeioPagto_PagTit(ByVal objMovContaCorrente As ClassMovContaCorrente) As Long
'Preenche objMovContaCorrente SEM AS INFORMACOES CONTABEIS a partir dos seguintes cpos de um pagto de titulo:
' iCodConta, dtDataMovimento, iTipoMeioPagto, lNumero
' ignora movtos excluidos
Dim lErro As Long
Dim lComando As Long
Dim tMovContaCorrente As typeMovContaCorrente

On Error GoTo Erro_MovContaCorrente_Le_MeioPagto_PagTit

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 7803

    tMovContaCorrente.sHistorico = String(STRING_HISTORICOMOVCONTA, 0)
    tMovContaCorrente.sNumRefExterna = String(STRING_NUMREFEXTERNA, 0)

    Select Case objMovContaCorrente.iTipoMeioPagto

        Case DINHEIRO
            'basta selecionar por cta + sequencial da cta que neste caso é igual ao #
            objMovContaCorrente.lSequencial = objMovContaCorrente.lNumero
            lErro = Comando_Executar(lComando, "SELECT NumMovto, Tipo, Valor, Historico, Portador, Conciliado, Favorecido, NumRefExterna, NumRefInterna FROM MovimentosContaCorrente WHERE CodConta = ? AND Sequencial = ? AND Excluido = ?", _
            tMovContaCorrente.lNumMovto, tMovContaCorrente.iTipo, tMovContaCorrente.dValor, tMovContaCorrente.sHistorico, tMovContaCorrente.iPortador, tMovContaCorrente.iConciliado, tMovContaCorrente.iFavorecido, tMovContaCorrente.sNumRefExterna, tMovContaCorrente.lNumRefInterna, objMovContaCorrente.iCodConta, objMovContaCorrente.lSequencial, NAO_EXCLUIDO)
            tMovContaCorrente.lSequencial = objMovContaCorrente.lSequencial
            
        Case BORDERO
            lErro = Comando_Executar(lComando, "SELECT NumMovto, Sequencial, Tipo, Valor, Historico, Portador, Conciliado, Favorecido, NumRefExterna, NumRefInterna FROM MovimentosContaCorrente WHERE CodConta = ? AND DataMovimento = ? AND TipomeioPagto = ? AND ( Tipo = ? OR Tipo = ? ) AND Numero = ? AND Excluido = ?", _
            tMovContaCorrente.lNumMovto, tMovContaCorrente.lSequencial, tMovContaCorrente.iTipo, tMovContaCorrente.dValor, tMovContaCorrente.sHistorico, tMovContaCorrente.iPortador, tMovContaCorrente.iConciliado, tMovContaCorrente.iFavorecido, tMovContaCorrente.sNumRefExterna, tMovContaCorrente.lNumRefInterna, objMovContaCorrente.iCodConta, objMovContaCorrente.dtDataMovimento, objMovContaCorrente.iTipoMeioPagto, MOVCCI_PAGTO_ANTECIPADO, MOVCCI_PAGTO_TITULO_POR_BORDERO, objMovContaCorrente.lNumero, NAO_EXCLUIDO)

        Case Else 'cheque
            lErro = Comando_Executar(lComando, "SELECT NumMovto, Sequencial, Tipo, Valor, Historico, Portador, Conciliado, Favorecido, NumRefExterna, NumRefInterna FROM MovimentosContaCorrente WHERE CodConta = ? AND DataMovimento = ? AND  TipomeioPagto = ? AND ( Tipo = ? OR Tipo = ? ) AND Numero = ? AND Excluido = ?", _
            tMovContaCorrente.lNumMovto, tMovContaCorrente.lSequencial, tMovContaCorrente.iTipo, tMovContaCorrente.dValor, tMovContaCorrente.sHistorico, tMovContaCorrente.iPortador, tMovContaCorrente.iConciliado, tMovContaCorrente.iFavorecido, tMovContaCorrente.sNumRefExterna, tMovContaCorrente.lNumRefInterna, objMovContaCorrente.iCodConta, objMovContaCorrente.dtDataMovimento, objMovContaCorrente.iTipoMeioPagto, MOVCCI_PAGTO_ANTECIPADO, MOVCCI_PAGTO_TITULO_POR_CHEQUE, objMovContaCorrente.lNumero, NAO_EXCLUIDO)

    End Select
    If lErro <> AD_SQL_SUCESSO Then Error 7804

    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7805

    If lErro = AD_SQL_SEM_DADOS Then Error 7806

    'completar os dados em objMovContaCorrente
    objMovContaCorrente.lNumMovto = tMovContaCorrente.lNumMovto
    objMovContaCorrente.lSequencial = tMovContaCorrente.lSequencial
    objMovContaCorrente.iTipo = tMovContaCorrente.iTipo
    objMovContaCorrente.iExcluido = tMovContaCorrente.iExcluido
    objMovContaCorrente.dValor = tMovContaCorrente.dValor
    objMovContaCorrente.sHistorico = tMovContaCorrente.sHistorico
    objMovContaCorrente.iPortador = tMovContaCorrente.iPortador
    objMovContaCorrente.iConciliado = tMovContaCorrente.iConciliado
    objMovContaCorrente.iFavorecido = tMovContaCorrente.iFavorecido
    objMovContaCorrente.sNumRefExterna = tMovContaCorrente.sNumRefExterna
    objMovContaCorrente.lNumRefInterna = tMovContaCorrente.lNumRefInterna

    Call Comando_Fechar(lComando)

    MovContaCorrente_Le_MeioPagto_PagTit = SUCESSO

    Exit Function

Erro_MovContaCorrente_Le_MeioPagto_PagTit:

    MovContaCorrente_Le_MeioPagto_PagTit = Err

    Select Case Err

        Case 7803
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 7804, 7805
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCONTACORRENTE", Err)

        Case 7806
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCONTACORRENTE_INEXISTENTE", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148579)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function ParcelasPag_Le_MovContaCorrente(ByVal objMovContaCorrente As ClassMovContaCorrente, ByVal colInfoParcPag As Collection) As Long
'preenche colInfoParcPag com dados das parcelas que sofreram baixas atraves de um pagto
'OBS: apenas parte dos dados de ClassInfoParcPag sao preenchidos
'OBS: no caso de pagto antecipado nao apropriado a nenhuma parcela a colecao ficará vazia
Dim lErro As Long
On Error GoTo Erro_ParcelasPag_Le_MovContaCorrente

    'obter dados de parcelas em titulos nao baixados
    lErro = ParcelasPag_Le_MovContaCorrente1(objMovContaCorrente, colInfoParcPag, 0)
    If lErro <> SUCESSO Then Error 7813

    'obter dados de parcelas em titulos baixados
    lErro = ParcelasPag_Le_MovContaCorrente1(objMovContaCorrente, colInfoParcPag, 1)
    If lErro <> SUCESSO Then Error 7814

    ParcelasPag_Le_MovContaCorrente = SUCESSO

    Exit Function

Erro_ParcelasPag_Le_MovContaCorrente:

    ParcelasPag_Le_MovContaCorrente = Err

    Select Case Err

        Case 7813, 7814

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148580)

    End Select

    Exit Function

End Function

Private Function ParcelasPag_Le_MovContaCorrente1(ByVal objMovContaCorrente As ClassMovContaCorrente, ByVal colInfoParcPag As Collection, iTitulosBaixados As Integer) As Long
'preenche colInfoParcPag com dados das parcelas de titulos nao baixados que sofreram baixas atraves de um pagto
'iTitulosBaixados pode ter os valores zero ou um p/indicar se deve tratar parcelas de titulos baixados ou nao
'OBS: apenas parte dos dados de ClassInfoParcPag sao preenchidos
Dim lErro As Long, lComando As Long, objInfoParcPag As ClassInfoParcPag
Dim dBaixasParcPagValorBaixado As Double, dBaixasParcPagValorMulta As Double, dBaixasParcPagValorJuros As Double, dBaixasParcPagValorDesconto As Double
Dim sFornecedoresNomeReduzido As String, sTitulosPagSiglaDocumento As String, lTitulosPagNumTitulo As Long, dtTitulosPagDataEmissao As Date, iTitulosPagFilial As Integer, iParcelasPagNumParcela As Integer, dtParcelasPagDataVencimento As Date, dParcelasPagValor As Double
On Error GoTo Erro_ParcelasPag_Le_MovContaCorrente1

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 7809

    sFornecedoresNomeReduzido = String(STRING_FORNECEDOR_NOME_REDUZIDO, 0)
    sTitulosPagSiglaDocumento = String(STRING_SIGLA_DOCUMENTO, 0)

    If iTitulosBaixados <> 0 Then
        'obter dados de parcelas em titulos baixados
        lErro = Comando_Executar(lComando, "SELECT BaixasParcPag.ValorBaixado, BaixasParcPag.ValorMulta, BaixasParcPag.ValorJuros, BaixasParcPag.ValorDesconto, " & _
        "Fornecedores.NomeReduzido, TitulosPagBaixados.SiglaDocumento, TitulosPagBaixados.NumTitulo, TitulosPagBaixados.DataEmissao, TitulosPagBaixados.Filial, ParcelasPagBaixadas.NumParcela, ParcelasPagBaixadas.DataVencimento, ParcelasPagBaixadas.Valor " & _
        "FROM BaixasPag, BaixasParcPag, ParcelasPagBaixadas, TitulosPagBaixados, Fornecedores WHERE BaixasPag.NumMovCta = ? AND BaixasPag.NumIntBaixa = BaixasParcPag.NumIntBaixa AND BaixasParcPag.NumIntParcela = ParcelasPagBaixadas.NumIntDoc AND ParcelasPagBaixadas.NumIntTitulo = TitulosPagBaixados.NumIntDoc AND TitulosPagBaixados.Fornecedor = Fornecedores.Codigo", _
        dBaixasParcPagValorBaixado, dBaixasParcPagValorMulta, dBaixasParcPagValorJuros, dBaixasParcPagValorDesconto, _
        sFornecedoresNomeReduzido, sTitulosPagSiglaDocumento, lTitulosPagNumTitulo, dtTitulosPagDataEmissao, iTitulosPagFilial, iParcelasPagNumParcela, dtParcelasPagDataVencimento, dParcelasPagValor, objMovContaCorrente.lNumMovto)
    Else
        'obter dados de parcelas em titulos nao baixados
        lErro = Comando_Executar(lComando, "SELECT BaixasParcPag.ValorBaixado, BaixasParcPag.ValorMulta, BaixasParcPag.ValorJuros, BaixasParcPag.ValorDesconto, " & _
        "Fornecedores.NomeReduzido, TitulosPag.SiglaDocumento, TitulosPag.NumTitulo, TitulosPag.DataEmissao, TitulosPag.Filial, ParcelasPag.NumParcela, ParcelasPag.DataVencimento, ParcelasPag.Valor " & _
        "FROM BaixasPag, BaixasParcPag, ParcelasPag, TitulosPag, Fornecedores WHERE BaixasPag.NumMovCta = ? AND BaixasPag.NumIntBaixa = BaixasParcPag.NumIntBaixa AND BaixasParcPag.NumIntParcela = ParcelasPag.NumIntDoc AND ParcelasPag.NumIntTitulo = TitulosPag.NumIntDoc AND TitulosPag.Fornecedor = Fornecedores.Codigo", _
        dBaixasParcPagValorBaixado, dBaixasParcPagValorMulta, dBaixasParcPagValorJuros, dBaixasParcPagValorDesconto, _
        sFornecedoresNomeReduzido, sTitulosPagSiglaDocumento, lTitulosPagNumTitulo, dtTitulosPagDataEmissao, iTitulosPagFilial, iParcelasPagNumParcela, dtParcelasPagDataVencimento, dParcelasPagValor, objMovContaCorrente.lNumMovto)
    End If
    If lErro <> AD_SQL_SUCESSO Then Error 7810

    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7811

    Do While lErro = AD_SQL_SUCESSO

        Set objInfoParcPag = New ClassInfoParcPag

        objInfoParcPag.dValorOriginal = dParcelasPagValor
        objInfoParcPag.dtDataVencimento = dtParcelasPagDataVencimento
        objInfoParcPag.iNumParcela = iParcelasPagNumParcela
        objInfoParcPag.iFilialForn = iTitulosPagFilial
        objInfoParcPag.lNumTitulo = lTitulosPagNumTitulo
        objInfoParcPag.dtDataEmissao = dtTitulosPagDataEmissao
        objInfoParcPag.sSiglaDocumento = sTitulosPagSiglaDocumento
        objInfoParcPag.sNomeRedForn = sFornecedoresNomeReduzido
        objInfoParcPag.dValor = dBaixasParcPagValorBaixado
        objInfoParcPag.dValorMulta = dBaixasParcPagValorMulta
        objInfoParcPag.dValorJuros = dBaixasParcPagValorJuros
        objInfoParcPag.dValorDesconto = dBaixasParcPagValorDesconto

        colInfoParcPag.Add objInfoParcPag

        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7812

    Loop

    Call Comando_Fechar(lComando)

    ParcelasPag_Le_MovContaCorrente1 = SUCESSO

    Exit Function

Erro_ParcelasPag_Le_MovContaCorrente1:

    ParcelasPag_Le_MovContaCorrente1 = Err

    Select Case Err

        Case 7809
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 7810, 7811, 7812
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_PAG2", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148581)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function CarteirasCobrador_Le(ByVal objCobrador As ClassCobrador, ByVal colCarteirasCobrador As Collection) As Long
'preenche uma colecao com as carteiras de um cobrador
'objCobrador.iCodigo tem que estar preenchido

Dim lErro As Long, lComando As Long, objCarteiraCobrador As ClassCarteiraCobrador
Dim tCarteiraCobrador As typeCarteiraCobrador

On Error GoTo Erro_CarteirasCobrador_Le

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 7953

    tCarteiraCobrador.sCodCarteiraNoBanco = String(STRING_COD_CARTEIRA_COBR_BANCO, 0)
    tCarteiraCobrador.sContaContabil = String(STRING_CONTA, 0)
    tCarteiraCobrador.sContaDuplDescontadas = String(STRING_CONTA, 0)
    tCarteiraCobrador.sFaixaNossoNumeroFinal = String(STRING_NOSSO_NUMERO, 0)
    tCarteiraCobrador.sFaixaNossoNumeroInicial = String(STRING_NOSSO_NUMERO, 0)
    tCarteiraCobrador.sFaixaNossoNumeroProx = String(STRING_NOSSO_NUMERO, 0)
    tCarteiraCobrador.sNomeNoBanco = String(STRING_NOME_CARTEIRA_COBR_BANCO, 0)
    
    tCarteiraCobrador.iCobrador = objCobrador.iCodigo
    
    lErro = Comando_Executar(lComando, "SELECT CodCarteiraCobranca, Desativada, ContaContabil, ContaDuplDescontadas, DiasDeRetencao, " & _
    "TaxaCobranca, TaxaDesconto, FaixaNossoNumeroInicial, FaixaNossoNumeroFinal, FaixaNossoNumeroProx, " & _
    "NomeNoBanco, CodCarteiraNoBanco, NumCarteiraNoBanco, QuantidadeAtual, QuantidadeAtualBanco, SaldoAtual, SaldoAtualBanco, " & _
    "ImprimeBoleta,ComRegistro,GeraNossoNumero, FormPreImp FROM CarteirasCobrador WHERE Cobrador = ?", _
    tCarteiraCobrador.iCodCarteiraCobranca, tCarteiraCobrador.iDesativada, tCarteiraCobrador.sContaContabil, tCarteiraCobrador.sContaDuplDescontadas, tCarteiraCobrador.iDiasDeRetencao, _
    tCarteiraCobrador.dTaxaCobranca, tCarteiraCobrador.dTaxaDesconto, tCarteiraCobrador.sFaixaNossoNumeroInicial, tCarteiraCobrador.sFaixaNossoNumeroFinal, tCarteiraCobrador.sFaixaNossoNumeroProx, _
    tCarteiraCobrador.sNomeNoBanco, tCarteiraCobrador.sCodCarteiraNoBanco, tCarteiraCobrador.iNumCarteiraNoBanco, tCarteiraCobrador.lQuantidadeAtual, tCarteiraCobrador.lQuantidadeAtualBanco, _
    tCarteiraCobrador.dSaldoAtual, tCarteiraCobrador.dSaldoAtualBanco, tCarteiraCobrador.iImprimeBoleta, tCarteiraCobrador.iComRegistro, tCarteiraCobrador.iGeraNossoNumero, tCarteiraCobrador.iFormPreImp, _
    objCobrador.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 7954

    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7955
    
    Do While lErro = AD_SQL_SUCESSO
    
        Set objCarteiraCobrador = New ClassCarteiraCobrador
        
        objCarteiraCobrador.dSaldoAtual = tCarteiraCobrador.dSaldoAtual
        objCarteiraCobrador.dSaldoAtualBanco = tCarteiraCobrador.dSaldoAtualBanco
        objCarteiraCobrador.dTaxaCobranca = tCarteiraCobrador.dTaxaCobranca
        objCarteiraCobrador.dTaxaDesconto = tCarteiraCobrador.dTaxaDesconto
        objCarteiraCobrador.iCobrador = tCarteiraCobrador.iCobrador
        objCarteiraCobrador.iCodCarteiraCobranca = tCarteiraCobrador.iCodCarteiraCobranca
        objCarteiraCobrador.iDesativada = tCarteiraCobrador.iDesativada
        objCarteiraCobrador.iDiasDeRetencao = tCarteiraCobrador.iDiasDeRetencao
        objCarteiraCobrador.iNumCarteiraNoBanco = tCarteiraCobrador.iNumCarteiraNoBanco
        objCarteiraCobrador.lQuantidadeAtual = tCarteiraCobrador.lQuantidadeAtual
        objCarteiraCobrador.lQuantidadeAtualBanco = tCarteiraCobrador.lQuantidadeAtualBanco
        objCarteiraCobrador.sCodCarteiraNoBanco = tCarteiraCobrador.sCodCarteiraNoBanco
        objCarteiraCobrador.sContaContabil = tCarteiraCobrador.sContaContabil
        objCarteiraCobrador.sContaDuplDescontadas = tCarteiraCobrador.sContaDuplDescontadas
        objCarteiraCobrador.sFaixaNossoNumeroFinal = tCarteiraCobrador.sFaixaNossoNumeroFinal
        objCarteiraCobrador.sFaixaNossoNumeroInicial = tCarteiraCobrador.sFaixaNossoNumeroInicial
        objCarteiraCobrador.sFaixaNossoNumeroProx = tCarteiraCobrador.sFaixaNossoNumeroProx
        objCarteiraCobrador.sNomeNoBanco = tCarteiraCobrador.sNomeNoBanco
        objCarteiraCobrador.iImprimeBoleta = tCarteiraCobrador.iImprimeBoleta
        objCarteiraCobrador.iGeraNossoNumero = tCarteiraCobrador.iGeraNossoNumero
        objCarteiraCobrador.iComRegistro = tCarteiraCobrador.iComRegistro
        objCarteiraCobrador.iFormPreImp = tCarteiraCobrador.iFormPreImp
        
        'coloca na colecao
        colCarteirasCobrador.Add objCarteiraCobrador
        
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7956
    
    Loop
    
    lErro = Comando_Fechar(lComando)
    
    CarteirasCobrador_Le = SUCESSO

    Exit Function
    
Erro_CarteirasCobrador_Le:

    CarteirasCobrador_Le = Err
    
    Select Case Err

        Case 7953
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 7954, 7955, 7956
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CARTEIRAS_COBRADOR", Err)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148582)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function ParcelasRec_Le_SemChequePre(ByVal lCodCliente As Long, ByVal iFilialCliente As Integer, ByVal colInfoParcRec As Collection) As Long
'Le informacoes sobre parcelas a receber de um cliente que sejam candidatas a associacao com um cheque pre

Dim objInfoParcRec As ClassInfoParcRec, objInfoParcRecAux As ClassInfoParcRec
Dim lErro As Long, bAchou As Boolean
Dim lComando As Long
Dim lComando1 As Long
Dim dSomaValorRecbeto As Double

Dim tInfoParcRec As typeInfoParcRec

On Error GoTo Erro_ParcelasRec_Le_SemChequePre

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 7693
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 7693
    
    tInfoParcRec.sSiglaDocumento = String(STRING_SIGLA_DOCUMENTO, 0)

    If giFilialEmpresa = EMPRESA_TODA Or giFilialEmpresa = gobjCR.iFilialCentralizadora Then
        'Alterado por Wagner
        lErro = Comando_Executar(lComando, "SELECT ParcelasRec.NumIntDoc, ParcelasRec.DataVencimento, ParcelasRec.Valor, ParcelasRec.Saldo,ParcelasRec.NumParcela,ParcelasRec.DataVencimentoReal, TitulosRec.NumTitulo, TitulosRec.SiglaDocumento, TitulosRec.FilialEmpresa FROM ParcelasRec, TitulosRec WHERE ParcelasRec.NumIntTitulo = TitulosRec.NumIntDoc AND TitulosRec.Cliente = ? AND TitulosRec.Filial = ? AND ParcelasRec.Status <> ? AND ParcelasRec.Status <> ? AND ParcelasRec.Cobrador = 1 ORDER BY ParcelasRec.DataVencimento", _
        tInfoParcRec.lNumIntParc, tInfoParcRec.dtVencimento, tInfoParcRec.dValor, tInfoParcRec.dSaldo, tInfoParcRec.iNumParcela, tInfoParcRec.dtDataVencimentoReal, tInfoParcRec.lNumTitulo, tInfoParcRec.sSiglaDocumento, tInfoParcRec.iFilialEmpresa, lCodCliente, iFilialCliente, STATUS_EXCLUIDO, STATUS_BAIXADO)
    Else
        'Alterado por Wagner
        lErro = Comando_Executar(lComando, "SELECT ParcelasRec.NumIntDoc, ParcelasRec.DataVencimento, ParcelasRec.Valor, ParcelasRec.Saldo,ParcelasRec.NumParcela,ParcelasRec.DataVencimentoReal, TitulosRec.NumTitulo, TitulosRec.SiglaDocumento, TitulosRec.FilialEmpresa FROM ParcelasRec, TitulosRec WHERE ParcelasRec.NumIntTitulo = TitulosRec.NumIntDoc AND TitulosRec.FilialEmpresa = ? AND TitulosRec.Cliente = ? AND TitulosRec.Filial = ? AND ParcelasRec.Status <> ? AND ParcelasRec.Status <> ? AND ParcelasRec.Cobrador = 1 ORDER BY ParcelasRec.DataVencimento", _
        tInfoParcRec.lNumIntParc, tInfoParcRec.dtVencimento, tInfoParcRec.dValor, tInfoParcRec.dSaldo, tInfoParcRec.iNumParcela, tInfoParcRec.dtDataVencimentoReal, tInfoParcRec.lNumTitulo, tInfoParcRec.sSiglaDocumento, tInfoParcRec.iFilialEmpresa, giFilialEmpresa, lCodCliente, iFilialCliente, STATUS_EXCLUIDO, STATUS_BAIXADO)
    End If

    If lErro <> AD_SQL_SUCESSO Then gError 7694

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 7695
        
    Do While lErro <> AD_SQL_SEM_DADOS
    
        '??? futuramente pode ser eliminado este teste se for passado o numintcheque que está sendo carregado
        'se a parcela já está na colecao nao vai entrar mais
        bAchou = False
        For Each objInfoParcRecAux In colInfoParcRec
        
            If objInfoParcRecAux.lNumIntParc = tInfoParcRec.lNumIntParc Then
                bAchou = True
                Exit For
            End If
        Next
        
        If bAchou = False Then
        
            lErro = Comando_Executar(lComando1, "SELECT SUM(ChequeParcelaRec.ValorRecebto-ChequeParcelaRec.Juros-ChequeParcelaRec.Multa+ChequeParcelaRec.Desconto) FROM ChequeParcelaRec, ChequePre WHERE ChequePre.NumBordero = 0 AND ChequeParcelaRec.NumIntCheque = ChequePre.NumIntCheque AND ChequeParcelaRec.NumIntParcela = ? AND NOT ChequePre.NumIntCheque IN (Select NumIntCheque FROM ChequeBordero WHERE ChequeBordero.NumIntCheque = ChequePre.NumIntCheque) AND NOT ChequePre.NumIntCheque IN (SELECT NumIntCheque FROM BaixasRec WHERE BaixasRec.Status <> 5 AND BaixasRec.NumIntCheque = ChequePre.NumIntCheque AND BaixasRec.FilialEmpresaCheque = ChequePre.FilialEmpresa)", dSomaValorRecbeto, tInfoParcRec.lNumIntParc)
            If lErro <> AD_SQL_SUCESSO Then gError 91341
    
            lErro = Comando_BuscarPrimeiro(lComando1)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 91342
            
            If tInfoParcRec.dSaldo - dSomaValorRecbeto > DELTA_VALORMONETARIO Then
    
                Set objInfoParcRec = New ClassInfoParcRec
    
                objInfoParcRec.lNumIntParc = tInfoParcRec.lNumIntParc
                objInfoParcRec.dtVencimento = tInfoParcRec.dtVencimento
                objInfoParcRec.dtDataVencimentoReal = tInfoParcRec.dtDataVencimentoReal
                objInfoParcRec.dValor = tInfoParcRec.dValor
                objInfoParcRec.iNumParcela = tInfoParcRec.iNumParcela
                objInfoParcRec.lNumTitulo = tInfoParcRec.lNumTitulo
                objInfoParcRec.sSiglaDocumento = tInfoParcRec.sSiglaDocumento
                objInfoParcRec.dSaldoParcela = Round(tInfoParcRec.dSaldo - dSomaValorRecbeto, 2)
                objInfoParcRec.iMarcada = 0
    
                'Alterado por Wagner
                objInfoParcRec.iFilialEmpresa = tInfoParcRec.iFilialEmpresa
                
                colInfoParcRec.Add objInfoParcRec
        
            End If
    
        End If
        
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 7696

    Loop

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    ParcelasRec_Le_SemChequePre = SUCESSO

    Exit Function

Erro_ParcelasRec_Le_SemChequePre:

    ParcelasRec_Le_SemChequePre = gErr

    Select Case gErr

        Case 7693
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 7694, 7695, 7696
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELASREC_SEM_CHEQUEPRE", gErr)

        Case 91341, 91342
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUEPARCELAREC", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148583)

    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Function ParcelasReceber_Le_ChequePre(ByVal objChequePre As ClassChequePre, ByVal colInfoParcRec As Collection) As Long
'Le informacoes sobre as Parcelas a Receber associadas ao Cheque Pre passado em objChequePre
'e preenche colInfoParcRec com estas informacoes

Dim objInfoParcRec As ClassInfoParcRec
Dim lErro As Long, lComando1 As Long
Dim lComando As Long, dSomaValorChequesPre As Double
Dim tInfoParcRec As typeInfoParcRec

On Error GoTo Erro_ParcelasReceber_Le_ChequePre

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 17687
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 17687

    tInfoParcRec.sSiglaDocumento = String(STRING_SIGLA_DOCUMENTO, 0)
    
    'Janaina
    'Alterado por Wagner
    lErro = Comando_Executar(lComando, "SELECT ParcelasRec.NumIntDoc, ParcelasRec.DataVencimento,ParcelasRec.DataVencimentoReal,  ParcelasRec.Valor, ParcelasRec.NumParcela, TitulosRec.NumTitulo, TitulosRec.SiglaDocumento, ParcelasRec.Saldo,ChequeParcelaRec.ValorRecebto,ChequeParcelaRec.Juros, ChequeParcelaRec.Multa, ChequeParcelaRec.Desconto, TitulosRec.FilialEmpresa  FROM ParcelasRec, TitulosRec,ChequeParcelaRec WHERE ParcelasRec.NumIntTitulo = TitulosRec.NumIntDoc AND ParcelasRec.NumIntDoc = ChequeParcelaRec.NumIntParcela AND ChequeParcelaRec.NumIntCheque = ? ORDER BY ParcelasRec.DataVencimento", _
        tInfoParcRec.lNumIntParc, tInfoParcRec.dtVencimento, tInfoParcRec.dtDataVencimentoReal, tInfoParcRec.dValor, tInfoParcRec.iNumParcela, tInfoParcRec.lNumTitulo, tInfoParcRec.sSiglaDocumento, tInfoParcRec.dSaldo, tInfoParcRec.dValorRecebto, tInfoParcRec.dValorJuros, tInfoParcRec.dValorMulta, tInfoParcRec.dValorDesconto, tInfoParcRec.iFilialEmpresa, objChequePre.lNumIntCheque)
    'Janaina
    
    If lErro <> AD_SQL_SUCESSO Then gError 17688

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 17689

    Do While lErro <> AD_SQL_SEM_DADOS

        Set objInfoParcRec = New ClassInfoParcRec

        objInfoParcRec.lNumIntParc = tInfoParcRec.lNumIntParc
        objInfoParcRec.dtVencimento = tInfoParcRec.dtVencimento
        objInfoParcRec.dtDataVencimentoReal = tInfoParcRec.dtDataVencimentoReal
        objInfoParcRec.dValor = tInfoParcRec.dValor
        objInfoParcRec.iNumParcela = tInfoParcRec.iNumParcela
        objInfoParcRec.lNumTitulo = tInfoParcRec.lNumTitulo
        objInfoParcRec.sSiglaDocumento = tInfoParcRec.sSiglaDocumento
        objInfoParcRec.dValorReceber = tInfoParcRec.dValorRecebto
        objInfoParcRec.dValorJuros = tInfoParcRec.dValorJuros
        objInfoParcRec.dValorMulta = tInfoParcRec.dValorMulta
        objInfoParcRec.dValorDesconto = tInfoParcRec.dValorDesconto

        dSomaValorChequesPre = 0
        
        lErro = Comando_Executar(lComando1, "SELECT SUM(ChequeParcelaRec.ValorRecebto-ChequeParcelaRec.Juros-ChequeParcelaRec.Multa+ChequeParcelaRec.Desconto) FROM ChequeParcelaRec, ChequePre WHERE ChequePre.Localizacao = 0 AND ChequeParcelaRec.NumIntCheque = ChequePre.NumIntCheque AND ChequeParcelaRec.NumIntParcela = ? AND ChequeParcelaRec.NumIntCheque <> ?", dSomaValorChequesPre, tInfoParcRec.lNumIntParc, objChequePre.lNumIntCheque)
        If lErro <> AD_SQL_SUCESSO Then gError 81700

        lErro = Comando_BuscarPrimeiro(lComando1)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 81701
        
        objInfoParcRec.dSaldoParcela = Round(tInfoParcRec.dSaldo - dSomaValorChequesPre, 2)
        
        objInfoParcRec.iMarcada = 1

        'Alterado por Wagner
        objInfoParcRec.iFilialEmpresa = tInfoParcRec.iFilialEmpresa

        colInfoParcRec.Add objInfoParcRec

        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 17690

    Loop

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    ParcelasReceber_Le_ChequePre = SUCESSO

    Exit Function

Erro_ParcelasReceber_Le_ChequePre:

    ParcelasReceber_Le_ChequePre = gErr

    Select Case gErr

        Case 17687
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 17688, 17689, 17690
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELASREC_TITULOSREC", gErr, objChequePre.lNumIntCheque)

        Case 81700, 81701
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUEPARCELAREC", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148584)

    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Function FilialCliente_Le_NomeRed_CodFilial(ByVal sNomeRed As String, ByVal objFilialCliente As ClassFilialCliente) As Long
'Le a FilialClliente a partir do NomeReduzido do Cliente passado em sNomeRed
'Le do código da Filial passado em objFilialCliente. Devolve a Filial em objFilialCiente.

Dim lErro As Long
Dim lComando As Long
Dim tFilialCliente As typeFilialCliente
Dim sNome As String

On Error GoTo Erro_FilialCliente_Le_NomeRed_CodFilial

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 17657

    tFilialCliente.sNome = String(STRING_FILIAL_CLIENTE_NOME, 0)
    tFilialCliente.sCgc = String(STRING_CGC, 0)
    tFilialCliente.sRG = String(STRING_RG, 0)
    tFilialCliente.sInscricaoEstadual = String(STRING_INSCR_EST, 0)
    tFilialCliente.sInscricaoMunicipal = String(STRING_INSCR_MUN, 0)
    tFilialCliente.sInscricaoSuframa = String(STRING_INSCR_SUF, 0)
    tFilialCliente.sObservacao = String(STRING_CLIENTE_OBSERVACAO, 0)
    tFilialCliente.sContaContabil = String(STRING_CONTA, 0)
    tFilialCliente.sGuia = String(STRING_CLIENTE_GUIA, 0)

    '###########################################
    'Alterado por Wagner 27/09/05
    'Incluido campo CodMensagem
    lErro = Comando_Executar(lComando, "SELECT FiliaisClientes.IENaoContrib, FiliaisClientes.IEIsento, FiliaisClientes.RegimeTributario,FiliaisClientes.CodCliente, FiliaisClientes.Nome, FiliaisClientes.CGC,  FiliaisClientes.InscricaoEstadual, FiliaisClientes.InscricaoMunicipal,FiliaisClientes.InscricaoSuframa, FiliaisClientes.Endereco, FiliaisClientes.EnderecoEntrega, FiliaisClientes.EnderecoCobranca, FiliaisClientes.CodTransportadora, FiliaisClientes.Observacao, FiliaisClientes.ContaContabil, FiliaisClientes.Vendedor, FiliaisClientes.ComissaoVendas, FiliaisClientes.Regiao, FiliaisClientes.FreqVisitas, FiliaisClientes.DataUltVisita, FiliaisClientes.CodCobrador, FiliaisClientes.TipoFrete, RG, CodTranspRedesp, DetPagFrete, Guia, FiliaisClientes.CodMensagem FROM FiliaisClientes, Clientes WHERE FiliaisClientes.CodFilial = ? AND FiliaisClientes.CodCliente = Clientes.Codigo AND Clientes.NomeReduzido = ?", _
        tFilialCliente.iIENaoContrib, tFilialCliente.iIEIsento, tFilialCliente.iRegimeTributario, tFilialCliente.lCodCliente, tFilialCliente.sNome, tFilialCliente.sCgc, tFilialCliente.sInscricaoEstadual, tFilialCliente.sInscricaoMunicipal, tFilialCliente.sInscricaoSuframa, tFilialCliente.lEndereco, tFilialCliente.lEnderecoEntrega, tFilialCliente.lEnderecoCobranca, tFilialCliente.iCodTransportadora, tFilialCliente.sObservacao, tFilialCliente.sContaContabil, tFilialCliente.iVendedor, tFilialCliente.dComissaoVendas, tFilialCliente.iRegiao, tFilialCliente.iFreqVisitas, tFilialCliente.dtDataUltVisita, tFilialCliente.iCodCobrador, tFilialCliente.iTipoFrete, tFilialCliente.sRG, tFilialCliente.iCodTranspRedesp, tFilialCliente.iDetPagFrete, tFilialCliente.sGuia, tFilialCliente.iCodMensagem, objFilialCliente.iCodFilial, sNomeRed)
    If lErro <> SUCESSO Then Error 17658
    '###########################################

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 17659

    If lErro = AD_SQL_SEM_DADOS Then Error 17660

    objFilialCliente.lCodCliente = tFilialCliente.lCodCliente
    objFilialCliente.sNome = tFilialCliente.sNome
    objFilialCliente.sCgc = tFilialCliente.sCgc
    objFilialCliente.sRG = tFilialCliente.sRG
    objFilialCliente.sInscricaoEstadual = tFilialCliente.sInscricaoEstadual
    objFilialCliente.sInscricaoMunicipal = tFilialCliente.sInscricaoMunicipal
    objFilialCliente.sInscricaoSuframa = tFilialCliente.sInscricaoSuframa
    objFilialCliente.lEndereco = tFilialCliente.lEndereco
    objFilialCliente.lEnderecoEntrega = tFilialCliente.lEnderecoEntrega
    objFilialCliente.lEnderecoCobranca = tFilialCliente.lEnderecoCobranca
    objFilialCliente.iCodTransportadora = tFilialCliente.iCodTransportadora
    objFilialCliente.sObservacao = tFilialCliente.sObservacao
    objFilialCliente.sContaContabil = tFilialCliente.sContaContabil
    objFilialCliente.iVendedor = tFilialCliente.iVendedor
    objFilialCliente.dComissaoVendas = tFilialCliente.dComissaoVendas
    objFilialCliente.iRegiao = tFilialCliente.iRegiao
    objFilialCliente.iFreqVisitas = tFilialCliente.iFreqVisitas
    objFilialCliente.dtDataUltVisita = tFilialCliente.dtDataUltVisita
    objFilialCliente.iCodCobrador = tFilialCliente.iCodCobrador
    objFilialCliente.iTipoFrete = tFilialCliente.iTipoFrete
    objFilialCliente.iCodTranspRedesp = tFilialCliente.iCodTranspRedesp
    objFilialCliente.iDetPagFrete = tFilialCliente.iDetPagFrete
    objFilialCliente.sGuia = tFilialCliente.sGuia
    objFilialCliente.iCodMensagem = tFilialCliente.iCodMensagem 'Inserido por Wagner
    objFilialCliente.iRegimeTributario = tFilialCliente.iRegimeTributario
    objFilialCliente.iIEIsento = tFilialCliente.iIEIsento
    objFilialCliente.iIENaoContrib = tFilialCliente.iIENaoContrib
    
    Call Comando_Fechar(lComando)

    FilialCliente_Le_NomeRed_CodFilial = SUCESSO

    Exit Function

Erro_FilialCliente_Le_NomeRed_CodFilial:

    FilialCliente_Le_NomeRed_CodFilial = Err

    Select Case Err

        Case 17657
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 17658, 17659
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIAISFORNECEDORES1", Err, sNomeRed, objFilialCliente.iCodFilial)

        Case 17660 'será tratado na rotina chamadora.

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, 148585)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function ParcelasPagar_Le_BaixaManual(ByVal lCodForn As Long, ByVal iFilialForn As Integer, ByVal dtEmissaoInic As Date, ByVal dtEmissaoFim As Date, ByVal dtVencInic As Date, ByVal dtVencFim As Date, ByVal lTituloInic As Long, ByVal lTituloFim As Long, ByVal colInfoParcPag As Collection, Optional ByVal sTipoDoc As String = "", Optional ByVal iStatusParc As Integer = STATUS_ABERTO) As Long
'preenche a colecao com informacoes de parcelas a pagar a partir dos criterios informados
'datas nao preenchidas devem ser passadas como DATA_NULA
'numeros de titulo nao preenchidos devem ser passados como zero
'IMPORTANTE: nao estou preenchendo a razao social e o nome reduzido do fornecedor nos objetos armazenados na colecao
'iStatusParc vem com STATUS_SUSPENSO qdo esta funcao é utilizada pela tela de liberacao de pagtos

Dim lErro As Long, sSelect As String
Dim lComando As Long, lComandoPortador As Long, sNomeRedPortador As String
Dim iFilialEmpresa As Integer
'buffers para receber registros das parcelas
Dim viTitulosPagFilialEmpresa As Variant, vlTitulosPagNumTitulo As Variant, vdtTitulosPagDataEmissao As Variant, vsTituloPagSiglaDocumento As Variant
Dim vlParcelasPagNumIntDoc As Variant, viParcelasPagNumParcela As Variant, vdtParcelasPagDataVencimento As Variant, vdParcelasPagSaldo As Variant, vdParcelasPagValor As Variant, viParcelasPagTipoCobranca As Variant, viParcelasPagPortador As Variant, viParcelasPagBancoCobrador As Variant

Dim viStatusAberto As Variant, vlCodForn As Variant, viFilialForn As Variant
Dim vlFornecedor As Variant
Dim viFilial As Variant

On Error GoTo Erro_ParcelasPagar_Le_BaixaManual

    viStatusAberto = iStatusParc
    vlCodForn = lCodForn
    viFilialForn = iFilialForn

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 27037

    lComandoPortador = Comando_Abrir()
    If lComandoPortador = 0 Then Error 27038

    vsTituloPagSiglaDocumento = String(STRING_SIGLA_DOCUMENTO, 0)
    viTitulosPagFilialEmpresa = CInt(0)
    vlTitulosPagNumTitulo = CLng(0)
    vdtTitulosPagDataEmissao = DATA_NULA
    vlParcelasPagNumIntDoc = CLng(0)
    viParcelasPagNumParcela = CInt(0)
    vdtParcelasPagDataVencimento = DATA_NULA
    vdParcelasPagSaldo = CDbl(0)
    vdParcelasPagValor = CDbl(0)
    viParcelasPagTipoCobranca = CInt(0)
    viParcelasPagPortador = CInt(0)
    viParcelasPagBancoCobrador = CInt(0)
    vlFornecedor = CLng(0)
    viFilial = CInt(0)
    
    Call CF("ParcelasPagar_Le_BaixaManual1", sSelect, dtEmissaoInic, dtEmissaoFim, dtVencInic, dtVencFim, lTituloInic, lTituloFim, lCodForn, iFilialForn, sTipoDoc)
    
    'executa a preparacao da parte fixa do SELECT
    lErro = ParcelasPagar_Le_BaixaManual2(lComando, sSelect, viTitulosPagFilialEmpresa, vlTitulosPagNumTitulo, vdtTitulosPagDataEmissao, vsTituloPagSiglaDocumento, vlParcelasPagNumIntDoc, viParcelasPagNumParcela, vdtParcelasPagDataVencimento, vdParcelasPagSaldo, vdParcelasPagValor, viParcelasPagTipoCobranca, viParcelasPagPortador, viParcelasPagBancoCobrador, viStatusAberto, vlFornecedor, viFilial)
    If lErro <> SUCESSO Then Error 27039

    'complementa a passagem dos parametros que variam de acordo com a selecao do usuario
    'e executa o SELECT p/obtencao das parcelas
    lErro = CF("ParcelasPagar_Le_BaixaManual3", lComando, dtEmissaoInic, dtEmissaoFim, dtVencInic, dtVencFim, lTituloInic, lTituloFim, lCodForn, iFilialForn, sTipoDoc)
    If lErro <> SUCESSO Then Error 27040
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 27041

    If lErro = AD_SQL_SEM_DADOS Then Error 27042

    Do While lErro = AD_SQL_SUCESSO
        
        'obtem dados do portador
        lErro = Portador_ObterNomeReduzido(viParcelasPagPortador, sNomeRedPortador, lComandoPortador)
        If lErro <> SUCESSO Then Error 27043

        ' inclui a parcela lida na colecao
        Call ParcelasPagar_Le_BaixaManual4(colInfoParcPag, viTitulosPagFilialEmpresa, vdtParcelasPagDataVencimento, vdParcelasPagSaldo, vdParcelasPagValor, viParcelasPagBancoCobrador, viParcelasPagNumParcela, viParcelasPagPortador, viParcelasPagTipoCobranca, vlParcelasPagNumIntDoc, vlTitulosPagNumTitulo, vdtTitulosPagDataEmissao, vsTituloPagSiglaDocumento, sNomeRedPortador, vlFornecedor, viFilial)

        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 27044

    Loop

    lErro = Comando_Fechar(lComando)
    lErro = Comando_Fechar(lComandoPortador)

    ParcelasPagar_Le_BaixaManual = SUCESSO
    
    Exit Function
    
Erro_ParcelasPagar_Le_BaixaManual:

    ParcelasPagar_Le_BaixaManual = Err
    
    Select Case Err

        Case 27039, 27040, 27043

        Case 27037, 27038
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 27041, 27044
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_PAG", Err)

        Case 27042
            Call Rotina_Erro(vbOKOnly, "ERRO_SEM_PARCELAS_PAG_SEL", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148586)

    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComandoPortador)

    Exit Function

End Function

Sub ParcelasPagar_Le_BaixaManual1(sSelect As String, ByVal dtEmissaoInic As Date, ByVal dtEmissaoFim As Date, ByVal dtVencInic As Date, ByVal dtVencFim As Date, ByVal lTituloInic As Long, ByVal lTituloFim As Long, ByVal lFornecedor As Long, ByVal iFilial As Long, Optional ByVal sTipoDoc As String = "")
'auxiliar a ParcelasPagar_Le_BaixaManual
'monta o SELECT para obtencao das parcelas dinamicamente.
Dim sFrom As String, sWhere As String, sFields As String, sOrderBy As String

    sFields = "TitulosPag.FilialEmpresa , TitulosPag.NumTitulo, TitulosPag.DataEmissao, TitulosPag.SiglaDocumento "
    sFields = sFields & ", ParcelasPag.NumIntDoc, ParcelasPag.NumParcela, ParcelasPag.DataVencimento, ParcelasPag.Saldo, ParcelasPag.Valor, ParcelasPag.TipoCobranca, ParcelasPag.Portador, ParcelasPag.BancoCobrador, TitulosPag.Fornecedor, TitulosPag.Filial "

    sFrom = " FROM ParcelasPag, TitulosPag"
    'sWhere = " WHERE ParcelasPag.Status = ? AND ParcelasPag.NumIntTitulo = TitulosPag.NumIntDoc AND TitulosPag.Fornecedor = ? AND TitulosPag.Filial = ?"

    '###################################################
    'Inserido por Wagner 31/07/2006
    sWhere = " WHERE ParcelasPag.Status = ? AND ParcelasPag.NumIntTitulo = TitulosPag.NumIntDoc "
    
    If lFornecedor <> 0 Then
        sWhere = sWhere & " AND TitulosPag.Fornecedor = ? "
    End If
    
    If iFilial <> 0 Then
        sWhere = sWhere & "AND TitulosPag.Filial = ? "
    End If
    '###################################################
    
    'Se entrar como empresa toda pode pegar titulos de todas as filiais, senao pegar titulos somente da filial corrente
    If giFilialEmpresa <> EMPRESA_TODA And giFilialEmpresa <> gobjCP.iFilialCentralizadora Then
        sWhere = sWhere & " AND TitulosPag.FilialEmpresa = ?"
    End If

    'Se titulo inicial preenchido
    If (lTituloInic <> 0) Then
       sWhere = sWhere & " AND TitulosPag.NumTitulo >= ?"
    End If

    'Se titulo final preenchido
    If (lTituloFim <> 0) Then
       sWhere = sWhere & " AND TitulosPag.NumTitulo <= ?"
    End If

    'Se o limite inicial de data de emissao de titulo estiver preenchido
    If (dtEmissaoInic <> DATA_NULA) Then
       sWhere = sWhere & " AND TitulosPag.DataEmissao >= ?"
    End If

    'Se o limite final de data de emissao de titulo estiver preenchido
    If (dtEmissaoFim <> DATA_NULA) Then
       sWhere = sWhere & " AND TitulosPag.DataEmissao <= ?"
    End If

    'Se o limite inicial de data de vencimento de parcela estiver preenchido
    If (dtVencInic <> DATA_NULA) Then
       sWhere = sWhere & " AND ParcelasPag.DataVencimento >= ?"
    End If

    'Se o limite final de data de vencimento de parcela estiver preenchido
    If (dtVencFim <> DATA_NULA) Then
       sWhere = sWhere & " AND ParcelasPag.DataVencimento <= ?"
    End If
    
    If (sTipoDoc <> "") Then
       sWhere = sWhere & " AND TitulosPag.SiglaDocumento = ?"
    End If

    sOrderBy = " ORDER BY TitulosPag.NumTitulo, ParcelasPag.NumParcela"
    
    sSelect = "SELECT " & sFields & sFrom & sWhere & sOrderBy

End Sub

Private Function ParcelasPagar_Le_BaixaManual2(ByVal lComando As Long, ByVal sSelect As String, vTitulosPagFilialEmpresa As Variant, vTitulosPagNumTitulo As Variant, vTitulosPagDataEmissao As Variant, vTitulosPagSiglaDocumento As Variant, vParcelasPagNumIntDoc As Variant, vParcelasPagNumParcela As Variant, vParcelasPagDataVencimento As Variant, vParcelasPagSaldo As Variant, vParcelasPagValor As Variant, vParcelasPagTipoCobranca As Variant, vParcelasPagPortador As Variant, vParcelasPagBancoCobrador As Variant, vStatusAberto As Variant, vCodForn As Variant, vFilialForn As Variant) As Long
'isola a preparacao da parte fixa do SELECT, serve apenas para diminuir o tamanho de ParcelasPagar_Le_BaixaManual
Dim ret As Integer, lErro As Long
On Error GoTo Erro_ParcelasPagar_Le_BaixaManual2

    ret = Comando_PrepararInt(lComando, sSelect)
    If (ret <> AD_SQL_SUCESSO) Then gError 27016

    ret = Comando_BindVarInt(lComando, vTitulosPagFilialEmpresa)
    If (ret <> AD_SQL_SUCESSO) Then gError 27017

    ret = Comando_BindVarInt(lComando, vTitulosPagNumTitulo)
    If (ret <> AD_SQL_SUCESSO) Then gError 27018

    ret = Comando_BindVarInt(lComando, vTitulosPagDataEmissao)
    If (ret <> AD_SQL_SUCESSO) Then gError 79869
    
    ret = Comando_BindVarInt(lComando, vTitulosPagSiglaDocumento)
    If (ret <> AD_SQL_SUCESSO) Then gError 19469

    ret = Comando_BindVarInt(lComando, vParcelasPagNumIntDoc)
    If (ret <> AD_SQL_SUCESSO) Then gError 27019

    ret = Comando_BindVarInt(lComando, vParcelasPagNumParcela)
    If (ret <> AD_SQL_SUCESSO) Then gError 27020

    ret = Comando_BindVarInt(lComando, vParcelasPagDataVencimento)
    If (ret <> AD_SQL_SUCESSO) Then gError 27021

    ret = Comando_BindVarInt(lComando, vParcelasPagSaldo)
    If (ret <> AD_SQL_SUCESSO) Then gError 27022

    ret = Comando_BindVarInt(lComando, vParcelasPagValor)
    If (ret <> AD_SQL_SUCESSO) Then gError 19393

    ret = Comando_BindVarInt(lComando, vParcelasPagTipoCobranca)
    If (ret <> AD_SQL_SUCESSO) Then gError 27023

    ret = Comando_BindVarInt(lComando, vParcelasPagPortador)
    If (ret <> AD_SQL_SUCESSO) Then gError 27024

    ret = Comando_BindVarInt(lComando, vParcelasPagBancoCobrador)
    If (ret <> AD_SQL_SUCESSO) Then gError 27025

'    ret = Comando_BindVarInt(lComando, vStatusAberto)
'    If (ret <> AD_SQL_SUCESSO) Then gError 27026

    ret = Comando_BindVarInt(lComando, vCodForn)
    If (ret <> AD_SQL_SUCESSO) Then gError 27027

    ret = Comando_BindVarInt(lComando, vFilialForn)
    If (ret <> AD_SQL_SUCESSO) Then gError 27028
    
    ret = Comando_BindVarInt(lComando, vStatusAberto)
    If (ret <> AD_SQL_SUCESSO) Then gError 27026

    ParcelasPagar_Le_BaixaManual2 = SUCESSO

    Exit Function

Erro_ParcelasPagar_Le_BaixaManual2:

    ParcelasPagar_Le_BaixaManual2 = gErr

    Select Case gErr

        Case 27016 To 27028, 19469, 19393, 79869
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_PAG", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148587)

    End Select

    Exit Function

End Function

Function ParcelasPagar_Le_BaixaManual3(ByVal lComando As Long, dtEmissaoInic As Date, dtEmissaoFim As Date, dtVencInic As Date, dtVencFim As Date, lTituloInic As Long, lTituloFim As Long, lFornecedor As Long, iFilial As Integer, Optional ByVal vsTipoDoc As Variant = "") As Long
'auxiliar a ParcelasPagar_Le_BaixaManual
'complementa a passagem dos parametros que variam de acordo com a selecao do usuario e executa o SELECT p/obtencao das parcelas
Dim lErro As Long, ret As Integer, vFilialEmpresa As Variant, vTituloInic As Variant
Dim vTituloFim As Variant, vEmissaoInic As Variant, vEmissaoFim As Variant, vVencInic As Variant, vVencFim As Variant
Dim vlFornecedor As Variant
Dim viFilial As Variant

On Error GoTo Erro_ParcelasPagar_Le_BaixaManual3

    '############################################
    'Inserido por Wagner
    If lFornecedor <> 0 Then
        vlFornecedor = lFornecedor
        ret = Comando_BindVarInt(lComando, vlFornecedor)
        If (ret <> AD_SQL_SUCESSO) Then gError 27029
    End If
    
    If iFilial <> 0 Then
        viFilial = iFilial
        ret = Comando_BindVarInt(lComando, viFilial)
        If (ret <> AD_SQL_SUCESSO) Then gError 27029
    End If
    '############################################
    
    'Se entrar como empresa toda pode pegar titulos de todas as filiais, senao pegar titulos somente da filial corrente
    If giFilialEmpresa <> EMPRESA_TODA And giFilialEmpresa <> gobjCP.iFilialCentralizadora Then
        vFilialEmpresa = giFilialEmpresa
        ret = Comando_BindVarInt(lComando, vFilialEmpresa)
        If (ret <> AD_SQL_SUCESSO) Then Error 27029
    End If

    'Se titulo inicial preenchido
    If (lTituloInic <> 0) Then
        vTituloInic = lTituloInic
        ret = Comando_BindVarInt(lComando, vTituloInic)
        If (ret <> AD_SQL_SUCESSO) Then Error 27030
    End If

    'Se titulo final preenchido
    If (lTituloFim <> 0) Then
        vTituloFim = lTituloFim
        ret = Comando_BindVarInt(lComando, vTituloFim)
        If (ret <> AD_SQL_SUCESSO) Then Error 27031
    End If

    'Se o limite inicial de data de emissao de titulo estiver preenchido
    If (dtEmissaoInic <> DATA_NULA) Then
        vEmissaoInic = dtEmissaoInic
        ret = Comando_BindVarInt(lComando, vEmissaoInic)
        If (ret <> AD_SQL_SUCESSO) Then Error 27032
    End If

    'Se o limite final de data de emissao de titulo estiver preenchido
    If (dtEmissaoFim <> DATA_NULA) Then
        vEmissaoFim = dtEmissaoFim
        ret = Comando_BindVarInt(lComando, vEmissaoFim)
        If (ret <> AD_SQL_SUCESSO) Then Error 27033
    End If

    'Se o limite inicial de data de vencimento de parcela estiver preenchido
    If (dtVencInic <> DATA_NULA) Then
        vVencInic = dtVencInic
        ret = Comando_BindVarInt(lComando, vVencInic)
        If (ret <> AD_SQL_SUCESSO) Then Error 27034
    End If

    'Se o limite final de data de vencimento de parcela estiver preenchido
    If (dtVencFim <> DATA_NULA) Then
        vVencFim = dtVencFim
        ret = Comando_BindVarInt(lComando, vVencFim)
        If (ret <> AD_SQL_SUCESSO) Then Error 27035
    End If
    
    If (vsTipoDoc <> "") Then
        ret = Comando_BindVarInt(lComando, vsTipoDoc)
        If (ret <> AD_SQL_SUCESSO) Then Error 27035
    End If

    ret = Comando_ExecutarInt(lComando)
    If (ret <> AD_SQL_SUCESSO) Then Error 27036

    ParcelasPagar_Le_BaixaManual3 = SUCESSO

    Exit Function
    
Erro_ParcelasPagar_Le_BaixaManual3:

    ParcelasPagar_Le_BaixaManual3 = Err

    Select Case Err

        Case 27029 To 27036
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_PAG", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148588)

    End Select

    Exit Function

End Function

Private Sub ParcelasPagar_Le_BaixaManual4(ByVal colInfoParcPag As Collection, ByVal iTitulosPagFilialEmpresa As Integer, ByVal dtParcelasPagDataVencimento As Date, ByVal dParcelasPagSaldo As Double, ByVal dParcelasPagValor As Double, ByVal iParcelasPagBancoCobrador As Integer, ByVal iParcelasPagNumParcela As Integer, ByVal iParcelasPagPortador As Integer, ByVal iParcelasPagTipoCobranca As Integer, ByVal lParcelasPagNumIntDoc As Long, ByVal lTitulosPagNumTitulo As Long, ByVal dtTitulosPagDataEmissao As Date, ByVal sTituloPagSiglaDocumento As String, ByVal sNomeRedPortador As String, ByVal lCodForn As Long, ByVal iFilialForn As Integer)
'auxiliar a ParcelasPagar_Le_BaixaManual
' inclui a parcela lida na colecao
Dim objInfoParcPag As ClassInfoParcPag

        Set objInfoParcPag = New ClassInfoParcPag

        objInfoParcPag.iFilialEmpresa = iTitulosPagFilialEmpresa
        objInfoParcPag.dtDataVencimento = dtParcelasPagDataVencimento
        objInfoParcPag.dValor = dParcelasPagSaldo
        objInfoParcPag.dValorOriginal = dParcelasPagValor
        objInfoParcPag.iBancoCobrador = iParcelasPagBancoCobrador
        objInfoParcPag.iFilialForn = iFilialForn
        objInfoParcPag.iNumParcela = iParcelasPagNumParcela
        objInfoParcPag.iPortador = iParcelasPagPortador
        objInfoParcPag.iTipoCobranca = iParcelasPagTipoCobranca
        objInfoParcPag.lFornecedor = lCodForn
        objInfoParcPag.lNumIntParc = lParcelasPagNumIntDoc
        objInfoParcPag.dtDataEmissao = dtTitulosPagDataEmissao
        objInfoParcPag.lNumTitulo = lTitulosPagNumTitulo
        objInfoParcPag.sSiglaDocumento = sTituloPagSiglaDocumento
'        objInfoParcPag.sNomeRedForn = sFornecedoresNomeReduzido
        objInfoParcPag.sNomeRedPortador = sNomeRedPortador
'        objInfoParcPag.sRazaoSocialForn = sFornecedoresRazaoSocial
        objInfoParcPag.iSeqCheque = 0

        colInfoParcPag.Add objInfoParcPag

End Sub

Function ParcelasRec_Le_BaixaManualSel(ByVal lCodCli As Long, ByVal iFilialCli As Integer, ByVal dtEmissaoInic As Date, ByVal dtEmissaoFim As Date, ByVal dtVencInic As Date, ByVal dtVencFim As Date, ByVal lTituloInic As Long, ByVal lTituloFim As Long, ByVal colInfoParcRec As Collection, Optional ByVal sTipoDoc As String = "", Optional ByVal lCodViagem As Long = 0, Optional ByVal iFormaPagamento As Integer = 0, Optional ByVal iVendedor As Integer = 0, Optional ByVal iCobrador As Integer = 0, Optional ByVal sProdDe As String = "", Optional ByVal sProdAte As String = "") As Long
'preenche a colecao de parcelas a receber "candidatas" para baixa manual por selecao
'datas nao preenchidas devem ser passadas como DATA_NULA
'numeros de titulo nao preenchidos devem ser passados como zero
'IMPORTANTE: nao estou preenchendo a razao social e o nome reduzido do cliente nos objetos armazenados na colecao
Dim sSelect As String, lErro As Long
Dim lComando As Long, iStatusAberto As Integer
'buffers p/registros pesquisados
Dim lTitulosRecNumTitulo As Long, iTitulosRecFilialEmpresa As Integer, sTitulosRecSiglaDocumento As String
Dim lParcelasRecNumIntDoc As Long, iParcelasRecNumParcela As Integer, dtParcelasRecDataVencimento As Date, dParcelasRecSaldo As Double, dParcelasRecValor As Double, iParcelasRecCobrador As Integer, iParcelasRecCarteiraCobranca As Integer
Dim lCliente As Long, sNossoNumero As String
Dim iFilial As Integer, dtDataEmissao As Date

On Error GoTo Erro_ParcelasRec_Le_BaixaManualSel

    iStatusAberto = STATUS_ABERTO

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 27067

    sTitulosRecSiglaDocumento = String(STRING_SIGLA_DOCUMENTO, 0)
    sNossoNumero = String(STRING_NOSSO_NUMERO, 0)

    'p/montagem do comando SQL SELECT dinamicamente
    Call CF("ParcelasRec_Le_BaixaManualSel1", sSelect, dtEmissaoInic, dtEmissaoFim, dtVencInic, dtVencFim, lTituloInic, lTituloFim, lCodCli, iFilialCli, sTipoDoc, lCodViagem, iFormaPagamento, iVendedor, iCobrador, sProdDe, sProdAte)

    'executa a preparacao da parte fixa do SELECT
    lErro = ParcelasRec_Le_BaixaManualSel2(lComando, sSelect, lTitulosRecNumTitulo, iTitulosRecFilialEmpresa, sTitulosRecSiglaDocumento, lParcelasRecNumIntDoc, iParcelasRecNumParcela, dtParcelasRecDataVencimento, dParcelasRecSaldo, dParcelasRecValor, iParcelasRecCobrador, iParcelasRecCarteiraCobranca, iStatusAberto, lCliente, iFilial, dtDataEmissao, sNossoNumero)
    If lErro <> SUCESSO Then Error 27068

    'complementa a passagem dos parametros que variam de acordo com a selecao do usuario
    'e executa o SELECT p/obtencao das parcelas
    lErro = ParcelasRec_Le_BaixaManualSel3(lComando, dtEmissaoInic, dtEmissaoFim, dtVencInic, dtVencFim, lTituloInic, lTituloFim, lCodCli, iFilialCli, sTipoDoc, lCodViagem, iFormaPagamento, iVendedor, iCobrador)
    If lErro <> SUCESSO Then Error 27069

    'processa todas as parcelas retornadas pelo SELECT executado acima
    lErro = ParcelasRec_Le_BaixaManualSel4(lComando, lTitulosRecNumTitulo, iTitulosRecFilialEmpresa, sTitulosRecSiglaDocumento, lParcelasRecNumIntDoc, iParcelasRecNumParcela, dtParcelasRecDataVencimento, dParcelasRecSaldo, dParcelasRecValor, iParcelasRecCobrador, iParcelasRecCarteiraCobranca, lCliente, iFilial, colInfoParcRec, dtDataEmissao, sNossoNumero)
    If lErro <> SUCESSO Then Error 27070
    
    lErro = Comando_Fechar(lComando)

    ParcelasRec_Le_BaixaManualSel = SUCESSO

    Exit Function

Erro_ParcelasRec_Le_BaixaManualSel:

    ParcelasRec_Le_BaixaManualSel = Err

    Select Case Err

        Case 27068, 27069, 27070

        Case 27067
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148589)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Public Sub ParcelasRec_Le_BaixaManualSel1(sSelect As String, ByVal dtEmissaoInic As Date, ByVal dtEmissaoFim As Date, ByVal dtVencInic As Date, ByVal dtVencFim As Date, ByVal lTituloInic As Long, ByVal lTituloFim As Long, ByVal lCodCli As Long, ByVal iFilialCli As Integer, Optional ByVal sTipoDoc As String = "", Optional ByVal lCodViagem As Long = 0, Optional ByVal iFormaPagamento As Integer = 0, Optional ByVal iVendedor As Integer = 0, Optional ByVal iCobrador As Integer = 0, Optional ByVal sProdDe As String = "", Optional ByVal sProdAte As String = "")
'auxiliar a ParcelasRec_Le_BorderoCobranca
'monta o SELECT dinamicamente
Dim sFrom As String, sWhere As String, sFields As String, sOrderBy As String
Dim sFiltroProd As String

    sFields = "TitulosRec.DataEmissao, TitulosRec.NumTitulo, TitulosRec.FilialEmpresa, TitulosRec.SiglaDocumento, TitulosRec.Cliente, TitulosRec.Filial"
    sFields = sFields & ", ParcelasRec.NumIntDoc, ParcelasRec.NumParcela, ParcelasRec.DataVencimento, ParcelasRec.Saldo, ParcelasRec.Valor, ParcelasRec.Cobrador, ParcelasRec.CarteiraCobranca, ParcelasRec.NumTitCobrador"

    sFrom = " FROM ParcelasRec, TitulosRec"
'    sWhere = " WHERE ParcelasRec.Status = ? AND ParcelasRec.NumIntTitulo = TitulosRec.NumIntDoc AND TitulosRec.Cliente = ? AND TitulosRec.Filial = ? AND NOT (ParcelasRec.Cobrador = 1 AND ParcelasRec.CarteiraCobranca = 2)"

    '######################################
    'Inserido por Wagner
'    sWhere = " WHERE ParcelasRec.Status = ? AND ParcelasRec.NumIntTitulo = TitulosRec.NumIntDoc AND NOT (ParcelasRec.Cobrador = 1 AND ParcelasRec.CarteiraCobranca = 2)"
    sWhere = " WHERE ParcelasRec.Status = ? AND ParcelasRec.NumIntTitulo = TitulosRec.NumIntDoc"

    If lCodCli <> 0 Then
        sWhere = sWhere & " AND TitulosRec.Cliente = ?"
    End If

    If iFilialCli <> 0 Then
        sWhere = sWhere & " AND TitulosRec.Filial = ?"
    End If
    '######################################

    'Se entrar como empresa toda pode pegar titulos de todas as filiais, senao pegar titulos somente da filial corrente
    If giFilialEmpresa <> gobjCR.iFilialCentralizadora Then
        sWhere = sWhere & " AND TitulosRec.FilialEmpresa = ?"
    End If

    'Se titulo inicial preenchido
    If (lTituloInic <> 0) Then
       sWhere = sWhere & " AND TitulosRec.NumTitulo >= ?"
    End If

    'Se titulo final preenchido
    If (lTituloFim <> 0) Then
       sWhere = sWhere & " AND TitulosRec.NumTitulo <= ?"
    End If

    'Se o limite inicial de data de emissao de titulo estiver preenchido
    If (dtEmissaoInic <> DATA_NULA) Then
       sWhere = sWhere & " AND TitulosRec.DataEmissao >= ?"
    End If

    'Se o limite final de data de emissao de titulo estiver preenchido
    If (dtEmissaoFim <> DATA_NULA) Then
       sWhere = sWhere & " AND TitulosRec.DataEmissao <= ?"
    End If

    'Se o limite inicial de data de vencimento de parcela estiver preenchido
    If (dtVencInic <> DATA_NULA) Then
       sWhere = sWhere & " AND ParcelasRec.DataVencimento >= ?"
    End If

    'Se o limite final de data de vencimento de parcela estiver preenchido
    If (dtVencFim <> DATA_NULA) Then
       sWhere = sWhere & " AND ParcelasRec.DataVencimento <= ?"
    End If
    
    If (sTipoDoc <> "") Then
       sWhere = sWhere & " AND TitulosRec.SiglaDocumento = ?"
    End If
    
    If (lCodViagem <> 0) Then
       sWhere = sWhere & " AND TitulosRec.NumIntDoc IN (SELECT N.NumIntDocCPR FROM MapadeEntrega As M, MapadeEntregaNF AS MN, NFiscal As N WHERE M.NumIntDoc = MN.NumIntDocMapa AND MN.NumIntDocNF = N.NumIntDoc AND N.ClasseDocCPR = ? AND M.FilialEmpresa = ? AND M.Codigo = ?)"
    End If
    
    If (iFormaPagamento <> 0) Then
       sWhere = sWhere & " AND TitulosRec.CondicaoPagto IN (SELECT Codigo FROM CondicoesPagto As C WHERE C.FormaPagamento = ?)"
    End If

    If (iVendedor <> 0) Then
       sWhere = sWhere & " AND EXISTS (SELECT * FROM FiliaisClientes AS F WHERE TitulosRec.Cliente = F.CodCliente AND TitulosRec.Filial = F.CodFilial AND F.Vendedor = ?)"
    End If
    
    'Se titulo final preenchido
    If (iCobrador <> 0) Then
       sWhere = sWhere & " AND ParcelasRec.Cobrador = ?"
    End If
    
    If sProdDe <> "" Or sProdAte <> "" Then
        sFiltroProd = ""
        If sProdDe <> "" Then sFiltroProd = " I.Produto >= '" & sProdDe & "' "
        If sProdAte <> "" Then
            If Len(Trim(sFiltroProd)) > 0 Then sFiltroProd = sFiltroProd & " AND "
            sFiltroProd = sFiltroProd & " I.Produto <= '" & sProdAte & "' "
        End If
        sWhere = sWhere & " AND EXISTS (SELECT * FROM NFiscal AS N, ItensNFiscal AS I WHERE N.NumInTDoc = I.NumIntNF AND N.ClasseDocCPR = 2 AND TitulosRec.NumIntDoc = N.NumIntDocCPR AND " & sFiltroProd & ")"
    End If
    
    sOrderBy = " ORDER BY TitulosRec.NumTitulo, ParcelasRec.NumParcela"
    
    sSelect = "SELECT " & sFields & sFrom & sWhere & sOrderBy

End Sub

Public Function ParcelasRec_Le_BaixaManualSel2(ByVal lComando As Long, sSelect As String, vlTitulosRecNumTitulo As Variant, viTitulosRecFilialEmpresa As Variant, vsTitulosRecSiglaDocumento As Variant, vlParcelasRecNumIntDoc As Variant, viParcelasRecNumParcela As Variant, vdtParcelasRecDataVencimento As Variant, vdParcelasRecSaldo As Variant, vdParcelasRecValor As Variant, viParcelasRecCobrador As Variant, viParcelasRecCarteiraCobranca As Variant, viStatusAberto As Variant, vlCliente As Variant, viFilial As Variant, vdtDataEmissao As Variant, vsNossoNumero As Variant) As Long
'isola a preparacao da parte fixa do SELECT, serve apenas para diminuir o tamanho de ParcelasRec_Le_BaixaManualSel
Dim ret As Integer, lErro As Long
On Error GoTo Erro_ParcelasRec_Le_BaixaManualSel2

    ret = Comando_PrepararInt(lComando, sSelect)
    If (ret <> AD_SQL_SUCESSO) Then Error 27046

    ret = Comando_BindVarInt(lComando, vdtDataEmissao)
    If (ret <> AD_SQL_SUCESSO) Then Error 27047

    ret = Comando_BindVarInt(lComando, vlTitulosRecNumTitulo)
    If (ret <> AD_SQL_SUCESSO) Then Error 27047

    ret = Comando_BindVarInt(lComando, viTitulosRecFilialEmpresa)
    If (ret <> AD_SQL_SUCESSO) Then Error 27161
    
    ret = Comando_BindVarInt(lComando, vsTitulosRecSiglaDocumento)
    If (ret <> AD_SQL_SUCESSO) Then Error 29014
    
    ret = Comando_BindVarInt(lComando, vlCliente)
    If (ret <> AD_SQL_SUCESSO) Then Error 27065

    ret = Comando_BindVarInt(lComando, viFilial)
    If (ret <> AD_SQL_SUCESSO) Then Error 27066

    ret = Comando_BindVarInt(lComando, vlParcelasRecNumIntDoc)
    If (ret <> AD_SQL_SUCESSO) Then Error 27048

    ret = Comando_BindVarInt(lComando, viParcelasRecNumParcela)
    If (ret <> AD_SQL_SUCESSO) Then Error 27049

    ret = Comando_BindVarInt(lComando, vdtParcelasRecDataVencimento)
    If (ret <> AD_SQL_SUCESSO) Then Error 27050

    ret = Comando_BindVarInt(lComando, vdParcelasRecSaldo)
    If (ret <> AD_SQL_SUCESSO) Then Error 27051
    
    ret = Comando_BindVarInt(lComando, vdParcelasRecValor)
    If (ret <> AD_SQL_SUCESSO) Then Error 17723
    
    ret = Comando_BindVarInt(lComando, viParcelasRecCobrador)
    If (ret <> AD_SQL_SUCESSO) Then Error 29020

    ret = Comando_BindVarInt(lComando, viParcelasRecCarteiraCobranca)
    If (ret <> AD_SQL_SUCESSO) Then Error 29020
    
    ret = Comando_BindVarInt(lComando, vsNossoNumero)
    If (ret <> AD_SQL_SUCESSO) Then Error 29020

    ret = Comando_BindVarInt(lComando, viStatusAberto)
    If (ret <> AD_SQL_SUCESSO) Then Error 27052
    
'
'    ret = Comando_BindVarInt(lComando, vlCliente)
'    If (ret <> AD_SQL_SUCESSO) Then Error 27065
'
'    ret = Comando_BindVarInt(lComando, viFilial)
'    If (ret <> AD_SQL_SUCESSO) Then Error 27066

    ParcelasRec_Le_BaixaManualSel2 = SUCESSO

    Exit Function

Erro_ParcelasRec_Le_BaixaManualSel2:

    ParcelasRec_Le_BaixaManualSel2 = Err

    Select Case Err

        Case 17723, 27046 To 27052, 27065, 27066, 27161, 29014, 29020
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_REC", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148590)

    End Select

    Exit Function

End Function

Public Function ParcelasRec_Le_BaixaManualSel3(ByVal lComando As Long, dtEmissaoInic As Date, dtEmissaoFim As Date, dtVencInic As Date, dtVencFim As Date, lTituloInic As Long, lTituloFim As Long, ByVal lCodCli As Long, ByVal iFilialCli As Integer, ByVal sTipoDoc As String, ByVal lCodViagem As Long, ByVal iFormaPagamento As Integer, ByVal iVendedor As Integer, ByVal iCobrador As Integer) As Long
'auxiliar a ParcelasRec_Le_BaixaManualSel
'complementa a passagem dos parametros que variam de acordo com a selecao do usuario e executa o SELECT p/obtencao das parcelas
Dim lErro As Long, ret As Integer, vFilialEmpresa As Variant, vTituloInic As Variant
Dim vTituloFim As Variant, vEmissaoInic As Variant, vEmissaoFim As Variant, vVencInic As Variant, vVencFim As Variant
Dim vlCliente As Variant
Dim viFilial As Variant
Dim vsTipoDoc As Variant
Dim vlCodViagem As Variant
Dim viFormaPagto As Variant
Dim viClasse As Variant
Dim viVendedor As Variant
Dim viCobrador As Variant

On Error GoTo Erro_ParcelasRec_Le_BaixaManualSel3

    '############################################
    'Inserido por Wagner
    If lCodCli <> 0 Then
        vlCliente = lCodCli
        ret = Comando_BindVarInt(lComando, vlCliente)
        If (ret <> AD_SQL_SUCESSO) Then gError 140287
    End If
    
    If iFilialCli <> 0 Then
        viFilial = iFilialCli
        ret = Comando_BindVarInt(lComando, viFilial)
        If (ret <> AD_SQL_SUCESSO) Then gError 140288
    End If
    '############################################
    
    'Se entrar como empresa toda pode pegar titulos de todas as filiais, senao pegar titulos somente da filial corrente
    If giFilialEmpresa <> gobjCR.iFilialCentralizadora Then
        vFilialEmpresa = giFilialEmpresa
        ret = Comando_BindVarInt(lComando, vFilialEmpresa)
        If (ret <> AD_SQL_SUCESSO) Then gError 27054
    End If

    'Se titulo inicial preenchido
    If (lTituloInic <> 0) Then
        vTituloInic = lTituloInic
        ret = Comando_BindVarInt(lComando, vTituloInic)
        If (ret <> AD_SQL_SUCESSO) Then gError 27055
    End If

    'Se titulo final preenchido
    If (lTituloFim <> 0) Then
        vTituloFim = lTituloFim
        ret = Comando_BindVarInt(lComando, vTituloFim)
        If (ret <> AD_SQL_SUCESSO) Then gError 27056
    End If

    'Se o limite inicial de data de emissao de titulo estiver preenchido
    If (dtEmissaoInic <> DATA_NULA) Then
        vEmissaoInic = dtEmissaoInic
        ret = Comando_BindVarInt(lComando, vEmissaoInic)
        If (ret <> AD_SQL_SUCESSO) Then gError 27057
    End If

    'Se o limite final de data de emissao de titulo estiver preenchido
    If (dtEmissaoFim <> DATA_NULA) Then
        vEmissaoFim = dtEmissaoFim
        ret = Comando_BindVarInt(lComando, vEmissaoFim)
        If (ret <> AD_SQL_SUCESSO) Then gError 27058
    End If

    'Se o limite inicial de data de vencimento de parcela estiver preenchido
    If (dtVencInic <> DATA_NULA) Then
        vVencInic = dtVencInic
        ret = Comando_BindVarInt(lComando, vVencInic)
        If (ret <> AD_SQL_SUCESSO) Then gError 27059
    End If

    'Se o limite final de data de vencimento de parcela estiver preenchido
    If (dtVencFim <> DATA_NULA) Then
        vVencFim = dtVencFim
        ret = Comando_BindVarInt(lComando, vVencFim)
        If (ret <> AD_SQL_SUCESSO) Then gError 27060
    End If
    
    If (sTipoDoc <> "") Then
        vsTipoDoc = sTipoDoc
        ret = Comando_BindVarInt(lComando, vsTipoDoc)
        If (ret <> AD_SQL_SUCESSO) Then gError 27060
    End If
    
    If (lCodViagem <> 0) Then
        vlCodViagem = lCodViagem
        vFilialEmpresa = giFilialEmpresa
        viClasse = CPR_TITULO_RECEBER
        ret = Comando_BindVarInt(lComando, viClasse)
        If (ret <> AD_SQL_SUCESSO) Then gError 27060
        ret = Comando_BindVarInt(lComando, vFilialEmpresa)
        If (ret <> AD_SQL_SUCESSO) Then gError 27060
        ret = Comando_BindVarInt(lComando, vlCodViagem)
        If (ret <> AD_SQL_SUCESSO) Then gError 27060
    End If
    If (iFormaPagamento <> 0) Then
        viFormaPagto = CInt(iFormaPagamento)
        ret = Comando_BindVarInt(lComando, viFormaPagto)
        If (ret <> AD_SQL_SUCESSO) Then gError 27060
    End If
    
    If (iVendedor <> 0) Then
        viVendedor = CInt(iVendedor)
        ret = Comando_BindVarInt(lComando, viVendedor)
        If (ret <> AD_SQL_SUCESSO) Then gError 27060
    End If
    
    If (iCobrador <> 0) Then
        viCobrador = CInt(iCobrador)
        ret = Comando_BindVarInt(lComando, viCobrador)
        If (ret <> AD_SQL_SUCESSO) Then gError 27060
    End If
    
    ret = Comando_ExecutarInt(lComando)
    If (ret <> AD_SQL_SUCESSO) Then gError 27061

    ParcelasRec_Le_BaixaManualSel3 = SUCESSO

    Exit Function
    
Erro_ParcelasRec_Le_BaixaManualSel3:

    ParcelasRec_Le_BaixaManualSel3 = gErr

    Select Case gErr

        Case 27054 To 27061
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_REC", gErr)
            
        Case 140287, 140288

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148591)

    End Select

    Exit Function

End Function

Private Function ParcelasRec_Le_BaixaManualSel4(ByVal lComando As Long, lTitulosRecNumTitulo As Long, iTitulosRecFilialEmpresa As Integer, sTitulosRecSiglaDocumento As String, lParcelasRecNumIntDoc As Long, iParcelasRecNumParcela As Integer, dtParcelasRecDataVencimento As Date, dParcelasRecSaldo As Double, dParcelasRecValor As Double, iParcelasRecCobrador As Integer, iParcelasRecCarteiraCobranca As Integer, lCliente As Long, iFilial As Integer, ByVal colInfoParcRec As Collection, dtDataEmissao As Date, sNossoNumero As String) As Long
'auxiliar a ParcelasRec_Le_BaixaManualSel
'processa os registros lidos
Dim lErro As Long
Dim objInfoParcRec As ClassInfoParcRec
Dim dSomaValorRecbeto As Double
Dim lComando1 As Long

On Error GoTo Erro_ParcelasRec_Le_BaixaManualSel4

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 27067

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 27062

    If lErro = AD_SQL_SEM_DADOS Then Error 27063

    Do While lErro = AD_SQL_SUCESSO

        dSomaValorRecbeto = 0
    
        'Alterado por Wagner para não abater cheques utilizados em terceiros
        lErro = Comando_Executar(lComando1, "SELECT SUM(ChequeParcelaRec.ValorRecebto-ChequeParcelaRec.Juros-ChequeParcelaRec.Multa+ChequeParcelaRec.Desconto) FROM ChequeParcelaRec, ChequePre WHERE ChequePre.NumBordero = 0 AND ChequeParcelaRec.NumIntCheque = ChequePre.NumIntCheque AND ChequeParcelaRec.NumIntParcela = ? AND NOT ChequePre.NumIntCheque IN (Select NumIntCheque FROM ChequeBordero WHERE ChequeBordero.NumIntCheque = ChequePre.NumIntCheque) AND NOT ChequePre.NumIntCheque IN (SELECT NumIntCheque FROM BaixasRec WHERE BaixasRec.Status <> 5 AND BaixasRec.NumIntCheque = ChequePre.NumIntCheque AND BaixasRec.FilialEmpresaCheque = ChequePre.FilialEmpresa)", dSomaValorRecbeto, lParcelasRecNumIntDoc)
        If lErro <> AD_SQL_SUCESSO Then gError 91341

        lErro = Comando_BuscarPrimeiro(lComando1)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 91342
        
        If (dParcelasRecSaldo - dSomaValorRecbeto) > DELTA_VALORMONETARIO Then

            dParcelasRecSaldo = Round(dParcelasRecSaldo - dSomaValorRecbeto, 2)

            Set objInfoParcRec = New ClassInfoParcRec
    
            objInfoParcRec.iFilialEmpresa = iTitulosRecFilialEmpresa
            objInfoParcRec.dtVencimento = dtParcelasRecDataVencimento
            objInfoParcRec.dValor = dParcelasRecSaldo
            objInfoParcRec.dValorOriginal = dParcelasRecValor
            objInfoParcRec.iFilialCliente = iFilial
            objInfoParcRec.iNumParcela = iParcelasRecNumParcela
            objInfoParcRec.lCliente = lCliente
            objInfoParcRec.lNumIntParc = lParcelasRecNumIntDoc
            objInfoParcRec.lNumTitulo = lTitulosRecNumTitulo
            objInfoParcRec.sSiglaDocumento = sTitulosRecSiglaDocumento
            objInfoParcRec.iCobrador = iParcelasRecCobrador
            objInfoParcRec.iCarteiraCobrador = iParcelasRecCarteiraCobranca
            'objInfoParcRec.sNomeRedCliente = sClientesNomeReduzido
            'objInfoParcRec.sRazaoSocialCli = sClientesRazaoSocial
            objInfoParcRec.dtDataEmissao = dtDataEmissao
            objInfoParcRec.sNossoNumero = sNossoNumero
            
            colInfoParcRec.Add objInfoParcRec
        
        End If
        
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 27064

    Loop

    Call Comando_Fechar(lComando1)

    ParcelasRec_Le_BaixaManualSel4 = SUCESSO
    
    Exit Function

Erro_ParcelasRec_Le_BaixaManualSel4:

    ParcelasRec_Le_BaixaManualSel4 = Err

    Select Case Err

        Case 27063
            Call Rotina_Erro(vbOKOnly, "ERRO_SEM_PARCELAS_REC_SEL", Err)

        Case 27062, 27064
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_REC", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148592)

    End Select

    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Function Comissoes_Le_DebRecCli(ByVal objDebitoRecCli As ClassDebitoRecCli, ByVal colInfoComissao As colInfoComissao) As Long
'Lê informações sobre as Comissões associadas ao Débito passado em objDebitoRecCli e preenche colInfoComissao com estas informações

Dim lErro As Long
Dim lComando As Long
Dim tInfoComissao As typeInfoComissao
Dim objInfoComissao As ClassInfoComissao

On Error GoTo Erro_Comissoes_Le_DebRecCli

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 17846

    tInfoComissao.sVendedorNomeRed = String(STRING_VENDEDOR_NOME_RED, 0)

    lErro = Comando_Executar(lComando, "SELECT Comissoes.NumIntCom, Comissoes.FilialEmpresa, Comissoes.Status, Comissoes.TipoTitulo, Comissoes.NumIntDoc, Comissoes.CodVendedor, Comissoes.DataGeracao, Comissoes.DataBaixa, Comissoes.Percentual, Comissoes.ValorBase, Comissoes.Valor, Vendedores.NomeReduzido FROM Comissoes, Vendedores WHERE Comissoes.NumIntDoc = ? AND Comissoes.TipoTitulo = ? AND Vendedores.Codigo = Comissoes.CodVendedor ORDER BY Vendedores.NomeReduzido", _
        tInfoComissao.lNumIntCom, tInfoComissao.iFilialEmpresa, tInfoComissao.iStatus, tInfoComissao.iTipoTitulo, tInfoComissao.lNumIntDoc, tInfoComissao.iCodVendedor, tInfoComissao.dtDataGeracao, tInfoComissao.dtDataBaixa, tInfoComissao.dPercentual, tInfoComissao.dValorBase, tInfoComissao.dValor, tInfoComissao.sVendedorNomeRed, objDebitoRecCli.lNumIntDoc, TIPO_DEBITO)
    If lErro <> AD_SQL_SUCESSO Then Error 17847

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 17848

    Do While lErro <> AD_SQL_SEM_DADOS

        Set objInfoComissao = New ClassInfoComissao

        objInfoComissao.lNumIntCom = tInfoComissao.lNumIntCom
        objInfoComissao.iFilialEmpresa = tInfoComissao.iFilialEmpresa
        objInfoComissao.iStatus = tInfoComissao.iStatus
        objInfoComissao.iTipoTitulo = tInfoComissao.iTipoTitulo
        objInfoComissao.lNumIntDoc = tInfoComissao.lNumIntDoc
        objInfoComissao.iCodVendedor = tInfoComissao.iCodVendedor
        objInfoComissao.dtDataGeracao = tInfoComissao.dtDataGeracao
        objInfoComissao.dtDataBaixa = tInfoComissao.dtDataBaixa
        objInfoComissao.dPercentual = tInfoComissao.dPercentual
        objInfoComissao.dValorBase = tInfoComissao.dValorBase
        objInfoComissao.dValor = tInfoComissao.dValor
        objInfoComissao.sVendedorNomeRed = tInfoComissao.sVendedorNomeRed

        With objInfoComissao
            colInfoComissao.Add .lNumIntCom, .iTipoTitulo, .lNumIntDoc, .iCodVendedor, .dtDataBaixa, .dPercentual, .dValorBase, .dValor, .iStatus, .iFilialEmpresa, .sVendedorNomeRed, .dtDataGeracao
        End With

        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 17849

    Loop

    Call Comando_Fechar(lComando)

    Comissoes_Le_DebRecCli = SUCESSO

    Exit Function

Erro_Comissoes_Le_DebRecCli:

    Comissoes_Le_DebRecCli = Err

    Select Case Err

        Case 17846
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 17847, 17848, 17690
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_COMISSOES_VENDEDORES", Err, objDebitoRecCli.lNumIntDoc)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148593)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function DebitoRecCli_Le_Numero(ByVal objDebitoRecCli As ClassDebitoRecCli) As Long
'Lê Débito a Receber Cliente na tabela de DebitosRecCli a partir das chaves fornecidas

Dim lErro As Long
Dim lComando As Long
Dim iStatus As Integer
Dim tDebitoRecCli As typeDebitosRecCli

On Error GoTo Erro_DebitoRecCli_Le_Numero

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 17913

    'Inicializa a string que receberá o cmapo Observação
    tDebitoRecCli.sObservacao = String(STRING_DEB_REC_OBS, 0)

    'Verifica se o débito existe
    lErro = Comando_Executar(lComando, "SELECT  NumIntDoc, Status, DataEmissao, ValorTotal, Saldo, ValorSeguro, ValorFrete, OutrasDespesas, ValorProdutos, ValorICMS, ValorICMSSubst, ValorIPI, ValorIRRF, Observacao, PISRetido, COFINSRetido, CSLLRetido FROM DebitosRecCli WHERE FilialEmpresa = ? AND Cliente = ? AND Filial = ? AND SiglaDocumento = ? AND NumTitulo = ? AND DataEmissao = ? AND Status <> ?", tDebitoRecCli.lNumIntDoc, tDebitoRecCli.iStatus, tDebitoRecCli.dtDataEmissao, tDebitoRecCli.dValorTotal, tDebitoRecCli.dSaldo, tDebitoRecCli.dValorSeguro, tDebitoRecCli.dValorFrete, tDebitoRecCli.dOutrasDespesas, tDebitoRecCli.dValorProdutos, tDebitoRecCli.dValorICMS, tDebitoRecCli.dValorICMSSubst, tDebitoRecCli.dValorIPI, _
        tDebitoRecCli.dValorIRRF, tDebitoRecCli.sObservacao, tDebitoRecCli.dPISRetido, tDebitoRecCli.dCOFINSRetido, tDebitoRecCli.dCSLLRetido, giFilialEmpresa, objDebitoRecCli.lCliente, objDebitoRecCli.iFilial, objDebitoRecCli.sSiglaDocumento, objDebitoRecCli.lNumTitulo, objDebitoRecCli.dtDataEmissao, STATUS_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then Error 17914

    'Lê o dédito à receber, se estiver no BD
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 17915

    'O Débito não existe no BD
    If lErro = AD_SQL_SEM_DADOS Then Error 17916
    
    'Guarda no obj os valores obtidos no select
    objDebitoRecCli.lNumIntDoc = tDebitoRecCli.lNumIntDoc
    objDebitoRecCli.iStatus = tDebitoRecCli.iStatus
    objDebitoRecCli.dtDataEmissao = tDebitoRecCli.dtDataEmissao
    objDebitoRecCli.dValorTotal = tDebitoRecCli.dValorTotal
    objDebitoRecCli.dSaldo = tDebitoRecCli.dSaldo
    objDebitoRecCli.dValorSeguro = tDebitoRecCli.dValorSeguro
    objDebitoRecCli.dValorFrete = tDebitoRecCli.dValorFrete
    objDebitoRecCli.dOutrasDespesas = tDebitoRecCli.dOutrasDespesas
    objDebitoRecCli.dValorProdutos = tDebitoRecCli.dValorProdutos
    objDebitoRecCli.dValorICMS = tDebitoRecCli.dValorICMS
    objDebitoRecCli.dValorICMSSubst = tDebitoRecCli.dValorICMS
    objDebitoRecCli.dValorIPI = tDebitoRecCli.dValorIPI
    objDebitoRecCli.dValorIRRF = tDebitoRecCli.dValorIRRF
    objDebitoRecCli.sObservacao = tDebitoRecCli.sObservacao
    objDebitoRecCli.dPISRetido = tDebitoRecCli.dPISRetido
    objDebitoRecCli.dCOFINSRetido = tDebitoRecCli.dCOFINSRetido
    objDebitoRecCli.dCSLLRetido = tDebitoRecCli.dCSLLRetido
    
    'Se o debito estiver baixado => erro
    If tDebitoRecCli.iStatus = STATUS_BAIXADO Then Error 17917

    Call Comando_Fechar(lComando)

    DebitoRecCli_Le_Numero = SUCESSO

    Exit Function

Erro_DebitoRecCli_Le_Numero:

    DebitoRecCli_Le_Numero = Err

    Select Case Err

        Case 17913
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 17914, 17915
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_DEBITOSRECCLI1", Err, objDebitoRecCli.lCliente, objDebitoRecCli.iFilial, objDebitoRecCli.sSiglaDocumento, objDebitoRecCli.lNumTitulo, objDebitoRecCli.dtDataEmissao)

        Case 17916, 17917

         Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148594)

    End Select

    Call Comando_Fechar(lComando)

End Function


Function TiposDeAplicacao_Le_Ativos(ByVal colTiposDeAplicacao As Collection) As Long
'Le todos os tipos de aplicacao ativos contidos na tabela de TiposDeAplicacao  e coloca-os em colTiposDeAplicacao

Dim lComando As Long
Dim lErro As Long
Dim objTiposDeAplicacao As ClassTiposDeAplicacao
Dim iCodigo As Integer
Dim sDescricao As String

On Error GoTo Erro_TiposDeAplicacao_Le_Ativos

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 17190

    sDescricao = String(STRING_TIPOAPLIC_DESCRICAO, 0)

    'Le a tabela de tipos de aplicacao
    lErro = Comando_Executar(lComando, "SELECT Codigo, Descricao FROM TiposDeAplicacao WHERE Inativo = ? ORDER BY Codigo", iCodigo, sDescricao, TIPOAPLICACAO_ATIVO)
    If lErro <> AD_SQL_SUCESSO Then Error 17191

    'Le o primeiro tipo de aplicacao ativo
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 17192

    Do While lErro <> AD_SQL_SEM_DADOS

        Set objTiposDeAplicacao = New ClassTiposDeAplicacao

        objTiposDeAplicacao.iCodigo = iCodigo
        objTiposDeAplicacao.sDescricao = sDescricao

        'Coloca o tipo de aplicacao ativo lido na coleção
        colTiposDeAplicacao.Add objTiposDeAplicacao

        'Le o proximo tipo de aplicacao ativo
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 17193

    Loop

    Call Comando_Fechar(lComando)

    TiposDeAplicacao_Le_Ativos = SUCESSO

    Exit Function

Erro_TiposDeAplicacao_Le_Ativos:

    TiposDeAplicacao_Le_Ativos = Err

    Select Case Err

        Case 17190
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 17191, 17192, 17193
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOSDEAPLICACAO1", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148595)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function TiposDeCobranca_Bordero_Le_CodigoDescricao(ByVal colCodigoNomeCobranca As AdmColCodigoNome) As Long
'Carrega a Coleção colCodigoDescricao com os Tipos de Cobranca que possuem o campo ValidoParaBordero igual a 1.

Dim lErro As Long
Dim iCodigo As Integer
Dim sNome As String
Dim lComando As Long

On Error GoTo Erro_TiposDeCobranca_Bordero_Le_CodigoDescricao

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 15773

    sNome = String(STRING_TIPOSDECOBRANCA_DESCRICAO, 0)

    'Pesquisa no BD os Tipos de Cobrança que têm o campo ValidoParaBordero igual a 1
    lErro = Comando_Executar(lComando, "SELECT Codigo, Descricao FROM TiposDeCobranca WHERE ValidoParaBordero=? ORDER BY Codigo", iCodigo, sNome, TIPO_COBR_VALIDO_PARA_BORDERO)
    If lErro <> AD_SQL_SUCESSO Then Error 15774

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 15775

    Do While lErro <> AD_SQL_SEM_DADOS
    
        'Coloca o Tipo de Cobrança lido na coleção
        colCodigoNomeCobranca.Add iCodigo, sNome

        'Lê o próximo registro do Select
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 15776

    Loop
    
    Call Comando_Fechar(lComando)

    TiposDeCobranca_Bordero_Le_CodigoDescricao = SUCESSO

    Exit Function

Erro_TiposDeCobranca_Bordero_Le_CodigoDescricao:

    TiposDeCobranca_Bordero_Le_CodigoDescricao = Err

    Select Case Err

        Case 15773
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 15774, 15775, 15776
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOSDECOBRANCA", Err)
                        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148596)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function ParcelaPagar_Le_Numero(ByVal objParcelaPagar As ClassParcelaPagar) As Long
'Le os dados da Parcela com NumIntTitulo e NumParcela Passados em objParcelaPagar

Dim lErro As Long
Dim lComando As Long
Dim tParcelaPagar As typeParcelaPagar

On Error GoTo Erro_ParcelaPagar_Le_Numero

    'Abre o comando
    lComando = Comando_Abrir()
    If lErro <> SUCESSO Then Error 18984
    
    tParcelaPagar.sNossoNumero = String(STRING_NOSSO_NUMERO, 0)
    tParcelaPagar.sCodigoDeBarras = String(STRING_CODIGO_BARRAS_PARC_CPR, 0)
    tParcelaPagar.sCodUsuarioLib = String(STRING_USUARIO_CODIGO, 0)
    
    'Seleciona a Parcela com os dados passados
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc, Status, DataVencimento, DataVencimentoReal, Saldo, Valor, ValorOriginal, MotivoDiferenca, TipoCobranca, Portador, BancoCobrador, ProxSeqBaixa, NossoNumero, CodigoDeBarras, CodUsuarioLib, DataLib FROM ParcelasPag WHERE NumIntTitulo = ? AND NumParcela = ? ", tParcelaPagar.lNumIntDoc, tParcelaPagar.iStatus, tParcelaPagar.dtDataVencimento, tParcelaPagar.dtDataVencimentoReal, tParcelaPagar.dSaldo, tParcelaPagar.dValor, tParcelaPagar.dValorOriginal, tParcelaPagar.iMotivoDiferenca, tParcelaPagar.iTipoCobranca, tParcelaPagar.iPortador, tParcelaPagar.iBancoCobrador, tParcelaPagar.iProxSeqBaixa, tParcelaPagar.sNossoNumero, tParcelaPagar.sCodigoDeBarras, tParcelaPagar.sCodUsuarioLib, tParcelaPagar.dtDataLib, objParcelaPagar.lNumIntTitulo, objParcelaPagar.iNumParcela)
    If lErro <> AD_SQL_SUCESSO Then Error 18985
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 18986
    
    'Se não encontrar --> erro
    If lErro = AD_SQL_SEM_DADOS Then Error 18987
    
    
    'Carrega em objParcelaPagar os dados trazidos
    objParcelaPagar.lNumIntDoc = tParcelaPagar.lNumIntDoc
    objParcelaPagar.iStatus = tParcelaPagar.iStatus
    objParcelaPagar.dtDataVencimento = tParcelaPagar.dtDataVencimento
    objParcelaPagar.dtDataVencimentoReal = tParcelaPagar.dtDataVencimentoReal
    objParcelaPagar.dSaldo = tParcelaPagar.dSaldo
    objParcelaPagar.dValor = tParcelaPagar.dValor
    objParcelaPagar.dValorOriginal = tParcelaPagar.dValorOriginal
    objParcelaPagar.iMotivoDiferenca = tParcelaPagar.iMotivoDiferenca
    objParcelaPagar.iTipoCobranca = tParcelaPagar.iTipoCobranca
    objParcelaPagar.iPortador = tParcelaPagar.iPortador
    objParcelaPagar.iBancoCobrador = tParcelaPagar.iBancoCobrador
    objParcelaPagar.iProxSeqBaixa = tParcelaPagar.iProxSeqBaixa
    objParcelaPagar.sNossoNumero = tParcelaPagar.sNossoNumero
    objParcelaPagar.sCodigoDeBarras = tParcelaPagar.sCodigoDeBarras
    objParcelaPagar.sCodUsuarioLib = tParcelaPagar.sCodUsuarioLib
    objParcelaPagar.dtDataLib = tParcelaPagar.dtDataLib
    
    'Fecha o comando
    Call Comando_Fechar(lComando)
    
    ParcelaPagar_Le_Numero = SUCESSO
    
    Exit Function
    
Erro_ParcelaPagar_Le_Numero:

    ParcelaPagar_Le_Numero = Err
    
    Select Case Err
    
        Case 18984
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
            
        Case 18985, 18986
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELASPAG1", Err, objParcelaPagar.lNumIntTitulo, objParcelaPagar.iNumParcela)

        Case 18987
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148597)
        
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function NfsPag_Le_FaturaPagar(ByVal objTituloPagar As ClassTituloPagar, ByVal colNFPagVinculada As ColNFsPag) As Long
'Lê as Notas Fiscais vinculadas ao Título passado por parâmetro

Dim lErro As Long
Dim lComando As Long, objNFsPag As ClassNFsPag
Dim tNFPag As typeNFsPag

On Error GoTo Erro_NfsPag_Le_FaturaPagar

    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 18614

    'Seleciona as NF's vinculadas ao Título passado
    lErro = Comando_Executar(lComando, "SELECT FilialEmpresa, Filial, NumIntDoc, NumNotaFiscal, DataEmissao, Status, DataVencimento, ValorTotal, ValorSeguro, ValorFrete, OutrasDespesas, ValorProdutos, ValorIRRF, ValorICMS, ValorICMSSubst, CreditoICMS, ValorIPI, CreditoIPI, PISRetido, ISSRetido, COFINSRetido, CSLLRetido, TaxaMoeda FROM NFsPag WHERE Fornecedor = ? AND NumIntTitPag = ? AND Status <> ? ORDER BY DataEmissao", tNFPag.iFilialEmpresa, tNFPag.iFilial, tNFPag.lNumIntDoc, tNFPag.lNumNotaFiscal, tNFPag.dtDataEmissao, tNFPag.iStatus, tNFPag.dtDataVencimento, tNFPag.dValorTotal, tNFPag.dValorSeguro, tNFPag.dValorFrete, tNFPag.dOutrasDespesas, tNFPag.dValorProdutos, tNFPag.dValorIRRF, tNFPag.dValorICMS, tNFPag.dValorICMSSubst, tNFPag.iCreditoICMS, tNFPag.dValorIPI, tNFPag.iCreditoIPI, tNFPag.dPISRetido, tNFPag.dISSRetido, tNFPag.dCOFINSRetido, tNFPag.dCSLLRetido, tNFPag.dTaxaMoeda, objTituloPagar.lFornecedor, objTituloPagar.lNumIntDoc, STATUS_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then Error 18620

    'Tenta ler
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 18622
    
    If lErro = AD_SQL_SEM_DADOS Then Error 26020

    'Loop de Notas Fiscais
    Do While lErro = AD_SQL_SUCESSO

        'Armazena NF em colNFPagVinculada
        With tNFPag
            Set objNFsPag = colNFPagVinculada.Add(.lNumIntDoc, .iFilialEmpresa, objTituloPagar.lFornecedor, .iFilial, .lNumNotaFiscal, .dtDataEmissao, .iStatus, objTituloPagar.lNumIntDoc, .dtDataVencimento, .dValorTotal, .dValorSeguro, .dValorFrete, .dOutrasDespesas, .dValorProdutos, .dValorIRRF, .dValorICMS, .dValorICMSSubst, .iCreditoICMS, .dValorIPI, .iCreditoIPI, .dPISRetido, .dCOFINSRetido, .dCSLLRetido)
            objNFsPag.dISSRetido = .dISSRetido
        End With

        'Busca a próxima NF vinculada
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 18621

    Loop

    'Fecha comando
    Call Comando_Fechar(lComando)

    NfsPag_Le_FaturaPagar = SUCESSO

    Exit Function

Erro_NfsPag_Le_FaturaPagar:

    Select Case Err

        Case 18614
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 18620, 18621, 18622
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFSPAG", Err)

        Case 26020

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148598)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function NfsPag_Le_FilialFornecedor_Desvinculadas(ByVal objFilialFornecedor As ClassFilialFornecedor, ByVal colNFPagAberta As ColNFsPag) As Long
'Lê em NfsPag Notas Fiscais Vinculadas à Filial de Fornecedor passada
'mas desvinculadas de qualquer Titulo a Pagar.

Dim lErro As Long
Dim tNFPag As typeNFsPag
Dim lComando As Long, sFiltro As String
Dim iFilialEmpresa As Integer
Dim iFilialFornec As Integer, objNFsPag As ClassNFsPag

On Error GoTo Erro_NfsPag_Le_FilialFornecedor_Desvinculadas

    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 18616

    Call CF("FilialEmpresa_Le_Filtro_Filial", sFiltro)

    'Lê as Notas Fiscais com Fornecedor e Filial passados e desvinculadas
    lErro = Comando_Executar(lComando, "SELECT FilialEmpresa, Filial, NumIntDoc, NumNotaFiscal, DataEmissao, Status, DataVencimento, ValorTotal, ValorSeguro, ValorFrete, OutrasDespesas, ValorProdutos, ValorIRRF, ValorICMS, ValorICMSSubst, CreditoICMS, ValorIPI, CreditoIPI, PISRetido, ISSRetido, COFINSRetido, CSLLRetido, TaxaMoeda FROM NFsPag WHERE Fornecedor = ? AND NumIntTitPag = 0 AND Status <> ? " & sFiltro & " ORDER BY DataEmissao", tNFPag.iFilialEmpresa, tNFPag.iFilial, tNFPag.lNumIntDoc, tNFPag.lNumNotaFiscal, tNFPag.dtDataEmissao, tNFPag.iStatus, tNFPag.dtDataVencimento, tNFPag.dValorTotal, tNFPag.dValorSeguro, tNFPag.dValorFrete, tNFPag.dOutrasDespesas, tNFPag.dValorProdutos, tNFPag.dValorIRRF, tNFPag.dValorICMS, tNFPag.dValorICMSSubst, tNFPag.iCreditoICMS, tNFPag.dValorIPI, tNFPag.iCreditoIPI, tNFPag.dPISRetido, tNFPag.dISSRetido, tNFPag.dCOFINSRetido, tNFPag.dCSLLRetido, tNFPag.dTaxaMoeda, objFilialFornecedor.lCodFornecedor, STATUS_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then Error 18617

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 18618
    
    'Loop de NFs
    Do While lErro = AD_SQL_SUCESSO

        'Armazena em colNFPagAberta as NF's desvinculadas encontradas
        With tNFPag
            Set objNFsPag = colNFPagAberta.Add(.lNumIntDoc, .iFilialEmpresa, objFilialFornecedor.lCodFornecedor, .iFilial, .lNumNotaFiscal, .dtDataEmissao, .iStatus, .lNumIntTitPag, .dtDataVencimento, .dValorTotal, .dValorSeguro, .dValorFrete, .dOutrasDespesas, .dValorProdutos, .dValorIRRF, .dValorICMS, .dValorICMSSubst, .iCreditoICMS, .dValorIPI, .iCreditoIPI, .dPISRetido, .dCOFINSRetido, .dCSLLRetido)
            objNFsPag.dISSRetido = .dISSRetido
        End With

        'Tenta ler a próxima NF
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 18619

    Loop

    'Fecha comando
    Call Comando_Fechar(lComando)

    NfsPag_Le_FilialFornecedor_Desvinculadas = SUCESSO

    Exit Function

Erro_NfsPag_Le_FilialFornecedor_Desvinculadas:

    NfsPag_Le_FilialFornecedor_Desvinculadas = Err

    Select Case Err

        Case 18616
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 18617, 18618, 18619
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFSPAG", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148599)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function TiposMovimento_Le_NaoPagto(ByVal colTipos As Collection) As Long
'Preenche colecao com os Tipo de Movimento de Cta Corrente que nao sejam de pagto

Dim lErro As Long, iTipoMovto As Integer
Dim lComando As Long

On Error GoTo Erro_TiposMovimento_Le_NaoPagto

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 22164

    'Seleciona na tabela "TiposMovtoCtaCorrente" os tipos diferentes de Pagamento
    lErro = Comando_Executar(lComando, "SELECT Codigo FROM TiposMovtoCtaCorrente WHERE Codigo <> ? AND Codigo <> ? AND Codigo <> ?", iTipoMovto, MOVCCI_PAGTO_TITULO_POR_BORDERO, MOVCCI_PAGTO_TITULO_POR_CHEQUE, MOVCCI_PAGTO_TITULO_POR_DINHEIRO)
    If lErro <> AD_SQL_SUCESSO Then Error 22165

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 22166

    'Verifica se existe
    If lErro = AD_SQL_SEM_DADOS Then Error 22167

    Do While lErro <> AD_SQL_SEM_DADOS

        'Guarda os tipos na coleção
        colTipos.Add iTipoMovto

        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 11908

    Loop

    Call Comando_Fechar(lComando)

    TiposMovimento_Le_NaoPagto = SUCESSO

    Exit Function

Erro_TiposMovimento_Le_NaoPagto:

    TiposMovimento_Le_NaoPagto = Err

    Select Case Err

        Case 22164
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 22165, 22166
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOSMOVIMENTO", Err)

        'Erro já tratado
        Case 22167

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148600)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function FluxoTipoForn_Le(ByVal colFluxoTipoForn As Collection, ByVal sOrdenacao As String, ByVal lFluxoId As Long, ByVal dtData As Date, ByVal iTipoReg As Integer) As Long
'le todos os fluxotipoforn

Dim lNumero As Long
Dim lErro As Long
Dim tFluxoTipoForn As typeFluxoTipoForn
Dim objFluxoTipoForn As ClassFluxoTipoForn
Dim lComando As Long

On Error GoTo Erro_FluxoTipoForn_Le

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 21056

    tFluxoTipoForn.sDescricao = String(STRING_FLUXO_DESCRICAO, 0)

    lErro = Comando_Executar(lComando, "SELECT TotalSistema, TotalAjustado, TotalReal, Descricao FROM FluxoTipoForn WHERE FluxoId = ? AND Data = ? AND TipoReg = ?" & sOrdenacao, tFluxoTipoForn.dTotalSistema, tFluxoTipoForn.dTotalAjustado, tFluxoTipoForn.dTotalReal, tFluxoTipoForn.sDescricao, lFluxoId, dtData, iTipoReg)
    If lErro <> AD_SQL_SUCESSO Then Error 21057

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 21058

    Do While lErro = AD_SQL_SUCESSO

        Set objFluxoTipoForn = New ClassFluxoTipoForn

        objFluxoTipoForn.sDescricao = tFluxoTipoForn.sDescricao
        objFluxoTipoForn.dTotalAjustado = tFluxoTipoForn.dTotalAjustado
        objFluxoTipoForn.dTotalReal = tFluxoTipoForn.dTotalReal
        objFluxoTipoForn.dTotalSistema = tFluxoTipoForn.dTotalSistema

        colFluxoTipoForn.Add objFluxoTipoForn

        If colFluxoTipoForn.Count = MAX_FLUXO Then Error 21059

        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 21060

    Loop

    Call Comando_Fechar(lComando)

    FluxoTipoForn_Le = SUCESSO

    Exit Function

Erro_FluxoTipoForn_Le:

    FluxoTipoForn_Le = Err

    Select Case Err

        Case 21056
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 21057, 21058, 21060
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FLUXOTIPOFORN", Err, lFluxoId)

        Case 21059

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148601)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function FluxoAplic_Le(ByVal colFluxoAplic As Collection, ByVal sOrdenacao As String, ByVal lFluxoId As Long, ByVal dtData As Date) As Long
'le todos os FluxoAplic

Dim lNumero As Long
Dim lErro As Long
Dim tFluxoAplic As typeFluxoAplic
Dim objFluxoAplic As ClassFluxoAplic
Dim lComando As Long

On Error GoTo Erro_FluxoAplic_Le

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 21170

    lErro = Comando_Executar(lComando, "SELECT Codigo, SaldoAplicado, ValorResgatePrevisto FROM FluxoAplic WHERE FluxoId = ? AND DataResgatePrevista = ? " & sOrdenacao, tFluxoAplic.lCodigo, tFluxoAplic.dSaldoAplicato, tFluxoAplic.dValorResgatePrevisto, lFluxoId, dtData)
    If lErro <> AD_SQL_SUCESSO Then Error 21171

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 21172

    Do While lErro = AD_SQL_SUCESSO

        Set objFluxoAplic = New ClassFluxoAplic

        objFluxoAplic.lCodigo = tFluxoAplic.lCodigo
        objFluxoAplic.dSaldoAplicado = tFluxoAplic.dSaldoAplicato
        objFluxoAplic.dValorResgatePrevisto = tFluxoAplic.dValorResgatePrevisto

        colFluxoAplic.Add objFluxoAplic

        If colFluxoAplic.Count = MAX_FLUXO Then Error 21173

        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 21174

    Loop

    Call Comando_Fechar(lComando)

    FluxoAplic_Le = SUCESSO

    Exit Function

Erro_FluxoAplic_Le:

    FluxoAplic_Le = Err

    Select Case Err

        Case 21170
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 21171, 21172, 21174
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FLUXOAPLIC", Err, lFluxoId)

        Case 21173

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148602)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function FluxoSaldosIniciais_Le(ByVal colFluxoSldIni As Collection, ByVal lFluxoId As Long) As Long
'Le os FluxoSaldosIniciais.

Dim lErro As Long
Dim tFluxoSldIni As typeFluxoSldIni
Dim objFluxoSldIni As ClassFluxoSldIni
Dim lComando As Long

On Error GoTo Erro_FluxoSaldosIniciais_Le

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 21138

    tFluxoSldIni.sNomeReduzido = String(STRING_CONTA_CORRENTE_NOME_REDUZIDO, 0)

    'Lê os valores referentes ao FluxoSaldosIniciais
    lErro = Comando_Executar(lComando, "SELECT CodConta, NomeReduzido, SaldoSistema, SaldoAjustado, SaldoReal, Usuario FROM FluxoSaldosIniciais WHERE FluxoId = ?", tFluxoSldIni.iCodConta, tFluxoSldIni.sNomeReduzido, tFluxoSldIni.dSaldoSistema, tFluxoSldIni.dSaldoAjustado, tFluxoSldIni.dSaldoReal, tFluxoSldIni.iUsuario, lFluxoId)
    If lErro <> AD_SQL_SUCESSO Then Error 21139

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 21140

    Do While lErro = AD_SQL_SUCESSO

        Set objFluxoSldIni = New ClassFluxoSldIni

        objFluxoSldIni.iUsuario = tFluxoSldIni.iUsuario
        objFluxoSldIni.dSaldoAjustado = tFluxoSldIni.dSaldoAjustado
        objFluxoSldIni.dSaldoReal = tFluxoSldIni.dSaldoReal
        objFluxoSldIni.dSaldoSistema = tFluxoSldIni.dSaldoSistema
        objFluxoSldIni.iCodConta = tFluxoSldIni.iCodConta
        objFluxoSldIni.sNomeReduzido = tFluxoSldIni.sNomeReduzido
        objFluxoSldIni.lFluxoId = lFluxoId

        colFluxoSldIni.Add objFluxoSldIni

        If colFluxoSldIni.Count = MAX_FLUXO Then Error 21141

        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 21142

    Loop

    Call Comando_Fechar(lComando)

    FluxoSaldosIniciais_Le = SUCESSO

    Exit Function

Erro_FluxoSaldosIniciais_Le:

    FluxoSaldosIniciais_Le = Err

    Select Case Err

        Case 21138
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 21139, 21140, 21142
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FLUXOSALDOSINICIAIS", Err, lFluxoId)

        Case 21141

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148603)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function FluxoSintetico_Le(ByVal colFluxoSint As Collection, ByVal lFluxoId As Long, ByVal iTipoReg As Integer) As Long
'Le os fluxos sintéticos. Serão lidos valores de sistema ou real de acordo com iTipoReg

Dim lErro As Long
Dim tFluxoSint As typeFluxoSint
Dim objFluxoSint As ClassFluxoSint
Dim lComando As Long

On Error GoTo Erro_FluxoSintetico_Le

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 21085

    If iTipoReg = FLUXOSINT_PROJ Then
    
        'Lê os valores referentes ao fluxo sintético projetado
        lErro = Comando_Executar(lComando, "SELECT Data, RecValorSistema, RecValorAjustado, PagValorSistema, PagValorAjustado, TesValorSistema, TesValorAjustado, SaldoValorSistema, SaldoValorAjustado FROM FluxoSintetico WHERE FluxoId = ? ORDER BY Data", tFluxoSint.dtData, tFluxoSint.dRecValorSistema, tFluxoSint.dRecValorAjustado, tFluxoSint.dPagValorSistema, tFluxoSint.dPagValorAjustado, tFluxoSint.dTesValorSistema, tFluxoSint.dTesValorAjustado, tFluxoSint.dSaldoValorSistema, tFluxoSint.dSaldoValorAjustado, lFluxoId)
        If lErro <> AD_SQL_SUCESSO Then Error 21086

    Else
        'Lê os valores referentes ao fluxo sintético revisado
        lErro = Comando_Executar(lComando, "SELECT Data, RecValorReal, RecValorAjustado, PagValorReal, PagValorAjustado, TesValorReal, TesValorAjustado, SaldoValorReal, SaldoValorAjustado FROM FluxoSintetico WHERE FluxoId = ? ORDER BY Data", tFluxoSint.dtData, tFluxoSint.dRecValorReal, tFluxoSint.dRecValorAjustado, tFluxoSint.dPagValorReal, tFluxoSint.dPagValorAjustado, tFluxoSint.dTesValorReal, tFluxoSint.dTesValorAjustado, tFluxoSint.dSaldoValorReal, tFluxoSint.dSaldoValorAjustado, lFluxoId)
        If lErro <> AD_SQL_SUCESSO Then Error 21087
    
    End If

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 21088

    Do While lErro = AD_SQL_SUCESSO

        Set objFluxoSint = New ClassFluxoSint

        objFluxoSint.dtData = tFluxoSint.dtData
        objFluxoSint.dPagValorAjustado = tFluxoSint.dPagValorAjustado
        objFluxoSint.dRecValorAjustado = tFluxoSint.dRecValorAjustado
        objFluxoSint.dSaldoValorAjustado = tFluxoSint.dSaldoValorAjustado
        objFluxoSint.dTesValorAjustado = tFluxoSint.dTesValorAjustado
        
        If iTipoReg = FLUXOSINT_PROJ Then
            
            objFluxoSint.dPagValorSistema = tFluxoSint.dPagValorSistema
            objFluxoSint.dRecValorSistema = tFluxoSint.dRecValorSistema
            objFluxoSint.dTesValorSistema = tFluxoSint.dTesValorSistema
            objFluxoSint.dSaldoValorSistema = tFluxoSint.dSaldoValorSistema
                           
        Else
        
            objFluxoSint.dPagValorReal = tFluxoSint.dPagValorReal
            objFluxoSint.dRecValorReal = tFluxoSint.dRecValorReal
            objFluxoSint.dTesValorReal = tFluxoSint.dTesValorReal
            objFluxoSint.dSaldoValorReal = tFluxoSint.dSaldoValorReal
        
        End If

        colFluxoSint.Add objFluxoSint

       If colFluxoSint.Count = MAX_FLUXO Then Error 21089

        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 21091

    Loop

    Call Comando_Fechar(lComando)

    FluxoSintetico_Le = SUCESSO

    Exit Function

Erro_FluxoSintetico_Le:

    FluxoSintetico_Le = Err

    Select Case Err

        Case 21085
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 21086, 21087, 21088, 21091
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FLUXOSINTETICO", Err, lFluxoId)

        Case 21089

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148604)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function FluxoTipoAplic_Le(ByVal colFluxoTipoAplic As Collection, ByVal lFluxoId As Long, ByVal dtData As Date) As Long
'Lê o Fluxo Tipo de Aplicação da tabela FluxoTipoAplic e a descrição da tabela TiposDeAplicacao a partir da data fornecida e retorna os dados na coleção

Dim lComando As Long
Dim lErro As Long
Dim objFluxoTipoAplic As ClassFluxoTipoAplic
Dim tFluxoTipoAplic As typeFluxoTipoAplic

On Error GoTo Erro_FluxoTipoAplic_Le

    'Inicializa o Type
    tFluxoTipoAplic.sDescricao = String(STRING_DESCRICAO_CAMPO, 0)
       
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 21200
    
    'Seleciona os Fluxo Tipos de Aplicação cujo Data foi fornecida
    lErro = Comando_Executar(lComando, "SELECT TipoAplicacao, TotalSistema, TotalAjustado, TotalReal, Usuario, Descricao FROM FluxoTipoAplic,TiposDeAplicacao WHERE TipoAplicacao = Codigo AND FluxoTipoAplic.FluxoId = ? AND FluxoTipoAplic.Data = ? ORDER BY TipoAplicacao", tFluxoTipoAplic.iTipoAplicacao, tFluxoTipoAplic.dTotalSistema, tFluxoTipoAplic.dTotalAjustado, tFluxoTipoAplic.dTotalReal, tFluxoTipoAplic.iUsuario, tFluxoTipoAplic.sDescricao, lFluxoId, dtData)
    If lErro <> AD_SQL_SUCESSO Then Error 21201
    
    'Posiciona no primeiro Fluxo Tipo de Aplicação dos que foram lidos
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 21202
        
    Do While lErro = AD_SQL_SUCESSO

        Set objFluxoTipoAplic = New ClassFluxoTipoAplic

        'Passa os dados do Fluxo Tipo de Aplicação lido para o ObjFluxoTipoAplic
        objFluxoTipoAplic.lFluxoId = lFluxoId
        objFluxoTipoAplic.dtData = dtData
        objFluxoTipoAplic.sDescricao = tFluxoTipoAplic.sDescricao
        objFluxoTipoAplic.iTipoAplicacao = tFluxoTipoAplic.iTipoAplicacao
        objFluxoTipoAplic.dTotalAjustado = tFluxoTipoAplic.dTotalAjustado
        objFluxoTipoAplic.dTotalReal = tFluxoTipoAplic.dTotalReal
        objFluxoTipoAplic.dTotalSistema = tFluxoTipoAplic.dTotalSistema
        objFluxoTipoAplic.iUsuario = tFluxoTipoAplic.iUsuario
        
        colFluxoTipoAplic.Add objFluxoTipoAplic

        If colFluxoTipoAplic.Count = MAX_FLUXO Then Error 21204

        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 21203

    Loop

    Call Comando_Fechar(lComando)
    
    FluxoTipoAplic_Le = SUCESSO

    Exit Function

Erro_FluxoTipoAplic_Le:

    FluxoTipoAplic_Le = Err
    
    Select Case Err
    
        Case 21200
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
    
        Case 21201, 21202, 21203
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FLUXOTIPOAPLIC", Err, objFluxoTipoAplic.iTipoAplicacao)
        
        Case 21204
                       
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148605)

    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function CPConfig_Le_Configs(ByVal colConfigs As ColCPConfig) As Long
'Recupera da tabela CPConfig uma coleção de registros

Dim lErro As Long, lComando As Long
Dim objCPConfig As ClassCPConfig

On Error GoTo Erro_CPConfig_Le_Configs

    'Abrir comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 33674

    'Para cada elemento da coleção
    For Each objCPConfig In colConfigs

        lErro = CPConfig_Le_Batch(objCPConfig, lComando)
        If lErro <> SUCESSO And lErro <> 33679 Then Error 33675

        'Não foi encontrado registro em CPConfig
        If lErro = 33679 Then Error 33676

    Next

    'Fechar comando
    Call Comando_Fechar(lComando)

    CPConfig_Le_Configs = SUCESSO

    Exit Function

Erro_CPConfig_Le_Configs:

    CPConfig_Le_Configs = Err

    Select Case Err

        Case 33674
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 33675

        Case 33676
            Call Rotina_Erro(vbOKOnly, "ERRO_CPCONFIG_INEXISTENTE", Err, objCPConfig.sCodigo, objCPConfig.iFilialEmpresa)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148606)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Private Function CPConfig_Le_Batch(ByVal objCPConfig As ClassCPConfig, ByVal lComando As Long) As Long
'Lê registro em CPConfig.

Dim lErro As Long, tCPConfig As typeCPConfig

On Error GoTo Erro_CPConfig_Le_Batch

    With tCPConfig
        'Inicializar buffers
        .sDescricao = String(STRING_CPCONFIG_DESCRICAO, 0)
        .sConteudo = String(STRING_CPCONFIG_CONTEUDO, 0)

        'Ler registo
        lErro = Comando_Executar(lComando, "SELECT Descricao, Tipo, Conteudo FROM CPConfig WHERE Codigo = ? AND FilialEmpresa = ?", .sDescricao, .iTipo, .sConteudo, objCPConfig.sCodigo, objCPConfig.iFilialEmpresa)

    End With
    If lErro <> AD_SQL_SUCESSO Then Error 33677

    'Lê o primeiro registro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 33678

    'Se não encontrou o registro
    If lErro = AD_SQL_SEM_DADOS Then Error 33679

    objCPConfig.sDescricao = tCPConfig.sDescricao
    objCPConfig.iTipo = tCPConfig.iTipo
    objCPConfig.sConteudo = tCPConfig.sConteudo

    CPConfig_Le_Batch = SUCESSO

    Exit Function

Erro_CPConfig_Le_Batch:

    CPConfig_Le_Batch = Err

    Select Case Err

        Case 33677, 33678
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CPCONFIG2", Err, objCPConfig.sCodigo, objCPConfig.iFilialEmpresa)

        Case 33679
            'Chave nãoo encontrada

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148607)

    End Select

    Exit Function

End Function

Function CRConfig_Le_Configs(ByVal colConfigs As ColCRConfig) As Long
'Recupera da tabela CRConfig uma coleção de registros

Dim lErro As Long, lComando As Long
Dim objCRConfig As ClassCRConfig

On Error GoTo Erro_CRConfig_Le_Configs

    'Abrir comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 33703

    'Para cada elemento da coleção
    For Each objCRConfig In colConfigs

        lErro = CRConfig_Le_Batch(objCRConfig, lComando)
        If lErro <> SUCESSO And lErro <> 33707 Then Error 33704

        'Não foi encontrado registro em CRConfig
        If lErro = 33707 Then Error 33705

    Next

    'Fechar comando
    Call Comando_Fechar(lComando)

    CRConfig_Le_Configs = SUCESSO

    Exit Function

Erro_CRConfig_Le_Configs:

    CRConfig_Le_Configs = Err

    Select Case Err

        Case 33703
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 33704

        Case 33705
            Call Rotina_Erro(vbOKOnly, "ERRO_CRCONFIG_INEXISTENTE", Err, objCRConfig.sCodigo, objCRConfig.iFilialEmpresa)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148608)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Private Function CRConfig_Le_Batch(ByVal objCRConfig As ClassCRConfig, ByVal lComando As Long) As Long
'Lê registro em CRConfig.

Dim lErro As Long, tCRConfig As typeCRConfig

On Error GoTo Erro_CRConfig_Le_Batch

    With tCRConfig
        'Inicializar buffers
        .sDescricao = String(STRING_CRCONFIG_DESCRICAO, 0)
        .sConteudo = String(STRING_CRCONFIG_CONTEUDO, 0)

        'Ler registo
        lErro = Comando_Executar(lComando, "SELECT Descricao, Tipo, Conteudo FROM CRConfig WHERE Codigo = ? AND FilialEmpresa = ?", .sDescricao, .iTipo, .sConteudo, objCRConfig.sCodigo, objCRConfig.iFilialEmpresa)

    End With
    If lErro <> AD_SQL_SUCESSO Then Error 33705

    'Lê o primeiro registro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 33706

    'Se não encontrou o registro
    If lErro = AD_SQL_SEM_DADOS Then Error 33707

    objCRConfig.sDescricao = tCRConfig.sDescricao
    objCRConfig.iTipo = tCRConfig.iTipo
    objCRConfig.sConteudo = tCRConfig.sConteudo

    CRConfig_Le_Batch = SUCESSO

    Exit Function

Erro_CRConfig_Le_Batch:

    CRConfig_Le_Batch = Err

    Select Case Err

        Case 33705, 33706
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CRCONFIG2", Err, objCRConfig.sCodigo, objCRConfig.iFilialEmpresa)

        Case 33707
            'Chave não encontrada

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148609)

    End Select

    Exit Function

End Function

Function TESConfig_Le_Configs(ByVal colConfigs As ColTESConfig) As Long
'Recupera da tabela TESConfig uma coleção de registros

Dim lErro As Long, lComando As Long
Dim objTESConfig As ClassTESConfig

On Error GoTo Erro_TESConfig_Le_Configs

    'Abrir comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 33719

    'Para cada elemento da coleção
    For Each objTESConfig In colConfigs

        lErro = TESConfig_Le_Batch(objTESConfig, lComando)
        If lErro <> SUCESSO And lErro <> 33724 Then Error 33720

        'Não foi encontrado registro em TESConfig
        If lErro = 33724 Then Error 33721

    Next

    'Fechar comando
    Call Comando_Fechar(lComando)

    TESConfig_Le_Configs = SUCESSO

    Exit Function

Erro_TESConfig_Le_Configs:

    TESConfig_Le_Configs = Err

    Select Case Err

        Case 33719
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 33720

        Case 33721
            Call Rotina_Erro(vbOKOnly, "ERRO_TESCONFIG_INEXISTENTE", Err, objTESConfig.sCodigo, objTESConfig.iFilialEmpresa)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148610)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Private Function TESConfig_Le_Batch(ByVal objTESConfig As ClassTESConfig, ByVal lComando As Long) As Long
'Lê registro em TESConfig.

Dim lErro As Long, tTESConfig As typeTESConfig

On Error GoTo Erro_TESConfig_Le_Batch

    With tTESConfig
        'Inicializar buffers
        .sDescricao = String(STRING_TESCONFIG_DESCRICAO, 0)
        .sConteudo = String(STRING_TESCONFIG_CONTEUDO, 0)

        'Ler registo
        lErro = Comando_Executar(lComando, "SELECT Descricao, Tipo, Conteudo FROM TESConfig WHERE Codigo = ? AND FilialEmpresa = ?", .sDescricao, .iTipo, .sConteudo, objTESConfig.sCodigo, objTESConfig.iFilialEmpresa)

    End With
    If lErro <> AD_SQL_SUCESSO Then Error 33722

    'Lê o primeiro registro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 33723

    'Se não encontrou o registro
    If lErro = AD_SQL_SEM_DADOS Then Error 33724

    objTESConfig.sDescricao = tTESConfig.sDescricao
    objTESConfig.iTipo = tTESConfig.iTipo
    objTESConfig.sConteudo = tTESConfig.sConteudo

    TESConfig_Le_Batch = SUCESSO

    Exit Function

Erro_TESConfig_Le_Batch:

    TESConfig_Le_Batch = Err

    Select Case Err

        Case 33722, 33723
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TESCONFIG2", Err, objTESConfig.sCodigo, objTESConfig.iFilialEmpresa)

        Case 33724
            'Chave não encontrada

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148611)

    End Select

    Exit Function

End Function

Function TiposDocumento_Le_TituloPag(ByVal colTipoDocumento As Collection) As Long
'Obtem as siglas dos tipos de documento correspondentes a Titulos a Pagar

Dim lErro As Long
Dim lComando As Long
Dim objTipoDocumento As ClassTipoDocumento
Dim tTipoDocumento As typeTipoDocumento

On Error GoTo Erro_TiposDocumento_Le_TituloPag

    'Abre o Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 42796

    tTipoDocumento.sSigla = String(STRING_SIGLA_DOCUMENTO, 0)
    tTipoDocumento.sDescricao = String(STRING_DESCRICAO_CAMPO, 0)
    tTipoDocumento.sDescricaoReduzida = String(STRING_DESCRICAO_CAMPO, 0)
    
    'Seleciona os Tipos de Documentos com ClasseDocCPR = 1
    lErro = Comando_Executar(lComando, "SELECT Sigla, Descricao, DescricaoReduzida FROM TiposDeDocumento WHERE ClasseDocCPR = ?", tTipoDocumento.sSigla, tTipoDocumento.sDescricao, tTipoDocumento.sDescricaoReduzida, CPR_TITULO_PAGAR)
    If lErro <> AD_SQL_SUCESSO Then Error 42797

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 42798

    'Guar em colTipoDocumento os Tipos de Documentos encontradas
    Do While lErro <> AD_SQL_SEM_DADOS
        
        Set objTipoDocumento = New ClassTipoDocumento
            
        objTipoDocumento.sSigla = tTipoDocumento.sSigla
        objTipoDocumento.sDescricao = tTipoDocumento.sDescricao
        objTipoDocumento.sDescricaoReduzida = tTipoDocumento.sDescricaoReduzida
        
        colTipoDocumento.Add objTipoDocumento
        
        'Busca a próximo
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 42799

    Loop

    'Fecha o comando
    Call Comando_Fechar(lComando)

    TiposDocumento_Le_TituloPag = SUCESSO

    Exit Function

Erro_TiposDocumento_Le_TituloPag:

    TiposDocumento_Le_TituloPag = Err

    Select Case Err

        Case 42796
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 42797, 42798, 42799
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPODOCUMENTO1", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148612)

    End Select

    'Fecha o comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function TiposDocumento_Le_CredPagar(ByVal colTipoDocumento As colTipoDocumento) As Long
'Lê as siglas dos tipos de documento que tem EmCreditoPagForn=1 e devolve em colTipoDocumento

Dim lComando As Long
Dim lErro As Long
Dim sSigla As String
Dim sDescricaoReduzida As String

On Error GoTo Erro_TiposDocumento_Le_CredPagar

    sSigla = String(STRING_TIPO_DOC_SIGLA, 0)
    sDescricaoReduzida = String(STRING_DESCRICAO_CAMPO, 0)
    
    'Abertura comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 17064

    'Lê a tabela de TiposdeDocumento
    lErro = Comando_Executar(lComando, "SELECT Sigla, DescricaoReduzida FROM TiposDeDocumento WHERE EmCreditoPagForn = 1 ORDER BY Sigla", sSigla, sDescricaoReduzida)
    If lErro <> AD_SQL_SUCESSO Then Error 17065

    'Lê o primeiro tipo de documento
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 17066

    Do While lErro <> AD_SQL_SEM_DADOS

        'Coloca o tipo de documento lido na coleção
         colTipoDocumento.Add "", 0, 0, 0, 0, 0, 0, sSigla, sDescricaoReduzida

        'Lê o próximo tipo de documento
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 17067

    Loop

    'Fechamento comando
    Call Comando_Fechar(lComando)

    TiposDocumento_Le_CredPagar = SUCESSO

    Exit Function

Erro_TiposDocumento_Le_CredPagar:

    TiposDocumento_Le_CredPagar = Err

    Select Case Err

        Case 17064
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 17065, 17066, 17067
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPODOCUMENTO1", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148613)

    End Select

    'Fechamento comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Private Function NFiscal_Le_FilialFornecedor_Uma(ByVal objFilialFornecedor As ClassFilialFornecedor, lNumIntDoc As Long) As Long
'Verifica se existe uma nota fiscal na tabela NFiscal associada a Filial do Fornecedor a partir da chave fornecida em objFilialFornecedor.
'Retorna erro se achar a Filial do Fornecedor relacionada com NF

Dim lErro As Long
Dim lComando As Long

On Error GoTo Erro_NFiscal_Le_FilialFornecedor_Uma

    'Inicializa comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 33850

    'procura registro associado a filial do fornecedor
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc FROM NFiscal WHERE Fornecedor = ? AND FilialForn = ?", lNumIntDoc, objFilialFornecedor.lCodFornecedor, objFilialFornecedor.iCodFilial)
    If lErro <> AD_SQL_SUCESSO Then Error 33851

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 33852

    'Não achou a Filial do Fornecedor
    If lErro = AD_SQL_SEM_DADOS Then Error 33853

    Call Comando_Fechar(lComando)

    NFiscal_Le_FilialFornecedor_Uma = SUCESSO

Exit Function

Erro_NFiscal_Le_FilialFornecedor_Uma:

    NFiscal_Le_FilialFornecedor_Uma = Err

    Select Case Err

        Case 33850
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 33851, 33852
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL2", Err, objFilialFornecedor.lCodFornecedor, objFilialFornecedor.iCodFilial)

        Case 33853
            'Erro tratado na rotina chamada

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148614)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Private Function NFPag_Le_FilialFornecedor_Uma(ByVal objFilialFornecedor As ClassFilialFornecedor, lNumIntDoc As Long) As Long
'Verifica se existe uma nota fiscal da Filial do Fornecedor a partir da chave fornecida em objFilialFornecedor.
'Retorna erro se achar a Filial do Fornecedor relacionada com NF à Pagar.

Dim lErro As Long
Dim lComando As Long

On Error GoTo Erro_NFPag_Le_FilialFornecedor_Uma

    'Inicializa comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 33862

    'Lê a Filial do Fornecedor na tabela NFsPag
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc FROM NFsPag WHERE Fornecedor = ? AND Filial = ?", lNumIntDoc, objFilialFornecedor.lCodFornecedor, objFilialFornecedor.iCodFilial)
    If lErro <> AD_SQL_SUCESSO Then Error 33863

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 33864

    'Não achou a Filial do Fornecedor
    If lErro = AD_SQL_SEM_DADOS Then Error 33865

    Call Comando_Fechar(lComando)

    NFPag_Le_FilialFornecedor_Uma = SUCESSO

Exit Function

Erro_NFPag_Le_FilialFornecedor_Uma:

    NFPag_Le_FilialFornecedor_Uma = Err

    Select Case Err

        Case 33862
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 33863, 33864
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFSPAG3", Err, objFilialFornecedor.lCodFornecedor, objFilialFornecedor.iCodFilial)

        Case 33865
            'Erro tratado na rotina chamada

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148615)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Private Function NFPagBaixada_Le_FilialFornecedor_Uma(ByVal objFilialFornecedor As ClassFilialFornecedor, lNumIntDoc As Long) As Long
'Verifica se existe uma nota fiscal baixada da Filial do Fornecedor a partir da chave fornecida em objFilialFornecedor.
'Retorna erro se achar a Filial do Fornecedor relacionada com NF à Pagar Baixada.

Dim lErro As Long
Dim lComando As Long

On Error GoTo Erro_NFPagBaixada_Le_FilialFornecedor_Uma

    'Inicializa comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 33873

    'Lê a Filial do Fornecedor na tabela NFsPagBaixadas
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc FROM NFsPagBaixadas WHERE Fornecedor = ? AND Filial = ?", lNumIntDoc, objFilialFornecedor.lCodFornecedor, objFilialFornecedor.iCodFilial)
    If lErro <> AD_SQL_SUCESSO Then Error 33874

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 33875

    'Não achou a Filial do Fornecedor
    If lErro = AD_SQL_SEM_DADOS Then Error 33876

    Call Comando_Fechar(lComando)

    NFPagBaixada_Le_FilialFornecedor_Uma = SUCESSO

Exit Function

Erro_NFPagBaixada_Le_FilialFornecedor_Uma:

    NFPagBaixada_Le_FilialFornecedor_Uma = Err

    Select Case Err

        Case 33873
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 33874, 33875
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFSPAGBAIXADAS2", Err, objFilialFornecedor.lCodFornecedor, objFilialFornecedor.iCodFilial)

        Case 33876
            'Erro tratado na rotina chamada

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148616)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Private Function TituloPagar_Le_FilialFornecedor_Um(ByVal objFilialFornecedor As ClassFilialFornecedor, lNumIntDoc As Long) As Long
'Verifica se existe um titulo a pagar da Filial do Fornecedor a partir da chave fornecida em objFilialFornecedor.
'Retorna erro se achar a Filial do Fornecedor relacionada com Título à Pagar.

Dim lErro As Long
Dim lComando As Long

On Error GoTo Erro_TituloPagar_Le_FilialFornecedor_Um

    'Inicializa comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 33879

    'Lê a Filial do Fornecedor na tabela TitulosPag
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc FROM TitulosPag WHERE Fornecedor = ? AND Filial = ?", lNumIntDoc, objFilialFornecedor.lCodFornecedor, objFilialFornecedor.iCodFilial)
    If lErro <> AD_SQL_SUCESSO Then Error 33880

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 33881

    'Não achou a Filial do Fornecedor
    If lErro = AD_SQL_SEM_DADOS Then Error 33882

    Call Comando_Fechar(lComando)

    TituloPagar_Le_FilialFornecedor_Um = SUCESSO

Exit Function

Erro_TituloPagar_Le_FilialFornecedor_Um:

    TituloPagar_Le_FilialFornecedor_Um = Err

    Select Case Err

        Case 33879
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 33880, 33881
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TITULOSPAG2", Err, objFilialFornecedor.lCodFornecedor, objFilialFornecedor.iCodFilial)

        Case 33882
            'Erro tratado na rotina chamada

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148617)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Private Function TituloPagarBaixado_Le_FilialFornecedor_Um(ByVal objFilialFornecedor As ClassFilialFornecedor, lNumIntDoc As Long) As Long
'Verifica se existe um titulo a pagar baixado da Filial do Fornecedor a partir da chave fornecida em objFilialFornecedor.
'Retorna erro se achar a Filial do Fornecedor relacionada com Título à Pagar Baixado.

Dim lErro As Long
Dim lComando As Long

On Error GoTo Erro_TituloPagarBaixado_Le_FilialFornecedor_Um

    'Inicializa comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 33891

    'Lê a Filial do Fornecedor na tabela TitulosPagBaixados
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc FROM TitulosPagBaixados WHERE Fornecedor = ? AND Filial = ?", lNumIntDoc, objFilialFornecedor.lCodFornecedor, objFilialFornecedor.iCodFilial)
    If lErro <> AD_SQL_SUCESSO Then Error 33892

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 33893

    'Não achou a Filial do Fornecedor
    If lErro = AD_SQL_SEM_DADOS Then Error 33894

    Call Comando_Fechar(lComando)

    TituloPagarBaixado_Le_FilialFornecedor_Um = SUCESSO

Exit Function

Erro_TituloPagarBaixado_Le_FilialFornecedor_Um:

    TituloPagarBaixado_Le_FilialFornecedor_Um = Err

    Select Case Err

        Case 33891
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 33892, 33893
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TITULOSPAGBAIXADOS2", Err, objFilialFornecedor.lCodFornecedor, objFilialFornecedor.iCodFilial)

        Case 33894
            'Erro tratado na rotina chamada

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148618)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Private Function CreditoPagForn_Le_FilialFornecedor_Um(ByVal objFilialFornecedor As ClassFilialFornecedor, lNumIntDoc As Long) As Long
'Verifica se existe um credito com a Filial do Fornecedor a partir da chave fornecida em objFilialFornecedor.
'Retorna erro se achar a Filial do Fornecedor relacionada com Crédito à Pagar Forn.

Dim lErro As Long
Dim lComando As Long

On Error GoTo Erro_CreditoPagForn_Le_FilialFornecedor_Um

    'Inicializa comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 33897

    'Lê a Filial do Fornecedor na tabela CreditosPagForn
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc FROM CreditosPagForn WHERE Fornecedor = ? AND Filial = ?", lNumIntDoc, objFilialFornecedor.lCodFornecedor, objFilialFornecedor.iCodFilial)
    If lErro <> AD_SQL_SUCESSO Then Error 33898

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 33899

    'Não achou a Filial do Fornecedor
    If lErro = AD_SQL_SEM_DADOS Then Error 33900

    Call Comando_Fechar(lComando)

    CreditoPagForn_Le_FilialFornecedor_Um = SUCESSO

Exit Function

Erro_CreditoPagForn_Le_FilialFornecedor_Um:

    CreditoPagForn_Le_FilialFornecedor_Um = Err

    Select Case Err

        Case 33897
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 33898, 33899
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CREDITOSPAGFORN3", Err, objFilialFornecedor.lCodFornecedor, objFilialFornecedor.iCodFilial)

        Case 33900
            'Erro tratado na rotina chamada

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148619)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Private Function PagtoAntecipado_Le_FilialFornecedor_Um(ByVal objFilialFornecedor As ClassFilialFornecedor, lNumIntPag As Long) As Long
'Verifica se existe um adiantamento para a Filial do Fornecedor a partir da chave fornecida em objFilialFornecedor.
'Retorna erro se achar a Filial do Fornecedor relacionada com Pagto Antecipado.

Dim lErro As Long
Dim lComando As Long

On Error GoTo Erro_PagtoAntecipado_Le_FilialFornecedor_Um

    'Inicializa comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 33903

    'Lê a Filial do Fornecedor na tabela PagtosAntecipados
    lErro = Comando_Executar(lComando, "SELECT NumIntPag FROM PagtosAntecipados WHERE Fornecedor = ? AND Filial_Fornecedor = ?", lNumIntPag, objFilialFornecedor.lCodFornecedor, objFilialFornecedor.iCodFilial)
    If lErro <> AD_SQL_SUCESSO Then Error 33904

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 33905

    'Não achou a Filial do Fornecedor
    If lErro = AD_SQL_SEM_DADOS Then Error 33906

    Call Comando_Fechar(lComando)

    PagtoAntecipado_Le_FilialFornecedor_Um = SUCESSO

Exit Function

Erro_PagtoAntecipado_Le_FilialFornecedor_Um:

    PagtoAntecipado_Le_FilialFornecedor_Um = Err

    Select Case Err

        Case 33903
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 33904, 33905
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PAGTOSANTECIPADOS2", Err, objFilialFornecedor.lCodFornecedor, objFilialFornecedor.iCodFilial)

        Case 33906
            'Erro tratado na rotina chamada

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148620)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function TiposDocumento_Le_DebReceber(ByVal colTipoDocumento As colTipoDocumento) As Long
'Lê todos os tipos de documento contidos na tabela de Tipos De Documento que geram debito com cliente e coloca-os em colTipoDocumento

Dim lComando As Long
Dim lErro As Long
Dim sSigla As String
Dim sDescricaoRed As String

On Error GoTo Erro_TiposDocumento_Le_DebReceber

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 17827

    sSigla = String(STRING_TIPO_DOC_SIGLA, 0)
    sDescricaoRed = String(STRING_DESCRICAO_CAMPO, 0)
    
    'Le a tabela de Tipos de Documento
    lErro = Comando_Executar(lComando, "SELECT Sigla, DescricaoReduzida FROM TiposDeDocumento WHERE EmDebitosRecCli = 1 ORDER BY Sigla", sSigla, sDescricaoRed)
    If lErro <> AD_SQL_SUCESSO Then Error 17828

    'Le o primeiro tipo de documento
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 17829

    Do While lErro <> AD_SQL_SEM_DADOS

        'Coloca o tipo de documento lido na coleção
         colTipoDocumento.Add "", 0, 0, 0, 0, 0, 0, sSigla, sDescricaoRed

        'Le o proximo tipo de documento
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 17830

    Loop

    lErro = Comando_Fechar(lComando)

    TiposDocumento_Le_DebReceber = SUCESSO

    Exit Function

Erro_TiposDocumento_Le_DebReceber:

    TiposDocumento_Le_DebReceber = Err

    Select Case Err

        Case 17827
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 17828, 17829, 17830
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPODOCUMENTO1", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148621)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function Mensagem_Le_Todas(ByVal colMensagem As Collection) As Long
'le todas as Mensagens contidas na tabela de Mensagens e coloca-as em colMensagem

Dim lComando As Long
Dim lErro As Long
Dim objMensagem As ClassMensagem
Dim iCodigo As Integer
Dim sDescricao As String
    
On Error GoTo Erro_Mensagem_Le_Todas

    sDescricao = String(STRING_NFISCAL_MENSAGEM, 0)

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 39756

    'le a tabela de Mensagens
    lErro = Comando_Executar(lComando, "SELECT Codigo, Descricao FROM Mensagens ORDER BY Codigo", iCodigo, sDescricao)
    If lErro <> AD_SQL_SUCESSO Then Error 39757

    'le a primeira Mensagem
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 39758
    
    Do While lErro <> AD_SQL_SEM_DADOS

        Set objMensagem = New ClassMensagem
        
        objMensagem.iCodigo = iCodigo
        objMensagem.sDescricao = sDescricao
        
        'coloca a Mensagem lida na coleção
        colMensagem.Add objMensagem
        
        'le a proxima Mensagem
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 39759

    Loop

    Call Comando_Fechar(lComando)
    
    Mensagem_Le_Todas = SUCESSO

    Exit Function

Erro_Mensagem_Le_Todas:

    Mensagem_Le_Todas = Err
    
    Select Case Err

        Case 39756
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 39757, 39758, 39759
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MENSAGEM1", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148622)

    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function
    
End Function

Function Portadores_Le_Banco(ByVal iBanco As Integer, ByVal colCodigo As Collection) As Long
'Lê códigos dos Portadores que não estão Inativos associados ao banco passado como parametro

Dim lComando As Long
Dim lErro As Long
Dim iCodigo As Integer

On Error GoTo Erro_Portadores_Le_Banco

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 19407
        
    'Seleciona códigos
    lErro = Comando_Executar(lComando, "SELECT Codigo FROM Portador WHERE Inativo<>? AND Banco=?", iCodigo, Inativo, iBanco)
    If lErro <> AD_SQL_SUCESSO Then Error 19408

    'Lê o primeiro registro da tabela Portador
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 19409

    Do While lErro <> AD_SQL_SEM_DADOS

        'coloca o Codigo lido na coleção
        colCodigo.Add iCodigo

        'le o proximo registro da tabela
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 19410

    Loop

    Call Comando_Fechar(lComando)

    Portadores_Le_Banco = SUCESSO

    Exit Function

Erro_Portadores_Le_Banco:

    Portadores_Le_Banco = Err

    Select Case Err

        Case 19407
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 19408, 19409, 19410
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PORTADOR2", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148623)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function Cobradores_Le_Todos_Filial(ByVal colCobrador As Collection) As Long
'preenche uma colecao com dados dos cobradores associados a filialempresa corrente

Dim lErro As Long
Dim lComando As Long
Dim tCobrador As typeCobrador
Dim objCobrador As ClassCobrador

On Error GoTo Erro_Cobradores_Le_Todos_Filial

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 49547
    
    tCobrador.sNomeReduzido = String(STRING_COBRADOR_NOME_REDUZIDO, 0)
    tCobrador.sNome = String(STRING_COBRADORES_NOME, 0)

    'Verifica se o Cobrador existe, e se existir carrega seus dados em objCobrador
    lErro = Comando_Executar(lComando, "SELECT  Codigo, FilialEmpresa, Inativo, NomeReduzido, Nome, Endereco, CodBanco, CobrancaEletronica, CodCCI, CNABProxSeqArqCobr FROM Cobradores WHERE FilialEmpresa = ? OR Codigo = ? ORDER BY Codigo", tCobrador.iCodigo, tCobrador.iFilialEmpresa, tCobrador.iInativo, tCobrador.sNomeReduzido, tCobrador.sNome, tCobrador.lEndereco, tCobrador.iCodBanco, tCobrador.iCobrancaEletronica, tCobrador.iCodCCI, tCobrador.lCNABProxSeqArqCobr, giFilialEmpresa, COBRADOR_PROPRIA_EMPRESA)
    If lErro <> AD_SQL_SUCESSO Then Error 49548

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 49549
    
    'Passa todos para a collection
    Do While lErro = AD_SQL_SUCESSO
    
        Set objCobrador = New ClassCobrador

        objCobrador.iCodigo = tCobrador.iCodigo
        objCobrador.iFilialEmpresa = tCobrador.iFilialEmpresa
        objCobrador.iInativo = tCobrador.iInativo
        objCobrador.sNomeReduzido = tCobrador.sNomeReduzido
        objCobrador.sNome = tCobrador.sNome
        objCobrador.lEndereco = tCobrador.lEndereco
        objCobrador.iCodBanco = tCobrador.iCodBanco
        objCobrador.iCobrancaEletronica = tCobrador.iCobrancaEletronica
        objCobrador.iCodCCI = tCobrador.iCodCCI
        objCobrador.lCNABProxSeqArqCobr = tCobrador.lCNABProxSeqArqCobr
    
        colCobrador.Add objCobrador

        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 49550

    Loop
    
    lErro = Comando_Fechar(lComando)

    Cobradores_Le_Todos_Filial = SUCESSO
    
    Exit Function
    
Erro_Cobradores_Le_Todos_Filial:

    Cobradores_Le_Todos_Filial = Err
    
    Select Case Err
        
        Case 49547
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 49548, 49549, 49550
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_COBRADOR2", Err)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148624)
        
    End Select
        
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function CreditosPagar_Le_FilialFornecedor(ByVal objFilialFornecedor As ClassFilialFornecedor, ByVal colCreditos As Collection) As Long
'Lê os Créditos a pagar com Filial e Fornecedor passados em objFilialFornecedor, Status=STATUS_LANCADO, ordenado por DataEmissão e de acordo com giFilialEmpresa.

Dim lComando As Long
Dim lErro As Long
Dim tCreditoPagar As typeCreditoPagar
Dim objCreditoPagar As ClassCreditoPagar
Dim iContador As Integer

On Error GoTo Erro_CreditosPagar_Le_FilialFornecedor

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 15925

    tCreditoPagar.sSiglaDocumento = String(STRING_SIGLA_DOCUMENTO, 0)
    tCreditoPagar.sObservacao = String(STRING_CREDITOSPAGFORN_OBSERVACAO, 0)
    
    'Se alguma Filial está selecionada
    If giFilialEmpresa <> EMPRESA_TODA Then

        lErro = Comando_Executar(lComando, "SELECT NumIntDoc, FilialEmpresa, SiglaDocumento, NumTitulo, DataEmissao, Saldo, ValorTotal, ValorSeguro, ValorFrete, OutrasDespesas, ValorProdutos, ValorICMS, ValorICMSSubst, DebitoICMS, ValorIPI, DebitoIPI, ValorIRRF, Observacao, PISRetido, COFINSRetido, CSLLRetido FROM CreditosPagForn WHERE Fornecedor = ? AND Filial = ? AND Status = ? AND FilialEmpresa = ? ORDER BY DataEmissao", _
            tCreditoPagar.lNumIntDoc, tCreditoPagar.iFilialEmpresa, tCreditoPagar.sSiglaDocumento, tCreditoPagar.lNumTitulo, tCreditoPagar.dtDataEmissao, tCreditoPagar.dSaldo, tCreditoPagar.dValorTotal, tCreditoPagar.dValorSeguro, tCreditoPagar.dValorFrete, tCreditoPagar.dOutrasDespesas, tCreditoPagar.dValorProdutos, tCreditoPagar.dValorICMS, tCreditoPagar.dValorICMSSubst, tCreditoPagar.iDebitoICMS, tCreditoPagar.dValorIPI, tCreditoPagar.iDebitoIPI, tCreditoPagar.dValorIRRF, tCreditoPagar.sObservacao, tCreditoPagar.dPISRetido, tCreditoPagar.dCOFINSRetido, tCreditoPagar.dCSLLRetido, objFilialFornecedor.lCodFornecedor, objFilialFornecedor.iCodFilial, STATUS_LANCADO, giFilialEmpresa)
        If lErro <> AD_SQL_SUCESSO Then Error 15926

    'Se Empresa Toda está selecionada
    Else

        lErro = Comando_Executar(lComando, "SELECT NumIntDoc, FilialEmpresa, SiglaDocumento, NumTitulo, DataEmissao, Saldo, ValorTotal, ValorSeguro, ValorFrete, OutrasDespesas, ValorProdutos, ValorICMS, ValorICMSSubst, DebitoICMS, ValorIPI, DebitoIPI, ValorIRRF, Observacao, PISRetido, COFINSRetido, CSLLRetido FROM CreditosPagForn WHERE Fornecedor = ? AND Filial = ? AND Status = ? ORDER BY DataEmissao", tCreditoPagar.lNumIntDoc, tCreditoPagar.iFilialEmpresa, tCreditoPagar.sSiglaDocumento, tCreditoPagar.lNumTitulo, tCreditoPagar.dtDataEmissao, tCreditoPagar.dSaldo, tCreditoPagar.dValorTotal, tCreditoPagar.dValorSeguro, tCreditoPagar.dValorFrete, tCreditoPagar.dOutrasDespesas, tCreditoPagar.dValorProdutos, tCreditoPagar.dValorICMS, tCreditoPagar.dValorICMSSubst, tCreditoPagar.iDebitoICMS, tCreditoPagar.dValorIPI, tCreditoPagar.iDebitoIPI, tCreditoPagar.dValorIRRF, _
            tCreditoPagar.sObservacao, tCreditoPagar.dPISRetido, tCreditoPagar.dCOFINSRetido, tCreditoPagar.dCSLLRetido, objFilialFornecedor.lCodFornecedor, objFilialFornecedor.iCodFilial, STATUS_LANCADO)
        If lErro <> AD_SQL_SUCESSO Then Error 15927

    End If

    'Lê o primeiro Crédito
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 15928

    'Se não existe Crédito com os dados desejados
    If lErro = AD_SQL_SEM_DADOS Then Error 15929

    iContador = 0
    
    Do While lErro <> AD_SQL_SEM_DADOS

        iContador = iContador + 1
        
        Set objCreditoPagar = New ClassCreditoPagar

        'Passa os dados do Crédito para o Obj
        objCreditoPagar.dOutrasDespesas = tCreditoPagar.dOutrasDespesas
        objCreditoPagar.dSaldo = tCreditoPagar.dSaldo
        objCreditoPagar.dtDataEmissao = tCreditoPagar.dtDataEmissao
        objCreditoPagar.dValorFrete = tCreditoPagar.dValorFrete
        objCreditoPagar.dValorICMS = tCreditoPagar.dValorICMS
        objCreditoPagar.dValorICMSSubst = tCreditoPagar.dValorICMSSubst
        objCreditoPagar.dValorIPI = tCreditoPagar.dValorIPI
        objCreditoPagar.dValorIRRF = tCreditoPagar.dValorIRRF
        objCreditoPagar.dValorProdutos = tCreditoPagar.dValorProdutos
        objCreditoPagar.dValorSeguro = tCreditoPagar.dValorSeguro
        objCreditoPagar.dValorTotal = tCreditoPagar.dValorTotal
        objCreditoPagar.iDebitoICMS = tCreditoPagar.iDebitoICMS
        objCreditoPagar.iDebitoIPI = tCreditoPagar.iDebitoIPI
        objCreditoPagar.iFilial = objFilialFornecedor.iCodFilial
        objCreditoPagar.iFilialEmpresa = tCreditoPagar.iFilialEmpresa
        objCreditoPagar.iStatus = STATUS_LANCADO
        objCreditoPagar.lFornecedor = objFilialFornecedor.lCodFornecedor
        objCreditoPagar.lNumIntDoc = tCreditoPagar.lNumIntDoc
        objCreditoPagar.lNumTitulo = tCreditoPagar.lNumTitulo
        objCreditoPagar.sObservacao = tCreditoPagar.sObservacao
        objCreditoPagar.sSiglaDocumento = tCreditoPagar.sSiglaDocumento
        objCreditoPagar.dPISRetido = tCreditoPagar.dPISRetido
        objCreditoPagar.dCOFINSRetido = tCreditoPagar.dCOFINSRetido
        objCreditoPagar.dCSLLRetido = tCreditoPagar.dCSLLRetido

        'Coloca o Crédito lido na coleção
        colCreditos.Add objCreditoPagar

        'Lê o próximo Crédito
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 15930

    Loop

    lErro = Comando_Fechar(lComando)

    CreditosPagar_Le_FilialFornecedor = SUCESSO

    Exit Function

Erro_CreditosPagar_Le_FilialFornecedor:

    CreditosPagar_Le_FilialFornecedor = Err

    Select Case Err

        Case 15925
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 15926, 15927, 15928, 15930
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CREDITOSPAGFORN", Err)

        Case 15929
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148625)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function Portador_Le_NomeReduzido(ByVal objPortador As ClassPortador) As Long
'Preenche objPortador com os dados correspondentes a objPortador.sNomeReduzido na tabela Portador

Dim lErro As Long
Dim lComando As Long
Dim tPortador As typePortador

On Error GoTo Erro_Portador_Le_NomeReduzido

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 15967

    tPortador.sNome = String(STRING_PORTADOR_NOME, 0)

    'Pesquisa Portadores no BD
    lErro = Comando_Executar(lComando, "SELECT Codigo, Nome, Inativo, Banco FROM Portador WHERE NomeReduzido = ? ", tPortador.iCodigo, tPortador.sNome, tPortador.iInativo, tPortador.iBanco, objPortador.sNomeReduzido)
    If lErro <> AD_SQL_SUCESSO Then Error 15968

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 15969

    If lErro = AD_SQL_SEM_DADOS Then Error 15970

    'Passa os dados do Portador para o Obj
    objPortador.iCodigo = tPortador.iCodigo
    objPortador.sNome = tPortador.sNome
    objPortador.iInativo = tPortador.iInativo
    objPortador.iBanco = tPortador.iBanco

    lErro = Comando_Fechar(lComando)

    Portador_Le_NomeReduzido = SUCESSO

    Exit Function

Erro_Portador_Le_NomeReduzido:

    Portador_Le_NomeReduzido = Err

    Select Case Err

        Case 15967
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 15968, 15969
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PORTADOR", Err, objPortador.sNomeReduzido)

        Case 15970

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148626)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function PagtosAntecipados_Le_FilialFornecedor(ByVal objFilialFornecedor As ClassFilialFornecedor, ByVal colPagtoAntecipado As Collection) As Long
'Lê os Pagamentos antecipados para uma Filial - Fornecedor passados em objFilialFornecedor, Excluido<>EXCLUIDO, SaldoNaoApropriado>0, ordenado por DataMovimento e de acordo com giFilialEmpresa.

Dim lComando As Long
Dim lErro As Long
Dim tAntecipPag As typeAntecipPag
Dim tMovCtaCorrente As typeMovContaCorrente
Dim tContaCorrente As typeContaCorrenteInt
Dim objAntecipPag As ClassAntecipPag
Dim iFilialEmpresa As Integer
Dim iContador As Integer

On Error GoTo Erro_PagtosAntecipados_Le_FilialFornecedor

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 15931

    tMovCtaCorrente.sHistorico = String(STRING_HISTORICOMOVCONTA, 0)
    
    'Se alguma Filial está selecionada
    If giFilialEmpresa <> EMPRESA_TODA Then

        lErro = Comando_Executar(lComando, "SELECT PagtosAntecipados.NumIntPag, PagtosAntecipados.NumMovto, PagtosAntecipados.SaldoNaoApropriado, MovimentosContaCorrente.FilialEmpresa, MovimentosContaCorrente.CodConta, MovimentosContaCorrente.Sequencial, MovimentosContaCorrente.TipoMeioPagto, MovimentosContaCorrente.Numero, MovimentosContaCorrente.DataMovimento, MovimentosContaCorrente.Valor, MovimentosContaCorrente.Historico, MovimentosContaCorrente.Portador FROM PagtosAntecipados, MovimentosContaCorrente WHERE MovimentosContaCorrente.NumMovto = PagtosAntecipados.NumMovto AND PagtosAntecipados.Fornecedor = ? AND PagtosAntecipados.Filial_Fornecedor = ? AND PagtosAntecipados.Excluido <> ? AND PagtosAntecipados.SaldoNaoApropriado > ? AND MovimentosContaCorrente.FilialEmpresa = ? ORDER BY MovimentosContaCorrente.DataMovimento ", _
            tAntecipPag.lNumIntPag, tAntecipPag.lNumMovto, tAntecipPag.dSaldoNaoApropriado, tContaCorrente.iFilialEmpresa, tContaCorrente.iCodigo, tMovCtaCorrente.lSequencial, tMovCtaCorrente.iTipoMeioPagto, tMovCtaCorrente.lNumero, tMovCtaCorrente.dtDataMovimento, tMovCtaCorrente.dValor, tMovCtaCorrente.sHistorico, tMovCtaCorrente.iPortador, objFilialFornecedor.lCodFornecedor, objFilialFornecedor.iCodFilial, EXCLUIDO, QTDE_ESTOQUE_DELTA, giFilialEmpresa) 'Alterado por Wagner
        If lErro <> AD_SQL_SUCESSO Then Error 15932

    'Se Empresa Toda está selecionada
    Else

        lErro = Comando_Executar(lComando, "SELECT PagtosAntecipados.NumIntPag, PagtosAntecipados.NumMovto, PagtosAntecipados.SaldoNaoApropriado, MovimentosContaCorrente.FilialEmpresa, MovimentosContaCorrente.CodConta, MovimentosContaCorrente.Sequencial, MovimentosContaCorrente.TipoMeioPagto, MovimentosContaCorrente.Numero, MovimentosContaCorrente.DataMovimento, MovimentosContaCorrente.Valor, MovimentosContaCorrente.Historico, MovimentosContaCorrente.Portador FROM PagtosAntecipados, MovimentosContaCorrente WHERE MovimentosContaCorrente.NumMovto = PagtosAntecipados.NumMovto AND PagtosAntecipados.Fornecedor = ? AND PagtosAntecipados.Filial_Fornecedor = ? AND PagtosAntecipados.Excluido <> ? AND PagtosAntecipados.SaldoNaoApropriado > ? ORDER BY MovimentosContaCorrente.DataMovimento", _
        tAntecipPag.lNumIntPag, tAntecipPag.lNumMovto, tAntecipPag.dSaldoNaoApropriado, tContaCorrente.iFilialEmpresa, tContaCorrente.iCodigo, tMovCtaCorrente.lSequencial, tMovCtaCorrente.iTipoMeioPagto, tMovCtaCorrente.lNumero, tMovCtaCorrente.dtDataMovimento, tMovCtaCorrente.dValor, tMovCtaCorrente.sHistorico, tMovCtaCorrente.iPortador, objFilialFornecedor.lCodFornecedor, objFilialFornecedor.iCodFilial, EXCLUIDO, QTDE_ESTOQUE_DELTA) 'Alterado por Wagner
        If lErro <> AD_SQL_SUCESSO Then Error 15933

    End If

    'Lê o primeiro Pagamento antecipado
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 15934

    'Se não existe Pagamento antecipado com os dados desejados
    If lErro = AD_SQL_SEM_DADOS Then Error 15935

    iContador = 0

    Do While lErro <> AD_SQL_SEM_DADOS
        
        iContador = iContador + 1
        
        Set objAntecipPag = New ClassAntecipPag

        'Passa os dados do Pagamento Antecipado para o Obj
        objAntecipPag.dSaldoNaoApropriado = tAntecipPag.dSaldoNaoApropriado
        objAntecipPag.dtData = tMovCtaCorrente.dtDataMovimento
        objAntecipPag.dValor = tMovCtaCorrente.dValor
        objAntecipPag.iCodConta = tContaCorrente.iCodigo
        objAntecipPag.iExcluido = NAO_EXCLUIDO
        objAntecipPag.iFilial = objFilialFornecedor.iCodFilial
        objAntecipPag.iFilialEmpresa = tContaCorrente.iFilialEmpresa
        objAntecipPag.iTipoMeioPagto = tMovCtaCorrente.iTipoMeioPagto
        objAntecipPag.lFornecedor = objFilialFornecedor.lCodFornecedor
        objAntecipPag.lNumero = tMovCtaCorrente.lNumero
        objAntecipPag.lNumIntPag = tAntecipPag.lNumIntPag
        objAntecipPag.lNumMovto = tAntecipPag.lNumMovto
        objAntecipPag.lSequencial = tMovCtaCorrente.lSequencial
        objAntecipPag.sHistorico = tMovCtaCorrente.sHistorico
        
        'Coloca o Pagamento antecipado lido na coleção
        colPagtoAntecipado.Add objAntecipPag

        'Lê o próximo Pagamento antecipado
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 15936

    Loop

    Call Comando_Fechar(lComando)

    PagtosAntecipados_Le_FilialFornecedor = SUCESSO

    Exit Function

Erro_PagtosAntecipados_Le_FilialFornecedor:

    PagtosAntecipados_Le_FilialFornecedor = Err

    Select Case Err

        Case 15931
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 15932, 15933, 15934, 15936
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PAGTO_ANTECIPADO2", Err)

        Case 15935

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148627)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function TipoMeioPagto_Le_Descricao(ByVal objTipoMeioPagto As ClassTipoMeioPagto) As Long
'Lê o Tipo de Pagamento através da Descrição passada como parâmetro.

Dim lErro As Long
Dim lComando As Long
Dim tTipoMeioPagto As typeTipoMeioPagto

On Error GoTo Erro_TipoMeioPagto_Le_Descricao

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 29005

    'Seleciona o tipo com a descrição passada
    lErro = Comando_Executar(lComando, "SELECT Tipo, Inativo, ExigeNumero FROM TipoMeioPagto WHERE Descricao = ? ", tTipoMeioPagto.iTipo, tTipoMeioPagto.iInativo, tTipoMeioPagto.iExigeNumero, objTipoMeioPagto.sDescricao)
    If lErro <> AD_SQL_SUCESSO Then Error 29006

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 29007

    'Verifica se existe
    If lErro = AD_SQL_SEM_DADOS Then Error 29008

    'Guarda os dados em objTipoMeioPagto
    objTipoMeioPagto.iTipo = tTipoMeioPagto.iTipo
    objTipoMeioPagto.iInativo = tTipoMeioPagto.iInativo
    objTipoMeioPagto.iExigeNumero = tTipoMeioPagto.iExigeNumero

    Call Comando_Fechar(lComando)

    TipoMeioPagto_Le_Descricao = SUCESSO

    Exit Function

Erro_TipoMeioPagto_Le_Descricao:

    TipoMeioPagto_Le_Descricao = Err

    Select Case Err

        Case 29005
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 29006, 29007
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOMEIOPAGTO2", Err, objTipoMeioPagto.sDescricao)

        Case 29008

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148628)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function ContaCorrenteInt_Le_NomeReduzido(ByVal objContaCorrenteInt As ClassContasCorrentesInternas) As Long
'Lê os dados da ContaCorrente, cujo NomeReduzido foi passado como parâmetro.

Dim lErro As Long
Dim lComando As Long
Dim tContaCorrenteInt As typeContaCorrenteInt

On Error GoTo Erro_ContaCorrenteInt_Le_NomeReduzido

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 15978

    tContaCorrenteInt.sAgencia = String(STRING_AGENCIA, 0)
    tContaCorrenteInt.sContaContabil = String(STRING_CONTA, 0)
    tContaCorrenteInt.sContato = String(STRING_CONTATO, 0)
    tContaCorrenteInt.sConvenioPagto = String(STRING_CONVENIO_PAGTO, 0)
    tContaCorrenteInt.sDescricao = String(STRING_CONTA_CORRENTE_DESCRICAO, 0)
    tContaCorrenteInt.sDVAgConta = String(STRING_DV, 0)
    tContaCorrenteInt.sDVAgencia = String(STRING_DV, 0)
    tContaCorrenteInt.sDVNumConta = String(STRING_DV, 0)
    tContaCorrenteInt.sNumConta = String(STRING_NUMCONTA, 0)
    tContaCorrenteInt.sTelefone = String(STRING_TELEFONE, 0)
    tContaCorrenteInt.sFax = String(STRING_TELEFONE, 0)
    tContaCorrenteInt.sDirArqBordPagto = String(STRING_CONTA_DIRARQBORDPAGTO, 0)
    tContaCorrenteInt.sContaContabilChqPre = String(STRING_CONTA, 0)

    'Seleciona todos os dados relacionados a conta passada como parametro
    lErro = Comando_Executar(lComando, "SELECT Codigo, FilialEmpresa, Descricao, CodBanco, Agencia, DVAgencia, NumConta, DVNumConta, DVagConta, Contato, ConvenioPagto, Telefone,Fax, SaldoInicial, DataSaldoInicial, ContaContabil, DirArqBordPagto, Rotativo, ContaContabilChqPre FROM ContasCorrentesInternas WHERE NomeReduzido = ? ", _
        tContaCorrenteInt.iCodigo, tContaCorrenteInt.iFilialEmpresa, tContaCorrenteInt.sDescricao, tContaCorrenteInt.iCodBanco, tContaCorrenteInt.sAgencia, tContaCorrenteInt.sDVAgencia, tContaCorrenteInt.sNumConta, tContaCorrenteInt.sDVNumConta, tContaCorrenteInt.sDVAgConta, tContaCorrenteInt.sContato, tContaCorrenteInt.sConvenioPagto, tContaCorrenteInt.sTelefone, tContaCorrenteInt.sFax, tContaCorrenteInt.dSaldoInicial, tContaCorrenteInt.dtDataSaldoInicial, tContaCorrenteInt.sContaContabil, tContaCorrenteInt.sDirArqBordPagto, tContaCorrenteInt.dRotativo, tContaCorrenteInt.sContaContabilChqPre, objContaCorrenteInt.sNomeReduzido)
    If lErro <> AD_SQL_SUCESSO Then Error 15979

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 15980

    'Verifica se a conta foi encontrada
    If lErro = AD_SQL_SEM_DADOS Then Error 15981

    'Transfere os dados da Conta para objcontacorrenteint
    objContaCorrenteInt.iCodigo = tContaCorrenteInt.iCodigo
    objContaCorrenteInt.iFilialEmpresa = tContaCorrenteInt.iFilialEmpresa
    objContaCorrenteInt.sDescricao = tContaCorrenteInt.sDescricao
    objContaCorrenteInt.iCodBanco = tContaCorrenteInt.iCodBanco
    objContaCorrenteInt.sAgencia = tContaCorrenteInt.sAgencia
    objContaCorrenteInt.sDVAgencia = tContaCorrenteInt.sDVAgencia
    objContaCorrenteInt.sNumConta = tContaCorrenteInt.sNumConta
    objContaCorrenteInt.sDVNumConta = tContaCorrenteInt.sDVNumConta
    objContaCorrenteInt.sDVAgConta = tContaCorrenteInt.sDVAgConta
    objContaCorrenteInt.sContato = tContaCorrenteInt.sContato
    objContaCorrenteInt.sConvenioPagto = tContaCorrenteInt.sConvenioPagto
    objContaCorrenteInt.sTelefone = tContaCorrenteInt.sTelefone
    objContaCorrenteInt.dSaldoInicial = tContaCorrenteInt.dSaldoInicial
    objContaCorrenteInt.sContaContabil = tContaCorrenteInt.sContaContabil
    objContaCorrenteInt.sFax = tContaCorrenteInt.sFax
    objContaCorrenteInt.dtDataInicial = tContaCorrenteInt.dtDataSaldoInicial
    objContaCorrenteInt.sDirArqBordPagto = tContaCorrenteInt.sDirArqBordPagto
    objContaCorrenteInt.dRotativo = tContaCorrenteInt.dRotativo
    objContaCorrenteInt.sContaContabilChqPre = tContaCorrenteInt.sContaContabilChqPre

    Call Comando_Fechar(lComando)

    ContaCorrenteInt_Le_NomeReduzido = SUCESSO

    Exit Function

Erro_ContaCorrenteInt_Le_NomeReduzido:

    ContaCorrenteInt_Le_NomeReduzido = Err

    Select Case Err

        Case 15978
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 15979, 15980
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONTASCORRENTESINTERNAS2", Err, objContaCorrenteInt.sNomeReduzido)

        Case 15981

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148629)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function RecebAntecipados_Le_FilialCliente_Baixa(ByVal objFilialCliente As ClassFilialCliente, ByVal colRecebAntecipado As Collection) As Long
'Lê os Recebimentos antecipados com Filial e Cliente passados em objFilialCliente, Excluido<>EXCLUIDO, SaldoNaoApropriado>0, ordenado por DataMovimento e de acordo com giFilialEmpresa.

Dim lComando As Long
Dim lErro As Long
Dim tAntecipRec As typeAntecipRec
Dim tMovCtaCorrente As typeMovContaCorrente
Dim tContaCorrente As typeContaCorrenteInt
Dim objAntecipRec As ClassAntecipReceb
Dim iContador As Integer

On Error GoTo Erro_RecebAntecipados_Le_FilialCliente_Baixa

    'Inicializa comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 29138

    tMovCtaCorrente.sHistorico = String(STRING_HISTORICOMOVCONTA, 0)
    tMovCtaCorrente.sNumRefExterna = String(STRING_NUMREFEXTERNA, 0)
    
    'Se alguma Filial está selecionada
    If giFilialEmpresa <> EMPRESA_TODA Then

        lErro = Comando_Executar(lComando, "SELECT RecebAntecipados.NumIntRec, RecebAntecipados.NumMovto, RecebAntecipados.SaldoNaoApropriado, MovimentosContaCorrente.FilialEmpresa, MovimentosContaCorrente.CodConta, MovimentosContaCorrente.Sequencial, MovimentosContaCorrente.TipoMeioPagto, MovimentosContaCorrente.Numero, MovimentosContaCorrente.DataMovimento, MovimentosContaCorrente.Valor, MovimentosContaCorrente.Historico, MovimentosContaCorrente.Portador, MovimentosContaCorrente.NumRefExterna FROM RecebAntecipados, MovimentosContaCorrente WHERE MovimentosContaCorrente.NumMovto = RecebAntecipados.NumMovto AND RecebAntecipados.Cliente = ? AND RecebAntecipados.Filial_Cliente = ? AND RecebAntecipados.Excluido <> ? AND RecebAntecipados.SaldoNaoApropriado > ? AND MovimentosContaCorrente.FilialEmpresa = ? ORDER BY MovimentosContaCorrente.DataMovimento ", _
        tAntecipRec.lNumIntRec, tAntecipRec.lNumMovto, tAntecipRec.dSaldoNaoApropriado, tContaCorrente.iFilialEmpresa, tContaCorrente.iCodigo, tMovCtaCorrente.lSequencial, tMovCtaCorrente.iTipoMeioPagto, tMovCtaCorrente.lNumero, tMovCtaCorrente.dtDataMovimento, tMovCtaCorrente.dValor, tMovCtaCorrente.sHistorico, tMovCtaCorrente.iPortador, tMovCtaCorrente.sNumRefExterna, objFilialCliente.lCodCliente, objFilialCliente.iCodFilial, EXCLUIDO, DELTA_VALORMONETARIO, giFilialEmpresa)
        If lErro <> AD_SQL_SUCESSO Then Error 29139

    'Se Empresa Toda está selecionada
    Else

        lErro = Comando_Executar(lComando, "SELECT RecebAntecipados.NumIntRec, RecebAntecipados.NumMovto, RecebAntecipados.SaldoNaoApropriado, MovimentosContaCorrente.FilialEmpresa, MovimentosContaCorrente.CodConta, MovimentosContaCorrente.Sequencial, MovimentosContaCorrente.TipoMeioPagto, MovimentosContaCorrente.Numero, MovimentosContaCorrente.DataMovimento, MovimentosContaCorrente.Valor, MovimentosContaCorrente.Historico, MovimentosContaCorrente.Portador, MovimentosContaCorrente.NumRefExterna FROM RecebAntecipados, MovimentosContaCorrente WHERE MovimentosContaCorrente.NumMovto = RecebAntecipados.NumMovto AND RecebAntecipados.Cliente = ? AND RecebAntecipados.Filial_Cliente = ? AND RecebAntecipados.Excluido <> ? AND RecebAntecipados.SaldoNaoApropriado > ? ORDER BY MovimentosContaCorrente.DataMovimento", _
        tAntecipRec.lNumIntRec, tAntecipRec.lNumMovto, tAntecipRec.dSaldoNaoApropriado, tContaCorrente.iFilialEmpresa, tContaCorrente.iCodigo, tMovCtaCorrente.lSequencial, tMovCtaCorrente.iTipoMeioPagto, tMovCtaCorrente.lNumero, tMovCtaCorrente.dtDataMovimento, tMovCtaCorrente.dValor, tMovCtaCorrente.sHistorico, tMovCtaCorrente.iPortador, tMovCtaCorrente.sNumRefExterna, objFilialCliente.lCodCliente, objFilialCliente.iCodFilial, EXCLUIDO, DELTA_VALORMONETARIO)
        If lErro <> AD_SQL_SUCESSO Then Error 29140

    End If

    'Lê o primeiro Recebimento antecipado
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 29141

    'Se não existe Recebimento antecipado com os dados desejados
    If lErro = AD_SQL_SEM_DADOS Then Error 29142
    
    iContador = 0

    Do While lErro <> AD_SQL_SEM_DADOS 'And iContador < NUM_MAX_RECEB_ANTECIPADOS

        iContador = iContador + 1
        
        Set objAntecipRec = New ClassAntecipReceb

        'Passa os dados do Recebimento Antecipado para o Obj
        objAntecipRec.dSaldoNaoApropriado = tAntecipRec.dSaldoNaoApropriado
        objAntecipRec.dtData = tMovCtaCorrente.dtDataMovimento
        objAntecipRec.dValor = tMovCtaCorrente.dValor
        objAntecipRec.iCodConta = tContaCorrente.iCodigo
        objAntecipRec.iExcluido = NAO_EXCLUIDO
        objAntecipRec.iFilial = objFilialCliente.iCodFilial
        objAntecipRec.iFilialEmpresa = tContaCorrente.iFilialEmpresa
        objAntecipRec.iTipoMeioPagto = tMovCtaCorrente.iTipoMeioPagto
        objAntecipRec.lCliente = objFilialCliente.lCodCliente
        objAntecipRec.lNumIntRec = tAntecipRec.lNumIntRec
        objAntecipRec.lNumMovto = tAntecipRec.lNumMovto
        objAntecipRec.lSequencial = tMovCtaCorrente.lSequencial
        objAntecipRec.sHistorico = tMovCtaCorrente.sHistorico
        objAntecipRec.sNumRefExterna = tMovCtaCorrente.sNumRefExterna

        'Coloca o Recebimento antecipado lido na coleção
        colRecebAntecipado.Add objAntecipRec

        'Lê o próximo Recebimento antecipado
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 29143

    Loop

    'Libera comando
    Call Comando_Fechar(lComando)

    RecebAntecipados_Le_FilialCliente_Baixa = SUCESSO

    Exit Function

Erro_RecebAntecipados_Le_FilialCliente_Baixa:

    RecebAntecipados_Le_FilialCliente_Baixa = Err

    Select Case Err

        Case 29138
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 29139, 29140, 29141, 29143
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RECEB_ANTEC", Err)

        Case 29142

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148630)

    End Select

    'Libera comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function DebitosReceber_Le_FilialCliente(ByVal objFilialCliente, colDebitos As Collection) As Long
'Lê os Débitos a receber NAO BAIXADOS com Filial e Cliente passados em objFilialCliente, Status=STATUS_LANCADO, ordenado por DataEmissão e de acordo com giFilialEmpresa.

Dim lComando As Long
Dim lErro As Long
Dim tDebitoReceber As typeDebitosRecCli
Dim objDebitoReceber As ClassDebitoRecCli
Dim iContador As Integer

On Error GoTo Erro_DebitosReceber_Le_FilialCliente

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 29144

    tDebitoReceber.sSiglaDocumento = String(STRING_SIGLA_DOCUMENTO, 0)
    tDebitoReceber.sObservacao = String(STRING_DEBITOSRECCLI_OBSERVACAO, 0)
    
    'Se alguma Filial está selecionada
    If giFilialEmpresa <> EMPRESA_TODA Then

        lErro = Comando_Executar(lComando, "SELECT NumIntDoc, FilialEmpresa, SiglaDocumento, NumTitulo, DataEmissao, Saldo, ValorTotal, ValorSeguro, ValorFrete, OutrasDespesas, ValorProdutos, ValorICMS, ValorICMSSubst, ValorIPI, ValorIRRF, Observacao, PISRetido, COFINSRetido, CSLLRetido FROM DebitosRecCli WHERE Cliente = ? AND Filial = ? AND Status = ? AND FilialEmpresa = ? ORDER BY DataEmissao", tDebitoReceber.lNumIntDoc, tDebitoReceber.iFilialEmpresa, tDebitoReceber.sSiglaDocumento, tDebitoReceber.lNumTitulo, tDebitoReceber.dtDataEmissao, tDebitoReceber.dSaldo, tDebitoReceber.dValorTotal, tDebitoReceber.dValorSeguro, tDebitoReceber.dValorFrete, tDebitoReceber.dOutrasDespesas, tDebitoReceber.dValorProdutos, tDebitoReceber.dValorICMS, tDebitoReceber.dValorICMSSubst, tDebitoReceber.dValorIPI, tDebitoReceber.dValorIRRF, _
            tDebitoReceber.sObservacao, tDebitoReceber.dPISRetido, tDebitoReceber.dCOFINSRetido, tDebitoReceber.dCSLLRetido, objFilialCliente.lCodCliente, objFilialCliente.iCodFilial, STATUS_LANCADO, giFilialEmpresa)
        If lErro <> AD_SQL_SUCESSO Then Error 29145

    'Se Empresa Toda está selecionada
    Else

        lErro = Comando_Executar(lComando, "SELECT NumIntDoc, FilialEmpresa, SiglaDocumento, NumTitulo, DataEmissao, Saldo, ValorTotal, ValorSeguro, ValorFrete, OutrasDespesas, ValorProdutos, ValorICMS, ValorICMSSubst, ValorIPI, ValorIRRF, Observacao, PISRetido, COFINSRetido, CSLLRetido FROM DebitosRecCli WHERE Cliente = ? AND Filial = ? AND Status = ? ORDER BY DataEmissao", tDebitoReceber.lNumIntDoc, tDebitoReceber.iFilialEmpresa, tDebitoReceber.sSiglaDocumento, tDebitoReceber.lNumTitulo, tDebitoReceber.dtDataEmissao, tDebitoReceber.dSaldo, tDebitoReceber.dValorTotal, tDebitoReceber.dValorSeguro, tDebitoReceber.dValorFrete, tDebitoReceber.dOutrasDespesas, tDebitoReceber.dValorProdutos, tDebitoReceber.dValorICMS, tDebitoReceber.dValorICMSSubst, tDebitoReceber.dValorIPI, tDebitoReceber.dValorIRRF, _
            tDebitoReceber.sObservacao, tDebitoReceber.dPISRetido, tDebitoReceber.dCOFINSRetido, tDebitoReceber.dCSLLRetido, objFilialCliente.lCodCliente, objFilialCliente.iCodFilial, STATUS_LANCADO)
        If lErro <> AD_SQL_SUCESSO Then Error 29146

    End If

    'Lê o primeiro Débito
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 29147

    'Se não existe Débito com os dados desejados
    If lErro = AD_SQL_SEM_DADOS Then Error 29148

    Do While lErro <> AD_SQL_SEM_DADOS 'And iContador < NUM_MAX_DEBITOS

        Set objDebitoReceber = New ClassDebitoRecCli

        'Passa os dados do Débito para o Obj
        objDebitoReceber.dOutrasDespesas = tDebitoReceber.dOutrasDespesas
        objDebitoReceber.dSaldo = tDebitoReceber.dSaldo
        objDebitoReceber.dtDataEmissao = tDebitoReceber.dtDataEmissao
        objDebitoReceber.dValorFrete = tDebitoReceber.dValorFrete
        objDebitoReceber.dValorICMS = tDebitoReceber.dValorICMS
        objDebitoReceber.dValorICMSSubst = tDebitoReceber.dValorICMSSubst
        objDebitoReceber.dValorIPI = tDebitoReceber.dValorIPI
        objDebitoReceber.dValorIRRF = tDebitoReceber.dValorIRRF
        objDebitoReceber.dValorProdutos = tDebitoReceber.dValorProdutos
        objDebitoReceber.dValorSeguro = tDebitoReceber.dValorSeguro
        objDebitoReceber.dValorTotal = tDebitoReceber.dValorTotal
        objDebitoReceber.iFilial = objFilialCliente.iCodFilial
        objDebitoReceber.iFilialEmpresa = tDebitoReceber.iFilialEmpresa
        objDebitoReceber.iStatus = STATUS_LANCADO
        objDebitoReceber.lCliente = objFilialCliente.lCodCliente
        objDebitoReceber.lNumIntDoc = tDebitoReceber.lNumIntDoc
        objDebitoReceber.lNumTitulo = tDebitoReceber.lNumTitulo
        objDebitoReceber.sObservacao = tDebitoReceber.sObservacao
        objDebitoReceber.sSiglaDocumento = tDebitoReceber.sSiglaDocumento
        objDebitoReceber.dPISRetido = tDebitoReceber.dPISRetido
        objDebitoReceber.dCOFINSRetido = tDebitoReceber.dCOFINSRetido
        objDebitoReceber.dCSLLRetido = tDebitoReceber.dCSLLRetido

        'Coloca o Débito lido na coleção
        colDebitos.Add objDebitoReceber

        'Lê o próximo Débito
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 29149

    Loop

    lErro = Comando_Fechar(lComando)

    DebitosReceber_Le_FilialCliente = SUCESSO

    Exit Function

Erro_DebitosReceber_Le_FilialCliente:

    DebitosReceber_Le_FilialCliente = Err

    Select Case Err

        Case 29144
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 29145, 29146, 29147, 29149
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_DEBITOSRECCLI", Err)

        Case 29148
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148631)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function BaixaRecCancelar_Le_Parcela(ByVal lNumIntTitulo As Long, ByVal iNumParcela As Integer, ByVal iSequencial As Integer, ByVal objParcRecBaixa As ClassBaixaParcRec) As Long
'Lê dados da baixa de uma parcela a receber de um titulo baixado ou nao

Dim lErro As Long
Dim lComando As Long
Dim tBaixaParcRec As typeBaixaParcRec
Dim lNumIntBaixa As Long
Dim sComando As String

On Error GoTo Erro_BaixaRecCancelar_Le_Parcela

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 42804
    
    '################################
    'Alterado por Wagner
    'Inserido ValorRecebido
    sComando = "SELECT BaixasParcRec.NumIntBaixa, BaixasParcRec.Status, BaixasParcRec.ValorDesconto, BaixasParcRec.ValorMulta, BaixasParcRec.ValorBaixado, BaixasParcRec.ValorJuros, BaixasParcRec.NumIntParcela, BaixasParcRec.ValorRecebido FROM BaixasParcRec, TitulosRecBaixados, ParcelasRecBaixadas WHERE BaixasParcRec.NumIntParcela = ParcelasRecBaixadas.NumIntDoc AND TitulosRecBaixados.NumIntdoc = ParcelasRecBaixadas.NumIntTitulo AND ParcelasRecBaixadas.NumIntTitulo = ? AND ParcelasRecBaixadas.Numparcela = ? AND BaixasParcRec.Sequencial = ?"

    lErro = Comando_Executar(lComando, sComando, tBaixaParcRec.lNumIntBaixa, tBaixaParcRec.iStatus, tBaixaParcRec.dValorDesconto, tBaixaParcRec.dValorMulta, tBaixaParcRec.dValorBaixado, tBaixaParcRec.dValorJuros, tBaixaParcRec.lNumIntParcela, tBaixaParcRec.dValorRecebido, lNumIntTitulo, iNumParcela, iSequencial)
    If lErro <> AD_SQL_SUCESSO Then Error 46228

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 46229

    If lErro = AD_SQL_SEM_DADOS Then
        
        sComando = "SELECT BaixasParcRec.NumIntBaixa, BaixasParcRec.Status, BaixasParcRec.ValorDesconto, BaixasParcRec.ValorMulta, BaixasParcRec.ValorBaixado, BaixasParcRec.ValorJuros,BaixasParcRec.NumIntParcela, BaixasParcRec.ValorRecebido FROM BaixasParcRec, TitulosRec,ParcelasRec WHERE  BaixasParcRec.NumIntParcela =ParcelasRec.NumIntDoc AND TitulosRec.NumIntdoc = ParcelasRec.NumIntTitulo AND ParcelasRec.NumIntTitulo = ? AND ParcelasRec.Numparcela = ? AND BaixasParcRec.Sequencial = ?"
        
        lErro = Comando_Executar(lComando, sComando, tBaixaParcRec.lNumIntBaixa, tBaixaParcRec.iStatus, tBaixaParcRec.dValorDesconto, tBaixaParcRec.dValorMulta, tBaixaParcRec.dValorBaixado, tBaixaParcRec.dValorJuros, tBaixaParcRec.lNumIntParcela, tBaixaParcRec.dValorRecebido, lNumIntTitulo, iNumParcela, iSequencial)
        If lErro <> AD_SQL_SUCESSO Then Error 46228
    
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 46229
    
        If lErro = AD_SQL_SEM_DADOS Then Error 46230
    
    End If
    '################################

    objParcRecBaixa.lNumIntBaixa = tBaixaParcRec.lNumIntBaixa
    objParcRecBaixa.iStatus = tBaixaParcRec.iStatus
    objParcRecBaixa.dValorDesconto = tBaixaParcRec.dValorDesconto
    objParcRecBaixa.dValorMulta = tBaixaParcRec.dValorMulta
    objParcRecBaixa.dValorBaixado = tBaixaParcRec.dValorBaixado
    objParcRecBaixa.dValorJuros = tBaixaParcRec.dValorJuros
    objParcRecBaixa.lNumIntParcela = tBaixaParcRec.lNumIntParcela
    
    '####################################
    'Inserido por Wagner
    objParcRecBaixa.dValorRecebido = tBaixaParcRec.dValorRecebido
    '####################################

    Call Comando_Fechar(lComando)

    BaixaRecCancelar_Le_Parcela = SUCESSO

    Exit Function

Erro_BaixaRecCancelar_Le_Parcela:

    BaixaRecCancelar_Le_Parcela = Err

    Select Case Err

        Case 42804
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 46228, 46229
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BAIXASPARCREC", Err)

        Case 46230

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148632)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function BaixaRec_Le(ByVal objBaixaReceber As ClassBaixaReceber) As Long
'Lê a Baixa de Recebimento

Dim lErro As Long
Dim tBaixaReceber As typeBaixaReceber
Dim lComando As Long

On Error GoTo Erro_BaixaRec_Le

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 46231
    
    tBaixaReceber.sHistorico = String(STRING_HISTORICOMOVCONTA, 0)
    
    lErro = Comando_Executar(lComando, "SELECT Status, Historico, Motivo, Data, DataContabil, DataRegistro, NumMovCta, NumIntDoc, NumIntCheque, FilialEmpresaCheque, NumIntDocBaixaAgrupada FROM BaixasRec WHERE NumIntBaixa = ?", tBaixaReceber.iStatus, tBaixaReceber.sHistorico, tBaixaReceber.iMotivo, tBaixaReceber.dtData, tBaixaReceber.dtDataContabil, tBaixaReceber.dtDataRegistro, tBaixaReceber.lNumMovCta, tBaixaReceber.lNumIntDoc, tBaixaReceber.lNumIntCheque, tBaixaReceber.iFilialEmpresaCheque, tBaixaReceber.lNumIntDocBaixaAgrupada, objBaixaReceber.lNumIntBaixa)
    If lErro <> AD_SQL_SUCESSO Then Error 46232
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 46233
    
    'Se não encontrou a Baixa de Recebimento --> Erro
    If lErro = AD_SQL_SEM_DADOS Then Error 46234

    'Preenche objBaixaReceber
    objBaixaReceber.dtData = tBaixaReceber.dtData
    objBaixaReceber.dtDataContabil = tBaixaReceber.dtDataContabil
    objBaixaReceber.dtDataRegistro = tBaixaReceber.dtDataRegistro
    objBaixaReceber.iMotivo = tBaixaReceber.iMotivo
    objBaixaReceber.iStatus = tBaixaReceber.iStatus
    objBaixaReceber.lNumIntDoc = tBaixaReceber.lNumIntDoc
    objBaixaReceber.lNumMovCta = tBaixaReceber.lNumMovCta
    objBaixaReceber.sHistorico = tBaixaReceber.sHistorico
    objBaixaReceber.lNumIntCheque = tBaixaReceber.lNumIntCheque
    objBaixaReceber.iFilialEmpresaCheque = tBaixaReceber.iFilialEmpresaCheque
    objBaixaReceber.lNumIntDocBaixaAgrupada = tBaixaReceber.lNumIntDocBaixaAgrupada

    Call Comando_Fechar(lComando)
    
    BaixaRec_Le = SUCESSO
    
    Exit Function
    
Erro_BaixaRec_Le:

    BaixaRec_Le = Err
    
    Select Case Err
    
        Case 46231
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
            
        Case 46232, 46233
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BAIXAPAG", Err)
        
        Case 46234
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, 148633)
            
    End Select
            
    Call Comando_Fechar(lComando)
    
    Exit Function
    
End Function

Function AntecipRec_Le_NumMovto(ByVal objAntecipRec As ClassAntecipReceb) As Long
'le dados de um adiantamento de cliente a partir do identificador do movto de cta corrente associado a ele.

Dim lErro As Long
Dim lComando As Long
Dim tAntecipRec As typeAntecipRec

On Error GoTo Erro_AntecipRec_Le_NumMovto

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 46249
    
    lErro = Comando_Executar(lComando, "SELECT NumIntRec,Excluido, SaldoNaoApropriado,Cliente,Filial_Cliente FROM RecebAntecipados WHERE NumMovto = ? ", tAntecipRec.lNumIntRec, tAntecipRec.iExcluido, tAntecipRec.dSaldoNaoApropriado, tAntecipRec.lCliente, tAntecipRec.iFilial_Cliente, objAntecipRec.lNumMovto)
    If lErro <> AD_SQL_SUCESSO Then Error 46250
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 46251
    If lErro <> AD_SQL_SUCESSO Then Error 46252
    
    objAntecipRec.lCliente = tAntecipRec.lCliente
    objAntecipRec.dSaldoNaoApropriado = tAntecipRec.dSaldoNaoApropriado
    objAntecipRec.iExcluido = tAntecipRec.iExcluido
    objAntecipRec.iFilial = tAntecipRec.iFilial_Cliente
    objAntecipRec.lNumIntRec = tAntecipRec.lNumIntRec
    
    Call Comando_Fechar(lComando)
    
    AntecipRec_Le_NumMovto = SUCESSO

    Exit Function
    
Erro_AntecipRec_Le_NumMovto:

    AntecipRec_Le_NumMovto = Err
    
    Select Case Err
    
        Case 46249
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_ARQUIVO_SORT", Err)
        
        Case 46250, 46251
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RECEB_ANTEC", Err)
                    
        Case 46252
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148634)
    
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function TituloReceber_Le_Numero_Sigla(ByVal objTituloReceber As ClassTituloReceber) As Long
'Lê o Título com o SiglaDocumento, Numtitulo passados em objtituloReceber

Dim lErro As Long
Dim lComando As Long
Dim tTituloReceber As typeTituloReceber

On Error GoTo Erro_TituloReceber_Le_Numero_Sigla
    
    'Abre comando
    lComando = Comando_Abrir
    If lComando = 0 Then Error 46463
    
    tTituloReceber.sObservacao = String(STRING_TITULO_OBSERVACAO, 0)
    tTituloReceber.sCcl = String(STRING_CCL, 0)
    tTituloReceber.sNatureza = String(STRING_NATMOVCTA_CODIGO, 0)
    
    'Seleciona TituloReceber a partir dos dados fornecidos
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc, Cliente, Filial, Status, Saldo, NumParcelas, Valor, ValorIRRF, ValorISS, ISSRetido, PercJurosDiarios, PercMulta, CondicaoPagto, Observacao, DataEmissao, PISRetido, COFINSRetido, CSLLRetido, Moeda, Ccl, Natureza, CpoGenerico1, ReajustePeriodicidade, ReajusteBase, ReajustadoAte FROM TitulosRec WHERE NumTitulo = ? AND SiglaDocumento = ? AND FilialEmpresa = ? AND Status <> ? ", _
        tTituloReceber.lNumIntDoc, tTituloReceber.lCliente, tTituloReceber.iFilial, tTituloReceber.iStatus, tTituloReceber.dSaldo, tTituloReceber.iNumParcelas, tTituloReceber.dValor, tTituloReceber.dValorIRRF, tTituloReceber.dValorISS, tTituloReceber.dISSRetido, tTituloReceber.dPercJurosDiario, tTituloReceber.dPercMulta, tTituloReceber.iCondicaoPagto, tTituloReceber.sObservacao, tTituloReceber.dtDataEmissao, _
        tTituloReceber.dPISRetido, tTituloReceber.dCOFINSRetido, tTituloReceber.dCSLLRetido, tTituloReceber.iMoeda, tTituloReceber.sCcl, tTituloReceber.sNatureza, tTituloReceber.lCpoGenerico1, tTituloReceber.iReajustePeriodicidade, tTituloReceber.dtReajusteBase, tTituloReceber.dtReajustadoAte, objTituloReceber.lNumTitulo, objTituloReceber.sSiglaDocumento, objTituloReceber.iFilialEmpresa, STATUS_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then Error 46464
    
    'Tenta ler
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 46465
    
    'Se não encontrou o Título à Receber --> Erro
    If lErro = AD_SQL_SEM_DADOS Then Error 46466
    
    'Preenche objTituloReceber com os dados lidos
    objTituloReceber.lNumIntDoc = tTituloReceber.lNumIntDoc
    objTituloReceber.lCliente = tTituloReceber.lCliente
    objTituloReceber.iFilial = tTituloReceber.iFilial
    objTituloReceber.iStatus = tTituloReceber.iStatus
    objTituloReceber.dValor = tTituloReceber.dValor
    objTituloReceber.dSaldo = tTituloReceber.dSaldo
    objTituloReceber.iNumParcelas = tTituloReceber.iNumParcelas
    objTituloReceber.dValorIRRF = tTituloReceber.dValorIRRF
    objTituloReceber.dValorISS = tTituloReceber.dValorISS
    objTituloReceber.dISSRetido = tTituloReceber.dISSRetido
    objTituloReceber.dPercJurosDiario = tTituloReceber.dPercJurosDiario
    objTituloReceber.dPercMulta = tTituloReceber.dPercMulta
    objTituloReceber.sObservacao = tTituloReceber.sObservacao
    objTituloReceber.dtDataEmissao = tTituloReceber.dtDataEmissao
    objTituloReceber.iCondicaoPagto = tTituloReceber.iCondicaoPagto
    objTituloReceber.dPISRetido = tTituloReceber.dPISRetido
    objTituloReceber.dCOFINSRetido = tTituloReceber.dCOFINSRetido
    objTituloReceber.dCSLLRetido = tTituloReceber.dCSLLRetido
    objTituloReceber.iMoeda = tTituloReceber.iMoeda
    objTituloReceber.sCcl = tTituloReceber.sCcl
    objTituloReceber.sNatureza = tTituloReceber.sNatureza
    objTituloReceber.lCpoGenerico1 = tTituloReceber.lCpoGenerico1
    objTituloReceber.iReajustePeriodicidade = tTituloReceber.iReajustePeriodicidade
    objTituloReceber.dtReajusteBase = tTituloReceber.dtReajusteBase
    objTituloReceber.dtReajustadoAte = tTituloReceber.dtReajustadoAte

    'Fecha comando
    Call Comando_Fechar(lComando)
    
    TituloReceber_Le_Numero_Sigla = SUCESSO
    
    Exit Function
    
Erro_TituloReceber_Le_Numero_Sigla:

    TituloReceber_Le_Numero_Sigla = Err

    Select Case Err
    
        Case 46463
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 46464, 46465
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TITULOSREC", Err, objTituloReceber.lNumTitulo, objTituloReceber.sSiglaDocumento)
        
        Case 46466
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, 148635)
            
    End Select

    'fecha o Comando
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function ParcelaReceber_Le_NumTitulo(ByVal objTituloReceber As ClassTituloReceber, ByVal objParcelaReceber As ClassParcelaReceber) As Long
'le dados da parcela a receber a partir do numero do titulo e do numero da parcela

Dim lErro As Long
Dim lComando As Long
Dim tParcelaReceber As typeParcelaReceber

On Error GoTo Erro_ParcelaReceber_Le_NumTitulo

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 46474
    
    tParcelaReceber.sNumTitCobrador = String(STRING_NOSSO_NUMERO, 0)
    tParcelaReceber.sObservacao = String(STRING_OBS_PARC_REC, 0)

    'Seleciona Parcelas vinculadas ao Título
    'Janaina
    lErro = Comando_Executar(lComando, "SELECT ParcelasRec.NumIntDoc,  ParcelasRec.Status, ParcelasRec.DataVencimento, ParcelasRec.DataVencimentoReal, ParcelasRec.Saldo, ParcelasRec.Valor, ParcelasRec.Cobrador, ParcelasRec.CarteiraCobranca, ParcelasRec.NumTitCobrador, ParcelasRec.ProxSeqBaixa, ParcelasRec.ProxSeqOcorr, ParcelasRec.Desconto1Codigo, ParcelasRec.Desconto1Ate, ParcelasRec.Desconto1Valor, ParcelasRec.Desconto2Codigo, ParcelasRec.Desconto2Ate, ParcelasRec.Desconto2Valor, ParcelasRec.Desconto3Codigo, ParcelasRec.Desconto3Ate, ParcelasRec.Desconto3Valor, ParcelasRec.Aceite, ParcelasRec.Descontada, ParcelasRec.NumIntTitulo, ParcelasRec.ValorOriginal, ParcelasRec.Observacao, ParcelasRec.Previsao FROM TitulosRec,ParcelasRec WHERE ParcelasRec.NumIntTitulo = TitulosRec.NumIntDoc AND TitulosRec.FilialEmpresa = ? AND TitulosRec.NumTitulo = ? AND TitulosRec.SiglaDocumento = ? AND ParcelasRec.Status <> ? AND ParcelasRec.NumParcela = ?", _
        tParcelaReceber.lNumIntDoc, tParcelaReceber.iStatus, tParcelaReceber.dtDataVencimento, tParcelaReceber.dtDataVencimentoReal, tParcelaReceber.dSaldo, tParcelaReceber.dValor, tParcelaReceber.iCobrador, tParcelaReceber.iCarteiraCobranca, tParcelaReceber.sNumTitCobrador, tParcelaReceber.iProxSeqBaixa, tParcelaReceber.iProxSeqOcorr, tParcelaReceber.iDesconto1Codigo, tParcelaReceber.dtDesconto1Ate, tParcelaReceber.dDesconto1Valor, tParcelaReceber.iDesconto2Codigo, tParcelaReceber.dtDesconto2Ate, tParcelaReceber.dDesconto2Valor, tParcelaReceber.iDesconto3Codigo, tParcelaReceber.dtDesconto3Ate, tParcelaReceber.dDesconto3Valor, tParcelaReceber.iAceite, tParcelaReceber.iDescontada, tParcelaReceber.lNumIntTitulo, tParcelaReceber.dValorOriginal, tParcelaReceber.sObservacao, tParcelaReceber.iPrevisao, objTituloReceber.iFilialEmpresa, objTituloReceber.lNumTitulo, objTituloReceber.sSiglaDocumento, STATUS_EXCLUIDO, objParcelaReceber.iNumParcela)
    If lErro <> AD_SQL_SUCESSO Then Error 46475
    'Janaina
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SEM_DADOS And lErro <> AD_SQL_SUCESSO Then Error 46476
    If lErro = AD_SQL_SEM_DADOS Then Error 46477
    
    objParcelaReceber.dDesconto1Valor = tParcelaReceber.dDesconto1Valor
    objParcelaReceber.dDesconto2Valor = tParcelaReceber.dDesconto2Valor
    objParcelaReceber.dDesconto3Valor = tParcelaReceber.dDesconto3Valor
    objParcelaReceber.dSaldo = tParcelaReceber.dSaldo
    objParcelaReceber.dtDataVencimento = tParcelaReceber.dtDataVencimento
    objParcelaReceber.dtDataVencimentoReal = tParcelaReceber.dtDataVencimentoReal
    objParcelaReceber.dtDesconto1Ate = tParcelaReceber.dtDesconto1Ate
    objParcelaReceber.dtDesconto2Ate = tParcelaReceber.dtDesconto2Ate
    objParcelaReceber.dtDesconto3Ate = tParcelaReceber.dtDesconto3Ate
    objParcelaReceber.dValor = tParcelaReceber.dValor
    objParcelaReceber.iAceite = tParcelaReceber.iAceite
    objParcelaReceber.iCarteiraCobranca = tParcelaReceber.iCarteiraCobranca
    objParcelaReceber.iCobrador = tParcelaReceber.iCobrador
    objParcelaReceber.iDescontada = tParcelaReceber.iDescontada
    objParcelaReceber.iDesconto1Codigo = tParcelaReceber.iDesconto1Codigo
    objParcelaReceber.iDesconto2Codigo = tParcelaReceber.iDesconto2Codigo
    objParcelaReceber.iDesconto3Codigo = tParcelaReceber.iDesconto3Codigo
    objParcelaReceber.iProxSeqBaixa = tParcelaReceber.iProxSeqBaixa
    objParcelaReceber.iProxSeqOcorr = tParcelaReceber.iProxSeqOcorr
    objParcelaReceber.iStatus = tParcelaReceber.iStatus
    objParcelaReceber.lNumIntDoc = tParcelaReceber.lNumIntDoc
    objParcelaReceber.lNumIntTitulo = tParcelaReceber.lNumIntTitulo
    objParcelaReceber.sNumTitCobrador = tParcelaReceber.sNumTitCobrador
    objParcelaReceber.dValorOriginal = tParcelaReceber.dValorOriginal
    objParcelaReceber.sObservacao = tParcelaReceber.sObservacao
    objParcelaReceber.iPrevisao = tParcelaReceber.iPrevisao
    
    Call Comando_Fechar(lComando)
    
    ParcelaReceber_Le_NumTitulo = SUCESSO
    
    Exit Function
    
Erro_ParcelaReceber_Le_NumTitulo:

    ParcelaReceber_Le_NumTitulo = Err
    
    Select Case Err
    
        Case 46474
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
            
        Case 46475, 46476
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_REC", Err)
        
        Case 46477
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148636)
            
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function
    
End Function

Function BorderoCobranca_Le(ByVal objBorderoCobranca As ClassBorderoCobranca) As Long
'le dados de um bordero de cobranca

Dim lErro As Long
Dim tBorderoCobranca As typeBorderoCobranca
Dim lComando As Long

On Error GoTo Erro_BorderoCobranca_Le

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 46369

    tBorderoCobranca.sConvenio = String(STRING_BORDERO_CONVENIO, 0)
    tBorderoCobranca.sNomeArquivo = String(STRING_NOME_ARQ_COMPLETO, 0)
    
    lErro = Comando_Executar(lComando, "SELECT CodNossaConta,DiasDeRetencao,TaxaCobranca,TaxaDesconto,Valor,ValorDesconto,Convenio,Status,DataCancelamento,DataContabilCancelamento,CarteiraCobranca, DataEmissao,Cobrador,NomeArquivo FROM BorderosCobranca WHERE NumBordero = ? ", tBorderoCobranca.iCodNossaConta, tBorderoCobranca.iDiasDeRetencao, tBorderoCobranca.dTaxaCobranca, tBorderoCobranca.dTaxaDesconto, tBorderoCobranca.dValor, tBorderoCobranca.dValorDesconto, tBorderoCobranca.sConvenio, tBorderoCobranca.iStatus, tBorderoCobranca.dtDataCancelamento, tBorderoCobranca.dtDataContabilCancelamento, tBorderoCobranca.iCodCarteiraCobranca, tBorderoCobranca.dtDataEmissao, tBorderoCobranca.iCobrador, tBorderoCobranca.sNomeArquivo, objBorderoCobranca.lNumBordero)
    If lErro <> AD_SQL_SUCESSO Then Error 46364
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 46365
    If lErro = AD_SQL_SEM_DADOS Then Error 46366
    
    objBorderoCobranca.dTaxaCobranca = tBorderoCobranca.dTaxaCobranca
    objBorderoCobranca.dTaxaDesconto = tBorderoCobranca.dTaxaDesconto
    objBorderoCobranca.dValor = tBorderoCobranca.dValor
    objBorderoCobranca.dValorDesconto = tBorderoCobranca.dValorDesconto
    objBorderoCobranca.iCodNossaConta = tBorderoCobranca.iCodNossaConta
    objBorderoCobranca.iDiasDeRetencao = tBorderoCobranca.iDiasDeRetencao
    objBorderoCobranca.sConvenio = tBorderoCobranca.sConvenio
    objBorderoCobranca.dtDataCancelamento = tBorderoCobranca.dtDataCancelamento
    objBorderoCobranca.dtDataContabilCancelamento = tBorderoCobranca.dtDataContabilCancelamento
    objBorderoCobranca.dtDataEmissao = tBorderoCobranca.dtDataEmissao
    objBorderoCobranca.iCobrador = tBorderoCobranca.iCobrador
    objBorderoCobranca.iCodCarteiraCobranca = tBorderoCobranca.iCodCarteiraCobranca
    objBorderoCobranca.iStatus = tBorderoCobranca.iStatus
    objBorderoCobranca.sNomeArquivo = tBorderoCobranca.sNomeArquivo
        
    Call Comando_Fechar(lComando)
    
    BorderoCobranca_Le = SUCESSO
    
    Exit Function
    
Erro_BorderoCobranca_Le:

    BorderoCobranca_Le = Err
    
    Select Case Err
    
        Case 46364, 46365
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BORDERO_COBRANCA", Err)
            
        Case 46366
        
        Case 46369
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148637)
            
    End Select

    Call Comando_Fechar(lComando)

End Function

Function BorderoCobranca_Le_Quantidade_ValorCobrado(ByVal objBorderoCobranca As ClassBorderoCobranca, lQuantidade As Long, dValorCobrado As Double) As Long
'obtem a qtde de parcelas cobradas e o valor cobrado num bordero de cobranca

Dim lErro As Long
Dim dValorCobradoOcorrencia As Double
Dim lComando As Long
 
On Error GoTo Erro_BorderoCobranca_Le_Quantidade_ValorCobrado

    lQuantidade = 0
    dValorCobrado = 0

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 46370
    
    lErro = Comando_Executar(lComando, "SELECT ValorCobrado FROM OcorrenciasRemParcRec WHERE NumBordero = ?", dValorCobradoOcorrencia, objBorderoCobranca.lNumBordero)
    If lErro <> AD_SQL_SUCESSO Then Error 46371
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 46372
    
    Do While lErro = AD_SQL_SUCESSO
    
        lQuantidade = lQuantidade + 1
        
        dValorCobrado = dValorCobrado + dValorCobradoOcorrencia
        
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 46373
        
    Loop

    Call Comando_Fechar(lComando)
    
    BorderoCobranca_Le_Quantidade_ValorCobrado = SUCESSO
    
    Exit Function
    
Erro_BorderoCobranca_Le_Quantidade_ValorCobrado:

    BorderoCobranca_Le_Quantidade_ValorCobrado = Err
    
    Select Case Err
    
        Case 46370
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
                    
        Case 46371, 46372, 46373
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_OCORRENCIASREMPARCREC", Err)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148638)
            
    End Select
        
    Call Comando_Fechar(lComando)
        
    Exit Function

End Function

Function TituloPagar_Le_Titulo(ByVal objTituloPagar As ClassTituloPagar) As Long
'Lê o Título com o Fornecedor, Filial e Número do Título passados em objTituloPagar
'como pode haver mais de um titulo vou pegar o que foi registrado mais recentemente

Dim lErro As Long
Dim lComando As Long
Dim tTituloPagar As typeTituloPagar

On Error GoTo Erro_TituloPagar_Le_Titulo
    
    'Abre comando
    lComando = Comando_Abrir
    If lComando = 0 Then Error 43448
    
    tTituloPagar.sObservacao = String(STRING_TITULO_OBSERVACAO, 0)
    tTituloPagar.sSiglaDocumento = String(STRING_SIGLA_DOCUMENTO, 0)
    tTituloPagar.sHistorico = String(STRING_NFSPAG_HISTORICO, 0)
    tTituloPagar.sNatureza = String(STRING_NATMOVCTA_CODIGO, 0)
    
    'Seleciona TituloPagar a partir dos dados fornecidos
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc, SiglaDocumento, DataEmissao, Status, Saldo, NumParcelas, ValorTotal, ValorSeguro, ValorFrete, OutrasDespesas, ValorProdutos, ValorICMS, ValorICMSSubst, CreditoICMS, ValorIPI, CreditoIPI, ValorIRRF, ValorINSS, INSSRetido, Observacao, FilialPedCompra, NumPedCompra, DataRegistro, CondicaoPagto, PISRetido, ISSRetido, COFINSRetido, CSLLRetido, TaxaMoeda, Historico, Natureza, Ccl FROM TitulosPag WHERE Fornecedor = ? AND Filial = ? AND NumTitulo = ? AND FilialEmpresa = ? AND Status <> ? ORDER BY DataRegistro DESC", tTituloPagar.lNumIntDoc, tTituloPagar.sSiglaDocumento, tTituloPagar.dtDataEmissao, _
        tTituloPagar.iStatus, tTituloPagar.dSaldo, tTituloPagar.iNumParcelas, tTituloPagar.dValorTotal, tTituloPagar.dValorSeguro, tTituloPagar.dValorFrete, tTituloPagar.dOutrasDespesas, tTituloPagar.dValorProdutos, tTituloPagar.dValorICMS, tTituloPagar.dValorICMSSubst, tTituloPagar.iCreditoICMS, tTituloPagar.dValorIPI, tTituloPagar.iCreditoIPI, tTituloPagar.dValorIRRF, tTituloPagar.dValorINSS, tTituloPagar.iINSSRetido, tTituloPagar.sObservacao, tTituloPagar.iFilialPedCompra, tTituloPagar.lNumPedCompra, tTituloPagar.dtDataRegistro, tTituloPagar.iCondicaoPagto, tTituloPagar.dPISRetido, tTituloPagar.dISSRetido, tTituloPagar.dCOFINSRetido, tTituloPagar.dCSLLRetido, tTituloPagar.dTaxaMoeda, tTituloPagar.sHistorico, tTituloPagar.sNatureza, _
        tTituloPagar.sNatureza, objTituloPagar.lFornecedor, objTituloPagar.iFilial, objTituloPagar.lNumTitulo, giFilialEmpresa, STATUS_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then Error 43449
    
    'Tenta ler
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 18550
    
    'Se não encontrou --> Erro
    If lErro = AD_SQL_SEM_DADOS Then Error 43451
    
    tTituloPagar.iFilialEmpresa = giFilialEmpresa
    tTituloPagar.lFornecedor = objTituloPagar.lFornecedor
    tTituloPagar.iFilial = objTituloPagar.iFilial
    tTituloPagar.lNumTitulo = objTituloPagar.lNumTitulo
    
    'Preenche objTituloPagar com os dados lidos
    Call TituloPagar_MoverCamposObj(objTituloPagar, tTituloPagar)
    
    'Fecha comando
    Call Comando_Fechar(lComando)
    
    TituloPagar_Le_Titulo = SUCESSO
    
    Exit Function
    
Erro_TituloPagar_Le_Titulo:

    TituloPagar_Le_Titulo = Err

    Select Case Err
    
        Case 43448
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 43449, 43450
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TITULOSPAG2", Err, objTituloPagar.lFornecedor, objTituloPagar.iFilial)
        
        Case 43451
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, 148639)
            
    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function TituloReceber_Le_NumeroInterno(ByVal objTituloReceber As ClassTituloReceber) As Long
'Lê Número Interno do Título e outros dados a partir dos campos FilialEmpresa,Cliente,Filial,SiglaDocumento e NumTitulo passados como parâmetro

Dim lErro As Long
Dim lComando As Long
Dim tTituloReceber As typeTituloReceber

On Error GoTo Erro_TituloReceber_Le_NumeroInterno

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 28571

    tTituloReceber.sObservacao = String(STRING_TITULO_OBSERVACAO, 0)
    tTituloReceber.sCcl = String(STRING_CCL, 0)
    tTituloReceber.sNatureza = String(STRING_NATMOVCTA_CODIGO, 0)

    If objTituloReceber.dtDataEmissao = DATA_NULA Then
        lErro = Comando_Executar(lComando, "SELECT NumIntDoc, DataEmissao, Status, Saldo, NumParcelas, Valor, ValorIRRF, ValorISS, ISSRetido, ValorINSS, INSSRetido, PercJurosDiarios, PercMulta, Observacao, CondicaoPagto, DataRegistro, PISRetido, COFINSRetido, CSLLRetido, Moeda, Ccl, Natureza, CpoGenerico1, ReajustePeriodicidade, ReajusteBase, ReajustadoAte FROM TitulosRec WHERE FilialEmpresa = ? AND Cliente = ? AND Filial = ? AND SiglaDocumento = ? AND NumTitulo = ? AND Status <> ? ORDER BY DataEmissao", _
            tTituloReceber.lNumIntDoc, tTituloReceber.dtDataEmissao, tTituloReceber.iStatus, tTituloReceber.dSaldo, tTituloReceber.iNumParcelas, tTituloReceber.dValor, tTituloReceber.dValorIRRF, tTituloReceber.dValorISS, tTituloReceber.dISSRetido, tTituloReceber.dValorINSS, tTituloReceber.iINSSRetido, tTituloReceber.dPercJurosDiario, tTituloReceber.dPercMulta, tTituloReceber.sObservacao, tTituloReceber.iCondicaoPagto, tTituloReceber.dtDataRegistro, tTituloReceber.dPISRetido, tTituloReceber.dCOFINSRetido, tTituloReceber.dCSLLRetido, tTituloReceber.iMoeda, tTituloReceber.sCcl, tTituloReceber.sNatureza, tTituloReceber.lCpoGenerico1, tTituloReceber.iReajustePeriodicidade, tTituloReceber.dtReajusteBase, tTituloReceber.dtReajustadoAte, objTituloReceber.iFilialEmpresa, objTituloReceber.lCliente, objTituloReceber.iFilial, objTituloReceber.sSiglaDocumento, objTituloReceber.lNumTitulo, STATUS_EXCLUIDO)
    Else
        lErro = Comando_Executar(lComando, "SELECT NumIntDoc, DataEmissao, Status, Saldo, NumParcelas, Valor, ValorIRRF, ValorISS, ISSRetido, ValorINSS, INSSRetido, PercJurosDiarios, PercMulta, Observacao, CondicaoPagto, DataRegistro, PISRetido, COFINSRetido, CSLLRetido, Moeda, Ccl, Natureza, CpoGenerico1, ReajustePeriodicidade, ReajusteBase, ReajustadoAte FROM TitulosRec WHERE FilialEmpresa = ? AND Cliente = ? AND Filial = ? AND SiglaDocumento = ? AND NumTitulo = ? AND Status <> ? AND DataEmissao = ?", _
            tTituloReceber.lNumIntDoc, tTituloReceber.dtDataEmissao, tTituloReceber.iStatus, tTituloReceber.dSaldo, tTituloReceber.iNumParcelas, tTituloReceber.dValor, tTituloReceber.dValorIRRF, tTituloReceber.dValorISS, tTituloReceber.dISSRetido, tTituloReceber.dValorINSS, tTituloReceber.iINSSRetido, tTituloReceber.dPercJurosDiario, tTituloReceber.dPercMulta, tTituloReceber.sObservacao, tTituloReceber.iCondicaoPagto, tTituloReceber.dtDataRegistro, tTituloReceber.dPISRetido, tTituloReceber.dCOFINSRetido, tTituloReceber.dCSLLRetido, tTituloReceber.iMoeda, tTituloReceber.sCcl, tTituloReceber.sNatureza, tTituloReceber.lCpoGenerico1, tTituloReceber.iReajustePeriodicidade, tTituloReceber.dtReajusteBase, tTituloReceber.dtReajustadoAte, objTituloReceber.iFilialEmpresa, objTituloReceber.lCliente, objTituloReceber.iFilial, objTituloReceber.sSiglaDocumento, objTituloReceber.lNumTitulo, STATUS_EXCLUIDO, objTituloReceber.dtDataEmissao)
    End If
    If lErro <> AD_SQL_SUCESSO Then Error 28572

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 28573

    If lErro = AD_SQL_SEM_DADOS Then Error 28574

    'Preenche objTituloReceber com os dados lidos
    objTituloReceber.lNumIntDoc = tTituloReceber.lNumIntDoc
    objTituloReceber.dtDataEmissao = tTituloReceber.dtDataEmissao
    objTituloReceber.iStatus = tTituloReceber.iStatus
    objTituloReceber.dSaldo = tTituloReceber.dSaldo
    objTituloReceber.iNumParcelas = tTituloReceber.iNumParcelas
    objTituloReceber.dValor = tTituloReceber.dValor
    objTituloReceber.dValorIRRF = tTituloReceber.dValorIRRF
    objTituloReceber.dValorISS = tTituloReceber.dValorISS
    objTituloReceber.dISSRetido = tTituloReceber.dISSRetido
    objTituloReceber.dValorINSS = tTituloReceber.dValorINSS
    objTituloReceber.iINSSRetido = tTituloReceber.iINSSRetido
    objTituloReceber.dPercJurosDiario = tTituloReceber.dPercJurosDiario
    objTituloReceber.dPercMulta = tTituloReceber.dPercMulta
    objTituloReceber.sObservacao = tTituloReceber.sObservacao
    objTituloReceber.iCondicaoPagto = tTituloReceber.iCondicaoPagto
    objTituloReceber.dtDataRegistro = tTituloReceber.dtDataRegistro
    objTituloReceber.dPISRetido = tTituloReceber.dPISRetido
    objTituloReceber.dCOFINSRetido = tTituloReceber.dCOFINSRetido
    objTituloReceber.dCSLLRetido = tTituloReceber.dCSLLRetido
    objTituloReceber.iMoeda = tTituloReceber.iMoeda
    objTituloReceber.sCcl = tTituloReceber.sCcl
    objTituloReceber.sNatureza = tTituloReceber.sNatureza
    objTituloReceber.lCpoGenerico1 = tTituloReceber.lCpoGenerico1
    objTituloReceber.iReajustePeriodicidade = tTituloReceber.iReajustePeriodicidade
    objTituloReceber.dtReajusteBase = tTituloReceber.dtReajusteBase
    objTituloReceber.dtReajustadoAte = tTituloReceber.dtReajustadoAte

    Call Comando_Fechar(lComando)

    TituloReceber_Le_NumeroInterno = SUCESSO

    Exit Function

Erro_TituloReceber_Le_NumeroInterno:

    TituloReceber_Le_NumeroInterno = Err

    Select Case Err

        Case 28571
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 28572, 28573
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TITULOSREC2", Err, objTituloReceber.iFilialEmpresa, objTituloReceber.lCliente, objTituloReceber.iFilial, objTituloReceber.sSiglaDocumento, objTituloReceber.lNumTitulo)

        Case 28574
            'Não encontrou. Erro tratado na rotina chamadora

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148640)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function ParcelaReceber_Le_NumeroInterno(ByVal objParcelaReceber As ClassParcelaReceber) As Long
'Lê dados da Parcela identificada pelo numero interno do titulo e pelo numero da parcela

Dim lErro As Long
Dim lComando As Long
Dim tParcelaReceber As typeParcelaReceber

On Error GoTo Erro_ParcelaReceber_Le_NumeroInterno

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 28587

    tParcelaReceber.sNumTitCobrador = String(STRING_NOSSO_NUMERO, 0)
    tParcelaReceber.sObservacao = String(STRING_OBS_PARC_REC, 0)

    lErro = Comando_Executar(lComando, "SELECT NumIntDoc, Status, DataVencimento, DataVencimentoReal, Saldo, Valor, Cobrador, CarteiraCobranca, NumTitCobrador, ProxSeqBaixa, ProxSeqOcorr, Desconto1Codigo, Desconto1Ate, Desconto1Valor, Desconto2Codigo, Desconto2Ate, Desconto2Valor, Desconto3Codigo, Desconto3Ate, Desconto3Valor, Aceite, Descontada, ValorOriginal, Observacao, Previsao FROM ParcelasRec WHERE NumIntTitulo = ? AND NumParcela = ? AND Status <> ?", _
        tParcelaReceber.lNumIntDoc, tParcelaReceber.iStatus, tParcelaReceber.dtDataVencimento, tParcelaReceber.dtDataVencimentoReal, tParcelaReceber.dSaldo, tParcelaReceber.dValor, tParcelaReceber.iCobrador, tParcelaReceber.iCarteiraCobranca, tParcelaReceber.sNumTitCobrador, tParcelaReceber.iProxSeqBaixa, tParcelaReceber.iProxSeqOcorr, tParcelaReceber.iDesconto1Codigo, tParcelaReceber.dtDesconto1Ate, tParcelaReceber.dDesconto1Valor, tParcelaReceber.iDesconto2Codigo, tParcelaReceber.dtDesconto2Ate, tParcelaReceber.dDesconto2Valor, tParcelaReceber.iDesconto3Codigo, tParcelaReceber.dtDesconto3Ate, tParcelaReceber.dDesconto3Valor, tParcelaReceber.iAceite, tParcelaReceber.iDescontada, tParcelaReceber.dValorOriginal, tParcelaReceber.sObservacao, tParcelaReceber.iPrevisao, objParcelaReceber.lNumIntTitulo, objParcelaReceber.iNumParcela, STATUS_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then Error 28588

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 28589

    If lErro = AD_SQL_SEM_DADOS Then Error 28590

    'Preenche objParcelaReceber com os dados lidos
    objParcelaReceber.lNumIntDoc = tParcelaReceber.lNumIntDoc
    objParcelaReceber.iStatus = tParcelaReceber.iStatus
    objParcelaReceber.dtDataVencimento = tParcelaReceber.dtDataVencimento
    objParcelaReceber.dtDataVencimentoReal = tParcelaReceber.dtDataVencimentoReal
    objParcelaReceber.dSaldo = tParcelaReceber.dSaldo
    objParcelaReceber.dValor = tParcelaReceber.dValor
    objParcelaReceber.iCobrador = tParcelaReceber.iCobrador
    objParcelaReceber.iCarteiraCobranca = tParcelaReceber.iCarteiraCobranca
    objParcelaReceber.sNumTitCobrador = tParcelaReceber.sNumTitCobrador
    objParcelaReceber.iProxSeqBaixa = tParcelaReceber.iProxSeqBaixa
    objParcelaReceber.iProxSeqOcorr = tParcelaReceber.iProxSeqOcorr
    objParcelaReceber.iDesconto1Codigo = tParcelaReceber.iDesconto1Codigo
    objParcelaReceber.dtDesconto1Ate = tParcelaReceber.dtDesconto1Ate
    objParcelaReceber.dDesconto1Valor = tParcelaReceber.dDesconto1Valor
    objParcelaReceber.iDesconto2Codigo = tParcelaReceber.iDesconto2Codigo
    objParcelaReceber.dtDesconto2Ate = tParcelaReceber.dtDesconto2Ate
    objParcelaReceber.dDesconto2Valor = tParcelaReceber.dDesconto2Valor
    objParcelaReceber.iDesconto3Codigo = tParcelaReceber.iDesconto3Codigo
    objParcelaReceber.dtDesconto3Ate = tParcelaReceber.dtDesconto3Ate
    objParcelaReceber.dDesconto3Valor = tParcelaReceber.dDesconto3Valor
    objParcelaReceber.iAceite = tParcelaReceber.iAceite
    objParcelaReceber.iDescontada = tParcelaReceber.iDescontada
    objParcelaReceber.dValorOriginal = tParcelaReceber.dValorOriginal
    objParcelaReceber.sObservacao = tParcelaReceber.sObservacao
    objParcelaReceber.iPrevisao = tParcelaReceber.iPrevisao
    
    Call Comando_Fechar(lComando)

    ParcelaReceber_Le_NumeroInterno = SUCESSO

    Exit Function

Erro_ParcelaReceber_Le_NumeroInterno:

    ParcelaReceber_Le_NumeroInterno = Err

    Select Case Err

        Case 28587
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 28588, 28589
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELASREC_NUMINT", Err, objParcelaReceber.lNumIntTitulo, objParcelaReceber.iNumParcela)

        Case 28590
            'Não encontrou. Erro tratado na rotina chamadora

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148641)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function Fornecedor_Le_Todos(ByVal colFornecedor As Collection) As Long
'Lê todos os Fornecedores contidos na tabela de Fornecedores e coloca-os em colFornecedor

Dim lErro As Long
Dim lComando As Long
Dim objFornecedor As ClassFornecedor
Dim lCodigo As Long
Dim sNomeReduzido As String
Dim iAtivo As Integer

On Error GoTo Erro_Fornecedor_Le_Todos

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 28248

    sNomeReduzido = String(STRING_FORNECEDOR_NOME_REDUZIDO, 0)

    'Lê a tabela de Fornecedores
    lErro = Comando_Executar(lComando, "SELECT Codigo, NomeReduzido, Ativo FROM Fornecedores ORDER BY Codigo", lCodigo, sNomeReduzido, iAtivo)
    If lErro <> AD_SQL_SUCESSO Then Error 28249

    'Lê o primeiro Fornecedor
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 28250

    Do While lErro <> AD_SQL_SEM_DADOS

        Set objFornecedor = New ClassFornecedor

        objFornecedor.lCodigo = lCodigo
        objFornecedor.sNomeReduzido = sNomeReduzido
        objFornecedor.iAtivo = iAtivo

        'Coloca o Fornecedor lido na coleção
        colFornecedor.Add objFornecedor

        'Lê o próximo Fornecedor
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 28251

    Loop

    lErro = Comando_Fechar(lComando)

    Fornecedor_Le_Todos = SUCESSO

    Exit Function

Erro_Fornecedor_Le_Todos:

    Fornecedor_Le_Todos = Err

    Select Case Err

        Case 28248
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 28249, 28250, 28251
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FORNECEDORES", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148642)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function


Function ParcelasPagNF_Le(ByVal objNFiscal As ClassNFiscal) As Long

Dim lErro As Long
Dim lComando As Long
Dim tParcelaPagar As typeParcelaPagar

On Error GoTo Erro_ParcelasPagNF_Le

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 42461
    
    tParcelaPagar.sNossoNumero = String(STRING_PARCELA_PAGAR_NOSSO_NUMERO, 0)
    tParcelaPagar.sCodigoDeBarras = String(STRING_CODIGO_BARRAS_PARC_CPR, 0)
    tParcelaPagar.sCodUsuarioLib = String(STRING_USUARIO_CODIGO, 0)
    
    lErro = Comando_Executar(lComando, "SELECT ParcelasPag.NumIntDoc, ParcelasPag.NumParcela, ParcelasPag.Status, ParcelasPag.DataVencimento, ParcelasPag.DataVencimentoReal, ParcelasPag.Saldo, ParcelasPag.Valor, ParcelasPag.TipoCobranca, ParcelasPag.Portador, ParcelasPag.BancoCobrador, ParcelasPag.ProxSeqBaixa, ParcelasPag.NossoNumero, ParcelasPag.CodigoDeBarras, ParcelasPag.CodUsuarioLib, ParcelasPag.DataLib FROM NFiscal, TitulosPag, ParcelasPag WHERE NFiscal.NumIntDocCPR = TitulosPag.NumIntDoc AND TitulosPag.NumIntDoc = ParcelasPag.NumIntTitulo AND NFiscal.NumIntDoc = ? ORDER BY ParcelasPag.DataVencimento", tParcelaPagar.lNumIntDoc, tParcelaPagar.iNumParcela, tParcelaPagar.iStatus, tParcelaPagar.dtDataVencimento, tParcelaPagar.dtDataVencimentoReal, tParcelaPagar.dSaldo, tParcelaPagar.dValor, tParcelaPagar.iTipoCobranca, tParcelaPagar.iPortador, tParcelaPagar.iBancoCobrador, tParcelaPagar.iProxSeqBaixa, tParcelaPagar.sNossoNumero, tParcelaPagar.sCodigoDeBarras, _
        tParcelaPagar.sCodUsuarioLib, tParcelaPagar.dtDataLib, objNFiscal.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then Error 42462
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SEM_DADOS And lErro <> AD_SQL_SUCESSO Then Error 42463
    
    If lErro = AD_SQL_SEM_DADOS Then
        
        lErro = Comando_Executar(lComando, "SELECT ParcelasPagBaixadas.NumIntDoc, ParcelasPagBaixadas.NumParcela, ParcelasPagBaixadas.Status, ParcelasPagBaixadas.DataVencimento, ParcelasPagBaixadas.DataVencimentoReal, ParcelasPagBaixadas.Valor, ParcelasPagBaixadas.TipoCobranca, ParcelasPagBaixadas.Portador, ParcelasPagBaixadas.BancoCobrador, ParcelasPagBaixadas.ProxSeqBaixa,ParcelasPagBaixadas.NossoNumero, ParcelasPagBaixadas.CodigoDeBarras, ParcelasPagBaixadas.CodUsuarioLib, ParcelasPagBaixadas.DataLib FROM NFiscal, TitulosPagBaixados, ParcelasPagBaixadas WHERE NFiscal.NumIntDocCPR = TitulosPagBaixados.NumIntDoc AND TitulosPagBaixados.NumIntDoc = ParcelasPagBaixadas.NumIntTitulo AND NFiscal.NumIntDoc = ? ORDER BY ParcelasPagBaixadas.DataVencimento", _
            tParcelaPagar.lNumIntDoc, tParcelaPagar.iNumParcela, tParcelaPagar.iStatus, tParcelaPagar.dtDataVencimento, tParcelaPagar.dtDataVencimentoReal, tParcelaPagar.dValor, tParcelaPagar.iTipoCobranca, tParcelaPagar.iPortador, tParcelaPagar.iBancoCobrador, tParcelaPagar.iProxSeqBaixa, tParcelaPagar.sNossoNumero, tParcelaPagar.sCodigoDeBarras, tParcelaPagar.sCodUsuarioLib, tParcelaPagar.dtDataLib, objNFiscal.lNumIntDoc)
        If lErro <> AD_SQL_SUCESSO Then Error 42465
        
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 42466
                
    End If
    
    Do While lErro = AD_SQL_SUCESSO
    
        With tParcelaPagar
            objNFiscal.colParcelaPagar.Add .lNumIntDoc, objNFiscal.lNumIntDocCPR, .iNumParcela, .iStatus, .dtDataVencimento, .dtDataVencimentoReal, .dSaldo, .dValor, .iPortador, .iProxSeqBaixa, .iTipoCobranca, .iBancoCobrador, .sNossoNumero, .sCodigoDeBarras, , , , .sCodUsuarioLib, .dtDataLib
        End With

        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 42468
    
    Loop
    
    Call Comando_Fechar(lComando)
    
    ParcelasPagNF_Le = SUCESSO
    
    Exit Function
    
Erro_ParcelasPagNF_Le:

    Select Case Err
    
        Case 42461
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 42462, 42463, 42468
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_PAG", Err)
        
        Case 42465, 42466
            Call Rotina_Erro(vbOKOnly, "0", Err)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148643)
     
    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function
    
End Function

Function Vendedor_Le_Estendida(ByVal objVendedor As ClassVendedor) As Long
'Lê os dados do vendedor inclusive os dados de estatística

Dim lErro As Long

On Error GoTo Erro_Vendedor_Le_Estendida
    
    'Lê os dados do vendedor
    lErro = CF("Vendedor_Le", objVendedor)
    If lErro <> SUCESSO And lErro <> 12582 Then Error 52671
    
    If lErro = 12582 Then Error 52705
    
    'Lê os dados de estatística do vendedor
    lErro = CF("VendedorEstatistica_Le", objVendedor)
    If lErro <> SUCESSO Then Error 52672
    
    Vendedor_Le_Estendida = SUCESSO
    
    Exit Function
    
Erro_Vendedor_Le_Estendida:
    
    Vendedor_Le_Estendida = Err
    
    Select Case Err
        
        Case 52671, 52672 'Tratados nas rotinas chamadas
            
        Case 52705 'tratado na rotina chamadora
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148644)

    End Select

    Exit Function

End Function

Function VendedorEstatistica_Le(ByVal objVendedor As ClassVendedor) As Long
'Lê os dados de estatística do vendedor

Dim lErro As Long

On Error GoTo Erro_VendedorEstatistica_Le
    
    'Lê a última data de venda
    lErro = VendedorEstatistica_Le_DataUltVenda(objVendedor)
    If lErro <> SUCESSO Then Error 52706
    
    'Lê o saldo de comissões do vendedor
    lErro = VendedorEstatistica_Le_SldComissoes(objVendedor)
    If lErro <> SUCESSO Then Error 52707
    
    VendedorEstatistica_Le = SUCESSO
    
    Exit Function
    
Erro_VendedorEstatistica_Le:

    VendedorEstatistica_Le = Err
    
    Select Case Err
        
        Case 52706, 52707 'Tratados nas rotinas chamadas
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148645)

    End Select

    Exit Function

End Function


Function VendedorEstatistica_Le_DataUltVenda(ByVal objVendedor As ClassVendedor) As Long
'Lê a data da ultima venda do Vendedor

Dim lErro As Long
Dim dtDataVenda1 As Date
Dim dtDataVenda2 As Date
Dim dtDataVenda3 As Date
Dim dtUltimaVenda As Date
Dim lComando1 As Long
Dim lComando2 As Long
Dim lComando3 As Long

On Error GoTo Erro_VendedorEstatistica_Le_DataUltVenda

    'Inicializa comandos
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 52673
    
    'Inicializa comandos
    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 52674
    
    'Inicializa comandos
    lComando3 = Comando_Abrir()
    If lComando3 = 0 Then Error 52675
    
    'Seleciona MAX(DataEmissao) de NFiscal
    lErro = Comando_Executar(lComando1, "SELECT MAX(DataEmissao) FROM Comissoes, Nfiscal WHERE NFiscal.NumIntDoc = Comissoes.NumIntDoc AND TipoTitulo = ? AND CodVendedor =? ", dtDataVenda1, TIPO_NF, objVendedor.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 52676

    lErro = Comando_BuscarProximo(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 52677
        
    If lErro = AD_SQL_SEM_DADOS Then dtDataVenda1 = DATA_NULA
    
    'Seleciona MAX(DataEmissao) de TitulosRec
    lErro = Comando_Executar(lComando2, "SELECT MAX(DataEmissao) FROM Comissoes, TitulosRec WHERE TitulosRec.NumIntDoc = Comissoes.NumIntDoc AND TipoTitulo = ? AND CodVendedor =? ", dtDataVenda2, TIPO_TITULO_RECEBER, objVendedor.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 52678

    lErro = Comando_BuscarProximo(lComando2)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 52679
    
    If lErro = AD_SQL_SEM_DADOS Then dtDataVenda2 = DATA_NULA
    
    'Seleciona MAX(DataEmissao) de ParcelasRec, TitulosRec
    lErro = Comando_Executar(lComando3, "SELECT MAX(DataEmissao) FROM Comissoes, ParcelasRec, TitulosRec WHERE ParcelasRec.NumIntDoc = Comissoes.NumIntDoc AND ParcelasRec.NumIntDoc = TitulosRec.NumIntDoc AND TipoTitulo = ? AND CodVendedor =? ", dtDataVenda3, TIPO_PARCELA, objVendedor.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 52680
    
    lErro = Comando_BuscarProximo(lComando3)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 52681
        
    If lErro = AD_SQL_SEM_DADOS Then dtDataVenda3 = DATA_NULA
        
    'das data selecionadas pega a maior(última data de venda)
    If dtDataVenda1 > dtDataVenda2 Then
        If dtDataVenda1 > dtDataVenda3 Then
            dtUltimaVenda = dtDataVenda1
        Else
            dtUltimaVenda = dtDataVenda3
        End If
    ElseIf dtDataVenda2 > dtDataVenda3 Then
        dtUltimaVenda = dtDataVenda2
    Else
        dtUltimaVenda = dtDataVenda3
    End If
    
    objVendedor.dtDataUltimaVenda = dtUltimaVenda
    
    'Libera comandos
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)

    VendedorEstatistica_Le_DataUltVenda = SUCESSO
    
    Exit Function
    
Erro_VendedorEstatistica_Le_DataUltVenda:
    
    VendedorEstatistica_Le_DataUltVenda = Err
    
    Select Case Err
        
        Case 52673, 52674, 52675
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 52676, 52677
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_COMISSOES3", Err)
        
        Case 52678, 52679, 52680, 52681
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TITULOS_REC", Err)
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148646)

    End Select
    
    'Libera comandos
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)

    Exit Function
        
End Function

Function VendedorEstatistica_Le_SldComissoes(ByVal objVendedor As ClassVendedor) As Long
'Lê o saldo de Comissões do Vendedor

Dim lErro As Long
Dim dValor As Double
Dim lComando As Long

On Error GoTo Erro_VendedorEstatistica_Le_SldComissoes
            
    'Inicializa comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 52712
        
    'Seleciona Soma de valores de Comissoes não baixadas do Vendedor
    lErro = Comando_Executar(lComando, "SELECT SUM(Valor) FROM Comissoes WHERE CodVendedor =? AND DataBaixa =? ", dValor, objVendedor.iCodigo, DATA_NULA)
    If lErro <> AD_SQL_SUCESSO Then Error 52708
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 52709
     
    objVendedor.dSaldoComissao = dValor
        
    'Libera comandos
    Call Comando_Fechar(lComando)
    
    VendedorEstatistica_Le_SldComissoes = SUCESSO
    
    Exit Function
    
Erro_VendedorEstatistica_Le_SldComissoes:

    VendedorEstatistica_Le_SldComissoes = Err
    
    Select Case Err
        
        Case 52708, 52709
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_COMISSOES3", Err)
        
        Case 52712
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148647)

    End Select
    
    'Libera comandos
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function FilialFornecedor_Lock1(ByVal objFilialFornecedor As ClassFilialFornecedor) As Long
'Verifica se existe a filial do fornecedor passado como parâmetro em objFilialfornecedor

Dim lErro As Long
Dim lComando As Long
Dim sNome As String

On Error GoTo Erro_FilialFornecedor_Lock1
    
    'Abre os comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 18902
    
    sNome = String(STRING_FILIAL_FORNECEDOR_NOME, 0)
    
    'Procura no BD a FilialFornecedor fornecida
    lErro = Comando_ExecutarLockado(lComando, "SELECT Nome FROM FiliaisFornecedores WHERE CodFornecedor = ? AND CodFilial = ? ", sNome, objFilialFornecedor.lCodFornecedor, objFilialFornecedor.iCodFilial)
    If lErro <> AD_SQL_SUCESSO Then Error 18898
    
    'Tenta ler
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 18899

    'Se não encontrar --> Erro
    If lErro = AD_SQL_SEM_DADOS Then Error 18900
    
    'Faz lock na FilialFornecedor
    lErro = Comando_LockShared(lComando)
    If lErro <> AD_SQL_SUCESSO Then Error 18901

    'Fecha os comandos
    Call Comando_Fechar(lComando)
    
    FilialFornecedor_Lock1 = SUCESSO
    
    Exit Function
    
Erro_FilialFornecedor_Lock1:

    FilialFornecedor_Lock1 = Err
    
    Select Case Err
    
        Case 18902
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
            
        Case 18898, 18899
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIAISFORNECEDORES2", Err, objFilialFornecedor.lCodFornecedor, objFilialFornecedor.iCodFilial)
    
        Case 18900
            'Erro tratado na rotina chamada
    
        Case 18901
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_FILIAISFORNECEDORES1", Err, objFilialFornecedor.lCodFornecedor, objFilialFornecedor.iCodFilial)
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148648)

    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function BorderoPagto_Le_SemNumInt(ByVal objBorderoPagto As ClassBorderoPagto) As Long
'le bordero de pagto nao excluido a partir do numero, data de emissao e conta corrente

Dim lErro As Long, lComando As Long, tBorderoPagto As typeBorderoPag

On Error GoTo Erro_BorderoPagto_Le_SemNumInt

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 41609
    
    With tBorderoPagto
        .sNomeArq = String(STRING_NOME_ARQ_COMPLETO, 0)
        lErro = Comando_Executar(lComando, "SELECT NumIntBordero, TipoDeCobranca, TitOutroBanco, NomeArq, NumArqRemessa, DataEnvio FROM BorderosPagto WHERE CodConta = ? AND Numero = ? AND DataEmissao = ? AND Excluido = ?", _
                .lNumIntBordero, .iTipoDeCobranca, .iTitOutroBanco, .sNomeArq, .iNumArqRemessa, .dtDataEnvio, objBorderoPagto.iCodConta, objBorderoPagto.lNumero, objBorderoPagto.dtDataEmissao, BORDERO_NAO_EXCLUIDO)
    End With
    If lErro <> AD_SQL_SUCESSO Then Error 41610
    
    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 41611
    
    'se nao encontrou
    If lErro = AD_SQL_SEM_DADOS Then Error 41612
    
    'copiar as informacoes obtidas do bd para o objeto
    With tBorderoPagto
    
        objBorderoPagto.lNumIntBordero = .lNumIntBordero
        objBorderoPagto.iTipoDeCobranca = .iTipoDeCobranca
        objBorderoPagto.iTitOutroBanco = .iTitOutroBanco
        objBorderoPagto.sNomeArq = .sNomeArq
        objBorderoPagto.iNumArqRemessa = .iNumArqRemessa
        objBorderoPagto.dtDataEnvio = .dtDataEnvio
        
    End With
    
    Call Comando_Fechar(lComando)
    
    BorderoPagto_Le_SemNumInt = SUCESSO
         
    Exit Function
    
Erro_BorderoPagto_Le_SemNumInt:

    BorderoPagto_Le_SemNumInt = Err
     
    Select Case Err
          
        Case 41609
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
            
        Case 41610, 41611
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BORDERO_PAGTO", Err)
        
        Case 41612 'nao encontrou
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148649)
     
    End Select
     
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function PrevVenda_Le_Regiao(ByVal iCodRegiao As Integer) As Long

Dim lErro As Long
Dim lComando As Long
Dim iCodigo1 As Integer

On Error GoTo Erro_PrevVenda_Le_Regiao

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 52921

    'pesquisa vendedores no BD
    lErro = Comando_Executar(lComando, "SELECT CodRegiao FROM PrevVenda WHERE CodRegiao = ? ", iCodigo1, iCodRegiao)
    If lErro <> AD_SQL_SUCESSO Then Error 52922

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 52923

    If lErro = AD_SQL_SEM_DADOS Then Error 52924

    lErro = Comando_Fechar(lComando)

    PrevVenda_Le_Regiao = SUCESSO

    Exit Function

Erro_PrevVenda_Le_Regiao:

    PrevVenda_Le_Regiao = Err

    Select Case Err

        Case 52921
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 52922, 52923
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_VENDEDORES", Err)

        Case 52924

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148650)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function Fornecedor_Le_Estendida(ByVal objFornecedor As ClassFornecedor, ByVal objFornecedorEstatistica As ClassFilialFornecedorEst) As Long
'Esta função le os dados do fornecedor inclusive os dados de estatística

Dim lErro As Long

On Error GoTo Erro_Fornecedor_Le_Estendida
    
    'Le os dados Principais do Fornecedor
    lErro = CF("Fornecedor_Le", objFornecedor)
    If lErro <> SUCESSO And lErro <> 12729 Then Error 52650
    
    If lErro = 12729 Then Error 52701 'Ausência de Fornecedor no BD
    
    objFornecedorEstatistica.lCodFornecedor = objFornecedor.lCodigo
    objFornecedorEstatistica.iFilialEmpresa = giFilialEmpresa
    
    'Le os dados de estatística do fornecedor
    lErro = CF("Fornecedor_Estatistica_Le", objFornecedorEstatistica)
    If lErro <> SUCESSO Then Error 52651
    
    Fornecedor_Le_Estendida = SUCESSO
        
    Exit Function
    
Erro_Fornecedor_Le_Estendida:

    Fornecedor_Le_Estendida = Err
    
        Select Case Err
        
        Case 52650, 52651 'Tratados nas rotinas chamadas
            
        Case 52701 'Ausencia de Fornecedor no BD. Tratado na rotina chamadora.
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148651)

    End Select

    Exit Function
    
End Function

Function FornFilEmp_Le(ByVal objFornFilEmp As ClassFilFornFilEmp) As Long
'Lê os dados da tabela FilFornFilEmp correspondentes a
'Fornecedor e FilialEmpresa passados em objFornFilEmp

Dim lErro As Long
Dim lComando As Long
Dim tFornFilEmp As typeFilFornFilEmp
Dim lNumFiliaisForn As Long

On Error GoTo Erro_FornFilEmp_Le

    'Inicializa comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 52657

    'Lê a tabela FilFornFilEmp para trazer os dados
    lErro = Comando_Executar(lComando, "SELECT SUM(NumeroCompras), SUM(MediaCompra), COUNT(*), MIN(DataPrimeiraCompra), MAX(DataUltimaCompra), SUM(ValorAcumuladoCompras), SUM(ValorAcumuladoDevolucoes), SUM(NumTotalDevolucoes), MAX(DataUltDevolucao) , MAX(MaiorAtraso), SUM(PedidosEmAberto), SUM(AtrasoAcumulado), SUM(PedidosRecebidos), SUM(ItensPedidosRecebidos) FROM FilialFornFilEmp WHERE FilialEmpresa = ? AND CodFornecedor =? ", tFornFilEmp.lNumeroCompras, tFornFilEmp.dMediaCompra, lNumFiliaisForn, tFornFilEmp.dtDataPrimeiraCompra, tFornFilEmp.dtDataUltimaCompra, tFornFilEmp.dValorAcumuladoCompras, tFornFilEmp.dValorAcumuladoDevolucoes, tFornFilEmp.lNumTotalDevolucoes, tFornFilEmp.dtDataUltDevolucao, tFornFilEmp.lMaiorAtraso, tFornFilEmp.lPedidosEmAberto, tFornFilEmp.lAtrasoAcumulado, tFornFilEmp.lPedidosRecebidos, tFornFilEmp.lItensPedidosRecebidos, objFornFilEmp.iFilialEmpresa, objFornFilEmp.lCodFornecedor)
    If lErro <> AD_SQL_SUCESSO Then Error 52658

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 52659
   
    objFornFilEmp.lNumeroCompras = tFornFilEmp.lNumeroCompras
    objFornFilEmp.dtDataPrimeiraCompra = tFornFilEmp.dtDataPrimeiraCompra
    objFornFilEmp.dtDataUltimaCompra = tFornFilEmp.dtDataUltimaCompra
    objFornFilEmp.dValorAcumuladoCompras = tFornFilEmp.dValorAcumuladoCompras
    objFornFilEmp.dValorAcumuladoDevolucoes = tFornFilEmp.dValorAcumuladoDevolucoes
    objFornFilEmp.lNumTotalDevolucoes = tFornFilEmp.lNumTotalDevolucoes
    objFornFilEmp.dtDataUltDevolucao = tFornFilEmp.dtDataUltDevolucao
    objFornFilEmp.lMaiorAtraso = tFornFilEmp.lMaiorAtraso
    objFornFilEmp.lPedidosEmAberto = tFornFilEmp.lPedidosEmAberto
    objFornFilEmp.lAtrasoAcumulado = tFornFilEmp.lAtrasoAcumulado
    objFornFilEmp.lPedidosRecebidos = tFornFilEmp.lPedidosRecebidos
    objFornFilEmp.lItensPedidosRecebidos = tFornFilEmp.lItensPedidosRecebidos
    
    If lNumFiliaisForn > 0 Then
    
        objFornFilEmp.dMediaCompra = tFornFilEmp.dMediaCompra / lNumFiliaisForn
    Else
    
        objFornFilEmp.dMediaCompra = 0
    
    End If
            
    'Libera comandos
    Call Comando_Fechar(lComando)
        
    FornFilEmp_Le = SUCESSO
    
    Exit Function
    
Erro_FornFilEmp_Le:

    FornFilEmp_Le = Err
    
    Select Case Err
        
        Case 52657
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
            
        Case 52658, 52659
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIALFORNFILEMP", Err)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148652)

    End Select
        
    'Libera comandos
    Call Comando_Fechar(lComando)
    
    Exit Function
    
End Function

Function FilialFornecedor_Le_Estendida(ByVal objFilialFornecedor As ClassFilialFornecedor, ByVal objFilialFornecedorEstatistica As ClassFilialFornecedorEst, Optional ByVal bComMediaAtraso As Boolean = True) As Long
'Esta função lê os dados da Filial do Fornecedor inclusive os de estatística

Dim lErro As Long

On Error GoTo Erro_FilialFornecedor_Le_Estendida

    'Lê os dados principais da Filial Fornecedor
    lErro = CF("FilialFornecedor_Le", objFilialFornecedor)
    If lErro <> SUCESSO And lErro <> 12929 Then Error 52661
    
    If lErro = 12929 Then Error 52702 'Ausência de FilialForn no BD
    
    objFilialFornecedorEstatistica.lCodFornecedor = objFilialFornecedor.lCodFornecedor
    objFilialFornecedorEstatistica.iCodFilial = objFilialFornecedor.iCodFilial
    objFilialFornecedorEstatistica.iFilialEmpresa = giFilialEmpresa
    
    'Lê os dados de estatística da filial fornecedor
    lErro = CF("FilialFornecedor_Estatistica_Le", objFilialFornecedorEstatistica, bComMediaAtraso)
    If lErro <> SUCESSO Then Error 52662

    FilialFornecedor_Le_Estendida = SUCESSO

    Exit Function

Erro_FilialFornecedor_Le_Estendida:

    FilialFornecedor_Le_Estendida = Err

        Select Case Err

        Case 52661, 52662 'Tratados nas rotinas chamadas
        
        Case 52702 'Ausência de FilialForn no BD. Tratado na rotina chamadora.
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148653)

    End Select

    Exit Function

End Function

Function FilFornFilEmp_Le(ByVal objFilFornFilEmp As ClassFilFornFilEmp) As Long
'Lê os dados da tabela FilFornFilEmp correspondentes a
'Fornecedor, FilialFornecedor e FilialEmpresa passados em objFilFornFilEmp

Dim lErro As Long
Dim lComando As Long
Dim tFilFornFilEmp As typeFilFornFilEmp

On Error GoTo Erro_FilFornFilEmp_Le

    'Inicializa comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 52667

    tFilFornFilEmp.dtDataPrimeiraCompra = DATA_NULA
    tFilFornFilEmp.dtDataUltimaCompra = DATA_NULA
    tFilFornFilEmp.dtDataUltDevolucao = DATA_NULA
    
    'Lê a tabela FilFornFilEmp para trazer os dados
    lErro = Comando_Executar(lComando, "SELECT NumeroCompras, MediaCompra, DataPrimeiraCompra, DataUltimaCompra, ValorAcumuladoCompras, ValorAcumuladoDevolucoes, NumTotalDevolucoes, DataUltDevolucao, MaiorAtraso, PedidosEmAberto, AtrasoAcumulado, PedidosRecebidos, ItensPedidosRecebidos FROM FilialFornFilEmp WHERE FilialEmpresa = ? AND CodFornecedor =? AND CodFilial=?", tFilFornFilEmp.lNumeroCompras, tFilFornFilEmp.dMediaCompra, tFilFornFilEmp.dtDataPrimeiraCompra, tFilFornFilEmp.dtDataUltimaCompra, tFilFornFilEmp.dValorAcumuladoCompras, tFilFornFilEmp.dValorAcumuladoDevolucoes, tFilFornFilEmp.lNumTotalDevolucoes, tFilFornFilEmp.dtDataUltDevolucao, tFilFornFilEmp.lMaiorAtraso, tFilFornFilEmp.lPedidosEmAberto, tFilFornFilEmp.lAtrasoAcumulado, tFilFornFilEmp.lPedidosRecebidos, tFilFornFilEmp.lItensPedidosRecebidos, objFilFornFilEmp.iFilialEmpresa, objFilFornFilEmp.lCodFornecedor, objFilFornFilEmp.iCodFilial)
    If lErro <> AD_SQL_SUCESSO Then Error 52668

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 52669

    objFilFornFilEmp.lNumeroCompras = tFilFornFilEmp.lNumeroCompras
    objFilFornFilEmp.dtDataPrimeiraCompra = tFilFornFilEmp.dtDataPrimeiraCompra
    objFilFornFilEmp.dtDataUltimaCompra = tFilFornFilEmp.dtDataUltimaCompra
    objFilFornFilEmp.dValorAcumuladoCompras = tFilFornFilEmp.dValorAcumuladoCompras
    objFilFornFilEmp.dValorAcumuladoDevolucoes = tFilFornFilEmp.dValorAcumuladoDevolucoes
    objFilFornFilEmp.lNumTotalDevolucoes = tFilFornFilEmp.lNumTotalDevolucoes
    objFilFornFilEmp.dtDataUltDevolucao = tFilFornFilEmp.dtDataUltDevolucao
    objFilFornFilEmp.dMediaCompra = tFilFornFilEmp.dMediaCompra
    objFilFornFilEmp.lMaiorAtraso = tFilFornFilEmp.lMaiorAtraso
    objFilFornFilEmp.lPedidosEmAberto = tFilFornFilEmp.lPedidosEmAberto
    objFilFornFilEmp.lAtrasoAcumulado = tFilFornFilEmp.lAtrasoAcumulado
    objFilFornFilEmp.lPedidosRecebidos = tFilFornFilEmp.lPedidosRecebidos
    objFilFornFilEmp.lItensPedidosRecebidos = tFilFornFilEmp.lItensPedidosRecebidos
    
    'Libera comandos
    Call Comando_Fechar(lComando)
    
    FilFornFilEmp_Le = SUCESSO

    Exit Function

Erro_FilFornFilEmp_Le:

    FilFornFilEmp_Le = Err

    Select Case Err

        Case 52667
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 52668, 52669
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIALFORNFILEMP", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148654)

    End Select
    
    'Libera comandos
    Call Comando_Fechar(lComando)

    Exit Function
    
End Function

Function TituloRecBaixado_Le_NumeroInterno(ByVal objTituloReceber As ClassTituloReceber) As Long
'Lê Número Interno do Título e outros dados a partir dos campos FilialEmpresa,Cliente,Filial,SiglaDocumento e NumTitulo passados como parâmetro

Dim lErro As Long
Dim lComando As Long
Dim tTituloReceber As typeTituloReceber

On Error GoTo Erro_TituloRecBaixado_Le_NumeroInterno

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 56562

    tTituloReceber.sObservacao = String(STRING_TITULO_OBSERVACAO, 0)
    tTituloReceber.sCcl = String(STRING_CCL, 0)
    tTituloReceber.sNatureza = String(STRING_NATMOVCTA_CODIGO, 0)

    lErro = Comando_Executar(lComando, "SELECT NumIntDoc, DataEmissao, Status, Saldo, NumParcelas, Valor, ValorIRRF, ValorISS, ISSRetido, ValorINSS, INSSRetido, PercJurosDiarios, PercMulta, Observacao, CondicaoPagto, DataRegistro, PISRetido, COFINSRetido, CSLLRetido, Moeda, Ccl, Natureza, CpoGenerico1, ReajustePeriodicidade, ReajusteBase, ReajustadoAte FROM TitulosRecBaixados WHERE FilialEmpresa = ? AND Cliente = ? AND Filial = ? AND SiglaDocumento = ? AND NumTitulo = ? AND Status <> ?", _
        tTituloReceber.lNumIntDoc, tTituloReceber.dtDataEmissao, tTituloReceber.iStatus, tTituloReceber.dSaldo, tTituloReceber.iNumParcelas, tTituloReceber.dValor, tTituloReceber.dValorIRRF, tTituloReceber.dValorISS, tTituloReceber.dISSRetido, tTituloReceber.dValorINSS, tTituloReceber.iINSSRetido, tTituloReceber.dPercJurosDiario, tTituloReceber.dPercMulta, tTituloReceber.sObservacao, tTituloReceber.iCondicaoPagto, tTituloReceber.dtDataRegistro, tTituloReceber.dPISRetido, tTituloReceber.dCOFINSRetido, tTituloReceber.dCSLLRetido, tTituloReceber.iMoeda, tTituloReceber.sCcl, tTituloReceber.sNatureza, tTituloReceber.lCpoGenerico1, tTituloReceber.iReajustePeriodicidade, tTituloReceber.dtReajusteBase, tTituloReceber.dtReajustadoAte, objTituloReceber.iFilialEmpresa, objTituloReceber.lCliente, objTituloReceber.iFilial, objTituloReceber.sSiglaDocumento, objTituloReceber.lNumTitulo, STATUS_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then Error 56563

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 56564

    If lErro = AD_SQL_SEM_DADOS Then Error 56565

    'Preenche objTituloReceber com os dados lidos
    objTituloReceber.lNumIntDoc = tTituloReceber.lNumIntDoc
    objTituloReceber.dtDataEmissao = tTituloReceber.dtDataEmissao
    objTituloReceber.iStatus = tTituloReceber.iStatus
    objTituloReceber.dSaldo = tTituloReceber.dSaldo
    objTituloReceber.iNumParcelas = tTituloReceber.iNumParcelas
    objTituloReceber.dValor = tTituloReceber.dValor
    objTituloReceber.dValorIRRF = tTituloReceber.dValorIRRF
    objTituloReceber.dValorISS = tTituloReceber.dValorISS
    objTituloReceber.dISSRetido = tTituloReceber.dISSRetido
    objTituloReceber.dValorINSS = tTituloReceber.dValorINSS
    objTituloReceber.iINSSRetido = tTituloReceber.iINSSRetido
    objTituloReceber.dPercJurosDiario = tTituloReceber.dPercJurosDiario
    objTituloReceber.dPercMulta = tTituloReceber.dPercMulta
    objTituloReceber.sObservacao = tTituloReceber.sObservacao
    objTituloReceber.iCondicaoPagto = tTituloReceber.iCondicaoPagto
    objTituloReceber.dtDataRegistro = tTituloReceber.dtDataRegistro
    objTituloReceber.dPISRetido = tTituloReceber.dPISRetido
    objTituloReceber.dCOFINSRetido = tTituloReceber.dCOFINSRetido
    objTituloReceber.dCSLLRetido = tTituloReceber.dCSLLRetido
    objTituloReceber.iMoeda = tTituloReceber.iMoeda
    objTituloReceber.sCcl = tTituloReceber.sCcl
    objTituloReceber.sNatureza = tTituloReceber.sNatureza
    objTituloReceber.lCpoGenerico1 = tTituloReceber.lCpoGenerico1
    objTituloReceber.iReajustePeriodicidade = tTituloReceber.iReajustePeriodicidade
    objTituloReceber.dtReajusteBase = tTituloReceber.dtReajusteBase
    objTituloReceber.dtReajustadoAte = tTituloReceber.dtReajustadoAte

    Call Comando_Fechar(lComando)

    TituloRecBaixado_Le_NumeroInterno = SUCESSO

    Exit Function

Erro_TituloRecBaixado_Le_NumeroInterno:

    TituloRecBaixado_Le_NumeroInterno = Err

    Select Case Err

        Case 56562
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 56563, 56564
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TITULOSREC2", Err, objTituloReceber.iFilialEmpresa, objTituloReceber.lCliente, objTituloReceber.iFilial, objTituloReceber.sSiglaDocumento, objTituloReceber.lNumTitulo)

        Case 56565
            'Não encontrou. Erro tratado na rotina chamadora

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148655)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Private Sub TituloPagar_MoverCamposObj(ByVal objTituloPagar As ClassTituloPagar, tTituloPagar As typeTituloPagar)
'copia informacoes de tTituloPagar para objTituloPagar

    objTituloPagar.lNumIntDoc = tTituloPagar.lNumIntDoc
    objTituloPagar.iFilialEmpresa = tTituloPagar.iFilialEmpresa
    objTituloPagar.lFornecedor = tTituloPagar.lFornecedor
    objTituloPagar.iFilial = tTituloPagar.iFilial
    objTituloPagar.sSiglaDocumento = tTituloPagar.sSiglaDocumento
    objTituloPagar.lNumTitulo = tTituloPagar.lNumTitulo
    objTituloPagar.dtDataEmissao = tTituloPagar.dtDataEmissao
    objTituloPagar.dValorTotal = tTituloPagar.dValorTotal
    objTituloPagar.dValorSeguro = tTituloPagar.dValorSeguro
    objTituloPagar.dValorFrete = tTituloPagar.dValorFrete
    objTituloPagar.dOutrasDespesas = tTituloPagar.dOutrasDespesas
    objTituloPagar.dValorProdutos = tTituloPagar.dValorProdutos
    objTituloPagar.dValorICMS = tTituloPagar.dValorICMS
    objTituloPagar.dValorICMSSubst = tTituloPagar.dValorICMSSubst
    objTituloPagar.iCreditoICMS = tTituloPagar.iCreditoICMS
    objTituloPagar.dValorIPI = tTituloPagar.dValorIPI
    objTituloPagar.iCreditoIPI = tTituloPagar.iCreditoIPI
    objTituloPagar.dValorIRRF = tTituloPagar.dValorIRRF
    objTituloPagar.dValorINSS = tTituloPagar.dValorINSS
    objTituloPagar.sObservacao = tTituloPagar.sObservacao
    objTituloPagar.dSaldo = tTituloPagar.dSaldo
    objTituloPagar.iNumParcelas = tTituloPagar.iNumParcelas
    objTituloPagar.iStatus = tTituloPagar.iStatus
    objTituloPagar.iCondicaoPagto = tTituloPagar.iCondicaoPagto
    objTituloPagar.iFilialPedCompra = tTituloPagar.iFilialPedCompra
    objTituloPagar.lNumPedCompra = tTituloPagar.lNumPedCompra
    objTituloPagar.iINSSRetido = tTituloPagar.iINSSRetido
    objTituloPagar.dtDataRegistro = tTituloPagar.dtDataRegistro
    objTituloPagar.dPISRetido = tTituloPagar.dPISRetido
    objTituloPagar.dISSRetido = tTituloPagar.dISSRetido
    objTituloPagar.dCOFINSRetido = tTituloPagar.dCOFINSRetido
    objTituloPagar.dCSLLRetido = tTituloPagar.dCSLLRetido
    objTituloPagar.dTaxaMoeda = tTituloPagar.dTaxaMoeda
    objTituloPagar.sHistorico = tTituloPagar.sHistorico
    objTituloPagar.sNatureza = tTituloPagar.sNatureza
    objTituloPagar.sCcl = tTituloPagar.sCcl
    
End Sub

Function TipoInstrCobranca_Le_Descricao(ByVal objTipoInstrCobr As ClassTipoInstrCobr) As Long
'Traz do bd as informações para preencher objTipoInstrCobr a partir
'da chave fornecida em objTipoInstrCobr.sDescricao

Dim lErro As Long
Dim lComando As Long
Dim tTipoInstrCobr As typeTipoInstrCobr

On Error GoTo Erro_TipoInstrCobranca_Le_Descricao

    'Inicializa comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 43160

    lErro = Comando_Executar(lComando, "SELECT Codigo, RequerDias FROM TiposInstrCobranca WHERE Descricao = ?", tTipoInstrCobr.iCodigo, tTipoInstrCobr.iRequerDias, objTipoInstrCobr.sDescricao)
    If lErro <> AD_SQL_SUCESSO Then Error 43161

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 43162

    'Se não achou o Tipo de Instrução de Cobrança --> erro
    If lErro = AD_SQL_SEM_DADOS Then Error 43163

    objTipoInstrCobr.iCodigo = tTipoInstrCobr.iCodigo
    objTipoInstrCobr.iRequerDias = tTipoInstrCobr.iRequerDias

    'Libera comando
    Call Comando_Fechar(lComando)

    TipoInstrCobranca_Le_Descricao = SUCESSO

    Exit Function

Erro_TipoInstrCobranca_Le_Descricao:

    TipoInstrCobranca_Le_Descricao = Err

    Select Case Err

        Case 43160
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 43161, 43162
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOSINSTRCOBRANCA2", Err, objTipoInstrCobr.sDescricao)

        Case 43163
            'Não encontrou. Erro tratado na rotina chamada

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148656)

    End Select

    'Libera comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function ParcelaPagarBaixada_Le_Numero(ByVal objParcelaPagar As ClassParcelaPagar) As Long
'Lê os dados da Parcela com NumIntTitulo e NumParcela passados em objParcelaPagar

Dim lErro As Long
Dim lComando As Long
Dim tParcelaPagar As typeParcelaPagar

On Error GoTo Erro_ParcelaPagarBaixada_Le_Numero

    'Abre o comando
    lComando = Comando_Abrir()
    If lErro <> SUCESSO Then Error 43622
    
    tParcelaPagar.sNossoNumero = String(STRING_NOSSO_NUMERO, 0)
    tParcelaPagar.sCodigoDeBarras = String(STRING_CODIGO_BARRAS_PARC_CPR, 0)
    tParcelaPagar.sCodUsuarioLib = String(STRING_USUARIO_CODIGO, 0)
    
    'Seleciona a Parcela com os dados passados
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc, Status, DataVencimento, DataVencimentoReal, Valor, ValorOriginal, MotivoDiferenca, TipoCobranca, Portador, BancoCobrador, ProxSeqBaixa, NossoNumero, CodigoDeBarras, CodUsuarioLib, DataLib FROM ParcelasPagBaixadas WHERE NumIntTitulo = ? AND NumParcela = ? ", tParcelaPagar.lNumIntDoc, tParcelaPagar.iStatus, tParcelaPagar.dtDataVencimento, tParcelaPagar.dtDataVencimentoReal, tParcelaPagar.dValor, tParcelaPagar.dValorOriginal, tParcelaPagar.iMotivoDiferenca, tParcelaPagar.iTipoCobranca, tParcelaPagar.iPortador, tParcelaPagar.iBancoCobrador, tParcelaPagar.iProxSeqBaixa, tParcelaPagar.sNossoNumero, tParcelaPagar.sCodigoDeBarras, tParcelaPagar.sCodUsuarioLib, tParcelaPagar.dtDataLib, objParcelaPagar.lNumIntTitulo, objParcelaPagar.iNumParcela)
    If lErro <> AD_SQL_SUCESSO Then Error 43623
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 43624
    
    'Se não encontrar --> erro
    If lErro = AD_SQL_SEM_DADOS Then Error 43625
    
    'Carrega em objParcelaPagar os dados trazidos
    
    objParcelaPagar.lNumIntDoc = tParcelaPagar.lNumIntDoc
    objParcelaPagar.iStatus = tParcelaPagar.iStatus
    objParcelaPagar.dtDataVencimento = tParcelaPagar.dtDataVencimento
    objParcelaPagar.dtDataVencimentoReal = tParcelaPagar.dtDataVencimentoReal
    objParcelaPagar.dValor = tParcelaPagar.dValor
    objParcelaPagar.dValorOriginal = tParcelaPagar.dValorOriginal
    objParcelaPagar.iMotivoDiferenca = tParcelaPagar.iMotivoDiferenca
    objParcelaPagar.iTipoCobranca = tParcelaPagar.iTipoCobranca
    objParcelaPagar.iPortador = tParcelaPagar.iPortador
    objParcelaPagar.iBancoCobrador = tParcelaPagar.iBancoCobrador
    objParcelaPagar.iProxSeqBaixa = tParcelaPagar.iProxSeqBaixa
    objParcelaPagar.sNossoNumero = tParcelaPagar.sNossoNumero
    objParcelaPagar.sCodigoDeBarras = tParcelaPagar.sCodigoDeBarras
    objParcelaPagar.sCodUsuarioLib = tParcelaPagar.sCodUsuarioLib
    objParcelaPagar.dtDataLib = tParcelaPagar.dtDataLib
    
    'Fecha o comando
    Call Comando_Fechar(lComando)
    
    ParcelaPagarBaixada_Le_Numero = SUCESSO
    
    Exit Function
    
Erro_ParcelaPagarBaixada_Le_Numero:

    ParcelaPagarBaixada_Le_Numero = Err
    
    Select Case Err
    
        Case 43622
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
            
        Case 43623, 43624
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_PAG_BAIXADA", Err)

        Case 43625
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148657)
        
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function TituloPagarBaixado_Le(ByVal objTituloPagar As ClassTituloPagar, Optional ByVal bLeExcluido As Boolean = False) As Long
'Lê Titulo a Pagar Baixado com o Número Interno passado como parâmetro

Dim lErro As Long
Dim lComando As Long
Dim tTituloPagar As typeTituloPagar

On Error GoTo Erro_TituloPagarBaixado_Le

    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 56658
    
    tTituloPagar.sSiglaDocumento = String(STRING_SIGLA_DOCUMENTO, 0)
    tTituloPagar.sObservacao = String(STRING_TITULO_OBSERVACAO, 0)
    tTituloPagar.sHistorico = String(STRING_NFSPAG_HISTORICO, 0)
    tTituloPagar.sNatureza = String(STRING_NATMOVCTA_CODIGO, 0)
    tTituloPagar.sCcl = String(STRING_CCL, 0)
    
    'Seleciona o TituloPagar a partir do NumIntDoc
    If bLeExcluido Then
        lErro = Comando_Executar(lComando, "SELECT FilialEmpresa, Fornecedor, Filial, SiglaDocumento, NumTitulo, DataEmissao, Saldo, NumParcelas, ValorTotal, ValorSeguro, ValorFrete, OutrasDespesas, ValorProdutos, ValorICMS, ValorICMSSubst, CreditoICMS, ValorIPI, CreditoIPI, ValorIRRF, ValorINSS, INSSRetido, DataRegistro, " & _
            "CondicaoPagto, Observacao, Status, FilialPedCompra, NumPedCompra, PISRetido, COFINSRetido, CSLLRetido, TaxaMoeda, Historico, Natureza, Ccl FROM TitulosPagBaixados WHERE NumIntDoc = ? ", tTituloPagar.iFilialEmpresa, tTituloPagar.lFornecedor, tTituloPagar.iFilial, tTituloPagar.sSiglaDocumento, tTituloPagar.lNumTitulo, tTituloPagar.dtDataEmissao, tTituloPagar.dSaldo, tTituloPagar.iNumParcelas, tTituloPagar.dValorTotal, tTituloPagar.dValorSeguro, tTituloPagar.dValorFrete, tTituloPagar.dOutrasDespesas, tTituloPagar.dValorProdutos, tTituloPagar.dValorICMS, tTituloPagar.dValorICMSSubst, tTituloPagar.iCreditoICMS, tTituloPagar.dValorIPI, tTituloPagar.iCreditoIPI, tTituloPagar.dValorIRRF, tTituloPagar.dValorINSS, tTituloPagar.iINSSRetido, tTituloPagar.dtDataRegistro, tTituloPagar.iCondicaoPagto, _
            tTituloPagar.sObservacao, tTituloPagar.iStatus, tTituloPagar.iFilialPedCompra, tTituloPagar.lNumPedCompra, tTituloPagar.dPISRetido, tTituloPagar.dCOFINSRetido, tTituloPagar.dCSLLRetido, tTituloPagar.dTaxaMoeda, tTituloPagar.sHistorico, tTituloPagar.sNatureza, tTituloPagar.sCcl, objTituloPagar.lNumIntDoc)
    Else
        lErro = Comando_Executar(lComando, "SELECT FilialEmpresa, Fornecedor, Filial, SiglaDocumento, NumTitulo, DataEmissao, Saldo, NumParcelas, ValorTotal, ValorSeguro, ValorFrete, OutrasDespesas, ValorProdutos, ValorICMS, ValorICMSSubst, CreditoICMS, ValorIPI, CreditoIPI, ValorIRRF, ValorINSS, INSSRetido, DataRegistro, " & _
            "CondicaoPagto, Observacao, Status, FilialPedCompra, NumPedCompra, PISRetido, COFINSRetido, CSLLRetido, TaxaMoeda, Historico, Natureza, Ccl FROM TitulosPagBaixados WHERE NumIntDoc = ? AND Status <> ?", tTituloPagar.iFilialEmpresa, tTituloPagar.lFornecedor, tTituloPagar.iFilial, tTituloPagar.sSiglaDocumento, tTituloPagar.lNumTitulo, tTituloPagar.dtDataEmissao, tTituloPagar.dSaldo, tTituloPagar.iNumParcelas, tTituloPagar.dValorTotal, tTituloPagar.dValorSeguro, tTituloPagar.dValorFrete, tTituloPagar.dOutrasDespesas, tTituloPagar.dValorProdutos, tTituloPagar.dValorICMS, tTituloPagar.dValorICMSSubst, tTituloPagar.iCreditoICMS, tTituloPagar.dValorIPI, tTituloPagar.iCreditoIPI, tTituloPagar.dValorIRRF, tTituloPagar.dValorINSS, tTituloPagar.iINSSRetido, tTituloPagar.dtDataRegistro, tTituloPagar.iCondicaoPagto, _
            tTituloPagar.sObservacao, tTituloPagar.iStatus, tTituloPagar.iFilialPedCompra, tTituloPagar.lNumPedCompra, tTituloPagar.dPISRetido, tTituloPagar.dCOFINSRetido, tTituloPagar.dCSLLRetido, tTituloPagar.dTaxaMoeda, tTituloPagar.sHistorico, tTituloPagar.sNatureza, tTituloPagar.sCcl, objTituloPagar.lNumIntDoc, STATUS_EXCLUIDO)
    End If
    If lErro <> AD_SQL_SUCESSO Then Error 56659
    
    'Tenta ler
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 56660
    
    'Se não encontrou --> Erro
    If lErro = AD_SQL_SEM_DADOS Then Error 56661
    
    'Preenche objTituloPagar com os dados do Título
    objTituloPagar.iFilialEmpresa = tTituloPagar.iFilialEmpresa
    objTituloPagar.lFornecedor = tTituloPagar.lFornecedor
    objTituloPagar.iFilial = tTituloPagar.iFilial
    objTituloPagar.sSiglaDocumento = tTituloPagar.sSiglaDocumento
    objTituloPagar.lNumTitulo = tTituloPagar.lNumTitulo
    objTituloPagar.dtDataEmissao = tTituloPagar.dtDataEmissao
    objTituloPagar.dSaldo = tTituloPagar.dSaldo
    objTituloPagar.iNumParcelas = tTituloPagar.iNumParcelas
    objTituloPagar.dValorTotal = tTituloPagar.dValorTotal
    objTituloPagar.dValorSeguro = tTituloPagar.dValorSeguro
    objTituloPagar.dValorFrete = tTituloPagar.dValorFrete
    objTituloPagar.dOutrasDespesas = tTituloPagar.dOutrasDespesas
    objTituloPagar.dValorProdutos = tTituloPagar.dValorProdutos
    objTituloPagar.dValorICMS = tTituloPagar.dValorICMS
    objTituloPagar.dValorICMSSubst = tTituloPagar.dValorICMSSubst
    objTituloPagar.iCreditoICMS = tTituloPagar.iCreditoICMS
    objTituloPagar.iCreditoIPI = tTituloPagar.iCreditoIPI
    objTituloPagar.dValorIPI = tTituloPagar.dValorIPI
    objTituloPagar.dValorIRRF = tTituloPagar.dValorIRRF
    objTituloPagar.dValorINSS = tTituloPagar.dValorINSS
    objTituloPagar.sObservacao = tTituloPagar.sObservacao
    objTituloPagar.iStatus = tTituloPagar.iStatus
    objTituloPagar.iFilialPedCompra = tTituloPagar.iFilialPedCompra
    objTituloPagar.lNumPedCompra = tTituloPagar.lNumPedCompra
    objTituloPagar.iINSSRetido = tTituloPagar.iINSSRetido
    objTituloPagar.dtDataRegistro = tTituloPagar.dtDataRegistro
    objTituloPagar.iCondicaoPagto = tTituloPagar.iCondicaoPagto
    objTituloPagar.dPISRetido = tTituloPagar.dPISRetido
    objTituloPagar.dCOFINSRetido = tTituloPagar.dCOFINSRetido
    objTituloPagar.dCSLLRetido = tTituloPagar.dCSLLRetido
    objTituloPagar.dTaxaMoeda = tTituloPagar.dTaxaMoeda
    objTituloPagar.sHistorico = tTituloPagar.sHistorico
    objTituloPagar.sNatureza = tTituloPagar.sNatureza
    objTituloPagar.sCcl = tTituloPagar.sCcl
    
    'Fecha o comando
    Call Comando_Fechar(lComando)
    
    TituloPagarBaixado_Le = SUCESSO
    
    Exit Function
    
Erro_TituloPagarBaixado_Le:

    TituloPagarBaixado_Le = Err
    
    Select Case Err
    
        Case 56658
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 56659, 56660
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TITULOSPAGBAIXADOS", Err, objTituloPagar.lNumIntDoc)
        
        Case 56661  'Título não encontrado
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148658)
    
    End Select
    
    'Fecha o comando
    Call Comando_Fechar(lComando)
    
    Exit Function
    
End Function

Function Fornecedor_ObtemPadrao_CondPagto(ByVal objFornecedor As ClassFornecedor, ByVal objCondicaoPagto As ClassCondicaoPagto) As Long
'obtem condicao de pagamento padrao para um fornecedor e preenche objCondicaoPagto com ela
'retorna objCondicaoPagto.iCodigo = 0 se nao houver condicao padrao valida
'ATENCAO: objFornecedor tem que vir com objFornecedor.iCondicaoPagto e objFornecedor.iTipo preenchidos

Dim lErro As Long
Dim objTipoFornecedor As New ClassTipoFornecedor

On Error GoTo Erro_Fornecedor_ObtemPadrao_CondPagto

    objCondicaoPagto.iCodigo = 0
    
    'Se Cond Pagto de Fornecedor está preenchida
    If objFornecedor.iCondicaoPagto <> 0 Then
      
        objCondicaoPagto.iCodigo = objFornecedor.iCondicaoPagto
        
    'Verifica se chave de TipoFornecedor está preenchida
    ElseIf objFornecedor.iTipo > 0 Then
        
        'obtem os dados do Tipo
        objTipoFornecedor.iCodigo = objFornecedor.iTipo
    
        'Lê o TipoFornecedor a partir do código
        lErro = CF("TipoFornecedor_Le", objTipoFornecedor)
        If lErro <> SUCESSO And lErro <> 12765 Then Error 18830
        If lErro <> SUCESSO Then Error 18829

        'Se Cond Pagto de TipoFornecedor está preenchida
        If objTipoFornecedor.iCondicaoPagto <> 0 Then objCondicaoPagto.iCodigo = objTipoFornecedor.iCondicaoPagto
    
    End If
    
    If objCondicaoPagto.iCodigo <> 0 Then
    
        'Lê a Cond Pagto
        lErro = CF("CondicaoPagto_Le", objCondicaoPagto)
        If lErro <> SUCESSO And lErro <> 19205 Then Error 56790
        If lErro = 19205 Then Error 56791
            
    End If
    
    Fornecedor_ObtemPadrao_CondPagto = SUCESSO
     
    Exit Function
    
Erro_Fornecedor_ObtemPadrao_CondPagto:

    Fornecedor_ObtemPadrao_CondPagto = Err
     
    Select Case Err
          
        Case 56790
        
        Case 56791
            Call Rotina_Erro(vbOKOnly, "ERRO_CONDICAO_PAGTO_NAO_CADASTRADA", Err, objCondicaoPagto.iCodigo)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148659)
     
    End Select
     
    Exit Function

End Function

Function Pagamentos_Carrega_ComboCondPag(ByVal CondicaoPagamento As Object) As Long
'prenche combo com condicoes de pagto validas p/pagamento

Dim lErro As Long
Dim colCod_DescReduzida As New AdmColCodigoNome
Dim objCod_DescReduzida As AdmCodigoNome

On Error GoTo Erro_Pagamentos_Carrega_ComboCondPag

    'Lê o código e a descrição reduzida de todas as Condições de Pagamento
    lErro = CF("CondicoesPagto_Le_Pagamento", colCod_DescReduzida)
    If lErro <> SUCESSO Then Error 18800

    For Each objCod_DescReduzida In colCod_DescReduzida
       
        'Adiciona novo ítem na List da Combo CondicaoPagamento
        CondicaoPagamento.AddItem CInt(objCod_DescReduzida.iCodigo) & SEPARADOR & objCod_DescReduzida.sNome
        CondicaoPagamento.ItemData(CondicaoPagamento.NewIndex) = objCod_DescReduzida.iCodigo
    
    Next

    Pagamentos_Carrega_ComboCondPag = SUCESSO
    
    Exit Function
    
Erro_Pagamentos_Carrega_ComboCondPag:

    Pagamentos_Carrega_ComboCondPag = Err
    
    Select Case Err
    
        Case 18800
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148660)
            
    End Select
    
    Exit Function
    
End Function

Function Pagamentos_Carrega_ComboTiposCobr(ByVal TipoCobranca As Object) As Long
'preenche combo com tipos de cobranca (carteira, doc, deposito em conta,...)

Dim lErro As Long
Dim colCodigoDescricao As New AdmColCodigoNome
Dim objCodDescricao As AdmCodigoNome

On Error GoTo Erro_Pagamentos_Carrega_ComboTiposCobr

    'Lê o código e a descrição de todos os Tipos de Cobrança
    lErro = CF("Cod_Nomes_Le", "TiposDeCobranca", "Codigo", "Descricao", STRING_TIPOSDECOBRANCA_DESCRICAO, colCodigoDescricao)
    If lErro <> SUCESSO Then Error 18799
    
    For Each objCodDescricao In colCodigoDescricao

        'Adiciona o ítem na List da Combo TipoCobranca
        TipoCobranca.AddItem CInt(objCodDescricao.iCodigo) & SEPARADOR & objCodDescricao.sNome
        TipoCobranca.ItemData(TipoCobranca.NewIndex) = objCodDescricao.iCodigo

    Next

    Pagamentos_Carrega_ComboTiposCobr = SUCESSO
    
    Exit Function
    
Erro_Pagamentos_Carrega_ComboTiposCobr:

    Pagamentos_Carrega_ComboTiposCobr = Err
    
    Select Case Err
    
        Case 18799
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148661)
            
    End Select
    
    Exit Function
    
End Function

Function CtaCorrente_Procura(ByVal iBanco As Integer, ByVal sAgencia As String, ByVal sConta As String, iCodConta As Integer, Optional ByVal iFilialEmpresa As Integer = 0) As Long
'obtem codigo interno da cta corrente
'sAgencia e sConta vindos no extrato bancario, com zeros a esquerda, com 4 e 6 digitos respectivamente

Dim iCodIntCta As Integer
Dim iAgencia As Integer, lConta As Long
Dim lComando As Long
Dim sAgenciaTmp As String
Dim sContaTmp As String
Dim lErro As Long

On Error GoTo Erro_CtaCorrente_Procura

    iCodConta = 0
    iAgencia = CInt(sAgencia)
    lConta = CLng(sConta)
    
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 7167
    sAgenciaTmp = String(STRING_AGENCIA_CCI, 0)
    sContaTmp = String(STRING_NUMCONTA, 0)
    
    If iFilialEmpresa = 0 Then
        lErro = Comando_Executar(lComando, "SELECT Codigo, Agencia, NumConta FROM ContasCorrentesInternas WHERE CodBanco = ?", iCodIntCta, sAgenciaTmp, sContaTmp, iBanco)
    Else
        lErro = Comando_Executar(lComando, "SELECT Codigo, Agencia, NumConta FROM ContasCorrentesInternas WHERE CodBanco = ? AND FilialEmpresa = ?", iCodIntCta, sAgenciaTmp, sContaTmp, iBanco, iFilialEmpresa)
    End If
    If lErro <> AD_SQL_SUCESSO Then Error 7168

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7169
    
    Do While lErro <> AD_SQL_SEM_DADOS
    
        If CInt(sAgenciaTmp) = iAgencia And CLng(sContaTmp) = lConta Then
            iCodConta = iCodIntCta
            Exit Do
        End If
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7170
    
    Loop
    
    Call Comando_Fechar(lComando)
    
    CtaCorrente_Procura = SUCESSO
    
    Exit Function
    
Erro_CtaCorrente_Procura:

    CtaCorrente_Procura = Err
    
    Select Case Err
        Case 7167
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 7168, 7169, 7170
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONTASCORRENTES", Err)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148662)

    End Select

    Exit Function

End Function

Function ParcelasRec_Le_EmissaoBoleta_Sel(ByVal iCobrador As Integer, ByVal lBorderoInicial As Long, ByVal lBorderoFinal As Long, ByVal lClienteInicial As Long, ByVal lClienteFinal As Long, ByVal dtDataInicial As Date, ByVal dtDataFinal As Date, ByVal iExibeBoletosImpressos As Integer, ByVal colInfoParcRec As Collection) As Long
'preenche a colecao de parcelas a receber "candidatas" para a Emissão de Boletos
'datas não preenchidas devem ser passadas como DATA_NULA
'números não preenchidos devem ser passados como zero

Dim sSelect As String, lErro As Long
Dim lComando As Long
'buffers p/registros pesquisados
Dim lTitulosRecNumTitulo As Long, iTitulosRecFilialEmpresa As Integer, sTitulosRecSiglaDocumento As String
Dim lParcelasRecNumIntDoc As Long, iParcelasRecCartCobr As Integer, iParcelasRecNumParcela As Integer, dtParcelasRecDataVencimento As Date, dOcorrenciaValorCobrado As Double
Dim sClienteNomeReduzido As String, dtParcelaRecImpressoEm As Date, lCliente As Long, iFilialCli As Integer
Dim iStatus As Integer, iCodOcorrencia As Integer, dtDataImpressao As Date

On Error GoTo Erro_ParcelasRec_Le_EmissaoBoleta_Sel

    iStatus = STATUS_ABERTO
    iCodOcorrencia = COBRANCA_OCORR_INC_TITULO
    dtDataImpressao = DATA_NULA
    
'    If giTipoVersao = VERSAO_LIGHT Then
'        iCobrador = COBRADOR_PROPRIA_EMPRESA
'    End If
    
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 61317

    sTitulosRecSiglaDocumento = String(STRING_SIGLA_DOCUMENTO, 0)
    sClienteNomeReduzido = String(STRING_CLIENTE_NOME_REDUZIDO, 0)
    
    'tulio290103, alteracao pq qdo eh banco (vem como cobrador = 0)
    'p/montagem do comando SQL SELECT dinamicamente
    If iCobrador <> 0 Then
        
        Call ParcelasRec_Le_EmissaoBoletaSel1(sSelect, lBorderoInicial, lBorderoFinal, lClienteInicial, lClienteFinal, dtDataInicial, dtDataFinal, iExibeBoletosImpressos)
    Else
        iCobrador = COBRADOR_PROPRIA_EMPRESA
    
        Call ParcelasRec_Le_EmissaoBoletaSel1(sSelect, lBorderoInicial, lBorderoFinal, lClienteInicial, lClienteFinal, dtDataInicial, dtDataFinal, iExibeBoletosImpressos, False)
    End If
    
    'executa a preparacao da parte fixa do SELECT
    lErro = ParcelasRec_Le_EmissaoBoletaSel2(lComando, sSelect, lTitulosRecNumTitulo, iTitulosRecFilialEmpresa, sTitulosRecSiglaDocumento, lParcelasRecNumIntDoc, iParcelasRecCartCobr, iParcelasRecNumParcela, dtParcelasRecDataVencimento, dOcorrenciaValorCobrado, sClienteNomeReduzido, dtParcelaRecImpressoEm, iStatus, iCodOcorrencia, iCobrador, lCliente, iFilialCli)
    If lErro <> SUCESSO Then Error 61318

    'complementa a passagem dos parametros que variam de acordo com a selecao do usuario
    'e executa o SELECT p/obtencao das parcelas
    lErro = ParcelasRec_Le_EmissaoBoletaSel3(lComando, lBorderoInicial, lBorderoFinal, lClienteInicial, lClienteFinal, dtDataInicial, dtDataFinal, iExibeBoletosImpressos, dtDataImpressao)
    If lErro <> SUCESSO Then Error 61319

    'processa todas as parcelas retornadas pelo SELECT executado acima
    lErro = ParcelasRec_Le_EmissaoBoletaSel4(lComando, lTitulosRecNumTitulo, iTitulosRecFilialEmpresa, sTitulosRecSiglaDocumento, lParcelasRecNumIntDoc, iParcelasRecCartCobr, iParcelasRecNumParcela, dtParcelasRecDataVencimento, dOcorrenciaValorCobrado, sClienteNomeReduzido, dtParcelaRecImpressoEm, iCobrador, lCliente, iFilialCli, colInfoParcRec)
    If lErro <> SUCESSO And lErro <> 61346 Then Error 61320

    'Não encontrou Parcelas com a selecao passada
    If lErro = 61346 Then Error 61362
    
    lErro = Comando_Fechar(lComando)

    ParcelasRec_Le_EmissaoBoleta_Sel = SUCESSO

    Exit Function

Erro_ParcelasRec_Le_EmissaoBoleta_Sel:

    ParcelasRec_Le_EmissaoBoleta_Sel = Err

    Select Case Err

        Case 61318, 61319, 61320

        Case 61317
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 61362 'Não encontrou Parcelas, Tratar na função chamada
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148663)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Private Sub ParcelasRec_Le_EmissaoBoletaSel1(sSelect As String, ByVal lBorderoInicial As Long, ByVal lBorderoFinal As Long, ByVal lClienteInicial As Long, ByVal lClienteFinal As Long, ByVal dtDataInicial As Date, ByVal dtDataFinal As Date, ByVal iExibeBoletosImpressos As Integer, Optional bEhCobrador As Boolean = True)
'monta o SELECT dinamicamente
Dim sFrom As String, sWhere As String, sFields As String, sOrderBy As String

    'Campos do Titulo
    sFields = " TitulosRec.NumTitulo, TitulosRec.FilialEmpresa, TitulosRec.SiglaDocumento, TitulosRec.Cliente, TitulosRec.Filial"
    'Campos da Parcela
    sFields = sFields & ", ParcelasRec.NumIntDoc, ParcelasRec.CarteiraCobranca, ParcelasRec.NumParcela, ParcelasRec.DataVencimento, ParcelasRec.DataImpressaoBoleto"
    'Campo de Cliente
    sFields = sFields & ", Clientes.NomeReduzido"
        
    sFrom = " FROM ParcelasRec, TitulosRec, Cobradores, Clientes"
    
    sWhere = " WHERE ParcelasRec.Status = ? AND Cobradores.Codigo = ? AND ParcelasRec.NumIntTitulo = TitulosRec.NumIntDoc AND TitulosRec.Cliente = Clientes.Codigo AND ParcelasRec.Cobrador = Cobradores.Codigo"
    
'    If giTipoVersao = VERSAO_FULL Then
        
        If bEhCobrador = True Then
        
            'Campo de OcorrenciasRemParcRec
            sFields = sFields & ", OC.ValorCobrado"
            sFrom = sFrom & ",OcorrenciasRemParcRec OC, BorderosCobranca"
            sWhere = sWhere & " AND OC.CodOcorrencia = ? AND Cobradores.Codigo = OC.Cobrador AND BorderosCobranca.NumBordero = OC.NumBordero AND OC.NumBordero > 0 And ParcelasRec.NumIntDoc = OC.NumIntParc"
            If lBorderoInicial = 0 Then
                sWhere = sWhere & " AND ParcelasRec.Status = 4 AND NOT EXISTS (SELECT * FROM OcorrenciasRemParcRec OC2 WHERE OC2.NumIntParc = OC.NumIntParc AND OC2.CodOcorrencia = 1 AND OC2.NumBordero > OC.NumBordero)"
            End If
            
        Else
            
            'Campos de ParcelasRec
            sFields = sFields & ", ParcelasRec.Saldo"
        
        End If
        
'    ElseIf giTipoVersao = VERSAO_LIGHT Then
'        'Campos de ParcelasRec
'        sFields = sFields & ", ParcelasRec.Saldo"
'    End If
    
    'Se tiver Filial Centralizadora e For a Filial Centralizadora preencher com todas as parelas, senão preencher com as parcelas da filial
    If gobjCR.iFilialCentralizadora <> giFilialEmpresa And giFilialEmpresa <> EMPRESA_TODA Then
        sWhere = sWhere & " AND TitulosRec.FilialEmpresa = ?"
    End If

    If lBorderoInicial > 0 Then
       sWhere = sWhere & " AND BorderosCobranca.NumBordero >= ?"
    End If

    If lBorderoFinal > 0 Then
       sWhere = sWhere & " AND BorderosCobranca.NumBordero <= ?"
    End If
    
    If lClienteInicial > 0 Then
       sWhere = sWhere & " AND Clientes.Codigo >= ?"
    End If
    
    If lClienteFinal > 0 Then
       sWhere = sWhere & " AND Clientes.Codigo <= ?"
    End If
    
    'Se o limite inicial de data de vencimento de parcela estiver preenchido
    If (dtDataInicial <> DATA_NULA) Then
       sWhere = sWhere & " AND ParcelasRec.DataVencimento >= ?"
    End If

    'Se o limite final de data de vencimento de parcela estiver preenchido
    If (dtDataFinal <> DATA_NULA) Then
       sWhere = sWhere & " AND ParcelasRec.DataVencimento <= ?"
    End If

    If iExibeBoletosImpressos = vbUnchecked Then
       sWhere = sWhere & " AND ParcelasRec.DataImpressaoBoleto = ?"
    End If
    
    sOrderBy = " ORDER BY TitulosRec.NumTitulo, ParcelasRec.NumParcela"
    
    sSelect = "SELECT DISTINCT " & sFields & sFrom & sWhere & sOrderBy

End Sub

Private Function ParcelasRec_Le_EmissaoBoletaSel2(ByVal lComando As Long, ByVal sSelect As String, vlTitulosRecNumTitulo As Variant, viTitulosRecFilialEmpresa As Variant, vsTitulosRecSiglaDocumento As Variant, vlParcelasRecNumIntDoc As Variant, viParcelasRecCartCobr As Variant, viParcelasRecNumParcela As Variant, vdtParcelasRecDataVencimento As Variant, vdOcorrenciaValorCobrado As Variant, vsClienteNomeReduzido As Variant, dtParcelaRecImpressoEm As Variant, viStatusAberto As Variant, viCodOcorrencia As Variant, viCobrador As Variant, vlCliente As Variant, viFilialCli As Variant) As Long
'isola a preparacao da parte fixa do SELECT, serve apenas para diminuir o tamanho de ParcelasRec_Le_EmissaoBoletaSel2

Dim ret As Integer, lErro As Long

On Error GoTo Erro_ParcelasRec_Le_EmissaoBoletaSel2

    ret = Comando_PrepararInt(lComando, sSelect)
    If (ret <> AD_SQL_SUCESSO) Then Error 61321

    ret = Comando_BindVarInt(lComando, vlTitulosRecNumTitulo)
    If (ret <> AD_SQL_SUCESSO) Then Error 61322

    ret = Comando_BindVarInt(lComando, viTitulosRecFilialEmpresa)
    If (ret <> AD_SQL_SUCESSO) Then Error 61323
    
    ret = Comando_BindVarInt(lComando, vsTitulosRecSiglaDocumento)
    If (ret <> AD_SQL_SUCESSO) Then Error 61324

    ret = Comando_BindVarInt(lComando, vlCliente)
    If (ret <> AD_SQL_SUCESSO) Then Error 61324

    ret = Comando_BindVarInt(lComando, viFilialCli)
    If (ret <> AD_SQL_SUCESSO) Then Error 61324

    ret = Comando_BindVarInt(lComando, vlParcelasRecNumIntDoc)
    If (ret <> AD_SQL_SUCESSO) Then Error 61325

    ret = Comando_BindVarInt(lComando, viParcelasRecCartCobr)
    If (ret <> AD_SQL_SUCESSO) Then Error 61326

    ret = Comando_BindVarInt(lComando, viParcelasRecNumParcela)
    If (ret <> AD_SQL_SUCESSO) Then Error 61326

    ret = Comando_BindVarInt(lComando, vdtParcelasRecDataVencimento)
    If (ret <> AD_SQL_SUCESSO) Then Error 61327

    ret = Comando_BindVarInt(lComando, dtParcelaRecImpressoEm)
    If (ret <> AD_SQL_SUCESSO) Then Error 61328

    ret = Comando_BindVarInt(lComando, vsClienteNomeReduzido)
    If (ret <> AD_SQL_SUCESSO) Then Error 61330
    
    ret = Comando_BindVarInt(lComando, vdOcorrenciaValorCobrado)
    If (ret <> AD_SQL_SUCESSO) Then Error 61331
    
    ret = Comando_BindVarInt(lComando, viStatusAberto)
    If (ret <> AD_SQL_SUCESSO) Then Error 61333

    ret = Comando_BindVarInt(lComando, viCobrador)
    If (ret <> AD_SQL_SUCESSO) Then Error 61335

'    If giTipoVersao = VERSAO_FULL Then
    
        'tulio290103
        'se for banco, assumo q o cobrador sera COBRADOR_PROPRIA_EMPRESA
        If viCobrador <> COBRADOR_PROPRIA_EMPRESA Then
    
            ret = Comando_BindVarInt(lComando, viCodOcorrencia)
            If (ret <> AD_SQL_SUCESSO) Then Error 61334
            
        End If
'    End If
    
    ParcelasRec_Le_EmissaoBoletaSel2 = SUCESSO

    Exit Function

Erro_ParcelasRec_Le_EmissaoBoletaSel2:

    ParcelasRec_Le_EmissaoBoletaSel2 = Err

    Select Case Err

        Case 61321, 61322, 61323, 61324, 61325, 61326, 61327, 61328, 61329, 61330, 61331, 61333, 61334, 61335, 61422
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_REC", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148664)

    End Select

    Exit Function

End Function

Private Function ParcelasRec_Le_EmissaoBoletaSel3(ByVal lComando As Long, ByVal lBorderoInicial As Long, ByVal lBorderoFinal As Long, ByVal lClienteInicial As Long, ByVal lClienteFinal As Long, ByVal dtDataInicial As Date, ByVal dtDataFinal As Date, ByVal iExibeBoletosImpressos As Integer, ByVal dtDataImpressao As Date) As Long
'auxiliar a ParcelasRec_Le_EmissaoBoletaSel
'complementa a passagem dos parametros que variam de acordo com a selecao do usuario e executa o SELECT p/obtencao das parcelas
Dim lErro As Long, ret As Integer, vFilialEmpresa As Variant
Dim vBorderoInicial As Variant, vBorderoFinal As Variant, vClienteInicial As Variant, vClienteFinal As Variant, vDataInicial As Variant, vDataFinal As Variant, vDataImpressao As Variant

On Error GoTo Erro_ParcelasRec_Le_EmissaoBoletaSel3

    'Se entrar como empresa toda pode pegar titulos de todas as filiais, senao pegar titulos somente da filial corrente
    If gobjCR.iFilialCentralizadora <> giFilialEmpresa And giFilialEmpresa <> EMPRESA_TODA Then
        vFilialEmpresa = giFilialEmpresa
        ret = Comando_BindVarInt(lComando, vFilialEmpresa)
        If (ret <> AD_SQL_SUCESSO) Then Error 61336
    End If

    'Se o Bordero Inicial estiver preenchido
    If (lBorderoInicial <> 0) Then
        vBorderoInicial = lBorderoInicial
        ret = Comando_BindVarInt(lComando, vBorderoInicial)
        If (ret <> AD_SQL_SUCESSO) Then Error 61337
    End If
    
    'Se o Bordero Final estiver preenchido
    If (lBorderoFinal <> 0) Then
        vBorderoFinal = lBorderoFinal
        ret = Comando_BindVarInt(lComando, vBorderoFinal)
        If (ret <> AD_SQL_SUCESSO) Then Error 61338
    End If

    'Se o Cliente Inicial estiver preenchido
    If (lClienteInicial <> 0) Then
        vClienteInicial = lClienteInicial
        ret = Comando_BindVarInt(lComando, vClienteInicial)
        If (ret <> AD_SQL_SUCESSO) Then Error 61339
    End If

    'Se o Cliente Final estiver preenchido
    If (lClienteFinal <> 0) Then
        vClienteFinal = lClienteFinal
        ret = Comando_BindVarInt(lComando, vClienteFinal)
        If (ret <> AD_SQL_SUCESSO) Then Error 61340
    End If

    'Se a Data Inicial estiver preenchida
    If (dtDataInicial <> DATA_NULA) Then
        vDataInicial = dtDataInicial
        ret = Comando_BindVarInt(lComando, vDataInicial)
        If (ret <> AD_SQL_SUCESSO) Then Error 61341
    End If
    
    'Se a Data Final estiver preenchida
    If (dtDataFinal <> DATA_NULA) Then
        vDataFinal = dtDataFinal
        ret = Comando_BindVarInt(lComando, vDataFinal)
        If (ret <> AD_SQL_SUCESSO) Then Error 61342
    End If

    If iExibeBoletosImpressos = vbUnchecked Then
        
        vDataImpressao = dtDataImpressao
        ret = Comando_BindVarInt(lComando, vDataImpressao)
        If (ret <> AD_SQL_SUCESSO) Then Error 61343
    
    End If

    ret = Comando_ExecutarInt(lComando)
    If (ret <> AD_SQL_SUCESSO) Then Error 61344

    ParcelasRec_Le_EmissaoBoletaSel3 = SUCESSO

    Exit Function
    
Erro_ParcelasRec_Le_EmissaoBoletaSel3:

    ParcelasRec_Le_EmissaoBoletaSel3 = Err

    Select Case Err

        Case 61336, 61337, 61338, 61339, 61340, 61341, 61342, 61343, 61344
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_REC", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148665)

    End Select

    Exit Function

End Function

Private Function ParcelasRec_Le_EmissaoBoletaSel4(ByVal lComando As Long, lTitulosRecNumTitulo As Long, iTitulosRecFilialEmpresa As Integer, sTitulosRecSiglaDocumento As String, lParcelasRecNumIntDoc As Long, iParcelasRecCartCobr As Integer, iParcelasRecNumParcela As Integer, dtParcelasRecDataVencimento As Date, dOcorrenciaValorCobrado As Double, sClienteNomeReduzido As String, dtParcelaRecImpressoEm As Date, iCobrador As Integer, lCliente As Long, iFilialCli As Integer, ByVal colInfoParcRec As Collection) As Long
'auxiliar a ParcelasRec_Le_BaixaManualSel
'processa os registros lidos

Dim lErro As Long
Dim objInfoParcRec As ClassInfoParcRec

On Error GoTo Erro_ParcelasRec_Le_EmissaoBoletaSel4

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 61345

    If lErro = AD_SQL_SEM_DADOS Then Error 61346

    Do While lErro = AD_SQL_SUCESSO

        Set objInfoParcRec = New ClassInfoParcRec
        
        objInfoParcRec.iFilialEmpresa = iTitulosRecFilialEmpresa
        objInfoParcRec.dtVencimento = dtParcelasRecDataVencimento
        objInfoParcRec.dValor = dOcorrenciaValorCobrado
        objInfoParcRec.iNumParcela = iParcelasRecNumParcela
        objInfoParcRec.iCarteiraCobrador = iParcelasRecCartCobr
        objInfoParcRec.sNomeRedCliente = sClienteNomeReduzido
        objInfoParcRec.lNumIntParc = lParcelasRecNumIntDoc
        objInfoParcRec.lNumTitulo = lTitulosRecNumTitulo
        objInfoParcRec.sSiglaDocumento = sTitulosRecSiglaDocumento
        objInfoParcRec.dtDataImpressaoBoleto = dtParcelaRecImpressoEm
        objInfoParcRec.iCobrador = iCobrador
        objInfoParcRec.lCliente = lCliente
        objInfoParcRec.iFilialCliente = iFilialCli
        
        colInfoParcRec.Add objInfoParcRec
        
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 61347

    Loop

    ParcelasRec_Le_EmissaoBoletaSel4 = SUCESSO
    
    Exit Function

Erro_ParcelasRec_Le_EmissaoBoletaSel4:

    ParcelasRec_Le_EmissaoBoletaSel4 = Err

    Select Case Err

        Case 61345, 61347
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_REC", Err)
        
        Case 61346 'Sem Parcelas Selecionadas tratar na função que chama

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148666)

    End Select

    Exit Function

End Function

Function BorderoCobranca_Le_Cobrador(ByVal objBorderoCobranca As ClassBorderoCobranca) As Long
'Verifica se o Bordero passado tem Vinculo com o Cobrador passado
'Parametros Passdos: NumBordero e Cobrador.

Dim lErro As Long
Dim tBorderoCobranca As typeBorderoCobranca
Dim lComando As Long

On Error GoTo Erro_BorderoCobranca_Le_Cobrador

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 61447

    tBorderoCobranca.sConvenio = String(STRING_BORDERO_CONVENIO, 0)
    tBorderoCobranca.sNomeArquivo = String(STRING_NOME_ARQ_COMPLETO, 0)

    lErro = Comando_Executar(lComando, "SELECT CodNossaConta,DiasDeRetencao,TaxaCobranca,TaxaDesconto,Valor,ValorDesconto,Convenio,Status,DataCancelamento,DataContabilCancelamento,CarteiraCobranca, DataEmissao,Cobrador, NomeArquivo FROM BorderosCobranca WHERE NumBordero = ? AND Cobrador= ? AND Status <> ?", tBorderoCobranca.iCodNossaConta, tBorderoCobranca.iDiasDeRetencao, tBorderoCobranca.dTaxaCobranca, tBorderoCobranca.dTaxaDesconto, tBorderoCobranca.dValor, tBorderoCobranca.dValorDesconto, tBorderoCobranca.sConvenio, tBorderoCobranca.iStatus, tBorderoCobranca.dtDataCancelamento, tBorderoCobranca.dtDataContabilCancelamento, tBorderoCobranca.iCodCarteiraCobranca, tBorderoCobranca.dtDataEmissao, tBorderoCobranca.iCobrador, tBorderoCobranca.sNomeArquivo, objBorderoCobranca.lNumBordero, objBorderoCobranca.iCobrador, STATUS_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then Error 61445
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 61446
    If lErro = AD_SQL_SEM_DADOS Then Error 61447
    
    objBorderoCobranca.dTaxaCobranca = tBorderoCobranca.dTaxaCobranca
    objBorderoCobranca.dTaxaDesconto = tBorderoCobranca.dTaxaDesconto
    objBorderoCobranca.dValor = tBorderoCobranca.dValor
    objBorderoCobranca.dValorDesconto = tBorderoCobranca.dValorDesconto
    objBorderoCobranca.iCodNossaConta = tBorderoCobranca.iCodNossaConta
    objBorderoCobranca.iDiasDeRetencao = tBorderoCobranca.iDiasDeRetencao
    objBorderoCobranca.sConvenio = tBorderoCobranca.sConvenio
    objBorderoCobranca.dtDataCancelamento = tBorderoCobranca.dtDataCancelamento
    objBorderoCobranca.dtDataContabilCancelamento = tBorderoCobranca.dtDataContabilCancelamento
    objBorderoCobranca.dtDataEmissao = tBorderoCobranca.dtDataEmissao
    objBorderoCobranca.iCobrador = tBorderoCobranca.iCobrador
    objBorderoCobranca.iCodCarteiraCobranca = tBorderoCobranca.iCodCarteiraCobranca
    objBorderoCobranca.iStatus = tBorderoCobranca.iStatus
    objBorderoCobranca.sNomeArquivo = tBorderoCobranca.sNomeArquivo
    
    Call Comando_Fechar(lComando)
    
    BorderoCobranca_Le_Cobrador = SUCESSO
    
    Exit Function
    
Erro_BorderoCobranca_Le_Cobrador:

    BorderoCobranca_Le_Cobrador = Err
    
    Select Case Err
    
        Case 61445, 61446
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BORDERO_COBRANCA", Err)
            
        Case 61447 'Não encontrou o Brodero para o Cobrador
        
        Case 61447
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148667)
            
    End Select

    Call Comando_Fechar(lComando)

End Function

Function CobradorInfo_Le(ByVal iCodCobrador As Integer, ByVal colCobradorInfo As Collection) As Long

Dim lErro As Long
Dim lComando As Long
Dim objCodigoTexto As AdmCodigoNome
Dim iCodInfo As Integer
Dim sValorInfo As String

On Error GoTo Erro_CobradorInfo_Le

    'ABre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 51987

    sValorInfo = String(STRING_BANCOINFO_VALOR, 0)
    
    'Busca as informações bancárias de cobrança eletrônica p\ cobrador passado
    lErro = Comando_Executar(lComando, "SELECT CodInformacao,ValorInformacao FROM CobradorInfo WHERE CodCobrador = ? ORDER BY CodInformacao", iCodInfo, sValorInfo, iCodCobrador)
    If lErro <> AD_SQL_SUCESSO Then Error 51988
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 51989
    
    Do While lErro = AD_SQL_SUCESSO
        
        Set objCodigoTexto = New AdmCodigoNome
        'carrega o obj com os dados lidos
        objCodigoTexto.iCodigo = iCodInfo
        objCodigoTexto.sNome = sValorInfo
        
        'Adiciona o obj na coleção
        colCobradorInfo.Add objCodigoTexto

        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 51990
        
    Loop

    'Fecha o comando
    Call Comando_Fechar(lComando)
    
    CobradorInfo_Le = SUCESSO
        
    Exit Function

Erro_CobradorInfo_Le:

    CobradorInfo_Le = Err
    
    Select Case Err
    
        Case 51987, 51988, 51989, 51990
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148668)
            
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function CarteiraCobradorInfo_Le_Todas(ByVal iCodCobrador As Integer, ByVal colCarteirasCobradorInfo As Collection) As Long
'Lê as informações bancárias de cobrança eletrônica para o cobrador passado

Dim lErro As Long
Dim lComando As Long
Dim objCodigoTexto As AdmCodigoNome
Dim iCodInfo As Integer
Dim sValorInfo As String
Dim objCarteiraCNABInfo As ClassCNABInfo
Dim iCodCarteira As Integer

On Error GoTo Erro_CarteiraCobradorInfo_Le_Todas

    'Abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 62004

    sValorInfo = String(STRING_BANCOINFO_VALOR, 0)

    'Busca as informações no BD
    lErro = Comando_Executar(lComando, "SELECT CodInformacao,ValorInformacao,CodCarteira FROM CarteiraCobradorInfo WHERE CodCobrador=? ORDER BY CodCarteira,CodInformacao", iCodInfo, sValorInfo, iCodCarteira, iCodCobrador)
    If lErro <> AD_SQL_SUCESSO Then Error 62006
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 62005
    
    'Enquanto encontrar
    Do While lErro = AD_SQL_SUCESSO
        
        Set objCarteiraCNABInfo = New ClassCNABInfo
        
        objCarteiraCNABInfo.iCodCobrador = iCodCobrador
        objCarteiraCNABInfo.iCarteiraCobrador = iCodCarteira
        colCarteirasCobradorInfo.Add objCarteiraCNABInfo

        Do While lErro = AD_SQL_SUCESSO And objCarteiraCNABInfo.iCarteiraCobrador = iCodCarteira
        
            Set objCodigoTexto = New AdmCodigoNome
            'Preenche um obj com os dados lidos
            objCodigoTexto.iCodigo = iCodInfo
            objCodigoTexto.sNome = sValorInfo
        
            'Armazena os dados na coleção de informações
            objCarteiraCNABInfo.colInformacoes.Add objCodigoTexto

            'Busca a próxima informação no BD
            lErro = Comando_BuscarProximo(lComando)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 62007
        Loop
    Loop

    Call Comando_Fechar(lComando)
    
    CarteiraCobradorInfo_Le_Todas = SUCESSO
        
    Exit Function

Erro_CarteiraCobradorInfo_Le_Todas:

    CarteiraCobradorInfo_Le_Todas = Err
    
    Select Case Err
    
        Case 62004
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 62005, 62006, 62007
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CARTEIRACOBRADORINFO_NAO_CADASTRADA1", Err, iCodCobrador)
                
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148669)
            
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function OcorrRemParcRec_Le_NumIntOcorr(ByVal objOcorrRemParcRec As ClassOcorrRemParcRec) As Long
'Traz do bd as informações para preencher um objeto da classe ClassOcorrRemParcRec à partir
'da chave fornecida em objOcorrRemParcRec.lNumIntDoc

Dim lErro As Long
Dim lComando As Long
Dim tTipoOcorrRemParcRec As typeTipoOcorrRemParcRec

On Error GoTo Erro_OcorrRemParcRec_Le_NumIntOcorr

    'Inicializa comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 51716

    tTipoOcorrRemParcRec.sNumTitCobrador = String(STRING_NUMTITCOBRADOR, 0)
    
    With tTipoOcorrRemParcRec
        lErro = Comando_Executar(lComando, "SELECT NumIntParc,FilialEmpresa,Cobrador,CodOcorrencia,DataRegistro,Data,TituloVoltaCarteira,NovaDataVcto,Juros,Instrucao1,DiasDeProtesto1,Instrucao2,DiasDeProtesto2,ValorCobrado,NumBordero,NumTitCobrador FROM OcorrenciasRemParcRec WHERE NumIntDoc = ? ", _
             .lNumIntParc, .iFilialEmpresa, .iCobrador, .iCodOcorrencia, .dtDataRegistro, .dtData, .iTituloVoltaCarteira, .dtNovaDataVcto, .dJuros, .iInstrucao1, .iDiasDeProtesto1, .iInstrucao2, .iDiasDeProtesto2, .dValorCobrado, .lNumBordero, .sNumTitCobrador, objOcorrRemParcRec.lNumIntDoc)
        If lErro <> AD_SQL_SUCESSO Then Error 51717
    
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 51718
    
        If lErro = AD_SQL_SEM_DADOS Then Error 51719

        objOcorrRemParcRec.iFilialEmpresa = .iFilialEmpresa
        objOcorrRemParcRec.dtNovaDataVcto = .dtNovaDataVcto
        objOcorrRemParcRec.lNumIntParc = .lNumIntParc
        objOcorrRemParcRec.iFilialEmpresa = .iFilialEmpresa
        objOcorrRemParcRec.iCobrador = .iCobrador
        objOcorrRemParcRec.iCodOcorrencia = .iCodOcorrencia
        objOcorrRemParcRec.dtDataRegistro = .dtDataRegistro
        objOcorrRemParcRec.dtData = .dtData
        objOcorrRemParcRec.iTituloVoltaCarteira = .iTituloVoltaCarteira
        objOcorrRemParcRec.dtNovaDataVcto = .dtNovaDataVcto
        objOcorrRemParcRec.dJuros = .dJuros
        objOcorrRemParcRec.iInstrucao1 = .iInstrucao1
        objOcorrRemParcRec.iDiasDeProtesto1 = .iDiasDeProtesto1
        objOcorrRemParcRec.iInstrucao2 = .iInstrucao2
        objOcorrRemParcRec.iDiasDeProtesto2 = .iDiasDeProtesto2
        objOcorrRemParcRec.dValorCobrado = .dValorCobrado
        objOcorrRemParcRec.lNumBordero = .lNumBordero
        objOcorrRemParcRec.sNumTitCobrador = .sNumTitCobrador
    
    End With
        
    'Libera comando
    Call Comando_Fechar(lComando)

    OcorrRemParcRec_Le_NumIntOcorr = SUCESSO

    Exit Function

Erro_OcorrRemParcRec_Le_NumIntOcorr:

    OcorrRemParcRec_Le_NumIntOcorr = Err

    Select Case Err

        Case 51716
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 51717, 51718
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_OCORRENCIASREMPARCREC", Err, objOcorrRemParcRec.lNumIntParc, objOcorrRemParcRec.iNumSeqOcorr)

        Case 51719
            'Não encontrou. Erro tratado na rotina chamadora

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148670)

    End Select

    'Libera comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function BaixasParcPag_Le_BorderoPagto(ByVal lComando As Long, ByVal lNumIntBordero As Long, ByVal colBaixasParcPag As Collection) As Long
'Lê as baixasParcPag ligadas ao bordero passado

Dim lErro As Long
Dim tBaixaParcPag As typeBaixaParcPag
Dim objBaixaParcPag As ClassBaixaParcPagar

On Error GoTo Erro_BaixasParcPag_Le_BorderoPagto
    
    With tBaixaParcPag
        'Seleciona no BD as baixas p\ o bordero passado
        lErro = Comando_Executar(lComando, "SELECT BaixasParcPag.NumIntParcela, BaixasParcPag.Sequencial, BaixasParcPag.Status, BaixasParcPag.NumIntBaixa, BaixasParcPag.ValorMulta, BaixasParcPag.ValorJuros, BaixasParcPag.ValorDesconto, BaixasParcPag.ValorBaixado, BaixasParcPag.NumIntDoc FROM BaixasParcPag, MovimentosContaCorrente, BaixasPag WHERE BaixasParcPag.NumIntBaixa=BaixasPag.NumIntBaixa AND MovimentosContaCorrente.NumMovto=BaixasPag.NumMovCta AND MovimentosContaCorrente.Tipo=? AND MovimentosContaCorrente.NumRefInterna=? ", .lNumIntParcela, .iSequencial, .iStatus, .lNumIntBaixa, .dValorMulta, .dValorJuros, .dValorDesconto, .dValorBaixado, .lNumIntDoc, MOVCCI_PAGTO_TITULO_POR_BORDERO, lNumIntBordero)
        If lErro <> AD_SQL_SUCESSO Then Error 51742
        
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 51743
        
        'Enquanto for encontrar baixas
        Do While lErro = AD_SQL_SUCESSO
            
            Set objBaixaParcPag = New ClassBaixaParcPagar
            'carrega o obj com os dados lidos
                    
            objBaixaParcPag.dValorBaixado = .dValorBaixado
            objBaixaParcPag.dValorDesconto = .dValorDesconto
            objBaixaParcPag.dValorJuros = .dValorJuros
            objBaixaParcPag.dValorMulta = .dValorMulta
            objBaixaParcPag.iSequencial = .iSequencial
            objBaixaParcPag.iStatus = .iStatus
            objBaixaParcPag.lNumIntBaixa = .lNumIntBaixa
            objBaixaParcPag.lNumIntDoc = .lNumIntDoc
            objBaixaParcPag.lNumIntParcela = .lNumIntParcela
                
            'adiciona a baixa na coleção
            colBaixasParcPag.Add objBaixaParcPag
        
            'Busca a próxima
            lErro = Comando_BuscarProximo(lComando)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 51744
        
        Loop
    
    End With
    
    BaixasParcPag_Le_BorderoPagto = SUCESSO
    
    Exit Function

Erro_BaixasParcPag_Le_BorderoPagto:

    BaixasParcPag_Le_BorderoPagto = Err
    
    Select Case Err
        
        Case 51742, 51743, 51744
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BAIXAPARCPAG", Err)
               
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148671)
            
    End Select
    
    Exit Function
        
End Function

Function BorderoCobranca_LeMod(ByVal lComando As Long, ByVal objBorderoCobranca As ClassBorderoCobranca) As Long
'le dados de um bordero de cobranca para alterações

Dim lErro As Long
Dim iCobrador As Integer

On Error GoTo Erro_BorderoCobranca_LeMod

    'Lê o Bordero passado
    lErro = Comando_ExecutarPos(lComando, "SELECT Cobrador FROM BorderosCobranca WHERE NumBordero = ? ", 0, iCobrador, objBorderoCobranca.lNumBordero)
    If lErro <> AD_SQL_SUCESSO Then Error 51659
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 46365
    If lErro = AD_SQL_SEM_DADOS Then Error 51660 'não encontrou
    
    'faz o lock exclusivo no cobrador
    lErro = Comando_LockExclusive(lComando)
    If lErro <> AD_SQL_SUCESSO Then Error 51661
    
    BorderoCobranca_LeMod = SUCESSO
    
    Exit Function
    
Erro_BorderoCobranca_LeMod:

    BorderoCobranca_LeMod = Err
    
    Select Case Err
    
        Case 51659, 46365
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BORDERO_COBRANCA", Err)
            
        Case 51660
        
        Case 51658
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 51661
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_BORDERO_COBRANCA", Err, objBorderoCobranca.lNumBordero)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148672)
            
    End Select

    Exit Function

End Function


Function BaixaParcPag_ObterDados_ParcelaTituloPag(ByVal lComando As Long, ByVal lNumIntParcela As Long, ByVal objGeracaoArqCNABPag As ClassGeracaoArqCNABPag) As Long
'Obtem dados da parcela, título e fornecedor da parcela a pagar passad como parâmetro

Dim sCgc As String
Dim lErro As Long
Dim sNome As String
Dim iBanco As Integer
Dim sAgencia As String
Dim lEndereco As Long
Dim sContaCorrente As String
Dim dtDataVencimento As Date
Dim sSiglaTitulo As String
Dim lNumTitulo As Long, iTipoCobranca As Integer, iBancoCobrador As Integer, sCodigoDeBarras As String
Dim dtDataEmissaoTitulo As Date

On Error GoTo Erro_BaixaParcPag_ObterDados_ParcelaTituloPag
    
    sNome = String(STRING_FORNECEDOR_RAZAO_SOC, 0)
    sAgencia = String(STRING_AGENCIA, 0)
    sContaCorrente = String(STRING_CONTA_CORRENTE, 0)
    sSiglaTitulo = String(STRING_SIGLA_DOCUMENTO, 0)
    sCgc = String(STRING_CGC, 0)
    sCodigoDeBarras = String(STRING_CODIGO_BARRAS_PARC_CPR, 0)
    
    'Seleciona os dados ligados a parcela que serão utilizados na geracao do arq CNAB
    lErro = Comando_Executar(lComando, "SELECT ParcelasPagTodas.TipoCobranca, ParcelasPagTodas.BancoCobrador, ParcelasPagTodas.CodigodeBarras, ParcelasPagTodas.DataVencimento, Fornecedores.RazaoSocial, FiliaisFornecedores.Endereco, FiliaisFornecedores.CGC, FiliaisFornecedores.Banco, FiliaisFornecedores.Agencia, FiliaisFornecedores.ContaCorrente, TitulosPagTodos.SiglaDocumento, TitulosPagTodos.NumTitulo, TitulosPagTodos.DataEmissao FROM ParcelasPagTodas, TitulosPagTodos, FiliaisFornecedores, Fornecedores WHERE TitulosPagTodos.NumIntDoc=ParcelasPagTodas.NumIntTitulo AND TitulosPagTodos.Fornecedor=FiliaisFornecedores.CodFornecedor AND TitulosPagTodos.Filial=FiliaisFornecedores.CodFilial AND ParcelasPagTodas.NumIntDoc = ? AND FiliaisFornecedores.CodFornecedor = Fornecedores.Codigo", _
        iTipoCobranca, iBancoCobrador, sCodigoDeBarras, dtDataVencimento, sNome, lEndereco, sCgc, iBanco, sAgencia, sContaCorrente, sSiglaTitulo, lNumTitulo, dtDataEmissaoTitulo, lNumIntParcela)
    If lErro <> AD_SQL_SUCESSO Then Error 51745
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 51746
    If lErro <> AD_SQL_SUCESSO Then Error 51747 'Não encontrou
    
    objGeracaoArqCNABPag.dtDataVenctoParcela = dtDataVencimento
    objGeracaoArqCNABPag.sNomeFavorecido = sNome
    objGeracaoArqCNABPag.lEnderecoFavorecido = lEndereco
    objGeracaoArqCNABPag.sCGCFavorecido = sCgc
    objGeracaoArqCNABPag.iBancoFavorecido = iBanco
    objGeracaoArqCNABPag.sAgenciaFavorecido = sAgencia
    objGeracaoArqCNABPag.sContaFavorecido = sContaCorrente
    objGeracaoArqCNABPag.lNumTitulo = lNumTitulo
    objGeracaoArqCNABPag.sSiglaTitulo = sSiglaTitulo
    objGeracaoArqCNABPag.dtDataEmissaoTitulo = dtDataEmissaoTitulo
    objGeracaoArqCNABPag.iTipoCobranca = iTipoCobranca
    objGeracaoArqCNABPag.iBancoCobrador = iBancoCobrador
    objGeracaoArqCNABPag.sCodigoDeBarras = sCodigoDeBarras
    
    BaixaParcPag_ObterDados_ParcelaTituloPag = SUCESSO
    
    Exit Function

Erro_BaixaParcPag_ObterDados_ParcelaTituloPag:

    BaixaParcPag_ObterDados_ParcelaTituloPag = Err
    
    Select Case Err
    
        Case 51745, 51746
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_PAG1", Err)
        
        Case 51747
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PARCELA_PAGAR_NAO_CADASTRADA", Err, lNumIntParcela)
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148673)
            
    End Select

    Exit Function

End Function

Private Sub CarteiraCobrador_MoverCamposObj(ByVal iCodigo As Integer, objCarteiraCobrador As ClassCarteiraCobrador, tCarteira As typeCarteiraCobrador)

    Set objCarteiraCobrador = New ClassCarteiraCobrador
        
    'Coloca os dados da Carteira em objCarteiraCobrador
    With objCarteiraCobrador
        .iCobrador = iCodigo
        .iCodCarteiraCobranca = tCarteira.iCodCarteiraCobranca
        .iDesativada = tCarteira.iDesativada
        .sContaContabil = tCarteira.sContaContabil
        .sContaDuplDescontadas = tCarteira.sContaDuplDescontadas
        .iDiasDeRetencao = tCarteira.iDiasDeRetencao
        .dTaxaCobranca = tCarteira.dTaxaCobranca
        .dTaxaDesconto = tCarteira.dTaxaDesconto
        .sFaixaNossoNumeroInicial = tCarteira.sFaixaNossoNumeroInicial
        .sFaixaNossoNumeroFinal = tCarteira.sFaixaNossoNumeroFinal
        .sFaixaNossoNumeroProx = tCarteira.sFaixaNossoNumeroProx
        .sNomeNoBanco = tCarteira.sNomeNoBanco
        .sCodCarteiraNoBanco = tCarteira.sCodCarteiraNoBanco
        .iNumCarteiraNoBanco = tCarteira.iNumCarteiraNoBanco
        .lQuantidadeAtual = tCarteira.lQuantidadeAtual
        .lQuantidadeAtualBanco = tCarteira.lQuantidadeAtualBanco
        .dSaldoAtual = tCarteira.dSaldoAtual
        .dSaldoAtualBanco = tCarteira.dSaldoAtualBanco
        .iImprimeBoleta = tCarteira.iImprimeBoleta
        .iComRegistro = tCarteira.iComRegistro
        .iGeraNossoNumero = tCarteira.iGeraNossoNumero
        .iFormPreImp = tCarteira.iFormPreImp
    End With

End Sub

Function ParcelasRec_Le_BaixaRecCancelarSel(ByVal lCodCli As Long, ByVal iFilialCli As Integer, ByVal dtBaixaInic As Date, ByVal dtBaixaFim As Date, ByVal dtVencInic As Date, ByVal dtVencFim As Date, ByVal lTituloInic As Long, ByVal lTituloFim As Long, ByVal colInfoParcRec As Collection) As Long
'preenche a colecao de parcelas a receber "candidatas" para cancelamento da baixa
'datas nao preenchidas devem ser passadas como DATA_NULA
'numeros de titulo nao preenchidos devem ser passados como zero

Dim sSelect As String, lErro As Long
Dim lComando As Long, iStatusAberto As Integer

'buffers p/registros pesquisados
Dim lTitulosRecNumTitulo As Long, sTitulosRecSiglaDocumento As String
Dim lParcelasRecNumIntDoc As Long, iParcelasRecNumParcela As Integer, dParcelasRecValor As Double, iSequencial As Integer
Dim dtDataBaixa As Date, dValorBaixado As Double, iFilialEmpresa As Integer

On Error GoTo Erro_ParcelasRec_Le_BaixaRecCancelarSel

    iStatusAberto = STATUS_LANCADO

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 57940

    sTitulosRecSiglaDocumento = String(STRING_SIGLA_DOCUMENTO, 0)

    'p/montagem do comando SQL SELECT dinamicamente
    Call ParcelasRec_Le_BaixaRecCancelarSel1(sSelect, dtBaixaInic, dtBaixaFim, dtVencInic, dtVencFim, lTituloInic, lTituloFim)

    'executa a preparacao da parte fixa do SELECT
    lErro = ParcelasRec_Le_BaixaRecCancelarSel2(lComando, sSelect, iFilialEmpresa, lTitulosRecNumTitulo, sTitulosRecSiglaDocumento, lParcelasRecNumIntDoc, iParcelasRecNumParcela, dParcelasRecValor, iSequencial, dtDataBaixa, dValorBaixado, iStatusAberto, lCodCli, iFilialCli)
    If lErro <> SUCESSO Then Error 57941

    'complementa a passagem dos parametros que variam de acordo com a selecao do usuario
    'e executa o SELECT p/obtencao das parcelas
    lErro = ParcelasRec_Le_BaixaRecCancelarSel3(lComando, dtBaixaInic, dtBaixaFim, dtVencInic, dtVencFim, lTituloInic, lTituloFim)
    If lErro <> SUCESSO Then Error 57942

    'processa todas as parcelas retornadas pelo SELECT executado acima
    lErro = ParcelasRec_Le_BaixaRecCancelarSel4(lComando, iFilialEmpresa, lTitulosRecNumTitulo, sTitulosRecSiglaDocumento, lParcelasRecNumIntDoc, iParcelasRecNumParcela, dParcelasRecValor, iSequencial, dtDataBaixa, dValorBaixado, lCodCli, iFilialCli, colInfoParcRec)
    If lErro <> SUCESSO Then Error 57943
    
    lErro = Comando_Fechar(lComando)

    ParcelasRec_Le_BaixaRecCancelarSel = SUCESSO

    Exit Function

Erro_ParcelasRec_Le_BaixaRecCancelarSel:

    ParcelasRec_Le_BaixaRecCancelarSel = Err

    Select Case Err

        Case 57940
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 57941, 57942, 57943 'Erros tratados nas rotinas chamadas

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148674)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Private Sub ParcelasRec_Le_BaixaRecCancelarSel1(sSelect As String, ByVal dtBaixaInic As Date, ByVal dtBaixaFim As Date, ByVal dtVencInic As Date, ByVal dtVencFim As Date, ByVal lTituloInic As Long, ByVal lTituloFim As Long)
'Monta o SELECT dinamicamente
Dim sFrom As String, sWhere As String, sFields As String, sOrderBy As String
    
    sFields = "TitulosRecTodos.FilialEmpresa, TitulosRecTodos.NumTitulo, TitulosRecTodos.SiglaDocumento, ParcelasRecTodas2.NumParcela"
    sFields = sFields & ", ParcelasRecTodas2.NumIntDoc, ParcelasRecTodas2.Valor, BaixasParcRec.Sequencial, BaixasRec.Data, BaixasParcRec.ValorBaixado"

    sFrom = " FROM ParcelasRecTodas2, TitulosRecTodos, BaixasParcRec, BaixasRec"
    sWhere = " WHERE BaixasParcRec.Status = ? AND BaixasParcRec.NumIntParcela = ParcelasRecTodas2.NumIntDoc AND TitulosRecTodos.Cliente = ? AND TitulosRecTodos.Filial = ? AND TitulosRecTodos.NumIntDoc = ParcelasRecTodas2.NumIntTitulo " 'AND ParcelasRecTodas2.ProxSeqBaixa = BaixasParcRec.Sequencial + 1 "
    sWhere = sWhere & "AND BaixasParcRec.NumIntBaixa = BaixasRec.NumIntBaixa AND NOT (ParcelasRecTodas2.Cobrador = 1 AND ParcelasRecTodas2.CarteiraCobranca = 2)"
    
    'Se titulo inicial preenchido
    If (lTituloInic <> 0) Then
       sWhere = sWhere & " AND TitulosRecTodos.NumTitulo >= ?"
    End If

    'Se titulo final preenchido
    If (lTituloFim <> 0) Then
       sWhere = sWhere & " AND TitulosRecTodos.NumTitulo <= ?"
    End If
    
    'Se o limite inicial de data de emissao de titulo estiver preenchido
    If (dtBaixaInic <> DATA_NULA) Then
       sWhere = sWhere & " AND BaixasRec.Data >= ?"
    End If

    'Se o limite final de data de emissao de titulo estiver preenchido
    If (dtBaixaFim <> DATA_NULA) Then
       sWhere = sWhere & " AND BaixasRec.Data <= ?"
    End If

    'Se o limite inicial de data de vencimento de parcela estiver preenchido
    If (dtVencInic <> DATA_NULA) Then
       sWhere = sWhere & " AND ParcelasRecTodas2.DataVencimento >= ?"
    End If

    'Se o limite final de data de vencimento de parcela estiver preenchido
    If (dtVencFim <> DATA_NULA) Then
       sWhere = sWhere & " AND ParcelasRecTodas2.DataVencimento <= ?"
    End If

    sOrderBy = " ORDER BY TitulosRecTodos.NumTitulo, ParcelasRecTodas2.NumParcela, BaixasParcRec.Sequencial"
    
    sSelect = "SELECT " & sFields & sFrom & sWhere & sOrderBy

End Sub
                                                                                                                                                 
Private Function ParcelasRec_Le_BaixaRecCancelarSel2(ByVal lComando As Long, ByVal sSelect As String, viFilialEmpresa As Variant, vlTitulosRecNumTitulo As Variant, vsTitulosRecSiglaDocumento As Variant, vlParcelasRecNumIntDoc As Variant, viParcelasRecNumParcela As Variant, vdParcelasRecValor As Variant, viSequencial As Variant, vdtDataBaixa As Variant, vdValorBaixado As Variant, viStatusAberto As Variant, vlCliente As Variant, viFilial As Variant) As Long
'Isola a preparacao da parte fixa do SELECT, serve apenas para diminuir o tamanho de ParcelasRec_Le_BaixaRecCancelarSel
Dim ret As Long, lErro As Long

On Error GoTo Erro_ParcelasRec_Le_BaixaRecCancelarSel2

    ret = Comando_PrepararInt(lComando, sSelect)
    If (ret <> AD_SQL_SUCESSO) Then Error 57944

    ret = Comando_BindVarInt(lComando, viFilialEmpresa)
    If (ret <> AD_SQL_SUCESSO) Then Error 57945
    
    ret = Comando_BindVarInt(lComando, vlTitulosRecNumTitulo)
    If (ret <> AD_SQL_SUCESSO) Then Error 57945

    ret = Comando_BindVarInt(lComando, vsTitulosRecSiglaDocumento)
    If (ret <> AD_SQL_SUCESSO) Then Error 57946

    ret = Comando_BindVarInt(lComando, viParcelasRecNumParcela)
    If (ret <> AD_SQL_SUCESSO) Then Error 57947
    
    ret = Comando_BindVarInt(lComando, vlParcelasRecNumIntDoc)
    If (ret <> AD_SQL_SUCESSO) Then Error 57948

    ret = Comando_BindVarInt(lComando, vdParcelasRecValor)
    If (ret <> AD_SQL_SUCESSO) Then Error 57949

    ret = Comando_BindVarInt(lComando, viSequencial)
    If (ret <> AD_SQL_SUCESSO) Then Error 57950
    
    ret = Comando_BindVarInt(lComando, vdtDataBaixa)
    If (ret <> AD_SQL_SUCESSO) Then Error 57981
    
    ret = Comando_BindVarInt(lComando, vdValorBaixado)
    If (ret <> AD_SQL_SUCESSO) Then Error 57982
    
    ret = Comando_BindVarInt(lComando, viStatusAberto)
    If (ret <> AD_SQL_SUCESSO) Then Error 57951

    ret = Comando_BindVarInt(lComando, vlCliente)
    If (ret <> AD_SQL_SUCESSO) Then Error 57952

    ret = Comando_BindVarInt(lComando, viFilial)
    If (ret <> AD_SQL_SUCESSO) Then Error 57953
        
    ParcelasRec_Le_BaixaRecCancelarSel2 = SUCESSO

    Exit Function

Erro_ParcelasRec_Le_BaixaRecCancelarSel2:

    ParcelasRec_Le_BaixaRecCancelarSel2 = Err

    Select Case Err

        Case 57944 To 57953, 57981, 57982
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_REC_BAIXADAS", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148675)

    End Select

    Exit Function

End Function

Private Function ParcelasRec_Le_BaixaRecCancelarSel3(ByVal lComando As Long, ByVal dtBaixaInic As Date, ByVal dtBaixaFim As Date, ByVal dtVencInic As Date, ByVal dtVencFim As Date, ByVal lTituloInic As Long, ByVal lTituloFim As Long) As Long
'auxiliar a ParcelasRec_Le_BaixaRecCancelarSel
'complementa a passagem dos parametros que variam de acordo com a selecao do usuario e executa o SELECT p/obtencao das parcelas
Dim lErro As Long, ret As Integer, vFilialEmpresa As Variant, vTituloInic As Variant
Dim vTituloFim As Variant, vEmissaoInic As Variant, vEmissaoFim As Variant, vVencInic As Variant, vVencFim As Variant

On Error GoTo Erro_ParcelasRec_Le_BaixaRecCancelarSel3

    'Se titulo inicial preenchido
    If (lTituloInic <> 0) Then
        vTituloInic = lTituloInic
        ret = Comando_BindVarInt(lComando, vTituloInic)
        If (ret <> AD_SQL_SUCESSO) Then Error 57954
    End If

    'Se titulo final preenchido
    If (lTituloFim <> 0) Then
        vTituloFim = lTituloFim
        ret = Comando_BindVarInt(lComando, vTituloFim)
        If (ret <> AD_SQL_SUCESSO) Then Error 57955
    End If

    'Se o limite inicial de data de baixa de titulo estiver preenchido
    If (dtBaixaInic <> DATA_NULA) Then
        vEmissaoInic = dtBaixaInic
        ret = Comando_BindVarInt(lComando, vEmissaoInic)
        If (ret <> AD_SQL_SUCESSO) Then Error 57956
    End If

    'Se o limite final de data de baixa de titulo estiver preenchido
    If (dtBaixaFim <> DATA_NULA) Then
        vEmissaoFim = dtBaixaFim
        ret = Comando_BindVarInt(lComando, vEmissaoFim)
        If (ret <> AD_SQL_SUCESSO) Then Error 57957
    End If

    'Se o limite inicial de data de vencimento de parcela estiver preenchido
    If (dtVencInic <> DATA_NULA) Then
        vVencInic = dtVencInic
        ret = Comando_BindVarInt(lComando, vVencInic)
        If (ret <> AD_SQL_SUCESSO) Then Error 57958
    End If

    'Se o limite final de data de vencimento de parcela estiver preenchido
    If (dtVencFim <> DATA_NULA) Then
        vVencFim = dtVencFim
        ret = Comando_BindVarInt(lComando, vVencFim)
        If (ret <> AD_SQL_SUCESSO) Then Error 57959
    End If

    ret = Comando_ExecutarInt(lComando)
    If (ret <> AD_SQL_SUCESSO) Then Error 57960

    ParcelasRec_Le_BaixaRecCancelarSel3 = SUCESSO

    Exit Function
    
Erro_ParcelasRec_Le_BaixaRecCancelarSel3:

    ParcelasRec_Le_BaixaRecCancelarSel3 = Err

    Select Case Err

        Case 27054 To 57960
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_REC", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148676)

    End Select

    Exit Function

End Function

Private Function ParcelasRec_Le_BaixaRecCancelarSel4(ByVal lComando As Long, iFilialEmpresa As Integer, lTitulosRecNumTitulo As Long, sTitulosRecSiglaDocumento As String, lParcelasRecNumIntDoc As Long, iParcelasRecNumParcela As Integer, dParcelasRecValor As Double, iSequencial As Integer, dtDataBaixa As Date, dValorBaixado As Double, lCliente As Long, iFilial As Integer, ByVal colInfoParcRec As Collection) As Long
'auxiliar a ParcelasRec_Le_BaixaRecCancelarSel
'processa os registros lidos
Dim lErro As Long
Dim objInfoParcRec As ClassInfoParcRec

On Error GoTo Erro_ParcelasRec_Le_BaixaRecCancelarSel4

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 57962

    If lErro = AD_SQL_SEM_DADOS Then Error 57963

    Do While lErro = AD_SQL_SUCESSO

        Set objInfoParcRec = New ClassInfoParcRec

        objInfoParcRec.iFilialEmpresa = iFilialEmpresa
        objInfoParcRec.sSiglaDocumento = sTitulosRecSiglaDocumento
        objInfoParcRec.lNumTitulo = lTitulosRecNumTitulo
        objInfoParcRec.iNumParcela = iParcelasRecNumParcela
        objInfoParcRec.dValor = dParcelasRecValor
        objInfoParcRec.dValorBaixado = dValorBaixado
        objInfoParcRec.iSequencial = iSequencial
        objInfoParcRec.dtDataBaixa = dtDataBaixa
        
        colInfoParcRec.Add objInfoParcRec
        
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 57964

    Loop

    ParcelasRec_Le_BaixaRecCancelarSel4 = SUCESSO
    
    Exit Function

Erro_ParcelasRec_Le_BaixaRecCancelarSel4:

    ParcelasRec_Le_BaixaRecCancelarSel4 = Err

    Select Case Err

        Case 57962, 57964
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_REC", Err)
        
        Case 57963
            Call Rotina_Erro(vbOKOnly, "ERRO_SEM_PARCELAS_REC_SEL", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148677)

    End Select

    Exit Function

End Function

Function TiposDocumento_Le_TitulosPag(ByVal colSigla As Collection) As Long
'Le as Siglas de Tipos de Documento que tem campo ClasseDocCPR = 1

Dim lErro As Long
Dim lComando As Long
Dim sSigla As String

On Error GoTo Erro_TiposDocumento_Le_TitulosPag

    'Inicializa comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 57977

    sSigla = String(STRING_SIGLA_DOCUMENTO, 0)
    
    'Pesquisa no BD a Sigla em TiposDeDocumento que possui ClasseDocCPR = 1
    lErro = Comando_Executar(lComando, "SELECT Sigla FROM TiposDeDocumento WHERE ClasseDocCPR = 1", sSigla)
    If lErro <> AD_SQL_SUCESSO Then Error 57978
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 57979
        
    'Equanto encontrar
    Do While lErro <> AD_SQL_SEM_DADOS

        'Adiciona na coleção de siglas
        colSigla.Add sSigla
        
        'Busca próxima sigla
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 57980
        
    Loop
    
    'Libera comando
    Call Comando_Fechar(lComando)
    
    TiposDocumento_Le_TitulosPag = SUCESSO
    
    Exit Function

Erro_TiposDocumento_Le_TitulosPag:

    TiposDocumento_Le_TitulosPag = Err
    
    Select Case Err
        
        Case 57977
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
            
        Case 57978, 57979, 57980
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOSDEDOCUMENTO", Err)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148678)
    
    End Select
    
    'Libera comando
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function ParcelasPagar_Le_Todas(ByVal objTituloPagar As ClassTituloPagar, ByVal colParcelasPag As colParcelaPagar, Optional ByVal bLeExcluido As Boolean = False) As Long
'Lê as Parcelas a Pagar do Titulo cujo NumIntDoc foi passado em objTituloPagar
'Se não encontrar em Parcelas Pag, Procura em Parcelas Pag Baixadas

Dim lErro As Long
Dim lComando As Long
Dim tParcelaPagar As typeParcelaPagar

On Error GoTo Erro_ParcelasPagar_Le_Todas

    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 60119

    tParcelaPagar.sNossoNumero = String(STRING_PARCELA_PAGAR_NOSSO_NUMERO, 0)
    tParcelaPagar.sCodigoDeBarras = String(STRING_CODIGO_BARRAS_PARC_CPR, 0)
    tParcelaPagar.sCodUsuarioLib = String(STRING_USUARIO_CODIGO, 0)

    'Seleciona Parcelas vinculadas ao Título
    If bLeExcluido Then
        lErro = Comando_Executar(lComando, "SELECT NumIntDoc, NumParcela, Status, DataVencimento, DataVencimentoReal, Saldo, Valor, ValorOriginal, MotivoDiferenca, TipoCobranca, Portador, BancoCobrador, ProxSeqBaixa, NossoNumero, CodigoDeBarras, CodUsuarioLib, DataLib FROM ParcelasPag WHERE NumIntTitulo = ? ORDER BY DataVencimento", tParcelaPagar.lNumIntDoc, tParcelaPagar.iNumParcela, tParcelaPagar.iStatus, tParcelaPagar.dtDataVencimento, tParcelaPagar.dtDataVencimentoReal, tParcelaPagar.dSaldo, tParcelaPagar.dValor, tParcelaPagar.dValorOriginal, tParcelaPagar.iMotivoDiferenca, tParcelaPagar.iTipoCobranca, tParcelaPagar.iPortador, tParcelaPagar.iBancoCobrador, tParcelaPagar.iProxSeqBaixa, tParcelaPagar.sNossoNumero, tParcelaPagar.sCodigoDeBarras, tParcelaPagar.sCodUsuarioLib, tParcelaPagar.dtDataLib, objTituloPagar.lNumIntDoc)
    Else
        lErro = Comando_Executar(lComando, "SELECT NumIntDoc, NumParcela, Status, DataVencimento, DataVencimentoReal, Saldo, Valor, ValorOriginal, MotivoDiferenca, TipoCobranca, Portador, BancoCobrador, ProxSeqBaixa, NossoNumero, CodigoDeBarras, CodUsuarioLib, DataLib FROM ParcelasPag WHERE NumIntTitulo = ? AND Status <> ? ORDER BY DataVencimento", tParcelaPagar.lNumIntDoc, tParcelaPagar.iNumParcela, tParcelaPagar.iStatus, tParcelaPagar.dtDataVencimento, tParcelaPagar.dtDataVencimentoReal, tParcelaPagar.dSaldo, tParcelaPagar.dValor, tParcelaPagar.dValorOriginal, tParcelaPagar.iMotivoDiferenca, tParcelaPagar.iTipoCobranca, tParcelaPagar.iPortador, tParcelaPagar.iBancoCobrador, tParcelaPagar.iProxSeqBaixa, tParcelaPagar.sNossoNumero, tParcelaPagar.sCodigoDeBarras, tParcelaPagar.sCodUsuarioLib, tParcelaPagar.dtDataLib, objTituloPagar.lNumIntDoc, STATUS_EXCLUIDO)
    End If
    If lErro <> AD_SQL_SUCESSO Then Error 60120

    'Tenta ler a primeira Parcela
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60121

    If lErro = AD_SQL_SEM_DADOS Then

        'Seleciona Parcelas vinculadas ao Título
        If bLeExcluido Then
            lErro = Comando_Executar(lComando, "SELECT NumIntDoc, NumParcela, Status, DataVencimento, DataVencimentoReal, Valor, ValorOriginal, MotivoDiferenca, TipoCobranca, Portador, BancoCobrador, ProxSeqBaixa, NossoNumero, CodigoDeBarras FROM ParcelasPagBaixadas WHERE NumIntTitulo = ? AND Status <> ? ORDER BY DataVencimento", tParcelaPagar.lNumIntDoc, tParcelaPagar.iNumParcela, tParcelaPagar.iStatus, tParcelaPagar.dtDataVencimento, tParcelaPagar.dtDataVencimentoReal, tParcelaPagar.dValor, tParcelaPagar.dValorOriginal, tParcelaPagar.iMotivoDiferenca, tParcelaPagar.iTipoCobranca, tParcelaPagar.iPortador, tParcelaPagar.iBancoCobrador, tParcelaPagar.iProxSeqBaixa, tParcelaPagar.sNossoNumero, tParcelaPagar.sCodigoDeBarras, objTituloPagar.lNumIntDoc, STATUS_EXCLUIDO)
        Else
            lErro = Comando_Executar(lComando, "SELECT NumIntDoc, NumParcela, Status, DataVencimento, DataVencimentoReal, Valor, ValorOriginal, MotivoDiferenca, TipoCobranca, Portador, BancoCobrador, ProxSeqBaixa, NossoNumero, CodigoDeBarras FROM ParcelasPagBaixadas WHERE NumIntTitulo = ? ORDER BY DataVencimento", tParcelaPagar.lNumIntDoc, tParcelaPagar.iNumParcela, tParcelaPagar.iStatus, tParcelaPagar.dtDataVencimento, tParcelaPagar.dtDataVencimentoReal, tParcelaPagar.dValor, tParcelaPagar.dValorOriginal, tParcelaPagar.iMotivoDiferenca, tParcelaPagar.iTipoCobranca, tParcelaPagar.iPortador, tParcelaPagar.iBancoCobrador, tParcelaPagar.iProxSeqBaixa, tParcelaPagar.sNossoNumero, tParcelaPagar.sCodigoDeBarras, objTituloPagar.lNumIntDoc)
        End If
        If lErro <> AD_SQL_SUCESSO Then Error 60122

        'Tenta ler a primeira Parcela
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60123

        If lErro = AD_SQL_SEM_DADOS Then Error 60124

    End If

    'Loop de adição de Parcelas à coleção
    Do While lErro <> AD_SQL_SEM_DADOS

        'Adiciona Parcela na coleção
        With tParcelaPagar
            colParcelasPag.Add .lNumIntDoc, objTituloPagar.lNumIntDoc, .iNumParcela, .iStatus, .dtDataVencimento, .dtDataVencimentoReal, .dSaldo, .dValor, .iPortador, .iProxSeqBaixa, .iTipoCobranca, .iBancoCobrador, .sNossoNumero, .sCodigoDeBarras, , .dValorOriginal, .iMotivoDiferenca, .sCodUsuarioLib, .dtDataLib
        End With

        'Vai para a próxima Parcela
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60125

    Loop

    'Fecha comando
    Call Comando_Fechar(lComando)

    ParcelasPagar_Le_Todas = SUCESSO

    Exit Function

Erro_ParcelasPagar_Le_Todas:

    ParcelasPagar_Le_Todas = Err

    Select Case Err

        Case 60119
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 60120, 60121, 60122, 60123, 60125
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELASPAG", Err, objTituloPagar.lNumIntDoc)

        Case 60124
            Call Rotina_Erro(vbOKOnly, "ERRO_TITULOPAGAR_SEM_PARCELAS", Err, objTituloPagar.lNumIntDoc)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148679)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function BaixaParcPag_Le_Sequenciais(ByVal lNumIntParcela As Long, ByVal colSequenciais As Collection) As Long
'Lê os Sequencias não cancelados da Parcela Passada

Dim lComando As Long
Dim lErro As Long
Dim iSequencial As Integer

On Error GoTo Erro_BaixaParcPag_Le_Sequenciais

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 60126

    'le a tabela de BaixaParcRec
    lErro = Comando_Executar(lComando, "SELECT Sequencial FROM BaixasParcPag WHERE NumIntParcela = ? AND Status <> ? ORDER BY Sequencial", iSequencial, lNumIntParcela, STATUS_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then Error 60127

    'le o primeiro Sequencial
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60128

    Do While lErro <> AD_SQL_SEM_DADOS

        'coloca o Sequencial lido na coleção
        colSequenciais.Add iSequencial

        'le o proximo Sequencial
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60129

    Loop

    Call Comando_Fechar(lComando)

    BaixaParcPag_Le_Sequenciais = SUCESSO

    Exit Function

Erro_BaixaParcPag_Le_Sequenciais:

    BaixaParcPag_Le_Sequenciais = Err

    Select Case Err

        Case 60126
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 60127, 60128, 60129
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BAIXAPARCPAG", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148680)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function Titulo_Le_DocumentoOriginal(ByVal lNumIntTitulo As Long, ByVal iClasseDocCPR As Integer, ByVal objNFiscal As ClassNFiscal, sTela As String) As Long
'Le o Nome da Tela do Documento Original do Título

Dim lErro As Long
Dim tNFiscal As typeNFiscal
Dim lComando As Long

On Error GoTo Erro_Titulo_Le_DocumentoOriginal
    
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 60010

    sTela = String(STRING_NOME_TELA, 0)
    
    lErro = Comando_Executar(lComando, "SELECT NFiscal.NumIntDoc, NFiscal.FornecedorBenef, NFiscal.FilialFornBenef, TiposDocInfo.NomeTelaNFiscal, TiposDocInfo.Codigo FROM NFiscal,TiposDocInfo WHERE NFiscal.ClasseDocCPR = ? AND NFiscal.NumIntDocCPR = ? AND TiposDocInfo.Codigo = NFiscal.TipoNFiscal", tNFiscal.lNumIntDoc, tNFiscal.lFornecedor, tNFiscal.iFilialForn, sTela, tNFiscal.iTipoNFiscal, iClasseDocCPR, lNumIntTitulo)
    If lErro <> AD_SQL_SUCESSO Then Error 60011

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60012
    
    If lErro = AD_SQL_SEM_DADOS Then Error 58942
    
    objNFiscal.lNumIntDoc = tNFiscal.lNumIntDoc
    objNFiscal.iTipoNFiscal = tNFiscal.iTipoNFiscal
    objNFiscal.lFornecedorBenef = tNFiscal.lFornecedor
    objNFiscal.iFilialFornBenef = tNFiscal.iFilialForn
    
    Call Comando_Fechar(lComando)

    Titulo_Le_DocumentoOriginal = SUCESSO
    
    Exit Function
    
Erro_Titulo_Le_DocumentoOriginal:
    
    Titulo_Le_DocumentoOriginal = Err
    
    Select Case Err
        
        Case 60010
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 60011, 60012
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", Err)
        
        Case 58942 'Não Encontrou
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148681)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function TituloPag_Le_Todos(ByVal objTituloPagar As ClassTituloPagar) As Long
'Lê em Titulos a Pagar se não encontrar procura em Titulos a Pagar Baixados

Dim lErro As Long

On Error GoTo Erro_TituloPag_Le_Todos
        
    'Lê em Títulos a Pagar
    lErro = CF("TituloPagar_Le_Numero", objTituloPagar)
    If lErro <> SUCESSO And lErro <> 18551 Then Error 60026
    
    'Se não encontrou
    If lErro = 18551 Then
    
        'Procura em Títulos a Receber Baixados
        lErro = CF("TituloPagarBaixado_Le_Numero", objTituloPagar)
        If lErro <> SUCESSO And lErro <> 18556 Then Error 60027
        
        'Se não encontrou nos dois ---> ERRO
        If lErro = 18556 Then Error 60028

    End If

    TituloPag_Le_Todos = SUCESSO

    Exit Function

Erro_TituloPag_Le_Todos:

    TituloPag_Le_Todos = Err

    Select Case Err
        
        Case 60026, 60027 'Tratado na rotina chamada
        
        Case 60028
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TITULOPAGAR_NAO_CADASTRADO1", Err, objTituloPagar.lNumTitulo)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148682)

    End Select

    Exit Function

End Function

Function ParcelasReceber_Le_Todas(ByVal objTituloReceberBaixado As ClassTituloReceber, ByVal colParcelasRecBaixadas As ColParcelaReceber, Optional ByVal bLeExcluido As Boolean = False) As Long
'Lê as Parcelas a Receber do Titulo cujo NumIntDoc foi passado em objTituloReceberBaixado
'Se não encontrar Le em Parcelas Baixadas

Dim lErro As Long
Dim lComando As Long
Dim tParcelaReceber As typeParcelaReceber

On Error GoTo Erro_ParcelasReceber_Le_Todas

    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 58985

    tParcelaReceber.sNumTitCobrador = String(STRING_NOSSO_NUMERO, 0)
    tParcelaReceber.sObservacao = String(STRING_OBS_PARC_REC, 0)

    'Seleciona Parcelas vinculadas ao Título
    If bLeExcluido Then
        lErro = Comando_Executar(lComando, "SELECT NumIntDoc, NumParcela, Status, DataVencimento, DataVencimentoReal, Saldo, Valor, Cobrador, CarteiraCobranca, NumTitCobrador, ProxSeqBaixa, ProxSeqOcorr, Desconto1Codigo, Desconto1Ate, Desconto1Valor, Desconto2Codigo, Desconto2Ate, Desconto2Valor, Desconto3Codigo, Desconto3Ate, Desconto3Valor, Aceite, Descontada, ValorOriginal, Observacao, Previsao FROM ParcelasRec WHERE NumIntTitulo = ? ORDER BY NumParcela", tParcelaReceber.lNumIntDoc, tParcelaReceber.iNumParcela, tParcelaReceber.iStatus, tParcelaReceber.dtDataVencimento, tParcelaReceber.dtDataVencimentoReal, tParcelaReceber.dSaldo, tParcelaReceber.dValor, tParcelaReceber.iCobrador, tParcelaReceber.iCarteiraCobranca, tParcelaReceber.sNumTitCobrador, tParcelaReceber.iProxSeqBaixa, tParcelaReceber.iProxSeqOcorr, tParcelaReceber.iDesconto1Codigo, tParcelaReceber.dtDesconto1Ate, tParcelaReceber.dDesconto1Valor, _
            tParcelaReceber.iDesconto2Codigo, tParcelaReceber.dtDesconto2Ate, tParcelaReceber.dDesconto2Valor, tParcelaReceber.iDesconto3Codigo, tParcelaReceber.dtDesconto3Ate, tParcelaReceber.dDesconto3Valor, tParcelaReceber.iAceite, tParcelaReceber.iDescontada, tParcelaReceber.dValorOriginal, tParcelaReceber.sObservacao, tParcelaReceber.iPrevisao, objTituloReceberBaixado.lNumIntDoc)
    Else
        lErro = Comando_Executar(lComando, "SELECT NumIntDoc, NumParcela, Status, DataVencimento, DataVencimentoReal, Saldo, Valor, Cobrador, CarteiraCobranca, NumTitCobrador, ProxSeqBaixa, ProxSeqOcorr, Desconto1Codigo, Desconto1Ate, Desconto1Valor, Desconto2Codigo, Desconto2Ate, Desconto2Valor, Desconto3Codigo, Desconto3Ate, Desconto3Valor, Aceite, Descontada, ValorOriginal, Observacao, Previsao FROM ParcelasRec WHERE NumIntTitulo = ? AND Status <> ? ORDER BY NumParcela", tParcelaReceber.lNumIntDoc, tParcelaReceber.iNumParcela, tParcelaReceber.iStatus, tParcelaReceber.dtDataVencimento, tParcelaReceber.dtDataVencimentoReal, tParcelaReceber.dSaldo, tParcelaReceber.dValor, tParcelaReceber.iCobrador, tParcelaReceber.iCarteiraCobranca, tParcelaReceber.sNumTitCobrador, tParcelaReceber.iProxSeqBaixa, tParcelaReceber.iProxSeqOcorr, tParcelaReceber.iDesconto1Codigo, tParcelaReceber.dtDesconto1Ate, tParcelaReceber.dDesconto1Valor, _
            tParcelaReceber.iDesconto2Codigo, tParcelaReceber.dtDesconto2Ate, tParcelaReceber.dDesconto2Valor, tParcelaReceber.iDesconto3Codigo, tParcelaReceber.dtDesconto3Ate, tParcelaReceber.dDesconto3Valor, tParcelaReceber.iAceite, tParcelaReceber.iDescontada, tParcelaReceber.dValorOriginal, tParcelaReceber.sObservacao, tParcelaReceber.iPrevisao, objTituloReceberBaixado.lNumIntDoc, STATUS_EXCLUIDO)
    End If
    If lErro <> AD_SQL_SUCESSO Then Error 58986

    'Tenta ler a primeira Parcela
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 58987

    'Se não encontrou Parcela --> Procura em Baixadas
    If lErro = AD_SQL_SEM_DADOS Then

        'Seleciona Parcelas vinculadas ao Título
        If bLeExcluido Then
            lErro = Comando_Executar(lComando, "SELECT NumIntDoc, NumParcela, Status, DataVencimento, DataVencimentoReal, Valor, Cobrador, CarteiraCobranca, NumTitCobrador, ProxSeqBaixa, ProxSeqOcorr, Desconto1Codigo, Desconto1Ate, Desconto1Valor, Desconto2Codigo, Desconto2Ate, Desconto2Valor, Desconto3Codigo, Desconto3Ate, Desconto3Valor, Aceite, ValorOriginal, Observacao FROM ParcelasRecBaixadas WHERE NumIntTitulo = ? ORDER BY NumParcela", tParcelaReceber.lNumIntDoc, tParcelaReceber.iNumParcela, tParcelaReceber.iStatus, tParcelaReceber.dtDataVencimento, tParcelaReceber.dtDataVencimentoReal, tParcelaReceber.dValor, tParcelaReceber.iCobrador, tParcelaReceber.iCarteiraCobranca, tParcelaReceber.sNumTitCobrador, tParcelaReceber.iProxSeqBaixa, tParcelaReceber.iProxSeqOcorr, tParcelaReceber.iDesconto1Codigo, tParcelaReceber.dtDesconto1Ate, tParcelaReceber.dDesconto1Valor, _
                tParcelaReceber.iDesconto2Codigo, tParcelaReceber.dtDesconto2Ate, tParcelaReceber.dDesconto2Valor, tParcelaReceber.iDesconto3Codigo, tParcelaReceber.dtDesconto3Ate, tParcelaReceber.dDesconto3Valor, tParcelaReceber.iAceite, tParcelaReceber.dValorOriginal, tParcelaReceber.sObservacao, objTituloReceberBaixado.lNumIntDoc)
        Else
            lErro = Comando_Executar(lComando, "SELECT NumIntDoc, NumParcela, Status, DataVencimento, DataVencimentoReal, Valor, Cobrador, CarteiraCobranca, NumTitCobrador, ProxSeqBaixa, ProxSeqOcorr, Desconto1Codigo, Desconto1Ate, Desconto1Valor, Desconto2Codigo, Desconto2Ate, Desconto2Valor, Desconto3Codigo, Desconto3Ate, Desconto3Valor, Aceite, ValorOriginal, Observacao FROM ParcelasRecBaixadas WHERE NumIntTitulo = ? AND Status <> ? ORDER BY NumParcela", tParcelaReceber.lNumIntDoc, tParcelaReceber.iNumParcela, tParcelaReceber.iStatus, tParcelaReceber.dtDataVencimento, tParcelaReceber.dtDataVencimentoReal, tParcelaReceber.dValor, tParcelaReceber.iCobrador, tParcelaReceber.iCarteiraCobranca, tParcelaReceber.sNumTitCobrador, tParcelaReceber.iProxSeqBaixa, tParcelaReceber.iProxSeqOcorr, tParcelaReceber.iDesconto1Codigo, tParcelaReceber.dtDesconto1Ate, tParcelaReceber.dDesconto1Valor, _
                tParcelaReceber.iDesconto2Codigo, tParcelaReceber.dtDesconto2Ate, tParcelaReceber.dDesconto2Valor, tParcelaReceber.iDesconto3Codigo, tParcelaReceber.dtDesconto3Ate, tParcelaReceber.dDesconto3Valor, tParcelaReceber.iAceite, tParcelaReceber.dValorOriginal, tParcelaReceber.sObservacao, objTituloReceberBaixado.lNumIntDoc, STATUS_EXCLUIDO)
        End If
        If lErro <> AD_SQL_SUCESSO Then Error 58988

        'Tenta ler a primeira Parcela
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 58989

        'Se não encontrou Parcela --> erro
        If lErro = AD_SQL_SEM_DADOS Then Error 58990

    End If

    'Loop de adição de Parcelas à coleção
    Do While lErro <> AD_SQL_SEM_DADOS

        'Adiciona Parcela na coleção
        '###############################################
        'ALTERADO POR WAGNER
        With tParcelaReceber
            colParcelasRecBaixadas.Add .lNumIntDoc, objTituloReceberBaixado.lNumIntDoc, .iNumParcela, .iStatus, .dtDataVencimento, .dtDataVencimentoReal, .dSaldo, .dValor, .iProxSeqBaixa, .iCarteiraCobranca, .iCobrador, .sNumTitCobrador, 0, 0, 0, 0, 0, 0, .iDesconto1Codigo, .dtDesconto1Ate, .dDesconto1Valor, .iDesconto2Codigo, .dtDesconto2Ate, .dDesconto2Valor, .iDesconto3Codigo, .dtDesconto3Ate, .dDesconto3Valor, 0, 0, .iDescontada, .iProxSeqOcorr, .iPrevisao, .sObservacao, .dValorOriginal
        End With
        '###############################################

        'Vai para a próxima Parcela
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 58991

    Loop

    'Fecha comando
    Call Comando_Fechar(lComando)

    ParcelasReceber_Le_Todas = SUCESSO

    Exit Function

Erro_ParcelasReceber_Le_Todas:

    ParcelasReceber_Le_Todas = Err

    Select Case Err

        Case 58985
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 58986, 58987, 58991
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELASREC", Err, objTituloReceberBaixado.lNumIntDoc)

        Case 58988, 58989
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_REC_BAIXADAS", Err, objTituloReceberBaixado.lNumIntDoc)

        Case 58990 'Não encontrou

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148683)

    End Select

    'Fecha o comanodo
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function TitulosRec_Le_Todos(ByVal objTituloReceber As ClassTituloReceber) As Long
'Lê dados de todos os Título a partir de FilialEmpresa, Cliente, Filial, SiglaDocumento, NumTitulo (Baixados e não Baixados)

Dim lErro As Long
Dim lComando As Long
Dim tTituloReceber As typeTituloReceber

On Error GoTo Erro_TitulosRec_Le_Todos

    'Inicializa comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 58992

    tTituloReceber.sObservacao = String(STRING_TITULO_OBSERVACAO, 0)
    tTituloReceber.sCcl = String(STRING_CCL, 0)
    tTituloReceber.sNatureza = String(STRING_NATMOVCTA_CODIGO, 0)

    lErro = Comando_Executar(lComando, "SELECT NumIntDoc, DataEmissao, Status, Saldo, NumParcelas, Valor, ValorIRRF, ValorISS, ISSRetido, ValorINSS, INSSRetido, PercJurosDiarios, PercMulta, Observacao, CondicaoPagto, Saldo, PISRetido, COFINSRetido, CSLLRetido, Moeda, Ccl, Natureza, CpoGenerico1, ReajustePeriodicidade, ReajusteBase, ReajustadoAte FROM TitulosRec WHERE FilialEmpresa = ? AND Cliente = ? AND Filial = ? AND SiglaDocumento = ? AND NumTitulo = ? AND Status <> ? ORDER BY DataEmissao DESC", _
        tTituloReceber.lNumIntDoc, tTituloReceber.dtDataEmissao, tTituloReceber.iStatus, tTituloReceber.dSaldo, tTituloReceber.iNumParcelas, tTituloReceber.dValor, tTituloReceber.dValorIRRF, tTituloReceber.dValorISS, tTituloReceber.dISSRetido, tTituloReceber.dValorINSS, tTituloReceber.iINSSRetido, tTituloReceber.dPercJurosDiario, tTituloReceber.dPercMulta, tTituloReceber.sObservacao, tTituloReceber.iCondicaoPagto, tTituloReceber.dSaldo, tTituloReceber.dPISRetido, tTituloReceber.dCOFINSRetido, tTituloReceber.dCSLLRetido, tTituloReceber.iMoeda, tTituloReceber.sCcl, tTituloReceber.sNatureza, tTituloReceber.lCpoGenerico1, tTituloReceber.iReajustePeriodicidade, tTituloReceber.dtReajusteBase, tTituloReceber.dtReajustadoAte, objTituloReceber.iFilialEmpresa, objTituloReceber.lCliente, objTituloReceber.iFilial, objTituloReceber.sSiglaDocumento, objTituloReceber.lNumTitulo, STATUS_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then Error 58993

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 58994

    If lErro = AD_SQL_SEM_DADOS Then

        lErro = Comando_Executar(lComando, "SELECT NumIntDoc, DataEmissao, Status, Saldo, NumParcelas, Valor, ValorIRRF, ValorISS, ISSRetido, ValorINSS, INSSRetido, PercJurosDiarios, PercMulta, Observacao, CondicaoPagto, Saldo, PISRetido, COFINSRetido, CSLLRetido, Moeda, Ccl, Natureza, CpoGenerico1, ReajustePeriodicidade, ReajusteBase, ReajustadoAte FROM TitulosRecBaixados WHERE FilialEmpresa = ? AND Cliente = ? AND Filial = ? AND SiglaDocumento = ? AND NumTitulo = ? AND Status <> ? ORDER BY DataEmissao DESC", _
            tTituloReceber.lNumIntDoc, tTituloReceber.dtDataEmissao, tTituloReceber.iStatus, tTituloReceber.dSaldo, tTituloReceber.iNumParcelas, tTituloReceber.dValor, tTituloReceber.dValorIRRF, tTituloReceber.dValorISS, tTituloReceber.dISSRetido, tTituloReceber.dValorINSS, tTituloReceber.iINSSRetido, tTituloReceber.dPercJurosDiario, tTituloReceber.dPercMulta, tTituloReceber.sObservacao, tTituloReceber.iCondicaoPagto, tTituloReceber.dSaldo, tTituloReceber.dPISRetido, tTituloReceber.dCOFINSRetido, tTituloReceber.dCSLLRetido, tTituloReceber.iMoeda, tTituloReceber.sCcl, tTituloReceber.sNatureza, tTituloReceber.lCpoGenerico1, tTituloReceber.iReajustePeriodicidade, tTituloReceber.dtReajusteBase, tTituloReceber.dtReajustadoAte, objTituloReceber.iFilialEmpresa, objTituloReceber.lCliente, objTituloReceber.iFilial, objTituloReceber.sSiglaDocumento, objTituloReceber.lNumTitulo, STATUS_EXCLUIDO)
        If lErro <> AD_SQL_SUCESSO Then Error 58995

        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 58996

        If lErro = AD_SQL_SEM_DADOS Then Error 58997

    End If

    tTituloReceber.iFilialEmpresa = objTituloReceber.iFilialEmpresa
    tTituloReceber.lNumTitulo = objTituloReceber.lNumTitulo
    tTituloReceber.sSiglaDocumento = objTituloReceber.sSiglaDocumento
    tTituloReceber.lCliente = objTituloReceber.lCliente
    tTituloReceber.iFilial = objTituloReceber.iFilial

    Call TituloReceber_MoverCamposObj(objTituloReceber, tTituloReceber)

    'Libera comando
    Call Comando_Fechar(lComando)

    TitulosRec_Le_Todos = SUCESSO

    Exit Function

Erro_TitulosRec_Le_Todos:

    TitulosRec_Le_Todos = Err

    Select Case Err

        Case 58992
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 58993, 58994
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TITULOSREC2", Err, objTituloReceber.iFilialEmpresa, objTituloReceber.lCliente, objTituloReceber.iFilial, objTituloReceber.sSiglaDocumento, objTituloReceber.lNumTitulo)

        Case 58995, 58996
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TITULOS_REC_BAIXADOS", Err)

        Case 58997
            'Não encontrou. Erro tratado na rotina chamadora

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148684)

    End Select

    'Libera comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function BaixaParcRec_Le_Sequenciais(ByVal lNumIntParcela As Long, ByVal colSequenciais As Collection) As Long

Dim lComando As Long
Dim lErro As Long
Dim iSequencial As Integer

On Error GoTo Erro_BaixaParcRec_Le_Sequenciais

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 60004

    'le a tabela de BaixaParcRec
    lErro = Comando_Executar(lComando, "SELECT Sequencial FROM BaixasParcRec WHERE NumIntParcela = ? AND Status <> ? ORDER BY Sequencial", iSequencial, lNumIntParcela, STATUS_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then Error 60005

    'le o primeiro Sequencial
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60006

    Do While lErro <> AD_SQL_SEM_DADOS

        'coloca o Sequencial lido na coleção
        colSequenciais.Add iSequencial

        'le o proximo Sequencial
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60007

    Loop

    Call Comando_Fechar(lComando)

    BaixaParcRec_Le_Sequenciais = SUCESSO

    Exit Function

Erro_BaixaParcRec_Le_Sequenciais:

    BaixaParcRec_Le_Sequenciais = Err

    Select Case Err

        Case 60004
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 60005, 60006, 60007
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BAIXAPARCREC", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148685)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Private Sub TituloReceber_MoverCamposObj(ByVal objTituloReceber As ClassTituloReceber, tTituloReceber As typeTituloReceber)

    objTituloReceber.lNumIntDoc = tTituloReceber.lNumIntDoc
    objTituloReceber.iFilialEmpresa = tTituloReceber.iFilialEmpresa
    objTituloReceber.lCliente = tTituloReceber.lCliente
    objTituloReceber.iFilial = tTituloReceber.iFilial
    objTituloReceber.sSiglaDocumento = tTituloReceber.sSiglaDocumento
    objTituloReceber.lNumTitulo = tTituloReceber.lNumTitulo
    objTituloReceber.dtDataEmissao = tTituloReceber.dtDataEmissao
    objTituloReceber.iStatus = tTituloReceber.iStatus
    objTituloReceber.dSaldo = tTituloReceber.dSaldo
    objTituloReceber.iNumParcelas = tTituloReceber.iNumParcelas
    objTituloReceber.dValor = tTituloReceber.dValor
    objTituloReceber.dValorIRRF = tTituloReceber.dValorIRRF
    objTituloReceber.dValorISS = tTituloReceber.dValorISS
    objTituloReceber.dISSRetido = tTituloReceber.dISSRetido
    objTituloReceber.dValorINSS = tTituloReceber.dValorINSS
    objTituloReceber.iINSSRetido = tTituloReceber.iINSSRetido
    objTituloReceber.dPercJurosDiario = tTituloReceber.dPercJurosDiario
    objTituloReceber.dPercMulta = tTituloReceber.dPercMulta
    objTituloReceber.sObservacao = tTituloReceber.sObservacao
    objTituloReceber.iCondicaoPagto = tTituloReceber.iCondicaoPagto
    objTituloReceber.dtDataRegistro = tTituloReceber.dtDataRegistro
    objTituloReceber.dPISRetido = tTituloReceber.dPISRetido
    objTituloReceber.dCOFINSRetido = tTituloReceber.dCOFINSRetido
    objTituloReceber.dCSLLRetido = tTituloReceber.dCSLLRetido
    objTituloReceber.iMoeda = tTituloReceber.iMoeda
    objTituloReceber.sCcl = tTituloReceber.sCcl
    objTituloReceber.sNatureza = tTituloReceber.sNatureza
    objTituloReceber.lCpoGenerico1 = tTituloReceber.lCpoGenerico1
    objTituloReceber.iReajustePeriodicidade = tTituloReceber.iReajustePeriodicidade
    objTituloReceber.dtReajusteBase = tTituloReceber.dtReajusteBase
    objTituloReceber.dtReajustadoAte = tTituloReceber.dtReajustadoAte

End Sub

Function ParcelasRec_Le_Todas_NumTitulo(ByVal objTituloReceber As ClassTituloReceber, ByVal objParcelaReceber As ClassParcelaReceber) As Long
'le dados da parcela a receber a partir do numero do titulo e do numero da parcela

Dim lErro As Long
Dim lComando As Long
Dim tParcelaReceber As typeParcelaReceber

On Error GoTo Erro_ParcelasRec_Le_Todas_NumTitulo

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 58998

    tParcelaReceber.sNumTitCobrador = String(STRING_NOSSO_NUMERO, 0)
    tParcelaReceber.sObservacao = String(STRING_OBS_PARC_REC, 0)

    'Seleciona Parcelas vinculadas ao Título
    lErro = Comando_Executar(lComando, "SELECT ParcelasRec.NumIntDoc,  ParcelasRec.Status, ParcelasRec.DataVencimento, ParcelasRec.DataVencimentoReal, ParcelasRec.Valor, ParcelasRec.Cobrador, ParcelasRec.CarteiraCobranca, ParcelasRec.NumTitCobrador, ParcelasRec.ProxSeqBaixa, ParcelasRec.ProxSeqOcorr, ParcelasRec.Desconto1Codigo, ParcelasRec.Desconto1Ate, ParcelasRec.Desconto1Valor, ParcelasRec.Desconto2Codigo, ParcelasRec.Desconto2Ate, ParcelasRec.Desconto2Valor, ParcelasRec.Desconto3Codigo, ParcelasRec.Desconto3Ate, ParcelasRec.Desconto3Valor, ParcelasRec.Aceite, ParcelasRec.NumIntTitulo, ParcelasRec.Saldo, ParcelasRec.Status, ParcelasRec.ValorOriginal, ParcelasRec.Observacao, ParcelasRec.Previsao FROM TitulosRec,ParcelasRec WHERE ParcelasRec.NumIntTitulo = TitulosRec.NumIntDoc AND TitulosRec.FilialEmpresa = ? AND TitulosRec.NumTitulo = ? AND TitulosRec.SiglaDocumento = ? AND ParcelasRec.Status <> ? AND ParcelasRec.NumParcela = ?", _
        tParcelaReceber.lNumIntDoc, tParcelaReceber.iStatus, tParcelaReceber.dtDataVencimento, tParcelaReceber.dtDataVencimentoReal, tParcelaReceber.dValor, tParcelaReceber.iCobrador, tParcelaReceber.iCarteiraCobranca, tParcelaReceber.sNumTitCobrador, tParcelaReceber.iProxSeqBaixa, tParcelaReceber.iProxSeqOcorr, tParcelaReceber.iDesconto1Codigo, tParcelaReceber.dtDesconto1Ate, tParcelaReceber.dDesconto1Valor, tParcelaReceber.iDesconto2Codigo, tParcelaReceber.dtDesconto2Ate, tParcelaReceber.dDesconto2Valor, tParcelaReceber.iDesconto3Codigo, tParcelaReceber.dtDesconto3Ate, tParcelaReceber.dDesconto3Valor, tParcelaReceber.iAceite, tParcelaReceber.lNumIntTitulo, tParcelaReceber.dSaldo, tParcelaReceber.iStatus, tParcelaReceber.dValorOriginal, tParcelaReceber.sObservacao, tParcelaReceber.iPrevisao, objTituloReceber.iFilialEmpresa, objTituloReceber.lNumTitulo, objTituloReceber.sSiglaDocumento, STATUS_EXCLUIDO, objParcelaReceber.iNumParcela)
    If lErro <> AD_SQL_SUCESSO Then Error 58999

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SEM_DADOS And lErro <> AD_SQL_SUCESSO Then Error 60000

    If lErro = AD_SQL_SEM_DADOS Then

        'Seleciona Parcelas vinculadas ao Título
        lErro = Comando_Executar(lComando, "SELECT ParcelasRecBaixadas.NumIntDoc,  ParcelasRecBaixadas.Status, ParcelasRecBaixadas.DataVencimento, ParcelasRecBaixadas.DataVencimentoReal, ParcelasRecBaixadas.Valor, ParcelasRecBaixadas.Cobrador, ParcelasRecBaixadas.CarteiraCobranca, ParcelasRecBaixadas.NumTitCobrador, ParcelasRecBaixadas.ProxSeqBaixa, ParcelasRecBaixadas.ProxSeqOcorr, ParcelasRecBaixadas.Desconto1Codigo, ParcelasRecBaixadas.Desconto1Ate, " & _
            "ParcelasRecBaixadas.Desconto1Valor, ParcelasRecBaixadas.Desconto2Codigo, ParcelasRecBaixadas.Desconto2Ate, ParcelasRecBaixadas.Desconto2Valor, ParcelasRecBaixadas.Desconto3Codigo, ParcelasRecBaixadas.Desconto3Ate, ParcelasRecBaixadas.Desconto3Valor, ParcelasRecBaixadas.Aceite, ParcelasRecBaixadas.NumIntTitulo, ParcelasRecBaixadas.Status, ParcelasRecBaixadas.ValorOriginal, ParcelasRecBaixadas.Observacao FROM TitulosRecBaixados ,ParcelasRecBaixadas WHERE ParcelasRecBaixadas.NumIntTitulo = TitulosRecBaixados.NumIntDoc AND TitulosRecBaixados.FilialEmpresa = ? AND TitulosRecBaixados.NumTitulo = ? AND TitulosRecBaixados.SiglaDocumento = ? AND ParcelasRecBaixadas.Status <> ? AND ParcelasRecBaixadas.NumParcela = ?", _
            tParcelaReceber.lNumIntDoc, tParcelaReceber.iStatus, tParcelaReceber.dtDataVencimento, tParcelaReceber.dtDataVencimentoReal, tParcelaReceber.dValor, tParcelaReceber.iCobrador, tParcelaReceber.iCarteiraCobranca, tParcelaReceber.sNumTitCobrador, tParcelaReceber.iProxSeqBaixa, tParcelaReceber.iProxSeqOcorr, tParcelaReceber.iDesconto1Codigo, tParcelaReceber.dtDesconto1Ate, tParcelaReceber.dDesconto1Valor, tParcelaReceber.iDesconto2Codigo, tParcelaReceber.dtDesconto2Ate, tParcelaReceber.dDesconto2Valor, tParcelaReceber.iDesconto3Codigo, tParcelaReceber.dtDesconto3Ate, tParcelaReceber.dDesconto3Valor, tParcelaReceber.iAceite, tParcelaReceber.lNumIntTitulo, tParcelaReceber.iStatus, tParcelaReceber.dValorOriginal, tParcelaReceber.sObservacao, objTituloReceber.iFilialEmpresa, objTituloReceber.lNumTitulo, objTituloReceber.sSiglaDocumento, STATUS_EXCLUIDO, objParcelaReceber.iNumParcela)
        If lErro <> AD_SQL_SUCESSO Then Error 60001

        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SEM_DADOS And lErro <> AD_SQL_SUCESSO Then Error 60002

        If lErro = AD_SQL_SEM_DADOS Then Error 60003

    End If

    objParcelaReceber.dDesconto1Valor = tParcelaReceber.dDesconto1Valor
    objParcelaReceber.dDesconto2Valor = tParcelaReceber.dDesconto2Valor
    objParcelaReceber.dDesconto3Valor = tParcelaReceber.dDesconto3Valor
    objParcelaReceber.dtDataVencimento = tParcelaReceber.dtDataVencimento
    objParcelaReceber.dtDataVencimentoReal = tParcelaReceber.dtDataVencimentoReal
    objParcelaReceber.dtDesconto1Ate = tParcelaReceber.dtDesconto1Ate
    objParcelaReceber.dtDesconto2Ate = tParcelaReceber.dtDesconto2Ate
    objParcelaReceber.dtDesconto3Ate = tParcelaReceber.dtDesconto3Ate
    objParcelaReceber.dValor = tParcelaReceber.dValor
    objParcelaReceber.iAceite = tParcelaReceber.iAceite
    objParcelaReceber.iCarteiraCobranca = tParcelaReceber.iCarteiraCobranca
    objParcelaReceber.iCobrador = tParcelaReceber.iCobrador
    objParcelaReceber.iDesconto1Codigo = tParcelaReceber.iDesconto1Codigo
    objParcelaReceber.iDesconto2Codigo = tParcelaReceber.iDesconto2Codigo
    objParcelaReceber.iDesconto3Codigo = tParcelaReceber.iDesconto3Codigo
    objParcelaReceber.iProxSeqBaixa = tParcelaReceber.iProxSeqBaixa
    objParcelaReceber.iProxSeqOcorr = tParcelaReceber.iProxSeqOcorr
    objParcelaReceber.iStatus = tParcelaReceber.iStatus
    objParcelaReceber.lNumIntDoc = tParcelaReceber.lNumIntDoc
    objParcelaReceber.lNumIntTitulo = tParcelaReceber.lNumIntTitulo
    objParcelaReceber.sNumTitCobrador = tParcelaReceber.sNumTitCobrador
    objParcelaReceber.dSaldo = tParcelaReceber.dSaldo
    objParcelaReceber.iStatus = tParcelaReceber.iStatus
    objParcelaReceber.dValorOriginal = tParcelaReceber.dValorOriginal
    objParcelaReceber.sObservacao = tParcelaReceber.sObservacao
    objParcelaReceber.iPrevisao = tParcelaReceber.iPrevisao
    
    Call Comando_Fechar(lComando)

    ParcelasRec_Le_Todas_NumTitulo = SUCESSO

    Exit Function

Erro_ParcelasRec_Le_Todas_NumTitulo:

    ParcelasRec_Le_Todas_NumTitulo = Err

    Select Case Err

        Case 58998
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 58999, 60000
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_REC", Err)

        Case 60001, 60002
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_REC_BAIXADAS", Err)

        Case 60003

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148686)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function ParcelaPagar_Le(ByVal objParcelaPagar As ClassParcelaPagar) As Long
'Le os dados da Parcela com o NumIntDoc da Parcela

Dim lErro As Long
Dim lComando As Long
Dim tParcelaPagar As typeParcelaPagar

On Error GoTo Erro_ParcelaPagar_Le

    'Abre o comando
    lComando = Comando_Abrir()
    If lErro <> SUCESSO Then Error 60476
    
    tParcelaPagar.sNossoNumero = String(STRING_NOSSO_NUMERO, 0)
    
    'Seleciona a Parcela com os dados passados
    lErro = Comando_Executar(lComando, "SELECT NumIntTitulo, Status, DataVencimento, DataVencimentoReal, Saldo, Valor, TipoCobranca, Portador, BancoCobrador, ProxSeqBaixa, NossoNumero, NumParcela FROM ParcelasPag WHERE NumIntDoc = ? ", tParcelaPagar.lNumIntTitulo, tParcelaPagar.iStatus, tParcelaPagar.dtDataVencimento, tParcelaPagar.dtDataVencimentoReal, tParcelaPagar.dSaldo, tParcelaPagar.dValor, tParcelaPagar.iTipoCobranca, tParcelaPagar.iPortador, tParcelaPagar.iBancoCobrador, tParcelaPagar.iProxSeqBaixa, tParcelaPagar.sNossoNumero, tParcelaPagar.iNumParcela, objParcelaPagar.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then Error 60477
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60478
    
    'Se não encontrar --> erro
    If lErro = AD_SQL_SEM_DADOS Then Error 60479
        
    'Carrega em objParcelaPagar os dados trazidos
    objParcelaPagar.lNumIntTitulo = tParcelaPagar.lNumIntTitulo
    objParcelaPagar.iStatus = tParcelaPagar.iStatus
    objParcelaPagar.dtDataVencimento = tParcelaPagar.dtDataVencimento
    objParcelaPagar.dtDataVencimentoReal = tParcelaPagar.dtDataVencimentoReal
    objParcelaPagar.dSaldo = tParcelaPagar.dSaldo
    objParcelaPagar.dValor = tParcelaPagar.dValor
    objParcelaPagar.iTipoCobranca = tParcelaPagar.iTipoCobranca
    objParcelaPagar.iPortador = tParcelaPagar.iPortador
    objParcelaPagar.iBancoCobrador = tParcelaPagar.iBancoCobrador
    objParcelaPagar.iProxSeqBaixa = tParcelaPagar.iProxSeqBaixa
    objParcelaPagar.sNossoNumero = tParcelaPagar.sNossoNumero
    objParcelaPagar.iNumParcela = tParcelaPagar.iNumParcela
    
    'Fecha o comando
    Call Comando_Fechar(lComando)
    
    ParcelaPagar_Le = SUCESSO
    
    Exit Function
    
Erro_ParcelaPagar_Le:

    ParcelaPagar_Le = Err
    
    Select Case Err
    
        Case 60476
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
            
        Case 60477, 60478
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELASPAG2", Err)

        Case 60479 'Não encontrou a Parcela, Tratar na Rotina chamadora
       
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148687)
        
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function MovCCI_Pesquisa_Cheque(ByVal objMovContaCorrente As ClassMovContaCorrente) As Long
'Pesquisa a existencia de cheque por conta e numero
'( objMovContaCorrente tem que vir com conta e numero preenchidos. )
'Se for encontrado retorna erro 59082 e preenche a data do cheque mais recente encontrado

Dim lErro As Long
Dim lComando As Long
Dim lNumMovto As Long
Dim lSequencial As Long, dtDataMovimento As Date
Dim dtData As Date, dValor As Double

On Error GoTo Erro_MovCCI_Pesquisa_Cheque
    
    'Abre os comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 59079
        
    objMovContaCorrente.iTipoMeioPagto = Cheque
    lErro = Comando_Executar(lComando, "SELECT DataMovimento FROM MovimentosContaCorrente WHERE CodConta = ? AND TipoMeioPagto = ? AND Numero = ? AND Excluido = ? ORDER BY DataMovimento DESC", dtDataMovimento, objMovContaCorrente.iCodConta, Cheque, objMovContaCorrente.lNumero, NAO_EXCLUIDO)
    If lErro <> SUCESSO Then Error 59080
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 59081
    
    If lErro = AD_SQL_SUCESSO Then
    
        objMovContaCorrente.dtDataMovimento = dtDataMovimento
        Error 59082
        
    End If
    
    'Fecha os comandos
    Call Comando_Fechar(lComando)
    
    MovCCI_Pesquisa_Cheque = SUCESSO

    Exit Function

Erro_MovCCI_Pesquisa_Cheque:

    MovCCI_Pesquisa_Cheque = Err

    Select Case Err

        Case 59079
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 59080, 59081
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCONTACORRENTE", Err)
        
        Case 59082

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148688)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function
    
End Function

Function ConciliacaoBancaria_Obter_Extratos(ByVal iCodConta As Integer, ByVal iNumExtratoIni As Long, ByVal bConciliaExtrato As Boolean, ByVal colExtratos As Collection) As Long
'Busca no BD os Extratos para a conta passada e com as condições passadas.

Dim lErro As Long
Dim iNumExtrato As Integer
Dim lComando As Long
Dim sSelect As String

On Error GoTo Erro_ConciliacaoBancaria_Obter_Extratos

    'Abre o comando
    lComando = Comando_Abrir
    If lComando = 0 Then Error 62310
    
    'Monta o select com dados enviados
    sSelect = "SELECT NumExtrato FROM ExtratosBancarios WHERE CodConta = ? AND NumExtrato >= ? "
    If bConciliaExtrato = False Then
        sSelect = sSelect & " AND Conciliado = " & NAO_CONCILIADO
    End If
    sSelect = sSelect & " ORDER BY NumExtrato "
    
    'Busca no BD os extratos bancarios p\ a conta passada
    lErro = Comando_Executar(lComando, sSelect, iNumExtrato, iCodConta, iNumExtratoIni)
    If lErro <> AD_SQL_SUCESSO Then Error 62311
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 62312
        
    'Para cada extrato encontrado
    Do While lErro <> AD_SQL_SEM_DADOS
        
        'Adiciona o código na coleção de extratos
        colExtratos.Add iNumExtrato
        
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SEM_DADOS And lErro <> AD_SQL_SUCESSO Then Error 62313
    
    Loop
    
    'Fecha o comando
    Call Comando_Fechar(lComando)
    
    ConciliacaoBancaria_Obter_Extratos = SUCESSO
    
    Exit Function
    
Erro_ConciliacaoBancaria_Obter_Extratos:

    ConciliacaoBancaria_Obter_Extratos = Err
    
    Select Case Err
    
        Case 62310
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
            
        Case 62311, 62312, 62313
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_EXTRATO_BCO", Err)
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148689)
            
    End Select

    'Fecha o comando
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function CCI_ObterRelTes(ByVal iCodCCI As Integer, ByVal dtData As Date, dSldIni As Double, alComando() As Long) As Long
'IMPORTANTE: específica para classe ClassRelTes de apoio a execucao de relatorios
'Obtém o saldo inicial da Conta Corrente na data passada como parametro
'ATENCAO: se o lComando vier zerado, será aberto nesta funcao e ficará aberto.

Dim lErro As Long
Dim dtDataSaldoInicial As Date
Dim iIndice As Integer
Dim iAno As Integer
Dim iMes As Integer
Dim dSldIni1 As Double
Dim dSldIni2 As Double
Dim dSldIni3 As Double
Dim sSQL As String
Dim dtData1 As Date

On Error GoTo Erro_CCI_ObterRelTes

    For iIndice = 1 To 4
        If alComando(iIndice) = 0 Then
            alComando(iIndice) = Comando_AbrirExt(GL_lConexaoRel)
            If alComando(iIndice) = 0 Then Error 60737
        End If
    Next

    'obter o saldo inicial na implantacao da conta
    lErro = Comando_Executar(alComando(1), "SELECT DataSaldoInicial, SaldoInicial FROM ContasCorrentesInternas WHERE Codigo = ?", dtDataSaldoInicial, dSldIni, iCodCCI)
    If lErro <> AD_SQL_SUCESSO Then Error 60738
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60739
    
    If lErro = AD_SQL_SEM_DADOS Then Error 60740
    
    If dtData <> DATA_NULA Then
        
        'se a data de inicializacao do produto no estoque for menor que a data final do periodo solicitado
        '==> os valores não estão disponíveis
        If dtDataSaldoInicial <= dtData Then
            
            iAno = Year(dtData)
            
            'obter os totais movimentados até o ano anterior ao inicial
            lErro = Comando_Executar(alComando(2), "SELECT SUM(Cred01+Cred02+Cred03+Cred04+Cred05+Cred06+Cred07+Cred08+Cred09+Cred10+Cred11+Cred12-Deb01-Deb02-Deb03-Deb04-Deb05-Deb06-Deb07-Deb08-Deb09-Deb10-Deb11-Deb12) FROM CCIMov WHERE CodContaCorrenteInterna = ? AND Ano <= ? ", dSldIni1, iCodCCI, iAno - 1)
            If lErro <> AD_SQL_SUCESSO Then Error 60741
    
            lErro = Comando_BuscarPrimeiro(alComando(2))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60742
        
            dSldIni = dSldIni + dSldIni1
        
            iMes = Month(dtData)
        
            'obter os totais movimentados no ano corrente até o mes anterior ao mes da data em questao
            
            If iMes > 1 Then
            
                For iIndice = 1 To iMes - 1
                    sSQL = sSQL + "Cred" + Format(iIndice, "00") + "-Deb" + Format(iIndice, "00") + "+"
                Next
            
                sSQL = left(sSQL, Len(sSQL) - 1)
            
                lErro = Comando_Executar(alComando(3), "SELECT " + sSQL + " FROM CCIMov WHERE CodContaCorrenteInterna = ? AND Ano = ? ", dSldIni2, iCodCCI, iAno)
                If lErro <> AD_SQL_SUCESSO Then Error 60743
    
                lErro = Comando_BuscarPrimeiro(alComando(3))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60744
        
                dSldIni = dSldIni + dSldIni2
        
            End If
        
            dtData1 = CDate("1/" + CStr(iMes) + "/" + CStr(iAno))
        
            lErro = Comando_Executar(alComando(4), "SELECT SUM(Cred-Deb) FROM CCIMovDia WHERE CodContaCorrenteInterna = ? AND Data >= ? AND Data < ?", dSldIni3, iCodCCI, dtData1, dtData)
            If lErro <> AD_SQL_SUCESSO Then Error 60745
    
            lErro = Comando_BuscarPrimeiro(alComando(4))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60746
        
            dSldIni = dSldIni + dSldIni3
            
        End If
    
    End If
    
    CCI_ObterRelTes = SUCESSO

    Exit Function

Erro_CCI_ObterRelTes:

    CCI_ObterRelTes = Err

    Select Case Err

        Case 60737
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 60738, 60739
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONTASCORRENTESINTERNAS1", Err, iCodCCI)

        Case 60740
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CONTACORRENTEINTERNA_NAO_CADASTRADA", Err, iCodCCI)

        Case 60741, 60742, 60743, 60744
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CCIMOV", Err, iCodCCI)

        Case 60745, 60746
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CCIMOVDIA2", Err, iCodCCI)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148690)

    End Select

    Exit Function
    
End Function

Function CCI_ObterRelTesAplic(ByVal iCodCCI As Integer, ByVal dtData As Date, dSldAplic As Double, alComando() As Long) As Long
'IMPORTANTE: específica para classe ClassRelTes de apoio a execucao de relatorios
'Obtém o saldo de aplicações associadas à Conta Corrente na data passada como parametro
'ATENCAO: se o lComando vier zerado, será aberto nesta funcao e ficará aberto.

Dim lErro As Long
Dim dtDataSaldoInicial As Date
Dim iIndice As Integer
Dim iAno As Integer
Dim iMes As Integer
Dim dSldAplic1 As Double
Dim dSldAplic2 As Double
Dim dSldAplic3 As Double
Dim sSQL As String
Dim dtData1 As Date

On Error GoTo Erro_CCI_ObterRelTesAplic

    For iIndice = 1 To 3
        If alComando(iIndice) = 0 Then
            alComando(iIndice) = Comando_AbrirExt(GL_lConexaoRel)
            If alComando(iIndice) = 0 Then Error 60749
        End If
    Next

    iAno = Year(dtData)
    
    'obter os totais aplicados até o ano anterior ao ano da data em questao
    lErro = Comando_Executar(alComando(1), "SELECT SUM(Aplic01+Aplic02+Aplic03+Aplic04+Aplic05+Aplic06+Aplic07+Aplic08+Aplic09+Aplic10+Aplic11+Aplic12) FROM CCIMov WHERE CodContaCorrenteInterna = ? AND Ano <= ? ", dSldAplic1, iCodCCI, iAno - 1)
    If lErro <> AD_SQL_SUCESSO Then Error 60750

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60751

    dSldAplic = dSldAplic1

    iMes = Month(dtData)

    'obter os totais aplicados no ano corrente até o mes anterior ao mes da data em questao
    
    If iMes > 1 Then
    
        For iIndice = 1 To iMes - 1
            sSQL = sSQL + "Aplic" + Format(iIndice, "00") + "+"
        Next
    
        sSQL = left(sSQL, Len(sSQL) - 1)
    
        lErro = Comando_Executar(alComando(2), "SELECT " + sSQL + " FROM CCIMov WHERE CodContaCorrenteInterna = ? AND Ano = ? ", dSldAplic2, iCodCCI, iAno)
        If lErro <> AD_SQL_SUCESSO Then Error 60752

        lErro = Comando_BuscarPrimeiro(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60753

        dSldAplic = dSldAplic + dSldAplic2

    End If

    dtData1 = CDate("1/" + CStr(iMes) + "/" + CStr(iAno))

    lErro = Comando_Executar(alComando(3), "SELECT SUM(Aplic) FROM CCIMovDia WHERE CodContaCorrenteInterna = ? AND Data >= ? AND Data <= ?", dSldAplic3, iCodCCI, dtData1, dtData)
    If lErro <> AD_SQL_SUCESSO Then Error 60754

    lErro = Comando_BuscarPrimeiro(alComando(3))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60755

    dSldAplic = dSldAplic + dSldAplic3
        
    CCI_ObterRelTesAplic = SUCESSO

    Exit Function

Erro_CCI_ObterRelTesAplic:

    CCI_ObterRelTesAplic = Err

    Select Case Err

        Case 60749
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 60750, 60751, 60752, 60753
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CCIMOV", Err, iCodCCI)

        Case 60754, 60755
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CCIMOVDIA2", Err, iCodCCI)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148691)

    End Select

    Exit Function
    
End Function

Function Fornecedor_Le_SaldoPagAntec(ByVal lFornecedor As Long, dSaldosAntecipados As Double, ByVal lComando As Long) As Long
'Lê os Pagamentos Antecipados para o Fornecedor passado
'IMPORTANTE: Caso o lComando venha zerado ele será aberto e não será fechado.

Dim lErro As Long

On Error GoTo Erro_Fornecedor_Le_SaldoPagAntec
    
    'Abre o Comando se estiver zerado
    If lComando = 0 Then
        lComando = Comando_AbrirExt(GL_lConexaoRel)
        If lComando = 0 Then Error 58601
    End If
    
    lErro = Comando_Executar(lComando, "SELECT SUM(SaldoNaoApropriado) FROM PagtosAntecipados WHERE Excluido <> ? AND Fornecedor = ? ", dSaldosAntecipados, ANTECIPPAG_EXCLUIDO, lFornecedor)
    If lErro <> AD_SQL_SUCESSO Then Error 58602

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 58603

    If lErro = AD_SQL_SEM_DADOS Then Error 58604
    
    Fornecedor_Le_SaldoPagAntec = SUCESSO
    
    Exit Function
    
Erro_Fornecedor_Le_SaldoPagAntec:
    
    Fornecedor_Le_SaldoPagAntec = Err
    
    Select Case Err
        
        Case 58601
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 58602, 58603
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TABELA", Err, "PagtosAntecipados")
        
        Case 58604 'Não Encontrou
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148692)

    End Select
    
    Call Comando_Fechar(lComando)
        
    Exit Function

End Function

Function Fornecedor_Le_SaldoCreditos(ByVal lFornecedor As Long, dSaldoCredito As Double, ByVal lComando As Long) As Long
'Lê os Saldo de Créditos para o Fornecedor passado
'IMPORTANTE: Caso o lComando venha zerado ele será aberto e não será fechado.

Dim lErro As Long

On Error GoTo Erro_Fornecedor_Le_SaldoCreditos
    
    'Abre o Comando se estiver zerado
    If lComando = 0 Then
        lComando = Comando_AbrirExt(GL_lConexaoRel)
        If lComando = 0 Then Error 58608
    End If
    
    lErro = Comando_Executar(lComando, "SELECT SUM(Saldo) FROM CreditosPagForn WHERE Status <> ? AND Fornecedor = ? ", dSaldoCredito, STATUS_EXCLUIDO, lFornecedor)
    If lErro <> AD_SQL_SUCESSO Then Error 58609

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 58610

    If lErro = AD_SQL_SEM_DADOS Then Error 58611
    
    Fornecedor_Le_SaldoCreditos = SUCESSO
    
    Exit Function
    
Erro_Fornecedor_Le_SaldoCreditos:
    
    Fornecedor_Le_SaldoCreditos = Err
    
    Select Case Err
        
        Case 58608
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 58609, 58610
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TABELA", Err, "CreditosPagForn")
        
        Case 58611 'Não Encontrou
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148693)

    End Select
            
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function Fornecedor_Le_SaldoPagAntecTotal(ByVal lFornInicial As Long, ByVal lFornFinal As Long, dSaldosAntecipadosTotal As Double, ByVal lComando As Long) As Long
'Lê o Total Pagamentos Antecipados para todos os Fornecedores
'IMPORTANTE: Caso o lComando venha zerado ele será aberto e não será fechado.

Dim lErro As Long

On Error GoTo Erro_Fornecedor_Le_SaldoPagAntecTotal
    
    'Abre o Comando se estiver zerado
    If lComando = 0 Then
        lComando = Comando_AbrirExt(GL_lConexaoRel)
        If lComando = 0 Then Error 58623
    End If
    
    'Preenche o Filtro Inicial e Final do Fornecedor caso não venha Preenchido
    If lFornInicial = 0 Then lFornInicial = 1
    If lFornFinal = 0 Then lFornFinal = 999999999
    
    lErro = Comando_Executar(lComando, "SELECT SUM(SaldoNaoApropriado) FROM PagtosAntecipados WHERE Fornecedor >= ? AND Fornecedor <= ? AND Excluido <> ? ", dSaldosAntecipadosTotal, lFornInicial, lFornFinal, ANTECIPPAG_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then Error 58624

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 58625
    
    Fornecedor_Le_SaldoPagAntecTotal = SUCESSO
    
    Exit Function
    
Erro_Fornecedor_Le_SaldoPagAntecTotal:
    
    Fornecedor_Le_SaldoPagAntecTotal = Err
    
    Select Case Err
        
        Case 58623
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 58624, 58625
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TABELA", Err, "PagtosAntecipados")
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148694)

    End Select
    
    Call Comando_Fechar(lComando)
        
    Exit Function

End Function

Function Fornecedor_Le_SaldoCreditosTotal(ByVal lFornInicial As Long, ByVal lFornFinal As Long, dSaldoCreditoTotal As Double, ByVal lComando As Long) As Long
'Lê o Total dos Saldo de Créditos para Todos os Fornecedores
'IMPORTANTE: Caso o lComando venha zerado ele será aberto e não será fechado.

Dim lErro As Long

On Error GoTo Erro_Fornecedor_Le_SaldoCreditosTotal
    
    'Abre o Comando se estiver zerado
    If lComando = 0 Then
        lComando = Comando_AbrirExt(GL_lConexaoRel)
        If lComando = 0 Then Error 58626
    End If
    
    'Preenche o Filtro Inicial e Final do Fornecedor caso não venha Preenchido
    If lFornInicial = 0 Then lFornInicial = 1
    If lFornFinal = 0 Then lFornFinal = 999999999
    
    lErro = Comando_Executar(lComando, "SELECT SUM(Saldo) FROM CreditosPagForn WHERE Fornecedor >= ? AND Fornecedor <= ? AND Status <> ? ", dSaldoCreditoTotal, lFornInicial, lFornFinal, STATUS_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then Error 58627

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 58628

    Fornecedor_Le_SaldoCreditosTotal = SUCESSO
    
    Exit Function
    
Erro_Fornecedor_Le_SaldoCreditosTotal:
    
    Fornecedor_Le_SaldoCreditosTotal = Err
    
    Select Case Err
        
        Case 58626
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 58627, 58628
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TABELA", Err, "CreditosPagForn")
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148695)

    End Select
            
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function ComissaoObterDados_NF(ByVal lNumIntDoc As Long, lNumeroNotaFiscal As Long, dtData As Date, sNomeRedCli As String, lNumeroPV As Long, lComando As Long, sPedidoCliente As String) As Long 'Wagner - Tirado Byval de lComando
'    Passado: O Número Interno Da Nota e Devolve O Número, a data da Nota Fiscal, O Nome Reduzido do Cliente, O numero do PedidoVenda

Dim lErro As Long
Dim iFilialPedido As Integer
Dim alComando(1 To 2) As Long
Dim iIndice As Integer

On Error GoTo Erro_ComissaoObterDados_NF

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_AbrirExt(GL_lConexaoRel)
        If alComando(iIndice) = 0 Then gError 133096
    Next

    If lComando = 0 Then
        lComando = Comando_AbrirExt(GL_lConexaoRel)
        If lComando = 0 Then gError 59107
    End If
    
    lNumeroPV = 0
    sPedidoCliente = ""
    
    sNomeRedCli = String(STRING_CLIENTE_NOME_REDUZIDO, 0)
    
    lErro = Comando_Executar(lComando, "SELECT Clientes.NomeReduzido, NFiscal.NumNotaFiscal, NFiscal.DataEmissao, NFiscal.NumPedidoVenda, NFiscal.FilialPedido FROM Clientes, NFiscal WHERE Clientes.Codigo = NFiscal.Cliente AND NFiscal.NumIntDoc = ?", _
        sNomeRedCli, lNumeroNotaFiscal, dtData, lNumeroPV, iFilialPedido, lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 59112
    
    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 59113
    If lErro <> AD_SQL_SUCESSO Then gError 59114
    
    If lNumeroPV <> 0 Then
    
        sPedidoCliente = String(STRING_NUM_PEDIDO_TERC, 0)
    
        lErro = Comando_Executar(lComando, "SELECT PedidoCliente FROM PedidosDeVenda WHERE FilialEmpresa = ? AND Codigo = ?", _
            sPedidoCliente, iFilialPedido, lNumeroPV)
        If lErro <> AD_SQL_SUCESSO Then gError 133097
        
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 133098
        
        If lErro <> AD_SQL_SUCESSO Then
    
            sPedidoCliente = String(STRING_NUM_PEDIDO_TERC, 0)
        
            lErro = Comando_Executar(lComando, "SELECT PedidoCliente FROM PedidosDeVendaBaixados WHERE FilialEmpresa = ? AND Codigo = ?", _
                sPedidoCliente, iFilialPedido, lNumeroPV)
            If lErro <> AD_SQL_SUCESSO Then gError 133099
            
            lErro = Comando_BuscarProximo(lComando)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 133100
    
        End If
    
    End If
    
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    ComissaoObterDados_NF = SUCESSO
     
    Exit Function
    
Erro_ComissaoObterDados_NF:

    ComissaoObterDados_NF = gErr
     
    Select Case gErr
          
        Case 59107, 133096
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 59112, 59113, 59114, 133097 To 133100
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148696)
     
    End Select
     
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
     
    Exit Function

End Function

Function ComissaoObterDados_ParcelaRec(ByVal lNumIntDoc As Long, lNumeroTitulo As Long, iNumeroParcela As Integer, sSiglaDocumento As String, dtData As Date, sNomeRedCli As String, lNumIntTit As Long, dtDataGeracao As Date, lComando As Long) As Long 'Wagner - Tirado Byval de lComando
'    Passado: O Número Interno Da Parcela e Devolve Nome do Cliente, Sigla do Documento, Numero do Titulo, Numero da Parcela, Numero do Pedido, Data do Titulo

Dim lErro As Long

On Error GoTo Erro_ComissaoObterDados_ParcelaRec

    If lComando = 0 Then
        
        lComando = Comando_AbrirExt(GL_lConexaoRel)
        If lComando = 0 Then Error 59108
        
    End If
    
    sSiglaDocumento = String(STRING_SIGLA_DOCUMENTO, 0)
    sNomeRedCli = String(STRING_CLIENTE_NOME_REDUZIDO, 0)
    
    If dtDataGeracao = DATA_NULA Then
    
        lErro = Comando_Executar(lComando, "SELECT Clientes.NomeReduzido, ParcelasRec.NumParcela, TitulosRec.SiglaDocumento, TitulosRec.DataEmissao, TitulosRec.NumTitulo, TitulosRec.NumIntDoc FROM TitulosRec, ParcelasRec, Clientes WHERE Clientes.Codigo = TitulosRec.Cliente AND TitulosRec.NumIntDoc = ParcelasRec.NumIntTitulo AND ParcelasRec.NumIntDoc = ?", _
            sNomeRedCli, iNumeroParcela, sSiglaDocumento, dtData, lNumeroTitulo, lNumIntTit, lNumIntDoc)
        If lErro <> AD_SQL_SUCESSO Then Error 59115
        
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 59116
        If lErro <> AD_SQL_SUCESSO Then
        
            lErro = Comando_Executar(lComando, "SELECT Clientes.NomeReduzido, ParcelasRecBaixadas.NumParcela, TitulosRecBaixados.SiglaDocumento, TitulosRecBaixados.DataEmissao, TitulosRecBaixados.NumTitulo, TitulosRecBaixados.NumIntDoc FROM TitulosRecBaixados, ParcelasRecBaixadas, Clientes WHERE Clientes.Codigo = TitulosRecBaixados.Cliente AND TitulosRecBaixados.NumIntDoc = ParcelasRecBaixadas.NumIntTitulo AND ParcelasRecBaixadas.NumIntDoc = ?", _
                sNomeRedCli, iNumeroParcela, sSiglaDocumento, dtData, lNumeroTitulo, lNumIntTit, lNumIntDoc)
            If lErro <> AD_SQL_SUCESSO Then Error 59132
            
            lErro = Comando_BuscarProximo(lComando)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 59133
            If lErro <> AD_SQL_SUCESSO Then Error 59134
                
        End If
    
    Else
    
        lErro = Comando_Executar(lComando, "SELECT Clientes.NomeReduzido, ParcelasRecBaixadas.NumParcela, TitulosRecBaixados.SiglaDocumento, TitulosRecBaixados.DataEmissao, TitulosRecBaixados.NumTitulo, TitulosRecBaixados.NumIntDoc FROM TitulosRecBaixados, ParcelasRecBaixadas, Clientes WHERE Clientes.Codigo = TitulosRecBaixados.Cliente AND TitulosRecBaixados.NumIntDoc = ParcelasRecBaixadas.NumIntTitulo AND ParcelasRecBaixadas.NumIntDoc = ?", _
            sNomeRedCli, iNumeroParcela, sSiglaDocumento, dtData, lNumeroTitulo, lNumIntTit, lNumIntDoc)
        If lErro <> AD_SQL_SUCESSO Then Error 59135
        
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 59136
        If lErro <> AD_SQL_SUCESSO Then
        
            lErro = Comando_Executar(lComando, "SELECT Clientes.NomeReduzido, ParcelasRec.NumParcela, TitulosRec.SiglaDocumento, TitulosRec.DataEmissao, TitulosRec.NumTitulo, TitulosRec.NumIntDoc FROM TitulosRec, ParcelasRec, Clientes WHERE Clientes.Codigo = TitulosRec.Cliente AND TitulosRec.NumIntDoc = ParcelasRec.NumIntTitulo AND ParcelasRec.NumIntDoc = ?", _
                sNomeRedCli, iNumeroParcela, sSiglaDocumento, dtData, lNumeroTitulo, lNumIntTit, lNumIntDoc)
            If lErro <> AD_SQL_SUCESSO Then Error 59137
            
            lErro = Comando_BuscarProximo(lComando)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 59138
            If lErro <> AD_SQL_SUCESSO Then Error 59139
                
        End If
    
    End If
    
    ComissaoObterDados_ParcelaRec = SUCESSO
     
    Exit Function
    
Erro_ComissaoObterDados_ParcelaRec:

    ComissaoObterDados_ParcelaRec = Err
     
    Select Case Err
          
        Case 59108
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
            
        Case 59115, 59116, 59132, 59133, 59135 To 59138
        
        Case 59134, 59139
                
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148697)
     
    End Select
     
    Exit Function

End Function

Function ComissaoObterDados_DebitosRecCli(ByVal lNumIntDoc As Long, lNumeroTitulo As Long, sSiglaDocumento As String, dtData As Date, sNomeRedCli As String, lComando As Long) As Long 'Wagner - Tirado Byval de lComando
'        Passado: O Número Interno Do Debito e Devolve Nome do Cliente, Sigla do Documento, Numero do Titulo, Data do Debito

Dim lErro As Long

On Error GoTo Erro_ComissaoObterDados_DebitosRecCli

    If lComando = 0 Then
        
        lComando = Comando_AbrirExt(GL_lConexaoRel)
        If lComando = 0 Then Error 59109
        
    End If
    
    sSiglaDocumento = String(STRING_SIGLA_DOCUMENTO, 0)
    sNomeRedCli = String(STRING_CLIENTE_NOME_REDUZIDO, 0)
    
    lErro = Comando_Executar(lComando, "SELECT Clientes.NomeReduzido, DebitosRecCli.NumTitulo, DebitosRecCli.DataEmissao, DebitosRecCli.SiglaDocumento FROM DebitosRecCli, Clientes WHERE Clientes.Codigo = DebitosRecCli.Cliente AND DebitosRecCli.NumIntDoc = ?", _
        sNomeRedCli, lNumeroTitulo, dtData, sSiglaDocumento, lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then Error 59118
    
    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 59119
    If lErro <> AD_SQL_SUCESSO Then Error 59120
    
    ComissaoObterDados_DebitosRecCli = SUCESSO
     
    Exit Function
    
Erro_ComissaoObterDados_DebitosRecCli:

    ComissaoObterDados_DebitosRecCli = Err
     
    Select Case Err
          
        Case 59109
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
            
        Case 59118, 59119
        
        Case 59120
            '??? completar
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148698)
     
    End Select
     
    Exit Function

End Function

Function ComissaoObterDados_TituloRec(ByVal lNumIntDoc As Long, lNumeroTitulo As Long, sSiglaDocumento As String, dtData As Date, sNomeRedCli As String, lComando As Long) As Long  'Wagner - Tirado Byval de lComando
'    Passado: O Número Interno Do Titulo e Devolve Nome do Cliente, Sigla do Documento, Numero do Titulo, Numero do Pedido, Data do Titulo

Dim lErro As Long

On Error GoTo Erro_ComissaoObterDados_TituloRec

    If lComando = 0 Then
        
        lComando = Comando_AbrirExt(GL_lConexaoRel)
        If lComando = 0 Then Error 59110
        
    End If
    
    sSiglaDocumento = String(STRING_SIGLA_DOCUMENTO, 0)
    sNomeRedCli = String(STRING_CLIENTE_NOME_REDUZIDO, 0)
    
    lErro = Comando_Executar(lComando, "SELECT Clientes.NomeReduzido, TitulosRec.SiglaDocumento, TitulosRec.DataEmissao, TitulosRec.NumTitulo FROM TitulosRec, Clientes WHERE Clientes.Codigo = TitulosRec.Cliente AND TitulosRec.NumIntDoc = ?", _
        sNomeRedCli, sSiglaDocumento, dtData, lNumeroTitulo, lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then Error 59121
    
    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 59122
    If lErro <> AD_SQL_SUCESSO Then
    
        lErro = Comando_Executar(lComando, "SELECT Clientes.NomeReduzido, TitulosRecBaixados.SiglaDocumento, TitulosRecBaixados.DataEmissao, TitulosRecBaixados.NumTitulo FROM TitulosRecBaixados, Clientes WHERE Clientes.Codigo = TitulosRecBaixados.Cliente AND TitulosRecBaixados.NumIntDoc = ?", _
            sNomeRedCli, sSiglaDocumento, dtData, lNumeroTitulo, lNumIntDoc)
        If lErro <> AD_SQL_SUCESSO Then Error 59140
        
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 59141
        If lErro <> AD_SQL_SUCESSO Then Error 59142
    
    End If
    
    ComissaoObterDados_TituloRec = SUCESSO
     
    Exit Function
    
Erro_ComissaoObterDados_TituloRec:

    ComissaoObterDados_TituloRec = Err
     
    Select Case Err
          
        Case 59110
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
            
        Case 59121, 59122, 59140, 59141
        
        Case 59142
            '??? completar
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148699)
     
    End Select
     
    Exit Function

End Function

Function ComissaoObterDados_NumPV_NFTitRec(ByVal lNumIntTitRec As Long, lNumeroPV As Long, lComando As Long, sPedidoCliente As String) As Long  'Wagner - Tirado Byval de lComando
'obtem o numero do pedido de vendas associado a uma nf associada a um titulo a receber identificado por lNumIntTitRec
'se o titulo nao estiver associado a nenhuma nf ou esta nao estiver vinculada a nenhum PV, lNumeroPV retorna zero e o retorno da funcao é SUCESSO.

Dim lErro As Long
Dim iFilialPedido As Long
Dim alComando(1 To 2) As Long
Dim iIndice As Integer

On Error GoTo Erro_ComissaoObterDados_NumPV_NFTitRec

    lNumeroPV = 0
    
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_AbrirExt(GL_lConexaoRel)
        If alComando(iIndice) = 0 Then gError 133105
    Next
    
    If lComando = 0 Then
        
        lComando = Comando_AbrirExt(GL_lConexaoRel)
        If lComando = 0 Then gError 59111
        
    End If
    
    lErro = Comando_Executar(lComando, "SELECT NFiscal.NumPedidoVenda, FilialPedido FROM NFiscal WHERE NFiscal.ClasseDocCPR = ? AND NFiscal.NumIntDocCPR = ?", _
        lNumeroPV, iFilialPedido, CPR_TITULO_RECEBER, lNumIntTitRec)
    If lErro <> AD_SQL_SUCESSO Then gError 59124
    
    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 59125
    
    If lNumeroPV <> 0 Then
    
        sPedidoCliente = String(STRING_NUM_PEDIDO_TERC, 0)
    
        lErro = Comando_Executar(lComando, "SELECT PedidoCliente FROM PedidosDeVenda WHERE FilialEmpresa = ? AND Codigo = ?", _
            sPedidoCliente, iFilialPedido, lNumeroPV)
        If lErro <> AD_SQL_SUCESSO Then gError 133101
        
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 133102
        
        If lErro <> AD_SQL_SUCESSO Then
    
            sPedidoCliente = String(STRING_NUM_PEDIDO_TERC, 0)
        
            lErro = Comando_Executar(lComando, "SELECT PedidoCliente FROM PedidosDeVendaBaixados WHERE FilialEmpresa = ? AND Codigo = ?", _
                sPedidoCliente, iFilialPedido, lNumeroPV)
            If lErro <> AD_SQL_SUCESSO Then gError 133103
            
            lErro = Comando_BuscarProximo(lComando)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 133104
    
        End If
    
    End If
    
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    ComissaoObterDados_NumPV_NFTitRec = SUCESSO
     
    Exit Function
    
Erro_ComissaoObterDados_NumPV_NFTitRec:

    ComissaoObterDados_NumPV_NFTitRec = gErr
     
    Select Case gErr
          
        Case 59111, 133105
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 59124, 59125, 133101 To 133105
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148700)
     
    End Select
     
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
     
    Exit Function

End Function

Function BancoInfo_Le(ByVal iCodBanco As Integer, ByVal colBancoInfo As Collection) As Long

Dim objBancoInfo As ClassBancoInfo
Dim lErro As Long
Dim tBancoInfo As typeBancoInfo
Dim lComando As Long

On Error GoTo Erro_BancoInfo_Le

    'ABre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 51983

    tBancoInfo.sInfoDescricao = String(STRING_BANCOINFO_DESCRICAO, 0)
    tBancoInfo.sInfoTexto = String(STRING_BANCOINFO_TEXTO, 0)

    'BUsca as informações do banco no BD
    lErro = Comando_Executar(lComando, "SELECT InfoCodigo,InfoTexto,InfoDescricao,InfoNivel FROM BancosInfo WHERE CodBanco = ? ORDER BY InfoCodigo", tBancoInfo.iInfoCodigo, tBancoInfo.sInfoTexto, tBancoInfo.sInfoDescricao, tBancoInfo.iInfoNivel, iCodBanco)
    If lErro <> AD_SQL_SUCESSO Then Error 51984

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 51985

    'Para cada informacao lida
    Do While lErro = AD_SQL_SUCESSO

        Set objBancoInfo = New ClassBancoInfo
        'Carrega os dados lidos no obj
        objBancoInfo.iCodBanco = iCodBanco
        objBancoInfo.iInfoNivel = tBancoInfo.iInfoNivel
        objBancoInfo.iInfoCodigo = tBancoInfo.iInfoCodigo
        objBancoInfo.sInfoTexto = tBancoInfo.sInfoTexto
        objBancoInfo.sInfoDescricao = tBancoInfo.sInfoDescricao
        'Adiciona na coleção
        colBancoInfo.Add objBancoInfo

        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 51986

    Loop

    'Fecha o comando
    Call Comando_Fechar(lComando)

    BancoInfo_Le = SUCESSO

    Exit Function

Erro_BancoInfo_Le:

    Select Case Err

        Case 51983, 51984, 51985, 51986

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148701)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function CarteiraCobradorInfo_Le(ByVal iCodCobrador As Integer, ByVal iCodCarteiraCobrador As Integer, ByVal colCarteiraCobradorInfo As Collection) As Long
'Lê as informações bancárias de cobrança eletrônica para o cobrador passado

Dim lErro As Long
Dim lComando As Long
Dim objCodigoTexto As AdmCodigoNome
Dim iCodInfo As Integer
Dim sValorInfo As String

On Error GoTo Erro_CarteiraCobradorInfo_Le

    'Abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 51620

    sValorInfo = String(STRING_BANCOINFO_VALOR, 0)

    'Busca as informações no BD
    lErro = Comando_Executar(lComando, "SELECT CodInformacao,ValorInformacao FROM CarteiraCobradorInfo WHERE CodCobrador=? AND CodCarteira = ? ORDER BY CodInformacao", iCodInfo, sValorInfo, iCodCobrador, iCodCarteiraCobrador)
    If lErro <> AD_SQL_SUCESSO Then Error 51230

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 51150

    'Enquanto encontrar
    Do While lErro = AD_SQL_SUCESSO

        Set objCodigoTexto = New AdmCodigoNome
        'Preenche um obj com os dados lidos
        objCodigoTexto.iCodigo = iCodInfo
        objCodigoTexto.sNome = sValorInfo

        'Armazena os dados na coleção de informações
        colCarteiraCobradorInfo.Add objCodigoTexto

        'Busca a próxima informação no BD
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 51500

    Loop

    Call Comando_Fechar(lComando)

    CarteiraCobradorInfo_Le = SUCESSO

    Exit Function

Erro_CarteiraCobradorInfo_Le:

    CarteiraCobradorInfo_Le = Err

    Select Case Err

        Case 51620
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 51150, 51230, 51500
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CARTEIRACOBRADORINFO_NAO_CADASTRADA", Err, iCodCobrador, iCodCarteiraCobrador)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148702)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

'Function CarteiraCobradorInfo_Le(iCodCobrador As Integer, iCodCarteiraCobrador As Integer, colCarteiraCobradorInfo As Collection) As Long
''Lê as informações bancárias de cobrança eletrônica para o cobrador passado
'
'Dim lErro As Long
'Dim lComando As Long
'Dim objCodigoTexto As AdmCodigoNome
'Dim iCodInfo As Integer
'Dim sValorInfo As String
'
'On Error GoTo Erro_CarteiraCobradorInfo_Le
'
'    'Abre o comando
'    lComando = Comando_Abrir()
'    If lComando = 0 Then Error 51620
'
'    sValorInfo = String(STRING_BANCOINFO_VALOR, 0)
'
'    'Busca as informações no BD
'    lErro = Comando_Executar(lComando, "SELECT CodInformacao,ValorInformacao FROM CarteiraCobradorInfo WHERE CodCobrador=? AND CodCarteira = ? ORDER BY CodInformacao", iCodInfo, sValorInfo, iCodCobrador, iCodCarteiraCobrador)
'    If lErro <> AD_SQL_SUCESSO Then Error 51230
'
'    lErro = Comando_BuscarPrimeiro(lComando)
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 51150
'
'    'Enquanto encontrar
'    Do While lErro = AD_SQL_SUCESSO
'
'        Set objCodigoTexto = New AdmCodigoNome
'        'Preenche um obj com os dados lidos
'        objCodigoTexto.iCodigo = iCodInfo
'        objCodigoTexto.sNome = sValorInfo
'
'        'Armazena os dados na coleção de informações
'        colCarteiraCobradorInfo.Add objCodigoTexto
'
'        'Busca a próxima informação no BD
'        lErro = Comando_BuscarProximo(lComando)
'        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 51500
'
'    Loop
'
'    Call Comando_Fechar(lComando)
'
'    CarteiraCobradorInfo_Le = SUCESSO
'
'    Exit Function
'
'Erro_CarteiraCobradorInfo_Le:
'
'    CarteiraCobradorInfo_Le = Err
'
'    Select Case Err
'
'        Case 51620
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
'
'        Case 51150, 51230, 51500
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_CARTEIRACOBRADORINFO_NAO_CADASTRADA", Err, iCodCobrador, iCodCarteiraCobrador)
'
'        Case Else
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148703)
'
'    End Select
'
'    Call Comando_Fechar(lComando)
'
'    Exit Function
'
'End Function
'

Function TiposDeLanctoCnab_Le(ByVal colTiposLanco As Collection) As Long

Dim lErro As Long
Dim lComando As Long
Dim objCodDesc As AdmCodigoNome
Dim iCodigo As Integer
Dim sDescricao As String

On Error GoTo Erro_TiposDeLanctoCnab_Le

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 62036

    sDescricao = String(STRING_DESCRICAO_CAMPO, 0)

    lErro = Comando_Executar(lComando, "SELECT Codigo, Descricao FROM TiposDeLctoCnab ORDER BY Codigo", iCodigo, sDescricao)
    If lErro <> AD_SQL_SUCESSO Then Error 62037

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SEM_DADOS And lErro <> AD_SQL_SUCESSO Then Error 62038

    Do While lErro = AD_SQL_SUCESSO

        Set objCodDesc = New AdmCodigoNome

        objCodDesc.iCodigo = iCodigo
        objCodDesc.sNome = sDescricao

        colTiposLanco.Add objCodDesc

        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 62039

    Loop

    Call Comando_Fechar(lComando)

    TiposDeLanctoCnab_Le = SUCESSO

    Exit Function

Erro_TiposDeLanctoCnab_Le:

    TiposDeLanctoCnab_Le = Err

    Select Case Err

        Case 62036
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 62037, 62038, 62039
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOSDELCTOCNAB", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148704)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function BorderoPagto_Le(ByVal objBorderoPagto As ClassBorderoPagto) As Long
'Lê o Bordero de pagamento com o NumInt passado

Dim lErro As Long
Dim lComando As Long
Dim tBorderoPag As typeBorderoPag

On Error GoTo Erro_BorderoPagto_Le

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 62429
    
    tBorderoPag.sNomeArq = String(STRING_NOME_ARQ_COMPLETO, 0)

    'Seleciona o bordero passado por parâmetro
    lErro = Comando_Executar(lComando, "SELECT Excluido,CodConta,DataEmissao,Numero,TipoDeCobranca,TitOutroBanco,NomeArq,NumArqRemessa,DataEnvio,DataVencimento FROM BorderosPagto WHERE NumIntBordero = ? ", tBorderoPag.iExcluido, tBorderoPag.iCodConta, tBorderoPag.dtDataEmissao, tBorderoPag.lNumero, tBorderoPag.iTipoDeCobranca, tBorderoPag.iTitOutroBanco, tBorderoPag.sNomeArq, tBorderoPag.iNumArqRemessa, tBorderoPag.dtDataEnvio, tBorderoPag.dtDataVencimento, objBorderoPagto.lNumIntBordero)
    If lErro <> AD_SQL_SUCESSO Then Error 62430
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 62431
    If lErro <> AD_SQL_SUCESSO Then Error 62432 'Não encontrou
    
    With tBorderoPag
        objBorderoPagto.iExcluido = .iExcluido
        objBorderoPagto.iCodConta = .iCodConta
        objBorderoPagto.dtDataEmissao = .dtDataEmissao
        objBorderoPagto.lNumero = .lNumero
        objBorderoPagto.iTipoDeCobranca = .iTipoDeCobranca
        objBorderoPagto.iTitOutroBanco = .iTitOutroBanco
        objBorderoPagto.sNomeArq = .sNomeArq
        objBorderoPagto.iNumArqRemessa = .iNumArqRemessa
        objBorderoPagto.dtDataEnvio = .dtDataEnvio
        objBorderoPagto.dtDataVencimento = .dtDataVencimento
    End With
    
    Call Comando_Fechar(lComando)
    
    BorderoPagto_Le = SUCESSO
    
    Exit Function
    
Erro_BorderoPagto_Le:

    BorderoPagto_Le = Err
    
    Select Case Err
    
        Case 62429
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
    
        Case 62430, 62431
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BORDERO_PAGTO", Err)
            
        Case 62432
            lErro = Rotina_Erro(vbOKOnly, "ERRO_BORDERO_PAGTO_INEXISTENTE", Err)
                    
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148705)
    
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function
    
End Function

Function BorderoPagto_Le_QuantParcelas(ByVal lNumIntBordero As Long, iQuantParcelas As Integer) As Long

Dim lErro As Long
Dim lComando As Long
Dim iQuantidade As Integer

On Error GoTo Erro_BorderoPagto_Le_QuantParcelas

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 62436

    lErro = Comando_Executar(lComando, "SELECT COUNT(BaixasParcPag.NumIntParcela) FROM BaixasParcPag, MovimentosContaCorrente, BaixasPag WHERE BaixasParcPag.NumIntBaixa = BaixasPag.NumIntBaixa AND MovimentosContaCorrente.NumMovto = BaixasPag.NumMovCta AND MovimentosContaCorrente.Tipo = ? AND MovimentosContaCorrente.NumRefInterna = ?", iQuantidade, MOVCCI_PAGTO_TITULO_POR_BORDERO, lNumIntBordero)
    If lErro <> AD_SQL_SUCESSO Then Error 62437
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO Then Error 62438
    
    iQuantParcelas = iQuantidade

    Call Comando_Fechar(lComando)
    
    BorderoPagto_Le_QuantParcelas = SUCESSO
    
    Exit Function
    
Erro_BorderoPagto_Le_QuantParcelas:

    BorderoPagto_Le_QuantParcelas = Err
    
    Select Case Err
    
        Case 62436
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
            
        Case 62437, 62438
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BAIXAS_PAG", Err)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148706)
        
    End Select
    
    Call Comando_Fechar(lComando)
        
    Exit Function
    
End Function

Function Consultas_Le_Todos(ByVal sNomeTela As String, ByVal colConsultas As Collection) As Long
'Le Todas as Consultas para a Tela Passada

Dim lErro As Long
Dim tConsultas As typeConsultas
Dim objConsulta As ClassConsultas
Dim lComando As Long

On Error GoTo Erro_Consultas_Le_Todos

    'abre conexao com o BD (DIC)
    lComando = Comando_AbrirExt(GL_lConexaoDic)
    If lComando = 0 Then Error 60470

    tConsultas.sNomeTela = String(STRING_NOME_TELA, 0)
    tConsultas.sSigla = String(STRING_MODULO_SIGLA, 0)
    tConsultas.sTelaRelacionada = String(STRING_NOME_TELA, 0)
    tConsultas.sConsulta = String(STRING_CONSULTA, 0)
    tConsultas.sDescricao = String(STRING_CONSULTA_DESCRICAO, 0)
    
    'Le todos os modulos e Consultas
    lErro = Comando_Executar(lComando, "SELECT Consultas.Sigla, Consultas.Consulta,Consultas.Descricao, Consultas.Posicao, Consultas.Nivel, Consultas.TelaRelacionada, Consultas.IconeModulo, Consultas.IconeConsulta FROM Consultas, ModuloFilEmp WHERE ModuloFilEmp.SiglaModulo = Consultas.Sigla AND Consultas.NomeTela = ? AND ModuloFilEmp.CodEmpresa = ? AND ModuloFilEmp.CodFilial = ? ORDER BY Consultas.Sigla , Consultas.Posicao", tConsultas.sSigla, tConsultas.sConsulta, tConsultas.sDescricao, tConsultas.iPosicao, tConsultas.iNivel, tConsultas.sTelaRelacionada, tConsultas.iIconeModulo, tConsultas.iIconeConsulta, sNomeTela, glEmpresa, giFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then Error 60471

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60472

    Do While lErro <> AD_SQL_SEM_DADOS

        Set objConsulta = New ClassConsultas

        objConsulta.sNomeTela = tConsultas.sNomeTela
        objConsulta.sSigla = tConsultas.sSigla
        objConsulta.sDescricao = tConsultas.sDescricao
        objConsulta.sConsulta = tConsultas.sConsulta
        objConsulta.iPosicao = tConsultas.iPosicao
        objConsulta.iNivel = tConsultas.iNivel
        objConsulta.sTelaRelacionada = tConsultas.sTelaRelacionada
        objConsulta.iIconeConsulta = tConsultas.iIconeConsulta
        objConsulta.iIconeModulo = tConsultas.iIconeModulo

        'Coloca na Colecao
        colConsultas.Add objConsulta

        'Busca o Proximo
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60473

    Loop

    Call Comando_Fechar(lComando)

    Consultas_Le_Todos = SUCESSO

    Exit Function

Erro_Consultas_Le_Todos:

    Consultas_Le_Todos = Err

    Select Case Err
        
        Case 60470
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 60471, 60472, 60473
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONSULTAS", Err)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148707)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Public Function DebitosRec_ObtemSaldo(dSaldo As Double, lQtde As Long, ByVal iFilialEmpresa As Integer) As Long
'Para obter o saldo em qtde e valor de devolucoes/creditos em aberto no contas a receber

Dim lErro As Long, lComando As Long

On Error GoTo Erro_DebitosRec_ObtemSaldo

    lComando = Comando_AbrirExt(GL_lConexaoRel)
    If lComando = 0 Then Error 59371
    
    If iFilialEmpresa = EMPRESA_TODA Then
        lErro = Comando_Executar(lComando, "SELECT SUM(Saldo), COUNT(*) FROM DebitosRecCli WHERE Status = ?", dSaldo, lQtde, STATUS_LANCADO)
    Else
        lErro = Comando_Executar(lComando, "SELECT SUM(Saldo), COUNT(*) FROM DebitosRecCli WHERE Status = ? AND FilialEmpresa = ?", dSaldo, lQtde, STATUS_LANCADO, iFilialEmpresa)
    End If
    If lErro <> AD_SQL_SUCESSO Then Error 59372
    
    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO Then Error 59373
    
    Call Comando_Fechar(lComando)
    
    DebitosRec_ObtemSaldo = SUCESSO
     
    Exit Function
    
Erro_DebitosRec_ObtemSaldo:

    DebitosRec_ObtemSaldo = Err
     
    Select Case Err
          
        Case 59371
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 59372, 59373
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_DEBITOSRECCLI", Err)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148708)
     
    End Select
     
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Public Function AntecipRec_ObtemSaldo(dSaldo As Double, lQtde As Long, ByVal iFilialEmpresa As Integer) As Long
'Para obter o saldo em qtde e valor de adiantamentos de clientes em aberto no contas a receber

Dim lErro As Long, lComando As Long

On Error GoTo Erro_AntecipRec_ObtemSaldo

    lComando = Comando_AbrirExt(GL_lConexaoRel)
    If lComando = 0 Then Error 59374
    
    If iFilialEmpresa = EMPRESA_TODA Then
        lErro = Comando_Executar(lComando, "SELECT SUM(SaldoNaoApropriado), COUNT(*) FROM RecebAntecipados WHERE SaldoNaoApropriado > 0 AND Excluido = 0", dSaldo, lQtde)
    Else
        lErro = Comando_Executar(lComando, "SELECT SUM(RecebAntecipados.SaldoNaoApropriado), COUNT(*) FROM RecebAntecipados, MovimentosContaCorrente WHERE RecebAntecipados.SaldoNaoApropriado > 0 AND MovimentosContaCorrente.FilialEmpresa = ? AND MovimentosContaCorrente.NumMovto = RecebAntecipados.NumMovto AND RecebAntecipados.Excluido = 0", dSaldo, lQtde, iFilialEmpresa)
    End If
    If lErro <> AD_SQL_SUCESSO Then Error 59375
    
    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO Then Error 59376
    
    Call Comando_Fechar(lComando)
    
    AntecipRec_ObtemSaldo = SUCESSO
     
    Exit Function
    
Erro_AntecipRec_ObtemSaldo:

    AntecipRec_ObtemSaldo = Err
     
    Select Case Err
          
        Case 59374
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 59375, 59376
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ANTECIPRECS", Err)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148709)
     
    End Select
     
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function Fornecedor_Estatistica_Le(ByVal objFornecedorEstatistica As ClassFilialFornecedorEst) As Long
'Lê os dados relacionados com estatística do fornecedor

Dim lErro As Long
Dim dSaldoTitulos As Double
Dim lComando As Long
Dim objFornFilEmp As New ClassFilFornFilEmp

On Error GoTo Erro_Fornecedor_Estatistica_Le
    
    'Inicializa comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 52652
               
    'Lê a soma dos saldo em TitulosPagar
    lErro = Comando_Executar(lComando, "SELECT SUM(Saldo) FROM TitulosPag WHERE Fornecedor =? AND FilialEmpresa= ? AND Status <> ?", dSaldoTitulos, objFornecedorEstatistica.lCodFornecedor, giFilialEmpresa, STATUS_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then Error 52653

    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 52654

    objFornecedorEstatistica.dSaldoTitulos = dSaldoTitulos
           
    'Calcula a Media atraso do Fornecedor
    '????lErro = Fornecedor_Estatistica_Le_MediaAtraso(objFornecedorEstatistica)
    '????If lErro <> SUCESSO Then Error 58040
    
    objFornFilEmp.lCodFornecedor = objFornecedorEstatistica.lCodFornecedor
    objFornFilEmp.iFilialEmpresa = giFilialEmpresa
    
    'Lê a os dados de estatística que estão em FilialFornFilEmp
    lErro = CF("FornFilEmp_Le", objFornFilEmp)
    If lErro <> SUCESSO Then Error 52656
    
    objFornecedorEstatistica.lNumeroCompras = objFornFilEmp.lNumeroCompras
    objFornecedorEstatistica.dMediaCompra = objFornFilEmp.dMediaCompra
    objFornecedorEstatistica.dtDataPrimeiraCompra = objFornFilEmp.dtDataPrimeiraCompra
    objFornecedorEstatistica.dtDataUltimaCompra = objFornFilEmp.dtDataUltimaCompra
    objFornecedorEstatistica.dValorAcumuladoCompras = objFornFilEmp.dValorAcumuladoCompras
    objFornecedorEstatistica.dValorAcumuladoDevolucoes = objFornFilEmp.dValorAcumuladoDevolucoes
    objFornecedorEstatistica.lNumTotalDevolucoes = objFornFilEmp.lNumTotalDevolucoes
    objFornecedorEstatistica.dtDataUltDevolucao = objFornFilEmp.dtDataUltDevolucao
    objFornecedorEstatistica.lMaiorAtraso = objFornFilEmp.lMaiorAtraso
    
    'Libera comandos
    Call Comando_Fechar(lComando)

    Fornecedor_Estatistica_Le = SUCESSO
    
    Exit Function
    
Erro_Fornecedor_Estatistica_Le:

    Fornecedor_Estatistica_Le = Err
    
    Select Case Err
        
        Case 52652
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 52653, 52654
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TITULOS_PAGAR", Err)
     
        Case 52656, 58040 'Tratado nas rotinas chamadas
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148710)

    End Select
    
    'Libera comandos
    Call Comando_Fechar(lComando)

    Exit Function
    
End Function

Function FilialFornecedor_Estatistica_Le(ByVal objFilialFornecedorEstatistica As ClassFilialFornecedorEst, Optional ByVal bComMediaAtraso As Boolean = True) As Long
'Lê os dados de estatística da Filial Fornecedor
 
Dim lErro As Long
Dim dSaldoTitulos As Double
Dim lComando As Long
Dim objFilFornFilEmp As New ClassFilFornFilEmp

On Error GoTo Erro_FilialFornecedor_Estatistica_Le

    'Inicializa comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 52663

    'Lê a soma dos saldos de TitulosPagar
    lErro = Comando_Executar(lComando, "SELECT SUM(Saldo) FROM TitulosPag WHERE Fornecedor =? AND Filial = ? AND FilialEmpresa= ? AND Status <> ?", dSaldoTitulos, objFilialFornecedorEstatistica.lCodFornecedor, objFilialFornecedorEstatistica.iCodFilial, giFilialEmpresa, STATUS_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then Error 52664

    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 52665

    objFilialFornecedorEstatistica.dSaldoTitulos = dSaldoTitulos

    If bComMediaAtraso Then
        'Calcula a Media atraso do Fornecedor
        lErro = FilialFornecedor_Estatistica_Le_MediaAtraso(objFilialFornecedorEstatistica)
        If lErro <> SUCESSO Then Error 58049
    End If
    
    objFilFornFilEmp.lCodFornecedor = objFilialFornecedorEstatistica.lCodFornecedor
    objFilFornFilEmp.iFilialEmpresa = giFilialEmpresa
    objFilFornFilEmp.iCodFilial = objFilialFornecedorEstatistica.iCodFilial
    
    lErro = CF("FilFornFilEmp_Le", objFilFornFilEmp)
    If lErro <> SUCESSO Then Error 52666

    objFilialFornecedorEstatistica.dMediaCompra = objFilFornFilEmp.dMediaCompra
    objFilialFornecedorEstatistica.dtDataPrimeiraCompra = objFilFornFilEmp.dtDataPrimeiraCompra
    objFilialFornecedorEstatistica.dtDataUltDevolucao = objFilFornFilEmp.dtDataUltDevolucao
    objFilialFornecedorEstatistica.dtDataUltimaCompra = objFilFornFilEmp.dtDataUltimaCompra
    objFilialFornecedorEstatistica.dValorAcumuladoCompras = objFilFornFilEmp.dValorAcumuladoCompras
    objFilialFornecedorEstatistica.dValorAcumuladoDevolucoes = objFilFornFilEmp.dValorAcumuladoDevolucoes
    objFilialFornecedorEstatistica.lNumeroCompras = objFilFornFilEmp.lNumeroCompras
    objFilialFornecedorEstatistica.lNumTotalDevolucoes = objFilFornFilEmp.lNumTotalDevolucoes
    objFilialFornecedorEstatistica.lMaiorAtraso = objFilFornFilEmp.lMaiorAtraso

    'Libera comandos
    Call Comando_Fechar(lComando)

    FilialFornecedor_Estatistica_Le = SUCESSO

    Exit Function

Erro_FilialFornecedor_Estatistica_Le:

    FilialFornecedor_Estatistica_Le = Err

    Select Case Err

        Case 52663
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 52664, 52665
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TITULOS_PAGAR", Err)

        Case 52666, 58049 'Tratado na rotina chamada

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148711)

    End Select

    'Libera comandos
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Private Function Fornecedor_Estatistica_Le_MediaAtraso(ByVal objFornecedorEstatistica As ClassFilialFornecedorEst) As Long
'Lê a Estatística do Fornecedor com relação a Media de Compras

Dim lErro As Long
Dim lComando As Long
Dim iNumCompras As Integer
Dim lNumIntDocPCBaixado As Long
Dim sUMItensPCBaixado As String
Dim dtDataLimiteItensPCBaixado As Date
Dim dQuantidadeItemNFItemPC As Double
Dim tItemNF As typeItemNF
Dim tNFiscal As typeNFiscal
Dim objProduto As New ClassProduto
Dim dFator As Double
Dim objAtrasoItemPC As ClassAtrasoItemPC
Dim colAtrasoItemPC As New Collection
Dim dValorAtrasoTotal As Double
Dim dValorEntregueTotal As Double
Dim objConfiguraCom As New ClassConfiguraCOM
Dim lNumIntDocAnterior As Long

On Error GoTo Erro_Fornecedor_Estatistica_Le_MediaAtraso

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 58032

    'Lê na tabela ComprasConfig o número de itens que será utilizado para calcular a Média
    lErro = CF("ComprasConfig_Le", objConfiguraCom)
    If lErro <> SUCESSO Then Error 58033

    sUMItensPCBaixado = String(STRING_UM_NOME, 0)
    tItemNF.sUnidadeMed = String(STRING_UM_NOME, 0)
    tItemNF.sProduto = String(STRING_PRODUTO, 0)
    
    lErro = Comando_Executar(lComando, "SELECT PedidoCompraBaixado.NumIntDoc, ItemNFItemPC.Quantidade, ItensPedCompraBaixados.UM, ItensNFiscal.UnidadeMed, ItensNFiscal.PrecoUnitario, NFiscal.DataEntrada, ItensPedCompraBaixados.DataLimite, ItensNFiscal.Produto FROM NFiscal, ItensNFiscal, ItemNFItemPC, ItensPedCompraBaixados, PedidoCompraBaixado WHERE NFiscal.NumIntDoc = ItensNFiscal.NumIntNF AND ItensNFiscal.NumIntDoc = ItemNFItemPC.ItemNFiscal AND ItemNFItemPC.ItemPedCompra = ItensPedCompraBaixados.NumIntDoc AND ItensPedCompraBaixados.PedCompra = PedidoCompraBaixado.NumIntDoc AND NFiscal.FilialEmpresa = ? AND PedidoCompraBaixado.TipoDestino = ? AND PedidoCompraBaixado.FilialDestino = ? AND PedidoCompraBaixado.Fornecedor = ? ORDER BY PedidoCompraBaixado.DataBaixa DESC, PedidoCompraBaixado.NumIntDoc DESC", _
    lNumIntDocPCBaixado, dQuantidadeItemNFItemPC, sUMItensPCBaixado, tItemNF.sUnidadeMed, tItemNF.dPrecoUnitario, tNFiscal.dtDataEntrada, dtDataLimiteItensPCBaixado, tItemNF.sProduto, giFilialEmpresa, TIPO_DESTINO_EMPRESA, giFilialEmpresa, objFornecedorEstatistica.lCodFornecedor)
    If lErro <> SUCESSO Then Error 58034

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 58035

    lNumIntDocAnterior = lNumIntDocPCBaixado
    iNumCompras = 1

    'Se encontrar e o Número de Ped. Compras não ultrapassar o Limite da configuração
    Do While (lErro = AD_SQL_SUCESSO) And (iNumCompras < objConfiguraCom.iNumComprasMediaAtraso)

        objProduto.sCodigo = tItemNF.sProduto

        'Lê o Produto para Pegar a ClasseUM
        lErro = CF("Produto_Le", objProduto)
        If lErro <> SUCESSO And lErro <> 28030 Then Error 58036

        If lErro = 28030 Then Error 58037

        'Calcula o Fator de Conversão da UM
        lErro = CF("UM_Conversao_Trans", objProduto.iClasseUM, tItemNF.sUnidadeMed, sUMItensPCBaixado, dFator)
        If lErro <> SUCESSO Then Error 58038

        'Converte a UM do Preco Unitario
        tItemNF.dPrecoUnitario = tItemNF.dPrecoUnitario * dFator

        objAtrasoItemPC.dValorEntregue = dQuantidadeItemNFItemPC * tItemNF.dPrecoUnitario

        If (tNFiscal.dtDataEntrada - dtDataLimiteItensPCBaixado) > 0 Then
            objAtrasoItemPC.lAtraso = tNFiscal.dtDataEntrada - dtDataLimiteItensPCBaixado
        Else
            objAtrasoItemPC.lAtraso = 0
        End If

        'Adiciona na coleção
        colAtrasoItemPC.Add objAtrasoItemPC

        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 58039

        'Verifica se o NumIntDoc do Ped. Compras <> NumIntDoc Anterior do Ped. Compras
        If lNumIntDocPCBaixado <> lNumIntDocAnterior Then
            lNumIntDocAnterior = lNumIntDocPCBaixado
            iNumCompras = iNumCompras + 1
        End If

    Loop

    'Para cada um item da coleção
    For Each objAtrasoItemPC In colAtrasoItemPC

        'Calcula a soma (Valor * Atraso) e a soma dos valores Entregues
        dValorAtrasoTotal = dValorAtrasoTotal + (objAtrasoItemPC.lAtraso * objAtrasoItemPC.dValorEntregue)
        dValorEntregueTotal = dValorEntregueTotal + objAtrasoItemPC.dValorEntregue

    Next

    If dValorEntregueTotal <> 0 Then
        
        'Calcula a Média e Preenche o objFornecedorEstatistica
        objFornecedorEstatistica.lMediaAtraso = CLng(dValorAtrasoTotal / dValorEntregueTotal)

    End If
    
    Call Comando_Fechar(lComando)

    Fornecedor_Estatistica_Le_MediaAtraso = SUCESSO

    Exit Function
    
Erro_Fornecedor_Estatistica_Le_MediaAtraso:

    Fornecedor_Estatistica_Le_MediaAtraso = Err

    Select Case Err

    Case 58032
        lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

    Case 58033, 58036, 58038

    Case 58034, 58035, 58039
        lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", Err)

    Case 58037
        lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_INEXISTENTE", Err, objProduto.sCodigo)

    Case Else
        lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148712)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function
    
End Function

Private Function FilialFornecedor_Estatistica_Le_MediaAtraso(ByVal objFilialFornecedorEstatistica As ClassFilialFornecedorEst) As Long
'Lê a Estatística do Fornecedor com relação a Media de Compras

Dim lErro As Long
Dim lComando As Long
Dim iNumCompras As Integer
Dim lNumIntDocPCBaixado As Long
Dim sUMItensPCBaixado As String
Dim dtDataLimiteItensPCBaixado As Date
Dim dQuantidadeItemNFItemPC As Double
Dim tItemNF As typeItemNF
Dim tNFiscal As typeNFiscal
Dim objProduto As New ClassProduto
Dim dFator As Double
Dim objAtrasoItemPC As New ClassAtrasoItemPC
Dim colAtrasoItemPC As New Collection
Dim dValorAtrasoTotal As Double
Dim dValorEntregueTotal As Double
Dim objConfiguraCom As New ClassConfiguraCOM
Dim lNumIntDocAnterior As Long

On Error GoTo Erro_FilialFornecedor_Estatistica_Le_MediaAtraso

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 58041

    'Lê na tabela ComprasConfig o número de itens que será utilizado para calcular a Média
    lErro = CF("ComprasConfig_Le", objConfiguraCom)
    If lErro <> SUCESSO Then Error 58042
    
    tItemNF.sUnidadeMed = String(STRING_UM_SIGLA, 0)
    tItemNF.sProduto = String(STRING_PRODUTO, 0)
    sUMItensPCBaixado = String(STRING_UM_SIGLA, 0)
    
    lErro = Comando_Executar(lComando, "SELECT PedidoCompraBaixado.NumIntDoc, ItemNFItemPC.Quantidade, ItensPedCompraBaixados.UM, ItensNFiscal.UnidadeMed, ItensNFiscal.PrecoUnitario, NFiscal.DataEntrada, ItensPedCompraBaixados.DataLimite, ItensNFiscal.Produto FROM NFiscal, ItensNFiscal, ItemNFItemPC, ItensPedCompraBaixados, PedidoCompraBaixado WHERE NFiscal.NumIntDoc = ItensNFiscal.NumIntNF AND ItensNFiscal.NumIntDoc = ItemNFItemPC.ItemNFiscal AND ItemNFItemPC.ItemPedCompra = ItensPedCompraBaixados.NumIntDoc AND ItensPedCompraBaixados.PedCompra = PedidoCompraBaixado.NumIntDoc AND NFiscal.FilialEmpresa = ? AND PedidoCompraBaixado.TipoDestino = ? AND PedidoCompraBaixado.FilialDestino = ? AND PedidoCompraBaixado.Fornecedor = ? AND PedidoCompraBaixado.Filial = ? ORDER BY PedidoCompraBaixado.DataBaixa DESC, PedidoCompraBaixado.NumIntDoc DESC", _
    lNumIntDocPCBaixado, dQuantidadeItemNFItemPC, sUMItensPCBaixado, tItemNF.sUnidadeMed, tItemNF.dPrecoUnitario, tNFiscal.dtDataEntrada, dtDataLimiteItensPCBaixado, tItemNF.sProduto, giFilialEmpresa, TIPO_DESTINO_EMPRESA, giFilialEmpresa, objFilialFornecedorEstatistica.lCodFornecedor, objFilialFornecedorEstatistica.iCodFilial)
    If lErro <> SUCESSO Then Error 58043

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 58044

    lNumIntDocAnterior = lNumIntDocPCBaixado
    iNumCompras = 1

    'Se encontrar e o Número de Ped. Compras não ultrapassar o Limite da configuração
    Do While (lErro = SUCESSO) And (iNumCompras < objConfiguraCom.iNumComprasMediaAtraso)

        objProduto.sCodigo = tItemNF.sProduto

        'Lê o Produto para Pegar a ClasseUM
        lErro = CF("Produto_Le", objProduto)
        If lErro <> SUCESSO And lErro <> 28030 Then Error 58045

        If lErro = 28030 Then Error 58046

        'Calcula o Fator de Conversão da UM
        lErro = CF("UM_Conversao_Trans", objProduto.iClasseUM, tItemNF.sUnidadeMed, sUMItensPCBaixado, dFator)
        If lErro <> SUCESSO Then Error 58047

        'Converte a UM do Preco Unitario
        tItemNF.dPrecoUnitario = tItemNF.dPrecoUnitario * dFator

        objAtrasoItemPC.dValorEntregue = dQuantidadeItemNFItemPC * tItemNF.dPrecoUnitario

        If (tNFiscal.dtDataEntrada - dtDataLimiteItensPCBaixado) > 0 Then
            objAtrasoItemPC.lAtraso = tNFiscal.dtDataEntrada - dtDataLimiteItensPCBaixado
        Else
            objAtrasoItemPC.lAtraso = 0
        End If

        'Adiciona na coleção
        colAtrasoItemPC.Add objAtrasoItemPC

        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 58048

        'Verifica se o NumIntDoc do Ped. Compras <> NumIntDoc Anterior do Ped. Compras
        If lNumIntDocPCBaixado <> lNumIntDocAnterior Then
            lNumIntDocAnterior = lNumIntDocPCBaixado
            iNumCompras = iNumCompras + 1
        End If

    Loop

    'Para cada um item da coleção
    For Each objAtrasoItemPC In colAtrasoItemPC

        'Calcula a soma (Valor * Atraso) e a soma dos valores Entregues
        dValorAtrasoTotal = dValorAtrasoTotal + (objAtrasoItemPC.lAtraso * objAtrasoItemPC.dValorEntregue)
        dValorEntregueTotal = dValorEntregueTotal + objAtrasoItemPC.dValorEntregue

    Next

    If dValorEntregueTotal = 0 Then
        objFilialFornecedorEstatistica.lMediaAtraso = 0
    Else
        'Calcula a Média e Preenche o objFilialFornecedorEstatistica
        objFilialFornecedorEstatistica.lMediaAtraso = CLng(dValorAtrasoTotal / dValorEntregueTotal)
    End If
    
    Call Comando_Fechar(lComando)

    FilialFornecedor_Estatistica_Le_MediaAtraso = SUCESSO

    Exit Function
    
Erro_FilialFornecedor_Estatistica_Le_MediaAtraso:

    FilialFornecedor_Estatistica_Le_MediaAtraso = Err

    Select Case Err

    Case 58041
        lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

    Case 58042, 58045, 58047

    Case 58043, 58044, 58048
        lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", Err)

    Case 58046
        lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_INEXISTENTE", Err, objProduto.sCodigo)

    Case Else
        lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148713)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function FilialFornecedor_Objetos_Relacionados_Testa(ByVal objFilialFornecedor As ClassFilialFornecedor) As Long
'Lê os objetos relacionados com a Filial do Fornecedor
'auxiliar a exclusao de uma filial

Dim lErro As Long
Dim lCodigo As Long
Dim sCodigo As String

On Error GoTo Erro_FilialFornecedor_Objetos_Relacionados_Testa

    lErro = NFiscal_Le_FilialFornecedor_Uma(objFilialFornecedor, lCodigo)
    If lErro <> SUCESSO And lErro <> 33853 Then gError 33854
    
    'Filial do Fornecedor está relacionado com Nota Fiscal --> erro
    If lErro = SUCESSO Then gError 33855
    
    'Filial do Fornecedor está relacionado com Nota Fiscal Baixada --> erro
    If lErro = SUCESSO Then gError 33861
    
    lErro = NFPag_Le_FilialFornecedor_Uma(objFilialFornecedor, lCodigo)
    If lErro <> SUCESSO And lErro <> 33865 Then gError 33866
    
    'Filial do Fornecedor está relacionado com Nota Fiscal à Pagar --> erro
    If lErro = SUCESSO Then gError 33867
    
    lErro = NFPagBaixada_Le_FilialFornecedor_Uma(objFilialFornecedor, lCodigo)
    If lErro <> SUCESSO And lErro <> 33876 Then gError 33877
    
    'Filial do Fornecedor está relacionado com Nota Fiscal à Pagar Baixada --> erro
    If lErro = SUCESSO Then gError 33878
    
    lErro = TituloPagar_Le_FilialFornecedor_Um(objFilialFornecedor, lCodigo)
    If lErro <> SUCESSO And lErro <> 33882 Then gError 33883
    
    'Filial do Fornecedor está relacionado com Título à Pagar --> erro
    If lErro = SUCESSO Then gError 33884
    
    lErro = TituloPagarBaixado_Le_FilialFornecedor_Um(objFilialFornecedor, lCodigo)
    If lErro <> SUCESSO And lErro <> 33894 Then gError 33895
    
    'Filial do Fornecedor está relacionado com Título à Pagar Baixado --> erro
    If lErro = SUCESSO Then gError 33896
    
    lErro = CreditoPagForn_Le_FilialFornecedor_Um(objFilialFornecedor, lCodigo)
    If lErro <> SUCESSO And lErro <> 33900 Then gError 33901
    
    'Filial do Fornecedor está relacionado com Crédito à Pagar Fornecedor --> erro
    If lErro = SUCESSO Then gError 33902
    
    lErro = PagtoAntecipado_Le_FilialFornecedor_Um(objFilialFornecedor, lCodigo)
    If lErro <> SUCESSO And lErro <> 33906 Then gError 33907
    
    'Filial do Fornecedor está relacionado com Pagamento Antecipado --> erro
    If lErro = SUCESSO Then gError 33908
    
    lErro = FornecedorProdutoFF_Le_FilialFornecedor_Um(objFilialFornecedor, sCodigo)
    If lErro <> SUCESSO And lErro <> 89325 Then gError 62673
    If lErro = SUCESSO Then gError 62674
    
    lErro = PedidoCompraTodos_Le_FilialFornecedor_Um(objFilialFornecedor, lCodigo)
    If lErro <> SUCESSO And lErro <> 62678 Then gError 62679
    If lErro = SUCESSO Then gError 62680
        
    lErro = RequisicaoCompraTodas_Le_FilialFornecedor_Um(objFilialFornecedor, lCodigo)
    If lErro <> SUCESSO And lErro <> 72408 Then gError 62684
    
    'Fornecedor está relacionado com Requisicao de Compra --> erro
    If lErro = SUCESSO Then gError 62685
    
    lErro = RequisicaoModelo_Le_FilialFornecedor_Um(objFilialFornecedor, lCodigo)
    If lErro <> SUCESSO And lErro <> 72414 Then gError 62688
    
    'Fornecedor está relacionado com Requisicao Modelo --> erro
    If lErro = SUCESSO Then gError 62689
       
    lErro = CotacaoTodas_Le_FilialFornecedor_Um(objFilialFornecedor, lCodigo)
    If lErro <> SUCESSO And lErro <> 72420 Then gError 62692
    
    'Fornecedor está relacionado com Cotacao --> erro
    If lErro = SUCESSO Then gError 62693
    
    lErro = CotacaoProdutoTodas_Le_FilialFornecedor_Um(objFilialFornecedor)
    If lErro <> SUCESSO And lErro <> 72426 Then gError 62694
    
    'Fornecedor está relacionado com CotacaoProduto
    If lErro = SUCESSO Then gError 62695
    
    lErro = PedidoCotacaoTodos_Le_FilialFornecedor_Um(objFilialFornecedor, lCodigo)
    If lErro <> SUCESSO And lErro <> 72429 Then gError 62696
    
    'Fornecedor está relacionado com Pedido de Cotacao
    If lErro = SUCESSO Then gError 62697
    
    lErro = ConcorrenciaTodas_Le_FilialFornecedor_Um(objFilialFornecedor, lCodigo)
    If lErro <> SUCESSO And lErro <> 72432 Then gError 62698
    
    'Fornecedor está relacionado com Concorrencia
    If lErro = SUCESSO Then gError 62699
    
    FilialFornecedor_Objetos_Relacionados_Testa = SUCESSO

    Exit Function

Erro_FilialFornecedor_Objetos_Relacionados_Testa:

    FilialFornecedor_Objetos_Relacionados_Testa = gErr

    Select Case gErr

        Case 33854, 33860, 33866, 33877, 33883, 33895, 33901, 33907, 62673, _
             62688, 62692, 62694, 62696, 62698
        
        Case 33855
            Call Rotina_Erro(vbOKOnly, "ERRO_FILIAL_FORNECEDOR_REL_NFISCAL", gErr, objFilialFornecedor.iCodFilial, objFilialFornecedor.lCodFornecedor, lCodigo)
        
        Case 33861
            Call Rotina_Erro(vbOKOnly, "ERRO_FILIAL_FORNECEDOR_REL_NFISCALBAIXADA", gErr, objFilialFornecedor.iCodFilial, objFilialFornecedor.lCodFornecedor, lCodigo)

        Case 33867
            Call Rotina_Erro(vbOKOnly, "ERRO_FILIAL_FORNECEDOR_REL_NFISCALPAG", gErr, objFilialFornecedor.iCodFilial, objFilialFornecedor.lCodFornecedor, lCodigo)

        Case 33878
            Call Rotina_Erro(vbOKOnly, "ERRO_FILIAL_FORNECEDOR_REL_NFISCALPAGBAIXADA", gErr, objFilialFornecedor.iCodFilial, objFilialFornecedor.lCodFornecedor, lCodigo)

        Case 33884
            Call Rotina_Erro(vbOKOnly, "ERRO_FILIAL_FORNECEDOR_REL_TIT_PAGAR", gErr, objFilialFornecedor.iCodFilial, objFilialFornecedor.lCodFornecedor, lCodigo)

        Case 33896
            Call Rotina_Erro(vbOKOnly, "ERRO_FILIAL_FORNECEDOR_REL_TIT_PAGAR_BAIXADO", gErr, objFilialFornecedor.iCodFilial, objFilialFornecedor.lCodFornecedor, lCodigo)
        
        Case 33902
            Call Rotina_Erro(vbOKOnly, "ERRO_FILIAL_FORNECEDOR_REL_CREDITO_PAGAR_FORN", gErr, objFilialFornecedor.iCodFilial, objFilialFornecedor.lCodFornecedor, lCodigo)
        
        Case 33908
            Call Rotina_Erro(vbOKOnly, "ERRO_FILIAL_FORNECEDOR_REL_PAGTO_ANTECIPADO", gErr, objFilialFornecedor.iCodFilial, objFilialFornecedor.lCodFornecedor, lCodigo)

        Case 62674
            Call Rotina_Erro(vbOKOnly, "ERRO_FILIAL_FORNECEDOR_REL_PRODUTO", gErr, objFilialFornecedor.iCodFilial, objFilialFornecedor.lCodFornecedor, sCodigo)
        
        Case 62679
            Call Rotina_Erro(vbOKOnly, "ERRO_FILIAL_FORNECEDOR_REL_PEDCOMPRA", gErr, objFilialFornecedor.iCodFilial, objFilialFornecedor.lCodFornecedor, lCodigo)
        
        Case 62685
            Call Rotina_Erro(vbOKOnly, "ERRO_FILIAL_FORNECEDOR_REL_REQCOMPRA", gErr, objFilialFornecedor.iCodFilial, objFilialFornecedor.lCodFornecedor, lCodigo)
        
        Case 62689
            Call Rotina_Erro(vbOKOnly, "ERRO_FILIAL_FORNECEDOR_REL_REQMODELO", gErr, objFilialFornecedor.iCodFilial, objFilialFornecedor.lCodFornecedor, lCodigo)
                       
        Case 62693
            Call Rotina_Erro(vbOKOnly, "ERRO_FILIAL_FORNECEDOR_REL_COTACAO", gErr, objFilialFornecedor.iCodFilial, objFilialFornecedor.lCodFornecedor, lCodigo)
        
        Case 62695
            Call Rotina_Erro(vbOKOnly, "ERRO_FILIAL_FORNECEDOR_REL_COTACAOPRODUTO", gErr, objFilialFornecedor.iCodFilial, objFilialFornecedor.lCodFornecedor)
        
        Case 62697
            Call Rotina_Erro(vbOKOnly, "ERRO_FILIAL_FORNECEDOR_REL_PEDCOTACAO", gErr, objFilialFornecedor.iCodFilial, objFilialFornecedor.lCodFornecedor, lCodigo)
            
        Case 62699
            Call Rotina_Erro(vbOKOnly, "ERRO_FILIAL_FORNECEDOR_REL_CONCORRENCIA", gErr, objFilialFornecedor.iCodFilial, objFilialFornecedor.lCodFornecedor, lCodigo)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148714)

    End Select

    Exit Function

End Function

Private Function FornecedorProdutoFF_Le_FilialFornecedor_Um(ByVal objFilialFornecedor As ClassFilialFornecedor, sProduto As String) As Long
'Retorna sucesso se achar algum produto relacionado com Fornecedor Filial.

Dim lErro As Long
Dim lComando As Long
Dim sCodigo As String

On Error GoTo Erro_FornecedorProdutoFF_Le_FilialFornecedor_Um

    sCodigo = String(STRING_PRODUTO, 0)

    'Inicializa comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 89322

    'Lê o Fornecedor na tabela FornecedorProdutoFF
    lErro = Comando_Executar(lComando, "SELECT Produto FROM FornecedorProdutoFF WHERE Fornecedor = ? AND FilialForn = ?", sCodigo, objFilialFornecedor.lCodFornecedor, objFilialFornecedor.iCodFilial)
    If lErro <> AD_SQL_SUCESSO Then gError 89323

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 89324
    
    sProduto = sCodigo

    'Não achou o Fornecedor
    If lErro = AD_SQL_SEM_DADOS Then gError 89325

    Call Comando_Fechar(lComando)

    FornecedorProdutoFF_Le_FilialFornecedor_Um = SUCESSO

    Exit Function

Erro_FornecedorProdutoFF_Le_FilialFornecedor_Um:

    FornecedorProdutoFF_Le_FilialFornecedor_Um = gErr

    Select Case gErr

        Case 89322
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 89323, 89324
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FORNECEDORPRODUTOFF1", gErr)

        Case 89325
            'Erro tratado na rotina chamada

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148715)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function


Private Function PedidoCompraTodos_Le_FilialFornecedor_Um(ByVal objFilialFornecedor As ClassFilialFornecedor, lCodigo As Long) As Long
'Retorna sucesso se achar algum Fornecedor relacionado com algum Pedido de Compra, baixado ou não.

Dim lErro As Long
Dim lComando As Long

On Error GoTo Erro_PedidoCompraTodos_Le_FilialFornecedor_Um

    'Inicializa comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 62675

    'Lê o Fornecedor na tabela PedidoCompraTodos
    lErro = Comando_Executar(lComando, "SELECT Codigo FROM PedidoCompraTodos WHERE Fornecedor = ? AND Filial = ?", lCodigo, objFilialFornecedor.lCodFornecedor, objFilialFornecedor.iCodFilial)
    If lErro <> AD_SQL_SUCESSO Then gError 62676

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 62677
    
    'Não achou o Fornecedor
    If lErro = AD_SQL_SEM_DADOS Then gError 62678

    Call Comando_Fechar(lComando)

    PedidoCompraTodos_Le_FilialFornecedor_Um = SUCESSO

Exit Function

Erro_PedidoCompraTodos_Le_FilialFornecedor_Um:

    PedidoCompraTodos_Le_FilialFornecedor_Um = gErr

    Select Case gErr

        Case 62675
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 62676, 62677
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PEDIDOCOMPRA", gErr)

        Case 62678
            'Erro tratado na rotina chamada

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148716)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function


Private Function RequisicaoCompraTodas_Le_FilialFornecedor_Um(ByVal objFilialFornecedor As ClassFilialFornecedor, lCodigo As Long) As Long
'Retorna sucesso se achar a Filial do Fornecedor relacionado com alguma Requisicao de Compra, baixada ou não.

Dim lErro As Long
Dim lComando As Long

On Error GoTo Erro_RequisicaoCompraTodas_Le_FilialFornecedor_Um

    'Inicializa comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 72444

    'Lê o Fornecedor na tabela RequisicaoCompraTodas
    lErro = Comando_Executar(lComando, "SELECT RequisicaoCompraTodas.Codigo FROM RequisicaoCompraTodas,ItensReqCompraTodos WHERE RequisicaoCompraTodas.NumIntDoc = ItensReqCompraTodos.ReqCompra AND ((RequisicaoCompraTodas.FornCliDestino = ? AND RequisicaoCompraTodas.FilialDestino = ?) OR (ItensReqCompraTodos.Fornecedor = ? AND ItensReqCompraTodos.Filial = ?))", lCodigo, objFilialFornecedor.lCodFornecedor, objFilialFornecedor.iCodFilial, objFilialFornecedor.lCodFornecedor, objFilialFornecedor.iCodFilial)
    If lErro <> AD_SQL_SUCESSO Then gError 72445

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 72446
    
    'Não achou o Fornecedor
    If lErro = AD_SQL_SEM_DADOS Then gError 72408

    Call Comando_Fechar(lComando)

    RequisicaoCompraTodas_Le_FilialFornecedor_Um = SUCESSO

Exit Function

Erro_RequisicaoCompraTodas_Le_FilialFornecedor_Um:

    RequisicaoCompraTodas_Le_FilialFornecedor_Um = gErr

    Select Case gErr

        Case 72444
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 72445, 72446
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_REQUISICAOCOMPRA", gErr)

        Case 72408
            'Erro tratado na rotina chamada

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148717)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Private Function RequisicaoModelo_Le_FilialFornecedor_Um(ByVal objFilialFornecedor As ClassFilialFornecedor, lCodigo As Long) As Long
'Retorna sucesso se achar algum Fornecedor relacionado com alguma  Requisicao Modelo.

Dim lErro As Long
Dim lComando As Long

On Error GoTo Erro_RequisicaoModelo_Le_FilialFornecedor_Um

    'Inicializa comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 72451

    'Lê o Fornecedor na tabela RequisicaoModelo
    lErro = Comando_Executar(lComando, "SELECT RequisicaoModelo.Codigo FROM RequisicaoModelo,ItensReqModelo WHERE RequisicaoModelo.NumIntDoc = ItensReqModelo.ReqModelo AND ((RequisicaoModelo.FornCliDestino = ? AND RequisicaoModelo.FilialDestino = ?) OR (ItensReqModelo.Fornecedor = ? AND ItensReqModelo.Filial = ?)) ", lCodigo, objFilialFornecedor.lCodFornecedor, objFilialFornecedor.iCodFilial, objFilialFornecedor.lCodFornecedor, objFilialFornecedor.iCodFilial)
    If lErro <> AD_SQL_SUCESSO Then gError 72452

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 72453
    
    'Não achou o Fornecedor
    If lErro = AD_SQL_SEM_DADOS Then gError 72414

    Call Comando_Fechar(lComando)

    RequisicaoModelo_Le_FilialFornecedor_Um = SUCESSO

Exit Function

Erro_RequisicaoModelo_Le_FilialFornecedor_Um:

    RequisicaoModelo_Le_FilialFornecedor_Um = gErr

    Select Case gErr

        Case 72414
            'Erro tratado na rotina chamada

        Case 72451
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 72452, 72453
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSREQCOMPRA", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148718)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function


Private Function CotacaoTodas_Le_FilialFornecedor_Um(ByVal objFilialFornecedor As ClassFilialFornecedor, lCodigo As Long) As Long
'Retorna sucesso se achar algum Fornecedor relacionado com Cotacao, baixada ou não.

Dim lErro As Long
Dim lComando As Long

On Error GoTo Erro_CotacaoTodas_Le_FilialFornecedor_Um

    'Inicializa comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 72457

    'Lê o Fornecedor na tabela CotacaoTodas
    lErro = Comando_Executar(lComando, "SELECT Codigo FROM CotacaoTodas WHERE FornCliDestino = ? AND FilialDestino = ? ", lCodigo, objFilialFornecedor.lCodFornecedor, objFilialFornecedor.iCodFilial)
    If lErro <> AD_SQL_SUCESSO Then gError 72458

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 72459
    
    'Não achou o Fornecedor
    If lErro = AD_SQL_SEM_DADOS Then gError 72420

    Call Comando_Fechar(lComando)

    CotacaoTodas_Le_FilialFornecedor_Um = SUCESSO

Exit Function

Erro_CotacaoTodas_Le_FilialFornecedor_Um:

    CotacaoTodas_Le_FilialFornecedor_Um = gErr

    Select Case gErr

        Case 72420
            'Erro tratado na rotina chamada

        Case 72457
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 72458, 72459
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_COTACAOTODAS", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148719)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Private Function CotacaoProdutoTodas_Le_FilialFornecedor_Um(ByVal objFilialFornecedor As ClassFilialFornecedor) As Long
'Retorna sucesso se achar algum Fornecedor relacionado com CotacaoProduto, baixada ou não.

Dim lErro As Long
Dim lComando As Long
Dim lNumIntDoc As Long

On Error GoTo Erro_CotacaoProdutoTodas_Le_FilialFornecedor_Um

    'Inicializa comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 72460

    'Lê o Fornecedor na tabela CotacaoProdutoTodas
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc FROM CotacaoProdutoTodas WHERE Fornecedor = ? AND Filial = ?", lNumIntDoc, objFilialFornecedor.lCodFornecedor, objFilialFornecedor.iCodFilial)
    If lErro <> AD_SQL_SUCESSO Then gError 72461

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 72462
    
    'Não achou o Fornecedor
    If lErro = AD_SQL_SEM_DADOS Then gError 72426

    Call Comando_Fechar(lComando)

    CotacaoProdutoTodas_Le_FilialFornecedor_Um = SUCESSO

Exit Function

Erro_CotacaoProdutoTodas_Le_FilialFornecedor_Um:

    CotacaoProdutoTodas_Le_FilialFornecedor_Um = gErr

    Select Case gErr

        Case 72426
            'Erro tratado na rotina chamada

        Case 72460
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 72461, 72462
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_COTACAOPRODUTOTODAS", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148720)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Private Function PedidoCotacaoTodos_Le_FilialFornecedor_Um(ByVal objFilialFornecedor As ClassFilialFornecedor, lCodigo As Long) As Long
'Retorna sucesso se achar algum Fornecedor relacionado com Pedido deCotacao, baixado ou não.

Dim lErro As Long
Dim lComando As Long

On Error GoTo Erro_PedidoCotacaoTodos_Le_FilialFornecedor_Um

    'Inicializa comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 72463

    'Lê o Fornecedor na tabela PedidoCotacaoTodos
    lErro = Comando_Executar(lComando, "SELECT Codigo FROM PedidoCotacaoTodos WHERE Fornecedor = ? AND Filial=?", lCodigo, objFilialFornecedor.lCodFornecedor, objFilialFornecedor.iCodFilial)
    If lErro <> AD_SQL_SUCESSO Then gError 72464

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 72465
    
    'Não achou o Fornecedor
    If lErro = AD_SQL_SEM_DADOS Then gError 72429

    Call Comando_Fechar(lComando)

    PedidoCotacaoTodos_Le_FilialFornecedor_Um = SUCESSO

Exit Function

Erro_PedidoCotacaoTodos_Le_FilialFornecedor_Um:

    PedidoCotacaoTodos_Le_FilialFornecedor_Um = gErr

    Select Case gErr

        Case 72429
            'Erro tratado na rotina chamada

        Case 72463
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 72464, 72465
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PEDIDOCOTACAOTODOS", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148721)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function


Private Function ConcorrenciaTodas_Le_FilialFornecedor_Um(ByVal objFilialFornecedor As ClassFilialFornecedor, lCodigo As Long) As Long
'Retorna sucesso se achar algum Fornecedor relacionado com Concorrencia

Dim lErro As Long
Dim lComando As Long

On Error GoTo Erro_ConcorrenciaTodas_Le_FilialFornecedor_Um

    'Inicializa comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 72466

    'Lê o Fornecedor na tabela ConcorrenciaTodas
    lErro = Comando_Executar(lComando, "SELECT ConcorrenciaTodas.Codigo FROM ConcorrenciaTodas,ItensConcorrenciaTodos WHERE (ConcorrenciaTodas.NumIntDoc = ItensConcorrenciaTodos.Concorrencia) AND ((ItensConcorrenciaTodos.Fornecedor = ? AND ItensConcorrenciaTodos.Filial = ?) OR (ConcorrenciaTodas.FornCliDestino = ? AND ConcorrenciaTodas.FilialDestino = ?)) ", lCodigo, objFilialFornecedor.lCodFornecedor, objFilialFornecedor.iCodFilial, objFilialFornecedor.lCodFornecedor, objFilialFornecedor.iCodFilial)
    If lErro <> AD_SQL_SUCESSO Then gError 72467

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 72468
    
    'Não achou o Fornecedor
    If lErro = AD_SQL_SEM_DADOS Then gError 72432

    Call Comando_Fechar(lComando)

    ConcorrenciaTodas_Le_FilialFornecedor_Um = SUCESSO

Exit Function

Erro_ConcorrenciaTodas_Le_FilialFornecedor_Um:

    ConcorrenciaTodas_Le_FilialFornecedor_Um = gErr

    Select Case gErr

        Case 72432
            'Erro tratado na rotina chamada

        Case 72466
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 72467, 72468
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONCORRENCIATODAS", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148722)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function CobrancaEletronica_Obter_Borderos(ByVal objCobrancaEletronica As ClassCobrancaEletronica) As Long

Dim lErro As Long
Dim tBorderoCobranca As typeBorderoCobranca
Dim lNumBordero As Long
Dim lComando As Long
Dim objBorderoCobranca As ClassBorderoCobranca

On Error GoTo Erro_CobrancaEletronica_Obter_Borderos
    
    'Abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 51639

    tBorderoCobranca.sConvenio = String(STRING_BORDERO_CONVENIO, 0)
    
    'Lê os dados dos Borderos com o Cobrador passado
    If objCobrancaEletronica.iRegerarArquivo = 0 Then
        lErro = Comando_Executar(lComando, "SELECT CodNossaConta,DiasDeRetencao,TaxaCobranca,TaxaDesconto,Valor,ValorDesconto,Convenio,Status,DataCancelamento,DataContabilCancelamento,CarteiraCobranca, DataEmissao,Cobrador, NumBordero FROM BorderosCobranca WHERE  Cobrador = ? AND Processado <> ? AND NumBordero >= ? AND NumBordero <= ?", tBorderoCobranca.iCodNossaConta, tBorderoCobranca.iDiasDeRetencao, tBorderoCobranca.dTaxaCobranca, tBorderoCobranca.dTaxaDesconto, tBorderoCobranca.dValor, tBorderoCobranca.dValorDesconto, tBorderoCobranca.sConvenio, tBorderoCobranca.iStatus, tBorderoCobranca.dtDataCancelamento, tBorderoCobranca.dtDataContabilCancelamento, tBorderoCobranca.iCodCarteiraCobranca, tBorderoCobranca.dtDataEmissao, tBorderoCobranca.iCobrador, tBorderoCobranca.lNumBordero, objCobrancaEletronica.iCobrador, BORDERO_PROCESSADO, objCobrancaEletronica.iNumBorderoIni, IIf(objCobrancaEletronica.iNumBorderoFim <> 0, objCobrancaEletronica.iNumBorderoFim, 32000))
    Else
        lErro = Comando_Executar(lComando, "SELECT CodNossaConta,DiasDeRetencao,TaxaCobranca,TaxaDesconto,Valor,ValorDesconto,Convenio,Status,DataCancelamento,DataContabilCancelamento,CarteiraCobranca, DataEmissao,Cobrador, NumBordero FROM BorderosCobranca WHERE  Cobrador = ? AND NumBordero >= ? AND NumBordero <= ?", tBorderoCobranca.iCodNossaConta, tBorderoCobranca.iDiasDeRetencao, tBorderoCobranca.dTaxaCobranca, tBorderoCobranca.dTaxaDesconto, tBorderoCobranca.dValor, tBorderoCobranca.dValorDesconto, tBorderoCobranca.sConvenio, tBorderoCobranca.iStatus, tBorderoCobranca.dtDataCancelamento, tBorderoCobranca.dtDataContabilCancelamento, tBorderoCobranca.iCodCarteiraCobranca, tBorderoCobranca.dtDataEmissao, tBorderoCobranca.iCobrador, tBorderoCobranca.lNumBordero, objCobrancaEletronica.iCobrador, objCobrancaEletronica.iNumBorderoIni, IIf(objCobrancaEletronica.iNumBorderoFim <> 0, objCobrancaEletronica.iNumBorderoFim, 32000))
    End If
    If lErro <> AD_SQL_SUCESSO Then Error 51647

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 51648
    'Enquanto encontrar borderos
    Do While lErro = AD_SQL_SUCESSO

        Set objBorderoCobranca = New ClassBorderoCobranca
        
        'Carrega objBorderocobranca com os dados lidos
        Call Transfere_Dados_BorderoCobranca(objBorderoCobranca, tBorderoCobranca)
        
        'Guarda o bordero lido na coleção de borderos
        objCobrancaEletronica.colBorderos.Add objBorderoCobranca
        
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 51646
    
    Loop

    'Fecha o comando
    Call Comando_Fechar(lComando)
    
    CobrancaEletronica_Obter_Borderos = SUCESSO
    
    Exit Function
    
Erro_CobrancaEletronica_Obter_Borderos:

    CobrancaEletronica_Obter_Borderos = Err
    
    Select Case Err
    
        Case 51639
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 51646, 51647, 51648
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BORDERO_COBRANCA", Err)
    
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148723)
    
    End Select

    'Fecha o comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function BancosInfo_Diretorio_Le(sDiretorio As String, Optional ByVal iCobrador As Integer = 0) As Long

Dim lErro As Long
Dim lComando As Long
Dim lComando2 As Long
Dim sDir As String

On Error GoTo Erro_BancosInfo_Diretorio_Le

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 62050
    
    sDir = String(STRING_BANCOINFO_DESCRICAO, 0)

    lErro = Comando_Executar(lComando, "SELECT InfoDescricao FROM BancosInfo WHERE CodBanco = 0 AND InfoCodigo = 1", sDir)
    If lErro <> AD_SQL_SUCESSO Then Error 62051
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 62052
    
    If lErro = AD_SQL_SUCESSO Then sDiretorio = sDir
    
    'Tenta buscar do Cobrador para ver se existe cadastro específico
    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 62050
    
    sDir = String(STRING_BANCOINFO_DESCRICAO, 0)

    lErro = Comando_Executar(lComando2, "SELECT ValorInformacao FROM CobradorInfo WHERE CodCobrador = ? AND CodInformacao = 17", sDir, iCobrador)
    If lErro <> AD_SQL_SUCESSO Then Error 62051
    
    lErro = Comando_BuscarPrimeiro(lComando2)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 62052
    
    If lErro = AD_SQL_SUCESSO Then
        sDiretorio = sDir
    End If
    
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)
    
    BancosInfo_Diretorio_Le = SUCESSO
    
    Exit Function
    
Erro_BancosInfo_Diretorio_Le:

    BancosInfo_Diretorio_Le = Err
    
    Select Case Err
    
        Case 62050
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 62051, 62052
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BANCOSINFO1", Err)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148724)
            
    End Select
    
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)
    
    Exit Function
    
End Function

Function MotivosBaixa_Le(ByVal objMotivosBaixa As ClassMotivosBaixa) As Long

Dim lErro As Long
Dim lComando As Long
Dim tMotivosBaixa As typeMotivosBaixa

On Error GoTo Erro_MotivosBaixa_Le

    'Abre o Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 79657
    
    'Inicializa a string que irá receber a descrição
    tMotivosBaixa.sDescricao = String(STRING_MOTIVOSBAIXA_DESCRICAO, 0)
    
    'Le no BD os dados da tabela MotivosBaixa e guarda no type
    lErro = Comando_Executar(lComando, "SELECT Descricao, Pagamento, Recebimento, PagaComissaoVendas, Subtipo FROM MotivosBaixa WHERE Codigo = ?", tMotivosBaixa.sDescricao, tMotivosBaixa.iPagamento, tMotivosBaixa.iRecebimento, tMotivosBaixa.iPagaComissaoVendas, tMotivosBaixa.iSubTipo, objMotivosBaixa.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 79658
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 79659
    
    'Se não encontrou o motivo => erro
    If lErro = AD_SQL_SEM_DADOS Then gError 79660
    
    'Guarda em objMotivosBaixa
    objMotivosBaixa.sDescricao = tMotivosBaixa.sDescricao
    objMotivosBaixa.iPagamento = tMotivosBaixa.iPagamento
    objMotivosBaixa.iRecebimento = tMotivosBaixa.iRecebimento
    objMotivosBaixa.iPagaComissaoVendas = tMotivosBaixa.iPagaComissaoVendas
    objMotivosBaixa.iSubTipo = tMotivosBaixa.iSubTipo
    
    'Fecha o comando
    Call Comando_Fechar(lComando)
    
    MotivosBaixa_Le = SUCESSO
    
    Exit Function

Erro_MotivosBaixa_Le:

    MotivosBaixa_Le = gErr
    
    Select Case gErr
    
        Case 79657
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 79658, 79659
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOTIVOSBAIXA", gErr, objMotivosBaixa.iCodigo)
        
        Case 79660
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148725)
    
    End Select
    
    'Fecha o comando
    Call Comando_Fechar(lComando)
    
    Exit Function
    
End Function

Function FilialFornecedor_Testa_CGC(ByVal lCodFornecedor As Long, ByVal iCodFilial As Integer, ByVal sCgc As String) As Long
'Verifica se tem outro fornecedor com o mesmo CGC e dá aviso.
'Não está levando em conta Filial, será melhorado futuramente

' *** Função alterada em 09/08/2001 por Luiz G.F.Nogueira ***
' *** A função agora verifica também se existe outro fornecedor
' que tenha o mesmo prefixo de CGC, ou seja, alerta que pode estar sendo
' cadastrada uma filial com código diferente do código da matriz ***

Dim lErro As Long
Dim lFornecedor As Long
Dim vbMsgRes As VbMsgBoxResult
Dim alComando(1 To 2) As Long
Dim iIndice As Integer
Dim sCgcAux As String

On Error GoTo Erro_FilialFornecedor_Testa_CGC
     
    'Inicializa comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 80213
    Next
    
    'Lê em Filial Fornecedor algum Fornecedor com o Mesmo CGC ou CPF
    lErro = Comando_Executar(alComando(2), "SELECT CodFornecedor FROM FiliaisFornecedores WHERE CGC = ? AND CodFornecedor <> ?", lFornecedor, sCgc, lCodFornecedor)
    If lErro <> AD_SQL_SUCESSO Then gError 80214

    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 80215
    
    'Se encontrou outro fornecedor com o mesmo CGC / CPF
    If lErro = AD_SQL_SUCESSO Then
    
        'Se é um CGC
        If Len(Trim(sCgc)) = STRING_CGC Then
        
            'Formata o CGC que será exibido na mensagem de aviso
            sCgcAux = Format(sCgc, "00\.000\.000\/0000-00; ; ; ")
            
            'Envia aviso se deve se gravar o fornecedor com o mesmo CGC de um já Gravado
            vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_FORNECEDOR_CGC_IGUAL", sCgcAux)

            If vbMsgRes = vbNo Then gError 80216
            
        'Senão, significa que é um CPF
        Else
        
            'Formata o CGC que será exibido na mensagem de aviso
            sCgcAux = Format(sCgc, "000\.000\.000-00; ; ; ")
        
            'Envia aviso se deve se gravar o fornecedor com o mesmo CGC de um já Gravado
            vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_FORNECEDOR_CPF_IGUAL", sCgcAux)

            If vbMsgRes = vbNo Then gError 90694
        
        End If
            
    
    'Senão
    'Procura outro fornecedor com o mesmo prefixo de CGC
    Else
    
        'Se foi passado um CGC
        'Esse teste é feito porque pode ter sido passado um CPF
        If Len(Trim(sCgc)) = STRING_CGC Then
        
            'Pega o prefixo do CGC
            sCgcAux = Mid(sCgc, 1, STRING_PREFIXO_CGC) & "%"

            'Lê em Filial Fornecedor algum Fornecedor com o Mesmo prefixo de CGC ou CPF
            lErro = Comando_Executar(alComando(1), "SELECT CodFornecedor FROM FiliaisFornecedores WHERE CGC LIKE ? AND CodFornecedor <> ?", lFornecedor, sCgcAux, lCodFornecedor)
            If lErro <> AD_SQL_SUCESSO Then gError 90691
            
            lErro = Comando_BuscarPrimeiro(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 90692
            
            'Se encontrou aviso:
            If lErro = AD_SQL_SUCESSO Then
            
            'Formata o prefixo de CGC
            sCgcAux = Format(Mid(sCgc, 1, STRING_PREFIXO_CGC), "00\.000\.000\")
            
            'Envia aviso se deve se gravar o fornecedor com o mesmo prefixo de CGC de um já Gravado
            vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_FORNECEDOR_PREFIXO_CGC_IGUAL", sCgcAux)
    
            If vbMsgRes = vbNo Then gError 90693
            
            End If
        
        End If
    
    End If

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    FilialFornecedor_Testa_CGC = SUCESSO
'
    Exit Function
    
Erro_FilialFornecedor_Testa_CGC:

    FilialFornecedor_Testa_CGC = gErr
    
    Select Case gErr
        
        Case 80213
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 80214, 80215, 90691, 90692
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FORNECEDORES", gErr)
        
        Case 80216, 90693, 90694 'CASO NAO QUEIRA GRAVAR
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148726)

    End Select
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function CCI_ObterRelTes_Total(ByVal dtData As Date, dSldIni As Double, alComando() As Long) As Long
'IMPORTANTE: específica para classe ClassRelTes de apoio a execucao de relatorios
'Obtém o saldo inicial na data passada como parametro
'ATENCAO: se o lComando vier zerado, será aberto nesta funcao e ficará aberto.

Dim lErro As Long
Dim dtDataSaldoInicial As Date
Dim iIndice As Integer
Dim iAno As Integer
Dim iMes As Integer
Dim dSldIni1 As Double
Dim dSldIni2 As Double
Dim dSldIni3 As Double
Dim dSldIni4 As Double
Dim sSQL As String
Dim dtData1 As Date

On Error GoTo Erro_CCI_ObterRelTes_Total

    For iIndice = 1 To 4
        If alComando(iIndice) = 0 Then
            alComando(iIndice) = Comando_AbrirExt(GL_lConexaoRel)
            If alComando(iIndice) = 0 Then gError 69056
        End If
    Next

    'obter o saldo inicial na implantacao da conta
    lErro = Comando_Executar(alComando(1), "SELECT SUM(SaldoInicial) FROM ContasCorrentesInternas", dSldIni1)
    If lErro <> AD_SQL_SUCESSO Then gError 69057
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 69058
    
    iAno = Year(dtData)
            
    'obter os totais movimentados até o ano anterior ao inicial
    lErro = Comando_Executar(alComando(2), "SELECT SUM(Cred01+Cred02+Cred03+Cred04+Cred05+Cred06+Cred07+Cred08+Cred09+Cred10+Cred11+Cred12-Deb01-Deb02-Deb03-Deb04-Deb05-Deb06-Deb07-Deb08-Deb09-Deb10-Deb11-Deb12) FROM CCIMov WHERE Ano <= ? ", dSldIni2, iAno - 1)
    If lErro <> AD_SQL_SUCESSO Then gError 69059
    
    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 69060
        
    iMes = Month(dtData)
        
    'obter os totais movimentados no ano corrente até o mes anterior ao mes da data em questao
            
    If iMes > 1 Then
            
        For iIndice = 1 To iMes - 1
            sSQL = sSQL + "Cred" + Format(iIndice, "00") + "-Deb" + Format(iIndice, "00") + "+"
        Next
            
        sSQL = left(sSQL, Len(sSQL) - 1)
            
        lErro = Comando_Executar(alComando(3), "SELECT SUM(" + sSQL + ") FROM CCIMov WHERE Ano = ? ", dSldIni3, iAno)
        If lErro <> AD_SQL_SUCESSO Then gError 69061
    
        lErro = Comando_BuscarPrimeiro(alComando(3))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 69062
        
    End If
        
    dtData1 = CDate("1/" + CStr(iMes) + "/" + CStr(iAno))
        
    lErro = Comando_Executar(alComando(4), "SELECT SUM(Cred-Deb) FROM CCIMovDia WHERE Data >= ? AND Data < ?", dSldIni4, dtData1, dtData)
    If lErro <> AD_SQL_SUCESSO Then gError 69063
    
    lErro = Comando_BuscarPrimeiro(alComando(4))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 69064
        
    dSldIni = dSldIni1 + dSldIni2 + dSldIni3 + dSldIni4
            
    CCI_ObterRelTes_Total = SUCESSO

    Exit Function

Erro_CCI_ObterRelTes_Total:

    CCI_ObterRelTes_Total = gErr

    Select Case gErr

        Case 69056
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 69057, 69058
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONTASCORRENTESINTERNAS", gErr)

        Case 69059, 69060, 69061, 69062
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CCIMOV3", gErr)

        Case 69063, 69064
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CCIMOVDIA1", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148727)

    End Select

    Exit Function
    
End Function

Function CCI_ObterRelTesAplic_Total(ByVal dtData As Date, dSldAplic As Double, alComando() As Long) As Long
'IMPORTANTE: específica para classe ClassRelTes de apoio a execucao de relatorios
'Obtém o saldo de aplicações até data passada como parametro
'ATENCAO: se o lComando vier zerado, será aberto nesta funcao e ficará aberto.

Dim lErro As Long
Dim dtDataSaldoInicial As Date
Dim iIndice As Integer
Dim iAno As Integer
Dim iMes As Integer
Dim dSldAplic1 As Double
Dim dSldAplic2 As Double
Dim dSldAplic3 As Double
Dim sSQL As String
Dim dtData1 As Date

On Error GoTo Erro_CCI_ObterRelTesAplic_Total

    For iIndice = 1 To 3
        If alComando(iIndice) = 0 Then
            alComando(iIndice) = Comando_AbrirExt(GL_lConexaoRel)
            If alComando(iIndice) = 0 Then gError 69065
        End If
    Next

    iAno = Year(dtData)
    
    'obter os totais aplicados até o ano anterior ao ano da data em questao
    lErro = Comando_Executar(alComando(1), "SELECT SUM(Aplic01+Aplic02+Aplic03+Aplic04+Aplic05+Aplic06+Aplic07+Aplic08+Aplic09+Aplic10+Aplic11+Aplic12) FROM CCIMov WHERE Ano <= ? ", dSldAplic1, iAno - 1)
    If lErro <> AD_SQL_SUCESSO Then gError 69066

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 69067

    dSldAplic = dSldAplic1

    iMes = Month(dtData)

    'obter os totais aplicados no ano corrente até o mes anterior ao mes da data em questao
    
    If iMes > 1 Then
    
        For iIndice = 1 To iMes - 1
            sSQL = sSQL + "Aplic" + Format(iIndice, "00") + "+"
        Next
    
        sSQL = left(sSQL, Len(sSQL) - 1)
    
        lErro = Comando_Executar(alComando(2), "SELECT SUM( " + sSQL + " ) FROM CCIMov WHERE Ano = ? ", dSldAplic2, iAno)
        If lErro <> AD_SQL_SUCESSO Then gError 69068

        lErro = Comando_BuscarPrimeiro(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 69069

        dSldAplic = dSldAplic + dSldAplic2

    End If

    dtData1 = CDate("1/" + CStr(iMes) + "/" + CStr(iAno))

    lErro = Comando_Executar(alComando(3), "SELECT SUM(Aplic) FROM CCIMovDia WHERE Data >= ? AND Data <= ?", dSldAplic3, dtData1, dtData)
    If lErro <> AD_SQL_SUCESSO Then gError 69070

    lErro = Comando_BuscarPrimeiro(alComando(3))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 69071

    dSldAplic = dSldAplic + dSldAplic3
        
    CCI_ObterRelTesAplic_Total = SUCESSO

    Exit Function

Erro_CCI_ObterRelTesAplic_Total:

    CCI_ObterRelTesAplic_Total = gErr

    Select Case gErr

        Case 69065
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 69066, 69067, 69068, 69069
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CCIMOV3", gErr)

        Case 69070, 69071
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CCIMOVDIA1", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148728)

    End Select

    Exit Function
    
End Function

Function CCI_ObterRelTesEntradaSaida(ByVal iCodigoConta As Integer, ByVal dtDataInicial As Date, ByVal dtDataFinal As Date, dValorEntrada As Double, dValorSaida As Double, alComando() As Long) As Long
'IMPORTANTE: específica para classe ClassRelTes de apoio a execucao de relatorios
'Obtem os valores de Entradas e Saídas para uma conta específica
'ATENCAO: se o lComando vier zerado, será aberto nesta funcao e ficará aberto.

Dim lErro As Long
Dim iIndice As Integer

On Error GoTo Erro_CCI_ObterRelTesEntradaSaida

    For iIndice = 1 To 3
        If alComando(iIndice) = 0 Then
            alComando(iIndice) = Comando_AbrirExt(GL_lConexaoRel)
            If alComando(iIndice) = 0 Then gError 69080
        End If
    Next

    'obter os totais aplicados até o ano anterior ao ano da data em questao
    lErro = Comando_Executar(alComando(1), "SELECT SUM(Cred), SUM(Deb) FROM CCIMovDia WHERE CodContaCorrenteInterna = ? AND Data >= ? AND Data <= ? ", dValorEntrada, dValorSaida, iCodigoConta, dtDataInicial, dtDataFinal)
    If lErro <> AD_SQL_SUCESSO Then gError 69081

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 69082
        
    CCI_ObterRelTesEntradaSaida = SUCESSO

    Exit Function

Erro_CCI_ObterRelTesEntradaSaida:

    CCI_ObterRelTesEntradaSaida = gErr

    Select Case gErr

        Case 69080
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 69081, 69082
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CCIMOVDIA1", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148729)

    End Select

    Exit Function
    
End Function


Private Sub Transfere_Dados_BorderoCobranca(ByVal objBorderoCobranca As ClassBorderoCobranca, tBorderoCobranca As typeBorderoCobranca)
'Trasfere os dados o tBorderoCobranca para o objBorderoCobranca

    With tBorderoCobranca
    
        objBorderoCobranca.dTaxaCobranca = .dTaxaCobranca
        objBorderoCobranca.dTaxaDesconto = .dTaxaDesconto
        objBorderoCobranca.dtDataCancelamento = .dtDataCancelamento
        objBorderoCobranca.dtDataContabilCancelamento = .dtDataContabilCancelamento
        objBorderoCobranca.dtDataEmissao = .dtDataEmissao
        objBorderoCobranca.dValor = .dValor
        objBorderoCobranca.dValorDesconto = .dValorDesconto
        objBorderoCobranca.iCobrador = .iCobrador
        objBorderoCobranca.iCodCarteiraCobranca = .iCodCarteiraCobranca
        objBorderoCobranca.iCodNossaConta = .iCodNossaConta
        objBorderoCobranca.iDiasDeRetencao = .iDiasDeRetencao
        objBorderoCobranca.iStatus = .iStatus
        objBorderoCobranca.lNumBordero = .lNumBordero
        objBorderoCobranca.sConvenio = .sConvenio
    
    End With
    
    Exit Sub
    
End Sub

Public Function MovContaCorrente_Le_PagtosAntecipados(ByVal objMovContaCorrente As ClassMovContaCorrente, ByVal objAntecipPag As ClassAntecipPag) As Long
'Lê nas tabelas MovContaCorrente e PagtosAntecipados o NumIntPag de um Adiantamento à Fornecedor. Campos utilizados para leitura: Fornecedor, Filial, CodConta,TipoMovimento, TipoMeioPagto, Numero e DataMovimento

Dim lNumIntPag As Long
Dim lErro As Long
Dim lComando As Long

On Error GoTo Erro_MovContaCorrente_Le_PagtosAntecipados
        
    'Abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 79887
    
    'Lê o Adiantamento
    lErro = Comando_Executar(lComando, "SELECT NumIntPag FROM MovimentosContaCorrente, PagtosAntecipados WHERE PagtosAntecipados.NumMovto = MovimentosContaCorrente.NumMovto AND MovimentosContaCorrente.Tipo = ? AND MovimentosContaCorrente.CodConta = ? AND MovimentosContaCorrente.TipoMeioPagto = ? AND MovimentosContaCorrente.Numero = ? AND MovimentosContaCorrente.DataMovimento = ? AND PagtosAntecipados.Fornecedor = ? AND PagtosAntecipados.Filial_Fornecedor = ?", lNumIntPag, MOVCCI_PAGTO_ANTECIPADO, objMovContaCorrente.iCodConta, objMovContaCorrente.iTipoMeioPagto, objMovContaCorrente.lNumero, objMovContaCorrente.dtDataMovimento, objAntecipPag.lFornecedor, objAntecipPag.iFilial)
    If lErro <> AD_SQL_SUCESSO Then gError 79888
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 79890
        
    'Se não encontrou = > erro
    If lErro = AD_SQL_SEM_DADOS Then gError 79889
    
    'Guarda no obj o NumIntPag
    objAntecipPag.lNumIntPag = lNumIntPag
    
    'Fecha o comando
    Call Comando_Fechar(lComando)
    
    MovContaCorrente_Le_PagtosAntecipados = SUCESSO
    
    Exit Function
    
Erro_MovContaCorrente_Le_PagtosAntecipados:

    MovContaCorrente_Le_PagtosAntecipados = gErr
    
    Select Case gErr
    
        Case 79887
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 79888, 79890
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PAGTOSANTECIPADOS2", gErr, objAntecipPag.lFornecedor, objAntecipPag.iFilial)
        
        Case 79889
            'Sem dados
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148730)
       
    End Select
    
    'Fecha o comando
    Call Comando_Fechar(lComando)
    
    Exit Function
    
End Function

Function BorderoChequePre_Le_Cheques(ByVal colChequePre As Collection, ByVal dtDataDeposito As Date) As Long
'monta uma colecao de cheques-pre que irao ser depositados

Dim lErro As Long, objChequePre As ClassChequePre
Dim lComando As Long
Dim tChequePre As typeChequePre

On Error GoTo Erro_BorderoChequePre_Le_Cheques

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 56640
                
    'Selecionar os cheques pre com data p/deposito até a data informada que tenham NumBordero = 0
    
    With tChequePre
    
        'inicializa os campos do tipo string
        .sContaCorrente = String(STRING_CONTA_CORRENTE, 0)
        .sAgencia = String(STRING_AGENCIA, 0)
     
        'Verifica se empresa é filial
        If giFilialEmpresa = EMPRESA_TODA Then
            lErro = Comando_Executar(lComando, "SELECT NumIntCheque, Cliente, Filial, Banco, Agencia, ContaCorrente, Numero, DataDeposito, Valor FROM ChequesPre_Disp WHERE DataDeposito <= ? AND Status <> ?", .lNumIntCheque, .lCliente, .iFilial, .iBanco, .sAgencia, .sContaCorrente, .lNumero, .dtDataDeposito, .dtDataDeposito, .dValor, dtDataDeposito, STATUS_EXCLUIDO)
        Else
            lErro = Comando_Executar(lComando, "SELECT NumIntCheque, Cliente, Filial, Banco, Agencia, ContaCorrente, Numero, DataDeposito, Valor FROM ChequesPre_Disp WHERE FilialEmpresa = ? AND DataDeposito <= ? AND Status <> ?", .lNumIntCheque, .lCliente, .iFilial, .iBanco, .sAgencia, .sContaCorrente, .lNumero, .dtDataDeposito, .dValor, giFilialEmpresa, dtDataDeposito, STATUS_EXCLUIDO)
        End If
    
    End With
    
    If lErro <> AD_SQL_SUCESSO Then gError 7721

    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 7722

    'se nao houver cheques a depositar erro
    If lErro <> AD_SQL_SUCESSO Then gError 7723

    'Percorrer os cheques
    Do While lErro <> AD_SQL_SEM_DADOS
    
        'adicionar o cheque na colecao
        Set objChequePre = New ClassChequePre
                    
        objChequePre.lNumIntCheque = tChequePre.lNumIntCheque
        objChequePre.lCliente = tChequePre.lCliente
        objChequePre.iFilial = tChequePre.iFilial
        objChequePre.iBanco = tChequePre.iBanco
        objChequePre.sAgencia = tChequePre.sAgencia
        objChequePre.sContaCorrente = tChequePre.sContaCorrente
        objChequePre.lNumero = tChequePre.lNumero
        objChequePre.dtDataDeposito = tChequePre.dtDataDeposito
        objChequePre.dValor = tChequePre.dValor
        objChequePre.iChequeSel = MARCADO
        
        colChequePre.Add objChequePre
        
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 7725
        
    Loop
    
    Call Comando_Fechar(lComando)
    
    BorderoChequePre_Le_Cheques = SUCESSO
     
    Exit Function
    
Erro_BorderoChequePre_Le_Cheques:

    BorderoChequePre_Le_Cheques = gErr
     
    Select Case gErr
          
        Case 56640, 87055
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 7721, 7722, 7725, 87057, 87059
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUES_PRE_BORDERO", gErr)
        
        Case 7723 'nao há cheque pre a depositar até a data informada
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BORDERO_SEM_CHEQUES_PRE", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148731)
     
    End Select
     
    Call Comando_Fechar(lComando)
        
    Exit Function

End Function

Function TituloPagar_Le1(ByVal objTituloPagar As ClassTituloPagar) As Long
'Lê Titulo a Pagar com o Número Interno passado como parâmetro inclusive os excluidos logicamente (Status=STATUS_EXCLUIDO)

Dim lErro As Long
Dim lComando As Long
Dim tTituloPagar As typeTituloPagar

On Error GoTo Erro_TituloPagar_Le1

    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 89119
    
    tTituloPagar.sSiglaDocumento = String(STRING_SIGLA_DOCUMENTO, 0)
    tTituloPagar.sObservacao = String(STRING_TITULO_OBSERVACAO, 0)
    tTituloPagar.sHistorico = String(STRING_NFSPAG_HISTORICO, 0)
    
    
    'Seleciona o TituloPagar a partir do NumIntDoc
    lErro = Comando_Executar(lComando, "SELECT FilialEmpresa, Fornecedor, Filial, SiglaDocumento, NumTitulo, DataEmissao, Saldo, NumParcelas, ValorTotal, ValorSeguro, ValorFrete, OutrasDespesas, ValorProdutos, ValorICMS, ValorICMSSubst, CreditoICMS, ValorIPI, CreditoIPI, ValorIRRF, ValorINSS, INSSRetido, DataRegistro, " & _
        "CondicaoPagto, Observacao, Status, FilialPedCompra, NumPedCompra, PISRetido, COFINSRetido, CSLLRetido, TaxaMoeda, Historico FROM TitulosPag WHERE NumIntDoc = ?", tTituloPagar.iFilialEmpresa, tTituloPagar.lFornecedor, tTituloPagar.iFilial, tTituloPagar.sSiglaDocumento, tTituloPagar.lNumTitulo, tTituloPagar.dtDataEmissao, tTituloPagar.dSaldo, tTituloPagar.iNumParcelas, tTituloPagar.dValorTotal, tTituloPagar.dValorSeguro, tTituloPagar.dValorFrete, tTituloPagar.dOutrasDespesas, tTituloPagar.dValorProdutos, tTituloPagar.dValorICMS, tTituloPagar.dValorICMSSubst, tTituloPagar.iCreditoICMS, tTituloPagar.dValorIPI, tTituloPagar.iCreditoIPI, tTituloPagar.dValorIRRF, tTituloPagar.dValorINSS, tTituloPagar.iINSSRetido, tTituloPagar.dtDataRegistro, tTituloPagar.iCondicaoPagto, _
        tTituloPagar.sObservacao, tTituloPagar.iStatus, tTituloPagar.iFilialPedCompra, tTituloPagar.lNumPedCompra, tTituloPagar.dPISRetido, tTituloPagar.dCOFINSRetido, tTituloPagar.dCSLLRetido, tTituloPagar.dTaxaMoeda, tTituloPagar.sHistorico, objTituloPagar.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 89120
    
    'Tenta ler
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 89121
    
    'Se não encontrou --> Erro
    If lErro = AD_SQL_SEM_DADOS Then gError 89122
    
    tTituloPagar.lNumIntDoc = objTituloPagar.lNumIntDoc
    
    'Preenche objTituloPagar com os dados do Título
    Call TituloPagar_MoverCamposObj(objTituloPagar, tTituloPagar)

    'Fecha o comando
    Call Comando_Fechar(lComando)
    
    TituloPagar_Le1 = SUCESSO
    
    Exit Function
    
Erro_TituloPagar_Le1:

    TituloPagar_Le1 = gErr
    
    Select Case gErr
    
        Case 89119
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 89120, 89121
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TITULOSPAG", gErr, objTituloPagar.lNumIntDoc)
        
        Case 89122  'Título não encontrado
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148732)
    
    End Select
    
    'Fecha o comando
    Call Comando_Fechar(lComando)
    
    Exit Function
    
End Function


Function BorderoPag_RecuperarSelecao(ByVal colInfoParcPagBD As Collection) As Long
'Busca no BD status das parcelas

'Função transferida p/ cá por Leo em 14/11/01

Dim lErro As Long
Dim iIndice As Integer
Dim lComando As Long
Dim lNumIntDoc As Long
Dim iStatus As Integer
Dim objInfoParcPagBD As ClassInfoParcPag
Dim lTransacao As Long
Dim dValorMulta As Double
Dim dValorJuros As Double
Dim dValorDesconto As Double

On Error GoTo Erro_BorderoPag_RecuperarSelecao

    'Inicializar comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 90424
    
    
    'Alterado por Leo em 09/11/01
    'incluidos os campos Multa, Juros e desconto.
    
    'Lê a tabela BorderoPagSelecao
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc, Status, ValorMulta, ValorJuros, ValorDesconto FROM BorderoPagSelecao", _
    lNumIntDoc, iStatus, dValorMulta, dValorJuros, dValorDesconto)
    If lErro <> AD_SQL_SUCESSO Then gError 90425
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 90426
    
    Do While lErro <> AD_SQL_SEM_DADOS
    
        Set objInfoParcPagBD = New ClassInfoParcPag
                
        'Carrega o Obj com os dados do BD
        objInfoParcPagBD.lNumIntParc = lNumIntDoc
        objInfoParcPagBD.iSeqCheque = iStatus
        objInfoParcPagBD.dValorJuros = dValorJuros
        objInfoParcPagBD.dValorMulta = dValorMulta
        objInfoParcPagBD.dValorDesconto = dValorDesconto
        
        'Adiciona o Obj na Coleção
        colInfoParcPagBD.Add objInfoParcPagBD
        
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 90427

    Loop
    
    'Fechamento comando
    Call Comando_Fechar(lComando)

    BorderoPag_RecuperarSelecao = SUCESSO

    Exit Function

Erro_BorderoPag_RecuperarSelecao:

    BorderoPag_RecuperarSelecao = gErr

    Select Case gErr

        Case 90424
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 90425, 90426, 90427
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BORDEROPAGSELECAO", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148733)

    End Select

    'Fechamento comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Public Function BaixaAntecipDebCliente_Le_Adiantamentos(ByVal objBaixaAntecipDebCliente As ClassBaixaAntecipDebCliente) As Long

Dim lErro As Long
Dim lComando As Long
Dim tInfoBaixaAntecipDebCli As typeInfoBaixaAntecipDebCli
Dim sSelect As String

On Error GoTo Erro_BaixaAntecipDebCliente_Le_Adiantamentos

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 94629

    'Monta o Select que será executado
    Call BaixaAntecipDebCliente_Le_Adiantamentos1(sSelect, objBaixaAntecipDebCliente)

    'Faz o Bind dos campos que serão selecionados
    lErro = BaixaAntecipDebCliente_Le_Adiantamentos2(lComando, sSelect, tInfoBaixaAntecipDebCli)
    If lErro <> SUCESSO Then gError 94630

    'Faz o Bind dos campos que estão sendo passados para a cláusula WHERE
    lErro = BaixaAntecipDebCliente_Le_Adiantamentos3(lComando, sSelect, tInfoBaixaAntecipDebCli, objBaixaAntecipDebCliente)
    If lErro <> SUCESSO Then gError 94650

    'Executa a leitura do BD e guarda os dados lidos no obj
    lErro = BaixaAntecipDebCliente_Le_Adiantamentos4(lComando, tInfoBaixaAntecipDebCli, objBaixaAntecipDebCliente)
    If lErro <> SUCESSO And lErro <> 94654 Then gError 94651

    'Se não encontrou => erro. O erro deve ser tratado na rotina chamadora
    If lErro = 94654 Then gError 94664

    Call Comando_Fechar(lComando)

    BaixaAntecipDebCliente_Le_Adiantamentos = SUCESSO

    Exit Function

Erro_BaixaAntecipDebCliente_Le_Adiantamentos:

    BaixaAntecipDebCliente_Le_Adiantamentos = gErr

    Select Case gErr

        Case 94629
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr, Error$)

        Case 94630, 94650, 94651

        Case 94664 'Sem Dados

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148734)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Private Sub BaixaAntecipDebCliente_Le_Adiantamentos1(sSelect As String, ByVal objBaixaAntecipDebCliente As ClassBaixaAntecipDebCliente)

Dim sFrom As String
Dim sWhere As String
Dim sOrderBy As String
Dim sFiltro As String

    'Monta a parte fixa do select
    sSelect = "SELECT RecebAntecipados.NumIntRec, RecebAntecipados.Excluido, RecebAntecipados.NumMovto, RecebAntecipados.SaldoNaoApropriado, MovimentosContaCorrente.FilialEmpresa, MovimentosContaCorrente.CodConta, MovimentosContaCorrente.DataMovimento, MovimentosContaCorrente.Valor, MovimentosContaCorrente.TipoMeioPagto, MovimentosContaCorrente.Numero, ContasCorrentesInternas.NomeReduzido "
    sFrom = "FROM RecebAntecipados, MovimentosContaCorrente, ContasCorrentesInternas "
    sWhere = "WHERE RecebAntecipados.SaldoNaoApropriado > ? AND RecebAntecipados.Excluido = ? AND RecebAntecipados.Cliente = ? AND RecebAntecipados.Filial_Cliente = ? AND RecebAntecipados.NumMovto = MovimentosContaCorrente.NumMovto AND MovimentosContaCorrente.CodConta = ContasCorrentesInternas.Codigo "
    sOrderBy = "ORDER BY MovimentosContaCorrente.DataMovimento"

    'Monta a parte dinâmica da cláusula WHERE
    'Se a data de emissão inicial está preenchida
    If objBaixaAntecipDebCliente.dtDataEmissaoDe <> DATA_NULA Then

        'Acrescenta à cláusula WHERE o filtro de DataMovimento maior igual à Data Inicial informada
        sWhere = sWhere & "AND MovimentosContaCorrente.DataMovimento >= ? "

    End If

    'Se a data de emissão final está preenchida
    If objBaixaAntecipDebCliente.dtDataEmissaoAte <> DATA_NULA Then

        'Acrescenta à cláusula WHERE o filtro de DataMovimento menor igual à Data Final informada
        sWhere = sWhere & "AND MovimentosContaCorrente.DataMovimento <= ? "

    End If

    'Se foi informada uma conta corrente específica para filtro
    If objBaixaAntecipDebCliente.iCtaCorrenteSelecionada <> -1 Then

        'Acrescenta à cláusula WHERE o filtro de Conta Corrente
        sWhere = sWhere & "AND MovimentosContaCorrente.CodConta = ? "

    End If

    Call CF("FilialEmpresa_Le_Filtro_Filial2", sFiltro, "MovimentosContaCorrente")

    sWhere = sWhere & sFiltro

    sSelect = sSelect & sFrom & sWhere & sOrderBy

End Sub

Private Function BaixaAntecipDebCliente_Le_Adiantamentos2(ByVal lComando As Long, ByVal sSelect As String, tInfoBaixaAntecipDebCli As typeInfoBaixaAntecipDebCli) As Long

Dim iRetorno As Integer

On Error GoTo Erro_BaixaAntecipDebCliente_Le_Adiantamentos2

    With tInfoBaixaAntecipDebCli

        iRetorno = Comando_PrepararInt(lComando, sSelect)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 94631

        .vlNumIntDocumento = CLng(.vlNumIntDocumento)
        iRetorno = Comando_BindVarInt(lComando, .vlNumIntDocumento)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 94632

        .viExcluido = CInt(.viExcluido)
        iRetorno = Comando_BindVarInt(lComando, .viExcluido)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 94633

        .vlNumMovto = CLng(.vlNumMovto)
        iRetorno = Comando_BindVarInt(lComando, .vlNumMovto)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 94634

        .vdSaldoNaoApropriado = CDbl(.vdSaldoNaoApropriado)
        iRetorno = Comando_BindVarInt(lComando, .vdSaldoNaoApropriado)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 94635

        .viFilial = CInt(.viFilial)
        iRetorno = Comando_BindVarInt(lComando, .viFilial)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 94656

        .viCodConta = CInt(.viCodConta)
        iRetorno = Comando_BindVarInt(lComando, .viCodConta)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 94661

        .vdtDataEmissao = CDate(.vdtDataEmissao)
        iRetorno = Comando_BindVarInt(lComando, .vdtDataEmissao)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 94638

        .vdValor = CDbl(.vdValor)
        iRetorno = Comando_BindVarInt(lComando, .vdValor)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 94639

        .viTipoMeioPagto = CInt(.viTipoMeioPagto)
        iRetorno = Comando_BindVarInt(lComando, .viTipoMeioPagto)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 94640

        .vlNumero = CLng(.vlNumero)
        iRetorno = Comando_BindVarInt(lComando, .vlNumero)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 94641

        .vsNomeReduzidoConta = CStr(.vsNomeReduzidoConta)
        iRetorno = Comando_BindVarInt(lComando, .vsNomeReduzidoConta)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 94642

    End With

    BaixaAntecipDebCliente_Le_Adiantamentos2 = SUCESSO

    Exit Function

Erro_BaixaAntecipDebCliente_Le_Adiantamentos2:

    BaixaAntecipDebCliente_Le_Adiantamentos2 = gErr

    Select Case gErr

        Case 94631 To 94642, 94656, 94661
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RECEBANTECIPADOS", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148735)

    End Select

    Exit Function

End Function

Private Function BaixaAntecipDebCliente_Le_Adiantamentos3(ByVal lComando As Long, ByVal sSelect As String, tInfoBaixaAntecipDebCli As typeInfoBaixaAntecipDebCli, ByVal objBaixaAntecipDebCliente As ClassBaixaAntecipDebCliente) As Long

Dim iRetorno As Integer

On Error GoTo Erro_BaixaAntecipDebCliente_Le_Adiantamentos3

    With tInfoBaixaAntecipDebCli


        .vdSaldoNaoApropriado = DELTA_VALORMONETARIO
        iRetorno = Comando_BindVarInt(lComando, .vdSaldoNaoApropriado)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 94659

        .viExcluido = NAO_EXCLUIDO
        iRetorno = Comando_BindVarInt(lComando, .viExcluido)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 94643

        .vlCliente = objBaixaAntecipDebCliente.lCliente
        iRetorno = Comando_BindVarInt(lComando, .vlCliente)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 94644

        .viFilial_Cliente = objBaixaAntecipDebCliente.iFilialCliente
        iRetorno = Comando_BindVarInt(lComando, .viFilial_Cliente)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 94645

        If objBaixaAntecipDebCliente.dtDataEmissaoDe <> DATA_NULA Then
            .vdtDataEmissao = objBaixaAntecipDebCliente.dtDataEmissaoDe
            iRetorno = Comando_BindVarInt(lComando, .vdtDataEmissao)
            If (iRetorno <> AD_SQL_SUCESSO) Then gError 94647
        End If

        If objBaixaAntecipDebCliente.dtDataEmissaoAte <> DATA_NULA Then
            .vdtDataEmissao = objBaixaAntecipDebCliente.dtDataEmissaoAte
            iRetorno = Comando_BindVarInt(lComando, .vdtDataEmissao)
            If (iRetorno <> AD_SQL_SUCESSO) Then gError 94648
        End If

        If objBaixaAntecipDebCliente.iCtaCorrenteSelecionada <> COMBO_INDICE Then
            .viCodConta = CInt(objBaixaAntecipDebCliente.iCtaCorrenteSelecionada)
            iRetorno = Comando_BindVarInt(lComando, .viCodConta)
            If (iRetorno <> AD_SQL_SUCESSO) Then gError 94649
        End If

    End With

    BaixaAntecipDebCliente_Le_Adiantamentos3 = SUCESSO

    Exit Function

Erro_BaixaAntecipDebCliente_Le_Adiantamentos3:

    BaixaAntecipDebCliente_Le_Adiantamentos3 = gErr

    Select Case gErr

        Case 94643 To 94649, 94659
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RECEBANTECIPADOS1", gErr, objBaixaAntecipDebCliente.lCliente, objBaixaAntecipDebCliente.iFilialCliente)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148736)

    End Select

    Exit Function

End Function

Private Function BaixaAntecipDebCliente_Le_Adiantamentos4(ByVal lComando As Long, tInfoBaixaAntecipDebCli As typeInfoBaixaAntecipDebCli, ByVal objBaixaAntecipDebCliente As ClassBaixaAntecipDebCliente) As Long

Dim iRetorno As Integer
Dim objInfoBaixaAntecipDebCli As ClassInfoBaixaAntecipDebCli
Dim lErro As Long

On Error GoTo Erro_BaixaAntecipDebCliente_Le_Adiantamentos4

    tInfoBaixaAntecipDebCli.vsNomeReduzidoConta = String(STRING_CONTA_CORRENTE_NOME_REDUZIDO, 0)

    iRetorno = Comando_ExecutarInt(lComando)
    If (iRetorno <> AD_SQL_SUCESSO) Then gError 94652

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 94653

    If lErro = AD_SQL_SEM_DADOS Then gError 94654

    Do While lErro = SUCESSO

        Set objInfoBaixaAntecipDebCli = New ClassInfoBaixaAntecipDebCli

        With tInfoBaixaAntecipDebCli

            objInfoBaixaAntecipDebCli.lNumIntDocumento = .vlNumIntDocumento
            objInfoBaixaAntecipDebCli.iExcluido = .viExcluido
            objInfoBaixaAntecipDebCli.lNumMovto = .vlNumMovto
            objInfoBaixaAntecipDebCli.dSaldoNaoApropriado = .vdSaldoNaoApropriado
            objInfoBaixaAntecipDebCli.iCodConta = .viCodConta
            objInfoBaixaAntecipDebCli.iTipoMeioPagto = .viTipoMeioPagto
            objInfoBaixaAntecipDebCli.lNumero = .vlNumero
            objInfoBaixaAntecipDebCli.dValor = .vdValor
            objInfoBaixaAntecipDebCli.sNomeReduzidoConta = .vsNomeReduzidoConta
            objInfoBaixaAntecipDebCli.iFilial = .viFilial
            objInfoBaixaAntecipDebCli.dtDataEmissao = .vdtDataEmissao

        End With

        objBaixaAntecipDebCliente.colAntecipDebCliente.Add objInfoBaixaAntecipDebCli

        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 94655

    Loop

    BaixaAntecipDebCliente_Le_Adiantamentos4 = SUCESSO

    Exit Function

Erro_BaixaAntecipDebCliente_Le_Adiantamentos4:

    BaixaAntecipDebCliente_Le_Adiantamentos4 = gErr

    Select Case gErr

        Case 94652, 94653, 94655
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RECEBANTECIPADOS1", gErr, objBaixaAntecipDebCliente.lCliente, objBaixaAntecipDebCliente.iFilialCliente)

        Case 94654

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148737)

    End Select

    Exit Function

End Function

Public Function BaixaAntecipDebCliente_Le_Debitos(ByVal objBaixaAntecipDebCliente As ClassBaixaAntecipDebCliente) As Long

Dim lErro As Long
Dim lComando As Long
Dim tInfoBaixaAntecipDebCli As typeInfoBaixaAntecipDebCli
Dim sSelect As String

On Error GoTo Erro_BaixaAntecipDebCliente_Le_Debitos

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 94671

    'Monta o Select que será executado
    Call BaixaAntecipDebCliente_Le_Debitos1(sSelect, objBaixaAntecipDebCliente)

    'Faz o Bind dos campos que serão selecionados
    lErro = BaixaAntecipDebCliente_Le_Debitos2(lComando, sSelect, tInfoBaixaAntecipDebCli)
    If lErro <> SUCESSO Then gError 94672

    'Faz o Bind dos campos que estão sendo passados para a cláusula WHERE
    lErro = BaixaAntecipDebCliente_Le_Debitos3(lComando, sSelect, tInfoBaixaAntecipDebCli, objBaixaAntecipDebCliente)
    If lErro <> SUCESSO Then gError 94673

    'Executa a leitura do BD e guarda os dados lidos no obj
    lErro = BaixaAntecipDebCliente_Le_Debitos4(lComando, tInfoBaixaAntecipDebCli, objBaixaAntecipDebCliente)
    If lErro <> SUCESSO And lErro <> 94705 Then gError 94674
    
    'Se não encontrou => erro. O erro deve ser tratado na rotina chamadora
    If lErro = 94705 Then gError 94675

    Call Comando_Fechar(lComando)
    
    BaixaAntecipDebCliente_Le_Debitos = SUCESSO
    
    Exit Function

Erro_BaixaAntecipDebCliente_Le_Debitos:

    BaixaAntecipDebCliente_Le_Debitos = gErr

    Select Case gErr

        Case 94671
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr, Error$)
            
        Case 94672 To 94674
        
        Case 94675 'Sem Dados
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148738)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Private Sub BaixaAntecipDebCliente_Le_Debitos1(sSelect As String, ByVal objBaixaAntecipDebCliente As ClassBaixaAntecipDebCliente)

Dim sFrom As String
Dim sWhere As String
Dim sOrderBy As String
Dim sFiltro As String

    'Monta a parte fixa do select
    sSelect = "SELECT DebitosRecCli.NumIntDoc, DebitosRecCli.FilialEmpresa, DebitosRecCli.SiglaDocumento, DebitosRecCli.NumTitulo, DebitosRecCli.Status, DebitosRecCli.DataEmissao, DebitosRecCli.ValorTotal, DebitosRecCli.Saldo, DebitosRecCli.ValorSeguro, DebitosRecCli.ValorFrete, DebitosRecCli.OutrasDespesas, DebitosRecCli.ValorProdutos, DebitosRecCli.ValorICMS, DebitosRecCli.ValorICMSSubst, DebitosRecCli.ValorIPI, DebitosRecCli.ValorIRRF, DebitosRecCli.Observacao "
    sFrom = "FROM DebitosRecCli "
    sWhere = "WHERE DebitosRecCli.Status <> ? AND DebitosRecCli.Status <> ? AND DebitosRecCli.Cliente = ? AND DebitosRecCli.Filial = ? "
    sOrderBy = "ORDER BY DebitosRecCli.DataEmissao, DebitosRecCli.NumTitulo"

    'Monta a parte dinâmica da cláusula WHERE
    'Se a data de emissão inicial está preenchida
    If objBaixaAntecipDebCliente.dtDataEmissaoDe <> DATA_NULA Then

        'Acrescenta à cláusula WHERE o filtro de DataMovimento maior igual à Data Inicial informada
        sWhere = sWhere & "AND DebitosRecCli.DataEmissao >= ? "

    End If

    'Se a data de emissão final está preenchida
    If objBaixaAntecipDebCliente.dtDataEmissaoAte <> DATA_NULA Then

        'Acrescenta à cláusula WHERE o filtro de DataMovimento menor igual à Data Final informada
        sWhere = sWhere & "AND DebitosRecCli.DataEmissao <= ? "

    End If

    'Se foi informada um tipo de débito específico para filtro
    If Len(Trim(objBaixaAntecipDebCliente.sTipoDebito)) > 0 Then

        'Acrescenta à cláusula WHERE o filtro de Conta Corrente
        sWhere = sWhere & "AND DebitosRecCli.SiglaDocumento = ? "

    End If
    
    'Se o número inicial está preenchido
    If objBaixaAntecipDebCliente.lNumDebitoDe > 0 Then
        
        'Acrescenta à cláusula WHERE o filtro de Título Inicial
        sWhere = sWhere & "AND DebitosRecCli.NumTitulo >= ? "
    
    End If
    

    'Se o número final está preenchido
    If objBaixaAntecipDebCliente.lNumDebitoAte > 0 Then
        
        'Acrescenta à cláusula WHERE o filtro de Título Final
        sWhere = sWhere & "AND DebitosRecCli.NumTitulo <= ? "
    
    End If

    Call CF("FilialEmpresa_Le_Filtro_Filial2", sFiltro, "DebitosRecCli")

    sWhere = sWhere & sFiltro

    sSelect = sSelect & sFrom & sWhere & sOrderBy

End Sub

Private Function BaixaAntecipDebCliente_Le_Debitos2(ByVal lComando As Long, ByVal sSelect As String, tInfoBaixaAntecipDebCli As typeInfoBaixaAntecipDebCli) As Long

Dim iRetorno As Integer

On Error GoTo Erro_BaixaAntecipDebCliente_Le_Debitos2

    With tInfoBaixaAntecipDebCli

        iRetorno = Comando_PrepararInt(lComando, sSelect)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 94676

        .vlNumIntDocumento = CLng(.vlNumIntDocumento)
        iRetorno = Comando_BindVarInt(lComando, .vlNumIntDocumento)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 94677

        .viFilial = CInt(.viFilial)
        iRetorno = Comando_BindVarInt(lComando, .viFilial)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 94678

        .vsSiglaDocumento = CStr(.vsSiglaDocumento)
        iRetorno = Comando_BindVarInt(lComando, .vsSiglaDocumento)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 94679

        .vlNumero = CLng(.vlNumero)
        iRetorno = Comando_BindVarInt(lComando, .vlNumero)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 94680

        .viStatus = CInt(.viStatus)
        iRetorno = Comando_BindVarInt(lComando, .viStatus)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 94681

        .vdtDataEmissao = CDate(.vdtDataEmissao)
        iRetorno = Comando_BindVarInt(lComando, .vdtDataEmissao)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 94682

        .vdValor = CDbl(.vdValor)
        iRetorno = Comando_BindVarInt(lComando, .vdValor)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 94683

        .vdSaldoNaoApropriado = CDbl(.vdSaldoNaoApropriado)
        iRetorno = Comando_BindVarInt(lComando, .vdSaldoNaoApropriado)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 94684
        
        .vdValorSeguro = CDbl(.vdValorSeguro)
        iRetorno = Comando_BindVarInt(lComando, .vdValorSeguro)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 94685

        .vdValorFrete = CDbl(.vdValorFrete)
        iRetorno = Comando_BindVarInt(lComando, .vdValorFrete)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 94686

        .vdValorOutrasDespesas = CDbl(.vdValorOutrasDespesas)
        iRetorno = Comando_BindVarInt(lComando, .vdValorOutrasDespesas)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 94687

        .vdValorProdutos = CDbl(.vdValorProdutos)
        iRetorno = Comando_BindVarInt(lComando, .vdValorProdutos)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 94688

        .vdValorICMS = CDbl(.vdValorICMS)
        iRetorno = Comando_BindVarInt(lComando, .vdValorICMS)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 94689

        .vdValorICMSSubst = CDbl(.vdValorICMSSubst)
        iRetorno = Comando_BindVarInt(lComando, .vdValorICMSSubst)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 94690

        .vdValorIPI = CDbl(.vdValorIPI)
        iRetorno = Comando_BindVarInt(lComando, .vdValorIPI)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 94691
        
        .vdValorIRRF = CDbl(.vdValorIRRF)
        iRetorno = Comando_BindVarInt(lComando, .vdValorIRRF)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 94692
        
        .vsObservacao = CStr(.vsObservacao)
        iRetorno = Comando_BindVarInt(lComando, .vsObservacao)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 94693
            
    End With

    BaixaAntecipDebCliente_Le_Debitos2 = SUCESSO

    Exit Function

Erro_BaixaAntecipDebCliente_Le_Debitos2:

    BaixaAntecipDebCliente_Le_Debitos2 = gErr

    Select Case gErr

        Case 94676 To 94693
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RECEBANTECIPADOS", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148739)

    End Select

    Exit Function

End Function

Private Function BaixaAntecipDebCliente_Le_Debitos3(ByVal lComando As Long, ByVal sSelect As String, tInfoBaixaAntecipDebCli As typeInfoBaixaAntecipDebCli, ByVal objBaixaAntecipDebCliente As ClassBaixaAntecipDebCliente) As Long

Dim iRetorno As Integer

On Error GoTo Erro_BaixaAntecipDebCliente_Le_Debitos3

    With tInfoBaixaAntecipDebCli
        
        .viStatus1 = STATUS_BAIXADO
        iRetorno = Comando_BindVarInt(lComando, .viStatus1)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 94695

        .viStatus = STATUS_EXCLUIDO
        iRetorno = Comando_BindVarInt(lComando, .viStatus)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 94773

        .vlCliente = objBaixaAntecipDebCliente.lCliente
        iRetorno = Comando_BindVarInt(lComando, .vlCliente)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 94696

        .viFilial_Cliente = objBaixaAntecipDebCliente.iFilialCliente
        iRetorno = Comando_BindVarInt(lComando, .viFilial_Cliente)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 94697

        If objBaixaAntecipDebCliente.dtDataEmissaoDe <> DATA_NULA Then
            .vdtDataDeFiltro = objBaixaAntecipDebCliente.dtDataEmissaoDe
            iRetorno = Comando_BindVarInt(lComando, .vdtDataDeFiltro)
            If (iRetorno <> AD_SQL_SUCESSO) Then gError 94698
        End If

        If objBaixaAntecipDebCliente.dtDataEmissaoAte <> DATA_NULA Then
            .vdtDataAteFiltro = objBaixaAntecipDebCliente.dtDataEmissaoAte
            iRetorno = Comando_BindVarInt(lComando, .vdtDataAteFiltro)
            If (iRetorno <> AD_SQL_SUCESSO) Then gError 94699
        End If

        If Len(Trim(objBaixaAntecipDebCliente.sTipoDebito)) > 0 Then
            .vsSiglaDocumentoFiltro = objBaixaAntecipDebCliente.sTipoDebito
            iRetorno = Comando_BindVarInt(lComando, .vsSiglaDocumentoFiltro)
            If (iRetorno <> AD_SQL_SUCESSO) Then gError 94700
        End If
        
        If objBaixaAntecipDebCliente.lNumDebitoDe > 0 Then
            .vlNumeroFiltroDe = objBaixaAntecipDebCliente.lNumDebitoDe
            iRetorno = Comando_BindVarInt(lComando, .vlNumeroFiltroDe)
            If (iRetorno <> AD_SQL_SUCESSO) Then gError 94701
        End If
            
        If objBaixaAntecipDebCliente.lNumDebitoAte > 0 Then
            .vlNumeroFiltroAte = objBaixaAntecipDebCliente.lNumDebitoAte
            iRetorno = Comando_BindVarInt(lComando, .vlNumeroFiltroAte)
            If (iRetorno <> AD_SQL_SUCESSO) Then gError 94702
        End If

    End With

    BaixaAntecipDebCliente_Le_Debitos3 = SUCESSO

    Exit Function

Erro_BaixaAntecipDebCliente_Le_Debitos3:

    BaixaAntecipDebCliente_Le_Debitos3 = gErr

    Select Case gErr

        Case 94694 To 94702, 94773
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RECEBANTECIPADOS1", gErr, objBaixaAntecipDebCliente.lCliente, objBaixaAntecipDebCliente.iFilialCliente)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148740)

    End Select

    Exit Function

End Function

Private Function BaixaAntecipDebCliente_Le_Debitos4(ByVal lComando As Long, tInfoBaixaAntecipDebCli As typeInfoBaixaAntecipDebCli, ByVal objBaixaAntecipDebCliente As ClassBaixaAntecipDebCliente) As Long

Dim iRetorno As Integer
Dim objInfoBaixaAntecipDebCli As ClassInfoBaixaAntecipDebCli
Dim lErro As Long

On Error GoTo Erro_BaixaAntecipDebCliente_Le_Debitos4

    tInfoBaixaAntecipDebCli.vsSiglaDocumento = String(STRING_SIGLA_DOCUMENTO, 0)
    tInfoBaixaAntecipDebCli.vsNomeReduzidoConta = String(STRING_CONTA_CORRENTE_NOME_REDUZIDO, 0)
    tInfoBaixaAntecipDebCli.vsObservacao = String(STRING_OBSERVACAO, 0)
    
    iRetorno = Comando_ExecutarInt(lComando)
    If (iRetorno <> AD_SQL_SUCESSO) Then gError 94703

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 94704

    If lErro = AD_SQL_SEM_DADOS Then gError 94705

    Do While lErro = SUCESSO

        Set objInfoBaixaAntecipDebCli = New ClassInfoBaixaAntecipDebCli

        With tInfoBaixaAntecipDebCli
            objInfoBaixaAntecipDebCli.lNumIntDocumento = .vlNumIntDocumento
            objInfoBaixaAntecipDebCli.iFilial = .viFilial
            objInfoBaixaAntecipDebCli.sSiglaDocumento = .vsSiglaDocumento
            objInfoBaixaAntecipDebCli.lNumero = .vlNumero
            objInfoBaixaAntecipDebCli.iStatus = .viStatus
            objInfoBaixaAntecipDebCli.dtDataEmissao = .vdtDataEmissao
            objInfoBaixaAntecipDebCli.dValor = .vdValor
            objInfoBaixaAntecipDebCli.dSaldoNaoApropriado = .vdSaldoNaoApropriado
            objInfoBaixaAntecipDebCli.dValorSeguro = .vdValorSeguro
            objInfoBaixaAntecipDebCli.dValorFrete = .vdValorFrete
            objInfoBaixaAntecipDebCli.dValorOutrasDespesas = .vdValorOutrasDespesas
            objInfoBaixaAntecipDebCli.dValorProdutos = .vdValorProdutos
            objInfoBaixaAntecipDebCli.dValorICMS = .vdValorICMS
            objInfoBaixaAntecipDebCli.dValorICMSSubst = .vdValorICMSSubst
            objInfoBaixaAntecipDebCli.dValorICMSSubst = .vdValorICMSSubst
            objInfoBaixaAntecipDebCli.dValorIPI = .vdValorIPI
            objInfoBaixaAntecipDebCli.dValorIRRF = .vdValorIRRF
            objInfoBaixaAntecipDebCli.sObservacao = .vsObservacao
        End With

        objBaixaAntecipDebCliente.colAntecipDebCliente.Add objInfoBaixaAntecipDebCli

        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 94706

    Loop

    BaixaAntecipDebCliente_Le_Debitos4 = SUCESSO

    Exit Function

Erro_BaixaAntecipDebCliente_Le_Debitos4:

    BaixaAntecipDebCliente_Le_Debitos4 = gErr

    Select Case gErr

        Case 94703, 94704, 94706
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RECEBANTECIPADOS1", gErr, objBaixaAntecipDebCliente.lCliente, objBaixaAntecipDebCliente.iFilialCliente)

        Case 94705 'Sem Dados

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148741)

    End Select

    Exit Function

End Function

Public Function BaixaAntecipCredForn_Le_Adiantamentos(ByVal objBaixaAntecipCredFornecedor As ClassBaixaAntecipCredForn) As Long

Dim lErro As Long
Dim lComando As Long
Dim tInfoBaixaAntecipCredForn As typeInfoBaixaAntecipCredForn
Dim sSelect As String

On Error GoTo Erro_BaixaAntecipCredForn_Le_Adiantamentos

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 95407

    'Monta a parte física do Select
    Call BaixaAntecipCredForn_Le_Adiantamentos1(sSelect, objBaixaAntecipCredFornecedor)

    'Faz a parte Lógica do Select (fields)
    lErro = BaixaAntecipCredForn_Le_Adiantamentos2(lComando, sSelect, tInfoBaixaAntecipCredForn)
    If lErro <> SUCESSO Then gError 95408

    'Faz a parte Lógica do Select (where)
    lErro = BaixaAntecipCredForn_Le_Adiantamentos3(lComando, sSelect, tInfoBaixaAntecipCredForn, objBaixaAntecipCredFornecedor)
    If lErro <> SUCESSO Then gError 95409

    'Faz a leitura no BD e passa para o obj
    lErro = BaixaAntecipCredForn_Le_Adiantamentos4(lComando, tInfoBaixaAntecipCredForn, objBaixaAntecipCredFornecedor)
    If lErro <> SUCESSO And lErro <> 95431 Then gError 95410
    
    If lErro = 95431 Then gError 92708
    
    'Fecha o Comando
    Call Comando_Fechar(lComando)
    
    BaixaAntecipCredForn_Le_Adiantamentos = SUCESSO

    Exit Function

Erro_BaixaAntecipCredForn_Le_Adiantamentos:

    BaixaAntecipCredForn_Le_Adiantamentos = gErr

    Select Case gErr

        Case 92708, 95407, 95408, 95409, 95410
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148742)

    End Select
    
    'Fecha o Comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Private Sub BaixaAntecipCredForn_Le_Adiantamentos1(sSelect As String, ByVal objBaixaAntecipCredFornecedor As ClassBaixaAntecipCredForn)

Dim sFrom As String
Dim sWhere As String
Dim sOrderBy As String
Dim sFiltro As String

    'Monta a parte fixa do select
    sSelect = "SELECT PagtosAntecipados.NumIntPag, PagtosAntecipados.NumMovto, PagtosAntecipados.SaldoNaoApropriado, PagtosAntecipados.FilialPedCompra, PagtosAntecipados.NumPedCompra, MovimentosContaCorrente.FilialEmpresa, MovimentosContaCorrente.CodConta, MovimentosContaCorrente.DataMovimento, MovimentosContaCorrente.TipoMeioPagto, MovimentosContaCorrente.Valor, ContasCorrentesInternas.NomeReduzido"
    sFrom = " FROM PagtosAntecipados, MovimentosContaCorrente, ContasCorrentesInternas"
    sWhere = " WHERE PagtosAntecipados.NumMovto = MovimentosContaCorrente.NumMovto AND MovimentosContaCorrente.CodConta = ContasCorrentesInternas.Codigo AND PagtosAntecipados.Excluido <> ? AND PagtosAntecipados.SaldoNaoApropriado > ? AND PagtosAntecipados.Fornecedor = ? AND PagtosAntecipados.Filial_Fornecedor = ?"
    sOrderBy = " ORDER BY MovimentosContaCorrente.DataMovimento"

    'Se a data de emissão inicial está preenchida => Acrescenta ao WHERE
    If objBaixaAntecipCredFornecedor.dtDataEmissaoDe <> DATA_NULA Then
        sWhere = sWhere & " AND MovimentosContaCorrente.DataMovimento >= ?"
    End If

    'Se a data de emissão final está preenchida => Acrescenta ao WHERE
    If objBaixaAntecipCredFornecedor.dtDataEmissaoAte <> DATA_NULA Then
        sWhere = sWhere & " AND MovimentosContaCorrente.DataMovimento <= ?"
    End If

    'Se está selecionando uma conta específica
    If objBaixaAntecipCredFornecedor.iCtaCorrenteSelecionada <> -1 Then
            sWhere = sWhere & " AND MovimentosContaCorrente.CodConta = ?"
    End If

    Call CF("FilialEmpresa_Le_Filtro_Filial2", sFiltro, "MovimentosContaCorrente")

    sWhere = sWhere & sFiltro

    sSelect = sSelect & sFrom & sWhere & sOrderBy

End Sub

Private Function BaixaAntecipCredForn_Le_Adiantamentos2(ByVal lComando As Long, ByVal sSelect As String, tInfoBaixaAntecipCredForn As typeInfoBaixaAntecipCredForn) As Long
                                                                                                                                                
Dim iRet As Integer

On Error GoTo Erro_BaixaAntecipCredForn_Le_Adiantamentos2

    With tInfoBaixaAntecipCredForn

        iRet = Comando_PrepararInt(lComando, sSelect)
        If (iRet <> AD_SQL_SUCESSO) Then gError 95411

        .vlNumIntDocumento = CLng(.vlNumIntDocumento)
        iRet = Comando_BindVarInt(lComando, .vlNumIntDocumento)
        If (iRet <> AD_SQL_SUCESSO) Then gError 95412

        .vlNumMovto = CLng(.vlNumMovto)
        iRet = Comando_BindVarInt(lComando, .vlNumMovto)
        If (iRet <> AD_SQL_SUCESSO) Then gError 95413

        .vdSaldoNaoApropriado = CDbl(.vdSaldoNaoApropriado)
        iRet = Comando_BindVarInt(lComando, .vdSaldoNaoApropriado)
        If (iRet <> AD_SQL_SUCESSO) Then gError 95414

        .viFilialPedCompra = CInt(.viFilialPedCompra)
        iRet = Comando_BindVarInt(lComando, .viFilialPedCompra)
        If (iRet <> AD_SQL_SUCESSO) Then gError 95415

        .vlNumPedCompra = CLng(.vlNumPedCompra)
        iRet = Comando_BindVarInt(lComando, .vlNumPedCompra)
        If (iRet <> AD_SQL_SUCESSO) Then gError 95416

        .viFilial = CInt(.viFilial)
        iRet = Comando_BindVarInt(lComando, .viFilial)
        If (iRet <> AD_SQL_SUCESSO) Then gError 95417

        .viCodConta = CInt(.viCodConta)
        iRet = Comando_BindVarInt(lComando, .viCodConta)
        If (iRet <> AD_SQL_SUCESSO) Then gError 95418

        .vdtDataEmissao = CDate(.vdtDataEmissao)
        iRet = Comando_BindVarInt(lComando, .vdtDataEmissao)
        If (iRet <> AD_SQL_SUCESSO) Then gError 95419

        .viTipoMeioPagto = CInt(.viTipoMeioPagto)
        iRet = Comando_BindVarInt(lComando, .viTipoMeioPagto)
        If (iRet <> AD_SQL_SUCESSO) Then gError 95420

        .vdValor = CDbl(.vdValor)
        iRet = Comando_BindVarInt(lComando, .vdValor)
        If (iRet <> AD_SQL_SUCESSO) Then gError 95421
        
            
        .vsNomeReduzidoConta = String(255, 0)
        iRet = Comando_BindVarInt(lComando, .vsNomeReduzidoConta)
        If (iRet <> AD_SQL_SUCESSO) Then gError 95422
        
    End With

    BaixaAntecipCredForn_Le_Adiantamentos2 = SUCESSO

    Exit Function

Erro_BaixaAntecipCredForn_Le_Adiantamentos2:

    BaixaAntecipCredForn_Le_Adiantamentos2 = gErr

    Select Case gErr

        Case 95411 To 95422

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148743)

    End Select

    Exit Function

End Function

Private Function BaixaAntecipCredForn_Le_Adiantamentos3(ByVal lComando As Long, ByVal sSelect As String, tInfoBaixaAntecipCredForn As typeInfoBaixaAntecipCredForn, ByVal objBaixaAntecipCredFornecedor As ClassBaixaAntecipCredForn) As Long

Dim iRet As Integer

On Error GoTo Erro_BaixaAntecipCredForn_Le_Adiantamentos3

    With tInfoBaixaAntecipCredForn

        .viExcluido = MOVCONTACORRENTE_EXCLUIDO
        iRet = Comando_BindVarInt(lComando, .viExcluido)
        If (iRet <> AD_SQL_SUCESSO) Then gError 95423

        .vdSaldoNaoApropriado = DELTA_VALORMONETARIO
        iRet = Comando_BindVarInt(lComando, .vdSaldoNaoApropriado)
        If (iRet <> AD_SQL_SUCESSO) Then gError 95424

        .vlFornecedor = objBaixaAntecipCredFornecedor.lFornecedor
        iRet = Comando_BindVarInt(lComando, .vlFornecedor)
        If (iRet <> AD_SQL_SUCESSO) Then gError 95425

        .viFilial_Fornecedor = objBaixaAntecipCredFornecedor.iFilialFornecedor
        iRet = Comando_BindVarInt(lComando, .viFilial_Fornecedor)
        If (iRet <> AD_SQL_SUCESSO) Then gError 92711

        If objBaixaAntecipCredFornecedor.dtDataEmissaoDe <> DATA_NULA Then
            .vdtDataDeFiltro = objBaixaAntecipCredFornecedor.dtDataEmissaoDe
            iRet = Comando_BindVarInt(lComando, .vdtDataDeFiltro)
            If (iRet <> AD_SQL_SUCESSO) Then gError 95426
        End If

        If objBaixaAntecipCredFornecedor.dtDataEmissaoAte <> DATA_NULA Then
            .vdtDataAteFiltro = objBaixaAntecipCredFornecedor.dtDataEmissaoAte
            iRet = Comando_BindVarInt(lComando, .vdtDataAteFiltro)
            If (iRet <> AD_SQL_SUCESSO) Then gError 95427
        End If

        If objBaixaAntecipCredFornecedor.iCtaCorrenteSelecionada <> -1 Then
            .viCodConta = objBaixaAntecipCredFornecedor.iCtaCorrenteSelecionada
            iRet = Comando_BindVarInt(lComando, .viCodConta)
            If (iRet <> AD_SQL_SUCESSO) Then gError 95428
        End If

    End With
    
    iRet = Comando_ExecutarInt(lComando)
    If (iRet <> AD_SQL_SUCESSO) Then gError 95429
    
    BaixaAntecipCredForn_Le_Adiantamentos3 = SUCESSO

    Exit Function

Erro_BaixaAntecipCredForn_Le_Adiantamentos3:

    BaixaAntecipCredForn_Le_Adiantamentos3 = gErr

    Select Case gErr

        Case 92711, 95423 To 95429
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ANTECIPCREDFORN", gErr, tInfoBaixaAntecipCredForn.vlFornecedor, tInfoBaixaAntecipCredForn.viFilial_Fornecedor)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148744)

    End Select

    Exit Function

End Function

Private Function BaixaAntecipCredForn_Le_Adiantamentos4(ByVal lComando As Long, tInfoBaixaAntecipCredForn As typeInfoBaixaAntecipCredForn, ByVal objBaixaAntecipCredFornecedor As ClassBaixaAntecipCredForn) As Long

Dim iRet As Integer
Dim objInfoBaixaAntecipCreForn As ClassInfoBaixaAntecipCreForn
Dim lErro As Long

On Error GoTo Erro_BaixaAntecipCredForn_Le_Adiantamentos4

    'Busca o Primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 95430

    'Se nao encontrou => ERRO
    If lErro = AD_SQL_SEM_DADOS Then gError 95431

    'Enquanto tiver dados => LÊ...
    Do While lErro = SUCESSO

        'Aponta um novo obj
        Set objInfoBaixaAntecipCreForn = New ClassInfoBaixaAntecipCreForn

        'Copia as informações do type para o obj
        With tInfoBaixaAntecipCredForn

            objInfoBaixaAntecipCreForn.lNumIntDocumento = .vlNumIntDocumento
            objInfoBaixaAntecipCreForn.lNumMovto = .vlNumMovto
            objInfoBaixaAntecipCreForn.dSaldoNaoApropriado = .vdSaldoNaoApropriado
            objInfoBaixaAntecipCreForn.lFornecedor = .vlFornecedor
            objInfoBaixaAntecipCreForn.iFilial_Fornecedor = .viFilial_Fornecedor
            objInfoBaixaAntecipCreForn.iCodConta = .viCodConta
            objInfoBaixaAntecipCreForn.iTipoMeioPagto = .viTipoMeioPagto
            objInfoBaixaAntecipCreForn.dValor = .vdValor
            objInfoBaixaAntecipCreForn.sNomeReduzidoConta = .vsNomeReduzidoConta
            objInfoBaixaAntecipCreForn.dtDataEmissao = .vdtDataEmissao
            objInfoBaixaAntecipCreForn.iFilial = .viFilial

        End With

        'Adiciona na Colecao
        objBaixaAntecipCredFornecedor.colAntecipCredFornecedor.Add objInfoBaixaAntecipCreForn

        'Busca o Próximo Registro...
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 95432

    Loop

    BaixaAntecipCredForn_Le_Adiantamentos4 = SUCESSO

    Exit Function

Erro_BaixaAntecipCredForn_Le_Adiantamentos4:

    BaixaAntecipCredForn_Le_Adiantamentos4 = gErr

    Select Case gErr

        Case 95430, 95432
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ANTECIPCREDFORN", gErr, tInfoBaixaAntecipCredForn.vlFornecedor, tInfoBaixaAntecipCredForn.viFilial_Fornecedor)

        Case 95431

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148745)

    End Select

    Exit Function

End Function

Public Function BaixaAntecipCredForn_Le_Creditos(ByVal objBaixaAntecipCredForn As ClassBaixaAntecipCredForn) As Long

Dim lErro As Long
Dim lComando As Long
Dim tInfoBaixaAntecipCredForn As typeInfoBaixaAntecipCredForn
Dim sSelect As String

On Error GoTo Erro_BaixaAntecipCredForn_Le_Creditos

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 92673

    'Monta o Select que será executado
    Call BaixaAntecipCredForn_Le_Creditos1(sSelect, objBaixaAntecipCredForn)

    'Faz o Bind dos campos que serão selecionados
    lErro = BaixaAntecipCredForn_Le_Creditos2(lComando, sSelect, tInfoBaixaAntecipCredForn)
    If lErro <> SUCESSO Then gError 92674

    'Faz o Bind dos campos que estão sendo passados para a cláusula WHERE
    lErro = BaixaAntecipCredForn_Le_Creditos3(lComando, sSelect, tInfoBaixaAntecipCredForn, objBaixaAntecipCredForn)
    If lErro <> SUCESSO Then gError 92675

    'Executa a leitura do BD e guarda os dados lidos no obj
    lErro = BaixaAntecipCredForn_Le_Creditos4(lComando, tInfoBaixaAntecipCredForn, objBaixaAntecipCredForn)
    If lErro <> SUCESSO And lErro <> 92706 Then gError 92676
    
    'Se não encontrou => erro. O erro deve ser tratado na rotina chamadora
    If lErro = 92706 Then gError 92677

    Call Comando_Fechar(lComando)
    
    BaixaAntecipCredForn_Le_Creditos = SUCESSO
    
    Exit Function

Erro_BaixaAntecipCredForn_Le_Creditos:

    BaixaAntecipCredForn_Le_Creditos = gErr

    Select Case gErr

        Case 92673
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr, Error$)
            
        Case 92674 To 92677
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148746)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Private Sub BaixaAntecipCredForn_Le_Creditos1(sSelect As String, ByVal objBaixaAntecipCredForn As ClassBaixaAntecipCredForn)

Dim sFrom As String
Dim sWhere As String
Dim sOrderBy As String
Dim sFiltro As String

    'Monta a parte fixa do select
    sSelect = "SELECT CreditosPagForn.NumIntDoc, CreditosPagForn.FilialEmpresa, CreditosPagForn.SiglaDocumento, CreditosPagForn.NumTitulo, CreditosPagForn.Status, CreditosPagForn.DataEmissao, CreditosPagForn.ValorTotal, CreditosPagForn.Saldo, CreditosPagForn.ValorSeguro, CreditosPagForn.ValorFrete, CreditosPagForn.OutrasDespesas, CreditosPagForn.ValorProdutos, CreditosPagForn.ValorICMS, CreditosPagForn.ValorICMSSubst, CreditosPagForn.ValorIPI, CreditosPagForn.ValorIRRF, CreditosPagForn.Observacao "
    sFrom = "FROM CreditosPagForn "
    sWhere = "WHERE CreditosPagForn.Status <> ? AND CreditosPagForn.Status <> ? AND CreditosPagForn.Fornecedor = ? AND CreditosPagForn.Filial = ? "
    sOrderBy = "ORDER BY CreditosPagForn.DataEmissao, CreditosPagForn.NumTitulo"

    'Monta a parte dinâmica da cláusula WHERE
    'Se a data de emissão inicial está preenchida
    If objBaixaAntecipCredForn.dtDataEmissaoDe <> DATA_NULA Then

        'Acrescenta à cláusula WHERE o filtro de DataMovimento maior igual à Data Inicial informada
        sWhere = sWhere & "AND CreditosPagForn.DataEmissao >= ? "

    End If

    'Se a data de emissão final está preenchida
    If objBaixaAntecipCredForn.dtDataEmissaoAte <> DATA_NULA Then

        'Acrescenta à cláusula WHERE o filtro de DataMovimento menor igual à Data Final informada
        sWhere = sWhere & "AND CreditosPagForn.DataEmissao <= ? "

    End If

    'Se foi informada um tipo de débito específico para filtro
    If Len(Trim(objBaixaAntecipCredForn.sTipoCredito)) > 0 Then

        'Acrescenta à cláusula WHERE o filtro de Conta Corrente
        sWhere = sWhere & "AND CreditosPagForn.SiglaDocumento = ? "

    End If
    
    'Se o número inicial está preenchido
    If objBaixaAntecipCredForn.lNumCreditoDe > 0 Then
        
        'Acrescenta à cláusula WHERE o filtro de Título Inicial
        sWhere = sWhere & "AND CreditosPagForn.NumTitulo >= ? "
    
    End If
    

    'Se o número final está preenchido
    If objBaixaAntecipCredForn.lNumCreditoAte > 0 Then
        
        'Acrescenta à cláusula WHERE o filtro de Título Final
        sWhere = sWhere & "AND CreditosPagForn.NumTitulo <= ? "
    
    End If

    Call CF("FilialEmpresa_Le_Filtro_Filial2", sFiltro, "CreditosPagForn")

    sWhere = sWhere & sFiltro

    sSelect = sSelect & sFrom & sWhere & sOrderBy

End Sub

Private Function BaixaAntecipCredForn_Le_Creditos2(ByVal lComando As Long, ByVal sSelect As String, tInfoBaixaAntecipCredForn As typeInfoBaixaAntecipCredForn) As Long

Dim iRetorno As Integer

On Error GoTo Erro_BaixaAntecipCredForn_Le_Creditos2

    With tInfoBaixaAntecipCredForn

        iRetorno = Comando_PrepararInt(lComando, sSelect)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 92678

        .vlNumIntDocumento = CLng(.vlNumIntDocumento)
        iRetorno = Comando_BindVarInt(lComando, .vlNumIntDocumento)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 92679

        .viFilial = CInt(.viFilial)
        iRetorno = Comando_BindVarInt(lComando, .viFilial)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 92680

        .vsSiglaDocumento = CStr(.vsSiglaDocumento)
        iRetorno = Comando_BindVarInt(lComando, .vsSiglaDocumento)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 92681

        .vlNumero = CLng(.vlNumero)
        iRetorno = Comando_BindVarInt(lComando, .vlNumero)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 92682

        .viStatus = CInt(.viStatus)
        iRetorno = Comando_BindVarInt(lComando, .viStatus)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 92683

        .vdtDataEmissao = CDate(.vdtDataEmissao)
        iRetorno = Comando_BindVarInt(lComando, .vdtDataEmissao)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 92684

        .vdValor = CDbl(.vdValor)
        iRetorno = Comando_BindVarInt(lComando, .vdValor)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 92685

        .vdSaldoNaoApropriado = CDbl(.vdSaldoNaoApropriado)
        iRetorno = Comando_BindVarInt(lComando, .vdSaldoNaoApropriado)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 92686
        
        .vdValorSeguro = CDbl(.vdValorSeguro)
        iRetorno = Comando_BindVarInt(lComando, .vdValorSeguro)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 92687

        .vdValorFrete = CDbl(.vdValorFrete)
        iRetorno = Comando_BindVarInt(lComando, .vdValorFrete)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 92688

        .vdValorOutrasDespesas = CDbl(.vdValorOutrasDespesas)
        iRetorno = Comando_BindVarInt(lComando, .vdValorOutrasDespesas)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 92689

        .vdValorProdutos = CDbl(.vdValorProdutos)
        iRetorno = Comando_BindVarInt(lComando, .vdValorProdutos)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 92690

        .vdValorICMS = CDbl(.vdValorICMS)
        iRetorno = Comando_BindVarInt(lComando, .vdValorICMS)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 92691

        .vdValorICMSSubst = CDbl(.vdValorICMSSubst)
        iRetorno = Comando_BindVarInt(lComando, .vdValorICMSSubst)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 92692

        .vdValorIPI = CDbl(.vdValorIPI)
        iRetorno = Comando_BindVarInt(lComando, .vdValorIPI)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 92693
        
        .vdValorIRRF = CDbl(.vdValorIRRF)
        iRetorno = Comando_BindVarInt(lComando, .vdValorIRRF)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 92694
        
        .vsObservacao = CStr(.vsObservacao)
        iRetorno = Comando_BindVarInt(lComando, .vsObservacao)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 92695
        
    
    End With

    BaixaAntecipCredForn_Le_Creditos2 = SUCESSO

    Exit Function

Erro_BaixaAntecipCredForn_Le_Creditos2:

    BaixaAntecipCredForn_Le_Creditos2 = gErr

    Select Case gErr

        Case 92678 To 92695
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CREDITOSPAGFORN", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148747)

    End Select

    Exit Function

End Function

Private Function BaixaAntecipCredForn_Le_Creditos3(ByVal lComando As Long, ByVal sSelect As String, tInfoBaixaAntecipCredForn As typeInfoBaixaAntecipCredForn, ByVal objBaixaAntecipCredForn As ClassBaixaAntecipCredForn) As Long

Dim iRetorno As Integer

On Error GoTo Erro_BaixaAntecipCredForn_Le_Creditos3

    With tInfoBaixaAntecipCredForn
        
        .viStatus1 = STATUS_BAIXADO
        iRetorno = Comando_BindVarInt(lComando, .viStatus1)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 92820
        
        .viStatus = STATUS_EXCLUIDO
        iRetorno = Comando_BindVarInt(lComando, .viStatus)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 92696

        .vlFornecedor = objBaixaAntecipCredForn.lFornecedor
        iRetorno = Comando_BindVarInt(lComando, .vlFornecedor)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 92697

        .viFilial_Fornecedor = objBaixaAntecipCredForn.iFilialFornecedor
        iRetorno = Comando_BindVarInt(lComando, .viFilial_Fornecedor)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 92698

        If objBaixaAntecipCredForn.dtDataEmissaoDe <> DATA_NULA Then
            .vdtDataDeFiltro = objBaixaAntecipCredForn.dtDataEmissaoDe
            iRetorno = Comando_BindVarInt(lComando, .vdtDataDeFiltro)
            If (iRetorno <> AD_SQL_SUCESSO) Then gError 92699
        End If

        If objBaixaAntecipCredForn.dtDataEmissaoAte <> DATA_NULA Then
            .vdtDataAteFiltro = objBaixaAntecipCredForn.dtDataEmissaoAte
            iRetorno = Comando_BindVarInt(lComando, .vdtDataAteFiltro)
            If (iRetorno <> AD_SQL_SUCESSO) Then gError 92700
        End If

        If Len(Trim(objBaixaAntecipCredForn.sTipoCredito)) > 0 Then
            .vsSiglaDocumentoFiltro = objBaixaAntecipCredForn.sTipoCredito
            iRetorno = Comando_BindVarInt(lComando, .vsSiglaDocumentoFiltro)
            If (iRetorno <> AD_SQL_SUCESSO) Then gError 92701
        End If
        
        If objBaixaAntecipCredForn.lNumCreditoDe > 0 Then
            .vlNumeroDeFiltro = objBaixaAntecipCredForn.lNumCreditoDe
            iRetorno = Comando_BindVarInt(lComando, .vlNumeroDeFiltro)
            If (iRetorno <> AD_SQL_SUCESSO) Then gError 92702
        End If
            
        If objBaixaAntecipCredForn.lNumCreditoAte > 0 Then
            .vlNumeroAteFiltro = objBaixaAntecipCredForn.lNumCreditoAte
            iRetorno = Comando_BindVarInt(lComando, .vlNumeroAteFiltro)
            If (iRetorno <> AD_SQL_SUCESSO) Then gError 92703
        End If

    End With

    BaixaAntecipCredForn_Le_Creditos3 = SUCESSO

    Exit Function

Erro_BaixaAntecipCredForn_Le_Creditos3:

    BaixaAntecipCredForn_Le_Creditos3 = gErr

    Select Case gErr

        Case 92696 To 92703, 92820
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CREDITOSPAGFORN3", gErr, objBaixaAntecipCredForn.lFornecedor, objBaixaAntecipCredForn.iFilialFornecedor)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148748)

    End Select

    Exit Function

End Function

Private Function BaixaAntecipCredForn_Le_Creditos4(ByVal lComando As Long, tInfoBaixaAntecipCredForn As typeInfoBaixaAntecipCredForn, ByVal objBaixaAntecipCredForn As ClassBaixaAntecipCredForn) As Long

Dim iRetorno As Integer
Dim objInfoBaixaAntecipCredForn As ClassInfoBaixaAntecipCreForn
Dim lErro As Long

On Error GoTo Erro_BaixaAntecipCredForn_Le_Creditos4

    tInfoBaixaAntecipCredForn.vsSiglaDocumento = String(STRING_SIGLA_DOCUMENTO, 0)
    tInfoBaixaAntecipCredForn.vsObservacao = String(STRING_OBSERVACAO_OBSERVACAO, 0)
    
    iRetorno = Comando_ExecutarInt(lComando)
    If (iRetorno <> AD_SQL_SUCESSO) Then gError 92704

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 92705

    If lErro = AD_SQL_SEM_DADOS Then gError 92706

    Do While lErro = SUCESSO

        Set objInfoBaixaAntecipCredForn = New ClassInfoBaixaAntecipCreForn

        With tInfoBaixaAntecipCredForn

            objInfoBaixaAntecipCredForn.lNumIntDocumento = .vlNumIntDocumento
            objInfoBaixaAntecipCredForn.iFilial = .viFilial
            objInfoBaixaAntecipCredForn.sSiglaDocumento = .vsSiglaDocumento
            objInfoBaixaAntecipCredForn.lNumero = .vlNumero
            objInfoBaixaAntecipCredForn.iStatus = .viStatus
            objInfoBaixaAntecipCredForn.dtDataEmissao = .vdtDataEmissao
            objInfoBaixaAntecipCredForn.dValor = .vdValor
            objInfoBaixaAntecipCredForn.dSaldoNaoApropriado = .vdSaldoNaoApropriado
            objInfoBaixaAntecipCredForn.dValorSeguro = .vdValorSeguro
            objInfoBaixaAntecipCredForn.dValorFrete = .vdValorFrete
            objInfoBaixaAntecipCredForn.dValorOutrasDespesas = .vdValorOutrasDespesas
            objInfoBaixaAntecipCredForn.dValorProdutos = .vdValorProdutos
            objInfoBaixaAntecipCredForn.dValorICMS = .vdValorICMS
            objInfoBaixaAntecipCredForn.dValorICMSSubst = .vdValorICMSSubst
            objInfoBaixaAntecipCredForn.dValorICMSSubst = .vdValorICMSSubst
            objInfoBaixaAntecipCredForn.dValorIPI = .vdValorIPI
            objInfoBaixaAntecipCredForn.dValorIRRF = .vdValorIRRF
            objInfoBaixaAntecipCredForn.sObservacao = .vsObservacao
        End With

        objBaixaAntecipCredForn.colAntecipCredFornecedor.Add objInfoBaixaAntecipCredForn

        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 92707

    Loop

    BaixaAntecipCredForn_Le_Creditos4 = SUCESSO

    Exit Function

Erro_BaixaAntecipCredForn_Le_Creditos4:

    BaixaAntecipCredForn_Le_Creditos4 = gErr

    Select Case gErr

        Case 92704, 92705, 92707
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RECEBANTECIPADOS1", gErr, objBaixaAntecipCredForn.lFornecedor, objBaixaAntecipCredForn.iFilialFornecedor)

        Case 92706 'Sem Dados

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148749)

    End Select

    Exit Function

End Function

Function BaixaRecCancelar_Le_BaixaBaixa(ByVal objBaixaRecCancelar As ClassBaixaRecCancelar) As Long
Dim sSelect As String
'Função alterada por Leo em 28/11/01.
'Os parâmetros também foram alterados, antes recebia uma série de variáveis agora somente um obj.

'preenche a colecao de parcelas a receber "candidatas" para cancelamento da baixa
'datas nao preenchidas devem ser passadas como DATA_NULA
'numeros de titulo nao preenchidos devem ser passados como zero

Dim lComando As Long
Dim lErro As Long
Dim tInfoBaixaRecCancelarVar As typeInfoBaixaRecCancelarVar
'Dim tBaixaRecCancelarVar As typeBaixaRecCancelarVar

On Error GoTo Erro_BaixaRecCancelar_Le_BaixaBaixa

    'tInfoBaixaRecCancelarVar.viStatusFiltro = STATUS_LANCADO

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 57940

    tInfoBaixaRecCancelarVar.vsSiglaDocumento = String(STRING_SIGLA_DOCUMENTO, 0)

    'Monta o Select que será executado
    Call BaixaRecCancelar_Le_BaixaBaixa1(sSelect, objBaixaRecCancelar)

    'executa a preparacao da parte fixa do SELECT
    lErro = BaixaRecCancelar_Le_BaixaBaixa2(lComando, sSelect, tInfoBaixaRecCancelarVar)
    If lErro <> SUCESSO Then gError 57941

    'executa a preparacao da parte diâmica do SELECT
    lErro = BaixaRecCancelar_Le_BaixaBaixa3(lComando, tInfoBaixaRecCancelarVar, objBaixaRecCancelar)
    If lErro <> SUCESSO Then gError 94256

    'complementa a passagem dos parametros que variam de acordo com a selecao do usuario
    'e executa o SELECT p/obtencao das parcelas
    lErro = BaixaRecCancelar_Le_BaixaBaixa4(lComando, tInfoBaixaRecCancelarVar, objBaixaRecCancelar)
    If lErro <> SUCESSO Then gError 57942

    'processa todas as parcelas retornadas pelo SELECT executado acima
    lErro = BaixaRecCancelar_Le_BaixaBaixa5(lComando, tInfoBaixaRecCancelarVar, objBaixaRecCancelar)
    If lErro <> SUCESSO And lErro <> 57963 Then gError 57943
    
    If lErro = 57963 Then gError 94813

    lErro = Comando_Fechar(lComando)

    BaixaRecCancelar_Le_BaixaBaixa = SUCESSO

    Exit Function

Erro_BaixaRecCancelar_Le_BaixaBaixa:

    BaixaRecCancelar_Le_BaixaBaixa = gErr

    Select Case gErr

        Case 57940
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 57941, 57942, 57943, 94256 'Erros tratados nas rotinas chamadas
        
        Case 94813 'Sem dados

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148750)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Private Sub BaixaRecCancelar_Le_BaixaBaixa1(sSelect As String, ByVal objBaixaRecCancelar As ClassBaixaRecCancelar)
'Monta o SELECT dinamicamente

Dim sFrom As String
Dim sWhere As String
Dim sOrderBy As String

On Error GoTo Erro_BaixaRecCancelar_Le_BaixaBaixa1

    sSelect = "SELECT TitulosRecTodos.FilialEmpresa, TitulosRecTodos.NumTitulo, TitulosRecTodos.SiglaDocumento, ParcelasRecTodas2.NumParcela," & _
    "ParcelasRecTodas2.NumIntDoc, ParcelasRecTodas2.Valor, ParcelasRecTodas2.Cobrador, ParcelasRecTodas2.CarteiraCobranca, BaixasParcRec.NumIntDoc, BaixasParcRec.Sequencial, BaixasRec.Data, BaixasParcRec.ValorBaixado," & _
    "BaixasParcRec.NumIntBaixa, BaixasParcRec.Status, BaixasParcRec.ValorDesconto, BaixasParcRec.ValorMulta, BaixasParcRec.ValorJuros," & _
    "ValorRecebido as ValorPago," & _
    "BaixasRec.Status, BaixasRec.Historico, BaixasRec.Motivo, BaixasRec.DataContabil, BaixasRec.DataRegistro, BaixasRec.NumMovCta, BaixasRec.NumIntDoc "

    sFrom = " FROM ParcelasRecTodas2, TitulosRecTodos, BaixasParcRec, BaixasRec"
    sWhere = " WHERE BaixasParcRec.Status = ? AND BaixasParcRec.NumIntParcela = ParcelasRecTodas2.NumIntDoc AND TitulosRecTodos.Cliente = ? AND TitulosRecTodos.Filial = ? AND TitulosRecTodos.NumIntDoc = ParcelasRecTodas2.NumIntTitulo " & _
    "AND BaixasParcRec.NumIntBaixa = BaixasRec.NumIntBaixa " & _
    "AND BaixasRec.Motivo = ? AND BaixasParcRec.NumIntBaixa = BaixasRec.NumIntBaixa "


    Select Case objBaixaRecCancelar.iTipoBaixas

        Case MOTIVO_RECEBTO_ANTECIPADO

            sSelect = sSelect & ", MovimentosContaCorrente.CodConta, MovimentosContaCorrente.Valor, MovimentosContaCorrente.Historico, ContasCorrentesInternas.NomeReduzido, RecebAntecipados.NumIntRec, MovimentosContaCorrente.DataMovimento "
            sFrom = sFrom & ", MovimentosContaCorrente, ContasCorrentesInternas, RecebAntecipados "
            sWhere = sWhere & "AND MovimentosContaCorrente.NumMovto = BaixasRec.NumMovCta AND ContasCorrentesInternas.Codigo = MovimentosContaCorrente.CodConta AND RecebAntecipados.NumMovto = BaixasRec.NumMovCta "

        Case MOTIVO_RECEBIMENTO

            sSelect = sSelect & ", MovimentosContaCorrente.CodConta, MovimentosContaCorrente.Valor, MovimentosContaCorrente.Historico, ContasCorrentesInternas.NomeReduzido, MovimentosContaCorrente.DataMovimento "
            sFrom = sFrom & ", MovimentosContaCorrente, ContasCorrentesInternas "
            sWhere = sWhere & " AND MovimentosContaCorrente.NumMovto = BaixasRec.NumMovCta AND ContasCorrentesInternas.Codigo = MovimentosContaCorrente.CodConta AND (ParcelasRecTodas2.Cobrador <> 1 OR ParcelasRecTodas2.CarteiraCobranca <> 2 OR MovimentosContaCorrente.Tipo = 8) "

        Case MOTIVO_DEBITO_CLIENTE

            sSelect = sSelect & ", DebitosRecCli.DataEmissao, DebitosRecCli.NumTitulo, DebitosRecCli.Saldo, DebitosRecCli.SiglaDocumento, DebitosRecCli.ValorTotal as ValorDebito "
            sFrom = sFrom & ", DebitosRecCli "
            sWhere = sWhere & " AND DebitosRecCli.NumIntDoc = BaixasRec.NumIntDoc "

        Case MOTIVO_PERDA
            'nao precisa fazer nada
        
    End Select


    'Se titulo inicial preenchido
    If (objBaixaRecCancelar.lTituloInicial <> 0) Then
       sWhere = sWhere & " AND TitulosRecTodos.NumTitulo >= ? "
    End If

    'Se titulo final preenchido
    If (objBaixaRecCancelar.lTituloFinal <> 0) Then
       sWhere = sWhere & " AND TitulosRecTodos.NumTitulo <= ? "
    End If

    'Se o limite inicial de data de emissao de titulo estiver preenchido
    If (objBaixaRecCancelar.dtDataBaixaInicial <> DATA_NULA) Then
       sWhere = sWhere & " AND BaixasRec.Data >= ? "
    End If

    'Se o limite objInfoParcRecobjInfoParcRecfinal de data de emissao de titulo estiver preenchido
    If (objBaixaRecCancelar.dtDataBaixaFinal <> DATA_NULA) Then
       sWhere = sWhere & " AND BaixasRec.Data <= ? "
    End If

    'Se o limite inicial de data de vencimento de parcela estiver preenchido
    If (objBaixaRecCancelar.dtDataVenctoInicial <> DATA_NULA) Then
       sWhere = sWhere & " AND ParcelasRecTodas2.DataVencimento >= ? "
    End If

    'Se o limite final de data de vencimento de parcela estiver preenchido
    If (objBaixaRecCancelar.dtDataVenctoFinal <> DATA_NULA) Then
       sWhere = sWhere & " AND ParcelasRecTodas2.DataVencimento <= ? "
    End If

    sOrderBy = "ORDER BY TitulosRecTodos.NumTitulo, ParcelasRecTodas2.NumParcela, BaixasParcRec.Sequencial"

    sSelect = sSelect & sFrom & sWhere & sOrderBy
    
    Exit Sub
    
Erro_BaixaRecCancelar_Le_BaixaBaixa1:

    Select Case gErr
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148751)
    
    End Select
    
    Exit Sub
    
End Sub

Private Function BaixaRecCancelar_Le_BaixaBaixa2(ByVal lComando As Long, ByVal sSelect As String, tInfoBaixaRecCancelarVar As typeInfoBaixaRecCancelarVar) As Long
'Faz o Bind do Select e das variáveis comuns a todos os selects que receberão os dados lidos

Dim ret As Long
Dim lErro As Long

'Função alterada por Leo em 29/11/01

On Error GoTo Erro_BaixaRecCancelar_Le_BaixaBaixa2

    With tInfoBaixaRecCancelarVar

        .vsHistoricoBaixa = String(STRING_HISTORICO, 0)

        ret = Comando_PrepararInt(lComando, sSelect)
        If (ret <> AD_SQL_SUCESSO) Then gError 57944

        .viFilialEmpresa = CInt(.viFilialEmpresa)
        ret = Comando_BindVarInt(lComando, .viFilialEmpresa)
        If (ret <> AD_SQL_SUCESSO) Then gError 57945

        .vlNumDocumento = CLng(.vlNumDocumento)
        ret = Comando_BindVarInt(lComando, .vlNumDocumento)
        If (ret <> AD_SQL_SUCESSO) Then gError 57945

        .vsSiglaDocumento = CStr(.vsSiglaDocumento)
        ret = Comando_BindVarInt(lComando, .vsSiglaDocumento)
        If (ret <> AD_SQL_SUCESSO) Then gError 57946

        .viNumParcela = CInt(.viNumParcela)
        ret = Comando_BindVarInt(lComando, .viNumParcela)
        If (ret <> AD_SQL_SUCESSO) Then gError 57947

        .vlNumIntParcela = CLng(.vlNumIntParcela)
        ret = Comando_BindVarInt(lComando, .vlNumIntParcela)
        If (ret <> AD_SQL_SUCESSO) Then gError 57948

        .vdValorParcela = CDbl(.vdValorParcela)
        ret = Comando_BindVarInt(lComando, .vdValorParcela)
        If (ret <> AD_SQL_SUCESSO) Then gError 57949

        .viCobrador = CInt(.viCobrador)
        ret = Comando_BindVarInt(lComando, .viCobrador)
        If (ret <> AD_SQL_SUCESSO) Then gError 57949

        .viCarteiraCobrador = CInt(.viCarteiraCobrador)
        ret = Comando_BindVarInt(lComando, .viCarteiraCobrador)
        If (ret <> AD_SQL_SUCESSO) Then gError 57949

        .vlNumIntBaixaParcRec = CLng(.vlNumIntBaixaParcRec)
        ret = Comando_BindVarInt(lComando, .vlNumIntBaixaParcRec)
        If (ret <> AD_SQL_SUCESSO) Then gError 57948
        
        .viSequencial = CInt(.viSequencial)
        ret = Comando_BindVarInt(lComando, .viSequencial)
        If (ret <> AD_SQL_SUCESSO) Then gError 57950

        .vdtDataBaixa = CDate(.vdtDataBaixa)
        ret = Comando_BindVarInt(lComando, .vdtDataBaixa)
        If (ret <> AD_SQL_SUCESSO) Then gError 57981

        .vdValorBaixado = CDbl(.vdValorBaixado)
        ret = Comando_BindVarInt(lComando, .vdValorBaixado)
        If (ret <> AD_SQL_SUCESSO) Then gError 57982

        .vlNumIntBaixa = CLng(.vlNumIntBaixa)
        ret = Comando_BindVarInt(lComando, .vlNumIntBaixa)
        If (ret <> AD_SQL_SUCESSO) Then gError 94249

        .viStatusBaixaParcRec = CInt(.viStatusBaixaParcRec)
        ret = Comando_BindVarInt(lComando, .viStatusBaixaParcRec)
        If (ret <> AD_SQL_SUCESSO) Then gError 94250

        .vdValorDesconto = CDbl(.vdValorDesconto)
        ret = Comando_BindVarInt(lComando, .vdValorDesconto)
        If (ret <> AD_SQL_SUCESSO) Then gError 94251

        .vdValorMulta = CDbl(.vdValorMulta)
        ret = Comando_BindVarInt(lComando, .vdValorMulta)
        If (ret <> AD_SQL_SUCESSO) Then gError 94252

        .vdValorJuros = CDbl(.vdValorJuros)
        ret = Comando_BindVarInt(lComando, .vdValorJuros)
        If (ret <> AD_SQL_SUCESSO) Then gError 94253

        .vdValorPago = CDbl(.vdValorPago)
        ret = Comando_BindVarInt(lComando, .vdValorPago)
        If (ret <> AD_SQL_SUCESSO) Then gError 94254

        .viStatusBaixaRec = CInt(.viStatusBaixaRec)
        ret = Comando_BindVarInt(lComando, .viStatusBaixaRec)
        If (ret <> AD_SQL_SUCESSO) Then gError 94242

        .vsHistoricoBaixa = CStr(.vsHistoricoBaixa)
        ret = Comando_BindVarInt(lComando, .vsHistoricoBaixa)
        If (ret <> AD_SQL_SUCESSO) Then gError 94243

        .viMotivoBaixa = CInt(.viMotivoBaixa)
        ret = Comando_BindVarInt(lComando, .viMotivoBaixa)
        If (ret <> AD_SQL_SUCESSO) Then gError 94244

        .vdtDataContabilBaixa = CDate(.vdtDataContabilBaixa)
        ret = Comando_BindVarInt(lComando, .vdtDataContabilBaixa)
        If (ret <> AD_SQL_SUCESSO) Then gError 94245

        .vdtDataRegistroBaixa = CDate(.vdtDataRegistroBaixa)
        ret = Comando_BindVarInt(lComando, .vdtDataRegistroBaixa)
        If (ret <> AD_SQL_SUCESSO) Then gError 94246

        .vlNumMovCta = CLng(.vlNumMovCta)
        ret = Comando_BindVarInt(lComando, .vlNumMovCta)
        If (ret <> AD_SQL_SUCESSO) Then gError 94247

        .vlNumIntDebRecCli = CLng(.vlNumIntDebRecCli)
        ret = Comando_BindVarInt(lComando, .vlNumIntDebRecCli)
        If (ret <> AD_SQL_SUCESSO) Then gError 94248

    End With

    BaixaRecCancelar_Le_BaixaBaixa2 = SUCESSO

    Exit Function

Erro_BaixaRecCancelar_Le_BaixaBaixa2:

    BaixaRecCancelar_Le_BaixaBaixa2 = gErr

    Select Case gErr

        Case 57944 To 57950, 57981, 57982, 94242 To 94254
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_REC_BAIXADAS", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148752)

    End Select

    Exit Function

End Function

Private Function BaixaRecCancelar_Le_BaixaBaixa3(ByVal lComando As Long, tInfoBaixaRecCancelarVar As typeInfoBaixaRecCancelarVar, ByVal objBaixaRecCancelar As ClassBaixaRecCancelar) As Long
'Faz o Bind das variáveis dinâmicas que receberão os dados lidos

Dim ret As Long
Dim sSelect As String
Dim sFrom As String
Dim sWhere As String

On Error GoTo BaixaRecCancelar_Le_BaixaBaixa3

    With tInfoBaixaRecCancelarVar

        Select Case objBaixaRecCancelar.iTipoBaixas

            Case MOTIVO_RECEBTO_ANTECIPADO

                .vsHistoricoMovCCI = String(STRING_HISTORICO, 0)
                .vsContaCorrente = String(STRING_CONTA_CORRENTE_NOME_REDUZIDO, 0)

                .viCodConta = CInt(.viCodConta)
                ret = Comando_BindVarInt(lComando, .viCodConta)
                If (ret <> AD_SQL_SUCESSO) Then gError 94829
                
                .vdValorMovCCI = CDbl(.vdValorMovCCI)
                ret = Comando_BindVarInt(lComando, .vdValorMovCCI)
                If (ret <> AD_SQL_SUCESSO) Then gError 94257

                .vsHistoricoMovCCI = CStr(.vsHistoricoMovCCI)
                ret = Comando_BindVarInt(lComando, .vsHistoricoMovCCI)
                If (ret <> AD_SQL_SUCESSO) Then gError 94258

                .vsContaCorrente = CStr(.vsContaCorrente)
                ret = Comando_BindVarInt(lComando, .vsContaCorrente)
                If (ret <> AD_SQL_SUCESSO) Then gError 94259

                .vlNumIntRecAntecip = CLng(.vlNumIntRecAntecip)
                ret = Comando_BindVarInt(lComando, .vlNumIntRecAntecip)
                If (ret <> AD_SQL_SUCESSO) Then gError 94260

                .vdtDataCredito = CDate(.vdtDataCredito)
                ret = Comando_BindVarInt(lComando, .vdtDataCredito)
                If (ret <> AD_SQL_SUCESSO) Then gError 94829

            Case MOTIVO_RECEBIMENTO

                .vsHistoricoMovCCI = String(STRING_HISTORICOMOVCONTA, 0)
                .vsContaCorrente = String(STRING_CONTA_CORRENTE_NOME_REDUZIDO, 0)

                .viCodConta = CInt(.viCodConta)
                ret = Comando_BindVarInt(lComando, .viCodConta)
                If (ret <> AD_SQL_SUCESSO) Then gError 94830
                
                .vdValorMovCCI = CDbl(.vdValorMovCCI)
                ret = Comando_BindVarInt(lComando, .vdValorMovCCI)
                If (ret <> AD_SQL_SUCESSO) Then gError 94261

                .vsHistoricoMovCCI = CStr(.vsHistoricoMovCCI)
                ret = Comando_BindVarInt(lComando, .vsHistoricoMovCCI)
                If (ret <> AD_SQL_SUCESSO) Then gError 94262

                .vsContaCorrente = CStr(.vsContaCorrente)
                ret = Comando_BindVarInt(lComando, .vsContaCorrente)
                If (ret <> AD_SQL_SUCESSO) Then gError 94263

                .vdtDataCredito = CDate(.vdtDataCredito)
                ret = Comando_BindVarInt(lComando, .vdtDataCredito)
                If (ret <> AD_SQL_SUCESSO) Then gError 94829

            Case MOTIVO_DEBITO_CLIENTE

                .vsSiglaDocumento = String(STRING_SIGLA_DOCUMENTO, 0)
                
                .vdtDataEmissaoDebito = CDate(.vdtDataEmissaoDebito)
                ret = Comando_BindVarInt(lComando, .vdtDataEmissaoDebito)
                If (ret <> AD_SQL_SUCESSO) Then gError 94264

                .vlNumDocumento = CLng(.vlNumDocumento)
                ret = Comando_BindVarInt(lComando, .vlNumDocumento)
                If (ret <> AD_SQL_SUCESSO) Then gError 94265

                .vdSaldoDebito = CDbl(.vdSaldoDebito)
                ret = Comando_BindVarInt(lComando, .vdSaldoDebito)
                If (ret <> AD_SQL_SUCESSO) Then gError 94266

                .vsSiglaDocumento = CStr(.vsSiglaDocumento)
                ret = Comando_BindVarInt(lComando, .vsSiglaDocumento)
                If (ret <> AD_SQL_SUCESSO) Then gError 94267

                .vdValorDebito = CDbl(.vdValorDebito)
                ret = Comando_BindVarInt(lComando, .vdValorDebito)
                If (ret <> AD_SQL_SUCESSO) Then gError 94268

            Case MOTIVO_PERDA
                'Nao precisa fazer nada
        
        End Select

    End With

    BaixaRecCancelar_Le_BaixaBaixa3 = SUCESSO
    
    Exit Function

BaixaRecCancelar_Le_BaixaBaixa3:

    BaixaRecCancelar_Le_BaixaBaixa3 = gErr

    Select Case gErr

        Case 94257 To 94268, 94829, 94830

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148753)

    End Select

End Function

Private Function BaixaRecCancelar_Le_BaixaBaixa4(ByVal lComando As Long, tInfoBaixaRecCancelarVar As typeInfoBaixaRecCancelarVar, ByVal objBaixaRecCancelar As ClassBaixaRecCancelar) As Long
'Faz o Bind dos parâmetros fixos e dinâmicos

Dim lErro As Long
Dim ret As Integer

On Error GoTo Erro_BaixaRecCancelar_Le_BaixaBaixa4

    With tInfoBaixaRecCancelarVar

        tInfoBaixaRecCancelarVar.viStatusFiltro = STATUS_LANCADO
        ret = Comando_BindVarInt(lComando, tInfoBaixaRecCancelarVar.viStatusFiltro)
        If (ret <> AD_SQL_SUCESSO) Then gError 57953

        .vlCliente = objBaixaRecCancelar.lCliente
        ret = Comando_BindVarInt(lComando, .vlCliente)
        If (ret <> AD_SQL_SUCESSO) Then gError 57951

        .viFilialCliente = objBaixaRecCancelar.iFilialCliente
        ret = Comando_BindVarInt(lComando, .viFilialCliente)
        If (ret <> AD_SQL_SUCESSO) Then gError 57952

        .viMotivoBaixa = objBaixaRecCancelar.iTipoBaixas
        ret = Comando_BindVarInt(lComando, .viMotivoBaixa)
        If (ret <> AD_SQL_SUCESSO) Then gError 94255

        'Se titulo inicial preenchido
        If (objBaixaRecCancelar.lTituloInicial <> 0) Then
            .vlTituloInicialFiltro = objBaixaRecCancelar.lTituloInicial
            ret = Comando_BindVarInt(lComando, .vlTituloInicialFiltro)
            If (ret <> AD_SQL_SUCESSO) Then gError 57954
        End If

        'Se titulo final preenchido
        If (objBaixaRecCancelar.lTituloFinal <> 0) Then
            .vlTituloFinalFiltro = objBaixaRecCancelar.lTituloFinal
            ret = Comando_BindVarInt(lComando, .vlTituloFinalFiltro)
            If (ret <> AD_SQL_SUCESSO) Then gError 57955
        End If

        'Se o limite inicial de data de baixa de titulo estiver preenchido
        If (objBaixaRecCancelar.dtDataBaixaInicial <> DATA_NULA) Then
            .vdtDataBaixaInicialFiltro = objBaixaRecCancelar.dtDataBaixaInicial
            ret = Comando_BindVarInt(lComando, .vdtDataBaixaInicialFiltro)
            If (ret <> AD_SQL_SUCESSO) Then gError 57956
        End If

        'Se o limite final de data de baixa de titulo estiver preenchido
        If (objBaixaRecCancelar.dtDataBaixaFinal <> DATA_NULA) Then
            .vdtDataBaixaFinalFiltro = objBaixaRecCancelar.dtDataBaixaFinal
            ret = Comando_BindVarInt(lComando, .vdtDataBaixaFinalFiltro)
            If (ret <> AD_SQL_SUCESSO) Then gError 57957
        End If

        'Se o limite inicial de data de vencimento de parcela estiver preenchido
        If (objBaixaRecCancelar.dtDataVenctoInicial <> DATA_NULA) Then
            .vdtDataVenctoInicialFiltro = objBaixaRecCancelar.dtDataVenctoInicial
            ret = Comando_BindVarInt(lComando, .vdtDataVenctoInicialFiltro)
            If (ret <> AD_SQL_SUCESSO) Then gError 57958
        End If

        'Se o limite final de data de vencimento de parcela estiver preenchido
        If (objBaixaRecCancelar.dtDataVenctoFinal <> DATA_NULA) Then
            .vdtDataVenctoFinalFiltro = objBaixaRecCancelar.dtDataVenctoFinal
            ret = Comando_BindVarInt(lComando, .vdtDataVenctoFinalFiltro)
            If (ret <> AD_SQL_SUCESSO) Then gError 57959
        End If

    End With

    ret = Comando_ExecutarInt(lComando)
    If (ret <> AD_SQL_SUCESSO) Then gError 57960

    BaixaRecCancelar_Le_BaixaBaixa4 = SUCESSO

    Exit Function

Erro_BaixaRecCancelar_Le_BaixaBaixa4:

    BaixaRecCancelar_Le_BaixaBaixa4 = gErr

    Select Case gErr

        Case 57951 To 57960, 57951, 57952, 94255
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_REC", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148754)

    End Select

    Exit Function

End Function

Private Function BaixaRecCancelar_Le_BaixaBaixa5(ByVal lComando As Long, tInfoBaixaRecCancelarVar As typeInfoBaixaRecCancelarVar, ByVal objBaixaRecCancelar As ClassBaixaRecCancelar) As Long
'Faz a leitura no banco de dados, transfere os dados lidos para o obj e guarda-o na coleção

Dim lErro As Long
Dim objInfoBaixaRecCancelar As ClassInfoBaixaRecCancelar

On Error GoTo Erro_BaixaRecCancelar_Le_BaixaBaixa5

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 57962

    If lErro = AD_SQL_SEM_DADOS Then gError 57963

    Do While lErro = AD_SQL_SUCESSO

        Set objInfoBaixaRecCancelar = New ClassInfoBaixaRecCancelar

        With objInfoBaixaRecCancelar
            .iFilialEmpresa = tInfoBaixaRecCancelarVar.viFilialEmpresa
            .lNumDocumento = tInfoBaixaRecCancelarVar.vlNumDocumento
            .sSiglaDocumento = tInfoBaixaRecCancelarVar.vsSiglaDocumento
            .iNumParcela = tInfoBaixaRecCancelarVar.viNumParcela
            .lNumIntParcela = tInfoBaixaRecCancelarVar.vlNumIntParcela
            .dValorParcela = tInfoBaixaRecCancelarVar.vdValorParcela
            .iSequencial = tInfoBaixaRecCancelarVar.viSequencial
            .dtDataBaixa = tInfoBaixaRecCancelarVar.vdtDataBaixa
            .dtDataCredito = tInfoBaixaRecCancelarVar.vdtDataCredito
            .dValorBaixado = tInfoBaixaRecCancelarVar.vdValorBaixado
            .lNumIntBaixa = tInfoBaixaRecCancelarVar.vlNumIntBaixa
            .iStatusBaixaParcRec = tInfoBaixaRecCancelarVar.viStatusBaixaParcRec
            .dValorDesconto = tInfoBaixaRecCancelarVar.vdValorDesconto
            .dValorMulta = tInfoBaixaRecCancelarVar.vdValorMulta
            .dValorJuros = tInfoBaixaRecCancelarVar.vdValorJuros
            .dValorPago = tInfoBaixaRecCancelarVar.vdValorPago
            .iStatusBaixaRec = tInfoBaixaRecCancelarVar.viStatusBaixaRec
            .sHistoricoBaixa = tInfoBaixaRecCancelarVar.vsHistoricoBaixa
            .iMotivoBaixa = tInfoBaixaRecCancelarVar.viMotivoBaixa
            .dtDataContabilBaixa = tInfoBaixaRecCancelarVar.vdtDataContabilBaixa
            .dtDataRegistroBaixa = tInfoBaixaRecCancelarVar.vdtDataRegistroBaixa
            .lNumMovCta = tInfoBaixaRecCancelarVar.vlNumMovCta
            .lNumIntRecAntecip = tInfoBaixaRecCancelarVar.vlNumIntRecAntecip
            .lNumIntBaixaParcRec = tInfoBaixaRecCancelarVar.vlNumIntBaixaParcRec
            .lNumIntDebRecCli = tInfoBaixaRecCancelarVar.vlNumIntDebRecCli
            .iCobrador = tInfoBaixaRecCancelarVar.viCobrador
            .iCarteiraCobrador = tInfoBaixaRecCancelarVar.viCarteiraCobrador
        End With
        
        Select Case objBaixaRecCancelar.iTipoBaixas
        
            Case MOTIVO_RECEBTO_ANTECIPADO
            
                objInfoBaixaRecCancelar.iCodConta = tInfoBaixaRecCancelarVar.viCodConta
                objInfoBaixaRecCancelar.dValorMovCCI = tInfoBaixaRecCancelarVar.vdValorMovCCI
                objInfoBaixaRecCancelar.sHistoricoMovCCI = tInfoBaixaRecCancelarVar.vsHistoricoMovCCI
                objInfoBaixaRecCancelar.sContaCorrente = tInfoBaixaRecCancelarVar.vsContaCorrente
                objInfoBaixaRecCancelar.lNumIntRecAntecip = tInfoBaixaRecCancelarVar.vlNumIntRecAntecip
                
            Case MOTIVO_RECEBIMENTO, MOTIVO_PERDA
            
                objInfoBaixaRecCancelar.iCodConta = tInfoBaixaRecCancelarVar.viCodConta
                objInfoBaixaRecCancelar.dValorMovCCI = tInfoBaixaRecCancelarVar.vdValorMovCCI
                objInfoBaixaRecCancelar.sHistoricoMovCCI = tInfoBaixaRecCancelarVar.vsHistoricoMovCCI
                objInfoBaixaRecCancelar.sContaCorrente = tInfoBaixaRecCancelarVar.vsContaCorrente
            
            Case MOTIVO_DEBITO_CLIENTE
            
                objInfoBaixaRecCancelar.dtDataEmissaoDebito = tInfoBaixaRecCancelarVar.vdtDataEmissaoDebito
                objInfoBaixaRecCancelar.lNumDebito = tInfoBaixaRecCancelarVar.vlNumDebito
                objInfoBaixaRecCancelar.dSaldoDebito = tInfoBaixaRecCancelarVar.vdSaldoDebito
                objInfoBaixaRecCancelar.sSiglaDocumento = tInfoBaixaRecCancelarVar.vsSiglaDocumento
                objInfoBaixaRecCancelar.dValorDebito = tInfoBaixaRecCancelarVar.vdValorDebito
                
        End Select
                
        objBaixaRecCancelar.colInfoBaixaRecCancelar.Add objInfoBaixaRecCancelar

        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 57964

    Loop

    BaixaRecCancelar_Le_BaixaBaixa5 = SUCESSO

    Exit Function

Erro_BaixaRecCancelar_Le_BaixaBaixa5:

    BaixaRecCancelar_Le_BaixaBaixa5 = gErr

    Select Case gErr

        Case 57962, 57964
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_REC", gErr)

        Case 57963 'Sem dados

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148755)

    End Select

    Exit Function

End Function

Public Function BaixaRecCancelar_Le_MovCCI(ByVal objBaixaRecCancelar As ClassBaixaRecCancelar) As Long
'Preenche em objBaixaRecCancelar dados referentes a movimentos de conta corrente associados a baixas que podem ser canceladas

Dim lErro As Long
Dim lComando As Long
Dim tInfoBaixaRecCancelarVar As typeInfoBaixaRecCancelarVar
Dim sSelect As String

On Error GoTo Erro_BaixaRecCancelar_Le_MovCCI

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 94774

    'Monta o Select que será executado
    Call BaixaRecCancelar_Le_MovCCI1(sSelect, objBaixaRecCancelar)

    'Faz o Bind dos campos que serão selecionados
    lErro = BaixaRecCancelar_Le_MovCCI2(lComando, sSelect, tInfoBaixaRecCancelarVar)
    If lErro <> SUCESSO Then gError 94775

    'Faz o Bind dos campos que estão sendo passados para a cláusula WHERE
    lErro = BaixaRecCancelar_Le_MovCCI3(lComando, sSelect, tInfoBaixaRecCancelarVar, objBaixaRecCancelar)
    If lErro <> SUCESSO Then gError 94776

    'Executa a leitura do BD e guarda os dados lidos no obj
    lErro = BaixaRecCancelar_Le_MovCCI4(lComando, tInfoBaixaRecCancelarVar, objBaixaRecCancelar)
    If lErro <> SUCESSO And lErro <> 94798 Then gError 94777

    'Se não encontrou => erro. O erro deve ser tratado na rotina chamadora
    If lErro = 94798 Then gError 94778

    Call Comando_Fechar(lComando)

    BaixaRecCancelar_Le_MovCCI = SUCESSO

    Exit Function

Erro_BaixaRecCancelar_Le_MovCCI:

    BaixaRecCancelar_Le_MovCCI = gErr

    Select Case gErr

        Case 94774
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 94775 To 94777

        Case 94778 'Sem Dados

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148756)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Private Sub BaixaRecCancelar_Le_MovCCI1(sSelect As String, ByVal objBaixaRecCancelar As ClassBaixaRecCancelar)

Dim sFrom As String
Dim sWhere As String
Dim sOrderBy As String

    'Monta a parte fixa do select
    'sSelect = "SELECT BaixasRec.Motivo, MovimentosContaCorrente.NumMovto, MovimentosContaCorrente.FilialEmpresa, MovimentosContaCorrente.CodConta, MovimentosContaCorrente.Sequencial, MovimentosContaCorrente.Tipo, MovimentosContaCorrente.Numero, MovimentosContaCorrente.DataMovimento, MovimentosContaCorrente.Valor, MovimentosContaCorrente.Historico "
    sSelect = "SELECT BaixasRec.Data, BaixasRec.Motivo, MovimentosContaCorrente.NumMovto, MovimentosContaCorrente.FilialEmpresa, MovimentosContaCorrente.CodConta, MovimentosContaCorrente.Tipo, MovimentosContaCorrente.Numero, MovimentosContaCorrente.DataMovimento, MovimentosContaCorrente.Valor, MovimentosContaCorrente.Historico "
    sFrom = "FROM MovimentosContaCorrente, BaixasRec "
    sWhere = "WHERE BaixasRec.NumMovCta = MovimentosContaCorrente.NumMovto AND BaixasRec.Motivo = ? AND BaixasRec.Status <> ? AND MovimentosContaCorrente.Conciliado = ? AND MovimentosContaCorrente.FilialEmpresa = ? "
    sOrderBy = "ORDER BY MovimentosContaCorrente.DataMovimento, MovimentosContaCorrente.NumMovto"

    'Monta a parte dinâmica da cláusula WHERE

    'Se a data da baixa inicial está preenchida
    If objBaixaRecCancelar.dtDataBaixaInicial <> DATA_NULA Then

        'Acrescenta à cláusula WHERE o filtro de DataMovimento maior igual à Data Inicial informada
        sWhere = sWhere & "AND BaixasRec.Data >= ? "

    End If

    'Se a data da baixa final está preenchida
    If objBaixaRecCancelar.dtDataBaixaFinal <> DATA_NULA Then

        'Acrescenta à cláusula WHERE o filtro de DataMovimento menor igual à Data Final informada
        sWhere = sWhere & "AND BaixasRec.Data <= ? "

    End If

    'Se foi informada uma conta corrente para filtro
    If objBaixaRecCancelar.iCtaCorrenteFiltro <> COMBO_INDICE Then

        'Acrescenta à cláusula WHERE o filtro de Conta Corrente
        sWhere = sWhere & "AND MovimentosContaCorrente.CodConta = ? "

    End If

    'Guarda o select na variável
    sSelect = sSelect & sFrom & sWhere & sOrderBy

End Sub

Private Function BaixaRecCancelar_Le_MovCCI2(ByVal lComando As Long, ByVal sSelect As String, tInfoBaixaRecCancelarVar As typeInfoBaixaRecCancelarVar) As Long

Dim iRetorno As Integer

On Error GoTo Erro_BaixaRecCancelar_Le_MovCCI2

    With tInfoBaixaRecCancelarVar

        iRetorno = Comando_PrepararInt(lComando, sSelect)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 94779

        .vdtDataBaixa = CDate(.vdtDataBaixa)
        iRetorno = Comando_BindVarInt(lComando, .vdtDataBaixa)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 94780

        .viMotivoBaixa = CInt(.viMotivoBaixa)
        iRetorno = Comando_BindVarInt(lComando, .viMotivoBaixa)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 94780

        .vlNumMovCta = CLng(.vlNumMovCta)
        iRetorno = Comando_BindVarInt(lComando, .vlNumMovCta)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 94781

        .viFilialEmpresa = CInt(.viFilialEmpresa)
        iRetorno = Comando_BindVarInt(lComando, .viFilialEmpresa)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 94782

        .viCodConta = CInt(.viCodConta)
        iRetorno = Comando_BindVarInt(lComando, .viCodConta)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 94783

'        .viSequencial = CInt(.viSequencial)
'        iRetorno = Comando_BindVarInt(lComando, .viSequencial)
'        If (iRetorno <> AD_SQL_SUCESSO) Then gError 94784

        .viTipoMovCCI = CInt(.viTipoMovCCI)
        iRetorno = Comando_BindVarInt(lComando, .viTipoMovCCI)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 94785

        .vlNumDocumento = CLng(.vlNumDocumento)
        iRetorno = Comando_BindVarInt(lComando, .vlNumDocumento)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 94786

        .vdtDataCredito = CDate(.vdtDataCredito)
        iRetorno = Comando_BindVarInt(lComando, .vdtDataCredito)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 94787

        .vdValorMovCCI = CDbl(.vdValorMovCCI)
        iRetorno = Comando_BindVarInt(lComando, .vdValorMovCCI)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 94788

        .vsHistoricoMovCCI = CStr(.vsHistoricoMovCCI)
        iRetorno = Comando_BindVarInt(lComando, .vsHistoricoMovCCI)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 94789

    End With

    BaixaRecCancelar_Le_MovCCI2 = SUCESSO

    Exit Function

Erro_BaixaRecCancelar_Le_MovCCI2:

    BaixaRecCancelar_Le_MovCCI2 = gErr

    Select Case gErr

        Case 94779 To 94789
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCONTACORRENTE", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148757)

    End Select

    Exit Function

End Function

Private Function BaixaRecCancelar_Le_MovCCI3(ByVal lComando As Long, ByVal sSelect As String, tInfoBaixaRecCancelarVar As typeInfoBaixaRecCancelarVar, ByVal objBaixaRecCancelar As ClassBaixaRecCancelar) As Long

Dim iRetorno As Integer

On Error GoTo Erro_BaixaRecCancelar_Le_MovCCI3

    With tInfoBaixaRecCancelarVar

        .viMotivoBaixa = MOTIVO_RECEBIMENTO
        iRetorno = Comando_BindVarInt(lComando, .viMotivoBaixa)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 94790

        .viStatusFiltro = STATUS_EXCLUIDO
        iRetorno = Comando_BindVarInt(lComando, .viStatusFiltro)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 94791

        .viConciliadoFiltro = NAO_CONCILIADO
        iRetorno = Comando_BindVarInt(lComando, .viConciliadoFiltro)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 94792
        
        .viFilialEmpresa = giFilialEmpresa
        iRetorno = Comando_BindVarInt(lComando, .viFilialEmpresa)
        If (iRetorno <> AD_SQL_SUCESSO) Then gError 94792

        If objBaixaRecCancelar.dtDataBaixaInicial <> DATA_NULA Then
            .vdtDataBaixaInicialFiltro = objBaixaRecCancelar.dtDataBaixaInicial
            iRetorno = Comando_BindVarInt(lComando, .vdtDataBaixaInicialFiltro)
            If (iRetorno <> AD_SQL_SUCESSO) Then gError 94793
        End If

        If objBaixaRecCancelar.dtDataBaixaFinal <> DATA_NULA Then
            .vdtDataBaixaFinalFiltro = objBaixaRecCancelar.dtDataBaixaFinal
            iRetorno = Comando_BindVarInt(lComando, .vdtDataBaixaFinalFiltro)
            If (iRetorno <> AD_SQL_SUCESSO) Then gError 94794
        End If

        If objBaixaRecCancelar.iCtaCorrenteFiltro <> COMBO_INDICE Then
            .viCodContaFiltro = objBaixaRecCancelar.iCtaCorrenteFiltro
            iRetorno = Comando_BindVarInt(lComando, .viCodContaFiltro)
            If (iRetorno <> AD_SQL_SUCESSO) Then gError 94795
        End If

    End With

    BaixaRecCancelar_Le_MovCCI3 = SUCESSO

    Exit Function

Erro_BaixaRecCancelar_Le_MovCCI3:

    BaixaRecCancelar_Le_MovCCI3 = gErr

    Select Case gErr

        Case 94790 To 94795
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCONTACORRENTE", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148758)

    End Select

    Exit Function

End Function

Private Function BaixaRecCancelar_Le_MovCCI4(ByVal lComando As Long, tInfoBaixaRecCancelarVar As typeInfoBaixaRecCancelarVar, ByVal objBaixaRecCancelar As ClassBaixaRecCancelar) As Long

Dim iRetorno As Integer
Dim objInfoBaixaRecCancelar As ClassInfoBaixaRecCancelar
Dim lErro As Long

On Error GoTo Erro_BaixaRecCancelar_Le_MovCCI4

    tInfoBaixaRecCancelarVar.vsHistoricoMovCCI = String(STRING_HISTORICO, 0)

    iRetorno = Comando_ExecutarInt(lComando)
    If (iRetorno <> AD_SQL_SUCESSO) Then gError 94796

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 94797

    If lErro = AD_SQL_SEM_DADOS Then gError 94798

    Do While lErro = SUCESSO

        Set objInfoBaixaRecCancelar = New ClassInfoBaixaRecCancelar

        With tInfoBaixaRecCancelarVar
            objInfoBaixaRecCancelar.iMotivoBaixa = .viMotivoBaixa
            objInfoBaixaRecCancelar.lNumMovCta = .vlNumMovCta
            objInfoBaixaRecCancelar.iFilialEmpresa = .viFilialEmpresa
            objInfoBaixaRecCancelar.iCodConta = .viCodConta
'            objInfoBaixaRecCancelar.iSequencial = .viSequencial
            objInfoBaixaRecCancelar.iTipoMovCCI = .viTipoMovCCI
            objInfoBaixaRecCancelar.lNumDocumento = .vlNumDocumento
            objInfoBaixaRecCancelar.dtDataBaixa = .vdtDataBaixa
            objInfoBaixaRecCancelar.dValorMovCCI = .vdValorMovCCI
            objInfoBaixaRecCancelar.sHistoricoMovCCI = .vsHistoricoMovCCI
            objInfoBaixaRecCancelar.dtDataCredito = .vdtDataCredito
        End With

        objBaixaRecCancelar.colInfoBaixaRecCancelar.Add objInfoBaixaRecCancelar

        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 94799

    Loop

    BaixaRecCancelar_Le_MovCCI4 = SUCESSO

    Exit Function

Erro_BaixaRecCancelar_Le_MovCCI4:

    BaixaRecCancelar_Le_MovCCI4 = gErr

    Select Case gErr

        Case 94796, 94797, 94799
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCONTACORRENTE", gErr)

        Case 94798 'Sem Dados

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148759)

    End Select

    Exit Function

End Function

Public Function BaixaRecCancelar_Le_ParcelasMovCCI(ByVal lNumMovCta As Long, ByVal colParcelasMovCCI As Collection) As Long
'Lê as parcelas que foram baixadas através do movimento passado como parâmetro em lNumMovCta

Dim lErro As Long
Dim lComando As Long
Dim tInfoBaixaRecCancelar As typeInfoBaixaRecCancelar
Dim objInfoBaixaRecCancelar As ClassInfoBaixaRecCancelar

On Error GoTo Erro_BaixaRecCancelar_Le_ParcelasMovCCI

    'Abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 94831
    
    'Inicializa a string
    tInfoBaixaRecCancelar.sSiglaDocumento = String(STRING_SIGLA_DOCUMENTO, 0)
    
    'Faz a leitura
    lErro = Comando_Executar(lComando, "SELECT ParcelasRecTodas.NumIntDoc, BaixasParcRec.NumIntDoc, BaixasParcRec.ValorRecebido, TitulosRecTodos.FilialEmpresa, TitulosRecTodos.NumTitulo, TitulosRecTodos.SiglaDocumento, ParcelasRecTodas.NumParcela, BaixasParcRec.NumIntBaixa, ParcelasRecTodas.Valor, ParcelasRecTodas.Cobrador, ParcelasRecTodas.CarteiraCobranca, BaixasParcRec.Sequencial, BaixasRec.Data, BaixasParcRec.ValorBaixado, BaixasParcRec.ValorJuros, BaixasParcRec.ValorMulta, BaixasParcRec.ValorDesconto FROM TitulosRecTodos, BaixasRec, BaixasParcRec, ParcelasRecTodas WHERE TitulosRecTodos.NumIntDoc = ParcelasRecTodas.NumIntTitulo AND BaixasRec.NumIntBaixa = BaixasParcRec.NumIntBaixa AND BaixasParcRec.NumIntParcela = ParcelasRecTodas.NumIntDoc AND BaixasRec.NumMovCta = ?", _
        tInfoBaixaRecCancelar.lNumIntParcela, tInfoBaixaRecCancelar.lNumIntBaixaParcRec, tInfoBaixaRecCancelar.dValorPago, _
        tInfoBaixaRecCancelar.iFilialEmpresa, tInfoBaixaRecCancelar.lNumDocumento, tInfoBaixaRecCancelar.sSiglaDocumento, tInfoBaixaRecCancelar.iNumParcela, tInfoBaixaRecCancelar.lNumIntBaixa, tInfoBaixaRecCancelar.dValorParcela, tInfoBaixaRecCancelar.iCobrador, tInfoBaixaRecCancelar.iCarteiraCobrador, tInfoBaixaRecCancelar.iSequencial, tInfoBaixaRecCancelar.dtDataBaixa, tInfoBaixaRecCancelar.dValorBaixado, tInfoBaixaRecCancelar.dValorJuros, tInfoBaixaRecCancelar.dValorMulta, tInfoBaixaRecCancelar.dValorDesconto, lNumMovCta)
    If lErro <> AD_SQL_SUCESSO Then gError 94832
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 94833
    
    'Se não encontrou => erro
    If lErro = AD_SQL_SEM_DADOS Then gError 94834
    
    Do While lErro = SUCESSO
        
        Set objInfoBaixaRecCancelar = New ClassInfoBaixaRecCancelar
        
        With tInfoBaixaRecCancelar
        
            'Guarda os dados lidos no obj
            objInfoBaixaRecCancelar.iFilialEmpresa = .iFilialEmpresa
            objInfoBaixaRecCancelar.lNumDocumento = .lNumDocumento
            objInfoBaixaRecCancelar.sSiglaDocumento = .sSiglaDocumento
            objInfoBaixaRecCancelar.iNumParcela = .iNumParcela
            objInfoBaixaRecCancelar.lNumIntBaixa = .lNumIntBaixa
            objInfoBaixaRecCancelar.dValorParcela = .dValorParcela
            objInfoBaixaRecCancelar.iSequencial = .iSequencial
            objInfoBaixaRecCancelar.dtDataBaixa = .dtDataBaixa
            objInfoBaixaRecCancelar.dValorBaixado = .dValorBaixado
            objInfoBaixaRecCancelar.dValorJuros = .dValorJuros
            objInfoBaixaRecCancelar.dValorMulta = .dValorMulta
            objInfoBaixaRecCancelar.dValorDesconto = .dValorDesconto
            
            objInfoBaixaRecCancelar.dValorBaixadoCanc = .dValorBaixado
            objInfoBaixaRecCancelar.dValorJurosCanc = .dValorJuros
            objInfoBaixaRecCancelar.dValorMultaCanc = .dValorMulta
            objInfoBaixaRecCancelar.dValorDescontoCanc = .dValorDesconto
            
            objInfoBaixaRecCancelar.lNumIntParcela = .lNumIntParcela
            objInfoBaixaRecCancelar.lNumIntBaixaParcRec = .lNumIntBaixaParcRec
            objInfoBaixaRecCancelar.dValorPago = .dValorPago
            objInfoBaixaRecCancelar.dValorTotalCanc = .dValorPago
                        
            objInfoBaixaRecCancelar.iCobrador = .iCobrador
            objInfoBaixaRecCancelar.iCarteiraCobrador = .iCarteiraCobrador
            
            'Guarda o obj na coleção
            colParcelasMovCCI.Add objInfoBaixaRecCancelar
        
        End With
        
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 94835
        
    Loop
        
    'Fecha o comando
    Call Comando_Fechar(lComando)
    
    BaixaRecCancelar_Le_ParcelasMovCCI = SUCESSO
    
    Exit Function

Erro_BaixaRecCancelar_Le_ParcelasMovCCI:

    BaixaRecCancelar_Le_ParcelasMovCCI = gErr
    
    Select Case gErr
    
        Case 94831
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 94832, 94833, 94835
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_REC", gErr)
                
        Case 94834 'Sem dados
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148760)
    
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function
    
End Function

'Inicio Daniel
Public Function FornecedorHistorico_Le_Todos(ByVal colFornecedorHistorico As Collection) As Long
'Le todos os historicos de fornecedores já existentes no banco de dados
'e devolve dentro da colecao

Dim lErro As Long
Dim lComando As Long
Dim sSelect As String
Dim tFornecedorHistorico As typeFornecedorHistorico
Dim objFornecedorHistorico As ClassFornecedorHistorico

On Error GoTo Erro_FornecedorHistorico_Le_Todos
    
    'Abre o Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 97790
    
    'Carrega sSelect com a Expressão SQL
    sSelect = "SELECT FornecedorHistorico.DataAtualizacao, FornecedorHistorico.Codigo, FornecedorHistorico.Filial , FornecedorHistorico.CPF_CGC, FornecedorHistorico.InscricaoEstadual,FornecedorHistorico.InscricaoSuframa, FornecedorHistorico.InscricaoMunicipal, FornecedorHistorico.RazaoSocial, FornecedorHistorico.Endereco, FornecedorHistorico.Bairro, FornecedorHistorico.Cidade, FornecedorHistorico.UF, FornecedorHistorico.Pais, FornecedorHistorico.CEP FROM FornecedorHistorico"
    
    With tFornecedorHistorico
        
        'Inicializa as Strings do Type
        .sBairro = String(STRING_BAIRRO, 0)
        .sCEP = String(STRING_CEP, 0)
        .sCgc = String(STRING_CGC, 0)
        .sCidade = String(STRING_CIDADE, 0)
        .sEndereco = String(STRING_ENDERECO, 0)
        .sInscricaoEstadual = String(STRING_INSCR_EST, 0)
        .sInscricaoMunicipal = String(STRING_INSCR_MUN, 0)
        .sInscricaoSuframa = String(STRING_INSCR_SUF, 0)
        .sPais = String(STRING_PAISES_NOME, 0)
        .sRazaoSocial = String(STRING_FORNECEDOR_RAZAO_SOC, 0)
        .sUF = String(STRING_ESTADO_SIGLA, 0)
    
        'Executa o Comando SQL
        lErro = Comando_Executar(lComando, sSelect, .dtDataAtualizacao, .lCodigo, .iFilialForn, .sCgc, .sInscricaoEstadual, .sInscricaoSuframa, .sInscricaoMunicipal, .sRazaoSocial, .sEndereco, .sBairro, .sCidade, .sUF, .sPais, .sCEP)
        If lErro <> AD_SQL_SUCESSO Then gError 97791
    
    End With
        
    'Busca o Primeiro Registro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 97792

    'Se não encontrou => ERRO
    If lErro = AD_SQL_SEM_DADOS Then gError 97794
    
    'Enquanto tem fornecedor => adiciona na colecao
    Do While lErro <> AD_SQL_SEM_DADOS
                                    
        'Inicializa o obj
        Set objFornecedorHistorico = New ClassFornecedorHistorico
        
        'Transfere os dados para um obj para adicionar a colecao
        With objFornecedorHistorico
    
            .dtDataAtualizacao = tFornecedorHistorico.dtDataAtualizacao
            .iFilialForn = tFornecedorHistorico.iFilialForn
            .lCodigo = tFornecedorHistorico.lCodigo
            .sBairro = tFornecedorHistorico.sBairro
            .sCEP = tFornecedorHistorico.sCEP
            .sCgc = tFornecedorHistorico.sCgc
            .sCidade = tFornecedorHistorico.sCidade
            .sEndereco = tFornecedorHistorico.sEndereco
            .sInscricaoEstadual = tFornecedorHistorico.sInscricaoEstadual
            .sInscricaoMunicipal = tFornecedorHistorico.sInscricaoMunicipal
            .sInscricaoSuframa = tFornecedorHistorico.sInscricaoSuframa
            .sUF = tFornecedorHistorico.sUF
            .sRazaoSocial = tFornecedorHistorico.sRazaoSocial
            .sPais = tFornecedorHistorico.sPais
            
        End With
    
        'Adiciona a Colecao o ObjFornecedorHistorico
        colFornecedorHistorico.Add objFornecedorHistorico
                
        'Busca o Próximo Registro
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 97793
        
    Loop
    
    'Fecha o Comando
    Call Comando_Fechar(lComando)
    
    FornecedorHistorico_Le_Todos = SUCESSO
    
    Exit Function
    
Erro_FornecedorHistorico_Le_Todos:

    FornecedorHistorico_Le_Todos = gErr

    Select Case gErr
        
        Case 97790
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 97791, 97792, 97793
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FORNECEDORHISTORICO", gErr)
                    
        Case 97794
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148761)
    
    End Select

    'Fecha o Comando
    Call Comando_Fechar(lComando)

End Function
'Fim Daniel

Function NFiscal_Obtem_Nome_Tela(ByVal lNumIntDoc As Long, sTela As String) As Long
'Recolhe o note da tela na nota fiscal pelo numintdoc passado
Dim lErro As Long
Dim lComando As Long

On Error GoTo Erro_NFiscal_Obtem_Nome_Tela

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 99036
    
    sTela = String(STRING_TIPODOCINFO_TITULO_TELA, 0)
    
    lErro = Comando_Executar(lComando, "SELECT NomeTelaNFiscal FROM NFiscal, TiposDocInfo WHERE  NumIntDoc = ? AND NFiscal.TipoNFiscal = TiposDocInfo.Codigo", sTela, lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 99037
        
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 99038
    
    If lErro = AD_SQL_SEM_DADOS Then gError 99039
    
    lComando = Comando_Fechar(lComando)
    
    NFiscal_Obtem_Nome_Tela = SUCESSO
    
    Exit Function
    
Erro_NFiscal_Obtem_Nome_Tela:

    NFiscal_Obtem_Nome_Tela = gErr

    Select Case gErr

        Case 99036
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 99037, 99038
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", gErr)
            
        Case 99039
            lErro = Rotina_Erro(vbOKOnly, "ERRO_NFISCAL_NAO_ENCONTRADO", gErr)
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148762)

    End Select

    Exit Function
    
End Function

Function ChequePre_Le2_Lock(ByVal objChequePre As ClassChequePre) As Long
'Le o ChequePre a partir da chave(FilialEmpresaLoja\SequencialBack) fornecida em objChequePre. Devolve os dados em objChequePre

Dim lComando1 As Long
Dim lErro As Long
Dim tChequePre  As typeChequePre

On Error GoTo Erro_ChequePre_Le2_Lock

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 109864
    
    With tChequePre
    
    .sAgencia = String(STRING_AGENCIA, 0)
    .sContaCorrente = String(STRING_CONTA_CORRENTE, 0)
    .sCPFCGC = String(STRING_CLIENTE_CGC, 0)
    
    'Pega os dados da tabela ChequePre
    lErro = Comando_ExecutarPos(lComando1, "SELECT NumIntCheque, FilialEmpresa, Cliente, Filial, Banco, Agencia, ContaCorrente, Numero, DataDeposito, Valor, NumBordero, CPFCGC, NumMovtoCaixa, Aprovado, NaoEspecificado, NumBorderoLoja, SequencialLoja, Status, DataEmissao, SequencialBack, Localizacao FROM ChequePre WHERE FilialEmpresa = ? AND SequencialBack = ?", _
       0, .lNumIntCheque, .iFilialEmpresa, .lCliente, .iFilial, .iBanco, .sAgencia, .sContaCorrente, .lNumero, .dtDataDeposito, .dValor, .lNumBordero, .sCPFCGC, .lNumMovtoCaixa, .iAprovado, .iNaoEspecificado, .lNumBorderoLoja, .lSequencialLoja, .iStatus, .dtDataEmissao, .lSequencialBack, .iLocalizacao, objChequePre.iFilialEmpresa, objChequePre.lSequencialBack)
    If lErro <> AD_SQL_SUCESSO Then gError 109865

    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109866

    If lErro = AD_SQL_SEM_DADOS Then gError 109867
    
    lErro = Comando_LockExclusive(lComando1)
    If lErro <> AD_SQL_SUCESSO Then gError 109910
    
    objChequePre.lNumIntCheque = .lNumIntCheque
    objChequePre.iFilialEmpresa = .iFilialEmpresa
    objChequePre.lCliente = .lCliente
    objChequePre.iFilial = .iFilial
    objChequePre.iBanco = .iBanco
    objChequePre.sAgencia = .sAgencia
    objChequePre.sContaCorrente = .sContaCorrente
    objChequePre.lNumero = .lNumero
    objChequePre.dtDataDeposito = .dtDataDeposito
    objChequePre.dValor = .dValor
    objChequePre.lNumBordero = .lNumBordero
    objChequePre.sCPFCGC = .sCPFCGC
    objChequePre.lNumMovtoCaixa = .lNumMovtoCaixa
    objChequePre.iAprovado = .iAprovado
    objChequePre.iNaoEspecificado = .iNaoEspecificado
    objChequePre.lNumBorderoLoja = .lNumBorderoLoja
    objChequePre.lSequencialLoja = .lSequencialLoja
    objChequePre.iStatus = .iStatus
    objChequePre.dtDataEmissao = .dtDataEmissao
    objChequePre.lSequencialBack = .lSequencialBack
    objChequePre.iLocalizacao = .iLocalizacao
    
    End With
    
    Call Comando_Fechar(lComando1)

    ChequePre_Le2_Lock = SUCESSO

    Exit Function

Erro_ChequePre_Le2_Lock:

    ChequePre_Le2_Lock = gErr

    Select Case gErr

        Case 109864
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 109865, 109866
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUEPRE", Err, objChequePre.lNumIntCheque)

        Case 109867
        
        Case 109910
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_CHEQUEPRE", Err, objChequePre.lNumIntCheque)
                
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148763)

    End Select

    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Function ChequePre_Le2(ByVal objChequePre As ClassChequePre) As Long
'Le o ChequePre a partir da chave(FilialEmpresaLoja\SequencialBack) fornecida em objChequePre. Devolve os dados em objChequePre

Dim lComando1 As Long
Dim lErro As Long
Dim tChequePre  As typeChequePre

On Error GoTo Erro_ChequePre_Le2

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 109961
    
    With tChequePre
    
    .sAgencia = String(STRING_AGENCIA, 0)
    .sContaCorrente = String(STRING_CONTA_CORRENTE, 0)
    .sCPFCGC = String(STRING_CLIENTE_CGC, 0)
    
    'Pega os dados da tabela ChequePre
    lErro = Comando_Executar(lComando1, "SELECT NumIntCheque, FilialEmpresa, Cliente, Filial, Banco, Agencia, ContaCorrente, Numero, DataDeposito, Valor, NumBordero, CPFCGC, NumMovtoCaixa, Aprovado, NaoEspecificado, NumBorderoLoja, SequencialLoja, Status, DataEmissao, Localizacao FROM ChequePre WHERE FilialEmpresa = ? AND SequencialBack = ?", _
       .lNumIntCheque, .iFilialEmpresa, .lCliente, .iFilial, .iBanco, .sAgencia, .sContaCorrente, .lNumero, .dtDataDeposito, .dValor, .lNumBordero, .sCPFCGC, .lNumMovtoCaixa, .iAprovado, .iNaoEspecificado, .lNumBorderoLoja, .lSequencialLoja, .iStatus, .dtDataEmissao, .iLocalizacao, objChequePre.iFilialEmpresa, objChequePre.lSequencialBack)
    If lErro <> AD_SQL_SUCESSO Then gError 109962

    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109963

    If lErro = AD_SQL_SEM_DADOS Then gError 109964
    
    objChequePre.lNumIntCheque = .lNumIntCheque
    objChequePre.iFilialEmpresa = .iFilialEmpresa
    objChequePre.lCliente = .lCliente
    objChequePre.iFilial = .iFilial
    objChequePre.iBanco = .iBanco
    objChequePre.sAgencia = .sAgencia
    objChequePre.sContaCorrente = .sContaCorrente
    objChequePre.lNumero = .lNumero
    objChequePre.dtDataDeposito = .dtDataDeposito
    objChequePre.dValor = .dValor
    objChequePre.lNumBordero = .lNumBordero
    objChequePre.sCPFCGC = .sCPFCGC
    objChequePre.lNumMovtoCaixa = .lNumMovtoCaixa
    objChequePre.iAprovado = .iAprovado
    objChequePre.iNaoEspecificado = .iNaoEspecificado
    objChequePre.lNumBorderoLoja = .lNumBorderoLoja
    objChequePre.lSequencialLoja = .lSequencialLoja
    objChequePre.iStatus = .iStatus
    objChequePre.dtDataEmissao = .dtDataEmissao
    objChequePre.iLocalizacao = .iLocalizacao
    
    End With
    
    Call Comando_Fechar(lComando1)

    ChequePre_Le2 = SUCESSO

    Exit Function

Erro_ChequePre_Le2:

    ChequePre_Le2 = gErr

    Select Case gErr

        Case 109961
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 109962, 109963
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUEPRE", Err, objChequePre.lNumIntCheque)

        Case 109964
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148764)

    End Select

    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Function ChequeRel_BordDevolvido(ByVal objChequePre As ClassChequePre) As Long
'Verififica se o Cheque está no banco e nao foi enviado para lá pelo loja caixa central
'e retorna qual o bordero que está colocando o cheque atualmente no banco pois com
'as devolucoes podem existir varios borderos para o mesmo cheque.
 
Dim lComando1 As Long
Dim lErro As Long
Dim tChequePre As typeChequePre
Dim iTipoBordero As Integer
 
On Error GoTo Erro_ChequeRel_BordDevolvido
 
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 109868
    
    With tChequePre
    
        .sAgencia = String(STRING_AGENCIA, 0)
        .sContaCorrente = String(STRING_CONTA_CORRENTE, 0)
    
        'verifica se o cheque está no banco (Localizacao) e se nao foi enviado para lá pelo loja.
        lErro = Comando_Executar(lComando1, "SELECT Cliente, Banco, Agencia, ContaCorrente, Numero, DataDeposito, Valor, NumBorderoCB, TipoBorderoCB, NumIntDoc FROM ChequePre_Banco_BorderoBack WHERE FilialEmpresa = ? AND NumIntCheque = ? AND Localizacao = ?", _
            .lCliente, .iBanco, .sAgencia, .sContaCorrente, .lNumero, .dtDataDeposito, .dValor, .lNumBordero, .iTipoBordero, .lNumIntChequeBord, objChequePre.iFilialEmpresa, objChequePre.lNumIntCheque, CHEQUEPRE_LOCALIZACAO_BANCO)
        If lErro <> AD_SQL_SUCESSO Then gError 109869
    
        lErro = Comando_BuscarPrimeiro(lComando1)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109870
        
        'existe bordero relacionado ao cheque
        If lErro = AD_SQL_SEM_DADOS Then gError 109871
    
        objChequePre.lCliente = .lCliente
        objChequePre.iBanco = .iBanco
        objChequePre.sAgencia = .sAgencia
        objChequePre.sContaCorrente = .sContaCorrente
        objChequePre.lNumero = .lNumero
        objChequePre.dtDataDeposito = .dtDataDeposito
        objChequePre.dValor = .dValor
        objChequePre.lNumBordero = .lNumBordero
        objChequePre.iTipoBordero = .iTipoBordero
        objChequePre.lNumIntChequeBord = .lNumIntChequeBord
                                    
    End With
    
    Call Comando_Fechar(lComando1)
 
    ChequeRel_BordDevolvido = SUCESSO
 
    Exit Function
 
Erro_ChequeRel_BordDevolvido:
 
    ChequeRel_BordDevolvido = gErr
 
    Select Case gErr
 
        Case 109868
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
 
        Case 109869, 109870
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUEPRE", Err, objChequePre.lNumIntCheque)
 
        Case 109871
 
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148765)
 
    End Select
 
    Call Comando_Fechar(lComando1)
 
    Exit Function
 
End Function


Function DevCheque_Le(ByVal objDevCheque As ClassDevCheque) As Long
'Le os cheques devolvidos

Dim lComando1 As Long
Dim lErro As Long
Dim tDevCheque As typeDevCheque

On Error GoTo Erro_DevCheque_Le

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 109872
    
    With tDevCheque
    
    'Pega os dados da tabela DevolucaoCheque
    'Pode se repetir o código e filial na gravalção da devolução quando o cheque é excluído, por isso está lendo só o de cheques existentes
    lErro = Comando_Executar(lComando1, "SELECT D.Data, D.Fornecedor, D.Filial, D.DataVencimento, D.ValorCredito, D.NumIntChqBord, D.NumIntBaixasParcRecCanc, D.NumIntDoc, D.NumIntTituloPag, D.NumIntCheque FROM DevolucaoCheque AS D, ChequePre As C WHERE D.FilialEmpresa = ? AND D.Codigo = ? AND D.NumIntCheque = C.NumIntCheque", _
        .dtData, .lFornecedor, .iFilial, .dtDataVencimento, .dValorCredito, .lNumIntChqBord, .lNumIntBaixasParcRecCanc, .lNumIntDoc, .lNumIntTituloPag, .lNumIntCheque, giFilialEmpresa, objDevCheque.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 109873

    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109874

    If lErro = AD_SQL_SEM_DADOS Then gError 109875
     
    objDevCheque.dtData = .dtData
    objDevCheque.lFornecedor = .lFornecedor
    objDevCheque.iFilial = .iFilial
    objDevCheque.dtDataVencimento = .dtDataVencimento
    objDevCheque.dValorCredito = .dValorCredito
    objDevCheque.lNumIntChqBord = .lNumIntChqBord
    objDevCheque.lNumIntBaixasParcRecCanc = .lNumIntBaixasParcRecCanc
    objDevCheque.lNumIntDoc = .lNumIntDoc
    objDevCheque.lNumIntTituloPag = .lNumIntTituloPag
    objDevCheque.lNumIntCheque = .lNumIntCheque
    
    End With
    
    Call Comando_Fechar(lComando1)

    DevCheque_Le = SUCESSO

    Exit Function

Erro_DevCheque_Le:

    DevCheque_Le = gErr

    Select Case gErr

        Case 109872
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 109873, 109874
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_DEVOLUCAOCHEQUE", Err, objDevCheque.lCodigo)

        Case 109875

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148766)

    End Select

    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Function ChequeBordero_Le(ByVal objChequeBordero As ClassChequeBordero) As Long

Dim lComando1 As Long
Dim lErro As Long
Dim lNumIntDoc As Long
Dim lNumBordero As Long
Dim iTipo As Integer

On Error GoTo Erro_ChequeBordero_Le

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 109876
    
    'Pega os dados da tabela ChequeBordero
    lErro = Comando_Executar(lComando1, "SELECT NumIntCheque, NumBordero, TipoBordero FROM ChequeBordero WHERE NumIntDoc = ? AND FilialEmpresa = ? ", lNumIntDoc, lNumBordero, iTipo, objChequeBordero.lNumIntDoc, objChequeBordero.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 109877

    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109878

    If lErro = AD_SQL_SEM_DADOS Then gError 109879
     
    objChequeBordero.lNumIntCheque = lNumIntDoc
    objChequeBordero.lNumBordero = lNumBordero
    objChequeBordero.iTipoBordero = iTipo
    
    Call Comando_Fechar(lComando1)

    ChequeBordero_Le = SUCESSO

    Exit Function

Erro_ChequeBordero_Le:

    ChequeBordero_Le = gErr

    Select Case gErr

        Case 109876
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 109877, 109878
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUEBORDERO", gErr)

        Case 109879

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148767)

    End Select

    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Function BorderoDesc_Chq_Le(ByVal objBorderoDesc As ClassBorderoDescChq) As Long
'Le o bordero de desconto envolvido

Dim lComando1 As Long
Dim lErro As Long
Dim lNumIntDoc As Long
Dim tBorderoDescChq As typeBorderoDescChq

On Error GoTo Erro_BorderoDesc_Chq_Le

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 109883
    
    With tBorderoDescChq
    
    'Pega os dados da tabela DevolucaoCheque
    lErro = Comando_Executar(lComando1, "SELECT ContaCorrente, DataEmissao, DataContabil, Cobrador, CarteiraCobranca, DataDeposito, ValorCredito FROM BorderoDescChq WHERE FilialEmpresa = ? AND NumBordero = ?", .iContaCorrente, .dtDataEmissao, .dtDataContabil, .iCobrador, .iCarteiraCobranca, .dtDataDeposito, .dValorCredito, objBorderoDesc.iFilialEmpresa, objBorderoDesc.lNumBordero)
    If lErro <> AD_SQL_SUCESSO Then gError 109884

    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109885

    If lErro = AD_SQL_SEM_DADOS Then gError 109886
     
    objBorderoDesc.dtDataContabil = .dtDataContabil
    objBorderoDesc.dtDataDeposito = .dtDataDeposito
    objBorderoDesc.dtDataEmissao = .dtDataEmissao
    objBorderoDesc.dValorCredito = .dValorCredito
    objBorderoDesc.iCarteiraCobranca = .iCarteiraCobranca
    objBorderoDesc.iCobrador = .iCobrador
    objBorderoDesc.iContaCorrente = .iContaCorrente
    
    End With
    
    Call Comando_Fechar(lComando1)

    BorderoDesc_Chq_Le = SUCESSO

    Exit Function

Erro_BorderoDesc_Chq_Le:

    BorderoDesc_Chq_Le = gErr

    Select Case gErr

        Case 109883
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 109884, 109885
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BORDERODESCCHQ", gErr, objBorderoDesc.lNumBordero)

        Case 109886

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148768)

    End Select

    Call Comando_Fechar(lComando1)

    Exit Function

End Function


Function ChequePre_Le_BorderoDesc(ByVal objBorderoDescChq As ClassBorderoDescChq) As Long
'Le todos os cheques de um bordero

Dim lComando1 As Long
Dim lErro As Long
Dim lNumIntCheque As Long
Dim dValor As Double
Dim objCheque As New ClassChequePre

On Error GoTo Erro_ChequePre_Le_BorderoDesc

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 109887
    
    'Pega os dados da tabela DevolucaoCheque
    lErro = Comando_Executar(lComando1, "SELECT Valor, ChequePre.NumIntCheque FROM ChequePre, BorderoDescChq, ChequeBordero WHERE ChequePre.NumIntCheque=ChequeBordero.NumIntCheque AND ChequeBordero.NumBordero=BorderoDescChq.NumBordero AND BorderoDescChq.FilialEmpresa=ChequeBordero.FilialEmpresa AND BorderoDescChq.NumBordero = ? ", dValor, lNumIntCheque, objBorderoDescChq.lNumBordero)
    If lErro <> AD_SQL_SUCESSO Then gError 109888

    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109889

    If lErro = AD_SQL_SEM_DADOS Then gError 109890
     
    Do While lErro = AD_SQL_SUCESSO
        
        Set objCheque = New ClassChequePre
        
        objCheque.dValor = dValor
            
        objBorderoDescChq.colChequePre.Add objCheque
        
        lErro = Comando_BuscarProximo(lComando1)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109891
    
    Loop
    
    Call Comando_Fechar(lComando1)

    ChequePre_Le_BorderoDesc = SUCESSO

    Exit Function

Erro_ChequePre_Le_BorderoDesc:

    ChequePre_Le_BorderoDesc = gErr

    Select Case gErr

        Case 109887
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 109888, 109889, 109891
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUEPRE", gErr, lNumIntCheque)

        Case 109890

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148769)

    End Select

    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Function BorderosChequesPre_Le(ByVal objCheque As ClassChequePre) As Long
'Le o bordero do cheque

Dim lComando1 As Long
Dim lErro As Long
Dim dtData As Date
Dim dtDataEmissao As Date
Dim sSelect As String

On Error GoTo Erro_BorderosChequesPre_Le

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 109967
    
    sSelect = "SELECT DataDeposito, DataEmissao FROM"
    
    If objCheque.iTipoBordero = BORDERO_DESCONTO Then
        sSelect = sSelect & " BorderoDescChq "
    Else
        sSelect = sSelect & " BorderosChequesPre "
    End If
    
    sSelect = sSelect & "WHERE NumBordero=? "
    
    'Pega os dados da tabela BorderosChequesPre
    lErro = Comando_Executar(lComando1, sSelect, dtData, dtDataEmissao, objCheque.lNumBordero)
    If lErro <> AD_SQL_SUCESSO Then gError 109968

    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109969

    If lErro = AD_SQL_SEM_DADOS Then gError 109970
     
    objCheque.dtDataDeposito = dtData
    objCheque.dtDataEmissao = dtDataEmissao
    
    Call Comando_Fechar(lComando1)

    BorderosChequesPre_Le = SUCESSO

    Exit Function

Erro_BorderosChequesPre_Le:

    BorderosChequesPre_Le = gErr

    Select Case gErr

        Case 109967
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 109968, 109969
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BORDEROSCHEQUESPRE", gErr)

        Case 109970

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148770)

    End Select

    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Function DevCheque_Lock(ByVal objDevCheque As ClassDevCheque, lComando1 As Long) As Long
'Le os cheques devolvidos

Dim lErro As Long
Dim tDevCheque As typeDevCheque
Dim lNumIntDoc As Long

On Error GoTo Erro_DevCheque_Lock

    With tDevCheque
    
    'Pega os dados da tabela DevolucaoCheque
    lErro = Comando_ExecutarPos(lComando1, "SELECT NumIntDoc, NumIntChqBord, NumIntBaixasParcRecCanc, NumIntTituloPag, NumIntCheque FROM DevolucaoCheque WHERE FilialEmpresa = ? AND Codigo = ?", _
        0, .lNumIntDoc, .lNumIntChqBord, .lNumIntBaixasParcRecCanc, .lNumIntTituloPag, .lNumIntCheque, objDevCheque.iFilialEmpresa, objDevCheque.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 109989

    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109990

    If lErro = AD_SQL_SEM_DADOS Then gError 109991
     
    lErro = Comando_LockExclusive(lComando1)
    If lErro <> AD_SQL_SUCESSO Then gError 109992
 
    objDevCheque.lNumIntChqBord = .lNumIntChqBord
    objDevCheque.lNumIntBaixasParcRecCanc = .lNumIntBaixasParcRecCanc
    objDevCheque.lNumIntDoc = .lNumIntDoc
    objDevCheque.lNumIntTituloPag = .lNumIntTituloPag
    objDevCheque.lNumIntCheque = .lNumIntCheque
    
    End With
    
    DevCheque_Lock = SUCESSO

    
    Exit Function

Erro_DevCheque_Lock:

    DevCheque_Lock = gErr

    Select Case gErr
    
        Case 109989, 109990
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_DEVOLUCAOCHEQUE", gErr, objDevCheque.lCodigo)

        Case 109991
        
        Case 109992
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_DEVOLUCAOCHEQUE", gErr, objDevCheque.lCodigo)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148771)

    End Select

    Exit Function

End Function


Function Move_Tela_TituloPagar(objDevCheque As ClassDevCheque, objTituloPagar As ClassTituloPagar, colParcelas As colParcelaPagar) As Long

Dim lErro As Long
Dim lNumTitulo As Long

On Error GoTo Erro_Move_Tela_TituloPagar
    
    objTituloPagar.lFornecedor = objDevCheque.lFornecedor
    objTituloPagar.iFilial = objDevCheque.iFilial
    
    'Gera número automático.
    lErro = CF("Config_ObterAutomatico_EmTrans", "CPRConfig", "NUM_PROX_NUMTITULO_DEVCHQDESC", "TitulosPag", "NumTitulo", lNumTitulo)
    If lErro <> SUCESSO Then gError 109951
    
    objTituloPagar.dValorTotal = objDevCheque.dValorCredito
    objTituloPagar.iFilialEmpresa = giFilialEmpresa
    objTituloPagar.dtDataEmissao = objDevCheque.dtData
    objTituloPagar.lNumTitulo = lNumTitulo
    objTituloPagar.iNumParcelas = 1
    objTituloPagar.iCondicaoPagto = COD_A_VISTA
    objTituloPagar.sSiglaDocumento = TIPODOC_DEV_CHQ
    
    lErro = CF("Move_Tela_ParcelaPag", objDevCheque, objTituloPagar, colParcelas)
    If lErro <> SUCESSO Then gError 109952
    
    Move_Tela_TituloPagar = SUCESSO

    Exit Function

Erro_Move_Tela_TituloPagar:
    
    Move_Tela_TituloPagar = gErr
    
    Select Case gErr
        
        Case 109951, 109952
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148772)

    End Select
    
    Exit Function
    
End Function

Function Move_Tela_ParcelaPag(objDevCheque As ClassDevCheque, objTituloPagar As ClassTituloPagar, colParcelas As colParcelaPagar) As Long

Dim lErro As Long
Dim objParcelaPag As New ClassParcelaPagar
Dim dtDataVenctoReal As Date

On Error GoTo Erro_Move_Tela_ParcelaPag
    
    objParcelaPag.iNumParcela = 1
    objParcelaPag.dtDataVencimento = objDevCheque.dtDataVencimento
    
    lErro = CF("DataVencto_Real", objParcelaPag.dtDataVencimento, dtDataVenctoReal)
    If lErro <> SUCESSO Then gError 109950
    
    objParcelaPag.dtDataVencimentoReal = dtDataVenctoReal
    objParcelaPag.dValor = objTituloPagar.dValorTotal
    objParcelaPag.iTipoCobranca = TIPO_COBRANCA_CARTEIRA
    objParcelaPag.iStatus = STATUS_ABERTO
    objParcelaPag.lNumIntTitulo = objTituloPagar.lNumIntDoc
    
    colParcelas.Add objParcelaPag.lNumIntDoc, objParcelaPag.lNumIntTitulo, objParcelaPag.iNumParcela, objParcelaPag.iStatus, objParcelaPag.dtDataVencimento, objParcelaPag.dtDataVencimentoReal, objParcelaPag.dSaldo, objParcelaPag.dValor, objParcelaPag.iPortador, objParcelaPag.iProxSeqBaixa, objParcelaPag.iTipoCobranca, objParcelaPag.iBancoCobrador, objParcelaPag.sNossoNumero, objParcelaPag.sCodigoDeBarras
    
    Move_Tela_ParcelaPag = SUCESSO

    Exit Function

Erro_Move_Tela_ParcelaPag:
    
    Move_Tela_ParcelaPag = gErr
    
    Select Case gErr
        
        Case 109950
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148773)

    End Select
    

End Function

Function TituloPagarBaixado_Le_Titulo(ByVal objTituloPagar As ClassTituloPagar) As Long

Dim lErro As Long
Dim lComando As Long
Dim tTituloPagar As typeTituloPagar

On Error GoTo Erro_TituloPagarBaixado_Le_Titulo
    
    'Abre comando
    lComando = Comando_Abrir
    If lComando = 0 Then gError 113479
    
    tTituloPagar.sObservacao = String(STRING_TITULO_OBSERVACAO, 0)
    tTituloPagar.sSiglaDocumento = String(STRING_SIGLA_DOCUMENTO, 0)
    tTituloPagar.sHistorico = String(STRING_NFSPAG_HISTORICO, 0)
    
    'Seleciona TituloPagar a partir dos dados fornecidos
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc, SiglaDocumento, DataEmissao, Status, Saldo, NumParcelas, ValorTotal, ValorSeguro, ValorFrete, OutrasDespesas, ValorProdutos, ValorICMS, ValorICMSSubst, CreditoICMS, ValorIPI, CreditoIPI, ValorIRRF, ValorINSS, INSSRetido, Observacao, FilialPedCompra, NumPedCompra, DataRegistro, CondicaoPagto, PISRetido, COFINSRetido, CSLLRetido, TaxaMoeda, Historico FROM TitulosPagBaixados WHERE Fornecedor = ? AND Filial = ? AND NumTitulo = ? AND FilialEmpresa = ? AND Status <> ? ORDER BY DataRegistro DESC", tTituloPagar.lNumIntDoc, tTituloPagar.sSiglaDocumento, tTituloPagar.dtDataEmissao, _
        tTituloPagar.iStatus, tTituloPagar.dSaldo, tTituloPagar.iNumParcelas, tTituloPagar.dValorTotal, tTituloPagar.dValorSeguro, tTituloPagar.dValorFrete, tTituloPagar.dOutrasDespesas, tTituloPagar.dValorProdutos, tTituloPagar.dValorICMS, tTituloPagar.dValorICMSSubst, tTituloPagar.iCreditoICMS, tTituloPagar.dValorIPI, tTituloPagar.iCreditoIPI, tTituloPagar.dValorIRRF, tTituloPagar.dValorINSS, tTituloPagar.iINSSRetido, tTituloPagar.sObservacao, tTituloPagar.iFilialPedCompra, tTituloPagar.lNumPedCompra, tTituloPagar.dtDataRegistro, tTituloPagar.iCondicaoPagto, tTituloPagar.dPISRetido, tTituloPagar.dCOFINSRetido, tTituloPagar.dCSLLRetido, tTituloPagar.dTaxaMoeda, tTituloPagar.sHistorico, _
        objTituloPagar.lFornecedor, objTituloPagar.iFilial, objTituloPagar.lNumTitulo, giFilialEmpresa, STATUS_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then gError 113480
    
    'Tenta ler
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 113481
    
    'Se não encontrou --> Erro
    If lErro = AD_SQL_SEM_DADOS Then gError 113482
    
    tTituloPagar.iFilialEmpresa = giFilialEmpresa
    tTituloPagar.lFornecedor = objTituloPagar.lFornecedor
    tTituloPagar.iFilial = objTituloPagar.iFilial
    tTituloPagar.lNumTitulo = objTituloPagar.lNumTitulo
    
    'Preenche objTituloPagar com os dados lidos
    Call TituloPagar_MoverCamposObj(objTituloPagar, tTituloPagar)
    
    'Fecha comando
    Call Comando_Fechar(lComando)
    
    TituloPagarBaixado_Le_Titulo = SUCESSO
    
    Exit Function
    
Erro_TituloPagarBaixado_Le_Titulo:

    TituloPagarBaixado_Le_Titulo = gErr

    Select Case gErr
    
        Case 113479
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 113480, 113481
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TITULOS_PAGAR_BAIXADO", gErr, objTituloPagar.lFornecedor, objTituloPagar.iFilial)
        
        Case 113482
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, 148774)
            
    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function Fornecedor_Verifica_DadosCta(ByVal lFornecedor As Long, ByVal iFilial As Integer) As Long
'verifica se falta algum dado para identificar a cta corrente do fornecedor
'vai dar aviso perguntando se prossegue com a operacao

Dim lErro As Long, lComando As Long, vbMsgResult As VbMsgBoxResult
Dim sAgencia As String, sContaCorrente As String, iBanco As Integer

On Error GoTo Erro_Fornecedor_Verifica_DadosCta

    lComando = Comando_Abrir
    If lComando = 0 Then gError 106580
    
    sAgencia = String(STRING_AGENCIA, 0)
    sContaCorrente = String(STRING_CONTA_CORRENTE, 0)
    
    lErro = Comando_Executar(lComando, "SELECT Banco, Agencia, ContaCorrente FROM FiliaisFornecedores WHERE CodFornecedor = ? AND CodFilial = ?", _
        iBanco, sAgencia, sContaCorrente, lFornecedor, iFilial)
    If lErro <> AD_SQL_SUCESSO Then gError 106577
    
    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 106578
    
    'se falta algum dado para identificar a cta corrente do fornecedor dar aviso
    If Len(Trim(sAgencia)) = 0 Or Len(Trim(sContaCorrente)) = 0 Or iBanco = 0 Then
    
        vbMsgResult = Rotina_Aviso(vbYesNo, "AVISO_FALTA_INFO_CTA_FORN")
        If vbMsgResult <> vbYes Then gError 106579
        
    End If
    
    Call Comando_Fechar(lComando)
    
    Fornecedor_Verifica_DadosCta = SUCESSO
     
    Exit Function
    
Erro_Fornecedor_Verifica_DadosCta:

    Fornecedor_Verifica_DadosCta = gErr
     
    Select Case gErr
          
        Case 106580
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 106577, 106578
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIAISFORNECEDORES", Err)
          
        Case 106579 'desistiu
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148775)
     
    End Select
     
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function NFPag_Le_Todos2(objNFsPag As ClassNFsPag, Optional ByVal iExclusao As Integer = 0) As Long
'Lê em NFPag se não encontrar procura em NFPag Baixados

Dim lErro As Long

On Error GoTo Erro_NFPag_Le_Todos2

    'Lê em NFPags
    lErro = CF("NFPag_Le", objNFsPag, iExclusao)
    If lErro <> SUCESSO And lErro <> 18257 Then Error 60137

    'Se não encontrou
    If lErro <> SUCESSO Then

        'Procura em Títulos a Receber Baixados
        lErro = CF("NFPagBaixada_Le", objNFsPag, iExclusao)
        If lErro <> SUCESSO And lErro <> 18257 Then Error 60138

        'Se não encontrou nos dois ---> ERRO
        If lErro <> SUCESSO Then Error 60139

    End If

    NFPag_Le_Todos2 = SUCESSO

    Exit Function

Erro_NFPag_Le_Todos2:

    NFPag_Le_Todos2 = Err

    Select Case Err

        Case 60137, 60138 'Tratado na rotina chamada

        Case 60139
            lErro = Rotina_Erro(vbOKOnly, "ERRO_NFPAG_NAO_CADASTRADA1", Err, objNFsPag.lNumNotaFiscal)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148776)

    End Select

    Exit Function

End Function

Function NFPagBaixada_Le(ByVal objNFPag As ClassNFsPag, Optional ByVal iExclusao As Integer = 0) As Long
'Retorna os dados da Nota Fiscal com nº interno passado como parametro

Dim lErro As Long
Dim lComando As Long
Dim tNFsPag As typeNFsPag

On Error GoTo Erro_NFPagBaixada_Le

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 18254

    tNFsPag.sHistorico = String(STRING_NFSPAG_HISTORICO, 0)

    If iExclusao = 1 Then

        'Procura a Nota com o NumIntDoc passado como parametro
        lErro = Comando_Executar(lComando, "SELECT FilialEmpresa, Fornecedor, Filial, NumNotaFiscal, DataEmissao, Status, NumIntTitPag, DataVencimento, ValorTotal, ValorSeguro, ValorFrete, OutrasDespesas, ValorProdutos, ValorIRRF, ValorICMS, ValorICMSSubst, CreditoICMS, ValorIPI, CreditoIPI, PISRetido, ISSRetido, COFINSRetido, CSLLRetido, TaxaMoeda, Historico, ISSRetido, INSSRetido, ValorINSS FROM NFsPagBaixadas WHERE NumIntDoc = ?", tNFsPag.iFilialEmpresa, tNFsPag.lFornecedor, tNFsPag.iFilial, tNFsPag.lNumNotaFiscal, tNFsPag.dtDataEmissao, tNFsPag.iStatus, tNFsPag.lNumIntTitPag, tNFsPag.dtDataVencimento, tNFsPag.dValorTotal, tNFsPag.dValorSeguro, tNFsPag.dValorFrete, tNFsPag.dOutrasDespesas, tNFsPag.dValorProdutos, tNFsPag.dValorIRRF, tNFsPag.dValorICMS, tNFsPag.dValorICMSSubst, tNFsPag.iCreditoICMS, tNFsPag.dValorIPI, tNFsPag.iCreditoIPI, tNFsPag.dPISRetido, tNFsPag.dISSRetido, tNFsPag.dCOFINSRetido, tNFsPag.dCSLLRetido, tNFsPag.dTaxaMoeda, tNFsPag.sHistorico, _
        tNFsPag.dISSRetido, tNFsPag.iINSSRetido, tNFsPag.dValorINSS, objNFPag.lNumIntDoc)
        If lErro <> AD_SQL_SUCESSO Then Error 18255

    Else
    
        'Procura a Nota com o NumIntDoc passado como parametro
        lErro = Comando_Executar(lComando, "SELECT FilialEmpresa, Fornecedor, Filial, NumNotaFiscal, DataEmissao, Status, NumIntTitPag, DataVencimento, ValorTotal, ValorSeguro, ValorFrete, OutrasDespesas, ValorProdutos, ValorIRRF, ValorICMS, ValorICMSSubst, CreditoICMS, ValorIPI, CreditoIPI, PISRetido, ISSRetido, COFINSRetido, CSLLRetido, TaxaMoeda, Historico, ISSRetido, INSSRetido, ValorINSS FROM NFsPagBaixadas WHERE NumIntDoc = ? AND Status <> ?", tNFsPag.iFilialEmpresa, tNFsPag.lFornecedor, tNFsPag.iFilial, tNFsPag.lNumNotaFiscal, tNFsPag.dtDataEmissao, tNFsPag.iStatus, tNFsPag.lNumIntTitPag, tNFsPag.dtDataVencimento, tNFsPag.dValorTotal, tNFsPag.dValorSeguro, tNFsPag.dValorFrete, tNFsPag.dOutrasDespesas, tNFsPag.dValorProdutos, tNFsPag.dValorIRRF, tNFsPag.dValorICMS, tNFsPag.dValorICMSSubst, tNFsPag.iCreditoICMS, tNFsPag.dValorIPI, tNFsPag.iCreditoIPI, tNFsPag.dPISRetido, tNFsPag.dISSRetido, tNFsPag.dCOFINSRetido, tNFsPag.dCSLLRetido, tNFsPag.dTaxaMoeda, tNFsPag.sHistorico, _
        tNFsPag.dISSRetido, tNFsPag.iINSSRetido, tNFsPag.dValorINSS, objNFPag.lNumIntDoc, STATUS_EXCLUIDO)
        If lErro <> AD_SQL_SUCESSO Then Error 18255
    
    End If
    
    'Le a nota
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 18256

    'Se não existe erro
    If lErro = AD_SQL_SEM_DADOS Then Error 18257

    'Passa para objNFPag os dados Lidos
    objNFPag.iFilialEmpresa = tNFsPag.iFilialEmpresa
    objNFPag.lFornecedor = tNFsPag.lFornecedor
    objNFPag.iFilial = tNFsPag.iFilial
    objNFPag.lNumNotaFiscal = tNFsPag.lNumNotaFiscal
    objNFPag.dtDataEmissao = tNFsPag.dtDataEmissao
    objNFPag.iStatus = tNFsPag.iStatus
    objNFPag.lNumIntTitPag = tNFsPag.lNumIntTitPag
    objNFPag.dtDataVencimento = tNFsPag.dtDataVencimento
    objNFPag.dValorTotal = tNFsPag.dValorTotal
    objNFPag.dValorSeguro = tNFsPag.dValorSeguro
    objNFPag.dValorFrete = tNFsPag.dValorFrete
    objNFPag.dOutrasDespesas = tNFsPag.dOutrasDespesas
    objNFPag.dValorProdutos = tNFsPag.dValorProdutos
    objNFPag.dValorIRRF = tNFsPag.dValorIRRF
    objNFPag.dValorICMS = tNFsPag.dValorICMS
    objNFPag.dValorICMSSubst = tNFsPag.dValorICMSSubst
    objNFPag.iCreditoICMS = tNFsPag.iCreditoICMS
    objNFPag.dValorIPI = tNFsPag.dValorIPI
    objNFPag.iCreditoIPI = tNFsPag.iCreditoIPI
    objNFPag.dPISRetido = tNFsPag.dPISRetido
    objNFPag.dISSRetido = tNFsPag.dISSRetido
    objNFPag.dCOFINSRetido = tNFsPag.dCOFINSRetido
    objNFPag.dCSLLRetido = tNFsPag.dCSLLRetido
    objNFPag.dTaxaMoeda = tNFsPag.dTaxaMoeda
    objNFPag.sHistorico = tNFsPag.sHistorico

    objNFPag.dISSRetido = tNFsPag.dISSRetido
    objNFPag.iINSSRetido = tNFsPag.iINSSRetido
    objNFPag.dValorINSS = tNFsPag.dValorINSS
    
    Call Comando_Fechar(lComando)

    NFPagBaixada_Le = SUCESSO

    Exit Function

Erro_NFPagBaixada_Le:

    NFPagBaixada_Le = Err

    Select Case Err

        Case 18254
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 18255, 18256
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFSPAG1", Err, objNFPag.lNumNotaFiscal)

        Case 18257  'Será tratado na rotina chamadora

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, 148777)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function TituloPagar_Le_Todos(ByVal objTituloPagar As ClassTituloPagar, Optional ByVal bLeExcluido As Boolean = False) As Long
'Lê Titulo a Pagar, baixado ou nao, com o Número Interno passado como parâmetro

Dim lErro As Long

On Error GoTo Erro_TituloPagar_Le_Todos

    lErro = CF("TituloPagar_Le", objTituloPagar, bLeExcluido)
    If lErro <> SUCESSO And lErro <> 18372 Then gError 106734
    
    If lErro <> SUCESSO Then
    
        lErro = CF("TituloPagarBaixado_Le", objTituloPagar, bLeExcluido)
        If lErro <> SUCESSO And lErro <> 56661 Then gError 106735
    
    End If
    
    TituloPagar_Le_Todos = SUCESSO
     
    Exit Function
    
Erro_TituloPagar_Le_Todos:

    TituloPagar_Le_Todos = gErr
     
    Select Case gErr
          
        Case 106734, 106735
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148778)
     
    End Select
     
    Exit Function

End Function

Function Fornecedor_Le_Basico(ByVal objFornecedor As ClassFornecedor) As Long
'le o Fornecedor a partir da chave(lCodigo) fornecida em objFornecedor. Devolve os dados em objFornecedor

Dim lComando As Long
Dim lErro As Long
Dim tFornecedor As typeFornecedor

On Error GoTo Erro_Fornecedor_Le_Basico

    tFornecedor.sRazaoSocial = String(STRING_FORNECEDOR_RAZAO_SOC, 0)
    tFornecedor.sNomeReduzido = String(STRING_FORNECEDOR_NOME_REDUZIDO, 0)
    tFornecedor.sObservacao = String(STRING_FORNECEDOR_OBS, 0)
    tFornecedor.sNatureza = String(STRING_NATMOVCTA_CODIGO, 0)
    
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 110200

    'Pega os dados da tabela Fornecedores
    lErro = Comando_Executar(lComando, "SELECT RazaoSocial, NomeReduzido, Tipo, Observacao, CondicaoPagto, Desconto, ProxCodFilial, Ativo, Natureza FROM Fornecedores WHERE Codigo = ?", _
    tFornecedor.sRazaoSocial, tFornecedor.sNomeReduzido, tFornecedor.iTipo, tFornecedor.sObservacao, tFornecedor.iCondicaoPagto, tFornecedor.dDesconto, tFornecedor.iProxCodFilial, tFornecedor.iAtivo, tFornecedor.sNatureza, objFornecedor.lCodigo)

    If lErro <> AD_SQL_SUCESSO Then Error 110201

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 110202

    If lErro = AD_SQL_SEM_DADOS Then Error 110203
    
    objFornecedor.sRazaoSocial = tFornecedor.sRazaoSocial
    objFornecedor.sNomeReduzido = tFornecedor.sNomeReduzido
    objFornecedor.iTipo = tFornecedor.iTipo
    objFornecedor.sObservacao = tFornecedor.sObservacao
    objFornecedor.iCondicaoPagto = tFornecedor.iCondicaoPagto
    objFornecedor.dDesconto = tFornecedor.dDesconto
    objFornecedor.iProxCodFilial = tFornecedor.iProxCodFilial
    objFornecedor.iAtivo = tFornecedor.iAtivo
    objFornecedor.sNatureza = tFornecedor.sNatureza

    lErro = Comando_Fechar(lComando)
 
    Fornecedor_Le_Basico = SUCESSO

Exit Function

Erro_Fornecedor_Le_Basico:

    Fornecedor_Le_Basico = gErr

    Select Case gErr

        Case 110200
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 110201, 110202
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FORNECEDORES", gErr)

        Case 110203 'Fornecedor nao cadastrado em Fornecedores

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148779)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function ParcelaPagarBaixada_Le(ByVal objParcelaPagar As ClassParcelaPagar) As Long
'Le os dados da Parcela com o NumIntDoc da Parcela

Dim lErro As Long
Dim lComando As Long
Dim tParcelaPagar As typeParcelaPagar

On Error GoTo Erro_ParcelaPagarBaixada_Le

    'Abre o comando
    lComando = Comando_Abrir()
    If lErro <> SUCESSO Then Error 123506
    
    tParcelaPagar.sNossoNumero = String(STRING_NOSSO_NUMERO, 0)
    tParcelaPagar.sCodigoDeBarras = String(STRING_CODIGO_BARRAS_PARC_CPR, 0)
    tParcelaPagar.sCodUsuarioLib = String(STRING_USUARIO_CODIGO, 0)
    
    'Seleciona a Parcela com os dados passados
    lErro = Comando_Executar(lComando, "SELECT NumIntTitulo, Status, DataVencimento, DataVencimentoReal, Valor, TipoCobranca, Portador, BancoCobrador, ProxSeqBaixa, NossoNumero, CodigoDeBarras, CodUsuarioLib, DataLib, NumParcela FROM ParcelasPagBaixadas WHERE NumIntDoc = ? ", tParcelaPagar.lNumIntTitulo, tParcelaPagar.iStatus, tParcelaPagar.dtDataVencimento, tParcelaPagar.dtDataVencimentoReal, tParcelaPagar.dValor, tParcelaPagar.iTipoCobranca, tParcelaPagar.iPortador, tParcelaPagar.iBancoCobrador, tParcelaPagar.iProxSeqBaixa, tParcelaPagar.sNossoNumero, tParcelaPagar.sCodigoDeBarras, tParcelaPagar.sCodUsuarioLib, tParcelaPagar.dtDataLib, tParcelaPagar.iNumParcela, objParcelaPagar.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 123507
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 123508
    
    'Se não encontrar --> erro
    If lErro = AD_SQL_SEM_DADOS Then gError 123509
        
    'Carrega em objParcelaPagar os dados trazidos
    objParcelaPagar.lNumIntTitulo = tParcelaPagar.lNumIntTitulo
    objParcelaPagar.iStatus = tParcelaPagar.iStatus
    objParcelaPagar.dtDataVencimento = tParcelaPagar.dtDataVencimento
    objParcelaPagar.dtDataVencimentoReal = tParcelaPagar.dtDataVencimentoReal
    objParcelaPagar.dSaldo = 0
    objParcelaPagar.dValor = tParcelaPagar.dValor
    objParcelaPagar.iTipoCobranca = tParcelaPagar.iTipoCobranca
    objParcelaPagar.iPortador = tParcelaPagar.iPortador
    objParcelaPagar.iBancoCobrador = tParcelaPagar.iBancoCobrador
    objParcelaPagar.iProxSeqBaixa = tParcelaPagar.iProxSeqBaixa
    objParcelaPagar.sNossoNumero = tParcelaPagar.sNossoNumero
    objParcelaPagar.sCodigoDeBarras = tParcelaPagar.sCodigoDeBarras
    objParcelaPagar.sCodUsuarioLib = tParcelaPagar.sCodUsuarioLib
    objParcelaPagar.dtDataLib = tParcelaPagar.dtDataLib
    
    objParcelaPagar.iNumParcela = tParcelaPagar.iNumParcela
    
    'Fecha o comando
    Call Comando_Fechar(lComando)
    
    ParcelaPagarBaixada_Le = SUCESSO
    
    Exit Function
    
Erro_ParcelaPagarBaixada_Le:

    ParcelaPagarBaixada_Le = gErr
    
    Select Case gErr
    
        Case 123506
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 123507, 123508
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELASPAG2", gErr)

        Case 123509 'Não encontrou a Parcela, Tratar na Rotina chamadora
       
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148780)
        
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function CondicaoPagto_Le_Parcelas(ByVal objCondicaoPagto As ClassCondicaoPagto) As Long
'preenche a colecao de parcelas vinculadas à uma condicao de pagto

Dim lErro As Long, lComando As Long
Dim tParc As typeCondicaoPagtoParc, objParc As ClassCondicaoPagtoParc

On Error GoTo Erro_CondicaoPagto_Le_Parcelas

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 124031
    
    With tParc
        lErro = Comando_Executar(lComando, "SELECT Seq, TipoDataBase, TipoIntervalo, Dias, Modificador, PercReceb FROM CondicoesPagtoParc WHERE Codigo = ? ORDER BY Seq", _
            .iSeq, .iTipoDataBase, .iTipoIntervalo, .iDias, .iModificador, .dPercReceb, objCondicaoPagto.iCodigo)
    End With
    If lErro <> AD_SQL_SUCESSO Then gError 124032
    
    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 124033
    
    Do While lErro = AD_SQL_SUCESSO
    
        Set objParc = New ClassCondicaoPagtoParc
        
        With objParc
        
            .iCodigo = objCondicaoPagto.iCodigo
            .iSeq = tParc.iSeq
            .iTipoDataBase = tParc.iTipoDataBase
            .iTipoIntervalo = tParc.iTipoIntervalo
            .iDias = tParc.iDias
            .iModificador = tParc.iModificador
            .dPercReceb = tParc.dPercReceb
        
        End With
        
        objCondicaoPagto.colParcelas.Add objParc
        
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 124034
    
    Loop
    
    Call Comando_Fechar(lComando)
    
    CondicaoPagto_Le_Parcelas = SUCESSO
     
    Exit Function
    
Erro_CondicaoPagto_Le_Parcelas:

    CondicaoPagto_Le_Parcelas = gErr
     
    Select Case gErr
          
        Case 124031
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 124032, 124033, 124034
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONDPAGTOPARC", gErr)
          
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148781)
     
    End Select
     
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function CCI_Le_ContaChequePre(objCCI As ClassContasCorrentesInternas) As Long
'Retorna o codigo da conta de cheque pre da filial passada como parametro.

Dim lErro As Long
Dim iCodigoCCI As Integer
Dim alComando(1 To 1) As Long
Dim iIndice As Integer

On Error GoTo Erro_CCI_Le_ContaChequePre

    'abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir
        If alComando(iIndice) = 0 Then gError 126121
    Next

    lErro = Comando_Executar(alComando(1), "SELECT Codigo " & _
                                           "FROM ContasCorrentesInternas " & _
                                           "WHERE FilialEmpresa = ? " & _
                                           "AND ChequePre = ?", _
                                           iCodigoCCI, _
                                           objCCI.iFilialEmpresa, _
                                           CONTA_CHEQUE_PRE)
    If lErro <> AD_SQL_SUCESSO Then gError 126122
    
    'busca o primeiro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126123
            
    If lErro = AD_SQL_SEM_DADOS Then gError 126131
            
    objCCI.iCodigo = iCodigoCCI
    
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    CCI_Le_ContaChequePre = SUCESSO
    
    Exit Function
    
Erro_CCI_Le_ContaChequePre:

    CCI_Le_ContaChequePre = gErr

    Select Case gErr
          
        Case 126121
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 126122, 126123
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONTASCORRENTESINTERNAS", Err)
          
        Case 126131
          
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148782)
     
    End Select

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

End Function

Function ChequePre_Le_ChequeBordero(ByVal objChequePre As ClassChequePre, ByVal objChequeBordero As ClassChequeBordero) As Long
'Le o ChequePre associado a objChequeBordero . Devolve os dados em objChequePre

Dim lComando1 As Long
Dim lErro As Long
Dim tChequePre As typeChequePre

On Error GoTo Erro_ChequePre_Le_ChequeBordero

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 126255

    tChequePre.sAgencia = String(STRING_AGENCIA, 0)
    tChequePre.sContaCorrente = String(STRING_CONTA_CORRENTE, 0)

    'Pega os dados da tabela ChequePre
    lErro = Comando_Executar(lComando1, "SELECT ChequePre.FilialEmpresa, ChequePre.Cliente, ChequePre.Filial, ChequePre.Banco, ChequePre.Agencia, ChequePre.ContaCorrente, ChequePre.Numero, ChequePre.DataDeposito, ChequePre.Valor, ChequePre.NumBordero, ChequePre.SequencialBack, ChequePre.DataEmissao, ChequePre.Localizacao, ChequePre.SequencialLoja FROM ChequePre, ChequeBordero WHERE ChequeBordero.FilialEmpresa = ? AND ChequeBordero.NumIntDoc = ? And ChequeBordero.NumIntCheque = ChequePre.NumIntCheque AND ChequeBordero.FilialEmpresa = ChequePre.NumIntCheque", _
        tChequePre.iFilialEmpresa, tChequePre.lCliente, tChequePre.iFilial, tChequePre.iBanco, tChequePre.sAgencia, tChequePre.sContaCorrente, tChequePre.lNumero, tChequePre.dtDataDeposito, tChequePre.dValor, tChequePre.lNumBordero, tChequePre.lSequencialBack, tChequePre.dtDataEmissao, tChequePre.iLocalizacao, tChequePre.lSequencialLoja, objChequeBordero.iFilialEmpresa, objChequeBordero.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 126256

    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126257

    If lErro = AD_SQL_SEM_DADOS Then gError 126258

    objChequePre.iFilialEmpresa = tChequePre.iFilialEmpresa
    objChequePre.lCliente = tChequePre.lCliente
    objChequePre.iFilial = tChequePre.iFilial
    objChequePre.iBanco = tChequePre.iBanco
    objChequePre.sAgencia = tChequePre.sAgencia
    objChequePre.sContaCorrente = tChequePre.sContaCorrente
    objChequePre.lNumero = tChequePre.lNumero
    objChequePre.dtDataDeposito = tChequePre.dtDataDeposito
    objChequePre.dValor = tChequePre.dValor
    objChequePre.lNumBordero = tChequePre.lNumBordero
    objChequePre.lSequencialBack = tChequePre.lSequencialBack
    objChequePre.dtDataEmissao = tChequePre.dtDataEmissao
    objChequePre.iLocalizacao = tChequePre.iLocalizacao
    objChequePre.lSequencialLoja = tChequePre.lSequencialLoja
    
    Call Comando_Fechar(lComando1)

    ChequePre_Le_ChequeBordero = SUCESSO

Exit Function

Erro_ChequePre_Le_ChequeBordero:

    ChequePre_Le_ChequeBordero = gErr

    Select Case gErr

        Case 126255
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 126256, 126257
            Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPRE_CHEQUEBORDERO_LEITURA", Err, objChequeBordero.iFilialEmpresa, objChequeBordero.lNumIntDoc)

        Case 126258

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148783)

    End Select

    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Function ChequePre_Lock(ByVal objChequePre As ClassChequePre) As Long
'Le o ChequePre a partir da chave(FilialEmpresaLoja\SequencialBack) fornecida em objChequePre. Devolve os dados em objChequePre

Dim lComando1 As Long
Dim lErro As Long
Dim tChequePre  As typeChequePre

On Error GoTo Erro_ChequePre_Lock

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 126261
    
    With tChequePre
    
    .sAgencia = String(STRING_AGENCIA, 0)
    .sContaCorrente = String(STRING_CONTA_CORRENTE, 0)
    .sCPFCGC = String(STRING_CLIENTE_CGC, 0)
    
    'Pega os dados da tabela ChequePre
    lErro = Comando_ExecutarPos(lComando1, "SELECT NumIntCheque, FilialEmpresa, Cliente, Filial, Banco, Agencia, ContaCorrente, Numero, DataDeposito, Valor, NumBordero, CPFCGC, NumMovtoCaixa, Aprovado, NaoEspecificado, NumBorderoLoja, SequencialLoja, Status, DataEmissao, SequencialBack, Localizacao FROM ChequePre WHERE FilialEmpresa = ? AND NumIntCheque = ?", _
       0, .lNumIntCheque, .iFilialEmpresa, .lCliente, .iFilial, .iBanco, .sAgencia, .sContaCorrente, .lNumero, .dtDataDeposito, .dValor, .lNumBordero, .sCPFCGC, .lNumMovtoCaixa, .iAprovado, .iNaoEspecificado, .lNumBorderoLoja, .lSequencialLoja, .iStatus, .dtDataEmissao, .lSequencialBack, .iLocalizacao, objChequePre.iFilialEmpresa, objChequePre.lNumIntCheque)
    If lErro <> AD_SQL_SUCESSO Then gError 126262

    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126263

    If lErro = AD_SQL_SEM_DADOS Then gError 126264
    
    lErro = Comando_LockExclusive(lComando1)
    If lErro <> AD_SQL_SUCESSO Then gError 126265
    
    objChequePre.lNumIntCheque = .lNumIntCheque
    objChequePre.iFilialEmpresa = .iFilialEmpresa
    objChequePre.lCliente = .lCliente
    objChequePre.iFilial = .iFilial
    objChequePre.iBanco = .iBanco
    objChequePre.sAgencia = .sAgencia
    objChequePre.sContaCorrente = .sContaCorrente
    objChequePre.lNumero = .lNumero
    objChequePre.dtDataDeposito = .dtDataDeposito
    objChequePre.dValor = .dValor
    objChequePre.lNumBordero = .lNumBordero
    objChequePre.sCPFCGC = .sCPFCGC
    objChequePre.lNumMovtoCaixa = .lNumMovtoCaixa
    objChequePre.iAprovado = .iAprovado
    objChequePre.iNaoEspecificado = .iNaoEspecificado
    objChequePre.lNumBorderoLoja = .lNumBorderoLoja
    objChequePre.lSequencialLoja = .lSequencialLoja
    objChequePre.iStatus = .iStatus
    objChequePre.dtDataEmissao = .dtDataEmissao
    objChequePre.lSequencialBack = .lSequencialBack
    objChequePre.iLocalizacao = .iLocalizacao
    
    End With
    
    Call Comando_Fechar(lComando1)

    ChequePre_Lock = SUCESSO

    Exit Function

Erro_ChequePre_Lock:

    ChequePre_Lock = gErr

    Select Case gErr

        Case 126261
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 126262, 126263
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUEPRE", Err, objChequePre.lNumIntCheque)

        Case 126264
        
        Case 126265
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CHEQUEPRE", Err, objChequePre.lNumIntCheque)
                
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148784)

    End Select

    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Function ChequeBordero_Le_Maior(ByVal objChequeBordero As ClassChequeBordero) As Long
'verifica se existem registros relativos ao cheque em questao com numintdoc maior que o passado como parametro

Dim lComando1 As Long
Dim lErro As Long
Dim lNumIntDoc As Long
Dim lNumBordero As Long
Dim iTipo As Integer

On Error GoTo Erro_ChequeBordero_Le_Maior

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 126268
    
    'Pega os dados da tabela ChequeBordero
    lErro = Comando_Executar(lComando1, "SELECT NumIntDoc, NumBordero, TipoBordero FROM ChequeBordero WHERE FilialEmpresa = ? AND NumIntCheque = ? AND NumIntDoc > ? ", lNumIntDoc, lNumBordero, iTipo, objChequeBordero.iFilialEmpresa, objChequeBordero.lNumIntCheque, objChequeBordero.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 126269

    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126270

    'se encontrar ==> erro
    If lErro = AD_SQL_SUCESSO Then gError 126271
     
    Call Comando_Fechar(lComando1)

    ChequeBordero_Le_Maior = SUCESSO

    Exit Function

Erro_ChequeBordero_Le_Maior:

    ChequeBordero_Le_Maior = gErr

    Select Case gErr

        Case 126268
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 126269, 126270
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUEBORDERO", gErr)

        Case 126271

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148785)

    End Select

    Call Comando_Fechar(lComando1)

    Exit Function

End Function

'Incluída em 03/03/04 por Luiz Nogueira. A Rotina já existia na tela de fornecedores e foi revisada e transferida.
Public Function FilialFornecedorCategorias_Le_FornFilial(ByVal objFilialFornecedor As ClassFilialFornecedor, ByVal colCategoriaItem As Collection) As Long
'Lê as categorias vinculadas (com os respectivos itens selecionados) ao fornecedor/filial passados como parâmetro

Dim lErro As Long
Dim iIndice As Integer
Dim lComando As Long
Dim sCategoria As String
Dim sItem As String
Dim objFilialFornCategoria As ClassFilialFornCategoria

On Error GoTo Erro_FilialFornecedorCategorias_Le_FornFilial

    'Inicializar comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 91235

    'Inicializa as variáveis que receberão strings
    sCategoria = String(STRING_CATEGORIAFORNECEDOR_CATEGORIA, 0)
    sItem = String(STRING_CATEGORIAFORNECEDORITEM_ITEM, 0)

    'Efetua a leitura no bd
    lErro = Comando_Executar(lComando, "SELECT Categoria, Item FROM FilialFornecedorCategorias WHERE Fornecedor = ? AND Filial = ?", sCategoria, sItem, objFilialFornecedor.lCodFornecedor, objFilialFornecedor.iCodFilial)
    If lErro <> AD_SQL_SUCESSO Then gError 91236

    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 91237
    
    'Se nenhuma categoria foi encontrada
    If lErro = AD_SQL_SEM_DADOS Then gError 127085

    'Enquanto houverem categorias
    Do While lErro = AD_SQL_SUCESSO

        'Instancia um novo obj
        Set objFilialFornCategoria = New ClassFilialFornCategoria

        'Guarda no obj os dados lidos do BD
        objFilialFornCategoria.lFornecedor = objFilialFornecedor.lCodFornecedor
        objFilialFornCategoria.iFilial = objFilialFornecedor.iCodFilial
        objFilialFornCategoria.sCategoria = sCategoria
        objFilialFornCategoria.sItem = sItem

        'Guarda o obj na coleção
        colCategoriaItem.Add objFilialFornCategoria

        'Busca a próxima categoria lida
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 91238

    Loop

    'Fechamento comando
    Call Comando_Fechar(lComando)

    FilialFornecedorCategorias_Le_FornFilial = SUCESSO

    Exit Function

Erro_FilialFornecedorCategorias_Le_FornFilial:

    FilialFornecedorCategorias_Le_FornFilial = gErr

    Select Case gErr

        Case 91235
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 91236, 91237, 91238
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIALCLIENTECATEGORIAS2", gErr, objFilialFornCategoria.lFornecedor)

        Case 127085 'SEM DADOS
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148786)

    End Select

    'Fechamento comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

'Incluída em 03/03/04 por Luiz Nogueira. A Rotina já existia na tela de fornecedores e foi revisada e transferida.
Public Function CategoriaFornecedor_Le_Todos(ByVal colCategorias As Collection) As Long
'Lê todas as categorias de fornecedor

Dim lErro As Long
Dim lComando As Long
Dim objCategoriaFornecedor As New ClassCategoriaFornecedor
Dim sCategoria As String
Dim sDescricao As String

On Error GoTo Erro_CategoriaFornecedor_Le_Todos

    'Abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 68483

    'Inicializa as variáves que receberão strings
    sCategoria = String(STRING_CATEGORIAFORNECEDOR_CATEGORIA, 0)
    sDescricao = String(STRING_CATEGORIAFORNECEDOR_DESCRICAO, 0)

    'Executa a leitura
    lErro = Comando_Executar(lComando, "SELECT Categoria, Descricao FROM CategoriaFornecedor", sCategoria, sDescricao)
    If lErro <> AD_SQL_SUCESSO Then gError 68484

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 68485

    'Se nao encontrar => erro
    If lErro = AD_SQL_SEM_DADOS Then gError 68486

    'Enquanto houver categorias
    Do While lErro = AD_SQL_SUCESSO
    
        'Instancia um novo obj
        Set objCategoriaFornecedor = New ClassCategoriaFornecedor
        
        'Guarda no obj os dados lidos do BD
        objCategoriaFornecedor.sCategoria = sCategoria
        objCategoriaFornecedor.sDescricao = sDescricao

        'Guarda o obj na coleção
        colCategorias.Add objCategoriaFornecedor
        
        'Busca a próxima categoria
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 75396

    Loop
    
    'Fecha o comando
    Call Comando_Fechar(lComando)

    CategoriaFornecedor_Le_Todos = SUCESSO

    Exit Function

Erro_CategoriaFornecedor_Le_Todos:

    CategoriaFornecedor_Le_Todos = gErr

    Select Case gErr

        Case 68483
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 68484, 68485
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CATGORIAFORNECEDOR", gErr)

        Case 68486
            'Erro tratado na rotina chamada
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148787)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

'Incluída por Luiz Nogueira em 03/03/04
Public Function CategoriaFornecedorItem_Le(ByVal objCategoriaFornecedorItem As ClassCategoriaFornItem, ByVal colItensCategoria As Collection) As Long
'Lê no BD item de categoria passado como parâmetro

Dim lErro As Long
Dim lComando As Long
Dim sCategoria As String
Dim sDescricao As String
Dim sItem As String

On Error GoTo Erro_CategoriaFornecedorItem_Le

    'Abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 127086

    'Inicializa as variáveis que receberão strings
    sCategoria = String(STRING_CATEGORIAFORNECEDOR_CATEGORIA, 0)
    sDescricao = String(STRING_CATEGORIAFORNECEDOR_DESCRICAO, 0)
    sItem = String(STRING_CATEGORIAFORNECEDORITEM_ITEM, 0)
    
    'Efetua a leitura no BD
    lErro = Comando_Executar(lComando, "SELECT Categoria, Item, Descricao FROM CategoriaFornecedorItem WHERE Categoria=? AND Item=?", sCategoria, sItem, sDescricao, objCategoriaFornecedorItem.sCategoria, objCategoriaFornecedorItem.sItem)
    If lErro <> AD_SQL_SUCESSO Then gError 127087

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 127088

    'Se nao encontrar => erro
    If lErro = AD_SQL_SEM_DADOS Then gError 127089
    
    'Guarda no obj os dados lidos
    objCategoriaFornecedorItem.sCategoria = sCategoria
    objCategoriaFornecedorItem.sDescricao = sDescricao
    objCategoriaFornecedorItem.sItem = sItem
        
    'Fecha o comando
    Call Comando_Fechar(lComando)

    CategoriaFornecedorItem_Le = SUCESSO

    Exit Function

Erro_CategoriaFornecedorItem_Le:

    CategoriaFornecedorItem_Le = gErr

    Select Case gErr

        Case 127086
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 127087, 127088
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CATGORIAFORNECEDOR", gErr)

        Case 127089 'SEM DADOS
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148788)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

'Incluída em 03/03/04 por Luiz Nogueira. A Rotina já existia na tela de fornecedores e foi revisada e transferida.
Public Function CategoriaFornecedor_Le_Itens(ByVal objCategoriaFornecedorItem As ClassCategoriaFornItem, ByVal colItensCategoria As Collection) As Long
'Lê no BD os itens da categoria de fornecedor passada como parâmetro

'******** Janaina ********

Dim lErro As Long
Dim lComando As Long
Dim sCategoria As String
Dim sDescricao As String
Dim sItem As String

On Error GoTo Erro_CategoriaFornecedor_Le_Itens

    'Abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 91177

    'Inicializa as variáveis que receberão strings
    sCategoria = String(STRING_CATEGORIAFORNECEDOR_CATEGORIA, 0)
    sItem = String(STRING_CATEGORIAFORNECEDORITEM_ITEM, 0)
    sDescricao = String(STRING_CATEGORIAFORNECEDOR_DESCRICAO, 0)
    
    'Efetua a leitura no BD
    lErro = Comando_Executar(lComando, "SELECT Categoria, Item, Descricao FROM CategoriaFornecedorItem WHERE Categoria=?", sCategoria, sItem, sDescricao, objCategoriaFornecedorItem.sCategoria)
    If lErro <> AD_SQL_SUCESSO Then gError 91178

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 91179

    'Se nao encontrar => erro
    If lErro = AD_SQL_SEM_DADOS Then gError 91180
    
    'Enquanto houver itens para a categoria
    Do While lErro = AD_SQL_SUCESSO
    
        'Instancia um novo obj
        Set objCategoriaFornecedorItem = New ClassCategoriaFornItem

        'Guarda no obj os dados lidos
        objCategoriaFornecedorItem.sCategoria = sCategoria
        objCategoriaFornecedorItem.sDescricao = sDescricao
        objCategoriaFornecedorItem.sItem = sItem
        
        'Adiciona o obj à coleção
        colItensCategoria.Add objCategoriaFornecedorItem
        
        'Busca o próximo item da categoria
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 91181

    Loop
    
    'Fecha o comando
    Call Comando_Fechar(lComando)

    CategoriaFornecedor_Le_Itens = SUCESSO

    Exit Function

Erro_CategoriaFornecedor_Le_Itens:

    CategoriaFornecedor_Le_Itens = gErr

    Select Case gErr

        Case 91177
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 91178, 91179, 91181
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CATGORIAFORNECEDOR", gErr)

        Case 91180
            'Erro tratado na rotina chamada
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148789)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

'Incluída em 03/03/04 por Luiz Nogueira. A Rotina já existia na tela de categorias de fornecedores e foi revisada e transferida.
Public Function CategoriaFornecedor_Le(ByVal objCategoriaFornecedor As ClassCategoriaFornecedor) As Long
'Lê a categoria de fornecedor passada como parâmetro

Dim lErro As Long
Dim lComando As Long
Dim sCategoria As String
Dim sDescricao As String

On Error GoTo Erro_CategoriaFornecedor_Le

    'Abertura comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 90589

    'inicializa as variáveis que receberão strings
    sCategoria = String(STRING_CATEGORIAFORNECEDOR_CATEGORIA, 0)
    sDescricao = String(STRING_CATEGORIAFORNECEDOR_DESCRICAO, 0)

    'efetua o select no BD
    lErro = Comando_Executar(lComando, "SELECT Categoria, Descricao FROM CategoriaFornecedor WHERE Categoria=?", sCategoria, sDescricao, objCategoriaFornecedor.sCategoria)
    If lErro <> AD_SQL_SUCESSO Then gError 90590

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 90591

    'Se não encontrou => erro
    If lErro = AD_SQL_SEM_DADOS Then gError 90592

    'Guarda no obj os dados lidos
    objCategoriaFornecedor.sCategoria = sCategoria
    objCategoriaFornecedor.sDescricao = sDescricao

    'Fechamento comando
    Call Comando_Fechar(lComando)

    CategoriaFornecedor_Le = SUCESSO

    Exit Function

Erro_CategoriaFornecedor_Le:

    CategoriaFornecedor_Le = gErr

    Select Case gErr

        Case 90589
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 90590, 90591
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CATEGORIAFORNECEDOR1", gErr, objCategoriaFornecedor.sCategoria)

        Case 90592 'SEM DADOS

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148790)

    End Select

    'Fechamento comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

'Incluída em 03/03/04 por Luiz Nogueira. A Rotina já existia na tela de categorias de fornecedores e foi apenas transferida.
Public Function CategoriaFornecedorItem_NaoUtilizado(ByVal sCategoria As String, ByVal sItem As String) As Long
'Retorna SUCESSO se não houver referências no bd a este par (sCategoria, sItem) na tabela FilialFornecedorCategorias.

Dim lErro As Long, lComando As Long, lFornecedor As Long

Dim sCategoriaFornecedor As String

On Error GoTo Erro_CategoriaFornecedorItem_NaoUtilizado

    'Abertura comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 90567

    'Pesquisa se o par (categoria,item) está associado a algum Fornecedor
    lErro = Comando_Executar(lComando, "SELECT Fornecedor FROM FilialFornecedorCategorias WHERE Categoria = ? AND Item = ?", lFornecedor, sCategoria, sItem)
    If lErro <> AD_SQL_SUCESSO Then gError 90568

    'Verifica se existe
    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 90569

    'Se está associado a algum fornecedor => erro
    If lErro <> AD_SQL_SEM_DADOS Then gError 90570

    'Fechamento comando
    Call Comando_Fechar(lComando)

    CategoriaFornecedorItem_NaoUtilizado = SUCESSO

    Exit Function

Erro_CategoriaFornecedorItem_NaoUtilizado:

    CategoriaFornecedorItem_NaoUtilizado = gErr

    Select Case gErr

        Case 90567
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 90568, 90569
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIALFORNECEDORCATEGORIAS", gErr, sCategoria, sItem)

        Case 90570
            Call Rotina_Erro(vbOKOnly, "ERRO_CATEGORIAFORNECEDORITEM_UTILIZADA", gErr, lFornecedor, sItem, sCategoria)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148791)

    End Select

    'Fechamento comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

'Incluída em 03/03/04 por Luiz Nogueira. A Rotina já existia na tela de categorias de fornecedores e foi apenas transferida.
Public Function CategoriaFornecedor_NaoUtilizado(ByVal sCategoria As String) As Long
'Retorna SUCESSO se não houver referências no bd sCategoria na tabela FilialFornecedorCategorias

Dim lErro As Long
Dim lComando As Long
Dim lFornecedor As Long
Dim sCategoriaFornecedor As String

On Error GoTo Erro_CategoriaFornecedor_NaoUtilizado

    'Abertura comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 90598

    'Pesquisa se a categoria está associado a algum Fornecedor(em FilialFornecedorCategorias)
    lErro = Comando_Executar(lComando, "SELECT Fornecedor FROM FilialFornecedorCategorias WHERE Categoria = ? ", lFornecedor, sCategoria)
    If lErro <> AD_SQL_SUCESSO Then gError 90599

    'Verifica se existe
    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 90600

    'Se está associado a algum fornecedor => erro
    If lErro <> AD_SQL_SEM_DADOS Then gError 90601

    'Fechamento comando
    Call Comando_Fechar(lComando)

    CategoriaFornecedor_NaoUtilizado = SUCESSO

    Exit Function

Erro_CategoriaFornecedor_NaoUtilizado:

    CategoriaFornecedor_NaoUtilizado = gErr

    Select Case gErr

        Case 90598
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 90599, 90600
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIALFORNECEDORCATEGORIAS1", gErr, sCategoria)

        Case 90601
            Call Rotina_Erro(vbOKOnly, "ERRO_CATEGORIAFORNECEDOR_UTILIZADA", gErr, sCategoria, lFornecedor)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148792)

    End Select

    'Fechamento comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

'##############################################################################
'Inserido por Wagner
Function CCI_ObterRelTesConciliado(ByVal iCodCCI As Integer, ByVal dtData As Date, dSldIni As Double, alComando() As Long) As Long
'IMPORTANTE: específica para classe ClassRelTes de apoio a execucao de relatorios
'Obtém o saldo inicial da Conta Corrente na data passada como parametro
'ATENCAO: se o lComando vier zerado, será aberto nesta funcao e ficará aberto.

Dim lErro As Long
Dim dtDataSaldoInicial As Date
Dim iIndice As Integer
Dim dSomaValor As Double
Dim dValor As Double

On Error GoTo Erro_CCI_ObterRelTesConciliado

    For iIndice = 1 To 4
        If alComando(iIndice) = 0 Then
            alComando(iIndice) = Comando_AbrirExt(GL_lConexaoRel)
            If alComando(iIndice) = 0 Then gError 132063
        End If
    Next

    'obter o saldo inicial na implantacao da conta
    lErro = Comando_Executar(alComando(1), "SELECT DataSaldoInicial, SaldoInicial FROM ContasCorrentesInternas WHERE Codigo = ?", dtDataSaldoInicial, dSldIni, iCodCCI)
    If lErro <> AD_SQL_SUCESSO Then gError 132064
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 132065
    
    If lErro = AD_SQL_SEM_DADOS Then gError 132066
    
    If dtData <> DATA_NULA Then
        
        'obter os totais movimentados até a data passada
        lErro = Comando_Executar(alComando(2), "SELECT SUM(M1.ValorMovto) FROM ExtratoConciliado AS M1,TiposMovtoCtaCorrente AS T1 " & _
                                                "WHERE T1.Credito = 1 AND M1.TipoMovto = T1.Codigo  AND M1.DataLcto < ? AND M1.CodContaLctos = ? AND M1.ConciliadoMovto <> 0  AND M1.DataMovimento >= ? " & _
                                                "UNION SELECT SUM(M2.ValorMovto) * -1 FROM ExtratoConciliado AS M2, TiposMovtoCtaCorrente AS T2 " & _
                                                "WHERE T2.Credito = 0 AND M2.TipoMovto = T2.Codigo  AND M2.DataLcto < ? AND M2.CodContaLctos = ? AND M2.ConciliadoMovto <> 0 AND M2.DataMovimento >= ? ", dValor, dtData, iCodCCI, dtDataSaldoInicial, dtData, iCodCCI, dtDataSaldoInicial)
        If lErro <> AD_SQL_SUCESSO Then gError 132067

        lErro = Comando_BuscarPrimeiro(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 132068
        
        Do While lErro = SUCESSO
        
            dSomaValor = dSomaValor + dValor
        
            lErro = Comando_BuscarProximo(alComando(2))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 132069
        
        Loop
            
    End If
    
    dSldIni = dSldIni + dSomaValor
    
    CCI_ObterRelTesConciliado = SUCESSO

    Exit Function

Erro_CCI_ObterRelTesConciliado:

    CCI_ObterRelTesConciliado = gErr

    Select Case gErr

        Case 132063
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 132064, 132065
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONTASCORRENTESINTERNAS1", gErr, iCodCCI)

        Case 132066
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTACORRENTEINTERNA_NAO_CADASTRADA", gErr, iCodCCI)

        Case 132067 To 132069
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCONTACORRENTE", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148793)

    End Select

    Exit Function
    
End Function
'###############################################################################

'###############################################################################
Public Function ClientesAtrasados_Le(ByVal colCliente As Collection, ByVal lNumDiasIni As Long, ByVal lNumDiasFim As Long, ByVal iFilialEmpresa As Integer) As Long

Dim lErro As Long
Dim lComando  As Long
Dim lCliente As Long
Dim objCliente As ClassCliente
Dim dtDataIni As Date
Dim dtDataFim As Date
Dim sNome As String

On Error GoTo Erro_ClientesAtrasados_Le
       
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 131980
    
    sNome = String(STRING_CLIENTE_NOME_REDUZIDO, 0)

    dtDataIni = DateAdd("d", lNumDiasFim * -1, gdtDataAtual)
    dtDataFim = DateAdd("d", lNumDiasIni * -1, gdtDataAtual)

    lErro = Comando_Executar(lComando, "SELECT T.Cliente, C.NomeReduzido FROM ParcelasRec AS P, TitulosRec AS T, Clientes AS C WHERE T.NumIntDoc = P.NumIntTitulo AND T.Cliente = C.Codigo AND P.Status IN (3,4) AND T.FilialEmpresa = ? AND P.DataVencimentoReal BETWEEN ? AND ? GROUP BY T.Cliente, C.NomeReduzido ORDER BY T.Cliente", lCliente, sNome, iFilialEmpresa, dtDataIni, dtDataFim)
    If lErro <> AD_SQL_SUCESSO Then gError 131981

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 131982
       
    Do While lErro <> AD_SQL_SEM_DADOS
    
        Set objCliente = New ClassCliente
        
        objCliente.lCodigo = lCliente
        objCliente.sNomeReduzido = sNome
        
        colCliente.Add objCliente
        
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 131983
        
    Loop
    
    Call Comando_Fechar(lComando)
        
    ClientesAtrasados_Le = SUCESSO

    Exit Function

Erro_ClientesAtrasados_Le:

    ClientesAtrasados_Le = gErr
        
    Select Case gErr
        
        Case 131980
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 131981 To 131983
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_REC", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148794)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function
'##############################################################################

Function Fornecedor_Pesquisa_NomeReduzido(objFornecedor As Object, sNomeReduzidoParte As String) As Long
'rotina para trazer o nome do Fornecedor com uma parte dos caracteres digitados

Dim iCursorPos As Integer
Dim sNomeReduzido As String
Dim lErro As Long

On Error GoTo Erro_Fornecedor_Pesquisa_NomeReduzido

        If sNomeReduzidoParte <> objFornecedor.Text And Len(sNomeReduzidoParte) <= Len(objFornecedor.Text) And Not IsNumeric(objFornecedor.Text) Then
            
            sNomeReduzidoParte = objFornecedor.Text
            
            lErro = Fornecedor_Le_NomeReduzido_Parcial(sNomeReduzidoParte, sNomeReduzido)
            If lErro <> SUCESSO Then gError 134036
            
            If sNomeReduzido <> objFornecedor.Text Then
            
                sNomeReduzidoParte = sNomeReduzido
                iCursorPos = objFornecedor.SelStart
                objFornecedor.Text = sNomeReduzido
                objFornecedor.SelStart = iCursorPos
                objFornecedor.SelLength = Len(objFornecedor.Text) - (iCursorPos)
        
            End If
        
        Else
        
            sNomeReduzidoParte = objFornecedor.Text
        
        End If

    Fornecedor_Pesquisa_NomeReduzido = SUCESSO

    Exit Function

Erro_Fornecedor_Pesquisa_NomeReduzido:

    Fornecedor_Pesquisa_NomeReduzido = gErr

    Select Case gErr

        Case 134036

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148795)

    End Select

End Function

Function Fornecedor_Le_NomeReduzido_Parcial(sNomeReduzidoParte As String, sNomeReduzido As String) As Long
'Le o NomeReduzido do Fornecedor a partir de parte do nome reduzido. Se a parte não individualiza o Fornecedor ==> retorna codigo de erro

Dim lComando As Long
Dim lErro As Long
Dim iTamanho As Integer
Dim sNomeReduzidoAux As String

On Error GoTo Erro_Fornecedor_Le_NomeReduzido_Parcial

    sNomeReduzido = String(STRING_FORNECEDOR_NOME_REDUZIDO, 0)

    iTamanho = Len(sNomeReduzidoParte)

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 134037

    'Le o NomeReduzido da tabela Fornecedores
    lErro = Comando_Executar(lComando, "SELECT NomeReduzido FROM Fornecedores WHERE NomeReduzido >= ?", sNomeReduzido, sNomeReduzidoParte)
    If lErro <> AD_SQL_SUCESSO Then gError 134038

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 134039

    'se não encontrou nenhum Fornecedor com este prefixo ==> erro
    If lErro = AD_SQL_SEM_DADOS Then gError 134040

    'se encontrou um Fornecedor, mas o prefixo difere ==> erro
    If UCase(sNomeReduzidoParte) <> UCase(left(sNomeReduzido, iTamanho)) Then gError 134041

    sNomeReduzidoAux = sNomeReduzido
    
    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 134042

    If lErro = AD_SQL_SUCESSO Then
        
        'se encontrou um segundo registro com o mesmo prefixo ==> ainda não pode trazer o nome pois ainda não conseguiu individualizar
        If UCase(sNomeReduzidoParte) = UCase(left(sNomeReduzido, iTamanho)) Then gError 134043
        
    End If
    
    sNomeReduzido = sNomeReduzidoAux

    lErro = Comando_Fechar(lComando)

    Fornecedor_Le_NomeReduzido_Parcial = SUCESSO

    Exit Function

Erro_Fornecedor_Le_NomeReduzido_Parcial:

    Fornecedor_Le_NomeReduzido_Parcial = gErr

    Select Case gErr

        Case 134037
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 134038, 134039, 134042
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FORNECEDORES", gErr)

        Case 134040, 134041, 134043

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148796)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function EnderecoCobranca_Le_Cliente(ByVal lCliente As Long, ByVal iFilialCliente As Integer, objEndereco As ClassEndereco) As Long
'Le o endereco de cobranca na tabela Enderecos caso esteja vazio retorna le o endereco principal
'Jorge Specian - 08/03/2005

Dim lErro As Long
Dim lComando As Long
Dim lEndereco As Long
Dim lEnderecoCobranca As Long

On Error GoTo Erro_EnderecoCobranca_Le_Cliente

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 134211

    lErro = Comando_Executar(lComando, "SELECT Endereco, EnderecoCobranca FROM FiliaisClientes WHERE CodCliente=? AND CodFilial= ?", lEndereco, lEnderecoCobranca, lCliente, iFilialCliente)
    If lErro <> AD_SQL_SUCESSO Then gError 134212

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 134213
    If lErro = AD_SQL_SEM_DADOS Then gError 134214

    Call Comando_Fechar(lComando)

    'se não em endereco de cobranca
    If Len(lEnderecoCobranca) > 0 Then
       objEndereco.lCodigo = lEnderecoCobranca
    
    Else
       objEndereco.lCodigo = lEndereco
    
    End If

    'Endereco de Cobranca
    lErro = CF("Endereco_Le", objEndereco)
    If lErro <> SUCESSO And lErro <> 12309 Then gError 134215

    'se não achou ou o endereço está em branco
    If lErro = 12309 Or Len(objEndereco.sEndereco) = 0 Then

        'Endereco Principal
        objEndereco.lCodigo = lEndereco
    
        lErro = CF("Endereco_Le", objEndereco)
        If lErro <> SUCESSO And lErro <> 12309 Then gError 134216

    End If

    EnderecoCobranca_Le_Cliente = SUCESSO

Exit Function

Erro_EnderecoCobranca_Le_Cliente:

    EnderecoCobranca_Le_Cliente = gErr

    Select Case gErr

        Case 134211
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 134212, 134213
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIAISCLIENTES", gErr)

        Case 134214
            Call Rotina_Erro(vbOKOnly, "ERRO_CLIENTE_SEM_FILIAL", gErr, lCliente)
        
        Case 134215, 134216

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148797)

    End Select

    Exit Function

End Function

Function NatMovCta_Le(ByVal objNatMovCta As ClassNatMovCta) As Long
'Lê com o código passado em objNatMovCta

Dim lErro As Long
Dim lComando As Long
Dim tNatMovCta As typeNatMovCta

On Error GoTo Erro_NatMovCta_Le

    'Abre o Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 122783
    
    'Inicializa a string de Descricao
    tNatMovCta.sDescricao = String(STRING_NATMOVCTA_DESCRICAO, 0)
    
    'Seleciona no BD com o Código passado
    lErro = Comando_Executar(lComando, "SELECT Descricao, Tipo, FluxoCaixa, Grupo FROM NatMovCta WHERE Codigo = ?", tNatMovCta.sDescricao, tNatMovCta.iTipo, tNatMovCta.iFluxoCaixa, tNatMovCta.lGrupo, objNatMovCta.sCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 122784
    
    'Verifica se existe
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 122785
    
    'Se não existir --> Retorna Erro
    If lErro <> AD_SQL_SUCESSO Then gError 122786
    
    'Guarda Descrição, Tipo e FluxoCaixa lido em objNatMovCta
    objNatMovCta.sDescricao = tNatMovCta.sDescricao
    objNatMovCta.iTipo = tNatMovCta.iTipo
    objNatMovCta.iFluxoCaixa = tNatMovCta.iFluxoCaixa
    objNatMovCta.lGrupo = tNatMovCta.lGrupo
    
    'Fecha o comando
    Call Comando_Fechar(lComando)
    
    NatMovCta_Le = SUCESSO
    
    Exit Function
    
Erro_NatMovCta_Le:

    NatMovCta_Le = gErr
    
    Select Case gErr
    
        Case 122783
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 122784, 122785
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NATMOVCTA", gErr, objNatMovCta.sCodigo)
        
        Case 122786
            'Sinaliza que não encontrou registro o código passado
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148798)
    
    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function
    
End Function

Function NatMovCta_Tem_Filho(ByVal sCodigo As String, iTemFilho As Integer) As Long
'testa se tem filhos.

Dim objNatMovCta As New ClassNatMovCta
Dim lErro As Long
Dim iNivel As Integer
Dim iNivel1 As Integer

On Error GoTo Erro_NatMovCta_Tem_Filho

    'le registro imediatamente maior que o em questão
    lErro = NatMovCta_Le_NatMovCtaMaior(sCodigo, objNatMovCta)
    If lErro <> SUCESSO And lErro <> 122812 Then gError 122806
    
    If lErro = SUCESSO Then
    
        'obtem o nivel do codigo em questão
        lErro = Mascara_Item_ObterNivel(SEGMENTO_NATMOVCTA, sCodigo, iNivel)
        If lErro <> SUCESSO Then gError 122807
        
        'obtem o nivel do codigo lido
        lErro = Mascara_Item_ObterNivel(SEGMENTO_NATMOVCTA, objNatMovCta.sCodigo, iNivel1)
        If lErro <> SUCESSO Then gError 122808
    
        'se o nivel do codigo em questão for menor que o codigo lido ==> tem filho
        If iNivel < iNivel1 Then
            iTemFilho = ITEM_TEM_FILHOS
        Else
            iTemFilho = ITEM_NAO_TEM_FILHOS
        End If
        
    Else
         iTemFilho = ITEM_NAO_TEM_FILHOS
    End If
    
    NatMovCta_Tem_Filho = SUCESSO
    
    Exit Function
 
Erro_NatMovCta_Tem_Filho:

    NatMovCta_Tem_Filho = gErr

    Select Case gErr
    
        Case 122806
    
        Case 122807, 122808
            Call Rotina_Erro(vbOKOnly, "ERRO_MASCARA_ITEM_OBTERNIVEL", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148799)
    
    End Select
    
    Exit Function
        
End Function

Private Function NatMovCta_Le_NatMovCtaMaior(ByVal sCodigo As String, ByVal objNatMovCta As ClassNatMovCta) As Long
'le um codigo imediatamente maior que o passado como parametro. Devolve os dados em objNatMovCta

Dim lComando As Long
Dim lErro As Long
Dim tNatMovCta As typeNatMovCta

On Error GoTo Erro_NatMovCta_Le_NatMovCtaMaior

    tNatMovCta.sCodigo = String(STRING_NATMOVCTA_CODIGO, 0)
    tNatMovCta.sDescricao = String(STRING_NATMOVCTA_DESCRICAO, 0)
    
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 122809
    
    lErro = Comando_Executar(lComando, "SELECT Codigo, Descricao, Tipo, FluxoCaixa FROM NatMovCta WHERE Codigo>? ORDER BY Codigo", tNatMovCta.sCodigo, tNatMovCta.sDescricao, tNatMovCta.iTipo, tNatMovCta.iFluxoCaixa, sCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 122810
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 122811
        
    If lErro = AD_SQL_SEM_DADOS Then gError 122812
        
    objNatMovCta.sCodigo = tNatMovCta.sCodigo
    objNatMovCta.sDescricao = tNatMovCta.sDescricao
    objNatMovCta.iTipo = tNatMovCta.iTipo
    objNatMovCta.iFluxoCaixa = tNatMovCta.iFluxoCaixa
    
    Call Comando_Fechar(lComando)
    
    NatMovCta_Le_NatMovCtaMaior = SUCESSO
    
    Exit Function
 
Erro_NatMovCta_Le_NatMovCtaMaior:

    NatMovCta_Le_NatMovCtaMaior = gErr
    
    Select Case gErr
    
        Case 122809
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
    
        Case 122810, 122811
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NATMOVCTA2", gErr)
              
        Case 122812
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148800)
    
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

'#################################################
'Inserido por Wagner
Function NatMovCta_ExisteNatMovCta(iExiste As Integer) As Long
'verifica se tem alguma NatMovCta cadastrada.
'se existir iExiste = POSSUI_NATMOVCTA , caso contrario iExiste = NAO_POSSUI_NATMOVCTA

Dim lComando As Long
Dim lErro As Long
Dim sDescricao As String

On Error GoTo Erro_NatMovCta_ExisteNatMovCta

    sDescricao = String(STRING_NATMOVCTA_DESCRICAO, 0)

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 136642

    'Verifica se o Produto existe
    lErro = Comando_Executar(lComando, "SELECT Descricao FROM NatMovCta", sDescricao)
    If lErro <> AD_SQL_SUCESSO Then gError 136643

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 136644
        
    'Ccl está cadastrado
    If lErro = SUCESSO Then
        iExiste = POSSUI_NATMOVCTA
    Else
        iExiste = NAO_POSSUI_NATMOVCTA
    End If

    Call Comando_Fechar(lComando)

    NatMovCta_ExisteNatMovCta = SUCESSO

    Exit Function

Erro_NatMovCta_ExisteNatMovCta:

    NatMovCta_ExisteNatMovCta = gErr
    
    Select Case gErr

        Case 136642
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 136643, 136644
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NATMOVCTA", gErr)
         
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148801)

    End Select
    
    Call Comando_Fechar(lComando)

    Exit Function

End Function
'################################################


Function FluxoAnalitico_Le_ProxAnt(ByVal lFluxoId As Long, dtData As Date, ByVal iTipoReg As Integer, ByVal iProxAnt As Integer) As Long
'le o proximo/anterior data de fluxo em relacao a dtData

Dim lNumero As Long
Dim lErro As Long
Dim tFluxoAnalitico As typeFluxoAnalitico
Dim objFluxoAnalitico As ClassFluxoAnalitico
Dim lComando As Long

On Error GoTo Erro_FluxoAnalitico_Le_ProxAnt

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 133187
    
    If iProxAnt = 1 Then
    
        lErro = Comando_Executar(lComando, "SELECT Data FROM FluxoAnalitico WHERE FluxoId = ? AND Data > ? AND TipoReg = ? ORDER BY Data Asc", _
        tFluxoAnalitico.dtData, lFluxoId, dtData, iTipoReg)
        If lErro <> AD_SQL_SUCESSO Then gError 133188
    
    Else
    
        lErro = Comando_Executar(lComando, "SELECT Data FROM FluxoAnalitico WHERE FluxoId = ? AND Data < ? AND TipoReg = ? ORDER BY Data Desc", _
        tFluxoAnalitico.dtData, lFluxoId, dtData, iTipoReg)
        If lErro <> AD_SQL_SUCESSO Then gError 133189
    
    End If
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 133190
    
    If lErro = AD_SQL_SEM_DADOS Then gError 133191
    
    dtData = tFluxoAnalitico.dtData
        
    Call Comando_Fechar(lComando)
    
    FluxoAnalitico_Le_ProxAnt = SUCESSO
    
    Exit Function
        
Erro_FluxoAnalitico_Le_ProxAnt:

    FluxoAnalitico_Le_ProxAnt = gErr
    
    Select Case gErr
    
        Case 133187
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 133188 To 133190
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FLUXOANALITICO", gErr, lFluxoId, CStr(tFluxoAnalitico.dtData), iTipoReg)
        
        Case 133191
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148802)
        
    End Select
    
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function FluxoForn_Le_ProxAnt(ByVal lFluxoId As Long, dtData As Date, ByVal iTipoReg As Integer, ByVal iProxAnt As Integer) As Long
'le o proximo/anterior data de fluxo em relacao a dtData

Dim lNumero As Long
Dim lErro As Long
Dim tFluxoAnalitico As typeFluxoAnalitico
Dim objFluxoAnalitico As ClassFluxoAnalitico
Dim lComando As Long

On Error GoTo Erro_FluxoForn_Le_ProxAnt

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 133471
    
    If iProxAnt = 1 Then
    
        lErro = Comando_Executar(lComando, "SELECT Data FROM FluxoForn WHERE FluxoId = ? AND Data > ? AND TipoReg = ? ORDER BY Data Asc", _
        tFluxoAnalitico.dtData, lFluxoId, dtData, iTipoReg)
        If lErro <> AD_SQL_SUCESSO Then gError 133472
    
    Else
    
        lErro = Comando_Executar(lComando, "SELECT Data FROM FluxoForn WHERE FluxoId = ? AND Data < ? AND TipoReg = ? ORDER BY Data Desc", _
        tFluxoAnalitico.dtData, lFluxoId, dtData, iTipoReg)
        If lErro <> AD_SQL_SUCESSO Then gError 133473
    
    End If
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 133474
    
    If lErro = AD_SQL_SEM_DADOS Then gError 133475
    
    dtData = tFluxoAnalitico.dtData
        
    Call Comando_Fechar(lComando)
    
    FluxoForn_Le_ProxAnt = SUCESSO
    
    Exit Function
        
Erro_FluxoForn_Le_ProxAnt:

    FluxoForn_Le_ProxAnt = gErr
    
    Select Case gErr
    
        Case 133471
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 133472 To 133474
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FLUXOFORN1", gErr, lFluxoId, CStr(tFluxoAnalitico.dtData), iTipoReg)
        
        Case 133475
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148803)
        
    End Select
    
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function FluxoTipoForn_Le_ProxAnt(ByVal lFluxoId As Long, dtData As Date, ByVal iTipoReg As Integer, ByVal iProxAnt As Integer) As Long
'le o proximo/anterior data de fluxo em relacao a dtData

Dim lNumero As Long
Dim lErro As Long
Dim tFluxoAnalitico As typeFluxoAnalitico
Dim objFluxoAnalitico As ClassFluxoAnalitico
Dim lComando As Long

On Error GoTo Erro_FluxoTipoForn_Le_ProxAnt

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 133487
    
    If iProxAnt = 1 Then
    
        lErro = Comando_Executar(lComando, "SELECT Data FROM FluxoTipoForn WHERE FluxoId = ? AND Data > ? AND TipoReg = ? ORDER BY Data Asc", _
        tFluxoAnalitico.dtData, lFluxoId, dtData, iTipoReg)
        If lErro <> AD_SQL_SUCESSO Then gError 133488
    
    Else
    
        lErro = Comando_Executar(lComando, "SELECT Data FROM FluxoTipoForn WHERE FluxoId = ? AND Data < ? AND TipoReg = ? ORDER BY Data Desc", _
        tFluxoAnalitico.dtData, lFluxoId, dtData, iTipoReg)
        If lErro <> AD_SQL_SUCESSO Then gError 133489
    
    End If
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 133490
    
    If lErro = AD_SQL_SEM_DADOS Then gError 133491
    
    dtData = tFluxoAnalitico.dtData
        
    Call Comando_Fechar(lComando)
    
    FluxoTipoForn_Le_ProxAnt = SUCESSO
    
    Exit Function
        
Erro_FluxoTipoForn_Le_ProxAnt:

    FluxoTipoForn_Le_ProxAnt = gErr
    
    Select Case gErr
    
        Case 133487
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 133488 To 133490
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FLUXOFORN1", gErr, lFluxoId, CStr(tFluxoAnalitico.dtData), iTipoReg)
        
        Case 133491
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148804)
        
    End Select
    
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function CCI_ObterHistContabil(sHistorico As String, ByVal lNumMovto As Long, alComando() As Long) As Long
'IMPORTANTE: específica para classe ClassRelTes de apoio a execucao de relatorios
'Obtém o Histórico Contábil
'ATENCAO: se o lComando vier zerado, será aberto nesta funcao e ficará aberto.

Dim lErro As Long
Dim iIndice As Integer
Dim objMovContaCorrente As New ClassMovContaCorrente
Dim sSelect As String
Dim sHistContabil As String
Dim iTransacaoOrigem As Integer
Dim bCaseElse As Boolean
Dim bCaseElse2 As Boolean, iSQL As Integer

On Error GoTo Erro_CCI_ObterHistContabil

    'Se não estiver aberto, abre o alComando
    For iIndice = 1 To 6
        If alComando(iIndice) = 0 Then
            alComando(iIndice) = Comando_AbrirExt(GL_lConexaoRel)
            If alComando(iIndice) = 0 Then gError 132063
        End If
    Next
    
    objMovContaCorrente.lNumMovto = lNumMovto
    
    'Le o Movimento
    lErro = MovContaCorrente_Le(objMovContaCorrente)
    If lErro <> SUCESSO And lErro <> 11893 Then gError 132183
    
    If lErro <> SUCESSO Then gError 132184
    
    sHistContabil = String(STRING_HISTORICO, 0)
    
    bCaseElse = False
    
    Select Case objMovContaCorrente.iTipo
    
        Case MOVCCI_SAQUE, MOVCCI_DEPOSITO, MOVCCI_RESGATE, MOVCCI_SAIDA_TRANSFERENCIA, MOVCCI_ENTRADA_TRANSFERENCIA 'Proprio Movimento
        
            sSelect = "SELECT L.Historico FROM LancamentosTodos AS L, TransacaoCTB AS T " & _
                      "WHERE L.Transacao = T.Codigo AND T.OrigemLcto = ? AND L.NumIntDoc = ?"
        
            iTransacaoOrigem = TRANSACAOCTBORIGEM_MOVIMENTOSCONTACORRENTE
            
            iSQL = 1
        
        Case MOVCCI_APLICACAO 'Aplicação
            
            sSelect = "SELECT L.Historico FROM LancamentosTodos AS L, TransacaoCTB AS T " & _
                      "WHERE L.Transacao = T.Codigo AND T.OrigemLcto = ? AND L.NumIntDoc = ?"
        
            iTransacaoOrigem = TRANSACAOCTBORIGEM_APLICACOES
            
            iSQL = 2
        
        Case MOVCCI_PAGTO_TITULO_POR_CHEQUE, MOVCCI_PAGTO_TITULO_POR_DINHEIRO 'BaixasPag
        
            sSelect = "SELECT L.Historico FROM LancamentosTodos AS L, TransacaoCTB AS T, BaixasPag AS B " & _
                      "WHERE L.Transacao = T.Codigo AND T.OrigemLcto = ? AND L.NumIntDoc = B.NumIntBaixa AND B.NumMovCta = ?"
        
            iTransacaoOrigem = TRANSACAOCTBORIGEM_BAIXASPAG
            
            iSQL = 3
        
        Case MOVCCI_RECEBIMENTO_TITULO 'BaixasRec
            
            sSelect = "SELECT L.Historico FROM LancamentosTodos AS L, TransacaoCTB AS T, BaixasRec AS B " & _
                      "WHERE L.Transacao = T.Codigo AND T.OrigemLcto = ? AND L.NumIntDoc = B.NumIntBaixa AND B.NumMovCta = ?"
        
            iTransacaoOrigem = TRANSACAOCTBORIGEM_BAIXASREC
            
            iSQL = 4
        
        Case Else
        
            bCaseElse = True
        
    End Select
    
    'Se não é um dos tipos tratados, então recebe o histórico do movimento
    If bCaseElse Then
    
        sHistorico = objMovContaCorrente.sHistorico

    Else
    
        'Le o histórico
        lErro = Comando_Executar(alComando(iSQL), sSelect, sHistContabil, iTransacaoOrigem, objMovContaCorrente.lNumMovto)
        If lErro <> AD_SQL_SUCESSO Then gError 132185
    
        lErro = Comando_BuscarPrimeiro(alComando(iSQL))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 132186
    
        'Se teve lançamento contábil
        If lErro = SUCESSO Then
        
            sHistorico = sHistContabil
            
        Else
        
            bCaseElse2 = False
            
            Select Case objMovContaCorrente.iTipo
                    
                Case MOVCCI_PAGTO_TITULO_POR_CHEQUE, MOVCCI_PAGTO_TITULO_POR_DINHEIRO 'BaixasPag
                
                    sSelect = "SELECT L.Historico FROM LancamentosTodos AS L, TransacaoCTB AS T, BaixasPag AS B , BaixasParcPag AS P " & _
                              "WHERE L.Transacao = T.Codigo AND T.OrigemLcto = ? AND L.NumIntDoc = P.NumIntDoc AND B.NumMovCta = ? AND B.NumIntBaixa = P.NumIntBaixa"
                
                    iTransacaoOrigem = TRANSACAOCTBORIGEM_BAIXASPARCPAG
                    
                    iSQL = 5
                
                Case MOVCCI_RECEBIMENTO_TITULO 'BaixasRec
                    
                    sSelect = "SELECT L.Historico FROM LancamentosTodos AS L, TransacaoCTB AS T, BaixasRec AS B , BaixasParcRec AS P " & _
                              "WHERE L.Transacao = T.Codigo AND T.OrigemLcto = ? AND L.NumIntDoc = P.NumIntDoc AND B.NumMovCta = ? AND B.NumIntBaixa = P.NumIntBaixa"
                
                    iTransacaoOrigem = TRANSACAOCTBORIGEM_BAIXASPARCREC
                
                    iSQL = 6
                    
                Case Else
                
                    bCaseElse2 = True
                
            End Select

            If bCaseElse2 Then
            
                sHistorico = objMovContaCorrente.sHistorico
            
            Else
                
                sHistContabil = String(STRING_HISTORICO, 0)
                
                lErro = Comando_Executar(alComando(iSQL), sSelect, sHistContabil, iTransacaoOrigem, objMovContaCorrente.lNumMovto)
                If lErro <> AD_SQL_SUCESSO Then gError 132185
            
                lErro = Comando_BuscarPrimeiro(alComando(iSQL))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 132186
            
                'Se teve lançamento contábil
                If lErro = SUCESSO Then
                
                    sHistorico = sHistContabil
                    
                Else
                
                    sHistorico = objMovContaCorrente.sHistorico
                
                End If
                
            End If

        End If
    
    End If
    
    CCI_ObterHistContabil = SUCESSO

    Exit Function

Erro_CCI_ObterHistContabil:

    CCI_ObterHistContabil = gErr

    Select Case gErr

        Case 132182
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 132183

        Case 132184 To 132186
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCONTACORRENTE", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148805)

    End Select

    Exit Function
    
End Function
Function CarteiraCobradorInfo_ObtemValor(ByVal iCodCobrador As Integer, ByVal iCodCarteiraCobrador As Integer, ByVal iCodInfo As Integer, sValorInfo As String) As Long
'Lê o valor configurado da informação de cobrança eletrônica para o cobrador/carteira/codigo passado

Dim lErro As Long
Dim lComando As Long

On Error GoTo Erro_CarteiraCobradorInfo_ObtemValor

    'Abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 51620

    sValorInfo = String(STRING_BANCOINFO_VALOR, 0)

    'Busca as informações no BD
    lErro = Comando_Executar(lComando, "SELECT ValorInformacao FROM CarteiraCobradorInfo WHERE CodCobrador = ? AND CodCarteira = ? AND CodInformacao = ?", sValorInfo, iCodCobrador, iCodCarteiraCobrador, iCodInfo)
    If lErro <> AD_SQL_SUCESSO Then Error 51230

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 51150
    If lErro <> AD_SQL_SUCESSO Then Error 51500

    Call Comando_Fechar(lComando)

    CarteiraCobradorInfo_ObtemValor = SUCESSO

    Exit Function

Erro_CarteiraCobradorInfo_ObtemValor:

    CarteiraCobradorInfo_ObtemValor = Err

    Select Case Err

        Case 51620
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 51150, 51230, 51500
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CARTEIRACOBRADORINFO_NAO_CADASTRADA", Err, iCodCobrador, iCodCarteiraCobrador)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148806)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function ArqCNABPag_Carregar_DetPag(ByVal objArq As ClassArqCNABPag) As Long
'carrega colecao com os pagtos a serem efetuados

Dim lErro As Long, tDetPag As typeDetArqCNABPag, objDetPag As ClassDetArqCNABPag
Dim lComando As Long, dValorBaixado As Double, dValorDiferenca As Double
Dim dtDataMovimento As Date, lNumIntParcela As Long

On Error GoTo Erro_ArqCNABPag_Carregar_DetPag

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 130414
    
    With tDetPag
        .sNomeFavorecido = String(STRING_FORNECEDOR_RAZAO_SOC, 0)
        .sAgenciaFavorecido = String(STRING_AGENCIA, 0)
        .sCGCFavorecido = String(STRING_CGC, 0)
        .sContaFavorecido = String(STRING_CONTA_CORRENTE, 0)
        .sSiglaTitulo = String(STRING_SIGLA_DOCUMENTO, 0)
        .sNossoNumero = String(STRING_PARCELA_PAGAR_NOSSO_NUMERO, 0)
        .sCodigoDeBarras = String(STRING_CODIGO_BARRAS_PARC_CPR, 0)
        .sEnderecoFavorecido = String(STRING_ENDERECO, 0)
        .sBairroFavorecido = String(STRING_BAIRRO, 0)
        .sCidadeFavorecido = String(STRING_CIDADE, 0)
        .sCEPFavorecido = String(STRING_CEP, 0)
        .sEstadoFavorecido = String(STRING_ESTADO, 0)
        lErro = Comando_Executar(lComando, "SELECT ParcelasPagTodas.NumIntDoc, BaixasParcPag.Sequencial, ParcelasPagTodas.NumParcela, BaixasParcPag.ValorMulta, BaixasParcPag.ValorJuros, BaixasParcPag.ValorDesconto, BaixasParcPag.ValorBaixado, BaixasParcPag.ValorDiferenca, " & _
            "ParcelasPagTodas.TipoCobranca, ParcelasPagTodas.BancoCobrador, ParcelasPagTodas.NossoNumero, ParcelasPagTodas.CodigoDeBarras, ParcelasPagTodas.DataVencimento, Fornecedores.RazaoSocial, FiliaisFornecedores.CGC, FiliaisFornecedores.Banco, FiliaisFornecedores.Agencia, " & _
            "FiliaisFornecedores.ContaCorrente, TitulosPagTodos.SiglaDocumento, TitulosPagTodos.NumTitulo, TitulosPagTodos.DataEmissao, TitulosPagTodos.ValorTotal, TitulosPagTodos.Fornecedor, TitulosPagTodos.Filial, " & _
            "Enderecos.Endereco, Enderecos.Bairro, Enderecos.Cidade, Enderecos.SiglaEstado, Enderecos.CEP, MovimentosContaCorrente.DataMovimento " & _
            "FROM BaixasParcPag, MovimentosContaCorrente, BaixasPag, ParcelasPagTodas, TitulosPagTodos, FiliaisFornecedores, Fornecedores, Enderecos WHERE BaixasParcPag.NumIntBaixa=BaixasPag.NumIntBaixa " & _
            "AND MovimentosContaCorrente.NumMovto=BaixasPag.NumMovCta AND MovimentosContaCorrente.Tipo=? AND MovimentosContaCorrente.NumRefInterna=? AND " & _
            "TitulosPagTodos.NumIntDoc=ParcelasPagTodas.NumIntTitulo AND TitulosPagTodos.Fornecedor=FiliaisFornecedores.CodFornecedor AND " & _
            "TitulosPagTodos.Filial=FiliaisFornecedores.CodFilial AND FiliaisFornecedores.CodFornecedor = Fornecedores.Codigo AND FiliaisFornecedores.Endereco = Enderecos.Codigo AND ParcelasPagTodas.NumIntDoc = BaixasParcPag.NumIntParcela " & _
            "ORDER BY CASE WHEN ParcelasPagTodas.TipoCobranca=4 and ValorBaixado>=5000 THEN 41 ELSE ParcelasPagTodas.TipoCobranca END, ParcelasPagTodas.TipoCobranca, ParcelasPagTodas.CodigoDeBarras, ParcelasPagTodas.BancoCobrador", _
            lNumIntParcela, .iSeqBaixaParcPag, .iNumParcela, .dValorMulta, .dValorJuros, .dValorDesconto, dValorBaixado, dValorDiferenca, _
            .iTipoCobranca, .iBancoCobrador, .sNossoNumero, .sCodigoDeBarras, .dtDataVenctoParcela, .sNomeFavorecido, .sCGCFavorecido, .iBancoFavorecido, .sAgenciaFavorecido, _
            .sContaFavorecido, .sSiglaTitulo, .lNumTitulo, .dtDataEmissaoTitulo, .dValorTitulo, .lFornecedor, .iFilialForn, _
            .sEnderecoFavorecido, .sBairroFavorecido, .sCidadeFavorecido, .sEstadoFavorecido, .sCEPFavorecido, dtDataMovimento, _
            MOVCCI_PAGTO_TITULO_POR_BORDERO, objArq.lNumIntBordero)
    End With
    If lErro <> AD_SQL_SUCESSO Then gError 130415

    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 130416
    
    Do While lErro = AD_SQL_SUCESSO
    
        Set objDetPag = New ClassDetArqCNABPag
        
        With objDetPag
            .iBancoFavorecido = tDetPag.iBancoFavorecido
            .sNomeFavorecido = tDetPag.sNomeFavorecido
            .sAgenciaFavorecido = tDetPag.sAgenciaFavorecido
            .sCGCFavorecido = tDetPag.sCGCFavorecido
            .dtDataVenctoParcela = tDetPag.dtDataVenctoParcela
            .dValorPagto = Arredonda_Moeda(dValorBaixado + dValorDiferenca + tDetPag.dValorMulta + tDetPag.dValorJuros - tDetPag.dValorDesconto)
            .sContaFavorecido = tDetPag.sContaFavorecido
            .sSiglaTitulo = tDetPag.sSiglaTitulo
            .lNumTitulo = tDetPag.lNumTitulo
            .dtDataEmissaoTitulo = tDetPag.dtDataEmissaoTitulo
            .sNossoNumero = tDetPag.sNossoNumero
            .sCodigoDeBarras = tDetPag.sCodigoDeBarras
            objDetPag.lNumIntParcela = lNumIntParcela
            
            If tDetPag.iTipoCobranca <> TIPO_COBRANCA_BANCARIA Then
                If dtDataMovimento > .dtDataVenctoParcela Then .dtDataVenctoParcela = dtDataMovimento
                If gdtDataAtual > .dtDataVenctoParcela Then .dtDataVenctoParcela = gdtDataAtual
            End If
            
            .sEnderecoFavorecido = tDetPag.sEnderecoFavorecido
            .sBairroFavorecido = tDetPag.sBairroFavorecido
            .sCidadeFavorecido = tDetPag.sCidadeFavorecido
            .sEstadoFavorecido = tDetPag.sEstadoFavorecido
            .sCEPFavorecido = tDetPag.sCEPFavorecido
            
            .lFornecedor = tDetPag.lFornecedor
            .iFilialForn = tDetPag.iFilialForn
            .iNumParcela = tDetPag.iNumParcela
            .iSeqBaixaParcPag = tDetPag.iSeqBaixaParcPag
            .dValorMulta = tDetPag.dValorMulta
            .dValorJuros = tDetPag.dValorJuros
            .dValorDesconto = tDetPag.dValorDesconto
            .dValorTitulo = tDetPag.dValorTitulo
            
            .iTipoCobranca = tDetPag.iTipoCobranca
            .iBancoCobrador = tDetPag.iBancoCobrador
        End With
        
        If objDetPag.iTipoCobranca = TIPO_COBRANCA_OP Then
            objDetPag.sFormaPagamento = "10"
        ElseIf objDetPag.iTipoCobranca = TIPO_COBRANCA_DOC Then
            If objDetPag.dValorPagto < 1 Then 'era < 5000
                objDetPag.sFormaPagamento = "03"
            Else
                objDetPag.sFormaPagamento = "41"
            End If
        ElseIf objDetPag.iTipoCobranca = TIPO_COBRANCA_DEP_CONTA Or objDetPag.iTipoCobranca = TIPO_COBRANCA_CARTEIRA Then
            objDetPag.sFormaPagamento = "01"
        ElseIf objDetPag.iTipoCobranca = TIPO_COBRANCA_BANCARIA Then
        
            If Not (objArq.objFonte Is Nothing) Then
                If objDetPag.iBancoCobrador = objArq.objFonte.gobjGeracaoArqCNABPag.objCCI.iCodBanco Then
                    objDetPag.sFormaPagamento = "30"
                Else
                    objDetPag.sFormaPagamento = "31"
                End If
            End If
            
            'se for um tributo ==> pagamento de contas
            If left(objDetPag.sCodigoDeBarras, 1) = "8" Then objDetPag.sFormaPagamento = "11"
            
        End If
        
        objArq.colDetArqCNABPag.Add objDetPag
        
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 130417
    
    Loop
    
    Call Comando_Fechar(lComando)
    
    ArqCNABPag_Carregar_DetPag = SUCESSO
     
    Exit Function
    
Erro_ArqCNABPag_Carregar_DetPag:

    ArqCNABPag_Carregar_DetPag = gErr
     
    Select Case gErr
          
        Case 130414
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 130415, 130416, 130417
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_INFOARQCNABPAG", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148807)
     
    End Select
     
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'LEITURA
Public Function TiposDifParcRec_Le(ByVal objTiposDifParcRec As ClassTiposDifParcRec) As Long

Dim lErro As Long
Dim lComando As Long
Dim tTiposDifParcRec As typeTiposDifParcRec

On Error GoTo Erro_TiposDifParcRec_Le

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 177654

    'Alocação de espaço no buffer
    tTiposDifParcRec.sDescricao = String(STRING_TIPOSDIFPARCREC_DESCRICAO, 0)
    tTiposDifParcRec.sContaContabilCR = String(STRING_CONTA, 0)
    tTiposDifParcRec.sContaContabilRecDesp = String(STRING_CONTA, 0)

    'Le a tabelaTiposDifParcRec
    lErro = Comando_Executar(lComando, "SELECT Codigo, Descricao, ContaContabilCR, ContaContabilRecDesp FROM TiposDifParcRec WHERE Codigo= ? ", _
                tTiposDifParcRec.iCodigo, tTiposDifParcRec.sDescricao, tTiposDifParcRec.sContaContabilCR, tTiposDifParcRec.sContaContabilRecDesp, _
                objTiposDifParcRec.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 177655

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 177656

    'Sem Dados
    If lErro = AD_SQL_SEM_DADOS Then gError 177657

    objTiposDifParcRec.iCodigo = tTiposDifParcRec.iCodigo
    objTiposDifParcRec.sDescricao = tTiposDifParcRec.sDescricao
    objTiposDifParcRec.sContaContabilCR = tTiposDifParcRec.sContaContabilCR
    objTiposDifParcRec.sContaContabilRecDesp = tTiposDifParcRec.sContaContabilRecDesp

    'Fecha Comando
    Call Comando_Fechar(lComando)

    TiposDifParcRec_Le = SUCESSO

    Exit Function

Erro_TiposDifParcRec_Le:

    TiposDifParcRec_Le = gErr

    Select Case gErr

        Case 177654
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 177655, 177656
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOSDIFPARCREC", gErr)

        Case 177657 'Sem dados -> Tratado na rotina chamadora

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 143931)

    End Select

    'Fecha Comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'LEITURA
Public Function TiposDetRetCobr_Le(ByVal objTiposDetRetCobrAux As ClassTiposDetRetCobr, ByVal colTiposDetRetCobr As Collection) As Long

Dim lErro As Long
Dim lComando As Long
Dim tTiposDetRetCobr As typeTiposDetRetCobr
Dim objTiposDetRetCobr As ClassTiposDetRetCobr

On Error GoTo Erro_TiposDetRetCobr_Le

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 177601

    'Alocação de espaço no buffer
    tTiposDetRetCobr.sDescricao = String(STRING_TIPOSDETRETCOBR_DESCRICAO, 0)

    'Le a tabelaTiposDetRetCobr
    lErro = Comando_Executar(lComando, "SELECT Banco, CodigoMovto, CodigoDetalhe, Descricao, Acao, AcaoManual, " & _
                "CodTipoDiferenca FROM TiposDetRetCobr WHERE Banco= ?  AND CodigoMovto= ? ", _
                tTiposDetRetCobr.lBanco, tTiposDetRetCobr.iCodigoMovto, tTiposDetRetCobr.iCodigoDetalhe, tTiposDetRetCobr.sDescricao, _
                tTiposDetRetCobr.iAcao, tTiposDetRetCobr.iAcaoManual, tTiposDetRetCobr.iCodTipoDiferenca, _
                objTiposDetRetCobrAux.lBanco, objTiposDetRetCobrAux.iCodigoMovto)
    If lErro <> AD_SQL_SUCESSO Then gError 177602

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 177603

    Do While lErro <> AD_SQL_SEM_DADOS
    
        Set objTiposDetRetCobr = New ClassTiposDetRetCobr

        objTiposDetRetCobr.lBanco = tTiposDetRetCobr.lBanco
        objTiposDetRetCobr.iCodigoMovto = tTiposDetRetCobr.iCodigoMovto
        objTiposDetRetCobr.iCodigoDetalhe = tTiposDetRetCobr.iCodigoDetalhe
        objTiposDetRetCobr.sDescricao = tTiposDetRetCobr.sDescricao
        objTiposDetRetCobr.iAcao = tTiposDetRetCobr.iAcao
        objTiposDetRetCobr.iAcaoManual = tTiposDetRetCobr.iAcaoManual
        objTiposDetRetCobr.iCodTipoDiferenca = tTiposDetRetCobr.iCodTipoDiferenca
        
        colTiposDetRetCobr.Add objTiposDetRetCobr
    
        'Busca Primeiro
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 177604
        
    Loop

    'Fecha Comando
    Call Comando_Fechar(lComando)

    TiposDetRetCobr_Le = SUCESSO

    Exit Function

Erro_TiposDetRetCobr_Le:

    TiposDetRetCobr_Le = gErr

    Select Case gErr

        Case 177601
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 177602, 177603, 177604
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOSDETRETCOBR", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 143931)

    End Select

    'Fecha Comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'LEITURA
Public Function TiposMovRetCobr_Le(ByVal objTiposMovRetCobrAux As ClassTiposMovRetCobr, ByVal colTiposMovRetCobr As Collection) As Long

Dim lErro As Long
Dim lComando As Long
Dim tTiposMovRetCobr As typeTiposMovRetCobr
Dim objTiposMovRetCobr As ClassTiposMovRetCobr

On Error GoTo Erro_TiposMovRetCobr_Le

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 177760

    'Alocação de espaço no buffer
    tTiposMovRetCobr.sDescricao = String(STRING_TIPOSMOVRETCOBR_DESCRICAO, 0)

    'Le a tabelaTiposMovRetCobr
    lErro = Comando_Executar(lComando, "SELECT Banco, CodigoMovto, Descricao FROM TiposMovRetCobr WHERE Banco= ? ", _
                tTiposMovRetCobr.lBanco, tTiposMovRetCobr.iCodigoMovto, tTiposMovRetCobr.sDescricao, _
                objTiposMovRetCobrAux.lBanco)
    If lErro <> AD_SQL_SUCESSO Then gError 177761

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 177762

    'Sem Dados
    Do While lErro <> AD_SQL_SEM_DADOS
    
        Set objTiposMovRetCobr = New ClassTiposMovRetCobr

        objTiposMovRetCobr.lBanco = tTiposMovRetCobr.lBanco
        objTiposMovRetCobr.iCodigoMovto = tTiposMovRetCobr.iCodigoMovto
        objTiposMovRetCobr.sDescricao = tTiposMovRetCobr.sDescricao
        
        colTiposMovRetCobr.Add objTiposMovRetCobr

        'Busca Primeiro
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 177763

    Loop

    'Fecha Comando
    Call Comando_Fechar(lComando)

    TiposMovRetCobr_Le = SUCESSO

    Exit Function

Erro_TiposMovRetCobr_Le:

    TiposMovRetCobr_Le = gErr

    Select Case gErr

        Case 177760
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 177760 To 177763
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOSMOVRETCOBR", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 177764)

    End Select

    'Fecha Comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'LEITURA
Public Function ParcelasRecDif_Le(ByVal objParcelasRecDif As ClassParcelasRecDif) As Long

Dim lErro As Long
Dim lComando As Long
Dim tParcelasRecDif As typeParcelasRecDif

On Error GoTo Erro_ParcelasRecDif_Le

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 177859

    'Alocação de espaço no buffer
    tParcelasRecDif.sObservacao = String(STRING_OBSERVACAO_OBSERVACAO, 0)

    'Le a tabelaParcelasRecDif
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc, NumIntParc, Seq, DataRegistro, CodTipoDif, ValorDiferenca, " & _
                "Observacao, NumSeqOcorr FROM ParcelasRecDif WHERE NumIntParc= ?  AND Seq= ? ", _
                tParcelasRecDif.lNumIntDoc, tParcelasRecDif.lNumIntParc, tParcelasRecDif.iSeq, tParcelasRecDif.dtDataRegistro, _
                tParcelasRecDif.iCodTipoDif, tParcelasRecDif.dValorDiferenca, tParcelasRecDif.sObservacao, tParcelasRecDif.iNumSeqOcorr, _
                objParcelasRecDif.lNumIntParc, objParcelasRecDif.iSeq)
    If lErro <> AD_SQL_SUCESSO Then gError 177860

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 177861

    'Sem Dados
    If lErro = AD_SQL_SEM_DADOS Then gError 177862

    objParcelasRecDif.lNumIntDoc = tParcelasRecDif.lNumIntDoc
    objParcelasRecDif.lNumIntParc = tParcelasRecDif.lNumIntParc
    objParcelasRecDif.iSeq = tParcelasRecDif.iSeq
    objParcelasRecDif.dtDataRegistro = tParcelasRecDif.dtDataRegistro
    objParcelasRecDif.iCodTipoDif = tParcelasRecDif.iCodTipoDif
    objParcelasRecDif.dValorDiferenca = tParcelasRecDif.dValorDiferenca
    objParcelasRecDif.sObservacao = tParcelasRecDif.sObservacao
    objParcelasRecDif.iNumSeqOcorr = tParcelasRecDif.iNumSeqOcorr

    'Fecha Comando
    Call Comando_Fechar(lComando)

    ParcelasRecDif_Le = SUCESSO

    Exit Function

Erro_ParcelasRecDif_Le:

    ParcelasRecDif_Le = gErr

    Select Case gErr

        Case 177859
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 177860, 177861
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELASRECDIF", gErr)

        Case 177862 'Sem dados -> Tratado na rotina chamadora

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 177863)

    End Select

    'Fecha Comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

'#####################################################################
'Inserido por Wagner 06/06/2006
Function ChequePre_Le_Todos(ByVal colChequePre As Collection, ByVal iFilialEmpresa As Integer) As Long
'monta uma colecao de cheques-pre que podem ser depositados

Dim lErro As Long
Dim objChequePre As ClassChequePre
Dim lComando As Long
Dim tChequePre As typeChequePre

On Error GoTo Erro_ChequePre_Le_Todos

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 180235
                
    'Selecionar os cheques pre com data p/deposito até a data informada que tenham NumBordero = 0
    
    With tChequePre
    
        'inicializa os campos do tipo string
        .sContaCorrente = String(STRING_CONTA_CORRENTE, 0)
        .sAgencia = String(STRING_AGENCIA, 0)
     
        'Verifica se empresa é filial
        If iFilialEmpresa = EMPRESA_TODA Then
            lErro = Comando_Executar(lComando, "SELECT NumIntCheque, Cliente, Filial, Banco, Agencia, ContaCorrente, Numero, DataDeposito, Valor FROM ChequesPre_Disp WHERE Status <> ? AND NaoEspecificado <> ? ORDER BY DataDeposito ASC, Valor DESC", .lNumIntCheque, .lCliente, .iFilial, .iBanco, .sAgencia, .sContaCorrente, .lNumero, .dtDataDeposito, .dtDataDeposito, .dValor, STATUS_EXCLUIDO, CHEQUE_ESPECIFICADO)
        Else
            lErro = Comando_Executar(lComando, "SELECT NumIntCheque, Cliente, Filial, Banco, Agencia, ContaCorrente, Numero, DataDeposito, Valor FROM ChequesPre_Disp WHERE FilialEmpresa = ? AND Status <> ? AND NaoEspecificado <> ? ORDER BY DataDeposito ASC, Valor DESC", .lNumIntCheque, .lCliente, .iFilial, .iBanco, .sAgencia, .sContaCorrente, .lNumero, .dtDataDeposito, .dValor, iFilialEmpresa, STATUS_EXCLUIDO, CHEQUE_ESPECIFICADO)
        End If
    
    End With
    
    If lErro <> AD_SQL_SUCESSO Then gError 180236

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 180237

    'Percorrer os cheques
    Do While lErro <> AD_SQL_SEM_DADOS
    
        'adicionar o cheque na colecao
        Set objChequePre = New ClassChequePre
                    
        objChequePre.lNumIntCheque = tChequePre.lNumIntCheque
        objChequePre.lCliente = tChequePre.lCliente
        objChequePre.iFilial = tChequePre.iFilial
        objChequePre.iBanco = tChequePre.iBanco
        objChequePre.sAgencia = tChequePre.sAgencia
        objChequePre.sContaCorrente = tChequePre.sContaCorrente
        objChequePre.lNumero = tChequePre.lNumero
        objChequePre.dtDataDeposito = tChequePre.dtDataDeposito
        objChequePre.dValor = tChequePre.dValor
        objChequePre.iChequeSel = MARCADO
        
        colChequePre.Add objChequePre
        
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 180238
        
    Loop
    
    Call Comando_Fechar(lComando)
    
    ChequePre_Le_Todos = SUCESSO
     
    Exit Function
    
Erro_ChequePre_Le_Todos:

    ChequePre_Le_Todos = gErr
     
    Select Case gErr
          
        Case 180235
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 180236, 180237, 180238
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUEPRE3", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 180239)
     
    End Select
     
    Call Comando_Fechar(lComando)
        
    Exit Function

End Function
'#####################################################################

'############################################################
'Inserido por Wagner 24/03/2005
Function ComissaoObterDados_RazaoSocial(ByVal sNomeReduzido As String, sRazaoSocial As String, lComando As Long) As Long

Dim lErro As Long

On Error GoTo Erro_ComissaoObterDados_RazaoSocial

    If lComando = 0 Then
        lComando = Comando_AbrirExt(GL_lConexaoRel)
        If lComando = 0 Then gError 132380
    End If

    sRazaoSocial = String(STRING_CLIENTE_RAZAO_SOCIAL, 0)
    
    lErro = Comando_Executar(lComando, "SELECT RazaoSocial FROM Clientes WHERE NomeReduzido = ?", sRazaoSocial, sNomeReduzido)
    If lErro <> AD_SQL_SUCESSO Then gError 132381

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 132382

    If lErro <> AD_SQL_SUCESSO Then sRazaoSocial = sNomeReduzido

    ComissaoObterDados_RazaoSocial = SUCESSO

Exit Function

Erro_ComissaoObterDados_RazaoSocial:

    ComissaoObterDados_RazaoSocial = gErr

    Select Case gErr

        Case 132380
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 132382
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error)

    End Select

    Exit Function

End Function
'#####################################################################

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'LEITURA
Public Function BaixasAgrupadas_Le(ByVal objBaixasAgrupadas As ClassBaixasAgrupadas) As Long

Dim lErro As Long
Dim lComando As Long
Dim tBaixasAgrupadas As typeBaixasAgrupadas

On Error GoTo Erro_BaixasAgrupadas_Le

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 181230

    'Alocação de espaço no buffer
    tBaixasAgrupadas.sUsuario = String(STRING_USUARIO_CODIGO, 0)

    'Le a tabelaBaixasAgrupadas
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc, DataBaixa, Usuario FROM BaixasAgrupadas WHERE NumIntDoc= ? ", _
                tBaixasAgrupadas.lNumIntDoc, tBaixasAgrupadas.dtDataBaixa, tBaixasAgrupadas.sUsuario, _
                objBaixasAgrupadas.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 181231

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 181232

    'Sem Dados
    If lErro = AD_SQL_SEM_DADOS Then gError 181233

    objBaixasAgrupadas.lNumIntDoc = tBaixasAgrupadas.lNumIntDoc
    objBaixasAgrupadas.dtDataBaixa = tBaixasAgrupadas.dtDataBaixa
    objBaixasAgrupadas.sUsuario = tBaixasAgrupadas.sUsuario

    'Fecha Comando
    Call Comando_Fechar(lComando)

    BaixasAgrupadas_Le = SUCESSO

    Exit Function

Erro_BaixasAgrupadas_Le:

    BaixasAgrupadas_Le = gErr

    Select Case gErr

        Case 181230
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 181231, 181232
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BAIXASAGRUPADAS", gErr)

        Case 181233 'Sem dados -> Tratado na rotina chamadora

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 181234)

    End Select

    'Fecha Comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function ParcelasReceber_Le_ChequePre2(ByVal lNumIntDocParc As Long, ByVal objChequePre As ClassChequePre, objParcelasRec As ClassParcelaReceber, objTituloRec As ClassTituloReceber) As Long

Dim lErro As Long
Dim lComando As Long
Dim iFilialCheque As Integer
Dim iFilialLojaCheque As Integer
Dim lSeqBack As Long

On Error GoTo Erro_ParcelasReceber_Le_ChequePre2

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 181886
   
    lErro = Comando_Executar(lComando, "SELECT C.FilialEmpresa,C.FilialEmpresaLoja, C.SequencialBack  FROM ChequeParcelaRec AS CP, ChequePre AS C, ParcelasRecTodas AS P, TitulosRecTodos AS T WHERE CP.NumIntParcela = ? AND CP.NumIntCheque = C.NumIntCheque AND T.FilialEmpresa = C.FilialEmpresa AND P.NumIntDoc = CP.NumIntParcela AND P.NumIntTitulo = T.NumIntDoc", iFilialCheque, iFilialLojaCheque, lSeqBack, lNumIntDocParc)
    If lErro <> AD_SQL_SUCESSO Then gError 181887

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 181888

    If lErro = AD_SQL_SEM_DADOS Then gError ERRO_LEITURA_SEM_DADOS
    
    objChequePre.lSequencialBack = lSeqBack
    objChequePre.iFilialEmpresa = iFilialCheque
    objChequePre.iFilialEmpresaLoja = iFilialLojaCheque
    
    lErro = ChequePre_Le2(objChequePre)
    If lErro <> SUCESSO And lErro <> 109964 Then gError 181889
    
    If lErro <> SUCESSO Then gError ERRO_LEITURA_SEM_DADOS
    
    objParcelasRec.lNumIntDoc = lNumIntDocParc
    
    lErro = CF("ParcelaReceber_Baixada_Le", objParcelasRec)
    If lErro <> SUCESSO And lErro <> 58559 Then gError 181893
    
    If lErro <> SUCESSO Then
    
        lErro = CF("ParcelaReceber_Le", objParcelasRec)
        If lErro <> SUCESSO And lErro <> 19147 Then gError 181893
    
    End If
    
    objTituloRec.lNumIntDoc = objParcelasRec.lNumIntTitulo
    
    lErro = CF("TituloReceberBaixado_Le", objTituloRec)
    If lErro <> SUCESSO And lErro <> 56570 Then gError 181894
    
    If lErro <> SUCESSO Then
    
        lErro = CF("TituloReceber_Le", objTituloRec)
        If lErro <> SUCESSO And lErro <> 26059 Then gError 181895
    
    End If

    Call Comando_Fechar(lComando)

    ParcelasReceber_Le_ChequePre2 = SUCESSO

    Exit Function

Erro_ParcelasReceber_Le_ChequePre2:

    ParcelasReceber_Le_ChequePre2 = gErr

    Select Case gErr

        Case 181886
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 181887, 181888
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUEPARCELAREC", gErr)
            
        Case 181889, 181893, 181894, 181895, 181896, ERRO_LEITURA_SEM_DADOS
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 181890)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

'#######################################################
'Inserido por Wagner 13/03/2006
Function ParcelaRec_Le_ChequesPre(ByVal objParcelaRec As ClassParcelaReceber, ByVal colChequePre As Collection) As Long
'monta uma colecao de cheques-pre que irao ser depositados

Dim lErro As Long
Dim objChequePre As ClassChequePre
Dim lComando As Long
Dim tChequePre As typeChequePre

On Error GoTo Erro_ParcelaRec_Le_ChequesPre

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 141934
                
    'Selecionar os cheques pre da parcela informada que tenham NumBordero = 0
    With tChequePre
    
        'inicializa os campos do tipo string
        .sContaCorrente = String(STRING_CONTA_CORRENTE, 0)
        .sAgencia = String(STRING_AGENCIA, 0)
     
        'Verifica se empresa é filial
        If giFilialEmpresa = EMPRESA_TODA Then
            lErro = Comando_Executar(lComando, "SELECT C.NumIntCheque, C.Cliente, C.Filial, C.Banco, C.Agencia, C.ContaCorrente, C.Numero, C.DataDeposito, C.Valor FROM ChequeParcelaRec AS CPR, ChequePre AS C WHERE C.NumIntCheque = CPR.NumIntCheque AND C.NumBordero = 0 AND CPR.NumIntParcela= ? AND C.Localizacao = ? ", .lNumIntCheque, .lCliente, .iFilial, .iBanco, .sAgencia, .sContaCorrente, .lNumero, .dtDataDeposito, .dtDataDeposito, .dValor, objParcelaRec.lNumIntDoc, CHEQUEPRE_LOCALIZACAO_BACKOFFICE)
        Else
            lErro = Comando_Executar(lComando, "SELECT C.NumIntCheque, C.Cliente, C.Filial, C.Banco, C.Agencia, C.ContaCorrente, C.Numero, C.DataDeposito, C.Valor FROM ChequeParcelaRec AS CPR, ChequePre AS C WHERE C.NumIntCheque = CPR.NumIntCheque AND C.NumBordero = 0 AND CPR.NumIntParcela= ? AND C.FilialEmpresa = ? AND C.Localizacao = ? ", .lNumIntCheque, .lCliente, .iFilial, .iBanco, .sAgencia, .sContaCorrente, .lNumero, .dtDataDeposito, .dValor, objParcelaRec.lNumIntDoc, giFilialEmpresa, CHEQUEPRE_LOCALIZACAO_BACKOFFICE)
        End If
    
    End With
    
    If lErro <> AD_SQL_SUCESSO Then gError 141935

    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 141936

    'Percorrer os cheques
    Do While lErro <> AD_SQL_SEM_DADOS
    
        'adicionar o cheque na colecao
        Set objChequePre = New ClassChequePre
                    
        objChequePre.lNumIntCheque = tChequePre.lNumIntCheque
        objChequePre.lCliente = tChequePre.lCliente
        objChequePre.iFilial = tChequePre.iFilial
        objChequePre.iBanco = tChequePre.iBanco
        objChequePre.sAgencia = tChequePre.sAgencia
        objChequePre.sContaCorrente = tChequePre.sContaCorrente
        objChequePre.lNumero = tChequePre.lNumero
        objChequePre.dtDataDeposito = tChequePre.dtDataDeposito
        objChequePre.dValor = tChequePre.dValor
        objChequePre.iChequeSel = MARCADO
        
        colChequePre.Add objChequePre
        
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 141937
        
    Loop
    
    Call Comando_Fechar(lComando)
    
    ParcelaRec_Le_ChequesPre = SUCESSO
     
    Exit Function
    
Erro_ParcelaRec_Le_ChequesPre:

    ParcelaRec_Le_ChequesPre = gErr
     
    Select Case gErr
          
        Case 141934
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 141935, 141936, 141937
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUES_PRE_BORDERO", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 141938)
     
    End Select
     
    Call Comando_Fechar(lComando)
        
    Exit Function

End Function
'#######################################################

Function BorderoChequesPre_Le_Baixas(ByVal objBorderoChequePre As ClassBorderoChequePre, ByVal colBaixasRec As Collection, ByVal colBaixasParcRec As Collection) As Long

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer
Dim lNumIntBaixa As Long
Dim lNumIntBaixaAnt As Long
Dim lNumIntBaixaParc As Long
Dim objCheque As ClassChequePre
Dim objBaixaRec As ClassBaixaReceber
Dim objBaixaParcRec As ClassBaixaParcRec

On Error GoTo Erro_BorderoChequesPre_Le_Baixas

    'Abertura comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 182000
    Next
    
    For iIndice = objBorderoChequePre.colChequePre.Count To 1 Step -1
        objBorderoChequePre.colChequePre.Remove iIndice
    Next
    
    'lê os cheques vinculados ao borderoChequePre em questão
    lErro = CF("BorderoDescChq_Le_ChequesPre", objBorderoChequePre.lNumBordero, objBorderoChequePre.colChequePre, BORDERO_CHEQUEPRE)
    If lErro <> SUCESSO And lErro <> 109333 Then gError 182007
    
    For Each objCheque In objBorderoChequePre.colChequePre

        lErro = Comando_Executar(alComando(1), "SELECT B.NumIntBaixa, BP.NumIntDoc FROM MovimentosContaCorrente AS M, BaixasRec AS B, BaixasParcRec AS BP, ChequeParcelaRec AS C WHERE M.Tipo = ? AND M.NumRefInterna = ? AND M.NumMovto=B.NumMovCta AND B.NumIntBaixa=BP.NumIntBaixa AND C.NumIntCheque = ? AND BP.NumIntParcela=C.NumIntParcela AND BP.Status <> ? ORDER BY B.NumIntBaixa, BP.NumIntDoc", lNumIntBaixa, lNumIntBaixaParc, MOVCCI_BORDERO_CHEQUE_PRE, objBorderoChequePre.lNumBordero, objCheque.lNumIntCheque, STATUS_EXCLUIDO)
        If lErro <> AD_SQL_SUCESSO Then gError 182001
        
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 182002
            
        Do While lErro = AD_SQL_SUCESSO
            
            If lNumIntBaixaAnt <> lNumIntBaixa Then
            
                Set objBaixaRec = New ClassBaixaReceber
                
                objBaixaRec.lNumIntBaixa = lNumIntBaixa
                
                colBaixasRec.Add objBaixaRec
                
                lNumIntBaixaAnt = lNumIntBaixa
                
            End If
            
            Set objBaixaParcRec = New ClassBaixaParcRec
            
            objBaixaParcRec.lNumIntDoc = lNumIntBaixaParc
            
            colBaixasParcRec.Add objBaixaParcRec
                        
            lErro = Comando_BuscarProximo(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 182003
                
        Loop
        
    Next
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    BorderoChequesPre_Le_Baixas = SUCESSO
    
    Exit Function
    
Erro_BorderoChequesPre_Le_Baixas:

    BorderoChequesPre_Le_Baixas = gErr

    Select Case gErr
        
        Case 182000
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 182001, 182002, 182003
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BAIXASPARCREC", gErr)
            
        Case 182007
               
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 182004)

    End Select
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

'######################################################################
'Inserido por Wagner 31/08/2006
Public Function CobrancaCliente_Le(ByVal objCobrancaSelCli As ClassCobrancaSelCli, ByVal colFiliais As Collection, ByVal colEnderecos As Collection) As Long

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(1 To 1) As Long
Dim sSQL As String
Dim lCliente As Long
Dim iFilial As Integer
Dim objFilialCliente As ClassFilialCliente
Dim objEndereco As ClassEndereco
Dim colVendedores As New Collection

On Error GoTo Erro_CobrancaCliente_Le

    'Executa a abertura dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 182065
    Next
    
    If objCobrancaSelCli.iTipoVend = VENDEDOR_INDIRETO And objCobrancaSelCli.iVendedor <> 0 Then
        lErro = CF("Vendedor_Le_Hierarquia", objCobrancaSelCli.iVendedor, colVendedores, 0)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    End If
    
    lErro = CobrancaCliente_PreparaSQL(objCobrancaSelCli, sSQL, colVendedores)
    If lErro <> SUCESSO Then gError 182066

    lErro = CobrancaCliente_PreparaInt(alComando(1), sSQL, objCobrancaSelCli.sCobrador, objCobrancaSelCli.dtDataPrevDe, objCobrancaSelCli.dtDataPrevAte, objCobrancaSelCli.dtDataProxDe, objCobrancaSelCli.dtDataProxAte, objCobrancaSelCli.dtDataVencDe, objCobrancaSelCli.dtDataVencAte, lCliente, iFilial, objCobrancaSelCli.iTitulosBaixados, objCobrancaSelCli.sCategoria, objCobrancaSelCli.sCategoriaDe, objCobrancaSelCli.sCategoriaAte, objCobrancaSelCli.iVendedor, objCobrancaSelCli.iTipoVend, colVendedores)
    If lErro <> SUCESSO Then gError 182067

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 182068

    'Enquanto existirem dados de acordo com o filtro passado
    Do While lErro <> AD_SQL_SEM_DADOS
    
        Set objFilialCliente = New ClassFilialCliente
        Set objEndereco = New ClassEndereco
    
        objFilialCliente.lCodCliente = lCliente
        objFilialCliente.iCodFilial = iFilial
    
        lErro = CF("FilialCliente_Le", objFilialCliente)
        If lErro <> SUCESSO And lErro <> 12567 Then gError 182069
        
        objEndereco.lCodigo = objFilialCliente.lEndereco
        
        'Le o Endereco de Principal
        lErro = CF("Endereco_Le", objEndereco)
        If lErro <> SUCESSO And lErro <> 12309 Then gError 182070
        
        colFiliais.Add objFilialCliente
        colEnderecos.Add objEndereco
            
        'Busca Próximo
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 182071
    
    Loop
        
    'Executa o fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    CobrancaCliente_Le = SUCESSO
     
    Exit Function
    
Erro_CobrancaCliente_Le:

    CobrancaCliente_Le = gErr
     
    Select Case gErr
    
        Case ERRO_SEM_MENSAGEM
          
        Case 182065
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 182066, 182067, 182069, 182070
        
        Case 182067, 182068, 182071
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_COBRANCACLIENTE", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 182072)
     
    End Select
    
    'Executa o fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Private Function CobrancaCliente_PreparaSQL(ByVal objCobrancaSelCli As ClassCobrancaSelCli, sSQL As String, colVend As Collection) As Long

Dim lErro As Long
Dim sWhere As String
Dim sGroupBy As String
Dim sOrderBy As String
Dim sSubWhere As String
Dim iIndice As Integer

On Error GoTo Erro_CobrancaCliente_PreparaSQL

    sSQL = "SELECT C.Cliente, C.Filial FROM CobrancaCliente AS C "
    sWhere = "WHERE 1=1 "
    sGroupBy = "GROUP BY C.Cliente, C.Filial "
    sOrderBy = "ORDER BY C.Cliente, C.Filial "
    
    If objCobrancaSelCli.iTitulosBaixados = MARCADO Then
        sWhere = sWhere & "AND C.Status = ? "
    End If
            
    If objCobrancaSelCli.sCobrador <> "" Then
        sWhere = sWhere & "AND C.Cobrador = ? "
    End If
    
    If objCobrancaSelCli.dtDataPrevDe <> DATA_NULA Then
        sWhere = sWhere & "AND C.DataPrevReceb >= ? "
    End If
    
    If objCobrancaSelCli.dtDataPrevAte <> DATA_NULA Then
        sWhere = sWhere & "AND C.DataPrevReceb <= ? "
    End If
    
    If objCobrancaSelCli.dtDataProxDe <> DATA_NULA Then
        sWhere = sWhere & "AND C.DataProxCobr >= ? "
    End If
    
    If objCobrancaSelCli.dtDataProxAte <> DATA_NULA Then
        sWhere = sWhere & "AND C.DataProxCobr <= ? "
    End If

    If objCobrancaSelCli.dtDataVencDe <> DATA_NULA Then
        sWhere = sWhere & "AND C.DataVencimentoReal >= ? "
    End If
    
    If objCobrancaSelCli.dtDataVencAte <> DATA_NULA Then
        sWhere = sWhere & "AND C.DataVencimentoReal <= ? "
    End If
    
    If Len(Trim(objCobrancaSelCli.sCategoria)) > 0 Then
        If Len(Trim(objCobrancaSelCli.sCategoriaDe)) > 0 Then
            sSubWhere = sSubWhere & "AND F.Item >= ? "
        End If
        If Len(Trim(objCobrancaSelCli.sCategoriaAte)) > 0 Then
            sSubWhere = sSubWhere & "AND F.Item <= ? "
        End If
        sWhere = sWhere & " AND EXISTS ( SELECT F.Cliente FROM FilialClienteCategorias AS F WHERE C.Cliente= F.Cliente AND C.Filial = F.Filial AND " & _
        "F.Categoria = ? " & sSubWhere & ") "
    End If
    
    If objCobrancaSelCli.iVendedor <> 0 Then
        If objCobrancaSelCli.iTipoVend = VENDEDOR_DIRETO Then
            sWhere = sWhere & "AND C.Vendedor = ? "
        ElseIf colVend.Count > 0 Then
            sWhere = sWhere & " AND C.Vendedor IN ( "
            sSubWhere = ""
            For iIndice = 1 To colVend.Count
                If Len(Trim(sSubWhere)) <> 0 Then sSubWhere = sSubWhere & ","
                sSubWhere = sSubWhere & "?"
            Next
            sWhere = sWhere & sSubWhere & ")"
        End If
    End If
    
    sSQL = sSQL & sWhere & sGroupBy & sOrderBy
    
    CobrancaCliente_PreparaSQL = SUCESSO
     
    Exit Function
    
Erro_CobrancaCliente_PreparaSQL:

    CobrancaCliente_PreparaSQL = gErr
     
    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 182073)
     
    End Select
     
    Exit Function

End Function

Private Function CobrancaCliente_PreparaInt(ByVal lComando As Long, ByVal sSQL As String, ByVal vsCobrador As Variant, ByVal vdtDataPrevDe As Variant, ByVal vdtDataPrevAte As Variant, ByVal vdtDataProxDe As Variant, ByVal vdtDataProxAte As Variant, ByVal vdtDataVencDe As Variant, ByVal vdtDataVencAte As Variant, vlCliente As Variant, viFilialCli As Variant, ByVal viTitulosBaixados As Variant, ByVal vsCategoria As Variant, ByVal vsCategoriaDe As Variant, ByVal vsCategoriaAte As Variant, ByVal viVendedor As Variant, ByVal viTipoVend As Variant, ByVal colVend As Collection) As Long

Dim lErro As Long
Dim viStatus As Variant
Dim objVend As ClassVendedor
Dim viVend As Variant

On Error GoTo Erro_CobrancaCliente_PreparaInt

    lErro = Comando_PrepararInt(lComando, sSQL)
    If (lErro <> AD_SQL_SUCESSO) Then gError 182074

    lErro = Comando_BindVarInt(lComando, vlCliente)
    If (lErro <> AD_SQL_SUCESSO) Then gError 182075

    lErro = Comando_BindVarInt(lComando, viFilialCli)
    If (lErro <> AD_SQL_SUCESSO) Then gError 182076
    
    If viTitulosBaixados = MARCADO Then
        viStatus = STATUS_ABERTO
        lErro = Comando_BindVarInt(lComando, viStatus)
        If (lErro <> AD_SQL_SUCESSO) Then gError 182194
    End If
    
    If vsCobrador <> "" Then
        lErro = Comando_BindVarInt(lComando, vsCobrador)
        If (lErro <> AD_SQL_SUCESSO) Then gError 182208
    End If
    
    If vdtDataPrevDe <> DATA_NULA Then
        lErro = Comando_BindVarInt(lComando, vdtDataPrevDe)
        If (lErro <> AD_SQL_SUCESSO) Then gError 182077
    End If
    
    If vdtDataPrevAte <> DATA_NULA Then
        lErro = Comando_BindVarInt(lComando, vdtDataPrevAte)
        If (lErro <> AD_SQL_SUCESSO) Then gError 182078
    End If
    
    If vdtDataProxDe <> DATA_NULA Then
        lErro = Comando_BindVarInt(lComando, vdtDataProxDe)
        If (lErro <> AD_SQL_SUCESSO) Then gError 182079
    End If
    
    If vdtDataProxAte <> DATA_NULA Then
        lErro = Comando_BindVarInt(lComando, vdtDataProxAte)
        If (lErro <> AD_SQL_SUCESSO) Then gError 182080
    End If
    
    If vdtDataVencDe <> DATA_NULA Then
        lErro = Comando_BindVarInt(lComando, vdtDataVencDe)
        If (lErro <> AD_SQL_SUCESSO) Then gError 182081
    End If
    
    If vdtDataVencAte <> DATA_NULA Then
        lErro = Comando_BindVarInt(lComando, vdtDataVencAte)
        If (lErro <> AD_SQL_SUCESSO) Then gError 182082
    End If
    
    If Len(Trim(vsCategoria)) > 0 Then
        lErro = Comando_BindVarInt(lComando, vsCategoria)
        If (lErro <> AD_SQL_SUCESSO) Then gError 182082

        If Len(Trim(vsCategoriaDe)) > 0 Then
            lErro = Comando_BindVarInt(lComando, vsCategoriaDe)
            If (lErro <> AD_SQL_SUCESSO) Then gError 182082
        End If
        If Len(Trim(vsCategoriaAte)) > 0 Then
            lErro = Comando_BindVarInt(lComando, vsCategoriaAte)
            If (lErro <> AD_SQL_SUCESSO) Then gError 182082
        End If
    End If
    
    If viVendedor <> 0 Then
        If viTipoVend = VENDEDOR_DIRETO Then
            lErro = Comando_BindVarInt(lComando, viVendedor)
            If (lErro <> AD_SQL_SUCESSO) Then gError 182082
        ElseIf colVend.Count > 0 Then
            For Each objVend In colVend
                viVend = objVend.iCodigo
                lErro = Comando_BindVarInt(lComando, viVend)
                If (lErro <> AD_SQL_SUCESSO) Then gError 182082
            Next
        End If
    End If
    
    lErro = Comando_ExecutarInt(lComando)
    If (lErro <> AD_SQL_SUCESSO) Then gError 182083
    
    CobrancaCliente_PreparaInt = SUCESSO
     
    Exit Function
    
Erro_CobrancaCliente_PreparaInt:

    CobrancaCliente_PreparaInt = gErr
     
    Select Case gErr

        Case 182074 To 182083, 182208
            Call Rotina_Erro(vbOKOnly, "ERRO_PREPARACAO_COMANDO_SQL", gErr, sSQL)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 182084)
     
    End Select
     
    Exit Function

End Function

Function FilialContatoData_Le(ByVal objFilialContatoData As ClassFilialContatoData) As Long

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer
Dim tFilialContatoData As typeFilialContatoData

On Error GoTo Erro_FilialContatoData_Le

    'Abertura comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 182085
    Next
    
    tFilialContatoData.sHistorico = String(STRING_FILIALCONTATODATA_HISTORICO, 0)
    tFilialContatoData.sCodUsuario = String(STRING_USUARIO_CODIGO, 0)

    lErro = Comando_Executar(alComando(1), "SELECT Ligar, LigacaoEfetuada, Historico, CodUsuario FROM FilialContatoData WHERE Cliente = ? AND Filial = ? AND Data = ?", tFilialContatoData.iLigar, tFilialContatoData.iLigacaoEfetuada, tFilialContatoData.sHistorico, tFilialContatoData.sCodUsuario, objFilialContatoData.lCliente, objFilialContatoData.iFilial, objFilialContatoData.dtData)
    If lErro <> AD_SQL_SUCESSO Then gError 182086
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 182087
        
    If lErro = AD_SQL_SUCESSO Then
    
        objFilialContatoData.iLigar = tFilialContatoData.iLigar
        objFilialContatoData.iLigacaoEfetuada = tFilialContatoData.iLigacaoEfetuada
        objFilialContatoData.sHistorico = tFilialContatoData.sHistorico
        objFilialContatoData.sCodUsuario = tFilialContatoData.sCodUsuario
           
    End If
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    FilialContatoData_Le = SUCESSO
    
    Exit Function
    
Erro_FilialContatoData_Le:

    FilialContatoData_Le = gErr

    Select Case gErr
        
        Case 182085
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 182086, 182087
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIALCONTATODATA", gErr)
               
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 182088)

    End Select
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Public Function HistoricoCobrCliente_Le(ByVal objHistCobrSelCli As ClassHistoricoCobrSelCli, ByVal colParcelas As Collection) As Long

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(1 To 1) As Long
Dim sSQL As String
Dim lNumIntDocParc As Long
Dim dtDataProxCobr As Date
Dim dtDataPrevReceb As Date
Dim objParcelaRec As ClassParcelaReceber

On Error GoTo Erro_HistoricoCobrCliente_Le

    'Executa a abertura dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 182180
    Next
    
    lErro = HistoricoCobrCliente_PreparaSQL(objHistCobrSelCli, sSQL)
    If lErro <> SUCESSO Then gError 182181

    lErro = HistoricoCobrCliente_PreparaInt(alComando(1), sSQL, objHistCobrSelCli.lCliente, objHistCobrSelCli.iFilial, objHistCobrSelCli.iTitulosBaixados, objHistCobrSelCli.dtDataPrevDe, objHistCobrSelCli.dtDataPrevAte, objHistCobrSelCli.dtDataProxDe, objHistCobrSelCli.dtDataProxAte, objHistCobrSelCli.dtDataVencDe, objHistCobrSelCli.dtDataVencAte, lNumIntDocParc, dtDataProxCobr, dtDataPrevReceb)
    If lErro <> SUCESSO Then gError 182182

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 182183

    'Enquanto existirem dados de acordo com o filtro passado
    Do While lErro <> AD_SQL_SEM_DADOS
    
        Set objParcelaRec = New ClassParcelaReceber
        
        objParcelaRec.lNumIntDoc = lNumIntDocParc
        objParcelaRec.dtDataProxCobr = dtDataProxCobr
        objParcelaRec.dtDataPrevReceb = dtDataPrevReceb
        
        lErro = CF("ParcelaReceber_Le", objParcelaRec)
        If lErro <> SUCESSO And lErro <> 19147 Then gError 182186
        
        If lErro <> SUCESSO Then
        
            lErro = CF("ParcelaReceber_Baixada_Le", objParcelaRec)
            If lErro <> SUCESSO And lErro <> 58559 Then gError 182187
        
        End If
        
        colParcelas.Add objParcelaRec
            
        'Busca Próximo
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 182184
    
    Loop
        
    'Executa o fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    HistoricoCobrCliente_Le = SUCESSO
     
    Exit Function
    
Erro_HistoricoCobrCliente_Le:

    HistoricoCobrCliente_Le = gErr
     
    Select Case gErr
          
        Case 182180
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 182181, 182182, 182186, 182187
        
        Case 182183, 182184
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_COBRANCACLIENTE", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 182185)
     
    End Select
    
    'Executa o fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Private Function HistoricoCobrCliente_PreparaSQL(ByVal objHistCobrSelCli As ClassHistoricoCobrSelCli, sSQL As String) As Long

Dim lErro As Long
Dim sWhere As String

On Error GoTo Erro_HistoricoCobrCliente_PreparaSQL

    sSQL = "SELECT NumIntParcRec, DataProxCobr ,DataPrevReceb FROM CobrancaCliente "
    sWhere = "WHERE Cliente = ? AND Filial = ? "
            
    If objHistCobrSelCli.iTitulosBaixados = MARCADO Then
        sWhere = sWhere & "AND Status = ? "
    End If
    
    If objHistCobrSelCli.dtDataPrevDe <> DATA_NULA Then
        sWhere = sWhere & "AND DataPrevReceb >= ? "
    End If
    
    If objHistCobrSelCli.dtDataPrevAte <> DATA_NULA Then
        sWhere = sWhere & "AND DataPrevReceb <= ? "
    End If
    
    If objHistCobrSelCli.dtDataProxDe <> DATA_NULA Then
        sWhere = sWhere & "AND DataProxCobr >= ? "
    End If
    
    If objHistCobrSelCli.dtDataProxAte <> DATA_NULA Then
        sWhere = sWhere & "AND DataProxCobr <= ? "
    End If

    If objHistCobrSelCli.dtDataVencDe <> DATA_NULA Then
        sWhere = sWhere & "AND DataVencimentoReal >= ? "
    End If
    
    If objHistCobrSelCli.dtDataVencAte <> DATA_NULA Then
        sWhere = sWhere & "AND DataVencimentoReal <= ? "
    End If
    
    sSQL = sSQL & sWhere
    
    HistoricoCobrCliente_PreparaSQL = SUCESSO
     
    Exit Function
    
Erro_HistoricoCobrCliente_PreparaSQL:

    HistoricoCobrCliente_PreparaSQL = gErr
     
    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 182189)
     
    End Select
     
    Exit Function

End Function

Private Function HistoricoCobrCliente_PreparaInt(ByVal lComando As Long, ByVal sSQL As String, ByVal vlCliente As Variant, ByVal viFilial As Variant, ByVal viTitulosBaixados As Variant, ByVal vdtDataPrevDe As Variant, ByVal vdtDataPrevAte As Variant, ByVal vdtDataProxDe As Variant, ByVal vdtDataProxAte As Variant, ByVal vdtDataVencDe As Variant, ByVal vdtDataVencAte As Variant, vlNumIntParc As Variant, vdtDataProxCobr As Variant, vdtDataPrevReceb As Variant) As Long

Dim lErro As Long
Dim viStatus As Variant

On Error GoTo Erro_HistoricoCobrCliente_PreparaInt

    lErro = Comando_PrepararInt(lComando, sSQL)
    If (lErro <> AD_SQL_SUCESSO) Then gError 182190

    lErro = Comando_BindVarInt(lComando, vlNumIntParc)
    If (lErro <> AD_SQL_SUCESSO) Then gError 182191
    
    lErro = Comando_BindVarInt(lComando, vdtDataProxCobr)
    If (lErro <> AD_SQL_SUCESSO) Then gError 182272
    
    lErro = Comando_BindVarInt(lComando, vdtDataPrevReceb)
    If (lErro <> AD_SQL_SUCESSO) Then gError 182273
    
    lErro = Comando_BindVarInt(lComando, vlCliente)
    If (lErro <> AD_SQL_SUCESSO) Then gError 182192

    lErro = Comando_BindVarInt(lComando, viFilial)
    If (lErro <> AD_SQL_SUCESSO) Then gError 182193
        
    If viTitulosBaixados = MARCADO Then
        viStatus = STATUS_ABERTO
        lErro = Comando_BindVarInt(lComando, viStatus)
        If (lErro <> AD_SQL_SUCESSO) Then gError 182194
    End If
    
    If vdtDataPrevDe <> DATA_NULA Then
        lErro = Comando_BindVarInt(lComando, vdtDataPrevDe)
        If (lErro <> AD_SQL_SUCESSO) Then gError 182195
    End If
    
    If vdtDataPrevAte <> DATA_NULA Then
        lErro = Comando_BindVarInt(lComando, vdtDataPrevAte)
        If (lErro <> AD_SQL_SUCESSO) Then gError 182196
    End If
    
    If vdtDataProxDe <> DATA_NULA Then
        lErro = Comando_BindVarInt(lComando, vdtDataProxDe)
        If (lErro <> AD_SQL_SUCESSO) Then gError 182197
    End If
    
    If vdtDataProxAte <> DATA_NULA Then
        lErro = Comando_BindVarInt(lComando, vdtDataProxAte)
        If (lErro <> AD_SQL_SUCESSO) Then gError 182198
    End If
    
    If vdtDataVencDe <> DATA_NULA Then
        lErro = Comando_BindVarInt(lComando, vdtDataVencDe)
        If (lErro <> AD_SQL_SUCESSO) Then gError 182199
    End If
    
    If vdtDataVencAte <> DATA_NULA Then
        lErro = Comando_BindVarInt(lComando, vdtDataVencAte)
        If (lErro <> AD_SQL_SUCESSO) Then gError 182200
    End If
    
    lErro = Comando_ExecutarInt(lComando)
    If (lErro <> AD_SQL_SUCESSO) Then gError 182201
    
    HistoricoCobrCliente_PreparaInt = SUCESSO
     
    Exit Function
    
Erro_HistoricoCobrCliente_PreparaInt:

    HistoricoCobrCliente_PreparaInt = gErr
     
    Select Case gErr

        Case 182190 To 182201, 182272, 182273
            Call Rotina_Erro(vbOKOnly, "ERRO_PREPARACAO_COMANDO_SQL", gErr, sSQL)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 182202)
     
    End Select
     
    Exit Function

End Function

Function BaixaParcRec_Le_Parcela(ByVal lNumIntDocParc, ByVal colParcRecBaixa As Collection) As Long
'Lê dados da baixa de uma parcela a receber de um titulo baixado ou nao

Dim lErro As Long
Dim lComando As Long
Dim tBaixaParcRec As typeBaixaParcRec
Dim sComando As String
Dim objParcRecBaixa As ClassBaixaParcRec

On Error GoTo Erro_BaixaParcRec_Le_Parcela

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 182203

    sComando = "SELECT NumIntBaixa, Status, ValorDesconto, ValorMulta, ValorBaixado, ValorJuros, NumIntParcela, ValorRecebido FROM BaixasParcRec WHERE NumIntParcela = ? AND Status <> ?"

    lErro = Comando_Executar(lComando, sComando, tBaixaParcRec.lNumIntBaixa, tBaixaParcRec.iStatus, tBaixaParcRec.dValorDesconto, tBaixaParcRec.dValorMulta, tBaixaParcRec.dValorBaixado, tBaixaParcRec.dValorJuros, tBaixaParcRec.lNumIntParcela, tBaixaParcRec.dValorRecebido, lNumIntDocParc, STATUS_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then gError 182204

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 182205
    
    Do While lErro <> AD_SQL_SEM_DADOS
    
        Set objParcRecBaixa = New ClassBaixaParcRec

        objParcRecBaixa.lNumIntBaixa = tBaixaParcRec.lNumIntBaixa
        objParcRecBaixa.iStatus = tBaixaParcRec.iStatus
        objParcRecBaixa.dValorDesconto = tBaixaParcRec.dValorDesconto
        objParcRecBaixa.dValorMulta = tBaixaParcRec.dValorMulta
        objParcRecBaixa.dValorBaixado = tBaixaParcRec.dValorBaixado
        objParcRecBaixa.dValorJuros = tBaixaParcRec.dValorJuros
        objParcRecBaixa.lNumIntParcela = tBaixaParcRec.lNumIntParcela
        objParcRecBaixa.dValorRecebido = tBaixaParcRec.dValorRecebido
        
        colParcRecBaixa.Add objParcRecBaixa
        
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 182206
        
    Loop

    Call Comando_Fechar(lComando)

    BaixaParcRec_Le_Parcela = SUCESSO

    Exit Function

Erro_BaixaParcRec_Le_Parcela:

    BaixaParcRec_Le_Parcela = gErr

    Select Case gErr

        Case 182203
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 182204, 182205, 182206
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BAIXASPARCREC", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 182207)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function
'######################################################################

Function TituloPag_BuscaPrevisao(ByVal objTituloPag As ClassTituloPagar, ByVal objTitPagPrevisao As ClassTituloPagar) As Long
'preenche objTitPagPrevisao com numintdoc de titulo com STATUS_PREVISAO de mesmo fornecedor-filial de objTituloPag com mesmo mes de vencimento de parcela

Dim lErro As Long, lComando As Long, lNumIntDoc As Long, sSiglaDocumento As String

On Error GoTo Erro_TituloPag_BuscaPrevisao

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 106976
    
    sSiglaDocumento = String(STRING_SIGLA_DOCUMENTO, 0)
    
    lErro = Comando_Executar(lComando, "SELECT TitulosPag.SiglaDocumento, TitulosPag.NumIntDoc FROM TitulosPag, ParcelasPag WHERE TitulosPag.FilialEmpresa = ? AND TitulosPag.Status = ? AND TitulosPag.NumIntDoc = ParcelasPag.NumIntTitulo AND Fornecedor = ? AND Filial = ? AND {fn Month(ParcelasPag.DataVencimentoReal)} = ? AND {fn Year(ParcelasPag.DataVencimentoReal)} = ?", _
        sSiglaDocumento, lNumIntDoc, objTituloPag.iFilialEmpresa, STATUS_PREVISAO, objTituloPag.lFornecedor, objTituloPag.iFilial, Month(objTituloPag.colParcelaPagar(1).dtDataVencimentoReal), Year(objTituloPag.colParcelaPagar(1).dtDataVencimentoReal))
    If lErro <> AD_SQL_SUCESSO Then gError 106977

    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 106798
    
    If lErro = AD_SQL_SEM_DADOS Then gError 106975
    
    objTitPagPrevisao.lNumIntDoc = lNumIntDoc
    objTitPagPrevisao.sSiglaDocumento = sSiglaDocumento
    
    Call Comando_Fechar(lComando)
    
    TituloPag_BuscaPrevisao = SUCESSO
     
    Exit Function
    
Erro_TituloPag_BuscaPrevisao:

    TituloPag_BuscaPrevisao = gErr
     
    Select Case gErr
          
        Case 106975
        
        Case 106976
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 106978
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PREVISAO_TITREC", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error)
     
    End Select
     
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function OperadorasDDD_Le(ByVal iFilialEmpresa As Integer, ByVal sUF As String, sCodOperDDD As String) As Long

Dim lComando As Long
Dim lErro As Long
Dim lOperDDD As Long

On Error GoTo Erro_OperadorasDDD_Le

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 185060

    'Pega os dados da tabela Aplicacoes
    lErro = Comando_Executar(lComando, "SELECT OperDDD FROM OperadorasDDD WHERE FilialEmpresa = ? AND UF = ?", lOperDDD, iFilialEmpresa, sUF)
    If lErro <> AD_SQL_SUCESSO Then gError 185061

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 185062

    If lErro = AD_SQL_SEM_DADOS Then
        sCodOperDDD = ""
    Else
        sCodOperDDD = FormataCpoNum(lOperDDD, 2)
    End If
    
    Call Comando_Fechar(lComando)

    OperadorasDDD_Le = SUCESSO

Exit Function

Erro_OperadorasDDD_Le:

    OperadorasDDD_Le = gErr

    Select Case gErr

        Case 185060
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 185061, 185062
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_OPERADORASDDD", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 185063)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'LEITURA
Public Function CobrancaEmailPadrao_Le(ByVal objCobrancaEmailPadrao As ClassCobrancaEmailPadrao) As Long

Dim lErro As Long
Dim lComando As Long
Dim tCobrancaEmailPadrao As typeCobrancaEmailPadrao

On Error GoTo Erro_CobrancaEmailPadrao_Le

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 185941

    'Alocação de espaço no buffer
    tCobrancaEmailPadrao.sCC = String(STRING_COBRANCAEMAILPADRAO_CC, 0)
    tCobrancaEmailPadrao.sAssunto = String(STRING_COBRANCAEMAILPADRAO_ASSUNTO, 0)
    tCobrancaEmailPadrao.sMensagem = String(STRING_COBRANCAEMAILPADRAO_MENSAGEM, 0)
    tCobrancaEmailPadrao.sDescricao = String(STRING_COBRANCAEMAILPADRAO_DESCRICAO, 0)
    tCobrancaEmailPadrao.sModelo = String(STRING_COBRANCAEMAILPADRAO_MODELO, 0)
    tCobrancaEmailPadrao.sAnexo = String(STRING_COBRANCAEMAILPADRAO_ANEXO, 0)
    tCobrancaEmailPadrao.sDe = String(STRING_COBRANCAEMAILPADRAO_DE, 0)
    tCobrancaEmailPadrao.sNomeExibicao = String(STRING_COBRANCAEMAILPADRAO_NOMEEXIBICAO, 0)
    tCobrancaEmailPadrao.sUsuarioExclusivo = String(STRING_USUARIO_CODIGO, 0)
    tCobrancaEmailPadrao.sEmailResp = String(STRING_COBRANCAEMAILPADRAO_EMAILRESP, 0)

    'Le a tabelaCobrancaEmailPadrao
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc,Codigo, Descricao, AtrasoDe, AtrasoAte, CC, Assunto, Mensagem, Modelo, Anexo, Tipo, De, NomeExibicao, UsuarioExclusivo,ConfirmacaoLeitura,EmailResp FROM CobrancaEmailPadrao WHERE Codigo= ? ", _
                tCobrancaEmailPadrao.lNumIntDoc, tCobrancaEmailPadrao.lCodigo, tCobrancaEmailPadrao.sDescricao, tCobrancaEmailPadrao.iAtrasoDe, tCobrancaEmailPadrao.iAtrasoAte, tCobrancaEmailPadrao.sCC, _
                tCobrancaEmailPadrao.sAssunto, tCobrancaEmailPadrao.sMensagem, tCobrancaEmailPadrao.sModelo, tCobrancaEmailPadrao.sAnexo, tCobrancaEmailPadrao.iTipo, tCobrancaEmailPadrao.sDe, tCobrancaEmailPadrao.sNomeExibicao, tCobrancaEmailPadrao.sUsuarioExclusivo, tCobrancaEmailPadrao.iConfirmacaoLeitura, tCobrancaEmailPadrao.sEmailResp, _
                objCobrancaEmailPadrao.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 185942

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 185943

    'Sem Dados
    If lErro = AD_SQL_SEM_DADOS Then gError ERRO_LEITURA_SEM_DADOS

    objCobrancaEmailPadrao.lNumIntDoc = tCobrancaEmailPadrao.lNumIntDoc
    objCobrancaEmailPadrao.lCodigo = tCobrancaEmailPadrao.lCodigo
    objCobrancaEmailPadrao.sDescricao = tCobrancaEmailPadrao.sDescricao
    objCobrancaEmailPadrao.iAtrasoDe = tCobrancaEmailPadrao.iAtrasoDe
    objCobrancaEmailPadrao.iAtrasoAte = tCobrancaEmailPadrao.iAtrasoAte
    objCobrancaEmailPadrao.sCC = tCobrancaEmailPadrao.sCC
    objCobrancaEmailPadrao.sAssunto = tCobrancaEmailPadrao.sAssunto
    objCobrancaEmailPadrao.sMensagem = tCobrancaEmailPadrao.sMensagem
    objCobrancaEmailPadrao.sModelo = tCobrancaEmailPadrao.sModelo
    objCobrancaEmailPadrao.sAnexo = tCobrancaEmailPadrao.sAnexo
    objCobrancaEmailPadrao.iTipo = tCobrancaEmailPadrao.iTipo
    objCobrancaEmailPadrao.sDe = tCobrancaEmailPadrao.sDe
    objCobrancaEmailPadrao.sNomeExibicao = tCobrancaEmailPadrao.sNomeExibicao
    objCobrancaEmailPadrao.sUsuarioExclusivo = tCobrancaEmailPadrao.sUsuarioExclusivo
    objCobrancaEmailPadrao.sEmailResp = tCobrancaEmailPadrao.sEmailResp
    objCobrancaEmailPadrao.iConfirmacaoLeitura = tCobrancaEmailPadrao.iConfirmacaoLeitura

    'Fecha Comando
    Call Comando_Fechar(lComando)

    CobrancaEmailPadrao_Le = SUCESSO

    Exit Function

Erro_CobrancaEmailPadrao_Le:

    CobrancaEmailPadrao_Le = gErr

    Select Case gErr

        Case 185941
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 185942, 185943
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_COBRANCAEMAILPADRAO", gErr)

        Case ERRO_LEITURA_SEM_DADOS 'Sem dados -> Tratado na rotina chamadora

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 185944)

    End Select

    'Fecha Comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Public Function CobrancaEmailPadrao_Le_ComAtraso(ByVal colCobrancaEmailPadrao As Collection, ByVal iAtraso As Integer) As Long

Dim lErro As Long
Dim lComando As Long
Dim tCobrancaEmailPadrao As typeCobrancaEmailPadrao
Dim objCobrancaEmailPadrao As ClassCobrancaEmailPadrao

On Error GoTo Erro_CobrancaEmailPadrao_Le_ComAtraso

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 185970

    'Alocação de espaço no buffer
    tCobrancaEmailPadrao.sCC = String(STRING_COBRANCAEMAILPADRAO_CC, 0)
    tCobrancaEmailPadrao.sAssunto = String(STRING_COBRANCAEMAILPADRAO_ASSUNTO, 0)
    tCobrancaEmailPadrao.sMensagem = String(STRING_COBRANCAEMAILPADRAO_MENSAGEM, 0)
    tCobrancaEmailPadrao.sDescricao = String(STRING_COBRANCAEMAILPADRAO_DESCRICAO, 0)
    tCobrancaEmailPadrao.sModelo = String(STRING_COBRANCAEMAILPADRAO_MODELO, 0)
    tCobrancaEmailPadrao.sAnexo = String(STRING_COBRANCAEMAILPADRAO_ANEXO, 0)
    tCobrancaEmailPadrao.sDe = String(STRING_COBRANCAEMAILPADRAO_DE, 0)
    tCobrancaEmailPadrao.sNomeExibicao = String(STRING_COBRANCAEMAILPADRAO_NOMEEXIBICAO, 0)
    tCobrancaEmailPadrao.sUsuarioExclusivo = String(STRING_USUARIO_CODIGO, 0)
    tCobrancaEmailPadrao.sEmailResp = String(STRING_COBRANCAEMAILPADRAO_EMAILRESP, 0)

    'Le a tabelaCobrancaEmailPadrao
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc,Codigo, Descricao, AtrasoDe, AtrasoAte, CC, Assunto, Mensagem, Modelo, Anexo, Tipo, De, NomeExibicao, UsuarioExclusivo,ConfirmacaoLeitura,EmailResp FROM CobrancaEmailPadrao WHERE AtrasoDe <= ? AND AtrasoAte >=? AND Tipo IN (?,?) AND (UsuarioExclusivo = ? OR UsuarioExclusivo = '') ", _
                tCobrancaEmailPadrao.lNumIntDoc, tCobrancaEmailPadrao.lCodigo, tCobrancaEmailPadrao.sDescricao, tCobrancaEmailPadrao.iAtrasoDe, tCobrancaEmailPadrao.iAtrasoAte, tCobrancaEmailPadrao.sCC, _
                tCobrancaEmailPadrao.sAssunto, tCobrancaEmailPadrao.sMensagem, tCobrancaEmailPadrao.sModelo, tCobrancaEmailPadrao.sAnexo, tCobrancaEmailPadrao.iTipo, tCobrancaEmailPadrao.sDe, tCobrancaEmailPadrao.sNomeExibicao, tCobrancaEmailPadrao.sUsuarioExclusivo, tCobrancaEmailPadrao.iConfirmacaoLeitura, tCobrancaEmailPadrao.sEmailResp, _
                iAtraso, iAtraso, TIPO_COBRANCAEMAILPADRAO_AVISO, TIPO_COBRANCAEMAILPADRAO_COBRANCA, gsUsuario)
    If lErro <> AD_SQL_SUCESSO Then gError 185971

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 185972

    Do While lErro <> AD_SQL_SEM_DADOS
    
        Set objCobrancaEmailPadrao = New ClassCobrancaEmailPadrao

        objCobrancaEmailPadrao.lNumIntDoc = tCobrancaEmailPadrao.lNumIntDoc
        objCobrancaEmailPadrao.lCodigo = tCobrancaEmailPadrao.lCodigo
        objCobrancaEmailPadrao.sDescricao = tCobrancaEmailPadrao.sDescricao
        objCobrancaEmailPadrao.iAtrasoDe = tCobrancaEmailPadrao.iAtrasoDe
        objCobrancaEmailPadrao.iAtrasoAte = tCobrancaEmailPadrao.iAtrasoAte
        objCobrancaEmailPadrao.sCC = tCobrancaEmailPadrao.sCC
        objCobrancaEmailPadrao.sAssunto = tCobrancaEmailPadrao.sAssunto
        objCobrancaEmailPadrao.sMensagem = tCobrancaEmailPadrao.sMensagem
        objCobrancaEmailPadrao.sModelo = tCobrancaEmailPadrao.sModelo
        objCobrancaEmailPadrao.sAnexo = tCobrancaEmailPadrao.sAnexo
        objCobrancaEmailPadrao.iTipo = tCobrancaEmailPadrao.iTipo
        objCobrancaEmailPadrao.sDe = tCobrancaEmailPadrao.sDe
        objCobrancaEmailPadrao.sNomeExibicao = tCobrancaEmailPadrao.sNomeExibicao
        objCobrancaEmailPadrao.sUsuarioExclusivo = tCobrancaEmailPadrao.sUsuarioExclusivo
        objCobrancaEmailPadrao.sEmailResp = tCobrancaEmailPadrao.sEmailResp
        objCobrancaEmailPadrao.iConfirmacaoLeitura = tCobrancaEmailPadrao.iConfirmacaoLeitura
        
        colCobrancaEmailPadrao.Add objCobrancaEmailPadrao

        'Busca Próximo
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 185973

    Loop
    'Fecha Comando
    Call Comando_Fechar(lComando)

    CobrancaEmailPadrao_Le_ComAtraso = SUCESSO

    Exit Function

Erro_CobrancaEmailPadrao_Le_ComAtraso:

    CobrancaEmailPadrao_Le_ComAtraso = gErr

    Select Case gErr

        Case 185970
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 185971, 185972, 185973
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_COBRANCAEMAILPADRAO", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 185974)

    End Select

    'Fecha Comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Public Function CobrancaEmailPadrao_Le_Tipo(ByVal colCobrancaEmailPadrao As Collection, ByVal iTipo As Integer) As Long

Dim lErro As Long
Dim lComando As Long
Dim tCobrancaEmailPadrao As typeCobrancaEmailPadrao
Dim objCobrancaEmailPadrao As ClassCobrancaEmailPadrao

On Error GoTo Erro_CobrancaEmailPadrao_Le_Tipo

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 185970

    'Alocação de espaço no buffer
    tCobrancaEmailPadrao.sCC = String(STRING_COBRANCAEMAILPADRAO_CC, 0)
    tCobrancaEmailPadrao.sAssunto = String(STRING_COBRANCAEMAILPADRAO_ASSUNTO, 0)
    tCobrancaEmailPadrao.sMensagem = String(STRING_COBRANCAEMAILPADRAO_MENSAGEM, 0)
    tCobrancaEmailPadrao.sDescricao = String(STRING_COBRANCAEMAILPADRAO_DESCRICAO, 0)
    tCobrancaEmailPadrao.sModelo = String(STRING_COBRANCAEMAILPADRAO_MODELO, 0)
    tCobrancaEmailPadrao.sAnexo = String(STRING_COBRANCAEMAILPADRAO_ANEXO, 0)
    tCobrancaEmailPadrao.sDe = String(STRING_COBRANCAEMAILPADRAO_DE, 0)
    tCobrancaEmailPadrao.sNomeExibicao = String(STRING_COBRANCAEMAILPADRAO_NOMEEXIBICAO, 0)
    tCobrancaEmailPadrao.sUsuarioExclusivo = String(STRING_USUARIO_CODIGO, 0)
    tCobrancaEmailPadrao.sEmailResp = String(STRING_COBRANCAEMAILPADRAO_EMAILRESP, 0)

    'Le a tabelaCobrancaEmailPadrao
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc,Codigo, Descricao, AtrasoDe, AtrasoAte, CC, Assunto, Mensagem, Modelo, Anexo, Tipo, De, NomeExibicao, UsuarioExclusivo,ConfirmacaoLeitura,EmailResp FROM CobrancaEmailPadrao WHERE Tipo = ? AND (UsuarioExclusivo = ? OR UsuarioExclusivo = '')", _
                tCobrancaEmailPadrao.lNumIntDoc, tCobrancaEmailPadrao.lCodigo, tCobrancaEmailPadrao.sDescricao, tCobrancaEmailPadrao.iAtrasoDe, tCobrancaEmailPadrao.iAtrasoAte, tCobrancaEmailPadrao.sCC, _
                tCobrancaEmailPadrao.sAssunto, tCobrancaEmailPadrao.sMensagem, tCobrancaEmailPadrao.sModelo, tCobrancaEmailPadrao.sAnexo, tCobrancaEmailPadrao.iTipo, tCobrancaEmailPadrao.sDe, tCobrancaEmailPadrao.sNomeExibicao, tCobrancaEmailPadrao.sUsuarioExclusivo, tCobrancaEmailPadrao.iConfirmacaoLeitura, tCobrancaEmailPadrao.sEmailResp, _
                iTipo, gsUsuario)
    If lErro <> AD_SQL_SUCESSO Then gError 185971

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 185972

    Do While lErro <> AD_SQL_SEM_DADOS
    
        Set objCobrancaEmailPadrao = New ClassCobrancaEmailPadrao

        objCobrancaEmailPadrao.lNumIntDoc = tCobrancaEmailPadrao.lNumIntDoc
        objCobrancaEmailPadrao.lCodigo = tCobrancaEmailPadrao.lCodigo
        objCobrancaEmailPadrao.sDescricao = tCobrancaEmailPadrao.sDescricao
        objCobrancaEmailPadrao.iAtrasoDe = tCobrancaEmailPadrao.iAtrasoDe
        objCobrancaEmailPadrao.iAtrasoAte = tCobrancaEmailPadrao.iAtrasoAte
        objCobrancaEmailPadrao.sCC = tCobrancaEmailPadrao.sCC
        objCobrancaEmailPadrao.sAssunto = tCobrancaEmailPadrao.sAssunto
        objCobrancaEmailPadrao.sMensagem = tCobrancaEmailPadrao.sMensagem
        objCobrancaEmailPadrao.sModelo = tCobrancaEmailPadrao.sModelo
        objCobrancaEmailPadrao.sAnexo = tCobrancaEmailPadrao.sAnexo
        objCobrancaEmailPadrao.iTipo = tCobrancaEmailPadrao.iTipo
        objCobrancaEmailPadrao.sDe = tCobrancaEmailPadrao.sDe
        objCobrancaEmailPadrao.sNomeExibicao = tCobrancaEmailPadrao.sNomeExibicao
        objCobrancaEmailPadrao.sUsuarioExclusivo = tCobrancaEmailPadrao.sUsuarioExclusivo
        objCobrancaEmailPadrao.sEmailResp = tCobrancaEmailPadrao.sEmailResp
        objCobrancaEmailPadrao.iConfirmacaoLeitura = tCobrancaEmailPadrao.iConfirmacaoLeitura
       
        colCobrancaEmailPadrao.Add objCobrancaEmailPadrao

        'Busca Próximo
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 185973

    Loop
    'Fecha Comando
    Call Comando_Fechar(lComando)

    CobrancaEmailPadrao_Le_Tipo = SUCESSO

    Exit Function

Erro_CobrancaEmailPadrao_Le_Tipo:

    CobrancaEmailPadrao_Le_Tipo = gErr

    Select Case gErr

        Case 185970
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 185971, 185972, 185973
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_COBRANCAEMAILPADRAO", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 185974)

    End Select

    'Fecha Comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Public Function CobrancaPorEmail_ParcelasEmAtraso_Le(ByVal objCobrancaSel As ClassCobrancaPorEmailSel) As Long

Dim lErro As Long
Dim lComando As Long
Dim sSQL As String
Dim lNumIntDocParcela As Long
Dim objParcelaRec As ClassParcelaReceber
Dim dtDataIni As Date
Dim dtDataFim As Date

On Error GoTo Erro_CobrancaPorEmail_ParcelasEmAtraso_Le

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 185991
    
    Call CobrancaPorEmail_ParcelasEmAtraso_PreparaSQL(objCobrancaSel, sSQL)
    
    dtDataIni = DateAdd("d", -objCobrancaSel.iAtrasoAte, gdtDataHoje)
    dtDataFim = DateAdd("d", -objCobrancaSel.iAtrasoDe, gdtDataHoje)

    lErro = CobrancaPorEmail_ParcelasEmAtraso_PreparaInt(lComando, lNumIntDocParcela, _
                        dtDataFim, dtDataIni, _
                        objCobrancaSel.dSaldoAte, objCobrancaSel.dSaldoDe, _
                        objCobrancaSel.lClienteAte, objCobrancaSel.lClienteDe, _
                        objCobrancaSel.lTituloAte, objCobrancaSel.lTituloDe, objCobrancaSel.sTipo, STATUS_BAIXADO, STATUS_EXCLUIDO, _
                        sSQL, objCobrancaSel.sCategoria, objCobrancaSel.sCategoriaDe, objCobrancaSel.sCategoriaAte, objCobrancaSel.sCobrador, objCobrancaSel.iCobrador, objCobrancaSel.lNumBordero)
    If lErro <> SUCESSO Then gError 185992

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 185993
    
    Do While lErro <> AD_SQL_SEM_DADOS
    
        Set objParcelaRec = New ClassParcelaReceber
    
        objParcelaRec.lNumIntDoc = lNumIntDocParcela
    
        lErro = CF("ParcelaReceber_Le", objParcelaRec)
        If lErro <> SUCESSO And lErro <> 19147 Then gError 185994
    
        objCobrancaSel.colParcelas.Add objParcelaRec
    
        'Busca Próximo
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 185995
    
    Loop
    
    'Fecha Comando
    Call Comando_Fechar(lComando)

    CobrancaPorEmail_ParcelasEmAtraso_Le = SUCESSO

    Exit Function

Erro_CobrancaPorEmail_ParcelasEmAtraso_Le:

    CobrancaPorEmail_ParcelasEmAtraso_Le = gErr

    Select Case gErr

        Case 185991
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 185992, 185994

        Case 185993, 185995
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELASREC", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 185996)

    End Select
    
    'Fecha Comando
    Call Comando_Fechar(lComando)


    Exit Function

End Function

Private Function CobrancaPorEmail_ParcelasEmAtraso_PreparaSQL(ByVal objCobrancaSel As ClassCobrancaPorEmailSel, sSQL As String) As Long

Dim lErro As Long
Dim sOrderBy As String
Dim sWhere As String
Dim sSubWhere As String

On Error GoTo Erro_CobrancaPorEmail_ParcelasEmAtraso_PreparaSQL

    If objCobrancaSel.lNumBordero <> 0 Then
        sSQL = "SELECT P.NumIntDoc FROM ParcelasRec P, TitulosRec T, OcorrenciasRemParcRec As O "
    Else
        sSQL = "SELECT P.NumIntDoc FROM ParcelasRec P, TitulosRec T "
    End If

    If objCobrancaSel.lNumBordero <> 0 Then
        sWhere = "WHERE P.NumIntTitulo = T.NumIntDoc AND P.Status <> ? AND P.Status <> ? AND P.DataVencimentoReal BETWEEN ? AND ? AND P.Saldo > 0 AND O.CodOcorrencia = 1 AND P.Cobrador = O.Cobrador AND P.NumIntDoc = O.NumIntParc "
    Else
        sWhere = "WHERE P.NumIntTitulo = T.NumIntDoc AND P.Status <> ? AND P.Status <> ? AND P.DataVencimentoReal BETWEEN ? AND ? AND P.Saldo > 0 "
    End If
    
    If gobjCR.iFilialCentralizadora <> giFilialEmpresa And giFilialEmpresa <> EMPRESA_TODA Then
        sWhere = sWhere & " AND T.FilialEmpresa = ? "
    End If

    If objCobrancaSel.dSaldoAte <> 0 Then
        sWhere = sWhere & "AND P.Saldo <= ? "
    End If
    
    If objCobrancaSel.dSaldoDe <> 0 Then
        sWhere = sWhere & "AND P.Saldo >= ? "
    End If
    
    If objCobrancaSel.lClienteAte <> 0 Then
        sWhere = sWhere & "AND T.Cliente <= ? "
    End If
    
    If objCobrancaSel.lClienteDe <> 0 Then
        sWhere = sWhere & "AND T.Cliente >= ? "
    End If
    
    If objCobrancaSel.lTituloAte <> 0 Then
        sWhere = sWhere & "AND T.NumTitulo <= ? "
    End If
    
    If objCobrancaSel.lTituloDe <> 0 Then
        sWhere = sWhere & "AND T.NumTitulo >= ? "
    End If

    If Len(Trim(objCobrancaSel.sTipo)) <> 0 Then
        sWhere = sWhere & "AND T.SiglaDocumento = ? "
    End If
    
    If objCobrancaSel.iCobrador <> 0 Then
        sWhere = sWhere & "AND P.Cobrador = ? "
    End If
    
    If objCobrancaSel.lNumBordero <> 0 Then
        sWhere = sWhere & "AND O.NumBordero = ? "
    End If
    
    If Len(Trim(objCobrancaSel.sCategoria)) > 0 Then
        If Len(Trim(objCobrancaSel.sCategoriaDe)) > 0 Then
            sSubWhere = sSubWhere & "AND F.Item >= ? "
        End If
        If Len(Trim(objCobrancaSel.sCategoriaAte)) > 0 Then
            sSubWhere = sSubWhere & "AND F.Item <= ? "
        End If
        sWhere = sWhere & " AND EXISTS ( SELECT F.Cliente FROM FilialClienteCategorias AS F WHERE T.Cliente= F.Cliente AND T.Filial = F.Filial AND " & _
        "F.Categoria = ? " & sSubWhere & ") "
    End If

    If Len(Trim(objCobrancaSel.sCobrador)) <> 0 Then
        sWhere = sWhere & "AND T.Cliente IN (SELECT C.Cliente FROM CobradorCliente AS C WHERE C.Cobrador = ? ) "
    End If
    
    If objCobrancaSel.iIgnoraJaEnviados = MARCADO Then
        sWhere = sWhere & "AND P.NumIntDoc NOT IN (SELECT E.NumIntDoc FROM EmailsEnviados As E, CobrancaEmailPadrao AS M WHERE E.TipoDoc  = 1 AND E.NumIntDocModelo = M.NumIntDoc AND M.Tipo = " & CStr(objCobrancaSel.iTipoTela) & ") "
    End If
    
    sOrderBy = "ORDER BY T.NumTitulo, P.DataVencimentoReal "
    
    sSQL = sSQL & sWhere & sOrderBy

    CobrancaPorEmail_ParcelasEmAtraso_PreparaSQL = SUCESSO

    Exit Function

Erro_CobrancaPorEmail_ParcelasEmAtraso_PreparaSQL:

    CobrancaPorEmail_ParcelasEmAtraso_PreparaSQL = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 185975)

    End Select


    Exit Function

End Function

Private Function CobrancaPorEmail_ParcelasEmAtraso_PreparaInt(ByVal lComando As Long, vlNumIntDoc As Variant, ByVal vdtDataAte As Variant, ByVal vdtDataDe As Variant, ByVal vlClienteAte As Variant, ByVal vlClienteDe As Variant, ByVal vdSaldoAte As Variant, ByVal vdSaldoDe As Variant, ByVal vlTituloAte As Variant, ByVal vlTituloDe As Variant, ByVal vsTipo As Variant, ByVal viStatus1 As Variant, ByVal viStatus2 As Variant, ByVal sSQL As String, ByVal vsCategoria As Variant, ByVal vsCategoriaDe As Variant, ByVal vsCategoriaAte As Variant, ByVal vsCobrador As Variant, ByVal viCobrador As Variant, ByVal vlNumBordero As Variant) As Long
'Passa as variáveis de retorno e filtro do SELECT que monta os dados do Grid
 
Dim lErro As Long
Dim viFilialEmpresa As Variant

On Error GoTo Erro_CobrancaPorEmail_ParcelasEmAtraso_PreparaInt
 
    lErro = Comando_PrepararInt(lComando, sSQL)
    If (lErro <> AD_SQL_SUCESSO) Then gError 185976
                       
    lErro = Comando_BindVarInt(lComando, vlNumIntDoc)
    If (lErro <> AD_SQL_SUCESSO) Then gError 185977

    lErro = Comando_BindVarInt(lComando, viStatus1)
    If (lErro <> AD_SQL_SUCESSO) Then gError 185978

    lErro = Comando_BindVarInt(lComando, viStatus2)
    If (lErro <> AD_SQL_SUCESSO) Then gError 185979

    lErro = Comando_BindVarInt(lComando, vdtDataDe)
    If (lErro <> AD_SQL_SUCESSO) Then gError 185980

    lErro = Comando_BindVarInt(lComando, vdtDataAte)
    If (lErro <> AD_SQL_SUCESSO) Then gError 185981
   
    If gobjCR.iFilialCentralizadora <> giFilialEmpresa And giFilialEmpresa <> EMPRESA_TODA Then
        viFilialEmpresa = giFilialEmpresa
        lErro = Comando_BindVarInt(lComando, viFilialEmpresa)
        If (lErro <> AD_SQL_SUCESSO) Then gError 185982
    End If
    If vdSaldoAte <> 0 Then
        lErro = Comando_BindVarInt(lComando, vdSaldoAte)
        If (lErro <> AD_SQL_SUCESSO) Then gError 185982
    End If
    If vdSaldoDe <> 0 Then
        lErro = Comando_BindVarInt(lComando, vdSaldoDe)
        If (lErro <> AD_SQL_SUCESSO) Then gError 185983
    End If
    If vlClienteAte <> 0 Then
        lErro = Comando_BindVarInt(lComando, vlClienteAte)
        If (lErro <> AD_SQL_SUCESSO) Then gError 185984
    End If
    If vlClienteDe <> 0 Then
        lErro = Comando_BindVarInt(lComando, vlClienteDe)
        If (lErro <> AD_SQL_SUCESSO) Then gError 185985
    End If
    If vlTituloAte <> 0 Then
        lErro = Comando_BindVarInt(lComando, vlTituloAte)
        If (lErro <> AD_SQL_SUCESSO) Then gError 185986
    End If
    If vlTituloDe <> 0 Then
        lErro = Comando_BindVarInt(lComando, vlTituloDe)
        If (lErro <> AD_SQL_SUCESSO) Then gError 185987
    End If
    If Len(Trim(vsTipo)) <> 0 Then
        lErro = Comando_BindVarInt(lComando, vsTipo)
        If (lErro <> AD_SQL_SUCESSO) Then gError 185988
    End If
    If viCobrador <> 0 Then
        lErro = Comando_BindVarInt(lComando, viCobrador)
        If (lErro <> AD_SQL_SUCESSO) Then gError 185987
    End If
    If vlNumBordero <> 0 Then
        lErro = Comando_BindVarInt(lComando, vlNumBordero)
        If (lErro <> AD_SQL_SUCESSO) Then gError 185987
    End If
    
    If Len(Trim(vsCategoria)) > 0 Then
        lErro = Comando_BindVarInt(lComando, vsCategoria)
        If (lErro <> AD_SQL_SUCESSO) Then gError 185988

        If Len(Trim(vsCategoriaDe)) > 0 Then
            lErro = Comando_BindVarInt(lComando, vsCategoriaDe)
            If (lErro <> AD_SQL_SUCESSO) Then gError 185988
        End If
        If Len(Trim(vsCategoriaAte)) > 0 Then
            lErro = Comando_BindVarInt(lComando, vsCategoriaAte)
            If (lErro <> AD_SQL_SUCESSO) Then gError 185988
        End If
    End If
    If Len(Trim(vsCobrador)) <> 0 Then
        lErro = Comando_BindVarInt(lComando, vsCobrador)
        If (lErro <> AD_SQL_SUCESSO) Then gError 185988
    End If
     
    lErro = Comando_ExecutarInt(lComando)
    If (lErro <> AD_SQL_SUCESSO) Then gError 185989
 
   CobrancaPorEmail_ParcelasEmAtraso_PreparaInt = SUCESSO
 
    Exit Function
 
Erro_CobrancaPorEmail_ParcelasEmAtraso_PreparaInt:
 
    CobrancaPorEmail_ParcelasEmAtraso_PreparaInt = gErr
 
    Select Case gErr
 
        Case 185976 To 185989
            Call Rotina_Erro(vbOKOnly, "ERRO_PREPARACAO_COMANDO_SQL", gErr, sSQL)
 
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 185990)
 
    End Select
 
    Exit Function
 
End Function

Public Function CobrancaPorEmail_ParcelasBaixadas_Le(ByVal objCobrancaSel As ClassCobrancaPorEmailSel) As Long

Dim lErro As Long
Dim lComando As Long
Dim sSQL As String
Dim lNumIntDocParcela As Long
Dim objParcelaRec As ClassParcelaReceber
Dim dtDataIni As Date
Dim dtDataFim As Date
Dim dtDataUltimaBaixa As Date

On Error GoTo Erro_CobrancaPorEmail_ParcelasBaixadas_Le

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 185991
    
    Call CobrancaPorEmail_ParcelasBaixadas_PreparaSQL(objCobrancaSel, sSQL)

    lErro = CobrancaPorEmail_ParcelasBaixadas_PreparaInt(lComando, lNumIntDocParcela, dtDataUltimaBaixa, _
                        objCobrancaSel.dtDataBaixaAte, objCobrancaSel.dtDataBaixaDe, _
                        objCobrancaSel.lClienteAte, objCobrancaSel.lClienteDe, _
                        objCobrancaSel.lTituloAte, objCobrancaSel.lTituloDe, objCobrancaSel.sTipo, STATUS_EXCLUIDO, _
                        sSQL, objCobrancaSel.sCategoria, objCobrancaSel.sCategoriaDe, objCobrancaSel.sCategoriaAte)
    If lErro <> SUCESSO Then gError 185992

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 185993
    
    Do While lErro <> AD_SQL_SEM_DADOS
    
        Set objParcelaRec = New ClassParcelaReceber
    
        objParcelaRec.lNumIntDoc = lNumIntDocParcela
    
        lErro = CF("ParcelaReceber_Le", objParcelaRec)
        If lErro <> SUCESSO And lErro <> 19147 Then gError 185994
        
        If lErro <> SUCESSO Then
        
            lErro = CF("ParcelaReceber_Baixada_Le", objParcelaRec)
            If lErro <> SUCESSO And lErro <> 58559 Then gError 185994
        
        End If
    
        objParcelaRec.dtDataUltimaBaixa = dtDataUltimaBaixa
    
        objCobrancaSel.colParcelas.Add objParcelaRec
    
        'Busca Próximo
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 185995
    
    Loop
    
    'Fecha Comando
    Call Comando_Fechar(lComando)

    CobrancaPorEmail_ParcelasBaixadas_Le = SUCESSO

    Exit Function

Erro_CobrancaPorEmail_ParcelasBaixadas_Le:

    CobrancaPorEmail_ParcelasBaixadas_Le = gErr

    Select Case gErr

        Case 185991
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 185992, 185994

        Case 185993, 185995
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELASREC", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 185996)

    End Select
    
    'Fecha Comando
    Call Comando_Fechar(lComando)


    Exit Function

End Function

Private Function CobrancaPorEmail_ParcelasBaixadas_PreparaSQL(ByVal objCobrancaSel As ClassCobrancaPorEmailSel, sSQL As String) As Long

Dim lErro As Long
Dim sOrderBy As String
Dim sWhere As String
Dim sSubWhere As String

On Error GoTo Erro_CobrancaPorEmail_ParcelasBaixadas_PreparaSQL

    sSQL = "SELECT DISTINCT P.NumIntDoc, PB.DataBaixa FROM ParcelasRecTodas P, TitulosRecTodos T, BaixasParcRec as BP, BaixasRec as B, ParcelasRecDataBaixa AS PB "

    sWhere = "WHERE P.Status <> ? AND P.NumIntTitulo = T.NumIntDoc AND BP.NumIntParcela = P. NumIntDoc AND P.Saldo = 0 AND BP.NumIntBaixa = B.NumIntBaixa AND PB.NumIntDoc = P.NumIntDoc "

    If gobjCR.iFilialCentralizadora <> giFilialEmpresa And giFilialEmpresa <> EMPRESA_TODA Then
        sWhere = sWhere & " AND T.FilialEmpresa = ? "
    End If
    
    If objCobrancaSel.dtDataBaixaAte <> DATA_NULA Then
        sWhere = sWhere & "AND PB.DataBaixa <= ? "
    End If
    
    If objCobrancaSel.dtDataBaixaDe <> DATA_NULA Then
        sWhere = sWhere & "AND PB.DataBaixa >= ? "
    End If
   
    If objCobrancaSel.lClienteAte <> 0 Then
        sWhere = sWhere & "AND T.Cliente <= ? "
    End If
    
    If objCobrancaSel.lClienteDe <> 0 Then
        sWhere = sWhere & "AND T.Cliente >= ? "
    End If
    
    If objCobrancaSel.lTituloAte <> 0 Then
        sWhere = sWhere & "AND T.NumTitulo <= ? "
    End If
    
    If objCobrancaSel.lTituloDe <> 0 Then
        sWhere = sWhere & "AND T.NumTitulo >= ? "
    End If

    If Len(Trim(objCobrancaSel.sTipo)) <> 0 Then
        sWhere = sWhere & "AND T.SiglaDocumento = ? "
    End If
    
    If Len(Trim(objCobrancaSel.sCategoria)) > 0 Then
        If Len(Trim(objCobrancaSel.sCategoriaDe)) > 0 Then
            sSubWhere = sSubWhere & "AND F.Item >= ? "
        End If
        If Len(Trim(objCobrancaSel.sCategoriaAte)) > 0 Then
            sSubWhere = sSubWhere & "AND F.Item <= ? "
        End If
        sWhere = sWhere & " AND EXISTS ( SELECT F.Cliente FROM FilialClienteCategorias AS F WHERE T.Cliente= F.Cliente AND T.Filial = F.Filial AND " & _
        "F.Categoria = ? " & sSubWhere & ") "
    End If
    
    If objCobrancaSel.iIgnoraJaEnviados = MARCADO Then
        sWhere = sWhere & "AND P.NumIntDoc NOT IN (SELECT E.NumIntDoc FROM EmailsEnviados As E, CobrancaEmailPadrao AS M WHERE E.TipoDoc  = 1 AND E.NumIntDocModelo = M.NumIntDoc AND M.Tipo = " & CStr(objCobrancaSel.iTipoTela) & ") "
    End If

    sOrderBy = "ORDER BY P.NumIntDoc "
    
    sSQL = sSQL & sWhere & sOrderBy

    CobrancaPorEmail_ParcelasBaixadas_PreparaSQL = SUCESSO

    Exit Function

Erro_CobrancaPorEmail_ParcelasBaixadas_PreparaSQL:

    CobrancaPorEmail_ParcelasBaixadas_PreparaSQL = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 185975)

    End Select


    Exit Function

End Function

Private Function CobrancaPorEmail_ParcelasBaixadas_PreparaInt(ByVal lComando As Long, vlNumIntDoc As Variant, vdtDataUltimaBaixa As Variant, ByVal vdtDataAte As Variant, ByVal vdtDataDe As Variant, ByVal vlClienteAte As Variant, ByVal vlClienteDe As Variant, ByVal vlTituloAte As Variant, ByVal vlTituloDe As Variant, ByVal vsTipo As Variant, ByVal viStatus1 As Variant, ByVal sSQL As String, ByVal vsCategoria As Variant, ByVal vsCategoriaDe As Variant, ByVal vsCategoriaAte As Variant) As Long
'Passa as variáveis de retorno e filtro do SELECT que monta os dados do Grid
 
Dim lErro As Long
Dim viFilialEmpresa As Variant
 
On Error GoTo Erro_CobrancaPorEmail_ParcelasBaixadas_PreparaInt
 
    lErro = Comando_PrepararInt(lComando, sSQL)
    If (lErro <> AD_SQL_SUCESSO) Then gError 185976
                       
    lErro = Comando_BindVarInt(lComando, vlNumIntDoc)
    If (lErro <> AD_SQL_SUCESSO) Then gError 185977

    lErro = Comando_BindVarInt(lComando, vdtDataUltimaBaixa)
    If (lErro <> AD_SQL_SUCESSO) Then gError 185977

    lErro = Comando_BindVarInt(lComando, viStatus1)
    If (lErro <> AD_SQL_SUCESSO) Then gError 185978
    
    If gobjCR.iFilialCentralizadora <> giFilialEmpresa And giFilialEmpresa <> EMPRESA_TODA Then
        viFilialEmpresa = giFilialEmpresa
        lErro = Comando_BindVarInt(lComando, viFilialEmpresa)
        If (lErro <> AD_SQL_SUCESSO) Then gError 185982
    End If

    If vdtDataAte <> DATA_NULA Then
        lErro = Comando_BindVarInt(lComando, vdtDataAte)
        If (lErro <> AD_SQL_SUCESSO) Then gError 185981
    End If
    
    If vdtDataDe <> DATA_NULA Then
        lErro = Comando_BindVarInt(lComando, vdtDataDe)
        If (lErro <> AD_SQL_SUCESSO) Then gError 185980
   End If
   
    If vlClienteAte <> 0 Then
        lErro = Comando_BindVarInt(lComando, vlClienteAte)
        If (lErro <> AD_SQL_SUCESSO) Then gError 185984
    End If
    If vlClienteDe <> 0 Then
        lErro = Comando_BindVarInt(lComando, vlClienteDe)
        If (lErro <> AD_SQL_SUCESSO) Then gError 185985
    End If
    If vlTituloAte <> 0 Then
        lErro = Comando_BindVarInt(lComando, vlTituloAte)
        If (lErro <> AD_SQL_SUCESSO) Then gError 185986
    End If
    If vlTituloDe <> 0 Then
        lErro = Comando_BindVarInt(lComando, vlTituloDe)
        If (lErro <> AD_SQL_SUCESSO) Then gError 185987
    End If
    If Len(Trim(vsTipo)) <> 0 Then
        lErro = Comando_BindVarInt(lComando, vsTipo)
        If (lErro <> AD_SQL_SUCESSO) Then gError 185988
    End If
    
    If Len(Trim(vsCategoria)) > 0 Then
        lErro = Comando_BindVarInt(lComando, vsCategoria)
        If (lErro <> AD_SQL_SUCESSO) Then gError 185988

        If Len(Trim(vsCategoriaDe)) > 0 Then
            lErro = Comando_BindVarInt(lComando, vsCategoriaDe)
            If (lErro <> AD_SQL_SUCESSO) Then gError 185988
        End If
        If Len(Trim(vsCategoriaAte)) > 0 Then
            lErro = Comando_BindVarInt(lComando, vsCategoriaAte)
            If (lErro <> AD_SQL_SUCESSO) Then gError 185988
        End If
    End If
     
    lErro = Comando_ExecutarInt(lComando)
    If (lErro <> AD_SQL_SUCESSO) Then gError 185989
 
   CobrancaPorEmail_ParcelasBaixadas_PreparaInt = SUCESSO
 
    Exit Function
 
Erro_CobrancaPorEmail_ParcelasBaixadas_PreparaInt:
 
    CobrancaPorEmail_ParcelasBaixadas_PreparaInt = gErr
 
    Select Case gErr
 
        Case 185976 To 185989
            Call Rotina_Erro(vbOKOnly, "ERRO_PREPARACAO_COMANDO_SQL", gErr, sSQL)
 
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 185990)
 
    End Select
 
    Exit Function
 
End Function

Function MnemonicoCobrEmail_Le(ByVal colMnemonico As Collection, Optional ByVal iTipo As Integer = 0) As Long
'retorna os mnemonicos

Dim lComando As Long
Dim tMnemonicoCobrEmail As typeMnemonicoCobrEmail
Dim lErro As Long
Dim objMnemonico As ClassMnemonicoCobrEmail
Dim sTipo As String

On Error GoTo Erro_MnemonicoCobrEmail_Le

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 187109
    
    tMnemonicoCobrEmail.sMnemonico = String(STRING_MNEMONICOCTB_MNEMONICO, 0)
    tMnemonicoCobrEmail.sNomeGrid = String(STRING_NOME_CONTROLE, 0)
    tMnemonicoCobrEmail.sMnemonicoCombo = String(STRING_MNEMONICOCTB_MNEMONICOCOMBO, 0)
    tMnemonicoCobrEmail.sMnemonicoDesc = String(STRING_MNEMONICOCTB_MNEMONICODESC, 0)
    
    'seleciona os mnemonicos
    If iTipo = 0 Then
        lErro = Comando_Executar(lComando, "SELECT Mnemonico, Tipo, NumParam, Param1, Param2, Param3, NomeGrid, MnemonicoCombo, MnemonicoDesc FROM MnemonicoCobrEmail", _
        tMnemonicoCobrEmail.sMnemonico, tMnemonicoCobrEmail.iTipo, tMnemonicoCobrEmail.iNumParam, tMnemonicoCobrEmail.iParam1, tMnemonicoCobrEmail.iParam2, tMnemonicoCobrEmail.iParam3, tMnemonicoCobrEmail.sNomeGrid, tMnemonicoCobrEmail.sMnemonicoCombo, tMnemonicoCobrEmail.sMnemonicoDesc)
    Else
        sTipo = String(iTipo - 1, "_") & "1%"
        lErro = Comando_Executar(lComando, "SELECT Mnemonico, Tipo, NumParam, Param1, Param2, Param3, NomeGrid, MnemonicoCombo, MnemonicoDesc FROM MnemonicoCobrEmail WHERE TipoTela LIKE ?", _
        tMnemonicoCobrEmail.sMnemonico, tMnemonicoCobrEmail.iTipo, tMnemonicoCobrEmail.iNumParam, tMnemonicoCobrEmail.iParam1, tMnemonicoCobrEmail.iParam2, tMnemonicoCobrEmail.iParam3, tMnemonicoCobrEmail.sNomeGrid, tMnemonicoCobrEmail.sMnemonicoCombo, tMnemonicoCobrEmail.sMnemonicoDesc, sTipo)
    End If
    If lErro <> AD_SQL_SUCESSO Then gError 187110
    
    'le o primeiro mnemonico
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 187111
    
    Do While lErro = AD_SQL_SUCESSO
    
        Set objMnemonico = New ClassMnemonicoCobrEmail
    
        objMnemonico.sMnemonico = tMnemonicoCobrEmail.sMnemonico
        objMnemonico.iTipo = tMnemonicoCobrEmail.iTipo
        objMnemonico.iNumParam = tMnemonicoCobrEmail.iNumParam
        objMnemonico.iParam1 = tMnemonicoCobrEmail.iParam1
        objMnemonico.iParam2 = tMnemonicoCobrEmail.iParam2
        objMnemonico.iParam3 = tMnemonicoCobrEmail.iParam3
        objMnemonico.sGrid = tMnemonicoCobrEmail.sNomeGrid
        objMnemonico.sMnemonicoCombo = tMnemonicoCobrEmail.sMnemonicoCombo
        objMnemonico.sMnemonicoDesc = tMnemonicoCobrEmail.sMnemonicoDesc
        
        colMnemonico.Add objMnemonico
        
        'le o proximo mnemonico
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 187112
        
    Loop
    
    Call Comando_Fechar(lComando)
    
    MnemonicoCobrEmail_Le = SUCESSO

    Exit Function

Erro_MnemonicoCobrEmail_Le:

    MnemonicoCobrEmail_Le = gErr
    
    Select Case gErr
    
        Case 187109
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 187110 To 187112
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MNEMONICOCOBREMAIL", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 187073)
        
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function
    
End Function

Function MnemonicoCobrEmail_Le_Mnemonico(ByVal objMnemonico As ClassMnemonicoCobrEmail, Optional ByVal iTipo As Integer = 0) As Long
'retorna o mnemonico em questao

Dim lComando As Long
Dim tMnemonicoCobrEmail As typeMnemonicoCobrEmail
Dim lErro As Long
Dim sTipo As String

On Error GoTo Erro_MnemonicoCobrEmail_Le_Mnemonico

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 187113
    
    tMnemonicoCobrEmail.sNomeGrid = String(STRING_NOME_CONTROLE, 0)
    tMnemonicoCobrEmail.sMnemonicoCombo = String(STRING_MNEMONICOCTB_MNEMONICOCOMBO, 0)
    tMnemonicoCobrEmail.sMnemonicoDesc = String(STRING_MNEMONICOCTB_MNEMONICODESC, 0)
    
    'seleciona os mnemonicos do Modulo/Transacao passado como parametro
    If iTipo = 0 Then
        lErro = Comando_Executar(lComando, "SELECT Tipo, NumParam, Param1, Param2, Param3, NomeGrid, MnemonicoCombo, MnemonicoDesc FROM MnemonicoCobrEmail WHERE MnemonicoCombo=?", _
        tMnemonicoCobrEmail.iTipo, tMnemonicoCobrEmail.iNumParam, tMnemonicoCobrEmail.iParam1, tMnemonicoCobrEmail.iParam2, tMnemonicoCobrEmail.iParam3, tMnemonicoCobrEmail.sNomeGrid, tMnemonicoCobrEmail.sMnemonicoCombo, tMnemonicoCobrEmail.sMnemonicoDesc, objMnemonico.sMnemonicoCombo)
    Else
        sTipo = String(iTipo - 1, "_") & "1%"
        lErro = Comando_Executar(lComando, "SELECT Tipo, NumParam, Param1, Param2, Param3, NomeGrid, MnemonicoCombo, MnemonicoDesc FROM MnemonicoCobrEmail WHERE MnemonicoCombo=? AND TipoTela LIKE ?", _
        tMnemonicoCobrEmail.iTipo, tMnemonicoCobrEmail.iNumParam, tMnemonicoCobrEmail.iParam1, tMnemonicoCobrEmail.iParam2, tMnemonicoCobrEmail.iParam3, tMnemonicoCobrEmail.sNomeGrid, tMnemonicoCobrEmail.sMnemonicoCombo, tMnemonicoCobrEmail.sMnemonicoDesc, objMnemonico.sMnemonicoCombo, sTipo)
    End If
    If lErro <> AD_SQL_SUCESSO Then gError 187114
    
    'le o primeiro mnemonico
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 187115
    
    If lErro = AD_SQL_SEM_DADOS Then gError 187116
    
    objMnemonico.iTipo = tMnemonicoCobrEmail.iTipo
    objMnemonico.iNumParam = tMnemonicoCobrEmail.iNumParam
    objMnemonico.iParam1 = tMnemonicoCobrEmail.iParam1
    objMnemonico.iParam2 = tMnemonicoCobrEmail.iParam2
    objMnemonico.iParam3 = tMnemonicoCobrEmail.iParam3
    objMnemonico.sGrid = tMnemonicoCobrEmail.sNomeGrid
    objMnemonico.sMnemonicoCombo = tMnemonicoCobrEmail.sMnemonicoCombo
    objMnemonico.sMnemonicoDesc = tMnemonicoCobrEmail.sMnemonicoDesc
        
    Call Comando_Fechar(lComando)
    
    MnemonicoCobrEmail_Le_Mnemonico = SUCESSO

    Exit Function

Erro_MnemonicoCobrEmail_Le_Mnemonico:

    MnemonicoCobrEmail_Le_Mnemonico = gErr
    
    Select Case gErr
    
        Case 187113
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 187114, 187115
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MNEMONICOCOBREMAIL1", gErr, objMnemonico.sMnemonico)
            
        Case 187116
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 187098)
        
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function
    
End Function

Function ChequeDet_Le(ByVal objChequeDet As ClassChequeDet) As Long

Dim lComando As Long
Dim lErro As Long
Dim lNumMovto As Long, sEmNomeDeQuem As String, sObservacao As String, sUsuario As String

On Error GoTo Erro_ChequeDet_Le

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 184206
    
    sEmNomeDeQuem = String(STRING_FORNECEDOR_RAZAO_SOC, 0)
    sObservacao = String(255, 0)
    sUsuario = String(STRING_USUARIO_CODIGO, 0)
    
    lErro = Comando_Executar(lComando, "SELECT EmNomeDeQuem, Observacao, Usuario FROM ChequesDet WHERE NumMovto = ?", _
        sEmNomeDeQuem, sObservacao, sUsuario, objChequeDet.lNumMovto)
    If lErro <> AD_SQL_SUCESSO Then gError 184207
    
    'le o primeiro
    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 184208
    
    If lErro = AD_SQL_SEM_DADOS Then gError 184209
    
    With objChequeDet
        .sEmNomeDeQuem = sEmNomeDeQuem
        .sUsuario = sUsuario
        .sObservacao = sObservacao
    End With
    
    Call Comando_Fechar(lComando)
    
    ChequeDet_Le = SUCESSO

    Exit Function

Erro_ChequeDet_Le:

    ChequeDet_Le = gErr
    
    Select Case gErr
    
        Case 184206
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 184207, 184208
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUEDET", gErr)
            
        Case 184209
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 187098)
        
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function
    
End Function

Function Aplicacoes_ObterRendPer(ByVal iFilialEmpresa As Integer, ByVal dtDataIni As Date, ByVal dtDataFim As Date, dRendimentosAplic As Double) As Long

Dim lComando As Long
Dim lErro As Long, dRendimentos As Double

On Error GoTo Erro_Aplicacoes_ObterRendPer

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 184210
    
    lErro = Comando_Executar(lComando, "SELECT SUM(Rendimentos) FROM Resgates, MovimentosContaCorrente WHERE MovimentosContaCorrente.FilialEmpresa = ? AND MovimentosContaCorrente.DataMovimento BETWEEN ? AND ? AND Resgates.NumMovto = MovimentosContaCorrente.NumMovto AND Resgates.Status = 1", _
        dRendimentos, iFilialEmpresa, dtDataIni, dtDataFim)
    If lErro <> AD_SQL_SUCESSO Then gError 184211
        
    'le o primeiro
    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 184212
        
    dRendimentosAplic = dRendimentos
        
    Call Comando_Fechar(lComando)
    
    Aplicacoes_ObterRendPer = SUCESSO
    
    Exit Function
    
Erro_Aplicacoes_ObterRendPer:

    Aplicacoes_ObterRendPer = gErr
    
    Select Case gErr
    
        Case 184210
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 184211, 184212
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_REND_APLIC", gErr)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 184213)
        
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function Aplicacao_Le_NumMovto(ByVal objAplicacao As ClassAplicacao) As Long
'le a Aplicacao a partir da chave(lCodigo) fornecida em objAplicacao. Devolve os dados em objAplicacao

Dim lComando1 As Long
Dim lErro As Long
Dim tAplicacao As typeAplicacao

On Error GoTo Erro_Aplicacao_Le_NumMovto

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 189334

    'Pega os dados da tabela Aplicacoes
    lErro = Comando_Executar(lComando1, "SELECT Codigo, Status, TipoAplicacao, NumMovto, SaldoAplicado, DataResgatePrevista, ValorResgatePrevisto, TaxaPrevista, ProxSeqResgate, DataAplicacao, ValorAplicado FROM Aplicacoes WHERE NumMovto = ?", _
       tAplicacao.lCodigo, tAplicacao.iStatus, tAplicacao.iTipoAplicacao, tAplicacao.lNumMovto, tAplicacao.dSaldoAplicado, tAplicacao.dtDataResgatePrevista, tAplicacao.dValorResgatePrevisto, tAplicacao.dTaxaPrevista, tAplicacao.iProxSeqResgate, tAplicacao.dtDataAplicacao, tAplicacao.dValorAplicado, objAplicacao.lNumMovto)
    If lErro <> AD_SQL_SUCESSO Then gError 189335

    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 189336

    If lErro = AD_SQL_SEM_DADOS Then gError ERRO_LEITURA_SEM_DADOS

    objAplicacao.lCodigo = tAplicacao.lCodigo
    objAplicacao.iStatus = tAplicacao.iStatus
    objAplicacao.iTipoAplicacao = tAplicacao.iTipoAplicacao
    objAplicacao.dSaldoAplicado = tAplicacao.dSaldoAplicado
    objAplicacao.dtDataResgatePrevista = tAplicacao.dtDataResgatePrevista
    objAplicacao.dValorResgatePrevisto = tAplicacao.dValorResgatePrevisto
    objAplicacao.dTaxaPrevista = tAplicacao.dTaxaPrevista
    objAplicacao.iProxSeqResgate = tAplicacao.iProxSeqResgate
    objAplicacao.dtDataAplicacao = tAplicacao.dtDataAplicacao
    objAplicacao.dValorAplicado = tAplicacao.dValorAplicado
    
    Call Comando_Fechar(lComando1)

    Aplicacao_Le_NumMovto = SUCESSO

Exit Function

Erro_Aplicacao_Le_NumMovto:

    Aplicacao_Le_NumMovto = gErr

    Select Case gErr

        Case 189334
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 189335, 189336
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_APLICACOES2", gErr)

        Case ERRO_LEITURA_SEM_DADOS

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 189338)

    End Select

    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Function Resgate_Le_NumMovto(ByVal objResgate As ClassResgate) As Long
'Le o resgate a partir da chave fornecida em objResgate. Devolve os dados em objResgate

Dim lComando1 As Long
Dim lErro As Long
Dim tResgate As typeResgate

On Error GoTo Erro_Resgate_Le_NumMovto

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 189340

    'Pega os dados da tabela Resgates
    lErro = Comando_Executar(lComando1, "SELECT SeqResgate, CodigoAplicacao, Status, NumMovto, ValorResgatado, Rendimentos, ValorIRRF, Descontos, SaldoAnterior FROM Resgates WHERE NumMovto = ?", _
    tResgate.iSeqResgate, tResgate.lCodigoAplicacao, tResgate.iStatus, tResgate.lNumMovto, tResgate.dValorResgatado, tResgate.dRendimentos, tResgate.dValorIRRF, tResgate.dDescontos, tResgate.dSaldoAnterior, objResgate.lNumMovto)
    If lErro <> AD_SQL_SUCESSO Then gError 189341

    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 189342

    If lErro = AD_SQL_SEM_DADOS Then gError ERRO_LEITURA_SEM_DADOS
    
    objResgate.iSeqResgate = tResgate.iSeqResgate
    objResgate.lCodigoAplicacao = tResgate.lCodigoAplicacao
    objResgate.iStatus = tResgate.iStatus
    objResgate.dValorResgatado = tResgate.dValorResgatado
    objResgate.dRendimentos = tResgate.dRendimentos
    objResgate.dValorIRRF = tResgate.dValorIRRF
    objResgate.dDescontos = tResgate.dDescontos
    objResgate.dSaldoAnterior = tResgate.dSaldoAnterior

    Call Comando_Fechar(lComando1)

    Resgate_Le_NumMovto = SUCESSO

Exit Function

Erro_Resgate_Le_NumMovto:

    Resgate_Le_NumMovto = gErr

    Select Case gErr

        Case 189340
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 189341, 189342
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RESGATES", gErr)

        Case ERRO_LEITURA_SEM_DADOS

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 189344)

    End Select

    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Function BaixaRec_Le_TitulosBaixados(ByVal lNumMovCta As Long, ByVal colTitRec As Collection) As Long
'Le o resgate a partir da chave fornecida em objResgate. Devolve os dados em objResgate

Dim lComando1 As Long
Dim lErro As Long
Dim lNumIntDoc As Long
Dim iParcela As Integer
Dim iBaixa As Integer
Dim objTitRec As ClassTituloReceber

On Error GoTo Erro_BaixaRec_Le_TitulosBaixados

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 189347

    'Pega os dados da tabela Resgates
    lErro = Comando_Executar(lComando1, "SELECT NumIntTitulo, NumParcela, Sequencial FROM BaixasRecConsulta WHERE NumMovCta = ?", lNumIntDoc, iParcela, iBaixa, lNumMovCta)
    If lErro <> AD_SQL_SUCESSO Then gError 189348

    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 189349

    Do While lErro <> AD_SQL_SEM_DADOS
    
        Set objTitRec = New ClassTituloReceber

        objTitRec.lNumIntDoc = lNumIntDoc
        
        lErro = CF("TituloReceber_Le", objTitRec, MARCADO)
        If lErro <> SUCESSO And lErro <> 26061 Then gError 189350
        
        If lErro <> SUCESSO Then
        
            lErro = CF("TituloReceberBaixado_Le", objTitRec)
            If lErro <> SUCESSO And lErro <> 56570 Then gError 189351
        
        End If

        objTitRec.iParcelaTela = iParcela
        objTitRec.iBaixaTela = iBaixa

        colTitRec.Add objTitRec
    
        lErro = Comando_BuscarProximo(lComando1)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 189352
    
    Loop

    Call Comando_Fechar(lComando1)

    BaixaRec_Le_TitulosBaixados = SUCESSO

Exit Function

Erro_BaixaRec_Le_TitulosBaixados:

    BaixaRec_Le_TitulosBaixados = gErr

    Select Case gErr

        Case 189347
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 189348, 189349, 189352
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BAIXAREC", gErr)

        Case 189350, 189351

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 189353)

    End Select

    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Function BaixaPag_Le_TitulosBaixados(ByVal lNumMovCta As Long, ByVal colTitRec As Collection) As Long
'Le o resgate a partir da chave fornecida em objResgate. Devolve os dados em objResgate

Dim lComando1 As Long
Dim lErro As Long
Dim lNumIntDoc As Long
Dim iParcela As Integer
Dim iBaixa As Integer
Dim objTitPag As ClassTituloPagar

On Error GoTo Erro_BaixaPag_Le_TitulosBaixados

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 189354

    'Pega os dados da tabela Resgates
    lErro = Comando_Executar(lComando1, "SELECT NumIntTitulo, NumParcela, Sequencial FROM BaixasPagConsulta WHERE NumMovCta = ?", lNumIntDoc, iParcela, iBaixa, lNumMovCta)
    If lErro <> AD_SQL_SUCESSO Then gError 189355

    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 189356

    Do While lErro <> AD_SQL_SEM_DADOS
    
        Set objTitPag = New ClassTituloPagar

        objTitPag.lNumIntDoc = lNumIntDoc
        
        lErro = CF("TituloPagar_Le", objTitPag, True)
        If lErro <> SUCESSO And lErro <> 18372 Then gError 189357
        
        If lErro <> SUCESSO Then
        
            lErro = CF("TituloPagarBaixado_Le", objTitPag)
            If lErro <> SUCESSO And lErro <> 56661 Then gError 189358
        
        End If

        objTitPag.iParcelaTela = iParcela
        objTitPag.iBaixaTela = iBaixa

        colTitRec.Add objTitPag
    
        lErro = Comando_BuscarProximo(lComando1)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 189359
    
    Loop

    Call Comando_Fechar(lComando1)

    BaixaPag_Le_TitulosBaixados = SUCESSO

Exit Function

Erro_BaixaPag_Le_TitulosBaixados:

    BaixaPag_Le_TitulosBaixados = gErr

    Select Case gErr

        Case 189354
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 189355, 189356, 189359
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BAIXAREC", gErr)

        Case 189357, 189358

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 189360)

    End Select

    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Function MovContaCorrente_ObterNumMovto(ByVal objMovContaCorrente As ClassMovContaCorrente) As Long
'obtem o NumMovto baseado nos campos codconta e seq

Dim lErro As Long, lComando As Long, lNumMovto As Long

On Error GoTo Erro_MovContaCorrente_ObterNumMovto
    
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 184438

    'Pega os dados da tabela Resgates
    lErro = Comando_Executar(lComando, "SELECT NumMovto FROM MovimentosContaCorrente WHERE CodConta = ? AND Sequencial = ?", _
        lNumMovto, objMovContaCorrente.iCodConta, objMovContaCorrente.lSequencial)
    If lErro <> AD_SQL_SUCESSO Then gError 184439

    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 184440
    
    If lErro <> AD_SQL_SUCESSO Then gError ERRO_LEITURA_SEM_DADOS
    
    objMovContaCorrente.lNumMovto = lNumMovto

    Call Comando_Fechar(lComando)
    
    MovContaCorrente_ObterNumMovto = SUCESSO
    
    Exit Function
    
Erro_MovContaCorrente_ObterNumMovto:

    MovContaCorrente_ObterNumMovto = gErr

    Select Case gErr

        Case 184438
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 184439, 184440
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVCCI_CTASEQ", gErr)
        
        Case ERRO_LEITURA_SEM_DADOS
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 184442)

    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function RegiaoVenda_Le_Customizado(ByVal objRegiaoVenda As ClassRegiaoVenda) As Long
    RegiaoVenda_Le_Customizado = SUCESSO
End Function

Function CCI_Rotativo_Total(dRotativo As Double) As Long
'IMPORTANTE: específica para classe ClassRelTes de apoio a execucao de relatorios
'Obtém o saldo inicial na data passada como parametro
'ATENCAO: se o lComando vier zerado, será aberto nesta funcao e ficará aberto.

Dim lErro As Long
Dim dtDataSaldoInicial As Date
Dim iIndice As Integer
Dim iAno As Integer
Dim iMes As Integer
Dim dSldIni1 As Double
Dim dSldIni2 As Double
Dim dSldIni3 As Double
Dim dSldIni4 As Double
Dim sSQL As String
Dim dtData1 As Date
Dim alComando(1 To 1) As Long

On Error GoTo Erro_CCI_Rotativo_Total

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 197815
    Next

    'obter o saldo inicial na implantacao da conta
    lErro = Comando_Executar(alComando(1), "SELECT SUM(Rotativo) FROM ContasCorrentesInternas", dRotativo)
    If lErro <> AD_SQL_SUCESSO Then gError 197816
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 197817
            
    'Executa o fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
            
    CCI_Rotativo_Total = SUCESSO

    Exit Function

Erro_CCI_Rotativo_Total:

    CCI_Rotativo_Total = gErr

    Select Case gErr

        Case 197815
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 197816, 197817
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONTASCORRENTESINTERNAS", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 197818)

    End Select

    'Executa o fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function
    
End Function

Public Function CobrancaPorEmail_NFsPag_Le(ByVal objCobrancaSel As ClassCobrancaPorEmailSel) As Long

Dim lErro As Long
Dim lComando As Long
Dim sSQL As String
Dim lNumIntDocNFPag As Long
Dim objNFsPag As ClassNFsPag

On Error GoTo Erro_CobrancaPorEmail_NFsPag_Le

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 185991
    
    Call CobrancaPorEmail_NFsPag_PreparaSQL(objCobrancaSel, sSQL)

    lErro = CobrancaPorEmail_NFsPag_PreparaInt(lComando, lNumIntDocNFPag, _
                        objCobrancaSel.dtDataEmissaoAte, objCobrancaSel.dtDataEmissaoDe, _
                        objCobrancaSel.dSaldoAte, objCobrancaSel.dSaldoDe, _
                        objCobrancaSel.lClienteAte, objCobrancaSel.lClienteDe, _
                        objCobrancaSel.lTituloAte, objCobrancaSel.lTituloDe, STATUS_BAIXADO, STATUS_EXCLUIDO, sSQL)
    If lErro <> SUCESSO Then gError 185992

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 185993
    
    Do While lErro <> AD_SQL_SEM_DADOS
    
        Set objNFsPag = New ClassNFsPag
    
        objNFsPag.lNumIntDoc = lNumIntDocNFPag
    
        lErro = CF("NFPag_Le_Todos2", objNFsPag, MARCADO)
        If lErro <> SUCESSO And lErro <> 18257 Then gError 185994
    
        objCobrancaSel.colParcelas.Add objNFsPag
    
        'Busca Próximo
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 185995
    
    Loop
    
    'Fecha Comando
    Call Comando_Fechar(lComando)

    CobrancaPorEmail_NFsPag_Le = SUCESSO

    Exit Function

Erro_CobrancaPorEmail_NFsPag_Le:

    CobrancaPorEmail_NFsPag_Le = gErr

    Select Case gErr

        Case 185991
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 185992, 185994

        Case 185993, 185995
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFSPAG", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 185996)

    End Select
    
    'Fecha Comando
    Call Comando_Fechar(lComando)


    Exit Function

End Function

Private Function CobrancaPorEmail_NFsPag_PreparaSQL(ByVal objCobrancaSel As ClassCobrancaPorEmailSel, sSQL As String) As Long

Dim lErro As Long
Dim sOrderBy As String
Dim sWhere As String

On Error GoTo Erro_CobrancaPorEmail_NFsPag_PreparaSQL

    sSQL = "SELECT NumIntDoc FROM NFsPag "

    sWhere = "WHERE Status <> ? AND Status <> ? AND ValorTotal > 0 AND NumIntTitPag = 0 "

    If gobjCP.iFilialCentralizadora <> giFilialEmpresa And giFilialEmpresa <> EMPRESA_TODA Then
        sWhere = sWhere & " AND FilialEmpresa = ? "
    End If
    
    If objCobrancaSel.dSaldoAte <> 0 Then
        sWhere = sWhere & "AND Valor <= ? "
    End If
    
    If objCobrancaSel.dSaldoDe <> 0 Then
        sWhere = sWhere & "AND Valor >= ? "
    End If
    
    If objCobrancaSel.lClienteAte <> 0 Then
        sWhere = sWhere & "AND Fornecedor <= ? "
    End If
    
    If objCobrancaSel.lClienteDe <> 0 Then
        sWhere = sWhere & "AND Fornecedor >= ? "
    End If
    
    If objCobrancaSel.lTituloAte <> 0 Then
        sWhere = sWhere & "AND NumNotaFiscal <= ? "
    End If
    
    If objCobrancaSel.lTituloDe <> 0 Then
        sWhere = sWhere & "AND NumNotaFiscal >= ? "
    End If
    
    If objCobrancaSel.dtDataEmissaoAte <> DATA_NULA Then
        sWhere = sWhere & "AND DataEmissao <= ? "
    End If
    
    If objCobrancaSel.dtDataEmissaoDe <> DATA_NULA Then
        sWhere = sWhere & "AND DataEmissao >= ? "
    End If

    If objCobrancaSel.iIgnoraJaEnviados = MARCADO Then
        sWhere = sWhere & "AND NumIntDoc NOT IN (SELECT E.NumIntDoc FROM EmailsEnviados As E, CobrancaEmailPadrao AS M WHERE E.TipoDoc  = 3 AND E.NumIntDocModelo = M.NumIntDoc AND M.Tipo = " & CStr(objCobrancaSel.iTipoTela) & ") "
    End If
       
    sOrderBy = "ORDER BY NumNotaFiscal, DataEmissao "
    
    sSQL = sSQL & sWhere & sOrderBy

    CobrancaPorEmail_NFsPag_PreparaSQL = SUCESSO

    Exit Function

Erro_CobrancaPorEmail_NFsPag_PreparaSQL:

    CobrancaPorEmail_NFsPag_PreparaSQL = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 185975)

    End Select


    Exit Function

End Function

Private Function CobrancaPorEmail_NFsPag_PreparaInt(ByVal lComando As Long, vlNumIntDoc As Variant, ByVal vdtDataAte As Variant, ByVal vdtDataDe As Variant, ByVal vlFornecedorAte As Variant, ByVal vlFornecedorDe As Variant, ByVal vdValorAte As Variant, ByVal vdValorDe As Variant, ByVal vlNumNFAte As Variant, ByVal vlNumNFDe As Variant, ByVal viStatus1 As Variant, ByVal viStatus2 As Variant, ByVal sSQL As String) As Long
'Passa as variáveis de retorno e filtro do SELECT que monta os dados do Grid
 
Dim lErro As Long
Dim viFilialEmpresa As Variant
 
On Error GoTo Erro_CobrancaPorEmail_NFsPag_PreparaInt
 
    lErro = Comando_PrepararInt(lComando, sSQL)
    If (lErro <> AD_SQL_SUCESSO) Then gError 185976
                       
    lErro = Comando_BindVarInt(lComando, vlNumIntDoc)
    If (lErro <> AD_SQL_SUCESSO) Then gError 185977

    lErro = Comando_BindVarInt(lComando, viStatus1)
    If (lErro <> AD_SQL_SUCESSO) Then gError 185978

    lErro = Comando_BindVarInt(lComando, viStatus2)
    If (lErro <> AD_SQL_SUCESSO) Then gError 185979

    If gobjCP.iFilialCentralizadora <> giFilialEmpresa And giFilialEmpresa <> EMPRESA_TODA Then
        viFilialEmpresa = giFilialEmpresa
        lErro = Comando_BindVarInt(lComando, viFilialEmpresa)
        If (lErro <> AD_SQL_SUCESSO) Then gError 185982
    End If
    If vdValorAte <> 0 Then
        lErro = Comando_BindVarInt(lComando, vdValorAte)
        If (lErro <> AD_SQL_SUCESSO) Then gError 185982
    End If
    If vdValorDe <> 0 Then
        lErro = Comando_BindVarInt(lComando, vdValorDe)
        If (lErro <> AD_SQL_SUCESSO) Then gError 185983
    End If
    If vlFornecedorAte <> 0 Then
        lErro = Comando_BindVarInt(lComando, vlFornecedorAte)
        If (lErro <> AD_SQL_SUCESSO) Then gError 185984
    End If
    If vlFornecedorDe <> 0 Then
        lErro = Comando_BindVarInt(lComando, vlFornecedorDe)
        If (lErro <> AD_SQL_SUCESSO) Then gError 185985
    End If
    If vlNumNFAte <> 0 Then
        lErro = Comando_BindVarInt(lComando, vlNumNFAte)
        If (lErro <> AD_SQL_SUCESSO) Then gError 185986
    End If
    If vlNumNFDe <> 0 Then
        lErro = Comando_BindVarInt(lComando, vlNumNFDe)
        If (lErro <> AD_SQL_SUCESSO) Then gError 185987
    End If
    If vdtDataAte <> DATA_NULA Then
        lErro = Comando_BindVarInt(lComando, vdtDataAte)
        If (lErro <> AD_SQL_SUCESSO) Then gError 185980
    End If
    If vdtDataDe <> DATA_NULA Then
        lErro = Comando_BindVarInt(lComando, vdtDataDe)
        If (lErro <> AD_SQL_SUCESSO) Then gError 185981
    End If
    
    lErro = Comando_ExecutarInt(lComando)
    If (lErro <> AD_SQL_SUCESSO) Then gError 185989
 
   CobrancaPorEmail_NFsPag_PreparaInt = SUCESSO
 
    Exit Function
 
Erro_CobrancaPorEmail_NFsPag_PreparaInt:
 
    CobrancaPorEmail_NFsPag_PreparaInt = gErr
 
    Select Case gErr
 
        Case 185976 To 185989
            Call Rotina_Erro(vbOKOnly, "ERRO_PREPARACAO_COMANDO_SQL", gErr, sSQL)
 
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 185990)
 
    End Select
 
    Exit Function
 
End Function

Public Function CobrancaPorEmail_ParcPagBaixados_Le(ByVal objCobrancaSel As ClassCobrancaPorEmailSel) As Long

Dim lErro As Long
Dim lComando As Long
Dim sSQL As String
Dim lNumIntDocParcela As Long
Dim objParcelaPag As ClassParcelaPagar
Dim dtDataIni As Date
Dim dtDataFim As Date
Dim dtDataUltimaBaixa As Date

On Error GoTo Erro_CobrancaPorEmail_ParcPagBaixados_Le

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 185991
    
    Call CobrancaPorEmail_ParcPagBaixados_PreparaSQL(objCobrancaSel, sSQL)

    lErro = CobrancaPorEmail_ParcPagBaixados_PreparaInt(lComando, lNumIntDocParcela, dtDataUltimaBaixa, _
                        objCobrancaSel.dtDataBaixaAte, objCobrancaSel.dtDataBaixaDe, _
                        objCobrancaSel.lClienteAte, objCobrancaSel.lClienteDe, _
                        objCobrancaSel.lTituloAte, objCobrancaSel.lTituloDe, objCobrancaSel.sTipo, STATUS_EXCLUIDO, _
                        sSQL)
    If lErro <> SUCESSO Then gError 185992

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 185993
    
    Do While lErro <> AD_SQL_SEM_DADOS
    
        Set objParcelaPag = New ClassParcelaPagar
    
        objParcelaPag.lNumIntDoc = lNumIntDocParcela
    
        lErro = CF("ParcelaPagar_Le", objParcelaPag)
        If lErro <> SUCESSO And lErro <> 60479 Then gError 185994
        
        If lErro <> SUCESSO Then
        
            lErro = CF("ParcelaPagarBaixada_Le", objParcelaPag)
            If lErro <> SUCESSO And lErro <> 123509 Then gError 185994
        
        End If
    
        objParcelaPag.dtDataUltimaBaixa = dtDataUltimaBaixa
    
        objCobrancaSel.colParcelas.Add objParcelaPag
    
        'Busca Próximo
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 185995
    
    Loop
    
    'Fecha Comando
    Call Comando_Fechar(lComando)

    CobrancaPorEmail_ParcPagBaixados_Le = SUCESSO

    Exit Function

Erro_CobrancaPorEmail_ParcPagBaixados_Le:

    CobrancaPorEmail_ParcPagBaixados_Le = gErr

    Select Case gErr

        Case 185991
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 185992, 185994

        Case 185993, 185995
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELASREC", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 185996)

    End Select
    
    'Fecha Comando
    Call Comando_Fechar(lComando)


    Exit Function

End Function

Private Function CobrancaPorEmail_ParcPagBaixados_PreparaSQL(ByVal objCobrancaSel As ClassCobrancaPorEmailSel, sSQL As String) As Long

Dim lErro As Long
Dim sOrderBy As String
Dim sWhere As String

On Error GoTo Erro_CobrancaPorEmail_ParcPagBaixados_PreparaSQL

    sSQL = "SELECT DISTINCT P.NumIntDoc, PB.DataBaixa FROM ParcelasPagTodas P, TitulosPagTodos T, BaixasParcPag as BP, BaixasPag as B, ParcelasPagDataBaixa AS PB "

    sWhere = "WHERE P.Status <> ? AND P.NumIntTitulo = T.NumIntDoc AND BP.NumIntParcela = P. NumIntDoc AND P.Saldo = 0 AND BP.NumIntBaixa = B.NumIntBaixa AND PB.NumIntDoc = P.NumIntDoc "
                    
    If gobjCP.iFilialCentralizadora <> giFilialEmpresa And giFilialEmpresa <> EMPRESA_TODA Then
        sWhere = sWhere & " AND T.FilialEmpresa = ? "
    End If
    
    If objCobrancaSel.dtDataBaixaAte <> DATA_NULA Then
        sWhere = sWhere & "AND PB.DataBaixa <= ? "
    End If
    
    If objCobrancaSel.dtDataBaixaDe <> DATA_NULA Then
        sWhere = sWhere & "AND PB.DataBaixa >= ? "
    End If
   
    If objCobrancaSel.lClienteAte <> 0 Then
        sWhere = sWhere & "AND T.Cliente <= ? "
    End If
    
    If objCobrancaSel.lClienteDe <> 0 Then
        sWhere = sWhere & "AND T.Cliente >= ? "
    End If
    
    If objCobrancaSel.lTituloAte <> 0 Then
        sWhere = sWhere & "AND T.NumTitulo <= ? "
    End If
    
    If objCobrancaSel.lTituloDe <> 0 Then
        sWhere = sWhere & "AND T.NumTitulo >= ? "
    End If

    If Len(Trim(objCobrancaSel.sTipo)) <> 0 Then
        sWhere = sWhere & "AND T.SiglaDocumento = ? "
    End If
    
    If objCobrancaSel.iIgnoraJaEnviados = MARCADO Then
        sWhere = sWhere & "AND P.NumIntDoc NOT IN (SELECT E.NumIntDoc FROM EmailsEnviados As E, CobrancaEmailPadrao AS M WHERE E.TipoDoc  = 2 AND E.NumIntDocModelo = M.NumIntDoc AND M.Tipo = " & CStr(objCobrancaSel.iTipoTela) & ") "
    End If

    sOrderBy = "ORDER BY P.NumIntDoc "
    
    sSQL = sSQL & sWhere & sOrderBy

    CobrancaPorEmail_ParcPagBaixados_PreparaSQL = SUCESSO

    Exit Function

Erro_CobrancaPorEmail_ParcPagBaixados_PreparaSQL:

    CobrancaPorEmail_ParcPagBaixados_PreparaSQL = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 185975)

    End Select


    Exit Function

End Function

Private Function CobrancaPorEmail_ParcPagBaixados_PreparaInt(ByVal lComando As Long, vlNumIntDoc As Variant, vdtDataUltimaBaixa As Variant, ByVal vdtDataAte As Variant, ByVal vdtDataDe As Variant, ByVal vlFornecedorAte As Variant, ByVal vlFornecedorDe As Variant, ByVal vlTituloAte As Variant, ByVal vlTituloDe As Variant, ByVal vsTipo As Variant, ByVal viStatus1 As Variant, ByVal sSQL As String) As Long
'Passa as variáveis de retorno e filtro do SELECT que monta os dados do Grid
 
Dim lErro As Long
Dim viFilialEmpresa As Variant
 
On Error GoTo Erro_CobrancaPorEmail_ParcPagBaixados_PreparaInt
 
    lErro = Comando_PrepararInt(lComando, sSQL)
    If (lErro <> AD_SQL_SUCESSO) Then gError 185976
                       
    lErro = Comando_BindVarInt(lComando, vlNumIntDoc)
    If (lErro <> AD_SQL_SUCESSO) Then gError 185977

    lErro = Comando_BindVarInt(lComando, vdtDataUltimaBaixa)
    If (lErro <> AD_SQL_SUCESSO) Then gError 185977

    lErro = Comando_BindVarInt(lComando, viStatus1)
    If (lErro <> AD_SQL_SUCESSO) Then gError 185978

    If gobjCP.iFilialCentralizadora <> giFilialEmpresa And giFilialEmpresa <> EMPRESA_TODA Then
        viFilialEmpresa = giFilialEmpresa
        lErro = Comando_BindVarInt(lComando, viFilialEmpresa)
        If (lErro <> AD_SQL_SUCESSO) Then gError 185982
    End If
    If vdtDataAte <> DATA_NULA Then
        lErro = Comando_BindVarInt(lComando, vdtDataAte)
        If (lErro <> AD_SQL_SUCESSO) Then gError 185981
    End If
    
    If vdtDataDe <> DATA_NULA Then
        lErro = Comando_BindVarInt(lComando, vdtDataDe)
        If (lErro <> AD_SQL_SUCESSO) Then gError 185980
   End If
   
    If vlFornecedorAte <> 0 Then
        lErro = Comando_BindVarInt(lComando, vlFornecedorAte)
        If (lErro <> AD_SQL_SUCESSO) Then gError 185984
    End If
    If vlFornecedorDe <> 0 Then
        lErro = Comando_BindVarInt(lComando, vlFornecedorDe)
        If (lErro <> AD_SQL_SUCESSO) Then gError 185985
    End If
    If vlTituloAte <> 0 Then
        lErro = Comando_BindVarInt(lComando, vlTituloAte)
        If (lErro <> AD_SQL_SUCESSO) Then gError 185986
    End If
    If vlTituloDe <> 0 Then
        lErro = Comando_BindVarInt(lComando, vlTituloDe)
        If (lErro <> AD_SQL_SUCESSO) Then gError 185987
    End If
    If Len(Trim(vsTipo)) <> 0 Then
        lErro = Comando_BindVarInt(lComando, vsTipo)
        If (lErro <> AD_SQL_SUCESSO) Then gError 185988
    End If
     
    lErro = Comando_ExecutarInt(lComando)
    If (lErro <> AD_SQL_SUCESSO) Then gError 185989
 
   CobrancaPorEmail_ParcPagBaixados_PreparaInt = SUCESSO
 
    Exit Function
 
Erro_CobrancaPorEmail_ParcPagBaixados_PreparaInt:
 
    CobrancaPorEmail_ParcPagBaixados_PreparaInt = gErr
 
    Select Case gErr
 
        Case 185976 To 185989
            Call Rotina_Erro(vbOKOnly, "ERRO_PREPARACAO_COMANDO_SQL", gErr, sSQL)
 
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 185990)
 
    End Select
 
    Exit Function
 
End Function

Function NfsPag_Le_FaturaPagar2(ByVal objTituloPagar As ClassTituloPagar, ByVal colNFPagVinculada As ColNFsPag) As Long
'Lê as Notas Fiscais vinculadas ao Título passado por parâmetro

Dim lErro As Long
Dim lComando As Long
Dim tNFPag As typeNFsPag, objNFsPag As ClassNFsPag

On Error GoTo Erro_NfsPag_Le_FaturaPagar2

    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 18614

    'Seleciona as NF's vinculadas ao Título passado
    lErro = Comando_Executar(lComando, "SELECT FilialEmpresa, Filial, NumIntDoc, NumNotaFiscal, DataEmissao, Status, DataVencimento, ValorTotal, ValorSeguro, ValorFrete, OutrasDespesas, ValorProdutos, ValorIRRF, ValorICMS, ValorICMSSubst, CreditoICMS, ValorIPI, CreditoIPI, PISRetido, ISSRetido, COFINSRetido, CSLLRetido, TaxaMoeda FROM NFsPag_Todas WHERE Fornecedor = ? AND NumIntTitPag = ? AND Status <> ? ORDER BY DataEmissao", tNFPag.iFilialEmpresa, tNFPag.iFilial, tNFPag.lNumIntDoc, tNFPag.lNumNotaFiscal, tNFPag.dtDataEmissao, tNFPag.iStatus, tNFPag.dtDataVencimento, tNFPag.dValorTotal, tNFPag.dValorSeguro, tNFPag.dValorFrete, tNFPag.dOutrasDespesas, tNFPag.dValorProdutos, tNFPag.dValorIRRF, tNFPag.dValorICMS, tNFPag.dValorICMSSubst, tNFPag.iCreditoICMS, tNFPag.dValorIPI, tNFPag.iCreditoIPI, tNFPag.dPISRetido, tNFPag.dISSRetido, tNFPag.dCOFINSRetido, tNFPag.dCSLLRetido, tNFPag.dTaxaMoeda, objTituloPagar.lFornecedor, objTituloPagar.lNumIntDoc, STATUS_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then Error 18620

    'Tenta ler
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 18622
    
    If lErro = AD_SQL_SEM_DADOS Then Error 26020

    'Loop de Notas Fiscais
    Do While lErro = AD_SQL_SUCESSO

        'Armazena NF em colNFPagVinculada
        With tNFPag
            Set objNFsPag = colNFPagVinculada.Add(.lNumIntDoc, .iFilialEmpresa, objTituloPagar.lFornecedor, .iFilial, .lNumNotaFiscal, .dtDataEmissao, .iStatus, objTituloPagar.lNumIntDoc, .dtDataVencimento, .dValorTotal, .dValorSeguro, .dValorFrete, .dOutrasDespesas, .dValorProdutos, .dValorIRRF, .dValorICMS, .dValorICMSSubst, .iCreditoICMS, .dValorIPI, .iCreditoIPI, .dPISRetido, .dCOFINSRetido, .dCSLLRetido)
            objNFsPag.dISSRetido = .dISSRetido
        End With

        'Busca a próxima NF vinculada
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 18621

    Loop

    'Fecha comando
    Call Comando_Fechar(lComando)

    NfsPag_Le_FaturaPagar2 = SUCESSO

    Exit Function

Erro_NfsPag_Le_FaturaPagar2:

    NfsPag_Le_FaturaPagar2 = gErr

    Select Case gErr

        Case 18614
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 18620, 18621, 18622
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFSPAG", gErr)

        Case 26020

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148598)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Public Function Fatura_Preenche_Cobranca_Cust(ByVal objGridParcelas As AdmGrid, ByVal objComboTipoCobr As Object, ByVal iLinha As Integer, ByVal iColuna As Integer, ByVal sNomeRedForn As String)
    Fatura_Preenche_Cobranca_Cust = SUCESSO
End Function

Public Function ContatoCli_Selecao_Le(ByVal objContatoCliSel As ClassContatoCliSel, ByVal colFiliais As Collection, ByVal colEnderecos As Collection, ByVal colClientesEst As Collection) As Long

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(1 To 3) As Long
Dim sSQL As String
Dim lCliente As Long
Dim iFilial As Integer
Dim objFilialCliente As ClassFilialCliente
Dim objEndereco As ClassEndereco
Dim objClienteEst As ClassFilialClienteEst
Dim dValorCompra As Double
Dim dtDataUltContato As Date
Dim dtDataPriCompra As Date
Dim dtDataUltCompra As Date
Dim lEndereco As Long

On Error GoTo Erro_ContatoCli_Selecao_Le

    'Executa a abertura dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 200003
    Next
    
    lErro = CF("ContatoCli_Selecao_PreparaSQL", objContatoCliSel, sSQL)
    If lErro <> SUCESSO Then gError 200004

    lErro = ContatoCli_Selecao_PreparaInt(alComando(1), sSQL, objContatoCliSel, objContatoCliSel.sRespCallCenter, objContatoCliSel.dtDataPCompDe, objContatoCliSel.dtDataPCompAte, objContatoCliSel.dtDataUCompDe, objContatoCliSel.dtDataUCompAte, objContatoCliSel.dtDataContDe, objContatoCliSel.dtDataContAte, lCliente, iFilial, dValorCompra, dtDataUltContato, dtDataPriCompra, dtDataUltCompra, objContatoCliSel.sCategoria, objContatoCliSel.sCategoriaDe, objContatoCliSel.sCategoriaAte, objContatoCliSel.dtDataPContDe, objContatoCliSel.dtDataPContAte, objContatoCliSel.dtDataNCompDe, objContatoCliSel.dtDataNCompAte, objContatoCliSel.iSoAtivos)
    If lErro <> SUCESSO Then gError 200005

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 200006

    'Enquanto existirem dados de acordo com o filtro passado
    Do While lErro <> AD_SQL_SEM_DADOS
    
        Set objFilialCliente = New ClassFilialCliente
        Set objEndereco = New ClassEndereco
        Set objClienteEst = New ClassFilialClienteEst
    
        objFilialCliente.lCodCliente = lCliente
        objFilialCliente.iCodFilial = iFilial
    
        lErro = CF("FilialCliente_Le", objFilialCliente, alComando(2))
        If lErro <> SUCESSO And lErro <> 12567 Then gError 200007
        
        lEndereco = objFilialCliente.lEndereco
        
        lErro = CF("ContatoCli_Selecao_Le_Endereco", objFilialCliente, lEndereco)
        If lErro <> SUCESSO Then gError 200192
        
        objEndereco.lCodigo = lEndereco
        
        'Le o Endereco de Principal
        lErro = CF("Endereco_Le", objEndereco, alComando(3))
        If lErro <> SUCESSO And lErro <> 12309 Then gError 200008
        
        objClienteEst.dtDataPrimeiraCompra = dtDataPriCompra
        objClienteEst.dtDataUltimaCompra = dtDataUltCompra
        objClienteEst.dtDataUltimoContato = dtDataUltContato
        objClienteEst.dValorAcumuladoCompras = dValorCompra
        
        If objContatoCliSel.iSoComEmailValido = DESMARCADO Or (InStr(1, objEndereco.sEmail, "@") <> 0 And InStr(1, objEndereco.sEmail, ".") <> 0) Then
            colFiliais.Add objFilialCliente
            colEnderecos.Add objEndereco
            colClientesEst.Add objClienteEst
        End If
            
        'Busca Próximo
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 200009
    
    Loop
        
    'Executa o fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    ContatoCli_Selecao_Le = SUCESSO
     
    Exit Function
    
Erro_ContatoCli_Selecao_Le:

    ContatoCli_Selecao_Le = gErr
     
    Select Case gErr
          
        Case 200003
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 200004, 200005, 200007, 200008, 200192
        
        Case 200006, 200009
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CLIENTES", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 200010)
     
    End Select
    
    'Executa o fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Public Function ContatoCli_Selecao_PreparaSQL(ByVal objContatoCliSel As ClassContatoCliSel, sSQL As String) As Long

Dim lErro As Long
Dim sWhere As String
Dim sOrderBy As String
Dim sSubWhere As String
Dim vValor As Variant

On Error GoTo Erro_ContatoCli_Selecao_PreparaSQL

    sSQL = "SELECT C.CodCliente, C.CodFilial, C.DataUltimaCompra, C.DataPrimeiraCompra, C.ValorTotalComprado, C.DataUltimoContato FROM ContatoCli_Selecao AS C "
    sWhere = "WHERE 1=1 "
    sOrderBy = "ORDER BY C.CodCliente, C.CodFilial "
                
    If objContatoCliSel.sRespCallCenter <> "" Then
        sWhere = sWhere & "AND C.RespCallCenter = ? "
    End If
    
    If objContatoCliSel.dtDataPCompDe <> DATA_NULA Then
        sWhere = sWhere & "AND C.DataPrimeiraCompra >= ? "
    End If
    
    If objContatoCliSel.dtDataPCompAte <> DATA_NULA Then
        sWhere = sWhere & "AND (C.DataPrimeiraCompra <= ? OR C.DataPrimeiraCompra IS NULL)"
    End If

    If objContatoCliSel.dtDataUCompDe <> DATA_NULA Then
        sWhere = sWhere & "AND C.DataUltimaCompra >= ? "
    End If
    
    If objContatoCliSel.dtDataUCompAte <> DATA_NULA Then
        sWhere = sWhere & "AND (C.DataUltimaCompra <= ? OR C.DataUltimaCompra IS NULL)"
    End If
    
    If objContatoCliSel.dtDataContDe <> DATA_NULA Then
        sWhere = sWhere & "AND C.DataUltimoContato >= ? "
    End If
    
    If objContatoCliSel.dtDataContAte <> DATA_NULA Then
        sWhere = sWhere & "AND (C.DataUltimoContato <= ? OR C.DataUltimoContato IS NULL) "
    End If
        
    sSubWhere = ""
    If Len(Trim(objContatoCliSel.sCategoria)) > 0 Then
        If Len(Trim(objContatoCliSel.sCategoriaDe)) > 0 Then
            sSubWhere = sSubWhere & "AND F.Item >= ? "
        End If
        If Len(Trim(objContatoCliSel.sCategoriaAte)) > 0 Then
            sSubWhere = sSubWhere & "AND F.Item <= ? "
        End If
        sWhere = sWhere & " AND EXISTS ( SELECT F.Cliente FROM FilialClienteCategorias AS F WHERE C.CodCliente= F.Cliente AND C.CodFilial = F.Filial AND " & _
        "F.Categoria = ? " & sSubWhere & ") "
    End If
    
    For Each vValor In objContatoCliSel.colTiposNaoConsiderar
        sWhere = sWhere & "AND C.TipoCliente <> ? "
    Next
    
    sSubWhere = ""
    If objContatoCliSel.dtDataPContDe <> DATA_NULA Then
        sSubWhere = sSubWhere & "AND R.DataProxCobr >= ? "
    End If
    
    If objContatoCliSel.dtDataPContAte <> DATA_NULA Then
        sSubWhere = sSubWhere & "AND R.DataProxCobr <= ? "
    End If
    
    If Len(Trim(sSubWhere)) > 0 Then
        sWhere = sWhere & "AND EXISTS (SELECT R.Codigo FROM RelacionamentoClientes AS R WHERE R.Cliente = C.CodCliente " & sSubWhere & " ) "
    End If
    
    sSubWhere = ""
    If objContatoCliSel.dtDataNCompDe <> DATA_NULA Then
        sSubWhere = sSubWhere & "AND U.Data >= ? "
    End If
    
    If objContatoCliSel.dtDataNCompAte <> DATA_NULA Then
        sSubWhere = sSubWhere & "AND U.Data <= ? "
    End If
    
    If Len(Trim(sSubWhere)) > 0 Then
        sWhere = sWhere & "AND NOT EXISTS (SELECT U.Data FROM ContatoCli_Compras AS U WHERE U.Cliente = C.CodCliente " & sSubWhere & " ) "
    End If
    
    If objContatoCliSel.iSoAtivos = MARCADO Then
        sWhere = sWhere & "AND C.Ativo = ?  "
    End If
    
    If objContatoCliSel.iIgnoraJaEnviados = MARCADO Then
        sWhere = sWhere & "AND C.CodCliente NOT IN (SELECT E.NumIntDoc FROM EmailsEnviados As E, CobrancaEmailPadrao AS M WHERE E.TipoDoc  = 5 AND E.NumIntDocModelo = M.NumIntDoc AND M.Codigo = ?) "
    End If
            
    sSQL = sSQL & sWhere & sOrderBy
    
    ContatoCli_Selecao_PreparaSQL = SUCESSO
     
    Exit Function
    
Erro_ContatoCli_Selecao_PreparaSQL:

    ContatoCli_Selecao_PreparaSQL = gErr
     
    Select Case gErr

        Case 200225

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 200011)
     
    End Select
     
    Exit Function

End Function

Private Function ContatoCli_Selecao_PreparaInt(ByVal lComando As Long, ByVal sSQL As String, ByVal objContatoCliSel As ClassContatoCliSel, ByVal vsRespCallCenter As Variant, ByVal vdtDataPCompDe As Variant, ByVal vdtDataPCompAte As Variant, ByVal vdtDataUCompDe As Variant, ByVal vdtDataUCompAte As Variant, ByVal vdtDataContDe As Variant, ByVal vdtDataContAte As Variant, vlCliente As Variant, viFilialCli As Variant, vdValorCompra As Variant, vdtDataUltContato As Variant, vdtDataPriCompra As Variant, vdtDataUltCompra As Variant, ByVal vsCategoria As Variant, ByVal vsCategoriaDe As Variant, ByVal vsCategoriaAte As Variant, ByVal vdtDataPContDe As Variant, ByVal vdtDataPContAte As Variant, ByVal vdtDataNCompDe As Variant, ByVal vdtDataNCompAte As Variant, ByVal viSoAtivos As Variant) As Long

Dim lErro As Long
Dim viStatus As Variant
Dim vValor As Variant
Dim iProx As Integer
Dim vaValor(1 To 100) As Variant
Dim vlModelo As Variant

On Error GoTo Erro_ContatoCli_Selecao_PreparaInt

    lErro = Comando_PrepararInt(lComando, sSQL)
    If (lErro <> AD_SQL_SUCESSO) Then gError 200012

    lErro = Comando_BindVarInt(lComando, vlCliente)
    If (lErro <> AD_SQL_SUCESSO) Then gError 200013

    lErro = Comando_BindVarInt(lComando, viFilialCli)
    If (lErro <> AD_SQL_SUCESSO) Then gError 200014
    
    lErro = Comando_BindVarInt(lComando, vdtDataUltCompra)
    If (lErro <> AD_SQL_SUCESSO) Then gError 200015
    
    lErro = Comando_BindVarInt(lComando, vdtDataPriCompra)
    If (lErro <> AD_SQL_SUCESSO) Then gError 200016
    
    lErro = Comando_BindVarInt(lComando, vdValorCompra)
    If (lErro <> AD_SQL_SUCESSO) Then gError 200017
    
    lErro = Comando_BindVarInt(lComando, vdtDataUltContato)
    If (lErro <> AD_SQL_SUCESSO) Then gError 200018
    
    If vsRespCallCenter <> "" Then
        lErro = Comando_BindVarInt(lComando, vsRespCallCenter)
        If (lErro <> AD_SQL_SUCESSO) Then gError 200019
    End If
    
    If vdtDataPCompDe <> DATA_NULA Then
        lErro = Comando_BindVarInt(lComando, vdtDataPCompDe)
        If (lErro <> AD_SQL_SUCESSO) Then gError 200020
    End If
    
    If vdtDataPCompAte <> DATA_NULA Then
        lErro = Comando_BindVarInt(lComando, vdtDataPCompAte)
        If (lErro <> AD_SQL_SUCESSO) Then gError 200021
    End If
    
    If vdtDataUCompDe <> DATA_NULA Then
        lErro = Comando_BindVarInt(lComando, vdtDataUCompDe)
        If (lErro <> AD_SQL_SUCESSO) Then gError 200022
    End If
    
    If vdtDataUCompAte <> DATA_NULA Then
        lErro = Comando_BindVarInt(lComando, vdtDataUCompAte)
        If (lErro <> AD_SQL_SUCESSO) Then gError 200023
    End If
    
    If vdtDataContDe <> DATA_NULA Then
        lErro = Comando_BindVarInt(lComando, vdtDataContDe)
        If (lErro <> AD_SQL_SUCESSO) Then gError 200024
    End If
    
    If vdtDataContAte <> DATA_NULA Then
        lErro = Comando_BindVarInt(lComando, vdtDataContAte)
        If (lErro <> AD_SQL_SUCESSO) Then gError 200025
    End If
    
    If Len(Trim(vsCategoria)) > 0 Then
        lErro = Comando_BindVarInt(lComando, vsCategoria)
        If (lErro <> AD_SQL_SUCESSO) Then gError 200026

        If Len(Trim(vsCategoriaDe)) > 0 Then
            lErro = Comando_BindVarInt(lComando, vsCategoriaDe)
            If (lErro <> AD_SQL_SUCESSO) Then gError 200027
        End If
        If Len(Trim(vsCategoriaAte)) > 0 Then
            lErro = Comando_BindVarInt(lComando, vsCategoriaAte)
            If (lErro <> AD_SQL_SUCESSO) Then gError 200028
        End If
    End If
    
    For Each vValor In objContatoCliSel.colTiposNaoConsiderar
        iProx = iProx + 1
        vaValor(iProx) = vValor
        lErro = Comando_BindVarInt(lComando, vaValor(iProx))
        If (lErro <> AD_SQL_SUCESSO) Then gError 200025
    Next
    
    If vdtDataPContDe <> DATA_NULA Then
        lErro = Comando_BindVarInt(lComando, vdtDataPContDe)
        If (lErro <> AD_SQL_SUCESSO) Then gError 200024
    End If
    
    If vdtDataPContAte <> DATA_NULA Then
        lErro = Comando_BindVarInt(lComando, vdtDataPContAte)
        If (lErro <> AD_SQL_SUCESSO) Then gError 200025
    End If
       
    If vdtDataNCompDe <> DATA_NULA Then
        lErro = Comando_BindVarInt(lComando, vdtDataNCompDe)
        If (lErro <> AD_SQL_SUCESSO) Then gError 200024
    End If
    
    If vdtDataNCompAte <> DATA_NULA Then
        lErro = Comando_BindVarInt(lComando, vdtDataNCompAte)
        If (lErro <> AD_SQL_SUCESSO) Then gError 200025
    End If
    
    If viSoAtivos = MARCADO Then
        lErro = Comando_BindVarInt(lComando, viSoAtivos)
        If (lErro <> AD_SQL_SUCESSO) Then gError 200025
    End If
    
    If objContatoCliSel.iIgnoraJaEnviados = MARCADO Then
        vlModelo = objContatoCliSel.lModeloForcado
        lErro = Comando_BindVarInt(lComando, vlModelo)
        If (lErro <> AD_SQL_SUCESSO) Then gError 200025
    End If
    
    lErro = Comando_ExecutarInt(lComando)
    If (lErro <> AD_SQL_SUCESSO) Then gError 200029
    
    ContatoCli_Selecao_PreparaInt = SUCESSO
     
    Exit Function
    
Erro_ContatoCli_Selecao_PreparaInt:

    ContatoCli_Selecao_PreparaInt = gErr
     
    Select Case gErr

        Case 200012 To 200029
            Call Rotina_Erro(vbOKOnly, "ERRO_PREPARACAO_COMANDO_SQL", gErr, sSQL)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 200030)
     
    End Select
     
    Exit Function

End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'LEITURA
Public Function ChequePrePag_Le(ByVal objChequePrePag As ClassChequePrePag) As Long

Dim lErro As Long
Dim lComando As Long
Dim tChequePrePag As typeChequePrePag

On Error GoTo Erro_ChequePrePag_Le

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 198850

    'Alocação de espaço no buffer
    tChequePrePag.sObservacao = String(STRING_OBSERVACAO_OBSERVACAO, 0)
    tChequePrePag.sFavorecido = String(STRING_FAVORECIDO, 0)

    'Le a tabelaChequePrePag
    If objChequePrePag.lNumIntDoc <> 0 Then
        lErro = Comando_Executar(lComando, "SELECT NumIntDoc, FilialEmpresa, ContaCorrente, Numero, DataEmissao, DataBomPara, " & _
                    "DataDeposito, Valor, Status, Observacao, Favorecido, Fornecedor, Filial FROM ChequePrePag WHERE NumIntDoc= ? ", _
                    tChequePrePag.lNumIntDoc, tChequePrePag.iFilialEmpresa, tChequePrePag.iContaCorrente, tChequePrePag.lNumero, _
                    tChequePrePag.dtDataEmissao, tChequePrePag.dtDataBomPara, tChequePrePag.dtDataDeposito, tChequePrePag.dValor, tChequePrePag.iStatus, _
                    tChequePrePag.sObservacao, tChequePrePag.sFavorecido, tChequePrePag.lFornecedor, tChequePrePag.iFilial, _
                    objChequePrePag.lNumIntDoc)
    Else
        lErro = Comando_Executar(lComando, "SELECT NumIntDoc, FilialEmpresa, ContaCorrente, Numero, DataEmissao, DataBomPara, " & _
                    "DataDeposito, Valor, Status, Observacao, Favorecido, Fornecedor, Filial FROM ChequePrePag WHERE Numero= ? AND ContaCorrente = ? AND DataEmissao = ? ", _
                    tChequePrePag.lNumIntDoc, tChequePrePag.iFilialEmpresa, tChequePrePag.iContaCorrente, tChequePrePag.lNumero, _
                    tChequePrePag.dtDataEmissao, tChequePrePag.dtDataBomPara, tChequePrePag.dtDataDeposito, tChequePrePag.dValor, tChequePrePag.iStatus, _
                    tChequePrePag.sObservacao, tChequePrePag.sFavorecido, tChequePrePag.lFornecedor, tChequePrePag.iFilial, _
                    objChequePrePag.lNumero, objChequePrePag.iContaCorrente, objChequePrePag.dtDataEmissao)
    End If
    If lErro <> AD_SQL_SUCESSO Then gError 198851

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 198852

    'Sem Dados
    If lErro = AD_SQL_SEM_DADOS Then gError ERRO_LEITURA_SEM_DADOS

    objChequePrePag.lNumIntDoc = tChequePrePag.lNumIntDoc
    objChequePrePag.iFilialEmpresa = tChequePrePag.iFilialEmpresa
    objChequePrePag.iContaCorrente = tChequePrePag.iContaCorrente
    objChequePrePag.lNumero = tChequePrePag.lNumero
    objChequePrePag.dtDataEmissao = tChequePrePag.dtDataEmissao
    objChequePrePag.dtDataBomPara = tChequePrePag.dtDataBomPara
    objChequePrePag.dtDataDeposito = tChequePrePag.dtDataDeposito
    objChequePrePag.dValor = tChequePrePag.dValor
    objChequePrePag.iStatus = tChequePrePag.iStatus
    objChequePrePag.sObservacao = tChequePrePag.sObservacao
    objChequePrePag.sFavorecido = tChequePrePag.sFavorecido
    objChequePrePag.lFornecedor = tChequePrePag.lFornecedor
    objChequePrePag.iFilial = tChequePrePag.iFilial
    
    lErro = ChequePrePagParc_Le(objChequePrePag)
    If lErro <> SUCESSO Then gError 198853

    'Fecha Comando
    Call Comando_Fechar(lComando)

    ChequePrePag_Le = SUCESSO

    Exit Function

Erro_ChequePrePag_Le:

    ChequePrePag_Le = gErr

    Select Case gErr

        Case 198850
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 198851, 198852
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUEPREPAG", gErr)
            
        Case 198853

        Case ERRO_LEITURA_SEM_DADOS 'Sem dados -> Tratado na rotina chamadora

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 198854)

    End Select

    'Fecha Comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'LEITURA
Public Function ChequePrePagParc_Le(ByVal objChequePrePag As ClassChequePrePag) As Long

Dim lErro As Long
Dim lComando As Long
Dim tChequePrePagParc As typeChequePrePagParc
Dim objChequePrePagParc As ClassChequePrePagParc

On Error GoTo Erro_ChequePrePagParc_Le

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 198855

    'Alocação de espaço no buffer

    'Le a tabelaChequePrePagParc
    lErro = Comando_Executar(lComando, "SELECT NumIntCheque, NumIntParcela, ValorPago, ValorBaixado, Juros, Multa, " & _
                "Desconto FROM ChequePrePagParc WHERE NumIntCheque= ? ", _
                tChequePrePagParc.lNumIntCheque, tChequePrePagParc.lNumIntParcela, tChequePrePagParc.dValorPago, tChequePrePagParc.dValorBaixado, _
                tChequePrePagParc.dJuros, tChequePrePagParc.dMulta, tChequePrePagParc.dDesconto, _
                objChequePrePag.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 198856

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 198857

    'Sem Dados
    Do While lErro <> AD_SQL_SEM_DADOS
    
        Set objChequePrePagParc = New ClassChequePrePagParc
    
        objChequePrePagParc.lNumIntCheque = tChequePrePagParc.lNumIntCheque
        objChequePrePagParc.lNumIntParcela = tChequePrePagParc.lNumIntParcela
        objChequePrePagParc.dValorPago = tChequePrePagParc.dValorPago
        objChequePrePagParc.dValorBaixado = tChequePrePagParc.dValorBaixado
        objChequePrePagParc.dValorJuros = tChequePrePagParc.dJuros
        objChequePrePagParc.dValorMulta = tChequePrePagParc.dMulta
        objChequePrePagParc.dValorDesconto = tChequePrePagParc.dDesconto
        
        objChequePrePag.colParcelas.Add objChequePrePagParc
    
        'Busca Próximo
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 198858
    
    Loop

    'Fecha Comando
    Call Comando_Fechar(lComando)

    ChequePrePagParc_Le = SUCESSO

    Exit Function

Erro_ChequePrePagParc_Le:

    ChequePrePagParc_Le = gErr

    Select Case gErr

        Case 198855
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 198856 To 198858
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUEPREPAGPARC", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 198859)

    End Select

    'Fecha Comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Public Function ChequesPrePag_Le_Selecao(ByVal objChequeSel As ClassChequePrePagSel) As Long

Dim lErro As Long
Dim lComando As Long
Dim sSQL As String
Dim lNumIntDocCheque As Long
Dim objCheque As ClassChequePrePag
Dim objTitPag As ClassTituloPagar
Dim objParcPag As ClassParcelaPagar
Dim objForn As ClassFornecedor
Dim objFilial As ClassFilialFornecedor
Dim objChequeParc As ClassChequePrePagParc
Dim objContaCorrenteInt As ClassContasCorrentesInternas

On Error GoTo Erro_ChequesPrePag_Le_Selecao

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 198945
    
    Call ChequesPrePag_Le_Selecao_PreparaSQL(objChequeSel, sSQL)

    lErro = ChequesPrePag_Le_Selecao_PreparaInt(lComando, lNumIntDocCheque, STATUS_BAIXADO, objChequeSel.dtDataBomParaAte, objChequeSel.dtDataBomParaDe, _
            objChequeSel.dtDataEmissaoAte, objChequeSel.dtDataEmissaoDe, objChequeSel.iFilial, objChequeSel.lFornecedor, objChequeSel.lNumeroAte, objChequeSel.lNumeroDe, sSQL)
    If lErro <> SUCESSO Then gError 198946

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 198947
    
    Do While lErro <> AD_SQL_SEM_DADOS
    
        Set objCheque = New ClassChequePrePag
        Set objForn = New ClassFornecedor
        Set objFilial = New ClassFilialFornecedor
        Set objContaCorrenteInt = New ClassContasCorrentesInternas

        objCheque.lNumIntDoc = lNumIntDocCheque
        
        lErro = CF("ChequePrePag_Le", objCheque)
        If lErro <> SUCESSO And lErro <> ERRO_LEITURA_SEM_DADOS Then gError 198948
        
        objFilial.lCodFornecedor = objCheque.lFornecedor
        objFilial.iCodFilial = objCheque.iFilial
        
        lErro = CF("FilialFornecedor_Le", objFilial)
        If lErro <> SUCESSO Then gError 198981
        
        objForn.lCodigo = objCheque.lFornecedor
        lErro = CF("Fornecedor_Le", objForn)
        If lErro <> SUCESSO Then gError 198982
        
        lErro = ContaCorrenteInt_Le(objCheque.iContaCorrente, objContaCorrenteInt)
        If lErro <> SUCESSO And lErro <> 11807 Then gError 198948
        
        Set objCheque.objFilialFornecedor = objFilial
        Set objCheque.objFornecedor = objForn
        
        objCheque.sNomeContaCorrente = objContaCorrenteInt.sNomeReduzido
        objCheque.sNomeFornecedor = objForn.sNomeReduzido
        
        For Each objChequeParc In objCheque.colParcelas
        
            Set objTitPag = New ClassTituloPagar
            Set objParcPag = New ClassParcelaPagar
            
            objParcPag.lNumIntDoc = objChequeParc.lNumIntParcela
            
            lErro = CF("ParcelaPagar_Le", objParcPag)
            If lErro <> SUCESSO And lErro <> 60479 Then gError 198983
        
            objTitPag.lNumIntDoc = objParcPag.lNumIntTitulo
            
            lErro = CF("TituloPagar_Le_Todos", objTitPag)
            If lErro <> SUCESSO Then gError 198984
            
            Set objChequeParc.objParcelaPag = objParcPag
            Set objChequeParc.objTituloPag = objTitPag
        
        Next
    
        objChequeSel.colCheques.Add objCheque
    
        'Busca Próximo
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 198949
    
    Loop
    
    'Fecha Comando
    Call Comando_Fechar(lComando)

    ChequesPrePag_Le_Selecao = SUCESSO

    Exit Function

Erro_ChequesPrePag_Le_Selecao:

    ChequesPrePag_Le_Selecao = gErr

    Select Case gErr

        Case 198945
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 198946, 198948, 198981 To 198984

        Case 198947, 198949
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUEPREPAG", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 198950)

    End Select
    
    'Fecha Comando
    Call Comando_Fechar(lComando)


    Exit Function

End Function

Private Function ChequesPrePag_Le_Selecao_PreparaSQL(ByVal objChequeSel As ClassChequePrePagSel, sSQL As String) As Long

Dim lErro As Long
Dim sOrderBy As String
Dim sWhere As String

On Error GoTo Erro_ChequesPrePag_Le_Selecao_PreparaSQL

    sSQL = "SELECT NumIntDoc FROM ChequePrePag "

    sWhere = "WHERE Status <> ? "
                    
    If objChequeSel.dtDataBomParaAte <> DATA_NULA Then
        sWhere = sWhere & "AND DataBomPara <= ? "
    End If
    
    If objChequeSel.dtDataBomParaDe <> DATA_NULA Then
        sWhere = sWhere & "AND DataBomPara >= ? "
    End If
    
    If objChequeSel.dtDataEmissaoAte <> DATA_NULA Then
        sWhere = sWhere & "AND DataEmissao <= ? "
    End If
    
    If objChequeSel.dtDataEmissaoDe <> DATA_NULA Then
        sWhere = sWhere & "AND DataEmissao >= ? "
    End If
    
    If objChequeSel.iFilial <> 0 Then
        sWhere = sWhere & "AND Filial = ? "
    End If
    
    If objChequeSel.lFornecedor <> 0 Then
        sWhere = sWhere & "AND Fornecedor = ? "
    End If

    If objChequeSel.lNumeroAte <> 0 Then
        sWhere = sWhere & "AND Numero <= ? "
    End If
    
    If objChequeSel.lNumeroDe <> 0 Then
        sWhere = sWhere & "AND Numero >= ? "
    End If

    sOrderBy = "ORDER BY DataEmissao, ContaCorrente, Numero "
    
    sSQL = sSQL & sWhere & sOrderBy

    ChequesPrePag_Le_Selecao_PreparaSQL = SUCESSO

    Exit Function

Erro_ChequesPrePag_Le_Selecao_PreparaSQL:

    ChequesPrePag_Le_Selecao_PreparaSQL = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 198951)

    End Select


    Exit Function

End Function

Private Function ChequesPrePag_Le_Selecao_PreparaInt(ByVal lComando As Long, vlNumIntDoc As Variant, ByVal viStatus As Variant, ByVal vdtDataBomParaAte As Variant, ByVal vdtDataBomParaDe As Variant, ByVal vdtDataEmissaoAte As Variant, ByVal vdtDataEmissaoDe As Variant, ByVal viFilial As Variant, ByVal vlFornecedor As Variant, ByVal vlNumeroAte As Variant, ByVal vlNumeroDe As Variant, ByVal sSQL As String) As Long
'Passa as variáveis de retorno e filtro do SELECT que monta os dados do Grid
 
Dim lErro As Long
 
On Error GoTo Erro_ChequesPrePag_Le_Selecao_PreparaInt
 
    lErro = Comando_PrepararInt(lComando, sSQL)
    If (lErro <> AD_SQL_SUCESSO) Then gError 198952
                       
    lErro = Comando_BindVarInt(lComando, vlNumIntDoc)
    If (lErro <> AD_SQL_SUCESSO) Then gError 198953

    lErro = Comando_BindVarInt(lComando, viStatus)
    If (lErro <> AD_SQL_SUCESSO) Then gError 198954

    If vdtDataBomParaAte <> DATA_NULA Then
        lErro = Comando_BindVarInt(lComando, vdtDataBomParaAte)
        If (lErro <> AD_SQL_SUCESSO) Then gError 198955
    End If
    
    If vdtDataBomParaDe <> DATA_NULA Then
        lErro = Comando_BindVarInt(lComando, vdtDataBomParaDe)
        If (lErro <> AD_SQL_SUCESSO) Then gError 198956
   End If

    If vdtDataEmissaoAte <> DATA_NULA Then
        lErro = Comando_BindVarInt(lComando, vdtDataEmissaoAte)
        If (lErro <> AD_SQL_SUCESSO) Then gError 198957
    End If
    
    If vdtDataEmissaoDe <> DATA_NULA Then
        lErro = Comando_BindVarInt(lComando, vdtDataEmissaoDe)
        If (lErro <> AD_SQL_SUCESSO) Then gError 198958
   End If
   
    If viFilial <> 0 Then
        lErro = Comando_BindVarInt(lComando, viFilial)
        If (lErro <> AD_SQL_SUCESSO) Then gError 198959
    End If
    If vlFornecedor <> 0 Then
        lErro = Comando_BindVarInt(lComando, vlFornecedor)
        If (lErro <> AD_SQL_SUCESSO) Then gError 198960
    End If
   
    If vlNumeroAte <> 0 Then
        lErro = Comando_BindVarInt(lComando, vlNumeroAte)
        If (lErro <> AD_SQL_SUCESSO) Then gError 198961
    End If
    If vlNumeroDe <> 0 Then
        lErro = Comando_BindVarInt(lComando, vlNumeroDe)
        If (lErro <> AD_SQL_SUCESSO) Then gError 198962
    End If
     
    lErro = Comando_ExecutarInt(lComando)
    If (lErro <> AD_SQL_SUCESSO) Then gError 198963
 
   ChequesPrePag_Le_Selecao_PreparaInt = SUCESSO
 
    Exit Function
 
Erro_ChequesPrePag_Le_Selecao_PreparaInt:
 
    ChequesPrePag_Le_Selecao_PreparaInt = gErr
 
    Select Case gErr
 
        Case 198952 To 198963
            Call Rotina_Erro(vbOKOnly, "ERRO_PREPARACAO_COMANDO_SQL", gErr, sSQL)
 
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 198964)
 
    End Select
 
    Exit Function
 
End Function

Public Function ContatoCli_Selecao_Le_Endereco(objFilial As ClassFilialCliente, lEndereco As Long)
    ContatoCli_Selecao_Le_Endereco = SUCESSO
End Function

Public Function Fornecedor_Valida(ByVal objForn As ClassFornecedor)
    Fornecedor_Valida = SUCESSO
End Function

Public Function Fornecedor_Le_Tipo_Padrao(iTipo As Integer)
    Fornecedor_Le_Tipo_Padrao = SUCESSO
End Function

Public Function PagAntecipBaixado_Le(objPagAntecipBaixado As ClassPagAntecipBaixado) As Long

Dim lComando1 As Long
Dim lErro As Long
Dim tPagAntecipBaixado As typePagAntecipBaixado

On Error GoTo Erro_PagAntecipBaixado_Le

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 199640

    tPagAntecipBaixado.sNomeReduzido = String(STRING_FORNECEDOR_NOME_REDUZIDO, 0)
    tPagAntecipBaixado.sContaCorrenteNome = String(STRING_CONTA_CORRENTE_NOME_REDUZIDO, 0)

    'Pega os dados da tabela Resgates
    lErro = Comando_Executar(lComando1, "SELECT NumIntPag, ValorBaixado, NomeReduzido, Fornecedor, Filial_Fornecedor, Valor, DataMovimento, CodConta, TipoMeioPagto, NumIntBaixa, NumMovto,  ContaCorrenteNome FROM PagAntecipBaixado WHERE NumIntBaixa = ? AND NumIntPag = ?", _
    tPagAntecipBaixado.lNumIntPag, tPagAntecipBaixado.dValorBaixado, tPagAntecipBaixado.sNomeReduzido, tPagAntecipBaixado.lFornecedor, tPagAntecipBaixado.iFilial_Fornecedor, tPagAntecipBaixado.dValor, tPagAntecipBaixado.dtDataMovimento, tPagAntecipBaixado.iCodConta, tPagAntecipBaixado.iTipoMeioPagto, tPagAntecipBaixado.lNumIntBaixa, tPagAntecipBaixado.lNumMovto, tPagAntecipBaixado.sContaCorrenteNome, objPagAntecipBaixado.lNumIntBaixa, objPagAntecipBaixado.lNumIntPag)
    If lErro <> AD_SQL_SUCESSO Then gError 199641

    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 199642

    If lErro = AD_SQL_SEM_DADOS Then gError 199643
    
    objPagAntecipBaixado.lNumIntPag = tPagAntecipBaixado.lNumIntPag
    objPagAntecipBaixado.dValorBaixado = tPagAntecipBaixado.dValorBaixado
    objPagAntecipBaixado.sNomeReduzido = tPagAntecipBaixado.sNomeReduzido
    objPagAntecipBaixado.lFornecedor = tPagAntecipBaixado.lFornecedor
    objPagAntecipBaixado.iFilialFornecedor = tPagAntecipBaixado.iFilial_Fornecedor
    objPagAntecipBaixado.dValor = tPagAntecipBaixado.dValor
    objPagAntecipBaixado.dtDataMovimento = tPagAntecipBaixado.dtDataMovimento
    objPagAntecipBaixado.iCodConta = tPagAntecipBaixado.iCodConta
    objPagAntecipBaixado.iTipoMeioPagto = tPagAntecipBaixado.iTipoMeioPagto
    objPagAntecipBaixado.lNumIntBaixa = tPagAntecipBaixado.lNumIntBaixa
    objPagAntecipBaixado.lNumMovto = tPagAntecipBaixado.lNumMovto
    objPagAntecipBaixado.sContaCorrenteNome = tPagAntecipBaixado.sContaCorrenteNome

    Call Comando_Fechar(lComando1)

    PagAntecipBaixado_Le = SUCESSO

    Exit Function

Erro_PagAntecipBaixado_Le:

    PagAntecipBaixado_Le = gErr

    Select Case gErr

        Case 199640
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 199641, 199642
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PAGANTECIPBAIXADO", gErr)

        Case 199643

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 199644)

    End Select

    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Function BaixaPagAntecipadosItem_Le(ByVal lNumIntBaixa As Long, ByVal colBaixaPagAntecipadosItem As Collection) As Long

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim tBaixaPagAntecipadosItem As typeBaixaPagAntecipadosItem
Dim objBaixaPagAntecipadosItem As ClassBaixaPagAntecipadosItem
Dim iIndice As Integer

On Error GoTo Erro_BaixaPagAntecipadosItem_Le

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 199645
    Next

    lErro = Comando_Executar(alComando(1), "SELECT NumIntDocOrigem, Valor, Status FROM BaixaPagAntecipadosItem WHERE NumIntBaixa = ?", tBaixaPagAntecipadosItem.lNumDocOrigem, tBaixaPagAntecipadosItem.dValor, tBaixaPagAntecipadosItem.iStatus, lNumIntBaixa)
    If lErro <> AD_SQL_SUCESSO Then gError 199646
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 199647
    
    Do While lErro = AD_SQL_SUCESSO
    
        Set objBaixaPagAntecipadosItem = New ClassBaixaPagAntecipadosItem
                
        objBaixaPagAntecipadosItem.lNumIntBaixa = lNumIntBaixa
        objBaixaPagAntecipadosItem.lNumIntDocOrigem = tBaixaPagAntecipadosItem.lNumDocOrigem
        objBaixaPagAntecipadosItem.dValor = tBaixaPagAntecipadosItem.dValor
        objBaixaPagAntecipadosItem.iStatus = tBaixaPagAntecipadosItem.iStatus
        
        colBaixaPagAntecipadosItem.Add objBaixaPagAntecipadosItem
        
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 199648

    Loop

    For iIndice = LBound(alComando) To UBound(alComando)
         Call Comando_Fechar(alComando(iIndice))
    Next

    BaixaPagAntecipadosItem_Le = SUCESSO

    Exit Function

Erro_BaixaPagAntecipadosItem_Le:

    BaixaPagAntecipadosItem_Le = gErr

    Select Case gErr

        Case 199645
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 199646 To 199648
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BAIXAPAGANTECIPADOSITEM", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 199649)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
         Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function VendasComCartao_Obtem_NomeBrowser(sNomeBrowse As String, sFiltro As String, ByVal colSelecao As Collection, ByVal iTipo As Integer, ByVal sNumeroCartao As String, ByVal dtData As Date, ByVal dValor As Double, ByVal sAuto As String) As Long

On Error GoTo Erro_VendasComCartao_Obtem_NomeBrowser

    sNomeBrowse = "TitParcRecCartaoLista"

    Select Case iTipo
    
        Case VENDCARTAO_BROWSER_TIPO_DATAVALOR
            sFiltro = "ValorParcela BETWEEN ? AND ? AND DataTransacaoCartao BETWEEN ? AND ? "
            colSelecao.Add dValor * 0.9
            colSelecao.Add dValor * 1.1
            colSelecao.Add DateAdd("d", -14, dtData)
            colSelecao.Add DateAdd("d", 14, dtData)
    
        Case VENDCARTAO_BROWSER_TIPO_DESSECARTAO
        
            If Len(Trim(sAuto)) > 0 Then
                sFiltro = "NumeroCartao = ? OR (AprovacaoCartao = ? OR AprovacaoCartao = ? OR AprovacaoCartao = ? OR AprovacaoCartao = ? OR AprovacaoCartao = ?)"
                colSelecao.Add sNumeroCartao
                colSelecao.Add sAuto
                colSelecao.Add "0" & sAuto
                colSelecao.Add "00" & sAuto
                colSelecao.Add "000" & sAuto
                colSelecao.Add "0000" & sAuto
            Else
                sFiltro = "NumeroCartao = ?"
                colSelecao.Add sNumeroCartao
            End If
    
        Case VENDCARTAO_BROWSER_TIPO_TODASABERTAS
            sFiltro = "StatusTitulo <> ? AND StatusParcela <> ?"
            colSelecao.Add STATUS_BAIXADO
            colSelecao.Add STATUS_BAIXADO
    
    End Select

    VendasComCartao_Obtem_NomeBrowser = SUCESSO

    Exit Function

Erro_VendasComCartao_Obtem_NomeBrowser:

    VendasComCartao_Obtem_NomeBrowser = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 199649)

    End Select

    Exit Function
End Function

Public Function CobrancaPorEmail_NFe_Le(ByVal objCobrancaSel As ClassCobrancaPorEmailSel) As Long

Dim lErro As Long
Dim lComando As Long
Dim sSQL As String
Dim lNumIntDocNF As Long
Dim sChave As String, sVersao As String
Dim objNF As ClassNFiscal

On Error GoTo Erro_CobrancaPorEmail_NFe_Le

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 185991
    
    Call CobrancaPorEmail_NFe_PreparaSQL(objCobrancaSel, sSQL)
    
    sChave = String(STRING_MAXIMO, 0)
    sVersao = String(STRING_MAXIMO, 0)

    lErro = CobrancaPorEmail_NFe_PreparaInt(lComando, lNumIntDocNF, sChave, sVersao, _
                        objCobrancaSel.dtDataEmissaoAte, objCobrancaSel.dtDataEmissaoDe, _
                        objCobrancaSel.lClienteAte, objCobrancaSel.lClienteDe, _
                        objCobrancaSel.lTituloAte, objCobrancaSel.lTituloDe, STATUS_CANCELADO, giFilialEmpresa, _
                        sSQL, objCobrancaSel.sCategoria, objCobrancaSel.sCategoriaDe, objCobrancaSel.sCategoriaAte)
    If lErro <> SUCESSO Then gError 185992

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 185993
    
    Do While lErro <> AD_SQL_SEM_DADOS
    
        Set objNF = New ClassNFiscal
    
        objNF.lNumIntDoc = lNumIntDocNF
    
        lErro = CF("NFiscal_Le", objNF)
        If lErro <> SUCESSO And lErro <> 18257 Then gError 185994
        
        objNF.sCodVerificacaoNFe = sChave
        objNF.sStatusNFeFed = sVersao
    
        objCobrancaSel.colParcelas.Add objNF
    
        'Busca Próximo
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 185995
    
    Loop
    
    'Fecha Comando
    Call Comando_Fechar(lComando)

    CobrancaPorEmail_NFe_Le = SUCESSO

    Exit Function

Erro_CobrancaPorEmail_NFe_Le:

    CobrancaPorEmail_NFe_Le = gErr

    Select Case gErr

        Case 185991
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 185992, 185994

        Case 185993, 185995
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 185996)

    End Select
    
    'Fecha Comando
    Call Comando_Fechar(lComando)


    Exit Function

End Function

Private Function CobrancaPorEmail_NFe_PreparaSQL(ByVal objCobrancaSel As ClassCobrancaPorEmailSel, sSQL As String) As Long

Dim lErro As Long
Dim sOrderBy As String
Dim sWhere As String
Dim sSubWhere As String
On Error GoTo Erro_CobrancaPorEmail_NFe_PreparaSQL

    'sSQL = "SELECT N.NumIntDoc, E.chNFe, E.Versao FROM NFiscal AS N, NFeFedProtNFe AS E WHERE N.NumIntDoc = E.NumIntNF AND E.cStat = '100' AND N.Status <> ? AND N.FilialEmpresa = ? "
    sSQL = "SELECT N.NumIntDoc, E.chNFe, E.Versao FROM NFiscal AS N, NFeFedProtNFe AS E WHERE N.NumIntDoc = E.NumIntNF AND E.cStat = '100' AND N.FilialEmpresa = ? "
    
    If objCobrancaSel.lClienteAte <> 0 Then
        sWhere = sWhere & "AND N.Cliente <= ? "
    End If
    
    If objCobrancaSel.lClienteDe <> 0 Then
        sWhere = sWhere & "AND N.Cliente >= ? "
    End If
    
    If objCobrancaSel.lTituloAte <> 0 Then
        sWhere = sWhere & "AND N.NumNotaFiscal <= ? "
    End If
    
    If objCobrancaSel.lTituloDe <> 0 Then
        sWhere = sWhere & "AND N.NumNotaFiscal >= ? "
    End If
    
    If objCobrancaSel.dtDataEmissaoAte <> DATA_NULA Then
        sWhere = sWhere & "AND ((N.DataEmissao <= ? AND N.Status <> 7) OR (N.DataCancel <= ? AND N.Status = 7)) "
    End If
    
    If objCobrancaSel.dtDataEmissaoDe <> DATA_NULA Then
        sWhere = sWhere & "AND ((N.DataEmissao >= ? AND N.Status <> 7) OR (N.DataCancel >= ? AND N.Status = 7)) "
    End If

    If Len(Trim(objCobrancaSel.sCategoria)) > 0 Then
        If Len(Trim(objCobrancaSel.sCategoriaDe)) > 0 Then
            sSubWhere = sSubWhere & "AND F.Item >= ? "
        End If
        If Len(Trim(objCobrancaSel.sCategoriaAte)) > 0 Then
            sSubWhere = sSubWhere & "AND F.Item <= ? "
        End If
        sWhere = sWhere & " AND EXISTS ( SELECT F.Cliente FROM FilialClienteCategorias AS F WHERE N.Cliente= F.Cliente AND N.Filial = F.Filial AND " & _
        "F.Categoria = ? " & sSubWhere & ") "
    End If
    
    If objCobrancaSel.iIgnoraJaEnviados = MARCADO Then
        sWhere = sWhere & "AND N.NumIntDoc NOT IN (SELECT E.NumIntDoc FROM EmailsEnviados As E, CobrancaEmailPadrao AS M WHERE E.TipoDoc  = 4 AND E.NumIntDocModelo = M.NumIntDoc AND M.Tipo = " & CStr(objCobrancaSel.iTipoTela) & ") "
    End If
    
    sOrderBy = "ORDER BY N.NumNotaFiscal, N.DataEmissao "
    
    sSQL = sSQL & sWhere & sOrderBy

    CobrancaPorEmail_NFe_PreparaSQL = SUCESSO

    Exit Function

Erro_CobrancaPorEmail_NFe_PreparaSQL:

    CobrancaPorEmail_NFe_PreparaSQL = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 185975)

    End Select


    Exit Function

End Function

Private Function CobrancaPorEmail_NFe_PreparaInt(ByVal lComando As Long, vlNumIntDoc As Variant, vsChave As Variant, vsVersao As Variant, ByVal vdtDataAte As Variant, ByVal vdtDataDe As Variant, ByVal vlClienteAte As Variant, ByVal vlClienteDe As Variant, ByVal vlNumNFAte As Variant, ByVal vlNumNFDe As Variant, ByVal viStatus1 As Variant, ByVal viFilialEmpresa As Variant, ByVal sSQL As String, ByVal vsCategoria As Variant, ByVal vsCategoriaDe As Variant, ByVal vsCategoriaAte As Variant) As Long
'Passa as variáveis de retorno e filtro do SELECT que monta os dados do Grid
 
Dim lErro As Long
 
On Error GoTo Erro_CobrancaPorEmail_NFe_PreparaInt
 
    lErro = Comando_PrepararInt(lComando, sSQL)
    If (lErro <> AD_SQL_SUCESSO) Then gError 185976
                       
    lErro = Comando_BindVarInt(lComando, vlNumIntDoc)
    If (lErro <> AD_SQL_SUCESSO) Then gError 185977

    lErro = Comando_BindVarInt(lComando, vsChave)
    If (lErro <> AD_SQL_SUCESSO) Then gError 185978

    lErro = Comando_BindVarInt(lComando, vsVersao)
    If (lErro <> AD_SQL_SUCESSO) Then gError 185978

'    lErro = Comando_BindVarInt(lComando, viStatus1)
'    If (lErro <> AD_SQL_SUCESSO) Then gError 185979
  
    lErro = Comando_BindVarInt(lComando, viFilialEmpresa)
    If (lErro <> AD_SQL_SUCESSO) Then gError 185979
  
    If vlClienteAte <> 0 Then
        lErro = Comando_BindVarInt(lComando, vlClienteAte)
        If (lErro <> AD_SQL_SUCESSO) Then gError 185984
    End If
    If vlClienteDe <> 0 Then
        lErro = Comando_BindVarInt(lComando, vlClienteDe)
        If (lErro <> AD_SQL_SUCESSO) Then gError 185985
    End If
    If vlNumNFAte <> 0 Then
        lErro = Comando_BindVarInt(lComando, vlNumNFAte)
        If (lErro <> AD_SQL_SUCESSO) Then gError 185986
    End If
    If vlNumNFDe <> 0 Then
        lErro = Comando_BindVarInt(lComando, vlNumNFDe)
        If (lErro <> AD_SQL_SUCESSO) Then gError 185987
    End If
    If vdtDataAte <> DATA_NULA Then
        lErro = Comando_BindVarInt(lComando, vdtDataAte)
        If (lErro <> AD_SQL_SUCESSO) Then gError 185980
    
        lErro = Comando_BindVarInt(lComando, vdtDataAte)
        If (lErro <> AD_SQL_SUCESSO) Then gError 185980
    End If
    If vdtDataDe <> DATA_NULA Then
        lErro = Comando_BindVarInt(lComando, vdtDataDe)
        If (lErro <> AD_SQL_SUCESSO) Then gError 185981
    
        lErro = Comando_BindVarInt(lComando, vdtDataDe)
        If (lErro <> AD_SQL_SUCESSO) Then gError 185981
    End If
    
    If Len(Trim(vsCategoria)) > 0 Then
        lErro = Comando_BindVarInt(lComando, vsCategoria)
        If (lErro <> AD_SQL_SUCESSO) Then gError 185981

        If Len(Trim(vsCategoriaDe)) > 0 Then
            lErro = Comando_BindVarInt(lComando, vsCategoriaDe)
            If (lErro <> AD_SQL_SUCESSO) Then gError 185981
        End If
        If Len(Trim(vsCategoriaAte)) > 0 Then
            lErro = Comando_BindVarInt(lComando, vsCategoriaAte)
            If (lErro <> AD_SQL_SUCESSO) Then gError 185981
        End If
    End If
    
    lErro = Comando_ExecutarInt(lComando)
    If (lErro <> AD_SQL_SUCESSO) Then gError 185989
 
   CobrancaPorEmail_NFe_PreparaInt = SUCESSO
 
    Exit Function
 
Erro_CobrancaPorEmail_NFe_PreparaInt:
 
    CobrancaPorEmail_NFe_PreparaInt = gErr
 
    Select Case gErr
 
        Case 185976 To 185989
            Call Rotina_Erro(vbOKOnly, "ERRO_PREPARACAO_COMANDO_SQL", gErr, sSQL)
 
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 185990)
 
    End Select
 
    Exit Function
 
End Function

Function Endereco_Le_CEP(ByVal objEndereco As ClassEndereco) As Long
'le o endereco a partir da chave fornecida em objEndereco. Devolve os dados em objEndereco

Dim lComando As Long
Dim lErro As Long
Dim tEndereco As typeEndereco
Dim sCEP As String

On Error GoTo Erro_Endereco_Le_CEP

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 202981
    
    sCEP = Replace(objEndereco.sCEP, "-", "")
    sCEP = Replace(sCEP, " ", "")

    tEndereco.sBairro = String(255, 0)
    tEndereco.sCidade = String(255, 0)
    tEndereco.sSiglaEstado = String(255, 0)
    tEndereco.sLogradouro = String(255, 0)
    tEndereco.sTipoLogradouro = String(255, 0)
     
     'Verifica se o endereco existe, e se existir carrega seus dados em objEndereco
    lErro = Comando_Executar(lComando, "SELECT UF,Cidade,Bairro,Tipo, Logradouro FROM CEPs WHERE CEP = ?", tEndereco.sSiglaEstado, tEndereco.sCidade, tEndereco.sBairro, tEndereco.sTipoLogradouro, tEndereco.sLogradouro, sCEP)
    If lErro <> AD_SQL_SUCESSO Then gError 202982

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 202983

    'Endereco não está cadastrado
    If lErro = AD_SQL_SEM_DADOS Then gError ERRO_LEITURA_SEM_DADOS

    objEndereco.sBairro = left(tEndereco.sBairro, STRING_BAIRRO)
    objEndereco.sCidade = left(tEndereco.sCidade, STRING_CIDADE)
    objEndereco.sSiglaEstado = left(tEndereco.sSiglaEstado, STRING_ESTADO)
    objEndereco.sLogradouro = left(tEndereco.sLogradouro, STRING_ENDERECO)
    objEndereco.sTipoLogradouro = left(tEndereco.sTipoLogradouro, STRING_ENDERECO_TIPOLOGRADOURO)

    Call Comando_Fechar(lComando)

    Endereco_Le_CEP = SUCESSO

Exit Function

Erro_Endereco_Le_CEP:

    Endereco_Le_CEP = gErr

    Select Case gErr

        Case 202981
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 202982, 202983
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ENDERECOS", gErr)

        Case ERRO_LEITURA_SEM_DADOS 'Endereco nao cadastrado

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 202984)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Public Function FormasPagamento_Le_CodNome(ByVal colCodigoDescricao As AdmColCodigoNome, Optional ByVal bEmBaixaRecsel As Boolean = False) As Long

Dim lErro As Long, sSQL As String
Dim lComando As Long, sDescricao As String, iCodigo As Integer

On Error GoTo Erro_FormasPagamento_Le_CodNome

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 201166
    
    sSQL = "SELECT Codigo, Descricao FROM FormasPagamento WHERE Ativo = 1"
    If bEmBaixaRecsel Then sSQL = sSQL & " AND EmBaixaRecSel = 1"
    sSQL = sSQL & " ORDER BY Codigo"
    
    sDescricao = String(STRING_FORMA_PAGTO_DESCRICAO, 0)
    lErro = Comando_Executar(lComando, sSQL, iCodigo, sDescricao)
    If lErro <> AD_SQL_SUCESSO Then gError 201167
    
    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 201168
    
    Do While lErro = AD_SQL_SUCESSO
    
        Call colCodigoDescricao.Add(iCodigo, sDescricao)
        
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 201169
    
    Loop
    
    Call Comando_Fechar(lComando)
    
    FormasPagamento_Le_CodNome = SUCESSO
    
    Exit Function
    
Erro_FormasPagamento_Le_CodNome:

    FormasPagamento_Le_CodNome = gErr

    Select Case gErr

        Case 201166
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 201167 To 201169
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FORMA_PAGTO", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 201165)

    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Public Function Carrega_CondicaoPagamento(ByVal objCombo As Object, ByVal sModulo As String) As Long

Dim lErro As Long
Dim colCod_DescReduzida As New AdmColCodigoNome
Dim objCod_DescReduzida As AdmCodigoNome

On Error GoTo Erro_Carrega_CondicaoPagamento

    'Lê o código e a descrição reduzida de todas as Condições de Pagamento
    Select Case sModulo
        Case MODULO_CONTASARECEBER
            lErro = CF("CondicoesPagto_Le_Recebimento", colCod_DescReduzida)
        Case MODULO_CONTASAPAGAR
            lErro = CF("CondicoesPagto_Le_Pagamento", colCod_DescReduzida)
    End Select
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    For Each objCod_DescReduzida In colCod_DescReduzida

        'Adiciona novo item na List da Combo CondicaoPagamento
        If gobjCRFAT.iCondPagtoSemCodigo = 0 Then
            objCombo.AddItem CInt(objCod_DescReduzida.iCodigo) & SEPARADOR & objCod_DescReduzida.sNome
        Else
            objCombo.AddItem objCod_DescReduzida.sNome
        End If
        objCombo.ItemData(objCombo.NewIndex) = objCod_DescReduzida.iCodigo

    Next

    Carrega_CondicaoPagamento = SUCESSO

    Exit Function

Erro_Carrega_CondicaoPagamento:

    Carrega_CondicaoPagamento = gErr

    Select Case gErr

        Case ERRO_SEM_MENSAGEM

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 157919)

    End Select

    Exit Function

End Function

Function ChequePre_Le_DadosConta(ByVal iBanco As Integer, ByVal sAgencia As String, ByVal sConta As String, lNumCheques As Long) As Long

Dim lComando As Long
Dim lErro As Long

On Error GoTo Erro_ChequePre_Le_DadosConta

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 109961
    
    'Pega os dados da tabela ChequePre
    lErro = Comando_Executar(lComando, "SELECT COUNT(*) FROM ChequePre WHERE FilialEmpresa = ? AND Banco = ? AND Agencia = ? AND ContaCorrente = ? AND Localizacao = ?", _
       lNumCheques, giFilialEmpresa, iBanco, sAgencia, sConta, CHEQUEPRE_LOCALIZACAO_BACKOFFICE)
    If lErro <> AD_SQL_SUCESSO Then gError 109962

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109963
    
    Call Comando_Fechar(lComando)

    ChequePre_Le_DadosConta = SUCESSO

    Exit Function

Erro_ChequePre_Le_DadosConta:

    ChequePre_Le_DadosConta = gErr

    Select Case gErr

        Case 109961
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 109962, 109963
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUEPRE", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148764)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

