VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
  Persistable = 0  'NotPersistable
  DataBindingBehavior = 0  'vbNone
  DataSourceBehavior  = 0  'vbNone
  MTSTransactionMode  = 0  'NotAnMTSObject
END
Attribute VB_Name = "ClassFATGrava"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Option Explicit

Private Declare Function Comando_BindVarInt Lib "ADSQLMN.DLL" Alias "AD_Comando_BindVar" (ByVal lComando As Long, lpVar As Variant) As Long
Private Declare Function Comando_PrepararInt Lib "ADSQLMN.DLL" Alias "AD_Comando_Preparar" (ByVal lComando As Long, ByVal lpSQLStmt As String) As Long
Private Declare Function Comando_ExecutarInt Lib "ADSQLMN.DLL" Alias "AD_Comando_Executar" (ByVal lComando As Long) As Long

Public Function FATConfig_Grava_Trans(ByVal objFATConfig As ClassFATConfig, alComando() As Long) As Long
'grava registro em fatconfig. Apenas altera o conteudo, se nao existir dá erro.
'TEM QUE SER CHAMADA EM TRANSACAO

Dim lErro As Long, tFATConfig As typeFATConfig

On Error GoTo Erro_FATConfig_Grava_Trans

    'inicializar buffer
    tFATConfig.sConteudo = String(STRING_FATCONFIG_CONTEUDO, 0)
    'ler registo
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Conteudo FROM FATConfig WHERE Codigo = ? AND FilialEmpresa = ?", 0, tFATConfig.sConteudo, objFATConfig.sCodigo, objFATConfig.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then Error 19319
    
    'Lê o primeiro registro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 19320
    
    'Se não encontrou o registro
    If lErro = AD_SQL_SEM_DADOS Then
            
        'trata valores que podem só estar disponiveis apos a inicializacao da filial da empresa
        Select Case objFATConfig.sCodigo
        
            Case FATCFG_FILIAL_FATURAMENTO
        
            Case Else
                Error 19321
            
        End Select
        
    Else

        'se o conteudo foi modificado
        If objFATConfig.sConteudo <> tFATConfig.sConteudo Then
            lErro = Comando_ExecutarPos(alComando(2), "UPDATE FATConfig SET Conteudo = ?", alComando(1), objFATConfig.sConteudo)
            If lErro <> AD_SQL_SUCESSO Then Error 19322
        End If
    
    End If
    
    Exit Function
    
Erro_FATConfig_Grava_Trans:

    FATConfig_Grava_Trans = Err
     
    Select Case Err
     
        Case 19319, 19320
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FATCONFIG2", Err, objFATConfig.sCodigo, objFATConfig.iFilialEmpresa)
     
        Case 19321
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FATCONFIG_INEXISTENTE", Err, objFATConfig.sCodigo, objFATConfig.iFilialEmpresa)
        
        Case 19322
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_FATCONFIG", Err, objFATConfig.sCodigo, objFATConfig.iFilialEmpresa)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149745)
     
    End Select
     
    Exit Function

End Function

Function FATConfig_Grava_Configs(ByVal colConfigs As ColFATConfig) As Long
'grava na tabela FATConfig uma colecao de registros de configuracao

Dim lErro As Long, iIndice As Integer
Dim lTransacao As Long

On Error GoTo Erro_FATConfig_Grava_Configs
    
    'abrir transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 34504
    
    lErro = CF("FATConfig_Grava_Configs_Trans", colConfigs)
    If lErro <> SUCESSO Then Error 19323
    
     'fechar transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 34512
    
    FATConfig_Grava_Configs = SUCESSO
    
    Exit Function
    
Erro_FATConfig_Grava_Configs:
    
    FATConfig_Grava_Configs = Err
    
    Select Case Err
    
        Case 19323
        
        Case 34504
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
    
        Case 34512
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149746)
            
    End Select
    
    Call Transacao_Rollback
    
    Exit Function
    
End Function

Function FATConfig_Grava_Configs_Trans(ByVal colConfigs As ColFATConfig) As Long
'grava na tabela FATConfig uma colecao de registros de configuracao
'TEM QUE SER CHAMADA EM TRANSACAO

Dim lErro As Long, iIndice As Integer
Dim alComando(1 To 2) As Long
Dim objFATConfig As ClassFATConfig

On Error GoTo Erro_FATConfig_Grava_Configs_Trans
    
    'abrir comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 34505
    Next
    
   'para cada elemento da colecao
    For Each objFATConfig In colConfigs
    
        lErro = FATConfig_Grava_Trans(objFATConfig, alComando())
        If lErro <> SUCESSO Then Error 19323
        
    Next
    
   'fechar comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
          
    FATConfig_Grava_Configs_Trans = SUCESSO
    
    Exit Function
    
Erro_FATConfig_Grava_Configs_Trans:
    
    FATConfig_Grava_Configs_Trans = Err
    
    Select Case Err
    
        Case 19323
        
        Case 34505, 34506
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149747)
            
    End Select
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function
    
End Function


Function TipoDeBloqueio_Exclui(ByVal objTipo As ClassTipoDeBloqueio) As Long
'Exclui o tipo do BD

Dim lComando1 As Long
Dim lComando2 As Long
Dim lTransacao As Long
Dim lErro As Long
Dim sNomeReduzido As String
Dim sDescricao As String

On Error GoTo Erro_TipoDeBloqueio_Exclui

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 23667

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 23668
    
    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 23669

    sNomeReduzido = String(STRING_TIPO_BLOQUEIO_NOME_REDUZIDO, 0)
    sDescricao = String(STRING_TIPO_BLOQUEIO_DESCRICAO, 0)

    'pesquisa Tipo na tabela Tipos de Bloqueio
    lErro = Comando_ExecutarPos(lComando1, "SELECT NomeReduzido,Descricao FROM TiposdeBloqueio WHERE Codigo = ? ", 0, sNomeReduzido, sDescricao, objTipo.iCodigo)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 23670

    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 23671

    If lErro = AD_SQL_SEM_DADOS Then Error 23672

    lErro = Comando_LockExclusive(lComando1)
    If lErro <> SUCESSO Then Error 23675
    
    'verificar se está relacionado com alguma tabela
    lErro = TipoDeBloqueio_Testa_Vinculo(objTipo.iCodigo)
    If lErro <> SUCESSO Then Error 23684
    
    'exclui Tipo da tabela TipodeBloqueio
    lErro = Comando_ExecutarPos(lComando2, "DELETE FROM TiposdeBloqueio", lComando1)
    If lErro <> AD_SQL_SUCESSO Then Error 23673
    
    'confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 23674

    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)

    TipoDeBloqueio_Exclui = SUCESSO

    Exit Function

Erro_TipoDeBloqueio_Exclui:

    TipoDeBloqueio_Exclui = Err

    Select Case Err

        Case 23667, 23668
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 23669
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 23670, 23671
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPODEBLOQUEIO", Err, Error$)

        Case 23672
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TIPODEBLOQUEIO_NAO_CADASTRADO", Err, objTipo.iCodigo)

        Case 23673
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_TIPODEBLOQUEIO", Err, objTipo.iCodigo)

        Case 23674
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
        
        Case 23675
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_TIPODEBLOQUEIO", Err)
                    
        Case 23684 'Tratado na rotina chamada
                       
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149748)

    End Select

    Call Transacao_Rollback
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)

    Exit Function

End Function

Private Function TipoDeBloqueio_Testa_Vinculo(ByVal iCodigo As Integer) As Long
'Lê no BD se existe uso deste tipo de bloqueio em outras tabelas

Dim lErro As Long
Dim lComando As Long
Dim iFilialEmpresa As Integer
Dim lPedidoDeVenda As Long
Dim iSequencial As Integer

On Error GoTo Erro_TipoDeBloqueio_Testa_Vinculo
    
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 23683
    
    'Procura no BD o uso deste Tipo de Bloqueio nas tabelas BloqueiosPV e BloqueiosPVBaixados
    lErro = Comando_Executar(lComando, "SELECT FilialEmpresa, PedidoDeVenda, Sequencial FROM BloqueiosPV WHERE TipoDeBloqueio=? UNION SELECT FilialEmpresa, PedidoDeVenda, Sequencial FROM BloqueiosPVBaixados WHERE TipoDeBloqueio=?", iFilialEmpresa, lPedidoDeVenda, iSequencial, iCodigo, iCodigo)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 23680
        
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 23681
    
    'Se Estiver sendo usado(se existe em outra tabela) ==>ERRO
    If lErro = AD_SQL_SUCESSO Then Error 23682
    
    Call Comando_Fechar(lComando)
    
    TipoDeBloqueio_Testa_Vinculo = SUCESSO
    
    Exit Function
    
Erro_TipoDeBloqueio_Testa_Vinculo:
    
    TipoDeBloqueio_Testa_Vinculo = Err
    
    Select Case Err
        
        Case 23680, 23681
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BLOQUEIOSPV_BLOQUEIOSPVBAIXADOS", Err)
        
        Case 23682
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TIPODEBLOQUEIO_USADO", Err, iCodigo, iFilialEmpresa, lPedidoDeVenda, iSequencial)
             
        Case 23683
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149749)
    
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function
    
End Function

Function TipoDeBloqueio_Grava(ByVal objTipo As ClassTipoDeBloqueio) As Long
'Atualiza ou insere um novo registro na tabela Tipos de Bloqueio

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim lComando2 As Long
Dim lTransacao As Long
Dim sNomeReduzido As String

On Error GoTo Erro_TipoDeBloqueio_Grava

    lComando = 0
    lComando1 = 0
    lComando2 = 0
    lTransacao = 0

    If objTipo.iCodigo = BLOQUEIO_TOTAL Or objTipo.iCodigo = BLOQUEIO_PARCIAL Or objTipo.iCodigo = BLOQUEIO_NAO_RESERVA Or objTipo.iCodigo = BLOQUEIO_CREDITO Then Error 32125
                
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 23686

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 23687

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 23688

    'inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 23689

    sNomeReduzido = String(STRING_TIPO_BLOQUEIO_NOME_REDUZIDO, 0)
    
    'pesquisa se já é usado o nome reduzido para outro codigo
    lErro = Comando_Executar(lComando, "SELECT  NomeReduzido FROM TiposdeBloqueio WHERE Codigo <> ? AND NomeReduzido = ?", sNomeReduzido, objTipo.iCodigo, objTipo.sNomeReduzido)
    If lErro <> AD_SQL_SUCESSO Then Error 23690

    'verifica resultado da pesquisa
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 23691

    If lErro <> AD_SQL_SEM_DADOS Then Error 23692

    'pesquisa Tipo no BD
    lErro = Comando_ExecutarPos(lComando1, "SELECT  NomeReduzido FROM TiposdeBloqueio WHERE Codigo = ? ", 0, sNomeReduzido, objTipo.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 23693

    'verifica resultado da pesquisa
    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 23694

    If lErro = AD_SQL_SEM_DADOS Then
    'Tipo nao pertence ao BD

        'insere novo registro na tabela Tipos
        lErro = Comando_Executar(lComando2, "INSERT INTO TiposdeBloqueio(Codigo, NomeReduzido, Descricao) VALUES (?,?,?)", objTipo.iCodigo, objTipo.sNomeReduzido, objTipo.sDescricao)
        If lErro <> AD_SQL_SUCESSO Then Error 23695

    Else
    'tipo existe no BD

        'altera registro na tabela tipo
        lErro = Comando_ExecutarPos(lComando2, "UPDATE TiposdeBloqueio SET NomeReduzido = ? , Descricao = ? ", lComando1, objTipo.sNomeReduzido, objTipo.sDescricao)
        If lErro <> AD_SQL_SUCESSO Then Error 23696

    End If

    'confirma a Transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 23697

    lErro = Comando_Fechar(lComando)
    lErro = Comando_Fechar(lComando1)
    lErro = Comando_Fechar(lComando2)

    TipoDeBloqueio_Grava = SUCESSO

    Exit Function

Erro_TipoDeBloqueio_Grava:

    TipoDeBloqueio_Grava = Err

        Select Case Err

        Case 32125
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TIPO_BLOQUEIO_PRE_DEFINIDO", Err)
        
        Case 23686, 23687, 23688
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 23689
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 23690, 23691, 23693, 23694
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPODEBLOQUEIO1", Err, objTipo.iCodigo)

        Case 23692
            lErro = Rotina_Erro(vbOKOnly, "ERRO_NOME_REDUZIDO_TIPODEBLOQUEIO_REPETIDO", Err)

        Case 23695
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_TIPODEBLOQUEIO", Err, objTipo.iCodigo)

        Case 23696
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_TIPODEBLOQUEIO", Err, objTipo.iCodigo)

        Case 23697
             lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149750)

    End Select

    Call Transacao_Rollback
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)

    Exit Function

End Function

Function TipoDeBloqueio_Automatico(iCodigo As Integer) As Long
'retorna o número do proximo Tipo disponivel

Dim lErro As Long
Dim lNumAuto As Long

On Error GoTo Erro_TipoDeBloqueio_Automatico

    'Gera número automático.
    lErro = CF("Config_ObterAutomatico", "FATConfig", "NUM_PROX_TIPO_DE_BLOQUEIO", "TiposDeBloqueio", "Codigo", lNumAuto)
    If lErro <> SUCESSO Then Error 16146
    
    iCodigo = lNumAuto

    TipoDeBloqueio_Automatico = SUCESSO

    Exit Function

Erro_TipoDeBloqueio_Automatico:

    TipoDeBloqueio_Automatico = Err

    Select Case Err

    Case 16146
        
    Case Else
        lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149751)

    End Select

    Exit Function

End Function

Function CanalVenda_Grava(ByVal objCanal As ClassCanalVenda) As Long
'Atualiza ou insere um novo registro na tabela CanalVenda

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim lComando2 As Long
Dim lTransacao As Long
Dim sNomeReduzido As String

On Error GoTo Erro_CanalVenda_Grava

    lComando = 0
    lComando1 = 0
    lComando2 = 0
    lTransacao = 0

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 23629

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 23630

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 23631

    'inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 23632

    sNomeReduzido = String(STRING_CANAL_VENDA_NOME_REDUZIDO, 0)
    
    'pesquisa nome reduzido no BD
    lErro = Comando_Executar(lComando, "SELECT  NomeReduzido FROM CanalVenda WHERE Codigo <> ? AND NomeReduzido = ?", sNomeReduzido, objCanal.iCodigo, objCanal.sNomeReduzido)
    If lErro <> AD_SQL_SUCESSO Then Error 23633

    'verifica resultado da pesquisa
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 23634

    If lErro <> AD_SQL_SEM_DADOS Then Error 23635

    'pesquisa Canal no BD
    lErro = Comando_ExecutarPos(lComando1, "SELECT  NomeReduzido FROM CanalVenda WHERE Codigo = ? ", 0, sNomeReduzido, objCanal.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 23636

    'verifica resultado da pesquisa
    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 23637

    If lErro = AD_SQL_SEM_DADOS Then
    'Canal nao pertence ao BD
        
        'insere novo registro na tabela CanalVenda
        lErro = Comando_Executar(lComando2, "INSERT INTO CanalVenda (Codigo, NomeReduzido, Nome) VALUES (?,?,?)", objCanal.iCodigo, objCanal.sNomeReduzido, objCanal.sNome)
        If lErro <> AD_SQL_SUCESSO Then Error 23638

    Else
    'Canal existe no BD
        
        'altera registro na tabela CanalVenda
        lErro = Comando_ExecutarPos(lComando2, "UPDATE CanalVenda SET NomeReduzido = ? , Nome = ? ", lComando1, objCanal.sNomeReduzido, objCanal.sNome)
        If lErro <> AD_SQL_SUCESSO Then Error 23639

    End If

    'confirma a Transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 23640

    lErro = Comando_Fechar(lComando)
    lErro = Comando_Fechar(lComando1)
    lErro = Comando_Fechar(lComando2)

    CanalVenda_Grava = SUCESSO

    Exit Function

Erro_CanalVenda_Grava:

    CanalVenda_Grava = Err

        Select Case Err

        Case 23629, 23630, 23631
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 23632
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 23633, 23634, 23636, 23637
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CANALVENDA1", Err, objCanal.iCodigo)

        Case 23635
            lErro = Rotina_Erro(vbOKOnly, "ERRO_NOME_REDUZIDO_CANALVENDA_REPETIDO", Err)

        Case 23638
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CANALVENDA", Err, objCanal.iCodigo)

        Case 23639
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_CANALVENDA", Err, objCanal.iCodigo)

        Case 23640
             lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149752)

    End Select

    Call Transacao_Rollback
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)

    Exit Function

End Function

Function CanalVenda_Exclui(ByVal objCanal As ClassCanalVenda) As Long
'Exclui o Canal do BD

Dim lComando1 As Long
Dim lComando2 As Long
Dim lTransacao As Long
Dim lErro As Long
Dim sNomeReduzido As String
Dim sNome As String

On Error GoTo Erro_CanalVenda_Exclui

    lComando1 = 0
    lComando2 = 0
    lTransacao = 0

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 23601

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 23602

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 23603

    sNomeReduzido = String(STRING_CANAL_VENDA_NOME_REDUZIDO, 0)
    sNome = String(STRING_CANAL_VENDA_NOME, 0)

    'pesquisa Canal na tabela CanalVenda
    lErro = Comando_ExecutarPos(lComando1, "SELECT NomeReduzido,Nome FROM CanalVenda WHERE Codigo= ? ", 0, sNomeReduzido, sNome, objCanal.iCodigo)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 23604

    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 23605

    If lErro = AD_SQL_SEM_DADOS Then Error 23606

    lErro = Comando_LockExclusive(lComando1)
    If lErro <> SUCESSO Then Error 16147
    
    'verificar se está relacionado com alguma tabela
    lErro = CanalVenda_Testa_Vinculos(objCanal.iCodigo)
    If lErro <> SUCESSO Then Error 23676
    
    'exclui Canal da tabela CanalVenda
    lErro = Comando_ExecutarPos(lComando2, "DELETE FROM CanalVenda", lComando1)
    If lErro <> AD_SQL_SUCESSO Then Error 23607
    
    'confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 23608

    lErro = Comando_Fechar(lComando1)
    lErro = Comando_Fechar(lComando2)

    CanalVenda_Exclui = SUCESSO

    Exit Function

Erro_CanalVenda_Exclui:

    CanalVenda_Exclui = Err

    Select Case Err
        
        Case 16147
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_CANALVENDA", Err)
            
        Case 23601, 23602
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 23603
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 23604, 23605
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CANALVENDA", Err, Error$)

        Case 23606
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CANALVENDA_NAO_CADASTRADO", Err, objCanal.iCodigo)

        Case 23607
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CANALVENDA", Err, objCanal.iCodigo)

        Case 23608
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case 23676
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149753)

    End Select

    Call Transacao_Rollback
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)

    Exit Function

End Function

Private Function CanalVenda_Testa_Vinculos(ByVal iCodigo As Integer) As Long
'Lê no BD se existe uso deste Canal de Venda em outras tabelas
'Retorna SUCESSO se puder excluir

Dim lErro As Long
Dim lComando As Long
Dim iCodigo1 As Integer
Dim lCodPedido As Long
Dim iFilialPV As Integer
Dim iFilialNF As Integer
Dim sSerie As String
Dim lNumNF As Long

On Error GoTo Erro_CanalVenda_Testa_Vinculos
    
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 23677
    
    'Procura no BD o uso deste Canal de Venda nas tabelas PedidosDeVenda e PedidosDeVendaBaixados
    lErro = Comando_Executar(lComando, "SELECT Codigo, FilialEmpresa FROM PedidosDeVenda WHERE CanalVenda=? UNION SELECT Codigo, FilialEmpresa FROM PedidosDeVendaBaixados WHERE CanalVenda=?", lCodPedido, iFilialPV, iCodigo, iCodigo)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 23678
        
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 23679

    If lErro = AD_SQL_SUCESSO Then Error 19322
    
    sSerie = String(STRING_SERIE, 0)

'mario 2/7/99 Remover NFiscalBaixada comando reposicionado devido a retirada do codigo abaixo
'    'Procura no BD o uso deste Canal de Venda nas tabelas NFiscal e NFiscalBaixadas
'    lErro = Comando_Executar(lComando, "SELECT Canal FROM NFiscal WHERE Canal=? UNION SELECT Canal FROM NFiscalBaixadas WHERE Canal=?", iCodigo1, iCodigo, iCodigo)
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 19324
        
    'Procura no BD o uso deste Canal de Venda na tabela NFiscal
    lErro = Comando_Executar(lComando, "SELECT FilialEmpresa, Serie, NumNotaFiscal FROM NFiscal WHERE Canal=?", iFilialNF, sSerie, lNumNF, iCodigo)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 19324
        
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 19325

    If lErro = AD_SQL_SUCESSO Then Error 19326
    
    CanalVenda_Testa_Vinculos = SUCESSO
    
    Call Comando_Fechar(lComando)
        
    Exit Function
    
Erro_CanalVenda_Testa_Vinculos:
    
    CanalVenda_Testa_Vinculos = Err
    
    Select Case Err
        
        Case 19322
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CANAL_EM_PV", Err, iCodigo, lCodPedido, iFilialPV)

        Case 19326
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CANAL_EM_NF", Err, iCodigo, lNumNF, sSerie, iFilialNF)
        
        Case 19324, 19325
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL_NFISCALBAIXADAS", Err)
            
        Case 23677
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 23678, 23679
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PEDIDOSDEVENDA_PEDIDOSDEVENDABAIXADOS", Err)
             
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149754)
    
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function
    
End Function

Function CanalVenda_Automatico(iCodigo As Integer) As Long
'retorna o número do proximo Canal disponivel

Dim lErro As Long, lNumAuto As Long

On Error GoTo Erro_CanalVenda_Automatico

    lErro = CF("Config_ObterAutomatico", "CPRConfig", "NUM_PROX_CANALVENDA", "CanalVenda", "Codigo", lNumAuto)
    If lErro <> SUCESSO Then Error 23614
    
    iCodigo = lNumAuto
    
    CanalVenda_Automatico = SUCESSO
    
    Exit Function
    
Erro_CanalVenda_Automatico:

    CanalVenda_Automatico = Err
    
    Select Case Err

        Case 23614
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149755)

    End Select

    Exit Function
    
End Function

Function PedidoDeVenda_Grava_Comissoes(ByVal objPedidoDeVenda As ClassPedidoDeVenda) As Long
'grava no bd as comissoes de um PV (tabela ComissoesPedVendas)

Dim lErro As Long
Dim alComando(3) As Long
Dim lTransacao As Long
Dim iIndice As Integer
Dim objComissaoPedidoVenda As New ClassComissaoPedVendas
Dim tComissaoPedidoVenda As typeComissaoPedVenda

On Error GoTo Erro_PedidoDeVenda_Grava_Comissoes

    For iIndice = LBound(alComando) To UBound(alComando)

        alComando(iIndice) = 0
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 58380

    Next

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 58381
    
    'Lê o Pedido de Venda e Locka
    'Verifica se o (Total dos Pedidos - IRRF ) < Total das Comissoes
    lErro = ComissoesPV_Le_Lock_ObjetosRelacionados(alComando(3), objPedidoDeVenda)
    If lErro <> SUCESSO Then Error 58457
    
    'Exclui as Comissões do Pedido de Venda
    lErro = CF("ComissoesPV_Exclui", objPedidoDeVenda)
    If lErro <> SUCESSO Then Error 58382
    
    'Inclui as novas comissoes do Pedido de Venda
    lErro = CF("ComissoesPV_Grava", objPedidoDeVenda)
    If lErro <> SUCESSO Then Error 58383
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 58384

    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    PedidoDeVenda_Grava_Comissoes = SUCESSO

    Exit Function

Erro_PedidoDeVenda_Grava_Comissoes:

    PedidoDeVenda_Grava_Comissoes = Err

    Select Case Err

        Case 58380
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err, Error$)

        Case 58381
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 58382, 58383, 58457 'Tratados nas Rotinas Chamadas

        Case 58384
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149756)

    End Select

   'Fechamento transação
    Call Transacao_Rollback

    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function ComissoesPV_Le_Lock_ObjetosRelacionados(ByVal lComando As Long, ByVal objPedidoDeVenda As ClassPedidoDeVenda) As Long
'Le os Dados Necessarios em Pedido de Venda e faz lock do Pedido de Venda
'verifica se o total das comissões não ultrapassa os totais do Pedido de Venda

Dim lErro As Long
Dim dValorTotalComissoes As Double
Dim iIndice As Integer

On Error GoTo Erro_ComissoesPV_Le_Lock_ObjetosRelacionados

    'Lê e Locka o Pedido
    lErro = CF("PedidoDeVenda_Le_Lock", lComando, objPedidoDeVenda)
    If lErro <> SUCESSO And lErro <> 36986 Then Error 58458
    
    'Se não encontrou ---> Erro
    If lErro = 36986 Then Error 58459
    
    'Le o IR da Fonte do Pedido de Venda
    lErro = CF("PedidoDeVenda_Le_Tributacao", objPedidoDeVenda)
    If lErro <> SUCESSO And lErro <> 27611 Then Error 58460
    
    For iIndice = 1 To objPedidoDeVenda.colComissoes.Count
        
        'Soma os Valores das Comissões para obter o Valor total das comissões
        dValorTotalComissoes = dValorTotalComissoes + objPedidoDeVenda.colComissoes(iIndice).dValor
        
    Next
    
    'Testa se o total de Comissão é menor que o Valor Total - Valor IRRF
    If dValorTotalComissoes > objPedidoDeVenda.dValorTotal - objPedidoDeVenda.objTributacaoPV.dIRRFValor Then Error 58461
        
    ComissoesPV_Le_Lock_ObjetosRelacionados = SUCESSO
    
    Exit Function
    
Erro_ComissoesPV_Le_Lock_ObjetosRelacionados:
    
    ComissoesPV_Le_Lock_ObjetosRelacionados = Err
    
    Select Case Err
        
        Case 58458, 58460 'Tratados nas Rotinas chamadas
        
        Case 58459
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PEDIDO_VENDA_NAO_CADASTRADO", Err, objPedidoDeVenda.lCodigo)
        
        Case 58461
            lErro = Rotina_Erro(vbOKOnly, "ERRO_VALOR_TOTAL_COMISSAO_INVALIDO", Err, dValorTotalComissoes, objPedidoDeVenda.dValorTotal - objPedidoDeVenda.objTributacaoPV.dIRRFValor)
                
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149757)
    
    End Select
        
    Exit Function
    
End Function

Function PrevVenda_Exclui(ByVal objPrevVenda As ClassPrevVenda) As Long
'Exclui a previsão de venda do BD

Dim lErro As Long
Dim lComando1 As Long
Dim lComando2 As Long
Dim lTransacao As Long
Dim sCodigo As String
Dim iFilialEmpresa As Integer

On Error GoTo Erro_PrevVenda_Exclui

    'Abre os comandos
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 34535

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 34536

    'Inicia a transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 34537

    'Inicializa string com o tamanho do BD
    sCodigo = String(STRING_PREVVENDA_CODIGO, 0)

    'Pequisa a previsão em questão no BD
    lErro = Comando_ExecutarPos(lComando1, "SELECT FilialEmpresa, Codigo FROM PrevVenda WHERE FilialEmpresa = ? AND Codigo = ?", 0, iFilialEmpresa, sCodigo, giFilialEmpresa, objPrevVenda.sCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 34538

    'Lê a previsão se estiver no BD
    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 34539

    'Não encontrou a previsão no BD
    If lErro = AD_SQL_SEM_DADOS Then Error 34540

    'Lock da previsão
    lErro = Comando_LockExclusive(lComando1)
    If lErro <> AD_SQL_SUCESSO Then Error 34541

    'Exclui a previsão do BD - Falta alterar filialempresa
    lErro = Comando_ExecutarPos(lComando2, "DELETE FROM PrevVenda", lComando1)
    If lErro <> AD_SQL_SUCESSO Then Error 34542

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 34543

    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando1)

    PrevVenda_Exclui = SUCESSO

    Exit Function

Erro_PrevVenda_Exclui:

    PrevVenda_Exclui = Err

    Select Case Err

        Case 34535, 34536
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 34537
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 34538, 34539
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PREVVENDA", Err, objPrevVenda.sCodigo)

        Case 34540
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PREVVENDA_NAO_CADASTRADA", Err, objPrevVenda.sCodigo)

        Case 34541
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_PREVVENDA", Err, objPrevVenda.sCodigo)

        Case 34542
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_PREVVENDA", Err, objPrevVenda.sCodigo)

        Case 34543
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149758)
    End Select

    Call Transacao_Rollback
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Function PrevVenda_Grava(ByVal objPrevVenda As ClassPrevVenda) As Long
'Grava a Previsão de Venda no BD

Dim alComando(1 To 5) As Long
Dim lTransacao As Long
Dim lErro As Long
Dim sCodigo As String
Dim tProduto As typeProduto
Dim iAlmoxarifado As Integer
Dim iIndice As Integer
Dim objProdutoFilial As New ClassProdutoFilial

On Error GoTo Erro_PrevVenda_Grava

    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 58256
    Next
    
    'Inicia a transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 58257

    If objPrevVenda.iCodRegiao > 0 Then
        
        'Lock na Regiao de Venda
        lErro = CF("RegiaoVenda_Lock", alComando(4), objPrevVenda.iCodRegiao)
        If lErro <> SUCESSO Then gError 58259
    
    End If
    
    objProdutoFilial.sProduto = objPrevVenda.sProduto
    objProdutoFilial.iFilialEmpresa = objPrevVenda.iFilialEmpresa
    
    'Faz lock do registro associado na tabela ProdutoFilial
    lErro = CF("ProdutoFilial_Le_Lock", alComando(5), objProdutoFilial)
    If lErro <> SUCESSO And lErro <> 41770 Then gError 25656
    If lErro = 41770 Then gError 25657
    
    'Lê no BD as caracteristicas do Produto e Locka (Gerencial, Faturamento)
    lErro = Comando_ExecutarLockado(alComando(1), "SELECT Gerencial, Faturamento FROM Produtos WHERE Codigo = ? ", tProduto.iGerencial, tProduto.iFaturamento, objPrevVenda.sProduto)
    If lErro <> AD_SQL_SUCESSO Then gError 58258
    
    'Faz Lock Shared do Produto
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 58267
        
    'Faz Lock Shared do Produto
    lErro = Comando_LockShared(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 58259
    
    'Se for um Produto Gerencial ---> ERRO
    If tProduto.iGerencial = GERENCIAL Then gError 58260
    
    'Se for um Produto não Vendavel ----> ERRO
    If tProduto.iFaturamento = PRODUTO_NAO_VENDAVEL Then gError 58261
    
    'Inicializa string com o tamanho do BD
    sCodigo = String(STRING_PREVVENDA_CODIGO, 0)

    'Pesquisa no BD a previsão em questão
    lErro = Comando_ExecutarPos(alComando(2), "SELECT Codigo FROM PrevVenda WHERE FilialEmpresa = ? AND Codigo = ?", 0, sCodigo, giFilialEmpresa, objPrevVenda.sCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 58262

    'Lê a previsão se estiver no BD
    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 58263
    
    'Se encontrou a previsão -> Alteração
    If lErro = AD_SQL_SUCESSO Then

        'Atualiza a Previsão
        lErro = Comando_ExecutarPos(alComando(3), "UPDATE PrevVenda SET DataPrevisao = ? , Produto = ?, DataInicio = ?, DataFim = ?, CodRegiao = ?, Quantidade = ?, Valor = ?", alComando(2), objPrevVenda.dtDataPrevisao, objPrevVenda.sProduto, objPrevVenda.dtDataInicio, objPrevVenda.dtDataFim, objPrevVenda.iCodRegiao, objPrevVenda.dQuantidade, objPrevVenda.dValor)
        If lErro <> AD_SQL_SUCESSO Then gError 58264

    Else 'Não encontrou a previsão -> Inserção

        'Insere a Previsão
        lErro = Comando_Executar(alComando(3), "INSERT INTO PrevVenda (FilialEmpresa, Codigo, DataPrevisao, Produto, DataInicio, DataFim, CodRegiao, Quantidade, Valor) VALUES (?,?,?,?,?,?,?,?,?)", giFilialEmpresa, objPrevVenda.sCodigo, objPrevVenda.dtDataPrevisao, objPrevVenda.sProduto, objPrevVenda.dtDataInicio, objPrevVenda.dtDataFim, objPrevVenda.iCodRegiao, objPrevVenda.dQuantidade, objPrevVenda.dValor)
        If lErro <> AD_SQL_SUCESSO Then gError 58265

    End If

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 58266

    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    PrevVenda_Grava = SUCESSO

    Exit Function

Erro_PrevVenda_Grava:

    PrevVenda_Grava = gErr

    Select Case gErr

        Case 25656, 58259 'Tratado na Rotina chamada
        
        Case 25657
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_FILIAL_NAO_CADASTRADO", gErr, objProdutoFilial.sProduto, objProdutoFilial.iFilialEmpresa)
     
        Case 58256
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 58257
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
        
        Case 58258, 58259, 58267
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOS", gErr, objPrevVenda.sProduto)
        
        Case 58260
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_GERENCIAL", gErr, objPrevVenda.sProduto)
        
        Case 58261
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_NAO_PODE_SER_VENDIDO2", gErr, objPrevVenda.sProduto)
        
        Case 58262, 58263
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PREVVENDA", gErr, objPrevVenda.sCodigo)

        Case 58264
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_PREVVENDA", gErr, objPrevVenda.sCodigo)

        Case 58265
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_PREVVENDA", gErr, objPrevVenda.sCodigo)

        Case 58266
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149759)

    End Select

    Call Transacao_Rollback
    
    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Bloqueio_Libera(ByVal colBloqueioPV As Collection) As Long
'libera os bloqueios passados na colecao colBloqueioPV

Dim alComando(1 To 17) As Long
Dim lErro As Long
Dim iIndice As Integer
Dim objBloqueioPV As ClassBloqueioPV

On Error GoTo Erro_Bloqueio_Libera

    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 36646
    Next

    For Each objBloqueioPV In colBloqueioPV

        'processa cada liberação de bloqueio. Mesmo que haja erro, prossegue para o proximo bloqueio
        lErro = Bloqueio_Libera_Trans(alComando(), objBloqueioPV)
        
        'fecha os comandos
        For iIndice = LBound(alComando) To UBound(alComando)
            Call Comando_Fechar(alComando(iIndice))
        Next
        For iIndice = LBound(alComando) To UBound(alComando)
            alComando(iIndice) = Comando_Abrir()
            If alComando(iIndice) = 0 Then Error 36646
        Next

    Next

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Bloqueio_Libera = SUCESSO

    Exit Function

Erro_Bloqueio_Libera:

    Bloqueio_Libera = Err

    Select Case Err

        Case 36646
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149760)

    End Select

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Bloqueio_Libera_Trans(alComando() As Long, ByVal objBloqueioPV As ClassBloqueioPV) As Long
'tenta liberar o bloqueio passado como parametro

Dim lTransacao As Long
Dim lErro As Long
Dim iIndice As Integer
Dim iSequencial As Integer
Dim lCodigoReserva As Long
Dim dPedidoFaltaReservar As Double
Dim dPedidoReserva As Double

On Error GoTo Erro_Bloqueio_Libera_Trans

    'Inicia a transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 36994

    'descobre o próximo código de reserva disponível e loca-o
    lErro = CF("Reserva_Automatico1", alComando(3), lCodigoReserva, objBloqueioPV.iFilialEmpresa)
    If lErro <> SUCESSO Then gError 36682

    'Pesquisa no BD o bloqueio em questão
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Sequencial FROM BloqueiosPV WHERE FilialEmpresa = ? AND PedidoDeVenda = ? AND TipoDeBloqueio = ? AND Datalib = ?", 0, iSequencial, objBloqueioPV.iFilialEmpresa, objBloqueioPV.lPedidoDeVendas, objBloqueioPV.iTipoDeBloqueio, DATA_NULA)
    If lErro <> AD_SQL_SUCESSO Then gError 36648

    'Lê o bloqueio
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 36649

    'Se encontrou o bloqueio
    If lErro = AD_SQL_SUCESSO Then

        'Loca o bloqueio
        lErro = Comando_LockExclusive(alComando(1))
        If lErro <> AD_SQL_SUCESSO Then gError 36650

        objBloqueioPV.iFilialEmpresa = giFilialEmpresa
        objBloqueioPV.iSequencial = iSequencial

        Select Case objBloqueioPV.iTipoDeBloqueio
        
            Case BLOQUEIO_TOTAL
                lErro = Processa_Bloqueio_Total(alComando(), objBloqueioPV, lCodigoReserva)
                If lErro <> SUCESSO Then gError 36706
            
            Case BLOQUEIO_PARCIAL
                lErro = Bloqueio_Parcial_Libera(alComando(), objBloqueioPV, lCodigoReserva, dPedidoFaltaReservar, dPedidoReserva)
                If lErro <> SUCESSO Then gError 36693
                
                'se não falta nada para reservar ==> libera o bloqueio parcial
                If dPedidoFaltaReservar = 0 Then
                    lErro = Bloqueio_Libera_Atualiza(alComando(1), alComando(2), objBloqueioPV)
                    If lErro <> SUCESSO Then gError 36694
                End If
                
            Case BLOQUEIO_NAO_RESERVA
                lErro = Processa_Bloqueio_Nao_Reserva(alComando(), objBloqueioPV, lCodigoReserva)
                If lErro <> SUCESSO Then gError 36701
        
            Case BLOQUEIO_CREDITO
                lErro = Processa_Bloqueio_Credito(alComando(), objBloqueioPV)
                If lErro <> SUCESSO Then gError 36961
        
                'Atualiza a tabela de BloqueiosPV com os dados da liberação do bloqueio em questão
                lErro = Bloqueio_Libera_Atualiza(alComando(1), alComando(2), objBloqueioPV)
                If lErro <> SUCESSO Then gError 36997
            
            Case BLOQUEIO_DIAS_ATRASO 'Trecho incluido por leo em 21/02/02
                lErro = Processa_Bloqueio_DiasAtraso(objBloqueioPV)
                If lErro <> SUCESSO Then gError 94333
                
                'Atualiza a tabela de BloqueiosPV com os dados da liberação do bloqueio em questão
                lErro = Bloqueio_Libera_Atualiza(alComando(1), alComando(2), objBloqueioPV)
                If lErro <> SUCESSO Then gError 36997

            Case BLOQUEIO_PRECO_BAIXO
                                
                lErro = CF("Processa_Bloqueio_PrecoBaixo", objBloqueioPV)
                If lErro <> SUCESSO Then gError 94333
                
                'Atualiza a tabela de BloqueiosPV com os dados da liberação do bloqueio em questão
                lErro = Bloqueio_Libera_Atualiza(alComando(1), alComando(2), objBloqueioPV)
                If lErro <> SUCESSO Then gError 36997
                                
            Case BLOQUEIO_PRECO_DEFASADO
                                
                lErro = CF("Processa_Bloqueio_PrecoDefasado", objBloqueioPV)
                If lErro <> SUCESSO Then gError 94333
                
                'Atualiza a tabela de BloqueiosPV com os dados da liberação do bloqueio em questão
                lErro = Bloqueio_Libera_Atualiza(alComando(1), alComando(2), objBloqueioPV)
                If lErro <> SUCESSO Then gError 36997
                
            Case Else
                lErro = Bloqueio_Libera_Atualiza(alComando(1), alComando(2), objBloqueioPV)
                If lErro <> SUCESSO Then gError 36651
        
        End Select
        
    End If

    'guarda o próximo código de reserva disponível
    lErro = CF("Reserva_Automatico3", alComando(3), alComando(4), lCodigoReserva)
    If lErro <> SUCESSO Then gError 36683

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 36995

    Bloqueio_Libera_Trans = SUCESSO

    Exit Function

Erro_Bloqueio_Libera_Trans:

    Bloqueio_Libera_Trans = gErr

    objBloqueioPV.sCodUsuarioLib = ""
    objBloqueioPV.sResponsavelLib = ""
    objBloqueioPV.dtDataLib = DATA_NULA

    Select Case gErr

        Case 36994
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 36648, 36649
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BLOQUEIOPV", gErr, objBloqueioPV.iFilialEmpresa, objBloqueioPV.lPedidoDeVendas, objBloqueioPV.iTipoDeBloqueio)

        Case 36650
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_BLOQUEIOPV", gErr, objBloqueioPV.iFilialEmpresa, objBloqueioPV.lPedidoDeVendas, iSequencial)

        Case 36651, 36682, 36683, 36693, 36694, 36701, 36706, 36961, 36997, 94333

        Case 36995
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149761)

    End Select

    Call Transacao_Rollback

    Exit Function

End Function

Private Function Processa_Bloqueio_Total(alComando() As Long, ByVal objBloqueioPV As ClassBloqueioPV, ByVal lCodigoReserva As Long) As Long
'trata os bloqueios totais

Dim lErro As Long

On Error GoTo Erro_Processa_Bloqueio_Total

    'libera o bloqueio total
    lErro = Bloqueio_Libera_Atualiza(alComando(1), alComando(2), objBloqueioPV)
    If lErro <> SUCESSO Then Error 36699

    'cria o bloqueio nao reserva
    objBloqueioPV.dtData = gdtDataAtual
    objBloqueioPV.iTipoDeBloqueio = BLOQUEIO_NAO_RESERVA
    
    'insere o bloqueio não reserva
    lErro = CF("BloqueioPV_Insere", alComando(12), objBloqueioPV)
    If lErro <> SUCESSO Then Error 36700
        
    'processa o bloqueio não reserva
    lErro = Processa_Bloqueio_Nao_Reserva(alComando(), objBloqueioPV, lCodigoReserva)
    If lErro <> SUCESSO Then Error 36701

    Processa_Bloqueio_Total = SUCESSO
    
    Exit Function
    
Erro_Processa_Bloqueio_Total:

    Processa_Bloqueio_Total = Err
    
    Select Case Err

        Case 36699, 36700, 36701

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149762)

    End Select

    Exit Function

End Function

Private Function Processa_Bloqueio_Credito(alComando() As Long, ByVal objBloqueioPV As ClassBloqueioPV) As Long
'trata os bloqueios de crédito
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lErro As Long
Dim dPedidoFaltaReservar As Double
Dim dPedidoReserva As Double
Dim objCliente As New ClassCliente
Dim objPedidoVenda As New ClassPedidoDeVenda
Dim objLiberacaoCredito As New ClassLiberacaoCredito
Dim objValorLiberadoCredito As New ClassValorLiberadoCredito
Dim objItemPedido As ClassItemPedido
Dim dValorPedido As Double
Dim objClienteEstatistica As New ClassFilialClienteEst

On Error GoTo Erro_Processa_Bloqueio_Credito

    objPedidoVenda.iFilialEmpresa = objBloqueioPV.iFilialEmpresa
    objPedidoVenda.lCodigo = objBloqueioPV.lPedidoDeVendas
    
    'Lê o Pedido de Venda a partir do Código passado.
    lErro = CF("PedidoDeVenda_Le_Lock", alComando(17), objPedidoVenda)
    If lErro <> SUCESSO And lErro <> 36986 Then Error 36993

    'se o pedido não foi encontrado ==> erro
    If lErro = 36986 Then Error 36964
    
    'le os itens do pedido
    lErro = CF("PedidoDeVenda_Le_Itens", objPedidoVenda)
    If lErro <> SUCESSO Then Error 36996
    
    'calcula o valor a ser liberado
    For Each objItemPedido In objPedidoVenda.colItensPedido
        dValorPedido = dValorPedido + ((objItemPedido.dQuantidade - objItemPedido.dQuantFaturada - objItemPedido.dQuantCancelada) * objItemPedido.dPrecoUnitario)
    Next
    
    objCliente.lCodigo = objPedidoVenda.lCliente

    'Le os dados do cliente relacionado ao pedido de venda
    lErro = CF("Cliente_ObterDadosBasicos1", alComando(13), objCliente)
    If lErro <> SUCESSO Then Error 36962
    
    objClienteEstatistica.lCodCliente = objCliente.lCodigo
    objClienteEstatistica.iFilialEmpresa = objPedidoVenda.iFilialEmpresa
    
    'Lê os dados de estatística do cliente
    lErro = CF("Cliente_Le_Estatistica_Credito", objClienteEstatistica)
    If lErro <> SUCESSO Then Error 52710
    
    'se o valor do pedido ultrapassar o credito do cliente menos o que ele já tem encomendado
    If objCliente.iBloqueado <> 0 Or (dValorPedido > objCliente.dLimiteCredito - (objClienteEstatistica.dSaldoTitulos + objClienteEstatistica.dSaldoPedidosLiberados + objClienteEstatistica.dValorNFsNaoFaturadas)) Then
        
        objLiberacaoCredito.sCodUsuario = objBloqueioPV.sCodUsuario
        
        'verificar se o usuário tem autorizacao para liberar o valor
        lErro = CF("LiberacaoCredito_Le", objLiberacaoCredito)
        If lErro <> SUCESSO And lErro <> 36968 Then Error 36975
        
        'se não foi encontrado autorização para o usuario liberar credito
        If lErro = 36968 Then Error 36976
        
        'se o valor do pedido ultrapassar o limite de credito que o usuario pode conceder por operacao
        If dValorPedido > objLiberacaoCredito.dLimiteOperacao Then Error 36977
        
        objValorLiberadoCredito.sCodUsuario = objBloqueioPV.sCodUsuario
        objValorLiberadoCredito.iAno = Year(objBloqueioPV.dtDataLib)
        
        'Lê a estatistica de liberação de credito de um usuario em um determinado ano
        lErro = CF("ValorLiberadoCredito_Lock", objValorLiberadoCredito)
        If lErro <> SUCESSO And lErro <> 44470 Then Error 36978
        
        'se o valor do pedido ultrapassar o valor mensal que o usuario tem capacidade de liberar
        If dValorPedido > objLiberacaoCredito.dLimiteMensal - objValorLiberadoCredito.adValorLiberado(Month(objBloqueioPV.dtDataLib)) Then Error 36980
        
        'Atualiza a estatistica de liberação de credito do usuario
        lErro = CF("ValorLiberadoCredito_Grava", objValorLiberadoCredito.sCodUsuario, dValorPedido, objBloqueioPV.dtDataLib)
        If lErro <> SUCESSO Then Error 44475
        
    End If
    
    Processa_Bloqueio_Credito = SUCESSO
    
    Exit Function
    
Erro_Processa_Bloqueio_Credito:

    Processa_Bloqueio_Credito = Err
    
    Select Case Err

        Case 36962, 36975, 36978, 36996, 44475, 52710, 36993 'Tratados nas Rotinas Chamadas
        
        Case 36964
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PEDIDO_VENDA_NAO_CADASTRADO", Err, objPedidoVenda.lCodigo)

        Case 36976, 36979
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LIBERACAOCREDITO_INEXISTENTE1", Err, objLiberacaoCredito.sCodUsuario, objBloqueioPV.lPedidoDeVendas)
        
        Case 36977
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LIBERACAOCREDITO_LIMITEOPERACAO1", Err, objBloqueioPV.lPedidoDeVendas, objLiberacaoCredito.sCodUsuario)
        
        Case 36980
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LIBERACAOCREDITO_LIMITEMENSAL1", Err, objBloqueioPV.lPedidoDeVendas, objLiberacaoCredito.sCodUsuario)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149763)

    End Select

    Exit Function

End Function

Function ValorLiberadoCredito_Grava(ByVal sCodUsuario As String, ByVal dValor As Double, ByVal dtData As Date) As Long
'Atualiza a estatistica de liberação de credito de um usuario (sCodUsuario) em um determinado mes/ano (dtData) com o valor (dValor).
'se não existir a estitistica para o usuario/ano, cria.
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lComando As Long
Dim lComando1 As Long
Dim lErro As Long
Dim tValorLiberadoCredito As typeValorLiberadoCredito
Dim iAno As Integer

On Error GoTo Erro_ValorLiberadoCredito_Grava

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 44460
    
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 44461

    'Verifica se a os dados estatisticos de liberacao de credito existe
    lErro = Comando_ExecutarPos(lComando, "SELECT Ano FROM ValorLiberadoCredito WHERE CodUsuario = ? AND Ano = ? ", 0, iAno, sCodUsuario, Year(dtData))
    If lErro <> AD_SQL_SUCESSO Then Error 44462

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 44463

    'Liberacao não cadastrada ==> insere a liberacao
    If lErro = AD_SQL_SEM_DADOS Then

        lErro = Comando_Executar(lComando1, "INSERT INTO ValorLiberadoCredito (CodUsuario, Ano, Liberado" + CStr(Month(dtData)) + ") VALUES (?,?,?)", sCodUsuario, Year(dtData), dValor)
        If lErro <> AD_SQL_SUCESSO Then Error 44464
    
    Else
    
        lErro = Comando_LockExclusive(lComando)
        If lErro <> AD_SQL_SUCESSO Then Error 44465

        lErro = Comando_ExecutarPos(lComando1, "UPDATE ValorLiberadoCredito SET Liberado" + CStr(Month(dtData)) + " = Liberado" + CStr(Month(dtData)) + " + ?", lComando, dValor)
        If lErro <> AD_SQL_SUCESSO Then Error 44466

    End If

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    ValorLiberadoCredito_Grava = SUCESSO

Exit Function

Erro_ValorLiberadoCredito_Grava:

    ValorLiberadoCredito_Grava = Err

    Select Case Err

        Case 44460, 44461
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 44462, 44463
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_VALORLIBERADOCREDITO", Err, sCodUsuario, Year(dtData))

        Case 44464
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_VALORLIBERADOCREDITO", Err, sCodUsuario, Year(dtData))

        Case 44465
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_VALORLIBERADOCREDITO", Err, sCodUsuario, Year(dtData))

        Case 44466
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_VALORLIBERADOCREDITO", Err, sCodUsuario, Year(dtData))

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149764)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Private Function Processa_NFiscal_Credito(ByVal objNFiscal As ClassNFiscal) As Long
'verifica se o cliente possui o crédito para faturar a nota fiscal.
'Se tiver atualiza as tabelas de cliente e estatistica de liberacao do usuario
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lErro As Long
Dim objLiberacaoCredito As New ClassLiberacaoCredito
Dim objValorLiberadoCredito As New ClassValorLiberadoCredito
Dim lComando As Long
Dim lComando1 As Long
Dim tCliente As typeCliente
Dim sCodUsuario As String
Dim dValor As Double
Dim dtData As Date
Dim objClienteEstatistica As New ClassFilialClienteEst
Dim bNFPedido As Boolean
Dim iCreditoAprovado As Integer
Dim objPedidoVenda As New ClassPedidoDeVenda
Dim objCliente As New ClassCliente
Dim iTestar As Integer

On Error GoTo Erro_Processa_NFiscal_Credito

    If objNFiscal.iNaoVerificaCredito = VERIFICA_CREDITO_CLIENTE And objNFiscal.iTipoNFiscal <> DOCINFO_NFISFVFE And objNFiscal.iTipoNFiscal <> DOCINFO_NFISVFE And objNFiscal.iTipoNFiscal <> DOCINFO_NFISSAT And objNFiscal.iTipoNFiscal <> DOCINFO_NFCEPDV And objNFiscal.iTipoNFiscal <> DOCINFO_NFISFVPAF Then

        lComando = Comando_Abrir()
        If lComando = 0 Then gError 44482
    
        lComando1 = Comando_Abrir()
        If lComando1 = 0 Then gError 44483
        
        lErro = CF("TipoNFiscal_Testar_Credito", objNFiscal.iTipoNFiscal, iTestar)
        If lErro <> SUCESSO Then gError 94364
        
        If iTestar <> 0 Then
    
            lErro = Processa_NFiscal_Atraso(objNFiscal)
            If lErro <> SUCESSO Then gError 94364
            
            'Verifica se NFiscal é oriunda de Pedido
            If objNFiscal.iTipoNFiscal = DOCINFO_NFISFVPV Or objNFiscal.iTipoNFiscal = DOCINFO_NFISVPV Or objNFiscal.lNumPedidoVenda <> 0 Then
                bNFPedido = True
            Else
                bNFPedido = False
            End If
            
            'Se for testa se Pedido tem crédito aprovado
            If bNFPedido Then
            
                objPedidoVenda.lCodigo = objNFiscal.lNumPedidoVenda
                objPedidoVenda.iFilialEmpresa = objNFiscal.iFilialPedido
        
                'verifica se o pedido tem credito aprovado
                lErro = CF("BloqueiosPV_Credito_Aprovado_Testa", objPedidoVenda, iCreditoAprovado)
                If lErro <> SUCESSO Then gError 25740
        
            End If
            
            'Inserido por Wagner
            '##################
            objCliente.lCodigo = objNFiscal.lCliente
            'le os dados do cliente
            lErro = CF("Cliente_Le", objCliente)
            If lErro <> SUCESSO And lErro <> 12293 Then gError 129149
            
            If objCliente.iAtivo <> CLIENTE_ATIVO Then gError 129150
            '##################
            
            'tulio140103
            'se for pra verificar limite de credito
            If gobjCRFAT.iCreditoVerificaLimite = VERIFICAR_LIMITE_CREDITO Then
            
                'se NF não for oriunda de PV ou se crédito não está liberado
                If (Not bNFPedido) Or iCreditoAprovado <> BLOQUEIO_CREDITO_LIBERADO Then
                
                    'Lê os saldos e o limite de credito do Cliente
                    lErro = Comando_ExecutarLockado(lComando, "SELECT LimiteCredito, Bloqueado FROM Clientes WHERE Codigo = ?", tCliente.dLimiteCredito, tCliente.iBloqueado, objNFiscal.lCliente)
                    If lErro <> AD_SQL_SUCESSO Then gError 44484
                
                    lErro = Comando_BuscarPrimeiro(lComando)
                    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 44485
                    
                    'se não encontrou os dados do cliente
                    If lErro = AD_SQL_SEM_DADOS Then gError 44486
                
                    'loca o cliente
                    lErro = Comando_LockExclusive(lComando)
                    If lErro <> AD_SQL_SUCESSO Then gError 44487
                        
                    'Passa chave de objClienteEstatistica
                    objClienteEstatistica.lCodCliente = objNFiscal.lCliente
                    objClienteEstatistica.iFilialEmpresa = objNFiscal.iFilialEmpresa
                    
                    'Le dinamicamente o Saldo dos Titulos e dos Pedidos Liberados
                    lErro = CF("Cliente_Le_Estatistica_Credito", objClienteEstatistica)
                    If lErro <> SUCESSO Then gError 52955
                        
                    'Verifica se a soma dos creditos em Pedidos, Titulos e NFs ultrapassa o limite de Credito do Cliente
                    If tCliente.iBloqueado <> 0 Or (tCliente.dLimiteCredito < (objClienteEstatistica.dSaldoTitulos + objClienteEstatistica.dSaldoPedidosLiberados + objClienteEstatistica.dValorNFsNaoFaturadas + IIf(bNFPedido Or objNFiscal.iClasseDocCPR = CPR_TITULO_RECEBER, 0, objNFiscal.dValorTotal))) Then
                    
                        'se um usuário não autorizou o credito ==> erro
                        If Len(objNFiscal.sCodUsuario) = 0 Then gError 44488
                            
                            objLiberacaoCredito.sCodUsuario = objNFiscal.sCodUsuario
                        
'                        If giTipoVersao = VERSAO_FULL Then
                        
                            'verificar se o usuário tem autorizacao para liberar o valor
                            lErro = CF("LiberacaoCredito_Lock", objLiberacaoCredito)
                            If lErro <> SUCESSO And lErro <> 44479 Then gError 44489
                            
                            'se não foi encontrado autorização para o usuario liberar credito
                            If lErro = 44479 Then gError 44490
                            
                            'se o valor da nota ultrapassar o limite de credito que o usuario pode conceder por operacao
                            If objNFiscal.dValorTotal > objLiberacaoCredito.dLimiteOperacao Then gError 44491
                            
                            objValorLiberadoCredito.sCodUsuario = objNFiscal.sCodUsuario
                            objValorLiberadoCredito.iAno = Year(gdtDataAtual)
                            
                            'Lê a estatistica de liberação de credito de um usuario em um determinado ano
                            lErro = CF("ValorLiberadoCredito_Lock", objValorLiberadoCredito)
                            If lErro <> SUCESSO And lErro <> 44470 Then gError 44492
                            
                            'se o valor da nota ultrapassar o valor mensal que o usuario tem capacidade de liberar
                            If objNFiscal.dValorTotal > objLiberacaoCredito.dLimiteMensal - objValorLiberadoCredito.adValorLiberado(Month(gdtDataAtual)) Then gError 44493
                        
                            sCodUsuario = objValorLiberadoCredito.sCodUsuario
                        
'                        ElseIf giTipoVersao = VERSAO_LIGHT Then
'
'                            sCodUsuario = objNFiscal.sCodUsuario
'
'                        End If
                        
                        dValor = objNFiscal.dValorTotal
                        dtData = gdtDataAtual
                        
                        'Atualiza a estatistica de liberação de credito do usuario
                        lErro = CF("ValorLiberadoCredito_Grava", sCodUsuario, dValor, dtData)
                        If lErro <> SUCESSO Then gError 44494
                        
                    End If
                    
                End If
                
            End If
        
        End If
        
        Call Comando_Fechar(lComando)
        Call Comando_Fechar(lComando1)
        
    End If
        
    Processa_NFiscal_Credito = SUCESSO
    
    Exit Function
    
Erro_Processa_NFiscal_Credito:

    Processa_NFiscal_Credito = gErr
    
    Select Case gErr

        Case 44482, 44483
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 44484, 44485
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CLIENTES1", gErr, objNFiscal.lCliente)

        Case 44486
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CLIENTE_NAO_CADASTRADO", gErr, objNFiscal.lCliente)

        Case 44487
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_CLIENTES", gErr, objNFiscal.lCliente)
        
        Case 44488
           lErro = Rotina_Erro(vbOKOnly, "ERRO_CLIENTE_SEM_CREDITO", gErr, objNFiscal.lCliente)

        Case 25740, 44489, 44492, 44494, 52955, 94364

        Case 44490
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LIBERACAOCREDITO_INEXISTENTE", gErr, objLiberacaoCredito.sCodUsuario)
        
        Case 44491
            Call Rotina_Erro(vbOKOnly, "ERRO_LIBERACAOCREDITO_LIMITEOPERACAO", gErr, objLiberacaoCredito.sCodUsuario)
    
        Case 44493
            Call Rotina_Erro(vbOKOnly, "ERRO_LIBERACAOCREDITO_LIMITEMENSAL", gErr, objLiberacaoCredito.sCodUsuario)
        
        Case 44495
            lErro = Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_CLIENTE", gErr, objNFiscal.lCliente)
            
        Case 129149
        
        Case 129150
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CLIENTE_INATIVO", gErr, objNFiscal.lCliente)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149765)

    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    
    Exit Function

End Function

Private Function Processa_Bloqueio_Nao_Reserva(alComando() As Long, ByVal objBloqueioPV As ClassBloqueioPV, ByVal lCodigoReserva As Long) As Long
'trata os bloqueios não reserva

Dim lErro As Long
Dim dPedidoFaltaReservar As Double
Dim dPedidoReserva As Double

On Error GoTo Erro_Processa_Bloqueio_Nao_Reserva

    lErro = Bloqueio_Parcial_Libera(alComando(), objBloqueioPV, lCodigoReserva, dPedidoFaltaReservar, dPedidoReserva)
    If lErro <> SUCESSO Then Error 36695
    
    'se não falta nada para reservar ==> libera o bloqueio
    If dPedidoFaltaReservar = 0 Then
        lErro = Bloqueio_Libera_Atualiza(alComando(1), alComando(2), objBloqueioPV)
        If lErro <> SUCESSO Then Error 36696
        
    'se foi reservado alguma coisa ==> libera o bloqueio não reserva e insere um bloqueio parcial para o pedido
    ElseIf dPedidoReserva <> dPedidoFaltaReservar Then
    
        'libera o bloqueio não reserva
        lErro = Bloqueio_Libera_Atualiza(alComando(1), alComando(2), objBloqueioPV)
        If lErro <> SUCESSO Then Error 36697
        
        'cria o bloqueio parcial
        objBloqueioPV.dtData = gdtDataAtual
        objBloqueioPV.iTipoDeBloqueio = BLOQUEIO_PARCIAL
        
        lErro = CF("BloqueioPV_Insere", alComando(12), objBloqueioPV)
        If lErro <> SUCESSO Then Error 36698
        
    End If

    Processa_Bloqueio_Nao_Reserva = SUCESSO
    
    Exit Function
    
Erro_Processa_Bloqueio_Nao_Reserva:

    Processa_Bloqueio_Nao_Reserva = Err
    
    Select Case Err

        Case 36695, 36696, 36697, 36698

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149766)

    End Select

    Exit Function

End Function

Private Function Bloqueio_Libera_Atualiza(ByVal lComando1 As Long, ByVal lComando2 As Long, ByVal objBloqueioPV As ClassBloqueioPV) As Long
'grava as liberações de bloqueio

Dim lErro As Long

On Error GoTo Erro_Bloqueio_Libera_Atualiza

    'Atualiza o Bloqueio
    lErro = Comando_ExecutarPos(lComando2, "UPDATE BloqueiosPV SET CodUsuarioLib = ? , ResponsavelLib = ?, DataLib = ?, Observacao = ?", lComando1, objBloqueioPV.sCodUsuarioLib, objBloqueioPV.sResponsavelLib, objBloqueioPV.dtDataLib, objBloqueioPV.sObservacao)
    If lErro <> AD_SQL_SUCESSO Then Error 36652

    Bloqueio_Libera_Atualiza = SUCESSO

    Exit Function

Erro_Bloqueio_Libera_Atualiza:

    Bloqueio_Libera_Atualiza = Err

    Select Case Err

        Case 36652
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_BLOQUEIOPV", Err, objBloqueioPV.iFilialEmpresa, objBloqueioPV.lPedidoDeVendas, objBloqueioPV.iSequencial)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149767)

    End Select

    Exit Function

End Function

Function BloqueioPV_Insere(ByVal lComando As Long, ByVal objBloqueioPV As ClassBloqueioPV) As Long
'insere um bloqueio de pedido de venda
'IMPORTANTE: Tem que ser chamada dentro de TRANSACAO

Dim lErro As Long
Dim iProxSeqBloqueio As Integer

On Error GoTo Erro_BloqueioPV_Insere

        lErro = CF("BloqueioPV_Automatico", objBloqueioPV.lPedidoDeVendas, objBloqueioPV.iFilialEmpresa, iProxSeqBloqueio)
        If lErro <> SUCESSO Then Error 36690

        lErro = Comando_Executar(lComando, "INSERT INTO BloqueiosPV(FilialEmpresa,PedidoDeVenda,Sequencial,TipoDeBloqueio,CodUsuario,Responsavel,Data) VALUES (?,?,?,?,?,?,?)", objBloqueioPV.iFilialEmpresa, objBloqueioPV.lPedidoDeVendas, iProxSeqBloqueio, objBloqueioPV.iTipoDeBloqueio, objBloqueioPV.sCodUsuario, objBloqueioPV.sResponsavel, objBloqueioPV.dtData)
        If lErro <> AD_SQL_SUCESSO Then Error 36691

    BloqueioPV_Insere = SUCESSO

    Exit Function

Erro_BloqueioPV_Insere:

    BloqueioPV_Insere = Err

    Select Case Err

        Case 36690

        Case 36691
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_BLOQUEIOPV", Err, objBloqueioPV.iFilialEmpresa, objBloqueioPV.lPedidoDeVendas, iProxSeqBloqueio)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149768)

    End Select

    Exit Function

End Function

Private Function Bloqueio_Parcial_Libera(alComando() As Long, ByVal objBloqueioPV As ClassBloqueioPV, ByVal lCodigoReserva As Long, dPedidoFaltaReservar As Double, dPedidoReserva As Double) As Long
'IMPORTANTE: Tem que ser chamado dentro de TRANSACAO
'tenta liberar um bloqueio parcial
'Para cada ítem do pedido,
'1. Tenta reservar QAR (QP-QC-QF-QR) no almoxarifado default
'2. Se conseguir, passa ao próximo ítem.
'3. Se não conseguir, sai da rotina e não desbloqueia.
'Devolve em dPedidoFaltaReservar a quantidade do pedido que falta reservar do pedido
'Devolve em dPedidoReserva a quantidade total do pedido que está sendo solicitado reserva

Dim lErro As Long
Dim dQuantidadeFaltaReservar As Double
Dim objPedidoVenda As New ClassPedidoDeVenda
Dim objItemPedido As ClassItemPedido
Dim objProduto As New ClassProduto
Dim objProdutoFilial As New ClassProdutoFilial
Dim objEstoqueProduto As New ClassEstoqueProduto
Dim dFator As Double
Dim dQuantidadeReserva As Double


On Error GoTo Erro_Bloqueio_Parcial_Libera

    dPedidoFaltaReservar = 0
    dPedidoReserva = 0

    'Lê os itens de PedidoVenda associados
    objPedidoVenda.lCodigo = objBloqueioPV.lPedidoDeVendas

    lErro = CF("ItensPedido_Le_Todos", alComando(5), objPedidoVenda)
    If lErro <> SUCESSO Then Error 36653

    For Each objItemPedido In objPedidoVenda.colItensPedido

        objProduto.sCodigo = objItemPedido.sProduto

        lErro = CF("Produto_Le_ControleEstoque", alComando(6), objProduto)
        If lErro <> SUCESSO Then Error 36660

        If objProduto.iControleEstoque = PRODUTO_CONTROLE_RESERVA Then

            dQuantidadeFaltaReservar = 0
            
            'Quantidade Reservar na UM de Venda
            dQuantidadeFaltaReservar = objItemPedido.dQuantidade - objItemPedido.dQuantCancelada - objItemPedido.dQuantFaturada - objItemPedido.dQuantReservada
            
            If dQuantidadeFaltaReservar <> 0 Then
            
                objProdutoFilial.iFilialEmpresa = giFilialEmpresa
                objProdutoFilial.sProduto = objItemPedido.sProduto
            
                lErro = CF("ProdutoFilial_Le1", alComando(7), objProdutoFilial)
                If lErro <> SUCESSO Then Error 36661
                
                objEstoqueProduto.sProduto = objItemPedido.sProduto
                objEstoqueProduto.iAlmoxarifado = objProdutoFilial.iAlmoxarifado
                
                lErro = CF("EstoqueProduto_Le1", alComando(8), objEstoqueProduto)
                If lErro <> SUCESSO Then Error 36666

                'Descobre o fator de conversão da quantidade pedida
                lErro = CF("UM_Conversao", objItemPedido.iClasseUM, objItemPedido.sUnidadeMed, objProduto.sSiglaUMEstoque, dFator)
                If lErro <> SUCESSO Then Error 36673

                'converte o que falta reservar em unidades de estoque
                dQuantidadeFaltaReservar = dQuantidadeFaltaReservar * dFator
                dPedidoReserva = dPedidoReserva + dQuantidadeFaltaReservar
                dQuantidadeReserva = dQuantidadeFaltaReservar
                
                'se a quantidade a reservar ultrapassa o disponivel (soma do disponivel + em consignacao em dQUantDisponivel) ==>
                If objEstoqueProduto.dQuantDisponivel - dQuantidadeFaltaReservar < 0 Then
                
                    objEstoqueProduto.dQuantReservada = objEstoqueProduto.dQuantReservada + objEstoqueProduto.dQuantDispNossa
                    objEstoqueProduto.dQuantReservadaConsig = objEstoqueProduto.dQuantReservadaConsig + objEstoqueProduto.dQuantConsig3
                    dQuantidadeFaltaReservar = dQuantidadeFaltaReservar - objEstoqueProduto.dQuantDisponivel
                    objEstoqueProduto.dQuantDispNossa = 0
                    objEstoqueProduto.dQuantConsig3 = 0
                    
                'se a quantidade a reservar ultrapassa a quantidade disponivel ==> reserva toda a quantidade disponivel e o restante da consignacao
                ElseIf objEstoqueProduto.dQuantDispNossa - dQuantidadeFaltaReservar < 0 Then
                
                    objEstoqueProduto.dQuantReservada = objEstoqueProduto.dQuantReservada + objEstoqueProduto.dQuantDispNossa
                    objEstoqueProduto.dQuantReservadaConsig = objEstoqueProduto.dQuantReservadaConsig + dQuantidadeFaltaReservar - objEstoqueProduto.dQuantDispNossa
                    objEstoqueProduto.dQuantConsig3 = objEstoqueProduto.dQuantConsig3 + objEstoqueProduto.dQuantDispNossa - dQuantidadeFaltaReservar
                    objEstoqueProduto.dQuantDispNossa = 0
                    dQuantidadeFaltaReservar = 0
                    
                Else
                
                    'se a quantidade a reservar não ultrapassa a quantidade disponivel ==> reserva somente a quant. disponivel
                    objEstoqueProduto.dQuantDispNossa = objEstoqueProduto.dQuantDispNossa - dQuantidadeFaltaReservar
                    objEstoqueProduto.dQuantReservada = objEstoqueProduto.dQuantReservada + dQuantidadeFaltaReservar
                    dQuantidadeFaltaReservar = 0
                    
                End If

                dPedidoFaltaReservar = dPedidoFaltaReservar + dQuantidadeFaltaReservar
                
                dQuantidadeReserva = dQuantidadeReserva - dQuantidadeFaltaReservar
                
                'se há algo disponivel para reservar ==> reserva
                If dQuantidadeReserva > 0 Then
                
                    'atualiza EstoqueProduto
                    lErro = CF("EstoqueProduto_Atualiza2", alComando(8), alComando(9), objEstoqueProduto)
                    If lErro <> SUCESSO Then Error 36671
                
                    'insere a reserva
                    lErro = CF("Reserva_Insere", alComando(10), alComando(11), objItemPedido, dQuantidadeReserva, lCodigoReserva, objProdutoFilial.iAlmoxarifado)
                    If lErro <> SUCESSO Then Error 36672
                    
                End If
            End If
        End If
    Next


    Bloqueio_Parcial_Libera = SUCESSO

    Exit Function

Erro_Bloqueio_Parcial_Libera:

    Bloqueio_Parcial_Libera = Err

    Select Case Err

        Case 36653, 36660, 36661, 36666, 36671, 36672, 36673

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, 149769)

    End Select

    Exit Function

End Function




Function SldMesFat_Atualiza(ByVal lComando1 As Long, ByVal lComando2 As Long, ByVal objSldDiaFat As ClassSldDiaFat) As Long
'Atualiza a tabela de SldMesFat utilizando os valores passados atraves de objSldDiaFat.
'IMPORTANTE: TEM QUE SER CHAMADA DENTRO DE TRANSACAO

Dim lErro As Long
Dim sMes As String
Dim iMes As Integer
Dim iAno As Integer

On Error GoTo Erro_SldMesFat_Atualiza
    
    iMes = Month(objSldDiaFat.dtData)
    sMes = CStr(iMes)
    
    'Le a tabela de SldMesFat para o Ano/filial/produto em questão
    lErro = Comando_ExecutarPos(lComando1, "SELECT Ano FROM SldMesFat WHERE Ano=? AND FilialEmpresa=? AND Produto=?", 0, iAno, Year(objSldDiaFat.dtData), objSldDiaFat.iFilialEmpresa, objSldDiaFat.sProduto)
    If lErro <> AD_SQL_SUCESSO Then Error 44299

    'leitura do registro referente ao Ano/filial/produto em questão
    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO Then Error 44300
    
    'lock do registro em questão
    lErro = Comando_LockExclusive(lComando1)
    If lErro <> AD_SQL_SUCESSO Then Error 44301

    'Atualiza a tabela de SldMesFat para o Ano/filial/produto em questão
    lErro = Comando_ExecutarPos(lComando2, "UPDATE SldMesFat SET ValorFaturado" + sMes + " = ValorFaturado" + sMes + " + ?, ValorDevolvido" + sMes + " = ValorDevolvido" + sMes + " + ?, TotalDescontos" + sMes + " = TotalDescontos" + sMes + " + ?, QuantPedida" + sMes + " = QuantPedida" + sMes + " + ?, QuantFaturada" + sMes + " = QuantFaturada" + sMes + " + ?, QuantDevolvida" + sMes + " = QuantDevolvida" + sMes + " + ?", lComando1, objSldDiaFat.dValorFaturado, objSldDiaFat.dValorDevolvido, objSldDiaFat.dTotalDescontos, objSldDiaFat.dQuantPedida, objSldDiaFat.dQuantFaturada, objSldDiaFat.dQuantDevolvida)
    If lErro <> AD_SQL_SUCESSO Then Error 44302
        
    SldMesFat_Atualiza = SUCESSO

    Exit Function

Erro_SldMesFat_Atualiza:

    SldMesFat_Atualiza = Err

    Select Case Err

        Case 44299, 44300
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESFAT", Err, Year(objSldDiaFat.dtData), objSldDiaFat.iFilialEmpresa, objSldDiaFat.sProduto)

        Case 44301
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_SLDMESFAT", Err, Year(objSldDiaFat.dtData), objSldDiaFat.iFilialEmpresa, objSldDiaFat.sProduto)

        Case 44302
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SLDMESFAT", Err, Year(objSldDiaFat.dtData), objSldDiaFat.iFilialEmpresa, objSldDiaFat.sProduto)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149770)

    End Select

    Exit Function


End Function

Function SldDiaFat_Atualiza(ByVal lComando1 As Long, ByVal lComando2 As Long, ByVal objSldDiaFat As ClassSldDiaFat) As Long
'Atualiza a tabela de SldDiaFat utilizando os valores passados atraves de objSldDiaFat.
'ATENCAO: Esta Funcao tem que ser chamada dentro de transacao

Dim lErro As Long
Dim dtData As Date

On Error GoTo Erro_SldDiaFat_Atualiza

    'Le a tabela de SldDiaFat para a filial/produto/data em questão
    lErro = Comando_ExecutarPos(lComando1, "SELECT Data FROM SldDiaFat WHERE FilialEmpresa = ? AND Produto = ? AND Data = ?", 0, dtData, objSldDiaFat.iFilialEmpresa, objSldDiaFat.sProduto, objSldDiaFat.dtData)
    If lErro <> AD_SQL_SUCESSO Then Error 44303

    'leitura do registro referente a filial/produto/data em questão
    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 44304
    
    'se não encontrou um registro para a data em questão ==> insere um registro
    If lErro = AD_SQL_SEM_DADOS Then
    
        'Insere um registro na tabela de SldDiaFat para a filial/produto/data em questão
        lErro = Comando_Executar(lComando2, "INSERT INTO SldDiaFat (FilialEmpresa, Produto, Data, ValorFaturado, TotalDescontos, QuantPedida, QuantFaturada, ValorDevolvido, QuantDevolvida) VALUES (?,?,?,?,?,?,?,?,?)", objSldDiaFat.iFilialEmpresa, objSldDiaFat.sProduto, objSldDiaFat.dtData, objSldDiaFat.dValorFaturado, objSldDiaFat.dTotalDescontos, objSldDiaFat.dQuantPedida, objSldDiaFat.dQuantFaturada, objSldDiaFat.dValorDevolvido, objSldDiaFat.dQuantDevolvida)
        If lErro <> AD_SQL_SUCESSO Then Error 44305
    
    
    Else
        'se encontrou ==> atualiza o registro
    
        'lock do registro em questão
        lErro = Comando_LockExclusive(lComando1)
        If lErro <> AD_SQL_SUCESSO Then Error 44306
    
        'Atualiza a tabela de SldDiaFat para a filial/produto/data em questão
        lErro = Comando_ExecutarPos(lComando2, "UPDATE SldDiaFat SET ValorFaturado = ValorFaturado + ?, TotalDescontos = TotalDescontos + ?, QuantPedida = QuantPedida + ?, QuantFaturada = QuantFaturada + ?, ValorDevolvido = ValorDevolvido + ?, QuantDevolvida = QuantDevolvida + ?", lComando1, objSldDiaFat.dValorFaturado, objSldDiaFat.dTotalDescontos, objSldDiaFat.dQuantPedida, objSldDiaFat.dQuantFaturada, objSldDiaFat.dValorDevolvido, objSldDiaFat.dQuantDevolvida)
        If lErro <> AD_SQL_SUCESSO Then Error 44307
        
    End If

    SldDiaFat_Atualiza = SUCESSO

    Exit Function

Erro_SldDiaFat_Atualiza:

    SldDiaFat_Atualiza = Err

    Select Case Err

        Case 44303, 44304
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDDIAFAT", Err, objSldDiaFat.iFilialEmpresa, objSldDiaFat.sProduto, CStr(objSldDiaFat.dtData))

        Case 44305
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_SLDDIAEST", Err, objSldDiaFat.iFilialEmpresa, objSldDiaFat.sProduto, CStr(objSldDiaFat.dtData))
        
        Case 44306
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_SLDDIAEST", Err, objSldDiaFat.iFilialEmpresa, objSldDiaFat.sProduto, CStr(objSldDiaFat.dtData))

        Case 44307
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SLDDIAEST", Err, objSldDiaFat.iFilialEmpresa, objSldDiaFat.sProduto, CStr(objSldDiaFat.dtData))

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149771)

    End Select

    Exit Function

End Function

'mario
Private Function Processa_Gravacao_NFiscal(alComando1() As Long, alComando2() As Long, alComando3() As Long, alComando4() As Long, ByVal objPedidoVenda As ClassPedidoDeVenda, ByVal dValorFaturado As Double, ByVal objMovEstoque As ClassMovEstoque, ByVal objNFiscal As ClassNFiscal, ByVal objGeracaoNFiscal As ClassGeracaoNFiscal) As Long
'processa a gravacao da Nota Fiscal e a Baixa do Pedido

Dim lErro As Long, objContabAutomatica As ClassContabAutomatica

On Error GoTo Erro_Processa_Gravacao_NFiscal

    'Grava os Movimentos de Estoque de Reserva (liberando as quantidades reservadas)
    lErro = CF("MovEstoque_Grava1", alComando1(), objMovEstoque)
    If lErro <> SUCESSO Then Error 39002

    'gravar a nota fiscal fatura a partir de objNFiscal
    If objGeracaoNFiscal.iTipoNFiscal = DOCINFO_NFISFVPV Then

        'Insere uma Nota Fiscal Fatura de Saida no Banco de Dados
        lErro = CF("NFiscalFatura_Grava_Trans", alComando2(), objNFiscal)
        If lErro <> SUCESSO Then Error 44295

    Else
    
        'Insere uma Nota Fiscal Simples de Saida no Banco de Dados
        lErro = CF("NFiscal_Grava_Trans", alComando2(), objNFiscal)
        If lErro <> SUCESSO Then Error 44336
    
    End If

    If (gcolModulo.Ativo(MODULO_CONTABILIDADE) = MODULO_ATIVO) Then
    
        Set objContabAutomatica = New ClassContabAutomatica
    
        lErro = objContabAutomatica.Inicializa_Contab(objGeracaoNFiscal, MODULO_FATURAMENTO, "FAT", objGeracaoNFiscal.dtContabil, objNFiscal.dtDataSaida)
        If lErro <> SUCESSO Then Error 59386
        
        lErro = objContabAutomatica.GeraContabilizacao(objNFiscal, objPedidoVenda)
        If lErro <> SUCESSO Then Error 44262

        lErro = objContabAutomatica.Finaliza_Contab()
        If lErro <> SUCESSO Then Error 59387
    
    End If
    
    Processa_Gravacao_NFiscal = SUCESSO
    
    Exit Function
    
Erro_Processa_Gravacao_NFiscal:

    Processa_Gravacao_NFiscal = Err
    
    Select Case Err
    
        Case 39002, 44262, 44295, 44335, 44336, 59386, 59387
        
        Case Else
             lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149772)

     End Select

     Exit Function
    
End Function

'mario
Private Function Transfere_PV_NF(ByVal objNFiscalInfo As ClassNFiscalInfo, ByVal objNFiscal As ClassNFiscal, objPedidoVenda As ClassPedidoDeVenda) As Long
'transfere os dados do pedido de venda para a nova nota fiscal que está sendo criada

Dim lErro As Long

On Error GoTo Erro_Transfere_PV_NF

    Set objPedidoVenda = New ClassPedidoDeVenda
    
    objPedidoVenda.lCodigo = objNFiscalInfo.lPedido
    objPedidoVenda.iFilialEmpresa = objNFiscalInfo.iFilialEmpresa

    'le e bloqueia o pedido
    lErro = CF("PedidoDeVenda_Le_ComBloqueio", objPedidoVenda)
    If lErro <> SUCESSO Then gError 44172

'    If giTipoVersao = VERSAO_FULL Then
        'só pode faturar pedidos direcionados para a filial corrente
        If objPedidoVenda.iFilialEmpresaFaturamento <> giFilialEmpresa Then gError 44185
    
        'Wagner 27/05/2011 - 'Não pode reverificar o crédito pois ele já foi concedido, logo contaria o valor do pedido em dobro
'        'verifica se tem bloqueios que impeçam o faturamento
'        lErro = PedidoDeVenda_VerificaBloqueios(objPedidoVenda)
'        If lErro <> SUCESSO And lErro <> 44186 And lErro <> 51525 And lErro <> 94385 Then gError 44187
'        If lErro = 44186 Then gError 51451
'        If lErro = 51525 Then gError 51526
'        If lErro = 94385 Then gError 94386
        
        'Vai apenas testar se tem algum bloqueio que impessa igual a geração de NF por um pedido.
        lErro = PedidoDeVenda_TestaBloqueios(objPedidoVenda)
        If lErro <> SUCESSO And lErro <> 25741 Then gError 44187
        If lErro = 25741 Then gError 51451
        
'    End If
        
    'copiar dados basicos do PV para NF
    lErro = NFiscal_ExtrairPV(objNFiscal, objPedidoVenda)
    If lErro <> SUCESSO Then gError 44193
    
'    If giTipoVersao = VERSAO_LIGHT Then
'        lErro = CF("NFiscal_Testa_Credito", objNFiscal)
'        If lErro <> SUCESSO And lErro <> 44453 Then gError 62131
'        If lErro = 44453 Then gError 62129
'
'    End If
    
    Transfere_PV_NF = SUCESSO
    
    Exit Function
    
Erro_Transfere_PV_NF:

    Transfere_PV_NF = gErr
    
    Select Case gErr

        Case 44172, 44187, 44193, 62131, 62129

        Case 44453
            objNFiscalInfo.iMotivoNaoGerada = MOTIVO_NAOGERADA_POR_FALTACREDITO
            
        Case 44185
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FATURAR_PEDIDO_OUTRA_FILIAL", gErr, objPedidoVenda.lCodigo, objPedidoVenda.iFilialEmpresaFaturamento, giFilialEmpresa)

        Case 51451
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PEDIDO_VENDA_BLOQUEIO", gErr, objPedidoVenda.lCodigo)
            objNFiscalInfo.iMotivoNaoGerada = MOTIVO_NAOGERADA_POR_BLOQUEIO

'        Case 51526
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_PEDIDO_VENDA_BLOQUEIO_CREDITO", gErr, objPedidoVenda.lCodigo)
'            objNFiscalInfo.iMotivoNaoGerada = MOTIVO_NAOGERADA_POR_BLOQUEIO_CREDITO

'        Case 94386
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_PEDIDO_VENDA_BLOQUEIO_ATRASO", gErr, objPedidoVenda.lCodigo)
'            objNFiscalInfo.iMotivoNaoGerada = MOTIVO_NAOGERADA_BLOQUEIO_DIAS_ATRASO

        Case Else
             lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149773)

     End Select

     Exit Function

End Function

'mario
Private Function Processa_Itens_NFiscal(alComando() As Long, iNumItensAbertos As Integer, ByVal objPedidoVenda As ClassPedidoDeVenda, ByVal dValorFaturado As Double, ByVal objMovEstoque As ClassMovEstoque, ByVal objGeracaoNFiscal As ClassGeracaoNFiscal) As Long
'processa a geracao dos itens da Nota Fiscal a partir dos itens do pedido

Dim lErro As Long
Dim iItemNF As Integer
Dim objItemNF As ClassItemNF
Dim objItemPV As ClassItemPedido
Dim dQtdeEmFaltaNoEstoque As Double

Dim objNFiscalInfo As New ClassNFiscalInfo

On Error GoTo Erro_Processa_Itens_NFiscal

    'percorre cada item do pedido
    For Each objItemPV In objPedidoVenda.colItensPedido

        'para pular itens atendidos
        If objItemPV.iStatus = ITEM_PEDVENDA_ABERTO Then

            Set objItemNF = New ClassItemNF

            objItemPV.dQuantAFaturar = objItemPV.dQuantidade - objItemPV.dQuantCancelada - objItemPV.dQuantFaturada

            'o pedido já deveria estar marcado como "atendido"
            If objItemPV.dQuantAFaturar <= 0 Then Error 19354

            'se é um faturamento parcial
            If objItemPV.dQuantFaturada <> 0 Then

                'por enquanto o tratamento de faturamento parcial será realizado pela geração de Nota Fiscal Avulsa
                Error 44324

                '*******************************************************************
                'codigo para futura implantacao do faturamento parcial
                '*******************************************************************
                'lErro = Processa_Faturamento_Parcial1()
                'If lErro <> SUCESSO Then


            End If

            dQtdeEmFaltaNoEstoque = 0
            
            If objItemPV.iPossuiGrade = DESMARCADO Then
                'processa um item do pedido de venda, gerando movimentos de estoque relativos às reservas e excluindo as reservas
                lErro = Processa_Item_PV(alComando(), objItemPV, objItemNF, objMovEstoque, objPedidoVenda, objGeracaoNFiscal, dQtdeEmFaltaNoEstoque)
            Else
                Call Move_ItensGrade_Tela(objItemNF.colItensRomaneioGrade, objItemPV.colItensRomaneioGrade, True)
                lErro = Processa_Item_PV_ComGrade(alComando(), objItemPV, objItemNF, objMovEstoque, objPedidoVenda, objGeracaoNFiscal, dQtdeEmFaltaNoEstoque)
            End If
            If lErro <> SUCESSO And lErro <> 44325 Then Error 44326
            If lErro = 44325 Then Error 25746
            
            'transfere os dados gerais do pedido e a parte de tributacao para o item da nota fiscal que está sendo gerado
            lErro = Gera_Item_NF(dValorFaturado, iNumItensAbertos, iItemNF, objItemPV, objItemNF, objPedidoVenda, dQtdeEmFaltaNoEstoque)
            If lErro <> SUCESSO Then Error 44328
            
            'adiciona o objitemNF que acabou de ser preenchido na colecao de itens de nota fiscal
            objGeracaoNFiscal.objNFiscal.colItensNF.Add1 objItemNF

        Else

            'significa que já tem pelo menos 1 item faturado ==> faturamento parcial do Pedido ==> a geracao de nfiscal não vai tratar de pedidos parciais por enquanto
            Error 44337

        End If

    Next

    Processa_Itens_NFiscal = SUCESSO
    
    Exit Function
    
Erro_Processa_Itens_NFiscal:

    Processa_Itens_NFiscal = Err
    
    Select Case Err

        Case 19354
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ITEMPV_QAF_ZERO", Err, objItemPV.lCodPedido, objItemPV.sProdutoDescricao)

        Case 25746  'Faltou estoque p/ ítem. A ser tratado na chamadora.

        Case 44324, 44337
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PEDIDO_JA_FATURADO_PARCIALMENTE", Err, objPedidoVenda.lCodigo)
            
        Case 44326, 44328

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149774)

     End Select

     Exit Function
    
End Function

'mario
Private Function Processa_Item_PV(alComando() As Long, ByVal objItemPV As ClassItemPedido, ByVal objItemNF As ClassItemNF, ByVal objMovEstoque As ClassMovEstoque, ByVal objPedidoVenda As ClassPedidoDeVenda, ByVal objGeracaoNFiscal As ClassGeracaoNFiscal, dQtdeEmFaltaNoEstoque As Double) As Long
'processa um item do pedido de venda, gerando movimentos de estoque relativos às reservas e excluindo as reservas

Dim lErro As Long
Dim dFator As Double
Dim objProduto As New ClassProduto
Dim objAlmoxarifado As ClassAlmoxarifado
Dim objReserva As ClassReserva
Dim bReservaUtilizada As Boolean
Dim iIndice As Integer

On Error GoTo Erro_Processa_Item_PV

    objProduto.sCodigo = objItemPV.sProduto
    
    'ler dados do produto
    lErro = CF("Produto_Le", objProduto)
    If lErro <> SUCESSO And lErro <> 28030 Then Error 44201
    
    'se o produto não estiver cadastrado
    If lErro = 28030 Then Error 44202

    'se item for estoque+reserva ou estoque
    If objProduto.iControleEstoque <> PRODUTO_CONTROLE_SEM_ESTOQUE Then

        'converter qtde a faturar p/UMEstoque do produto
        lErro = CF("UM_Conversao_Trans", objProduto.iClasseUM, objItemPV.sUnidadeMed, objProduto.sSiglaUMEstoque, dFator)
        If lErro <> SUCESSO Then Error 44203

        objItemPV.dQuantAFaturar = objItemPV.dQuantAFaturar * dFator
        
        objItemPV.sUMEstoque = objProduto.sSiglaUMEstoque

        'criar as movimentacoes de estoque de reserva
        lErro = GeracaoNFiscal_CriarMovtosEstoque(alComando(), objGeracaoNFiscal, objPedidoVenda, objItemPV, objMovEstoque, dQtdeEmFaltaNoEstoque, objItemNF)
        If lErro <> SUCESSO Then Error 44240

        'se há ainda material a faturar ==> faturamento parcial
        If dQtdeEmFaltaNoEstoque <> 0 Then

            'desfaz a nota fiscal pois não haverá faturamento parcial automático
            Error 44325
            '*******************************************************************
            'codigo para futura implantacao do faturamento parcial
            '*******************************************************************
            'lErro = Processa_Faturamento_Parcial()
            'If lErro <> SUCESSO Then

        Else
            
            'se não há mais quantidade a faturar
                                    
                    
            'retorna a unidade de venda
            objItemPV.dQuantAFaturar = (objItemPV.dQuantAFaturar / dFator)
            
            'excluir as reservas associadas ao item de estoque nos almoxarifados das outras filiais que não seja a de faturamento, que podem ter sobrado
            For Each objReserva In objItemPV.ColReserva
            
                bReservaUtilizada = False
                
                For iIndice = 1 To objItemNF.colAlocacoes.Count
                    If objItemNF.colAlocacoes(iIndice).iAlmoxarifado = objReserva.iAlmoxarifado Then bReservaUtilizada = True
                Next
            
                'verifica se almox pertence a filial do faturamento
                lErro = Almoxarifado_NaColecao(objGeracaoNFiscal.colAlmoxFilial, objReserva.iAlmoxarifado)
                If lErro <> SUCESSO And lErro <> 44234 Then Error 44241

                'se o almoxarifado não pertence à filial do faturamento
                'ou se a utilização da rserva não foi feita
                If lErro = 44234 Or (Not bReservaUtilizada) Then
                    Set objAlmoxarifado = New ClassAlmoxarifado
                    objAlmoxarifado.iCodigo = objReserva.iAlmoxarifado

                    'cancelar a reserva deste almoxarifado que nao vai ser mais necessária
                    lErro = CF("Reserva_Cancelar", alComando(5), alComando(6), objMovEstoque, objItemPV, objAlmoxarifado)
                    If lErro <> SUCESSO Then Error 44242
                    
                End If

            Next

        End If 'se há falta de estoque

    End If 'se for item inventariado

    Processa_Item_PV = SUCESSO

    Exit Function

Erro_Processa_Item_PV:

    Processa_Item_PV = Err

    Select Case Err

        Case 44201, 44203, 44240, 44241, 44242

        Case 44202
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_INEXISTENTE", Err, objProduto.sCodigo)

        Case 44325
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PEDIDO_FATURAMENTO_PARCIAL", Err, objPedidoVenda.lCodigo)


        Case Else
             lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149775)

     End Select

     Exit Function

End Function

'mario
Private Function Gera_Item_NF(dValorFaturado As Double, iNumItensAbertos As Integer, iItemNF As Integer, ByVal objItemPV As ClassItemPedido, ByVal objItemNF As ClassItemNF, ByVal objPedidoVenda As ClassPedidoDeVenda, dQtdeEmFaltaNoEstoque As Double) As Long
'transfere os dados gerais do pedido e a parte de tributacao para o item da nota fiscal que está sendo gerado

Dim lErro As Long

On Error GoTo Erro_Gera_Item_NF

    'incluir o item da NF
    iItemNF = iItemNF + 1
    objItemNF.iItem = iItemNF
    
    objItemNF.lNumIntPedVenda = objPedidoVenda.lNumIntDoc
    
    'se faturou tudo
    If dQtdeEmFaltaNoEstoque = 0 Then

        'atualizar a qtde faturada qdo faturou tudo que faltava do item
        objItemPV.dQuantFaturada = objItemPV.dQuantidade - objItemPV.dQuantCancelada

        objItemPV.iStatus = ITEM_PEDVENDA_ATENDIDO
        iNumItensAbertos = iNumItensAbertos - 1

        'transfere os dados do item de pedido de vendas para o item da nota fiscal
        lErro = ItemNF_ExtrairItemPV(objItemNF, objItemPV)
        If lErro <> SUCESSO Then Error 44243
    
        If objItemNF.objInfoAdicDocItem.iIncluiValorTotal = MARCADO Then
            dValorFaturado = dValorFaturado + objItemPV.dPrecoTotal
        End If
    
        'transfere a tributacao do item de pedido de venda para o item de nota fiscal
'        lErro = ItemNFTrib_Obter_ItemPVTrib(objItemNF, objItemPV)
'        If lErro <> SUCESSO Then Error 44244
        Call objItemNF.objTributacao.Copia(objItemPV.objTributacao)
'        If lErro <> SUCESSO Then Error 44244

    Else

        Error 44327
        
        '*******************************
        'Em caso de faturamento parcial, que não será tratado por enquanto
        '*******************************

        'atualizar a qtde faturada qdo faturou tudo que faltava do item
        'objItemPV.dQuantFaturada = objItemPV.dQuantidade - objItemPV.dQuantCancelada - dQtdeEmFaltaNoEstoque

        'dValorFaturado = dValorFaturado + (objItemPV.dPrecoTotal * objItemPV.dQuantAFaturar / (objItemPV.dQuantidade - objItemPV.dQuantCancelada))

    End If

    Gera_Item_NF = SUCESSO

    Exit Function

Erro_Gera_Item_NF:

    Gera_Item_NF = Err

    Select Case Err

        Case 44243, 44244

        Case 44327
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PEDIDO_FATURAMENTO_PARCIAL", Err, objPedidoVenda.lCodigo)

        Case Else
             lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149776)

     End Select

     Exit Function

End Function

'jaques
Private Function PedidoDeVenda_TestaBloqueios(ByVal objPedidoVenda As ClassPedidoDeVenda) As Long
'verifica se existe bloqueio que impeça o faturamento

Dim lErro As Long
Dim objBloqueioPV As ClassBloqueioPV

On Error GoTo Erro_PedidoDeVenda_TestaBloqueios

    For Each objBloqueioPV In objPedidoVenda.colBloqueiosPV
        If objBloqueioPV.dtDataLib = DATA_NULA Then
            If objBloqueioPV.iTipoDeBloqueio <> BLOQUEIO_PARCIAL And objBloqueioPV.iTipoDeBloqueio <> BLOQUEIO_NAO_RESERVA And objBloqueioPV.iTipoDeBloqueio <> BLOQUEIO_CREDITO Then Error 25741
        End If
    Next
    
    PedidoDeVenda_TestaBloqueios = SUCESSO

    Exit Function

Erro_PedidoDeVenda_TestaBloqueios:

    PedidoDeVenda_TestaBloqueios = Err

    Select Case Err

        Case 25741 'encontrou bloqueio que impede o faturamento
        
        Case Else
             lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149777)

     End Select

     Exit Function

End Function

Private Function PedidoDeVenda_VerificaBloqueios(ByVal objPedidoVenda As ClassPedidoDeVenda) As Long
'verifica se existe bloqueio que impeça o faturamento

Dim lErro As Long
Dim objBloqueioPV As ClassBloqueioPV

On Error GoTo Erro_PedidoDeVenda_VerificaBloqueios

    For Each objBloqueioPV In objPedidoVenda.colBloqueiosPV
        If objBloqueioPV.dtDataLib = DATA_NULA Then
            If objBloqueioPV.iTipoDeBloqueio <> BLOQUEIO_PARCIAL And objBloqueioPV.iTipoDeBloqueio <> BLOQUEIO_NAO_RESERVA Then gError 44186
        End If
    Next
    
    ' verifica dias de atraso
    lErro = PedidoDeVenda_VerificaAtraso(objPedidoVenda)
    If lErro <> SUCESSO And lErro <> 94357 Then gError 94334
    If lErro <> SUCESSO Then gError 94385

    'verifica o crédito do cliente para o pedido em questão
    lErro = PedidoDeVenda_VerificaCredito(objPedidoVenda)
    If lErro <> SUCESSO And lErro <> 51468 Then gError 44378
    If lErro <> SUCESSO Then gError 51525
    
    PedidoDeVenda_VerificaBloqueios = SUCESSO

    Exit Function

Erro_PedidoDeVenda_VerificaBloqueios:

    PedidoDeVenda_VerificaBloqueios = gErr

    Select Case gErr

        Case 44186 'encontrou bloqueio que impede o faturamento
        
        Case 44378, 94334

        Case 51525 'a ser tratado na rotina chamadora
        
        Case 94385 'a ser tratado na rotina chamadora
        
        Case Else
             lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149778)

     End Select

     Exit Function

End Function


Function PedidoDeVenda_VerificaCredito(ByVal objPedidoVenda As ClassPedidoDeVenda) As Long
'Verifica o crédito do cliente e se necessário adiciona um bloqueio de crédito ao Pedido de Venda passado

Dim lErro As Long
Dim iCreditoAprovado As Integer

On Error GoTo Erro_PedidoDeVenda_VerificaCredito

    If gobjCRFAT.iCreditoVerificaLimite = VERIFICAR_LIMITE_CREDITO Then
    
        'verifica se o pedido tem credito aprovado
        lErro = CF("BloqueiosPV_Credito_Aprovado_Testa", objPedidoVenda, iCreditoAprovado)
        If lErro <> SUCESSO Then Error 44384
    
        'se não tiver crédito liberado
        If iCreditoAprovado <> BLOQUEIO_CREDITO_LIBERADO Then
        
            'Verifica o crédito do cliente
            lErro = PedidoDeVenda_VerificaCredito2(objPedidoVenda)
            If lErro <> SUCESSO And lErro <> 51467 Then Error 44398
            If lErro = 51467 Then Error 51468
            
        End If

    End If
    
    PedidoDeVenda_VerificaCredito = SUCESSO

    Exit Function

Erro_PedidoDeVenda_VerificaCredito:

    PedidoDeVenda_VerificaCredito = Err

    Select Case Err

        Case 44384, 44398
        
        Case 51468

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149779)

    End Select

    Exit Function

End Function

Private Function BloqueioPV_Testa_Credito(ByVal objPedidoVenda As ClassPedidoDeVenda) As Long
'Remove o bloqueio de credito antigo se houver e se o cliente não tiver crédito, Inclui no BD um novo bloqueio de Credito
'Chamada EM TRANSAÇÃO

Dim lErro As Long
Dim objBloqueioPV As New ClassBloqueioPV

On Error GoTo Erro_BloqueioPV_Testa_Credito

    'Exclui bloqueios de Credito com data de liberacao = DATA_NULA
    lErro = CF("BloqueiosPV_Exclui_Credito", objPedidoVenda)
    If lErro <> SUCESSO Then Error 44397

    'Verifica se PedidoDeVenda está dentro do crédito do Cliente
    lErro = PedidoDeVenda_VerificaCredito2(objPedidoVenda)
    
    If lErro <> SUCESSO And lErro <> 51467 Then Error 25744
    'Se estourou limite de crédito do Cliente
    If lErro = 51467 Then

        objBloqueioPV.iFilialEmpresa = objPedidoVenda.iFilialEmpresa
        objBloqueioPV.lPedidoDeVendas = objPedidoVenda.lCodigo
        objBloqueioPV.iTipoDeBloqueio = BLOQUEIO_CREDITO
        objBloqueioPV.sCodUsuario = gsUsuario
        objBloqueioPV.sResponsavel = BLOQUEIO_AUTO_RESP
        objBloqueioPV.dtData = gdtDataHoje
        objBloqueioPV.dtDataLib = DATA_NULA
        
        lErro = CF("BloqueiosPV_Grava1", objPedidoVenda, objBloqueioPV)
        If lErro <> SUCESSO Then Error 44396
        
    End If

    BloqueioPV_Testa_Credito = SUCESSO

    Exit Function

Erro_BloqueioPV_Testa_Credito:

    BloqueioPV_Testa_Credito = Err

    Select Case Err

        Case 44396, 44397, 25744 'tratado nas rotinas chamadas

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149780)

    End Select

    Exit Function

End Function

Private Function PedidoDeVenda_VerificaCredito2(ByVal objPedidoVenda As ClassPedidoDeVenda) As Long
'Testa o Pedido de Venda contra o Credito do Cliente

Dim lComando As Long
Dim lErro As Long
Dim tCliente As typeCliente
Dim objClienteEstatistica As New ClassFilialClienteEst

On Error GoTo Erro_PedidoDeVenda_VerificaCredito2

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 44385

    'Lê os saldos e o limite de credito do Cliente
    lErro = Comando_ExecutarPos(lComando, "SELECT LimiteCredito, Bloqueado FROM Clientes WHERE Codigo = ?", 0, tCliente.dLimiteCredito, tCliente.iBloqueado, objPedidoVenda.lCliente)
    If lErro <> AD_SQL_SUCESSO Then Error 44386

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 44387
    
    If lErro = AD_SQL_SEM_DADOS Then Error 44388 'Não encontrou

    'Faz o lock do Cliente
    lErro = Comando_LockExclusive(lComando)
    If lErro <> AD_SQL_SUCESSO Then Error 44389
    
    objClienteEstatistica.lCodCliente = objPedidoVenda.lCliente
    objClienteEstatistica.iFilialEmpresa = giFilialEmpresa
    
    'Le dinamicamente o Saldo dos Titulos e dos Pedidos Liberados
    lErro = CF("Cliente_Le_Estatistica_Credito", objClienteEstatistica)
    If lErro <> SUCESSO Then Error 52952
            
    'Verifica se soma dos saldos e a soma dos Produtos ultrapassa o limite de Credito do Cliente
    If tCliente.iBloqueado <> 0 Or (tCliente.dLimiteCredito < (objClienteEstatistica.dSaldoTitulos + objClienteEstatistica.dSaldoPedidosLiberados + objClienteEstatistica.dValorNFsNaoFaturadas + objPedidoVenda.dValorProdutos)) Then
        
        Error 51467

    End If

    Call Comando_Fechar(lComando)

    PedidoDeVenda_VerificaCredito2 = SUCESSO

    Exit Function

Erro_PedidoDeVenda_VerificaCredito2:

    PedidoDeVenda_VerificaCredito2 = Err

    Select Case Err

        Case 44385
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 44386, 44387
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CLIENTES", Err)

        Case 44388
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CLIENTE_NAO_CADASTRADO", Err, objPedidoVenda.lCliente)

        Case 44389
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_CLIENTES", Err, objPedidoVenda.lCliente)

        Case 52952

        Case 51467 'Tratado na rotina chamadora
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149781)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

'mario
Private Function NFiscal_ExtrairTribDePV(ByVal objNFiscal As ClassNFiscal, ByVal objPedidoVenda As ClassPedidoDeVenda) As Long
'gera a parte de tributacao de uma NF a partir de um PV. Nao inclui a parte dos itens

Dim lErro As Long

On Error GoTo Erro_NFiscal_ExtrairTribDePV

    Call objNFiscal.objTributacao.Copia(objPedidoVenda.objTributacao)

    NFiscal_ExtrairTribDePV = SUCESSO

    Exit Function

Erro_NFiscal_ExtrairTribDePV:

    NFiscal_ExtrairTribDePV = Err

    Select Case Err

        Case 44188, 44189, 44190, 44191

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149784)

    End Select

    Exit Function

End Function

'mario
Private Function NFiscal_ExtrairPV(ByVal objNFiscal As ClassNFiscal, ByVal objPedidoVenda As ClassPedidoDeVenda) As Long
'copiar dados basicos do PV para NF

Dim lErro As Long

On Error GoTo Erro_NFiscal_ExtrairPV

    'copiar dados PV->NF
    With objNFiscal

        .dValorDesconto = objPedidoVenda.dValorDesconto
        .dValorFrete = objPedidoVenda.dValorFrete
        .dValorOutrasDespesas = objPedidoVenda.dValorOutrasDespesas
        .dValorProdutos = objPedidoVenda.dValorProdutos
        .dValorItens = objPedidoVenda.dValorItens
        .dValorDescontoItens = objPedidoVenda.dValorDescontoItens
        .dValorDescontoTit = objPedidoVenda.dValorDescontoTit
        .iFilialPedido = objPedidoVenda.iFilialEmpresa
        .dtDataEntrada = DATA_NULA
        .lNumPedidoVenda = objPedidoVenda.lCodigo
        .dValorSeguro = objPedidoVenda.dValorSeguro
        .dValorTotal = objPedidoVenda.dValorTotal
        .iCanal = objPedidoVenda.iCanalVenda
        .iCodTransportadora = objPedidoVenda.iCodTransportadora
        .iCodTranspRedesp = objPedidoVenda.iCodTranspRedesp
        .iDetPagFrete = objPedidoVenda.iDetPagFrete
        .iFilialCli = objPedidoVenda.iFilial
        .iFilialEmpresa = objPedidoVenda.iFilialEmpresaFaturamento
        .iFilialEntrega = objPedidoVenda.iFilialEntrega
        .iStatus = STATUS_LANCADO
        .iTabelaPreco = objPedidoVenda.iTabelaPreco
        .lCliente = objPedidoVenda.lCliente
        .sNumPedidoTerc = objPedidoVenda.sPedidoCliente
        .sMensagemNota = objPedidoVenda.sMensagemNota
        .sNaturezaOp = objPedidoVenda.sNaturezaOp
        .dPesoLiq = objPedidoVenda.dPesoLiq
        .dPesoBruto = objPedidoVenda.dPesoBruto
        .sPlaca = objPedidoVenda.sPlaca
        .sPlacaUF = objPedidoVenda.sPlacaUF
        .lVolumeQuant = objPedidoVenda.lVolumeQuant
        .lVolumeEspecie = objPedidoVenda.lVolumeEspecie
        .lVolumeMarca = objPedidoVenda.lVolumeMarca
        .sVolumeNumero = objPedidoVenda.sVolumeNumero
        .iFreteRespons = objPedidoVenda.iFreteRespons
        .dtDataReferencia = objPedidoVenda.dtDataReferencia
        .iMoeda = objPedidoVenda.iMoeda
        .dTaxaMoeda = 1
        .dVolumeTotal = 0
        .iSemDataSaida = 0
        .iNaoImpCobranca = 0
    End With

    lErro = NFiscal_ExtrairTribDePV(objNFiscal, objPedidoVenda)
    If lErro <> SUCESSO Then Error 44192

    NFiscal_ExtrairPV = SUCESSO

    Exit Function

Erro_NFiscal_ExtrairPV:

    NFiscal_ExtrairPV = Err

    Select Case Err

        Case 44192

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149785)

    End Select

    Exit Function

End Function

'mario
Private Function ItemNF_ExtrairItemPV(ByVal objItemNF As ClassItemNF, ByVal objItemPV As ClassItemPedido) As Long

Dim lErro As Long
Dim colAlocacoes As ColAlocacoesItemNF
Dim objReserva As ClassReserva

On Error GoTo Erro_ItemNF_ExtrairItemPV

    With objItemNF

        .dPercDesc = objItemPV.dValorDesconto / (objItemPV.dPrecoUnitario * (objItemPV.dQuantidade - objItemPV.dQuantCancelada))
        .dPrecoUnitario = objItemPV.dPrecoUnitario
        .dQuantidade = objItemPV.dQuantAFaturar
        .dtDataEntrega = objItemPV.dtDataEntrega
        .dValorAbatComissao = objItemPV.dValorAbatComissao
        .dValorDesconto = objItemPV.dValorDesconto
        .iAlmoxarifado = 0 'só preenchido para NF de entrada
        .lNumIntDocOrig = 0 'só preenchido em devolução
        .lNumNFOrig = 0 'só preenchido em devolução
        .sSerieNFOrig = "" 'só preenchido em devolução
        .iItemNFOrig = 0 'só preenchido em devolução
        .iStatus = STATUS_LANCADO
        .lNumIntDoc = 0 'numero interno deste registro. Preenchido posteriormente.
        .lNumIntItemPedVenda = objItemPV.lNumIntDoc
        .lNumIntNF = 0 'numero interno da nota fiscal. Preenchido posteriormente.
        .sDescricaoItem = objItemPV.sProdutoDescricao
        .sProduto = objItemPV.sProduto
        .sUMEstoque = objItemPV.sUMEstoque
        .sUnidadeMed = objItemPV.sUnidadeMed
        
        Set .objInfoAdicDocItem = objItemPV.objInfoAdicDocItem
        .objInfoAdicDocItem.iTipoDoc = TIPODOC_INFOADIC_ITEMNF

    End With

    ItemNF_ExtrairItemPV = SUCESSO
    
    Exit Function
    
Erro_ItemNF_ExtrairItemPV:

    ItemNF_ExtrairItemPV = Err
    
    Select Case Err

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149786)

    End Select

    Exit Function
    
End Function

'mario
Private Function GeracaoNFiscal_CriarMovtosEstoque(alComando() As Long, ByVal objGeracaoNFiscal As ClassGeracaoNFiscal, ByVal objPedidoVenda As ClassPedidoDeVenda, ByVal objItemPV As ClassItemPedido, ByVal objMovEstoque As ClassMovEstoque, dQtdeEmFaltaNoEstoque As Double, ByVal objItemNF As ClassItemNF) As Long
'cria os movimentos de estoque correspondentes a um item de pedido de venda
'Somente as reservas feitas em almoxarifados da filial que vai faturar poderao ser utilizadas
'   para estas reservas, se usadas, deverao ser criados movtos que retiram diretamente da qtde reservada
'primeiro tenta retirar do almoxarifado padrao, se nao der, dos outros com reserva e depois nos outros almoxarifados da filial
'vai mantendo numa colecao os almoxarifados percorridos

Dim lErro As Long
Dim colAlmoxPercorridos As New Collection
Dim iAlmoxarifadoPadrao As Integer
Dim objAlmoxarifado As New ClassAlmoxarifado
Dim objReserva As ClassReserva
Dim objProdutoFilial As New ClassProdutoFilial
Dim iIndice1 As Integer
Dim iIndice2 As Integer


On Error GoTo Erro_GeracaoNFiscal_CriarMovtosEstoque

    dQtdeEmFaltaNoEstoque = objItemPV.dQuantAFaturar

    objProdutoFilial.iFilialEmpresa = objPedidoVenda.iFilialEmpresaFaturamento
    objProdutoFilial.sProduto = objItemPV.sProduto
    
    'obter o almox padrao p/(produto, FilialEmpresaFaturamento)
    lErro = CF("ProdutoFilial_Le2", alComando(2), objProdutoFilial)
    If lErro <> SUCESSO And lErro <> 44208 Then Error 44209
    
    'Se não encontrou o almoxarifado padrão do produto/filialempresaFaturamento
    If lErro = 44208 Or objProdutoFilial.iAlmoxarifado = 0 Then
    
        'pega o almoxarifado padrao da filial
        iAlmoxarifadoPadrao = objGeracaoNFiscal.iAlmoxarifadoPadrao
        
    Else
    
        'se encontrou o almoxarifado padrao
        iAlmoxarifadoPadrao = objProdutoFilial.iAlmoxarifado
        
    End If
    
    'se há um almoxarifado padrão ==> retira material do almoxarifado padrao
    If iAlmoxarifadoPadrao <> 0 Then

        objAlmoxarifado.iCodigo = iAlmoxarifadoPadrao
        
        'cria movtos de estoque retirando material do almoxarifado padrao
        lErro = GeracaoNFiscal_PercorreAlmox(alComando(), objAlmoxarifado, objItemPV, objMovEstoque, colAlmoxPercorridos, dQtdeEmFaltaNoEstoque, objItemNF)
        If lErro <> SUCESSO Then Error 44233

    End If

    'percorrer os almoxarifados das outras reservas
    If dQtdeEmFaltaNoEstoque > 0 Then
        For Each objReserva In objItemPV.ColReserva
    
            If iAlmoxarifadoPadrao <> objReserva.iAlmoxarifado Then
    
                'verifica se almox pertence a filial faturamento
                lErro = Almoxarifado_NaColecao(objGeracaoNFiscal.colAlmoxFilial, objReserva.iAlmoxarifado)
                If lErro <> SUCESSO And lErro <> 44234 Then Error 44235
    
                'se o almoxarifado pertence à filial de faturamento
                If lErro = SUCESSO Then
                    Set objAlmoxarifado = New ClassAlmoxarifado
                    
                    objAlmoxarifado.iCodigo = objReserva.iAlmoxarifado
                    
                    'cria movtos de estoque retirando material deste almoxarifado
                    lErro = GeracaoNFiscal_PercorreAlmox(alComando(), objAlmoxarifado, objItemPV, objMovEstoque, colAlmoxPercorridos, dQtdeEmFaltaNoEstoque, objItemNF)
                    If lErro <> SUCESSO Then Error 44236
    
                End If
    
            End If
    
        Next
    End If

    If dQtdeEmFaltaNoEstoque > 0 Then
        'percorrer os almoxarifados da filial
        For Each objAlmoxarifado In objGeracaoNFiscal.colAlmoxFilial
    
            'verifica se almoxarifado já foi verificado acima
            lErro = Almoxarifado_NaColecao(colAlmoxPercorridos, objAlmoxarifado.iCodigo)
            If lErro <> SUCESSO And lErro <> 44234 Then Error 44239
            
            'se o almoxarifado ainda não foi verificado
            If lErro = 44234 Then
    
                'cria movtos de estoque retirando material deste almoxarifado
                lErro = GeracaoNFiscal_PercorreAlmox(alComando(), objAlmoxarifado, objItemPV, objMovEstoque, colAlmoxPercorridos, dQtdeEmFaltaNoEstoque, objItemNF)
                If lErro <> SUCESSO Then Error 44238
    
            End If
    
        Next
    End If
    
    GeracaoNFiscal_CriarMovtosEstoque = SUCESSO

    Exit Function

Erro_GeracaoNFiscal_CriarMovtosEstoque:

    GeracaoNFiscal_CriarMovtosEstoque = Err

    Select Case Err

        Case 44209, 44233, 44235, 44236, 44238, 44239

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149787)

    End Select

    Exit Function

End Function

'mario
Private Function GeracaoNFiscal_PercorreAlmox(alComando() As Long, ByVal objAlmoxarifado As ClassAlmoxarifado, ByVal objItemPV As ClassItemPedido, ByVal objMovEstoque As ClassMovEstoque, ByVal colAlmoxPercorridos As Collection, dQtdeEmFaltaNoEstoque As Double, ByVal objItemNF As ClassItemNF) As Long
'cria os movtos de estoque retirando material da qtde reservada, disp nossa e consig3 para atender a qtde demandada

Dim lErro As Long
Dim objEstoqueProduto As New ClassEstoqueProduto
Dim dQtde As Double
Dim dQuantReserva As Double
Dim dQuantAloc As Double
Dim objItemNFAloc As ClassItemNFAlocacao

On Error GoTo Erro_GeracaoNFiscal_PercorreAlmox

    'obter qtde reservada neste almoxarifado correspondente ao item do pv
    lErro = CF("ItemPV_ObtemQtdeReservaAlmox", objItemPV, objAlmoxarifado.iCodigo, dQuantReserva)
    If lErro <> SUCESSO Then Error 44221

    'se houve reserva para o almoxarifado em questão
    If dQuantReserva <> 0 Then

        'se há quantidade a faturar
        If dQtdeEmFaltaNoEstoque <> 0 Then

            'se a quantidade a faturar for menor que a quantidade reservada
            If dQtdeEmFaltaNoEstoque <= dQuantReserva Then
                
                'esta será a quantidade da reserva a ser utilizada
                dQtde = dQtdeEmFaltaNoEstoque
            Else
                'se a quantidade faturada for maior que a quantidade reservada, toda a reserva será utilizada
                dQtde = dQuantReserva
            End If

            'Utiliza a reserva, ou seja, serão gerados movimentos de utilização e possivelmente cancelamento do que não foi utilizado. Além disso a reserva é excluida
            lErro = CF("Reserva_Utilizar", alComando(3), alComando(4), objMovEstoque, objItemPV, objAlmoxarifado, dQtde)
            If lErro <> SUCESSO Then Error 44220

            'ainda falta esta parte para faturar
            dQtdeEmFaltaNoEstoque = dQtdeEmFaltaNoEstoque - dQtde
            dQuantAloc = dQtde
    
        Else

            'se não há quantidade a faturar
            'cancelar a reserva deste almoxarifado que nao vai ser mais necessária
            lErro = CF("Reserva_Cancelar", alComando(5), alComando(6), objMovEstoque, objItemPV, objAlmoxarifado)
            If lErro <> SUCESSO Then Error 44226

        End If

    End If

    'se ainda há quantidade a faturar
    If dQtdeEmFaltaNoEstoque <> 0 Then

        objEstoqueProduto.sProduto = objItemPV.sProduto
        objEstoqueProduto.iAlmoxarifado = objAlmoxarifado.iCodigo
        
        'ler a tabela estoqueproduto e fazer lock exclusivo
        lErro = CF("EstoqueProduto_Le_Exclusivo", alComando(7), objEstoqueProduto)
        If lErro <> SUCESSO And lErro <> 44229 Then Error 44231

        If lErro = SUCESSO Then

            'retirar quanto possivel deste almoxarifado
            If objEstoqueProduto.dQuantDisponivel > 0 Then
    
                'se a quantidade que ainda tem a faturar for menor que a quantidade disponivel no almoxarifado
                If dQtdeEmFaltaNoEstoque <= objEstoqueProduto.dQuantDisponivel Then
                
                    'faturar tudo
                    dQtde = dQtdeEmFaltaNoEstoque
                    
                Else
                    
                    'senão, faturar só o que está disponível
                    dQtde = objEstoqueProduto.dQuantDisponivel
                    
                End If
    
                'esta é a quantidade que ainda falta faturar
                dQtdeEmFaltaNoEstoque = dQtdeEmFaltaNoEstoque - dQtde
                
                dQuantAloc = dQuantAloc + dQtde
            End If

        End If
    
    End If

    If dQuantAloc > 0 Then
        Set objItemNFAloc = objItemNF.colAlocacoes.Add(objAlmoxarifado.iCodigo, objAlmoxarifado.sNomeReduzido, dQuantAloc)
        objItemNFAloc.sUnidadeMed = objItemPV.sUMEstoque
    End If
        
        
    'inclui-lo em colAlmoxPercorridos
    colAlmoxPercorridos.Add objAlmoxarifado

    GeracaoNFiscal_PercorreAlmox = SUCESSO

    Exit Function

Erro_GeracaoNFiscal_PercorreAlmox:

    GeracaoNFiscal_PercorreAlmox = Err

    Select Case Err

        Case 44220, 44221, 44226, 44231

        Case 44232
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ESTOQUEPRODUTO_NAO_CADASTRADO", Err, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149788)

    End Select

    Exit Function

End Function

'mario
Private Function Almoxarifado_NaColecao(ByVal colAlmoxarifados As Collection, ByVal iAlmoxarifado As Integer) As Long
'retorna se iAlmoxarifado está em colAlmoxarifados que contem objAlmoxarifados com codigo e nome reduzido

Dim lErro As Long
Dim objAlmoxarifado As ClassAlmoxarifado
Dim iAchou As Integer

On Error GoTo Erro_Almoxarifado_NaColecao

    iAchou = 0

    'pesquisa o almoxarifado na colecao
    For Each objAlmoxarifado In colAlmoxarifados

        'se encontrou o almoxarifado
        If objAlmoxarifado.iCodigo = iAlmoxarifado Then

            iAchou = 1
            Exit For

        End If

    Next

    'se não encontrou o almoxarifado na colecao
    If iAchou = 0 Then Error 44234
    
     Almoxarifado_NaColecao = SUCESSO

    Exit Function

Erro_Almoxarifado_NaColecao:

    Almoxarifado_NaColecao = Err

    Select Case Err

        Case 44234

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149789)

    End Select

    Exit Function

End Function

'mario
Private Function Cliente_AtualizarSaldoPedidos(ByVal lComando1 As Long, ByVal lComando2 As Long, ByVal lCliente As Long, ByVal dValor As Double) As Long
'Atualizar o saldo dos pedidos liberados na tabela de clientes
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO
'dValor é somado ao saldo nao faturado em pedidos de venda
'quando esta funcao for chamada para registrar o faturamento de um pedido, dValor deve ser negativo

Dim lErro As Long
Dim dSaldoAnterior As Double

On Error GoTo Erro_Cliente_AtualizarSaldoPedidos

    lErro = Comando_ExecutarPos(lComando1, "SELECT SaldoPedidosLiberados FROM Clientes WHERE Codigo = ?", 0, dSaldoAnterior, lCliente)
    If lErro <> AD_SQL_SUCESSO Then Error 44329

    lErro = Comando_BuscarProximo(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 44330

    If lErro <> AD_SQL_SUCESSO Then Error 44331

    lErro = Comando_ExecutarPos(lComando2, "UPDATE Clientes SET SaldoPedidosLiberados = SaldoPedidosLiberados + ?", lComando1, dValor)
    If lErro <> AD_SQL_SUCESSO Then Error 44332

    Cliente_AtualizarSaldoPedidos = SUCESSO

    Exit Function

Erro_Cliente_AtualizarSaldoPedidos:

    Cliente_AtualizarSaldoPedidos = Err

    Select Case Err

        Case 44329, 44330
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CLIENTES1", Err, lCliente)

        Case 44331
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CLIENTE_NAO_CADASTRADO", Err, lCliente)

        Case 44332
            lErro = Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_CLIENTE", Err, lCliente)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149790)

    End Select

    Exit Function

End Function

'mario
Function GeracaoNFiscal_GerarNFs(ByVal objGeracaoNFiscal As ClassGeracaoNFiscal) As Long
'gera as notas fiscais a partir dos pedidos selecionados.

Dim lErro As Long
Dim alComando(1 To 10) As Long, iIndice As Integer
Dim objFilialEmpresa As New AdmFiliais
Dim objNFiscalInfo As ClassNFiscalInfo
Dim alComando1(1 To NUM_MAX_LCOMANDO_MOVESTOQUE) As Long
Dim alComando2(1 To NUM_MAX_LCOMANDO_NFISCALFAT) As Long
Dim alComando3(1 To 28) As Long
Dim alComando4(1 To 2) As Long

On Error GoTo Erro_GeracaoNFiscal_GerarNFs

    'abrir comandos
    lErro = GeracaoNFiscal_Abrir_Comandos(alComando(), alComando1(), alComando2(), alComando3(), alComando4())
    If lErro <> SUCESSO Then gError 51436

    'obtém os almoxarifados da filial que está faturando, o almoxarifado padrao e os códigos das transacoes: pedido e geracao de nota fiscal
    lErro = GeracaoNFiscal_GerarNF1(alComando(1), objGeracaoNFiscal, objFilialEmpresa)
    If lErro <> SUCESSO Then gError 44319

    For Each objNFiscalInfo In objGeracaoNFiscal.colNFiscalInfo
        
        'se o pedido estiver marcado para gerar a nota fiscal
        If objNFiscalInfo.iMarcada = MARCADO Then
        
            'processa a geração da nota fiscal a partir do pedido
            lErro = Processa_Geracao_NFiscal(alComando(), alComando1(), alComando2(), alComando3(), alComando4(), objNFiscalInfo, objGeracaoNFiscal)
            If lErro <> SUCESSO Then
                
                If lErro = 51452 Then objNFiscalInfo.iMotivoNaoGerada = MOTIVO_NAOGERADA_POR_FALTAESTOQUE
                                                
                'Trecho incluido por leo em 22/02/02
                If objNFiscalInfo.iMotivoNaoGerada = MOTIVO_NAOGERADA_BLOQUEIO_DIAS_ATRASO Then
                    'Inclui o bloqueio por atraso de pagamento no Pedido
                    lErro = PedidoVenda_Inclui_BloqueioAtraso(objNFiscalInfo.lPedido, objNFiscalInfo.iFilialEmpresa)
                    If lErro <> SUCESSO Then gError 94338
                
                End If
                
                If objNFiscalInfo.iMotivoNaoGerada = MOTIVO_NAOGERADA_POR_BLOQUEIO_CREDITO Then
                    'Inclui o bloqueio de crédito no Pedido
                    lErro = PedidoVenda_Inclui_BloqueioCredito(objNFiscalInfo.lPedido, objNFiscalInfo.iFilialEmpresa)
                    If lErro <> SUCESSO Then gError 51527
                    
                End If
                                
                If objNFiscalInfo.iMotivoNaoGerada = 0 Then objNFiscalInfo.iMotivoNaoGerada = MOTIVO_NAOGERADA_OUTROS
                
            End If
            
            Call GeracaoNFiscal_Fechar_Comandos(alComando(), alComando1(), alComando2(), alComando3(), alComando4())

            lErro = GeracaoNFiscal_Abrir_Comandos(alComando(), alComando1(), alComando2(), alComando3(), alComando4())
            If lErro <> SUCESSO Then gError 51436
                
        End If
        
    Next

    Call GeracaoNFiscal_Fechar_Comandos(alComando(), alComando1(), alComando2(), alComando3(), alComando4())

    GeracaoNFiscal_GerarNFs = SUCESSO

    Exit Function

Erro_GeracaoNFiscal_GerarNFs:

    GeracaoNFiscal_GerarNFs = gErr

    Select Case gErr

        Case 19342, 19355, 19356, 19362, 44172, 44193, 44319, 51436, 51527, 94338

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149791)

    End Select

    'fechar comandos
    Call GeracaoNFiscal_Fechar_Comandos(alComando(), alComando1(), alComando2(), alComando3(), alComando4())
    
    Exit Function

End Function



'mario
Private Function GeracaoNFiscal_GerarNF1(ByVal lComando As Long, ByVal objGeracaoNFiscal As ClassGeracaoNFiscal, ByVal objFilialEmpresa As AdmFiliais) As Long
'obtem os almoxarifados da filial que está faturando, o almoxarifado padrao e os codigos das transacoes: pedido e geracao de nota fiscal

Dim lErro As Long
Dim objTransacaoCTB As New ClassTransacaoCTB

On Error GoTo Erro_GeracaoNFiscal_GerarNF1

    If Len(Trim(objGeracaoNFiscal.sSerie)) = 0 Then Error 44196

    'obter colecao de almoxarifados que pertencem a filial que está faturando pois somente poderá ser retirado material destes almoxarifados
    Set objGeracaoNFiscal.colAlmoxFilial = New Collection
    
    lErro = CF("Almoxarifados_Le_FilialEmpresa", giFilialEmpresa, objGeracaoNFiscal.colAlmoxFilial)
    If lErro <> SUCESSO Then Error 44166
    
    objFilialEmpresa.iCodFilial = giFilialEmpresa
    
    'le o almoxarifadopadrao associado à Filial
    lErro = CF("FilialEmpresa_Le1", lComando, objFilialEmpresa)
    If lErro <> SUCESSO And lErro <> 44212 Then Error 44214

    If lErro = SUCESSO Then objGeracaoNFiscal.iAlmoxarifadoPadrao = objFilialEmpresa.iAlmoxarifadoPadrao

    'descobre o codigo da transacao associada à tela de pedido de geração de nota fiscal(esta tela)
    objTransacaoCTB.sSigla = MODULO_FATURAMENTO
    
    'De acordo com o Tipo de Nota que está sendo Gerada
    If objGeracaoNFiscal.iTipoNFiscal = DOCINFO_NFISFVPV Then
        objTransacaoCTB.sTransacao = "NFiscalFaturaPedido"
    Else
        objTransacaoCTB.sTransacao = "NFiscalPedido"
    End If
    
    lErro = CF("TransacaoCTB_Le1", objTransacaoCTB)
    If lErro <> SUCESSO Then Error 44261

    objGeracaoNFiscal.iTransacaoGerNFiscal = objTransacaoCTB.iCodigo
    
    GeracaoNFiscal_GerarNF1 = SUCESSO
    
    Exit Function
    
GeracaoNFiscal_GerarNF1:

    Exit Function

Erro_GeracaoNFiscal_GerarNF1:

    GeracaoNFiscal_GerarNF1 = Err

    Select Case Err
    
        Case 44166, 44214, 44261
        
        Case 44196
            lErro = Rotina_Erro(vbOKOnly, "ERRO_SERIE_NAO_PREENCHIDA", Err)
        
        Case Else
             lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149792)

     End Select

     Exit Function

End Function

'mario
Private Function Processa_Geracao_NFiscal(alComando() As Long, alComando1() As Long, alComando2() As Long, alComando3() As Long, alComando4() As Long, ByVal objNFiscalInfo As ClassNFiscalInfo, ByVal objGeracaoNFiscal As ClassGeracaoNFiscal) As Long
'processa a geração da nota fiscal a partir do pedido

'*** Alterada em 05/03/02 por Luiz Nogueira ***
'*** ClassNFiscal teve o tipo de ColComissoesNF alterado, por isso foi necessário adicionar
'os dados lidos a um obj e depois adicionar o obj à coleção ***

'Alterada em 28/03 por Tulio: Guardando o campo Direto/Indireto no obj

Dim lErro As Long
Dim objNFiscal As New ClassNFiscal
Dim objPedidoVenda As ClassPedidoDeVenda
Dim lNumAuto As Long
Dim lTransacao As Long
Dim dValorFaturado As Double
Dim objMovEstoque As ClassMovEstoque
Dim iNumItensAbertos As Integer
Dim objComissaoPV As ClassComissaoPedVendas
Dim objComissaoNF As ClassComissaoNF
Dim objParcelaPV As ClassParcelaPedidoVenda
Dim colDataVencimento As New Collection, objCondicaoPagto As New ClassCondicaoPagto, iIndice As Integer
Dim objRelatorio As New AdmRelatorio
Dim ColDesconto As ColDesconto
Dim iIndice2 As Integer

On Error GoTo Erro_Processa_Geracao_NFiscal

    'se o pedido estiver marcado para gerar a nota fiscal
    If objNFiscalInfo.iMarcada = MARCADO Then

        'abre transacao
        lTransacao = Transacao_Abrir()
        If lTransacao = 0 Then gError 44184
        
        objNFiscal.iTipoNFiscal = objGeracaoNFiscal.iTipoNFiscal
        
        'transfere os dados do pedido de venda para a nova nota fiscal que está sendo criada
        lErro = Transfere_PV_NF(objNFiscalInfo, objNFiscal, objPedidoVenda)
        If lErro <> SUCESSO Then gError 44323

        Set objGeracaoNFiscal.objNFiscal = objNFiscal
        Set objGeracaoNFiscal.objPedidoVenda = objPedidoVenda

        objNFiscal.sSerie = objGeracaoNFiscal.sSerie

        objNFiscal.lNumNotaFiscal = lNumAuto
        
        objNFiscal.dtDataEmissao = gdtDataAtual
        
        objNFiscal.dtDataSaida = objGeracaoNFiscal.dtDataSaida
        
        objNFiscal.dtHoraSaida = Time
            
        objNFiscal.iTipoNFiscal = objGeracaoNFiscal.iTipoNFiscal
        
        objNFiscal.dtDataVencimento = DATA_NULA

        Set objMovEstoque = New ClassMovEstoque
        
        objMovEstoque.dtData = gdtDataAtual
        objMovEstoque.dtHora = objNFiscal.dtHoraSaida
        objMovEstoque.iFilialEmpresa = giFilialEmpresa

        iNumItensAbertos = objPedidoVenda.colItensPedido.Count
        
        dValorFaturado = 0

        'Lê as Reservas do pedido
        lErro = CF("ReservasPedido_Le", objPedidoVenda)
        If lErro <> SUCESSO Then gError 44376

        'processa a geracao dos itens da Nota Fiscal a partir dos itens do pedido
        lErro = Processa_Itens_NFiscal(alComando(), iNumItensAbertos, objPedidoVenda, dValorFaturado, objMovEstoque, objGeracaoNFiscal)
        If lErro <> SUCESSO And lErro <> 25746 Then gError 44321
        If lErro = 25746 Then gError 51452

        'Transfere os dados das comissões do pedido para a coleção de coissões da Nota Fiscal
        For Each objComissaoPV In objPedidoVenda.colComissoes
            
            With objComissaoPV
                
                'Instancia um novo objComissaoNF
                Set objComissaoNF = New ClassComissaoNF
                
                'Transfere os dados do objComissaoPV para o objComissaoNF
                objComissaoNF.iCodVendedor = .iCodVendedor
                objComissaoNF.dValorBase = .dValorBase
                objComissaoNF.dPercentual = .dPercentual
                objComissaoNF.dValor = .dValor
                objComissaoNF.dPercentualEmissao = .dPercentualEmissao
                objComissaoNF.dValorEmissao = .dValorEmissao
                objComissaoNF.iIndireta = .iIndireta
                objComissaoNF.iSeq = .iSeq
                
            End With
                    
            'Adiciona o objComissaoNF à coleção
            objNFiscal.ColComissoesNF.Add objComissaoNF
        Next

        'se estiver gerando uma nota fiscal fatura
        If objGeracaoNFiscal.iTipoNFiscal = DOCINFO_NFISFVPV Then
          
            objNFiscal.iCondicaoPagto = objPedidoVenda.iCondicaoPagto
            objNFiscal.dtDataReferencia = objPedidoVenda.dtDataReferencia
            
            If objPedidoVenda.colParcelas.Count = 0 Then gError 44399
          
            'Gera parcelas de NF a partir das parcelas de PV
            lErro = ParcelasPV_Gerando_ParcelasNF(objPedidoVenda, objNFiscal)
            If lErro <> SUCESSO Then gError 25745
            
        End If
            
        'se todos os itens foram atendidos pode baixar o pedido
        If iNumItensAbertos = 0 Then
        
            lErro = CF("NFiscal_Valida_Diversos", objNFiscal)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        
            lErro = Processa_Geracao_NFiscal_Trata_Msg(objGeracaoNFiscal)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

            'processa a gravacao da Nota Fiscal e a Baixa do Pedido
            lErro = Processa_Gravacao_NFiscal(alComando1(), alComando2(), alComando3(), alComando4(), objPedidoVenda, dValorFaturado, objMovEstoque, objNFiscal, objGeracaoNFiscal)
            If lErro <> SUCESSO Then gError 44334
            
            lErro = ItensPV_AtualizaQuantFaturada(alComando4(1), alComando4(2), objNFiscal)
            If lErro <> SUCESSO Then gError 69118
        
            lErro = CF("ProdutoFilial_Subtrai_NF_QuantPedida", objNFiscal)
            If lErro <> SUCESSO Then gError 51464
        
            'Grava a Estatística do Cliente
            lErro = CF("FilialCliente_Grava_Estatistica", objNFiscal)
            If lErro <> SUCESSO Then gError 64165
            
            'Grava a Estatística do Produto Vendido
            lErro = CF("ProdutoVendido_Grava_Estatisticas", objNFiscal, CADASTRAMENTO_DOC)
            If lErro <> SUCESSO Then gError 64166
        
            'baixa o pedido de venda
            lErro = CF("PedidoDeVenda_Baixar1", alComando3(), objPedidoVenda, FATURA_TUDO)
            If lErro <> SUCESSO Then gError 44297
        
            'Verifica se o modulo de Livros Fiscais está Ativo
            If gcolModulo.Ativo(MODULO_LIVROSFISCAIS) = MODULO_ATIVO Then
                                
                'Grava o Livro Fiscal a partir da Nota Fiscal
                lErro = CF("NotaFiscal_Grava_Fis", objNFiscal)
                If lErro <> SUCESSO Then gError 44297
            
            End If
        
        Else

            gError 44318
            '**************** PROXIMA VERSAO **********************
            'percorrer todos os itens c/qtde a faturar <> 0 atualizando qtde faturada e status
            'lErro = PedidoDeVenda_AtualizarFat(objPedidoVenda)
            'if lErro <> SUCESSO then error
            '******************************************************

        End If
        
        lErro = CF("PV_Andamento_Auto", objPedidoVenda, PV_STATUS_ANDAMENTO_TIPO_NF_GRAVA)
        If lErro <> SUCESSO Then gError 44297
        
        lErro = CF("NFiscal_Trata_MsgItem", objNFiscal)
        If lErro <> SUCESSO Then gError 44297
        
        lErro = CF("NFiscal_Valida_NFE", objNFiscal)
        If lErro <> SUCESSO Then gError 207572
        
        lErro = Transacao_Commit()
        If lErro <> SUCESSO Then gError 19341
        
        objNFiscalInfo.iMotivoNaoGerada = 0
        objNFiscalInfo.lNumIntDoc = objNFiscal.lNumIntDoc
    
    End If

    Processa_Geracao_NFiscal = SUCESSO
    
    Exit Function
    
Erro_Processa_Geracao_NFiscal:

    Processa_Geracao_NFiscal = gErr
    
    Select Case gErr

        Case 19341
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case 25745, 44245, 44321, 44323, 44334, 44376, 51464, 59143, 59144, 51613, 64165, 64166, 69118, 44297, 207572
        
        Case 44184
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 44318
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PEDIDO_FATURAMENTO_PARCIAL", gErr, objPedidoVenda.lCodigo)
        
        Case 44399
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PEDIDO_SEM_COBRANCA", gErr, objPedidoVenda.lCodigo)
        
        Case 51452 'falta de estoque p/ ítem. A ser tratado na chamadora.
        
        Case ERRO_SEM_MENSAGEM
        
        Case Else
             lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149793)

     End Select

     Call Transacao_Rollback

     Exit Function
    
End Function

'mario
Function NFiscalSaidaNum_Automatico(ByVal sSerie As String, lNumAuto As Long) As Long
'Retorna o número do próximo NumNFiscal disponivel

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_NFiscalSaidaNum_Automatico

    lTransacao = Transacao_Abrir()
    
    If lTransacao = 0 Then Error 39006

    lErro = NFiscalSaidaNum_Automatico_EmTrans(sSerie, lNumAuto)
    If lErro <> SUCESSO Then Error 51358
    
    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then Error 39007

    NFiscalSaidaNum_Automatico = SUCESSO

    Exit Function

Erro_NFiscalSaidaNum_Automatico:

    NFiscalSaidaNum_Automatico = Err

    Select Case Err
    
        Case 39006
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 39007
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case 51358
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149794)

    End Select

    Call Transacao_Rollback

    Exit Function

End Function

Function NFiscalSaidaNum_Automatico_EmTrans(ByVal sSerie As String, lNumAuto As Long) As Long
'ATENÇÃO: Essa rotina deve ser chamada em transação
'Retorna o número do próximo NumNFiscal disponivel

Dim lComando As Long
Dim lComando1 As Long
Dim lErro As Long
Dim lNumNFiscal As Long
Dim lNumNFiscalUsado As Long
Dim iFim_de_Arquivo As Integer

On Error GoTo Erro_NFiscalSaidaNum_Automatico_EmTrans

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 30577

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 30579

    'Pesquisa o número do NumNFiscal gerado automaticamente pelo sistema
    lErro = Comando_ExecutarPos(lComando, "SELECT ProxNumNFiscal FROM Serie WHERE Serie = ? AND FilialEmpresa = ?", 0, lNumNFiscal, sSerie, giFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then Error 30582

    'le o registro com o número do NumNFiscal automático
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO Then Error 30583

    'loca o registro que guarda o numero do NumNFiscal gerado automaticamente
    lErro = Comando_LockExclusive(lComando)
    If lErro <> AD_SQL_SUCESSO Then Error 30584
   
    'verifica se este número ainda não foi utilizado
    'Pesquisa as numerações de NumNFiscal maiores ou iguais a numeração gerada automaticamente
    lErro = Comando_Executar(lComando1, "SELECT NFiscal.NumNotaFiscal FROM NFiscal, TiposDocInfo WHERE NFiscal.NumNotaFiscal >= ? AND NFiscal.TipoNFiscal = TiposDocInfo.Codigo AND TiposDocInfo.Tipo = ? AND NFiscal.Serie = ? ORDER BY NumNotaFiscal", lNumNFiscalUsado, lNumNFiscal, DOCINFO_NF_INT_SAIDA, sSerie)
    If lErro <> AD_SQL_SUCESSO Then Error 30585

    'le o primeiro codigo >= ao codigo automatico
    iFim_de_Arquivo = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 42761

    'pesquisa o proximo número de codigo disponível
    Do While iFim_de_Arquivo <> AD_SQL_SEM_DADOS

        If lNumNFiscal < lNumNFiscalUsado Then Exit Do

        If lNumNFiscalUsado = lNumNFiscal Then
            lNumNFiscal = lNumNFiscal + 1
        End If

        iFim_de_Arquivo = Comando_BuscarProximo(lComando1)
        If iFim_de_Arquivo <> AD_SQL_SUCESSO And iFim_de_Arquivo <> AD_SQL_SEM_DADOS Then Error 42760
        
    Loop

    'Valor de retorno da funcao
    lNumAuto = lNumNFiscal

    lNumNFiscal = lNumNFiscal + 1

    'atualiza o numero do NumNFiscal gerado automaticamente
    lErro = Comando_ExecutarPos(lComando1, "UPDATE Serie SET ProxNumNFiscal = ?", lComando, lNumNFiscal)
    If lErro <> AD_SQL_SUCESSO Then Error 30586

    Call Comando_Unlock(lComando)
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    NFiscalSaidaNum_Automatico_EmTrans = SUCESSO

    Exit Function

Erro_NFiscalSaidaNum_Automatico_EmTrans:

    NFiscalSaidaNum_Automatico_EmTrans = Err

    Select Case Err

        Case 30577, 30579
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 30582, 30583
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SERIE", Err)

        Case 30584
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_SERIE", Err)

        Case 30585, 42760, 42761
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL4", Err)

        Case 30586
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SERIE", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149795)

    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

'mario
Function NFiscal_Grava_Trans(alComando() As Long, ByVal objNFiscal As ClassNFiscal) As Long
'grava a nota fiscal
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lErro As Long
Dim lNumIntDoc As Long
Dim vbMsgRes As VbMsgBoxResult
Dim alComando1(1 To 12) As Long
Dim alComando2(1 To NUM_MAX_LCOMANDO_MOVESTOQUE + 43) As Long
Dim iIndice As Integer

On Error GoTo Erro_NFiscal_Grava_Trans

    'copia alguns alComando para alComando1
    For iIndice = LBound(alComando1) To UBound(alComando1)
        alComando1(iIndice) = alComando(iIndice)
    Next

    'copia alguns alComando para alComando2
    For iIndice = LBound(alComando2) To UBound(alComando2)
        alComando2(iIndice) = alComando(iIndice + UBound(alComando1))
    Next

    'executa o lock dos registros associados a nota fiscal.
    lErro = CF("NFiscal_Lock_Gravacao", alComando1(), objNFiscal)
    If lErro <> SUCESSO Then Error 35972

    'Insere uma Nota Fiscal de Saida no Banco de Dados
    lErro = NFiscal_Grava_BD(alComando2(), objNFiscal)
    If lErro <> SUCESSO And lErro <> 61400 Then Error 39003

    'Tratar a gravação da contabilidade
    If lErro = 61400 Then Error 61403
    
    NFiscal_Grava_Trans = SUCESSO

    Exit Function

Erro_NFiscal_Grava_Trans:

    NFiscal_Grava_Trans = Err

    Select Case Err

        Case 35963, 35964
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL2", Err, objNFiscal.iTipoNFiscal, objNFiscal.lCliente, objNFiscal.iFilialCli, objNFiscal.sSerie, objNFiscal.lNumNotaFiscal)

        Case 35972, 39003, 42759

        Case 61403 'Tratar a gravação da contabilidade
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149796)

    End Select

    Exit Function

End Function

'mario
Public Function NFiscal_Lock_Gravacao(alComando() As Long, ByVal objNFiscal As ClassNFiscal) As Long
'executa o lock dos registros associados a nota fiscal.

Dim lErro As Long
Dim iIndice As Long
Dim sNome As String
Dim sDescricao As String
Dim iCodigo As Integer
Dim iFilialEmpresa As Integer
Dim objItemNF As ClassItemNF
Dim objProduto As New ClassProduto
Dim colCodigoNome As New AdmColCodigoNome
Dim objCodigoNome As AdmCodigoNome
Dim iAlmoxarifadoLocado As Integer
Dim objItemAloc As ClassItemNFAlocacao
Dim objComissaoNF As ClassComissaoNF
Dim iFilialEmpresa1 As Integer

On Error GoTo Erro_NFiscal_Lock_Gravacao

    lErro = CF("NaturezaOperacao_Lock", objNFiscal.sNaturezaOp, alComando(1))
    If lErro <> SUCESSO And lErro <> 40551 Then Error 35974
    
    If lErro = 40551 Then Error 35975
   
    lErro = CF("FilialCliente_Lock1", alComando(2), objNFiscal.lCliente, objNFiscal.iFilialCli)
    If lErro <> SUCESSO And lErro <> 43050 Then Error 35977
    
    'Não achou a Filial do Cliente --> erro
    If lErro = 43050 Then Error 43052

    lErro = CF("Serie_Lock", alComando(3), objNFiscal.sSerie)
    If lErro <> SUCESSO And lErro <> 43032 Then Error 35978
    
    'Não encontrou a Série --> erro
    If lErro = 43032 Then Error 43034
    
    If objNFiscal.iTabelaPreco > 0 Then
        lErro = CF("NFiscal_TabelaPreco_Lock", alComando(9), objNFiscal)
        If lErro <> SUCESSO Then Error 44292
    End If
    
    'Se a Transportadora estiver preenchida
    If objNFiscal.iCodTransportadora > 0 Then
        
        lErro = CF("Transportadora_Lock", alComando(4), objNFiscal.iCodTransportadora)
        If lErro <> SUCESSO And lErro <> 43038 Then Error 35979
        
        'Não encontrou a Transportadora --> erro
        If lErro = 43038 Then Error 43040
        
    End If
    
    'Se a Transportadora de redespacho estiver preenchida
    If objNFiscal.iCodTranspRedesp > 0 Then
        
        lErro = CF("Transportadora_Lock", alComando(4), objNFiscal.iCodTranspRedesp)
        If lErro <> SUCESSO And lErro <> 43038 Then Error 35979
        
        'Não encontrou a Transportadora --> erro
        If lErro = 43038 Then Error 43040
        
    End If
    
    'Se o Canal de Venda estiver preenchido
    If objNFiscal.iCanal <> 0 Then
    
        lErro = CF("CanalVenda_Lock", alComando(5), objNFiscal.iCanal)
        If lErro <> SUCESSO And lErro <> 43026 Then Error 43022
        
        'Não encontrou o Canal de Venda --> erro
        If lErro = 43026 Then Error 43028
        
    End If
    
    For Each objComissaoNF In objNFiscal.ColComissoesNF
        lErro = CF("Vendedor_Lock", alComando(8), objComissaoNF.iCodVendedor)
        If lErro <> SUCESSO Then Error 51581
    Next
    
    'Lock shared nos Produtos e Almoxarifados
    For Each objItemNF In objNFiscal.colItensNF
        
        objProduto.sCodigo = objItemNF.sProduto
        
        lErro = CF("Produto_Lock_Shared", alComando(6), objProduto)
        If lErro <> SUCESSO Then Error 35990

        objItemNF.iControleEstoque = objProduto.iControleEstoque
        objItemNF.sUMEstoque = objProduto.sSiglaUMEstoque
        objItemNF.sUMVenda = objProduto.sSiglaUMVenda
        objItemNF.iClasseUM = objProduto.iClasseUM
        objItemNF.iApropriacaoProd = objProduto.iApropriacaoCusto

        If objItemNF.iControleEstoque <> PRODUTO_CONTROLE_SEM_ESTOQUE Then

            For Each objItemAloc In objItemNF.colAlocacoes
    
                iAlmoxarifadoLocado = False
                
                If colCodigoNome.Count > 0 Then
                    For Each objCodigoNome In colCodigoNome
                        If objCodigoNome.iCodigo = objItemAloc.iAlmoxarifado Then
                            iAlmoxarifadoLocado = True
                        End If
                    Next
                End If
                    
                If iAlmoxarifadoLocado = False Then
                
                    colCodigoNome.Add objItemAloc.iAlmoxarifado, objItemAloc.sAlmoxarifado
                
                    If objNFiscal.iFilialEmpresa = 0 Then objNFiscal.iFilialEmpresa = giFilialEmpresa
                    
                    iFilialEmpresa1 = objNFiscal.iFilialEmpresa
                    lErro = CF("FilialEmpresaAlmox_Customiza", iFilialEmpresa1)
                    If lErro <> SUCESSO Then Error 35990
            
                    lErro = Comando_ExecutarLockado(alComando(7), "SELECT FilialEmpresa FROM Almoxarifado WHERE Codigo = ? AND FilialEmpresa = ? ", iFilialEmpresa, objItemAloc.iAlmoxarifado, iFilialEmpresa1)
                    If lErro <> AD_SQL_SUCESSO Then Error 35991
        
                    lErro = Comando_BuscarPrimeiro(alComando(7))
                    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 35994
                    If lErro = AD_SQL_SEM_DADOS Then Error 35992
        
                    lErro = Comando_LockShared(alComando(7))
                    If lErro <> AD_SQL_SUCESSO Then Error 35993
            
                End If
            Next
        End If
    Next

    lErro = CF("NFiscal_Lock_Gravacao_Cust", objNFiscal)
    If lErro <> SUCESSO Then Error 51581
    
    NFiscal_Lock_Gravacao = SUCESSO

    Exit Function

Erro_NFiscal_Lock_Gravacao:

    NFiscal_Lock_Gravacao = Err

    Select Case Err

        Case 35974, 35975
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NATUREZAOP", Err, objNFiscal.sNaturezaOp)

        Case 35976
            lErro = Rotina_Erro(vbOKOnly, "ERRO_NATUREZAOP_INEXISTENTE", Err, objNFiscal.sNaturezaOp)

        Case 35977
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_NATUREZAOP", Err, objNFiscal.sNaturezaOp)

        Case 35979
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIAISCLIENTES1", Err, objNFiscal.lCliente, objNFiscal.iFilialCli)

        Case 35990, 43022, 35978, 44292, 51581

        Case 35991, 35994
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ALMOXARIFADO", Err, objItemNF.iAlmoxarifado)

        Case 35992
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ALMOXARIFADO_INEXISTENTE", Err, objItemAloc.iAlmoxarifado)

        Case 35993
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_ALMOXARIFADO1", Err, objItemNF.iAlmoxarifado)

        Case 43028
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CANALVENDA_NAO_CADASTRADO", Err, objNFiscal.iCanal)

        Case 43034
            lErro = Rotina_Erro(vbOKOnly, "ERRO_SERIE_NAO_CADASTRADA", Err, objNFiscal.sSerie)

        Case 43040
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TRANSPORTADORA_NAO_CADASTRADA", Err, objNFiscal.iCodTransportadora)

        Case 43052
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FILIALCLIENTE_NAO_CADASTRADA", Err, objNFiscal.lCliente, objNFiscal.iFilialCli)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149797)

    End Select

    Exit Function

End Function

'mario
Private Function NFiscal_Grava_BD(alComando() As Long, ByVal objNFiscal As ClassNFiscal) As Long
'Insere uma Nota Fiscal de Saida no Banco de Dados

Dim lErro As Long
Dim iClasseDocCPR As Integer
Dim lNumIntDocCPR As Long
Dim iIndice As Integer
Dim colComissoesEmissao As New colComissao
Dim alComando1(1 To 13) As Long
Dim alComando2(1 To 13) As Long
Dim alComando3(1 To 4) As Long
Dim alComando4(1 To NUM_MAX_LCOMANDO_MOVESTOQUE) As Long
Dim alComando5(1 To 2) As Long
Dim objNFiscalAux As New ClassNFiscal
Dim bExcluiNF As Boolean

On Error GoTo Erro_NFiscal_Grava_BD

    bExcluiNF = False

    'copia alguns alComando para alComando1
    For iIndice = LBound(alComando1) To UBound(alComando1)
        alComando1(iIndice) = alComando(iIndice)
    Next
    
    'copia alguns alComando para alComando2
    For iIndice = LBound(alComando2) To UBound(alComando2)
        alComando2(iIndice) = alComando(iIndice + UBound(alComando1))
    Next
    
    'copia alguns alComando para alComando3
    For iIndice = LBound(alComando3) To UBound(alComando3)
        alComando3(iIndice) = alComando(iIndice + UBound(alComando1) + UBound(alComando2))
    Next
    
    'copia alguns alComando para alComando4
    For iIndice = LBound(alComando4) To UBound(alComando4)
        alComando4(iIndice) = alComando(iIndice + UBound(alComando1) + UBound(alComando2) + UBound(alComando3))
    Next
    
    'copia alguns alComando para alComando5
    For iIndice = LBound(alComando5) To UBound(alComando5)
        alComando5(iIndice) = alComando(iIndice + UBound(alComando1) + UBound(alComando2) + UBound(alComando3) + UBound(alComando4))
    Next
        
    If objNFiscal.lNumNotaFiscal = 0 Then
    
        'Gera o Número para a Nota Fiscal e atualiza a Tabela de Serie
        lErro = CF("NFiscalNumAuto", objNFiscal)
        If lErro <> SUCESSO Then gError 60443
    
        'verifica se a nota fiscal já está cadastrada ou se já existe uma nota com os mesmos dados em um dado periodo
        lErro = CF("NFiscal_Testa_Existencia", alComando5(1), alComando5(2), objNFiscal)
        If lErro <> SUCESSO And lErro <> 207583 And lErro <> 207585 Then gError 207595
    
        'é erro pois o usuario esta querendo fazer uma inclusao de nota e o novo numero de nota fiscal gerado coincide com alguma nota
        If lErro <> SUCESSO Then gError 81504
        
    Else
    
        lErro = CF("NFiscal_Testa_Numero", objNFiscal)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
        'verifica se a nota fiscal já está cadastrada ou se já existe uma nota com os mesmos dados em um dado periodo
        lErro = CF("NFiscal_Testa_Existencia", alComando5(1), alComando5(2), objNFiscal)
        If lErro <> SUCESSO And lErro <> 207583 And lErro <> 207585 Then gError 207596
    
        objNFiscalAux.lNumIntDoc = objNFiscal.lNumIntDoc
        Set objNFiscalAux.objContabil = objNFiscal.objContabil
        
        'vai excluir a nota e inclui-la com o mesmo numero
        If lErro <> SUCESSO Then
            
            lErro = CF("NFiscal_Le", objNFiscalAux)
            If lErro <> SUCESSO And lErro <> 31442 Then gError ERRO_SEM_MENSAGEM
        
            'Lê os itens da nota fiscal
            lErro = CF("NFiscalItens_Le", objNFiscalAux)
            If lErro <> SUCESSO Then gError 207573
    
            'Faz a exclusao de uma nota fiscal de Saida
            lErro = CF("NotaFiscalSaida_Excluir_EmTrans", objNFiscalAux, objNFiscal.objContabil)
            If lErro <> SUCESSO Then gError 207574
        
            bExcluiNF = True
    
        'se o numero da nota foi especificada e nao encontrou a nota, vai inclui-la se for nota de venda fora do estalecimento
        Else
            'se nao for nota de venda fora do estabelecimento nao deveria vir a nota preenchida e portanto da erro
            If objNFiscal.iNumNFManual = 0 And ((objNFiscal.iTipoNFiscal <> DOCINFO_NFISVFE And objNFiscal.iTipoNFiscal <> DOCINFO_NFISFVFE) Or gobjFAT.iVFEUsaTManual = DESMARCADO) Then gError 81505
        End If
                    
    End If
    
    'Busca iClasseDocCPR e lNumIntDocCPR
    lErro = CF("CPR_Gera", objNFiscal, iClasseDocCPR, lNumIntDocCPR)
    If lErro <> SUCESSO Then gError 44311

    objNFiscal.iClasseDocCPR = iClasseDocCPR
    objNFiscal.lNumIntDocCPR = lNumIntDocCPR
    
    'grava a nota fiscal, seus itens e a tributacao respectiva
    lErro = CF("NFiscal_Grava_NFiscal", alComando1(), objNFiscal)
    If lErro <> SUCESSO Then gError 44287

    'Insere no Banco de Dados as Comissões da Nota Fiscal passada em objNFiscal
    lErro = CF("ComissoesNF_Grava", alComando2(1), alComando2(2), objNFiscal)
    If lErro <> SUCESSO Then gError 39018

    'Gera as Comissões na Emissão com base nas comissões armazenadas em objNFiscal e coloca-os em colComissoesEmissao
    lErro = CF("Comissoes_Gera", alComando2(3), alComando2(4), objNFiscal, colComissoesEmissao)
    If lErro <> SUCESSO Then gError 42469

    'Grava as Comissões passadas em colComissao
    lErro = CF("Comissoes_Grava1", alComando2(5), alComando2(6), alComando2(7), alComando2(8), colComissoesEmissao)
    If lErro <> SUCESSO Then gError 42470
        
    'gera os movimentos de estoque, se necessários
    lErro = CF("MovEstoque_Gera", alComando3(), alComando4(), objNFiscal)
    If lErro <> SUCESSO Then gError 44288
    
    If bExcluiNF Then
        lErro = CF("NFiscal_ExcluiInclui_AcertaRefs_Cust", objNFiscal, objNFiscalAux)
        If lErro <> SUCESSO Then gError 44288
    End If
    
    NFiscal_Grava_BD = SUCESSO

    Exit Function

Erro_NFiscal_Grava_BD:

    NFiscal_Grava_BD = gErr

    Select Case gErr

        Case 39018, 42469, 42470, 44287, 44288, 44311, 60443, 207745, 207572 To 207576, 207595, 207596
        
        Case 81504, 81505
            Call Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_NFISCAL_NUMAUTO", gErr)
        
        Case ERRO_SEM_MENSAGEM
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149798)

    End Select

    Exit Function

End Function

Public Function NFiscal_ExcluiInclui_AcertaRefs_Cust(ByVal objNFNova As ClassNFiscal, ByVal objNFAntiga As ClassNFiscal) As Long
    NFiscal_ExcluiInclui_AcertaRefs_Cust = SUCESSO
End Function

'''mario
''Private Function Atualiza_Saldos_Faturamento(lComando As Long, lComando1 As Long, lComando2 As Long, lComando3 As Long, lComando4 As Long, objNFiscal As ClassNFiscal) As Long
'''atualiza os saldos de faturamento
''
''Dim lErro As Long
''Dim objItemNF As ClassItemNF
''Dim objSldDiaFat As New ClassSldDiaFat
''
''On Error GoTo Erro_Atualiza_Saldos_Faturamento
''
''    'Para cada item da Nota
''    For Each objItemNF In objNFiscal.ColItensNF
''
''        lErro = Faturamento_Transforma_UM(lComando, objItemNF)
''        If lErro <> SUCESSO Then Error 44314
''
''        objSldDiaFat.iFilialEmpresa = objNFiscal.iFilialEmpresa
''        objSldDiaFat.dtData = objNFiscal.dtDataEmissao
''        objSldDiaFat.sProduto = objItemNF.sProduto
''        objSldDiaFat.dQuantFaturada = objItemNF.dQuantUMVenda
''        objSldDiaFat.dValorFaturado = objItemNF.dPrecoUnitario * objItemNF.dQuantidade
''        objSldDiaFat.dTotalDescontos = objItemNF.dValorDesconto
''
''        'Atualiza a tabela SldDiaFat utilizando os valores passados atraves de objSldDiaFat.
''        lErro = CF("SldDiaFat_Atualiza",lComando1, lComando2, objSldDiaFat)
''        If lErro <> SUCESSO Then Error 44315
''
''        'Atualiza a tabela SldMesFat utilizando os valores passados atraves de objSldDiaFat.
''        lErro = CF("SldMesFat_Atualiza",lComando3, lComando4, objSldDiaFat)
''        If lErro <> SUCESSO Then Error 44316
''
''    Next
''
''    Atualiza_Saldos_Faturamento = SUCESSO
''
''    Exit Function
''
''Erro_Atualiza_Saldos_Faturamento:
''
''    Atualiza_Saldos_Faturamento = Err
''
''    Select Case Err
''
''        Case 44314, 44315, 44316
''
''        Case Else
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149799)
''
''    End Select
''
''    Exit Function
''
''End Function
''
'mario
Private Function Faturamento_Transforma_UM(ByVal lComando As Long, ByVal objItemNF As ClassItemNF) As Long
'transforma a quantidade do movimento na quantidade em unidade de venda

Dim lErro As Long
Dim objUnidadeMedida As New ClassUnidadeDeMedida
Dim dQuantidade As Double

On Error GoTo Erro_Faturamento_Transforma_UM

    objUnidadeMedida.iClasse = objItemNF.iClasseUM
    objUnidadeMedida.sSigla = objItemNF.sUnidadeMed

    lErro = CF("UM_Le1", lComando, objUnidadeMedida)
    If lErro <> SUCESSO Then Error 44312

    dQuantidade = objUnidadeMedida.dQuantidade

    objUnidadeMedida.sSigla = objItemNF.sUMVenda

    lErro = CF("UM_Le1", lComando, objUnidadeMedida)
    If lErro <> SUCESSO Then Error 44313

    objItemNF.dQuantUMVenda = (objItemNF.dQuantidade * dQuantidade) / objUnidadeMedida.dQuantidade

    Faturamento_Transforma_UM = SUCESSO
    
    Exit Function
    
Erro_Faturamento_Transforma_UM:

    Faturamento_Transforma_UM = Err
    
    Select Case Err
    
        Case 44312, 44313
    
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149800)
    
    End Select
    
    Exit Function

End Function

'mario
Public Function NFiscal_Grava_NFiscal(alComando() As Long, ByVal objNFiscal As ClassNFiscal) As Long
'Grava a nota fiscal, seus itens e a tributacao respectiva

Dim lErro As Long
Dim lNumIntDoc As Long
Dim objItemNF As ClassItemNF

On Error GoTo Erro_NFiscal_Grava_NFiscal

    'Obtem o Número Interno da nova Nota Fiscal
    lErro = CF("NFiscal_Automatico1", alComando(1), alComando(2), alComando(3), lNumIntDoc)
    If lErro <> SUCESSO Then gError 35997

    objNFiscal.lNumIntDoc = lNumIntDoc
    
    lErro = CF("NFiscal_Grava_Msg", objNFiscal)
    If lErro <> SUCESSO Then gError 35997

    With objNFiscal
    
        .iNFe = SerieEletronica(.sSerie)

        'Insere a nova Nota Fiscal de Saida no BD
        lErro = Comando_Executar(alComando(4), "INSERT INTO NFiscal (DataAtualizacao, NumIntDoc, Status, FilialEmpresa, Serie, NumNotaFiscal, Cliente, FilialCli, FilialEntrega, Fornecedor, FilialForn, DataEmissao, DataEntrada, DataSaida, DataVencimento, DataReferencia,NumPedidoVenda, NumPedidoTerc, ClasseDocCPR, NumIntDocCPR, ValorTotal, ValorProdutos, ValorFrete, ValorSeguro, ValorOutrasDespesas, ValorDesconto, CodTransportadora, MensagemNota, TabelaPreco, TipoNFiscal, NaturezaOp, PesoLiq, PesoBruto, NumIntTrib, Placa, PlacaUF, VolumeQuant, VolumeEspecie, VolumeMarca, Canal, NumIntNotaOriginal,FilialPedido, VolumeNumero, FreteRespons, HoraSaida, CodTranspRedesp, DetPagFrete, Moeda, TaxaMoeda, VolumeTotal, SemDataSaida, NaoImpCobranca, MensagemCorpoNota,RPS, NFe, ValorDescontoTit, ValorItens, ValorDescontoItens,FornEntTerc,FilialFornEntTerc, ChvNFe, HoraEmissao, DataCadastro, HoraCadastro, UsuCadastro,CliIntermediario,FilialCliIntermediario) " & _
            "VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
            gdtDataHoje, .lNumIntDoc, .iStatus, .iFilialEmpresa, .sSerie, .lNumNotaFiscal, .lCliente, .iFilialCli, .iFilialEntrega, .lFornecedor, .iFilialForn, .dtDataEmissao, .dtDataEntrada, .dtDataSaida, .dtDataVencimento, .dtDataReferencia, .lNumPedidoVenda, .sNumPedidoTerc, .iClasseDocCPR, .lNumIntDocCPR, .dValorTotal, .dValorProdutos, .dValorFrete, .dValorSeguro, .dValorOutrasDespesas, .dValorDesconto, .iCodTransportadora, .sMensagemNota, .iTabelaPreco, .iTipoNFiscal, .sNaturezaOp, .dPesoLiq, .dPesoBruto, .lNumIntTrib, .sPlaca, .sPlacaUF, .lVolumeQuant, .lVolumeEspecie, .lVolumeMarca, .iCanal, .lNumIntNotaOriginal, .iFilialPedido, .sVolumeNumero, .iFreteRespons, CDbl(.dtHoraSaida), .iCodTranspRedesp, .iDetPagFrete, .iMoeda, .dTaxaMoeda, .dVolumeTotal, .iSemDataSaida, .iNaoImpCobranca, .sMensagemCorpoNota, _
            .iRecibo, .iNFe, .dValorDescontoTit, .dValorItens, .dValorDescontoItens, .lFornEntTerc, .iFilialFornEntTerc, .sChvNFe, CDbl(IIf(.dtDataSaida <> DATA_NULA, IIf(.dtHoraEmissao <> 0 And .dtHoraEmissao < .dtHoraSaida, .dtHoraEmissao, .dtHoraSaida), IIf(.dtHoraEmissao <> 0 And .dtHoraEmissao < .dtHoraEntrada, .dtHoraEmissao, .dtHoraEntrada))), gdtDataHoje, CDbl(Time), gsUsuario, .lCliIntermediario, .iFilialCliIntermediario)
        If lErro <> AD_SQL_SUCESSO Then gError 35998
        
    End With

    'grava a tributacao da nota como um todo
    lErro = CF("NFiscal_GravaTributacao", objNFiscal, alComando(5), alComando(6))
    If lErro <> SUCESSO Then gError 39042
   
    'Obtém o Número Interno dos itens da NF
    lErro = CF("CRFATConfig_ObterNumInt", alComando(7), alComando(8), "NUM_PROX_ITEM_NOTA_FISCAL", lNumIntDoc, objNFiscal.colItensNF.Count + objNFiscal.colItensSRV.Count)
    If lErro <> SUCESSO Then gError 35999
   
    'Para cada item da Nota
    For Each objItemNF In objNFiscal.colItensNF

        objItemNF.lNumIntNF = objNFiscal.lNumIntDoc
        objItemNF.lNumIntDoc = lNumIntDoc

        With objItemNF
        
            'Insere o item no Banco de dados
            lErro = Comando_Executar(alComando(9), "INSERT INTO ItensNFiscal (NumIntNF, Item, Status, Produto, UnidadeMed, Quantidade, PrecoUnitario, PercDesc, ValorDesconto, DataEntrega, DescricaoItem, ValorAbatComissao, NumIntPedVenda, NumIntItemPedVenda, NumIntDoc, NumIntTrib, NumIntDocOrig, Almoxarifado,PercentMaisReceb,PercentMenosReceb,RecebForaFaixa,Comissao, TabelaPreco) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", .lNumIntNF, .iItem, STATUS_LANCADO, .sProduto, .sUnidadeMed, .dQuantidade, .dPrecoUnitario, .dPercDesc, .dValorDesconto, .dtDataEntrega, .sDescricaoItem, .dValorAbatComissao, .lNumIntPedVenda, .lNumIntItemPedVenda, lNumIntDoc, .lNumIntTrib, 0, .iAlmoxarifado, .dPercentMaisReceb, .dPercentMenosReceb, .iRecebForaFaixa, .dComissao, .iTabelaPreco)
            If lErro <> AD_SQL_SUCESSO Then gError 35212
            
        End With
        
        lErro = CF("ItensNFGrade_Inclui", objItemNF)
        If lErro <> SUCESSO Then gError 86365
        
        If objItemNF.objCobrItensContrato.lNumIntItensContrato <> 0 Then
            lErro = ItensDeContrato_Insere_Fatura(objNFiscal, objItemNF)
            If lErro <> SUCESSO Then gError 129945
        End If
        
        'grava a tributacao relativa a cada item da nota
        lErro = CF("NFiscal_GravaTributacaoItem", objItemNF, alComando(10), alComando(11))
        If lErro <> SUCESSO Then gError 39043
        
        objItemNF.objInfoAdicDocItem.iTipoDoc = TIPODOC_INFOADIC_ITEMNF
        objItemNF.objInfoAdicDocItem.lNumIntDocItem = objItemNF.lNumIntDoc
        lErro = CF("InfoAdicDocItem_Insere", objItemNF.objInfoAdicDocItem, alComando(13))
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        
        If objItemNF.colEmbalagens.Count <> 0 Then
        
            'Insere as embalagens do pedido de venda no BD
            lErro = CF("EmbalagensItem_Grava", objItemNF.colEmbalagens, DOCORIGEM_NF, objItemNF.lNumIntDoc)
            If lErro <> SUCESSO Then gError 199810
        
        End If
        
        lErro = CF("ItemNFSai_Customizado", objNFiscal, objItemNF)
        If lErro <> SUCESSO Then gError 199810
        
        lNumIntDoc = lNumIntDoc + 1
    
    Next

'Para cada item da Nota
    For Each objItemNF In objNFiscal.colItensSRV

        objItemNF.lNumIntNF = objNFiscal.lNumIntDoc
        objItemNF.lNumIntDoc = lNumIntDoc

        With objItemNF
        
            'Insere o item no Banco de dados
            lErro = Comando_Executar(alComando(9), "INSERT INTO ItensNFiscal (NumIntNF, Item, Status, Produto, UnidadeMed, Quantidade, PrecoUnitario, PercDesc, ValorDesconto, DataEntrega, DescricaoItem, ValorAbatComissao, NumIntPedVenda, NumIntItemPedVenda, NumIntDoc, NumIntTrib, NumIntDocOrig, Almoxarifado,PercentMaisReceb,PercentMenosReceb,RecebForaFaixa, Tipo) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", .lNumIntNF, .iItem, STATUS_LANCADO, .sProduto, .sUnidadeMed, .dQuantidade, .dPrecoUnitario, .dPercDesc, .dValorDesconto, .dtDataEntrega, .sDescricaoItem, .dValorAbatComissao, .lNumIntPedVenda, .lNumIntItemPedVenda, lNumIntDoc, .lNumIntTrib, 0, .iAlmoxarifado, .dPercentMaisReceb, .dPercentMenosReceb, .iRecebForaFaixa, ITEMNF_TIPO_SERVICO)
            If lErro <> AD_SQL_SUCESSO Then gError 35212
            
        End With
        
        lErro = CF("ItensNFGrade_Inclui", objItemNF)
        If lErro <> SUCESSO Then gError 86365
        
        If objItemNF.objCobrItensContrato.lNumIntItensContrato <> 0 Then
            lErro = ItensDeContrato_Insere_Fatura(objNFiscal, objItemNF)
            If lErro <> SUCESSO Then gError 129945
        End If
        
        'grava a tributacao relativa a cada item da nota
        lErro = CF("NFiscal_GravaTributacaoItem", objItemNF, alComando(10), alComando(11))
        If lErro <> SUCESSO Then gError 39043
        
        objItemNF.objInfoAdicDocItem.iTipoDoc = TIPODOC_INFOADIC_ITEMNF
        objItemNF.objInfoAdicDocItem.lNumIntDocItem = objItemNF.lNumIntDoc
        lErro = CF("InfoAdicDocItem_Insere", objItemNF.objInfoAdicDocItem, alComando(13))
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
                
        lNumIntDoc = lNumIntDoc + 1
    
    Next

    lErro = CF("NFiscalItens_Grava_Customizado", objNFiscal)
    If lErro <> SUCESSO Then gError 177048

    lErro = CF("NFiscal_Grava_NFiscal_Cust", objNFiscal)
    If lErro <> SUCESSO Then gError 177048
    
    NFiscal_Grava_NFiscal = SUCESSO

    Exit Function

Erro_NFiscal_Grava_NFiscal:

    NFiscal_Grava_NFiscal = gErr

    Select Case gErr

        Case 35212
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_ITENSNFISCAL", gErr, objNFiscal.lNumNotaFiscal)

        Case 35997, 35999, 39042, 39043, 86365, 177048, 199810
        
        Case 35998
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_NFISCAL_SAIDA", gErr, objNFiscal.lCliente, objNFiscal.iFilialCli, objNFiscal.iTipoNFiscal, objNFiscal.sSerie, objNFiscal.lNumNotaFiscal)
        
        Case 129945
        
        Case ERRO_SEM_MENSAGEM
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149801)

    End Select

    Exit Function

End Function

'''mario
''Function NFiscal_Grava(objNFiscal As ClassNFiscal, objContabil As ClassContabil) As Long
'''grava uma nota fiscal
''
''Dim lErro As Long
''Dim lTransacao As Long
''Dim alComando(1 To NUM_MAX_LCOMANDO_NFISCAL) As Long
''Dim iIndice As Integer
''
''On Error GoTo Erro_NFiscal_Grava
''
''    lTransacao = Transacao_Abrir()
''    If lTransacao = 0 Then Error 35961
''
''    For iIndice = LBound(alComando) To UBound(alComando)
''        alComando(iIndice) = Comando_Abrir()
''        If alComando(iIndice) = 0 Then Error 35962
''    Next
''
''    'grava a nota fiscal
''    lErro = CF("NFiscal_Grava_Trans",alComando(), objNFiscal)
''    If lErro <> SUCESSO And lErro <> 61403 Then Error 44259
''
''    'Se a Nota já existe grava só a contabilidade
''    If lErro = SUCESSO Then
''
''        'verifica se o cliente possui o crédito para faturar a nota fiscal.
''        'Se tiver atualiza as tabelas de cliente e estatistica de liberacao do usuario
''        lErro = Processa_NFiscal_Credito(objNFiscal)
''        If lErro <> SUCESSO Then Error 44496
''
''        'Grava a Estatística do Cliente
''        lErro = CF("FilialCliente_Grava_Estatistica",objNFiscal)
''        If lErro <> SUCESSO Then Error 52964
''
''        'Grava a Estatística do Produto Vendido
''        lErro = CF("ProdutoVendido_Grava_Estatisticas",objNFiscal)
''        If lErro <> SUCESSO Then Error 52965
''
''    End If
''
''
''    'Grava os dados contábeis (contabilidade)
''    lErro = objContabil.Contabil_Gravar_Registro(objNFiscal.lNumIntDoc, objNFiscal.lCliente, objNFiscal.iFilialCli, NAO_AVALIA_PELO_CUSTO_REAL_PRODUCAO, AVISA_LANCAMENTOS_CONTABILIZADOS, objNFiscal.lNumNotaFiscal)
''    If lErro <> SUCESSO Then Error 36502
''
''    'Confirma Transação
''    lErro = Transacao_Commit()
''    If lErro <> AD_SQL_SUCESSO Then Error 39004
''
''    For iIndice = LBound(alComando) To UBound(alComando)
''        Call Comando_Fechar(alComando(iIndice))
''    Next
''
''    NFiscal_Grava = SUCESSO
''
''    Exit Function
''
''Erro_NFiscal_Grava:
''
''    NFiscal_Grava = Err
''
''    Select Case Err
''
''        Case 35961
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
''
''        Case 35962
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
''
''        Case 36502, 44259, 44496, 52964, 52965
''
''        Case 39004
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT_TRANSACAO", Err)
''
''        Case Else
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149802)
''
''    End Select
''
''    Call Transacao_Rollback
''    For iIndice = LBound(alComando) To UBound(alComando)
''        Call Comando_Fechar(alComando(iIndice))
''    Next
''
''    Exit Function
''
''End Function
''
'mario
''Function NFiscalFatura_Grava(objNFiscal As ClassNFiscal, objContabil As ClassContabil) As Long
'''Grava NFiscal Fatura
''
''Dim lErro As Long
''Dim lTransacao As Long
''Dim alComando(1 To NUM_MAX_LCOMANDO_NFISCALFAT) As Long
''Dim iIndice As Integer
''
''On Error GoTo Erro_NFiscalFatura_Grava
''
''    'Inicia Transação
''    lTransacao = Transacao_Abrir()
''    If lTransacao = 0 Then Error 42413
''
''    'Abre os Comandos
''    For iIndice = LBound(alComando) To UBound(alComando)
''        alComando(iIndice) = Comando_Abrir()
''        If alComando(iIndice) = 0 Then Error 42414
''    Next
''
''    'Grava NFiscal Fatura
''    lErro = CF("NFiscalFatura_Grava_Trans",alComando(), objNFiscal)
''    If lErro <> SUCESSO And lErro <> 61401 Then Error 44289
''
''    'Se for uma alteracao, altera somente a contabilidade
''    If lErro = SUCESSO Then
''
''        'verifica se o cliente possui o crédito para faturar a nota fiscal.
''        'Se tiver atualiza tabela de estatistica de liberacao do usuario
''        lErro = Processa_NFiscal_Credito(objNFiscal)
''        If lErro <> SUCESSO Then Error 44496
''
''        'Grava a Estatística do Cliente
''        lErro = CF("FilialCliente_Grava_Estatistica",objNFiscal)
''        If lErro <> SUCESSO Then Error 52966
''
''        'Grava a Estatística do Produto Vendido
''        lErro = CF("ProdutoVendido_Grava_Estatisticas",objNFiscal)
''        If lErro <> SUCESSO Then Error 52967
''
''    End If
''
''    'Grava os dados contábeis (contabilidade)
''    lErro = objContabil.Contabil_Gravar_Registro(objNFiscal.lNumIntDoc, objNFiscal.lCliente, objNFiscal.iFilialCli, NAO_AVALIA_PELO_CUSTO_REAL_PRODUCAO, AVISA_LANCAMENTOS_CONTABILIZADOS, objNFiscal.lNumNotaFiscal)
''    If lErro <> SUCESSO Then Error 36507
''
''    'Faz o Commit da Transação
''    lErro = Transacao_Commit()
''    If lErro <> AD_SQL_SUCESSO Then Error 42438
''
''    'Fecha os comandos
''    For iIndice = LBound(alComando) To UBound(alComando)
''        Call Comando_Fechar(alComando(iIndice))
''    Next
''
''    NFiscalFatura_Grava = SUCESSO
''
''    Exit Function
''
''Erro_NFiscalFatura_Grava:
''
''    NFiscalFatura_Grava = Err
''
''    Select Case Err
''
''        Case 36507, 44289, 44496, 52966, 52967
''
''        Case 42413
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
''
''        Case 42414
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
''
''        Case 42438
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
''
''        Case Else
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149803)
''
''    End Select
''
''    Call Transacao_Rollback
''
''    For iIndice = LBound(alComando) To UBound(alComando)
''        Call Comando_Fechar(alComando(iIndice))
''    Next
''
''    Exit Function
''
''End Function

'mario
Function NFiscalFatura_Grava_Trans(alComando() As Long, ByVal objNFiscal As ClassNFiscal) As Long
'Grava NFiscal Fatura
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lErro As Long
Dim alComando1(1 To 9) As Long
Dim alComando2(1 To NUM_MAX_LCOMANDO_MOVESTOQUE + 32) As Long
Dim iIndice As Integer

On Error GoTo Erro_NFiscalFatura_Grava_Trans

    'copia alguns alComando para alComando1
    For iIndice = LBound(alComando1) To UBound(alComando1)
        alComando1(iIndice) = alComando(iIndice) ' + UBound(alComando3))
    Next

    'copia alguns alComando para alComando2
    For iIndice = LBound(alComando2) To UBound(alComando2)
        alComando2(iIndice) = alComando(iIndice + UBound(alComando1))
    Next

    'executa o lock dos registros associados a nota fiscal.
    lErro = CF("NFiscal_Lock_Gravacao", alComando1(), objNFiscal)
    If lErro <> SUCESSO Then Error 44294
    
    'Insere uma Nota Fiscal de Saida no Banco de Dados
    lErro = NFiscal_Grava_BD(alComando2(), objNFiscal)
    If lErro <> SUCESSO And lErro <> 61400 Then Error 44290
    
    'Tratar a gravação da contabilidade
    If lErro = 61400 Then Error 61401
    
    NFiscalFatura_Grava_Trans = SUCESSO

    Exit Function
    
Erro_NFiscalFatura_Grava_Trans:

    NFiscalFatura_Grava_Trans = Err
    
    Select Case Err
    
        Case 44290, 44294
        
        Case 61401 'Tratar a gravação da contabilidade na rotina chamadora
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149804)
            
    End Select
    
    Exit Function
    
End Function

'mario
Function Reserva_Utilizar(ByVal lComandoSel As Long, ByVal lComandoDel As Long, ByVal objMovEstoque As ClassMovEstoque, ByVal objItemPV As ClassItemPedido, ByVal objAlmoxarifado As ClassAlmoxarifado, ByVal dQtdeUtilizada As Double) As Long
'Utiliza a reserva. Ou seja serão gerados movimentos de utilização e possivelmente cancelamento do que não foi utilizado. Além disso a reserva é excluida
'TEM QUE SER CHAMADA EM TRANSACAO

Dim lErro As Long
Dim dQtdeReservada As Double

On Error GoTo Erro_Reserva_Utilizar

    'selecionar a reserva
    lErro = Comando_ExecutarPos(lComandoSel, "SELECT Quantidade FROM Reserva WHERE FilialEmpresa = ? AND DocOrigem = ? AND Produto = ? AND Almoxarifado = ? AND NumIntOrigem = ?", 0, dQtdeReservada, objItemPV.iFilialEmpresa, objItemPV.lCodPedido, objItemPV.sProduto, objAlmoxarifado.iCodigo, objItemPV.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then Error 44215

    'obter registro
    lErro = Comando_BuscarProximo(lComandoSel)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 44216

    If lErro = AD_SQL_SEM_DADOS Then Error 44217

    'se a qtde utilizada for maior que a reservada => erro
    If dQtdeUtilizada > dQtdeReservada Then Error 44218

    'se a qtde utilizada for <> zero
    If dQtdeUtilizada <> 0 Then

        'retirar da qtde reservada deste almoxarifado
        objMovEstoque.colItens.Add 0, MOV_EST_UTILIZA_RESERVA, 0, 0, objItemPV.sProduto, objItemPV.sProdutoDescricao, objItemPV.sUMEstoque, dQtdeUtilizada, objAlmoxarifado.iCodigo, objAlmoxarifado.sNomeReduzido, objItemPV.lNumIntDoc, "", 0, "", "", "", "", 0, Nothing, Nothing, DATA_NULA

    End If

    'se a qtde utilizada for menor que a reservada
    If dQtdeUtilizada < dQtdeReservada Then

        'retirar da qtde reservada deste almoxarifado devolvendo para qtde disponivel
        objMovEstoque.colItens.Add 0, MOV_EST_CANCELA_RESERVA, 0, 0, objItemPV.sProduto, objItemPV.sProdutoDescricao, objItemPV.sUMEstoque, dQtdeReservada - dQtdeUtilizada, objAlmoxarifado.iCodigo, objAlmoxarifado.sNomeReduzido, objItemPV.lNumIntDoc, "", 0, "", "", "", "", 0, Nothing, Nothing, DATA_NULA

    End If

    'excluir a reserva
    lErro = Comando_ExecutarPos(lComandoDel, "DELETE FROM Reserva", lComandoSel)
    If lErro <> AD_SQL_SUCESSO Then Error 44219

    Reserva_Utilizar = SUCESSO

    Exit Function

Erro_Reserva_Utilizar:

    Reserva_Utilizar = Err

    Select Case Err

        Case 44215, 44216
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RESERVA", Err, objItemPV.iFilialEmpresa, objItemPV.sProduto, objAlmoxarifado.iCodigo, objItemPV.lCodPedido, objItemPV.iItem)
        
        Case 44217
            lErro = Rotina_Erro(vbOKOnly, "ERRO_RESERVA_NAO_CADASTRADA", Err, objItemPV.iFilialEmpresa, objItemPV.sProduto, objAlmoxarifado.iCodigo, objItemPV.lCodPedido, objItemPV.iItem)
        
        Case 44218
            lErro = Rotina_Erro(vbOKOnly, "ERRO_QUANT_FATURADA_MAIOR_RESERVADA", Err, dQtdeUtilizada, dQtdeReservada, objItemPV.iFilialEmpresa, objItemPV.sProduto, objAlmoxarifado.iCodigo, objItemPV.lCodPedido, objItemPV.iItem)
        
        Case 44219
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_RESERVA", Err, objItemPV.iFilialEmpresa, objItemPV.sProduto, objAlmoxarifado.iCodigo, objItemPV.lCodPedido, objItemPV.iItem)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149805)

    End Select

    Exit Function

End Function

'mario
Function Reserva_Cancelar(ByVal lComandoSel As Long, ByVal lComandoDel As Long, ByVal objMovEstoque As ClassMovEstoque, ByVal objItemPV As ClassItemPedido, ByVal objAlmoxarifado As ClassAlmoxarifado) As Long
'exclui uma reserva da tabela de reservas e gera movto
'TEM QUE SER CHAMADA EM TRANSACAO

Dim lErro As Long
Dim dQtdeReservada As Double

On Error GoTo Erro_Reserva_Cancelar

    'selecionar a reserva
    lErro = Comando_ExecutarPos(lComandoSel, "SELECT Quantidade FROM Reserva WHERE FilialEmpresa = ? AND DocOrigem = ? AND Produto = ? AND Almoxarifado = ? AND NumIntOrigem = ?", 0, dQtdeReservada, objItemPV.iFilialEmpresa, objItemPV.lCodPedido, objItemPV.sProduto, objAlmoxarifado.iCodigo, objItemPV.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then Error 44222

    'obter registro
    lErro = Comando_BuscarProximo(lComandoSel)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 44223

    If lErro = AD_SQL_SEM_DADOS Then Error 44224

    'retirar da qtde reservada deste almoxarifado devolvendo para qtde disponivel
    objMovEstoque.colItens.Add 0, MOV_EST_CANCELA_RESERVA, 0, 0, objItemPV.sProduto, objItemPV.sProdutoDescricao, objItemPV.sUMEstoque, dQtdeReservada, objAlmoxarifado.iCodigo, objAlmoxarifado.sNomeReduzido, objItemPV.lNumIntDoc, "", 0, "", "", "", "", 0, Nothing, Nothing, DATA_NULA

    'excluir a reserva
    lErro = Comando_ExecutarPos(lComandoDel, "DELETE FROM Reserva", lComandoSel)
    If lErro <> AD_SQL_SUCESSO Then Error 44225

    Reserva_Cancelar = SUCESSO

    Exit Function

Erro_Reserva_Cancelar:

    Reserva_Cancelar = Err

    Select Case Err

        Case 44222, 44223
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RESERVA", Err, objItemPV.iFilialEmpresa, objItemPV.lCodPedido, objItemPV.sProduto, objAlmoxarifado.iCodigo, objItemPV.iItem)
        
        Case 44224
            lErro = Rotina_Erro(vbOKOnly, "ERRO_RESERVA_NAO_CADASTRADA", Err, objItemPV.iFilialEmpresa, objItemPV.lCodPedido, objItemPV.sProduto, objAlmoxarifado.iCodigo, objItemPV.iItem)
        
        Case 44225
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_RESERVA", Err, objItemPV.iFilialEmpresa, objItemPV.lCodPedido, objItemPV.sProduto, objAlmoxarifado.iCodigo, objItemPV.iItem)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149806)

    End Select

    Exit Function

End Function

Function MovEstoque_Gera(alComando() As Long, alComando1() As Long, ByVal objNFiscal As ClassNFiscal) As Long
'gera os movimentos de estoque da NFiscal, se necessários

Dim lErro As Long, iIndice As Integer
Dim iTipoMovtoEstoque As Integer
Dim objMovEstoque As ClassMovEstoque
Dim lCodigo As Long, dFator As Double
Dim objItemNF As ClassItemNF, dSomaAlocacao As Double
Dim objItemNFAloc As ClassItemNFAlocacao
Dim sDocOrigem As String, objTipoDocInfo As New ClassTipoDocInfo
Dim objItemMovEstoque As ClassItemMovEstoque
Dim objRastroItemNF As ClassRastroItemNF
Dim objRastroMovto As ClassRastreamentoMovto
Dim colInsumos As Collection
Dim colRastroMovto As Collection
Dim objItemRomaneio As ClassItemRomaneioGrade
Dim objProduto As New ClassProduto
Dim objReservaItem As ClassReservaItem
Dim iTipoMov As Integer, bMovEst As Boolean

On Error GoTo Erro_MovEstoque_Gera

    objTipoDocInfo.iCodigo = objNFiscal.iTipoNFiscal
    lErro = CF("TipoDocInfo_Le_Codigo", objTipoDocInfo)
    If lErro <> SUCESSO Then gError 59261
    
    iTipoMovtoEstoque = objTipoDocInfo.iTipoMovtoEstoque
    sDocOrigem = objTipoDocInfo.sSigla

    If iTipoMovtoEstoque > 0 Then

        Set objMovEstoque = New ClassMovEstoque

        'Obtém o Código do Movimento
        lErro = CF("MovEstoque_Automatico_EmTransacao1", alComando(2), alComando(3), alComando(4), objNFiscal.iFilialEmpresa, lCodigo)
        If lErro <> SUCESSO Then gError 39001

        objMovEstoque.dtData = objNFiscal.dtDataSaida
        objMovEstoque.dtHora = objNFiscal.dtHoraSaida
        objMovEstoque.iFilialEmpresa = objNFiscal.iFilialEmpresa
        objMovEstoque.iTipoMov = iTipoMovtoEstoque
        objMovEstoque.lCodigo = lCodigo
        objMovEstoque.lCliente = objNFiscal.lCliente
        objMovEstoque.lFornecedor = objNFiscal.lFornecedor
        objMovEstoque.sDocOrigem = sDocOrigem & " " & objNFiscal.sSerie & " " & CStr(objNFiscal.lNumNotaFiscal)

        iIndice = 0
        
        'Adiciona itens ao Movimento
        For Each objItemNF In objNFiscal.colItensNF
            
            lErro = CF("MovEstoque_ItemNF_Customizado", objItemNF, objNFiscal)
            If lErro <> SUCESSO Then gError 197727
            
            If Not objItemNF Is Nothing Then
            
                iIndice = iIndice + 1
                
                If objItemNF.colItensRomaneioGrade.Count = 0 Then
                
                    lErro = CF("NF_Testa_Item_Mov_Est", objNFiscal, objItemNF, bMovEst, iTipoMov)
                    If lErro <> SUCESSO Then gError 197727
                
                    If objItemNF.iControleEstoque <> PRODUTO_CONTROLE_SEM_ESTOQUE And bMovEst Then
                        
                        If objItemNF.colAlocacoes.Count = 0 And objItemNF.dQuantidade > 0 Then gError 42367
        
                        dSomaAlocacao = 0
                                                                        
                        For Each objItemNFAloc In objItemNF.colAlocacoes
                                                
                            dSomaAlocacao = dSomaAlocacao + Arredonda_Estoque(objItemNFAloc.dQuantidade)
    
                            Set colInsumos = New Collection
                            Set colRastroMovto = New Collection
                                                
                            Set objItemMovEstoque = objMovEstoque.colItens.Add(0, 0, objItemNF.dValorTotal, APROPR_CUSTO_INFORMADO, objItemNF.sProduto, objItemNF.sDescricaoItem, objItemNFAloc.sUnidadeMed, objItemNFAloc.dQuantidade, objItemNFAloc.iAlmoxarifado, objItemNFAloc.sAlmoxarifado, objItemNF.lNumIntDoc, "", 0, "", "", "", "", 0, colRastroMovto, colInsumos, DATA_NULA)
                            
                            If Not objNFiscal.objRastreamento Is Nothing Then
                            
                                'Guarda o Rastreamento dos ItensNF
                                lErro = objNFiscal.objRastreamento.Move_RastroItemNF_ItemMovEstoque(objItemMovEstoque, objItemNF.colRastreamento, objTipoDocInfo)
                                If lErro <> SUCESSO Then gError 89461
                            
                            End If
                            
                            If iTipoMov <> 0 Then objItemMovEstoque.iTipoMov = iTipoMov
        
                            objItemMovEstoque.iTipoNumIntDocOrigem = MOVEST_TIPONUMINTDOCORIGEM_ITEMNFISCAL
                            
                            objItemMovEstoque.iClasseUM = objItemNF.iClasseUM
                            objItemMovEstoque.iControleEstoque = objItemNF.iControleEstoque
                            objItemMovEstoque.sSiglaUMEst = objItemNF.sUMEstoque
                            objItemMovEstoque.iApropriacaoProd = objItemNF.iApropriacaoProd
                            
                        Next
                        
                        objProduto.sCodigo = objItemNF.sProduto

                        'Lê na tabela de Produto a UM de estoque
                        lErro = CF("Produto_Le", objProduto)
                        If lErro <> SUCESSO And lErro <> 28030 Then gError 86366

                        'Se não encontrar o produto ==> Erro
                        If lErro = 28030 Then gError 86367

                        If objProduto.iKitVendaComp <> MARCADO Then
                            
                            lErro = CF("UM_Conversao", objItemNF.iClasseUM, objItemNF.sUnidadeMed, objItemNF.sUMEstoque, dFator)
                            If lErro <> SUCESSO Then gError 41525
                            
                            If Abs(Arredonda_Estoque(dSomaAlocacao) - Arredonda_Estoque(dFator * objItemNF.dQuantidade)) > QTDE_ESTOQUE_DELTA2 Then gError 42368
                        
                        End If
                        

'''                        lErro = CF("UM_Conversao", objItemNF.iClasseUM, objItemNF.sUMEstoque, objItemNF.sUnidadeMed, dFator)
'''                        If lErro <> SUCESSO Then gError 41525
'''
'''                        '############################################
'''                        'Alterado por Wagner 17/11/04
'''
'''                        'dSomaAlocacao = dSomaAlocacao * dFator
'''
'''                        dSomaAlocacao = Arredonda_Estoque(dSomaAlocacao * dFator)
'''                        '############################################
'''
'''                        objProduto.sCodigo = objItemNF.sProduto
'''
'''                        'Lê na tabela de Produto a UM de estoque
'''                        lErro = CF("Produto_Le", objProduto)
'''                        If lErro <> SUCESSO And lErro <> 28030 Then gError 86366
'''
'''                        'Se não encontrar o produto ==> Erro
'''                        If lErro = 28030 Then gError 86367
'''
'''                        If objProduto.iKitVendaComp <> MARCADO Then
'''                            If Abs(dSomaAlocacao - objItemNF.dQuantidade) > QTDE_ESTOQUE_DELTA2 Then gError 42368
'''                        End If
                    
                    End If
                Else
                    For Each objItemRomaneio In objItemNF.colItensRomaneioGrade
                        
                        objProduto.sCodigo = objItemRomaneio.sProduto
                        
                        lErro = CF("Produto_Le", objProduto)
                        If lErro <> SUCESSO And lErro <> 23080 Then gError 86366
                        If lErro <> SUCESSO Then gError 86367
                        
                        If objProduto.iControleEstoque <> PRODUTO_CONTROLE_SEM_ESTOQUE Then
                        
                            If objItemRomaneio.colLocalizacao.Count = 0 Then gError 42367
                            
                            dSomaAlocacao = 0
                            
                            For Each objReservaItem In objItemRomaneio.colLocalizacao
                                
                                dSomaAlocacao = dSomaAlocacao + objReservaItem.dQuantidade
                                
                                Set objItemMovEstoque = objMovEstoque.colItens.Add(0, 0, objItemNF.dValorTotal, APROPR_CUSTO_INFORMADO, objItemRomaneio.sProduto, objItemRomaneio.sDescricao, objProduto.sSiglaUMEstoque, objReservaItem.dQuantidade, objReservaItem.iAlmoxarifado, objReservaItem.sAlmoxarifado, objItemRomaneio.lNumIntDoc, "", 0, "", "", "", "", 0, colRastroMovto, colInsumos, DATA_NULA)
                                
                                '###############################################################
                                'Inserido por Wagner
                                'Guarda o Rastreamento dos ItensNF
                                If Not (objNFiscal.objRastreamento Is Nothing) Then
                                
                                    If objItemMovEstoque.colRastreamentoMovto Is Nothing Then
                                        Set objItemMovEstoque.colRastreamentoMovto = New Collection
                                    End If
                                    
                                    Set colInsumos = New Collection
                                    Set colRastroMovto = New Collection
                                
                                    lErro = objNFiscal.objRastreamento.Move_RastroItemNF_ItemMovEstoque(objItemMovEstoque, objItemNF.colRastreamento, objTipoDocInfo)
                                    If lErro <> SUCESSO Then gError 180064
                                End If
                                '###############################################################
                                
                                objItemMovEstoque.iTipoNumIntDocOrigem = MOVEST_TIPONUMINTDOCORIGEM_ITEMNFISCALGRADE
                                
                                objItemMovEstoque.iClasseUM = objProduto.iClasseUM
                                objItemMovEstoque.iControleEstoque = objProduto.iControleEstoque
                                objItemMovEstoque.sSiglaUMEst = objProduto.sSiglaUMEstoque
                                objItemMovEstoque.iApropriacaoProd = objProduto.iApropriacaoCusto
                                
                            Next
                            
                        End If
                    Next
                
                End If
            
            End If
        Next

        'Grava os Movimentos de Estoque relacionados a Nota Fiscal
        lErro = CF("MovEstoque_Grava1", alComando1(), objMovEstoque)
        If lErro <> SUCESSO Then gError 39002
        
    End If

    MovEstoque_Gera = SUCESSO

    Exit Function

Erro_MovEstoque_Gera:

    MovEstoque_Gera = gErr

    Select Case gErr

        Case 35135, 35756
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPODOCINFO1", gErr, objNFiscal.iTipoNFiscal)

        Case 39000
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TIPO_NFISCAL_NAO_CADASTRADO", gErr, objNFiscal.iTipoNFiscal)

        Case 39001, 39002, 41525, 59261, 86366, 89461, 180064, 197727

        Case 42367
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCALIZACAO_ITEM_INEXISTENTE", gErr, iIndice)

        Case 42368
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCALIZACAO_ITEM_INCOMPLETA", gErr, iIndice, objItemNF.dQuantidade, dSomaAlocacao)

        Case 86367
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_NAO_CADASTRADO", gErr, objProduto.sCodigo)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149807)

    End Select

    Exit Function

End Function

Private Function ReservasPV_Libera_AbreComandos(alComando1() As Long, alComando2() As Long, alComando3() As Long, alComando4() As Long) As Long
'Abre comandos para MovEstoque_GeraUsandoReserva

Dim iIndice As Integer
Dim lErro As Long

On Error GoTo Erro_ReservasPV_Libera_AbreComandos
    
    'Abre comandos
    For iIndice = LBound(alComando1) To UBound(alComando1)
        alComando1(iIndice) = Comando_Abrir()
        If alComando1(iIndice) = 0 Then Error 25748
    Next
    
    For iIndice = LBound(alComando2) To UBound(alComando2)
        alComando2(iIndice) = Comando_Abrir()
        If alComando2(iIndice) = 0 Then Error 25749
    Next

    For iIndice = LBound(alComando3) To UBound(alComando3)
        alComando3(iIndice) = Comando_Abrir()
        If alComando3(iIndice) = 0 Then Error 25750
    Next
    
    For iIndice = LBound(alComando4) To UBound(alComando4)
        alComando4(iIndice) = Comando_Abrir()
        If alComando4(iIndice) = 0 Then Error 25750
    Next
    
    ReservasPV_Libera_AbreComandos = SUCESSO

    Exit Function

Erro_ReservasPV_Libera_AbreComandos:

    ReservasPV_Libera_AbreComandos = Err

    Select Case Err

        Case 25748, 25749, 25750
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149808)

    End Select

    For iIndice = LBound(alComando1) To UBound(alComando1)
        Call Comando_Fechar(alComando1(iIndice))
    Next
    
    For iIndice = LBound(alComando2) To UBound(alComando2)
        Call Comando_Fechar(alComando2(iIndice))
    Next

    For iIndice = LBound(alComando3) To UBound(alComando3)
        Call Comando_Fechar(alComando3(iIndice))
    Next
    
    For iIndice = LBound(alComando4) To UBound(alComando4)
        Call Comando_Fechar(alComando4(iIndice))
    Next
    
    Exit Function

End Function

Private Function ReservasPV_Libera_FechaComandos(alComando1() As Long, alComando2() As Long, alComando3() As Long, alComando4() As Long) As Long
'Fecha comandos para MovEstoque_GeraUsandoReserva

Dim iIndice As Integer
Dim lErro As Long

On Error GoTo Erro_ReservasPV_Libera_FechaComandos
    
    'Fecha comandos
    For iIndice = LBound(alComando1) To UBound(alComando1)
        Call Comando_Fechar(alComando1(iIndice))
    Next
    
    For iIndice = LBound(alComando2) To UBound(alComando2)
        Call Comando_Fechar(alComando2(iIndice))
    Next

    For iIndice = LBound(alComando3) To UBound(alComando3)
        Call Comando_Fechar(alComando3(iIndice))
    Next
    
    For iIndice = LBound(alComando4) To UBound(alComando4)
        Call Comando_Fechar(alComando4(iIndice))
    Next
    
    ReservasPV_Libera_FechaComandos = SUCESSO

    Exit Function

Erro_ReservasPV_Libera_FechaComandos:

    ReservasPV_Libera_FechaComandos = Err

    Select Case Err

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149809)

    End Select
    
    Exit Function

End Function

Private Function ReservasPV_Libera_QuantFaturadaNF(ByVal objNFiscal As ClassNFiscal) As Long
'Usa reservas do Pedido de Venda para criar movimentos
'de estoque correspondentes as alocações dos itens da nota fiscal
'Se no almoxarifado da alocação a reserva não atender, tenta liberar
'reservas de outros almoxarifados até chegar a quantidade alocada

Dim alComando1(1 To 2) As Long, alComando2(1 To 2) As Long
Dim alComando3(1 To 2) As Long, alComando4(1 To 2) As Long
Dim iIndice As Integer
Dim lErro As Long
Dim objItemNF As ClassItemNF
Dim objItemNFAloc As ClassItemNFAlocacao
Dim dQuantLiberar As Double
Dim dQuantLiberada As Double
Dim objItemPV As New ClassItemPedido
Dim objMovEstoque As New ClassMovEstoque
Dim objProduto As New ClassProduto
Dim lCodigo As Long
Dim iTotItens As Integer
Dim objItemNFAux As New ClassItemNF
Dim objReservaItem As ClassReservaItem

On Error GoTo Erro_ReservasPV_Libera_QuantFaturadaNF
    
    'Abre comandos
    lErro = ReservasPV_Libera_AbreComandos(alComando1(), alComando2(), alComando3(), alComando4())
    If lErro <> SUCESSO Then gError 25752
    
    'Gera um novo Código para o Movimento de Estoque
    lErro = CF("MovEstoque_Automatico_EmTransacao", objNFiscal.iFilialEmpresa, lCodigo)
    If lErro <> SUCESSO Then gError 25776

    'Preenche o objMovEstoque
    objMovEstoque.lCodigo = lCodigo
    objMovEstoque.dtData = objNFiscal.dtDataEmissao
    objMovEstoque.iFilialEmpresa = objNFiscal.iFilialEmpresa
    objMovEstoque.iTipoMov = MOV_EST_UTILIZA_RESERVA
    
    For Each objItemNF In objNFiscal.colItensNF
    
        lErro = CF("MovEstoque_ItemNF_Customizado", objItemNF, objNFiscal)
        If lErro <> SUCESSO Then gError 197728
        
        If Not objItemNF Is Nothing Then
        
            iTotItens = objItemNF.colItensRomaneioGrade.Count
            
            For iIndice = 0 To iTotItens
            
                If iTotItens = 0 Then
                    objProduto.sCodigo = objItemNF.sProduto
                Else
                    If iIndice = 0 Then iIndice = iIndice + 1
                    objProduto.sCodigo = objItemNF.colItensRomaneioGrade(iIndice).sProduto
                End If
                
                lErro = CF("Produto_Le", objProduto)
                If lErro <> SUCESSO And lErro <> 23080 Then gError 62096
                If lErro <> SUCESSO Then gError 62097
                    
                If objItemNF.colItensRomaneioGrade.Count = 0 Then
                    
                    objItemNF.iClasseUM = objProduto.iClasseUM
                    objItemNF.iControleEstoque = objProduto.iControleEstoque
                    objItemNF.sUMEstoque = objProduto.sSiglaUMEstoque
                    objItemNF.sUMVenda = objProduto.sSiglaUMVenda
            
                    If objProduto.iControleEstoque = PRODUTO_CONTROLE_RESERVA Then
                                        
                        'Inicializa quantidade liberada de reservas de ItemPV
                        dQuantLiberada = 0
                    
                        For Each objItemNFAloc In objItemNF.colAlocacoes
                            
                            'Inicializa quantidade a liberar de reservas p/ essa alocação
                            dQuantLiberar = objItemNFAloc.dQuantidade
                                            
                            'Gera movimento que disponibiliza reserva do Almoxarifado de alocação
                            lErro = ItemNFAloc_MovEst_Gera(alComando1(), objItemNF, objItemNFAloc, dQuantLiberar, objMovEstoque)
                            If lErro <> SUCESSO Then gError 25751
                            
                            'Se reserva do almox de alocação não atendeu
                            If dQuantLiberar > 0 Then
            
                                'Disponibiliza reservas de outros almoxarifados até completar a quantidade alocada nesse almoxarifado
                                lErro = ItemNFAloc_MovEst_Gera2(alComando2(), objItemNF, objItemNFAloc, dQuantLiberar, objMovEstoque)
                                If lErro <> SUCESSO Then gError 25754
            
                            End If
                            
                            'Adiciona o que foi liberado de reservas em dQuantLiberada
                            dQuantLiberada = dQuantLiberada + objItemNFAloc.dQuantidade - dQuantLiberar
                            
                        Next
                    End If
                Else
                    If objProduto.iControleEstoque = PRODUTO_CONTROLE_RESERVA Then
                        dQuantLiberada = 0
                        For Each objReservaItem In objItemNF.colItensRomaneioGrade(iIndice).colLocalizacao
                            dQuantLiberar = objReservaItem.dQuantidade
                            
                            lErro = ItemNFGradeAloc_MovEst_Gera(alComando1(), objItemNF.colItensRomaneioGrade(iIndice), objReservaItem, dQuantLiberar, objMovEstoque)
                            If lErro <> SUCESSO Then gError 25751
                            
                            If dQuantLiberar > 0 Then
                                lErro = ItemNFGradeAloc_MovEst_Gera2(alComando2(), objItemNF.colItensRomaneioGrade(iIndice), objReservaItem, dQuantLiberar, objMovEstoque)
                                If lErro <> SUCESSO Then gError 25754
                            End If
                            
                            dQuantLiberada = dQuantLiberada + objReservaItem.dQuantidade - dQuantLiberar
                        Next
                    
                    End If
                End If
                
                'Se houve liberação de reserva para o ítemPV
                If dQuantLiberada > 0 And objProduto.iControleEstoque = PRODUTO_CONTROLE_RESERVA Then
    
                    'Atualiza quantidade reservada de ItemPV
                    objItemPV.lNumIntDoc = objItemNF.lNumIntItemPedVenda
                    lErro = ItemPV_Atualiza_QuantReservada(alComando3(), objItemPV, dQuantLiberada)
                    If lErro <> SUCESSO Then gError 25755
                    
                    If iIndice > 0 Then
                        lErro = ItemPVGrade_Atualiza_QuantReservada(alComando4(), objItemNF.colItensRomaneioGrade(iIndice), objItemNF.sUnidadeMed, objProduto, dQuantLiberada, objItemNF)
                        If lErro <> SUCESSO Then gError 25755
                    End If
                End If
                
            
            Next
        
        End If
    Next

    'Grava movimentos de estoque
    lErro = CF("MovEstoque_Grava", objMovEstoque)
    If lErro <> SUCESSO Then gError 25764
    
    'Fecha comandos
    Call ReservasPV_Libera_FechaComandos(alComando1(), alComando2(), alComando3(), alComando4())
    
    ReservasPV_Libera_QuantFaturadaNF = SUCESSO

    Exit Function

Erro_ReservasPV_Libera_QuantFaturadaNF:

    ReservasPV_Libera_QuantFaturadaNF = gErr

    Select Case gErr

        Case 25751, 25752, 25754, 25755, 25764, 25776, 62096, 197728

        Case 62097
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149810)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149811)

    End Select

    'Fecha comandos
    Call ReservasPV_Libera_FechaComandos(alComando1(), alComando2(), alComando3(), alComando4())

    Exit Function

End Function
  
Private Function ItemPV_Atualiza_QuantReservada(alComando() As Long, ByVal objItemPV As ClassItemPedido, ByVal dQuantLiberada As Double) As Long
'Atualiza QuantReservada o ItemPV cujo NumInt foi passado

Dim lErro As Long
Dim lComando As Long
Dim tItemPV As typeItemPedido
Dim objProduto As New ClassProduto
Dim dQuantLiberadaUMItemPV As Double
Dim dFator As Double

On Error GoTo Erro_ItemPV_Atualiza_QuantReservada
    
    tItemPV.sProduto = String(STRING_PRODUTO, 0)
    tItemPV.sUnidadeMed = String(STRING_UM_SIGLA, 0)
    
    'Lê UM e ClasseUM de itemPV
    lErro = Comando_ExecutarPos(alComando(1), "SELECT ClasseUM, UnidadeMed, QuantReservada, Produto FROM ItensPedidoDeVenda WHERE NumIntDoc = ?", 0, tItemPV.iClasseUM, tItemPV.sUnidadeMed, tItemPV.dQuantReservada, tItemPV.sProduto, objItemPV.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then Error 25766

    'Tenta ler registro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SEM_DADOS And lErro <> AD_SQL_SUCESSO Then Error 25767
    If lErro = AD_SQL_SEM_DADOS Then Error 25768 'Não encontrou

    'Faz lock do item
    lErro = Comando_LockExclusive(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then Error 25769
    
    objProduto.sCodigo = tItemPV.sProduto
       
    'Lê na tabela de Produto a UM de estoque
    lErro = CF("Produto_Le", objProduto)
    If lErro <> SUCESSO And lErro <> 28030 Then Error 25770
    
    'Se não encontrar o produto ==> Erro
    If lErro = 28030 Then Error 25771
    
    'Obtém fator de conversão para unidade de medida de ItemPV
    lErro = CF("UM_Conversao", tItemPV.iClasseUM, objProduto.sSiglaUMEstoque, tItemPV.sUnidadeMed, dFator)
    If lErro <> SUCESSO Then Error 25772

    'Quantidade liberada em UM de ItemPV
    dQuantLiberadaUMItemPV = (dQuantLiberada * dFator)

    If objProduto.iKitVendaComp <> MARCADO Then

        'Se a quantidade liberada em reservas do ítem for maior que a reservada ==> erro
        If dQuantLiberadaUMItemPV - tItemPV.dQuantReservada > QTDE_ESTOQUE_DELTA Then Error 25773
    
        'Atualiza quant reservada de ItemPV
        lErro = Comando_ExecutarPos(alComando(2), "UPDATE ItensPedidoDeVenda SET QuantReservada = QuantReservada - ? ", alComando(1), dQuantLiberadaUMItemPV)
        If lErro <> AD_SQL_SUCESSO Then Error 25774
    
    End If
    
    ItemPV_Atualiza_QuantReservada = SUCESSO

    Exit Function

Erro_ItemPV_Atualiza_QuantReservada:

    ItemPV_Atualiza_QuantReservada = Err

    Select Case Err

        Case 25766, 25767
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITEMPV", Err, objItemPV.lNumIntDoc)

        Case 25768
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ITEMPV_NAO_CADASTRADO", Err, objItemPV.lNumIntDoc)

        Case 25769
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_ITEMPEDIDODEVENDA", Err, objItemPV.lNumIntDoc)

        Case 25770, 25772 'tratado na rotina chamada

        Case 25771
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_INEXISTENTE", Err, objProduto.sCodigo)
        
        Case 25773
            lErro = Rotina_Erro(vbOKOnly, "ERRO_QUANT_LIBERADA_MAIOR_QUANT_RESERVADA", Err, objItemPV.lNumIntDoc)
        
        Case 25774
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_ITEMPV", Err, objItemPV.lNumIntDoc)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149812)


    End Select

    Exit Function

End Function


Private Function ItemNFAloc_MovEst_Gera(alComando() As Long, ByVal objItemNF As ClassItemNF, ByVal objItemNFAloc As ClassItemNFAlocacao, dQuantLiberar As Double, ByVal objMovEstoque As ClassMovEstoque) As Long
'Disponibiliza reserva do Almoxarifado de alocação

Dim lErro As Long
Dim dQuantidade As Double

On Error GoTo Erro_ItemNFAloc_MovEst_Gera
      
    'Busca uma reserva para o Almoxarifado da alocação
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Quantidade FROM Reserva WHERE TipoDoc = ? AND NumIntOrigem = ? AND Produto =? AND Almoxarifado =?", 0, dQuantidade, TIPO_PEDIDO_COD, objItemNF.lNumIntItemPedVenda, objItemNF.sProduto, objItemNFAloc.iAlmoxarifado)
    If lErro <> AD_SQL_SUCESSO Then Error 25753

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 25754
    
    'Se reserva foi encontrada
    If lErro = AD_SQL_SUCESSO Then
        
        'Faz o lock na reserva
        lErro = Comando_LockExclusive(alComando(1))
        If lErro <> AD_SQL_SUCESSO Then Error 25755

        'Se a quantidade reservada for menor ou igual a quantidade a liberar
        If dQuantLiberar >= dQuantidade Then
            
            'Exclui a reserva
            lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM Reserva", alComando(1))
            If lErro <> AD_SQL_SUCESSO Then Error 25756
            
            'Gera um item de movto de estoque de utilização de reserva
            objMovEstoque.colItens.Add 0, 0, 0, 0, objItemNF.sProduto, objItemNF.sDescricaoItem, objItemNF.sUMEstoque, dQuantidade, objItemNFAloc.iAlmoxarifado, "", objItemNF.lNumIntDoc, "", 0, "", "", "", "", 0, Nothing, Nothing, DATA_NULA
        
            dQuantLiberar = dQuantLiberar - dQuantidade
        
        Else
            'Atualiza a quantidade reservada em Reserva
            lErro = Comando_ExecutarPos(alComando(2), "UPDATE Reserva SET Quantidade = Quantidade - ? ", alComando(1), dQuantLiberar)
            If lErro <> AD_SQL_SUCESSO Then Error 25757
            
            'Adiciona um movto de estoque do tipo utilização de reserva
            objMovEstoque.colItens.Add 0, 0, 0, 0, objItemNF.sProduto, objItemNF.sDescricaoItem, objItemNF.sUMEstoque, dQuantLiberar, objItemNFAloc.iAlmoxarifado, "", objItemNF.lNumIntDoc, "", 0, "", "", "", "", 0, Nothing, Nothing, DATA_NULA
        
            dQuantLiberar = 0
        
        End If

    End If

    ItemNFAloc_MovEst_Gera = SUCESSO

    Exit Function

Erro_ItemNFAloc_MovEst_Gera:

    ItemNFAloc_MovEst_Gera = Err

    Select Case Err

        Case 25753, 25754
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RESERVA1", Err)
        
        Case 25755
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_RESERVA", Err)

        Case 25756
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_RESERVA1", Err)

        Case 25757
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_RESERVA1", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149813)

    End Select

    Exit Function

End Function

Private Function ItemNFAloc_MovEst_Gera2(alComando() As Long, ByVal objItemNF As ClassItemNF, ByVal objItemNFAloc As ClassItemNFAlocacao, dQuantLiberar As Double, ByVal objMovEstoque As ClassMovEstoque) As Long
'Disponibiliza reservas do ItemNF(ItemPV correspondente) de almoxarifados distintos do almoxarifado de alocação
'A quantidade disponibilizada é dada por dQuantLiberar

Dim lErro As Long
Dim dQuantidade As Double
Dim iAlmoxarifado As Integer

On Error GoTo Erro_ItemNFAloc_MovEst_Gera2

    If dQuantLiberar > 0 Then
        
        'Busca reserva em Almoxarifados diferentes do de alocação
        lErro = Comando_ExecutarPos(alComando(1), "SELECT Quantidade, Almoxarifado FROM Reserva WHERE TipoDoc = ? AND NumIntOrigem = ? AND Produto =? AND Almoxarifado <> ?", 0, dQuantidade, iAlmoxarifado, TIPO_PEDIDO_COD, objItemNF.lNumIntItemPedVenda, objItemNF.sProduto, objItemNFAloc.iAlmoxarifado)
        If lErro <> AD_SQL_SUCESSO Then Error 25758

        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 25759
        
        'Enquanto encontrar reserva ou ainda tiver o quantidade a liberar
        Do While lErro <> AD_SQL_SEM_DADOS And dQuantLiberar > 0
            
            'faz lock na reserva
            lErro = Comando_LockExclusive(alComando(1))
            If lErro <> AD_SQL_SUCESSO Then Error 25760
            
            'Se a qtd reservada for menor ou igual a qtd a liberar
            If dQuantLiberar >= dQuantidade Then
                
                'Apaga a reserva
                lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM Reserva", alComando(1))
                If lErro <> AD_SQL_SUCESSO Then Error 25761
                
                'Gera um movto de cancelamento de reserva
                objMovEstoque.colItens.Add 0, 0, 0, 0, objItemNF.sProduto, objItemNF.sDescricaoItem, objItemNF.sUMEstoque, dQuantidade, iAlmoxarifado, "", objItemNF.lNumIntDoc, "", 0, "", "", "", "", 0, Nothing, Nothing, DATA_NULA
                dQuantLiberar = dQuantLiberar - dQuantidade
            
            Else
                'Atualiza a reserva subtraindo a QuantLiberar
                lErro = Comando_ExecutarPos(alComando(2), "UPDATE Reserva SET Quantidade = Quantidade - ? ", alComando(1), dQuantLiberar)
                If lErro <> AD_SQL_SUCESSO Then Error 25762
                
                'Gera um movto de cancelamento de reserva
                objMovEstoque.colItens.Add 0, 0, 0, 0, objItemNF.sProduto, objItemNF.sDescricaoItem, objItemNF.sUMEstoque, dQuantLiberar, iAlmoxarifado, "", objItemNF.lNumIntDoc, "", 0, "", "", "", "", 0, Nothing, Nothing, DATA_NULA
                dQuantLiberar = 0
                Exit Do
            
            End If
                    
            'Busca a próxima reserva
            lErro = Comando_BuscarProximo(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 25763
        
        Loop
    
    End If

    ItemNFAloc_MovEst_Gera2 = SUCESSO

    Exit Function

Erro_ItemNFAloc_MovEst_Gera2:

    ItemNFAloc_MovEst_Gera2 = Err

    Select Case Err

        Case 25758, 25759, 25763
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RESERVA1", Err)
        
        Case 25760
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_RESERVA", Err)

        Case 25761
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_RESERVA1", Err)

        Case 25762
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_RESERVA1", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149814)

    End Select

    Exit Function

End Function


'Function BloqueiosPV_Exclui_Credito(ByVal objPedidoVenda As ClassPedidoDeVenda) As Long
''Exclui os Bloqueios de Creditos não liberados ligados ao Pedido de Venda passado
''Chamada EM TRANSAÇÃO
'
'Dim lErro As Long
'Dim lComando As Long
'Dim lComando1 As Long
'Dim iTipoDeBloqueio As Integer
'
'On Error GoTo Erro_BloqueiosPV_Exclui_Credito
'
'    'Abre os comandos
'    lComando = Comando_Abrir()
'    If lComando = 0 Then Error 46023
'
'    lComando1 = Comando_Abrir()
'    If lComando1 = 0 Then Error 46024
'
'    'Busca os Bloqueios de Crédito ligados ao Pedido
'    lErro = Comando_ExecutarPos(lComando, "SELECT TipoDeBloqueio FROM BloqueiosPV WHERE FilialEmpresa = ? AND PedidoDeVenda = ? AND TipoDeBloqueio = ? AND DataLib = ?", 0, iTipoDeBloqueio, objPedidoVenda.iFilialEmpresa, objPedidoVenda.lCodigo, BLOQUEIO_CREDITO, DATA_NULA)
'    If lErro <> AD_SQL_SUCESSO Then Error 46025
'
'    lErro = Comando_BuscarPrimeiro(lComando)
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 46026
'
'    'Para cada Bloqueio encontrado
'    Do While lErro <> AD_SQL_SEM_DADOS
'
'        'Exclui o bloqueio da tabela de Bloqueios de Pedido de Venda
'        lErro = Comando_ExecutarPos(lComando1, "DELETE FROM BloqueiosPV", lComando)
'        If lErro <> AD_SQL_SUCESSO Then Error 46027
'
'        'Busca o próximo
'        lErro = Comando_BuscarProximo(lComando)
'        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 46028
'
'    Loop
'
'    'Fecha os comandos
'    Call Comando_Fechar(lComando)
'    Call Comando_Fechar(lComando1)
'
'    BloqueiosPV_Exclui_Credito = SUCESSO
'
'    Exit Function
'
'Erro_BloqueiosPV_Exclui_Credito:
'
'    BloqueiosPV_Exclui_Credito = Err
'
'    Select Case Err
'
'        Case 46023, 46024
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
'
'        Case 46025, 46026, 46028
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BLOQUEIOSPV", Err, objPedidoVenda.lCodigo)
'
'        Case 46027
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_BLOQUEIOSPV", Err, objPedidoVenda.lCodigo)
'
'        Case Else
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149815)
'
'    End Select
'
'    Call Comando_Fechar(lComando)
'    Call Comando_Fechar(lComando1)
'
'    Exit Function
'
'End Function

Function BloqueiosPV_Grava1(ByVal objPedidoVenda As ClassPedidoDeVenda, ByVal objBloqueioPV As ClassBloqueioPV) As Long
'Insere no BD os Bloqueios do Pedido de Venda

Dim lComando As Long
Dim lErro As Long
Dim iSequencial As Integer

On Error GoTo Erro_BloqueiosPV_Grava1

    'Abre o Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 44392

    'Gera o sequencial automático para o Bloqueio
    lErro = CF("BloqueioPV_Automatico", objPedidoVenda.lCodigo, objPedidoVenda.iFilialEmpresa, iSequencial)
    If lErro <> SUCESSO Then Error 44393

    'Insere o bloqueio na tabela de Bloqueios de Pedido de Venda
    lErro = Comando_Executar(lComando, "INSERT INTO BloqueiosPV(FilialEmpresa,PedidoDeVenda,Sequencial,TipoDeBloqueio,CodUsuario,Responsavel,Data,CodUsuarioLib,ResponsavelLib,DataLib) VALUES (?,?,?,?,?,?,?,?,?,?)", objPedidoVenda.iFilialEmpresa, objPedidoVenda.lCodigo, iSequencial, objBloqueioPV.iTipoDeBloqueio, objBloqueioPV.sCodUsuario, objBloqueioPV.sResponsavel, objBloqueioPV.dtData, objBloqueioPV.sCodUsuarioLib, objBloqueioPV.sResponsavelLib, objBloqueioPV.dtDataLib)
    If lErro <> AD_SQL_SUCESSO Then Error 44394

    'Fecha o comando
    Call Comando_Fechar(lComando)

    BloqueiosPV_Grava1 = SUCESSO

    Exit Function

Erro_BloqueiosPV_Grava1:

    BloqueiosPV_Grava1 = Err

    Select Case Err

        Case 44392
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 44393

        Case 44394
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_BLOQUEIOPV", Err, objBloqueioPV.iFilialEmpresa, objBloqueioPV.lPedidoDeVendas, iSequencial)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149816)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function LiberacaoCredito_Grava(ByVal objLiberacaoCredito As ClassLiberacaoCredito) As Long
'Grava uma alçada

Dim lErro As Long
Dim lTransacao As Long, lTransacaoDic As Long
Dim lComando As Long
Dim lComando1 As Long
Dim lComando2 As Long
Dim sCodigo As String
Dim dLimiteMensal As Double
Dim dLimiteOperacao As Double

On Error GoTo Erro_LiberacaoCredito_Grava

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 48119
    
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 48125
    
    'abre comando para que seja consultado o dicdados
    lComando2 = Comando_AbrirExt(GL_lConexaoDic)
    If lComando2 = 0 Then Error 48126
        
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 48120
    
    lTransacaoDic = Transacao_AbrirDic
    If lTransacaoDic = 0 Then Error 56577
    
    sCodigo = String(STRING_CODUSUARIO, 0)
    
    'verifica se a alçada está cadastrada
    lErro = Comando_ExecutarPos(lComando, "SELECT LimiteMensal, LimiteOperacao FROM LiberacaoCredito WHERE CodUsuario = ?", 0, dLimiteMensal, dLimiteOperacao, objLiberacaoCredito.sCodUsuario)
    If lErro <> AD_SQL_SUCESSO Then Error 48121
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 48123
    
    'se a alçada estiver cadastrada ==> é uma alteração
    If lErro = SUCESSO Then
        
        lErro = Comando_LockExclusive(lComando)
        If lErro <> AD_SQL_SUCESSO Then Error 48122
        
        lErro = Comando_ExecutarPos(lComando1, "UPDATE LiberacaoCredito SET LimiteMensal = ?, LimiteOperacao = ?", lComando, objLiberacaoCredito.dLimiteMensal, objLiberacaoCredito.dLimiteOperacao)
        If lErro <> AD_SQL_SUCESSO Then Error 48124
    
    Else
        
        'a alçada não estava cadastrada ==> é uma inclusão
        lErro = Comando_ExecutarLockado(lComando2, "SELECT CodUsuario FROM Usuarios WHERE CodUsuario = ?", sCodigo, objLiberacaoCredito.sCodUsuario)
        If lErro <> AD_SQL_SUCESSO Then Error 48127
            
        lErro = Comando_BuscarPrimeiro(lComando2)
        If lErro <> AD_SQL_SUCESSO Then Error 48128
        
        lErro = Comando_LockShared(lComando2)
        If lErro <> AD_SQL_SUCESSO Then Error 48129
        
        lErro = Comando_Executar(lComando, "INSERT INTO LiberacaoCredito (CodUsuario, LimiteOperacao, LimiteMensal) VALUES (?, ?, ?)", objLiberacaoCredito.sCodUsuario, objLiberacaoCredito.dLimiteOperacao, objLiberacaoCredito.dLimiteMensal)
        If lErro <> AD_SQL_SUCESSO Then Error 48130
        
    End If
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 48131

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
        
    Call Transacao_RollbackDic
        
    LiberacaoCredito_Grava = SUCESSO
    
    Exit Function
    
Erro_LiberacaoCredito_Grava:
    
    LiberacaoCredito_Grava = Err
    
    Select Case Err
            
        Case 48119, 48125, 48126 'Erro Abertura de comando
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
            
        Case 48120, 56577 'Erro abertura Transacao
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
            
        Case 48121, 48123 'Erro de leitura na tabela LiberacaoCredito
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_LIBERACAOCREDITO", Err)
            
        Case 48122 'Erro na tentativa de fazer 'lock' na tabela LiberacaoCredito
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_LIBERACAOCREDITO", Err)
            
        Case 48124 'Erro na tentativa de atualizar a tabela LiberacaoCredito.
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_LIBERACAOCREDITO", Err)
            
        Case 48127, 48128 'Erro de leitura na tabela Usuarios.
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_USUARIOS_DIC", Err)
            
        Case 48129 'Erro na tentativa de fazer 'lock' na tabela Usuarios.
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_USUARIOS_DIC", Err)
            
        Case 48130 'Erro na tentiva de inserir um registro na tabela LiberacaoCredito.
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_LIBERACAOCREDITO", Err)
            
        Case 48131
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149817)
    
    End Select
    
    Call Transacao_RollbackDic
    Call Transacao_Rollback
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
            
    Exit Function
    
End Function

Function LiberacaoCredito_Exclui(ByVal objLiberacaoCredito As ClassLiberacaoCredito) As Long
'Exclui a alçada passada como parametro

Dim lErro As Long
Dim alComando(0 To 3) As Long
Dim lTransacao As Long
Dim sCodigo As String
Dim iIndice As Integer

On Error GoTo Erro_LiberacaoCredito_Exclui
    
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 48137
    Next
    
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 48138
    
    sCodigo = String(STRING_CODUSUARIO, 0)
    
    lErro = Comando_ExecutarPos(alComando(0), "SELECT CodUsuario FROM LiberacaoCredito WHERE CodUsuario = ?", 0, sCodigo, objLiberacaoCredito.sCodUsuario)
    If lErro <> AD_SQL_SUCESSO Then Error 48139
    
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 48140
    
    'Se não encontrou --> ERRO
    If lErro = AD_SQL_SEM_DADOS Then Error 58550
    
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> SUCESSO Then Error 48141
    
    'Exclui a alçada do BD
    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM LiberacaoCredito", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then Error 48148
         
    sCodigo = String(STRING_CODUSUARIO, 0)
         
    'Verifica se o usuário da alçada está vinculado a algum registro em ValorLiberadoCredito.
    lErro = Comando_ExecutarPos(alComando(2), "SELECT CodUsuario FROM ValorLiberadoCredito WHERE CodUsuario = ?", 0, sCodigo, objLiberacaoCredito.sCodUsuario)
    If lErro <> AD_SQL_SUCESSO Then Error 48146
    
    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 48147
    
    'exclui os registros em ValorLiberadoCredito vinculados ao usuario
    Do While lErro = AD_SQL_SUCESSO
    
        'Exclui os registros em ValorLiberadoCredito
        lErro = Comando_ExecutarPos(alComando(3), "DELETE FROM ValorLiberadoCredito", alComando(2))
        If lErro <> AD_SQL_SUCESSO Then Error 48152
        
        lErro = Comando_BuscarProximo(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 48147
    
    Loop
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 48149
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    LiberacaoCredito_Exclui = SUCESSO
    
    Exit Function
    
Erro_LiberacaoCredito_Exclui:

    LiberacaoCredito_Exclui = Err
    
    Select Case Err
        
        Case 48137, 48152
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
            
        Case 48138
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
        
        Case 48139, 48140
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_LIBERACAOCREDITO", Err)
        
        Case 48141
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_LIBERACAOCREDITO", Err)
                    
        Case 48146, 48147
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_VALORLIBERADOCREDITO", Err)
                           
        Case 48148
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_LIBERACAOCREDITO", Err, objLiberacaoCredito.sCodUsuario)
        
        Case 48152
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_VALORLIBERADOCREDITO", Err)
        
        Case 48149
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
            
        Case 58550 'Não encontrou para excluir (Caso na Exclusão do Usuario no Dic)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149818)
            
    End Select
    
    Call Transacao_Rollback
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function
    
End Function

Function NFiscalDevolucao_Grava_BD(ByVal objNFiscal As ClassNFiscal) As Long
'Faz a Inserção de uma Nota Fiscal de Saida-Devolução no BD

Dim lErro As Long
Dim alComando(0 To 10) As Long
Dim alComando3(1 To 4) As Long
Dim alComando4(1 To NUM_MAX_LCOMANDO_MOVESTOQUE) As Long
Dim lNumIntNF As Long
Dim lNumIntItemNF As Long
Dim iIndice As Integer
Dim objItemNF As ClassItemNF
Dim objTipoDocInfo As New ClassTipoDocInfo
Dim objMovEstoque As New ClassMovEstoque
Dim lCodigo As Long
Dim objItemMovEstoque As ClassItemMovEstoque
Dim iClasseDocCPR As Integer
Dim lNumIntDocCPR As Long
Dim sUM As String
Dim dQuantResto As Double
Dim objProduto As New ClassProduto
Dim dFator As Double
Dim dQuantDevUMResto As Double
Dim objNFiscalAux As New ClassNFiscal

On Error GoTo Erro_NFiscalDevolucao_Grava_BD

    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 39328
    Next

    'copia alguns alComando para alComando3
    For iIndice = LBound(alComando3) To UBound(alComando3)
        alComando3(iIndice) = Comando_Abrir()
        If alComando3(iIndice) = 0 Then gError 39328
    Next
    
    'copia alguns alComando para alComando4
    For iIndice = LBound(alComando4) To UBound(alComando4)
        alComando4(iIndice) = Comando_Abrir()
        If alComando4(iIndice) = 0 Then gError 39328
    Next
    
    If objNFiscal.lNumNotaFiscal = 0 Then
    
        'Gera o Número para a Nota Fiscal e atualiza a Tabela de Serie
        lErro = CF("NFiscalNumAuto", objNFiscal)
        If lErro <> SUCESSO Then gError 60444

        lErro = CF("NFiscalDev_Verifica_Existencia", objNFiscal, alComando(0))
        If lErro <> SUCESSO And lErro <> 207604 And lErro <> 207607 Then gError 39170
        
        'é erro pois o usuario esta querendo fazer uma inclusao de nota e o novo numero de nota fiscal gerado coincide com alguma nota
        If lErro <> SUCESSO Then gError 32249
    
    Else
    
        lErro = CF("NFiscal_Testa_Numero", objNFiscal)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
        lErro = CF("NFiscalDev_Verifica_Existencia", objNFiscal, alComando(0))
        If lErro <> SUCESSO And lErro <> 207604 And lErro <> 207607 Then gError 207609
    
        objNFiscalAux.lNumIntDoc = objNFiscal.lNumIntDoc
        Set objNFiscalAux.objContabil = objNFiscal.objContabil
    
        'vai excluir nfefedlote, excluir a nota e inclui-la com o mesmo numero
        If lErro <> SUCESSO Then
            
            lErro = CF("NFiscal_Le", objNFiscalAux)
            If lErro <> SUCESSO And lErro <> 31442 Then gError ERRO_SEM_MENSAGEM
        
            'Lê os itens da nota fiscal
            lErro = CF("NFiscalItens_Le", objNFiscalAux)
            If lErro <> SUCESSO Then gError 207611
    
            'Faz a exclusao de uma nota fiscal de Saida
            lErro = CF("NotaFiscalSaida_Excluir_EmTrans", objNFiscalAux, objNFiscal.objContabil)
            If lErro <> SUCESSO Then gError 207612
    
        'se o numero da nota foi especificada e nao encontrou a nota ==> erro
        Else
            If objNFiscal.iNumNFManual = 0 Then gError 32250
        End If
    
    
    End If
    
    'Gerar o Número Interno da Nota Fiscal
    lErro = CF("NFiscal_Automatico", lNumIntNF)
    If lErro <> SUCESSO Then gError 39329
    
    objNFiscal.lNumIntDoc = lNumIntNF
    
    lErro = CF("NFiscal_Grava_Msg", objNFiscal)
    If lErro <> SUCESSO Then gError 51630

    'Busca iClasseDocCPR e lNumIntDocCPR
    lErro = CF("CPR_Gera", objNFiscal, iClasseDocCPR, lNumIntDocCPR)
    If lErro <> SUCESSO Then gError 51630

    objNFiscal.iClasseDocCPR = iClasseDocCPR
    objNFiscal.lNumIntDocCPR = lNumIntDocCPR
        
    With objNFiscal
        
        .iNFe = SerieEletronica(.sSerie)
        
        'Insere no BD
        lErro = Comando_Executar(alComando(0), "INSERT INTO NFiscal (DataAtualizacao, NumIntDoc, Status, FilialEmpresa, Serie, NumNotaFiscal, Cliente, FilialCli, FilialEntrega, Fornecedor, FilialForn, DataEmissao, DataEntrada, DataSaida, DataVencimento,DataReferencia, NumPedidoVenda, NumPedidoTerc, ClasseDocCPR, NumIntDocCPR, ValorTotal, ValorProdutos, ValorFrete, ValorSeguro, ValorOutrasDespesas, ValorDesconto, CodTransportadora, MensagemNota, TabelaPreco, TipoNFiscal, NaturezaOp, PesoLiq, PesoBruto, NumIntTrib, Placa, PlacaUF, VolumeQuant, VolumeEspecie, VolumeMarca, Canal, NumIntNotaOriginal,VolumeNumero,FreteRespons,FilialPedido,HoraSaida, CodTranspRedesp, DetPagFrete, Moeda, TaxaMoeda, VolumeTotal, SemDataSaida, NaoImpCobranca, MensagemCorpoNota, NFe, ValorDescontoTit, ValorItens, ValorDescontoItens, HoraEmissao, DataCadastro, HoraCadastro, UsuCadastro) " & _
            "VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
            gdtDataHoje, lNumIntNF, STATUS_BAIXADO, .iFilialEmpresa, .sSerie, .lNumNotaFiscal, .lCliente, .iFilialCli, .iFilialEntrega, .lFornecedor, .iFilialForn, .dtDataEmissao, .dtDataEntrada, .dtDataSaida, .dtDataVencimento, .dtDataReferencia, .lNumPedidoVenda, .sNumPedidoTerc, .iClasseDocCPR, .lNumIntDocCPR, .dValorTotal, .dValorProdutos, .dValorFrete, .dValorSeguro, .dValorOutrasDespesas, .dValorDesconto, .iCodTransportadora, .sMensagemNota, .iTabelaPreco, .iTipoNFiscal, .sNaturezaOp, .dPesoLiq, .dPesoBruto, .lNumIntTrib, .sPlaca, .sPlacaUF, .lVolumeQuant, .lVolumeEspecie, .lVolumeMarca, .iCanal, .lNumIntNotaOriginal, .sVolumeNumero, .iFreteRespons, .iFilialPedido, CDbl(.dtHoraSaida), .iCodTranspRedesp, .iDetPagFrete, .iMoeda, .dTaxaMoeda, .dVolumeTotal, .iSemDataSaida, .iNaoImpCobranca, .sMensagemCorpoNota, .iNFe, _
            .dValorDescontoTit, .dValorItens, .dValorDescontoItens, CDbl(IIf(.dtDataSaida <> DATA_NULA, IIf(.dtHoraEmissao <> 0 And .dtHoraEmissao < .dtHoraSaida, .dtHoraEmissao, .dtHoraSaida), IIf(.dtHoraEmissao <> 0 And .dtHoraEmissao < .dtHoraEntrada, .dtHoraEmissao, .dtHoraEntrada))), gdtDataHoje, CDbl(Time), gsUsuario)
        If lErro <> AD_SQL_SUCESSO Then gError 39330

    End With

    lErro = CF("NFiscal_GravaTributacao", objNFiscal, alComando(4), alComando(5))
    If lErro <> SUCESSO Then gError 39331
    
    'Para cada Ítem da Nota Fiscal
    For Each objItemNF In objNFiscal.colItensNF
        
        'Gera o Número Automático
        lErro = CF("NFiscalItem_Automatico", lNumIntItemNF)
        If lErro <> SUCESSO Then gError 39332

        objItemNF.lNumIntNF = lNumIntNF
        objItemNF.lNumIntDoc = lNumIntItemNF

        With objItemNF
        
            'Insere no BD
            lErro = Comando_Executar(alComando(3), "INSERT INTO ItensNFiscal (NumIntNF, Item, Status, Produto, UnidadeMed, Quantidade, Almoxarifado, PrecoUnitario, PercDesc, ValorDesconto, DataEntrega, DescricaoItem, ValorAbatComissao, NumIntPedVenda, NumIntItemPedVenda, NumIntDoc, NumIntTrib, NumIntDocOrig) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", lNumIntNF, .iItem, STATUS_BAIXADO, .sProduto, .sUnidadeMed, .dQuantidade, .iAlmoxarifado, .dPrecoUnitario, .dPercDesc, .dValorDesconto, .dtDataEntrega, .sDescricaoItem, .dValorAbatComissao, .lNumIntPedVenda, .lNumIntItemPedVenda, lNumIntItemNF, .lNumIntTrib, .lNumIntDocOrig)
            If lErro <> AD_SQL_SUCESSO Then gError 39333
        
            lErro = CF("NFiscal_GravaTributacaoItem", objItemNF, alComando(3), alComando(6))
            If lErro <> SUCESSO Then gError 39334
            
            objItemNF.objInfoAdicDocItem.iTipoDoc = TIPODOC_INFOADIC_ITEMNF
            objItemNF.objInfoAdicDocItem.lNumIntDocItem = objItemNF.lNumIntDoc
            lErro = CF("InfoAdicDocItem_Insere", objItemNF.objInfoAdicDocItem, alComando(10))
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        
            'Se é a devolução simbólica
            If objNFiscal.iTipoNFiscal = DOCINFO_NFISDBFNE And gobjFAT.iTrataNFDevSimbPorOP = MARCADO Then
                lErro = NFiscalDev_Grava_Dados_Benef(objItemNF)
                If lErro <> SUCESSO Then gError 39334
            End If
        
            If objNFiscal.iTipoNFiscal = DOCINFO_NFISDC Or objNFiscal.iTipoNFiscal = DOCINFO_NFISDCNT Or _
               objNFiscal.iTipoNFiscal = DOCINFO_NFISDD Or objNFiscal.iTipoNFiscal = DOCINFO_NFISODC Or _
               objNFiscal.iTipoNFiscal = DOCINFO_NFISODF Or objNFiscal.iTipoNFiscal = DOCINFO_NFISDBF Or _
               objNFiscal.iTipoNFiscal = DOCINFO_NFISDBFNE Then
                
                sUM = String(STRING_UM_SIGLA, 0)

                lErro = Comando_Executar(alComando(7), "SELECT QuantResto, UnidadeMed FROM ItemNFResto AS INFR, ItensNFiscal AS INF WHERE INFR.NumIntItemNF = INF.NumIntDoc AND NumIntItemNF = ?", dQuantResto, sUM, objItemNF.lNumIntDocOrig)
                If lErro <> AD_SQL_SUCESSO Then gError 199074
                
                lErro = Comando_BuscarPrimeiro(alComando(7))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 199075
                
                If lErro = AD_SQL_SUCESSO Then
                
                    objProduto.sCodigo = objItemNF.sProduto
                    
                    'ler dados do produto
                    lErro = CF("Produto_Le", objProduto)
                    If lErro <> SUCESSO And lErro <> 28030 Then gError 199076
                
                    'converter qtde a faturar p/UMEstoque do produto
                    lErro = CF("UM_Conversao", objProduto.iClasseUM, objItemNF.sUnidadeMed, sUM, dFator)
                    If lErro <> SUCESSO Then gError 199077
                    
                    dQuantDevUMResto = objItemNF.dQuantidade * dFator
                    
                    dQuantResto = dQuantResto - dQuantDevUMResto
                    
                    If dQuantResto <= 0 Then
                
                        lErro = Comando_Executar(alComando(8), "DELETE FROM ItemNFResto WHERE NumIntItemNF = ?", objItemNF.lNumIntDocOrig)
                        If lErro <> AD_SQL_SUCESSO Then gError 199078
                        
                    Else
                        
                        lErro = Comando_Executar(alComando(9), "UPDATE ItemNFResto SET QuantResto = ? WHERE NumIntItemNF = ?", dQuantResto, objItemNF.lNumIntDocOrig)
                        If lErro <> AD_SQL_SUCESSO Then gError 199079
                        
                    End If
                    
                End If
                    
            End If
        
        End With
    
        lErro = CF("ItensNFGrade_Inclui", objItemNF)
        If lErro <> SUCESSO Then gError 39332
    
    Next
    
    'Se é a devolução real do material
    If objNFiscal.iTipoNFiscal = DOCINFO_NFISDBF And gobjFAT.iTrataNFDevSimbPorOP = MARCADO Then
        lErro = NFiscalDev_Grava_DevRemBenef(objNFiscal)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    End If
    
    '############################################
    'Inserido por Wagner 22/03/2006
    lErro = CF("NFiscalItens_Grava_Customizado", objNFiscal)
    If lErro <> SUCESSO Then gError 177049
    '############################################
    
    objTipoDocInfo.iCodigo = objNFiscal.iTipoNFiscal
    
    'gera os movimentos de estoque, se necessários
    lErro = CF("MovEstoque_Gera", alComando3(), alComando4(), objNFiscal)
    If lErro <> SUCESSO Then gError 44288
    
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    For iIndice = LBound(alComando3) To UBound(alComando3)
        Call Comando_Fechar(alComando3(iIndice))
    Next
    For iIndice = LBound(alComando4) To UBound(alComando4)
        Call Comando_Fechar(alComando4(iIndice))
    Next

    NFiscalDevolucao_Grava_BD = SUCESSO

    Exit Function

Erro_NFiscalDevolucao_Grava_BD:

    NFiscalDevolucao_Grava_BD = gErr

    Select Case gErr

        Case 20813, 20824, 39170, 39329, 39332, 39335, 39337, 39338, 35425, 39331, 39334, 44288, 51630, 60444, 177049, 199076, 199077, 207609 To 207614

        Case 32249, 32250
            Call Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_NFISCAL_NUMAUTO", gErr)
        
        Case 39328
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", 0)

        Case 39330
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_NFISCAL1", gErr, objNFiscal.lFornecedor, objNFiscal.iFilialForn, objNFiscal.lCliente, objNFiscal.iFilialCli, objNFiscal.iTipoNFiscal, objNFiscal.sSerie, objNFiscal.lNumNotaFiscal)

        Case 39333
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_ITENSNFISCAL", gErr, objNFiscal.lNumNotaFiscal)

        Case 39336
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TIPO_NFISCAL_NAO_CADASTRADO", gErr, objNFiscal.iTipoNFiscal)
        
        Case 61406 'Tratar a gravação da contabilidade na rotina chamadora
        
        Case 199074, 199075
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITEMNFRESTO", gErr)
        
        Case 199078
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_ITEMNFRESTO", gErr)
        
        Case 199079
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_ITEMNFRESTO", gErr)
        
        Case ERRO_SEM_MENSAGEM
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149819)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    For iIndice = LBound(alComando3) To UBound(alComando3)
        Call Comando_Fechar(alComando3(iIndice))
    Next
    For iIndice = LBound(alComando4) To UBound(alComando4)
        Call Comando_Fechar(alComando4(iIndice))
    Next
    
    Exit Function

End Function

''Function NFiscalFaturaPedido_Grava(objNFiscal As ClassNFiscal, objContabil As ClassContabil) As Long
'''Faz a gravação de uma nota fiscal fatura gerada a partir de um pedido de venda
''
''Dim lErro As Long
''Dim objPedidoVenda As New ClassPedidoDeVenda
''Dim lTransacao As Long
''Dim alComando1(1 To 30) As Long
''Dim alComando(1 To NUM_MAX_LCOMANDO_NFISCALFAT) As Long
''Dim iIndice As Integer
''Dim dQuantFaturada As Double
''Dim dQuantNaoCancelada As Double
''Dim objMovEstoque As ClassMovEstoque
''Dim dQuantPedida As Double
''Dim dQuantCancelada  As Double
''Dim iStatus As Integer
''Dim lNumIntDoc As Long
''
''On Error GoTo Erro_NFiscalFaturaPedido_Grava
''
''   'Abre a transacao
''    lTransacao = Transacao_Abrir()
''    If lTransacao = 0 Then Error 46598
''
''    'Abre os comandos
''    For iIndice = LBound(alComando1) To UBound(alComando1)
''        alComando1(iIndice) = Comando_Abrir()
''        If alComando1(iIndice) = 0 Then Error 46055
''    Next
''
''    For iIndice = LBound(alComando) To UBound(alComando)
''        alComando(iIndice) = Comando_Abrir()
''        If alComando(iIndice) = 0 Then Error 46595
''    Next
''
''    'Verifica se já existe nota com esses dados
''    lErro = Comando_Executar(alComando1(30), "SELECT NumIntDoc FROM NFiscalTipoDocInfo WHERE FilialEmpresa = ? AND Serie = ? AND NumNotaFiscal = ? AND DataEmissao = ? AND Status <> ? AND (Tipo = ? OR Tipo = ?) ", lNumIntDoc, giFilialEmpresa, objNFiscal.sSerie, objNFiscal.lNumNotaFiscal, objNFiscal.dtDataEmissao, STATUS_EXCLUIDO, DOCINFO_NF_INT_ENTRADA, DOCINFO_NF_INT_SAIDA)
''    If lErro <> AD_SQL_SUCESSO Then Error 61416
''
''    lErro = Comando_BuscarPrimeiro(alComando1(30))
''    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 61417
''
''    'Nova nota Fiscal
''    If lErro = AD_SQL_SEM_DADOS Then
''
''        objPedidoVenda.lCodigo = objNFiscal.lNumPedidoVenda
''        objPedidoVenda.iFilialEmpresa = objNFiscal.iFilialPedido
''
''        'Lê e faz lock no Pedido de Venda
''        lErro = CF("PedidoDeVenda_Le_Lock",alComando1(1), objPedidoVenda)
''        If lErro <> SUCESSO And lErro <> 36986 Then Error 46079
''
''        If lErro <> SUCESSO Then Error 46084
''
''        'Se a Filial de faturamento for diferente da filialempresa atual --> erro.
''        If objPedidoVenda.iFilialEmpresaFaturamento <> giFilialEmpresa Then Error 35643
''
''        'Lê os bloqueios do Pedido de venda
''        lErro = CF("BloqueiosPV_Le",objPedidoVenda)
''        If lErro <> SUCESSO Then Error 46983
''
''        'Verifica se o Pedido de venda possui bloqueios que possam impedir seu faturamento
''        lErro = PedidoDeVenda_TestaBloqueios(objPedidoVenda)
''        If lErro <> SUCESSO And lErro <> 25741 Then Error 51469
''        If lErro = 25741 Then Error 46941
''
''        'Verifica se o cliente possui o crédito para faturar a nota fiscal
''        'Se não tiver atualiza tabela de estatistica de liberacao do usuario
''        lErro = Processa_NFiscal_Credito(objNFiscal)
''        If lErro <> SUCESSO Then Error 25742
''
''        'Nos ítens da NF coloca o NumIntDoc do PedidoVenda
''        For iIndice = 1 To objNFiscal.ColItensNF.Count
''            objNFiscal.ColItensNF(iIndice).lNumIntPedVenda = objPedidoVenda.lNumIntDoc
''        Next
''
''        'Tenta liberar reservas do Pedido igual quant. usadas na NF
''        lErro = ReservasPV_Libera_QuantFaturadaNF(objNFiscal)
''        If lErro <> SUCESSO Then Error 51580
''
''    End If
''
''    'Chama a função de gravação de uma nota fiscal
''    lErro = CF("NFiscalFatura_Grava_Trans",alComando(), objNFiscal)
''    If lErro <> SUCESSO And lErro <> 61401 Then Error 46594
''
''    'Se for para gravar somente a contabilidade retornará o erro 61401
''    If lErro = SUCESSO Then
''
''        'OK ?? Shirley, precisa de colItemPedido ? Não tem os ítens a partir de ítens NF ?
''        'OK ?? Encapsular em ItensPV_AtualizaQuantFaturada(objNFiscal)
''        lErro = ItensPV_AtualizaQuantFaturada(alComando(3), alComando(4), objNFiscal)
''        If lErro <> SUCESSO Then Error 51748
''
''        'Atualiza estatística de QuantPedida em ProdutoFilial
''        lErro = CF("ProdutoFilial_Subtrai_NF_QuantPedida",objNFiscal)
''        If lErro <> SUCESSO Then Error 51497
''
''        'Grava a Estatística do Cliente
''        lErro = CF("FilialCliente_Grava_Estatistica",objNFiscal)
''        If lErro <> SUCESSO Then Error 52970
''
''        'Grava a Estatística do Produto Vendido
''        lErro = CF("ProdutoVendido_Grava_Estatisticas",objNFiscal)
''        If lErro <> SUCESSO Then Error 52971
''
''        'Le Itens de PV
''        lErro = CF("PedidoDeVenda_Le_Itens",objPedidoVenda)
''        If lErro <> AD_SQL_SUCESSO Then Error 51492
''
''        'Verifica se tem quantidade não cancelada
''        lErro = PedVenda_QuantNaoCancelada(objPedidoVenda, dQuantNaoCancelada)
''        If lErro <> SUCESSO Then Error 51493
''
''        'Se nao tiver quantidade nao cancelada, baixa o Pedido
''        If dQuantNaoCancelada = 0 Then
''
''            lErro = CF("PedidoDeVenda_Baixar",alComando1, objPedidoVenda)
''            If lErro <> SUCESSO Then Error 51494
''
''        End If
''
''    End If
''
''    'Grava os dados contábeis (contabilidade)
''    lErro = objContabil.Contabil_Gravar_Registro(objNFiscal.lNumIntDoc, objNFiscal.lCliente, objNFiscal.iFilialCli, NAO_AVALIA_PELO_CUSTO_REAL_PRODUCAO, AVISA_LANCAMENTOS_CONTABILIZADOS, objNFiscal.lNumNotaFiscal)
''    If lErro <> SUCESSO Then Error 35645
''
''
''    'Faz o commit
''    lErro = Transacao_Commit()
''    If lErro <> SUCESSO Then Error 35647
''
''    'Fecha os comandos
''    For iIndice = LBound(alComando1) To UBound(alComando1)
''        Call Comando_Fechar(alComando1(iIndice))
''    Next
''    For iIndice = LBound(alComando) To UBound(alComando)
''        Call Comando_Fechar(alComando(iIndice))
''    Next
''
''    NFiscalFaturaPedido_Grava = SUCESSO
''
''    Exit Function
''
''Erro_NFiscalFaturaPedido_Grava:
''
''    NFiscalFaturaPedido_Grava = Err
''
''    Select Case Err
''
''        Case 35643
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_FILIALFATURAMENTO_DIFERENTE", Err)
''
''        Case 46055
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
''
''        Case 25742, 35645, 46079, 46594, 52970, 52971, 51469, 51580, 51748
''
''        Case 46941
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_PEDIDO_VENDA_BLOQUEIO", Err, objPedidoVenda.lCodigo)
''
''        Case 46084
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_PEDIDO_VENDA_NAO_CADASTRADO1", Err, objPedidoVenda.lCodigo, objPedidoVenda.iFilialEmpresa)
''
''        Case 46598
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
''
''        Case 51492, 51493, 51494, 51495, 51496, 51497, 51526
''
''        Case 61416, 61417
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", Err)
''
''        Case Else
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149820)
''
''    End Select
''
''    Call Transacao_Rollback
''
''    For iIndice = LBound(alComando1) To UBound(alComando1)
''        Call Comando_Fechar(alComando1(iIndice))
''    Next
''    For iIndice = LBound(alComando) To UBound(alComando)
''        Call Comando_Fechar(alComando(iIndice))
''    Next
''
''    Exit Function
''
''End Function
''
''Function NFiscalPedido_Grava(objNFiscal As ClassNFiscal, objContabil As ClassContabil) As Long
'''Faz a gravação de uma nota fiscal gerada a partir de um pedido de venda
''
''Dim lErro As Long
''Dim objPedidoVenda As New ClassPedidoDeVenda
''Dim lTransacao As Long
''Dim alComando1(1 To 29) As Long
''Dim alComando(1 To NUM_MAX_LCOMANDO_NFISCAL) As Long
''Dim iIndice As Integer
''Dim dQuantFaturada As Double
''Dim dQuantNaoCancelada As Double
''Dim objMovEstoque As ClassMovEstoque
''Dim dQuantPedida As Double
''Dim dQuantCancelada As Double
''Dim iStatus As Integer
''Dim lNumIntDoc As Long
''
''On Error GoTo Erro_NFiscalPedido_Grava
''
''   'Abre a transacao
''    lTransacao = Transacao_Abrir()
''    If lTransacao = 0 Then Error 46598
''
''    'Abre os comandos
''    For iIndice = LBound(alComando1) To UBound(alComando1)
''        alComando1(iIndice) = Comando_Abrir()
''        If alComando1(iIndice) = 0 Then Error 46055
''    Next
''
''    For iIndice = LBound(alComando) To UBound(alComando)
''        alComando(iIndice) = Comando_Abrir()
''        If alComando(iIndice) = 0 Then Error 46595
''    Next
''
''    'Verifica se já existe nota com esses dados
''    lErro = Comando_Executar(alComando1(29), "SELECT NumIntDoc FROM NFiscalTipoDocInfo WHERE FilialEmpresa = ? AND Serie = ? AND NumNotaFiscal = ? AND DataEmissao = ? AND Status <> ? AND (Tipo = ? OR Tipo = ?) ", lNumIntDoc, giFilialEmpresa, objNFiscal.sSerie, objNFiscal.lNumNotaFiscal, objNFiscal.dtDataEmissao, STATUS_EXCLUIDO, DOCINFO_NF_INT_ENTRADA, DOCINFO_NF_INT_SAIDA)
''    If lErro <> AD_SQL_SUCESSO Then Error 61418
''
''    lErro = Comando_BuscarPrimeiro(alComando1(29))
''    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 61419
''
''    'Nova nota Fiscal
''    If lErro = AD_SQL_SEM_DADOS Then
''
''        objPedidoVenda.lCodigo = objNFiscal.lNumPedidoVenda
''        objPedidoVenda.iFilialEmpresa = objNFiscal.iFilialPedido
''
''        'Lê e faz lock no Pedido de Venda
''        lErro = CF("PedidoDeVenda_Le_Lock",alComando1(1), objPedidoVenda)
''        If lErro <> SUCESSO And lErro <> 36986 Then Error 46079
''        If lErro <> SUCESSO Then Error 46084
''
''        'Se a Filial de faturamento for diferente da filialempresa atual --> erro.
''        If objPedidoVenda.iFilialEmpresaFaturamento <> giFilialEmpresa Then Error 35643
''
''        'Lê os bloqueios do Pedido de venda
''        lErro = CF("BloqueiosPV_Le",objPedidoVenda)
''        If lErro <> SUCESSO Then Error 51470
''
''        'Verifica se o Pedido de venda possui bloqueios que possam impedir seu faturamento
''        lErro = PedidoDeVenda_TestaBloqueios(objPedidoVenda)
''        If lErro <> SUCESSO And lErro <> 25741 Then Error 51471
''        If lErro = 25741 Then Error 46942
''
''        'Verifica se o cliente possui o crédito para faturar a nota fiscal
''        'Se não tiver atualiza tabela de estatistica de liberacao do usuario
''        lErro = Processa_NFiscal_Credito(objNFiscal)
''        If lErro <> SUCESSO Then Error 25743
''
''        'Nos ítens da NF coloca o NumIntDoc do PedidoVenda
''        For iIndice = 1 To objNFiscal.ColItensNF.Count
''            objNFiscal.ColItensNF(iIndice).lNumIntPedVenda = objPedidoVenda.lNumIntDoc
''        Next
''
''        'Tenta liberar reservas do Pedido igual quant. usadas na NF
''        lErro = ReservasPV_Libera_QuantFaturadaNF(objNFiscal)
''        If lErro <> SUCESSO Then Error 25775
''
''    End If
''
''    'Chama a função de gravação de uma nota fiscal
''    lErro = CF("NFiscal_Grava_Trans",alComando(), objNFiscal)
''    If lErro <> SUCESSO And lErro <> 61403 Then Error 46594
''
''    If lErro = SUCESSO Then
''
''        'OK ?? Shirley encapsular como em NFiscalFaturaPedido_Grava
''        lErro = ItensPV_AtualizaQuantFaturada(alComando(3), alComando(4), objNFiscal)
''        If lErro <> SUCESSO Then Error 51749
''
''        'Atualiza, para cada produto, a quantidade em pedido em ProdutosFilial
''        lErro = CF("ProdutoFilial_Subtrai_NF_QuantPedida",objNFiscal)
''        If lErro <> SUCESSO Then Error 51497
''
''        'Grava a Estatística do Cliente
''        lErro = CF("FilialCliente_Grava_Estatistica",objNFiscal)
''        If lErro <> SUCESSO Then Error 52968
''
''        'Grava a Estatística do Produto Vendido
''        lErro = CF("ProdutoVendido_Grava_Estatisticas",objNFiscal)
''        If lErro <> SUCESSO Then Error 52969
''
''        'Lê ítens de Pedido Venda
''        lErro = CF("PedidoDeVenda_Le_Itens",objPedidoVenda)
''        If lErro <> AD_SQL_SUCESSO Then Error 51516
''
''        'Verifica se tem quantidade não cancelada
''        lErro = PedVenda_QuantNaoCancelada(objPedidoVenda, dQuantNaoCancelada)
''        If lErro <> SUCESSO Then Error 51517
''
''        'Se nao tiver quantidade nao cancelada, baixa o Pedido
''        If dQuantNaoCancelada = 0 Then
''
''            lErro = CF("PedidoDeVenda_Baixar",alComando1, objPedidoVenda)
''            If lErro <> SUCESSO Then Error 51518
''
''        End If
''
''    End If
''
''    'Grava os dados contábeis (contabilidade)
''    lErro = objContabil.Contabil_Gravar_Registro(objNFiscal.lNumIntDoc, objNFiscal.lCliente, objNFiscal.iFilialCli, NAO_AVALIA_PELO_CUSTO_REAL_PRODUCAO, AVISA_LANCAMENTOS_CONTABILIZADOS, objNFiscal.lNumNotaFiscal)
''    If lErro <> SUCESSO Then Error 35645
''
''    'Faz o commit
''    lErro = Transacao_Commit()
''    If lErro <> SUCESSO Then Error 35647
''
''    'Fecha os comandos
''    For iIndice = LBound(alComando1) To UBound(alComando1)
''        Call Comando_Fechar(alComando1(iIndice))
''    Next
''    For iIndice = LBound(alComando) To UBound(alComando)
''        Call Comando_Fechar(alComando(iIndice))
''    Next
''
''    NFiscalPedido_Grava = SUCESSO
''
''    Exit Function
''
''Erro_NFiscalPedido_Grava:
''
''    NFiscalPedido_Grava = Err
''
''    '?? Shirley tratamento de erros faltando (46614, 46615, 46616 outros ??). Checar tudo e colocar os erros em ordem.
''    '?? Não deixar erro que não existe na rotina
''
''    Select Case Err
''
''        Case 25778
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_QUANT_FATURADA_MAIOR_QUANT_A_FATURAR", Err, objNFiscal.ColItensNF(iIndice).lNumIntItemPedVenda)
''
''        Case 35642
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
''
''        Case 35643
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_FILIALFATURAMENTO_DIFERENTE", Err)
''
''        Case 46055
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
''
''        Case 25743, 25775, 35645, 46079, 46594, 51470, 51471, 52968, 53969, 51497, 51516 To 51520, 51749
''
''        Case 46084
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_PEDIDO_VENDA_NAO_CADASTRADO1", Err, objPedidoVenda.lCodigo, objPedidoVenda.iFilialEmpresa)
''
''        Case 46598
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
''
''        Case 46942
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_PEDIDO_VENDA_BLOQUEIO", Err, objPedidoVenda.lCodigo)
''
''        Case 61418, 61419
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", Err)
''
''        Case Else
''            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149821)
''
''    End Select
''
''    Call Transacao_Rollback
''
''    For iIndice = LBound(alComando1) To UBound(alComando1)
''        Call Comando_Fechar(alComando1(iIndice))
''    Next
''    For iIndice = LBound(alComando) To UBound(alComando)
''        Call Comando_Fechar(alComando(iIndice))
''    Next
''
''    Exit Function
''
''End Function
''
Function NFiscalRemessa_Grava_BD(ByVal objNFiscal As ClassNFiscal) As Long
'Faz a Inserção de uma Nota Fiscal de Saida-Remessa no BD

Dim lErro As Long
Dim alComando(0 To 7) As Long
Dim alComando3(1 To 4) As Long
Dim alComando4(1 To NUM_MAX_LCOMANDO_MOVESTOQUE) As Long
Dim lNumIntNF As Long
Dim lNumIntItemNF As Long
Dim iIndice As Integer
Dim objItemNF As ClassItemNF
Dim objTipoDocInfo As New ClassTipoDocInfo
Dim objMovEstoque As New ClassMovEstoque
Dim lCodigo As Long
Dim objItemMovEstoque As ClassItemMovEstoque
Dim objNFiscalAux As New ClassNFiscal

On Error GoTo Erro_NFiscalRemessa_Grava_BD

    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 42094
    Next

    'copia alguns alComando para alComando3
    For iIndice = LBound(alComando3) To UBound(alComando3)
        alComando3(iIndice) = Comando_Abrir()
        If alComando3(iIndice) = 0 Then gError 42094
    Next
    
    'copia alguns alComando para alComando4
    For iIndice = LBound(alComando4) To UBound(alComando4)
        alComando4(iIndice) = Comando_Abrir()
        If alComando4(iIndice) = 0 Then gError 42094
    Next
    
    If objNFiscal.lNumNotaFiscal = 0 Then
    
        'Gera o Número para a Nota Fiscal e atualiza a Tabela de Serie
        lErro = CF("NFiscalNumAuto", objNFiscal)
        If lErro <> SUCESSO Then gError 60442
   
        'Verifica se já existe a Nota Fiscal e dá mensagem ao Usuário
        lErro = CF("NFiscalRemessa_Verifica_Existencia", objNFiscal, alComando(0))
        If lErro <> SUCESSO And lErro <> 207591 And lErro <> 207593 Then gError 39221
        
        'é erro pois o usuario esta querendo fazer uma inclusao de nota e o novo numero de nota fiscal gerado coincide com alguma nota
        If lErro <> SUCESSO Then gError 32251
    
    
    Else
    
        lErro = CF("NFiscal_Testa_Numero", objNFiscal)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
        'Verifica se já existe a Nota Fiscal e dá mensagem ao Usuário
        lErro = CF("NFiscalRemessa_Verifica_Existencia", objNFiscal, alComando(0))
        If lErro <> SUCESSO And lErro <> 207591 And lErro <> 207593 Then gError 207602
    
        objNFiscalAux.lNumIntDoc = objNFiscal.lNumIntDoc
        Set objNFiscalAux.objContabil = objNFiscal.objContabil
        
        'vai excluir a nota e inclui-la com o mesmo numero
        If lErro <> SUCESSO Then
            
            lErro = CF("NFiscal_Le", objNFiscalAux)
            If lErro <> SUCESSO And lErro <> 31442 Then gError ERRO_SEM_MENSAGEM
        
            'Lê os itens da nota fiscal
            lErro = CF("NFiscalItens_Le", objNFiscalAux)
            If lErro <> SUCESSO Then gError 207598
    
            'Faz a exclusao de uma nota fiscal de Saida
            lErro = CF("NotaFiscalSaida_Excluir_EmTrans", objNFiscalAux, objNFiscal.objContabil)
            If lErro <> SUCESSO Then gError 207599
        
        'se o numero da nota foi especificada e nao encontrou a nota ==> erro
        Else
            If objNFiscal.iNumNFManual = 0 Then gError 32252
        End If
                    
    End If
    
    'Gera o Número Interno da Nota Fiscal
    lErro = CF("NFiscal_Automatico", lNumIntNF)
    If lErro <> SUCESSO Then gError 42095
    
    objNFiscal.lNumIntDoc = lNumIntNF
    
    lErro = CF("NFiscal_Grava_Msg", objNFiscal)
    If lErro <> SUCESSO Then gError 42095

    With objNFiscal

        .iNFe = SerieEletronica(.sSerie)

        'Insere no BD
        lErro = Comando_Executar(alComando(0), "INSERT INTO NFiscal (DataAtualizacao, NumIntDoc, Status, FilialEmpresa, Serie, NumNotaFiscal, Cliente, FilialCli, FilialEntrega, Fornecedor, FilialForn, DataEmissao, DataEntrada, DataSaida, DataVencimento,DataReferencia, NumPedidoVenda, NumPedidoTerc, ClasseDocCPR, NumIntDocCPR, ValorTotal, ValorProdutos, ValorFrete, ValorSeguro, ValorOutrasDespesas, ValorDesconto, CodTransportadora, MensagemNota, TabelaPreco, TipoNFiscal, NaturezaOp, PesoLiq, PesoBruto, NumIntTrib, Placa, PlacaUF, VolumeQuant, VolumeEspecie, VolumeMarca, Canal, NumIntNotaOriginal, VolumeNumero, FreteRespons, FilialPedido,HoraSaida, CodTranspRedesp, DetPagFrete, Moeda, TaxaMoeda, VolumeTotal, SemDataSaida, NaoImpCobranca, MensagemCorpoNota, NFe, ValorDescontoTit, ValorItens, ValorDescontoItens, HoraEmissao, DataCadastro, HoraCadastro, UsuCadastro) " & _
            "VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
            gdtDataHoje, lNumIntNF, STATUS_BAIXADO, .iFilialEmpresa, .sSerie, .lNumNotaFiscal, .lCliente, .iFilialCli, .iFilialEntrega, .lFornecedor, .iFilialForn, .dtDataEmissao, .dtDataEntrada, .dtDataSaida, .dtDataVencimento, .dtDataReferencia, .lNumPedidoVenda, .sNumPedidoTerc, .iClasseDocCPR, .lNumIntDocCPR, .dValorTotal, .dValorProdutos, .dValorFrete, .dValorSeguro, .dValorOutrasDespesas, .dValorDesconto, .iCodTransportadora, .sMensagemNota, .iTabelaPreco, .iTipoNFiscal, .sNaturezaOp, .dPesoLiq, .dPesoBruto, .lNumIntTrib, .sPlaca, .sPlacaUF, .lVolumeQuant, .lVolumeEspecie, .lVolumeMarca, .iCanal, .lNumIntNotaOriginal, .sVolumeNumero, .iFreteRespons, .iFilialPedido, CDbl(.dtHoraSaida), .iCodTranspRedesp, .iDetPagFrete, .iMoeda, .dTaxaMoeda, .dVolumeTotal, .iSemDataSaida, .iNaoImpCobranca, .sMensagemCorpoNota, .iNFe, .dValorDescontoTit, _
            .dValorItens, .dValorDescontoItens, CDbl(IIf(.dtDataSaida <> DATA_NULA, IIf(.dtHoraEmissao <> 0 And .dtHoraEmissao < .dtHoraSaida, .dtHoraEmissao, .dtHoraSaida), IIf(.dtHoraEmissao <> 0 And .dtHoraEmissao < .dtHoraEntrada, .dtHoraEmissao, .dtHoraEntrada))), gdtDataHoje, CDbl(Time), gsUsuario)
        If lErro <> AD_SQL_SUCESSO Then gError 42096

    End With

    lErro = CF("NFiscal_GravaTributacao", objNFiscal, alComando(4), alComando(5))
    If lErro <> SUCESSO Then gError 42097
    
    'Para cada Ítem da Nota Fiscal
    For Each objItemNF In objNFiscal.colItensNF
        
        'Gera o Número Automático
        lErro = CF("NFiscalItem_Automatico", lNumIntItemNF)
        If lErro <> SUCESSO Then gError 42098

        objItemNF.lNumIntNF = lNumIntNF
        objItemNF.lNumIntDoc = lNumIntItemNF

        With objItemNF
            
            'Insere no BD
            lErro = Comando_Executar(alComando(3), "INSERT INTO ItensNFiscal (NumIntNF, Item, Status, Produto, UnidadeMed, Quantidade, Almoxarifado, PrecoUnitario, PercDesc, ValorDesconto, DataEntrega, DescricaoItem, ValorAbatComissao, NumIntPedVenda, NumIntItemPedVenda, NumIntDoc, NumIntTrib, NumIntDocOrig) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", lNumIntNF, .iItem, STATUS_BAIXADO, .sProduto, .sUnidadeMed, .dQuantidade, .iAlmoxarifado, .dPrecoUnitario, .dPercDesc, .dValorDesconto, .dtDataEntrega, .sDescricaoItem, .dValorAbatComissao, .lNumIntPedVenda, .lNumIntItemPedVenda, lNumIntItemNF, .lNumIntTrib, .lNumIntDocOrig)
            If lErro <> AD_SQL_SUCESSO Then gError 42099
        
            lErro = CF("NFiscal_GravaTributacaoItem", objItemNF, alComando(3), alComando(6))
            If lErro <> SUCESSO Then gError 42100
            
            objItemNF.objInfoAdicDocItem.iTipoDoc = TIPODOC_INFOADIC_ITEMNF
            objItemNF.objInfoAdicDocItem.lNumIntDocItem = objItemNF.lNumIntDoc
            lErro = CF("InfoAdicDocItem_Insere", objItemNF.objInfoAdicDocItem, alComando(7))
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        
        End With
        
        lErro = CF("ItensNFGrade_Inclui", objItemNF)
        If lErro <> SUCESSO Then gError 42098
        
        lErro = CF("ItemNFSai_Remessa_Customizado", objNFiscal, objItemNF)
        If lErro <> SUCESSO Then gError 199698
    
    Next

        'gera os movimentos de estoque, se necessários
    lErro = CF("MovEstoque_Gera", alComando3(), alComando4(), objNFiscal)
    If lErro <> SUCESSO Then gError 42098

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    For iIndice = LBound(alComando3) To UBound(alComando3)
        Call Comando_Fechar(alComando3(iIndice))
    Next
    For iIndice = LBound(alComando4) To UBound(alComando4)
        Call Comando_Fechar(alComando4(iIndice))
    Next

    NFiscalRemessa_Grava_BD = SUCESSO

    Exit Function

Erro_NFiscalRemessa_Grava_BD:

    NFiscalRemessa_Grava_BD = gErr

    Select Case gErr

        Case 42094
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 20823, 42095, 42098, 42101, 42103, 42104, 35425, 42097, 42100, 60442, 39221, 199698, 207597 To 207602

        Case 42096
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_NFISCAL1", gErr, objNFiscal.lFornecedor, objNFiscal.iFilialForn, objNFiscal.lCliente, objNFiscal.iFilialCli, objNFiscal.iTipoNFiscal, objNFiscal.sSerie, objNFiscal.lNumNotaFiscal)

        Case 42099
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_ITENSNFISCAL", gErr, objNFiscal.lNumNotaFiscal)

        Case 42102
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TIPO_NFISCAL_NAO_CADASTRADO", gErr, objNFiscal.iTipoNFiscal)
        
        Case 61408 'Tratar a gravação da contabilidade
        
        Case 32251, 32252
            Call Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_NFISCAL_NUMAUTO", gErr)
        
        Case ERRO_SEM_MENSAGEM
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149822)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    For iIndice = LBound(alComando3) To UBound(alComando3)
        Call Comando_Fechar(alComando3(iIndice))
    Next
    For iIndice = LBound(alComando4) To UBound(alComando4)
        Call Comando_Fechar(alComando4(iIndice))
    Next
    Exit Function

End Function

Function NFiscalNum_Automatico(ByVal sSerie As String, lNumAuto As Long) As Long
'Retorna o número do próximo NumNFiscal disponivel

Dim lTransacao As Long
Dim lComando As Long
Dim lComando1 As Long
Dim lErro As Long
Dim lNumNFiscal As Long
Dim lNumNFiscalUsado As Long
Dim iFim_de_Arquivo As Integer

On Error GoTo Erro_NFiscalNum_Automatico

    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 39006

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 30577

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 30579

    'Pesquisa o número do NumNFiscal gerado automaticamente pelo sistema
    lErro = Comando_ExecutarPos(lComando, "SELECT ProxNumNFiscal FROM Serie WHERE Serie = ?", 0, lNumNFiscal, sSerie)
    If lErro <> AD_SQL_SUCESSO Then Error 30582

    'le o registro com o número do NumNFiscal automático
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO Then Error 30583

    'loca o registro que guarda o numero do NumNFiscal gerado automaticamente
    lErro = Comando_LockExclusive(lComando)
    If lErro <> AD_SQL_SUCESSO Then Error 30584

    'verifica se este número ainda não foi utilizado
    'Pesquisa as numerações de NumNFiscal maiores ou iguais a numeração gerada automaticamente
    lErro = Comando_Executar(lComando1, "SELECT NFiscal.NumNotaFiscal FROM NFiscal, TiposDocInfo WHERE NFiscal.NumNotaFiscal >= ? AND NFiscal.TipoNFiscal = TiposDocInfo.Codigo AND TiposDocInfo.Tipo = ? ORDER BY NumNotaFiscal", lNumNFiscalUsado, lNumNFiscal, DOCINFO_NF_INT_SAIDA)
    If lErro <> AD_SQL_SUCESSO Then Error 30585

    'le o primeiro codigo >= ao codigo automatico
    iFim_de_Arquivo = Comando_BuscarPrimeiro(lComando1)

    'pesquisa o proximo número de codigo disponível
    Do While iFim_de_Arquivo <> AD_SQL_SEM_DADOS

        If lNumNFiscal < lNumNFiscalUsado Then Exit Do

        If lNumNFiscalUsado = lNumNFiscal Then
            lNumNFiscal = lNumNFiscal + 1
        End If

        iFim_de_Arquivo = Comando_BuscarProximo(lComando1)

    Loop

    'Valor de retorno da funcao
    lNumAuto = lNumNFiscal

    lNumNFiscal = lNumNFiscal + 1

    'atualiza o numero do NumNFiscal gerado automaticamente
    lErro = Comando_ExecutarPos(lComando1, "UPDATE Serie SET ProxNumNFiscal = ?", lComando, lNumNFiscal)
    If lErro <> AD_SQL_SUCESSO Then Error 30586

    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then Error 39007

    lErro = Comando_Fechar(lComando)
    lErro = Comando_Fechar(lComando1)

    NFiscalNum_Automatico = SUCESSO

    Exit Function

Erro_NFiscalNum_Automatico:

    NFiscalNum_Automatico = Err

    Select Case Err

        Case 39006
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 39007
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case 30577, 30579
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 30582, 30583
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SERIE", Err)

        Case 30584
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_SERIE", Err)

        Case 30585
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL4", Err)

        Case 30586
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SERIE", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149823)

    End Select

    Call Transacao_Rollback
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

'Function NFiscalRemessa_Grava(objNFiscal As ClassNFiscal, objContabil As ClassContabil) As Long
'
'Dim lErro As Long
'Dim alComando(0 To 2) As Long
'Dim lTransacao As Long
'Dim lNumIntDoc As Long
'Dim dtDataEmissao As Date
'Dim vbMsgRes As VbMsgBoxResult
'Dim iIndice As Integer
'
'On Error GoTo Erro_NFiscalRemessa_Grava
'
'    lTransacao = Transacao_Abrir()
'    If lTransacao = 0 Then Error 42059
'
'    'Abre os Comandos
'    For iIndice = LBound(alComando) To UBound(alComando)
'        alComando(iIndice) = Comando_Abrir()
'        If alComando(iIndice) = 0 Then Error 42060
'    Next
'
'    lErro = CF("NFiscalRemessa_Lock_Gravacao",objNFiscal, alComando(1))
'    If lErro <> SUCESSO Then Error 39220
'
'    lErro = CF("NFiscal_TabelaPreco_Lock",alComando(2), objNFiscal)
'    If lErro <> SUCESSO Then Error 51624
'
'    'Faz os "Lock's" relacionados aos itens da NF
'    lErro = CF("ItensNFiscalRem_Lock_Gravacao",objNFiscal)
'    If lErro <> SUCESSO Then Error 42086
'
'    lErro = CF("NFiscalRemessa_Grava_BD",objNFiscal)
'    If lErro <> SUCESSO And lErro <> 61408 Then Error 42087
'
'    If objNFiscal.lFornecedor > 0 Then
'
'        'Grava os dados contábeis (contabilidade)
'        lErro = objContabil.Contabil_Gravar_Registro(objNFiscal.lNumIntDoc, objNFiscal.lFornecedor, objNFiscal.iFilialForn, NAO_AVALIA_PELO_CUSTO_REAL_PRODUCAO, AVISA_LANCAMENTOS_CONTABILIZADOS, objNFiscal.lNumNotaFiscal)
'        If lErro <> SUCESSO Then Error 36503
'
'    Else
'
'        'Grava os dados contábeis (contabilidade)
'        lErro = objContabil.Contabil_Gravar_Registro(objNFiscal.lNumIntDoc, objNFiscal.lCliente, objNFiscal.iFilialCli, NAO_AVALIA_PELO_CUSTO_REAL_PRODUCAO, AVISA_LANCAMENTOS_CONTABILIZADOS, objNFiscal.lNumNotaFiscal)
'        If lErro <> SUCESSO Then Error 36504
'
'    End If
'
'    'Faz o Commit da Transação
'    lErro = Transacao_Commit()
'    If lErro <> AD_SQL_SUCESSO Then Error 42088
'
'    'Fecha os comanos
'    For iIndice = LBound(alComando) To UBound(alComando)
'        Call Comando_Fechar(alComando(iIndice))
'    Next
'
'    NFiscalRemessa_Grava = SUCESSO
'
'    Exit Function
'
'Erro_NFiscalRemessa_Grava:
'
'    NFiscalRemessa_Grava = Err
'
'    Select Case Err
'
'        Case 36503, 36504, 39220, 42086, 42087, 51624
'
'        Case 42059
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
'
'        Case 42060
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
'
'        Case 42088
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
'
'        Case Else
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149824)
'
'    End Select
'
'    Call Transacao_Rollback
'    For iIndice = LBound(alComando) To UBound(alComando)
'        Call Comando_Fechar(alComando(iIndice))
'    Next
'
'    Exit Function
'
'End Function

Public Function Serie_Grava_Trans(ByVal objSerie As ClassSerie, Optional ByVal bExibeMsg As Boolean = True) As Long

Dim lErro As Long
Dim lComando(2) As Long
Dim lCodEndereco As Long
Dim iIndice As Integer
Dim tSerie As typeSerie
Dim iCodigo  As Integer
Dim objNFiscal As New ClassNFiscal
Dim vbMsgRes As VbMsgBoxResult, iMaxLinhasNF As Integer

On Error GoTo Erro_Serie_Grava_Trans

    'Abre os  comandos
    For iIndice = 0 To 1
        lComando(iIndice) = Comando_Abrir()
        If lComando(iIndice) = 0 Then Error 22203
    Next

    tSerie.sNomeTsk = String(STRING_NOME_TSK, 0)
    
    If objSerie.iFilialEmpresa = 0 Then
        objSerie.iFilialEmpresa = giFilialEmpresa
    End If
    
    'Lê a Serie no BD
    lErro = Comando_ExecutarPos(lComando(0), "SELECT MaxLinhasNF, ProxNumNFiscal, TipoFormulario, NomeTsk, Eletronica, ModDocFis FROM Serie WHERE FilialEmpresa = ? AND Serie = ?", 0, iMaxLinhasNF, tSerie.lProxNumNFiscal, tSerie.iTipoFormulario, tSerie.sNomeTsk, tSerie.iEletronica, tSerie.iModDocFis, objSerie.iFilialEmpresa, objSerie.sSerie)
    If lErro <> AD_SQL_SUCESSO Then Error 22205

    'Tenta ler
    lErro = Comando_BuscarPrimeiro(lComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 22206

    'Serie não existe - CRIACAO
    If lErro = AD_SQL_SEM_DADOS Then

'        'Preenche FilialEmpresa de objSerie
'        objSerie.iFilialEmpresa = giFilialEmpresa

        'Insere a Serie na tabela Serie
        lErro = Comando_Executar(lComando(1), "INSERT INTO Serie (FilialEmpresa, Serie, ProxNumNFiscal, TipoFormulario, NomeTsk, MaxLinhasNF, Eletronica, ModDocFis) VALUES (?,?,?,?,?,?,?,?)", objSerie.iFilialEmpresa, objSerie.sSerie, objSerie.lProxNumNFiscal, objSerie.iTipoFormulario, objSerie.sNomeTsk, objSerie.iMaxLinhasNF, objSerie.iEletronica, objSerie.iModDocFis)
        If lErro <> AD_SQL_SUCESSO Then Error 22207

    Else 'Serie existe - ALTERACAO
        
        lErro = Comando_LockExclusive(lComando(0))
        If lErro <> AD_SQL_SUCESSO Then Error 60432
        
        lErro = CF("Serie_Grava_Trans_Aux", objSerie, iMaxLinhasNF)
        If lErro <> AD_SQL_SUCESSO Then Error 32307
        
        If objSerie.lProxNumNFiscal <> tSerie.lProxNumNFiscal Or objSerie.iTipoFormulario <> tSerie.iTipoFormulario Or objSerie.sNomeTsk <> tSerie.sNomeTsk Or objSerie.iMaxLinhasNF <> iMaxLinhasNF Or objSerie.iEletronica <> tSerie.iEletronica Or objSerie.iModDocFis <> tSerie.iModDocFis Then
            
            'faz os teste para Nota Fiscal
            objNFiscal.iFilialEmpresa = objSerie.iFilialEmpresa
            objNFiscal.sSerie = objSerie.sSerie
            objNFiscal.lNumNotaFiscal = objSerie.lProxNumNFiscal
            
            'Verifica se já existe Nota Fiscal cadastrada maior ou igual a esse Numero (com Data mais recente)
            lErro = NFiscal_Verifica_Numero_Maior(objNFiscal)
            If lErro <> SUCESSO And lErro <> 60427 Then Error 60433
            
            'Avisa o Usuario
            If lErro = SUCESSO And bExibeMsg Then
            
                vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_EXISTE_NF_MAIOR_OU_IGUAL", objNFiscal.sSerie, objNFiscal.lNumNotaFiscal, objNFiscal.dtDataEmissao, objNFiscal.iFilialEmpresa)
                If vbMsgRes = vbNo Then Error 60434
                
            End If
            
            Set objNFiscal = New ClassNFiscal
            
            objNFiscal.iFilialEmpresa = objSerie.iFilialEmpresa
            objNFiscal.sSerie = objSerie.sSerie
            
            'Lê a Ultima Nota Cadastrada no Sistema
            lErro = CF("NFiscal_Le_UltimaCadastrada", objNFiscal)
            If lErro <> SUCESSO And lErro <> 60431 Then Error 60435
            
            'Se encontrou última nota cadastrada
            If lErro = SUCESSO And bExibeMsg Then
                
                'Avisa ao Usuario
                vbMsgRes = Rotina_Aviso(vbOKOnly, "AVISO_NF_ULTIMA_GRAVADA", objNFiscal.sSerie, objNFiscal.lNumNotaFiscal, objNFiscal.dtDataEmissao, objNFiscal.iFilialEmpresa)

            End If
                            
            'Atualiza ProxNumNFiscal na tabela de Serie
            lErro = Comando_ExecutarPos(lComando(1), "UPDATE Serie SET ProxNumNFiscal = ?, TipoFormulario = ?, NomeTsk = ?, MaxLinhasNF = ?, Eletronica = ?, ModDocFis = ?", lComando(0), objSerie.lProxNumNFiscal, objSerie.iTipoFormulario, objSerie.sNomeTsk, objSerie.iMaxLinhasNF, objSerie.iEletronica, objSerie.iModDocFis)
            If lErro <> AD_SQL_SUCESSO Then Error 22208
                    
        End If
        
    End If
    
    'Fecha os comandos
    For iIndice = 0 To 1
        lErro = Comando_Fechar(lComando(iIndice))
    Next

    Serie_Grava_Trans = SUCESSO

    Exit Function

Erro_Serie_Grava_Trans:

    Serie_Grava_Trans = Err

    Select Case Err

        Case 22204
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 22203
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 22205, 22206
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SERIE", Err)

        Case 22207
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_SERIE", Err)

        Case 22209
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case 22208
            lErro = Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_SERIE", Err)
        
        Case 60432
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_SERIE", Err)
        
        Case 60433, 60435, 32307 'Erros já Tratados nas Rotinas Chamadas
        
        Case 60434 'Caso desista de Gravar a Nota Fiscal
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149825)

    End Select

    For iIndice = 0 To 2
        Call Comando_Fechar(lComando(iIndice))
    Next

    Exit Function

End Function

Function Serie_Grava(ByVal objSerie As ClassSerie, bPadrao As Boolean) As Long
'Grava a Serie no BD, se o bPadrão for True então grava a série como padrão em FatConfig

Dim lErro As Long
Dim lTransacao As Long
Dim objFATConfig As New ClassFATConfig
Dim alComando1(2) As Long
Dim iIndice As Integer
Dim sSeriePadrao As String
Dim vbMsgRes As VbMsgBoxResult

On Error GoTo Erro_Serie_Grava

    'Abre os  comandos para a Gravacao do Config
    For iIndice = 0 To 2
        alComando1(iIndice) = Comando_Abrir()
        If alComando1(iIndice) = 0 Then Error 22203
    Next

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 22204
    
    'Grava a Série no BD
    lErro = CF("Serie_Grava_Trans", objSerie)
    If lErro <> SUCESSO Then Error 64113
            
    lErro = CF("Serie_Le_Padrao", sSeriePadrao)
    If lErro <> SUCESSO Then Error 64119
    
    If bPadrao = False And sSeriePadrao = objSerie.sSerie Then Error 64120
    
    'Se é a primeira sSérie então
    If bPadrao = False And sSeriePadrao = "" Then
        
        'Dá o aviso e marca para a Gravação
        vbMsgRes = Rotina_Aviso(vbOKOnly, "AVISO_SERIE_GRAVADA_PADRAO", objSerie.sSerie)
        bPadrao = True
        
    End If
    
    'Se a Série é a Nova Padrão
    If bPadrao = True Then
                
        'Grava a padrão no FatConfig
        objFATConfig.iFilialEmpresa = giFilialEmpresa
        objFATConfig.sCodigo = FATCFG_SERIE_PADRAO
        objFATConfig.sConteudo = objSerie.sSerie
    
        lErro = FATConfig_Grava_Trans(objFATConfig, alComando1)
        If lErro <> SUCESSO Then Error 64114
    
    End If
    
    'Confirma a Transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 22209

    For iIndice = 0 To 2
        Call Comando_Fechar(alComando1(iIndice))
    Next

    Serie_Grava = SUCESSO

    Exit Function

Erro_Serie_Grava:

    Serie_Grava = Err

    Select Case Err
    
        Case 22203
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 22204
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 64113, 64114, 64119
                
        Case 22209
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
        
        Case 64120
            lErro = Rotina_Erro(vbOKOnly, "ERRO_SERIE_SEM_PADRAO", Err, objSerie.sSerie)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149826)

    End Select

    Call Transacao_Rollback

    For iIndice = 0 To 2
        Call Comando_Fechar(alComando1(iIndice))
    Next

    Exit Function

End Function

Function Serie_Exclui(ByVal objSerie As ClassSerie) As Long
'Exclui a Serie

Dim lErro As Long
Dim lComando(2) As Long
Dim lTransacao As Long
Dim colCodNotasFiscais As New Collection
Dim lTotal As Long
Dim iIndice As Integer
Dim sSerie As String
Dim objFATConfig As New ClassFATConfig

On Error GoTo Erro_Serie_Exclui

    'Abre comandos
    For iIndice = 0 To 1
        lComando(iIndice) = Comando_Abrir()
        If lComando(iIndice) = 0 Then gError 22189
    Next

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 22190

    sSerie = String(STRING_SERIE, 0)

    'Seleciona a Serie a ser excluida
    lErro = Comando_ExecutarPos(lComando(0), "SELECT Serie FROM Serie WHERE FilialEmpresa = ? AND Serie =?", 0, sSerie, giFilialEmpresa, objSerie.sSerie)
    If lErro <> AD_SQL_SUCESSO Then gError 22191

    'Tenta ler
    lErro = Comando_BuscarPrimeiro(lComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 22192
    
    If lErro = AD_SQL_SEM_DADOS Then gError 22193

    'Lock da Serie
    lErro = Comando_LockExclusive(lComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 22194

    'Verifica se Serie esta relacionada com Notas Fiscais
    lErro = NFs_Serie_Nao_Relacionada(sSerie)
    If lErro <> SUCESSO Then gError 22195
    
    'Se a série é a Padrão, atualiza FatConfig
    lErro = Trata_Serie_Padrao(objSerie.sSerie)
    If lErro <> SUCESSO Then gError 500177
    
    'Exclui a Serie
    lErro = Comando_ExecutarPos(lComando(1), "DELETE FROM Serie", lComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 22197
        
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 22198

    'Fecha os comandos
    For iIndice = 0 To 1
        lErro = Comando_Fechar(lComando(iIndice))
    Next

    Serie_Exclui = SUCESSO

    Exit Function

Erro_Serie_Exclui:

    Serie_Exclui = gErr

    Select Case gErr

        'Tratado na rotina chamada
        Case 22195, 22196, 500177

        Case 22194
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_SERIE", gErr)

        Case 22189
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 22190
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 22191, 22192
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SERIE", gErr)

        Case 22193
            lErro = Rotina_Erro(vbOKOnly, "ERRO_SERIE_NAO_CADASTRADA", gErr, objSerie.sSerie)

        Case 22197
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_SERIE", gErr, objSerie.sSerie)

        Case 22198
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149827)

    End Select

    Call Transacao_Rollback

    For iIndice = 0 To 1
        Call Comando_Fechar(lComando(iIndice))
    Next

    Exit Function

End Function

Function Trata_Serie_Padrao(ByVal sSerie As String) As Long
'Verifica se a série passada é a padrão e se for, exclui ela de FatConfig
    
Dim lErro As Long
Dim sSeriePadrao As String
Dim objFATConfig As New ClassFATConfig
Dim alComando(0 To 2) As Long
Dim iIndice As Integer

On Error GoTo Erro_Trata_Serie_Padrao
    
    'Abertura comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 500178
    Next
    
    'Verifica se a série padrão é igual a série passada
    lErro = CF("Serie_Le_Padrao", sSeriePadrao)
    If lErro <> SUCESSO Then gError 500179
            
    'Se é igual
    If sSerie = sSeriePadrao Then
    
        'Grava a padrão no FatConfig
        objFATConfig.iFilialEmpresa = giFilialEmpresa
        objFATConfig.sCodigo = FATCFG_SERIE_PADRAO
        objFATConfig.sConteudo = ""
    
        lErro = FATConfig_Grava_Trans(objFATConfig, alComando)
        If lErro <> SUCESSO Then gError 500179
    
    End If
    
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next
    
    Trata_Serie_Padrao = SUCESSO
    
    Exit Function

Erro_Trata_Serie_Padrao:

    Select Case gErr
    
        Case 500178
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 500179
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149828)
    
    End Select
    
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function
    
End Function

Private Function NFs_Serie_Nao_Relacionada(ByVal sSerie As String) As Long
'Verifica se Serie está relacionada com Notas Fiscais emitidas pela Empresa (pendentes, lançadas ou baixadas)

Dim lErro As Long, lComando As Long, lNumIntDoc As Long
Dim iEmitenteEmpresa As Integer
Dim lNumNF As Long
Dim iFilialEmpresaNF As Integer

On Error GoTo Erro_NFs_Serie_Nao_Relacionada

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 27487

    iEmitenteEmpresa = EMITENTE_EMPRESA

'mario 2/7/99 Remover NFiscalBaixada comando reposicionado devido a retirada do codigo abaixo
'    lErro = Comando_Executar(lComando, "SELECT NFiscal.NumIntDoc FROM NFiscal, TiposDocInfo WHERE NFiscal.TipoNFiscal = TiposDocInfo.Codigo AND TiposDocInfo.Emitente = ? AND NFiscal.FilialEmpresa = ? AND NFiscal.Serie = ? UNION SELECT NFiscalBaixadas.NumIntDoc FROM NFiscalBaixadas, TiposDocInfo WHERE NFiscalBaixadas.TipoNFiscal = TiposDocInfo.Codigo AND TiposDocInfo.Emitente = ? AND NFiscalBaixadas.FilialEmpresa = ? AND NFiscalBaixadas.Serie = ?", lNumIntDoc, iEmitenteEmpresa, giFilialEmpresa, sSerie, iEmitenteEmpresa, giFilialEmpresa, sSerie)
'    If lErro <> AD_SQL_SUCESSO Then Error 27488

    lErro = Comando_Executar(lComando, "SELECT NFiscal.NumIntDoc, NFiscal.NumNotaFiscal, NFiscal.FilialEmpresa FROM NFiscal, TiposDocInfo WHERE NFiscal.TipoNFiscal = TiposDocInfo.Codigo AND TiposDocInfo.Emitente = ? AND NFiscal.FilialEmpresa = ? AND NFiscal.Serie = ?", lNumIntDoc, lNumNF, iFilialEmpresaNF, iEmitenteEmpresa, giFilialEmpresa, sSerie)
    If lErro <> AD_SQL_SUCESSO Then Error 27488

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 27489
    
    'Se achou alguma nota relacionada
    If lErro = AD_SQL_SUCESSO Then Error 27490
        
    lErro = Comando_Fechar(lComando)
    
    NFs_Serie_Nao_Relacionada = SUCESSO

    Exit Function

Erro_NFs_Serie_Nao_Relacionada:

    NFs_Serie_Nao_Relacionada = Err

    Select Case Err

        Case 27487
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
                    
        Case 27488, 27489
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NOTAS_FISCAIS_SERIE", Err)
        
        Case 27490 'achou alguma nota relacionada
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXISTEM_NOTAS_FISCAIS_SERIE", Err, lNumNF, iFilialEmpresaNF)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149829)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function FAT_Instalacao_Filial(ByVal iFilialEmpresa As Integer) As Long
'faz as inicializacoes necessarias à criacao de uma nova filial especificas do modulo

Dim lErro As Long, lComando As Long

On Error GoTo Erro_FAT_Instalacao_Filial

    'a matriz já vem pré-inicializada
    If iFilialEmpresa <> FILIAL_MATRIZ Then
        
        lComando = Comando_Abrir()
        If lComando = 0 Then Error 41924
            
        lErro = Comando_Executar(lComando, "INSERT INTO FATConfig (Codigo,FilialEmpresa,Descricao,Tipo,Conteudo) VALUES (?,?,?,?,?)", "FILIAL_FATURAMENTO", iFilialEmpresa, "Filial de Faturamento default para Pedidos de Venda", 1, CStr(iFilialEmpresa))
        If lErro <> AD_SQL_SUCESSO Then Error 41925
        
        lErro = Comando_Executar(lComando, "INSERT INTO FATConfig (Codigo,FilialEmpresa,Descricao,Tipo,Conteudo) VALUES (?,?,?,?,?)", "NUM_PROX_CODIGO_PEDVENDA", iFilialEmpresa, "Número do próximo código de Pedido de Venda", 2, "1")
        If lErro <> AD_SQL_SUCESSO Then Error 41926
                
        lErro = Comando_Executar(lComando, "INSERT INTO FATConfig (Codigo,FilialEmpresa,Descricao,Tipo,Conteudo) VALUES (?,?,?,?,?)", "SERIE_PADRAO", iFilialEmpresa, "Série default", 0, "")
        If lErro <> AD_SQL_SUCESSO Then Error 64111
                
        Call Comando_Fechar(lComando)
    
    End If
    
    FAT_Instalacao_Filial = SUCESSO
     
    Exit Function
    
Erro_FAT_Instalacao_Filial:

    FAT_Instalacao_Filial = Err
     
    Select Case Err
          
        Case 41924
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 41925, 41926, 64111
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_ARQCONFIG", Err)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149830)
     
    End Select
     
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function FATConfig_Grava_Configs1(ByVal objFAT As ClassFAT) As Long
'grava na tabela FATConfig uma colecao de registros de configuracao

Dim lErro As Long, iIndice As Integer
Dim lTransacao As Long
Dim colConfigs As New ColFATConfig
Dim colConfigs1 As New ColCRFATConfig

On Error GoTo Erro_FATConfig_Grava_Configs1
    
    'abrir transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 55007
    
    Call objFAT.Preenche_ColConfig(colConfigs)
    
    lErro = CF("FATConfig_Grava_Configs_Trans", colConfigs)
    If lErro <> SUCESSO Then Error 55008
    
     'fechar transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 55010
    
    FATConfig_Grava_Configs1 = SUCESSO
    
    Exit Function
    
Erro_FATConfig_Grava_Configs1:
    
    FATConfig_Grava_Configs1 = Err
    
    Select Case Err
    
        Case 55007
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
    
        Case 55008, 55009
        
        Case 55010
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149831)
            
    End Select
    
    Call Transacao_Rollback
    
    Exit Function
    
End Function

'Maristela (Inicio) Alteração: Não inclui mais as Datas da tabela FilialClienteFilEmp
Function FilialCliente_Grava_Estatistica(ByVal objNFiscal As ClassNFiscal) As Long
'Tem que ser chamado dentro de Transação
'Atualiza as estatísticas do Cliente

Dim lErro As Long
Dim objTipoDocInfo As New ClassTipoDocInfo
Dim objFilCliFilEmp As New ClassFilCliFilEmp
Dim lComando As Long
Dim lComando2 As Long
Dim lComando3 As Long

On Error GoTo Erro_FilialCliente_Grava_Estatistica

    'Inicializa comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 52534

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 52535
    
    lComando3 = Comando_Abrir()
    If lComando3 = 0 Then Error 52538
    
    objTipoDocInfo.iCodigo = objNFiscal.iTipoNFiscal

    lErro = CF("TipoDocInfo_Le_Codigo", objTipoDocInfo)
    If lErro <> SUCESSO Then Error 52536
    
    'Trata-se de uma nota fiscal de venda
    If (objTipoDocInfo.iFaturamento = TIPODOCINFO_FATURAVEL) And (objTipoDocInfo.iComplementar = DOCINFO_NORMAL) Then
        
        objFilCliFilEmp.lCodCliente = objNFiscal.lCliente
        objFilCliFilEmp.iFilialEmpresa = objNFiscal.iFilialEmpresa
        objFilCliFilEmp.iCodFilial = objNFiscal.iFilialCli
        
        'Lê e locka FilialClienteFilEmp
        lErro = CF("FilCliFilEmp_Le_Lock", lComando, objFilCliFilEmp)
        If lErro <> SUCESSO And lErro <> 52542 Then Error 52537
        
        'se não encontrou
        If lErro = 52542 Then
            'Maristela
            'Insere na tabela de FilialClienteFilEmp
            lErro = Comando_Executar(lComando3, "INSERT INTO FilialClienteFilEmp (FilialEmpresa, CodCliente, CodFilial, NumeroCompras ,MediaCompra, ValorAcumuladoCompras) VALUES (?,?,?,?,?,?)", objNFiscal.iFilialEmpresa, objNFiscal.lCliente, objNFiscal.iFilialCli, 1, objNFiscal.dValorTotal, objNFiscal.dValorTotal)
            If lErro <> AD_SQL_SUCESSO Then Error 52587
            'Maristela
        'se encontrou
        Else
            'recalcula os valores
            objFilCliFilEmp.dValorAcumuladoCompras = objFilCliFilEmp.dValorAcumuladoCompras + objNFiscal.dValorTotal
            objFilCliFilEmp.lNumeroCompras = objFilCliFilEmp.lNumeroCompras + 1
            objFilCliFilEmp.dMediaCompra = objFilCliFilEmp.dValorAcumuladoCompras / objFilCliFilEmp.lNumeroCompras
            
            'Maristela
            'Atualiza a tabela de FilialClienteFilEmp
            lErro = Comando_ExecutarPos(lComando2, "UPDATE FilialClienteFilEmp SET NumeroCompras =?,MediaCompra=?, ValorAcumuladoCompras=?", lComando, objFilCliFilEmp.lNumeroCompras, objFilCliFilEmp.dMediaCompra, objFilCliFilEmp.dValorAcumuladoCompras)
            If lErro <> AD_SQL_SUCESSO Then Error 52539
            'Maristela
        End If
    
    End If
    
    'Libera comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)

    FilialCliente_Grava_Estatistica = SUCESSO

    Exit Function

Erro_FilialCliente_Grava_Estatistica:

    FilialCliente_Grava_Estatistica = Err
    
    Select Case Err

        Case 52534, 52535, 52538
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 52536, 52537
        
        Case 52539
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_FILIALCLIENTEFILEMP", Err)
        
        Case 52587
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERIR_FILIALCLIENTEFILEMP", Err)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149832)

    End Select
        
    'Libera comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)

    Exit Function

End Function
'Maristela (Fim)

Function ProdutoVendido_Grava_Estatisticas(ByVal objNFiscal As ClassNFiscal, ByVal iCancelamento As Integer) As Long
'Grava a estatística dos produtos vendidos

Dim objTipoDocInfo As New ClassTipoDocInfo
Dim lErro As Long

On Error GoTo Erro_ProdutoVendido_Grava_Estatisticas

    objTipoDocInfo.iCodigo = objNFiscal.iTipoNFiscal
    
    'Le o tipo do produto
    lErro = CF("TipoDocInfo_Le_Codigo", objTipoDocInfo)
    If lErro <> SUCESSO Then Error 52714
    
    'verifica se é Notafiscal de venda    'Alterado por Leo em 14/02/02
    If (objTipoDocInfo.iFaturamento = TIPODOCINFO_FATURAMENTO_SIM Or objTipoDocInfo.iFaturamento = TIPODOCINFO_FATURAMENTO_DEV) And (objTipoDocInfo.iComplementar = DOCINFO_NORMAL Or (objTipoDocInfo.iCodigo = DOCINFO_NFISCP Or objTipoDocInfo.iCodigo = DOCINFO_NFISFCP)) Then
        
        'Grava a estatistica do Dia do produto
        lErro = SldDiaFat_Grava_Est(objNFiscal, objTipoDocInfo, iCancelamento)
        If lErro <> SUCESSO Then Error 52715
        
        'Grava a estatística do Mês do produto
        lErro = SldMesFat_Grava_Est(objNFiscal, objTipoDocInfo, iCancelamento)
        If lErro <> SUCESSO Then Error 52716
    
    End If
            
    ProdutoVendido_Grava_Estatisticas = SUCESSO
    
    Exit Function
    
Erro_ProdutoVendido_Grava_Estatisticas:
    
    ProdutoVendido_Grava_Estatisticas = Err

    Select Case Err
        
        Case 52714, 52715, 52716 'Tratado nas rotinas chamadas
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149833)

    End Select

    Exit Function

End Function

Private Function SldDiaFat_Grava_Est(ByVal objNFiscal As ClassNFiscal, ByVal objTipoDocInfo As ClassTipoDocInfo, ByVal iCancelamento As Integer) As Long
'Grava a estatística do Dia do produto

Dim lErro As Long
Dim objItemNF As New ClassItemNF
Dim objItemRomaneio As ClassItemRomaneioGrade
Dim objSldDiaFat As New ClassSldDiaFat
Dim dQuantUMVenda As Double
Dim dFator As Double
Dim lComando As Long, lComando2 As Long, lComando3 As Long
Dim objProduto As New ClassProduto
Dim sUMVenda As String
Dim iIndice As Integer
Dim iClasseUM As Integer
Dim sProduto As String
Dim dValorTotal As Double
Dim dValorDesconto As Double
Dim objProdutoINF As ClassProduto

On Error GoTo Erro_SldDiaFat_Grava_Est
        
    'Inicializa comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 52717

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then gError 52718
            
    lComando3 = Comando_Abrir()
    If lComando3 = 0 Then gError 52974
            
    'Para cada objItemNf
    For Each objItemNF In objNFiscal.colItensNF
    
        Set objProdutoINF = New ClassProduto
        objProdutoINF.sCodigo = objItemNF.sProduto
        lErro = CF("Produto_Le", objProdutoINF)
        If lErro <> SUCESSO And lErro <> 28030 Then gError ERRO_SEM_MENSAGEM
        
        For iIndice = 0 To objItemNF.colItensRomaneioGrade.Count
        
            If objItemNF.colItensRomaneioGrade.Count = 0 Or (objItemNF.iPossuiGrade = 0 And objProdutoINF.iKitVendaComp <> MARCADO) Then
                sUMVenda = objItemNF.sUMVenda
                dQuantUMVenda = objItemNF.dQuantidade
                sProduto = objItemNF.sProduto
                dValorTotal = objItemNF.dValorTotal
                dValorDesconto = objItemNF.dValorDesconto
            Else
                If iIndice = 0 Then iIndice = iIndice + 1
                dQuantUMVenda = objItemNF.colItensRomaneioGrade(iIndice).dQuantidade
                sProduto = objItemNF.colItensRomaneioGrade(iIndice).sProduto
                
                If objProdutoINF.iKitVendaComp <> MARCADO Then
                    dValorTotal = (objItemNF.colItensRomaneioGrade(iIndice).dQuantidade * objItemNF.dPrecoUnitario) * (1 - objItemNF.dPercDesc)
                    dValorDesconto = (objItemNF.colItensRomaneioGrade(iIndice).dQuantidade * objItemNF.dPrecoUnitario) * (objItemNF.dPercDesc)
                Else
                    'Não tem informações para ratear o preço => então dividi igual entre os itens
                    '????
                    dValorTotal = ((objItemNF.dQuantidade * objItemNF.dPrecoUnitario) * (1 - objItemNF.dPercDesc)) / objItemNF.colItensRomaneioGrade.Count
                    dValorDesconto = ((objItemNF.dQuantidade * objItemNF.dPrecoUnitario) * (objItemNF.dPercDesc)) / objItemNF.colItensRomaneioGrade.Count
                End If
                
                Set objProduto = New ClassProduto
                
                objProduto.sCodigo = sProduto
                
                lErro = CF("Produto_Le", objProduto)
                '??? Tratar SHirley
                
                sUMVenda = objProduto.sSiglaUMVenda
            End If
            'Converte as unidades de medida
            
            If objProdutoINF.iKitVendaComp <> MARCADO Then
                lErro = CF("UM_Conversao", objItemNF.iClasseUM, objItemNF.sUnidadeMed, sUMVenda, dFator)
            Else
                lErro = CF("UM_Conversao", objProduto.iClasseUM, objProduto.sSiglaUMEstoque, objProduto.sSiglaUMVenda, dFator)
            End If
            If lErro <> SUCESSO Then gError 52720
        
            'Quantidade convertida
            dQuantUMVenda = dQuantUMVenda * dFator
                
            Set objSldDiaFat = New ClassSldDiaFat
            
            objSldDiaFat.iFilialEmpresa = objNFiscal.iFilialEmpresa
            objSldDiaFat.dtData = objNFiscal.dtDataEmissao
            objSldDiaFat.sProduto = sProduto
                
            'Lê todos os atributos na tabela SldDiaFat e faza lock exclusive
            lErro = CF("SldDiaFat_Le_Lock", lComando, objSldDiaFat)
            If lErro <> SUCESSO And lErro <> 52729 Then gError 52719
                            
            If (objTipoDocInfo.iFaturamento = TIPODOCINFO_FATURAMENTO_SIM) Then
              
                If iCancelamento = CANCELAMENTO_DOC Then
                    
                    objSldDiaFat.dValorFaturado = -dValorTotal
                    objSldDiaFat.dTotalDescontos = -dValorDesconto
                                
                'Trecho alterado por Leo em 14/02/02
                    'Se for uma Nota de complemento de preço
                    If objTipoDocInfo.iComplementar = DOCINFO_COMPLEMENTO Then
                        'Não altera a quantidade
                        objSldDiaFat.dQuantFaturada = 0
                    Else
                        objSldDiaFat.dQuantFaturada = -dQuantUMVenda
                    End If
                
                Else
            
                    objSldDiaFat.dValorFaturado = dValorTotal
                    objSldDiaFat.dTotalDescontos = dValorDesconto
                    
                    'Se for uma Nota de complemento de preço
                    If objTipoDocInfo.iComplementar = DOCINFO_COMPLEMENTO Then
                        'Não altera a quantidade
                        objSldDiaFat.dQuantFaturada = 0
                    Else
                        objSldDiaFat.dQuantFaturada = dQuantUMVenda
                    End If
                
                'Leo até aqui
                
                End If
            
            ElseIf objTipoDocInfo.iFaturamento = TIPODOCINFO_FATURAMENTO_DEV Then
            
                If iCancelamento = CANCELAMENTO_DOC Then
                    
                    objSldDiaFat.dValorDevolvido = -dValorTotal
                    objSldDiaFat.dQuantDevolvida = -dQuantUMVenda
                    
                Else
                
                    objSldDiaFat.dValorDevolvido = dValorTotal
                    objSldDiaFat.dQuantDevolvida = dQuantUMVenda
                
                End If
            
            End If
                            
            If lErro = SUCESSO Then 'Registro SldDiaFat existe no BD
                    
            'Trecho alterado por Leo em 14/02/02
                    
                'Verifica se o documento é TIPODOCINFO_FATURAMENTO_SIM
                If objTipoDocInfo.iFaturamento = TIPODOCINFO_FATURAMENTO_SIM Then
                
                    'Atualiza os campos referentes a notas de faturamneto em SldDiaFat
                    lErro = Comando_ExecutarPos(lComando2, "UPDATE SldDiaFat SET ValorFaturado = ValorFaturado + ?, QuantFaturada = QuantFaturada + ?, TotalDescontos = TotalDescontos + ?, ValorDevolvido = ?, QuantDevolvida = ?", lComando, objSldDiaFat.dValorFaturado, objSldDiaFat.dQuantFaturada, objSldDiaFat.dTotalDescontos, objSldDiaFat.dValorDevolvido, objSldDiaFat.dQuantDevolvida)
                    If lErro <> AD_SQL_SUCESSO Then gError 52721
            
                ElseIf objTipoDocInfo.iFaturamento = TIPODOCINFO_FATURAMENTO_DEV Then
                
                    'Atualiza os campos referentes a notas de devolução em SldDiaFat
                    lErro = Comando_ExecutarPos(lComando2, "UPDATE SldDiaFat SET ValorFaturado = ?, QuantFaturada = ?, TotalDescontos = ?, ValorDevolvido = ValorDevolvido + ?, QuantDevolvida = QuantDevolvida + ?", lComando, objSldDiaFat.dValorFaturado, objSldDiaFat.dQuantFaturada, objSldDiaFat.dTotalDescontos, objSldDiaFat.dValorDevolvido, objSldDiaFat.dQuantDevolvida)
                    If lErro <> AD_SQL_SUCESSO Then gError 94323
            
                End If
                
            'Leo até aqui
            
            Else 'Registro SldDiaFat não existe no BD
    
                If objNFiscal.iFilialEmpresa = 0 Then objNFiscal.iFilialEmpresa = giFilialEmpresa
                
                lErro = Comando_Executar(lComando3, "INSERT INTO SldDiaFat (FilialEmpresa, Data, Produto, ValorFaturado , QuantFaturada, TotalDescontos, ValorDevolvido, QuantDevolvida) VALUES (?,?,?,?,?,?,?,?)", objNFiscal.iFilialEmpresa, objNFiscal.dtDataEmissao, sProduto, objSldDiaFat.dValorFaturado, objSldDiaFat.dQuantFaturada, objSldDiaFat.dTotalDescontos, objSldDiaFat.dValorDevolvido, objSldDiaFat.dQuantDevolvida)
                If lErro <> AD_SQL_SUCESSO Then gError 52972
                    
                        
            End If
        
            If objItemNF.colItensRomaneioGrade.Count = 0 Or (objItemNF.iPossuiGrade = 0 And objProdutoINF.iKitVendaComp <> MARCADO) Then Exit For
            
        Next
        
    Next
    
    'Libera comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)
    
    SldDiaFat_Grava_Est = SUCESSO
    
    Exit Function
    
Erro_SldDiaFat_Grava_Est:
    
    SldDiaFat_Grava_Est = gErr

    Select Case gErr
        
        Case 52717, 52718, 52974
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 52719, 52720, 52779 'Tratados nas rotinas chamadas
        
        Case 52721, 94323
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SLDDIAFAT", gErr, objSldDiaFat.iFilialEmpresa, objSldDiaFat.sProduto, objSldDiaFat.dtData)
        
        Case 52972, 89786
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_SLDDIAFAT", gErr, giFilialEmpresa, objItemNF.sProduto, objNFiscal.dtDataEmissao)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149834)

    End Select
        
    'Libera comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)
    
    Exit Function

End Function
        
Private Function SldMesFat_Grava_Est(ByVal objNFiscal As ClassNFiscal, ByVal objTipoDocInfo As ClassTipoDocInfo, ByVal iCancelamento As Integer) As Long
'Grava a estatística do Mês do produto

Dim lErro As Long
Dim objItemNF As ClassItemNF
Dim objSldMesFat As New ClassSldMesFat
Dim iMes As Integer
Dim dFator As Double
Dim dQuantUMVenda As Double
Dim sMes As String
Dim lComando As Long, lComando2 As Long, lComando3 As Long
Dim objProduto As New ClassProduto
Dim sUMVenda As String
Dim iIndice As Integer
Dim iClasseUM As Integer
Dim sProduto As String
Dim dValorTotal As Double
Dim dValorDesconto As Double
Dim objProdutoINF As ClassProduto

On Error GoTo Erro_SldMesFat_Grava_Est
    
    'Inicializa comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 52722

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then gError 52723
                
    lComando3 = Comando_Abrir()
    If lComando3 = 0 Then gError 52975
            
    'Para cada objItemNf
    For Each objItemNF In objNFiscal.colItensNF
        
        Set objProdutoINF = New ClassProduto
        objProdutoINF.sCodigo = objItemNF.sProduto
        lErro = CF("Produto_Le", objProdutoINF)
        If lErro <> SUCESSO And lErro <> 28030 Then gError ERRO_SEM_MENSAGEM
        
        For iIndice = 0 To objItemNF.colItensRomaneioGrade.Count
        
            If objItemNF.colItensRomaneioGrade.Count = 0 Or (objItemNF.iPossuiGrade = 0 And objProdutoINF.iKitVendaComp <> MARCADO) Then
                sUMVenda = objItemNF.sUMVenda
                dQuantUMVenda = objItemNF.dQuantidade
                sProduto = objItemNF.sProduto
                dValorTotal = objItemNF.dValorTotal
                dValorDesconto = objItemNF.dValorDesconto
            Else
                If iIndice = 0 Then iIndice = iIndice + 1
                dQuantUMVenda = objItemNF.colItensRomaneioGrade(iIndice).dQuantidade
                sProduto = objItemNF.colItensRomaneioGrade(iIndice).sProduto
                
                If objProdutoINF.iKitVendaComp <> MARCADO Then
                    dValorTotal = (objItemNF.colItensRomaneioGrade(iIndice).dQuantidade * objItemNF.dPrecoUnitario) * (1 - objItemNF.dPercDesc)
                    dValorDesconto = (objItemNF.colItensRomaneioGrade(iIndice).dQuantidade * objItemNF.dPrecoUnitario) * (objItemNF.dPercDesc)
                Else
                    'Não tem informações para ratear o preço => então dividi igual entre os itens
                    '????
                    dValorTotal = ((objItemNF.dQuantidade * objItemNF.dPrecoUnitario) * (1 - objItemNF.dPercDesc)) / objItemNF.colItensRomaneioGrade.Count
                    dValorDesconto = ((objItemNF.dQuantidade * objItemNF.dPrecoUnitario) * (objItemNF.dPercDesc)) / objItemNF.colItensRomaneioGrade.Count
                End If
                
                objProduto.sCodigo = sProduto
                
                lErro = CF("Produto_Le", objProduto)
                '??? Tratar SHirley
                
                sUMVenda = objProduto.sSiglaUMVenda
            End If
            
            'Converte as unidades de medida
            If objProdutoINF.iKitVendaComp <> MARCADO Then
                lErro = CF("UM_Conversao", objItemNF.iClasseUM, objItemNF.sUnidadeMed, sUMVenda, dFator)
            Else
                lErro = CF("UM_Conversao", objProduto.iClasseUM, objProduto.sSiglaUMEstoque, objProduto.sSiglaUMVenda, dFator)
            End If
            If lErro <> SUCESSO Then gError 52725
        
            'Quantidade convertida
            dQuantUMVenda = dQuantUMVenda * dFator
                
            Set objSldMesFat = New ClassSldMesFat
            
            objSldMesFat.iFilialEmpresa = objNFiscal.iFilialEmpresa
            objSldMesFat.iAno = Year(objNFiscal.dtDataEmissao)
            objSldMesFat.sProduto = sProduto
            
            iMes = Month(objNFiscal.dtDataEmissao)
            sMes = CStr(iMes)
                                        
            'Lê todos os atributos na tabela SldMesFat e faza lock exclusive
            lErro = SldMesFat_Le_Lock_Mes(lComando, objSldMesFat, iMes)
            If lErro <> SUCESSO And lErro <> 59264 Then gError 52724
                            
            If (objTipoDocInfo.iFaturamento = TIPODOCINFO_FATURAMENTO_SIM) Then
        
                If iCancelamento = CANCELAMENTO_DOC Then
            
                    objSldMesFat.dValorFaturado(iMes) = -dValorTotal
                    objSldMesFat.dTotalDescontos(iMes) = -dValorDesconto
                              
                'Trecho alterado por Leo em 14/02/02
                    'Se for uma Nota de complemento de preço
                    If objTipoDocInfo.iComplementar = DOCINFO_COMPLEMENTO Then
                        'Não altera a quantidade
                        objSldMesFat.dQuantFaturada(iMes) = 0
                    Else
                        objSldMesFat.dQuantFaturada(iMes) = -dQuantUMVenda
                    End If
                    
                    
                Else
                
                    objSldMesFat.dValorFaturado(iMes) = dValorTotal
                    objSldMesFat.dTotalDescontos(iMes) = dValorDesconto
                
                    'Se for uma Nota de complemento de preço
                    If objTipoDocInfo.iComplementar = DOCINFO_COMPLEMENTO Then
                        'Não altera a quantidade
                        objSldMesFat.dQuantFaturada(iMes) = 0
                    Else
                        objSldMesFat.dQuantFaturada(iMes) = dQuantUMVenda
                    End If
                'Leo até aqui
                                
                End If
            
            ElseIf objTipoDocInfo.iFaturamento = TIPODOCINFO_FATURAMENTO_DEV Then
            
                If iCancelamento = CANCELAMENTO_DOC Then
                
                    objSldMesFat.dValorDevolvido(iMes) = -dValorTotal
                    objSldMesFat.dQuantDevolvida(iMes) = -dQuantUMVenda
                        
                Else
                        
                    objSldMesFat.dValorDevolvido(iMes) = dValorTotal
                    objSldMesFat.dQuantDevolvida(iMes) = dQuantUMVenda
                    
                End If
            
            End If
            
            If lErro = SUCESSO Then
            
            'Trecho alterado por Leo em 14/02/02
            
                'Verifica se o tipo de faturamento é TIPODOCINFO_FATURAMENTO_SIM
                If objTipoDocInfo.iFaturamento = TIPODOCINFO_FATURAMENTO_SIM Then
            
                    'Atualiza os campos referentes a Notas de Faturamento em SldMesFat
                    lErro = Comando_ExecutarPos(lComando2, "UPDATE SldMesFat SET ValorFaturado" & sMes & " = ValorFaturado" & sMes & " + ?, QuantFaturada" & sMes & " = QuantFaturada" & sMes & " + ?, TotalDescontos" & sMes & " = TotalDescontos" & sMes & " + ?, ValorDevolvido" & sMes & " = ?, QuantDevolvida" & sMes & " = ?", lComando, objSldMesFat.dValorFaturado(iMes), objSldMesFat.dQuantFaturada(iMes), objSldMesFat.dTotalDescontos(iMes), objSldMesFat.dValorDevolvido(iMes), objSldMesFat.dQuantDevolvida(iMes))
                    If lErro <> AD_SQL_SUCESSO Then gError 52726
                
                'Verifica se o tipo de faturamento é TIPODOCINFO_FATURAMENTO_DEV
                ElseIf objTipoDocInfo.iFaturamento = TIPODOCINFO_FATURAMENTO_DEV Then
                
                    'Atualiza os campos referentes a Notas de Devolução em SldMesFat
                    lErro = Comando_ExecutarPos(lComando2, "UPDATE SldMesFat SET ValorFaturado" & sMes & " = ?, QuantFaturada" & sMes & " = ?, TotalDescontos" & sMes & " = ?, ValorDevolvido" & sMes & " = ValorDevolvido" & sMes & " + ?, QuantDevolvida" & sMes & " = QuantDevolvida" & sMes & " + ?", lComando, objSldMesFat.dValorFaturado(iMes), objSldMesFat.dQuantFaturada(iMes), objSldMesFat.dTotalDescontos(iMes), objSldMesFat.dValorDevolvido(iMes), objSldMesFat.dQuantDevolvida(iMes))
                    If lErro <> AD_SQL_SUCESSO Then gError 94324
                
                End If
                        
            'Leo até aqui
                        
            Else
                
                'Atualiza a tabela de SldMesFat
                lErro = Comando_Executar(lComando3, "INSERT INTO SldMesFat (FilialEmpresa, Ano, Produto, ValorFaturado" & sMes & ", QuantFaturada" & sMes & ", TotalDescontos" & sMes & ", ValorDevolvido" & sMes & ", QuantDevolvida" & sMes & ") VALUES (?,?,?,?,?,?,?,?)", objSldMesFat.iFilialEmpresa, objSldMesFat.iAno, objSldMesFat.sProduto, objSldMesFat.dValorFaturado(iMes), objSldMesFat.dQuantFaturada(iMes), objSldMesFat.dTotalDescontos(iMes), objSldMesFat.dValorDevolvido(iMes), objSldMesFat.dQuantDevolvida(iMes))
                If lErro <> AD_SQL_SUCESSO Then gError 52973
                
            End If
            
            If objTipoDocInfo.iFaturamento = TIPODOCINFO_FATURAMENTO_SIM Then
                lErro = SldMesFatFilCli_Grava_Est(objSldMesFat.iFilialEmpresa, objSldMesFat.iAno, objSldMesFat.sProduto, objNFiscal.lCliente, objNFiscal.iFilialCli, objSldMesFat.dQuantFaturada(iMes), objSldMesFat.dValorFaturado(iMes), 0, 0, sMes)
                If lErro <> SUCESSO Then gError 110230
            ElseIf objTipoDocInfo.iFaturamento = TIPODOCINFO_FATURAMENTO_DEV Then
                lErro = SldMesFatFilCli_Grava_Est(objSldMesFat.iFilialEmpresa, objSldMesFat.iAno, objSldMesFat.sProduto, objNFiscal.lCliente, objNFiscal.iFilialCli, 0, 0, objSldMesFat.dQuantDevolvida(iMes), objSldMesFat.dValorDevolvido(iMes), sMes)
                If lErro <> SUCESSO Then gError 110230
            End If
            
            If objItemNF.colItensRomaneioGrade.Count = 0 Or (objItemNF.iPossuiGrade = 0 And objProdutoINF.iKitVendaComp <> MARCADO) Then Exit For
        
        Next
        
    Next
        
    'Libera comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)
            
    SldMesFat_Grava_Est = SUCESSO
    
    Exit Function
    
Erro_SldMesFat_Grava_Est:
    
    SldMesFat_Grava_Est = gErr

    Select Case gErr
        
        Case 52722, 52723, 52975
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 52724, 52725, 52781 'Tratados nas rotinas chamadas
        
        Case 52726, 94324
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SLDMESFAT", gErr, objSldMesFat.iAno, objSldMesFat.iFilialEmpresa, objSldMesFat.sProduto)
        
        Case 52973, 89787
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_SLDMESFAT", gErr, objSldMesFat.iFilialEmpresa, objSldMesFat.sProduto, objSldMesFat.iAno)
        
        Case 110230
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149835)

    End Select
        
    'Libera comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)
    
    Exit Function

End Function

Function SldMesFatFilCli_Grava_Est(iFilialEmpresa As Integer, iAno As Integer, sCodProduto As String, lCliente As Long, iFilialCliente As Integer, dQtdFaturada As Double, dValorFaturado As Double, dQtdDevolvida As Double, dValorDevolvido As Double, sMes As String)

Dim lErro As Long
Dim alComando(1 To 3) As Long
Dim iIndice As Integer
Dim iFilial As Integer

On Error GoTo Erro_SldMesFatFilCli_Grava_Est

    'Abre comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 110231
    Next
    
    lErro = Comando_ExecutarPos(alComando(1), "SELECT FilialEmpresa FROM SldMesFatFilCli WHERE FilialEmpresa = ? AND Ano = ? AND Produto = ? AND Cliente = ? AND Filial = ?", 0, iFilial, iFilialEmpresa, iAno, sCodProduto, lCliente, iFilialCliente)
    If lErro <> AD_SQL_SUCESSO Then gError 110232
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 110233
    
    If lErro = AD_SQL_SUCESSO Then
    
        'Lock
        lErro = Comando_LockExclusive(alComando(1))
        If lErro <> AD_SQL_SUCESSO Then gError 110234
        
        'Atualiza
        lErro = Comando_ExecutarPos(alComando(2), "UPDATE SldMesFatFilCli SET QtdFaturada" & sMes & " = QtdFaturada" & sMes & " + ?, ValorFaturado" & sMes & " = ValorFaturado" & sMes & " + ?, QtdDevolvida" & sMes & " = QtdDevolvida" & sMes & " + ?, ValorDevolvido" & sMes & " = ValorDevolvido" & sMes & " + ? ", alComando(1), dQtdFaturada, dValorFaturado, dQtdDevolvida, dValorDevolvido)
        If lErro <> AD_SQL_SUCESSO Then gError 110235
    
    Else
    
        lErro = Comando_Executar(alComando(3), "INSERT INTO SldMesFatFilCli (FilialEmpresa, Ano, Produto, Cliente, Filial, QtdFaturada" & sMes & ", ValorFaturado" & sMes & ", QtdDevolvida" & sMes & ", ValorDevolvido" & sMes & " ) " & _
                                                  "VALUES (?,?,?,?,?,?,?,?,?)", iFilialEmpresa, iAno, sCodProduto, lCliente, iFilialCliente, dQtdFaturada, dValorFaturado, dQtdDevolvida, dValorDevolvido)
        If lErro <> AD_SQL_SUCESSO Then gError 110236
    
    End If
    
    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    SldMesFatFilCli_Grava_Est = SUCESSO
    
    Exit Function
    
Erro_SldMesFatFilCli_Grava_Est:

    SldMesFatFilCli_Grava_Est = gErr
    
    Select Case gErr
  
        Case 110231
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 110232, 110233
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESFATFILCLI", gErr, iAno, iFilialEmpresa, sCodProduto, lCliente, iFilialCliente)
        
        Case 110234
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_SLDMESFATFILCLI", gErr, iAno, iFilialEmpresa, , sCodProduto, lCliente, iFilialCliente)
        
        Case 110235
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SLDMESFATFILCLI", gErr, iAno, iFilialEmpresa, sCodProduto, lCliente, iFilialCliente)
        
        Case 110236
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_SLDMESFATFILCLI", gErr, iAno, iFilialEmpresa, sCodProduto, lCliente, iFilialCliente)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149836)

    End Select
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function
Function SldMesFatFilCli_Cancela_Est(iFilialEmpresa As Integer, iAno As Integer, sCodProduto As String, lCliente As Long, iFilialCliente As Integer, dQtd As Double, dValor As Double, sMes As String)

Dim lErro As Long
Dim alComando(1 To 2) As Long
Dim iIndice As Integer
Dim iFilial As Integer

On Error GoTo Erro_SldMesFatFilCli_Cancela_Est

    'Abre comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 110238
    Next
    
    lErro = Comando_ExecutarPos(alComando(1), "SELECT FilialEmpresa FROM SldMesFatFilCli WHERE FilialEmpresa = ? AND Ano = ? AND Produto = ? AND Cliente = ? AND Filial = ?", 0, iFilial, iFilialEmpresa, iAno, sCodProduto, lCliente, iFilialCliente)
    If lErro <> AD_SQL_SUCESSO Then gError 110239
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 110240
    
    If lErro = AD_SQL_SUCESSO Then
    
        'Lock
        lErro = Comando_LockExclusive(alComando(1))
        If lErro <> AD_SQL_SUCESSO Then gError 110241
   
        'Atualiza
        lErro = Comando_ExecutarPos(alComando(2), "UPDATE SldMesFatFilCli SET QtdFaturada" & sMes & " = QtdFaturada" & sMes & " - ?, ValorFaturado" & sMes & " = ValorFaturado" & sMes & " - ? ", alComando(1), dQtd, dValor)
        If lErro <> AD_SQL_SUCESSO Then gError 110242
    
    End If

    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    SldMesFatFilCli_Cancela_Est = SUCESSO
    
    Exit Function
    
Erro_SldMesFatFilCli_Cancela_Est:

    SldMesFatFilCli_Cancela_Est = gErr
    
    Select Case gErr
  
        Case 110238
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 110239, 110240
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESFATFILCLI", gErr, iAno, iFilialEmpresa, sCodProduto, lCliente, iFilialCliente)
        
        Case 110241
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_SLDMESFATFILCLI", gErr, iAno, iFilialEmpresa, sCodProduto, lCliente, iFilialCliente)
        
        Case 110242
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SLDMESFATFILCLI", gErr, iAno, iFilialEmpresa, sCodProduto, lCliente, iFilialCliente)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149837)

    End Select
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Function GeracaoFatura_Automatico(lNumInt1 As Long) As Long

Dim lErro As Long
Dim lTransacao As Long
Dim lNumInt As Long

On Error GoTo Erro_GeracaoFatura_Automatico

    'Inicializa Transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 43723

    lErro = CF("CRFATConfig_ObterNumInt1", "FATURA_NUM_PROX", lNumInt)
    If lErro <> SUCESSO Then Error 43724
    
    lNumInt1 = CLng(lNumInt)
    
    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 43725

    GeracaoFatura_Automatico = SUCESSO
    
    Exit Function

Erro_GeracaoFatura_Automatico:

    GeracaoFatura_Automatico = Err

    Select Case Err
    
        Case 43723
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
        
        Case 43724
        
        Case 43725
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149838)
    
    End Select
    
    'Fechamento transação
    Call Transacao_Rollback

    Exit Function

End Function

Function GeracaoFatura_GerarFatura(ByVal objGeracaoFatura As ClassGeracaoFatura, ByVal colNFiscalMarcado As Collection, ByVal colcolComissao As colcolComissao, ByVal colcolDesconto As colcolDesconto, ByVal objContabil As ClassContabil) As Long
'faz todas as atualizacoes no bd necessarias ao registro da fatura que cobra um grupo de NFs

Dim objTituloRec As New ClassTituloReceber
Dim lErro As Long
Dim iIndice As Integer
Dim ColDesconto As ColDesconto

On Error GoTo Erro_GeracaoFatura_GerarFatura

    objTituloRec.lCliente = objGeracaoFatura.lCliente
    objTituloRec.iFilial = objGeracaoFatura.iFilialCli
    objTituloRec.dtDataEmissao = objGeracaoFatura.dtDataEmissao
    objTituloRec.dtDataRegistro = gdtDataHoje
    objTituloRec.dSaldo = objGeracaoFatura.dValorNFsSelecionadas
    objTituloRec.dValor = objGeracaoFatura.dValorNFsSelecionadas
    objTituloRec.dValorIRRF = objGeracaoFatura.dValorIRRF
    objTituloRec.dValorISS = objGeracaoFatura.dValorISS
    objTituloRec.dValorINSS = objGeracaoFatura.dValorINSS
    objTituloRec.iFilialEmpresa = giFilialEmpresa
    objTituloRec.dISSRetido = 0 '???
    objTituloRec.iNumParcelas = objGeracaoFatura.colParcelas.Count
    objTituloRec.sSiglaDocumento = TIPODOC_FATURA_A_RECEBER
    objTituloRec.iCondicaoPagto = objGeracaoFatura.iCondicaoPagto
    objTituloRec.dPercJurosDiario = gobjCRFAT.dPercJurosDiario
    
    'Passa os descontos de colColDesconto para cada uma das parcelas correspondentes
    For iIndice = 1 To objGeracaoFatura.colParcelas.Count
    
        Set ColDesconto = colcolDesconto(iIndice).ColDesconto
            
        'Verifica se existe algum desconto cadastrado
        If ColDesconto.Count > 0 Then
            objGeracaoFatura.colParcelas(iIndice).iDesconto1Codigo = ColDesconto(1).iCodigo
            objGeracaoFatura.colParcelas(iIndice).dtDesconto1Ate = ColDesconto(1).dtData
            objGeracaoFatura.colParcelas(iIndice).dDesconto1Valor = ColDesconto(1).dValor
            objGeracaoFatura.colParcelas(iIndice).dtDesconto2Ate = DATA_NULA
            objGeracaoFatura.colParcelas(iIndice).dtDesconto3Ate = DATA_NULA
            If ColDesconto.Count > 1 Then
                objGeracaoFatura.colParcelas(iIndice).iDesconto2Codigo = ColDesconto(2).iCodigo
                objGeracaoFatura.colParcelas(iIndice).dtDesconto2Ate = ColDesconto(2).dtData
                objGeracaoFatura.colParcelas(iIndice).dDesconto2Valor = ColDesconto(2).dValor
                If ColDesconto.Count > 2 Then
                    objGeracaoFatura.colParcelas(iIndice).iDesconto3Codigo = ColDesconto(3).iCodigo
                    objGeracaoFatura.colParcelas(iIndice).dtDesconto3Ate = ColDesconto(3).dtData
                    objGeracaoFatura.colParcelas(iIndice).dDesconto3Valor = ColDesconto(3).dValor
                End If
            End If
        End If
    Next
            
    lErro = CF("TituloReceber_Grava_Fatura", objTituloRec, colNFiscalMarcado, objGeracaoFatura.colParcelas, colcolComissao, colcolDesconto, objContabil)
    If lErro <> SUCESSO Then Error 31381
    
    objGeracaoFatura.lNumTitulo = objTituloRec.lNumTitulo
    
    GeracaoFatura_GerarFatura = SUCESSO
    
    Exit Function
    
Erro_GeracaoFatura_GerarFatura:

    GeracaoFatura_GerarFatura = Err
    
    Select Case Err
        
        Case 31381
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149839)
            
    End Select
    
    Exit Function
    
End Function

Function RelFatPrazoPag_Grava(ByVal lCodigo As Long, ByVal ColPrazos As Collection) As Long

Dim lErro As Long
Dim lComando1 As Long
Dim lComando2 As Long
Dim lTransacao As Long
Dim iIndice As Integer

On Error GoTo Erro_RelFatPrazoPag_Grava
    
    'abre os comandos
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 48567

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 48568

    'Inicia a Transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 48569
    
    'Preenche a Tabela com o item da colecao
    For iIndice = 1 To ColPrazos.Count
        
        If iIndice = 1 Then
            lErro = Comando_Executar(lComando2, "INSERT INTO RelFatPrazoPag(Codigo,PrazoAte,PrazoDe) VALUES (?,?,?)", lCodigo, ColPrazos.Item(iIndice), ColPrazos.Item(iIndice))
            If lErro <> AD_SQL_SUCESSO Then Error 48724
            
        Else
        
            lErro = Comando_Executar(lComando2, "INSERT INTO RelFatPrazoPag(Codigo,PrazoAte,PrazoDe) VALUES (?,?,?)", lCodigo, ColPrazos.Item(iIndice), ColPrazos.Item(iIndice - 1) + 1)
            If lErro <> AD_SQL_SUCESSO Then Error 48570
        
        End If
        
    Next
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 48571

    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando1)
    
    RelFatPrazoPag_Grava = SUCESSO
    
    Exit Function
    
Erro_RelFatPrazoPag_Grava:

    RelFatPrazoPag_Grava = Err
    
        Select Case Err
            
            Case 48567, 48568
                lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

            Case 48569
                lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
            
            Case 48570, 48724
                lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_RELFATPRAZOPAG", Err, lCodigo)
            
            Case 48571
                lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
                
            Case Else
                lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149840)
        
        End Select
        
    Call Transacao_Rollback
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    
    Exit Function
    
End Function

Function NFiscal_Grava_Comissoes(ByVal objNFiscal As ClassNFiscal) As Long
'Atualiza os dados de comissões de uma nota fiscal, com as novas comissões passadas em objNFiscal

Dim lErro As Long
Dim objTipoDocInfo As New ClassTipoDocInfo
Dim lTransacao As Long

On Error GoTo Erro_NFiscal_Grava_Comissoes

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 58350
       
    'Locka a NotaFiscal e o Vendedor e Testa se o total de Comissão é menor que o Valor Total - Valor IRRF
    lErro = ComissoesNF_Lock_Objetos_Relacionados(objNFiscal)
    If lErro <> SUCESSO Then Error 58351
      
    'Lê o Nome da Tela para saber se é uma Nota Fiscal Simples ou de Fatura
    objTipoDocInfo.iCodigo = objNFiscal.iTipoNFiscal
    
    'Lê em TipoDocInfo
    lErro = CF("TipoDocInfo_Le_Codigo", objTipoDocInfo)
    If lErro <> SUCESSO Then Error 58352
    
    If objTipoDocInfo.sNomeTelaNFiscal = "NFiscal" Or objTipoDocInfo.sNomeTelaNFiscal = "NFiscalPedido" Then
            
        'Se for uma comissao de uma NFiscal Simples
        lErro = NFiscalSimples_Grava_Comissao(objNFiscal)
        If lErro <> SUCESSO Then Error 58353
    
    ElseIf objTipoDocInfo.sNomeTelaNFiscal = "NFiscalFatura" Or objTipoDocInfo.sNomeTelaNFiscal = "NFiscalFaturaPedido" Or objTipoDocInfo.sNomeTelaNFiscal = "ConhecimentoFreteFatura" Then
        
        'Se for uma comissao de uma NFiscal Fatura
        lErro = NFiscalFatura_Grava_Comissao(objNFiscal)
        If lErro <> SUCESSO Then Error 58354
        
    End If
      
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 58355

    NFiscal_Grava_Comissoes = SUCESSO

    Exit Function

Erro_NFiscal_Grava_Comissoes:

    NFiscal_Grava_Comissoes = Err

    Select Case Err

        Case 58350
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
        
        Case 58351, 58352, 58353, 58354 'Tratados nas Rotinas chamadas
        
        Case 58355
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149841)

    End Select

   'Fechamento transação
    Call Transacao_Rollback

    Exit Function

End Function

Private Function ComissoesNF_Lock_Objetos_Relacionados(ByVal objNFiscal As ClassNFiscal) As Long
'Locka a NotaFiscal
'Testa se o total de Comissão é menor que o Valor Total - Valor IRRF

Dim lErro As Long
Dim lComando As Long
Dim iIndice As Integer
Dim tNFiscal As typeNFiscal
Dim dValorTotalComissoes As Double
Dim lNumIntDoc As Long
Dim iTipoOperacaoTrib As Integer
Dim dIRRFValor As Double

On Error GoTo Erro_ComissoesNF_Lock_Objetos_Relacionados
    
    'Abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 58314

    'Verifica se já existe nota com esses dados
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc , TipoOperacaoTrib FROM TipoDocInfoNFiscal WHERE FilialEmpresa = ? AND Serie = ? AND NumNotaFiscal = ? AND DataEmissao = ? AND Status <> ? AND Tipo = ? AND Cliente = ? AND FilialCli = ?", tNFiscal.lNumIntDoc, iTipoOperacaoTrib, objNFiscal.iFilialEmpresa, objNFiscal.sSerie, objNFiscal.lNumNotaFiscal, objNFiscal.dtDataEmissao, STATUS_EXCLUIDO, DOCINFO_NF_INT_SAIDA, objNFiscal.lCliente, objNFiscal.iFilialCli)
    If lErro <> AD_SQL_SUCESSO Then gError 89993
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 89994

    'se a nota fiscal em questão não for encontrada
    If lErro = AD_SQL_SEM_DADOS Then gError 89995

    'Lê o NumIntDoc, DataEmissao, ValorTotal,  TipodocInfo da NotaFiscal e locka a NotaFiscal
    lErro = Comando_ExecutarLockado(lComando, "SELECT DataEmissao, ValorTotal, TipoNFiscal, NumIntDocCPR FROM NFiscal WHERE NumIntDoc = ?", _
    tNFiscal.dtDataEmissao, tNFiscal.dValorTotal, tNFiscal.iTipoNFiscal, tNFiscal.lNumIntDocCPR, tNFiscal.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then Error 58315

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO Then Error 58316
    
    'Lock na NFiscal
    lErro = Comando_LockExclusive(lComando)
    If lErro <> SUCESSO Then Error 58318
    
    'Passa os dados da Nota para a NFiscal
    objNFiscal.lNumIntDoc = tNFiscal.lNumIntDoc
    objNFiscal.dtDataEmissao = tNFiscal.dtDataEmissao
    objNFiscal.iTipoNFiscal = tNFiscal.iTipoNFiscal
    objNFiscal.lNumIntDocCPR = tNFiscal.lNumIntDocCPR
    
    If iTipoOperacaoTrib <> 0 Then
    
        'Le o Valor IRRF
        lErro = CF("NFiscal_Le_Tributacao", objNFiscal)
        If lErro <> SUCESSO Then Error 58319
        
        dIRRFValor = objNFiscal.objTributacaoNF.dIRRFValor
        
    End If
    
    For iIndice = 1 To objNFiscal.ColComissoesNF.Count
        
        'Soma os Valores das Comissões para obter o Valor total das comissões
        dValorTotalComissoes = dValorTotalComissoes + objNFiscal.ColComissoesNF(iIndice).dValor
        
    Next
       
    'Testa se o total de Comissão é menor que o Valor Total - Valor IRRF
    If dValorTotalComissoes > tNFiscal.dValorTotal - dIRRFValor Then Error 58311

    'Fecha o comando
    Call Comando_Fechar(lComando)

    ComissoesNF_Lock_Objetos_Relacionados = SUCESSO
    
    Exit Function
    
Erro_ComissoesNF_Lock_Objetos_Relacionados:

    ComissoesNF_Lock_Objetos_Relacionados = Err
    
    Select Case Err
    
        Case 58311
            lErro = Rotina_Erro(vbOKOnly, "ERRO_VALOR_TOTAL_COMISSAO_INVALIDO", Err, dValorTotalComissoes, objNFiscal.objTributacaoNF.dIRRFValor + tNFiscal.dValorTotal)
    
        Case 58314
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
    
        Case 58315, 58316
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NOTA_FISCAL_NUM_SERIE", Err, objNFiscal.sSerie, objNFiscal.lNumNotaFiscal, objNFiscal.iFilialEmpresa)

        Case 58318
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_NFSREC", Err, objNFiscal.lNumNotaFiscal)

        Case 58319, 58320, 89993, 89994
   
        Case 89995
            lErro = Rotina_Erro(vbOKOnly, "ERRO_NFISCAL_NUM_SERIE_NAO_CADASTRADA", Err, objNFiscal.sSerie, objNFiscal.lNumNotaFiscal, objNFiscal.iFilialEmpresa)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149842)

    End Select
            
    'Fecha o comando
    Call Comando_Fechar(lComando)
    
    Exit Function
        
End Function

Private Function NFiscalSimples_Grava_Comissao(ByVal objNFiscal As ClassNFiscal) As Long
'Grava a Comissao da Nota Fiscal Simples na Tabela de Comissoes

Dim lErro As Long
Dim colComissao As New colComissao
Dim alComando(2) As Long
Dim iIndice As Integer
Dim objComissoesNF As New ClassComissaoNF

On Error GoTo Erro_NFiscalSimples_Grava_Comissao
        
    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 58356
    Next
       
    'Se a Nota Fiscal já foi faturada --- ERRO
    If objNFiscal.lNumIntDocCPR <> 0 Then Error 58357
        
    'Exclui as Comissoes da Tabela de Comissoes, Se houver baixadas abandona a Gravação
    lErro = CF("Comissoes_Exclui", TIPO_NF, objNFiscal.lNumIntDoc, 0)
    If lErro <> SUCESSO Then Error 58358
    
    'Varre a ComissaoNF e monta a Colecao de Comissao
    For iIndice = 1 To objNFiscal.ColComissoesNF.Count

        Set objComissoesNF = objNFiscal.ColComissoesNF.Item(iIndice)

        colComissao.Add 0, objNFiscal.iFilialEmpresa, STATUS_LIBERADO, TIPO_NF, objNFiscal.lNumIntDoc, objComissoesNF.iCodVendedor, DATA_NULA, (objComissoesNF.dPercentualEmissao * objComissoesNF.dPercentual), objComissoesNF.dValorBase, objComissoesNF.dValorEmissao, objNFiscal.dtDataEmissao

    Next
    
    'Inclui as Comissoes da Tabela de Comissoes
    lErro = CF("Comissoes_Grava", colComissao)
    If lErro <> SUCESSO Then Error 58359
            
    'Exclui as ComissoesNF da Tabela ComissoesNF
    lErro = ComissoesNF_Exclui(objNFiscal.lNumIntDoc)
    If lErro <> SUCESSO Then Error 58360
    
    'Inclui as ComissoesNF que estao na colecao na tabela ComissoesNF
    lErro = CF("ComissoesNF_Grava", alComando(1), alComando(2), objNFiscal)
    If lErro <> SUCESSO Then Error 58361
    
    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    NFiscalSimples_Grava_Comissao = SUCESSO
    
    Exit Function
    
Erro_NFiscalSimples_Grava_Comissao:

    NFiscalSimples_Grava_Comissao = Err
    
    Select Case Err
    
        Case 58356
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 58357
            lErro = Rotina_Erro(vbOKOnly, "ERRO_NOTA_FISCAL_ASSOCIADA_A_FATURA", Err, objNFiscal.lNumNotaFiscal)
        
        Case 58358, 58359, 58360, 58361 'Tratados nas rotinas chamadas
    
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149843)
    
    End Select
    
    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function
    
End Function

Private Function ComissoesNF_Exclui(ByVal lNumIntDoc As Long) As Long
'Exclui as Comissoes com o Numero interno passado

Dim lErro As Long
Dim alComando(3) As Long
Dim iIndice As Integer
Dim tComissoesNF As typeComissaoNF

On Error GoTo Erro_ComissoesNF_Exclui

    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 58362
    Next
    
    'Lê as comissoes
    lErro = Comando_ExecutarPos(alComando(1), "SELECT CodVendedor FROM ComissoesNF WHERE NumIntDoc = ? ", 0, tComissoesNF.iCodVendedor, lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then Error 58363
        
    'busca o próximo registro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 58367
        
    'Loop de exclusão
    Do While lErro = AD_SQL_SUCESSO

        'loca a comissao
        lErro = Comando_LockExclusive(alComando(1))
        If lErro <> AD_SQL_SUCESSO Then Error 58364
        
        'Faz a exclusão no BD
        lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM ComissoesNF", alComando(1))
        If lErro <> AD_SQL_SUCESSO Then Error 58365
        
        lErro = Comando_Executar(alComando(3), "DELETE FROM ComissoesPorItem WHERE TipoDoc = ? AND NumIntDocItem IN (SELECT I.NumIntDoc FROM ItensNFiscal I, NFiscal N WHERE I.NumIntNF = N.NumIntDoc AND N.NumIntDoc = ?)", _
            TIPO_NF, lNumIntDoc)
        If lErro <> AD_SQL_SUCESSO Then Error 46011
    
        'busca o próximo registro
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 58366
        
    Loop

    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    ComissoesNF_Exclui = SUCESSO
    
    Exit Function
    
Erro_ComissoesNF_Exclui:

    ComissoesNF_Exclui = Err
    
    Select Case Err
    
        Case 46011
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_COMISSOESNF2", Err)
    
        Case 58362
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 58363, 58366, 58367
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_COMISSOESNF", Err)
        
        Case 58364
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_COMISSOESNF", Err)
        
        Case 58365
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_COMISSOESNF2", Err)
                    
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149844)
    
    End Select
    
    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function
    
End Function

Function NFiscalFatura_Grava_Comissao(ByVal objNFiscal As ClassNFiscal) As Long

Dim lErro As Long
Dim colComissao As New colComissao
Dim alComando(2) As Long
Dim iIndice As Integer
Dim objComissoesNF As New ClassComissaoNF
Dim objParcelaRec As ClassParcelaReceber
Dim colcolComissao As New colcolComissao
Dim dValorLiquido As Double
Dim objComissao As ClassComissao

On Error GoTo Erro_NFiscalFatura_Grava_Comissao
    
    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 58368
    Next
    
    'Trata primeiro a NFiscal
    
    'Exclui as Comissoes da Tabela de Comissoes, Se houver baixadas abandona a Gravação
    lErro = CF("Comissoes_Exclui", TIPO_NF, objNFiscal.lNumIntDoc, 0)
    If lErro <> SUCESSO Then Error 58369
    
    'Varre a ComissaoNF e monta a Colecao de Comissao
    For iIndice = 1 To objNFiscal.ColComissoesNF.Count
        
        Set objComissoesNF = objNFiscal.ColComissoesNF.Item(iIndice)
        
        colComissao.Add 0, objNFiscal.iFilialEmpresa, STATUS_LIBERADO, TIPO_NF, objNFiscal.lNumIntDoc, objComissoesNF.iCodVendedor, DATA_NULA, (objComissoesNF.dPercentualEmissao * objComissoesNF.dPercentual), objComissoesNF.dValorBase, objComissoesNF.dValorEmissao, objNFiscal.dtDataEmissao
    Next
    
    'Inclui as Comissoes da Tabela de Comissoes
    lErro = CF("Comissoes_Grava", colComissao)
    If lErro <> SUCESSO Then Error 58370
        
    'Exclui as Comissões da Nota Fiscal da Tabela de ComissaoNF
    lErro = ComissoesNF_Exclui(objNFiscal.lNumIntDoc)
    If lErro <> SUCESSO Then Error 58371
    
    'Inclui as ComissoesNF que estao na colecao na tabela ComissoesNF
    lErro = CF("ComissoesNF_Grava", alComando(1), alComando(2), objNFiscal)
    If lErro <> SUCESSO Then Error 58372
    
    'Lê as Parcelas existentes para a Nota Fiscal
    lErro = CF("ParcelasRecNF_Le", objNFiscal)
    If lErro <> SUCESSO Then Error 58373
    
    'Trata as Parcelas
    For Each objParcelaRec In objNFiscal.ColParcelaReceber
    
        'Exclui as Comissões das Parcelas da Nota Fiscal Fatura Correspondente, se houver pelo menos uma baixada para a exclusão
        lErro = CF("Comissoes_Exclui", TIPO_PARCELA, objParcelaRec.lNumIntDoc, 0)
        If lErro <> SUCESSO Then Error 58374
        
        'Calcula o valor liquido das Parcelas
        dValorLiquido = dValorLiquido + objParcelaRec.dValor
                        
        'Adiciona para cada uma Parcela uma Colecao de Comissoes
        Set colComissao = New colComissao
        colcolComissao.Add colComissao
    
    Next
    
    'Gera as comissoes de acordo com o Número das Parcelas
    lErro = CF("ComissoesNF_Gera_ComissoesParc", objNFiscal, colcolComissao, dValorLiquido)
    If lErro <> SUCESSO Then Error 58375
    
    'Para cada comissao Gerada preenche com o NumIntDoc da Parcela e Grava a Comissao
    For iIndice = 1 To objNFiscal.ColParcelaReceber.Count
            
        Set objParcelaRec = objNFiscal.ColParcelaReceber.Item(iIndice)
            
        For Each objComissao In colcolComissao(iIndice).colComissao
            objComissao.lNumIntDoc = objParcelaRec.lNumIntDoc
        Next
    
        'Grava as Comissões da Parcela
        lErro = CF("Comissoes_Grava", colcolComissao(iIndice).colComissao)
        If lErro <> SUCESSO Then Error 58376
    
    Next
    
    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    NFiscalFatura_Grava_Comissao = SUCESSO
    
    Exit Function
    
Erro_NFiscalFatura_Grava_Comissao:
    
    NFiscalFatura_Grava_Comissao = Err
    
    Select Case Err
    
        Case 58368
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 58369, 58370, 58371, 58372, 58373, 58374, 58375, 58376 'Tratados nas rotinas chamadas
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149845)
    
    End Select
        
    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function
    
End Function

'------------------------------------------------------------------------------------Até

Function GeracaoNFiscal_Abrir_Comandos(alComando() As Long, alComando1() As Long, alComando2() As Long, alComando3() As Long, alComando4() As Long) As Long
'Abre os comandos utilizados pela função de geração de notas Fiscais

Dim lErro As Long
Dim iIndice As Integer

On Error GoTo Erro_GeracaoNFiscal_Abrir_Comandos

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 44183
    Next

    For iIndice = LBound(alComando1) To UBound(alComando1)
        alComando1(iIndice) = Comando_Abrir()
        If alComando1(iIndice) = 0 Then Error 44317
    Next

    For iIndice = LBound(alComando2) To UBound(alComando2)
        alComando2(iIndice) = Comando_Abrir()
        If alComando2(iIndice) = 0 Then Error 44286
    Next

    For iIndice = LBound(alComando3) To UBound(alComando3)
        alComando3(iIndice) = Comando_Abrir()
        If alComando3(iIndice) = 0 Then Error 44298
    Next

    For iIndice = LBound(alComando4) To UBound(alComando4)
        alComando4(iIndice) = Comando_Abrir()
        If alComando4(iIndice) = 0 Then Error 44333
    Next

    GeracaoNFiscal_Abrir_Comandos = SUCESSO
    
    Exit Function

Erro_GeracaoNFiscal_Abrir_Comandos:

    GeracaoNFiscal_Abrir_Comandos = Err
    
    Select Case Err
    
        Case 44183, 44317, 44286, 44298, 44333
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149846)

    End Select

End Function

Private Sub GeracaoNFiscal_Fechar_Comandos(alComando() As Long, alComando1() As Long, alComando2() As Long, alComando3() As Long, alComando4() As Long)
'Fecha os comandos utilizados pela função de geracao de notas fiscais

Dim iIndice As Integer

    'fechar comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    For iIndice = LBound(alComando1) To UBound(alComando1)
        Call Comando_Fechar(alComando1(iIndice))
    Next

    For iIndice = LBound(alComando2) To UBound(alComando2)
        Call Comando_Fechar(alComando2(iIndice))
    Next

    For iIndice = LBound(alComando3) To UBound(alComando3)
        Call Comando_Fechar(alComando3(iIndice))
    Next

    For iIndice = LBound(alComando4) To UBound(alComando4)
        Call Comando_Fechar(alComando4(iIndice))
    Next

End Sub

Function ProdutoFilial_Subtrai_NF_QuantPedida(ByVal objNFiscal As ClassNFiscal) As Long
'Atualiza Subtraindo a quantPedida do Produto em UM de Venda na tabela ProdutosFilial
 
Dim lErro As Long
Dim dQuantPedida As Double
Dim dQuantItem As Double
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim objItemNF As ClassItemNF
Dim objProduto As New ClassProduto
Dim objProdutoINF As New ClassProduto
Dim dFator As Double
Dim objItemPV As ClassItemPedido
Dim dQtdePV As Double, bPula As Boolean
 
On Error GoTo Erro_ProdutoFilial_Subtrai_NF_QuantPedida

    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 51456
    Next
    
    For Each objItemNF In objNFiscal.colItensNF
    
        lErro = CF("MovEstoque_ItemNF_Customizado", objItemNF, objNFiscal)
        If lErro <> SUCESSO Then gError 197729
        
        If Not objItemNF Is Nothing Then
    
            objProdutoINF.sCodigo = objItemNF.sProduto
            lErro = CF("Produto_Le", objProdutoINF)
            If lErro <> SUCESSO And lErro <> 28030 Then gError 51461
            If lErro <> SUCESSO Then gError 51463
    
            For iIndice = 0 To objItemNF.colItensRomaneioGrade.Count
           
                bPula = True
                If objItemNF.colItensRomaneioGrade.Count = 0 Then
                    bPula = False
                    objProduto.sCodigo = objItemNF.sProduto
                    dQuantItem = objItemNF.dQuantidade
                ElseIf iIndice <> 0 Then
                    bPula = False
                    objProduto.sCodigo = objItemNF.colItensRomaneioGrade(iIndice).sProduto
                    dQuantItem = objItemNF.colItensRomaneioGrade(iIndice).dQuantidade
                End If
                
                    If Not bPula Then
                
                    lErro = CF("Produto_Le", objProduto)
                    If lErro <> SUCESSO And lErro <> 28030 Then gError 51461
                    If lErro <> SUCESSO Then gError 51463
                
                    If objProdutoINF.iKitVendaComp <> MARCADO Then
                        lErro = CF("UM_Conversao_Trans", objProduto.iClasseUM, objItemNF.sUnidadeMed, objProduto.sSiglaUMVenda, dFator)
                    Else
                        lErro = CF("UM_Conversao_Trans", objProduto.iClasseUM, objProduto.sSiglaUMEstoque, objProduto.sSiglaUMVenda, dFator)
                    End If
                    If lErro <> SUCESSO Then gError 51462
                    
                    'Calcula a quantidade a ser Subtraida a quantidade pedida do produto
                    dQuantItem = dQuantItem * dFator
                                
                    'Se existe a possibilidade de faturar a mais ou a menos, então
                    If objItemNF.dPercentMaisReceb <> 0 Or objItemNF.dPercentMenosReceb <> 0 Then
        
                        Set objItemPV = New ClassItemPedido
                        
                        objItemPV.lNumIntDoc = objItemNF.lNumIntItemPedVenda
                        objItemPV.iFilialEmpresa = objNFiscal.iFilialEmpresa
                        
                        lErro = CF("ItensPedido_Le_NumIntDoc1", objItemPV)
                        If lErro <> SUCESSO Then Error 51461
                        
                        'Quantidade pedida anterior ao faturamento
                        dQtdePV = objItemPV.dQuantidade - objItemPV.dQuantCancelada - objItemPV.dQuantFaturada + dQuantItem
                        
                        If objItemPV.iStatus = STATUS_ATENDIDO Then dQuantItem = dQtdePV
                    
                    End If
                            
                    'Busca o Registro de Produto do Item e FiliaisProduto
                    lErro = Comando_ExecutarPos(alComando(0), "SELECT QuantPedida FROM ProdutosFilial WHERE Produto = ? AND FilialEmpresa = ?", 0, dQuantPedida, objProduto.sCodigo, objNFiscal.iFilialPedido)
                    If lErro <> AD_SQL_SUCESSO Then gError 51457
            
                    lErro = Comando_BuscarPrimeiro(alComando(0))
                    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 51458
                    If lErro <> AD_SQL_SUCESSO Then gError 51459 'Não encontrou
                                  
                    'Atualiza a quantidade pedida em ProdutosFilial para o Produto
                    lErro = Comando_ExecutarPos(alComando(1), "UPDATE ProdutosFilial SET QuantPedida = QuantPedida - ?", alComando(0), dQuantItem)
                    If lErro <> AD_SQL_SUCESSO Then gError 51460
                    
                End If
                
            Next
            
        End If
            
    Next
    
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    ProdutoFilial_Subtrai_NF_QuantPedida = SUCESSO
    
    Exit Function
    
Erro_ProdutoFilial_Subtrai_NF_QuantPedida:

    ProdutoFilial_Subtrai_NF_QuantPedida = gErr
    
    Select Case gErr
    
        Case 51456
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 51457, 51458
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOSFILIAL", gErr, objNFiscal.iFilialEmpresa, objItemNF.sProduto)
        
        Case 51459
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTOFILIAL_INEXISTENTE", gErr, objItemNF.sProduto, objNFiscal.iFilialEmpresa)
        
        Case 51460
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_PRODUTOSFILIAL", gErr, objNFiscal.iFilialEmpresa, objItemNF.sProduto)

        Case 51461, 51462, 197729
        
        Case 51463
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_NAO_CADASTRADO", gErr, objProduto.sCodigo)
                        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149847)

    End Select
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function
    
End Function

Private Function PedVenda_QuantNaoCancelada(ByVal objPedidoVenda As ClassPedidoDeVenda, dQuantNaoCancelada As Double, Optional bFaturouFaixa As Boolean = False) As Long
'Retorna a quantidade não cancelada em todos o Pedido

Dim lErro As Long
Dim objItemPV As ClassItemPedido
Dim dQuantAFaturarMenosFaixa As Double
Dim dQuantAFaturarTotal As Double

On Error GoTo Erro_PedVenda_QuantNaoCancelada

    'Zera o acumulador
    dQuantNaoCancelada = 0

    'Para cada item acumula a Quantidade não cancelada
    For Each objItemPV In objPedidoVenda.colItensPedido
        objItemPV.dQuantAFaturar = objItemPV.dQuantidade - objItemPV.dQuantCancelada - objItemPV.dQuantFaturada
        If objItemPV.dQuantAFaturar < 0 Then objItemPV.dQuantAFaturar = 0
        dQuantAFaturarMenosFaixa = objItemPV.dQuantAFaturar - objItemPV.dQuantidade * objItemPV.dPercentMenosReceb
        If dQuantAFaturarMenosFaixa < 0 Then dQuantAFaturarMenosFaixa = 0
        dQuantNaoCancelada = dQuantNaoCancelada + objItemPV.dQuantAFaturar
        dQuantAFaturarTotal = dQuantAFaturarTotal + dQuantAFaturarMenosFaixa
    Next
    
    If dQuantAFaturarTotal > QTDE_ESTOQUE_DELTA Then
        bFaturouFaixa = False
    Else
        bFaturouFaixa = True
    End If
    
    PedVenda_QuantNaoCancelada = SUCESSO

    Exit Function

Erro_PedVenda_QuantNaoCancelada:

    PedVenda_QuantNaoCancelada = Err

    Select Case Err

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149848)

    End Select

    Exit Function

End Function

Function PedidoVenda_Inclui_BloqueioCredito(ByVal lPedido As Long, ByVal iFilialPedido As Integer) As Long

Dim lErro As Long
Dim objPedidoVenda As New ClassPedidoDeVenda
Dim lTransacao As Long

On Error GoTo Erro_PedidoVenda_Inclui_BloqueioCredito

    'ABre a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 51531

    objPedidoVenda.lCodigo = lPedido
    objPedidoVenda.iFilialEmpresa = iFilialPedido
    
    'Lê e faz o lock no Pedido de Venda passado
    lErro = CF("PedidoDeVenda_Le_ComBloqueio", objPedidoVenda)
    If lErro <> SUCESSO Then Error 51528
    
    'Insere bloqueio de crédito no PV se estourar limite crédito
    lErro = BloqueioPV_Testa_Credito(objPedidoVenda)
    If lErro <> SUCESSO Then Error 51529

    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then Error 51530

    PedidoVenda_Inclui_BloqueioCredito = SUCESSO

    Exit Function

Erro_PedidoVenda_Inclui_BloqueioCredito:

    PedidoVenda_Inclui_BloqueioCredito = Err
    
    Select Case Err
    
        Case 51531
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
            
        Case 51528, 51529  'tratados nas rotinas chamadas
        
        Case 51530
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149849)
        
    End Select
        
    Call Transacao_Rollback
                
    Exit Function
                
End Function

Function DescontoPadraoParcela_Gera(ByVal objParcela As Object, ByVal dtDataVencimento As Date) As Long
'Preenche o objParcela com o desconto padrão
'*Obs: O objParcela foi declarado como Object para que a função sirva para Parcelasde Pedido de Venda e Parcelas de Notas Fiscais
                        
Dim ColDesconto As ColDesconto
Dim lErro As Long
Dim iIndice2 As Integer

On Error GoTo Erro_DescontoPadraoParcela_Gera
                        
    Set ColDesconto = New ColDesconto
    'Gera os desconto com base nas novas datas de vencimento
    lErro = CF("Parcela_GeraDescontoPadrao", ColDesconto, dtDataVencimento)
    If lErro <> SUCESSO Then Error 51613
    With objParcela
        'Limpa no obj os decontos antigos
        .dDesconto1Valor = 0
        .dDesconto2Valor = 0
        .dDesconto3Valor = 0
        .dtDesconto1Ate = DATA_NULA
        .dtDesconto2Ate = DATA_NULA
        .dtDesconto3Ate = DATA_NULA
        .iDesconto1Codigo = 0
        .iDesconto2Codigo = 0
        .iDesconto3Codigo = 0
        
        'Preenche o obj comos novos descontos
        For iIndice2 = 1 To ColDesconto.Count
            If iIndice2 = 1 Then
                .iDesconto1Codigo = ColDesconto(iIndice2).iCodigo
                .dDesconto1Valor = ColDesconto(iIndice2).dValor
                .dtDesconto1Ate = ColDesconto(iIndice2).dtData
            ElseIf iIndice2 = 2 Then
                .iDesconto2Codigo = ColDesconto(iIndice2).iCodigo
                .dDesconto2Valor = ColDesconto(iIndice2).dValor
                .dtDesconto2Ate = ColDesconto(iIndice2).dtData
            Else
                .iDesconto3Codigo = ColDesconto(iIndice2).iCodigo
                .dDesconto3Valor = ColDesconto(iIndice2).dValor
                .dtDesconto3Ate = ColDesconto(iIndice2).dtData
            End If
        Next
    End With
    
    DescontoPadraoParcela_Gera = SUCESSO
    
    Exit Function
    
Erro_DescontoPadraoParcela_Gera:

    DescontoPadraoParcela_Gera = Err
    
    Select Case Err
        
        Case 51613
    
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149850)
            
    End Select

    Exit Function
    
End Function

Function ParcelasPV_Gerando_ParcelasNF(ByVal objPedidoVenda As ClassPedidoDeVenda, ByVal objNFiscal As ClassNFiscal) As Long
'Se a Data de referencia do Pedido estiver ultrapassada em relação a Data Atual e se
'a cobrança automática do pedido estiver selecionada as  parcelas são atualizadas.
    
Dim lErro As Long
Dim objCondicaoPagto As New ClassCondicaoPagto
Dim iIndice As Integer
Dim objParcelaPV As New ClassParcelaPedidoVenda

On Error GoTo Erro_ParcelasPV_Gerando_ParcelasNF
    
    'Se a condição de pagamento estiver preenchida e cobrança automática selecionada
    If objPedidoVenda.iCondicaoPagto <> 0 And objPedidoVenda.iCobrancaAutomatica = 1 Then
        
        objCondicaoPagto.iCodigo = objPedidoVenda.iCondicaoPagto
        'Lê Condicao Pagamento no BD
        lErro = CF("CondicaoPagto_Le", objCondicaoPagto)
        If lErro <> SUCESSO And lErro <> 19205 Then Error 59095
        If lErro = 19205 Then Error 59096
        
        If objCondicaoPagto.iNumeroParcelas <> objPedidoVenda.colParcelas.Count Then Error 59097
        
        'Calcula Datas de Vencimento das Parcelas
        If objNFiscal.dtDataReferencia = DATA_NULA Or objNFiscal.dtDataReferencia < objNFiscal.dtDataEmissao Then
            'A data de referencia da nota fiscal é atualizada
            objNFiscal.dtDataReferencia = objNFiscal.dtDataEmissao
        End If
        
        objCondicaoPagto.dtDataRef = objNFiscal.dtDataReferencia
        objCondicaoPagto.dtDataEntrega = objNFiscal.dtDataSaida
        If objCondicaoPagto.dtDataEntrega = DATA_NULA Then objCondicaoPagto.dtDataEntrega = objNFiscal.dtDataEmissao
        
        lErro = CF("CondicaoPagto_CalculaParcelas", objCondicaoPagto, False, True)
        If lErro <> SUCESSO Then Error 59098

        'Loop de preenchimento de Parcelas com Datas de Vencimento Recalculadas
        For iIndice = 1 To objCondicaoPagto.iNumeroParcelas

            Set objParcelaPV = objPedidoVenda.colParcelas.Item(iIndice)
            
            'Preenche o desconto padrão
            lErro = DescontoPadraoParcela_Gera(objParcelaPV, objCondicaoPagto.colParcelas(iIndice).dtVencimento)
            If lErro <> SUCESSO Then Error 51613
                        
            With objParcelaPV
            '################################################
            'ALTERADO POR WAGNER -- ??? ALTERAR CLASSPARCELAPV PARA INCLUIR PREVISÃO E OBSERVAÇÃO ???
                'Adiciona a parcela na coleçào de parcelas
                objNFiscal.ColParcelaReceber.Add 0, 0, .iNumParcela, STATUS_ABERTO, objCondicaoPagto.colParcelas(iIndice).dtVencimento, objCondicaoPagto.colParcelas(iIndice).dtVencimento, .dValor, .dValor, 1, CARTEIRA_CARTEIRA, COBRADOR_PROPRIA_EMPRESA, "", 0, 0, 0, 0, 0, 0, .iDesconto1Codigo, .dtDesconto1Ate, .dDesconto1Valor, .iDesconto2Codigo, .dtDesconto2Ate, .dDesconto2Valor, .iDesconto3Codigo, .dtDesconto3Ate, .dDesconto3Valor, 0, 0, 0, 0, 0, "", .dValor
            '################################################
            End With

        Next

    Else
    
        'transfere as parcelas do pedido de vendas para a nota fiscal
        For Each objParcelaPV In objPedidoVenda.colParcelas

            With objParcelaPV
            '################################################
            'ALTERADO POR WAGNER -- ??? ALTERAR CLASSPARCELAPV PARA INCLUIR PREVISÃO E OBSERVAÇÃO ???
                objNFiscal.ColParcelaReceber.Add 0, 0, .iNumParcela, STATUS_ABERTO, .dtDataVencimento, .dtDataVencimento, .dValor, .dValor, 1, CARTEIRA_CARTEIRA, COBRADOR_PROPRIA_EMPRESA, "", 0, 0, 0, 0, 0, 0, .iDesconto1Codigo, .dtDesconto1Ate, .dDesconto1Valor, .iDesconto2Codigo, .dtDesconto2Ate, .dDesconto2Valor, .iDesconto3Codigo, .dtDesconto3Ate, .dDesconto3Valor, 0, 0, 0, 0, 0, "", .dValor
            '################################################
            End With

        Next
    
    End If
    
    ParcelasPV_Gerando_ParcelasNF = SUCESSO
    
    Exit Function

Erro_ParcelasPV_Gerando_ParcelasNF:

    ParcelasPV_Gerando_ParcelasNF = Err
    
    Select Case Err
        
        Case 59095, 59098, 51613  'tratados nas rotinas chamadas
        
        Case 59096
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CONDICAO_PAGTO_NAO_CADASTRADA", Err, objCondicaoPagto.iCodigo)
        
        Case 59097
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CONDICAO_PAGTO_ALTERADA_NUM_PARC", Err, objCondicaoPagto.iCodigo)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149851)
    
    End Select
    
    Exit Function
    
End Function

Function SldMesFat_Le_Lock_Mes(ByVal lComando As Long, ByVal objSldMesFat As ClassSldMesFat, ByVal iMes As Integer) As Long
'Lê todos atributos da tabela SldMesFat e faz lock exclusive
'Filtro: filial/produto/ano passados em objSldMesFat

Dim lErro As Long
Dim tSldMesFat As typeSldMesFat
Dim iIndice As Integer
Dim sIndice As String
Dim sComando_SqlPrimario As String
Dim sComando_SQL As String, sMes As String

On Error GoTo Erro_SldMesFat_Le_Lock_Mes
        
    sMes = CStr(iMes)
    
    'Le a tabela de SldMesFat para a filial/produto/ano em questão
    With tSldMesFat
        
        lErro = Comando_ExecutarPos(lComando, "SELECT ValorFaturado" & sMes & ", ValorDevolvido" & sMes & ", TotalDescontos" & sMes & ", QuantPedida" & sMes & ", QuantFaturada" & sMes & ", QuantDevolvida" & sMes & " FROM SldMesFat WHERE FilialEmpresa = ? AND Produto = ? AND Ano = ?", 0, _
            .adValorFaturado(1), .adValorDevolvido(1), .adTotalDescontos(1), .adQuantPedida(1), .adQuantFaturada(1), .adQuantDevolvida(1), objSldMesFat.iFilialEmpresa, objSldMesFat.sProduto, objSldMesFat.iAno)
        If lErro <> AD_SQL_SUCESSO Then Error 59262
    
    End With
    
    'leitura do registro referente a filial/produto/ano em questão
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 59263
    
    If lErro = AD_SQL_SEM_DADOS Then Error 59264
    
    'Lock da SldMesFat
    lErro = Comando_LockExclusive(lComando)
    If lErro <> AD_SQL_SUCESSO Then Error 59265
    
    'Preenche o objMesFat p/o mes passado
    objSldMesFat.dValorFaturado(iMes) = tSldMesFat.adValorFaturado(1)
    objSldMesFat.dValorDevolvido(iMes) = tSldMesFat.adValorDevolvido(1)
    objSldMesFat.dTotalDescontos(iMes) = tSldMesFat.adTotalDescontos(1)
    objSldMesFat.dQuantPedida(iMes) = tSldMesFat.adQuantPedida(1)
    objSldMesFat.dQuantFaturada(iMes) = tSldMesFat.adQuantFaturada(1)
    objSldMesFat.dQuantDevolvida(iMes) = tSldMesFat.adQuantDevolvida(1)
                
    SldMesFat_Le_Lock_Mes = SUCESSO
    
    Exit Function
    
Erro_SldMesFat_Le_Lock_Mes:

    SldMesFat_Le_Lock_Mes = Err
    
    Select Case Err
        
        Case 59262, 59263
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESFAT", Err, objSldMesFat.iAno, objSldMesFat.iFilialEmpresa, objSldMesFat.sProduto)
        
        Case 59264 'Não achou no BD. Tratado na rotina chamadora.
        
        Case 59265
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_SLDMESFAT", Err, objSldMesFat.iAno, objSldMesFat.iFilialEmpresa, objSldMesFat.sProduto)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149852)

    End Select

    Exit Function

End Function

Private Function ItensPV_AtualizaQuantFaturada(ByVal lComando As Long, ByVal lComando1 As Long, ByVal objNFiscal As ClassNFiscal) As Long

Dim lErro As Long
Dim iIndice As Integer
Dim iStatus As Integer
Dim dQuantFaturada As Double
Dim dQuantCancelada As Double
Dim dQuantPedida As Double
Dim objItemRomaneio As ClassItemRomaneioGrade
Dim alComando(0 To 1) As Long
Dim sUM As String 'Inserido por Wagner
Dim dFator As Double 'Inserido por Wagner
Dim objItemNF As ClassItemNF
Dim dQuantFatAMais As Double

On Error GoTo Erro_ItensPV_AtualizaQuantFaturada

    For iIndice = LBound(alComando) To UBound(alComando)
        
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 11111
    
    Next

    'Para cada item de pedido de venda que foi utilizado na Nota Fiscal
    For iIndice = 1 To objNFiscal.colItensNF.Count
        
        Set objItemNF = objNFiscal.colItensNF.Item(iIndice)
        
        lErro = CF("MovEstoque_ItemNF_Customizado", objItemNF, objNFiscal)
        If lErro <> SUCESSO Then gError 197730
        
        If Not objItemNF Is Nothing Then
        
            '####################################################
            'Inserido por Wagner
            sUM = String(STRING_UM_SIGLA, 0)
            '####################################################
            
            iStatus = STATUS_NAO_ATENDIDO
            
            '####################################################
            'Alterado por Wagner
            'Lê o item de pedido de venda
            lErro = Comando_ExecutarPos(lComando, "SELECT QuantFaturada,QuantCancelada,Quantidade,UnidadeMed FROM ItensPedidoDeVenda WHERE NumIntDoc = ?", 0, dQuantFaturada, dQuantCancelada, dQuantPedida, sUM, objItemNF.lNumIntItemPedVenda)
            If lErro <> AD_SQL_SUCESSO Then gError 46614
            '####################################################
            
            lErro = Comando_BuscarPrimeiro(lComando)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 46615
            If lErro <> AD_SQL_SUCESSO Then gError 46616
                    
            '####################################################
            'Inserido por Wagner
            lErro = CF("UM_Conversao", objItemNF.iClasseUM, sUM, objItemNF.sUnidadeMed, dFator)
            If lErro <> SUCESSO Then gError 131015
            '####################################################
                    
            'Se Quantidade faturada é maior do que quantidade a faturar, erro
            If objNFiscal.colItensNF(iIndice).iRecebForaFaixa = ERRO_E_REJEITA_RECEBIMENTO Then
                If Arredonda_Estoque(dQuantPedida * dFator * (1 + objNFiscal.colItensNF(iIndice).dPercentMaisReceb)) - dQuantCancelada - dQuantFaturada - CDbl(Formata_Estoque(objNFiscal.colItensNF(iIndice).dQuantidade)) < -QTDE_ESTOQUE_DELTA Then gError 25777 'Alterado por Wagner
            End If
    
            If Arredonda_Estoque(dQuantPedida * dFator) - dQuantCancelada - dQuantFaturada - CDbl(Formata_Estoque(objNFiscal.colItensNF(iIndice).dQuantidade)) < QTDE_ESTOQUE_DELTA + (Arredonda_Estoque(dQuantPedida * dFator) * (objNFiscal.colItensNF(iIndice).dPercentMenosReceb)) Then iStatus = STATUS_ATENDIDO
    
            dQuantFatAMais = dQuantFaturada + CDbl(Formata_Estoque(objNFiscal.colItensNF(iIndice).dQuantidade)) - Arredonda_Estoque(dQuantPedida * dFator)
            If dQuantFatAMais < 0 Then dQuantFatAMais = 0
        
            'Atualiza a quantidade faturada
            lErro = Comando_ExecutarPos(lComando1, "UPDATE ItensPedidoDeVenda SET QuantFaturada = QuantFaturada + ?, Status =?, QuantFaturadaAMais = ? ", lComando, Arredonda_Estoque(objNFiscal.colItensNF(iIndice).dQuantidade / dFator), iStatus, dQuantFatAMais) 'Alterado por Wagner
            If lErro <> AD_SQL_SUCESSO Then gError 46617
                    
                    
            For Each objItemRomaneio In objItemNF.colItensRomaneioGrade
                
                lErro = Comando_ExecutarPos(alComando(0), "SELECT QuantFaturada,QuantCancelada,Quantidade FROM ItensPedidoDeVendaGrade WHERE NumIntDoc = ?", 0, dQuantFaturada, dQuantCancelada, dQuantPedida, objItemRomaneio.lNumIntItemPV)
                If lErro <> SUCESSO Then gError 55555
                
            
                lErro = Comando_BuscarPrimeiro(alComando(0))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 46615
                If lErro <> AD_SQL_SUCESSO Then gError 46616
                
                'Se Quantidade faturada é maior do que quantidade a faturar, erro
                If Arredonda_Estoque(dQuantPedida * dFator) - dQuantCancelada - dQuantFaturada - CDbl(Formata_Estoque(objItemRomaneio.dQuantidade)) < -QTDE_ESTOQUE_DELTA Then gError 25777
        
                If Abs(Arredonda_Estoque(dQuantPedida * dFator) - dQuantCancelada - dQuantFaturada - CDbl(Formata_Estoque(objItemRomaneio.dQuantidade))) < QTDE_ESTOQUE_DELTA Then iStatus = STATUS_ATENDIDO
                
                'Atualiza a quantidade faturada
                lErro = Comando_ExecutarPos(alComando(1), "UPDATE ItensPedidoDeVendaGrade SET QuantFaturada = QuantFaturada + ?", alComando(0), Arredonda_Estoque(objItemRomaneio.dQuantidade / dFator))
                If lErro <> AD_SQL_SUCESSO Then gError 46617
                
            Next

        End If

    Next

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    ItensPV_AtualizaQuantFaturada = SUCESSO
    
    Exit Function
    
Erro_ItensPV_AtualizaQuantFaturada:

    ItensPV_AtualizaQuantFaturada = gErr
    
    Select Case gErr
    
        Case 11111
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
    
        Case 25777
            lErro = Rotina_Erro(vbOKOnly, "ERRO_QUANT_FATURADA_MAIOR_QUANT_A_FATURAR", gErr, objNFiscal.colItensNF(iIndice).lNumIntItemPedVenda)
        
        Case 46614, 46615, 55555
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSPEDIDODEVENDA", gErr)
        
        Case 46616
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ITEMPV_NAO_CADASTRADO", gErr, objNFiscal.colItensNF(iIndice).lNumIntItemPedVenda)
            
        Case 46617
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_ITENSPEDIDODEVENDA", gErr)

        Case 197730, 131015

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149853)
            
    End Select
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function
    
End Function

Function NFiscal_Verifica_Numero_Maior(ByVal objNFiscal As ClassNFiscal) As Long
'Verifica se tem alguma Nota com número maior ou igual para a série passada,não considerando as Notas Fiscais Externas

Dim lComando As Long
Dim tNFiscal As typeNFiscal
Dim lErro As Long

On Error GoTo Erro_NFiscal_Verifica_Numero_Maior

    'Abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 60424
    
    'Lê a Nota Fiscal com número maior ou igual ao passado em ordem descrecente de Data (desconsidera as Notas Fiscais Externas)
    lErro = Comando_Executar(lComando, "SELECT NumNotaFiscal, DataEmissao FROM NFiscal,TiposDocInfo WHERE Serie = ? AND NumNotaFiscal >= ? AND FilialEmpresa = ? AND NFiscal.TipoNFiscal=TiposDocInfo.Codigo AND TiposDocInfo.Tipo<>? ORDER BY NumNotaFiscal, DataEmissao DESC", tNFiscal.lNumNotaFiscal, tNFiscal.dtDataEmissao, objNFiscal.sSerie, objNFiscal.lNumNotaFiscal, objNFiscal.iFilialEmpresa, DOCINFO_NF_EXTERNA)
    If lErro <> AD_SQL_SUCESSO Then Error 60425
    
    'Busca o Primeiro da Lista selecionada
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60426
    
    'Se não encontrou ---> Erro
    If lErro <> AD_SQL_SUCESSO Then Error 60427
    
    objNFiscal.lNumNotaFiscal = tNFiscal.lNumNotaFiscal
    objNFiscal.dtDataEmissao = tNFiscal.dtDataEmissao
    
    'Fecha o comando
    Call Comando_Fechar(lComando)
    
    NFiscal_Verifica_Numero_Maior = SUCESSO
    
    Exit Function
        
Erro_NFiscal_Verifica_Numero_Maior:
    
    NFiscal_Verifica_Numero_Maior = Err
    
    Select Case Err
    
        Case 60424
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 60425, 60426
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL3", Err)

        Case 60427 'Não encontrou nº NF maior ou igual. A ser tratado na rotina chamadora.
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149854)
            
    End Select
        
    'Fecha o comando
    Call Comando_Fechar(lComando)
        
    Exit Function
        
End Function

Function NotaFiscalSaida_Cancelar(ByVal objNFiscal As ClassNFiscal, ByVal dtDataCancelamento As Date) As Long
'Faz o cancelamento de uma nota fiscal de Saida

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_NotaFiscalSaida_Cancelar
    
    'ABre a transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 62152

    'Grava o Livro Fiscal a partir da Nota Fiscal
    lErro = CF("NotaFiscalSaida_Cancelar_EmTrans", objNFiscal, dtDataCancelamento)
    If lErro <> SUCESSO Then gError 126973
    
    If objNFiscal.iRollBack = 1 Then
        Call Transacao_Rollback
    Else
        'Confirma a transacao
        lErro = Transacao_Commit()
        If lErro <> SUCESSO Then gError 62175
    End If
       
    
    NotaFiscalSaida_Cancelar = SUCESSO

    Exit Function

Erro_NotaFiscalSaida_Cancelar:

    NotaFiscalSaida_Cancelar = gErr

    Select Case gErr

        Case 62152
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 62175
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case 126973
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149855)

    End Select

    Call Transacao_Rollback

    Exit Function

End Function

Function NotaFiscalSaida_Cancelar_EmTrans(ByVal objNFiscal As ClassNFiscal, ByVal dtDataCancelamento As Date) As Long
'Faz o cancelamento de uma nota fiscal de Saida

Dim lErro As Long, iIndice As Integer, lErroItemNF As Long
Dim alComando(0 To 14) As Long
Dim iClasseDocCPR As Integer, lNumIntDocCPR As Long, iFilialEmpresa As Integer
Dim lNumMovtoEstoque As Long, lNumIntItem As Long
Dim objMovEstoque As New ClassMovEstoque, objTipoDocInfo As New ClassTipoDocInfo
Dim lCodigo As Long, lNumNotaFiscal As Long, iTipoNF As Integer, iStatus As Integer
Dim tItemNF As typeItemNF
Dim dQuantResto As Double
Dim sUM As String
Dim objProduto As New ClassProduto
Dim dQuantDevUMResto As Double
Dim dFator As Double
Dim objItemNF As New ClassItemNF, lAux As Long
Dim lNumIntOrigem As Long
Dim iTipoOrigem As Integer
Dim objItemRomaneio As ClassItemRomaneioGrade
Dim iIndiceAux As Integer
Dim objNFiscalAux As New ClassNFiscal

On Error GoTo Erro_NotaFiscalSaida_Cancelar_EmTrans
    
    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 62151
    Next

    'Lê a nota fiscal
    lErro = Comando_ExecutarPos(alComando(0), "SELECT FilialEmpresa, ClasseDocCPR, NumIntDocCPR FROM NFiscal WHERE NumIntDoc = ?", 0, iFilialEmpresa, iClasseDocCPR, lNumIntDocCPR, objNFiscal.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 62153

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 62154
    If lErro <> AD_SQL_SUCESSO Then gError 62155 'Não encontrou

    'faz o lock na Nota Fiscal
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 62156
    
    'Se for uma NF Eletrônica só deixa cancelar se estiver autorizada ou denegada
    If ISSerieEletronica(objNFiscal.sSerie) And iFilialEmpresa < 50 Then
        'Lê a nota fiscal
        lErro = Comando_Executar(alComando(13), "SELECT NumIntNF FROM NFeFedProtNFe WHERE NumIntNF = ? AND  (cStat = '100' Or cStat = '205' Or cStat = '110' Or cStat = '301' Or cStat = '302')", lAux, objNFiscal.lNumIntDoc)
        If lErro <> AD_SQL_SUCESSO Then gError 206864
    
        lErro = Comando_BuscarPrimeiro(alComando(13))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 206865
        If lErro <> AD_SQL_SUCESSO Then gError 206866 'Não encontrou
    End If

    'Lê o tipodocinfo da nota fiscal
    objTipoDocInfo.iCodigo = objNFiscal.iTipoNFiscal
    lErro = CF("TipoDocInfo_Le_Codigo", objTipoDocInfo)
    If lErro <> SUCESSO And lErro <> 31415 Then gError 62157
    If lErro <> SUCESSO Then gError 62158
    
    'Se é uma nota que possui vinculação com outra que a sucede. Ex. Uma nota que tem uma devolução vinculada ou uma nota que tem um complemento vinculado.
    'If Len(Trim(objTipoDocInfo.sSiglaNFOriginal)) > 0 Or objTipoDocInfo.iComplementar <> DOCINFO_COMPLEMENTO Then
        'verifica se a nota está vinculada a sua devolução ou ao seu complemento
    lErro = Comando_Executar(alComando(1), "SELECT NumNotaFiscal, TipoNFiscal FROM NFiscal WHERE NumIntNotaOriginal = ? AND Status <> ? ", lNumNotaFiscal, iTipoNF, objNFiscal.lNumIntDoc, STATUS_CANCELADO)
    If lErro <> AD_SQL_SUCESSO Then gError 62159

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 62200
    If lErro = AD_SQL_SUCESSO Then gError 62176 'Se está vinculada, erro.
    
    'verifica se a nota está vinculada a alguma outra (um complemento, uma devolução, etc.)
    lErro = Comando_Executar(alComando(14), "SELECT N.NumNotaFiscal, N.TipoNFiscal FROM NFiscal AS N, ItensNFiscal AS I WHERE N.NumIntDoc = I.NumIntNF AND I.NumIntDocOrig IN (SELECT NumIntDoc FROM ItensNFiscal WHERE NumIntNF = ?) AND N.Status <> 7", lNumNotaFiscal, iTipoNF, objNFiscal.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 62159

    lErro = Comando_BuscarPrimeiro(alComando(14))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 62200
    
    If lErro = AD_SQL_SUCESSO Then gError 62176 'Se já foi, erro.
    
    'End If
                
    'Atualiza o status da nota fiscal
    lErro = Comando_ExecutarPos(alComando(1), "UPDATE NFiscal SET Status = ?, CodUsuarioCancel=?, MotivoCancel=?, DataRegCancel = ?, HoraRegCancel = ?, DataCancel = ?", alComando(0), STATUS_CANCELADO, gsUsuario, objNFiscal.sMotivoCancel, Date, CDbl(Time), dtDataCancelamento)
    If lErro <> AD_SQL_SUCESSO Then gError 62162
    
    'Se a nota for uma nota gerada por pedido
    If objNFiscal.lNumPedidoVenda <> 0 And objTipoDocInfo.iCodigo <> DOCINFO_NFIFVEFPV Then
        'Atualiza a qtd faturada ou desfaz a baixa do Pedido.
        
        If objTipoDocInfo.sNomeTelaNFiscal <> "NFiscalFatPedSRV" Then
            lErro = CF("CancelamentoNFiscal_Atualiza_Pedido", objNFiscal)
        Else
            lErro = CF("CancelamentoNFiscal_Atualiza_PedidoSRV", objNFiscal)
        End If
        'lErro = CF("CancelamentoNFiscal_Atualiza_Pedido", objNFiscal)
        If lErro <> SUCESSO Then gError 62207
    End If
    
    'Se a nota gerou documentos em  CPR
    If iClasseDocCPR > 0 And lNumIntDocCPR > 0 Then
        'Desfaz os documentos associados
        lErro = CF("CPR_Exclui", iClasseDocCPR, lNumIntDocCPR)
        If lErro <> SUCESSO Then gError 62163
    End If

    'não trata o cancelamento dos itens de nf para notas de conhecimento de frete porque eles não possuem
    If objNFiscal.iTipoNFiscal <> DOCINFO_NFICF And objNFiscal.iTipoNFiscal <> DOCINFO_NFIFCF Then

        tItemNF.sProduto = String(STRING_PRODUTO, 0)
        tItemNF.sUnidadeMed = String(STRING_UM_SIGLA, 0)

        'Busca os itens da nota associada
        lErroItemNF = Comando_ExecutarPos(alComando(2), "SELECT Produto, NumIntDoc, UnidadeMed, Quantidade, NumIntDocOrig FROM ItensNFiscal WHERE NumIntNF = ? ", 0, tItemNF.sProduto, lNumIntItem, tItemNF.sUnidadeMed, tItemNF.dQuantidade, tItemNF.lNumIntDocOrig, objNFiscal.lNumIntDoc)
        If lErroItemNF <> AD_SQL_SUCESSO Then gError 62164
    
        lErroItemNF = Comando_BuscarPrimeiro(alComando(2))
        If lErroItemNF <> AD_SQL_SUCESSO And lErroItemNF <> AD_SQL_SEM_DADOS Then gError 62165
        If lErroItemNF <> AD_SQL_SUCESSO Then gError 62201
        
        '###############################################################
        'Inserido por Wagner 07/08/2006
        'Acerto de erro na exclusão de movimento quando o primeiro item da Nota não
        'controla estoque e movimentos com grade
        objNFiscalAux.lNumIntDoc = objNFiscal.lNumIntDoc
        
        lErro = CF("NFiscalItens_Le", objNFiscalAux)
        If lErro <> SUCESSO Then gError 181736
        
        lErro = CF("AlocacoesNF_Le", objNFiscalAux)
        If lErro <> SUCESSO Then gError 181737
        
        iTipoOrigem = 0
    
        For iIndiceAux = 1 To objNFiscalAux.colItensNF.Count
        
            If objNFiscalAux.colItensNF(iIndiceAux).iPossuiGrade = DESMARCADO Then
                
                If objNFiscalAux.colItensNF(iIndiceAux).colAlocacoes.Count > 0 Then
                    lNumIntOrigem = objNFiscalAux.colItensNF(iIndiceAux).lNumIntDoc 'Alterado por Wagner
                    iTipoOrigem = MOVEST_TIPONUMINTDOCORIGEM_ITEMNFISCAL
                    Exit For
                End If
            Else
            
                For Each objItemRomaneio In objNFiscalAux.colItensNF(iIndiceAux).colItensRomaneioGrade
                    If objItemRomaneio.colLocalizacao.Count > 0 Then
                        iTipoOrigem = MOVEST_TIPONUMINTDOCORIGEM_ITEMNFISCALGRADE
                        lNumIntOrigem = objItemRomaneio.lNumIntDoc
                        Exit For
                    End If
                Next
                If iTipoOrigem > 0 Then Exit For
            End If
        Next
        '###############################################################
        
        If iTipoOrigem <> 0 Then
            
            objMovEstoque.iFilialEmpresa = objNFiscal.iFilialEmpresa
            
            lErro = CF("Customizacoes_MovEstoque", objMovEstoque)
            If lErro <> SUCESSO Then gError 133041
            
            'Verifica se há movimento de estoque ligado ao item
            lErro = Comando_Executar(alComando(4), "SELECT Codigo FROM MovimentoEstoque WHERE TipoNumIntDocOrigem = ? AND NumIntDocOrigem = ? AND FilialEmpresa = ?", lNumMovtoEstoque, iTipoOrigem, lNumIntOrigem, objMovEstoque.iFilialEmpresa)
            If lErro <> AD_SQL_SUCESSO Then gError 62167
        
            lErro = Comando_BuscarPrimeiro(alComando(4))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 62168
            
            'Passou a ser desnecessário porque já vai vir com o iTipoOrigem e lNumIntOrigem corretos
    '        '###################################################
    '        'Inserido por Wagner 14/06/2006
    '        If lErro <> AD_SQL_SUCESSO Then
    '
    '            'Verifica se há movimento de estoque ligado ao item de GRADE
    '            lErro = Comando_Executar(alComando(8), "SELECT M.Codigo FROM MovimentoEstoque AS M, ItensNFiscalGrade AS I WHERE M.TipoNumIntDocOrigem = ? AND I.NumIntItemNF = ? AND M.FilialEmpresa = ? AND I.NumIntDoc = M.NumIntDocOrigem ", lNumMovtoEstoque, MOVEST_TIPONUMINTDOCORIGEM_ITEMNFISCALGRADE, lNumIntItem, objMovEstoque.iFilialEmpresa)
    '            If lErro <> AD_SQL_SUCESSO Then gError 62167
    '
    '            lErro = Comando_BuscarPrimeiro(alComando(8))
    '            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 62168
    '
    '        End If
    '        '###################################################
        
            If lErro = AD_SQL_SUCESSO Then
        
                'Lê o movto de estoque da NOta fiscal
                objMovEstoque.lCodigo = lNumMovtoEstoque
                
                lErro = CF("MovEstoque_Le", objMovEstoque)
                If lErro <> SUCESSO And lErro <> 30128 Then gError 62169
                
                If lErro <> SUCESSO Then gError 62170
                
                'Lê os movimento dos itens de nota fiscal
                lErro = CF("MovEstoqueItens_Le_Desc", objMovEstoque)
                If lErro <> SUCESSO Then gError 62171
                
                'Redefine os movimento para fazer o cancelamento
                objMovEstoque.iTipoMov = 0
                
                For iIndice = 1 To objMovEstoque.colItens.Count
        ''            objMovEstoque.colItens(iIndice).lNumIntDoc = 0
                    If objMovEstoque.colItens(iIndice).iTipoMov = objTipoDocInfo.iTipoMovtoEstoque Then
                        objMovEstoque.colItens(iIndice).iTipoMov = objTipoDocInfo.iTipoMovtoEstoque2
                    ElseIf objMovEstoque.colItens(iIndice).iTipoMov = objTipoDocInfo.iTipoMovtoEstoqueConsig Then
                        objMovEstoque.colItens(iIndice).iTipoMov = objTipoDocInfo.iTipoMovtoEstoqueConsig2
                    ElseIf objMovEstoque.colItens(iIndice).iTipoMov = MOV_EST_SAIDA_TRANSF_CONSIG_TERC Then
                        objMovEstoque.colItens(iIndice).iTipoMov = MOV_EST_ESTORNO_SAIDA_TRANSF_CONSIG_TERC
                    ElseIf objMovEstoque.colItens(iIndice).iTipoMov = MOV_EST_ENTRADA_TRANSF_DISP1 Then
                        objMovEstoque.colItens(iIndice).iTipoMov = MOV_EST_ESTORNO_ENTRADA_TRANSF_DISPONIVEL
                    ElseIf objMovEstoque.colItens(iIndice).iTipoMov = MOV_EST_SAIDA_TRANSF_BENEF_TERC Then
                        objMovEstoque.colItens(iIndice).iTipoMov = MOV_EST_ESTORNO_SAIDA_TRANSF_BENEF_TERC
                    ElseIf objMovEstoque.colItens(iIndice).iTipoMov = MOV_EST_NF_VENDA Then
                        objMovEstoque.colItens(iIndice).iTipoMov = 101 'Cancelamento de Nota Fiscal de Venda
                    End If
                Next
                'Grava o movimento de estoque
                lErro = CF("MovEstoque_Grava", objMovEstoque)
                If lErro <> SUCESSO Then gError 62174
            
            End If
        
        End If
        
        Do While lErroItemNF <> AD_SQL_SEM_DADOS
                    
            objItemNF.lNumIntDoc = lNumIntItem
            objItemNF.sUnidadeMed = tItemNF.sUnidadeMed
            objItemNF.dQuantidade = tItemNF.dQuantidade
            objItemNF.sProduto = tItemNF.sProduto
            objItemNF.lNumIntDocOrig = tItemNF.lNumIntDocOrig
            
            'Cancela o item
            lErro = Comando_ExecutarPos(alComando(3), "UPDATE ItensNFiscal SET Status = ?", alComando(2), STATUS_CANCELADO)
            If lErro <> AD_SQL_SUCESSO Then gError 62166
            
            lErro = CF("ItemNFSai_Cancelar_Customizado", objNFiscal, objItemNF)
            If lErro <> SUCESSO Then gError 199712
            
            lErro = NFiscal_Exclui_ContratoCobranca(lNumIntItem)
            If lErro <> SUCESSO Then gError 199712
            
            If objNFiscal.iTipoNFiscal = DOCINFO_NFISDC Or objNFiscal.iTipoNFiscal = DOCINFO_NFISDCNT Or _
               objNFiscal.iTipoNFiscal = DOCINFO_NFISDD Or objNFiscal.iTipoNFiscal = DOCINFO_NFISODC Or _
               objNFiscal.iTipoNFiscal = DOCINFO_NFISODF Or objNFiscal.iTipoNFiscal = DOCINFO_NFISDBF Or _
               objNFiscal.iTipoNFiscal = DOCINFO_NFISDBFNE Then
                
                sUM = String(STRING_UM_SIGLA, 0)

                lErro = Comando_Executar(alComando(9), "SELECT QuantResto, UnidadeMed FROM ItemNFResto AS INFR, ItensNFiscal AS INF WHERE INFR.NumIntItemNF = INF.NumIntDoc AND NumIntItemNF = ?", _
                dQuantResto, sUM, tItemNF.lNumIntDocOrig)
                If lErro <> AD_SQL_SUCESSO Then gError 199090
                
                lErro = Comando_BuscarPrimeiro(alComando(9))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 199091
                
                If lErro = AD_SQL_SUCESSO Then
                
                    objProduto.sCodigo = tItemNF.sProduto
                    
                    'ler dados do produto
                    lErro = CF("Produto_Le", objProduto)
                    If lErro <> SUCESSO And lErro <> 28030 Then gError 199092
                
                    'converter qtde a faturar p/UMEstoque do produto
                    lErro = CF("UM_Conversao", objProduto.iClasseUM, tItemNF.sUnidadeMed, sUM, dFator)
                    If lErro <> SUCESSO Then gError 199093
                    
                    dQuantDevUMResto = tItemNF.dQuantidade * dFator
                    
                    lErro = Comando_Executar(alComando(10), "UPDATE ItemNFResto SET QuantResto = QuantResto + ? WHERE NumIntItemNF = ?", dQuantDevUMResto, tItemNF.lNumIntDocOrig)
                    If lErro <> AD_SQL_SUCESSO Then gError 199094
                        
                Else
                    
                    lErro = Comando_Executar(alComando(11), "SELECT UnidadeMed FROM ItensNFiscal AS INF WHERE NumIntDoc = ?", _
                    sUM, tItemNF.lNumIntDocOrig)
                    If lErro <> AD_SQL_SUCESSO Then gError 199095
                    
                    lErro = Comando_BuscarPrimeiro(alComando(11))
                    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 199096
                    
                    If lErro = AD_SQL_SUCESSO Then
                    
                        objProduto.sCodigo = tItemNF.sProduto
                        
                        'ler dados do produto
                        lErro = CF("Produto_Le", objProduto)
                        If lErro <> SUCESSO And lErro <> 28030 Then gError 199097
                    
                        'converter qtde a faturar p/UMEstoque do produto
                        lErro = CF("UM_Conversao", objProduto.iClasseUM, tItemNF.sUnidadeMed, sUM, dFator)
                        If lErro <> SUCESSO Then gError 199098
                        
                        dQuantDevUMResto = tItemNF.dQuantidade * dFator
                    
                        lErro = Comando_Executar(alComando(12), "INSERT INTO ItemNFResto (NumIntItemNF, QuantResto) VALUES (?,?)", tItemNF.lNumIntDocOrig, dQuantDevUMResto)
                        If lErro <> AD_SQL_SUCESSO Then gError 199099
                        
                    End If
                    
                End If
                    
            End If
            
            lErroItemNF = Comando_BuscarProximo(alComando(2))
            If lErroItemNF <> SUCESSO And lErroItemNF <> AD_SQL_SEM_DADOS Then gError 62172
        Loop

    End If
    
    'Exclui as comissoes da nota fiscal
    lErro = Comissoes_NFiscal_Exclui(objNFiscal)
    If lErro <> SUCESSO Then gError 62451
    
    'Desfaz a Estatistica de Compras
    'Trata-se de uma nota fiscal de venda
    If objTipoDocInfo.iFaturamento = TIPODOCINFO_FATURAVEL And objTipoDocInfo.iComplementar = DOCINFO_NORMAL Then
        
        'Defaz a Estatistica
        lErro = FilialClienteFilEmp_Cancela_NF(objNFiscal)
        If lErro <> SUCESSO Then gError 64151
    
        lErro = ProdutoVendido_Cancela_Estatisticas(objNFiscal)
        If lErro <> SUCESSO Then gError 86080
    
    End If
        
    'se for a exclusão de uma devolução de compra
    If objTipoDocInfo.iCompras = TIPODOCINFO_COMPRAS_DEVOLUCAO Then
        
        'Desfaz a Estatística da Filial Fornecedor
        lErro = CF("FilialFornecedor_Grava_Estatisticas", objNFiscal, CANCELAMENTO_FILIALFORNFILEMP)
        If lErro <> SUCESSO Then gError 89421
        
    End If
        
    'Verifica se o modulo de Livros Fiscais está Ativo
    If gcolModulo.Ativo(MODULO_LIVROSFISCAIS) = MODULO_ATIVO Then
                        
        'Grava o Livro Fiscal a partir da Nota Fiscal
        lErro = CF("NotaFiscal_Cancela_Fis", objNFiscal)
        If lErro <> SUCESSO Then gError 81541
    
    End If
    
    lErro = CF("NF_Cancela_RPS", objNFiscal)
    If lErro <> SUCESSO Then gError 192594
    
    'Gera um lançamento extorno para a Nota Fiscal ou se ainda não foi contabilizado Exclui
    lErro = NFiscalCancela_Contabilidade(objNFiscal, objTipoDocInfo, dtDataCancelamento, iFilialEmpresa)
    If lErro <> SUCESSO Then gError 64325
    
    lErro = CF("ItensNFEntrega_Exclui", objNFiscal)
    If lErro <> SUCESSO Then gError 183564
    
    lErro = CF("NFiscal_Cancela_Customizado", objNFiscal)
    If lErro <> SUCESSO Then gError 193788
    
    If objNFiscal.iTipoNFiscal = DOCINFO_NFISDBFNE Or objNFiscal.iTipoNFiscal = DOCINFO_NFISDBF Then
        lErro = NFiscalDev_Exclui_Dados_Benef(objNFiscal)
        If lErro <> SUCESSO Then gError 193788
    End If
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    NotaFiscalSaida_Cancelar_EmTrans = SUCESSO

    Exit Function

Erro_NotaFiscalSaida_Cancelar_EmTrans:

    NotaFiscalSaida_Cancelar_EmTrans = gErr

    Select Case gErr

        Case 62151
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 62153, 62154, 62159, 62160, 62161, 62200, 206864, 206865
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", gErr)

        Case 62155
            lErro = Rotina_Erro(vbOKOnly, "ERRO_NOTA_FISCAL_INTERNA_SAIDA_NAO_CADASTRADA", gErr, objNFiscal.sSerie, objNFiscal.lNumNotaFiscal)

        Case 62156
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_NFISCAL", gErr)

        Case 62162
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_NFISCAL", gErr, objNFiscal.sSerie, objNFiscal.lNumNotaFiscal)

        Case 62157, 62163, 62169, 62171, 62174, 62207, 64151, 62451, 64325, 81541, 89421, 133041, 181736, 181737, 183564, 192594, 199092, 199093, 199097, 199098, 199712

        Case 62158
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TIPO_NFISCAL_NAO_CADASTRADO", gErr, objTipoDocInfo.iCodigo)

        Case 62164, 62165, 62172, 199095, 199096
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSNFISCAL1", gErr)

        Case 62166
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_ITEMNF", gErr)

        Case 62167, 62168
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOESTOQUE", gErr)

        Case 62170
            lErro = Rotina_Erro(vbOKOnly, "ERRO_MOVESTOQUE_NAO_CADASTRADO", gErr, lNumIntItem)

        Case 62176, 62186
            lErro = Rotina_Erro(vbOKOnly, "ERRO_NFISCAL_VINCULADA_CANCELAR", gErr, lNumNotaFiscal, iTipoNF)

        Case 62201
            lErro = Rotina_Erro(vbOKOnly, "ERRO_NFISCAL_SEM_ITENS", gErr, objNFiscal.lNumNotaFiscal)
        
        Case 86080, 193788
        
        Case 199090, 199091
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITEMNFRESTO", gErr)

        Case 199094
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_ITEMNFRESTO", gErr)

        Case 199099
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_ITEMNFRESTO", gErr)
            
        Case 206866
            Call Rotina_Erro(vbOKOnly, "ERRO_CANCNFE_NAO_AUTORIZADA", gErr)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149856)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function
Private Function NFiscalCancela_Contabilidade(ByVal objNFiscal As ClassNFiscal, ByVal objTipoDocInfo As ClassTipoDocInfo, ByVal dtDataCancelamento As Date, ByVal iFilialEmpresa As Integer) As Long
'Gera um lançamento extorno para a Nota Fiscal ou se ainda não foi contabilizado Exclui

Dim lErro As Long
Dim objContabil As New ClassContabil
Dim objTelaAux As Object

On Error GoTo Erro_NFiscalCancela_Contabilidade
    
    lErro = objContabil.Contabil_Inicializa_Contabilidade1(objTelaAux, IIf(objTipoDocInfo.sNomeTelaNFiscal = "NFiscalSRV" Or objTipoDocInfo.sNomeTelaNFiscal = "NFiscalFatPedSRV" Or objTipoDocInfo.sNomeTelaNFiscal = "NFiscalFatGarSRV", MODULO_SERVICOS, IIf(objTipoDocInfo.sNomeTelaNFiscal = "VendaM", MODULO_PONTO_DE_VENDA, MODULO_FATURAMENTO)), objTipoDocInfo.sNomeTelaNFiscal, objTipoDocInfo.iSubTipoContabil)
    If lErro <> SUCESSO Then gError 64323
    
    lErro = objContabil.Contabil_Exclui(objNFiscal.lNumIntDoc, , , , dtDataCancelamento, iFilialEmpresa)
    If lErro <> SUCESSO Then gError 64324
    
    NFiscalCancela_Contabilidade = SUCESSO
    
    Exit Function
    
Erro_NFiscalCancela_Contabilidade:

    NFiscalCancela_Contabilidade = gErr
    
    Select Case gErr
        
        Case 64323, 64324
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149857)

    End Select
    
    Exit Function

End Function

'Maristela (Inicio) Alteração: Não atualiza mais as Datas da tabela FilialClienteFilEmp
Function FilialClienteFilEmp_Cancela_NF(ByVal objNFiscal As ClassNFiscal) As Long
'Atualiza a Estatistica de Compras
'Tem que ser chamado dentro de Transacao

Dim lErro As Long
Dim objFilCliFilEmp As New ClassFilCliFilEmp
Dim dtDataEmissao As Date
Dim lComando As Long
Dim lComando1 As Long
Dim lComando2 As Long

On Error GoTo Erro_FilialClienteFilEmp_Cancela_NF
    
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 64141

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 64142

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 64143

    objFilCliFilEmp.iFilialEmpresa = objNFiscal.iFilialEmpresa
    objFilCliFilEmp.lCodCliente = objNFiscal.lCliente
    objFilCliFilEmp.iCodFilial = objNFiscal.iFilialCli
    
    lErro = CF("FilCliFilEmp_Le_Lock", lComando, objFilCliFilEmp)
    If lErro <> SUCESSO And lErro <> 52542 Then Error 64144
    
    If lErro = SUCESSO Then
    
        If objFilCliFilEmp.lNumeroCompras > 1 Then
            
            'recalcula os valores
            objFilCliFilEmp.dValorAcumuladoCompras = objFilCliFilEmp.dValorAcumuladoCompras - objNFiscal.dValorTotal
            objFilCliFilEmp.lNumeroCompras = objFilCliFilEmp.lNumeroCompras - 1
            objFilCliFilEmp.dMediaCompra = objFilCliFilEmp.dValorAcumuladoCompras / objFilCliFilEmp.lNumeroCompras
            
            If objFilCliFilEmp.dtDataUltimaCompra = objNFiscal.dtDataEmissao Then
                
                'Pesquisa a primeira Nota Fiscal Anterior para o mesmo Cliente e Filial.
                lErro = Comando_Executar(lComando2, "SELECT DataEmissao FROM NFiscal, TiposDocInfo WHERE FilialEmpresa = ? AND Cliente = ? AND FilialCli = ? AND NumIntDoc < ? AND Status <> ? AND Status <> ? AND TiposDocInfo.Faturamento = ? AND TiposDocInfo.Complementar = ? ORDER BY NumIntDoc DESC", dtDataEmissao, objNFiscal.iFilialEmpresa, objNFiscal.lCliente, objNFiscal.iFilialCli, objNFiscal.lNumIntDoc, STATUS_CANCELADO, STATUS_EXCLUIDO, TIPODOCINFO_FATURAVEL, DOCINFO_NORMAL)
                If lErro <> AD_SQL_SUCESSO Then Error 64145
        
                lErro = Comando_BuscarPrimeiro(lComando2)
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 64146
                
                'Se não encontrar
                If lErro = AD_SQL_SEM_DADOS Then
                    objFilCliFilEmp.dtDataUltimaCompra = DATA_NULA
                Else
                    objFilCliFilEmp.dtDataUltimaCompra = dtDataEmissao
                End If
                
            End If
            
            If objFilCliFilEmp.dtDataPrimeiraCompra = objNFiscal.dtDataEmissao Then
            
                'Pesquisa a primeria Nota Fiscal depois para o mesmo Cliente e Filial.
                lErro = Comando_Executar(lComando2, "SELECT DataEmissao FROM NFiscal, TiposDocInfo WHERE FilialEmpresa = ? AND Cliente = ? AND FilialCli = ? AND NumIntDoc > ? AND Status <> ? AND Status <> ? AND TiposDocInfo.Faturamento = ? AND TiposDocInfo.Complementar = ? ORDER BY NumIntDoc", dtDataEmissao, objNFiscal.iFilialEmpresa, objNFiscal.lCliente, objNFiscal.iFilialCli, objNFiscal.lNumIntDoc, STATUS_CANCELADO, STATUS_EXCLUIDO, TIPODOCINFO_FATURAVEL, DOCINFO_NORMAL)
                If lErro <> AD_SQL_SUCESSO Then Error 64147
        
                lErro = Comando_BuscarPrimeiro(lComando2)
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 64148
                
                'Se não encontrar
                If lErro = AD_SQL_SEM_DADOS Then
                    objFilCliFilEmp.dtDataPrimeiraCompra = DATA_NULA
                Else
                    objFilCliFilEmp.dtDataPrimeiraCompra = dtDataEmissao
                End If
            
            End If
            'Maristela
            'Atualiza a tabela de FilialClienteFilEmp
            lErro = Comando_ExecutarPos(lComando1, "UPDATE FilialClienteFilEmp SET NumeroCompras =?,MediaCompra=?, ValorAcumuladoCompras=? ", lComando, objFilCliFilEmp.lNumeroCompras, objFilCliFilEmp.dMediaCompra, objFilCliFilEmp.dValorAcumuladoCompras)
            If lErro <> AD_SQL_SUCESSO Then Error 64149
            'Maristela
        Else
            
            'Atualiza a tabela de FilialClienteFilEmp
            lErro = Comando_ExecutarPos(lComando1, "DELETE FROM FilialClienteFilEmp", lComando)
            If lErro <> AD_SQL_SUCESSO Then Error 64150
                        
        End If
    
    End If
    
    'Fecha o comando
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    
    FilialClienteFilEmp_Cancela_NF = SUCESSO
    
    Exit Function
    
Erro_FilialClienteFilEmp_Cancela_NF:
    
    FilialClienteFilEmp_Cancela_NF = Err
    
    Select Case Err
        
        Case 64141, 64142, 64143
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 64144
        
        Case 64145, 64146, 64147, 64148
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", Err)
        
        Case 64149
             lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_FILIALCLIENTEFILEMP", Err)
        
        Case 64150
             lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_FILIALCLIENTEFILEMP", Err)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149858)

    End Select
    
    'Fecha o comando
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    
    Exit Function
    
End Function

Function CancelamentoNFiscal_Atualiza_Pedido(ByVal objNFiscal As ClassNFiscal) As Long
'Atualiza o Pedido de Venda após o cancelamento da NF passada em objNFiscal.

Dim lErro As Long
Dim alComando(0 To 15) As Long
Dim iIndice As Integer
Dim objPedidoVenda As New ClassPedidoDeVenda
Dim objItemNF As ClassItemNF
Dim sSelect As String
Dim tItemPedido As typeItemPedido
Dim iBloqueio As Integer
Dim dQuantItem As Double
Dim iItemPVStatus As Integer
Dim objItemRomaneio As ClassItemRomaneioGrade
Dim dQuantFaturada As Double

'Inserido por Wagner
Dim objItemPV As ClassItemPedido
Dim objNFAux As New ClassNFiscal
Dim objItemNFAux As ClassItemNF
Dim bPedidoBaixado As Boolean
Dim objProduto As ClassProduto
Dim dFator As Double, iStatus As Integer
Dim objPedidoVendaBD As New ClassPedidoDeVenda 'Inserido por Wagner 22/03/2006
Dim objTipoDocInfo As New ClassTipoDocInfo

On Error GoTo Erro_CancelamentoNFiscal_Atualiza_Pedido

    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 62208
    Next

    objTipoDocInfo.iCodigo = objNFiscal.iTipoNFiscal
    
    lErro = CF("TipoDocInfo_Le_Codigo", objTipoDocInfo)
    If lErro <> SUCESSO And lErro <> 31415 Then gError 83906
    
    'se nao for uma nf fat gerada por pedido de servico
    'If objNFiscal.iTipoNFiscal <> DOCINFO_NFFPSRV And objNFiscal.iTipoNFiscal <> DOCINFO_NFFPSRVS And objNFiscal.iTipoNFiscal <> DOCINFO_NFFPSRVP Then
    If objTipoDocInfo.sNomeTelaNFiscal <> "NFiscalFatPedSRV" Then
    
        objPedidoVenda.lCodigo = objNFiscal.lNumPedidoVenda
        objPedidoVenda.iFilialEmpresa = objNFiscal.iFilialPedido
        
        'BUsca o Pedido na tabela de Pedidos de Venda
        lErro = CF("PedidoDeVenda_Le_Lock", alComando(0), objPedidoVenda)
        If lErro <> SUCESSO And lErro <> 36986 Then gError 62210
        
        'Se encontrou
        If lErro = SUCESSO Then
        
            bPedidoBaixado = False 'Inserido por Wagner
            
            'BUsca os itens do Pedido
            lErro = Comando_ExecutarPos(alComando(2), "SELECT NumIntDoc,QuantFaturada FROM ItensPedidoDeVenda WHERE CodPedido = ? AND FilialEmpresa = ?", 0, tItemPedido.lNumIntDoc, tItemPedido.dQuantFaturada, objPedidoVenda.lCodigo, objPedidoVenda.iFilialEmpresa)
            If lErro <> AD_SQL_SUCESSO Then gError 62212
            
            lErro = Comando_BuscarPrimeiro(alComando(2))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 62213
            
            'Para cada item do pedido
            Do While lErro <> AD_SQL_SEM_DADOS
                
                dQuantItem = 0
                
                'Verifica quanto foi faturado desse item por essa nf
                For Each objItemNF In objNFiscal.colItensNF
                
                    lErro = CF("MovEstoque_ItemNF_Customizado", objItemNF, objNFiscal)
                    If lErro <> SUCESSO Then gError 197731
                    
                    If Not objItemNF Is Nothing Then
                
                
                        If objItemNF.lNumIntItemPedVenda = tItemPedido.lNumIntDoc Then
                            dQuantItem = objItemNF.dQuantidade
                            
                            For Each objItemRomaneio In objItemNF.colItensRomaneioGrade
                                
                                lErro = Comando_ExecutarPos(alComando(14), "SELECT QuantFaturada FROM ItensPedidoDeVendaGrade WHERE NumIntDoc =?", 0, dQuantItem, objItemRomaneio.lNumIntItemPV)
                                If lErro <> AD_SQL_SUCESSO Then gError 86369
                                
                                lErro = Comando_BuscarPrimeiro(alComando(14))
                                If lErro <> AD_SQL_SUCESSO Then gError 86370
                                
                                lErro = Comando_ExecutarPos(alComando(15), "UPDATE ItensPedidoDeVendaGrade SET Quantfaturada = QuantFaturada - ?", alComando(14), objItemRomaneio.dQuantidade)
                                If lErro <> AD_SQL_SUCESSO Then gError 86371
                            Next
                    
                            'Atualiza a qtd faturada o item de Pedido
                            lErro = Comando_ExecutarPos(alComando(3), "UPDATE ItensPedidoDeVenda SET QuantFaturada = QuantFaturada - ?", alComando(2), objItemNF.dQuantidade)
                            If lErro <> AD_SQL_SUCESSO Then gError 62219
                    
                            Exit For
                        End If
                    End If
                Next
                
                'BUsca o próximo item
                lErro = Comando_BuscarProximo(alComando(2))
                If lErro <> AD_SQL_SEM_DADOS And lErro <> AD_SQL_SUCESSO Then gError 62270
            
            Loop
            
'            If giTipoVersao = VERSAO_FULL Then
                'seta a variável p\ uma possível criação de 1 bloqueio parcial p\ o PV
                iBloqueio = BLOQUEIO_PARCIAL
'            End If
            
        'Se não encontrou
        Else
        
            bPedidoBaixado = True
            
            'BUsca o pedido da tabela dos Pedidos de Venda Baixados
            lErro = CF("PedidoDeVendaBaixado_LeMod", alComando(0), objPedidoVenda)
            If lErro <> SUCESSO And lErro <> 62205 Then gError 62211
            
            'Se não encontrou ---> erro
            If lErro <> SUCESSO Then gError 62218
                
            '#########################################################
            'Inserido por Wagner 22/03/2006
            objPedidoVendaBD.lNumIntDoc = objPedidoVenda.lNumIntDoc
            objPedidoVendaBD.iFilialEmpresa = objPedidoVenda.iFilialEmpresa
            objPedidoVendaBD.lCodigo = objPedidoVenda.lCodigo
            
            lErro = CF("PedidoDeVenda_Le_Todos_Completo", objPedidoVendaBD, iStatus)
            If lErro <> SUCESSO Then gError 177043
            '#########################################################
                
            'campo que nao existe na tabela de pvs baixados
            objPedidoVenda.dtDataRefFluxo = objPedidoVenda.dtDataReferencia
            
            'Desfaz a baixa do pedido de venda
            lErro = CF("PedidoDeVenda_Insere", objPedidoVenda, alComando(2))
            If lErro <> SUCESSO Then gError 62220
            
            With tItemPedido
                
                .sProduto = String(STRING_PRODUTO, 0)
                .sDescricao = String(STRING_ITEM_PEDIDO_DESCRICAO, 0)
                .sLote = String(STRING_ITEM_PEDIDO_LOTE, 0)
                .sUnidadeMed = String(STRING_UM_SIGLA, 0)
                
                'BUsca os itens baixados do pedido
                sSelect = "SELECT NumIntDoc,Produto,Quantidade,PrecoUnitario,PrecoTotal,ClasseUM,UnidadeMed,ValorDesconto,DataEntrega,Descricao,Lote,Status,ValorAbatComissao,QuantCancelada,QuantReservada,QuantFaturada,QuantOP,QuantSC, PercentMaisReceb, PercentMenosReceb, RecebForaFaixa, QuantFaturadaAMais, Prioridade, Comissao, TabelaPreco FROM ItensPedidoDeVendaBaixados WHERE  FilialEmpresa = ? AND CodPedido = ?"
                lErro = Comando_ExecutarPos(alComando(3), sSelect, 0, .lNumIntDoc, .sProduto, .dQuantidade, .dPrecoUnitario, .dPrecoTotal, .iClasseUM, .sUnidadeMed, .dValorDesconto, .dtDataEntrega, .sDescricao, .sLote, .iStatus, .dValorAbatComissao, .dQuantCancelada, .dQuantReservada, .dQuantFaturada, .dQuantOP, .dQuantSC, .dPercentMaisReceb, .dPercentMenosReceb, .iRecebForaFaixa, .dQuantFaturadaAMais, .iPrioridade, .dComissao, .iTabelaPreco, objPedidoVenda.iFilialEmpresa, objPedidoVenda.lCodigo)
                If lErro <> AD_SQL_SUCESSO Then gError 62214
                                
                lErro = Comando_BuscarPrimeiro(alComando(3))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 62215
                
                If lErro <> AD_SQL_SUCESSO Then gError 62217 'Não encontrou itens
                
                'Para cada item do Pedido
                Do While lErro <> AD_SQL_SEM_DADOS
                
                    iItemPVStatus = .iStatus
                    
                    'Atualiza a quant faturada
                    For Each objItemNF In objNFiscal.colItensNF
                    
                        lErro = CF("MovEstoque_ItemNF_Customizado", objItemNF, objNFiscal)
                        If lErro <> SUCESSO Then gError 999999
                        
                        If Not objItemNF Is Nothing Then
                    
                            If objItemNF.lNumIntItemPedVenda = .lNumIntDoc Then
                            
                                '#####################################################
                                'Inserido por Wagner
                                Set objProduto = New ClassProduto
                                
                                objProduto.sCodigo = objItemNF.sProduto
                                
                                lErro = CF("Produto_Le", objProduto)
                                If lErro <> SUCESSO And lErro <> 23080 Then gError 138549
                                
                                lErro = CF("UM_Conversao", objProduto.iClasseUM, objItemNF.sUnidadeMed, .sUnidadeMed, dFator)
                                If lErro <> SUCESSO Then gError 138550
                                '####################################################
                            
                                .dQuantFaturada = StrParaDbl(Formata_Estoque(.dQuantFaturada - (objItemNF.dQuantidade * dFator))) 'Alterado por Wagner
                                iItemPVStatus = 0
                                
                                For Each objItemRomaneio In objItemNF.colItensRomaneioGrade
                                    
                                    lErro = Comando_ExecutarPos(alComando(14), "SELECT QuantFaturada FROM ItensPedidoDeVendaGrade WHERE NumIntDoc =?", 0, dQuantItem, objItemRomaneio.lNumIntItemPV)
                                    If lErro <> AD_SQL_SUCESSO Then gError 86369
                                    
                                    lErro = Comando_BuscarPrimeiro(alComando(14))
                                    If lErro <> AD_SQL_SUCESSO Then gError 86370
                                    
                                    lErro = Comando_ExecutarPos(alComando(15), "UPDATE ItensPedidoDeVendaGrade SET Quantfaturada = QuantFaturada - ?", alComando(14), objItemRomaneio.dQuantidade)
                                    If lErro <> AD_SQL_SUCESSO Then gError 86371
                                Next
                        
                                Exit For
                            End If
                        End If
                    Next
                    
                    objPedidoVenda.colItensPedido.Add .iFilialEmpresa, .lCodPedido, 0, .sProduto, .dQuantidade, .dPrecoUnitario, .dPrecoTotal, .dValorDesconto, .dtDataEntrega, .sProdutoDescricao, .dValorAbatComissao, .dQuantCancelada, .dQuantReservada, .colReservaItem, .sProdutoNomeReduzido, .sUnidadeMed, .sLote, .sUMEstoque, .iClasseUM, .dQuantFaturada, .dQuantAFaturar, .sDescricao, iItemPVStatus, .iControleEstoque, .dQuantOP, .dQuantSC, 0, 0, 0, 0, 0, 0, .lNumIntDoc
                    
                    'Desfaz a baixa do item de pedido de venda
                    lErro = Comando_Executar(alComando(4), "INSERT INTO ItensPedidoDeVenda (FilialEmpresa, CodPedido, NumIntDoc,Produto,Quantidade,PrecoUnitario,PrecoTotal,ClasseUM,UnidadeMed,ValorDesconto,DataEntrega,Descricao,Lote,Status,ValorAbatComissao,QuantCancelada,QuantReservada,QuantFaturada,QuantOP,QuantSC, PercentMaisReceb, PercentMenosReceb, RecebForaFaixa, QuantFaturadaAMais, Prioridade, Comissao, TabelaPreco) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                        objPedidoVenda.iFilialEmpresa, objPedidoVenda.lCodigo, .lNumIntDoc, .sProduto, .dQuantidade, .dPrecoUnitario, .dPrecoTotal, .iClasseUM, .sUnidadeMed, .dValorDesconto, .dtDataEntrega, .sDescricao, .sLote, iItemPVStatus, .dValorAbatComissao, .dQuantCancelada, .dQuantReservada, .dQuantFaturada, .dQuantOP, .dQuantSC, .dPercentMaisReceb, .dPercentMenosReceb, .iRecebForaFaixa, .dQuantFaturadaAMais, .iPrioridade, .dComissao, .iTabelaPreco)
                    If lErro <> AD_SQL_SUCESSO Then gError 62221
                
                    'Exclui o item da tabela dos itens baixados
                    lErro = Comando_ExecutarPos(alComando(5), "DELETE FROM ItensPedidoDeVendaBaixados", alComando(3))
                    If lErro <> AD_SQL_SUCESSO Then gError 62222
                
                    'BUsca o próximo item
                    lErro = Comando_BuscarProximo(alComando(3))
                    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 62269
                    
                Loop
                
            End With
                
            '####################################################
            'Inserido por Wagner 22/03/2006
            lErro = CF("PVItens_Grava_Customizado", objPedidoVendaBD)
            If lErro <> SUCESSO Then gError 177039
            '####################################################
                
            'Exclui o pedido de venda da tabela dos baixados
            lErro = Comando_ExecutarPos(alComando(6), "DELETE FROM PedidosDeVendaBaixados", alComando(0))
            If lErro <> AD_SQL_SUCESSO Then gError 62223
            
    '        'Desfaz a baixa da tributação do pedido
    '        lErro = CF("TributacaoPV_Desfaz_Baixa", objPedidoVenda)
    '        If lErro <> SUCESSO Then gError 62245
            
            'Desfaz a baixa das parcelas do pedido
            lErro = CF("ParcelasPV_Desfaz_Baixa", objPedidoVenda, alComando(7), alComando(8))
            If lErro <> SUCESSO Then gError 62248
    
            'Desfaz a baixa das comissoes do pedido
            lErro = CF("ComissoesPV_Desfaz_Baixa", objPedidoVenda, alComando(9), alComando(10))
            If lErro <> SUCESSO Then gError 62249
            
'            If giTipoVersao = VERSAO_FULL Then
                'Desfaz a baixa dos bloqueios do pedido
                lErro = CF("BloqueiosPV_Desfaz_Baixa", objPedidoVenda, alComando(11), alComando(12))
                If lErro <> SUCESSO Then gError 62250
                
                'seta a variável p\ uma possível criação de 1 bloqueio parcial p\ o PV
                iBloqueio = BLOQUEIO_NAO_RESERVA
'            End If
            
        End If
    
'        If giTipoVersao = VERSAO_FULL Then
            
            'Inclui, se necessário, um bloqueio no tipo passado para o pedido de venda
            'faturado pela NF passada
            lErro = CF("CancelaNFiscal_Inclui_BloqueioPV", alComando(13), objNFiscal, objPedidoVenda, iBloqueio)
            If lErro <> SUCESSO Then gError 62268
            
'        End If
        
        '###########################################
        'Alterado por Wagner
        'Não pode simplesmente atualizar o que foi faturado porque a nota a ser cancelada
        'Desfaz possíveis baixas manuais
        'Solução: Se o pedido estiver baixado verifica a quantidade livre do pedido e
        'atualiza em ProdutosFiliais senão atualiza só o que deixou de ser faturado.
        objNFAux.lNumIntDoc = objNFiscal.lNumIntDoc
        objNFAux.lNumNotaFiscal = objNFiscal.lNumNotaFiscal
        objNFAux.lNumPedidoVenda = objNFiscal.lNumPedidoVenda
        objNFAux.iFilialEmpresa = objNFiscal.iFilialEmpresa
        objNFAux.iFilialPedido = objNFiscal.iFilialPedido
        
        'mario 19/01/01
        'Troca o sinal da quantidade para que a função ProdutoFilial_Subtrai_NF_QuantPedida adicione as quantidades dos itens as quantidade em pedido de cada produto
        For Each objItemNF In objNFiscal.colItensNF
            
            lErro = CF("MovEstoque_ItemNF_Customizado", objItemNF, objNFiscal)
            If lErro <> SUCESSO Then gError 999999
            
            If Not objItemNF Is Nothing Then
            
            'objItemNF.dQuantidade = -objItemNF.dQuantidade'Comentado por Wagner
            
            'Instancia um objTemporário só para poder manupular os valores
            Set objItemNFAux = New ClassItemNF
        
            objItemNFAux.sProduto = objItemNF.sProduto
            objItemNFAux.sUnidadeMed = objItemNF.sUnidadeMed
            objItemNFAux.iAlmoxarifado = objItemNF.iAlmoxarifado
            
            Set objItemNFAux.colItensRomaneioGrade = objItemNF.colItensRomaneioGrade
        
            For iIndice = 1 To objItemNF.colItensRomaneioGrade.Count
                objItemNF.colItensRomaneioGrade(iIndice).dQuantidade = -objItemNF.colItensRomaneioGrade(iIndice).dQuantidade
            Next
            
            'Se o pedido de venda estava baixado
            If bPedidoBaixado Then
            
                'Encontra o item do Pedido de venda associado
                For Each objItemPV In objPedidoVenda.colItensPedido
                
                    'Se esse item NF for associado a esse item PV
                    If objItemNF.lNumIntItemPedVenda = objItemPV.lNumIntDoc Then
                        
                        'O que vai subir como disponível tem que ser atualizado
                        objItemNFAux.dQuantidade = objItemPV.dQuantFaturada - objItemPV.dQuantidade
                
                        Exit For
                    End If
            
                Next
            
            Else
                'Só altera o sinal para fazer a soma ao invés da subtração
                objItemNFAux.dQuantidade = -objItemNF.dQuantidade
            End If
        
            objNFAux.colItensNF.Add1 objItemNFAux
            
            
            End If
        Next
        
        'Atualiza, para cada produto, a quantidade em pedido em ProdutosFilial
        lErro = CF("ProdutoFilial_Subtrai_NF_QuantPedida", objNFAux)
        If lErro <> SUCESSO Then gError 83542
        
    '    'Retorna ao  sinal da quantidade original
    '    For Each objItemNF In objNFiscal.ColItensNF
    '        objItemNF.dQuantidade = -objItemNF.dQuantidade
    '    Next
        'fim mario 19/01/01
        '####################################################

    End If

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
       
    CancelamentoNFiscal_Atualiza_Pedido = SUCESSO
        
    Exit Function
   
Erro_CancelamentoNFiscal_Atualiza_Pedido:
    
    CancelamentoNFiscal_Atualiza_Pedido = gErr
    
    Select Case gErr
    
        Case 62208
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 62209, 62210, 62211, 62246, 62247, 62248, 62249, 62250, 62268, 62270, 83542, 62220, 83906, 138549, 138550, 140318, 177039, 177043, 197731, 999999
        
        Case 62212, 62213, 62214, 62215, 62269, 86369, 86370
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSPEDIDODEVENDA", gErr)
        
        Case 62216, 62217
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ITEMPV_NAO_CADASTRADO", gErr, objItemNF.lNumIntItemPedVenda)
        
        Case 62218
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PEDIDO_VENDA_NAO_CADASTRADO1", gErr, objPedidoVenda.lCodigo, objPedidoVenda.iFilialEmpresa)
        
        Case 62219, 86371
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_PEDVENDA", gErr, objPedidoVenda.lCodigo)
        
        Case 62221
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_ITENSPV", gErr)
        
        Case 62222
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_ITENSPEDIDODEVENDA", gErr, objPedidoVenda.lCodigo)
            
        Case 62223
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_PEDIDODEVENDA", gErr, objPedidoVenda.lCodigo)
                    
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149859)
            
    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Function CPR_Exclui(ByVal iClasseDocCPR As Integer, ByVal lNumIntDocCPR As Long, Optional ByVal iExclusao As Integer = 0) As Long
'Usada no Cancelamento de NFiscais.
'Exclui o documento de CPR com a classe e o número interno passados.
'Se iExclusao = 1 indica que se trata de uma exclusão fisica devido a exclusao de uma nota fiscal
'ATENÇÃO : ESSA FUNÇÃO DEVE SER CHAMADA EM TRANSAÇÃO.

Dim lErro As Long
Dim objContabil As New ClassContabil
Dim objTituloReceber As ClassTituloReceber
Dim objTituloPagar As ClassTituloPagar
Dim objNFPag As ClassNFsPag
Dim objCreditoPag As ClassCreditoPagar
Dim objDebitoRec As ClassDebitoRecCli

On Error GoTo Erro_CPR_Exclui

    Select Case iClasseDocCPR

        Case CPR_TITULO_PAGAR
            'Exclui o título a pagar
            Set objTituloPagar = New ClassTituloPagar
            objTituloPagar.lNumIntDoc = lNumIntDocCPR
            
            lErro = CF("TituloPagar_Le1", objTituloPagar)
            If lErro <> SUCESSO And lErro <> 89122 Then gError 62439
            
            'se não encontrou o titulo ==> possivelmente ele está baixado.
            If lErro = 89122 Then gError 89106
            
            'se for um cancelamento e o titulo estiver excluido
            If iExclusao = 0 And objTituloPagar.iStatus = STATUS_EXCLUIDO Then gError 89124
            
            If iExclusao = 1 Then objTituloPagar.iExclusao = 1
            
            lErro = CF("TituloPagar_Exclui_EmTransacao", objTituloPagar, objContabil)
            If lErro <> SUCESSO Then gError 62177
            
        Case CPR_TITULO_RECEBER
            
            Set objTituloReceber = New ClassTituloReceber
            objTituloReceber.lNumIntDoc = lNumIntDocCPR
            
            'Localiza  o titulo a receber
            lErro = CF("TituloReceber_Le", objTituloReceber, iExclusao)
            If lErro <> SUCESSO And lErro <> 26061 Then gError 62178
            
            'se não encontrou o titulo ==> possivelmente ele está baixado.
            If lErro <> SUCESSO Then gError 89107
            
            'se for um cancelamento e o titulo estiver excluido
            If iExclusao = 0 And objTituloReceber.iStatus = STATUS_EXCLUIDO Then gError 89125
            
            If objTituloReceber.sSiglaDocumento = TIPODOC_FATURA_A_RECEBER Then gError 62441
            
            If iExclusao = 1 Then objTituloReceber.iExclusao = 1
            
            'Exclui o titulo a receber
            lErro = CF("TituloReceber_Exclui_EmTransacao", objTituloReceber, objContabil)
            If lErro <> SUCESSO Then gError 62180

        Case CPR_NF_PAGAR

            Set objNFPag = New ClassNFsPag
            objNFPag.lNumIntDoc = lNumIntDocCPR
            
            lErro = CF("NFPag_Le", objNFPag, iExclusao)
            If lErro <> SUCESSO And lErro <> 18257 Then gError 62458
            
            If lErro <> SUCESSO Then gError 89108
            
            'se for um cancelamento e o titulo estiver excluido
            If iExclusao = 0 And objNFPag.iStatus = STATUS_EXCLUIDO Then gError 89126
            
            If objNFPag.lNumIntTitPag <> 0 Then gError 62440
            
            If iExclusao = 1 Then objNFPag.iExclusao = 1
            
            'Exclui a Nota Fiscal a Pagar
            lErro = CF("NFPag_Exclui_EmTransacao", objNFPag, objContabil)
            If lErro <> SUCESSO Then gError 62181

        Case CPR_DEBITO_RECEBER

            Set objDebitoRec = New ClassDebitoRecCli
            objDebitoRec.lNumIntDoc = lNumIntDocCPR
            
            lErro = CF("DebitoReceber_Le", objDebitoRec, iExclusao)
            If lErro <> SUCESSO And lErro <> 17835 Then gError 62459
            
            If lErro <> SUCESSO Then gError 89109
            
            'se for um cancelamento e o titulo estiver excluido
            If iExclusao = 0 And objDebitoRec.iStatus = STATUS_EXCLUIDO Then gError 89127
            
            If iExclusao = 1 Then objDebitoRec.iExclusao = 1
        
            'Exclui o Débito a receber
            lErro = CF("DebitoRecCli_Exclui_EmTransacao", objDebitoRec, objContabil)
            If lErro <> SUCESSO Then gError 62182
            
        Case CPR_CREDITO_PAGAR

            Set objCreditoPag = New ClassCreditoPagar
            objCreditoPag.lNumIntDoc = lNumIntDocCPR
            
            'Localiza o Credito a Pagar
            lErro = CF("CreditoPagar_Le", objCreditoPag, iExclusao)
            If lErro <> SUCESSO And lErro <> 17071 Then gError 62183
            
            If lErro <> SUCESSO Then gError 62184
            
            'se for um cancelamento e o titulo estiver excluido
            If iExclusao = 0 And objCreditoPag.iStatus = STATUS_EXCLUIDO Then gError 89128
            
            If iExclusao = 1 Then objCreditoPag.iExclusao = 1
            
            'Exclui o crédito a pagar
            lErro = CF("CreditoPagar_Exclui_EmTransacao", objCreditoPag, objContabil)
            If lErro <> SUCESSO Then gError 62185

    End Select

    CPR_Exclui = SUCESSO

    Exit Function

Erro_CPR_Exclui:

    CPR_Exclui = gErr

    Select Case gErr

        Case 62177, 62178, 62180, 62181, 62182, 62183, 62185, 62439, 62458, 62459

        Case 62179
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TITULORECEBER_NAO_CADASTRADO", gErr, lNumIntDocCPR)
        
        Case 62184
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CREDITOPAGAR_NAO_CADASTRADO1", gErr, lNumIntDocCPR)
            
        Case 62440
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FATURAPAG_NAO_EXCLUIDA", gErr)
            
        Case 62441
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FATURAREC_NAO_EXCLUIDA", gErr, objTituloReceber.lNumTitulo)
        
        Case 89106
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TITULO_PAGAR_NAO_ENCONTRADO", gErr, lNumIntDocCPR)
        
        Case 89107
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TITULO_RECEBER_NAO_ENCONTRADO", gErr, lNumIntDocCPR)
        
        Case 89108
            lErro = Rotina_Erro(vbOKOnly, "ERRO_NFPAG_NAO_ENCONTRADO", gErr, lNumIntDocCPR)
        
        Case 89109
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CREDITO_RECEBER_NAO_ENCONTRADO", gErr, lNumIntDocCPR)
        
        Case 89124
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TITULO_PAGAR_EXCLUIDO", gErr, lNumIntDocCPR)
        
        Case 89125
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TITULO_RECEBER_EXCLUIDO", gErr, lNumIntDocCPR)
        
        Case 89126
            lErro = Rotina_Erro(vbOKOnly, "ERRO_NFPAG_NAO_EXCLUIDO", gErr, lNumIntDocCPR)
        
        Case 89127
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CREDITO_RECEBER_EXCLUIDO", gErr, lNumIntDocCPR)
        
        Case 89128
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CREDITO_PAGAR_EXCLUIDO", gErr, lNumIntDocCPR)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149860)

    End Select

    Exit Function

End Function

Function CancelaNFiscal_Inclui_BloqueioPV(ByVal lComando As Long, ByVal objNFiscal As ClassNFiscal, ByVal objPedidoVenda As ClassPedidoDeVenda, ByVal iBloqueio As Integer) As Long
'Inclui se necessário um bloqueio no tipo passado no pedido passado que foi
'faturado pela nota fiscal cancelada passada em objNfiscal.

Dim lErro As Long
Dim objBloqueioPV As ClassBloqueioPV
Dim bIncluirBloq As Boolean
Dim objItemNF As ClassItemNF
Dim objProduto As New ClassProduto
Dim bPossuiReserva As Boolean

On Error GoTo Erro_CancelaNFiscal_Inclui_BloqueioPV
    
    bIncluirBloq = True
    bPossuiReserva = False
    
    'Para cada item da NF
    For Each objItemNF In objNFiscal.colItensNF
    
        objProduto.sCodigo = objItemNF.sProduto
        'Lê o produto
        lErro = CF("Produto_Le", objProduto)
        If lErro <> SUCESSO And lErro <> 28030 Then Error 11111
        If lErro <> SUCESSO Then Error 11112
        'Verifica se a nota possui algum produto com controle de estoque de reserva
        If objProduto.iControleEstoque = PRODUTO_CONTROLE_RESERVA Then
            bPossuiReserva = True
            Exit For
        End If
    Next
    
    'Se pelo menos um dos produtos possui reserva
    If bPossuiReserva Then
        'Lê os bloqueios do pedido
        lErro = CF("BloqueiosPV_Le", objPedidoVenda)
        If lErro <> SUCESSO Then Error 62246
        
        'Verifica se já possui um bloqueio de estoque
        For Each objBloqueioPV In objPedidoVenda.colBloqueiosPV
            If (objPedidoVenda.iTipoPedido = BLOQUEIO_NAO_RESERVA Or objPedidoVenda.iTipoPedido = BLOQUEIO_TOTAL Or objPedidoVenda.iTipoPedido = BLOQUEIO_PARCIAL) And objBloqueioPV.dtDataLib = DATA_NULA Then
                bIncluirBloq = False
                Exit For
            End If
        Next
        
        'Se não possui nenum bloqueio de  estoque
        If bIncluirBloq = True Then
            'Gera um bloqueio do tipo passado
            Set objBloqueioPV = New ClassBloqueioPV
            objBloqueioPV.dtData = gdtDataAtual
            objBloqueioPV.iFilialEmpresa = objPedidoVenda.iFilialEmpresa
            objBloqueioPV.lPedidoDeVendas = objPedidoVenda.lCodigo
            objBloqueioPV.iTipoDeBloqueio = iBloqueio
            objBloqueioPV.sCodUsuario = gsUsuario
            objBloqueioPV.dtData = gdtDataAtual
            objBloqueioPV.dtDataLib = DATA_NULA
            
            'Inclui o bloqueio na tabela dos bloqueios de PV
            lErro = CF("BloqueioPV_Insere", lComando, objBloqueioPV)
            If lErro <> AD_SQL_SUCESSO Then Error 62247
        End If
        
    End If
    
    CancelaNFiscal_Inclui_BloqueioPV = SUCESSO
    
    Exit Function
    
Erro_CancelaNFiscal_Inclui_BloqueioPV:

    CancelaNFiscal_Inclui_BloqueioPV = Err
    
    Select Case Err
    
        Case 11111
            
        Case 11112
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_NAO_CADASTRADO", Err, objProduto.sCodigo)
    
        Case 62246, 62247
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149861)
            
    End Select
    
    Exit Function

End Function

Function Serie_Unlock_ImpressaoNF(ByVal objSerie As ClassSerie) As Long
'Faz Unlock no Relatorio de Notas Fiscais

Dim lErro As Long
Dim iLockImpressao As Integer
Dim lComando As Long
Dim lComando1 As Long
Dim lTransacao As Long
 
On Error GoTo Erro_Serie_Unlock_ImpressaoNF
    
    'Abertura transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 61033
    
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 60398
    
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 60399
    
    'Lê a Série para poder Unlockar
    lErro = Comando_ExecutarPos(lComando, "SELECT LockImpressao FROM Serie WHERE Serie = ? AND FilialEmpresa = ?", 0, iLockImpressao, objSerie.sSerie, giFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then Error 60400

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60401

    'Série não está cadastrada
    If lErro = AD_SQL_SEM_DADOS Then Error 60402
    
'    'Se está não está Lockado então ---- > ERRO
'    If iLockImpressao = RELATORIO_NF_NAO_LOCKADO Then Error 60403
    
    'Estava lockado então Unlocka
    lErro = Comando_ExecutarPos(lComando1, "UPDATE Serie SET LockImpressao = ?", lComando, RELATORIO_NF_NAO_LOCKADO)
    If lErro <> AD_SQL_SUCESSO Then Error 60404

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 61034

    Serie_Unlock_ImpressaoNF = SUCESSO
    
    Exit Function
    
Erro_Serie_Unlock_ImpressaoNF:

    Serie_Unlock_ImpressaoNF = Err
    
    Select Case Err
        
        Case 60398, 60399
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 60400, 60401
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SERIE1", Err, objSerie.sSerie)
        
        Case 60402 'Não encontrou, a  ser Tratado na rotina chamadora
        
'        Case 60403 'Relatorio não Lockado Anteriormente
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_UNLOCK_SERIE_IMPRESSAO_NF", Err, objSerie.sSerie)
        
        Case 60404
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SERIE", Err, objSerie.sSerie)
        
        Case 61033
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
        
        Case 61034
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149862)

    End Select

    'Fechamento transação
    Call Transacao_Rollback

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Function Serie_Unlock_Atualiza_ImpressaoNF(ByVal objSerie As ClassSerie) As Long
'Faz Unlock no Relatório de NF e Atualiza o Número da última Nota impressa.

Dim lErro As Long
Dim iLockImpressao As Integer
Dim lComando As Long
Dim lComando1 As Long
Dim lTransacao As Long

On Error GoTo Erro_Serie_Unlock_Atualiza_ImpressaoNF
    
    'Abertura transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 61035
    
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 60405
    
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 60406
    
    'Lê a Série para poder lockar
    lErro = Comando_ExecutarPos(lComando, "SELECT LockImpressao FROM Serie WHERE Serie = ? AND FilialEmpresa = ?", 0, iLockImpressao, objSerie.sSerie, giFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then Error 60407

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60408

    'Série não está cadastrada
    If lErro = AD_SQL_SEM_DADOS Then Error 60409
    
'    'Se está não Lockado então ---- > ERRO
'    If iLockImpressao = RELATORIO_NF_NAO_LOCKADO Then Error 60410
    
    'Se estava lockado então unlocka e altera próximo número de Nota a imprimir
    lErro = Comando_ExecutarPos(lComando1, "UPDATE Serie SET LockImpressao = ?, ProxNumNFiscalImpressa = ?", lComando, RELATORIO_NF_NAO_LOCKADO, objSerie.lProxNumNFiscalImpressa)
    If lErro <> AD_SQL_SUCESSO Then Error 60411

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 61036

    Serie_Unlock_Atualiza_ImpressaoNF = SUCESSO
    
    Exit Function
    
Erro_Serie_Unlock_Atualiza_ImpressaoNF:

    Serie_Unlock_Atualiza_ImpressaoNF = Err
    
    Select Case Err
        
        Case 60405, 60406
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 60407, 60408
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SERIE1", Err, objSerie.sSerie)
        
        Case 60409 'Não encontrou , a ser Tratado na rotina chamadora
        
'        Case 60410 'Relatorio não Lockado Anteriormente
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_UNLOCK_SERIE_IMPRESSAO_NF", Err, objSerie.sSerie)
        
        Case 60411
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SERIE", Err, objSerie.sSerie)

        Case 61035
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
        
        Case 61036
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149863)


    End Select

    'Fechamento transação
    Call Transacao_Rollback
    
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Function Serie_Lock_ImpressaoNFiscal(ByVal objSerie As ClassSerie) As Long

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim tSerie As typeSerie
Dim vbMsgRes As VbMsgBoxResult
Dim lTransacao As Long

On Error GoTo Erro_Serie_Lock_ImpressaoNFiscal
    
    'Abertura transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 61014
    
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 60383
    
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 60384
    
    tSerie.sNomeTsk = String(STRING_NOME_TSK, 0)
    
    'Lê a Série para poder lockar
    lErro = Comando_ExecutarPos(lComando, "SELECT LockImpressao, ProxNumNFiscalImpressa, NomeTsk FROM Serie WHERE Serie = ? AND FilialEmpresa = ?", 0, tSerie.iLockImpressao, tSerie.lProxNumNFiscalImpressa, tSerie.sNomeTsk, objSerie.sSerie, giFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then Error 60385

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 60386

    'Série não está cadastrada
    If lErro = AD_SQL_SEM_DADOS Then Error 60387
    
    'Se está Lockado então ---- > ERRO
    If tSerie.iLockImpressao = RELATORIO_NF_LOCKADO Then
        
        'Avisa que a Impressão está bloqueada
        vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_NFISCAL_LOCKADA")
        If vbMsgRes = vbNo Then Error 60388
        
    End If
    
    objSerie.iLockImpressao = RELATORIO_NF_LOCKADO
    objSerie.lProxNumNFiscalImpressa = tSerie.lProxNumNFiscalImpressa
    objSerie.sNomeTsk = tSerie.sNomeTsk
    
    'Se não estava lockado então locka
    lErro = Comando_ExecutarPos(lComando1, "UPDATE Serie SET LockImpressao = ?", lComando, RELATORIO_NF_LOCKADO)
    If lErro <> AD_SQL_SUCESSO Then Error 60389

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 61016

    Serie_Lock_ImpressaoNFiscal = SUCESSO
    
    Exit Function
    
Erro_Serie_Lock_ImpressaoNFiscal:

    Serie_Lock_ImpressaoNFiscal = Err
    
    Select Case Err
        
        Case 60383, 60384
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 60385, 60386
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SERIE1", Err, objSerie.sSerie)
        
        Case 60387 'Não encontrou
        
        Case 60388 'Relatorio Lockado
        
        Case 60389
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SERIE", Err, objSerie.sSerie)
        
        Case 61014
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 61016
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149864)

    End Select

    'Fechamento transação
    Call Transacao_Rollback

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Function Serie_Altera_Imprimindo(ByVal objSerie As ClassSerie) As Long

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim tSerie As typeSerie
Dim lTransacao As Long

On Error GoTo Erro_Serie_Altera_Imprimindo
    
    'Abertura transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 61015
    
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 61004
    
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 61005
    
    'Lê a Série para poder lockar
    lErro = Comando_ExecutarPos(lComando, "SELECT Imprimindo FROM Serie WHERE Serie = ? AND FilialEmpresa = ?", 0, tSerie.iImprimindo, objSerie.sSerie, giFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then Error 61006

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 61007
    
    'Série não está cadastrada
    If lErro = AD_SQL_SEM_DADOS Then Error 61008
    
    'Se não estava lockado então locka
    lErro = Comando_ExecutarPos(lComando1, "UPDATE Serie SET Imprimindo = ?", lComando, RELATORIO_NF_IMPRIMINDO)
    If lErro <> AD_SQL_SUCESSO Then Error 61009

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 61017

    Serie_Altera_Imprimindo = SUCESSO
    
    Exit Function
    
Erro_Serie_Altera_Imprimindo:

    Serie_Altera_Imprimindo = Err
    
    Select Case Err
        
        Case 61004, 61005
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 61006, 61007
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SERIE1", Err, objSerie.sSerie)
        
        Case 61008 'Não encontrou
        
        Case 61009
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SERIE", Err, objSerie.sSerie)
        
        Case 61015
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
        
        Case 61017
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149865)

    End Select

    'Fechamento transação
    Call Transacao_Rollback

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Function Serie_Altera_Nao_Imprimindo(ByVal objSerie As ClassSerie) As Long

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim tSerie As typeSerie
Dim lTransacao As Long

On Error GoTo Erro_Serie_Altera_Nao_Imprimindo
    
    'Abertura transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 61020
    
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 61021
    
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 61022
    
    'Lê a Série para poder lockar
    lErro = Comando_ExecutarPos(lComando, "SELECT Imprimindo FROM Serie WHERE Serie = ? AND FilialEmpresa = ?", 0, tSerie.iImprimindo, objSerie.sSerie, giFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then Error 61023

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 61024
    
    'Série não está cadastrada
    If lErro = AD_SQL_SEM_DADOS Then Error 61025
    
    'Se não estava lockado então locka
    lErro = Comando_ExecutarPos(lComando1, "UPDATE Serie SET Imprimindo = ?", lComando, RELATORIO_NF_NAO_IMPRIMINDO)
    If lErro <> AD_SQL_SUCESSO Then Error 61026

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 61027

    Serie_Altera_Nao_Imprimindo = SUCESSO
    
    Exit Function
    
Erro_Serie_Altera_Nao_Imprimindo:

    Serie_Altera_Nao_Imprimindo = Err
    
    Select Case Err
        
        Case 61020
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
        
        Case 61021, 61022
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 61023, 61024
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SERIE1", Err, objSerie.sSerie)
        
        Case 61025 'Não encontrou
        
        Case 61026
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SERIE", Err, objSerie.sSerie)
        
        Case 61027
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149866)

    End Select

    'Fechamento transação
    Call Transacao_Rollback

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Function Comissoes_NFiscal_Exclui(ByVal objNFiscal As ClassNFiscal) As Long

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim dtDataBaixa As Date

 On Error GoTo Erro_Comissoes_NFiscal_Exclui

    'ABre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 62452
    Next
    
    'Lê as comissões da nota fiscal passada
    lErro = Comando_ExecutarPos(alComando(0), "SELECT DataBaixa FROM Comissoes WHERE TipoTitulo = ? AND NumIntDoc = ?", 0, dtDataBaixa, TIPO_NF, objNFiscal.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then Error 62453
    
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 62454
    
    'Para cada comissao encontrada
    Do While lErro = AD_SQL_SUCESSO
        'Se houver comissao baixada --> Erro
        If dtDataBaixa <> DATA_NULA Then Error 62456
        
        'Exclui a comissão da tabela de comissões
        lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM Comissoes", alComando(0))
        If lErro <> AD_SQL_SUCESSO Then Error 62457
        
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 62455
        
    Loop
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Comissoes_NFiscal_Exclui = SUCESSO

    Exit Function
    
Erro_Comissoes_NFiscal_Exclui:

    Comissoes_NFiscal_Exclui = Err
    
    Select Case Err
    
        Case 62452
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
            
        Case 62453, 62454, 62455
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_COMISSOES3", Err)
        
        Case 62456
            Call Rotina_Erro(vbOKOnly, "ERRO_COMISSAO_BAIXADA_CANC_NFISCAL", Err)
        
        Case 62457
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_COMISSOESNF2", Err)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149867)
    
    End Select
    
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function
    

End Function

Private Function NFiscal_Altera_Status(ByVal lNumIntDoc As Long, ByVal iClasseDocCPR, ByVal iStatus As Integer) As Long
'Altera o Status da Nota Fiscal para a ClasseDoc e NumIntDoc passados

Dim lErro As Long
Dim lComando As Long
Dim lComando2 As Long
Dim lNumIntDocAux As Long

On Error GoTo Erro_NFiscal_Altera_Status

    'Inicializa comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 61281
    
    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 61282

    'Lê as Notas Fiscas que tenham o NumIntDocCPR e ClasseDocCPR igual ao passado
    lErro = Comando_ExecutarPos(lComando, "SELECT NumIntDoc FROM NFiscal WHERE ClasseDocCPR = ? AND NumIntDocCPR = ?", 0, lNumIntDocAux, iClasseDocCPR, lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then Error 61283

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 61284
     
    Do While lErro = AD_SQL_SUCESSO
        
        'Altera o status da Nota para o Status passado
        lErro = Comando_ExecutarPos(lComando2, "UPDATE NFiscal SET Status = ?", lComando, iStatus)
        If lErro <> AD_SQL_SUCESSO Then Error 61285
    
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 61286
    
    Loop
    
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)

    NFiscal_Altera_Status = SUCESSO
    
    Exit Function
    
Erro_NFiscal_Altera_Status:

    NFiscal_Altera_Status = Err
    
    Select Case Err
    
        Case 61281, 61282
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 61283, 61284, 61286
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL3", Err)
        
        Case 61285
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_NFISCAL2", Err)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149868)

    End Select
    
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)

    Exit Function

End Function

'------- Raphael 19/07/00 Criadas versão 2 para Livro Fiscal

Function NFiscal_Grava(ByVal objNFiscal As ClassNFiscal, ByVal objContabil As ClassContabil) As Long
'grava uma nota fiscal

Dim lErro As Long
Dim lTransacao As Long
Dim lNumNotaFiscal As Long
Dim vbMsgRes As VbMsgBoxResult

On Error GoTo Erro_NFiscal_Grava

    lNumNotaFiscal = objNFiscal.lNumNotaFiscal

    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 35961

    Set objNFiscal.objContabil = objContabil

    lErro = CF("NFiscal_Grava_EmTrans", objNFiscal, objContabil)
'    If lErro <> SUCESSO Then gError 106557
    
    If lErro = SUCESSO Then
    
        'Faz o Commit da Transação
        lErro = Transacao_Commit()
        If lErro <> AD_SQL_SUCESSO Then gError 39004

    Else
    
        'se nao conseguiu alterar por exclusao;inclusao e e' uma alteracao ==> tenta alterar so alguns dados como antigamente
        If lNumNotaFiscal <> 0 Then
    
            'Dá a Mensagem de aviso que só será gravado a contabilidade
            vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_ALTERACAO_NFISCAL_INTERNA_CONTAB", objNFiscal.sSerie, objNFiscal.lNumNotaFiscal, objNFiscal.dtDataEmissao)
            If vbMsgRes = vbNo Then gError 207687

            Call Transacao_Rollback
    
            lErro = CF("NFiscalFatura_AlteraDados", objNFiscal, objContabil)
            If lErro <> SUCESSO Then gError 207688

        Else
            gError 207689
        
        End If

    End If

    lErro = CF("WorkFlow_Trata_Transacao", "FAT", objContabil.objTela, gsUsuario)
    If lErro <> SUCESSO Then gError 178241
    
    'Transação genérica de todas NFs de saída
    lErro = CF("WorkFlow_Trata_Transacao", "FAT", objNFiscal, gsUsuario, objNFiscal, 1012)
    If lErro <> SUCESSO Then gError 178241
    
    NFiscal_Grava = SUCESSO

    Exit Function

Erro_NFiscal_Grava:

    NFiscal_Grava = gErr

    Select Case gErr

        Case 106557, 178241, 207687 To 207689
        
        Case 35961
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 39004
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT_TRANSACAO", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149869)

    End Select

    Call Transacao_Rollback

    Exit Function

End Function

Function NFiscalFatura_Grava(ByVal objNFiscal As ClassNFiscal, ByVal objContabil As ClassContabil) As Long
'Grava NFiscal Fatura

Dim lErro As Long
Dim lTransacao As Long
Dim lNumNotaFiscal As Long
Dim vbMsgRes As VbMsgBoxResult

On Error GoTo Erro_NFiscalFatura_Grava

    lNumNotaFiscal = objNFiscal.lNumNotaFiscal

    'Inicia Transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 42413

    Set objNFiscal.objContabil = objContabil

    lErro = CF("NFiscalFatura_Grava_EmTrans", objNFiscal, objContabil)
 '   If lErro <> SUCESSO Then gError 106558
    
    If lErro = SUCESSO Then
    
        'Faz o Commit da Transação
        lErro = Transacao_Commit()
        If lErro <> AD_SQL_SUCESSO Then gError 42438

    Else
    
        If lNumNotaFiscal <> 0 Then
    
            'Dá a Mensagem de aviso que só será gravado a contabilidade
            vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_ALTERACAO_NFISCAL_INTERNA_CONTAB", objNFiscal.sSerie, objNFiscal.lNumNotaFiscal, objNFiscal.dtDataEmissao)
            If vbMsgRes = vbNo Then gError 207686

            Call Transacao_Rollback
    
            lErro = CF("NFiscalFatura_AlteraDados", objNFiscal, objContabil)
            If lErro <> SUCESSO Then gError 207662

        Else
            gError 207685
        
        End If

    End If

    If Not objContabil Is Nothing Then

        lErro = CF("WorkFlow_Trata_Transacao", "FAT", objContabil.objTela, gsUsuario)
        If lErro <> SUCESSO Then gError 178240
    
    End If
    
    'Transação genérica de todas NFs de saída
    lErro = CF("WorkFlow_Trata_Transacao", "FAT", objNFiscal, gsUsuario, objNFiscal, 1012)
    If lErro <> SUCESSO Then gError 178240
    
    NFiscalFatura_Grava = SUCESSO

    Exit Function
    
Erro_NFiscalFatura_Grava:

    NFiscalFatura_Grava = gErr
    
    Select Case gErr
    
        Case 106558, 178240, 207662, 207685, 207686
        
        Case 42413
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
        
        Case 42438
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149870)
            
    End Select
    
    Call Transacao_Rollback
    
    Exit Function
    
End Function

Function NFiscalDevolucao_Grava(ByVal objNFiscal As ClassNFiscal, ByVal objContabil As ClassContabil) As Long
'Grava uma NFiscal Devolução

Dim lErro As Long
Dim lTransacao As Long
Dim lNumNotaFiscal As Long
Dim vbMsgRes As VbMsgBoxResult

On Error GoTo Erro_NFiscalDevolucao_Grava

    lNumNotaFiscal = objNFiscal.lNumNotaFiscal

    'Inicia transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 39246
    
    Set objNFiscal.objContabil = objContabil
    
    lErro = CF("NFiscalDevolucao_Grava_EmTrans", objNFiscal, objContabil)
'    If lErro <> SUCESSO Then gError 106559
       
    If lErro = SUCESSO Then
    
        'Confirma transação
        lErro = Transacao_Commit()
        If lErro <> AD_SQL_SUCESSO Then gError 39275
    
    Else
    
        If lNumNotaFiscal <> 0 Then
    
            'Dá a Mensagem de aviso que só será gravado a contabilidade
            vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_ALTERACAO_NFISCAL_INTERNA_CONTAB", objNFiscal.sSerie, objNFiscal.lNumNotaFiscal, objNFiscal.dtDataEmissao)
            If vbMsgRes = vbNo Then gError 207766

            Call Transacao_Rollback
    
            lErro = CF("NFiscalRemessa_AlteraDados", objNFiscal, objContabil)
            If lErro <> SUCESSO Then gError 207767

        Else
            gError 207768
        
        End If

    End If

    If Not objContabil Is Nothing Then

        lErro = CF("WorkFlow_Trata_Transacao", "FAT", objContabil.objTela, gsUsuario)
        If lErro <> SUCESSO Then gError 178240
    
    End If
    
    'Transação genérica de todas NFs de saída
    lErro = CF("WorkFlow_Trata_Transacao", "FAT", objNFiscal, gsUsuario, objNFiscal, 1012)
    If lErro <> SUCESSO Then gError 178240
    
    NFiscalDevolucao_Grava = SUCESSO

    Exit Function
    
Erro_NFiscalDevolucao_Grava:

    NFiscalDevolucao_Grava = gErr
    
    Select Case gErr
    
        Case 106559, 178240, 207766, 207767, 207768
    
        Case 39246
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 39275
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
                                
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149871)
            
    End Select
    
    'Finaliza transação
    Call Transacao_Rollback
    
    Exit Function
    
End Function

Function NFiscalRemessa_Grava(ByVal objNFiscal As ClassNFiscal, ByVal objContabil As ClassContabil) As Long

Dim lErro As Long
Dim lTransacao As Long
Dim lNumNotaFiscal As Long
Dim vbMsgRes As VbMsgBoxResult

On Error GoTo Erro_NFiscalRemessa_Grava

    lNumNotaFiscal = objNFiscal.lNumNotaFiscal

    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 42059
    
    Set objNFiscal.objContabil = objContabil
    
    lErro = CF("NFiscalRemessa_Grava_EmTrans", objNFiscal, objContabil)
'    If lErro <> SUCESSO Then gError 106560
           
'    'Faz o Commit da Transação
'    lErro = Transacao_Commit()
'    If lErro <> AD_SQL_SUCESSO Then gError 42088
    
    If lErro = SUCESSO Then
    
        'Faz o Commit da Transação
        lErro = Transacao_Commit()
        If lErro <> AD_SQL_SUCESSO Then gError 42088

    Else
    
        If lNumNotaFiscal <> 0 Then
    
            'Dá a Mensagem de aviso que só será gravado a contabilidade
            vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_ALTERACAO_NFISCAL_INTERNA_CONTAB", objNFiscal.sSerie, objNFiscal.lNumNotaFiscal, objNFiscal.dtDataEmissao)
            If vbMsgRes = vbNo Then gError 207708

            Call Transacao_Rollback
    
            lErro = CF("NFiscalRemessa_AlteraDados", objNFiscal, objContabil)
            If lErro <> SUCESSO Then gError 207709

        Else
            gError 207710
        
        End If

    End If
    
    lErro = CF("WorkFlow_Trata_Transacao", "FAT", objContabil.objTela, gsUsuario)
    If lErro <> SUCESSO Then gError 178244
    
    'Transação genérica de todas NFs de saída
    lErro = CF("WorkFlow_Trata_Transacao", "FAT", objNFiscal, gsUsuario, objNFiscal, 1012)
    If lErro <> SUCESSO Then gError 178244
           
    NFiscalRemessa_Grava = SUCESSO

    Exit Function
    
Erro_NFiscalRemessa_Grava:

    NFiscalRemessa_Grava = gErr
    
    Select Case gErr
    
        Case 106560, 178244, 207708 To 207710
        
        Case 42059
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 42088
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149872)
            
    End Select
    
    Call Transacao_Rollback
   
    Exit Function
    
End Function

Function NFiscalPedido_Grava(ByVal objNFiscal As ClassNFiscal, ByVal objContabil As ClassContabil) As Long
'Faz a gravação de uma nota fiscal gerada a partir de um pedido de venda

Dim lErro As Long
Dim lTransacao As Long
Dim lNumNotaFiscal As Long
Dim vbMsgRes As VbMsgBoxResult

On Error GoTo Erro_NFiscalPedido_Grava
   
    lNumNotaFiscal = objNFiscal.lNumNotaFiscal
   
   'Abre a transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 46598

    Set objNFiscal.objContabil = objContabil

    lErro = CF("NFiscalPedido_Grava_EmTrans", objNFiscal, objContabil)
'    If lErro <> SUCESSO Then gError 106561
           
'    'Faz o commit
'    lErro = Transacao_Commit()
'    If lErro <> SUCESSO Then gError 35647
    
    If lErro = SUCESSO Then
    
        'Faz o Commit da Transação
        lErro = Transacao_Commit()
        If lErro <> AD_SQL_SUCESSO Then gError 35647

    Else
    
        If lNumNotaFiscal <> 0 Then
    
            'Dá a Mensagem de aviso que só será gravado a contabilidade
            vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_ALTERACAO_NFISCAL_INTERNA_CONTAB", objNFiscal.sSerie, objNFiscal.lNumNotaFiscal, objNFiscal.dtDataEmissao)
            If vbMsgRes = vbNo Then gError 207750

            Call Transacao_Rollback
    
            lErro = CF("NFiscalPedido_AlteraDados", objNFiscal, objContabil)
            If lErro <> SUCESSO Then gError 207751

        Else
            gError 207752
        
        End If

    End If
    
    lErro = CF("WorkFlow_Trata_Transacao", "FAT", objContabil.objTela, gsUsuario)
    If lErro <> SUCESSO Then gError 178243
    
    'Transação genérica de todas NFs de saída
    lErro = CF("WorkFlow_Trata_Transacao", "FAT", objNFiscal, gsUsuario, objNFiscal, 1012)
    If lErro <> SUCESSO Then gError 178243
           
    NFiscalPedido_Grava = SUCESSO
    
    Exit Function
    
Erro_NFiscalPedido_Grava:

    NFiscalPedido_Grava = gErr
    
    Select Case gErr
    
        Case 106561, 178243, 207750 To 207752
        
        Case 35647
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
                    
        Case 46598
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149873)
    
    End Select
    
    Call Transacao_Rollback
    
    Exit Function

End Function

Function NFiscalRemPedido_Grava(ByVal objNFiscal As ClassNFiscal, ByVal objBloqueioPV As ClassBloqueioPV, ByVal objContabil As ClassContabil) As Long
'Faz a gravação de uma nota fiscal remessa gerada a partir de um pedido de venda

Dim lErro As Long
Dim lTransacao As Long
Dim lNumNotaFiscal As Long
Dim vbMsgRes As VbMsgBoxResult

On Error GoTo Erro_NFiscalRemPedido_Grava
   
    lNumNotaFiscal = objNFiscal.lNumNotaFiscal
   
   'Abre a transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 91499

    Set objNFiscal.objContabil = objContabil

    lErro = CF("NFiscalRemPedido_Grava_EmTrans", objNFiscal, objBloqueioPV, objContabil)
'    If lErro <> SUCESSO Then gError 106562
           
           
    If lErro = SUCESSO Then
    
        'Faz o commit
        lErro = Transacao_Commit()
        If lErro <> SUCESSO Then gError 96027
    

    Else
    
        If lNumNotaFiscal <> 0 Then
    
            'Dá a Mensagem de aviso que só será gravado a contabilidade
            vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_ALTERACAO_NFISCAL_INTERNA_CONTAB", objNFiscal.sSerie, objNFiscal.lNumNotaFiscal, objNFiscal.dtDataEmissao)
            If vbMsgRes = vbNo Then gError 207784

            Call Transacao_Rollback
    
            lErro = CF("NFiscalRemessa_AlteraDados", objNFiscal, objContabil)
            If lErro <> SUCESSO Then gError 207785

        Else
            gError 207786
        
        End If

    End If
    
    
    lErro = CF("WorkFlow_Trata_Transacao", "FAT", objContabil.objTela, gsUsuario)
    If lErro <> SUCESSO Then gError 178245
    
    'Transação genérica de todas NFs de saída
    lErro = CF("WorkFlow_Trata_Transacao", "FAT", objNFiscal, gsUsuario, objNFiscal, 1012)
    If lErro <> SUCESSO Then gError 178245
           
    NFiscalRemPedido_Grava = SUCESSO
    
    Exit Function
    
Erro_NFiscalRemPedido_Grava:

    NFiscalRemPedido_Grava = gErr
    
    Select Case gErr
      
        Case 106562, 178245
        
        Case 91499
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
 
        Case 96027
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case 207784 To 207786
      
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149874)
    
    End Select
    
    Call Transacao_Rollback
    
    Exit Function

End Function

Function NFiscalFaturaPedido_Grava(ByVal objNFiscal As ClassNFiscal, ByVal objContabil As ClassContabil) As Long
'Faz a gravação de uma nota fiscal fatura gerada a partir de um pedido de venda

Dim lErro As Long
Dim lTransacao As Long
Dim lNumNotaFiscal As Long
Dim vbMsgRes As VbMsgBoxResult

On Error GoTo Erro_NFiscalFaturaPedido_Grava
   
    lNumNotaFiscal = objNFiscal.lNumNotaFiscal
   
   'Abre a transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 46598

    Set objNFiscal.objContabil = objContabil

    lErro = CF("NFiscalFaturaPedido_Grava_EmTrans", objNFiscal, objContabil)
'    If lErro <> SUCESSO Then gError 106563
               
    If lErro = SUCESSO Then
    
        'Faz o Commit da Transação
        lErro = Transacao_Commit()
        If lErro <> AD_SQL_SUCESSO Then gError 35647

    Else
    
        If lNumNotaFiscal <> 0 Then
    
            'Dá a Mensagem de aviso que só será gravado a contabilidade
            vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_ALTERACAO_NFISCAL_INTERNA_CONTAB", objNFiscal.sSerie, objNFiscal.lNumNotaFiscal, objNFiscal.dtDataEmissao)
            If vbMsgRes = vbNo Then gError 207750

            Call Transacao_Rollback
    
            lErro = CF("NFiscalPedido_AlteraDados", objNFiscal, objContabil)
            If lErro <> SUCESSO Then gError 207751

        Else
            gError 207752
        
        End If

    End If
        
    lErro = CF("WorkFlow_Trata_Transacao", "FAT", objContabil.objTela, gsUsuario)
    If lErro <> SUCESSO Then gError 178242
               
    'Transação genérica de todas NFs de saída
    lErro = CF("WorkFlow_Trata_Transacao", "FAT", objNFiscal, gsUsuario, objNFiscal, 1012)
    If lErro <> SUCESSO Then gError 178242
    
    NFiscalFaturaPedido_Grava = SUCESSO
    
    Exit Function
    
Erro_NFiscalFaturaPedido_Grava:

    NFiscalFaturaPedido_Grava = gErr
    
    Select Case gErr
    
        Case 106563, 178242, 207750, 207751, 207752
        
        Case 35647
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case 46598
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149875)
    
    End Select
    
    Call Transacao_Rollback
    
    Exit Function
    
End Function

Function Bloqueio_Libera_Automatico(ByVal objBloqueioPV As ClassBloqueioPV) As Long
'grava as liberações de bloqueio

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim iSequencial As Integer

On Error GoTo Erro_Bloqueio_Libera_Automatico

     For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 96070
     Next
    
    '???? Colocar o tipo do bloqueio. Mario
    'Pesquisa no BD o bloqueio em questão
    'Janaina
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Sequencial FROM BloqueiosPV WHERE FilialEmpresa = ? AND PedidoDeVenda = ? AND TipoDeBloqueio = ? AND Datalib = ?", 0, iSequencial, objBloqueioPV.iFilialEmpresa, objBloqueioPV.lPedidoDeVendas, objBloqueioPV.iTipoDeBloqueio, DATA_NULA)
    'Janaina
    If lErro <> AD_SQL_SUCESSO Then gError 96071

    'Lê o bloqueio
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 96072
    
    'Se encontrou o bloqueio
    If lErro = AD_SQL_SUCESSO Then

        'Loca o bloqueio
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> AD_SQL_SUCESSO Then Error 36650
    
        '???? desbloqueio automatico. Mario
        'Atualiza o Bloqueio
        lErro = Comando_ExecutarPos(alComando(1), "UPDATE BloqueiosPV SET CodUsuarioLib = ? , ResponsavelLib = ?, DataLib = ?", alComando(0), objBloqueioPV.sCodUsuarioLib, DESBLOQUEIO_AUTO_RESP, gdtDataAtual)
        If lErro <> AD_SQL_SUCESSO Then gError 96073
    
    End If
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Bloqueio_Libera_Automatico = SUCESSO

    Exit Function

Erro_Bloqueio_Libera_Automatico:

    Bloqueio_Libera_Automatico = gErr

    Select Case gErr
         
         Case 96070
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

         Case 96074, 96075
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        '???? Trocar a mensagem. Mario
        'Janaina
        Case 96071, 96072
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BLOQUEIOSPV", gErr)

        Case 36650, 96073
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_BLOQUEIOPV", gErr, objBloqueioPV.iFilialEmpresa, objBloqueioPV.lPedidoDeVendas, iSequencial)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149876)

    End Select
    
    Exit Function

End Function

''Copiada provisóriamente está em FatGrava
'Private Function Processa_NFiscal_Credito(objNFiscal As ClassNFiscal) As Long
''verifica se o cliente possui o crédito para faturar a nota fiscal.
''Se tiver atualiza as tabelas de cliente e estatistica de liberacao do usuario
''IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO
'
'Dim lErro As Long
'Dim objLiberacaoCredito As New ClassLiberacaoCredito
'Dim objValorLiberadoCredito As New ClassValorLiberadoCredito
'Dim lComando As Long
'Dim lComando1 As Long
'Dim tCliente As typeCliente
'Dim sCodUsuario As String
'Dim dValor As Double
'Dim dtData As Date
'Dim objClienteEstatistica As New ClassFilialClienteEst
'Dim bNFPedido As Boolean
'Dim iCreditoAprovado As Integer
'Dim objPedidoVenda As New ClassPedidoDeVenda
'
'On Error GoTo Erro_Processa_NFiscal_Credito
'
'    lComando = Comando_Abrir()
'    If lComando = 0 Then Error 44482
'
'    lComando1 = Comando_Abrir()
'    If lComando1 = 0 Then Error 44483
'
'    'Verifica se NFiscal é oriunda de Pedido
'    If objNFiscal.iTipoNFiscal = DOCINFO_NFISFVPV Or objNFiscal.iTipoNFiscal = DOCINFO_NFISVPV Then
'        bNFPedido = True
'    Else
'        bNFPedido = False
'    End If
'
'    'Se for testa se Pedido tem crédito aprovado
'    If bNFPedido Then
'
'        objPedidoVenda.lCodigo = objNFiscal.lNumPedidoVenda
'        objPedidoVenda.iFilialEmpresa = objNFiscal.iFilialPedido
'
'        'verifica se o pedido tem credito aprovado
'        lErro = CF("BloqueiosPV_Credito_Aprovado_Testa",objPedidoVenda, iCreditoAprovado)
'        If lErro <> SUCESSO Then Error 25740
'
'    End If
'
'    'se NF não for oriunda de PV ou se crédito não está liberado
'    If (Not bNFPedido) Or iCreditoAprovado <> BLOQUEIO_CREDITO_LIBERADO Then
'
'        'Lê os saldos e o limite de credito do Cliente
'        lErro = Comando_ExecutarLockado(lComando, "SELECT LimiteCredito FROM Clientes WHERE Codigo = ?", tCliente.dLimiteCredito, objNFiscal.lCliente)
'        If lErro <> AD_SQL_SUCESSO Then Error 44484
'
'        lErro = Comando_BuscarPrimeiro(lComando)
'        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 44485
'
'        'se não encontrou os dados do cliente
'        If lErro = AD_SQL_SEM_DADOS Then Error 44486
'
'        'loca o cliente
'        lErro = Comando_LockExclusive(lComando)
'        If lErro <> AD_SQL_SUCESSO Then Error 44487
'
'        'Passa chave de objClienteEstatistica
'        objClienteEstatistica.lCodCliente = objNFiscal.lCliente
'        objClienteEstatistica.iFilialEmpresa = objNFiscal.iFilialEmpresa
'
'        'Le dinamicamente o Saldo dos Titulos e dos Pedidos Liberados
'        lErro = CF("Cliente_Le_Estatistica_Credito",objClienteEstatistica)
'        If lErro <> SUCESSO Then Error 52955
'
'        'Verifica se a soma dos creditos em Pedidos, Titulos e NFs ultrapassa o limite de Credito do Cliente
'        If tCliente.dLimiteCredito < (objClienteEstatistica.dSaldoTitulos + objClienteEstatistica.dSaldoPedidosLiberados + objClienteEstatistica.dValorNFsNaoFaturadas + IIf(bNFPedido, 0, objNFiscal.dValorTotal)) Then
'
'            'se um usuário não autorizou o credito ==> erro
'            If Len(objNFiscal.sCodUsuario) = 0 Then Error 44488
'
'                objLiberacaoCredito.sCodUsuario = objNFiscal.sCodUsuario
'
'            If giTipoVersao = VERSAO_FULL Then
'
'                'verificar se o usuário tem autorizacao para liberar o valor
'                lErro = CF("LiberacaoCredito_Lock",objLiberacaoCredito)
'                If lErro <> SUCESSO And lErro <> 44479 Then Error 44489
'
'                'se não foi encontrado autorização para o usuario liberar credito
'                If lErro = 44479 Then Error 44490
'
'                'se o valor da nota ultrapassar o limite de credito que o usuario pode conceder por operacao
'                If objNFiscal.dValorTotal > objLiberacaoCredito.dLimiteOperacao Then Error 44491
'
'                objValorLiberadoCredito.sCodUsuario = objNFiscal.sCodUsuario
'                objValorLiberadoCredito.iAno = Year(gdtDataAtual)
'
'                'Lê a estatistica de liberação de credito de um usuario em um determinado ano
'                lErro = CF("ValorLiberadoCredito_Lock",objValorLiberadoCredito)
'                If lErro <> SUCESSO And lErro <> 44470 Then Error 44492
'
'                'se o valor da nota ultrapassar o valor mensal que o usuario tem capacidade de liberar
'                If objNFiscal.dValorTotal > objLiberacaoCredito.dLimiteMensal - objValorLiberadoCredito.adValorLiberado(Month(gdtDataAtual)) Then Error 44493
'
'                sCodUsuario = objValorLiberadoCredito.sCodUsuario
'
'            ElseIf giTipoVersao = VERSAO_LIGHT Then
'
'                sCodUsuario = objNFiscal.sCodUsuario
'
'            End If
'
'            dValor = objNFiscal.dValorTotal
'            dtData = gdtDataAtual
'
'            'Atualiza a estatistica de liberação de credito do usuario
'            lErro = CF("ValorLiberadoCredito_Grava",sCodUsuario, dValor, dtData)
'            If lErro <> SUCESSO Then Error 44494
'
'        End If
'
'    End If
'
'    Call Comando_Fechar(lComando)
'    Call Comando_Fechar(lComando1)
'
'    Processa_NFiscal_Credito = SUCESSO
'
'    Exit Function
'
'Erro_Processa_NFiscal_Credito:
'
'    Processa_NFiscal_Credito = Err
'
'    Select Case Err
'
'        Case 44482, 44483
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
'
'        Case 44484, 44485
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CLIENTES1", Err, objNFiscal.lCliente)
'
'        Case 44486
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_CLIENTE_NAO_CADASTRADO", Err, objNFiscal.lCliente)
'
'        Case 44487
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_CLIENTES", Err, objNFiscal.lCliente)
'
'        Case 44488
'           lErro = Rotina_Erro(vbOKOnly, "ERRO_CLIENTE_SEM_CREDITO", Err, objNFiscal.lCliente)
'
'        Case 25740, 44489, 44492, 44494, 52955
'
'        Case 44490
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_LIBERACAOCREDITO_INEXISTENTE", Err, objLiberacaoCredito.sCodUsuario)
'
'        Case 44491
'            Call Rotina_Erro(vbOKOnly, "ERRO_LIBERACAOCREDITO_LIMITEOPERACAO", Err, objLiberacaoCredito.sCodUsuario)
'
'        Case 44493
'            Call Rotina_Erro(vbOKOnly, "ERRO_LIBERACAOCREDITO_LIMITEMENSAL", Err, objLiberacaoCredito.sCodUsuario)
'
'        Case 44495
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_CLIENTE", Err, objNFiscal.lCliente)
'
'        Case Else
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149877)
'
'    End Select
'
'    Call Comando_Fechar(lComando)
'    Call Comando_Fechar(lComando1)
'
'    Exit Function
'
'End Function
'
'Private Function PedidoDeVenda_TestaBloqueios(objPedidoVenda As ClassPedidoDeVenda) As Long
''verifica se existe bloqueio que impeça o faturamento
'
'Dim lErro As Long
'Dim objBloqueioPV As ClassBloqueioPV
'
'On Error GoTo Erro_PedidoDeVenda_TestaBloqueios
'
'    For Each objBloqueioPV In objPedidoVenda.colBloqueiosPV
'        If objBloqueioPV.dtDataLib = DATA_NULA Then
'            If objBloqueioPV.iTipoDeBloqueio <> BLOQUEIO_PARCIAL And objBloqueioPV.iTipoDeBloqueio <> BLOQUEIO_NAO_RESERVA Then Error 25741
'        End If
'    Next
'
'    PedidoDeVenda_TestaBloqueios = SUCESSO
'
'    Exit Function
'
'Erro_PedidoDeVenda_TestaBloqueios:
'
'    PedidoDeVenda_TestaBloqueios = Err
'
'    Select Case Err
'
'        Case 25741 'encontrou bloqueio que impede o faturamento
'
'        Case Else
'             lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149878)
'
'     End Select
'
'     Exit Function
'
'End Function
'

'???? Fernando. Antes de transferir para RotinasMAT ler a observacao ao lado e se necessário falar com Mario. Existe uma rotina em ClassEstGrava com o nome de NFiscalEntrada_Calcula_Custo e que deverá ser substituida por esta que é igual. Quem antes chamava NFiscalEntrada_Calcula_Custo deverá passar a chamar NFiscal_Calcula_Custo.
Function NFiscal_Calcula_Custo(ByVal objItemNF As ClassItemNF) As Long
'calcula o custo do item da NF em função do credito do ICMS e do IPI

On Error GoTo Erro_NFiscal_Calcula_Custo
    
    objItemNF.dCusto = objItemNF.dCusto + objItemNF.dValorTotal
    If objItemNF.objTributacaoItemNF.dICMSCredito <> 0 Then
        objItemNF.dCusto = objItemNF.dCusto - objItemNF.objTributacaoItemNF.dICMSCredito
    End If
    If objItemNF.objTributacaoItemNF.dIPICredito = 0 Then
        objItemNF.dCusto = objItemNF.dCusto + objItemNF.objTributacaoItemNF.dIPIValor
    End If
        
    NFiscal_Calcula_Custo = SUCESSO
    
    Exit Function
    
Erro_NFiscal_Calcula_Custo:

    NFiscal_Calcula_Custo = Err
    
    Select Case Err

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149879)

    End Select

    Exit Function
            
End Function

Function ProdutoVendido_Cancela_Estatisticas(ByVal objNFiscal As ClassNFiscal) As Long
'Grava a estatística dos produtos vendidos

Dim objItemNF As ClassItemNF
Dim objTipoDocInfo As New ClassTipoDocInfo
Dim lErro As Long
Dim objProduto As New ClassProduto

On Error GoTo Erro_ProdutoVendido_Cancela_Estatisticas

    objTipoDocInfo.iCodigo = objNFiscal.iTipoNFiscal
    
    'Le o tipo do produto
    lErro = CF("TipoDocInfo_Le_Codigo", objTipoDocInfo)
    If lErro <> SUCESSO Then gError 86081
    
    'verifica se é Notafiscal de venda
    If (objTipoDocInfo.iFaturamento = TIPODOCINFO_FATURAMENTO_SIM) And (objTipoDocInfo.iComplementar = DOCINFO_NORMAL) Then
                
        For Each objItemNF In objNFiscal.colItensNF
        
            objProduto.sCodigo = objItemNF.sProduto
            
            lErro = CF("Produto_Le", objProduto)
            If lErro <> SUCESSO And lErro <> 23080 Then gError 86082
            If lErro <> SUCESSO Then gError 86083
            
            objItemNF.iClasseUM = objProduto.iClasseUM
            objItemNF.sUMEstoque = objProduto.sSiglaUMEstoque
            objItemNF.sUMVenda = objProduto.sSiglaUMVenda
            
        Next
                
        'Grava a estatistica do Dia do produto
        lErro = SldDiaFat_Cancela_Est(objNFiscal)
        If lErro <> SUCESSO Then gError 86084
        
        'Grava a estatística do Mês do produto
        lErro = SldMesFat_Cancela_Est(objNFiscal)
        If lErro <> SUCESSO Then gError 86085
    
    End If
            
    ProdutoVendido_Cancela_Estatisticas = SUCESSO
    
    Exit Function
    
Erro_ProdutoVendido_Cancela_Estatisticas:
    
    ProdutoVendido_Cancela_Estatisticas = gErr

    Select Case gErr
        
        Case 86081, 86082, 86084, 86085 'Tratado nas rotinas chamadas
        
        Case 86083
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_NAO_CADASTRADO", gErr, objProduto.sCodigo)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149880)

    End Select

    Exit Function

End Function


Function SldDiaFat_Cancela_Est(ByVal objNFiscal As ClassNFiscal) As Long
'Grava a estatística do Dia do produto

Dim lErro As Long
Dim objItemNF As New ClassItemNF
Dim objSldDiaFat As New ClassSldDiaFat
Dim dQuantUMVenda As Double
Dim dFator As Double
Dim lComando As Long, lComando2 As Long
Dim objProduto As New ClassProduto
Dim sUMVenda As String
Dim iIndice As Integer
Dim iClasseUM As Integer
Dim sProduto As String
Dim dValorTotal As Double
Dim dValorDesconto As Double
Dim objProdutoINF As ClassProduto

On Error GoTo Erro_SldDiaFat_Cancela_Est
        
    'Inicializa comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 86086

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then gError 86087
            
    'Para cada objItemNf
    For Each objItemNF In objNFiscal.colItensNF
    
        Set objProdutoINF = New ClassProduto
        objProdutoINF.sCodigo = objItemNF.sProduto
        lErro = CF("Produto_Le", objProdutoINF)
        If lErro <> SUCESSO And lErro <> 28030 Then gError ERRO_SEM_MENSAGEM
        
        For iIndice = 0 To objItemNF.colItensRomaneioGrade.Count
        
            If objItemNF.colItensRomaneioGrade.Count = 0 Or (objItemNF.iPossuiGrade = 0 And objProdutoINF.iKitVendaComp <> MARCADO) Then
                sUMVenda = objItemNF.sUMVenda
                dQuantUMVenda = objItemNF.dQuantidade
                sProduto = objItemNF.sProduto
                dValorTotal = objItemNF.dValorTotal
                dValorDesconto = objItemNF.dValorDesconto
            Else
                If iIndice = 0 Then iIndice = iIndice + 1
                dQuantUMVenda = objItemNF.colItensRomaneioGrade(iIndice).dQuantidade
                sProduto = objItemNF.colItensRomaneioGrade(iIndice).sProduto
                
                If objProdutoINF.iKitVendaComp <> MARCADO Then
                    dValorTotal = (objItemNF.colItensRomaneioGrade(iIndice).dQuantidade * objItemNF.dPrecoUnitario) * (1 - objItemNF.dPercDesc)
                    dValorDesconto = (objItemNF.colItensRomaneioGrade(iIndice).dQuantidade * objItemNF.dPrecoUnitario) * (objItemNF.dPercDesc)
                Else
                    'Não tem informações para ratear o preço => então dividi igual entre os itens
                    '????
                    dValorTotal = ((objItemNF.dQuantidade * objItemNF.dPrecoUnitario) * (1 - objItemNF.dPercDesc)) / objItemNF.colItensRomaneioGrade.Count
                    dValorDesconto = ((objItemNF.dQuantidade * objItemNF.dPrecoUnitario) * (objItemNF.dPercDesc)) / objItemNF.colItensRomaneioGrade.Count
                End If
                
                Set objProduto = New ClassProduto
                
                objProduto.sCodigo = sProduto
                
                lErro = CF("Produto_Le", objProduto)
                If lErro <> SUCESSO And lErro <> 28030 Then gError ERRO_SEM_MENSAGEM
                
                sUMVenda = objProduto.sSiglaUMVenda
            End If
            'Converte as unidades de medida
            
            If objProdutoINF.iKitVendaComp <> MARCADO Then
                lErro = CF("UM_Conversao", objItemNF.iClasseUM, objItemNF.sUnidadeMed, sUMVenda, dFator)
            Else
                lErro = CF("UM_Conversao", objProduto.iClasseUM, objProduto.sSiglaUMEstoque, objProduto.sSiglaUMVenda, dFator)
            End If
            If lErro <> SUCESSO Then gError 52720
        
            'Quantidade convertida
            dQuantUMVenda = dQuantUMVenda * dFator
                
            Set objSldDiaFat = New ClassSldDiaFat
            
            objSldDiaFat.iFilialEmpresa = objNFiscal.iFilialEmpresa
            objSldDiaFat.dtData = objNFiscal.dtDataEmissao
            objSldDiaFat.sProduto = sProduto
                
            'Lê todos os atributos na tabela SldDiaFat e faza lock exclusive
            lErro = CF("SldDiaFat_Le_Lock", lComando, objSldDiaFat)
            If lErro <> SUCESSO And lErro <> 52729 Then gError 86089
                            
            If lErro = SUCESSO Then 'Registro SldDiaFat existe no BD
                    
                objSldDiaFat.dValorFaturado = objSldDiaFat.dValorFaturado - dValorTotal
                    
                objSldDiaFat.dQuantFaturada = objSldDiaFat.dQuantFaturada - dQuantUMVenda
                objSldDiaFat.dTotalDescontos = objSldDiaFat.dTotalDescontos - dValorDesconto
                
                'Atualiza a tabela de SldDiaFat
                lErro = Comando_ExecutarPos(lComando2, "UPDATE SldDiaFat SET ValorFaturado =?, QuantFaturada=?, TotalDescontos=?", lComando, objSldDiaFat.dValorFaturado, objSldDiaFat.dQuantFaturada, objSldDiaFat.dTotalDescontos)
                If lErro <> AD_SQL_SUCESSO Then gError 86090
            
            End If
            
            If objItemNF.colItensRomaneioGrade.Count = 0 Or (objItemNF.iPossuiGrade = 0 And objProdutoINF.iKitVendaComp <> MARCADO) Then Exit For
            
        Next
        
    Next
    
    'Libera comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)
    
    SldDiaFat_Cancela_Est = SUCESSO
    
    Exit Function
    
Erro_SldDiaFat_Cancela_Est:
    
    SldDiaFat_Cancela_Est = gErr

    Select Case gErr
        
        Case 86086, 86087
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 86089, 86088 'Tratados nas rotinas chamadas
        
        Case 86090
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SLDDIAFAT", gErr, objSldDiaFat.iFilialEmpresa, objSldDiaFat.sProduto, objSldDiaFat.dtData)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149881)

    End Select
        
    'Libera comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)
        
    Exit Function

End Function
       
Function SldMesFat_Cancela_Est(ByVal objNFiscal As ClassNFiscal) As Long
'Grava a estatística do Mês do produto

Dim lErro As Long
Dim objItemNF As ClassItemNF
Dim objSldMesFat As New ClassSldMesFat
Dim iMes As Integer
Dim dFator As Double
Dim dQuantUMVenda As Double
Dim sMes As String
Dim lComando As Long, lComando2 As Long
Dim objProduto As New ClassProduto
Dim sUMVenda As String
Dim iIndice As Integer
Dim iClasseUM As Integer
Dim sProduto As String
Dim dValorTotal As Double
Dim dValorDesconto As Double
Dim objProdutoINF As ClassProduto

On Error GoTo Erro_SldMesFat_Cancela_Est
    
    'Inicializa comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 86091

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then gError 86092
                            
    'Para cada objItemNf
    For Each objItemNF In objNFiscal.colItensNF
        
        Set objProdutoINF = New ClassProduto
        objProdutoINF.sCodigo = objItemNF.sProduto
        lErro = CF("Produto_Le", objProdutoINF)
        If lErro <> SUCESSO And lErro <> 28030 Then gError ERRO_SEM_MENSAGEM
        
        For iIndice = 0 To objItemNF.colItensRomaneioGrade.Count
        
            If objItemNF.colItensRomaneioGrade.Count = 0 Or (objItemNF.iPossuiGrade = 0 And objProdutoINF.iKitVendaComp <> MARCADO) Then
                sUMVenda = objItemNF.sUMVenda
                dQuantUMVenda = objItemNF.dQuantidade
                sProduto = objItemNF.sProduto
                dValorTotal = objItemNF.dValorTotal
                dValorDesconto = objItemNF.dValorDesconto
            Else
                If iIndice = 0 Then iIndice = iIndice + 1
                dQuantUMVenda = objItemNF.colItensRomaneioGrade(iIndice).dQuantidade
                sProduto = objItemNF.colItensRomaneioGrade(iIndice).sProduto
                
                If objProdutoINF.iKitVendaComp <> MARCADO Then
                    dValorTotal = (objItemNF.colItensRomaneioGrade(iIndice).dQuantidade * objItemNF.dPrecoUnitario) * (1 - objItemNF.dPercDesc)
                    dValorDesconto = (objItemNF.colItensRomaneioGrade(iIndice).dQuantidade * objItemNF.dPrecoUnitario) * (objItemNF.dPercDesc)
                Else
                    'Não tem informações para ratear o preço => então dividi igual entre os itens
                    '????
                    dValorTotal = ((objItemNF.dQuantidade * objItemNF.dPrecoUnitario) * (1 - objItemNF.dPercDesc)) / objItemNF.colItensRomaneioGrade.Count
                    dValorDesconto = ((objItemNF.dQuantidade * objItemNF.dPrecoUnitario) * (objItemNF.dPercDesc)) / objItemNF.colItensRomaneioGrade.Count
                End If
                
                objProduto.sCodigo = sProduto
                
                lErro = CF("Produto_Le", objProduto)
                '??? Tratar SHirley
                
                sUMVenda = objProduto.sSiglaUMVenda
            End If
            
            'Converte as unidades de medida
            If objProdutoINF.iKitVendaComp <> MARCADO Then
                lErro = CF("UM_Conversao", objItemNF.iClasseUM, objItemNF.sUnidadeMed, sUMVenda, dFator)
            Else
                lErro = CF("UM_Conversao", objProduto.iClasseUM, objProduto.sSiglaUMEstoque, objProduto.sSiglaUMVenda, dFator)
            End If
            If lErro <> SUCESSO Then gError 52725
        
            'Quantidade convertida
            dQuantUMVenda = dQuantUMVenda * dFator
                
            Set objSldMesFat = New ClassSldMesFat
            
            objSldMesFat.iFilialEmpresa = objNFiscal.iFilialEmpresa
            objSldMesFat.iAno = Year(objNFiscal.dtDataEmissao)
            objSldMesFat.sProduto = sProduto
            
            iMes = Month(objNFiscal.dtDataEmissao)
            sMes = CStr(iMes)
                                        
            'Lê todos os atributos na tabela SldMesFat e faza lock exclusive
            lErro = SldMesFat_Le_Lock_Mes(lComando, objSldMesFat, iMes)
            If lErro <> SUCESSO And lErro <> 59264 Then gError 86094
                            
            If lErro = SUCESSO Then
            
                objSldMesFat.dValorFaturado(iMes) = objSldMesFat.dValorFaturado(iMes) - objItemNF.dValorTotal
                objSldMesFat.dQuantFaturada(iMes) = objSldMesFat.dQuantFaturada(iMes) - dQuantUMVenda
                objSldMesFat.dTotalDescontos(iMes) = objSldMesFat.dTotalDescontos(iMes) - objItemNF.dValorDesconto
                
                'Atualiza a tabela de SldMesFat
                lErro = Comando_ExecutarPos(lComando2, "UPDATE SldMesFat SET ValorFaturado" & sMes & "=?, QuantFaturada" & sMes & "=?, TotalDescontos" & sMes & "= ?", lComando, objSldMesFat.dValorFaturado(iMes), objSldMesFat.dQuantFaturada(iMes), objSldMesFat.dTotalDescontos(iMes))
                If lErro <> AD_SQL_SUCESSO Then gError 86095
                
            End If
        
            lErro = SldMesFatFilCli_Cancela_Est(objSldMesFat.iFilialEmpresa, objSldMesFat.iAno, objSldMesFat.sProduto, objNFiscal.lCliente, objNFiscal.iFilialCli, dQuantUMVenda, objItemNF.dValorTotal, sMes)
            If lErro <> SUCESSO Then gError 110237
            
            If objItemNF.colItensRomaneioGrade.Count = 0 Or (objItemNF.iPossuiGrade = 0 And objProdutoINF.iKitVendaComp <> MARCADO) Then Exit For
        
        Next
        
    Next
        
    'Libera comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)
            
    SldMesFat_Cancela_Est = SUCESSO
    
    Exit Function
    
Erro_SldMesFat_Cancela_Est:
    
    SldMesFat_Cancela_Est = gErr

    Select Case gErr
        
        Case 86091, 86092
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 86094, 86093 'Tratados nas rotinas chamadas
        
        Case 86095
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SLDMESFAT", gErr, objSldMesFat.iAno, objSldMesFat.iFilialEmpresa, objSldMesFat.sProduto)
        
        Case 110237
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149882)

    End Select
        
    'Libera comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)
    
    Exit Function

End Function

Function NotaFiscalSaida_Excluir(ByVal objNFiscal As ClassNFiscal, ByVal objContabil As ClassContabil) As Long
'Faz o cancelamento de uma nota fiscal de Saida

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_NotaFiscalSaida_Excluir
    
    'ABre a transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 83901

    lErro = CF("NotaFiscalSaida_Excluir_EmTrans", objNFiscal, objContabil)
    If lErro <> SUCESSO Then gError 126968
    
    'Confirma a transacao
    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then gError 83935
    
    If Not (objContabil Is Nothing) Then
    
    lErro = CF("WorkFlow_Trata_Transacao", "FAT", objContabil.objTela, gsUsuario)
    If lErro <> SUCESSO Then gError 178246
    
    End If
    
    NotaFiscalSaida_Excluir = SUCESSO

    Exit Function

Erro_NotaFiscalSaida_Excluir:

    NotaFiscalSaida_Excluir = gErr

    Select Case gErr

        Case 83901
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 83935
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case 126968, 178246
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149883)

    End Select

    Call Transacao_Rollback

    Exit Function

End Function


Function NotaFiscalSaida_Excluir_Usu(ByVal objNFiscal As ClassNFiscal) As Long

    NotaFiscalSaida_Excluir_Usu = SUCESSO
        
End Function

Function NotaFiscalSaida_Excluir_EmTrans(ByVal objNFiscal As ClassNFiscal, ByVal objContabil As ClassContabil) As Long
'Faz o cancelamento de uma nota fiscal de Saida

Dim lErro As Long, iIndice As Integer
Dim lTransacao As Long, alComando(0 To 18) As Long
Dim iClasseDocCPR As Integer, lNumIntDocCPR As Long
Dim lNumIntItem As Long
Dim objMovEstoque As New ClassMovEstoque, objTipoDocInfo As New ClassTipoDocInfo
Dim lCodigo As Long, lNumNotaFiscal As Long, iTipoNF As Integer, iStatus As Integer
Dim lNumIntDocEst As Long
Dim objMovEstoque1 As New ClassMovEstoque
Dim lErro1 As Long
Dim lNumIntOrigem As Long
Dim iTipoOrigem As Integer
Dim objItemRomaneio As ClassItemRomaneioGrade
Dim iIndiceAux As Integer
Dim objNFiscalAux As New ClassNFiscal, iFilialEmpresa As Integer
Dim tItemNF As typeItemNF
Dim dQuantResto As Double
Dim sUM As String
Dim objProduto As New ClassProduto
Dim dQuantDevUMResto As Double
Dim dFator As Double
Dim objItemNF As New ClassItemNF
Dim sConteudo As String, iEnviado As Integer, lNumIntNFAux As Long

On Error GoTo Erro_NotaFiscalSaida_Excluir_EmTrans
    
    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 83900
    Next
    
    'Lê a nota fiscal
    lErro = Comando_ExecutarPos(alComando(0), "SELECT FilialEmpresa, ClasseDocCPR, NumIntDocCPR FROM NFiscal WHERE NumIntDoc = ?", 0, iFilialEmpresa, iClasseDocCPR, lNumIntDocCPR, objNFiscal.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 83902

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 83903
    
    If lErro <> AD_SQL_SUCESSO Then gError 83904 'Não encontrou

    'faz o lock na Nota Fiscal
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 83905

'    lErro = CF("CRFatConfig_Le", "TESTA_EXCLUSAO_NFE", 0, sConteudo)
'    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
'
'    If StrParaInt(sConteudo) <> DESMARCADO Then
    
        'se foi comandada uma exclusao pelo botao de exclusao e nao pela gravacao de nota (alteracao) ==> testar se a nota foi enviada
        If objNFiscal.objContabil.objGridInt Is Nothing Then
            
            'verifica se a nota fiscal foi processada pela sefaz ou se foi enviada
            lErro = CF("NFiscal_Testa_Existencia1", objNFiscal)
            If lErro <> SUCESSO And lErro <> 207565 And lErro <> 207624 Then gError 207620

        End If

        'exclui os registros de nfefedlote ligado a nota em questao
        lErro = CF("NFeFedLote_Excluir", objNFiscal)
        If lErro <> SUCESSO Then gError 207621
        
        lErro = CF("RPSWEBLote_Excluir", objNFiscal)
        If lErro <> SUCESSO Then gError 207628
          
'            lErro = CF("NFeFedLote_Le", objNFiscal.lNumIntDoc, iEnviado)
'            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
'
'            If iEnviado = 1 Then gError 203045
            
        
'    End If

    If Not (objContabil Is Nothing) Then
        'exclui os dados contábeis pendentes ou atualizados (se houverem) relativos a lNumIntDocOrigem
        lErro = objContabil.Contabil_Exclui(objNFiscal.lNumIntDoc, CONTABIL_EXCLUI_EFETIVO, , , , iFilialEmpresa)
        If lErro <> SUCESSO Then gError 83897
    End If
        
    'Lê o tipodocinfo da nota fiscal
    objTipoDocInfo.iCodigo = objNFiscal.iTipoNFiscal
    
    lErro = CF("TipoDocInfo_Le_Codigo", objTipoDocInfo)
    If lErro <> SUCESSO And lErro <> 31415 Then gError 83906
    
    If lErro <> SUCESSO Then gError 83907
    
    'Se é uma nota que possui vinculação com outra que a sucede. Ex. Uma nota que tem uma devolução vinculada ou uma nota que tem um complemento vinculado.
    'If Len(Trim(objTipoDocInfo.sSiglaNFOriginal)) > 0 Or objTipoDocInfo.iComplementar <> DOCINFO_COMPLEMENTO Then
    
    'verifica se a nota está vinculada a sua devolução ou ao seu complemento
    lErro = Comando_Executar(alComando(1), "SELECT NumNotaFiscal, TipoNFiscal FROM NFiscal WHERE NumIntNotaOriginal = ?", lNumNotaFiscal, iTipoNF, objNFiscal.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 83908

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 83909
    
    If lErro = AD_SQL_SUCESSO Then gError 83910 'Se está vinculada, erro.
    
    'verifica se a nota está vinculada a alguma outra (um complemento, uma devolução, etc.)
    lErro = Comando_Executar(alComando(18), "SELECT N.NumNotaFiscal, N.TipoNFiscal FROM NFiscal AS N, ItensNFiscal AS I WHERE N.NumIntDoc = I.NumIntNF AND I.NumIntDocOrig IN (SELECT NumIntDoc FROM ItensNFiscal WHERE NumIntNF = ?)", lNumNotaFiscal, iTipoNF, objNFiscal.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 83908

    lErro = Comando_BuscarPrimeiro(alComando(18))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 83909
    
    If lErro = AD_SQL_SUCESSO Then gError 83910 'Se já foi, erro.
    'End If
                
    'Se a nota for uma nota gerada por pedido mas nao for a de venda para entrega futura
    If objNFiscal.lNumPedidoVenda <> 0 And objTipoDocInfo.iCodigo <> DOCINFO_NFIFVEFPV Then
        
        If objNFiscal.iStatus <> STATUS_CANCELADO Then
        
            'Atualiza a qtd faturada ou desfaz a baixa do Pedido.
            'If objTipoDocInfo.iCodigo <> DOCINFO_NFFPSRV And objTipoDocInfo.iCodigo <> DOCINFO_NFFPSRVS And objTipoDocInfo.iCodigo <> DOCINFO_NFFPSRVP Then
            If objTipoDocInfo.sNomeTelaNFiscal <> "NFiscalFatPedSRV" Then
                lErro = CF("CancelamentoNFiscal_Atualiza_Pedido", objNFiscal)
            Else
                lErro = CF("CancelamentoNFiscal_Atualiza_PedidoSRV", objNFiscal)
            End If
            If lErro <> SUCESSO Then gError 83911
            
        End If
        
    End If
    
    'Se a nota gerou documentos em  CPR
    If iClasseDocCPR > 0 And lNumIntDocCPR > 0 Then
    
        'Desfaz os documentos associados
        lErro = CF("CPR_Exclui", iClasseDocCPR, lNumIntDocCPR, 1)
        If lErro <> SUCESSO Then gError 83912
    
    End If

    'não trata o cancelamento dos itens de nf para notas de conhecimento de frete porque eles não possuem
    If objNFiscal.iTipoNFiscal <> DOCINFO_NFICF And objNFiscal.iTipoNFiscal <> DOCINFO_NFIFCF Then

        tItemNF.sUnidadeMed = String(STRING_UM_SIGLA, 0)
        tItemNF.sProduto = String(STRING_PRODUTO, 0)

        'Busca os itens da nota associada
        lErro1 = Comando_ExecutarPos(alComando(2), "SELECT NumIntDoc, NumIntDocOrig, Quantidade, UnidadeMed, Produto FROM ItensNFiscal WHERE NumIntNF = ? ", 0, lNumIntItem, tItemNF.lNumIntDocOrig, tItemNF.dQuantidade, tItemNF.sUnidadeMed, tItemNF.sProduto, objNFiscal.lNumIntDoc)
        If lErro1 <> AD_SQL_SUCESSO Then gError 83913
    
        lErro1 = Comando_BuscarPrimeiro(alComando(2))
        If lErro1 <> AD_SQL_SUCESSO And lErro1 <> AD_SQL_SEM_DADOS Then gError 83914
        
        '###############################################################
        'Inserido por Wagner 07/08/2006
        'Acerto de erro na exclusão de movimento quando o primeiro item da Nota não
        'controla estoque e movimentos com grade
        objNFiscalAux.lNumIntDoc = objNFiscal.lNumIntDoc
        
        lErro = CF("NFiscalItens_Le", objNFiscalAux)
        If lErro <> SUCESSO Then gError 181736
        
        lErro = CF("AlocacoesNF_Le", objNFiscalAux)
        If lErro <> SUCESSO Then gError 181737
        
        iTipoOrigem = 0
    
        For iIndiceAux = 1 To objNFiscalAux.colItensNF.Count
        
            If objNFiscalAux.colItensNF(iIndiceAux).iPossuiGrade = DESMARCADO Then
                
                If objNFiscalAux.colItensNF(iIndiceAux).colAlocacoes.Count > 0 Then
                    lNumIntOrigem = objNFiscalAux.colItensNF(iIndiceAux).lNumIntDoc 'Alterado por Wagner
                    iTipoOrigem = MOVEST_TIPONUMINTDOCORIGEM_ITEMNFISCAL
                    Exit For
                End If
            Else
            
                For Each objItemRomaneio In objNFiscalAux.colItensNF(iIndiceAux).colItensRomaneioGrade
                    If objItemRomaneio.colLocalizacao.Count > 0 Then
                        iTipoOrigem = MOVEST_TIPONUMINTDOCORIGEM_ITEMNFISCALGRADE
                        lNumIntOrigem = objItemRomaneio.lNumIntDoc
                        Exit For
                    End If
                Next
                If iTipoOrigem > 0 Then Exit For
            End If
        Next
        '###############################################################
        
        If iTipoOrigem <> 0 Then
 
            objMovEstoque.iFilialEmpresa = objNFiscal.iFilialEmpresa
            
            lErro = CF("Customizacoes_MovEstoque", objMovEstoque)
            If lErro <> SUCESSO Then gError 126803
            
            'Verifica se há movimento de estoque ligado ao item
            lErro = Comando_Executar(alComando(4), "SELECT Codigo, NumIntDocEst FROM MovimentoEstoque WHERE TipoNumIntDocOrigem = ? AND NumIntDocOrigem = ? AND FilialEmpresa = ?", lCodigo, lNumIntDocEst, iTipoOrigem, lNumIntOrigem, objMovEstoque.iFilialEmpresa)
            If lErro <> AD_SQL_SUCESSO Then gError 83916
        
            lErro = Comando_BuscarPrimeiro(alComando(4))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 83917
            
            If lErro = AD_SQL_SUCESSO Then
            
                objMovEstoque.lCodigo = lCodigo
                
                'Lê os movimento dos itens de nota fiscal
                lErro = CF("MovEstoqueItens_Le_Desc1", objMovEstoque)
                If lErro <> SUCESSO And lErro <> 89050 Then gError 83920
                
                If lErro = 89050 Then gError 89052
                
                'Redefine os movimento para fazer o cancelamento
                objMovEstoque.iOperacao = EXCLUSAO_MOVIMENTO
                
                'Grava o movimento de estoque
                lErro = CF("MovEstoque_Grava", objMovEstoque)
                If lErro <> SUCESSO Then gError 83921
            
            End If
            
        End If
    
    End If
    
    'Exclui itens customizados
    lErro = CF("NotaFiscalSaida_Excluir_Usu", objNFiscal)
    If lErro <> SUCESSO Then gError 99112
    
    'Exclui as ComissoesNF da Tabela ComissoesNF
    lErro = ComissoesNF_Exclui(objNFiscal.lNumIntDoc)
    If lErro <> SUCESSO Then gError 89006
    
    'Exclui as comissoes da nota fiscal
    lErro = Comissoes_NFiscal_Exclui(objNFiscal)
    If lErro <> SUCESSO Then gError 83928
    
    '############################################
    'Inserido por Wagner 10/08/2006
    lErro = CF("ProjetoInfo_Exclui", PRJ_CR_TIPO_NF, objNFiscal.lNumIntDoc)
    If lErro <> SUCESSO Then gError 181764
    '############################################
    
    lErro = CF("MensagensRegra_Exclui", REGRAMSG_TIPODOC_NF, objNFiscal.lNumIntDoc)
    If lErro <> SUCESSO Then gError 192593
    
    lErro = CF("NotaFiscalSRV_Excluir", objNFiscal)
    If lErro <> SUCESSO Then gError 192593
    
    lErro = CF("NF_Exclui_RPS", objNFiscal)
    If lErro <> SUCESSO Then gError 192593
    
    'se a nota já não tiver sido cancelada anteriormente, i.e., se sua estatística já não foi desfeita
    If objNFiscal.iStatus <> STATUS_CANCELADO Then
    
        'Desfaz a Estatistica de Compras
        'Trata-se de uma nota fiscal de venda
        If (objTipoDocInfo.iFaturamento = TIPODOCINFO_FATURAVEL) And (objTipoDocInfo.iComplementar = DOCINFO_NORMAL) Then
            
            'Defaz a Estatistica
            lErro = FilialClienteFilEmp_Cancela_NF(objNFiscal)
            If lErro <> SUCESSO Then gError 83929
        
            lErro = ProdutoVendido_Cancela_Estatisticas(objNFiscal)
            If lErro <> SUCESSO Then gError 83930
        
        End If
            
        'se for a exclusão de uma devolução de compra
        If objTipoDocInfo.iCompras = TIPODOCINFO_COMPRAS_DEVOLUCAO Then
            
            'Desfaz a Estatística da Filial Fornecedor
            lErro = CF("FilialFornecedor_Grava_Estatisticas", objNFiscal, CANCELAMENTO_FILIALFORNFILEMP)
            If lErro <> SUCESSO Then gError 89420
            
        End If
        
    End If
        
    'Verifica se o modulo de Livros Fiscais está Ativo
    If gcolModulo.Ativo(MODULO_LIVROSFISCAIS) = MODULO_ATIVO Then
                        
        'Grava o Livro Fiscal a partir da Nota Fiscal
        lErro = CF("NotaFiscal_Exclui_Fis", objNFiscal)
        If lErro <> SUCESSO Then gError 83898
    
    End If
    
    lErro = CF("NFiscal_ExcluiTributacao", objNFiscal)
    If lErro <> SUCESSO Then gError 83899
    
    If objNFiscal.iTipoNFiscal = DOCINFO_NFISDBFNE Or objNFiscal.iTipoNFiscal = DOCINFO_NFISDBF Then
        lErro = NFiscalDev_Exclui_Dados_Benef(objNFiscal)
        If lErro <> SUCESSO Then gError 83899
    End If
    
    'não trata o cancelamento dos itens de nf para notas de conhecimento de frete porque eles não possuem
    If objNFiscal.iTipoNFiscal <> DOCINFO_NFICF And objNFiscal.iTipoNFiscal <> DOCINFO_NFIFCF Then
        
        Do While lErro1 <> AD_SQL_SEM_DADOS
                    
            objItemNF.lNumIntDoc = lNumIntItem
            objItemNF.sUnidadeMed = tItemNF.sUnidadeMed
            objItemNF.dQuantidade = tItemNF.dQuantidade
            objItemNF.sProduto = tItemNF.sProduto
            objItemNF.lNumIntDocOrig = tItemNF.lNumIntDocOrig
                    
            If objNFiscal.iTipoNFiscal = DOCINFO_NFISDC Or objNFiscal.iTipoNFiscal = DOCINFO_NFISDCNT Or _
               objNFiscal.iTipoNFiscal = DOCINFO_NFISDD Or objNFiscal.iTipoNFiscal = DOCINFO_NFISODC Or _
               objNFiscal.iTipoNFiscal = DOCINFO_NFISODF Or objNFiscal.iTipoNFiscal = DOCINFO_NFISDBF Or _
               objNFiscal.iTipoNFiscal = DOCINFO_NFISDBFNE Then
                
                sUM = String(STRING_UM_SIGLA, 0)

                lErro = Comando_Executar(alComando(11), "SELECT QuantResto, UnidadeMed FROM ItemNFResto AS INFR, ItensNFiscal AS INF WHERE INFR.NumIntItemNF = INF.NumIntDoc AND NumIntItemNF = ?", _
                dQuantResto, sUM, tItemNF.lNumIntDocOrig)
                If lErro <> AD_SQL_SUCESSO Then gError 199080
                
                lErro = Comando_BuscarPrimeiro(alComando(11))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 199081
                
                If lErro = AD_SQL_SUCESSO Then
                
                    objProduto.sCodigo = tItemNF.sProduto
                    
                    'ler dados do produto
                    lErro = CF("Produto_Le", objProduto)
                    If lErro <> SUCESSO And lErro <> 28030 Then gError 199082
                
                    'converter qtde a faturar p/UMEstoque do produto
                    lErro = CF("UM_Conversao", objProduto.iClasseUM, tItemNF.sUnidadeMed, sUM, dFator)
                    If lErro <> SUCESSO Then gError 199083
                    
                    dQuantDevUMResto = tItemNF.dQuantidade * dFator
                    
                    lErro = Comando_Executar(alComando(12), "UPDATE ItemNFResto SET QuantResto = QuantResto + ? WHERE NumIntItemNF = ?", dQuantDevUMResto, tItemNF.lNumIntDocOrig)
                    If lErro <> AD_SQL_SUCESSO Then gError 199084
                        
                Else
                    
                    lErro = Comando_Executar(alComando(13), "SELECT UnidadeMed FROM ItensNFiscal AS INF WHERE NumIntDoc = ?", _
                    sUM, tItemNF.lNumIntDocOrig)
                    If lErro <> AD_SQL_SUCESSO Then gError 199085
                    
                    lErro = Comando_BuscarPrimeiro(alComando(13))
                    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 199086
                    
                    If lErro = AD_SQL_SUCESSO Then
                    
                        objProduto.sCodigo = tItemNF.sProduto
                        
                        'ler dados do produto
                        lErro = CF("Produto_Le", objProduto)
                        If lErro <> SUCESSO And lErro <> 28030 Then gError 199087
                    
                        'converter qtde a faturar p/UMEstoque do produto
                        lErro = CF("UM_Conversao", objProduto.iClasseUM, tItemNF.sUnidadeMed, sUM, dFator)
                        If lErro <> SUCESSO Then gError 199088
                        
                        dQuantDevUMResto = tItemNF.dQuantidade * dFator
                    
                        lErro = Comando_Executar(alComando(14), "INSERT INTO ItemNFResto (NumIntItemNF, QuantResto) VALUES (?,?)", tItemNF.lNumIntDocOrig, dQuantDevUMResto)
                        If lErro <> AD_SQL_SUCESSO Then gError 199089
                        
                    End If
                    
                End If
                    
            End If
                    
            'Cancela o item
            lErro1 = Comando_ExecutarPos(alComando(3), "DELETE FROM ItensNFiscal", alComando(2))
            If lErro1 <> AD_SQL_SUCESSO Then gError 83931
            
            lErro = NFiscal_Exclui_ContratoCobranca(lNumIntItem)
            If lErro <> SUCESSO Then gError 132991
            
            objItemNF.objInfoAdicDocItem.iTipoDoc = TIPODOC_INFOADIC_ITEMNF
            objItemNF.objInfoAdicDocItem.lNumIntDocItem = objItemNF.lNumIntDoc
        
            lErro = CF("InfoAdicDocItem_Exclui", objItemNF.objInfoAdicDocItem)
            If lErro <> SUCESSO Then gError 132991
            
            lErro = CF("MensagensRegra_Exclui", REGRAMSG_TIPODOC_ITEMNF, lNumIntItem)
            If lErro <> SUCESSO Then gError 192593
            
            lErro1 = Comando_BuscarProximo(alComando(2))
            If lErro1 <> SUCESSO And lErro1 <> AD_SQL_SEM_DADOS Then gError 83932
                       
            lErro = CF("ItensNFGrade_Exclui", lNumIntItem)
            If lErro <> SUCESSO Then gError 86367
            
            lErro = CF("EmbalagensItem_Exclui2", DOCORIGEM_NF, lNumIntItem)
            If lErro <> SUCESSO Then gError 86367
            
            lErro = CF("ItemNFSai_Excluir_Customizado", objNFiscal, objItemNF)
            If lErro <> SUCESSO Then gError 199711
            
         Loop
        
    End If
    
    'Atualiza o status da nota fiscal
    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM NFiscal", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 83934
    
    lErro = CF("InfoAdicionais_Exclui", TIPODOC_INFOADIC_NF, objNFiscal.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 207748
    
    'se for uma nota de conhecimento de frete vai exclui-lo da tabela especifica
    lErro = ConhecimentoFrete_Exclui(objNFiscal)
    If lErro <> SUCESSO Then gError 89131
    
    'Daniel 27/05/2002
    'Caso exista vínculo, desvincula o Orçamento de Venda da NFiscal a ser excluida.
    lErro = NFiscal_Desvincula_Orcamento(objNFiscal)
    If lErro <> SUCESSO Then gError 94484
        
    lErro = CF("ItensNFEntrega_Exclui", objNFiscal)
    If lErro <> SUCESSO Then gError 183229
        
    lErro = Comando_ExecutarPos(alComando(16), "SELECT NumIntNF FROM ImportNFeXml WHERE NumIntNF = ?", 0, lNumIntNFAux, objNFiscal.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 212035

    lErro = Comando_BuscarProximo(alComando(16))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 212036
    If lErro = AD_SQL_SUCESSO Then
    
        lErro = Comando_ExecutarPos(alComando(17), "UPDATE ImportNFeXml SET NumIntNF = 0", alComando(16))
        If lErro <> AD_SQL_SUCESSO Then gError 212037
    
    End If
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    NotaFiscalSaida_Excluir_EmTrans = SUCESSO

    Exit Function

Erro_NotaFiscalSaida_Excluir_EmTrans:

    NotaFiscalSaida_Excluir_EmTrans = gErr

    Select Case gErr

        Case 83897, 83898, 83899, 83906, 83911, 83912, 83918, 83920, 83921, 83924, 83926, 83927, 83928, 83929, 83930, 83932, 89006, 89131, 89420, 84735, 99112, 86367, 126803, 132991, 181736, 181737, 181764, 183229, 192593, 199082, 199083, 199087, 199088, 199711, 207748, 207620, 207621, 207628

        Case 83900
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 83902, 83903, 83908, 83909
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", gErr)

        Case 83904
            lErro = Rotina_Erro(vbOKOnly, "ERRO_NOTA_FISCAL_INTERNA_SAIDA_NAO_CADASTRADA", gErr, objNFiscal.sSerie, objNFiscal.lNumNotaFiscal)

        Case 83905
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_NFISCAL", gErr)

        Case 83907
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TIPO_NFISCAL_NAO_CADASTRADO", gErr, objTipoDocInfo.iCodigo)

        Case 83910
            lErro = Rotina_Erro(vbOKOnly, "ERRO_NFISCAL_VINCULADA_EXCLUIR", gErr, lNumNotaFiscal, iTipoNF)

        Case 83913, 83914, 199085, 199086
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSNFISCAL1", gErr)

        Case 83915
            lErro = Rotina_Erro(vbOKOnly, "ERRO_NFISCAL_SEM_ITENS", gErr, objNFiscal.lNumNotaFiscal)

        Case 83916, 83917, 83922, 83923
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOESTOQUE", gErr)
        
        Case 89052, 89053
            lErro = Rotina_Erro(vbOKOnly, "ERRO_MOVESTOQUE_NAO_CADASTRADO2", gErr, objNFiscal.iFilialEmpresa, lCodigo)

        Case 83931
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_ITEMNF", gErr)

        Case 91056
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_NFISCAL1", gErr, objNFiscal.sSerie, objNFiscal.lNumNotaFiscal)

        Case 199080, 199081
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITEMNFRESTO", gErr)

        Case 199084
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_ITEMNFRESTO", gErr)

        Case 199089
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_ITEMNFRESTO", gErr)

        Case 212035, 212036, 212037
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_IMPORTNFEXML_EXCNF", gErr)
        
        Case 203045
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_CADASTRADA_NAO_EXCLUI", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149884)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function NotaFiscalRemPedidoSaida_Excluir_EmTrans(ByVal objNFiscal As ClassNFiscal, ByVal objContabil As ClassContabil) As Long
'Faz o cancelamento de uma nota fiscal de Saida

Dim lErro As Long, iIndice As Integer
Dim lTransacao As Long, alComando(0 To 11) As Long
Dim iClasseDocCPR As Integer, lNumIntDocCPR As Long
Dim lNumIntItem As Long
Dim objMovEstoque As New ClassMovEstoque, objTipoDocInfo As New ClassTipoDocInfo
Dim lCodigo As Long, lNumNotaFiscal As Long, iTipoNF As Integer, iStatus As Integer
Dim lNumIntDocEst As Long
Dim objMovEstoque1 As New ClassMovEstoque
Dim lErro1 As Long
Dim iTipoOrigem As Integer
Dim lNumIntOrigem As Long
Dim objNFiscalAux As New ClassNFiscal
Dim iIndiceAux As Integer
Dim objItemRomaneio As ClassItemRomaneioGrade
Dim iFilialEmpresa As Integer

On Error GoTo Erro_NotaFiscalRemPedidoSaida_Excluir_EmTrans
    
    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 96028
    Next
    
    'Lê a nota fiscal
    lErro = Comando_ExecutarPos(alComando(0), "SELECT  ClasseDocCPR, NumIntDocCPR, Status FROM NFiscal WHERE NumIntDoc = ?", 0, iClasseDocCPR, lNumIntDocCPR, iStatus, objNFiscal.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 96030

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 96031
    
    If lErro <> AD_SQL_SUCESSO Then gError 96032  'Não encontrou

    'faz o lock na Nota Fiscal
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 96033

    'se foi comandada uma exclusao pelo botao de exclusao e nao pela gravacao de nota (alteracao) ==> testar se a nota foi enviada
    If objNFiscal.objContabil.objGridInt Is Nothing Then
        
        'verifica se a nota fiscal foi processada pela sefaz ou se foi enviada
        lErro = CF("NFiscal_Testa_Existencia1", objNFiscal)
        If lErro <> SUCESSO And lErro <> 207565 And lErro <> 207624 Then gError 210965

    End If

    'exclui os registros de nfefedlote ligado a nota em questao
    lErro = CF("NFeFedLote_Excluir", objNFiscal)
    If lErro <> SUCESSO Then gError 210966
    
    lErro = CF("RPSWEBLote_Excluir", objNFiscal)
    If lErro <> SUCESSO Then gError 210967
        
    If Not (objContabil Is Nothing) Then
        'exclui os dados contábeis pendentes ou atualizados (se houverem) relativos a lNumIntDocOrigem
        lErro = objContabil.Contabil_Exclui(objNFiscal.lNumIntDoc, CONTABIL_EXCLUI_EFETIVO)
        If lErro <> SUCESSO Then gError 96053
    End If
                
    'Lê o tipodocinfo da nota fiscal
    objTipoDocInfo.iCodigo = objNFiscal.iTipoNFiscal
    
    lErro = CF("TipoDocInfo_Le_Codigo", objTipoDocInfo)
    If lErro <> SUCESSO And lErro <> 31415 Then gError 96034
    
    If lErro <> SUCESSO Then gError 96035
    
    'Se é uma nota que possui vinculação com outra que a sucede. Ex. Uma nota que tem uma devolução vinculada ou uma nota que tem um complemento vinculado.
    'If Len(Trim(objTipoDocInfo.sSiglaNFOriginal)) > 0 Or objTipoDocInfo.iComplementar <> DOCINFO_COMPLEMENTO Then
    
    'verifica se a nota está vinculada a sua devolução ou ao seu complemento
    lErro = Comando_Executar(alComando(1), "SELECT NumNotaFiscal, TipoNFiscal FROM NFiscal WHERE NumIntNotaOriginal = ?", lNumNotaFiscal, iTipoNF, objNFiscal.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 96036

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 96037
    
    If lErro = AD_SQL_SUCESSO Then gError 96038
    
    'verifica se a nota está vinculada a alguma outra (um complemento, uma devolução, etc.)
    lErro = Comando_Executar(alComando(11), "SELECT N.NumNotaFiscal, N.TipoNFiscal FROM NFiscal AS N, ItensNFiscal AS I WHERE N.NumIntDoc = I.NumIntNF AND I.NumIntDocOrig IN (SELECT NumIntDoc FROM ItensNFiscal WHERE NumIntNF = ?)", lNumNotaFiscal, iTipoNF, objNFiscal.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 96036

    lErro = Comando_BuscarPrimeiro(alComando(11))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 96037
    
    If lErro = AD_SQL_SUCESSO Then gError 96038 'Se já foi, erro.
    'End If
      
    'Atualiza a qtd faturada ou desfaz a baixa do Pedido.
    lErro = CF("CancelamentoNFiscal_Atualiza_Pedido", objNFiscal)
    If lErro <> SUCESSO Then gError 96039
    
    'Se a nota gerou documentos em  CPR
    If iClasseDocCPR > 0 And lNumIntDocCPR > 0 Then
    
        'Desfaz os documentos associados
        lErro = CF("CPR_Exclui", iClasseDocCPR, lNumIntDocCPR, 1)
        If lErro <> SUCESSO Then gError 96040
    
    End If
    
    objNFiscalAux.lNumIntDoc = objNFiscal.lNumIntDoc
    
    lErro = CF("NFiscalItens_Le", objNFiscalAux)
    If lErro <> SUCESSO Then gError 210968
    
    lErro = CF("AlocacoesNF_Le", objNFiscalAux)
    If lErro <> SUCESSO Then gError 210969
    
    iTipoOrigem = 0

    For iIndiceAux = 1 To objNFiscalAux.colItensNF.Count
    
        If objNFiscalAux.colItensNF(iIndiceAux).iPossuiGrade = DESMARCADO Then
            
            If objNFiscalAux.colItensNF(iIndiceAux).colAlocacoes.Count > 0 Then
                lNumIntOrigem = objNFiscalAux.colItensNF(iIndiceAux).lNumIntDoc 'Alterado por Wagner
                iTipoOrigem = MOVEST_TIPONUMINTDOCORIGEM_ITEMNFISCAL
                Exit For
            End If
        Else
        
            For Each objItemRomaneio In objNFiscalAux.colItensNF(iIndiceAux).colItensRomaneioGrade
                If objItemRomaneio.colLocalizacao.Count > 0 Then
                    iTipoOrigem = MOVEST_TIPONUMINTDOCORIGEM_ITEMNFISCALGRADE
                    lNumIntOrigem = objItemRomaneio.lNumIntDoc
                    Exit For
                End If
            Next
            If iTipoOrigem > 0 Then Exit For
        End If
    Next
    '###############################################################
    
    If iTipoOrigem <> 0 Then

        objMovEstoque.iFilialEmpresa = objNFiscal.iFilialEmpresa
        
        lErro = CF("Customizacoes_MovEstoque", objMovEstoque)
        If lErro <> SUCESSO Then gError 210970
        
        'Verifica se há movimento de estoque ligado ao item
        lErro = Comando_Executar(alComando(4), "SELECT Codigo, NumIntDocEst FROM MovimentoEstoque WHERE TipoNumIntDocOrigem = ? AND NumIntDocOrigem = ? AND FilialEmpresa = ?", lCodigo, lNumIntDocEst, iTipoOrigem, lNumIntOrigem, objMovEstoque.iFilialEmpresa)
        If lErro <> AD_SQL_SUCESSO Then gError 210971
    
        lErro = Comando_BuscarPrimeiro(alComando(4))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210972
        
        If lErro = AD_SQL_SUCESSO Then
        
            objMovEstoque.lCodigo = lCodigo
            
            'Lê os movimento dos itens de nota fiscal
            lErro = CF("MovEstoqueItens_Le_Desc1", objMovEstoque)
            If lErro <> SUCESSO And lErro <> 89050 Then gError 210973
            
            If lErro = 89050 Then gError 210974
            
            'Redefine os movimento para fazer o cancelamento
            objMovEstoque.iOperacao = EXCLUSAO_MOVIMENTO
            
            'Grava o movimento de estoque
            lErro = CF("MovEstoque_Grava", objMovEstoque)
            If lErro <> SUCESSO Then gError 210975
        
        End If
        
    End If
    
'    'Busca os itens da nota associada
'    lErro1 = Comando_ExecutarPos(alComando(2), "SELECT NumIntDoc FROM ItensNFiscal WHERE NumIntNF = ? ", 0, lNumIntItem, objNFiscal.lNumIntDoc)
'    If lErro1 <> AD_SQL_SUCESSO Then gError 96041
'
'    lErro1 = Comando_BuscarPrimeiro(alComando(2))
'    If lErro1 <> AD_SQL_SUCESSO And lErro1 <> AD_SQL_SEM_DADOS Then gError 96042
'
'    'Verifica se há movimento de estoque ligado ao item
'    lErro = Comando_Executar(alComando(4), "SELECT Codigo, NumIntDocEst FROM MovimentoEstoque WHERE TipoNumIntDocOrigem = ? AND NumIntDocOrigem = ? AND FilialEmpresa = ?", lCodigo, lNumIntDocEst, MOVEST_TIPONUMINTDOCORIGEM_ITEMNFISCAL, lNumIntItem, objNFiscal.iFilialEmpresa)
'    If lErro <> AD_SQL_SUCESSO Then gError 96043
'
'    lErro = Comando_BuscarPrimeiro(alComando(4))
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 96044
'
'    If lErro = AD_SQL_SUCESSO Then
'
'        'Lê o movto de estoque da NOta fiscal
'        objMovEstoque.iFilialEmpresa = objNFiscal.iFilialEmpresa
'
'        objMovEstoque.lCodigo = lCodigo
'
'        'Lê os movimento dos itens de nota fiscal
'        lErro = CF("MovEstoqueItens_Le_Desc1", objMovEstoque)
'        If lErro <> SUCESSO And lErro <> 89050 Then gError 96045
'
'        If lErro = 89050 Then gError 96046
'
'        'Redefine os movimento para fazer o cancelamento
'        objMovEstoque.iOperacao = EXCLUSAO_MOVIMENTO
'
'        'Grava o movimento de estoque
'        lErro = CF("MovEstoque_Grava", objMovEstoque)
'        If lErro <> SUCESSO Then gError 96047
'
'    End If
    
    'se a nota já não tiver sido cancelada anteriormente, i.e., se sua estatística já não foi desfeita
    If iStatus <> STATUS_CANCELADO Then
    
        'Desfaz a Estatistica de Compras
        'Trata-se de uma nota fiscal de venda
        If (objTipoDocInfo.iFaturamento = TIPODOCINFO_FATURAVEL) And (objTipoDocInfo.iComplementar = DOCINFO_NORMAL) Then
            
            'Defaz a Estatistica
            lErro = FilialClienteFilEmp_Cancela_NF(objNFiscal)
            If lErro <> SUCESSO Then gError 96048
        
            lErro = ProdutoVendido_Cancela_Estatisticas(objNFiscal)
            If lErro <> SUCESSO Then gError 96049
        
        End If
            
        'se for a exclusão de uma devolução de compra
        If objTipoDocInfo.iCompras = TIPODOCINFO_COMPRAS_DEVOLUCAO Then
            
            'Desfaz a Estatística da Filial Fornecedor
            lErro = CF("FilialFornecedor_Grava_Estatisticas", objNFiscal, CANCELAMENTO_FILIALFORNFILEMP)
            If lErro <> SUCESSO Then gError 96050
            
        End If
        
    End If
        
    'Verifica se o modulo de Livros Fiscais está Ativo
    If gcolModulo.Ativo(MODULO_LIVROSFISCAIS) = MODULO_ATIVO Then
                        
        'Grava o Livro Fiscal a partir da Nota Fiscal
        lErro = CF("NotaFiscal_Exclui_Fis", objNFiscal)
        If lErro <> SUCESSO Then gError 96051
    
    End If
    
    lErro = CF("NFiscal_ExcluiTributacao", objNFiscal)
    If lErro <> SUCESSO Then gError 96052
    
    'Busca os itens da nota associada
    lErro1 = Comando_ExecutarPos(alComando(2), "SELECT NumIntDoc FROM ItensNFiscal WHERE NumIntNF = ? ", 0, lNumIntItem, objNFiscal.lNumIntDoc)
    If lErro1 <> AD_SQL_SUCESSO Then gError 96041

    lErro1 = Comando_BuscarPrimeiro(alComando(2))
    If lErro1 <> AD_SQL_SUCESSO And lErro1 <> AD_SQL_SEM_DADOS Then gError 96042
    
    
    Do While lErro1 <> AD_SQL_SEM_DADOS
                
        'Cancela o item
        lErro1 = Comando_ExecutarPos(alComando(3), "DELETE FROM ItensNFiscal", alComando(2))
        If lErro1 <> AD_SQL_SUCESSO Then gError 96054
        
        lErro1 = Comando_BuscarProximo(alComando(2))
        If lErro1 <> SUCESSO And lErro1 <> AD_SQL_SEM_DADOS Then gError 96055
        
    Loop
        
    'Atualiza o status da nota fiscal
    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM NFiscal", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 96056
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    NotaFiscalRemPedidoSaida_Excluir_EmTrans = SUCESSO

    Exit Function

Erro_NotaFiscalRemPedidoSaida_Excluir_EmTrans:

    NotaFiscalRemPedidoSaida_Excluir_EmTrans = gErr

    Select Case gErr
       
        Case 96028
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 96030, 96031, 96036, 96037
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", gErr)

        Case 96032
            lErro = Rotina_Erro(vbOKOnly, "ERRO_NOTA_FISCAL_INTERNA_SAIDA_NAO_CADASTRADA", gErr, objNFiscal.sSerie, objNFiscal.lNumNotaFiscal)

        Case 96033
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_NFISCAL", gErr)

        Case 96035
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TIPO_NFISCAL_NAO_CADASTRADO", gErr, objTipoDocInfo.iCodigo)

        Case 96038
            lErro = Rotina_Erro(vbOKOnly, "ERRO_NFISCAL_VINCULADA_EXCLUIR", gErr, lNumNotaFiscal, iTipoNF)

        Case 96041, 96042
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSNFISCAL1", gErr)

        Case 96043, 96044, 210971, 210972
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOESTOQUE", gErr)
        
        Case 96046, 210974
            lErro = Rotina_Erro(vbOKOnly, "ERRO_MOVESTOQUE_NAO_CADASTRADO2", gErr, objNFiscal.iFilialEmpresa, lCodigo)

        Case 96053, 96051, 96052, 96034, 96039, 96040, 96045, 96047, 96048, 96049, 96055, 96057, 96050, 210965 To 210970, 210973, 210975

        Case 96054
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_ITEMNF", gErr)

        Case 96056
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_NFISCAL1", gErr, objNFiscal.sSerie, objNFiscal.lNumNotaFiscal)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149885)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function
'Janaina
End Function

Private Function ConhecimentoFrete_Exclui(ByVal objNFiscal As ClassNFiscal) As Long

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim lNumIntDoc As Long

On Error GoTo Erro_ConhecimentoFrete_Exclui
    
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 89132
    
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 89133
    
    'Lê a Série para poder lockar
    lErro = Comando_ExecutarPos(lComando, "SELECT NumIntNFiscal FROM ConhecimentoFrete WHERE NumIntNFiscal = ?", 0, lNumIntDoc, objNFiscal.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 89134

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 89135
    
    If lErro = SUCESSO Then
    
        'Se não estava lockado então locka
        lErro = Comando_ExecutarPos(lComando1, "DELETE FROM ConhecimentoFrete", lComando)
        If lErro <> AD_SQL_SUCESSO Then gError 89136

    End If

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    ConhecimentoFrete_Exclui = SUCESSO
    
    Exit Function
    
Erro_ConhecimentoFrete_Exclui:

    ConhecimentoFrete_Exclui = gErr
    
    Select Case gErr
        
        Case 89132, 89133
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 89134, 89135
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONHECIMENTO_FRETE", gErr)
        
        Case 89136
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CONHECIMENTO_FRETE", gErr)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149886)

    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Private Function SldMesFat_Altera_Estatisticas(ByVal objNFiscal As ClassNFiscal, ByVal objNFiscalBD As ClassNFiscal) As Long
'Para as notas de fiscais de saidao, Atualiza as tabelas SldMesFat e SldDiaFat diminuindo a quantidade e o valor da data de emissao original e colocando na nova data
'Tem que ser chamado dentro de Transação

Dim lErro As Long
Dim dtDataEmissao As Date

On Error GoTo Erro_SldMesFat_Altera_Estatisticas

    If objNFiscal.dtDataEmissao <> objNFiscalBD.dtDataEmissao Then

        'Grava a Estatística do Produto com Relação a devolução
        lErro = CF("ProdutoVendido_Grava_Estatisticas", objNFiscalBD, CANCELAMENTO_DOC)
        If lErro <> SUCESSO Then gError 89788

        dtDataEmissao = objNFiscalBD.dtDataEmissao
    
        objNFiscalBD.dtDataEmissao = objNFiscal.dtDataEmissao
    
        'Grava a Estatística do Produto com Relação a devolução
        lErro = CF("ProdutoVendido_Grava_Estatisticas", objNFiscalBD, CADASTRAMENTO_DOC)
        If lErro <> SUCESSO Then gError 89789
    
        objNFiscalBD.dtDataEmissao = dtDataEmissao

    End If

    SldMesFat_Altera_Estatisticas = SUCESSO
    
    Exit Function

Erro_SldMesFat_Altera_Estatisticas:

    SldMesFat_Altera_Estatisticas = gErr
    
    Select Case gErr

        Case 89788, 89789

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, 149887)

    End Select
    
    Exit Function

End Function

'horaentrada
Private Function NFiscal_Altera_MovEstoque(ByVal objNFiscal As ClassNFiscal) As Long
'trata da alteração de data dos movimentos de estoque associados à nota fiscal

Dim objMovEstoque As New ClassMovEstoque
Dim lCodigoMovEst As Long
Dim lErro As Long
Dim objItemMovEstoque As ClassItemMovEstoque
Dim objTipoDocInfo As New ClassTipoDocInfo
Dim objNFiscalBD As New ClassNFiscal

On Error GoTo Erro_NFiscal_Altera_MovEstoque

    objTipoDocInfo.iCodigo = objNFiscal.iTipoNFiscal
    
    'Le o tipo do produto
    lErro = CF("TipoDocInfo_Le_Codigo", objTipoDocInfo)
    If lErro <> SUCESSO Then gError 89795

    objNFiscalBD.lNumIntDoc = objNFiscal.lNumIntDoc
    objNFiscalBD.iFilialEmpresa = objNFiscal.iFilialEmpresa

    'Lê os Ítens da Nota Fiscal
    lErro = CF("NFiscalItens_Le", objNFiscalBD)
    If lErro <> SUCESSO Then gError 89701
    
    'Lê o codigo do movimento de estoque associado aos itens da Nota Fiscal passada
    lErro = CF("MovEstoque_NFiscal_Le", objNFiscalBD, objMovEstoque)
    If lErro <> SUCESSO And lErro <> 89699 Then gError 89702
    
    If lErro = SUCESSO Then
    
        For Each objItemMovEstoque In objMovEstoque.colItens
            If objTipoDocInfo.iTipo = TIPODOCINFO_TIPO_NFIS Then
                objItemMovEstoque.dtData = objNFiscal.dtDataSaida
                objItemMovEstoque.dtHora = objNFiscal.dtHoraSaida
            Else
                objItemMovEstoque.dtData = objNFiscal.dtDataEntrada
                objItemMovEstoque.dtHora = objNFiscal.dtHoraEntrada
            End If
        Next
        
        'Lê o movto de estoque da NOta fiscal
        objMovEstoque.iFilialEmpresa = objNFiscal.iFilialEmpresa
        objMovEstoque.lCodigo = objMovEstoque.colItens(1).lCodigo
    
        If objTipoDocInfo.iTipo = TIPODOCINFO_TIPO_NFIS Then
            objMovEstoque.dtData = objNFiscal.dtDataSaida
            objMovEstoque.dtHora = objNFiscal.dtHoraSaida
        Else
            objMovEstoque.dtData = objNFiscal.dtDataEntrada
            objMovEstoque.dtHora = objNFiscal.dtHoraEntrada
        End If
        
        'Gera um Movimento de Estoque
        lErro = CF("MovEstoque_Grava", objMovEstoque)
        If lErro <> SUCESSO Then gError 89693

    End If

    'Atualiza os campos Data e Hora de entrada e saida da nota fiscal passada como parametro
    lErro = CF("NFiscal_Grava_DataHora", objNFiscal)
    If lErro <> SUCESSO Then gError 89721

    NFiscal_Altera_MovEstoque = SUCESSO

    Exit Function
    
Erro_NFiscal_Altera_MovEstoque:

    NFiscal_Altera_MovEstoque = gErr

    Select Case gErr
    
        Case 89693, 89701, 89702, 89721, 89795
    
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149888)

    End Select

    Exit Function

End Function

'horaentrada
Function NFiscal_Alteracao(ByVal objNFiscal As ClassNFiscal) As Long
'trata da alteração de data dos movimentos de estoque associados à nota fiscal

Dim lErro As Long
Dim objTituloPagar As New ClassTituloPagar
Dim objNFiscalBD As New ClassNFiscal

On Error GoTo Erro_NFiscal_Alteracao

    objNFiscalBD.lNumIntDoc = objNFiscal.lNumIntDoc
    
    'le a nota fiscal e traz para objNFiscalBD
    lErro = CF("NFiscal_Le", objNFiscalBD)
    If lErro <> SUCESSO And lErro <> 31442 Then gError 89739

    'se a nota fiscal não estiver cadastrada ==> erro
    If lErro = 31442 Then gError 89738
        
    lErro = CF("NFiscal_Grava_Msg", objNFiscal)
    If lErro <> SUCESSO Then gError 89739
    
    'trata da alteração de data/hora dos movimentos de estoque associados à nota fiscal
'    lErro = NFiscal_Altera_MovEstoque(objNFiscal)
'    If lErro <> SUCESSO Then gError 89685


    If Not objNFiscal.objRastreamento Is Nothing Then
        'Se a nota já existir, permite alterar os rastreamentos
        lErro = objNFiscal.objRastreamento.Altera_Rastreamento(objNFiscal)
        If lErro <> SUCESSO Then gError 83238
    End If

    'Atualiza os campos Data e Hora de entrada e saida da nota fiscal passada como parametro
    lErro = CF("NFiscal_Grava_DataHora", objNFiscal)
    If lErro <> SUCESSO Then gError 89721

    '########################################################
    'Inserido por Wagner
    lErro = CF("NFiscalEntrada_Grava_CamposAlteraveis", objNFiscal)
    If lErro <> SUCESSO Then gError 132355
    '########################################################

    'Atualiza as tabelas SldMesForn e SldDiaForn diminuindo a quantidade e o valor da data de emissao original e colocando na nova data, se a data de emissão foi alterada
    lErro = CF("SldMesForn_Altera_Estatisticas", objNFiscal, objNFiscalBD)
    If lErro <> SUCESSO Then gError 89736

    'Para as notas fiscais de saida que participam do faturamento, Atualiza as tabelas SldMesFat e SldDiaFat diminuindo a quantidade e o valor da data de emissao original e colocando na nova data
    lErro = SldMesFat_Altera_Estatisticas(objNFiscal, objNFiscalBD)
    If lErro <> SUCESSO Then gError 89792

    objNFiscal.iClasseDocCPR = objNFiscalBD.iClasseDocCPR
    objNFiscal.lNumIntDocCPR = objNFiscalBD.lNumIntDocCPR

    'Altera a data de emissao do titulo relacionado à nota fiscal, se houver
    lErro = CF("CPR_Altera", objNFiscal)
    If lErro <> SUCESSO Then gError 89772

    'Verifica se o modulo de Livros Fiscais está Ativo
    If gcolModulo.Ativo(MODULO_LIVROSFISCAIS) = MODULO_ATIVO Then

        lErro = CF("NotaFiscal_Altera_Fis", objNFiscal)
        If lErro <> SUCESSO Then gError 88034
    
    End If
    
    NFiscal_Alteracao = SUCESSO
    
    Exit Function

Erro_NFiscal_Alteracao:

    NFiscal_Alteracao = gErr
    
    Select Case gErr

        Case 83238, 88034, 89685, 89721, 89736, 89739, 89772, 89778, 89792, 132355

        Case 89738
            Call Rotina_Erro(vbOKOnly, "ERRO_NOTA_FISCAL_NAO_CADASTRADA", gErr, objNFiscal.lNumIntDoc)
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149889)

    End Select
    
    Exit Function
    
End Function



'Function ProdutoVendido_Grava_EstatisticasDev(objNFiscal As ClassNFiscal, iCancelamento As Integer) As Long
''Grava a estatística dos produtos devolvidos
'
'Dim objTipoDocInfo As New ClassTipoDocInfo
'Dim lErro As Long
'
'On Error GoTo Erro_ProdutoVendido_Grava_EstatisticasDev
'
'    objTipoDocInfo.iCodigo = objNFiscal.iTipoNFiscal
'
'    'Le o tipo do produto
'    lErro = CF("TipoDocInfo_Le_Codigo",objTipoDocInfo)
'    If lErro <> SUCESSO Then Error 52735
'
'    'Verifica se é NotaFiscal de Devolução de Venda
'    If (objTipoDocInfo.iFaturamento = TIPODOCINFO_FATURAMENTO_DEV) And (objTipoDocInfo.iComplementar = DOCINFO_NORMAL) Then
'
'        'Grava a estatistica do Dia do Produto
'        lErro = SldDiaFat_Grava_EstDev(objNFiscal, iCancelamento)
'        If lErro <> SUCESSO Then Error 52736
'
'        'Grava a estatística do Mês do Produto
'        lErro = SldMesFat_Grava_EstDev(objNFiscal, iCancelamento)
'        If lErro <> SUCESSO Then Error 52737
'
'    End If
'
'    ProdutoVendido_Grava_EstatisticasDev = SUCESSO
'
'    Exit Function
'
'Erro_ProdutoVendido_Grava_EstatisticasDev:
'
'    ProdutoVendido_Grava_EstatisticasDev = Err
'
'    Select Case Err
'
'        Case 52735, 52736, 52737 'Tratados na rotinas chamadas
'
'        Case Else
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 149890)
'
'    End Select
'
'    Exit Function
'
'End Function

'Private Function SldDiaFat_Grava_EstDev(objNFiscal As ClassNFiscal, iCancelamento As Integer) As Long
''Grava a estatística do Dia do produto
'
'Dim lErro As Long
'Dim objItemNF As ClassItemNF
'Dim objSldDiaFat As New ClassSldDiaFat
'Dim dQuantUMVenda As Double
'Dim dFator As Double
'Dim lComando As Long, lComando2 As Long, lComando3 As Long
'Dim objProduto As New ClassProduto
'
'On Error GoTo Erro_SldDiaFat_Grava_EstDev
'
'    'Inicializa comandos
'    lComando = Comando_Abrir()
'    If lComando = 0 Then gError 52738
'
'    lComando2 = Comando_Abrir()
'    If lComando2 = 0 Then gError 52739
'
'    lComando3 = Comando_Abrir()
'    If lComando3 = 0 Then gError 52825
'
'    'Para cada Item da Nota Fiscal
'    For Each objItemNF In objNFiscal.ColItensNF
'
'        objProduto.sCodigo = objItemNF.sProduto
'
'        'Lê na tabela de Produto a UM de venda
'        lErro = CF("Produto_Le",objProduto)
'        If lErro <> SUCESSO And lErro <> 28030 Then gError 52775
'
'        'Se não encontrar o produto  - - ->>> Erro
'        If lErro = 28030 Then gError 52776
'
'        'Calcula fator de conversão para UM_Venda
'        lErro = CF("UM_Conversao",objItemNF.iClasseUM, objItemNF.sUnidadeMed, objProduto.sSiglaUMVenda, dFator)
'        If lErro <> SUCESSO Then gError 52741
'
'        'Converte Quantidade para UM_Venda
'        dQuantUMVenda = (objItemNF.dQuantidade * dFator)
'
'        objSldDiaFat.iFilialEmpresa = giFilialEmpresa
'        objSldDiaFat.dtData = objNFiscal.dtDataEmissao
'        objSldDiaFat.sProduto = objItemNF.sProduto
'
'        'Lê todos os atributos na tabela SldDiaFat e faz lock exclusive
'        lErro = CF("SldDiaFat_Le_Lock",lComando, objSldDiaFat)
'        If lErro <> SUCESSO And lErro <> 52729 Then gError 52740
'
'        If lErro = SUCESSO Then 'Registro SldDiaFat existe no BD
'
'            If iCancelamento = CANCELAMENTO_DOC Then
'
'                objSldDiaFat.dValorDevolvido = objSldDiaFat.dValorDevolvido - objItemNF.dValorTotal
'                objSldDiaFat.dQuantDevolvida = objSldDiaFat.dQuantDevolvida - dQuantUMVenda
'
'            Else
'
'                objSldDiaFat.dValorDevolvido = objSldDiaFat.dValorDevolvido + objItemNF.dValorTotal
'                objSldDiaFat.dQuantDevolvida = objSldDiaFat.dQuantDevolvida + dQuantUMVenda
'
'            End If
'
'            'Atualiza a tabela de SldDiaFat
'            lErro = Comando_ExecutarPos(lComando2, "UPDATE SldDiaFat SET ValorDevolvido =?, QuantDevolvida=?", lComando, objSldDiaFat.dValorDevolvido, objSldDiaFat.dQuantDevolvida)
'            If lErro <> AD_SQL_SUCESSO Then gError 52742
'
'        Else 'Registro SldDiaFat não existe no BD
'
'            If iCancelamento = CANCELAMENTO_DOC Then
'
'                lErro = Comando_Executar(lComando3, "INSERT INTO SldDiaFat (FilialEmpresa, Data, Produto, ValorDevolvido, QuantDevolvida) VALUES (?,?,?,?,?)", giFilialEmpresa, objNFiscal.dtDataEmissao, objItemNF.sProduto, -objItemNF.dValorTotal, -dQuantUMVenda)
'                If lErro <> AD_SQL_SUCESSO Then gError 89785
'
'            Else
'
'                lErro = Comando_Executar(lComando3, "INSERT INTO SldDiaFat (FilialEmpresa, Data, Produto, ValorDevolvido, QuantDevolvida) VALUES (?,?,?,?,?)", giFilialEmpresa, objNFiscal.dtDataEmissao, objItemNF.sProduto, objItemNF.dValorTotal, dQuantUMVenda)
'                If lErro <> AD_SQL_SUCESSO Then gError 52827
'
'            End If
'
'        End If
'
'    Next
'
'    'Libera comandos
'    Call Comando_Fechar(lComando)
'    Call Comando_Fechar(lComando2)
'    Call Comando_Fechar(lComando3)
'
'    SldDiaFat_Grava_EstDev = SUCESSO
'
'    Exit Function
'
'Erro_SldDiaFat_Grava_EstDev:
'
'    SldDiaFat_Grava_EstDev = gErr
'
'    Select Case gErr
'
'        Case 52738, 52739, 52825
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
'
'        Case 52740, 52741, 52775 'Tratados nas rotinas chamadas
'
'        Case 52742
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SLDDIAFAT", gErr, objSldDiaFat.iFilialEmpresa, objSldDiaFat.sProduto, objSldDiaFat.dtData)
'
'        Case 52776
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_INEXISTENTE", gErr, objProduto.sCodigo)
'
'        Case 52827, 89785
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_SLDDIAFAT", gErr, giFilialEmpresa, objItemNF.sProduto, objNFiscal.dtDataEmissao)
'
'        Case Else
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149891)
'
'    End Select
'
'    'Libera comandos
'    Call Comando_Fechar(lComando)
'    Call Comando_Fechar(lComando2)
'    Call Comando_Fechar(lComando3)
'
'    Exit Function
'
'End Function
        
'Private Function SldMesFat_Grava_EstDev(objNFiscal As ClassNFiscal, iCancelamento As Integer) As Long
''Grava a estatística do Mês do produto
'
'Dim lErro As Long
'Dim objItemNF As ClassItemNF
'Dim objSldMesFat As New ClassSldMesFat
'Dim iMes As Integer
'Dim dFator As Double
'Dim dQuantUMVenda As Double
'Dim sMes As String
'Dim lComando As Long, lComando2 As Long, lComando3 As Long
'Dim objProduto As New ClassProduto
'
'On Error GoTo Erro_SldMesFat_Grava_EstDev
'
'    'Inicializa comandos
'    lComando = Comando_Abrir()
'    If lComando = 0 Then gError 52743
'
'    lComando2 = Comando_Abrir()
'    If lComando2 = 0 Then gError 52744
'
'    lComando3 = Comando_Abrir()
'    If lComando3 = 0 Then gError 52828
'
'    'Para cada Item da Nota Fiscal
'    For Each objItemNF In objNFiscal.ColItensNF
'
'        'Pega o mês correspondente
'        iMes = Month(objNFiscal.dtDataEmissao)
'
'        'Transforma em string para a concatenação
'        sMes = CStr(iMes)
'
'        objProduto.sCodigo = objItemNF.sProduto
'
'        'Lê na tabela de Produto a UM de venda
'        lErro = CF("Produto_Le",objProduto)
'        If lErro <> SUCESSO And lErro <> 28030 Then gError 52777
'
'        'Se não encontrar o produto  - - ->>> Erro
'        If lErro = 28030 Then gError 52778
'
'        'Calcula o fator de converção da UM_Venda
'        lErro = CF("UM_Conversao",objItemNF.iClasseUM, objItemNF.sUnidadeMed, objProduto.sSiglaUMVenda, dFator)
'        If lErro <> SUCESSO Then gError 52746
'
'        'Converte a UM da Quantidade
'        dQuantUMVenda = (objItemNF.dQuantidade * dFator)
'
'        objSldMesFat.iFilialEmpresa = giFilialEmpresa
'        objSldMesFat.iAno = Year(objNFiscal.dtDataEmissao)
'        objSldMesFat.sProduto = objItemNF.sProduto
'
'        'Lê todos os atributos na tabela SldMesFat e faz lock exclusive
'        lErro = CF("SldMesFat_Le_Lock",lComando, objSldMesFat)
'        If lErro <> SUCESSO And lErro <> 52733 Then gError 52745
'
'        If lErro = SUCESSO Then
'
'            If iCancelamento = CANCELAMENTO_DOC Then
'
'                objSldMesFat.dValorDevolvido(iMes) = objSldMesFat.dValorDevolvido(iMes) - objItemNF.dValorTotal
'                objSldMesFat.dQuantDevolvida(iMes) = objSldMesFat.dQuantFaturada(iMes) - dQuantUMVenda
'
'            Else
'
'                objSldMesFat.dValorDevolvido(iMes) = objSldMesFat.dValorDevolvido(iMes) + objItemNF.dValorTotal
'                objSldMesFat.dQuantDevolvida(iMes) = objSldMesFat.dQuantFaturada(iMes) + dQuantUMVenda
'
'            End If
'
'            'Atualiza a tabela de SldMesFat
'            lErro = Comando_ExecutarPos(lComando2, "UPDATE SldMesFat SET ValorDevolvido" & sMes & "=?, QuantDevolvida" & sMes & "=?", lComando, objSldMesFat.dValorDevolvido(iMes), objSldMesFat.dQuantDevolvida(iMes))
'            If lErro <> AD_SQL_SUCESSO Then gError 52747
'
'        Else
'
'            If iCancelamento = CANCELAMENTO_DOC Then
'
'                'Atualiza a tabela de SldMesFat
'                lErro = Comando_Executar(lComando2, "INSERT INTO SldMesFat (FilialEmpresa , Ano, Produto, ValorDevolvido" & sMes & ", QuantDevolvida" & sMes & ") VALUES (?,?,?,?,?)", objSldMesFat.iFilialEmpresa, objSldMesFat.iAno, objSldMesFat.sProduto, -objItemNF.dValorTotal, -dQuantUMVenda)
'                If lErro <> AD_SQL_SUCESSO Then gError 89784
'
'            Else
'
'                'Atualiza a tabela de SldMesFat
'                lErro = Comando_Executar(lComando2, "INSERT INTO SldMesFat (FilialEmpresa , Ano, Produto, ValorDevolvido" & sMes & ", QuantDevolvida" & sMes & ") VALUES (?,?,?,?,?)", objSldMesFat.iFilialEmpresa, objSldMesFat.iAno, objSldMesFat.sProduto, objItemNF.dValorTotal, dQuantUMVenda)
'                If lErro <> AD_SQL_SUCESSO Then gError 52831
'
'            End If
'
'        End If
'
'    Next
'
'     'Libera comandos
'    Call Comando_Fechar(lComando)
'    Call Comando_Fechar(lComando2)
'    Call Comando_Fechar(lComando3)
'
'    SldMesFat_Grava_EstDev = SUCESSO
'
'    Exit Function
'
'Erro_SldMesFat_Grava_EstDev:
'
'    SldMesFat_Grava_EstDev = gErr
'
'    Select Case gErr
'
'        Case 52743, 52744, 52828
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
'
'        Case 52745, 52746, 52777 'Tratados nas rotinas chamadas
'
'        Case 52747
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SLDMESFAT", gErr, objSldMesFat.iAno, objSldMesFat.iFilialEmpresa, objSldMesFat.sProduto)
'
'        Case 52778
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_INEXISTENTE", gErr, objProduto.sCodigo)
'
'        Case 52831, 89784
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_SLDMESFAT", gErr, objSldMesFat.iFilialEmpresa, objSldMesFat.sProduto, objSldMesFat.iAno)
'
'        Case Else
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149892)
'
'    End Select
'
'    'Libera comandos
'    Call Comando_Fechar(lComando)
'    Call Comando_Fechar(lComando2)
'    Call Comando_Fechar(lComando3)
'
'    Exit Function
'
'End Function

'Private Function SldMesFat_Altera_Estatisticas_Dev(objNFiscal As ClassNFiscal, objNFiscalBD As ClassNFiscal) As Long
''Para as notas de devolução, Atualiza as tabelas SldMesFat e SldDiaFat diminuindo a quantidade e o valor da data de emissao original e colocando na nova data
''Tem que ser chamado dentro de Transação
'
'Dim lErro As Long
'Dim dtDataEmissao As Date
'
'On Error GoTo Erro_SldMesFat_Altera_Estatisticas_Dev
'
'    If objNFiscal.dtDataEmissao <> objNFiscalBD.dtDataEmissao Then
'
'        'Grava a Estatística do Produto com Relação a devolução
'        lErro = CF("ProdutoVendido_Grava_EstatisticasDev",objNFiscalBD, CANCELAMENTO_DOC)
'        If lErro <> SUCESSO Then gError 89776
'
'        dtDataEmissao = objNFiscalBD.dtDataEmissao
'
'        objNFiscalBD.dtDataEmissao = objNFiscal.dtDataEmissao
'
'        'Grava a Estatística do Produto com Relação a devolução
'        lErro = CF("ProdutoVendido_Grava_EstatisticasDev",objNFiscalBD, CADASTRAMENTO_DOC)
'        If lErro <> SUCESSO Then gError 89777
'
'        objNFiscalBD.dtDataEmissao = dtDataEmissao
'
'    End If
'
'    SldMesFat_Altera_Estatisticas_Dev = SUCESSO
'
'    Exit Function
'
'Erro_SldMesFat_Altera_Estatisticas_Dev:
'
'    SldMesFat_Altera_Estatisticas_Dev = gErr
'
'    Select Case gErr
'
'        Case 89776, 89777
'
'        Case Else
'            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, 149893)
'
'    End Select
'
'    Exit Function
'
'End Function
'
Sub NFiscal_Imprime_Romaneio(ByVal objNFiscal As ClassNFiscal)

Dim objRelatorio As New AdmRelatorio
Dim sNomeTsk As String, sBuffer As String
Dim lErro As Long
Dim objSerie As New ClassSerie

On Error GoTo Erro_NFiscal_Imprime_Romaneio

    lErro = objRelatorio.ExecutarDireto("Romaneio de Separação de Nota Fiscal", "", 0, "", "TSERIE", objNFiscal.sSerie, "NNFISCALINIC", CStr(objNFiscal.lNumNotaFiscal), "NNFISCALFIM", CStr(objNFiscal.lNumNotaFiscal))
    If lErro <> SUCESSO Then gError 62552

    objSerie.sSerie = objNFiscal.sSerie
    objSerie.iFilialEmpresa = objNFiscal.iFilialEmpresa

    objSerie.lProxNumRomaneio = CLng(objNFiscal.lNumNotaFiscal) + 1

    'Atualiza a Tabela de Série
    lErro = CF("Serie_Atualiza_ImpressaoRomaneio", objSerie)
    If lErro <> SUCESSO And lErro <> 90116 Then gError 81681

    'Não encontrou a Série
    If lErro = 90116 Then gError 81682
       
    Exit Sub

Erro_NFiscal_Imprime_Romaneio:

    Select Case gErr

        Case 62552, 81681

        Case 81682
            lErro = Rotina_Erro(vbOKOnly, "ERRO_SERIE_NAO_CADASTRADA", gErr, objSerie.sSerie)
       
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149894)

    End Select

    Exit Sub

End Sub

Function Serie_Atualiza_ImpressaoRomaneio(ByVal objSerie As ClassSerie) As Long
'Atualiza o Número do último Romaneio de Nota impressa.

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim lTransacao As Long
Dim lProxNumRomaneio As Long

On Error GoTo Erro_Serie_Atualiza_ImpressaoRomaneio
    
    'Abertura transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 90111
    
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 90112
    
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 90113
    
    'Lê a Série para poder atualizar o Numero de Romaneio
    lErro = Comando_ExecutarPos(lComando, "SELECT ProxNumRomaneio FROM Serie WHERE Serie = ? AND FilialEmpresa = ?", 0, lProxNumRomaneio, objSerie.sSerie, giFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 90114

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 90115

    'Série não está cadastrada
    If lErro = AD_SQL_SEM_DADOS Then gError 90116
   
    'Altera próximo Romaneio de Nota a imprimir
    lErro = Comando_ExecutarPos(lComando1, "UPDATE Serie SET ProxNumRomaneio = ?", lComando, objSerie.lProxNumRomaneio)
    If lErro <> AD_SQL_SUCESSO Then gError 90117

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 90118

    Serie_Atualiza_ImpressaoRomaneio = SUCESSO
    
    Exit Function
    
Erro_Serie_Atualiza_ImpressaoRomaneio:

    Serie_Atualiza_ImpressaoRomaneio = gErr
    
    Select Case gErr
        
        Case 90112, 90113
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 90114, 90115
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SERIE1", gErr, objSerie.sSerie)
        
        Case 90116 'Não encontrou , a ser Tratado na rotina chamadora
        
        Case 90117
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SERIE", gErr, objSerie.sSerie)

        Case 90111
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
        
        Case 90118
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149895)


    End Select

    'Fechamento transação
    Call Transacao_Rollback
    
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Function TabelaPrecoItem_AtualizarPrecosFP(ByVal sProdInicial As String, ByVal sProdFinal As String, ByVal colTabelas As Collection, ByVal dtDataVigencia As Date) As Long
'Atualiza as tabelas de preços utilizando a planilha de formação de preços

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(1 To 4) As Long
Dim lTransacao As Long
Dim sProduto As String
Dim dtDataVigencia1 As Date
Dim iFilialEmpresa As Integer
Dim objFormacaoPreco As New ClassFormacaoPreco
Dim objFormacaoPrecoTemp As ClassFormacaoPreco
Dim colFormacaoPreco As Collection
Dim dValor As Double, objContexto As ClassContextoPlan

On Error GoTo Erro_TabelaPrecoItem_AtualizarPrecosFP

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 92435
    Next

    'Inicia Transação
    lTransacao = Transacao_Abrir()
    If lErro <> SUCESSO Then gError 92436

    objFormacaoPreco.iFilialEmpresa = giFilialEmpresa

    For iIndice = 1 To colTabelas.Count

        sProduto = String(STRING_PRODUTO, 0)

        If sProdInicial <> "" And sProdFinal <> "" Then

            'Pesquisa a tabela de preço os produtos que estão entre o produto inicial e o produto final
            lErro = Comando_Executar(alComando(1), "SELECT DISTINCT TabelasDePrecoItens.CodProduto FROM TabelasDePrecoItens, Produtos WHERE TabelasDePrecoItens.CodProduto = Produtos.Codigo AND Produtos.Ativo = 0 AND CodTabela = ? AND FilialEmpresa = ? AND CodProduto >= ? AND CodProduto <= ?", sProduto, colTabelas.Item(iIndice), giFilialEmpresa, sProdInicial, sProdFinal)
            If lErro <> AD_SQL_SUCESSO Then gError 92437

        ElseIf sProdInicial <> "" And sProdFinal = "" Then

            'Pesquisa a tabela de preço os produtos maiores ou iguais ao produto inicial
            lErro = Comando_Executar(alComando(1), "SELECT DISTINCT TabelasDePrecoItens.CodProduto FROM TabelasDePrecoItens, Produtos WHERE TabelasDePrecoItens.CodProduto = Produtos.Codigo AND Produtos.Ativo = 0 AND CodTabela = ? AND FilialEmpresa = ? AND CodProduto >= ?", sProduto, colTabelas.Item(iIndice), giFilialEmpresa, sProdInicial)
            If lErro <> AD_SQL_SUCESSO Then gError 92438

        ElseIf sProdInicial = "" And sProdFinal <> "" Then

            'Pesquisa a tabela de preço os produtos menores ou iguais ao produto final
            lErro = Comando_Executar(alComando(1), "SELECT DISTINCT TabelasDePrecoItens.CodProduto FROM TabelasDePrecoItens, Produtos WHERE TabelasDePrecoItens.CodProduto = Produtos.Codigo AND Produtos.Ativo = 0 AND CodTabela = ? AND FilialEmpresa = ? AND CodProduto <= ?", sProduto, colTabelas.Item(iIndice), giFilialEmpresa, sProdFinal)
            If lErro <> AD_SQL_SUCESSO Then gError 92439

        Else

            'Pesquisa todos os produtos da tabela de preço
            lErro = Comando_Executar(alComando(1), "SELECT DISTINCT TabelasDePrecoItens.CodProduto FROM TabelasDePrecoItens, Produtos WHERE TabelasDePrecoItens.CodProduto = Produtos.Codigo AND Produtos.Ativo = 0 AND CodTabela = ? AND FilialEmpresa = ?", sProduto, colTabelas.Item(iIndice), giFilialEmpresa)
            If lErro <> AD_SQL_SUCESSO Then gError 92440

        End If

        'Tenta ler os produtos da tabela de preco
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 92441

        Do While lErro <> AD_SQL_SEM_DADOS

            objFormacaoPreco.iTabelaPreco = colTabelas.Item(iIndice)
            objFormacaoPreco.sProduto = sProduto
            objFormacaoPreco.iEscopo = FORMACAO_PRECO_ESCOPO_TABPRECO
            
            Set colFormacaoPreco = New Collection
            
            'Lê a planilha de Formacao de Preço da Tabela/Produto
            lErro = CF("FormacaoPreco_Le1", objFormacaoPreco, colFormacaoPreco)
            If lErro <> SUCESSO And lErro <> 92434 And lErro <> 92432 Then gError 92448
        
            For Each objFormacaoPrecoTemp In colFormacaoPreco
            
                With objFormacaoPrecoTemp
                    .iFilialEmpresa = giFilialEmpresa
                    .iEscopo = FORMACAO_PRECO_ESCOPO_TABPRECO
                    .iTabelaPreco = colTabelas.Item(iIndice)
                    .sProduto = sProduto
                End With
            
            Next
    
            Set objContexto = New ClassContextoPlan

            'Não pode ser objFormacaoPreco.sProduto porque ele é zerado quando se lê o escopo geral em FormacaoPreco_Le1
            'lErro = CF("ContextoPlan_Inicializa", objContexto, objFormacaoPreco.iFilialEmpresa, objFormacaoPreco.sProduto, objFormacaoPreco.iTabelaPreco, gdtDataAtual, 1)
            lErro = CF("ContextoPlan_Inicializa", objContexto, objFormacaoPreco.iFilialEmpresa, sProduto, objFormacaoPreco.iTabelaPreco, gdtDataAtual, 1)
            If lErro <> SUCESSO Then gError 92449
                   
            'Executa as formulas da planilha de preço. Retorna o valor da planilha em dValor (que é o valor da última linha da planilha) e o valor de cada linha em colFormacaoPreco.Item(?).dValor
            lErro = CF("Avalia_Expressao_FPreco1", colFormacaoPreco, dValor, sProduto, objContexto)
            If lErro <> SUCESSO Then gError 92449

            'Pesquisa o item da tabela de preco em questão na data de vigencia
            lErro = Comando_ExecutarPos(alComando(2), "SELECT FilialEmpresa FROM TabelasDePrecoItens WHERE CodTabela = ? AND FilialEmpresa = ? AND CodProduto = ? AND DataVigencia = ?", 0, iFilialEmpresa, colTabelas.Item(iIndice), giFilialEmpresa, sProduto, dtDataVigencia)
            If lErro <> AD_SQL_SUCESSO Then gError 92450

            lErro = Comando_BuscarPrimeiro(alComando(2))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 92451
            
            dValor = StrParaDbl(Format(dValor, gobjFAT.sFormatoPrecoUnitario))

            'se existir o item da tabela de preco na data de vigencia ==> atualiza o valor
            If lErro = AD_SQL_SUCESSO Then

                'Atualiza o preço do produto na tabela
                lErro = Comando_ExecutarPos(alComando(3), "UPDATE TabelasDePrecoItens SET Preco = ?", alComando(2), dValor)
                If lErro <> AD_SQL_SUCESSO Then gError 92453

            Else
            
                'Insere o item na tabela de preço do produto em questão na data de vigência
                lErro = Comando_Executar(alComando(4), "INSERT INTO TabelasDePrecoItens (CodTabela, FilialEmpresa, CodProduto, DataVigencia, Preco) VALUES (?,?,?,?,?)", colTabelas.Item(iIndice), giFilialEmpresa, sProduto, dtDataVigencia, dValor)
                If lErro <> AD_SQL_SUCESSO Then gError 92454
            
            
            End If

            'Lê o próximo Produto na tabela
            lErro = Comando_BuscarProximo(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 92447

        Loop

    Next

    'Finaliza Transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 92455

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    TabelaPrecoItem_AtualizarPrecosFP = SUCESSO

    Exit Function

Erro_TabelaPrecoItem_AtualizarPrecosFP:

    TabelaPrecoItem_AtualizarPrecosFP = gErr

    Select Case gErr

        Case 92435
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 92436
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 92437, 92438, 92439, 92440, 92441, 92447
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TABELASDEPRECOITENS1", gErr, colTabelas.Item(iIndice))

        Case 92448, 92449

        Case 92450, 92451
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TABELASDEPRECOITENS3", gErr, giFilialEmpresa, colTabelas.Item(iIndice), sProduto, dtDataVigencia)

        Case 92453
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_TABELASDEPRECOITENS", gErr, giFilialEmpresa, colTabelas.Item(iIndice), sProduto, dtDataVigencia)

        Case 92454
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_TABELASDEPRECOITENS1", gErr, giFilialEmpresa, colTabelas.Item(iIndice), sProduto, dtDataVigencia)

        Case 92455
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149896)

    End Select

    Call Transacao_Rollback

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function TabelaPrecoItem_AtualizaPrecosPerc(ByVal sProdInicial As String, ByVal sProdFinal As String, ByVal dPercentual As Double, ByVal colTabelas As Collection, ByVal dtDataVigencia As Date, ByVal dtDataBase As Date) As Long
'atualiza as tabelas de preço passadas como parametros a partir da data de vigencia utilizando o percentual em cima dos preços validos na dataatual

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(1 To 4) As Long
Dim lTransacao As Long
Dim dPreco As Double
Dim dPreco1 As Double
Dim dtDataVigencia1 As Date
Dim sProduto As String

On Error GoTo Erro_TabelaPrecoItem_AtualizaPrecosPerc

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 92456
    Next

    'Inicia Transação
    lTransacao = Transacao_Abrir()
    If lErro <> SUCESSO Then gError 92457

    For iIndice = 1 To colTabelas.Count

        sProduto = String(STRING_PRODUTO, 0)

        If sProdInicial <> "" And sProdFinal <> "" Then

            'Pesquisa a tabela de preço os produtos que estão entre o produto inicial e o produto final
            lErro = Comando_Executar(alComando(1), "SELECT CodProduto, MAX(DataVigencia) FROM TabelasDePrecoItens, Produtos WHERE TabelasDePrecoItens.CodProduto = Produtos.Codigo AND Produtos.Ativo = 0 AND CodTabela = ? AND FilialEmpresa = ? AND CodProduto >= ? AND CodProduto <= ? AND DataVigencia <= ? GROUP BY CodProduto", sProduto, dtDataVigencia1, colTabelas.Item(iIndice), giFilialEmpresa, sProdInicial, sProdFinal, dtDataBase)
            If lErro <> AD_SQL_SUCESSO Then gError 92458

        ElseIf sProdInicial <> "" And sProdFinal = "" Then

            'Pesquisa a tabela de preço os produtos maiores ou iguais ao produto inicial
            lErro = Comando_Executar(alComando(1), "SELECT DISTINCT CodProduto, MAX(DataVigencia) FROM TabelasDePrecoItens, Produtos WHERE TabelasDePrecoItens.CodProduto = Produtos.Codigo AND Produtos.Ativo = 0 AND CodTabela = ? AND FilialEmpresa = ? AND CodProduto >= ? AND DataVigencia <= ? GROUP BY CodProduto", sProduto, dtDataVigencia1, colTabelas.Item(iIndice), giFilialEmpresa, sProdInicial, dtDataBase)
            If lErro <> AD_SQL_SUCESSO Then gError 92459

        ElseIf sProdInicial = "" And sProdFinal <> "" Then

            'Pesquisa a tabela de preço os produtos menores ou iguais ao produto final
            lErro = Comando_Executar(alComando(1), "SELECT DISTINCT CodProduto, MAX(DataVigencia) FROM TabelasDePrecoItens, Produtos WHERE TabelasDePrecoItens.CodProduto = Produtos.Codigo AND Produtos.Ativo = 0 AND CodTabela = ? AND FilialEmpresa = ? AND CodProduto <= ? AND DataVigencia <= ? GROUP BY CodProduto", sProduto, dtDataVigencia1, colTabelas.Item(iIndice), giFilialEmpresa, sProdFinal, dtDataBase)
            If lErro <> AD_SQL_SUCESSO Then gError 92460

        Else

            'Pesquisa todos os produtos da tabela de preço
            lErro = Comando_Executar(alComando(1), "SELECT DISTINCT CodProduto, MAX(DataVigencia) FROM TabelasDePrecoItens, Produtos WHERE TabelasDePrecoItens.CodProduto = Produtos.Codigo AND Produtos.Ativo = 0 AND CodTabela = ? AND FilialEmpresa = ? AND DataVigencia <= ? GROUP BY CodProduto", sProduto, dtDataVigencia1, colTabelas.Item(iIndice), giFilialEmpresa, dtDataBase)
            If lErro <> AD_SQL_SUCESSO Then gError 92461

        End If

        'Tenta ler os produtos da tabela de preco
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 92462

        Do While lErro <> AD_SQL_SEM_DADOS

            'Pesquisa o item da tabela de preco em questão na data de vigencia
            lErro = Comando_ExecutarPos(alComando(2), "SELECT Preco FROM TabelasDePrecoItens WHERE CodTabela = ? AND FilialEmpresa = ? AND CodProduto = ? AND DataVigencia = ?", 0, dPreco, colTabelas.Item(iIndice), giFilialEmpresa, sProduto, dtDataVigencia1)
            If lErro <> AD_SQL_SUCESSO Then gError 92463

            lErro = Comando_BuscarPrimeiro(alComando(2))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 92464

            If lErro = AD_SQL_SEM_DADOS Then gError 92465

            If dPreco <> 0 Then dPreco1 = dPreco + dPreco * dPercentual / 100

            'se já existe registro na data de vigencia ==> atualiza o registro
            If dtDataVigencia = dtDataVigencia1 Then

                'Atualiza o preço do produto na tabela
                lErro = Comando_ExecutarPos(alComando(3), "UPDATE TabelasDePrecoItens SET Preco = ?", alComando(2), dPreco1)
                If lErro <> AD_SQL_SUCESSO Then gError 92466

            Else
            
                'Insere o item na tabela de preço do produto em questão na data de vigência
                lErro = Comando_Executar(alComando(4), "INSERT INTO TabelasDePrecoItens (CodTabela, FilialEmpresa, CodProduto, DataVigencia, Preco) VALUES (?,?,?,?,?)", colTabelas.Item(iIndice), giFilialEmpresa, sProduto, dtDataVigencia, dPreco1)
                If lErro <> AD_SQL_SUCESSO Then gError 92467

            End If

            'Lê o próximo Produto na tabela
            lErro = Comando_BuscarProximo(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 92468

        Loop

    Next

    'Finaliza Transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 92469

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    TabelaPrecoItem_AtualizaPrecosPerc = SUCESSO

    Exit Function

Erro_TabelaPrecoItem_AtualizaPrecosPerc:

    TabelaPrecoItem_AtualizaPrecosPerc = gErr

    Select Case gErr

        Case 92456
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 92457
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 92458, 92459, 92460, 92461, 92462, 92468
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TABELASDEPRECOITENS1", gErr, colTabelas.Item(iIndice))

        Case 92463, 92464
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TABELASDEPRECOITENS3", gErr, giFilialEmpresa, colTabelas.Item(iIndice), sProduto, dtDataVigencia1)

        Case 92465
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TABELASDEPRECOITENS_NAO_CADASTRADO", gErr, giFilialEmpresa, colTabelas.Item(iIndice), sProduto, dtDataVigencia)

        Case 92466
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_TABELASDEPRECOITENS", gErr, giFilialEmpresa, colTabelas.Item(iIndice), sProduto, dtDataVigencia)

        Case 92467
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_TABELASDEPRECOITENS1", gErr, giFilialEmpresa, colTabelas.Item(iIndice), sProduto, dtDataVigencia)

        Case 92469
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149897)

    End Select

    Call Transacao_Rollback

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Sub Correcao_FATEST_Integridades(bApenasSaldosFAT As Boolean, bEST As Boolean, Optional dtDataInicial As Date, Optional dtDataFinal As Date, Optional sProdutoInicial As String, Optional sProdutoFinal As String)

Dim lErro As Long
Dim bPreenchido As Boolean
Dim dtNull As Date

On Error GoTo Erro_FATEST_Testa_Integridades

    'trecho de código que verifica se todos os filtros estão preenchidos ou nenhum deles
    'Alterado por Wagner
    If dtDataInicial <> 0 Then bPreenchido = True
    If dtDataFinal = 0 Then
        If bPreenchido = True Then gError 1000
    Else
        If bPreenchido = False Then gError 1000
        bPreenchido = True
    End If
    If Len(Trim(sProdutoInicial)) = 0 Then
        If bPreenchido = True Then gError 1000
    Else
        If bPreenchido = False Then gError 1000
        bPreenchido = True
    End If
    If Len(Trim(sProdutoFinal)) = 0 Then
        If bPreenchido = True Then gError 1000
    Else
        If bPreenchido = False Then gError 1000
    End If
    
    'Abre arquivo de Erro
    Open "CORRECAO_BD.txt" For Output As #1
    Print #1, "CORREÇÕES"
    Print #1, Now & ""
    Print #1, ""
    Print #1, "--------------------------------------------------------------------------"
    Print #1, ""

    If bApenasSaldosFAT = False Then
    
        'Pedido de Venda
        lErro = PedidoDeVenda_Testa_Integridades2(dtDataInicial, dtDataFinal, sProdutoInicial, sProdutoFinal)
        If lErro <> SUCESSO Then Error 999

        'Nota Fiscal
        lErro = NotaFiscal_Testa_Integridades()
        If lErro <> SUCESSO Then Error 999

        'SaldoDiaFat
        lErro = SaldoDiaFat_Testa_Integridades2(dtDataInicial, dtDataFinal, sProdutoInicial, sProdutoFinal)
        If lErro <> SUCESSO Then Error 999

        'SaldoMesFat
        lErro = SaldoMesFat_Testa_Integridades2(dtDataInicial, dtDataFinal, sProdutoInicial, sProdutoFinal)
        If lErro <> SUCESSO Then Error 999
        
        'SaldoMesFatFilCli - Inserido por Wagner
        lErro = SaldoMesFatFilCli_Testa_Integridades2(dtDataInicial, dtDataFinal, sProdutoInicial, sProdutoFinal)
        If lErro <> SUCESSO Then Error 999

    End If
    
    If bEST = True Then
    
        'SaldoDiaEst
        lErro = SldDiaEst_Testa_Integridades2(dtDataInicial, dtDataFinal, sProdutoInicial, sProdutoFinal)
        If lErro <> SUCESSO Then Error 999

        'SaldoMesEst
        lErro = SldMesEst_Testa_Integridades(dtDataInicial, dtDataFinal, sProdutoInicial, sProdutoFinal)
        If lErro <> SUCESSO Then Error 999

        'SaldoMesEst
        lErro = SldMesEst1_Testa_Integridades(dtDataInicial, dtDataFinal, sProdutoInicial, sProdutoFinal)
        If lErro <> SUCESSO Then Error 999

        'SaldoMesEst
        lErro = SldMesEst2_Testa_Integridades(dtDataInicial, dtDataFinal, sProdutoInicial, sProdutoFinal)
        If lErro <> SUCESSO Then Error 999

        'SaldoDiaEstAlm
        lErro = SldDiaEstAlm_Testa_Integridades2(dtDataInicial, dtDataFinal, sProdutoInicial, sProdutoFinal)
        If lErro <> SUCESSO Then Error 999

        'SaldoMesEstAlm
        lErro = SldMesEstAlm_Testa_Integridades(dtDataInicial, dtDataFinal, sProdutoInicial, sProdutoFinal)
        If lErro <> SUCESSO Then Error 999
    
        'Estoque Produto
        lErro = Estoque_Produto_Testa_Integridade(dtDataInicial, dtDataFinal, sProdutoInicial, sProdutoFinal)
        If lErro <> SUCESSO Then Error 999
    
    End If
    
    Close
    
    Exit Sub
     
Erro_FATEST_Testa_Integridades:

    Close

    Select Case Err
          
        Case 1000
            Call Rotina_Erro(vbOKOnly, "Todos os filtros deverão estar preenchidos ou nenhum deles.", Err)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149898)
     
    End Select
    
    Exit Sub
    
End Sub

Function PedidoDeVenda_Testa_Integridades2(Optional dtDataInicial As Date, Optional dtDataFinal As Date, Optional sProdutoInicial As String, Optional sProdutoFinal As String) As Long

Dim lErro As Long
Dim alComando(1 To 11) As Long
Dim tProdutoFilial As typeProdutoFilial
Dim dTotalQuantidade As Double, dTotalQuantCancelada As Double, dTotalQuantFaturada As Double
Dim iIndice As Integer
Dim dTotalQuantidadeItensNF As Double
Dim lPedido As Long
Dim iFilialPedido As Integer
Dim iFilialNF As Integer
Dim iFilialFaturamento As Integer
Dim dValorProdutos As Double
Dim dPrecoTotalItensPedido As Double
Dim dDescontoGlobalPedido As Double
Dim dValorTotal As Double
Dim dSomaParcelaPV As Double
Dim lTransacao As Long
Dim iClasseUM As Integer, sSiglaUMVenda As String, sSiglaUMMov As String, dFator As Double, dQuantidade As Double
Dim objPV As ClassPedidoDeVenda

Const STATUS_CANCELADO = 7

On Error GoTo Erro_PedidoDeVenda_Testa_Integridades2
    
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 999
    Next
    
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 999

    'Quantidade Pedida de Produto Filial
    tProdutoFilial.sProduto = String(STRING_PRODUTO, 0)

    'Verifica se algum filtro foi preenchido (basta verificar apenas um p/ saber se todos foram passados)
    If Len(Trim(dtDataInicial)) = 0 Then 'Modificado por Leo Inicio
    
        lErro = Comando_ExecutarPos(alComando(1), "SELECT FilialEmpresa, Produto, QuantPedida FROM ProdutosFilial ORDER BY Produto", 0, tProdutoFilial.iFilialEmpresa, tProdutoFilial.sProduto, tProdutoFilial.dQuantPedida)
        If lErro <> AD_SQL_SUCESSO Then Error 999
    
    Else
        'Select Incluindo filtros de produtos
        lErro = Comando_ExecutarPos(alComando(1), "SELECT FilialEmpresa, Produto, QuantPedida FROM ProdutosFilial WHERE Produto >= ? AND Produto <= ? ORDER BY Produto", 0, tProdutoFilial.iFilialEmpresa, tProdutoFilial.sProduto, tProdutoFilial.dQuantPedida, sProdutoInicial, sProdutoFinal)
        If lErro <> AD_SQL_SUCESSO Then Error 999
    
    End If 'Modificado por Leo Final
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999

    Do While lErro = SUCESSO

        sSiglaUMMov = String(STRING_UM_SIGLA, 0)
        sSiglaUMVenda = String(STRING_UM_SIGLA, 0)
        
        dQuantidade = 0
        
'        'Verifica se algum filtro foi preenchido (basta verificar apenas um p/ saber se todos foram passados)
'        If Len(Trim(dtDataInicial)) = 0 Then 'Modificado por Leo Inicio
'
'            lErro = Comando_Executar(alComando(2), "SELECT ItensPedidoDeVenda.UnidadeMed,Produtos.SiglaUMVenda, Produtos.ClasseUM, ItensPedidoDeVenda.Quantidade, ItensPedidoDeVenda.QuantCancelada, ItensPedidoDeVenda.QuantFaturada FROM ItensPedidoDeVenda, PedidosDeVenda, Produtos WHERE Produtos.Codigo = ItensPedidoDeVenda.Produto AND PedidosDeVenda.Codigo = ItensPedidoDeVenda.CodPedido AND PedidosDeVenda.FilialEmpresa = ItensPedidoDeVenda.FilialEmpresa AND PedidosDeVenda.FilialEmpresaFaturamento = ? AND ItensPedidoDeVenda.Produto = ?", sSiglaUMMov, sSiglaUMVenda, iClasseUM, dTotalQuantidade, dTotalQuantCancelada, dTotalQuantFaturada, tProdutoFilial.iFilialEmpresa, tProdutoFilial.sProduto)
'            If lErro <> AD_SQL_SUCESSO Then Error 999
'
'        Else
'
'            lErro = Comando_Executar(alComando(2), "SELECT ItensPedidoDeVenda.UnidadeMed, Produtos.SiglaUMVenda, Produtos.ClasseUM, ItensPedidoDeVenda.Quantidade, ItensPedidoDeVenda.QuantCancelada, ItensPedidoDeVenda.QuantFaturada FROM" & _
'            " ItensPedidoDeVenda, PedidosDeVenda, Produtos" & _
'            " WHERE Produtos.Codigo = ItensPedidoDeVenda.Produto AND PedidosDeVenda.Codigo = ItensPedidoDeVenda.CodPedido AND PedidosDeVenda.FilialEmpresa = ItensPedidoDeVenda.FilialEmpresa AND PedidosDeVenda.FilialEmpresaFaturamento = ? AND ItensPedidoDeVenda.Produto = ? AND PedidosDeVenda.DataEmissao >= ? AND PedidosDeVenda.DataEmissao <= ?", _
'            sSiglaUMMov, sSiglaUMVenda, iClasseUM, dTotalQuantidade, dTotalQuantCancelada, dTotalQuantFaturada, tProdutoFilial.iFilialEmpresa, tProdutoFilial.sProduto, dtDataInicial, dtDataFinal)
'
            
            lErro = Comando_Executar(alComando(2), "SELECT ItensPedidoDeVenda.UnidadeMed, Produtos.SiglaUMVenda, Produtos.ClasseUM, ItensPedidoDeVenda.Quantidade, ItensPedidoDeVenda.QuantCancelada, ItensPedidoDeVenda.QuantFaturada FROM" & _
            " ItensPedidoDeVenda, PedidosDeVenda, Produtos" & _
            " WHERE Produtos.Codigo = ItensPedidoDeVenda.Produto AND PedidosDeVenda.Codigo = ItensPedidoDeVenda.CodPedido AND PedidosDeVenda.FilialEmpresa = ItensPedidoDeVenda.FilialEmpresa AND PedidosDeVenda.FilialEmpresaFaturamento = ? AND ItensPedidoDeVenda.Produto = ? ", _
            sSiglaUMMov, sSiglaUMVenda, iClasseUM, dTotalQuantidade, dTotalQuantCancelada, dTotalQuantFaturada, tProdutoFilial.iFilialEmpresa, tProdutoFilial.sProduto)
            
            
            If lErro <> AD_SQL_SUCESSO Then Error 999
'
'        End If 'Modificado por Leo Final
        
        lErro = Comando_BuscarPrimeiro(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
        
        Do While lErro = AD_SQL_SUCESSO
            
            lErro = CF("UM_Conversao_Trans", iClasseUM, sSiglaUMMov, sSiglaUMVenda, dFator)
            If lErro <> SUCESSO Then Error 999
        
            dQuantidade = dQuantidade + ((dTotalQuantidade - dTotalQuantCancelada - dTotalQuantFaturada) * dFator)
            
            lErro = Comando_BuscarProximo(alComando(2))
            If lErro <> SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
            
        Loop
        
        'Teste a Ser Feito
        If Abs(tProdutoFilial.dQuantPedida - (dQuantidade)) >= 0.01 Then
                
            Print #1, "PedidoDeVenda x ProdutoFilial"
            Print #1, "Produto = " & tProdutoFilial.sProduto & " FilialEmpresa = " & tProdutoFilial.iFilialEmpresa
            Print #1, "Quantidade Produto Filial = " & tProdutoFilial.dQuantPedida & " Quantidade ItensPedido = " & dQuantidade
            Print #1, "--------------------------------------------------------------------------"
            
            lErro = Comando_ExecutarPos(alComando(7), "UPDATE ProdutosFilial SET QuantPedida = ?", alComando(1), dQuantidade)
            If lErro <> AD_SQL_SUCESSO Then Error 999
                    
        End If
        
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
        
    Loop
        
    'Verificar Quantidades, Valores, FilialFaturamento para Notas que tenham vinculos com Pedidos
    
    'Verifica se algum filtro foi preenchido (basta verificar apenas um p/ saber se todos foram passados)
    If Len(Trim(dtDataInicial)) = 0 Then 'Modificado por Leo Inicio
    
        'Quantidade NotaFiscal = Quantidade Faturada em Pedidos
        lErro = Comando_Executar(alComando(3), "SELECT SUM(ItensNFiscal.Quantidade), NFiscal.NumPedidoVenda, NFiscal.FilialPedido FROM NFiscal,ItensNFiscal WHERE NFiscal.NumPedidoVenda <> 0 AND NFiscal.NumIntDoc = ItensNFiscal.NumIntNF AND NFiscal.Status <> ?  GROUP BY NFiscal.NumPedidoVenda, NFiscal.FilialPedido ORDER BY NFiscal.NumPedidoVenda", dTotalQuantidadeItensNF, lPedido, iFilialPedido, STATUS_CANCELADO)
        If lErro <> AD_SQL_SUCESSO Then Error 999

    Else
    
        'Quantidade NotaFiscal = Quantidade Faturada em Pedidos
        lErro = Comando_Executar(alComando(3), "SELECT SUM(ItensNFiscal.Quantidade), NFiscal.NumPedidoVenda, NFiscal.FilialPedido FROM NFiscal,ItensNFiscal WHERE NFiscal.NumPedidoVenda <> 0 AND NFiscal.NumIntDoc = ItensNFiscal.NumIntNF AND NFiscal.Status <> ? AND NFiscal.DataEmissao >= ? AND NFiscal.DataEmissao <= ? GROUP BY NFiscal.NumPedidoVenda, NFiscal.FilialPedido ORDER BY NFiscal.NumPedidoVenda", _
        dTotalQuantidadeItensNF, lPedido, iFilialPedido, STATUS_CANCELADO, dtDataInicial, dtDataFinal)
        If lErro <> AD_SQL_SUCESSO Then Error 999
    
    End If 'Modificado por Leo Fim
    
    lErro = Comando_BuscarPrimeiro(alComando(3))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999

    Do While lErro = SUCESSO

        lErro = Comando_Executar(alComando(4), "SELECT SUM(ItensPedidoDeVendaTodos.QuantFaturada) FROM ItensPedidoDeVendaTodos, PedVenTodos WHERE PedVenTodos.Codigo = ItensPedidoDeVendaTodos.CodPedido AND PedVenTodos.FilialEmpresa = ItensPedidoDeVendaTodos.FilialEmpresa AND PedVenTodos.FilialEmpresa = ? AND PedVenTodos.Codigo = ?", _
        dTotalQuantFaturada, iFilialPedido, lPedido)
        If lErro <> AD_SQL_SUCESSO Then Error 999

        lErro = Comando_BuscarPrimeiro(alComando(4))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999

        If lErro = AD_SQL_SUCESSO Then
            'Teste a Ser Feito
            If Abs(dTotalQuantFaturada - dTotalQuantidadeItensNF) >= 0.01 Then
    
                Print #1, "Pedido X NotaFiscal - Quantidade"
                Print #1, "Pedido = " & lPedido & " FilialEmpresa = " & iFilialPedido
                Print #1, "Quantidade itens NF  = " & dTotalQuantidadeItensNF & " Quantidade Faturada PV = " & dTotalQuantFaturada
                Print #1, "--------------------------------------------------------------------------"
    
            End If
        Else
        
            Print #1, "Pedido X NotaFiscal - Quantidade - PV nao encontrado"
            Print #1, "Pedido = " & lPedido & " FilialEmpresa = " & iFilialPedido
            Print #1, "Quantidade itens NF  = " & dTotalQuantidadeItensNF
            Print #1, "--------------------------------------------------------------------------"
        
        End If

        lErro = Comando_BuscarProximo(alComando(3))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999

    Loop

    'Verifica se algum filtro foi preenchido (basta verificar apenas um p/ saber se todos foram passados)
    If Len(Trim(dtDataInicial)) = 0 Then 'Modificado por Leo Inicio
            
        'Filial Faturamento dos Pedidos = FilialEmpresa das Notas
        lErro = Comando_Executar(alComando(5), "SELECT NFiscal.FilialEmpresa, NFiscal.NumPedidoVenda, NFiscal.FilialPedido FROM NFiscal WHERE NFiscal.NumPedidoVenda <> 0 AND NFiscal.Status <> ? AND ORDER BY NFiscal.NumPedidoVenda", _
        iFilialNF, lPedido, iFilialPedido, STATUS_CANCELADO)
        If lErro <> AD_SQL_SUCESSO Then Error 999
        
    Else
    
        'Filial Faturamento dos Pedidos = FilialEmpresa das Notas
        lErro = Comando_Executar(alComando(5), "SELECT NFiscal.FilialEmpresa, NFiscal.NumPedidoVenda, NFiscal.FilialPedido FROM NFiscal WHERE NFiscal.NumPedidoVenda <> 0 AND NFiscal.Status <> ? AND NFiscal.DataEmissao >= ? AND NFiscal.DataEmissao <= ? ORDER BY NFiscal.NumPedidoVenda", _
        iFilialNF, lPedido, iFilialPedido, STATUS_CANCELADO, dtDataInicial, dtDataFinal)
        If lErro <> AD_SQL_SUCESSO Then Error 999

    End If 'Modificado por Leo Fim
    
    lErro = Comando_BuscarPrimeiro(alComando(5))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999

    Do While lErro = SUCESSO

        lErro = Comando_Executar(alComando(6), "SELECT PedVenTodos.FilialEmpresaFaturamento FROM PedVenTodos WHERE PedVenTodos.FilialEmpresa = ? AND PedVenTodos.Codigo = ?", iFilialFaturamento, iFilialPedido, lPedido)
        If lErro <> AD_SQL_SUCESSO Then Error 999

        lErro = Comando_BuscarPrimeiro(alComando(6))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999

        If lErro = AD_SQL_SUCESSO Then
        
            'Teste a Ser Feito
            If iFilialFaturamento <> iFilialNF Then
    
                Print #1, "Pedido X NotaFiscal - FilialFaturamento"
                Print #1, "Pedido = " & lPedido & " FilialEmpresa = " & iFilialPedido
                Print #1, "FilialEmpresa NF   = " & iFilialNF & " Filial Faturamento Pedido = "; iFilialFaturamento
                Print #1, "--------------------------------------------------------------------------"
    
            End If

        Else
        
            Print #1, "Pedido X NotaFiscal - FilialFaturamento - PV nao encontrado"
            Print #1, "Pedido = " & lPedido & " FilialEmpresa = " & iFilialPedido
            Print #1, "FilialEmpresa NF   = " & iFilialNF
            Print #1, "--------------------------------------------------------------------------"
        
        End If

        lErro = Comando_BuscarProximo(alComando(5))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999

    Loop

    'Verifica se algum filtro foi preenchido (basta verificar apenas um p/ saber se todos foram passados)
    If Len(Trim(dtDataInicial)) = 0 Then 'Modificado por Leo Inicio
    
        'Verificar se Valor de Produtos de PedidoDeVenda é igual a Soma dos Valores dos Item - Desconto Global
        lErro = Comando_Executar(alComando(8), "SELECT PedVenTodos.ValorProdutos, PedVenTodos.Codigo, PedVenTodos.FilialEmpresa, PedVenTodos.ValorDesconto FROM PedVenTodos ORDER BY PedVenTodos.Codigo", dValorProdutos, lPedido, iFilialPedido, dDescontoGlobalPedido)
        If lErro <> AD_SQL_SUCESSO Then Error 999
    
    Else
    
        'Verificar se Valor de Produtos de PedidoDeVenda é igual a Soma dos Valores dos Item - Desconto Global
        lErro = Comando_Executar(alComando(8), "SELECT PedVenTodos.ValorProdutos, PedVenTodos.Codigo, PedVenTodos.FilialEmpresa, PedVenTodos.ValorDesconto FROM PedVenTodos WHERE PedVenTodos.DataEmissao >= ? AND PedVenTodos.DataEmissao <= ? ORDER BY PedVenTodos.Codigo", dValorProdutos, lPedido, iFilialPedido, dDescontoGlobalPedido, dtDataInicial, dtDataFinal)
        If lErro <> AD_SQL_SUCESSO Then Error 999
    
    End If 'Modificado por Leo Fim
    
    lErro = Comando_BuscarPrimeiro(alComando(8))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999

    Do While lErro = SUCESSO

        lErro = Comando_Executar(alComando(9), "SELECT SUM(ItensPedidoDeVendaTodos.PrecoTotal) FROM ItensPedidoDeVendaTodos WHERE ItensPedidoDeVendaTodos.FilialEmpresa = ? AND  ItensPedidoDeVendaTodos.CodPedido = ?", dPrecoTotalItensPedido, iFilialPedido, lPedido)
        If lErro <> AD_SQL_SUCESSO Then Error 999

        lErro = Comando_BuscarPrimeiro(alComando(9))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999

        'Teste a Ser Feito
        If Abs(dPrecoTotalItensPedido - (dValorProdutos + dDescontoGlobalPedido)) >= 0.01 Then
            
            Print #1, "Pedido -> Valor Produtos + Desconto Global = Soma dos Valores dos Itens Pedido"
            Print #1, "Pedido = " & lPedido & " FilialEmpresa = " & iFilialPedido
            Print #1, "Valor itens PV  = " & dPrecoTotalItensPedido & " Valor Produtos - DescontoGlobal = " & (dValorProdutos - dDescontoGlobalPedido)
            Print #1, "--------------------------------------------------------------------------"
            
            Set objPV = New ClassPedidoDeVenda
            
            objPV.lCodigo = lPedido
            objPV.iFilialEmpresa = iFilialPedido
            objPV.dValorProdutos = dPrecoTotalItensPedido - dDescontoGlobalPedido
            
            lErro = PedidoVenda_Atualiza(objPV)
            If lErro <> SUCESSO Then Error 999
        
        End If
        
        lErro = Comando_BuscarProximo(alComando(8))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
        
    Loop

    'Verifica se algum filtro foi preenchido (basta verificar apenas um p/ saber se todos foram passados)
    If Len(Trim(dtDataInicial)) = 0 Then 'Modificado por Leo Inicio
        
        'Verifica se a Valor dos Pedidos é igual a soma das Parcelas Pedido de Venda
        lErro = Comando_Executar(alComando(10), "SELECT PedVenTodos.ValorTotal, PedVenTodos.Codigo, PedVenTodos.FilialEmpresa FROM PedVenTodos ORDER BY PedVenTodos.Codigo", dValorTotal, lPedido, iFilialPedido)
        If lErro <> AD_SQL_SUCESSO Then Error 999
            
    Else
    
        'Verifica se a Valor dos Pedidos é igual a soma das Parcelas Pedido de Venda
        lErro = Comando_Executar(alComando(10), "SELECT PedVenTodos.ValorTotal, PedVenTodos.Codigo, PedVenTodos.FilialEmpresa FROM PedVenTodos WHERE PedVenTodos.DataEmissao >= ? AND PedVenTodos.DataEmissao <= ? ORDER BY PedVenTodos.Codigo", dValorTotal, lPedido, iFilialPedido, dtDataInicial, dtDataFinal)
        If lErro <> AD_SQL_SUCESSO Then Error 999
    
    End If 'Modificado por Leo Fim
            
    lErro = Comando_BuscarPrimeiro(alComando(10))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
        
    Do While lErro = SUCESSO
        
        lErro = Comando_Executar(alComando(11), "SELECT SUM(Valor) FROM ParcelasPedVendaTodas WHERE FilialEmpresa = ? AND PedidodeVenda = ?", dSomaParcelaPV, iFilialPedido, lPedido)
        If lErro <> AD_SQL_SUCESSO Then Error 999
        
        lErro = Comando_BuscarPrimeiro(alComando(11))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
        
        'Teste a Ser Feito
        If Abs(dSomaParcelaPV - (dValorTotal)) >= 0.01 Then
            
            Print #1, "Pedido X Parcelas PV"
            Print #1, "Pedido = " & lPedido & " FilialEmpresa = " & iFilialPedido
            Print #1, "Valor Total PV  = " & dValorTotal & " Valor das Parcelas = " & dSomaParcelaPV
            Print #1, "--------------------------------------------------------------------------"
        
        End If
        
        lErro = Comando_BuscarProximo(alComando(10))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
        
    Loop
    
    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then Error 999

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    PedidoDeVenda_Testa_Integridades2 = SUCESSO
    
    Exit Function
         
Erro_PedidoDeVenda_Testa_Integridades2:

    PedidoDeVenda_Testa_Integridades2 = Err
    
    Select Case Err
          
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149899)
     
    End Select
    
    Call Transacao_Rollback
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
End Function

Function PedidoVenda_Atualiza(objPV As ClassPedidoDeVenda) As Long

Dim lErro As Long
Dim alComando(0 To 2) As Long
Dim iIndice As Integer
Dim lCodigo As Long

On Error GoTo Erro_PedidoVenda_Atualiza

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 999
    Next
    
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Codigo FROM PedidosDeVenda WHERE Codigo = ? AND FilialEmpresa = ?", 0, lCodigo, objPV.lCodigo, objPV.iFilialEmpresa)
    If lErro <> SUCESSO Then Error 999
    
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    
    If lErro = AD_SQL_SUCESSO Then
        lErro = Comando_ExecutarPos(alComando(1), "UPDATE PedidosDeVenda SET ValorProdutos = ?", alComando(0), objPV.dValorProdutos)
        If lErro <> SUCESSO Then Error 999
    Else
        lErro = Comando_ExecutarPos(alComando(0), "SELECT Codigo FROM PedidosDeVendaBaixados WHERE Codigo = ? AND FilialEmpresa = ?", 0, lCodigo, objPV.lCodigo, objPV.iFilialEmpresa)
        If lErro <> SUCESSO Then Error 999
        
        lErro = Comando_BuscarPrimeiro(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
        If lErro = AD_SQL_SUCESSO Then
        
            lErro = Comando_ExecutarPos(alComando(1), "UPDATE PedidosDeVendaBaixados SET ValorProdutos = ?", alComando(0), objPV.dValorProdutos)
            If lErro <> SUCESSO Then Error 999
        End If
    End If
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

Erro_PedidoVenda_Atualiza:

    PedidoVenda_Atualiza = Err
    
    Select Case Err
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149900)
            
    
    End Select
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function
    
End Function

Function SaldoDiaFat_Testa_Integridades2(Optional dtDataInicial As Date, Optional dtDataFinal As Date, Optional sProdutoInicial As String, Optional sProdutoFinal As String) As Long

Dim lErro As Long
Dim alComando(1 To 9) As Long
Dim dValorFaturado As Double, dTotalDescontos As Double, dQuantPedida As Double, dQuantFaturada  As Double, dValorDevolvido  As Double, dQuantDevolvida As Double
Dim iFilialEmpresa As Integer
Dim dtData As Date
Dim sProduto As String
Dim dItensQuantidade As Double, dItensValorDesconto As Double, dItensPrecoUnitario As Double
Dim dItensTotalQuantidade As Double, dItensTotalValor As Double
Dim dItensTotalQuantidadeDev As Double, dItensTotalValorDev As Double
Dim iIndice As Integer
Dim dSomaQuantidadePV As Double, dSomaQuantCanceladaPV As Double
Dim dValorTotalDescontos As Double
Dim iClasseUM As Integer, sSiglaUMVenda As String, sSiglaUMMov As String, dFator As Double, dQuantidade As Double
Dim lTransacao As Long
Dim iCodTipoDocInfo As Integer

On Error GoTo Erro_SaldoDiaFat_Testa_Integridades2
    
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 1999
    
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 2999
    Next
    
    sProduto = String(STRING_PRODUTO, 0)
    
    'Verifica se algum filtro foi preenchido (basta verificar apenas um p/ saber se todos foram passados)
    If Len(Trim(dtDataInicial)) = 0 Then 'Modificado por Leo Inicio
 
        lErro = Comando_ExecutarPos(alComando(1), "SELECT ValorFaturado, TotalDescontos, QuantPedida, QuantFaturada, ValorDevolvido, QuantDevolvida, FilialEmpresa, Data, Produto FROM SldDiaFat ORDER BY Data, Produto", 0, dValorFaturado, dTotalDescontos, dQuantPedida, dQuantFaturada, dValorDevolvido, dQuantDevolvida, iFilialEmpresa, dtData, sProduto)
        If lErro <> AD_SQL_SUCESSO Then Error 3999
            
    Else
            
        lErro = Comando_ExecutarPos(alComando(1), "SELECT ValorFaturado, TotalDescontos, QuantPedida, QuantFaturada, ValorDevolvido, QuantDevolvida, FilialEmpresa, Data, Produto FROM SldDiaFat WHERE Data >= ? AND Data <= ? AND Produto >= ? AND Produto <= ? ORDER BY Data, Produto", _
        0, dValorFaturado, dTotalDescontos, dQuantPedida, dQuantFaturada, dValorDevolvido, dQuantDevolvida, iFilialEmpresa, dtData, sProduto, dtDataInicial, dtDataFinal, sProdutoInicial, sProdutoFinal)
        If lErro <> AD_SQL_SUCESSO Then Error 3999
            
    End If 'Modificado por Leo Final
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 4999
    
    Do While lErro = SUCESSO
        
        dItensTotalQuantidade = 0
        dItensTotalValor = 0
        
        sSiglaUMVenda = String(STRING_UM_SIGLA, 0)
        sSiglaUMMov = String(STRING_UM_SIGLA, 0)
        
        'Quantidade e Valor Faturados
        lErro = Comando_Executar(alComando(2), "SELECT ItensNFiscal.Quantidade, ItensNFiscal.ValorDesconto, ItensNFiscal.PrecoUnitario, ItensNFiscal.UnidadeMed, Produtos.SiglaUMVenda, Produtos.ClasseUM, TiposDocInfo.Codigo FROM NFiscal, ItensNFiscal, TiposDocInfo, Produtos WHERE ItensNfiscal.Produto = Produtos.Codigo AND NFiscal.FilialEmpresa = ? AND NFiscal.DataEmissao = ? AND ItensNFiscal.Produto = ? AND NFiscal.Status <> 7 AND NFiscal.NumIntDoc = ItensNFiscal.NumIntNF AND NFiscal.TipoNFiscal = TiposDocInfo.Codigo AND TiposDocInfo.Faturamento = 1 AND (TiposDocInfo.Complementar = 0 OR TiposDocInfo.Codigo IN (?,?))", dItensQuantidade, dItensValorDesconto, dItensPrecoUnitario, sSiglaUMMov, sSiglaUMVenda, iClasseUM, iCodTipoDocInfo, iFilialEmpresa, dtData, sProduto, DOCINFO_NFISCP, DOCINFO_NFISFCP)
        If lErro <> AD_SQL_SUCESSO Then Error 5999
                
        lErro = Comando_BuscarPrimeiro(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 6999
        
        Do While lErro = SUCESSO
                
            lErro = CF("UM_Conversao_Trans", iClasseUM, sSiglaUMMov, sSiglaUMVenda, dFator)
            If lErro <> SUCESSO Then Error 7999
                        
            If iCodTipoDocInfo <> DOCINFO_NFISCP And iCodTipoDocInfo <> DOCINFO_NFISFCP Then
                dItensTotalQuantidade = dItensTotalQuantidade + (dItensQuantidade * dFator)
            End If
            
            dItensTotalValor = dItensTotalValor + ((dItensQuantidade * dItensPrecoUnitario) - dItensValorDesconto)
            
            lErro = Comando_BuscarProximo(alComando(2))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 9998
        
        Loop
        
        'Teste a Ser Feito
        If Abs(dItensTotalQuantidade - dQuantFaturada) >= 0.01 Or Abs(dItensTotalValor - dValorFaturado) >= 0.01 Then
            
            Print #1, "SaldoDiaFat - Valor Faturado e Quantidade Faturada"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade Faturada SaldoDiaFat= " & dQuantFaturada & " Quantidade Faturada ItensNF = " & dItensTotalQuantidade
            'Print #1, "Valor Faturado SaldoDiaFat= " & dValorFaturado & " Valor Faturada ItensNF - ValorDescontos = " & (dItensTotalValor - dItensValorDesconto)
            'Alterado por Wagner
            'O Desconto já é abatido no loop acima e dItensValorDesconto retorna o valor do desconto da último item não o acumulado
            Print #1, "Valor Faturado SaldoDiaFat= " & dValorFaturado & " Valor Faturada ItensNF - ValorDescontos = " & (dItensTotalValor)
            Print #1, "--------------------------------------------------------------------------"
        
        End If
        
        sSiglaUMMov = String(STRING_UM_SIGLA, 0)
        sSiglaUMVenda = String(STRING_UM_SIGLA, 0)
        
        dQuantidade = 0
       'Leo, já utiliza o produto filtrado no 1º select
        'Quantidade Pedida
        lErro = Comando_Executar(alComando(3), "SELECT ItensPedidoDeVendaTodos.Quantidade, ItensPedidoDeVendaTodos.QuantCancelada, ItensPedidoDeVendaTodos.UnidadeMed, Produtos.SiglaUMVenda, Produtos.ClasseUM FROM ItensPedidoDeVendaTodos, PedVenTodos, Produtos WHERE  ItensPedidoDeVendaTodos.Produto = Produtos.Codigo AND ItensPedidoDeVendaTodos.CodPedido = PedVenTodos.Codigo AND ItensPedidoDeVendaTodos.FilialEmpresa = PedVenTodos.FilialEmpresa AND PedVenTodos.FilialEmpresa = ? AND PedVenTodos.DataEmissao = ? AND ItensPedidoDeVendaTodos.Produto = ?", dSomaQuantidadePV, dSomaQuantCanceladaPV, sSiglaUMMov, sSiglaUMVenda, iClasseUM, iFilialEmpresa, dtData, sProduto)
        If lErro <> AD_SQL_SUCESSO Then Error 9999
        
        lErro = Comando_BuscarPrimeiro(alComando(3))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 9910

        Do While lErro = AD_SQL_SUCESSO

            lErro = CF("UM_Conversao", iClasseUM, sSiglaUMMov, sSiglaUMVenda, dFator)
            If lErro <> SUCESSO Then Error 9911

            dQuantidade = dQuantidade + ((dSomaQuantidadePV - dSomaQuantCanceladaPV) * dFator)

            lErro = Comando_BuscarProximo(alComando(3))
            If lErro <> SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 9912

        Loop

        'Teste a Ser Feito
        If Abs(dQuantPedida - dQuantidade) >= 0.01 Then

            Print #1, "SaldoDiaFat - Quantidade Pedida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade Pedida SaldoDiaFat= " & dQuantPedida & " Quantidade ItensPV - QuantCancelada ItensPV = " & (dQuantidade)
            Print #1, "--------------------------------------------------------------------------"

        End If

        sSiglaUMMov = String(STRING_UM_SIGLA, 0)
        sSiglaUMVenda = String(STRING_UM_SIGLA, 0)
        
        dItensTotalQuantidadeDev = 0
        dItensTotalValorDev = 0
        'Leo, já utiliza o produto filtrado no 1º select
        'QuantidadeDevolvida e Valor Devolvido
        lErro = Comando_Executar(alComando(4), "SELECT ItensNFiscal.Quantidade, ItensNFiscal.ValorDesconto, ItensNFiscal.PrecoUnitario, ItensNFiscal.UnidadeMed, Produtos.SiglaUMVenda, Produtos.ClasseUM FROM NFiscal, ItensNFiscal, Produtos, TiposDocInfo WHERE NFiscal.Status <> 7 AND NFiscal.NumIntDoc = ItensNFiscal.NumIntNF AND NFiscal.FilialEmpresa = ? AND NFiscal.DataEmissao = ? AND ItensNFiscal.Produto = ? AND ItensNFiscal.Produto = Produtos.Codigo AND NFiscal.TipoNFiscal = TiposDocInfo.Codigo AND TiposDocInfo.Faturamento = 2", dItensQuantidade, dItensValorDesconto, dItensPrecoUnitario, sSiglaUMMov, sSiglaUMVenda, iClasseUM, iFilialEmpresa, dtData, sProduto)
        If lErro <> AD_SQL_SUCESSO Then Error 9913

        lErro = Comando_BuscarPrimeiro(alComando(4))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 9914

        Do While lErro = SUCESSO

            lErro = CF("UM_Conversao_Trans", iClasseUM, sSiglaUMMov, sSiglaUMVenda, dFator)
            If lErro <> SUCESSO Then Error 9915
                        
            dItensTotalQuantidadeDev = dItensTotalQuantidadeDev + (dItensQuantidade * dFator)
            dItensTotalValorDev = dItensTotalValorDev + ((dItensQuantidade * dItensPrecoUnitario) - dItensValorDesconto)

            lErro = Comando_BuscarProximo(alComando(4))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 9916
        
        Loop
        
        'Teste a Ser Feito
        If Abs(dItensTotalQuantidadeDev - dQuantDevolvida) >= 0.01 Or Abs(dItensTotalValorDev - dValorDevolvido) >= 0.01 Then
            
            Print #1, "SaldoDiaFat - Valor Devolvido e Quantidade Devolvida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade Devolvida SaldoDiaFat= " & dQuantDevolvida & " Quantidade Devolvida ItensNF = " & dItensTotalQuantidadeDev
            Print #1, "Valor Devolvido SaldoDiaFat= " & dValorDevolvido & " Valor Devolvido ItensNF - ValorDescontos = " & dItensTotalValorDev
            Print #1, "--------------------------------------------------------------------------"
        
        End If
        'Leo, já utiliza o produto filtrado no 1º select
        'Total de Descontos
        lErro = Comando_Executar(alComando(5), "SELECT SUM(ItensNFiscal.ValorDesconto) FROM NFiscal, ItensNFiscal, TiposDocInfo WHERE NFiscal.Status <> 7 AND NFiscal.FilialEmpresa = ? AND NFiscal.DataEmissao = ? AND ItensNFiscal.Produto = ? AND NFiscal.NumIntDoc = ItensNFiscal.NumIntNF AND NFiscal.TipoNFiscal = TiposDocInfo.Codigo AND TiposDocInfo.Faturamento = 1 AND (TiposDocInfo.Complementar = 0 OR TiposDocInfo.Codigo IN (?,?))", dValorTotalDescontos, iFilialEmpresa, dtData, sProduto, DOCINFO_NFISCP, DOCINFO_NFISFCP)
        If lErro <> AD_SQL_SUCESSO Then Error 9917
        
        lErro = Comando_BuscarPrimeiro(alComando(5))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 9918

        'Teste a Ser Feito
        If Abs(dValorTotalDescontos - dTotalDescontos) >= 0.01 Then
            
            Print #1, "SaldoDiaFat - Valor Total Descontos"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor descontos SaldoDiaFat = " & dTotalDescontos & " Valor dos descontos dos itens = " & dValorTotalDescontos
            Print #1, "--------------------------------------------------------------------------"
        
        End If
        
        'Teste a Ser Feito
        If Abs(dQuantPedida - dQuantidade) >= 0.01 Or Abs(dItensTotalQuantidade - dQuantFaturada) >= 0.01 Or Abs(dItensTotalValor - dValorFaturado) >= 0.01 Or Abs(dValorTotalDescontos - dTotalDescontos) >= 0.01 Or Abs(dItensTotalQuantidadeDev - dQuantDevolvida) >= 0.01 Or Abs(dItensTotalValorDev - dValorDevolvido) >= 0.01 Then
            
            lErro = Comando_ExecutarPos(alComando(9), "UPDATE SldDiaFat SET ValorFaturado=?, TotalDescontos=?, QuantPedida=?, QuantFaturada=?, ValorDevolvido=?, QuantDevolvida=?", alComando(1), _
                dItensTotalValor, dValorTotalDescontos, dQuantidade, dItensTotalQuantidade, dItensTotalValorDev, dItensTotalQuantidadeDev)
            If lErro <> SUCESSO Then Error 9919
        
        End If
        
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 9920
        
    Loop
        
    
    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then Error 9921
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    SaldoDiaFat_Testa_Integridades2 = SUCESSO
    
    Exit Function
         
Erro_SaldoDiaFat_Testa_Integridades2:

    SaldoDiaFat_Testa_Integridades2 = Err
    
    Select Case Err
          
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149901)
     
    End Select
    
    
    Call Transacao_Rollback
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function
    
End Function

Function SaldoMesFat_Testa_Integridades2(Optional dtDataInicial2 As Date, Optional dtDataFinal2 As Date, Optional sProdutoInicial As String, Optional sProdutoFinal As String) As Long

Dim lErro As Long
Dim alComando(1 To 6) As Long
Dim iIndice As Integer
Dim sSQL As String
Dim adValorFaturado(1 To 12) As Double
Dim adValorDevolvido(1 To 12) As Double
Dim adTotalDescontos(1 To 12) As Double
Dim adQuantPedida(1 To 12) As Double
Dim adQuantFaturada(1 To 12) As Double
Dim adQuantDevolvida(1 To 12) As Double
Dim iAno As Integer
Dim iFilialEmpresa As Integer
Dim sProduto As String
Dim dtDataInicial As Date
Dim dtDataFinal As Date
Dim iMes As Integer
Dim dValorFaturado As Double, dTotalDescontos As Double, dQuantPedida As Double, dQuantFaturada  As Double, dValorDevolvido  As Double, dQuantDevolvida As Double
Dim dItensQuantidade As Double, dItensValorDesconto As Double, dItensPrecoUnitario As Double
Dim dItensTotalQuantidade As Double, dItensTotalValor As Double
Dim dItensTotalQuantidadeDev As Double, dItensTotalValorDev As Double
Dim dSomaQuantidadePV As Double, dSomaQuantCanceladaPV As Double
Dim dValorTotalDescontos As Double
Dim alComandoUPDATE(0 To 2) As Long
Dim lTransacao As Long
Dim iClasseUM As Integer, sSiglaUMVenda As String, sSiglUMEstoque As String, sSiglaUMMov As String, dFator As Double, dQuantidade As Double
Dim iCodTipoDocInfo As Integer
Dim iMesAux, iAnoAux As Integer
Dim bPassou As Boolean

On Error GoTo Erro_SaldoMesFat_Testa_Integridades2
    
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 999
    
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 999
    Next
    
    For iIndice = LBound(alComandoUPDATE) To UBound(alComandoUPDATE)
        alComandoUPDATE(iIndice) = Comando_Abrir()
        If alComandoUPDATE(iIndice) = 0 Then Error 999
    Next
    
    sProduto = String(STRING_PRODUTO, 0)
    
    sSQL = "SELECT FilialEmpresa, Ano, Produto"
    
    For iIndice = 1 To 12
        sSQL = sSQL & ", ValorFaturado" & iIndice
        sSQL = sSQL & ", ValorDevolvido" & iIndice
        sSQL = sSQL & ", TotalDescontos" & iIndice
        sSQL = sSQL & ", QuantPedida" & iIndice
        sSQL = sSQL & ", QuantFaturada" & iIndice
        sSQL = sSQL & ", QuantDevolvida" & iIndice
    Next
    
    'Verifica se algum filtro foi preenchido (basta verificar apenas um p/ saber se todos foram passados)
    'Alterado por Wagner
    If dtDataInicial2 = 0 Then 'Modificado por Leo Inicio
    
        sSQL = sSQL & " FROM SldMesFat ORDER BY Produto"
    
        lErro = Comando_ExecutarPos(alComando(1), sSQL, 0, iFilialEmpresa, iAno, sProduto, adValorFaturado(1), adValorDevolvido(1), adTotalDescontos(1), adQuantPedida(1), adQuantFaturada(1), adQuantDevolvida(1), adValorFaturado(2), adValorDevolvido(2), adTotalDescontos(2), adQuantPedida(2), adQuantFaturada(2), adQuantDevolvida(2), adValorFaturado(3), adValorDevolvido(3), adTotalDescontos(3), adQuantPedida(3), adQuantFaturada(3), adQuantDevolvida(3), adValorFaturado(4), adValorDevolvido(4), adTotalDescontos(4), adQuantPedida(4), adQuantFaturada(4), adQuantDevolvida(4), adValorFaturado(5), adValorDevolvido(5), adTotalDescontos(5), adQuantPedida(5), adQuantFaturada(5), adQuantDevolvida(5), adValorFaturado(6), adValorDevolvido(6), adTotalDescontos(6), adQuantPedida(6), adQuantFaturada(6), adQuantDevolvida(6), adValorFaturado(7), adValorDevolvido(7), adTotalDescontos(7), adQuantPedida(7), adQuantFaturada(7), adQuantDevolvida(7), _
        adValorFaturado(8), adValorDevolvido(8), adTotalDescontos(8), adQuantPedida(8), adQuantFaturada(8), adQuantDevolvida(8), adValorFaturado(9), adValorDevolvido(9), adTotalDescontos(9), adQuantPedida(9), adQuantFaturada(9), adQuantDevolvida(9), adValorFaturado(10), adValorDevolvido(10), adTotalDescontos(10), adQuantPedida(10), adQuantFaturada(10), adQuantDevolvida(10), adValorFaturado(11), adValorDevolvido(11), adTotalDescontos(11), adQuantPedida(11), adQuantFaturada(11), adQuantDevolvida(11), adValorFaturado(12), adValorDevolvido(12), adTotalDescontos(12), adQuantPedida(12), adQuantFaturada(12), adQuantDevolvida(12))
        If lErro <> AD_SQL_SUCESSO Then Error 999
    
    Else
               
        sSQL = sSQL & " FROM SldMesFat WHERE Produto >= ? AND Produto <= ? ORDER BY Produto"
    
        lErro = Comando_ExecutarPos(alComando(1), sSQL, 0, iFilialEmpresa, iAno, sProduto, adValorFaturado(1), adValorDevolvido(1), adTotalDescontos(1), adQuantPedida(1), adQuantFaturada(1), adQuantDevolvida(1), adValorFaturado(2), adValorDevolvido(2), adTotalDescontos(2), adQuantPedida(2), adQuantFaturada(2), adQuantDevolvida(2), adValorFaturado(3), adValorDevolvido(3), adTotalDescontos(3), adQuantPedida(3), adQuantFaturada(3), adQuantDevolvida(3), adValorFaturado(4), adValorDevolvido(4), adTotalDescontos(4), adQuantPedida(4), adQuantFaturada(4), adQuantDevolvida(4), adValorFaturado(5), adValorDevolvido(5), adTotalDescontos(5), adQuantPedida(5), adQuantFaturada(5), adQuantDevolvida(5), adValorFaturado(6), adValorDevolvido(6), adTotalDescontos(6), adQuantPedida(6), adQuantFaturada(6), adQuantDevolvida(6), adValorFaturado(7), adValorDevolvido(7), adTotalDescontos(7), adQuantPedida(7), adQuantFaturada(7), adQuantDevolvida(7), _
        adValorFaturado(8), adValorDevolvido(8), adTotalDescontos(8), adQuantPedida(8), adQuantFaturada(8), adQuantDevolvida(8), adValorFaturado(9), adValorDevolvido(9), adTotalDescontos(9), adQuantPedida(9), adQuantFaturada(9), adQuantDevolvida(9), adValorFaturado(10), adValorDevolvido(10), adTotalDescontos(10), adQuantPedida(10), adQuantFaturada(10), adQuantDevolvida(10), adValorFaturado(11), adValorDevolvido(11), adTotalDescontos(11), adQuantPedida(11), adQuantFaturada(11), adQuantDevolvida(11), adValorFaturado(12), adValorDevolvido(12), adTotalDescontos(12), adQuantPedida(12), adQuantFaturada(12), adQuantDevolvida(12), sProdutoInicial, sProdutoFinal)
        If lErro <> AD_SQL_SUCESSO Then Error 999
    
        iMesAux = Month(dtDataInicial2)
        iAnoAux = Year(dtDataInicial2)
        
        dtDataInicial2 = StrParaDate("01/" & iMesAux & "/" & iAnoAux)
                                  
        iMesAux = Month(dtDataFinal2)
        iAnoAux = Year(dtDataFinal2)
                                                                    
        If iMesAux <> 12 Then
            dtDataFinal2 = CDate("01/" & (iMesAux + 1) & "/" & iAnoAux) - 1
        Else
            dtDataFinal2 = "31/" & iMesAux & "/" & iAnoAux
        End If
    
    End If 'Modificado por Leo Final
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    
    Do While lErro = SUCESSO
    
        For iMes = 1 To 12
                                  
            If iMes <> 12 Then
                dtDataInicial = CDate("01/" & iMes & "/" & iAno)
                dtDataFinal = CDate("01/" & (iMes + 1) & "/" & iAno) - 1
            Else
                dtDataInicial = "01/" & 12 & "/" & iAno
                dtDataFinal = "31/" & 12 & "/" & iAno
            End If
            
            'Verifica se algum filtro foi preenchido (basta verificar apenas um p/ saber se todos foram passados)
            'Alterado por Wagner
            If dtDataInicial2 <> 0 Then 'Modificado por Leo Inicio
            
                'Verifica se as datas final e inicial estão dentro do período recebido como parâmetro
                If dtDataInicial < dtDataInicial2 Or dtDataFinal > dtDataFinal2 Then bPassou = True
                            
            End If
            
            'Se o período estiver de acordo
            If bPassou = False Then
            
                sSiglaUMMov = String(STRING_UM_SIGLA, 0)
                sSiglaUMVenda = String(STRING_UM_SIGLA, 0)
                
                dItensTotalQuantidade = 0
                dItensTotalValor = 0
                
                'Valor Faturado e quantidade Faturada
                lErro = Comando_Executar(alComando(2), "SELECT ItensNFiscal.Quantidade, ItensNFiscal.ValorDesconto, ItensNFiscal.PrecoUnitario, TiposDocInfo.Codigo, ItensNFiscal.UnidadeMed, Produtos.SiglaUMVenda, Produtos.ClasseUM FROM NFiscal, ItensNFiscal, TiposDocInfo, Produtos WHERE ItensNfiscal.Produto = Produtos.Codigo AND NFiscal.FilialEmpresa = ? AND ItensNFiscal.Produto = ? AND NFiscal.DataEmissao >= ? AND NFiscal.DataEmissao <= ? AND NFiscal.Status <> 7 AND NFiscal.NumIntDoc = ItensNFiscal.NumIntNF AND NFiscal.TipoNFiscal = TiposDocInfo.Codigo AND TiposDocInfo.Faturamento = 1 AND (TiposDocInfo.Complementar = 0 OR TiposDocInfo.Codigo IN (?,?))", dItensQuantidade, dItensValorDesconto, dItensPrecoUnitario, iCodTipoDocInfo, sSiglaUMMov, sSiglaUMVenda, iClasseUM, iFilialEmpresa, sProduto, dtDataInicial, dtDataFinal, DOCINFO_NFISCP, DOCINFO_NFISFCP)
                If lErro <> AD_SQL_SUCESSO Then Error 999
                          
                lErro = Comando_BuscarPrimeiro(alComando(2))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
            
                Do While lErro = SUCESSO
                    
                    lErro = CF("UM_Conversao", iClasseUM, sSiglaUMMov, sSiglaUMVenda, dFator)
                    If lErro <> SUCESSO Then Error 999
                                   
                    If iCodTipoDocInfo <> DOCINFO_NFISCP And iCodTipoDocInfo <> DOCINFO_NFISFCP Then
                        dItensTotalQuantidade = dItensTotalQuantidade + (dItensQuantidade * dFator)
                    End If
                              
                    dItensTotalValor = dItensTotalValor + ((dItensQuantidade * dItensPrecoUnitario) - dItensValorDesconto)
                    
                    lErro = Comando_BuscarProximo(alComando(2))
                    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
            
                Loop
                  
                'Teste a Ser Feito
                If Abs(dItensTotalQuantidade - adQuantFaturada(iMes)) >= 0.01 Or Abs(dItensTotalValor - adValorFaturado(iMes)) >= 0.01 Then
                
                    Print #1, "SaldoMesFat - Valor Faturado e Quantidade Faturada"
                    Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Mes = " & iMes
                    Print #1, "Quantidade Faturada SaldoMesFat= " & adQuantFaturada(iMes) & " Quantidade Faturada ItensNF = " & dItensTotalQuantidade
                    Print #1, "Valor Faturado SaldoMesFat= " & adValorFaturado(iMes) & " Valor Faturada ItensNF - ValorDescontos = " & (dItensTotalValor - dItensValorDesconto)
                    Print #1, "--------------------------------------------------------------------------"
            
                End If
                  
                sSiglaUMMov = String(STRING_UM_SIGLA, 0)
                sSiglaUMVenda = String(STRING_UM_SIGLA, 0)
                
                dQuantidade = 0
                
                'Quantidade Pedida
                lErro = Comando_Executar(alComando(3), "SELECT ItensPedidoDeVendaTodos.Quantidade, ItensPedidoDeVendaTodos.QuantCancelada, ItensPedidoDeVendaTodos.UnidadeMed, Produtos.SiglaUMVenda, Produtos.ClasseUM FROM ItensPedidoDeVendaTodos, PedVenTodos,Produtos WHERE ItensPedidoDeVendaTodos.CodPedido = PedVenTodos.Codigo AND ItensPedidoDeVendaTodos.FilialEmpresa = PedVenTodos.FilialEmpresa AND PedVenTodos.FilialEmpresa = ? AND PedVenTodos.DataEmissao >= ? AND PedVenTodos.DataEmissao <= ? AND ItensPedidoDeVendaTodos.Produto = ? AND Produtos.Codigo = ItensPedidoDeVendaTodos.Produto", dSomaQuantidadePV, dSomaQuantCanceladaPV, sSiglaUMMov, sSiglaUMVenda, iClasseUM, iFilialEmpresa, dtDataInicial, dtDataFinal, sProduto)
                If lErro <> AD_SQL_SUCESSO Then Error 999
                
                lErro = Comando_BuscarPrimeiro(alComando(3))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
                
                Do While lErro = AD_SQL_SUCESSO
                
                    lErro = CF("UM_Conversao", iClasseUM, sSiglaUMMov, sSiglaUMVenda, dFator)
                    If lErro <> SUCESSO Then Error 999
                                   
                    dQuantidade = dQuantidade + ((dSomaQuantidadePV - dSomaQuantCanceladaPV) * dFator)
                    
                    lErro = Comando_BuscarProximo(alComando(3))
                    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
                
                Loop
    
                'Teste a Ser Feito
                If Abs(adQuantPedida(iMes) - (dQuantidade)) >= 0.01 Then
                    
                    Print #1, "SaldoMesFat - Quantidade Pedida"
                    Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Mes = " & iMes
                    Print #1, "Quantidade Pedida SaldoMesFat= " & adQuantPedida(iMes) & " Quantidade ItensPV - QuantCancelada ItensPV = " & (dQuantidade) & sSiglaUMVenda
                    Print #1, "--------------------------------------------------------------------------"
    
                End If
    
                sSiglaUMMov = String(STRING_UM_SIGLA, 0)
                sSiglaUMVenda = String(STRING_UM_SIGLA, 0)
                
                dItensTotalQuantidadeDev = 0
                dItensTotalValorDev = 0
                
                'QuantidadeDevolvida e Valor Devolvido
                lErro = Comando_Executar(alComando(4), "SELECT ItensNFiscal.Quantidade, ItensNFiscal.ValorDesconto, ItensNFiscal.PrecoUnitario, ItensNFiscal.UnidadeMed, Produtos.SiglaUMVenda, Produtos.ClasseUM FROM NFiscal, ItensNFiscal, Produtos, TiposDocInfo WHERE ItensNfiscal.Produto = Produtos.Codigo AND NFiscal.Status <> 7 AND NFiscal.NumIntDoc = ItensNFiscal.NumIntNF AND NFiscal.FilialEmpresa = ? AND NFiscal.DataEmissao >= ? AND NFiscal.DataEmissao <= ? AND ItensNFiscal.Produto = ? AND NFiscal.TipoNFiscal = TiposDocInfo.Codigo AND TiposDocInfo.Faturamento = 2", dItensQuantidade, dItensValorDesconto, dItensPrecoUnitario, sSiglaUMMov, sSiglaUMVenda, iClasseUM, iFilialEmpresa, dtDataInicial, dtDataFinal, sProduto)
                If lErro <> AD_SQL_SUCESSO Then Error 999
    
                lErro = Comando_BuscarPrimeiro(alComando(4))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    
                Do While lErro = SUCESSO
    
                    lErro = CF("UM_Conversao", iClasseUM, sSiglaUMMov, sSiglaUMVenda, dFator)
                    If lErro <> SUCESSO Then Error 999
                                   
                    dItensTotalQuantidadeDev = dItensTotalQuantidadeDev + (dItensQuantidade * dFator)
                    dItensTotalValorDev = dItensTotalValorDev + ((dItensQuantidade * dItensPrecoUnitario) - dItensValorDesconto)
    
                    lErro = Comando_BuscarProximo(alComando(4))
                    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    
                Loop
    
                'Teste a Ser Feito
                If Abs(dItensTotalQuantidadeDev - adQuantDevolvida(iMes)) >= 0.01 Or Abs(dItensTotalValorDev - adValorDevolvido(iMes)) >= 0.01 Then
    
                    Print #1, "SaldoMesFat - Valor Devolvido e Quantidade Devolvida"
                    Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Mes = " & iMes
                    Print #1, "Quantidade Devolvida SaldoMesFat= " & adQuantDevolvida(iMes) & " Quantidade Devolvida ItensNF = " & dItensTotalQuantidadeDev
                    Print #1, "Valor Devolvido SaldoMesFat= " & adValorDevolvido(iMes) & " Valor Devolvido ItensNF - ValorDescontos = " & (dItensTotalValorDev)
                    Print #1, "--------------------------------------------------------------------------"
    
                End If
                
                'Total de Descontos
                lErro = Comando_Executar(alComando(5), "SELECT SUM(ItensNFiscal.ValorDesconto) FROM NFiscal, ItensNFiscal, TiposDocInfo WHERE NFiscal.Status <> 7 AND NFiscal.FilialEmpresa = ? AND NFiscal.DataEmissao >= ? AND NFiscal.DataEmissao <= ? AND ItensNFiscal.Produto = ? AND NFiscal.NumIntDoc = ItensNFiscal.NumIntNF AND NFiscal.TipoNFiscal = TiposDocInfo.Codigo AND TiposDocInfo.Faturamento = 1 AND (TiposDocInfo.Complementar = 0 OR TiposDocInfo.Codigo IN (?,?))", dValorTotalDescontos, iFilialEmpresa, dtDataInicial, dtDataFinal, sProduto, DOCINFO_NFISCP, DOCINFO_NFISFCP)
                If lErro <> AD_SQL_SUCESSO Then Error 999
                
                lErro = Comando_BuscarPrimeiro(alComando(5))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
                
                'Teste a Ser Feito
                If Abs(dValorTotalDescontos - adTotalDescontos(iMes)) >= 0.01 Then
                    
                    Print #1, "SaldoMesFat - Valor Total Descontos"
                    Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Mes = " & iMes
                    Print #1, "Valor descontos SaldoMesFat = " & adTotalDescontos(iMes) & " Valor dos descontos dos itens = " & dValorTotalDescontos
                    Print #1, "--------------------------------------------------------------------------"
                            
                End If
                
                'Teste a Ser Feito
                If Abs(adQuantPedida(iMes) - (dQuantidade)) >= 0.01 Or Abs(dItensTotalQuantidadeDev - adQuantDevolvida(iMes)) >= 0.01 Or Abs(dItensTotalValorDev - adValorDevolvido(iMes)) >= 0.01 Or Abs(dValorTotalDescontos - adTotalDescontos(iMes)) >= 0.01 Or Abs(dItensTotalQuantidade - adQuantFaturada(iMes)) >= 0.01 Or Abs(dItensTotalValor - adValorFaturado(iMes)) >= 0.01 Then
                
                    lErro = Comando_ExecutarPos(alComandoUPDATE(0), "UPDATE SldMesFat SET ValorFaturado" & iMes & " =? , QuantFaturada" & iMes & " =?, TotalDescontos" & iMes & " =?, ValorDevolvido" & iMes & " =?, QuantDevolvida" & iMes & " =?, QuantPedida" & iMes & " =?", alComando(1), _
                        dItensTotalValor, dItensTotalQuantidade, dValorTotalDescontos, dItensTotalValorDev, dItensTotalQuantidadeDev, dQuantidade)
                    If lErro <> SUCESSO Then Error 999
                    
                End If
            
            End If
        
            bPassou = False
                
        Next
        
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
        
    Loop
    
    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then Error 999
              
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    For iIndice = LBound(alComandoUPDATE) To UBound(alComandoUPDATE)
        Call Comando_Fechar(alComandoUPDATE(iIndice))
    Next
    
    SaldoMesFat_Testa_Integridades2 = SUCESSO
    
    Exit Function
         
Erro_SaldoMesFat_Testa_Integridades2:

    SaldoMesFat_Testa_Integridades2 = Err
    
    Select Case Err
          
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149902)
     
    End Select
    
    Call Transacao_Rollback
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    For iIndice = LBound(alComandoUPDATE) To UBound(alComandoUPDATE)
        Call Comando_Fechar(alComandoUPDATE(iIndice))
    Next
    
End Function

Function SaldoMesFatFilCli_Testa_Integridades2(Optional dtDataInicial2 As Date, Optional dtDataFinal2 As Date, Optional sProdutoInicial As String, Optional sProdutoFinal As String) As Long

Dim lErro As Long
Dim alComando(1 To 4) As Long
Dim iIndice As Integer
Dim sSQL As String
Dim lTransacao As Long
Dim adValorFaturado(1 To 12) As Double
Dim adValorDevolvido(1 To 12) As Double
Dim adQtdFaturada(1 To 12) As Double
Dim adQtdDevolvida(1 To 12) As Double
Dim iAno As Integer
Dim iFilialEmpresa As Integer
Dim sProduto As String
Dim lCliente As Long
Dim iFilialCli As Integer
Dim dtDataInicial As Date
Dim dtDataFinal As Date
Dim iMes As Integer
Dim dValorFaturado As Double
Dim dQtdFaturada  As Double
Dim dValorDevolvido  As Double
Dim dQtdDevolvida As Double
Dim dItensQuantidade As Double
Dim dItensValorDesconto As Double
Dim dItensPrecoUnitario As Double
Dim dItensTotalQuantidade As Double
Dim dItensTotalValor As Double
Dim dItensTotalQuantidadeDev As Double
Dim dItensTotalValorDev As Double
Dim iClasseUM As Integer
Dim sSiglaUMVenda As String
Dim sSiglUMEstoque As String
Dim sSiglaUMMov As String
Dim dFator As Double
Dim iCodTipoDocInfo As Integer
Dim iMesAux As Integer
Dim iAnoAux As Integer

On Error GoTo Erro_SaldoMesFatFilCli_Testa_Integridades2
    
    'Inicia transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 999
    
    'Abre comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 999
    Next
    
    'Aloca espaço em variáveis strings
    sProduto = String(STRING_PRODUTO, 0)
    
    'Monta Select
    sSQL = "SELECT FilialEmpresa, Ano, Produto, Cliente, Filial "
    
    For iIndice = 1 To 12
        sSQL = sSQL & ", ValorFaturado" & iIndice
        sSQL = sSQL & ", ValorDevolvido" & iIndice
        sSQL = sSQL & ", QtdFaturada" & iIndice
        sSQL = sSQL & ", QtdDevolvida" & iIndice
    Next
    
    'Verifica se algum filtro foi preenchido (basta verificar apenas um p/ saber se todos foram passados)
    If dtDataInicial2 = 0 Then
    
        sSQL = sSQL & " FROM SldMesFatFilCli ORDER BY Produto"
        
        'Todas tuplas (sem filtro)
        lErro = Comando_ExecutarPos(alComando(1), sSQL, 0, iFilialEmpresa, iAno, sProduto, lCliente, iFilialCli, adValorFaturado(1), adValorDevolvido(1), _
            adQtdFaturada(1), adQtdDevolvida(1), adValorFaturado(2), adValorDevolvido(2), adQtdFaturada(2), adQtdDevolvida(2), adValorFaturado(3), adValorDevolvido(3), _
            adQtdFaturada(3), adQtdDevolvida(3), adValorFaturado(4), adValorDevolvido(4), adQtdFaturada(4), adQtdDevolvida(4), adValorFaturado(5), adValorDevolvido(5), _
            adQtdFaturada(5), adQtdDevolvida(5), adValorFaturado(6), adValorDevolvido(6), adQtdFaturada(6), adQtdDevolvida(6), adValorFaturado(7), adValorDevolvido(7), _
            adQtdFaturada(7), adQtdDevolvida(7), adValorFaturado(8), adValorDevolvido(8), adQtdFaturada(8), adQtdDevolvida(8), adValorFaturado(9), adValorDevolvido(9), _
            adQtdFaturada(9), adQtdDevolvida(9), adValorFaturado(10), adValorDevolvido(10), adQtdFaturada(10), adQtdDevolvida(10), adValorFaturado(11), adValorDevolvido(11), _
            adQtdFaturada(11), adQtdDevolvida(11), adValorFaturado(12), adValorDevolvido(12), adQtdFaturada(12), adQtdDevolvida(12))
        If lErro <> AD_SQL_SUCESSO Then gError 999
    
    Else
               
        'Tuplas filtradas por Produto Inicial e Final
        sSQL = sSQL & " FROM SldMesFatFilCli WHERE Produto >= ? AND Produto <= ? ORDER BY Produto"
    
        lErro = Comando_ExecutarPos(alComando(1), sSQL, 0, iFilialEmpresa, iAno, sProduto, lCliente, iFilialCli, adValorFaturado(1), adValorDevolvido(1), _
            adQtdFaturada(1), adQtdDevolvida(1), adValorFaturado(2), adValorDevolvido(2), adQtdFaturada(2), adQtdDevolvida(2), adValorFaturado(3), adValorDevolvido(3), _
            adQtdFaturada(3), adQtdDevolvida(3), adValorFaturado(4), adValorDevolvido(4), adQtdFaturada(4), adQtdDevolvida(4), adValorFaturado(5), adValorDevolvido(5), _
            adQtdFaturada(5), adQtdDevolvida(5), adValorFaturado(6), adValorDevolvido(6), adQtdFaturada(6), adQtdDevolvida(6), adValorFaturado(7), adValorDevolvido(7), _
            adQtdFaturada(7), adQtdDevolvida(7), adValorFaturado(8), adValorDevolvido(8), adQtdFaturada(8), adQtdDevolvida(8), adValorFaturado(9), adValorDevolvido(9), _
            adQtdFaturada(9), adQtdDevolvida(9), adValorFaturado(10), adValorDevolvido(10), adQtdFaturada(10), adQtdDevolvida(10), adValorFaturado(11), adValorDevolvido(11), _
            adQtdFaturada(11), adQtdDevolvida(11), adValorFaturado(12), adValorDevolvido(12), adQtdFaturada(12), adQtdDevolvida(12), sProdutoInicial, sProdutoFinal)
        If lErro <> AD_SQL_SUCESSO Then gError 999
    
        iMesAux = Month(dtDataInicial2)
        iAnoAux = Year(dtDataInicial2)
        
        'Ignora dia passado e "Seta" como dia 01
        dtDataInicial2 = StrParaDate("01/" & iMesAux & "/" & iAnoAux)
                                  
        iMesAux = Month(dtDataFinal2)
        iAnoAux = Year(dtDataFinal2)
                                                                    
        'Ignora dia passado e "Seta" como último do mês
        If iMesAux <> 12 Then
            dtDataFinal2 = CDate("01/" & (iMesAux + 1) & "/" & iAnoAux) - 1
        Else
            dtDataFinal2 = "31/" & iMesAux & "/" & iAnoAux
        End If
    
    End If
    
    'Busca primeira tupla
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 999
    
    'Enquanto houver tuplas faça
    Do While lErro = SUCESSO
    
        For iMes = 1 To 12
                                  
            If iMes <> 12 Then
                dtDataInicial = CDate("01/" & iMes & "/" & iAno)
                dtDataFinal = CDate("01/" & (iMes + 1) & "/" & iAno) - 1
            Else
                dtDataInicial = "01/" & 12 & "/" & iAno
                dtDataFinal = "31/" & 12 & "/" & iAno
            End If
            
            'Verifica se passou filtro e ele está entre as datas passadas por parâmetro
            If dtDataInicial2 = 0 Or (dtDataInicial >= dtDataInicial2 And dtDataFinal <= dtDataFinal2) Then
                 
                'Aloca espaço nas variáveis strings
                sSiglaUMMov = String(STRING_UM_SIGLA, 0)
                sSiglaUMVenda = String(STRING_UM_SIGLA, 0)
                    
                dItensTotalQuantidade = 0
                dItensTotalValor = 0
                
                'Valor Faturado e quantidade Faturada
                lErro = Comando_Executar(alComando(2), "SELECT I.Quantidade, I.ValorDesconto, I.PrecoUnitario, T.Codigo, I.UnidadeMed, P.SiglaUMVenda, P.ClasseUM FROM NFiscal AS N, ItensNFiscal AS I, TiposDocInfo AS T, Produtos AS P " & _
                                                       "WHERE I.Produto = P.Codigo AND N.FilialEmpresa = ? AND I.Produto = ? AND N.DataEmissao >= ? AND N.DataEmissao <= ? AND N.Status <> 7 AND N.NumIntDoc = I.NumIntNF AND N.TipoNFiscal = T.Codigo AND T.Faturamento = 1 AND (T.Complementar = 0 OR T.Codigo IN (?,?)) AND N.Cliente = ? AND N.FilialCli = ? ", _
                                                       dItensQuantidade, dItensValorDesconto, dItensPrecoUnitario, iCodTipoDocInfo, sSiglaUMMov, sSiglaUMVenda, iClasseUM, iFilialEmpresa, sProduto, dtDataInicial, dtDataFinal, DOCINFO_NFISCP, DOCINFO_NFISFCP, lCliente, iFilialCli)
                If lErro <> AD_SQL_SUCESSO Then gError 999
                          
                lErro = Comando_BuscarPrimeiro(alComando(2))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 999

                Do While lErro = SUCESSO
                    
                    lErro = CF("UM_Conversao", iClasseUM, sSiglaUMMov, sSiglaUMVenda, dFator)
                    If lErro <> SUCESSO Then gError 999
                                   
                    If iCodTipoDocInfo <> DOCINFO_NFISCP And iCodTipoDocInfo <> DOCINFO_NFISFCP Then
                        dItensTotalQuantidade = dItensTotalQuantidade + (dItensQuantidade * dFator)
                    End If
                              
                    dItensTotalValor = dItensTotalValor + ((dItensQuantidade * dItensPrecoUnitario) - dItensValorDesconto)
                    
                    lErro = Comando_BuscarProximo(alComando(2))
                    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 999
            
                Loop
                  
                'Teste a Ser Feito
                If Abs(dItensTotalQuantidade - adQtdFaturada(iMes)) >= 0.01 Or Abs(dItensTotalValor - adValorFaturado(iMes)) >= 0.01 Then
                
                    Print #1, "SaldoMesFatFilCli - Valor Faturado e Quantidade Faturada"
                    Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Mes = " & iMes & " Ano = " & iAno & " Cliente = " & lCliente & " Filial Cliente = " & iFilialCli
                    Print #1, "Quantidade Faturada SaldoMesFatFilCli= " & adQtdFaturada(iMes) & " Quantidade Faturada ItensNF = " & dItensTotalQuantidade
                    Print #1, "Valor Faturado SaldoMesFatFilCli= " & adValorFaturado(iMes) & " Valor Faturada ItensNF - ValorDescontos = " & (dItensTotalValor - dItensValorDesconto)
                    Print #1, "--------------------------------------------------------------------------"
            
                End If
                  
                sSiglaUMMov = String(STRING_UM_SIGLA, 0)
                sSiglaUMVenda = String(STRING_UM_SIGLA, 0)
                
                dItensTotalQuantidadeDev = 0
                dItensTotalValorDev = 0
                
                'QuantidadeDevolvida e Valor Devolvido
                lErro = Comando_Executar(alComando(3), "SELECT I.Quantidade, I.ValorDesconto, I.PrecoUnitario, I.UnidadeMed, P.SiglaUMVenda, P.ClasseUM FROM NFiscal AS N, ItensNFiscal AS I, Produtos AS P, TiposDocInfo AS T " & _
                                                       "WHERE I.Produto = P.Codigo AND N.Status <> 7 AND N.NumIntDoc = I.NumIntNF AND N.FilialEmpresa = ? AND N.DataEmissao >= ? AND N.DataEmissao <= ? AND I.Produto = ? AND N.TipoNFiscal = T.Codigo AND T.Faturamento = 2 AND Cliente = ? AND FilialCli = ? ", _
                                                       dItensQuantidade, dItensValorDesconto, dItensPrecoUnitario, sSiglaUMMov, sSiglaUMVenda, iClasseUM, iFilialEmpresa, dtDataInicial, dtDataFinal, sProduto, lCliente, iFilialCli)
                If lErro <> AD_SQL_SUCESSO Then gError 110252
    
                lErro = Comando_BuscarPrimeiro(alComando(3))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 999
    
                Do While lErro = SUCESSO
    
                    lErro = CF("UM_Conversao", iClasseUM, sSiglaUMMov, sSiglaUMVenda, dFator)
                    If lErro <> SUCESSO Then gError 999
                                   
                    dItensTotalQuantidadeDev = dItensTotalQuantidadeDev + (dItensQuantidade * dFator)
                    dItensTotalValorDev = dItensTotalValorDev + ((dItensQuantidade * dItensPrecoUnitario) - dItensValorDesconto)
    
                    lErro = Comando_BuscarProximo(alComando(3))
                    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 999
    
                Loop
    
                'Teste a Ser Feito
                If Abs(dItensTotalQuantidadeDev - adQtdDevolvida(iMes)) >= 0.01 Or Abs(dItensTotalValorDev - adValorDevolvido(iMes)) >= 0.01 Then
    
                    Print #1, "SaldoMesFatFilCli - Valor Devolvido e Quantidade Devolvida"
                    Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Mes = " & iMes & " Ano = " & iAno & " Cliente = " & lCliente & " Filial Cliente = " & iFilialCli
                    Print #1, "Quantidade Devolvida SaldoMesFatFilCli= " & adQtdDevolvida(iMes) & " Quantidade Devolvida ItensNF = " & dItensTotalQuantidadeDev
                    Print #1, "Valor Devolvido SaldoMesFatFilCli= " & adValorDevolvido(iMes) & " Valor Devolvido ItensNF - ValorDescontos = " & (dItensTotalValorDev)
                    Print #1, "--------------------------------------------------------------------------"
    
                End If
               
                'Teste a Ser Feito
                If Abs(dItensTotalQuantidadeDev - adQtdDevolvida(iMes)) >= 0.01 Or Abs(dItensTotalValorDev - adValorDevolvido(iMes)) >= 0.01 Or Abs(dItensTotalQuantidade - adQtdFaturada(iMes)) >= 0.01 Or Abs(dItensTotalValor - adValorFaturado(iMes)) >= 0.01 Then
                
                    lErro = Comando_ExecutarPos(alComando(4), "UPDATE SldMesFatFilCli SET ValorFaturado" & iMes & " =? , QtdFaturada" & iMes & " =? , ValorDevolvido" & iMes & " =?, QtdDevolvida" & iMes & " =? ", alComando(1), _
                        dItensTotalValor, dItensTotalQuantidade, dItensTotalValorDev, dItensTotalQuantidadeDev)
                    If lErro <> SUCESSO Then gError 999
                
                End If
                    
            End If
                      
        Next
        
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 999
        
    Loop
    
    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then gError 999
              
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    SaldoMesFatFilCli_Testa_Integridades2 = SUCESSO
    
    Exit Function
         
Erro_SaldoMesFatFilCli_Testa_Integridades2:

    SaldoMesFatFilCli_Testa_Integridades2 = gErr
    
    Select Case gErr
          
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149903)
     
    End Select
    
    Call Transacao_Rollback
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
End Function

Function SldDiaEst_Testa_Integridades2(Optional dtDataInicial As Date, Optional dtDataFinal As Date, Optional sProdutoInicial As String, Optional sProdutoFinal As String) As Long
'Testa a integridade e, se necessário, corrige a Tabela de SldDiaEst
 
Dim lErro As Long
Dim alComando(1 To 3) As Long
Dim iIndice As Integer
Dim iFilialEmpresa As Integer
Dim sProduto As String
Dim dtData As Date
Dim dQuantEntrada As Double, dQuantSaida As Double, dQuantCons As Double, dQuantVend As Double, dValorEntrada As Double, dValorSaida As Double, dQuantComp As Double, dValorComp As Double, dValorVend As Double, dValorCons As Double
Dim tTiposMovimentoEstoque As typeTipoMovEst
Dim dQuantidadeMovEst As Double
Dim dCustoMovEst As Double
Dim dTotalQuantEntrada As Double, dTotalQuantSaida As Double, dTotalQuantCons As Double, dTotalQuantVend As Double, dTotalValorEntrada As Double, dTotalValorSaida As Double, dTotalQuantComp As Double, dTotalValorComp As Double, dTotalValorVend As Double, dTotalValorCons As Double
Dim dQuantEntCusto As Double, dValorEntCusto As Double, dQuantSaiCusto As Double, dValorSaiCusto As Double
Dim dTotalQuantEntCusto As Double, dTotalValorEntCusto As Double, dTotalQuantSaiCusto As Double, dTotalValorSaiCusto As Double

Dim dQuantEntConsig3 As Double, dValorEntConsig3 As Double, dQuantSaiConsig3 As Double, dValorSaiConsig3 As Double
Dim dTotalQuantEntConsig3 As Double, dTotalValorEntConsig3 As Double, dTotalQuantSaiConsig3 As Double, dTotalValorSaiConsig3 As Double
Dim dQuantEntDemo3 As Double, dValorEntDemo3 As Double, dQuantSaiDemo3 As Double, dValorSaiDemo3 As Double
Dim dTotalQuantEntDemo3 As Double, dTotalValorEntDemo3 As Double, dTotalQuantSaiDemo3 As Double, dTotalValorSaiDemo3 As Double
Dim dQuantEntConserto3 As Double, dValorEntConserto3 As Double, dQuantSaiConserto3 As Double, dValorSaiConserto3 As Double
Dim dTotalQuantEntConserto3 As Double, dTotalValorEntConserto3 As Double, dTotalQuantSaiConserto3 As Double, dTotalValorSaiConserto3 As Double
Dim dQuantEntOutras3 As Double, dValorEntOutras3 As Double, dQuantSaiOutras3 As Double, dValorSaiOutras3 As Double
Dim dTotalQuantEntOutras3 As Double, dTotalValorEntOutras3 As Double, dTotalQuantSaiOutras3 As Double, dTotalValorSaiOutras3 As Double
Dim dQuantEntBenef3 As Double, dValorEntBenef3 As Double, dQuantSaiBenef3 As Double, dValorSaiBenef3 As Double
Dim dTotalQuantEntBenef3 As Double, dTotalValorEntBenef3 As Double, dTotalQuantSaiBenef3 As Double, dTotalValorSaiBenef3 As Double

Dim dQuantEntConsig As Double, dValorEntConsig As Double, dQuantSaiConsig As Double, dValorSaiConsig As Double
Dim dTotalQuantEntConsig As Double, dTotalValorEntConsig As Double, dTotalQuantSaiConsig As Double, dTotalValorSaiConsig As Double
Dim dQuantEntDemo As Double, dValorEntDemo As Double, dQuantSaiDemo As Double, dValorSaiDemo As Double
Dim dTotalQuantEntDemo As Double, dTotalValorEntDemo As Double, dTotalQuantSaiDemo As Double, dTotalValorSaiDemo As Double
Dim dQuantEntConserto As Double, dValorEntConserto As Double, dQuantSaiConserto As Double, dValorSaiConserto As Double
Dim dTotalQuantEntConserto As Double, dTotalValorEntConserto As Double, dTotalQuantSaiConserto As Double, dTotalValorSaiConserto As Double
Dim dQuantEntOutras As Double, dValorEntOutras As Double, dQuantSaiOutras As Double, dValorSaiOutras As Double
Dim dTotalQuantEntOutras As Double, dTotalValorEntOutras As Double, dTotalQuantSaiOutras As Double, dTotalValorSaiOutras As Double
Dim dQuantEntBenef As Double, dValorEntBenef As Double, dQuantSaiBenef As Double, dValorSaiBenef As Double
Dim dTotalQuantEntBenef As Double, dTotalValorEntBenef As Double, dTotalQuantSaiBenef As Double, dTotalValorSaiBenef As Double

Dim sUPDATE As String, sSelecaoSQL As String, sSelecaoSQL2 As String

Dim dQuantVendConsig3 As Double, dValorVendConsig3 As Double, dTotalQuantVendConsig3 As Double, dTotalValorVendConsig3 As Double
Dim dQuantEntRecIndl As Double, dValorEntRecIndl As Double, dTotalQuantEntRecIndl As Double, dTotalValorEntRecIndl As Double
Dim dQuantSaiRecIndl As Double, dValorSaiRecIndl As Double, dTotalQuantSaiRecIndl As Double, dTotalValorSaiRecIndl As Double

Dim iClasseUM As Integer, sSiglaUMEst As String, sSiglaUMMov As String, dFator As Double
Dim lTransacao As Long, bMudou As Boolean
Dim lNumIntDocMovto As Long


On Error GoTo Erro_SldDiaEst_Testa_Integridades2
    
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 999
    
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 999
    Next
    
    sProduto = String(STRING_PRODUTO, 0)
    tTiposMovimentoEstoque.sEntradaOuSaida = String(STRING_TIPOMOV_EST_ENTRADAOUSAIDA, 0)
    
    'Verifica se algum filtro foi preenchido (basta verificar apenas um p/ saber se todos foram passados)
    If Len(Trim(dtDataInicial)) = 0 Then 'Modificado por Leo Inicio
     
        'Guarda a Selecao SQL
        sSelecaoSQL = "SELECT FilialEmpresa, Produto, Data, QuantEntrada, QuantSaida, QuantCons, QuantVend, ValorEntrada, ValorSaida, QuantComp, ValorComp, ValorVend, ValorCons, QuantEntCusto, ValorEntCusto, QuantSaiCusto, ValorSaiCusto, " & _
                      "QuantEntConsig3, ValorEntConsig3, QuantSaiConsig3, ValorSaiConsig3, QuantEntDemo3, ValorEntDemo3, QuantSaiDemo3, ValorSaiDemo3, QuantEntConserto3, ValorEntConserto3, QuantSaiConserto3, ValorSaiConserto3, QuantEntOutros3, ValorEntOutros3, QuantSaiOutros3, ValorSaiOutros3, QuantEntBenef3, ValorEntBenef3, QuantSaiBenef3, ValorSaiBenef3, " & _
                      "QuantEntConsig, ValorEntConsig, QuantSaiConsig, ValorSaiConsig, QuantEntDemo, ValorEntDemo, QuantSaiDemo, ValorSaiDemo, QuantEntConserto, ValorEntConserto, QuantSaiConserto, ValorSaiConserto, QuantEntOutros, ValorEntOutros, QuantSaiOutros, ValorSaiOutros, QuantEntBenef, ValorEntBenef, QuantSaiBenef, ValorSaiBenef, QuantVendConsig3, ValorVendConsig3, " & _
                      "QuantEntRecIndl, ValorEntRecIndl, QuantSaiRecIndl, ValorSaiRecIndl " & _
                      "FROM SldDiaEst ORDER BY FilialEmpresa, Produto"
        
        lErro = Comando_ExecutarPos(alComando(1), sSelecaoSQL, 0, iFilialEmpresa, sProduto, dtData, dQuantEntrada, dQuantSaida, dQuantCons, dQuantVend, dValorEntrada, dValorSaida, dQuantComp, dValorComp, dValorVend, dValorCons, dQuantEntCusto, dValorEntCusto, dQuantSaiCusto, dValorSaiCusto, dQuantEntConsig3, dValorEntConsig3, dQuantSaiConsig3, dValorSaiConsig3, dQuantEntDemo3, dValorEntDemo3, dQuantSaiDemo3, dValorSaiDemo3, dQuantEntConserto3, dValorEntConserto3, dQuantSaiConserto3, dValorSaiConserto3, dQuantEntOutras3, dValorEntOutras3, dQuantSaiOutras3, dValorSaiOutras3, dQuantEntBenef3, dValorEntBenef3, dQuantSaiBenef3, dValorSaiBenef3, dQuantEntConsig, dValorEntConsig, dQuantSaiConsig, dValorSaiConsig, dQuantEntDemo, dValorEntDemo, dQuantSaiDemo, dValorSaiDemo, dQuantEntConserto, dValorEntConserto, dQuantSaiConserto, dValorSaiConserto, dQuantEntOutras, dValorEntOutras, dQuantSaiOutras, dValorSaiOutras, dQuantEntBenef, dValorEntBenef, dQuantSaiBenef, dValorSaiBenef, dQuantVendConsig3, dValorVendConsig3, _
                                    dQuantEntRecIndl, dValorEntRecIndl, dQuantSaiRecIndl, dValorSaiRecIndl)
        If lErro <> AD_SQL_SUCESSO Then Error 999
        
    Else
    
      'Guarda a Selecao SQL
        sSelecaoSQL = "SELECT FilialEmpresa, Produto, Data, QuantEntrada, QuantSaida, QuantCons, QuantVend, ValorEntrada, ValorSaida, QuantComp, ValorComp, ValorVend, ValorCons, QuantEntCusto, ValorEntCusto, QuantSaiCusto, ValorSaiCusto, " & _
                      "QuantEntConsig3, ValorEntConsig3, QuantSaiConsig3, ValorSaiConsig3, QuantEntDemo3, ValorEntDemo3, QuantSaiDemo3, ValorSaiDemo3, QuantEntConserto3, ValorEntConserto3, QuantSaiConserto3, ValorSaiConserto3, QuantEntOutros3, ValorEntOutros3, QuantSaiOutros3, ValorSaiOutros3, QuantEntBenef3, ValorEntBenef3, QuantSaiBenef3, ValorSaiBenef3, " & _
                      "QuantEntConsig, ValorEntConsig, QuantSaiConsig, ValorSaiConsig, QuantEntDemo, ValorEntDemo, QuantSaiDemo, ValorSaiDemo, QuantEntConserto, ValorEntConserto, QuantSaiConserto, ValorSaiConserto, QuantEntOutros, ValorEntOutros, QuantSaiOutros, ValorSaiOutros, QuantEntBenef, ValorEntBenef, QuantSaiBenef, ValorSaiBenef, QuantVendConsig3, ValorVendConsig3, " & _
                      "QuantEntRecIndl, ValorEntRecIndl, QuantSaiRecIndl, ValorSaiRecIndl " & _
                      "FROM SldDiaEst WHERE Data >= ? AND Data <= ? AND Produto >= ? AND Produto <= ? ORDER BY FilialEmpresa, Produto"
        
        lErro = Comando_ExecutarPos(alComando(1), sSelecaoSQL, 0, iFilialEmpresa, sProduto, dtData, dQuantEntrada, dQuantSaida, dQuantCons, dQuantVend, dValorEntrada, dValorSaida, dQuantComp, dValorComp, dValorVend, dValorCons, dQuantEntCusto, dValorEntCusto, dQuantSaiCusto, dValorSaiCusto, dQuantEntConsig3, dValorEntConsig3, dQuantSaiConsig3, dValorSaiConsig3, dQuantEntDemo3, dValorEntDemo3, dQuantSaiDemo3, dValorSaiDemo3, dQuantEntConserto3, dValorEntConserto3, dQuantSaiConserto3, dValorSaiConserto3, dQuantEntOutras3, dValorEntOutras3, dQuantSaiOutras3, dValorSaiOutras3, dQuantEntBenef3, dValorEntBenef3, dQuantSaiBenef3, dValorSaiBenef3, dQuantEntConsig, dValorEntConsig, dQuantSaiConsig, dValorSaiConsig, dQuantEntDemo, dValorEntDemo, dQuantSaiDemo, dValorSaiDemo, dQuantEntConserto, dValorEntConserto, dQuantSaiConserto, dValorSaiConserto, dQuantEntOutras, dValorEntOutras, dQuantSaiOutras, dValorSaiOutras, dQuantEntBenef, dValorEntBenef, dQuantSaiBenef, dValorSaiBenef, dQuantVendConsig3, dValorVendConsig3, _
                                    dQuantEntRecIndl, dValorEntRecIndl, dQuantSaiRecIndl, dValorSaiRecIndl, dtDataInicial, dtDataFinal, sProdutoInicial, sProdutoFinal)
        If lErro <> AD_SQL_SUCESSO Then Error 999
        
    End If 'Modificado por Leo até aqui
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    
    Do While lErro = SUCESSO
        
        bMudou = False
        
        dTotalQuantEntrada = 0
        dTotalQuantSaida = 0
        dTotalQuantCons = 0
        dTotalQuantVend = 0
        dTotalValorEntrada = 0
        dTotalValorSaida = 0
        dTotalQuantComp = 0
        dTotalValorComp = 0
        dTotalValorVend = 0
        dTotalValorCons = 0
        dTotalQuantEntCusto = 0
        dTotalValorEntCusto = 0
        dTotalQuantSaiCusto = 0
        dTotalValorSaiCusto = 0
        
        dTotalQuantEntConsig3 = 0
        dTotalValorEntConsig3 = 0
        dTotalQuantSaiConsig3 = 0
        dTotalValorSaiConsig3 = 0
        dTotalQuantEntDemo3 = 0
        dTotalValorEntDemo3 = 0
        dTotalQuantSaiDemo3 = 0
        dTotalValorSaiDemo3 = 0
        dTotalQuantEntConserto3 = 0
        dTotalValorEntConserto3 = 0
        dTotalQuantSaiConserto3 = 0
        dTotalValorSaiConserto3 = 0
        dTotalQuantEntOutras3 = 0
        dTotalValorEntOutras3 = 0
        dTotalQuantSaiOutras3 = 0
        dTotalValorSaiOutras3 = 0
        dTotalQuantEntBenef3 = 0
        dTotalValorEntBenef3 = 0
        dTotalQuantSaiBenef3 = 0
        dTotalValorSaiBenef3 = 0
        
        dTotalQuantEntConsig = 0
        dTotalValorEntConsig = 0
        dTotalQuantSaiConsig = 0
        dTotalValorSaiConsig = 0
        dTotalQuantEntDemo = 0
        dTotalValorEntDemo = 0
        dTotalQuantSaiDemo = 0
        dTotalValorSaiDemo = 0
        dTotalQuantEntConserto = 0
        dTotalValorEntConserto = 0
        dTotalQuantSaiConserto = 0
        dTotalValorSaiConserto = 0
        dTotalQuantEntOutras = 0
        dTotalValorEntOutras = 0
        dTotalQuantSaiOutras = 0
        dTotalValorSaiOutras = 0
        dTotalQuantEntBenef = 0
        dTotalValorEntBenef = 0
        dTotalQuantSaiBenef = 0
        dTotalValorSaiBenef = 0
        
        dTotalQuantVendConsig3 = 0
        dTotalValorVendConsig3 = 0
        
        dTotalQuantEntRecIndl = 0
        dTotalValorEntRecIndl = 0
        dTotalQuantSaiRecIndl = 0
        dTotalValorSaiRecIndl = 0
        
        sSiglaUMEst = String(STRING_PRODUTO_SIGLAUMESTOQUE, 0)
        sSiglaUMMov = String(STRING_PRODUTO_SIGLAUMESTOQUE, 0)
        tTiposMovimentoEstoque.sEntradaOuSaida = String(STRING_TIPOMOV_EST_ENTRADAOUSAIDA, 0)
        tTiposMovimentoEstoque.sEntradaSaidaCMP = String(STRING_TIPOMOV_EST_ENTRADAOUSAIDA, 0)

        sSelecaoSQL2 = "SELECT MovimentoEstoque.NumIntDoc, TiposMovimentoEstoque.Codigo, TiposMovimentoEstoque.AtualizaSaldoCusto, MovimentoEstoque.Quantidade, MovimentoEstoque.Custo, TiposMovimentoEstoque.EntradaOuSaida, TiposMovimentoEstoque.EntradaSaidaCMP, " & _
                        "TiposMovimentoEstoque.AtualizaConsumo, TiposMovimentoEstoque.AtualizaVenda, TiposMovimentoEstoque.AtualizaCompra, Produtos.ClasseUM, Produtos.SiglaUMEstoque, MovimentoEstoque.SiglaUM, " & _
                       "TiposMovimentoEstoque.AtualizaConsig, TiposMovimentoEstoque.AtualizaDemo, TiposMovimentoEstoque.AtualizaConserto, TiposMovimentoEstoque.AtualizaOutras, TiposMovimentoEstoque.AtualizaBenef, TiposMovimentoEstoque.ProdutodeTerc, TiposMovimentoEstoque.AtualizaVendaConsig3, TiposMovimentoEstoque.AtualizaRecebIndisp " & _
                       "FROM MovimentoEstoque, TiposMovimentoEstoque, Produtos WHERE MovimentoEstoque.TipoMov = TiposMovimentoEstoque.Codigo AND MovimentoEstoque.FilialEmpresa = ? AND MovimentoEstoque.Produto = ? AND MovimentoEstoque.Data = ? AND MovimentoEstoque.Produto = produtos.codigo AND NOT(MovimentoEstoque.TipoNumIntDocOrigem = 4 AND MovimentoEstoque.NumIntDocOrigem <> 0) AND MovimentoEstoque.NumIntDoc NOT IN (SELECT Numintdocorigem FROM MovimentoEstoque WHERE TipoNumIntDocOrigem = 4 AND MovimentoEstoque.NumIntDocOrigem <> 0) AND TiposMovimentoEstoque.AtualizaSoLote = 0"
        
        'Correção 13/03- Shirley
        lErro = Comando_Executar(alComando(2), sSelecaoSQL2, lNumIntDocMovto, tTiposMovimentoEstoque.iCodigo, tTiposMovimentoEstoque.iAtualizaSaldoCusto, dQuantidadeMovEst, dCustoMovEst, tTiposMovimentoEstoque.sEntradaOuSaida, tTiposMovimentoEstoque.sEntradaSaidaCMP, tTiposMovimentoEstoque.iAtualizaConsumo, tTiposMovimentoEstoque.iAtualizaVenda, tTiposMovimentoEstoque.iAtualizaCompra, iClasseUM, sSiglaUMEst, sSiglaUMMov, _
                                tTiposMovimentoEstoque.iAtualizaConsig, tTiposMovimentoEstoque.iAtualizaDemo, tTiposMovimentoEstoque.iAtualizaConserto, tTiposMovimentoEstoque.iAtualizaOutras, tTiposMovimentoEstoque.iAtualizaBenef, tTiposMovimentoEstoque.iProdutoDeTerc, tTiposMovimentoEstoque.iAtualizaVendaConsig3, tTiposMovimentoEstoque.iAtualizaRecebIndisp, iFilialEmpresa, sProduto, dtData)
        
        If lErro <> AD_SQL_SUCESSO Then Error 999

        lErro = Comando_BuscarPrimeiro(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999

        Do While lErro = SUCESSO

            lErro = CF("UM_Conversao", iClasseUM, sSiglaUMMov, sSiglaUMEst, dFator)
            If lErro <> SUCESSO Then Error 999
             
            dQuantidadeMovEst = dQuantidadeMovEst * dFator
            
            If (tTiposMovimentoEstoque.sEntradaOuSaida = TIPOMOV_EST_ENTRADA Or tTiposMovimentoEstoque.iCodigo = MOV_EST_AJUSTE_CUSTO_STD_NOSSO) And tTiposMovimentoEstoque.iCodigo <> MOV_EST_MAT_NOSSO_PARA_BENEF_ENTRADA And tTiposMovimentoEstoque.sEntradaSaidaCMP = tTiposMovimentoEstoque.sEntradaOuSaida Then
                dTotalQuantEntrada = dTotalQuantEntrada + dQuantidadeMovEst
                dTotalValorEntrada = dTotalValorEntrada + dCustoMovEst
            ElseIf tTiposMovimentoEstoque.sEntradaOuSaida = TIPOMOV_EST_SAIDA And tTiposMovimentoEstoque.iCodigo <> MOV_EST_MAT_NOSSO_PARA_BENEF_SAIDA And tTiposMovimentoEstoque.sEntradaSaidaCMP = tTiposMovimentoEstoque.sEntradaOuSaida Then
                dTotalQuantSaida = dTotalQuantSaida + dQuantidadeMovEst
                dTotalValorSaida = dTotalValorSaida + dCustoMovEst
            End If
            
            If tTiposMovimentoEstoque.iAtualizaConsumo = TIPOMOV_EST_ADICIONACONSUMO Then
                dTotalQuantCons = dTotalQuantCons + dQuantidadeMovEst
                dTotalValorCons = dTotalValorCons + dCustoMovEst
            ElseIf tTiposMovimentoEstoque.iAtualizaConsumo = TIPOMOV_EST_SUBTRAICONSUMO Then
                dTotalQuantCons = dTotalQuantCons - dQuantidadeMovEst
                dTotalValorCons = dTotalValorCons - dCustoMovEst
            End If
            
            If tTiposMovimentoEstoque.iAtualizaVenda = TIPOMOV_EST_ADICIONAVENDA Then
                dTotalQuantVend = dTotalQuantVend + dQuantidadeMovEst
                dTotalValorVend = dTotalValorVend + dCustoMovEst
            ElseIf tTiposMovimentoEstoque.iAtualizaVenda = TIPOMOV_EST_SUBTRAIVENDA Then
                dTotalQuantVend = dTotalQuantVend - dQuantidadeMovEst
                dTotalValorVend = dTotalValorVend - dCustoMovEst
            End If
            
            If tTiposMovimentoEstoque.iAtualizaCompra = TIPOMOV_EST_ADICIONACOMPRA Then
                dTotalQuantComp = dTotalQuantComp + dQuantidadeMovEst
                dTotalValorComp = dTotalValorComp + dCustoMovEst
            ElseIf tTiposMovimentoEstoque.iAtualizaCompra = TIPOMOV_EST_SUBTRAICOMPRA Then
                dTotalQuantComp = dTotalQuantComp - dQuantidadeMovEst
                dTotalValorComp = dTotalValorComp - dCustoMovEst
            End If
            
            'Daniel
            If tTiposMovimentoEstoque.sEntradaOuSaida = TIPOMOV_EST_ENTRADA Or tTiposMovimentoEstoque.iCodigo = MOV_EST_AJUSTE_CUSTO_STD_NOSSO Then
                If tTiposMovimentoEstoque.iAtualizaSaldoCusto = TIPOMOV_EST_ATUALIZASALDOCUSTOADICIONA Then
                    dTotalQuantEntCusto = dTotalQuantEntCusto + dQuantidadeMovEst
                    dTotalValorEntCusto = dTotalValorEntCusto + dCustoMovEst
                ElseIf tTiposMovimentoEstoque.iAtualizaSaldoCusto = TIPOMOV_EST_ATUALIZASALDOCUSTOSUBTRAI Then
                    dTotalQuantEntCusto = dTotalQuantEntCusto - dQuantidadeMovEst
                    dTotalValorEntCusto = dTotalValorEntCusto - dCustoMovEst
                End If
            End If
            
            If tTiposMovimentoEstoque.sEntradaOuSaida = TIPOMOV_EST_SAIDA Then
                If tTiposMovimentoEstoque.iAtualizaSaldoCusto = TIPOMOV_EST_ATUALIZASALDOCUSTOADICIONA Then
                    dTotalQuantSaiCusto = dTotalQuantSaiCusto + dQuantidadeMovEst
                    dTotalValorSaiCusto = dTotalValorSaiCusto + dCustoMovEst
                ElseIf tTiposMovimentoEstoque.iAtualizaSaldoCusto = TIPOMOV_EST_ATUALIZASALDOCUSTOSUBTRAI Then
                    dTotalQuantSaiCusto = dTotalQuantSaiCusto - dQuantidadeMovEst
                    dTotalValorSaiCusto = dTotalValorSaiCusto - dCustoMovEst
                End If
            End If
            
            If tTiposMovimentoEstoque.iAtualizaRecebIndisp = TIPOMOV_EST_ADICIONARECEBINDISP Then
                dTotalQuantEntRecIndl = dTotalQuantEntRecIndl + dQuantidadeMovEst
                dTotalValorEntRecIndl = dTotalValorEntRecIndl + dCustoMovEst
            ElseIf tTiposMovimentoEstoque.iAtualizaRecebIndisp = TIPOMOV_EST_SUBTRAIRECEBINDISP Then
                dTotalQuantSaiRecIndl = dTotalQuantSaiRecIndl - dQuantidadeMovEst
                dTotalValorSaiRecIndl = dTotalValorSaiRecIndl - dCustoMovEst
            End If
        
            If tTiposMovimentoEstoque.iAtualizaVendaConsig3 = TIPOMOV_EST_ADICIONAVENDACONSIG3 Then
                dTotalQuantVendConsig3 = dTotalQuantVendConsig3 + dQuantidadeMovEst
                dTotalValorVendConsig3 = dTotalValorVendConsig3 + dCustoMovEst
            ElseIf tTiposMovimentoEstoque.iAtualizaVendaConsig3 = TIPOMOV_EST_SUBTRAIVENDACONSIG3 Then
                dTotalQuantVendConsig3 = dTotalQuantVendConsig3 - dQuantidadeMovEst
                dTotalValorVendConsig3 = dTotalValorVendConsig3 - dCustoMovEst
            End If
            
            'Se for Produto Nosso em Terceiros...
            If tTiposMovimentoEstoque.iProdutoDeTerc = TIPOMOV_EST_PRODUTONOSSO Then
            
                If tTiposMovimentoEstoque.iAtualizaDemo = TIPOMOV_EST_ADICIONADEMO Then
                    dTotalQuantEntDemo = dTotalQuantEntDemo + dQuantidadeMovEst
                    dTotalValorEntDemo = dTotalValorEntDemo + dCustoMovEst
                ElseIf tTiposMovimentoEstoque.iAtualizaDemo = TIPOMOV_EST_SUBTRAIDEMO Then
                    dTotalQuantSaiDemo = dTotalQuantSaiDemo + dQuantidadeMovEst
                    dTotalValorSaiDemo = dTotalValorSaiDemo + dCustoMovEst
                End If
            
                If tTiposMovimentoEstoque.iAtualizaBenef = TIPOMOV_EST_ADICIONABENEF Then
                    dTotalQuantEntBenef = dTotalQuantEntBenef + dQuantidadeMovEst
                    dTotalValorEntBenef = dTotalValorEntBenef + dCustoMovEst
                ElseIf tTiposMovimentoEstoque.iAtualizaBenef = TIPOMOV_EST_SUBTRAIBENEF Then
                    dTotalQuantSaiBenef = dTotalQuantSaiBenef + dQuantidadeMovEst
                    dTotalValorSaiBenef = dTotalValorSaiBenef + dCustoMovEst
                End If
            
                If tTiposMovimentoEstoque.iAtualizaConserto = TIPOMOV_EST_ADICIONACONSERTO Then
                    dTotalQuantEntConserto = dTotalQuantEntConserto + dQuantidadeMovEst
                    dTotalValorEntConserto = dTotalValorEntConserto + dCustoMovEst
                ElseIf tTiposMovimentoEstoque.iAtualizaConserto = TIPOMOV_EST_SUBTRAICONSERTO Then
                    dTotalQuantSaiConserto = dTotalQuantSaiConserto + dQuantidadeMovEst
                    dTotalValorSaiConserto = dTotalValorSaiConserto + dCustoMovEst
                End If
            
                If tTiposMovimentoEstoque.iAtualizaConsig = TIPOMOV_EST_ADICIONACONSIGNACAO Then
                    dTotalQuantEntConsig = dTotalQuantEntConsig + dQuantidadeMovEst
                    dTotalValorEntConsig = dTotalValorEntConsig + dCustoMovEst
                ElseIf tTiposMovimentoEstoque.iAtualizaConsig = TIPOMOV_EST_SUBTRAICONSIGNACAO Then
                    dTotalQuantSaiConsig = dTotalQuantSaiConsig + dQuantidadeMovEst
                    dTotalValorSaiConsig = dTotalValorSaiConsig + dCustoMovEst
                End If
            
                If tTiposMovimentoEstoque.iAtualizaOutras = TIPOMOV_EST_ADICIONAOUTRAS Then
                    dTotalQuantEntOutras = dTotalQuantEntOutras + dQuantidadeMovEst
                    dTotalValorEntOutras = dTotalValorEntOutras + dCustoMovEst
                ElseIf tTiposMovimentoEstoque.iAtualizaOutras = TIPOMOV_EST_SUBTRAIOUTRAS Then
                    dTotalQuantSaiOutras = dTotalQuantSaiOutras + dQuantidadeMovEst
                    dTotalValorSaiOutras = dTotalValorSaiOutras + dCustoMovEst
                End If
            
            'Senão, se for Produto de Terceiros Conosco...
            ElseIf tTiposMovimentoEstoque.iProdutoDeTerc = TIPOMOV_EST_PRODUTODETERCEIROS Then
            
                If tTiposMovimentoEstoque.iAtualizaDemo = TIPOMOV_EST_ADICIONADEMO Then
                    dTotalQuantEntDemo3 = dTotalQuantEntDemo3 + dQuantidadeMovEst
                    dTotalValorEntDemo3 = dTotalValorEntDemo3 + dCustoMovEst
                ElseIf tTiposMovimentoEstoque.iAtualizaDemo = TIPOMOV_EST_SUBTRAIDEMO Then
                    dTotalQuantSaiDemo3 = dTotalQuantSaiDemo3 + dQuantidadeMovEst
                    dTotalValorSaiDemo3 = dTotalValorSaiDemo3 + dCustoMovEst
                End If
            
                If tTiposMovimentoEstoque.iAtualizaBenef = TIPOMOV_EST_ADICIONABENEF Then
                    dTotalQuantEntBenef3 = dTotalQuantEntBenef3 + dQuantidadeMovEst
                    dTotalValorEntBenef3 = dTotalValorEntBenef3 + dCustoMovEst
                ElseIf tTiposMovimentoEstoque.iAtualizaBenef = TIPOMOV_EST_SUBTRAIBENEF Then
                    dTotalQuantSaiBenef3 = dTotalQuantSaiBenef3 + dQuantidadeMovEst
                    dTotalValorSaiBenef3 = dTotalValorSaiBenef3 + dCustoMovEst
                End If
            
                If tTiposMovimentoEstoque.iAtualizaConserto = TIPOMOV_EST_ADICIONACONSERTO Then
                    dTotalQuantEntConserto3 = dTotalQuantEntConserto3 + dQuantidadeMovEst
                    dTotalValorEntConserto3 = dTotalValorEntConserto3 + dCustoMovEst
                ElseIf tTiposMovimentoEstoque.iAtualizaConserto = TIPOMOV_EST_SUBTRAICONSERTO Then
                    dTotalQuantSaiConserto3 = dTotalQuantSaiConserto3 + dQuantidadeMovEst
                    dTotalValorSaiConserto3 = dTotalValorSaiConserto3 + dCustoMovEst
                End If

                If tTiposMovimentoEstoque.iAtualizaConsig = TIPOMOV_EST_ADICIONACONSIGNACAO Then
                    dTotalQuantEntConsig3 = dTotalQuantEntConsig3 + dQuantidadeMovEst
                    dTotalValorEntConsig3 = dTotalValorEntConsig3 + dCustoMovEst
                ElseIf tTiposMovimentoEstoque.iAtualizaConsig = TIPOMOV_EST_SUBTRAICONSIGNACAO Then
                    dTotalQuantSaiConsig3 = dTotalQuantSaiConsig3 + dQuantidadeMovEst
                    dTotalValorSaiConsig3 = dTotalValorSaiConsig3 + dCustoMovEst
                End If
            
                If tTiposMovimentoEstoque.iAtualizaOutras = TIPOMOV_EST_ADICIONAOUTRAS Then
                    dTotalQuantEntOutras3 = dTotalQuantEntOutras3 + dQuantidadeMovEst
                    dTotalValorEntOutras3 = dTotalValorEntOutras3 + dCustoMovEst
                ElseIf tTiposMovimentoEstoque.iAtualizaOutras = TIPOMOV_EST_SUBTRAIOUTRAS Then
                    dTotalQuantSaiOutras3 = dTotalQuantSaiOutras3 + dQuantidadeMovEst
                    dTotalValorSaiOutras3 = dTotalValorSaiOutras3 + dCustoMovEst
                End If
                
            End If
            
            lErro = Comando_BuscarProximo(alComando(2))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
            
        Loop
        
        'Teste a Ser Feito
        If Abs(dTotalQuantEntrada - dQuantEntrada) >= 0.01 Then
            
            Print #1, "SaldoDiaEst - Quantidade Entrada"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantEntrada & " Quantidade MovEst = " & dTotalQuantEntrada
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorEntrada - dValorEntrada) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Entrada"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorEntrada & " Valor MovEst = " & dTotalValorEntrada
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantSaida - dQuantSaida) >= 0.01 Then
            Print #1, "SaldoDiaEst - Quantidade Saida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantSaida & " Quantidade MovEst = " & dTotalQuantSaida
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorSaida - dValorSaida) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Saida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorSaida & " Valor MovEst = " & dTotalValorSaida
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantCons - dQuantCons) >= 0.01 Then
            Print #1, "SaldoDiaEst - Quantidade Consumida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantCons & " Quantidade MovEst = " & dTotalQuantCons
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorCons - dValorCons) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Consumido"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorCons & " Valor MovEst = " & dTotalValorCons
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantVend - dQuantVend) >= 0.01 Then
            Print #1, "SaldoDiaEst - Quantidade Venda"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantVend & " Quantidade MovEst = " & dTotalQuantVend
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorVend - dValorVend) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Venda"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorVend & " Valor MovEst = " & dTotalValorVend
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantComp - dQuantComp) >= 0.01 Then
            Print #1, "SaldoDiaEst - Quantidade Compra"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantComp & " Quantidade MovEst = " & dTotalQuantComp
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorComp - dValorComp) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Compra"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorComp & " Valor MovEst = " & dTotalValorComp
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantEntCusto - dQuantEntCusto) >= 0.01 Then
            
            Print #1, "SaldoDiaEst - Quantidade Custo Entrada"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantEntCusto & " Quantidade MovEst = " & dTotalQuantEntCusto
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorEntCusto - dValorEntCusto) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Custo Entrada"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorEntCusto & " Valor MovEst = " & dTotalValorEntCusto
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantSaiCusto - dQuantSaiCusto) >= 0.01 Then
            Print #1, "SaldoDiaEst - Quantidade Custo Saida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantSaiCusto & " Quantidade MovEst = " & dTotalQuantSaiCusto
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorSaiCusto - dValorSaiCusto) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Custo Saida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorSaiCusto & " Valor MovEst = " & dTotalValorSaiCusto
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantEntBenef3 - dQuantEntBenef3) >= 0.01 Then
            
            Print #1, "SaldoDiaEst - Quantidade Benef. de 3ºs Entrada"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantEntBenef3 & " Quantidade MovEst = " & dTotalQuantEntBenef3
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorEntBenef3 - dValorEntBenef3) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Benef. de 3ºs Entrada"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorEntBenef3 & " Valor MovEst = " & dTotalValorEntBenef3
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantSaiBenef3 - dQuantSaiBenef3) >= 0.01 Then
            Print #1, "SaldoDiaEst - Quantidade Benef. de 3ºs Saida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantSaiBenef3 & " Quantidade MovEst = " & dTotalQuantSaiBenef3
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorSaiBenef3 - dValorSaiBenef3) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Benef. de 3ºs Saida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorSaiBenef3 & " Valor MovEst = " & dTotalValorSaiBenef3
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantEntOutras3 - dQuantEntOutras3) >= 0.01 Then
            
            Print #1, "SaldoDiaEst - Quantidade Outras de 3ºs Entrada"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantEntOutras3 & " Quantidade MovEst = " & dTotalQuantEntOutras3
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorEntOutras3 - dValorEntOutras3) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Outras de 3ºs Entrada"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorEntOutras3 & " Valor MovEst = " & dTotalValorEntOutras3
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantSaiOutras3 - dQuantSaiOutras3) >= 0.01 Then
            Print #1, "SaldoDiaEst - Quantidade Outras de 3ºs Saida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantSaiOutras3 & " Quantidade MovEst = " & dTotalQuantSaiOutras3
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorSaiOutras3 - dValorSaiOutras3) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Outras de 3ºs Saida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorSaiOutras3 & " Valor MovEst = " & dTotalValorSaiOutras3
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantEntDemo3 - dQuantEntDemo3) >= 0.01 Then
            
            Print #1, "SaldoDiaEst - Quantidade Demo de 3ºs Entrada"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantEntDemo3 & " Quantidade MovEst = " & dTotalQuantEntDemo3
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorEntDemo3 - dValorEntDemo3) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Demo de 3ºs Entrada"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorEntDemo3 & " Valor MovEst = " & dTotalValorEntDemo3
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantSaiDemo3 - dQuantSaiDemo3) >= 0.01 Then
            Print #1, "SaldoDiaEst - Quantidade Demo de 3ºs Saida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantSaiDemo3 & " Quantidade MovEst = " & dTotalQuantSaiDemo3
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorSaiDemo3 - dValorSaiDemo3) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Demo de 3ºs Saida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorSaiDemo3 & " Valor MovEst = " & dTotalValorSaiDemo3
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantEntConserto3 - dQuantEntConserto3) >= 0.01 Then
            
            Print #1, "SaldoDiaEst - Quantidade Conserto de 3ºs Entrada"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantEntConserto3 & " Quantidade MovEst = " & dTotalQuantEntConserto3
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorEntConserto3 - dValorEntConserto3) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Conserto de 3ºs Entrada"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorEntConserto3 & " Valor MovEst = " & dTotalValorEntConserto3
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantSaiConserto3 - dQuantSaiConserto3) >= 0.01 Then
            Print #1, "SaldoDiaEst - Quantidade Conserto de 3ºs Saida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantSaiConserto3 & " Quantidade MovEst = " & dTotalQuantSaiConserto3
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorSaiConserto3 - dValorSaiConserto3) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Conserto de 3ºs Saida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorSaiConserto3 & " Valor MovEst = " & dTotalValorSaiConserto3
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantEntConsig3 - dQuantEntConsig3) >= 0.01 Then
            
            Print #1, "SaldoDiaEst - Quantidade Consig de 3ºs Entrada"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantEntConsig3 & " Quantidade MovEst = " & dTotalQuantEntConsig3
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorEntConsig3 - dValorEntConsig3) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Consig de 3ºs Entrada"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorEntConsig3 & " Valor MovEst = " & dTotalValorEntConsig3
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantSaiConsig3 - dQuantSaiConsig3) >= 0.01 Then
            Print #1, "SaldoDiaEst - Quantidade Consig de 3ºs Saida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantSaiConsig3 & " Quantidade MovEst = " & dTotalQuantSaiConsig3
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorSaiConsig3 - dValorSaiConsig3) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Consig de 3ºs Saida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorSaiConsig3 & " Valor MovEst = " & dTotalValorSaiConsig3
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantEntBenef - dQuantEntBenef) >= 0.01 Then
            
            Print #1, "SaldoDiaEst - Quantidade Benef. Entrada"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantEntBenef & " Quantidade MovEst = " & dTotalQuantEntBenef
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorEntBenef - dValorEntBenef) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Benef. de Entrada"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorEntBenef & " Valor MovEst = " & dTotalValorEntBenef
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantSaiBenef - dQuantSaiBenef) >= 0.01 Then
            Print #1, "SaldoDiaEst - Quantidade Benef. de Saida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantSaiBenef & " Quantidade MovEst = " & dTotalQuantSaiBenef
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorSaiBenef - dValorSaiBenef) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Benef. de Saida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorSaiBenef & " Valor MovEst = " & dTotalValorSaiBenef
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantEntOutras - dQuantEntOutras) >= 0.01 Then
            
            Print #1, "SaldoDiaEst - Quantidade Outras de Entrada"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantEntOutras & " Quantidade MovEst = " & dTotalQuantEntOutras
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorEntOutras - dValorEntOutras) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Outras de Entrada"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorEntOutras & " Valor MovEst = " & dTotalValorEntOutras
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantSaiOutras - dQuantSaiOutras) >= 0.01 Then
            Print #1, "SaldoDiaEst - Quantidade Outras de Saida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantSaiOutras & " Quantidade MovEst = " & dTotalQuantSaiOutras
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorSaiOutras - dValorSaiOutras) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Outras de Saida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorSaiOutras & " Valor MovEst = " & dTotalValorSaiOutras
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantEntDemo - dQuantEntDemo) >= 0.01 Then
            
            Print #1, "SaldoDiaEst - Quantidade Demo de Entrada"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantEntDemo & " Quantidade MovEst = " & dTotalQuantEntDemo
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorEntDemo - dValorEntDemo) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Demo de Entrada"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorEntDemo & " Valor MovEst = " & dTotalValorEntDemo
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantSaiDemo - dQuantSaiDemo) >= 0.01 Then
            Print #1, "SaldoDiaEst - Quantidade Demo de Saida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantSaiDemo & " Quantidade MovEst = " & dTotalQuantSaiDemo
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorSaiDemo - dValorSaiDemo) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Demo de Saida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorSaiDemo & " Valor MovEst = " & dTotalValorSaiDemo
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantEntConserto - dQuantEntConserto) >= 0.01 Then
            
            Print #1, "SaldoDiaEst - Quantidade Conserto de Entrada"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantEntConserto & " Quantidade MovEst = " & dTotalQuantEntConserto
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorEntConserto - dValorEntConserto) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Conserto de Entrada"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorEntConserto & " Valor MovEst = " & dTotalValorEntConserto
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantSaiConserto - dQuantSaiConserto) >= 0.01 Then
            Print #1, "SaldoDiaEst - Quantidade Conserto de Saida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantSaiConserto & " Quantidade MovEst = " & dTotalQuantSaiConserto
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorSaiConserto - dValorSaiConserto) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Conserto de Saida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorSaiConserto & " Valor MovEst = " & dTotalValorSaiConserto
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantEntConsig - dQuantEntConsig) >= 0.01 Then
            
            Print #1, "SaldoDiaEst - Quantidade Consig de Entrada"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantEntConsig & " Quantidade MovEst = " & dTotalQuantEntConsig
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorEntConsig - dValorEntConsig) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Consig de Entrada"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorEntConsig & " Valor MovEst = " & dTotalValorEntConsig
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantSaiConsig - dQuantSaiConsig) >= 0.01 Then
            Print #1, "SaldoDiaEst - Quantidade Consig de Saida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantSaiConsig & " Quantidade MovEst = " & dTotalQuantSaiConsig
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorSaiConsig - dValorSaiConsig) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Consig de Saida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorSaiConsig & " Valor MovEst = " & dTotalValorSaiConsig
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantVendConsig3 - dQuantVendConsig3) >= 0.01 Then
            Print #1, "SaldoDiaEst - Quantidade Venda Consig 3ºs"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantVendConsig3 & " Quantidade MovEst = " & dTotalQuantVendConsig3
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorVendConsig3 - dValorVendConsig3) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Venda Consig 3ºs"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorVendConsig3 & " Valor MovEst = " & dTotalValorVendConsig3
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantEntRecIndl - dQuantEntRecIndl) >= 0.01 Then
            
            Print #1, "SaldoDiaEst - Quantidade Rec. Indisp. de Entrada"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantEntRecIndl & " Quantidade MovEst = " & dTotalQuantEntRecIndl
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorEntRecIndl - dValorEntRecIndl) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Rec. Indisp. de Entrada"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorEntRecIndl & " Valor MovEst = " & dTotalValorEntRecIndl
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantSaiRecIndl - dQuantSaiRecIndl) >= 0.01 Then
            Print #1, "SaldoDiaEst - Quantidade Rec. Indisp. de Saida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Quantidade SldDiaEst= " & dQuantSaiRecIndl & " Quantidade MovEst = " & dTotalQuantSaiRecIndl
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorSaiRecIndl - dValorSaiRecIndl) >= 0.01 Then
            Print #1, "SaldoDiaEst - Valor Rec. Indisp. de Saida"
            Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Data = " & dtData
            Print #1, "Valor SldDiaEst= " & dValorSaiRecIndl & " Valor MovEst = " & dTotalValorSaiRecIndl
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
    
        If bMudou = True Then
        
            sUPDATE = "UPDATE SldDiaEst SET QuantEntrada=?, QuantSaida=?, QuantCons=?, QuantVend=?, ValorEntrada=?, ValorSaida=?, " & _
                      "QuantComp=?, ValorComp=?, ValorVend=?, ValorCons=?, QuantEntCusto=?, ValorEntCusto=?, QuantSaiCusto=?, ValorSaiCusto=?, " & _
                      "QuantEntConsig3=?, ValorEntConsig3=?, QuantSaiConsig3=?, ValorSaiConsig3=?, QuantEntDemo3 =?, ValorEntDemo3=?, QuantSaiDemo3=?, ValorSaiDemo3=?, QuantEntConserto3=?, ValorEntConserto3=?, QuantSaiConserto3=?, ValorSaiConserto3=?, QuantEntOutros3=?, ValorEntOutros3=?, QuantSaiOutros3=?, ValorSaiOutros3=?, QuantEntBenef3=?, ValorEntBenef3=?, QuantSaiBenef3=?, ValorSaiBenef3=?, QuantEntConsig=?, ValorEntConsig=?, QuantSaiConsig=?, ValorSaiConsig=?, QuantEntDemo=?, ValorEntDemo=?, QuantSaiDemo=?, ValorSaiDemo=?, QuantEntConserto=?, ValorEntConserto=?, QuantSaiConserto=?, ValorSaiConserto=?, QuantEntOutros=?, ValorEntOutros=?, QuantSaiOutros=?, ValorSaiOutros=?, QuantEntBenef=?, ValorEntBenef=?, QuantSaiBenef=?, ValorSaiBenef=?, QuantVendConsig3=?, ValorVendConsig3=?, " & _
                      "QuantEntRecIndl=?, ValorEntRecIndl=?, QuantSaiRecIndl=?, ValorSaiRecIndl=?"
                              
            lErro = Comando_ExecutarPos(alComando(3), sUPDATE, alComando(1), _
                                        dTotalQuantEntrada, dTotalQuantSaida, dTotalQuantCons, dTotalQuantVend, dTotalValorEntrada, dTotalValorSaida, dTotalQuantComp, dTotalValorComp, dTotalValorVend, dTotalValorCons, dTotalQuantEntCusto, dTotalValorEntCusto, dTotalQuantSaiCusto, dTotalValorSaiCusto, _
                                        dTotalQuantEntConsig3, dTotalValorEntConsig3, dTotalQuantSaiConsig3, dTotalValorSaiConsig3, dTotalQuantEntDemo3, dTotalValorEntDemo3, dTotalQuantSaiDemo3, dTotalValorSaiDemo3, dTotalQuantEntConserto3, dTotalValorEntConserto3, dTotalQuantSaiConserto3, dTotalValorSaiConserto3, dTotalQuantEntOutras3, dTotalValorEntOutras3, dTotalQuantSaiOutras3, dTotalValorSaiOutras3, dTotalQuantEntBenef3, dTotalValorEntBenef3, dTotalQuantSaiBenef3, dTotalValorSaiBenef3, dTotalQuantEntConsig, dTotalValorEntConsig, dTotalQuantSaiConsig, dTotalValorSaiConsig, dTotalQuantEntDemo, dTotalValorEntDemo, dTotalQuantSaiDemo, dTotalValorSaiDemo, dTotalQuantEntConserto, dTotalValorEntConserto, dTotalQuantSaiConserto, dTotalValorSaiConserto, dTotalQuantEntOutras, dTotalValorEntOutras, dTotalQuantSaiOutras, dTotalValorSaiOutras, dTotalQuantEntBenef, dTotalValorEntBenef, dTotalQuantSaiBenef, dTotalValorSaiBenef, dTotalQuantVendConsig3, dTotalValorVendConsig3, _
                                        dTotalQuantEntRecIndl, dTotalValorEntRecIndl, dTotalQuantSaiRecIndl, dTotalValorSaiRecIndl)
            If lErro <> AD_SQL_SUCESSO Then Error 999
            
        End If
        
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    
    Loop
    
    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then Error 999
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    SldDiaEst_Testa_Integridades2 = SUCESSO
    
    Exit Function
         
Erro_SldDiaEst_Testa_Integridades2:

    SldDiaEst_Testa_Integridades2 = Err
    
    Select Case Err
          
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149904)
     
    End Select
    
    Call Transacao_Rollback
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
End Function

Function SldDiaEstAlm_Testa_Integridades2(Optional dtDataInicial As Date, Optional dtDataFinal As Date, Optional sProdutoInicial As String, Optional sProdutoFinal As String) As Long

Dim lErro As Long
Dim alComando(1 To 3) As Long
Dim iIndice As Integer
Dim iAlmoxarifado As Integer
Dim sProduto As String
Dim dtData As Date
Dim dQuantEntrada As Double, dQuantSaida As Double, dQuantCons As Double, dQuantVend As Double, dValorEntrada As Double, dValorSaida As Double, dQuantComp As Double, dValorComp As Double, dValorVend As Double, dValorCons As Double
Dim tTiposMovimentoEstoque As typeTipoMovEst
Dim dQuantidadeMovEst As Double
Dim dCustoMovEst As Double
Dim dTotalQuantEntrada As Double, dTotalQuantSaida As Double, dTotalQuantCons As Double, dTotalQuantVend As Double, dTotalValorEntrada As Double, dTotalValorSaida As Double, dTotalQuantComp As Double, dTotalValorComp As Double, dTotalValorVend As Double, dTotalValorCons As Double
Dim iClasseUM As Integer, sSiglaUMMov As String, sSiglaUMEst As String, dFator As Double
Dim lTransacao As Long, bMudou As Boolean

On Error GoTo Erro_SldDiaEstAlm_Testa_Integridades2
    
'    lTransacao = Transacao_Abrir()
'    If lTransacao = 0 Then Error 999
    
     For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 999
    Next
    
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 999
    
    sProduto = String(STRING_PRODUTO, 0)
    tTiposMovimentoEstoque.sEntradaOuSaida = String(STRING_TIPOMOV_EST_ENTRADAOUSAIDA, 0)
    
    'Verifica se algum filtro foi preenchido (basta verificar apenas um p/ saber se todos foram passados)
    If Len(Trim(dtDataInicial)) = 0 Then 'Modificado por Leo Inicio
        
        lErro = Comando_ExecutarPos(alComando(1), "SELECT Almoxarifado, Produto, Data, QuantEntrada, QuantSaida, QuantCons, QuantVend, ValorEntrada, ValorSaida, QuantComp, ValorComp, ValorVend, ValorCons FROM SldDiaEstAlm ORDER BY Almoxarifado, Produto", 0, iAlmoxarifado, sProduto, dtData, dQuantEntrada, dQuantSaida, dQuantCons, dQuantVend, dValorEntrada, dValorSaida, dQuantComp, dValorComp, dValorVend, dValorCons)
        If lErro <> AD_SQL_SUCESSO Then Error 999

    Else
    
        lErro = Comando_ExecutarPos(alComando(1), "SELECT Almoxarifado, Produto, Data, QuantEntrada, QuantSaida, QuantCons, QuantVend, ValorEntrada, ValorSaida, QuantComp, ValorComp, ValorVend, ValorCons FROM SldDiaEstAlm WHERE Produto >= ? AND Produto <= ? AND Data >= ? AND Data <= ? ORDER BY Almoxarifado, Produto", _
        0, iAlmoxarifado, sProduto, dtData, dQuantEntrada, dQuantSaida, dQuantCons, dQuantVend, dValorEntrada, dValorSaida, dQuantComp, dValorComp, dValorVend, dValorCons, sProdutoInicial, sProdutoFinal, dtDataInicial, dtDataFinal)
        If lErro <> AD_SQL_SUCESSO Then Error 999
    
    End If
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    
    Do While lErro = SUCESSO
        
        bMudou = False
        
        dTotalQuantEntrada = 0
        dTotalQuantSaida = 0
        dTotalQuantCons = 0
        dTotalQuantVend = 0
        dTotalValorEntrada = 0
        dTotalValorSaida = 0
        dTotalQuantComp = 0
        dTotalValorComp = 0
        dTotalValorVend = 0
        dTotalValorCons = 0
        
        sSiglaUMEst = String(STRING_PRODUTO_SIGLAUMESTOQUE, 0)
        sSiglaUMMov = String(STRING_PRODUTO_SIGLAUMESTOQUE, 0)

        'Correção 13/03- Shirley
        lErro = Comando_Executar(alComando(2), "SELECT MovimentoEstoque.Quantidade, MovimentoEstoque.Custo, TiposMovimentoEstoque.EntradaOuSaida, TiposMovimentoEstoque.AtualizaConsumo, TiposMovimentoEstoque.AtualizaVenda, TiposMovimentoEstoque.AtualizaCompra, Produtos.ClasseUM, Produtos.SiglaUMEstoque,MovimentoEstoque.SiglaUM   FROM MovimentoEstoque, TiposMovimentoEstoque, Produtos  WHERE MovimentoEstoque.TipoMov = TiposMovimentoEstoque.Codigo AND MovimentoEstoque.Almoxarifado = ? AND MovimentoEstoque.Produto = ? AND MovimentoEstoque.Data = ? AND MovimentoEstoque.Produto = Produtos.Codigo AND NOT(MovimentoEstoque.TipoNumIntDocOrigem = 4 AND MovimentoEstoque.NumIntDocOrigem <> 0) AND MovimentoEstoque.NumIntDoc NOT IN (SELECT Numintdocorigem FROM MovimentoEstoque WHERE TipoNumIntDocOrigem = 4 AND MovimentoEstoque.NumIntDocOrigem <> 0) AND TiposMovimentoEstoque.AtualizaSoLote = 0", _
        dQuantidadeMovEst, dCustoMovEst, tTiposMovimentoEstoque.sEntradaOuSaida, tTiposMovimentoEstoque.iAtualizaConsumo, tTiposMovimentoEstoque.iAtualizaVenda, tTiposMovimentoEstoque.iAtualizaCompra, iClasseUM, sSiglaUMEst, sSiglaUMMov, iAlmoxarifado, sProduto, dtData)
        If lErro <> AD_SQL_SUCESSO Then Error 999
        
        lErro = Comando_BuscarPrimeiro(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
        
        Do While lErro = SUCESSO
        
            lErro = CF("UM_Conversao", iClasseUM, sSiglaUMMov, sSiglaUMEst, dFator)
            If lErro <> SUCESSO Then Error 999
        
            dQuantidadeMovEst = dQuantidadeMovEst * dFator
            
            If tTiposMovimentoEstoque.sEntradaOuSaida = TIPOMOV_EST_ENTRADA Then
                dTotalQuantEntrada = dTotalQuantEntrada + dQuantidadeMovEst
                dTotalValorEntrada = dTotalValorEntrada + dCustoMovEst
            ElseIf tTiposMovimentoEstoque.sEntradaOuSaida = TIPOMOV_EST_SAIDA Then
                dTotalQuantSaida = dTotalQuantSaida + dQuantidadeMovEst
                dTotalValorSaida = dTotalValorSaida + dCustoMovEst
            End If
            
            If tTiposMovimentoEstoque.iAtualizaConsumo = TIPOMOV_EST_ADICIONACONSUMO Then
                dTotalQuantCons = dTotalQuantCons + dQuantidadeMovEst
                dTotalValorCons = dTotalValorCons + dCustoMovEst
            ElseIf tTiposMovimentoEstoque.iAtualizaConsumo = TIPOMOV_EST_SUBTRAICONSUMO Then
                dTotalQuantCons = dTotalQuantCons - dQuantidadeMovEst
                dTotalValorCons = dTotalValorCons - dCustoMovEst
            End If
            
            If tTiposMovimentoEstoque.iAtualizaVenda = TIPOMOV_EST_ADICIONAVENDA Then
                dTotalQuantVend = dTotalQuantVend + dQuantidadeMovEst
                dTotalValorVend = dTotalValorVend + dCustoMovEst
            ElseIf tTiposMovimentoEstoque.iAtualizaVenda = TIPOMOV_EST_SUBTRAIVENDA Then
                dTotalQuantVend = dTotalQuantVend - dQuantidadeMovEst
                dTotalValorVend = dTotalValorVend - dCustoMovEst
            End If
            
            If tTiposMovimentoEstoque.iAtualizaCompra = TIPOMOV_EST_ADICIONACOMPRA Then
                dTotalQuantComp = dTotalQuantComp + dQuantidadeMovEst
                dTotalValorComp = dTotalValorComp + dCustoMovEst
            ElseIf tTiposMovimentoEstoque.iAtualizaCompra = TIPOMOV_EST_SUBTRAICOMPRA Then
                dTotalQuantComp = dTotalQuantComp - dQuantidadeMovEst
                dTotalValorComp = dTotalValorComp - dCustoMovEst
            End If
            
            lErro = Comando_BuscarProximo(alComando(2))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
            
        Loop
        
        'Teste a Ser Feito
        If Abs(dTotalQuantEntrada - dQuantEntrada) >= 0.01 Then
            Print #1, "SldDiaEstAlm - Quantidade Entrada"
            Print #1, "Produto = " & sProduto & " Almoxarifado = " & iAlmoxarifado & " Data = " & dtData
            Print #1, "Quantidade SldDiaEstAlm = " & dQuantEntrada & " Quantidade MovEst = " & dTotalQuantEntrada
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorEntrada - dValorEntrada) >= 0.01 Then
            Print #1, "SldDiaEstAlm - Valor Entrada"
            Print #1, "Produto = " & sProduto & " Almoxarifado = " & iAlmoxarifado & " Data = " & dtData
            Print #1, "Valor SldDiaEstAlm= " & dValorEntrada & " Valor MovEst = " & dTotalValorEntrada
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantSaida - dQuantSaida) >= 0.01 Then
            Print #1, "SldDiaEstAlm - Quantidade Saida"
            Print #1, "Produto = " & sProduto & " Almoxarifado = " & iAlmoxarifado & " Data = " & dtData
            Print #1, "Quantidade SldDiaEstAlm= " & dQuantSaida & " Quantidade MovEst = " & dTotalQuantSaida
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorSaida - dValorSaida) >= 0.01 Then
            Print #1, "SldDiaEstAlm - Valor Saida"
            Print #1, "Produto = " & sProduto & " Almoxarifado = " & iAlmoxarifado & " Data = " & dtData
            Print #1, "Valor SldDiaEstAlm= " & dValorSaida & " Valor MovEst = " & dTotalValorSaida
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantCons - dQuantCons) >= 0.01 Then
            Print #1, "SldDiaEstAlm - Quantidade Consumida"
            Print #1, "Produto = " & sProduto & " Almoxarifado = " & iAlmoxarifado & " Data = " & dtData
            Print #1, "Quantidade SldDiaEstAlm= " & dQuantCons & " Quantidade MovEst = " & dTotalQuantCons
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorCons - dValorCons) >= 0.01 Then
            Print #1, "SldDiaEstAlm - Valor Consumido"
            Print #1, "Produto = " & sProduto & " Almoxarifado = " & iAlmoxarifado & " Data = " & dtData
            Print #1, "Valor SldDiaEstAlm= " & dValorCons & " Valor MovEst = " & dTotalValorCons
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantVend - dQuantVend) >= 0.01 Then
            Print #1, "SldDiaEstAlm - Quantidade Venda"
            Print #1, "Produto = " & sProduto & " Almoxarifado = " & iAlmoxarifado & " Data = " & dtData
            Print #1, "Quantidade SldDiaEstAlm= " & dQuantVend & " Quantidade MovEst = " & dTotalQuantVend
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorVend - dValorVend) >= 0.01 Then
            Print #1, "SldDiaEstAlm - Valor Venda"
            Print #1, "Produto = " & sProduto & " Almoxarifado = " & iAlmoxarifado & " Data = " & dtData
            Print #1, "Valor SldDiaEstAlm= " & dValorVend & " Valor MovEst = " & dTotalValorVend
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalQuantComp - dQuantComp) >= 0.01 Then
            Print #1, "SldDiaEstAlm - Quantidade Compra"
            Print #1, "Produto = " & sProduto & " Almoxarifado = " & iAlmoxarifado & " Data = " & dtData
            Print #1, "Quantidade SldDiaEstAlm= " & dQuantComp & " Quantidade MovEst = " & dTotalQuantComp
            Print #1, "--------------------------------------------------------------------------"
            bMudou = True
        End If
        
        'Teste a Ser Feito
        If Abs(dTotalValorComp - dValorComp) >= 0.01 Then
            Print #1, "SldDiaEstAlm - Valor Compra"
            Print #1, "Produto = " & sProduto & " Almoxarifado = " & iAlmoxarifado & " Data = " & dtData
            Print #1, "Valor SldDiaEstAlm= " & dValorComp & " Valor MovEst = " & dTotalValorComp
            Print #1, "--------------------------------------------------------------------------"
        End If
        
        If bMudou = True Then
        
            lErro = Comando_ExecutarPos(alComando(3), "UPDATE SldDiaEstAlm SET QuantEntrada=?, QuantSaida=?, QuantCons=?, QuantVend=?, ValorEntrada=?, ValorSaida=?, QuantComp=?, ValorComp=?, ValorVend=?, ValorCons=?", alComando(1), _
                dTotalQuantEntrada, dTotalQuantSaida, dTotalQuantCons, dTotalQuantVend, dTotalValorEntrada, dTotalValorSaida, dTotalQuantComp, dTotalValorComp, dTotalValorVend, dTotalValorCons)
            If lErro <> AD_SQL_SUCESSO Then Error 999
        
        End If
        
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    
    Loop
    
    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then Error 999
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    SldDiaEstAlm_Testa_Integridades2 = SUCESSO
    
    Exit Function
         
Erro_SldDiaEstAlm_Testa_Integridades2:

    SldDiaEstAlm_Testa_Integridades2 = Err
    
    Select Case Err
          
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149905)
     
    End Select
    
    Call Transacao_Rollback
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function
    
End Function

Function NotaFiscal_Testa_Integridades() As Long
'Função comentada por Leo 20/02/02

'Dim lErro As Long
'Dim alComando(1 To 6) As Long
'Dim iIndice As Integer
'
'On Error GoTo Erro_NotaFiscal_Testa_Integridades
'
'    For iIndice = LBound(alComando) To UBound(alComando)
'        alComando(iIndice) = Comando_Abrir()
'        If alComando(iIndice) = 0 Then Error 999
'    Next
'
'    '???? Sugestao para proxima versao
'    'Testar Integridade com:
'    '1 - TitulosPag
'    '2 - TitulosRec
'    '3 - CreditoPagForn
'    '4 - DebRecCliente
'    '5 - NFPag (CP)
'
'    For iIndice = LBound(alComando) To UBound(alComando)
'        Call Comando_Fechar(alComando(iIndice))
'    Next
'
'    NotaFiscal_Testa_Integridades = SUCESSO
'
'    Exit Function
'
'Erro_NotaFiscal_Testa_Integridades:
'
'    NotaFiscal_Testa_Integridades = Err
'
'    Select Case Err
'
'        Case Else
'            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149906)
'
'    End Select
'
'    For iIndice = LBound(alComando) To UBound(alComando)
'        Call Comando_Fechar(alComando(iIndice))
'    Next
'
End Function

Function SldMesEst_Testa_Integridades(Optional dtDataInicial2 As Date, Optional dtDataFinal2 As Date, Optional sProdutoInicial As String, Optional sProdutoFinal As String) As Long
'Testa a integridade e, se necessário, corrige a tabela de SldMesEST.

Dim lErro As Long
Dim alComando(1 To 3) As Long
Dim iIndice As Integer
Dim iFilialEmpresa As Integer
Dim sProduto As String
Dim iAno As Integer
Dim tTiposMovimentoEstoque As typeTipoMovEst
Dim dQuantidadeMovEst As Double
Dim dCustoMovEst As Double
Dim tSldMesEst As typeSldMesEst
Dim sSQL As String
Dim dtDataInicial As Date
Dim dtDataFinal As Date
Dim iMes As Integer
Dim dTotalQuantEntrada As Double, dTotalQuantSaida As Double, dTotalQuantCons As Double, dTotalQuantVend As Double, dTotalValorEntrada As Double, dTotalValorSaida As Double, dTotalQuantComp As Double, dTotalValorComp As Double, dTotalValorVend As Double, dTotalValorCons As Double
Dim dSaldoQuantCusto As Double, dSaldoValorCusto As Double
Dim iClasseUM As Integer, sSiglaUMMov As String, sSiglaUMEst As String, dFator As Double
Dim lTransacao As Long, bMudou As Boolean
Dim dTotalQuantVendConsig3 As Double, dTotalValorVendConsig3 As Double
Dim iMesAux, iAnoAux As Integer
Dim bPassou As Boolean
         
On Error GoTo Erro_SldMesEst_Testa_Integridades
    
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 999
    
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 999
    Next
    
    sProduto = String(STRING_PRODUTO, 0)
    tTiposMovimentoEstoque.sEntradaOuSaida = String(STRING_TIPOMOV_EST_ENTRADAOUSAIDA, 0)
    tTiposMovimentoEstoque.sEntradaSaidaCMP = String(STRING_TIPOMOV_EST_ENTRADAOUSAIDA, 0)
            
    sSQL = "SELECT FilialEmpresa, Ano, Produto"
    
    For iIndice = 1 To 12
        
        sSQL = sSQL & ", QuantEnt" & iIndice
        sSQL = sSQL & ", ValorEnt" & iIndice
        sSQL = sSQL & ", QuantSai" & iIndice
        sSQL = sSQL & ", ValorSai" & iIndice
        sSQL = sSQL & ", QuantCons" & iIndice
        sSQL = sSQL & ", ValorCons" & iIndice
        sSQL = sSQL & ", QuantVend" & iIndice
        sSQL = sSQL & ", ValorVend" & iIndice
        sSQL = sSQL & ", QuantComp" & iIndice
        sSQL = sSQL & ", ValorComp" & iIndice
        sSQL = sSQL & ", SaldoQuantCusto" & iIndice
        sSQL = sSQL & ", SaldoValorCusto" & iIndice
        sSQL = sSQL & ", QuantVendConsig3" & iIndice
        sSQL = sSQL & ", ValorVendConsig3" & iIndice
        
    Next
    
    'Se não houverem parâmetros recebidos
    If Len(Trim(dtDataInicial2)) = 0 Then 'modificado por Leo Inicio
    
        sSQL = sSQL & " FROM SldMesEst ORDER BY Produto "
        
        lErro = Comando_ExecutarPos(alComando(1), sSQL, 0, iFilialEmpresa, iAno, sProduto, _
                tSldMesEst.adQuantEnt(1), tSldMesEst.adValorEnt(1), tSldMesEst.adQuantSai(1), tSldMesEst.adValorSai(1), tSldMesEst.adQuantCons(1), tSldMesEst.adValorCons(1), tSldMesEst.adQuantVend(1), tSldMesEst.adValorVend(1), tSldMesEst.adQuantComp(1), tSldMesEst.adValorComp(1), tSldMesEst.adSaldoQuantCusto(1), tSldMesEst.adSaldoValorCusto(1), tSldMesEst.adQuantVendConsig3(1), tSldMesEst.adValorVendConsig3(1), _
                tSldMesEst.adQuantEnt(2), tSldMesEst.adValorEnt(2), tSldMesEst.adQuantSai(2), tSldMesEst.adValorSai(2), tSldMesEst.adQuantCons(2), tSldMesEst.adValorCons(2), tSldMesEst.adQuantVend(2), tSldMesEst.adValorVend(2), tSldMesEst.adQuantComp(2), tSldMesEst.adValorComp(2), tSldMesEst.adSaldoQuantCusto(2), tSldMesEst.adSaldoValorCusto(2), tSldMesEst.adQuantVendConsig3(2), tSldMesEst.adValorVendConsig3(2), _
                tSldMesEst.adQuantEnt(3), tSldMesEst.adValorEnt(3), tSldMesEst.adQuantSai(3), tSldMesEst.adValorSai(3), tSldMesEst.adQuantCons(3), tSldMesEst.adValorCons(3), tSldMesEst.adQuantVend(3), tSldMesEst.adValorVend(3), tSldMesEst.adQuantComp(3), tSldMesEst.adValorComp(3), tSldMesEst.adSaldoQuantCusto(3), tSldMesEst.adSaldoValorCusto(3), tSldMesEst.adQuantVendConsig3(3), tSldMesEst.adValorVendConsig3(3), _
                tSldMesEst.adQuantEnt(4), tSldMesEst.adValorEnt(4), tSldMesEst.adQuantSai(4), tSldMesEst.adValorSai(4), tSldMesEst.adQuantCons(4), tSldMesEst.adValorCons(4), tSldMesEst.adQuantVend(4), tSldMesEst.adValorVend(4), tSldMesEst.adQuantComp(4), tSldMesEst.adValorComp(4), tSldMesEst.adSaldoQuantCusto(4), tSldMesEst.adSaldoValorCusto(4), tSldMesEst.adQuantVendConsig3(4), tSldMesEst.adValorVendConsig3(4), _
                tSldMesEst.adQuantEnt(5), tSldMesEst.adValorEnt(5), tSldMesEst.adQuantSai(5), tSldMesEst.adValorSai(5), tSldMesEst.adQuantCons(5), tSldMesEst.adValorCons(5), tSldMesEst.adQuantVend(5), tSldMesEst.adValorVend(5), tSldMesEst.adQuantComp(5), tSldMesEst.adValorComp(5), tSldMesEst.adSaldoQuantCusto(5), tSldMesEst.adSaldoValorCusto(5), tSldMesEst.adQuantVendConsig3(5), tSldMesEst.adValorVendConsig3(5), _
                tSldMesEst.adQuantEnt(6), tSldMesEst.adValorEnt(6), tSldMesEst.adQuantSai(6), tSldMesEst.adValorSai(6), tSldMesEst.adQuantCons(6), tSldMesEst.adValorCons(6), tSldMesEst.adQuantVend(6), tSldMesEst.adValorVend(6), tSldMesEst.adQuantComp(6), tSldMesEst.adValorComp(6), tSldMesEst.adSaldoQuantCusto(6), tSldMesEst.adSaldoValorCusto(6), tSldMesEst.adQuantVendConsig3(6), tSldMesEst.adValorVendConsig3(6), _
                tSldMesEst.adQuantEnt(7), tSldMesEst.adValorEnt(7), tSldMesEst.adQuantSai(7), tSldMesEst.adValorSai(7), tSldMesEst.adQuantCons(7), tSldMesEst.adValorCons(7), tSldMesEst.adQuantVend(7), tSldMesEst.adValorVend(7), tSldMesEst.adQuantComp(7), tSldMesEst.adValorComp(7), tSldMesEst.adSaldoQuantCusto(7), tSldMesEst.adSaldoValorCusto(7), tSldMesEst.adQuantVendConsig3(7), tSldMesEst.adValorVendConsig3(7), _
                tSldMesEst.adQuantEnt(8), tSldMesEst.adValorEnt(8), tSldMesEst.adQuantSai(8), tSldMesEst.adValorSai(8), tSldMesEst.adQuantCons(8), tSldMesEst.adValorCons(8), tSldMesEst.adQuantVend(8), tSldMesEst.adValorVend(8), tSldMesEst.adQuantComp(8), tSldMesEst.adValorComp(8), tSldMesEst.adSaldoQuantCusto(8), tSldMesEst.adSaldoValorCusto(8), tSldMesEst.adQuantVendConsig3(8), tSldMesEst.adValorVendConsig3(8), _
                tSldMesEst.adQuantEnt(9), tSldMesEst.adValorEnt(9), tSldMesEst.adQuantSai(9), tSldMesEst.adValorSai(9), tSldMesEst.adQuantCons(9), tSldMesEst.adValorCons(9), tSldMesEst.adQuantVend(9), tSldMesEst.adValorVend(9), tSldMesEst.adQuantComp(9), tSldMesEst.adValorComp(9), tSldMesEst.adSaldoQuantCusto(9), tSldMesEst.adSaldoValorCusto(9), tSldMesEst.adQuantVendConsig3(9), tSldMesEst.adValorVendConsig3(9), _
                tSldMesEst.adQuantEnt(10), tSldMesEst.adValorEnt(10), tSldMesEst.adQuantSai(10), tSldMesEst.adValorSai(10), tSldMesEst.adQuantCons(10), tSldMesEst.adValorCons(10), tSldMesEst.adQuantVend(10), tSldMesEst.adValorVend(10), tSldMesEst.adQuantComp(10), tSldMesEst.adValorComp(10), tSldMesEst.adSaldoQuantCusto(10), tSldMesEst.adSaldoValorCusto(10), tSldMesEst.adQuantVendConsig3(10), tSldMesEst.adValorVendConsig3(10), _
                tSldMesEst.adQuantEnt(11), tSldMesEst.adValorEnt(11), tSldMesEst.adQuantSai(11), tSldMesEst.adValorSai(11), tSldMesEst.adQuantCons(11), tSldMesEst.adValorCons(11), tSldMesEst.adQuantVend(11), tSldMesEst.adValorVend(11), tSldMesEst.adQuantComp(11), tSldMesEst.adValorComp(11), tSldMesEst.adSaldoQuantCusto(11), tSldMesEst.adSaldoValorCusto(11), tSldMesEst.adQuantVendConsig3(11), tSldMesEst.adValorVendConsig3(11), _
                tSldMesEst.adQuantEnt(12), tSldMesEst.adValorEnt(12), tSldMesEst.adQuantSai(12), tSldMesEst.adValorSai(12), tSldMesEst.adQuantCons(12), tSldMesEst.adValorCons(12), tSldMesEst.adQuantVend(12), tSldMesEst.adValorVend(12), tSldMesEst.adQuantComp(12), tSldMesEst.adValorComp(12), tSldMesEst.adSaldoQuantCusto(12), tSldMesEst.adSaldoValorCusto(12), tSldMesEst.adQuantVendConsig3(12), tSldMesEst.adValorVendConsig3(12))
        If lErro <> AD_SQL_SUCESSO Then Error 999

    Else
    
        sSQL = sSQL & " FROM SldMesEst WHERE Produto >= ? AND Produto <= ? ORDER BY Produto "
        
        lErro = Comando_ExecutarPos(alComando(1), sSQL, 0, iFilialEmpresa, iAno, sProduto, _
                tSldMesEst.adQuantEnt(1), tSldMesEst.adValorEnt(1), tSldMesEst.adQuantSai(1), tSldMesEst.adValorSai(1), tSldMesEst.adQuantCons(1), tSldMesEst.adValorCons(1), tSldMesEst.adQuantVend(1), tSldMesEst.adValorVend(1), tSldMesEst.adQuantComp(1), tSldMesEst.adValorComp(1), tSldMesEst.adSaldoQuantCusto(1), tSldMesEst.adSaldoValorCusto(1), tSldMesEst.adQuantVendConsig3(1), tSldMesEst.adValorVendConsig3(1), _
                tSldMesEst.adQuantEnt(2), tSldMesEst.adValorEnt(2), tSldMesEst.adQuantSai(2), tSldMesEst.adValorSai(2), tSldMesEst.adQuantCons(2), tSldMesEst.adValorCons(2), tSldMesEst.adQuantVend(2), tSldMesEst.adValorVend(2), tSldMesEst.adQuantComp(2), tSldMesEst.adValorComp(2), tSldMesEst.adSaldoQuantCusto(2), tSldMesEst.adSaldoValorCusto(2), tSldMesEst.adQuantVendConsig3(2), tSldMesEst.adValorVendConsig3(2), _
                tSldMesEst.adQuantEnt(3), tSldMesEst.adValorEnt(3), tSldMesEst.adQuantSai(3), tSldMesEst.adValorSai(3), tSldMesEst.adQuantCons(3), tSldMesEst.adValorCons(3), tSldMesEst.adQuantVend(3), tSldMesEst.adValorVend(3), tSldMesEst.adQuantComp(3), tSldMesEst.adValorComp(3), tSldMesEst.adSaldoQuantCusto(3), tSldMesEst.adSaldoValorCusto(3), tSldMesEst.adQuantVendConsig3(3), tSldMesEst.adValorVendConsig3(3), _
                tSldMesEst.adQuantEnt(4), tSldMesEst.adValorEnt(4), tSldMesEst.adQuantSai(4), tSldMesEst.adValorSai(4), tSldMesEst.adQuantCons(4), tSldMesEst.adValorCons(4), tSldMesEst.adQuantVend(4), tSldMesEst.adValorVend(4), tSldMesEst.adQuantComp(4), tSldMesEst.adValorComp(4), tSldMesEst.adSaldoQuantCusto(4), tSldMesEst.adSaldoValorCusto(4), tSldMesEst.adQuantVendConsig3(4), tSldMesEst.adValorVendConsig3(4), _
                tSldMesEst.adQuantEnt(5), tSldMesEst.adValorEnt(5), tSldMesEst.adQuantSai(5), tSldMesEst.adValorSai(5), tSldMesEst.adQuantCons(5), tSldMesEst.adValorCons(5), tSldMesEst.adQuantVend(5), tSldMesEst.adValorVend(5), tSldMesEst.adQuantComp(5), tSldMesEst.adValorComp(5), tSldMesEst.adSaldoQuantCusto(5), tSldMesEst.adSaldoValorCusto(5), tSldMesEst.adQuantVendConsig3(5), tSldMesEst.adValorVendConsig3(5), _
                tSldMesEst.adQuantEnt(6), tSldMesEst.adValorEnt(6), tSldMesEst.adQuantSai(6), tSldMesEst.adValorSai(6), tSldMesEst.adQuantCons(6), tSldMesEst.adValorCons(6), tSldMesEst.adQuantVend(6), tSldMesEst.adValorVend(6), tSldMesEst.adQuantComp(6), tSldMesEst.adValorComp(6), tSldMesEst.adSaldoQuantCusto(6), tSldMesEst.adSaldoValorCusto(6), tSldMesEst.adQuantVendConsig3(6), tSldMesEst.adValorVendConsig3(6), _
                tSldMesEst.adQuantEnt(7), tSldMesEst.adValorEnt(7), tSldMesEst.adQuantSai(7), tSldMesEst.adValorSai(7), tSldMesEst.adQuantCons(7), tSldMesEst.adValorCons(7), tSldMesEst.adQuantVend(7), tSldMesEst.adValorVend(7), tSldMesEst.adQuantComp(7), tSldMesEst.adValorComp(7), tSldMesEst.adSaldoQuantCusto(7), tSldMesEst.adSaldoValorCusto(7), tSldMesEst.adQuantVendConsig3(7), tSldMesEst.adValorVendConsig3(7), _
                tSldMesEst.adQuantEnt(8), tSldMesEst.adValorEnt(8), tSldMesEst.adQuantSai(8), tSldMesEst.adValorSai(8), tSldMesEst.adQuantCons(8), tSldMesEst.adValorCons(8), tSldMesEst.adQuantVend(8), tSldMesEst.adValorVend(8), tSldMesEst.adQuantComp(8), tSldMesEst.adValorComp(8), tSldMesEst.adSaldoQuantCusto(8), tSldMesEst.adSaldoValorCusto(8), tSldMesEst.adQuantVendConsig3(8), tSldMesEst.adValorVendConsig3(8), _
                tSldMesEst.adQuantEnt(9), tSldMesEst.adValorEnt(9), tSldMesEst.adQuantSai(9), tSldMesEst.adValorSai(9), tSldMesEst.adQuantCons(9), tSldMesEst.adValorCons(9), tSldMesEst.adQuantVend(9), tSldMesEst.adValorVend(9), tSldMesEst.adQuantComp(9), tSldMesEst.adValorComp(9), tSldMesEst.adSaldoQuantCusto(9), tSldMesEst.adSaldoValorCusto(9), tSldMesEst.adQuantVendConsig3(9), tSldMesEst.adValorVendConsig3(9), _
                tSldMesEst.adQuantEnt(10), tSldMesEst.adValorEnt(10), tSldMesEst.adQuantSai(10), tSldMesEst.adValorSai(10), tSldMesEst.adQuantCons(10), tSldMesEst.adValorCons(10), tSldMesEst.adQuantVend(10), tSldMesEst.adValorVend(10), tSldMesEst.adQuantComp(10), tSldMesEst.adValorComp(10), tSldMesEst.adSaldoQuantCusto(10), tSldMesEst.adSaldoValorCusto(10), tSldMesEst.adQuantVendConsig3(10), tSldMesEst.adValorVendConsig3(10), _
                tSldMesEst.adQuantEnt(11), tSldMesEst.adValorEnt(11), tSldMesEst.adQuantSai(11), tSldMesEst.adValorSai(11), tSldMesEst.adQuantCons(11), tSldMesEst.adValorCons(11), tSldMesEst.adQuantVend(11), tSldMesEst.adValorVend(11), tSldMesEst.adQuantComp(11), tSldMesEst.adValorComp(11), tSldMesEst.adSaldoQuantCusto(11), tSldMesEst.adSaldoValorCusto(11), tSldMesEst.adQuantVendConsig3(11), tSldMesEst.adValorVendConsig3(11), _
                tSldMesEst.adQuantEnt(12), tSldMesEst.adValorEnt(12), tSldMesEst.adQuantSai(12), tSldMesEst.adValorSai(12), tSldMesEst.adQuantCons(12), tSldMesEst.adValorCons(12), tSldMesEst.adQuantVend(12), tSldMesEst.adValorVend(12), tSldMesEst.adQuantComp(12), tSldMesEst.adValorComp(12), tSldMesEst.adSaldoQuantCusto(12), tSldMesEst.adSaldoValorCusto(12), tSldMesEst.adQuantVendConsig3(12), tSldMesEst.adValorVendConsig3(12), _
                sProdutoInicial, sProdutoFinal)
        If lErro <> AD_SQL_SUCESSO Then Error 999
        
        iMesAux = Month(dtDataInicial2)
        iAnoAux = Year(dtDataInicial2)
        
        dtDataInicial2 = StrParaDate("01/" & iMesAux & "/" & iAnoAux)
                                  
        iMesAux = Month(dtDataFinal2)
        iAnoAux = Year(dtDataFinal2)
                                                                    
        If iMesAux <> 12 Then
            dtDataFinal2 = CDate("01/" & (iMesAux + 1) & "/" & iAnoAux) - 1
        Else
            dtDataFinal2 = "31/" & iMesAux & "/" & iAnoAux
        End If
        
    End If 'modificado por Leo Final
        
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    
    Do While lErro = SUCESSO
            
        For iMes = 1 To 12
                                  
            If iMes <> 12 Then
                dtDataInicial = CDate("01/" & iMes & "/" & iAno)
                dtDataFinal = CDate("01/" & (iMes + 1) & "/" & iAno) - 1
            Else
                dtDataInicial = "01/" & 12 & "/" & iAno
                dtDataFinal = "31/" & 12 & "/" & iAno
            End If
    
            'Verifica se algum filtro foi preenchido (basta verificar apenas um p/ saber se todos foram passados)
            If Len(Trim(dtDataInicial2)) = 0 Then 'Modificado por Leo Inicio
            
                'Verifica se as datas final e inicial estão dentro do período recebido como parâmetro
                If dtDataInicial < dtDataInicial2 And dtDataFinal > dtDataFinal2 Then bPassou = True
                            
            End If
            
            'Se o período estiver de acordo
            If bPassou = False Then
        
                sSiglaUMEst = String(STRING_PRODUTO_SIGLAUMESTOQUE, 0)
                sSiglaUMMov = String(STRING_PRODUTO_SIGLAUMESTOQUE, 0)
                tTiposMovimentoEstoque.sEntradaOuSaida = String(STRING_TIPOMOV_EST_ENTRADAOUSAIDA, 0)
                tTiposMovimentoEstoque.sEntradaSaidaCMP = String(STRING_TIPOMOV_EST_ENTRADAOUSAIDA, 0)
        
                'Correção 13/03- Shirley
                lErro = Comando_Executar(alComando(2), "SELECT  TiposMovimentoEstoque.AtualizaVendaConsig3, TiposMovimentoEstoque.AtualizaSaldoCusto, MovimentoEstoque.Quantidade, MovimentoEstoque.Custo, TiposMovimentoEstoque.EntradaOuSaida,TiposMovimentoEstoque.EntradaSaidaCMP, " & _
                    "TiposMovimentoEstoque.AtualizaConsumo, TiposMovimentoEstoque.AtualizaVenda, TiposMovimentoEstoque.AtualizaCompra, Produtos.ClasseUM, Produtos.SiglaUMEstoque,MovimentoEstoque.SiglaUM FROM MovimentoEstoque, TiposMovimentoEstoque, Produtos WHERE MovimentoEstoque.TipoMov = TiposMovimentoEstoque.Codigo AND MovimentoEstoque.FilialEmpresa = ? AND MovimentoEstoque.Produto = ? AND MovimentoEstoque.Data >= ? AND MovimentoEstoque.Data <= ?  AND MovimentoEstoque.Produto = Produtos.Codigo AND NOT(MovimentoEstoque.TipoNumIntDocOrigem = 4 AND MovimentoEstoque.NumIntDocOrigem <> 0) AND MovimentoEstoque.NumIntDoc NOT IN (SELECT Numintdocorigem FROM MovimentoEstoque WHERE TipoNumIntDocOrigem = 4 AND MovimentoEstoque.NumIntDocOrigem <> 0) AND TiposMovimentoEstoque.AtualizaSoLote = 0", _
                    tTiposMovimentoEstoque.iAtualizaVendaConsig3, tTiposMovimentoEstoque.iAtualizaSaldoCusto, dQuantidadeMovEst, dCustoMovEst, tTiposMovimentoEstoque.sEntradaOuSaida, tTiposMovimentoEstoque.sEntradaSaidaCMP, tTiposMovimentoEstoque.iAtualizaConsumo, tTiposMovimentoEstoque.iAtualizaVenda, tTiposMovimentoEstoque.iAtualizaCompra, iClasseUM, sSiglaUMEst, sSiglaUMMov, iFilialEmpresa, sProduto, dtDataInicial, dtDataFinal)
                If lErro <> AD_SQL_SUCESSO Then Error 999
            
                lErro = Comando_BuscarPrimeiro(alComando(2))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
            
                Do While lErro = SUCESSO
                
                    lErro = CF("UM_Conversao", iClasseUM, sSiglaUMMov, sSiglaUMEst, dFator)
                    If lErro <> SUCESSO Then Error 999
                
                    dQuantidadeMovEst = dQuantidadeMovEst * dFator
                
                    If (tTiposMovimentoEstoque.sEntradaOuSaida = TIPOMOV_EST_ENTRADA Or tTiposMovimentoEstoque.iCodigo = MOV_EST_AJUSTE_CUSTO_STD_NOSSO) And tTiposMovimentoEstoque.iCodigo <> MOV_EST_MAT_NOSSO_PARA_BENEF_ENTRADA And tTiposMovimentoEstoque.sEntradaSaidaCMP = tTiposMovimentoEstoque.sEntradaOuSaida Then
                        dTotalQuantEntrada = dTotalQuantEntrada + dQuantidadeMovEst
                        dTotalValorEntrada = dTotalValorEntrada + dCustoMovEst
                    ElseIf tTiposMovimentoEstoque.sEntradaOuSaida = TIPOMOV_EST_SAIDA And tTiposMovimentoEstoque.iCodigo <> MOV_EST_MAT_NOSSO_PARA_BENEF_SAIDA And tTiposMovimentoEstoque.sEntradaSaidaCMP = tTiposMovimentoEstoque.sEntradaOuSaida Then
                        dTotalQuantSaida = dTotalQuantSaida + dQuantidadeMovEst
                        dTotalValorSaida = dTotalValorSaida + dCustoMovEst
                    End If
                
                    If tTiposMovimentoEstoque.iAtualizaConsumo = TIPOMOV_EST_ADICIONACONSUMO Then
                        dTotalQuantCons = dTotalQuantCons + dQuantidadeMovEst
                        dTotalValorCons = dTotalValorCons + dCustoMovEst
                    ElseIf tTiposMovimentoEstoque.iAtualizaConsumo = TIPOMOV_EST_SUBTRAICONSUMO Then
                        dTotalQuantCons = dTotalQuantCons - dQuantidadeMovEst
                        dTotalValorCons = dTotalValorCons - dCustoMovEst
                    End If
                    
                    If tTiposMovimentoEstoque.iAtualizaVenda = TIPOMOV_EST_ADICIONAVENDA Then
                        dTotalQuantVend = dTotalQuantVend + dQuantidadeMovEst
                        dTotalValorVend = dTotalValorVend + dCustoMovEst
                    ElseIf tTiposMovimentoEstoque.iAtualizaVenda = TIPOMOV_EST_SUBTRAIVENDA Then
                        dTotalQuantVend = dTotalQuantVend - dQuantidadeMovEst
                        dTotalValorVend = dTotalValorVend - dCustoMovEst
                    End If
                    
                    If tTiposMovimentoEstoque.iAtualizaCompra = TIPOMOV_EST_ADICIONACOMPRA Then
                        dTotalQuantComp = dTotalQuantComp + dQuantidadeMovEst
                        dTotalValorComp = dTotalValorComp + dCustoMovEst
                    ElseIf tTiposMovimentoEstoque.iAtualizaCompra = TIPOMOV_EST_SUBTRAICOMPRA Then
                        dTotalQuantComp = dTotalQuantComp - dQuantidadeMovEst
                        dTotalValorComp = dTotalValorComp - dCustoMovEst
                    End If
                    
                    'Daniel
                    If tTiposMovimentoEstoque.sEntradaOuSaida = TIPOMOV_EST_ENTRADA Or tTiposMovimentoEstoque.iCodigo = MOV_EST_AJUSTE_CUSTO_STD_NOSSO Then
                        If tTiposMovimentoEstoque.iAtualizaSaldoCusto = TIPOMOV_EST_ATUALIZASALDOCUSTOADICIONA Then
                            dSaldoQuantCusto = dSaldoQuantCusto + dQuantidadeMovEst
                            dSaldoValorCusto = dSaldoValorCusto + dCustoMovEst
                        ElseIf tTiposMovimentoEstoque.iAtualizaSaldoCusto = TIPOMOV_EST_ATUALIZASALDOCUSTOSUBTRAI Then
                            dSaldoQuantCusto = dSaldoQuantCusto - dQuantidadeMovEst
                            dSaldoValorCusto = dSaldoValorCusto - dCustoMovEst
                        End If
                    End If
                
                    If tTiposMovimentoEstoque.sEntradaOuSaida = TIPOMOV_EST_SAIDA Then
                        If tTiposMovimentoEstoque.iAtualizaSaldoCusto = TIPOMOV_EST_ATUALIZASALDOCUSTOADICIONA Then
                            dSaldoQuantCusto = dSaldoQuantCusto - dQuantidadeMovEst
                            dSaldoValorCusto = dSaldoValorCusto - dCustoMovEst
                        ElseIf tTiposMovimentoEstoque.iAtualizaSaldoCusto = TIPOMOV_EST_ATUALIZASALDOCUSTOSUBTRAI Then
                            dSaldoQuantCusto = dSaldoQuantCusto + dQuantidadeMovEst
                            dSaldoValorCusto = dSaldoValorCusto + dCustoMovEst
                        End If
                    End If
                
                    If tTiposMovimentoEstoque.iAtualizaVendaConsig3 = TIPOMOV_EST_ADICIONAVENDACONSIG3 Then
                        dTotalQuantVendConsig3 = dTotalQuantVendConsig3 + dQuantidadeMovEst
                        dTotalValorVendConsig3 = dTotalValorVendConsig3 + dCustoMovEst
                    ElseIf tTiposMovimentoEstoque.iAtualizaSaldoCusto = TIPOMOV_EST_SUBTRAIVENDACONSIG3 Then
                        dTotalQuantVendConsig3 = dTotalQuantVendConsig3 - dQuantidadeMovEst
                        dTotalValorVendConsig3 = dTotalValorVendConsig3 - dCustoMovEst
                    End If
                    
                    lErro = Comando_BuscarProximo(alComando(2))
                    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
                    
                Loop
                
                bMudou = False
                
                'Teste a Ser Feito
                If Abs(dTotalQuantEntrada - tSldMesEst.adQuantEnt(iMes)) >= 0.01 Then
                    Print #1, "SldMesEst - Quantidade Entrada"
                    Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                    Print #1, "Quantidade SldMesEst= " & tSldMesEst.adQuantEnt(iMes) & " Quantidade MovEst = " & dTotalQuantEntrada
                    Print #1, "--------------------------------------------------------------------------"
                               
                    bMudou = True
                               
                End If
                'Teste a Ser Feito
                If Abs(dTotalValorEntrada - tSldMesEst.adValorEnt(iMes)) >= 0.01 Then
                    Print #1, "SldMesEst - Valor Entrada"
                    Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                    Print #1, "Valor SldMesEst= " & tSldMesEst.adValorEnt(iMes) & " Valor MovEst = " & dTotalValorEntrada
                    Print #1, "--------------------------------------------------------------------------"
                    
                    bMudou = True
                    
                End If
                'Teste a Ser Feito
                If Abs(dTotalQuantSaida - tSldMesEst.adQuantSai(iMes)) >= 0.01 Then
                    Print #1, "SldMesEst - Quantidade Saida"
                    Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                    Print #1, "Quantidade SldMesEst= " & tSldMesEst.adQuantSai(iMes) & " Quantidade MovEst = " & dTotalQuantSaida
                    Print #1, "--------------------------------------------------------------------------"
                
                    'Trecho inserido por Leo em 18/02/02
                    bMudou = True
                
                End If
                'Teste a Ser Feito
                If Abs(dTotalValorSaida - tSldMesEst.adValorSai(iMes)) >= 0.01 Then
                    Print #1, "SldMesEst - Valor Saida"
                    Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                    Print #1, "Valor SldMesEst= " & tSldMesEst.adValorSai(iMes) & " Valor MovEst = " & dTotalValorSaida
                    Print #1, "--------------------------------------------------------------------------"
                
                    'Trecho inserido por Leo em 18/02/02
                    bMudou = True
                                
                End If
                'Teste a Ser Feito
                If Abs(dTotalQuantCons - tSldMesEst.adQuantCons(iMes)) >= 0.01 Then
                    Print #1, "SldMesEst - Quantidade Consumida"
                    Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                    Print #1, "Quantidade SldMesEst= " & tSldMesEst.adQuantCons(iMes) & " Quantidade MovEst = " & dTotalQuantCons
                    Print #1, "--------------------------------------------------------------------------"
                
                    'Trecho inserido por Leo em 18/02/02
                    bMudou = True
                
                End If
                'Teste a Ser Feito
                If Abs(dTotalValorCons - tSldMesEst.adValorCons(iMes)) >= 0.01 Then
                    Print #1, "SldMesEst - Valor Consumido"
                    Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                    Print #1, "Valor SldMesEst= " & tSldMesEst.adValorCons(iMes) & " Valor MovEst = " & dTotalValorCons
                    Print #1, "--------------------------------------------------------------------------"
                
                    'Trecho inserido por Leo em 18/02/02
                    bMudou = True
                
                End If
                'Teste a Ser Feito
                If Abs(dTotalQuantVend - tSldMesEst.adQuantVend(iMes)) >= 0.01 Then
                    Print #1, "SldMesEst - Quantidade Venda"
                    Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                    Print #1, "Quantidade SldMesEst= " & tSldMesEst.adQuantVend(iMes) & " Quantidade MovEst = " & dTotalQuantVend
                    Print #1, "--------------------------------------------------------------------------"
                
                    'Trecho inserido por Leo em 18/02/02
                    bMudou = True
                    
                End If
                'Teste a Ser Feito
                If Abs(dTotalValorVend - tSldMesEst.adValorVend(iMes)) >= 0.01 Then
                    Print #1, "SldMesEst - Valor Venda"
                    Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                    Print #1, "Valor SldMesEst= " & tSldMesEst.adValorVend(iMes) & " Valor MovEst = " & dTotalValorVend
                    Print #1, "--------------------------------------------------------------------------"
                
                    'Trecho inserido por Leo em 18/02/02
                    bMudou = True
                    
                End If
                'Teste a Ser Feito
                If Abs(dTotalQuantComp - tSldMesEst.adQuantComp(iMes)) >= 0.01 Then
                    Print #1, "SldMesEst - Quantidade Compra"
                    Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                    Print #1, "Quantidade SldMesEst= " & tSldMesEst.adQuantComp(iMes) & " Quantidade MovEst = " & dTotalQuantComp
                    Print #1, "--------------------------------------------------------------------------"
                
                    'Trecho inserido por Leo em 18/02/02
                    bMudou = True
                               
                End If
                'Teste a Ser Feito
                If Abs(dTotalValorComp - tSldMesEst.adValorComp(iMes)) >= 0.01 Then
                    Print #1, "SldMesEst - Valor Compra"
                    Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                    Print #1, "Valor SldMesEst= " & tSldMesEst.adValorComp(iMes) & " Valor MovEst = " & dTotalValorComp
                    Print #1, "--------------------------------------------------------------------------"
                
                    'Trecho inserido por Leo em 18/02/02
                    bMudou = True
                                
                End If
                
                'Teste a Ser Feito
                If Abs(dSaldoQuantCusto - tSldMesEst.adSaldoQuantCusto(iMes)) >= 0.01 Then
                    Print #1, "SldMesEst - Quantidade Custo"
                    Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                    Print #1, "Quantidade SldMesEst= " & tSldMesEst.adSaldoQuantCusto(iMes) & " Quantidade MovEst = " & dSaldoQuantCusto
                    Print #1, "--------------------------------------------------------------------------"
                               
                    bMudou = True
                               
                End If
                'Teste a Ser Feito
                If Abs(dSaldoValorCusto - tSldMesEst.adSaldoValorCusto(iMes)) >= 0.01 Then
                    Print #1, "SldMesEst - Valor Custo"
                    Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                    Print #1, "Valor SldMesEst= " & tSldMesEst.adSaldoValorCusto(iMes) & " Valor MovEst = " & dSaldoValorCusto
                    Print #1, "--------------------------------------------------------------------------"
                    
                    bMudou = True
                    
                End If
                '*/
                
                'Teste a Ser Feito
                If Abs(dTotalQuantVendConsig3 - tSldMesEst.adQuantVendConsig3(iMes)) >= 0.01 Then
                    Print #1, "SldMesEst - Quantidade Venda Consig3. Entrada"
                    Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                    Print #1, "Quantidade SldMesEst= " & tSldMesEst.adQuantVendConsig3(iMes) & " Quantidade MovEst = " & dTotalQuantVendConsig3
                    Print #1, "--------------------------------------------------------------------------"
                               
                    bMudou = True
                               
                End If
                'Teste a Ser Feito
                If Abs(dTotalValorVendConsig3 - tSldMesEst.adValorVendConsig3(iMes)) >= 0.01 Then
                    Print #1, "SldMesEst - Valor Venda Consig3. Entrada"
                    Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                    Print #1, "Valor SldMesEst= " & tSldMesEst.adValorVendConsig3(iMes) & " Valor MovEst = " & dTotalValorVendConsig3
                    Print #1, "--------------------------------------------------------------------------"
                    
                    bMudou = True
                    
                End If
                
                'Trecho inserido por Leo em 18/02/02
                If bMudou = True Then
                    
                    sSQL = "UPDATE SldMesEst SET QuantEnt" & iMes & " = ?, ValorEnt" & iMes & " = ?, QuantSai" & iMes & " = ?, ValorSai" & iMes & " = ?, QuantCons" & iMes & " = ?, ValorCons" & iMes & " = ?, QuantVend" & iMes & " = ?, ValorVend" & iMes & " = ?, QuantComp" & iMes & " = ?, ValorComp" & iMes & " = ?, SaldoQuantCusto" & iMes & " = ?, SaldoValorCusto" & iMes & " = ?, QuantVendConsig3" & iMes & " =?, ValorVendConsig3" & iMes & " =?"
                    
                    lErro = Comando_ExecutarPos(alComando(3), sSQL, _
                    alComando(1), dTotalQuantEntrada, dTotalValorEntrada, dTotalQuantSaida, dTotalValorSaida, dTotalQuantCons, dTotalValorCons, dTotalQuantVend, dTotalValorVend, dTotalQuantComp, dTotalValorComp, dSaldoQuantCusto, dSaldoValorCusto, dTotalQuantVendConsig3, dTotalValorVendConsig3)
                    If lErro <> SUCESSO Then Error 999
                                
                End If
                         
                dTotalQuantEntrada = 0
                dTotalQuantSaida = 0
                dTotalQuantCons = 0
                dTotalQuantVend = 0
                dTotalValorEntrada = 0
                dTotalValorSaida = 0
                dTotalQuantComp = 0
                dTotalValorComp = 0
                dTotalValorVend = 0
                dTotalValorCons = 0
                dSaldoQuantCusto = 0
                dSaldoValorCusto = 0
                dTotalQuantVendConsig3 = 0
                dTotalValorVendConsig3 = 0
        
            End If
        
        bPassou = False
        
        Next
        
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    Loop
    
    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then Error 999
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    SldMesEst_Testa_Integridades = SUCESSO
    
    Exit Function
         
Erro_SldMesEst_Testa_Integridades:

    SldMesEst_Testa_Integridades = Err
    
    Select Case Err
          
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149907)
     
    End Select
    
    Call Transacao_Rollback
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
End Function

Function SldMesEstAlm_Testa_Integridades(Optional dtDataInicial2 As Date, Optional dtDataFinal2 As Date, Optional sProdutoInicial As String, Optional sProdutoFinal As String) As Long

Dim lErro As Long
Dim alComando(1 To 3) As Long
Dim iIndice As Integer
Dim iAlmoxarifado As Integer
Dim sProduto As String
Dim iAno As Integer
Dim tTiposMovimentoEstoque As typeTipoMovEst
Dim dQuantidadeMovEst As Double
Dim dCustoMovEst As Double
Dim tSldMesEst As typeSldMesEst
Dim sSQL As String
Dim dtDataInicial As Date
Dim dtDataFinal As Date
Dim adValorCons(1 To 12) As Double
Dim iMes As Integer
Dim dTotalQuantEntrada As Double, dTotalQuantSaida As Double, dTotalQuantCons As Double, dTotalQuantVend As Double, dTotalValorEntrada As Double, dTotalValorSaida As Double, dTotalQuantComp As Double, dTotalValorComp As Double, dTotalValorVend As Double, dTotalValorCons As Double
Dim iClasseUM As Integer, sSiglaUMMov As String, sSiglaUMEst As String, dFator As Double
Dim lTransacao As Long, bMudou As Boolean
Dim iMesAux, iAnoAux As Integer
Dim bPassou As Boolean

On Error GoTo Erro_SldMesEstAlm_Testa_Integridades
    
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 999
    
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 999
    Next
    
    sProduto = String(STRING_PRODUTO, 0)
    tTiposMovimentoEstoque.sEntradaOuSaida = String(STRING_TIPOMOV_EST_ENTRADAOUSAIDA, 0)
            
    sSQL = "SELECT Almoxarifado, Ano, Produto"
    
    For iIndice = 1 To 12
        
        sSQL = sSQL & ", QuantEnt" & iIndice
        sSQL = sSQL & ", ValorEnt" & iIndice
        sSQL = sSQL & ", QuantSai" & iIndice
        sSQL = sSQL & ", ValorSai" & iIndice
        sSQL = sSQL & ", QuantCons" & iIndice
        sSQL = sSQL & ", ValorCons" & iIndice
        sSQL = sSQL & ", QuantVend" & iIndice
        sSQL = sSQL & ", ValorVend" & iIndice
        sSQL = sSQL & ", QuantComp" & iIndice
        sSQL = sSQL & ", ValorComp" & iIndice
        
    Next
    
    'Se não houverem parâmetros recebidos
    If Len(Trim(dtDataInicial2)) = 0 Then 'modificado por Leo Inicio
        
        sSQL = sSQL & " FROM SldMesEstAlm ORDER BY Produto"
        
        lErro = Comando_ExecutarPos(alComando(1), sSQL, 0, iAlmoxarifado, iAno, sProduto, tSldMesEst.adQuantEnt(1), tSldMesEst.adValorEnt(1), tSldMesEst.adQuantSai(1), tSldMesEst.adValorSai(1), tSldMesEst.adQuantCons(1), adValorCons(1), tSldMesEst.adQuantVend(1), tSldMesEst.adValorVend(1), tSldMesEst.adQuantComp(1), tSldMesEst.adValorComp(1), tSldMesEst.adQuantEnt(2), tSldMesEst.adValorEnt(2), tSldMesEst.adQuantSai(2), tSldMesEst.adValorSai(2), tSldMesEst.adQuantCons(2), adValorCons(2), tSldMesEst.adQuantVend(2), tSldMesEst.adValorVend(2), tSldMesEst.adQuantComp(2), tSldMesEst.adValorComp(2), tSldMesEst.adQuantEnt(3), tSldMesEst.adValorEnt(3), tSldMesEst.adQuantSai(3), tSldMesEst.adValorSai(3), tSldMesEst.adQuantCons(3), adValorCons(3), tSldMesEst.adQuantVend(3), tSldMesEst.adValorVend(3), tSldMesEst.adQuantComp(3), tSldMesEst.adValorComp(3), _
        tSldMesEst.adQuantEnt(4), tSldMesEst.adValorEnt(4), tSldMesEst.adQuantSai(4), tSldMesEst.adValorSai(4), tSldMesEst.adQuantCons(4), adValorCons(4), tSldMesEst.adQuantVend(4), tSldMesEst.adValorVend(4), tSldMesEst.adQuantComp(4), tSldMesEst.adValorComp(4), tSldMesEst.adQuantEnt(5), tSldMesEst.adValorEnt(5), tSldMesEst.adQuantSai(5), tSldMesEst.adValorSai(5), tSldMesEst.adQuantCons(5), adValorCons(5), tSldMesEst.adQuantVend(5), tSldMesEst.adValorVend(5), tSldMesEst.adQuantComp(5), tSldMesEst.adValorComp(5), tSldMesEst.adQuantEnt(6), tSldMesEst.adValorEnt(6), tSldMesEst.adQuantSai(6), tSldMesEst.adValorSai(6), tSldMesEst.adQuantCons(6), adValorCons(6), tSldMesEst.adQuantVend(6), tSldMesEst.adValorVend(6), tSldMesEst.adQuantComp(6), tSldMesEst.adValorComp(6), _
        tSldMesEst.adQuantEnt(7), tSldMesEst.adValorEnt(7), tSldMesEst.adQuantSai(7), tSldMesEst.adValorSai(7), tSldMesEst.adQuantCons(7), adValorCons(7), tSldMesEst.adQuantVend(7), tSldMesEst.adValorVend(7), tSldMesEst.adQuantComp(7), tSldMesEst.adValorComp(7), tSldMesEst.adQuantEnt(8), tSldMesEst.adValorEnt(8), tSldMesEst.adQuantSai(8), tSldMesEst.adValorSai(8), tSldMesEst.adQuantCons(8), adValorCons(8), tSldMesEst.adQuantVend(8), tSldMesEst.adValorVend(8), tSldMesEst.adQuantComp(8), tSldMesEst.adValorComp(8), tSldMesEst.adQuantEnt(9), tSldMesEst.adValorEnt(9), tSldMesEst.adQuantSai(9), tSldMesEst.adValorSai(9), tSldMesEst.adQuantCons(9), adValorCons(9), tSldMesEst.adQuantVend(9), tSldMesEst.adValorVend(9), tSldMesEst.adQuantComp(9), tSldMesEst.adValorComp(9), _
        tSldMesEst.adQuantEnt(10), tSldMesEst.adValorEnt(10), tSldMesEst.adQuantSai(10), tSldMesEst.adValorSai(10), tSldMesEst.adQuantCons(10), adValorCons(10), tSldMesEst.adQuantVend(10), tSldMesEst.adValorVend(10), tSldMesEst.adQuantComp(10), tSldMesEst.adValorComp(10), tSldMesEst.adQuantEnt(11), tSldMesEst.adValorEnt(11), tSldMesEst.adQuantSai(11), tSldMesEst.adValorSai(11), tSldMesEst.adQuantCons(11), adValorCons(11), tSldMesEst.adQuantVend(11), tSldMesEst.adValorVend(11), tSldMesEst.adQuantComp(11), tSldMesEst.adValorComp(11), tSldMesEst.adQuantEnt(12), tSldMesEst.adValorEnt(12), tSldMesEst.adQuantSai(12), tSldMesEst.adValorSai(12), tSldMesEst.adQuantCons(12), adValorCons(12), tSldMesEst.adQuantVend(12), tSldMesEst.adValorVend(12), tSldMesEst.adQuantComp(12), tSldMesEst.adValorComp(12))
        If lErro <> AD_SQL_SUCESSO Then Error 999

    Else
    
        sSQL = sSQL & " FROM SldMesEstAlm WHERE Produto >= ? AND Produto <= ? ORDER BY Produto"
        
        lErro = Comando_ExecutarPos(alComando(1), sSQL, 0, iAlmoxarifado, iAno, sProduto, tSldMesEst.adQuantEnt(1), tSldMesEst.adValorEnt(1), tSldMesEst.adQuantSai(1), tSldMesEst.adValorSai(1), tSldMesEst.adQuantCons(1), adValorCons(1), tSldMesEst.adQuantVend(1), tSldMesEst.adValorVend(1), tSldMesEst.adQuantComp(1), tSldMesEst.adValorComp(1), tSldMesEst.adQuantEnt(2), tSldMesEst.adValorEnt(2), tSldMesEst.adQuantSai(2), tSldMesEst.adValorSai(2), tSldMesEst.adQuantCons(2), adValorCons(2), tSldMesEst.adQuantVend(2), tSldMesEst.adValorVend(2), tSldMesEst.adQuantComp(2), tSldMesEst.adValorComp(2), tSldMesEst.adQuantEnt(3), tSldMesEst.adValorEnt(3), tSldMesEst.adQuantSai(3), tSldMesEst.adValorSai(3), tSldMesEst.adQuantCons(3), adValorCons(3), tSldMesEst.adQuantVend(3), tSldMesEst.adValorVend(3), tSldMesEst.adQuantComp(3), tSldMesEst.adValorComp(3), _
        tSldMesEst.adQuantEnt(4), tSldMesEst.adValorEnt(4), tSldMesEst.adQuantSai(4), tSldMesEst.adValorSai(4), tSldMesEst.adQuantCons(4), adValorCons(4), tSldMesEst.adQuantVend(4), tSldMesEst.adValorVend(4), tSldMesEst.adQuantComp(4), tSldMesEst.adValorComp(4), tSldMesEst.adQuantEnt(5), tSldMesEst.adValorEnt(5), tSldMesEst.adQuantSai(5), tSldMesEst.adValorSai(5), tSldMesEst.adQuantCons(5), adValorCons(5), tSldMesEst.adQuantVend(5), tSldMesEst.adValorVend(5), tSldMesEst.adQuantComp(5), tSldMesEst.adValorComp(5), tSldMesEst.adQuantEnt(6), tSldMesEst.adValorEnt(6), tSldMesEst.adQuantSai(6), tSldMesEst.adValorSai(6), tSldMesEst.adQuantCons(6), adValorCons(6), tSldMesEst.adQuantVend(6), tSldMesEst.adValorVend(6), tSldMesEst.adQuantComp(6), tSldMesEst.adValorComp(6), _
        tSldMesEst.adQuantEnt(7), tSldMesEst.adValorEnt(7), tSldMesEst.adQuantSai(7), tSldMesEst.adValorSai(7), tSldMesEst.adQuantCons(7), adValorCons(7), tSldMesEst.adQuantVend(7), tSldMesEst.adValorVend(7), tSldMesEst.adQuantComp(7), tSldMesEst.adValorComp(7), tSldMesEst.adQuantEnt(8), tSldMesEst.adValorEnt(8), tSldMesEst.adQuantSai(8), tSldMesEst.adValorSai(8), tSldMesEst.adQuantCons(8), adValorCons(8), tSldMesEst.adQuantVend(8), tSldMesEst.adValorVend(8), tSldMesEst.adQuantComp(8), tSldMesEst.adValorComp(8), tSldMesEst.adQuantEnt(9), tSldMesEst.adValorEnt(9), tSldMesEst.adQuantSai(9), tSldMesEst.adValorSai(9), tSldMesEst.adQuantCons(9), adValorCons(9), tSldMesEst.adQuantVend(9), tSldMesEst.adValorVend(9), tSldMesEst.adQuantComp(9), tSldMesEst.adValorComp(9), _
        tSldMesEst.adQuantEnt(10), tSldMesEst.adValorEnt(10), tSldMesEst.adQuantSai(10), tSldMesEst.adValorSai(10), tSldMesEst.adQuantCons(10), adValorCons(10), tSldMesEst.adQuantVend(10), tSldMesEst.adValorVend(10), tSldMesEst.adQuantComp(10), tSldMesEst.adValorComp(10), tSldMesEst.adQuantEnt(11), tSldMesEst.adValorEnt(11), tSldMesEst.adQuantSai(11), tSldMesEst.adValorSai(11), tSldMesEst.adQuantCons(11), adValorCons(11), tSldMesEst.adQuantVend(11), tSldMesEst.adValorVend(11), tSldMesEst.adQuantComp(11), tSldMesEst.adValorComp(11), tSldMesEst.adQuantEnt(12), tSldMesEst.adValorEnt(12), tSldMesEst.adQuantSai(12), tSldMesEst.adValorSai(12), tSldMesEst.adQuantCons(12), adValorCons(12), tSldMesEst.adQuantVend(12), tSldMesEst.adValorVend(12), tSldMesEst.adQuantComp(12), tSldMesEst.adValorComp(12), _
        sProdutoInicial, sProdutoFinal)
        If lErro <> AD_SQL_SUCESSO Then Error 999
        
        iMesAux = Month(dtDataInicial2)
        iAnoAux = Year(dtDataInicial2)
        
        dtDataInicial2 = StrParaDate("01/" & iMesAux & "/" & iAnoAux)
                                  
        iMesAux = Month(dtDataFinal2)
        iAnoAux = Year(dtDataFinal2)
                                                                    
        If iMesAux <> 12 Then
            dtDataFinal2 = CDate("01/" & (iMesAux + 1) & "/" & iAnoAux) - 1
        Else
            dtDataFinal2 = "31/" & iMesAux & "/" & iAnoAux
        End If
        
    End If
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    
    Do While lErro = SUCESSO
            
        For iMes = 1 To 12
                                  
            If iMes <> 12 Then
                dtDataInicial = CDate("01/" & iMes & "/" & iAno)
                dtDataFinal = CDate("01/" & (iMes + 1) & "/" & iAno) - 1
            Else
                dtDataInicial = "01/" & 12 & "/" & iAno
                dtDataFinal = "31/" & 12 & "/" & iAno
            End If
    
             'Verifica se algum filtro foi preenchido (basta verificar apenas um p/ saber se todos foram passados)
            If Len(Trim(dtDataInicial2)) = 0 Then 'Modificado por Leo Inicio
            
                'Verifica se as datas final e inicial estão dentro do período recebido como parâmetro
                If dtDataInicial < dtDataInicial2 And dtDataFinal > dtDataFinal2 Then bPassou = True
                            
            End If
    
            'Se o período estiver de acordo
            If bPassou = False Then
        
                sSiglaUMEst = String(STRING_PRODUTO_SIGLAUMESTOQUE, 0)
                sSiglaUMMov = String(STRING_PRODUTO_SIGLAUMESTOQUE, 0)
    
                'Correção 13/03- Shirley
                lErro = Comando_Executar(alComando(2), "SELECT MovimentoEstoque.Quantidade, MovimentoEstoque.Custo, TiposMovimentoEstoque.EntradaOuSaida, TiposMovimentoEstoque.AtualizaConsumo, TiposMovimentoEstoque.AtualizaVenda, TiposMovimentoEstoque.AtualizaCompra, Produtos.ClasseUM, Produtos.SiglaUMEstoque,MovimentoEstoque.SiglaUM FROM MovimentoEstoque, TiposMovimentoEstoque, Produtos WHERE MovimentoEstoque.TipoMov = TiposMovimentoEstoque.Codigo AND MovimentoEstoque.Almoxarifado = ? AND MovimentoEstoque.Produto = ? AND MovimentoEstoque.Data >= ? AND MovimentoEstoque.Data <= ? AND MovimentoEstoque.Produto = Produtos.Codigo AND NOT(MovimentoEstoque.TipoNumIntDocOrigem = 4 AND MovimentoEstoque.NumIntDocOrigem <> 0) AND MovimentoEstoque.NumIntDoc NOT IN (SELECT Numintdocorigem FROM MovimentoEstoque WHERE TipoNumIntDocOrigem = 4 AND MovimentoEstoque.NumIntDocOrigem <> 0) AND TiposMovimentoEstoque.AtualizaSoLote = 0", _
                dQuantidadeMovEst, dCustoMovEst, tTiposMovimentoEstoque.sEntradaOuSaida, tTiposMovimentoEstoque.iAtualizaConsumo, tTiposMovimentoEstoque.iAtualizaVenda, tTiposMovimentoEstoque.iAtualizaCompra, iClasseUM, sSiglaUMEst, sSiglaUMMov, iAlmoxarifado, sProduto, dtDataInicial, dtDataFinal)
                If lErro <> AD_SQL_SUCESSO Then Error 999
            
                lErro = Comando_BuscarPrimeiro(alComando(2))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
            
                Do While lErro = SUCESSO
                
                    lErro = CF("UM_Conversao", iClasseUM, sSiglaUMMov, sSiglaUMEst, dFator)
                    If lErro <> SUCESSO Then Error 999
                
                    dQuantidadeMovEst = dQuantidadeMovEst * dFator
                
                    If tTiposMovimentoEstoque.sEntradaOuSaida = TIPOMOV_EST_ENTRADA Then
                        dTotalQuantEntrada = dTotalQuantEntrada + dQuantidadeMovEst
                        dTotalValorEntrada = dTotalValorEntrada + dCustoMovEst
                    ElseIf tTiposMovimentoEstoque.sEntradaOuSaida = TIPOMOV_EST_SAIDA Then
                        dTotalQuantSaida = dTotalQuantSaida + dQuantidadeMovEst
                        dTotalValorSaida = dTotalValorSaida + dCustoMovEst
                    End If
                
                    If tTiposMovimentoEstoque.iAtualizaConsumo = TIPOMOV_EST_ADICIONACONSUMO Then
                        dTotalQuantCons = dTotalQuantCons + dQuantidadeMovEst
                        dTotalValorCons = dTotalValorCons + dCustoMovEst
                    ElseIf tTiposMovimentoEstoque.iAtualizaConsumo = TIPOMOV_EST_SUBTRAICONSUMO Then
                        dTotalQuantCons = dTotalQuantCons - dQuantidadeMovEst
                        dTotalValorCons = dTotalValorCons - dCustoMovEst
                    End If
                    
                    If tTiposMovimentoEstoque.iAtualizaVenda = TIPOMOV_EST_ADICIONAVENDA Then
                        dTotalQuantVend = dTotalQuantVend + dQuantidadeMovEst
                        dTotalValorVend = dTotalValorVend + dCustoMovEst
                    ElseIf tTiposMovimentoEstoque.iAtualizaVenda = TIPOMOV_EST_SUBTRAIVENDA Then
                        dTotalQuantVend = dTotalQuantVend - dQuantidadeMovEst
                        dTotalValorVend = dTotalValorVend - dCustoMovEst
                    End If
                    
                    If tTiposMovimentoEstoque.iAtualizaCompra = TIPOMOV_EST_ADICIONACOMPRA Then
                        dTotalQuantComp = dTotalQuantComp + dQuantidadeMovEst
                        dTotalValorComp = dTotalValorComp + dCustoMovEst
                    ElseIf tTiposMovimentoEstoque.iAtualizaCompra = TIPOMOV_EST_SUBTRAICOMPRA Then
                        dTotalQuantComp = dTotalQuantComp - dQuantidadeMovEst
                        dTotalValorComp = dTotalValorComp - dCustoMovEst
                    End If
                    
                    lErro = Comando_BuscarProximo(alComando(2))
                    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
                    
                Loop
                
                bMudou = False
                
                'Teste a Ser Feito
                If Abs(dTotalQuantEntrada - tSldMesEst.adQuantEnt(iMes)) >= 0.01 Then
                    Print #1, "SaldoMesEstAlm - Quantidade Entrada"
                    Print #1, "Produto = " & sProduto & " Almoxarifado = " & iAlmoxarifado & " Ano = " & iAno
                    Print #1, "Quantidade SaldoMesEstAlm= " & tSldMesEst.adQuantEnt(iMes) & " Quantidade MovEst = " & dTotalQuantEntrada
                    Print #1, "--------------------------------------------------------------------------"
                
                    'Trecho inserido por Leo em 18/02/02
                    bMudou = True
                    
                End If
                'Teste a Ser Feito
                If Abs(dTotalValorEntrada - tSldMesEst.adValorEnt(iMes)) >= 0.01 Then
                    Print #1, "SaldoMesEstAlm - Valor Entrada"
                    Print #1, "Produto = " & sProduto & " Almoxarifado = " & iAlmoxarifado & " Ano = " & iAno
                    Print #1, "Valor SaldoMesEstAlm= " & tSldMesEst.adValorEnt(iMes) & " Valor MovEst = " & dTotalValorEntrada
                    Print #1, "--------------------------------------------------------------------------"
                
                    'Trecho inserido por Leo em 18/02/02
                    bMudou = True
                    
                End If
                'Teste a Ser Feito
                If Abs(dTotalQuantSaida - tSldMesEst.adQuantSai(iMes)) >= 0.01 Then
                    Print #1, "SaldoMesEstAlm - Quantidade Saida"
                    Print #1, "Produto = " & sProduto & " Almoxarifado = " & iAlmoxarifado & " Ano = " & iAno
                    Print #1, "Quantidade SaldoMesEstAlm= " & tSldMesEst.adQuantSai(iMes) & " Quantidade MovEst = " & dTotalQuantSaida
                    Print #1, "--------------------------------------------------------------------------"
                
                    'Trecho inserido por Leo em 18/02/02
                    bMudou = True
                    
                End If
                'Teste a Ser Feito
                If Abs(dTotalValorSaida - tSldMesEst.adValorSai(iMes)) >= 0.01 Then
                    Print #1, "SaldoMesEstAlm - Valor Saida"
                    Print #1, "Produto = " & sProduto & " Almoxarifado = " & iAlmoxarifado & " Ano = " & iAno
                    Print #1, "Valor SaldoMesEstAlm= " & tSldMesEst.adValorSai(iMes) & " Valor MovEst = " & dTotalValorSaida
                    Print #1, "--------------------------------------------------------------------------"
                
                    'Trecho inserido por Leo em 18/02/02
                    bMudou = True
                    
                End If
                'Teste a Ser Feito
                If Abs(dTotalQuantCons - tSldMesEst.adQuantCons(iMes)) >= 0.01 Then
                    Print #1, "SaldoMesEstAlm - Quantidade Consumida"
                    Print #1, "Produto = " & sProduto & " Almoxarifado = " & iAlmoxarifado & " Ano = " & iAno
                    Print #1, "Quantidade SaldoMesEstAlm= " & tSldMesEst.adQuantCons(iMes) & " Quantidade MovEst = " & dTotalQuantCons
                    Print #1, "--------------------------------------------------------------------------"
                
                    'Trecho inserido por Leo em 18/02/02
                    bMudou = True
                    
                End If
                'Teste a Ser Feito
                If Abs(dTotalValorCons - adValorCons(iMes)) >= 0.01 Then
                    Print #1, "SaldoMesEstAlm - Valor Consumido"
                    Print #1, "Produto = " & sProduto & " Almoxarifado = " & iAlmoxarifado & " Ano = " & iAno
                    Print #1, "Valor SaldoMesEstAlm= " & adValorCons(iMes) & " Valor MovEst = " & dTotalValorCons
                    Print #1, "--------------------------------------------------------------------------"
                
                    'Trecho inserido por Leo em 18/02/02
                    bMudou = True
                
                End If
                'Teste a Ser Feito
                If Abs(dTotalQuantVend - tSldMesEst.adQuantVend(iMes)) >= 0.01 Then
                    Print #1, "SaldoMesEstAlm - Quantidade Venda"
                    Print #1, "Produto = " & sProduto & " Almoxarifado = " & iAlmoxarifado & " Ano = " & iAno
                    Print #1, "Quantidade SaldoMesEstAlm= " & tSldMesEst.adQuantVend(iMes) & " Quantidade MovEst = " & dTotalQuantVend
                    Print #1, "--------------------------------------------------------------------------"
                
                    'Trecho inserido por Leo em 18/02/02
                    bMudou = True
                                
                End If
                'Teste a Ser Feito
                If Abs(dTotalValorVend - tSldMesEst.adValorVend(iMes)) >= 0.01 Then
                    Print #1, "SaldoMesEstAlm - Valor Venda"
                    Print #1, "Produto = " & sProduto & " Almoxarifado = " & iAlmoxarifado & " Ano = " & iAno
                    Print #1, "Valor SaldoMesEstAlm= " & tSldMesEst.adValorVend(iMes) & " Valor MovEst = " & dTotalValorVend
                    Print #1, "--------------------------------------------------------------------------"
                
                    'Trecho inserido por Leo em 18/02/02
                    bMudou = True
                                
                End If
                'Teste a Ser Feito
                If Abs(dTotalQuantComp - tSldMesEst.adQuantComp(iMes)) >= 0.01 Then
                    Print #1, "SaldoMesEstAlm - Quantidade Compra"
                    Print #1, "Produto = " & sProduto & " Almoxarifado = " & iAlmoxarifado & " Ano = " & iAno
                    Print #1, "Quantidade SaldoMesEstAlm= " & tSldMesEst.adQuantComp(iMes) & " Quantidade MovEst = " & dTotalQuantComp
                    Print #1, "--------------------------------------------------------------------------"
                
                    'Trecho inserido por Leo em 18/02/02
                    bMudou = True
                    
                End If
                'Teste a Ser Feito
                If Abs(dTotalValorComp - tSldMesEst.adValorComp(iMes)) >= 0.01 Then
                    Print #1, "SaldoMesEstAlm - Valor Compra"
                    Print #1, "Produto = " & sProduto & " Almoxarifado = " & iAlmoxarifado & " Ano = " & iAno
                    Print #1, "Valor SaldoMesEstAlm= " & tSldMesEst.adValorComp(iMes) & " Valor MovEst = " & dTotalValorComp
                    Print #1, "--------------------------------------------------------------------------"
                
                    'Trecho inserido por Leo em 18/02/02
                    bMudou = True
                
                End If
                
                If bMudou = True Then
                    
                    sSQL = "UPDATE SldMesEstAlm SET QuantEnt" & iMes & " = ?, ValorEnt" & iMes & " = ?, QuantSai" & iMes & " = ?, ValorSai" & iMes & " = ?, QuantCons" & iMes & " = ?, ValorCons" & iMes & " = ?, QuantVend" & iMes & " = ?, ValorVend" & iMes & " = ?, QuantComp" & iMes & " = ?, ValorComp" & iMes & " = ?"
                    
                    lErro = Comando_ExecutarPos(alComando(3), sSQL, _
                    alComando(1), dTotalQuantEntrada, dTotalValorEntrada, dTotalQuantSaida, dTotalValorSaida, dTotalQuantCons, dTotalValorCons, dTotalQuantVend, dTotalValorVend, dTotalQuantComp, dTotalValorComp)
                    If lErro <> SUCESSO Then Error 999
                    
                End If
                
                dTotalQuantEntrada = 0
                dTotalQuantSaida = 0
                dTotalQuantCons = 0
                dTotalQuantVend = 0
                dTotalValorEntrada = 0
                dTotalValorSaida = 0
                dTotalQuantComp = 0
                dTotalValorComp = 0
                dTotalValorVend = 0
                dTotalValorCons = 0
            
            End If

            bPassou = False

        Next

        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999

    Loop
    
    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then Error 999
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    SldMesEstAlm_Testa_Integridades = SUCESSO
    
    Exit Function
         
Erro_SldMesEstAlm_Testa_Integridades:

    SldMesEstAlm_Testa_Integridades = Err

    Select Case Err
          
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149908)
     
    End Select
    
    Call Transacao_Rollback
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
End Function

Function Estoque_Produto_Testa_Integridade(Optional dtDataInicial As Date, Optional dtDataFinal As Date, Optional sProdutoInicial As String, Optional sProdutoFinal As String)

Dim lErro As Long
Dim alComando(1 To 6) As Long
Dim tEstoqueProduto As typeEstoqueProduto
Dim dQuantidadeTotal As Double
Dim dQuantidadePV As Double
Dim dQuantidadeReserva As Double
Dim lPedido As Long
Dim iFilialEmpresa As Integer
Dim iIndice As Integer, lTransacao As Long
Dim iClasseUM As Integer, sSiglaUMMov As String, sSiglaUMEst As String, dFator As Double, sProduto As String

On Error GoTo Erro_Estoque_Produto_Testa_Integridade
    
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 999
    
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 999
    Next
    
    tEstoqueProduto.sProduto = String(STRING_PRODUTO, 0)
    
    'Verifica se algum filtro foi preenchido (basta verificar apenas um p/ saber se todos foram passados)
    If Len(Trim(dtDataInicial)) = 0 Then 'Modificado por Leo Inicio
        
        lErro = Comando_ExecutarPos(alComando(1), "SELECT QuantReservada, Produto, Almoxarifado FROM EstoqueProduto ORDER BY Produto", 0, tEstoqueProduto.dQuantReservada, tEstoqueProduto.sProduto, tEstoqueProduto.iAlmoxarifado)
        If lErro <> AD_SQL_SUCESSO Then Error 999
        
    Else
    
        lErro = Comando_ExecutarPos(alComando(1), "SELECT QuantReservada, Produto, Almoxarifado FROM EstoqueProduto WHERE Produto >= ? AND Produto <= ? ORDER BY Produto", 0, _
        tEstoqueProduto.dQuantReservada, tEstoqueProduto.sProduto, tEstoqueProduto.iAlmoxarifado, sProdutoInicial, sProdutoFinal)
        If lErro <> AD_SQL_SUCESSO Then Error 999
    
    End If 'Modificado por Leo Final
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    
    Do While lErro = SUCESSO
        
        lErro = Comando_Executar(alComando(2), "SELECT SUM(Quantidade) FROM Reserva WHERE Produto = ? AND Almoxarifado = ? ", dQuantidadeTotal, tEstoqueProduto.sProduto, tEstoqueProduto.iAlmoxarifado)
        If lErro <> AD_SQL_SUCESSO Then Error 999
        
        lErro = Comando_BuscarPrimeiro(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
        
        'Teste a Ser Feito
        If tEstoqueProduto.dQuantReservada <> dQuantidadeTotal Then
            
            Print #1, "EstoqueProduto x Reserva"
            Print #1, "Produto = " & tEstoqueProduto.sProduto
            Print #1, "Quantidade Reserva Estoque Produto = " & tEstoqueProduto.dQuantReservada & " Quantidade reserva = " & dQuantidadeTotal
            Print #1, "--------------------------------------------------------------------------"
            
            'Incluido por leo em 18/02/02
            lErro = Comando_ExecutarPos(alComando(6), "UPDATE EstoqueProduto SET QuantReservada = ?", alComando(1), dQuantidadeTotal)
            If lErro <> SUCESSO Then Error 999
            
        End If
        
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
        
    Loop
    
    sProduto = String(STRING_PRODUTO, 0)
    sSiglaUMMov = String(STRING_UM_SIGLA, 0)
    sSiglaUMEst = String(STRING_UM_SIGLA, 0)
    
    lErro = Comando_Executar(alComando(3), "SELECT ItensPedidoDeVenda.QuantReservada, ItensPedidoDeVenda.CodPedido, ItensPedidoDeVenda.FilialEmpresa, ItensPedidoDeVenda.Produto, ItensPedidoDeVenda.UnidadeMed, Produtos.SiglaUMEstoque, Produtos.ClasseUM FROM ItensPedidoDeVenda, Produtos WHERE pRODUTOS.CODIGO = ItensPedidoDeVenda.Produto ORDER BY ItensPedidoDeVenda.CodPedido, ItensPedidoDeVenda.FilialEmpresa", dQuantidadePV, lPedido, iFilialEmpresa, sProduto, sSiglaUMMov, sSiglaUMEst, iClasseUM)
    If lErro <> AD_SQL_SUCESSO Then Error 999

    lErro = Comando_BuscarPrimeiro(alComando(3))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999

    Do While lErro = SUCESSO

        lErro = Comando_Executar(alComando(4), "SELECT SUM(Quantidade) FROM Reserva WHERE FilialEmpresa = ? AND DocOrigem = ? AND Produto = ? AND TipoDoc = 1", dQuantidadeReserva, iFilialEmpresa, lPedido, sProduto)
        If lErro <> AD_SQL_SUCESSO Then Error 999

        lErro = Comando_BuscarPrimeiro(alComando(4))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999

        lErro = CF("UM_Conversao", iClasseUM, sSiglaUMMov, sSiglaUMEst, dFator)
        If lErro <> SUCESSO Then Error 999
        
        dQuantidadePV = dQuantidadePV * dFator
        
        'Teste a Ser Feito
        If dQuantidadePV <> dQuantidadeReserva Then

            Print #1, "Pedido de Venda x Reserva"
            Print #1, "Pedido = " & lPedido & "FilialEmpresa = "; iFilialEmpresa
            Print #1, "Quantidade Reserva PV = " & dQuantidadePV & " Quantidade reserva = " & dQuantidadeReserva
            Print #1, "--------------------------------------------------------------------------"

            'Incluido por leo em 18/02/02
            lErro = Comando_Executar(alComando(5), "UPDATE ItensPedidoDeVenda SET QuantReservada = ? WHERE FilialEmpresa = ? AND CodPedido = ? AND Produto = ?", dQuantidadeReserva, iFilialEmpresa, lPedido, sProduto)
            If lErro <> SUCESSO Then Error 999
        
        End If

        lErro = Comando_BuscarProximo(alComando(3))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999

    Loop
    
    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then Error 999
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Estoque_Produto_Testa_Integridade = SUCESSO
    
    Exit Function
         
Erro_Estoque_Produto_Testa_Integridade:

    Estoque_Produto_Testa_Integridade = Err
    
    Select Case Err
          
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149909)
     
    End Select
    
    Call Transacao_Rollback
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
End Function

'=====================================================================
'=====================================================================

'Incluida por leo em 21/02/02
Private Function Processa_Bloqueio_DiasAtraso(ByVal objBloqueioPV As ClassBloqueioPV) As Long
'trata os bloqueios de crédito por dia de atraso

Dim lErro As Long
Dim objLiberacaoCredito As New ClassLiberacaoCredito

On Error GoTo Erro_Processa_Bloqueio_DiasAtraso

    objLiberacaoCredito.sCodUsuario = objBloqueioPV.sCodUsuario
    
    'verificar se o usuário tem autorizacao para liberar o bloqueio
    lErro = CF("LiberacaoCredito_Le", objLiberacaoCredito)
    If lErro <> SUCESSO And lErro <> 36968 Then gError 94331
    
    'se não foi encontrado autorização para o usuario liberar o bloqueio
    If lErro = 36968 Then gError 94332
    
    Processa_Bloqueio_DiasAtraso = SUCESSO
    
    Exit Function
    
Erro_Processa_Bloqueio_DiasAtraso:

    Processa_Bloqueio_DiasAtraso = gErr
    
    Select Case gErr

        Case 94331
        
        Case 94332
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LIBERACAODIASATRASO_INEXISTENTE", gErr, objLiberacaoCredito.sCodUsuario, objBloqueioPV.lPedidoDeVendas)
             
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149910)

    End Select

    Exit Function

End Function

'Incluida por leo em 22/02/02
Private Function PedidoDeVenda_VerificaAtraso2(objPedidoVenda As ClassPedidoDeVenda) As Long
'Verifica no BD se existe parcelasrec aberta com vctoreal <= (gdtDataHoje - gobjCRFAT.iDiasBloqueioAtraso)

Dim lErro As Long
Dim lComando As Long
Dim dtDataLimite As Date
Dim lCliente As Long

On Error GoTo Erro_PedidoDeVenda_VerificaAtraso2

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 94335
    
    'Verifica a data limite p/ atraso de uma parcela antes do bloqueio por atraso. Retorna DATA_NULA caso a empresa não use o Bloqueio por atraso.
    lErro = CF("Verifica_DataLimite_Bloqueio_Atraso", dtDataLimite)
    If lErro <> SUCESSO Then gError 94389
    
    If dtDataLimite <> DATA_NULA Then
    
        'Seleciona parcelasrec do Cliente recebido em objPedidoVenda que esteja em atraso de acordo com os dias máximos p/ atraso definido p/ Bloqueios por atraso de pagamento.
        lErro = Comando_Executar(lComando, "SELECT TitulosRec.Cliente FROM ParcelasRec, TitulosRec WHERE ParcelasRec.NumIntTitulo = TitulosRec.NumIntDoc AND ParcelasRec.Status <> ? AND ParcelasRec.Status <> ? AND ParcelasRec.DataVencimentoReal <= ? AND TitulosRec.Cliente = ?", lCliente, STATUS_EXCLUIDO, STATUS_BAIXADO, dtDataLimite, objPedidoVenda.lCliente)
        If lErro <> SUCESSO Then gError 94336
        
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 94337
        
        'se existe pelo menos uma parcela em atraso, Erro.
        If lErro = SUCESSO Then gError 94363
    
    End If
    
    Call Comando_Fechar(lComando)
    
    PedidoDeVenda_VerificaAtraso2 = SUCESSO
     
    Exit Function
    
Erro_PedidoDeVenda_VerificaAtraso2:

    PedidoDeVenda_VerificaAtraso2 = gErr
     
    Select Case gErr
          
        Case 94389
        
        Case 94335
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELASREC", gErr)
            
        Case 94336, 94337
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELASREC", gErr)
                    
        Case 94363 'Este erro deverá ser tratado na rotina chamadora
                    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149911)
     
    End Select
     
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

'Incluida por leo em 22/02/02
Private Function PedidoVenda_Inclui_BloqueioAtraso(ByVal lPedido As Long, ByVal iFilialPedido As Integer) As Long

Dim lErro As Long
Dim objPedidoVenda As New ClassPedidoDeVenda
Dim lTransacao As Long

On Error GoTo Erro_PedidoVenda_Inclui_BloqueioAtraso

    'ABre a Transacao1
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 94339 '51531

    objPedidoVenda.lCodigo = lPedido
    objPedidoVenda.iFilialEmpresa = iFilialPedido
    
    'Lê e faz o lock no Pedido de Venda passado
    lErro = CF("PedidoDeVenda_Le_ComBloqueio", objPedidoVenda)
    If lErro <> SUCESSO Then gError 94340
    
    'Insere bloqueio de Atraso no PV se tiver parcelas em atraso
    lErro = BloqueioPV_Testa_Atraso(objPedidoVenda)
    If lErro <> SUCESSO Then gError 94341

    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then gError 94342

    PedidoVenda_Inclui_BloqueioAtraso = SUCESSO

    Exit Function

Erro_PedidoVenda_Inclui_BloqueioAtraso:

    PedidoVenda_Inclui_BloqueioAtraso = gErr
    
    Select Case gErr
    
        Case 94339
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 94340, 94341
        
        Case 94342
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149912)
        
    End Select
        
    Call Transacao_Rollback
                
    Exit Function
                
End Function


'Incluida por leo em 22/02/02
Private Function BloqueioPV_Testa_Atraso(ByVal objPedidoVenda As ClassPedidoDeVenda) As Long
'Remove o bloqueio de atraso antigo se houver e se o cliente estiver em  atraso, Inclui no BD um novo bloqueio de atraso
'Chamada EM TRANSAÇÃO

Dim lErro As Long
Dim objBloqueioPV As New ClassBloqueioPV

On Error GoTo Erro_BloqueioPV_Testa_Atraso

    'Exclui os Bloqueios de Atraso não liberados ligados ao Pedido de Venda passado
    lErro = CF("BloqueiosPV_Exclui_Tipo", objPedidoVenda, BLOQUEIO_DIAS_ATRASO)
    If lErro <> SUCESSO Then gError 94343

    lErro = PedidoDeVenda_VerificaAtraso2(objPedidoVenda)
    If lErro <> SUCESSO And lErro <> 94363 Then gError 94344

    'Se existe parcela em atraso do Cliente
    If lErro <> SUCESSO Then

        objBloqueioPV.iFilialEmpresa = objPedidoVenda.iFilialEmpresa
        objBloqueioPV.lPedidoDeVendas = objPedidoVenda.lCodigo
        objBloqueioPV.iTipoDeBloqueio = BLOQUEIO_DIAS_ATRASO
        objBloqueioPV.sCodUsuario = gsUsuario
        objBloqueioPV.sResponsavel = BLOQUEIO_AUTO_RESP
        objBloqueioPV.dtData = gdtDataHoje
        objBloqueioPV.dtDataLib = DATA_NULA

        lErro = CF("BloqueiosPV_Grava1", objPedidoVenda, objBloqueioPV)
        If lErro <> SUCESSO Then gError 94345

    End If

    BloqueioPV_Testa_Atraso = SUCESSO

    Exit Function

Erro_BloqueioPV_Testa_Atraso:

    BloqueioPV_Testa_Atraso = gErr

    Select Case gErr

        Case 94343, 94344, 94345
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149913)

    End Select

    Exit Function

End Function


'Inserida por Leo em 22/02/02
Private Function PedidoDeVenda_VerificaAtraso(ByVal objPedidoVenda As ClassPedidoDeVenda) As Long
'Verifica se é necessário inserir um Bloqueio por Atraso de pagamento p/ o cliente

Dim lErro As Long
Dim iAtraso As Integer

On Error GoTo Erro_PedidoDeVenda_VerificaAtraso

    'verifica se o pedido tem bloqueio por atraso aprovado
    lErro = CF("BloqueiosPV_Aprovado_Testa", objPedidoVenda, iAtraso, BLOQUEIO_DIAS_ATRASO)
    If lErro <> SUCESSO Then gError 94355

    'se não tiver atraso
    If iAtraso <> BLOQUEIO_POR_ATRASO_LIBERADO Then
    
        'Verifica o Atrasos do cliente
        lErro = PedidoDeVenda_VerificaAtraso2(objPedidoVenda)
        If lErro <> SUCESSO And lErro <> 94363 Then gError 94356
        If lErro = 94363 Then gError 94357
        
    End If

    PedidoDeVenda_VerificaAtraso = SUCESSO

    Exit Function

Erro_PedidoDeVenda_VerificaAtraso:

    PedidoDeVenda_VerificaAtraso = gErr

    Select Case gErr

        Case 94355, 94356
        
        Case 94357 'tratado na rotina chamadora
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149914)

    End Select

    Exit Function

End Function

'Incluida por Leo em 25/02/02
Private Function Processa_NFiscal_Atraso(ByVal objNFiscal As ClassNFiscal) As Long
'verifica se tem parcelas com dias de atraso além do limite para faturar ou não a nota fiscal.

Dim lErro As Long
Dim objLiberacaoCredito As New ClassLiberacaoCredito
Dim sCodUsuario As String
Dim bNFPedido As Boolean
Dim iAtraso As Integer
Dim iTipoCli As Integer
Dim objPedidoVenda As New ClassPedidoDeVenda
Dim colParcRec As New Collection
Dim objCliente As New ClassCliente 'Inserido por Wagner

On Error GoTo Erro_Processa_NFiscal_Atraso

    'Verifica se NFiscal é oriunda de Pedido
    If objNFiscal.lNumPedidoVenda > 0 Then
        bNFPedido = True
    Else
        bNFPedido = False
    End If
    
    'Se for testa se Pedido tem crédito aprovado
    If bNFPedido Then
    
        objPedidoVenda.lCodigo = objNFiscal.lNumPedidoVenda
        objPedidoVenda.iFilialEmpresa = objNFiscal.iFilialPedido

        'verifica se o pedido tem credito aprovado
        lErro = CF("BloqueiosPV_Aprovado_Testa", objPedidoVenda, iAtraso, BLOQUEIO_DIAS_ATRASO)
        If lErro <> SUCESSO Then gError 94365 '25740

    End If
    
    'Inserido por Wagner
    '##################
    objCliente.lCodigo = objNFiscal.lCliente
    'le os dados do cliente
    lErro = CF("Cliente_Le", objCliente)
    If lErro <> SUCESSO And lErro <> 12293 Then gError 129151
    
    If objCliente.iAtivo <> CLIENTE_ATIVO Then gError 129152
    '##################
    
    'esse trecho estava dando problema de limite de credito
    'estava aparecendo a tela q nao deveria...
    'tulio160103
    If gobjCRFAT.iCreditoVerificaLimite = VERIFICAR_LIMITE_CREDITO Then
            
        'se NF não for oriunda de PV ou se crédito não está liberado
        If (Not bNFPedido) Or iAtraso <> BLOQUEIOPV_LIBERADO Then
                            
            'verifica se tem parcela em atraso que justifique um bloqueio
            lErro = CF("ParcelasRec_Atraso_Le", colParcRec, objNFiscal.lCliente)
            If lErro <> SUCESSO And lErro <> 94405 Then gError 94371
            
            'se há parcelas em atraso dentro do limite para bloqueio por atraso
            If colParcRec.Count <> 0 Then
            
                'se um usuário não autorizou o credito ==> erro
                If Len(objNFiscal.sCodUsuario) = 0 Then gError 94370 '44488
                        
                objLiberacaoCredito.sCodUsuario = objNFiscal.sCodUsuario
                        
                'verificar se o usuário tem autorizacao para o Bloqueio
                '(os usuários que possuem autorização p/ liberar bloqueios por falta de pagamento são os mesmos que podem autorizar crédito)
                lErro = CF("LiberacaoCredito_Lock", objLiberacaoCredito)
                If lErro <> SUCESSO And lErro <> 44479 Then gError 94371 '44489
                        
                'se não foi encontrado autorização para o usuario liberar credito
                If lErro = 44479 Then gError 94372 '44490
                    
            End If
            
        End If
            
    End If
            
    Processa_NFiscal_Atraso = SUCESSO
    
    Exit Function
    
Erro_Processa_NFiscal_Atraso:

    Processa_NFiscal_Atraso = gErr
    
    Select Case gErr

        Case 94363, 94364
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 94370
           lErro = Rotina_Erro(vbOKOnly, "ERRO_CLIENTE_SEM_CREDITO", gErr, objNFiscal.lCliente)

        Case 94365, 94371

        Case 94372
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LIBERACAOCREDITO_INEXISTENTE", gErr, objLiberacaoCredito.sCodUsuario)
        
        Case 129151
        
        Case 129152
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CLIENTE_INATIVO", gErr, objNFiscal.lCliente)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149915)

    End Select

    Exit Function

End Function

Function SldMesEst1_Testa_Integridades(Optional dtDataInicial2 As Date, Optional dtDataFinal2 As Date, Optional sProdutoInicial As String, Optional sProdutoFinal As String) As Long
'Testa a integridade e, se necessário, corrige a tabela de SldMesEst1.

Dim lErro As Long
Dim alComando(1 To 3) As Long
Dim iIndice As Integer
Dim iFilialEmpresa As Integer
Dim sProduto As String
Dim iAno As Integer
Dim tTiposMovimentoEstoque As typeTipoMovEst
Dim dQuantidadeMovEst As Double
Dim dCustoMovEst As Double
Dim tSldMesEst1 As typeSldMesEst1
Dim sSQL As String
Dim dtDataInicial As Date
Dim dtDataFinal As Date
Dim iMes As Integer
Dim dTotalQuantEntrada As Double, dTotalQuantSaida As Double, dTotalQuantCons As Double, dTotalQuantVend As Double, dTotalValorEntrada As Double, dTotalValorSaida As Double, dTotalQuantComp As Double, dTotalValorComp As Double, dTotalValorVend As Double, dTotalValorCons As Double
Dim dSaldoQuantCusto As Double, dSaldoValorCusto As Double
Dim iClasseUM As Integer, sSiglaUMMov As String, sSiglaUMEst As String, dFator As Double
Dim lTransacao As Long, bMudou As Boolean

Dim dTotalSaldoQuantConsig3 As Double, dTotalSaldoValorConsig3 As Double
Dim dTotalSaldoQuantDemo3 As Double, dTotalSaldoValorDemo3 As Double
Dim dTotalSaldoQuantConserto3 As Double, dTotalSaldoValorConserto3 As Double
Dim dTotalSaldoQuantOutros3 As Double, dTotalSaldoValorOutros3 As Double
Dim dTotalSaldoQuantBenef3 As Double, dTotalSaldoValorBenef3 As Double
Dim sSelecaoSQL As String
Dim iMesAux, iAnoAux As Integer
Dim bPassou As Boolean

On Error GoTo Erro_SldMesEst1_Testa_Integridades
    
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 999
    
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 999
    Next
    
    sProduto = String(STRING_PRODUTO, 0)
    tTiposMovimentoEstoque.sEntradaOuSaida = String(STRING_TIPOMOV_EST_ENTRADAOUSAIDA, 0)
            
    sSQL = "SELECT FilialEmpresa, Ano, Produto"
    
    For iIndice = 1 To 12
        
        sSQL = sSQL & ", SaldoQuantConsig3" & iIndice
        sSQL = sSQL & ", SaldoValorConsig3" & iIndice
        sSQL = sSQL & ", SaldoQuantDemo3" & iIndice
        sSQL = sSQL & ", SaldoValorDemo3" & iIndice
        sSQL = sSQL & ", SaldoQuantConserto3" & iIndice
        sSQL = sSQL & ", SaldoValorConserto3" & iIndice
        sSQL = sSQL & ", SaldoQuantOutros3" & iIndice
        sSQL = sSQL & ", SaldoValorOutros3" & iIndice
        sSQL = sSQL & ", SaldoQuantBenef3" & iIndice
        sSQL = sSQL & ", SaldoValorBenef3" & iIndice
        
    Next
    
    'Se não houverem parâmetros recebidos
    If Len(Trim(dtDataInicial2)) = 0 Then 'modificado por Leo Inicio

        sSQL = sSQL & " FROM SldMesEst1 ORDER BY Produto"
        
        With tSldMesEst1
            
            lErro = Comando_ExecutarPos(alComando(1), sSQL, 0, iFilialEmpresa, iAno, sProduto, _
                    .adSaldoQuantConsig3(1), .adSaldoValorConsig3(1), .adSaldoQuantDemo3(1), .adSaldoValorDemo3(1), .adSaldoQuantConserto3(1), .adSaldoValorConserto3(1), .adSaldoQuantOutros3(1), .adSaldoValorOutros3(1), .adSaldoQuantBenef3(1), .adSaldoValorBenef3(1), _
                    .adSaldoQuantConsig3(2), .adSaldoValorConsig3(2), .adSaldoQuantDemo3(2), .adSaldoValorDemo3(2), .adSaldoQuantConserto3(2), .adSaldoValorConserto3(2), .adSaldoQuantOutros3(2), .adSaldoValorOutros3(2), .adSaldoQuantBenef3(2), .adSaldoValorBenef3(2), _
                    .adSaldoQuantConsig3(3), .adSaldoValorConsig3(3), .adSaldoQuantDemo3(3), .adSaldoValorDemo3(3), .adSaldoQuantConserto3(3), .adSaldoValorConserto3(3), .adSaldoQuantOutros3(3), .adSaldoValorOutros3(3), .adSaldoQuantBenef3(3), .adSaldoValorBenef3(3), _
                    .adSaldoQuantConsig3(4), .adSaldoValorConsig3(4), .adSaldoQuantDemo3(4), .adSaldoValorDemo3(4), .adSaldoQuantConserto3(4), .adSaldoValorConserto3(4), .adSaldoQuantOutros3(4), .adSaldoValorOutros3(4), .adSaldoQuantBenef3(4), .adSaldoValorBenef3(4), _
                    .adSaldoQuantConsig3(5), .adSaldoValorConsig3(5), .adSaldoQuantDemo3(5), .adSaldoValorDemo3(5), .adSaldoQuantConserto3(5), .adSaldoValorConserto3(5), .adSaldoQuantOutros3(5), .adSaldoValorOutros3(5), .adSaldoQuantBenef3(5), .adSaldoValorBenef3(5), _
                    .adSaldoQuantConsig3(6), .adSaldoValorConsig3(6), .adSaldoQuantDemo3(6), .adSaldoValorDemo3(6), .adSaldoQuantConserto3(6), .adSaldoValorConserto3(6), .adSaldoQuantOutros3(6), .adSaldoValorOutros3(6), .adSaldoQuantBenef3(6), .adSaldoValorBenef3(6), _
                    .adSaldoQuantConsig3(7), .adSaldoValorConsig3(7), .adSaldoQuantDemo3(7), .adSaldoValorDemo3(7), .adSaldoQuantConserto3(7), .adSaldoValorConserto3(7), .adSaldoQuantOutros3(7), .adSaldoValorOutros3(7), .adSaldoQuantBenef3(7), .adSaldoValorBenef3(7), _
                    .adSaldoQuantConsig3(8), .adSaldoValorConsig3(8), .adSaldoQuantDemo3(8), .adSaldoValorDemo3(8), .adSaldoQuantConserto3(8), .adSaldoValorConserto3(8), .adSaldoQuantOutros3(8), .adSaldoValorOutros3(8), .adSaldoQuantBenef3(8), .adSaldoValorBenef3(8), _
                    .adSaldoQuantConsig3(9), .adSaldoValorConsig3(9), .adSaldoQuantDemo3(9), .adSaldoValorDemo3(9), .adSaldoQuantConserto3(9), .adSaldoValorConserto3(9), .adSaldoQuantOutros3(9), .adSaldoValorOutros3(9), .adSaldoQuantBenef3(9), .adSaldoValorBenef3(9), _
                    .adSaldoQuantConsig3(10), .adSaldoValorConsig3(10), .adSaldoQuantDemo3(10), .adSaldoValorDemo3(10), .adSaldoQuantConserto3(10), .adSaldoValorConserto3(10), .adSaldoQuantOutros3(10), .adSaldoValorOutros3(10), .adSaldoQuantBenef3(10), .adSaldoValorBenef3(10), _
                    .adSaldoQuantConsig3(11), .adSaldoValorConsig3(11), .adSaldoQuantDemo3(11), .adSaldoValorDemo3(11), .adSaldoQuantConserto3(11), .adSaldoValorConserto3(11), .adSaldoQuantOutros3(11), .adSaldoValorOutros3(11), .adSaldoQuantBenef3(11), .adSaldoValorBenef3(11), _
                    .adSaldoQuantConsig3(12), .adSaldoValorConsig3(12), .adSaldoQuantDemo3(12), .adSaldoValorDemo3(12), .adSaldoQuantConserto3(12), .adSaldoValorConserto3(12), .adSaldoQuantOutros3(12), .adSaldoValorOutros3(12), .adSaldoQuantBenef3(12), .adSaldoValorBenef3(12))
                    
        End With
        If lErro <> AD_SQL_SUCESSO Then Error 999

    Else
    
        sSQL = sSQL & " FROM SldMesEst1 WHERE Produto >= ? AND Produto <= ? ORDER BY Produto"
        
        With tSldMesEst1
            
            lErro = Comando_ExecutarPos(alComando(1), sSQL, 0, iFilialEmpresa, iAno, sProduto, _
                    .adSaldoQuantConsig3(1), .adSaldoValorConsig3(1), .adSaldoQuantDemo3(1), .adSaldoValorDemo3(1), .adSaldoQuantConserto3(1), .adSaldoValorConserto3(1), .adSaldoQuantOutros3(1), .adSaldoValorOutros3(1), .adSaldoQuantBenef3(1), .adSaldoValorBenef3(1), _
                    .adSaldoQuantConsig3(2), .adSaldoValorConsig3(2), .adSaldoQuantDemo3(2), .adSaldoValorDemo3(2), .adSaldoQuantConserto3(2), .adSaldoValorConserto3(2), .adSaldoQuantOutros3(2), .adSaldoValorOutros3(2), .adSaldoQuantBenef3(2), .adSaldoValorBenef3(2), _
                    .adSaldoQuantConsig3(3), .adSaldoValorConsig3(3), .adSaldoQuantDemo3(3), .adSaldoValorDemo3(3), .adSaldoQuantConserto3(3), .adSaldoValorConserto3(3), .adSaldoQuantOutros3(3), .adSaldoValorOutros3(3), .adSaldoQuantBenef3(3), .adSaldoValorBenef3(3), _
                    .adSaldoQuantConsig3(4), .adSaldoValorConsig3(4), .adSaldoQuantDemo3(4), .adSaldoValorDemo3(4), .adSaldoQuantConserto3(4), .adSaldoValorConserto3(4), .adSaldoQuantOutros3(4), .adSaldoValorOutros3(4), .adSaldoQuantBenef3(4), .adSaldoValorBenef3(4), _
                    .adSaldoQuantConsig3(5), .adSaldoValorConsig3(5), .adSaldoQuantDemo3(5), .adSaldoValorDemo3(5), .adSaldoQuantConserto3(5), .adSaldoValorConserto3(5), .adSaldoQuantOutros3(5), .adSaldoValorOutros3(5), .adSaldoQuantBenef3(5), .adSaldoValorBenef3(5), _
                    .adSaldoQuantConsig3(6), .adSaldoValorConsig3(6), .adSaldoQuantDemo3(6), .adSaldoValorDemo3(6), .adSaldoQuantConserto3(6), .adSaldoValorConserto3(6), .adSaldoQuantOutros3(6), .adSaldoValorOutros3(6), .adSaldoQuantBenef3(6), .adSaldoValorBenef3(6), _
                    .adSaldoQuantConsig3(7), .adSaldoValorConsig3(7), .adSaldoQuantDemo3(7), .adSaldoValorDemo3(7), .adSaldoQuantConserto3(7), .adSaldoValorConserto3(7), .adSaldoQuantOutros3(7), .adSaldoValorOutros3(7), .adSaldoQuantBenef3(7), .adSaldoValorBenef3(7), _
                    .adSaldoQuantConsig3(8), .adSaldoValorConsig3(8), .adSaldoQuantDemo3(8), .adSaldoValorDemo3(8), .adSaldoQuantConserto3(8), .adSaldoValorConserto3(8), .adSaldoQuantOutros3(8), .adSaldoValorOutros3(8), .adSaldoQuantBenef3(8), .adSaldoValorBenef3(8), _
                    .adSaldoQuantConsig3(9), .adSaldoValorConsig3(9), .adSaldoQuantDemo3(9), .adSaldoValorDemo3(9), .adSaldoQuantConserto3(9), .adSaldoValorConserto3(9), .adSaldoQuantOutros3(9), .adSaldoValorOutros3(9), .adSaldoQuantBenef3(9), .adSaldoValorBenef3(9), _
                    .adSaldoQuantConsig3(10), .adSaldoValorConsig3(10), .adSaldoQuantDemo3(10), .adSaldoValorDemo3(10), .adSaldoQuantConserto3(10), .adSaldoValorConserto3(10), .adSaldoQuantOutros3(10), .adSaldoValorOutros3(10), .adSaldoQuantBenef3(10), .adSaldoValorBenef3(10), _
                    .adSaldoQuantConsig3(11), .adSaldoValorConsig3(11), .adSaldoQuantDemo3(11), .adSaldoValorDemo3(11), .adSaldoQuantConserto3(11), .adSaldoValorConserto3(11), .adSaldoQuantOutros3(11), .adSaldoValorOutros3(11), .adSaldoQuantBenef3(11), .adSaldoValorBenef3(11), _
                    .adSaldoQuantConsig3(12), .adSaldoValorConsig3(12), .adSaldoQuantDemo3(12), .adSaldoValorDemo3(12), .adSaldoQuantConserto3(12), .adSaldoValorConserto3(12), .adSaldoQuantOutros3(12), .adSaldoValorOutros3(12), .adSaldoQuantBenef3(12), .adSaldoValorBenef3(12), _
                    sProdutoInicial, sProdutoFinal)
            If lErro <> AD_SQL_SUCESSO Then Error 999
        
        End With
        
        iMesAux = Month(dtDataInicial2)
        iAnoAux = Year(dtDataInicial2)
        
        dtDataInicial2 = StrParaDate("01/" & iMesAux & "/" & iAnoAux)
                                  
        iMesAux = Month(dtDataFinal2)
        iAnoAux = Year(dtDataFinal2)
                                                                    
        If iMesAux <> 12 Then
            dtDataFinal2 = CDate("01/" & (iMesAux + 1) & "/" & iAnoAux) - 1
        Else
            dtDataFinal2 = "31/" & iMesAux & "/" & iAnoAux
        End If
                    
    End If 'modificado por Leo Final
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    
    Do While lErro = SUCESSO
            
        For iMes = 1 To 12
                                  
            If iMes <> 12 Then
                dtDataInicial = CDate("01/" & iMes & "/" & iAno)
                dtDataFinal = CDate("01/" & (iMes + 1) & "/" & iAno) - 1
            Else
                dtDataInicial = "01/" & 12 & "/" & iAno
                dtDataFinal = "31/" & 12 & "/" & iAno
            End If
    
            'Verifica se algum filtro foi preenchido (basta verificar apenas um p/ saber se todos foram passados)
            If Len(Trim(dtDataInicial2)) = 0 Then 'Modificado por Leo Inicio
            
                'Verifica se as datas final e inicial estão dentro do período recebido como parâmetro
                If dtDataInicial < dtDataInicial2 And dtDataFinal > dtDataFinal2 Then bPassou = True
                            
            End If
    
            'Se o período estiver de acordo
            If bPassou = False Then
        
                sSiglaUMEst = String(STRING_PRODUTO_SIGLAUMESTOQUE, 0)
                sSiglaUMMov = String(STRING_PRODUTO_SIGLAUMESTOQUE, 0)
        
                sSelecaoSQL = "SELECT TiposMovimentoEstoque.AtualizaConsig, TiposMovimentoEstoque.AtualizaDemo, " & _
                              "TiposMovimentoEstoque.AtualizaConserto, TiposMovimentoEstoque.AtualizaOutras, " & _
                              "TiposMovimentoEstoque.AtualizaBenef, MovimentoEstoque.Quantidade, MovimentoEstoque.Custo, " & _
                              "Produtos.ClasseUM, Produtos.SiglaUMEstoque, MovimentoEstoque.SiglaUM " & _
                              "FROM MovimentoEstoque, TiposMovimentoEstoque, Produtos WHERE TiposMovimentoEstoque.ProdutodeTerc =? AND " & _
                              "MovimentoEstoque.TipoMov = TiposMovimentoEstoque.Codigo AND MovimentoEstoque.FilialEmpresa = ? AND MovimentoEstoque.Produto = ? AND MovimentoEstoque.Data >= ? AND MovimentoEstoque.Data <= ?  AND MovimentoEstoque.Produto = Produtos.Codigo AND NOT(MovimentoEstoque.TipoNumIntDocOrigem = 4 AND MovimentoEstoque.NumIntDocOrigem <> 0) AND MovimentoEstoque.NumIntDoc NOT IN (SELECT Numintdocorigem FROM MovimentoEstoque WHERE TipoNumIntDocOrigem = 4 AND MovimentoEstoque.NumIntDocOrigem <> 0) AND TiposMovimentoEstoque.AtualizaSoLote = 0"
                
                With tTiposMovimentoEstoque
                    lErro = Comando_Executar(alComando(2), sSelecaoSQL, .iAtualizaConsig, .iAtualizaDemo, .iAtualizaConserto, .iAtualizaOutras, .iAtualizaBenef, _
                            dQuantidadeMovEst, dCustoMovEst, iClasseUM, sSiglaUMEst, sSiglaUMMov, TIPOMOV_EST_PRODUTODETERCEIROS, iFilialEmpresa, sProduto, dtDataInicial, dtDataFinal)
                End With
                If lErro <> AD_SQL_SUCESSO Then Error 999
            
                lErro = Comando_BuscarPrimeiro(alComando(2))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
            
                Do While lErro = SUCESSO
                
                    lErro = CF("UM_Conversao", iClasseUM, sSiglaUMMov, sSiglaUMEst, dFator)
                    If lErro <> SUCESSO Then Error 999
                
                    dQuantidadeMovEst = dQuantidadeMovEst * dFator
                
                    With tTiposMovimentoEstoque
                        
                        If .iAtualizaConsig = TIPOMOV_EST_ADICIONACONSIGNACAO Then
                            dTotalSaldoQuantConsig3 = dTotalSaldoQuantConsig3 + dQuantidadeMovEst
                            dTotalSaldoValorConsig3 = dTotalSaldoValorConsig3 + dCustoMovEst
                        ElseIf .iAtualizaConsig = TIPOMOV_EST_SUBTRAICONSIGNACAO Then
                            dTotalSaldoQuantConsig3 = dTotalSaldoQuantConsig3 - dQuantidadeMovEst
                            dTotalSaldoValorConsig3 = dTotalSaldoValorConsig3 - dCustoMovEst
                        End If
                        
                        If .iAtualizaDemo = TIPOMOV_EST_ADICIONADEMO Then
                            dTotalSaldoQuantDemo3 = dTotalSaldoQuantDemo3 + dQuantidadeMovEst
                            dTotalSaldoValorDemo3 = dTotalSaldoValorDemo3 + dCustoMovEst
                        ElseIf .iAtualizaDemo = TIPOMOV_EST_SUBTRAIDEMO Then
                            dTotalSaldoQuantDemo3 = dTotalSaldoQuantDemo3 - dQuantidadeMovEst
                            dTotalSaldoValorDemo3 = dTotalSaldoValorDemo3 - dCustoMovEst
                        End If
                        
                        If .iAtualizaConserto = TIPOMOV_EST_ADICIONACONSERTO Then
                            dTotalSaldoQuantConserto3 = dTotalSaldoQuantConserto3 + dQuantidadeMovEst
                            dTotalSaldoValorConserto3 = dTotalSaldoValorConserto3 + dCustoMovEst
                        ElseIf .iAtualizaConserto = TIPOMOV_EST_SUBTRAICONSERTO Then
                            dTotalSaldoQuantConserto3 = dTotalSaldoQuantConserto3 - dQuantidadeMovEst
                            dTotalSaldoValorConserto3 = dTotalSaldoValorConserto3 - dCustoMovEst
                        End If
                        
                        If .iAtualizaOutras = TIPOMOV_EST_ADICIONAOUTRAS Then
                            dTotalSaldoQuantOutros3 = dTotalSaldoQuantOutros3 + dQuantidadeMovEst
                            dTotalSaldoValorOutros3 = dTotalSaldoValorOutros3 + dCustoMovEst
                        ElseIf .iAtualizaOutras = TIPOMOV_EST_SUBTRAIOUTRAS Then
                            dTotalSaldoQuantOutros3 = dTotalSaldoQuantOutros3 - dQuantidadeMovEst
                            dTotalSaldoValorOutros3 = dTotalSaldoValorOutros3 - dCustoMovEst
                        End If
                        
                        If .iAtualizaBenef = TIPOMOV_EST_ADICIONABENEF Then
                            dTotalSaldoQuantBenef3 = dTotalSaldoQuantBenef3 + dQuantidadeMovEst
                            dTotalSaldoValorBenef3 = dTotalSaldoValorBenef3 + dCustoMovEst
                        ElseIf .iAtualizaBenef = TIPOMOV_EST_SUBTRAIBENEF Then
                            dTotalSaldoQuantBenef3 = dTotalSaldoQuantBenef3 - dQuantidadeMovEst
                            dTotalSaldoValorBenef3 = dTotalSaldoValorBenef3 - dCustoMovEst
                        End If
                    
                    End With
                    
                    lErro = Comando_BuscarProximo(alComando(2))
                    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
                    
                Loop
                
                bMudou = False
                
                With tSldMesEst1
                
                    'Teste a Ser Feito
                    If Abs(dTotalSaldoQuantConsig3 - .adSaldoQuantConsig3(iMes)) >= 0.01 Then
                        
                        Print #1, "SldMesEst1 - Quantidade Consig3."
                        Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                        Print #1, "Quantidade SldMesEst1= " & .adSaldoQuantConsig3(iMes) & " Quantidade MovEst = " & dTotalSaldoQuantConsig3
                        Print #1, "--------------------------------------------------------------------------"
                        bMudou = True
                    
                    End If
                    
                    'Teste a Ser Feito
                    If Abs(dTotalSaldoValorConsig3 - .adSaldoValorConsig3(iMes)) >= 0.01 Then
                        
                        Print #1, "SldMesEst1 - Valor Consig3."
                        Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                        Print #1, "Valor SldMesEst1= " & .adSaldoValorConsig3(iMes) & " Valor MovEst = " & dTotalSaldoValorConsig3
                        Print #1, "--------------------------------------------------------------------------"
                        bMudou = True
                    
                    End If
                    
                    'Teste a Ser Feito
                    If Abs(dTotalSaldoQuantDemo3 - .adSaldoQuantDemo3(iMes)) >= 0.01 Then
                        
                        Print #1, "SldMesEst1 - Quantidade Demo3."
                        Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                        Print #1, "Quantidade SldMesEst1= " & .adSaldoQuantDemo3(iMes) & " Quantidade MovEst = " & dTotalSaldoQuantDemo3
                        Print #1, "--------------------------------------------------------------------------"
                        bMudou = True
                    
                    End If
                    
                    'Teste a Ser Feito
                    If Abs(dTotalSaldoValorDemo3 - .adSaldoValorDemo3(iMes)) >= 0.01 Then
                        
                        Print #1, "SldMesEst1 - Valor Demo3."
                        Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                        Print #1, "Valor SldMesEst1= " & .adSaldoValorDemo3(iMes) & " Valor MovEst = " & dTotalSaldoValorDemo3
                        Print #1, "--------------------------------------------------------------------------"
                        bMudou = True
                    
                    End If
                    
                    'Teste a Ser Feito
                    If Abs(dTotalSaldoQuantConserto3 - .adSaldoQuantConserto3(iMes)) >= 0.01 Then
                        
                        Print #1, "SldMesEst1 - Quantidade Conserto3"
                        Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                        Print #1, "Quantidade SldMesEst1= " & .adSaldoQuantConserto3(iMes) & " Quantidade MovEst = " & dTotalSaldoQuantConserto3
                        Print #1, "--------------------------------------------------------------------------"
                        bMudou = True
                    
                    End If
                    
                    'Teste a Ser Feito
                    If Abs(dTotalSaldoValorConserto3 - .adSaldoValorConserto3(iMes)) >= 0.01 Then
                        
                        Print #1, "SldMesEst1 - Valor Conserto3"
                        Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                        Print #1, "Valor SldMesEst1= " & .adSaldoValorConserto3(iMes) & " Valor MovEst = " & dTotalSaldoValorConserto3
                        Print #1, "--------------------------------------------------------------------------"
                        bMudou = True
                    
                    End If
                    
                    'Teste a Ser Feito
                    If Abs(dTotalSaldoQuantOutros3 - .adSaldoQuantOutros3(iMes)) >= 0.01 Then
                        
                        Print #1, "SldMesEst1 - Quantidade Outros3"
                        Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                        Print #1, "Quantidade SldMesEst1= " & .adSaldoQuantOutros3(iMes) & " Quantidade MovEst = " & dTotalSaldoQuantOutros3
                        Print #1, "--------------------------------------------------------------------------"
                        bMudou = True
                    
                    End If
                    
                    'Teste a Ser Feito
                    If Abs(dTotalSaldoValorOutros3 - .adSaldoValorOutros3(iMes)) >= 0.01 Then
                        
                        Print #1, "SldMesEst1 - Valor Outros3"
                        Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                        Print #1, "Valor SldMesEst1= " & .adSaldoValorOutros3(iMes) & " Valor MovEst = " & dTotalSaldoValorOutros3
                        Print #1, "--------------------------------------------------------------------------"
                        bMudou = True
                    
                    End If
                    
                    'Teste a Ser Feito
                    If Abs(dTotalSaldoQuantBenef3 - .adSaldoQuantBenef3(iMes)) >= 0.01 Then
                        
                        Print #1, "SldMesEst1 - Quantidade Benef3"
                        Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                        Print #1, "Quantidade SldMesEst1= " & .adSaldoQuantBenef3(iMes) & " Quantidade MovEst = " & dTotalSaldoQuantBenef3
                        Print #1, "--------------------------------------------------------------------------"
                        bMudou = True
                    
                    End If
                    
                    'Teste a Ser Feito
                    If Abs(dTotalSaldoValorBenef3 - .adSaldoValorBenef3(iMes)) >= 0.01 Then
                        
                        Print #1, "SldMesEst1 - Valor Benef3"
                        Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                        Print #1, "Valor SldMesEst1= " & .adSaldoValorBenef3(iMes) & " Valor MovEst = " & dTotalSaldoValorBenef3
                        Print #1, "--------------------------------------------------------------------------"
                        bMudou = True
                    
                    End If
                    
                End With
                    
                If bMudou = True Then
                    
                    sSQL = "UPDATE SldMesEst1 SET " & _
                            "SaldoQuantConsig3" & iMes & " = ?, SaldoValorConsig3" & iMes & " = ?, " & _
                            "SaldoQuantDemo3" & iMes & " = ?, SaldoValorDemo3" & iMes & " = ?, " & _
                            "SaldoQuantConserto3" & iMes & " = ?, SaldoValorConserto3" & iMes & " = ?, " & _
                            "SaldoQuantOutros3" & iMes & " = ?, SaldoValorOutros3" & iMes & " = ?, " & _
                            "SaldoQuantBenef3" & iMes & " = ?, SaldoValorBenef3" & iMes & " = ?"
                    
                    lErro = Comando_ExecutarPos(alComando(3), sSQL, alComando(1), _
                            dTotalSaldoQuantConsig3, dTotalSaldoValorConsig3, dTotalSaldoQuantDemo3, dTotalSaldoValorDemo3, _
                            dTotalSaldoQuantConserto3, dTotalSaldoValorConserto3, dTotalSaldoQuantOutros3, dTotalSaldoValorOutros3, _
                            dTotalSaldoQuantBenef3, dTotalSaldoValorBenef3)
                    If lErro <> SUCESSO Then Error 999
                                
                End If
                    
                dTotalSaldoQuantConsig3 = 0
                dTotalSaldoValorConsig3 = 0
                dTotalSaldoQuantDemo3 = 0
                dTotalSaldoValorDemo3 = 0
                dTotalSaldoQuantConserto3 = 0
                dTotalSaldoValorConserto3 = 0
                dTotalSaldoQuantOutros3 = 0
                dTotalSaldoValorOutros3 = 0
                dTotalSaldoQuantBenef3 = 0
                dTotalSaldoValorBenef3 = 0
                    
            End If
                                
            bPassou = False
                                
        Next
        
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    Loop
    
    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then Error 999
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    SldMesEst1_Testa_Integridades = SUCESSO
    
    Exit Function
         
Erro_SldMesEst1_Testa_Integridades:

    SldMesEst1_Testa_Integridades = Err
    
    Select Case Err
          
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149916)
     
    End Select
    
    Call Transacao_Rollback
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
End Function

Function SldMesEst2_Testa_Integridades(Optional dtDataInicial2 As Date, Optional dtDataFinal2 As Date, Optional sProdutoInicial As String, Optional sProdutoFinal As String) As Long
'Testa a integridade e, se necessário, corrige a tabela de SldMesEst2.

Dim lErro As Long
Dim alComando(1 To 3) As Long
Dim iIndice As Integer
Dim iFilialEmpresa As Integer
Dim sProduto As String
Dim iAno As Integer
Dim tTiposMovimentoEstoque As typeTipoMovEst
Dim dQuantidadeMovEst As Double
Dim dCustoMovEst As Double
Dim tSldMesEst2 As typeSldMesEst2
Dim sSQL As String
Dim dtDataInicial As Date
Dim dtDataFinal As Date
Dim iMes As Integer
Dim dTotalQuantEntrada As Double, dTotalQuantSaida As Double, dTotalQuantCons As Double, dTotalQuantVend As Double, dTotalValorEntrada As Double, dTotalValorSaida As Double, dTotalQuantComp As Double, dTotalValorComp As Double, dTotalValorVend As Double, dTotalValorCons As Double
Dim dSaldoQuantCusto As Double, dSaldoValorCusto As Double
Dim iClasseUM As Integer, sSiglaUMMov As String, sSiglaUMEst As String, dFator As Double
Dim lTransacao As Long, bMudou As Boolean

Dim dTotalSaldoQuantConsig As Double, dTotalSaldoValorConsig As Double
Dim dTotalSaldoQuantDemo As Double, dTotalSaldoValorDemo As Double
Dim dTotalSaldoQuantConserto As Double, dTotalSaldoValorConserto As Double
Dim dTotalSaldoQuantOutros As Double, dTotalSaldoValorOutros As Double
Dim dTotalSaldoQuantBenef As Double, dTotalSaldoValorBenef As Double
Dim iMesAux, iAnoAux As Integer
Dim bPassou As Boolean

Dim sSelecaoSQL As String

On Error GoTo Erro_SldMesEst2_Testa_Integridades
    
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 999
    
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 999
    Next
    
    sProduto = String(STRING_PRODUTO, 0)
    tTiposMovimentoEstoque.sEntradaOuSaida = String(STRING_TIPOMOV_EST_ENTRADAOUSAIDA, 0)
            
    sSQL = "SELECT FilialEmpresa, Ano, Produto"
    
    For iIndice = 1 To 12
        
        sSQL = sSQL & ", SaldoQuantConsig" & iIndice
        sSQL = sSQL & ", SaldoValorConsig" & iIndice
        sSQL = sSQL & ", SaldoQuantDemo" & iIndice
        sSQL = sSQL & ", SaldoValorDemo" & iIndice
        sSQL = sSQL & ", SaldoQuantConserto" & iIndice
        sSQL = sSQL & ", SaldoValorConserto" & iIndice
        sSQL = sSQL & ", SaldoQuantOutros" & iIndice
        sSQL = sSQL & ", SaldoValorOutros" & iIndice
        sSQL = sSQL & ", SaldoQuantBenef" & iIndice
        sSQL = sSQL & ", SaldoValorBenef" & iIndice
        
    Next
    
    'Se não houverem parâmetros recebidos
    If Len(Trim(dtDataInicial2)) = 0 Then 'modificado por Leo Inicio
        
        sSQL = sSQL & " FROM SldMesEst2 ORDER BY Produto"
        
        With tSldMesEst2
            
            lErro = Comando_ExecutarPos(alComando(1), sSQL, 0, iFilialEmpresa, iAno, sProduto, _
                    .adSaldoQuantConsig(1), .adSaldoValorConsig(1), .adSaldoQuantDemo(1), .adSaldoValorDemo(1), .adSaldoQuantConserto(1), .adSaldoValorConserto(1), .adSaldoQuantOutros(1), .adSaldoValorOutros(1), .adSaldoQuantBenef(1), .adSaldoValorBenef(1), _
                    .adSaldoQuantConsig(2), .adSaldoValorConsig(2), .adSaldoQuantDemo(2), .adSaldoValorDemo(2), .adSaldoQuantConserto(2), .adSaldoValorConserto(2), .adSaldoQuantOutros(2), .adSaldoValorOutros(2), .adSaldoQuantBenef(2), .adSaldoValorBenef(2), _
                    .adSaldoQuantConsig(3), .adSaldoValorConsig(3), .adSaldoQuantDemo(3), .adSaldoValorDemo(3), .adSaldoQuantConserto(3), .adSaldoValorConserto(3), .adSaldoQuantOutros(3), .adSaldoValorOutros(3), .adSaldoQuantBenef(3), .adSaldoValorBenef(3), _
                    .adSaldoQuantConsig(4), .adSaldoValorConsig(4), .adSaldoQuantDemo(4), .adSaldoValorDemo(4), .adSaldoQuantConserto(4), .adSaldoValorConserto(4), .adSaldoQuantOutros(4), .adSaldoValorOutros(4), .adSaldoQuantBenef(4), .adSaldoValorBenef(4), _
                    .adSaldoQuantConsig(5), .adSaldoValorConsig(5), .adSaldoQuantDemo(5), .adSaldoValorDemo(5), .adSaldoQuantConserto(5), .adSaldoValorConserto(5), .adSaldoQuantOutros(5), .adSaldoValorOutros(5), .adSaldoQuantBenef(5), .adSaldoValorBenef(5), _
                    .adSaldoQuantConsig(6), .adSaldoValorConsig(6), .adSaldoQuantDemo(6), .adSaldoValorDemo(6), .adSaldoQuantConserto(6), .adSaldoValorConserto(6), .adSaldoQuantOutros(6), .adSaldoValorOutros(6), .adSaldoQuantBenef(6), .adSaldoValorBenef(6), _
                    .adSaldoQuantConsig(7), .adSaldoValorConsig(7), .adSaldoQuantDemo(7), .adSaldoValorDemo(7), .adSaldoQuantConserto(7), .adSaldoValorConserto(7), .adSaldoQuantOutros(7), .adSaldoValorOutros(7), .adSaldoQuantBenef(7), .adSaldoValorBenef(7), _
                    .adSaldoQuantConsig(8), .adSaldoValorConsig(8), .adSaldoQuantDemo(8), .adSaldoValorDemo(8), .adSaldoQuantConserto(8), .adSaldoValorConserto(8), .adSaldoQuantOutros(8), .adSaldoValorOutros(8), .adSaldoQuantBenef(8), .adSaldoValorBenef(8), _
                    .adSaldoQuantConsig(9), .adSaldoValorConsig(9), .adSaldoQuantDemo(9), .adSaldoValorDemo(9), .adSaldoQuantConserto(9), .adSaldoValorConserto(9), .adSaldoQuantOutros(9), .adSaldoValorOutros(9), .adSaldoQuantBenef(9), .adSaldoValorBenef(9), _
                    .adSaldoQuantConsig(10), .adSaldoValorConsig(10), .adSaldoQuantDemo(10), .adSaldoValorDemo(10), .adSaldoQuantConserto(10), .adSaldoValorConserto(10), .adSaldoQuantOutros(10), .adSaldoValorOutros(10), .adSaldoQuantBenef(10), .adSaldoValorBenef(10), _
                    .adSaldoQuantConsig(11), .adSaldoValorConsig(11), .adSaldoQuantDemo(11), .adSaldoValorDemo(11), .adSaldoQuantConserto(11), .adSaldoValorConserto(11), .adSaldoQuantOutros(11), .adSaldoValorOutros(11), .adSaldoQuantBenef(11), .adSaldoValorBenef(11), _
                    .adSaldoQuantConsig(12), .adSaldoValorConsig(12), .adSaldoQuantDemo(12), .adSaldoValorDemo(12), .adSaldoQuantConserto(12), .adSaldoValorConserto(12), .adSaldoQuantOutros(12), .adSaldoValorOutros(12), .adSaldoQuantBenef(12), .adSaldoValorBenef(12))
                    
        End With
        If lErro <> AD_SQL_SUCESSO Then Error 999

    Else

        sSQL = sSQL & " FROM SldMesEst2 WHERE Produto >= ? AND Produto <= ? ORDER BY Produto"
        
        With tSldMesEst2
            
            lErro = Comando_ExecutarPos(alComando(1), sSQL, 0, iFilialEmpresa, iAno, sProduto, _
                    .adSaldoQuantConsig(1), .adSaldoValorConsig(1), .adSaldoQuantDemo(1), .adSaldoValorDemo(1), .adSaldoQuantConserto(1), .adSaldoValorConserto(1), .adSaldoQuantOutros(1), .adSaldoValorOutros(1), .adSaldoQuantBenef(1), .adSaldoValorBenef(1), _
                    .adSaldoQuantConsig(2), .adSaldoValorConsig(2), .adSaldoQuantDemo(2), .adSaldoValorDemo(2), .adSaldoQuantConserto(2), .adSaldoValorConserto(2), .adSaldoQuantOutros(2), .adSaldoValorOutros(2), .adSaldoQuantBenef(2), .adSaldoValorBenef(2), _
                    .adSaldoQuantConsig(3), .adSaldoValorConsig(3), .adSaldoQuantDemo(3), .adSaldoValorDemo(3), .adSaldoQuantConserto(3), .adSaldoValorConserto(3), .adSaldoQuantOutros(3), .adSaldoValorOutros(3), .adSaldoQuantBenef(3), .adSaldoValorBenef(3), _
                    .adSaldoQuantConsig(4), .adSaldoValorConsig(4), .adSaldoQuantDemo(4), .adSaldoValorDemo(4), .adSaldoQuantConserto(4), .adSaldoValorConserto(4), .adSaldoQuantOutros(4), .adSaldoValorOutros(4), .adSaldoQuantBenef(4), .adSaldoValorBenef(4), _
                    .adSaldoQuantConsig(5), .adSaldoValorConsig(5), .adSaldoQuantDemo(5), .adSaldoValorDemo(5), .adSaldoQuantConserto(5), .adSaldoValorConserto(5), .adSaldoQuantOutros(5), .adSaldoValorOutros(5), .adSaldoQuantBenef(5), .adSaldoValorBenef(5), _
                    .adSaldoQuantConsig(6), .adSaldoValorConsig(6), .adSaldoQuantDemo(6), .adSaldoValorDemo(6), .adSaldoQuantConserto(6), .adSaldoValorConserto(6), .adSaldoQuantOutros(6), .adSaldoValorOutros(6), .adSaldoQuantBenef(6), .adSaldoValorBenef(6), _
                    .adSaldoQuantConsig(7), .adSaldoValorConsig(7), .adSaldoQuantDemo(7), .adSaldoValorDemo(7), .adSaldoQuantConserto(7), .adSaldoValorConserto(7), .adSaldoQuantOutros(7), .adSaldoValorOutros(7), .adSaldoQuantBenef(7), .adSaldoValorBenef(7), _
                    .adSaldoQuantConsig(8), .adSaldoValorConsig(8), .adSaldoQuantDemo(8), .adSaldoValorDemo(8), .adSaldoQuantConserto(8), .adSaldoValorConserto(8), .adSaldoQuantOutros(8), .adSaldoValorOutros(8), .adSaldoQuantBenef(8), .adSaldoValorBenef(8), _
                    .adSaldoQuantConsig(9), .adSaldoValorConsig(9), .adSaldoQuantDemo(9), .adSaldoValorDemo(9), .adSaldoQuantConserto(9), .adSaldoValorConserto(9), .adSaldoQuantOutros(9), .adSaldoValorOutros(9), .adSaldoQuantBenef(9), .adSaldoValorBenef(9), _
                    .adSaldoQuantConsig(10), .adSaldoValorConsig(10), .adSaldoQuantDemo(10), .adSaldoValorDemo(10), .adSaldoQuantConserto(10), .adSaldoValorConserto(10), .adSaldoQuantOutros(10), .adSaldoValorOutros(10), .adSaldoQuantBenef(10), .adSaldoValorBenef(10), _
                    .adSaldoQuantConsig(11), .adSaldoValorConsig(11), .adSaldoQuantDemo(11), .adSaldoValorDemo(11), .adSaldoQuantConserto(11), .adSaldoValorConserto(11), .adSaldoQuantOutros(11), .adSaldoValorOutros(11), .adSaldoQuantBenef(11), .adSaldoValorBenef(11), _
                    .adSaldoQuantConsig(12), .adSaldoValorConsig(12), .adSaldoQuantDemo(12), .adSaldoValorDemo(12), .adSaldoQuantConserto(12), .adSaldoValorConserto(12), .adSaldoQuantOutros(12), .adSaldoValorOutros(12), .adSaldoQuantBenef(12), .adSaldoValorBenef(12), _
                    sProdutoInicial, sProdutoFinal)
                    
        End With
        If lErro <> AD_SQL_SUCESSO Then Error 999
    
        iMesAux = Month(dtDataInicial2)
        iAnoAux = Year(dtDataInicial2)
        
        dtDataInicial2 = StrParaDate("01/" & iMesAux & "/" & iAnoAux)
                                  
        iMesAux = Month(dtDataFinal2)
        iAnoAux = Year(dtDataFinal2)
                                                                    
        If iMesAux <> 12 Then
            dtDataFinal2 = CDate("01/" & (iMesAux + 1) & "/" & iAnoAux) - 1
        Else
            dtDataFinal2 = "31/" & iMesAux & "/" & iAnoAux
        End If
        
    End If
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    
    Do While lErro = SUCESSO
            
        For iMes = 1 To 12
                                  
            If iMes <> 12 Then
                dtDataInicial = CDate("01/" & iMes & "/" & iAno)
                dtDataFinal = CDate("01/" & (iMes + 1) & "/" & iAno) - 1
            Else
                dtDataInicial = "01/" & 12 & "/" & iAno
                dtDataFinal = "31/" & 12 & "/" & iAno
            End If
                        
             'Verifica se algum filtro foi preenchido (basta verificar apenas um p/ saber se todos foram passados)
            If Len(Trim(dtDataInicial2)) = 0 Then 'Modificado por Leo Inicio
            
                'Verifica se as datas final e inicial estão dentro do período recebido como parâmetro
                If dtDataInicial < dtDataInicial2 And dtDataFinal > dtDataFinal2 Then bPassou = True
                            
            End If
    
            'Se o período estiver de acordo
            If bPassou = False Then
   
                sSiglaUMEst = String(STRING_PRODUTO_SIGLAUMESTOQUE, 0)
                sSiglaUMMov = String(STRING_PRODUTO_SIGLAUMESTOQUE, 0)
        
                sSelecaoSQL = "SELECT TiposMovimentoEstoque.AtualizaConsig, TiposMovimentoEstoque.AtualizaDemo, " & _
                              "TiposMovimentoEstoque.AtualizaConserto, TiposMovimentoEstoque.AtualizaOutras, " & _
                              "TiposMovimentoEstoque.AtualizaBenef, MovimentoEstoque.Quantidade, MovimentoEstoque.Custo, " & _
                              "Produtos.ClasseUM, Produtos.SiglaUMEstoque, MovimentoEstoque.SiglaUM " & _
                              "FROM MovimentoEstoque, TiposMovimentoEstoque, Produtos WHERE TiposMovimentoEstoque.ProdutodeTerc =? AND " & _
                              "MovimentoEstoque.TipoMov = TiposMovimentoEstoque.Codigo AND MovimentoEstoque.FilialEmpresa = ? AND MovimentoEstoque.Produto = ? AND MovimentoEstoque.Data >= ? AND MovimentoEstoque.Data <= ?  AND MovimentoEstoque.Produto = Produtos.Codigo AND NOT(MovimentoEstoque.TipoNumIntDocOrigem = 4 AND MovimentoEstoque.NumIntDocOrigem <> 0) AND MovimentoEstoque.NumIntDoc NOT IN (SELECT Numintdocorigem FROM MovimentoEstoque WHERE TipoNumIntDocOrigem = 4 AND MovimentoEstoque.NumIntDocOrigem <> 0) AND TiposMovimentoEstoque.AtualizaSoLote = 0"
                
                With tTiposMovimentoEstoque
                    lErro = Comando_Executar(alComando(2), sSelecaoSQL, .iAtualizaConsig, .iAtualizaDemo, .iAtualizaConserto, .iAtualizaOutras, .iAtualizaBenef, _
                            dQuantidadeMovEst, dCustoMovEst, iClasseUM, sSiglaUMEst, sSiglaUMMov, TIPOMOV_EST_PRODUTONOSSO, iFilialEmpresa, sProduto, dtDataInicial, dtDataFinal)
                End With
                If lErro <> AD_SQL_SUCESSO Then Error 999
            
                lErro = Comando_BuscarPrimeiro(alComando(2))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
            
                Do While lErro = SUCESSO
                
                    lErro = CF("UM_Conversao", iClasseUM, sSiglaUMMov, sSiglaUMEst, dFator)
                    If lErro <> SUCESSO Then Error 999
                
                    dQuantidadeMovEst = dQuantidadeMovEst * dFator
                
                    With tTiposMovimentoEstoque
                        
                        If .iAtualizaConsig = TIPOMOV_EST_ADICIONACONSIGNACAO Then
                            dTotalSaldoQuantConsig = dTotalSaldoQuantConsig + dQuantidadeMovEst
                            dTotalSaldoValorConsig = dTotalSaldoValorConsig + dCustoMovEst
                        ElseIf .iAtualizaConsig = TIPOMOV_EST_SUBTRAICONSIGNACAO Then
                            dTotalSaldoQuantConsig = dTotalSaldoQuantConsig - dQuantidadeMovEst
                            dTotalSaldoValorConsig = dTotalSaldoValorConsig - dCustoMovEst
                        End If
                        
                        If .iAtualizaDemo = TIPOMOV_EST_ADICIONADEMO Then
                            dTotalSaldoQuantDemo = dTotalSaldoQuantDemo + dQuantidadeMovEst
                            dTotalSaldoValorDemo = dTotalSaldoValorDemo + dCustoMovEst
                        ElseIf .iAtualizaDemo = TIPOMOV_EST_SUBTRAIDEMO Then
                            dTotalSaldoQuantDemo = dTotalSaldoQuantDemo - dQuantidadeMovEst
                            dTotalSaldoValorDemo = dTotalSaldoValorDemo - dCustoMovEst
                        End If
                        
                        If .iAtualizaConserto = TIPOMOV_EST_ADICIONACONSERTO Then
                            dTotalSaldoQuantConserto = dTotalSaldoQuantConserto + dQuantidadeMovEst
                            dTotalSaldoValorConserto = dTotalSaldoValorConserto + dCustoMovEst
                        ElseIf .iAtualizaConserto = TIPOMOV_EST_SUBTRAICONSERTO Then
                            dTotalSaldoQuantConserto = dTotalSaldoQuantConserto - dQuantidadeMovEst
                            dTotalSaldoValorConserto = dTotalSaldoValorConserto - dCustoMovEst
                        End If
                        
                        If .iAtualizaOutras = TIPOMOV_EST_ADICIONAOUTRAS Then
                            dTotalSaldoQuantOutros = dTotalSaldoQuantOutros + dQuantidadeMovEst
                            dTotalSaldoValorOutros = dTotalSaldoValorOutros + dCustoMovEst
                        ElseIf .iAtualizaOutras = TIPOMOV_EST_SUBTRAIOUTRAS Then
                            dTotalSaldoQuantOutros = dTotalSaldoQuantOutros - dQuantidadeMovEst
                            dTotalSaldoValorOutros = dTotalSaldoValorOutros - dCustoMovEst
                        End If
                        
                        If .iAtualizaBenef = TIPOMOV_EST_ADICIONABENEF Then
                            dTotalSaldoQuantBenef = dTotalSaldoQuantBenef + dQuantidadeMovEst
                            dTotalSaldoValorBenef = dTotalSaldoValorBenef + dCustoMovEst
                        ElseIf .iAtualizaBenef = TIPOMOV_EST_SUBTRAIBENEF Then
                            dTotalSaldoQuantBenef = dTotalSaldoQuantBenef - dQuantidadeMovEst
                            dTotalSaldoValorBenef = dTotalSaldoValorBenef - dCustoMovEst
                        End If
                    
                    End With
                    
                    lErro = Comando_BuscarProximo(alComando(2))
                    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
                    
                Loop
                
                bMudou = False
                
                With tSldMesEst2
                
                    'Teste a Ser Feito
                    If Abs(dTotalSaldoQuantConsig - .adSaldoQuantConsig(iMes)) >= 0.01 Then
                        
                        Print #1, "SldMesEst2 - Quantidade Consig."
                        Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                        Print #1, "Quantidade SldMesEst2= " & .adSaldoQuantConsig(iMes) & " Quantidade MovEst = " & dTotalSaldoQuantConsig
                        Print #1, "--------------------------------------------------------------------------"
                        bMudou = True
                    
                    End If
                    
                    'Teste a Ser Feito
                    If Abs(dTotalSaldoValorConsig - .adSaldoValorConsig(iMes)) >= 0.01 Then
                        
                        Print #1, "SldMesEst2 - Valor Consig."
                        Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                        Print #1, "Valor SldMesEst2= " & .adSaldoValorConsig(iMes) & " Valor MovEst = " & dTotalSaldoValorConsig
                        Print #1, "--------------------------------------------------------------------------"
                        bMudou = True
                    
                    End If
                    
                    'Teste a Ser Feito
                    If Abs(dTotalSaldoQuantDemo - .adSaldoQuantDemo(iMes)) >= 0.01 Then
                        
                        Print #1, "SldMesEst2 - Quantidade Demo."
                        Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                        Print #1, "Quantidade SldMesEst2= " & .adSaldoQuantDemo(iMes) & " Quantidade MovEst = " & dTotalSaldoQuantDemo
                        Print #1, "--------------------------------------------------------------------------"
                        bMudou = True
                    
                    End If
                    
                    'Teste a Ser Feito
                    If Abs(dTotalSaldoValorDemo - .adSaldoValorDemo(iMes)) >= 0.01 Then
                        
                        Print #1, "SldMesEst2 - Valor Demo."
                        Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                        Print #1, "Valor SldMesEst2= " & .adSaldoValorDemo(iMes) & " Valor MovEst = " & dTotalSaldoValorDemo
                        Print #1, "--------------------------------------------------------------------------"
                        bMudou = True
                    
                    End If
                    
                    'Teste a Ser Feito
                    If Abs(dTotalSaldoQuantConserto - .adSaldoQuantConserto(iMes)) >= 0.01 Then
                        
                        Print #1, "SldMesEst2 - Quantidade Conserto"
                        Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                        Print #1, "Quantidade SldMesEst2= " & .adSaldoQuantConserto(iMes) & " Quantidade MovEst = " & dTotalSaldoQuantConserto
                        Print #1, "--------------------------------------------------------------------------"
                        bMudou = True
                    
                    End If
                    
                    'Teste a Ser Feito
                    If Abs(dTotalSaldoValorConserto - .adSaldoValorConserto(iMes)) >= 0.01 Then
                        
                        Print #1, "SldMesEst2 - Valor Conserto"
                        Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                        Print #1, "Valor SldMesEst2= " & .adSaldoValorConserto(iMes) & " Valor MovEst = " & dTotalSaldoValorConserto
                        Print #1, "--------------------------------------------------------------------------"
                        bMudou = True
                    
                    End If
                    
                    'Teste a Ser Feito
                    If Abs(dTotalSaldoQuantOutros - .adSaldoQuantOutros(iMes)) >= 0.01 Then
                        
                        Print #1, "SldMesEst2 - Quantidade Outros"
                        Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                        Print #1, "Quantidade SldMesEst2= " & .adSaldoQuantOutros(iMes) & " Quantidade MovEst = " & dTotalSaldoQuantOutros
                        Print #1, "--------------------------------------------------------------------------"
                        bMudou = True
                    
                    End If
                    
                    'Teste a Ser Feito
                    If Abs(dTotalSaldoValorOutros - .adSaldoValorOutros(iMes)) >= 0.01 Then
                        
                        Print #1, "SldMesEst2 - Valor Outros"
                        Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                        Print #1, "Valor SldMesEst2= " & .adSaldoValorOutros(iMes) & " Valor MovEst = " & dTotalSaldoValorOutros
                        Print #1, "--------------------------------------------------------------------------"
                        bMudou = True
                    
                    End If
                    
                    'Teste a Ser Feito
                    If Abs(dTotalSaldoQuantBenef - .adSaldoQuantBenef(iMes)) >= 0.01 Then
                        
                        Print #1, "SldMesEst2 - Quantidade Benef"
                        Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                        Print #1, "Quantidade SldMesEst2= " & .adSaldoQuantBenef(iMes) & " Quantidade MovEst = " & dTotalSaldoQuantBenef
                        Print #1, "--------------------------------------------------------------------------"
                        bMudou = True
                    
                    End If
                    
                    'Teste a Ser Feito
                    If Abs(dTotalSaldoValorBenef - .adSaldoValorBenef(iMes)) >= 0.01 Then
                        
                        Print #1, "SldMesEst2 - Valor Benef"
                        Print #1, "Produto = " & sProduto & " FilialEmpresa = " & iFilialEmpresa & " Ano = " & iAno
                        Print #1, "Valor SldMesEst2= " & .adSaldoValorBenef(iMes) & " Valor MovEst = " & dTotalSaldoValorBenef
                        Print #1, "--------------------------------------------------------------------------"
                        bMudou = True
                    
                    End If
                    
                End With
                    
                If bMudou = True Then
                    
                    sSQL = "UPDATE SldMesEst2 SET " & _
                            "SaldoQuantConsig" & iMes & " = ?, SaldoValorConsig" & iMes & " = ?, " & _
                            "SaldoQuantDemo" & iMes & " = ?, SaldoValorDemo" & iMes & " = ?, " & _
                            "SaldoQuantConserto" & iMes & " = ?, SaldoValorConserto" & iMes & " = ?, " & _
                            "SaldoQuantOutros" & iMes & " = ?, SaldoValorOutros" & iMes & " = ?, " & _
                            "SaldoQuantBenef" & iMes & " = ?, SaldoValorBenef" & iMes & " = ?"
                    
                    lErro = Comando_ExecutarPos(alComando(3), sSQL, alComando(1), _
                            dTotalSaldoQuantConsig, dTotalSaldoValorConsig, dTotalSaldoQuantDemo, dTotalSaldoValorDemo, _
                            dTotalSaldoQuantConserto, dTotalSaldoValorConserto, dTotalSaldoQuantOutros, dTotalSaldoValorOutros, _
                            dTotalSaldoQuantBenef, dTotalSaldoValorBenef)
                    If lErro <> SUCESSO Then Error 999
                                
                End If
                    
                dTotalSaldoQuantConsig = 0
                dTotalSaldoValorConsig = 0
                dTotalSaldoQuantDemo = 0
                dTotalSaldoValorDemo = 0
                dTotalSaldoQuantConserto = 0
                dTotalSaldoValorConserto = 0
                dTotalSaldoQuantOutros = 0
                dTotalSaldoValorOutros = 0
                dTotalSaldoQuantBenef = 0
                dTotalSaldoValorBenef = 0
                
            End If
        
            bPassou = False
        
        Next
        
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    Loop
    
    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then Error 999
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    SldMesEst2_Testa_Integridades = SUCESSO
    
    Exit Function
         
Erro_SldMesEst2_Testa_Integridades:

    SldMesEst2_Testa_Integridades = Err
    
    Select Case Err
          
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149917)
     
    End Select
    
    Call Transacao_Rollback
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
End Function

'Incluída por Tulio Jorge em 02/05/02
'Revisada por Luiz G.F.Nogueira em 02/05/02
Public Function ComissoesRegras_Grava(ByVal colComissoesRegras As Collection) As Long
'Grava as regras para cálculo de comissão no BD...
'objComissoesRegras RECEBE(INPUT) os dados a serem gravados

Dim lErro As Long
Dim lTransacao As Long
Dim objComissoesRegras As ClassComissoesRegras

On Error GoTo Erro_ComissoesRegras_Grava

    'Abrindo Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 101579
    
    'Exclui do bd as regras em questao...
    lErro = ComissoesRegras_Exclui_EmTrans()
    If lErro <> SUCESSO Then gError 101580
    
    'para cada Regra na colecao
    For Each objComissoesRegras In colComissoesRegras
    
        'grava a regra
        lErro = CF("ComissoesRegras_Grava_EmTrans", objComissoesRegras)
        If lErro <> SUCESSO Then gError 101581
        
    Next
    
    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 101582

    ComissoesRegras_Grava = SUCESSO

    Exit Function

Erro_ComissoesRegras_Grava:

    ComissoesRegras_Grava = gErr
    
    Select Case gErr
    
        Case 101579
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
    
        Case 101580, 101581
    
        Case 101582
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149918)

    End Select
    
    Call Transacao_Rollback
    
    Exit Function
    
End Function

'Incluída por Tulio Jorge em 02/05/02
'Revisada por Luiz G.F.Nogueira em 02/05/02 -> ainda não liberada
Public Function ComissoesRegras_Exclui_EmTrans() As Long
'Exclui todos os registros da tabela e atualiza o NUM_PROX_COMISSOESREGRAS
'DEVE SER CHAMADA DENTRO DE TRANSAÇÃO

Dim lErro As Long
Dim lComando As Long
Dim lCodigo As Long

On Error GoTo Erro_ComissoesRegras_Exclui_EmTrans

    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 101590
        
    'obtem o conjunto unitario de registros que serao excluidos do bd..
    lErro = Comando_Executar(lComando, "DELETE FROM ComissoesRegras")
    If lErro <> AD_SQL_SUCESSO Then gError 101591

    'fecha comando
    Call Comando_Fechar(lComando)
    
    ComissoesRegras_Exclui_EmTrans = SUCESSO
    
    Exit Function

Erro_ComissoesRegras_Exclui_EmTrans:

    ComissoesRegras_Exclui_EmTrans = gErr
    
    Select Case gErr
        
        Case 101590
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 101591
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_COMISSOESREGRAS", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149919)
            
    End Select
    
    'fecha comando
    Call Comando_Fechar(lComando)
        
    Exit Function

End Function

Public Function ComissoesRegras_Exclui() As Long
'Abre a transação e chama a função que irá excluir todos os registros do bd

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_ComissoesRegras_Exclui

    'Abre transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 101596
    
    'Exclui a planilha do bd
    lErro = CF("ComissoesRegras_Exclui_EmTrans")
    If lErro <> SUCESSO Then gError 101597

    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 101598

    ComissoesRegras_Exclui = SUCESSO
    
    Exit Function
    
Erro_ComissoesRegras_Exclui:

    ComissoesRegras_Exclui = gErr
    
    Select Case gErr
        
        Case 101596
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
        
        Case 101597
        
        Case 101598
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149920)
            
    End Select
    
    Call Transacao_Rollback
    
    Exit Function

End Function

'Daniel 27/05/2002
Function NFiscal_AlteraVinculo_Orcamento(objNFiscal As ClassNFiscal)
'Vincula ou desvincula um Orçamento de Venda a uma Nfiscal.

Dim lErro As Long
Dim objOrcamentoVenda As New ClassOrcamentoVenda
Dim lComando As Long
Dim lComando2 As Long
Dim lNumIntPedVenda As Long
Dim lNumIntNFiscal As Long
Dim lCodigo As Long
Dim iFilialEmpresa As Integer

On Error GoTo Erro_NFiscal_AlteraVinculo_Orcamento

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 94465
    
    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then gError 94466
        
    'Se o usuário selecionou um Orcamento
    If objNFiscal.lNumOrcamentoVenda <> 0 Then
    
        objOrcamentoVenda.lCodigo = objNFiscal.lNumOrcamentoVenda
        objOrcamentoVenda.iFilialEmpresa = objNFiscal.iFilialOrcamento
    
        'Seleciona o Orçamento na Tela de OrcamentoVenda
        lErro = Comando_ExecutarPos(lComando, "SELECT NumIntPedVenda, NumIntNFiscal FROM OrcamentoVenda WHERE Codigo = ? AND FilialEmpresa = ?", _
                                    0, lNumIntPedVenda, lNumIntNFiscal, objOrcamentoVenda.lCodigo, objOrcamentoVenda.iFilialEmpresa)
        If lErro <> SUCESSO Then gError 94467
        
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 94468
        
        'Se o Orçamento não existe ---> Erro.
        If lErro <> AD_SQL_SUCESSO Then gError 94469
                
        objOrcamentoVenda.lNumIntPedVenda = lNumIntPedVenda
        objOrcamentoVenda.lNumIntNFiscal = lNumIntNFiscal
        
        'Se o Orcamento estiver vinculado a uma Nota Fiscal diferente ou a um Pedido de Venda => Erro.
        If objOrcamentoVenda.lNumIntNFiscal <> 0 And objOrcamentoVenda.lNumIntNFiscal <> objNFiscal.lNumIntDoc Then gError 94470
        If objOrcamentoVenda.lNumIntPedVenda <> 0 Then gError 94471
    
        'Vincula o Orçamento a NFiscal
        lErro = Comando_ExecutarPos(lComando2, "UPDATE OrcamentoVenda SET NumIntNFiscal = ?", lComando, objNFiscal.lNumIntDoc)
        If lErro <> SUCESSO Then gError 94472
        
    End If
            
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)
    
    NFiscal_AlteraVinculo_Orcamento = SUCESSO
    
    Exit Function
    
Erro_NFiscal_AlteraVinculo_Orcamento:
    
    NFiscal_AlteraVinculo_Orcamento = gErr
    
    Select Case gErr
                              
        Case 94465, 94466
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
                                          
        Case 94467, 94468, 94473, 94474
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ORCAMENTOVENDA", gErr)
            
        Case 94469
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ORCAMENTOVENDA_NAO_CADASTRADO1", gErr, lCodigo, iFilialEmpresa)
            
        Case 94470
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ORCAMENTOVENDA_VINCULADO_PEDVENDA", gErr, lCodigo, iFilialEmpresa)
            
        Case 94471
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ORCAMENTOVENDA_VINCULADO_NFISCAL", gErr, lCodigo, iFilialEmpresa)
                       
        Case 94472, 94475
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_ORCAMENTOVENDA", gErr, lCodigo, iFilialEmpresa)
                       
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149921)
     
    End Select
        
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)
        
    Exit Function

End Function

'Daniel 27/05/2002
Function NFiscal_Desvincula_Orcamento(ByVal objNFiscal As ClassNFiscal) As Long
'Desvincula o Orçamento de Venda da NFiscal a ser excluida.

Dim lErro As Long
Dim lNumIntDoc As Long
Dim lComando As Long
Dim lComando1 As Long

On Error GoTo Erro_NFiscal_Desvincula_Orcamento
    
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 94479
    
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 94480
    
    'Tenta buscar um Orçamento Vinculado ao Pedido de Venda
    lErro = Comando_ExecutarPos(lComando, "SELECT NumIntDoc FROM OrcamentoVenda WHERE NumIntNFiscal = ?", 0, lNumIntDoc, objNFiscal.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 94481

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 94482
    
    If lErro = SUCESSO Then
    
        'Desvincula a NFiscal da Tabela de Orçamentos.
        lErro = Comando_ExecutarPos(lComando1, "UPDATE OrcamentoVenda SET NumIntNFiscal = ?", lComando, 0)
        If lErro <> AD_SQL_SUCESSO Then gError 94483

    End If

    NFiscal_Desvincula_Orcamento = SUCESSO

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    
    Exit Function

Erro_NFiscal_Desvincula_Orcamento:

    NFiscal_Desvincula_Orcamento = gErr

    Select Case gErr

        Case 94479, 94480
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 94481, 94482
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ORCAMENTOVENDA", gErr)

        Case 94483
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_ORCAMENTOVENDA", gErr, objNFiscal.lNumOrcamentoVenda)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149922)

    End Select
    
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    
    Exit Function

End Function

Function NFiscal_Grava_EmTrans(ByVal objNFiscal As ClassNFiscal, ByVal objContabil As ClassContabil) As Long
'grava uma nota fiscal

Dim lErro As Long
Dim alComando(1 To NUM_MAX_LCOMANDO_NFISCAL) As Long
Dim iIndice As Integer

On Error GoTo Erro_NFiscal_Grava_EmTrans

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 35962
    Next
    
    
    'grava a nota fiscal
    lErro = CF("NFiscal_Grava_Trans", alComando(), objNFiscal)
    If lErro <> SUCESSO And lErro <> 61403 Then gError 44259
    
    'Se a Nota é nova
    If lErro = SUCESSO Then
        
        'verifica se o cliente possui o crédito para faturar a nota fiscal.
        'Se tiver atualiza as tabelas de cliente e estatistica de liberacao do usuario
        lErro = Processa_NFiscal_Credito(objNFiscal)
        If lErro <> SUCESSO Then gError 44496
        
        'Grava a Estatística do Cliente
        lErro = CF("FilialCliente_Grava_Estatistica", objNFiscal)
        If lErro <> SUCESSO Then gError 52964
    
        'Grava a Estatística do Produto Vendido
        lErro = CF("ProdutoVendido_Grava_Estatisticas", objNFiscal, CADASTRAMENTO_DOC)
        If lErro <> SUCESSO Then gError 52965
    
        'Verifica se o modulo de Livros Fiscais está Ativo
        If gcolModulo.Ativo(MODULO_LIVROSFISCAIS) = MODULO_ATIVO Then
                            
            'Grava o Livro Fiscal a partir da Nota Fiscal
            lErro = CF("NotaFiscal_Grava_Fis", objNFiscal)
            If lErro <> SUCESSO Then gError 69555
        
        End If
        
'    Else
'
''horaentrada
'        'trata da alteração dos dados da nota fiscal.
'        lErro = CF("NFiscal_Alteracao", objNFiscal)
'        If lErro <> SUCESSO Then gError 83331
'
    End If
    
    lErro = CF("NFiscalFatura_GravaCompl", objNFiscal, objContabil)
    If lErro <> SUCESSO Then gError 207690
   
'    lErro = CF("ProjetoInfo_Grava", objNFiscal.objProjetoInfo, PRJ_CR_TIPO_NF, objNFiscal.lNumIntDoc)
'    If lErro <> SUCESSO Then gError 181706
'
'    lErro = CF("NFiscal_Trata_MsgItem", objNFiscal)
'    If lErro <> SUCESSO Then gError 181706
'
'    lErro = CF("NF_Grava_RPS", objNFiscal)
'    If lErro <> SUCESSO Then gError 192480
'
'    'Grava os dados contábeis (contabilidade)
'    If Not (objContabil Is Nothing) Then
'        lErro = objContabil.Contabil_Gravar_Registro(objNFiscal.lNumIntDoc, objNFiscal.lCliente, objNFiscal.iFilialCli, objNFiscal.dtDataSaida, NAO_AVALIA_PELO_CUSTO_REAL_PRODUCAO, NAO_AVISA_LANCAMENTOS_CONTABILIZADOS, objNFiscal.lNumNotaFiscal)
'        If lErro <> SUCESSO Then gError 36502
'    End If
'
'    'Daniel 27/05/2002
'    'Vincula ou desvincula um Orçamento de Venda a uma NFiscal.
'    lErro = CF("NFiscal_AlteraVinculo_Orcamento", objNFiscal)
'    If lErro <> SUCESSO Then gError 94464
'
'    lErro = CF("NFiscal_Valida_NFE", objNFiscal)
'    If lErro <> SUCESSO Then gError 207560
'
'    objNFiscal.objInfoAdic.lNumIntDoc = objNFiscal.lNumIntDoc
'    objNFiscal.objInfoAdic.iTipoDoc = TIPODOC_INFOADIC_NF
'    lErro = CF("InfoAdicionais_Grava", objNFiscal.objInfoAdic)
'    If lErro <> SUCESSO Then gError 181706
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    NFiscal_Grava_EmTrans = SUCESSO

    Exit Function

Erro_NFiscal_Grava_EmTrans:

    NFiscal_Grava_EmTrans = gErr

    Select Case gErr

        Case 35962
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 36502, 44259, 44496, 52964, 52965, 69555, 83331, 192480, 207560, 207690

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149923)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function NFiscalFatura_Grava_EmTrans(ByVal objNFiscal As ClassNFiscal, ByVal objContabil As ClassContabil) As Long
'Grava NFiscal Fatura

Dim lErro As Long
Dim alComando(1 To NUM_MAX_LCOMANDO_NFISCALFAT) As Long
Dim iIndice As Integer

On Error GoTo Erro_NFiscalFatura_Grava_EmTrans

    'Abre os Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 42414
    Next

    
    'Grava NFiscal Fatura
    lErro = CF("NFiscalFatura_Grava_Trans", alComando(), objNFiscal)
    If lErro <> SUCESSO And lErro <> 61401 Then gError 44289
    
    'Se for uma nota nova
    If lErro = SUCESSO Then
        
        'vai trabalhar as notas fiscais que precisam ser checadas quanto
        'a integridade em relacao aos demais dados no bd.
        lErro = Verifica_Integridade_NFiscal(objNFiscal)
        If lErro <> SUCESSO Then gError 133105
        
        'verifica se o cliente possui o crédito para faturar a nota fiscal.
        'Se tiver atualiza tabela de estatistica de liberacao do usuario
        lErro = Processa_NFiscal_Credito(objNFiscal)
        If lErro <> SUCESSO Then gError 44496

        'Grava a Estatística do Cliente
        lErro = CF("FilialCliente_Grava_Estatistica", objNFiscal)
        If lErro <> SUCESSO Then gError 52966

        'Grava a Estatística do Produto Vendido
        lErro = CF("ProdutoVendido_Grava_Estatisticas", objNFiscal, CADASTRAMENTO_DOC)
        If lErro <> SUCESSO Then gError 52967
    
        'Verifica se o modulo de Livros Fiscais está Ativo
        If gcolModulo.Ativo(MODULO_LIVROSFISCAIS) = MODULO_ATIVO Then
                            
            'Grava o Livro Fiscal a partir da Nota Fiscal
            lErro = CF("NotaFiscal_Grava_Fis", objNFiscal)
            If lErro <> SUCESSO Then gError 69556
        
        End If
    
'    Else
'
''horaentrada
'        'trata da alteração dos dados da nota fiscal.
'        lErro = CF("NFiscal_Alteracao", objNFiscal)
'        If lErro <> SUCESSO Then gError 83399
    
    End If
    
    lErro = CF("NFiscalFatura_GravaCompl", objNFiscal, objContabil)
    If lErro <> SUCESSO Then gError 207661

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    NFiscalFatura_Grava_EmTrans = SUCESSO

    Exit Function
    
Erro_NFiscalFatura_Grava_EmTrans:

    NFiscalFatura_Grava_EmTrans = gErr
    
    Select Case gErr
    
        Case 36507, 44289, 44496, 52966, 52967, 69556, 83399, 133105, 181706, 192651, 207566, 207661
    
        Case 42414
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149924)
            
    End Select
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function
    
End Function

Function NFiscalDevolucao_Grava_EmTrans(ByVal objNFiscal As ClassNFiscal, ByVal objContabil As ClassContabil) As Long
'Grava uma NFiscal Devolução

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer

On Error GoTo Erro_NFiscalDevolucao_Grava_EmTrans

    'Abre os Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 39247
    Next
    
    lErro = CF("NFiscalDev_Lock_Gravacao", objNFiscal, alComando(1))
    If lErro <> SUCESSO Then gError 39255
    
    lErro = CF("ItensNFiscalDev_Lock_Gravacao", objNFiscal)
    If lErro <> SUCESSO Then gError 39273
    
    lErro = CF("NFiscalDevolucao_Grava_BD", objNFiscal)
    If lErro <> SUCESSO And lErro <> 61406 Then gError 39274
    
    'Se for uma nota nova
    If lErro = SUCESSO Then
        
        'Grava a Estatística da Filial Fornecedor
        lErro = CF("FilialFornecedor_Grava_Estatisticas", objNFiscal, CADASTRAMENTO_FILIALFORNFILEMP)
        If lErro <> SUCESSO Then gError 52988
    
        'Verifica se o modulo de Livros Fiscais está Ativo
        If gcolModulo.Ativo(MODULO_LIVROSFISCAIS) = MODULO_ATIVO Then
                            
            'Grava o Livro Fiscal a partir da Nota Fiscal
            lErro = CF("NotaFiscal_Grava_Fis", objNFiscal)
            If lErro <> SUCESSO Then gError 69557
        
        End If
        
'    Else
'
'        'trata da alteração dos dados da nota fiscal.
'        lErro = CF("NFiscal_Alteracao", objNFiscal)
'        If lErro <> SUCESSO Then gError 83417
    
    End If
    
    lErro = CF("NFiscalRemessa_GravaCompl", objNFiscal, objContabil)
    If lErro <> SUCESSO Then gError 207769
    
    'Libera comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    NFiscalDevolucao_Grava_EmTrans = SUCESSO

    Exit Function
    
Erro_NFiscalDevolucao_Grava_EmTrans:

    NFiscalDevolucao_Grava_EmTrans = gErr
    
    Select Case gErr
    
        Case 36505, 36506, 39273, 39274, 52988, 69557, 83417, 181706, 207769
    
        Case 39247
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 39257
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_NATUREZAOP", gErr, objNFiscal.sNaturezaOp)
                        
        Case 39261, 39262
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIAISCLIENTES", gErr, objNFiscal.lCliente, objNFiscal.iFilialCli)

        Case 39263
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FILIALCLIENTE_INEXISTENTE", gErr, objNFiscal.iFilialCli, objNFiscal.lCliente)
            
        Case 39264
            If objNFiscal.lFornecedor > 0 Then
                lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_FILIAISFORNECEDORES1", gErr, objNFiscal.lFornecedor, objNFiscal.iFilialForn)
            Else
                lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_FILIAISCLIENTES", gErr, objNFiscal.lCliente, objNFiscal.iFilialCli)
            End If
        
        Case 39265, 39266
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SERIE", gErr, objNFiscal.sSerie)
        
        Case 39267
            lErro = Rotina_Erro(vbOKOnly, "ERRO_SERIE_NAO_CADASTRADA", gErr, objNFiscal.sSerie)
        
        Case 39268
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_SERIE", gErr)
        
        Case 39269, 39270
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TRANSPORTADORA", gErr, objNFiscal.iCodTransportadora)
        
        Case 39271
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TRANSPORTADORA_NAO_CADASTRADA", gErr, objNFiscal.iCodTransportadora)
            
        Case 39272
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_TRANSPORTADORA", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149925)
            
    End Select
    
    'Libera comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function
    
End Function

Function NFiscalRemessa_Grava_EmTrans(ByVal objNFiscal As ClassNFiscal, ByVal objContabil As ClassContabil) As Long

Dim lErro As Long
Dim alComando(0 To 2) As Long
Dim lNumIntDoc As Long
Dim dtDataEmissao As Date
Dim vbMsgRes As VbMsgBoxResult
Dim iIndice As Integer, bNFNova As Boolean

On Error GoTo Erro_NFiscalRemessa_Grava_EmTrans

    'Abre os Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 42060
    Next
    
    bNFNova = False

    lErro = CF("NFiscalRemessa_Lock_Gravacao", objNFiscal, alComando(1))
    If lErro <> SUCESSO Then gError 39220
    
    lErro = CF("NFiscal_TabelaPreco_Lock", alComando(2), objNFiscal)
    If lErro <> SUCESSO Then gError 51624
        
    'Faz os "Lock's" relacionados aos itens da NF
    lErro = CF("ItensNFiscalRem_Lock_Gravacao", objNFiscal)
    If lErro <> SUCESSO Then gError 42086
    
'    If objNFiscal.iTipoNFiscal = DOCINFO_NFISSRGOV Then
'        objNFiscal.sMensagemCorpoNota = "INEP: " & CStr(objNFiscal.lCliente) & " " & objNFiscal.sMensagemCorpoNota
'    End If
    
    lErro = CF("NFiscalRemessa_Grava_BD", objNFiscal)
    If lErro <> SUCESSO And lErro <> 61408 Then gError 42087
    
    'se for uma nota nova
    If lErro = SUCESSO Then
    
        bNFNova = True
       
        'Verifica se o modulo de Livros Fiscais está Ativo
        If gcolModulo.Ativo(MODULO_LIVROSFISCAIS) = MODULO_ATIVO Then
                                
            'Grava o Livro Fiscal a partir da Nota Fiscal
            lErro = CF("NotaFiscal_Grava_Fis", objNFiscal)
            If lErro <> SUCESSO Then gError 69558
            
        End If
                
'    Else
'
''horaentrada
'        'trata da alteração dos dados da nota fiscal.
'        lErro = CF("NFiscal_Alteracao", objNFiscal)
'        If lErro <> SUCESSO Then gError 83409
    
    End If
    
    lErro = CF("NFiscalRemessa_GravaCompl", objNFiscal, objContabil)
    If lErro <> SUCESSO Then gError 207706
    
    'Fecha os comanos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    If objNFiscal.iTipoNFiscal = DOCINFO_NFISSRGOV And bNFNova Then
        
        lErro = NFiscalGov_Grava(objNFiscal)
        If lErro <> SUCESSO Then gError 42087
    
    End If
    
    NFiscalRemessa_Grava_EmTrans = SUCESSO

    Exit Function
    
Erro_NFiscalRemessa_Grava_EmTrans:

    NFiscalRemessa_Grava_EmTrans = gErr
    
    Select Case gErr
    
        Case 36503, 36504, 39220, 42086, 42087, 51624, 69558, 83409, 181706, 207570, 207706
        
        Case 42060
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149926)
            
    End Select
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function
    
End Function

Function NFiscalPedido_Grava_EmTrans(ByVal objNFiscal As ClassNFiscal, ByVal objContabil As ClassContabil) As Long
'Faz a gravação de uma nota fiscal gerada a partir de um pedido de venda

Dim lErro As Long
Dim objPedidoVenda As New ClassPedidoDeVenda
Dim alComando1(1 To 29) As Long
Dim alComando(1 To NUM_MAX_LCOMANDO_NFISCAL) As Long
Dim iIndice As Integer
Dim dQuantFaturada As Double
Dim dQuantNaoCancelada As Double
Dim objMovEstoque As ClassMovEstoque
Dim dQuantPedida As Double
Dim dQuantCancelada As Double
Dim iStatus As Integer
Dim lNumIntDoc As Long
Dim bFaturouFaixa As Boolean

On Error GoTo Erro_NFiscalPedido_Grava_EmTrans
   
    'Abre os comandos
    For iIndice = LBound(alComando1) To UBound(alComando1)
        alComando1(iIndice) = Comando_Abrir()
        If alComando1(iIndice) = 0 Then gError 46055
    Next
    
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 46595
    Next
        
    'Verifica se já existe nota com esses dados
    lErro = Comando_Executar(alComando1(29), "SELECT NumIntDoc FROM TipoDocInfoNFiscal WHERE FilialEmpresa = ? AND Serie = ? AND NumNotaFiscal = ? AND DataEmissao = ? AND Status <> ? AND (Tipo = ? OR Tipo = ?) ", lNumIntDoc, objNFiscal.iFilialEmpresa, objNFiscal.sSerie, objNFiscal.lNumNotaFiscal, objNFiscal.dtDataEmissao, STATUS_EXCLUIDO, DOCINFO_NF_INT_ENTRADA, DOCINFO_NF_INT_SAIDA)
    If lErro <> AD_SQL_SUCESSO Then gError 61418
    
    lErro = Comando_BuscarPrimeiro(alComando1(29))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 61419
    
    objPedidoVenda.lCodigo = objNFiscal.lNumPedidoVenda
    objPedidoVenda.iFilialEmpresa = objNFiscal.iFilialPedido
        
    'Nova nota Fiscal
    If lErro = AD_SQL_SEM_DADOS Then
        
        'Lê e faz lock no Pedido de Venda
        lErro = CF("PedidoDeVenda_Le_Lock", alComando1(1), objPedidoVenda)
        If lErro <> SUCESSO And lErro <> 36986 Then gError 46079
        If lErro <> SUCESSO Then gError 46084
        
        'Se a Filial de faturamento for diferente da filialempresa atual --> erro.
        If objPedidoVenda.iFilialEmpresaFaturamento <> giFilialEmpresa Then gError 35643
        
        'Lê os bloqueios do Pedido de venda
        lErro = CF("BloqueiosPV_Le", objPedidoVenda)
        If lErro <> SUCESSO Then gError 51470
        
        'Verifica se o Pedido de venda possui bloqueios que possam impedir seu faturamento
        lErro = PedidoDeVenda_TestaBloqueios(objPedidoVenda)
        If lErro <> SUCESSO And lErro <> 25741 Then gError 51471
        If lErro = 25741 Then gError 46942
         
        'Verifica se o cliente possui o crédito para faturar a nota fiscal
        'Se não tiver atualiza tabela de estatistica de liberacao do usuario
        lErro = Processa_NFiscal_Credito(objNFiscal)
        If lErro <> SUCESSO Then gError 25743
                
        'Nos ítens da NF coloca o NumIntDoc do PedidoVenda
        For iIndice = 1 To objNFiscal.colItensNF.Count
            objNFiscal.colItensNF(iIndice).lNumIntPedVenda = objPedidoVenda.lNumIntDoc
        Next
        
        'Tenta liberar reservas do Pedido igual quant. usadas na NF
        lErro = ReservasPV_Libera_QuantFaturadaNF(objNFiscal)
        If lErro <> SUCESSO Then gError 25775
    
    End If
    
    'Chama a função de gravação de uma nota fiscal
    lErro = CF("NFiscal_Grava_Trans", alComando(), objNFiscal)
    If lErro <> SUCESSO And lErro <> 61403 Then gError 46594
    
    'se a nota é nova
    If lErro = SUCESSO Then
        
        'OK ?? Shirley encapsular como em NFiscalFaturaPedido_Grava
        lErro = ItensPV_AtualizaQuantFaturada(alComando(3), alComando(4), objNFiscal)
        If lErro <> SUCESSO Then gError 51749
        
        'Atualiza, para cada produto, a quantidade em pedido em ProdutosFilial
        lErro = CF("ProdutoFilial_Subtrai_NF_QuantPedida", objNFiscal)
        If lErro <> SUCESSO Then gError 51497
    
        'Grava a Estatística do Cliente
        lErro = CF("FilialCliente_Grava_Estatistica", objNFiscal)
        If lErro <> SUCESSO Then gError 52968
        
        'Grava a Estatística do Produto Vendido
        lErro = CF("ProdutoVendido_Grava_Estatisticas", objNFiscal, CADASTRAMENTO_DOC)
        If lErro <> SUCESSO Then gError 52969
        
        'Lê ítens de Pedido Venda
        lErro = CF("PedidoDeVenda_Le_Itens", objPedidoVenda)
        If lErro <> AD_SQL_SUCESSO Then gError 51516
        
        'Verifica se tem quantidade não cancelada
        lErro = PedVenda_QuantNaoCancelada(objPedidoVenda, dQuantNaoCancelada, bFaturouFaixa)
        If lErro <> SUCESSO Then gError 51517
    
        'Se nao tiver quantidade nao cancelada, baixa o Pedido
        If dQuantNaoCancelada = 0 Or bFaturouFaixa Then
    
            lErro = CF("PedidoDeVenda_Baixar", alComando1, objPedidoVenda)
            If lErro <> SUCESSO Then gError 51518
         
        End If
        
        lErro = CF("PV_Andamento_Auto", objPedidoVenda, PV_STATUS_ANDAMENTO_TIPO_NF_GRAVA)
        If lErro <> SUCESSO Then gError 51518
        
        'Verifica se o modulo de Livros Fiscais está Ativo
        If gcolModulo.Ativo(MODULO_LIVROSFISCAIS) = MODULO_ATIVO Then
                            
            'Grava o Livro Fiscal a partir da Nota Fiscal
            lErro = CF("NotaFiscal_Grava_Fis", objNFiscal)
            If lErro <> SUCESSO Then gError 69559
        
        End If
        
'    Else
    
''horaentrada
'        'trata da alteração dos dados da nota fiscal.
'        lErro = CF("NFiscal_Alteracao", objNFiscal)
'        If lErro <> SUCESSO Then gError 83400
    
    End If
    
    lErro = CF("NFiscalPedido_GravaCompl", objNFiscal, objContabil)
    If lErro <> SUCESSO Then gError 207740
        
    'Fecha os comandos
    For iIndice = LBound(alComando1) To UBound(alComando1)
        Call Comando_Fechar(alComando1(iIndice))
    Next
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    NFiscalPedido_Grava_EmTrans = SUCESSO
    
    Exit Function
    
Erro_NFiscalPedido_Grava_EmTrans:

    NFiscalPedido_Grava_EmTrans = gErr
    
    '?? Shirley tratamento de erros faltando (46614, 46615, 46616 outros ??). Checar tudo e colocar os erros em ordem.
    '?? Não deixar erro que não existe na rotina
    
    Select Case gErr
    
        Case 25778
            lErro = Rotina_Erro(vbOKOnly, "ERRO_QUANT_FATURADA_MAIOR_QUANT_A_FATURAR", gErr, objNFiscal.colItensNF(iIndice).lNumIntItemPedVenda)
        
        Case 35643
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FILIALFATURAMENTO_DIFERENTE", gErr)
                    
        Case 46055
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 25743, 25775, 35645, 46079, 46594, 51470, 51471, 52968, 53969, 51497, 51516 To 51520, 51749, 69559, 83400, 181706, 183220, 207569, 207740
        
        Case 46084
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PEDIDO_VENDA_NAO_CADASTRADO1", gErr, objPedidoVenda.lCodigo, objPedidoVenda.iFilialEmpresa)
        
        Case 46942
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PEDIDO_VENDA_BLOQUEIO", gErr, objPedidoVenda.lCodigo)
        
        Case 61418, 61419
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", gErr)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149927)
    
    End Select
    
    For iIndice = LBound(alComando1) To UBound(alComando1)
        Call Comando_Fechar(alComando1(iIndice))
    Next
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function NFiscalRemPedido_Grava_EmTrans(ByVal objNFiscal As ClassNFiscal, ByVal objBloqueioPV As ClassBloqueioPV, ByVal objContabil As ClassContabil) As Long
'Faz a gravação de uma nota fiscal remessa gerada a partir de um pedido de venda

Dim lErro As Long
Dim objPedidoVenda As New ClassPedidoDeVenda
Dim alComando1(1 To 29) As Long
Dim alComando(1 To NUM_MAX_LCOMANDO_NFISCAL) As Long
Dim iIndice As Integer
Dim dQuantFaturada As Double
Dim dQuantNaoCancelada As Double
Dim objMovEstoque As ClassMovEstoque
Dim dQuantPedida As Double
Dim dQuantCancelada As Double
Dim iStatus As Integer
Dim lNumIntDoc As Long
Dim bFaturouFaixa As Boolean

On Error GoTo Erro_NFiscalRemPedido_Grava_EmTrans
   
    'Abre os comandos
    For iIndice = LBound(alComando1) To UBound(alComando1)
        alComando1(iIndice) = Comando_Abrir()
        If alComando1(iIndice) = 0 Then gError 96000
    Next
    
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 96001
    Next

    'Verifica se já existe nota com esses dados
    lErro = Comando_Executar(alComando1(29), "SELECT NumIntDoc FROM TipoDocInfoNFiscal WHERE FilialEmpresa = ? AND Serie = ? AND NumNotaFiscal = ? AND DataEmissao = ? AND Status <> ? AND Tipo =? ", lNumIntDoc, giFilialEmpresa, objNFiscal.sSerie, objNFiscal.lNumNotaFiscal, objNFiscal.dtDataEmissao, STATUS_EXCLUIDO, DOCINFO_NF_INT_SAIDA)
    If lErro <> AD_SQL_SUCESSO Then gError 96002
    
    lErro = Comando_BuscarPrimeiro(alComando1(29))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 96003
    
    objPedidoVenda.lCodigo = objNFiscal.lNumPedidoVenda
    objPedidoVenda.iFilialEmpresa = objNFiscal.iFilialPedido
        
    'Nova nota Fiscal
    If lErro = AD_SQL_SEM_DADOS Then
        
        'Lê e faz lock no Pedido de Venda
        lErro = CF("PedidoDeVenda_Le_Lock", alComando1(1), objPedidoVenda)
        If lErro <> SUCESSO And lErro <> 36986 Then gError 96004
        If lErro <> SUCESSO Then gError 96005
        
        'Se a Filial de faturamento for diferente da filialempresa atual --> erro.
        If objPedidoVenda.iFilialEmpresaFaturamento <> giFilialEmpresa Then gError 96006
        
        'Lê os bloqueios do Pedido de venda
        lErro = CF("BloqueiosPV_Le", objPedidoVenda)
        If lErro <> SUCESSO Then gError 96007
        
        For Each objBloqueioPV In objPedidoVenda.colBloqueiosPV

            If objBloqueioPV.iTipoDeBloqueio = BLOQUEIO_CREDITO Then
           
                lErro = CF("Bloqueio_Libera_Automatico", objBloqueioPV)
                If lErro <> SUCESSO Then gError 96069

            End If
        Next
        
        'Verifica se o Pedido de venda possui bloqueios que possam impedir seu faturamento
        lErro = PedidoDeVenda_TestaBloqueios(objPedidoVenda)
        If lErro <> SUCESSO And lErro <> 25741 Then gError 96008
        If lErro = 25741 Then gError 96009
         
        'Nos ítens da NF coloca o NumIntDoc do PedidoVenda
        For iIndice = 1 To objNFiscal.colItensNF.Count
            objNFiscal.colItensNF(iIndice).lNumIntPedVenda = objPedidoVenda.lNumIntDoc
        Next
        
        'Tenta liberar reservas do Pedido igual quant. usadas na NF
        lErro = ReservasPV_Libera_QuantFaturadaNF(objNFiscal)
        If lErro <> SUCESSO Then gError 96011
    
    End If

    'Chama função de gravação de uma nota fiscal Remessa
    lErro = CF("NFiscalRemessa_Lock_Gravacao", objNFiscal, alComando(1))
    If lErro <> SUCESSO Then gError 96012
    
    lErro = CF("NFiscal_TabelaPreco_Lock", alComando(2), objNFiscal)
    If lErro <> SUCESSO Then gError 96013
        
    'Faz os "Lock's" relacionados aos itens da NF
    lErro = CF("ItensNFiscalRemPedido_Lock_Gravacao", objNFiscal)
    If lErro <> SUCESSO Then gError 96014
    
    
    'Janaina
    'Insere uma Nota Fiscal de Saida no Banco de Dados
    lErro = NFiscal_Grava_BD(alComando(), objNFiscal)
    If lErro <> SUCESSO And lErro <> 61400 Then gError 96098
    'Janaina
   
    'se a nota é nova
    If lErro = SUCESSO Then
        
        lErro = ItensPV_AtualizaQuantFaturada(alComando(3), alComando(4), objNFiscal)
        If lErro <> SUCESSO Then gError 96016
        
        'Atualiza, para cada produto, a quantidade em pedido em ProdutosFilial
        lErro = CF("ProdutoFilial_Subtrai_NF_QuantPedida", objNFiscal)
        If lErro <> SUCESSO Then gError 96017
    
        'Lê ítens de Pedido Venda
        lErro = CF("PedidoDeVenda_Le_Itens", objPedidoVenda)
        If lErro <> AD_SQL_SUCESSO Then gError 96020
        
        'Verifica se tem quantidade não cancelada
        lErro = PedVenda_QuantNaoCancelada(objPedidoVenda, dQuantNaoCancelada, bFaturouFaixa)
        If lErro <> SUCESSO Then gError 96021
    
        'Se nao tiver quantidade nao cancelada, baixa o Pedido
        If dQuantNaoCancelada = 0 Or bFaturouFaixa Then
    
            lErro = CF("PedidoDeVenda_Baixar", alComando1, objPedidoVenda)
            If lErro <> SUCESSO Then gError 96022
         
        End If
        
        lErro = CF("PV_Andamento_Auto", objPedidoVenda, PV_STATUS_ANDAMENTO_TIPO_NF_GRAVA)
        If lErro <> SUCESSO Then gError 96022
        
        'Verifica se o modulo de Livros Fiscais está Ativo
        If gcolModulo.Ativo(MODULO_LIVROSFISCAIS) = MODULO_ATIVO Then
                            
            'Grava o Livro Fiscal a partir da Nota Fiscal
            lErro = CF("NotaFiscal_Grava_Fis", objNFiscal)
            If lErro <> SUCESSO Then gError 96023
        
        End If
        
'    Else
'
'        'trata da alteração dos dados da nota fiscal.
'        lErro = CF("NFiscal_Alteracao", objNFiscal)
'        If lErro <> SUCESSO Then gError 96024
    
    End If

    lErro = CF("NFiscalRemessa_GravaCompl", objNFiscal, objContabil)
    If lErro <> SUCESSO Then gError 207707

   
    'Fecha os comandos
    For iIndice = LBound(alComando1) To UBound(alComando1)
        Call Comando_Fechar(alComando1(iIndice))
    Next
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    NFiscalRemPedido_Grava_EmTrans = SUCESSO
    
    
    Exit Function
    
Erro_NFiscalRemPedido_Grava_EmTrans:

    NFiscalRemPedido_Grava_EmTrans = gErr
    
    Select Case gErr
      
        Case 96000, 96001
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 96002, 96003
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", gErr)
 
        Case 96005
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PEDIDO_VENDA_NAO_CADASTRADO1", gErr, objPedidoVenda.lCodigo, objPedidoVenda.iFilialEmpresa)
        
        Case 96006
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FILIALFATURAMENTO_DIFERENTE", gErr)

        Case 96009
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PEDIDO_VENDA_BLOQUEIO", gErr, objPedidoVenda.lCodigo)

        Case 96010, 96011, 96004, 96007, 96008, 96018, 96017, 96020, 96016, 96023, 96024, 96012, 96013, 96014, 96015, 96019, 96021, 96022, 96025, 96026, 96069, 96098, 181706, 207571, 207707
      
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149928)
    
    End Select
    
    For iIndice = LBound(alComando1) To UBound(alComando1)
        Call Comando_Fechar(alComando1(iIndice))
    Next
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function NFiscalFaturaPedido_Grava_EmTrans(ByVal objNFiscal As ClassNFiscal, ByVal objContabil As ClassContabil) As Long
'Faz a gravação de uma nota fiscal fatura gerada a partir de um pedido de venda

Dim lErro As Long
Dim objPedidoVenda As New ClassPedidoDeVenda
Dim alComando1(1 To 30) As Long
Dim alComando(1 To NUM_MAX_LCOMANDO_NFISCALFAT) As Long
Dim iIndice As Integer
Dim dQuantFaturada As Double
Dim dQuantNaoCancelada As Double
Dim objMovEstoque As ClassMovEstoque
Dim dQuantPedida As Double
Dim dQuantCancelada  As Double
Dim iStatus As Integer
Dim lNumIntDoc As Long
Dim bFaturouFaixa As Boolean

On Error GoTo Erro_NFiscalFaturaPedido_Grava_EmTrans
   
    'Abre os comandos
    For iIndice = LBound(alComando1) To UBound(alComando1)
        alComando1(iIndice) = Comando_Abrir()
        If alComando1(iIndice) = 0 Then gError 46055
    Next
    
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 46595
    Next
        
    'Verifica se já existe nota com esses dados
    lErro = Comando_Executar(alComando1(30), "SELECT NumIntDoc FROM TipoDocInfoNFiscal WHERE FilialEmpresa = ? AND Serie = ? AND NumNotaFiscal = ? AND DataEmissao = ? AND Status <> ? AND (Tipo = ? OR Tipo = ?) ", lNumIntDoc, giFilialEmpresa, objNFiscal.sSerie, objNFiscal.lNumNotaFiscal, objNFiscal.dtDataEmissao, STATUS_EXCLUIDO, DOCINFO_NF_INT_ENTRADA, DOCINFO_NF_INT_SAIDA)
    If lErro <> AD_SQL_SUCESSO Then gError 61416
    
    lErro = Comando_BuscarPrimeiro(alComando1(30))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 61417
    
    objPedidoVenda.lCodigo = objNFiscal.lNumPedidoVenda
    objPedidoVenda.iFilialEmpresa = objNFiscal.iFilialPedido
    
    'Nova nota Fiscal
    If lErro = AD_SQL_SEM_DADOS Then
        
        'Lê e faz lock no Pedido de Venda
        lErro = CF("PedidoDeVenda_Le_Lock", alComando1(1), objPedidoVenda)
        If lErro <> SUCESSO And lErro <> 36986 Then gError 46079
        
        If lErro <> SUCESSO Then gError 46084
    
        'Se a Filial de faturamento for diferente da filialempresa atual --> erro.
        If objPedidoVenda.iFilialEmpresaFaturamento <> giFilialEmpresa Then gError 35643
    
        'Lê os bloqueios do Pedido de venda
        lErro = CF("BloqueiosPV_Le", objPedidoVenda)
        If lErro <> SUCESSO Then gError 46983
    
        'Verifica se o Pedido de venda possui bloqueios que possam impedir seu faturamento
        lErro = PedidoDeVenda_TestaBloqueios(objPedidoVenda)
        If lErro <> SUCESSO And lErro <> 25741 Then gError 51469
        If lErro = 25741 Then gError 46941
     
        'Verifica se o cliente possui o crédito para faturar a nota fiscal
        'Se não tiver atualiza tabela de estatistica de liberacao do usuario
        lErro = Processa_NFiscal_Credito(objNFiscal)
        If lErro <> SUCESSO Then gError 25742
            
        'Nos ítens da NF coloca o NumIntDoc do PedidoVenda
        For iIndice = 1 To objNFiscal.colItensNF.Count
            objNFiscal.colItensNF(iIndice).lNumIntPedVenda = objPedidoVenda.lNumIntDoc
        Next
    
        'se nao for faturamento de venda para entrega futura
        If objNFiscal.iTipoNFiscal <> DOCINFO_NFIFVEFPV Then
        
            'Tenta liberar reservas do Pedido igual quant. usadas na NF
            lErro = ReservasPV_Libera_QuantFaturadaNF(objNFiscal)
            If lErro <> SUCESSO Then gError 51580

        End If
        
    End If
    
    'Chama a função de gravação de uma nota fiscal
    lErro = CF("NFiscalFatura_Grava_Trans", alComando(), objNFiscal)
    If lErro <> SUCESSO And lErro <> 61401 Then gError 46594
    
    'Se for uma nota nova
    If lErro = SUCESSO Then
    
        'se nao for faturamento de venda para entrega futura
        If objNFiscal.iTipoNFiscal <> DOCINFO_NFIFVEFPV Then
        
            'OK ?? Shirley, precisa de colItemPedido ? Não tem os ítens a partir de ítens NF ?
            'OK ?? Encapsular em ItensPV_AtualizaQuantFaturada(objNFiscal)
            lErro = ItensPV_AtualizaQuantFaturada(alComando(3), alComando(4), objNFiscal)
            If lErro <> SUCESSO Then gError 51748
            
            'Atualiza estatística de QuantPedida em ProdutoFilial
            lErro = CF("ProdutoFilial_Subtrai_NF_QuantPedida", objNFiscal)
            If lErro <> SUCESSO Then gError 51497

        End If
        
        'Grava a Estatística do Cliente
        lErro = CF("FilialCliente_Grava_Estatistica", objNFiscal)
        If lErro <> SUCESSO Then gError 52970
        
        'Grava a Estatística do Produto Vendido
        lErro = CF("ProdutoVendido_Grava_Estatisticas", objNFiscal, CADASTRAMENTO_DOC)
        If lErro <> SUCESSO Then gError 52971
            
        'Le Itens de PV
        lErro = CF("PedidoDeVenda_Le_Itens", objPedidoVenda)
        If lErro <> AD_SQL_SUCESSO Then gError 51492
            
        If objNFiscal.iTipoNFiscal <> DOCINFO_NFIFVEFPV Then
            
            'Verifica se tem quantidade não cancelada
            lErro = PedVenda_QuantNaoCancelada(objPedidoVenda, dQuantNaoCancelada, bFaturouFaixa)
            If lErro <> SUCESSO Then gError 51493
        
            'Se nao tiver quantidade nao cancelada, baixa o Pedido
            If Abs(dQuantNaoCancelada) < QTDE_ESTOQUE_DELTA Or bFaturouFaixa Then 'Alterado por Wagner
        
                lErro = CF("PedidoDeVenda_Baixar", alComando1, objPedidoVenda)
                If lErro <> SUCESSO Then gError 51494
             
            End If
    
        End If
        
        lErro = CF("PedidoDeVenda_Fatura_Customizado", objNFiscal, objPedidoVenda)
        If lErro <> SUCESSO Then gError 51494
        
        lErro = CF("PV_Andamento_Auto", objPedidoVenda, PV_STATUS_ANDAMENTO_TIPO_NF_GRAVA)
        If lErro <> SUCESSO Then gError 51493
        
        'Verifica se o modulo de Livros Fiscais está Ativo
        If gcolModulo.Ativo(MODULO_LIVROSFISCAIS) = MODULO_ATIVO Then
                            
            'Grava o Livro Fiscal a partir da Nota Fiscal
            lErro = CF("NotaFiscal_Grava_Fis", objNFiscal)
            If lErro <> SUCESSO Then gError 69560
        
        End If
    
'    Else
'
''horaentrada
'        'trata da alteração dos dados da nota fiscal.
'        lErro = CF("NFiscal_Alteracao", objNFiscal)
'        If lErro <> SUCESSO Then gError 83401
    
    End If
    
    lErro = CF("NFiscalPedido_GravaCompl", objNFiscal, objContabil)
    If lErro <> SUCESSO Then gError 207759

    
    'Fecha os comandos
    For iIndice = LBound(alComando1) To UBound(alComando1)
        Call Comando_Fechar(alComando1(iIndice))
    Next
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    NFiscalFaturaPedido_Grava_EmTrans = SUCESSO
    
    Exit Function
    
Erro_NFiscalFaturaPedido_Grava_EmTrans:

    NFiscalFaturaPedido_Grava_EmTrans = gErr
    
    Select Case gErr
    
        Case 25742, 35645, 46079, 46594, 52970, 52971, 51469, 51580, 51748, 69560, 83401, 181706, 183235
        
        Case 35643
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FILIALFATURAMENTO_DIFERENTE", gErr)
        
        Case 46055
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 46084
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PEDIDO_VENDA_NAO_CADASTRADO1", gErr, objPedidoVenda.lCodigo, objPedidoVenda.iFilialEmpresa)
        
        Case 46941
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PEDIDO_VENDA_BLOQUEIO", gErr, objPedidoVenda.lCodigo)
        
        Case 51492, 51493, 51494, 51495, 51496, 51497, 51526, 207567, 207759
        
        Case 61416, 61417
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", gErr)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149929)
    
    End Select
    
    For iIndice = LBound(alComando1) To UBound(alComando1)
        Call Comando_Fechar(alComando1(iIndice))
    Next
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function
    
End Function

Function PedidoDeVenda_Fatura_Customizado(ByVal objNFiscal As ClassNFiscal, ByVal objPedidoVenda As ClassPedidoDeVenda) As Long
    PedidoDeVenda_Fatura_Customizado = SUCESSO
End Function

Public Sub Redimensiona_Tam_MsgNF(ByVal objControle As Object)

    'a inpal pediu o dobro do tamanho do campo da nota fiscal
    objControle.MaxLength = STRING_NFISCAL_MENSAGEM

End Sub

Function Retorna_Almoxarifado_Alternativo(iAlmoxarifadoPadrao As Integer, iFilialEmpresa As Integer) As Long

    iAlmoxarifadoPadrao = 0
    iFilialEmpresa = 0

    Retorna_Almoxarifado_Alternativo = SUCESSO
    
End Function

Function Calcula_Quantidade_Alocada(colAlocacoes As ColAlocacoesItemNF, dQuantidade As Double) As Long

    Calcula_Quantidade_Alocada = SUCESSO
    
End Function

Public Function CustoEmbMP_Exclui(ByVal objCustoEmb As ClassCustoEmbMP) As Long
'Exclui dados do BD da tabela "CustoEmbMP"

Dim alComando(1) As Long
Dim sProduto As String
Dim lTransacao As Long
Dim lErro As Long
Dim iIndice As Integer
Dim tCustoEmb As typeCustoEmbMP

On Error GoTo Erro_CustoEmbMP_Exclui

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 116326

    'abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 116325
    Next

    'inicializa a string p/ receber o produto
    sProduto = String(STRING_PRODUTO, 0)

    'faz uma busca no Bd a partir do produto
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Produto FROM CustoEmbMP WHERE Produto = ? AND FilialEmpresa = ?", 0, sProduto, objCustoEmb.sProduto, objCustoEmb.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 116327

    'busca o primeiro registro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 116333

    'se nao achou, erro
    If lErro = AD_SQL_SEM_DADOS Then gError 116328

    'faz um lock exclusivo no registro encontrado
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> SUCESSO Then gError 116329

    'exclui os campos da tabela CustoEMbMP
    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM CustoEmbMP", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 116330

    '#######################################
    'Inserido por Wagner 07/12/2005
    lErro = CustoEmbMPAux_Exclui(objCustoEmb)
    If lErro <> SUCESSO Then gError 141321
    '#######################################
        
    'confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 116331

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    CustoEmbMP_Exclui = SUCESSO

    Exit Function

Erro_CustoEmbMP_Exclui:

    CustoEmbMP_Exclui = gErr

    Select Case gErr

        Case 116325
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 116326
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 116327, 116333
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CUSTOEMBMP", gErr)

        Case 116328
            Call Rotina_Erro(vbOKOnly, "ERRO_CUSTO_NAO_EXISTENTE", gErr, objCustoEmb.sProduto)

        Case 116329
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_EXCLUSIVE", gErr)

        Case 116330
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CUSTOPRODUTO", gErr, objCustoEmb.sProduto)

        Case 116331
            Call Rotina_Erro(vbOKOnly, "ERRO_TRANSACAO_COMMIT", gErr)

        Case 141321 'Inserido por Wagner

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149930)

    End Select

    Call Transacao_Rollback

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function CustoEmbMP_Grava(ByVal objCustoEmb As ClassCustoEmbMP) As Long
'Grava alterações e inserções no BD

Dim lErro As Long
Dim alComando(2) As Long
Dim lTransacao As Long
Dim objProduto As New ClassProduto
Dim sProduto As String
Dim iIndice As Integer

On Error GoTo Erro_CustoEmbMP_Grava

    'abre a transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 116315

    'abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 116314
    Next

    'inicializa a string do produto
    sProduto = String(STRING_PRODUTO, 0)

    'faz uma busca no Bd p/a verificar se o produto tem relacao c/ o custo
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Produto FROM CustoEmbMP WHERE Produto = ? AND FilialEmpresa = ?", 0, sProduto, objCustoEmb.sProduto, objCustoEmb.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 116316

    'tenta buscar o registro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 116317

    'se não encontrou
    If lErro = AD_SQL_SEM_DADOS Then

        'carrega o cód. do produto p/ ele ser passado como parametro
        objProduto.sCodigo = objCustoEmb.sProduto
    
        'faz um lock shared no produto passado como parametro
        lErro = CF("Produto_Lock_Shared", alComando(0), objProduto)
        If lErro <> SUCESSO And lErro <> 55235 Then gError 116332

        'insere um novo registro
        With objCustoEmb
            lErro = Comando_Executar(alComando(2), "INSERT INTO CustoEmbMP(FilialEmpresa, Produto , DataAtualizacao, Custo, AliquotaICMS, CondicaoPagto, FretePorKg, AliquotaICMSInf, CondicaoPagtoInf, FretePorKGInf ) VALUES (?,?,?,?,?,?,?,?,?,?)", .iFilialEmpresa, .sProduto, .dtDataAtualizacao, .dCusto, .dAliquotaICMS, .iCondicaoPagto, .dFretePorKg, .iAliquotaICMSInf, .iCondicaoPagtoInf, .iFretePorKGInf)
        End With
        If lErro <> AD_SQL_SUCESSO Then gError 116318

    'senão
    Else

        'atualiza o existente
        With objCustoEmb
            lErro = Comando_ExecutarPos(alComando(2), "UPDATE CustoEmbMP SET FilialEmpresa = ?, Produto = ?, DataAtualizacao = ?, Custo = ?, AliquotaICMS = ?, CondicaoPagto = ?, FretePorKG = ?, AliquotaICMSInf = ?, CondicaoPagtoInf = ?, FretePorKGInf = ?", alComando(1), .iFilialEmpresa, .sProduto, .dtDataAtualizacao, .dCusto, .dAliquotaICMS, .iCondicaoPagto, .dFretePorKg, .iAliquotaICMSInf, .iCondicaoPagtoInf, .iFretePorKGInf)
        End With
        If lErro <> AD_SQL_SUCESSO Then gError 116319

        '#######################################
        'Inserido por Wagner 07/12/2005
        lErro = CustoEmbMPAux_Exclui(objCustoEmb)
        If lErro <> SUCESSO Then gError 141319
        '#######################################

    End If

    '#######################################
    'Inserido por Wagner 07/12/2005
    lErro = CustoEmbMPAux_Insere(objCustoEmb.colAux)
    If lErro <> SUCESSO Then gError 141320
    '#######################################

    'fecha a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 116320

    'fecha o comamdo
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    CustoEmbMP_Grava = SUCESSO

    Exit Function

Erro_CustoEmbMP_Grava:

    CustoEmbMP_Grava = gErr

    Select Case gErr

        Case 116314
             Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 116315
             Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 116316, 116317
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CUSTOEMBMP", gErr)

        Case 116318
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CUSTOEMBMP", gErr, objCustoEmb.sProduto)

        Case 116319
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_CUSTOEMBMP", gErr, objCustoEmb.sProduto)

        Case 116320
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case 116332
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_SHARED", gErr)

        Case 141319, 141320 'Inserido por Wagner

        Case Else
             Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149931)

    End Select

    Call Transacao_Rollback

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function CustoFixoProd_Grava(ByVal objCustoFixoProd As ClassCustoFixoProd) As Long
'grava ou altera a tabela CustoFixoProd

Dim lErro As Long
Dim alComando(0 To 2) As Long
Dim lTransacao As Long
Dim iIndice As Integer, iAutomatico As Integer

On Error GoTo Erro_CustoFixoProd_Grava

    'abre a transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 116396
    
    'abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 116397
    Next
    
    'Verifico se existe o registro em custofixoprod
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Automatico FROM CustoFixoProd WHERE DataReferencia = ? AND FilialEmpresa = ? AND Produto = ?", 0, iAutomatico, objCustoFixoProd.dtDataReferencia, objCustoFixoProd.iFilialEmpresa, objCustoFixoProd.sProduto)
    If lErro <> AD_SQL_SUCESSO Then gError 116398

    'busca o 1º registro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 116400

    'Se existir => UPDATE, senão => INSERT
    If lErro = AD_SQL_SUCESSO Then
        
        'faz um update apenas no Custo Aplicado
        lErro = Comando_ExecutarPos(alComando(1), "UPDATE CustoFixoProd SET Custo = ?, Automatico = ?", alComando(0), objCustoFixoProd.dCusto, IIf(iAutomatico = CUSTOFIXOPROD_AUTOMATICO, CUSTOFIXOPROD_AUTOMATICO_MANUAL, iAutomatico))
        If lErro <> AD_SQL_SUCESSO Then gError 116401
    
    Else

        'insere a Data, Produto, Custo Aplicado, além da filial e automatico
        lErro = Comando_Executar(alComando(1), "INSERT INTO CustoFixoProd(FilialEmpresa, DataReferencia, Produto, Custo, Automatico) VALUES (?,?,?,?,?)", objCustoFixoProd.iFilialEmpresa, objCustoFixoProd.dtDataReferencia, objCustoFixoProd.sProduto, objCustoFixoProd.dCusto, CUSTOFIXOPROD_MANUAL)
        If lErro <> AD_SQL_SUCESSO Then gError 116402
    
    End If
    
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    'confirma a transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 116399
    
    CustoFixoProd_Grava = SUCESSO

    Exit Function

Erro_CustoFixoProd_Grava:

    CustoFixoProd_Grava = gErr

    Select Case gErr
        
        Case 116397
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 116396
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
        
        Case 116398, 116400
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CUSTOFIXOPROD", gErr)
            
        Case 116401
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_CUSTOFIXOPROD", gErr)
        
        Case 116402
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CUSTOFIXOPROD", gErr)
        
        Case 116399
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
                
    End Select

    Call Transacao_Rollback

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function CustoFixoProd_Exclui(ByVal objCustoFixoProd As ClassCustoFixoProd) As Long
'Exclui os registros da tabela CustoFixoProd

Dim alComando(1) As Long
Dim lTransacao As Long
Dim lErro As Long
Dim iIndice As Integer
Dim iFilialEmpresa As Integer

On Error GoTo Erro_CustoFixoProd_Exclui

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 116403

    'abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 116404
    Next

    'faz uma busca no Bd a partir da data, produto e filial
    lErro = Comando_ExecutarPos(alComando(0), "SELECT FilialEmpresa FROM CustoFixoProd WHERE Produto = ? AND FilialEmpresa = ? AND DataReferencia = ?", 0, iFilialEmpresa, objCustoFixoProd.sProduto, objCustoFixoProd.iFilialEmpresa, objCustoFixoProd.dtDataReferencia)
    If lErro <> AD_SQL_SUCESSO Then gError 116405

    'busca o primeiro registro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 116406

    'se nao achou, erro
    If lErro = AD_SQL_SEM_DADOS Then gError 116407

    'faz um lock exclusivo no registro encontrado
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> SUCESSO Then gError 116408

    'exclui os campos da tabela CustoFixoProd
    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM CustoFixoProd", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 116409

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    'confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 116410

    CustoFixoProd_Exclui = SUCESSO

    Exit Function

Erro_CustoFixoProd_Exclui:

    CustoFixoProd_Exclui = gErr

    Select Case gErr

        Case 116404
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 116403
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 116405, 116406
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CUSTOFIXOPROD", gErr)

        Case 116407
            Call Rotina_Erro(vbOKOnly, "ERRO_CUSTOFIXOPROD_NAO_EXISTENTE", gErr, objCustoFixoProd.dtDataReferencia, objCustoFixoProd.sProduto)

        Case 116408
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_EXCLUSIVE", gErr)

        Case 116409
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CUSTOFIXOPROD", gErr)

        Case 116410
            Call Rotina_Erro(vbOKOnly, "ERRO_TRANSACAO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149932)

    End Select

    Call Transacao_Rollback

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function TipoFreteFP_Grava(ByVal objTipo As ClassTipoFreteFP) As Long
'Atualiza ou insere um novo registro na tabela Tipos de Bloqueio

Dim lErro As Long
Dim alComando(2) As Long
Dim lTransacao As Long
Dim iIndice As Integer
Dim iFilialEmpresa As Integer

On Error GoTo Erro_TipoFreteFP_Grava

    'Abertura comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 116935
    Next

    'inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 116936

    'pesquisa se já é usado o nome reduzido para outro codigo
    lErro = Comando_Executar(alComando(0), "SELECT FilialEmpresa FROM TipoFreteFP WHERE Codigo <> ? AND NomeReduzido = ?", iFilialEmpresa, objTipo.iCodigo, objTipo.sNomeReduzido)
    If lErro <> AD_SQL_SUCESSO Then gError 116937

    'verifica resultado da pesquisa
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 116938

    If lErro <> AD_SQL_SEM_DADOS Then gError 116939

    'pesquisa Tipo no BD
    lErro = Comando_ExecutarPos(alComando(1), "SELECT FilialEmpresa FROM TipoFreteFP WHERE Codigo = ? ", 0, iFilialEmpresa, objTipo.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 116940

    'verifica resultado da pesquisa
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 116941

    If lErro = AD_SQL_SEM_DADOS Then
    'Tipo nao pertence ao BD

        'insere novo registro na tabela Tipos
        lErro = Comando_Executar(alComando(2), "INSERT INTO TipoFreteFP(Codigo, NomeReduzido, Descricao, FilialEmpresa, Preco, DataAtualizacao) VALUES (?,?,?,?,?,?)", objTipo.iCodigo, objTipo.sNomeReduzido, objTipo.sDescricao, giFilialEmpresa, objTipo.dPreco, objTipo.dtDataAtualizacao)
        If lErro <> AD_SQL_SUCESSO Then gError 116942

    Else
    'tipo existe no BD

        If objTipo.iFilialEmpresa <> iFilialEmpresa Then gError 116959
        
        'altera registro na tabela tipo
        lErro = Comando_ExecutarPos(alComando(2), "UPDATE TipoFreteFP SET NomeReduzido = ? , Descricao = ?, DataAtualizacao = ?, Preco = ? ", alComando(1), objTipo.sNomeReduzido, objTipo.sDescricao, objTipo.dtDataAtualizacao, objTipo.dPreco)
        If lErro <> AD_SQL_SUCESSO Then gError 116943

    End If

    'confirma a Transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 116944
 
    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    TipoFreteFP_Grava = SUCESSO

    Exit Function

Erro_TipoFreteFP_Grava:

    TipoFreteFP_Grava = gErr

        Select Case gErr

        Case 116935
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 116936
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 116937, 116938, 116940, 116941
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOFRETE", gErr, objTipo.iCodigo)

        Case 116939
            lErro = Rotina_Erro(vbOKOnly, "ERRO_NOME_REDUZIDO_TIPOFRETE_REPETIDO", gErr, objTipo.sNomeReduzido, objTipo.iCodigo, iFilialEmpresa)

        Case 116942
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_TIPOFRETE", gErr, objTipo.iCodigo)

        Case 116943
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_TIPOFRETE", gErr, objTipo.iCodigo)

        Case 116959
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TIPO_FRETE_OUTRA_FILIAL", gErr, objTipo.iCodigo, iFilialEmpresa)
        
        Case 116944
             lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149933)

    End Select

    Call Transacao_Rollback
    
    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Function TipoFreteFP_Exclui(ByVal objTipo As ClassTipoFreteFP) As Long
'Exclui o tipo do BD

Dim alComando(1) As Long
Dim lTransacao As Long
Dim lErro As Long
Dim iIndice As Integer
Dim iFilialEmpresa As Integer

On Error GoTo Erro_TipoFreteFP_Exclui

    'Abertura comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 116945
    Next
    
    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 116946
    
    'pesquisa Tipo na tabela Tipos de Frete
    lErro = Comando_ExecutarPos(alComando(0), "SELECT FilialEmpresa FROM TipoFreteFP WHERE Codigo = ? ", 0, iFilialEmpresa, objTipo.iCodigo)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 116947

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 116948

    If lErro = AD_SQL_SEM_DADOS Then gError 116949
    
    If iFilialEmpresa <> objTipo.iFilialEmpresa Then gError 116960

    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> SUCESSO Then gError 116950
    
    'verificar se está relacionado com alguma tabela
    lErro = TipoFreteFP_Testa_Vinculo(objTipo)
    If lErro <> SUCESSO Then gError 116951
    
    'exclui Tipo da tabela
    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM TipoFreteFP", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 116952
    
    'confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 116953

    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    TipoFreteFP_Exclui = SUCESSO

    Exit Function

Erro_TipoFreteFP_Exclui:

    TipoFreteFP_Exclui = gErr

    Select Case gErr

        Case 116945
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 116946
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 116947, 116948
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOFRETE", gErr, Error$)

        Case 116949
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TIPOFRETE_NAO_CADASTRADO", gErr, objTipo.iCodigo, giFilialEmpresa)

        Case 116960
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_TIPOFRETE_OUTRA_FILIAL", gErr, objTipo.iCodigo, objTipo.sNomeReduzido, objTipo.iFilialEmpresa)
        
        Case 116952
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_TIPOFRETE", gErr, objTipo.iCodigo)

        Case 116953
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case 116950
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_TIPOFRETE", gErr)
                    
        Case 116951 'Tratado na rotina chamada
                       
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149934)

    End Select

    Call Transacao_Rollback
    
    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function TipoFreteFP_Testa_Vinculo(ByVal objTipo As ClassTipoFreteFP) As Long
'Lê no BD se existe uso deste tipo de Frete em outras tabelas

Dim lErro As Long
Dim lComando As Long
Dim iFilialEmpresa As Integer

On Error GoTo Erro_TipoFreteFP_Testa_Vinculo
    
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 116954
    
    'Procura no BD o uso deste Tipo de Frete na tabela DVVCliente
    lErro = Comando_Executar(lComando, "SELECT FilialEmpresa FROM DVVCliente WHERE TipoFrete=?", iFilialEmpresa, objTipo.iCodigo)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 116955
        
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 116956
    
    'Se Estiver sendo usado(se existe em outra tabela) ==>ERRO
    If lErro = AD_SQL_SUCESSO Then gError 116957
    
    Call Comando_Fechar(lComando)
    
    TipoFreteFP_Testa_Vinculo = SUCESSO
    
    Exit Function
    
Erro_TipoFreteFP_Testa_Vinculo:
    
    TipoFreteFP_Testa_Vinculo = gErr
    
    Select Case gErr
        
        Case 116955, 116956
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_DVVCLIENTE", gErr)
        
        Case 116957
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TIPOFRETE_USADO", gErr, objTipo.iCodigo)
             
        Case 116954
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149935)
    
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function
    
End Function

Function TipoFreteFP_Automatico(iCodigo As Integer) As Long
'retorna o número do proximo Tipo disponivel

Dim lErro As Long
Dim lNumAuto As Long

On Error GoTo Erro_TipoFreteFP_Automatico

    'Gera número automático.
    lErro = CF("Config_ObterAutomatico", "FATConfig", "NUM_PROX_TIPO_FRETEFP", "TipoFreteFP", "Codigo", lNumAuto)
    If lErro <> SUCESSO Then gError 116958
    
    iCodigo = lNumAuto

    TipoFreteFP_Automatico = SUCESSO

    Exit Function

Erro_TipoFreteFP_Automatico:

    TipoFreteFP_Automatico = gErr

    Select Case gErr

    Case 116958
        
    Case Else
        lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149936)

    End Select

    Exit Function

End Function

Function DVVCliente_Grava(ByVal objDVVCliente As ClassDVVCliente) As Long
'grava os registros nas tabelas DVVCliente e DVVClienteProd

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_DVVCliente_Grava

    'Inicia a Transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 116488

    'grava na tabela DVVCliente
    lErro = CF("DVVCliente_Grava_Cliente", objDVVCliente)
    If lErro <> SUCESSO Then gError 116490
    
    'Grava na tablela DVVClienteProd
    lErro = CF("DVVCliente_Grava_Produto", objDVVCliente)
    If lErro <> SUCESSO Then gError 116491
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 116489

    DVVCliente_Grava = SUCESSO

    Exit Function

Erro_DVVCliente_Grava:

    DVVCliente_Grava = gErr

    Select Case gErr

        Case 116490, 116491
        
        Case 116488
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 116489
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149937)

    End Select

    Call Transacao_Rollback
    
    Exit Function
        
End Function

Public Function DVVCliente_Grava_Cliente(ByVal objDVVCliente As ClassDVVCliente) As Long
'grava os registro na tabela DVVCliente

Dim lErro As Long
Dim alComando(0 To 2) As Long
Dim iIndice As Integer
Dim iFilialEmpresa As Integer

On Error GoTo Erro_DVVCliente_Grava_Cliente

    'abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 116495
    Next
    
    'Verifico se existe o registro
    lErro = Comando_ExecutarPos(alComando(0), "SELECT FilialEmpresa FROM DVVCliente WHERE FilialEmpresa = ? AND CodCliente = ? AND CodFilial = ?", 0, iFilialEmpresa, objDVVCliente.iFilialEmpresa, objDVVCliente.lCodCliente, objDVVCliente.iCodFilial)
    If lErro <> AD_SQL_SUCESSO Then gError 116496

    'busca o 1º registro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 116497

    'Se existir => UPDATE, senão => INSERT
    If lErro = AD_SQL_SUCESSO Then
        
        'faz um update apenas no Custo Aplicado
        lErro = Comando_ExecutarPos(alComando(1), "UPDATE DVVCLiente SET TipoFrete = ? ", alComando(0), objDVVCliente.iTipoFrete)
        If lErro <> AD_SQL_SUCESSO Then gError 116498
    
    Else

        'insere a Data, Produto, Custo Aplicado, além da filial e automatico
        lErro = Comando_Executar(alComando(1), "INSERT INTO DVVCLiente(FilialEmpresa, CodCliente, CodFilial, TipoFrete) VALUES (?,?,?,?)", objDVVCliente.iFilialEmpresa, objDVVCliente.lCodCliente, objDVVCliente.iCodFilial, objDVVCliente.iTipoFrete)
        If lErro <> AD_SQL_SUCESSO Then gError 116499
    
    End If
    
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    DVVCliente_Grava_Cliente = SUCESSO

    Exit Function

Erro_DVVCliente_Grava_Cliente:

    DVVCliente_Grava_Cliente = gErr

    Select Case gErr
        
        Case 116495
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 116496, 116497
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_DVVCLIENTE", gErr)
            
        Case 116498
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_DVVCLIENTE", gErr)
        
        Case 116499
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_DVVCLIENTE", gErr)
                 
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149938)
                 
    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function DVVCliente_Grava_Produto(ByVal objDVVCliente As ClassDVVCliente) As Long
'grava os registro na tabela DVVClienteProd

Dim lErro As Long
Dim alComando(0 To 2) As Long
Dim iIndice As Integer
Dim iFilialEmpresa As Integer
Dim objDVVClienteProd As ClassDVVClienteProd

On Error GoTo Erro_DVVCliente_Grava_Produto

    'abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 119501
    Next
    
    'Verifico se existe o registro em custofixoprod
    lErro = Comando_ExecutarPos(alComando(0), "SELECT FilialEmpresa FROM DVVClienteProd WHERE FilialEmpresa = ? AND CodCliente = ? AND CodFilial = ?", 0, iFilialEmpresa, objDVVCliente.iFilialEmpresa, objDVVCliente.lCodCliente, objDVVCliente.iCodFilial)
    If lErro <> AD_SQL_SUCESSO Then gError 119502

    'busca o 1º registro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 119503

    Do While lErro = AD_SQL_SUCESSO

        'Faz o lock exclusivo do produto
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> SUCESSO Then gError 119504

        'Exclui a relação da embalagem com o produto
        lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM DVVClienteProd", alComando(0))
        If lErro <> SUCESSO Then gError 119505
        
        'Buscar o Próximo
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 119506

    Loop

    'Para cada embalagem na coleção
    For Each objDVVClienteProd In objDVVCliente.colDVVCLienteProd
        
        lErro = Comando_Executar(alComando(2), "INSERT INTO DVVCLienteProd(FilialEmpresa, CodCliente, CodFilial, Produto, PercDVV, Paletizacao) VALUES (?,?,?,?,?,?)", objDVVCliente.iFilialEmpresa, objDVVCliente.lCodCliente, objDVVCliente.iCodFilial, objDVVClienteProd.sProduto, objDVVClienteProd.dPercDVV, objDVVClienteProd.iPaletizacao)
        If lErro <> AD_SQL_SUCESSO Then gError 119507
               
    Next
     
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    DVVCliente_Grava_Produto = SUCESSO

    Exit Function

Erro_DVVCliente_Grava_Produto:

    DVVCliente_Grava_Produto = gErr

    Select Case gErr
        
        Case 119501
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
             
        Case 119502, 119503, 119506
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_DVVCLIENTEPROD", gErr)
            
        Case 119504
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_EXCLUSIVE", gErr)
        
        Case 119505
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_DVVCLIENTEPROD", gErr)
        
        Case 119507
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_DVVCLIENTEPROD", gErr)
                
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149939)
                
    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function DVVCliente_Exclui(ByVal objDVVCliente As ClassDVVCliente) As Long
'exclui os registros das tabelas DVVCliente e DVVClienteProd

Dim lErro As Long
Dim alComando(0 To 3) As Long
Dim lTransacao As Long
Dim iIndice As Integer, iFilialEmpresa As Integer

On Error GoTo Erro_DVVCliente_Exclui

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 119508

    'abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 119509
    Next

    'Faz a leitura dos registros na tabela DVVCliente
    lErro = Comando_ExecutarPos(alComando(0), "SELECT FilialEmpresa FROM DVVCliente WHERE FilialEmpresa = ? AND CodCliente = ? AND CodFilial = ?", 0, iFilialEmpresa, objDVVCliente.iFilialEmpresa, objDVVCliente.lCodCliente, objDVVCliente.iCodFilial)
    If lErro <> AD_SQL_SUCESSO Then gError 119510

    'busca o 1º registro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 119511
    
    'se não encontrou, erro
    If lErro = AD_SQL_SEM_DADOS Then gError 119513
                
   'Faz o lock exclusivo do registro
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> SUCESSO Then gError 119517
    
    'exclui o registro
    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM DVVCLiente", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 119514

    'Verifica se existe o registro em DVVClienteProd
    lErro = Comando_ExecutarPos(alComando(2), "SELECT FilialEmpresa FROM DVVClienteProd WHERE FilialEmpresa = ? AND CodCliente = ? AND CodFilial = ?", 0, iFilialEmpresa, objDVVCliente.iFilialEmpresa, objDVVCliente.lCodCliente, objDVVCliente.iCodFilial)
    If lErro <> AD_SQL_SUCESSO Then gError 119518

    'busca o 1º registro
    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 119519

    Do While lErro = AD_SQL_SUCESSO

        'Faz o lock exclusivo do registro
        lErro = Comando_LockExclusive(alComando(2))
        If lErro <> SUCESSO Then gError 119512

        'Exclui o registro na tabela DVVClienteProd
        lErro = Comando_ExecutarPos(alComando(3), "DELETE FROM DVVClienteProd", alComando(2))
        If lErro <> SUCESSO Then gError 119515
        
        'Buscar o Próximo
        lErro = Comando_BuscarProximo(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 119516

    Loop

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    'confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 116410
    
    DVVCliente_Exclui = SUCESSO

    Exit Function

Erro_DVVCliente_Exclui:

    DVVCliente_Exclui = gErr

    Select Case gErr

        Case 119509
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 119508
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 119510, 119511
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_DVVCLIENTE", gErr)

        Case 119516, 119518, 119519
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_DVVCLIENTEPROD", gErr)

        Case 119513
            Call Rotina_Erro(vbOKOnly, "ERRO_DVVCLIENTE_NAO_ENCONTRADO", gErr)

        Case 119512, 119517
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_EXCLUSIVE", gErr)

        Case 119514
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_DVVCLIENTE", gErr)

        Case 119515
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_DVVCLIENTEPROD", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149940)

    End Select

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Call Transacao_Rollback
    
    Exit Function

End Function

Public Function RelMargContr_Grava(ByVal objMargContr As ClassMargContr) As Long
'grava os dados do relatorio nas tabelas temporárias para ser impresso

Dim lErro As Long
Dim lNumIntRel As Long
Dim lTransacao As Long

On Error GoTo Erro_RelMargContr_Grava

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 119612

    'obtem o nº automatico
    lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_PROX_NUMINTREL", lNumIntRel)
    If lErro <> SUCESSO Then gError 119613
    
    'carrega o obj c/ o nº automatico
    objMargContr.lNumIntRel = lNumIntRel
    
    'grava na tabela RelMargContr
    lErro = CF("RelMargContr_Grava_EmTrans", objMargContr)
    If lErro <> SUCESSO Then gError 119614

    'grava na tabela RelMargContrCol
    lErro = CF("RelMargContrCol_Grava_EmTrans", objMargContr)
    If lErro <> SUCESSO Then gError 119615

    'grava na tabela RelMargContrLin
    lErro = CF("RelMargContrLin_Grava_EmTrans", objMargContr)
    If lErro <> SUCESSO Then gError 119616

    'grava na tabela RelMargContrLinCol
    lErro = CF("RelMargContrLinCol_Grava_EmTrans", objMargContr)
    If lErro <> SUCESSO Then gError 119617
    
    'confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 119622
    
    RelMargContr_Grava = SUCESSO

    Exit Function

Erro_RelMargContr_Grava:

    RelMargContr_Grava = gErr

    Select Case gErr

        Case 119612
            Call Rotina_Erro(vbOKOnly, "ERRO_TRANSACAO_ABRIR", gErr)

        Case 119613 To 119617
        
        Case 119622
            Call Rotina_Erro(vbOKOnly, "ERRO_TRANSACAO_COMMIT", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149941)

    End Select
    
    Call Transacao_Rollback
    
    Exit Function
        
End Function

Public Function RelMargContr_Grava_EmTrans(ByVal objMargContr As ClassMargContr) As Long
'grava na tabela RelMargContr com o objMargContr passado como parametro

Dim lErro As Long
Dim lComando As Long

On Error GoTo Erro_RelMargContr_Grava_EmTrans

    'abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 119618
    
    'grava na tabela RelMargContr
    lErro = Comando_Executar(lComando, "INSERT INTO RelMargContr(NumIntRel, CodCliente, CodFilial, CodVendedor, FilialFaturamento, Produto, Quantidade) VALUES (?,?,?,?,?,?,?)", objMargContr.lNumIntRel, objMargContr.lCodCliente, objMargContr.iCodFilial, objMargContr.iCodVendedor, objMargContr.iFilialFaturamento, objMargContr.sProduto, objMargContr.dQuantidade)
    If lErro <> AD_SQL_SUCESSO Then gError 119619

    'fecha o comando
    Call Comando_Fechar(lComando)

    RelMargContr_Grava_EmTrans = SUCESSO
    
    Exit Function

Erro_RelMargContr_Grava_EmTrans:

    RelMargContr_Grava_EmTrans = gErr

    Select Case gErr

        Case 119618
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 119619
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_RELMARG", gErr)

    End Select
    
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Public Function RelMargContrLin_Grava_EmTrans(ByVal objMargContr As ClassMargContr) As Long
'grava na tabela RelMargContrLin a partir da col. passada no obj

Dim lErro As Long
Dim lComando As Long
Dim objPlanMargContrLin As ClassPlanMargContrLin, objDVVLin As ClassDVVLin

On Error GoTo Erro_RelMargContrLin_Grava_EmTrans

    'abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 119620
    
    'Para cada objRelMargContrLin na coleção
    For Each objPlanMargContrLin In objMargContr.colPlanMargContrLin
        
        'insere um novo registro
        lErro = Comando_Executar(lComando, "INSERT INTO RelMargContrLin(NumIntRel, TipoReg, Linha, Descricao, Formato) VALUES (?,?,?,?,?)", objMargContr.lNumIntRel, MARGCONTR_GRIDANALISE, objPlanMargContrLin.iLinha, objPlanMargContrLin.sDescricao, objPlanMargContrLin.iFormato)
        If lErro <> AD_SQL_SUCESSO Then gError 119621
                      
    Next
                 
    'Para cada objRelMargContrLin na coleção
    For Each objDVVLin In objMargContr.colDVVLin
        
        'insere um novo registro
        lErro = Comando_Executar(lComando, "INSERT INTO RelMargContrLin(NumIntRel, TipoReg, Linha, Descricao, Formato) VALUES (?,?,?,?,?)", objMargContr.lNumIntRel, MARGCONTR_GRIDDVV, objDVVLin.iLinha, objDVVLin.sDescricao, 4444) '??? trocar 4444 por cte devida
        If lErro <> AD_SQL_SUCESSO Then gError 119621
                      
    Next
                 
    'fecha o comando
    Call Comando_Fechar(lComando)
    
    RelMargContrLin_Grava_EmTrans = SUCESSO

    Exit Function

Erro_RelMargContrLin_Grava_EmTrans:

    RelMargContrLin_Grava_EmTrans = gErr

    Select Case gErr
        
        Case 119620
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 119621
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_RELMARGLIN", gErr)
                
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149942)
                
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Public Function RelMargContrLinCol_Grava_EmTrans(ByVal objMargContr As ClassMargContr) As Long
'grava na tabela RelMargContrLinCol a partir da col. passada no obj

Dim lErro As Long
Dim lComando As Long
Dim objPlanMargContrLinCol As ClassPlanMargContrLinCol, objDVVLinCol As ClassDVVLinCol

On Error GoTo Erro_RelMargContrLinCol_Grava_EmTrans

    'abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 119623
    
    'Para cada objPlanMargContrLinCol na coleção
    For Each objPlanMargContrLinCol In objMargContr.colPlanMargContrLinCol
        
        'insere um novo registro
        lErro = Comando_Executar(lComando, "INSERT INTO RelMargContrLinCol(NumIntRel, TipoReg, Linha, Coluna, Valor) VALUES (?,?,?,?,?)", objMargContr.lNumIntRel, MARGCONTR_GRIDANALISE, objPlanMargContrLinCol.iLinha, objPlanMargContrLinCol.iColuna, objPlanMargContrLinCol.dValor)
        If lErro <> AD_SQL_SUCESSO Then gError 119624
                              
    Next
     
    'Para cada objDVVLinCol na coleção
    For Each objDVVLinCol In objMargContr.colDVVLinCol
        
        'insere um novo registro
        lErro = Comando_Executar(lComando, "INSERT INTO RelMargContrLinCol(NumIntRel, TipoReg, Linha, Coluna, Valor) VALUES (?,?,?,?,?)", objMargContr.lNumIntRel, MARGCONTR_GRIDDVV, objDVVLinCol.iLinha, objDVVLinCol.iColuna, objDVVLinCol.dValor)
        If lErro <> AD_SQL_SUCESSO Then gError 119624
                              
    Next
     
    'fecha o comando
    Call Comando_Fechar(lComando)
    
    RelMargContrLinCol_Grava_EmTrans = SUCESSO

    Exit Function

Erro_RelMargContrLinCol_Grava_EmTrans:

    RelMargContrLinCol_Grava_EmTrans = gErr

    Select Case gErr
        
        Case 119623
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
                
        Case 119624
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_RELMARGLINCOL", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149943)
                
    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Public Function RelMargContrCol_Grava_EmTrans(ByVal objMargContr As ClassMargContr) As Long
'grava na tabela RelMargContrCol a partir da col. passado no obj

Dim lErro As Long
Dim lComando As Long
Dim objPlanMargContrCol As ClassPlanMargContrCol

On Error GoTo Erro_RelMargContrCol_Grava_EmTrans
    
    'abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 119626
     
    'Para cada objPlanMargContrCol na coleção
    For Each objPlanMargContrCol In objMargContr.colPlanMargContrCol

        'insere um novo registro
        lErro = Comando_Executar(lComando, "INSERT INTO RelMargContrCol(NumIntRel, TipoReg, Coluna, Titulo) VALUES (?,?,?,?)", objMargContr.lNumIntRel, MARGCONTR_GRIDANALISE, objPlanMargContrCol.iColuna, objPlanMargContrCol.sTitulo)
        If lErro <> AD_SQL_SUCESSO Then gError 119627
                              
    Next
             
    lErro = Comando_Executar(lComando, "INSERT INTO RelMargContrCol(NumIntRel, TipoReg, Coluna, Titulo) VALUES (?,?,?,?)", objMargContr.lNumIntRel, MARGCONTR_GRIDDVV, 1, "Padrão")
    If lErro <> AD_SQL_SUCESSO Then gError 119627
    
    lErro = Comando_Executar(lComando, "INSERT INTO RelMargContrCol(NumIntRel, TipoReg, Coluna, Titulo) VALUES (?,?,?,?)", objMargContr.lNumIntRel, MARGCONTR_GRIDDVV, 2, "Cliente")
    If lErro <> AD_SQL_SUCESSO Then gError 119627
    
    lErro = Comando_Executar(lComando, "INSERT INTO RelMargContrCol(NumIntRel, TipoReg, Coluna, Titulo) VALUES (?,?,?,?)", objMargContr.lNumIntRel, MARGCONTR_GRIDDVV, 3, "Simulação")
    If lErro <> AD_SQL_SUCESSO Then gError 119627
    
    'fecha o comando
    Call Comando_Fechar(lComando)
    
    RelMargContrCol_Grava_EmTrans = SUCESSO

    Exit Function

Erro_RelMargContrCol_Grava_EmTrans:

    RelMargContrCol_Grava_EmTrans = gErr

    Select Case gErr
        
        Case 119626
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 119627
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_RELMARGCOL", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149944)
                
    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Public Function PlanMargContrCol_Grava_EmTrans(ByVal objMargContr As ClassMargContr) As Long
'Grava na tabela PlanMargContrCol

Dim lErro As Long
Dim lComando As Long
Dim objPlanMargContrCol As ClassPlanMargContrCol

On Error GoTo Erro_PlanMargContrCol_Grava_EmTrans

    'abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 121009
    
    For Each objPlanMargContrCol In objMargContr.colPlanMargContrCol
    
        'Insere os dados na tabela PlanMargContrCol
        lErro = Comando_Executar(lComando, "INSERT INTO PlanMargContrCol (Coluna, Titulo, Descricao) VALUES (?,?,?)", objPlanMargContrCol.iColuna, objPlanMargContrCol.sTitulo, objPlanMargContrCol.sDescricao)
        If lErro <> AD_SQL_SUCESSO Then gError 121015
    
    Next

    'fecha o comando
    Call Comando_Fechar(lComando)
    
    PlanMargContrCol_Grava_EmTrans = SUCESSO

    Exit Function

Erro_PlanMargContrCol_Grava_EmTrans:

    PlanMargContrCol_Grava_EmTrans = gErr

    Select Case gErr

        Case 121045
        
        Case 121009
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 121015
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_PLANMARGCONTRCOL", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149945)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Public Function PlanMargContrCol_Exclui_EmTrans() As Long
'Exclui dados da tabela PlanMargContrCol

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iColuna As Integer
Dim iIndice As Integer

On Error GoTo Erro_PlanMargContrCol_Exclui_EmTrans

    'abre o comando
    For iIndice = LBound(alComando) To UBound(alComando)
           
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 121059
        
    Next
    
    'Executar comando SQL de busca na tabela PlanMargContrCol
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Coluna FROM PlanMargContrCol", 0, iColuna)
    If lErro <> AD_SQL_SUCESSO Then gError 121010

    'busca o 1º registro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 121012
    
    'enquanto houver registros
    Do While lErro <> AD_SQL_SEM_DADOS
        
        'Faz lock na Tabela
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 121011

        'Executar comando SQL de busca na tabela PlanMargContrCol
        lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM PlanMargContrCol", alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 121013
                
        'busca o próximo registro
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 121014

    Loop
    
    'fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    PlanMargContrCol_Exclui_EmTrans = SUCESSO

    Exit Function

Erro_PlanMargContrCol_Exclui_EmTrans:

    PlanMargContrCol_Exclui_EmTrans = gErr

    Select Case gErr

        Case 121059
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 121011
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_EXCLUSIVE_PLANMARGCONTRCOL", gErr)

        Case 121010, 121012, 121014
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PLANMARGCONTRCOL", gErr)
            
        Case 121013
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_PLANMARGCONTRCOL", gErr)
                
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149946)

    End Select

    'fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function PlanMargContrLin_Grava_EmTrans(ByVal objMargContr As ClassMargContr) As Long
'Grava dados na tabela PlanMargContrLin

Dim lErro As Long
Dim lComando As Long
Dim objPlanMargContrLin As ClassPlanMargContrLin

On Error GoTo Erro_PlanMargContrLin_Grava_EmTrans

    'abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 121016
    
    For Each objPlanMargContrLin In objMargContr.colPlanMargContrLin
    
        'Insere os dados na tabela PlanMargContrLin
        lErro = Comando_Executar(lComando, "INSERT INTO PlanMargContrLin (Linha, Descricao, FormulaGeral, FormulaL1, Formato, Editavel) VALUES (?,?,?,?,?,?)", objPlanMargContrLin.iLinha, objPlanMargContrLin.sDescricao, objPlanMargContrLin.sFormulaGeral, objPlanMargContrLin.sFormulaL1, objPlanMargContrLin.iFormato, objPlanMargContrLin.iEditavel)
        If lErro <> AD_SQL_SUCESSO Then gError 121022
    
    Next

    'fecha o comando
    Call Comando_Fechar(lComando)
    
    PlanMargContrLin_Grava_EmTrans = SUCESSO

    Exit Function

Erro_PlanMargContrLin_Grava_EmTrans:

    PlanMargContrLin_Grava_EmTrans = gErr

    Select Case gErr
    
        Case 121062

        Case 121016
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 121022
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_PLANMARGCONTRLIN", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149947)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Public Function PlanMargContrLin_Exclui_EmTrans() As Long
'Grava dados na tabela PlanMargContrLin

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iLinha As Integer
Dim iIndice As Integer

On Error GoTo Erro_PlanMargContrLin_Exclui_EmTrans

    'abre o comando
    For iIndice = LBound(alComando) To UBound(alComando)
           
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 121060
        
    Next
    
    'Executar comando SQL de busca na tabela PlanMargContrLin
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Linha FROM PlanMargContrLin", 0, iLinha)
    If lErro <> AD_SQL_SUCESSO Then gError 121017

    'busca o 1º registro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 121019
    
    'enquanto houver registros
    Do While lErro <> AD_SQL_SEM_DADOS
        
        'Faz lock na Tabela
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 121018
        
        'Executar comando SQL de busca na tabela PlanMargContrLin
        lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM PlanMargContrLin", alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 121020
                
        'busca o próximo registro
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 121021

    Loop
        
    'fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    PlanMargContrLin_Exclui_EmTrans = SUCESSO

    Exit Function

Erro_PlanMargContrLin_Exclui_EmTrans:

    PlanMargContrLin_Exclui_EmTrans = gErr

    Select Case gErr

        Case 121060
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 121017, 121019, 121021
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PLANMARGCONTRLIN", gErr)
            
        Case 121018
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_EXCLUSIVE_PLANMARGCONTRLIN", gErr)

        Case 121020
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_PLANMARGCONTRLIN", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149948)

    End Select

    'fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        
        Call Comando_Fechar(alComando(iIndice))
    
    Next
                
    Exit Function

End Function

Public Function PlanMargContrLinCol_Grava_EmTrans(ByVal objMargContr As ClassMargContr) As Long
'Grava dados na tabela PlaMargContrLinCol

Dim lErro As Long
Dim lComando As Long
Dim objPlanMargContrLinCol As ClassPlanMargContrLinCol

On Error GoTo Erro_PlanMargContrLinCol_Grava_EmTrans

    'abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 121023
    
    For Each objPlanMargContrLinCol In objMargContr.colPlanMargContrLinCol
    
        'Insere os dados na tabela PlaMargContrLinCol
        lErro = Comando_Executar(lComando, "INSERT INTO PlanMargContrLinCol (Coluna, Linha, Formula) VALUES (?,?,?)", objPlanMargContrLinCol.iColuna, objPlanMargContrLinCol.iLinha, objPlanMargContrLinCol.sFormula)
        If lErro <> AD_SQL_SUCESSO Then gError 121029
    
    Next

    'fecha o comando
    Call Comando_Fechar(lComando)
    
    PlanMargContrLinCol_Grava_EmTrans = SUCESSO

    Exit Function

Erro_PlanMargContrLinCol_Grava_EmTrans:

    PlanMargContrLinCol_Grava_EmTrans = gErr

    Select Case gErr

        Case 121063
        
        Case 121023
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 121029
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_PLANMARGCONTRLINCOL", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149949)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Public Function PlanMargContrLinCol_Exclui_EmTrans() As Long
'Exclui dados da tabela PlaMargContrLinCol

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iColuna As Integer
Dim iIndice As Integer

On Error GoTo Erro_PlanMargContrLinCol_Exclui_EmTrans

    'abre o comando
    For iIndice = LBound(alComando) To UBound(alComando)
           
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 121061
        
    Next
    
    'Executar comando SQL de busca na tabela PlaMargContrLinCol
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Coluna FROM PlanMargContrLinCol", 0, iColuna)
    If lErro <> AD_SQL_SUCESSO Then gError 121024

    'busca o 1º registro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 121026

    'enquanto houver registros
    Do While lErro <> AD_SQL_SEM_DADOS
        
        'Faz lock na Tabela
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 121025
        
        'Executar comando SQL de busca na tabela PlaMargContrLinCol
        lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM PlanMargContrLinCol", alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 121027
                
        'busca o próximo registro
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 121028

    Loop
    
    'fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    PlanMargContrLinCol_Exclui_EmTrans = SUCESSO

    Exit Function

Erro_PlanMargContrLinCol_Exclui_EmTrans:

    PlanMargContrLinCol_Exclui_EmTrans = gErr

    Select Case gErr

        Case 121061
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 121024, 121026, 121028
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PLANMARGCONTRLINCOL", gErr)
            
        Case 121025
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_EXCLUSIVE_PLANMARGCONTRLINCOL", gErr)

        Case 121027
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_PLANMARGCONTRLINCOL", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149950)

    End Select

    'fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function DVVLin_Grava_EmTrans(ByVal objMargContr As ClassMargContr) As Long
'Grava dados na tabela DVVLin

Dim lErro As Long
Dim lComando As Long
Dim objDVVLin As ClassDVVLin

On Error GoTo Erro_DVVLin_Grava_EmTrans

    'abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 121030
    
    For Each objDVVLin In objMargContr.colDVVLin
    
        'Insere os dados na tabela DvvLin
        lErro = Comando_Executar(lComando, "INSERT INTO DVVLin (Linha, Descricao) VALUES (?,?)", objDVVLin.iLinha, objDVVLin.sDescricao)
        If lErro <> AD_SQL_SUCESSO Then gError 121036
    
    Next

    'fecha o comando
    Call Comando_Fechar(lComando)
    
    DVVLin_Grava_EmTrans = SUCESSO

    Exit Function

Erro_DVVLin_Grava_EmTrans:

    DVVLin_Grava_EmTrans = gErr

    Select Case gErr

        Case 121064
        
        Case 121030
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 121036
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_DVVLIN", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149951)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Public Function DVVLin_Exclui_EmTrans() As Long
'Exclui dados na tabela DVVLin

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim iLinha As Integer

On Error GoTo Erro_DVVLin_Exclui_EmTrans

    'abre o comando
    For iIndice = LBound(alComando) To UBound(alComando)
           
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 121057
        
    Next
        
    'Executar comando SQL de busca na tabela DVVLin
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Linha FROM DVVLin", 0, iLinha)
    If lErro <> AD_SQL_SUCESSO Then gError 121031

    'busca o 1º registro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 121033
    
    'enquanto houver registros
    Do While lErro <> AD_SQL_SEM_DADOS
        
        'Faz lock na Tabela
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 121032
    
        'Executar comando SQL de busca na tabela DVVLIn
        lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM DVVLin", alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 121034
                
        'busca o próximo registro
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 121035

    Loop
            
    'fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    DVVLin_Exclui_EmTrans = SUCESSO

    Exit Function

Erro_DVVLin_Exclui_EmTrans:

    DVVLin_Exclui_EmTrans = gErr

    Select Case gErr

        Case 121057
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 121031, 121033, 121035
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_DVVLIN", gErr)

        Case 121032
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_EXCLUSIVE_DVVLIN", gErr)

        Case 121034
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_DVVLIN", gErr)
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149952)

    End Select

    'fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Public Function DVVLinCol_Grava_EmTrans(ByVal objMargContr As ClassMargContr) As Long
'Grava na tabela DvvLinCol

Dim lErro As Long
Dim lComando As Long
Dim objDVVLinCol As ClassDVVLinCol

On Error GoTo Erro_DVVLinCol_Grava_EmTrans

    'abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 121037
    
    For Each objDVVLinCol In objMargContr.colDVVLinCol
    
        'Insere os dados na tabela DvvLIncol
        lErro = Comando_Executar(lComando, "INSERT INTO DVVLinCol (Coluna, Linha, Formula) VALUES (?,?,?)", objDVVLinCol.iColuna, objDVVLinCol.iLinha, objDVVLinCol.sFormula)
        If lErro <> AD_SQL_SUCESSO Then gError 121043
    
    Next

    'fecha o comando
    Call Comando_Fechar(lComando)
    
    DVVLinCol_Grava_EmTrans = SUCESSO

    Exit Function

Erro_DVVLinCol_Grava_EmTrans:

    DVVLinCol_Grava_EmTrans = gErr

    Select Case gErr

        Case 121065
        
        Case 121037
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 121043
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_DVVLINCOL", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149953)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Public Function DVVLinCol_Exclui_EmTrans() As Long
'Exclui dados da tabela DvvLinCol

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iColuna As Integer
Dim iIndice As Integer

On Error GoTo Erro_DVVLinCol_Exclui_EmTrans

    'abre o comando
    For iIndice = LBound(alComando) To UBound(alComando)
           
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 121058
        
    Next
    
    'Executar comando SQL de busca na tabela DVVLinCol
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Coluna FROM DVVLinCol", 0, iColuna)
    If lErro <> AD_SQL_SUCESSO Then gError 121038

    'busca o 1º registro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 121040

    'enquanto houver registros
    Do While lErro <> AD_SQL_SEM_DADOS
        
        'Faz lock na Tabela
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 121039
        
        'Executar comando SQL de busca na tabela DVVLinCol
        lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM DVVLinCol", alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 121041
                
        'busca o próximo registro
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 121042

    Loop
    
    'fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    DVVLinCol_Exclui_EmTrans = SUCESSO

    Exit Function

Erro_DVVLinCol_Exclui_EmTrans:

    DVVLinCol_Exclui_EmTrans = gErr

    Select Case gErr

        Case 121058
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 121038, 121040, 121042
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_DVVLINCOL", gErr)

        Case 121039
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_EXCLUSIVE_DVVLINCOL", gErr)

        Case 121041
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_DVVLINCOL", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149954)

    End Select

    'fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function PlanMargContrConfig_Grava(ByVal objMargContr As ClassMargContr) As Long
'Aciona as rotinas de gravação nas tabelas PlanMargContrCol, PlanMargContrLinCol,
'PlanMargContrLin, DvvLinCol, DvvLin

Dim lErro As Long
Dim iIndice As Integer
Dim lTransacao As Long

On Error GoTo Erro_PlanMargContrConfig_Grava

    'Abertura transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 116889

    lErro = PlanMargContrConfig_Exclui_EmTrans
    If lErro <> SUCESSO Then gError 106656
    
    'Chama função que grava na tabela : PlanMargContrCol
    lErro = CF("PlanMargContrCol_Grava_EmTrans", objMargContr)
    If lErro <> SUCESSO Then gError 116890
    
    'Chama função que grava na tabela : PlanMargContrLin
    lErro = CF("PlanMargContrLin_Grava_EmTrans", objMargContr)
    If lErro <> SUCESSO Then gError 121046

    'Chama função que grava na tabela : PlanMargContrLinCol
    lErro = CF("PlanMargContrLinCol_Grava_EmTrans", objMargContr)
    If lErro <> SUCESSO Then gError 121047

    'Chama função que grava na tabela : DVVLin_Grava
    lErro = CF("DVVLin_Grava_EmTrans", objMargContr)
    If lErro <> SUCESSO Then gError 121048

    'Chama função que grava na tabela : DVVLinCol_Grava_EmTrans
    lErro = CF("DVVLinCol_Grava_EmTrans", objMargContr)
    If lErro <> SUCESSO Then gError 121049

    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 116892
    
    PlanMargContrConfig_Grava = SUCESSO

    Exit Function

Erro_PlanMargContrConfig_Grava:

    PlanMargContrConfig_Grava = gErr

    Select Case gErr
    
        Case 116890, 121046 To 121049, 106656

        Case 116889
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 116892
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149955)

    End Select

    'Fechamento transação
    Call Transacao_Rollback

    Exit Function

End Function

Function PlanMargContrConfig_Exclui() As Long
'aciona rotinas de exclusão de dados

Dim lErro As Long
Dim iIndice As Integer
Dim lTransacao As Long

On Error GoTo Erro_PlanMargContrConfig_Exclui

    'Abertura transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 121050

    lErro = PlanMargContrConfig_Exclui_EmTrans
    If lErro <> SUCESSO Then gError 106655

    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 121056
    
    PlanMargContrConfig_Exclui = SUCESSO

    Exit Function

Erro_PlanMargContrConfig_Exclui:

    PlanMargContrConfig_Exclui = gErr

    Select Case gErr
    
        Case 106655

        Case 121050
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 121056
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149956)

    End Select

    'Fechamento transação
    Call Transacao_Rollback

    Exit Function

End Function

Function PlanMargContrConfig_Exclui_EmTrans() As Long
'aciona rotinas de exclusão de dados

Dim lErro As Long

On Error GoTo Erro_PlanMargContrConfig_Exclui_EmTrans

    'Chama função que Exclui dados da tabela PlanMargContrCol
    lErro = CF("PlanMargContrCol_Exclui_EmTrans")
    If lErro <> SUCESSO Then gError 121051
    
    'Chama função que Exclui dados da tabela PlanMargContrLin
    lErro = CF("PlanMargContrLin_Exclui_EmTrans")
    If lErro <> SUCESSO Then gError 121052

    'Chama função que Exclui dados da tabela PlanMargContrLinCol
    lErro = CF("PlanMargContrLinCol_Exclui_EmTrans")
    If lErro <> SUCESSO Then gError 121053

    'Chama função que Exclui dados da tabela DVVLin
    lErro = CF("DVVLin_Exclui_EmTrans")
    If lErro <> SUCESSO Then gError 121054

    'Chama função que Exclui dados da tabela DvvLinCol
    lErro = CF("DVVLinCol_Exclui_EmTrans")
    If lErro <> SUCESSO Then gError 121055

    PlanMargContrConfig_Exclui_EmTrans = SUCESSO

    Exit Function

Erro_PlanMargContrConfig_Exclui_EmTrans:

    PlanMargContrConfig_Exclui_EmTrans = gErr

    Select Case gErr
    
        Case 121051 To 121555

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149957)

    End Select

    Exit Function

End Function

Function RelListaPrecoCalc_Prepara(lNumIntRel As Long, ByVal iFilialEmpresa As Integer, ByVal dtDataAtual As Date, ByVal dtDataAnt As Date, ByVal sProdIni As String, ByVal sProdFim As String) As Long
'gera registros na tabela RelListaPrecoCalc para a execucao do relatorio de lista de precos

Dim lErro As Long, lTransacao As Long, iTabelaPreco As Integer
Dim iIndice As Integer, alComando(1 To 4) As Long, sProduto As String
Dim dPrecoCalcAtual As Double, dPrecoCalcAnt As Double, dPrecoVendaAnt As Double, dPrecoVendaAtual As Double

On Error GoTo Erro_RelListaPrecoCalc_Prepara

    'abrir comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 106940
    Next
    
    'Inicia a transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 106941

    'obtem o nº automatico
    lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_PROX_NUMINTREL", lNumIntRel)
    If lErro <> SUCESSO Then gError 106942
    
    sProduto = String(STRING_PRODUTO, 0)
    
    If sProdIni = "" And sProdFim = "" Then
        lErro = Comando_Executar(alComando(1), "SELECT DISTINCT TabelaPreco, Produto FROM FormacaoPrecoCalc WHERE FilialEmpresa = ? AND Data = ?", iTabelaPreco, sProduto, iFilialEmpresa, dtDataAtual)
    ElseIf sProdIni <> "" And sProdFim = "" Then
        lErro = Comando_Executar(alComando(1), "SELECT DISTINCT TabelaPreco, Produto FROM FormacaoPrecoCalc WHERE FilialEmpresa = ? AND Data = ? AND Produto >= ?", iTabelaPreco, sProduto, iFilialEmpresa, dtDataAtual, sProdIni)
    ElseIf sProdIni = "" And sProdFim <> "" Then
        lErro = Comando_Executar(alComando(1), "SELECT DISTINCT TabelaPreco, Produto FROM FormacaoPrecoCalc WHERE FilialEmpresa = ? AND Data = ? AND Produto <= ?", iTabelaPreco, sProduto, iFilialEmpresa, dtDataAtual, sProdFim)
    Else
        lErro = Comando_Executar(alComando(1), "SELECT DISTINCT TabelaPreco, Produto FROM FormacaoPrecoCalc WHERE FilialEmpresa = ? AND Data = ? AND Produto >= ? AND Produto <= ?", iTabelaPreco, sProduto, iFilialEmpresa, dtDataAtual, sProdIni, sProdFim)
    End If
    If lErro <> AD_SQL_SUCESSO Then gError 106943
    
    lErro = Comando_BuscarProximo(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 106944
    
    Do While lErro = AD_SQL_SUCESSO
    
        'obter preco de venda anterior da tabela
        lErro = CF("Produto_ObtemPrecoData", iFilialEmpresa, iTabelaPreco, sProduto, dtDataAnt, dPrecoVendaAnt)
        If lErro <> SUCESSO Then gError 106946
        
        'obter preco de venda atual da tabela
        lErro = CF("Produto_ObtemPrecoData", iFilialEmpresa, iTabelaPreco, sProduto, dtDataAtual, dPrecoVendaAtual)
        If lErro <> SUCESSO Then gError 106948
        
        'obter preco calculado atual da tabela
        lErro = RelListaPrecoCalc_Prepara2(iFilialEmpresa, dtDataAtual, iTabelaPreco, sProduto, dPrecoCalcAtual, alComando())
        If lErro <> SUCESSO Then gError 106949
        
        'obter preco calculado anterior da tabela
        lErro = RelListaPrecoCalc_Prepara2(iFilialEmpresa, dtDataAnt, iTabelaPreco, sProduto, dPrecoCalcAnt, alComando())
        If lErro <> SUCESSO Then gError 106949
        
        'grava o registro na tabela
        lErro = Comando_Executar(alComando(2), "INSERT INTO RelListaPrecoCalc2 (NumIntRel, TabelaPreco, Produto, PrecoCalcAtual, PrecoVendaAtual, PrecoCalcAnt, PrecoVendaAnt) VALUES (?,?,?,?,?,?,?)", _
            lNumIntRel, iTabelaPreco, sProduto, dPrecoCalcAtual, dPrecoVendaAtual, dPrecoCalcAnt, dPrecoVendaAnt)
        If lErro <> AD_SQL_SUCESSO Then gError 106952
    
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 106944
    
    Loop
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 106953
    
   'fechar comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
          
    RelListaPrecoCalc_Prepara = SUCESSO
     
    Exit Function
    
Erro_RelListaPrecoCalc_Prepara:

    RelListaPrecoCalc_Prepara = gErr
     
    Select Case gErr
    
        Case 106940
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 106941
             lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
           
        Case 106942
        
        Case 106943, 106944
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FORMACAOPRECOCALC", gErr)
            
        Case 106946 To 106949
        
        Case 106952
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_RELLISTAPRECOCALC2", gErr)
          
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149958)
     
    End Select
     
    Call Transacao_Rollback
    
   'fechar comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
          
    Exit Function

End Function

Private Function RelListaPrecoCalc_Prepara1(ByVal iFilialEmpresa As Integer, ByVal dtData As Date, ByVal iTabelaPreco As Integer, ByVal sProduto As String, dCustoMP As Double, dCustoEmb As Double, dCustoFrete As Double, dCustoDireto As Double, dCustoFixo As Double, dDVVSemICMS As Double, dDevDuv As Double, alComando() As Long) As Long
'obtem valores correspondentes à estas colunas:
'CustoMP , CustoEmb, CustoFrete, CustoDireto, CustoFixo, DVVSemICMS, DevDuv

Dim lErro As Long, sExpressao As String, dValor As Double

On Error GoTo Erro_RelListaPrecoCalc_Prepara1

    'inicializa valores
    dCustoMP = 0
    dCustoEmb = 0
    dCustoFrete = 0
    dCustoDireto = 0
    dCustoFixo = 0
    dDVVSemICMS = 0
    dDevDuv = 0

    sExpressao = String(STRING_FORMACAOPRECO_EXPRESSAO, 0)
    
    lErro = Comando_Executar(alComando(3), "SELECT Expressao, Valor FROM FormacaoPrecoCalcLin WHERE FilialEmpresa = ? AND Data = ? AND TabelaPreco = ? AND Produto = ?", _
        sExpressao, dValor, iFilialEmpresa, dtData, iTabelaPreco, sProduto)
    If lErro <> AD_SQL_SUCESSO Then gError 106937
        
    lErro = Comando_BuscarProximo(alComando(3))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 106938
            
    Do While lErro = AD_SQL_SUCESSO
    
        If InStr(1, sExpressao, MNEMONICOFPRECO_CUSTOMP, vbTextCompare) <> 0 Then dCustoMP = dValor
        If InStr(1, sExpressao, MNEMONICOFPRECO_CUSTOEMB, vbTextCompare) <> 0 Then dCustoEmb = dValor
        If InStr(1, sExpressao, "ValorCategoria(""DVV"",3)", vbTextCompare) <> 0 Then dCustoFrete = dValor
        If InStr(1, sExpressao, MNEMONICOFPRECO_CUSTODIRETO, vbTextCompare) <> 0 Then dCustoDireto = dValor
        If InStr(1, sExpressao, MNEMONICOFPRECO_CUSTOFIXO, vbTextCompare) <> 0 Then dCustoFixo = dValor
        If InStr(1, sExpressao, "ValorCategoria(""DVV"",1)", vbTextCompare) <> 0 Then dDVVSemICMS = dValor
        If InStr(1, sExpressao, "DevDuvPadrao", vbTextCompare) <> 0 Then dDevDuv = dValor
        
        lErro = Comando_BuscarProximo(alComando(3))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 106939
    
    Loop
        
    RelListaPrecoCalc_Prepara1 = SUCESSO
     
    Exit Function
    
Erro_RelListaPrecoCalc_Prepara1:

    RelListaPrecoCalc_Prepara1 = gErr
     
    Select Case gErr
          
        Case 106937, 106938, 106939
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FORMACAOPRECOCALCLIN", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149959)
     
    End Select
     
    Exit Function

End Function

Private Function RelListaPrecoCalc_Prepara2(ByVal iFilialEmpresa As Integer, ByVal dtData As Date, ByVal iTabelaPreco As Integer, ByVal sProduto As String, dPrecoCalc As Double, alComando() As Long) As Long
'obtem o preco calculado pela rotina de calculo de precos

Dim lErro As Long, dValor As Double

On Error GoTo Erro_RelListaPrecoCalc_Prepara2

    lErro = Comando_Executar(alComando(4), "SELECT Valor FROM FormacaoPrecoCalc WHERE FilialEmpresa = ? AND Data = ? AND TabelaPreco = ? AND Produto = ?", _
        dValor, iFilialEmpresa, dtData, iTabelaPreco, sProduto)
    If lErro <> AD_SQL_SUCESSO Then gError 106954
        
    lErro = Comando_BuscarProximo(alComando(4))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 106955

    If lErro = AD_SQL_SUCESSO Then
        dPrecoCalc = dValor
    Else
        dPrecoCalc = 0
    End If
    
    RelListaPrecoCalc_Prepara2 = SUCESSO
     
    Exit Function
    
Erro_RelListaPrecoCalc_Prepara2:

    RelListaPrecoCalc_Prepara2 = gErr
     
    Select Case gErr
          
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149960)
     
    End Select
     
    Exit Function

End Function

Function RelCustoCOMCustoFP_Prepara(ByVal iFilialEmpresa As Integer, lNumIntRel As Long) As Long
'Insere registros em RElCustoComCustoFP referentes a produtos atributos para efeito de formacao de precos
'comparados com o preço utilizado no ultimo pedido de compras enviado.

Dim alComando(1 To 3) As Long
Dim lErro As Long
Dim lTransacao As Long
Dim sProduto As String, iClasseUM As Integer
Dim sFPUM As String, dFPCusto As Double, dtFPDataAtualizacao As Date, dFPAliquotaICMS As Double, iFPCondicaoPagto As Integer
Dim iIndice As Integer, dFator As Double
Dim lNumIntDoc As Long, dtData As Date, sUM As String, iMoeda As Integer, dTaxa As Double, dAliquotaICMS As Double, iCondicaoPagto As Integer, dPrecoUnitario As Double
Dim objCotacao As ClassCotacaoMoeda
Dim objCotacaoAnterior As ClassCotacaoMoeda

On Error GoTo Erro_RelCustoCOMCustoFP_Prepara
    
    'abre a transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 123211
    
    'abre o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = SUCESSO Then gError 123212
    Next
    
    'Obtem o próximo NumIntRel
    lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_PROX_REL_CUSTOFPCOM", lNumIntRel)
    If lErro <> SUCESSO Then gError 123217
        
    'inicializa as strings
    sProduto = String(STRING_PRODUTO, 0)
    sFPUM = String(STRING_UM_SIGLA, 0)
    
    'Busca a maior data daquele produto
    lErro = Comando_Executar(alComando(1), "SELECT Produtos.ClasseUM, Produtos.SiglaUMEstoque, Produto, Custo, DataAtualizacao, AliquotaICMS, CondicaoPagto FROM CustoEmbMP, Produtos WHERE CustoEmbMP.Produto = Produtos.Codigo AND FilialEmpresa = ? ORDER BY Produto", _
        iClasseUM, sFPUM, sProduto, dFPCusto, dtFPDataAtualizacao, dFPAliquotaICMS, iFPCondicaoPagto, iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 123213
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 123214
    
    Do While lErro = AD_SQL_SUCESSO
    
        '??? depois ver necessidade de considerar desconto
    
        sUM = String(STRING_UM_SIGLA, 0)
    
        'Busca informacoes sobre o ultimo pedido de compras enviado referente ao produto.
        lErro = Comando_Executar(alComando(2), "SELECT ItensPedCompraN.UM, ItensPedCompraN.NumIntDoc, ItensPedCompraN.PrecoUnitario, ItensPedCompraN.AliquotaICMS, PedidoCompraN.CondicaoPagto, PedidoCompraN.Moeda, PedidoCompraN.Taxa FROM ItensPedCompraN, PedidoCompraN WHERE ItensPedCompraN.PedCompra = PedidoCompraN.NumIntDoc AND PedidoCompraN.FilialEmpresa = ? AND PedidoCompraN.DataEnvio <> ? AND ItensPedCompraN.Produto = ? ORDER BY PedidoCompraN.Data DESC, PedidoCompraN.Codigo DESC", _
            sUM, lNumIntDoc, dPrecoUnitario, dAliquotaICMS, iCondicaoPagto, iMoeda, dTaxa, iFilialEmpresa, DATA_NULA, sProduto)
        If lErro <> AD_SQL_SUCESSO Then gError 123215
        
        lErro = Comando_BuscarPrimeiro(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 123216
    
        If lErro = SUCESSO Then
        
            'Verifica se a moeda não é a Real
            If iMoeda <> MOEDA_REAL Then
                
                'Verifica se a taxa foi preenchida e realiza a conversão
                If dTaxa = 0 Then
                
                    objCotacao.dtData = gdtDataAtual
                    objCotacao.iMoeda = iMoeda
                    lErro = CF("CotacaoMoeda_Le_UltimasCotacoes", objCotacao, objCotacaoAnterior)
                    If lErro <> SUCESSO Then gError 106960
                    
                    If objCotacao.dValor <> 0 Then
                        dTaxa = objCotacao.dValor
                    Else
                        If objCotacaoAnterior.dValor <> 0 Then
                            dTaxa = objCotacaoAnterior.dValor
                        End If
                    End If
                
                    dFPCusto = dFPCusto * dTaxa
                    
                End If
                
            Else
            
                dTaxa = 1
                
            End If
            
            If sFPUM <> sUM Then
                
                lErro = CF("UM_Conversao", iClasseUM, sFPUM, sUM, dFator)
                If lErro <> SUCESSO Then gError 106961
                
                dPrecoUnitario = dPrecoUnitario * dFator
                
            End If
            
            '??? depois incluir diferencas de aliqicms, condpgto
            
            If (dPrecoUnitario - dFPCusto) > DELTA_VALORMONETARIO Then
            
                'Realiza a gravação
                lErro = Comando_Executar(alComando(3), "INSERT INTO RelCustoCOMCustoFP (NumIntRel, FilialEmpresa, Produto, NumIntItemPedCompra, Taxa, PrecoUnitario) VALUES (?,?,?,?,?,?)", lNumIntRel, iFilialEmpresa, sProduto, lNumIntDoc, dTaxa, dPrecoUnitario)
                If lErro <> AD_SQL_SUCESSO Then gError 123218
        
            End If
    
        End If
        
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 123219
        
    Loop
    
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Comando_Fechar (alComando(iIndice))
    Next
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 123220
    
    RelCustoCOMCustoFP_Prepara = SUCESSO
            
    Exit Function
    
Erro_RelCustoCOMCustoFP_Prepara:

    RelCustoCOMCustoFP_Prepara = gErr
    
    Select Case gErr
        
        Case 123211
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 123212
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 123213, 123214, 123215, 123216, 123219
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CUSTOEMBMP", gErr)
            
        Case 123217, 106960, 106961
        
        Case 123218
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_RELCUSTOCOMCUSTOFP", gErr)
            
        Case 123220
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149961)
        
    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Comando_Fechar (alComando(iIndice))
    Next
    
    Call Transacao_Rollback
    
    Exit Function
    
End Function

Function RelCriticasFP_Prepara(ByVal iFilialEmpresa As Integer, ByVal sCodPrev As String, ByVal dtDataRef As Date, lNumIntRel As Long) As Long
'preenche arquivo auxiliar ao relatorio identificando produtos com informacoes faltando que afetem rotinas de formacao de precos.

Dim lErro As Long
Dim alComando(1 To 4) As Long, lTransacao As Long, iIndice As Integer
Dim sProduto As String

On Error GoTo Erro_RelCriticasFP_Prepara

    'abre a transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 106965
    
    'abre o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = SUCESSO Then gError 106966
    Next
    
    'Obtem o próximo NumIntRel
    lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_PROX_NUMINTREL", lNumIntRel)
    If lErro <> SUCESSO Then gError 106967
        
    'verificar se existem produtos para os quais existe previsao de venda que nao estao classificados p/rateio de custo fixo
    If giSQLTipoOrdParam = SQL_ORD_PARAM_ESQ_DIR Then
        lErro = Comando_Executar(alComando(1), "INSERT INTO RelCriticasFP (NumIntRel, Produto, Critica) (SELECT DISTINCT ?, Produto, 1 FROM PrevVendaMensal WHERE FilialEmpresa = ? AND Codigo = ? AND Ano = ? AND NOT EXISTS (SELECT Produto FROM ProdutoCategoria WHERE ProdutoCategoria.Categoria = ? AND ProdutoCategoria.Produto = PrevVendaMensal.Produto ))", _
            lNumIntRel, iFilialEmpresa, sCodPrev, Year(dtDataRef), gobjFAT.sCategCustoFixo)
    Else
        lErro = Comando_Executar(alComando(1), "INSERT INTO RelCriticasFP (NumIntRel, Produto, Critica) (SELECT DISTINCT ?, Produto, 1 FROM PrevVendaMensal WHERE FilialEmpresa = ? AND Codigo = ? AND Ano = ? AND NOT EXISTS (SELECT Produto FROM ProdutoCategoria WHERE ProdutoCategoria.Categoria = ? AND ProdutoCategoria.Produto = PrevVendaMensal.Produto ))", _
            gobjFAT.sCategCustoFixo, lNumIntRel, iFilialEmpresa, sCodPrev, Year(dtDataRef))
    End If
    If lErro <> AD_SQL_SUCESSO Then gError 106968
    
    'verificar produtos para os quais existe previsao de venda mas nao tinham kit definido
    lErro = Comando_Executar(alComando(2), "INSERT INTO RelCriticasFP (NumIntRel, Produto, Critica) (SELECT DISTINCT ?, Produto, 2 FROM PrevVendaMensal WHERE FilialEmpresa = ? AND Codigo = ? AND Ano = ? AND NOT EXISTS (SELECT ProdutoRaiz FROM Kit WHERE Kit.ProdutoRaiz = PrevVendaMensal.Produto ))", _
        lNumIntRel, iFilialEmpresa, sCodPrev, Year(dtDataRef))
    If lErro <> AD_SQL_SUCESSO Then gError 106970
    
    'verificar se existem mps, rotulos,... que nao tenham custo definido
    lErro = Comando_Executar(alComando(3), "INSERT INTO RelCriticasFP (NumIntRel, Produto, Critica) (SELECT DISTINCT ?, ProdutoMP, 3 FROM CustoDirFabrPlanMP WHERE FilialEmpresa = ? AND Ano = ? AND NOT EXISTS (SELECT ProdutoMP FROM CustoEmbMP WHERE CustoEmbMP.FilialEmpresa = CustoDirFabrPlanMP.FilialEmpresa AND CustoEmbMP.Produto = CustoDirFabrPlanMP.ProdutoMP))", _
        lNumIntRel, iFilialEmpresa, Year(dtDataRef))
    If lErro <> AD_SQL_SUCESSO Then gError 106971
    
    'verificar se existem embalagens que nao tenham custo definido
    lErro = Comando_Executar(alComando(4), "INSERT INTO RelCriticasFP (NumIntRel, Produto, Critica) (SELECT DISTINCT ?, ProdutoEmb, 4 FROM CustoDirFabrPlanEmb WHERE FilialEmpresa = ? AND Ano = ? AND NOT EXISTS (SELECT ProdutoEmb FROM CustoEmbMP WHERE CustoEmbMP.FilialEmpresa = CustoDirFabrPlanEmb.FilialEmpresa AND CustoEmbMP.Produto = CustoDirFabrPlanEmb.ProdutoEmb))", _
        lNumIntRel, iFilialEmpresa, Year(dtDataRef))
    If lErro <> AD_SQL_SUCESSO Then gError 106972
    
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Comando_Fechar (alComando(iIndice))
    Next
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 106969
    
    RelCriticasFP_Prepara = SUCESSO
     
    Exit Function
    
Erro_RelCriticasFP_Prepara:

    RelCriticasFP_Prepara = gErr
     
    Select Case gErr
          
        Case 106965
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 106966
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 106967
        
        Case 106968, 106970, 106971, 106972
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_RELCRITICASFP", gErr)
        
        Case 106969
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149962)
     
    End Select
     
    For iIndice = LBound(alComando) To UBound(alComando)
        Comando_Fechar (alComando(iIndice))
    Next
    
    Call Transacao_Rollback
    
    Exit Function

End Function

'Incluído por Luiz Nogueira em 21/08/03
Public Function CamposGenericos_Grava(ByVal objCamposGenericos As ClassCamposGenericos) As Long
'Dispara a gravação de Campos Genéricos

Dim lTransacao As Long
Dim lErro As Long

On Error GoTo Erro_CamposGenericos_Grava

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 102346
    
    'Atualiza a tabela CamposGenericos
    lErro = CF("CamposGenericos_Grava_EmTrans", objCamposGenericos)
    If lErro <> SUCESSO Then gError 102347
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 102348
    
    CamposGenericos_Grava = SUCESSO
    
    Exit Function
    
Erro_CamposGenericos_Grava:

    CamposGenericos_Grava = gErr

    Select Case gErr
    
        Case 102346
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 102347
        
        Case 102348
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149963)
    
    End Select
    
    Call Transacao_Rollback
    
End Function

'Incluído por Luiz Nogueira em 21/08/03
Public Function CamposGenericos_Grava_EmTrans(ByVal objCamposGenericos As ClassCamposGenericos) As Long
'Faz o lock do campo que está sendo alterado
'Atualiza informações do campo
'Grava os valores do campo
'DEVE SER CHAMADA EM TRANSAÇÃO

Dim iIndice As Integer
Dim alComando(0 To 1) As Long
Dim lErro As Long
Dim lCodigo As Long

On Error GoTo Erro_CamposGenericos_Grava_EmTrans

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 102339
    Next

    '*** LOCK DO CAMPO QUE SERÁ ALTERADO ***
    'Seleciona o Campo Genérico a ser alterado
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Codigo FROM CamposGenericos WHERE Codigo =?", 0, lCodigo, objCamposGenericos.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 102340

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 102341

    'Não encontrou a Tabela de Preço --> erro
    If lErro = AD_SQL_SEM_DADOS Then gError 102342

    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 102343
    '*** FIM DO LOCK ************************
    
    'Atualiza o campo CodProxValor na tabela CamposGenericos
    lErro = Comando_ExecutarPos(alComando(1), "UPDATE CamposGenericos SET ProxCodValor = ?", alComando(0), objCamposGenericos.lProxCodValor)
    If lErro <> AD_SQL_SUCESSO Then gError 102344
    
    'Grava os valores para o campo em questão
    lErro = CF("CamposGenericosValores_Grava_EmTrans", objCamposGenericos)
    If lErro <> SUCESSO Then gError 102345
    
    'Fechamento de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    CamposGenericos_Grava_EmTrans = SUCESSO
    
    Exit Function
    
Erro_CamposGenericos_Grava_EmTrans:

    CamposGenericos_Grava_EmTrans = gErr

    Select Case gErr
    
        Case 102345
        
        Case 102339
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 102340, 102341
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CAMPOSGENERICOS", gErr, objCamposGenericos.lCodigo)
            
        Case 102342
            Call Rotina_Erro(vbOKOnly, "ERRO_CAMPOGENERICO_NAO_ENCONTRADO", gErr, objCamposGenericos.lCodigo)
            
        Case 102343
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_CAMPOSGENERICOS", gErr, objCamposGenericos.lCodigo)
        
        Case 102344
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_CAMPOSGENERICOS", gErr, objCamposGenericos.lCodigo)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149964)
    
    End Select
    
    'Fechamento de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
End Function

'Incluído por Luiz Nogueira em 21/08/03
Public Function CamposGenericosValores_Grava_EmTrans(ByVal objCamposGenericos As ClassCamposGenericos) As Long
'Exclui os valores do campo em questão
'Insere os novos valores para o campo
'Verifica se não gerou inconsistência no BD
'DEVE SER CHAMADA EM TRANSAÇÃO

Dim iIndice As Integer
Dim alComando(0) As Long
Dim lErro As Long
Dim objCamposGenericosValores As ClassCamposGenericosValores

On Error GoTo Erro_CamposGenericosValores_Grava_EmTrans

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 102357
    Next
    
    'Exclui os valores do campo em questão
    lErro = CF("CamposGenericosValores_Exclui_EmTrans", objCamposGenericos, False)
    If lErro <> SUCESSO Then gError 102354
    
    'Para cada valor a ser gravado para o campo em questão
    For Each objCamposGenericosValores In objCamposGenericos.colCamposGenericosValores
    
        'Insere o valor no BD
        lErro = Comando_Executar(alComando(0), "INSERT INTO CamposGenericosValores( CodCampo, CodValor, Padrao, Valor, Complemento1, Complemento2, Complemento3, Complemento4, Complemento5) VALUES (?,?,?,?,?,?,?,?,?)", objCamposGenericos.lCodigo, objCamposGenericosValores.lCodValor, objCamposGenericosValores.iPadrao, objCamposGenericosValores.sValor, objCamposGenericosValores.sComplemento1, objCamposGenericosValores.sComplemento2, objCamposGenericosValores.sComplemento3, objCamposGenericosValores.sComplemento4, objCamposGenericosValores.sComplemento5)
        If lErro <> AD_SQL_SUCESSO Then gError 102355
    
    Next

    'Verifica se não foi excluído algum valor que já tenha sido utilizado em outro local (teste de consistência)
    If Len(Trim(objCamposGenericos.sValidaExclusao)) <> 0 Then
        lErro = CF(objCamposGenericos.sValidaExclusao)
        If lErro <> SUCESSO Then gError 102356
    End If
    
    'Fechamento de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    CamposGenericosValores_Grava_EmTrans = SUCESSO
    
    Exit Function
    
Erro_CamposGenericosValores_Grava_EmTrans:

    CamposGenericosValores_Grava_EmTrans = gErr

    Select Case gErr
    
        Case 102354, 102356
        
        Case 102357
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 102355
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CAMPOSGENERICOSVALORES", gErr, objCamposGenericosValores.sValor, objCamposGenericos.lCodigo)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149965)
    
    End Select
    
    'Fechamento de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
End Function

'Incluído por Luiz Nogueira em 21/08/03
Public Function CamposGenericosValores_Exclui(ByVal objCamposGenericos As ClassCamposGenericos) As Long
'Exclui os valores de um determinado campo genérico

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_CamposGenericosValores_Exclui

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 102380
    
    'Exclui os valores para o campo passado como parâmetro
    lErro = CF("CamposGenericosValores_Exclui_EmTrans", objCamposGenericos)
    If lErro <> SUCESSO Then gError 102381
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 102382
    
    CamposGenericosValores_Exclui = SUCESSO
    
    Exit Function
    
Erro_CamposGenericosValores_Exclui:

    CamposGenericosValores_Exclui = gErr
    
    Select Case gErr
    
        Case 102380
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
    
        Case 102381
            
        Case 102382
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149966)
    
    End Select
    
    Call Transacao_Rollback
    
End Function

'Incluído por Luiz Nogueira em 21/08/03
Public Function CamposGenericosValores_Exclui_EmTrans(ByVal objCamposGenericos As ClassCamposGenericos, Optional ByVal bValidaExclusao As Boolean = True) As Long
'Exclui os valores de um determinado campo genérico
'DEVE SER CHAMADA EM TRANSAÇÃO

Dim iIndice As Integer
Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim lCodValor As Long
Dim sValor As String

On Error GoTo Erro_CamposGenericosValores_Exclui_EmTrans

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 102349
    Next
    
    'Inicializa a string valor
    sValor = String(STRING_CAMPOSGENERICOSVALORES_VALOR, 0)
    
    'Lê os valores do campo passado como parâmetro
    lErro = Comando_ExecutarPos(alComando(0), "SELECT CodValor, Valor FROM CamposGenericosValores WHERE CodCampo = ?", 0, lCodValor, sValor, objCamposGenericos.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 102350
    
    'Busca o primeiro valor
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 102351
    
    'Enquanto houverem valores
    Do While lErro = AD_SQL_SUCESSO
    
        'Exclui o valor do BD
        lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM CamposGenericosValores", alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 102353
        
        'Busca o próximo valor
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 102352
    
    Loop
    
    'Se é para validar a exclusão
    'Obs.: a exclusão não é validada quando é chamada na gravação. Nesse
    'caso, a validação é chamada na própria função de gravação, depois que
    'os registros forem inseridos
    If bValidaExclusao Then
    
        'Verifica se não foi excluído algum valor que já tenha sido utilizado em outro local (teste de consistência)
        lErro = CF(objCamposGenericos.sValidaExclusao)
        If lErro <> SUCESSO Then gError 102405
    
    End If
    
    'Fechamento de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    CamposGenericosValores_Exclui_EmTrans = SUCESSO
    
    Exit Function
    
Erro_CamposGenericosValores_Exclui_EmTrans:

    CamposGenericosValores_Exclui_EmTrans = gErr
    
    Select Case gErr
    
        Case 102405
        
        Case 102349
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
    
        Case 102350 To 102352
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CAMPOSGENERICOSVALORES", gErr, objCamposGenericos.lCodigo)
            
        Case 102353
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CAMPOSGENERICOSVALORES", gErr, sValor, objCamposGenericos.lCodigo)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149967)
    
    End Select
    
    'Fechamento de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
End Function

Public Function CamposGenericos_CorrigeBD_MarcaEspecie(ByVal lCodCampo As Long) As Long
'Verifica qual campo deve ser lido na tabela de PedidosDeVenda/PedidosDeVendaBaixados/NFiscal (espécie ou marca)
'Lê os valores para o campo passado como parâmetro
'Monta um objCamposGenericos guardando os valores lidos
'Efetua a gravação nas tabelas CamposGenericos e CamposGenericosValores
'Atualiza as tabelas PedidosDeVenda/PedidosDeVendaBaixados/NFiscal para que ao invés de conteúdo, elas guardem o código de espécie/marca
'Essa função deve ser utilizada quandoo recurso de cadastro de Espécie/Marca de volumes for
'incluído em versões do Corporator já instaladas em clientes

Dim lTransacao As Long
Dim alComando(0 To 1) As Long
Dim lErro As Long
Dim objCamposGenericos As New ClassCamposGenericos
Dim objCamposGenericosValores As ClassCamposGenericosValores
Dim lCodValor As Long
Dim sMarcaEspecie As String
Dim sSelect As String
Dim asUpdate(0 To 2) As String
Dim iIndice As Long

On Error GoTo Erro_CamposGenericos_CorrigeBD_MarcaEspecie

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 102367
    
    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 102368
    Next
    
    'inicializa a string
    sMarcaEspecie = String(STRING_NFISCAL_VOLUME_MARCA, 0)
    
    'Determina o select que será feito
    Select Case lCodCampo
    
        Case CAMPOSGENERICOS_VOLUMEESPECIE
            sSelect = "SELECT DISTINCT Trim(VolumeEspecie) FROM NFiscal WHERE Len(Trim(VolumeEspecie)>0 UNION SELECT DISTINCT Trim(VolumeEspecie) FROM PedidosDeVenda WHERE Len(Trim(VolumeEspecie))>0 UNION SELECT DISTINCT Trim(VolumeEspecie) FROM PedidosDeVendaBaixados WHERE Len(Trim(VolumeEspecie))>0 ORDER BY VolumeEspecie"
            asUpdate(0) = "UPDATE NFiscal SET VolumeEspecie = ? WHERE VolumeEspecie = ?"
            asUpdate(1) = "UPDATE PedidosDeVenda SET VolumeEspecie = ? WHERE VolumeEspecie = ?"
            asUpdate(2) = "UPDATE PedidosDeVendaBaixados SET VolumeEspecie = ? WHERE VolumeEspecie = ?"
            objCamposGenericos.sValidaExclusao = "CamposGenericos_ValidaExclusao_Especie1"
        
        Case CAMPOSGENERICOS_VOLUMEMARCA
            sSelect = "SELECT DISTINCT Trim(VolumeMarca) FROM NFiscal WHERE Len(Trim(VolumeMarca))>0 UNION SELECT DISTINCT Trim(VolumeMarca) FROM PedidosDeVenda WHERE Len(Trim(VolumeMarca))>0 UNION  SELECT DISTINCT Trim(VolumeMarca) FROM PedidosDeVendaBaixados WHERE Len(Trim(VolumeEspecie))>0 ORDER BY VolumeMarca"
            asUpdate(0) = "UPDATE NFiscal SET VolumeMarca = ? WHERE VolumeMarca = ?"
            asUpdate(1) = "UPDATE PedidosDeVenda SET VolumeMarca = ? WHERE VolumeMarca = ?"
            asUpdate(2) = "UPDATE PedidosDeVendaBaixados SET VolumeMarca = ? WHERE VolumeMarca = ?"
            objCamposGenericos.sValidaExclusao = "CamposGenericos_ValidaExclusao_Marca1"
    
    End Select

    'Lê no BD as espécies/marcas de volumes que já foram utilizadas em notas fiscais
    lErro = Comando_Executar(alComando(0), sSelect, sMarcaEspecie)
    If lErro <> AD_SQL_SUCESSO Then gError 102369
    
    'Busca a primeira espécie/marca de volume
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 102370
    
    'Se não encontrou nada => erro
    If lErro = AD_SQL_SEM_DADOS Then gError 102375
    
    'Guarda no obj o código do campo genérico espécie/marca de volume
    objCamposGenericos.lCodigo = lCodCampo
    
    'Inicializa o primeiro código de valor para esse campo
    lCodValor = 1
    
    'Enquanto houverem espécies/marcas de volume
    Do While lErro = AD_SQL_SUCESSO
    
        'Instancia um novo obj
        Set objCamposGenericosValores = New ClassCamposGenericosValores
        
        'Guarda no obj o código para essa espécie/marca
        objCamposGenericosValores.lCodValor = lCodValor
        
        'Guarda no obj a descrição da espécie/marca
        objCamposGenericosValores.sValor = sMarcaEspecie
    
        'Adiciona o obj à coleção de espécies/marcas
        objCamposGenericos.colCamposGenericosValores.Add objCamposGenericosValores
        
        'Para cada tabela a ser atualizada
        For iIndice = LBound(asUpdate) To UBound(asUpdate)
        
            'Atualiza a tabela de NFiscal, alterando a descrição da espécie/marca pelo novo código criado para ela
            lErro = Comando_Executar(alComando(1), asUpdate(iIndice), lCodValor, sMarcaEspecie)
            If lErro <> AD_SQL_SUCESSO Then gError 102371
        
        Next
        
        lCodValor = lCodValor + 1
        
        'Busca a próxima espécie/marca
        lErro = Comando_BuscarProximo(alComando(0))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 102372
    
    Loop
    
    'Guarda o código para a próxima espécie / marca a ser gerada
    objCamposGenericos.lProxCodValor = lCodValor
    
    'Grava o campo espécie/marca
    lErro = CF("CamposGenericos_Grava_EmTrans", objCamposGenericos)
    If lErro <> SUCESSO Then gError 102373
    
    'Fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 102374
    
    CamposGenericos_CorrigeBD_MarcaEspecie = SUCESSO
    
    Exit Function
    
Erro_CamposGenericos_CorrigeBD_MarcaEspecie:

    CamposGenericos_CorrigeBD_MarcaEspecie = gErr
    
    Select Case gErr
    
        Case 102373, 102375
        
        Case 102367
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
        
        Case 102368
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 102371
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO", gErr, "PedidosDeVenda/PedidosDeVendaBaixados/NFiscal")
            
        Case 102369, 102370, 102372
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_GENERICO", gErr, "PedidosDeVenda/PedidosDeVendaBaixados/NFiscal")
            
        Case 102374
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149968)
    
    End Select

    'Fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    'RollBack
    Call Transacao_Rollback
    
End Function

Function Cliente_Verifica_Preenchimento(ByVal objCliente As ClassCliente, Optional ByVal objEndereco As ClassEndereco) As Long
'para ser chamada em Gravar_Registro de Cliente verificando se campos foram preenchidos

Dim lErro As Long, objFilialCliente As New ClassFilialCliente
Dim vbMsgRes As VbMsgBoxResult

On Error GoTo Erro_Cliente_Verifica_Preenchimento

    With objCliente
        objFilialCliente.sCgc = .sCgc
        objFilialCliente.iCodTransportadora = .iCodTransportadora
        objFilialCliente.sInscricaoEstadual = .sInscricaoEstadual
        objFilialCliente.iVendedor = .iVendedor
        objFilialCliente.dtDataUltVisita = .dtDataUltVisita
    End With
    
    lErro = FilialCliente_Verifica_Preenchimento(objFilialCliente, objEndereco)
    If lErro <> SUCESSO Then gError 124069
    
    If objCliente.iCondicaoPagto = 0 Then
        
        Select Case gobjFAT.iCliPreenchCondPagto
        
            Case CAMPO_PREENCH_OBRIGATORIO
                gError 124061
                
            Case CAMPO_PREENCH_OPCIONAL_AVISO
                vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_ACEITA_CLI_SEM_CONDPAGTO")
                If vbMsgRes = vbNo Then gError 124062
            
        End Select
        
    End If
        
    Cliente_Verifica_Preenchimento = SUCESSO
     
    Exit Function
    
Erro_Cliente_Verifica_Preenchimento:

    Cliente_Verifica_Preenchimento = gErr
     
    Select Case gErr
          
        Case 124061
            Call Rotina_Erro(vbOKOnly, "ERRO_PREENCH_COND_PAGTO", gErr)
        
        Case 124062, 124069
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149969)
     
    End Select
     
    Exit Function

End Function

Function FilialCliente_Verifica_Preenchimento(ByVal objFilialCliente As ClassFilialCliente, Optional ByVal objEndereco As ClassEndereco) As Long
'para ser chamada em Gravar_Registro de FilialCliente verificando se campos foram preenchidos

Dim lErro As Long, vbMsgRes As VbMsgBoxResult
Dim bCliExterior As Boolean

On Error GoTo Erro_FilialCliente_Verifica_Preenchimento

    bCliExterior = False
    If Not (objEndereco Is Nothing) Then
        If objEndereco.iCodigoPais <> PAIS_BRASIL Then bCliExterior = True
    End If

    If Len(Trim(objFilialCliente.sCgc)) = 0 Then
    
        Select Case gobjFAT.iCliPreenchCNPJ
        
            Case CAMPO_PREENCH_OBRIGATORIO
                If Not bCliExterior Then gError 124059
                
            Case CAMPO_PREENCH_OPCIONAL_AVISO
                If Not bCliExterior Then
                    vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_ACEITA_CLI_SEM_CNPJ")
                    If vbMsgRes = vbNo Then gError 124060
                End If
            
        End Select
    
    End If
    
    If Len(Trim(objFilialCliente.sInscricaoEstadual)) = 0 Then
    
        Select Case gobjFAT.iCliPreenchInscEst
        
            Case CAMPO_PREENCH_OBRIGATORIO
                gError 124063
                
            Case CAMPO_PREENCH_OPCIONAL_AVISO
                vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_ACEITA_CLI_SEM_INSCEST")
                If vbMsgRes = vbNo Then gError 124064
            
        End Select
    
    End If
    
    If objFilialCliente.iCodTransportadora = 0 Then
    
        Select Case gobjFAT.iCliPreenchTransp
        
            Case CAMPO_PREENCH_OBRIGATORIO
                gError 124065
                
            Case CAMPO_PREENCH_OPCIONAL_AVISO
                vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_ACEITA_CLI_SEM_TRANSP")
                If vbMsgRes = vbNo Then gError 124066
            
        End Select
    
    End If
    
    If objFilialCliente.iVendedor = 0 Then
        Select Case gobjFAT.iCliPreenchVend
            Case CAMPO_PREENCH_OBRIGATORIO
                gError 211081
            Case CAMPO_PREENCH_OPCIONAL_AVISO
                vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_ACEITA_CLI_SEM_VEND")
                If vbMsgRes = vbNo Then gError ERRO_SEM_MENSAGEM
        End Select
    End If
    
    If objFilialCliente.dtDataUltVisita = DATA_NULA Then
        Select Case gobjFAT.iCliPreenchDtUltVi
            Case CAMPO_PREENCH_OBRIGATORIO
                gError 211082
            Case CAMPO_PREENCH_OPCIONAL_AVISO
                vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_ACEITA_CLI_SEM_DTULTVI")
                If vbMsgRes = vbNo Then gError ERRO_SEM_MENSAGEM
        End Select
    End If
    
    If Not (objEndereco Is Nothing) Then
    
        If Len(Trim(objEndereco.sEndereco)) = 0 And Len(Trim(objEndereco.sLogradouro)) = 0 Then
            Select Case gobjFAT.iCliPreenchEnd
                Case CAMPO_PREENCH_OBRIGATORIO
                    gError 211083
                Case CAMPO_PREENCH_OPCIONAL_AVISO
                    vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_ACEITA_CLI_SEM_END")
                    If vbMsgRes = vbNo Then gError ERRO_SEM_MENSAGEM
            End Select
        End If
        If Len(Trim(objEndereco.sCEP)) = 0 Then
            Select Case gobjFAT.iCliPreenchCEP
                Case CAMPO_PREENCH_OBRIGATORIO
                    gError 211084
                Case CAMPO_PREENCH_OPCIONAL_AVISO
                    vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_ACEITA_CLI_SEM_CEP")
                    If vbMsgRes = vbNo Then gError ERRO_SEM_MENSAGEM
            End Select
        End If
        If objEndereco.lNumero = 0 Then
            Select Case gobjFAT.iCliPreenchEndNum
                Case CAMPO_PREENCH_OBRIGATORIO
                    gError 211085
                Case CAMPO_PREENCH_OPCIONAL_AVISO
                    vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_ACEITA_CLI_SEM_ENDNUM")
                    If vbMsgRes = vbNo Then gError ERRO_SEM_MENSAGEM
            End Select
        End If
        If Len(Trim(objEndereco.sTelefone1)) = 0 And Len(Trim(objEndereco.sTelNumero1)) = 0 Then
            Select Case gobjFAT.iCliPreenchTelefone
                Case CAMPO_PREENCH_OBRIGATORIO
                    gError 211086
                Case CAMPO_PREENCH_OPCIONAL_AVISO
                    vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_ACEITA_CLI_SEM_TELEFONE")
                    If vbMsgRes = vbNo Then gError ERRO_SEM_MENSAGEM
            End Select
        End If
        If Len(Trim(objEndereco.sEmail)) = 0 Then
            Select Case gobjFAT.iCliPreenchEmail
                Case CAMPO_PREENCH_OBRIGATORIO
                    gError 211087
                Case CAMPO_PREENCH_OPCIONAL_AVISO
                    vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_ACEITA_CLI_SEM_EMAIL")
                    If vbMsgRes = vbNo Then gError ERRO_SEM_MENSAGEM
            End Select
        End If
        If Len(Trim(objEndereco.sComplemento)) = 0 Then
            Select Case gobjFAT.iCliPreenchEndCompl
                Case CAMPO_PREENCH_OBRIGATORIO
                    gError 211088
                Case CAMPO_PREENCH_OPCIONAL_AVISO
                    vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_ACEITA_CLI_SEM_ENDCOMPL")
                    If vbMsgRes = vbNo Then gError ERRO_SEM_MENSAGEM
            End Select
        End If
        If Len(Trim(objEndereco.sContato)) = 0 Then
            Select Case gobjFAT.iCliPreenchContato
                Case CAMPO_PREENCH_OBRIGATORIO
                    gError 201454
                Case CAMPO_PREENCH_OPCIONAL_AVISO
                    vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_ACEITA_CLI_SEM_CONTATO")
                    If vbMsgRes = vbNo Then gError ERRO_SEM_MENSAGEM
            End Select
        End If
    End If
    
    FilialCliente_Verifica_Preenchimento = SUCESSO
     
    Exit Function
    
Erro_FilialCliente_Verifica_Preenchimento:

    FilialCliente_Verifica_Preenchimento = gErr
     
    Select Case gErr
          
        Case 124059
            Call Rotina_Erro(vbOKOnly, "ERRO_PREENCH_CNPJ", gErr)
        
        Case 124063
            Call Rotina_Erro(vbOKOnly, "ERRO_PREENCH_INSCR_EST", gErr)
        
        Case 124065
            Call Rotina_Erro(vbOKOnly, "ERRO_PREENCH_TRANSPORTADORA", gErr)
        
        Case 211081
            Call Rotina_Erro(vbOKOnly, "ERRO_PREENCH_VEND", gErr)
            
        Case 211082
            Call Rotina_Erro(vbOKOnly, "ERRO_PREENCH_DTULTVI", gErr)
            
        Case 211083
            Call Rotina_Erro(vbOKOnly, "ERRO_PREENCH_END", gErr)
            
        Case 211084
            Call Rotina_Erro(vbOKOnly, "ERRO_PREENCH_CEP", gErr)
            
        Case 211085
            Call Rotina_Erro(vbOKOnly, "ERRO_PREENCH_ENDNUM", gErr)
            
        Case 211086
            Call Rotina_Erro(vbOKOnly, "ERRO_PREENCH_TELEFONE", gErr)
            
        Case 211087
            Call Rotina_Erro(vbOKOnly, "ERRO_PREENCH_EMAIL", gErr)
        
        Case 201454
            Call Rotina_Erro(vbOKOnly, "ERRO_PREENCH_CONTATO", gErr)
        
        Case 211088
            Call Rotina_Erro(vbOKOnly, "ERRO_PREENCH_ENDCOMPL", gErr)
        
        Case 124060, 124064, 124066
        
        Case ERRO_SEM_MENSAGEM
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149970)
     
    End Select
     
    Exit Function

End Function

Function PedidoVenda_Verifica_Preenchimento(ByVal objPedidoVenda As ClassPedidoDeVenda) As Long

Dim lErro As Long, vbMsgRes As VbMsgBoxResult
Dim objItemPV As ClassItemPedido

On Error GoTo Erro_PedidoVenda_Verifica_Preenchimento

    If objPedidoVenda.iCondicaoPagto = 0 Then
        
        Select Case gobjFAT.iPVPreenchCondPagto
        
            Case CAMPO_PREENCH_OBRIGATORIO
                gError 124071
                
            Case CAMPO_PREENCH_OPCIONAL_AVISO
                vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_ACEITA_PV_SEM_CONDPAGTO")
                If vbMsgRes = vbNo Then gError ERRO_SEM_MENSAGEM
            
        End Select
        
    End If
    
    
    For Each objItemPV In objPedidoVenda.colItensPedido
        
        If objItemPV.dtDataEntrega = DATA_NULA Then
        
            Select Case gobjFAT.iPVPreenchDataEntrega
            
                Case CAMPO_PREENCH_OBRIGATORIO
                    gError 124072
                    
                Case CAMPO_PREENCH_OPCIONAL_AVISO
                    vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_ACEITA_PV_SEM_DATAENTREGA")
                    If vbMsgRes = vbNo Then gError ERRO_SEM_MENSAGEM
                
            End Select
            
        End If
    Next
    
        
    PedidoVenda_Verifica_Preenchimento = SUCESSO
     
    Exit Function
    
Erro_PedidoVenda_Verifica_Preenchimento:

    PedidoVenda_Verifica_Preenchimento = gErr
     
    Select Case gErr
          
        Case 124071
            Call Rotina_Erro(vbOKOnly, "ERRO_PREENCH_COND_PAGTO", gErr)
        
        Case 124072
            Call Rotina_Erro(vbOKOnly, "ERRO_PREENCH_DATA_ENTREGA", gErr)
        
        Case ERRO_SEM_MENSAGEM
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149971)
     
    End Select
     
    Exit Function

End Function

Private Function ItemNFGradeAloc_MovEst_Gera(alComando() As Long, ByVal objItemRomaneio As ClassItemRomaneioGrade, ByVal objItemRomaneioAloc As ClassReservaItem, dQuantLiberar As Double, ByVal objMovEstoque As ClassMovEstoque) As Long
'Disponibiliza reserva do Almoxarifado de alocação

Dim lErro As Long
Dim dQuantidade As Double

On Error GoTo Erro_ItemNFGradeAloc_MovEst_Gera
      
    dQuantLiberar = objItemRomaneioAloc.dQuantidade
      
    'Busca uma reserva para o Almoxarifado da alocação
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Quantidade FROM Reserva WHERE TipoDoc = ? AND NumIntOrigem = ? AND Produto =? AND Almoxarifado =?", 0, dQuantidade, TIPO_PEDIDO_GRADE, objItemRomaneio.lNumIntItemPV, objItemRomaneio.sProduto, objItemRomaneioAloc.iAlmoxarifado)
    If lErro <> AD_SQL_SUCESSO Then Error 25753

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 25754
    
    'Se reserva foi encontrada
    If lErro = AD_SQL_SUCESSO Then
        
        'Faz o lock na reserva
        lErro = Comando_LockExclusive(alComando(1))
        If lErro <> AD_SQL_SUCESSO Then Error 25755

        'Se a quantidade reservada for menor ou igual a quantidade a liberar
        If dQuantLiberar >= dQuantidade Then
            
            'Exclui a reserva
            lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM Reserva", alComando(1))
            If lErro <> AD_SQL_SUCESSO Then Error 25756


            
            'Gera um item de movto de estoque de utilização de reserva
            objMovEstoque.colItens.Add 0, 0, 0, 0, objItemRomaneio.sProduto, objItemRomaneio.sDescricao, objItemRomaneio.sUMEstoque, dQuantidade, objItemRomaneioAloc.iAlmoxarifado, "", objItemRomaneio.lNumIntDoc, "", 0, "", "", "", "", 0, Nothing, Nothing, DATA_NULA
        
            dQuantLiberar = dQuantLiberar - dQuantidade
        
        Else
            'Atualiza a quantidade reservada em Reserva
            lErro = Comando_ExecutarPos(alComando(2), "UPDATE Reserva SET Quantidade = Quantidade - ? ", alComando(1), dQuantLiberar)
            If lErro <> AD_SQL_SUCESSO Then Error 25757
            
            'Adiciona um movto de estoque do tipo utilização de reserva
            objMovEstoque.colItens.Add 0, 0, 0, 0, objItemRomaneio.sProduto, objItemRomaneio.sDescricao, objItemRomaneio.sUMEstoque, dQuantLiberar, objItemRomaneioAloc.iAlmoxarifado, "", objItemRomaneio.lNumIntDoc, "", 0, "", "", "", "", 0, Nothing, Nothing, DATA_NULA
        
            dQuantLiberar = 0


        
        End If

    End If

    ItemNFGradeAloc_MovEst_Gera = SUCESSO

    Exit Function

Erro_ItemNFGradeAloc_MovEst_Gera:

    ItemNFGradeAloc_MovEst_Gera = Err

    Select Case Err

        Case 25753, 25754
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RESERVA1", Err)
        
        Case 25755
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_RESERVA", Err)

        Case 25756
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_RESERVA1", Err)

        Case 25757
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_RESERVA1", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149972)

    End Select

    Exit Function

End Function

Private Function ItemNFGradeAloc_MovEst_Gera2(alComando() As Long, ByVal objItemRomaneio As ClassItemRomaneioGrade, ByVal objItemRomaneioAloc As ClassReservaItem, dQuantLiberar As Double, ByVal objMovEstoque As ClassMovEstoque) As Long
'Disponibiliza reservas do ItemNF(ItemPV correspondente) de almoxarifados distintos do almoxarifado de alocação
'A quantidade disponibilizada é dada por dQuantLiberar

Dim lErro As Long
Dim dQuantidade As Double
Dim iAlmoxarifado As Integer

On Error GoTo Erro_ItemNFGradeAloc_MovEst_Gera2

    If dQuantLiberar > 0 Then
        
        'Busca reserva em Almoxarifados diferentes do de alocação
        lErro = Comando_ExecutarPos(alComando(1), "SELECT Quantidade, Almoxarifado FROM Reserva WHERE TipoDoc = ? AND NumIntOrigem = ? AND Produto =? AND Almoxarifado <> ?", 0, dQuantidade, iAlmoxarifado, TIPO_PEDIDO_GRADE, objItemRomaneio.lNumIntItemPV, objItemRomaneio.sProduto, objItemRomaneioAloc.iAlmoxarifado)
        If lErro <> AD_SQL_SUCESSO Then Error 25758

        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 25759
        
        'Enquanto encontrar reserva ou ainda tiver o quantidade a liberar
        Do While lErro <> AD_SQL_SEM_DADOS And dQuantLiberar > 0

            
            'faz lock na reserva
            lErro = Comando_LockExclusive(alComando(1))
            If lErro <> AD_SQL_SUCESSO Then Error 25760
            
            'Se a qtd reservada for menor ou igual a qtd a liberar
            If dQuantLiberar >= dQuantidade Then
                
                'Apaga a reserva
                lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM Reserva", alComando(1))
                If lErro <> AD_SQL_SUCESSO Then Error 25761
                
                'Gera um movto de cancelamento de reserva
                objMovEstoque.colItens.Add 0, 0, 0, 0, objItemRomaneio.sProduto, objItemRomaneio.sDescricao, objItemRomaneio.sUMEstoque, dQuantidade, iAlmoxarifado, "", objItemRomaneio.lNumIntDoc, "", 0, "", "", "", "", 0, Nothing, Nothing, DATA_NULA
                dQuantLiberar = dQuantLiberar - dQuantidade
            
            Else
                'Atualiza a reserva subtraindo a QuantLiberar
                lErro = Comando_ExecutarPos(alComando(2), "UPDATE Reserva SET Quantidade = Quantidade - ? ", alComando(1), dQuantLiberar)
                If lErro <> AD_SQL_SUCESSO Then Error 25762
                
                'Gera um movto de cancelamento de reserva
                objMovEstoque.colItens.Add 0, 0, 0, 0, objItemRomaneio.sProduto, objItemRomaneio.sDescricao, objItemRomaneio.sUMEstoque, dQuantLiberar, iAlmoxarifado, "", objItemRomaneio.lNumIntDoc, "", 0, "", "", "", "", 0, Nothing, Nothing, DATA_NULA
                dQuantLiberar = 0
                Exit Do

            
            End If
                    
            'Busca a próxima reserva
            lErro = Comando_BuscarProximo(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 25763







        
        Loop
    
    End If

    ItemNFGradeAloc_MovEst_Gera2 = SUCESSO

    Exit Function

Erro_ItemNFGradeAloc_MovEst_Gera2:

    ItemNFGradeAloc_MovEst_Gera2 = Err

    Select Case Err

        Case 25758, 25759, 25763
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RESERVA1", Err)
        
        Case 25760
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_RESERVA", Err)

        Case 25761
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_RESERVA1", Err)

        Case 25762
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_RESERVA1", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149973)

    End Select

    Exit Function

End Function

Private Function ItemPVGrade_Atualiza_QuantReservada(alComando() As Long, objItemRomaneioGrade As ClassItemRomaneioGrade, sUnidadeMed As String, ByVal objProduto As ClassProduto, ByVal dQuantLiberada As Double, Optional ByVal objItemNF As ClassItemNF) As Long
'Atualiza QuantReservada o ItemPV cujo NumInt foi passado

Dim lErro As Long
Dim tItemPV As typeItemPedido
Dim dQuantLiberadaUMItemPV As Double
Dim dFator As Double
Dim objProdutoINF As New ClassProduto

On Error GoTo Erro_ItemPVGrade_Atualiza_QuantReservada

    objProdutoINF.sCodigo = objItemNF.sProduto

    lErro = CF("Produto_Le", objProdutoINF)
    If lErro <> SUCESSO And lErro <> 23080 Then gError 25766
       
    'Lê UM e ClasseUM de itemPV
    lErro = Comando_ExecutarPos(alComando(1), "SELECT QuantReservada FROM ItensPedidoDeVendaGrade WHERE NumIntDoc = ?", 0, tItemPV.dQuantReservada, objItemRomaneioGrade.lNumIntItemPV)
    If lErro <> AD_SQL_SUCESSO Then Error 25766

    'Tenta ler registro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SEM_DADOS And lErro <> AD_SQL_SUCESSO Then Error 25767
    If lErro = AD_SQL_SEM_DADOS Then Error 25768 'Não encontrou

    'Faz lock do item
    lErro = Comando_LockExclusive(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then Error 25769
    
    If objProdutoINF.iKitVendaComp <> MARCADO Then
        'Obtém fator de conversão para unidade de medida de ItemPV
        lErro = CF("UM_Conversao", objProduto.iClasseUM, objProduto.sSiglaUMEstoque, sUnidadeMed, dFator)
        If lErro <> SUCESSO Then Error 25772
    Else
        dFator = 1
    End If

    'Quantidade liberada em UM de ItemPV
    dQuantLiberadaUMItemPV = (dQuantLiberada * dFator)

    'Se a quantidade liberada em reservas do ítem for maior que a reservada ==> erro
    If dQuantLiberadaUMItemPV - tItemPV.dQuantReservada > QTDE_ESTOQUE_DELTA Then Error 25773

    'Atualiza quant reservada de ItemPV
    lErro = Comando_ExecutarPos(alComando(2), "UPDATE ItensPedidoDeVendaGrade SET QuantReservada = QuantReservada - ? ", alComando(1), dQuantLiberadaUMItemPV)
    If lErro <> AD_SQL_SUCESSO Then Error 25774
    
    ItemPVGrade_Atualiza_QuantReservada = SUCESSO

    Exit Function

Erro_ItemPVGrade_Atualiza_QuantReservada:

    ItemPVGrade_Atualiza_QuantReservada = Err

    Select Case Err

        Case 25766, 25767
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITEMPV", Err, objItemRomaneioGrade.lNumIntDoc)

        Case 25768
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ITEMPV_NAO_CADASTRADO", Err, objItemRomaneioGrade.lNumIntDoc)

        Case 25769
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_ITEMPEDIDODEVENDA", Err, objItemRomaneioGrade.lNumIntDoc)

        Case 25770, 25772 'tratado na rotina chamada

        Case 25771
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_INEXISTENTE", Err, objProduto.sCodigo)
        
        Case 25773
            lErro = Rotina_Erro(vbOKOnly, "ERRO_QUANT_LIBERADA_MAIOR_QUANT_RESERVADA", Err, objItemRomaneioGrade.lNumIntDoc)
        
        Case 25774
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_ITEMPV", Err, objItemRomaneioGrade.lNumIntDoc)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149974)

    End Select

    Exit Function

End Function


Function ItensNFGrade_Inclui(objItemNF As ClassItemNF) As Long

Dim lErro As Long
Dim lComando As Long
Dim objItemRomaneio As ClassItemRomaneioGrade
Dim lNumIntDoc As Long

On Error GoTo Erro_ItensNFGrade_Inclui

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 86340
    
    For Each objItemRomaneio In objItemNF.colItensRomaneioGrade
        
        'descobre o proximo NumIntDoc de ItemPVGrade disponivel
        lErro = CF("Config_ObterNumInt", "CRFATConfig", "NUM_PROX_INT_ITEMNFGRADE", lNumIntDoc)
        If lErro <> SUCESSO Then gError 86341
        
        objItemRomaneio.lNumIntDoc = lNumIntDoc
        
        lErro = Comando_Executar(lComando, "INSERT INTO ItensNFiscalGrade (NumIntDoc,NumIntItemNF,Produto,Quantidade, NumIntItemPVGrade,Almoxarifado) VALUES (?,?,?,?,?,?)", lNumIntDoc, objItemNF.lNumIntDoc, objItemRomaneio.sProduto, objItemRomaneio.dQuantidade, objItemRomaneio.lNumIntItemPV, objItemRomaneio.iAlmoxarifado)
        If lErro <> AD_SQL_SUCESSO Then gError 86342
        
    Next
    
    Call Comando_Fechar(lComando)

    ItensNFGrade_Inclui = SUCESSO
    
    Exit Function

Erro_ItensNFGrade_Inclui:

    ItensNFGrade_Inclui = gErr
    
    Select Case gErr
    
        Case 86340
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 86341
        
        Case 86342
            Call Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_ITEMNFGRADE", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149975)

            
    End Select
    
    Call Comando_Fechar(lComando)

    Exit Function
        
End Function

Function ItensNFGrade_Exclui(lNumIntItem As Long) As Long

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim lNumIntDoc As Long
Dim iIndice As Integer
Dim sProduto As String

On Error GoTo Erro_ItensNFGrade_Exclui

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 86333
    Next
    
    sProduto = String(STRING_PRODUTO, 0)

    lErro = Comando_ExecutarPos(alComando(0), "SELECT Produto, NumIntDoc FROM ItensNFiscalGrade WHERE NumIntItemNF = ? ", 0, sProduto, lNumIntDoc, lNumIntItem)
    If lErro <> AD_SQL_SUCESSO Then gError 86334
    
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 86335
    
    Do While lErro <> AD_SQL_SEM_DADOS
        
        lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM ItensNFiscalGrade", alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 86336
        
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 86337
    
    Loop
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    ItensNFGrade_Exclui = SUCESSO
    
    Exit Function
    
Erro_ItensNFGrade_Exclui:

    ItensNFGrade_Exclui = gErr
    
    Select Case gErr
    
        Case 86333
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 86334, 86335, 86337
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSNFGRADE", gErr, sProduto)
        
        Case 86336
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_ITENSNFGRADE", gErr)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149976)
    
    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function
    
End Function

'Inserido por Luiz Nogueira em 27/10/03
Public Function ClienteContatos_Grava(ByVal colClienteContatos As Collection) As Long
'Abre transação e chama a função para gravação de contatos
'colClienteContatos recebe os contatos que serão gravados

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_ClienteContatos_Grava

    'Abre transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 102580
    
    'Efetua
    'Chama a função para efetuar a gravação do relacionamento
    lErro = ClienteContatos_Grava_EmTrans(colClienteContatos)
    If lErro <> SUCESSO Then gError 102581
    
    'Fecha a transação
    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then gError 102582

    ClienteContatos_Grava = SUCESSO

    Exit Function

Erro_ClienteContatos_Grava:

    ClienteContatos_Grava = gErr

    Select Case gErr

        Case 102580
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 102581
        
        Case 102582
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149977)

    End Select

    'Faz o rollback da transação
    Call Transacao_Rollback

End Function

'Inserido por Luiz Nogueira em 27/10/03
Public Function ClienteContatos_Grava_EmTrans(ByVal colClienteContatos As Collection) As Long
'Faz o lock dos objetos relacionados, exclui os contatos gravados atualmente,
'insere os novos contatos e verifica se não ficou nenhum contato inconsistente no BD
'colClienteContatos recebe os contatos a serem gravados

Dim lErro As Long
Dim lComando As Long
Dim iIndice As Integer
Dim objClienteContatos As New ClassClienteContatos
Dim objClienteContatosAux As New ClassClienteContatos

On Error GoTo Erro_ClienteContatos_Grava_EmTrans

    'Executa a abertura dos Comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 102581
    
    'Verifica se Cliente e Filial estão cadastrados e faz o lock deles
    lErro = CF("FilialCliente_Lock", colClienteContatos(1).lCliente, colClienteContatos(1).iFilialCliente)
    If lErro <> SUCESSO And lErro <> 43050 Then gError 102582
    
    'Não encontrou a Filial Cliente --> erro
    If lErro = 43050 Then gError 102583
    
    'Guarda código do cliente e da filial que terão os contatos excluídos
    'A exclusão é feita para limpar o BD e posteriormente ser feita a gravação dos
    'novos contatos
    objClienteContatos.lCliente = colClienteContatos(1).lCliente
    objClienteContatos.iFilialCliente = colClienteContatos(1).iFilialCliente
    
    'Exclui os contatos existentes para o Cliente/Filial
    lErro = ClienteContatos_Exclui_EmTrans(objClienteContatos)
    If lErro <> SUCESSO Then gError 102584
    
    'Para cada contato a ser gravado
    For Each objClienteContatosAux In colClienteContatos
    
        'Insere o contato na tabela
        lErro = Comando_Executar(lComando, "INSERT INTO ClienteContatos (Cliente, FilialCliente, Codigo, Contato, Setor, Cargo, Telefone, Fax, Email, Padrao, DataNasc, OutrosMeioComunic) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)", objClienteContatosAux.lCliente, objClienteContatosAux.iFilialCliente, objClienteContatosAux.iCodigo, objClienteContatosAux.sContato, objClienteContatosAux.sSetor, objClienteContatosAux.sCargo, objClienteContatosAux.sTelefone, objClienteContatosAux.sFax, objClienteContatosAux.sEmail, objClienteContatosAux.iPadrao, objClienteContatosAux.dtDataNasc, objClienteContatosAux.sOutrosMeioComunic)
        If lErro <> AD_SQL_SUCESSO Then gError 102585
    
    Next
    
    'Verifica se não foi eliminado algum contato que esteja sendo usada em alguma outra tabela relacionada
    lErro = CF("ClienteContatos_Valida_Exclusao", objClienteContatos)
    If lErro <> SUCESSO Then gError 102586

    'Executa o fechamento dos Comandos
    Call Comando_Fechar(lComando)

    ClienteContatos_Grava_EmTrans = SUCESSO

    Exit Function

Erro_ClienteContatos_Grava_EmTrans:

    ClienteContatos_Grava_EmTrans = gErr

    Select Case gErr

        Case 102581
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 102582, 102584

        Case 102583
            Call Rotina_Erro(vbOKOnly, "ERRO_FILIALCLIENTE_NAO_CADASTRADA", gErr, objClienteContatos.iFilialCliente, objClienteContatos.lCliente)
        
        Case 102585
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CLIENTECONTATOS", gErr)
        
        Case 102586
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149978)

    End Select

    'Executa o fechamento dos Comandos
    Call Comando_Fechar(lComando)

End Function

'Inserido por Luiz Nogueira em 27/10/03
Public Function ClienteContatos_Exclui(ByVal objClienteContatos As ClassClienteContatos) As Long
'Abre transação e chama a função para exclusão de contatos de um cliente
'objClienteContatos recebe o código do cliente e da filial que terão seus contatos excluídos

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_ClienteContatos_Exclui

    'Abre transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 102587
    
    'Chama a função para efetuar a exclusão do relacionamento
    lErro = ClienteContatos_Exclui_EmTrans(objClienteContatos)
    If lErro <> SUCESSO Then gError 102588
    
    'Verifica se não foi eliminado algum contato que esteja sendo usada em alguma outra tabela relacionada
    lErro = CF("ClienteContatos_Valida_Exclusao", objClienteContatos)
    If lErro <> SUCESSO Then gError 102586
    
    'Fecha a transação
    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then gError 102589

    ClienteContatos_Exclui = SUCESSO

    Exit Function

Erro_ClienteContatos_Exclui:

    ClienteContatos_Exclui = gErr

    Select Case gErr

        Case 102587
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 102588, 102586
        
        Case 102589
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149979)

    End Select
    
    'Faz o rollback da transação
    Call Transacao_Rollback

End Function

'Inserido por Luiz Nogueira em 27/10/03
Public Function ClienteContatos_Exclui_EmTrans(ByVal objClienteContatos As ClassClienteContatos) As Long
'Exclui os contatos do cliente/filial passados como parâmetros
'objClienteContatos recebe o código do cliente e da filial que terão seus contatos excluídos

Dim lErro As Long
Dim alComando(1) As Long
Dim iIndice As Integer
Dim lCodigo As Long

On Error GoTo Erro_ClienteContatos_Exclui_EmTrans

    'Executa a abertura dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 102590
    Next
    
    'Lê os contatos que serão excluídos
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Codigo FROM ClienteContatos WHERE Cliente=? AND FilialCliente=?", 0, lCodigo, objClienteContatos.lCliente, objClienteContatos.iFilialCliente)
    If lErro <> AD_SQL_SUCESSO Then gError 102591
    
    'Posiciona no primeiro contato encontrado
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 102592
    
    'Enquando houverem contatos para exclusão
    Do While lErro = AD_SQL_SUCESSO
    
        lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM ClienteContatos", alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 102594
        
        'Posiciona no próximo contato encontrado
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 102593
    
    Loop

    'Executa o fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    ClienteContatos_Exclui_EmTrans = SUCESSO

    Exit Function

Erro_ClienteContatos_Exclui_EmTrans:

    ClienteContatos_Exclui_EmTrans = gErr

    Select Case gErr

        Case 102590
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 102591 To 102593
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CLIENTECONTATOS", gErr)
        
        Case 102594
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CLIENTECONTATOS", gErr)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149980)

    End Select

    'Executa o fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

End Function

'Incluída por Luiz Nogueira em 27/10/03
Public Function ClienteContatos_Exclui_Cliente_EmTrans(ByVal lCliente As Long, Optional ByVal iFilialCliente As Integer) As Long
'Exclui todos os contatos para o cliente passado como parâmetro
'ou apenas os contatos para a filial do cliente passada como parâmetro
'lCliente recebe o código do cliente que deve ter seus contatos excluídos
'iFilialCliente indica se deve excluir os contatos de todas as filiais ou de uma filial específica
'Se for passado um valor em iFilialCliente, ou seja, iFilialCliente<>0, significa que devem ser
'excluídos apenas os contatos da filial passada

Dim lErro As Long
Dim alComando(1) As Long
Dim iIndice As Integer
Dim lCodContato As Long

On Error GoTo Erro_ClienteContatos_Exclui_Cliente_EmTrans

    'Executa a abertura dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 102698
    Next
    
    'Se foi passada uma filial específica do cliente
    If iFilialCliente <> 0 Then
    
        'Lê os contatos para a filial do cliente passada como parâmetro
        lErro = Comando_ExecutarPos(alComando(0), "SELECT Codigo FROM ClienteContatos WHERE Cliente=? AND FilialCliente=?", 0, lCodContato, lCliente, iFilialCliente)
        If lErro <> AD_SQL_SUCESSO Then gError 102716
    
    'Senão
    Else
    
        'Lê os contatos de todas as filiais do cliente passado como parâmetro
        lErro = Comando_ExecutarPos(alComando(0), "SELECT Codigo FROM ClienteContatos WHERE Cliente=?", 0, lCodContato, lCliente)
        If lErro <> AD_SQL_SUCESSO Then gError 102699
    
    End If
    
    'Posiciona no primeiro contato encontrado
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 102700
    
    'Enquanto houver contatos para excluir
    Do While lErro = AD_SQL_SUCESSO
    
        'Exclui o contato
        lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM ClienteContatos", alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 102702
    
        'Busca o próximo contato
        lErro = Comando_BuscarPrimeiro(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 102701
    
    Loop

    'Executa o fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    ClienteContatos_Exclui_Cliente_EmTrans = SUCESSO

    Exit Function

Erro_ClienteContatos_Exclui_Cliente_EmTrans:

    ClienteContatos_Exclui_Cliente_EmTrans = gErr

    Select Case gErr

        Case 102698
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 102699 To 102701, 102716
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CLIENTECONTATOS", gErr)
        
        Case 102702
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CLIENTECONTATOS", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149981)

    End Select

    'Executa o fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

End Function


Private Function Processa_Item_PV_ComGrade(alComando() As Long, ByVal objItemPV As ClassItemPedido, ByVal objItemNF As ClassItemNF, ByVal objMovEstoque As ClassMovEstoque, ByVal objPedidoVenda As ClassPedidoDeVenda, ByVal objGeracaoNFiscal As ClassGeracaoNFiscal, dQtdeEmFaltaNoEstoque As Double) As Long
'processa um item do pedido de venda, gerando movimentos de estoque relativos às reservas e excluindo as reservas

Dim lErro As Long
Dim dFator As Double
Dim objProduto As New ClassProduto
Dim objAlmoxarifado As ClassAlmoxarifado
Dim objReservaItem As ClassReservaItem
Dim bReservaUtilizada As Boolean
Dim iIndice As Integer
Dim objItemRomaneio As ClassItemRomaneioGrade
Dim objItemPVAux As New ClassItemPedido
Dim iIndice2 As Integer

On Error GoTo Erro_Processa_Item_PV_ComGrade

    objProduto.sCodigo = objItemPV.sProduto
    
    'ler dados do produto
    lErro = CF("Produto_Le", objProduto)
    If lErro <> SUCESSO And lErro <> 28030 Then Error 44201
    
    'se o produto não estiver cadastrado
    If lErro = 28030 Then Error 44202

    'converter qtde a faturar p/UMEstoque do produto
    lErro = CF("UM_Conversao_Trans", objProduto.iClasseUM, objItemPV.sUnidadeMed, objProduto.sSiglaUMEstoque, dFator)
    If lErro <> SUCESSO Then Error 44203

    objItemPV.dQuantAFaturar = objItemPV.dQuantAFaturar * dFator
    
    objItemPV.sUMEstoque = objProduto.sSiglaUMEstoque
    
    
    For Each objItemRomaneio In objItemPV.colItensRomaneioGrade
    
        objItemRomaneio.dQuantAFaturar = objItemRomaneio.dQuantidade - objItemRomaneio.dQuantCancelada - objItemRomaneio.dQuantFaturada
        
        objProduto.sCodigo = objItemRomaneio.sProduto
                
        'ler dados do produto
        lErro = CF("Produto_Le", objProduto)
        If lErro <> SUCESSO And lErro <> 28030 Then Error 44201
        
        'se o produto não estiver cadastrado
        If lErro = 28030 Then Error 44202
    
        'converter qtde a faturar p/UMEstoque do produto
        lErro = CF("UM_Conversao_Trans", objProduto.iClasseUM, objItemPV.sUnidadeMed, objProduto.sSiglaUMEstoque, dFator)
        If lErro <> SUCESSO Then Error 44203
    
        objItemRomaneio.dQuantAFaturar = objItemRomaneio.dQuantAFaturar * dFator
        
        objItemRomaneio.sUMEstoque = objProduto.sSiglaUMEstoque
            
        'se item for estoque+reserva ou estoque
        If objProduto.iControleEstoque <> PRODUTO_CONTROLE_SEM_ESTOQUE Then
    
           'criar as movimentacoes de estoque de reserva
            lErro = GeracaoNFiscal_CriarMovtosEstoque_Grade(alComando(), objGeracaoNFiscal, objPedidoVenda, objItemPV, objMovEstoque, dQtdeEmFaltaNoEstoque, objItemNF, objItemRomaneio)
            If lErro <> SUCESSO Then Error 44240
    
            'se há ainda material a faturar ==> faturamento parcial
            If dQtdeEmFaltaNoEstoque <> 0 Then
    
                'desfaz a nota fiscal pois não haverá faturamento parcial automático
                Error 44325
                '*******************************************************************
                'codigo para futura implantacao do faturamento parcial
                '*******************************************************************
                'lErro = Processa_Faturamento_Parcial()
                'If lErro <> SUCESSO Then
    
            Else
                
                'se não há mais quantidade a faturar
                                        
                        
                'retorna a unidade de venda
                objItemPV.dQuantAFaturar = (objItemPV.dQuantAFaturar / dFator)
                
                'excluir as reservas associadas ao item de estoque nos almoxarifados das outras filiais que não seja a de faturamento, que podem ter sobrado
                For Each objReservaItem In objItemRomaneio.colLocalizacao
                
                    bReservaUtilizada = False
                    For iIndice2 = 1 To objItemNF.colItensRomaneioGrade.Count
                        
                        For iIndice = 1 To objItemNF.colItensRomaneioGrade(iIndice2).colLocalizacao.Count
                            If objItemNF.colItensRomaneioGrade(iIndice2).colLocalizacao(iIndice).iAlmoxarifado = objReservaItem.iAlmoxarifado Then bReservaUtilizada = True
                        Next
                    Next
                    'verifica se almox pertence a filial do faturamento
                    lErro = Almoxarifado_NaColecao(objGeracaoNFiscal.colAlmoxFilial, objReservaItem.iAlmoxarifado)
                    If lErro <> SUCESSO And lErro <> 44234 Then Error 44241
    
                    'se o almoxarifado não pertence à filial do faturamento
                    'ou se a utilização da rserva não foi feita
                    If lErro = 44234 Or (Not bReservaUtilizada) Then
                        Set objAlmoxarifado = New ClassAlmoxarifado
                        objAlmoxarifado.iCodigo = objReservaItem.iAlmoxarifado
    
                        '** TRASFERE OS DADOS PARA UM OBJ AUXILIAR PARA APROVEITAR FUNÇÃO ********
                        objItemPVAux.lNumIntDoc = objItemRomaneio.lNumIntDoc
                        objItemPVAux.sProduto = objItemRomaneio.sProduto
                        objItemPVAux.lCodPedido = objItemPV.lCodPedido
                        objItemPVAux.iFilialEmpresa = objItemPV.iFilialEmpresa
                        objItemPVAux.sProdutoDescricao = objItemRomaneio.sDescricao
                        objItemPVAux.sUMEstoque = objItemRomaneio.sUMEstoque
                        
                        'cancelar a reserva deste almoxarifado que nao vai ser mais necessária
                        lErro = CF("Reserva_Cancelar", alComando(5), alComando(6), objMovEstoque, objItemPVAux, objAlmoxarifado)
                        If lErro <> SUCESSO Then Error 44242
                        
                    End If
    
                Next
    
            End If 'se há falta de estoque
    
        End If 'se for item inventariado
    Next
    Processa_Item_PV_ComGrade = SUCESSO

    Exit Function

Erro_Processa_Item_PV_ComGrade:

    Processa_Item_PV_ComGrade = Err

    Select Case Err

        Case 44201, 44203, 44240, 44241, 44242

        Case 44202
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_INEXISTENTE", Err, objProduto.sCodigo)

        Case 44325
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PEDIDO_FATURAMENTO_PARCIAL", Err, objPedidoVenda.lCodigo)


        Case Else
             lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149982)

     End Select

     Exit Function

End Function

Private Function GeracaoNFiscal_CriarMovtosEstoque_Grade(alComando() As Long, ByVal objGeracaoNFiscal As ClassGeracaoNFiscal, ByVal objPedidoVenda As ClassPedidoDeVenda, ByVal objItemPV As ClassItemPedido, ByVal objMovEstoque As ClassMovEstoque, dQtdeEmFaltaNoEstoque As Double, ByVal objItemNF As ClassItemNF, objItemRomaneio As ClassItemRomaneioGrade) As Long
'cria os movimentos de estoque correspondentes a um item de pedido de venda
'Somente as reservas feitas em almoxarifados da filial que vai faturar poderao ser utilizadas
'   para estas reservas, se usadas, deverao ser criados movtos que retiram diretamente da qtde reservada
'primeiro tenta retirar do almoxarifado padrao, se nao der, dos outros com reserva e depois nos outros almoxarifados da filial
'vai mantendo numa colecao os almoxarifados percorridos

Dim lErro As Long
Dim colAlmoxPercorridos As New Collection
Dim iAlmoxarifadoPadrao As Integer
Dim objAlmoxarifado As New ClassAlmoxarifado
Dim objReservaItem As ClassReservaItem
Dim objProdutoFilial As New ClassProdutoFilial
Dim iIndice1 As Integer
Dim iIndice2 As Integer

On Error GoTo Erro_GeracaoNFiscal_CriarMovtosEstoque_Grade

    dQtdeEmFaltaNoEstoque = objItemRomaneio.dQuantAFaturar

    objProdutoFilial.iFilialEmpresa = objPedidoVenda.iFilialEmpresaFaturamento
    objProdutoFilial.sProduto = objItemRomaneio.sProduto
    
    'obter o almox padrao p/(produto, FilialEmpresaFaturamento)
    lErro = CF("ProdutoFilial_Le2", alComando(2), objProdutoFilial)
    If lErro <> SUCESSO And lErro <> 44208 Then Error 44209
    
    'Se não encontrou o almoxarifado padrão do produto/filialempresaFaturamento
    If lErro = 44208 Or objProdutoFilial.iAlmoxarifado = 0 Then
    
        'pega o almoxarifado padrao da filial
        iAlmoxarifadoPadrao = objGeracaoNFiscal.iAlmoxarifadoPadrao
        
    Else
    
        'se encontrou o almoxarifado padrao
        iAlmoxarifadoPadrao = objProdutoFilial.iAlmoxarifado
        
    End If
    
    'se há um almoxarifado padrão ==> retira material do almoxarifado padrao
    If iAlmoxarifadoPadrao <> 0 Then

        objAlmoxarifado.iCodigo = iAlmoxarifadoPadrao
        
        'cria movtos de estoque retirando material do almoxarifado padrao
        lErro = GeracaoNFiscal_PercorreAlmox_Grade(alComando(), objAlmoxarifado, objItemPV, objMovEstoque, colAlmoxPercorridos, dQtdeEmFaltaNoEstoque, objItemNF, objItemRomaneio)
        If lErro <> SUCESSO Then Error 44233

    End If

    'percorrer os almoxarifados das outras reservas
    If dQtdeEmFaltaNoEstoque > 0 Then
        For Each objReservaItem In objItemRomaneio.colLocalizacao
    
            If iAlmoxarifadoPadrao <> objReservaItem.iAlmoxarifado Then
    
                'verifica se almox pertence a filial faturamento
                lErro = Almoxarifado_NaColecao(objGeracaoNFiscal.colAlmoxFilial, objReservaItem.iAlmoxarifado)
                If lErro <> SUCESSO And lErro <> 44234 Then Error 44235
    
                'se o almoxarifado pertence à filial de faturamento
                If lErro = SUCESSO Then
                    Set objAlmoxarifado = New ClassAlmoxarifado
                    
                    objAlmoxarifado.iCodigo = objReservaItem.iAlmoxarifado
                    
                    'cria movtos de estoque retirando material deste almoxarifado
                    lErro = GeracaoNFiscal_PercorreAlmox_Grade(alComando(), objAlmoxarifado, objItemPV, objMovEstoque, colAlmoxPercorridos, dQtdeEmFaltaNoEstoque, objItemNF, objItemRomaneio)
                    If lErro <> SUCESSO Then Error 44236
    
                End If
    
            End If
    
        Next
    End If

    If dQtdeEmFaltaNoEstoque > 0 Then
        'percorrer os almoxarifados da filial
        For Each objAlmoxarifado In objGeracaoNFiscal.colAlmoxFilial
    
            'verifica se almoxarifado já foi verificado acima
            lErro = Almoxarifado_NaColecao(colAlmoxPercorridos, objAlmoxarifado.iCodigo)
            If lErro <> SUCESSO And lErro <> 44234 Then Error 44239
            
            'se o almoxarifado ainda não foi verificado
            If lErro = 44234 Then
    
                'cria movtos de estoque retirando material deste almoxarifado
                lErro = GeracaoNFiscal_PercorreAlmox_Grade(alComando(), objAlmoxarifado, objItemPV, objMovEstoque, colAlmoxPercorridos, dQtdeEmFaltaNoEstoque, objItemNF, objItemRomaneio)
                If lErro <> SUCESSO Then Error 44238
    
            End If
    
        Next
    End If
    
    GeracaoNFiscal_CriarMovtosEstoque_Grade = SUCESSO

    Exit Function

Erro_GeracaoNFiscal_CriarMovtosEstoque_Grade:

    GeracaoNFiscal_CriarMovtosEstoque_Grade = Err

    Select Case Err

        Case 44209, 44233, 44235, 44236, 44238, 44239

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149983)

    End Select

    Exit Function

End Function


Private Function GeracaoNFiscal_PercorreAlmox_Grade(alComando() As Long, ByVal objAlmoxarifado As ClassAlmoxarifado, ByVal objItemPV As ClassItemPedido, ByVal objMovEstoque As ClassMovEstoque, ByVal colAlmoxPercorridos As Collection, dQtdeEmFaltaNoEstoque As Double, ByVal objItemNF As ClassItemNF, objItemRomaneio As ClassItemRomaneioGrade) As Long
'cria os movtos de estoque retirando material da qtde reservada, disp nossa e consig3 para atender a qtde demandada

Dim lErro As Long
Dim objEstoqueProduto As New ClassEstoqueProduto
Dim dQtde As Double
Dim dQuantReserva As Double
Dim dQuantAloc As Double
Dim objItemNFAloc As ClassItemNFAlocacao
Dim objReservaItem As ClassReservaItem
Dim objItemPVAux As New ClassItemPedido
Dim objItemRomaneioAux As ClassItemRomaneioGrade

On Error GoTo Erro_GeracaoNFiscal_PercorreAlmox_Grade

    For Each objReservaItem In objItemRomaneio.colLocalizacao
        
        If objReservaItem.iAlmoxarifado = objAlmoxarifado.iCodigo Then dQuantReserva = dQuantReserva + objReservaItem.dQuantidade
    
    Next

    'se houve reserva para o almoxarifado em questão
    If dQuantReserva <> 0 Then

        'se há quantidade a faturar
        If dQtdeEmFaltaNoEstoque <> 0 Then

            'se a quantidade a faturar for menor que a quantidade reservada
            If dQtdeEmFaltaNoEstoque <= dQuantReserva Then
                
                'esta será a quantidade da reserva a ser utilizada
                dQtde = dQtdeEmFaltaNoEstoque
            Else
                'se a quantidade faturada for maior que a quantidade reservada, toda a reserva será utilizada
                dQtde = dQuantReserva
            End If

            '** TRASFERE OS DADOS PARA UM OBJ AUXILIAR PARA APROVEITAR FUNÇÃO ********
            objItemPVAux.lNumIntDoc = objItemRomaneio.lNumIntDoc
            objItemPVAux.sProduto = objItemRomaneio.sProduto
            objItemPVAux.lCodPedido = objItemPV.lCodPedido
            objItemPVAux.iFilialEmpresa = objItemPV.iFilialEmpresa
            objItemPVAux.sProdutoDescricao = objItemRomaneio.sDescricao
            objItemPVAux.sUMEstoque = objItemRomaneio.sUMEstoque

            'Utiliza a reserva, ou seja, serão gerados movimentos de utilização e possivelmente cancelamento do que não foi utilizado. Além disso a reserva é excluida
            lErro = CF("Reserva_Utilizar", alComando(3), alComando(4), objMovEstoque, objItemPVAux, objAlmoxarifado, dQtde)
            If lErro <> SUCESSO Then Error 44220
            '**************************

            'ainda falta esta parte para faturar
            dQtdeEmFaltaNoEstoque = dQtdeEmFaltaNoEstoque - dQtde
            dQuantAloc = dQtde
    
        Else

            
            '** TRASFERE OS DADOS PARA UM OBJ AUXILIAR PARA APROVEITAR FUNÇÃO ********
            objItemPVAux.lNumIntDoc = objItemRomaneio.lNumIntDoc
            objItemPVAux.sProduto = objItemRomaneio.sProduto
            objItemPVAux.lCodPedido = objItemPV.lCodPedido
            objItemPVAux.iFilialEmpresa = objItemPV.iFilialEmpresa
            objItemPVAux.sProdutoDescricao = objItemRomaneio.sDescricao
            objItemPVAux.sUMEstoque = objItemRomaneio.sUMEstoque
            
            'se não há quantidade a faturar
            'cancelar a reserva deste almoxarifado que nao vai ser mais necessária
            lErro = CF("Reserva_Cancelar", alComando(5), alComando(6), objMovEstoque, objItemPVAux, objAlmoxarifado)
            If lErro <> SUCESSO Then Error 44226

        End If

    End If

    'se ainda há quantidade a faturar
    If dQtdeEmFaltaNoEstoque <> 0 Then

        objEstoqueProduto.sProduto = objItemRomaneio.sProduto
        objEstoqueProduto.iAlmoxarifado = objAlmoxarifado.iCodigo
        
        'ler a tabela estoqueproduto e fazer lock exclusivo
        lErro = CF("EstoqueProduto_Le_Exclusivo", alComando(7), objEstoqueProduto)
        If lErro <> SUCESSO And lErro <> 44229 Then Error 44231

        If lErro = SUCESSO Then

            'retirar quanto possivel deste almoxarifado
            If objEstoqueProduto.dQuantDisponivel > 0 Then
    
                'se a quantidade que ainda tem a faturar for menor que a quantidade disponivel no almoxarifado
                If dQtdeEmFaltaNoEstoque <= objEstoqueProduto.dQuantDisponivel Then
                
                    'faturar tudo
                    dQtde = dQtdeEmFaltaNoEstoque
                    
                Else
                    
                    'senão, faturar só o que está disponível
                    dQtde = objEstoqueProduto.dQuantDisponivel
                    
                End If
    
                'esta é a quantidade que ainda falta faturar
                dQtdeEmFaltaNoEstoque = dQtdeEmFaltaNoEstoque - dQtde
                
                dQuantAloc = dQuantAloc + dQtde
            End If

        End If
    
    End If

    If dQuantAloc > 0 Then
                
        Set objReservaItem = New ClassReservaItem
        
        objReservaItem.iAlmoxarifado = objAlmoxarifado.iCodigo
        objReservaItem.sAlmoxarifado = objAlmoxarifado.sNomeReduzido
        objReservaItem.dQuantidade = dQuantAloc
        
        For Each objItemRomaneioAux In objItemNF.colItensRomaneioGrade
            If objItemRomaneio.sProduto = objItemRomaneioAux.sProduto Then
                objItemRomaneioAux.colLocalizacao.Add objReservaItem
                Exit For
            End If
        Next
        
    End If
        
        
    'inclui-lo em colAlmoxPercorridos
    colAlmoxPercorridos.Add objAlmoxarifado

    GeracaoNFiscal_PercorreAlmox_Grade = SUCESSO

    Exit Function

Erro_GeracaoNFiscal_PercorreAlmox_Grade:

    GeracaoNFiscal_PercorreAlmox_Grade = Err

    Select Case Err

        Case 44220, 44221, 44226, 44231

        Case 44232
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ESTOQUEPRODUTO_NAO_CADASTRADO", Err, objEstoqueProduto.sProduto, objEstoqueProduto.iAlmoxarifado)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 149984)

    End Select

    Exit Function

End Function

Function Move_ItensGrade_Tela(colItensRomaneio As Collection, colItensRomaneioTela As Collection, Optional bTrazPedido As Boolean = False) As Long

Dim objItemRomaneioGrade As ClassItemRomaneioGrade
Dim objItemRomaneioGradeTela As ClassItemRomaneioGrade
Dim objReservaItem As ClassReservaItem
Dim objReservaItemTela As ClassReservaItem
Dim objAlmoxarifado As New ClassAlmoxarifado
Dim lErro As Long

On Error GoTo Erro_Move_ItensGrade_Tela

    'Para cada Item de Romaneio vindo da tela ( Aqueles que já tem quantidade)
    For Each objItemRomaneioGradeTela In colItensRomaneioTela
                    
        Set objItemRomaneioGrade = New ClassItemRomaneioGrade
            
        objItemRomaneioGrade.sProduto = objItemRomaneioGradeTela.sProduto
        objItemRomaneioGrade.dQuantOP = objItemRomaneioGradeTela.dQuantOP
        objItemRomaneioGrade.dQuantSC = objItemRomaneioGradeTela.dQuantSC
        objItemRomaneioGrade.dQuantPV = objItemRomaneioGradeTela.dQuantidade - objItemRomaneioGradeTela.dQuantCancelada - objItemRomaneioGradeTela.dQuantFaturada
        objItemRomaneioGrade.sDescricao = objItemRomaneioGradeTela.sDescricao
        objItemRomaneioGrade.sUMEstoque = objItemRomaneioGradeTela.sUMEstoque
        objItemRomaneioGrade.dQuantidade = objItemRomaneioGradeTela.dQuantidade - objItemRomaneioGradeTela.dQuantCancelada - objItemRomaneioGradeTela.dQuantFaturada
        objItemRomaneioGrade.dQuantAFaturar = objItemRomaneioGradeTela.dQuantAFaturar
        objItemRomaneioGrade.dQuantReservada = objItemRomaneioGradeTela.dQuantReservada
        If bTrazPedido Then
            objItemRomaneioGrade.lNumIntItemPV = objItemRomaneioGradeTela.lNumIntDoc
        Else
            objItemRomaneioGrade.lNumIntDoc = objItemRomaneioGradeTela.lNumIntDoc
            objItemRomaneioGrade.lNumIntItemPV = objItemRomaneioGradeTela.lNumIntItemPV
        End If
                            
                            
        colItensRomaneio.Add objItemRomaneioGrade
    
        'Transfere as informações de Localização
        Set objItemRomaneioGrade.colLocalizacao = New Collection
            
'        For Each objReservaItemTela In objItemRomaneioGradeTela.colLocalizacao
'
'            objAlmoxarifado.iCodigo = objReservaItemTela.iAlmoxarifado
'
'            lErro = CF("Almoxarifado_Le", objAlmoxarifado)
'            If lErro <> 25056 And lErro <> SUCESSO Then gError 94331
'            If lErro = 25056 Then gError 94332
'
'
'            If objAlmoxarifado.iFilialEmpresa = giFilialEmpresa Then
'
'                Set objReservaItem = New ClassReservaItem
'
'                objReservaItem.dQuantidade = objReservaItemTela.dQuantidade
'                objReservaItem.dtDataValidade = objReservaItemTela.dtDataValidade
'                objReservaItem.iAlmoxarifado = objReservaItemTela.iAlmoxarifado
'                objReservaItem.iFilialEmpresa = objReservaItemTela.iFilialEmpresa
'                objReservaItem.lNumIntDoc = objReservaItemTela.lNumIntDoc
'                objReservaItem.sAlmoxarifado = objReservaItemTela.sAlmoxarifado
'                objReservaItem.sResponsavel = objReservaItemTela.sResponsavel
'
'                objItemRomaneioGrade.colLocalizacao.Add objReservaItem
'            End If
'        Next
    
    Next
    
    Move_ItensGrade_Tela = SUCESSO
    
    Exit Function
    
Erro_Move_ItensGrade_Tela:

    Move_ItensGrade_Tela = gErr

    Select Case gErr
            
        Case 94331

        Case 94332
            Call Rotina_Erro(vbOKOnly, "ERRO_ALMOXARIFADO_INEXISTENTE", gErr, objReservaItemTela.iAlmoxarifado)
                
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 149985)

    End Select
    
    Exit Function

End Function

'####################################################
'INSERIDO POR WAGNER - IMPAL 12/11/04
Public Function CustoDirFabrProdInf_Grava(ByVal objCustoDirFabr As ClassCustoDirFabr) As Long
'grava ou altera a tabela CustoDirFabrProdInf

Dim lErro As Long
Dim alComando(0 To 2) As Long
Dim lTransacao As Long
Dim iIndice As Integer
Dim iAux As Integer

On Error GoTo Erro_CustoDirFabrProdInf_Grava

    'abre a transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 131257
    
    'abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 131258
    Next
    
    'Verifico se existe o registro em CustoDirFabrProdInf
    lErro = Comando_ExecutarPos(alComando(0), "SELECT FilialEmpresa  FROM CustoDirFabrProdInf WHERE Ano = ? AND FilialEmpresa = ? AND Produto = ?", 0, iAux, objCustoDirFabr.iAno, objCustoDirFabr.iFilialEmpresa, objCustoDirFabr.sProduto)
    If lErro <> AD_SQL_SUCESSO Then gError 131259

    'busca o 1º registro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 131260

    'Se existir => UPDATE, senão => INSERT
    If lErro = AD_SQL_SUCESSO Then
        
        'faz um update apenas no Custo Aplicado
        lErro = Comando_ExecutarPos(alComando(1), "UPDATE CustoDirFabrProdInf SET Custo = ?", alComando(0), objCustoDirFabr.dCustoTotal)
        If lErro <> AD_SQL_SUCESSO Then gError 131261
    
    Else

        'insere
        lErro = Comando_Executar(alComando(1), "INSERT INTO CustoDirFabrProdInf(FilialEmpresa, Ano, Produto, Custo) VALUES (?,?,?,?)", objCustoDirFabr.iFilialEmpresa, objCustoDirFabr.iAno, objCustoDirFabr.sProduto, objCustoDirFabr.dCustoTotal)
        If lErro <> AD_SQL_SUCESSO Then gError 131262
    
    End If
    
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    'confirma a transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 131263
    
    CustoDirFabrProdInf_Grava = SUCESSO

    Exit Function

Erro_CustoDirFabrProdInf_Grava:

    CustoDirFabrProdInf_Grava = gErr

    Select Case gErr
        
        Case 131257
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 131258
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
        
        Case 131259, 131260
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CUSTODIRFABRPRODINF", gErr)
            
        Case 131261
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_CUSTODIRFABRPRODINF", gErr)
        
        Case 131262
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CUSTODIRFABRPRODINF", gErr)
        
        Case 131263
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
                
    End Select

    Call Transacao_Rollback

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function CustoDirFabrProdInf_Exclui(ByVal objCustoDirFabr As ClassCustoDirFabr) As Long
'Exclui os registros da tabela CustoDirFabrProdInf

Dim alComando(1) As Long
Dim lTransacao As Long
Dim lErro As Long
Dim iIndice As Integer
Dim iFilialEmpresa As Integer

On Error GoTo Erro_CustoDirFabrProdInf_Exclui

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 131264

    'abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 131265
    Next

    'faz uma busca no Bd a partir da data, produto e filial
    lErro = Comando_ExecutarPos(alComando(0), "SELECT FilialEmpresa FROM CustoDirFabrProdInf WHERE Produto = ? AND FilialEmpresa = ? AND Ano = ?", 0, iFilialEmpresa, objCustoDirFabr.sProduto, objCustoDirFabr.iFilialEmpresa, objCustoDirFabr.iAno)
    If lErro <> AD_SQL_SUCESSO Then gError 131266

    'busca o primeiro registro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 131267

    'se nao achou, erro
    If lErro = AD_SQL_SEM_DADOS Then gError 131268

    'faz um lock exclusivo no registro encontrado
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> SUCESSO Then gError 131269

    'exclui os campos da tabela CustoDirFabrProdInf
    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM CustoDirFabrProdInf", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 131270

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    'confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 131271

    CustoDirFabrProdInf_Exclui = SUCESSO

    Exit Function

Erro_CustoDirFabrProdInf_Exclui:

    CustoDirFabrProdInf_Exclui = gErr

    Select Case gErr

        Case 131264
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 131265
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 131266, 131267
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CUSTODIRFABRPRODINF", gErr)

        Case 131268
            Call Rotina_Erro(vbOKOnly, "ERRO_CUSTODIRFABRPRODINF_NAO_EXISTENTE", gErr, objCustoDirFabr.sProduto, objCustoDirFabr.iAno)

        Case 131269
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_EXCLUSIVE", gErr)

        Case 131270
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CUSTODIRFABRPRODINF", gErr)

        Case 131271
            Call Rotina_Erro(vbOKOnly, "ERRO_TRANSACAO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149986)

    End Select

    Call Transacao_Rollback

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function
'####################################################

'#########################################################################
'INSERIDO POR WAGNER - RELATIVO A CONTRATOS (Cadastro/Medição/Faturamento)
'#########################################################################
Function Contrato_Grava(ByVal objContrato As ClassContrato) As Long
'Grava um Contrato

Dim lErro As Long
Dim alComando(1 To 2) As Long
Dim lTransacao As Long
Dim iIndice As Integer
Dim lNumIntDoc As Long
Dim lNumProx As Long
Dim iTipo As Integer

On Error GoTo Erro_Contrato_Grava

    'Abre Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 129337
    Next

    'Abre Transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 129338
    
    'Le Contrato
    lErro = Comando_ExecutarPos(alComando(1), "SELECT NumIntDoc, Tipo FROM Contratos WHERE Codigo = ? AND FilialEmpresa = ? ", 0, lNumIntDoc, iTipo, objContrato.sCodigo, objContrato.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 129339

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 129340

    'Se não encontrou insere, senão altera
    If lErro = AD_SQL_SEM_DADOS Then
        
        With objContrato
        
            'Busca próximo identificador
            lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_PROX_CONTRATO", lNumProx)
            If lErro <> SUCESSO Then gError 131066
            
            .lNumIntDoc = lNumProx
        
            'Insere contrato
            lErro = Comando_Executar(alComando(2), "INSERT INTO Contratos(NumIntDoc, FilialEmpresa, Codigo, Descricao, Ativo, Cliente, FilCli, Observacao, DataIniContrato, DataFimContrato, DataRenovContrato, ContaContabil, HistoricoContabil, DataIniCobrancaPadrao, PeriodicidadePadrao, CondPagtoPadrao, Ccl, NaturezaOP,TipoTributacao, Tipo, FilialFornecedor, Fornecedor, Recibo, Serie, NFe) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                                                                        .lNumIntDoc, .iFilialEmpresa, .sCodigo, .sDescricao, .iAtivo, .lCliente, .iFilCli, .sObservacao, .dtDataIniContrato, .dtDataFimContrato, .dtDataRenovContrato, .sContaContabil, .sHistoricoContabil, .dtDataIniCobrancaPadrao, .iPeriodicidadePadrao, .iCondPagtoPadrao, .sCcl, .sNaturezaOp, .iTipoTributacao, .iTipo, .iFilForn, .lFornecedor, .iRecibo, .sSerie, .iNFe)
            If lErro <> AD_SQL_SUCESSO Then gError 129341
    
        End With
        
    Else

        'Se é um contrato a Pagar sendo gravado como a receber ou vice versa => Erro
        If iTipo <> objContrato.iTipo Then
        
            If iTipo = CONTRATOS_PAGAR Then
                gError 132920
            Else
                gError 132921
            End If
        
        End If

        With objContrato
                
            .lNumIntDoc = lNumIntDoc

            'Altera Contrato
            lErro = Comando_ExecutarPos(alComando(2), "UPDATE Contratos SET FilialEmpresa = ?, Codigo = ?, Descricao= ?, Ativo= ?, Cliente= ?, FilCli= ?, Observacao= ?, DataIniContrato= ?, DataFimContrato= ?, DataRenovContrato= ?, ContaContabil= ?, HistoricoContabil= ?, DataIniCobrancaPadrao= ?, PeriodicidadePadrao= ?, CondPagtoPadrao= ?, Ccl=?, NaturezaOP = ?, TipoTributacao = ?, Fornecedor = ?, FilialFornecedor = ?, Tipo = ?, Recibo = ?, Serie = ?, NFe = ? ", alComando(1), _
                                                    .iFilialEmpresa, .sCodigo, .sDescricao, .iAtivo, .lCliente, .iFilCli, .sObservacao, .dtDataIniContrato, .dtDataFimContrato, .dtDataRenovContrato, .sContaContabil, .sHistoricoContabil, .dtDataIniCobrancaPadrao, .iPeriodicidadePadrao, .iCondPagtoPadrao, .sCcl, .sNaturezaOp, .iTipoTributacao, .lFornecedor, .iFilForn, .iTipo, .iRecibo, .sSerie, .iNFe)
            If lErro <> AD_SQL_SUCESSO Then gError 129342

        End With

    End If
    
    'Grava os itens do contrato
    lErro = ItensDeContrato_Grava(objContrato)
    If lErro <> SUCESSO Then gError 129343

    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 129344
 
    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Contrato_Grava = SUCESSO

    Exit Function

Erro_Contrato_Grava:

    Contrato_Grava = gErr

        Select Case gErr

        Case 129337
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 129338
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 129339, 129340
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONTRATO", gErr)

        Case 129341
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CONTRATO", gErr, objContrato.sCodigo)

        Case 129342
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_CONTRATO", gErr, objContrato.sCodigo)

        Case 129343, 131066

        Case 129344
             Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
             
        Case 132920
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPO_CONTRATO_MESMO_CODIGO_PAGAR", gErr, objContrato.sCodigo, objContrato.iFilialEmpresa)
        
        Case 132921
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPO_CONTRATO_MESMO_CODIGO_RECEBER", gErr, objContrato.sCodigo, objContrato.iFilialEmpresa)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149987)

    End Select

    'Desfaz as alterações
    Call Transacao_Rollback
    
    'Fecha comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Private Function ItensDeContrato_Insere(ByVal colItensDeContrato As Collection) As Long
'Insere Itens de Contrato passados na coleção colItensDeContrato

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim lTransacao As Long
Dim iIndice As Integer
Dim objItensDeContrato As ClassItensDeContrato
Dim lNumProx As Long

On Error GoTo Erro_ItensDeContrato_Insere

    'Abre comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 129345
    Next

    'Para cada item de contrato passado
    For Each objItensDeContrato In colItensDeContrato
           
        With objItensDeContrato
        
            'Obtem identificado (NumIntDoc)
            lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_PROX_ITENSDECONTRATO", lNumProx)
            If lErro <> SUCESSO Then gError 129367
            
            .lNumIntDoc = lNumProx
        
            'Insere item
            lErro = Comando_Executar(alComando(1), "INSERT INTO ItensDeContrato(NumIntDoc, NumIntContrato, Seq, Cobrar, Produto, DescProd, Quantidade, UM, Valor, Medicao, DataIniCobranca, Periodicidade, CondPagto, Observacao, DataProxCobranca, DataRefIni, DataRefFim, QtdeParcelas, UltParcCobrada) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                                                        .lNumIntDoc, .lNumIntContrato, .iSeq, .iCobrar, .sProduto, .sDescProd, .dQuantidade, .sUM, .dValor, .iMedicao, .dtDataIniCobranca, .iPeriodicidade, .iCondPagto, .sObservacao, .dtDataProxCobranca, .dtDataRefIni, .dtDataRefFim, .iQtdeParcelas, .iUltParcCobrada)
            If lErro <> AD_SQL_SUCESSO Then gError 129348
            
        End With
            
    Next
     
    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    ItensDeContrato_Insere = SUCESSO

    Exit Function

Erro_ItensDeContrato_Insere:

    ItensDeContrato_Insere = gErr

        Select Case gErr

        Case 129345
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 129348
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_ITENSDECONTRATO", gErr, objItensDeContrato.iSeq)

        Case 129367

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149988)

    End Select

    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Private Function ItensDeMedicaoContrato_Insere(ByVal colItensDeMedicao As Collection) As Long
'Insere os itens de medição passados na coleção colItensDeMedicao

Dim lErro As Long
Dim alComando(1 To 2) As Long
Dim lTransacao As Long
Dim iIndice As Integer
Dim objItensDeMedicao As ClassItensMedCtr
Dim lNumProx As Long

On Error GoTo Erro_ItensDeMedicaoContrato_Insere

    'Abre comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 129346
    Next

    'Para cada item de medição passado
    For Each objItensDeMedicao In colItensDeMedicao
           
        With objItensDeMedicao
               
            'Insere o item
            lErro = Comando_Executar(alComando(2), "INSERT INTO ItensDeMedicaoContrato(Custo,Quantidade, VlrCobrar, Status, Medicao, NumIntItensContrato, DataCobranca, DataRefIni, DataRefFim ) VALUES (?,?,?,?,?,?,?,?,?)", _
                                                      .dCusto, .dQuantidade, .dVlrCobrar, .iStatus, .lMedicao, .lNumIntItensContrato, .dtDataCobranca, .dtDataRefIni, .dtDataRefFim)
            If lErro <> AD_SQL_SUCESSO Then gError 129347
            
        End With
            
    Next
     
    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    ItensDeMedicaoContrato_Insere = SUCESSO

    Exit Function

Erro_ItensDeMedicaoContrato_Insere:

    ItensDeMedicaoContrato_Insere = gErr

        Select Case gErr

        Case 129346
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 129347
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_ITENSDEMEDICAOCONTRATO", gErr, objItensDeMedicao.objItensDeContrato.iSeq)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149989)

    End Select

    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Function ItensDeContrato_Grava(ByVal objContrato As ClassContrato) As Long
'Grava os itens de contrato

Dim lErro As Long
Dim objItens As ClassItensDeContrato
Dim objItensBD As ClassItensDeContrato
Dim objContratoBD As New ClassContrato
Dim colItensAtualiza As New Collection
Dim colItensInsere As New Collection
Dim colItensExclui As New Collection
Dim bAchou As Boolean

On Error GoTo Erro_ItensDeContrato_Grava

    objContratoBD.sCodigo = objContrato.sCodigo
    objContratoBD.iFilialEmpresa = giFilialEmpresa

    'Busca informações gravadas no BD
    lErro = CF("Contrato_Le", objContratoBD)
    If lErro <> SUCESSO Then gError 129365
    
    'Procura os dados da coleção no BD
    For Each objItens In objContrato.colItens
    
        bAchou = False
    
        For Each objItensBD In objContratoBD.colItens
            If objItens.iSeq = objItensBD.iSeq Then
                objItens.lNumIntDoc = objItensBD.lNumIntDoc
                bAchou = True
                Exit For
            End If
        Next
        
        'Se Encontrar Atualiza, senão Insere
        If bAchou Then
            objItens.lNumIntContrato = objContratoBD.lNumIntDoc
            colItensAtualiza.Add objItens
        Else
            objItens.lNumIntContrato = objContrato.lNumIntDoc
            colItensInsere.Add objItens
        End If
   
    Next
    
    'Procura os dados do BD na coleção
    For Each objItensBD In objContratoBD.colItens
    
        bAchou = False
    
        For Each objItens In objContrato.colItens
            If objItens.iSeq = objItensBD.iSeq Then
                bAchou = True
                Exit For
            End If
        Next
        
        'Se não encontrar exclui
        If Not bAchou Then
            objItensBD.lNumIntContrato = objContrato.lNumIntDoc
            colItensExclui.Add objItensBD
        End If
   
    Next
    
    'Insere os itens
    lErro = ItensDeContrato_Insere(colItensInsere)
    If lErro <> SUCESSO Then gError 129366
    
    'Atualiza os itens
    lErro = ItensDeContrato_Atualiza(colItensAtualiza)
    If lErro <> SUCESSO Then gError 129490
    
    'Exclui os itens
    lErro = ItensDeContrato_Exclui(colItensExclui)
    If lErro <> SUCESSO Then gError 129619
    
    ItensDeContrato_Grava = SUCESSO

    Exit Function

Erro_ItensDeContrato_Grava:

    ItensDeContrato_Grava = gErr

    Select Case gErr
    
        Case 129365, 129366, 129490, 129619

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149990)

    End Select
    
    Exit Function

End Function

Function Contrato_Exclui(ByVal objContrato As ClassContrato) As Long
'Exclui um contrato com todos seus itens
'Contratos que possuem itens medidos ou faturados não podem ser excluídos

Dim alComando(1 To 2) As Long
Dim lTransacao As Long
Dim lErro As Long
Dim iIndice As Integer
Dim lNumIntDoc As Long

On Error GoTo Erro_Contrato_Exclui

    'Abre comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 129350
    Next
    
    'Abre transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 129351
    
    'Le contrato que vai ser excluído
    lErro = Comando_ExecutarPos(alComando(1), "SELECT NumIntDoc FROM Contratos WHERE Codigo = ? AND FilialEmpresa = ? ", 0, lNumIntDoc, objContrato.sCodigo, objContrato.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 129352

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 129353

    'Se não encontrar => Erro
    If lErro = AD_SQL_SEM_DADOS Then gError 129354
    
    'Bloqueia o registro contra Alteração/Leituras
    lErro = Comando_LockExclusive(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 129355
    
    objContrato.lNumIntDoc = lNumIntDoc
    
    'Le os itens do contrato
    lErro = CF("ItensDeContrato_Le", objContrato)
    If lErro <> SUCESSO Then gError 129838
    
    'Exclui os itens do contrato
    lErro = ItensDeContrato_Exclui(objContrato.colItens)
    If lErro <> SUCESSO Then gError 129356
    
    'Exclui o contrato
    lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM Contratos", alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 129357
    
    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 129358

    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Contrato_Exclui = SUCESSO

    Exit Function

Erro_Contrato_Exclui:

    Contrato_Exclui = gErr

    Select Case gErr

        Case 129350
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 129351
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 129352
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONTRATO", gErr)

        Case 129353, 129354
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTRATO_NAO_CADASTRADO", gErr, objContrato.sCodigo)

        Case 129355
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_CONTRATO", gErr)

        Case 129356

        Case 129357
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CONTRATO", gErr, objContrato.sCodigo)
        
        Case 129358
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case 129838
                                           
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149991)

    End Select

    'Desfaz alterações
    Call Transacao_Rollback
    
    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function ItensDeContrato_Exclui(ByVal colItensDeContrato As Collection) As Long
'Exclui os itens de contrato passados na coleção colItensDeContrato

Dim alComando(1 To 2) As Long
Dim lTransacao As Long
Dim lErro As Long
Dim iIndice As Integer
Dim lNumIntDoc As Long
Dim objItensDeContrato As ClassItensDeContrato
Dim objItensDeContratoSrv As New ClassItensDeContratoSrv

On Error GoTo Erro_ItensDeContrato_Exclui

    'Abre comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 129359
    Next
    
    'Para cada item de contrato passado
    For Each objItensDeContrato In colItensDeContrato
        
        'Le item de contrato posicionando cursor
        lErro = Comando_ExecutarPos(alComando(1), "SELECT NumIntDoc FROM ItensDeContrato WHERE NumIntDoc = ? ", 0, lNumIntDoc, objItensDeContrato.lNumIntDoc)
        If lErro <> AD_SQL_SUCESSO Then gError 129360
    
        'Busca o item
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 129361

        'Se encontrar
        If lErro <> AD_SQL_SEM_DADOS Then
        
            'Bloqueia registro contra Alterações/Leituras
            lErro = Comando_LockExclusive(alComando(1))
            If lErro <> SUCESSO Then gError 129362
            
            'Verifica se a exclusão é válida
            lErro = ItensDeContrato_ValidaExclusao(objItensDeContrato)
            If lErro <> SUCESSO Then gError 129746
            
            'Exclui item
            lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM ItensDeContrato", alComando(1))
            If lErro <> AD_SQL_SUCESSO Then gError 129363
            
            objItensDeContratoSrv.iFilialEmpresa = objItensDeContrato.iFilialEmpresa
            objItensDeContratoSrv.sProduto = objItensDeContrato.sProduto
            objItensDeContratoSrv.sCodigoContrato = objItensDeContrato.sContrato

            lErro = CF("ItensDeContratoSrv_Exclui", objItensDeContratoSrv)
            If lErro <> AD_SQL_SUCESSO Then gError 195703

        End If

    Next

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    ItensDeContrato_Exclui = SUCESSO

    Exit Function

Erro_ItensDeContrato_Exclui:

    ItensDeContrato_Exclui = gErr

    Select Case gErr

        Case 129359
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 129360, 129361
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSDECONTRATO", gErr)

        Case 129362
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_ITENSDECONTRATO", gErr)

        Case 129363
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_ITENSDECONTRATO", gErr, objItensDeContrato.iSeq)
        
        Case 129746, 195703
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149992)

    End Select

    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function ItensDeContrato_Atualiza(ByVal colItensDeContrato As Collection) As Long
'Altera itens de contrato já gravados no BD

Dim alComando(1 To 2) As Long
Dim lTransacao As Long
Dim lErro As Long
Dim iIndice As Integer
Dim lNumIntDoc As Long
Dim objItensDeContrato As ClassItensDeContrato

On Error GoTo Erro_ItensDeContrato_Atualiza

    'Abre comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 129399
    Next
    
    'Para cada item de contrato passado
    For Each objItensDeContrato In colItensDeContrato
        
        'Le o item de contrato
        lErro = Comando_ExecutarPos(alComando(1), "SELECT NumIntDoc FROM ItensDeContrato WHERE NumIntDoc = ? ", 0, lNumIntDoc, objItensDeContrato.lNumIntDoc)
        If lErro <> AD_SQL_SUCESSO Then gError 129400
    
        'Busca o item
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 129401

        'Se encontrar
        If lErro <> AD_SQL_SEM_DADOS Then
        
            'Bloqueia o registro para Alterações/Leituras
            lErro = Comando_LockExclusive(alComando(1))
            If lErro <> AD_SQL_SUCESSO Then gError 129402
            
            'Atualiza registro
            With objItensDeContrato
                lErro = Comando_ExecutarPos(alComando(2), "UPDATE ItensDeContrato SET NumIntContrato = ?, Seq = ?, Cobrar = ?, Produto = ?, DescProd = ?, Quantidade = ?, UM = ?, Valor = ?, Medicao = ?, DataIniCobranca = ?, Periodicidade = ?, CondPagto = ?, Observacao = ?, DataProxCobranca = ?, DataRefIni = ?, DataRefFim = ?, QtdeParcelas = ?, UltParcCobrada = ?", _
                                            alComando(1), .lNumIntContrato, .iSeq, .iCobrar, .sProduto, .sDescProd, .dQuantidade, .sUM, .dValor, .iMedicao, .dtDataIniCobranca, .iPeriodicidade, .iCondPagto, .sObservacao, .dtDataProxCobranca, .dtDataRefIni, .dtDataRefFim, .iQtdeParcelas, .iUltParcCobrada)
            End With
            If lErro <> AD_SQL_SUCESSO Then gError 129403
            
        End If

    Next

    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    ItensDeContrato_Atualiza = SUCESSO

    Exit Function

Erro_ItensDeContrato_Atualiza:

    ItensDeContrato_Atualiza = gErr

    Select Case gErr

        Case 129399
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 129400, 129401
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSDECONTRATO", gErr)

        Case 129402
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_ITENSDECONTRATO", gErr)

        Case 129403
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_CONTRATO", gErr, objItensDeContrato.iSeq)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149993)

    End Select

    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function ItensDeMedicaoContrato_Atualiza(ByVal colItensDeMedicao As Collection) As Long
'Atualiza os itens de medição passados na coleção colItensDeMedicao

Dim alComando(1 To 2) As Long
Dim lTransacao As Long
Dim lErro As Long
Dim iIndice As Integer
Dim lNumIntDoc As Long
Dim objItensDeMedicao As ClassItensMedCtr
Dim objNF As New ClassNFiscal
Dim objItemNF As New ClassItemNF
Dim iItem As Integer

On Error GoTo Erro_ItensDeMedicaoContrato_Atualiza

    'Abre comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 129369
    Next
    
    'Para cada item passado
    For Each objItensDeMedicao In colItensDeMedicao
        
        'Le o item de medição possicionando o cursor
        lErro = Comando_ExecutarPos(alComando(1), "SELECT NumIntItensContrato FROM ItensDeMedicaoContrato WHERE NumIntItensContrato = ? AND Medicao = ?", 0, lNumIntDoc, objItensDeMedicao.lNumIntItensContrato, objItensDeMedicao.lMedicao)
        If lErro <> AD_SQL_SUCESSO Then gError 129370
    
        'Busca o item
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 129371

        'Se encontrar
        If lErro <> AD_SQL_SEM_DADOS Then
        
            objItemNF.objCobrItensContrato.lMedicao = objItensDeMedicao.lMedicao
            objItemNF.objCobrItensContrato.lNumIntItensContrato = objItensDeMedicao.lNumIntItensContrato
        
            Set objItemNF.objCobrItensContrato.colMedicoes = colItensDeMedicao
        
            'Busca Faturas do item
            lErro = CF("ItensDeContrato_Le_DadosFatura", objNF, objItemNF)
            If lErro <> SUCESSO And lErro <> 129904 And lErro <> 129907 And lErro <> 129908 Then gError 131027
            
            'Se encontrar => Erro
            If lErro = SUCESSO Then gError 131028
        
            'Bloqueia o registro contra Alterações/Leituras
            lErro = Comando_LockExclusive(alComando(1))
            If lErro <> AD_SQL_SUCESSO Then gError 129372
            
            'Atualiza o registro
            With objItensDeMedicao
                lErro = Comando_ExecutarPos(alComando(2), "UPDATE ItensDeMedicaoContrato SET Status = ?, VlrCobrar = ?, Quantidade = ?, Custo = ?, DataCobranca = ?, DataRefIni = ?, DataRefFim = ?", _
                                            alComando(1), .iStatus, .dVlrCobrar, .dQuantidade, .dCusto, .dtDataCobranca, .dtDataRefIni, .dtDataRefFim)
            End With
            If lErro <> AD_SQL_SUCESSO Then gError 129373
            
        End If

    Next

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    ItensDeMedicaoContrato_Atualiza = SUCESSO

    Exit Function

Erro_ItensDeMedicaoContrato_Atualiza:

    ItensDeMedicaoContrato_Atualiza = gErr

    Select Case gErr

        Case 129369
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 129370, 129371
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSDEMEDICAOCONTRATO", gErr)

        Case 129372
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_ITENSDEMEDICAOCONTRATO", gErr)

        Case 129373
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_ITENSDEMEDICAOCONTRATO", gErr, objItensDeMedicao.objItensDeContrato.iSeq)
        
        Case 131027
        
        Case 131028
            Call Rotina_Erro(vbOKOnly, "ERRO_MEDICAO_FATURADA2", gErr, objItensDeMedicao.lMedicao, objItensDeMedicao.objItensDeContrato.iSeq)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149994)

    End Select

    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function ItensDeContrato_Atualiza_DataProxCobranca(ByVal objCobrItensContrato As ClassCobrItensContrato) As Long
'Atualiza a data da próxima cobrança de um item de contrato
'Se baseia na última cobrança e na periodicidade
'Recebe o NumIntDoc e a data da última cobrança

Dim alComando(1 To 2) As Long
Dim lErro As Long
Dim iIndice As Integer
Dim iPeriodicidade As Long
Dim dtDataProxCobranca As Date
Dim dtRefIni As Date
Dim dtRefFim As Date
Dim objItemNF As New ClassItemNF
Dim objNF As New ClassNFiscal
Dim dtDataUltCobranca As Date
Dim dtRefMaior As Date
Dim objItemMedicao As ClassItensMedCtr, iQtdeParcelas As Integer, iUltParcCobrada As Integer

On Error GoTo Erro_ItensDeContrato_Atualiza_DataProxCobranca

    'Abre comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 129375
    Next
    
    dtRefIni = DateAdd("d", 1, objCobrItensContrato.dtDataRefFim)
    dtDataUltCobranca = objCobrItensContrato.dtDataUltCobranca
        
    'Le o item de contrato posicionando o cursor
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Periodicidade, QtdeParcelas, UltParcCobrada FROM ItensDeContrato WHERE NumIntDoc = ? ", 0, iPeriodicidade, iQtdeParcelas, iUltParcCobrada, objCobrItensContrato.lNumIntItensContrato)
    If lErro <> AD_SQL_SUCESSO Then gError 129376

    'Busca o item
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 129377
    If lErro = AD_SQL_SEM_DADOS Then gError 129378
    
    objItemNF.objCobrItensContrato.lNumIntItensContrato = objCobrItensContrato.lNumIntItensContrato
    
    If objCobrItensContrato.colMedicoes.Count = 0 Then
   
        'Obtém os itens fiscais gerados por último (Com maior data da última cobrança)
        lErro = CF("ItensDeContrato_Le_DadosFatura", objNF, objItemNF)
        If lErro <> SUCESSO And lErro <> 129904 And lErro <> 129907 And lErro <> 129908 Then gError 136190
        If lErro = SUCESSO Then
        
            'Se está sendo faturado algo alterior a uma fatura já feita, considera a data da fatura com maior data
            If objCobrItensContrato.dtDataUltCobranca < objItemNF.objCobrItensContrato.dtDataUltCobranca Then
            
                dtRefIni = DateAdd("d", 1, objItemNF.objCobrItensContrato.dtDataRefFim)
                dtDataUltCobranca = objItemNF.objCobrItensContrato.dtDataUltCobranca
            
            End If
        
        End If
        
    Else
    
        'Busca a maior data de referência final dentro das medições do item
        dtRefMaior = DATA_NULA
        For Each objItemMedicao In objCobrItensContrato.colMedicoes
        
            If objItemMedicao.dtDataRefFim > dtRefMaior Then
                dtRefMaior = objItemMedicao.dtDataRefFim
                dtDataUltCobranca = objItemMedicao.dtDataCobranca
            End If
        
        Next
    
        dtRefIni = DateAdd("d", 1, dtRefMaior)
    
    End If

    lErro = CF("Contrato_ProxCobranca", iPeriodicidade, dtDataUltCobranca, dtRefIni, dtDataProxCobranca, dtRefFim)
    If lErro <> SUCESSO Then gError 133281
    
    'Bloqueia o registro contra Alteração/Leituras
    lErro = Comando_LockExclusive(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 129379
    
    If iUltParcCobrada < iQtdeParcelas Then iUltParcCobrada = iUltParcCobrada + 1
    
    'Atualiza a data da próxima cobrança
    lErro = Comando_ExecutarPos(alComando(2), "UPDATE ItensDeContrato SET DataProxCobranca = ?, DataRefIni = ?, DataRefFim = ?, UltParcCobrada = ?", _
                                    alComando(1), dtDataProxCobranca, dtRefIni, dtRefFim, iUltParcCobrada)
    If lErro <> AD_SQL_SUCESSO Then gError 129380

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    ItensDeContrato_Atualiza_DataProxCobranca = SUCESSO

    Exit Function

Erro_ItensDeContrato_Atualiza_DataProxCobranca:

    ItensDeContrato_Atualiza_DataProxCobranca = gErr

    Select Case gErr

        Case 129375
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 129376, 129377, 129378
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSDECONTRATO", gErr)

        Case 129379
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_ITENSDECONTRATO", gErr)

        Case 129380
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_CONTRATO", gErr, objCobrItensContrato.lNumIntItensContrato)
        
        Case 133281, 136190
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149995)

    End Select

    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function MedicaoContrato_Exclui(ByVal objMedicaoContrato As ClassMedicaoContrato) As Long
'Exclui uma medição de contrato juntamente com seus itens
'Não permite exclusões de medições que possuam itens faturados
'O objMedicaoContrato.lCodigo precisa estar preenchido

Dim alComando(1 To 2) As Long
Dim lTransacao As Long
Dim lErro As Long
Dim iIndice As Integer
Dim lAux As Long

On Error GoTo Erro_MedicaoContrato_Exclui

    'Abre comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 129590
    Next
    
    'Abre transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 129591
    
    'Le a Medição de contrato posicionando o cursor
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Codigo FROM MedicaoContrato WHERE Codigo = ? ", 0, lAux, objMedicaoContrato.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 129592

    'Busca o item
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 129593

    'Se não encontrar => Erro
    If lErro = AD_SQL_SEM_DADOS Then gError 129594
    
    'Bloqueia o registro contra Alterações/Leituras
    lErro = Comando_LockExclusive(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 129595
    
    'Exclui os itens de medição do contrato
    lErro = CF("ItensDeMedicaoContrato_Le", objMedicaoContrato)
    If lErro <> SUCESSO Then gError 131024
    
    'Exclui os itens de medição do contrato
    lErro = ItensDeMedicaoContrato_Exclui(objMedicaoContrato.colItens)
    If lErro <> SUCESSO Then gError 129596
    
    'Exclui a medição do contrato
    lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM MedicaoContrato", alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 129597
    
    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 129598

    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    MedicaoContrato_Exclui = SUCESSO

    Exit Function

Erro_MedicaoContrato_Exclui:

    MedicaoContrato_Exclui = gErr

    Select Case gErr

        Case 129590
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 129591
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 129592
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MEDICAOCONTRATO", gErr)

        Case 129593, 129594
            Call Rotina_Erro(vbOKOnly, "ERRO_MEDICAOCONTRATO_NAO_CADASTRADO", gErr, objMedicaoContrato.lCodigo)

        Case 129595
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_MEDICAOCONTRATO", gErr)

        Case 129596, 131024

        Case 129597
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_MEDICAOCONTRATO", gErr, objMedicaoContrato.lCodigo)
        
        Case 129598
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
                                           
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149996)

    End Select

    'Desfaz alterações
    Call Transacao_Rollback
    
    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function ItensDeMedicaoContrato_Exclui(ByVal colItensDeMedicao As Collection) As Long
'Exclui os itens de medição de contratos passados na coleção colItensDeMedicao
'Não permite a exclusão de itens de mediçào de contrato faturados

Dim alComando(1 To 2) As Long
Dim lTransacao As Long
Dim lErro As Long
Dim iIndice As Integer
Dim lNumIntDoc As Long
Dim objItensDeMedicaoContrato As ClassItensMedCtr
Dim objNF As New ClassNFiscal
Dim objItemNF As New ClassItemNF

On Error GoTo Erro_ItensDeMedicaoContrato_Exclui

    'Abre comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 129599
    Next
    
    'Para cada item passado
    For Each objItensDeMedicaoContrato In colItensDeMedicao
        
        'Le o item posicionando o cursor
        lErro = Comando_ExecutarPos(alComando(1), "SELECT NumIntItensContrato FROM ItensDeMedicaoContrato WHERE NumIntItensContrato = ? AND Medicao = ? ", 0, lNumIntDoc, objItensDeMedicaoContrato.lNumIntItensContrato, objItensDeMedicaoContrato.lMedicao)
        If lErro <> AD_SQL_SUCESSO Then gError 129600
    
        'Busca o item
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 129601

        'Se encontrar
        If lErro <> AD_SQL_SEM_DADOS Then
        
            'Bloqueia o registro contra Alterações/Leituras
            lErro = Comando_LockExclusive(alComando(1))
            If lErro <> SUCESSO Then gError 129602
            
            objItemNF.objCobrItensContrato.lMedicao = objItensDeMedicaoContrato.lMedicao
            objItemNF.objCobrItensContrato.lNumIntItensContrato = objItensDeMedicaoContrato.lNumIntItensContrato
            
            Set objItemNF.objCobrItensContrato.colMedicoes = colItensDeMedicao
            
            'Busca Faturas do item
            lErro = CF("ItensDeContrato_Le_DadosFatura", objNF, objItemNF)
            If lErro <> SUCESSO And lErro <> 129904 And lErro <> 129907 And lErro <> 129908 Then gError 129606
            
            'Se encontrar => Erro
            If lErro = SUCESSO Then gError 129603
            
            'Exclui o item de medição de contrato
            lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM ItensDeMedicaoContrato", alComando(1))
            If lErro <> AD_SQL_SUCESSO Then gError 129604
            
        End If

    Next

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    ItensDeMedicaoContrato_Exclui = SUCESSO

    Exit Function

Erro_ItensDeMedicaoContrato_Exclui:

    ItensDeMedicaoContrato_Exclui = gErr

    Select Case gErr

        Case 129599
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 129600, 129601, 129605
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSDEMEDICAOCONTRATO", gErr)

        Case 129602
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_ITENSDEMEDICAOCONTRATO", gErr)

        Case 129604
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_ITENSDEMEDICAOCONTRATO", gErr, objItensDeMedicaoContrato.lMedicao, objItensDeMedicaoContrato.lNumIntItensContrato)
        
        Case 129603
            Call Rotina_Erro(vbOKOnly, "ERRO_MEDICAO_FATURADA", gErr, objItensDeMedicaoContrato.lMedicao, objItensDeMedicaoContrato.objItensDeContrato.iSeq)
        
        Case 129606
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149997)

    End Select

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function MedicaoContrato_Grava(ByVal objMedicaoContrato As ClassMedicaoContrato) As Long
'Grava uma medição de contrato

Dim lErro As Long
Dim alComando(1 To 2) As Long
Dim lTransacao As Long
Dim iIndice As Integer
Dim lAux As Long

On Error GoTo Erro_MedicaoContrato_Grava

    'Abre comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 129607
    Next

    'Abre transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 129608
    
    'Le a Medição de contrato posicionando o cursor
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Codigo FROM MedicaoContrato WHERE Codigo = ? ", 0, lAux, objMedicaoContrato.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 129609

    'Busca a medição
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 129610

    'Se não encontrar então inclui senão altera
    If lErro = AD_SQL_SEM_DADOS Then
        
        With objMedicaoContrato
        
            'Insere mediçào
            lErro = Comando_Executar(alComando(2), "INSERT INTO MedicaoContrato(Codigo, NumIntContrato, Data) VALUES (?,?,?)", _
                                                                        .lCodigo, .lNumIntContrato, .dtData)
            If lErro <> AD_SQL_SUCESSO Then gError 129611
    
        End With
        
    Else

        With objMedicaoContrato
        
            'Bloqueia o registro para Alterações/Leituras
            lErro = Comando_LockExclusive(alComando(1))
            If lErro <> AD_SQL_SUCESSO Then gError 129606

            'Atualiza medição
            lErro = Comando_ExecutarPos(alComando(2), "UPDATE MedicaoContrato SET NumIntContrato= ?, Data= ? ", alComando(1), _
                                                    .lNumIntContrato, .dtData)
            If lErro <> AD_SQL_SUCESSO Then gError 129612

        End With

    End If
    
    'Grava os itens da medição
    lErro = ItensDeMedicaoContrato_Grava(objMedicaoContrato)
    If lErro <> SUCESSO Then gError 129613

    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 129614
 
    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    MedicaoContrato_Grava = SUCESSO

    Exit Function

Erro_MedicaoContrato_Grava:

    MedicaoContrato_Grava = gErr

    Select Case gErr
    
        Case 129606
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_MEDICAOCONTRATO", gErr)
        
        Case 129607
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 129608
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 129609, 129610
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MEDICAOCONTRATO", gErr)

        Case 129611
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MEDICAOCONTRATO", gErr, objMedicaoContrato.lCodigo)

        Case 129612
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_MEDICAOCONTRATO", gErr, objMedicaoContrato.lCodigo)

        Case 129613

        Case 129614
             Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149998)

    End Select

    'Desfaz alterações
    Call Transacao_Rollback
    
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Function ItensDeMedicaoContrato_Grava(ByVal objMedicaoContrato As ClassMedicaoContrato) As Long
'Grava os itens de medição passados na coleção objMedicaoContrato.colItens

Dim lErro As Long
Dim objItens As ClassItensMedCtr
Dim objItensBD As ClassItensMedCtr
Dim objMedicaoContratoBD As New ClassMedicaoContrato
Dim colItensAtualiza As New Collection
Dim colItensInsere As New Collection
Dim colItensExclui As New Collection
Dim bAchou As Boolean

On Error GoTo Erro_ItensDeMedicaoContrato_Grava

    objMedicaoContratoBD.lCodigo = objMedicaoContrato.lCodigo
    
    'Le a medição no BD
    lErro = CF("MedicaoContrato_Le", objMedicaoContratoBD)
    If lErro <> SUCESSO Then gError 129618
    
    'Procura os dados da coleção na tabela
    For Each objItens In objMedicaoContrato.colItens
    
        bAchou = False
    
        For Each objItensBD In objMedicaoContratoBD.colItens
            If objItens.lNumIntItensContrato = objItensBD.lNumIntItensContrato Then
                Set objItens.objItensDeContrato = objItensBD.objItensDeContrato
                bAchou = True
                Exit For
            End If
        Next
        
        'Se Encontrar Atualiza, senão Insere
        If bAchou Then
            colItensAtualiza.Add objItens
        Else
            colItensInsere.Add objItens
        End If
   
    Next
    
    'Procura os dados da Tabela na coleção
    For Each objItensBD In objMedicaoContratoBD.colItens
    
        bAchou = False
    
        For Each objItens In objMedicaoContrato.colItens
            If objItens.lNumIntItensContrato = objItensBD.lNumIntItensContrato Then
                bAchou = True
                Exit For
            End If
        Next
        
        'Se não encontrar exclui
        If Not bAchou Then
            colItensExclui.Add objItensBD
        End If
   
    Next
    
    'Insere os itens de medição de contrato
    lErro = ItensDeMedicaoContrato_Insere(colItensInsere)
    If lErro <> SUCESSO Then gError 129615
    
    'Altera os itens de medição de contrato
    lErro = ItensDeMedicaoContrato_Atualiza(colItensAtualiza)
    If lErro <> SUCESSO Then gError 129616
    
    'Exclui os itens de medição de contrato
    lErro = ItensDeMedicaoContrato_Exclui(colItensExclui)
    If lErro <> SUCESSO Then gError 129617
    
    ItensDeMedicaoContrato_Grava = SUCESSO

    Exit Function

Erro_ItensDeMedicaoContrato_Grava:

    ItensDeMedicaoContrato_Grava = gErr

    Select Case gErr
    
        Case 129615 To 129618

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149999)

    End Select
    
    Exit Function

End Function

Function ItensDeContrato_ValidaExclusao(ByVal objItensDeContrato As ClassItensDeContrato) As Long
'Verifica se a exclusão de um contrato pode ocorrer
'Um item de contrato não pode ser excluído quando:
'1 - Possuir medições associadas a ele
'2 - Já tiver sido faturado
'3 - Estiver associado a uma solicitacao de serviço

Dim lErro As Long
Dim lComando As Long
Dim lAux As Long
Dim objNF As New ClassNFiscal
Dim objItemNF As New ClassItemNF
Dim dtDataUltCobranca As Date, objProduto As New ClassProduto
Dim objSolicSRV As New ClassSolicSRV
Dim objItensSolicSrv As ClassItensSolicSRV
Dim objItensContSrvNumSerie As ClassItensContSrvNumSerie
Dim objItensDeContratoSrv As New ClassItensDeContratoSrv
Dim colItensDeContratoSrv As New Collection

On Error GoTo Erro_ItensDeContrato_ValidaExclusao

    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 129740
    
    'Le a Medições do item de contrato passado
    lErro = Comando_Executar(lComando, "SELECT Medicao FROM ItensDeMedicaoContrato WHERE NumIntItensContrato = ? ", _
                                              lAux, objItensDeContrato.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 129741

    'Busca o primeiro item de medição
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 129742
        
    'Se encontrar => Erro (Item com medição)
    If lErro <> AD_SQL_SEM_DADOS Then gError 129743
    
    objItemNF.objCobrItensContrato.lMedicao = 0
    objItemNF.objCobrItensContrato.lNumIntItensContrato = objItensDeContrato.lNumIntDoc
    
    'Busca faturas do item de contrato passado
    lErro = CF("ItensDeContrato_Le_DadosFatura", objNF, objItemNF)
    If lErro <> SUCESSO And lErro <> 129904 And lErro <> 129907 And lErro <> 129908 Then gError 129745
    
    'Se encontrar => Erro (Item Faturado)
    If lErro = SUCESSO Then gError 129744
                
    'se encontrou alguma solicitacao envolvendo o contrato e produto em questao
    lErro = CF("ItensSolicSRV_Le_Contrato", objSolicSRV, objItensDeContrato.iFilialEmpresa, objItensDeContrato.sContrato, objItensDeContrato.sProduto)
    If lErro <> SUCESSO And lErro <> 195596 Then gError 195605
                
    If lErro = SUCESSO Then
    
        objItensDeContratoSrv.iFilialEmpresa = objItensDeContrato.iFilialEmpresa
        objItensDeContratoSrv.lNumIntItemContrato = objItensDeContrato.lNumIntDoc
    
        lErro = CF("ItensDeContratoSrv_Le_NumIntItemContrato", objItensDeContratoSrv, colItensDeContratoSrv)
        If lErro <> SUCESSO And lErro <> 195693 Then gError 195697
    
        If lErro = SUCESSO Then
    
            objProduto.sCodigo = objItensDeContrato.sProduto
        
            lErro = CF("Produto_Le", objProduto)
            If lErro <> SUCESSO And lErro <> 28030 Then gError 195698
                    
            For Each objItensDeContratoSrv In colItensDeContratoSrv
                    
                If objProduto.iRastro = PRODUTO_RASTRO_LOTE Or objProduto.iRastro = PRODUTO_RASTRO_OP Then
                
                    For Each objItensSolicSrv In objSolicSRV.colItens
                    
                        If objItensSolicSrv.sLote = objItensDeContratoSrv.sLote And objItensSolicSrv.iFilialOP = objItensDeContratoSrv.iFilialOP Then gError 195699
                        
                    Next
                
                ElseIf objProduto.iRastro = PRODUTO_RASTRO_NUM_SERIE Then
        
                    'pesquisa as solicitacoes de servico
                    For Each objItensSolicSrv In objSolicSRV.colItens
                    
                        For Each objItensContSrvNumSerie In objItensDeContratoSrv.colNumSerie
                        
                            If objItensContSrvNumSerie.sNumSerie = objItensSolicSrv.sLote Then gError 195700
                            
                        Next
                        
                    Next
        
                Else
                    gError 195701
                End If
            
            Next
            
        Else
        
            gError 195702
            
        End If

    End If
                
    'Fecha comando
    Call Comando_Fechar(lComando)

    ItensDeContrato_ValidaExclusao = SUCESSO

    Exit Function

Erro_ItensDeContrato_ValidaExclusao:

    ItensDeContrato_ValidaExclusao = gErr

    Select Case gErr

        Case 129740
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 129741 To 129742
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSDEMEDICAOCONTRATO", gErr, objItensDeContrato.iSeq)

        Case 129743
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTRATO_COM_MEDICAO", gErr, objItensDeContrato.iSeq)

        Case 129744
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTRATO_FATURADO", gErr, objItensDeContrato.iSeq)

        Case 129745, 195605, 195697, 195698
        
        Case 195699 To 195702
            Call Rotina_Erro(vbOKOnly, "ERRO_ITEMCONTRATOSRV_EM_SOLICITACAOSRV", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150000)

    End Select

    'Fecha comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function ItensDeContrato_Insere_Fatura(ByVal objNF As ClassNFiscal, ByVal objItemNF As ClassItemNF) As Long
'Grava relação ItemNF vs ItemContrato ou ItemMedição

Dim alComando(1 To 2) As Long
Dim lErro As Long
Dim iIndice As Integer
Dim lNumIntItensContrato As Long
Dim lNumIntItemNF As Long
Dim sContrato As String
Dim iItem As Integer
Dim objItemMedicao As ClassItensMedCtr

On Error GoTo Erro_ItensDeContrato_Insere_Fatura

    'Abre comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 129940
    Next
    
    If objItemNF.objCobrItensContrato.colMedicoes.Count = 0 Then
    'Se for associado a um item de contrato => Le ItensDeContratoCobranca
        lErro = Comando_Executar(alComando(1), "SELECT NumIntItensContrato FROM ItensDeContratoCobranca WHERE NumIntItemNFiscal = ? ", lNumIntItensContrato, objItemNF.lNumIntDoc)
    Else
    'Se for associado a um item de medição => Le ItensDeMedicaoCobranca
        lErro = Comando_Executar(alComando(1), "SELECT NumIntItensContrato FROM ItensDeMedicaoCobranca WHERE NumIntItemNFiscal = ? ", lNumIntItensContrato, objItemNF.lNumIntDoc)
    End If
    
    If lErro <> AD_SQL_SUCESSO Then gError 129941

    'Busca o item
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 129942

    'Se não encontrar
    If lErro = AD_SQL_SEM_DADOS Then
    
        If objItemNF.objCobrItensContrato.colMedicoes.Count = 0 Then
        'Se for associado a um item de contrato => Insere em ItensDeContratoCobranca
            lErro = Comando_Executar(alComando(1), "INSERT INTO ItensDeContratoCobranca(NumIntItensContrato, NumIntItemNFiscal, DataUltCobranca, NumIntDocCobranca, DataRefIni, DataRefFim ) VALUES (?,?,?,?,?,?)", _
                                                     objItemNF.objCobrItensContrato.lNumIntItensContrato, objItemNF.lNumIntDoc, objItemNF.objCobrItensContrato.dtDataUltCobranca, objItemNF.objCobrItensContrato.lNumIntDocCobranca, objItemNF.objCobrItensContrato.dtDataRefIni, objItemNF.objCobrItensContrato.dtDataRefFim)
            If lErro <> AD_SQL_SUCESSO Then gError 129943
    
        
        Else
        
            'Para cada medição do item
            For Each objItemMedicao In objItemNF.objCobrItensContrato.colMedicoes
            
                sContrato = String(STRING_CONTRATO_CODIGO, 0)
            
                lErro = Comando_Executar(alComando(1), "SELECT IMC.NumIntItemNFiscal, C.Codigo, IC.Seq FROM ItensDeMedicaoCobranca AS IMC, Contratos AS C, ItensDeContrato AS IC WHERE C.NumIntDoc = IC.NumIntContrato AND IC.NumIntDoc = IMC.NumIntItensContrato AND IMC.NumIntItensContrato = ? AND IMC.Medicao = ?", lNumIntItemNF, sContrato, iItem, objItemMedicao.lNumIntItensContrato, objItemMedicao.lMedicao)
                If lErro <> AD_SQL_SUCESSO Then gError 136191
            
                'Busca o item
                lErro = Comando_BuscarPrimeiro(alComando(1))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 136192
            
                'Se já tiver isdo faturado dá erro
                If lErro = SUCESSO Then gError 136193
            
                'Insere em ItensDeMedicaoCobranca
                lErro = Comando_Executar(alComando(1), "INSERT INTO ItensDeMedicaoCobranca(NumIntItensContrato,Medicao, NumIntItemNFiscal, DataUltCobranca, NumIntDocCobranca, DataRefIni, DataRefFim ) VALUES (?,?,?,?,?,?,?)", _
                                                         objItemMedicao.lNumIntItensContrato, objItemMedicao.lMedicao, objItemNF.lNumIntDoc, objItemMedicao.dtDataCobranca, objItemNF.objCobrItensContrato.lNumIntDocCobranca, objItemMedicao.dtDataRefIni, objItemMedicao.dtDataRefFim)
        
                If lErro <> AD_SQL_SUCESSO Then gError 129943
        
            Next
        
        End If

    End If
    
    'Atualiza a data da próxima cobrança
    lErro = ItensDeContrato_Atualiza_DataProxCobranca(objItemNF.objCobrItensContrato)
    If lErro <> SUCESSO Then gError 129952

    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    ItensDeContrato_Insere_Fatura = SUCESSO

    Exit Function

Erro_ItensDeContrato_Insere_Fatura:

    ItensDeContrato_Insere_Fatura = gErr

    Select Case gErr

        Case 129940
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 129941 To 129943
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSDECONTRATO", gErr)
        
        Case 129952, 136191, 136192
        
        Case 136193
            Call Rotina_Erro(vbOKOnly, "ERRO_ITEMMEDICAO_FATURADO", gErr, objItemMedicao.lMedicao, sContrato, iItem)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150001)

    End Select

    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function
'#######################################################################
'FIM
'#######################################################################

'#######################################################
'Inserido por Wagner
Private Sub NFiscalContratoSQL_Prepara(ByVal objGeracaoFatContrato As ClassGeracaoFatContrato, sSQL As String)
'Monta o SELECT que traz os dados necessários para o faturamento de uma nota fiscal

Dim sSelect1 As String, sWhere1 As String, sFrom1 As String, sSubSelect1 As String, sOrderBy As String
Dim sSelect2 As String, sWhere2 As String, sFrom2 As String, sSubSelect2 As String
Dim sSQL1 As String, sSQL2 As String, sWhereAux

On Error GoTo Erro_NFiscalContratoSQL_Prepara
    
    'Traz os Itens de Contratos Com Medição
    sSelect1 = "SELECT  C.NumIntDoc, " & _
                        "C.Codigo, " & _
                        "C.Descricao, " & _
                        "C.Cliente, " & _
                        "C.FilCli, " & _
                        "C.Ccl, " & _
                        "IC.NumIntDoc, " & _
                        "IC.Seq, " & _
                        "IC.Produto, " & _
                        "IC.DescProd, " & _
                        "IC.UM, " & _
                        "IC.CondPagto, " & _
                        "IC.Periodicidade, " & _
                        "IC.DataIniCobranca, " & _
                        "IM.DataCobranca, " & _
                        "IC.Valor, " & _
                        "M.Codigo AS NumIntMedicao, " & _
                        "IM.DataRefIni  AS RefIni, " & _
                        "IM.DataRefFim  AS RefFim, " & _
                        "IM.Quantidade AS Quantidade, " & _
                        "IM.Custo AS Custo, " & _
                        "IM.VlrCobrar AS ValorCobrar, " & _
                        "C.NaturezaOP, " & _
                        "C.TipoTributacao, C.Recibo, C.Serie "

    sFrom1 = "FROM      Clientes AS CLI, Contratos                AS C, " & _
                        "ItensDeContrato         AS IC, " & _
                        "MedicaoContrato         AS M, " & _
                        "ItensDeMedicaoContrato  AS IM "
                    
    sWhere1 = "WHERE    CLI.Codigo = C.Cliente AND CLI.Ativo=1 AND C.NumIntDoc          = IC.NumIntContrato AND " & _
                        "C.NumIntDoc         = M.NumIntContrato AND " & _
                        "IC.NumIntDoc        = IM.NumIntItensContrato AND " & _
                        "IM.Medicao          = M.Codigo AND " & _
                        "C.Ativo             = 1 AND " & _
                        "IC.Cobrar           = 1 AND " & _
                        "C.FilialEmpresa     = ? AND " & _
                        "IM.DataCobranca  >= ? AND " & _
                        "IM.DataCobranca  <= ? AND " & _
                        "C.Tipo = ? AND " & _
                        "NOT EXISTS "
    
    'Verifica se o Item de Medição ainda não foi faturada
    sSubSelect1 = "( SELECT   NumIntItemNFiscal " & _
                    "FROM   ItensDeMedicaoCobranca AS IMNF, ItensNFiscal AS INF " & _
                    "WHERE  IMNF.NumIntItensContrato    = IM.NumIntItensContrato AND " & _
                            "IMNF.Medicao = IM.Medicao AND  " & _
                            "INF.NumIntDoc = IMNF.NumIntItemNFiscal ) "
    sWhere1 = sWhere1 & sSubSelect1
                            
    'Traz os Itens de Contratos Sem Medição
    sSelect2 = "SELECT  C.NumIntDoc, " & _
                        "C.Codigo, " & _
                        "C.Descricao, " & _
                        "C.Cliente, " & _
                        "C.FilCli, " & _
                        "C.Ccl, " & _
                        "IC.NumIntDoc, " & _
                        "IC.Seq, " & _
                        "IC.Produto, " & _
                        "CONVERT(VARCHAR(250),replace(descprod,'{p}',{fn CONVERT(ultparccobrada+1,SQL_VARCHAR)}+'/'+{fn CONVERT(qtdeparcelas,SQL_VARCHAR)})), " & _
                        "IC.UM, " & _
                        "IC.CondPagto, " & _
                        "IC.Periodicidade, " & _
                        "IC.DataIniCobranca, " & _
                        "IC.DataProxCobranca, " & _
                        "IC.Valor, " & _
                        "0 AS NumIntMedicao, " & _
                        "IC.DataRefIni  AS RefIni, " & _
                        "IC.DataRefFim  AS RefFim, " & _
                        "IC.Quantidade AS Quantidade, " & _
                        "0 AS Custo, " & _
                        "IC.Valor * IC.Quantidade AS ValorCobrar, " & _
                        "C.NaturezaOP, " & _
                        "C.TipoTributacao, C.Recibo, C.Serie "

    sFrom2 = "FROM  Clientes AS CLI, Contratos        AS C, " & _
                    "ItensDeContrato AS IC "
                    
    sWhere2 = "WHERE CLI.Codigo = C.Cliente AND CLI.Ativo=1 AND (IC.QtdeParcelas < 1 OR (IC.UltParcCobrada < IC.QtdeParcelas)) AND C.NumIntDoc = IC.NumIntContrato AND " & _
                        "C.Ativo             = 1 AND " & _
                        "IC.Cobrar           = 1 AND " & _
                        "IC.Medicao          = 0 AND " & _
                        "C.FilialEmpresa     = ? AND " & _
                        "IC.DataProxCobranca >= ? AND " & _
                        "IC.DataProxCobranca <= ? AND " & _
                        "(IC.DataRefIni < C.DataFimContrato OR C.DataFimContrato = ?) AND " & _
                        "C.Tipo <= ? " 'Alterado por Wagner 09/06/05
                      
    sOrderBy = "ORDER BY C.Codigo, IC.CondPagto "
      
    If objGeracaoFatContrato.sContratoIni <> "" Then
        sWhereAux = sWhereAux & "AND C.Codigo >= ? "
    End If
    If objGeracaoFatContrato.sContratoFim <> "" Then
        sWhereAux = sWhereAux & "AND C.Codigo <= ? "
    End If
    
    If objGeracaoFatContrato.lClienteIni <> 0 Then
        sWhereAux = sWhereAux & "AND C.Cliente >= ? "
    End If
    If objGeracaoFatContrato.lClienteFim <> 0 Then
        sWhereAux = sWhereAux & "AND C.Cliente <= ? "
    End If
    
    sWhere1 = sWhere1 & sWhereAux
    sWhere2 = sWhere2 & sWhereAux
    
    sSQL1 = sSelect1 & sFrom1 & sWhere1
    sSQL2 = sSelect2 & sFrom2 & sWhere2 & sOrderBy
    
    sSQL = sSQL1 & " UNION " & sSQL2

    Exit Sub

Erro_NFiscalContratoSQL_Prepara:

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150002)

    End Select

    Exit Sub

End Sub

Private Function NFiscalContratoInt_Prepara(ByVal lComando As Long, vlNumIntContrato As Variant, vsContrato As Variant, vsDescContrato As Variant, vlCliente As Variant, viFilCli As Variant, vsCcl As Variant, vlNumIntItem, viItem As Variant, vsProduto As Variant, vsDescProd As Variant, vsUM As Variant, viCondPagto As Variant, viPeriodicidade As Variant, vdtIniCobr As Variant, vdtProxCobr As Variant, vdValor As Variant, vlMedicao As Variant, vdtRefIni As Variant, vdtRefFim As Variant, vdQtd As Variant, vdCusto As Variant, vdVlrCobrar As Variant, vsNaturezaOP As Variant, viTipoTributacao As Variant, viRecibo As Variant, vsSerie As Variant, ByVal vlClienteIni As Variant, ByVal vlClienteFim As Variant, ByVal vsContratoIni As Variant, ByVal vsContratoFim As Variant, ByVal viFilialEmpresa As Variant, ByVal vdtCobrI As Variant, ByVal vdtCobrF As Variant, ByVal viTipo As Variant, ByVal sSQL As String) As Long
'Passa as variáveis de retorno e filtro do SELECT que monta os dados a serem faturados

Dim lErro As Long
Dim vdtDataNula As Variant 'Inserido 09/06/05

On Error GoTo Erro_NFiscalContratoInt_Prepara

    vdtDataNula = DATA_NULA 'Inserido dia 09/06/05

    lErro = Comando_PrepararInt(lComando, sSQL)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129800

    lErro = Comando_BindVarInt(lComando, vlNumIntContrato)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129801

    lErro = Comando_BindVarInt(lComando, vsContrato)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129802
    
    lErro = Comando_BindVarInt(lComando, vsDescContrato)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129803
    
    lErro = Comando_BindVarInt(lComando, vlCliente)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129804
    
    lErro = Comando_BindVarInt(lComando, viFilCli)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129805
    
    lErro = Comando_BindVarInt(lComando, vsCcl)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129806
    
    lErro = Comando_BindVarInt(lComando, vlNumIntItem)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129807
    
    lErro = Comando_BindVarInt(lComando, viItem)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129808
    
    lErro = Comando_BindVarInt(lComando, vsProduto)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129809
    
    lErro = Comando_BindVarInt(lComando, vsDescProd)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129810
    
    lErro = Comando_BindVarInt(lComando, vsUM)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129811
    
    lErro = Comando_BindVarInt(lComando, viCondPagto)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129812
    
    lErro = Comando_BindVarInt(lComando, viPeriodicidade)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129813
    
    lErro = Comando_BindVarInt(lComando, vdtIniCobr)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129814
    
    lErro = Comando_BindVarInt(lComando, vdtProxCobr)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129815
    
    lErro = Comando_BindVarInt(lComando, vdValor)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129816
    
    lErro = Comando_BindVarInt(lComando, vlMedicao)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129817
       
    lErro = Comando_BindVarInt(lComando, vdtRefIni)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129818
    
    lErro = Comando_BindVarInt(lComando, vdtRefFim)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129818
    
    lErro = Comando_BindVarInt(lComando, vdQtd)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129819
    
    lErro = Comando_BindVarInt(lComando, vdCusto)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129820
    
    lErro = Comando_BindVarInt(lComando, vdVlrCobrar)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129821
        
    lErro = Comando_BindVarInt(lComando, vsNaturezaOP)
    If (lErro <> AD_SQL_SUCESSO) Then gError 132838
   
    lErro = Comando_BindVarInt(lComando, viTipoTributacao)
    If (lErro <> AD_SQL_SUCESSO) Then gError 132839
   
    lErro = Comando_BindVarInt(lComando, viRecibo)
    If (lErro <> AD_SQL_SUCESSO) Then gError 132839
   
    lErro = Comando_BindVarInt(lComando, vsSerie)
    If (lErro <> AD_SQL_SUCESSO) Then gError 132839
   
    lErro = Comando_BindVarInt(lComando, viFilialEmpresa)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129822
    
    lErro = Comando_BindVarInt(lComando, vdtCobrI)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129823
    
    lErro = Comando_BindVarInt(lComando, vdtCobrF)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129824
        
    lErro = Comando_BindVarInt(lComando, viTipo)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129824
   
    If vsContratoIni <> "" Then
        lErro = Comando_BindVarInt(lComando, vsContratoIni)
        If (lErro <> AD_SQL_SUCESSO) Then gError 129884
    End If

    If vsContratoFim <> "" Then
        lErro = Comando_BindVarInt(lComando, vsContratoFim)
        If (lErro <> AD_SQL_SUCESSO) Then gError 129885
    End If

    If vlClienteIni <> 0 Then
        lErro = Comando_BindVarInt(lComando, vlClienteIni)
        If (lErro <> AD_SQL_SUCESSO) Then gError 129886
    End If

    If vlClienteFim <> 0 Then
        lErro = Comando_BindVarInt(lComando, vlClienteFim)
        If (lErro <> AD_SQL_SUCESSO) Then gError 129887
    End If
    
    lErro = Comando_BindVarInt(lComando, viFilialEmpresa)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129888
    
    lErro = Comando_BindVarInt(lComando, vdtCobrI)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129889
    
    lErro = Comando_BindVarInt(lComando, vdtCobrF)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129890
     
    '###############################
    'Inserido por Wagner
    'Inserido 09/06/05
    lErro = Comando_BindVarInt(lComando, vdtDataNula)
    If (lErro <> AD_SQL_SUCESSO) Then gError 136669
    '################################
    
    lErro = Comando_BindVarInt(lComando, viTipo)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129824
    
    If vsContratoIni <> "" Then
        lErro = Comando_BindVarInt(lComando, vsContratoIni)
        If (lErro <> AD_SQL_SUCESSO) Then gError 129891
    End If

    If vsContratoFim <> "" Then
        lErro = Comando_BindVarInt(lComando, vsContratoFim)
        If (lErro <> AD_SQL_SUCESSO) Then gError 129892
    End If

    If vlClienteIni <> 0 Then
        lErro = Comando_BindVarInt(lComando, vlClienteIni)
        If (lErro <> AD_SQL_SUCESSO) Then gError 129893
    End If

    If vlClienteFim <> 0 Then
        lErro = Comando_BindVarInt(lComando, vlClienteFim)
        If (lErro <> AD_SQL_SUCESSO) Then gError 129894
    End If
    
    lErro = Comando_ExecutarInt(lComando)
    If (lErro <> AD_SQL_SUCESSO) Then gError 129895

    NFiscalContratoInt_Prepara = SUCESSO

    Exit Function

Erro_NFiscalContratoInt_Prepara:

    NFiscalContratoInt_Prepara = gErr

    Select Case gErr

        Case 129800 To 129824, 129882 To 129895, 132839, 136669
            Call Rotina_Erro(vbOKOnly, "ERRO_PREPARACAO_COMANDO_SQL", gErr, sSQL)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150003)

    End Select

    Exit Function

End Function

Public Function NFiscalContrato_Prepara(lNumIntRel As Long, ByVal objGeracaoFatContrato As ClassGeracaoFatContrato) As Long

Dim lErro As Long
Dim lTransacao As Long
Dim alComando(1 To 2) As Long
Dim iIndice As Integer
Dim iTotal As Integer
Dim iTotalItens As Integer
Dim iSeqNfiscal As Integer
Dim iSeq As Integer
Dim objContratoFat As ClassContratoFat
Dim objContratoFatItens As ClassContratoFatItens

Dim objNFiscal As ClassNFiscal, iTemp As Integer
Dim objItemNF As ClassItemNF
Dim objContabil As ClassContabil
Dim dValorTotal As Double, objTribTab As ClassTribTab
Dim objTipoDocInfo As New ClassTipoDocInfo, dValorLiquido As Double
Dim iItem As Integer

Dim objItemMedicao As ClassItensMedCtr
Dim colContFatItensAgrupado As New Collection
Dim objContFatItensAux1 As ClassContratoFatItens
Dim objContFatItensAux2 As ClassContratoFatItens
Dim iIndice1 As Integer
Dim iIndice2 As Integer
Dim dQuantidade As Double
Dim dCusto As Double
Dim dValor As Double
Dim bAchou As Boolean
Dim colMedicoes As Collection
Dim colcolMedicoes As New Collection

On Error GoTo Erro_NFiscalContrato_Prepara

    'Abrir comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 129179
    Next
    
    'Abre a transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 129180

    'Lê o número do Relatório
    lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_PROX_REL_CONTRATOPREVFATURA", lNumIntRel)
    If lErro <> SUCESSO Then gError 129181
    
    'Lê o Tipo de Documento
    objTipoDocInfo.iCodigo = objGeracaoFatContrato.iTipoNFiscal
    lErro = CF("TipoDocInfo_Le_Codigo", objTipoDocInfo)
    If lErro <> SUCESSO And lErro <> 31415 Then gError 130023

    'se não estiver cadastrado ==> erro
    If lErro = 31415 Then gError 130024
    
    'Lê a Serie Padrão
    lErro = CF("NFiscalContrato_Le", objGeracaoFatContrato, iTotalItens, iTotal)
    If lErro <> SUCESSO Then gError 129182
    
    For Each objContratoFat In objGeracaoFatContrato.colItens
                      
        Set colcolMedicoes = New Collection
        Set colContFatItensAgrupado = New Collection
                      
        Set objNFiscal = New ClassNFiscal
        Call objNFiscal.objTributacaoNF.Coloca_Auto
                
        dValorTotal = 0
                
        Call objNFiscal.Inicializa_Tributacao
        
        objNFiscal.iCondicaoPagto = objContratoFat.iCondPagto
        objNFiscal.iFilialCli = objContratoFat.iFilCli
        objNFiscal.lCliente = objContratoFat.lCliente
        objNFiscal.dtDataReferencia = objGeracaoFatContrato.dtDataRefVencimento
        objNFiscal.dtDataEmissao = objGeracaoFatContrato.dtDataEmissao
        objNFiscal.dtDataSaida = objGeracaoFatContrato.dtDataEmissao
        objNFiscal.dtDataEntrada = DATA_NULA
        objNFiscal.dtDataVencimento = DATA_NULA
        objNFiscal.iFilialEmpresa = objGeracaoFatContrato.iFilialEmpresa
        objNFiscal.iFilialEntrega = objContratoFat.iFilCli
        objNFiscal.dtDataEmissao = objGeracaoFatContrato.dtDataEmissao
        objNFiscal.sSerie = objContratoFat.sSerie
        objNFiscal.sNaturezaOp = objContratoFat.sNaturezaOp
        objNFiscal.iTipoDocInfo = objGeracaoFatContrato.iTipoNFiscal
        objNFiscal.iTipoNFiscal = objGeracaoFatContrato.iTipoNFiscal
        objNFiscal.iStatus = STATUS_LANCADO
        
        If Len(Trim(objContratoFat.sNaturezaOp)) <> 0 Then
            objNFiscal.sNaturezaOp = objContratoFat.sNaturezaOp
            objNFiscal.objTributacaoNF.sNaturezaOpInterna = objContratoFat.sNaturezaOp
            objNFiscal.objTributacaoNF.iNaturezaOpManual = VAR_PREENCH_MANUAL
        End If
        
        If objContratoFat.iTipoTributacao <> 0 Then
            objNFiscal.objTributacaoNF.iTipoTributacao = objContratoFat.iTipoTributacao
            objNFiscal.objTributacaoNF.iTipoTributacaoManual = VAR_PREENCH_MANUAL
        End If
        
        iItem = 0
        iIndice1 = 0
        
        'Agrupa itens
        For Each objContFatItensAux1 In objContratoFat.colItens
        
            iIndice1 = iIndice1 + 1
            iIndice2 = 0
            dQuantidade = 0
            dValor = 0
            dCusto = 0
            
            bAchou = False
            
            Set colMedicoes = New Collection

            For Each objContFatItensAux2 In colContFatItensAgrupado
                If objContFatItensAux1.sProduto = objContFatItensAux2.sProduto Then
                    bAchou = True
                    Exit For
                End If
            Next
            
            If Not bAchou Then
            
                'Soma os itens iguais
                For Each objContFatItensAux2 In objContratoFat.colItens
                    
                    iIndice2 = iIndice2 + 1
                
                    If iIndice1 <> iIndice2 Then
                        If objContFatItensAux1.sProduto = objContFatItensAux2.sProduto Then
                            dQuantidade = dQuantidade + objContFatItensAux2.dQuantidade
                            dValor = dValor + objContFatItensAux2.dVlrCobrar
                            dCusto = dCusto + objContFatItensAux2.dCusto
                            
                            If objContFatItensAux2.lMedicao <> 0 Then
                            
                                Set objItemMedicao = New ClassItensMedCtr
                            
                                objItemMedicao.lNumIntItensContrato = objContFatItensAux2.lNumIntItensContrato
                                objItemMedicao.iItem = objContFatItensAux2.iItem
                                objItemMedicao.lMedicao = objContFatItensAux2.lMedicao
                                objItemMedicao.dtDataCobranca = objContFatItensAux2.dtDataProxCobranca
                                objItemMedicao.dtDataRefIni = objContFatItensAux2.dtDataRefIni
                                objItemMedicao.dtDataRefFim = objContFatItensAux2.dtDataRefFim
                                
                                colMedicoes.Add objItemMedicao
                            
                            End If
                            
                        End If
                    End If
                
                Next
                
                If objContFatItensAux1.lMedicao <> 0 Then
                
                    Set objItemMedicao = New ClassItensMedCtr
                
                    objItemMedicao.lNumIntItensContrato = objContFatItensAux1.lNumIntItensContrato
                    objItemMedicao.iItem = objContFatItensAux1.iItem
                    objItemMedicao.lMedicao = objContFatItensAux1.lMedicao
                    objItemMedicao.dtDataCobranca = objContFatItensAux1.dtDataProxCobranca
                    objItemMedicao.dtDataRefIni = objContFatItensAux1.dtDataRefIni
                    objItemMedicao.dtDataRefFim = objContFatItensAux1.dtDataRefFim
                    
                    colMedicoes.Add objItemMedicao
                
                End If
                
                objContFatItensAux1.dCusto = objContFatItensAux1.dCusto + dCusto
                objContFatItensAux1.dQuantidade = objContFatItensAux1.dQuantidade + dQuantidade
                objContFatItensAux1.dVlrCobrar = objContFatItensAux1.dVlrCobrar + dValor
                
                colContFatItensAgrupado.Add objContFatItensAux1
                colcolMedicoes.Add colMedicoes
                
            End If
        
        Next
        
        For Each objContratoFatItens In colContFatItensAgrupado
                  
            iItem = iItem + 1
        
            Set objItemNF = New ClassItemNF
            Call objItemNF.Inicializa_Tributacao
            Call objItemNF.objTributacaoItemNF.Coloca_Auto
            
            objItemNF.dCusto = objContratoFatItens.dCusto
            objItemNF.dQuantidade = objContratoFatItens.dQuantidade
            objItemNF.dPrecoUnitario = objContratoFatItens.dVlrCobrar / objContratoFatItens.dQuantidade
            objItemNF.dValorTotal = objContratoFatItens.dVlrCobrar
            objItemNF.sCcl = objContratoFatItens.sCcl
            objItemNF.sDescricaoItem = objContratoFatItens.sDescProd
            objItemNF.sProduto = objContratoFatItens.sProduto
            objItemNF.iItem = iItem
            objItemNF.sUnidadeMed = objContratoFatItens.sUM
        
            objItemNF.objCobrItensContrato.lNumIntItensContrato = objContratoFatItens.lNumIntItensContrato
            objItemNF.objCobrItensContrato.dtDataUltCobranca = objContratoFatItens.dtDataProxCobranca
            objItemNF.objCobrItensContrato.lNumIntDocCobranca = objGeracaoFatContrato.lNumIntDoc
            objItemNF.objCobrItensContrato.dtDataRefIni = objContratoFatItens.dtDataRefIni
            objItemNF.objCobrItensContrato.dtDataRefFim = objContratoFatItens.dtDataRefFim
            
            Set objItemNF.objCobrItensContrato.colMedicoes = colcolMedicoes.Item(iItem)
        
            dValorTotal = dValorTotal + objItemNF.dValorTotal
        
            objNFiscal.colItensNF.Add1 objItemNF
        
            If Len(Trim(objContratoFatItens.sNaturezaOp)) <> 0 Then
                objItemNF.objTributacaoItemNF.sNaturezaOp = objContratoFatItens.sNaturezaOp
                objItemNF.objTributacaoItemNF.iNaturezaOpManual = VAR_PREENCH_MANUAL
            Else
                If Len(Trim(objContratoFat.sNaturezaOp)) <> 0 Then
                    objItemNF.objTributacaoItemNF.sNaturezaOp = objContratoFat.sNaturezaOp
                    objItemNF.objTributacaoItemNF.iNaturezaOpManual = VAR_PREENCH_MANUAL
                End If
            End If
            
            If objContratoFatItens.iTipoTributacao <> 0 Then
                objItemNF.objTributacaoItemNF.iTipoTributacao = objContratoFatItens.iTipoTributacao
                objItemNF.objTributacaoItemNF.iTipoTributacaoManual = VAR_PREENCH_MANUAL
            Else
                If objContratoFat.iTipoTributacao <> 0 Then
                    objItemNF.objTributacaoItemNF.iTipoTributacao = objContratoFat.iTipoTributacao
                    objItemNF.objTributacaoItemNF.iTipoTributacaoManual = VAR_PREENCH_MANUAL
                End If
            End If
            
        Next
        
        objNFiscal.dValorProdutos = dValorTotal
        
        Set objTribTab = New ClassTribTab
        
        lErro = objTribTab.TributacaoNF_Reset(objNFiscal)
        If lErro <> SUCESSO Then gError 130020
        
        'obtem dados do contrato
        Call objTribTab.TipoNFiscal_Definir(objTipoDocInfo.iCodigo, objTipoDocInfo.sSigla)
        Call objTribTab.DataEmissao_Alterada(objGeracaoFatContrato.dtDataEmissao)
        Call objTribTab.Serie_Alterada(objNFiscal.sSerie)
        
        lErro = gobjTributacao.AtualizaImpostos(objTribTab.mvarobjNFTributacao, 0)
        If lErro <> SUCESSO Then gError 130021
        
        lErro = objTribTab.PreencherNF(objNFiscal)
        If lErro <> SUCESSO Then gError 130022
        
        Set objTribTab = Nothing
        
        objNFiscal.sNaturezaOp = objNFiscal.objTributacaoNF.sNaturezaOpInterna
        
        'acertar valor total e da parcela, considerando os tributos, retencóes,...
        objNFiscal.dValorTotal = dValorTotal + objNFiscal.objTributacaoNF.dICMSSubstValor + objNFiscal.objTributacaoNF.dIPIValor + objNFiscal.dValorFrete + objNFiscal.dValorSeguro + objNFiscal.dValorOutrasDespesas + IIf(objNFiscal.objTributacaoNF.iISSIncluso = 0, objNFiscal.objTributacaoNF.dISSValor, 0)

        objContratoFat.dValor = objNFiscal.dValorTotal

        iSeqNfiscal = iSeqNfiscal + 1
        iSeq = 0
        
        'Insere a Capa da NotaFiscal
        lErro = Comando_Executar(alComando(1), "INSERT INTO RelContratoNFiscal (NumIntRel, Seq, FilialEmpresa, Contrato, CondicaoPagto,FilialCli,Cliente,DataReferencia,TipoDocInfo,Serie,NaturezaOp,TipoTributacao,ValorNF) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?) ", _
                                                lNumIntRel, iSeqNfiscal, objGeracaoFatContrato.iFilialEmpresa, objContratoFat.sContrato, objContratoFat.iCondPagto, objContratoFat.iFilCli, objContratoFat.lCliente, objGeracaoFatContrato.dtDataRefVencimento, _
                                                objGeracaoFatContrato.iTipoNFiscal, objContratoFat.sSerie, objContratoFat.sNaturezaOp, objContratoFat.iTipoTributacao, objContratoFat.dValor)
        If lErro <> AD_SQL_SUCESSO Then gError 129183

        For Each objContratoFatItens In colContFatItensAgrupado
        
            iSeq = iSeq + 1
    
            'Para cada Item Insere
            lErro = Comando_Executar(alComando(2), "INSERT INTO RelContratoNFiscalItens(NumIntRel,SeqNFiscal, Seq, Custo,ValorTotal,Ccl,DescricaoItem,Produto,UM,PrecoUnitario,Quantidade,NaturezaOP,DataRefIni,DataRefFim,DataCobranca) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                                       lNumIntRel, iSeqNfiscal, iSeq, objContratoFatItens.dCusto, objContratoFatItens.dVlrCobrar, objContratoFatItens.sCcl, left(objContratoFatItens.sDescProd, 50), objContratoFatItens.sProduto, _
                                       objContratoFatItens.sUM, objContratoFatItens.dValor, objContratoFatItens.dQuantidade, objContratoFatItens.sNaturezaOp, objContratoFatItens.dtDataRefIni, objContratoFatItens.dtDataRefFim, objContratoFatItens.dtDataProxCobranca)
            If lErro <> AD_SQL_SUCESSO Then gError 129184
     
        Next
    
    Next
   
    'Confirma transação
    lErro = Transacao_Commit
    If lErro <> AD_SQL_SUCESSO Then gError 129186

    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    NFiscalContrato_Prepara = SUCESSO

    Exit Function

Erro_NFiscalContrato_Prepara:

    NFiscalContrato_Prepara = gErr

    Select Case gErr

        Case 129179
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 129180
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 129181, 129182, 129185, 130020 To 130023
        
        Case 129183
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_RELCONTRATONFISCAL", gErr)
        
        Case 129184
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_RELCONTRATONFISCALITENS", gErr)
        
        Case 129186
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT_TRANSACAO", gErr)
        
        Case 130024
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPO_NFISCAL_NAO_CADASTRADO", gErr, objTipoDocInfo.iCodigo)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150004)

    End Select

    'Rollback
    Call Transacao_Rollback
    
    'Fecha o Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function NFiscalContrato_Le(ByVal objGeracaoFatContrato As ClassGeracaoFatContrato, iTotalItensNFs As Integer, iTotalNFs As Integer) As Long

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim sSQL As String
Dim iIndice As Integer

'Variáveis Auxiliares
Dim iCondPagtoAux As Integer
Dim sContratoAux As String

'Variáveis de retorno de dados do BD
Dim lNumIntContrato As Long
Dim sContrato  As String
Dim sDescContrato  As String
Dim lCliente  As Long
Dim iFilCli  As Integer
Dim sCcl As String
Dim lNumIntItensContrato As Long
Dim sProduto  As String
Dim sDescProd  As String
Dim sUM  As String
Dim iCondPagto  As Integer
Dim iPeriodicidade  As Integer
Dim dtDataIniCobranca  As Date
Dim dtDataProxCobranca  As Date
Dim dValor As Double
Dim lMedicao As Long
Dim dQuantidade  As Double
Dim dCusto  As Double
Dim dVlrCobrar As Double
Dim iItem As Integer
Dim iTipoTributacao As Integer
Dim iRecibo As Integer
Dim sNaturezaOp As String
Dim dtDataRefIni As Date
Dim dtDataRefFim As Date

Dim sSeriePadrao As String
Dim sSerie As String

Dim objContratoFat As ClassContratoFat
Dim objContratoFatItens As ClassContratoFatItens
Dim objTipoDocInfo As New ClassTipoDocInfo

On Error GoTo Erro_NFiscalContrato_Le

    'Abrir comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 129187
    Next
   
    'Lê a Serie Padrão
    lErro = CF("Serie_Le_Padrao", sSeriePadrao)
    If lErro <> SUCESSO Then gError 129188

    objTipoDocInfo.iCodigo = objGeracaoFatContrato.iTipoNFiscal
    
    'Buscar a NarurezaOpPadrão
    lErro = CF("TipoDocInfo_Le_Codigo", objTipoDocInfo)
    If lErro <> SUCESSO Then gError 129189
       
    'Monta o Select
    Call NFiscalContratoSQL_Prepara(objGeracaoFatContrato, sSQL)

    'Aloca espaço suficiente para o retorno dos dados do BD
    sContrato = String(STRING_CONTRATO_CODIGO, 0)
    sDescContrato = String(STRING_CONTRATO_DESCRICAO, 0)
    sCcl = String(STRING_CONTRATO_CCL, 0)
    sProduto = String(STRING_PRODUTO, 0)
    sDescProd = String(STRING_ITEMNF_DESCRICAO, 0)
    sUM = String(STRING_UM_SIGLA, 0)
    sNaturezaOp = String(STRING_NATUREZAOP_CODIGO, 0)
    sSerie = String(STRING_SERIE, 0)

    'Passa os Binds
    lErro = NFiscalContratoInt_Prepara(alComando(1), lNumIntContrato, sContrato, sDescContrato, lCliente, iFilCli, sCcl, lNumIntItensContrato, iItem, sProduto, sDescProd, sUM, iCondPagto, iPeriodicidade, dtDataIniCobranca, dtDataProxCobranca, dValor, lMedicao, dtDataRefIni, dtDataRefFim, dQuantidade, dCusto, dVlrCobrar, sNaturezaOp, iTipoTributacao, iRecibo, sSerie, objGeracaoFatContrato.lClienteIni, objGeracaoFatContrato.lClienteFim, objGeracaoFatContrato.sContratoIni, objGeracaoFatContrato.sContratoFim, objGeracaoFatContrato.iFilialEmpresa, objGeracaoFatContrato.dtDataCobrIni, objGeracaoFatContrato.dtDataCobrFim, CONTRATOS_RECEBER, sSQL)
    If lErro <> AD_SQL_SUCESSO Then gError 129190

    iTotalItensNFs = 0
    iTotalNFs = 0

    'Busca primeiro Item
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 129191
      
    Do While lErro = AD_SQL_SUCESSO
                                   
        'Verifica se houve troca das Informações contidas na capa da NotaFiscal
        If sContratoAux <> sContrato Or iCondPagtoAux <> iCondPagto Or lErro = AD_SQL_SEM_DADOS Then
                        
            Set objContratoFat = New ClassContratoFat
            
            objContratoFat.dtDataRef = objGeracaoFatContrato.dtDataRefVencimento
            objContratoFat.iCondPagto = iCondPagto
            objContratoFat.iFilCli = iFilCli
            objContratoFat.lCliente = lCliente
            
            If Len(Trim(sNaturezaOp)) = 0 Then
                objContratoFat.sNaturezaOp = ""
            Else
                objContratoFat.sNaturezaOp = sNaturezaOp
            End If
            objContratoFat.iTipoTributacao = iTipoTributacao
            objContratoFat.iRecibo = iRecibo
            
            If Len(Trim(sSerie)) = 0 Then
                objContratoFat.sSerie = sSeriePadrao
            Else
                objContratoFat.sSerie = sSerie
            End If
            objContratoFat.sContrato = sContrato
            
            sContratoAux = sContrato
            iCondPagtoAux = iCondPagto
                        
        End If
        
        Set objContratoFatItens = New ClassContratoFatItens
        
        objContratoFatItens.dCusto = dCusto
        objContratoFatItens.dQuantidade = dQuantidade
        objContratoFatItens.dValor = dValor
        objContratoFatItens.dVlrCobrar = dVlrCobrar
        objContratoFatItens.iItem = iItem
        objContratoFatItens.sCcl = sCcl
        objContratoFatItens.sDescProd = sDescProd
        objContratoFatItens.sProduto = sProduto
        objContratoFatItens.lMedicao = lMedicao
        objContratoFatItens.lNumIntItensContrato = lNumIntItensContrato
        objContratoFatItens.sUM = sUM
        objContratoFatItens.dtDataProxCobranca = dtDataProxCobranca
        objContratoFatItens.sNaturezaOp = objContratoFat.sNaturezaOp
        objContratoFatItens.dtDataRefIni = dtDataRefIni
        objContratoFatItens.dtDataRefFim = dtDataRefFim
                   
        objContratoFat.colItens.Add objContratoFatItens
        iTotalItensNFs = iTotalItensNFs + 1
                   
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 129192
            
        'Verifica se houve troca das Informações contidas na capa da NotaFiscal
        If lErro = AD_SQL_SEM_DADOS Or (sContratoAux <> sContrato Or iCondPagtoAux <> iCondPagto) Then
            objGeracaoFatContrato.colItens.Add objContratoFat
            iTotalNFs = iTotalNFs + 1
        End If
    
    Loop

    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    NFiscalContrato_Le = SUCESSO

    Exit Function

Erro_NFiscalContrato_Le:

    NFiscalContrato_Le = gErr

    Select Case gErr

        Case 129187
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 129188 To 129192

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150005)

    End Select

    'Fecha o Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

'#################################################
'Inserido por Wagner
Public Function Contrato_Grava_RelErro(ByVal objContratoFat As ClassContratoFat) As Long
'Grava um relatório de erros de Notas fiscais geradas por contratos

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer, lTransacao As Long
Dim lNumIntProx As Long

On Error GoTo Erro_Contrato_Grava_RelErro

    'Abrir comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 136000
    Next
    
    'Abre Transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 130395
    
    'Obtém o próximo número interno
    lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_PROX_COBRANCACONTRATO", lNumIntProx)
    If lErro <> SUCESSO Then gError 136001
   
    'Insere item
    lErro = Comando_Executar(alComando(1), "INSERT INTO FaturamentoContratosRelErros (NumIntDoc, Contrato, FilialEmpresa, Serie, NaturezaOP, TipoTributacao, DataReferencia, CondPagto,TipoErro,Valor,NumNotaFiscal, NumIntDocCobranca) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) ", _
                                        lNumIntProx, objContratoFat.sContrato, objContratoFat.iFilialEmpresa, objContratoFat.sSerie, objContratoFat.sNaturezaOp, objContratoFat.iTipoTributacao, objContratoFat.dtDataRef, objContratoFat.iCondPagto, objContratoFat.iTipoErro, objContratoFat.dValor, objContratoFat.lNumNotaFiscal, objContratoFat.lNumIntDocCobranca)
    If lErro <> AD_SQL_SUCESSO Then gError 136002

    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 130396
 
    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Contrato_Grava_RelErro = SUCESSO

    Exit Function

Erro_Contrato_Grava_RelErro:

    Contrato_Grava_RelErro = gErr

    Select Case gErr
    
        Case 136000
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 136001
        
        Case 136002
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FATCONTERROS", gErr)

        Case 130395
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 130396
             Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150006)

    End Select

    'Desfaz as alterações
    Call Transacao_Rollback
    
    'Fecha o Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function CobrancaContrato_Grava(ByVal objGeracaoFatContrato As ClassGeracaoFatContrato) As Long
'Grava os dados utilizados para faturar contratos a receber

Dim lErro As Long
Dim alComando(1 To 2) As Long
Dim lTransacao As Long
Dim iIndice As Integer
Dim lNumProx As Long

On Error GoTo Erro_CobrancaContrato_Grava

    'Abre Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 132975
    Next

    'Abre Transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 132976
    
    'Busca próximo identificador
    lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_PROX_COBRANCACONTRATO", lNumProx)
    If lErro <> SUCESSO Then gError 132977
    
    objGeracaoFatContrato.lNumIntDoc = lNumProx

    'Insere
    lErro = Comando_Executar(alComando(1), "INSERT INTO CobrancaContrato( NumIntDoc, DataCobrIni, " & _
                "DataCobrFim, Usuario, DataGeracao, ClienteIni, ClienteFim, " & _
                "ContratoIni, ContratoFim, DataEmissao, DataRefVencimento, FilialEmpresa, " & _
                "TipoNFiscal) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                objGeracaoFatContrato.lNumIntDoc, objGeracaoFatContrato.dtDataCobrIni, _
                objGeracaoFatContrato.dtDataCobrFim, objGeracaoFatContrato.sUsuario, objGeracaoFatContrato.dtDataGeracao, objGeracaoFatContrato.lClienteIni, objGeracaoFatContrato.lClienteFim, _
                objGeracaoFatContrato.sContratoIni, objGeracaoFatContrato.sContratoFim, objGeracaoFatContrato.dtDataEmissao, objGeracaoFatContrato.dtDataRefVencimento, objGeracaoFatContrato.iFilialEmpresa, _
                objGeracaoFatContrato.iTipoNFiscal)
    If lErro <> AD_SQL_SUCESSO Then gError 132978
    
    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 132979
 
    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    CobrancaContrato_Grava = SUCESSO

    Exit Function

Erro_CobrancaContrato_Grava:

    CobrancaContrato_Grava = gErr

        Select Case gErr

        Case 132975
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 132976
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 132977
        
        Case 132978
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_COBRANCACONTRATO", gErr)

        Case 132979
             Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150007)

    End Select

    'Desfaz as alterações
    Call Transacao_Rollback
    
    'Fecha comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Function NFiscal_Exclui_ContratoCobranca(ByVal lNumIntItem As Long, Optional ByVal bExclui As Boolean = True) As Long
'Exclui o Link entre o contrato e a NF quando essa é excluida
'No cancelamento vai manter a informação, só vai decrescentar a parcela

Dim alComando(1 To 5) As Long
Dim lErro As Long
Dim iIndice As Integer
Dim lNumIntDoc As Long
Dim lNumIntDocItem As Long

On Error GoTo Erro_NFiscal_Exclui_ContratoCobranca

    'Abre comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 132992
    Next
    
    lNumIntDocItem = 0
    
    'Le o item posicionando o cursor
    lErro = Comando_ExecutarPos(alComando(4), "SELECT NumIntItensContrato FROM ItensDeMedicaoCobranca WHERE NumIntItemNFiscal = ? ", 0, lNumIntDoc, lNumIntItem)
    If lErro <> AD_SQL_SUCESSO Then gError 132993

    'Busca o item
    lErro = Comando_BuscarPrimeiro(alComando(4))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 132994

    'Se encontrar
    Do While lErro <> AD_SQL_SEM_DADOS
           
        lNumIntDocItem = lNumIntDoc
     
        If bExclui Then
        
            'Bloqueia o registro contra Alterações/Leituras
            lErro = Comando_LockExclusive(alComando(4))
            If lErro <> SUCESSO Then gError 132995
        
            'Exclui o item de medição de contrato cobrança
            lErro = Comando_ExecutarPos(alComando(5), "DELETE FROM ItensDeMedicaoCobranca", alComando(4))
            If lErro <> AD_SQL_SUCESSO Then gError 132996
        
        End If
        
        'Busca o item
        lErro = Comando_BuscarProximo(alComando(4))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 136004
    
    Loop

    'Le o item posicionando o cursor
    lErro = Comando_ExecutarPos(alComando(1), "SELECT NumIntItensContrato FROM ItensDeContratoCobranca WHERE NumIntItemNFiscal = ? ", 0, lNumIntDoc, lNumIntItem)
    If lErro <> AD_SQL_SUCESSO Then gError 132997

    'Busca o item
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 132998

    'Se encontrar
    Do While lErro <> AD_SQL_SEM_DADOS
            
        lNumIntDocItem = lNumIntDoc
        
        If bExclui Then
        
            'Bloqueia o registro contra Alterações/Leituras
            lErro = Comando_LockExclusive(alComando(1))
            If lErro <> SUCESSO Then gError 132999
        
            'Exclui o item de contrato cobrança
            lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM ItensDeContratoCobranca", alComando(1))
            If lErro <> AD_SQL_SUCESSO Then gError 132989
            
        End If
        
        'Busca o item
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 136005
    
    Loop
    
    If lNumIntDocItem <> 0 Then
        
        'Atualiza a data da próxima cobrança
        lErro = Comando_Executar(alComando(3), "UPDATE ItensDeContrato SET UltParcCobrada = UltParcCobrada - 1 WHERE NumIntDoc = ? AND UltParcCobrada > 0", lNumIntDocItem)
        If lErro <> AD_SQL_SUCESSO Then gError 209827
    
    End If
    
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    NFiscal_Exclui_ContratoCobranca = SUCESSO

    Exit Function

Erro_NFiscal_Exclui_ContratoCobranca:

    NFiscal_Exclui_ContratoCobranca = gErr

    Select Case gErr
    
        Case 132989
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_ITEMCONTRATOCOBRANCA", gErr)

        Case 132992
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 132993, 132994, 136004
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITEMMEDICAOCOBRANCA", gErr)
            
        Case 132995
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_ITEMMEDICAOCOBRANCA", gErr)

        Case 132996
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_ITEMMEDICAOCOBRANCA", gErr)
            
        Case 132997, 132998, 136005
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITEMCONTRATOCOBRANCA", gErr)
        
        Case 132999
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_ITEMCONTRATOCOBRANCA", gErr)
        
        Case 209827
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_CONTRATO", gErr, lNumIntDocItem)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150008)

    End Select

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

'#################################################


Function Contrato_ProxCobranca(ByVal iPeriodicidade As Integer, ByVal dtDataUltCobranca As Date, ByVal dtRefIni As Date, dtDataProxCobranca As Date, dtRefFim As Date) As Long

On Error GoTo Erro_Contrato_ProxCobranca

    'Soma o período a data da última cobrança
    Select Case iPeriodicidade
    
        Case PERIODICIDADE_LIVRE
            dtDataProxCobranca = dtDataUltCobranca
            dtRefFim = dtRefIni
        
        Case PERIODICIDADE_SEMANAL
            dtDataProxCobranca = DateAdd("d", 7, dtDataUltCobranca)
            dtRefFim = DateAdd("d", 7, dtRefIni)
            dtRefFim = DateAdd("d", -1, dtRefFim)
        
        Case PERIODICIDADE_DECENDIAL
            dtDataProxCobranca = DateAdd("d", 10, dtDataUltCobranca)
            dtRefFim = DateAdd("d", 10, dtRefIni)
            dtRefFim = DateAdd("d", -1, dtRefFim)
        
        Case PERIODICIDADE_QUINZENAL
            dtDataProxCobranca = DateAdd("d", 15, dtDataUltCobranca)
            dtRefFim = DateAdd("d", 15, dtRefIni)
            dtRefFim = DateAdd("d", -1, dtRefFim)
        
        Case PERIODICIDADE_MENSAL
            dtDataProxCobranca = DateAdd("m", 1, dtDataUltCobranca)
            dtRefFim = DateAdd("m", 1, dtRefIni)
            dtRefFim = DateAdd("d", -1, dtRefFim)
        
        Case PERIODICIDADE_BIMESTRAL
            dtDataProxCobranca = DateAdd("m", 2, dtDataUltCobranca)
            dtRefFim = DateAdd("m", 2, dtRefIni)
            dtRefFim = DateAdd("d", -1, dtRefFim)
        
        Case PERIODICIDADE_TRIMESTRAL
            dtDataProxCobranca = DateAdd("m", 3, dtDataUltCobranca)
            dtRefFim = DateAdd("m", 3, dtRefIni)
            dtRefFim = DateAdd("d", -1, dtRefFim)
        
        Case PERIODICIDADE_QUADRIMESTRAL
            dtDataProxCobranca = DateAdd("m", 4, dtDataUltCobranca)
            dtRefFim = DateAdd("m", 4, dtRefIni)
            dtRefFim = DateAdd("d", -1, dtRefFim)
        
        Case PERIODICIDADE_SEMESTRAL
            dtDataProxCobranca = DateAdd("m", 6, dtDataUltCobranca)
            dtRefFim = DateAdd("m", 6, dtRefIni)
            dtRefFim = DateAdd("d", -1, dtRefFim)
        
        Case PERIODICIDADE_ANUAL
            dtDataProxCobranca = DateAdd("yyyy", 1, dtDataUltCobranca)
            dtRefFim = DateAdd("yyyy", 1, dtRefIni)
            dtRefFim = DateAdd("d", -1, dtRefFim)
        
        Case Else
            dtDataProxCobranca = dtDataUltCobranca
            dtRefFim = dtRefIni
        
    End Select

    Contrato_ProxCobranca = SUCESSO
    
    Exit Function

Erro_Contrato_ProxCobranca:

    Contrato_ProxCobranca = gErr

    Select Case gErr
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150009)

    End Select

    Exit Function

End Function

Private Function Verifica_Integridade_NFiscal(ByVal objNFiscal As ClassNFiscal) As Long
'verifica se o cliente possui o crédito para faturar a nota fiscal.
'Se tiver atualiza as tabelas de cliente e estatistica de liberacao do usuario
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lErro As Long
Dim objProduto As New ClassProduto
Dim objItemNF As ClassItemNF
Dim dFator As Double
Dim dQuantVendida As Double
Dim iIndice As Integer
Dim alComando(1 To 3) As Long
Dim dQuantRemessa As Double
Dim sUM As String
Dim dQuantDevolvida As Double
Dim dQuantidade As Double
Dim dQuantFaturada As Double

On Error GoTo Erro_Verifica_Integridade_NFiscal

    'Executa a abertura dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 133109
    Next

    'se estiver lidando com uma nota fiscal fatura venda fora do estabelecimento
    'verificar se quantidade remetida - quantidade devolvida - quantidade ja faturada >= quantidade a faturar nesta nota
    If (objNFiscal.iTipoNFiscal = DOCINFO_NFISFVFE Or objNFiscal.iTipoNFiscal = DOCINFO_NFISVFE) And objNFiscal.lNumIntNotaOriginal <> 0 Then

        For Each objItemNF In objNFiscal.colItensNF
        
            dQuantFaturada = 0
            dQuantDevolvida = 0
        
            objProduto.sCodigo = objItemNF.sProduto
            
            'ler dados do produto
            lErro = CF("Produto_Le", objProduto)
            If lErro <> SUCESSO And lErro <> 28030 Then gError 133106
            
            'se o produto não estiver cadastrado
            If lErro = 28030 Then gError 133107
        
            'converter qtde a faturar p/UMEstoque do produto
            lErro = CF("UM_Conversao_Trans", objProduto.iClasseUM, objItemNF.sUnidadeMed, objProduto.sSiglaUMEstoque, dFator)
            If lErro <> SUCESSO Then gError 133108
        
            dQuantVendida = objItemNF.dQuantidade * dFator
            
            sUM = String(STRING_UM_SIGLA, 0)
            
            'Lê a nota fiscal de remessa para venda fora do estabelecimento associada
            lErro = Comando_Executar(alComando(1), "SELECT Quantidade, UnidadeMed FROM ItensNFiscal, NFiscal WHERE NFiscal.NumIntDoc = ItensNFiscal.NumIntNF AND NFiscal.NumIntDoc=? AND ItensNFiscal.Produto=? AND NFiscal.Status <> ?", _
            dQuantRemessa, sUM, objNFiscal.lNumIntNotaOriginal, objItemNF.sProduto, STATUS_CANCELADO)
            If lErro <> AD_SQL_SUCESSO Then gError 133110
            
            lErro = Comando_BuscarPrimeiro(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 133111
        
            'se nao encontrou ==> erro
            If lErro <> AD_SQL_SUCESSO Then gError 133112

            'converter qtde a faturar p/UMEstoque do produto
            lErro = CF("UM_Conversao_Trans", objProduto.iClasseUM, sUM, objProduto.sSiglaUMEstoque, dFator)
            If lErro <> SUCESSO Then gError 133113

            dQuantRemessa = dQuantRemessa * dFator

            sUM = String(STRING_UM_SIGLA, 0)

            'Lê as notas de devolucao associadas a nota fiscal de remessa para venda fora do estabelecimento
            lErro = Comando_Executar(alComando(2), "SELECT Quantidade, UnidadeMed FROM ItensNFiscal, NFiscal WHERE NFiscal.TipoNFiscal = ? AND NFiscal.NumIntDoc = ItensNFiscal.NumIntNF AND NFiscal.NumIntNotaOriginal = ? AND ItensNFiscal.Produto=? AND NFiscal.Status <> ?", _
            dQuantidade, sUM, DOCINFO_NFIEDVRFE, objNFiscal.lNumIntNotaOriginal, objItemNF.sProduto, STATUS_CANCELADO)
            If lErro <> AD_SQL_SUCESSO Then gError 133114
            
            lErro = Comando_BuscarPrimeiro(alComando(2))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 133115

            Do While lErro = AD_SQL_SUCESSO
            
                'converter qtde a faturar p/UMEstoque do produto
                lErro = CF("UM_Conversao_Trans", objProduto.iClasseUM, sUM, objProduto.sSiglaUMEstoque, dFator)
                If lErro <> SUCESSO Then gError 133116
    
                dQuantidade = dQuantidade * dFator
            
                dQuantDevolvida = dQuantDevolvida + dQuantidade
            
                lErro = Comando_BuscarProximo(alComando(2))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 133117
            
            Loop

            sUM = String(STRING_UM_SIGLA, 0)

            'Lê as notas de faturamento associadas a nota fiscal de remessa para venda fora do estabelecimento
            lErro = Comando_Executar(alComando(3), "SELECT Quantidade, UnidadeMed FROM ItensNFiscal, NFiscal WHERE NFiscal.TipoNFiscal = ? AND NFiscal.NumIntDoc = ItensNFiscal.NumIntNF AND NFiscal.NumIntNotaOriginal = ? AND ItensNFiscal.Produto=? AND NFiscal.Status <> ? AND NFiscal.NumIntDoc <> ?", _
            dQuantidade, sUM, DOCINFO_NFISFVFE, objNFiscal.lNumIntNotaOriginal, objItemNF.sProduto, STATUS_CANCELADO, objNFiscal.lNumIntDoc)
            If lErro <> AD_SQL_SUCESSO Then gError 133118
            
            lErro = Comando_BuscarPrimeiro(alComando(3))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 133119

            Do While lErro = AD_SQL_SUCESSO
            
                'converter qtde a faturar p/UMEstoque do produto
                lErro = CF("UM_Conversao_Trans", objProduto.iClasseUM, sUM, objProduto.sSiglaUMEstoque, dFator)
                If lErro <> SUCESSO Then gError 133120
    
                dQuantidade = dQuantidade * dFator
            
                dQuantFaturada = dQuantFaturada + dQuantidade
            
                lErro = Comando_BuscarProximo(alComando(3))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 133121
            
            Loop

            'se a quantidade remetida menos a devolvida e ja faturada forem menores que a quantidade vendida ==> erro
            If dQuantRemessa - dQuantDevolvida - dQuantFaturada < dQuantVendida Then gError 133122

        Next

    End If
        
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
        
    Verifica_Integridade_NFiscal = SUCESSO
    
    Exit Function
    
Erro_Verifica_Integridade_NFiscal:

    Verifica_Integridade_NFiscal = gErr
    
    Select Case gErr

        Case 133106, 133108, 133113, 133116, 133120

        Case 133107
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_INEXISTENTE", gErr, objProduto.sCodigo)

        Case 133109
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 133110, 133111, 133114, 133115, 133117, 133118, 133119, 133121
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSNFISCAL1", gErr)

        Case 133112
            Call Rotina_Erro(vbOKOnly, "ERRO_ITEMNF_INEXISTENTE", gErr)

        Case 133122
            Call Rotina_Erro(vbOKOnly, "ERRO_QUANT_EXCEDE_REMVFE", gErr, objItemNF.sProduto, dQuantRemessa, dQuantDevolvida, dQuantFaturada, dQuantVendida)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 150010)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

'#################################################

'Inserido por Jorge Specian - 23/05/2005
'---------------------------------------
Function Projeto_Automatico(lCodigo As Long) As Long
'Obtem o próximo número de Projeto

Dim lErro As Long, lNumAuto As Long

On Error GoTo Erro_Projeto_Automatico

    'seleciona o codigo no bd e verifica se já existe
    lErro = CF("Config_ObterAutomatico", "FATConfig", "NUM_PROX_PROJETO", "Projeto", "Codigo", lNumAuto)
    If lErro <> SUCESSO And lErro <> 25191 Then gError 139169

    lCodigo = lNumAuto

    Projeto_Automatico = SUCESSO

    Exit Function

Erro_Projeto_Automatico:

    Projeto_Automatico = gErr

   Select Case gErr

        'Erro já tratado
        Case 139169

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150011)

    End Select

    Exit Function

End Function

Function Serie_Grava_Trans_Aux(ByVal objSerie As ClassSerie, ByVal iMaxLinhasNF As Integer) As Long
'apenas para permitir customizacao

    Serie_Grava_Trans_Aux = SUCESSO

End Function

'###############################################
'Inserido por Wagner
Public Function NF_Valida_Data_Vencimento(ByVal dtDataVencimento As Date, ByVal dtDataEmissao As Date, ByVal iIndice As Integer) As Long

Dim lErro As Long

On Error GoTo Erro_NF_Valida_Data_Vencimento
     
    If dtDataVencimento < dtDataEmissao Then gError 140293
     
    NF_Valida_Data_Vencimento = SUCESSO

    Exit Function

Erro_NF_Valida_Data_Vencimento:

    NF_Valida_Data_Vencimento = gErr

    Select Case gErr
    
        Case 140293
            Call Rotina_Erro(vbOKOnly, "ERRO_DATAVENCIMENTO_PARCELA_COBRANCA_MENOR", gErr, iIndice, dtDataVencimento, dtDataEmissao)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 150025)

    End Select

    Exit Function
    
End Function

Public Function NF_Valida_Data_Referencia(ByVal dtDataReferencia As Date, ByVal dtDataEmissao As Date) As Long

Dim lErro As Long

On Error GoTo Erro_NF_Valida_Data_Referencia
     
    If dtDataReferencia < dtDataEmissao Then gError 140327
     
    NF_Valida_Data_Referencia = SUCESSO

    Exit Function

Erro_NF_Valida_Data_Referencia:

    NF_Valida_Data_Referencia = gErr

    Select Case gErr
    
        Case 140327
            Call Rotina_Erro(vbOKOnly, "ERRO_DATAEMISSAO_MAIOR_DATAREFERENCIA", gErr, dtDataReferencia, dtDataEmissao)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 150026)

    End Select

    Exit Function
    
End Function
'###############################################

'##################################################################
'Inserido por Wagner 12/09/05

Function RelEstatisticaCliente_Prepara(lNumIntRel As Long, ByVal objClienteFaixa As ClassClienteFaixa) As Long

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim lTransacao As Long
Dim iIndice As Integer
Dim colCliente As New Collection
Dim colEstatCliente As New Collection
Dim objCliente As ClassCliente
Dim objClienteEstatistica As ClassFilialClienteEst

On Error GoTo Erro_RelEstatisticaCliente_Prepara

    'Abertura comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 140170
    Next

    'inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 140171

    lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_PROX_REL_ESTATCLIENTE", lNumIntRel)
    If lErro <> SUCESSO Then gError 140175
    
    lErro = CF("Cliente_Le_Faixa", objClienteFaixa, colCliente, colEstatCliente)
    If lErro <> SUCESSO Then gError 140172
    
    iIndice = 0

    For Each objClienteEstatistica In colEstatCliente
    
        iIndice = iIndice + 1
        
        Set objCliente = colCliente.Item(iIndice)

        'insere novo registro na tabela Tipos
        lErro = Comando_Executar(alComando(1), "INSERT INTO RelEstatisticaCliente(NumIntRel, " & _
                "Cliente, NomeCliente, RazaoSocial,MediaCompra,SaldoAtrasado," & _
                "SaldoDuplicatas,SaldoPedidosLiberados,SaldoTitulos,DataPrimeiraCompra, " & _
                "DataUltChequeDevolvido,DataUltimaCompra,ValorAcumuladoCompras," & _
                "ValorNFsNaoFaturadas,ValPagtosAtraso,NumChequesDevolvidos,MaiorAtraso," & _
                "MediaAtraso,NumeroCompras) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                lNumIntRel, objCliente.lCodigo, objCliente.sNomeReduzido, objCliente.sRazaoSocial, objClienteEstatistica.dMediaCompra, objClienteEstatistica.dSaldoAtrasados, _
                objClienteEstatistica.dSaldoDuplicatas, objClienteEstatistica.dSaldoPedidosLiberados, objClienteEstatistica.dSaldoTitulos, objClienteEstatistica.dtDataPrimeiraCompra, _
                objClienteEstatistica.dtDataUltChequeDevolvido, objClienteEstatistica.dtDataUltimaCompra, objClienteEstatistica.dValorAcumuladoCompras, _
                objClienteEstatistica.dValorNFsNaoFaturadas, objClienteEstatistica.dValPagtosAtraso, objClienteEstatistica.iNumChequesDevolvidos, objClienteEstatistica.lMaiorAtraso, _
                objClienteEstatistica.lMediaAtraso, objClienteEstatistica.lNumeroCompras)
        If lErro <> AD_SQL_SUCESSO Then gError 140173

    Next

    'confirma a Transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 140174
 
    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    RelEstatisticaCliente_Prepara = SUCESSO

    Exit Function

Erro_RelEstatisticaCliente_Prepara:

    RelEstatisticaCliente_Prepara = gErr

        Select Case gErr

        Case 140170
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 140171
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 140172, 140175

        Case 140173
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_RELESTATCLIENTE", gErr)
        
        Case 140174
             Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150027)

    End Select

    Call Transacao_Rollback
    
    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Function RelClienteVendedor_Prepara(lNumIntRel As Long, ByVal objClienteFaixa As ClassClienteFaixa, ByVal dtDataDe As Date, ByVal dtDataAte As Date, Optional ByVal sProdDe As String = "", Optional ByVal sProdAte As String = "") As Long

Dim lErro As Long
Dim alComando(1 To 2) As Long
Dim lTransacao As Long
Dim iIndice As Integer
'Dim colFilialCliente As New Collection
'Dim colFilialClienteEst As New Collection
Dim objFilialCliente As ClassFilialCliente
Dim colNFTotal As Collection
Dim colNFPeriodo As Collection
Dim dtDataPrimeiraCompra As Date
Dim dtDataUltimaCompra As Date
Dim bAtendeParamComprou As Boolean
Dim iCountPer As Integer, iCount As Integer
Dim lCliente As Long, iFilial As Integer

On Error GoTo Erro_RelClienteVendedor_Prepara

    dtDataPrimeiraCompra = DATA_NULA
    dtDataUltimaCompra = DATA_NULA

    'Abertura comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 140267
    Next

    'inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 140268

    lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_PROX_REL_CLIENTEVENDEDOR", lNumIntRel)
    If lErro <> SUCESSO Then gError 140269
    
    'Essa função demora bastante, talvez seja melhor ler e processar um a um ao invés de manter coleções enormes
    'lErro = CF("FilialCliente_Le_Faixa", objClienteFaixa, colFilialCliente, colFilialClienteEst)
    lErro = CF("FilialCliente_Le_Faixa2", objClienteFaixa, alComando(2), lCliente, iFilial)
    If lErro <> SUCESSO Then gError 140270
    
    iIndice = 0

    'For Each objFilialCliente In colFilialCliente
    
    'Busca o próximo registro
    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 140255
    
    Do While lErro <> AD_SQL_SEM_DADOS
    
        Set colNFTotal = New Collection
        Set colNFPeriodo = New Collection
        Set objFilialCliente = New ClassFilialCliente
        
        objFilialCliente.lCodCliente = lCliente
        objFilialCliente.iCodFilial = iFilial
            
        'Não precisa ler uma coleção cheia de itens para só pegar o count, esse relatório está muito lento então precisa ser alterado
        lErro = CF("FilialCliente_Le_Compras_Periodo", objFilialCliente, dtDataDe, dtDataAte, colNFPeriodo, sProdDe, sProdAte, True, iCountPer)
        If lErro <> SUCESSO Then gError 140271
        
        lErro = CF("FilialCliente_Le_Compras", objFilialCliente, colNFTotal, dtDataPrimeiraCompra, dtDataUltimaCompra, sProdDe, sProdAte, True, iCount)
        If lErro <> SUCESSO Then gError 140274
        
        bAtendeParamComprou = False
        
        Select Case objClienteFaixa.iComprou
            Case 0
                'If colNFPeriodo.Count > 0 Then bAtendeParamComprou = True
                If iCountPer > 0 Then bAtendeParamComprou = True
            Case 1
                'If colNFPeriodo.Count = 0 Then bAtendeParamComprou = True
                If iCountPer = 0 Then bAtendeParamComprou = True
            Case Else
                bAtendeParamComprou = True
        End Select
        
        
        If bAtendeParamComprou Then
        
'            lErro = Comando_Executar(alComando(1), "INSERT INTO RelClienteVendedor(NumIntRel, " & _
'                    "Cliente, Filial, QtdComprasPeriodo, QtdComprasTotal, DataPrimeiraCompra, DataUltimaCompra) VALUES (?,?,?,?,?,?,?)", _
'                    lNumIntRel, objFilialCliente.lCodCliente, objFilialCliente.iCodFilial, colNFPeriodo.Count, colNFTotal.Count, dtDataPrimeiraCompra, dtDataUltimaCompra)
            lErro = Comando_Executar(alComando(1), "INSERT INTO RelClienteVendedor(NumIntRel, " & _
                    "Cliente, Filial, QtdComprasPeriodo, QtdComprasTotal, DataPrimeiraCompra, DataUltimaCompra) VALUES (?,?,?,?,?,?,?)", _
                    lNumIntRel, objFilialCliente.lCodCliente, objFilialCliente.iCodFilial, iCountPer, iCount, dtDataPrimeiraCompra, dtDataUltimaCompra)
            
            If lErro <> AD_SQL_SUCESSO Then gError 140272
            
        End If
    
        lErro = Comando_BuscarProximo(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 140255
    
    Loop
    'Next

    'confirma a Transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 140273
 
    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    RelClienteVendedor_Prepara = SUCESSO

    Exit Function

Erro_RelClienteVendedor_Prepara:

    RelClienteVendedor_Prepara = gErr

        Select Case gErr

        Case 140267
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 140268
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 140269 To 140271, 140274

        Case 140272
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_RELCLIENTEVENDEDOR", gErr)
        
        Case 140273
             Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150028)

    End Select

    Call Transacao_Rollback
    
    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function
'##################################################################

'##################################################################
'Inserido por Wagner 24/10/2005
'Rotina Customizada
Public Function RelEmissaoNF_Prepara(ByVal lNumNotaIni As Long, ByVal lNumNotaFim As Long, ByVal sSerie As String, ByVal iFilialEmpresa As Integer, lNumIntRel As Long) As Long
   
    RelEmissaoNF_Prepara = SUCESSO
    
End Function
'##########################################################################

'##########################################################################
'Inserido por Wagner 23/11/05
Function RelParamFormPreco_Prepara(lNumIntRel As Long, ByVal sProdutoIni As String, ByVal sProdutoFim As String, ByVal iTipoPlanilha As Integer) As Long

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim lTransacao As Long
Dim iIndice As Integer
Dim iEscopo As Integer
Dim objProduto As ClassProduto
Dim colProdutos As New Collection
Dim objMnemonicoFPTipo As ClassMnemonicoFPTipo
Dim colMnemonicoFPTipo As Collection

On Error GoTo Erro_RelParamFormPreco_Prepara

    'Abertura comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 140986
    Next
    
    iEscopo = MNEMONICOFPRECO_ESCOPO_PRODUTO

    'inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 140987

    lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_PROX_REL_FORMPRECO", lNumIntRel)
    If lErro <> SUCESSO Then gError 140988
    
    lErro = CF("Produto_Le_Faixa", sProdutoIni, sProdutoFim, colProdutos)
    If lErro <> SUCESSO Then gError 140989
    
    For Each objProduto In colProdutos
    
        Set objMnemonicoFPTipo = New ClassMnemonicoFPTipo
        Set colMnemonicoFPTipo = New Collection
    
        objMnemonicoFPTipo.iFilialEmpresa = giFilialEmpresa
        objMnemonicoFPTipo.iEscopo = iEscopo
        objMnemonicoFPTipo.sProduto = objProduto.sCodigo
        objMnemonicoFPTipo.iTipoPlanilha = iTipoPlanilha
    
        'Lê o Produto
        lErro = CF("MnemonicoFPTipo_Le_Todos", objMnemonicoFPTipo, colMnemonicoFPTipo)
        If lErro <> SUCESSO And lErro <> 116812 Then gError 140990
        
        For Each objMnemonicoFPTipo In colMnemonicoFPTipo
        
            lErro = Comando_Executar(alComando(1), "INSERT INTO RelParamFormPreco(NumIntRel, " & _
            "Produto, Mnemonico, MnemonicoDesc, Expressao, ValorCalculado, Escopo) VALUES (?,?,?,?,?,?,?) ", _
            lNumIntRel, objProduto.sCodigo, objMnemonicoFPTipo.sMnemonico, objMnemonicoFPTipo.sMnemonicoDesc, objMnemonicoFPTipo.sExpressao, objMnemonicoFPTipo.sExpressao, objMnemonicoFPTipo.iEscopo)
            If lErro <> AD_SQL_SUCESSO Then gError 140991
        
        Next
        
    Next

    'confirma a Transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 140992
 
    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    RelParamFormPreco_Prepara = SUCESSO

    Exit Function

Erro_RelParamFormPreco_Prepara:

    RelParamFormPreco_Prepara = gErr

        Select Case gErr

        Case 140986
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 140987
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 140988 To 140991

        Case 140992
             Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150029)

    End Select

    Call Transacao_Rollback
    
    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function
'##########################################################################

'####################################################################################
'Inserido por Wagner 07/12/2005
'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'GRAVAÇÃO
Public Function CustoEmbMPAux_Insere(ByVal colCustoEmbMPAux As Collection) As Long

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim iAux As Integer
Dim objCustoEmbMPAux As ClassCustoEmbMPAux

On Error GoTo Erro_CustoEmbMPAux_Insere

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 141317
    Next
    
    For Each objCustoEmbMPAux In colCustoEmbMPAux

        lErro = Comando_Executar(alComando(1), "INSERT INTO CustoEmbMPAux( FilialEmpresa, Produto, Mnemonico, Valor) VALUES (?,?,?,?)", _
                objCustoEmbMPAux.iFilialEmpresa, objCustoEmbMPAux.sProduto, objCustoEmbMPAux.sMnemonico, objCustoEmbMPAux.sValor)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 141318

    Next

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    CustoEmbMPAux_Insere = SUCESSO

    Exit Function

Erro_CustoEmbMPAux_Insere:

    CustoEmbMPAux_Insere = gErr

    Select Case gErr

        Case 141317
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 141318
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CUSTOEMBMPAUX", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150030)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'EXCLUSÃO
Public Function CustoEmbMPAux_Exclui(ByVal objCustoEmbMP As ClassCustoEmbMP) As Long

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim iAux As Integer

On Error GoTo Erro_CustoEmbMPAux_Exclui

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 141308
    Next

    'Le a tabelaCustoEmbMPAux
    lErro = Comando_ExecutarPos(alComando(0), "SELECT 1 FROM CustoEmbMPAux WHERE FilialEmpresa= ?  AND Produto= ?  ", _
                0, iAux, objCustoEmbMP.iFilialEmpresa, objCustoEmbMP.sProduto)
    If lErro <> AD_SQL_SUCESSO Then gError 141309

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 141310

    'Se não existir => ERRO
    Do While lErro <> AD_SQL_SEM_DADOS
    
        'Trava registro contra alterações/Leituras
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> SUCESSO Then gError 141312
    
        lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM CustoEmbMPAux", alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 141313
        
        'Busca Próximo
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 141311
        
    Loop

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    CustoEmbMPAux_Exclui = SUCESSO

    Exit Function

Erro_CustoEmbMPAux_Exclui:

    CustoEmbMPAux_Exclui = gErr

    Select Case gErr

        Case 141308
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 141309, 141310
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CUSTOEMBMPAUX", gErr)

        Case 141311
            Call Rotina_Erro(vbOKOnly, "ERRO_CUSTOEMBMPAUX_NAO_CADASTRADO", gErr, objCustoEmbMP.iFilialEmpresa, objCustoEmbMP.sProduto)

        Case 141312
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_CUSTOEMBMPAUX", gErr)

        Case 141313
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CUSTOEMBMPAUX", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150031)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function
'####################################################################################

'##############################################################################
'Inserido por Wagner 22/03/2006
Function NFiscalItens_Grava_Customizado(ByVal objNFiscal As ClassNFiscal) As Long
    NFiscalItens_Grava_Customizado = SUCESSO
End Function

Function PVItens_Grava_Customizado(ByVal objPV As ClassPedidoDeVenda) As Long
    PVItens_Grava_Customizado = SUCESSO
End Function

Function OVItens_Grava_Customizado(ByVal objOV As ClassOrcamentoVenda) As Long
    OVItens_Grava_Customizado = SUCESSO
End Function
'##############################################################################

Function Relatorio_ObterFiltro(ByVal sRelatorio As String, sFiltro As String) As Long
    Relatorio_ObterFiltro = SUCESSO
End Function

'###################################################
'Inserido por Wagner 17/05/2006
'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'GRAVAÇÃO
Public Function KitVenda_Grava(ByVal objKitVenda As ClassKitVenda) As Long

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_KitVenda_Grava

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 177436

    lErro = CF("KitVenda_Grava_EmTrans", objKitVenda)
    If lErro <> SUCESSO Then gError 177437

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 177438

    KitVenda_Grava = SUCESSO

    Exit Function

Erro_KitVenda_Grava:

    KitVenda_Grava = gErr

    Select Case gErr

        Case 177436
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 177437

        Case 177438
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 177477)

    End Select

    'Desfaz Transação
    Call Transacao_Rollback

    Exit Function

End Function

Public Function KitVenda_Grava_EmTrans(ByVal objKitVenda As ClassKitVenda) As Long

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim iAux As Integer

On Error GoTo Erro_KitVenda_Grava_EmTrans

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 177439
    Next

    'Le a tabelaKitVenda
    lErro = Comando_ExecutarPos(alComando(0), "SELECT 1 FROM KitVenda WHERE Produto= ? ", _
                0, iAux, objKitVenda.sProduto)
    If lErro <> AD_SQL_SUCESSO Then gError 177440

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 177441

    'Se existir => UPDATE, senão => INSERT
    If lErro = AD_SQL_SUCESSO Then

        'Trava registro contra alterações/Leituras
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> SUCESSO Then gError 177442

        lErro = Comando_ExecutarPos(alComando(1), "UPDATE KitVenda SET UM= ? , Quantidade= ? , Data= ? , Observacao= ? ", alComando(0), _
                objKitVenda.sUM, objKitVenda.dQuantidade, objKitVenda.dtData, objKitVenda.sObservacao)
        If lErro <> AD_SQL_SUCESSO Then gError 177443

        lErro = ProdutoKitVenda_Exclui(objKitVenda)
        If lErro <> SUCESSO Then gError 177478

    Else


        lErro = Comando_Executar(alComando(1), "INSERT INTO KitVenda( Produto, UM, Quantidade, Data, " & _
                "Observacao) VALUES (?,?,?,?,?)", _
                objKitVenda.sProduto, objKitVenda.sUM, objKitVenda.dQuantidade, objKitVenda.dtData, _
                objKitVenda.sObservacao)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 177444

    End If
    
    lErro = ProdutoKitVenda_Insere(objKitVenda)
    If lErro <> SUCESSO Then gError 177476

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    KitVenda_Grava_EmTrans = SUCESSO

    Exit Function

Erro_KitVenda_Grava_EmTrans:

    KitVenda_Grava_EmTrans = gErr

    Select Case gErr

        Case 177439
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 177440, 177441
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_KITVENDA", gErr)

        Case 177442
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_KITVENDA", gErr)

        Case 177443
            Call Rotina_Erro(vbOKOnly, "ERRO_UPDATE_KITVENDA", gErr)

        Case 177444
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_KITVENDA", gErr)
            
        Case 177476, 177478

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 177475)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function ProdutoKitVenda_Insere(ByVal objKitVenda As ClassKitVenda) As Long

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer
Dim iAux As Integer
Dim objProdutoKitVenda As ClassProdutoKitVenda

On Error GoTo Erro_ProdutoKitVenda_Insere

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 177472
    Next
    
    For Each objProdutoKitVenda In objKitVenda.colComponentes

        lErro = Comando_Executar(alComando(1), "INSERT INTO ProdutoKitVenda( ProdutoKit, Produto, Seq, Quantidade, " & _
                "UM) VALUES (?,?,?,?,?)", _
                objProdutoKitVenda.sProdutoKit, objProdutoKitVenda.sProduto, objProdutoKitVenda.iSeq, objProdutoKitVenda.dQuantidade, _
                objProdutoKitVenda.sUM)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 177473

    Next

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    ProdutoKitVenda_Insere = SUCESSO

    Exit Function

Erro_ProdutoKitVenda_Insere:

    ProdutoKitVenda_Insere = gErr

    Select Case gErr

        Case 177472
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 177473
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_PRODUTOKITVENDA", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 177474)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function ProdutoKitVenda_Exclui(ByVal objKitVenda As ClassKitVenda) As Long

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim iAux As Integer

On Error GoTo Erro_ProdutoKitVenda_Exclui

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 177479
    Next

    'Le a tabelaProdutoKitVenda
    lErro = Comando_ExecutarPos(alComando(0), "SELECT 1 FROM ProdutoKitVenda WHERE ProdutoKit= ? ", _
                0, iAux, objKitVenda.sProduto)
    If lErro <> AD_SQL_SUCESSO Then gError 177480

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 177481

    'Enquanto existir
    Do While lErro <> AD_SQL_SEM_DADOS

        'Trava registro contra alterações/Leituras
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> SUCESSO Then gError 177482
    
        lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM ProdutoKitVenda", alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 177483
        
        'Busca Primeiro
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 177484
        
    Loop

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    ProdutoKitVenda_Exclui = SUCESSO

    Exit Function

Erro_ProdutoKitVenda_Exclui:

    ProdutoKitVenda_Exclui = gErr

    Select Case gErr

        Case 177479
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 177480, 177481, 177484
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOKITVENDA", gErr)

        Case 177482
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_PRODUTOKITVENDA", gErr)

        Case 177483
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_PRODUTOKITVENDA", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 177485)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'EXCLUSÃO
Public Function KitVenda_Exclui(ByVal objKitVenda As ClassKitVenda) As Long

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_KitVenda_Exclui

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 177427

    lErro = CF("KitVenda_Exclui_EmTrans", objKitVenda)
    If lErro <> SUCESSO Then gError 177428

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 177429

    KitVenda_Exclui = SUCESSO

    Exit Function

Erro_KitVenda_Exclui:

    KitVenda_Exclui = gErr

    Select Case gErr

        Case 177427
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 177428

        Case 177429
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 143933)

    End Select

    'Desfaz Transação
    Call Transacao_Rollback

    Exit Function

End Function

Public Function KitVenda_Exclui_EmTrans(ByVal objKitVenda As ClassKitVenda) As Long

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim iAux As Integer

On Error GoTo Erro_KitVenda_Exclui_EmTrans

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 177430
    Next

    'Le a tabelaKitVenda
    lErro = Comando_ExecutarPos(alComando(0), "SELECT 1 FROM KitVenda WHERE Produto= ? ", _
                0, iAux, objKitVenda.sProduto)
    If lErro <> AD_SQL_SUCESSO Then gError 177431

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 177432

    'Se não existir => ERRO
    If lErro = AD_SQL_SEM_DADOS Then gError 177433

    'Trava registro contra alterações/Leituras
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> SUCESSO Then gError 177434

    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM KitVenda", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 177435
    
    lErro = ProdutoKitVenda_Exclui(objKitVenda)
    If lErro <> SUCESSO Then gError 177489

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    KitVenda_Exclui_EmTrans = SUCESSO

    Exit Function

Erro_KitVenda_Exclui_EmTrans:

    KitVenda_Exclui_EmTrans = gErr

    Select Case gErr

        Case 177430
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 177431, 177432
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_KITVENDA", gErr)

        Case 177433
            Call Rotina_Erro(vbOKOnly, "ERRO_KITVENDA_NAO_CADASTRADO", gErr, objKitVenda.sProduto)

        Case 177434
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_KITVENDA", gErr)

        Case 177435
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_KITVENDA", gErr)
            
        Case 177489

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 177490)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

'################################################################

Function ItensNFEntrega_Grava(ByVal objNFiscal As ClassNFiscal) As Long
'exclui as  datas de entrega do pedido e em seguinda grava as novas

Dim lErro As Long
Dim alComando(1 To 3) As Long
Dim objItemNF As ClassItemNF
Dim objDataEntrega As ClassDataEntrega
Dim lNumIntDoc As Long
Dim iIndice As Integer
Dim lNumIntItemNF As Long

On Error GoTo Erro_ItensNFEntrega_Grava

    'Abertura comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 183221
    Next

    For Each objItemNF In objNFiscal.colItensNF

        'Pesquisa os ítens vinculados à Nota Fiscal
        lErro = Comando_Executar(alComando(3), "SELECT NumIntDoc FROM ItensNFiscal WHERE NumIntNF = ? AND Produto = ?", lNumIntItemNF, objNFiscal.lNumIntDoc, objItemNF.sProduto)
        If lErro <> AD_SQL_SUCESSO Then gError 195109

        lErro = Comando_BuscarPrimeiro(alComando(3))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 195110
        
        objItemNF.lNumIntDoc = lNumIntItemNF

    Next

    'Exclui as datas de entrega existentes
    lErro = Comando_Executar(alComando(1), "DELETE FROM ItensNFEntrega WHERE NumIntNF = ?", objNFiscal.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 183222

    For Each objItemNF In objNFiscal.colItensNF

        For Each objDataEntrega In objItemNF.colDataEntrega

            'Gera o número interno automático do Pedido de Venda
            lErro = CF("Config_ObterNumInt", "FatConfig", "NUM_PROX_ITENSNFENTREGA", lNumIntDoc)
            If lErro <> SUCESSO Then gError 183223

            'Insere o bloqueio na tabela de Bloqueios de Pedido de Venda
            lErro = Comando_Executar(alComando(2), "INSERT INTO ItensNFEntrega(NumIntDoc, NumIntNF, NumIntItemNF, DataEntrega, Quantidade, PedidoCliente) VALUES (?,?,?,?,?,?)", lNumIntDoc, objNFiscal.lNumIntDoc, objItemNF.lNumIntDoc, objDataEntrega.dtDataEntrega, objDataEntrega.dQuantidade, objDataEntrega.sPedidoCliente)
            If lErro <> AD_SQL_SUCESSO Then gError 183224

        Next

    Next
     
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    ItensNFEntrega_Grava = SUCESSO

    Exit Function

Erro_ItensNFEntrega_Grava:

    ItensNFEntrega_Grava = gErr

    Select Case gErr

        Case 183221
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 183222
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_ITENSNFENTREGA", gErr)

        Case 183223

        Case 183224
            Call Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_ITENSNFENTREGA", gErr)

        Case 195109, 195110
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSNFISCAL", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 183225)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function ItensNFEntrega_Exclui(ByVal objNFiscal As ClassNFiscal) As Long
'exclui as  datas de entrega do pedido

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer

On Error GoTo Erro_ItensNFEntrega_Exclui

    'Abertura comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 183226
    Next

    'Exclui o Pedido da Tabela de Pedidos
    lErro = Comando_Executar(alComando(1), "DELETE FROM ItensNFEntrega WHERE NumIntNF = ?", objNFiscal.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 183227

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    ItensNFEntrega_Exclui = SUCESSO

    Exit Function

Erro_ItensNFEntrega_Exclui:

    ItensNFEntrega_Exclui = gErr

    Select Case gErr

        Case 183226
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 183227
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_ITENSNFENTREGA", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 183228)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function NFiscal_Grava_Customizado(ByVal objNFiscal As ClassNFiscal) As Long
    NFiscal_Grava_Customizado = SUCESSO
End Function

Function RelEstVendaDt_Prepara(ByVal objRelEstVendaDt As ClassRelEstVendaDt) As Long
'prepara tabela temporaria para relatorio de estoque com custo de venda numa data

Dim lErro As Long, lTransacao As Long, lNumIntRel As Long

On Error GoTo Erro_RelEstVendaDt_Prepara

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 184167
     
    'Obter NumIntRel
    lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_PROX_REL_ESTVENDADT", lNumIntRel)
    If lErro <> SUCESSO Then gError 184168
    
    objRelEstVendaDt.lNumIntRel = lNumIntRel
    
    'se filtra por almoxarifado
    If objRelEstVendaDt.iAlmoxarifado <> 0 Then
        lErro = RelEstVendaDt_Prepara1(objRelEstVendaDt)
    Else
        lErro = RelEstVendaDt_Prepara2(objRelEstVendaDt)
    End If
    If lErro <> SUCESSO Then gError 184169
    
    'fecha transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 184170
    
    RelEstVendaDt_Prepara = SUCESSO
     
    Exit Function
    
Erro_RelEstVendaDt_Prepara:

    RelEstVendaDt_Prepara = gErr
     
    Select Case gErr
          
        Case 184168, 184169
        
        Case 184167
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
        
        Case 184170
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 184171)
     
    End Select
     
    Call Transacao_Rollback
 
    Exit Function

End Function

Private Function RelEstVendaDt_Prepara1(ByVal objRelEstVendaDt As ClassRelEstVendaDt) As Long
'prepara tabela temporaria para relatorio de estoque com custo de venda numa data
'se for para um almoxarifado especifico

Dim lErro As Long, iIndice As Integer
Dim sSelect As String
Dim alComando(1 To 2) As Long
Dim sProduto As String
Dim dPreco As Double, dFator As Double
Dim objRegInventario As ClassRegInventario
Dim dQuantidadeNossa As Double, dValorUnitario As Double
Dim dQuantidadeNossaFil As Double, dValorUnitarioFil As Double
Dim iFilialEmpresa As Integer, iAlmoxarifado As Integer, sProdInicial As String, sProdFinal As String, iTipoProdInicial As Integer, iTipoProdFinal As Integer, lFornecedor As Long

'buffers para receber registros
Dim vsProduto As Variant, viClasseUM As Variant, vsSiglaUMEstoque As Variant, vsSiglaUMVenda As Variant

On Error GoTo Erro_RelEstVendaDt_Prepara1

    'Executa a abertura dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 184172
    Next
    
    'monta o comando SQL
    lErro = RelEstVendaDt_Prepara4(objRelEstVendaDt, sSelect)
    If lErro <> SUCESSO Then gError 184173
    
    'faz o bind e executa o comando
    vsProduto = String(STRING_PRODUTO, 0)
    viClasseUM = CInt(0)
    vsSiglaUMEstoque = String(STRING_UM_SIGLA, 0)
    vsSiglaUMVenda = String(STRING_UM_SIGLA, 0)
    
    With objRelEstVendaDt
        iFilialEmpresa = .iFilialEmpresa
        iAlmoxarifado = .iAlmoxarifado
        sProdInicial = .sProdInicial
        sProdFinal = .sProdFinal
        iTipoProdInicial = .iTipoProdutoInicial
        iTipoProdFinal = .iTipoProdutoFinal
        lFornecedor = .lFornecedor
    End With
    
    lErro = RelEstVendaDt_Prepara5(objRelEstVendaDt, sSelect, alComando(1), vsProduto, viClasseUM, vsSiglaUMEstoque, vsSiglaUMVenda, iFilialEmpresa, iAlmoxarifado, sProdInicial, sProdFinal, iTipoProdInicial, iTipoProdFinal, lFornecedor)
    If lErro <> SUCESSO Then gError 184174
    
    lErro = Comando_BuscarProximo(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 184175

    Do While lErro = AD_SQL_SUCESSO
        
        sProduto = vsProduto
        lErro = CF("Produto_ObtemPrecoData", objRelEstVendaDt.iFilialEmpresa, objRelEstVendaDt.iTabelaPreco, sProduto, objRelEstVendaDt.dtData1, dPreco)
        If lErro <> SUCESSO Then gError 184176
        
        Set objRegInventario = New ClassRegInventario

        'Guarda dados lidos em objRegInventario
        With objRegInventario
            .iFilialEmpresa = objRelEstVendaDt.iFilialEmpresa
            .sProduto = sProduto
            .dtData = objRelEstVendaDt.dtData1
            .sSiglaUMEstoque = vsSiglaUMEstoque
        End With
        
        'Calcula as Quantidades e Custos na Data do Inventário
        lErro = CF("RegInventario_Obter_Quantidades", objRegInventario)
        If lErro <> SUCESSO Then gError 184177
        
        objRegInventario.dQtdeDeTercConosco = objRegInventario.dQuantBenef3 + objRegInventario.dQuantConserto3 + objRegInventario.dQuantConsig3 + objRegInventario.dQuantDemo3 + objRegInventario.dQuantOutras3
        objRegInventario.dQtdeNossaEmTerc = objRegInventario.dQuantBenef + objRegInventario.dQuantConserto + objRegInventario.dQuantConsig + objRegInventario.dQuantDemo + objRegInventario.dQuantOutras
        dQuantidadeNossaFil = objRegInventario.dQuantidadeUMEstoque - objRegInventario.dQtdeDeTercConosco
                
        dValorUnitarioFil = (objRegInventario.dValorEstoque - (objRegInventario.dValorBenef3 + objRegInventario.dValorConserto3 + objRegInventario.dValorConsig3 + objRegInventario.dValorDemo3 + objRegInventario.dValorOutras3))
        
        objRegInventario.iAlmoxarifado = objRelEstVendaDt.iAlmoxarifado
        
        'Calcula as Quantidades e Custos na Data do Inventário
        lErro = CF("RegInventario_Obter_Quantidades_Almox", objRegInventario)
        If lErro <> SUCESSO Then gError 184178
        
        objRegInventario.dQtdeDeTercConosco = objRegInventario.dQuantConsig3 + objRegInventario.dQuantDemo3 + objRegInventario.dQuantConserto3 + objRegInventario.dQuantOutras3 + objRegInventario.dQuantBenef3
        dQuantidadeNossa = objRegInventario.dQuantidadeUMEstoque - objRegInventario.dQtdeDeTercConosco
        If Abs(dQuantidadeNossaFil) > QTDE_ESTOQUE_DELTA Then
            dValorUnitario = Arredonda_Moeda(dValorUnitarioFil * dQuantidadeNossa / dQuantidadeNossaFil)
        Else
            dValorUnitario = 0
        End If
        lErro = Comando_Executar(alComando(2), "INSERT INTO RelEstVendaDtAux (NumIntRel, Produto, Data1, QtdeEstoque1, PrecoUnitario1, Custo1) VALUES (?,?,?,?,?,?)", _
            objRelEstVendaDt.lNumIntRel, sProduto, objRelEstVendaDt.dtData1, dQuantidadeNossa, dPreco, dValorUnitario)
        If lErro <> AD_SQL_SUCESSO Then gError 184179
        
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 184180
    
    Loop
    
    'Executa o fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    RelEstVendaDt_Prepara1 = SUCESSO
     
    Exit Function
    
Erro_RelEstVendaDt_Prepara1:

    RelEstVendaDt_Prepara1 = gErr
     
    Select Case gErr
          
        Case 184173, 184174, 184176, 184177, 184178
        
        Case 184175, 184180
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RELESTVENDADT", gErr)
        
        Case 184179
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_RELESTVENDADT", gErr)
        
        Case 184172
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 184181)
     
    End Select
     
    'Executa o fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Private Function RelEstVendaDt_Prepara2(ByVal objRelEstVendaDt As ClassRelEstVendaDt) As Long
'prepara tabela temporaria para relatorio de estoque com custo de venda numa data
'se for para uma filialempresa como um todo

Dim lErro As Long, iIndice As Integer
Dim sSelect As String
Dim alComando(1 To 2) As Long
Dim sProduto As String
Dim dPreco As Double, dFator As Double
Dim objRegInventario As ClassRegInventario
Dim dQuantidadeNossa As Double, dValorUnitario As Double
Dim iFilialEmpresa As Integer, iAlmoxarifado As Integer, sProdInicial As String, sProdFinal As String, iTipoProdInicial As Integer, iTipoProdFinal As Integer, lFornecedor As Long

'buffers para receber registros
Dim vsProduto As Variant, viClasseUM As Variant, vsSiglaUMEstoque As Variant, vsSiglaUMVenda As Variant

On Error GoTo Erro_RelEstVendaDt_Prepara2

    'Executa a abertura dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 184182
    Next
    
    'monta o comando SQL
    lErro = RelEstVendaDt_Prepara3(objRelEstVendaDt, sSelect)
    If lErro <> SUCESSO Then gError 184183
    
    'faz o bind e executa o comando
    vsProduto = String(STRING_PRODUTO, 0)
    viClasseUM = CInt(0)
    vsSiglaUMEstoque = String(STRING_UM_SIGLA, 0)
    vsSiglaUMVenda = String(STRING_UM_SIGLA, 0)
    
    With objRelEstVendaDt
        iFilialEmpresa = .iFilialEmpresa
        iAlmoxarifado = .iAlmoxarifado
        sProdInicial = .sProdInicial
        sProdFinal = .sProdFinal
        iTipoProdInicial = .iTipoProdutoInicial
        iTipoProdFinal = .iTipoProdutoFinal
        lFornecedor = .lFornecedor
    End With
    
    lErro = RelEstVendaDt_Prepara5(objRelEstVendaDt, sSelect, alComando(1), vsProduto, viClasseUM, vsSiglaUMEstoque, vsSiglaUMVenda, iFilialEmpresa, iAlmoxarifado, sProdInicial, sProdFinal, iTipoProdInicial, iTipoProdFinal, lFornecedor)
    If lErro <> SUCESSO Then gError 184184
    
    lErro = Comando_BuscarProximo(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 184185

    Do While lErro = AD_SQL_SUCESSO
        
        sProduto = vsProduto
        lErro = CF("Produto_ObtemPrecoData", objRelEstVendaDt.iFilialEmpresa, objRelEstVendaDt.iTabelaPreco, sProduto, objRelEstVendaDt.dtData1, dPreco)
        If lErro <> SUCESSO Then gError 184186
        
        Set objRegInventario = New ClassRegInventario

        'Guarda dados lidos em objRegInventario
        With objRegInventario
            .iFilialEmpresa = objRelEstVendaDt.iFilialEmpresa
            .sProduto = sProduto
            .dtData = objRelEstVendaDt.dtData1
            .sSiglaUMEstoque = vsSiglaUMEstoque
        End With
        
        'Calcula as Quantidades e Custos na Data do Inventário
        lErro = CF("RegInventario_Obter_Quantidades", objRegInventario)
        If lErro <> SUCESSO Then gError 184187
        
        objRegInventario.dQtdeDeTercConosco = objRegInventario.dQuantBenef3 + objRegInventario.dQuantConserto3 + objRegInventario.dQuantConsig3 + objRegInventario.dQuantDemo3 + objRegInventario.dQuantOutras3
        objRegInventario.dQtdeNossaEmTerc = objRegInventario.dQuantBenef + objRegInventario.dQuantConserto + objRegInventario.dQuantConsig + objRegInventario.dQuantDemo + objRegInventario.dQuantOutras
        dQuantidadeNossa = objRegInventario.dQuantidadeUMEstoque - objRegInventario.dQtdeDeTercConosco
                        
        dValorUnitario = (objRegInventario.dValorEstoque - (objRegInventario.dValorBenef3 + objRegInventario.dValorConserto3 + objRegInventario.dValorConsig3 + objRegInventario.dValorDemo3 + objRegInventario.dValorOutras3))
        
        lErro = Comando_Executar(alComando(2), "INSERT INTO RelEstVendaDtAux (NumIntRel, Produto, Data1, QtdeEstoque1, PrecoUnitario1, Custo1) VALUES (?,?,?,?,?,?)", _
            objRelEstVendaDt.lNumIntRel, sProduto, objRelEstVendaDt.dtData1, dQuantidadeNossa, dPreco, dValorUnitario)
        If lErro <> AD_SQL_SUCESSO Then gError 184188
        
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 184189
    
    Loop
    
    'Executa o fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    RelEstVendaDt_Prepara2 = SUCESSO
     
    Exit Function
    
Erro_RelEstVendaDt_Prepara2:

    RelEstVendaDt_Prepara2 = gErr
     
    Select Case gErr
          
        Case 184183, 184184, 184186, 184187
        
        Case 184185, 184189
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RELESTVENDADT", gErr)
        
        Case 184188
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_RELESTVENDADT", gErr)
        
        Case 184182
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 184190)
     
    End Select
     
    'Executa o fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Private Function RelEstVendaDt_Prepara3(ByVal objRelEstVendaDt As ClassRelEstVendaDt, sSelect As String) As Long
'prepara tabela temporaria para relatorio de estoque com custo de venda numa data
'monta SQL se for para uma filialempresa como um todo

Dim lErro As Long
Dim sFrom As String, sWhere As String, sFields As String, sOrderBy As String

On Error GoTo Erro_RelEstVendaDt_Prepara3

    'monta SQL
    sFields = "PF.Produto, Produtos.ClasseUM, Produtos.SiglaUMEstoque, Produtos.SiglaUMVenda"
    sFrom = " FROM ProdutosFilial PF, Produtos "
    sWhere = " WHERE PF.Produto = Produtos.Codigo"
    sOrderBy = " ORDER BY PF.Produto"
    
    'se o fornecedor foi passado como filtro
    If objRelEstVendaDt.lFornecedor <> 0 Then
        sWhere = sWhere & " AND EXISTS (SELECT * FROM FornecedorProdutoFF WHERE FornecedorProdutoFF.Produto = PF.Produto AND FornecedorProdutoFF.Fornecedor = ?)"
    End If
    
    sWhere = sWhere & " AND PF.FilialEmpresa = ?"
    
    'se o tipo de produto inicial foi passado como filtro
    If objRelEstVendaDt.iTipoProdutoInicial <> 0 Then
        sWhere = sWhere & " AND Produtos.Tipo >= ?"
    End If
    
    'se o tipo de produto final foi passado como filtro
    If objRelEstVendaDt.iTipoProdutoFinal <> 0 Then
        sWhere = sWhere & " AND Produtos.Tipo <= ?"
    End If
    
    If Len(Trim(objRelEstVendaDt.sProdInicial)) <> 0 Then
        sWhere = sWhere & " AND PF.Produto >= ?"
    End If
    
    If Len(Trim(objRelEstVendaDt.sProdFinal)) <> 0 Then
        sWhere = sWhere & " AND PF.Produto <= ?"
    End If
    
    sSelect = "SELECT " & sFields & sFrom & sWhere & sOrderBy
        
    RelEstVendaDt_Prepara3 = SUCESSO
     
    Exit Function
    
Erro_RelEstVendaDt_Prepara3:

    RelEstVendaDt_Prepara3 = gErr
     
    Select Case gErr
          
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 184191)
     
    End Select
     
    Exit Function

End Function

Private Function RelEstVendaDt_Prepara4(ByVal objRelEstVendaDt As ClassRelEstVendaDt, sSelect As String) As Long
'prepara tabela temporaria para relatorio de estoque com custo de venda numa data
'monta SQL se for para um almoxarifado especifico

Dim lErro As Long
Dim sFrom As String, sWhere As String, sFields As String, sOrderBy As String

On Error GoTo Erro_RelEstVendaDt_Prepara4

    'monta SQL
    sFields = "EP.Produto, Produtos.ClasseUM, Produtos.SiglaUMEstoque, Produtos.SiglaUMVenda"
    sFrom = " FROM EstoqueProduto EP, Produtos "
    sWhere = " WHERE EP.Produto = Produtos.Codigo"
    sOrderBy = " ORDER BY EP.Produto"
    
    'se o fornecedor foi passado como filtro
    If objRelEstVendaDt.lFornecedor <> 0 Then
        sWhere = sWhere & " AND EXISTS (SELECT * FROM FornecedorProdutoFF WHERE FornecedorProdutoFF.Produto = EP.Produto AND FornecedorProdutoFF.Fornecedor = ?)"
    End If
    
    sWhere = sWhere & " AND EP.Almoxarifado = ?"
    
    'se o tipo de produto inicial foi passado como filtro
    If objRelEstVendaDt.iTipoProdutoInicial <> 0 Then
        sWhere = sWhere & " AND Produtos.Tipo >= ?"
    End If
    
    'se o tipo de produto final foi passado como filtro
    If objRelEstVendaDt.iTipoProdutoFinal <> 0 Then
        sWhere = sWhere & " AND Produtos.Tipo <= ?"
    End If
    
    If Len(Trim(objRelEstVendaDt.sProdInicial)) <> 0 Then
        sWhere = sWhere & " AND EP.Produto >= ?"
    End If
    
    If Len(Trim(objRelEstVendaDt.sProdFinal)) <> 0 Then
        sWhere = sWhere & " AND EP.Produto <= ?"
    End If
    
    sSelect = "SELECT " & sFields & sFrom & sWhere & sOrderBy
    
    RelEstVendaDt_Prepara4 = SUCESSO
     
    Exit Function
    
Erro_RelEstVendaDt_Prepara4:

    RelEstVendaDt_Prepara4 = gErr
     
    Select Case gErr
          
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 184192)
     
    End Select
     
    Exit Function

End Function

Private Function RelEstVendaDt_Prepara5(ByVal objRelEstVendaDt As ClassRelEstVendaDt, ByVal sSelect As String, ByVal lComando As Long, vsProduto As Variant, viClasseUM As Variant, vsSiglaUMEstoque As Variant, vsSiglaUMVenda As Variant, viFilialEmpresa As Variant, viAlmoxarifado As Variant, vsProdInicial As Variant, vsProdFinal As Variant, viTipoProdutoInicial As Variant, viTipoProdutoFinal As Variant, vlFornecedor As Variant) As Long
'prepara tabela temporaria para relatorio de estoque com custo de venda numa data
'se for para um almoxarifado especifico

Dim lErro As Long

On Error GoTo Erro_RelEstVendaDt_Prepara5

    lErro = Comando_PrepararInt(lComando, sSelect)
    If (lErro <> AD_SQL_SUCESSO) Then gError 184193

    lErro = Comando_BindVarInt(lComando, vsProduto)
    If (lErro <> AD_SQL_SUCESSO) Then gError 184194

    lErro = Comando_BindVarInt(lComando, viClasseUM)
    If (lErro <> AD_SQL_SUCESSO) Then gError 184195

    lErro = Comando_BindVarInt(lComando, vsSiglaUMEstoque)
    If (lErro <> AD_SQL_SUCESSO) Then gError 184196

    lErro = Comando_BindVarInt(lComando, vsSiglaUMVenda)
    If (lErro <> AD_SQL_SUCESSO) Then gError 184197

    'se o fornecedor foi passado como filtro
    If objRelEstVendaDt.lFornecedor <> 0 Then
        lErro = Comando_BindVarInt(lComando, vlFornecedor)
        If (lErro <> AD_SQL_SUCESSO) Then gError 184198
    End If
    
    If objRelEstVendaDt.iAlmoxarifado <> 0 Then
        lErro = Comando_BindVarInt(lComando, viAlmoxarifado)
        If (lErro <> AD_SQL_SUCESSO) Then gError 184199
    Else
        lErro = Comando_BindVarInt(lComando, viFilialEmpresa)
        If (lErro <> AD_SQL_SUCESSO) Then gError 184200
    End If
    
    'se o tipo de produto inicial foi passado como filtro
    If objRelEstVendaDt.iTipoProdutoInicial <> 0 Then
        lErro = Comando_BindVarInt(lComando, viTipoProdutoInicial)
        If (lErro <> AD_SQL_SUCESSO) Then gError 184201
    End If
    
    'se o tipo de produto final foi passado como filtro
    If objRelEstVendaDt.iTipoProdutoFinal <> 0 Then
        lErro = Comando_BindVarInt(lComando, viTipoProdutoFinal)
        If (lErro <> AD_SQL_SUCESSO) Then gError 184201
    End If
    
    If Len(Trim(objRelEstVendaDt.sProdInicial)) <> 0 Then
        lErro = Comando_BindVarInt(lComando, vsProdInicial)
        If (lErro <> AD_SQL_SUCESSO) Then gError 184202
    End If
    
    If Len(Trim(objRelEstVendaDt.sProdFinal)) <> 0 Then
        lErro = Comando_BindVarInt(lComando, vsProdFinal)
        If (lErro <> AD_SQL_SUCESSO) Then gError 184203
    End If
    
    lErro = Comando_ExecutarInt(lComando)
    If (lErro <> AD_SQL_SUCESSO) Then gError 184204

    RelEstVendaDt_Prepara5 = SUCESSO
     
    Exit Function
    
Erro_RelEstVendaDt_Prepara5:

    RelEstVendaDt_Prepara5 = gErr
     
    Select Case gErr
          
        Case 184193 To 184204
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RELESTVENDADT", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 184205)
     
    End Select
     
    Exit Function

End Function


Function RelFluxoCaixaContabil_Prepara(ByVal dtDataDe As Date, ByVal dtDataAte As Date, lNumIntRel As Long, dSaldoInicial As Double) As Long

Dim lErro As Long, lTransacao As Long, dFator As Double, dValorLctoAux As Double
Dim lMOV_NumMovto As Long, iMOV_Tipo As Integer, dMOV_Valor As Double, lMOV_NumRefInterna As Long
Dim dSaldoNaoApropriado As Double

'Dim iLCTO_FilialEmpresa As Integer, sLCTO_Origem As String, iLCTO_Exercicio As Integer, iLCTO_PeriodoLan As Integer, lLCTO_Doc As Long, iLCTO_Seq As Integer, iLCTO_Lote As Integer, dtLCTO_Data As Date, sLCTO_Conta As String, sLCTO_Historico As String, dLCTO_Valor As Double
'Dim lBX_NumIntBaixa As Long, dtBX_Data As Date, dtBX_DataContabil As Date, dtBX_DataRegistro As Date
'Dim lBXPARC_NumIntDoc As Long, dBXPARC_ValorJuros As Double, dBXPARC_ValorMulta As Double, dBXPARC_ValorDesconto As Double, dBXPARC_ValorBaixado As Double, dBXPARC_ValorDiferenca As Double
'Dim iPARC_NumParcela As Integer, dtPARC_DataVencimento As Date, dPARC_Valor As Double, lTIT_NumIntDoc As Long, iTIT_FilialEmpresa As Integer, lTIT_Fornecedor As Long, sTIT_SiglaDocumento As String, lTIT_NumTitulo As Long, dtTIT_DataEmissao As Date
'Dim dTIT_ValorTotal  As Double, dTIT_ValorSeguro As Double, dTIT_ValorFrete As Double, dTIT_OutrasDespesas As Double, dTIT_ValorIRRF As Double, dTIT_PISRetido As Double, dTIT_ISSRetido As Double, dTIT_COFINSRetido As Double, dTIT_CSLLRetido As Double, dTIT_ValorINSS As Double, iTIT_INSSRetido As Integer, sTIT_Observacao As String, sFORN_RazaoSocial As String, sFORN_NomeReduzido As String

Dim iIndice As Integer, alComando(0 To 26) As Long, alComando1(1 To 4) As Long

On Error GoTo Erro_RelFluxoCaixaContabil_Prepara

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 184230

    'Executa a abertura dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 184231
    Next
    
    'Obter NumIntRel
'    lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_PROX_REL_FLUXOCXCTB", lNumIntRel)
'    If lErro <> SUCESSO Then gError 184232

    lNumIntRel = 1
    lErro = Comando_Executar(alComando(13), "DELETE FROM RelFluxoCaixaCtbBxPag WHERE NumIntRel = 1")
    If lErro <> AD_SQL_SUCESSO Then gError 184278
    lErro = Comando_Executar(alComando(14), "DELETE FROM RelFluxoCaixaCtbBxRec WHERE NumIntRel = 1")
    If lErro <> AD_SQL_SUCESSO Then gError 184279
    lErro = Comando_Executar(alComando(15), "DELETE FROM RelFluxoCaixaCtbLctos WHERE NumIntRel = 1")
    If lErro <> AD_SQL_SUCESSO Then gError 184280
    lErro = Comando_Executar(alComando(16), "DELETE FROM RelFluxoCaixaCtbMovFin WHERE NumIntRel = 1")
    If lErro <> AD_SQL_SUCESSO Then gError 184281

    'obtem saldos inicial total
    For iIndice = 1 To 4
        alComando1(iIndice) = alComando(iIndice + 16)
    Next
    lErro = CF("CCI_ObterRelTes_Total", dtDataDe, dSaldoInicial, alComando1)
    If lErro <> SUCESSO Then gError 184285
    
    'obter os movimentos de conta corrente no período
    lErro = Comando_Executar(alComando(1), "SELECT NumMovto, Tipo, Valor, NumRefInterna FROM MovimentosContaCorrente WHERE Valor <> 0 AND EXCLUIDO = 0 AND DataMovimento BETWEEN ? AND ? ORDER BY DataMovimento, NumMovto", lMOV_NumMovto, iMOV_Tipo, dMOV_Valor, lMOV_NumRefInterna, dtDataDe, dtDataAte)
    If lErro <> AD_SQL_SUCESSO Then gError 184233

    lErro = Comando_BuscarProximo(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 184234

    Do While lErro <> AD_SQL_SEM_DADOS

        'registrar o movto de conta corrente
        lErro = Comando_Executar(alComando(2), "INSERT INTO RelFluxoCaixaCtbMovFin (NumIntRel, NumMovto) VALUES (?,?)", lNumIntRel, lMOV_NumMovto)
        If lErro <> AD_SQL_SUCESSO Then gError 184235

        Select Case iMOV_Tipo

            Case MOVCCI_SAQUE
                'incluir lancamentos contabeis do movimento
                lErro = RelFluxoCaixaContabil_Prepara3(lNumIntRel, lMOV_NumMovto, 8, 1, alComando, lMOV_NumMovto)
                If lErro <> SUCESSO Then gError 184236
            
            Case MOVCCI_DEPOSITO

                'incluir lancamentos contabeis do movimento
                lErro = RelFluxoCaixaContabil_Prepara3(lNumIntRel, lMOV_NumMovto, 7, 1, alComando, lMOV_NumMovto)
                If lErro <> SUCESSO Then gError 184237

            Case MOVCCI_SAIDA_TRANSFERENCIA
                
                'incluir lancamentos contabeis do movimento
                lErro = RelFluxoCaixaContabil_Prepara3(lNumIntRel, lMOV_NumMovto, 30, 1, alComando, lMOV_NumMovto)
                If lErro <> SUCESSO Then gError 184237

            Case MOVCCI_ENTRADA_TRANSFERENCIA
                
                'incluir lancamentos contabeis do movimento
                lErro = RelFluxoCaixaContabil_Prepara3(lNumIntRel, lMOV_NumMovto, 30, 1, alComando, lMOV_NumMovto - 1)
                If lErro <> SUCESSO Then gError 184237

            Case MOVCCI_PAGTO_ANTECIPADO
                
                'tratar a parte nao associada à baixas
                lErro = Comando_Executar(alComando(3), "SELECT SaldoNaoApropriado FROM PagtosAntecipados WHERE SaldoNaoApropriado <> 0 AND NumMovto = ?", _
                    dSaldoNaoApropriado, lMOV_NumMovto)
                If lErro <> AD_SQL_SUCESSO Then gError 184238
                
                lErro = Comando_BuscarProximo(alComando(3))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 184239

                If lErro = AD_SQL_SUCESSO Then
                
                    'obter o fator para aplicar sobre os lctos
                    dFator = dSaldoNaoApropriado / dMOV_Valor
                        
                    'incluir lancamentos contabeis do movimento
                    lErro = RelFluxoCaixaContabil_Prepara3(lNumIntRel, lMOV_NumMovto, 10, dFator, alComando, lMOV_NumMovto)
                    If lErro <> SUCESSO Then gError 184241
                
                End If
                
                'para a parte associada a baixas, pegar info dos titulos, parcelas, baixa, baixasparc
                lErro = RelFluxoCaixaContabil_Prepara1(lNumIntRel, lMOV_NumMovto, alComando)
                If lErro <> SUCESSO Then gError 184242

            Case MOVCCI_RECEB_ANTECIPADO
                
                'tratar a parte nao associada à baixas
                lErro = Comando_Executar(alComando(4), "SELECT SaldoNaoApropriado FROM RecebAntecipados WHERE SaldoNaoApropriado <> 0 AND NumMovto = ?", _
                    dSaldoNaoApropriado, lMOV_NumMovto)
                If lErro <> AD_SQL_SUCESSO Then gError 184243
                
                lErro = Comando_BuscarProximo(alComando(4))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 184244

                If lErro = AD_SQL_SUCESSO Then
                
                    'obter o fator para aplicar sobre os lctos
                    dFator = dSaldoNaoApropriado / dMOV_Valor
                        
                    'incluir lancamentos contabeis do movimento
                    lErro = RelFluxoCaixaContabil_Prepara3(lNumIntRel, lMOV_NumMovto, 11, dFator, alComando, lMOV_NumMovto)
                    If lErro <> SUCESSO Then gError 184246
                
                End If
                
                'para a parte associada a baixas, pegar info dos titulos, parcelas, baixa, baixasparc
                lErro = RelFluxoCaixaContabil_Prepara4(lNumIntRel, lMOV_NumMovto, alComando)
                If lErro <> SUCESSO Then gError 184247


            Case MOVCCI_PAGTO_TITULO_POR_CHEQUE, MOVCCI_PAGTO_TITULO_POR_BORDERO, MOVCCI_PAGTO_TITULO_POR_DINHEIRO
                
                'pegar info dos titulos, parcelas, baixa, baixasparc
                lErro = RelFluxoCaixaContabil_Prepara1(lNumIntRel, lMOV_NumMovto, alComando)
                If lErro <> SUCESSO Then gError 184248

            Case MOVCCI_RECEBIMENTO_TITULO, MOVCCI_CREDITO_RETORNO_COBRANCA, MOVCCI_CRED_RET_COBRANCA, MOVCCI_EXTRATO_CARTAO_CRED

                'pegar info dos titulos, parcelas, baixa, baixasparc
                lErro = RelFluxoCaixaContabil_Prepara4(lNumIntRel, lMOV_NumMovto, alComando)
                If lErro <> SUCESSO Then gError 184249
            
            Case MOVCCI_DEB_RET_COBRANCA

            Case MOVCCI_RECEBTO_CANCELA
'                'pegar info dos titulos, parcelas, baixa, baixasparc
'                lErro = RelFluxoCaixaContabil_Prepara5(lNumIntRel, lMOV_NumMovto, lMOV_NumRefInterna, alComando)
'                If lErro <> SUCESSO Then gError

            Case MOVCCI_BAIXA_RECEBANTECIPADO
                'criar registro informativo

            Case MOVCCI_BAIXA_DEBITOSRECCLI
                'criar registro informativo

            Case MOVCCI_BAIXA_PAGANTECIPADO
                'criar registro informativo

            Case MOVCCI_BAIXA_CREDITOSPAGFORN
                'criar registro informativo

            Case MOVCCI_CANC_BAIXA_PAGTO_ANTECIPADO
                'criar registro informativo
            
            'Case MOVCCI_CANC_PAGTO
            'Case MOVCCI_APLICACAO
            'Case MOVCCI_RESGATE
'            Case MOVCCI_RECEBTO_CANCELA
'                'pegar info dos titulos, parcelas, baixa, baixasparc
'                lErro = RelFluxoCaixaContabil_Prepara5(lNumIntRel, lMOV_NumMovto, lMOV_NumRefInterna, alComando)
'                If lErro <> SUCESSO Then gError

            Case Else
                gError 184250

        End Select

        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 184251

    Loop

    'Executa o fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    'fecha transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 184252

    RelFluxoCaixaContabil_Prepara = SUCESSO

    Exit Function

Erro_RelFluxoCaixaContabil_Prepara:

    RelFluxoCaixaContabil_Prepara = gErr

    Select Case gErr
    
        Case 184230
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 184231
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 184233, 184234, 184251
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCONTACORRENTE", gErr)
    
        Case 184235
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERT_RELFLUXOCAIXACTBMOVFIN", gErr)
            
        Case 184236, 184237, 184241, 184242, 184246 To 184249
        
        Case 184238, 184239
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PAGTOSANTECIPADOS", gErr)
    
        Case 184243, 184244
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RECEBANTECIPADOS", gErr)
    
        Case 184250
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPOMOVTOCTA_NAO_TRATADO", gErr, iMOV_Tipo)
            
        Case 184252
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case 184278
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_RELFLUXOCAIXACTBBXPAG", gErr)

        Case 184279
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_RELFLUXOCAIXACTBBXREC", gErr)

        Case 184280
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_RELFLUXOCAIXACTBLCTOS", gErr)

        Case 184281
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_RELFLUXOCAIXACTBMOVFIN", gErr)
            
        Case 184285 '

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 184253)

    End Select

    Call Transacao_Rollback

    'Executa o fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Private Function RelFluxoCaixaContabil_Prepara1(ByVal lNumIntRel As Long, ByVal lMOV_NumMovto As Long, alComando() As Long) As Long
'tratar as baixas no contas a pagar associadas a um movimento de conta corrente

Dim lErro As Long, dFator As Double
Dim lBX_NumIntBaixa As Long, dtBX_Data As Date, dtBX_DataContabil As Date, dtBX_DataRegistro As Date
Dim lBXPARC_NumIntDoc As Long, dBXPARC_ValorJuros As Double, dBXPARC_ValorMulta As Double, dBXPARC_ValorDesconto As Double, dBXPARC_ValorBaixado As Double, dBXPARC_ValorDiferenca As Double
Dim iPARC_NumParcela As Integer, dtPARC_DataVencimento As Date, dPARC_Valor As Double, lTIT_NumIntDoc As Long, iTIT_FilialEmpresa As Integer, lTIT_Fornecedor As Long, sTIT_SiglaDocumento As String, lTIT_NumTitulo As Long, dtTIT_DataEmissao As Date
Dim dTIT_ValorTotal  As Double, dTIT_ValorIRRF As Double, dTIT_PISRetido As Double, dTIT_ISSRetido As Double, dTIT_COFINSRetido As Double, dTIT_CSLLRetido As Double, dTIT_ValorINSS As Double, iTIT_INSSRetido As Integer, sTIT_Observacao As String
Dim sFORN_RazaoSocial As String, sFORN_NomeReduzido As String, lTIT_NumIntDocAnt As Long

Dim dValorBaixado As Double, dValorMulta As Double, dValorJuros As Double, dValorDesconto As Double, dValorDiferenca As Double
Dim dValorLiqTit As Double, dValorTotalTit As Double

On Error GoTo Erro_RelFluxoCaixaContabil_Prepara1
    
    lErro = Comando_Executar(alComando(5), "SELECT BX.NumIntBaixa, BXPARC.NumIntDoc, BXPARC.ValorJuros, BXPARC.ValorMulta, BXPARC.ValorDesconto, BXPARC.ValorBaixado, BXPARC.ValorDiferenca, " & _
        "TIT.NumIntDoc, TIT.ValorTotal, TIT.ValorIRRF, TIT.PISRetido, TIT.ISSRetido, TIT.COFINSRetido, TIT.CSLLRetido, TIT.ValorINSS, TIT.INSSRetido " & _
        "FROM titulospagtodos TIT, parcelaspagtodas PARC, baixaspag BX, baixasparcpag BXPARC " & _
        "WHERE TIT.NumIntDoc = PARC.NumIntTitulo AND BX.NumIntBaixa = BXPARC.numintbaixa AND PARC.numintdoc = BXPARC.numintparcela AND " & _
        "BXPARC.status<> 5 AND BX.status<>5 AND BX.NumMovCta = ? ORDER BY TIT.NumIntDoc, BX.NumIntBaixa, BXPARC.NumIntDoc", _
        lBX_NumIntBaixa, lBXPARC_NumIntDoc, dBXPARC_ValorJuros, dBXPARC_ValorMulta, dBXPARC_ValorDesconto, dBXPARC_ValorBaixado, dBXPARC_ValorDiferenca, _
        lTIT_NumIntDoc, dTIT_ValorTotal, dTIT_ValorIRRF, dTIT_PISRetido, dTIT_ISSRetido, dTIT_COFINSRetido, dTIT_CSLLRetido, dTIT_ValorINSS, iTIT_INSSRetido, _
        lMOV_NumMovto)
    If lErro <> AD_SQL_SUCESSO Then gError 184254
    
    lErro = Comando_BuscarProximo(alComando(5))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 184255
    
    If lErro <> AD_SQL_SEM_DADOS Then
    
        lTIT_NumIntDocAnt = lTIT_NumIntDoc
        dValorLiqTit = Arredonda_Moeda(dTIT_ValorTotal - dTIT_ValorIRRF - dTIT_PISRetido - dTIT_ISSRetido - dTIT_COFINSRetido - dTIT_CSLLRetido - IIf(iTIT_INSSRetido = 0, 0, dTIT_ValorINSS))
        dValorTotalTit = dTIT_ValorTotal
        
        Do While lErro <> AD_SQL_SEM_DADOS
        
            'incluir registro correspondente a baixaparc
            lErro = Comando_Executar(alComando(6), "INSERT INTO RelFluxoCaixaCtbBxPag (NumIntRel, MOV_NumMovto, TIT_NumIntDoc, BX_NumIntBaixa, BXPARC_NumIntDoc) VALUES (?,?,?,?,?)", _
                lNumIntRel, lMOV_NumMovto, lTIT_NumIntDoc, lBX_NumIntBaixa, lBXPARC_NumIntDoc)
            If lErro <> AD_SQL_SUCESSO Then gError 184256
            
            'se trocou de titulo
            If lTIT_NumIntDocAnt <> lTIT_NumIntDoc Then
            
                'inserir lctos contabeis do titulo anterior
                lErro = RelFluxoCaixaContabil_Prepara2(lNumIntRel, lMOV_NumMovto, 15, lTIT_NumIntDocAnt, dFator, alComando)
                If lErro <> SUCESSO Then gError 184257
                
                lTIT_NumIntDocAnt = lTIT_NumIntDoc
                dValorLiqTit = Arredonda_Moeda(dTIT_ValorTotal - dTIT_ValorIRRF - dTIT_PISRetido - dTIT_ISSRetido - dTIT_COFINSRetido - dTIT_CSLLRetido - IIf(iTIT_INSSRetido = 0, 0, dTIT_ValorINSS))
                dValorTotalTit = dTIT_ValorTotal
                
                'inicializar acumuladores
                dValorBaixado = 0
                dValorMulta = 0
                dValorJuros = 0
                dValorDesconto = 0
                dValorDiferenca = 0
                                    
            End If
            
            'acumula valores
            dValorBaixado = dValorBaixado + dBXPARC_ValorBaixado
            dValorMulta = dValorMulta + dBXPARC_ValorMulta
            dValorJuros = dValorJuros + dBXPARC_ValorJuros
            dValorDesconto = dValorDesconto + dBXPARC_ValorDesconto
            dValorDiferenca = dValorDiferenca + dBXPARC_ValorDiferenca
'            dFator = dValorBaixado / dValorLiqTit
            dFator = dValorBaixado / dValorTotalTit
            
            lErro = Comando_BuscarProximo(alComando(5))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 184258
        
        Loop
        
        'pesquisa e inclui lctos do ultimo titulo
        lErro = RelFluxoCaixaContabil_Prepara2(lNumIntRel, lMOV_NumMovto, 15, lTIT_NumIntDocAnt, dFator, alComando)
        If lErro <> SUCESSO Then gError 184259

    End If
    
    RelFluxoCaixaContabil_Prepara1 = SUCESSO

    Exit Function

Erro_RelFluxoCaixaContabil_Prepara1:

    RelFluxoCaixaContabil_Prepara1 = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 184260)

    End Select

    Exit Function

End Function

Private Function RelFluxoCaixaContabil_Prepara2(ByVal lNumIntRel As Long, ByVal lMOV_NumMovto As Long, ByVal iOrigem As Integer, ByVal lNumIntDoc As Long, ByVal dFator As Double, alComando() As Long) As Long
'registra os lctos contabeis identificados pelo numintdoc do lcto e sua origem

Dim lErro As Long, dValorLctoAux As Double
Dim iIndice As Integer, iTransacao As Integer
Dim iLCTO_FilialEmpresa As Integer, sLCTO_Origem As String, iLCTO_Exercicio As Integer, iLCTO_PeriodoLan As Integer, lLCTO_Doc As Long, iLCTO_Seq As Integer, sLCTO_Conta As String, dLCTO_Valor As Double
Dim lNumIntNFiscal As Long
Dim iOrigem1 As Integer
Dim iOrigem2 As Integer
Dim bValido As Boolean

On Error GoTo Erro_RelFluxoCaixaContabil_Prepara2
    
    'obter os lctos
    sLCTO_Origem = String(STRING_ORIGEM, 0)
    sLCTO_Conta = String(STRING_CONTA, 0)
    
    If giFilialEmpresa < Abs(giFilialAuxiliar) Then
        lErro = Comando_Executar(alComando(7), "SELECT LCTO.FilialEmpresa, LCTO.Origem, LCTO.Exercicio, LCTO.PeriodoLan, LCTO.Doc, LCTO.Seq, LCTO.Conta, LCTO.Valor, LCTO.Transacao " & _
            "FROM lancamentostodos LCTO, transacaoctb TCTB, transacaoctborigem TCTBO " & _
            "WHERE TCTBO.codigo = TCTB.origemlcto AND TCTB.codigo = LCTO.transacao AND " & _
            "TCTBO.Codigo = ? AND LCTO.numintdoc = ? AND LCTO.FilialEmpresa < ? ORDER BY LCTO.FilialEmpresa, LCTO.Origem, LCTO.Exercicio, LCTO.PeriodoLan, LCTO.Doc, LCTO.Seq", _
            iLCTO_FilialEmpresa, sLCTO_Origem, iLCTO_Exercicio, iLCTO_PeriodoLan, lLCTO_Doc, iLCTO_Seq, sLCTO_Conta, dLCTO_Valor, iTransacao, _
            iOrigem, lNumIntDoc, Abs(giFilialAuxiliar))
    Else
        lErro = Comando_Executar(alComando(7), "SELECT LCTO.FilialEmpresa, LCTO.Origem, LCTO.Exercicio, LCTO.PeriodoLan, LCTO.Doc, LCTO.Seq, LCTO.Conta, LCTO.Valor, LCTO.Transacao " & _
            "FROM lancamentostodos LCTO, transacaoctb TCTB, transacaoctborigem TCTBO " & _
            "WHERE TCTBO.codigo = TCTB.origemlcto AND TCTB.codigo = LCTO.transacao AND " & _
            "TCTBO.Codigo = ? AND LCTO.numintdoc = ? AND LCTO.FilialEmpresa > ? ORDER BY LCTO.FilialEmpresa, LCTO.Origem, LCTO.Exercicio, LCTO.PeriodoLan, LCTO.Doc, LCTO.Seq", _
            iLCTO_FilialEmpresa, sLCTO_Origem, iLCTO_Exercicio, iLCTO_PeriodoLan, lLCTO_Doc, iLCTO_Seq, sLCTO_Conta, dLCTO_Valor, iTransacao, _
            iOrigem, lNumIntDoc, Abs(giFilialAuxiliar))
    End If
    If lErro <> AD_SQL_SUCESSO Then gError 184261
    
    lErro = Comando_BuscarProximo(alComando(7))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 184262

    If lErro = AD_SQL_SEM_DADOS Then

        lErro = Comando_Executar(alComando(26), "SELECT NumIntDoc From NFiscal WHERE ClasseDocCPR = ? AND NumIntDocCPR = ?", lNumIntNFiscal, IIf(iOrigem = 15, 1, 2), lNumIntDoc)
        If lErro <> AD_SQL_SUCESSO Then gError 197683
    
        lErro = Comando_BuscarPrimeiro(alComando(26))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 197684

        If lErro = AD_SQL_SUCESSO Then
            
            If iOrigem = 16 Then
                iOrigem1 = 26
                iOrigem2 = 36
            ElseIf iOrigem = 15 Then
                iOrigem1 = 24
                iOrigem2 = 54
            End If
            
            If giFilialEmpresa < Abs(giFilialAuxiliar) Then
                lErro = Comando_Executar(alComando(7), "SELECT LCTO.FilialEmpresa, LCTO.Origem, LCTO.Exercicio, LCTO.PeriodoLan, LCTO.Doc, LCTO.Seq, LCTO.Conta, LCTO.Valor, LCTO.Transacao " & _
                    "FROM lancamentostodos LCTO " & _
                    "WHERE  (LCTO.transacao = ? Or LCTO.transacao = ?) AND " & _
                    " LCTO.numintdoc = ? AND LCTO.FilialEmpresa < ? ORDER BY LCTO.FilialEmpresa, LCTO.Origem, LCTO.Exercicio, LCTO.PeriodoLan, LCTO.Doc, LCTO.Seq", _
                    iLCTO_FilialEmpresa, sLCTO_Origem, iLCTO_Exercicio, iLCTO_PeriodoLan, lLCTO_Doc, iLCTO_Seq, sLCTO_Conta, dLCTO_Valor, iTransacao, _
                    iOrigem1, iOrigem2, lNumIntNFiscal, Abs(giFilialAuxiliar))
            Else
                lErro = Comando_Executar(alComando(7), "SELECT LCTO.FilialEmpresa, LCTO.Origem, LCTO.Exercicio, LCTO.PeriodoLan, LCTO.Doc, LCTO.Seq, LCTO.Conta, LCTO.Valor, LCTO.Transacao " & _
                    "FROM lancamentostodos LCTO " & _
                    "WHERE  (LCTO.transacao = ? Or LCTO.transacao = ?) AND " & _
                    " LCTO.numintdoc = ? AND LCTO.FilialEmpresa > ? ORDER BY LCTO.FilialEmpresa, LCTO.Origem, LCTO.Exercicio, LCTO.PeriodoLan, LCTO.Doc, LCTO.Seq", _
                    iLCTO_FilialEmpresa, sLCTO_Origem, iLCTO_Exercicio, iLCTO_PeriodoLan, lLCTO_Doc, iLCTO_Seq, sLCTO_Conta, dLCTO_Valor, iTransacao, _
                    iOrigem1, iOrigem2, lNumIntNFiscal, Abs(giFilialAuxiliar))
            End If
            
            If lErro <> AD_SQL_SUCESSO Then gError 197685

            lErro = Comando_BuscarPrimeiro(alComando(7))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 197686

        End If

    End If
    
    'incluir lctos
    Do While lErro <> AD_SQL_SEM_DADOS

        dValorLctoAux = Arredonda_Moeda(dLCTO_Valor * dFator)
        
        lErro = CF("RelFluxoCaixaContabil_Prepara2_Valida", sLCTO_Conta, dLCTO_Valor, bValido)
        If lErro <> SUCESSO Then gError 196990
        
        If bValido Then
        
            iIndice = iIndice + 1
            
            lErro = Comando_Executar(alComando(8), "INSERT INTO RelFluxoCaixaCtbLctos (NumIntRel, NumMovto, Transacao, NumIntDoc, Indice, FilialEmpresa, Origem, Exercicio, PeriodoLan, Doc, Seq, Conta, Valor, ValorRateado) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                lNumIntRel, lMOV_NumMovto, iTransacao, lNumIntDoc, iIndice, iLCTO_FilialEmpresa, sLCTO_Origem, iLCTO_Exercicio, iLCTO_PeriodoLan, lLCTO_Doc, iLCTO_Seq, sLCTO_Conta, dLCTO_Valor, dValorLctoAux)
            If lErro <> AD_SQL_SUCESSO Then gError 184263

        End If
        
        lErro = Comando_BuscarProximo(alComando(7))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 184264

    Loop
    
    RelFluxoCaixaContabil_Prepara2 = SUCESSO

    Exit Function

Erro_RelFluxoCaixaContabil_Prepara2:

    RelFluxoCaixaContabil_Prepara2 = gErr

    Select Case gErr

        Case 196990

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 184265)

    End Select

    Exit Function

End Function

Public Function RelFluxoCaixaContabil_Prepara2_Valida(ByVal sConta As String, dValor As Double, bValido As Boolean) As Long
    bValido = True
    RelFluxoCaixaContabil_Prepara2_Valida = SUCESSO
End Function

Private Function RelFluxoCaixaContabil_Prepara3(ByVal lNumIntRel As Long, ByVal lMOV_NumMovto As Long, ByVal iTransacao As Integer, ByVal dFator As Double, alComando() As Long, ByVal lNumIntDoc As Long) As Long
'registra lancamentos contabeis ligados a movto de conta corrente

Dim lErro As Long, dValorRateado As Double
Dim iIndice As Integer
Dim iLCTO_FilialEmpresa As Integer, sLCTO_Origem As String, iLCTO_Exercicio As Integer, iLCTO_PeriodoLan As Integer, lLCTO_Doc As Long, iLCTO_Seq As Integer, sLCTO_Conta As String, dLCTO_Valor As Double

On Error GoTo Erro_RelFluxoCaixaContabil_Prepara3
    
    'obter lctos contabeis
    sLCTO_Origem = String(STRING_ORIGEM, 0)
    sLCTO_Conta = String(STRING_CONTA, 0)
    
    If giFilialEmpresa < Abs(giFilialAuxiliar) Then
        lErro = Comando_Executar(alComando(9), "SELECT FilialEmpresa, Origem, Exercicio, PeriodoLan, Doc, Seq, Conta, Valor FROM LancamentosTodos WHERE Transacao = ? AND NumIntDoc = ? AND FilialEmpresa < ?", _
            iLCTO_FilialEmpresa, sLCTO_Origem, iLCTO_Exercicio, iLCTO_PeriodoLan, lLCTO_Doc, iLCTO_Seq, sLCTO_Conta, dLCTO_Valor, iTransacao, lNumIntDoc, Abs(giFilialAuxiliar))
    Else
        lErro = Comando_Executar(alComando(9), "SELECT FilialEmpresa, Origem, Exercicio, PeriodoLan, Doc, Seq, Conta, Valor FROM LancamentosTodos WHERE Transacao = ? AND NumIntDoc = ? AND FilialEmpresa > ?", _
            iLCTO_FilialEmpresa, sLCTO_Origem, iLCTO_Exercicio, iLCTO_PeriodoLan, lLCTO_Doc, iLCTO_Seq, sLCTO_Conta, dLCTO_Valor, iTransacao, lNumIntDoc, Abs(giFilialAuxiliar))
    End If
    If lErro <> AD_SQL_SUCESSO Then gError 184266

    lErro = Comando_BuscarProximo(alComando(9))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 184267

    'incluir lctos
    Do While lErro <> AD_SQL_SEM_DADOS

        If (iTransacao <> 30 Or ((lMOV_NumMovto = lNumIntDoc And dLCTO_Valor > 0) Or ((lMOV_NumMovto - 1) = lNumIntDoc) And dLCTO_Valor < 0)) Then
        
            dValorRateado = Arredonda_Moeda(dLCTO_Valor * dFator)
            
            iIndice = iIndice + 1
            
            lErro = Comando_Executar(alComando(10), "INSERT INTO RelFluxoCaixaCtbLctos (NumIntRel, NumMovto, Transacao, NumIntDoc, Indice, FilialEmpresa, Origem, Exercicio, PeriodoLan, Doc, Seq, Conta, Valor, ValorRateado) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                lNumIntRel, lMOV_NumMovto, iTransacao, lNumIntDoc, iIndice, iLCTO_FilialEmpresa, sLCTO_Origem, iLCTO_Exercicio, iLCTO_PeriodoLan, lLCTO_Doc, iLCTO_Seq, sLCTO_Conta, dLCTO_Valor, dValorRateado)
            If lErro <> AD_SQL_SUCESSO Then gError 184268

        End If
        
        lErro = Comando_BuscarProximo(alComando(9))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 184269

    Loop
    
    RelFluxoCaixaContabil_Prepara3 = SUCESSO

    Exit Function

Erro_RelFluxoCaixaContabil_Prepara3:

    RelFluxoCaixaContabil_Prepara3 = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 184270)

    End Select

    Exit Function

End Function

Private Function RelFluxoCaixaContabil_Prepara4(ByVal lNumIntRel As Long, ByVal lMOV_NumMovto As Long, alComando() As Long) As Long
'tratar as baixas no contas a receber associadas a um movimento de conta corrente

Dim lErro As Long, dFator As Double
Dim lBX_NumIntBaixa As Long, dtBX_Data As Date, dtBX_DataContabil As Date, dtBX_DataRegistro As Date
Dim lBXPARC_NumIntDoc As Long, dBXPARC_ValorJuros As Double, dBXPARC_ValorMulta As Double, dBXPARC_ValorDesconto As Double, dBXPARC_ValorBaixado As Double, dBXPARC_ValorRecebido As Double
Dim iPARC_NumParcela As Integer, dtPARC_DataVencimento As Date, dPARC_Valor As Double, lTIT_NumIntDoc As Long, iTIT_FilialEmpresa As Integer, lTIT_Cliente As Long, sTIT_SiglaDocumento As String, lTIT_NumTitulo As Long, dtTIT_DataEmissao As Date
Dim dTIT_Valor As Double, dTIT_ValorIRRF As Double, dTIT_PISRetido As Double, dTIT_ISSRetido As Double, dTIT_COFINSRetido As Double, dTIT_CSLLRetido As Double, dTIT_ValorINSS As Double, iTIT_INSSRetido As Integer, sTIT_Observacao As String
Dim sCLI_RazaoSocial As String, sCLI_NomeReduzido As String, lTIT_NumIntDocAnt As Long

Dim dValorBaixado As Double, dValorMulta As Double, dValorJuros As Double, dValorDesconto As Double, dValorRecebido As Double
Dim dValorLiqTit As Double

On Error GoTo Erro_RelFluxoCaixaContabil_Prepara4
    
    lErro = Comando_Executar(alComando(11), "SELECT BX.NumIntBaixa, BXPARC.NumIntDoc, BXPARC.ValorJuros, BXPARC.ValorMulta, BXPARC.ValorDesconto, BXPARC.ValorBaixado, BXPARC.ValorRecebido, " & _
        "TIT.NumIntDoc, TIT.Valor, TIT.ValorIRRF, TIT.PISRetido, TIT.ISSRetido, TIT.COFINSRetido, TIT.CSLLRetido, TIT.ValorINSS, TIT.INSSRetido " & _
        "FROM titulosrectodos TIT, parcelasrectodas PARC, baixasrec BX, baixasparcrec BXPARC " & _
        "WHERE TIT.NumIntDoc = PARC.NumIntTitulo AND BX.NumIntBaixa = BXPARC.numintbaixa AND PARC.numintdoc = BXPARC.numintparcela AND " & _
        "BXPARC.status<> 5 AND BX.status<>5 AND BX.NumMovCta = ? ORDER BY TIT.NumIntDoc, BX.NumIntBaixa, BXPARC.NumIntDoc", _
        lBX_NumIntBaixa, lBXPARC_NumIntDoc, dBXPARC_ValorJuros, dBXPARC_ValorMulta, dBXPARC_ValorDesconto, dBXPARC_ValorBaixado, dBXPARC_ValorRecebido, _
        lTIT_NumIntDoc, dTIT_Valor, dTIT_ValorIRRF, dTIT_PISRetido, dTIT_ISSRetido, dTIT_COFINSRetido, dTIT_CSLLRetido, dTIT_ValorINSS, iTIT_INSSRetido, _
        lMOV_NumMovto)
    If lErro <> AD_SQL_SUCESSO Then gError 184271
    
    lErro = Comando_BuscarProximo(alComando(11))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 184272
    
    If lErro <> AD_SQL_SEM_DADOS Then
    
        lTIT_NumIntDocAnt = lTIT_NumIntDoc
        dValorLiqTit = Arredonda_Moeda(dTIT_Valor - dTIT_ValorIRRF - dTIT_PISRetido - dTIT_ISSRetido - dTIT_COFINSRetido - dTIT_CSLLRetido - IIf(iTIT_INSSRetido = 0, 0, dTIT_ValorINSS))
        
        Do While lErro <> AD_SQL_SEM_DADOS
        
            'incluir registro correspondente a baixaparc
            lErro = Comando_Executar(alComando(12), "INSERT INTO RelFluxoCaixaCtbBxRec (NumIntRel, MOV_NumMovto, TIT_NumIntDoc, BX_NumIntBaixa, BXPARC_NumIntDoc) VALUES (?,?,?,?,?)", _
                lNumIntRel, lMOV_NumMovto, lTIT_NumIntDoc, lBX_NumIntBaixa, lBXPARC_NumIntDoc)
            If lErro <> AD_SQL_SUCESSO Then gError 184273
                    
            'se trocou de titulo
            If lTIT_NumIntDocAnt <> lTIT_NumIntDoc Then
            
                'inserir lctos contabeis do titulo anterior
                lErro = RelFluxoCaixaContabil_Prepara2(lNumIntRel, lMOV_NumMovto, 16, lTIT_NumIntDocAnt, dFator, alComando)
                If lErro <> SUCESSO Then gError 184274
                                    
                lTIT_NumIntDocAnt = lTIT_NumIntDoc
                dValorLiqTit = Arredonda_Moeda(dTIT_Valor - dTIT_ValorIRRF - dTIT_PISRetido - dTIT_ISSRetido - dTIT_COFINSRetido - dTIT_CSLLRetido - IIf(iTIT_INSSRetido = 0, 0, dTIT_ValorINSS))
                
                'inicializar acumuladores
                dValorBaixado = 0
                dValorMulta = 0
                dValorJuros = 0
                dValorDesconto = 0
                dValorRecebido = 0
                                    
            End If
            
            'acumula valores
            dValorBaixado = dValorBaixado + dBXPARC_ValorBaixado
            dValorMulta = dValorMulta + dBXPARC_ValorMulta
            dValorJuros = dValorJuros + dBXPARC_ValorJuros
            dValorDesconto = dValorDesconto + dBXPARC_ValorDesconto
            dValorRecebido = dValorRecebido + dBXPARC_ValorRecebido
            If dValorLiqTit <> 0 Then
                dFator = dValorBaixado / dValorLiqTit
            Else
                dFator = 1
            End If
            
            lErro = Comando_BuscarProximo(alComando(11))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 184275
        
        Loop
        
        'pesquisa e inclui lctos do ultimo titulo
        lErro = RelFluxoCaixaContabil_Prepara2(lNumIntRel, lMOV_NumMovto, 16, lTIT_NumIntDocAnt, dFator, alComando)
        If lErro <> SUCESSO Then gError 184276

    End If
    
    RelFluxoCaixaContabil_Prepara4 = SUCESSO

    Exit Function

Erro_RelFluxoCaixaContabil_Prepara4:

    RelFluxoCaixaContabil_Prepara4 = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 184277)

    End Select

    Exit Function

End Function

'Private Function RelFluxoCaixaContabil_Prepara5(ByVal lNumIntRel As Long, ByVal lMOV_NumMovto As Long, ByVal lMOV_NumRefInterna As Long, alComando() As Long)
''tratar os cancelamentos de baixas no contas a receber associadas a um movimento de conta corrente
'
'Dim lErro As Long, dFator As Double
'Dim lBX_NumIntBaixa As Long, dtBX_Data As Date, dtBX_DataContabil As Date, dtBX_DataRegistro As Date
'Dim lBXPARC_NumIntDoc As Long, dBXPARC_ValorJuros As Double, dBXPARC_ValorMulta As Double, dBXPARC_ValorDesconto As Double, dBXPARC_ValorBaixado As Double, dBXPARC_ValorRecebido As Double
'Dim iPARC_NumParcela As Integer, dtPARC_DataVencimento As Date, dPARC_Valor As Double, lTIT_NumIntDoc As Long, iTIT_FilialEmpresa As Integer, lTIT_Cliente As Long, sTIT_SiglaDocumento As String, lTIT_NumTitulo As Long, dtTIT_DataEmissao As Date
'Dim dTIT_Valor As Double, dTIT_ValorIRRF As Double, dTIT_PISRetido As Double, dTIT_ISSRetido As Double, dTIT_COFINSRetido As Double, dTIT_CSLLRetido As Double, dTIT_ValorINSS As Double, iTIT_INSSRetido As Integer, sTIT_Observacao As String
'Dim sCLI_RazaoSocial As String, sCLI_NomeReduzido As String, lTIT_NumIntDocAnt As Long
'
'Dim dValorBaixado As Double, dValorMulta As Double, dValorJuros As Double, dValorDesconto As Double, dValorRecebido As Double
'Dim dValorLiqTit As Double
'
'On Error GoTo Erro_RelFluxoCaixaContabil_Prepara5
'
'    lErro = Comando_Executar(alComando(11), "SELECT BXRECCANC.NumIntDoc BXRECCANC_NumIntDoc, BXPARC.NumIntDoc, BXPARC.ValorJuros, BXPARC.ValorMulta, BXPARC.ValorDesconto, BXPARC.ValorBaixado, BXPARC.ValorRecebido, " & _
'        "TIT.NumIntDoc, TIT.Valor, TIT.ValorIRRF, TIT.PISRetido, TIT.ISSRetido, TIT.COFINSRetido, TIT.CSLLRetido, TIT.ValorINSS, TIT.INSSRetido " & _
'        "FROM titulosrectodos TIT, parcelasrectodas PARC, BaixasParcRecCanc BXRECCANC, baixasparcreccancitem BXRECCANCITEM, BaixasParcRec BXPARC " & _
'        "WHERE TIT.NumIntDoc = PARC.NumIntTitulo AND BX.NumIntBaixa = BXPARC.numintbaixa AND PARC.numintdoc = BXPARC.numintparcela AND " & _
'        "BXPARC.status<> 5 AND BX.status<>5 AND BX.NumMovCta = ? ORDER BY TIT.NumIntDoc, BX.NumIntBaixa, BXPARC.NumIntDoc", _
'        lBX_NumIntBaixa, lBXPARC_NumIntDoc, dBXPARC_ValorJuros, dBXPARC_ValorMulta, dBXPARC_ValorDesconto, dBXPARC_ValorBaixado, dBXPARC_ValorRecebido, _
'        lTIT_NumIntDoc, dTIT_Valor, dTIT_ValorIRRF, dTIT_PISRetido, dTIT_ISSRetido, dTIT_COFINSRetido, dTIT_CSLLRetido, dTIT_ValorINSS, iTIT_INSSRetido, _
'        lMOV_NumMovto)
'    If lErro <> AD_SQL_SUCESSO Then gError 184271
'
'    lErro = Comando_BuscarProximo(alComando(11))
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 184272
'
'    If lErro <> AD_SQL_SEM_DADOS Then
'
'        lTIT_NumIntDocAnt = lTIT_NumIntDoc
'        dValorLiqTit = Arredonda_Moeda(dTIT_Valor - dTIT_ValorIRRF - dTIT_PISRetido - dTIT_ISSRetido - dTIT_COFINSRetido - dTIT_CSLLRetido - IIf(iTIT_INSSRetido = 0, 0, dTIT_ValorINSS))
'
'        Do While lErro <> AD_SQL_SEM_DADOS
'
'            'incluir registro correspondente a baixaparc
'            lErro = Comando_Executar(alComando(12), "INSERT INTO RelFluxoCaixaCtbBxRec (NumIntRel, MOV_NumMovto, TIT_NumIntDoc, BX_NumIntBaixa, BXPARC_NumIntDoc) VALUES (?,?,?,?,?)", _
'lNumIntRel, lMOV_NumMovto, lTIT_NumIntDoc, lBX_NumIntBaixa, lBXPARC_NumIntDoc)
'            If lErro <> AD_SQL_SUCESSO Then gError 184273
'
'            'se trocou de titulo
'            If lTIT_NumIntDocAnt <> lTIT_NumIntDoc Then
'
'                'inserir lctos contabeis do titulo anterior
'                lErro = RelFluxoCaixaContabil_Prepara2(lNumIntRel, lMOV_NumMovto, 16, lTIT_NumIntDocAnt, dFator, alComando)
'                If lErro <> SUCESSO Then gError 184274
'
'                lTIT_NumIntDocAnt = lTIT_NumIntDoc
'                dValorLiqTit = Arredonda_Moeda(dTIT_Valor - dTIT_ValorIRRF - dTIT_PISRetido - dTIT_ISSRetido - dTIT_COFINSRetido - dTIT_CSLLRetido - IIf(iTIT_INSSRetido = 0, 0, dTIT_ValorINSS))
'
'                'inicializar acumuladores
'                dValorBaixado = 0
'                dValorMulta = 0
'                dValorJuros = 0
'                dValorDesconto = 0
'                dValorRecebido = 0
'
'            End If
'
'            'acumula valores
'            dValorBaixado = dValorBaixado + dBXPARC_ValorBaixado
'            dValorMulta = dValorMulta + dBXPARC_ValorMulta
'            dValorJuros = dValorJuros + dBXPARC_ValorJuros
'            dValorDesconto = dValorDesconto + dBXPARC_ValorDesconto
'            dValorRecebido = dValorRecebido + dBXPARC_ValorRecebido
'            dFator = dValorBaixado / dValorLiqTit
'
'            lErro = Comando_BuscarProximo(alComando(11))
'            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 184275
'
'        Loop
'
'        'pesquisa e inclui lctos do ultimo titulo
'        lErro = RelFluxoCaixaContabil_Prepara2(lNumIntRel, lMOV_NumMovto, 16, lTIT_NumIntDocAnt, dFator, alComando)
'        If lErro <> SUCESSO Then gError 184276
'
'    End If
'
'    RelFluxoCaixaContabil_Prepara5 = SUCESSO
'
'    Exit Function
'
'Erro_RelFluxoCaixaContabil_Prepara5:
'
'    RelFluxoCaixaContabil_Prepara5 = gErr
'
'    Select Case gErr
'
'        Case Else
'            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 184277)
'
'    End Select
'
'    Exit Function
'
'End Function
'
'
'
Public Function Trata_Exclusao_Do_Destino(ByVal objDestino As Object) As Long
    Trata_Exclusao_Do_Destino = SUCESSO
End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'EXCLUSÃO
Public Function RPS_Exclui(ByVal objRPS As ClassRPS) As Long

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_RPS_Exclui

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 192382

    lErro = CF("RPS_Exclui_EmTrans", objRPS)
    If lErro <> SUCESSO Then gError 192383

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 192384

    RPS_Exclui = SUCESSO

    Exit Function

Erro_RPS_Exclui:

    RPS_Exclui = gErr

    Select Case gErr

        Case 192382
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 192383

        Case 192384
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 192427)

    End Select

    'Desfaz Transação
    Call Transacao_Rollback

    Exit Function

End Function

Public Function RPS_Exclui_EmTrans(ByVal objRPS As ClassRPS) As Long

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim lNumero As Long

On Error GoTo Erro_RPS_Exclui_EmTrans

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 192385
    Next

    'Le a tabelaRPS
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Numero FROM RPS WHERE Serie= ?  AND Numero= ?  AND DataEmissao= ? AND FilialEmpresa = ? ", _
                0, lNumero, objRPS.sSerie, objRPS.lNumero, objRPS.dtDataEmissao, objRPS.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 192386

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 192387

    'Se não existir => ERRO
    If lErro = AD_SQL_SEM_DADOS Then gError 192388

    'Trava registro contra alterações/Leituras
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> SUCESSO Then gError 192389

    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM RPS", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 192390

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    RPS_Exclui_EmTrans = SUCESSO

    Exit Function

Erro_RPS_Exclui_EmTrans:

    RPS_Exclui_EmTrans = gErr

    Select Case gErr

        Case 192385
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 192386, 192387
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RPS", gErr)

        Case 192388
            Call Rotina_Erro(vbOKOnly, "ERRO_RPS_NAO_CADASTRADO", gErr, objRPS.sSerie, objRPS.lNumero, objRPS.dtDataEmissao)

        Case 192389
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_RPS", gErr)

        Case 192390
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_RPS", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 192428)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'GRAVAÇÃO
Public Function RPS_Grava(ByVal objRPS As ClassRPS) As Long

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_RPS_Grava

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 192391

    lErro = CF("RPS_Grava_EmTrans", objRPS)
    If lErro <> SUCESSO Then gError 192392

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 192393

    RPS_Grava = SUCESSO

    Exit Function

Erro_RPS_Grava:

    RPS_Grava = gErr

    Select Case gErr

        Case 192391
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 192392

        Case 192393
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 192429)

    End Select

    'Desfaz Transação
    Call Transacao_Rollback

    Exit Function

End Function

Public Function RPS_Grava_EmTrans(ByVal objRPS As ClassRPS) As Long

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim lNumIntDoc As Long

On Error GoTo Erro_RPS_Grava_EmTrans

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 192395
    Next

    'Le a tabelaRPS
    lErro = Comando_ExecutarPos(alComando(0), "SELECT NumIntDoc FROM RPS WHERE Serie= ?  AND Numero= ?  AND DataEmissao= ? AND FilialEmpresa = ?", _
                0, lNumIntDoc, objRPS.sSerie, objRPS.lNumero, objRPS.dtDataEmissao, objRPS.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 192396

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 192397

    'Se existir => UPDATE, senão => INSERT
    If lErro = AD_SQL_SUCESSO Then

        'Trava registro contra alterações/Leituras
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> SUCESSO Then gError 192398

        lErro = Comando_ExecutarPos(alComando(1), "UPDATE RPS SET Tipo = ?, Situacao= ? , ValorServico= ? , ValorDeducao= ? , CodigoServico= ? , " & _
                "Aliquota= ? , ISSRetido= ? , TipoCGC= ? , CGC= ? , InscricaoMunicipal= ? , " & _
                "InscricaoEstadual= ? , RazaoSocial= ? , Endereco= ? , EndNumero= ? , EndComplemento= ? , " & _
                "Bairro= ? , Cidade= ? , UF= ? , CEP= ? , Email= ? , " & _
                "Discriminacao= ?, NumIntDocNF = ?, Cliente = ?, FilialCliente = ?, DataUltAlteracao = ? , HoraUltAlteracao = ?, Enviado = ?, ValorCofins = ?, ValorCSLL = ?, ValorINSS = ?, ValorIRPJ = ?, ValorPIS = ? ", alComando(0), _
                objRPS.sTipo, objRPS.sSituacao, objRPS.dValorServico, objRPS.dValorDeducao, objRPS.lCodigoServico, _
                objRPS.dAliquota, objRPS.iISSRetido, objRPS.iTipoCGC, objRPS.sCgc, objRPS.sInscricaoMunicipal, _
                objRPS.sInscricaoEstadual, objRPS.sRazaoSocial, objRPS.sEndereco, objRPS.sEndNumero, objRPS.sEndComplemento, _
                objRPS.sBairro, objRPS.sCidade, objRPS.sUF, objRPS.sCEP, objRPS.sEmail, _
                objRPS.sDiscriminacao, objRPS.lNumIntDocNF, objRPS.lCliente, objRPS.iFilialCliente, Date, CDbl(Time), DESMARCADO, objRPS.dValorCofins, objRPS.dValorCSLL, objRPS.dValorINSS, objRPS.dValorIRPJ, objRPS.dValorPIS)
        If lErro <> AD_SQL_SUCESSO Then gError 192399
        
        objRPS.lNumIntDoc = lNumIntDoc

    Else

        'Obter NumIntDoc
        lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_INT_PROX_RPS", lNumIntDoc)
        If lErro <> SUCESSO Then gError 192394

        objRPS.lNumIntDoc = lNumIntDoc

        lErro = Comando_Executar(alComando(1), "INSERT INTO RPS( NumIntDoc, Tipo, Serie, Numero, DataEmissao, FilialEmpresa, " & _
                "Situacao, ValorServico, ValorDeducao, CodigoServico, Aliquota, " & _
                "ISSRetido, TipoCGC, CGC, InscricaoMunicipal, InscricaoEstadual, " & _
                "RazaoSocial, Endereco, EndNumero, EndComplemento, Bairro, " & _
                "Cidade, UF, CEP, Email, Discriminacao, NumIntDocNF, Cliente, FilialCliente,DataUltAlteracao,HoraUltAlteracao, Enviado, ValorCofins, ValorCSLL, ValorINSS, ValorIRPJ, ValorPIS) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                objRPS.lNumIntDoc, objRPS.sTipo, objRPS.sSerie, objRPS.lNumero, objRPS.dtDataEmissao, objRPS.iFilialEmpresa, _
                objRPS.sSituacao, objRPS.dValorServico, objRPS.dValorDeducao, objRPS.lCodigoServico, objRPS.dAliquota, _
                objRPS.iISSRetido, objRPS.iTipoCGC, objRPS.sCgc, objRPS.sInscricaoMunicipal, objRPS.sInscricaoEstadual, _
                objRPS.sRazaoSocial, objRPS.sEndereco, objRPS.sEndNumero, objRPS.sEndComplemento, objRPS.sBairro, _
                objRPS.sCidade, objRPS.sUF, objRPS.sCEP, objRPS.sEmail, left(objRPS.sDiscriminacao, STRING_RPS_DISCRIMINACAO), objRPS.lNumIntDocNF, objRPS.lCliente, objRPS.iFilialCliente, Date, CDbl(Time), DESMARCADO, objRPS.dValorCofins, objRPS.dValorCSLL, objRPS.dValorINSS, objRPS.dValorIRPJ, objRPS.dValorPIS)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 192400

    End If

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    RPS_Grava_EmTrans = SUCESSO

    Exit Function

Erro_RPS_Grava_EmTrans:

    RPS_Grava_EmTrans = gErr

    Select Case gErr

        Case 192394

        Case 192395
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 192396, 192397
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RPS", gErr)

        Case 192398
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_RPS", gErr)

        Case 192399
            Call Rotina_Erro(vbOKOnly, "ERRO_UPDATE_RPS", gErr)

        Case 192400
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_RPS", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 192430)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function RPS_Monta_Registro_Tipo1(ByVal objRPSCab As ClassRPSCab, sRegistro As String, objFilialEmpresa As AdmFiliais, Optional iCidade As Integer = RPS_CIDADE_SAO_PAULO)

Dim lErro As Long

On Error GoTo Erro_RPS_Monta_Registro_Tipo1

    sRegistro = "1"
    
    Select Case iCidade
        
        Case RPS_CIDADE_RECIFE
            sRegistro = sRegistro & objRPSCab.sVersao
            sRegistro = sRegistro & FormataCpoNum(objRPSCab.lInscricaoMunicipal, 15)
            sRegistro = sRegistro & FormataCpoData(objRPSCab.dtDataInicio)
            sRegistro = sRegistro & FormataCpoData(objRPSCab.dtDataFim)
        
        Case RPS_CIDADE_VOLTA_REDONDA
            sRegistro = sRegistro & objRPSCab.sVersao
            sRegistro = sRegistro & FormataCpoNum(objRPSCab.lInscricaoMunicipal, 10)
        
        Case RPS_CIDADE_BARUERI
            sRegistro = sRegistro & FormataCpoNum(objRPSCab.lInscricaoMunicipal, 7)
            sRegistro = sRegistro & objRPSCab.sVersao
            sRegistro = sRegistro & Format(Date, "YYYYMMDD") & left(CStr(CInt(CDbl(Time) * 1000)), 3)
            
        Case RPS_CIDADE_TAUBATE
            sRegistro = "10" & "|"
            sRegistro = sRegistro & FormataCpoNum(objFilialEmpresa.sCgc, 14) & "|"
            sRegistro = sRegistro & Format(objRPSCab.dtDataInicio, "dd/mm/yyyy") & "|"
            sRegistro = sRegistro & Format(objRPSCab.dtDataFim, "dd/mm/yyyy") & "|"
            
            If objFilialEmpresa.iSuperSimples = MARCADO Then
                sRegistro = sRegistro & "4" & "|" '5-Tipo de Tributacao do prestador
                sRegistro = sRegistro & Format(objFilialEmpresa.dtDataJucerja, "dd/mm/yyyy") & "|" '6-data do Simples ***Improvisado
                sRegistro = sRegistro & Format(objFilialEmpresa.dISSPercPadrao * 100, "fixed") & "|"  '7-alíquota do Simples - isenção parcial
            Else
                sRegistro = sRegistro & "1" & "|" '5-Tipo de Tributacao do prestador
                sRegistro = sRegistro & "" & "|" '6-data do Simples
                sRegistro = sRegistro & "" & "|" '7-alíquota do Simples - isenção parcial
            End If
            sRegistro = sRegistro & objRPSCab.sVersao '8-Versão
      
        Case Else 'RPS_CIDADE_SAO_PAULO
            sRegistro = sRegistro & objRPSCab.sVersao
            sRegistro = sRegistro & FormataCpoNum(objRPSCab.lInscricaoMunicipal, 8)
            sRegistro = sRegistro & FormataCpoData(objRPSCab.dtDataInicio)
            sRegistro = sRegistro & FormataCpoData(objRPSCab.dtDataFim)
        
    End Select
    
    RPS_Monta_Registro_Tipo1 = SUCESSO

    Exit Function

Erro_RPS_Monta_Registro_Tipo1:

    RPS_Monta_Registro_Tipo1 = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 192432)

    End Select

    Exit Function
    
End Function

Private Function RPS_Monta_Registro_Tipo2(ByVal objRPS As ClassRPS, sRegistro As String, Optional iCidade As Integer = RPS_CIDADE_SAO_PAULO)

Dim lErro As Long
Dim bMunicipioSP As Boolean
Dim dtDataVencimento As Date
Dim objParcRec As ClassParcelaReceber
Dim sInstrucoesPagto As String
Dim iNumParcela As Integer
Dim objItemNF As ClassItemNF
Dim objProduto As ClassProduto
Dim objCondicaoPagto As New ClassCondicaoPagto
Dim sCidade As String, sUF As String
Dim objNFe As New ClassNFe
Dim sTelefone As String

On Error GoTo Erro_RPS_Monta_Registro_Tipo2

    sRegistro = "2"
    
    Select Case iCidade
        
        Case RPS_CIDADE_RECIFE
            sRegistro = sRegistro & CStr(IIf(objRPS.sTipo = "RPS", 0, 1))
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sSerie, 5)
            sRegistro = sRegistro & FormataCpoNum(objRPS.lNumero, 15)
            sRegistro = sRegistro & FormataCpoData(objRPS.dtDataEmissao)
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sSituacao, 1)
            sRegistro = sRegistro & FormataCpoValor(objRPS.dValorServico, 15)
            sRegistro = sRegistro & FormataCpoValor(objRPS.dValorDeducao, 15)
            sRegistro = sRegistro & FormataCpoNum(objRPS.lCodigoServico, 8)
            sRegistro = sRegistro & FormataCpoValor(objRPS.dAliquota * 100, 5)
            sRegistro = sRegistro & FormataCpoNum(IIf(objRPS.iISSRetido = 2, 0, objRPS.iISSRetido), 1)
            sRegistro = sRegistro & FormataCpoNum(objRPS.iTipoCGC, 1)
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sCgc, 14)
            sRegistro = sRegistro & FormataCpoNum(objRPS.sInscricaoMunicipal, 15)
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sInscricaoEstadual, 15)
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sRazaoSocial, 115)
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sEndereco, 173)
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sBairro, 72)
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sCidade, 50)
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sUF, 2)
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sCEP, 8)
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sEmail, 80)
            sRegistro = sRegistro & FormataCpoValor(objRPS.dValorCofins, 15)
            sRegistro = sRegistro & FormataCpoValor(objRPS.dValorCSLL, 15)
            sRegistro = sRegistro & FormataCpoValor(objRPS.dValorINSS, 15)
            sRegistro = sRegistro & FormataCpoValor(objRPS.dValorIRPJ, 15)
            sRegistro = sRegistro & FormataCpoValor(objRPS.dValorPIS, 15)
            sRegistro = sRegistro & left(objRPS.sDiscriminacao, 1000)
        
        Case RPS_CIDADE_VOLTA_REDONDA
            sRegistro = sRegistro & FormataCpoNum(objRPS.lNumero, 12)
            sRegistro = sRegistro & FormataCpoData(objRPS.dtDataEmissao)
            sRegistro = sRegistro & IIf(objRPS.iISSRetido = MARCADO, "2", "1")
            sRegistro = sRegistro & FormataCpoValor(objRPS.dValorServico, 15)
            sRegistro = sRegistro & FormataCpoNum(objRPS.lCodigoServico, 5)
            sRegistro = sRegistro & FormataCpoValor(0, 4)
            sRegistro = sRegistro & FormataCpoValor(objRPS.dValorServico * objRPS.dAliquota, 15)
            sRegistro = sRegistro & FormataCpoValor(objRPS.dValorIRPJ, 15)
            sRegistro = sRegistro & FormataCpoValor(objRPS.dValorPIS, 15)
            sRegistro = sRegistro & FormataCpoValor(objRPS.dValorCofins, 15)
            sRegistro = sRegistro & FormataCpoValor(objRPS.dValorCSLL, 15)
            sRegistro = sRegistro & FormataCpoValor(objRPS.dValorINSS, 15)
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sCgc, 14)
            
            dtDataVencimento = DATA_NULA
            If objRPS.gobjTitRec.iCondicaoPagto <> 1 Then
                For Each objParcRec In objRPS.gobjNF.ColParcelaReceber
                    dtDataVencimento = objParcRec.dtDataVencimento
                    Exit For
                Next
            End If
            
            sInstrucoesPagto = ""
            iNumParcela = 0
            If objRPS.gobjNF.ColParcelaReceber.Count > 1 Then
                For Each objParcRec In objRPS.gobjNF.ColParcelaReceber
                    iNumParcela = iNumParcela + 1
                    objParcRec.iNumParcela = iNumParcela
                    If Len(Trim(sInstrucoesPagto)) > 0 Then sInstrucoesPagto = sInstrucoesPagto & "|"
                    sInstrucoesPagto = sInstrucoesPagto & "PARCELA: " & Format(objParcRec.iNumParcela, "00") & " VENCIMENTO: " & Format(objParcRec.dtDataVencimento, "dd/mm/yyyy") & " VALOR: R$" & String(15 - Len(Format(objParcRec.dValor, "STANDARD")), " ") & Format(objParcRec.dValor, "STANDARD")
                Next
            End If
            
            sRegistro = sRegistro & FormataCpoData(IIf(dtDataVencimento = DATA_NULA, "", dtDataVencimento))
            sRegistro = sRegistro & FormataCpoTexto(sInstrucoesPagto, 255)
            sRegistro = sRegistro & FormataCpoValor(objRPS.dValorDeducao, 15)
            sRegistro = sRegistro & IIf(objRPS.gobjTitRec.iCondicaoPagto = 1, "001", "003")
            sRegistro = sRegistro & FormataCpoTexto("", 14)
            sRegistro = sRegistro & FormataCpoValor(objRPS.dAliquota * 100, 4)
        
        Case RPS_CIDADE_BARUERI
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sTipo, 5)
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sSerie, 4)
            sRegistro = sRegistro & FormataCpoTexto("", 5)
            sRegistro = sRegistro & FormataCpoNum(objRPS.lNumero, 10)
            sRegistro = sRegistro & FormataCpoData(objRPS.dtDataEmissao)
            sRegistro = sRegistro & Format(objRPS.gobjNF.dtHoraSaida, "HHMMSS")
            sRegistro = sRegistro & FormataCpoTexto(IIf(objRPS.sSituacao = "T", "E", objRPS.sSituacao), 1) 'Troca do T (Transmitido) para E (Enviado) para Barueri ... E em SP é Extraviado
            If objRPS.sSituacao = "C" Then
                sRegistro = sRegistro & "02" 'Código de Motivo de Cancelamento: 02 para Dados Incorretos
                
                If objRPS.gobjNF.lNumNFe = 0 Then gError 216104
                
                sRegistro = sRegistro & FormataCpoNum(objRPS.gobjNF.lNumNFe, 7)
                sRegistro = sRegistro & FormataCpoTexto("", 5)
                
                objNFe.sSerieRPS = objRPS.sSerie
                objNFe.lNumeroRPS = objRPS.lNumero
                objNFe.dtDataEmissaoRPS = objRPS.dtDataEmissao
                
                lErro = CF("NFe_Le", objNFe)
                If lErro <> SUCESSO And lErro <> ERRO_LEITURA_SEM_DADOS Then gError ERRO_SEM_MENSAGEM
                
                If lErro <> ERRO_LEITURA_SEM_DADOS Then
                    sRegistro = sRegistro & FormataCpoData(objNFe.dtData)
                Else
                    sRegistro = sRegistro & FormataCpoData(objRPS.dtDataEmissao)
                End If
                
            Else
                sRegistro = sRegistro & "  "
                sRegistro = sRegistro & FormataCpoNum(0, 7)
                sRegistro = sRegistro & FormataCpoTexto("", 5)
                sRegistro = sRegistro & FormataCpoTexto("", 8)
            End If
            sRegistro = sRegistro & FormataCpoTexto(objRPS.gobjNF.sMotivoCancel, 180)
            sRegistro = sRegistro & FormataCpoNum(objRPS.lCodigoServico, 9)
            
            'Verifica se foi tributado fora de Barueri
            If Len(Trim(objRPS.gobjNF.colItens(1).objTributacao.sISSMunicIncidImp)) <> 0 And objRPS.gobjNF.colItens(1).objTributacao.sISSMunicIncidImp <> "3505708" Then
                sRegistro = sRegistro & "2" ' 2 para serviço prestado fora do Município.
            Else
                sRegistro = sRegistro & "1" '1 para serviço prestado no Município
            End If
            sRegistro = sRegistro & "2" '2 para serviço não prestado em vias públicas. *
            sRegistro = sRegistro & FormataCpoTexto("", 75)
            sRegistro = sRegistro & FormataCpoTexto("", 9)
            sRegistro = sRegistro & FormataCpoTexto("", 30)
            sRegistro = sRegistro & FormataCpoTexto("", 40)
            
            If objRPS.gobjNF.colItens(1).objTributacao.sISSCidadeIBGE <> "" And objRPS.gobjNF.colItens(1).objTributacao.sISSCidadeIBGE <> "3505708" Then
            
                lErro = IBGEMunicipio_Obtem(objRPS.gobjNF.colItens(1).objTributacao.sISSCidadeIBGE, sCidade, sUF)
                If lErro <> SUCESSO And lErro <> ERRO_LEITURA_SEM_DADOS Then gError ERRO_SEM_MENSAGEM
            
                sRegistro = sRegistro & FormataCpoTexto(sCidade, 40)
                sRegistro = sRegistro & FormataCpoTexto(sUF, 2)
            
            Else
                sRegistro = sRegistro & FormataCpoTexto("BARUERI", 40)
                sRegistro = sRegistro & FormataCpoTexto("SP", 2)
            End If
            
            
            sRegistro = sRegistro & FormataCpoTexto("", 8)

            sRegistro = sRegistro & FormataCpoNum(1, 6)
            sRegistro = sRegistro & FormataCpoValor(objRPS.dValorServico, 15)
            sRegistro = sRegistro & FormataCpoTexto("", 5)
            sRegistro = sRegistro & FormataCpoValor(objRPS.dValorCSLL + objRPS.dValorIRPJ + objRPS.dValorPIS + objRPS.dValorCofins, 15)
            sRegistro = sRegistro & "2" '2 para Tomador Brasileiro
            sRegistro = sRegistro & FormataCpoNum(0, 3) 'Pais da Nacionalidade do Tomador Estrangeiro
            sRegistro = sRegistro & FormataCpoNum(0, 1) 'Serviço Prestado é exportação
            sRegistro = sRegistro & FormataCpoNum(objRPS.iTipoCGC, 1)
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sCgc, 14)
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sRazaoSocial, 60)
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sEndereco, 75)
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sEndNumero, 9)
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sEndComplemento, 30)
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sBairro, 40)
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sCidade, 40)
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sUF, 2)
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sCEP, 8)
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sEmail, 152)
            If Not (objRPS.gobjTitRec Is Nothing) Then
                sRegistro = sRegistro & FormataCpoNum(objRPS.gobjTitRec.lNumTitulo, 6)
                sRegistro = sRegistro & FormataCpoValor(objRPS.gobjTitRec.dValor, 15)
                
                objCondicaoPagto.iCodigo = objRPS.gobjTitRec.iCondicaoPagto

                'Lê Condicao Pagamento no BD
                lErro = CF("CondicaoPagto_Le", objCondicaoPagto)
                If lErro <> SUCESSO And lErro <> 19205 Then gError ERRO_SEM_MENSAGEM
        
                sRegistro = sRegistro & FormataCpoTexto(objCondicaoPagto.sDescReduzida, 15)
            Else
                sRegistro = sRegistro & FormataCpoNum(0, 6)
                sRegistro = sRegistro & FormataCpoValor(0, 15)
                sRegistro = sRegistro & FormataCpoTexto("", 15)
            End If
            sRegistro = sRegistro & left(objRPS.sDiscriminacao, 1000)
            
        Case RPS_CIDADE_TAUBATE
            sRegistro = "20" & "|"
            If objRPS.sSituacao = "C" Then
                sRegistro = sRegistro & "RPC" & "|"
            Else
                sRegistro = sRegistro & "RPS" & "|"
            End If
            sRegistro = sRegistro & CStr(objRPS.lNumero) & "|"
            sRegistro = sRegistro & objRPS.sSerie & "|"
            sRegistro = sRegistro & Format(objRPS.dtDataEmissao, "dd/mm/yyyy") & "|"
            sRegistro = sRegistro & IIf(objRPS.iISSRetido = 2, "NAO", "SIM") & "|"
            sRegistro = sRegistro & Format(objRPS.lCodigoServico, "00\.00") & "|" 'Talvez seja necessário permitir gravar RPS com código alfa
            sRegistro = sRegistro & left(Replace(objRPS.sDiscriminacao, "|", "\\"), 4000) & "|"
            sRegistro = sRegistro & Format(objRPS.dValorServico, "fixed") & "|"
            sRegistro = sRegistro & Format(objRPS.dValorDeducao, "fixed") & "|"
            sRegistro = sRegistro & "" & "|" '11-Discriminaçao de retençao e/ou dedução
            sRegistro = sRegistro & Format(objRPS.dValorServico - objRPS.dValorDeducao, "fixed") & "|"
            sRegistro = sRegistro & Format(objRPS.dAliquota * 100, "fixed") & "|"
            sRegistro = sRegistro & Format(IIf(objRPS.iISSRetido = 2, objRPS.gobjNF.objTributacao.dISSValor, 0), "fixed") & "|"
            sRegistro = sRegistro & Format(IIf(objRPS.iISSRetido <> 2, objRPS.gobjNF.objTributacao.dISSRetido, 0), "fixed") & "|"

            '16-Cpf/Cnpj do Tomador de servico
'            Preencher o cpf do tomador de servico ou o cnpj
'            com zeros a esquerda.
'            No caso de cpf, informar um campo de 11 digitos.
'            No caso de Pessoa Jurídica informar um campo .de
'            14 digitos.
'            Para Tomador consumidor final informar no campo
'            o Texto: CONSUMIDOR.
'            Para tomador do exterior informar no campo o
'            texto: EXTERIOR.
'            Informar RPS CANCELADO se o campo tipo NFS =
'            'RPC'

            If Len(Trim(objRPS.sCgc)) = 0 Then
                objRPS.gobjNF.objTributacao.iIndConsumidorFinal = MARCADO
            Else
                objRPS.gobjNF.objTributacao.iIndConsumidorFinal = DESMARCADO
            End If

            If objRPS.sSituacao = "C" Then
                sRegistro = sRegistro & "RPS CANCELADO" & "|"
            ElseIf objRPS.sUF = "EX" Then
                sRegistro = sRegistro & "EXTERIOR" & "|"
            ElseIf objRPS.gobjNF.objTributacao.iIndConsumidorFinal = MARCADO Then
                sRegistro = sRegistro & "CONSUMIDOR" & "|"
            Else
                sRegistro = sRegistro & objRPS.sCgc & "|"
            End If
            sRegistro = sRegistro & left(objRPS.sRazaoSocial, 60) & "|"
            
            If objRPS.gobjNF.objTributacao.iIndConsumidorFinal <> MARCADO Then
            
                'Aceita somente RUA, AVENIDA , PRAÇA, ALAMEDA
                If objRPS.gobjEnd.sTipoLogradouro <> "" Then
                    Select Case objRPS.gobjEnd.sTipoLogradouro
                        Case "R"
                            sRegistro = sRegistro & "RUA" & "|"
                        Case "AV"
                            sRegistro = sRegistro & "AVENIDA" & "|"
                        Case "AL"
                            sRegistro = sRegistro & "ALAMEDA" & "|"
                        Case "PÇA"
                            sRegistro = sRegistro & "PRAÇA" & "|"
                        Case Else
                            sRegistro = sRegistro & "RUA" & "|"
                    End Select
                Else
                    Select Case UCase(left(objRPS.gobjEnd.sLogradouro, 1))
                        Case "R"
                            sRegistro = sRegistro & "RUA" & "|"
                        Case "A"
                            sRegistro = sRegistro & "AVENIDA" & "|"
                        Case "P"
                            sRegistro = sRegistro & "PRAÇA" & "|"
                        Case Else
                            sRegistro = sRegistro & "RUA" & "|"
                    End Select
                End If
                
                sTelefone = ""
                Call Formata_String_Numero(objRPS.gobjEnd.sTelefone1, sTelefone)
                
                sRegistro = sRegistro & left(objRPS.gobjEnd.sLogradouro, 60) & "|"
                sRegistro = sRegistro & CStr(objRPS.gobjEnd.lNumero) & "|"
                sRegistro = sRegistro & left(objRPS.gobjEnd.sComplemento, 60) & "|"
                sRegistro = sRegistro & left(objRPS.gobjEnd.sBairro, 60) & "|"
                sRegistro = sRegistro & left(DesacentuaTexto(objRPS.gobjEnd.sCidade), 60) & "|"
                sRegistro = sRegistro & left(objRPS.gobjEnd.sSiglaEstado, 2) & "|"
                sRegistro = sRegistro & IIf(Len(objRPS.gobjEnd.sCEP) < 8, String(8 - Len(objRPS.gobjEnd.sCEP), "0"), "") & objRPS.gobjEnd.sCEP & "|"
                sRegistro = sRegistro & left(sTelefone, 10) & "|"
                sRegistro = sRegistro & left(objRPS.sInscricaoMunicipal, 20) & "|"
            
            Else
            
                sRegistro = sRegistro & "" & "|"
                sRegistro = sRegistro & "" & "|"
                sRegistro = sRegistro & "" & "|"
                sRegistro = sRegistro & "" & "|"
                sRegistro = sRegistro & "" & "|"
                sRegistro = sRegistro & "Taubate" & "|"
                sRegistro = sRegistro & "SP" & "|"
                sRegistro = sRegistro & "" & "|"
                sRegistro = sRegistro & "" & "|"
                sRegistro = sRegistro & "" & "|"
            
            End If
            
            sRegistro = sRegistro & "" & "|" '28-tipo do Logradouro do local de Prestação de Serviços
            sRegistro = sRegistro & "" & "|" '29-Logradouro do Local de Prestação de Serviços
            sRegistro = sRegistro & "" & "|" '30-Nº end. Loc.Prest.
            sRegistro = sRegistro & "" & "|" '31-Complemento do Endereco do Local de Prestação de Serviços
            sRegistro = sRegistro & "" & "|" '32-Bairro do Local de Prestação de Serviços
            sRegistro = sRegistro & "" & "|" '33-Nome do Municipio do Local de Prestação de Serviços
            sRegistro = sRegistro & "" & "|" '34-Sigla do estado do Local de Prestação de Serviços
            sRegistro = sRegistro & "" & "|" '35-Código do Cep do Local de Prestação de Serviços
            sRegistro = sRegistro & left(objRPS.sEmail, 120) & "|"
            sRegistro = sRegistro & "" & "|" '37-2o email
            sRegistro = sRegistro & "" & "|" '38-3o email
            
        Case RPS_CIDADE_SAO_PAULO
            'Versão 002 não gera esse registro
            sRegistro = ""
            
        Case Else 'RPS_CIDADE_SAO_PAULO
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sTipo, 5)
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sSerie, 5)
            sRegistro = sRegistro & FormataCpoNum(objRPS.lNumero, 12)
            sRegistro = sRegistro & FormataCpoData(objRPS.dtDataEmissao)
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sSituacao, 1)
            sRegistro = sRegistro & FormataCpoValor(objRPS.dValorServico, 15)
            sRegistro = sRegistro & FormataCpoValor(objRPS.dValorDeducao, 15)
            sRegistro = sRegistro & FormataCpoNum(objRPS.lCodigoServico, 5)
            sRegistro = sRegistro & FormataCpoValor(objRPS.dAliquota * 100, 4)
            sRegistro = sRegistro & FormataCpoNum(objRPS.iISSRetido, 1) 'XXXX Verificar quando tiver Intermediário
            bMunicipioSP = False
            If UCase(objRPS.sCidade) = "SÃO PAULO" Or UCase(objRPS.sCidade) = "SAO PAULO" Then
                bMunicipioSP = True
            ElseIf objRPS.sUF = "SP" And Len(Trim(objRPS.sCEP)) > 0 Then
                If left(objRPS.sCEP, 1) = "0" Then '0 = Grande São Paulo, 1 = São Paulo Interior
                    If UCase(objRPS.sCidade) = "CAPITAL" Then
                        bMunicipioSP = True
                    End If
                End If
            End If
            sRegistro = sRegistro & FormataCpoNum(objRPS.iTipoCGC, 1)
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sCgc, 14)
            If bMunicipioSP Then
                sRegistro = sRegistro & FormataCpoNum(objRPS.sInscricaoMunicipal, 8)
            Else
                sRegistro = sRegistro & FormataCpoNum(0, 8)
            End If
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sInscricaoEstadual, 12)
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sRazaoSocial, 75)
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sEndereco, 93)
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sBairro, 30)
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sCidade, 50)
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sUF, 2)
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sCEP, 8)
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sEmail, 75)
            sRegistro = sRegistro & left(objRPS.sDiscriminacao, 1000)
        
    End Select

    RPS_Monta_Registro_Tipo2 = SUCESSO

    Exit Function

Erro_RPS_Monta_Registro_Tipo2:

    RPS_Monta_Registro_Tipo2 = gErr

    Select Case gErr
    
        Case 216104
            Call Rotina_Erro(vbOKOnly, "ERRO_RPS_CANC_SEM_NUM_NFE", gErr, objRPS.sSerie, objRPS.lNumero)

        Case ERRO_SEM_MENSAGEM

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 192431)

    End Select

    Exit Function
    
End Function

Private Function RPS_Monta_Registro_Tipo3(ByVal objRPS As ClassRPS, sRegistro As String, lNumLinhas As Long, Optional iCidade As Integer = RPS_CIDADE_SAO_PAULO)

Dim lErro As Long
Dim objItemNF As ClassItemNF

On Error GoTo Erro_RPS_Monta_Registro_Tipo3

    sRegistro = ""
    
    Select Case iCidade
        
        Case RPS_CIDADE_RECIFE
        
        Case RPS_CIDADE_VOLTA_REDONDA
            For Each objItemNF In objRPS.gobjNF.colItens
                If Len(Trim(sRegistro)) > 0 Then sRegistro = sRegistro & Chr(13) & Chr(10)
                sRegistro = sRegistro & "3"
                sRegistro = sRegistro & FormataCpoNum(objRPS.lNumero, 12)
                sRegistro = sRegistro & FormataCpoValor(objItemNF.dQuantidade * 100, 15)
                sRegistro = sRegistro & FormataCpoTexto(objItemNF.sUnidadeMed, 5)
                sRegistro = sRegistro & FormataCpoTexto(objItemNF.sDescricaoItem, 255)
                sRegistro = sRegistro & FormataCpoValor(objItemNF.dPrecoUnitario * 100, 15)
                sRegistro = sRegistro & FormataCpoValor(0, 15)
                lNumLinhas = lNumLinhas + 1
            Next
            
        Case RPS_CIDADE_BARUERI
        
            If objRPS.dValorIRPJ > 0 Then
                If Len(Trim(sRegistro)) > 0 Then sRegistro = sRegistro & Chr(13) & Chr(10)
                sRegistro = sRegistro & "3"
                sRegistro = sRegistro & "01" '01 - para IRRF
                sRegistro = sRegistro & FormataCpoValor(objRPS.dValorIRPJ, 15)  'Valor da retenção informada
                lNumLinhas = lNumLinhas + 1
            End If
            If objRPS.dValorPIS > 0 Then
                If Len(Trim(sRegistro)) > 0 Then sRegistro = sRegistro & Chr(13) & Chr(10)
                sRegistro = sRegistro & "3"
                sRegistro = sRegistro & "02" '02 - para PIS/PASEP
                sRegistro = sRegistro & FormataCpoValor(objRPS.dValorPIS, 15)  'Valor da retenção informada
                lNumLinhas = lNumLinhas + 1
            End If
            If objRPS.dValorCofins > 0 Then
                If Len(Trim(sRegistro)) > 0 Then sRegistro = sRegistro & Chr(13) & Chr(10)
                sRegistro = sRegistro & "3"
                sRegistro = sRegistro & "03" '03 - para COFINS
                sRegistro = sRegistro & FormataCpoValor(objRPS.dValorCofins, 15)  'Valor da retenção informada
                lNumLinhas = lNumLinhas + 1
            End If
            If objRPS.dValorCSLL > 0 Then
                If Len(Trim(sRegistro)) > 0 Then sRegistro = sRegistro & Chr(13) & Chr(10)
                sRegistro = sRegistro & "3"
                sRegistro = sRegistro & "04" '04 - para CSLL"
                sRegistro = sRegistro & FormataCpoValor(objRPS.dValorCSLL, 15)  'Valor da retenção informada
                lNumLinhas = lNumLinhas + 1
            End If
            
        Case RPS_CIDADE_TAUBATE
        
'            If objRPS.gobjNF.objTributacao.dISSRetido > 0 Then
'                If Len(Trim(sRegistro)) > 0 Then sRegistro = sRegistro & Chr(13) & Chr(10)
'                sRegistro = sRegistro & "30" & "|"
'                sRegistro = sRegistro & "ISS" & "|"
'                sRegistro = sRegistro & Format(objRPS.gobjNF.objTributacao.dISSAliquota * 100, "fixed") & "|"
'                sRegistro = sRegistro & Format(objRPS.gobjNF.objTributacao.dISSRetido, "fixed") & "|"
'                lNumLinhas = lNumLinhas + 1
'            End If
            If objRPS.dValorINSS > 0 Then
                If Len(Trim(sRegistro)) > 0 Then sRegistro = sRegistro & Chr(13) & Chr(10)
                sRegistro = sRegistro & "30" & "|"
                sRegistro = sRegistro & "INSS" & "|"
                'sRegistro = sRegistro & Format((objRPS.gobjNF.objTributacao.dINSSValor \ objRPS.gobjNF.objTributacao.dINSSBase) * 100, "fixed") & "|"
                sRegistro = sRegistro & "" & "|"
                sRegistro = sRegistro & Format(objRPS.gobjNF.objTributacao.dINSSValor, "fixed") & "|"
                lNumLinhas = lNumLinhas + 1
            End If
            If objRPS.dValorIRPJ > 0 Then
                If Len(Trim(sRegistro)) > 0 Then sRegistro = sRegistro & Chr(13) & Chr(10)
                sRegistro = sRegistro & "30" & "|"
                sRegistro = sRegistro & "IR" & "|"
                sRegistro = sRegistro & Format(objRPS.gobjNF.objTributacao.dIRRFAliquota * 100, "fixed") & "|"
                sRegistro = sRegistro & Format(objRPS.gobjNF.objTributacao.dIRRFValor, "fixed") & "|"
                lNumLinhas = lNumLinhas + 1
            End If
            If objRPS.dValorPIS > 0 Then
                If Len(Trim(sRegistro)) > 0 Then sRegistro = sRegistro & Chr(13) & Chr(10)
                sRegistro = sRegistro & "30" & "|"
                sRegistro = sRegistro & "PIS" & "|"
                'sRegistro = sRegistro & Format((objRPS.gobjNF.objTributacao.dPISRetido \ objRPS.dValorServico) * 100, "fixed") & "|"
                sRegistro = sRegistro & "" & "|"
                sRegistro = sRegistro & Format(objRPS.gobjNF.objTributacao.dPISRetido, "fixed") & "|"
                lNumLinhas = lNumLinhas + 1
            End If
            If objRPS.dValorCofins > 0 Then
                If Len(Trim(sRegistro)) > 0 Then sRegistro = sRegistro & Chr(13) & Chr(10)
                sRegistro = sRegistro & "30" & "|"
                sRegistro = sRegistro & "COFINS" & "|"
                'sRegistro = sRegistro & Format((objRPS.gobjNF.objTributacao.dCOFINSRetido \ objRPS.dValorServico) * 100, "fixed") & "|"
                sRegistro = sRegistro & "" & "|"
                sRegistro = sRegistro & Format(objRPS.gobjNF.objTributacao.dCOFINSRetido, "fixed") & "|"
                lNumLinhas = lNumLinhas + 1
            End If
            If objRPS.dValorCSLL > 0 Then
                If Len(Trim(sRegistro)) > 0 Then sRegistro = sRegistro & Chr(13) & Chr(10)
                sRegistro = sRegistro & "30" & "|"
                sRegistro = sRegistro & "CSLL" & "|"
                'sRegistro = sRegistro & Format((objRPS.gobjNF.objTributacao.dCSLLRetido \ objRPS.dValorServico) * 100, "fixed") & "|"
                sRegistro = sRegistro & "" & "|"
                sRegistro = sRegistro & Format(objRPS.gobjNF.objTributacao.dCSLLRetido, "fixed") & "|"
                lNumLinhas = lNumLinhas + 1
            End If
        
        Case Else 'RPS_CIDADE_SAO_PAULO
        
    End Select
    
    RPS_Monta_Registro_Tipo3 = SUCESSO

    Exit Function

Erro_RPS_Monta_Registro_Tipo3:

    RPS_Monta_Registro_Tipo3 = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 192431)

    End Select

    Exit Function
    
End Function

Private Function RPS_Monta_Registro_Tipo4(ByVal objRPS As ClassRPS, sRegistro As String, Optional iCidade As Integer = RPS_CIDADE_SAO_PAULO)

Dim lErro As Long

On Error GoTo Erro_RPS_Monta_Registro_Tipo4

    sRegistro = ""
   
    Select Case iCidade
        
        Case RPS_CIDADE_RECIFE
        
        Case RPS_CIDADE_VOLTA_REDONDA
            sRegistro = "4"
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sCgc, 14)
            sRegistro = sRegistro & FormataCpoNum(objRPS.lNumero, 12)
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sRazaoSocial, 50)
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sInscricaoMunicipal, 20)
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sInscricaoEstadual, 20)
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sEndereco, 50)
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sCidade, 50)
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sUF, 2)
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sCEP, 10)
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sEmail, 50)
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sBairro, 50)
            sRegistro = sRegistro & FormataCpoTexto("", 10)
            
        Case RPS_CIDADE_BARUERI
        
        Case RPS_CIDADE_TAUBATE
        
        Case Else 'RPS_CIDADE_SAO_PAULO
        
    End Select

    RPS_Monta_Registro_Tipo4 = SUCESSO

    Exit Function

Erro_RPS_Monta_Registro_Tipo4:

    RPS_Monta_Registro_Tipo4 = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 192431)

    End Select

    Exit Function
    
End Function

Private Function RPS_Monta_Registro_Tipo5(ByVal objRPS As ClassRPS, sRegistro As String, Optional iCidade As Integer = RPS_CIDADE_SAO_PAULO)

Dim lErro As Long
Dim objCliente As New ClassCliente
Dim objFilial As New ClassFilialCliente
Dim objEndereco As New ClassEndereco
Dim objCidade As New ClassCidades

On Error GoTo Erro_RPS_Monta_Registro_Tipo5
   
    sRegistro = ""

    Select Case iCidade
        
        Case RPS_CIDADE_RECIFE
        
        Case RPS_CIDADE_VOLTA_REDONDA
        
        Case RPS_CIDADE_BARUERI
        
        Case RPS_CIDADE_TAUBATE
        
        Case Else 'RPS_CIDADE_SAO_PAULO
            If objRPS.gobjNF.lCliIntermediario <> 0 Then
            
                objCliente.lCodigo = objRPS.gobjNF.lCliIntermediario
                objFilial.lCodCliente = objRPS.gobjNF.lCliIntermediario
                objFilial.iCodFilial = objRPS.iFilialCliente
                
                lErro = CF("Cliente_Le", objCliente)
                If lErro <> SUCESSO And lErro <> 12293 Then gError ERRO_SEM_MENSAGEM
                
                lErro = CF("FilialCliente_Le", objFilial)
                If lErro <> SUCESSO And lErro <> 12567 Then gError ERRO_SEM_MENSAGEM
            
                objEndereco.lCodigo = objFilial.lEndereco
                
                lErro = CF("Endereco_Le", objEndereco)
                If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
                
                objCidade.sDescricao = objEndereco.sCidade
                
                lErro = CF("Cidade_Le_Nome", objCidade)
                If lErro <> SUCESSO And lErro <> ERRO_OBJETO_NAO_CADASTRADO Then gError ERRO_SEM_MENSAGEM
            
                sRegistro = "5"
                sRegistro = sRegistro & "2"
                sRegistro = sRegistro & FormataCpoTexto(objFilial.sCgc, 14)
                If objCidade.sCodIBGE = "3550308" Or UCase(objCidade.sDescricao) = "SÃO PAULO" Or UCase(objCidade.sDescricao) = "SAO PAULO" Then
                    sRegistro = sRegistro & FormataCpoNum(objFilial.sInscricaoMunicipal, 8)
                Else
                    sRegistro = sRegistro & FormataCpoNum(0, 8)
                End If
                sRegistro = sRegistro & FormataCpoTexto(objEndereco.sEmail, 75)
        
            End If
        
    End Select

    RPS_Monta_Registro_Tipo5 = SUCESSO

    Exit Function

Erro_RPS_Monta_Registro_Tipo5:

    RPS_Monta_Registro_Tipo5 = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 192431)

    End Select

    Exit Function
    
End Function

Private Function RPS_Monta_Registro_Tipo6(ByVal objRPS As ClassRPS, sRegistro As String, Optional iCidade As Integer = RPS_CIDADE_SAO_PAULO)

Dim lErro As Long
Dim bMunicipioSP As Boolean
Dim dtDataVencimento As Date
Dim objParcRec As ClassParcelaReceber
Dim sInstrucoesPagto As String
Dim iNumParcela As Integer
Dim objItemNF As ClassItemNF
Dim objProduto As ClassProduto
Dim objCondicaoPagto As New ClassCondicaoPagto
Dim sCidade As String, sUF As String
Dim objNFe As New ClassNFe
Dim sTelefone As String, sFonte As String

On Error GoTo Erro_RPS_Monta_Registro_Tipo6

    
    Select Case iCidade
        
        Case RPS_CIDADE_RECIFE

        Case RPS_CIDADE_VOLTA_REDONDA

        Case RPS_CIDADE_BARUERI

        Case RPS_CIDADE_TAUBATE
            
        Case RPS_CIDADE_SAO_PAULO
            '1) Tipo de registro
            sRegistro = "6"
            '2) Tipo do RPS
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sTipo, 5)
            '3) Série do RPS
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sSerie, 5)
            '4) Número do RPS
            sRegistro = sRegistro & FormataCpoNum(objRPS.lNumero, 12)
            '5) Data de Emissão do RPS
            sRegistro = sRegistro & FormataCpoData(objRPS.dtDataEmissao)
            '6) Situação do RPS
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sSituacao, 1)
            '7) Valor dos Serviços
            sRegistro = sRegistro & FormataCpoValor(objRPS.dValorServico, 15)
            '8) Valor das Deduções
            sRegistro = sRegistro & FormataCpoValor(objRPS.dValorDeducao, 15)
            '9) Código do Serviço Prestado
            sRegistro = sRegistro & FormataCpoNum(objRPS.lCodigoServico, 5)
            '10) Alíquota
            sRegistro = sRegistro & FormataCpoValor(objRPS.dAliquota * 100, 4)
            '11) ISS Retido
            sRegistro = sRegistro & FormataCpoNum(objRPS.iISSRetido, 1) 'XXXX Verificar quando tiver Intermediário
            bMunicipioSP = False
            If UCase(objRPS.sCidade) = "SÃO PAULO" Or UCase(objRPS.sCidade) = "SAO PAULO" Then
                bMunicipioSP = True
            ElseIf objRPS.sUF = "SP" And Len(Trim(objRPS.sCEP)) > 0 Then
                If left(objRPS.sCEP, 1) = "0" Then '0 = Grande São Paulo, 1 = São Paulo Interior
                    If UCase(objRPS.sCidade) = "CAPITAL" Then
                        bMunicipioSP = True
                    End If
                End If
            End If
            '12) Indicador de CPF/CNPJ do Tomador
            sRegistro = sRegistro & FormataCpoNum(objRPS.iTipoCGC, 1)
            '13) CPF ou CNPJ do Tomador
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sCgc, 14)
            '14) Inscrição Municipal do Tomador
'                Informe a Inscrição Municipal do Tomador, com 8 posições.
'                ATENÇÃO!!! Este campo só deverá ser preenchido para tomadores estabelecidos no município de São Paulo (CCM).
'                Quando este campo for preenchido, seu conteúdo será considerado como prioritário em relação ao campo de CPF/CNPJ do Tomador, sendo utilizado para identificar o Tomador e recuperar seus dados da base de dados da Prefeitura.
'                Exemplo de preenchimento: CCM 1.234.567-8
'                O campo deverá ser preenchido como: 12345678
            If bMunicipioSP Then
                sRegistro = sRegistro & FormataCpoNum(objRPS.sInscricaoMunicipal, 8)
            Else
                sRegistro = sRegistro & FormataCpoNum(0, 8)
            End If
            '15) Inscrição Estadual do Tomador
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sInscricaoEstadual, 12)
            '16) Nome/ Razão Social do Tomador
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sRazaoSocial, 75)
            '17) Tipo do Endereço do Tomador (Rua, Av, ...) + 18) Endereço do Tomador + 19) Número do Endereço do Tomador + 20) Complemento do Endereço do Tomador
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sEndereco, 93)
            '21) Bairro do Tomador
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sBairro, 30)
            '22) Cidade do Tomador
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sCidade, 50)
            '23) UF do Tomador
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sUF, 2)
            '24) CEP do Tomador
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sCEP, 8)
            '25) Email do Tomador
            sRegistro = sRegistro & FormataCpoTexto(objRPS.sEmail, 75)
            '26) PIS/PASEP
            sRegistro = sRegistro & FormataCpoValor(objRPS.dValorPIS, 15)
            '27) COFINS
            sRegistro = sRegistro & FormataCpoValor(objRPS.dValorCofins, 15)
            '28) INSS
            sRegistro = sRegistro & FormataCpoValor(objRPS.dValorINSS, 15)
            '29) IR
            sRegistro = sRegistro & FormataCpoValor(objRPS.dValorIRPJ, 15)
            '30) CSSL
            sRegistro = sRegistro & FormataCpoValor(objRPS.dValorCSLL, 15)
            
            If objRPS.gobjNF.objTributacao.iTotTribTipo = LEI_12741_TIPO_AUTOMATICO Then
                sFonte = "IBPT"
            ElseIf objRPS.gobjNF.objTributacao.iTotTribTipo = LEI_12741_TIPO_SIMPLES Then
                sFonte = "Simples"
            End If
            '31) Carga tributária: Valor
            sRegistro = sRegistro & FormataCpoValor(objRPS.gobjNF.objTributacao.dTotTrib, 15)
            '32) Carga tributária: porcentagem
            sRegistro = sRegistro & FormataCpoValor((objRPS.gobjNF.objTributacao.dTotTrib / objRPS.gobjNF.dValorProdutos) * 100, 5)
            '33) Carga tributária: fonte
            sRegistro = sRegistro & FormataCpoTexto(sFonte, 10)
            '34) CEI
            sRegistro = sRegistro & FormataCpoNum(0, 12) 'CEI
            '35) Matrícula da Obra
            sRegistro = sRegistro & FormataCpoNum(0, 12) 'Matrícula da Obra
            '36) Município prestação  cód. IBGE
            sCidade = ""
            If objRPS.gobjNF.colItensSRV.Count > 0 Then
                sCidade = objRPS.gobjNF.colItensSRV(1).objTributacao.sISSMunicIncidImp
            ElseIf objRPS.gobjNF.colItens.Count > 0 Then
                sCidade = objRPS.gobjNF.colItens(1).objTributacao.sISSMunicIncidImp
            End If
            If sCidade = "3550308" Then sCidade = "" 'Não pode enviar a informação quando é SP pois senão dá erro
            sRegistro = sRegistro & FormataCpoNum(sCidade, 7)
            
            '37) Número de encapsulamento
            sRegistro = sRegistro & FormataCpoNum(0, 10) 'Número de encapsulamento
            '38) Campo reservado
            sRegistro = sRegistro & FormataCpoTexto("", 200) 'Campo reservado
            '39) Discriminação dos Serviços
            sRegistro = sRegistro & left(objRPS.sDiscriminacao, 1000)
            
        Case Else
        
    End Select

    RPS_Monta_Registro_Tipo6 = SUCESSO

    Exit Function

Erro_RPS_Monta_Registro_Tipo6:

    RPS_Monta_Registro_Tipo6 = gErr

    Select Case gErr
    
        Case 216104
            Call Rotina_Erro(vbOKOnly, "ERRO_RPS_CANC_SEM_NUM_NFE", gErr, objRPS.sSerie, objRPS.lNumero)

        Case ERRO_SEM_MENSAGEM

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 192431)

    End Select
    
    Exit Function
    
End Function

Private Function RPS_Monta_Registro_Tipo9(ByVal lNumLinhas As Long, ByVal lNumRPS As Long, ByVal dValorServ As Double, ByVal dValorDed As Double, ByVal dValorCofins As Double, ByVal dValorCSLL As Double, ByVal dValorINSS As Double, ByVal dValorIRPJ As Double, ByVal dValorPIS As Double, ByVal dValorISS As Double, ByVal dValorISSRet As Double, sRegistro As String, Optional iCidade As Integer = RPS_CIDADE_SAO_PAULO)

Dim lErro As Long

On Error GoTo Erro_RPS_Monta_Registro_Tipo9
    
    sRegistro = ""
 
    Select Case iCidade
        
        Case RPS_CIDADE_RECIFE
            sRegistro = "9"
            sRegistro = sRegistro & FormataCpoNum(lNumRPS, 7)
            sRegistro = sRegistro & FormataCpoValor(dValorServ, 15)
            sRegistro = sRegistro & FormataCpoValor(dValorDed, 15)
            sRegistro = sRegistro & FormataCpoValor(dValorCofins, 15)
            sRegistro = sRegistro & FormataCpoValor(dValorCSLL, 15)
            sRegistro = sRegistro & FormataCpoValor(dValorINSS, 15)
            sRegistro = sRegistro & FormataCpoValor(dValorIRPJ, 15)
            sRegistro = sRegistro & FormataCpoValor(dValorPIS, 15)
        
        Case RPS_CIDADE_VOLTA_REDONDA
            sRegistro = ""

        Case RPS_CIDADE_BARUERI
            sRegistro = "9"
            sRegistro = sRegistro & FormataCpoNum(lNumLinhas, 7)
            sRegistro = sRegistro & FormataCpoValor(dValorServ, 15)
            sRegistro = sRegistro & FormataCpoValor(dValorCofins + dValorCSLL + dValorIRPJ + dValorPIS, 15)
        
        Case RPS_CIDADE_TAUBATE
            sRegistro = "90" & "|"
            sRegistro = sRegistro & CStr(lNumRPS) & "|"
            sRegistro = sRegistro & Format(dValorServ, "fixed") & "|"
            sRegistro = sRegistro & Format(dValorISS - dValorISSRet, "fixed") & "|"
            sRegistro = sRegistro & Format(dValorDed, "fixed") & "|"
            sRegistro = sRegistro & Format(dValorISSRet, "fixed") & "|"
            sRegistro = sRegistro & CStr(lNumLinhas - lNumRPS - 2) & "|" 'Total menos os registros 20 menos o 10 e o 90 (1 de cada)
            'sRegistro = sRegistro & Format(dValorCofins + dValorCSLL + dValorIRPJ + dValorPIS + dValorISSRet + dValorINSS, "fixed")
            sRegistro = sRegistro & Format(dValorCofins + dValorCSLL + dValorIRPJ + dValorPIS + dValorINSS, "fixed")
        
        Case Else 'RPS_CIDADE_SAO_PAULO
            sRegistro = "9"
            sRegistro = sRegistro & FormataCpoNum(lNumRPS, 7)
            sRegistro = sRegistro & FormataCpoValor(dValorServ, 15)
            sRegistro = sRegistro & FormataCpoValor(dValorDed, 15)
        
    End Select
    
    RPS_Monta_Registro_Tipo9 = SUCESSO

    Exit Function

Erro_RPS_Monta_Registro_Tipo9:

    RPS_Monta_Registro_Tipo9 = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 192433)

    End Select

    Exit Function
    
End Function

Public Function RPS_Gera_Arquivo_Lote(ByVal objRPSCab As ClassRPSCab) As Long

Dim lErro As Long
Dim objRPS As ClassRPS
Dim colRPS As New Collection
Dim sRegistro As String
Dim bArqAberto As Boolean
Dim dValorDed As Double
Dim dValorServ As Double
Dim objFilialEmpresa As New AdmFiliais
Dim sStringAux As String
Dim lTransacao As Long
Dim sTodosRegistros As String
Dim iCidade As Integer
Dim dValorCofins As Double
Dim dValorCSLL As Double
Dim dValorINSS As Double
Dim dValorIRPJ As Double
Dim dValorPIS As Double
Dim dValorISS As Double, dValorISSRet As Double
Dim objCidade As New ClassCidades
Dim lNumLinhas As Long

On Error GoTo Erro_RPS_Gera_Arquivo_Lote

    bArqAberto = False

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 192456
    
    objRPSCab.sUsuario = gsUsuario

    objRPSCab.dHoraGeracao = CDbl(Time)
    objRPSCab.dtDataGeracao = Date

    objFilialEmpresa.iCodFilial = objRPSCab.iFilialEmpresa
    
    lErro = CF("FilialEmpresa_Le", objFilialEmpresa)
    If lErro <> SUCESSO Then gError 192476
    
    objCidade.sDescricao = objFilialEmpresa.objEndereco.sCidade
    
    lErro = CF("Cidade_Le_Nome", objCidade)
    If lErro <> SUCESSO And lErro <> ERRO_OBJETO_NAO_CADASTRADO Then gError ERRO_SEM_MENSAGEM
    
    If UCase(objFilialEmpresa.objEndereco.sCidade) = "RECIFE" Or objCidade.sCodIBGE = "2611606" Then
        iCidade = RPS_CIDADE_RECIFE
    ElseIf UCase(objFilialEmpresa.objEndereco.sCidade) = "VOLTA REDONDA" Or objCidade.sCodIBGE = "3306305" Then
        iCidade = RPS_CIDADE_VOLTA_REDONDA
    ElseIf UCase(objFilialEmpresa.objEndereco.sCidade) = "BARUERI" Or objCidade.sCodIBGE = "3505708" Then
        iCidade = RPS_CIDADE_BARUERI
    ElseIf UCase(objFilialEmpresa.objEndereco.sCidade) = "TAUBATÉ" Or UCase(objFilialEmpresa.objEndereco.sCidade) = "TAUBATE" Or objCidade.sCodIBGE = "3554102" Then
        iCidade = RPS_CIDADE_TAUBATE
    Else
        iCidade = RPS_CIDADE_SAO_PAULO
    End If
    
    Select Case iCidade
        Case RPS_CIDADE_RECIFE
            objRPSCab.sVersao = "002"
        Case RPS_CIDADE_BARUERI
            objRPSCab.sVersao = "PMB002"
        Case RPS_CIDADE_TAUBATE
            objRPSCab.sVersao = "2.00"
        Case RPS_CIDADE_SAO_PAULO
            objRPSCab.sVersao = "002"
        Case Else
            objRPSCab.sVersao = "001"
    End Select
    
    Call Formata_String_Numero(objFilialEmpresa.sInscricaoMunicipal, sStringAux)
    objRPSCab.lInscricaoMunicipal = StrParaLong(sStringAux) '31845606
    
    lErro = CF("RPS_Le_Periodo", objRPSCab.dtDataInicio, objRPSCab.dtDataFim, objRPSCab.iFilialEmpresa, colRPS, objRPSCab.lRPSDe)
    If lErro <> SUCESSO Then gError 192457
    
    If objRPSCab.iAtualizaDadosCliEnd = MARCADO Then
    
        lErro = RPS_AtualizaDadosCliEnd(colRPS)
        If lErro <> SUCESSO Then gError 192458
    
    End If
    
    lNumLinhas = 0
    Open objRPSCab.sNomeArquivo For Output As #1
    bArqAberto = True
    
    lErro = RPS_Monta_Registro_Tipo1(objRPSCab, sRegistro, objFilialEmpresa, iCidade)
    If lErro <> SUCESSO Then gError 192459
    
    'Print #1, sRegistro & Chr(13) & Chr(10)
    sTodosRegistros = sTodosRegistros & sRegistro & Chr(13) & Chr(10)
    lNumLinhas = lNumLinhas + 1
    
    For Each objRPS In colRPS
    
        'Não totaliza RPS Cancelado para Taubaté
        If iCidade <> RPS_CIDADE_TAUBATE Or objRPS.sSituacao <> "C" Then
            dValorDed = dValorDed + objRPS.dValorDeducao
            dValorServ = dValorServ + objRPS.dValorServico
            dValorCofins = dValorCofins + objRPS.dValorCofins
            dValorCSLL = dValorCSLL + objRPS.dValorCSLL
            dValorINSS = dValorINSS + objRPS.dValorINSS
            dValorIRPJ = dValorIRPJ + objRPS.dValorIRPJ
            dValorPIS = dValorPIS + objRPS.dValorPIS
            dValorISS = dValorISS + objRPS.gobjNF.objTributacao.dISSValor
            dValorISSRet = dValorISSRet + objRPS.gobjNF.objTributacao.dISSRetido
        End If

        lErro = RPS_Monta_Registro_Tipo2(objRPS, sRegistro, iCidade)
        If lErro <> SUCESSO Then gError 192460
    
        'Print #1, sRegistro & Chr(13) & Chr(10)
        If Len(Trim(sRegistro)) > 0 Then
            sTodosRegistros = sTodosRegistros & sRegistro & Chr(13) & Chr(10)
        End If
        lNumLinhas = lNumLinhas + 1
        
        lErro = RPS_Monta_Registro_Tipo3(objRPS, sRegistro, lNumLinhas, iCidade)
        If lErro <> SUCESSO Then gError 192460
        
        If Len(Trim(sRegistro)) > 0 Then
            sTodosRegistros = sTodosRegistros & sRegistro & Chr(13) & Chr(10)
        End If
        
        lErro = RPS_Monta_Registro_Tipo4(objRPS, sRegistro, iCidade)
        If lErro <> SUCESSO Then gError 192460
        
        If Len(Trim(sRegistro)) > 0 Then
            sTodosRegistros = sTodosRegistros & sRegistro
            If iCidade <> RPS_CIDADE_VOLTA_REDONDA Then
                sTodosRegistros = sTodosRegistros & Chr(13) & Chr(10)
                lNumLinhas = lNumLinhas + 1
            End If
        End If
    
        lErro = RPS_Monta_Registro_Tipo5(objRPS, sRegistro, iCidade)
        If lErro <> SUCESSO Then gError 192460
        
        lErro = RPS_Monta_Registro_Tipo6(objRPS, sRegistro, iCidade)
        If lErro <> SUCESSO Then gError 192460
        
        If Len(Trim(sRegistro)) > 0 Then
            sTodosRegistros = sTodosRegistros & sRegistro & Chr(13) & Chr(10)
            lNumLinhas = lNumLinhas + 1
        End If
    Next
    
    lNumLinhas = lNumLinhas + 1 'O próprio registro 9
    
    lErro = RPS_Monta_Registro_Tipo9(lNumLinhas, colRPS.Count, dValorServ, dValorDed, dValorCofins, dValorCSLL, dValorINSS, dValorIRPJ, dValorPIS, dValorISS, dValorISSRet, sRegistro, iCidade)
    If lErro <> SUCESSO Then gError 192461

    'Print #1, sRegistro
    sTodosRegistros = sTodosRegistros & sRegistro
    Print #1, sTodosRegistros

    Close #1
    bArqAberto = False

    lErro = RPSCab_Insere(objRPSCab)
    If lErro <> SUCESSO Then gError 192462
    
    For Each objRPS In colRPS
    
        objRPS.lNumIntDocCab = objRPSCab.lNumIntDoc
    
        lErro = RPSEnviados_Insere(objRPS)
        If lErro <> SUCESSO Then gError 192463
    
    Next
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 192464
    
    RPS_Gera_Arquivo_Lote = SUCESSO

    Exit Function

Erro_RPS_Gera_Arquivo_Lote:

    RPS_Gera_Arquivo_Lote = gErr

    Select Case gErr

        Case 192456
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 192457 To 192463, 192476

        Case 192464
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 192465)

    End Select

    If bArqAberto Then Close #1

    'Desfaz Transação
    Call Transacao_Rollback

    Exit Function

End Function
Private Function RPSCab_Insere(ByVal objRPSCab As ClassRPSCab) As Long

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim iAux As Integer
Dim lNumIntDoc As Long
Dim sNomeArquivo As String
Dim iPos As Integer
Dim iPosAnt As Integer

On Error GoTo Erro_RPSCab_Insere

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 192449
    Next
    
    iPos = 1
    Do While iPos <> 0
        iPosAnt = iPos
        iPos = InStr(iPosAnt + 1, objRPSCab.sNomeArquivo, "\")
    Loop

    sNomeArquivo = Mid(objRPSCab.sNomeArquivo, iPosAnt + 1)

    'Obter NumIntDoc
    lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_INT_PROX_RPSCAB", lNumIntDoc)
    If lErro <> SUCESSO Then gError 192450

    objRPSCab.lNumIntDoc = lNumIntDoc

    lErro = Comando_Executar(alComando(1), "INSERT INTO RPSCab( NumIntDoc, NomeArquivo, DataGeracao, HoraGeracao, " & _
            "Usuario, Versao, InscricaoMunicipal, DataInicio, DataFim,AtualizaDadosCliEnd) VALUES (?,?,?,?,?,?,?,?,?,?)", _
            objRPSCab.lNumIntDoc, sNomeArquivo, objRPSCab.dtDataGeracao, objRPSCab.dHoraGeracao, _
            objRPSCab.sUsuario, objRPSCab.sVersao, objRPSCab.lInscricaoMunicipal, objRPSCab.dtDataInicio, objRPSCab.dtDataFim, objRPSCab.iAtualizaDadosCliEnd)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 192451

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    RPSCab_Insere = SUCESSO

    Exit Function

Erro_RPSCab_Insere:

    RPSCab_Insere = gErr

    Select Case gErr

        Case 192449
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 192450

        Case 192451
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_RPSCAB", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 192452)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function RPSEnviados_Insere(ByVal objRPS As ClassRPS) As Long

Dim lErro As Long
Dim alComando(1 To 3) As Long
Dim iIndice As Integer
Dim lNumIntDoc As Long

On Error GoTo Erro_RPSEnviados_Insere

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 192440
    Next

    lErro = Comando_Executar(alComando(1), "INSERT INTO RPSEnviados( NumIntDoc, Tipo, Serie, Numero, DataEmissao, FilialEmpresa, " & _
            "Situacao, ValorServico, ValorDeducao, CodigoServico, Aliquota, " & _
            "ISSRetido, TipoCGC, CGC, InscricaoMunicipal, InscricaoEstadual, " & _
            "RazaoSocial, Endereco, EndNumero, EndComplemento, Bairro, " & _
            "Cidade, UF, CEP, Email, Discriminacao, NumIntDocNF, NumIntDocCab, Cliente, FilialCliente) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
            objRPS.lNumIntDoc, objRPS.sTipo, objRPS.sSerie, objRPS.lNumero, objRPS.dtDataEmissao, objRPS.iFilialEmpresa, _
            objRPS.sSituacao, objRPS.dValorServico, objRPS.dValorDeducao, objRPS.lCodigoServico, objRPS.dAliquota, _
            objRPS.iISSRetido, objRPS.iTipoCGC, objRPS.sCgc, objRPS.sInscricaoMunicipal, objRPS.sInscricaoEstadual, _
            objRPS.sRazaoSocial, objRPS.sEndereco, objRPS.sEndNumero, objRPS.sEndComplemento, objRPS.sBairro, _
            objRPS.sCidade, objRPS.sUF, objRPS.sCEP, objRPS.sEmail, objRPS.sDiscriminacao, objRPS.lNumIntDocNF, objRPS.lNumIntDocCab, objRPS.lCliente, objRPS.iFilialCliente)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 192441
    
    'Le a tabelaRPS
    lErro = Comando_ExecutarPos(alComando(2), "SELECT NumIntDoc FROM RPS WHERE NumIntDoc = ?", 0, lNumIntDoc, objRPS.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 192570

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 192571

    'Se existir => UPDATE, senão => INSERT
    If lErro = AD_SQL_SUCESSO Then

        'Trava registro contra alterações/Leituras
        lErro = Comando_LockExclusive(alComando(2))
        If lErro <> SUCESSO Then gError 192572

        lErro = Comando_ExecutarPos(alComando(3), "UPDATE RPS SET Enviado = ? ", alComando(2), MARCADO)
        If lErro <> AD_SQL_SUCESSO Then gError 192573
        
    End If

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    RPSEnviados_Insere = SUCESSO

    Exit Function

Erro_RPSEnviados_Insere:

    RPSEnviados_Insere = gErr

    Select Case gErr

        Case 192440
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 192441
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_RPS", gErr)
            
        Case 192570, 192571
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RPS", gErr)

        Case 192572
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_RPS", gErr)

        Case 192573
            Call Rotina_Erro(vbOKOnly, "ERRO_UPDATE_RPS", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 192442)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function RPS_AtualizaDadosCliEnd(ByVal colRPS As Collection) As Long

Dim lErro As Long
Dim objRPS As ClassRPS

On Error GoTo Erro_RPS_AtualizaDadosCliEnd

    For Each objRPS In colRPS

        lErro = RPS_AtualizaDadosCliEnd2(objRPS)
        If lErro <> SUCESSO Then gError 192469
        
    Next

    RPS_AtualizaDadosCliEnd = SUCESSO

    Exit Function

Erro_RPS_AtualizaDadosCliEnd:

    RPS_AtualizaDadosCliEnd = gErr

    Select Case gErr
    
        Case 192469

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 192443)

    End Select

    Exit Function

End Function

Private Function RPS_AtualizaDadosCliEnd2(ByVal objRPS As ClassRPS) As Long

Dim lErro As Long
Dim objCliente As New ClassCliente
Dim objEndereco As New ClassEndereco
Dim objFilialCliente As New ClassFilialCliente
Dim sStringAux As String

On Error GoTo Erro_RPS_AtualizaDadosCliEnd2

    If objRPS.gobjCli Is Nothing Then

        objCliente.lCodigo = objRPS.lCliente
        objFilialCliente.lCodCliente = objRPS.lCliente
        objFilialCliente.iCodFilial = objRPS.iFilialCliente
    
        lErro = CF("Cliente_Le", objCliente)
        If lErro <> SUCESSO And lErro <> 12293 Then gError 192466
    
        lErro = CF("FilialCliente_Le", objFilialCliente)
        If lErro <> SUCESSO And lErro <> 12567 Then gError 192467
    
        objEndereco.lCodigo = objFilialCliente.lEndereco
    
        lErro = CF("Endereco_Le", objEndereco)
        If lErro <> SUCESSO Then gError 192468
        
        Set objRPS.gobjCli = objCliente
        Set objRPS.gobjEnd = objEndereco
        Set objRPS.gobjFilCli = objFilialCliente
        
    Else
    
        Set objCliente = objRPS.gobjCli
        Set objEndereco = objRPS.gobjEnd
        Set objFilialCliente = objRPS.gobjFilCli
    
    End If
    
    objRPS.sBairro = objEndereco.sBairro
    
    sStringAux = ""
    Call Formata_String_Numero(objEndereco.sCEP, sStringAux)
    objRPS.sCEP = sStringAux
    
    sStringAux = ""
    Call Formata_String_Numero(objFilialCliente.sCgc, sStringAux)
    objRPS.sCgc = sStringAux
    
    objRPS.sCidade = objEndereco.sCidade
    objRPS.sEmail = objEndereco.sEmail
    objRPS.sEndereco = objEndereco.sEndereco
    objRPS.sEndNumero = CStr(objEndereco.lNumero)
    
    sStringAux = ""
    Call Formata_String_Numero(objFilialCliente.sInscricaoEstadual, sStringAux)
    objRPS.sInscricaoEstadual = sStringAux
    
    sStringAux = ""
    Call Formata_String_Numero(objFilialCliente.sInscricaoMunicipal, sStringAux)
    objRPS.sInscricaoMunicipal = sStringAux
    
    objRPS.sRazaoSocial = objCliente.sRazaoSocial
    objRPS.sUF = objEndereco.sSiglaEstado
    
    If Len(Trim(objRPS.sCgc)) = 0 Then
        objRPS.iTipoCGC = 3
    ElseIf Len(Trim(objRPS.sCgc)) < 14 Then
        objRPS.iTipoCGC = 1
    Else
        objRPS.iTipoCGC = 2
    End If
    
    RPS_AtualizaDadosCliEnd2 = SUCESSO

    Exit Function

Erro_RPS_AtualizaDadosCliEnd2:

    RPS_AtualizaDadosCliEnd2 = gErr

    Select Case gErr
    
        Case 192466 To 192468

         Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 192443)

    End Select

    Exit Function

End Function

Public Function NF_Converte_RPS(ByVal objNF As ClassNFiscal, ByVal objRPS As ClassRPS) As Long

Dim lErro As Long
Dim objItemNF As ClassItemNF
Dim sMensagem As String
Dim objProduto As ClassProduto
Dim dValorServico As Double
'Dim objProdutoCategoria As ClassProdutoCategoria
Dim bAchou As Boolean
Dim lCodServico As Long
Dim bTemProdutoNaoServico As Boolean
Dim objParcelaRec As ClassParcelaReceber
Dim objFilialEmpresa As New AdmFiliais
Dim iIndice As Integer
Dim sMensagemItem As String
Dim sMensagemValor As String
Dim iTamUltimaLinhaItem As Integer
Dim iParcela As Integer
Dim objISSQN As ClassISSQN
Dim dAliquotaPadrao As Double, bPossuiAliqDif As Boolean, dAliquotaMedia As Double
Dim objCidade As New ClassCidades
Dim objCodTrib As ClassCodTribMun
Dim colItens As New Collection
Dim dValorLiq As Double, sCodIBGEMunicIncidImp As String

'Const NFE_TAMANHO_MAXIMO_DESC_ITEM_LINHA = 60
Dim NFE_TAMANHO_MAXIMO_DESC_ITEM_LINHA As Integer
Const NFE_ESPACO_DESCRICAO_VALOR = 5
Const NFE_SIGLA_VALOR = "R$"
Const NFE_TAMANHO_VALOR = 14

Const NFE_DISCRI_LAYOUT_IMP_DETALHADO = 1
Const NFE_DISCRI_LAYOUT_IMP_RESUMIDO = 2

Dim iLayoutDiscriminacao As Integer
Dim iNumMaxLinhasDiscri As Integer

Const NFE_TAMANHO_MAXIMO_DESC_ITEM_LINHA_PADRAO = 60
Const NFE_TAMANHO_MAXIMO_DESC_ITEM_LINHA_BARUERI = 70

Dim sISSCST As String, iCodPaisISS As Integer
Dim sRetencoesTexto As String, dTotalRetencoes As Double
Dim iCidade As Integer

On Error GoTo Erro_NF_Converte_RPS

    iLayoutDiscriminacao = NFE_DISCRI_LAYOUT_IMP_DETALHADO
    iNumMaxLinhasDiscri = 0 'Não limita
    NFE_TAMANHO_MAXIMO_DESC_ITEM_LINHA = NFE_TAMANHO_MAXIMO_DESC_ITEM_LINHA_PADRAO

    objRPS.dtDataEmissao = objNF.dtDataEmissao
    objRPS.iFilialCliente = objNF.iFilialCli
    objRPS.iFilialEmpresa = objNF.iFilialEmpresa
    objRPS.lCliente = objNF.lCliente
    objRPS.lNumero = objNF.lNumNotaFiscal
    objRPS.lNumIntDocNF = objNF.lNumIntDoc
    objRPS.sSerie = Desconverte_Serie_Eletronica(objNF.sSerie)
    
    objFilialEmpresa.iCodFilial = objNF.iFilialEmpresa
    
    lErro = CF("FilialEmpresa_Le", objFilialEmpresa)
    If lErro <> SUCESSO Then gError 192655
    
    objCidade.sDescricao = objFilialEmpresa.objEndereco.sCidade
    
    lErro = CF("Cidade_Le_Nome", objCidade)
    If lErro <> SUCESSO And lErro <> ERRO_OBJETO_NAO_CADASTRADO Then gError ERRO_SEM_MENSAGEM
    
    If UCase(objFilialEmpresa.objEndereco.sCidade) = "RECIFE" Or objCidade.sCodIBGE = "2611606" Then
        iCidade = RPS_CIDADE_RECIFE
    ElseIf UCase(objFilialEmpresa.objEndereco.sCidade) = "VOLTA REDONDA" Or objCidade.sCodIBGE = "3306305" Then
        iCidade = RPS_CIDADE_VOLTA_REDONDA
    ElseIf UCase(objFilialEmpresa.objEndereco.sCidade) = "BARUERI" Or objCidade.sCodIBGE = "3505708" Then
        iCidade = RPS_CIDADE_BARUERI
        iLayoutDiscriminacao = NFE_DISCRI_LAYOUT_IMP_RESUMIDO
        iNumMaxLinhasDiscri = 13 'Não limita
        NFE_TAMANHO_MAXIMO_DESC_ITEM_LINHA = NFE_TAMANHO_MAXIMO_DESC_ITEM_LINHA_BARUERI
    ElseIf UCase(objFilialEmpresa.objEndereco.sCidade) = "TAUBATÉ" Or UCase(objFilialEmpresa.objEndereco.sCidade) = "TAUBATE" Or objCidade.sCodIBGE = "3554102" Then
        iCidade = RPS_CIDADE_TAUBATE
    Else
        iCidade = RPS_CIDADE_SAO_PAULO
    End If
    
    sMensagem = ""
    
    dAliquotaPadrao = -1
    dAliquotaMedia = 0
    bPossuiAliqDif = False
    bTemProdutoNaoServico = False
    
    For Each objItemNF In objNF.colItensNF
        colItens.Add objItemNF
    Next
    For Each objItemNF In objNF.colItensSRV
        colItens.Add objItemNF
    Next
    
    For Each objItemNF In colItens
        
        Set objProduto = New ClassProduto
        Set objISSQN = New ClassISSQN
        
        objProduto.sCodigo = objItemNF.sProduto
        
        lErro = CF("Produto_Le", objProduto)
        If lErro <> SUCESSO And lErro <> 28030 Then gError 192470

        If objProduto.iNatureza = NATUREZA_PROD_SERVICO Then
                   
            sCodIBGEMunicIncidImp = objItemNF.objTributacao.sISSMunicIncidImp
            
            If Len(Trim(objItemNF.objTributacao.sISSCodServ)) = 0 Then
            
                objISSQN.sCodigo = objItemNF.objTributacao.sISSQN 'objProduto.sISSQN
                
                If Len(Trim(objISSQN.sCodigo)) = 0 Then objISSQN.sCodigo = objProduto.sISSQN
                
                If Len(Trim(objISSQN.sCodigo)) = 0 Then gError 192474 'Produto sem a informação de código do serviço
            
                lErro = CF("ISSQN_Le", objISSQN)
                If lErro <> SUCESSO And lErro <> ERRO_LEITURA_SEM_DADOS Then gError 192471
                
                '**************************
                'Se tiver o código do serviço por cidade pega, senão continua usando  padrão do ISSQN
                lErro = CF("ProdutoCNAE_Le", objProduto)
                If lErro <> SUCESSO And lErro <> 28030 Then gError ERRO_SEM_MENSAGEM
                
                If lErro = SUCESSO Then
                
                    If objProduto.objProdutoCNAE.colCidades.Count > 0 Then
                         
                        'objCidade.sDescricao = objFilialEmpresa.objEndereco.sCidade
                        
                        'lErro = CF("Cidade_Le_Nome", objCidade)
                        'If lErro <> SUCESSO And lErro <> ERRO_OBJETO_NAO_CADASTRADO Then gError ERRO_SEM_MENSAGEM
                        
                        For Each objCodTrib In objProduto.objProdutoCNAE.colCidades
                            If objCodTrib.lCidade = objCidade.iCodigo Then
                                If Len(Trim(objCodTrib.sCodTribMun)) > 0 Then
                                    If Not IsNumeric(objCodTrib.sCodTribMun) Then gError 208175
                                    objISSQN.lCodServNFe = StrParaLong(objCodTrib.sCodTribMun)
                                End If
                                Exit For
                            End If
                        Next
                
                    End If
                
                End If
                '****************************
                
                If objISSQN.lCodServNFe = 0 Then gError 192474 'Produto sem a informação de código do serviço
                lCodServico = objISSQN.lCodServNFe
            
            Else
                If Not IsNumeric(objItemNF.objTributacao.sISSCodServ) Then gError 208175
                lCodServico = StrParaLong(objItemNF.objTributacao.sISSCodServ)
            End If
            
            If dAliquotaPadrao = -1 Then
                dAliquotaPadrao = objItemNF.objTributacao.dISSAliquota
            Else
                If Abs(dAliquotaPadrao = objItemNF.objTributacao.dISSAliquota) > DELTA_VALORMONETARIO Then
                    bPossuiAliqDif = True
                End If
            End If
            dAliquotaMedia = dAliquotaMedia + objItemNF.objTributacao.dISSAliquota * objItemNF.dValorTotal
            
            dValorServico = dValorServico + objItemNF.dValorTotal
            
            If objItemNF.objTributacao.sISSCST <> "" Then sISSCST = objItemNF.objTributacao.sISSCST
            iCodPaisISS = objItemNF.objTributacao.iISSCodPais
        
            'objRPS.sDiscriminacao = objRPS.sDiscriminacao & "|" & objItemNF.sDescricaoItem & ":   R$ " & Format(objItemNF.dValorTotal, "STANDARD")
            
            sMensagemItem = objItemNF.sDescricaoItem
            Do While Len(sMensagemItem) > 0
                
                If Len(Trim(sMensagem)) <> 0 Then sMensagem = sMensagem & "|"
                sMensagem = sMensagem & left(sMensagemItem, NFE_TAMANHO_MAXIMO_DESC_ITEM_LINHA)
                
                If Len(sMensagemItem) > NFE_TAMANHO_MAXIMO_DESC_ITEM_LINHA Then
                    sMensagemItem = right(sMensagemItem, Len(sMensagemItem) - NFE_TAMANHO_MAXIMO_DESC_ITEM_LINHA)
                Else
                    iTamUltimaLinhaItem = Len(sMensagemItem)
                    sMensagemItem = ""
                End If
            Loop
            
            sMensagem = sMensagem & String(NFE_TAMANHO_MAXIMO_DESC_ITEM_LINHA - iTamUltimaLinhaItem + NFE_ESPACO_DESCRICAO_VALOR, " ")
            
            sMensagemValor = NFE_SIGLA_VALOR & String(NFE_TAMANHO_VALOR - Len(Format(objItemNF.dValorTotal, "STANDARD")), " ") & Format(objItemNF.dValorTotal, "STANDARD")
            
            sMensagem = sMensagem & sMensagemValor
            
'            bAchou = False
'            For Each objProdutoCategoria In objProduto.colCategoriaItem
'
'                If objProdutoCategoria.sCategoria = PRODUTO_CAT_COD_SERVICO_NFE Then
'
'                    If Not IsNumeric(objProdutoCategoria.sItem) Then gError 192472 'Código do serviço não é numérico
'
'                    If lCodServico <> StrParaLong(objProdutoCategoria.sItem) And lCodServico <> 0 Then gError 192473 'Não pode existir diferentes códigos de serviço no mesmo recibo
'
'                    lCodServico = StrParaLong(objProdutoCategoria.sItem)
'                    bAchou = True
'
'                    Exit For
'                End If
'
'            Next
'
'            If Not bAchou Then gError 192474 'Produto sem a informação de código do serviço
            
        Else
            bTemProdutoNaoServico = True
        End If
        
    Next
    
    If dValorServico < DELTA_VALORMONETARIO Then gError 208379
    
    dAliquotaMedia = dAliquotaMedia / dValorServico
    
    sMensagem = sMensagem & "||VALOR TOTAL:" & String(NFE_TAMANHO_MAXIMO_DESC_ITEM_LINHA - 12 + NFE_ESPACO_DESCRICAO_VALOR, " ")
    sMensagemValor = NFE_SIGLA_VALOR & String(NFE_TAMANHO_VALOR - Len(Format(dValorServico, "STANDARD")), " ") & Format(dValorServico, "STANDARD")
    sMensagem = sMensagem & sMensagemValor
    
    If objNF.objTributacaoNF.dIRRFValor > DELTA_VALORMONETARIO Or _
    (objNF.objTributacaoNF.iINSSRetido = MARCADO And objNF.objTributacaoNF.dINSSValor > DELTA_VALORMONETARIO) Or _
    (objNF.objTributacaoNF.dPISRetido > DELTA_VALORMONETARIO) Or _
    (objNF.objTributacaoNF.dCOFINSRetido > DELTA_VALORMONETARIO) Or _
    (objNF.objTributacaoNF.dISSRetido > DELTA_VALORMONETARIO) Or _
    (objNF.objTributacaoNF.dCSLLRetido > DELTA_VALORMONETARIO) Then
    
        Select Case iLayoutDiscriminacao
        
            Case 1
            
                If (objNF.objTributacaoNF.dPISRetido > DELTA_VALORMONETARIO) Then
                
                    sMensagem = sMensagem & "|PIS:" & String(NFE_TAMANHO_MAXIMO_DESC_ITEM_LINHA - 4 + NFE_ESPACO_DESCRICAO_VALOR, " ")
                    sMensagemValor = NFE_SIGLA_VALOR & String(NFE_TAMANHO_VALOR - Len(Format(objNF.objTributacaoNF.dPISRetido, "STANDARD")), " ") & Format(objNF.objTributacaoNF.dPISRetido, "STANDARD")
                    sMensagem = sMensagem & sMensagemValor
                
                End If
                
                If (objNF.objTributacaoNF.dCOFINSRetido > DELTA_VALORMONETARIO) Then
                
                    sMensagem = sMensagem & "|COFINS:" & String(NFE_TAMANHO_MAXIMO_DESC_ITEM_LINHA - 7 + NFE_ESPACO_DESCRICAO_VALOR, " ")
                    sMensagemValor = NFE_SIGLA_VALOR & String(NFE_TAMANHO_VALOR - Len(Format(objNF.objTributacaoNF.dCOFINSRetido, "STANDARD")), " ") & Format(objNF.objTributacaoNF.dCOFINSRetido, "STANDARD")
                    sMensagem = sMensagem & sMensagemValor
                
                End If
                
                If (objNF.objTributacaoNF.dISSRetido > DELTA_VALORMONETARIO) Then
                
                    sMensagem = sMensagem & "|ISS:" & String(NFE_TAMANHO_MAXIMO_DESC_ITEM_LINHA - 4 + NFE_ESPACO_DESCRICAO_VALOR, " ")
                    sMensagemValor = NFE_SIGLA_VALOR & String(NFE_TAMANHO_VALOR - Len(Format(objNF.objTributacaoNF.dISSRetido, "STANDARD")), " ") & Format(objNF.objTributacaoNF.dISSRetido, "STANDARD")
                    sMensagem = sMensagem & sMensagemValor
                
                End If
                
                If (objNF.objTributacaoNF.dCSLLRetido > DELTA_VALORMONETARIO) Then
                
                    sMensagem = sMensagem & "|CSLL:" & String(NFE_TAMANHO_MAXIMO_DESC_ITEM_LINHA - 5 + NFE_ESPACO_DESCRICAO_VALOR, " ")
                    sMensagemValor = NFE_SIGLA_VALOR & String(NFE_TAMANHO_VALOR - Len(Format(objNF.objTributacaoNF.dCSLLRetido, "STANDARD")), " ") & Format(objNF.objTributacaoNF.dCSLLRetido, "STANDARD")
                    sMensagem = sMensagem & sMensagemValor
                
                End If
            
                If objNF.objTributacaoNF.dIRRFValor > DELTA_VALORMONETARIO Then
                
                    sMensagem = sMensagem & "|IRRF:" & String(NFE_TAMANHO_MAXIMO_DESC_ITEM_LINHA - 5 + NFE_ESPACO_DESCRICAO_VALOR, " ")
                    sMensagemValor = NFE_SIGLA_VALOR & String(NFE_TAMANHO_VALOR - Len(Format(objNF.objTributacaoNF.dIRRFValor, "STANDARD")), " ") & Format(objNF.objTributacaoNF.dIRRFValor, "STANDARD")
                    sMensagem = sMensagem & sMensagemValor
                
                End If
                
                If (objNF.objTributacaoNF.iINSSRetido = MARCADO And objNF.objTributacaoNF.dINSSValor > DELTA_VALORMONETARIO) Then
                
                    sMensagem = sMensagem & "|INSS:" & String(NFE_TAMANHO_MAXIMO_DESC_ITEM_LINHA - 5 + NFE_ESPACO_DESCRICAO_VALOR, " ")
                    sMensagemValor = NFE_SIGLA_VALOR & String(NFE_TAMANHO_VALOR - Len(Format(objNF.objTributacaoNF.dINSSValor, "STANDARD")), " ") & Format(objNF.objTributacaoNF.dINSSValor, "STANDARD")
                    sMensagem = sMensagem & sMensagemValor
                
                End If
                
            Case 2
            
                sRetencoesTexto = ""
                dTotalRetencoes = 0
            
                If (objNF.objTributacaoNF.dPISRetido > DELTA_VALORMONETARIO) Then
                    If Len(Trim(sRetencoesTexto)) > 0 Then sRetencoesTexto = sRetencoesTexto & " +"
                    sRetencoesTexto = sRetencoesTexto & Format(objNF.objTributacaoNF.dPISRetido, "STANDARD") & "PIS"
                    dTotalRetencoes = dTotalRetencoes + objNF.objTributacaoNF.dPISRetido
                End If
                
                If (objNF.objTributacaoNF.dCOFINSRetido > DELTA_VALORMONETARIO) Then
                    If Len(Trim(sRetencoesTexto)) > 0 Then sRetencoesTexto = sRetencoesTexto & " +"
                    sRetencoesTexto = sRetencoesTexto & Format(objNF.objTributacaoNF.dCOFINSRetido, "STANDARD") & "COFINS"
                    dTotalRetencoes = dTotalRetencoes + objNF.objTributacaoNF.dCOFINSRetido
                End If
                
                If (objNF.objTributacaoNF.dISSRetido > DELTA_VALORMONETARIO) Then
                    If Len(Trim(sRetencoesTexto)) > 0 Then sRetencoesTexto = sRetencoesTexto & " +"
                    sRetencoesTexto = sRetencoesTexto & Format(objNF.objTributacaoNF.dISSRetido, "STANDARD") & "ISS"
                    dTotalRetencoes = dTotalRetencoes + objNF.objTributacaoNF.dISSRetido
                End If
                
                If (objNF.objTributacaoNF.dCSLLRetido > DELTA_VALORMONETARIO) Then
                    If Len(Trim(sRetencoesTexto)) > 0 Then sRetencoesTexto = sRetencoesTexto & " +"
                    sRetencoesTexto = sRetencoesTexto & Format(objNF.objTributacaoNF.dCSLLRetido, "STANDARD") & "CSLL"
                    dTotalRetencoes = dTotalRetencoes + objNF.objTributacaoNF.dCSLLRetido
                End If
            
                If objNF.objTributacaoNF.dIRRFValor > DELTA_VALORMONETARIO Then
                    If Len(Trim(sRetencoesTexto)) > 0 Then sRetencoesTexto = sRetencoesTexto & " +"
                    sRetencoesTexto = sRetencoesTexto & Format(objNF.objTributacaoNF.dIRRFValor, "STANDARD") & "IR"
                    dTotalRetencoes = dTotalRetencoes + objNF.objTributacaoNF.dIRRFValor
                End If
                
                If (objNF.objTributacaoNF.iINSSRetido = MARCADO And objNF.objTributacaoNF.dINSSValor > DELTA_VALORMONETARIO) Then
                    If Len(Trim(sRetencoesTexto)) > 0 Then sRetencoesTexto = sRetencoesTexto & " +"
                    sRetencoesTexto = sRetencoesTexto & Format(objNF.objTributacaoNF.dINSSValor, "STANDARD") & "INSS"
                    dTotalRetencoes = dTotalRetencoes + objNF.objTributacaoNF.dINSSValor
                End If
                
                sMensagem = sMensagem & "|RETENÇÕES(" & sRetencoesTexto & "):" & String(NFE_TAMANHO_MAXIMO_DESC_ITEM_LINHA - 12 - Len(sRetencoesTexto) + NFE_ESPACO_DESCRICAO_VALOR, " ")
                sMensagemValor = NFE_SIGLA_VALOR & String(NFE_TAMANHO_VALOR - Len(Format(dTotalRetencoes, "STANDARD")), " ") & Format(dTotalRetencoes, "STANDARD")
                sMensagem = sMensagem & sMensagemValor
        
        End Select
                
        dValorLiq = dValorServico - objNF.objTributacaoNF.dPISRetido - objNF.objTributacaoNF.dCOFINSRetido - objNF.objTributacaoNF.dISSRetido - objNF.objTributacaoNF.dCSLLRetido - objNF.objTributacaoNF.dIRRFValor - IIf(objNF.objTributacaoNF.iINSSRetido = MARCADO, objNF.objTributacaoNF.dINSSValor, 0)
        
        sMensagem = sMensagem & "|VALOR LÍQUIDO:" & String(NFE_TAMANHO_MAXIMO_DESC_ITEM_LINHA - 14 + NFE_ESPACO_DESCRICAO_VALOR, " ")
        sMensagemValor = NFE_SIGLA_VALOR & String(NFE_TAMANHO_VALOR - Len(Format(dValorLiq, "STANDARD")), " ") & Format(dValorLiq, "STANDARD")
        sMensagem = sMensagem & sMensagemValor
            
    End If
        
            
'    If objNF.ColParcelaReceber.Count > 0 Then
'        'objRPS.sDiscriminacao = objRPS.sDiscriminacao & "||Pagamento:"
'
'        If objNF.ColParcelaReceber.Count > 1 Then
'
'        Else
'                sMensagem = sMensagem & "|DATA DE VENCIMENTO: " & format(
'        End If
'    End If
    
    iParcela = 0
    For Each objParcelaRec In objNF.ColParcelaReceber
        'objRPS.sDiscriminacao = objRPS.sDiscriminacao & "|Vencimento em " & Format(objParcelaRec.dtDataVencimentoReal, "dd/mm/yyyy") & " no valor de R$ " & Format(objParcelaRec.dValor, "STANDARD")
    
        iParcela = iParcela + 1
        If objNF.ColParcelaReceber.Count > 1 Then
            sMensagem = sMensagem & "|PARCELA " & Format(iParcela, "00") & ", DATA DE VENCIMENTO: " & Format(objParcelaRec.dtDataVencimentoReal, "dd/mm/yyyy") & " NO VALOR DE " & NFE_SIGLA_VALOR & String(NFE_TAMANHO_VALOR - Len(Format(objParcelaRec.dValor, "STANDARD")), " ") & Format(objParcelaRec.dValor, "STANDARD")
        Else
            sMensagem = sMensagem & "|DATA DE VENCIMENTO: " & Format(objParcelaRec.dtDataVencimentoReal, "dd/mm/yyyy")
        End If
    
    Next
    
    If objFilialEmpresa.iSuperSimples = MARCADO Then
        sMensagem = sMensagem & "||EMPRESA OPTANTE PELO SIMPLES NACIONAL|CONF. LEI COMPLEMENTAR 123/2006"
    End If
    
    If Len(Trim(objNF.sMensagemCorpoNota)) > 0 Then
        sMensagem = sMensagem & "||" & Replace(Replace(objNF.sMensagemCorpoNota, Chr(10), "|"), Chr(13), "")
    End If
    
    If Len(Trim(objNF.sMensagemNota)) > 0 Then
        sMensagem = sMensagem & "||" & Replace(Replace(objNF.sMensagemNota, Chr(10), "|"), Chr(13), "")
    End If
    
    If iNumMaxLinhasDiscri <> 0 Then
        If Len(sMensagem) - Len(Replace(sMensagem, "|", "")) - iNumMaxLinhasDiscri + 1 > 0 Then
            'Tem mais linhas que o permitido ... tira as linhas em branco
            
            Do While Len(sMensagem) <> Len(Replace(sMensagem, "||", "|"))
                sMensagem = Replace(sMensagem, "||", "|")
            Loop
            
            'Se termina com | -> tira
            If Mid(sMensagem, Len(sMensagem), 1) = "|" Then sMensagem = left(sMensagem, Len(sMensagem) - 1)
        End If
    End If
    
    lErro = CF("RPS_Obtem_Discriminacao_Cust", objNF, sMensagem)
    If lErro <> SUCESSO Then gError 196451
    
    objRPS.sDiscriminacao = sMensagem

    If bPossuiAliqDif Then
        objRPS.dAliquota = dAliquotaMedia
    Else
        objRPS.dAliquota = dAliquotaPadrao
    End If
    objRPS.dValorDeducao = 0
    objRPS.dValorServico = dValorServico
    
    objRPS.dValorCofins = objNF.objTributacaoNF.dCOFINSRetido
    objRPS.dValorCSLL = objNF.objTributacaoNF.dCSLLRetido
    objRPS.dValorINSS = IIf(objNF.objTributacaoNF.iINSSRetido = MARCADO, objNF.objTributacaoNF.dValorINSS, 0)
    objRPS.dValorIRPJ = objNF.objTributacaoNF.dIRRFValor
    objRPS.dValorPIS = objNF.objTributacaoNF.dPISRetido
    
    If bTemProdutoNaoServico Then
        objRPS.sTipo = "RPS-M"
    Else
        objRPS.sTipo = "RPS"
    End If
    
    If objNF.objTributacaoNF.dISSRetido > 0 Then
        objRPS.iISSRetido = 1
    Else
        objRPS.iISSRetido = 2
    End If
    
    objRPS.lCodigoServico = lCodServico
       
    lErro = RPS_AtualizaDadosCliEnd2(objRPS)
    If lErro <> SUCESSO Then gError 192475
                    
    If objNF.iStatus <> STATUS_CANCELADO Then
        objRPS.sSituacao = "T"
        
        Set objCidade = New ClassCidades
        objCidade.sDescricao = objFilialEmpresa.objEndereco.sCidade
        
        lErro = CF("Cidade_Le_Nome", objCidade)
        If lErro <> SUCESSO And lErro <> ERRO_OBJETO_NAO_CADASTRADO Then gError ERRO_SEM_MENSAGEM
        
        If objCidade.sCodIBGE = "3550308" Then 'Prestador de São paulo
        
            If objNF.dtDataEmissao < #2/23/2015# Then
            'Situações para SP
            'Informe a Situação do RPS com 01 posição, de acordo
            'com o tipo do RPS.
            'T - Operação normal (tributação conforme documento
            'emitido)
            'I - Operação isenta ou não tributável, executadas no
            'Município de São Paulo
            'F  Operação isenta ou não tributável pelo Município de
            'São Paulo, executada em outro Município
            'C - Cancelado
            'E  Extraviado
            'J - ISS Suspenso por Decisão Judicial (neste caso,
            'informar no campo Discriminação dos Serviços, o
            'número do processo judicial na 1ªinstância)
        
                'Se está prestando o serviço fora de SP
                If sCodIBGEMunicIncidImp <> objCidade.sCodIBGE And Len(Trim(sCodIBGEMunicIncidImp)) <> 0 Then
                    objRPS.sSituacao = "F"
                'ElseIf objRPS.dAliquota < DELTA_VALORMONETARIO2 Then
                ElseIf sISSCST = "I" Then
                    objRPS.sSituacao = "I"
                End If
                
            Else
            'NFS-e emitidas a partir de 23/02/2015: O campo "Situação do RPS" poderá ser preenchido com:
            'T - Tributado em São Paulo
            'F - Tributado Fora de São Paulo
            'A - Tributado em São Paulo, porém Isento
            'B - Tributado Fora de São Paulo, porém Isento
            'M -Tributado em São Paulo, porém Imune
            'N - Tributado Fora de São Paulo, porém Imune
            'X -Tributado em São Paulo, porém Exigibilidade Suspensa
            'V -Tributado Fora de São Paulo, porém Exigibilidade Suspensa
            'P - Exportação de Serviços
            'C -Cancelado
            
                If iCodPaisISS = PAIS_BRASIL Or iCodPaisISS = 0 Then
                    'Se está prestando o serviço fora de SP
                    If sCodIBGEMunicIncidImp <> objCidade.sCodIBGE And Len(Trim(sCodIBGEMunicIncidImp)) <> 0 Then
                        If sISSCST = "I" Then
                            objRPS.sSituacao = "B" 'B - Tributado Fora de São Paulo, porém Isento
                        Else
                            objRPS.sSituacao = "F" 'F - Tributado Fora de São Paulo
                        End If
                    Else
                        If sISSCST = "I" Then
                            objRPS.sSituacao = "A" 'A - Tributado em São Paulo, porém Isento
                        End If
                    End If
                Else
                    objRPS.sSituacao = "P" 'P - Exportação de Serviços
                End If
            End If
        
        End If
        
    Else
        objRPS.sSituacao = "C"
    End If
                    
    NF_Converte_RPS = SUCESSO

    Exit Function

Erro_NF_Converte_RPS:

    NF_Converte_RPS = gErr

    Select Case gErr
    
        Case 192470, 192471, 192475, 192655, 196451
        
        Case 192472
            'Call Rotina_Erro(vbOKOnly, "ERRO_RPS_CODSERVICO_NAO_NUMERICO", gErr, PRODUTO_CAT_COD_SERVICO_NFE, objProduto.sCodigo, objProdutoCategoria.sItem)
        
        Case 192473
            Call Rotina_Erro(vbOKOnly, "ERRO_RPS_VARIOS_CODSERVICO", gErr)
        
        Case 192474
            Call Rotina_Erro(vbOKOnly, "ERRO_RPS_CODSERVICO_NAO_ENCONTRADO", gErr, objProduto.sCodigo, PRODUTO_CAT_COD_SERVICO_NFE)
         
        Case 208175
            Call Rotina_Erro(vbOKOnly, "ERRO_RPS_CODSERVICO_NAO_NUMERICO2", gErr, objProduto.sCodigo, objCodTrib.sCodTribMun)
         
        Case 208379
            Call Rotina_Erro(vbOKOnly, "ERRO_RPS_SEM_VALOR_SERVICO", gErr)
         
        Case ERRO_SEM_MENSAGEM
         
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 192444)

    End Select

    Exit Function

End Function

Public Function NF_Grava_RPS(ByVal objNF As ClassNFiscal) As Long

Dim lErro As Long
Dim objRPS As New ClassRPS

On Error GoTo Erro_NF_Grava_RPS

    If objNF.iRecibo = MARCADO And gobjCRFAT.iUsaNFSE = DESMARCADO Then

        lErro = NF_Converte_RPS(objNF, objRPS)
        If lErro <> SUCESSO Then gError 192478
        
        If objRPS.dValorServico > 0 Then
            lErro = RPS_Grava_EmTrans(objRPS)
            If lErro <> SUCESSO Then gError 192479
        End If
        
    Else
    
        lErro = CF("NF_Exclui_RPS", objNF)
        If lErro <> SUCESSO Then gError 192890
        
    End If
                
    NF_Grava_RPS = SUCESSO

    Exit Function

Erro_NF_Grava_RPS:

    NF_Grava_RPS = gErr

    Select Case gErr
    
        Case 192478, 192479, 192890
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 192477)

    End Select

    Exit Function

End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'GRAVAÇÃO
Public Function NFe_Importa(ByVal sDiretorio As String, ByVal sArquivo As String) As Long

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_NFe_Importa

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 192529

    lErro = NFe_Importa_EmTrans(sDiretorio, sArquivo)
    If lErro <> SUCESSO Then gError 192530

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 192531

    NFe_Importa = SUCESSO

    Exit Function

Erro_NFe_Importa:

    NFe_Importa = gErr

    Select Case gErr

        Case 192529
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 192530

        Case 192531
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 192561)

    End Select

    'Desfaz Transação
    Call Transacao_Rollback

    Exit Function

End Function

Private Function NFe_Grava(ByVal objNFeCab As ClassNFeCab, ByVal objNFe As ClassNFe) As Long

Dim lErro As Long
Dim alComando(0 To 5) As Long
Dim iIndice As Integer
Dim lNumIntDoc As Long
Dim lNumIntDocNF As Long
Dim lNumIntDocCab As Long
Dim lInscricaoMunicipal As Long

On Error GoTo Erro_NFe_Grava

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 192533
    Next
    
    'Le a tabela RPS
    lErro = Comando_Executar(alComando(2), "SELECT NumIntDocNF, NumIntDocCab FROM RPSEnviados WHERE Serie= ?  AND Numero= ?  AND DataEmissao BETWEEN ? AND ? AND FilialEmpresa = ? ORDER BY NumIntDocCab DESC ", _
                lNumIntDocNF, lNumIntDocCab, objNFe.sSerieRPS, objNFe.lNumeroRPS, objNFe.dtDataEmissaoRPS - 14, objNFe.dtDataEmissaoRPS + 14, objNFe.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 192892

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 192893
    
    If lErro <> AD_SQL_SUCESSO Then gError 192894 'Não foi encontrado o Recibo
    
    'Le a tabela Cabeçalho
    lErro = Comando_Executar(alComando(5), "SELECT InscricaoMunicipal FROM RPSCab WHERE NumIntDoc = ? ", _
                lInscricaoMunicipal, lNumIntDocCab)
    If lErro <> AD_SQL_SUCESSO Then gError 192910

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(5))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 192911
    
    If lInscricaoMunicipal <> objNFeCab.lInscricaoMunicipal Then gError 192912
    
    objNFe.lNumIntDocNF = lNumIntDocNF

    'Le a tabelaNFe
    lErro = Comando_ExecutarPos(alComando(0), "SELECT NumIntDoc FROM NFe WHERE SerieRPS= ?  AND NumeroRPS= ?  AND DataEmissaoRPS= ? ", _
                0, lNumIntDoc, objNFe.sSerieRPS, objNFe.lNumeroRPS, objNFe.dtDataEmissaoRPS)
    If lErro <> AD_SQL_SUCESSO Then gError 192534

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 192535

    'Se existir => UPDATE, senão => INSERT
    If lErro = AD_SQL_SUCESSO Then
    
        objNFe.lNumIntDoc = lNumIntDoc

        'Trava registro contra alterações/Leituras
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> SUCESSO Then gError 192536

        lErro = Comando_ExecutarPos(alComando(1), "UPDATE NFe SET NumIntDocNF= ? , NumNFe= ? , Data= ? , Hora= ? , " & _
                "CodVerificacao= ? , TipoRPS= ? , InscricaoMunicialPrest= ? , TipoCGCPrest= ? , CGCPrest= ? , " & _
                "RazaoSocialPrest= ? , TipoEnderecoPrest= ? , EnderecoPrest= ? , EndNumeroPrest= ? , EndComplementoPrest= ? , " & _
                "BairroPrest= ? , CidadePrest= ? , UFPrest= ? , CEPPrest= ? , EmailPrest= ? , " & _
                "OPTSimples= ? , SituacaoNF= ? , DataCancelamento= ? , NumGuia= ? , DataQuitacaoGuia= ? , " & _
                "ValorServicos= ? , ValorDeducoes= ? , CodServico= ? , Aliquota= ? , ValorISS= ? , " & _
                "ValorCredito= ? , ISSRetido= ? , TipoCGCTom= ? , CGCTom= ? , InscricaoMunicipalTom= ? , " & _
                "InscricaoEstadualTom= ? , RazaoSocialTom= ? , TipoEnderecoTom= ? , EnderecoTom= ? , EndNumeroTom= ? , " & _
                "EndComplementoTom= ? , BairroTom= ? , CidadeTom= ? , UFTom= ? , CEPTom= ? , " & _
                "EmailTom= ? , Discriminacao= ? ", alComando(0), _
                objNFe.lNumIntDocNF, objNFe.lNumNFe, objNFe.dtData, objNFe.dHora, _
                objNFe.sCodVerificacao, objNFe.sTipoRPS, objNFe.sInscricaoMunicialPrest, objNFe.iTipoCGCPrest, objNFe.sCGCPrest, _
                objNFe.sRazaoSocialPrest, objNFe.sTipoEnderecoPrest, objNFe.sEnderecoPrest, objNFe.sEndNumeroPrest, objNFe.sEndComplementoPrest, _
                objNFe.sBairroPrest, objNFe.sCidadePrest, objNFe.sUFPrest, objNFe.sCEPPrest, objNFe.sEmailPrest, _
                objNFe.iOPTSimples, objNFe.sSituacaoNF, objNFe.dtDataCancelamento, objNFe.sNumGuia, objNFe.dtDataQuitacaoGuia, _
                objNFe.dValorServicos, objNFe.dValorDeducoes, objNFe.lCodServico, objNFe.dAliquota, objNFe.dValorISS, _
                objNFe.dValorCredito, objNFe.sISSRetido, objNFe.iTipoCGCTom, objNFe.sCGCTom, objNFe.sInscricaoMunicipalTom, _
                objNFe.sInscricaoEstadualTom, objNFe.sRazaoSocialTom, objNFe.sTipoEnderecoTom, objNFe.sEnderecoTom, objNFe.sEndNumeroTom, _
                objNFe.sEndComplementoTom, objNFe.sBairroTom, objNFe.sCidadeTom, objNFe.sUFTom, objNFe.sCEPTom, _
                objNFe.sEmailTom, objNFe.sDiscriminacao)
        If lErro <> AD_SQL_SUCESSO Then gError 192537

    Else

        'Obter NumIntDoc
        lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_INT_PROX_NFE", lNumIntDoc)
        If lErro <> SUCESSO Then gError 192532

        objNFe.lNumIntDoc = lNumIntDoc

        lErro = Comando_Executar(alComando(1), "INSERT INTO NFe( NumIntDoc, NumIntDocNF, NumNFe, Data, " & _
                "Hora, CodVerificacao, TipoRPS, SerieRPS, NumeroRPS, " & _
                "DataEmissaoRPS, InscricaoMunicialPrest, TipoCGCPrest, CGCPrest, RazaoSocialPrest, " & _
                "TipoEnderecoPrest, EnderecoPrest, EndNumeroPrest, EndComplementoPrest, BairroPrest, " & _
                "CidadePrest, UFPrest, CEPPrest, EmailPrest, OPTSimples, " & _
                "SituacaoNF, DataCancelamento, NumGuia, DataQuitacaoGuia, ValorServicos, " & _
                "ValorDeducoes, CodServico, Aliquota, ValorISS, ValorCredito, " & _
                "ISSRetido, TipoCGCTom, CGCTom, InscricaoMunicipalTom, InscricaoEstadualTom, " & _
                "RazaoSocialTom, TipoEnderecoTom, EnderecoTom, EndNumeroTom, EndComplementoTom, " & _
                "BairroTom, CidadeTom, UFTom, CEPTom, EmailTom, " & _
                "Discriminacao, FilialEmpresa) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                objNFe.lNumIntDoc, objNFe.lNumIntDocNF, objNFe.lNumNFe, objNFe.dtData, _
                objNFe.dHora, objNFe.sCodVerificacao, objNFe.sTipoRPS, objNFe.sSerieRPS, objNFe.lNumeroRPS, _
                objNFe.dtDataEmissaoRPS, objNFe.sInscricaoMunicialPrest, objNFe.iTipoCGCPrest, objNFe.sCGCPrest, objNFe.sRazaoSocialPrest, _
                objNFe.sTipoEnderecoPrest, objNFe.sEnderecoPrest, objNFe.sEndNumeroPrest, objNFe.sEndComplementoPrest, objNFe.sBairroPrest, _
                objNFe.sCidadePrest, objNFe.sUFPrest, objNFe.sCEPPrest, objNFe.sEmailPrest, objNFe.iOPTSimples, _
                objNFe.sSituacaoNF, objNFe.dtDataCancelamento, objNFe.sNumGuia, objNFe.dtDataQuitacaoGuia, objNFe.dValorServicos, _
                objNFe.dValorDeducoes, objNFe.lCodServico, objNFe.dAliquota, objNFe.dValorISS, objNFe.dValorCredito, _
                objNFe.sISSRetido, objNFe.iTipoCGCTom, objNFe.sCGCTom, objNFe.sInscricaoMunicipalTom, objNFe.sInscricaoEstadualTom, _
                objNFe.sRazaoSocialTom, objNFe.sTipoEnderecoTom, objNFe.sEnderecoTom, objNFe.sEndNumeroTom, objNFe.sEndComplementoTom, _
                objNFe.sBairroTom, objNFe.sCidadeTom, objNFe.sUFTom, objNFe.sCEPTom, objNFe.sEmailTom, _
                objNFe.sDiscriminacao, objNFe.iFilialEmpresa)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 192538

    End If
    
    'Le a tabelaNFe
    lErro = Comando_ExecutarPos(alComando(3), "SELECT NumIntDoc FROM NFiscal WHERE NumIntDoc = ? ", _
                0, lNumIntDoc, lNumIntDocNF)
    If lErro <> AD_SQL_SUCESSO Then gError 192895

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(3))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 192896
    
    If lErro <> AD_SQL_SUCESSO Then gError 192897 'Não foi a nota fiscal
    
    lErro = Comando_ExecutarPos(alComando(4), "UPDATE NFiscal SET NumNFe= ?, CodVerificacaoNfe = ?  ", alComando(3), objNFe.lNumNFe, objNFe.sCodVerificacao)
    If lErro <> AD_SQL_SUCESSO Then gError 192898
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    NFe_Grava = SUCESSO

    Exit Function

Erro_NFe_Grava:

    NFe_Grava = gErr

    Select Case gErr

        Case 192532

        Case 192533
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 192534, 192535
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFE", gErr)

        Case 192536
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_NFE", gErr)

        Case 192537
            Call Rotina_Erro(vbOKOnly, "ERRO_UPDATE_NFE", gErr)

        Case 192538
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_NFE", gErr)
            
        Case 192892, 192893
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RPS", gErr)
        
        Case 192894
            Call Rotina_Erro(vbOKOnly, "ERRO_RPS_NAO_CADASTRADO", gErr, objNFe.sSerieRPS, objNFe.lNumeroRPS, objNFe.dtDataEmissaoRPS)

        Case 192895, 192896
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", gErr)
        
        Case 192897
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCALIZACAO_NF_NUMINTERNO", gErr, lNumIntDocNF)
        
        Case 192898
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_NFISCAL", gErr)

        Case 192910, 192911
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RPSCAB", gErr)
            
        Case 192912
            Call Rotina_Erro(vbOKOnly, "ERRO_IM_RPS_DIF_IM_CAB", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 192560)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function NFeCab_Insere(ByVal objNFeCab As ClassNFeCab) As Long

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim lNumIntDoc As Long

On Error GoTo Erro_NFeCab_Insere

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 192563
    Next

    'Obter NumIntDoc
    lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_INT_PROX_NFECAB", lNumIntDoc)
    If lErro <> SUCESSO Then gError 192564

    objNFeCab.lNumIntDoc = lNumIntDoc

    lErro = Comando_Executar(alComando(1), "INSERT INTO NFeCab( NumIntDoc, NomeArquivo, DataImportacao, HoraImportacao, " & _
            "Usuario, Versao, InscricaoMunicipal, DataInicio, DataFim) VALUES (?,?,?,?,?,?,?,?,?)", _
            objNFeCab.lNumIntDoc, objNFeCab.sNomeArquivo, objNFeCab.dtDataImportacao, objNFeCab.dHoraImportacao, _
            objNFeCab.sUsuario, objNFeCab.sVersao, objNFeCab.lInscricaoMunicipal, objNFeCab.dtDataInicio, objNFeCab.dtDataFim)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 192565

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    NFeCab_Insere = SUCESSO

    Exit Function

Erro_NFeCab_Insere:

    NFeCab_Insere = gErr

    Select Case gErr

        Case 192563
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 192564

        Case 192565
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_NFECAB", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 192566)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function NFeRecebidos_Insere(ByVal objNFe As ClassNFe) As Long

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer

On Error GoTo Erro_NFeRecebidos_Insere

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 192567
    Next

    lErro = Comando_Executar(alComando(1), "INSERT INTO NFeRecebidas( NumIntDocCab, NumIntDoc, NumIntDocNF, NumNFe, Data, " & _
            "Hora, CodVerificacao, TipoRPS, SerieRPS, NumeroRPS, " & _
            "DataEmissaoRPS, InscricaoMunicialPrest, TipoCGCPrest, CGCPrest, RazaoSocialPrest, " & _
            "TipoEnderecoPrest, EnderecoPrest, EndNumeroPrest, EndComplementoPrest, BairroPrest, " & _
            "CidadePrest, UFPrest, CEPPrest, EmailPrest, OPTSimples, " & _
            "SituacaoNF, DataCancelamento, NumGuia, DataQuitacaoGuia, ValorServicos, " & _
            "ValorDeducoes, CodServico, Aliquota, ValorISS, ValorCredito, " & _
            "ISSRetido, TipoCGCTom, CGCTom, InscricaoMunicipalTom, InscricaoEstadualTom, " & _
            "RazaoSocialTom, TipoEnderecoTom, EnderecoTom, EndNumeroTom, EndComplementoTom, " & _
            "BairroTom, CidadeTom, UFTom, CEPTom, EmailTom, " & _
            "Discriminacao, FilialEmpresa, ValorCofins, ValorCSLL, ValorINSS, ValorIRPJ, ValorPIS) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
            objNFe.lNumIntDocCab, objNFe.lNumIntDoc, objNFe.lNumIntDocNF, objNFe.lNumNFe, objNFe.dtData, _
            objNFe.dHora, objNFe.sCodVerificacao, objNFe.sTipoRPS, objNFe.sSerieRPS, objNFe.lNumeroRPS, _
            objNFe.dtDataEmissaoRPS, objNFe.sInscricaoMunicialPrest, objNFe.iTipoCGCPrest, objNFe.sCGCPrest, objNFe.sRazaoSocialPrest, _
            objNFe.sTipoEnderecoPrest, objNFe.sEnderecoPrest, objNFe.sEndNumeroPrest, objNFe.sEndComplementoPrest, objNFe.sBairroPrest, _
            objNFe.sCidadePrest, objNFe.sUFPrest, objNFe.sCEPPrest, objNFe.sEmailPrest, objNFe.iOPTSimples, _
            objNFe.sSituacaoNF, objNFe.dtDataCancelamento, objNFe.sNumGuia, objNFe.dtDataQuitacaoGuia, objNFe.dValorServicos, _
            objNFe.dValorDeducoes, objNFe.lCodServico, objNFe.dAliquota, objNFe.dValorISS, objNFe.dValorCredito, _
            objNFe.sISSRetido, objNFe.iTipoCGCTom, objNFe.sCGCTom, objNFe.sInscricaoMunicipalTom, objNFe.sInscricaoEstadualTom, _
            objNFe.sRazaoSocialTom, objNFe.sTipoEnderecoTom, objNFe.sEnderecoTom, objNFe.sEndNumeroTom, objNFe.sEndComplementoTom, _
            objNFe.sBairroTom, objNFe.sCidadeTom, objNFe.sUFTom, objNFe.sCEPTom, objNFe.sEmailTom, _
            objNFe.sDiscriminacao, objNFe.iFilialEmpresa, objNFe.dValorCofins, objNFe.dValorCSLL, objNFe.dValorINSS, objNFe.dValorIRPJ, objNFe.dValorPIS)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 192568

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    NFeRecebidos_Insere = SUCESSO

    Exit Function

Erro_NFeRecebidos_Insere:

    NFeRecebidos_Insere = gErr

    Select Case gErr

        Case 192567
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 192568
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_NFE", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 192569)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function NFe_Desmonta_Registro_Tipo1(ByVal objNFeCab As ClassNFeCab, sRegistro As String, Optional ByVal iCidade As Integer = RPS_CIDADE_SAO_PAULO)

Dim lErro As Long
Dim iPos As Integer
Dim sData As String

On Error GoTo Erro_NFe_Desmonta_Registro_Tipo1

    If iCidade = RPS_CIDADE_SAO_PAULO Then
        If Len(sRegistro) <> 28 Then gError 192919
    ElseIf iCidade = RPS_CIDADE_BARUERI Then
        If Len(sRegistro) <> 41 Then gError 192919
    Else
        If Len(sRegistro) <> 35 Then gError 192919
    End If

    '2
    iPos = 2
    
    If iCidade <> RPS_CIDADE_BARUERI Then
    
        objNFeCab.sVersao = Trim(Mid(sRegistro, iPos, 3))
        iPos = iPos + 3
        
        If iCidade = RPS_CIDADE_SAO_PAULO Then
            objNFeCab.lInscricaoMunicipal = StrParaLong(Mid(sRegistro, iPos, 8))
            iPos = iPos + 8
        Else
            objNFeCab.lInscricaoMunicipal = StrParaLong(Mid(sRegistro, iPos, 15))
            iPos = iPos + 15
        End If
        
        sData = Mid(sRegistro, iPos, 8)
        objNFeCab.dtDataInicio = StrParaDate(right(sData, 2) & "/" & Mid(sData, 5, 2) & "/" & left(sData, 4))
        iPos = iPos + 8
        
        sData = Mid(sRegistro, iPos, 8)
        objNFeCab.dtDataFim = StrParaDate(right(sData, 2) & "/" & Mid(sData, 5, 2) & "/" & left(sData, 4))
        iPos = iPos + 8
        
    Else
    
        objNFeCab.sVersao = Trim(Mid(sRegistro, 25, 6))
        objNFeCab.lInscricaoMunicipal = StrParaLong(Mid(sRegistro, 2, 7))
        sData = Mid(sRegistro, 9, 8)
        objNFeCab.dtDataInicio = StrParaDate(right(sData, 2) & "/" & Mid(sData, 5, 2) & "/" & left(sData, 4))
        sData = Mid(sRegistro, 17, 8)
        objNFeCab.dtDataFim = StrParaDate(right(sData, 2) & "/" & Mid(sData, 5, 2) & "/" & left(sData, 4))
    
    End If

    NFe_Desmonta_Registro_Tipo1 = SUCESSO

    Exit Function

Erro_NFe_Desmonta_Registro_Tipo1:

    NFe_Desmonta_Registro_Tipo1 = gErr

    Select Case gErr
    
        Case 13, 192919
            Call Rotina_Erro(vbOKOnly, "ERRO_ARQUIVO_NAO_IMP_NFE", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 192570)

    End Select

    Exit Function
    
End Function

Private Function NFe_Desmonta_Registro_Tipo2(ByVal objNFe As ClassNFe, sRegistro As String, Optional ByVal iCidade As Integer = RPS_CIDADE_SAO_PAULO)

Dim lErro As Long
Dim iPos As Integer
Dim sData As String
Dim sHora As String

On Error GoTo Erro_NFe_Desmonta_Registro_Tipo2

    If iCidade = RPS_CIDADE_SAO_PAULO Then
        If Len(sRegistro) < 886 Or Len(sRegistro) > 1887 Then gError 192920
    ElseIf iCidade = RPS_CIDADE_BARUERI Then
        If Len(sRegistro) <> 1628 Then gError 192920
    Else
        If Len(sRegistro) < 1320 Or Len(sRegistro) > 2321 Then gError 192920
    End If

    '2
    iPos = 2
    
    If iCidade <> RPS_CIDADE_BARUERI Then
        
        If iCidade = RPS_CIDADE_SAO_PAULO Then
            objNFe.lNumNFe = StrParaLong(Mid(sRegistro, iPos, 8))
            iPos = iPos + 8
        Else
            objNFe.lNumNFe = StrParaLong(Mid(sRegistro, iPos, 15))
            iPos = iPos + 15
        End If
        
        sData = Mid(sRegistro, iPos, 8)
        objNFe.dtData = StrParaDate(right(sData, 2) & "/" & Mid(sData, 5, 2) & "/" & left(sData, 4))
        iPos = iPos + 8
        
        sHora = Mid(sRegistro, iPos, 2) & ":" & Mid(sRegistro, iPos + 2, 2) & ":" & Mid(sRegistro, iPos + 4, 2)
        objNFe.dHora = CDbl(CDate(sHora))
        iPos = iPos + 6
    
        objNFe.sCodVerificacao = Trim(Mid(sRegistro, iPos, STRING_NFE_CODVERIFICACAO))
        iPos = iPos + STRING_NFE_CODVERIFICACAO
    
        If iCidade = RPS_CIDADE_SAO_PAULO Then
            objNFe.sTipoRPS = Trim(Mid(sRegistro, iPos, STRING_RPS_TIPO))
            iPos = iPos + STRING_RPS_TIPO
        Else
            Select Case Mid(sRegistro, iPos, 1)
                Case "0"
                    objNFe.sTipoRPS = "RPS"
                Case "1"
                    objNFe.sTipoRPS = "RPS-M"
                Case "2"
                    objNFe.sTipoRPS = "RPS-C"
            End Select
            iPos = iPos + 1
        
        End If
        
        objNFe.sSerieRPS = Trim(Mid(sRegistro, iPos, STRING_RPS_SERIE))
        iPos = iPos + STRING_RPS_SERIE
    
        If iCidade = RPS_CIDADE_SAO_PAULO Then
            objNFe.lNumeroRPS = StrParaLong(Mid(sRegistro, iPos, 12))
            iPos = iPos + 12
        Else
            objNFe.lNumeroRPS = StrParaLong(Mid(sRegistro, iPos, 15))
            iPos = iPos + 15
        End If
        
        sData = Mid(sRegistro, iPos, 8)
        objNFe.dtDataEmissaoRPS = StrParaDate(right(sData, 2) & "/" & Mid(sData, 5, 2) & "/" & left(sData, 4))
        iPos = iPos + 8
        
        If iCidade = RPS_CIDADE_SAO_PAULO Then
            objNFe.sInscricaoMunicialPrest = Trim(Mid(sRegistro, iPos, 8))
            iPos = iPos + 8
        Else
            objNFe.sInscricaoMunicialPrest = Trim(Mid(sRegistro, iPos, 15))
            iPos = iPos + 15
        End If
        
        objNFe.iTipoCGCPrest = StrParaInt(Mid(sRegistro, iPos, 1))
        iPos = iPos + 1
        
        objNFe.sCGCPrest = Trim(Mid(sRegistro, iPos, STRING_RPS_CGC))
        iPos = iPos + STRING_RPS_CGC
        
        If iCidade = RPS_CIDADE_SAO_PAULO Then
            objNFe.sRazaoSocialPrest = Trim(Mid(sRegistro, iPos, 75))
            iPos = iPos + 75
        Else
            objNFe.sRazaoSocialPrest = Trim(Mid(sRegistro, iPos, 115))
            iPos = iPos + 115
        End If
        
        objNFe.sTipoEnderecoPrest = Trim(Mid(sRegistro, iPos, STRING_RPS_ENDTIPO))
        'iPos = iPos + STRING_RPS_ENDTIPO
        
        If iCidade = RPS_CIDADE_SAO_PAULO Then
            objNFe.sEnderecoPrest = Trim(Mid(sRegistro, iPos, 53))
            iPos = iPos + 53
        Else
            objNFe.sEnderecoPrest = Trim(Mid(sRegistro, iPos, 103))
            iPos = iPos + 103
        End If
        
        objNFe.sEndNumeroPrest = Trim(Mid(sRegistro, iPos, STRING_RPS_ENDNUM))
        iPos = iPos + STRING_RPS_ENDNUM
        
        If iCidade = RPS_CIDADE_SAO_PAULO Then
            objNFe.sEndComplementoPrest = Trim(Mid(sRegistro, iPos, 30))
            iPos = iPos + 30
        Else
            objNFe.sEndComplementoPrest = Trim(Mid(sRegistro, iPos, 60))
            iPos = iPos + 60
        End If
        
        If iCidade = RPS_CIDADE_SAO_PAULO Then
            objNFe.sBairroPrest = Trim(Mid(sRegistro, iPos, 30))
            iPos = iPos + 30
        Else
            objNFe.sBairroPrest = Trim(Mid(sRegistro, iPos, 72))
            iPos = iPos + 72
        End If
        
        objNFe.sCidadePrest = Trim(Mid(sRegistro, iPos, STRING_RPS_CIDADE))
        iPos = iPos + STRING_RPS_CIDADE
        
        objNFe.sUFPrest = Trim(Mid(sRegistro, iPos, STRING_RPS_UF))
        iPos = iPos + STRING_RPS_UF
        
        objNFe.sCEPPrest = Trim(Mid(sRegistro, iPos, STRING_RPS_CEP))
        iPos = iPos + STRING_RPS_CEP
        
        If iCidade = RPS_CIDADE_SAO_PAULO Then
            objNFe.sEmailPrest = Trim(Mid(sRegistro, iPos, 75))
            iPos = iPos + 75
        Else
            objNFe.sEmailPrest = Trim(Mid(sRegistro, iPos, 80))
            iPos = iPos + 80
        End If
        
        objNFe.iOPTSimples = StrParaInt(Mid(sRegistro, iPos, 1))
        iPos = iPos + 1
        
        objNFe.sSituacaoNF = Trim(Mid(sRegistro, iPos, STRING_RPS_SITUACAO))
        iPos = iPos + STRING_RPS_SITUACAO
        
        sData = Mid(sRegistro, iPos, 8)
        objNFe.dtDataCancelamento = StrParaDate(right(sData, 2) & "/" & Mid(sData, 5, 2) & "/" & left(sData, 4))
        iPos = iPos + 8
        
        If iCidade = RPS_CIDADE_SAO_PAULO Then
            objNFe.sNumGuia = Trim(Mid(sRegistro, iPos, 12))
            iPos = iPos + 12
        Else
            objNFe.sNumGuia = Trim(Mid(sRegistro, iPos, 15))
            iPos = iPos + 15
        End If
        
        sData = Mid(sRegistro, iPos, 8)
        objNFe.dtDataQuitacaoGuia = StrParaDate(right(sData, 2) & "/" & Mid(sData, 5, 2) & "/" & left(sData, 4))
        iPos = iPos + 8
        
        objNFe.dValorServicos = StrParaDbl(Mid(sRegistro, iPos, 15)) / 100
        iPos = iPos + 15
        
        objNFe.dValorDeducoes = StrParaDbl(Mid(sRegistro, iPos, 15)) / 100
        iPos = iPos + 15
        
        If iCidade = RPS_CIDADE_SAO_PAULO Then
            objNFe.lCodServico = StrParaLong(Mid(sRegistro, iPos, 5))
            iPos = iPos + 5
        Else
            objNFe.lCodServico = StrParaLong(Mid(sRegistro, iPos, 8))
            iPos = iPos + 8
        End If
        
        If iCidade = RPS_CIDADE_SAO_PAULO Then
            objNFe.dAliquota = StrParaDbl(Mid(sRegistro, iPos, 4)) / 100 / 100
            iPos = iPos + 4
        Else
            objNFe.dAliquota = StrParaDbl(Mid(sRegistro, iPos, 5)) / 100 / 100
            iPos = iPos + 5
        End If
        
        objNFe.dValorISS = StrParaDbl(Mid(sRegistro, iPos, 15)) / 100
        iPos = iPos + 15
        
        objNFe.dValorCredito = StrParaDbl(Mid(sRegistro, iPos, 15)) / 100
        iPos = iPos + 15
        
        objNFe.sISSRetido = Trim(Mid(sRegistro, iPos, STRING_NFE_ISSRETIDO))
        iPos = iPos + STRING_NFE_ISSRETIDO
        
        objNFe.iTipoCGCTom = StrParaInt(Mid(sRegistro, iPos, 1))
        iPos = iPos + 1
        
        objNFe.sCGCTom = Trim(Mid(sRegistro, iPos, STRING_RPS_CGC))
        iPos = iPos + STRING_RPS_CGC
        
        If iCidade = RPS_CIDADE_SAO_PAULO Then
            objNFe.sInscricaoMunicipalTom = Trim(Mid(sRegistro, iPos, 8))
            iPos = iPos + 8
        Else
            objNFe.sInscricaoMunicipalTom = Trim(Mid(sRegistro, iPos, 15))
            iPos = iPos + 15
        End If
    
        If iCidade = RPS_CIDADE_SAO_PAULO Then
            objNFe.sInscricaoEstadualTom = Trim(Mid(sRegistro, iPos, 12))
            iPos = iPos + 12
        Else
            objNFe.sInscricaoEstadualTom = Trim(Mid(sRegistro, iPos, 15))
            iPos = iPos + 15
        End If
        
        If iCidade = RPS_CIDADE_SAO_PAULO Then
            objNFe.sRazaoSocialTom = Trim(Mid(sRegistro, iPos, 75))
            iPos = iPos + 75
        Else
            objNFe.sRazaoSocialTom = Trim(Mid(sRegistro, iPos, 115))
            iPos = iPos + 115
        End If
        
        objNFe.sTipoEnderecoTom = Trim(Mid(sRegistro, iPos, STRING_RPS_ENDTIPO))
        'iPos = iPos + STRING_RPS_ENDTIPO
        
        If iCidade = RPS_CIDADE_SAO_PAULO Then
            objNFe.sEnderecoTom = Trim(Mid(sRegistro, iPos, 53))
            iPos = iPos + 53
        Else
            objNFe.sEnderecoTom = Trim(Mid(sRegistro, iPos, 103))
            iPos = iPos + 103
        End If
        
        objNFe.sEndNumeroTom = Trim(Mid(sRegistro, iPos, STRING_RPS_ENDNUM))
        iPos = iPos + STRING_RPS_ENDNUM
        
        If iCidade = RPS_CIDADE_SAO_PAULO Then
            objNFe.sEndComplementoTom = Trim(Mid(sRegistro, iPos, 30))
            iPos = iPos + 30
        Else
            objNFe.sEndComplementoTom = Trim(Mid(sRegistro, iPos, 60))
            iPos = iPos + 60
        End If
        
        If iCidade = RPS_CIDADE_SAO_PAULO Then
            objNFe.sBairroTom = Trim(Mid(sRegistro, iPos, 30))
            iPos = iPos + 30
        Else
            objNFe.sBairroTom = Trim(Mid(sRegistro, iPos, 72))
            iPos = iPos + 72
        End If
        
        objNFe.sCidadeTom = Trim(Mid(sRegistro, iPos, STRING_RPS_CIDADE))
        iPos = iPos + STRING_RPS_CIDADE
        
        objNFe.sUFTom = Trim(Mid(sRegistro, iPos, STRING_RPS_UF))
        iPos = iPos + STRING_RPS_UF
        
        objNFe.sCEPTom = Trim(Mid(sRegistro, iPos, STRING_RPS_CEP))
        iPos = iPos + STRING_RPS_CEP
        
        If iCidade = RPS_CIDADE_SAO_PAULO Then
            objNFe.sEmailTom = Trim(Mid(sRegistro, iPos, 75))
            iPos = iPos + 75
        Else
            objNFe.sEmailTom = Trim(Mid(sRegistro, iPos, 80))
            iPos = iPos + 80
        End If
        
        If iCidade = RPS_CIDADE_SAO_PAULO Then
        Else
            objNFe.dValorCofins = StrParaDbl(Mid(sRegistro, iPos, 15)) / 100
            iPos = iPos + 15
            objNFe.dValorCSLL = StrParaDbl(Mid(sRegistro, iPos, 15)) / 100
            iPos = iPos + 15
            objNFe.dValorINSS = StrParaDbl(Mid(sRegistro, iPos, 15)) / 100
            iPos = iPos + 15
            objNFe.dValorIRPJ = StrParaDbl(Mid(sRegistro, iPos, 15)) / 100
            iPos = iPos + 15
            objNFe.dValorPIS = StrParaDbl(Mid(sRegistro, iPos, 15)) / 100
            iPos = iPos + 15
        End If
    
        objNFe.sDiscriminacao = Trim(Mid(sRegistro, iPos, Len(sRegistro) - iPos + 1))
        
    Else
    
        'objNFe.sSerieNFe = Trim(Mid(sRegistro, 2, 5))
        objNFe.lNumNFe = StrParaLong(Mid(sRegistro, 7, 6))
        
        sData = Mid(sRegistro, 13, 8)
        objNFe.dtData = StrParaDate(right(sData, 2) & "/" & Mid(sData, 5, 2) & "/" & left(sData, 4))
        sHora = Mid(sRegistro, 21, 2) & ":" & Mid(sRegistro, 21 + 2, 2) & ":" & Mid(sRegistro, 21 + 4, 2)
        objNFe.dHora = CDbl(CDate(sHora))
        
        objNFe.sCodVerificacao = Trim(Mid(sRegistro, 27, 24))
        
        objNFe.sSerieRPS = Trim(Mid(sRegistro, 51, 4))
        objNFe.lNumeroRPS = StrParaLong(Mid(sRegistro, 55, 10))
        
        objNFe.dtDataEmissaoRPS = objNFe.dtData
        
        objNFe.sISSRetido = Trim(Mid(sRegistro, 66, 1))
        
        objNFe.sSituacaoNF = Trim(Mid(sRegistro, 67, 1))
        sData = Mid(sRegistro, 68, 8)
        objNFe.dtDataCancelamento = StrParaDate(right(sData, 2) & "/" & Mid(sData, 5, 2) & "/" & left(sData, 4))
        
        objNFe.sNumGuia = Trim(Mid(sRegistro, 76, 10))
        sData = Mid(sRegistro, 86, 8)
        objNFe.dtDataQuitacaoGuia = StrParaDate(right(sData, 2) & "/" & Mid(sData, 5, 2) & "/" & left(sData, 4))

        objNFe.sCGCTom = Trim(Mid(sRegistro, 94, 14))
        objNFe.sRazaoSocialTom = Trim(Mid(sRegistro, 108, 100))
        objNFe.sEnderecoTom = Trim(Mid(sRegistro, 208, 100))
        objNFe.sEndNumeroTom = Trim(Mid(sRegistro, 308, 9))
        objNFe.sEndComplementoTom = Trim(Mid(sRegistro, 317, 20))
        objNFe.sBairroTom = Trim(Mid(sRegistro, 337, 40))
        objNFe.sCidadeTom = Trim(Mid(sRegistro, 377, 40))
        objNFe.sUFTom = Trim(Mid(sRegistro, 417, 2))
        objNFe.sCEPTom = Trim(Mid(sRegistro, 419, 8))
        objNFe.sEmailTom = Trim(Mid(sRegistro, 477, 152))
       
        objNFe.sDiscriminacao = Trim(Mid(sRegistro, 629, 1000))
        
    End If

    NFe_Desmonta_Registro_Tipo2 = SUCESSO

    Exit Function

Erro_NFe_Desmonta_Registro_Tipo2:

    NFe_Desmonta_Registro_Tipo2 = gErr

    Select Case gErr

        Case 192920, 13
            Call Rotina_Erro(vbOKOnly, "ERRO_ARQUIVO_NAO_IMP_NFE", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 192570)

    End Select

    Exit Function
    
End Function

Private Function NFe_Desmonta_Registro_Tipo3(ByVal objNFe As ClassNFe, sRegistro As String, Optional ByVal iCidade As Integer = RPS_CIDADE_SAO_PAULO)

Dim lErro As Long
Dim sData As String
Dim sHora As String

On Error GoTo Erro_NFe_Desmonta_Registro_Tipo3
    
    If iCidade = RPS_CIDADE_BARUERI Then
        
        objNFe.lCodServico = StrParaLong(Mid(sRegistro, 68, 9))
        objNFe.dAliquota = StrParaDbl(Mid(sRegistro, 92, 4)) / 100 / 100
                
        objNFe.dValorServicos = (StrParaDbl(Mid(sRegistro, 2, 6))) * StrParaDbl(Mid(sRegistro, 77, 15)) / 100
                
    End If

    NFe_Desmonta_Registro_Tipo3 = SUCESSO

    Exit Function

Erro_NFe_Desmonta_Registro_Tipo3:

    NFe_Desmonta_Registro_Tipo3 = gErr

    Select Case gErr

        Case 192920, 13
            Call Rotina_Erro(vbOKOnly, "ERRO_ARQUIVO_NAO_IMP_NFE", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 192570)

    End Select

    Exit Function
    
End Function

Private Function NFe_Desmonta_Registro_Tipo4(ByVal objNFe As ClassNFe, sRegistro As String, Optional ByVal iCidade As Integer = RPS_CIDADE_SAO_PAULO)

Dim lErro As Long
Dim sData As String
Dim sHora As String

On Error GoTo Erro_NFe_Desmonta_Registro_Tipo4
    
    If iCidade = RPS_CIDADE_BARUERI Then
        
        Select Case StrParaInt(Mid(sRegistro, 2, 2))
        
            Case 1
                objNFe.dValorIRPJ = StrParaDbl(Mid(sRegistro, 4, 15)) / 100
            Case 2
                objNFe.dValorPIS = StrParaDbl(Mid(sRegistro, 4, 15)) / 100
            Case 3
                objNFe.dValorCofins = StrParaDbl(Mid(sRegistro, 4, 15)) / 100
            Case 4
                objNFe.dValorCSLL = StrParaDbl(Mid(sRegistro, 4, 15)) / 100
        
        End Select
                
    End If

    NFe_Desmonta_Registro_Tipo4 = SUCESSO

    Exit Function

Erro_NFe_Desmonta_Registro_Tipo4:

    NFe_Desmonta_Registro_Tipo4 = gErr

    Select Case gErr

        Case 192920, 13
            Call Rotina_Erro(vbOKOnly, "ERRO_ARQUIVO_NAO_IMP_NFE", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 192570)

    End Select

    Exit Function
    
End Function

Private Function NFe_Desmonta_Registro_Tipo9(ByVal colNFe As Collection, sRegistro As String, Optional ByVal iCidade As Integer = RPS_CIDADE_SAO_PAULO)

Dim lErro As Long
Dim iPos As Integer
Dim objNFe As ClassNFe
Dim dValorS As Double
Dim dValorST As Double
Dim dValorD As Double
Dim dValorDT As Double
Dim dValorI As Double
Dim dValorIT As Double
Dim dValorC As Double
Dim dValorCT As Double
Dim lNumRegistros As Long

On Error GoTo Erro_NFe_Desmonta_Registro_Tipo9

    If iCidade = RPS_CIDADE_SAO_PAULO Then
        If Len(sRegistro) <> 68 Then gError 192921
    ElseIf iCidade = RPS_CIDADE_BARUERI Then
        If Len(sRegistro) <> 38 Then gError 192921
    Else
        If Len(sRegistro) <> 143 Then gError 192921
    End If

    For Each objNFe In colNFe
        dValorST = dValorST + objNFe.dValorServicos
        dValorDT = dValorDT + objNFe.dValorDeducoes
        dValorIT = dValorIT + objNFe.dValorISS
        dValorCT = dValorCT + objNFe.dValorCredito
    Next
    
    iPos = 2
    
    lNumRegistros = StrParaLong(Mid(sRegistro, iPos, 7))
    iPos = iPos + 7
    
    dValorS = StrParaDbl(Mid(sRegistro, iPos, 15)) / 100
    iPos = iPos + 15
    
    If iCidade <> RPS_CIDADE_BARUERI Then

        dValorD = StrParaDbl(Mid(sRegistro, iPos, 15)) / 100
        iPos = iPos + 15
    
        dValorI = StrParaDbl(Mid(sRegistro, iPos, 15)) / 100
        iPos = iPos + 15
    
        dValorC = StrParaDbl(Mid(sRegistro, iPos, 15)) / 100
        iPos = iPos + 15
        
        If lNumRegistros <> colNFe.Count Then gError 192913
        If Abs(dValorS - dValorST) > DELTA_VALORMONETARIO Then gError 192914
        If Abs(dValorD - dValorDT) > DELTA_VALORMONETARIO Then gError 192915
        If Abs(dValorI - dValorIT) > DELTA_VALORMONETARIO Then gError 192916
        If Abs(dValorC - dValorCT) > DELTA_VALORMONETARIO Then gError 192917
        
    End If
    
    If Abs(dValorS - dValorST) > DELTA_VALORMONETARIO Then gError 192914

    NFe_Desmonta_Registro_Tipo9 = SUCESSO

    Exit Function

Erro_NFe_Desmonta_Registro_Tipo9:

    NFe_Desmonta_Registro_Tipo9 = gErr

    Select Case gErr
    
        Case 13, 192921
            Call Rotina_Erro(vbOKOnly, "ERRO_ARQUIVO_NAO_IMP_NFE", gErr)
    
        Case 192913
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_NUM_REG_DIFERENTE", gErr, lNumRegistros, colNFe.Count)

        Case 192914
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_VLR_SERV_DIFERENTE", gErr, Format(dValorS, "STANDARD"), Format(dValorST, "STANDARD"))

        Case 192915
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_VLR_DED_DIFERENTE", gErr, Format(dValorD, "STANDARD"), Format(dValorDT, "STANDARD"))

        Case 192916
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_VLR_ISS_DIFERENTE", gErr, Format(dValorI, "STANDARD"), Format(dValorIT, "STANDARD"))

        Case 192917
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_VLR_CRED_DIFERENTE", gErr, Format(dValorC, "STANDARD"), Format(dValorCT, "STANDARD"))

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 192918)

    End Select

    Exit Function
    
End Function

Public Function NF_Cancela_RPS(ByVal objNF As ClassNFiscal) As Long

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim lNumIntDoc As Long
Dim objFilialEmpresa As New AdmFiliais
Dim iCidade As Integer, iEnviado As Integer

On Error GoTo Erro_NF_Cancela_RPS

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 192580
    Next
    
    objFilialEmpresa.iCodFilial = objNF.iFilialEmpresa
    
    lErro = CF("FilialEmpresa_Le", objFilialEmpresa)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    If UCase(objFilialEmpresa.objEndereco.sCidade) = "RECIFE" Then
        iCidade = RPS_CIDADE_RECIFE
    ElseIf UCase(objFilialEmpresa.objEndereco.sCidade) = "VOLTA REDONDA" Then
        iCidade = RPS_CIDADE_VOLTA_REDONDA
    Else
        iCidade = RPS_CIDADE_SAO_PAULO
    End If
    
    'Le a tabelaRPS
    lErro = Comando_ExecutarPos(alComando(0), "SELECT NumIntDoc, Enviado FROM RPS WHERE Serie= ?  AND Numero= ?  AND DataEmissao= ? AND FilialEmpresa = ?", _
                0, lNumIntDoc, iEnviado, objNF.sSerie, objNF.lNumNotaFiscal, objNF.dtDataEmissao, objNF.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 192581

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 192582

    'Se existir => UPDATE, senão => INSERT
    If lErro = AD_SQL_SUCESSO Then

        'Trava registro contra alterações/Leituras
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> SUCESSO Then gError 192583

        lErro = Comando_ExecutarPos(alComando(1), "UPDATE RPS SET Situacao= ?, DataUltAlteracao = ?, HoraUltAlteracao = ?, Enviado = ? ", alComando(0), "C", Date, CDbl(Time), IIf(iCidade = RPS_CIDADE_VOLTA_REDONDA, iEnviado, DESMARCADO))
        If lErro <> AD_SQL_SUCESSO Then gError 192584
        
    End If

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    NF_Cancela_RPS = SUCESSO

    Exit Function

Erro_NF_Cancela_RPS:

    NF_Cancela_RPS = gErr

    Select Case gErr

        Case 192580
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 192581, 192582
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RPS", gErr)

        Case 192583
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_RPS", gErr)

        Case 192584
            Call Rotina_Erro(vbOKOnly, "ERRO_UPDATE_RPS", gErr)
            
        Case ERRO_SEM_MENSAGEM

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 192585)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function NF_Exclui_RPS(ByVal objNF As ClassNFiscal) As Long

Dim lErro As Long
Dim alComando(0 To 2) As Long
Dim iIndice As Integer
Dim lNumIntDoc As Long

On Error GoTo Erro_NF_Exclui_RPS

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 192586
    Next

'    'Le a tabelaRPS
'    lErro = Comando_ExecutarPos(alComando(2), "SELECT NumIntDoc FROM RPSEnviados WHERE Serie= ?  AND Numero= ?  AND DataEmissao= ? AND FilialEmpresa = ?", _
'                0, lNumIntDoc, objNF.sSerie, objNF.lNumNotaFiscal, objNF.dtDataEmissao, objNF.iFilialEmpresa)
'    If lErro <> AD_SQL_SUCESSO Then gError 192587
'
'    'Busca Primeiro
'    lErro = Comando_BuscarPrimeiro(alComando(2))
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 192588
'
'    If lErro = AD_SQL_SUCESSO Then gError 192589

    'Le a tabelaRPS
    lErro = Comando_ExecutarPos(alComando(0), "SELECT NumIntDoc FROM RPS WHERE Serie= ?  AND Numero= ?  AND DataEmissao= ? AND FilialEmpresa = ?", _
                0, lNumIntDoc, objNF.sSerie, objNF.lNumNotaFiscal, objNF.dtDataEmissao, objNF.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 192590

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 192591

    'Se existir => EXCLUI
    If lErro = AD_SQL_SUCESSO Then

        'Trava registro contra alterações/Leituras
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> SUCESSO Then gError 192592

        lErro = Comando_ExecutarPos(alComando(1), "DELETE RPS ", alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 192593
        
    End If

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    NF_Exclui_RPS = SUCESSO

    Exit Function

Erro_NF_Exclui_RPS:

    NF_Exclui_RPS = gErr

    Select Case gErr

        Case 192586
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 192587, 192588, 192590, 192591
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RPS", gErr)

        Case 192589
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_NF_RPS_ENVIADO", gErr)

        Case 192592
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_RPS", gErr)

        Case 192593
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_RPS", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 192594)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function NFiscal_Cancela_Customizado(ByVal objNFiscal As ClassNFiscal) As Long
    NFiscal_Cancela_Customizado = SUCESSO
End Function

Public Function NFe_Importa_EmTrans(ByVal sDiretorio As String, ByVal sArquivo As String) As Long

Dim lErro As Long
Dim alComando(0 To 0) As Long
Dim iIndice As Integer
Dim objNFeCab As New ClassNFeCab
Dim objNFe As ClassNFe
Dim bArqAberto As Boolean
Dim colNFe As New Collection
Dim lNumIntDoc As Long
Dim sRegistro As String
Dim iCidade As Integer
Dim objFilialEmpresa As New AdmFiliais
Dim objCidade As New ClassCidades
'Dim objFSO As New FileSystemObject, objTS As TextStream
Dim objADO As Object, bEndOfFile As Boolean, iFormat As Integer

On Error GoTo Erro_NFe_Importa_EmTrans
    
    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 192899
    Next

    'Le a tabela NFeCab para verificar se o arquivo já foi importado antes
    lErro = Comando_Executar(alComando(0), "SELECT NumIntDoc FROM NFeCab WHERE NomeArquivo = ?", lNumIntDoc, sArquivo)
    If lErro <> AD_SQL_SUCESSO Then gError 192900

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 192901
    
    If lErro = AD_SQL_SUCESSO Then gError 192902 'Arquivo já importado
    
    objFilialEmpresa.iCodFilial = giFilialEmpresa
    
    lErro = CF("FilialEmpresa_Le", objFilialEmpresa)
    If lErro <> SUCESSO Then gError 192476
    
    objCidade.sDescricao = objFilialEmpresa.objEndereco.sCidade
    
    lErro = CF("Cidade_Le_Nome", objCidade)
    If lErro <> SUCESSO And lErro <> ERRO_OBJETO_NAO_CADASTRADO Then gError ERRO_SEM_MENSAGEM
    
    iFormat = 0 'ASCII
    
    If UCase(objFilialEmpresa.objEndereco.sCidade) = "RECIFE" Or objCidade.sCodIBGE = "2611606" Then
        iCidade = RPS_CIDADE_RECIFE
    ElseIf UCase(objFilialEmpresa.objEndereco.sCidade) = "VOLTA REDONDA" Or objCidade.sCodIBGE = "3306305" Then
        iCidade = RPS_CIDADE_VOLTA_REDONDA
    ElseIf UCase(objFilialEmpresa.objEndereco.sCidade) = "BARUERI" Or objCidade.sCodIBGE = "3505708" Then
        iCidade = RPS_CIDADE_BARUERI
        iFormat = 1 'UTF8
    Else
        iCidade = RPS_CIDADE_SAO_PAULO
    End If
   
    objNFeCab.sUsuario = gsUsuario
    objNFeCab.dHoraImportacao = CDbl(Time)
    objNFeCab.dtDataImportacao = Date
    objNFeCab.sNomeArquivo = sArquivo
       
'    Set objTS = objFSO.OpenTextFile(sDiretorio & sArquivo, ForReading)
    If iFormat = 0 Then
        Open sDiretorio & sArquivo For Input As #1
    Else
        Set objADO = CreateObject("ADODB.Stream")
        objADO.Open
        objADO.Charset = "UTF-8"
        objADO.LoadFromFile sDiretorio & sArquivo
    End If
    bArqAberto = True

    
    'Obtém a Primeita Linha
    'sRegistro = objTS.ReadLine
    If iFormat = 0 Then
        Line Input #1, sRegistro
    Else
        sRegistro = objADO.ReadText(-2)
    End If
        
    lErro = NFe_Desmonta_Registro_Tipo1(objNFeCab, sRegistro, iCidade)
    If lErro <> SUCESSO Then gError 192903
    
    If iFormat = 0 Then
        bEndOfFile = EOF(1)
    Else
        bEndOfFile = objADO.EOS
    End If
    
    'Do While Not EOF(1)
    Do While Not bEndOfFile
    
        'Obtém o registro
        'sRegistro = objTS.ReadLine
        If iFormat = 0 Then
            Line Input #1, sRegistro
        Else
            sRegistro = objADO.ReadText(-2)
        End If
                      
        If left(sRegistro, 1) = 2 Then
        
            Set objNFe = New ClassNFe
            objNFe.iFilialEmpresa = giFilialEmpresa

            lErro = NFe_Desmonta_Registro_Tipo2(objNFe, sRegistro, iCidade)
            If lErro <> SUCESSO Then gError 192904
            
            colNFe.Add objNFe
            
        ElseIf left(sRegistro, 1) = 3 Then
        
            lErro = NFe_Desmonta_Registro_Tipo3(objNFe, sRegistro, iCidade)
            If lErro <> SUCESSO Then gError 192904
        
        ElseIf left(sRegistro, 1) = 4 Then
        
            lErro = NFe_Desmonta_Registro_Tipo4(objNFe, sRegistro, iCidade)
            If lErro <> SUCESSO Then gError 192904
            
        ElseIf left(sRegistro, 1) = 9 Then
        
            lErro = NFe_Desmonta_Registro_Tipo9(colNFe, sRegistro, iCidade)
            If lErro <> SUCESSO Then gError 192905
        
        End If
        
        If iFormat = 0 Then
            bEndOfFile = EOF(1)
        Else
            bEndOfFile = objADO.EOS
        End If
               
    Loop
       
    '    objTS.Close
    If iFormat = 0 Then
        Close #1
    Else
        objADO.Close
    End If
    bArqAberto = False
    
    lErro = NFeCab_Insere(objNFeCab)
    If lErro <> SUCESSO Then gError 192906
    
    For Each objNFe In colNFe
    
        objNFe.lNumIntDocCab = objNFeCab.lNumIntDoc
               
        lErro = NFe_Grava(objNFeCab, objNFe)
        If lErro <> SUCESSO Then gError 192907
    
        lErro = NFeRecebidos_Insere(objNFe)
        If lErro <> SUCESSO Then gError 192908

    Next

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    NFe_Importa_EmTrans = SUCESSO

    Exit Function

Erro_NFe_Importa_EmTrans:

    NFe_Importa_EmTrans = gErr

    If bArqAberto Then Close #1

    Select Case gErr

        Case 192899
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 192900, 192901
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFECAB", gErr)
            
        Case 192902 'ERRO_ARQUIVO_LIDO
            Call Rotina_Erro(vbOKOnly, "ERRO_ARQUIVO_LIDO", gErr)
            
        Case 192903 To 192908, 192476

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 192909)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function Cliente_Exclui_Customizado(ByVal objCliente As ClassCliente) As Long
    Cliente_Exclui_Customizado = SUCESSO
End Function

Public Function Cliente_Grava_Customizado(ByVal objCliente As ClassCliente) As Long
    Cliente_Grava_Customizado = SUCESSO
End Function

Public Function Cliente_Grava_Customizado2(ByVal objCliente As ClassCliente, ByVal bClienteNovo As Boolean) As Long
    Cliente_Grava_Customizado2 = SUCESSO
End Function

Public Function ContratosRec_Importar() As Long

Dim lErro As Long
Dim alComando(1 To 3) As Long
Dim lTransacao As Long
Dim iIndice As Integer
Dim lNumIntDoc As Long
Dim lNumProx As Long, lNum As Long, iPeriodicidadePadrao As Integer
Dim dValor As Double, lCliente As Long, objContrato As ClassContrato, objItensDeContrato As ClassItensDeContrato

On Error GoTo Erro_ContratosRec_Importar

    lNum = 0 '???
    iPeriodicidadePadrao = PERIODICIDADE_MENSAL '???

    'Abre Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 129337
    Next

    'Abre Transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 129338
    
    lErro = Comando_Executar(alComando(1), "SELECT codcliente, cc_mensalidade from aa101115, clientes c where codcliente = c.codigo and cc_status not in ('AGUDAT', 'ABADI') and cc_mensalidade is not null order by c.razaosocial", lCliente, dValor)
    If lErro <> AD_SQL_SUCESSO Then gError 129339

    lErro = Comando_BuscarProximo(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 129340
    
    Do While lErro = AD_SQL_SUCESSO
    
        'Busca próximo identificador
        lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_PROX_CONTRATO", lNumProx)
        If lErro <> SUCESSO Then gError 131066
            
        Set objContrato = New ClassContrato
    
        With objContrato
            .lNumIntDoc = lNumProx
            .iFilialEmpresa = giFilialEmpresa
            
            If giFilialEmpresa = 1 Then
                lNum = lNum + 1
                .sCodigo = "M" & Format(lNum, "00000")
                .sDescricao = "CONTRIBUIÇÂO MENSAL ASSOCIADOS EJS"
                .iCondPagtoPadrao = 10
            End If
            
            .iAtivo = 1
            .lCliente = lCliente
            .iFilCli = 1
            .sObservacao = ""
            .dtDataIniContrato = CDate("01/11/2015")
            .dtDataFimContrato = DATA_NULA
            .dtDataRenovContrato = DATA_NULA
            .sContaContabil = ""
            .sHistoricoContabil = ""
            .dtDataIniCobrancaPadrao = DATA_NULA
            .iPeriodicidadePadrao = iPeriodicidadePadrao
            .sCcl = ""
            .sNaturezaOp = "5949"
            .iTipoTributacao = 32
            .iTipo = CONTRATOS_RECEBER
            .iFilForn = 0
            .lFornecedor = 0
            .iRecibo = 0
        
            'Insere contrato
            lErro = Comando_Executar(alComando(2), "INSERT INTO Contratos(NumIntDoc, FilialEmpresa, Codigo, Descricao, Ativo, Cliente, FilCli, Observacao, DataIniContrato, DataFimContrato, DataRenovContrato, ContaContabil, HistoricoContabil, DataIniCobrancaPadrao, PeriodicidadePadrao, CondPagtoPadrao, Ccl, NaturezaOP,TipoTributacao, Tipo, FilialFornecedor, Fornecedor, Recibo) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                                                                        .lNumIntDoc, .iFilialEmpresa, .sCodigo, .sDescricao, .iAtivo, .lCliente, .iFilCli, .sObservacao, .dtDataIniContrato, .dtDataFimContrato, .dtDataRenovContrato, .sContaContabil, .sHistoricoContabil, .dtDataIniCobrancaPadrao, .iPeriodicidadePadrao, .iCondPagtoPadrao, .sCcl, .sNaturezaOp, .iTipoTributacao, .iTipo, .iFilForn, .lFornecedor, .iRecibo)
        End With
        If lErro <> AD_SQL_SUCESSO Then gError 129341
        
        Set objItensDeContrato = New ClassItensDeContrato
        
        'Obtem identificado (NumIntDoc)
        lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_PROX_ITENSDECONTRATO", lNumProx)
        If lErro <> SUCESSO Then gError 129367
            
        With objItensDeContrato
        
            .lNumIntDoc = lNumProx
            .lNumIntContrato = objContrato.lNumIntDoc
            .iSeq = 1
            .iCobrar = 1
            
            .sProduto = "00001"
            .sDescProd = "Contribuição Sócio EJS"
            .iCondPagto = 10
            
            .dQuantidade = 1
            .sUM = "un"
            .dValor = dValor
            .iMedicao = 0
            .dtDataIniCobranca = CDate("20/11/2015")
            .iPeriodicidade = iPeriodicidadePadrao
            .sObservacao = ""
            .dtDataProxCobranca = CDate("20/11/2015")
            
            .dtDataRefIni = CDate("01/12/2015")
            .dtDataRefFim = CDate("31/12/2015")
            
            'Insere item
            lErro = Comando_Executar(alComando(3), "INSERT INTO ItensDeContrato(NumIntDoc, NumIntContrato, Seq, Cobrar, Produto, DescProd, Quantidade, UM, Valor, Medicao, DataIniCobranca, Periodicidade, CondPagto, Observacao, DataProxCobranca, DataRefIni, DataRefFim) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                                                        .lNumIntDoc, .lNumIntContrato, .iSeq, .iCobrar, .sProduto, .sDescProd, .dQuantidade, .sUM, .dValor, .iMedicao, .dtDataIniCobranca, .iPeriodicidade, .iCondPagto, .sObservacao, .dtDataProxCobranca, .dtDataRefIni, .dtDataRefFim)
        End With
        If lErro <> AD_SQL_SUCESSO Then gError 129348
        
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 129340
    
    Loop
    
    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 129344
 
    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    ContratosRec_Importar = SUCESSO
    
    Exit Function
    
Erro_ContratosRec_Importar:

    ContratosRec_Importar = gErr

    Select Case gErr

        Case 129337
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 129338
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 129344
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
             
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 184417)

    End Select
    
    'Desfaz as alterações
    Call Transacao_Rollback
    
    'Fecha comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Public Function NFiscalContrato_Gera_InfoBoletos(ByVal objNFiscal As ClassNFiscal) As Long

    NFiscalContrato_Gera_InfoBoletos = SUCESSO
    
End Function

Public Function Endereco_Grava_Customizado(ByVal objEndereco As ClassEndereco) As Long
    Endereco_Grava_Customizado = SUCESSO
End Function

Public Function RelReciboContabil_Prepara(ByVal lNumMovto As Long, lNumIntRel As Long) As Long

Dim lErro As Long, iTipoRecibo As Integer
Dim sMOV_Historico As String, sHistorico As String, iMOV_Favorecido As Integer, sFavorecido As String
Dim lMOV_NumMovto As Long, iMOV_Tipo As Integer, dMOV_Valor As Double, lMOV_NumRefInterna As Long, iCodBanco As Integer
Dim lTransacao As Long, dSaldoNaoApropriado As Double, dFator As Double, objFavorecidos As New ClassFavorecidos
Dim iIndice As Integer, alComando(0 To 28) As Long, alComando1(1 To 4) As Long
Dim sFornRazaoSocial As String, sCliRazaoSocial As String, sContaContabilConta As String

On Error GoTo Erro_RelReciboContabil_Prepara

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 184230

    'Executa a abertura dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 184231
    Next
    
    'Obter NumIntRel
    lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_PROX_REL_FLUXOCXCTB", lNumIntRel)
    If lErro <> SUCESSO Then gError 184232

    sMOV_Historico = String(STRING_HISTORICOMOVCONTA, 0)
    sContaContabilConta = String(STRING_CONTA, 0)
    
    'obter os movimentos de conta corrente
    lErro = Comando_Executar(alComando(1), "SELECT NumMovto, Tipo, Valor, NumRefInterna, CodBanco, Historico, Favorecido, ContasCorrentesInternas.ContaContabil FROM MovimentosContaCorrente, ContasCorrentesInternas WHERE MovimentosContaCorrente.CodConta = ContasCorrentesInternas.Codigo AND NumMovto = ? AND EXCLUIDO = 0 ORDER BY DataMovimento, NumMovto", _
        lMOV_NumMovto, iMOV_Tipo, dMOV_Valor, lMOV_NumRefInterna, iCodBanco, sMOV_Historico, iMOV_Favorecido, sContaContabilConta, lNumMovto)
    If lErro <> AD_SQL_SUCESSO Then gError 184233

    lErro = Comando_BuscarProximo(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 184234

    Do While lErro <> AD_SQL_SEM_DADOS

        sHistorico = ""
        sFavorecido = ""
        
        Select Case iMOV_Tipo

            Case MOVCCI_SAQUE
                
                sHistorico = sMOV_Historico
                
                If iCodBanco = 0 Then
                    iTipoRecibo = 1
                Else
                    iTipoRecibo = 2
                End If
                
                If iMOV_Favorecido <> 0 Then
                    objFavorecidos.iCodigo = iMOV_Favorecido
                    lErro = CF("Favorecido_Le", objFavorecidos)
                    If lErro <> SUCESSO And lErro <> 17015 Then gError 184432
                    If lErro = SUCESSO Then sFavorecido = objFavorecidos.sNome
                End If
                
                'incluir lancamentos contabeis do movimento
                lErro = RelReciboContabil_Prepara3(lNumIntRel, lMOV_NumMovto, 8, 1, alComando, lMOV_NumMovto, sContaContabilConta)
                If lErro <> SUCESSO Then gError 184236
            
            Case MOVCCI_DEPOSITO

                sHistorico = sMOV_Historico
                
                If iCodBanco = 0 Then
                    iTipoRecibo = 3
                Else
                    iTipoRecibo = 4
                End If
                
                If iMOV_Favorecido <> 0 Then
                    objFavorecidos.iCodigo = iMOV_Favorecido
                    lErro = CF("Favorecido_Le", objFavorecidos)
                    If lErro <> SUCESSO And lErro <> 17015 Then gError 184433
                    If lErro = SUCESSO Then sFavorecido = objFavorecidos.sNome
                End If
                
                'incluir lancamentos contabeis do movimento
                lErro = RelReciboContabil_Prepara3(lNumIntRel, lMOV_NumMovto, 7, 1, alComando, lMOV_NumMovto, sContaContabilConta)
                If lErro <> SUCESSO Then gError 184237

            Case MOVCCI_SAIDA_TRANSFERENCIA
                
                iTipoRecibo = 2
                
                'incluir lancamentos contabeis do movimento
                lErro = RelReciboContabil_Prepara3(lNumIntRel, lMOV_NumMovto, 30, 1, alComando, lMOV_NumMovto, sContaContabilConta)
                If lErro <> SUCESSO Then gError 184237

            Case MOVCCI_ENTRADA_TRANSFERENCIA
                
                iTipoRecibo = 4
                
                'incluir lancamentos contabeis do movimento
                lErro = RelReciboContabil_Prepara3(lNumIntRel, lMOV_NumMovto, 30, 1, alComando, lMOV_NumMovto - 1, sContaContabilConta)
                If lErro <> SUCESSO Then gError 184237

            Case MOVCCI_PAGTO_ANTECIPADO
                
                iTipoRecibo = 2
                
                sFornRazaoSocial = String(STRING_FORNECEDOR_RAZAO_SOC, 0)
                
                lErro = Comando_Executar(alComando(3), "SELECT SaldoNaoApropriado, Fornecedores.RazaoSocial FROM PagtosAntecipados, Fornecedores WHERE PagtosAntecipados.Fornecedor = Fornecedores.Codigo AND NumMovto = ?", _
                    dSaldoNaoApropriado, sFornRazaoSocial, lMOV_NumMovto)
                If lErro <> AD_SQL_SUCESSO Then gError 184238
                
                lErro = Comando_BuscarProximo(alComando(3))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 184239

                If lErro = AD_SQL_SUCESSO Then
                
                    sFavorecido = sFornRazaoSocial
                    sHistorico = "Adiantamento a Fornecedor"
                    
                    'incluir lancamentos contabeis do movimento
                    lErro = RelReciboContabil_Prepara3(lNumIntRel, lMOV_NumMovto, 10, 1, alComando, lMOV_NumMovto, sContaContabilConta)
                    If lErro <> SUCESSO Then gError 184241
                
                End If
                
            Case MOVCCI_RECEB_ANTECIPADO
                
                iTipoRecibo = 4
                
                sCliRazaoSocial = String(STRING_CLIENTE_RAZAO_SOCIAL, 0)
                
                lErro = Comando_Executar(alComando(4), "SELECT SaldoNaoApropriado, Clientes.RazaoSocial FROM RecebAntecipados, Clientes WHERE RecebAntecipados.Cliente = Clientes.Codigo AND NumMovto = ?", _
                    dSaldoNaoApropriado, sCliRazaoSocial, lMOV_NumMovto)
                If lErro <> AD_SQL_SUCESSO Then gError 184243
                
                lErro = Comando_BuscarProximo(alComando(4))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 184244

                If lErro = AD_SQL_SUCESSO Then
                
                    sFavorecido = sCliRazaoSocial
                    sHistorico = "Adiantamento de Cliente"
                    
                    'incluir lancamentos contabeis do movimento
                    lErro = RelReciboContabil_Prepara3(lNumIntRel, lMOV_NumMovto, 11, 1, alComando, lMOV_NumMovto, sContaContabilConta)
                    If lErro <> SUCESSO Then gError 184246
                
                End If
                
            Case MOVCCI_PAGTO_TITULO_POR_CHEQUE, MOVCCI_PAGTO_TITULO_POR_BORDERO, MOVCCI_PAGTO_TITULO_POR_DINHEIRO
                
                If iCodBanco = 0 Then
                    iTipoRecibo = 1
                Else
                    iTipoRecibo = 2
                End If
                
                sHistorico = "Pagamento de Títulos: "
                
                'pegar info dos titulos, parcelas, baixa, baixasparc
                lErro = RelReciboContabil_Prepara1(lNumIntRel, lMOV_NumMovto, alComando, sFavorecido, sContaContabilConta, sHistorico)
                If lErro <> SUCESSO Then gError 184248

            Case MOVCCI_RECEBIMENTO_TITULO, MOVCCI_CREDITO_RETORNO_COBRANCA, MOVCCI_CRED_RET_COBRANCA

                If iCodBanco = 0 Then
                    iTipoRecibo = 3
                Else
                    iTipoRecibo = 4
                End If
                
                sHistorico = "Recebimento de Títulos: "
                
                'pegar info dos titulos, parcelas, baixa, baixasparc
                lErro = RelReciboContabil_Prepara4(lNumIntRel, lMOV_NumMovto, alComando, sFavorecido, sContaContabilConta, sHistorico)
                If lErro <> SUCESSO Then gError 184249
            
            Case MOVCCI_DEB_RET_COBRANCA

            Case MOVCCI_RECEBTO_CANCELA
'                'pegar info dos titulos, parcelas, baixa, baixasparc
'                lErro = RelReciboContabil_Prepara5(lNumIntRel, lMOV_NumMovto, lMOV_NumRefInterna, alComando)
'                If lErro <> SUCESSO Then gError

            Case MOVCCI_BAIXA_RECEBANTECIPADO
                'criar registro informativo

            Case MOVCCI_BAIXA_DEBITOSRECCLI
                'criar registro informativo

            Case MOVCCI_BAIXA_PAGANTECIPADO
                'criar registro informativo

            Case MOVCCI_BAIXA_CREDITOSPAGFORN
                'criar registro informativo

            'Case MOVCCI_CANC_PAGTO
            'Case MOVCCI_APLICACAO
            'Case MOVCCI_RESGATE
'            Case MOVCCI_RECEBTO_CANCELA
'                'pegar info dos titulos, parcelas, baixa, baixasparc
'                lErro = RelReciboContabil_Prepara5(lNumIntRel, lMOV_NumMovto, lMOV_NumRefInterna, alComando)
'                If lErro <> SUCESSO Then gError

            Case Else
                gError 184250

        End Select

        'registrar o movto de conta corrente
        lErro = Comando_Executar(alComando(2), "INSERT INTO RelReciboContabil (NumIntRel, NumMovto, TipoRecibo, Historico, Favorecido) VALUES (?,?,?,?,?)", _
            lNumIntRel, lMOV_NumMovto, iTipoRecibo, sHistorico, sFavorecido)
        If lErro <> AD_SQL_SUCESSO Then gError 184235

        'excluir os lancamentos contabeis em que a soma dos lctos na conta dá zero.
        lErro = Comando_Executar(alComando(26), "DELETE FROM RelReciboContabilLctos WHERE NumIntRel = ? AND NumMovto = ? AND Conta IN (SELECT Conta FROM RelReciboContabilLctos R2 WHERE R2.NumIntRel = RelReciboContabilLctos.NumIntRel AND R2.NumMovto = RelReciboContabilLctos.NumMovto GROUP BY Conta HAVING SUM(ValorRateado)=0 )", _
            lNumIntRel, lMOV_NumMovto)
        If lErro <> AD_SQL_SUCESSO Then gError 184434
        
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 184251

    Loop

    'Executa o fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    'fecha transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 184252
    
    RelReciboContabil_Prepara = SUCESSO
    
    Exit Function
    
Erro_RelReciboContabil_Prepara:

    RelReciboContabil_Prepara = gErr

    Select Case gErr

        Case 184250
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPOMOVTOCTA_NAO_TRATADO", gErr, iMOV_Tipo)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 184431)

    End Select
    
    'Executa o fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Private Function RelReciboContabil_Prepara3(ByVal lNumIntRel As Long, ByVal lMOV_NumMovto As Long, ByVal iTransacao As Integer, ByVal dFator As Double, alComando() As Long, ByVal lNumIntDoc As Long, ByVal sContaContabilConta As String) As Long
'registra lancamentos contabeis ligados a movto de conta corrente

Dim lErro As Long, dValorRateado As Double
Dim iIndice As Integer, sHistorico As String
Dim iLCTO_FilialEmpresa As Integer, sLCTO_Origem As String, iLCTO_Exercicio As Integer, iLCTO_PeriodoLan As Integer, lLCTO_Doc As Long, iLCTO_Seq As Integer, sLCTO_Conta As String, dLCTO_Valor As Double

On Error GoTo Erro_RelReciboContabil_Prepara3
    
    'obter lctos contabeis
    sLCTO_Origem = String(STRING_ORIGEM, 0)
    sLCTO_Conta = String(STRING_CONTA, 0)
    sHistorico = String(STRING_HISTORICO, 0)
    
    If giFilialEmpresa < Abs(giFilialAuxiliar) Then
        lErro = Comando_Executar(alComando(9), "SELECT FilialEmpresa, Origem, Exercicio, PeriodoLan, Doc, Seq, Conta, Valor, Historico FROM LancamentosTodos WHERE LancamentosTodos.Status = 0 AND Transacao = ? AND NumIntDoc = ? AND FilialEmpresa < ?", _
            iLCTO_FilialEmpresa, sLCTO_Origem, iLCTO_Exercicio, iLCTO_PeriodoLan, lLCTO_Doc, iLCTO_Seq, sLCTO_Conta, dLCTO_Valor, sHistorico, iTransacao, lNumIntDoc, Abs(giFilialAuxiliar))
    Else
        lErro = Comando_Executar(alComando(9), "SELECT FilialEmpresa, Origem, Exercicio, PeriodoLan, Doc, Seq, Conta, Valor, Historico FROM LancamentosTodos WHERE LancamentosTodos.Status = 0 AND Transacao = ? AND NumIntDoc = ? AND FilialEmpresa > ?", _
            iLCTO_FilialEmpresa, sLCTO_Origem, iLCTO_Exercicio, iLCTO_PeriodoLan, lLCTO_Doc, iLCTO_Seq, sLCTO_Conta, dLCTO_Valor, sHistorico, iTransacao, lNumIntDoc, Abs(giFilialAuxiliar))
    End If
    If lErro <> AD_SQL_SUCESSO Then gError 184266

    lErro = Comando_BuscarProximo(alComando(9))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 184267

    'incluir lctos
    Do While lErro <> AD_SQL_SEM_DADOS

        If (iTransacao <> 30 Or ((lMOV_NumMovto = lNumIntDoc And dLCTO_Valor > 0) Or ((lMOV_NumMovto - 1) = lNumIntDoc) And dLCTO_Valor < 0)) Then
        
            dValorRateado = Arredonda_Moeda(dLCTO_Valor * dFator)
            
            If sContaContabilConta <> sLCTO_Conta Then
            
                iIndice = iIndice + 1
                
                lErro = Comando_Executar(alComando(10), "INSERT INTO RelReciboContabilLctos (NumIntRel, NumMovto, Transacao, NumIntDoc, Indice, FilialEmpresa, Origem, Exercicio, PeriodoLan, Doc, Seq, Conta, Valor, ValorRateado, Historico) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                    lNumIntRel, lMOV_NumMovto, iTransacao, lNumIntDoc, iIndice, iLCTO_FilialEmpresa, sLCTO_Origem, iLCTO_Exercicio, iLCTO_PeriodoLan, lLCTO_Doc, iLCTO_Seq, sLCTO_Conta, dLCTO_Valor, dValorRateado, sHistorico)
                If lErro <> AD_SQL_SUCESSO Then gError 184268

            End If
            
        End If
        
        lErro = Comando_BuscarProximo(alComando(9))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 184269

    Loop
    
    RelReciboContabil_Prepara3 = SUCESSO

    Exit Function

Erro_RelReciboContabil_Prepara3:

    RelReciboContabil_Prepara3 = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 184270)

    End Select

    Exit Function

End Function

Private Function RelReciboContabil_Prepara1(ByVal lNumIntRel As Long, ByVal lMOV_NumMovto As Long, alComando() As Long, sFavorecido As String, ByVal sContaContabilConta As String, sHistorico As String) As Long
'tratar as baixas no contas a pagar associadas a um movimento de conta corrente

Dim lErro As Long, dFator As Double, iIndice As Integer
Dim lBX_NumIntBaixa As Long, dtBX_Data As Date, dtBX_DataContabil As Date, dtBX_DataRegistro As Date
Dim lBXPARC_NumIntDoc As Long, dBXPARC_ValorJuros As Double, dBXPARC_ValorMulta As Double, dBXPARC_ValorDesconto As Double, dBXPARC_ValorBaixado As Double, dBXPARC_ValorDiferenca As Double
Dim iPARC_NumParcela As Integer, dtPARC_DataVencimento As Date, dPARC_Valor As Double, lTIT_NumIntDoc As Long, iTIT_FilialEmpresa As Integer, lTIT_Fornecedor As Long, sTIT_SiglaDocumento As String, lTIT_NumTitulo As Long, dtTIT_DataEmissao As Date
Dim dTIT_ValorTotal  As Double, dTIT_ValorIRRF As Double, dTIT_PISRetido As Double, dTIT_ISSRetido As Double, dTIT_COFINSRetido As Double, dTIT_CSLLRetido As Double, dTIT_ValorINSS As Double, iTIT_INSSRetido As Integer, sTIT_Observacao As String
Dim sFORN_RazaoSocial As String, sFORN_NomeReduzido As String, lTIT_NumIntDocAnt As Long
Dim lNumTitulo As Long, lNumTituloAnt As Long, sHistoricoAux As String

Dim dValorBaixado As Double, dValorMulta As Double, dValorJuros As Double, dValorDesconto As Double, dValorDiferenca As Double
Dim dValorLiqTit As Double, sFornRazaoSocial As String
Dim colLancamento_Detalhe As New Collection, objLanc As ClassLancamento_Detalhe

On Error GoTo Erro_RelReciboContabil_Prepara1
    
    sFornRazaoSocial = String(STRING_FORNECEDOR_RAZAO_SOC, 0)
    
    lErro = Comando_Executar(alComando(5), "SELECT BX.NumIntBaixa, BXPARC.NumIntDoc, BXPARC.ValorJuros, BXPARC.ValorMulta, BXPARC.ValorDesconto, BXPARC.ValorBaixado, BXPARC.ValorDiferenca, " & _
        "TIT.NumTitulo, TIT.NumIntDoc, TIT.ValorTotal, TIT.ValorIRRF, TIT.PISRetido, TIT.ISSRetido, TIT.COFINSRetido, TIT.CSLLRetido, TIT.ValorINSS, TIT.INSSRetido, FORN.RazaoSocial " & _
        "FROM Fornecedores FORN, titulospagtodos TIT, parcelaspagtodas PARC, baixaspag BX, baixasparcpag BXPARC " & _
        "WHERE TIT.Fornecedor = FORN.Codigo AND TIT.NumIntDoc = PARC.NumIntTitulo AND BX.NumIntBaixa = BXPARC.numintbaixa AND PARC.numintdoc = BXPARC.numintparcela AND " & _
        "BXPARC.status<> 5 AND BX.status<>5 AND BX.NumMovCta = ? ORDER BY TIT.NumIntDoc, BX.NumIntBaixa, BXPARC.NumIntDoc", _
        lBX_NumIntBaixa, lBXPARC_NumIntDoc, dBXPARC_ValorJuros, dBXPARC_ValorMulta, dBXPARC_ValorDesconto, dBXPARC_ValorBaixado, dBXPARC_ValorDiferenca, _
        lNumTitulo, lTIT_NumIntDoc, dTIT_ValorTotal, dTIT_ValorIRRF, dTIT_PISRetido, dTIT_ISSRetido, dTIT_COFINSRetido, dTIT_CSLLRetido, dTIT_ValorINSS, iTIT_INSSRetido, sFornRazaoSocial, _
        lMOV_NumMovto)
    If lErro <> AD_SQL_SUCESSO Then gError 184254
    
    lErro = Comando_BuscarProximo(alComando(5))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 184255
    
    If lErro <> AD_SQL_SEM_DADOS Then
    
        lTIT_NumIntDocAnt = lTIT_NumIntDoc
        lNumTituloAnt = lNumTitulo
        dValorLiqTit = Arredonda_Moeda(dTIT_ValorTotal - dTIT_ValorIRRF - dTIT_PISRetido - dTIT_ISSRetido - dTIT_COFINSRetido - dTIT_CSLLRetido - IIf(iTIT_INSSRetido = 0, 0, dTIT_ValorINSS))
        
        Do While lErro <> AD_SQL_SEM_DADOS
        
            'se trocou de titulo
            If lTIT_NumIntDocAnt <> lTIT_NumIntDoc Then
            
                sHistoricoAux = CStr(lNumTituloAnt)
                'inserir lctos contabeis do titulo anterior
                lErro = RelReciboContabil_Prepara2(lNumIntRel, lMOV_NumMovto, 15, lTIT_NumIntDocAnt, dFator, alComando, sFavorecido, sFornRazaoSocial, sHistorico, sHistoricoAux)
                If lErro <> SUCESSO Then gError 184257
                
                lTIT_NumIntDocAnt = lTIT_NumIntDoc
                lNumTituloAnt = lNumTitulo
                dValorLiqTit = Arredonda_Moeda(dTIT_ValorTotal - dTIT_ValorIRRF - dTIT_PISRetido - dTIT_ISSRetido - dTIT_COFINSRetido - dTIT_CSLLRetido - IIf(iTIT_INSSRetido = 0, 0, dTIT_ValorINSS))
                
                'inicializar acumuladores
                dValorBaixado = 0
                dValorMulta = 0
                dValorJuros = 0
                dValorDesconto = 0
                dValorDiferenca = 0
                                    
            End If
            
            'acumula valores
            dValorBaixado = dValorBaixado + dBXPARC_ValorBaixado
            dValorMulta = dValorMulta + dBXPARC_ValorMulta
            dValorJuros = dValorJuros + dBXPARC_ValorJuros
            dValorDesconto = dValorDesconto + dBXPARC_ValorDesconto
            dValorDiferenca = dValorDiferenca + dBXPARC_ValorDiferenca
            dFator = dValorBaixado / dValorLiqTit
            
            lErro = Comando_BuscarProximo(alComando(5))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 184258
        
        Loop
        
        sHistoricoAux = CStr(lNumTituloAnt)
        'pesquisa e inclui lctos do ultimo titulo
        lErro = RelReciboContabil_Prepara2(lNumIntRel, lMOV_NumMovto, 15, lTIT_NumIntDocAnt, dFator, alComando, sFavorecido, sFornRazaoSocial, sHistorico, sHistoricoAux)
        If lErro <> SUCESSO Then gError 184259

        'obtem lctos contabeis ligados a baixa
        lErro = CF("Lancamento_Le_GrupoTransExc", GRUPOTRANSEXC_BAIXAPAG, lBX_NumIntBaixa, colLancamento_Detalhe)
        If lErro <> SUCESSO And lErro <> 41988 Then gError 184435
        If lErro <> SUCESSO Then
            lErro = CF("LanPendente_Le_GrupoTransExc", GRUPOTRANSEXC_BAIXAPAG, lBX_NumIntBaixa, colLancamento_Detalhe)
            If lErro <> SUCESSO And lErro <> 41993 Then gError 184436
        End If
                
        iIndice = 20000
        
        For Each objLanc In colLancamento_Detalhe
        
            If sContaContabilConta <> objLanc.sConta And objLanc.iStatus = 0 Then
            
                iIndice = iIndice + 1
                
                lErro = Comando_Executar(alComando(27), "INSERT INTO RelReciboContabilLctos (NumIntRel, NumMovto, Transacao, NumIntDoc, Indice, FilialEmpresa, Origem, Exercicio, PeriodoLan, Doc, Seq, Conta, Valor, ValorRateado, Historico) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                    lNumIntRel, lMOV_NumMovto, objLanc.iTransacao, objLanc.lNumIntDoc, iIndice, objLanc.iFilialEmpresa, objLanc.sOrigem, objLanc.iExercicio, objLanc.iPeriodoLan, objLanc.lDoc, objLanc.iSeq, objLanc.sConta, objLanc.dValor, objLanc.dValor, objLanc.sHistorico)
                If lErro <> AD_SQL_SUCESSO Then gError 184437
        
            End If
        
        Next
        
    End If
    
    RelReciboContabil_Prepara1 = SUCESSO

    Exit Function

Erro_RelReciboContabil_Prepara1:

    RelReciboContabil_Prepara1 = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 184260)

    End Select

    Exit Function

End Function

Private Function RelReciboContabil_Prepara2(ByVal lNumIntRel As Long, ByVal lMOV_NumMovto As Long, ByVal iOrigem As Integer, ByVal lNumIntDoc As Long, ByVal dFator As Double, alComando() As Long, sFavorecido As String, ByVal sRazaoSocial As String, sHistorico As String, sHistoricoAux As String) As Long
'registra os lctos contabeis identificados pelo numintdoc do lcto e sua origem

Dim lErro As Long, dValorLctoAux As Double
Dim iIndice As Integer, iTransacao As Integer, sLCTO_Historico As String
Dim iLCTO_FilialEmpresa As Integer, sLCTO_Origem As String, iLCTO_Exercicio As Integer, iLCTO_PeriodoLan As Integer, lLCTO_Doc As Long, iLCTO_Seq As Integer, sLCTO_Conta As String, dLCTO_Valor As Double

On Error GoTo Erro_RelReciboContabil_Prepara2
    
    'obter os lctos
    sLCTO_Origem = String(STRING_ORIGEM, 0)
    sLCTO_Conta = String(STRING_CONTA, 0)
    sLCTO_Historico = String(STRING_HISTORICO, 0)
    
    If giFilialEmpresa < Abs(giFilialAuxiliar) Then
        lErro = Comando_Executar(alComando(7), "SELECT LCTO.FilialEmpresa, LCTO.Origem, LCTO.Exercicio, LCTO.PeriodoLan, LCTO.Doc, LCTO.Seq, LCTO.Conta, LCTO.Valor, LCTO.Transacao, LCTO.Historico " & _
            "FROM lancamentostodos LCTO, transacaoctb TCTB, transacaoctborigem TCTBO " & _
            "WHERE LCTO.Status = 0 AND TCTBO.codigo = TCTB.origemlcto AND TCTB.codigo = LCTO.transacao AND " & _
            "TCTBO.Codigo = ? AND LCTO.numintdoc = ? AND LCTO.FilialEmpresa < ? ORDER BY LCTO.FilialEmpresa, LCTO.Origem, LCTO.Exercicio, LCTO.PeriodoLan, LCTO.Doc, LCTO.Seq", _
            iLCTO_FilialEmpresa, sLCTO_Origem, iLCTO_Exercicio, iLCTO_PeriodoLan, lLCTO_Doc, iLCTO_Seq, sLCTO_Conta, dLCTO_Valor, iTransacao, sLCTO_Historico, _
            iOrigem, lNumIntDoc, Abs(giFilialAuxiliar))
    Else
        lErro = Comando_Executar(alComando(7), "SELECT LCTO.FilialEmpresa, LCTO.Origem, LCTO.Exercicio, LCTO.PeriodoLan, LCTO.Doc, LCTO.Seq, LCTO.Conta, LCTO.Valor, LCTO.Transacao, LCTO.Historico " & _
            "FROM lancamentostodos LCTO, transacaoctb TCTB, transacaoctborigem TCTBO " & _
            "WHERE LCTO.Status = 0 AND TCTBO.codigo = TCTB.origemlcto AND TCTB.codigo = LCTO.transacao AND " & _
            "TCTBO.Codigo = ? AND LCTO.numintdoc = ? AND LCTO.FilialEmpresa > ? ORDER BY LCTO.FilialEmpresa, LCTO.Origem, LCTO.Exercicio, LCTO.PeriodoLan, LCTO.Doc, LCTO.Seq", _
            iLCTO_FilialEmpresa, sLCTO_Origem, iLCTO_Exercicio, iLCTO_PeriodoLan, lLCTO_Doc, iLCTO_Seq, sLCTO_Conta, dLCTO_Valor, iTransacao, sLCTO_Historico, _
            iOrigem, lNumIntDoc, Abs(giFilialAuxiliar))
    End If
    If lErro <> AD_SQL_SUCESSO Then gError 184261
    
    lErro = Comando_BuscarProximo(alComando(7))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 184262

    'incluir lctos
    Do While lErro <> AD_SQL_SEM_DADOS

        dValorLctoAux = Arredonda_Moeda(dLCTO_Valor * dFator)
        
        iIndice = iIndice + 1
        
        lErro = Comando_Executar(alComando(8), "INSERT INTO RelReciboContabilLctos (NumIntRel, NumMovto, Transacao, NumIntDoc, Indice, FilialEmpresa, Origem, Exercicio, PeriodoLan, Doc, Seq, Conta, Valor, ValorRateado, Historico) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
            lNumIntRel, lMOV_NumMovto, iTransacao, lNumIntDoc, iIndice, iLCTO_FilialEmpresa, sLCTO_Origem, iLCTO_Exercicio, iLCTO_PeriodoLan, lLCTO_Doc, iLCTO_Seq, sLCTO_Conta, dLCTO_Valor, dValorLctoAux, sLCTO_Historico)
        If lErro <> AD_SQL_SUCESSO Then gError 184263

        lErro = Comando_BuscarProximo(alComando(7))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 184264

    Loop
    
    If InStr(1, sFavorecido, sRazaoSocial) = 0 Then
    
        If Len(sFavorecido) + Len(sRazaoSocial) > 250 Then
            sFavorecido = "DIVERSOS, FAVOR CONSULTAR OS DOCUMENTOS EM ANEXO."
        Else
            If sFavorecido <> "" Then sFavorecido = sFavorecido & ", "
            sFavorecido = sFavorecido & sRazaoSocial
        End If
        
    End If
    
    If Len(sHistorico) + Len(sHistorico) > 240 Then
        sHistorico = "DIVERSOS, FAVOR CONSULTAR OS DOCUMENTOS EM ANEXO."
    Else
    
        If right(sHistorico, 2) <> ": " Then sHistorico = sHistorico & ", "
        sHistorico = sHistorico & sHistoricoAux
        
    End If
            
    RelReciboContabil_Prepara2 = SUCESSO

    Exit Function

Erro_RelReciboContabil_Prepara2:

    RelReciboContabil_Prepara2 = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 184265)

    End Select

    Exit Function

End Function

Private Function RelReciboContabil_Prepara4(ByVal lNumIntRel As Long, ByVal lMOV_NumMovto As Long, alComando() As Long, sFavorecido As String, ByVal sContaContabilConta As String, sHistorico As String) As Long
'tratar as baixas no contas a receber associadas a um movimento de conta corrente

Dim lErro As Long, dFator As Double
Dim lBX_NumIntBaixa As Long, dtBX_Data As Date, dtBX_DataContabil As Date, dtBX_DataRegistro As Date
Dim lBXPARC_NumIntDoc As Long, dBXPARC_ValorJuros As Double, dBXPARC_ValorMulta As Double, dBXPARC_ValorDesconto As Double, dBXPARC_ValorBaixado As Double, dBXPARC_ValorRecebido As Double
Dim iPARC_NumParcela As Integer, dtPARC_DataVencimento As Date, dPARC_Valor As Double, lTIT_NumIntDoc As Long, iTIT_FilialEmpresa As Integer, lTIT_Cliente As Long, sTIT_SiglaDocumento As String, lTIT_NumTitulo As Long, dtTIT_DataEmissao As Date
Dim dTIT_Valor As Double, dTIT_ValorIRRF As Double, dTIT_PISRetido As Double, dTIT_ISSRetido As Double, dTIT_COFINSRetido As Double, dTIT_CSLLRetido As Double, dTIT_ValorINSS As Double, iTIT_INSSRetido As Integer, sTIT_Observacao As String
Dim sCLI_RazaoSocial As String, sCLI_NomeReduzido As String, lTIT_NumIntDocAnt As Long
Dim lNumTitulo As Long, lNumTituloAnt As Long, sHistoricoAux As String

Dim dValorBaixado As Double, dValorMulta As Double, dValorJuros As Double, dValorDesconto As Double, dValorRecebido As Double
Dim dValorLiqTit As Double, sCliRazaoSocial As String, iIndice As Integer
Dim colLancamento_Detalhe As New Collection, objLanc As ClassLancamento_Detalhe

On Error GoTo Erro_RelReciboContabil_Prepara4
    
    sCliRazaoSocial = String(STRING_CLIENTE_RAZAO_SOCIAL, 0)
    
    lErro = Comando_Executar(alComando(11), "SELECT BX.NumIntBaixa, BXPARC.NumIntDoc, BXPARC.ValorJuros, BXPARC.ValorMulta, BXPARC.ValorDesconto, BXPARC.ValorBaixado, BXPARC.ValorRecebido, " & _
        "TIT.NumTitulo, TIT.NumIntDoc, TIT.Valor, TIT.ValorIRRF, TIT.PISRetido, TIT.ISSRetido, TIT.COFINSRetido, TIT.CSLLRetido, TIT.ValorINSS, TIT.INSSRetido, CLI.RazaoSocial " & _
        "FROM Clientes CLI, titulosrectodos TIT, parcelasrectodas PARC, baixasrec BX, baixasparcrec BXPARC " & _
        "WHERE TIT.Cliente = CLI.Codigo AND TIT.NumIntDoc = PARC.NumIntTitulo AND BX.NumIntBaixa = BXPARC.numintbaixa AND PARC.numintdoc = BXPARC.numintparcela AND " & _
        "BXPARC.status<> 5 AND BX.status<>5 AND BX.NumMovCta = ? ORDER BY TIT.NumIntDoc, BX.NumIntBaixa, BXPARC.NumIntDoc", _
        lBX_NumIntBaixa, lBXPARC_NumIntDoc, dBXPARC_ValorJuros, dBXPARC_ValorMulta, dBXPARC_ValorDesconto, dBXPARC_ValorBaixado, dBXPARC_ValorRecebido, _
        lNumTitulo, lTIT_NumIntDoc, dTIT_Valor, dTIT_ValorIRRF, dTIT_PISRetido, dTIT_ISSRetido, dTIT_COFINSRetido, dTIT_CSLLRetido, dTIT_ValorINSS, iTIT_INSSRetido, sCliRazaoSocial, _
        lMOV_NumMovto)
    If lErro <> AD_SQL_SUCESSO Then gError 184271
    
    lErro = Comando_BuscarProximo(alComando(11))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 184272
    
    If lErro <> AD_SQL_SEM_DADOS Then
    
        lTIT_NumIntDocAnt = lTIT_NumIntDoc
        lNumTituloAnt = lNumTitulo
        dValorLiqTit = Arredonda_Moeda(dTIT_Valor - dTIT_ValorIRRF - dTIT_PISRetido - dTIT_ISSRetido - dTIT_COFINSRetido - dTIT_CSLLRetido - IIf(iTIT_INSSRetido = 0, 0, dTIT_ValorINSS))
        
        Do While lErro <> AD_SQL_SEM_DADOS
        
            'se trocou de titulo
            If lTIT_NumIntDocAnt <> lTIT_NumIntDoc Then
            
                sHistoricoAux = CStr(lNumTituloAnt)
                'inserir lctos contabeis do titulo anterior
                lErro = RelReciboContabil_Prepara2(lNumIntRel, lMOV_NumMovto, 16, lTIT_NumIntDocAnt, dFator, alComando, sFavorecido, sCliRazaoSocial, sHistorico, sHistoricoAux)
                If lErro <> SUCESSO Then gError 184274
                                    
                lTIT_NumIntDocAnt = lTIT_NumIntDoc
                lNumTituloAnt = lNumTitulo
                dValorLiqTit = Arredonda_Moeda(dTIT_Valor - dTIT_ValorIRRF - dTIT_PISRetido - dTIT_ISSRetido - dTIT_COFINSRetido - dTIT_CSLLRetido - IIf(iTIT_INSSRetido = 0, 0, dTIT_ValorINSS))
                
                'inicializar acumuladores
                dValorBaixado = 0
                dValorMulta = 0
                dValorJuros = 0
                dValorDesconto = 0
                dValorRecebido = 0
                                    
            End If
            
            'acumula valores
            dValorBaixado = dValorBaixado + dBXPARC_ValorBaixado
            dValorMulta = dValorMulta + dBXPARC_ValorMulta
            dValorJuros = dValorJuros + dBXPARC_ValorJuros
            dValorDesconto = dValorDesconto + dBXPARC_ValorDesconto
            dValorRecebido = dValorRecebido + dBXPARC_ValorRecebido
            dFator = dValorBaixado / dValorLiqTit
                        
            lErro = Comando_BuscarProximo(alComando(11))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 184275
        
        Loop
        
        'pesquisa e inclui lctos do ultimo titulo
        lErro = RelReciboContabil_Prepara2(lNumIntRel, lMOV_NumMovto, 16, lTIT_NumIntDocAnt, dFator, alComando, sFavorecido, sCliRazaoSocial, sHistorico, sHistoricoAux)
        If lErro <> SUCESSO Then gError 184276

        sHistoricoAux = CStr(lNumTituloAnt)
        'obtem lctos contabeis ligados a baixa
        lErro = CF("Lancamento_Le_GrupoTransExc", GRUPOTRANSEXC_BAIXAREC, lBX_NumIntBaixa, colLancamento_Detalhe)
        If lErro <> SUCESSO And lErro <> 41988 Then gError 184435
        If lErro <> SUCESSO Then
            lErro = CF("LanPendente_Le_GrupoTransExc", GRUPOTRANSEXC_BAIXAREC, lBX_NumIntBaixa, colLancamento_Detalhe)
            If lErro <> SUCESSO And lErro <> 41993 Then gError 184436
        End If
                
        iIndice = 20000
        
        For Each objLanc In colLancamento_Detalhe
        
            If sContaContabilConta <> objLanc.sConta And objLanc.iStatus = 0 Then
            
                iIndice = iIndice + 1
                
                lErro = Comando_Executar(alComando(27), "INSERT INTO RelReciboContabilLctos (NumIntRel, NumMovto, Transacao, NumIntDoc, Indice, FilialEmpresa, Origem, Exercicio, PeriodoLan, Doc, Seq, Conta, Valor, ValorRateado, Historico) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                    lNumIntRel, lMOV_NumMovto, objLanc.iTransacao, objLanc.lNumIntDoc, iIndice, objLanc.iFilialEmpresa, objLanc.sOrigem, objLanc.iExercicio, objLanc.iPeriodoLan, objLanc.lDoc, objLanc.iSeq, objLanc.sConta, objLanc.dValor, objLanc.dValor, objLanc.sHistorico)
                If lErro <> AD_SQL_SUCESSO Then gError 184437
        
            End If
        
        Next
    
    End If
    
    RelReciboContabil_Prepara4 = SUCESSO

    Exit Function

Erro_RelReciboContabil_Prepara4:

    RelReciboContabil_Prepara4 = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 184277)

    End Select

    Exit Function

End Function

Function NFiscal_Grava_NFiscal_Cust(ByVal objNFiscal As ClassNFiscal) As Long
    NFiscal_Grava_NFiscal_Cust = SUCESSO
End Function

Function NFiscal_Lock_Gravacao_Cust(ByVal objNFiscal As ClassNFiscal) As Long
    NFiscal_Lock_Gravacao_Cust = SUCESSO
End Function

Function RPS_Obtem_Discriminacao_Cust(ByVal objNF As ClassNFiscal, sDiscriminacao As String)
    RPS_Obtem_Discriminacao_Cust = SUCESSO
End Function

Public Function NFiscal_Paulista_Exporta(ByVal iFilialEmpresa As Integer, ByVal sDiretorio As String, ByVal dtDataEmiDe As Date, ByVal dtDataEmiAte As Date) As Long

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(1 To 4) As Long
Dim iTipoNFiscal As Integer
Dim objFilialEmpresa As New AdmFiliais
Dim dtDataEmiInicial As Date
Dim dtDataEmiFinal As Date
Dim sR10 As String
Dim sR20 As String
Dim sR30 As String
Dim sR40 As String
Dim sR50 As String
Dim sR90 As String
Dim sNatOp_DescrNF As String
Dim tCliente As typeCliente
Dim tFilialCliente As typeFilialCliente
Dim tEnd As typeEndereco
Dim tForn As typeFornecedor
Dim tFilialForn As typeFilialFornecedor
Dim tEnd1 As typeEndereco
Dim sEnd As String
Dim sNumero As String
Dim sBairro As String
Dim sCidade As String
Dim sCEP As String
Dim sUF As String
Dim sIE As String
Dim sSQL As String
Dim sSQL1 As String
Dim sSQL2 As String
Dim tINF As typeItemNF
Dim tNF As typeNFiscal
Dim sDescricao As String
Dim tTribItemNF As typeTribItemNF
Dim iOrigemMercadoria As Integer
Dim tTribNF As typeTributacaoNF
Dim tTransp As typeTransportadora
Dim tEndTR As typeEndereco
Dim sVolumeEspecie As String
Dim sVolumeMarca As String
Dim iR20 As Integer
Dim iR30 As Integer
Dim iR40 As Integer
Dim iR50 As Integer
Dim dValorTotal As Double
Dim sST As String
Dim sIEAux As String
Dim iPosicao As Integer
Dim sLetra As String
Dim sMotivoCancel As String
Dim sCNPJ As String
Dim sSerie As String
Dim dDescontoTotal As Double
Dim dValorProdutosTotal As Double

On Error GoTo Erro_NFiscal_Paulista_Exporta

    'Abertura comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 197520
    Next
    
    objFilialEmpresa.lCodEmpresa = glEmpresa
    objFilialEmpresa.iCodFilial = iFilialEmpresa
    
    lErro = CF("FilialEmpresa_Le", objFilialEmpresa)
    If lErro <> SUCESSO And lErro <> 27378 Then gError 197521
    
    Open sDiretorio For Output As #1
 
    lErro = Comando_Executar(alComando(1), "SELECT NF.DataEmissao FROM NFiscal NF, TiposDocInfo TD WHERE NF.DataEmissao >= ? AND NF.DataEmissao <= ? AND NF.FilialEmpresa = ? AND (TD.Tipo = 1 OR TD.Tipo = 2) AND NF.TipoNFiscal = TD.Codigo  ORDER BY NF.DataEmissao", dtDataEmiInicial, dtDataEmiDe, dtDataEmiAte, iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 197522
 
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 197523
 
    'nao há nota fiscal no periodo
    If lErro = AD_SQL_SEM_DADOS Then gError 197524
 
    lErro = Comando_Executar(alComando(2), "SELECT NF.DataEmissao FROM NFiscal NF, TiposDocInfo TD WHERE NF.DataEmissao >= ? AND NF.DataEmissao <= ? AND NF.FilialEmpresa = ? AND (TD.Tipo = 1 OR TD.Tipo = 2) AND NF.TipoNFiscal = TD.Codigo ORDER BY DataEmissao DESC", dtDataEmiFinal, dtDataEmiDe, dtDataEmiAte, iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 197525
 
    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 197526
 
    sR10 = "10|1,00|" & objFilialEmpresa.sCgc & "|" & Format(dtDataEmiInicial, "dd/mm/yyyy") & "|" & Format(dtDataEmiFinal, "dd/mm/yyyy")
 
    Print #1, sR10
 
    tNF.sMotivoCancel = String(STRING_NFISCAL_MOTIVOCANCEL, 0)
    sNatOp_DescrNF = String(STRING_NATUREZAOP_DESCRNF, 0)
    tNF.sSerie = String(STRING_SERIE, 0)
    tNF.sNaturezaOp = String(STRING_NATUREZAOP_CODIGO, 0)
    tFilialCliente.sCgc = String(STRING_CGC, 0)
    tFilialForn.sCgc = String(STRING_CGC, 0)
    tCliente.sRazaoSocial = String(STRING_CLIENTE_RAZAO_SOCIAL, 0)
    tForn.sRazaoSocial = String(STRING_CLIENTE_RAZAO_SOCIAL, 0)
    tEnd.sEndereco = String(STRING_ENDERECO, 0)
    tEnd.sBairro = String(STRING_BAIRRO, 0)
    tEnd.sCidade = String(STRING_CIDADE, 0)
    tEnd.sCEP = String(STRING_CEP, 0)
    tEnd.sSiglaEstado = String(STRING_ESTADO, 0)
    tFilialCliente.sInscricaoEstadual = String(STRING_INSCR_EST, 0)
    tFilialForn.sInscricaoEstadual = String(STRING_INSCR_EST, 0)
    tTransp.sCgc = String(STRING_CGC, 0)
    tTransp.sNome = String(STRING_TRANSPORTADORA_NOME, 0)
    tTransp.sInscricaoEstadual = String(STRING_INSCR_EST, 0)
    tEndTR.sEndereco = String(STRING_ENDERECO, 0)
    tEndTR.sCidade = String(STRING_CIDADE, 0)
    tEndTR.sSiglaEstado = String(STRING_ESTADO, 0)
    tNF.sPlaca = String(STRING_NFISCAL_PLACA, 0)
    tNF.sPlacaUF = String(STRING_NFISCAL_PLACA_UF, 0)
    sVolumeEspecie = String(50, 0)
    sVolumeMarca = String(50, 0)
    tNF.sVolumeNumero = String(STRING_NFISCAL_VOLUME_NUMERO, 0)
    tEnd1.sEndereco = String(STRING_ENDERECO, 0)
    tEnd1.sBairro = String(STRING_BAIRRO, 0)
    tEnd1.sCidade = String(STRING_CIDADE, 0)
    tEnd1.sCEP = String(STRING_CEP, 0)
    tEnd1.sSiglaEstado = String(STRING_ESTADO, 0)

    sSQL = "SELECT        NF.NumIntDoc, NF.Status, NF.MotivoCancel, NAT.DescrNF, NF.Serie, NF.NumNotaFiscal, NF.DataEmissao, NF.DataSaida, NF.DataEntrada, NF.HoraSaida, NF.HoraEntrada, " & _
                          "TD.Tipo, NF.NaturezaOP, FC.CGC, FR.CGC, C.RazaoSocial, R.RazaoSocial, E.Endereco, E.Bairro, E.Cidade, E.SiglaEstado, E.CEP, E.CodigoPais, " & _
                          "E1.Endereco, E1.Bairro, E1.Cidade, E1.SiglaEstado, E1.CEP, E1.CodigoPais, " & _
                          " FC.InscricaoEstadual, FR.InscricaoEstadual, TNF.ICMSBase, TNF.ICMSValor, TNF.ICMSSubstBase, TNF.ICMSSubstValor, NF.ValorProdutos, NF.ValorFrete, NF.ValorSeguro, " & _
                          " NF.ValorDesconto, TNF.IPIValor, NF.ValorOutrasDespesas, NF.ValorTotal, TNF.ISSAliquota, TNF.ISSValor, " & _
                          " NF.FreteRespons, TR.CGC, TR.Nome, TR.InscricaoEstadual, ETR.Endereco, ETR.Cidade, ETR.SiglaEstado, " & _
                          " NF.Placa, NF.PlacaUF, NF.VolumeQuant, CGV.Valor AS Especie, CGV1.Valor AS Marca, VolumeNumero, PesoLiq, PesoBruto " & _
           "FROM          NFiscal NF INNER JOIN " & _
                          "TiposDocInfo TD ON NF.TipoNFiscal = TD.Codigo INNER JOIN " & _
                          " NaturezaOP NAT ON NF.NaturezaOP = NAT.Codigo INNER JOIN " & _
                          " TributacaoNF TNF ON TNF.NumIntDoc = NF.NumIntDoc " & _
                          " LEFT OUTER JOIN " & _
                          "FiliaisClientes FC ON NF.Cliente = FC.CodCliente AND NF.FilialCli = FC.CodFilial LEFT OUTER JOIN " & _
                          "Clientes C ON NF.Cliente = C.Codigo LEFT OUTER JOIN " & _
                          "Enderecos E ON FC.Endereco = E.Codigo " & _
                          "LEFT OUTER JOIN Fornecedores R ON NF.Fornecedor = R.Codigo " & _
                          "LEFT OUTER JOIN FiliaisFornecedores FR ON NF.Fornecedor = FR.CodFornecedor AND NF.FilialForn = FR.CodFilial " & _
                          "LEFT OUTER JOIN Enderecos E1 ON FR.Endereco = E1.Codigo " & _
                          "LEFT OUTER JOIN Transportadoras TR ON TR.Codigo = NF.CodTransportadora " & _
                          "LEFT OUTER JOIN Enderecos ETR ON ETR.Codigo = TR.Endereco " & _
                          "LEFT OUTER JOIN CamposGenericosValores CGV ON CGV.CodCampo = 1 AND CGV.CodValor = NF.VolumeEspecie " & _
                          "LEFT OUTER JOIN CamposGenericosValores CGV1 ON CGV1.CodCampo = 2 AND CGV1.CodValor = NF.VolumeMarca " & _
           "WHERE          NF.DataEmissao >= ? AND NF.DataEmissao <= ? AND NF.FilialEmpresa = ? AND (TD.Tipo = 1 OR TD.Tipo = 2) ORDER BY NF.NumNotaFiscal"
    
    lErro = Comando_Executar(alComando(3), sSQL, tNF.lNumIntDoc, tNF.iStatus, tNF.sMotivoCancel, sNatOp_DescrNF, _
    tNF.sSerie, tNF.lNumNotaFiscal, tNF.dtDataEmissao, tNF.dtDataSaida, tNF.dtDataEntrada, _
    tNF.dHoraSaida, tNF.dHoraEntrada, iTipoNFiscal, tNF.sNaturezaOp, tFilialCliente.sCgc, _
    tFilialForn.sCgc, tCliente.sRazaoSocial, tForn.sRazaoSocial, tEnd.sEndereco, tEnd.sBairro, _
    tEnd.sCidade, tEnd.sSiglaEstado, tEnd.sCEP, tEnd.iCodigoPais, tEnd1.sEndereco, tEnd1.sBairro, _
    tEnd1.sCidade, tEnd1.sSiglaEstado, tEnd1.sCEP, tEnd1.iCodigoPais, _
    tFilialCliente.sInscricaoEstadual, tFilialForn.sInscricaoEstadual, _
    tTribNF.dICMSBase, tTribNF.dICMSValor, tTribNF.dICMSSubstBase, tTribNF.dICMSSubstValor, _
    tNF.dValorProdutos, tNF.dValorFrete, tNF.dValorSeguro, tNF.dValorDesconto, _
    tTribNF.dIPIValor, tNF.dValorOutrasDespesas, tNF.dValorTotal, tTribNF.dISSAliquota, tTribNF.dISSValor, _
    tNF.iFreteRespons, tTransp.sCgc, tTransp.sNome, tTransp.sInscricaoEstadual, _
    tEndTR.sEndereco, tEndTR.sCidade, tEndTR.sSiglaEstado, tNF.sPlaca, tNF.sPlacaUF, _
    tNF.dVolumeTotal, sVolumeEspecie, sVolumeMarca, tNF.sVolumeNumero, tNF.dPesoLiq, tNF.dPesoBruto, _
    dtDataEmiDe, dtDataEmiAte, iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 197527
            
            

    lErro = Comando_BuscarPrimeiro(alComando(3))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 197528
    
    Do While lErro = AD_SQL_SUCESSO
        
        If Len(tCliente.sRazaoSocial) > 0 Then
            If Len(tEnd.sEndereco) > 60 Then
                sEnd = left(tEnd.sEndereco, 60)
                sNumero = Mid(tEnd.sEndereco, 61)
            Else
                sEnd = tEnd.sEndereco
                sNumero = " "
            End If
            If tEnd.iCodigoPais = 1 Then
                sCidade = tEnd.sCidade
                sUF = tEnd.sSiglaEstado
                sCNPJ = tFilialCliente.sCgc
                sCEP = tEnd.sCEP
            Else
                sCidade = "EXTERIOR"
                sUF = "EX"
                sCNPJ = ""
                sCEP = ""
            End If
            sBairro = tEnd.sBairro
            sIE = tFilialCliente.sInscricaoEstadual
        Else
            If Len(tEnd1.sEndereco) > 60 Then
                sEnd = left(tEnd1.sEndereco, 60)
                sNumero = Mid(tEnd1.sEndereco, 61)
            Else
                sEnd = tEnd1.sEndereco
                sNumero = " "
            End If
            If tEnd1.iCodigoPais = 1 Then
                sCidade = tEnd1.sCidade
                sUF = tEnd1.sSiglaEstado
                sCNPJ = tFilialForn.sCgc
                sCEP = tEnd1.sCEP
            Else
                sCidade = "EXTERIOR"
                sUF = "EX"
                sCNPJ = ""
                sCEP = ""
            End If
            sBairro = tEnd1.sBairro
            sIE = tFilialForn.sInscricaoEstadual
        End If
    
        iPosicao = 1
        sIEAux = ""
    
        Do While iPosicao <= Len(sIE)
    
            sLetra = Mid(sIE, iPosicao, 1)
            
            If sLetra <> "." And sLetra <> "," And sLetra <> "-" And sLetra <> "/" And sLetra <> "\" Then
                sIEAux = sIEAux & sLetra
            End If
            
            iPosicao = iPosicao + 1
    
        Loop
    
        If tNF.iStatus = 7 Then
            If (Len(tNF.sMotivoCancel) < 15) Then
                sMotivoCancel = tNF.sMotivoCancel & Space(15 - Len(tNF.sMotivoCancel))
            Else
                sMotivoCancel = tNF.sMotivoCancel
            End If
        Else
            sMotivoCancel = ""
        End If
        
'        If sCNPJ = objFilialEmpresa.sCgc Then sCNPJ = ""
        
        If tNF.iStatus <> STATUS_CANCELADO Then
        
            sSerie = Desconverte_Serie_Eletronica(tNF.sSerie)
        
            sR20 = "20|" & IIf(tNF.iStatus = STATUS_CANCELADO, "C|", "I|") & sMotivoCancel & "|" & _
            sNatOp_DescrNF & "|" & sSerie & "|" & CStr(tNF.lNumNotaFiscal) & "|" & Format(tNF.dtDataEmissao, "dd/mm/yyyy") & " " & IIf(iTipoNFiscal = 1, Format(CDate(tNF.dHoraEntrada), "hh:mm:ss"), Format(CDate(tNF.dHoraSaida), "hh:mm:ss")) & "|" & _
            IIf(iTipoNFiscal = 1, Format(tNF.dtDataEntrada, "dd/mm/yyyy") & " " & Format(CDate(tNF.dHoraEntrada), "hh:mm:ss"), Format(tNF.dtDataSaida, "dd/mm/yyyy") & " " & Format(CDate(tNF.dHoraSaida), "hh:mm:ss")) & "|" & _
            CStr(iTipoNFiscal - 1) & "|" & tNF.sNaturezaOp & "|" & "|" & "|" & sCNPJ & "|" & _
            IIf(Len(tCliente.sRazaoSocial) > 0, tCliente.sRazaoSocial, tForn.sRazaoSocial) & "|" & sEnd & "|" & sNumero & "|" & "|" & sBairro & "|" & _
            sCidade & "|" & sUF & "|" & sCEP & "|" & "|" & "|" & sIEAux
            
            Print #1, sR20
            
            iR20 = iR20 + 1
        
        End If
        
        If tNF.iStatus <> STATUS_CANCELADO Then
        
        
            tINF.sProduto = String(STRING_PRODUTO, 0)
            tINF.sDescricaoItem = String(STRING_PRODUTO_DESCRICAO, 0)
            tINF.sUnidadeMed = String(STRING_PRODUTO_SIGLAUMESTOQUE, 0)
            
            
            sSQL1 = "SELECT INF.ValorDesconto, INF.Produto, P.Descricao, INF.UnidadeMed, INF.Quantidade, INF.PrecoUnitario, P.OrigemMercadoria, T.ICMSTipo,  " & _
                    " T.ICMSAliquota, T.IPIAliquota, T.IPIValor " & _
                    " FROM ItensNFiscal INF, Produtos P, TributacaoItemNF T" & _
                    " WHERE INF.NumIntNF = ? AND INF.Produto = P.Codigo AND INF.NumIntNF = T.NumIntNF AND INF.Item = T.Item  ORDER BY INF.Item "
            
            lErro = Comando_Executar(alComando(4), sSQL1, tINF.dValorDesconto, tINF.sProduto, tINF.sDescricaoItem, tINF.sUnidadeMed, tINF.dQuantidade, tINF.dPrecoUnitario, iOrigemMercadoria, _
                    tTribItemNF.iICMSTipo, tTribItemNF.dICMSAliquota, tTribItemNF.dIPIAliquota, tTribItemNF.dIPIValor, tNF.lNumIntDoc)
            If lErro <> AD_SQL_SUCESSO Then gError 197529
                
            lErro = Comando_BuscarPrimeiro(alComando(4))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 197530
        
            dDescontoTotal = 0
            dValorProdutosTotal = 0
        
            Do While lErro = AD_SQL_SUCESSO
        
                dValorTotal = (tINF.dQuantidade * tINF.dPrecoUnitario)
                dValorProdutosTotal = dValorProdutosTotal + dValorTotal
                dDescontoTotal = dDescontoTotal + tINF.dValorDesconto
                sST = CStr(iOrigemMercadoria)
                
                Select Case tTribItemNF.iICMSTipo
                
                    Case 0 'nao tributada
                        sST = sST & "41"
                        
                    Case 1 'integral
                        sST = sST & "00"
                        
                    Case 2 'isenta
                        sST = sST & "40"
                        
                    Case 3 'suspensao
                        sST = sST & "50"
                        
                    Case 4 'com reducao da base e cobrancao por subst.
                        sST = sST & "70"
                        
                    Case 5 'diferimento
                        sST = sST & "51"
                        
                    Case 6 'tributado com substituicao
                        sST = sST & "10"
                                
                    Case 7 'com reducao da base
                        sST = sST & "20"
                        
                    Case 8 'cobrado anteriormente por subst.
                        sST = sST & "60"
                                            
                    Case 9, 10 'isento ou nao tributada com cobranca por subst.
                        sST = sST & "30"
                
                    Case Else
                        sST = sST & "90"
                        
                
                End Select
        
                sR30 = "30|" & tINF.sProduto & "|" & tINF.sDescricaoItem & "|" & "|" & _
                tINF.sUnidadeMed & "|" & Format(tINF.dQuantidade, "0000000.0000") & "|" & Format(tINF.dPrecoUnitario, "00000000000.0000") & "|" & _
                Format(dValorTotal, "000000000000.00") & "|" & sST & "|" & Format(tTribItemNF.dICMSAliquota * 100, "00.00") & "|" & _
                Format(tTribItemNF.dIPIAliquota * 100, "00.00") & "|" & Format(tTribItemNF.dIPIValor, "000000000000.00")
                
                Print #1, sR30
                
                iR30 = iR30 + 1
        
                lErro = Comando_BuscarProximo(alComando(4))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 197531
        
            Loop
    
            'se for nota de entrada importacao
            If tNF.iTipoNFiscal = 119 Then
                tNF.dValorOutrasDespesas = tNF.dValorOutrasDespesas + tTribNF.dICMSValor
            End If
    
            sR40 = "40|" & Format(tTribNF.dICMSBase, "000000000000.00") & "|" & Format(tTribNF.dICMSValor, "000000000000.00") & "|" & _
            Format(tTribNF.dICMSSubstBase, "000000000000.00") & "|" & Format(tTribNF.dICMSSubstValor, "000000000000.00") & "|" & Format(dValorProdutosTotal, "000000000000.00") & "|" & _
            Format(tNF.dValorFrete, "000000000000.00") & "|" & Format(tNF.dValorSeguro, "000000000000.00") & "|" & Format(dDescontoTotal + tNF.dValorDesconto, "000000000000.00") & "|" & _
            Format(tTribNF.dIPIValor, "000000000000.00") & "|" & Format(tNF.dValorOutrasDespesas, "000000000000.00") & "|" & Format(tNF.dValorTotal, "000000000000.00") & "|" & "|" & _
            Format(tTribNF.dISSAliquota * 100, "00.00") & "|" & Format(tTribNF.dISSValor, "000000000000.00")
        
            Print #1, sR40
            
            iR40 = iR40 + 1
    
            sIE = tTransp.sInscricaoEstadual
    
            iPosicao = 1
            sIEAux = ""
        
            Do While iPosicao <= Len(sIE)
        
                sLetra = Mid(sIE, iPosicao, 1)
                
                If sLetra <> "." And sLetra <> "," And sLetra <> "-" And sLetra <> "/" And sLetra <> "\" Then
                    sIEAux = sIEAux & sLetra
                End If
                
                iPosicao = iPosicao + 1
        
            Loop
    
    
            sR50 = "50|" & CStr(tNF.iFreteRespons - 1) & "|" & tTransp.sCgc & "|" & _
            tTransp.sNome & "|" & sIEAux & "|" & left(tEndTR.sEndereco, 60) & "|" & _
            tEndTR.sCidade & "|" & tEndTR.sSiglaEstado & "|" & tNF.sPlaca & "|" & _
            tNF.sPlacaUF & "|" & IIf(tNF.dVolumeTotal <> 0, Format(tNF.dVolumeTotal, "000000000000000"), "") & "|" & sVolumeEspecie & "|" & _
            sVolumeMarca & "|" & tNF.sVolumeNumero & "|" & Format(tNF.dPesoLiq, "00000000000.000") & "|" & Format(tNF.dPesoBruto, "00000000000.000")
        
            Print #1, sR50
            
            iR50 = iR50 + 1
    
        End If
    
        lErro = Comando_BuscarProximo(alComando(3))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 197532
    
    Loop
    
    sR90 = "90|" & Format(iR20, "00000") & "|" & Format(iR30, "00000") & "|" & _
    Format(iR40, "00000") & "|" & Format(iR50, "00000") & "|" & "00000"

    Print #1, sR90

    Close #1
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    NFiscal_Paulista_Exporta = SUCESSO
    
    Exit Function

Erro_NFiscal_Paulista_Exporta:

    NFiscal_Paulista_Exporta = gErr

    Select Case gErr
    
        Case 75
            Call Rotina_Erro(vbOKOnly, "ERRO_SEM_ACESSO_DIRETORIO", gErr)
        
        Case 76
            Call Rotina_Erro(vbOKOnly, "ERRO_DIRETORIO_INVALIDO", gErr, sDiretorio)

        Case 197520
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 197521
        
        Case 197522, 197523, 197525, 197526, 197527, 197528, 197532
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", gErr)
        
        Case 197524
            Call Rotina_Erro(vbOKOnly, "ERRO_SEM_NFISCAL_PERIODO", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 197533)

    End Select
    
    Close #1

   'Fechamento comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function
    
End Function


Function MovEstoque_ItemNF_Customizado(objItemNF As ClassItemNF, objNFiscal As ClassNFiscal) As Long
    MovEstoque_ItemNF_Customizado = SUCESSO
End Function

Function RelFlCxCtb_Prepara(ByVal iFilialEmpresa As Integer, ByVal dtDataDe As Date, ByVal dtDataAte As Date, Optional lNumIntRel As Long = 1) As Long

Dim lErro As Long, lTransacao As Long, dFator As Double, dValorLctoAux As Double
Dim lMOV_NumMovto As Long, iMOV_Tipo As Integer, dMOV_Valor As Double, lMOV_NumRefInterna As Long
Dim lMOV_Sequencial As Long
Dim dSaldoNaoApropriado As Double
Dim objRelFlCxCtb As ClassRelFlCxCtb
Dim dtMOV_Data As Date
Dim iMOV_TipoMeioPagto As Integer
Dim lMOV_Numero As Long
Dim iMOV_ContaCorrente As Long
Dim iMOV_Favorecido As Integer
Dim objFavorecidos As ClassFavorecidos
Dim sMOV_Historico As String
Dim lFornecedor As Long
Dim objFornecedor As ClassFornecedor
Dim lCliente As Long
Dim objCliente As ClassCliente
Dim lNumIntDoc As Long
Dim dRotativo As Double
Dim dSaldoInicial As Double
Dim dSaldo As Double
Dim dSaldoRotativo As Double
Dim sNomeReduzido As String
Dim objFluxo As New ClassFluxo
Dim tFluxoAnalitico As typeFluxoAnalitico
Dim objContaCorrenteInt As New ClassContasCorrentesInternas
Dim lOrdem As Long, lSeq As Long
Dim dCredAux As Double, dDebAux  As Double

'Dim iLCTO_FilialEmpresa As Integer, sLCTO_Origem As String, iLCTO_Exercicio As Integer, iLCTO_PeriodoLan As Integer, lLCTO_Doc As Long, iLCTO_Seq As Integer, iLCTO_Lote As Integer, dtLCTO_Data As Date, sLCTO_Conta As String, sLCTO_Historico As String, dLCTO_Valor As Double
'Dim lBX_NumIntBaixa As Long, dtBX_Data As Date, dtBX_DataContabil As Date, dtBX_DataRegistro As Date
'Dim lBXPARC_NumIntDoc As Long, dBXPARC_ValorJuros As Double, dBXPARC_ValorMulta As Double, dBXPARC_ValorDesconto As Double, dBXPARC_ValorBaixado As Double, dBXPARC_ValorDiferenca As Double
'Dim iPARC_NumParcela As Integer, dtPARC_DataVencimento As Date, dPARC_Valor As Double, lTIT_NumIntDoc As Long, iTIT_FilialEmpresa As Integer, lTIT_Fornecedor As Long, sTIT_SiglaDocumento As String, lTIT_NumTitulo As Long, dtTIT_DataEmissao As Date
'Dim dTIT_ValorTotal  As Double, dTIT_ValorSeguro As Double, dTIT_ValorFrete As Double, dTIT_OutrasDespesas As Double, dTIT_ValorIRRF As Double, dTIT_PISRetido As Double, dTIT_ISSRetido As Double, dTIT_COFINSRetido As Double, dTIT_CSLLRetido As Double, dTIT_ValorINSS As Double, iTIT_INSSRetido As Integer, sTIT_Observacao As String, sFORN_RazaoSocial As String, sFORN_NomeReduzido As String

Dim iIndice As Integer, alComando(0 To 32) As Long, alComando1(1 To 4) As Long

On Error GoTo Erro_RelFlCxCtb_Prepara

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 197772

    'Executa a abertura dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 197773
    Next
    
    lErro = Comando_Executar(alComando(13), "DELETE FROM RelFlCxCtb WHERE NumIntRel = ?", lNumIntRel)
    If lErro <> AD_SQL_SUCESSO Then gError 197774

    'obtem saldos inicial total
    For iIndice = 1 To 4
        alComando1(iIndice) = alComando(iIndice + 16)
    Next
    lErro = CF("CCI_ObterRelTes_Total", dtDataDe, dSaldoInicial, alComando1)
    If lErro <> SUCESSO Then gError 197775
    
    lErro = CF("CCI_Rotativo_Total", dRotativo)
    If lErro <> SUCESSO Then gError 197819
    
    dSaldo = dSaldoInicial
    dSaldoRotativo = dSaldoInicial + dRotativo
    
    sMOV_Historico = String(STRING_HISTORICOMOVCONTA, 0)
    
    'obter os movimentos de conta corrente no período
    lErro = Comando_Executar(alComando(1), "SELECT CodConta, NumMovto, Tipo, Valor, NumRefInterna, DataMovimento, TipoMeioPagto, Numero, Favorecido, Historico, Sequencial FROM MovimentosContaCorrente WHERE Valor <> 0 AND EXCLUIDO = 0 AND DataMovimento BETWEEN ? AND ? ORDER BY DataMovimento, NumMovto", iMOV_ContaCorrente, lMOV_NumMovto, iMOV_Tipo, dMOV_Valor, lMOV_NumRefInterna, dtMOV_Data, iMOV_TipoMeioPagto, lMOV_Numero, iMOV_Favorecido, sMOV_Historico, lMOV_Sequencial, dtDataDe, dtDataAte)
    If lErro <> AD_SQL_SUCESSO Then gError 197776

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 197777

    If lErro = AD_SQL_SUCESSO Then
        
        lErro = Comando_Executar(alComando(6), "INSERT INTO RelFlCxCtb (NumIntRel, Data, Descricao, Saldo, Rotativo,Seq) VALUES (?,?,?,?,?,?)", _
            lNumIntRel, dtDataDe, "Saldo Inicial", dSaldo, dSaldoRotativo, 1)
        If lErro <> AD_SQL_SUCESSO Then gError 197874
        
    End If
    
    lSeq = 1

    Do While lErro <> AD_SQL_SEM_DADOS

        Set objRelFlCxCtb = New ClassRelFlCxCtb

        objRelFlCxCtb.lNumIntRel = lNumIntRel
        objRelFlCxCtb.lNumMovto = lMOV_NumMovto
        objRelFlCxCtb.dtData = dtMOV_Data
        objRelFlCxCtb.sHistorico = sMOV_Historico

        lErro = CF("ContaCorrenteInt_Le", iMOV_ContaCorrente, objContaCorrenteInt)
        If lErro <> SUCESSO And lErro <> 11807 Then gError 197857

        If lErro = SUCESSO Then
            objRelFlCxCtb.sSiglaBanco = objContaCorrenteInt.sNomeReduzido
        End If

        Select Case iMOV_Tipo

            Case MOVCCI_SAQUE, MOVCCI_APLICACAO
                
                objRelFlCxCtb.lNumIntDoc = lMOV_NumMovto
                objRelFlCxCtb.sDoc = lMOV_Sequencial
                
                objRelFlCxCtb.dDebito = dMOV_Valor
                
                'incluir lancamentos contabeis do movimento
                lErro = RelFlxCtb_Prepara3(lNumIntRel, lMOV_NumMovto, 8, 1, alComando, lMOV_NumMovto, objRelFlCxCtb)
                If lErro <> SUCESSO Then gError 197778
                
                objRelFlCxCtb.sTipo = "SAQ"
                
                Select Case iMOV_TipoMeioPagto
                
                    Case DINHEIRO
                    
                        objRelFlCxCtb.sTipoMeioPagto = "DIN"
                        
                    Case Cheque
                
                        objRelFlCxCtb.sTipoMeioPagto = "CHQ"
                        objRelFlCxCtb.lNumCheque = lMOV_Numero
                
                    Case BORDERO
                    
                        objRelFlCxCtb.sTipoMeioPagto = "BRD"
                    
                End Select
                
                Set objFavorecidos = New ClassFavorecidos
                    
                If iMOV_Favorecido <> 0 Then
                
                    objFavorecidos.iCodigo = iMOV_Favorecido
            
                    'Verifica se o favorecido existe
                    lErro = CF("Favorecido_Le", objFavorecidos)
                    If lErro <> SUCESSO And lErro <> 11807 Then gError 197779
                
                End If
                
                dSaldo = dSaldo - objRelFlCxCtb.dDebito
                dSaldoRotativo = dSaldoRotativo - objRelFlCxCtb.dDebito
                lSeq = lSeq + 1
                
                'incluir registro correspondente a baixaparc
                lErro = Comando_Executar(alComando(12), "INSERT INTO RelFlCxCtb (NumIntDoc, NumIntRel, SiglaBanco, Data, Descricao, DescConta, COAno, COMes, NumCheque, Doc, NumMovto, Tipo, TipoMeioPagto, Saldo, Rotativo, Debito, Historico, DescContaPai, Seq) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                    objRelFlCxCtb.lNumIntDoc, objRelFlCxCtb.lNumIntRel, objRelFlCxCtb.sSiglaBanco, objRelFlCxCtb.dtData, objFavorecidos.sNome, objRelFlCxCtb.sDescConta, objRelFlCxCtb.iCOAno, objRelFlCxCtb.iCOMes, objRelFlCxCtb.lNumCheque, objRelFlCxCtb.sDoc, objRelFlCxCtb.lNumMovto, objRelFlCxCtb.sTipo, objRelFlCxCtb.sTipoMeioPagto, dSaldo, dSaldoRotativo, objRelFlCxCtb.dDebito, objRelFlCxCtb.sHistorico, objRelFlCxCtb.sDescContaPai, lSeq)
                If lErro <> AD_SQL_SUCESSO Then gError 197780
            
            Case MOVCCI_DEPOSITO, MOVCCI_RESGATE

                objRelFlCxCtb.lNumIntDoc = lMOV_NumMovto
                objRelFlCxCtb.sDoc = lMOV_Sequencial

                objRelFlCxCtb.dCredito = dMOV_Valor

                'incluir lancamentos contabeis do movimento
                lErro = RelFlxCtb_Prepara3(lNumIntRel, lMOV_NumMovto, 7, 1, alComando, lMOV_NumMovto, objRelFlCxCtb)
                If lErro <> SUCESSO Then gError 197781

                objRelFlCxCtb.sTipo = "DEP"

                Select Case iMOV_TipoMeioPagto
                
                    Case DINHEIRO
                    
                        objRelFlCxCtb.sTipoMeioPagto = "DIN"
                        
                    Case Cheque
                
                        objRelFlCxCtb.sTipoMeioPagto = "CHQ"
                
                    Case BORDERO
                    
                        objRelFlCxCtb.sTipoMeioPagto = "BRD"
                    
                End Select

                dSaldo = dSaldo + objRelFlCxCtb.dCredito
                dSaldoRotativo = dSaldoRotativo + objRelFlCxCtb.dCredito
                lSeq = lSeq + 1

                'incluir registro correspondente a baixaparc
                lErro = Comando_Executar(alComando(12), "INSERT INTO RelFlCxCtb (NumIntDoc, NumIntRel, SiglaBanco, Data, Descricao, DescConta, COAno, COMes, NumCheque, Doc, NumMovto, Tipo, TipoMeioPagto, Saldo, Rotativo, Credito, Historico, DescContaPai, Seq) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                    objRelFlCxCtb.lNumIntDoc, objRelFlCxCtb.lNumIntRel, objRelFlCxCtb.sSiglaBanco, objRelFlCxCtb.dtData, left(sMOV_Historico, 50), objRelFlCxCtb.sDescConta, objRelFlCxCtb.iCOAno, objRelFlCxCtb.iCOMes, objRelFlCxCtb.lNumCheque, objRelFlCxCtb.sDoc, objRelFlCxCtb.lNumMovto, objRelFlCxCtb.sTipo, objRelFlCxCtb.sTipoMeioPagto, dSaldo, dSaldoRotativo, objRelFlCxCtb.dCredito, objRelFlCxCtb.sHistorico, objRelFlCxCtb.sDescContaPai, lSeq)
                If lErro <> AD_SQL_SUCESSO Then gError 197782


            Case MOVCCI_SAIDA_TRANSFERENCIA
                
                objRelFlCxCtb.lNumIntDoc = lMOV_NumMovto
                objRelFlCxCtb.sDoc = lMOV_Sequencial

                
                objRelFlCxCtb.dDebito = dMOV_Valor
        
                'incluir lancamentos contabeis do movimento
                lErro = RelFlxCtb_Prepara3(lNumIntRel, lMOV_NumMovto, 30, 1, alComando, lMOV_NumMovto, objRelFlCxCtb)
                If lErro <> SUCESSO Then gError 197783

                objRelFlCxCtb.sTipo = "TRF"

                Select Case iMOV_TipoMeioPagto
                
                    Case DINHEIRO
                    
                        objRelFlCxCtb.sTipoMeioPagto = "DIN"
                        
                    Case Cheque
                
                        objRelFlCxCtb.sTipoMeioPagto = "CHQ"
                        objRelFlCxCtb.lNumCheque = lMOV_Numero
                
                    Case BORDERO
                    
                        objRelFlCxCtb.sTipoMeioPagto = "BRD"
                    
                End Select

                Set objFavorecidos = New ClassFavorecidos
                    
                If iMOV_Favorecido <> 0 Then
                
                    objFavorecidos.iCodigo = iMOV_Favorecido
            
                    'Verifica se o favorecido existe
                    lErro = CF("Favorecido_Le", objFavorecidos)
                    If lErro <> SUCESSO And lErro <> 11807 Then gError 197784
                
                End If
                
                dSaldo = dSaldo - objRelFlCxCtb.dDebito
                dSaldoRotativo = dSaldoRotativo - objRelFlCxCtb.dDebito
                lSeq = lSeq + 1
                
                'incluir registro correspondente a baixaparc
                lErro = Comando_Executar(alComando(12), "INSERT INTO RelFlCxCtb (NumIntDoc, NumIntRel, SiglaBanco, Data, Descricao, DescConta, COAno, COMes, NumCheque, Doc, Debito, NumMovto, Tipo, TipoMeioPagto, Saldo, Rotativo, Historico, DescContaPai, Seq) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                    objRelFlCxCtb.lNumIntDoc, objRelFlCxCtb.lNumIntRel, objRelFlCxCtb.sSiglaBanco, objRelFlCxCtb.dtData, objFavorecidos.sNome, objRelFlCxCtb.sDescConta, objRelFlCxCtb.iCOAno, objRelFlCxCtb.iCOMes, objRelFlCxCtb.lNumCheque, objRelFlCxCtb.sDoc, objRelFlCxCtb.dDebito, objRelFlCxCtb.lNumMovto, objRelFlCxCtb.sTipo, objRelFlCxCtb.sTipoMeioPagto, dSaldo, dSaldoRotativo, objRelFlCxCtb.sHistorico, objRelFlCxCtb.sDescContaPai, lSeq)
                If lErro <> AD_SQL_SUCESSO Then gError 197785

            Case MOVCCI_ENTRADA_TRANSFERENCIA
                
                objRelFlCxCtb.lNumIntDoc = lMOV_NumMovto
                objRelFlCxCtb.sDoc = lMOV_Sequencial
                
                objRelFlCxCtb.dCredito = dMOV_Valor
                
                'incluir lancamentos contabeis do movimento
                lErro = RelFlxCtb_Prepara3(lNumIntRel, lMOV_NumMovto, 30, 1, alComando, lMOV_NumMovto - 1, objRelFlCxCtb)
                If lErro <> SUCESSO Then gError 197786

                objRelFlCxCtb.sTipo = "TRF"
                
                Select Case iMOV_TipoMeioPagto
                
                    Case DINHEIRO
                    
                        objRelFlCxCtb.sTipoMeioPagto = "DIN"
                        
                    Case Cheque
                
                        objRelFlCxCtb.sTipoMeioPagto = "CHQ"
                        objRelFlCxCtb.lNumCheque = lMOV_Numero
                
                    Case BORDERO
                    
                        objRelFlCxCtb.sTipoMeioPagto = "BRD"
                    
                End Select

                Set objFavorecidos = New ClassFavorecidos
                    
                If iMOV_Favorecido <> 0 Then
                
                    objFavorecidos.iCodigo = iMOV_Favorecido
            
                    'Verifica se o favorecido existe
                    lErro = CF("Favorecido_Le", objFavorecidos)
                    If lErro <> SUCESSO And lErro <> 11807 Then gError 197787
                
                End If
                
                dSaldo = dSaldo + objRelFlCxCtb.dCredito
                dSaldoRotativo = dSaldoRotativo + objRelFlCxCtb.dCredito
                lSeq = lSeq + 1
                
                'incluir registro correspondente a baixaparc
                lErro = Comando_Executar(alComando(12), "INSERT INTO RelFlCxCtb (NumIntDoc, NumIntRel, SiglaBanco, Data, Descricao, DescConta, COAno, COMes, NumCheque, Doc, Credito, NumMovto, Tipo, TipoMeioPagto, Saldo, Rotativo, Historico, DescContaPai, Seq) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                    objRelFlCxCtb.lNumIntDoc, objRelFlCxCtb.lNumIntRel, objRelFlCxCtb.sSiglaBanco, objRelFlCxCtb.dtData, objFavorecidos.sNome, objRelFlCxCtb.sDescConta, objRelFlCxCtb.iCOAno, objRelFlCxCtb.iCOMes, objRelFlCxCtb.lNumCheque, objRelFlCxCtb.sDoc, objRelFlCxCtb.dCredito, objRelFlCxCtb.lNumMovto, objRelFlCxCtb.sTipo, objRelFlCxCtb.sTipoMeioPagto, dSaldo, dSaldoRotativo, objRelFlCxCtb.sHistorico, objRelFlCxCtb.sDescContaPai, lSeq)
                If lErro <> AD_SQL_SUCESSO Then gError 197788

            Case MOVCCI_PAGTO_ANTECIPADO
                
                objRelFlCxCtb.sTipo = "ANP"
                
                objRelFlCxCtb.dDebito = dMOV_Valor
                
                Select Case iMOV_TipoMeioPagto
                
                    Case DINHEIRO
                    
                        objRelFlCxCtb.sTipoMeioPagto = "DIN"
                        
                    Case Cheque
                
                        objRelFlCxCtb.sTipoMeioPagto = "CHQ"
                        objRelFlCxCtb.lNumCheque = lMOV_Numero
                
                    Case BORDERO
                    
                        objRelFlCxCtb.sTipoMeioPagto = "BRD"
                    
                End Select
                
'                'para a parte associada a baixas, pegar info dos titulos, parcelas, baixa, baixasparc
'                lErro = RelFlxCtb_Prepara1(lNumIntRel, lMOV_NumMovto, alComando, objRelFlCxCtb, dSaldo, dSaldoRotativo)
'                If lErro <> SUCESSO Then gError 197789
                
                sNomeReduzido = String(STRING_FORNECEDOR_NOME_REDUZIDO, 0)
                
                'tratar a parte nao associada à baixas
                lErro = Comando_Executar(alComando(3), "SELECT NumIntPag, SaldoNaoApropriado, NomeReduzido FROM PagtosAntecipados, Fornecedores WHERE NumMovto = ? AND Fornecedores.Codigo = PagtosAntecipados.Fornecedor", _
                    lNumIntDoc, dSaldoNaoApropriado, sNomeReduzido, lMOV_NumMovto)
                If lErro <> AD_SQL_SUCESSO Then gError 197790
                
                lErro = Comando_BuscarProximo(alComando(3))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 197791

                If lErro = AD_SQL_SUCESSO Then
                
                    'obter o fator para aplicar sobre os lctos
                    dFator = dSaldoNaoApropriado / dMOV_Valor
                        
                    'incluir lancamentos contabeis do movimento
                    lErro = RelFlxCtb_Prepara3(lNumIntRel, lMOV_NumMovto, 10, dFator, alComando, lMOV_NumMovto, objRelFlCxCtb)
                    If lErro <> SUCESSO Then gError 197792
                
                    dSaldo = dSaldo - objRelFlCxCtb.dDebito
                    dSaldoRotativo = dSaldoRotativo - objRelFlCxCtb.dDebito
                    lSeq = lSeq + 1
                    
                    objRelFlCxCtb.sSiglaDoc = ""
                    objRelFlCxCtb.sDoc = ""
                    
                    'incluir registro correspondente a baixaparc
                    lErro = Comando_Executar(alComando(12), "INSERT INTO RelFlCxCtb (NumIntDoc, NumIntRel, SiglaBanco, Data, Descricao, DescConta, COAno, COMes, NumCheque, Doc, Debito, NumMovto, Tipo, TipoMeioPagto, Saldo, Rotativo, Historico, DescContaPai, Seq) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                        lNumIntDoc, objRelFlCxCtb.lNumIntRel, objRelFlCxCtb.sSiglaBanco, objRelFlCxCtb.dtData, left(sNomeReduzido, 50), objRelFlCxCtb.sDescConta, objRelFlCxCtb.iCOAno, objRelFlCxCtb.iCOMes, objRelFlCxCtb.lNumCheque, objRelFlCxCtb.sDoc, objRelFlCxCtb.dDebito, objRelFlCxCtb.lNumMovto, objRelFlCxCtb.sTipo, objRelFlCxCtb.sTipoMeioPagto, dSaldo, dSaldoRotativo, objRelFlCxCtb.sHistorico, objRelFlCxCtb.sDescContaPai, lSeq)
                    If lErro <> AD_SQL_SUCESSO Then gError 197793
                
                End If
                

            Case MOVCCI_RECEB_ANTECIPADO
                
                objRelFlCxCtb.sTipo = "ANR"
                
                objRelFlCxCtb.dCredito = dMOV_Valor
                
'                'para a parte associada a baixas, pegar info dos titulos, parcelas, baixa, baixasparc
'                lErro = RelFlxCtb_Prepara4(lNumIntRel, lMOV_NumMovto, alComando, objRelFlCxCtb, dSaldo, dSaldoRotativo)
'                If lErro <> SUCESSO Then gError 197794

                sNomeReduzido = String(STRING_CLIENTE_NOME_REDUZIDO, 0)

                'tratar a parte nao associada à baixas
                lErro = Comando_Executar(alComando(4), "SELECT NumIntRec, SaldoNaoApropriado, NomeReduzido FROM RecebAntecipados, Clientes WHERE NumMovto = ? AND Clientes.Codigo = RecebAntecipados.Cliente", _
                    lNumIntDoc, dSaldoNaoApropriado, sNomeReduzido, lMOV_NumMovto)
                If lErro <> AD_SQL_SUCESSO Then gError 197795
                
                lErro = Comando_BuscarPrimeiro(alComando(4))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 197796

                If lErro = AD_SQL_SUCESSO Then
                
                    'obter o fator para aplicar sobre os lctos
                    dFator = dSaldoNaoApropriado / dMOV_Valor
                        
                    'incluir lancamentos contabeis do movimento
                    lErro = RelFlxCtb_Prepara3(lNumIntRel, lMOV_NumMovto, 11, dFator, alComando, lMOV_NumMovto, objRelFlCxCtb)
                    If lErro <> SUCESSO Then gError 197797
                
                    objRelFlCxCtb.sSiglaDoc = ""
                    objRelFlCxCtb.sDoc = ""
                    
                    dSaldo = dSaldo + objRelFlCxCtb.dCredito
                    dSaldoRotativo = dSaldoRotativo + objRelFlCxCtb.dCredito
                    lSeq = lSeq + 1
                    
                    'incluir registro correspondente a baixaparc
                    lErro = Comando_Executar(alComando(12), "INSERT INTO RelFlCxCtb (NumIntDoc, NumIntRel, SiglaBanco, Data, Descricao, DescConta, COAno, COMes, NumCheque, Doc, Credito, NumMovto, Tipo, TipoMeioPagto, Saldo, Rotativo, Historico, DescContaPai, Seq) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                        lNumIntDoc, objRelFlCxCtb.lNumIntRel, objRelFlCxCtb.sSiglaBanco, objRelFlCxCtb.dtData, left(sNomeReduzido, 50), objRelFlCxCtb.sDescConta, objRelFlCxCtb.iCOAno, objRelFlCxCtb.iCOMes, objRelFlCxCtb.lNumCheque, objRelFlCxCtb.sDoc, objRelFlCxCtb.dCredito, objRelFlCxCtb.lNumMovto, objRelFlCxCtb.sTipo, objRelFlCxCtb.sTipoMeioPagto, dSaldo, dSaldoRotativo, objRelFlCxCtb.sHistorico, objRelFlCxCtb.sDescContaPai, lSeq)
                    If lErro <> AD_SQL_SUCESSO Then gError 197798
                
                End If
                

            Case MOVCCI_PAGTO_TITULO_POR_CHEQUE, MOVCCI_PAGTO_TITULO_POR_BORDERO, MOVCCI_PAGTO_TITULO_POR_DINHEIRO
                
                objRelFlCxCtb.sTipo = "TPG"
                
                Select Case iMOV_Tipo
                
                    Case MOVCCI_PAGTO_TITULO_POR_DINHEIRO
                    
                        objRelFlCxCtb.sTipoMeioPagto = "DIN"
                        
                    Case MOVCCI_PAGTO_TITULO_POR_CHEQUE
                
                        objRelFlCxCtb.sTipoMeioPagto = "CHQ"
                        objRelFlCxCtb.lNumCheque = lMOV_Numero
                
                    Case MOVCCI_PAGTO_TITULO_POR_BORDERO
                    
                        objRelFlCxCtb.sTipoMeioPagto = "BRD"
                    
                End Select
                
                'Alterado para tratar baixas canceladas porque o cancelamento ou vem via movto
                'tipo depósito (1) ou via movto excluído. MOVCCI_CANC_PAGTO (14) não foi utilizado no código
                'e nem no BD dos principais clientes. Como os depósitos por cancelamento aparecem no fluxo as
                'baixas também tem que aparecer. Nos movto excluído nem a baixa e nem o cancelamento aparecerão
                'Também foi alterado para tratar caso não encontre a parcela (exclusão)
                
                'pegar info dos titulos, parcelas, baixa, baixasparc
                lErro = RelFlxCtb_Prepara1(lNumIntRel, lMOV_NumMovto, alComando, objRelFlCxCtb, dSaldo, dSaldoRotativo, lSeq)
                If lErro <> SUCESSO Then gError 197799

            Case MOVCCI_RECEBIMENTO_TITULO, MOVCCI_CREDITO_RETORNO_COBRANCA, MOVCCI_CRED_RET_COBRANCA

                objRelFlCxCtb.sTipo = "TRC"

                'pegar info dos titulos, parcelas, baixa, baixasparc
                lErro = RelFlxCtb_Prepara4(lNumIntRel, lMOV_NumMovto, alComando, objRelFlCxCtb, dSaldo, dSaldoRotativo, lSeq)
                If lErro <> SUCESSO Then gError 197800
            
            Case MOVCCI_DEB_RET_COBRANCA

            Case MOVCCI_RECEBTO_CANCELA
'                'pegar info dos titulos, parcelas, baixa, baixasparc
'                lErro = RelFluxoCaixaContabil_Prepara5(lNumIntRel, lMOV_NumMovto, lMOV_NumRefInterna, alComando)
'                If lErro <> SUCESSO Then gError

            Case MOVCCI_BAIXA_RECEBANTECIPADO
                'criar registro informativo

            Case MOVCCI_BAIXA_DEBITOSRECCLI
                'criar registro informativo

            Case MOVCCI_BAIXA_PAGANTECIPADO
                'criar registro informativo

            Case MOVCCI_BAIXA_CREDITOSPAGFORN
                'criar registro informativo

            
            'Case MOVCCI_CANC_PAGTO
            'Case MOVCCI_APLICACAO
            'Case MOVCCI_RESGATE
'            Case MOVCCI_RECEBTO_CANCELA
'                'pegar info dos titulos, parcelas, baixa, baixasparc
'                lErro = RelFluxoCaixaContabil_Prepara5(lNumIntRel, lMOV_NumMovto, lMOV_NumRefInterna, alComando)
'                If lErro <> SUCESSO Then gError

            Case Else
                gError 197801

        End Select

        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 197802

    Loop

    objFluxo.sFluxo = "fluxocontabil"
    objFluxo.iFilialEmpresa = iFilialEmpresa
    objFluxo.dtDataFinal = dtDataAte
    
    If dtDataDe < gdtDataAtual Then
        objFluxo.dtDataBase = gdtDataAtual
    Else
        objFluxo.dtDataBase = dtDataDe
    End If

    lErro = CF("Fluxo_Grava_EmTrans", objFluxo)
    If lErro <> SUCESSO Then gError 197855

    sNomeReduzido = String(STRING_FLUXOANALITICO_NOME_REDUZIDO, 0)
    tFluxoAnalitico.sNomeReduzido = String(STRING_FLUXOANALITICO_NOME_REDUZIDO, 0)
    tFluxoAnalitico.sSiglaDocumento = String(STRING_TITULO_SIGLADOCUMENTO, 0)
    tFluxoAnalitico.sTitulo = String(STRING_FLUXOANALITICO_TITULO, 0)
    tFluxoAnalitico.sHistorico = String(STRING_FLUXOANALITICO_HISTORICO, 0)
    
    'Pesquisa os registros de fluxo analitico
    lErro = Comando_Executar(alComando(27), "SELECT TipoReg, Data, Valor, NomeReduzido, SiglaDocumento, NumTitulo, NumIntDoc, Historico FROM FluxoAnalitico WHERE FluxoId = ? ORDER BY Data, NumIntDoc", tFluxoAnalitico.iTipoReg, tFluxoAnalitico.dtData, tFluxoAnalitico.dValor, tFluxoAnalitico.sNomeReduzido, tFluxoAnalitico.sSiglaDocumento, tFluxoAnalitico.sTitulo, tFluxoAnalitico.lNumIntDoc, tFluxoAnalitico.sHistorico, objFluxo.lFluxoId)
    If lErro <> AD_SQL_SUCESSO Then gError 197858

    lErro = Comando_BuscarPrimeiro(alComando(27))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 197859

    Do While lErro = AD_SQL_SUCESSO
    
        Set objRelFlCxCtb = New ClassRelFlCxCtb
        
        objRelFlCxCtb.lNumIntDoc = tFluxoAnalitico.lNumIntDoc
        objRelFlCxCtb.sSiglaDoc = tFluxoAnalitico.sSiglaDocumento
        objRelFlCxCtb.sDescricao = tFluxoAnalitico.sNomeReduzido
        objRelFlCxCtb.dtData = tFluxoAnalitico.dtData
        objRelFlCxCtb.lNumIntRel = lNumIntRel
        objRelFlCxCtb.sDoc = tFluxoAnalitico.sTitulo
        objRelFlCxCtb.sHistorico = tFluxoAnalitico.sHistorico
        If tFluxoAnalitico.dValor > 0 Then
            objRelFlCxCtb.dCredito = tFluxoAnalitico.dValor
        Else
            objRelFlCxCtb.dDebito = -tFluxoAnalitico.dValor
        End If
        dSaldo = dSaldo + tFluxoAnalitico.dValor
        dSaldoRotativo = dSaldoRotativo + tFluxoAnalitico.dValor
        lSeq = lSeq + 1
        
        If tFluxoAnalitico.iTipoReg = FLUXOANALITICO_TIPOREG_PAGTO Then
        
            objRelFlCxCtb.sTipo = "PPG"
            
            lErro = RelFlxCtb_Prepara2(15, tFluxoAnalitico.lNumIntDoc, alComando, objRelFlCxCtb)
            If lErro <> SUCESSO Then gError 197860
            
        ElseIf tFluxoAnalitico.iTipoReg = FLUXOANALITICO_TIPOREG_RECEBTO Then
        
            objRelFlCxCtb.sTipo = "PRC"
        
            lErro = RelFlxCtb_Prepara2(16, tFluxoAnalitico.lNumIntDoc, alComando, objRelFlCxCtb)
            If lErro <> SUCESSO Then gError 197861
            
        End If

        'incluir registro correspondente a baixaparc
        lErro = Comando_Executar(alComando(6), "INSERT INTO RelFlCxCtb (NumIntDoc, NumIntRel, SiglaBanco, Data, Descricao, DescConta, COAno, COMes, NumCheque, SiglaDoc, Doc, NumMovto, Tipo, TipoMeioPagto, Saldo, Rotativo, Credito, Debito, Historico, DescContaPai, Seq) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
            objRelFlCxCtb.lNumIntDoc, objRelFlCxCtb.lNumIntRel, objRelFlCxCtb.sSiglaBanco, objRelFlCxCtb.dtData, objRelFlCxCtb.sDescricao, objRelFlCxCtb.sDescConta, objRelFlCxCtb.iCOAno, objRelFlCxCtb.iCOMes, objRelFlCxCtb.lNumCheque, objRelFlCxCtb.sSiglaDoc, objRelFlCxCtb.sDoc, objRelFlCxCtb.lNumMovto, objRelFlCxCtb.sTipo, objRelFlCxCtb.sTipoMeioPagto, dSaldo, dSaldoRotativo, objRelFlCxCtb.dCredito, objRelFlCxCtb.dDebito, objRelFlCxCtb.sHistorico, objRelFlCxCtb.sDescContaPai, lSeq)
        If lErro <> AD_SQL_SUCESSO Then gError 197862
    
        lErro = Comando_BuscarProximo(alComando(27))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 197863

    Loop

    lErro = CF("Fluxo_Exclui_EmTrans", objFluxo)
    If lErro <> SUCESSO Then gError 197856
    
    'Reordena e acerta os saldos
    dSaldo = dSaldoInicial
    dSaldoRotativo = dSaldoInicial + dRotativo
    
    lErro = Comando_ExecutarPos(alComando(29), "SELECT Credito, Debito FROM RelFlCxCtb WHERE NumIntRel = ? ORDER BY Data, Seq ", 0, dCredAux, dDebAux, lNumIntRel)
    If lErro <> AD_SQL_SUCESSO Then gError 197858

    lErro = Comando_BuscarPrimeiro(alComando(29))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 197859

    lOrdem = 0
    Do While lErro = AD_SQL_SUCESSO

        dSaldo = dSaldo - dDebAux + dCredAux
        dSaldoRotativo = dSaldoRotativo - dDebAux + dCredAux
        lOrdem = lOrdem + 1
        
        lErro = Comando_ExecutarPos(alComando(30), "UPDATE RelFlCxCtb SET Saldo = ?, Rotativo = ?, Ordem = ?", alComando(29), dSaldo, dSaldoRotativo, lOrdem)
        If lErro <> AD_SQL_SUCESSO Then gError 197862

        lErro = Comando_BuscarProximo(alComando(29))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 197863

    Loop

    'Executa o fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    'fecha transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 197803

    RelFlCxCtb_Prepara = SUCESSO

    Exit Function

Erro_RelFlCxCtb_Prepara:

    RelFlCxCtb_Prepara = gErr

    Select Case gErr

        Case 197801
            Resume Next

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 197804)

    End Select

    Call Transacao_Rollback

    'Executa o fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Private Function RelFlxCtb_Prepara1(ByVal lNumIntRel As Long, ByVal lMOV_NumMovto As Long, alComando() As Long, ByVal objRelFlCxCtb As ClassRelFlCxCtb, dSaldo As Double, dSaldoRotativo As Double, lSeq As Long) As Long
'tratar as baixas no contas a pagar associadas a um movimento de conta corrente

Dim lErro As Long, dFator As Double
Dim lBX_NumIntBaixa As Long, dtBX_Data As Date, dtBX_DataContabil As Date, dtBX_DataRegistro As Date
Dim lBXPARC_NumIntDoc As Long, dBXPARC_ValorJuros As Double, dBXPARC_ValorMulta As Double, dBXPARC_ValorDesconto As Double, dBXPARC_ValorBaixado As Double, dBXPARC_ValorDiferenca As Double
Dim iPARC_NumParcela As Integer, dtPARC_DataVencimento As Date, dPARC_Valor As Double, lTIT_NumIntDoc As Long, iTIT_FilialEmpresa As Integer, lTIT_Fornecedor As Long, sTIT_SiglaDocumento As String, lTIT_NumTitulo As Long, dtTIT_DataEmissao As Date
Dim dTIT_ValorTotal  As Double, dTIT_ValorIRRF As Double, dTIT_PISRetido As Double, dTIT_ISSRetido As Double, dTIT_COFINSRetido As Double, dTIT_CSLLRetido As Double, dTIT_ValorINSS As Double, iTIT_INSSRetido As Integer, sTIT_Observacao As String
Dim sFORN_RazaoSocial As String, sFORN_NomeReduzido As String, lTIT_NumIntDocAnt As Long
Dim objFornecedor As New ClassFornecedor
Dim sTIT_Historico As String

Dim dValorBaixado As Double, dValorMulta As Double, dValorJuros As Double, dValorDesconto As Double, dValorDiferenca As Double
Dim dValorLiqTit As Double
Dim sHistBx As String

On Error GoTo Erro_RelFlxCtb_Prepara1
    
    sTIT_SiglaDocumento = String(STRING_SIGLA_DOCUMENTO, 0)
    sTIT_Historico = String(STRING_NFSPAG_HISTORICO, 0)
    sHistBx = String(STRING_HISTORICO, 0)
    
    lErro = Comando_Executar(alComando(5), "SELECT BX.Historico, BX.NumIntBaixa, BXPARC.NumIntDoc, BXPARC.ValorJuros, BXPARC.ValorMulta, BXPARC.ValorDesconto, BXPARC.ValorBaixado, BXPARC.ValorDiferenca, " & _
                                                   "TIT.SiglaDocumento , TIT.NumTitulo, TIT.NumIntDoc, TIT.ValorTotal, TIT.ValorIRRF, TIT.PISRetido, TIT.ISSRetido, TIT.COFINSRetido, TIT.CSLLRetido, TIT.ValorINSS, TIT.INSSRetido, TIT.Fornecedor, TIT.Historico " & _
                                            "FROM   BaixasParcPag AS BXPARC INNER JOIN BaixasPag AS BX ON BXPARC.NumIntBaixa = BX.NumIntBaixa LEFT OUTER JOIN " & _
                                                   "TitulosPagTodos AS TIT INNER JOIN ParcelasPagTodas AS PARC ON TIT.NumIntDoc = PARC.NumIntTitulo ON BXPARC.NumIntParcela = PARC.NumIntDoc " & _
                                            "WHERE  BX.NumMovCta = ? ORDER BY TIT.NumIntDoc, BX.NumIntBaixa, BXPARC.NumIntDoc", _
        sHistBx, lBX_NumIntBaixa, lBXPARC_NumIntDoc, dBXPARC_ValorJuros, dBXPARC_ValorMulta, dBXPARC_ValorDesconto, dBXPARC_ValorBaixado, dBXPARC_ValorDiferenca, _
        sTIT_SiglaDocumento, lTIT_NumTitulo, lTIT_NumIntDoc, dTIT_ValorTotal, dTIT_ValorIRRF, dTIT_PISRetido, dTIT_ISSRetido, dTIT_COFINSRetido, dTIT_CSLLRetido, dTIT_ValorINSS, iTIT_INSSRetido, lTIT_Fornecedor, sTIT_Historico, _
        lMOV_NumMovto)
    If lErro <> AD_SQL_SUCESSO Then gError 197805
    
    lErro = Comando_BuscarProximo(alComando(5))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 197806
    
    If lErro = AD_SQL_SUCESSO Then
    
        lTIT_NumIntDocAnt = lTIT_NumIntDoc
        dValorLiqTit = Arredonda_Moeda(dTIT_ValorTotal - dTIT_ValorIRRF - dTIT_PISRetido - dTIT_ISSRetido - dTIT_COFINSRetido - dTIT_CSLLRetido - IIf(iTIT_INSSRetido = 0, 0, dTIT_ValorINSS))
        
        Do While lErro = AD_SQL_SUCESSO
            
            'Tratamento caso a parcela tenha sido excluída
            If lTIT_NumIntDoc > 0 Then
                objFornecedor.lCodigo = lTIT_Fornecedor
                
                lErro = CF("Fornecedor_Le", objFornecedor)
                If lErro <> SUCESSO And lErro <> 12729 Then gError 197807
                
                'inserir lctos contabeis do titulo
                lErro = RelFlxCtb_Prepara2(15, lTIT_NumIntDoc, alComando, objRelFlCxCtb)
                If lErro <> SUCESSO Then gError 197808
                
                objRelFlCxCtb.lNumIntDoc = lTIT_NumIntDoc
                objRelFlCxCtb.sHistorico = sHistBx
            Else
                objRelFlCxCtb.sHistorico = sTIT_Historico
            End If
            
            objRelFlCxCtb.dDebito = dBXPARC_ValorBaixado + dBXPARC_ValorMulta + dBXPARC_ValorJuros - dBXPARC_ValorDesconto + dBXPARC_ValorDiferenca
            
            objRelFlCxCtb.sSiglaDoc = sTIT_SiglaDocumento
            objRelFlCxCtb.sDoc = CStr(lTIT_NumTitulo)
            
            dSaldo = dSaldo - objRelFlCxCtb.dDebito
            dSaldoRotativo = dSaldoRotativo - objRelFlCxCtb.dDebito
            lSeq = lSeq + 1
            
            'incluir registro correspondente a baixaparc
            lErro = Comando_Executar(alComando(6), "INSERT INTO RelFlCxCtb (NumIntDoc, NumIntRel, SiglaBanco, Data, Descricao, DescConta, COAno, COMes, NumCheque, SiglaDoc, Doc, Debito, NumMovto, Tipo, TipoMeioPagto, Saldo, Rotativo, Historico, DescContaPai, HistoricoBX, Seq) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                objRelFlCxCtb.lNumIntDoc, objRelFlCxCtb.lNumIntRel, objRelFlCxCtb.sSiglaBanco, objRelFlCxCtb.dtData, objFornecedor.sNomeReduzido, objRelFlCxCtb.sDescConta, objRelFlCxCtb.iCOAno, objRelFlCxCtb.iCOMes, objRelFlCxCtb.lNumCheque, objRelFlCxCtb.sSiglaDoc, objRelFlCxCtb.sDoc, objRelFlCxCtb.dDebito, objRelFlCxCtb.lNumMovto, objRelFlCxCtb.sTipo, objRelFlCxCtb.sTipoMeioPagto, dSaldo, dSaldoRotativo, objRelFlCxCtb.sHistorico, objRelFlCxCtb.sDescContaPai, sHistBx, lSeq)
            If lErro <> AD_SQL_SUCESSO Then gError 197809
            
            lErro = Comando_BuscarProximo(alComando(5))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 197810
        
        Loop
        
    End If
    
    RelFlxCtb_Prepara1 = SUCESSO

    Exit Function

Erro_RelFlxCtb_Prepara1:

    RelFlxCtb_Prepara1 = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 197811)

    End Select
    
End Function

Private Function RelFlxCtb_Prepara2(ByVal iOrigem As Integer, ByVal lNumIntDocOrigLcto As Long, alComando() As Long, ByVal objRelFlCxCtb As ClassRelFlCxCtb) As Long
'registra os lctos contabeis identificados pelo numintdoc do lcto e sua origem

Dim lErro As Long, dValorLctoAux As Double
Dim iIndice As Integer, iTransacao As Integer
Dim iLCTO_FilialEmpresa As Integer, sLCTO_Origem As String, iLCTO_Exercicio As Integer, iLCTO_PeriodoLan As Integer, lLCTO_Doc As Long, iLCTO_Seq As Integer, sLCTO_Conta As String, dLCTO_Valor As Double
Dim lNumIntNFiscal As Long
Dim iOrigem1 As Integer
Dim iOrigem2 As Integer
Dim objExercicio As New ClassExercicio
Dim objPlanoConta As New ClassPlanoConta
Dim sContaPai As String
Dim lNumIntTitulo As Long

On Error GoTo Erro_RelFlxCtb_Prepara2
    
    'obter os lctos
    sLCTO_Origem = String(STRING_ORIGEM, 0)
    sLCTO_Conta = String(STRING_CONTA, 0)
    
    If giFilialEmpresa < Abs(giFilialAuxiliar) Then
        lErro = Comando_Executar(alComando(7), "SELECT LCTO.FilialEmpresa, LCTO.Origem, LCTO.Exercicio, LCTO.PeriodoLan, LCTO.Doc, LCTO.Seq, LCTO.Conta, LCTO.Valor, LCTO.Transacao " & _
            "FROM lancamentostodos LCTO, transacaoctb TCTB, transacaoctborigem TCTBO " & _
            "WHERE TCTBO.codigo = TCTB.origemlcto AND TCTB.codigo = LCTO.transacao AND " & _
            "TCTBO.Codigo = ? AND LCTO.numintdoc = ? AND LCTO.FilialEmpresa < ?  AND LCTO.COnta <> ? ORDER BY LCTO.FilialEmpresa, LCTO.Origem, LCTO.Exercicio, LCTO.PeriodoLan, LCTO.Doc, LCTO.Seq", _
            iLCTO_FilialEmpresa, sLCTO_Origem, iLCTO_Exercicio, iLCTO_PeriodoLan, lLCTO_Doc, iLCTO_Seq, sLCTO_Conta, dLCTO_Valor, iTransacao, _
            iOrigem, lNumIntDocOrigLcto, Abs(giFilialAuxiliar), "999999")
    Else
        lErro = Comando_Executar(alComando(7), "SELECT LCTO.FilialEmpresa, LCTO.Origem, LCTO.Exercicio, LCTO.PeriodoLan, LCTO.Doc, LCTO.Seq, LCTO.Conta, LCTO.Valor, LCTO.Transacao " & _
            "FROM lancamentostodos LCTO, transacaoctb TCTB, transacaoctborigem TCTBO " & _
            "WHERE TCTBO.codigo = TCTB.origemlcto AND TCTB.codigo = LCTO.transacao AND " & _
            "TCTBO.Codigo = ? AND LCTO.numintdoc = ? AND LCTO.FilialEmpresa > ? AND LCTO.COnta <> ? ORDER BY LCTO.FilialEmpresa, LCTO.Origem, LCTO.Exercicio, LCTO.PeriodoLan, LCTO.Doc, LCTO.Seq", _
            iLCTO_FilialEmpresa, sLCTO_Origem, iLCTO_Exercicio, iLCTO_PeriodoLan, lLCTO_Doc, iLCTO_Seq, sLCTO_Conta, dLCTO_Valor, iTransacao, _
            iOrigem, lNumIntDocOrigLcto, Abs(giFilialAuxiliar), "9999999")
    End If
    If lErro <> AD_SQL_SUCESSO Then gError 197812
    
    lErro = Comando_BuscarPrimeiro(alComando(7))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 197813

    If lErro = AD_SQL_SEM_DADOS Then

        lErro = Comando_Executar(alComando(26), "SELECT NumIntDoc From NFiscal WHERE ClasseDocCPR = ? AND NumIntDocCPR = ?", lNumIntNFiscal, IIf(iOrigem = 15, 1, 2), lNumIntDocOrigLcto)
        If lErro <> AD_SQL_SUCESSO Then gError 197683
    
        lErro = Comando_BuscarPrimeiro(alComando(26))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 197684

        If lErro = AD_SQL_SUCESSO Then
            
            If iOrigem = 16 Then
                iOrigem1 = 26
                iOrigem2 = 36
            ElseIf iOrigem = 15 Then
                iOrigem1 = 24
                iOrigem2 = 54
            End If
            
            If giFilialEmpresa < Abs(giFilialAuxiliar) Then
                lErro = Comando_Executar(alComando(7), "SELECT LCTO.FilialEmpresa, LCTO.Origem, LCTO.Exercicio, LCTO.PeriodoLan, LCTO.Doc, LCTO.Seq, LCTO.Conta, LCTO.Valor, LCTO.Transacao " & _
                    "FROM lancamentostodos LCTO " & _
                    "WHERE  (LCTO.transacao = ? Or LCTO.transacao = ?) AND " & _
                    " LCTO.numintdoc = ? AND LCTO.FilialEmpresa < ? AND LCTO.COnta <> ? ORDER BY LCTO.FilialEmpresa, LCTO.Origem, LCTO.Exercicio, LCTO.PeriodoLan, LCTO.Doc, LCTO.Seq", _
                    iLCTO_FilialEmpresa, sLCTO_Origem, iLCTO_Exercicio, iLCTO_PeriodoLan, lLCTO_Doc, iLCTO_Seq, sLCTO_Conta, dLCTO_Valor, iTransacao, _
                    iOrigem1, iOrigem2, lNumIntNFiscal, Abs(giFilialAuxiliar), "99999999")
            Else
                lErro = Comando_Executar(alComando(7), "SELECT LCTO.FilialEmpresa, LCTO.Origem, LCTO.Exercicio, LCTO.PeriodoLan, LCTO.Doc, LCTO.Seq, LCTO.Conta, LCTO.Valor, LCTO.Transacao " & _
                    "FROM lancamentostodos LCTO " & _
                    "WHERE  (LCTO.transacao = ? Or LCTO.transacao = ?) AND " & _
                    " LCTO.numintdoc = ? AND LCTO.FilialEmpresa > ? AND LCTO.COnta <> ? ORDER BY LCTO.FilialEmpresa, LCTO.Origem, LCTO.Exercicio, LCTO.PeriodoLan, LCTO.Doc, LCTO.Seq", _
                    iLCTO_FilialEmpresa, sLCTO_Origem, iLCTO_Exercicio, iLCTO_PeriodoLan, lLCTO_Doc, iLCTO_Seq, sLCTO_Conta, dLCTO_Valor, iTransacao, _
                    iOrigem1, iOrigem2, lNumIntNFiscal, Abs(giFilialAuxiliar), "99999999")
            End If
            
            If lErro <> AD_SQL_SUCESSO Then gError 197685

            lErro = Comando_BuscarPrimeiro(alComando(7))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 197686

        ElseIf iOrigem = 15 Or iOrigem = 16 Then
            
            'se for pagamento
            If iOrigem = 15 Then
        
                lErro = Comando_Executar(alComando(31), "SELECT NumIntTitulo From ParcelasPagTodas WHERE NumIntDoc = ?", lNumIntTitulo, lNumIntDocOrigLcto)
                If lErro <> AD_SQL_SUCESSO Then gError 199217
            
                lErro = Comando_BuscarPrimeiro(alComando(31))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 199218
        
            'se for recebimento
            ElseIf iOrigem = 16 Then
        
                lErro = Comando_Executar(alComando(32), "SELECT NumIntTitulo From ParcelasRecTodas WHERE NumIntDoc = ?", lNumIntTitulo, lNumIntDocOrigLcto)
                If lErro <> AD_SQL_SUCESSO Then gError 199219
            
                lErro = Comando_BuscarPrimeiro(alComando(32))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 199220
        
            End If

            If lErro = AD_SQL_SUCESSO Then

                If giFilialEmpresa < Abs(giFilialAuxiliar) Then
                    lErro = Comando_Executar(alComando(7), "SELECT LCTO.FilialEmpresa, LCTO.Origem, LCTO.Exercicio, LCTO.PeriodoLan, LCTO.Doc, LCTO.Seq, LCTO.Conta, LCTO.Valor, LCTO.Transacao " & _
                        "FROM lancamentostodos LCTO, transacaoctb TCTB, transacaoctborigem TCTBO " & _
                        "WHERE TCTBO.codigo = TCTB.origemlcto AND TCTB.codigo = LCTO.transacao AND " & _
                        "TCTBO.Codigo = ? AND LCTO.numintdoc = ? AND LCTO.FilialEmpresa < ?  AND LCTO.COnta <> ? ORDER BY LCTO.FilialEmpresa, LCTO.Origem, LCTO.Exercicio, LCTO.PeriodoLan, LCTO.Doc, LCTO.Seq", _
                        iLCTO_FilialEmpresa, sLCTO_Origem, iLCTO_Exercicio, iLCTO_PeriodoLan, lLCTO_Doc, iLCTO_Seq, sLCTO_Conta, dLCTO_Valor, iTransacao, _
                        iOrigem, lNumIntTitulo, Abs(giFilialAuxiliar), "999999")
                Else
                    lErro = Comando_Executar(alComando(7), "SELECT LCTO.FilialEmpresa, LCTO.Origem, LCTO.Exercicio, LCTO.PeriodoLan, LCTO.Doc, LCTO.Seq, LCTO.Conta, LCTO.Valor, LCTO.Transacao " & _
                        "FROM lancamentostodos LCTO, transacaoctb TCTB, transacaoctborigem TCTBO " & _
                        "WHERE TCTBO.codigo = TCTB.origemlcto AND TCTB.codigo = LCTO.transacao AND " & _
                        "TCTBO.Codigo = ? AND LCTO.numintdoc = ? AND LCTO.FilialEmpresa > ? AND LCTO.COnta <> ? ORDER BY LCTO.FilialEmpresa, LCTO.Origem, LCTO.Exercicio, LCTO.PeriodoLan, LCTO.Doc, LCTO.Seq", _
                        iLCTO_FilialEmpresa, sLCTO_Origem, iLCTO_Exercicio, iLCTO_PeriodoLan, lLCTO_Doc, iLCTO_Seq, sLCTO_Conta, dLCTO_Valor, iTransacao, _
                        iOrigem, lNumIntTitulo, Abs(giFilialAuxiliar), "9999999")
                End If
                If lErro <> AD_SQL_SUCESSO Then gError 199221
                
                lErro = Comando_BuscarPrimeiro(alComando(7))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 199222
                
                If lErro = AD_SQL_SEM_DADOS Then
                
                    lErro = Comando_Executar(alComando(26), "SELECT NumIntDoc From NFiscal WHERE ClasseDocCPR = ? AND NumIntDocCPR = ?", lNumIntNFiscal, IIf(iOrigem = 15, 1, 2), lNumIntTitulo)
                    If lErro <> AD_SQL_SUCESSO Then gError 199223
                
                    lErro = Comando_BuscarPrimeiro(alComando(26))
                    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 199224
            
                    If lErro = AD_SQL_SUCESSO Then
                        
                        If iOrigem = 16 Then
                            iOrigem1 = 26
                            iOrigem2 = 36
                        ElseIf iOrigem = 15 Then
                            iOrigem1 = 24
                            iOrigem2 = 54
                        End If
                        
                        If giFilialEmpresa < Abs(giFilialAuxiliar) Then
                            lErro = Comando_Executar(alComando(7), "SELECT LCTO.FilialEmpresa, LCTO.Origem, LCTO.Exercicio, LCTO.PeriodoLan, LCTO.Doc, LCTO.Seq, LCTO.Conta, LCTO.Valor, LCTO.Transacao " & _
                                "FROM lancamentostodos LCTO " & _
                                "WHERE  (LCTO.transacao = ? Or LCTO.transacao = ?) AND " & _
                                " LCTO.numintdoc = ? AND LCTO.FilialEmpresa < ? AND LCTO.COnta <> ? ORDER BY LCTO.FilialEmpresa, LCTO.Origem, LCTO.Exercicio, LCTO.PeriodoLan, LCTO.Doc, LCTO.Seq", _
                                iLCTO_FilialEmpresa, sLCTO_Origem, iLCTO_Exercicio, iLCTO_PeriodoLan, lLCTO_Doc, iLCTO_Seq, sLCTO_Conta, dLCTO_Valor, iTransacao, _
                                iOrigem1, iOrigem2, lNumIntNFiscal, Abs(giFilialAuxiliar), "99999999")
                        Else
                            lErro = Comando_Executar(alComando(7), "SELECT LCTO.FilialEmpresa, LCTO.Origem, LCTO.Exercicio, LCTO.PeriodoLan, LCTO.Doc, LCTO.Seq, LCTO.Conta, LCTO.Valor, LCTO.Transacao " & _
                                "FROM lancamentostodos LCTO " & _
                                "WHERE  (LCTO.transacao = ? Or LCTO.transacao = ?) AND " & _
                                " LCTO.numintdoc = ? AND LCTO.FilialEmpresa > ? AND LCTO.COnta <> ? ORDER BY LCTO.FilialEmpresa, LCTO.Origem, LCTO.Exercicio, LCTO.PeriodoLan, LCTO.Doc, LCTO.Seq", _
                                iLCTO_FilialEmpresa, sLCTO_Origem, iLCTO_Exercicio, iLCTO_PeriodoLan, lLCTO_Doc, iLCTO_Seq, sLCTO_Conta, dLCTO_Valor, iTransacao, _
                                iOrigem1, iOrigem2, lNumIntNFiscal, Abs(giFilialAuxiliar), "99999999")
                        End If
                        
                        If lErro <> AD_SQL_SUCESSO Then gError 199225
            
                        lErro = Comando_BuscarPrimeiro(alComando(7))
                        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 199226
                            
                            
                    End If
                            
                End If
    
            End If

        End If

    End If
    
    'incluir lctos
    If lErro = AD_SQL_SUCESSO Then

        lErro = CF("PlanoConta_Le_Conta1", sLCTO_Conta, objPlanoConta)
        If lErro <> SUCESSO And lErro <> 6030 Then gError 197670
    
        If lErro = SUCESSO Then
    
            objRelFlCxCtb.sDescConta = objPlanoConta.sDescConta
    
            'Busca a ContaPai imediatamente acima da conta em questao
            lErro = Mascara_RetornaContaPai(objPlanoConta.sConta, sContaPai)
            If lErro <> SUCESSO Then gError 199192
    
            lErro = CF("PlanoConta_Le_Conta1", sContaPai, objPlanoConta)
            If lErro <> SUCESSO And lErro <> 6030 Then gError 199193
            
            objRelFlCxCtb.sDescContaPai = objPlanoConta.sDescConta
    
        End If
    
        lErro = CF("Exercicio_Le", iLCTO_Exercicio, objExercicio)
        If lErro <> SUCESSO And lErro <> 10083 Then gError 197671
        
        If lErro = SUCESSO Then
        
            objRelFlCxCtb.iCOAno = StrParaInt(objExercicio.sNomeExterno)
            objRelFlCxCtb.iCOMes = iLCTO_PeriodoLan
            
        End If

    End If
    
    RelFlxCtb_Prepara2 = SUCESSO

    Exit Function

Erro_RelFlxCtb_Prepara2:

    RelFlxCtb_Prepara2 = gErr

    Select Case gErr
    
        Case 199192, 199193
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 197814)

    End Select

    Exit Function

End Function

Private Function RelFlxCtb_Prepara3(ByVal lNumIntRel As Long, ByVal lMOV_NumMovto As Long, ByVal iTransacao As Integer, ByVal dFator As Double, alComando() As Long, ByVal lNumIntDoc As Long, ByVal objRelFlCxCtb As ClassRelFlCxCtb) As Long
'registra lancamentos contabeis ligados a movto de conta corrente

Dim lErro As Long, dValorRateado As Double
Dim iIndice As Integer
Dim iLCTO_FilialEmpresa As Integer, sLCTO_Origem As String, iLCTO_Exercicio As Integer, iLCTO_PeriodoLan As Integer, lLCTO_Doc As Long, iLCTO_Seq As Integer, sLCTO_Conta As String, dLCTO_Valor As Double
Dim objExercicio As New ClassExercicio
Dim objPlanoConta As New ClassPlanoConta
Dim sContaPai As String

On Error GoTo Erro_RelFlxCtb_Prepara3
    
    'obter lctos contabeis
    sLCTO_Origem = String(STRING_ORIGEM, 0)
    sLCTO_Conta = String(STRING_CONTA, 0)
    
    If giFilialEmpresa < Abs(giFilialAuxiliar) Then
        lErro = Comando_Executar(alComando(9), "SELECT FilialEmpresa, Origem, Exercicio, PeriodoLan, Doc, Seq, Conta, Valor FROM LancamentosTodos WHERE Transacao = ? AND NumIntDoc = ? AND FilialEmpresa < ? AND COnta <> ? ", _
            iLCTO_FilialEmpresa, sLCTO_Origem, iLCTO_Exercicio, iLCTO_PeriodoLan, lLCTO_Doc, iLCTO_Seq, sLCTO_Conta, dLCTO_Valor, iTransacao, lNumIntDoc, Abs(giFilialAuxiliar), "9999999")
    Else
        lErro = Comando_Executar(alComando(9), "SELECT FilialEmpresa, Origem, Exercicio, PeriodoLan, Doc, Seq, Conta, Valor FROM LancamentosTodos WHERE Transacao = ? AND NumIntDoc = ? AND FilialEmpresa > ? AND Conta <> ? ", _
            iLCTO_FilialEmpresa, sLCTO_Origem, iLCTO_Exercicio, iLCTO_PeriodoLan, lLCTO_Doc, iLCTO_Seq, sLCTO_Conta, dLCTO_Valor, iTransacao, lNumIntDoc, Abs(giFilialAuxiliar), "9999999")
    End If
    If lErro <> AD_SQL_SUCESSO Then gError 197767

    lErro = Comando_BuscarPrimeiro(alComando(9))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 197768

    If lErro = AD_SQL_SUCESSO Then
    
        lErro = CF("PlanoConta_Le_Conta1", sLCTO_Conta, objPlanoConta)
        If lErro <> SUCESSO And lErro <> 6030 Then gError 197670
    
        If lErro = SUCESSO Then
    
            objRelFlCxCtb.sDescConta = objPlanoConta.sDescConta
    
            'Busca a ContaPai imediatamente acima da conta em questao
            lErro = Mascara_RetornaContaPai(objPlanoConta.sConta, sContaPai)
            If lErro <> SUCESSO Then gError 199194
    
            lErro = CF("PlanoConta_Le_Conta1", sContaPai, objPlanoConta)
            If lErro <> SUCESSO And lErro <> 6030 Then gError 199195
            
            objRelFlCxCtb.sDescContaPai = objPlanoConta.sDescConta
    
        End If
    
        lErro = CF("Exercicio_Le", iLCTO_Exercicio, objExercicio)
        If lErro <> SUCESSO And lErro <> 10083 Then gError 197671
        
        If lErro = SUCESSO Then
        
            objRelFlCxCtb.iCOAno = StrParaInt(objExercicio.sNomeExterno)
            objRelFlCxCtb.iCOMes = iLCTO_PeriodoLan
            
        End If
        
    End If
    
    RelFlxCtb_Prepara3 = SUCESSO

    Exit Function

Erro_RelFlxCtb_Prepara3:

    RelFlxCtb_Prepara3 = gErr

    Select Case gErr

        Case 199194, 199195

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 197769)

    End Select

    Exit Function

End Function

Private Function RelFlxCtb_Prepara4(ByVal lNumIntRel As Long, ByVal lMOV_NumMovto As Long, alComando() As Long, ByVal objRelFlCxCtb As ClassRelFlCxCtb, dSaldo As Double, dSaldoRotativo As Double, lSeq As Long) As Long
'tratar as baixas no contas a receber associadas a um movimento de conta corrente

Dim lErro As Long, dFator As Double
Dim lBX_NumIntBaixa As Long, dtBX_Data As Date, dtBX_DataContabil As Date, dtBX_DataRegistro As Date
Dim lBXPARC_NumIntDoc As Long, dBXPARC_ValorJuros As Double, dBXPARC_ValorMulta As Double, dBXPARC_ValorDesconto As Double, dBXPARC_ValorBaixado As Double, dBXPARC_ValorRecebido As Double
Dim iPARC_NumParcela As Integer, dtPARC_DataVencimento As Date, dPARC_Valor As Double, lTIT_NumIntDoc As Long, iTIT_FilialEmpresa As Integer, lTIT_Cliente As Long, sTIT_SiglaDocumento As String, lTIT_NumTitulo As Long, dtTIT_DataEmissao As Date
Dim dTIT_Valor As Double, dTIT_ValorIRRF As Double, dTIT_PISRetido As Double, dTIT_ISSRetido As Double, dTIT_COFINSRetido As Double, dTIT_CSLLRetido As Double, dTIT_ValorINSS As Double, iTIT_INSSRetido As Integer, sTIT_Observacao As String
Dim sCLI_RazaoSocial As String, sCLI_NomeReduzido As String, lTIT_NumIntDocAnt As Long
Dim objCliente As New ClassCliente

Dim dValorBaixado As Double, dValorMulta As Double, dValorJuros As Double, dValorDesconto As Double, dValorRecebido As Double
Dim dValorLiqTit As Double
Dim sHistBx As String

On Error GoTo Erro_RelFlxCtb_Prepara4
    
    sTIT_SiglaDocumento = String(STRING_SIGLA_DOCUMENTO, 0)
    sHistBx = String(STRING_HISTORICO, 0)
    
    lErro = Comando_Executar(alComando(11), "SELECT BX.Historico, BX.NumIntBaixa, BXPARC.NumIntDoc, BXPARC.ValorJuros, BXPARC.ValorMulta, BXPARC.ValorDesconto, BXPARC.ValorBaixado, BXPARC.ValorRecebido, " & _
        "TIT.SiglaDocumento, TIT.NumTitulo, TIT.NumIntDoc, TIT.Valor, TIT.ValorIRRF, TIT.PISRetido, TIT.ISSRetido, TIT.COFINSRetido, TIT.CSLLRetido, TIT.ValorINSS, TIT.INSSRetido, TIT.Cliente " & _
        "FROM titulosrectodos TIT, parcelasrectodas PARC, baixasrec BX, baixasparcrec BXPARC " & _
        "WHERE TIT.NumIntDoc = PARC.NumIntTitulo AND BX.NumIntBaixa = BXPARC.numintbaixa AND PARC.numintdoc = BXPARC.numintparcela AND " & _
        "BXPARC.status<> 5 AND BX.status<>5 AND BX.NumMovCta = ? ORDER BY TIT.NumIntDoc, BX.NumIntBaixa, BXPARC.NumIntDoc", _
        sHistBx, lBX_NumIntBaixa, lBXPARC_NumIntDoc, dBXPARC_ValorJuros, dBXPARC_ValorMulta, dBXPARC_ValorDesconto, dBXPARC_ValorBaixado, dBXPARC_ValorRecebido, _
        sTIT_SiglaDocumento, lTIT_NumTitulo, lTIT_NumIntDoc, dTIT_Valor, dTIT_ValorIRRF, dTIT_PISRetido, dTIT_ISSRetido, dTIT_COFINSRetido, dTIT_CSLLRetido, dTIT_ValorINSS, iTIT_INSSRetido, lTIT_Cliente, _
        lMOV_NumMovto)
    If lErro <> AD_SQL_SUCESSO Then gError 197815
    
    lErro = Comando_BuscarPrimeiro(alComando(11))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 197816
    
    lTIT_NumIntDocAnt = lTIT_NumIntDoc
    dValorLiqTit = Arredonda_Moeda(dTIT_Valor - dTIT_ValorIRRF - dTIT_PISRetido - dTIT_ISSRetido - dTIT_COFINSRetido - dTIT_CSLLRetido - IIf(iTIT_INSSRetido = 0, 0, dTIT_ValorINSS))
    
    Do While lErro = AD_SQL_SUCESSO
    
        objRelFlCxCtb.dCredito = dBXPARC_ValorRecebido
    
        objRelFlCxCtb.lNumIntDoc = lTIT_NumIntDoc
    
        objRelFlCxCtb.sSiglaDoc = sTIT_SiglaDocumento
        objRelFlCxCtb.sDoc = CStr(lTIT_NumTitulo)
    
        objCliente.lCodigo = lTIT_Cliente
        
        lErro = CF("Cliente_Le", objCliente)
        If lErro <> SUCESSO Then gError 197817
    
        lErro = RelFlxCtb_Prepara2(16, lTIT_NumIntDoc, alComando, objRelFlCxCtb)
        If lErro <> SUCESSO Then gError 197818
                                
        dSaldo = dSaldo + objRelFlCxCtb.dCredito
        dSaldoRotativo = dSaldoRotativo + objRelFlCxCtb.dCredito
        lSeq = lSeq + 1
        
        'incluir registro correspondente a baixaparc
        lErro = Comando_Executar(alComando(12), "INSERT INTO RelFlCxCtb (NumIntDoc, NumIntRel, SiglaBanco, Data, Descricao, DescConta, COAno, COMes, NumCheque, SiglaDoc, Doc, Credito, NumMovto, Tipo, TipoMeioPagto, Saldo, Rotativo, Historico, DescContaPai, HistoricoBx, Seq) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
            objRelFlCxCtb.lNumIntDoc, objRelFlCxCtb.lNumIntRel, objRelFlCxCtb.sSiglaBanco, objRelFlCxCtb.dtData, objCliente.sNomeReduzido, objRelFlCxCtb.sDescConta, objRelFlCxCtb.iCOAno, objRelFlCxCtb.iCOMes, objRelFlCxCtb.lNumCheque, objRelFlCxCtb.sSiglaDoc, objRelFlCxCtb.sDoc, objRelFlCxCtb.dCredito, objRelFlCxCtb.lNumMovto, objRelFlCxCtb.sTipo, objRelFlCxCtb.sTipoMeioPagto, dSaldo, dSaldoRotativo, objRelFlCxCtb.sHistorico, objRelFlCxCtb.sDescContaPai, sHistBx, lSeq)
        If lErro <> AD_SQL_SUCESSO Then gError 197819
                
        lErro = Comando_BuscarProximo(alComando(11))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 197820
    
    Loop
        
    RelFlxCtb_Prepara4 = SUCESSO

    Exit Function

Erro_RelFlxCtb_Prepara4:

    RelFlxCtb_Prepara4 = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 197821)

    End Select

    Exit Function

End Function

Function BloqueioGen_Libera(ByVal colBloqueio As Collection, ByVal objMapBloqGen As ClassMapeamentoBloqGen) As Long
'libera os bloqueios passados na colecao colBloqueioPV

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(1 To 2) As Long
Dim lTransacao As Long
Dim objBloqueioGen As ClassBloqueioGen

On Error GoTo Erro_BloqueioGen_Libera

    'Inicia a transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 198347
    
    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 198348
    Next

    For Each objBloqueioGen In colBloqueio
        lErro = BloqueioGen_Libera_EmTrans(alComando(), objBloqueioGen, objMapBloqGen)
        If lErro <> SUCESSO Then gError 198349
    Next

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 198350
    
    BloqueioGen_Libera = SUCESSO

    Exit Function

Erro_BloqueioGen_Libera:

    BloqueioGen_Libera = gErr

    Select Case gErr

        Case 198347
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 198348
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 198349

        Case 198350
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 198351)

    End Select

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Call Transacao_Rollback

    Exit Function

End Function

Function BloqueioGen_Libera_EmTrans(alComando() As Long, ByVal objBloqueioGen As ClassBloqueioGen, ByVal objMapBloqGen As ClassMapeamentoBloqGen) As Long
'tenta liberar o bloqueio passado como parametro

Dim lErro As Long
Dim iIndice As Integer
Dim sSelect As String
Dim iSequencial As Integer
Dim objTipoBloqGen As New ClassTiposDeBloqueioGen
Dim colTipoBloqReserva As New Collection
Dim objTipoBloqReserva As ClassTiposDeBloqueioGen
Dim colBloqueios As Collection
Dim objDocBloq As Object
Dim dValor As Double

On Error GoTo Erro_BloqueioGen_Libera_EmTrans

    If objMapBloqGen.iClassePossuiFilEmp = MARCADO Then
        If objMapBloqGen.iTabelaBloqPossuiTipoTela = MARCADO Then
            sSelect = "SELECT Sequencial FROM " & objMapBloqGen.sNomeTabelaBloqueios & " WHERE FilialEmpresa = ? AND " & objMapBloqGen.sTabelaNomeCampoChave & " = ? AND TipoDeBloqueio = ? AND Datalib = ? AND TipoTelaBloqueio = ?"
        Else
            sSelect = "SELECT Sequencial FROM " & objMapBloqGen.sNomeTabelaBloqueios & " WHERE FilialEmpresa = ? AND " & objMapBloqGen.sTabelaNomeCampoChave & " = ? AND TipoDeBloqueio = ? AND Datalib = ?"
        End If
    Else
        If objMapBloqGen.iTabelaBloqPossuiTipoTela = MARCADO Then
            sSelect = "SELECT Sequencial FROM " & objMapBloqGen.sNomeTabelaBloqueios & " WHERE " & objMapBloqGen.sTabelaNomeCampoChave & " = ? AND TipoDeBloqueio = ? AND Datalib = ? AND TipoTelaBloqueio = ?"
        Else
            sSelect = "SELECT Sequencial FROM " & objMapBloqGen.sNomeTabelaBloqueios & " WHERE " & objMapBloqGen.sTabelaNomeCampoChave & " = ? AND TipoDeBloqueio = ? AND Datalib = ?"
        End If
    End If

    'Pesquisa no BD o bloqueio em questão
    If objMapBloqGen.iClassePossuiFilEmp = MARCADO Then
        If objMapBloqGen.iTabelaBloqPossuiTipoTela = MARCADO Then
            lErro = Comando_ExecutarPos(alComando(1), sSelect, 0, iSequencial, objBloqueioGen.iFilialEmpresa, objBloqueioGen.lCodigo, objBloqueioGen.iTipoDeBloqueio, DATA_NULA, objMapBloqGen.iTipoTelaBloqueio)
        Else
            lErro = Comando_ExecutarPos(alComando(1), sSelect, 0, iSequencial, objBloqueioGen.iFilialEmpresa, objBloqueioGen.lCodigo, objBloqueioGen.iTipoDeBloqueio, DATA_NULA)
        End If
    Else
        If objMapBloqGen.iTabelaBloqPossuiTipoTela = MARCADO Then
            lErro = Comando_ExecutarPos(alComando(1), sSelect, 0, iSequencial, objBloqueioGen.lCodigo, objBloqueioGen.iTipoDeBloqueio, DATA_NULA, objMapBloqGen.iTipoTelaBloqueio)
        Else
            lErro = Comando_ExecutarPos(alComando(1), sSelect, 0, iSequencial, objBloqueioGen.lCodigo, objBloqueioGen.iTipoDeBloqueio, DATA_NULA)
        End If
    End If
    If lErro <> AD_SQL_SUCESSO Then gError 198357

    'Lê o bloqueio
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 198358

    'Se encontrou o bloqueio
    If lErro = AD_SQL_SUCESSO Then

        'Loca o bloqueio
        lErro = Comando_LockExclusive(alComando(1))
        If lErro <> AD_SQL_SUCESSO Then gError 198359

        objBloqueioGen.iFilialEmpresa = giFilialEmpresa
        objBloqueioGen.iSequencial = iSequencial

        objTipoBloqGen.iCodigo = objBloqueioGen.iTipoDeBloqueio
        objTipoBloqGen.iTipoTelaBloqueio = objMapBloqGen.iTipoTelaBloqueio
        
        lErro = CF("TiposDeBloqueioGen_Le", objTipoBloqGen)
        If lErro <> SUCESSO And lErro <> ERRO_LEITURA_SEM_DADOS Then gError 198360
        
        If objTipoBloqGen.iBloqueioTotal = MARCADO Then

            'Verifica quais são os possíveis bloqueios de reserva e verifica se tem que inserir
            lErro = CF("TiposDeBloqueioGen_Le_TipoTela", objMapBloqGen.iTipoTelaBloqueio, colTipoBloqReserva, True)
            If lErro <> SUCESSO Then gError 198516
            
            Set colBloqueios = New Collection
            
            Set objDocBloq = CreateObject(objMapBloqGen.sProjetoClasseDocBloq & "." & objMapBloqGen.sNomeClasseDocBloq)
        
            'Passa os dados do Bloqueio para o Obj
            If objMapBloqGen.iClassePossuiFilEmp = MARCADO Then
                objDocBloq.iFilialEmpresa = giFilialEmpresa
            End If
            
            Call CallByName(objDocBloq, objMapBloqGen.sNomeBrowseChave, VbLet, objBloqueioGen.lCodigo)

            'Lê o Documento
            lErro = CF(objMapBloqGen.sNomeFuncLeDoc, objDocBloq)
            If lErro <> SUCESSO Then gError 198517
            
            dValor = CallByName(objDocBloq, objMapBloqGen.sClasseDocNomeValor, VbGet)
            
            objBloqueioGen.dValorDoc = dValor
            
            For Each objTipoBloqReserva In colTipoBloqReserva
            
                lErro = CF(objTipoBloqReserva.sNomeFuncGeraTipo, objBloqueioGen.iTipoTelaBloqueio, objTipoBloqReserva.iCodigo, objBloqueioGen.iFilialEmpresa, objBloqueioGen.lCodigo, objBloqueioGen.lClienteDoc, objBloqueioGen.dValorDoc, objDocBloq, colBloqueios)
                If lErro <> SUCESSO Then gError 198518
            
            Next
            
            lErro = BloqueiosGen_Grava(colBloqueios)
            If lErro <> SUCESSO Then gError 198519
            
        End If

        'Verifica se tem que chamar alguma função específica para liberação
        If Len(Trim(objTipoBloqGen.sNomeFuncTrataTipo)) > 0 Then
            
            lErro = CF(objTipoBloqGen.sNomeFuncTrataTipo, objMapBloqGen, objBloqueioGen)
            If lErro <> SUCESSO Then gError 198361
        
        End If
        
        'Verifica se tem que chamar alguma função genérica customizada
        If Len(Trim(objMapBloqGen.sNomeFuncLiberaCust)) > 0 Then
            
            lErro = CF(objMapBloqGen.sNomeFuncLiberaCust, objMapBloqGen, objTipoBloqGen, objBloqueioGen)
            If lErro <> SUCESSO Then gError 198362
        
        End If
        
        lErro = BloqueioGen_Libera_Atualiza(alComando(1), alComando(2), objBloqueioGen, objMapBloqGen)
        If lErro <> SUCESSO Then gError 198363
        
    End If

    BloqueioGen_Libera_EmTrans = SUCESSO

    Exit Function

Erro_BloqueioGen_Libera_EmTrans:

    BloqueioGen_Libera_EmTrans = gErr

    Select Case gErr

        Case 198357, 198358
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BLOQUEIOGEN", gErr, objBloqueioGen.iFilialEmpresa, objBloqueioGen.lCodigo, objBloqueioGen.iTipoDeBloqueio)

        Case 198359
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_BLOQUEIOGEN", gErr, objBloqueioGen.iFilialEmpresa, objBloqueioGen.lCodigo, iSequencial)

        Case 198360 To 198363, 198516 To 198519

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 198364)

    End Select
    
    Exit Function

End Function

Private Function BloqueioGen_Libera_Atualiza(ByVal lComando1 As Long, ByVal lComando2 As Long, ByVal objBloqueioGen As ClassBloqueioGen, ByVal objMapBloqGen As ClassMapeamentoBloqGen) As Long
'grava as liberações de bloqueio

Dim lErro As Long

On Error GoTo Erro_BloqueioGen_Libera_Atualiza

    'Atualiza o Bloqueio
    lErro = Comando_ExecutarPos(lComando2, "UPDATE " & objMapBloqGen.sNomeTabelaBloqueios & " SET CodUsuarioLib = ? , ResponsavelLib = ?, DataLib = ?, Observacao = ?", lComando1, objBloqueioGen.sCodUsuarioLib, objBloqueioGen.sResponsavelLib, objBloqueioGen.dtDataLib, objBloqueioGen.sObservacao)
    If lErro <> AD_SQL_SUCESSO Then gError 198365

    BloqueioGen_Libera_Atualiza = SUCESSO

    Exit Function

Erro_BloqueioGen_Libera_Atualiza:

    BloqueioGen_Libera_Atualiza = gErr

    Select Case gErr

        Case 198365
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_BLOQUEIOGEN", gErr, objBloqueioGen.iFilialEmpresa, objBloqueioGen.lCodigo, objBloqueioGen.iSequencial)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 198366)

    End Select

    Exit Function

End Function

Public Function BloqueiosGen_AtualizaObsBloq(ByVal objMapBloqGen As ClassMapeamentoBloqGen, ByVal colBloqueios As Collection) As Long

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_BloqueiosGen_AtualizaObsBloq

    'Inicia a transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 198441
    
    lErro = BloqueiosGen_AtualizaObsBloq_EmTrans(objMapBloqGen, colBloqueios)
    If lErro <> SUCESSO Then gError 198442

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 198448

    BloqueiosGen_AtualizaObsBloq = SUCESSO

    Exit Function

Erro_BloqueiosGen_AtualizaObsBloq:

    BloqueiosGen_AtualizaObsBloq = gErr

    Select Case gErr

        Case 198441
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 198442

        Case 198448
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 198449)

    End Select

    Call Transacao_Rollback

End Function

Public Function BloqueiosGen_AtualizaObsBloq_EmTrans(ByVal objMapBloqGen As ClassMapeamentoBloqGen, ByVal colBloqueios As Collection) As Long

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim sSelect As String
Dim objBloqueioGen As ClassBloqueioGen
Dim tBloqueioGen As typeBloqueioGen
Dim lCodigo As Long
Dim iIndice As Integer

On Error GoTo Erro_BloqueiosGen_AtualizaObsBloq_EmTrans
    
    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 198442
    Next

    For Each objBloqueioGen In colBloqueios
    
        sSelect = "SELECT " & objMapBloqGen.sTabelaNomeCampoChave & " FROM " & objMapBloqGen.sNomeTabelaBloqueios
        sSelect = sSelect & " WHERE " & objMapBloqGen.sTabelaNomeCampoChave & " = ? AND Sequencial = ? "
        
        If objMapBloqGen.iClassePossuiFilEmp = MARCADO Then
            sSelect = sSelect & " AND FilialEmpresa = " & CStr(objBloqueioGen.iFilialEmpresa)
        End If
        
        If objMapBloqGen.iTabelaBloqPossuiTipoTela = MARCADO Then
            sSelect = sSelect & " AND TipoTelaBloqueio = " & CStr(objMapBloqGen.iTipoTelaBloqueio)
        End If
    
        'Le a tabelaMapeamentoBloqGen
        With tBloqueioGen
            lErro = Comando_ExecutarPos(alComando(0), sSelect, 0, lCodigo, objBloqueioGen.lCodigo, objBloqueioGen.iSequencial)
        End With
        If lErro <> AD_SQL_SUCESSO Then gError 198443
    
        'Busca Primeiro
        lErro = Comando_BuscarPrimeiro(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 198444
    
        'Sem Dados
        If lErro = AD_SQL_SEM_DADOS Then gError 198445
           
        'Loca o bloqueio
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 198446

        lErro = Comando_ExecutarPos(alComando(1), "UPDATE " & objMapBloqGen.sNomeTabelaBloqueios & " SET Observacao = ?", alComando(0), objBloqueioGen.sObservacao)
        If lErro <> AD_SQL_SUCESSO Then gError 198447
        
    Next
    
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    BloqueiosGen_AtualizaObsBloq_EmTrans = SUCESSO

    Exit Function

Erro_BloqueiosGen_AtualizaObsBloq_EmTrans:

    BloqueiosGen_AtualizaObsBloq_EmTrans = gErr

    Select Case gErr

        Case 198442
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 198443, 198444
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BLOQUEIOGEN", gErr)

        Case 198445
            Call Rotina_Erro(vbOKOnly, "ERRO_BLOQUEIOGEN_NAO_CADASTRADO", gErr, objMapBloqGen.iTipoTelaBloqueio, objBloqueioGen.lCodigo, objBloqueioGen.iFilialEmpresa, objBloqueioGen.iSequencial)

        Case 198446
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_BLOQUEIOGEN", gErr)

        Case 198447
            Call Rotina_Erro(vbOKOnly, "ERRO_UPDATE_BLOQUEIOGEN", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 198449)

    End Select

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

End Function

Public Function BloqueiosGen_Gera(ByVal iTipoTela As Integer, ByVal objDocBloq As Object) As Long
'Insere o novo Pedido de Venda no Banco de Dados

Dim lErro As Long
Dim objBloqueioGen As ClassBloqueioGen
Dim iIndice As Integer
Dim lCliente As Long
Dim lCodigo As Long
Dim dValor As Double
Dim colBloqueios As Collection
Dim objMapBloqGen As New ClassMapeamentoBloqGen
Dim objTiposDeBloqueioGen As ClassTiposDeBloqueioGen
Dim colTipoBloq As New Collection
Dim iFilialEmpresa As Integer

On Error GoTo Erro_BloqueiosGen_Gera

    objMapBloqGen.iTipoTelaBloqueio = iTipoTela
    
    lErro = CF("MapeamentoBloqGen_Le", objMapBloqGen)
    If lErro <> SUCESSO Then gError 198450

    lCliente = objDocBloq.lCliente
    lCodigo = CallByName(objDocBloq, objMapBloqGen.sClasseNomeCampoChave, VbGet)
    Set colBloqueios = ColecaoDef_Trans_Collection(CallByName(objDocBloq, objMapBloqGen.sNomeColecaoBloqDoc, VbGet))
    dValor = CallByName(objDocBloq, objMapBloqGen.sClasseDocNomeValor, VbGet)
    
    If objMapBloqGen.iClassePossuiFilEmp = MARCADO Then
        iFilialEmpresa = objDocBloq.iFilialEmpresa
    Else
        iFilialEmpresa = EMPRESA_TODA
    End If

     'Para cada Bloqueio do Pedido
    For iIndice = colBloqueios.Count To 1 Step -1
        Set objBloqueioGen = colBloqueios.Item(iIndice)
        If objBloqueioGen.dtDataLib <> DATA_NULA Then
            colBloqueios.Remove iIndice
        End If
    Next
    
    lErro = CF("TiposDeBloqueioGen_Le_TipoTela", iTipoTela, colTipoBloq)
    If lErro <> SUCESSO Then gError 198451

    For Each objTiposDeBloqueioGen In colTipoBloq
        
        If Len(Trim(objTiposDeBloqueioGen.sNomeFuncGeraTipo)) > 0 Then
        
            'Inclui no BD um bloqueio de dias de atraso, se necessario
            lErro = CF(objTiposDeBloqueioGen.sNomeFuncGeraTipo, iTipoTela, objTiposDeBloqueioGen.iCodigo, lCodigo, iFilialEmpresa, lCliente, dValor, objDocBloq, colBloqueios)
            If lErro <> SUCESSO Then gError 198452
            
        End If
    
    Next
    
    For Each objBloqueioGen In colBloqueios
        objBloqueioGen.dValorDoc = dValor
        objBloqueioGen.iFilialEmpresa = iFilialEmpresa
        objBloqueioGen.lCodigo = lCodigo
    Next
    
    'Insere no BD os Bloqueios
    lErro = BloqueiosGen_Grava(colBloqueios)
    If lErro <> SUCESSO Then gError 198453
    
    BloqueiosGen_Gera = SUCESSO

    Exit Function

Erro_BloqueiosGen_Gera:

    BloqueiosGen_Gera = gErr

    Select Case gErr

        Case 198450 To 198453

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 198454)

    End Select

    Exit Function

End Function

Public Function BloqueioGenDiasAtraso_Adiciona(ByVal iTipoTela As Integer, ByVal iTipoBloq As Integer, ByVal lCodigo As Long, ByVal iFilialEmpresa As Integer, ByVal lCliente As Long, ByVal dValorDoc As Double, ByVal objDocBloq As Object, ByVal colBloqueios As Collection, Optional ByVal sObservacao As String) As Long
'Inclui no BD um bloqueio de Dias de Atraso, se o cliente não tiver parcelapag em aberto com vcto anterior ou igual a
'gdtDataHoje - gobjCRFAT.iDiasAtraso

Dim lErro As Long
Dim lComando As Long
Dim dtDataLimite As Date
Dim lNumIntDoc As Long
Dim objBloqueioGen As ClassBloqueioGen

On Error GoTo Erro_BloqueioGenDiasAtraso_Adiciona

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 198455
    
    'Verifica a data limite p/ atraso de uma parcela antes do bloqueio por atraso. Retorna DATA_NULA caso a empresa não use o Bloqueio por atraso.
    lErro = CF("Verifica_DataLimite_Bloqueio_Atraso", dtDataLimite)
    If lErro <> SUCESSO Then gError 198456
    
    If dtDataLimite <> DATA_NULA Then
    
        If iFilialEmpresa > 50 Then
            'Seleciona parcelasrec do Cliente recebido em objPedidoVenda que esteja em atraso de acordo com os dias máximos p/ atraso definido p/ Bloqueios por atraso de pagamento.
            lErro = Comando_Executar(lComando, "SELECT ParcelasRec.NumIntDoc FROM ParcelasRec, TitulosRec WHERE ParcelasRec.NumIntTitulo = TitulosRec.NumIntDoc AND ParcelasRec.Status <> ? AND ParcelasRec.Status <> ? AND ParcelasRec.DataVencimentoReal <= ? AND TitulosRec.Cliente = ? AND TitulosRec.FilialEmpresa > 50", lNumIntDoc, STATUS_EXCLUIDO, STATUS_BAIXADO, dtDataLimite, lCliente)
        Else
            'Seleciona parcelasrec do Cliente recebido em objPedidoVenda que esteja em atraso de acordo com os dias máximos p/ atraso definido p/ Bloqueios por atraso de pagamento.
            lErro = Comando_Executar(lComando, "SELECT ParcelasRec.NumIntDoc FROM ParcelasRec, TitulosRec WHERE ParcelasRec.NumIntTitulo = TitulosRec.NumIntDoc AND ParcelasRec.Status <> ? AND ParcelasRec.Status <> ? AND ParcelasRec.DataVencimentoReal <= ? AND TitulosRec.Cliente = ?", lNumIntDoc, STATUS_EXCLUIDO, STATUS_BAIXADO, dtDataLimite, lCliente)
        End If
        If lErro <> SUCESSO Then gError 198457
        
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 198458
        
        'se existe pelo menos uma parcela em atraso
        If lErro = SUCESSO Then
        
            Set objBloqueioGen = New ClassBloqueioGen
            
            objBloqueioGen.iTipoDeBloqueio = iTipoBloq
            objBloqueioGen.lCodigo = lCodigo
            objBloqueioGen.iFilialEmpresa = giFilialEmpresa
            objBloqueioGen.sResponsavel = BLOQUEIO_AUTO_RESP
            objBloqueioGen.sCodUsuario = gsUsuario
            objBloqueioGen.dtData = gdtDataHoje
            objBloqueioGen.dtDataEmissaoDoc = DATA_NULA
            objBloqueioGen.dtDataLib = DATA_NULA
            objBloqueioGen.iTipoTelaBloqueio = iTipoTela
            objBloqueioGen.sObservacao = sObservacao
    
            colBloqueios.Add objBloqueioGen
    
        End If
    
    End If
    
    Call Comando_Fechar(lComando)
    
    BloqueioGenDiasAtraso_Adiciona = SUCESSO
     
    Exit Function
    
Erro_BloqueioGenDiasAtraso_Adiciona:

    BloqueioGenDiasAtraso_Adiciona = gErr
     
    Select Case gErr
  
        Case 198455
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
  
        Case 198456
        
        Case 198457, 198458
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELASREC", gErr)
                   
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 198459)
     
    End Select
     
    Call Comando_Fechar(lComando)
     
    Exit Function
    
End Function

Public Function BloqueioGenCredito_Adiciona(ByVal iTipoTela As Integer, ByVal iTipoBloq As Integer, ByVal lCodigo As Long, ByVal iFilialEmpresa As Integer, ByVal lCliente As Long, ByVal dValorDoc As Double, ByVal objDocBloq As Object, ByVal colBloqueios As Collection, Optional ByVal sObservacao As String) As Long
'Inclui no BD um bloqueio de Credito, se o cliente não tiver crédito

Dim lComando As Long
Dim lErro As Long
Dim dValorPedido As Double
Dim tCliente As typeCliente
Dim objClienteEstatistica As New ClassFilialClienteEst
Dim objCliente As New ClassCliente
Dim objBloqueioGen As ClassBloqueioGen

On Error GoTo Erro_BloqueioGenCredito_Adiciona

    objCliente.lCodigo = lCliente
    
    'le os dados do cliente
    lErro = CF("Cliente_Le", objCliente)
    If lErro <> SUCESSO And lErro <> 12293 Then gError 198460
    
    If objCliente.iAtivo <> CLIENTE_ATIVO Then gError 198461
    
    'verifica se eh para criar ou nao bloqueio de limite de credito
    If gobjCRFAT.iCreditoVerificaLimite = VERIFICAR_LIMITE_CREDITO Then
    
        'Abre os comandos
        lComando = Comando_Abrir()
        If lComando = 0 Then gError 198462
    
        dValorPedido = dValorDoc
    
        'Lê os saldos e o limite de credito do Cliente
        lErro = Comando_ExecutarPos(lComando, "SELECT LimiteCredito, Bloqueado FROM Clientes WHERE Codigo = ?", 0, tCliente.dLimiteCredito, tCliente.iBloqueado, lCliente)
        If lErro <> AD_SQL_SUCESSO Then gError 198463
    
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 198464
        If lErro = AD_SQL_SEM_DADOS Then gError 198465 'Não encontrou
    
        'Faz o lock do Cliente
        lErro = Comando_LockExclusive(lComando)
        If lErro <> AD_SQL_SUCESSO Then gError 198466
        
        objClienteEstatistica.lCodCliente = lCliente
        objClienteEstatistica.iFilialEmpresa = giFilialEmpresa
        
        'Le dinamicamente o Saldo dos Titulos e dos Pedidos Liberados
        lErro = CF("Cliente_Le_Estatistica_Credito", objClienteEstatistica)
        If lErro <> SUCESSO Then gError 198467
            
        'Verifica se a Soma dos Titulos, Pedidos, NFs não faturadas e valor do Pedido ultrapassa o limite do Cliente
        If tCliente.iBloqueado <> 0 Or (tCliente.dLimiteCredito < (objClienteEstatistica.dSaldoTitulos + objClienteEstatistica.dSaldoPedidosLiberados + objClienteEstatistica.dValorNFsNaoFaturadas + dValorPedido)) Then
        
            Set objBloqueioGen = New ClassBloqueioGen
            
            objBloqueioGen.iTipoDeBloqueio = iTipoBloq
            objBloqueioGen.lCodigo = lCodigo
            objBloqueioGen.iFilialEmpresa = giFilialEmpresa
            objBloqueioGen.sResponsavel = BLOQUEIO_AUTO_RESP
            objBloqueioGen.sCodUsuario = gsUsuario
            objBloqueioGen.dtData = gdtDataHoje
            objBloqueioGen.dtDataEmissaoDoc = DATA_NULA
            objBloqueioGen.dtDataLib = DATA_NULA
            objBloqueioGen.iTipoTelaBloqueio = iTipoTela
            objBloqueioGen.sObservacao = sObservacao
            
            colBloqueios.Add objBloqueioGen
            
        End If
    
        'Fecha os comandos
        Call Comando_Fechar(lComando)
        
    End If

    BloqueioGenCredito_Adiciona = SUCESSO

    Exit Function

Erro_BloqueioGenCredito_Adiciona:

    BloqueioGenCredito_Adiciona = gErr

    Select Case gErr

        Case 198460, 198467

        Case 198461
            Call Rotina_Erro(vbOKOnly, "ERRO_CLIENTE_INATIVO", gErr, lCliente)

        Case 198462
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 198463, 198464
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CLIENTES", gErr)

        Case 198465
            Call Rotina_Erro(vbOKOnly, "ERRO_CLIENTE_NAO_CADASTRADO", gErr, lCliente)

        Case 198466
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CLIENTES", gErr, lCliente)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 198468)

    End Select

    'Fecha os comandos
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function BloqueioGenReserva_Adiciona(ByVal iTipoTela As Integer, ByVal iTipoBloq As Integer, ByVal lCodigo As Long, ByVal iFilialEmpresa As Integer, ByVal lCliente As Long, ByVal dValorDoc As Double, ByVal objDocBloq As Object, ByVal colBloqueios As Collection, Optional ByVal sObservacao As String) As Long
'Adiciona um bloqueio BLOQUEIO_PARCIAL ou BLOQUEIO_NAO_RESERVA ao Pedido de Vennda

Dim lErro As Long
Dim dQuantidade As Double
Dim dReservada As Double
Dim dFaltaReservar As Double
Dim sUM As String
Dim dFator As Double
Dim sProduto As String
Dim objBloqueioGen As ClassBloqueioGen
Dim objMapBloqGen As New ClassMapeamentoBloqGen
Dim objProduto As ClassProduto
Dim colItens As New Collection
Dim objItem As Object
Dim dReservado As Double

On Error GoTo Erro_BloqueioGenReserva_Adiciona

    objMapBloqGen.iTipoTelaBloqueio = iTipoTela
    
    lErro = CF("MapeamentoBloqGen_Le", objMapBloqGen)
    If lErro <> SUCESSO Then gError 198469
    
    If objMapBloqGen.iClasseDocQTDNoItem = DESMARCADO Then
    
        Set objProduto = New ClassProduto
        
        dQuantidade = CallByName(objDocBloq, objMapBloqGen.sClasseDocNomeQTD, VbGet)
        dReservada = CallByName(objDocBloq, objMapBloqGen.sClasseDocNomeQTDReservada, VbGet)
        sUM = CallByName(objDocBloq, objMapBloqGen.sClasseDocNomeUM, VbGet)
        sProduto = CallByName(objDocBloq, objMapBloqGen.sClasseDocNomeProduto, VbGet)
        
        'Lê o Produto
        objProduto.sCodigo = sProduto
        
        lErro = CF("Produto_Le", objProduto)
        If lErro <> SUCESSO And lErro <> 28030 Then gError 198470
        If lErro = 28030 Then gError 198471
    
        'Calcula o fator de conversão de UM de Venda para UM de Estoque
        lErro = CF("UM_Conversao", objProduto.iClasseUM, sUM, objProduto.sSiglaUMEstoque, dFator)
        If lErro <> SUCESSO Then gError 198472
        
        If objProduto.iControleEstoque = PRODUTO_CONTROLE_RESERVA Then
            dFaltaReservar = (dQuantidade * dFator) - dReservada
            dReservado = dReservada
        End If
        
    Else
    
        Set colItens = ColecaoDef_Trans_Collection(CallByName(objDocBloq, objMapBloqGen.sClasseDocNomeColItem, VbGet))
    
        For Each objItem In colItens
        
            Set objProduto = New ClassProduto
  
            dQuantidade = CallByName(objItem, objMapBloqGen.sClasseDocNomeQTD, VbGet)
            dReservada = CallByName(objItem, objMapBloqGen.sClasseDocNomeQTDReservada, VbGet)
            sUM = CallByName(objItem, objMapBloqGen.sClasseDocNomeUM, VbGet)
            sProduto = CallByName(objItem, objMapBloqGen.sClasseDocNomeProduto, VbGet)
            
            'Lê o Produto
            objProduto.sCodigo = sProduto
            
            lErro = CF("Produto_Le", objProduto)
            If lErro <> SUCESSO And lErro <> 28030 Then gError 198473
            If lErro = 28030 Then gError 198474
        
            'Calcula o fator de conversão de UM de Venda para UM de Estoque
            lErro = CF("UM_Conversao", objProduto.iClasseUM, sUM, objProduto.sSiglaUMEstoque, dFator)
            If lErro <> SUCESSO Then gError 198475
    
            If objProduto.iControleEstoque = PRODUTO_CONTROLE_RESERVA Then
                
                'Acumula a quantidade que falta reserva ao Pedido
                dFaltaReservar = dFaltaReservar + (dQuantidade * dFator) - dReservada
                dReservado = dReservado + dReservada
            End If
        
        Next
        
    End If

    'Se a quantidade que falta a reservar do pedido for positiva
    If dFaltaReservar > 0 Then
        'Se a quantidade reservada do Pedido for positiva
        If dReservado = 0 Then
            Set objBloqueioGen = New ClassBloqueioGen
            
            objBloqueioGen.iTipoDeBloqueio = iTipoBloq
            objBloqueioGen.lCodigo = lCodigo
            objBloqueioGen.iFilialEmpresa = giFilialEmpresa
            objBloqueioGen.sResponsavel = BLOQUEIO_AUTO_RESP
            objBloqueioGen.sCodUsuario = gsUsuario
            objBloqueioGen.dtData = gdtDataHoje
            objBloqueioGen.dtDataEmissaoDoc = DATA_NULA
            objBloqueioGen.dtDataLib = DATA_NULA
            objBloqueioGen.iTipoTelaBloqueio = iTipoTela
            objBloqueioGen.sObservacao = sObservacao
    
            colBloqueios.Add objBloqueioGen
        End If
            
    End If

    BloqueioGenReserva_Adiciona = SUCESSO

    Exit Function

Erro_BloqueioGenReserva_Adiciona:

    BloqueioGenReserva_Adiciona = gErr

    Select Case gErr

        Case 198469, 198470, 198472, 198473, 198475

        Case 198471, 198474
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_INEXISTENTE", gErr, objProduto.sCodigo)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 198476)

    End Select

    Exit Function

End Function

Function BloqueioGenReservaParc_Adiciona(ByVal iTipoTela As Integer, ByVal iTipoBloq As Integer, ByVal lCodigo As Long, ByVal iFilialEmpresa As Integer, ByVal lCliente As Long, ByVal dValorDoc As Double, ByVal objDocBloq As Object, ByVal colBloqueios As Collection, Optional ByVal sObservacao As String) As Long
'Adiciona um bloqueio BLOQUEIO_PARCIAL ou BLOQUEIO_NAO_RESERVA ao Pedido de Vennda

Dim lErro As Long
Dim dQuantidade As Double
Dim dReservada As Double
Dim dFaltaReservar As Double
Dim sUM As String
Dim dFator As Double
Dim sProduto As String
Dim objBloqueioGen As ClassBloqueioGen
Dim objMapBloqGen As New ClassMapeamentoBloqGen
Dim objProduto As ClassProduto
Dim colItens As New Collection
Dim objItem As Object
Dim dReservado As Double

On Error GoTo Erro_BloqueioGenReservaParc_Adiciona

    objMapBloqGen.iTipoTelaBloqueio = iTipoTela
    
    lErro = CF("MapeamentoBloqGen_Le", objMapBloqGen)
    If lErro <> SUCESSO Then gError 198477
    
    If objMapBloqGen.iClasseDocQTDNoItem = DESMARCADO Then
    
        Set objProduto = New ClassProduto
        
        dQuantidade = CallByName(objDocBloq, objMapBloqGen.sClasseDocNomeQTD, VbGet)
        dReservada = CallByName(objDocBloq, objMapBloqGen.sClasseDocNomeQTDReservada, VbGet)
        sUM = CallByName(objDocBloq, objMapBloqGen.sClasseDocNomeUM, VbGet)
        sProduto = CallByName(objDocBloq, objMapBloqGen.sClasseDocNomeProduto, VbGet)
        
        'Lê o Produto
        objProduto.sCodigo = sProduto
        
        lErro = CF("Produto_Le", objProduto)
        If lErro <> SUCESSO And lErro <> 28030 Then gError 198478
        If lErro = 28030 Then gError 198479
    
        'Calcula o fator de conversão de UM de Venda para UM de Estoque
        lErro = CF("UM_Conversao", objProduto.iClasseUM, sUM, objProduto.sSiglaUMEstoque, dFator)
        If lErro <> SUCESSO Then gError 198480
        
        If objProduto.iControleEstoque = PRODUTO_CONTROLE_RESERVA Then
            dFaltaReservar = (dQuantidade * dFator) - dReservada
            dReservado = dReservada
        End If
        
    Else
    
        Set colItens = ColecaoDef_Trans_Collection(CallByName(objDocBloq, objMapBloqGen.sClasseDocNomeColItem, VbGet))
    
        For Each objItem In colItens
        
            Set objProduto = New ClassProduto
  
            dQuantidade = CallByName(objItem, objMapBloqGen.sClasseDocNomeQTD, VbGet)
            dReservada = CallByName(objItem, objMapBloqGen.sClasseDocNomeQTDReservada, VbGet)
            sUM = CallByName(objItem, objMapBloqGen.sClasseDocNomeUM, VbGet)
            sProduto = CallByName(objItem, objMapBloqGen.sClasseDocNomeProduto, VbGet)
            
            'Lê o Produto
            objProduto.sCodigo = sProduto
            
            lErro = CF("Produto_Le", objProduto)
            If lErro <> SUCESSO And lErro <> 28030 Then gError 198481
            If lErro = 28030 Then gError 198482
        
            'Calcula o fator de conversão de UM de Venda para UM de Estoque
            lErro = CF("UM_Conversao", objProduto.iClasseUM, sUM, objProduto.sSiglaUMEstoque, dFator)
            If lErro <> SUCESSO Then gError 198483
    
            If objProduto.iControleEstoque = PRODUTO_CONTROLE_RESERVA Then
                
                'Acumula a quantidade que falta reserva ao Pedido
                dFaltaReservar = dFaltaReservar + (dQuantidade * dFator) - dReservada
                dReservado = dReservado + dReservada
            End If
        
        Next
        
    End If

    'Se a quantidade que falta a reservar do pedido for positiva
    If dFaltaReservar > 0 Then
    
        'Se a quantidade reservada do Pedido for positiva
        If dReservado > 0 Then
        
            Set objBloqueioGen = New ClassBloqueioGen
            
            objBloqueioGen.iTipoDeBloqueio = iTipoBloq
            objBloqueioGen.lCodigo = lCodigo
            objBloqueioGen.iFilialEmpresa = giFilialEmpresa
            objBloqueioGen.sResponsavel = BLOQUEIO_AUTO_RESP
            objBloqueioGen.sCodUsuario = gsUsuario
            objBloqueioGen.dtData = gdtDataHoje
            objBloqueioGen.dtDataEmissaoDoc = DATA_NULA
            objBloqueioGen.dtDataLib = DATA_NULA
            objBloqueioGen.iTipoTelaBloqueio = iTipoTela
            objBloqueioGen.sObservacao = sObservacao
    
            colBloqueios.Add objBloqueioGen
        End If
            
    End If

    BloqueioGenReservaParc_Adiciona = SUCESSO

    Exit Function

Erro_BloqueioGenReservaParc_Adiciona:

    BloqueioGenReservaParc_Adiciona = gErr

    Select Case gErr

        Case 198477, 198478, 198480, 198481, 198483

        Case 198479, 198482
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_INEXISTENTE", gErr, objProduto.sCodigo)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 198484)

    End Select

    Exit Function

End Function

Private Function BloqueiosGen_Grava(ByVal colBloqueios As Collection) As Long
'Insere no BD os Bloqueios do Pedido de Venda

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim objBloqueioGen As ClassBloqueioGen
Dim iSequencial As Integer

On Error GoTo Erro_BloqueiosGen_Grava

    If colBloqueios.Count > 0 Then

        'Abre os comandos
        For iIndice = LBound(alComando) To UBound(alComando)
            alComando(iIndice) = Comando_Abrir()
            If alComando(iIndice) = 0 Then gError 198485
        Next
    
        For Each objBloqueioGen In colBloqueios
            Exit For
        Next
    
        lErro = Comando_ExecutarPos(alComando(0), "SELECT Sequencial FROM BloqueiosGen WHERE TipoTelaBloqueio = ? AND Codigo = ? AND (FilialEmpresa = ? OR FilialEmpresa = ?) ORDER BY Sequencial DESC", 0, iSequencial, objBloqueioGen.iTipoTelaBloqueio, objBloqueioGen.lCodigo, objBloqueioGen.iFilialEmpresa, EMPRESA_TODA)
        If lErro <> AD_SQL_SUCESSO Then gError 198486
    
        'Lê o bloqueio
        lErro = Comando_BuscarPrimeiro(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 198487
    
        'Se encontrou o bloqueio
        If lErro = AD_SQL_SUCESSO Then
    
            'Loca o bloqueio
            lErro = Comando_LockExclusive(alComando(0))
            If lErro <> AD_SQL_SUCESSO Then gError 198488
            
        End If
    
         'Para cada Bloqueio do Pedido
        For Each objBloqueioGen In colBloqueios
    
            iSequencial = iSequencial + 1
    
            'Atribui Sequencial ANTES de INSERIR
            objBloqueioGen.iSequencial = iSequencial
    
            'Insere o bloqueio na tabela de Bloqueios de Pedido de Venda
            lErro = Comando_Executar(alComando(1), "INSERT INTO BloqueiosGen (TipoTelaBloqueio, FilialEmpresa,Codigo,Sequencial,TipoDeBloqueio,CodUsuario,Responsavel,Data,CodUsuarioLib,ResponsavelLib,DataLib,Observacao, ValorDocAnt) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", objBloqueioGen.iTipoTelaBloqueio, objBloqueioGen.iFilialEmpresa, objBloqueioGen.lCodigo, objBloqueioGen.iSequencial, objBloqueioGen.iTipoDeBloqueio, objBloqueioGen.sCodUsuario, objBloqueioGen.sResponsavel, objBloqueioGen.dtData, objBloqueioGen.sCodUsuarioLib, objBloqueioGen.sResponsavelLib, objBloqueioGen.dtDataLib, objBloqueioGen.sObservacao, objBloqueioGen.dValorDoc)
            If lErro <> AD_SQL_SUCESSO Then gError 198489
    
        Next
         
        'Fecha o comando
        For iIndice = LBound(alComando) To UBound(alComando)
            Call Comando_Fechar(alComando(iIndice))
        Next
    
    End If
    
    BloqueiosGen_Grava = SUCESSO

    Exit Function

Erro_BloqueiosGen_Grava:

    BloqueiosGen_Grava = gErr

    Select Case gErr

        Case 198485
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 198486, 198487
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BLOQUEIOGEN2", gErr)

        Case 198488
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_BLOQUEIOGEN2", gErr)

        Case 198489
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_BLOQUEIOGEN", gErr, objBloqueioGen.iTipoTelaBloqueio, objBloqueioGen.iFilialEmpresa, objBloqueioGen.lCodigo, iSequencial)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 198490)

    End Select

    'Fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Public Function BloqueiosGen_Altera(ByVal iTipoTela As Integer, ByVal objDocBloq As Object) As Long
'Insere o novo Pedido de Venda no Banco de Dados

Dim lErro As Long
Dim objBloqueioGen As ClassBloqueioGen
Dim iIndice As Integer
Dim lCliente As Long
Dim lCodigo As Long
Dim dValor As Double
Dim colBloqueios As Collection
Dim objMapBloqGen As New ClassMapeamentoBloqGen
Dim objTiposDeBloqueioGen As ClassTiposDeBloqueioGen
Dim colTipoBloq As New Collection
Dim iFilialEmpresa As Integer
Dim colBloqBD As New Collection
Dim iLiberado As Integer
Dim dValorDocAnt As Double
Dim iRefazBloqueio As Integer
Dim sObservacao As String

On Error GoTo Erro_BloqueiosGen_Altera

    objMapBloqGen.iTipoTelaBloqueio = iTipoTela
    
    lErro = CF("MapeamentoBloqGen_Le", objMapBloqGen)
    If lErro <> SUCESSO Then gError 198495

    lCliente = objDocBloq.lCliente
    lCodigo = CallByName(objDocBloq, objMapBloqGen.sClasseNomeCampoChave, VbGet)
    Set colBloqueios = ColecaoDef_Trans_Collection(CallByName(objDocBloq, objMapBloqGen.sNomeColecaoBloqDoc, VbGet))
    dValor = CallByName(objDocBloq, objMapBloqGen.sClasseDocNomeValor, VbGet)
    
    If objMapBloqGen.iClassePossuiFilEmp = MARCADO Then
        iFilialEmpresa = objDocBloq.iFilialEmpresa
    Else
        iFilialEmpresa = EMPRESA_TODA
    End If
   
    lErro = CF("TiposDeBloqueioGen_Le_TipoTela", iTipoTela, colTipoBloq)
    If lErro <> SUCESSO Then gError 198496
    
    For Each objBloqueioGen In colBloqueios
        objBloqueioGen.iTipoTelaBloqueio = iTipoTela
        objBloqueioGen.dValorDoc = dValor
        objBloqueioGen.iFilialEmpresa = iFilialEmpresa
        objBloqueioGen.lClienteDoc = lCliente
        objBloqueioGen.lCodigo = lCodigo
    Next
        
    'remove da colecao de bloqueios os que já estavam no BD
    'incluindo-os na colecao temporaria
    For Each objBloqueioGen In colBloqueios
        If objBloqueioGen.iSequencial = 0 Then Exit For
        Call colBloqBD.Add(objBloqueioGen)
        Call colBloqueios.Remove(1)
    Next
    
    'Acerta a objservação dos bloqueios
    lErro = BloqueiosGen_AtualizaObsBloq_EmTrans(objMapBloqGen, colBloqBD)
    If lErro <> SUCESSO Then gError 198497
   
    For Each objTiposDeBloqueioGen In colTipoBloq
    
        'Verifica se já liberou o bloqueio
        lErro = CF("BloqueiosGen_Liberacao_Testa", iTipoTela, objTiposDeBloqueioGen.iTipoTelaBloqueio, iFilialEmpresa, lCodigo, iLiberado, dValorDocAnt)
        If lErro <> SUCESSO Then gError 198498
    
        iRefazBloqueio = DESMARCADO
        
        'Se ainda não foi liberado refaz
        If iLiberado <> MARCADO Then
            iRefazBloqueio = MARCADO
        End If
        
        'Se tem que refazer de qualquer forma
        If objTiposDeBloqueioGen.iAlteracaoForcaInclusao = MARCADO Then
            iRefazBloqueio = MARCADO
        End If
        
        'Se tem que testar a alteração no valor
        If objTiposDeBloqueioGen.iTestaValorAlteracao = MARCADO Then
            'Se o valor do documento aumentou
            If dValorDocAnt < dValor Then
                iRefazBloqueio = MARCADO
            End If
        End If
        
        'Se o bloqueio não foi liberado ou o bloqueio é refeito com a alteração no valor ou é refeito de qualquer jeito
        If iRefazBloqueio = MARCADO Then
        
            lErro = BloqueiosGen_Exclui_Tipo(iTipoTela, objTiposDeBloqueioGen.iCodigo, iFilialEmpresa, lCodigo, sObservacao)
            If lErro <> SUCESSO Then gError 198499
            
            'Inclui no BD um bloqueio de dias de atraso, se necessario
            lErro = CF(objTiposDeBloqueioGen.sNomeFuncGeraTipo, iTipoTela, objTiposDeBloqueioGen.iCodigo, lCodigo, iFilialEmpresa, lCliente, dValor, objDocBloq, colBloqueios, sObservacao)
            If lErro <> SUCESSO Then gError 198500
        
        End If
            
    Next
 
    For Each objBloqueioGen In colBloqueios
        objBloqueioGen.dValorDoc = dValor
    Next
    
    'Insere no BD os Bloqueios do Pedido de Venda
    'Aqui o Pedido já está gravado e portanto acessivel no BD
    lErro = BloqueiosGen_Grava(colBloqueios)
    If lErro <> SUCESSO Then gError 198501
    
    BloqueiosGen_Altera = SUCESSO

    Exit Function

Erro_BloqueiosGen_Altera:

    BloqueiosGen_Altera = gErr

    Select Case gErr

        Case 198495 To 198501

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 198502)

    End Select

    Exit Function

End Function

Public Function BloqueiosGen_Liberacao_Testa(ByVal iTipoTela As Integer, ByVal iTipoBloqueio As Integer, ByVal iFilialEmpresa As Integer, ByVal lCodigo As Long, iLiberado As Integer, dValorDocAnt As Double) As Long
'Verifica se existe o Bloqueio p/ o Tipo de Bloqueio recebido como parâmetro
'Função genérica

Dim lErro As Long
Dim lComando As Long
Dim sSelect As String
Dim objMapBloqGen As New ClassMapeamentoBloqGen

On Error GoTo Erro_BloqueiosGen_Liberacao_Testa

    'Abre os comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 198491
    
    objMapBloqGen.iTipoTelaBloqueio = iTipoTela
    
    lErro = CF("MapeamentoBloqGen_Le", objMapBloqGen)
    If lErro <> SUCESSO Then gError 198495
   
    sSelect = "SELECT ValorDocAnt FROM " & objMapBloqGen.sNomeViewLeBloqueios
    sSelect = sSelect & " WHERE " & objMapBloqGen.sTabelaNomeCampoChave & " = ? AND TipoDeBloqueio = ? AND DataLib <> ?"
    
    If objMapBloqGen.iClassePossuiFilEmp = MARCADO Then
        sSelect = sSelect & " AND FilialEmpresa = " & CStr(iFilialEmpresa)
    End If
    
    If objMapBloqGen.iTabelaBloqPossuiTipoTela = MARCADO Then
        sSelect = sSelect & " AND TipoTelaBloqueio = " & CStr(iTipoTela)
    End If
    
    lErro = Comando_Executar(lComando, sSelect, dValorDocAnt, lCodigo, iTipoBloqueio, DATA_NULA)
    If lErro <> AD_SQL_SUCESSO Then gError 198492

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 198493

    iLiberado = DESMARCADO

    'se o tipo de bloqueio estiver aprovado ==> retona a flag indicativa
    If lErro = AD_SQL_SUCESSO Then iLiberado = MARCADO

    'Fecha os comandos
    Call Comando_Fechar(lComando)

    BloqueiosGen_Liberacao_Testa = SUCESSO

    Exit Function

Erro_BloqueiosGen_Liberacao_Testa:

    BloqueiosGen_Liberacao_Testa = gErr

    Select Case gErr

        Case 198491
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 198492, 198493
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BLOQUEIOGEN", gErr, iTipoTela, iFilialEmpresa, lCodigo)

        Case 198495

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 198494)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Private Function BloqueiosGen_Exclui_Tipo(ByVal iTipoTela As Integer, ByVal iTipoBloqueio As Integer, ByVal iFilialEmpresa As Integer, ByVal lCodigo As Long, sObservacao As String) As Long
'Exclui os Bloqueios do tipo recebido como parâmetro não liberados ligados ao Pedido de Venda passado
'Função Genérica

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice  As Long

On Error GoTo Erro_BloqueiosGen_Exclui_Tipo

    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 198503
    Next
    
    sObservacao = String(STRING_BLOQUEIOSPV_OBSERVACAO, 0)

    'Busca os Bloqueios de Crédito ligados ao Pedido
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Observacao FROM BloqueiosGen WHERE TipoTelaBloqueio = ? AND FilialEmpresa = ? AND Codigo = ? AND TipoDeBloqueio = ? AND DataLib = ?", 0, sObservacao, iTipoTela, iFilialEmpresa, lCodigo, iTipoBloqueio, DATA_NULA)
    If lErro <> AD_SQL_SUCESSO Then gError 198504

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 198505

    'Para cada Bloqueio encontrado
    Do While lErro <> AD_SQL_SEM_DADOS

        'Exclui o bloqueio da tabela de Bloqueios de Pedido de Venda
        lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM BloqueiosGen", alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 198506

        'Busca o próximo
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 198507

    Loop

    'Fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    BloqueiosGen_Exclui_Tipo = SUCESSO

    Exit Function

Erro_BloqueiosGen_Exclui_Tipo:

    BloqueiosGen_Exclui_Tipo = gErr

    Select Case gErr

        Case 198503
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 198504, 198505, 198507
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BLOQUEIOGEN", gErr, iTipoTela, iFilialEmpresa, lCodigo)

        Case 198506
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_BLOQUEIOGEN", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 198508)

    End Select

    'Fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function BloqueiosGen_Exclui(ByVal iTipoTela As Integer, objDocBloq As Object) As Long
'Exclui os Bloqueios do tipo recebido como parâmetro não liberados ligados ao Pedido de Venda passado
'Função Genérica

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice  As Long
Dim lCodAux As Long
Dim iFilialEmpresa As Integer
Dim lCodigo As Long
Dim objMapBloqGen As New ClassMapeamentoBloqGen

On Error GoTo Erro_BloqueiosGen_Exclui

    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 198509
    Next
    
    objMapBloqGen.iTipoTelaBloqueio = iTipoTela
    
    lErro = CF("MapeamentoBloqGen_Le", objMapBloqGen)
    If lErro <> SUCESSO Then gError 198510
    
    lCodigo = CallByName(objDocBloq, objMapBloqGen.sClasseNomeCampoChave, VbGet)
    If objMapBloqGen.iClassePossuiFilEmp = MARCADO Then
        iFilialEmpresa = objDocBloq.iFilialEmpresa
    Else
        iFilialEmpresa = EMPRESA_TODA
    End If

    'Busca os Bloqueios de Crédito ligados ao Pedido
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Codigo FROM BloqueiosGen WHERE TipoTelaBloqueio = ? AND FilialEmpresa = ? AND Codigo = ? ", 0, lCodAux, iTipoTela, iFilialEmpresa, lCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 198511

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 198512

    'Para cada Bloqueio encontrado
    Do While lErro <> AD_SQL_SEM_DADOS

        'Exclui o bloqueio da tabela de Bloqueios de Pedido de Venda
        lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM BloqueiosGen", alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 198513

        'Busca o próximo
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 198514

    Loop

    'Fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    BloqueiosGen_Exclui = SUCESSO

    Exit Function

Erro_BloqueiosGen_Exclui:

    BloqueiosGen_Exclui = gErr

    Select Case gErr

        Case 198509
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 198510

        Case 198511, 198512, 198514
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BLOQUEIOSGEN", gErr, iTipoTela, iFilialEmpresa, lCodigo)

        Case 198513
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_BLOQUEIOSGEN", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 198515)

    End Select

    'Fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function BloqueioGenCredito_Libera(ByVal objMapBloqGen As ClassMapeamentoBloqGen, ByVal objBloqueioGen As ClassBloqueioGen) As Long
'trata os bloqueios de crédito
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer
Dim objCliente As New ClassCliente
Dim objLiberacaoCredito As New ClassLiberacaoCredito
Dim objValorLiberadoCredito As New ClassValorLiberadoCredito
Dim dValorPedido As Double
Dim objClienteEstatistica As New ClassFilialClienteEst
Dim objDocBloq As Object
Dim dValorDocAnt As Double
Dim colBloqueios As New Collection
Dim objBloqueioAux As ClassBloqueioGen

On Error GoTo Erro_BloqueioGenCredito_Libera

    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 198520
    Next

     Set objDocBloq = CreateObject(objMapBloqGen.sProjetoClasseDocBloq & "." & objMapBloqGen.sNomeClasseDocBloq)

    'Passa os dados do Bloqueio para o Obj
    If objMapBloqGen.iClassePossuiFilEmp = MARCADO Then
        objDocBloq.iFilialEmpresa = giFilialEmpresa
    End If
    
    Call CallByName(objDocBloq, objMapBloqGen.sClasseNomeCampoChave, VbLet, objBloqueioGen.lCodigo)
   
    lErro = CF("BloqueiosGen_Le", objMapBloqGen, objDocBloq)
    If lErro <> SUCESSO Then gError 198533
    
    Set colBloqueios = ColecaoDef_Trans_Collection(CallByName(objDocBloq, objMapBloqGen.sNomeColecaoBloqDoc, VbGet))
    
    dValorDocAnt = 0
    For Each objBloqueioAux In colBloqueios
        If objBloqueioAux.iTipoDeBloqueio = objBloqueioGen.iTipoDeBloqueio And objBloqueioAux.dtDataLib <> DATA_NULA Then
            dValorDocAnt = dValorDocAnt + objBloqueioAux.dValorDocAnt
        End If
    Next
    
    'calcula o valor a ser liberado (Valor atual do documento menos o que já foi liberado)
    dValorPedido = objBloqueioGen.dValorDoc - dValorDocAnt
    
    If dValorPedido > 0 Then
    
        objCliente.lCodigo = objBloqueioGen.lClienteDoc
    
        'Le os dados do cliente relacionado ao pedido de venda
        lErro = CF("Cliente_ObterDadosBasicos1", alComando(1), objCliente)
        If lErro <> SUCESSO Then gError 198521
        
        objClienteEstatistica.lCodCliente = objCliente.lCodigo
        objClienteEstatistica.iFilialEmpresa = objBloqueioGen.iFilialEmpresa
        
        'Lê os dados de estatística do cliente
        lErro = CF("Cliente_Le_Estatistica_Credito", objClienteEstatistica)
        If lErro <> SUCESSO Then gError 198522
        
        'se o valor do pedido ultrapassar o credito do cliente menos o que ele já tem encomendado
        If objCliente.iBloqueado <> 0 Or (dValorPedido > objCliente.dLimiteCredito - (objClienteEstatistica.dSaldoTitulos + objClienteEstatistica.dSaldoPedidosLiberados + objClienteEstatistica.dValorNFsNaoFaturadas)) Then
            
            objLiberacaoCredito.sCodUsuario = objBloqueioGen.sCodUsuarioLib
            
            'verificar se o usuário tem autorizacao para liberar o valor
            lErro = CF("LiberacaoCredito_Le", objLiberacaoCredito)
            If lErro <> SUCESSO And lErro <> 36968 Then gError 198523
            
            'se não foi encontrado autorização para o usuario liberar credito
            If lErro = 36968 Then gError 198524
            
            'se o valor do pedido ultrapassar o limite de credito que o usuario pode conceder por operacao
            If dValorPedido > objLiberacaoCredito.dLimiteOperacao Then gError 198525
            
            objValorLiberadoCredito.sCodUsuario = objBloqueioGen.sCodUsuarioLib
            objValorLiberadoCredito.iAno = Year(objBloqueioGen.dtDataLib)
            
            'Lê a estatistica de liberação de credito de um usuario em um determinado ano
            lErro = CF("ValorLiberadoCredito_Lock", objValorLiberadoCredito)
            If lErro <> SUCESSO And lErro <> 44470 Then gError 198526
            
            'se o valor do pedido ultrapassar o valor mensal que o usuario tem capacidade de liberar
            If dValorPedido > objLiberacaoCredito.dLimiteMensal - objValorLiberadoCredito.adValorLiberado(Month(objBloqueioGen.dtDataLib)) Then gError 198527
            
            'Atualiza a estatistica de liberação de credito do usuario
            lErro = CF("ValorLiberadoCredito_Grava", objValorLiberadoCredito.sCodUsuario, dValorPedido, objBloqueioGen.dtDataLib)
            If lErro <> SUCESSO Then gError 198528
            
        End If
        
    End If
    
    'Fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    BloqueioGenCredito_Libera = SUCESSO
    
    Exit Function
    
Erro_BloqueioGenCredito_Libera:

    BloqueioGenCredito_Libera = gErr
    
    Select Case gErr
    
        Case 198520
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 198521, 198522, 198523, 198526, 198528, 198533 'Tratados nas Rotinas Chamadas

        Case 198524
            Call Rotina_Erro(vbOKOnly, "ERRO_LIBERACAOCREDITO_INEXISTENTE1", gErr, objLiberacaoCredito.sCodUsuario, objBloqueioGen.lCodigo)
        
        Case 198525
            Call Rotina_Erro(vbOKOnly, "ERRO_LIBERACAOCREDITO_LIMITEOPERACAO1", gErr, objBloqueioGen.lCodigo, objLiberacaoCredito.sCodUsuario)
        
        Case 198527
            Call Rotina_Erro(vbOKOnly, "ERRO_LIBERACAOCREDITO_LIMITEMENSAL1", gErr, objBloqueioGen.lCodigo, objLiberacaoCredito.sCodUsuario)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 198529)

    End Select
    
    'Fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function BloqueioGenDiasAtraso_Libera(ByVal objMapBloqGen As ClassMapeamentoBloqGen, ByVal objBloqueioGen As ClassBloqueioGen) As Long
'trata os bloqueios de crédito por dia de atraso

Dim lErro As Long
Dim objLiberacaoCredito As New ClassLiberacaoCredito

On Error GoTo Erro_BloqueioGenDiasAtraso_Libera

    objLiberacaoCredito.sCodUsuario = objBloqueioGen.sCodUsuarioLib
    
    'verificar se o usuário tem autorizacao para liberar o bloqueio
    lErro = CF("LiberacaoCredito_Le", objLiberacaoCredito)
    If lErro <> SUCESSO And lErro <> 36968 Then gError 198530
    
    'se não foi encontrado autorização para o usuario liberar o bloqueio
    If lErro = 36968 Then gError 198531
    
    BloqueioGenDiasAtraso_Libera = SUCESSO
    
    Exit Function
    
Erro_BloqueioGenDiasAtraso_Libera:

    BloqueioGenDiasAtraso_Libera = gErr
    
    Select Case gErr

        Case 198530
        
        Case 198531
            Call Rotina_Erro(vbOKOnly, "ERRO_LIBERACAODIASATRASO_INEXISTENTE", gErr, objLiberacaoCredito.sCodUsuario, objBloqueioGen.lCodigo)
             
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 198532)

    End Select

    Exit Function

End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'GRAVAÇÃO
Public Function TiposDeBloqueioGen_Grava(ByVal objTiposDeBloqueioGen As ClassTiposDeBloqueioGen) As Long

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_TiposDeBloqueioGen_Grava

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 198590

    lErro = CF("TiposDeBloqueioGen_Grava_EmTrans", objTiposDeBloqueioGen)
    If lErro <> SUCESSO Then gError 198592

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 198593

    TiposDeBloqueioGen_Grava = SUCESSO

    Exit Function

Erro_TiposDeBloqueioGen_Grava:

    TiposDeBloqueioGen_Grava = gErr

    Select Case gErr

        Case 198590
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 198591

        Case 198592
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 198593)

    End Select

    'Desfaz Transação
    Call Transacao_Rollback

    Exit Function

End Function

Public Function TiposDeBloqueioGen_Grava_EmTrans(ByVal objTiposDeBloqueioGen As ClassTiposDeBloqueioGen) As Long

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim iInterno As Integer

On Error GoTo Erro_TiposDeBloqueioGen_Grava_EmTrans

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 198594
    Next

    'Le a tabelaTiposDeBloqueioGen
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Interno FROM TiposDeBloqueioGen WHERE TipoTelaBloqueio= ?  AND Codigo= ? ", _
                0, iInterno, objTiposDeBloqueioGen.iTipoTelaBloqueio, objTiposDeBloqueioGen.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 198595

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 198596

    'Se existir => UPDATE, senão => INSERT
    If lErro = AD_SQL_SUCESSO Then
    
        If iInterno = MARCADO Then gError 198597

        'Trava registro contra alterações/Leituras
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> SUCESSO Then gError 198598

        lErro = Comando_ExecutarPos(alComando(1), "UPDATE TiposDeBloqueioGen SET NomeReduzido= ? , Descricao= ? ", alComando(0), _
                objTiposDeBloqueioGen.sNomeReduzido, objTiposDeBloqueioGen.sDescricao)
        If lErro <> AD_SQL_SUCESSO Then gError 198599

    Else
    
        lErro = Comando_Executar(alComando(1), "INSERT INTO TiposDeBloqueioGen( TipoTelaBloqueio, Codigo, NomeReduzido, Descricao, " & _
                "NomeFuncTrataTipo, NaoApareceTelaLib, NomeFuncGeraTipo, TestaValorAlteracao, AlteracaoForcaInclusao, " & _
                "BloqueioTotal, NomeFuncTrataGravaReserva, BloqueioReserva, Interno) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                objTiposDeBloqueioGen.iTipoTelaBloqueio, objTiposDeBloqueioGen.iCodigo, objTiposDeBloqueioGen.sNomeReduzido, objTiposDeBloqueioGen.sDescricao, _
                objTiposDeBloqueioGen.sNomeFuncTrataTipo, objTiposDeBloqueioGen.iNaoApareceTelaLib, objTiposDeBloqueioGen.sNomeFuncGeraTipo, objTiposDeBloqueioGen.iTestaValorAlteracao, objTiposDeBloqueioGen.iAlteracaoForcaInclusao, _
                objTiposDeBloqueioGen.iBloqueioTotal, objTiposDeBloqueioGen.sNomeFuncTrataGravaReserva, objTiposDeBloqueioGen.iBloqueioReserva, objTiposDeBloqueioGen.iInterno)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 198600

    End If

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    TiposDeBloqueioGen_Grava_EmTrans = SUCESSO

    Exit Function

Erro_TiposDeBloqueioGen_Grava_EmTrans:

    TiposDeBloqueioGen_Grava_EmTrans = gErr

    Select Case gErr

        Case 198594
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 198595, 198596
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOSDEBLOQUEIOGEN", gErr)
            
        Case 198597
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPOBLOQGEN_INTERNO_NAO_ALT", gErr)

        Case 198598
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_TIPOSDEBLOQUEIOGEN", gErr)

        Case 198599
            Call Rotina_Erro(vbOKOnly, "ERRO_UPDATE_TIPOSDEBLOQUEIOGEN", gErr)

        Case 198600
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_TIPOSDEBLOQUEIOGEN", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 198601)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function TiposDeBloqueioGen_Exclui(ByVal objTiposDeBloqueioGen As ClassTiposDeBloqueioGen) As Long

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_TiposDeBloqueioGen_Exclui

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 198602

    lErro = CF("TiposDeBloqueioGen_Exclui_EmTrans", objTiposDeBloqueioGen)
    If lErro <> SUCESSO Then gError 198603

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 198604

    TiposDeBloqueioGen_Exclui = SUCESSO

    Exit Function

Erro_TiposDeBloqueioGen_Exclui:

    TiposDeBloqueioGen_Exclui = gErr

    Select Case gErr

        Case 198602
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 198603

        Case 198604
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 198605)

    End Select

    'Desfaz Transação
    Call Transacao_Rollback

    Exit Function

End Function

Public Function TiposDeBloqueioGen_Exclui_EmTrans(ByVal objTiposDeBloqueioGen As ClassTiposDeBloqueioGen) As Long

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim iInterno As Integer

On Error GoTo Erro_TiposDeBloqueioGen_Exclui_EmTrans

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 198606
    Next

    'Le a tabelaTiposDeBloqueioGen
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Interno FROM TiposDeBloqueioGen WHERE TipoTelaBloqueio= ?  AND Codigo= ? ", _
                0, iInterno, objTiposDeBloqueioGen.iTipoTelaBloqueio, objTiposDeBloqueioGen.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 198607

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 198608

    'Se existir => UPDATE, senão => INSERT
    If lErro = AD_SQL_SUCESSO Then
    
        If iInterno = MARCADO Then gError 198609

        'Trava registro contra alterações/Leituras
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> SUCESSO Then gError 198610

        lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM TiposDeBloqueioGen", alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 198611

    End If

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    TiposDeBloqueioGen_Exclui_EmTrans = SUCESSO

    Exit Function

Erro_TiposDeBloqueioGen_Exclui_EmTrans:

    TiposDeBloqueioGen_Exclui_EmTrans = gErr

    Select Case gErr

        Case 198606
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 198607, 198608
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOSDEBLOQUEIOGEN", gErr)
            
        Case 198609
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPOBLOQGEN_INTERNO_NAO_ALT", gErr)

        Case 198610
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_TIPOSDEBLOQUEIOGEN", gErr)

        Case 198611
            Call Rotina_Erro(vbOKOnly, "ERRO_DELETE_TIPOSDEBLOQUEIOGEN", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 198612)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function TipoDeBloqueioGen_Automatico(ByVal iTela As Integer, iCodigo As Integer) As Long
'retorna o número do proximo Tipo disponivel

Dim lErro As Long
Dim lNumAuto As Long
Dim sFiltro As String

On Error GoTo Erro_TipoDeBloqueioGen_Automatico

    sFiltro = "TipoTelaBloqueio = " & CStr(iTela)

    'Gera número automático.
    lErro = CF("Config_ObterAutomatico2", "TiposDeBloqueioGen", "Codigo", lNumAuto, sFiltro)
    If lErro <> SUCESSO Then gError 198613
    
    iCodigo = lNumAuto

    TipoDeBloqueioGen_Automatico = SUCESSO

    Exit Function

Erro_TipoDeBloqueioGen_Automatico:

    TipoDeBloqueioGen_Automatico = gErr

    Select Case gErr

        Case 198613
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 198614)

    End Select

    Exit Function

End Function

Function RelFlCxCtb_Move_Dados_Excel(ByVal objPlanilha As ClassPlanilhaExcel, ByVal lNumIntRel As Long, ByVal iMes As Integer, ByVal iAno As Integer) As Long
'Transfere os dados de objBrowse para objPlanilha no formato esperado pelo Excel para geração da planilha
'objBrowse RECEBE(Input) os dados que serão transferidos
'objPlanilha RETORNA(Output) os dados no formato esperado pelo Excel

Dim iColuna As Integer
Dim objColunas As ClassColunasExcel
Dim objCelulas As ClassCelulasExcel
Dim dLarguraColuna As Double
Dim lErro As Long
Dim iIndiceCol As Integer
Dim iIndiceLin As Integer
'##################################
'Inserido por Wagner 26/01/2006
Dim iIndiceColdeFato As Integer
Dim iIndice As Integer
Dim objBrowseUsuarioCampo As AdmBrowseUsuarioCampo
Dim vValorCampo As Variant
Dim iExercicio As Integer
Dim iIndiceColAux As Integer
'##################################


Dim alComando(1 To 2) As Long
Dim sDescContaPai As String
Dim sDescConta As String
Dim dtData As Date
Dim dValor As Double
Dim dSaldoInicial As Double
Dim iDias As Integer
Dim sDescContaPaiAtual As String
Dim iLinhaAtual As Integer
Dim iLinhaContaPaiAtual As Integer
Dim sDescContaAtual As String
Dim dValorTotal As Double
Dim iLinha As Integer


On Error GoTo Erro_RelFlCxCtb_Move_Dados_Excel

    'Executa a abertura dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 199196
    Next


    iDias = Dias_Mes(iMes, iAno)

    'Guarda o nome que será exibido para a planilha
    objPlanilha.sNomePlanilha = "Fluxo de Caixa"
    
    lErro = Comando_Executar(alComando(1), "SELECT Saldo FROM RelFlCxCTB WHERE Descricao = ? And NumIntRel = ?", dSaldoInicial, "Saldo Inicial", lNumIntRel)
    If lErro <> AD_SQL_SUCESSO Then gError 199197

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 199198

    'inicializa a primeira coluna com largura diferente das demais

    'Obtém a largura da coluna no padrão do Excel
    lErro = CF("Excel_Obtem_Largura_Coluna", 5000, dLarguraColuna)
    If lErro <> SUCESSO Then gError 199199
    
    'Instancia um novo obj para armazenar os dados da coluna
    Set objColunas = New ClassColunasExcel

    'Guarda no objeto a largura dessa coluna
    objColunas.dLarguraColuna = dLarguraColuna

    'Adiciona a coluna à coleção de colunas
    objPlanilha.colColunas.Add objColunas
    
    'Obtém a largura da coluna no padrão do Excel
    lErro = CF("Excel_Obtem_Largura_Coluna", 1500, dLarguraColuna)
    If lErro <> SUCESSO Then gError 199200
    
    'inicializa as demais coluna menos a de totalizacao
    
    For iColuna = 1 To iDias + 1
    
        'Instancia um novo obj para armazenar os dados da coluna
        Set objColunas = New ClassColunasExcel
    
        'Guarda no objeto a largura dessa coluna
        objColunas.dLarguraColuna = dLarguraColuna
    
        'Adiciona a coluna à coleção de colunas
        objPlanilha.colColunas.Add objColunas

    Next
    
    'cria as primeiras 14 linhas
    
'    For iLinha = 1 To 14
'        For iColuna = 1 To iDias + 2
'
'            Set objCelulas = New ClassCelulasExcel
'
'            objPlanilha.colColunas(iColuna).colCelulas.Add objCelulas
'        Next
'    Next
    
    For iLinha = 1 To 6
        For iColuna = 1 To iDias + 2

            Set objCelulas = New ClassCelulasExcel

            objPlanilha.colColunas(iColuna).colCelulas.Add objCelulas
        Next
    Next
    
    'inicializa a linha 9 coluna 1 com o titulo FLUXO DE CAIXA
    
    Set objCelulas = objPlanilha.colColunas(1).colCelulas(1)
    
    objCelulas.vValor = "FLUXO DE CAIXA"
    objCelulas.bFonteNegrito = True
    objCelulas.dFonteTamanho = 18
    objCelulas.sFonte = "Arial"
    
    'inicializa a linha 10 coluna 1 com o titulo PERIODO: ....
    
    Set objCelulas = objPlanilha.colColunas(1).colCelulas(2)
    
    objCelulas.vValor = "PERIODO: " & Format("01/" & iMes & "/" & iAno, "dd/mm/yyyy") & " A " & Format(iDias & "/" & iMes & "/" & iAno, "dd/mm/yyyy")
    objCelulas.bFonteNegrito = False
    objCelulas.dFonteTamanho = 10
    objCelulas.sFonte = "Arial"

    ' coloca a linha 12 com os dias do mes
    For iColuna = 2 To iDias + 1
        Set objCelulas = objPlanilha.colColunas(iColuna).colCelulas(4)
        
        objCelulas.vValor = Format(iColuna - 1, "00")
        objCelulas.bFonteNegrito = True
        objCelulas.dFonteTamanho = 10
        objCelulas.sFonte = "Arial"
        objCelulas.vAlinhamentoHorizontal = 3
        objCelulas.sNumberFormat = "00"
    
    Next
        
    'coloca o titulo ultima coluna da linha 12 como TOTAL
    Set objCelulas = objPlanilha.colColunas(iDias + 2).colCelulas(4)
    objCelulas.vValor = "TOTAL"
    objCelulas.bFonteNegrito = True
    objCelulas.dFonteTamanho = 10
    objCelulas.sFonte = "Arial"
    objCelulas.vAlinhamentoHorizontal = 3
        
    'coloca o titulo da coluna 1 linha 5 para SALDO BANCARIO
    Set objCelulas = objPlanilha.colColunas(1).colCelulas(5)
    
    objCelulas.vValor = "SALDO BANCÁRIO"
    objCelulas.bFonteNegrito = True
    objCelulas.dFonteTamanho = 12
    objCelulas.sFonte = "Arial"
    objCelulas.iCelulaCor = 1

    'coloca a coluna 2 linha 5 que corresponde ao primeiro dia com o valor do saldo inicial
    Set objCelulas = objPlanilha.colColunas(2).colCelulas(5)
    
    objCelulas.vValor = dSaldoInicial
    objCelulas.bFonteNegrito = True
    objCelulas.dFonteTamanho = 12
    objCelulas.sFonte = "Arial"
    objCelulas.sNumberFormat = "#,##0.00"
    objCelulas.iCelulaCor = 1
    
    'coloca as demais colunas da linha 5 com valor zero
    For iColuna = 3 To iDias + 2
        Set objCelulas = objPlanilha.colColunas(iColuna).colCelulas(5)
        
        objCelulas.vValor = CDbl(0)
        objCelulas.bFonteNegrito = True
        objCelulas.dFonteTamanho = 12
        objCelulas.sFonte = "Arial"
        objCelulas.vAlinhamentoHorizontal = 1
        objCelulas.sNumberFormat = "#,##0.00"
        objCelulas.iCelulaCor = 1
    Next
    
    'colocca a ultima coluna da linha 5 com o valor do saldo inicial
    Set objCelulas = objPlanilha.colColunas(iDias + 2).colCelulas(5)
    objCelulas.vValor = dSaldoInicial
    
    iLinhaAtual = 5
    
    sDescConta = String(STRING_CONTA_DESCRICAO, 0)
    sDescContaPai = String(STRING_CONTA_DESCRICAO, 0)
    
    lErro = Comando_Executar(alComando(2), "SELECT DescContaPai, DescConta, Data, SUM(Credito - Debito) FROM RelFlCxCtb WHERE NumIntRel = ? GROUP BY DescContaPai, DescConta, Data", sDescContaPai, sDescConta, dtData, dValor, lNumIntRel)
    If lErro <> AD_SQL_SUCESSO Then gError 199201

    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 199202

    sDescContaPaiAtual = "@@@@@@"
    sDescContaAtual = "&&&&&"

    Do While lErro = AD_SQL_SUCESSO
    
        'se mudou a conta pai
        If sDescContaPai <> sDescContaPaiAtual Then
        
            iLinhaAtual = iLinhaAtual + 1
        
            'pula uma linha
            For iColuna = 1 To iDias + 2
                
                Set objCelulas = New ClassCelulasExcel
                
                objPlanilha.colColunas(iColuna).colCelulas.Add objCelulas
            Next
        
            iLinhaAtual = iLinhaAtual + 1
        
            'inicializa a linha do pai
            For iColuna = 1 To iDias + 2
                
                Set objCelulas = New ClassCelulasExcel
                
                objPlanilha.colColunas(iColuna).colCelulas.Add objCelulas
            Next
        
            
            'coloca o titulo da conta pai na coluna 1
            Set objCelulas = objPlanilha.colColunas(1).colCelulas(iLinhaAtual)
            
            objCelulas.vValor = UCase(sDescContaPai)
            objCelulas.bFonteNegrito = True
            objCelulas.dFonteTamanho = 12
            objCelulas.sFonte = "Arial"
            objCelulas.iCelulaCor = 1
        
        
            'coloca zeros na linha do pai
            For iColuna = 2 To iDias + 2
                Set objCelulas = objPlanilha.colColunas(iColuna).colCelulas(iLinhaAtual)
                
                objCelulas.vValor = CDbl(0)
                objCelulas.bFonteNegrito = True
                objCelulas.dFonteTamanho = 12
                objCelulas.sFonte = "Arial"
                objCelulas.vAlinhamentoHorizontal = 1
                objCelulas.sNumberFormat = "#,##0.00"
                objCelulas.iCelulaCor = 1
                
            Next
            
            iLinhaContaPaiAtual = iLinhaAtual
            sDescContaPaiAtual = sDescContaPai
        
        End If
        
        'se mudou a conta filho
        If sDescContaAtual <> sDescConta Then
        
            iLinhaAtual = iLinhaAtual + 1
        
            'inicializa a linha atual
            For iColuna = 1 To iDias + 2
                
                Set objCelulas = New ClassCelulasExcel
                
                objPlanilha.colColunas(iColuna).colCelulas.Add objCelulas
            Next
        
        
            'coloca o titulo da conta filho na coluna 1
            Set objCelulas = objPlanilha.colColunas(1).colCelulas(iLinhaAtual)
            
            objCelulas.vValor = UCase(sDescConta)
            objCelulas.bFonteNegrito = False
            objCelulas.dFonteTamanho = 10
            objCelulas.sFonte = "Arial"
        
            'coloca zeros nos valores da conta filho
            For iColuna = 2 To iDias + 2
                Set objCelulas = objPlanilha.colColunas(iColuna).colCelulas(iLinhaAtual)
                
                objCelulas.vValor = CDbl(0)
                objCelulas.bFonteNegrito = False
                objCelulas.dFonteTamanho = 10
                objCelulas.sFonte = "Arial"
                objCelulas.vAlinhamentoHorizontal = 1
                objCelulas.sNumberFormat = "#,##0.00"
            Next
    
            sDescContaAtual = sDescConta
    
        End If
    
    
        'coloca o valor lido na coluna correta
        iColuna = Day(dtData) + 1
    
        Set objCelulas = objPlanilha.colColunas(iColuna).colCelulas(iLinhaAtual)
        
        objCelulas.vValor = dValor
    
        'soma o valor colocado na linha da conta pai
        Set objCelulas = objPlanilha.colColunas(iColuna).colCelulas(iLinhaContaPaiAtual)
    
        objCelulas.vValor = objCelulas.vValor + dValor
        
        lErro = Comando_BuscarProximo(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 199203
        
    Loop
        
    iLinhaAtual = iLinhaAtual + 1
        
    'pula uma linha
    For iColuna = 1 To iDias + 2
        
        Set objCelulas = New ClassCelulasExcel
        
        objPlanilha.colColunas(iColuna).colCelulas.Add objCelulas
    Next

    iLinhaAtual = iLinhaAtual + 1
     
    'inicializa a linha de totais
    For iColuna = 1 To iDias + 2
        
        Set objCelulas = New ClassCelulasExcel
        
        objPlanilha.colColunas(iColuna).colCelulas.Add objCelulas
    Next
    

    'coloca o Titulo TOTAL na ultima linha
    Set objCelulas = objPlanilha.colColunas(1).colCelulas(iLinhaAtual)
    
    objCelulas.vValor = "TOTAL"
    objCelulas.bFonteNegrito = True
    objCelulas.dFonteTamanho = 12
    objCelulas.sFonte = "Arial"
    objCelulas.iCelulaCor = 1

    'coloca zero nas demais posicoes da ultima linha
    For iColuna = 2 To iDias + 2
        Set objCelulas = objPlanilha.colColunas(iColuna).colCelulas(iLinhaAtual)
        
        objCelulas.vValor = CDbl(0)
        objCelulas.bFonteNegrito = True
        objCelulas.dFonteTamanho = 12
        objCelulas.sFonte = "Arial"
        objCelulas.vAlinhamentoHorizontal = 1
        objCelulas.sNumberFormat = "#,##0.00"
        objCelulas.iCelulaCor = 1
        
    Next
        
        
    'Faz a totalizacao das linhas
    For iLinha = 6 To objPlanilha.colColunas(1).colCelulas.Count - 2
    
        If Len(Trim(objPlanilha.colColunas(1).colCelulas(iLinha).sFonte)) > 0 Then

            dValorTotal = 0
    
            For iColuna = 2 To iDias + 1
                Set objCelulas = objPlanilha.colColunas(iColuna).colCelulas(iLinha)
            
                dValorTotal = dValorTotal + objCelulas.vValor
                
            Next
            
            'coloca o total na linha na ultima coluna
            Set objCelulas = objPlanilha.colColunas(iDias + 2).colCelulas(iLinha)
            
            objCelulas.vValor = dValorTotal
            
        End If
    
    Next
        
        
    'faz a totalizacao das colunas
    For iColuna = 2 To iDias + 2
    
        dValorTotal = 0
    
        'totaliza os valores de cada coluna
        For iLinha = 5 To objPlanilha.colColunas(1).colCelulas.Count - 2
        
            Set objCelulas = objPlanilha.colColunas(iColuna).colCelulas(iLinha)
            
            If objCelulas.dFonteTamanho = 10 Or (objCelulas.dFonteTamanho = 12 And iLinha = 5) Then
                dValorTotal = dValorTotal + objCelulas.vValor
            End If
            
        Next
        
        
        'coloca o total na linha de totais
        Set objCelulas = objPlanilha.colColunas(iColuna).colCelulas(iLinhaAtual)
        
        objCelulas.vValor = dValorTotal
        
        
        'se a proxima coluna é uma data valida ==> coloca o dValorTotal como saldo inicial do proximo dia
        
        If iColuna + 1 <= iDias + 1 Then
        
            Set objCelulas = objPlanilha.colColunas(iColuna + 1).colCelulas(5)
            
            objCelulas.vValor = dValorTotal
            
        End If
        
    Next
        
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
        
    RelFlCxCtb_Move_Dados_Excel = SUCESSO
    
    Exit Function
    
Erro_RelFlCxCtb_Move_Dados_Excel:
    
    RelFlCxCtb_Move_Dados_Excel = gErr
    
    Select Case gErr

        Case 199196
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 199197, 199198, 199201, 199202, 199203
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RELFLCXCTB", gErr)
        
        Case 199199, 199200
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 199204)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function
    
End Function

Function PedidoVenda_Valida_MargContr(ByVal objPedidoVenda As ClassPedidoDeVenda) As Long
'Verifica se a margem de contribuicao do PV está dentro do aceitavel
    PedidoVenda_Valida_MargContr = SUCESSO
End Function

Function NFiscal_Valida_MargContr(ByVal objNF As ClassNFiscal) As Long
'Verifica se a margem de contribuicao da nfiscal está dentro do aceitavel
    NFiscal_Valida_MargContr = SUCESSO
End Function

Function Contratos_Campanha13_Gera()

Dim lErro As Long, lCliente As Long, lTransacao As Long, lCodContrato As Long
Dim alComando(0 To 10) As Long, objContrato As ClassContrato
Dim objItensDeContrato As ClassItensDeContrato
Dim lNumIntDoc As Long, iIndice As Integer, dValContrato As Double
Dim lNumProx As Long, lNum As Long, lContrato As Long

'??? ALTERAR 2019

On Error GoTo Erro_Contratos_Campanha13_Gera

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 130423

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 130426
    Next

    '??? ALTERAR FILIALEMPRESA, CODIGOS DOS CONTRATOS
    lErro = Comando_Executar(alComando(0), "SELECT CLI.Codigo, ic.valor FROM Clientes CLI, FiliaisClientes FIL, Enderecos ENDE, Contratos C, ItensDeContrato IC WHERE C.Ativo=1 AND C.NumIntDoc = IC.NumIntContrato AND C.Cliente = CLI.Codigo AND C.Filialempresa=1 AND ENDE.Endereco<> '' AND CLI.Ativo=1 AND FIL.CodCliente = CLI.Codigo AND FIL.CodFilial = 1 AND FIL.Endereco = ENDE.Codigo AND C.Codigo >= 'B00001' AND C.Codigo <= 'B00488' ORDER BY RazaoSocial", lCliente, dValContrato)
    If lErro <> AD_SQL_SUCESSO Then gError 2222

    lErro = Comando_BuscarProximo(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 2222

    Do While lErro <> AD_SQL_SEM_DADOS

        lContrato = lContrato + 1

        'Busca próximo identificador
        lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_PROX_CONTRATO", lNumProx)
        If lErro <> SUCESSO Then gError 131066

        Set objContrato = New ClassContrato

        With objContrato

            .lNumIntDoc = lNumProx
            .iFilialEmpresa = 1 '1: Leblon, 2:LAR '??? ALTERAR
            .lCliente = lCliente

            .dtDataFimContrato = StrParaDate("21/12/2019")
            .dtDataIniCobrancaPadrao = StrParaDate("30/10/2019")
            .dtDataIniContrato = StrParaDate("30/10/2019")
            .dtDataRenovContrato = StrParaDate("21/12/2019")

            .iCondPagtoPadrao = 20
            .iFilCli = 1
            .iPeriodicidadePadrao = PERIODICIDADE_ANUAL

            .iAtivo = 1

            .sCodigo = "J3" & Format(lContrato, "0000") '??? ALTERAR
            .sContaContabil = ""
            .sDescricao = "13o Socios 2019" '??? ALTERAR
            .sObservacao = ""
            .sHistoricoContabil = ""

            .sCcl = ""

            .sNaturezaOp = "5949"
            .iTipoTributacao = 32

            .iTipo = CONTRATOS_RECEBER
            .iRecibo = DESMARCADO

            'Insere contrato
            lErro = Comando_Executar(alComando(2), "INSERT INTO Contratos(NumIntDoc, FilialEmpresa, Codigo, Descricao, Ativo, Cliente, FilCli, Observacao, DataIniContrato, DataFimContrato, DataRenovContrato, ContaContabil, HistoricoContabil, DataIniCobrancaPadrao, PeriodicidadePadrao, CondPagtoPadrao, Ccl, NaturezaOP,TipoTributacao, Tipo, FilialFornecedor, Fornecedor, Recibo) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                                                                        .lNumIntDoc, .iFilialEmpresa, .sCodigo, .sDescricao, .iAtivo, .lCliente, .iFilCli, .sObservacao, .dtDataIniContrato, .dtDataFimContrato, .dtDataRenovContrato, .sContaContabil, .sHistoricoContabil, .dtDataIniCobrancaPadrao, .iPeriodicidadePadrao, .iCondPagtoPadrao, .sCcl, .sNaturezaOp, .iTipoTributacao, .iTipo, .iFilForn, .lFornecedor, .iRecibo)
        End With
        If lErro <> AD_SQL_SUCESSO Then gError 129341

        Set objItensDeContrato = New ClassItensDeContrato

        'Obtem identificado (NumIntDoc)
        lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_PROX_ITENSDECONTRATO", lNumProx)
        If lErro <> SUCESSO Then gError 129367

        With objItensDeContrato

            .lNumIntDoc = lNumProx
            .lNumIntContrato = objContrato.lNumIntDoc
            .dtDataRefIni = StrParaDate("01/01/2019")
            .dtDataRefFim = StrParaDate("31/12/2019")
            .dQuantidade = 1
            .dtDataIniCobranca = StrParaDate("30/10/2019")
            .dtDataProxCobranca = StrParaDate("30/10/2019")
            .dValor = dValContrato
            .iCobrar = 1
            .iMedicao = 0
            .iSeq = 1

            .iCondPagto = 20
            .iPeriodicidade = PERIODICIDADE_ANUAL

'            .sProduto = "00062"
'            .sDescProd = "DONATIVO YIZCOR"

'            .sProduto = "00002"
'            .sDescProd = "DONATIVO LAR ESPERANCA 13o SALARIO - 2019" '??? ALTERAR
            .sProduto = "00001"
            .sDescProd = "DONATIVO HAI DECIMO TERCEIRO 2019" '??? ALTERAR
            
            .sObservacao = ""
            .sUM = "un"

            'Insere item
            lErro = Comando_Executar(alComando(3), "INSERT INTO ItensDeContrato(NumIntDoc, NumIntContrato, Seq, Cobrar, Produto, DescProd, Quantidade, UM, Valor, Medicao, DataIniCobranca, Periodicidade, CondPagto, Observacao, DataProxCobranca, DataRefIni, DataRefFim) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                                                        .lNumIntDoc, .lNumIntContrato, .iSeq, .iCobrar, .sProduto, .sDescProd, .dQuantidade, .sUM, .dValor, .iMedicao, .dtDataIniCobranca, .iPeriodicidade, .iCondPagto, .sObservacao, .dtDataProxCobranca, .dtDataRefIni, .dtDataRefFim)
        End With
        If lErro <> AD_SQL_SUCESSO Then gError 129348

        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 2222

    Loop

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 130425

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Contratos_Campanha13_Gera = SUCESSO

    Exit Function

Erro_Contratos_Campanha13_Gera:

    Contratos_Campanha13_Gera = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 201037)

    End Select

    'Desfaz Transação
    Call Transacao_Rollback

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function ItemNFSai_Remessa_Customizado(ByVal objNFiscal As ClassNFiscal, ByVal objItemNF As ClassItemNF) As Long
    ItemNFSai_Remessa_Customizado = SUCESSO
End Function

Function ItemNFSai_Excluir_Customizado(ByVal objNFiscal As ClassNFiscal, ByVal objItemNF As ClassItemNF) As Long
    ItemNFSai_Excluir_Customizado = SUCESSO
End Function
            
Function ItemNFSai_Cancelar_Customizado(ByVal objNFiscal As ClassNFiscal, ByVal objItemNF As ClassItemNF) As Long
    ItemNFSai_Cancelar_Customizado = SUCESSO
End Function

Function ItemNFSai_Customizado(ByVal objNFiscal As ClassNFiscal, ByVal objItemNF As ClassItemNF) As Long
    ItemNFSai_Customizado = SUCESSO
End Function

Public Function NFeFedLote_Grava(ByVal iFilialEmpresa As Integer, ByVal colNFeFedLote As Collection, Optional ByVal sSistemaContingencia As String = "") As Long

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim objNFeFedLote As ClassNFeFedLote
Dim lTransacao As Long
Dim iIndice As Integer

On Error GoTo Erro_NFeFedLote_Grava

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 199929

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 199930
    Next
    
    For Each objNFeFedLote In colNFeFedLote
    
        lErro = Comando_Executar(alComando(1), "INSERT INTO NFeFedLote (FilialEmpresa, Lote, NumIntNF, Data, Hora, Usuario, SistemaContingencia) VALUES (?,?,?,?,?,?,?)", iFilialEmpresa, objNFeFedLote.lLote, objNFeFedLote.lNumIntNF, Date, CDbl(Time), gsUsuario, sSistemaContingencia)
        If lErro <> AD_SQL_SUCESSO Then gError 199931
    
    Next
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 199932

    NFeFedLote_Grava = SUCESSO

    Exit Function

Erro_NFeFedLote_Grava:

    NFeFedLote_Grava = gErr

    Select Case gErr

        Case 199929
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 199930
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 199931
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_NFEFEDLOTE", gErr)

        Case 199932
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 199933)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    'Desfaz Transação
    Call Transacao_Rollback

    Exit Function

End Function

Public Function ClienteExpresso_Grava(ByVal colClientes As Collection, ByVal colFiliais As Collection) As Long

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_ClienteExpresso_Grava

    'Abre transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 200996
    
    lErro = ClienteExpresso_Grava_EmTrans(colClientes, colFiliais)
    If lErro <> SUCESSO Then gError 200997
    
    'Fecha a transação
    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then gError 200998

    ClienteExpresso_Grava = SUCESSO

    Exit Function

Erro_ClienteExpresso_Grava:

    ClienteExpresso_Grava = gErr

    Select Case gErr

        Case 200996
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 200997
        
        Case 200998
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 200999)

    End Select

    'Faz o rollback da transação
    Call Transacao_Rollback

End Function

Public Function ClienteExpresso_Grava_EmTrans(ByVal colClientes As Collection, ByVal colFiliais As Collection) As Long

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(1 To 4) As Long
Dim objCliente As ClassCliente
Dim objFilial As ClassFilialCliente
Dim lAux As Long

On Error GoTo Erro_ClienteExpresso_Grava_EmTrans

    'Executa a abertura dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 202023
    Next
    
    For Each objCliente In colClientes

        lErro = Comando_ExecutarPos(alComando(1), "SELECT Codigo FROM Clientes WHERE Codigo = ? ", 0, lAux, objCliente.lCodigo)
        If lErro <> AD_SQL_SUCESSO Then gError 202024

        'Busca Primeiro
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 202025
        
        lErro = Comando_ExecutarPos(alComando(2), "UPDATE Clientes SET UsuarioCobrador = ?, UsuRespCallCenter = ? ", alComando(1), objCliente.sUsuarioCobrador, objCliente.sUsuRespCallCenter)
        If lErro <> AD_SQL_SUCESSO Then gError 202026
            
    Next
    
    For Each objFilial In colFiliais

        lErro = Comando_ExecutarPos(alComando(3), "SELECT CodCliente FROM FiliaisClientes WHERE CodCliente = ? AND CodFilial = ? ", 0, lAux, objFilial.lCodCliente, objFilial.iCodFilial)
        If lErro <> AD_SQL_SUCESSO Then gError 202027

        'Busca Primeiro
        lErro = Comando_BuscarPrimeiro(alComando(3))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 202028
        
        lErro = Comando_ExecutarPos(alComando(4), "UPDATE FiliaisClientes SET Regiao = ?, Vendedor = ?, CodTransportadora = ? ", alComando(3), objFilial.iRegiao, objFilial.iVendedor, objFilial.iCodTransportadora)
        If lErro <> AD_SQL_SUCESSO Then gError 202029
            
    Next
        
    'Executa o fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    ClienteExpresso_Grava_EmTrans = SUCESSO
     
    Exit Function
    
Erro_ClienteExpresso_Grava_EmTrans:

    ClienteExpresso_Grava_EmTrans = gErr
     
    Select Case gErr
          
        Case 202023
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 202024, 202025
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CLIENTES", gErr)
        
        Case 202026
            Call Rotina_Erro(vbOKOnly, "ERRO_UPDATE_CLIENTES", gErr)
        
        Case 202027, 202028
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIAISCLIENTES", gErr)
        
        Case 202029
            Call Rotina_Erro(vbOKOnly, "ERRO_UPDATE_FILIAISCLIENTES", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 202030)
     
    End Select
    
    'Executa o fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'GRAVAÇÃO
Public Function EmailConfig_Grava(ByVal objEmailConfig As ClassEmailConfig) As Long

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_EmailConfig_Grava

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 202817
    
    'Se for alterar a configuração de todos testa permissão a função EmailConfig_Grava_Geral
    If objEmailConfig.sUsuario = "" Then
        lErro = CF("EmailConfig_Grava_Geral")
        If lErro <> SUCESSO Then gError 202818
    End If

    lErro = CF("EmailConfig_Grava_EmTrans", objEmailConfig)
    If lErro <> SUCESSO Then gError 202819

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 202820

    EmailConfig_Grava = SUCESSO

    Exit Function

Erro_EmailConfig_Grava:

    EmailConfig_Grava = gErr

    Select Case gErr

        Case 202817
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 202818, 202819

        Case 202820
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 202821)

    End Select

    'Desfaz Transação
    Call Transacao_Rollback

    Exit Function

End Function

Public Function EmailConfig_Grava_Geral() As Long
    EmailConfig_Grava_Geral = SUCESSO
End Function

Public Function EmailConfig_Grava_EmTrans(ByVal objEmailConfig As ClassEmailConfig) As Long

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim sUsu As String

On Error GoTo Erro_EmailConfig_Grava_EmTrans

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 202822
    Next
    
    sUsu = String(STRING_USUARIO_CODIGO, 0)

    'Le a tabelaEmailConfig
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Usuario FROM EmailConfig WHERE Usuario= ? ", _
                0, sUsu, objEmailConfig.sUsuario)
    If lErro <> AD_SQL_SUCESSO Then gError 202823

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 202824

    'Se existir => UPDATE, senão => INSERT
    If lErro = AD_SQL_SUCESSO Then

        'Trava registro contra alterações/Leituras
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> SUCESSO Then gError 202825

        lErro = Comando_ExecutarPos(alComando(1), "UPDATE EmailConfig SET SMTP= ? , SMTPUsu= ? , SMTPSenha= ?, SMTPPorta = ?, SSL = ?, ConfirmacaoLeitura= ?, PgmEmail= ?, Email= ?, Nome= ? ", alComando(0), _
                objEmailConfig.sSMTP, objEmailConfig.sSMTPUsu, objEmailConfig.sSMTPSenha, objEmailConfig.lSMTPPorta, objEmailConfig.iSSL, objEmailConfig.iConfirmacaoLeitura, objEmailConfig.iPgmEmail, objEmailConfig.sEmail, objEmailConfig.sNome)
        If lErro <> AD_SQL_SUCESSO Then gError 202826

    Else

        lErro = Comando_Executar(alComando(1), "INSERT INTO EmailConfig( Usuario, SMTP, SMTPUsu, SMTPSenha, SMTPPorta,SSL, ConfirmacaoLeitura, PgmEmail, Email, Nome) VALUES (?,?,?,?,?,?,?,?,?,?)", _
                objEmailConfig.sUsuario, objEmailConfig.sSMTP, objEmailConfig.sSMTPUsu, objEmailConfig.sSMTPSenha, objEmailConfig.lSMTPPorta, objEmailConfig.iSSL, objEmailConfig.iConfirmacaoLeitura, objEmailConfig.iPgmEmail, objEmailConfig.sEmail, objEmailConfig.sNome)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 202827

    End If

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    EmailConfig_Grava_EmTrans = SUCESSO

    Exit Function

Erro_EmailConfig_Grava_EmTrans:

    EmailConfig_Grava_EmTrans = gErr

    Select Case gErr

        Case 202822
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 202823, 202824
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_EMAILCONFIG", gErr)

        Case 202825
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_EMAILCONFIG", gErr)

        Case 202826
            Call Rotina_Erro(vbOKOnly, "ERRO_UPDATE_EMAILCONFIG", gErr)

        Case 202827
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_EMAILCONFIG", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 202828)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function EmailConfig_Grava_INI() As Long

Dim lErro As Long
Dim objEmailConfig As New ClassEmailConfig
Dim sEmailConfig As String

On Error GoTo Erro_EmailConfig_Grava_INI

    objEmailConfig.sUsuario = gsUsuario
    
    lErro = CF("EmailConfig_Le", objEmailConfig)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    sEmailConfig = objEmailConfig.sEmail
    sEmailConfig = sEmailConfig & "|" & objEmailConfig.sSMTP
    sEmailConfig = sEmailConfig & "|" & objEmailConfig.sSMTPUsu
    sEmailConfig = sEmailConfig & "|" & objEmailConfig.sSMTPSenha
    sEmailConfig = sEmailConfig & "|" & objEmailConfig.sNome
    sEmailConfig = sEmailConfig & "|" & objEmailConfig.lSMTPPorta
    sEmailConfig = sEmailConfig & "|" & objEmailConfig.iSSL
    sEmailConfig = sEmailConfig & "|" & objEmailConfig.iPgmEmail
    sEmailConfig = sEmailConfig & "|" & objEmailConfig.iConfirmacaoLeitura & "|"
    
    Call WritePrivateProfileString("Forprint", "EmailConfig", sEmailConfig, NOME_ARQUIVO_ADM)

    Call WritePrivateProfileString("Forprint", "ExtensaoGerRelExp", gsExtensaoGerRelExp, NOME_ARQUIVO_ADM)

    EmailConfig_Grava_INI = SUCESSO

    Exit Function

Erro_EmailConfig_Grava_INI:

    EmailConfig_Grava_INI = gErr

    Select Case gErr

        Case ERRO_SEM_MENSAGEM

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 202828)

    End Select
    
    Exit Function

End Function

Public Function Processa_Bloqueio_PrecoBaixo(ByVal objBloqueioPV As ClassBloqueioPV) As Long
    Processa_Bloqueio_PrecoBaixo = SUCESSO
End Function

Public Function Processa_Bloqueio_PrecoDefasado(ByVal objBloqueioPV As ClassBloqueioPV) As Long
    Processa_Bloqueio_PrecoDefasado = SUCESSO
End Function

Function Atualiza_Versao() As Long
'Atualiza informações de BDs antigos

Dim lErro As Long

On Error GoTo Erro_Atualiza_Versao
    
    'Transfere os campos VolumeMarca e VolumeEspecie para tabelas de CamposGenéricos
    lErro = Atualiza_Versao_CondPagto
    If lErro <> SUCESSO Then gError 205030
    
    'Cria a parte de parcelamento nas condições de pagamento
    lErro = Atualiza_Versao_MarcaEspecie
    If lErro <> SUCESSO Then gError 205031

    'Transfere os dados de Cidade de endereços para tabela de Cidades
    lErro = Atualiza_Versao_Cidades
    If lErro <> SUCESSO Then gError 205031

    lErro = Atualiza_Versao_Msg
    If lErro <> SUCESSO Then gError 205031

    lErro = CF("Tributacao_Atualiza_Versao")
    If lErro <> SUCESSO Then gError 205032

    lErro = CF("EstoqueTerc_Atualiza_Versao")
    If lErro <> SUCESSO Then gError 205032

    Atualiza_Versao = SUCESSO
    
    Exit Function
    
Erro_Atualiza_Versao:
    
    Atualiza_Versao = gErr
    
    Select Case gErr
        
        Case 205030 To 205032
            Call Rotina_Erro(vbOKOnly, "ERRO_VERSAO_NAO_ATUALIZADA", gErr, lErro)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 205033)
            
    End Select
        
    Exit Function
    
End Function

Private Function Atualiza_Versao_CondPagto() As Long

Dim lErro As Long
Dim lTransacao As Long
Dim alComando(1 To 3) As Long
Dim iIndice As Integer
Dim sConteudo As String
Dim colCodigoDescricao As AdmColCodigoNome
Dim objCodigoDescricao As New AdmCodigoNome
Dim objCondicaoPagto As ClassCondicaoPagto
Dim objParc As ClassCondicaoPagtoParc

On Error GoTo Erro_Atualiza_Versao_CondPagto
    
    'abrir transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 205034

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 205035
    Next

    sConteudo = String(STRING_CONFIG_CONTEUDO, 0)

    'Vê se tem que atualizar
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Conteudo FROM AdmConfig WHERE Codigo = ? ", 0, sConteudo, "GERA_PARC_CONDPAGTO")
    If lErro <> AD_SQL_SUCESSO Then gError 205036

    'Busca o Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205037

    If lErro = AD_SQL_SUCESSO And sConteudo = "1" Then
    
        Set colCodigoDescricao = New AdmColCodigoNome
    
        'Leitura dos códigos e descrições das condições de pagamento
        lErro = CF("Cod_Nomes_Le", "CondicoesPagto", "Codigo", "DescReduzida", STRING_CONDICAO_PAGTO_DESCRICAO_REDUZIDA, colCodigoDescricao)
        If lErro <> SUCESSO Then gError 205038
    
        For Each objCodigoDescricao In colCodigoDescricao
        
            Set objCondicaoPagto = New ClassCondicaoPagto
        
            objCondicaoPagto.iCodigo = objCodigoDescricao.iCodigo
        
            lErro = CF("CondicaoPagto_Le", objCondicaoPagto)
            If lErro <> SUCESSO And lErro <> 19205 Then gError 205039
            
            lErro = CF("CondicaoPagto_Le_Parcelas", objCondicaoPagto)
            If lErro <> SUCESSO Then gError 205040
           
            If objCondicaoPagto.colParcelas.Count = 0 Then
            
                lErro = Atualiza_Versao_CondPagtoAux(objCondicaoPagto)
                If lErro <> SUCESSO Then gError 205041
                
                For Each objParc In objCondicaoPagto.colParcelas
                
                    With objParc
                        lErro = Comando_Executar(alComando(3), "INSERT INTO CondicoesPagtoParc (Codigo, Seq, TipoDataBase, TipoIntervalo, Dias, Modificador, PercReceb) VALUES (?,?,?,?,?,?,?)", objCondicaoPagto.iCodigo, .iSeq, .iTipoDataBase, .iTipoIntervalo, .iDias, .iModificador, .dPercReceb)
                    End With
                    If lErro <> AD_SQL_SUCESSO Then gError 205042
                
                Next
            
            End If
        
        Next
    
        lErro = Comando_ExecutarPos(alComando(2), "UPDATE AdmConfig SET Conteudo = ? ", alComando(1), "0")
        If lErro <> AD_SQL_SUCESSO Then gError 205043
    
    End If
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
     'fechar transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 205044
    
    Atualiza_Versao_CondPagto = SUCESSO
    
    Exit Function
    
Erro_Atualiza_Versao_CondPagto:
    
    Atualiza_Versao_CondPagto = gErr
    
    Select Case gErr
        
        Case 205034
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 205035
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 205036, 205037
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ADMCONFIG", gErr)
            
        Case 205038 To 205041
        
        Case 205042
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CONDICAOPAGTO", gErr, objCondicaoPagto.iCodigo)
        
        Case 205043
            Call Rotina_Erro(vbOKOnly, "ERRO_UPDATE_ADMCONFIG", gErr)
        
        Case 205044
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 205045)
            
    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Call Transacao_Rollback
    
    Exit Function
    
End Function

Private Function Atualiza_Versao_MarcaEspecie() As Long

Dim lErro As Long
Dim lTransacao As Long
Dim alComando(1 To 50) As Long
Dim iIndice As Integer
Dim iCampo As Integer
Dim iTabela As Integer
Dim sConteudo As String
Dim colValores As Collection
Dim sValorCampo As String
Dim sCampo As String
Dim sTabela As String
Dim iIndexComando As Integer
Dim vValor As Variant
Dim bAchou As Boolean
Dim iContador As Integer

Const VOLUME_ESPECIE = 1
Const VOLUME_MARCA = 2

On Error GoTo Erro_Atualiza_Versao_MarcaEspecie
    
    'abrir transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 205046

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 205047
    Next

    sConteudo = String(STRING_CONFIG_CONTEUDO, 0)

    'Vê se tem que atualizar
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Conteudo FROM AdmConfig WHERE Codigo = ? ", 0, sConteudo, "GERA_CAMPO_GEN_MARCAESPECIE")
    If lErro <> AD_SQL_SUCESSO Then gError 205048

    'Busca o Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205049

    If lErro = AD_SQL_SUCESSO And sConteudo = "1" Then
    
        iIndexComando = 3
    
        For iCampo = 1 To 2
        
            Set colValores = New Collection
        
            If iCampo = VOLUME_ESPECIE Then
                sCampo = "VolumeEspecie"
            Else
                sCampo = "VolumeMarca"
            End If
            
            For iTabela = 1 To 3
                
                If iTabela = 1 Then
                    sTabela = "NFiscal"
                ElseIf iTabela = 2 Then
                    sTabela = "PedidosDeVenda"
                Else
                    sTabela = "PedidosDeVendaBaixados"
                End If
    
                sValorCampo = String(255, 0)
        
                lErro = Comando_Executar(alComando(iIndexComando), "SELECT DISTINCT " & sCampo & " FROM " & sTabela & " WHERE " & sCampo & " <> '' ", sValorCampo)
                If lErro <> AD_SQL_SUCESSO Then gError 205050
            
                'Busca o Primeiro
                lErro = Comando_BuscarPrimeiro(alComando(iIndexComando))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205051
                
                Do While lErro <> AD_SQL_SEM_DADOS
                
                    bAchou = False
                    For Each vValor In colValores
                        If UCase(vValor) = UCase(sValorCampo) Then
                            bAchou = True
                            Exit For
                        End If
                    Next
                    If Not bAchou Then
                        colValores.Add sValorCampo
                    End If
                
                    lErro = Comando_BuscarProximo(alComando(iIndexComando))
                    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205052
                
                Loop
    
                iIndexComando = iIndexComando + 1
            Next
            
            iContador = 0
            For Each vValor In colValores
                iContador = iContador + 1
                lErro = Comando_Executar(alComando(iIndexComando), "INSERT INTO CamposGenericosValores (CodCampo, CodValor, Padrao, Valor) VALUES (?,?,?,?)", _
                iCampo, iContador, 0, CStr(vValor))
                If lErro <> AD_SQL_SUCESSO Then gError 205053
                'iIndexComando = iIndexComando + 1
                
                For iTabela = 1 To 3
                    
                    If iTabela = 1 Then
                        sTabela = "NFiscal"
                    ElseIf iTabela = 2 Then
                        sTabela = "PedidosDeVenda"
                    Else
                        sTabela = "PedidosDeVendaBaixados"
                    End If
                    
                    lErro = Comando_Executar(alComando(iIndexComando + iTabela), "UPDATE " & sTabela & " SET " & sCampo & " =  ? WHERE " & sCampo & " = ? ", _
                     iContador, CStr(vValor))
                    If lErro <> AD_SQL_SUCESSO Then gError 205054
                    'iIndexComando = iIndexComando + 1
                    
'                    lErro = Comando_Executar(alComando(iIndexComando), "ALTER TABLE " & sTabela & " ALTER COLUMN " & sCampo & " INT ")
'                    If lErro <> AD_SQL_SUCESSO Then gError 205055
'                    iIndexComando = iIndexComando + 1
                    
                Next
    
            Next
        
        Next
        
        lErro = Comando_ExecutarPos(alComando(2), "UPDATE AdmConfig SET Conteudo = ? ", alComando(1), "0")
        If lErro <> AD_SQL_SUCESSO Then gError 205056
   
    End If
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
     'fechar transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 205057
    
    Atualiza_Versao_MarcaEspecie = SUCESSO
    
    Exit Function
    
Erro_Atualiza_Versao_MarcaEspecie:
    
    Atualiza_Versao_MarcaEspecie = gErr
    
    Select Case gErr
        
        Case 205046
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 205047
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 205048, 205049
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ADMCONFIG", gErr)
            
        Case 205050 To 205055
        
        Case 205056
            Call Rotina_Erro(vbOKOnly, "ERRO_UPDATE_ADMCONFIG", gErr)
        
        Case 205057
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 205058)
            
    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Call Transacao_Rollback
    
    Exit Function
    
    Exit Function
    
End Function

Private Function Atualiza_Versao_CondPagtoAux(ByVal objCondicaoPagto As ClassCondicaoPagto) As Long
'Gera objCondicaoPagto.colParcelas a partir de dados de objCondicaoPagto

Dim iIndice As Integer, iResto As Integer, dValorParcela As Double, iSeq As Integer
Dim dValor As Double, iNumParcelas As Integer, objParc As ClassCondicaoPagtoParc, iDiasAcum As Integer

On Error GoTo Erro_Atualiza_Versao_CondPagtoAux

    dValor = 1000000
    iNumParcelas = objCondicaoPagto.iNumeroParcelas
    
    If iNumParcelas <> 1 Then
    
        'Calcula o resto da divisão inteira
        iResto = Resto(dValor * 100, iNumParcelas)
    
        If (iResto <> 0) Then
            dValorParcela = (dValor * 100) / iNumParcelas
            dValorParcela = Int(dValorParcela) / 100
        Else
            dValorParcela = dValor / iNumParcelas
        End If
        
    Else
    
        dValorParcela = dValor
        iResto = 0
        
    End If

    'Acrescentar valores das parcelas na coleção
    For iIndice = 1 To iNumParcelas - iResto

        Set objParc = New ClassCondicaoPagtoParc
        
        iSeq = iSeq + 1
        
        objParc.iSeq = iSeq
        objParc.dPercReceb = dValorParcela / 1000000
        
        objCondicaoPagto.colParcelas.Add objParc

    Next

    'Soma 0.01 ao Valor da Parcela
    dValorParcela = dValorParcela + 0.01

    'Se a divisão não foi exata acrescentar as "iResto" últimas parcelas adicionadas de 0.01
    For iIndice = 1 To iResto

        Set objParc = New ClassCondicaoPagtoParc
        
        iSeq = iSeq + 1
        
        objParc.iSeq = iSeq
        objParc.dPercReceb = dValorParcela / 1000000
        
        objCondicaoPagto.colParcelas.Add objParc

    Next

    'completa os outros atributos
    For Each objParc In objCondicaoPagto.colParcelas
        
        If objParc.iSeq = 1 Then
            objParc.iTipoDataBase = IIf(objCondicaoPagto.iDataFixa = 0, CONDPAGTO_TIPODATABASE_EMISSAO, CONDPAGTO_TIPODATABASE_DATAFIXA)
            objParc.iTipoIntervalo = CONDPAGTO_TIPOINTERVALO_DIAS
            objParc.iDias = objCondicaoPagto.iDiasParaPrimeiraParcela
        Else
            If objCondicaoPagto.iMensal Then
                objParc.iTipoDataBase = CONDPAGTO_TIPODATABASE_PARCANTERIOR
                objParc.iTipoIntervalo = CONDPAGTO_TIPOINTERVALO_DIAMES
                objParc.iDias = objCondicaoPagto.iDiaDoMes
            Else
                objParc.iTipoIntervalo = CONDPAGTO_TIPOINTERVALO_DIAS
                If objCondicaoPagto.iDataFixa = 0 Then
                    objParc.iTipoDataBase = CONDPAGTO_TIPODATABASE_EMISSAO
                    objParc.iDias = iDiasAcum + objCondicaoPagto.iIntervaloParcelas
                Else
                    objParc.iTipoDataBase = CONDPAGTO_TIPODATABASE_PARCANTERIOR
                    objParc.iDias = objCondicaoPagto.iIntervaloParcelas
                End If
            End If
        End If
        objParc.iModificador = objCondicaoPagto.iModificador
        iDiasAcum = objParc.iDias
        
    Next
    
    Atualiza_Versao_CondPagtoAux = SUCESSO
     
    Exit Function
    
Erro_Atualiza_Versao_CondPagtoAux:

    Atualiza_Versao_CondPagtoAux = gErr
     
    Select Case gErr
          
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 205059)
     
    End Select
     
    Exit Function

End Function

Private Function Atualiza_Versao_Cidades() As Long

Dim lErro As Long
Dim lTransacao As Long
Dim alComando(1 To 4) As Long
Dim iIndice As Integer
Dim sConteudo As String
Dim sCidade As String
Dim lCodigo As Long

On Error GoTo Erro_Atualiza_Versao_Cidades
    
    'abrir transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 205034

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 205035
    Next

    sConteudo = String(STRING_CONFIG_CONTEUDO, 0)

    'Vê se tem que atualizar
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Conteudo FROM AdmConfig WHERE Codigo = ? ", 0, sConteudo, "GERA_CIDADES")
    If lErro <> AD_SQL_SUCESSO Then gError 205036

    'Busca o Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205037

    If lErro = AD_SQL_SUCESSO And sConteudo = "1" Then
    
        sCidade = String(255, 0)
    
        lErro = Comando_Executar(alComando(3), "SELECT DISTINCT Cidade FROM Enderecos WHERE Cidade <> '' ORDER BY Cidade", sCidade)
        If lErro <> AD_SQL_SUCESSO Then gError 205050
    
        'Busca o Primeiro
        lErro = Comando_BuscarPrimeiro(alComando(3))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205051
        
        lCodigo = 0
        Do While lErro <> AD_SQL_SEM_DADOS
        
            lCodigo = lCodigo + 1
        
            lErro = Comando_Executar(alComando(4), "INSERT INTO Cidades (Codigo, Descricao) VALUES (?,?)", _
            lCodigo, sCidade)
            If lErro <> AD_SQL_SUCESSO Then gError 205050
        
            lErro = Comando_BuscarProximo(alComando(3))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205051
        
        Loop
    
        lErro = Comando_ExecutarPos(alComando(2), "UPDATE AdmConfig SET Conteudo = ? ", alComando(1), "0")
        If lErro <> AD_SQL_SUCESSO Then gError 205043
    
    End If
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
     'fechar transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 205044
    
    Atualiza_Versao_Cidades = SUCESSO
    
    Exit Function
    
Erro_Atualiza_Versao_Cidades:
    
    Atualiza_Versao_Cidades = gErr
    
    Select Case gErr
        
        Case 205034
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 205035
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 205036, 205037
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ADMCONFIG", gErr)
            
        Case 205038 To 205041
        
        Case 205042
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CIDADES", gErr, sCidade)
        
        Case 205043
            Call Rotina_Erro(vbOKOnly, "ERRO_UPDATE_ADMCONFIG", gErr)
        
        Case 205044
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 205045)
            
    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Call Transacao_Rollback
    
    Exit Function
    
End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'GRAVAÇÃO
Public Function Rotas_Grava(ByVal objRotas As ClassRotas) As Long

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_Rotas_Grava

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 205092

    lErro = CF("Rotas_Grava_EmTrans", objRotas)
    If lErro <> SUCESSO Then gError 205093

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 205094

    Rotas_Grava = SUCESSO

    Exit Function

Erro_Rotas_Grava:

    Rotas_Grava = gErr

    Select Case gErr

        Case 205092
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 205093

        Case 205094
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 205095)

    End Select

    'Desfaz Transação
    Call Transacao_Rollback

    Exit Function

End Function

Public Function Rotas_Grava_EmTrans(ByVal objRotas As ClassRotas) As Long

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim lNumIntDoc As Long
Dim lCodNumerico As Long

On Error GoTo Erro_Rotas_Grava_EmTrans

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 205096
    Next
    
    If objRotas.iFilialEmpresa = 0 Then objRotas.iFilialEmpresa = giFilialEmpresa

    'Le a tabela de Rotas
    lErro = Comando_ExecutarPos(alComando(0), "SELECT NumIntDoc FROM Rotas WHERE Codigo= ?  AND Chave= ? AND FilialEmpresa = ?", _
                0, lNumIntDoc, objRotas.sCodigo, objRotas.lChave, objRotas.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 205097

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205098

    'Se existir => UPDATE, senão => INSERT
    If lErro = AD_SQL_SUCESSO Then
    
        objRotas.lNumIntDoc = lNumIntDoc

        'Trava registro contra alterações/Leituras
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> SUCESSO Then gError 205099

        lErro = Comando_ExecutarPos(alComando(1), "UPDATE Rotas SET Descricao= ? , Ativo= ? ", alComando(0), _
                objRotas.sDescricao, objRotas.iAtivo)
        If lErro <> AD_SQL_SUCESSO Then gError 205100
        
        lErro = CF("RotasVend_Exclui", objRotas)
        If lErro <> SUCESSO Then gError 205101

        lErro = CF("RotasPontos_Exclui", objRotas)
        If lErro <> SUCESSO Then gError 205102

    Else

        'Obter NumIntDoc
        lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_INT_PROX_ROTAS", lNumIntDoc)
        If lErro <> SUCESSO Then gError 205103
        
        'Grava o código numérico para poder pegar a numeração automaticamente para quem quiser trabalhar
        'com rotas com código numérico
        If Valor_Long_Critica(objRotas.sCodigo) = SUCESSO Then
            lCodNumerico = StrParaLong(objRotas.sCodigo)
        End If

        objRotas.lNumIntDoc = lNumIntDoc

        lErro = Comando_Executar(alComando(1), "INSERT INTO Rotas( NumIntDoc, Codigo, Chave, FilialEmpresa, " & _
                "Descricao, Ativo, CodigoNumerico) VALUES (?,?,?,?,?,?,?)", _
                objRotas.lNumIntDoc, objRotas.sCodigo, objRotas.lChave, objRotas.iFilialEmpresa, _
                objRotas.sDescricao, objRotas.iAtivo, lCodNumerico)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205104

    End If
    
    lErro = CF("RotasVend_Insere", objRotas)
    If lErro <> SUCESSO Then gError 205105

    lErro = CF("RotasPontos_Insere", objRotas)
    If lErro <> SUCESSO Then gError 205106

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Rotas_Grava_EmTrans = SUCESSO

    Exit Function

Erro_Rotas_Grava_EmTrans:

    Rotas_Grava_EmTrans = gErr

    Select Case gErr

        Case 205096
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 205097, 205098
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ROTAS", gErr)

        Case 205099
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_ROTAS", gErr)

        Case 205100
            Call Rotina_Erro(vbOKOnly, "ERRO_UPDATE_ROTAS", gErr)
            
        Case 205101 To 205103, 205105, 205106

        Case 205104
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_ROTAS", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 205107)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'EXCLUSÃO
Public Function Rotas_Exclui(ByVal objRotas As ClassRotas) As Long

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_Rotas_Exclui

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 205108

    lErro = CF("Rotas_Exclui_EmTrans", objRotas)
    If lErro <> SUCESSO Then gError 205109

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 205110

    Rotas_Exclui = SUCESSO

    Exit Function

Erro_Rotas_Exclui:

    Rotas_Exclui = gErr

    Select Case gErr

        Case 205108
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 205109

        Case 205110
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 205111)

    End Select

    'Desfaz Transação
    Call Transacao_Rollback

    Exit Function

End Function

Public Function Rotas_Exclui_EmTrans(ByVal objRotas As ClassRotas) As Long

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim lNumIntDoc As Long

On Error GoTo Erro_Rotas_Exclui_EmTrans

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 205112
    Next
    
    If objRotas.iFilialEmpresa = 0 Then objRotas.iFilialEmpresa = giFilialEmpresa

    'Le a tabelaRotas
    lErro = Comando_ExecutarPos(alComando(0), "SELECT NumIntDoc FROM Rotas WHERE Codigo= ? AND Chave= ? AND FilialEmpresa = ? ", _
                0, lNumIntDoc, objRotas.sCodigo, objRotas.lChave, objRotas.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 205113

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205114

    'Se não existir => ERRO
    If lErro = AD_SQL_SEM_DADOS Then gError 205115
    
    objRotas.lNumIntDoc = lNumIntDoc

    'Trava registro contra alterações/Leituras
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> SUCESSO Then gError 205116

    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM Rotas", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 205117
    
    lErro = CF("RotasVend_Exclui", objRotas)
    If lErro <> SUCESSO Then gError 205118

    lErro = CF("RotasPontos_Exclui", objRotas)
    If lErro <> SUCESSO Then gError 205119

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Rotas_Exclui_EmTrans = SUCESSO

    Exit Function

Erro_Rotas_Exclui_EmTrans:

    Rotas_Exclui_EmTrans = gErr

    Select Case gErr

        Case 205112
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 205113, 205114
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ROTAS", gErr)

        Case 205115
            Call Rotina_Erro(vbOKOnly, "ERRO_ROTAS_NAO_CADASTRADO", gErr, objRotas.sCodigo, objRotas.lChave)

        Case 205116
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_ROTAS", gErr)

        Case 205117
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_ROTAS", gErr)
            
        Case 205118, 205119

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 205120)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function RotasVend_Insere(ByVal objRotas As ClassRotas) As Long

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer
Dim lNumIntDoc As Long
Dim objRotasVend As ClassRotasVend

On Error GoTo Erro_RotasVend_Insere

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 205121
    Next

    For Each objRotasVend In objRotas.colVend
        
        'Obter NumIntDoc
        lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_INT_PROX_ROTASVEND", lNumIntDoc)
        If lErro <> SUCESSO Then gError 205122

        objRotasVend.lNumIntDoc = lNumIntDoc
        objRotasVend.lNumIntDocRota = objRotas.lNumIntDoc

        lErro = Comando_Executar(alComando(1), "INSERT INTO RotasVend( NumIntDoc, NumIntDocRota, Seq, Vendedor) VALUES (?,?,?,?)", _
                objRotasVend.lNumIntDoc, objRotasVend.lNumIntDocRota, objRotasVend.iSeq, objRotasVend.iVendedor)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205123

    Next

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    RotasVend_Insere = SUCESSO

    Exit Function

Erro_RotasVend_Insere:

    RotasVend_Insere = gErr

    Select Case gErr
    
        Case 205121
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 205122

        Case 205123
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_ROTASVEND", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 205124)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function RotasVend_Exclui(ByVal objRotas As ClassRotas) As Long

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim lNumIntDoc As Long

On Error GoTo Erro_RotasVend_Exclui

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 205125
    Next

    'Le a tabelaRotasVend
    lErro = Comando_ExecutarPos(alComando(0), "SELECT NumIntDoc FROM RotasVend WHERE NumIntDocRota= ? ", _
                0, lNumIntDoc, objRotas.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 205126

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205127

    Do While lErro <> AD_SQL_SEM_DADOS

        'Trava registro contra alterações/Leituras
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> SUCESSO Then gError 205128
    
        lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM RotasVend", alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 205129

        'Busca Próximo
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205130

    Loop

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    RotasVend_Exclui = SUCESSO

    Exit Function

Erro_RotasVend_Exclui:

    RotasVend_Exclui = gErr

    Select Case gErr

        Case 205125
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 205126, 205127, 205130
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ROTASVEND", gErr)

        Case 205128
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_ROTASVEND", gErr)

        Case 205129
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_ROTASVEND", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 205131)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function RotasPontos_Insere(ByVal objRotas As ClassRotas) As Long

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer
Dim objRotasPontos As ClassRotasPontos
Dim lNumIntDoc As Long

On Error GoTo Erro_RotasPontos_Insere

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 205132
    Next
    
    For Each objRotasPontos In objRotas.colPontos

        'Obter NumIntDoc
        lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_INT_PROX_ROTASPONTOS", lNumIntDoc)
        If lErro <> SUCESSO Then gError 205133

        objRotasPontos.lNumIntDoc = lNumIntDoc
        objRotasPontos.lNumIntDocRota = objRotas.lNumIntDoc

        lErro = Comando_Executar(alComando(1), "INSERT INTO RotasPontos( NumIntDoc, NumIntDocRota, Seq, Cliente, " & _
                "Observacao, Meio, Tempo, Distancia, Selecionado,FilialCliente) VALUES (?,?,?,?,?,?,?,?,?,?)", _
                objRotasPontos.lNumIntDoc, objRotasPontos.lNumIntDocRota, objRotasPontos.iSeq, objRotasPontos.lCliente, _
                objRotasPontos.sObservacao, objRotasPontos.lMeio, objRotasPontos.dTempo, objRotasPontos.dDistancia, objRotasPontos.iSelecionado, objRotasPontos.iFilialCliente)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205134

    Next

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    RotasPontos_Insere = SUCESSO

    Exit Function

Erro_RotasPontos_Insere:

    RotasPontos_Insere = gErr

    Select Case gErr

        Case 205132
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 205133

        Case 205134
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_ROTASPONTOS", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 205135)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function RotasPontos_Exclui(ByVal objRotas As ClassRotas) As Long

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim lNumIntDoc As Long

On Error GoTo Erro_RotasPontos_Exclui

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 205136
    Next

    'Le a tabelaRotasVend
    lErro = Comando_ExecutarPos(alComando(0), "SELECT NumIntDoc FROM RotasPontos WHERE NumIntDocRota= ? ", _
                0, lNumIntDoc, objRotas.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 205137

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205138

    Do While lErro <> AD_SQL_SEM_DADOS

        'Trava registro contra alterações/Leituras
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> SUCESSO Then gError 205139
    
        lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM RotasPontos", alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 205140

        'Busca Próximo
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205141

    Loop

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    RotasPontos_Exclui = SUCESSO

    Exit Function

Erro_RotasPontos_Exclui:

    RotasPontos_Exclui = gErr

    Select Case gErr

        Case 205136
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 205137, 205138, 205141
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ROTASPONTOS", gErr)

        Case 205139
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_ROTASPONTOS", gErr)

        Case 205140
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_ROTASPONTOS", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 205142)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Rotas_Automatico(ByVal lChave As Long, dNumProx As Double) As Long

Dim lErro As Long
Dim sFiltro As String

On Error GoTo Erro_Rotas_Automatico

    sFiltro = "Chave = " & CStr(lChave)

    lErro = CF("Config_ObterAutomatico4", "Rotas", "CodigoNumerico", dNumProx, sFiltro)
    If lErro <> SUCESSO Then gError 205250

    Rotas_Automatico = SUCESSO
    
    Exit Function

Erro_Rotas_Automatico:

    Rotas_Automatico = gErr

    Select Case gErr
    
        Case 205250

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 205251)
    
    End Select

    Exit Function

End Function

Public Function Rotas_Quebra(ByVal objRota1 As ClassRotas, ByVal objRota2 As ClassRotas) As Long

Dim lErro As Long
Dim lTransacao As Long
Dim objRotaBD As New ClassRotas

On Error GoTo Erro_Rotas_Quebra

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 205252
    
    objRotaBD.sCodigo = objRota2.sCodigo
    objRotaBD.lChave = objRota2.lChave
    
    lErro = CF("Rotas_Le", objRotaBD)
    If lErro <> SUCESSO And lErro <> ERRO_LEITURA_SEM_DADOS Then gError 205253
    
    If lErro = SUCESSO Then gError 205254 'A rota2 tem que ser nova

    lErro = CF("Rotas_Grava_EmTrans", objRota1)
    If lErro <> SUCESSO Then gError 205255
    
    lErro = CF("Rotas_Grava_EmTrans", objRota2)
    If lErro <> SUCESSO Then gError 205256

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 205257

    Rotas_Quebra = SUCESSO

    Exit Function

Erro_Rotas_Quebra:

    Rotas_Quebra = gErr

    Select Case gErr

        Case 205252
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 205253, 205255, 205256
        
        Case 205254
            Call Rotina_Erro(vbOKOnly, "ERRO_ROTA_JA_EXISTENTE", gErr, objRotaBD.sCodigo, objRotaBD.lChave)

        Case 205094
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 205258)

    End Select

    'Desfaz Transação
    Call Transacao_Rollback

    Exit Function

End Function

Public Function Rotas_Transf(ByVal objRota1 As ClassRotas, ByVal objRota2 As ClassRotas) As Long

Dim lErro As Long
Dim lTransacao As Long
Dim objRotaBD As New ClassRotas
Dim objPonto As ClassRotasPontos

On Error GoTo Erro_Rotas_Transf

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 205252
    
    objRotaBD.sCodigo = objRota2.sCodigo
    objRotaBD.lChave = objRota2.lChave
    
    lErro = CF("Rotas_Le", objRotaBD)
    If lErro <> SUCESSO And lErro <> ERRO_LEITURA_SEM_DADOS Then gError 205253
    
    If lErro <> SUCESSO Then gError 205254 'A rota2 tem que existir
    
    For Each objPonto In objRota2.colPontos
        objPonto.iSeq = objRotaBD.colPontos.Count + 1
        objRotaBD.colPontos.Add objPonto
    Next

    lErro = CF("Rotas_Grava_EmTrans", objRota1)
    If lErro <> SUCESSO Then gError 205255
    
    lErro = CF("Rotas_Grava_EmTrans", objRotaBD)
    If lErro <> SUCESSO Then gError 205256

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 205257

    Rotas_Transf = SUCESSO

    Exit Function

Erro_Rotas_Transf:

    Rotas_Transf = gErr

    Select Case gErr

        Case 205252
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 205253, 205255, 205256
        
        Case 205254
            Call Rotina_Erro(vbOKOnly, "ERRO_ROTA_NAO_CADASTRADA", gErr, objRotaBD.sCodigo, objRotaBD.lChave)

        Case 205094
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 205258)

    End Select

    'Desfaz Transação
    Call Transacao_Rollback

    Exit Function

End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'GRAVAÇÃO
Public Function Veiculos_Grava(ByVal objVeiculos As ClassVeiculos) As Long

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_Veiculos_Grava

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 205282

    lErro = CF("Veiculos_Grava_EmTrans", objVeiculos)
    If lErro <> SUCESSO Then gError 205283

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 205284

    Veiculos_Grava = SUCESSO

    Exit Function

Erro_Veiculos_Grava:

    Veiculos_Grava = gErr

    Select Case gErr

        Case 205282
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 205283

        Case 205284
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 205285)

    End Select

    'Desfaz Transação
    Call Transacao_Rollback

    Exit Function

End Function

Public Function Veiculos_Grava_EmTrans(ByVal objVeiculos As ClassVeiculos) As Long

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim iAux As Integer

On Error GoTo Erro_Veiculos_Grava_EmTrans

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 205286
    Next

    'Le a tabelaVeiculos
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Proprio FROM Veiculos WHERE Codigo= ? ", _
                0, iAux, objVeiculos.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 205287

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205288

    'Se existir => UPDATE, senão => INSERT
    If lErro = AD_SQL_SUCESSO Then

        'Trava registro contra alterações/Leituras
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> SUCESSO Then gError 205289

        lErro = Comando_ExecutarPos(alComando(1), "UPDATE Veiculos SET Descricao= ? , Tipo= ? , Proprio= ? , Placa= ?, PlacaUF= ? , " & _
                "CapacidadeKg= ? , VolumeM3= ? , CustoHora= ? , DispPadraoDe= ? , DispPadraoAte= ? ", alComando(0), _
                objVeiculos.sDescricao, objVeiculos.lTipo, objVeiculos.iProprio, objVeiculos.sPlaca, objVeiculos.sPlacaUF, _
                objVeiculos.dCapacidadeKg, objVeiculos.dVolumeM3, objVeiculos.dCustoHora, objVeiculos.dDispPadraoDe, objVeiculos.dDispPadraoAte)
        If lErro <> AD_SQL_SUCESSO Then gError 205290

    Else


        lErro = Comando_Executar(alComando(1), "INSERT INTO Veiculos( Codigo, Descricao, Tipo, Proprio, " & _
                "Placa, PlacaUF, CapacidadeKg, VolumeM3, CustoHora, DispPadraoDe, " & _
                "DispPadraoAte) VALUES (?,?,?,?,?,?,?,?,?,?,?)", _
                objVeiculos.lCodigo, objVeiculos.sDescricao, objVeiculos.lTipo, objVeiculos.iProprio, _
                objVeiculos.sPlaca, objVeiculos.sPlacaUF, objVeiculos.dCapacidadeKg, objVeiculos.dVolumeM3, objVeiculos.dCustoHora, objVeiculos.dDispPadraoDe, _
                objVeiculos.dDispPadraoAte)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205291

    End If

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Veiculos_Grava_EmTrans = SUCESSO

    Exit Function

Erro_Veiculos_Grava_EmTrans:

    Veiculos_Grava_EmTrans = gErr

    Select Case gErr

        Case 205286
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 205287, 205288
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_VEICULOS", gErr)

        Case 205289
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_VEICULOS", gErr)

        Case 205290
            Call Rotina_Erro(vbOKOnly, "ERRO_UPDATE_VEICULOS", gErr)

        Case 205291
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_VEICULOS", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 205292)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'EXCLUSÃO
Public Function Veiculos_Exclui(ByVal objVeiculos As ClassVeiculos) As Long

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_Veiculos_Exclui

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 205271

    lErro = CF("Veiculos_Exclui_EmTrans", objVeiculos)
    If lErro <> SUCESSO Then gError 205272

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 205273

    Veiculos_Exclui = SUCESSO

    Exit Function

Erro_Veiculos_Exclui:

    Veiculos_Exclui = gErr

    Select Case gErr

        Case 205271
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 205272

        Case 205273
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 205274)

    End Select

    'Desfaz Transação
    Call Transacao_Rollback

    Exit Function

End Function

Public Function Veiculos_Exclui_EmTrans(ByVal objVeiculos As ClassVeiculos) As Long

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim iAux As Integer

On Error GoTo Erro_Veiculos_Exclui_EmTrans

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 205275
    Next

    'Le a tabelaVeiculos
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Proprio FROM Veiculos WHERE Codigo= ? ", _
                0, iAux, objVeiculos.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 205276

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205277

    'Se não existir => ERRO
    If lErro = AD_SQL_SEM_DADOS Then gError 205278

    'Trava registro contra alterações/Leituras
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> SUCESSO Then gError 205279

    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM Veiculos", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 205280

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Veiculos_Exclui_EmTrans = SUCESSO

    Exit Function

Erro_Veiculos_Exclui_EmTrans:

    Veiculos_Exclui_EmTrans = gErr

    Select Case gErr

        Case 205275
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 205276, 205277
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_VEICULOS", gErr)

        Case 205278
            Call Rotina_Erro(vbOKOnly, "ERRO_VEICULOS_NAO_CADASTRADO", gErr, objVeiculos.lCodigo)

        Case 205279
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_VEICULOS", gErr)

        Case 205280
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_VEICULOS", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 205281)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'GRAVAÇÃO
Public Function MapaDeEntrega_Grava(ByVal objMapaDeEntrega As ClassMapaDeEntrega) As Long

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_MapaDeEntrega_Grava

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 205355

    lErro = CF("MapaDeEntrega_Grava_EmTrans", objMapaDeEntrega)
    If lErro <> SUCESSO Then gError 205356

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 205357

    MapaDeEntrega_Grava = SUCESSO

    Exit Function

Erro_MapaDeEntrega_Grava:

    MapaDeEntrega_Grava = gErr

    Select Case gErr

        Case 205355
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 205356

        Case 205357
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 205358)

    End Select

    'Desfaz Transação
    Call Transacao_Rollback

    Exit Function

End Function

Public Function MapaDeEntrega_Grava_EmTrans(ByVal objMapaDeEntrega As ClassMapaDeEntrega) As Long

Dim lErro As Long
Dim alComando(0 To 2) As Long
Dim iIndice As Integer
Dim lNumIntDoc As Long, sSQL As String
Dim iTipoDoc As Integer

On Error GoTo Erro_MapaDeEntrega_Grava_EmTrans

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 205360
    Next

    'Le a tabelaMapaDeEntrega
    lErro = Comando_ExecutarPos(alComando(0), "SELECT NumIntDoc, TipoDoc FROM MapaDeEntrega WHERE FilialEmpresa= ?  AND Codigo= ? ", _
                0, lNumIntDoc, iTipoDoc, objMapaDeEntrega.iFilialEmpresa, objMapaDeEntrega.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 205361

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205362

    'Se existir => UPDATE, senão => INSERT
    If lErro = AD_SQL_SUCESSO Then

        'Trava registro contra alterações/Leituras
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> SUCESSO Then gError 205363

        objMapaDeEntrega.lNumIntDoc = lNumIntDoc

        lErro = Comando_ExecutarPos(alComando(1), "UPDATE MapaDeEntrega SET Data= ? , Regiao= ? , Veiculo= ? , VolumeTotal= ? , " & _
                "PesoTotal= ? , NumViagens= ? , HoraSaida= ? , HoraRetorno= ? , Responsavel= ?, TipoDoc = ?, Transportadora = ? ", alComando(0), _
                objMapaDeEntrega.dtData, objMapaDeEntrega.iRegiao, objMapaDeEntrega.lVeiculo, objMapaDeEntrega.dVolumeTotal, _
                objMapaDeEntrega.dPesoTotal, objMapaDeEntrega.iNumViagens, objMapaDeEntrega.dHoraSaida, objMapaDeEntrega.dHoraRetorno, objMapaDeEntrega.sResponsavel, objMapaDeEntrega.iTipoDoc, objMapaDeEntrega.iTransportadora)
        If lErro <> AD_SQL_SUCESSO Then gError 205364
        
        If iTipoDoc = MAPAENTREGA_TIPODOC_PV Then
            lErro = MapaDeEntregaPV_Exclui(objMapaDeEntrega)
        Else
            lErro = MapaDeEntregaNF_Exclui(objMapaDeEntrega)
        End If
        If lErro <> SUCESSO Then gError 205359

        lErro = MapaDeEntregaProd_Exclui(objMapaDeEntrega)
        If lErro <> SUCESSO Then gError 205359

    Else

        'Obter NumIntDoc
        lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_INT_PROX_MAPADEENTREGA", lNumIntDoc)
        If lErro <> SUCESSO Then gError 205359

        objMapaDeEntrega.lNumIntDoc = lNumIntDoc

        lErro = Comando_Executar(alComando(1), "INSERT INTO MapaDeEntrega( NumIntDoc, FilialEmpresa, Codigo, Data, " & _
                "Regiao, Veiculo, VolumeTotal, PesoTotal, NumViagens, " & _
                "HoraSaida, HoraRetorno, Responsavel, TipoDoc, Transportadora) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                objMapaDeEntrega.lNumIntDoc, objMapaDeEntrega.iFilialEmpresa, objMapaDeEntrega.lCodigo, objMapaDeEntrega.dtData, _
                objMapaDeEntrega.iRegiao, objMapaDeEntrega.lVeiculo, objMapaDeEntrega.dVolumeTotal, objMapaDeEntrega.dPesoTotal, objMapaDeEntrega.iNumViagens, _
                objMapaDeEntrega.dHoraSaida, objMapaDeEntrega.dHoraRetorno, objMapaDeEntrega.sResponsavel, objMapaDeEntrega.iTipoDoc, objMapaDeEntrega.iTransportadora)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205365

    End If

    If objMapaDeEntrega.iTipoDoc = MAPAENTREGA_TIPODOC_PV Then
        
        'insere registros em MapaDeEntregaProd
        sSQL = "INSERT INTO MapaDeEntregaProd (NumIntDocMapa, Produto, Qtde, Preco, QtdeBonificadas, PrecoBonificadas, qtdeTrocas, precotrocas) " & _
            "SELECT m.numintdoc, ipv.produto, sum(ipv.quantidade), sum(ipv.precounitario*ipv.quantidade), 0,0,0,0 from mapadeentrega m, mapadeentregapv mpv, PedVenTodos pv, ItensPedidoDeVendaTodos ipv where m.NumIntDoc = ? and m.numintdoc = mpv.numintdocmapa and mpv.numintdocpv = pv.numintdoc and pv.codigo = ipv.codpedido and pv.filialempresa = ipv.filialempresa group by m.numintdoc, ipv.produto"
        
        lErro = MapaDeEntregaPV_Insere(objMapaDeEntrega)
    Else
        
        'insere registros em MapaDeEntregaProd
        '??? falta tratar trocas e bonificacoes
        sSQL = "INSERT INTO MapaDeEntregaProd (NumIntDocMapa, Produto, Qtde, Preco, QtdeBonificadas, PrecoBonificadas, qtdeTrocas, precotrocas) " & _
            "SELECT m.numintdoc, inf.produto, sum(inf.quantidade), sum(inf.precounitario*inf.quantidade), 0,0,0,0 from mapadeentrega m, mapadeentreganf mnf, nfiscal nf, itensnfiscal inf where m.NumIntDoc = ? and m.numintdoc = mnf.numintdocmapa and mnf.numintdocnf = nf.numintdoc and nf.numintdoc = inf.numintnf group by m.numintdoc, inf.produto"
             
        lErro = MapaDeEntregaNF_Insere(objMapaDeEntrega)
    End If
    If lErro <> SUCESSO Then gError 205359
   
    lErro = Comando_Executar(alComando(2), sSQL, objMapaDeEntrega.lNumIntDoc)
    If lErro <> SUCESSO Then gError 205359
    
    lErro = MapaDeEntrega_GravarInfoCinta(objMapaDeEntrega)
    If lErro <> SUCESSO Then gError 205359
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    MapaDeEntrega_Grava_EmTrans = SUCESSO

    Exit Function

Erro_MapaDeEntrega_Grava_EmTrans:

    MapaDeEntrega_Grava_EmTrans = gErr

    Select Case gErr

        Case 205359

        Case 205360
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 205361, 205362
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MAPADEENTREGA", gErr)

        Case 205363
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_MAPADEENTREGA", gErr)

        Case 205364
            Call Rotina_Erro(vbOKOnly, "ERRO_UPDATE_MAPADEENTREGA", gErr)

        Case 205365
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MAPADEENTREGA", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 205366)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'EXCLUSÃO
Public Function MapaDeEntrega_Exclui(ByVal objMapaDeEntrega As ClassMapaDeEntrega) As Long

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_MapaDeEntrega_Exclui

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 205344

    lErro = CF("MapaDeEntrega_Exclui_EmTrans", objMapaDeEntrega)
    If lErro <> SUCESSO Then gError 205345

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 205346

    MapaDeEntrega_Exclui = SUCESSO

    Exit Function

Erro_MapaDeEntrega_Exclui:

    MapaDeEntrega_Exclui = gErr

    Select Case gErr

        Case 205344
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 205345

        Case 205346
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 205347)

    End Select

    'Desfaz Transação
    Call Transacao_Rollback

    Exit Function

End Function

Public Function MapaDeEntrega_Exclui_EmTrans(ByVal objMapaDeEntrega As ClassMapaDeEntrega) As Long

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim lNumIntDoc As Long, iTipoDoc As Integer

On Error GoTo Erro_MapaDeEntrega_Exclui_EmTrans

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 205348
    Next

    'Le a tabelaMapaDeEntrega
    lErro = Comando_ExecutarPos(alComando(0), "SELECT TipoDoc, NumIntDoc FROM MapaDeEntrega WHERE FilialEmpresa= ?  AND Codigo= ? ", _
                0, iTipoDoc, lNumIntDoc, objMapaDeEntrega.iFilialEmpresa, objMapaDeEntrega.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 205349

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205350

    'Se não existir => ERRO
    If lErro = AD_SQL_SEM_DADOS Then gError 205351

    'Trava registro contra alterações/Leituras
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> SUCESSO Then gError 205352

    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM MapaDeEntrega", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 205353
    
    objMapaDeEntrega.lNumIntDoc = lNumIntDoc
    
    If iTipoDoc = MAPAENTREGA_TIPODOC_PV Then
        lErro = MapaDeEntregaPV_Exclui(objMapaDeEntrega)
    Else
        lErro = MapaDeEntregaNF_Exclui(objMapaDeEntrega)
    End If
    If lErro <> SUCESSO Then gError 205359

    lErro = MapaDeEntregaProd_Exclui(objMapaDeEntrega)
    If lErro <> SUCESSO Then gError 205359
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    MapaDeEntrega_Exclui_EmTrans = SUCESSO

    Exit Function

Erro_MapaDeEntrega_Exclui_EmTrans:

    MapaDeEntrega_Exclui_EmTrans = gErr

    Select Case gErr

        Case 205348
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 205349, 205350
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MAPADEENTREGA", gErr)

        Case 205351
            Call Rotina_Erro(vbOKOnly, "ERRO_MAPADEENTREGA_NAO_CADASTRADO", gErr, objMapaDeEntrega.iFilialEmpresa, objMapaDeEntrega.lCodigo)

        Case 205352
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_MAPADEENTREGA", gErr)

        Case 205353
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_MAPADEENTREGA", gErr)
            
        Case 205359

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 205354)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function MapaDeEntregaNF_Insere(ByVal objMapa As ClassMapaDeEntrega) As Long

Dim lErro As Long
Dim alComando(0 To 2) As Long
Dim iIndice As Integer
Dim objMapaDeEntregaNF As ClassMapaDeEntregaDoc
Dim lSeq As Long
Dim lCodigo As Long, iFilialEmpresa As Integer, lNumNF As Long, dtDataEmissao As Date

On Error GoTo Erro_MapaDeEntregaNF_Insere

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 205132
    Next
    
    lSeq = 0
    For Each objMapaDeEntregaNF In objMapa.colMapaDoc
    
        'BUSCA A NF EM OUTRA VIAGEM
        lErro = Comando_Executar(alComando(0), "SELECT M.Codigo, M.FilialEmpresa, N.NumNotaFiscal, N.DataEmissao FROM MapaDeEntrega AS M, MapaDeEntregaNF AS X, NFiscal AS N WHERE M.NumIntDoc = X.NumIntDocMapa AND X.NumIntDocNF = N.NumIntDoc AND N.NumIntDoc = ? AND M.NumIntDoc <> ? ", _
                    lCodigo, iFilialEmpresa, lNumNF, dtDataEmissao, objMapaDeEntregaNF.lNumIntDoc, objMapa.lNumIntDoc)
        If lErro <> AD_SQL_SUCESSO Then gError 205368
    
        'Busca Primeiro
        lErro = Comando_BuscarPrimeiro(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205369
        
        If lErro = AD_SQL_SUCESSO Then gError 205370
    
        lSeq = lSeq + 1
        
        objMapaDeEntregaNF.lNumIntDocMapa = objMapa.lNumIntDoc

        lErro = Comando_Executar(alComando(1), "INSERT INTO MapaDeEntregaNF( NumIntDocMapa, NumIntDocNF, Seq) VALUES (?,?,?)", _
                objMapaDeEntregaNF.lNumIntDocMapa, objMapaDeEntregaNF.lNumIntDoc, lSeq)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205134

    Next

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    MapaDeEntregaNF_Insere = SUCESSO

    Exit Function

Erro_MapaDeEntregaNF_Insere:

    MapaDeEntregaNF_Insere = gErr

    Select Case gErr

        Case 205132
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 205133

        Case 205134
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MAPADEENTREGA", gErr)

        Case 205368, 205369
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MAPADEENTREGA", gErr)
            
        Case 205370
            Call Rotina_Erro(vbOKOnly, "ERRO_NF_EM_OUTRA_VIAGEM", gErr, lNumNF, dtDataEmissao, lCodigo, iFilialEmpresa)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 205135)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function MapaDeEntregaPV_Insere(ByVal objMapa As ClassMapaDeEntrega) As Long

Dim lErro As Long
Dim alComando(0 To 5) As Long
Dim iIndice As Integer
Dim objMapaDeEntregaPV As ClassMapaDeEntregaDoc
Dim lSeq As Long, sPlaca As String, sPlacaUF As String, sPlacaAux As String
Dim lCodigo As Long, iFilialEmpresa As Integer, lCodPV As Long, dtDataEmissao As Date

On Error GoTo Erro_MapaDeEntregaPV_Insere

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 205132
    Next
    
    If gobjFAT.iAtualizaPlacaPVMapaEntrega <> 0 And objMapa.lVeiculo <> 0 Then
    
        sPlaca = String(STRING_VEICULO_PLACA, 0)
        sPlacaUF = String(STRING_VEICULO_PLACA_UF, 0)
        lErro = Comando_Executar(alComando(3), "SELECT Placa, PlacaUF FROM Veiculos WHERE Codigo = ?", sPlaca, sPlacaUF, objMapa.lVeiculo)
        If lErro <> AD_SQL_SUCESSO Then gError 205368
    
        lErro = Comando_BuscarProximo(alComando(3))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205369
    
        If lErro <> AD_SQL_SUCESSO Then sPlaca = ""
    
    End If
    
    lSeq = 0
    For Each objMapaDeEntregaPV In objMapa.colMapaDoc
    
        'BUSCA O PV EM OUTRA VIAGEM
        lErro = Comando_Executar(alComando(0), "SELECT M.Codigo, M.FilialEmpresa, P.Codigo, P.DataEmissao FROM MapaDeEntrega AS M, MapaDeEntregaPV AS X, PedVenTodos AS P WHERE M.NumIntDoc = X.NumIntDocMapa AND X.NumIntDocPV = P.NumIntDoc AND P.NumIntDoc = ? AND M.NumIntDoc <> ? ", _
                    lCodigo, iFilialEmpresa, lCodPV, dtDataEmissao, objMapaDeEntregaPV.lNumIntDoc, objMapa.lNumIntDoc)
        If lErro <> AD_SQL_SUCESSO Then gError 205368
    
        'Busca Primeiro
        lErro = Comando_BuscarPrimeiro(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205369
        
        If lErro = AD_SQL_SUCESSO Then gError 205370
    
        lSeq = lSeq + 1
        
        objMapaDeEntregaPV.lNumIntDocMapa = objMapa.lNumIntDoc

        lErro = Comando_Executar(alComando(1), "INSERT INTO MapaDeEntregaPV( NumIntDocMapa, NumIntDocPV, Seq) VALUES (?,?,?)", _
                objMapaDeEntregaPV.lNumIntDocMapa, objMapaDeEntregaPV.lNumIntDoc, lSeq)
        If lErro <> AD_SQL_SUCESSO Then gError 205134

        If sPlaca <> "" Then
        
            sPlacaAux = String(STRING_VEICULO_PLACA, 0)
            lErro = Comando_ExecutarPos(alComando(4), "SELECT Placa FROM PedidosDeVenda WHERE NumIntDoc = ?", 0, sPlacaAux, objMapaDeEntregaPV.lNumIntDoc)
            If lErro <> AD_SQL_SUCESSO Then gError 205368
        
            lErro = Comando_BuscarProximo(alComando(4))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205369
    
            If lErro = AD_SQL_SUCESSO Then
    
                lErro = Comando_ExecutarPos(alComando(5), "UPDATE PedidosDeVenda SET Placa = ?, PlacaUF = ?", alComando(4), sPlaca, sPlacaUF)
                If lErro <> AD_SQL_SUCESSO Then gError 205134
        
            End If
        
        End If
    
    Next

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    MapaDeEntregaPV_Insere = SUCESSO

    Exit Function

Erro_MapaDeEntregaPV_Insere:

    MapaDeEntregaPV_Insere = gErr

    Select Case gErr

        Case 205132
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 205133

        Case 205134
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MAPADEENTREGA", gErr)

        Case 205368, 205369
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MAPADEENTREGA", gErr)
            
        Case 205370
            Call Rotina_Erro(vbOKOnly, "ERRO_PV_EM_OUTRA_VIAGEM", gErr, lCodPV, dtDataEmissao, lCodigo, iFilialEmpresa)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 205135)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function MapaDeEntregaNF_Exclui(ByVal objMapa As ClassMapaDeEntrega) As Long

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim lNumIntDoc As Long

On Error GoTo Erro_MapaDeEntregaNF_Exclui

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 205136
    Next

    'Le a tabelaRotasVend
    lErro = Comando_ExecutarPos(alComando(0), "SELECT NumIntDocNF FROM MapaDeEntregaNF WHERE NumIntDocMapa= ? ", _
                0, lNumIntDoc, objMapa.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 205137

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205138

    Do While lErro <> AD_SQL_SEM_DADOS

        'Trava registro contra alterações/Leituras
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> SUCESSO Then gError 205139
    
        lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM MapaDeEntregaNF", alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 205140

        'Busca Próximo
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205141

    Loop

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    MapaDeEntregaNF_Exclui = SUCESSO

    Exit Function

Erro_MapaDeEntregaNF_Exclui:

    MapaDeEntregaNF_Exclui = gErr

    Select Case gErr

        Case 205136
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 205137, 205138, 205141
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MAPADEENTREGA", gErr)

        Case 205139
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_MAPADEENTREGA", gErr)

        Case 205140
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_MAPADEENTREGA", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 205142)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function MapaDeEntregaPV_Exclui(ByVal objMapa As ClassMapaDeEntrega) As Long

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim lNumIntDoc As Long

On Error GoTo Erro_MapaDeEntregaPV_Exclui

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 205136
    Next

    'Le a tabelaRotasVend
    lErro = Comando_ExecutarPos(alComando(0), "SELECT NumIntDocPV FROM MapaDeEntregaPV WHERE NumIntDocMapa= ? ", _
                0, lNumIntDoc, objMapa.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 205137

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205138

    Do While lErro <> AD_SQL_SEM_DADOS

        'Trava registro contra alterações/Leituras
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> SUCESSO Then gError 205139
    
        lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM MapaDeEntregaPV", alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 205140

        'Busca Próximo
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205141

    Loop

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    MapaDeEntregaPV_Exclui = SUCESSO

    Exit Function

Erro_MapaDeEntregaPV_Exclui:

    MapaDeEntregaPV_Exclui = gErr

    Select Case gErr

        Case 205136
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 205137, 205138, 205141
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MAPADEENTREGA", gErr)

        Case 205139
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_MAPADEENTREGA", gErr)

        Case 205140
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_MAPADEENTREGA", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 205142)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Rota_Exibe_Mapa_Prepara(ByVal objRota As ClassRotas, lNumIntRel As Long) As Long

Dim lErro As Long, iIndice As Integer
Dim lTransacao As Long
Dim alComando(0 To 1) As Long
Dim objRotaPonto As ClassRotasPontos
Dim iSeq As Integer
Dim objEndereco As ClassEndereco
Dim objFilial As ClassFilialCliente

On Error GoTo Erro_Rota_Exibe_Mapa_Prepara
    
    'abrir transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 205530
    
    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 205531
    Next
    
    'Obter NumIntRel
    lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_INT_REL_MAPA_ROTA", lNumIntRel)
    If lErro <> SUCESSO Then gError 205532
    
    For Each objRotaPonto In objRota.colPontos
    
        If objRotaPonto.iSelecionado = MARCADO Then
            
            iSeq = iSeq + 1
        
            Set objEndereco = New ClassEndereco
            Set objFilial = New ClassFilialCliente
        
            objFilial.lCodCliente = objRotaPonto.lCliente
            objFilial.iCodFilial = objRotaPonto.iFilialCliente

            lErro = CF("FilialCliente_Le", objFilial)
            If lErro <> SUCESSO And lErro <> 12567 Then gError 205533
            
            objEndereco.lCodigo = objFilial.lEnderecoEntrega
            
            'Le endereço no BD
            lErro = CF("Endereco_le", objEndereco)
            If lErro <> SUCESSO Then gError 205534
            
            If Len(Trim(objEndereco.sEndereco)) = 0 Then
            
                objEndereco.lCodigo = objFilial.lEndereco
            
            End If
            
            lErro = Comando_Executar(alComando(1), "INSERT INTO MapaRota(NumIntRel, Sequencial, CodEndereco)  VALUES (?,?,?)", lNumIntRel, iSeq, objEndereco.lCodigo)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205535
            
        End If
    
    Next

     'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
     'fechar transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 205536
    
    Rota_Exibe_Mapa_Prepara = SUCESSO
    
    Exit Function
    
Erro_Rota_Exibe_Mapa_Prepara:
    
    Rota_Exibe_Mapa_Prepara = gErr
    
    Select Case gErr
        
        Case 205530
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
    
        Case 205531
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 205532 To 205534

        Case 205535
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERT_MAPAROTA", gErr)
    
        Case 205536
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 205537)
            
    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Call Transacao_Rollback
    
    Exit Function
    
End Function

Function Rota_Seq_Mapa_Prepara(ByVal objRota As ClassRotas, lNumIntRel As Long) As Long

Dim lErro As Long, iIndice As Integer
Dim lTransacao As Long
Dim alComando(0 To 1) As Long
Dim objRotaPonto As ClassRotasPontos
Dim iSeq As Integer

On Error GoTo Erro_Rota_Seq_Mapa_Prepara
    
    'abrir transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 205538
    
    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 205539
    Next
    
    'Obter NumIntRel
    lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_INT_REL_MAPA_ROTA1", lNumIntRel)
    If lErro <> SUCESSO Then gError 205540
    
    For Each objRotaPonto In objRota.colPontos
               
        iSeq = iSeq + 1
        objRotaPonto.iSeq = iSeq
               
        lErro = Comando_Executar(alComando(1), "INSERT INTO MapaRota1(NumIntRel, Sequencial, NumIntDocRotaPonto,Cliente,FilialCliente,SequencialNovo,Tempo,Distancia) VALUES (?,?,?,?,?,?,?,?)", lNumIntRel, iSeq, objRotaPonto.lNumIntDoc, _
        objRotaPonto.lCliente, objRotaPonto.iFilialCliente, 0, 0, 0)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205541
    
    Next

     'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
     'fechar transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 205542
    
    Rota_Seq_Mapa_Prepara = SUCESSO
    
    Exit Function
    
Erro_Rota_Seq_Mapa_Prepara:
    
    Rota_Seq_Mapa_Prepara = gErr
    
    Select Case gErr
        
        Case 205538
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
    
        Case 205539
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 205540

        Case 205541
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERT_MAPAROTA1", gErr)
    
        Case 205542
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 205543)
            
    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Call Transacao_Rollback
    
    Exit Function
    
End Function

Function Rota_Seq_Mapa_Obtem(ByVal objRota As ClassRotas, ByVal lNumIntRel As Long) As Long

Dim lErro As Long, iIndice As Integer
Dim alComando(0 To 0) As Long
Dim objRotaPonto As ClassRotasPontos
Dim iSeqNovo As Integer
Dim dTempo As Double
Dim dDistancia As Double
Dim colPontos As New Collection
Dim colCampos As New Collection

On Error GoTo Erro_Rota_Seq_Mapa_Obtem

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 205544
    Next
    
    For Each objRotaPonto In objRota.colPontos
    
        lErro = Comando_Executar(alComando(0), "SELECT SequencialNovo, Tempo, Distancia FROM MapaRota1 WHERE NumIntRel= ? AND Sequencial = ?", _
                     iSeqNovo, dTempo, dDistancia, lNumIntRel, objRotaPonto.iSeq)
        If lErro <> AD_SQL_SUCESSO Then gError 205545
        
        'Busca Primeiro
        lErro = Comando_BuscarPrimeiro(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205546
        
        objRotaPonto.iSeq = iSeqNovo
        objRotaPonto.dDistancia = dDistancia * 1000
        objRotaPonto.dTempo = dTempo / 60
        objRotaPonto.lMeio = 2
    
    Next
    
    colCampos.Add "iSeq"
    Call Ordena_Colecao(objRota.colPontos, colPontos, colCampos)
    
    Set objRota.colPontos = colPontos

     'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
        
    Rota_Seq_Mapa_Obtem = SUCESSO
    
    Exit Function
    
Erro_Rota_Seq_Mapa_Obtem:
    
    Rota_Seq_Mapa_Obtem = gErr
    
    Select Case gErr
           
        Case 205544
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 205545, 205546
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MAPAROTA1", gErr)
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 205547)
            
    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function
    
End Function

Function MapaRota1_Verifica_Retorno(ByVal lNumIntRel As Long, sRetMsg As String) As Long

Dim lErro As Long, iIndice As Integer
Dim alComando(0 To 0) As Long
Dim iRet As Integer
Dim dTempo As Double

On Error GoTo Erro_MapaRota1_Verifica_Retorno

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 205548
    Next
    
    sRetMsg = String(STRING_OBSERVACAO_OBSERVACAO, 0)
   
    lErro = Comando_Executar(alComando(0), "SELECT Ret,RetMsg FROM MapaRota1 WHERE NumIntRel= ? AND Ret <> ?", _
                 iRet, sRetMsg, lNumIntRel, 0)
    If lErro <> AD_SQL_SUCESSO Then gError 205549

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205550

    If lErro <> AD_SQL_SUCESSO Then gError ERRO_LEITURA_SEM_DADOS
    If iRet = 2 Then gError ERRO_FUNCAO_COM_ERRO

     'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
        
    MapaRota1_Verifica_Retorno = SUCESSO
    
    Exit Function
    
Erro_MapaRota1_Verifica_Retorno:
    
    MapaRota1_Verifica_Retorno = gErr
    
    Select Case gErr
           
        Case 205548
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 205549, 205550
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MAPAROTA1", gErr)
            
        Case ERRO_LEITURA_SEM_DADOS
        
        Case ERRO_FUNCAO_COM_ERRO
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 205551)
            
    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function
    
End Function

Function MapaRota_Verifica_Retorno(ByVal lNumIntRel As Long, sRetMsg As String) As Long

Dim lErro As Long, iIndice As Integer
Dim alComando(0 To 0) As Long
Dim iRet As Integer
Dim dTempo As Double

On Error GoTo Erro_MapaRota_Verifica_Retorno

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 205548
    Next
    
    sRetMsg = String(STRING_OBSERVACAO_OBSERVACAO, 0)
   
    lErro = Comando_Executar(alComando(0), "SELECT Ret,RetMsg FROM MapaRota WHERE NumIntRel= ? AND Ret <> ?", _
                 iRet, sRetMsg, lNumIntRel, 0)
    If lErro <> AD_SQL_SUCESSO Then gError 205549

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205550

    If lErro <> AD_SQL_SUCESSO Then gError ERRO_LEITURA_SEM_DADOS
    If iRet = 2 Then gError ERRO_FUNCAO_COM_ERRO

     'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
        
    MapaRota_Verifica_Retorno = SUCESSO
    
    Exit Function
    
Erro_MapaRota_Verifica_Retorno:
    
    MapaRota_Verifica_Retorno = gErr
    
    Select Case gErr
           
        Case 205548
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 205549, 205550
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MAPAROTA1", gErr)
            
        Case ERRO_LEITURA_SEM_DADOS
        
        Case ERRO_FUNCAO_COM_ERRO
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 205551)
            
    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function
    
End Function

Function Entrega_Seq_Mapa_Prepara(ByVal objMapa As ClassMapaDeEntrega, lNumIntRel As Long) As Long

Dim lErro As Long, iIndice As Integer
Dim lTransacao As Long
Dim alComando(0 To 1) As Long
Dim objMapaDoc As ClassMapaDeEntregaDoc
Dim objDoc As Object
Dim iSeq As Integer
Dim lCliente As Long, iFilialCli As Integer

On Error GoTo Erro_Entrega_Seq_Mapa_Prepara
    
    'abrir transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 205538
    
    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 205539
    Next
    
    'Obter NumIntRel
    lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_INT_REL_MAPA_ROTA1", lNumIntRel)
    If lErro <> SUCESSO Then gError 205540
    
    For Each objMapaDoc In objMapa.colMapaDoc
    
        For Each objDoc In objMapa.colDocs
            If objMapaDoc.lNumIntDoc = objDoc.lNumIntDoc Then
                Exit For
            End If
        Next
        
        lCliente = objDoc.lCliente
        If objMapa.iTipoDoc = MAPAENTREGA_TIPODOC_PV Then
            iFilialCli = objDoc.iFilial
        Else
            iFilialCli = objDoc.iFilialCli
        End If
               
        lErro = Comando_Executar(alComando(1), "INSERT INTO MapaRota1(NumIntRel, Sequencial, NumIntDocRotaPonto,Cliente,FilialCliente,SequencialNovo,Tempo,Distancia) VALUES (?,?,?,?,?,?,?,?)", lNumIntRel, CInt(objMapaDoc.lSeq), objMapaDoc.lNumIntDoc, _
        lCliente, iFilialCli, 0, 0, 0)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205541
    
    Next

     'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
     'fechar transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 205542
    
    Entrega_Seq_Mapa_Prepara = SUCESSO
    
    Exit Function
    
Erro_Entrega_Seq_Mapa_Prepara:
    
    Entrega_Seq_Mapa_Prepara = gErr
    
    Select Case gErr
        
        Case 205538
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
    
        Case 205539
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 205540

        Case 205541
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERT_MAPAROTA1", gErr)
    
        Case 205542
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 205543)
            
    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Call Transacao_Rollback
    
    Exit Function
    
End Function

Function Entrega_Seq_Mapa_Obtem(ByVal objMapa As ClassMapaDeEntrega, ByVal lNumIntRel As Long) As Long

Dim lErro As Long, iIndice As Integer
Dim alComando(0 To 0) As Long
Dim objMapaDoc As ClassMapaDeEntregaDoc
Dim objDoc As Object
Dim iSeqNovo As Integer
Dim colDocs As New Collection
Dim colCampos As New Collection

On Error GoTo Erro_Entrega_Seq_Mapa_Obtem

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 205544
    Next
    
    For Each objMapaDoc In objMapa.colMapaDoc
    
        lErro = Comando_Executar(alComando(0), "SELECT SequencialNovo FROM MapaRota1 WHERE NumIntRel= ? AND Sequencial = ?", _
                     iSeqNovo, lNumIntRel, CInt(objMapaDoc.lSeq))
        If lErro <> AD_SQL_SUCESSO Then gError 205545
        
        'Busca Primeiro
        lErro = Comando_BuscarPrimeiro(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205546
        
        objMapaDoc.lSeq = iSeqNovo
        
        For Each objDoc In objMapa.colDocs
            If objMapaDoc.lNumIntDoc = objDoc.lNumIntDoc Then
                objDoc.lVolumeQuant = iSeqNovo
                Exit For
            End If
        Next
    
    Next
    
    colCampos.Add "lVolumeQuant"
    Call Ordena_Colecao(objMapa.colDocs, colDocs, colCampos)
    
    Set objMapa.colDocs = colDocs

     'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
        
    Entrega_Seq_Mapa_Obtem = SUCESSO
    
    Exit Function
    
Erro_Entrega_Seq_Mapa_Obtem:
    
    Entrega_Seq_Mapa_Obtem = gErr
    
    Select Case gErr
           
        Case 205544
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 205545, 205546
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MAPAROTA1", gErr)
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 205547)
            
    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function
    
End Function

Public Function NFiscal_Valida_Diversos(ByVal objNF As ClassNFiscal) As Long

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(0 To 7) As Long
Dim sCaracter As String
Dim objTipoDocInfo As New ClassTipoDocInfo
Dim objFilialEmpresa As New AdmFiliais
Dim dtDataPrimeiraNFeProd As Date
Dim sSQL As String
Dim objItem As ClassItemNF
Dim objCli As ClassCliente
Dim objFilCli As ClassFilialCliente
Dim objForn As ClassFornecedor
Dim objFilForn As ClassFilialFornecedor
Dim objTransp As ClassTransportadora
Dim objEnd As ClassEndereco
Dim sChave As String, bNFe As Boolean, bRPS As Boolean
Dim bCGCIgual As Boolean, bForaPais As Boolean, bAchou As Boolean
Dim sConteudo As String, vbMsg As VbMsgBoxResult, dtDataAux As Date
Dim objSerie As New ClassSerie, objModDocFis As ClassModelosDocFiscais
Dim objTabelaPreco As New ClassTabelaPreco

On Error GoTo Erro_NFiscal_Valida_Diversos

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 205824
    Next
    
    objTabelaPreco.iCodigo = objNF.iTabelaPreco
    
    If objTabelaPreco.iCodigo <> 0 Then

        'Tenta ler TabelaPreço com esse código no BD
        lErro = CF("TabelaPreco_Le", objTabelaPreco)
        If lErro <> SUCESSO And lErro <> 28004 Then gError ERRO_SEM_MENSAGEM
        
        If objTabelaPreco.iAtivo = DESMARCADO Then gError 213838
        
    End If
    
    lErro = NFiscal_Valida_EntregaTerc(objNF, alComando(4), alComando(5))
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    objFilialEmpresa.iCodFilial = objNF.iFilialEmpresa
    
    lErro = CF("FilialEmpresa_Le", objFilialEmpresa)
    If lErro <> SUCESSO Then gError 205828
        
    sSQL = "SELECT MIN(N.DataEmissao) FROM NFeFedProtNFe AS X, NFiscal AS N WHERE N.NumIntDoc = X.NumIntNF AND X.tpAmb = 0"

    objTipoDocInfo.iCodigo = objNF.iTipoNFiscal

    'Lê o Tipo de Documento
    lErro = CF("TipoDocInfo_Le_Codigo", objTipoDocInfo)
    If lErro <> SUCESSO And lErro <> 31415 Then gError 205825
    
    bNFe = False
    bRPS = False
    bCGCIgual = False
    bForaPais = False
    If objNF.iNFe = MARCADO Or ISSerieEletronica(objNF.sSerie) Then bNFe = True
    If objNF.iRecibo = MARCADO Then bRPS = True
    
    'NOVO
    If Len(Trim(objNF.sChvNFe)) > 0 And Not bNFe Then gError 211997 'Com chave de NFe tem que ser eletrônica
    
    'Valida NF Externas
    If objTipoDocInfo.iTipo = TIPODOCINFO_TIPO_NFEXT Then
        'Se for eletrônica
        If bNFe Then
            'Se não tem a chave
            If Len(Trim(objNF.sChvNFe)) = 0 Then
            
                lErro = CF("CRFatConfig_Le", "NFE_DATA_CHV_OBRIGATORIA", 0, sConteudo)
                If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
                
                dtDataAux = StrParaDate(sConteudo)
            
                'Se é obrigatório a partir de uma data e a NF deu entrada após ela
                If dtDataAux <> DATA_NULA And dtDataAux <= IIf(objNF.dtDataEntrada <> DATA_NULA, objNF.dtDataEntrada, objNF.dtDataEmissao) Then
                
                    lErro = CF("CRFatConfig_Le", "NFE_FLAG_CHV_OBRIGATORIA", 0, sConteudo)
                    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
                    
                    Select Case StrParaInt(sConteudo)
                    
                        Case ACAO_NAO_AVISA
                        
                        Case ACAO_AVISA
                            vbMsg = Rotina_Aviso(vbYesNo, "AVISO_NFE_EXT_SEM_CHAVE")
                            If vbMsg = vbNo Then gError ERRO_SEM_MENSAGEM
                        
                        Case ACAO_ERRO
                            gError 211314
                    
                    End Select
                
                End If
            
            Else
                
                'NOVO
                lErro = NFiscal_Valida_ChvNFe(objNF, objTipoDocInfo)
                If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
            
            End If
        
        End If
    
    End If
    
    'Valida apenas para NFs emitidas pela própria empresa
    If objTipoDocInfo.iEmitente = EMITENTE_EMPRESA Then
    
        'Se for NFe Federal ou municipal
        If bNFe Or bRPS Then
        
            'Valida a placa do veículo
            'XXX9999
            If Len(Trim(objNF.sPlaca)) <> 7 And Len(Trim(objNF.sPlaca)) <> 0 Then gError 205826
            objNF.sPlaca = UCase(objNF.sPlaca)
            For iIndice = 1 To Len(Trim(objNF.sPlaca))
                sCaracter = Mid(objNF.sPlaca, iIndice, 1)
                'If (sCaracter < "A" Or sCaracter > "Z") And (sCaracter < "0" Or sCaracter > "9") Then gError 205827 'Caracter inválido
                If iIndice <= 3 Then
                    If (sCaracter < "A" Or sCaracter > "Z") Then gError 205827  'Caracter inválido
                Else
                    If (sCaracter < "0" Or sCaracter > "9") Then gError 205827  'Caracter inválido
                End If
            Next
            
            'Não pode ter desconto global
            If objNF.dValorDesconto > DELTA_VALORMONETARIO Then gError 209265
            
            'Se for NFe Federal tem que respeitar o tamanho máximo para descrição do item
            If bNFe Then
                For Each objItem In objNF.colItens
                    If Len(objItem.sDescricaoItem) > NFE_MAX_ITEM_DESCRICAO Then gError 206737
                Next
            End If
            
            'If InStr(1, objNF.sMensagemCorpoNota, vbNewLine) <> 0 Or InStr(1, objNF.sMensagemNota, vbNewLine) <> 0 Then gError 206798
        
            'Não pode emitir com data futura
            If objNF.dtDataEmissao > gdtDataHoje Then gError 206797
            
            'Não permite NFe Complementar sem NF Original
            If objTipoDocInfo.iComplementar = MARCADO And objNF.lNumIntNotaOriginal = 0 Then gError 208215
            
            'Valida dados do Cliente
            If objNF.lCliente <> 0 Then
            
                Set objCli = New ClassCliente
                Set objFilCli = New ClassFilialCliente
                Set objEnd = New ClassEndereco
                
                objCli.lCodigo = objNF.lCliente
                objFilCli.lCodCliente = objNF.lCliente
                objFilCli.iCodFilial = objNF.iFilialCli
            
                lErro = CF("Cliente_Le", objCli)
                If lErro <> SUCESSO And lErro <> 12293 Then gError ERRO_SEM_MENSAGEM
            
                lErro = CF("FilialCliente_Le", objFilCli)
                If lErro <> SUCESSO And lErro <> 12567 Then gError ERRO_SEM_MENSAGEM
                
                sChave = "Código: " & CStr(objNF.lCliente) & " Filial: " & CStr(objNF.iFilialCli)
                
                If objFilCli.sCgc = objFilialEmpresa.sCgc Then bCGCIgual = True
            
                'Valida todos os dados do endereço
                objEnd.lCodigo = objFilCli.lEndereco
            
                lErro = CF("Endereco_Le", objEnd)
                If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
                
                lErro = NFiscal_Valida_Endereco(alComando(1), objEnd, "Cliente", sChave)
                If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
            
                'Se for do brasil valida a Inscrição estadual e o CNPJ\CPF
                If objEnd.iCodigoPais = PAIS_BRASIL Then
                    lErro = NFiscal_Valida_CGC(objFilCli.sCgc, "Cliente", sChave)
                    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
            
                    lErro = NFiscal_Valida_IE(objFilCli.sInscricaoEstadual, objEnd.sSiglaEstado, "Cliente", sChave)
                    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
                Else
                    bForaPais = True
                End If
                
            End If
            
            'Valida dados do fornecedor
            If objNF.lFornecedor <> 0 Then
            
                Set objForn = New ClassFornecedor
                Set objFilForn = New ClassFilialFornecedor
                Set objEnd = New ClassEndereco
                
                objForn.lCodigo = objNF.lFornecedor
                objFilForn.lCodFornecedor = objNF.lFornecedor
                objFilForn.iCodFilial = objNF.iFilialForn
            
                lErro = CF("Fornecedor_Le", objForn)
                If lErro <> SUCESSO And lErro <> 12729 Then gError ERRO_SEM_MENSAGEM
            
                lErro = CF("FilialFornecedor_Le", objFilForn)
                If lErro <> SUCESSO And lErro <> 12929 Then gError ERRO_SEM_MENSAGEM
            
                sChave = "Código: " & CStr(objNF.lFornecedor) & " Filial: " & CStr(objNF.iFilialForn)
            
                If objFilForn.sCgc = objFilialEmpresa.sCgc Then bCGCIgual = True
            
                'Valida todos os dados do endereço
                objEnd.lCodigo = objFilForn.lEndereco
            
                lErro = CF("Endereco_Le", objEnd)
                If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
                
                lErro = NFiscal_Valida_Endereco(alComando(1), objEnd, "Fornecedor", sChave)
                If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
            
                'Se for do brasil valida a Inscrição estadual e o CNPJ\CPF
                If objEnd.iCodigoPais = PAIS_BRASIL Then
                
                    'Se for importação, o fornecedor não pode ser do Brasil
                    If objNF.iTipoNFiscal = DOCINFO_NFIEIMP Or objNF.iTipoNFiscal = DOCINFO_NFIEIMPSE Or objNF.iTipoNFiscal = DOCINFO_NFIEIMPPC Then gError 209284
                
                    lErro = NFiscal_Valida_CGC(objFilForn.sCgc, "Fornecedor", sChave)
                    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
                
                    lErro = NFiscal_Valida_IE(objFilForn.sInscricaoEstadual, objEnd.sSiglaEstado, "Fornecedor", sChave)
                    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
                Else
                    bForaPais = True
                End If
            
            End If
    
            'Valida os endereços de entrega e retirada
            If Not (objNF.objInfoAdic Is Nothing) Then
                If Not (objNF.objInfoAdic.objRetEnt Is Nothing) Then
                    If Not (objNF.objInfoAdic.objRetEnt.objEnderecoEnt Is Nothing) Then
                    
                        If Len(Trim(objNF.objInfoAdic.objRetEnt.objEnderecoEnt.sLogradouro)) > 0 Then
                            lErro = NFiscal_Valida_CGC(objNF.objInfoAdic.objRetEnt.sCNPJCPFEnt, "Entrega", "")
                            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
                        
                            lErro = NFiscal_Valida_Endereco(alComando(1), objNF.objInfoAdic.objRetEnt.objEnderecoEnt, "", "", "Entrega")
                            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
                        End If
                        
                    End If
                    If Not (objNF.objInfoAdic.objRetEnt.objEnderecoRet Is Nothing) Then

                        If Len(Trim(objNF.objInfoAdic.objRetEnt.objEnderecoRet.sLogradouro)) > 0 Then
                            lErro = NFiscal_Valida_CGC(objNF.objInfoAdic.objRetEnt.sCNPJCPFRet, "Retirada", "")
                            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
                            
                            lErro = NFiscal_Valida_Endereco(alComando(1), objNF.objInfoAdic.objRetEnt.objEnderecoRet, "", "", "Retirada")
                            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
                        End If
                    End If
                End If
            End If
            'Se for uma exportação -> Valida UF e Local de embarque
            If bForaPais And objTipoDocInfo.iTipo = DOCINFO_NF_INT_SAIDA Then
                bAchou = False
                If Not (objNF.objInfoAdic Is Nothing) Then
                    If Not (objNF.objInfoAdic.objExportacao Is Nothing) Then
                        If Len(Trim(objNF.objInfoAdic.objExportacao.sLocalEmbarque)) > 0 And Len(Trim(objNF.objInfoAdic.objExportacao.sUFEmbarque)) > 0 Then
                            bAchou = True
                        End If
                    End If
                End If
                If Not bAchou Then gError 209341
            End If
                
            'Valida a tributação
            lErro = NFiscal_Valida_Tributacao(alComando(2), alComando(3), objNF, objTipoDocInfo, objFilialEmpresa, objEnd, bNFe, bRPS, bCGCIgual)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
            'Não permite frete se o tipo de frete for SEM FRETE
            If objNF.iFreteRespons = FRETE_SEM And objNF.dValorFrete <> 0 Then gError 207444
            
            'Valida dados da transportadora
            If objNF.iCodTransportadora <> 0 Then
            
                Set objTransp = New ClassTransportadora
                Set objEnd = New ClassEndereco
            
                objTransp.iCodigo = objNF.iCodTransportadora
                
                lErro = CF("Transportadora_Le", objTransp)
                If lErro <> SUCESSO And lErro <> 19250 Then gError ERRO_SEM_MENSAGEM
                
                'Valida a transportadora se não for o próprio
                If objTransp.sNome <> "REMETENTE" Or Len(Trim(objTransp.sCgc)) <> 0 Then
                
                    sChave = "Código: " & CStr(objNF.iCodTransportadora)
                    
                    'Valida os dados do endereço
                    objEnd.lCodigo = objTransp.lEndereco
                
                    lErro = CF("Endereco_Le", objEnd)
                    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
                    
                    lErro = NFiscal_Valida_Endereco(alComando(1), objEnd, "Transportadora", sChave)
                    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
                
                    'Se for do brasil valida a Inscrição estadual e o CNPJ\CPF
                    If objEnd.iCodigoPais = PAIS_BRASIL Then
                        lErro = NFiscal_Valida_CGC(objTransp.sCgc, "Transportadora", sChave)
                        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
                    
                        lErro = NFiscal_Valida_IE(objTransp.sInscricaoEstadual, objEnd.sSiglaEstado, "Transportadora", sChave)
                        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
                    End If
                
                End If
                
            End If
            
            'Valida dados da transportadora de redespacho
            If objNF.iCodTranspRedesp <> 0 Then
            
                Set objTransp = New ClassTransportadora
                Set objEnd = New ClassEndereco
            
                objTransp.iCodigo = objNF.iCodTranspRedesp
            
                lErro = CF("Transportadora_Le", objTransp)
                If lErro <> SUCESSO And lErro <> 19250 Then gError ERRO_SEM_MENSAGEM
    
                sChave = "Código: " & CStr(objNF.iCodTranspRedesp)
    
                'Valida os dados do endereço
                objEnd.lCodigo = objTransp.lEndereco
            
                lErro = CF("Endereco_Le", objEnd)
                If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
                
                lErro = NFiscal_Valida_Endereco(alComando(1), objEnd, "Transportadora Redesp.", sChave)
                If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
            
                'Se for do brasil valida a Inscrição estadual e o CNPJ\CPF
                If objEnd.iCodigoPais = PAIS_BRASIL Then
                    lErro = NFiscal_Valida_CGC(objTransp.sCgc, "Transportadora Redesp.", sChave)
                    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
                
                    lErro = NFiscal_Valida_IE(objTransp.sInscricaoEstadual, objEnd.sSiglaEstado, "Transportadora Redesp.", sChave)
                    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
                End If
                
            End If
            
            'Testa o modelo da Série
            objSerie.sSerie = objNF.sSerie
            
            lErro = CF("Serie_Le", objSerie)
            If lErro <> SUCESSO And lErro <> 22202 Then gError ERRO_SEM_MENSAGEM
            
            Set objModDocFis = New ClassModelosDocFiscais
            
            objModDocFis.iCodigo = objSerie.iModDocFis
            
            lErro = CF("ModelosDocFiscais_Le", objModDocFis)
            If lErro <> SUCESSO And lErro <> ERRO_LEITURA_SEM_DADOS Then gError ERRO_SEM_MENSAGEM
            
            'If ISSerieEletronica(objNF.sSerie) Then
            If objModDocFis.iEletronica = MARCADO Then
                If objSerie.iModDocFis <> objTipoDocInfo.iModDocFisE Then gError 213725
            Else
                If objSerie.iModDocFis <> objTipoDocInfo.iModDocFis Then gError 213726
            End If
            
            If gobjCRFAT.iNaoTestarNFePesoVolume = 0 Then
            
                'Testa o Volume
                If objNF.dPesoBruto > 0 Or objNF.dPesoLiq > 0 Or objNF.lVolumeMarca <> 0 Or objNF.lVolumeQuant <> 0 Or objNF.sVolumeNumero <> "" Then
                    If objNF.lVolumeQuant = 0 Then gError 213727
                End If
        
            End If
        
        Else
        'É NF CONVENCIONAL
        
            'SE É UMA NF INTERNA DE UMA FILIAL FISCAL E NÃO É VENDA FORA DO ESTABELECIMENTO COM NUMERAÇÃO MANUAL
            If gobjCRFAT.iNaoTestarNFe = 0 And (objTipoDocInfo.iTipo = 1 Or objTipoDocInfo.iTipo = 2) And (giFilialEmpresa < Abs(giFilialAuxiliar) Or giFilialAuxiliar = 0) And ((objTipoDocInfo.iCodigo <> DOCINFO_NFISFVFE And objTipoDocInfo.iCodigo <> DOCINFO_NFISVFE) Or gobjFAT.iVFEUsaTManual <> MARCADO) And objTipoDocInfo.iModeloArqICMS = 1 Then
        
                'SE USA NFE
                If gobjCRFAT.iUsaNFe = MARCADO Then
                                   
                    'SE ESTÁ EM AMBIENTE DE PRODUÇÃO
                    If objFilialEmpresa.iNFeAmbiente = 1 Then
                    
                        'Lê a data de emissão da Primeira NFe em ambiente de produção
                        lErro = Comando_Executar(alComando(0), sSQL, dtDataPrimeiraNFeProd)
                        If lErro <> AD_SQL_SUCESSO Then gError 205829
                        
                        'Busca Primeiro
                        lErro = Comando_BuscarPrimeiro(alComando(0))
                        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205830
                    
                        'Se for uma NF posterior a primeira NFe em ambiente de produção => Erro (Teria de ser eletrônica também)
                        If objNF.dtDataEmissao >= dtDataPrimeiraNFeProd And dtDataPrimeiraNFeProd <> DATA_NULA Then gError 205831
                    
                    End If
                End If
            End If
        End If
    
        lErro = CF("NFiscal_Valida_NFE", objNF)
        If lErro <> SUCESSO Then gError 207568
    
    End If
    
    lErro = NFiscal_Valida_CFOP_TipoNF(objNF, objTipoDocInfo, alComando(6), alComando(7))
    If lErro <> SUCESSO Then gError 207568
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
        
    NFiscal_Valida_Diversos = SUCESSO
    
    Exit Function
    
Erro_NFiscal_Valida_Diversos:
    
    NFiscal_Valida_Diversos = gErr
    
    Select Case gErr
               
        Case 205824
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 205825, 205828, 207568
        
        Case 205826
            Call Rotina_Erro(vbOKOnly, "ERRO_PLACA_TAM_INVALIDO", gErr, objNF.sPlaca)
        
        Case 205827
            Call Rotina_Erro(vbOKOnly, "ERRO_PLACA_CAR_INVALIDO", gErr, objNF.sPlaca, sCaracter)
            
        Case 205829, 205830
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", gErr)
            
        Case 205831
            Call Rotina_Erro(vbOKOnly, "ERRO_NFINTERNA_NAO_NFE", gErr, dtDataPrimeiraNFeProd)
        
        Case 206737
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_DESCRICAO_MAIOR", gErr, objItem.iItem, Len(objItem.sDescricaoItem), NFE_MAX_ITEM_DESCRICAO)
        
        Case 206797
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_DATAEMISSAO_MAIOR_DATAHOJE", gErr)
            
        Case 206798
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_MENSAGEM_COM_ENTER", gErr)
            
        Case 207444
            Call Rotina_Erro(vbOKOnly, "ERRO_SEM_FRETE_COM_VALOR", gErr)
            
        Case 208215
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_COMPLEMENTAR_SEM_NFORIG", gErr)
            
        Case 209265
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_COM_VALORDESCONTOGLOBAL", gErr)
            
        Case 209284
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_IMPORTACAO_FORN_BRASIL", gErr)
            
        Case 209341
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_EXPORTACAO_SEM_LOCALUF", gErr)
            
        Case 211314
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_EXT_SEM_CHAVE", gErr, Format(dtDataAux, "dd/mm/yyyy"))
            
        Case 211997
            Call Rotina_Erro(vbOKOnly, "ERRO_NF_NAO_NFE_COM_CHVNFE", gErr)
            
        Case 213725, 213726
            Call Rotina_Erro(vbOKOnly, "ERRO_MODELO_NF_DIFERENTE_MODELO_SERIE", gErr)
        
        Case 213727
            Call Rotina_Erro(vbOKOnly, "ERRO_PREENCHIMENTO_VOLUME_INCOMPLETO", gErr)
            
        Case 213838
            Call Rotina_Erro(vbOKOnly, "ERRO_TABPRECO_INATIVA", gErr, objTabelaPreco.iCodigo)
            
        Case ERRO_SEM_MENSAGEM
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 205832)
            
    End Select
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Private Function NFiscal_Valida_Endereco(ByVal lComando As Long, ByVal objEnd As ClassEndereco, ByVal sTipoPessoa As String, ByVal sChave As String, Optional ByVal sTipoEndereco As String = "Principal") As Long

Dim lErro As Long
Dim objCidade As New ClassCidades
Dim sUF As String, sTelAux As String, iIndice As Integer
Dim objPais As New ClassPais

On Error GoTo Erro_NFiscal_Valida_Endereco

    'Se é o endereço principal ou está preenchido
    If UCase(sTipoEndereco) = "PRINCIPAL" Or Len(Trim(objEnd.sEndereco)) > 0 Then
    
        If Len(Trim(objEnd.sEndereco)) = 0 Then gError 208215
        If Len(Trim(objEnd.sCidade)) = 0 And objEnd.iCodigoPais = PAIS_BRASIL Then gError 208216
        If Len(Trim(objEnd.sBairro)) = 0 And objEnd.iCodigoPais = PAIS_BRASIL Then gError 208217
        If Len(Trim(objEnd.sCEP)) = 0 And objEnd.iCodigoPais = PAIS_BRASIL Then gError 208218
        
        If objEnd.iCodigoPais = PAIS_BRASIL Then
                    
            objCidade.sDescricao = objEnd.sCidade
        
            lErro = CF("Cidade_Le_Nome", objCidade)
            If lErro <> SUCESSO And lErro <> ERRO_OBJETO_NAO_CADASTRADO Then gError ERRO_SEM_MENSAGEM
            
            'Obriga ter o código do IBGE
            If Len(Trim(objCidade.sCodIBGE)) = 0 Then gError 208219
            
            sUF = String(STRING_ESTADO_SIGLA, 0)
            
            lErro = Comando_Executar(lComando, "SELECT Sigla FROM Estados WHERE CodIBGE = ?", sUF, left(objCidade.sCodIBGE, 2))
            If lErro <> AD_SQL_SUCESSO Then gError 208220
        
            'Verifica se o Estado existe
            lErro = Comando_BuscarPrimeiro(lComando)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 208221
            
            If lErro <> AD_SQL_SUCESSO Then gError 208222
            
            'Se a UF da cidade difere da UF do endereço - > Erro
            If sUF <> objEnd.sSiglaEstado Then gError 208223
        
        Else
        
            'Valida o País
            objPais.iCodigo = objEnd.iCodigoPais
            
            lErro = CF("Paises_Le", objPais)
            If lErro <> SUCESSO And lErro <> 47876 Then gError ERRO_SEM_MENSAGEM
            
            If lErro <> SUCESSO Then gError 209282
            
            'Obriga ter o código do Banco Central
            If objPais.iCodBacen = 0 Then gError 209283
        
        End If
        
        'Valida os telefones
        If Len(Trim(objEnd.sTelefone1)) > 0 Then
            sTelAux = ""
            For iIndice = 1 To Len(objEnd.sTelefone1)
                If IsNumeric(Mid(objEnd.sTelefone1, iIndice, 1)) Then
                    sTelAux = sTelAux & Mid(objEnd.sTelefone1, iIndice, 1)
                End If
            Next
            If Len(sTelAux) > 11 Or Len(sTelAux) < 6 Then gError 208243
        End If
        
        If Len(Trim(objEnd.sTelefone2)) > 0 Then
            sTelAux = ""
            For iIndice = 1 To Len(objEnd.sTelefone2)
                If IsNumeric(Mid(objEnd.sTelefone2, iIndice, 1)) Then
                    sTelAux = sTelAux & Mid(objEnd.sTelefone2, iIndice, 1)
                End If
            Next
            If Len(sTelAux) > 11 Or Len(sTelAux) < 6 Then gError 208244
        End If
    
    End If

    NFiscal_Valida_Endereco = SUCESSO
    
    Exit Function
    
Erro_NFiscal_Valida_Endereco:
    
    NFiscal_Valida_Endereco = gErr
    
    Select Case gErr
    
        Case 208215
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_CAD_ENDERECO_NAO_PREENCHIDO", gErr, sTipoEndereco, sTipoPessoa, sChave)
               
        Case 208216
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_CAD_CIDADE_NAO_PREENCHIDA", gErr, sTipoEndereco, sTipoPessoa, sChave)
               
        Case 208217
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_CAD_BAIRRO_NAO_PREENCHIDO", gErr, sTipoEndereco, sTipoPessoa, sChave)
               
        Case 208218
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_CAD_CEP_NAO_PREENCHIDO", gErr, sTipoEndereco, sTipoPessoa, sChave)
        
        Case 208219
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_CIDADE_SEM_CODIBGE", gErr, objEnd.sCidade)
        
        Case 208220, 208221
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ESTADOS", gErr, left(objCidade.sCodIBGE, 2))
            
        Case 208222
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_ESTADO_CODIBGE_NAO_CADASTRADO", gErr, left(objCidade.sCodIBGE, 2))
            
        Case 208223
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_CIDADE_UF_DIF_IBGE", gErr, sUF, objEnd.sSiglaEstado, sTipoEndereco, sTipoPessoa, sChave, objEnd.sCidade)
        
        Case 208243
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_CAD_TEL1_INVALIDO", gErr, sTipoEndereco, sTipoPessoa, sChave)
        
        Case 208244
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_CAD_TEL2_INVALIDO", gErr, sTipoEndereco, sTipoPessoa, sChave)
        
        Case 209282
            Call Rotina_Erro(vbOKOnly, "ERRO_CODIGO_PAIS_NAO_CADASTRADO", gErr, CStr(objEnd.iCodigoPais))
        
        Case 209283
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_PAIS_SEM_CODBACEN", gErr, objPais.sNome)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 208224)
            
    End Select
    
    Exit Function
    
End Function

Private Function NFiscal_Valida_CGC(ByVal sCgc As String, ByVal sTipoPessoa As String, ByVal sChave As String) As Long

Dim lErro As Long

On Error GoTo Erro_NFiscal_Valida_CGC

    If Not (gobjFAT.iCliPreenchCNPJ = 0 And Len(Trim(sCgc)) = 0) Then
 
        'Se CGC/CPF não foi preenchido -- Exit Sub
        If Len(Trim(sCgc)) = 0 Then gError 208225
        
        Select Case Len(Trim(sCgc))
    
            Case STRING_CPF
                lErro = Cpf_Critica(sCgc)
                If lErro <> SUCESSO Then gError 208226
    
            Case STRING_CGC
                lErro = Cgc_Critica(sCgc)
                If lErro <> SUCESSO Then gError 208227
    
            Case Else
                gError 208226
    
        End Select
    
    End If
    
    NFiscal_Valida_CGC = SUCESSO
    
    Exit Function
    
Erro_NFiscal_Valida_CGC:
    
    NFiscal_Valida_CGC = gErr
    
    Select Case gErr
        
        Case 208225
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_CAD_CGC_NAO_PREENCHIDO", gErr, sTipoPessoa, sChave)
        
        Case 208226, 208227, 208228
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_CGC_INVALIDO", gErr, sTipoPessoa, sChave)
               
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 208229)
            
    End Select
    
    Exit Function
    
End Function

Private Function NFiscal_Valida_IE(ByVal sIE As String, ByVal sUF As String, ByVal sTipoPessoa As String, ByVal sChave As String) As Long

Dim lErro As Long

On Error GoTo Erro_NFiscal_Valida_IE

    lErro = CF("InscricaoEstadual_Critica", sIE, sUF)
    If lErro <> SUCESSO Then gError 208230

    NFiscal_Valida_IE = SUCESSO
    
    Exit Function
    
Erro_NFiscal_Valida_IE:
    
    NFiscal_Valida_IE = gErr
    
    Select Case gErr
    
        Case 208230
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_IE_INVALIDO", gErr, sTipoPessoa, sChave)
               
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 208231)
            
    End Select
    
    Exit Function
    
End Function

Private Function NFiscal_Valida_Tributacao(ByVal lComando1 As Long, ByVal lComando2 As Long, ByVal objNF As ClassNFiscal, ByVal objTipoDocInfo As ClassTipoDocInfo, ByVal objFilialEmpresa As AdmFiliais, ByVal objEnd As ClassEndereco, ByVal bNFe As Boolean, ByVal bRPS As Boolean, ByVal bCGCIgual As Boolean) As Long

Dim lErro As Long
Dim objTribDoc As ClassTributacaoDoc
Dim objTribItem As ClassTributacaoDocItem
Dim objItem As ClassItemNF, iItem As Integer
Dim objProduto As ClassProduto
Dim dBCICMS As Double, dVICMS As Double
Dim dBCICMSST As Double, dVICMSST As Double
Dim dBCIPI As Double, dVIPI As Double
Dim dBCPIS As Double, dVPIS As Double
Dim dBCCOFINS As Double, dVCOFINS As Double
Dim dBCISS As Double, dVISS As Double
Dim objTipoICMS As New ClassTipoTribICMS
Dim objTipoICMSSimples As New ClassTipoTribICMSSimples
Dim dFrete As Double, dSeguro As Double, dDespesa As Double
Dim colItens As New Collection, dValorProd As Double, dValorDesc As Double

Const DIFERENCA_VALOR_MAXIMA = 1

On Error GoTo Erro_NFiscal_Valida_Tributacao
    
    Set objTribDoc = objNF.objTributacao
    
    If bNFe And Not bCGCIgual Then
        'Valida o CFOP de acordo com a versão da NFe
        lErro = NFiscal_Valida_CFOP(objTribDoc.sNaturezaOp, objFilialEmpresa, objEnd)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    End If

    For Each objItem In objNF.colItens
        colItens.Add objItem
    Next
    For Each objItem In objNF.colItensSRV
        colItens.Add objItem
    Next
    
    iItem = 0
    For Each objItem In colItens
    
        iItem = iItem + 1
    
        Set objTribItem = objItem.objTributacao
        Set objProduto = New ClassProduto
        
        If objItem.objInfoAdicDocItem.iIncluiValorTotal = MARCADO Then
            If objItem.dQuantidade = 0 And objNF.iTipoNFiscal = DOCINFO_NFIEIMPCC Then
                dValorProd = dValorProd + Arredonda_Moeda(objItem.dPrecoUnitario)
            Else
                dValorProd = dValorProd + Arredonda_Moeda(objItem.dPrecoUnitario * objItem.dQuantidade)
            End If
            dValorDesc = dValorDesc + objItem.dValorDesconto
        End If
        
        'Totaliza os itens para bater com o valor do documento
'        If Not (right(objTribItem.sCST, 2) = "51" And (objTribItem.dICMSPercDifer = 0 Or objTribItem.dICMSPercDifer = 1)) Then
            dBCICMS = dBCICMS + objTribItem.dICMSBase * (1 - objTribItem.dICMSPercRedBase)
            dVICMS = dVICMS + objTribItem.dICMSValor
            dBCICMSST = dBCICMSST + objTribItem.dICMSSubstBase
            dVICMSST = dVICMSST + objTribItem.dICMSSubstValor
'        End If
        dBCIPI = dBCIPI + objTribItem.dIPIBaseCalculo
        dVIPI = dVIPI + objTribItem.dIPIValor
        dBCPIS = dBCPIS + objTribItem.dPISBase
        dVPIS = dVPIS + objTribItem.dPISValor
        dBCCOFINS = dBCCOFINS + objTribItem.dCOFINSBase
        dVCOFINS = dVCOFINS + objTribItem.dCOFINSValor
        dBCISS = dBCISS + objTribItem.dISSBase
        dVISS = dVISS + objTribItem.dISSValor
        dFrete = dFrete + objTribItem.dValorFreteItem
        dSeguro = dSeguro + objTribItem.dValorSeguroItem
        dDespesa = dDespesa + objTribItem.dValorOutrasDespesasItem

        If gobjCRFAT.iNFTestaSomatorios = MARCADO Then
            'valida os valores com base na base\alíquota
            
            'Só valida se o CST ou CSOSN não for "Outros"
            If (right(objTribItem.sCST, 2) <> "90" And objTribItem.iRegimeTributario = REGIME_TRIBUTARIO_NORMAL) Or ((right(objTribItem.sCSOSN, 3) <> "900" And objTribItem.iRegimeTributario <> REGIME_TRIBUTARIO_NORMAL)) Then
                If Arredonda_Moeda(Abs((objTribItem.dICMSBase * (1 - objTribItem.dICMSPercRedBase) * objTribItem.dICMSAliquota) - (objTribItem.dICMSValor + objTribItem.dICMSValorDif)), 4) >= DIFERENCA_VALOR_MAXIMA Then gError 209285
            End If
            
            'If arredonda_moeda(Abs((objTribItem.dICMSSubstBase * objTribItem.dICMSSubstAliquota) - objTribItem.dICMSSubstValor),4) >= DIFERENCA_VALOR_MAXIMA Then gError 209286
            
            If objTribItem.iIPITipoCalculo = TRIB_TIPO_CALCULO_PERCENTUAL Then
                'Calcula de acordo com base e alíquota
                If Arredonda_Moeda(Abs((objTribItem.dIPIBaseCalculo * (1 - objTribItem.dIPIPercRedBase) * objTribItem.dIPIAliquota) - objTribItem.dIPIValor), 4) >= DIFERENCA_VALOR_MAXIMA Then gError 209287
            Else
                'Calcula de acordo com valor e quantidade
                If Arredonda_Moeda(Abs((objTribItem.dIPIUnidadePadraoQtde * objTribItem.dIPIUnidadePadraoValor) - objTribItem.dIPIValor), 4) >= DIFERENCA_VALOR_MAXIMA Then gError 209297
            End If
            
            If objTribItem.iPISTipoCalculo = TRIB_TIPO_CALCULO_PERCENTUAL Then
                'Calcula de acordo com base e alíquota
                If Arredonda_Moeda(Abs((objTribItem.dPISBase * objTribItem.dPISAliquota) - objTribItem.dPISValor), 4) >= DIFERENCA_VALOR_MAXIMA Then gError 209288
            Else
                'Calcula de acordo com valor e quantidade
                If Arredonda_Moeda(Abs((objTribItem.dPISQtde * objTribItem.dPISAliquotaValor) - objTribItem.dPISValor), 4) >= DIFERENCA_VALOR_MAXIMA Then gError 209298
            End If
            
            If objTribItem.iCOFINSTipoCalculo = TRIB_TIPO_CALCULO_PERCENTUAL Then
                'Calcula de acordo com base e alíquota
                If Arredonda_Moeda(Abs((objTribItem.dCOFINSBase * objTribItem.dCOFINSAliquota) - objTribItem.dCOFINSValor), 4) >= DIFERENCA_VALOR_MAXIMA Then gError 209289
            Else
                'Calcula de acordo com valor e quantidade
                If Arredonda_Moeda(Abs((objTribItem.dCOFINSQtde * objTribItem.dCOFINSAliquotaValor) - objTribItem.dCOFINSValor), 4) >= DIFERENCA_VALOR_MAXIMA Then gError 209299
            End If
            
            If Arredonda_Moeda(Abs((objTribItem.dISSBase * objTribItem.dISSAliquota) - objTribItem.dISSValor), 4) >= DIFERENCA_VALOR_MAXIMA Then gError 209290
        
            If objTribItem.iPISSTTipoCalculo = TRIB_TIPO_CALCULO_PERCENTUAL Then
                'Calcula de acordo com base e alíquota
                If Arredonda_Moeda(Abs((objTribItem.dPISSTBase * objTribItem.dPISSTAliquota) - objTribItem.dPISSTValor), 4) >= DIFERENCA_VALOR_MAXIMA Then gError 209295
            Else
                'Calcula de acordo com valor e quantidade
                If Arredonda_Moeda(Abs((objTribItem.dPISSTQtde * objTribItem.dPISSTAliquotaValor) - objTribItem.dPISSTValor), 4) >= DIFERENCA_VALOR_MAXIMA Then gError 209300
            End If
            
            If objTribItem.iCOFINSSTTipoCalculo = TRIB_TIPO_CALCULO_PERCENTUAL Then
                'Calcula de acordo com base e alíquota
                If Arredonda_Moeda(Abs((objTribItem.dCOFINSSTBase * objTribItem.dCOFINSSTAliquota) - objTribItem.dCOFINSSTValor), 4) >= DIFERENCA_VALOR_MAXIMA Then gError 209296
            Else
                'Calcula de acordo com valor e quantidade
                If Arredonda_Moeda(Abs((objTribItem.dCOFINSSTQtde * objTribItem.dCOFINSSTAliquotaValor) - objTribItem.dCOFINSSTValor), 4) >= DIFERENCA_VALOR_MAXIMA Then gError 209301
            End If
        
        End If
    
        objProduto.sCodigo = objItem.sProduto
    
        lErro = CF("Produto_Le", objProduto)
        If lErro <> SUCESSO And lErro <> 28030 Then gError ERRO_SEM_MENSAGEM
    
        If bNFe Then
        
            If Not bCGCIgual Then
                'Valida o CFOP de acordo com a versão da NFe
                lErro = NFiscal_Valida_CFOP(objTribItem.sNaturezaOp, objFilialEmpresa, objEnd)
                If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
            End If
            
            'Se estiver no simples tem que ter o Tipo do ICMS no Simples e o CSOSN
            If objFilialEmpresa.iSuperSimples = MARCADO And ((objNF.iTipoNFiscal <> DOCINFO_NFIEIMP And objNF.iTipoNFiscal <> DOCINFO_NFIEIMPSE And objNF.iTipoNFiscal <> DOCINFO_NFIEIMPPC) Or gobjCRFAT.iNFImportacaoTribFlag02 = DESMARCADO) Then
                
                If objTribItem.iICMSSimplesTipo < 1 Then gError 209270
                'Preenche o CSOSN se estiver em branco
                If Len(Trim(objTribItem.sCSOSN)) = 0 Then

                    Set objTipoICMSSimples = New ClassTipoTribICMSSimples
                    objTipoICMSSimples.iTipo = objTribItem.iICMSSimplesTipo

                    lErro = CF("TipoTribICMSSimples_Le", objTipoICMSSimples)
                    If lErro <> SUCESSO And lErro <> ERRO_LEITURA_SEM_DADOS Then gError ERRO_SEM_MENSAGEM
                
                    objTribItem.sCSOSN = CStr(objTribItem.iOrigemMercadoria) & Format(objTipoICMSSimples.iCSOSN, "000")
                    
                End If
            End If
            'Preenche o CST se estiver em branco
            If Len(Trim(objTribItem.sCST)) = 0 Then
            
                Set objTipoICMS = New ClassTipoTribICMS
                objTipoICMS.iTipo = objTribItem.iICMSTipo

                lErro = CF("TipoTribICMS_Le", objTipoICMS)
                If lErro <> SUCESSO And lErro <> 21534 Then gError ERRO_SEM_MENSAGEM
            
                objTribItem.sCST = CStr(objTribItem.iOrigemMercadoria) & Format(objTipoICMS.iTipoTribCST, "00")
                
            End If
                
            'Verifica se o NCM está na lista dos NCMs válidos
            lErro = NFiscal_Valida_NCM(lComando2, objProduto, objItem, objNF)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        End If
        
        'Se tiver valor de ISS tem que ter o código do serviço
        'If objTribItem.dISSValor > DELTA_VALORMONETARIO Then
        If (Len(Trim(objTribItem.sIPICodProduto)) = 0 And objProduto.iNatureza = NATUREZA_PROD_SERVICO) Or objTribItem.dISSValor > DELTA_VALORMONETARIO Then
            If Len(Trim(objTribItem.sISSQN)) = 0 Then objTribItem.sISSQN = objProduto.sISSQN
            If Len(Trim(objTribItem.sISSQN)) = 0 Then gError 208232
        End If
    
    Next
    
    If gobjCRFAT.iNFTestaSomatorios = MARCADO Then
        If Arredonda_Moeda(Abs(dBCICMS - objTribDoc.dICMSBase)) >= DIFERENCA_VALOR_MAXIMA Then gError 209272
        If Arredonda_Moeda(Abs(dVICMS - objTribDoc.dICMSValor)) >= DIFERENCA_VALOR_MAXIMA Then gError 209273
        If Arredonda_Moeda(Abs(dBCICMSST - objTribDoc.dICMSSubstBase)) >= DIFERENCA_VALOR_MAXIMA Then gError 209274
        If Arredonda_Moeda(Abs(dVICMSST - objTribDoc.dICMSSubstValor)) >= DIFERENCA_VALOR_MAXIMA Then gError 209275
        If Arredonda_Moeda(Abs(dBCIPI - objTribDoc.dIPIBase)) >= DIFERENCA_VALOR_MAXIMA Then gError 209276
        If Arredonda_Moeda(Abs(dVIPI - objTribDoc.dIPIValor)) >= DIFERENCA_VALOR_MAXIMA Then gError 209277
    '    If Abs(dBCPIS - objTribDoc.dPISBase) >= DIFERENCA_VALOR_MAXIMA Then gError 99999
    '    If Abs(dVPIS - objTribDoc.dPISValor) >= DIFERENCA_VALOR_MAXIMA Then gError 209278
    '    If Abs(dBCCOFINS - objTribDoc.dCOFINSBase) >= DIFERENCA_VALOR_MAXIMA Then gError 99999
    '    If Abs(dVCOFINS - objTribDoc.dCOFINSValor) >= DIFERENCA_VALOR_MAXIMA Then gError 209279
        If Arredonda_Moeda(Abs(dBCISS - objTribDoc.dISSBase)) >= DIFERENCA_VALOR_MAXIMA Then gError 209280
        If Arredonda_Moeda(Abs(dVISS - objTribDoc.dISSValor)) >= DIFERENCA_VALOR_MAXIMA Then gError 209281
    
        If Arredonda_Moeda(Abs(dFrete - objNF.dValorFrete)) >= DIFERENCA_VALOR_MAXIMA Then gError 209305
        If Arredonda_Moeda(Abs(dSeguro - objNF.dValorSeguro)) >= DIFERENCA_VALOR_MAXIMA Then gError 209306
        If Arredonda_Moeda(Abs(dDespesa - objNF.dValorOutrasDespesas)) >= DIFERENCA_VALOR_MAXIMA Then gError 209307
    
        If Arredonda_Moeda(Abs(dValorProd - dValorDesc - objNF.dValorProdutos)) >= DIFERENCA_VALOR_MAXIMA Then gError 209803
    
    End If

    NFiscal_Valida_Tributacao = SUCESSO
    
    Exit Function
    
Erro_NFiscal_Valida_Tributacao:
    
    NFiscal_Valida_Tributacao = gErr
    
    Select Case gErr
    
        Case 208232
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_ISSQN_NAO_PREECNHIDO", gErr, iItem, objItem.sProduto)
                
        Case 209270
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_ICMSSIMPLESTIPO_NAO_PREECNHIDO", gErr, iItem, objItem.sProduto)
    
        Case 209272
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_TOTAL_BASE_ICMS", gErr, Format(dBCICMS, "STANDARD"), Format(objTribDoc.dICMSBase, "STANDARD"))
        
        Case 209273
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_TOTAL_VALOR_ICMS", gErr, Format(dVICMS, "STANDARD"), Format(objTribDoc.dICMSValor, "STANDARD"))
        
        Case 209274
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_TOTAL_BASE_ICMSST", gErr, Format(dBCICMSST, "STANDARD"), Format(objTribDoc.dICMSSubstBase, "STANDARD"))
        
        Case 209275
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_TOTAL_VALOR_ICMSST", gErr, Format(dVICMSST, "STANDARD"), Format(objTribDoc.dICMSSubstValor, "STANDARD"))
        
        Case 209276
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_TOTAL_BASE_IPI", gErr, Format(dBCIPI, "STANDARD"), Format(objTribDoc.dIPIBase, "STANDARD"))
        
        Case 209277
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_TOTAL_VALOR_IPI", gErr, Format(dVIPI, "STANDARD"), Format(objTribDoc.dIPIValor, "STANDARD"))
        
        Case 209278
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_TOTAL_VALOR_PIS", gErr, Format(dVPIS, "STANDARD"), Format(objTribDoc.dPISValor, "STANDARD"))
        
        Case 209279
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_TOTAL_VALOR_COFINS", gErr, Format(dVCOFINS, "STANDARD"), Format(objTribDoc.dCOFINSValor, "STANDARD"))
        
        Case 209280
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_TOTAL_BASE_ISS", gErr, Format(dBCISS, "STANDARD"), Format(objTribDoc.dISSBase, "STANDARD"))
        
        Case 209281
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_TOTAL_VALOR_ISS", gErr, Format(dVISS, "STANDARD"), Format(objTribDoc.dISSValor, "STANDARD"))
        
        Case ERRO_SEM_MENSAGEM
        
        Case 209285
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_ICMSVALOR_DIF_BASE_ALIQ", gErr, iItem, objItem.sProduto)
              
        Case 209286
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_ICMSSTVALOR_DIF_BASE_ALIQ", gErr, iItem, objItem.sProduto)
              
        Case 209287
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_IPIVALOR_DIF_BASE_ALIQ", gErr, iItem, objItem.sProduto)
              
        Case 209288
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_PISVALOR_DIF_BASE_ALIQ", gErr, iItem, objItem.sProduto)
              
        Case 209289
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_COFINSVALOR_DIF_BASE_ALIQ", gErr, iItem, objItem.sProduto)
              
        Case 209290
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_ISSVALOR_DIF_BASE_ALIQ", gErr, iItem, objItem.sProduto)
              
        Case 209295
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_PISSTVALOR_DIF_BASE_ALIQ", gErr, iItem, objItem.sProduto)
              
        Case 209296
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_COFINSSTVALOR_DIF_BASE_ALIQ", gErr, iItem, objItem.sProduto)
              
        Case 209297
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_IPIVALOR_DIF_QTDE_VALOR", gErr, iItem, objItem.sProduto)
              
        Case 209298
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_PISVALOR_DIF_QTDE_VALOR", gErr, iItem, objItem.sProduto)
              
        Case 209299
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_COFINSVALOR_DIF_QTDE_VALOR", gErr, iItem, objItem.sProduto)

        Case 209300
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_PISSTVALOR_DIF_QTDE_VALOR", gErr, iItem, objItem.sProduto)
              
        Case 209301
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_COFINSSTVALOR_DIF_QTDE_VALOR", gErr, iItem, objItem.sProduto)
              
        Case 209305
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_TOTAL_FRETE", gErr, Format(dFrete, "STANDARD"), Format(objNF.dValorFrete, "STANDARD"))
              
        Case 209306
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_TOTAL_SEGURO", gErr, Format(dSeguro, "STANDARD"), Format(objNF.dValorSeguro, "STANDARD"))
              
        Case 209307
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_TOTAL_DESPESA", gErr, Format(dDespesa, "STANDARD"), Format(objNF.dValorOutrasDespesas, "STANDARD"))
              
        Case 209803
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_TOTAL_PRODUTO", gErr, Format(dValorProd, "STANDARD"), Format(dValorDesc, "STANDARD"), Format(objNF.dValorProdutos, "STANDARD"))
              
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 208233)
            
    End Select
    
    Exit Function
    
End Function

Private Function NFiscal_Valida_CFOP(ByVal sCFOP As String, ByVal objFilialEmpresa As AdmFiliais, ByVal objEnd As ClassEndereco) As Long

Dim lErro As Long
Dim objVersao As New ClassVersaoNFe
Dim bUFDif As Boolean

On Error GoTo Erro_NFiscal_Valida_CFOP
    
    objVersao.iCodigo = gobjCRFAT.iVersaoNFE
    
    lErro = CF("VersaoNFe_Le", objVersao)
    If lErro <> SUCESSO And lErro <> ERRO_LEITURA_SEM_DADOS Then gError ERRO_SEM_MENSAGEM

    lErro = CF("CFOP_Testa_Versao", sCFOP, objVersao.sColunaCFOP, objVersao.sDescricao)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    If objFilialEmpresa.objEndereco.sSiglaEstado <> objEnd.sSiglaEstado Then
        bUFDif = True
    Else
        bUFDif = False
    End If
    
    Select Case left(sCFOP, 1)
    
        Case "1", "5"
            If bUFDif Then gError 209291
        Case "2", "6"
            If Not bUFDif Then gError 209292
        Case "3", "7"
            If objEnd.iCodigoPais = PAIS_BRASIL Then gError 209293
        
    End Select
    
    NFiscal_Valida_CFOP = SUCESSO
    
    Exit Function
    
Erro_NFiscal_Valida_CFOP:
    
    NFiscal_Valida_CFOP = gErr
    
    Select Case gErr
    
        Case 209291
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_CFOP_INVALIDO_INTERESTADUAL", gErr, sCFOP)
        
        Case 209292
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_CFOP_INVALIDO_INTERNO", gErr, sCFOP)
            
        Case 209293
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_CFOP_INVALIDO_INTERNACIONAL", gErr, sCFOP)

        Case ERRO_SEM_MENSAGEM

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, sCFOP)
            
    End Select
    
    Exit Function
    
End Function

Public Function NFiscal_Valida_NCM(ByVal lComando As Long, ByVal objProduto As ClassProduto, ByVal objItemNF As ClassItemNF, ByVal objNF As ClassNFiscal) As Long

Dim lErro As Long
Dim sNCM As String, sUMTribExport As String

On Error GoTo Erro_NFiscal_Valida_NCM
    
    'Para que só precise regravar a nota para pegar o CEST do cadastro (senão teria que alterar item a item após já ter incluído os itens na nf)
    If Len(Trim(objProduto.sCEST)) <> 0 Then objItemNF.objTributacao.sCEST = Trim(objProduto.sCEST)

    sNCM = Trim(objItemNF.objTributacao.sIPICodProduto)

    'Se não for um serviço tem que ter o NCM
    If objProduto.iNatureza <> NATUREZA_PROD_SERVICO Then
        'Se não tem no item da NF, mas tem no produto acerta o item da NF
        If Len(Trim(sNCM)) = 0 Then sNCM = Trim(objProduto.sIPICodigo)
        'Se permanecer em branco dá erro
        If Len(Trim(sNCM)) = 0 Then gError 209264
    End If

    'Verifica se o NCM está na lista dos NCMS válidos e pega a UM Trib para exportação
    If Len(Trim(sNCM)) > 0 Then
    
        sUMTribExport = String(STRING_MAXIMO, 0)

        lErro = Comando_Executar(lComando, "SELECT UMTribExport FROM NCM WHERE NCM = ? AND (DataValidadeAte >= ? OR DataValidadeAte = ?) AND (DataValidadeDe <= ? OR DataValidadeDe = ?)", sUMTribExport, sNCM, objNF.dtDataEmissao, DATA_NULA, objNF.dtDataEmissao, DATA_NULA)
        If lErro <> AD_SQL_SUCESSO Then gError 208239
    
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 208240
    
        If lErro = AD_SQL_SEM_DADOS Then gError 208241
        
    End If
    
    If objNF.dtDataEmissao >= #3/6/2017# Then
        If left(objItemNF.objTributacaoItemNF.sNaturezaOp, 1) = "7" Or _
            objItemNF.objTributacaoItemNF.sNaturezaOp = "1501" Or _
            objItemNF.objTributacaoItemNF.sNaturezaOp = "2501" Or _
            objItemNF.objTributacaoItemNF.sNaturezaOp = "5501" Or _
            objItemNF.objTributacaoItemNF.sNaturezaOp = "5502" Or _
            objItemNF.objTributacaoItemNF.sNaturezaOp = "5504" Or _
            objItemNF.objTributacaoItemNF.sNaturezaOp = "5505" Or _
            objItemNF.objTributacaoItemNF.sNaturezaOp = "6501" Or _
            objItemNF.objTributacaoItemNF.sNaturezaOp = "6502" Or _
            objItemNF.objTributacaoItemNF.sNaturezaOp = "6504" Or _
            objItemNF.objTributacaoItemNF.sNaturezaOp = "6505" Then
            
            'NFe rejeição 817
            'OBS-> Não está tratando UM com mais de 5 caracteres por enquanto (MWHORA, 1000UN e QUILAT)
            If UCase(left(sUMTribExport, STRING_UM_SIGLA)) <> UCase(objItemNF.objTributacaoItemNF.sUMTrib) Then gError 216228
        
        End If
    End If
    
    objItemNF.objTributacao.sIPICodProduto = sNCM
    
    NFiscal_Valida_NCM = SUCESSO
    
    Exit Function
    
Erro_NFiscal_Valida_NCM:
    
    NFiscal_Valida_NCM = gErr
    
    Select Case gErr
               
        Case 208239, 208240
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NCM", gErr)
        
        Case 208241
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_NCM_INVALIDO", gErr, sNCM)
                         
        Case 209264
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_NCM_NAO_PREECNHIDO", gErr, objItemNF.iItem, objProduto.sCodigo)
                         
        Case 216228
            'A Unidade Tributável %s é incompatível com a UM %s do NCM %s para operação com Comércio Exterior (CFOP %s) no produto %s.
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_UMTRIB_INVALIDA_EXPORT", gErr, objItemNF.objTributacaoItemNF.sUMTrib, sUMTribExport, sNCM, objItemNF.objTributacaoItemNF.sNaturezaOp, objItemNF.sProduto)
                         
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 208242)
            
    End Select
    
    Exit Function
    
End Function

Public Function BloqueiosGen_Testa(ByVal iTipoTela As Integer, ByVal objDocBloq As Object, bBloqueio As Boolean) As Long
'Insere o novo Pedido de Venda no Banco de Dados

Dim lErro As Long
Dim iIndice As Integer
Dim lCodigo As Long
Dim objMapBloqGen As New ClassMapeamentoBloqGen
Dim iFilialEmpresa As Integer
Dim colBloqBD As New Collection
Dim iLiberado As Integer
Dim objBloqGen As ClassBloqueioGen

On Error GoTo Erro_BloqueiosGen_Testa

    bBloqueio = False

    objMapBloqGen.iTipoTelaBloqueio = iTipoTela
    
    lErro = CF("MapeamentoBloqGen_Le", objMapBloqGen)
    If lErro <> SUCESSO Then gError 205920

    lCodigo = CallByName(objDocBloq, objMapBloqGen.sClasseNomeCampoChave, VbGet)
    
    If objMapBloqGen.iClassePossuiFilEmp = MARCADO Then
        iFilialEmpresa = objDocBloq.iFilialEmpresa
    Else
        iFilialEmpresa = EMPRESA_TODA
    End If
   
    lErro = CF("BloqueiosGen_Le", objMapBloqGen, objDocBloq)
    If lErro <> SUCESSO Then gError 205921
    
    Set colBloqBD = ColecaoDef_Trans_Collection(CallByName(objDocBloq, objMapBloqGen.sNomeColecaoBloqDoc, VbGet))
    
    For Each objBloqGen In colBloqBD
            
        'Se ainda não foi liberado
        If objBloqGen.dtDataLib = DATA_NULA Then
            bBloqueio = True
            Exit For
        End If
            
    Next
    
    BloqueiosGen_Testa = SUCESSO

    Exit Function

Erro_BloqueiosGen_Testa:

    BloqueiosGen_Testa = gErr

    Select Case gErr

        Case 205920 To 205921

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 205922)

    End Select

    Exit Function

End Function

Private Function MapaDeEntregaProd_Exclui(ByVal objMapa As ClassMapaDeEntrega) As Long

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim lNumIntDoc As Long

On Error GoTo Erro_MapaDeEntregaProd_Exclui

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 205136
    Next

    'Le a tabela
    lErro = Comando_ExecutarPos(alComando(0), "SELECT NumIntDocMapa FROM MapaDeEntregaProd WHERE NumIntDocMapa= ? ", _
                0, lNumIntDoc, objMapa.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 205137

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205138

    Do While lErro <> AD_SQL_SEM_DADOS

        'Trava registro contra alterações/Leituras
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> SUCESSO Then gError 205139
    
        lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM MapaDeEntregaProd", alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 205140

        'Busca Próximo
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205141

    Loop

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    MapaDeEntregaProd_Exclui = SUCESSO

    Exit Function

Erro_MapaDeEntregaProd_Exclui:

    MapaDeEntregaProd_Exclui = gErr

    Select Case gErr

        Case 205136
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 205137, 205138, 205141
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MAPADEENTREGA", gErr)

        Case 205139
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_MAPADEENTREGA", gErr)

        Case 205140
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_MAPADEENTREGA", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 205142)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function MapaDeEntrega_GravarInfoCinta(ByVal objMapa As ClassMapaDeEntrega) As Long

Dim lErro As Long, iQtdeNFs As Integer
Dim alComando(0 To 3) As Long, sSQL As String
Dim iIndice As Integer, iLinha As Integer, asLinhas(1 To 5) As String
Dim lNumIntDocNF As Long, iQtdeEntregas As Integer
Dim lNumNotaFiscal As Long, dValorNF As Double
Dim dValorTotalNFs As Double, dValorTotalReceber As Double

On Error GoTo Erro_MapaDeEntrega_GravarInfoCinta

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 205136
    Next

    iLinha = 1
    
    'Le a tabela
    lErro = Comando_Executar(alComando(0), "SELECT NumIntDocNF, nf.NumNotaFiscal, nf.ValorTotal FROM MapaDeEntregaNF mnf, NFiscal nf WHERE nf.NumIntDoc = mnf.NumIntDocNF AND NumIntDocMapa= ? ORDER BY NumNotaFiscal", _
        lNumIntDocNF, lNumNotaFiscal, dValorNF, objMapa.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 205137

    lErro = Comando_BuscarProximo(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205138

    Do While lErro <> AD_SQL_SEM_DADOS

        'vai guardando a numeracao das notas
        If Len(Trim(asLinhas(iLinha))) > 74 Then
            If iLinha = 5 Then gError 205137
            iLinha = iLinha + 1
        End If
        If asLinhas(iLinha) <> "" Then asLinhas(iLinha) = asLinhas(iLinha) & " "
        asLinhas(iLinha) = asLinhas(iLinha) & CStr(lNumNotaFiscal)
                
        dValorTotalNFs = dValorTotalNFs + dValorNF
        iQtdeNFs = iQtdeNFs + 1
        
        'Busca Próximo
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205141

    Loop

    sSQL = "SELECT SUM(tit.Valor) FROM MapaDeEntrega m, MapaDeEntregaNF mnf, Nfiscal nf, CondicoesPagto cp, TitulosRecTodos tit, FormasPagamento fp WHERE " & _
        "m.NumIntDoc = mnf.NumIntDocMapa AND mnf.NumIntDocNF = nf.NumIntDoc AND nf.ClasseDocCPR=? AND " & _
        "nf.NumIntDocCPR = tit.NumIntDoc AND cp.Codigo = tit.CondicaoPagto AND m.NumIntDoc=? AND cp.formapagamento = fp.codigo AND fp.RecebidoNaEntrega=1"
    lErro = Comando_Executar(alComando(1), sSQL, dValorTotalReceber, CPR_TITULO_RECEBER, objMapa.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 205137

    lErro = Comando_BuscarProximo(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205138
    
    sSQL = "SELECT COUNT (DISTINCT nf.cliente) FROM MapaDeEntrega m, MapaDeEntregaNF mnf, NFiscal nf WHERE m.NumIntDoc = ? and m.NumIntDoc = mnf.NumIntDocMapa AND mnf.NumIntDocnf = nf.NumIntDoc"
    lErro = Comando_Executar(alComando(2), sSQL, iQtdeEntregas, objMapa.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 205137

    lErro = Comando_BuscarProximo(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205138

    lErro = Comando_Executar(alComando(3), "UPDATE MapaDeEntrega SET QtdeNFs = ?, TotalReceber = ?, ValorTotal = ?, QtdeEntregas = ?, ListaNFs1 = ?, ListaNFs2 = ?, ListaNFs3 = ?, ListaNFs4 = ?, ListaNFs5 = ? WHERE NumIntDoc = ?", _
        iQtdeNFs, Arredonda_Moeda(dValorTotalReceber), Arredonda_Moeda(dValorTotalNFs), iQtdeEntregas, asLinhas(1), asLinhas(2), asLinhas(3), asLinhas(4), asLinhas(5), objMapa.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 205137
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    MapaDeEntrega_GravarInfoCinta = SUCESSO

    Exit Function

Erro_MapaDeEntrega_GravarInfoCinta:

    MapaDeEntrega_GravarInfoCinta = gErr

    Select Case gErr

        Case 205136
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 205137, 205138, 205141
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MAPADEENTREGA", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 205142)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Entrega_Exibe_Mapa_Prepara(ByVal objMapa As ClassMapaDeEntrega, lNumIntRel As Long) As Long

Dim lErro As Long, iIndice As Integer
Dim lTransacao As Long
Dim alComando(0 To 1) As Long
Dim objMapaDoc As ClassMapaDeEntregaDoc
Dim objDoc As Object
Dim iSeq As Integer
Dim objEndereco As ClassEndereco
Dim objFilial As ClassFilialCliente

On Error GoTo Erro_Entrega_Exibe_Mapa_Prepara
    
    'abrir transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 205530
    
    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 205531
    Next
    
    'Obter NumIntRel
    lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_INT_REL_MAPA_ROTA", lNumIntRel)
    If lErro <> SUCESSO Then gError 205532
    
    For Each objMapaDoc In objMapa.colMapaDoc
    
        For Each objDoc In objMapa.colDocs
            If objMapaDoc.lNumIntDoc = objDoc.lNumIntDoc Then
                Exit For
            End If
        Next
            
        iSeq = iSeq + 1
    
        Set objEndereco = New ClassEndereco
        Set objFilial = New ClassFilialCliente
    
        objFilial.lCodCliente = objDoc.lCliente
        
        If objMapa.iTipoDoc = MAPAENTREGA_TIPODOC_PV Then
            objFilial.iCodFilial = objDoc.iFilial
        Else
            objFilial.iCodFilial = objDoc.iFilialCli
        End If

        lErro = CF("FilialCliente_Le", objFilial)
        If lErro <> SUCESSO And lErro <> 12567 Then gError 205533
        
        objEndereco.lCodigo = objFilial.lEnderecoEntrega
        
        'Le endereço no BD
        lErro = CF("Endereco_le", objEndereco)
        If lErro <> SUCESSO Then gError 205534
        
        If Len(Trim(objEndereco.sEndereco)) = 0 Then
        
            objEndereco.lCodigo = objFilial.lEndereco
        
        End If
        
        lErro = Comando_Executar(alComando(1), "INSERT INTO MapaRota(NumIntRel, Sequencial, CodEndereco)  VALUES (?,?,?)", lNumIntRel, iSeq, objEndereco.lCodigo)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205535
            
    Next

     'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
     'fechar transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 205536
    
    Entrega_Exibe_Mapa_Prepara = SUCESSO
    
    Exit Function
    
Erro_Entrega_Exibe_Mapa_Prepara:
    
    Entrega_Exibe_Mapa_Prepara = gErr
    
    Select Case gErr
        
        Case 205530
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
    
        Case 205531
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 205532 To 205534

        Case 205535
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERT_MAPAROTA", gErr)
    
        Case 205536
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 205537)
            
    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Call Transacao_Rollback
    
    Exit Function
    
End Function

Public Function RPSWEBLote_Grava(ByVal iFilialEmpresa As Integer, ByVal colNFeFedLote As Collection) As Long

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim objNFeFedLote As ClassNFeFedLote
Dim lTransacao As Long
Dim iIndice As Integer

On Error GoTo Erro_RPSWEBLote_Grava

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 204980

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 204981
    Next
    
    For Each objNFeFedLote In colNFeFedLote
    
        lErro = Comando_Executar(alComando(1), "INSERT INTO RPSWEBLote (FilialEmpresa, Lote, NumIntNF, Data, Hora, Usuario) VALUES (?,?,?,?,?,?)", iFilialEmpresa, objNFeFedLote.lLote, objNFeFedLote.lNumIntNF, Date, CDbl(Time), gsUsuario)
        If lErro <> AD_SQL_SUCESSO Then gError 204982
    
    Next
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 204983

    RPSWEBLote_Grava = SUCESSO

    Exit Function

Erro_RPSWEBLote_Grava:

    RPSWEBLote_Grava = gErr

    Select Case gErr

        Case 204980
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 204981
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 204982
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_NFEFEDLOTE", gErr)

        Case 204983
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 204984)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    'Desfaz Transação
    Call Transacao_Rollback

    Exit Function

End Function

Public Function Loreal_Exporta_Dados(ByVal dtDataDe As Date, ByVal dtDataAte As Date, ByVal sNomeDir As String) As Long

Dim lErro As Long
Dim alComando(0 To 5) As Long
Dim iIndice As Integer
Dim bArqAberto As Boolean
Dim sArq As String
Dim tCliente As typeCliente, tFilial As typeFilialCliente, tEndereco As typeEndereco
Dim tVendedor As typeVendedor, sProduto As String, sEAN As String, dQtdProdDia As Double, dQtd As Double, dQtdProdDiaAnt As Double
Dim sSiglaPais As String, dtDataCadastro As Date, sDataCadastro As String
Dim tNFiscal As typeNFiscal, tItemNF As typeItemNF, iFaturamento As Integer, sTipoNF As String, dtDataDevolucao As Date, lAux As Long, iClasseUM As Integer, dFator As Double
Dim sReg As String, sCNPJ As String
Dim objFilialEmpresa As New AdmFiliais

On Error GoTo Erro_Loreal_Exporta_Dados

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 206928
    Next
    
    bArqAberto = False

    objFilialEmpresa.lCodEmpresa = glEmpresa
    objFilialEmpresa.iCodFilial = giFilialEmpresa

    lErro = CF("FilialEmpresa_Le", objFilialEmpresa)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    sCNPJ = objFilialEmpresa.sCgc
    
    If Len(Trim(sCNPJ)) = 0 Then gError 206944
    
    '*************
    '*VMI_PDV.TXT*
    '*************
    'Nomenclatura: vmi_pdv.txt Conteúdo: Cadastro dos clientes do Distribuidor Separador de Campos: | (pipe) Observações: a. Deve ser gerado diariamente por completo, substituindo o arquivo do dia anterior; b. Deve conter somente os PDVs que tenham compra de produtos relacionados à LOréal Brasil; c. PDVs inativos não devem ser enviados nos arquivos.
    
    sArq = "vmi_pdv.txt"
    
    Open sNomeDir & sArq For Output As #1
    bArqAberto = True

    sReg = "VMIP" & "|" & _
            FormataCpoTexto(left(sCNPJ, 14), 14) & "|" & _
            Format(Date, "YYYYMMDD")

    Print #1, sReg
    
    sSiglaPais = String(3, 0)
    tCliente.sNomeReduzido = String(STRING_CLIENTE_NOME_REDUZIDO, 0)
    tCliente.sRazaoSocial = String(STRING_CLIENTE_RAZAO_SOCIAL, 0)
    tFilial.sCgc = String(STRING_CGC, 0)
    tEndereco.sBairro = String(STRING_BAIRRO, 0)
    tEndereco.sCEP = String(STRING_CEP, 0)
    tEndereco.sCidade = String(STRING_CIDADE, 0)
    tEndereco.sEmail = String(STRING_EMAIL, 0)
    tEndereco.sEndereco = String(STRING_ENDERECO, 0)
    tEndereco.sSiglaEstado = String(STRING_ESTADO, 0)
    
    'Le os clientes a serem exportados (somente os que estão em VendasLoreal)
    lErro = Comando_Executar(alComando(0), "SELECT CodCliente, CodFilial, CGC, RazaoSocial, NomeReduzido, Endereco, Bairro, Cidade ,UF, Pais, CEP, DataCadastro FROM ClientesLoreal ORDER BY RazaoSocial", _
    tFilial.lCodCliente, tFilial.iCodFilial, tFilial.sCgc, tCliente.sRazaoSocial, tCliente.sNomeReduzido, tEndereco.sEndereco, tEndereco.sBairro, tEndereco.sCidade, tEndereco.sSiglaEstado, sSiglaPais, tEndereco.sCEP, dtDataCadastro)
    If lErro <> AD_SQL_SUCESSO Then gError 206929

    'Busca Primeiro documento
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 206930
    
    Do While lErro <> AD_SQL_SEM_DADOS
    
        If dtDataCadastro = DATA_NULA Then
        
            lErro = Comando_Executar(alComando(1), "SELECT MIN(DataAtualizacao) FROM ClienteHistorico WHERE Codigo =  ? AND Filial = ?", dtDataCadastro, tFilial.lCodCliente, tFilial.iCodFilial)
            If lErro <> AD_SQL_SUCESSO Then gError 206931
        
            'Busca Primeiro documento
            lErro = Comando_BuscarPrimeiro(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 206932
            
            If lErro = AD_SQL_SUCESSO Then
                sDataCadastro = Format(dtDataCadastro, "YYYYMMDD")
            Else
                sDataCadastro = "18991230"
            End If
        Else
            sDataCadastro = Format(dtDataCadastro, "YYYYMMDD")
        End If
        
        If Len(Trim(tFilial.sCgc)) = 0 Then gError 206945
        If Len(Trim(tEndereco.sEndereco)) = 0 Then gError 206950
        If Len(Trim(tEndereco.sCidade)) = 0 Then gError 206951
        If Len(Trim(tEndereco.sBairro)) = 0 Then gError 206952
        If Len(Trim(sSiglaPais)) = 0 Then gError 206953
        If Len(Trim(tEndereco.sCEP)) = 0 Then gError 206954
    
        sReg = "VMIQ" & "|" & _
                FormataCpoTexto(left(tFilial.sCgc, 14), 14) & "|" & _
                FormataCpoTexto(left(tCliente.sRazaoSocial, 60), 60) & "|" & _
                FormataCpoTexto(left(tCliente.sNomeReduzido, 60), 60) & "|" & _
                FormataCpoTexto(left(tEndereco.sEndereco, 70), 70) & "|" & _
                FormataCpoTexto(left(tEndereco.sCidade, 50), 50) & "|" & _
                FormataCpoTexto(left(tEndereco.sBairro, 50), 50) & "|" & _
                FormataCpoTexto(left(tEndereco.sSiglaEstado, 2), 2) & "|" & _
                FormataCpoTexto(left(sSiglaPais, 3), 3) & "|" & _
                FormataCpoTexto(left(tEndereco.sCEP, 8), 8) & "|" & _
                "N1" & "|" & _
                sDataCadastro & "|" & _
                "1"
                
        Print #1, sReg
        
        'Busca o próximo
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 206933

    Loop
    
    sReg = "VMIR"
    Print #1, sReg

    Close #1
    bArqAberto = False
    
    '*************
    '*VMI_VEND.TXT*
    '*************
    'Nomenclatura: vmi_vend.txt Conteúdo: Cadastro dos vendedores do Distribuidor Separador de Campos: | (pipe) Observações: a. Deve ser gerado diariamente por completo, substituindo o arquivo do dia anterior; b. Deve conter somente os vendedores que venderam produtos relacionados à LOréal Brasil.
    
    sArq = "vmi_vend.txt"
    
    Open sNomeDir & sArq For Output As #1
    bArqAberto = True

    sReg = "VMIV" & "|" & _
            FormataCpoTexto(left(sCNPJ, 14), 14) & "|" & _
            Format(Date, "YYYYMMDD")

    Print #1, sReg
    
    tVendedor.sNome = String(STRING_VENDEDOR_NOME, 0)
    
    'Le os vendedores a serem exportados (somente os que estão em VendasLoreal)
    lErro = Comando_Executar(alComando(2), "SELECT Codigo, Nome, Ativo FROM VendedoresLoreal ORDER BY Nome", _
    tVendedor.iCodigo, tVendedor.sNome, tVendedor.iAtivo)
    If lErro <> AD_SQL_SUCESSO Then gError 206934

    'Busca Primeiro documento
    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 206935
    
    Do While lErro <> AD_SQL_SEM_DADOS
    
        sReg = "VMIX" & "|" & _
                FormataCpoTexto(CStr(tVendedor.iCodigo), 14) & "|" & _
                FormataCpoTexto(left(tVendedor.sNome, 50), 50) & "|" & _
                CStr(tVendedor.iAtivo)

        Print #1, sReg
        
        'Busca o próximo
        lErro = Comando_BuscarProximo(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 206936

    Loop
    
    sReg = "VMIZ"
    Print #1, sReg

    Close #1
    bArqAberto = False
    
    '*************
    '*VMIPOSEST.TXT*
    '*************
    'Nomenclatura: vmiposest_AAAAMMDD.txt Conteúdo: Posição dos estoques do Distribuidor no dia anterior à geração do arquivo Separador de Campos: | (pipe) Observações: a. Deve ser gerado diariamente por completo; b. Deve ser enviado somente o estoque dos produtos da LOréal. c. O Connect identifica somente o arquivo que, em seu nome, possui a data do dia corrente. Internamente pode haver conteúdo da data de quaisquer dias.
    
    sArq = "vmiposest_" & Format(Date, "YYYYMMDD") & ".txt"
    
    Open sNomeDir & sArq For Output As #1
    bArqAberto = True

    sReg = "VMIE" & "|" & _
            FormataCpoTexto(left(sCNPJ, 14), 14) & "|" & _
            Format(Date, "YYYYMMDD")

    Print #1, sReg
    
    sProduto = String(STRING_PRODUTO, 0)
    sEAN = String(STRING_PRODUTO_CODIGO_BARRAS, 0)
    
    'Le os produtos a serem exportados
    lErro = Comando_Executar(alComando(3), "SELECT Codigo, EAN, Quantidade FROM ProdutosLoreal WHERE FilialEmpresa = ? ORDER BY EAN ", _
    sProduto, sEAN, dQtdProdDia, giFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 206937

    'Busca Primeiro documento
    lErro = Comando_BuscarPrimeiro(alComando(3))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 206938
    
    Do While lErro <> AD_SQL_SEM_DADOS
    
        'PS-> Talvez seja necessário converter para outra unidade de medida
        'No arquivo pede sempre UN, vou considerar que a UM de Estoque é em unidade certa
    
        'A quantidade tem que ser do dia anterior, então tem que abater as movimentações do dia
        lErro = Comando_Executar(alComando(4), "SELECT SUM(QuantEntrada - QuantSaida) FROM SldDiaEst WHERE FilialEmpresa = ? AND Produto = ? AND Data >= ?", _
        dQtd, giFilialEmpresa, sProduto, Date)
        If lErro <> AD_SQL_SUCESSO Then gError 206939
    
        'Busca Primeiro documento
        lErro = Comando_BuscarPrimeiro(alComando(4))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 206940
        
        If lErro <> AD_SQL_SEM_DADOS Then
            dQtdProdDiaAnt = dQtdProdDia - dQtd
        Else
            dQtdProdDiaAnt = dQtdProdDia
        End If
    
        sReg = "VMIF" & "|" & _
                FormataCpoTexto(left(sEAN, 13), 13) & "|" & _
                FormataCpoTexto(Format(dQtdProdDiaAnt * 1000, "#################0"), 18)

        Print #1, sReg
        
        'Busca o próximo
        lErro = Comando_BuscarProximo(alComando(3))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 206941

    Loop
    
    sReg = "VMIG"
    Print #1, sReg

    Close #1
    bArqAberto = False
    
    '*************
    '*VMISELLOUT.TXT*
    '*************
    'Nomenclatura: vmisellout_AAAAMMDD.txt Conteúdo: Sell out do Distribuidor no dia anterior à geração do arquivo Separador de Campos: | (pipe) Observações: a. Deve ser gerado diariamente contendo o sell-out do dia anterior à geração do arquivo. b. O Connect identifica somente o arquivo que, em seu nome, possui a data do dia corrente. Internamente pode haver conteúdo da data de quaisquer dias.
    
    sArq = "vmisellout_" & Format(Date, "YYYYMMDD") & ".txt"
    
    Open sNomeDir & sArq For Output As #1
    bArqAberto = True

    sReg = "VMIS" & "|" & _
            FormataCpoTexto(left(sCNPJ, 14), 14) & "|" & _
            Format(Date, "YYYYMMDD")

    Print #1, sReg
    
    tFilial.sCgc = String(STRING_CGC, 0)
    sEAN = String(STRING_PRODUTO_CODIGO_BARRAS, 0)
    tItemNF.sUnidadeMed = String(STRING_UM_SIGLA, 0)
    tItemNF.sUMEstoque = String(STRING_UM_SIGLA, 0)
    
    'Le as vendas filtrando o período
    lErro = Comando_Executar(alComando(5), "SELECT NumIntDoc, Status, Cliente, CGC, Vendedor, EAN, Quantidade, UnidadeMed, PrecoUnitario, DataEmissao, NumNotaFiscal, Faturamento, DataDevolucao, SiglaUmEstoque, ClasseUM, ValorDescontoTotal FROM VendasLoreal WHERE FilialEmpresa = ? AND DataEmissao BETWEEN ? AND ? AND Faturamento IN (1,2)", _
    tNFiscal.lNumIntDoc, tNFiscal.iStatus, tNFiscal.lCliente, tFilial.sCgc, tFilial.iVendedor, sEAN, tItemNF.dQuantidade, tItemNF.sUnidadeMed, tItemNF.dPrecoUnitario, tNFiscal.dtDataEmissao, tNFiscal.lNumNotaFiscal, iFaturamento, dtDataDevolucao, tItemNF.sUMEstoque, iClasseUM, tItemNF.dValorDesconto, giFilialEmpresa, dtDataDe, dtDataAte)
    If lErro <> AD_SQL_SUCESSO Then gError 206942

    'Busca Primeiro documento
    lErro = Comando_BuscarPrimeiro(alComando(5))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 206943
    
    Do While lErro <> AD_SQL_SEM_DADOS
    
        'Em caso de Devolução (DV) deve ser enviado o número e a data da nota fiscal que originou a venda do item.
        'Informa V para Venda | DV para Devolução | C para Cancelado Campo em branco será considerado como V (Venda).
        If iFaturamento = 2 Then
            sTipoNF = "DV"
        Else
            sTipoNF = "V "
        End If
        If tNFiscal.iStatus = STATUS_CANCELADO Then
            sTipoNF = "C "
            dtDataDevolucao = tNFiscal.dtDataEmissao
        End If
        
        If tFilial.iVendedor = 0 Then gError 206947
        
        'Converter Quantidade para UM de estoque
        
        lErro = CF("UM_Conversao", iClasseUM, tItemNF.sUnidadeMed, tItemNF.sUMEstoque, dFator)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
        sReg = "VMIT" & "|" & _
                FormataCpoTexto(left(tFilial.sCgc, 14), 14) & "|" & _
                FormataCpoTexto(CStr(tFilial.iVendedor), 14) & "|" & _
                FormataCpoTexto(left(sEAN, 13), 13) & "|" & _
                FormataCpoTexto(Format(tItemNF.dQuantidade * dFator, "##############0"), 15) & "|" & _
                "UN " & "|" & _
                FormataCpoTexto(Format(((tItemNF.dQuantidade * tItemNF.dPrecoUnitario) - tItemNF.dValorDesconto) * 100, "################0"), 17) & "|" & _
                "BRL" & "|" & _
                FormataCpoTexto(CStr(tNFiscal.lNumNotaFiscal), 12) & "|" & _
                Format(tNFiscal.dtDataEmissao, "YYYYMMDD") & "|" & _
                sTipoNF & "|" & _
                IIf(dtDataDevolucao <> DATA_NULA, Format(dtDataDevolucao, "YYYYMMDD"), "        ")

        Print #1, sReg
        
        'Busca o próximo
        lErro = Comando_BuscarProximo(alComando(5))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 206948

    Loop
    
    sReg = "VMIU"
    Print #1, sReg

    Close #1
    bArqAberto = False
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Loreal_Exporta_Dados = SUCESSO

    Exit Function

Erro_Loreal_Exporta_Dados:

    Loreal_Exporta_Dados = gErr

    Select Case gErr

        Case 206928
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 206929 To 206933
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CLIENTES", gErr)
            
        Case 206934 To 206936
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_VENDEDORES", gErr)
            
        Case 206937 To 206941
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOS", gErr)

        Case 206942, 206943, 206948
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", gErr)

        Case 206944
            Call Rotina_Erro(vbOKOnly, "ERRO_ARQLOREAL_EMP_SEM_CNPJ", gErr)

        Case 206945
            Call Rotina_Erro(vbOKOnly, "ERRO_ARQLOREAL_CLIENTE_SEM_CGC", gErr, tFilial.lCodCliente, tFilial.iCodFilial, tCliente.sNomeReduzido)

        Case 206946
            Call Rotina_Erro(vbOKOnly, "ERRO_ARQLOREAL_CLIENTE_NAO_LOREAL", gErr, tNFiscal.lCliente, tNFiscal.lNumNotaFiscal)
        
        Case 206947
            Call Rotina_Erro(vbOKOnly, "ERRO_ARQLOREAL_SEM_VENDEDOR", gErr, tNFiscal.lCliente, tNFiscal.lNumNotaFiscal)

        Case 206950
            Call Rotina_Erro(vbOKOnly, "ERRO_ARQLOREAL_CLIENTE_SEM_ENDERECO", gErr, tFilial.lCodCliente, tFilial.iCodFilial, tCliente.sNomeReduzido)

        Case 206951
            Call Rotina_Erro(vbOKOnly, "ERRO_ARQLOREAL_CLIENTE_SEM_CIDADE", gErr, tFilial.lCodCliente, tFilial.iCodFilial, tCliente.sNomeReduzido)

        Case 206952
            Call Rotina_Erro(vbOKOnly, "ERRO_ARQLOREAL_CLIENTE_SEM_BAIRRO", gErr, tFilial.lCodCliente, tFilial.iCodFilial, tCliente.sNomeReduzido)

        Case 206953
            Call Rotina_Erro(vbOKOnly, "ERRO_ARQLOREAL_CLIENTE_SEM_SIGLAPAIS", gErr, tFilial.lCodCliente, tFilial.iCodFilial, tCliente.sNomeReduzido)

        Case 206954
            Call Rotina_Erro(vbOKOnly, "ERRO_ARQLOREAL_CLIENTE_SEM_CEP", gErr, tFilial.lCodCliente, tFilial.iCodFilial, tCliente.sNomeReduzido)

        Case ERRO_SEM_MENSAGEM
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 206949)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    If bArqAberto Then Close #1

    Exit Function

End Function

Function RelRankingProd_Prepara(lNumIntRel As Long, ByVal iFilialEmpresa As Integer, ByVal dtDataDe As Date, ByVal dtDataAte As Date, Optional ByVal sUMPadrao As String = "", Optional ByVal iNivelProd As Integer = 0, Optional ByVal iOrdenacao As Integer = 0, Optional ByVal sCat As String = "", Optional ByVal sCatDe As String = "", Optional ByVal sCatAte As String = "") As Long
'Essa função vai ler as vendas e devoluções em um período\filial e vai gravá-las na tabela de detalhamento
'Depois vai agrupar pelo nível do produto escolhido gravando por produto ordenado conforme iOrdenacao
'Depois vai gravar os dados usados no filtro e os totais acumulados
'Se sUMPadrao ="" ou não existir na Classe do produto ele vai ser gravado com a UM de Venda
'Se iNivelProd = 0 o sistema vai gravar o produto analítico, caso contrário vai forçar o nível escolido
'iOrdenacao -> 0 = Por Produto, 1 = Por Valor Desc., 2 = Por Qtd Desc., 3 = Por Descrição

Dim lErro As Long
Dim iIndice As Integer
Dim lTransacao As Long
Dim alComando(0 To 7) As Long
Dim lSeq As Long, sSQL As String, lNumIntItemNFGrade As Long
Dim lNumIntItemNF As Long, dQuantidade As Double, dPrecoUnitario As Double, dDescontoItem As Double, iFaturamento As Integer
Dim sUnidadeMed As String, sUMBase As String, iClasseUM As Integer, iTipoDocInfo As Integer, iGerencial As Integer
Dim sProduto As String, sDescricao As String, sFiltro As String, sOrderBy As String
Dim dQtdDevTotal As Double, dQtdFatTotal As Double, dVlrDevTotal As Double, dVlrFatTotal As Double, dFator As Double
Dim lNumNFiscal As Long, iItemNF As Integer, iAux As Integer, iNivel As Integer
Dim dQtdFatItem As Double, dQtdDevItem As Double, dVlrFatItem As Double, dVlrDevItem As Double
Dim sUMVenda As String, sProdNivel As String, lNumIntDocNFOrig As Long
Dim sProdutoGrade As String, dQuantidadeGrade As Double, dPrecoUnitarioAjustado As Double
Dim objNFOrig As ClassNFiscal, dQuantidadeNFOrig As Double, dPrecoUnitarioNFOrig As Double
Dim objItemGrade As ClassItemRomaneioGrade, objItemNFOrig As ClassItemNF, dQuantidadeGradeNFOrig As Double

On Error GoTo Erro_RelRankingProd_Prepara

    'Abrir transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 206968

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 206969
    Next
       
    'Obter NumIntRel
    lErro = CF("Config_ObterNumInt", "FATConfig", "NUMINTREL_RELRANKINGPROD", lNumIntRel)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    'Leitura dos itens de NF (Venda e Devolução)
    sSQL = "SELECT N.NumIntNotaOriginal, N.NumNotaFiscal, I.Item, I.NumIntDoc, I.Quantidade, I.PrecoUnitario, I.ValorDesconto, "
    sSQL = sSQL & "T.Faturamento , I.UnidadeMed, P.SiglaUMVenda, P.ClasseUM, T.Codigo, P.Gerencial, I.Produto, P.Nivel "
    sSQL = sSQL & "FROM TiposDocInfo AS T, ItensNFiscal As I, NFiscal As N, Produtos As P "
    sSQL = sSQL & "WHERE N.NumIntDoc = I.NumIntNF AND T.Codigo = N.TipoNFiscal AND "
    sSQL = sSQL & "(T.Faturamento IN (1, 2)) AND I.Produto = P.Codigo AND N.Status <> 7  AND "
    sSQL = sSQL & "(T.Complementar = 0 OR T.Codigo IN (?,?)) AND N.DataEmissao BETWEEN ? AND ?  "
    
    If sCat <> "" Then
        sSQL = sSQL & " AND EXISTS ( SELECT X.Produto FROM ProdutoCategoria AS X WHERE I.Produto= X.Produto AND X.Categoria = ? AND (X.Item >= ? OR ?=?) AND ((X.Item <= ? OR ?=?))) "
    End If

    sUnidadeMed = String(STRING_UM_SIGLA, 0)
    sUMVenda = String(STRING_UM_SIGLA, 0)
    sProduto = String(STRING_PRODUTO, 0)
    
    If iFilialEmpresa = EMPRESA_TODA Then
    
        lErro = CF("FilialEmpresa_Le_Filtro", sFiltro)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

        If sCat = "" Then
            lErro = Comando_Executar(alComando(1), sSQL & sFiltro, _
            lNumIntDocNFOrig, lNumNFiscal, iItemNF, lNumIntItemNF, dQuantidade, dPrecoUnitario, dDescontoItem, iFaturamento, sUnidadeMed, sUMVenda, iClasseUM, iTipoDocInfo, iGerencial, sProduto, iNivel, DOCINFO_NFISCP, DOCINFO_NFISFCP, dtDataDe, dtDataAte)
        Else
            lErro = Comando_Executar(alComando(1), sSQL & sFiltro, _
            lNumIntDocNFOrig, lNumNFiscal, iItemNF, lNumIntItemNF, dQuantidade, dPrecoUnitario, dDescontoItem, iFaturamento, sUnidadeMed, sUMVenda, iClasseUM, iTipoDocInfo, iGerencial, sProduto, iNivel, DOCINFO_NFISCP, DOCINFO_NFISFCP, dtDataDe, dtDataAte, sCat, sCatDe, sCatDe, "", sCatAte, sCatAte, "")
        End If
    Else
        If sCat = "" Then
            lErro = Comando_Executar(alComando(1), sSQL & " AND N.FilialEmpresa = ? ", _
            lNumIntDocNFOrig, lNumNFiscal, iItemNF, lNumIntItemNF, dQuantidade, dPrecoUnitario, dDescontoItem, iFaturamento, sUnidadeMed, sUMVenda, iClasseUM, iTipoDocInfo, iGerencial, sProduto, iNivel, DOCINFO_NFISCP, DOCINFO_NFISFCP, dtDataDe, dtDataAte, iFilialEmpresa)
        Else
            lErro = Comando_Executar(alComando(1), sSQL & " AND N.FilialEmpresa = ? ", _
            lNumIntDocNFOrig, lNumNFiscal, iItemNF, lNumIntItemNF, dQuantidade, dPrecoUnitario, dDescontoItem, iFaturamento, sUnidadeMed, sUMVenda, iClasseUM, iTipoDocInfo, iGerencial, sProduto, iNivel, DOCINFO_NFISCP, DOCINFO_NFISFCP, dtDataDe, dtDataAte, sCat, sCatDe, sCatDe, "", sCatAte, sCatAte, "", iFilialEmpresa)
        End If
    End If
    If lErro <> AD_SQL_SUCESSO Then gError 206970
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 206971

    Do While lErro = AD_SQL_SUCESSO
    
        sUMBase = sUMVenda
    
        If Len(Trim(sUMPadrao)) > 0 Then
    
            'Le as unidades de medida procurando a UM padrão
            lErro = Comando_Executar(alComando(4), "SELECT Ativo FROM UnidadesDeMedida WHERE Classe = ? AND Sigla = ?", iAux, iClasseUM, sUMPadrao)
            If lErro <> AD_SQL_SUCESSO Then gError 206972
    
            lErro = Comando_BuscarPrimeiro(alComando(4))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 206973
            
            'Se puder converter para UM padrão usa ela
            If lErro = AD_SQL_SUCESSO Then
                sUMBase = sUMPadrao
            End If
            
        End If
        
        lErro = CF("UM_Conversao", iClasseUM, sUnidadeMed, sUMBase, dFator)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

        If iGerencial = PRODUTO_GERENCIAL Then

            sProdutoGrade = String(STRING_PRODUTO, 0)

            'Le os itens de Grade\Kit de Venda
            lErro = Comando_Executar(alComando(2), "SELECT I.NumIntDoc, I.Produto, I.Quantidade, P.Nivel FROM ItensNFiscalGrade AS I, Produtos as P WHERE I.Produto = P.Codigo AND I.NumIntItemNF = ?", _
            lNumIntItemNFGrade, sProdutoGrade, dQuantidadeGrade, iNivel, lNumIntItemNF)
            If lErro <> AD_SQL_SUCESSO Then gError 206974

            lErro = Comando_BuscarPrimeiro(alComando(2))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 206975
        
            Do While lErro = AD_SQL_SUCESSO
            
                dVlrFatItem = 0
                dVlrDevItem = 0
                dQtdFatItem = 0
                dQtdDevItem = 0
                
                dPrecoUnitarioAjustado = dPrecoUnitario
                
                'Faturada
                If iFaturamento = 1 Then
                
                    If (iTipoDocInfo = DOCINFO_NFISCP Or iTipoDocInfo = DOCINFO_NFISFCP) And dQuantidadeGrade = 0 Then
                    
                        dQuantidadeNFOrig = 0
                        dQuantidadeGradeNFOrig = 0
                    
                        'Pegar a quantidade do item e a quantidade o item de grade original para ratear o preço
                        'pois em nota de complemento de preco a quantidade é zero e não se sabe o quando do valor é para cada produto
                        Set objNFOrig = New ClassNFiscal
                        objNFOrig.lNumIntDoc = lNumIntDocNFOrig
                    
                        lErro = CF("NFiscal_Le", objNFOrig)
                        If lErro <> SUCESSO And lErro <> 31442 Then gError ERRO_SEM_MENSAGEM
                    
                        lErro = CF("NFiscalItens_Le", objNFOrig)
                        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
                        
                        For Each objItemNFOrig In objNFOrig.colItensNF
                            If objItemNFOrig.sProduto = sProduto Then
                                dQuantidadeNFOrig = objItemNFOrig.dQuantidade
                                Exit For
                            End If
                        Next
                        
                        If dQuantidadeNFOrig > 0 Then
                            For Each objItemGrade In objItemNFOrig.colItensRomaneioGrade
                                If objItemGrade.sProduto = sProdutoGrade Then
                                    dQuantidadeGradeNFOrig = objItemGrade.dQuantidade
                                    Exit For
                                End If
                            Next
                            dQuantidadeGrade = dQuantidadeGradeNFOrig
                            dPrecoUnitarioAjustado = (dPrecoUnitarioAjustado / dQuantidadeNFOrig)
                            
                        End If
                    End If
                    
                    If dQuantidade <> 0 Then
                        dVlrFatItem = Arredonda_Moeda((dQuantidadeGrade * dPrecoUnitarioAjustado) - dDescontoItem * (dQuantidadeGrade / dQuantidade))
                    Else
                        dVlrFatItem = Arredonda_Moeda((dQuantidadeGrade * dPrecoUnitarioAjustado) - dDescontoItem)
                    End If
                    dVlrFatTotal = dVlrFatTotal + dVlrFatItem
        
                    If iTipoDocInfo <> DOCINFO_NFISCP And iTipoDocInfo <> DOCINFO_NFISFCP Then
                        dQtdFatItem = dQuantidadeGrade * dFator
                        dQtdFatTotal = dQtdFatTotal + dQtdFatItem
                    End If
        
                Else
                    
                    If dQuantidade <> 0 Then
                        dVlrDevItem = Arredonda_Moeda((dQuantidadeGrade * dPrecoUnitarioAjustado) - dDescontoItem * (dQuantidadeGrade / dQuantidade))
                    Else
                        dVlrDevItem = Arredonda_Moeda((dQuantidadeGrade * dPrecoUnitarioAjustado) - dDescontoItem)
                    End If
                    dVlrDevTotal = dVlrDevTotal + dVlrDevItem
        
                    dQtdDevItem = dQuantidadeGrade * dFator
                    dQtdDevTotal = dQtdDevTotal + dQtdDevItem
        
                End If
                
                lErro = RelRankingProd_Ret_ProdNivel(sProdNivel, sProdutoGrade, iNivel, iNivelProd)
                If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
                
                'Gravar na tabela de detalhamento
                lErro = Comando_Executar(alComando(3), "INSERT INTO RelRankingProdDet (NumIntRel, NumIntItemNF, NumIntItemNFGrade, NumNotaFiscal, Item, TipoNF, Produto, ProdutoNivel, QuantidadeFat, QuantidadeDev, ValorFat, ValorDev, UM ) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?) ", _
                lNumIntRel, lNumIntItemNF, lNumIntItemNFGrade, lNumNFiscal, iItemNF, iTipoDocInfo, sProdutoGrade, sProdNivel, dQtdFatItem, dQtdDevItem, dVlrFatItem, dVlrDevItem, sUMBase)
                If lErro <> AD_SQL_SUCESSO Then gError 206976

                lErro = Comando_BuscarPrimeiro(alComando(2))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 206977

            Loop

        Else

            dVlrFatItem = 0
            dVlrDevItem = 0
            dQtdFatItem = 0
            dQtdDevItem = 0

            'Faturada
            If iFaturamento = 1 Then
            
                If dQuantidade = 0 Then dQuantidade = 1
                
                dVlrFatItem = Arredonda_Moeda((dQuantidade * dPrecoUnitario) - dDescontoItem)
                dVlrFatTotal = dVlrFatTotal + dVlrFatItem
       
                If iTipoDocInfo <> DOCINFO_NFISCP And iTipoDocInfo <> DOCINFO_NFISFCP Then
                    dQtdFatItem = dQuantidade * dFator
                    dQtdFatTotal = dQtdFatTotal + dQtdFatItem
                End If
    
            Else
                
                dVlrDevItem = Arredonda_Moeda((dQuantidade * dPrecoUnitario) - dDescontoItem)
                dVlrDevTotal = dVlrDevTotal + dVlrDevItem
    
                dQtdDevItem = dQuantidade * dFator
                dQtdDevTotal = dQtdDevTotal + dQtdDevItem
    
            End If
            
            lErro = RelRankingProd_Ret_ProdNivel(sProdNivel, sProduto, iNivel, iNivelProd)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
            
            'Gravar na tabela de detalhamento
            lErro = Comando_Executar(alComando(3), "INSERT INTO RelRankingProdDet (NumIntRel, NumIntItemNF, NumIntItemNFGrade, NumNotaFiscal, Item, TipoNF, Produto, ProdutoNivel, QuantidadeFat, QuantidadeDev, ValorFat, ValorDev, UM ) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?) ", _
            lNumIntRel, lNumIntItemNF, 0, lNumNFiscal, iItemNF, iTipoDocInfo, sProduto, sProdNivel, dQtdFatItem, dQtdDevItem, dVlrFatItem, dVlrDevItem, sUMBase)
            If lErro <> AD_SQL_SUCESSO Then gError 206978
            
        End If

        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 206979

    Loop

    'Gravar o cabeçalho
    lErro = Comando_Executar(alComando(5), "INSERT INTO RelRankingProdCab (NumIntRel, FilialEmpresa, DataDe, DataAte, UMPadrao, NivelProd, Ordenacao, DataGer, HoraGer, QuantidadeDevolvida, QuantidadeFaturada, ValorDevolvido, ValorFaturado ) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?) ", _
    lNumIntRel, iFilialEmpresa, dtDataDe, dtDataAte, sUMPadrao, iNivelProd, iOrdenacao, Date, CDbl(Time), dQtdDevTotal, dQtdFatTotal, dVlrDevTotal, dVlrFatTotal)
    If lErro <> AD_SQL_SUCESSO Then gError 206980
    
    'iOrdenacao -> 0 = Por Produto, 1 = Por Valor Desc., 2 = Por Qtd Desc., 3 = Por Descrição
    Select Case iOrdenacao
        Case 0
            sOrderBy = "R.ProdutoNivel ASC "
        Case 1
            sOrderBy = "SUM(R.ValorFat - R.ValorDev) DESC, R.ProdutoNivel ASC "
        Case 2
            sOrderBy = "SUM(R.QuantidadeFat - R.QuantidadeDev) DESC, R.ProdutoNivel ASC "
        Case 3
            sOrderBy = "P.Descricao ASC "
    End Select
    
    lSeq = 0
    
    sProduto = String(STRING_PRODUTO, 0)
    sDescricao = String(STRING_PRODUTO_DESCRICAO, 0)
    sUMBase = String(STRING_UM_SIGLA, 0)
    
    'Ler o Detalhe e agrupar por nível do produto e ordenar conforme parâmetro
    lErro = Comando_Executar(alComando(6), "SELECT R.ProdutoNivel, R.UM, P.Descricao, SUM(R.QuantidadeFat), SUM(R.QuantidadeDev), SUM(R.ValorFat), SUM(R.ValorDev)  FROM RelRankingProdDet As R, Produtos AS P WHERE R.ProdutoNivel = P.Codigo AND R.NumIntRel = ? GROUP BY R.ProdutoNivel, R.UM, P.Descricao ORDER BY " & sOrderBy, _
    sProduto, sUMBase, sDescricao, dQtdFatItem, dQtdDevItem, dVlrFatItem, dVlrDevItem, lNumIntRel)
    If lErro <> AD_SQL_SUCESSO Then gError 206981

    lErro = Comando_BuscarPrimeiro(alComando(6))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 206982

    Do While lErro = AD_SQL_SUCESSO
    
        lSeq = lSeq + 1

        'Gravar o cabeçalho
        lErro = Comando_Executar(alComando(7), "INSERT INTO RelRankingProd (NumIntRel, Seq, Produto, Descricao,UM, QuantidadeFat, QuantidadeDev, ValorFat, ValorDev, PercQtdTotal, PercVlrTotal ) VALUES (?,?,?,?,?,?,?,?,?,?,?) ", _
        lNumIntRel, lSeq, sProduto, sDescricao, sUMBase, dQtdFatItem, dQtdDevItem, dVlrFatItem, dVlrDevItem, (dQtdDevItem - dQtdFatItem) / (dQtdDevTotal - dQtdFatTotal), (dVlrDevItem - dVlrFatItem) / (dVlrDevTotal - dVlrFatTotal))
        If lErro <> AD_SQL_SUCESSO Then gError 206983

        lErro = Comando_BuscarProximo(alComando(6))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 206984

    Loop
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    'Fechar transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 206985

    RelRankingProd_Prepara = SUCESSO

    Exit Function

Erro_RelRankingProd_Prepara:

    RelRankingProd_Prepara = gErr

    Select Case gErr

        Case 206968
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 206969
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 206970, 206971, 206979
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", gErr)

        Case 206972, 206973
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_UNIDADESDEMEDIDA", gErr)

        Case 206974, 206975, 206977
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSNFISCALGRADE", gErr)

        Case 206976, 206978
            Call Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_RELRANKINGPRODDET", gErr)

        Case 206980
            Call Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_RELRANKINGPRODCAB", gErr)

        Case 206981, 206982, 206984
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RELRANKINGPRODDET", gErr)

        Case 206983
            Call Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_RELRANKINGPROD", gErr)

        Case 206985
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
                        
        Case ERRO_SEM_MENSAGEM
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 206986)

    End Select
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Call Transacao_Rollback

    Exit Function

End Function

Private Function RelRankingProd_Ret_ProdNivel(sProdNivel As String, ByVal sProduto As String, ByVal iNivel As Integer, ByVal iNivelProd As Integer)

Dim sProdPai As String
Dim sProdAux As String

On Error GoTo Erro_RelRankingProd_Ret_ProdNivel

    sProdAux = sProduto

    If iNivelProd <> 0 Then
        Do While iNivel > iNivelProd
            iNivel = iNivel - 1
            sProdPai = String(STRING_PRODUTO, 0)
            Call Mascara_RetornaProdutoPai(sProdAux, sProdPai)
            sProdAux = sProdPai
        Loop
    End If

    sProdNivel = sProdAux

    RelRankingProd_Ret_ProdNivel = SUCESSO

    Exit Function

Erro_RelRankingProd_Ret_ProdNivel:

    RelRankingProd_Ret_ProdNivel = gErr

    Select Case gErr
       
        Case ERRO_SEM_MENSAGEM
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 206987)

    End Select


    Exit Function

End Function

Public Function NF_Testa_Item_Mov_Est(ByVal objNFiscal As ClassNFiscal, ByVal objItemNF As ClassItemNF, bMovEst As Boolean, iTipoMov As Integer) As Long
    
On Error GoTo Erro_NF_Testa_Item_Mov_Est

    iTipoMov = 0
    bMovEst = True
    If DOCINFO_NFFBFRS = objNFiscal.iTipoNFiscal Then
        Select Case objItemNF.objTributacao.sNaturezaOp
            Case "5902", "6902", "6925", "5925"
                bMovEst = False
            Case "5101", "5102", "6101", "6102"
                iTipoMov = 1
        End Select
    End If
    If DOCINFO_NFEFBFRS = objNFiscal.iTipoNFiscal Then
        Select Case objItemNF.objTributacao.sNaturezaOp
            Case "1902", "2902", "2925", "1925"
                iTipoMov = 161
        End Select
    End If
    
    NF_Testa_Item_Mov_Est = SUCESSO

    Exit Function

Erro_NF_Testa_Item_Mov_Est:

    NF_Testa_Item_Mov_Est = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 206987)

    End Select
    
    Exit Function
    
End Function

Private Function NFiscalGov_Grava(ByVal objNFiscal As ClassNFiscal) As Long

Dim lErro As Long
Dim objItemNF As ClassItemNF
Dim lNumNFRem As Long, lNumIntNFRem As Long, lCliRem As Long
Dim objTribTab As ClassTribTab, objProduto As New ClassProduto
Dim objTipoDocInfo As New ClassTipoDocInfo

On Error GoTo Erro_NFiscalGov_Grava

    lNumNFRem = objNFiscal.lNumNotaFiscal
    lNumIntNFRem = objNFiscal.lNumIntDoc
    lCliRem = objNFiscal.lCliente
    
    objNFiscal.iTipoNFiscal = DOCINFO_NFISVNE
    objNFiscal.sNaturezaOp = gobjFAT.sNatOpGov
    objNFiscal.lCliente = gobjFAT.lCodCliGov
    objNFiscal.lNumNotaFiscal = 0
    objNFiscal.lNumIntDoc = 0
    objNFiscal.lNumIntNotaOriginal = lNumIntNFRem
    'objNFiscal.sMensagemCorpoNota = "INEP: " & CStr(lCliRem) & " NOTA FISCAL DE REMESSA: " & CStr(lNumNFRem)
    objNFiscal.sMensagemCorpoNota = Replace(objNFiscal.sMensagemCorpoNota, "|", vbNewLine)
    objNFiscal.sMensagemCorpoNota = objNFiscal.sMensagemCorpoNota & vbNewLine & "NOTA FISCAL DE REMESSA: " & CStr(lNumNFRem)

    'Le o tipo de nota que vai ser usado
    objTipoDocInfo.iCodigo = objNFiscal.iTipoNFiscal
    
    lErro = CF("TipoDocInfo_Le_Codigo", objTipoDocInfo)
    If lErro <> SUCESSO And lErro <> 31415 Then gError ERRO_SEM_MENSAGEM
    
    'Inicializa a Parte tributária da Nota
    Call objNFiscal.Inicializa_Tributacao
    Call objNFiscal.objTributacaoNF.Coloca_Auto
    
    objNFiscal.objTributacao.iTipoTributacao = 99
    objNFiscal.objTributacao.iTipoTributacaoManual = VAR_PREENCH_MANUAL
    objNFiscal.objTributacao.sNaturezaOpInterna = objNFiscal.sNaturezaOp
    objNFiscal.objTributacao.iNaturezaOpManual = VAR_PREENCH_MANUAL
                
    For Each objItemNF In objNFiscal.colItensNF
    
        objProduto.sCodigo = objItemNF.sProduto
    
        lErro = CF("Produto_Le", objProduto)
        If lErro <> SUCESSO And lErro <> 28030 Then gError ERRO_SEM_MENSAGEM
    
        objItemNF.lNumIntDoc = 0
    
        Set objItemNF.colAlocacoes = New ColAlocacoesItemNF
        Set objItemNF.colRastreamento = New Collection
    
        'Inicializa parte tributária do item da Nota
        Call objItemNF.Inicializa_Tributacao
        Call objItemNF.objTributacaoItemNF.Coloca_Auto
       
        objItemNF.objTributacaoItemNF.iTipoTributacao = objNFiscal.objTributacaoNF.iTipoTributacao
        objItemNF.objTributacaoItemNF.iTipoTributacaoManual = VAR_PREENCH_MANUAL
        objItemNF.objTributacaoItemNF.sNaturezaOp = objNFiscal.objTributacaoNF.sNaturezaOpInterna
        objItemNF.objTributacaoItemNF.iNaturezaOpManual = VAR_PREENCH_MANUAL
        
        objItemNF.objTributacaoItemNF.sProduto = objProduto.sCodigo
        objItemNF.objTributacaoItemNF.iExTIPI = objProduto.iExTIPI
        objItemNF.objTributacaoItemNF.sGenero = objProduto.sGenero
        objItemNF.objTributacaoItemNF.iProdutoEspecifico = objProduto.iProdutoEspecifico
        objItemNF.objTributacaoItemNF.sUMTrib = objProduto.sSiglaUMTrib
        objItemNF.objTributacaoItemNF.sIPICodProduto = objProduto.sIPICodigo

        objItemNF.objTributacaoItemNF.dQtdTrib = objItemNF.dQuantidade
        objItemNF.objTributacaoItemNF.dValorUnitTrib = objItemNF.dPrecoUnitario
        objItemNF.objTributacaoItemNF.dDescontoGrid = objItemNF.dValorDesconto
        objItemNF.objTributacaoItemNF.dPrecoTotal = objItemNF.dValorTotal
        objItemNF.objTributacaoItemNF.sProdutoDescricao = objProduto.sDescricao
        objItemNF.objTributacaoItemNF.sISSQN = objProduto.sISSQN
        
    Next
                    
    Set objTribTab = New ClassTribTab
    
    lErro = objTribTab.TributacaoNF_Reset(objNFiscal)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    'Atualiza a Tributação
    Call objTribTab.TipoNFiscal_Definir(objTipoDocInfo.iCodigo, objTipoDocInfo.sSigla)
    Call objTribTab.DataEmissao_Alterada(objNFiscal.dtDataEmissao)
    Call objTribTab.Serie_Alterada(objNFiscal.sSerie)
    
    lErro = gobjTributacao.AtualizaImpostos(objTribTab.mvarobjNFTributacao, 0)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    lErro = objTribTab.PreencherNF(objNFiscal)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    Set objTribTab = Nothing
    
    lErro = CF("NFiscal_Grava_EmTrans", objNFiscal, Nothing)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    NFiscalGov_Grava = SUCESSO

    Exit Function

Erro_NFiscalGov_Grava:

    NFiscalGov_Grava = gErr

    Select Case gErr
    
        Case ERRO_SEM_MENSAGEM

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 206987)

    End Select
    
    Exit Function
    
End Function

Public Function Rel12Semanas_Prepara(lNumIntRel As Long, ByVal iFilialEmpresa As Integer, ByVal dtDataBase As Date, ByVal dValorPeqOrcs As Double, ByVal lStatus As Long, ByVal iVendedor As Integer) As Long
'Relatório específico da Tour e Anderson

Dim lErro As Long
Dim iIndice As Integer
Dim lTransacao As Long
Dim alComando(0 To 7) As Long
Dim lSeq As Long, iSemana As Integer, dtDataIniRel As Date, dtDataFimRel As Date
Dim lCliente As Long, sNomeCli As String, dValorOV As Double, dValorOVAux As Double
Dim dtDataFechamento As Date, dValorImp As Double
Dim sProjeto As String, sNomeProjeto As String, sDescProjeto As String, sResponsavel As String, sObjetivo As String
Dim dtAux As Date, iSem(0 To 13) As Integer, dtDataIni(0 To 13) As Date, dValor(0 To 13) As Double
Dim sPais As String, lNumOVs As Long, lNumIntDocOV As Long, dtDataAux As Date
Dim dtDataFim(0 To 13) As Date, iOVVendAux As Integer
Dim colVend As New Collection
Dim objVend As ClassVendedor
Dim sNomeVend As String, iOVVend As Integer, lAux As Long

On Error GoTo Erro_Rel12Semanas_Prepara

    'Abrir transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 208029

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 208030
    Next
    
    lErro = CF("Vendedor_Le_Todos", colVend)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
       
    'Obter NumIntRel
    lErro = CF("Config_ObterNumInt", "FATConfig", "NUMINTREL_REL12SEMANAS", lNumIntRel)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    Call Rel12Semanas_Semana(dtDataBase, iSem(0), dtDataIni(0))
    
    dtDataIniRel = dtDataIni(0)
'    dtDataFimRel = DateAdd("d", 7 * 12 - 1, dtDataIni(0))
'
'    For iIndice = 1 To 11
'        'iSem(iIndice) = iIndice + iSem(0)
'        dtDataIni(iIndice) = DateAdd("d", 7, dtDataIni(iIndice - 1))
'        Call Rel12Semanas_Semana(dtDataIni(iIndice), iSemana, dtDataAux)
'        iSem(iIndice) = iSemana
'    Next

    dtDataFim(0) = DateAdd("d", 6, dtDataIni(0))
    If Month(dtDataFim(0)) <> Month(dtDataIni(0)) Then
        'Se mudou de mês quebra no último dia do mês
        dtDataFim(0) = DateAdd("d", -Day(dtDataFim(0)), dtDataFim(0))
    End If

    For iIndice = 1 To 11
    
        dtDataIni(iIndice) = DateAdd("d", 1, dtDataFim(iIndice - 1))
        Call Rel12Semanas_Semana(dtDataIni(iIndice), iSem(iIndice), dtDataAux)
    
        dtDataFim(iIndice) = DateAdd("d", 6, dtDataAux)
        If Month(dtDataFim(iIndice)) <> Month(dtDataIni(iIndice)) Then
            'Se mudou de mês quebra no último dia do mês
            dtDataFim(iIndice) = DateAdd("d", -Day(dtDataFim(iIndice)), dtDataFim(iIndice))
        End If
        
    Next
        
    dtDataFimRel = dtDataFim(11)
    
    If iFilialEmpresa = EMPRESA_TODA Then
        'lErro = Comando_Executar(alComando(0), "SELECT COUNT(*) FROM OrcamentoVenda AS O, Clientes as C, FiliaisClientes AS F, Enderecos As E, Paises AS P WHERE O.Cliente = C.Codigo AND O.Cliente = F.CodCliente AND O.Filial = F.CodFilial AND F.Endereco = E.Codigo AND E.CodigoPais = P.Codigo AND O.DataPrevReceb BETWEEN ? AND ? AND O.Status >= ? AND O.NumIntPedVenda = 0 AND (O.Vendedor = ? OR ? = 0)", lNumOVs, dtDataIniRel, dtDataFimRel, lStatus, iVendedor, iVendedor)
        lErro = Comando_Executar(alComando(0), "SELECT COUNT(*) FROM OrcamentoVenda AS O, Clientes as C, FiliaisClientes AS F, Enderecos As E, Paises AS P WHERE O.Cliente = C.Codigo AND O.Cliente = F.CodCliente AND O.Filial = F.CodFilial AND F.Endereco = E.Codigo AND E.CodigoPais = P.Codigo AND O.DataPrevReceb >=? AND O.Status >= ? AND O.NumIntPedVenda = 0 AND (O.Vendedor = ? OR ? = 0)", lNumOVs, dtDataIniRel, lStatus, iVendedor, iVendedor)
    Else
        'lErro = Comando_Executar(alComando(0), "SELECT COUNT(*) FROM OrcamentoVenda AS O, Clientes as C, FiliaisClientes AS F, Enderecos As E, Paises AS P WHERE O.Cliente = C.Codigo AND O.Cliente = F.CodCliente AND O.Filial = F.CodFilial AND F.Endereco = E.Codigo AND E.CodigoPais = P.Codigo AND O.DataPrevReceb BETWEEN ? AND ? AND O.FilialEmpresa = ? AND O.Status >= ? AND O.NumIntPedVenda = 0  AND (O.Vendedor = ? OR ? = 0) ", lNumOVs, dtDataIniRel, dtDataFimRel, iFilialEmpresa, lStatus, iVendedor, iVendedor)
        lErro = Comando_Executar(alComando(0), "SELECT COUNT(*) FROM OrcamentoVenda AS O, Clientes as C, FiliaisClientes AS F, Enderecos As E, Paises AS P WHERE O.Cliente = C.Codigo AND O.Cliente = F.CodCliente AND O.Filial = F.CodFilial AND F.Endereco = E.Codigo AND E.CodigoPais = P.Codigo AND O.DataPrevReceb >=? AND O.FilialEmpresa = ? AND O.Status >= ? AND O.NumIntPedVenda = 0  AND (O.Vendedor = ? OR ? = 0) ", lNumOVs, dtDataIniRel, iFilialEmpresa, lStatus, iVendedor, iVendedor)
    End If
    If lErro <> AD_SQL_SUCESSO Then gError 208031
    
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 208032
        
    sNomeCli = String(STRING_CLIENTE_RAZAO_SOCIAL, 0)
    sPais = String(STRING_PAISES_NOME, 0)
    
    If iFilialEmpresa = EMPRESA_TODA Then
        'lErro = Comando_Executar(alComando(1), "SELECT O.NumIntDoc, O.Cliente, C.NomeReduzido, O.ValorProdutos, O.DataPrevReceb, P.Nome, O.Vendedor FROM OrcamentoVenda AS O, Clientes as C, FiliaisClientes AS F, Enderecos As E, Paises AS P WHERE O.Cliente = C.Codigo AND O.Cliente = F.CodCliente AND O.Filial = F.CodFilial AND F.Endereco = E.Codigo AND E.CodigoPais = P.Codigo AND O.DataPrevReceb BETWEEN ? AND ? AND O.Status >= ? AND O.NumIntPedVenda = 0 AND (O.Vendedor = ? OR ? = 0) ORDER BY O.ValorTotal DESC", lNumIntDocOV, lCliente, sNomeCli, dValorOVAux, dtDataFechamento, sPais, iOVVendAux, dtDataIniRel, dtDataFimRel, lStatus, iVendedor, iVendedor)
        lErro = Comando_Executar(alComando(1), "SELECT O.NumIntDoc, O.Cliente, O.NomeCli, O.ValorProdutos, O.DataPrevReceb, P.Nome, O.Vendedor FROM OrcamentoVenda AS O, Clientes as C, FiliaisClientes AS F, Enderecos As E, Paises AS P WHERE O.Cliente = C.Codigo AND O.Cliente = F.CodCliente AND O.Filial = F.CodFilial AND F.Endereco = E.Codigo AND E.CodigoPais = P.Codigo AND O.DataPrevReceb >=? AND O.Status >= ? AND O.NumIntPedVenda = 0 AND (O.Vendedor = ? OR ? = 0) ORDER BY O.ValorTotal DESC", lNumIntDocOV, lCliente, sNomeCli, dValorOVAux, dtDataFechamento, sPais, iOVVendAux, dtDataIniRel, lStatus, iVendedor, iVendedor)
    Else
        'lErro = Comando_Executar(alComando(1), "SELECT O.NumIntDoc, O.Cliente, C.NomeReduzido, O.ValorProdutos, O.DataPrevReceb, P.Nome, O.Vendedor FROM OrcamentoVenda AS O, Clientes as C, FiliaisClientes AS F, Enderecos As E, Paises AS P WHERE O.Cliente = C.Codigo AND O.Cliente = F.CodCliente AND O.Filial = F.CodFilial AND F.Endereco = E.Codigo AND E.CodigoPais = P.Codigo AND O.DataPrevReceb BETWEEN ? AND ? AND FilialEmpresa = ? AND O.Status >= ? AND O.NumIntPedVenda = 0 AND (O.Vendedor = ? OR ? = 0) ORDER BY O.ValorTotal DESC", lNumIntDocOV, lCliente, sNomeCli, dValorOVAux, dtDataFechamento, sPais, iOVVendAux, dtDataIniRel, dtDataFimRel, iFilialEmpresa, lStatus, iVendedor, iVendedor)
        lErro = Comando_Executar(alComando(1), "SELECT O.NumIntDoc, O.Cliente, O.NomeCli, O.ValorProdutos, O.DataPrevReceb, P.Nome, O.Vendedor FROM OrcamentoVenda AS O, Clientes as C, FiliaisClientes AS F, Enderecos As E, Paises AS P WHERE O.Cliente = C.Codigo AND O.Cliente = F.CodCliente AND O.Filial = F.CodFilial AND F.Endereco = E.Codigo AND E.CodigoPais = P.Codigo AND O.DataPrevReceb >=? AND FilialEmpresa = ? AND O.Status >= ? AND O.NumIntPedVenda = 0 AND (O.Vendedor = ? OR ? = 0) ORDER BY O.ValorTotal DESC", lNumIntDocOV, lCliente, sNomeCli, dValorOVAux, dtDataFechamento, sPais, iOVVendAux, dtDataIniRel, iFilialEmpresa, lStatus, iVendedor, iVendedor)
    End If
    If lErro <> AD_SQL_SUCESSO Then gError 208033
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 208034

    lSeq = 0
    Do While lErro = AD_SQL_SUCESSO
    
        lSeq = lSeq + 1
        
        dValorImp = 0
        
        lErro = Comando_Executar(alComando(4), "SELECT (B.ICMSCredito + A.PISValor + A.COFINSValor + B.ISSValor + B.ICMSInterestVlrFCPUFDest + B.ICMSInterestVlrUFDest + B.ICMSInterestVlrUFRemet + B.IRRFValor) FROM TribDoc_PisCofinsValor AS A, TributacaoDoc AS B WHERE A.TipoDoc=B.TipoDoc AND A.NumIntDoc=B.NumIntDoc AND A.TipoDoc = ? AND B.NumIntDoc = ?", dValorImp, TIPODOC_TRIB_OV, lNumIntDocOV)
        If lErro <> AD_SQL_SUCESSO Then gError 208033
    
        lErro = Comando_BuscarPrimeiro(alComando(4))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 208034
        
        dValorOV = dValorOVAux - dValorImp
    
        'Call Rel12Semanas_Semana(dtDataFechamento, iSemana, dtDataIniRel)
        For iIndice = 0 To 11
            'If iSem(iIndice) = iSemana Then
            If dtDataFechamento >= dtDataIni(iIndice) And dtDataFechamento <= dtDataFim(iIndice) Then
                dValor(iIndice) = dValor(iIndice) + dValorOV
                Exit For
            End If
        Next
        'dValor(iSemana - iSem(0)) = dValor(iSemana - iSem(0)) + dValorOV
        
        If iOVVendAux = 0 Then
            Set objVend = New ClassVendedor
        Else
            For Each objVend In colVend
                If objVend.iCodigo = iOVVendAux Then Exit For
            Next
        End If
    
        If dValorOV > dValorPeqOrcs Then
        
            sProjeto = String(STRING_PRJ_CODIGO, 0)
            sNomeProjeto = String(STRING_PRJ_NOMEREDUZIDO, 0)
            sDescProjeto = String(STRING_PRJ_DESCRICAO, 0)
            sResponsavel = String(STRING_PRJ_RESPONSAVEL, 0)
            sObjetivo = String(STRING_PRJ_OBJETIVO, 0)
            sNomeVend = objVend.sNomeReduzido
            iOVVend = iOVVendAux
                
            'Le o projeto
            lErro = Comando_Executar(alComando(2), "SELECT P.Codigo, P.NomeReduzido, P.Descricao, P.Responsavel, P.Objetivo FROM ProjetoInfo AS I, Projetos As P WHERE P.NumIntDoc = I.NumIntDocPRJ AND I.TipoOrigem = ? AND I.NumIntDocOrigem = ?", _
            sProjeto, sNomeProjeto, sDescProjeto, sResponsavel, sObjetivo, PRJ_CR_TIPO_OV, lNumIntDocOV)
            If lErro <> AD_SQL_SUCESSO Then gError 208035
    
            lErro = Comando_BuscarPrimeiro(alComando(2))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 208036
        
        Else
        
            sProjeto = ""
            sNomeProjeto = "Diversas"
            sDescProjeto = "Diversas"
            sResponsavel = "TA"
            sObjetivo = ""
            sNomeCli = "Pequenos Orçamentos"
            lCliente = 0
            lNumIntDocOV = 0
            
            If Len(Trim(sNomeVend)) = 0 Then
                sNomeVend = objVend.sNomeReduzido
                iOVVend = iOVVendAux
            ElseIf iOVVendAux <> iOVVend Then
                sNomeVend = "Diversos"
                iOVVend = 0
            End If
        
        End If
        
        'Não é um orçamento pequeno ou é o último então grava
        If lSeq = lNumOVs Or Not (dValorOV <= dValorPeqOrcs) Then
        
            'NOVA CUSTOMIZAÇÃO
            'Remover sem projetos
            'Remover o projeto 000008
            If Not (sProjeto = "" Or sProjeto = "000008") Then
        
    '            lErro = Comando_Executar(alComando(3), "INSERT INTO Rel12Semanas (NumIntRel, NumIntDocOV, Cliente, NomeCliente, Pais, Projeto, NomeProjeto, DescProjeto, Responsavel, Objetivo, S1,D1,V1,S2,D2,V2,S3,D3,V3,S4,D4,V4,S5,D5,V5,S6,D6,V6,S7,D7,V7,S8,D8,V8,S9,D9,V9,S10,D10,V10,S11,D11,V11,S12,D12,V12) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ", _
    '            lNumIntRel, lNumIntDocOV, lCliente, sNomeCli, sPais, sProjeto, sNomeProjeto, sDescProjeto, sResponsavel, sObjetivo, iSem(0), dtDataIni(0) + 5, dValor(0), iSem(1), dtDataIni(1) + 5, dValor(1), iSem(2), dtDataIni(2) + 5, dValor(2), iSem(3), dtDataIni(3) + 5, dValor(3), iSem(4), dtDataIni(4) + 5, dValor(4), iSem(5), dtDataIni(5) + 5, dValor(5), iSem(6), dtDataIni(6) + 5, dValor(6), iSem(7), dtDataIni(7) + 5, dValor(7), iSem(8), dtDataIni(8) + 5, dValor(8), iSem(9), dtDataIni(9) + 5, dValor(9), iSem(10), dtDataIni(10) + 5, dValor(10), iSem(11), dtDataIni(11) + 5, dValor(11))
                lErro = Comando_Executar(alComando(3), "INSERT INTO Rel12Semanas (NumIntRel, NumIntDocOV, Cliente, NomeCliente, Pais, Projeto, NomeProjeto, DescProjeto, Responsavel, Objetivo, S1,D1,V1,S2,D2,V2,S3,D3,V3,S4,D4,V4,S5,D5,V5,S6,D6,V6,S7,D7,V7,S8,D8,V8,S9,D9,V9,S10,D10,V10,S11,D11,V11,S12,D12,V12, Vendedor, NomeVendedor, ValorOV, DataPrevReceb) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ", _
                lNumIntRel, lNumIntDocOV, lCliente, sNomeCli, sPais, sProjeto, sNomeProjeto, sDescProjeto, sResponsavel, sObjetivo, iSem(0), dtDataFim(0), dValor(0), iSem(1), dtDataFim(1), dValor(1), iSem(2), dtDataFim(2), dValor(2), iSem(3), dtDataFim(3), dValor(3), iSem(4), dtDataFim(4), dValor(4), iSem(5), dtDataFim(5), dValor(5), iSem(6), dtDataFim(6), dValor(6), iSem(7), dtDataFim(7), dValor(7), iSem(8), dtDataFim(8), dValor(8), iSem(9), dtDataFim(9), dValor(9), iSem(10), dtDataFim(10), dValor(10), iSem(11), dtDataFim(11), dValor(11), iOVVend, sNomeVend, dValorOV, dtDataFechamento)
                If lErro <> AD_SQL_SUCESSO Then gError 208037
            
            End If
            
            For iIndice = 0 To 13
                dValor(iIndice) = 0
            Next
            
        End If
        
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 208038

    Loop
    
    'NOVA CUSTOMIZAÇÃO
    'Remover projetos repetidos
    'Lê os projetos com repetição
    sProjeto = String(STRING_MAXIMO, 0)
    lErro = Comando_Executar(alComando(5), "SELECT Projeto FROM Rel12Semanas WHERE NumIntRel = ? GROUP BY Projeto HAVING(COUNT(*)>1) ", sProjeto, lNumIntRel)
    If lErro <> AD_SQL_SUCESSO Then gError 208038
    
    lErro = Comando_BuscarPrimeiro(alComando(5))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 208034
    
    Do While lErro = AD_SQL_SUCESSO
        
        'Lê ordenando pelo de maior valor e último dentre os de maior valor (caso existam com valores iguais)
        lErro = Comando_ExecutarPos(alComando(6), "SELECT NumIntRel FROM Rel12Semanas WHERE NumIntRel = ? AND Projeto = ? ORDER BY ValorOV DESC, NumIntDocOV DESC  ", 0, lAux, lNumIntRel, sProjeto)
        If lErro <> AD_SQL_SUCESSO Then gError 208038
        
        lErro = Comando_BuscarPrimeiro(alComando(6))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 208034
        
        lSeq = 0
        Do While lErro = AD_SQL_SUCESSO
        
            lSeq = lSeq + 1
            'Se não foi o 1o retornando pelo select para o projeto -> Exclui
            If lSeq > 1 Then
            
                lErro = Comando_ExecutarPos(alComando(7), "DELETE FROM Rel12Semanas ", alComando(6))
                If lErro <> AD_SQL_SUCESSO Then gError 208038
        
            End If
        
            lErro = Comando_BuscarProximo(alComando(6))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 208038
        
        Loop
   
   
        lErro = Comando_BuscarProximo(alComando(5))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 208038
        
    Loop

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    'Fechar transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 208039

    Rel12Semanas_Prepara = SUCESSO

    Exit Function

Erro_Rel12Semanas_Prepara:

    Rel12Semanas_Prepara = gErr

    Select Case gErr

        Case 208029
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 208030
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 208031 To 208034, 208038
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ORCAMENTOVENDA", gErr)

        Case 208035, 208036
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PROJETOS", gErr)

        Case 208037
            Call Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_REL12SEMANAS", gErr)

        Case 208039
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
                        
        Case ERRO_SEM_MENSAGEM
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 208040)

    End Select
       
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Call Transacao_Rollback

    Exit Function

End Function

Public Sub Rel12Semanas_Semana(ByVal dtData As Date, iSemana As Integer, dtIniSemana As Date)

    Dim dtDataAux1 As Date
    Dim dtDataAux2 As Date
    Dim iDias As Integer
           
    'Data do recebimento
    dtDataAux1 = dtData
    
    'Primeiro dia do ano
    dtDataAux2 = StrParaDate("01/01/" & Year(dtDataAux1))
    
    'Inicio da semana do recebimento
    dtDataAux1 = DateAdd("d", -Weekday(dtDataAux1) + 1, dtDataAux1)
    
    '1a dia da semana do ano
    dtDataAux2 = DateAdd("d", 8 - Weekday(dtDataAux2), dtDataAux2)
    
    iDias = DateDiff("d", dtDataAux2, dtDataAux1)
    
    iSemana = iDias / 7 + 1
    
    'Se a semana começa no ano anterior
    If iSemana <= 0 Then
        'Pega a última semana do ano anterior
        dtDataAux2 = StrParaDate("31/12/" & CStr(Year(dtData) - 1))
        Call Rel12Semanas_Semana(dtDataAux2, iSemana, dtIniSemana)
    End If
    
    dtIniSemana = dtDataAux1

End Sub

Function RegrasMsg_Calcula_Regras(ByVal objTela As Object, ByVal iTipoDoc As Integer, colRegrasMsg As Collection, Optional ByVal bSoEspecifico As Boolean = False) As Long
'Calcula as regras

Dim lErro As Long
Dim iIndice As Integer
Dim objMsg As ClassMensagensRegra
Dim colMsgAux As New Collection

On Error GoTo Erro_RegrasMsg_Calcula_Regras

    For iIndice = colRegrasMsg.Count To 1 Step -1
        colRegrasMsg.Remove iIndice
    Next

    lErro = CF("Executa_ExpressaoRegrasMsg", iTipoDoc, objTela, colMsgAux, bSoEspecifico)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    For Each objMsg In colMsgAux
        If Len(Trim(objMsg.sMensagem)) > 0 Then
            colRegrasMsg.Add objMsg
        End If
    Next
    
    RegrasMsg_Calcula_Regras = SUCESSO

    Exit Function

Erro_RegrasMsg_Calcula_Regras:

    RegrasMsg_Calcula_Regras = gErr

    Select Case gErr
    
        Case ERRO_SEM_MENSAGEM

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 208253)

    End Select
   
    Exit Function

End Function

Public Function NFiscal_Grava_Msg(ByVal objNFiscal As ClassNFiscal) As Long

Dim lErro As Long
Dim sMsgAux As String, sAux As String
Dim iIndice As Integer, iSeq As Integer, iTipo As Integer
Dim objMensagensRegra As ClassMensagensRegra

On Error GoTo Erro_NFiscal_Grava_Msg

    iSeq = 0
    
    lErro = CF("MensagensRegra_Exclui", REGRAMSG_TIPODOC_NF, objNFiscal.lNumIntDoc)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    objNFiscal.sMensagemNota = Replace(objNFiscal.sMensagemNota, vbNewLine, "|")
    objNFiscal.sMensagemCorpoNota = Replace(objNFiscal.sMensagemCorpoNota, vbNewLine, "|")
    
    For iIndice = 1 To 2
    
        If iIndice = 1 Then
            iTipo = REGRAMSG_TIPOMSG_CORPO
            sMsgAux = objNFiscal.sMensagemCorpoNota
        Else
            iTipo = REGRAMSG_TIPOMSG_NORMAL
            sMsgAux = objNFiscal.sMensagemNota
        End If
        
        sAux = sMsgAux
    
        Do While Len(Trim(sAux)) > 0
        
            iSeq = iSeq + 1
            Set objMensagensRegra = New ClassMensagensRegra
            
            objMensagensRegra.iTipoDoc = REGRAMSG_TIPODOC_NF
            objMensagensRegra.iTipoMsg = iTipo
            objMensagensRegra.lNumIntDoc = objNFiscal.lNumIntDoc
            objMensagensRegra.iSeq = iSeq
            objMensagensRegra.sMensagem = left(sAux, STRING_MENSAGEMREGRA)
        
            If Len(Trim(sAux)) > STRING_MENSAGEMREGRA Then
                sAux = Mid(sAux, STRING_MENSAGEMREGRA + 1)
            Else
                sAux = ""
            End If
            
            lErro = CF("MensagensRegra_Grava", objMensagensRegra)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        
        Loop

    Next

    objNFiscal.sMensagemNota = left(objNFiscal.sMensagemNota, STRING_NFISCAL_MENSAGEM)
    objNFiscal.sMensagemCorpoNota = left(objNFiscal.sMensagemCorpoNota, STRING_NFISCAL_MENSAGEM)

    NFiscal_Grava_Msg = SUCESSO

    Exit Function

Erro_NFiscal_Grava_Msg:

    NFiscal_Grava_Msg = gErr

    Select Case gErr
    
        Case ERRO_SEM_MENSAGEM

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 208254)

    End Select
   
    Exit Function
    
End Function

Public Function MensagensRegra_Grava(ByVal objMensagensRegra As ClassMensagensRegra) As Long

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer

On Error GoTo Erro_MensagensRegra_Grava

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 208255
    Next

    lErro = Comando_Executar(alComando(1), "INSERT INTO MensagensRegra( TipoDoc, NumIntDoc, Seq, Mensagem, TipoMsg) VALUES (?,?,?,?,?)", _
            objMensagensRegra.iTipoDoc, objMensagensRegra.lNumIntDoc, objMensagensRegra.iSeq, objMensagensRegra.sMensagem, objMensagensRegra.iTipoMsg)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 208256

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    MensagensRegra_Grava = SUCESSO

    Exit Function

Erro_MensagensRegra_Grava:

    MensagensRegra_Grava = gErr

    Select Case gErr

        Case 208255
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 208256
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MENSAGENSREGRA", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 208257)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function MensagensRegra_Exclui(ByVal iTipoDoc As Integer, ByVal lNumIntDoc As Long) As Long

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim iSeq As Integer

On Error GoTo Erro_MensagensRegra_Exclui

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 208258
    Next

    'Le a tabelaMensagensRegra
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Seq FROM MensagensRegra WHERE TipoDoc= ? AND NumIntDoc = ?", _
                0, iSeq, iTipoDoc, lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 208259

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 208260

    Do While lErro <> AD_SQL_SEM_DADOS

        'Trava registro contra alterações/Leituras
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> SUCESSO Then gError 208261
    
        lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM MensagensRegra", alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 208262
        
        'Busca Próximo
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 208263
                
    Loop

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    MensagensRegra_Exclui = SUCESSO

    Exit Function

Erro_MensagensRegra_Exclui:

    MensagensRegra_Exclui = gErr

    Select Case gErr

        Case 208258
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 208259, 208260, 208263
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MENSAGENSREGRA", gErr)

        Case 208261
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_MENSAGENSREGRA", gErr)

        Case 208262
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_MENSAGENSREGRA", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 208263)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function Processa_Geracao_NFiscal_Trata_Msg(ByVal objGeracaoNFiscal As ClassGeracaoNFiscal)

Dim lErro As Long
Dim objMsg As ClassMensagensRegra
Dim colMsg As New Collection
Dim sMsg(0 To 1) As String
Dim objTransacao As Object

On Error GoTo Erro_Processa_Geracao_NFiscal_Trata_Msg:

    Set objTransacao = objGeracaoNFiscal

    lErro = CF("RegrasMsg_Calcula_Regras", objTransacao, REGRAMSG_TIPODOC_NF, colMsg)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    For Each objMsg In colMsg
        sMsg(objMsg.iTipoMsg) = sMsg(objMsg.iTipoMsg) & IIf(Len(Trim(sMsg(objMsg.iTipoMsg))) = 0, "", vbNewLine) & objMsg.sMensagem
    Next
    
    objGeracaoNFiscal.objNFiscal.sMensagemNota = sMsg(REGRAMSG_TIPOMSG_NORMAL)
    objGeracaoNFiscal.objNFiscal.sMensagemCorpoNota = sMsg(REGRAMSG_TIPOMSG_CORPO)

    Processa_Geracao_NFiscal_Trata_Msg = SUCESSO

    Exit Function

Erro_Processa_Geracao_NFiscal_Trata_Msg:

    Processa_Geracao_NFiscal_Trata_Msg = gErr

    Select Case gErr

        Case ERRO_SEM_MENSAGEM
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 208263)

    End Select

    Exit Function
    
End Function

Public Function NFiscal_Trata_MsgItem(ByVal objNFiscalAux As ClassNFiscal) As Long

Dim lErro As Long
Dim objGeracaoNFiscal As New ClassGeracaoNFiscal
Dim objItemNF As ClassItemNF
Dim objMsg As ClassMensagensRegra
Dim colMsg As New Collection
Dim sMsg As String, sAux As String, iSeq As Integer
Dim objTransacao As Object, objProduto As ClassProduto
Dim objMensagensRegra As ClassMensagensRegra
Dim objNFiscal As New ClassNFiscal
Dim objItemMovEstoque As ClassItemMovEstoque
Dim colRastreamentoMovto As Collection, colMovEstoque As Collection
Dim objRastroItemNF As ClassRastroItemNF, objRastreamentoMovto As ClassRastreamentoMovto

On Error GoTo Erro_NFiscal_Trata_MsgItem

    objNFiscal.lNumIntDoc = objNFiscalAux.lNumIntDoc
    
    lErro = CF("NFiscal_Le", objNFiscal)
    If lErro <> SUCESSO And lErro <> 31442 Then gError ERRO_SEM_MENSAGEM

    'Lê os itens da Nota Fiscal
    lErro = CF("NFiscalItens_Le", objNFiscal)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    'Lê a parte de Tributação
    lErro = CF("NFiscal_Le_Tributacao", objNFiscal)
    If lErro <> SUCESSO And lErro <> 22867 Then gError ERRO_SEM_MENSAGEM

    'Lê a parte de tributação dos itens da Nota Fiscal
    lErro = CF("NFiscalItens_Le_Trib", objNFiscal)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    'Lê as Comissões da Nota Fiscal
    lErro = CF("ComissoesNF_Le", objNFiscal)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    For Each objItemNF In objNFiscal.colItens
    
        Set objItemMovEstoque = New ClassItemMovEstoque
        Set objItemNF.colRastreamento = New Collection
        Set colMovEstoque = New Collection

        objItemMovEstoque.lNumIntDocOrigem = objItemNF.lNumIntDoc
        objItemMovEstoque.iTipoNumIntDocOrigem = TIPO_ORIGEM_ITEMNF
        objItemMovEstoque.iFilialEmpresa = objNFiscal.iFilialEmpresa

        lErro = CF("MovEstoque_Le_ItemNF", objItemMovEstoque, colMovEstoque)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        
        lErro = CF("MovEstoque_Le_ItemNF_Grade", objItemMovEstoque, colMovEstoque)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        
        For Each objItemMovEstoque In colMovEstoque
        
            Set colRastreamentoMovto = New Collection
            
            lErro = CF("RastreamentoMovto_Le_DocOrigem", objItemMovEstoque.lNumIntDoc, TIPO_RASTREAMENTO_MOVTO_MOVTO_ESTOQUE, colRastreamentoMovto)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
            
            For Each objRastreamentoMovto In colRastreamentoMovto

                Set objRastroItemNF = New ClassRastroItemNF
                
                objRastroItemNF.sLote = objRastreamentoMovto.sLote
                objRastroItemNF.sProduto = objRastreamentoMovto.sProduto
                objRastroItemNF.dLoteQdtAlocada = objRastreamentoMovto.dQuantidade
                
                objItemNF.colRastreamento.Add objRastroItemNF
            
            Next
            
        Next
       
    Next

    lErro = CF("RastreamentoIndireto_Le", objNFiscal)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    Set objGeracaoNFiscal.objNFiscal = objNFiscal
    Set objGeracaoNFiscal.objPedidoVenda = New ClassPedidoDeVenda
    Set objTransacao = objGeracaoNFiscal
    
    For Each objItemNF In objNFiscal.colItens
    
        Set objProduto = New ClassProduto
    
        Set objGeracaoNFiscal.objItemNF = objItemNF
        Set objGeracaoNFiscal.objProduto = objProduto
        
        objProduto.sCodigo = objItemNF.sProduto
        
        lErro = CF("Produto_Le", objProduto)
        If lErro <> SUCESSO And lErro <> 28030 Then gError ERRO_SEM_MENSAGEM
        
        'Carrega a colCategoriaItem do objProduto
        lErro = CF("Produto_Le_Categorias", objProduto, objProduto.colCategoriaItem)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        
    
        lErro = CF("RegrasMsg_Calcula_Regras", objTransacao, REGRAMSG_TIPODOC_ITEMNF, colMsg)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        
        sMsg = ""
        For Each objMsg In colMsg
            sMsg = sMsg & IIf(Len(Trim(sMsg)) = 0, "", vbNewLine) & objMsg.sMensagem
        Next
        
        lErro = CF("MensagensRegra_Exclui", REGRAMSG_TIPODOC_ITEMNF, objItemNF.lNumIntDoc)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
 
        sAux = sMsg
        sAux = Replace(sAux, vbNewLine, "|")
    
        iSeq = 0
        Do While Len(Trim(sAux)) > 0
        
            iSeq = iSeq + 1
            Set objMensagensRegra = New ClassMensagensRegra
            
            objMensagensRegra.iTipoDoc = REGRAMSG_TIPODOC_ITEMNF
            objMensagensRegra.iTipoMsg = 0
            objMensagensRegra.lNumIntDoc = objItemNF.lNumIntDoc
            objMensagensRegra.iSeq = iSeq
            objMensagensRegra.sMensagem = left(sAux, STRING_MENSAGEMREGRA)
        
            If Len(Trim(sAux)) > STRING_MENSAGEMREGRA Then
                sAux = Mid(sAux, STRING_MENSAGEMREGRA + 1)
            Else
                sAux = ""
            End If
            
            lErro = CF("MensagensRegra_Grava", objMensagensRegra)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        
        Loop
        
    Next
 
    NFiscal_Trata_MsgItem = SUCESSO

    Exit Function

Erro_NFiscal_Trata_MsgItem:

    NFiscal_Trata_MsgItem = gErr

    Select Case gErr
    
        Case ERRO_SEM_MENSAGEM

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 208254)

    End Select
   
    Exit Function
    
End Function

Private Function Atualiza_Versao_Msg() As Long

Dim lErro As Long
Dim lTransacao As Long
Dim alComando(1 To 4) As Long
Dim iIndice As Integer
Dim sConteudo As String
Dim lNumIntDocNF As Long, dtDataFiltro As Date
Dim objNFiscal As ClassNFiscal
Dim objPedidoVenda As ClassPedidoDeVenda
Dim objItemNF As ClassItemNF
Dim objGeracaoNFiscal As New ClassGeracaoNFiscal
Dim objTransacao As Object, objProduto As ClassProduto
Dim objMsg As ClassMensagensRegra
Dim objItemMovEstoque As ClassItemMovEstoque
Dim colRastreamentoMovto As Collection, colMovEstoque As Collection
Dim objRastroItemNF As ClassRastroItemNF, objRastreamentoMovto As ClassRastreamentoMovto
Dim sMsg(0 To 1) As String, sAux As String, colMsg As Collection, iSeq As Integer

On Error GoTo Erro_Atualiza_Versao_Msg
    
    'abrir transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 208281

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 208282
    Next

    sConteudo = String(STRING_CONFIG_CONTEUDO, 0)

    'Vê se tem que atualizar
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Conteudo FROM AdmConfig WHERE Codigo = ? ", 0, sConteudo, "VERSAO_MSG")
    If lErro <> AD_SQL_SUCESSO Then gError 208283

    'Busca o Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 208284

    If lErro = AD_SQL_SUCESSO And sConteudo = "1" Then
    
        dtDataFiltro = DateAdd("d", -7, Date)
   
        lErro = Comando_Executar(alComando(3), "SELECT NumIntDoc FROM NFiscalTipoDocInfo WHERE Tipo IN (1,2) AND DataEmissao > ?", lNumIntDocNF, dtDataFiltro)
        If lErro <> AD_SQL_SUCESSO Then gError 208285
    
        'Busca o Primeiro
        lErro = Comando_BuscarPrimeiro(alComando(3))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 208286
        
        Do While lErro <> AD_SQL_SEM_DADOS
        
            Set objNFiscal = New ClassNFiscal
            Set objPedidoVenda = New ClassPedidoDeVenda

            objNFiscal.lNumIntDoc = lNumIntDocNF
            
            lErro = CF("NFiscal_Le", objNFiscal)
            If lErro <> SUCESSO And lErro <> 31442 Then gError ERRO_SEM_MENSAGEM
        
            'Lê os itens da Nota Fiscal
            lErro = CF("NFiscalItens_Le", objNFiscal)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
            
            'Lê a parte de Tributação
            lErro = CF("NFiscal_Le_Tributacao", objNFiscal)
            If lErro <> SUCESSO And lErro <> 22867 Then gError ERRO_SEM_MENSAGEM
        
            'Lê a parte de tributação dos itens da Nota Fiscal
            lErro = CF("NFiscalItens_Le_Trib", objNFiscal)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
            
            'Lê as Comissões da Nota Fiscal
            lErro = CF("ComissoesNF_Le", objNFiscal)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
            
            objPedidoVenda.lCodigo = objNFiscal.lNumPedidoVenda
            objPedidoVenda.iFilialEmpresa = objNFiscal.iFilialPedido
            
            If objPedidoVenda.lCodigo <> 0 Then
            
                'Busca o pedido na tabela de Pedidos de Venda
                lErro = CF("PedidoDeVenda_Le", objPedidoVenda)
                If lErro <> SUCESSO And lErro <> 26509 Then gError ERRO_SEM_MENSAGEM

                If lErro <> SUCESSO Then
                    lErro = CF("PedidoVendaBaixado_Le", objPedidoVenda)
                    If lErro <> SUCESSO And lErro <> 46135 Then gError ERRO_SEM_MENSAGEM
                End If
                
            End If
            
            For Each objItemNF In objNFiscal.colItens
            
                Set objItemMovEstoque = New ClassItemMovEstoque
                Set objItemNF.colRastreamento = New Collection
                Set colMovEstoque = New Collection
        
                objItemMovEstoque.lNumIntDocOrigem = objItemNF.lNumIntDoc
                objItemMovEstoque.iTipoNumIntDocOrigem = TIPO_ORIGEM_ITEMNF
                objItemMovEstoque.iFilialEmpresa = objNFiscal.iFilialEmpresa
        
                lErro = CF("MovEstoque_Le_ItemNF", objItemMovEstoque, colMovEstoque)
                If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
                
                lErro = CF("MovEstoque_Le_ItemNF_Grade", objItemMovEstoque, colMovEstoque)
                If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
                
                For Each objItemMovEstoque In colMovEstoque
                
                    Set colRastreamentoMovto = New Collection
                    
                    lErro = CF("RastreamentoMovto_Le_DocOrigem", objItemMovEstoque.lNumIntDoc, TIPO_RASTREAMENTO_MOVTO_MOVTO_ESTOQUE, colRastreamentoMovto)
                    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
                    
                    For Each objRastreamentoMovto In colRastreamentoMovto
        
                        Set objRastroItemNF = New ClassRastroItemNF
                        
                        objRastroItemNF.sLote = objRastreamentoMovto.sLote
                        objRastroItemNF.sProduto = objRastreamentoMovto.sProduto
                        objRastroItemNF.dLoteQdtAlocada = objRastreamentoMovto.dQuantidade
                        
                        objItemNF.colRastreamento.Add objRastroItemNF
                    
                    Next
                    
                Next
            
            Next
        
            Set objGeracaoNFiscal.objNFiscal = objNFiscal
            Set objGeracaoNFiscal.objPedidoVenda = objPedidoVenda
            Set objTransacao = objGeracaoNFiscal
            Set colMsg = New Collection

            sMsg(REGRAMSG_TIPOMSG_NORMAL) = ""
            sMsg(REGRAMSG_TIPOMSG_CORPO) = ""

            lErro = CF("RegrasMsg_Calcula_Regras", objTransacao, REGRAMSG_TIPODOC_NF, colMsg, True)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
            
            For Each objMsg In colMsg
                sMsg(objMsg.iTipoMsg) = sMsg(objMsg.iTipoMsg) & IIf(Len(Trim(sMsg(objMsg.iTipoMsg))) = 0, "", vbNewLine) & objMsg.sMensagem
            Next
            
            objNFiscal.sMensagemNota = objNFiscal.sMensagemNota & IIf(Len(Trim(objNFiscal.sMensagemNota)) > 0, vbNewLine, "") & sMsg(REGRAMSG_TIPOMSG_NORMAL)
            objNFiscal.sMensagemCorpoNota = objNFiscal.sMensagemCorpoNota & IIf(Len(Trim(objNFiscal.sMensagemCorpoNota)) > 0, vbNewLine, "") & sMsg(REGRAMSG_TIPOMSG_CORPO)

            lErro = CF("NFiscal_Grava_Msg", objNFiscal)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

            For Each objItemNF In objNFiscal.colItens
           
                Set objProduto = New ClassProduto
                Set colMsg = New Collection
           
                Set objGeracaoNFiscal.objItemNF = objItemNF
                Set objGeracaoNFiscal.objProduto = objProduto
               
                objProduto.sCodigo = objItemNF.sProduto
               
                lErro = CF("Produto_Le", objProduto)
                If lErro <> SUCESSO And lErro <> 28030 Then gError ERRO_SEM_MENSAGEM
               
                'Carrega a colCategoriaItem do objProduto
                lErro = CF("Produto_Le_Categorias", objProduto, objProduto.colCategoriaItem)
                If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
           
                lErro = CF("RegrasMsg_Calcula_Regras", objTransacao, REGRAMSG_TIPODOC_ITEMNF, colMsg, True)
                If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
               
                sMsg(0) = ""
                For Each objMsg In colMsg
                    sMsg(0) = sMsg(0) & IIf(Len(Trim(sMsg(0))) = 0, "", vbNewLine) & objMsg.sMensagem
                Next
               
                lErro = CF("MensagensRegra_Exclui", REGRAMSG_TIPODOC_ITEMNF, objItemNF.lNumIntDoc)
                If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        
                sAux = sMsg(0)
           
                iSeq = 0
                Do While Len(Trim(sAux)) > 0
               
                    iSeq = iSeq + 1
                    Set objMsg = New ClassMensagensRegra
                   
                    objMsg.iTipoDoc = REGRAMSG_TIPODOC_ITEMNF
                    objMsg.iTipoMsg = 0
                    objMsg.lNumIntDoc = objItemNF.lNumIntDoc
                    objMsg.iSeq = iSeq
                    objMsg.sMensagem = left(sAux, STRING_MENSAGEMREGRA)
               
                    If Len(Trim(sAux)) > STRING_MENSAGEMREGRA Then
                        sAux = Mid(sAux, STRING_MENSAGEMREGRA + 1)
                    Else
                        sAux = ""
                    End If
                   
                    lErro = CF("MensagensRegra_Grava", objMsg)
                    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
               
                Loop
               
            Next
            
            lErro = Comando_BuscarProximo(alComando(3))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 208287
        
        Loop
    
        lErro = Comando_ExecutarPos(alComando(2), "UPDATE AdmConfig SET Conteudo = ? ", alComando(1), "2")
        If lErro <> AD_SQL_SUCESSO Then gError 208288
    
    End If
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
     'fechar transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 208289
    
    Atualiza_Versao_Msg = SUCESSO
    
    Exit Function
    
Erro_Atualiza_Versao_Msg:
    
    Atualiza_Versao_Msg = gErr
    
    Select Case gErr
        
        Case 208281
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 208282
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 208283, 208284
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ADMCONFIG", gErr)

        Case 208285 To 208287
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ADMCONFIG", gErr)

        Case 208288
            Call Rotina_Erro(vbOKOnly, "ERRO_UPDATE_ADMCONFIG", gErr)
        
        Case 208289
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case ERRO_SEM_MENSAGEM
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 208290)
            
    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Call Transacao_Rollback
    
    Exit Function
    
End Function

Public Function TabelaPrecoGrupo_Grava(ByVal objTabelaPrecoGrupo As ClassTabelaPrecoGrupo) As Long

Dim lErro As Long
Dim lTransacao As Long
Dim alComando(0 To 4) As Long
Dim iIndice As Integer, iAux As Integer, dPreco As Double
Dim objTabelaPrecoGrupoItem As ClassTabelaPrecoGrupoItem

On Error GoTo Erro_TabelaPrecoGrupo_Grava
    
    'abrir transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 208368

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 208369
    Next
    
    For Each objTabelaPrecoGrupoItem In objTabelaPrecoGrupo.colItens
    
        If objTabelaPrecoGrupoItem.dPrecoNovo > DELTA_VALORMONETARIO Then

            lErro = Comando_ExecutarPos(alComando(0), "SELECT Gerencial FROM Produtos WHERE Codigo = ?", 0, iAux, objTabelaPrecoGrupoItem.sProduto)
            If lErro <> AD_SQL_SUCESSO Then gError 208370
        
            'Busca o Primeiro
            lErro = Comando_BuscarPrimeiro(alComando(0))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 208371
            
'            lErro = Comando_ExecutarPos(alComando(1), "UPDATE Produtos SET TextoGrade = ? ", alComando(0), objTabelaPrecoGrupoItem.sTextoGrade)
'            If lErro <> AD_SQL_SUCESSO Then gError 208372
            
            'Pesquisa o item da tabela de preco em questão na data de vigencia
            lErro = Comando_ExecutarPos(alComando(2), "SELECT Preco FROM TabelasDePrecoItens WHERE CodTabela = ? AND FilialEmpresa = ? AND CodProduto = ? AND DataVigencia = ?", 0, dPreco, objTabelaPrecoGrupo.iTabela, objTabelaPrecoGrupo.iFilialEmpresa, objTabelaPrecoGrupoItem.sProduto, objTabelaPrecoGrupo.dtDataVigencia)
            If lErro <> AD_SQL_SUCESSO Then gError 208373

            lErro = Comando_BuscarPrimeiro(alComando(2))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 208374

            If lErro = AD_SQL_SUCESSO Then

                'Atualiza o preço do produto na tabela
                lErro = Comando_ExecutarPos(alComando(3), "UPDATE TabelasDePrecoItens SET Preco = ?, TextoGrade = ?", alComando(2), objTabelaPrecoGrupoItem.dPrecoNovo, objTabelaPrecoGrupoItem.sTextoGrade)
                If lErro <> AD_SQL_SUCESSO Then gError 208375

            Else
            
                'Insere o item na tabela de preço do produto em questão na data de vigência
                lErro = Comando_Executar(alComando(4), "INSERT INTO TabelasDePrecoItens (CodTabela, FilialEmpresa, CodProduto, DataVigencia, Preco, TextoGrade) VALUES (?,?,?,?,?,?)", objTabelaPrecoGrupo.iTabela, objTabelaPrecoGrupo.iFilialEmpresa, objTabelaPrecoGrupoItem.sProduto, objTabelaPrecoGrupo.dtDataVigencia, objTabelaPrecoGrupoItem.dPrecoNovo, objTabelaPrecoGrupoItem.sTextoGrade)
                If lErro <> AD_SQL_SUCESSO Then gError 208376

            End If
            
        End If
        
    Next
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
     'fechar transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 208377
    
    TabelaPrecoGrupo_Grava = SUCESSO
    
    Exit Function
    
Erro_TabelaPrecoGrupo_Grava:
    
    TabelaPrecoGrupo_Grava = gErr
    
    Select Case gErr
        
        Case 208368
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 208369
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 208370, 208371
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOS", gErr)

'        Case 208372
'            Call Rotina_Erro(vbOKOnly, "ERRO_UPDATE_PRODUTOS", gErr)

        Case 208373 To 208374
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TABELAPRECOITENS", gErr)

        Case 208375
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_TABELASDEPRECOITENS", gErr, objTabelaPrecoGrupo.iFilialEmpresa, objTabelaPrecoGrupo.iTabela, objTabelaPrecoGrupoItem.sProduto, objTabelaPrecoGrupo.dtDataVigencia)

        Case 208376
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_TABELASDEPRECOITENS1", gErr, objTabelaPrecoGrupo.iFilialEmpresa, objTabelaPrecoGrupo.iTabela, objTabelaPrecoGrupoItem.sProduto, objTabelaPrecoGrupo.dtDataVigencia)
        
        Case 208377
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case ERRO_SEM_MENSAGEM
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 208378)
            
    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Call Transacao_Rollback
    
    Exit Function
    
End Function

Public Function FiliaisClientes_Desativa_Sem_Compra() As Long

Dim lErro As Long
Dim lTransacao As Long
Dim alComando(0 To 7) As Long
Dim iIndice As Integer, bAchouFilial As Boolean, bAchouCli As Boolean
Dim lCliente As Long, iFilial As Integer, dtDataLimite As Date
Dim lNumIntDoc As Long

On Error GoTo Erro_FiliaisClientes_Desativa_Sem_Compra

    If gobjFAT.iInativaCliDiaSemCompra > 0 Then
    
        dtDataLimite = DateAdd("d", -gobjFAT.iInativaCliDiaSemCompra, Date)
        
        'abrir transacao
        lTransacao = Transacao_Abrir()
        If lTransacao = 0 Then gError 208382
    
        'Abertura de Comando
        For iIndice = LBound(alComando) To UBound(alComando)
            alComando(iIndice) = Comando_Abrir()
            If alComando(iIndice) = 0 Then gError 208383
        Next
        
        lErro = Comando_ExecutarPos(alComando(0), "SELECT Codigo FROM Clientes WHERE Ativo = ? ORDER BY Codigo", 0, lCliente, MARCADO)
        If lErro <> AD_SQL_SUCESSO Then gError 208384
    
        'Busca o Primeiro
        lErro = Comando_BuscarPrimeiro(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 208385
                
        Do While lErro <> AD_SQL_SEM_DADOS
        
            bAchouCli = False
            
            lErro = Comando_ExecutarPos(alComando(2), "SELECT CodFilial FROM FiliaisClientes WHERE CodCliente = ? AND Ativo = ? ORDER BY CodFilial", 0, iFilial, lCliente, MARCADO)
            If lErro <> AD_SQL_SUCESSO Then gError 208386
        
            'Busca o Primeiro
            lErro = Comando_BuscarPrimeiro(alComando(2))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 208387
            
            Do While lErro <> AD_SQL_SEM_DADOS
            
                bAchouFilial = False
                
                'Busca NF
                lErro = Comando_Executar(alComando(4), "SELECT NumIntDoc FROM NFiscal WHERE Cliente = ? AND FilialCli = ? AND DataEmissao >= ?", lNumIntDoc, lCliente, iFilial, dtDataLimite)
                If lErro <> AD_SQL_SUCESSO Then gError 208388
            
                'Busca o Primeiro
                lErro = Comando_BuscarPrimeiro(alComando(4))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 208389
                
                If lErro = AD_SQL_SUCESSO Then bAchouFilial = True
                
                'Busca PV
                If Not bAchouFilial Then
                
                    lErro = Comando_Executar(alComando(5), "SELECT NumIntDoc FROM PedVenTodos WHERE Cliente = ? AND Filial = ? AND DataEmissao >= ?", lNumIntDoc, lCliente, iFilial, dtDataLimite)
                    If lErro <> AD_SQL_SUCESSO Then gError 208390
                
                    'Busca o Primeiro
                    lErro = Comando_BuscarPrimeiro(alComando(5))
                    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 208391
                    
                    If lErro = AD_SQL_SUCESSO Then bAchouFilial = True
                
                End If
                
                'Busca OV
                If Not bAchouFilial Then
                
                    lErro = Comando_Executar(alComando(6), "SELECT NumIntDoc FROM OrcamentoVenda WHERE Cliente = ? AND Filial = ? AND DataEmissao >= ?", lNumIntDoc, lCliente, iFilial, dtDataLimite)
                    If lErro <> AD_SQL_SUCESSO Then gError 208392
                
                    'Busca o Primeiro
                    lErro = Comando_BuscarPrimeiro(alComando(6))
                    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 208393
                    
                    If lErro = AD_SQL_SUCESSO Then bAchouFilial = True
                
                End If
                
                'Busca TitRec
                If Not bAchouFilial Then
                
                    lErro = Comando_Executar(alComando(7), "SELECT NumIntDoc FROM TitulosRecTodos WHERE Cliente = ? AND Filial = ? AND DataEmissao >= ?", lNumIntDoc, lCliente, iFilial, dtDataLimite)
                    If lErro <> AD_SQL_SUCESSO Then gError 208394
                
                    'Busca o Primeiro
                    lErro = Comando_BuscarPrimeiro(alComando(7))
                    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 208395
                    
                    If lErro = AD_SQL_SUCESSO Then bAchouFilial = True
                
                End If
                
                If Not bAchouFilial Then
                
                    lErro = Comando_ExecutarPos(alComando(3), "UPDATE FiliaisClientes SET Ativo = ?", alComando(2), DESMARCADO)
                    If lErro <> AD_SQL_SUCESSO Then gError 208396
                    
                End If
                
                If bAchouFilial Then bAchouCli = True
                
                lErro = Comando_BuscarProximo(alComando(2))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 208397
                
            Loop
    
            If Not bAchouCli Then
            
                lErro = Comando_ExecutarPos(alComando(1), "UPDATE Clientes SET Ativo = ?", alComando(0), DESMARCADO)
                If lErro <> AD_SQL_SUCESSO Then gError 208398
                
            End If
            
            lErro = Comando_BuscarProximo(alComando(0))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 208399
            
        Loop
        
        
        'Fecha Comando
        For iIndice = LBound(alComando) To UBound(alComando)
            Call Comando_Fechar(alComando(iIndice))
        Next
        
         'fechar transacao
        lErro = Transacao_Commit()
        If lErro <> AD_SQL_SUCESSO Then gError 208400
        
    End If
    
    FiliaisClientes_Desativa_Sem_Compra = SUCESSO
    
    Exit Function
    
Erro_FiliaisClientes_Desativa_Sem_Compra:
    
    FiliaisClientes_Desativa_Sem_Compra = gErr
    
    Select Case gErr
        
        Case 208382
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 208383
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 208384, 208385, 208399
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CLIENTES", gErr)

        Case 208386, 208387, 208397
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIAISCLIENTES2", gErr)
            
        Case 208388, 208389
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL3", gErr)
            
        Case 208390, 208391
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PEDIDODEVENDA", gErr)
            
        Case 208392, 208393
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ORCAMENTOVENDA", gErr)

        Case 208394, 208395
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TITULOSRECTODOS", gErr)
            
        Case 208396
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_FILIALCLIENTE", gErr)
       
        Case 208398
            Call Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_CLIENTE", gErr, lCliente)
       
        Case 208400
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case ERRO_SEM_MENSAGEM
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 208401)
            
    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Call Transacao_Rollback
    
    Exit Function
    
End Function

Public Function ImportTabelas_Grava(ByVal objTabela As ClassImportTabelas, ByVal sSQL As String) As Long

Dim lErro As Long
Dim vValor As Variant
Dim colLinhas As Collection
Dim alComando(0 To 1) As Long
Dim lTransacao As Long
Dim iIndice As Integer
Dim avValor() As Variant

On Error GoTo Erro_ImportTabelas_Grava

    'abre a transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 208944
    
    'abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 208945
    Next
    
    '19 a 23 apaga na validação de acordo com a filial empresa\ano\mês
    If objTabela.lCodigo < 19 Or objTabela.lCodigo > 23 Then
        lErro = Comando_Executar(alComando(0), "DELETE FROM " & objTabela.sTabela)
        If lErro <> AD_SQL_SUCESSO Then gError 208946
    End If
    
    ReDim avValor(1 To objTabela.colCampos.Count) As Variant
    
    For Each colLinhas In objTabela.colcolDados
        
        'prepara o comando sql
        lErro = Comando_PrepararInt(alComando(1), sSQL)
        If lErro <> AD_SQL_SUCESSO Then gError 208947
        
        'faz o bind das colunas
        iIndice = 0
        For Each vValor In colLinhas
            iIndice = iIndice + 1
            avValor(iIndice) = vValor
            lErro = Comando_BindVarInt(alComando(1), avValor(iIndice))
            If lErro <> AD_SQL_SUCESSO Then gError 208948
        Next
        
        lErro = Comando_ExecutarInt(alComando(1))
        If lErro <> AD_SQL_SUCESSO Then gError 208949
        
    Next
    
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    'confirma a transação
    lErro = Transacao_Commit
    If lErro <> AD_SQL_SUCESSO Then gError 208950
    
    If Len(Trim(objTabela.sFuncaoGrava)) > 0 Then
        lErro = CF(objTabela.sFuncaoGrava)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    End If
    
    ImportTabelas_Grava = SUCESSO

    Exit Function

Erro_ImportTabelas_Grava:

    ImportTabelas_Grava = gErr

    Select Case gErr
    
        Case 208944
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 208945
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 208946 To 208949 'ERRO_PREPARACAO_COMANDO_SQL
            Call Rotina_Erro(vbOKOnly, "ERRO_PREPARACAO_COMANDO_SQL", gErr, sSQL)
    
        Case 208950
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
    
        Case ERRO_SEM_MENSAGEM
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 208951)

    End Select
    
    'fecha os comandos
    For iIndice = LBound(alComando) To LBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    'cancela a transação
    Call Transacao_Rollback

    Exit Function

End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'GRAVAÇÃO
Public Function RegrasMsg_Grava(ByVal iTipoDoc As Integer, ByVal iTipoMsg As Integer, ByVal colRegras As Collection) As Long

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_RegrasMsg_Grava

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 209053

    lErro = CF("RegrasMsg_Grava_EmTrans", iTipoDoc, iTipoMsg, colRegras)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 209054

    RegrasMsg_Grava = SUCESSO

    Exit Function

Erro_RegrasMsg_Grava:

    RegrasMsg_Grava = gErr

    Select Case gErr

        Case 209053
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case ERRO_SEM_MENSAGEM

        Case 209054
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 209055)

    End Select

    'Desfaz Transação
    Call Transacao_Rollback

    Exit Function

End Function

Public Function RegrasMsg_Grava_EmTrans(ByVal iTipoDoc As Integer, ByVal iTipoMsg As Integer, ByVal colRegras As Collection) As Long

Dim lErro As Long
Dim alComando(0 To 2) As Long
Dim iIndice As Integer
Dim iSeq As Integer
Dim objRegrasMsg As ClassRegrasMsg

On Error GoTo Erro_RegrasMsg_Grava_EmTrans

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 209056
    Next

    'Le a tabelaRegrasMsg
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Seq FROM RegrasMsg WHERE TipoDoc= ? AND TipoMsg = ?", _
                0, iSeq, iTipoDoc, iTipoMsg)
    If lErro <> AD_SQL_SUCESSO Then gError 209057

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 209058

    Do While lErro = AD_SQL_SUCESSO

        'Trava registro contra alterações/Leituras
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> SUCESSO Then gError 209059

        lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM RegrasMsg ", alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 209060

        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 209061

    Loop
    
    For Each objRegrasMsg In colRegras
    
        If Len(Trim(objRegrasMsg.sMensagem)) > 0 Then

            lErro = Comando_Executar(alComando(1), "INSERT INTO RegrasMsg( TipoDoc, TipoMsg, Seq, Regra1, Regra2, " & _
                    "Regra3, Regra4, Regra5, Mensagem) VALUES (?,?,?,?,?,?,?,?,?)", _
                    objRegrasMsg.iTipoDoc, objRegrasMsg.iTipoMsg, objRegrasMsg.iSeq, objRegrasMsg.sRegra1, objRegrasMsg.sRegra2, _
                    objRegrasMsg.sRegra3, objRegrasMsg.sRegra4, objRegrasMsg.sRegra5, objRegrasMsg.sMensagem)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 209062

        End If

    Next

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    RegrasMsg_Grava_EmTrans = SUCESSO

    Exit Function

Erro_RegrasMsg_Grava_EmTrans:

    RegrasMsg_Grava_EmTrans = gErr

    Select Case gErr

        Case 209056
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 209057, 209058, 209061
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_REGRASMSG", gErr)

        Case 209059
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_REGRASMSG", gErr)

        Case 209060
            Call Rotina_Erro(vbOKOnly, "ERRO_DELETE_REGRASMSG", gErr)

        Case 209062
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_REGRASMSG", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 209063)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function NFeFedScan_Grava(ByVal objNFeFedScan As ClassNFeFedScan) As Long

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim lTransacao As Long
Dim iIndice As Integer
Dim lOcorrencia As Long
Dim objNF As New ClassNFiscal

On Error GoTo Erro_NFeFedScan_Grava

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 207502

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 207503
    Next
    
    objNF.iFilialEmpresa = objNFeFedScan.iFilialEmpresa
    lErro = CF("NFiscal_FilialEmpresa_Customiza", objNF)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    objNFeFedScan.iFilialEmpresa = objNF.iFilialEmpresa

    'Le a tabelaNFeFedScan
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Ocorrencia FROM NFeFedScan WHERE Ocorrencia= ? ", _
                0, lOcorrencia, objNFeFedScan.lOcorrencia)
    If lErro <> AD_SQL_SUCESSO Then gError 209300

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 209301

    'Se existir => UPDATE, senão => INSERT
    If lErro = AD_SQL_SUCESSO Then

        'Trava registro contra alterações/Leituras
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> SUCESSO Then gError 209302

        lErro = Comando_ExecutarPos(alComando(1), "UPDATE NFeFedScan SET DataEntrada= ? , HoraEntrada= ? , DataSaida= ? , HoraSaida= ? , " & _
                "Justificativa= ?, FilialEmpresa = ? ", alComando(0), _
                objNFeFedScan.dtDataEntrada, objNFeFedScan.dHoraEntrada, objNFeFedScan.dtDataSaida, objNFeFedScan.dHoraSaida, _
                objNFeFedScan.sJustificativa, objNFeFedScan.iFilialEmpresa)
        If lErro <> AD_SQL_SUCESSO Then gError 209303

    Else

        lErro = Comando_Executar(alComando(1), "INSERT INTO NFeFedScan( Ocorrencia, DataEntrada, HoraEntrada, DataSaida, " & _
                "HoraSaida, Justificativa, FilialEmpresa) VALUES (?,?,?,?,?,?,?)", _
                objNFeFedScan.lOcorrencia, objNFeFedScan.dtDataEntrada, objNFeFedScan.dHoraEntrada, objNFeFedScan.dtDataSaida, _
                objNFeFedScan.dHoraSaida, objNFeFedScan.sJustificativa, objNFeFedScan.iFilialEmpresa)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 209304

    End If
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 207505

    NFeFedScan_Grava = SUCESSO

    Exit Function

Erro_NFeFedScan_Grava:

    NFeFedScan_Grava = gErr

    Select Case gErr

        Case 207502
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 207503
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 207505
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
           
        Case 209300, 209301
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFEFEDSCAN", gErr)

        Case 209302
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_NFEFEDSCAN", gErr)

        Case 209303
            Call Rotina_Erro(vbOKOnly, "ERRO_UPDATE_NFEFEDSCAN", gErr)

        Case 209304
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_NFEFEDSCAN", gErr)

        Case ERRO_SEM_MENSAGEM

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 207506)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    'Desfaz Transação
    Call Transacao_Rollback

    Exit Function

End Function

Public Function NFeFedScan_Exclui(ByVal objNFeFedScan As ClassNFeFedScan) As Long

Dim lErro As Long
Dim alComando(1 To 2) As Long
Dim lTransacao As Long
Dim iIndice As Integer
Dim dHoraSaida As Double
Dim lNumIntDoc As Long
Dim dtDataEmissao As Date
Dim lOcorrencia As Long
Dim sSerie As String

On Error GoTo Erro_NFeFedScan_Exclui

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 207511

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 207512
    Next
    
    lErro = CF("NFeFedScan_Le", objNFeFedScan)
    If lErro <> SUCESSO And lErro <> ERRO_LEITURA_SEM_DADOS Then gError 207513
    
    If lErro <> SUCESSO Then gError 207514
    
    sSerie = String(255, 0)
    
    If objNFeFedScan.dtDataSaida = DATA_NULA Then
        
        'Le a tabela NFiscal
        lErro = Comando_Executar(alComando(1), "SELECT Serie, NumIntDoc, DataEmissao FROM NFiscal WHERE DataEmissao > ? AND (LEN(Serie) >= 3 AND (SUBSTRING(Serie, 1,1) = '9' AND SUBSTRING(Serie, 2,1) >= '0' AND SUBSTRING(Serie,2,1) <= '9' " & _
                 " AND SUBSTRING(Serie,3,1) >= '0' AND SUBSTRING(Serie,3,1) <= '9')) ", sSerie, lNumIntDoc, dtDataEmissao, objNFeFedScan.dtDataEntrada)
        If lErro <> AD_SQL_SUCESSO Then gError 207515
    Else
    
        lErro = Comando_Executar(alComando(1), "SELECT Serie, NumIntDoc, DataEmissao FROM NFiscal WHERE DataEmissao > ? AND DataEmissao < ? AND (LEN(Serie) >= 3 AND (SUBSTRING(Serie, 1,1) = '9' AND SUBSTRING(Serie, 2,1) >= '0' AND SUBSTRING(Serie,2,1) <= '9' " & _
                 " AND SUBSTRING(Serie,3,1) >= '0' AND SUBSTRING(Serie,3,1) <= '9')) ", sSerie, lNumIntDoc, dtDataEmissao, objNFeFedScan.dtDataEntrada, objNFeFedScan.dtDataSaida)
        If lErro <> AD_SQL_SUCESSO Then gError 207516
    End If

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 207517

    If lErro = SUCESSO Then gError 207518
    
    lErro = Comando_Executar(alComando(1), "DELETE FROM NFeFedScan WHERE Ocorrencia = ?", objNFeFedScan.lOcorrencia)
    If lErro <> AD_SQL_SUCESSO Then gError 207519
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 207520

    NFeFedScan_Exclui = SUCESSO

    Exit Function

Erro_NFeFedScan_Exclui:

    NFeFedScan_Exclui = gErr

    Select Case gErr

        Case 207511
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 207512
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 207513
            
        Case 207514
            
        Case 207515 To 207517
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", gErr)
            
        Case 207518
            Call Rotina_Erro(vbOKOnly, "ERRO_EXISTE_NFISCAL_SCAN_NA_OCORRENCIA", gErr)

        Case 207519
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_NFEFEDSCAN", gErr)

        Case 207520
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 207521)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    'Desfaz Transação
    Call Transacao_Rollback

    Exit Function

End Function


Function RelFatProd_PreparaPV(lNumIntRel As Long, ByVal iFilialEmpresa As Integer, ByVal dtDataInicial As Date, ByVal dtDataFinal As Date) As Long

Dim lErro As Long, lTransacao As Long, sProdAnt As String, sSQL As String, sUM As String, sUMVenda As String, dRateio As Double
Dim iIndice As Integer, alComando(1 To 4) As Long, sProduto As String, sSQLOrd As String, diValorDesconto As Double
Dim dFator As Double, dQuantidade As Double, dPrecoUnitario As Double, dPrecoTotal As Double, iClasseUM As Integer, dQuantCancelada As Double, dValorTotal As Double, dValorFrete As Double, dValorProdutos As Double, dValorDesconto As Double, dValorSeguro As Double, dValorOutrasDespesas As Double, dIPIValor As Double
Dim dQuantidadeAcum As Double, sUMVendaAnt As String, dTotalBrutoAcum As Double, dDescontosAcum As Double, dFreteAcum As Double, dSegurosAcum As Double, dOutrasDespesasAcum As Double, dIPIAcum As Double

On Error GoTo Erro_RelFatProd_PreparaPV

    'abrir comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 201194
    Next
    
    'Inicia a transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 201195

    'obtem o nº automatico
    lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_PROX_NUMINTREL", lNumIntRel)
    If lErro <> SUCESSO Then gError 201196
    
    If dtDataFinal = DATA_NULA Then dtDataFinal = gdtDataAtual + 10000
    
    sProdAnt = ""
    sProduto = String(STRING_PRODUTO, 0)
    sUM = String(STRING_UM_SIGLA, 0)
    sUMVenda = String(STRING_UM_SIGLA, 0)
    
    sSQL = "SELECT I.Produto, I.Quantidade, I.PrecoUnitario, I.PrecoTotal, P.ClasseUM, P.SiglaUMVenda, I.UnidadeMed, I.ValorDesconto iValorDesconto, I.QuantCancelada, PV.ValorTotal, PV.ValorFrete, PV.ValorProdutos, PV.ValorDesconto, PV.ValorSeguro, PV.ValorOutrasDespesas, TI.IPIValor from ItensPVTodos I, PedVenTodos PV, Produtos P,TributacaoDocItem TI WHERE I.CodPedido =PV.Codigo AND I.FilialEmpresa = PV.FilialEmpresa AND P.Codigo = I.Produto AND TI.TipoDoc=1 AND TI.NumIntDocItem = I.NumIntDoc AND PV.DataEmissao >= ? AND PV.DataEmissao <= ?"
    sSQLOrd = " ORDER BY I.Produto"
    
    If iFilialEmpresa <> EMPRESA_TODA Then
        lErro = Comando_Executar(alComando(1), sSQL & " AND PV.FilialEmpresa = ?" & sSQLOrd, _
            sProduto, dQuantidade, dPrecoUnitario, dPrecoTotal, iClasseUM, sUMVenda, sUM, diValorDesconto, dQuantCancelada, dValorTotal, dValorFrete, dValorProdutos, dValorDesconto, dValorSeguro, dValorOutrasDespesas, dIPIValor, dtDataInicial, dtDataFinal, iFilialEmpresa)
    Else
        lErro = Comando_Executar(alComando(1), sSQL & sSQLOrd, _
            sProduto, dQuantidade, dPrecoUnitario, dPrecoTotal, iClasseUM, sUMVenda, sUM, diValorDesconto, dQuantCancelada, dValorTotal, dValorFrete, dValorProdutos, dValorDesconto, dValorSeguro, dValorOutrasDespesas, dIPIValor, dtDataInicial, dtDataFinal)
    End If
    If lErro <> AD_SQL_SUCESSO Then gError 201197
    
    lErro = Comando_BuscarProximo(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 201198
    
    Do While lErro = AD_SQL_SUCESSO
    
        If sProdAnt = "" Then
            sProdAnt = sProduto
            sUMVendaAnt = sUMVenda
        End If
        
        If sProdAnt <> sProduto Then
        
            'grava o registro na tabela
            lErro = Comando_Executar(alComando(2), "INSERT INTO RelFatProd (NumIntRel, Produto, UnidadeMed, Quantidade, TotalBruto, Descontos, Frete, Seguros, OutrasDespesas, IPI ) VALUES (?,?,?,?,?,?,?,?,?,?)", _
                lNumIntRel, sProdAnt, sUMVendaAnt, dQuantidadeAcum, dTotalBrutoAcum, dDescontosAcum, dFreteAcum, dSegurosAcum, dOutrasDespesasAcum, dIPIAcum)
            If lErro <> AD_SQL_SUCESSO Then gError 201199
            
            dQuantidadeAcum = 0
            dTotalBrutoAcum = 0
            dDescontosAcum = 0
            dFreteAcum = 0
            dSegurosAcum = 0
            dOutrasDespesasAcum = 0
            dIPIAcum = 0
            
            sProdAnt = sProduto
            sUMVendaAnt = sUMVenda
            
        End If
        
        dIPIAcum = dIPIAcum + dIPIValor
        dTotalBrutoAcum = dTotalBrutoAcum + ((dQuantidade - dQuantCancelada) * dPrecoUnitario)
        dDescontosAcum = dDescontosAcum + diValorDesconto
        If Abs(dValorDesconto + dValorProdutos) > DELTA_VALORMONETARIO Then
            dRateio = dPrecoTotal / (dValorDesconto + dValorProdutos)
            dDescontosAcum = dDescontosAcum + (dValorDesconto * dRateio)
            dFreteAcum = dFreteAcum + (dValorFrete * dRateio)
            dOutrasDespesasAcum = dOutrasDespesasAcum + (dValorOutrasDespesas * dRateio)
        End If
        
        If sUMVenda <> sUM Then
        
            lErro = CF("UM_Conversao", iClasseUM, sUM, sUMVenda, dFator)
            If lErro <> SUCESSO Then gError 201200
            
            dQuantidade = dQuantidade * dFator
        
        End If
        
        dQuantidadeAcum = dQuantidadeAcum + dQuantidade
        
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 201201
    
    Loop
    
    If sProdAnt <> "" Then
    
        'grava o registro na tabela
        lErro = Comando_Executar(alComando(2), "INSERT INTO RelFatProd (NumIntRel, Produto, UnidadeMed, Quantidade, TotalBruto, Descontos, Frete, Seguros, OutrasDespesas, IPI ) VALUES (?,?,?,?,?,?,?,?,?,?)", _
            lNumIntRel, sProdAnt, sUMVendaAnt, dQuantidadeAcum, dTotalBrutoAcum, dDescontosAcum, dFreteAcum, dSegurosAcum, dOutrasDespesasAcum, dIPIAcum)
        If lErro <> AD_SQL_SUCESSO Then gError 201202
            
    End If
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 201203
    
   'fechar comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
          
    RelFatProd_PreparaPV = SUCESSO
     
    Exit Function
    
Erro_RelFatProd_PreparaPV:

    RelFatProd_PreparaPV = gErr
     
    Select Case gErr
          
        Case 201195 To 201203
            Call Rotina_Erro(vbOKOnly, "ERRO_RELFATPROD_PREPARA_PV", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 149958)
     
    End Select
     
    Call Transacao_Rollback
    
   'fechar comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
          
    Exit Function

End Function

Function NFe_Exporta_Xml(objTela As Object, ByVal sDiretorio As String, ByVal sArquivo As String, ByVal iFilialEmpresa As Integer, ByVal dtDataDe As Date, ByVal dtDataAte As Date, ByVal lClienteDe As Long, ByVal lClienteAte As Long, ByVal lNumBordero As Long) As Long
'Le Todas as Consultas para a Tela Passada

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(1 To 2) As Long, sArqXmlCanc As String, sArqXmlCCe As String
Dim sSelectCount As String, sSelect As String, sSelectAux As String, sChave As String
Dim lCount As Long, sDirXml As String, sNomeXml As String, sDirTemp As String, sArqXml As String
Dim bDirTempCriado As Boolean, bZipTempCriado As Boolean, sVersao As String, iStatus As Integer
Dim scStat As String, colSeqEvento As Collection, vValor As Variant, lNumIntNF As Long

On Error GoTo Erro_NFe_Exporta_Xml

    bDirTempCriado = False
    bZipTempCriado = False

    Call objTela.Atualiza_Texto("Aguarde ... localizando os arquivo")

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 209210
    Next
    
    lErro = CF("NFe_Obtem_Dir_Xml", sDirXml)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
'    sDirTemp = sDirXml & sArquivo & "\"
    sDirTemp = sDirXml & "XML" & Format(Date, "YYYYMMDD") & Format(Now, "HHMMSS") & "\"
 
    lErro = Zip_Cria_Diretorio(sDirTemp)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    bDirTempCriado = True
    
    If dtDataAte = DATA_NULA Then dtDataAte = gdtDataAtual
   
    If lNumBordero = 0 Then
    
        sSelectCount = "SELECT COUNT(*) "
        sSelect = "SELECT E.chNFe, E.Versao, N.Status, E.cStat, N.NumIntDoc "
        sSelectAux = "FROM NFiscal AS N, NFeFedProtNFe AS E WHERE N.NumIntDoc = E.NumIntNF AND E.cStat IN ('100','110','301','302') AND N.DataEmissao BETWEEN ? AND ? AND (N.FilialEmpresa = ? OR ? = 0) AND (N.Cliente >= ? OR ? = 0) AND (N.Cliente <= ? OR ? = 0)"
        lErro = Comando_Executar(alComando(1), sSelectCount & sSelectAux, lCount, dtDataDe, dtDataAte, iFilialEmpresa, iFilialEmpresa, lClienteDe, lClienteDe, lClienteAte, lClienteAte)
        If lErro <> AD_SQL_SUCESSO Then gError 209211
    
    Else
    
        sSelectCount = "SELECT COUNT(DISTINCT E.chNFe) "
        sSelect = "SELECT DISTINCT E.chNFe, E.Versao, N.Status, E.cStat, N.NumIntDoc "
        sSelectAux = "FROM ParcelasRecTodas AS P, TitulosRecTodos AS T, OcorrenciasRemParcRec AS O, NFiscal AS N, NFeFedProtNFe AS E WHERE N.NumIntDoc = E.NumIntNF AND E.cStat IN ('100','110','301','302') AND N.DataEmissao BETWEEN ? AND ? AND (N.FilialEmpresa = ? OR ? = 0) AND (N.Cliente >= ? OR ? = 0) AND (N.Cliente <= ? OR ? = 0) AND "
        sSelectAux = sSelectAux & "N.ClasseDocCPR = 2 AND T.NumIntDoc = N.NumIntDocCPR AND T.NumIntDoc = P.NumIntTitulo AND "
        sSelectAux = sSelectAux & "T.Status <> 5 AND O.NumIntParc = P.NumIntDoc AND O.CodOcorrencia = 1 AND O.NumBordero = " & CStr(lNumBordero)
        lErro = Comando_Executar(alComando(1), sSelectCount & sSelectAux, lCount, dtDataDe, dtDataAte, iFilialEmpresa, iFilialEmpresa, lClienteDe, lClienteDe, lClienteAte, lClienteAte)
        If lErro <> AD_SQL_SUCESSO Then gError 209211

    End If
   
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 209212
    
    Call objTela.Inicializa_Copia(lCount)
    
    If lCount = 0 Then gError 209247
    
    sChave = String(STRING_MAXIMO, 0)
    sVersao = String(STRING_MAXIMO, 0)
    scStat = String(STRING_MAXIMO, 0)
    
    lErro = Comando_Executar(alComando(2), sSelect & sSelectAux, sChave, sVersao, iStatus, scStat, lNumIntNF, dtDataDe, dtDataAte, iFilialEmpresa, iFilialEmpresa, lClienteDe, lClienteDe, lClienteAte, lClienteAte)
    If lErro <> AD_SQL_SUCESSO Then gError 209213

    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 209214
    
    Do While lErro <> AD_SQL_SEM_DADOS
        
        If scStat = "110" Or scStat = "301" Or scStat = "302" Then
            'denegada
            sArqXml = sChave & "-den.xml"
        Else
            'autorizada
            If sVersao = "1.10" Then
                sArqXml = "NFe" & sChave & ".xml"
            ElseIf sVersao = "3.10" Or sVersao = "4.00" Then
                sArqXml = sChave & "-procNfe.xml"
            Else
                sArqXml = sChave & "-nfe.xml"
            End If
        End If
        
        lErro = Zip_Verifica_Existencia_Arquivo(sDirXml & sArqXml)
        If lErro <> SUCESSO And lErro <> ERRO_ARQUIVO_NAO_ENCONTRADO Then gError ERRO_SEM_MENSAGEM
    
        If lErro <> ERRO_ARQUIVO_NAO_ENCONTRADO Then
            lErro = Zip_Copia_Arquivo(sDirXml & sArqXml, sDirTemp & sArqXml)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        End If
        
        If iStatus = STATUS_CANCELADO And scStat = "100" Then
        
            If sVersao = "1.10" Then
                sArqXmlCanc = "CancNFe" & sChave & ".xml"
            ElseIf sVersao = "3.10" Or sVersao = "4.00" Then
                sArqXmlCanc = "110111-" & sChave & "-1-procEventoNfe.xml"
            Else
                sArqXmlCanc = sChave & "-can.xml"
            End If
            
            lErro = Zip_Verifica_Existencia_Arquivo(sDirXml & sArqXmlCanc)
            If lErro <> SUCESSO And lErro <> ERRO_ARQUIVO_NAO_ENCONTRADO Then gError ERRO_SEM_MENSAGEM
        
            If lErro <> ERRO_ARQUIVO_NAO_ENCONTRADO Then
                lErro = Zip_Copia_Arquivo(sDirXml & sArqXmlCanc, sDirTemp & sArqXmlCanc)
                If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
            End If
        End If
        
        Set colSeqEvento = New Collection
        
        lErro = CF("NFe_Le_Cce2", lNumIntNF, colSeqEvento)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        
        For Each vValor In colSeqEvento
        
            If sVersao = "3.10" Or sVersao = "4.00" Then
                sArqXmlCCe = "110110-" & sChave & SEPARADOR & CStr(vValor) & "-procEventoNfe.xml"
            Else
                sArqXmlCCe = sChave & SEPARADOR & CStr(vValor) & "-nfe-cce.xml"
            End If
        
            lErro = Zip_Verifica_Existencia_Arquivo(sDirXml & sArqXmlCCe)
            If lErro <> SUCESSO And lErro <> ERRO_ARQUIVO_NAO_ENCONTRADO Then gError ERRO_SEM_MENSAGEM
        
            If lErro <> ERRO_ARQUIVO_NAO_ENCONTRADO Then
                lErro = Zip_Copia_Arquivo(sDirXml & sArqXmlCCe, sDirTemp & sArqXmlCCe)
                If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
            End If
        Next
    
        lErro = objTela.Processa_Registro()
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
        lErro = Comando_BuscarProximo(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 209066
    
    Loop
    
    Call objTela.Atualiza_Texto("Aguarde ... compactando arquivo")
    lErro = Zip_Compacta(sDirXml & sArquivo & ".zip", sDirTemp & "*.*")
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    bZipTempCriado = True

    If UCase(sDirXml) <> UCase(sDiretorio) Then
        Call objTela.Atualiza_Texto("Aguarde ... transferindo arquivo")
        lErro = Zip_Copia_Arquivo(sDirXml & sArquivo & ".zip", sDiretorio & sArquivo & ".zip")
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
        Call objTela.Atualiza_Texto("Excluindo arquivo temporário ....")
        lErro = Zip_Exclui_Arquivo(sDirXml & sArquivo & ".zip")
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    End If
    bZipTempCriado = False
    
    Call objTela.Atualiza_Texto("Excluindo pasta temporária ....")
    lErro = Zip_Exclui_Diretorio(sDirTemp)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    bDirTempCriado = False
    
    Call objTela.Atualiza_Texto("Arquivo gerado com sucesso")

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    NFe_Exporta_Xml = SUCESSO

    Exit Function

Erro_NFe_Exporta_Xml:

    NFe_Exporta_Xml = gErr

    Select Case gErr
        
        Case 209210
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 209211 To 209214
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", gErr)
            
        Case 209247
            Call Rotina_Erro(vbOKOnly, "AVISO_SEM_REGISTRO", gErr)
            
        Case ERRO_SEM_MENSAGEM
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 209215)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    If bZipTempCriado Then Call Zip_Exclui_Arquivo(sDirXml & sArquivo & ".zip")
    If bDirTempCriado Then Call Zip_Exclui_Diretorio(sDirTemp)
    
    Exit Function

End Function

Public Function SpedFis_Tabela_Exclui(ByVal sTabela As String, ByVal iAno As Integer, ByVal iMes As Integer, ByVal iFilialEmpresa As Integer) As Long

Dim lErro As Long
Dim lTransacao As Long
Dim iIndice As Integer
Dim alComando(0 To 1) As Long
Dim sSQL As String, lAux As Long
Dim vbResult As VbMsgBoxResult

On Error GoTo Erro_SpedFis_Tabela_Exclui

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 209316
    Next

    sSQL = "SELECT Ano FROM " & sTabela & " WHERE Ano = ? AND Mes = ? AND FilialEmpresa = ? "

    lErro = Comando_Executar(alComando(0), sSQL, lAux, iAno, iMes, iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 209334

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 209335

    If lErro = AD_SQL_SUCESSO Then
        vbResult = Rotina_Aviso(vbYesNo, "AVISO_SPED_DADOS_CADASTRADOS")
        If vbResult = vbNo Then gError ERRO_SEM_MENSAGEM
    End If

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 209315
    
    sSQL = "DELETE FROM " & sTabela & " WHERE Ano = ? AND Mes = ? AND FilialEmpresa = ? "
    
    lErro = Comando_Executar(alComando(1), sSQL, iAno, iMes, iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 209317

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 209318

    SpedFis_Tabela_Exclui = SUCESSO

    Exit Function

Erro_SpedFis_Tabela_Exclui:

    SpedFis_Tabela_Exclui = gErr

    Select Case gErr

        Case 209315
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 209316
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 209317, 209334, 209335
            Call Rotina_Erro(vbOKOnly, "ERRO_PREPARACAO_COMANDO_SQL", gErr, sSQL)

        Case 209318
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case ERRO_SEM_MENSAGEM

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 209319)

    End Select
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    'Desfaz Transação
    Call Transacao_Rollback

    Exit Function

End Function

Function NFeFedLote_Excluir(ByVal objNFiscal As ClassNFiscal) As Long
'exclui os registros de nfefedlote ligado a nota em questao

Dim lErro As Long, iIndice As Integer
Dim alComando(1 To 1) As Long

On Error GoTo Erro_NFeFedLote_Excluir
    
    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 207569
    Next
    
    'exclui nfefedlote
    lErro = Comando_Executar(alComando(1), "DELETE FROM NFEFedLote WHERE NumIntNF = ?", objNFiscal.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 207570
        
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    NFeFedLote_Excluir = SUCESSO

    Exit Function

Erro_NFeFedLote_Excluir:

    NFeFedLote_Excluir = gErr

    Select Case gErr

        Case 207569
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 207570
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_NFEFEDLOTE", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 207571)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function RPSWEBLote_Excluir(ByVal objNFiscal As ClassNFiscal) As Long
'exclui os registros de rpsweblote ligado a nota em questao

Dim lErro As Long, iIndice As Integer
Dim alComando(1 To 1) As Long

On Error GoTo Erro_RPSWEBLote_Excluir
    
    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 207629
    Next
    
    'exclui RPSWEBLote
    lErro = Comando_Executar(alComando(1), "DELETE FROM RPSWEBLote WHERE NumIntNF = ?", objNFiscal.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 207630
        
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    RPSWEBLote_Excluir = SUCESSO

    Exit Function

Erro_RPSWEBLote_Excluir:

    RPSWEBLote_Excluir = gErr

    Select Case gErr

        Case 207629
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 207630
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_RPSWEBLOTE", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 207631)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function NFiscalFatura_AlteraDados(ByVal objNFiscal As ClassNFiscal, ByVal objContabil As ClassContabil) As Long
'Altera NFiscal Fatura

Dim lErro As Long
Dim iIndice As Integer
Dim lTransacao As Long
Dim vbMsgRes As VbMsgBoxResult

On Error GoTo Erro_NFiscalFatura_AlteraDados


    'Inicia Transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 207656
    
    lErro = CF("NFiscalFatura_AlteraDados_EmTrans", objNFiscal, objContabil)
    If lErro <> SUCESSO Then gError 207671
    
    'Faz o Commit da Transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 207657
    
    NFiscalFatura_AlteraDados = SUCESSO

    Exit Function
    
Erro_NFiscalFatura_AlteraDados:

    NFiscalFatura_AlteraDados = gErr
    
    Select Case gErr
    
        Case 207656
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
        
        Case 207657
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
    
        Case 207671
    
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 207659)
            
    End Select
    
    Call Transacao_Rollback
    
    Exit Function
    
End Function

Function NFiscalFatura_GravaCompl(ByVal objNFiscal As ClassNFiscal, ByVal objContabil As ClassContabil) As Long
'Altera NFiscal Fatura

Dim lErro As Long
Dim iIndice As Integer

On Error GoTo Erro_NFiscalFatura_GravaCompl

    lErro = CF("ProjetoInfo_Grava", objNFiscal.objProjetoInfo, PRJ_CR_TIPO_NF, objNFiscal.lNumIntDoc)
    If lErro <> SUCESSO Then gError 181706
    
    lErro = CF("NFiscal_Trata_MsgItem", objNFiscal)
    If lErro <> SUCESSO Then gError 181706
    
    lErro = CF("NF_Grava_RPS", objNFiscal)
    If lErro <> SUCESSO Then gError 192651
    
    'Grava os dados contábeis (contabilidade)
    If Not (objContabil Is Nothing) Then
        lErro = objContabil.Contabil_Gravar_Registro(objNFiscal.lNumIntDoc, objNFiscal.lCliente, objNFiscal.iFilialCli, objNFiscal.dtDataSaida, NAO_AVALIA_PELO_CUSTO_REAL_PRODUCAO, NAO_AVISA_LANCAMENTOS_CONTABILIZADOS, objNFiscal.lNumNotaFiscal, -objNFiscal.dValorLivroAux)
        If lErro <> SUCESSO Then gError 36507
    End If
    
    'Daniel 27/05/2002
    'Vincula ou desvincula um Orçamento de Venda a uma NFiscal.
    lErro = CF("NFiscal_AlteraVinculo_Orcamento", objNFiscal)
    If lErro <> SUCESSO Then gError 94464

    lErro = CF("NFiscal_Valida_NFE", objNFiscal)
    If lErro <> SUCESSO Then gError 207566
    
    objNFiscal.objInfoAdic.lNumIntDoc = objNFiscal.lNumIntDoc
    objNFiscal.objInfoAdic.iTipoDoc = TIPODOC_INFOADIC_NF
    lErro = CF("InfoAdicionais_Grava", objNFiscal.objInfoAdic)
    If lErro <> SUCESSO Then gError 181706

    NFiscalFatura_GravaCompl = SUCESSO

    Exit Function
    
Erro_NFiscalFatura_GravaCompl:

    NFiscalFatura_GravaCompl = gErr
    
    Select Case gErr
    
        Case 36507, 44289, 44496, 52966, 52967, 69556, 83399, 133105, 181706, 192651, 207566
    
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 207658)
            
    End Select
    
    Exit Function
    
End Function

Function NFiscalRemessa_GravaCompl(ByVal objNFiscal As ClassNFiscal, ByVal objContabil As ClassContabil) As Long

Dim lErro As Long
Dim iIndice As Integer

On Error GoTo Erro_NFiscalRemessa_GravaCompl

    lErro = CF("ProjetoInfo_Grava", objNFiscal.objProjetoInfo, PRJ_CR_TIPO_NF, objNFiscal.lNumIntDoc)
    If lErro <> SUCESSO Then gError 207697
    
    lErro = CF("NFiscal_Trata_MsgItem", objNFiscal)
    If lErro <> SUCESSO Then gError 207698
    
    If Not (objContabil Is Nothing) Then
   
       If objNFiscal.lFornecedor > 0 Then
        
            'Grava os dados contábeis (contabilidade)
            lErro = objContabil.Contabil_Gravar_Registro(objNFiscal.lNumIntDoc, objNFiscal.lFornecedor, objNFiscal.iFilialForn, objNFiscal.dtDataSaida, NAO_AVALIA_PELO_CUSTO_REAL_PRODUCAO, NAO_AVISA_LANCAMENTOS_CONTABILIZADOS, objNFiscal.lNumNotaFiscal)
            If lErro <> SUCESSO Then gError 207699
    
        Else
        
            'Grava os dados contábeis (contabilidade)
            lErro = objContabil.Contabil_Gravar_Registro(objNFiscal.lNumIntDoc, objNFiscal.lCliente, objNFiscal.iFilialCli, objNFiscal.dtDataSaida, NAO_AVALIA_PELO_CUSTO_REAL_PRODUCAO, NAO_AVISA_LANCAMENTOS_CONTABILIZADOS, objNFiscal.lNumNotaFiscal)
            If lErro <> SUCESSO Then gError 207701
        
        End If
   
    End If
   
    lErro = CF("NFiscal_Valida_NFE", objNFiscal)
    If lErro <> SUCESSO Then gError 207702
    
    objNFiscal.objInfoAdic.lNumIntDoc = objNFiscal.lNumIntDoc
    objNFiscal.objInfoAdic.iTipoDoc = TIPODOC_INFOADIC_NF
    lErro = CF("InfoAdicionais_Grava", objNFiscal.objInfoAdic)
    If lErro <> SUCESSO Then gError 207703


    NFiscalRemessa_GravaCompl = SUCESSO

    Exit Function
    
Erro_NFiscalRemessa_GravaCompl:

    NFiscalRemessa_GravaCompl = gErr
    
    Select Case gErr
    
        Case 207697 To 207703
    
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 207704)
            
    End Select
    
    Exit Function


End Function

Function NFiscalFatura_AlteraDados_EmTrans(ByVal objNFiscal As ClassNFiscal, ByVal objContabil As ClassContabil) As Long
'Altera NFiscal Fatura

Dim lErro As Long
Dim iIndice As Integer
Dim lTransacao As Long

On Error GoTo Erro_NFiscalFatura_AlteraDados_EmTrans

    'trata da alteração dos dados da nota fiscal.
    lErro = CF("NFiscal_Le_NumNotaFiscal", objNFiscal)
    If lErro <> SUCESSO And lErro <> 207677 Then gError 207679

    If lErro <> SUCESSO Then gError 207680

    'trata da alteração dos dados da nota fiscal.
    lErro = CF("NFiscal_Alteracao", objNFiscal)
    If lErro <> SUCESSO Then gError 207661
    
    lErro = CF("NFiscalFatura_GravaCompl", objNFiscal, objContabil)
    If lErro <> SUCESSO Then gError 207660
    
    NFiscalFatura_AlteraDados_EmTrans = SUCESSO

    Exit Function
    
Erro_NFiscalFatura_AlteraDados_EmTrans:

    NFiscalFatura_AlteraDados_EmTrans = gErr
    
    Select Case gErr
    
        Case 207660, 207661, 207679
        
        Case 207680
            lErro = Rotina_Erro(vbOKOnly, "ERRO_NOTA_FISCAL_NAO_CADASTRADA", gErr)
    
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 207670)
            
    End Select
    
    Exit Function
    
End Function

Function NFiscalRemessa_AlteraDados(ByVal objNFiscal As ClassNFiscal, ByVal objContabil As ClassContabil) As Long
'Altera NFiscal Fatura

Dim lErro As Long
Dim iIndice As Integer
Dim lTransacao As Long
Dim vbMsgRes As VbMsgBoxResult

On Error GoTo Erro_NFiscalRemessa_AlteraDados


    'Inicia Transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 207711
    
    lErro = CF("NFiscalRemessa_AlteraDados_EmTrans", objNFiscal, objContabil)
    If lErro <> SUCESSO Then gError 207712
    
    'Faz o Commit da Transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 207713
    
    NFiscalRemessa_AlteraDados = SUCESSO

    Exit Function
    
Erro_NFiscalRemessa_AlteraDados:

    NFiscalRemessa_AlteraDados = gErr
    
    Select Case gErr
    
        Case 207711
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
        
        Case 207712
        
        Case 207713
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
    
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 207714)
            
    End Select
    
    Call Transacao_Rollback
    
    Exit Function
    
End Function

Function NFiscalRemessa_AlteraDados_EmTrans(ByVal objNFiscal As ClassNFiscal, ByVal objContabil As ClassContabil) As Long
'Altera NFiscal Fatura

Dim lErro As Long
Dim iIndice As Integer
Dim lTransacao As Long

On Error GoTo Erro_NFiscalRemessa_AlteraDados_EmTrans

    'trata da alteração dos dados da nota fiscal.
    lErro = CF("NFiscal_Le_NumNotaFiscal", objNFiscal)
    If lErro <> SUCESSO And lErro <> 207677 Then gError 207715

    If lErro <> SUCESSO Then gError 207716

    'trata da alteração dos dados da nota fiscal.
    lErro = CF("NFiscal_Alteracao", objNFiscal)
    If lErro <> SUCESSO Then gError 207717
    
    lErro = CF("NFiscalRemessa_GravaCompl", objNFiscal, objContabil)
    If lErro <> SUCESSO Then gError 207718
    
    NFiscalRemessa_AlteraDados_EmTrans = SUCESSO

    Exit Function
    
Erro_NFiscalRemessa_AlteraDados_EmTrans:

    NFiscalRemessa_AlteraDados_EmTrans = gErr
    
    Select Case gErr
    
        Case 207715, 207717, 207718
        
        Case 207716
            lErro = Rotina_Erro(vbOKOnly, "ERRO_NOTA_FISCAL_NAO_CADASTRADA", gErr)
    
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 207719)
            
    End Select
    
    Exit Function
    
End Function

Function NFiscalPedido_GravaCompl(ByVal objNFiscal As ClassNFiscal, ByVal objContabil As ClassContabil) As Long

Dim lErro As Long
Dim iIndice As Integer

On Error GoTo Erro_NFiscalPedido_GravaCompl

    lErro = CF("ProjetoInfo_Grava", objNFiscal.objProjetoInfo, PRJ_CR_TIPO_NF, objNFiscal.lNumIntDoc)
    If lErro <> SUCESSO Then gError 207732
        
    lErro = CF("NF_Grava_RPS", objNFiscal)
    If lErro <> SUCESSO Then gError 207733
    
    lErro = CF("ItensNFEntrega_Grava", objNFiscal)
    If lErro <> SUCESSO Then gError 207734

    lErro = CF("NFiscal_Trata_MsgItem", objNFiscal)
    If lErro <> SUCESSO Then gError 207735

    lErro = CF("NFiscal_Valida_NFE", objNFiscal)
    If lErro <> SUCESSO Then gError 207736

    objNFiscal.objInfoAdic.lNumIntDoc = objNFiscal.lNumIntDoc
    objNFiscal.objInfoAdic.iTipoDoc = TIPODOC_INFOADIC_NF
    lErro = CF("InfoAdicionais_Grava", objNFiscal.objInfoAdic)
    If lErro <> SUCESSO Then gError 207737
    
    'Grava os dados contábeis (contabilidade)
    If Not (objContabil Is Nothing) Then
        lErro = objContabil.Contabil_Gravar_Registro(objNFiscal.lNumIntDoc, objNFiscal.lCliente, objNFiscal.iFilialCli, objNFiscal.dtDataSaida, NAO_AVALIA_PELO_CUSTO_REAL_PRODUCAO, NAO_AVISA_LANCAMENTOS_CONTABILIZADOS, objNFiscal.lNumNotaFiscal)
        If lErro <> SUCESSO Then gError 207738
    End If

    NFiscalPedido_GravaCompl = SUCESSO

    Exit Function
    
Erro_NFiscalPedido_GravaCompl:

    NFiscalPedido_GravaCompl = gErr
    
    Select Case gErr
    
        Case 207732 To 207738
    
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 207739)
            
    End Select
    
    Exit Function

End Function

Function NFiscalPedido_AlteraDados(ByVal objNFiscal As ClassNFiscal, ByVal objContabil As ClassContabil) As Long
'Altera NFiscal Fatura

Dim lErro As Long
Dim iIndice As Integer
Dim lTransacao As Long
Dim vbMsgRes As VbMsgBoxResult

On Error GoTo Erro_NFiscalPedido_AlteraDados

    'Inicia Transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 207741
    
    lErro = CF("NFiscalPedido_AlteraDados_EmTrans", objNFiscal, objContabil)
    If lErro <> SUCESSO Then gError 207742
    
    'Faz o Commit da Transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 207743
    
    NFiscalPedido_AlteraDados = SUCESSO

    Exit Function
    
Erro_NFiscalPedido_AlteraDados:

    NFiscalPedido_AlteraDados = gErr
    
    Select Case gErr
    
        Case 207741
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
        
        Case 207742
        
        Case 207743
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
    
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 207744)
            
    End Select
    
    Call Transacao_Rollback
    
    Exit Function
    
End Function

Function NFiscalPedido_AlteraDados_EmTrans(ByVal objNFiscal As ClassNFiscal, ByVal objContabil As ClassContabil) As Long
'Altera NFiscal Fatura

Dim lErro As Long
Dim iIndice As Integer
Dim lTransacao As Long

On Error GoTo Erro_NFiscalPedido_AlteraDados_EmTrans

    'trata da alteração dos dados da nota fiscal.
    lErro = CF("NFiscal_Le_NumNotaFiscal", objNFiscal)
    If lErro <> SUCESSO And lErro <> 207677 Then gError 207745

    If lErro <> SUCESSO Then gError 207746

    'trata da alteração dos dados da nota fiscal.
    lErro = CF("NFiscal_Alteracao", objNFiscal)
    If lErro <> SUCESSO Then gError 207747
    
    lErro = CF("NFiscalPedido_GravaCompl", objNFiscal, objContabil)
    If lErro <> SUCESSO Then gError 207748
    
    NFiscalPedido_AlteraDados_EmTrans = SUCESSO

    Exit Function
    
Erro_NFiscalPedido_AlteraDados_EmTrans:

    NFiscalPedido_AlteraDados_EmTrans = gErr
    
    Select Case gErr
    
        Case 207745, 207747, 207748
        
        Case 207746
            lErro = Rotina_Erro(vbOKOnly, "ERRO_NOTA_FISCAL_NAO_CADASTRADA", gErr)
    
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 207749)
            
    End Select
    
    Exit Function
    
End Function

Function Contratos_Campanha_Gera()

Dim lErro As Long, lCliente As Long, lTransacao As Long, lCodContrato As Long
Dim alComando(0 To 10) As Long, objContrato As ClassContrato
Dim objItensDeContrato As ClassItensDeContrato
Dim lNumIntDoc As Long, iIndice As Integer, dValContrato As Double
Dim lNumProx As Long, lNum As Long, lContrato As Long

On Error GoTo Erro_Contratos_Campanha_Gera

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 130423

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 130426
    Next

'    lErro = Comando_Executar(alComando(0), "SELECT cli.codigo FROM pessach2020outros p, clientes cli, familias f WHERE p.cód = f.codfamilia and f.codcliente = cli.codigo ORDER BY p.Posicao", lCliente)
    lErro = Comando_Executar(alComando(0), "SELECT CLI.Codigo FROM Clientes CLI, FiliaisClientes FIL, Enderecos ENDE WHERE RazaoSocial NOT LIKE '*%' AND ENDE.Endereco<> '' AND CLI.Ativo=1 AND FIL.CodCliente = CLI.Codigo AND FIL.CodFilial = 1 AND FIL.Endereco = ENDE.Codigo AND FIL.CGC <> '' ORDER BY CLI.Codigo", lCliente)
    If lErro <> AD_SQL_SUCESSO Then gError 2222

    lErro = Comando_BuscarProximo(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 2222

    Do While lErro <> AD_SQL_SEM_DADOS

        lContrato = lContrato + 1

        'Busca próximo identificador
        lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_PROX_CONTRATO", lNumProx)
        If lErro <> SUCESSO Then gError 131066

        Set objContrato = New ClassContrato

        With objContrato

            .lNumIntDoc = lNumProx
            .iFilialEmpresa = 1 '2 LAR LEBLON
            .lCliente = lCliente

            .dtDataFimContrato = StrParaDate("31/12/2020")
            .dtDataIniCobrancaPadrao = StrParaDate("18/08/2020")
            .dtDataIniContrato = StrParaDate("18/08/2020")
            .dtDataRenovContrato = StrParaDate("31/12/2020")

            .iCondPagtoPadrao = 30 '??? 18
            .iFilCli = 1
            .iPeriodicidadePadrao = PERIODICIDADE_ANUAL

            .iAtivo = 1

            .sCodigo = "YN" & Format(lContrato, "0000")
            .sContaContabil = ""
            '.sDescricao = "BOLETO PARA REVISTA"
            '.sDescricao = "Campanha Matsa Shumra"
            .sDescricao = "Campanha donativos Yizcor"
            '.sDescricao = "Campanha donativos Rosh Hashana"
            .sObservacao = ""
            .sHistoricoContabil = ""

            .sCcl = ""

            .sNaturezaOp = "5949"
            .iTipoTributacao = 32

            .iTipo = CONTRATOS_RECEBER
            .iRecibo = DESMARCADO

            'Insere contrato
            lErro = Comando_Executar(alComando(2), "INSERT INTO Contratos(NumIntDoc, FilialEmpresa, Codigo, Descricao, Ativo, Cliente, FilCli, Observacao, DataIniContrato, DataFimContrato, DataRenovContrato, ContaContabil, HistoricoContabil, DataIniCobrancaPadrao, PeriodicidadePadrao, CondPagtoPadrao, Ccl, NaturezaOP,TipoTributacao, Tipo, FilialFornecedor, Fornecedor, Recibo) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                                                                        .lNumIntDoc, .iFilialEmpresa, .sCodigo, .sDescricao, .iAtivo, .lCliente, .iFilCli, .sObservacao, .dtDataIniContrato, .dtDataFimContrato, .dtDataRenovContrato, .sContaContabil, .sHistoricoContabil, .dtDataIniCobrancaPadrao, .iPeriodicidadePadrao, .iCondPagtoPadrao, .sCcl, .sNaturezaOp, .iTipoTributacao, .iTipo, .iFilForn, .lFornecedor, .iRecibo)
        End With
        If lErro <> AD_SQL_SUCESSO Then gError 129341

        Set objItensDeContrato = New ClassItensDeContrato

        'Obtem identificado (NumIntDoc)
        lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_PROX_ITENSDECONTRATO", lNumProx)
        If lErro <> SUCESSO Then gError 129367

        With objItensDeContrato

            .lNumIntDoc = lNumProx
            .lNumIntContrato = objContrato.lNumIntDoc
            .dtDataRefIni = StrParaDate("01/01/2020")
            .dtDataRefFim = StrParaDate("31/12/2020")
            .dQuantidade = 1
            .dtDataIniCobranca = StrParaDate("10/03/2020")
            .dtDataProxCobranca = StrParaDate("10/03/2020")
            .dValor = 180 '???????
            .iCobrar = 1
            .iMedicao = 0
            .iSeq = 1

            .iCondPagto = 30
            .iPeriodicidade = PERIODICIDADE_ANUAL
'            .sProduto = "00033"
'            .sDescProd = "DOAÇÃO PARA CALENDÁRIO/REVISTA"
'            .sProduto = "00062"
'            .sDescProd = "DONATIVO YOM KIPUR / YIZCOR 5780"
            .sProduto = "00061"
            .sDescProd = "DONATIVO PESSACH"
'            .sProduto = "00032"
'            .sDescProd = "Donativo Rosh Hashana 5780"
            .sObservacao = ""
            .sUM = "un"

            'Insere item
            lErro = Comando_Executar(alComando(3), "INSERT INTO ItensDeContrato(NumIntDoc, NumIntContrato, Seq, Cobrar, Produto, DescProd, Quantidade, UM, Valor, Medicao, DataIniCobranca, Periodicidade, CondPagto, Observacao, DataProxCobranca, DataRefIni, DataRefFim) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                                                        .lNumIntDoc, .lNumIntContrato, .iSeq, .iCobrar, .sProduto, .sDescProd, .dQuantidade, .sUM, .dValor, .iMedicao, .dtDataIniCobranca, .iPeriodicidade, .iCondPagto, .sObservacao, .dtDataProxCobranca, .dtDataRefIni, .dtDataRefFim)
        End With
        If lErro <> AD_SQL_SUCESSO Then gError 129348

        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 2222

    Loop

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 130425

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Contratos_Campanha_Gera = SUCESSO

    Exit Function

Erro_Contratos_Campanha_Gera:

    Contratos_Campanha_Gera = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 201037)

    End Select

    'Desfaz Transação
    Call Transacao_Rollback

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function NFiscalDev_Grava_DevRemBenef(ByVal objNFDev As ClassNFiscal) As Long
'Tem que montar a coleção colItensNFDevBenefRem para poder dar baixa no saldo a devolver das remessas de beneficiamento

Dim lErro As Long
Dim objItemNFRem As ClassItemNF
Dim objItem As ClassItemNF
Dim objProduto As ClassProduto
Dim dFator As Double

On Error GoTo Erro_NFiscalDev_Grava_DevRemBenef

    'Se o cliente controla o saldo a devolver da remessa por beneficiamento
    'E é uma devolução real dos insumos que não foram consumidos no processo
    If gobjFAT.iTrataNFDevSimbPorOP = MARCADO And objNFDev.iTipoNFiscal = DOCINFO_NFISDBF Then
    
        For Each objItem In objNFDev.colItens
        
            If objItem.lNumIntDocOrig = 0 Then gError 211101 'Não pode ter NF sem estar associada a NF original
            
            Set objProduto = New ClassProduto
            Set objItemNFRem = New ClassItemNF
            Set objItem.colItensNFDevBenefRem = New Collection
            objItem.colItensNFDevBenefRem.Add objItemNFRem
            
            objItemNFRem.lNumIntDoc = objItem.lNumIntDocOrig
            
            lErro = CF("ItemNFiscal_Le", objItemNFRem)
            If lErro <> SUCESSO And lErro <> 35225 Then gError ERRO_SEM_MENSAGEM
            
            objProduto.sCodigo = objItem.sProduto
            
            'ler dados do produto
            lErro = CF("Produto_Le", objProduto)
            If lErro <> SUCESSO And lErro <> 28030 Then gError ERRO_SEM_MENSAGEM
        
            lErro = CF("UM_Conversao", objProduto.iClasseUM, objItem.sUnidadeMed, objItemNFRem.sUnidadeMed, dFator)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
            
            objItemNFRem.dQuantidade = objItem.dQuantidade * dFator
            
            'Dá baixa no saldo e grava a associação para exibir na consulta
            lErro = NFiscalDev_Grava_Dados_Benef(objItem)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        
        Next
    
    End If

    NFiscalDev_Grava_DevRemBenef = SUCESSO

    Exit Function

Erro_NFiscalDev_Grava_DevRemBenef:

    NFiscalDev_Grava_DevRemBenef = gErr

    Select Case gErr
    
        Case 211101
            Call Rotina_Erro(vbOKOnly, "ERRO_NFISCAL_ORIGINAL_NAO_PREENCHIDA", gErr)
 
        Case ERRO_SEM_MENSAGEM

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 209938)

    End Select

    Exit Function
    
End Function

Private Function NFiscalDev_Grava_Dados_Benef(ByVal objItemNF As ClassItemNF) As Long

Dim lErro As Long
Dim alComando(1 To 4) As Long
Dim iIndice As Integer
Dim objItemNFRem As ClassItemNF
Dim objItemOPDev As ClassNFDevBenefInsumo
Dim dSaldoADevolver As Double, dQtdOP As Double

On Error GoTo Erro_NFiscalDev_Grava_Dados_Benef

    'Executa a abertura do Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 209928
    Next
    
    For Each objItemNFRem In objItemNF.colItensNFDevBenefRem
    
        lErro = Comando_ExecutarPos(alComando(1), "SELECT SaldoADevolver FROM ItensNFRemBenef WHERE NumIntItemNF =? ", 0, dSaldoADevolver, objItemNFRem.lNumIntDoc)
        If lErro <> AD_SQL_SUCESSO Then gError 209929
    
        'Busca Primeiro
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 209930
    
        If lErro = AD_SQL_SEM_DADOS Then gError 209931
    
        lErro = Comando_LockExclusive(alComando(1))
        If lErro <> SUCESSO Then gError 209932

        'Está na UM da NF de remessa que não necessariamente é a mesma da devolução
        'Não pode devolver mais do que o saldo (Já estão na mesma unidade de medida)
        If dSaldoADevolver - objItemNFRem.dQuantidade < -0.00009 Then gError 209933
        
        lErro = Comando_ExecutarPos(alComando(2), "UPDATE ItensNFRemBenef SET SaldoADevolver = SaldoADevolver - ? ", alComando(1), objItemNFRem.dQuantidade)
        If lErro <> AD_SQL_SUCESSO Then gError 209934
        
        lErro = Comando_Executar(alComando(3), "INSERT INTO ItensNFDevBenefRem(NumIntItemNFRem,NumIntItemNFDev,Quantidade) VALUES (?,?,?)", _
        objItemNFRem.lNumIntDoc, objItemNF.lNumIntDoc, objItemNFRem.dQuantidade)
        If lErro <> AD_SQL_SUCESSO Then gError 209935
    
    Next

    dQtdOP = 0
    For Each objItemOPDev In objItemNF.colItensNFDevBenefItemOP
    
        'Está na UM da NF de devolução
        lErro = Comando_Executar(alComando(4), "INSERT INTO ItensNFDevBenefItemOP(NumIntItemNFDev,NumIntItemOP,QuantDev,QuantConsCalc,QuantDevAnt) VALUES (?,?,?,?,?)", _
        objItemNF.lNumIntDoc, objItemOPDev.lNumIntItemOP, objItemOPDev.dQuantADevolver, objItemOPDev.dQuantidade, objItemOPDev.dQuantDevolvida)
        If lErro <> AD_SQL_SUCESSO Then gError 209936
        
        dQtdOP = dQtdOP + dQtdOP
    
    Next
    
    'A soma por OP não bate com o total devolvido
    If dQtdOP <> 0 And Abs(dQtdOP - objItemNF.dQuantidade) > QTDE_ESTOQUE_DELTA Then gError 209937
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    NFiscalDev_Grava_Dados_Benef = SUCESSO

    Exit Function

Erro_NFiscalDev_Grava_Dados_Benef:

    NFiscalDev_Grava_Dados_Benef = gErr

    Select Case gErr

        Case 209928
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 209929, 209930
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITEMNFREMBENEF", gErr)
        
        Case 209931
            Call Rotina_Erro(vbOKOnly, "ERRO_ITEMNFREMBENEF_NAO_CADASTRADO", gErr, objItemNFRem.lNumIntDoc)
            
        Case 209932
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_ITEMNFREMBENEF", gErr)
        
        Case 209933
            Call Rotina_Erro(vbOKOnly, "ERRO_ITEMNFREMBENEF_SEM_SALDO", gErr, objItemNFRem.lNumIntDoc, Formata_Estoque(dSaldoADevolver), Formata_Estoque(objItemNFRem.dQuantidade))
        
        Case 209934
            Call Rotina_Erro(vbOKOnly, "ERRO_UPDATE_ITEMNFREMBENEF", gErr)
        
        Case 209935
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERT_ITEMNFDEVBENEFREM", gErr)
        
        Case 209936
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERT_ITEMNFDEVBENEFITEMOP", gErr)
        
        Case 209937
            Call Rotina_Erro(vbOKOnly, "ERRO_ITEMNFDEVBENEFITEMOP_TOTAL_DIF", gErr, objItemNF.iItem, Formata_Estoque(dQtdOP), Formata_Estoque(objItemNF.dQuantidade))
        
        Case ERRO_SEM_MENSAGEM

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 209938)

    End Select
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function NFiscalDev_Exclui_Dados_Benef(ByVal objNF As ClassNFiscal) As Long

Dim lErro As Long
Dim alComando(1 To 6) As Long
Dim iIndice As Integer, dQtdeRem As Double
Dim lNumIntItemNFDevRem As Long, dSaldoADevolver As Double
Dim dQtdeDevItemOP As Double

On Error GoTo Erro_NFiscalDev_Exclui_Dados_Benef

    'Executa a abertura do Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 209939
    Next
    
    'Le as remessas associadas a essa devolução
    lErro = Comando_ExecutarPos(alComando(1), "SELECT NumIntItemNFRem, Quantidade FROM ItensNFDevBenefRem WHERE NumIntItemNFDev IN (SELECT NumIntDoc FROM ItensNFiscal WHERE NumIntNF = ?) ", 0, lNumIntItemNFDevRem, dQtdeRem, objNF.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 209940

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 209941
    
    Do While lErro <> AD_SQL_SEM_DADOS
    
        lErro = Comando_LockExclusive(alComando(1))
        If lErro <> SUCESSO Then gError 209942
        
        'Paraca cada remessa acertar o saldo a devolver
        lErro = Comando_ExecutarPos(alComando(3), "SELECT SaldoADevolver FROM ItensNFRemBenef WHERE NumIntItemNF =? ", 0, dSaldoADevolver, lNumIntItemNFDevRem)
        If lErro <> AD_SQL_SUCESSO Then gError 209943
    
        'Busca Primeiro
        lErro = Comando_BuscarPrimeiro(alComando(3))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 209944
    
        If lErro = AD_SQL_SEM_DADOS Then gError 209945
    
        lErro = Comando_LockExclusive(alComando(3))
        If lErro <> SUCESSO Then gError 209946
        
        lErro = Comando_ExecutarPos(alComando(4), "UPDATE ItensNFRemBenef SET SaldoADevolver = SaldoADevolver + ? ", alComando(3), dQtdeRem)
        If lErro <> AD_SQL_SUCESSO Then gError 209947
        
        'Apaga a associação
        lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM ItensNFDevBenefRem ", alComando(1))
        If lErro <> AD_SQL_SUCESSO Then gError 209948
    
        'Busca Próximo
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 209949
    
    Loop
    
    'Le os consumos que foram utilizados para cálculo da devolução
    lErro = Comando_ExecutarPos(alComando(5), "SELECT QuantDev FROM ItensNFDevBenefItemOP WHERE NumIntItemNFDev IN (SELECT NumIntDoc FROM ItensNFiscal WHERE NumIntNF = ?) ", 0, dQtdeDevItemOP, objNF.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 209950

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(5))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 209951
    
    Do While lErro <> AD_SQL_SEM_DADOS
    
        lErro = Comando_LockExclusive(alComando(5))
        If lErro <> SUCESSO Then gError 209952
        
        'Apaga a associação
        lErro = Comando_ExecutarPos(alComando(6), "DELETE FROM ItensNFDevBenefItemOP ", alComando(5))
        If lErro <> AD_SQL_SUCESSO Then gError 209953
    
        'Busca Próximo
        lErro = Comando_BuscarProximo(alComando(5))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 209954
    
    Loop
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    NFiscalDev_Exclui_Dados_Benef = SUCESSO

    Exit Function

Erro_NFiscalDev_Exclui_Dados_Benef:

    NFiscalDev_Exclui_Dados_Benef = gErr

    Select Case gErr

        Case 209939
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 209940, 209941, 209949
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITEMNFDEVBENEFREM", gErr)
            
        Case 209942
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_ITEMNFDEVBENEFREM", gErr)
        
        Case 209943, 209944
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITEMNFREMBENEF", gErr)
        
        Case 209945
            Call Rotina_Erro(vbOKOnly, "ERRO_ITEMNFREMBENEF_NAO_CADASTRADO", gErr, lNumIntItemNFDevRem)
        
        Case 209946
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_ITEMNFREMBENEF", gErr)
        
        Case 209947
            Call Rotina_Erro(vbOKOnly, "ERRO_UPDATE_ITEMNFREMBENEF", gErr)
                
        Case 209948
            Call Rotina_Erro(vbOKOnly, "ERRO_DELETE_ITEMNFDEVBENEFREM", gErr)
            
        Case 209950, 209951, 209954
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITEMNFDEVBENEFITEMOP", gErr)
            
        Case 209952
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_ITEMNFDEVBENEFITEMOP", gErr)

        Case 209953
            Call Rotina_Erro(vbOKOnly, "ERRO_DELETE_ITEMNFDEVBENEFITEMOP", gErr)
                
        Case ERRO_SEM_MENSAGEM

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 209955)

    End Select
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function NFiscal_Valida_EntregaTerc(ByVal objNF As ClassNFiscal, ByVal lCmd_P1 As Long, ByVal lCmd_P2 As Long) As Long

Dim lErro As Long
Dim objItemNF As ClassItemNF
Dim objProduto As ClassProduto, dQtdeUMNF As Double, dFator As Double
Dim objEstTerc As ClassEstoqueTerc, vbMsgResult As VbMsgBoxResult
Dim dQtdeReservUMNF As Double, dQtdeReserv As Double

On Error GoTo Erro_NFiscal_Valida_EntregaTerc

    If objNF.iTipoNFiscal = DOCINFO_NFIFVETPV Or objNF.iTipoNFiscal = DOCINFO_NFISRETPV Then
    
        For Each objItemNF In objNF.colItens
        
            Set objEstTerc = New ClassEstoqueTerc
            Set objProduto = New ClassProduto
            
            objEstTerc.dtData = objNF.dtDataEmissao
            objEstTerc.iEscaninho = ESCANINHO_OUTROS_NOSSO
            objEstTerc.iFilialEmpresa = objNF.iFilialEmpresa
            objEstTerc.iFilial = objNF.iFilialFornEntTerc
            objEstTerc.iTipoCliForn = TIPO_TERC_FORNECEDOR
            objEstTerc.lCliForn = objNF.lFornEntTerc
            objEstTerc.sProduto = objItemNF.sProduto
        
            lErro = CF("EstoqueTerc_Le_Saldo", objEstTerc, lCmd_P1, lCmd_P2)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
            
            objProduto.sCodigo = objItemNF.sProduto
            
            'ler dados do produto
            lErro = CF("Produto_Le", objProduto)
            If lErro <> SUCESSO And lErro <> 28030 Then gError ERRO_SEM_MENSAGEM
        
            lErro = CF("UM_Conversao", objProduto.iClasseUM, objProduto.sSiglaUMEstoque, objItemNF.sUnidadeMed, dFator)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
            
            dQtdeUMNF = objEstTerc.dQuantidade * dFator
            
            lErro = CF("EstoqueTerc_Le_Reserva", objNF, objEstTerc, objProduto, dQtdeReserv)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
            
            dQtdeReservUMNF = dQtdeReserv * dFator
            
            If dQtdeUMNF - objItemNF.dQuantidade - dQtdeReservUMNF < -QTDE_ESTOQUE_DELTA Then
                vbMsgResult = Rotina_Aviso(vbYesNo, "AVISO_FALTA_ESTOQUE_NO_TERC", objItemNF.sProduto, Formata_Estoque(dQtdeUMNF), Formata_Estoque(dQtdeReservUMNF), objItemNF.sUnidadeMed)
                If vbMsgResult = vbNo Then gError ERRO_SEM_MENSAGEM
            End If
                
        Next
    
    End If

    NFiscal_Valida_EntregaTerc = SUCESSO
    
    Exit Function
    
Erro_NFiscal_Valida_EntregaTerc:
    
    NFiscal_Valida_EntregaTerc = gErr
    
    Select Case gErr
    
        Case ERRO_SEM_MENSAGEM
 
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 208231)
            
    End Select
    
    Exit Function
    
End Function

Public Function NFiscal_Valida_Canc(ByVal objNF As ClassNFiscal) As Long

Dim lErro As Long
'Dim iIndice As Integer
'Dim alComando(0 To 5) As Long
'Dim dtDataCanc As Date, dHoraCanc As Double
'Dim dtDataAuto As Date, dHoraAuto As Double
'Dim dTempoDecorrido As Double, dPrazoMaximo As Double
'Dim sConteudo As String, lNumIntNF As Long

On Error GoTo Erro_NFiscal_Valida_Canc

''    'Abertura de Comando
''    For iIndice = LBound(alComando) To UBound(alComando)
''        alComando(iIndice) = Comando_Abrir()
''        If alComando(iIndice) = 0 Then gError 211143
''    Next
    
    If ISSerieEletronica(objNF.sSerie) Then
    
''        If objNF.iFilialEmpresa > 50 Then
''            lNumIntNF = objNF.lNumIntDoc - 1
''        Else
''            lNumIntNF = objNF.lNumIntDoc
''        End If
        
''        lErro = Comando_Executar(alComando(1), "SELECT Data, Hora FROM NFEFedRetCancNFe WHERE NumIntNF = ? AND cStat IN ('101', '151') ", dtDataCanc, dHoraCanc, lNumIntNF)
''        If lErro <> AD_SQL_SUCESSO Then gError 211144
''
''        lErro = Comando_BuscarPrimeiro(alComando(1))
''        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211145
''
''        'Se o cancelamento ainda não está homologado
''        If lErro <> AD_SQL_SUCESSO Then
''
''            lErro = Comando_Executar(alComando(2), "SELECT Data, Hora FROM NFEFedProtNFe WHERE NumIntNF = ? AND cStat = '100' ", dtDataAuto, dHoraAuto, lNumIntNF)
''            If lErro <> AD_SQL_SUCESSO Then gError 211146
''
''            lErro = Comando_BuscarPrimeiro(alComando(2))
''            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211147
''
''            If lErro <> SUCESSO Then gError 211148 'NF não autorizada ainda
''
''            lErro = CF("CRFatConfig_Le", "NFE_PRAZO_MAX_CANC", 0, sConteudo)
''            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
''
''            dPrazoMaximo = StrParaDbl(sConteudo)
''
'''            'TESTE
'''            dtDataAuto = #12/27/2011#
'''            dHoraAuto = CDbl(#11:24:00 AM#)
''
''            dTempoDecorrido = DateDiff("d", dtDataAuto, Date) - (dHoraAuto - CDbl(Time))
''            dTempoDecorrido = dTempoDecorrido * 24 'Transforma dias em horas
''
''            If dTempoDecorrido > dPrazoMaximo Then gError 211149 'Cancelamento fora do prazo
''
''        End If
        
        lErro = CF("Usuario_Configura_Aviso_NFe", gsUsuario, USUCONFIG_AVISO_CANC_NFE_SEM_HOM)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        
        lErro = CF("Usuario_Configura_Aviso_NFe", gsUsuario, USUCONFIG_AVISO_CANC_NFE_HOM)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        
    End If
    
''    'Fecha Comando
''    For iIndice = LBound(alComando) To UBound(alComando)
''        Call Comando_Fechar(alComando(iIndice))
''    Next
        
    NFiscal_Valida_Canc = SUCESSO
    
    Exit Function
    
Erro_NFiscal_Valida_Canc:
    
    NFiscal_Valida_Canc = gErr
    
    Select Case gErr

'        Case 211143
'            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
'
'        Case 211144, 211145
'            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFEFEDRETCANCNFE", gErr)
'
'        Case 211146, 211147
'            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFEFEDPROTNFE", gErr)
'
'        Case 211148
'            Call Rotina_Erro(vbOKOnly, "ERRO_CANCNFE_NAO_AUTORIZADA", gErr)
'
'        Case 211149
'            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_NAO_PODE_SER_CANCELADA", gErr, dPrazoMaximo)
        
        Case ERRO_SEM_MENSAGEM
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 211150)
            
    End Select
    
'    'Fecha Comando
'    For iIndice = LBound(alComando) To UBound(alComando)
'        Call Comando_Fechar(alComando(iIndice))
'    Next
    
    Exit Function

End Function

Public Function NFe_Valida_Envio_Cust(ByVal objNFeFedLote As ClassNFeFedLote) As Long
    NFe_Valida_Envio_Cust = SUCESSO
End Function

Function NotaFiscalSaida_Cancelar_EmTrans1(ByVal objNFiscal As ClassNFiscal, ByVal dtDataCancelamento As Date) As Long
'Faz o cancelamento de uma nota fiscal de Saida

Dim lErro As Long

On Error GoTo Erro_NotaFiscalSaida_Cancelar_EmTrans1
    
    lErro = CF("NotaFiscalSaida_Cancelar_EmTrans", objNFiscal, dtDataCancelamento)
    If lErro <> SUCESSO Then gError 210480
    
    NotaFiscalSaida_Cancelar_EmTrans1 = SUCESSO

    Exit Function

Erro_NotaFiscalSaida_Cancelar_EmTrans1:

    NotaFiscalSaida_Cancelar_EmTrans1 = gErr

    Select Case gErr

        Case 210480
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 210481)

    End Select

    Exit Function

End Function

Public Function RelPrecoGrupo_Prepara(lNumIntRel As Long, ByVal objTabelaPrecoGrupo As ClassTabelaPrecoGrupo) As Long

Dim lErro As Long
Dim iIndice As Integer
Dim lTransacao As Long, iSeq As Integer
Dim alComando(0 To 1) As Long
Dim objItem As ClassTabelaPrecoGrupoItem
Dim objItemAux As ClassTabelaPrecoGrupoItem
Dim colItens As New Collection, bAchou As Boolean

On Error GoTo Erro_RelPrecoGrupo_Prepara

    'Abrir transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 211455

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 211456
    Next

    'Obter NumIntRel
    lErro = CF("Config_ObterNumInt", "FATConfig", "NUMINTREL_PRECOGRUPO", lNumIntRel)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    lErro = CF("TabelaPrecoGrupo_Le", objTabelaPrecoGrupo)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    For Each objItem In objTabelaPrecoGrupo.colItens

        bAchou = False
        If objItem.iAnaliticoComGrade = MARCADO And gobjCRFAT.iSeparaItensGradePrecoDif = MARCADO Then
            For Each objItemAux In colItens
                'Se tem um produto pai
                If Not (objItemAux.objProdutoPai Is Nothing) Then
                    'Se são filhos do mesmo pai
                    If objItemAux.objProdutoPai.sCodigo = objItem.objProdutoPai.sCodigo Then
                        'Se tem o mesmo preço e mesma descrição de agrupamento
                        If Abs(objItemAux.dPrecoAtual - objItem.dPrecoAtual) < DELTA_VALORMONETARIO2 And UCase(objItemAux.sTextoGrade) = UCase(objItem.sTextoGrade) Then
                            'Força a descrição genérica e o código do pai
                            objItemAux.sDescricao = objItemAux.objProdutoPai.sDescricao
                            objItemAux.sProduto = objItemAux.objProdutoPai.sCodigo
                            objItemAux.iGradeKitVenda = MARCADO
                            bAchou = True
                            Exit For
                        End If
                    End If
                End If
            Next
        End If
        If Not bAchou Then
            colItens.Add objItem
        End If

    Next

    iSeq = 0
    For Each objItem In colItens
        iSeq = iSeq + 1
        lErro = Comando_Executar(alComando(1), "INSERT INTO RelPrecoGrupo (NumIntRel, Seq, Produto, Descricao, TextoGrade, UM, Preco, GradeKit ) VALUES (?,?,?,?,?,?,?,?) ", _
        lNumIntRel, iSeq, objItem.sProduto, objItem.sDescricao, objItem.sTextoGrade, objItem.sUM, objItem.dPrecoAtual, objItem.iGradeKitVenda)
        If lErro <> AD_SQL_SUCESSO Then gError 211457

    Next

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    'Fechar transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 211458

    RelPrecoGrupo_Prepara = SUCESSO

    Exit Function

Erro_RelPrecoGrupo_Prepara:

    RelPrecoGrupo_Prepara = gErr

    Select Case gErr

        Case 211455
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 211456
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 211457
            Call Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_RELPRECOGRUPO", gErr)

        Case 211458
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case ERRO_SEM_MENSAGEM

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 211459)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Call Transacao_Rollback

    Exit Function

End Function

Function CCE_Enviar(ByVal objCCE As ClassCartaCorrecao) As Long

Dim lErro As Long, lNumIntCCE As Long, iSeq As Integer, lidLote As Long
Dim iIndice As Integer
Dim lTransacao As Long, iNovoSeq As Integer
Dim alComando(1 To 4) As Long

On Error GoTo Erro_CCE_Enviar

    'Abrir transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 201229

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 201230
    Next

    iNovoSeq = 1
    
    'obter carta de correcao com maior sequencial para esta nf
    lErro = Comando_ExecutarPos(alComando(1), "SELECT NumIntDoc, nSeqEvento FROM CCE WHERE chNFe = ? ORDER BY nSeqEvento DESC", 0, lNumIntCCE, iSeq, objCCE.schNFe)
    If lErro <> AD_SQL_SUCESSO Then gError 201235
    
    lErro = Comando_BuscarProximo(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 201236
    
    'se houver
    If lErro = AD_SQL_SUCESSO Then
    
        If objCCE.inSeqEvento <> 0 And objCCE.inSeqEvento <> iSeq Then gError 201237
    
        If objCCE.inSeqEvento = 0 Then
        
            iNovoSeq = iSeq + 1
        
        Else
        
            'verificar se já foi homologada
            lErro = Comando_Executar(alComando(2), "SELECT idLote FROM NFeFedRetEnvCCe WHERE chNFe = ? AND nSeqEvento = ? AND cStat IN ('135', '136')", _
                lidLote, objCCE.schNFe, iSeq)
            If lErro <> AD_SQL_SUCESSO Then gError 201238
            
            lErro = Comando_BuscarProximo(alComando(2))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 201239
            
            If lErro = AD_SQL_SUCESSO Then
            
                'dar erro de já homologado
                gError 201240
                    
            Else
            
                'dar erro de já rejeitada
                gError 201243
                    
            End If
                
        End If
        
    End If
        
    'incluir evento de correcao
    
    lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_INT_PROX_CCE", lNumIntCCE)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    objCCE.lNumIntDoc = lNumIntCCE
    objCCE.inSeqEvento = iNovoSeq
    
    lErro = Comando_Executar(alComando(3), "INSERT INTO CCE (NumIntDoc, Correcao, chNFe, nSeqEvento) VALUES (?,?,?,?)", _
        lNumIntCCE, objCCE.sCorrecao, objCCE.schNFe, iNovoSeq)
    If lErro <> AD_SQL_SUCESSO Then gError 201231
        
    'obter lote
    lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_PROX_LOTE_CCE", lidLote)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    objCCE.lidLote = lidLote
    
    'gravar registro de lote
    lErro = Comando_Executar(alComando(4), "INSERT INTO NFeFedLoteCce (FilialEmpresa, idLote, NumIntCce) VALUES (?,?,?)", _
        objCCE.iFilialEmpresa, objCCE.lidLote, objCCE.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 201233
        
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    'Fechar transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 201234
    
    CCE_Enviar = SUCESSO
    
    Exit Function
    
Erro_CCE_Enviar:

    CCE_Enviar = gErr

    Select Case gErr

        Case 201229
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 201230
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 201231
            Call Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_CCE", gErr)

        Case 201232
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_CCE", gErr)

        Case 201233
            Call Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_LOTECCE", gErr)

        Case 201234
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case 201235, 201236, 201238, 201239
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CCE", gErr)

        Case 201237
            Call Rotina_Erro(vbOKOnly, "ERRO_ENVIO_CCE_VELHO", gErr)
        
        Case 201240
            Call Rotina_Erro(vbOKOnly, "ERRO_ENVIO_CCE_HOMOLOGADA", gErr)
        
        Case 201243
            Call Rotina_Erro(vbOKOnly, "ERRO_ENVIO_CCE_REJEITADA", gErr)
        
        Case ERRO_SEM_MENSAGEM
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 201228)

    End Select
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Call Transacao_Rollback
    
    Exit Function

End Function

Function RelVendEstProd_Prepara(lNumIntRel As Long, ByVal iFilialEmpresa As Integer, ByVal dtDataDe As Date, ByVal dtDataAte As Date, Optional ByVal iIncluiDev As Integer = MARCADO) As Long

Dim lErro As Long
Dim iIndice As Integer
Dim lTransacao As Long
Dim alComando(0 To 10) As Long
Dim lSeq As Long, sSQL As String, sSQLAux As String, sFiltro As String
Dim sUnidadeMed As String, sUMEst As String, sProduto As String, sDescProd As String, sProdutoGrade As String
Dim dFator As Double, dQtdFatItem As Double, dQtdDevItem As Double, dVlrFatItem As Double, dVlrDevItem As Double
Dim dQtdVend As Double, dVlrVend As Double, dQuantidadeGrade As Double, sGrupo As String
Dim lNumNFiscal As Long, lNumIntItemNF As Long, dQuantidade As Double, dPrecoUnitario As Double
Dim dDescontoItem As Double, iFaturamento As Integer, iClasseUM As Integer, iTipoDocInfo As Integer, iKitVenda As Integer
Dim iGerencial As Integer, lNumIntItemNFGrade As Long, dPeso As Double, dQtdeProd As Double, dQuantEst As Double, dValorEst As Double

On Error GoTo Erro_RelVendEstProd_Prepara

    'Abrir transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 211545

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 211546
    Next
       
    'Obter NumIntRel
    lErro = CF("Config_ObterNumInt", "FATConfig", "NUMINTREL_RELVENDESTPROD", lNumIntRel)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    'Leitura dos itens de NF (Venda e Devolução)
    sSQL = "SELECT N.NumNotaFiscal, I.NumIntDoc, I.Quantidade, I.PrecoUnitario, I.ValorDesconto, "
    sSQL = sSQL & "T.Faturamento , I.UnidadeMed, P.SiglaUMEstoque, P.ClasseUM, T.Codigo, P.Gerencial, I.Produto, P.KitVendaComp "
    sSQL = sSQL & "FROM TiposDocInfo AS T, ItensNFiscal As I, NFiscal As N, Produtos As P "
    sSQL = sSQL & "WHERE N.NumIntDoc = I.NumIntNF AND T.Codigo = N.TipoNFiscal AND "
    sSQL = sSQL & "(T.Faturamento IN (1, 2)) AND I.Produto = P.Codigo AND N.Status <> 7  AND "
    sSQL = sSQL & "(T.Complementar = 0 OR T.Codigo IN (?,?)) AND N.DataEmissao BETWEEN ? AND ?  "

    sUnidadeMed = String(STRING_UM_SIGLA, 0)
    sUMEst = String(STRING_UM_SIGLA, 0)
    sProduto = String(STRING_PRODUTO, 0)
    
    If iFilialEmpresa = EMPRESA_TODA Then
        lErro = CF("FilialEmpresa_Le_Filtro", sFiltro)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

        lErro = Comando_Executar(alComando(1), sSQL & sFiltro, _
        lNumNFiscal, lNumIntItemNF, dQuantidade, dPrecoUnitario, dDescontoItem, iFaturamento, sUnidadeMed, sUMEst, iClasseUM, iTipoDocInfo, iGerencial, sProduto, iKitVenda, DOCINFO_NFISCP, DOCINFO_NFISFCP, dtDataDe, dtDataAte)
    Else
        lErro = Comando_Executar(alComando(1), sSQL & " AND N.FilialEmpresa = ? ", _
        lNumNFiscal, lNumIntItemNF, dQuantidade, dPrecoUnitario, dDescontoItem, iFaturamento, sUnidadeMed, sUMEst, iClasseUM, iTipoDocInfo, iGerencial, sProduto, iKitVenda, DOCINFO_NFISCP, DOCINFO_NFISFCP, dtDataDe, dtDataAte, iFilialEmpresa)
    End If
    If lErro <> AD_SQL_SUCESSO Then gError 211547
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211548

    Do While lErro = AD_SQL_SUCESSO
           
        lErro = CF("UM_Conversao", iClasseUM, sUnidadeMed, sUMEst, dFator)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

        If iGerencial = PRODUTO_GERENCIAL And iKitVenda = DESMARCADO Then

            sProdutoGrade = String(STRING_PRODUTO, 0)

            'Le os itens de Grade
            lErro = Comando_Executar(alComando(2), "SELECT I.NumIntDoc, I.Produto, I.Quantidade FROM ItensNFiscalGrade AS I, Produtos as P WHERE I.Produto = P.Codigo AND I.NumIntItemNF = ?", _
            lNumIntItemNFGrade, sProdutoGrade, dQuantidadeGrade, lNumIntItemNF)
            If lErro <> AD_SQL_SUCESSO Then gError 211549

            lErro = Comando_BuscarPrimeiro(alComando(2))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211550
        
            Do While lErro = AD_SQL_SUCESSO
            
                dVlrFatItem = 0
                dQtdFatItem = 0
                dVlrDevItem = 0
                dQtdDevItem = 0
                'Faturada
                If iFaturamento = 1 Then
                    dVlrFatItem = Arredonda_Moeda((dQuantidadeGrade * dPrecoUnitario) - (dDescontoItem / dQuantidade) * dQuantidadeGrade)
                    If iTipoDocInfo <> DOCINFO_NFISCP And iTipoDocInfo <> DOCINFO_NFISFCP Then
                        dQtdFatItem = dQuantidadeGrade * dFator
                    End If
                Else
                    dVlrDevItem = Arredonda_Moeda((dQuantidadeGrade * dPrecoUnitario) - (dDescontoItem / dQuantidade) * dQuantidadeGrade)
                    dQtdDevItem = dQuantidadeGrade * dFator
                End If
                            
                'Gravar na tabela de detalhamento
                lErro = Comando_Executar(alComando(3), "INSERT INTO RelVendEstProdAux (NumIntRel, NumIntItemNF, NumIntItemNFGrade, Produto, QuantidadeFat, QuantidadeDev, ValorFat, ValorDev, UM ) VALUES (?,?,?,?,?,?,?,?,?) ", _
                lNumIntRel, lNumIntItemNF, lNumIntItemNFGrade, sProdutoGrade, dQtdFatItem, dQtdDevItem, dVlrFatItem, dVlrDevItem, sUMEst)
                If lErro <> AD_SQL_SUCESSO Then gError 211551

                lErro = Comando_BuscarProximo(alComando(2))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211552

            Loop

        Else
        
            dVlrFatItem = 0
            dQtdFatItem = 0
            dVlrDevItem = 0
            dQtdDevItem = 0
            'Faturada
            If iFaturamento = 1 Then
                dVlrFatItem = Arredonda_Moeda((dQuantidade * dPrecoUnitario) - dDescontoItem)
                If iTipoDocInfo <> DOCINFO_NFISCP And iTipoDocInfo <> DOCINFO_NFISFCP Then
                    dQtdFatItem = dQuantidade * dFator
                End If
            Else
                dVlrDevItem = Arredonda_Moeda((dQuantidade * dPrecoUnitario) - dDescontoItem)
                dQtdDevItem = dQuantidade * dFator
            End If
        
            'Gravar na tabela de detalhamento
            lErro = Comando_Executar(alComando(3), "INSERT INTO RelVendEstProdAux (NumIntRel, NumIntItemNF, NumIntItemNFGrade, Produto, QuantidadeFat, QuantidadeDev, ValorFat, ValorDev, UM ) VALUES (?,?,?,?,?,?,?,?,?) ", _
            lNumIntRel, lNumIntItemNF, 0, sProduto, dQtdFatItem, dQtdDevItem, dVlrFatItem, dVlrDevItem, sUMEst)
            If lErro <> AD_SQL_SUCESSO Then gError 211553
            
        End If

        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211554

    Loop
    
    sProduto = String(STRING_PRODUTO, 0)
    sUMEst = String(STRING_UM_SIGLA, 0)
    
    If iIncluiDev = MARCADO Then
        sSQLAux = "SUM(QuantidadeFat - QuantidadeDev), SUM(ValorFat - ValorDev) "
    Else
        sSQLAux = "SUM(QuantidadeFat), SUM(ValorFat) "
    End If
    
    'Totaliza os dados por produto e obtém novas informações
    lErro = Comando_Executar(alComando(4), "SELECT Produto, UM, " & sSQLAux & "  FROM RelVendEstProdAux WHERE NumIntRel = ? GROUP BY Produto, UM ", _
    sProduto, sUMEst, dQtdVend, dVlrVend, lNumIntRel)
    If lErro <> AD_SQL_SUCESSO Then gError 211555
    
    lErro = Comando_BuscarPrimeiro(alComando(4))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211556

    Do While lErro = AD_SQL_SUCESSO
        
        'Le o Grupo
        sGrupo = String(STRING_CATEGORIAPRODUTOITEM_ITEM, 0)
        
        lErro = Comando_Executar(alComando(5), "SELECT Item FROM ProdutoCategoria WHERE Produto = ? AND Categoria = ? ", _
        sGrupo, sProduto, "Grupo")
        If lErro <> AD_SQL_SUCESSO Then gError 211557
        
        lErro = Comando_BuscarPrimeiro(alComando(5))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211558
       
        'Le a descrição e peso
        sDescProd = String(STRING_PRODUTO_DESCRICAO, 0)
        
        lErro = Comando_Executar(alComando(6), "SELECT NomeReduzido, PesoLiq FROM Produtos WHERE Codigo = ? ", _
        sDescProd, dPeso, sProduto)
        If lErro <> AD_SQL_SUCESSO Then gError 211559
        
        lErro = Comando_BuscarPrimeiro(alComando(6))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211560
    
        'Le o estoque
        lErro = CF("Produto_ObterRelQtdSldIniFil", sProduto, iFilialEmpresa, DateAdd("d", 1, dtDataAte), DateAdd("d", 1, dtDataAte), dQuantEst, dValorEst, 0, 0, 0)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        
        'Le a Produção
        lErro = Comando_Executar(alComando(7), "SELECT SUM(Quantidade) FROM MovimentoEstoque AS M WHERE M.FilialEmpresa = ? AND M.Produto = ? AND M.TipoMov = 7 AND Data BETWEEN ? AND ? ", _
                                                dQtdeProd, iFilialEmpresa, sProduto, dtDataDe, dtDataAte)
        If lErro <> AD_SQL_SUCESSO Then gError 211561
        
        lErro = Comando_BuscarPrimeiro(alComando(7))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211562
        
        lErro = Comando_Executar(alComando(8), "INSERT INTO RelVendEstProd (NumIntRel, Produto, DescProd, Grupo, VlrVend, QtdeVend, Peso, QtdeEst, QtdeProd) VALUES (?,?,?,?,?,?,?,?,?) ", _
            lNumIntRel, sProduto, sDescProd, sGrupo, dVlrVend, dQtdVend, dPeso, dQuantEst, dQtdeProd)
        If lErro <> AD_SQL_SUCESSO Then gError 211563
    
        lErro = Comando_BuscarProximo(alComando(4))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211564
    
    Loop

    'Gravar o cabeçalho
    lErro = Comando_Executar(alComando(9), "INSERT INTO RelVendEstProdCab (NumIntRel, FilialEmpresa, DataDe, DataAte, DataGer, HoraGer, IncluiDev) VALUES (?,?,?,?,?,?,?) ", _
    lNumIntRel, iFilialEmpresa, dtDataDe, dtDataAte, Date, CDbl(Time), iIncluiDev)
    If lErro <> AD_SQL_SUCESSO Then gError 211565
    
    'Gravar o cabeçalho
    lErro = Comando_Executar(alComando(10), "DELETE FROM RelVendEstProdAux WHERE NumIntRel = ?", lNumIntRel)
    If lErro <> AD_SQL_SUCESSO Then gError 211566
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    'Fechar transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 211567

    RelVendEstProd_Prepara = SUCESSO

    Exit Function

Erro_RelVendEstProd_Prepara:

    RelVendEstProd_Prepara = gErr

    Select Case gErr

        Case 211545
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 211546
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 211547, 211548, 211554
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL", gErr)

        Case 211549, 211550, 211552
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSNFISCALGRADE", gErr)

        Case 211551, 211553
            Call Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_RELVENDESTPRODAUX", gErr)

        Case 211555, 211556, 211564
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RELVENDESTPRODAUX", gErr)

        Case 211557, 211558
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOCATEGORIA", gErr)
                        
        Case 211559, 211560
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTO", gErr)
                        
        Case 211561, 211562
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOESTOQUE", gErr)
                        
        Case 211563
            Call Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_RELVENDESTPROD", gErr)
                        
        Case 211565
            Call Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_RELVENDESTPRODCAB", gErr)
                        
        Case 211566
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_RELVENDESTPRODAUX", gErr)
                        
        Case 211567
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
                        
        Case ERRO_SEM_MENSAGEM
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 211568)

    End Select
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Call Transacao_Rollback

    Exit Function

End Function

Public Function RelOpFatProdVend_Prepara(ByVal iTipoVend As Integer, ByVal iVendedor As Integer, lNumIntRel As Long) As Long

Dim lErro As Long
Dim iIndice As Integer
Dim lTransacao As Long
Dim alComando(0 To 1) As Long
Dim objVendedor As ClassVendedor
Dim colVendedores As New Collection

On Error GoTo Erro_RelOpFatProdVend_Prepara

    'Abrir transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 211571

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 211572
    Next

    'Obter NumIntRel
    lErro = CF("Config_ObterNumInt", "FATConfig", "NUMINTREL_FATPRODVEND", lNumIntRel)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    If iVendedor = 0 Then
        lErro = CF("Vendedor_Le_Todos", colVendedores)
        If lErro <> SUCESSO And lErro <> 104287 Then gError ERRO_SEM_MENSAGEM
    Else
        If iTipoVend = VENDEDOR_DIRETO Then
            Set objVendedor = New ClassVendedor
            objVendedor.iCodigo = iVendedor
            colVendedores.Add objVendedor
        Else
            lErro = CF("Vendedor_Le_Hierarquia", iVendedor, colVendedores, 0)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        End If
    End If

    For Each objVendedor In colVendedores
        lErro = Comando_Executar(alComando(1), "INSERT INTO RelFatProdVend (NumIntRel, Vendedor) VALUES (?,?)", lNumIntRel, objVendedor.iCodigo)
        If lErro <> AD_SQL_SUCESSO Then gError 211573
    Next

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    'Fechar transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 211574

    RelOpFatProdVend_Prepara = SUCESSO

    Exit Function

Erro_RelOpFatProdVend_Prepara:

    RelOpFatProdVend_Prepara = gErr

    Select Case gErr

        Case 211571
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 211572
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 211573
            Call Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_RELFATPRODVEND", gErr)

        Case 211574
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case ERRO_SEM_MENSAGEM

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 211575)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Call Transacao_Rollback

    Exit Function

End Function

Public Function RelCustoVenda_Prepara(ByVal objRelCustoVenda As ClassRelCustoVenda) As Long
'revisar o que já foi feito
'colocar filtro por cliente/produto nos comandos sql - Feito
'considerar frete, seguro, outras desp, desconto,... - Feito
'tratar kit de venda e grade - Feito
'incluir notas complementares com detalhamento de valores a incorporar de preços e tributos
'tratar notas de faturamento antecipado e outras em que a movimentacao de estoque nao esteja ligada à propria nota
'tratar devoluções de venda
'incluir nos tsks calculo de margem comparando o preco liquido com o custo
'incluir SimplesVenda em RelCustoVendaItemNFAux calculadndo-o usando a aliquota do mes da emissao da nf e soma-lo no campo outros tributos nos tsks
'incluir calculo de custos de importacao de acordo com di e notas de despesas de importacao ?
'tratar beneficiamento para 3os, em particular nao considerar venda os materiais recebidos para industrializacao que estiverem saindo por devolucao simbolica

Dim lErro As Long, lNumIntRel As Long
Dim iIndice As Integer, dFator As Double
Dim lTransacao As Long, lCliente As Long, dComissaoNF As Double
Dim alComando(0 To 7) As Long, lNumIntNF As Long, iTipoNFiscal As Integer
Dim lNumIntItemNF As Long, dCusto As Double, dQtdeUMEstoque As Double, sSiglaUMEstoque As String
Dim dPrecoUnitEstoque As Double, dDescontoUnitEstoque As Double, dICMSVenda As Double, dIPIVenda As Double, dPISVenda As Double, dCOFINSVenda As Double, dISSVenda As Double
Dim dICMSSTVenda As Double, dCustoImportacaoDI As Double, dCustoImportacaoDesp As Double, dINSSVenda As Double, dIRVenda As Double, dCSSLVenda As Double, dFreteVenda As Double
Dim dSeguroVenda As Double, dOutrasDespVenda As Double
Dim sProduto As String, dQtde As Double, sUM As String, dPrecoUnit As Double, dValorDesconto As Double, iClasseUM As Integer
Dim dINSSVendaRatItem As Double, dIRVendaRatItem As Double, dCSSLVendaRatItem As Double, dValorTotalProd As Double, dValorTotalDesc As Double
Dim sSQL As String, sGrade As String, iKitVenda As Integer, dCustoItemGrade As Double
Dim lNumIntItemNFGrade As Long, sProdGrade As String, iTipoNFCmpl As Integer
Dim dQuantCmpl As Double, dPrecoUnitCmpl As Double, dICMSValorCmpl As Double, dICMSSTValorCmpl As Double, dIPIValorCmpl As Double

On Error GoTo Erro_RelCustoVenda_Prepara

    'Abrir transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 211571

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 211572
    Next
    
    'Obter NumIntRel
    lErro = CF("Config_ObterNumInt", "FATConfig", "NUMINTREL_CUSTOVENDA", lNumIntRel)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    objRelCustoVenda.lNumIntRel = lNumIntRel

    lErro = RelCustoVenda_PreparaSQL(objRelCustoVenda, sSQL)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    lErro = RelCustoVenda_PreparaInt(alComando(0), sSQL, objRelCustoVenda.iFilialEmpresa, objRelCustoVenda.dtDataDe, objRelCustoVenda.dtDataAte, objRelCustoVenda.lClienteDe, objRelCustoVenda.lClienteAte, lNumIntNF, iTipoNFiscal, lCliente, dINSSVenda, dIRVenda, dCSSLVenda, dValorTotalProd, dValorTotalDesc)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    lErro = Comando_BuscarProximo(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 201458
    
    Do While lErro <> AD_SQL_SEM_DADOS
   
        sProduto = String(STRING_PRODUTO, 0)
        sGrade = String(STRING_GRADE_CODIGO, 0)
        sUM = String(STRING_UM_SIGLA, 0)
        sSiglaUMEstoque = String(STRING_UM_SIGLA, 0)
        
        lErro = RelCustoVendaItem_PreparaSQL(objRelCustoVenda, sSQL)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
        lErro = RelCustoVendaItem_PreparaInt(alComando(1), sSQL, TIPODOC_TRIB_NF, lNumIntNF, objRelCustoVenda.sProdutoDe, objRelCustoVenda.sProdutoAte, lNumIntItemNF, sProduto, dQtde, sUM, dPrecoUnit, dValorDesconto, iClasseUM, sSiglaUMEstoque, dICMSVenda, dICMSSTVenda, dIPIVenda, dPISVenda, dCOFINSVenda, dISSVenda, dFreteVenda, dSeguroVenda, dOutrasDespVenda, sGrade, iKitVenda)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 201460
        
        Do While lErro <> AD_SQL_SEM_DADOS
        
            If Abs(dValorTotalProd + dValorTotalDesc) > DELTA_VALORMONETARIO Then
        
                'Rateia os tributos a nível de documento considerando o valor dos produtos sem o desconto
                dINSSVendaRatItem = Arredonda_Moeda(dINSSVenda * (dPrecoUnit * dQtde) / (dValorTotalProd + dValorTotalDesc))
                dIRVendaRatItem = Arredonda_Moeda(dIRVenda * (dPrecoUnit * dQtde) / (dValorTotalProd + dValorTotalDesc))
                dCSSLVendaRatItem = Arredonda_Moeda(dCSSLVenda * (dPrecoUnit * dQtde) / (dValorTotalProd + dValorTotalDesc))

            Else
            
                dINSSVendaRatItem = 0
                dIRVendaRatItem = 0
                dCSSLVendaRatItem = 0
                
            End If

            'Notas complementares
            lErro = Comando_Executar(alComando(7), "SELECT N.TipoNFiscal, I.Quantidade, I.PrecoUnitario, TDI.ICMSValor, TDI.ICMSSubstValor, TDI.IPIValor FROM NFiscal N, ItensNFiscal AS I, TiposDocInfo T, TributacaodocItem AS TDI " & _
                "WHERE N.NumIntDoc = I.NumIntNF AND TDI.TipoDoc = 0 AND TDI.NumIntDocItem = I.NumIntDoc AND N.TipoNFiscal = T.Codigo AND T.Complementar = 1 AND N.Status <> 7 AND NumIntDocOrig = ?", iTipoNFCmpl, dQuantCmpl, dPrecoUnitCmpl, dICMSValorCmpl, dICMSSTValorCmpl, dIPIValorCmpl, lNumIntItemNF)
            If lErro <> AD_SQL_SUCESSO Then gError 201461
            
            lErro = Comando_BuscarPrimeiro(alComando(7))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 201462
            
            Do While lErro <> AD_SQL_SEM_DADOS

                If iTipoNFCmpl = 35 Or iTipoNFCmpl = 55 Then
                    'Complemento de preço
                    dPrecoUnit = dPrecoUnit + dPrecoUnitCmpl
                End If
                
                dICMSVenda = dICMSVenda + dICMSValorCmpl
                dICMSSTVenda = dICMSSTVenda + dICMSValorCmpl
                dIPIVenda = dIPIVenda + dIPIValorCmpl
                
                lErro = Comando_BuscarProximo(alComando(7))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 201462
            
            Loop
            
            If sUM = sSiglaUMEstoque Then
                dQtdeUMEstoque = dQtde
                dPrecoUnitEstoque = dPrecoUnit
            Else
                lErro = CF("UM_Conversao", iClasseUM, sUM, sSiglaUMEstoque, dFator)
                If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
                
                dQtdeUMEstoque = dQtde * dFator
                If dFator <> 0 Then
                    dPrecoUnitEstoque = dPrecoUnit / dFator
                Else
                    dPrecoUnitEstoque = 0
                End If
                
            End If
            
            If Len(Trim(sGrade)) = 0 And iKitVenda = DESMARCADO Then
            
                lErro = Comando_Executar(alComando(4), "SELECT SUM(Custo) FROM MovimentoEstoque WHERE TipoNumIntDocOrigem = ? AND NumIntDocOrigem = ? ", dCusto, MOVEST_TIPONUMINTDOCORIGEM_ITEMNFISCAL, lNumIntItemNF)
                If lErro <> AD_SQL_SUCESSO Then gError 201461
                
                lErro = Comando_BuscarPrimeiro(alComando(4))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 201462
                If lErro <> AD_SQL_SUCESSO Then dCusto = 0
                
            Else
                'Kit de venda e Grade
                dCusto = 0
                sProdGrade = String(STRING_PRODUTO, 0)
            
                lErro = Comando_Executar(alComando(5), "SELECT NumIntDoc, Produto FROM ItensNFiscalGrade WHERE NumIntItemNF = ? ", lNumIntItemNFGrade, sProdGrade, lNumIntItemNF)
                If lErro <> AD_SQL_SUCESSO Then gError 201461
                
                lErro = Comando_BuscarPrimeiro(alComando(5))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 201462
                
                Do While lErro <> AD_SQL_SEM_DADOS
            
                    lErro = Comando_Executar(alComando(4), "SELECT SUM(Custo) FROM MovimentoEstoque WHERE TipoNumIntDocOrigem = ? AND NumIntDocOrigem = ? ", dCustoItemGrade, MOVEST_TIPONUMINTDOCORIGEM_ITEMNFISCALGRADE, lNumIntItemNFGrade)
                    If lErro <> AD_SQL_SUCESSO Then gError 201461
                    
                    lErro = Comando_BuscarPrimeiro(alComando(4))
                    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 201462
                    If lErro <> AD_SQL_SUCESSO Then dCustoItemGrade = 0
                    
                    lErro = Comando_Executar(alComando(6), "INSERT INTO RelCustoVendaItemNFGradeAux ( NumIntRel, NumIntItemNFGrade, Custo ) VALUES (?,?,?)", _
                        lNumIntRel, lNumIntItemNFGrade, dCustoItemGrade)
                    If lErro <> AD_SQL_SUCESSO Then gError 201465
        
                    dCusto = dCusto + dCustoItemGrade
                    
                    lErro = Comando_BuscarProximo(alComando(5))
                    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 201462
                
                Loop
            
            End If
                        
            lErro = Comando_Executar(alComando(3), "INSERT INTO RelCustoVendaItemNFAux (NumIntRel,NumIntItemNF,Custo,QtdeUMEstoque,SiglaUMEstoque," & _
                "PrecoUnitEstoque,DescontoUnitEstoque,ICMSVenda,IPIVenda,PISVenda,COFINSVenda,ISSVenda," & _
                "ICMSSTVenda,CustoImportacaoDI,CustoImportacaoDesp,INSSVenda,IRVenda,CSSLVenda,FreteVenda," & _
                "SeguroVenda,OutrasDespVenda) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                lNumIntRel, lNumIntItemNF, dCusto, dQtdeUMEstoque, sSiglaUMEstoque, _
                dPrecoUnitEstoque, dDescontoUnitEstoque, dICMSVenda, dIPIVenda, dPISVenda, dCOFINSVenda, dISSVenda, _
                dICMSSTVenda, dCustoImportacaoDI, dCustoImportacaoDesp, dINSSVendaRatItem, dIRVendaRatItem, dCSSLVendaRatItem, dFreteVenda, _
                dSeguroVenda, dOutrasDespVenda)
            If lErro <> AD_SQL_SUCESSO Then gError 201463
                
            lErro = Comando_BuscarProximo(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 201464
        
        Loop
        
        lErro = Comando_Executar(alComando(2), "INSERT INTO RelCustoVendaNFAux ( NumIntRel, NumIntNF, Comissao ) VALUES (?,?,?)", _
            lNumIntRel, lNumIntNF, dComissaoNF)
        If lErro <> AD_SQL_SUCESSO Then gError 201465
        
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 201466
    
    Loop
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    'Fechar transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 211574

    RelCustoVenda_Prepara = SUCESSO
    
    Exit Function
    
Erro_RelCustoVenda_Prepara:

    RelCustoVenda_Prepara = gErr

    Select Case gErr

        Case 211571
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 211572
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 211574
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case ERRO_SEM_MENSAGEM

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 201456)

    End Select
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Call Transacao_Rollback

    Exit Function

End Function

Public Function RelCustoVenda_PreparaSQL(ByVal objRelCustoVenda As ClassRelCustoVenda, sSQL As String) As Long

Dim lErro As Long
Dim sWhere As String
Dim sOrderBy As String

On Error GoTo Erro_RelCustoVenda_PreparaSQL

    sSQL = "SELECT N.NumIntDoc, N.TipoNFiscal, N.Cliente, TD.ValorINSS , TD.IRRFValor, TD.CSLLRetido, N.ValorProdutos, N.ValorDesconto FROM NFiscal N, TiposDocInfo T, TributacaoDoc AS TD  "
    sWhere = "WHERE TD.TipoDoc = 0 AND TD.NumIntDoc = N.NumIntDoc AND N.TipoNFiscal = T.Codigo AND T.Faturamento = 1 AND N.Status <> 7 AND N.FilialEmpresa = ?  "
    sOrderBy = "ORDER BY N.NumIntDoc "
        
    If objRelCustoVenda.lClienteDe <> 0 Then
        sWhere = sWhere & "AND N.Cliente >= ? "
    End If
    
    If objRelCustoVenda.lClienteAte <> 0 Then
        sWhere = sWhere & "AND N.Cliente <= ? "
    End If
    
    If objRelCustoVenda.dtDataDe <> DATA_NULA Then
        sWhere = sWhere & "AND N.DataEmissao >= ? "
    End If
    
    If objRelCustoVenda.dtDataAte <> DATA_NULA Then
        sWhere = sWhere & "AND N.DataEmissao <= ? "
    End If
    
    sSQL = sSQL & sWhere & sOrderBy
    
    RelCustoVenda_PreparaSQL = SUCESSO
     
    Exit Function
    
Erro_RelCustoVenda_PreparaSQL:

    RelCustoVenda_PreparaSQL = gErr
     
    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 182073)
     
    End Select
     
    Exit Function

End Function

Private Function RelCustoVenda_PreparaInt(ByVal lComando As Long, ByVal sSQL As String, ByVal viFilialEmpresa As Variant, ByVal vdtDataDe As Variant, ByVal vdtDataAte As Variant, ByVal vlClienteDe As Variant, ByVal vlClienteAte As Variant, vllNumIntNF As Variant, viTipoNFiscal As Variant, vlCliente As Variant, vdINSSVenda As Variant, vdIRVenda As Variant, vdCSSLVenda As Variant, vdValorTotalProd As Variant, vdValorTotalDesc As Variant) As Long

Dim lErro As Long
Dim viStatus As Variant

On Error GoTo Erro_RelCustoVenda_PreparaInt

    lErro = Comando_PrepararInt(lComando, sSQL)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM

    lErro = Comando_BindVarInt(lComando, vllNumIntNF)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM

    lErro = Comando_BindVarInt(lComando, viTipoNFiscal)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, vlCliente)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, vdINSSVenda)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, vdIRVenda)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, vdCSSLVenda)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, vdValorTotalProd)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, vdValorTotalDesc)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, viFilialEmpresa)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    If vlClienteDe <> 0 Then
        lErro = Comando_BindVarInt(lComando, vlClienteDe)
        If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    End If
    
    If vlClienteAte <> 0 Then
        lErro = Comando_BindVarInt(lComando, vlClienteAte)
        If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    End If
       
    If vdtDataDe <> DATA_NULA Then
        lErro = Comando_BindVarInt(lComando, vdtDataDe)
        If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    End If
        
    If vdtDataAte <> DATA_NULA Then
        lErro = Comando_BindVarInt(lComando, vdtDataAte)
        If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    End If
    
    lErro = Comando_ExecutarInt(lComando)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    RelCustoVenda_PreparaInt = SUCESSO
     
    Exit Function
    
Erro_RelCustoVenda_PreparaInt:

    RelCustoVenda_PreparaInt = gErr
     
    Select Case gErr

        Case ERRO_SEM_MENSAGEM
            Call Rotina_Erro(vbOKOnly, "ERRO_PREPARACAO_COMANDO_SQL", gErr, sSQL)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 182084)
     
    End Select
     
    Exit Function

End Function

Public Function RelCustoVendaItem_PreparaSQL(ByVal objRelCustoVenda As ClassRelCustoVenda, sSQL As String) As Long

Dim lErro As Long
Dim sWhere As String
Dim sOrderBy As String

On Error GoTo Erro_RelCustoVendaItem_PreparaSQL

    sSQL = "SELECT INF.NumIntDoc, INF.Produto, INF.Quantidade, INF.UnidadeMed, INF.PrecoUnitario, INF.ValorDesconto, P.ClasseUM, P.SiglaUMEstoque, TDI.ICMSVAlor, TDI.ICMSSubstValor, TDI.IPIValor, TDI.PISValor, TDI.COFINSValor, TDI.ISSValor, TDI.ValorFreteItem, TDI.ValorSeguroItem, TDI.ValorOutrasDespesasItem, P.Grade, P.KitVendaComp FROM ItensNFiscal INF, Produtos P, TributacaodocItem TDI "
    sWhere = "WHERE TDI.TipoDoc = ? AND TDI.NumIntDocItem = INF.NumIntDoc AND INF.Produto = P.Codigo AND INF.NumIntNF = ? "
    sOrderBy = "ORDER BY INF.NumIntDoc "
        
    If objRelCustoVenda.sProdutoDe <> "" Then
        sWhere = sWhere & "AND INF.Produto >= ? "
    End If
    
    If objRelCustoVenda.sProdutoAte <> "" Then
        sWhere = sWhere & "AND INF.Produto <= ? "
    End If
    
    sSQL = sSQL & sWhere & sOrderBy
    
    RelCustoVendaItem_PreparaSQL = SUCESSO
     
    Exit Function
    
Erro_RelCustoVendaItem_PreparaSQL:

    RelCustoVendaItem_PreparaSQL = gErr
     
    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 182073)
     
    End Select
     
    Exit Function

End Function

Private Function RelCustoVendaItem_PreparaInt(ByVal lComando As Long, ByVal sSQL As String, ByVal viTipoDoc As Variant, ByVal vlNumIntNF As Variant, ByVal vsProdutoDe As Variant, ByVal vsProdutoAte As Variant, vlNumIntItemNF As Variant, vsProduto As Variant, vdQtde As Variant, vsUM As Variant, vdPrecoUnit As Variant, vdValorDesconto As Variant, viClasseUM As Variant, vsSiglaUMEstoque As Variant, vdICMSVenda As Variant, vdICMSSTVenda As Variant, vdIPIVenda As Variant, vdPISVenda As Variant, vdCOFINSVenda As Variant, vdISSVenda As Variant, vdFreteVenda As Variant, vdSeguroVenda As Variant, vdOutrasDespVenda As Variant, vsGrade As Variant, viKitVenda As Variant) As Long

Dim lErro As Long
Dim viStatus As Variant

On Error GoTo Erro_RelCustoVendaItem_PreparaInt

    lErro = Comando_PrepararInt(lComando, sSQL)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM

    lErro = Comando_BindVarInt(lComando, vlNumIntItemNF)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM

    lErro = Comando_BindVarInt(lComando, vsProduto)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, vdQtde)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, vsUM)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, vdPrecoUnit)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, vdValorDesconto)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, viClasseUM)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, vsSiglaUMEstoque)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, vdICMSVenda)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, vdICMSSTVenda)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, vdIPIVenda)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, vdPISVenda)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, vdCOFINSVenda)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, vdISSVenda)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM

    lErro = Comando_BindVarInt(lComando, vdFreteVenda)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, vdSeguroVenda)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, vdOutrasDespVenda)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, vsGrade)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, viKitVenda)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, viTipoDoc)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, vlNumIntNF)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    If vsProdutoDe <> "" Then
        lErro = Comando_BindVarInt(lComando, vsProdutoDe)
        If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    End If
    
    If vsProdutoAte <> "" Then
        lErro = Comando_BindVarInt(lComando, vsProdutoAte)
        If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    End If
       
    lErro = Comando_ExecutarInt(lComando)
    If (lErro <> AD_SQL_SUCESSO) Then gError 182083
    
    RelCustoVendaItem_PreparaInt = SUCESSO
     
    Exit Function
    
Erro_RelCustoVendaItem_PreparaInt:

    RelCustoVendaItem_PreparaInt = gErr
     
    Select Case gErr

        Case ERRO_SEM_MENSAGEM
            Call Rotina_Erro(vbOKOnly, "ERRO_PREPARACAO_COMANDO_SQL", gErr, sSQL)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 182084)
     
    End Select
     
    Exit Function

End Function

Function Contratos_Campanha13Barra_Gera()

Dim lErro As Long, lCliente As Long, lTransacao As Long, lCodContrato As Long
Dim alComando(0 To 10) As Long, objContrato As ClassContrato
Dim objItensDeContrato As ClassItensDeContrato
Dim lNumIntDoc As Long, iIndice As Integer, dValContrato As Double
Dim lNumProx As Long, lNum As Long, lContrato As Long

'??? ALTERAR 2012 -> 2016

On Error GoTo Erro_Contratos_Campanha13Barra_Gera

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 130423

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 130426
    Next

    lErro = Comando_Executar(alComando(0), "SELECT CLI.Codigo, ic.valor*ic.quantidade FROM Clientes CLI, FiliaisClientes FIL, Enderecos ENDE, Contratos C, ItensDeContrato IC WHERE IC.NumIntContrato = C.NumIntDoc AND IC.Seq = 1 AND C.Ativo=1 AND C.Cliente = CLI.Codigo AND C.Filialempresa=4 AND ENDE.Endereco<> '' AND CLI.Ativo=1 AND FIL.CodCliente = CLI.Codigo AND FIL.CodFilial = 1 AND FIL.Endereco = ENDE.Codigo AND C.Codigo LIKE 'CT%' AND FIL.CGC <> '' ORDER BY RazaoSocial", lCliente, dValContrato)
    If lErro <> AD_SQL_SUCESSO Then gError 2222

    lErro = Comando_BuscarProximo(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 2222

    Do While lErro <> AD_SQL_SEM_DADOS

        lContrato = lContrato + 1

        'Busca próximo identificador
        lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_PROX_CONTRATO", lNumProx)
        If lErro <> SUCESSO Then gError 131066

        Set objContrato = New ClassContrato

        With objContrato

            .lNumIntDoc = lNumProx
            .iFilialEmpresa = 4 'BEIT BARRA
            .lCliente = lCliente

            .dtDataFimContrato = StrParaDate("21/12/2018")
            .dtDataIniCobrancaPadrao = StrParaDate("31/10/2018")
            .dtDataIniContrato = StrParaDate("31/10/2018")
            .dtDataRenovContrato = StrParaDate("21/12/2018")

            .iCondPagtoPadrao = 15
            .iFilCli = 1
            .iPeriodicidadePadrao = PERIODICIDADE_MENSAL

            .iAtivo = 1

            .sCodigo = "S9" & Format(lContrato, "0000") '??? ALTERAR
            .sContaContabil = ""
            .sDescricao = "13o Socios 2018" '??? ALTERAR
            .sObservacao = ""
            .sHistoricoContabil = ""

            .sCcl = ""

            .sNaturezaOp = "5949"
            .iTipoTributacao = 32

            .iTipo = CONTRATOS_RECEBER
            .iRecibo = DESMARCADO

            'Insere contrato
            lErro = Comando_Executar(alComando(2), "INSERT INTO Contratos(NumIntDoc, FilialEmpresa, Codigo, Descricao, Ativo, Cliente, FilCli, Observacao, DataIniContrato, DataFimContrato, DataRenovContrato, ContaContabil, HistoricoContabil, DataIniCobrancaPadrao, PeriodicidadePadrao, CondPagtoPadrao, Ccl, NaturezaOP,TipoTributacao, Tipo, FilialFornecedor, Fornecedor, Recibo) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                                                                        .lNumIntDoc, .iFilialEmpresa, .sCodigo, .sDescricao, .iAtivo, .lCliente, .iFilCli, .sObservacao, .dtDataIniContrato, .dtDataFimContrato, .dtDataRenovContrato, .sContaContabil, .sHistoricoContabil, .dtDataIniCobrancaPadrao, .iPeriodicidadePadrao, .iCondPagtoPadrao, .sCcl, .sNaturezaOp, .iTipoTributacao, .iTipo, .iFilForn, .lFornecedor, .iRecibo)
        End With
        If lErro <> AD_SQL_SUCESSO Then gError 129341

        Set objItensDeContrato = New ClassItensDeContrato

        'Obtem identificado (NumIntDoc)
        lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_PROX_ITENSDECONTRATO", lNumProx)
        If lErro <> SUCESSO Then gError 129367

        With objItensDeContrato

            .lNumIntDoc = lNumProx
            .lNumIntContrato = objContrato.lNumIntDoc
            .dtDataRefIni = StrParaDate("01/11/2018")
            .dtDataRefFim = StrParaDate("30/11/2018")
            .dQuantidade = 1
            .dtDataIniCobranca = StrParaDate("31/10/2018")
            .dtDataProxCobranca = StrParaDate("31/10/2018")
            .dValor = dValContrato / 2
            .iCobrar = 1
            .iMedicao = 0
            .iSeq = 1

            .iCondPagto = 15
            .iPeriodicidade = PERIODICIDADE_MENSAL

'            .sProduto = "00062"
'            .sDescProd = "DONATIVO YIZCOR"

            .sProduto = "00001"
            .sDescProd = "13o Socios 2018" '??? ALTERAR
            
            .sObservacao = ""
            .sUM = "un"

            'Insere item
            lErro = Comando_Executar(alComando(3), "INSERT INTO ItensDeContrato(NumIntDoc, NumIntContrato, Seq, Cobrar, Produto, DescProd, Quantidade, UM, Valor, Medicao, DataIniCobranca, Periodicidade, CondPagto, Observacao, DataProxCobranca, DataRefIni, DataRefFim) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                                                        .lNumIntDoc, .lNumIntContrato, .iSeq, .iCobrar, .sProduto, .sDescProd, .dQuantidade, .sUM, .dValor, .iMedicao, .dtDataIniCobranca, .iPeriodicidade, .iCondPagto, .sObservacao, .dtDataProxCobranca, .dtDataRefIni, .dtDataRefFim)
        End With
        If lErro <> AD_SQL_SUCESSO Then gError 129348

        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 2222

    Loop

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 130425

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Contratos_Campanha13Barra_Gera = SUCESSO

    Exit Function

Erro_Contratos_Campanha13Barra_Gera:

    Contratos_Campanha13Barra_Gera = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 201037)

    End Select

    'Desfaz Transação
    Call Transacao_Rollback

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function RelPVsMapaEntrega_Prepara1(sSQL As String, ByVal objClienteFaixa As ClassClienteFaixa, ByVal dtDataDe As Date, ByVal dtDataAte As Date, ByVal lMapaDe As Long, ByVal lMapaAte As Long) As Long

Dim sWhere As String

    sSQL = "SELECT CodPV, NumIntMapa, MapaCodigo, MapaData, Cliente, Vendedor"
    
    sSQL = sSQL & " FROM RelPVMapaEntregaAux"
    
    sWhere = "FilialEmpresa = ?"
    
    If objClienteFaixa.iVendedorDe <> 0 Then sWhere = " AND Vendedor >= ?"
    If objClienteFaixa.iVendedorAte <> 0 Then sWhere = sWhere & " AND Vendedor <= ?"
    If objClienteFaixa.lClienteDe <> 0 Then sWhere = sWhere & " AND Cliente >= ?"
    If objClienteFaixa.lClienteAte <> 0 Then sWhere = sWhere & " AND Cliente <= ?"
    If dtDataDe <> DATA_NULA Then sWhere = sWhere & " AND MapaData >= ?"
    If dtDataAte <> DATA_NULA Then sWhere = sWhere & " AND MapaData <= ?"
    If lMapaDe <> 0 Then sWhere = sWhere & " AND MapaCodigo >= ?"
    If lMapaAte <> 0 Then sWhere = sWhere & " AND MapaCodigo <= ?"
    
    sSQL = sSQL & " WHERE " & sWhere & " ORDER BY NumIntMapa"
    
    RelPVsMapaEntrega_Prepara1 = SUCESSO
    
End Function

Private Function RelPVsMapaEntrega_Prepara2(ByVal lComando As Long, ByVal sSQL As String, vlCodPV As Variant, vlNumIntMapa As Variant, vlMapaCodigo As Variant, vdtMapaData As Variant, vlCliente As Variant, viVendedor As Variant) As Long

Dim lErro As Long

On Error GoTo Erro_RelPVsMapaEntrega_Prepara2

    'prepara o comando sql
    lErro = Comando_PrepararInt(lComando, sSQL)
    If lErro <> AD_SQL_SUCESSO Then gError 201467
    
    'faz o bind das colunas
    lErro = Comando_BindVarInt(lComando, vlCodPV)
    If lErro <> AD_SQL_SUCESSO Then gError 201468
    
    lErro = Comando_BindVarInt(lComando, vlNumIntMapa)
    If lErro <> AD_SQL_SUCESSO Then gError 201469
    
    lErro = Comando_BindVarInt(lComando, vlMapaCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 201470
    
    lErro = Comando_BindVarInt(lComando, vdtMapaData)
    If lErro <> AD_SQL_SUCESSO Then gError 201471
    
    lErro = Comando_BindVarInt(lComando, vlCliente)
    If lErro <> AD_SQL_SUCESSO Then gError 201472
    
    lErro = Comando_BindVarInt(lComando, viVendedor)
    If lErro <> AD_SQL_SUCESSO Then gError 201473
    
    RelPVsMapaEntrega_Prepara2 = SUCESSO
    
    Exit Function

Erro_RelPVsMapaEntrega_Prepara2:

    RelPVsMapaEntrega_Prepara2 = gErr
    
    Select Case gErr
    
        Case 201467 To 201473
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RELPVMAPAENTREGA", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 201466)
    
    End Select
    
    Exit Function

End Function

Private Function RelPVsMapaEntrega_Prepara3(ByVal lComando As Long, ByVal iFilialEmpresa As Integer, ByVal objClienteFaixa As ClassClienteFaixa, ByVal dtDataDe As Date, ByVal dtDataAte As Date, ByVal lMapaDe As Long, ByVal lMapaAte As Long) As Long

Dim lErro As Long
Dim viFilialEmpresa As Variant, viVendedorDe As Variant, viVendedorAte As Variant, vlClienteDe As Variant, vlClienteAte As Variant
Dim vlMapaDe As Variant, vlMapaAte As Variant, vdtDataDe As Variant, vdtDataAte As Variant

On Error GoTo Erro_RelPVsMapaEntrega_Prepara3

    viFilialEmpresa = iFilialEmpresa
    lErro = Comando_BindVarInt(lComando, viFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 201475
    
    If objClienteFaixa.iVendedorDe <> 0 Then
        
        viVendedorDe = objClienteFaixa.iVendedorDe
        lErro = Comando_BindVarInt(lComando, viVendedorDe)
        If lErro <> AD_SQL_SUCESSO Then gError 201476
        
    End If
    
    If objClienteFaixa.iVendedorAte <> 0 Then
        
        viVendedorAte = objClienteFaixa.iVendedorAte
        lErro = Comando_BindVarInt(lComando, viVendedorAte)
        If lErro <> AD_SQL_SUCESSO Then gError 201477
        
    End If
    
    If objClienteFaixa.lClienteDe <> 0 Then
        
        vlClienteDe = objClienteFaixa.lClienteDe
        lErro = Comando_BindVarInt(lComando, vlClienteDe)
        If lErro <> AD_SQL_SUCESSO Then gError 201478
        
    End If
    
    If objClienteFaixa.lClienteAte <> 0 Then
        
        vlClienteAte = objClienteFaixa.lClienteAte
        lErro = Comando_BindVarInt(lComando, vlClienteAte)
        If lErro <> AD_SQL_SUCESSO Then gError 201479
        
    End If
    
    If dtDataDe <> DATA_NULA Then
    
        vdtDataDe = dtDataDe
        lErro = Comando_BindVarInt(lComando, vdtDataDe)
        If lErro <> AD_SQL_SUCESSO Then gError 201480
        
    End If
    
    If dtDataAte <> DATA_NULA Then
    
        vdtDataAte = dtDataAte
        lErro = Comando_BindVarInt(lComando, vdtDataAte)
        If lErro <> AD_SQL_SUCESSO Then gError 201480
        
    End If
    
    If lMapaDe <> 0 Then
        
        vlMapaDe = lMapaDe
        lErro = Comando_BindVarInt(lComando, vlMapaDe)
        If lErro <> AD_SQL_SUCESSO Then gError 201480
        
    End If
    
    If lMapaAte <> 0 Then
        
        vlMapaAte = lMapaAte
        lErro = Comando_BindVarInt(lComando, vlMapaAte)
        If lErro <> AD_SQL_SUCESSO Then gError 201481
        
    End If
    
    lErro = Comando_ExecutarInt(lComando)
    If lErro <> AD_SQL_SUCESSO Then gError 201482

    RelPVsMapaEntrega_Prepara3 = SUCESSO
    
    Exit Function
    
Erro_RelPVsMapaEntrega_Prepara3:
    
    RelPVsMapaEntrega_Prepara3 = gErr
    
    Select Case gErr
    
        Case 201475 To 201482
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RELPVMAPAENTREGA", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 201474)
    
    End Select
    
    Exit Function

End Function

Private Function RelPVsMapaEntrega_Prepara4(alComando() As Long, ByVal lNumIntRel As Long, ByVal iFilialEmpresa As Integer, lCodPV As Long, lNumIntMapa As Long, lMapaCodigo As Long, dtMapaData As Date, lCliente As Long, iVendedor As Integer) As Long

Dim lErro As Long, lNumIntMapaAnt As Long, lNumIntNF As Long, iCodFormaPagto As Integer

On Error GoTo Erro_RelPVsMapaEntrega_Prepara4

    lNumIntMapaAnt = 0
    
    lErro = Comando_BuscarProximo(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 201484

    Do While lErro = AD_SQL_SUCESSO
    
        If lNumIntMapaAnt <> lNumIntMapa Then
        
            lErro = Comando_Executar(alComando(3), "INSERT INTO RelMapaDeEntrega (NumIntRel, NumIntMapa) VALUES (?,?)", lNumIntRel, lNumIntMapa)
            If lErro <> AD_SQL_SUCESSO Then gError 201485
            
            lNumIntMapaAnt = lNumIntMapa
            
        End If
        
        lNumIntNF = 0
        lErro = Comando_Executar(alComando(4), "SELECT NumIntDoc FROM NFiscal WHERE FilialPedido = ? AND NumPedidoVenda = ? AND Status <> ? ORDER BY NumIntDoc DESC", lNumIntNF, iFilialEmpresa, lCodPV, STATUS_CANCELADO)
        If lErro <> AD_SQL_SUCESSO Then gError 201486
        
        lErro = Comando_BuscarProximo(alComando(4))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 201487
        
        iCodFormaPagto = 0
        
        If lNumIntNF <> 0 Then
            
            lErro = Comando_Executar(alComando(5), "SELECT C.FormaPagamento FROM NFiscal NF, TitulosRecTodos TIT, CondicoesPagto C WHERE NF.ClasseDocCPR = ? AND NF.NumIntDocCPR = TIT.NumIntDoc AND TIT.CondicaoPagto = C.Codigo AND NF.NumIntDoc = ?", _
                iCodFormaPagto, CPR_TITULO_RECEBER, lNumIntNF)
            If lErro <> AD_SQL_SUCESSO Then gError 201486
            
            lErro = Comando_BuscarProximo(alComando(5))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 201487
        
        End If
        
        lErro = Comando_Executar(alComando(2), "INSERT INTO RelMapaDeEntregaPV (NumIntRel, NumIntMapa, PVFilialEmpresa, PVCodigo, Vendedor, Cliente, NumIntNF, CodFormaPagto) VALUES (?,?,?,?,?,?,?,?)", _
            lNumIntRel, lNumIntMapa, iFilialEmpresa, lCodPV, iVendedor, lCliente, lNumIntNF, iCodFormaPagto)
        If lErro <> AD_SQL_SUCESSO Then gError 201486

        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 201487

    Loop
    
    RelPVsMapaEntrega_Prepara4 = SUCESSO
    
    Exit Function
    
Erro_RelPVsMapaEntrega_Prepara4:
    
    RelPVsMapaEntrega_Prepara4 = gErr
    
    Select Case gErr
    
        Case 201484 To 201487
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RELPVMAPAENTREGA", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 201483)
    
    End Select
    
    Exit Function

End Function

Function RelPVsMapaEntrega_Prepara(lNumIntRel As Long, ByVal iFilialEmpresa As Integer, ByVal objClienteFaixa As ClassClienteFaixa, ByVal dtDataDe As Date, ByVal dtDataAte As Date, ByVal lMapaDe As Long, ByVal lMapaAte As Long) As Long

Dim lErro As Long, sSQL As String
Dim alComando(1 To 5) As Long
Dim lTransacao As Long
Dim iIndice As Integer
Dim lCodPV As Long, lNumIntMapa As Long, lMapaCodigo As Long, dtMapaData As Date, lCliente As Long, iVendedor As Integer

On Error GoTo Erro_RelPVsMapaEntrega_Prepara

    'Abertura comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 140267
    Next

    'inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 140268

    lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_PROX_REL_PVMAPAENTREGA", lNumIntRel)
    If lErro <> SUCESSO Then gError 140269
    
    lErro = RelPVsMapaEntrega_Prepara1(sSQL, objClienteFaixa, dtDataDe, dtDataAte, lMapaDe, lMapaAte)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    lErro = RelPVsMapaEntrega_Prepara2(alComando(1), sSQL, lCodPV, lNumIntMapa, lMapaCodigo, dtMapaData, lCliente, iVendedor)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    lErro = RelPVsMapaEntrega_Prepara3(alComando(1), iFilialEmpresa, objClienteFaixa, dtDataDe, dtDataAte, lMapaDe, lMapaAte)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    lErro = RelPVsMapaEntrega_Prepara4(alComando, lNumIntRel, iFilialEmpresa, lCodPV, lNumIntMapa, lMapaCodigo, dtMapaData, lCliente, iVendedor)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    'confirma a Transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 140273
 
    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    RelPVsMapaEntrega_Prepara = SUCESSO

    Exit Function

Erro_RelPVsMapaEntrega_Prepara:

    RelPVsMapaEntrega_Prepara = gErr

    Select Case gErr

        Case 140267
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 140268
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 140269 To 140271, 140274, ERRO_SEM_MENSAGEM

        Case 140272
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_RELPVMAPAENTREGA", gErr)
        
        Case 140273
             Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150028)

    End Select

    Call Transacao_Rollback
    
    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Private Function RelCargaPorProduto_Prepara1(sSQL As String, ByVal dtDataDe As Date, ByVal dtDataAte As Date, ByVal lMapaDe As Long, ByVal lMapaAte As Long) As Long

Dim sWhere As String

    sSQL = "SELECT QtdeEmbBase, PesoBruto, Quantidade, UnidadeMed, UMNome, UMSigla, Classe, Produto, NumIntMapa, MapaCodigo, MapaData"
    
    sSQL = sSQL & " FROM RelPVMapaEntregaAux5"
    
    sWhere = "FilialEmpresa = ?"
    
    If dtDataDe <> DATA_NULA Then sWhere = sWhere & " AND MapaData >= ?"
    If dtDataAte <> DATA_NULA Then sWhere = sWhere & " AND MapaData <= ?"
    If lMapaDe <> 0 Then sWhere = sWhere & " AND MapaCodigo >= ?"
    If lMapaAte <> 0 Then sWhere = sWhere & " AND MapaCodigo <= ?"
    
    sSQL = sSQL & " WHERE " & sWhere & " ORDER BY NumIntMapa, Produto, NumIntItemPV"
    
    RelCargaPorProduto_Prepara1 = SUCESSO
    
End Function

Private Function RelCargaPorProduto_Prepara2(ByVal lComando As Long, ByVal sSQL As String, vdQtdeEmbBase As Variant, vdPesoBruto As Variant, vdQuantidade As Variant, vsUnidadeMed As Variant, vsUMNome As Variant, vsUMSigla As Variant, viClasse As Variant, vsProduto As Variant, vlNumIntMapa As Variant, vlMapaCodigo As Variant, vdtMapaData As Variant) As Long

Dim lErro As Long

On Error GoTo Erro_RelCargaPorProduto_Prepara2

    'prepara o comando sql
    lErro = Comando_PrepararInt(lComando, sSQL)
    If lErro <> AD_SQL_SUCESSO Then gError 201467
    
    'faz o bind das colunas
    lErro = Comando_BindVarInt(lComando, vdQtdeEmbBase)
    If lErro <> AD_SQL_SUCESSO Then gError 201468
    
    lErro = Comando_BindVarInt(lComando, vdPesoBruto)
    If lErro <> AD_SQL_SUCESSO Then gError 201468
    
    lErro = Comando_BindVarInt(lComando, vdQuantidade)
    If lErro <> AD_SQL_SUCESSO Then gError 201468
    
    lErro = Comando_BindVarInt(lComando, vsUnidadeMed)
    If lErro <> AD_SQL_SUCESSO Then gError 201468
    
    lErro = Comando_BindVarInt(lComando, vsUMNome)
    If lErro <> AD_SQL_SUCESSO Then gError 201468
    
    lErro = Comando_BindVarInt(lComando, vsUMSigla)
    If lErro <> AD_SQL_SUCESSO Then gError 201468
    
    lErro = Comando_BindVarInt(lComando, viClasse)
    If lErro <> AD_SQL_SUCESSO Then gError 201468
    
    lErro = Comando_BindVarInt(lComando, vsProduto)
    If lErro <> AD_SQL_SUCESSO Then gError 201468
    
    lErro = Comando_BindVarInt(lComando, vlNumIntMapa)
    If lErro <> AD_SQL_SUCESSO Then gError 201469
    
    lErro = Comando_BindVarInt(lComando, vlMapaCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 201470
    
    lErro = Comando_BindVarInt(lComando, vdtMapaData)
    If lErro <> AD_SQL_SUCESSO Then gError 201471
    
    RelCargaPorProduto_Prepara2 = SUCESSO
    
    Exit Function

Erro_RelCargaPorProduto_Prepara2:

    RelCargaPorProduto_Prepara2 = gErr
    
    Select Case gErr
    
        Case 201467 To 201473
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RELPVMAPAENTREGA", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 201466)
    
    End Select
    
    Exit Function

End Function

Private Function RelCargaPorProduto_Prepara3(ByVal lComando As Long, ByVal iFilialEmpresa As Integer, ByVal dtDataDe As Date, ByVal dtDataAte As Date, ByVal lMapaDe As Long, ByVal lMapaAte As Long) As Long

Dim lErro As Long
Dim viFilialEmpresa As Variant, vdtDataDe As Variant, vdtDataAte As Variant
Dim vlMapaDe As Variant, vlMapaAte As Variant

On Error GoTo Erro_RelCargaPorProduto_Prepara3

    viFilialEmpresa = iFilialEmpresa
    lErro = Comando_BindVarInt(lComando, viFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 201475
    
    If dtDataDe <> DATA_NULA Then
    
        vdtDataDe = dtDataDe
        lErro = Comando_BindVarInt(lComando, vdtDataDe)
        If lErro <> AD_SQL_SUCESSO Then gError 201480
        
    End If
    
    If dtDataAte <> DATA_NULA Then
    
        vdtDataAte = dtDataAte
        lErro = Comando_BindVarInt(lComando, vdtDataAte)
        If lErro <> AD_SQL_SUCESSO Then gError 201480
        
    End If
    
    If lMapaDe <> 0 Then
        
        vlMapaDe = lMapaDe
        lErro = Comando_BindVarInt(lComando, vlMapaDe)
        If lErro <> AD_SQL_SUCESSO Then gError 201480
        
    End If
    
    If lMapaAte <> 0 Then
        
        vlMapaAte = lMapaAte
        lErro = Comando_BindVarInt(lComando, vlMapaAte)
        If lErro <> AD_SQL_SUCESSO Then gError 201481
        
    End If
    
    lErro = Comando_ExecutarInt(lComando)
    If lErro <> AD_SQL_SUCESSO Then gError 201482

    RelCargaPorProduto_Prepara3 = SUCESSO
    
    Exit Function
    
Erro_RelCargaPorProduto_Prepara3:
    
    RelCargaPorProduto_Prepara3 = gErr
    
    Select Case gErr
    
        Case 201475 To 201482
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RELPVMAPAENTREGA", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 201474)
    
    End Select
    
    Exit Function

End Function

Private Function RelCargaPorProduto_Prepara4(alComando() As Long, ByVal lNumIntRel As Long, ByVal iFilialEmpresa As Integer, dQtdeEmbBase As Double, dPesoBruto As Double, dQuantidade As Double, sUnidadeMed As String, sUMNome As String, sUMSigla As String, iClasse As Integer, sProduto As String, lNumIntMapa As Long, lMapaCodigo As Long, dtMapaData As Date) As Long

Dim lErro As Long, lNumIntMapaAnt As Long, sProdutoAnt As String, sRespProducao As String, sRespProducaoAux As String
Dim sUMSiglaAnt As String, sUMDescricaoAnt As String, dTotQuantidade As Double, dTotPeso As Double, dTotVolumes As Double

On Error GoTo Erro_RelCargaPorProduto_Prepara4

    lNumIntMapaAnt = 0
    
    lErro = Comando_BuscarProximo(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 201484

    Do While lErro = AD_SQL_SUCESSO
    
        '1o registro lido
        If lNumIntMapaAnt = 0 Then
            
            sUMSiglaAnt = sUMSigla
            sUMDescricaoAnt = sUMNome
            sProdutoAnt = sProduto
        
            lNumIntMapaAnt = lNumIntMapa
            
        End If
        
        If lNumIntMapaAnt <> lNumIntMapa Or sProdutoAnt <> sProduto Then
        
            sRespProducaoAux = String(STRING_CATEGORIACLIENTEITEM_DESCRICAO, 0)
            lErro = Comando_Executar(alComando(4), "SELECT Descricao FROM ProdutoCategoria PC, CategoriaProdutoItem CPI WHERE PC.Produto = ? AND PC.Categoria = CPI.Categoria AND PC.Item = CPI.Item AND PC.Categoria = ?", _
                sRespProducaoAux, sProdutoAnt, "area de producao")
            If lErro <> AD_SQL_SUCESSO Then gError 201484

            lErro = Comando_BuscarProximo(alComando(4))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 201484
            If lErro = AD_SQL_SUCESSO Then
                sRespProducao = sRespProducaoAux
            Else
                sRespProducao = ""
            End If
            
            lErro = Comando_Executar(alComando(2), "INSERT INTO RelMapaDeEntregaProd (NumIntRel, NumIntMapa, Produto, UMSigla, UMDescricao, Quantidade, Peso, Volumes, RespProducao ) VALUES (?,?,?,?,?,?,?,?,?)", _
                lNumIntRel, lNumIntMapaAnt, sProdutoAnt, sUMSiglaAnt, sUMDescricaoAnt, dTotQuantidade, dTotPeso, dTotVolumes, sRespProducao)
            If lErro <> AD_SQL_SUCESSO Then gError 201486

            sUMSiglaAnt = sUMSigla
            sUMDescricaoAnt = sUMNome
            sProdutoAnt = sProduto
            
            dTotQuantidade = 0
            dTotPeso = 0
            dTotVolumes = 0
            
            If lNumIntMapaAnt <> lNumIntMapa Then
            
                lErro = Comando_Executar(alComando(3), "INSERT INTO RelMapaDeEntrega (NumIntRel, NumIntMapa) VALUES (?,?)", lNumIntRel, lNumIntMapaAnt)
                If lErro <> AD_SQL_SUCESSO Then gError 201485
                
                lNumIntMapaAnt = lNumIntMapa
            
            End If
            
        End If
        
        dTotQuantidade = dTotQuantidade + dQuantidade
        dTotPeso = dTotPeso + (dQuantidade * dPesoBruto)
        dTotVolumes = dTotVolumes + (Arredonda_ParaCima(dQuantidade / IIf(dQtdeEmbBase = 0, 1, dQtdeEmbBase)))
            
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 201487

    Loop
    
    If lNumIntMapaAnt <> 0 Then
    
        lErro = Comando_Executar(alComando(2), "INSERT INTO RelMapaDeEntregaProd (NumIntRel, NumIntMapa, Produto, UMSigla, UMDescricao, Quantidade, Peso, Volumes, RespProducao ) VALUES (?,?,?,?,?,?,?,?,?)", _
            lNumIntRel, lNumIntMapaAnt, sProdutoAnt, sUMSiglaAnt, sUMDescricaoAnt, dTotQuantidade, dTotPeso, dTotVolumes, "")
        If lErro <> AD_SQL_SUCESSO Then gError 201486

        lErro = Comando_Executar(alComando(3), "INSERT INTO RelMapaDeEntrega (NumIntRel, NumIntMapa) VALUES (?,?)", lNumIntRel, lNumIntMapaAnt)
        If lErro <> AD_SQL_SUCESSO Then gError 201485
            
    End If
    
    RelCargaPorProduto_Prepara4 = SUCESSO
    
    Exit Function
    
Erro_RelCargaPorProduto_Prepara4:
    
    RelCargaPorProduto_Prepara4 = gErr
    
    Select Case gErr
    
        Case 201484 To 201487
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RELPVMAPAENTREGA", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 201483)
    
    End Select
    
    Exit Function

End Function

Function RelCargaPorProduto_Prepara(lNumIntRel As Long, ByVal iFilialEmpresa As Integer, ByVal dtDataDe As Date, ByVal dtDataAte As Date, ByVal lMapaDe As Long, ByVal lMapaAte As Long, ByVal sCategoriaProd As String, ByVal sItemCatProdDe As String, ByVal sItemCatProdAte As String) As Long

Dim lErro As Long, sSQL As String
Dim alComando(1 To 4) As Long
Dim lTransacao As Long
Dim iIndice As Integer
Dim dQtdeEmbBase As Double, dPesoBruto As Double, dQuantidade As Double, sUnidadeMed As String, sUMNome As String, sUMSigla As String, iClasse As Integer, sProduto As String
Dim lNumIntMapa As Long, lMapaCodigo As Long, dtMapaData As Date

On Error GoTo Erro_RelCargaPorProduto_Prepara

    'Abertura comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 140267
    Next

    'inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 140268

    sUnidadeMed = String(STRING_UM_SIGLA, 0)
    sUMNome = String(STRING_UM_NOME, 0)
    sUMSigla = String(STRING_UM_SIGLA, 0)
    sProduto = String(STRING_PRODUTO, 0)
    
    lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_PROX_REL_PVMAPAENTREGA", lNumIntRel)
    If lErro <> SUCESSO Then gError 140269
    
    lErro = RelCargaPorProduto_Prepara1(sSQL, dtDataDe, dtDataAte, lMapaDe, lMapaAte)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    lErro = RelCargaPorProduto_Prepara2(alComando(1), sSQL, dQtdeEmbBase, dPesoBruto, dQuantidade, sUnidadeMed, sUMNome, sUMSigla, iClasse, sProduto, lNumIntMapa, lMapaCodigo, dtMapaData)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    lErro = RelCargaPorProduto_Prepara3(alComando(1), iFilialEmpresa, dtDataDe, dtDataAte, lMapaDe, lMapaAte)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    lErro = RelCargaPorProduto_Prepara4(alComando, lNumIntRel, iFilialEmpresa, dQtdeEmbBase, dPesoBruto, dQuantidade, sUnidadeMed, sUMNome, sUMSigla, iClasse, sProduto, lNumIntMapa, lMapaCodigo, dtMapaData)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    'confirma a Transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 140273
 
    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    RelCargaPorProduto_Prepara = SUCESSO

    Exit Function

Erro_RelCargaPorProduto_Prepara:

    RelCargaPorProduto_Prepara = gErr

    Select Case gErr

        Case 140267
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 140268
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 140269 To 140271, 140274, ERRO_SEM_MENSAGEM

        Case 140272
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_RELPVMAPAENTREGA", gErr)
        
        Case 140273
             Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150028)

    End Select

    Call Transacao_Rollback
    
    'Fechamento comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Public Function NFiscal_Valida_ChvNFe(ByVal objNF As ClassNFiscal, ByVal objTipoDocInfo As ClassTipoDocInfo) As Long

Dim lErro As Long
Dim iIndice As Integer
Dim sChvNFe As String
Dim sUF As String, sAno As String, sMes As String, sCNPJEmi As String, sModelo As String
Dim sSerie As String, sNumero As String, sTipoEmissao As String, sCodNumerico As String
Dim sDV As String, sDVCalc As String, sCNPJBD As String, sUFBD As String
Dim objCli As ClassCliente
Dim objFilCli As ClassFilialCliente
Dim objForn As ClassFornecedor
Dim objFilForn As ClassFilialFornecedor
Dim objEnd As ClassEndereco, objEstado As ClassEstado
Dim vbResult As VbMsgBoxResult

On Error GoTo Erro_NFiscal_Valida_ChvNFe

    If Len(Trim(objNF.sChvNFe)) > 0 And objTipoDocInfo.iEmitente <> EMITENTE_EMPRESA Then
    
        If Len(Trim(objNF.sChvNFe)) <> STRING_NFE_CHNFE Then gError 211993 'Tamanho errado
           
        sChvNFe = left(objNF.sChvNFe, 43)
        sUF = Mid(objNF.sChvNFe, 1, 2)
        sAno = Mid(objNF.sChvNFe, 3, 2)
        sMes = Mid(objNF.sChvNFe, 5, 2)
        sCNPJEmi = Mid(objNF.sChvNFe, 7, 14)
        sModelo = Mid(objNF.sChvNFe, 21, 2)
        sSerie = Mid(objNF.sChvNFe, 23, 3)
        sNumero = Mid(objNF.sChvNFe, 26, 9)
        sTipoEmissao = Mid(objNF.sChvNFe, 35, 1)
        sCodNumerico = Mid(objNF.sChvNFe, 36, 8)
        sDV = Mid(objNF.sChvNFe, 44, 1)
               
        lErro = CF("Calcula_DV11", sChvNFe, 9, sDVCalc)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        
        If sDV <> sDVCalc Then gError 211994 'Chave inválida
        
        If StrParaLong(sNumero) <> objNF.lNumNotaFiscal Then gError 211995 'Número da NF não bate
        
        Set objEnd = New ClassEndereco
        Set objEstado = New ClassEstado
        
        If objNF.lFornecedor <> 0 Then
        
            Set objForn = New ClassFornecedor
            Set objFilForn = New ClassFilialFornecedor
            
            objForn.lCodigo = objNF.lFornecedor
            objFilForn.lCodFornecedor = objNF.lFornecedor
            objFilForn.iCodFilial = objNF.iFilialForn
        
            lErro = CF("Fornecedor_Le", objForn)
            If lErro <> SUCESSO And lErro <> 12729 Then gError ERRO_SEM_MENSAGEM
        
            lErro = CF("FilialFornecedor_Le", objFilForn)
            If lErro <> SUCESSO And lErro <> 12929 Then gError ERRO_SEM_MENSAGEM
               
            objEnd.lCodigo = objFilForn.lEndereco
        
            lErro = CF("Endereco_Le", objEnd)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
            
            objEstado.sSigla = objEnd.sSiglaEstado
            
            lErro = CF("Estado_Le", objEstado)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
            
            sUFBD = objEstado.iCodIBGE
            sCNPJBD = objFilForn.sCgc
        
        Else
        
            Set objCli = New ClassCliente
            Set objFilCli = New ClassFilialCliente
            
            objCli.lCodigo = objNF.lCliente
            objFilCli.lCodCliente = objNF.lCliente
            objFilCli.iCodFilial = objNF.iFilialCli
        
            lErro = CF("Cliente_Le", objCli)
            If lErro <> SUCESSO And lErro <> 12293 Then gError ERRO_SEM_MENSAGEM
        
            lErro = CF("FilialCliente_Le", objFilCli)
            If lErro <> SUCESSO And lErro <> 12567 Then gError ERRO_SEM_MENSAGEM
        
            objEnd.lCodigo = objFilCli.lEndereco
        
            lErro = CF("Endereco_Le", objEnd)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
            
            objEstado.sSigla = objEnd.sSiglaEstado
            
            lErro = CF("Estado_Le", objEstado)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
            
            sUFBD = objEstado.iCodIBGE
            sCNPJBD = objFilCli.sCgc
            
        End If
        
        'If sCNPJEmi <> sCNPJBD Then gError 211996 'Emitente não bate
        If sCNPJEmi <> sCNPJBD Then
            Select Case gobjFAT.iChvNFeValidaCNPJ
                Case 0
                
                Case 1
                    vbResult = Rotina_Aviso(vbYesNo, "AVISO_NFE_CHV_CNPJ_DIF")
                    If vbResult = vbNo Then gError ERRO_SEM_MENSAGEM
                Case 2
                    gError 211996
            End Select
        End If
        If sAno & sMes <> Format(objNF.dtDataEmissao, "YYMM") Then gError 211997 'Data de Emissão da NF não bate
        If StrParaInt(sUF) <> StrParaInt(sUFBD) Then gError 211998  'UF do emitente não bate

    End If

    NFiscal_Valida_ChvNFe = SUCESSO
    
    Exit Function
    
Erro_NFiscal_Valida_ChvNFe:
    
    NFiscal_Valida_ChvNFe = gErr
    
    Select Case gErr
    
        Case 211993
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_CHV_TAM_INVALIDO", gErr)

        Case 211994
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_CHV_INVALIDA", gErr)
  
        Case 211995
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_CHV_NUMNF_DIF", gErr, objNF.lNumNotaFiscal, StrParaDbl(sNumero))
  
        Case 211996
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_CHV_CNPJ_DIF", gErr, sCNPJBD, sCNPJEmi)
  
        Case 211997
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_CHV_DTEMISSAO_DIF", gErr, Format(objNF.dtDataEmissao, "MM/YY"), sMes + "/" + sAno)
  
        Case 211998
            Call Rotina_Erro(vbOKOnly, "ERRO_NFE_CHV_CODUF_DIF", gErr)
  
        Case ERRO_SEM_MENSAGEM
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 211999)
            
    End Select
        
    Exit Function

End Function

Public Function NFiscal_Valida_Homolog_Canc(ByVal objNF As ClassNFiscal, Optional ByVal bSemErro As Boolean = False) As Long

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(0 To 5) As Long
Dim dtDataCanc As Date, dHoraCanc As Double
Dim dtDataAuto As Date, dHoraAuto As Double
Dim dTempoDecorrido As Double, dPrazoMaximo As Double
Dim sConteudo As String, lNumIntNF As Long


On Error GoTo Erro_NFiscal_Valida_Homolog_Canc

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 210898
    Next
    
    If ISSerieEletronica(objNF.sSerie) Then
    
        If objNF.iFilialEmpresa > 50 Then
            lNumIntNF = objNF.lNumIntDoc - 1
        Else
            lNumIntNF = objNF.lNumIntDoc
        End If


        
        lErro = Comando_Executar(alComando(1), "SELECT Data, Hora FROM NFEFedRetCancNFe WHERE NumIntNF = ? AND (cStat = '101' or cStat = '151' or cStat = '135' or cStat = '155') ", dtDataCanc, dHoraCanc, lNumIntNF)
        If lErro <> AD_SQL_SUCESSO Then gError 210899
        
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210900
    
        'Se o cancelamento ainda não está homologado
        If lErro <> AD_SQL_SUCESSO Then
        
            If bSemErro Then
                gError ERRO_SEM_MENSAGEM
            Else
                gError 210901
            End If
            
        End If
        
    End If
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
        
    NFiscal_Valida_Homolog_Canc = SUCESSO
    
    Exit Function
    
Erro_NFiscal_Valida_Homolog_Canc:
    
    NFiscal_Valida_Homolog_Canc = gErr
    
    Select Case gErr

        Case ERRO_SEM_MENSAGEM

        Case 210898
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 210899, 210900
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFEFEDRETCANCNFE", gErr)

        Case 210901
            Call Rotina_Erro(vbOKOnly, "ERRO_NOTA_NAO_HOMOLOGADO_CANCELAMENTO", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 210902)
            
    End Select



    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function


End Function


Public Function NFSE_Valida_Homolog_Canc(ByVal objNF As ClassNFiscal) As Long

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(0 To 5) As Long
Dim dtDataCanc As Date, dHoraCanc As Double
Dim dtDataAuto As Date, dHoraAuto As Double
Dim dTempoDecorrido As Double, dPrazoMaximo As Double
Dim sConteudo As String, lNumIntNF As Long

On Error GoTo Erro_NFSE_Valida_Homolog_Canc

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 210903
    Next
    
    If objNF.iRecibo = 1 And gobjCRFAT.iUsaNFSE = 1 Then
    
        If objNF.iFilialEmpresa > 50 Then
            lNumIntNF = objNF.lNumIntDoc - 1
        Else
            lNumIntNF = objNF.lNumIntDoc
        End If
        
        lErro = Comando_Executar(alComando(1), "SELECT Data, Hora FROM RPSWebRetCanc WHERE NumIntNF = ? AND (CodigoCancelamento = 1 Or CodigoCancelamento = 2)", dtDataCanc, dHoraCanc, lNumIntNF)
        If lErro <> AD_SQL_SUCESSO Then gError 210904
        
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210905
    
        'Se o cancelamento ainda não está homologado
        If lErro <> AD_SQL_SUCESSO Then gError 210906
        
    End If
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
        
    NFSE_Valida_Homolog_Canc = SUCESSO
    
    Exit Function

    
Erro_NFSE_Valida_Homolog_Canc:

    
    NFSE_Valida_Homolog_Canc = gErr

    
    Select Case gErr


        Case 210903
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 210904, 210905
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RPSWEBRETCANC", gErr)

        Case 210906
            Call Rotina_Erro(vbOKOnly, "ERRO_NFSE_NAO_HOMOLOGADO_CANCELAMENTO", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 210907)
            
    End Select
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Public Function RelPosFinanc_Prepara(ByVal iFilialEmpresa As Integer, ByVal dtDataDe As Date, ByVal dtDataAte As Date, ByVal iLayout As Integer, ByVal iCodConta As Integer, lNumIntRel As Long, ByVal dValMinForn As Double) As Long

Dim lErro As Long
Dim lTransacao As Long
Dim iIndice As Integer
Dim alComando(0 To 20) As Long, sSQL As String
Dim alComandoAux1(0 To 4) As Long
Dim alComandoAux2(0 To 10) As Long
Dim iCredito As Integer, sNomeCta As String
Dim tMovCta As typeMovContaCorrente, iTipoGrupo As Integer, iSeq As Integer
Dim sTextoGrupoValor(1 To 3) As String, dValor(1 To 3) As Double, sTextoGrupo As String
Dim sTextoDescricao As String, sDescricao As String
Dim dSaldoCta As Double, dSaldoTotalIni As Double, dSaldoTotalFim As Double
Dim objNat As ClassNatMovCta, colNat As New Collection, sNatCta As String
Dim objCGGrupoNat As New ClassCamposGenericos, bAchou As Boolean
Dim objCGVGrupo As ClassCamposGenericosValores, sDescNatureza As String
Dim lFornecedor As Long, sFornecedor As String, iCount As Integer
Dim sNomeForn As String, sDescGrupoNat As String, dValorTotal(1 To 3) As Double
Dim colRet As Collection, objNatAux As ClassNatMovCtaAux, dRotativo As Double

Const POS_FINANC_LAYOUT_DIARIO = 1
Const POS_FINANC_LAYOUT_MENSAL = 2

On Error GoTo Erro_RelPosFinanc_Prepara

    'abrir transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 211866
    
    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 211867
    Next
    
    For iIndice = LBound(alComandoAux1) To UBound(alComandoAux1)
        alComandoAux1(iIndice) = Comando_Abrir()
        If alComandoAux1(iIndice) = 0 Then gError 211868
    Next
    
    For iIndice = LBound(alComandoAux2) To UBound(alComandoAux2)
        alComandoAux2(iIndice) = Comando_Abrir()
        If alComandoAux2(iIndice) = 0 Then gError 211869
    Next
    
    'Obter NumIntRel
    lErro = CF("Config_ObterNumInt", "FATConfig", "NUMINTREL_POSFINANC", lNumIntRel)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    objCGGrupoNat.lCodigo = CAMPOSGENERICOS_NATCTA_GRUPO
    
    lErro = CF("CamposGenericosValores_Le_CodCampo", objCGGrupoNat)
    If lErro <> SUCESSO And lErro <> 102300 Then gError ERRO_SEM_MENSAGEM
    
    iSeq = 0
    dSaldoTotalIni = 0
    dSaldoTotalFim = 0
    
    iTipoGrupo = 0
    sTextoGrupo = "" ' Informações sobre as contas correntes
    sTextoDescricao = "Banco"
    sTextoGrupoValor(1) = "Limite"
    sTextoGrupoValor(2) = "Saldo"
    sTextoGrupoValor(3) = "Disponível"
    
    dValorTotal(1) = 0
    dValorTotal(2) = 0
    dValorTotal(3) = 0
    
    sNomeCta = String(STRING_MAXIMO, 0)
    
    lErro = Comando_Executar(alComando(0), "SELECT MAX(C.Rotativo), M.CodConta, C.NomeReduzido, SUM(((2 * T.Credito)-1) * M.Valor) AS Valor FROM MovimentosContaCorrente As M, TiposMovtoCtaCorrente AS T, ContasCorrentesInternas AS C WHERE M.Tipo = T.Codigo AND C.Codigo = M.CodConta AND M.Excluido <> 1 AND M.FilialEmpresa = ? AND M.DataMovimento BETWEEN ? AND ? AND (C.Codigo = ? OR ? = 0) GROUP BY M.CodConta, C.NomeReduzido ORDER BY C.NomeReduzido", _
        dRotativo, tMovCta.iCodConta, sNomeCta, tMovCta.dValor, iFilialEmpresa, dtDataDe, dtDataAte, iCodConta, iCodConta)
    If lErro <> AD_SQL_SUCESSO Then gError 211870
    
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211871
    
    Do While lErro = AD_SQL_SUCESSO
    
        iSeq = iSeq + 1
                
        lErro = CF("CCI_ObterRelTes", tMovCta.iCodConta, dtDataDe, dSaldoCta, alComandoAux1())
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        
        dSaldoTotalIni = dSaldoTotalIni + dSaldoCta
        
        lErro = CF("CCI_ObterRelTes", tMovCta.iCodConta, dtDataAte, dSaldoCta, alComandoAux1())
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        
        sDescricao = sNomeCta
        dValor(1) = dRotativo
        dValor(2) = dSaldoCta
        dValor(3) = dValor(2) + dValor(1)
    
        dValorTotal(1) = dValorTotal(1) + dValor(1)
        dValorTotal(2) = dValorTotal(2) + dValor(2)
        dValorTotal(3) = dValorTotal(3) + dValor(3)
    
        lErro = Comando_Executar(alComando(1), "INSERT INTO RelPosFinanc (NumIntRel, Seq, TipoGrupo, TextoGrupo, TextoDescricao, TextoValor1, TextoValor2, TextoValor3, Descricao, Valor1, Valor2, Valor3) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) ", _
                                                lNumIntRel, iSeq, iTipoGrupo, sTextoGrupo, sTextoDescricao, sTextoGrupoValor(1), sTextoGrupoValor(2), sTextoGrupoValor(3), sDescricao, dValor(1), dValor(2), dValor(3))
        If lErro <> AD_SQL_SUCESSO Then gError 211872
    
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211873
    
    Loop
    
    iSeq = iSeq + 1
    
    sDescricao = "Total:"
    dValor(1) = dValorTotal(1)
    dValor(2) = dValorTotal(2)
    dValor(3) = dValorTotal(3)
    
    lErro = Comando_Executar(alComando(1), "INSERT INTO RelPosFinanc (NumIntRel, Seq, TipoGrupo, TextoGrupo, TextoDescricao, TextoValor1, TextoValor2, TextoValor3, Descricao, Valor1, Valor2, Valor3) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) ", _
                                            lNumIntRel, iSeq, iTipoGrupo, sTextoGrupo, sTextoDescricao, sTextoGrupoValor(1), sTextoGrupoValor(2), sTextoGrupoValor(3), sDescricao, dValor(1), dValor(2), dValor(3))
    If lErro <> AD_SQL_SUCESSO Then gError 211874
    
    iTipoGrupo = 1
    sTextoGrupo = "Saldos" ' Saldo Anterior + Total Entradas + Total Saídas + Saldo Final
    sTextoDescricao = ""
    sTextoGrupoValor(1) = ""
    sTextoGrupoValor(2) = ""
    sTextoGrupoValor(3) = ""
    
    iSeq = iSeq + 1
    
    sDescricao = "Saldo Inicial em " & Format(dtDataDe, "dd/mm/yyyy")
    dValor(1) = 0
    dValor(2) = 0
    dValor(3) = dSaldoTotalIni
    
    dSaldoTotalFim = dSaldoTotalIni
    
    lErro = Comando_Executar(alComando(1), "INSERT INTO RelPosFinanc (NumIntRel, Seq, TipoGrupo, TextoGrupo, TextoDescricao, TextoValor1, TextoValor2, TextoValor3, Descricao, Valor1, Valor2, Valor3) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) ", _
                                            lNumIntRel, iSeq, iTipoGrupo, sTextoGrupo, sTextoDescricao, sTextoGrupoValor(1), sTextoGrupoValor(2), sTextoGrupoValor(3), sDescricao, dValor(1), dValor(2), dValor(3))
    If lErro <> AD_SQL_SUCESSO Then gError 211875
    
    lErro = Comando_Executar(alComando(2), "SELECT T.Credito, SUM(M.Valor) FROM MovimentosContaCorrente As M, TiposMovtoCtaCorrente AS T WHERE M.Tipo = T.Codigo AND M.Excluido <> 1 AND M.FilialEmpresa = ? AND M.DataMovimento BETWEEN ? AND ? AND (M.CodConta = ? OR ? = 0) GROUP BY T.Credito ORDER BY T.Credito DESC ", _
    iCredito, tMovCta.dValor, iFilialEmpresa, dtDataDe, dtDataAte, iCodConta, iCodConta)
    If lErro <> AD_SQL_SUCESSO Then gError 211876
    
    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211877
    
    Do While lErro = AD_SQL_SUCESSO
    
        iSeq = iSeq + 1
        
        If iCredito = 0 Then
            sDescricao = "Total Saídas"
            dSaldoTotalFim = dSaldoTotalFim - tMovCta.dValor
        Else
            sDescricao = "Total Entradas"
            dSaldoTotalFim = dSaldoTotalFim + tMovCta.dValor
        End If
        dValor(1) = 0
        dValor(2) = 0
        dValor(3) = tMovCta.dValor
    
        lErro = Comando_Executar(alComando(1), "INSERT INTO RelPosFinanc (NumIntRel, Seq, TipoGrupo, TextoGrupo, TextoDescricao, TextoValor1, TextoValor2, TextoValor3, Descricao, Valor1, Valor2, Valor3) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) ", _
                                                lNumIntRel, iSeq, iTipoGrupo, sTextoGrupo, sTextoDescricao, sTextoGrupoValor(1), sTextoGrupoValor(2), sTextoGrupoValor(3), sDescricao, dValor(1), dValor(2), dValor(3))
        If lErro <> AD_SQL_SUCESSO Then gError 211878
    
        lErro = Comando_BuscarProximo(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211879
    
    Loop
    
    iSeq = iSeq + 1
    
    sDescricao = "Saldo Final em " & Format(dtDataAte, "dd/mm/yyyy")
    dValor(1) = 0
    dValor(2) = 0
    dValor(3) = dSaldoTotalFim
    
    lErro = Comando_Executar(alComando(1), "INSERT INTO RelPosFinanc (NumIntRel, Seq, TipoGrupo, TextoGrupo, TextoDescricao, TextoValor1, TextoValor2, TextoValor3, Descricao, Valor1, Valor2, Valor3) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) ", _
                                            lNumIntRel, iSeq, iTipoGrupo, sTextoGrupo, sTextoDescricao, sTextoGrupoValor(1), sTextoGrupoValor(2), sTextoGrupoValor(3), sDescricao, dValor(1), dValor(2), dValor(3))
    If lErro <> AD_SQL_SUCESSO Then gError 211880
    
    '******************************
    'Vai gerar uma tabela auxiliar por natureza/grupo de natureza/fornecedor
    
    tMovCta.sNatureza = String(STRING_NATMOVCTA_CODIGO, 0)

    lErro = Comando_Executar(alComando(3), "SELECT M.NumMovto, T.Credito, T.Codigo, M.NumRefInterna, M.Natureza, M.Valor FROM MovimentosContaCorrente As M, TiposMovtoCtaCorrente AS T WHERE M.Tipo = T.Codigo AND M.Excluido <> 1 AND M.FilialEmpresa = ? AND M.DataMovimento BETWEEN ? AND ? AND (M.CodConta = ? OR ? = 0)", _
    tMovCta.lNumMovto, iCredito, tMovCta.iTipo, tMovCta.lNumRefInterna, tMovCta.sNatureza, tMovCta.dValor, iFilialEmpresa, dtDataDe, dtDataAte, iCodConta, iCodConta)
    If lErro <> AD_SQL_SUCESSO Then gError 211881
    
    lErro = Comando_BuscarPrimeiro(alComando(3))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211882
    
    Do While lErro = AD_SQL_SUCESSO
    
        Set colRet = New Collection
    
        lErro = CF("RelPosFinanc_Obtem_Natureza", alComandoAux2(), tMovCta.iTipo, tMovCta.lNumMovto, tMovCta.sNatureza, tMovCta.dValor, colRet)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        
        For Each objNatAux In colRet
                
            Set objNat = New ClassNatMovCta
            
            If objNatAux.sNatureza = "" Then
                objNat.sDescricao = "NÃO PREENCHIDA"
            Else
                objNat.sCodigo = objNatAux.sNatureza
                lErro = CF("NatMovCta_Le", objNat)
                If lErro <> SUCESSO And lErro <> 122786 Then gError ERRO_SEM_MENSAGEM
                If lErro <> SUCESSO Then objNat.sDescricao = "NÃO PREENCHIDA"
                If objNat.lGrupo <> 0 Then
                    For Each objCGVGrupo In objCGGrupoNat.colCamposGenericosValores
                        If objCGVGrupo.lCodValor = objNat.lGrupo Then
                            objNat.sDescGrupo = objCGVGrupo.sValor
                            Exit For
                        End If
                    Next
                End If
            End If
            If iCredito = MARCADO Then
                objNat.dCredito = objNatAux.dValor
                objNat.dDebito = 0
            Else
                objNat.dDebito = objNatAux.dValor
                objNat.dCredito = 0
            End If
        
            lErro = Comando_Executar(alComando(4), "INSERT INTO RelPosFinancAux (NumIntRel, NumMovto, TipoDoc, NumIntDoc, GrupoNat, DescGrupoNat, Natureza, DescNatureza, Credito, Debito, TipoCliForn, CliForn, NomeCliForn) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?) ", _
                                                    lNumIntRel, tMovCta.lNumMovto, objNatAux.iTipoDoc, objNatAux.lNumIntDoc, objNat.lGrupo, objNat.sDescGrupo, objNat.sCodigo, objNat.sDescricao, objNat.dCredito, objNat.dDebito, objNatAux.iTipoCliForn, objNatAux.lCliForn, objNatAux.sNomeCliForn)
            If lErro <> AD_SQL_SUCESSO Then gError 211883

        Next

        lErro = Comando_BuscarProximo(alComando(3))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211884
     
    Loop
    '******************************
    
    iTipoGrupo = 2
    sTextoGrupo = "Entradas" ' Entradas por natureza
    sTextoDescricao = ""
    sTextoGrupoValor(1) = ""
    sTextoGrupoValor(2) = ""
    sTextoGrupoValor(3) = ""
    
    sDescNatureza = String(STRING_NATMOVCTA_DESCRICAO, 0)

    lErro = Comando_Executar(alComando(5), "SELECT DescNatureza, SUM(Credito) FROM RelPosFinancAux WHERE NumIntRel = ? GROUP BY DescNatureza HAVING SUM(Credito) > 0 ORDER BY DescNatureza ", _
    sDescNatureza, tMovCta.dValor, lNumIntRel)
    If lErro <> AD_SQL_SUCESSO Then gError 211885
    
    lErro = Comando_BuscarPrimeiro(alComando(5))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211886
    
    Do While lErro = AD_SQL_SUCESSO

        iSeq = iSeq + 1
        
        sDescricao = sDescNatureza
        dValor(1) = 0
        dValor(2) = 0
        dValor(3) = tMovCta.dValor
    
        lErro = Comando_Executar(alComando(1), "INSERT INTO RelPosFinanc (NumIntRel, Seq, TipoGrupo, TextoGrupo, TextoDescricao, TextoValor1, TextoValor2, TextoValor3, Descricao, Valor1, Valor2, Valor3) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) ", _
                                                lNumIntRel, iSeq, iTipoGrupo, sTextoGrupo, sTextoDescricao, sTextoGrupoValor(1), sTextoGrupoValor(2), sTextoGrupoValor(3), sDescricao, dValor(1), dValor(2), dValor(3))
        If lErro <> AD_SQL_SUCESSO Then gError 211887

        lErro = Comando_BuscarProximo(alComando(5))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211888
     
    Loop
    
    iTipoGrupo = 3
    sTextoGrupo = "Saídas" ' Saídas por natureza
    sTextoDescricao = ""
    sTextoGrupoValor(1) = ""
    sTextoGrupoValor(2) = ""
    sTextoGrupoValor(3) = ""
       
    If iLayout = POS_FINANC_LAYOUT_DIARIO Then 'Por Natureza com top fornecedores
    
        If dValMinForn <> -1 Then
        
            'Exibe top fornecedores
            sNomeForn = String(STRING_MAXIMO, 0)
            lErro = Comando_Executar(alComando(6), "SELECT CONVERT(VARCHAR,CliForn) + '-' + NomeCliForn, SUM(Debito) FROM RelPosFinancAux WHERE NumIntRel = ? GROUP BY CONVERT(VARCHAR,CliForn) + '-' + NomeCliForn HAVING SUM(Debito) >= ? ORDER BY SUM(Debito) DESC ", _
                sNomeForn, tMovCta.dValor, lNumIntRel, dValMinForn)
            If lErro <> AD_SQL_SUCESSO Then gError 211889
            
            lErro = Comando_BuscarPrimeiro(alComando(6))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211890
            
            Do While lErro = AD_SQL_SUCESSO
        
                iSeq = iSeq + 1
                
                sDescricao = sNomeForn
                dValor(1) = 0
                dValor(2) = 0
                dValor(3) = tMovCta.dValor
            
                lErro = Comando_Executar(alComando(1), "INSERT INTO RelPosFinanc (NumIntRel, Seq, TipoGrupo, TextoGrupo, TextoDescricao, TextoValor1, TextoValor2, TextoValor3, Descricao, Valor1, Valor2, Valor3) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) ", _
                                                        lNumIntRel, iSeq, iTipoGrupo, sTextoGrupo, sTextoDescricao, sTextoGrupoValor(1), sTextoGrupoValor(2), sTextoGrupoValor(3), sDescricao, dValor(1), dValor(2), dValor(3))
                If lErro <> AD_SQL_SUCESSO Then gError 211891
        
                lErro = Comando_BuscarProximo(alComando(6))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211892
             
            Loop

        End If
        
        sDescNatureza = String(STRING_MAXIMO, 0)

        'Exibe por natureza para os demais
        If dValMinForn <> -1 Then
            lErro = Comando_Executar(alComando(7), "SELECT DescNatureza, SUM(Debito) FROM RelPosFinancAux R1 WHERE NumIntRel = ? AND NOT EXISTS (SELECT * FROM RelPosFinanc R2 WHERE R2.TipoGrupo = 3 AND R1.NumIntRel=R2.NumIntRel AND R2.Descricao = (CONVERT(VARCHAR,CliForn) + '-' + NomeCliForn)) GROUP BY DescNatureza HAVING SUM(Debito) > 0 ORDER BY DescNatureza ", _
                sDescNatureza, tMovCta.dValor, lNumIntRel)
        Else
            lErro = Comando_Executar(alComando(7), "SELECT DescNatureza, SUM(Debito) FROM RelPosFinancAux WHERE NumIntRel = ? GROUP BY DescNatureza HAVING SUM(Debito) > 0 ORDER BY DescNatureza ", _
                sDescNatureza, tMovCta.dValor, lNumIntRel)
        End If
        If lErro <> AD_SQL_SUCESSO Then gError 211893
        
        lErro = Comando_BuscarPrimeiro(alComando(7))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211894
        
        Do While lErro = AD_SQL_SUCESSO
    
            iSeq = iSeq + 1
            
            sDescricao = sDescNatureza
            dValor(1) = 0
            dValor(2) = 0
            dValor(3) = tMovCta.dValor
        
            lErro = Comando_Executar(alComando(1), "INSERT INTO RelPosFinanc (NumIntRel, Seq, TipoGrupo, TextoGrupo, TextoDescricao, TextoValor1, TextoValor2, TextoValor3, Descricao, Valor1, Valor2, Valor3) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) ", _
                                                    lNumIntRel, iSeq, iTipoGrupo, sTextoGrupo, sTextoDescricao, sTextoGrupoValor(1), sTextoGrupoValor(2), sTextoGrupoValor(3), sDescricao, dValor(1), dValor(2), dValor(3))
            If lErro <> AD_SQL_SUCESSO Then gError 211895
    
            lErro = Comando_BuscarProximo(alComando(7))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211896
         
        Loop
       
    Else 'Por grupo de natureza
    
        sDescGrupoNat = String(STRING_MAXIMO, 0)

        lErro = Comando_Executar(alComando(8), "SELECT DescGrupoNat, SUM(Debito) FROM RelPosFinancAux WHERE NumIntRel = ? GROUP BY DescGrupoNat HAVING SUM(Debito) > 0 ORDER BY DescGrupoNat ", _
        sDescGrupoNat, tMovCta.dValor, lNumIntRel)
        If lErro <> AD_SQL_SUCESSO Then gError 211897
        
        lErro = Comando_BuscarPrimeiro(alComando(8))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211898
        
        Do While lErro = AD_SQL_SUCESSO
    
            iSeq = iSeq + 1
            
            sDescricao = sDescGrupoNat
            dValor(1) = 0
            dValor(2) = 0
            dValor(3) = tMovCta.dValor
        
            lErro = Comando_Executar(alComando(1), "INSERT INTO RelPosFinanc (NumIntRel, Seq, TipoGrupo, TextoGrupo, TextoDescricao, TextoValor1, TextoValor2, TextoValor3, Descricao, Valor1, Valor2, Valor3) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) ", _
                                                    lNumIntRel, iSeq, iTipoGrupo, sTextoGrupo, sTextoDescricao, sTextoGrupoValor(1), sTextoGrupoValor(2), sTextoGrupoValor(3), sDescricao, dValor(1), dValor(2), dValor(3))
            If lErro <> AD_SQL_SUCESSO Then gError 211899
            
            sDescNatureza = String(STRING_MAXIMO, 0)
            
            lErro = Comando_Executar(alComando(9), "SELECT DescNatureza, SUM(Debito) FROM RelPosFinancAux WHERE NumIntRel = ? AND DescGrupoNat = ? GROUP BY DescNatureza HAVING SUM(Debito) > 0 ORDER BY DescNatureza ", _
            sDescNatureza, tMovCta.dValor, lNumIntRel, sDescGrupoNat)
            If lErro <> AD_SQL_SUCESSO Then gError 211900
            
            lErro = Comando_BuscarPrimeiro(alComando(9))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211901
            
            Do While lErro = AD_SQL_SUCESSO
        
                iSeq = iSeq + 1
                
                sDescricao = "     " & sDescNatureza
                dValor(1) = 0
                dValor(2) = 0
                dValor(3) = tMovCta.dValor
            
                lErro = Comando_Executar(alComando(1), "INSERT INTO RelPosFinanc (NumIntRel, Seq, TipoGrupo, TextoGrupo, TextoDescricao, TextoValor1, TextoValor2, TextoValor3, Descricao, Valor1, Valor2, Valor3) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) ", _
                                                        lNumIntRel, iSeq, iTipoGrupo, sTextoGrupo, sTextoDescricao, sTextoGrupoValor(1), sTextoGrupoValor(2), sTextoGrupoValor(3), sDescricao, dValor(1), dValor(2), dValor(3))
                If lErro <> AD_SQL_SUCESSO Then gError 211902
        
        
                lErro = Comando_BuscarProximo(alComando(9))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211903
             
            Loop
    
            lErro = Comando_BuscarProximo(alComando(8))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211904
         
        Loop
        
    End If

    lErro = Comando_Executar(alComando(10), "DELETE RelPosFinancAux WHERE NumIntRel = ? ", lNumIntRel)
    If lErro <> AD_SQL_SUCESSO Then gError 211905

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    For iIndice = LBound(alComandoAux1) To UBound(alComandoAux1)
        Call Comando_Fechar(alComandoAux1(iIndice))
    Next
    
    For iIndice = LBound(alComandoAux2) To UBound(alComandoAux2)
        Call Comando_Fechar(alComandoAux2(iIndice))
    Next
    
     'fechar transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 211906

    RelPosFinanc_Prepara = SUCESSO

    Exit Function

Erro_RelPosFinanc_Prepara:

    RelPosFinanc_Prepara = gErr

    Select Case gErr

        Case 211866
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 211867 To 211869
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 211870, 211871, 211873, 211876, 211877, 211879, 211881, 211882, 211884
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCONTACORRENTE", gErr)

        Case 211872, 211874, 211875, 211878, 211880, 211883, 211887, 211891, 211895, 211899, 211902
            Call Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_RELPOSFINANC", gErr)
        
        Case 211885, 211886, 211888, 211889, 211890, 211892, 211893, 211894, 211896, 211897, 211898, 211900, 211901, 211903, 211904
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RELPOSFINANCAUX", gErr)
        
        Case 211905
            Call Rotina_Erro(vbOKOnly, "ERRO_DELETE_RELPOSFINANCAUX", gErr)
        
        Case 211906
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case ERRO_SEM_MENSAGEM

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 211907)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    For iIndice = LBound(alComandoAux1) To UBound(alComandoAux1)
        Call Comando_Fechar(alComandoAux1(iIndice))
    Next
    For iIndice = LBound(alComandoAux2) To UBound(alComandoAux2)
        Call Comando_Fechar(alComandoAux2(iIndice))
    Next
    
    Call Transacao_Rollback
    
    Exit Function

End Function

Public Function RelPosFinanc_Obtem_Natureza(alComando() As Long, ByVal iTipoMov As Integer, ByVal lNumMovto As Long, ByVal sNaturezaMovto As String, ByVal dValorMovto As Double, ByVal colRet As Collection) As Long

Dim lErro As Long
Dim objNatAux As ClassNatMovCtaAux
Dim sSQL As String
Dim sNatureza As String, dValor As Double, dValorJuros As Double, lNumIntDoc As Long
Dim dValorJurosTotal As Double, lCliForn As Long, sNomeCliForn As String

On Error GoTo Erro_RelPosFinanc_Obtem_Natureza

    Select Case iTipoMov
    
        Case 6 'Adiantamento para Fornecedor
               
            sNomeCliForn = String(STRING_MAXIMO, 0)
               
            lErro = Comando_Executar(alComando(1), "SELECT P.Fornecedor, F.NomeReduzido FROM PagtosAntecipados AS P, Fornecedores AS F WHERE P.Fornecedor = F.Codigo AND NumMovto = ?", _
            lCliForn, sNomeCliForn, lNumMovto)
            If lErro <> AD_SQL_SUCESSO Then gError 211908
            
            lErro = Comando_BuscarPrimeiro(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211909
            
            Set objNatAux = New ClassNatMovCtaAux
            colRet.Add objNatAux
            objNatAux.iTipoDoc = 0
            objNatAux.lNumIntDoc = 0
            objNatAux.sNatureza = sNaturezaMovto
            objNatAux.dValor = dValorMovto
            objNatAux.iTipoCliForn = 2
            objNatAux.lCliForn = lCliForn
            objNatAux.sNomeCliForn = sNomeCliForn
        
        Case 7 'Adiantamento de Cliente
        
            sNomeCliForn = String(STRING_MAXIMO, 0)
        
            lErro = Comando_Executar(alComando(2), "SELECT R.Cliente, C.NomeReduzido FROM RecebAntecipados AS R, Clientes AS C WHERE R.Cliente = C.Codigo AND NumMovto = ?", _
            lCliForn, sNomeCliForn, lNumMovto)
            If lErro <> AD_SQL_SUCESSO Then gError 211910
            
            lErro = Comando_BuscarPrimeiro(alComando(2))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211911
        
            Set objNatAux = New ClassNatMovCtaAux
            colRet.Add objNatAux
            objNatAux.iTipoDoc = 0
            objNatAux.lNumIntDoc = 0
            objNatAux.sNatureza = sNaturezaMovto
            objNatAux.dValor = dValorMovto
            objNatAux.iTipoCliForn = 1
            objNatAux.lCliForn = lCliForn
            objNatAux.sNomeCliForn = sNomeCliForn
            
        Case 8, 24 'Recebimento de cliente - > BaixasRec
        
            dValorJurosTotal = 0
        
            sNatureza = String(STRING_MAXIMO, 0)
            sNomeCliForn = String(STRING_MAXIMO, 0)
        
            sSQL = "SELECT T.Cliente, C.NomeReduzido, T.Natureza, BP.NumIntDoc, BP.ValorRecebido, BP.ValorJuros + BP.ValorMulta FROM TitulosRecTodos AS T, ParcelasRecTodas AS P, BaixasParcRec As BP, Clientes AS C, BaixasRec As B"
            sSQL = sSQL & " " & "WHERE T.NumIntDoc = P.NumIntTitulo And P.NumIntDoc = BP.NumIntParcela AND T.Cliente = C.Codigo AND B.NumIntBaixa = BP.NumIntBaixa AND BP.Status <> 5 AND B.Status <> 5"
            sSQL = sSQL & " " & "AND B.NumMovCta = ?"
        
            lErro = Comando_Executar(alComando(3), sSQL, _
            lCliForn, sNomeCliForn, sNatureza, lNumIntDoc, dValor, dValorJuros, lNumMovto)
            If lErro <> AD_SQL_SUCESSO Then gError 211912
            
            lErro = Comando_BuscarPrimeiro(alComando(3))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211913
            
            Do While lErro = AD_SQL_SUCESSO
        
                dValorJurosTotal = dValorJurosTotal + dValorJuros
                
                Set objNatAux = New ClassNatMovCtaAux
                colRet.Add objNatAux
                objNatAux.iTipoDoc = TRANSACAOCTBORIGEM_BAIXASPARCREC
                objNatAux.lNumIntDoc = lNumIntDoc
                objNatAux.sNatureza = sNatureza
                objNatAux.iTipoCliForn = 1
                objNatAux.lCliForn = lCliForn
                objNatAux.sNomeCliForn = sNomeCliForn
                objNatAux.dValor = dValor - dValorJuros
        
                If dValorJuros > DELTA_VALORMONETARIO Then
                    Set objNatAux = New ClassNatMovCtaAux
                    colRet.Add objNatAux
                    objNatAux.iTipoDoc = TRANSACAOCTBORIGEM_BAIXASPARCREC
                    objNatAux.lNumIntDoc = lNumIntDoc
                    objNatAux.sNatureza = "030008    "
                    objNatAux.dValor = dValorJuros
                    objNatAux.iTipoCliForn = 1
                    objNatAux.lCliForn = lCliForn
                    objNatAux.sNomeCliForn = sNomeCliForn
                End If
        
                lErro = Comando_BuscarProximo(alComando(3))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211914
             
            Loop
        
        Case 9, 10, 12 'Pagto de Título por Cheque/Borderô/Dinheiro - > BaixasPag
        
            dValorJurosTotal = 0
        
            sNatureza = String(STRING_MAXIMO, 0)
            sNomeCliForn = String(STRING_MAXIMO, 0)
        
            sSQL = "SELECT T.Fornecedor, C.NomeReduzido, T.Natureza, BP.NumIntDoc, BP.ValorBaixado FROM TitulosPagTodos AS T, ParcelasPagTodas AS P, BaixasParcPag As BP, Fornecedores AS C, BaixasPag As B"
            sSQL = sSQL & " " & "WHERE T.NumIntDoc = P.NumIntTitulo And P.NumIntDoc = BP.NumIntParcela AND T.Fornecedor = C.Codigo AND B.NumIntBaixa = BP.NumIntBaixa AND BP.Status <> 5 AND B.Status <> 5"
            sSQL = sSQL & " " & "AND B.NumMovCta = ?"
        
            lErro = Comando_Executar(alComando(4), sSQL, _
            lCliForn, sNomeCliForn, sNatureza, lNumIntDoc, dValor, lNumMovto)
            If lErro <> AD_SQL_SUCESSO Then gError 211915
            
            lErro = Comando_BuscarPrimeiro(alComando(4))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211916
            
            Do While lErro = AD_SQL_SUCESSO
        
                dValorJurosTotal = dValorJurosTotal + dValorJuros
                
                Set objNatAux = New ClassNatMovCtaAux
                colRet.Add objNatAux
                objNatAux.iTipoDoc = TRANSACAOCTBORIGEM_BAIXASPARCPAG
                objNatAux.lNumIntDoc = lNumIntDoc
                objNatAux.sNatureza = sNatureza
                objNatAux.dValor = dValor
                objNatAux.iTipoCliForn = 2
                objNatAux.lCliForn = lCliForn
                objNatAux.sNomeCliForn = sNomeCliForn
        
                lErro = Comando_BuscarProximo(alComando(4))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211917
             
            Loop
            
        Case Else
'            Set objNatAux = New ClassNatMovCtaAux
'            colRet.Add objNatAux
'            objNatAux.iTipoDoc = 0
'            objNatAux.lNumIntDoc = 0
'            objNatAux.sNatureza = sNaturezaMovto
'            objNatAux.dValor = dValorMovto
    
    End Select
    
    dValor = 0
    For Each objNatAux In colRet
        dValor = dValor + objNatAux.dValor
    Next
    
    'Para tratar baixas excluídas, clientes, fornecedores, etc onde tem o movimento de conta corrente ativo e os demais não
    If Abs(dValor - dValorMovto) > DELTA_VALORMONETARIO Then
        Set objNatAux = New ClassNatMovCtaAux
        objNatAux.iTipoDoc = 0
        objNatAux.lNumIntDoc = 0
        objNatAux.sNatureza = sNaturezaMovto
        objNatAux.dValor = dValorMovto - dValor
        colRet.Add objNatAux
    End If

    RelPosFinanc_Obtem_Natureza = SUCESSO

    Exit Function

Erro_RelPosFinanc_Obtem_Natureza:

    RelPosFinanc_Obtem_Natureza = gErr

    Select Case gErr

        Case 211908, 211909
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PAGTO_ANTECIPADO2", gErr)

        Case 211910, 211911
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RECEB_ANTEC", gErr)

        Case 211911 To 211914
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_REC", gErr)

        Case 211914 To 211917
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_PAG2", gErr)

        Case ERRO_SEM_MENSAGEM

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 211918)

    End Select
    
    Exit Function
    
End Function

Public Function NFiscal_Trata_Eventos_WorkFlow(ByVal objNF As ClassNFiscal) As Long

Dim lErro As Long

On Error GoTo Erro_NFiscal_Trata_Eventos_WorkFlow

    lErro = CF("NFiscal_Trata_Eventos_WorkFlow_Compras", objNF)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    NFiscal_Trata_Eventos_WorkFlow = SUCESSO

    Exit Function

Erro_NFiscal_Trata_Eventos_WorkFlow:

    NFiscal_Trata_Eventos_WorkFlow = gErr

    Select Case gErr

        Case ERRO_SEM_MENSAGEM

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 211918)

    End Select
    
    Exit Function
    
End Function

Function NotaFiscalRemPedidoSaida_Excluir(ByVal objNFiscal As ClassNFiscal, ByVal objContabil As ClassContabil) As Long
'Faz o cancelamento de uma nota fiscal de Saida

Dim lErro As Long, iIndice As Integer
Dim lTransacao As Long, alComando(0 To 10) As Long

On Error GoTo Erro_NotaFiscalRemPedidoSaida_Excluir
    
    'ABre a transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 96029

    lErro = CF("NotaFiscalRemPedidoSaida_Excluir_EmTrans", objNFiscal, objContabil)
    If lErro <> SUCESSO Then gError 210976
    
    'Confirma a transacao
    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then gError 96058
    
    NotaFiscalRemPedidoSaida_Excluir = SUCESSO

    Exit Function

Erro_NotaFiscalRemPedidoSaida_Excluir:

    NotaFiscalRemPedidoSaida_Excluir = gErr

    Select Case gErr
       
        Case 96029
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 96058
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case 210976
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 210977)

    End Select

    Call Transacao_Rollback

    Exit Function

End Function

Public Function Rel12SemanasProd_Prepara(lNumIntRel As Long, ByVal iFilialEmpresaFiltro As Integer, ByVal dtDataBase As Date, ByVal lStatus As Long, ByVal lFornecedor As Long) As Long

Dim lErro As Long
Dim iIndice As Integer
Dim lTransacao As Long
Dim alComando(0 To 3) As Long
Dim lSeq As Long, iSemana As Integer, dtDataIniRel As Date, dtDataFimRel As Date
Dim iSem(0 To 13) As Integer, bConsidera As Double
Dim dtDataAux As Date, dtDataIni(0 To 13) As Date, dtDataFim(0 To 13) As Date
Dim sTipoDoc As String, lNumIntDocItem As Long, lNumIntDoc As Long, lCodigo As Long
Dim iFilialEmpresa As Integer, lCliForn As Long, sNomeCliForn As String, dtDataPrev As Date
Dim sProduto As String, sDescricao As String, dQuantidade As Double
Dim dPrecoUnitario As Double, dValor As Double, dQtdeAjuste As Double, dQtdeAjusteAux As Double

On Error GoTo Erro_Rel12SemanasProd_Prepara

    'Abrir transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 208029

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 208030
    Next
       
    'Obter NumIntRel
    lErro = CF("Config_ObterNumInt", "FATConfig", "NUMINTREL_REL12SEMANASPROD", lNumIntRel)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    Call Rel12Semanas_Semana(dtDataBase, iSem(0), dtDataIni(0))
    
    dtDataIniRel = dtDataIni(0)

    dtDataFim(0) = DateAdd("d", 6, dtDataIni(0))
    
    'ESSE TRECHO QUEBRA SEMANAS ONDE OCORRE VIRADA DE MÊS
    'PARA ESSE RELATÓRIO VOU DEIXAR A SEMANA CHEIA, SEMPRE ACABANDO NA SEXTA-FEIRA
'    If Month(dtDataFim(0)) <> Month(dtDataIni(0)) Then
'        'Se mudou de mês quebra no último dia do mês
'        dtDataFim(0) = DateAdd("d", -Day(dtDataFim(0)), dtDataFim(0))
'    End If

    For iIndice = 1 To 11
    
        dtDataIni(iIndice) = DateAdd("d", 1, dtDataFim(iIndice - 1))
        Call Rel12Semanas_Semana(dtDataIni(iIndice), iSem(iIndice), dtDataAux)
    
        dtDataFim(iIndice) = DateAdd("d", 6, dtDataAux)
'        If Month(dtDataFim(iIndice)) <> Month(dtDataIni(iIndice)) Then
'            'Se mudou de mês quebra no último dia do mês
'            dtDataFim(iIndice) = DateAdd("d", -Day(dtDataFim(iIndice)), dtDataFim(iIndice))
'        End If
        
    Next
    dtDataFimRel = dtDataFim(11)
    
    sNomeCliForn = String(STRING_MAXIMO, 0)
    sTipoDoc = String(STRING_MAXIMO, 0)
    sProduto = String(STRING_MAXIMO, 0)
    sDescricao = String(STRING_MAXIMO, 0)
    
    If lFornecedor = 0 Then
        'lErro = Comando_Executar(alComando(0), "SELECT TipoDoc,NumIntDocItem,NumIntDoc,Codigo,FilialEmpresa,CliForn,NomeCliForn,DataPrev,Produto,Descricao,Quantidade,PrecoUnitario,Valor,QtdeAjuste FROM Rel12SemanasProd WHERE DataPrev BETWEEN ? AND ? AND Status >= ? AND (FilialEmpresa = ? OR ?=?) ORDER BY Produto, DataPrev", sTipoDoc, lNumIntDocItem, lNumIntDoc, lCodigo, iFilialEmpresa, lCliForn, sNomeCliForn, dtDataPrev, sProduto, sDescricao, dQuantidade, dPrecoUnitario, dValor, dQtdeAjuste, dtDataIniRel, dtDataFimRel, lStatus, iFilialEmpresaFiltro, iFilialEmpresaFiltro, EMPRESA_TODA)
        lErro = Comando_Executar(alComando(0), "SELECT TipoDoc,NumIntDocItem,NumIntDoc,Codigo,FilialEmpresa,CliForn,NomeCliForn,DataPrev,Produto,Descricao,Quantidade,PrecoUnitario,Valor,QtdeAjuste FROM Rel12SemanasProd WHERE DataPrev >= ? AND Status >= ? AND (FilialEmpresa = ? OR ?=?) ORDER BY Produto, DataPrev", sTipoDoc, lNumIntDocItem, lNumIntDoc, lCodigo, iFilialEmpresa, lCliForn, sNomeCliForn, dtDataPrev, sProduto, sDescricao, dQuantidade, dPrecoUnitario, dValor, dQtdeAjuste, dtDataIniRel, lStatus, iFilialEmpresaFiltro, iFilialEmpresaFiltro, EMPRESA_TODA)
    Else
        'lErro = Comando_Executar(alComando(0), "SELECT TipoDoc,NumIntDocItem,NumIntDoc,Codigo,FilialEmpresa,CliForn,NomeCliForn,DataPrev,Produto,Descricao,Quantidade,PrecoUnitario,Valor,QtdeAjuste FROM Rel12SemanasProd WHERE DataPrev BETWEEN ? AND ? AND Status >= ? AND (FilialEmpresa = ? OR ?=?) AND Produto IN (SELECT Produto FROM FornecedorProdutoFF WHERE Fornecedor = ?) ORDER BY Produto, DataPrev", sTipoDoc, lNumIntDocItem, lNumIntDoc, lCodigo, iFilialEmpresa, lCliForn, sNomeCliForn, dtDataPrev, sProduto, sDescricao, dQuantidade, dPrecoUnitario, dValor, dQtdeAjuste, dtDataIniRel, dtDataFimRel, lStatus, iFilialEmpresaFiltro, iFilialEmpresaFiltro, EMPRESA_TODA, lFornecedor)
        lErro = Comando_Executar(alComando(0), "SELECT TipoDoc,NumIntDocItem,NumIntDoc,Codigo,FilialEmpresa,CliForn,NomeCliForn,DataPrev,Produto,Descricao,Quantidade,PrecoUnitario,Valor,QtdeAjuste FROM Rel12SemanasProd WHERE DataPrev >= ? AND Status >= ? AND (FilialEmpresa = ? OR ?=?) AND Produto IN (SELECT Produto FROM FornecedorProdutoFF WHERE Fornecedor = ?) ORDER BY Produto, DataPrev", sTipoDoc, lNumIntDocItem, lNumIntDoc, lCodigo, iFilialEmpresa, lCliForn, sNomeCliForn, dtDataPrev, sProduto, sDescricao, dQuantidade, dPrecoUnitario, dValor, dQtdeAjuste, dtDataIniRel, lStatus, iFilialEmpresaFiltro, iFilialEmpresaFiltro, EMPRESA_TODA, lFornecedor)
    End If
    If lErro <> AD_SQL_SUCESSO Then gError 208033
    
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 208034

    lSeq = 0
    Do While lErro = AD_SQL_SUCESSO
    
        bConsidera = True
        If dQtdeAjuste <> 0 And sTipoDoc = "PC" Then
            'Ajusta caso já tenha recebido parte do pedido de compra
            'Vai ignorar as primeiras entregas até ter saldo
            'se tiver saldo vai ajustar o valor e quantidade
            lErro = Comando_Executar(alComando(2), "SELECT SUM(Quantidade) FROM ItensPCEntrega WHERE NumIntItemPC = ? AND DataEntrega < ? ", dQtdeAjusteAux, dtDataPrev, lNumIntDocItem)
            If lErro <> AD_SQL_SUCESSO Then gError 210763
        
            lErro = Comando_BuscarPrimeiro(alComando(2))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210764
            
            If dQtdeAjuste > dQtdeAjusteAux Then
                dQtdeAjuste = dQtdeAjuste - dQtdeAjusteAux
            End If
            If dQtdeAjuste > dQuantidade Then
                bConsidera = False
            Else
                dValor = (dValor / dQuantidade) * dQtdeAjuste
                dQuantidade = dQtdeAjuste
            End If
        End If
        
        If bConsidera Then
        
            For iIndice = 0 To 11
                If dtDataPrev >= dtDataIni(iIndice) And dtDataPrev <= dtDataFim(iIndice) Then
                    iSemana = iIndice + 1
                    Exit For
                End If
            Next
        
            If iSemana > 0 And iSemana < 13 Then
            
                lErro = Comando_Executar(alComando(1), "INSERT INTO Rel12SemanasProdTemp (NumIntRel,Semana,DataIniSemana,DataFimSemana,TipoDoc,NumIntDocItem,NumIntDoc,Codigo,FilialEmpresa,CliForn,NomeCliForn,DataPrev,Produto,Descricao,Quantidade,PrecoUnitario,Valor ) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ", _
                lNumIntRel, iSem(iSemana - 1), dtDataIni(iSemana - 1), dtDataFim(iSemana - 1), sTipoDoc, lNumIntDocItem, lNumIntDoc, lCodigo, iFilialEmpresa, lCliForn, sNomeCliForn, dtDataPrev, sProduto, sDescricao, dQuantidade, dPrecoUnitario, dValor)
                If lErro <> AD_SQL_SUCESSO Then gError 208037
                
            End If
            
        End If
        
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 208038

    Loop

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    'Fechar transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 208039

    Rel12SemanasProd_Prepara = SUCESSO

    Exit Function

Erro_Rel12SemanasProd_Prepara:

    Rel12SemanasProd_Prepara = gErr

    Select Case gErr

        Case 208029
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 208030
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 208031 To 208034, 208038
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ORCAMENTOVENDA", gErr)

        Case 208035, 208036
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PROJETOS", gErr)

        Case 208037
            Call Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_REL12SEMANAS", gErr)

        Case 208039
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
                        
        Case ERRO_SEM_MENSAGEM
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 208040)

    End Select
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Call Transacao_Rollback

    Exit Function

End Function

Public Function ProdutoLojaTrib_Gera(ByVal iFilialEmpresa As Integer, ByVal sProduto As String, lNumIntDocTrib As Long) As Long

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_ProdutoLojaTrib_Gera

    'Abrir transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 201549

    lErro = CF("ProdutoLojaTrib_Gera_EmTrans", iFilialEmpresa, sProduto, lNumIntDocTrib)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    'Fechar transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 201551
    
    ProdutoLojaTrib_Gera = SUCESSO
    
    Exit Function
    
Erro_ProdutoLojaTrib_Gera:

    ProdutoLojaTrib_Gera = gErr

    Select Case gErr
 
        Case 201549
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 201551
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
                        
        Case ERRO_SEM_MENSAGEM
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 201548)

    End Select
    
    Call Transacao_Rollback

    Exit Function

End Function

Public Function ProdutoLojaTrib_Gera_EmTrans(ByVal iFilialEmpresa As Integer, ByVal sProduto As String, lNumIntDocTrib As Long) As Long

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(0 To 3) As Long
Dim objNFiscal As New ClassNFiscal, sSeriePadrao As String, lNumIntDoc As Long, objTributacaoItemNF As ClassTributacaoDocItem

On Error GoTo Erro_ProdutoLojaTrib_Gera_EmTrans

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 201550
    Next
       
    'Lê série Padrão
    lErro = CF("Serie_Le_Padrao", sSeriePadrao)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    objNFiscal.sSerie = sSeriePadrao
    
    lErro = ProdutoLojaTrib_Gera1(iFilialEmpresa, sProduto, objNFiscal)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_ExecutarPos(alComando(0), "SELECT NumIntDoc FROM ProdutoLojaTrib WHERE FilialEmpresa = ? AND Produto = ?", 0, lNumIntDoc, iFilialEmpresa, sProduto)
    If lErro <> AD_SQL_SUCESSO Then gError 201552
    
    lErro = Comando_BuscarProximo(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 201553
    
    If lErro = AD_SQL_SUCESSO Then
    
        lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM ProdutoLojaTrib", alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 201554
    
        lErro = Comando_Executar(alComando(2), "DELETE FROM TributacaoDocItem WHERE NumIntDoc = ? AND TipoDoc = ?", lNumIntDoc, TIPODOC_TRIB_PRODLOJA)
        If lErro <> AD_SQL_SUCESSO Then gError 201555
    
    End If
    
    lErro = CF("Config_ObterNumInt", "CRFatConfig", "NUM_PROX_PRODUTOLOJATRIB", lNumIntDoc)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_Executar(alComando(3), "INSERT INTO ProdutoLojaTrib (NumIntDoc, FilialEmpresa, Produto) VALUES (?,?,?)", lNumIntDoc, iFilialEmpresa, sProduto)
    If lErro <> AD_SQL_SUCESSO Then gError 201556
    
    Set objTributacaoItemNF = objNFiscal.colItens(1).objTributacaoItemNF
    objTributacaoItemNF.iTipoDoc = TIPODOC_TRIB_PRODLOJA
    objTributacaoItemNF.lNumIntDoc = lNumIntDoc
    objTributacaoItemNF.lNumIntDocItem = lNumIntDoc
    
    lErro = CF("TributacaoDocItem_Grava", objTributacaoItemNF)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    lNumIntDocTrib = lNumIntDoc

    ProdutoLojaTrib_Gera_EmTrans = SUCESSO
    
    Exit Function
    
Erro_ProdutoLojaTrib_Gera_EmTrans:

    ProdutoLojaTrib_Gera_EmTrans = gErr

    Select Case gErr
 
        Case 201550
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 201552 To 201556
            Call Rotina_Erro(vbOKOnly, "ERRO_GRAVACAO_PRODUTOLOJATRIB", gErr)
        
        Case ERRO_SEM_MENSAGEM
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 201548)

    End Select
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function ProdutoLojaTrib_Gera1(ByVal iFilialEmpresa As Integer, ByVal sProduto As String, objNFiscal As ClassNFiscal) As Long

Dim lErro As Long
Dim iTotalItens As Integer
Dim iTotal As Integer
Dim objItemNF As ClassItemNF
Dim dValorTotal As Double, objTribTab As ClassTribTab
Dim objTipoDocInfo As New ClassTipoDocInfo
Dim objProduto As ClassProduto

On Error GoTo Erro_ProdutoLojaTrib_Gera1

    Call objNFiscal.Inicializa_Tributacao
    Call objNFiscal.objTributacaoNF.Coloca_Auto
    
    objNFiscal.iCondicaoPagto = 0
    objNFiscal.iFilialCli = FILIAL_MATRIZ
    objNFiscal.lCliente = gobjFAT.lCodCliNFCeSemCPF 'CLIENTE_LOJA_TRIB
    objNFiscal.dtDataReferencia = gdtDataAtual
    objNFiscal.dtDataEmissao = gdtDataAtual
    objNFiscal.dtDataSaida = gdtDataAtual
    objNFiscal.dtDataEntrada = DATA_NULA
    objNFiscal.dtDataVencimento = DATA_NULA
    objNFiscal.iFilialEmpresa = iFilialEmpresa
    objNFiscal.iFilialEntrega = FILIAL_MATRIZ
    
    objNFiscal.iTipoDocInfo = DOCINFO_NFISSAT
    objNFiscal.iTipoNFiscal = DOCINFO_NFISSAT
    objNFiscal.iStatus = STATUS_LANCADO
    objNFiscal.iRecibo = 0
    
    Set objItemNF = New ClassItemNF
    Call objItemNF.Inicializa_Tributacao
    Call objItemNF.objTributacaoItemNF.Coloca_Auto
    
    objItemNF.dCusto = 0
    objItemNF.dQuantidade = 10
    objItemNF.dPrecoUnitario = 100
    objItemNF.dValorTotal = 1000
    objItemNF.sProduto = sProduto
    objItemNF.iItem = 1

    objNFiscal.colItensNF.Add1 objItemNF
    
    Set objProduto = New ClassProduto
    objProduto.sCodigo = objItemNF.sProduto
    
    lErro = CF("Produto_Le", objProduto)
    If lErro <> SUCESSO And lErro <> 28030 Then gError ERRO_SEM_MENSAGEM
    
    objItemNF.sUnidadeMed = objProduto.sSiglaUMVenda
    
    objItemNF.objTributacaoItemNF.sProduto = objProduto.sCodigo
    objItemNF.objTributacaoItemNF.iExTIPI = objProduto.iExTIPI
    objItemNF.objTributacaoItemNF.sGenero = objProduto.sGenero
    objItemNF.objTributacaoItemNF.iProdutoEspecifico = objProduto.iProdutoEspecifico
    objItemNF.objTributacaoItemNF.sUMTrib = objProduto.sSiglaUMTrib
    objItemNF.objTributacaoItemNF.sIPICodProduto = objProduto.sIPICodigo

    objItemNF.objTributacaoItemNF.dQtdTrib = objItemNF.dQuantidade
    objItemNF.objTributacaoItemNF.dValorUnitTrib = objItemNF.dPrecoUnitario
    objItemNF.objTributacaoItemNF.dPrecoTotal = objItemNF.dValorTotal
    objItemNF.objTributacaoItemNF.sProdutoDescricao = objProduto.sDescricao
    objItemNF.objTributacaoItemNF.sISSQN = objProduto.sISSQN
    
    objNFiscal.dValorProdutos = objItemNF.dValorTotal
    
    Set objTribTab = New ClassTribTab
    
    lErro = objTribTab.TributacaoNF_Reset(objNFiscal)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    'obtem dados do contrato
    Call objTribTab.TipoNFiscal_Definir(DOCINFO_NFISSAT, "NFISSAT")
    Call objTribTab.DataEmissao_Alterada(gdtDataAtual)
    Call objTribTab.Serie_Alterada(objNFiscal.sSerie)
    
    lErro = gobjTributacao.AtualizaImpostos(objTribTab.mvarobjNFTributacao, 1)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    lErro = objTribTab.PreencherNF(objNFiscal)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    Set objTribTab = Nothing
    
    objNFiscal.sNaturezaOp = objNFiscal.objTributacaoNF.sNaturezaOpInterna
    
    'acertar valor total e da parcela, considerando os tributos, retencóes,...
    objNFiscal.dValorTotal = dValorTotal + objNFiscal.objTributacaoNF.dICMSSubstValor + objNFiscal.objTributacaoNF.dIPIValor + objNFiscal.dValorFrete + objNFiscal.dValorSeguro + objNFiscal.dValorOutrasDespesas + IIf(objNFiscal.objTributacaoNF.iISSIncluso = 0, objNFiscal.objTributacaoNF.dISSValor, 0)
    
    ProdutoLojaTrib_Gera1 = SUCESSO
    
    Exit Function
    
Erro_ProdutoLojaTrib_Gera1:

    ProdutoLojaTrib_Gera1 = gErr

    Select Case gErr

        Case ERRO_SEM_MENSAGEM
 
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 201557)

    End Select
    
    Exit Function

End Function

Function Config_Altera_Obj(ByVal objConfig As ClassConfigOutros) As Long

Dim lErro As Long

On Error GoTo Erro_Config_Altera_Obj
    
    Select Case UCase(objConfig.sNomeObj)

        Case "GOBJCOM"
            lErro = CF("Config_Altera_Obj_COM", objConfig.sNomeProperty, objConfig.sConteudoNovo)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
 
        Case "GOBJCP"
            Call CallByName(gobjCP, objConfig.sNomeProperty, VbLet, objConfig.sConteudoNovo)
    
        Case "GOBJCR"
            Call CallByName(gobjCR, objConfig.sNomeProperty, VbLet, objConfig.sConteudoNovo)
    
        Case "GOBJCRFAT"
            Call CallByName(gobjCRFAT, objConfig.sNomeProperty, VbLet, objConfig.sConteudoNovo)
    
        Case "GOBJCTB"
            Call CallByName(gobjCTB, objConfig.sNomeProperty, VbLet, objConfig.sConteudoNovo)
    
        Case "GOBJEST"
            Call CallByName(gobjEST, objConfig.sNomeProperty, VbLet, objConfig.sConteudoNovo)
    
        Case "GOBJESTINICIAL"
            Call CallByName(gobjEstInicial, objConfig.sNomeProperty, VbLet, objConfig.sConteudoNovo)
    
        Case "GOBJFAT"
            Call CallByName(gobjFAT, objConfig.sNomeProperty, VbLet, objConfig.sConteudoNovo)
            
        Case "GOBJFIS"
            Call CallByName(gobjFIS, objConfig.sNomeProperty, VbLet, objConfig.sConteudoNovo)
            
        Case "GOBJLOJA"
            Call CallByName(gobjLoja, objConfig.sNomeProperty, VbLet, objConfig.sConteudoNovo)
            
        Case "GOBJECF"
            Call CallByName(gobjLojaECF, objConfig.sNomeProperty, VbLet, objConfig.sConteudoNovo)
            
        Case "GOBJMAT"
            Call CallByName(gobjMAT, objConfig.sNomeProperty, VbLet, objConfig.sConteudoNovo)
            
        Case "GOBJSRV"
            Call CallByName(gobjSRV, objConfig.sNomeProperty, VbLet, objConfig.sConteudoNovo)
            
        Case "GOBJTES"
            Call CallByName(gobjTES, objConfig.sNomeProperty, VbLet, objConfig.sConteudoNovo)
            
        Case "ADM"
            Call CallByName(ADM, objConfig.sNomeProperty, VbLet, objConfig.sConteudoNovo)
            
        Case Else
            gError 213395
            
    End Select
        
    Config_Altera_Obj = SUCESSO

    Exit Function

Erro_Config_Altera_Obj:

    Config_Altera_Obj = gErr
    
    Select Case gErr
    
        Case ERRO_SEM_MENSAGEM
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_ATRIBUICAO_VALOR_OBJ_GLOBAL", gErr, objConfig.sNomeObj, objConfig.sNomeProperty, objConfig.sConteudoNovo, Err.Description)
    
    End Select
    
    Exit Function
    
End Function

Public Function NFe_PAF_ImportarXml(ByVal objVenda As ClassVenda, lNumIntNF As Long) As Long
'grava na retaguarda a nfe gerada no paf obtendo os dados do xml

Dim lErro As Long, iIndice As Integer, objTribTab As ClassTribTab
Dim lTransacao As Long, objEndCli As ClassEndereco
Dim alComando(0 To 36) As Long, objNFe As Object, objNF As New ClassNFiscal, objCliente As ClassCliente
Dim objItemNF As ClassItemNF, objProduto As ClassProduto, objProt As New ClassNFeFedProtNFeView
Dim sProdEstProd As String, colRastreamento As New Collection, dFator As Double, objSAT As Object
Dim objEstoqueProduto As ClassEstoqueProduto, objItemAloc As ClassItemNFAlocacao
Dim colEndereco As Collection, lProxCodCliente As Long, objParcela As ClassParcelaReceber, bSAT As Boolean
Dim objEndereco As New ClassEndereco, iAlmoxarifado As Integer, lCodCliente As Long, iCodFilial As Integer
Dim sAux As String, iAux As Integer, sDirXml As String
Dim sChaveAcesso As String, sNFeArqXml As String, iFilialEmpresa As Integer
Dim iItemNF As Integer, iItemCupom As Integer, objItemCupom As ClassItemCupomFiscal, bSubstXml As Boolean
Dim sProdAux As String, bAchouProd As Boolean, iFilialEmpresa1 As Integer
Dim colItensRomaneioGrade As Collection, objItemRomaneio As ClassItemRomaneioGrade
Dim objKitVenda As ClassKitVenda, objProduto1 As ClassProduto, objReservaItem As ClassReservaItem
Dim sTipo As String, sVersao As String

On Error GoTo Erro_NFe_PAF_ImportarXml

'    'Abrir transacao
'    lTransacao = Transacao_Abrir()
'    If lTransacao = 0 Then gError 212001

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 212002
    Next
    
    sChaveAcesso = objVenda.objCupomFiscal.sNFeChaveAcesso
    sNFeArqXml = objVenda.objCupomFiscal.sNFeArqXml
    iFilialEmpresa = objVenda.objCupomFiscal.iFilialEmpresa
        
    bSubstXml = False
    If left(objVenda.objCupomFiscal.sNFeChaveAcesso, 34) >= "3315072180328600011365003000000331" And left(objVenda.objCupomFiscal.sNFeChaveAcesso, 34) <= "3315072180328600011365003000000381" And objVenda.objCupomFiscal.dHoraEmissao > 0.59 Then
        bSubstXml = True
        
        Select Case sNFeArqXml
        
            Case "C:\SGE\xml\33150721803286000113650030000003311436168800-procNfe.xml"
                sNFeArqXml = "C:\SGE\xml\33150721803286000113650030000003311965023202-pre.xml"
            
            Case "C:\SGE\xml\33150721803286000113650030000003321172599400-procNfe.xml"
                sNFeArqXml = "C:\SGE\xml\33150721803286000113650030000003321291938403-pre.xml"
            
            Case "C:\SGE\xml\33150721803286000113650030000003331450871801-procNfe.xml"
                sNFeArqXml = "C:\SGE\xml\33150721803286000113650030000003331545873003-pre.xml"
            
            Case "C:\SGE\xml\33150721803286000113650030000003341231792709-procNfe.xml"
                sNFeArqXml = "C:\SGE\xml\33150721803286000113650030000003341719707801-pre.xml"
            
            Case "C:\SGE\xml\33150721803286000113650030000003351030982443-procNfe.xml"
                sNFeArqXml = "C:\SGE\xml\3315072180328600011365003000000-pre.xml"
            
            Case "C:\SGE\xml\33150721803286000113650030000003361043523679-procNfe.xml"
                sNFeArqXml = "C:\SGE\xml\33150721803286000113650030000003361693439303-pre.xml"
            
            Case "C:\SGE\xml\33150721803286000113650030000003371118525107-procNfe.xml"
                sNFeArqXml = "C:\SGE\xml\33150721803286000113650030000003371615830200-pre.xml"
            
            Case "C:\SGE\xml\33150721803286000113650030000003381192791505-procNfe.xml"
                sNFeArqXml = "C:\SGE\xml\33150721803286000113650030000003381736187208-pre.xml"
            
            Case "C:\SGE\xml\33150721803286000113650030000003391920675900-procNfe.xml"
                sNFeArqXml = "C:\SGE\xml\33150721803286000113650030000003391278846402-pre.xml"
            
            Case "C:\SGE\xml\33150721803286000113650030000003401999717800-procNfe.xml"
                sNFeArqXml = "C:\SGE\xml\33150721803286000113650030000003401141240402-pre.xml"
            
            Case "C:\SGE\xml\33150721803286000113650030000003411865894208-procNfe.xml"
                sNFeArqXml = "C:\SGE\xml\33150721803286000113650030000003411081524148-pre.xml"
            
            Case "C:\SGE\xml\33150721803286000113650030000003421565613502-procNfe.xml"
                sNFeArqXml = "C:\SGE\xml\33150721803286000113650030000003421425208508-pre.xml"
            
            Case "C:\SGE\xml\33150721803286000113650030000003431089136060-procNfe.xml"
                sNFeArqXml = "C:\SGE\xml\33150721803286000113650030000003431834203607-pre.xml"
            
            Case "C:\SGE\xml\33150721803286000113650030000003441306669603-procNfe.xml"
                sNFeArqXml = "C:\SGE\xml\33150721803286000113650030000003441428888806-pre.xml"
            
            Case "C:\SGE\xml\33150721803286000113650030000003451026322430-procNfe.xml"
                sNFeArqXml = "C:\SGE\xml\33150721803286000113650030000003451124096400-pre.xml"
            
            Case "C:\SGE\xml\33150721803286000113650030000003461557778408-procNfe.xml"
                sNFeArqXml = "C:\SGE\xml\33150721803286000113650030000003461781714205-pre.xml"
            
            Case "C:\SGE\xml\33150721803286000113650030000003471744065409-procNfe.xml"
                sNFeArqXml = "C:\SGE\xml\33150721803286000113650030000003471602119606-pre.xml"
            
            Case "C:\SGE\xml\33150721803286000113650030000003481353035606-procNfe.xml"
                sNFeArqXml = "C:\SGE\xml\33150721803286000113650030000003481194263308-pre.xml"
            
            Case "C:\SGE\xml\33150721803286000113650030000003491716753309-procNfe.xml"
                sNFeArqXml = "C:\SGE\xml\33150721803286000113650030000003491166245209-pre.xml"
            
            Case "C:\SGE\xml\33150721803286000113650030000003501148900307-procNfe.xml"
                sNFeArqXml = "C:\SGE\xml\33150721803286000113650030000003501777307407-pre.xml"
            
            Case "C:\SGE\xml\33150721803286000113650030000003511525982301-procNfe.xml"
                sNFeArqXml = "C:\SGE\xml\33150721803286000113650030000003511924482701-pre.xml"
            
            Case "C:\SGE\xml\33150721803286000113650030000003521588416009-procNfe.xml"
                sNFeArqXml = "C:\SGE\xml\33150721803286000113650030000003521626450604-pre.xml"
            
            Case "C:\SGE\xml\33150721803286000113650030000003531035193984-procNfe.xml"
                sNFeArqXml = "C:\SGE\xml\33150721803286000113650030000003531826485603-pre.xml"
            
            Case "C:\SGE\xml\33150721803286000113650030000003541378301200-procNfe.xml"
                sNFeArqXml = "C:\SGE\xml\33150721803286000113650030000003541046097946-pre.xml"
            
            Case "C:\SGE\xml\33150721803286000113650030000003551670345006-procNfe.xml"
                sNFeArqXml = "C:\SGE\xml\33150721803286000113650030000003551738167400-pre.xml"
            
            Case "C:\SGE\xml\33150721803286000113650030000003561865441400-procNfe.xml"
                sNFeArqXml = "C:\SGE\xml\33150721803286000113650030000003561171343102-pre.xml"
            
            Case "C:\SGE\xml\33150721803286000113650030000003571917237105-procNfe.xml"
                sNFeArqXml = "C:\SGE\xml\33150721803286000113650030000003571759007708-pre.xml"
            
            Case "C:\SGE\xml\33150721803286000113650030000003581888269200-procNfe.xml"
                sNFeArqXml = "C:\SGE\xml\33150721803286000113650030000003581882397109-pre.xml"
            
            Case "C:\SGE\xml\33150721803286000113650030000003591588149001-procNfe.xml"
                sNFeArqXml = "C:\SGE\xml\33150721803286000113650030000003591708182205-pre.xml"
            
            Case "C:\SGE\xml\33150721803286000113650030000003601744384204-procNfe.xml"
                sNFeArqXml = "C:\SGE\xml\33150721803286000113650030000003601138602806-pre.xml"
            
            Case "C:\SGE\xml\33150721803286000113650030000003611452253409-procNfe.xml"
                sNFeArqXml = "C:\SGE\xml\33150721803286000113650030000003611686223506-pre.xml"
            
            Case "C:\SGE\xml\33150721803286000113650030000003621903307009-procNfe.xml"
                sNFeArqXml = "C:\SGE\xml\33150721803286000113650030000003621056499194-pre.xml"
            
            Case "C:\SGE\xml\33150721803286000113650030000003631986822302-procNfe.xml"
                sNFeArqXml = "C:\SGE\xml\33150721803286000113650030000003631341851400-pre.xml"
            
            Case "C:\SGE\xml\33150721803286000113650030000003641646981800-procNfe.xml"
                sNFeArqXml = "C:\SGE\xml\33150721803286000113650030000003641933777601-pre.xml"
            
            Case "C:\SGE\xml\33150721803286000113650030000003651484221803-procNfe.xml"
                sNFeArqXml = "C:\SGE\xml\33150721803286000113650030000003651225290108-pre.xml"
            
            Case "C:\SGE\xml\33150721803286000113650030000003661291517503-procNfe.xml"
                sNFeArqXml = "C:\SGE\xml\33150721803286000113650030000003661937819400-pre.xml"
            
            Case "C:\SGE\xml\33150721803286000113650030000003671592851108-procNfe.xml"
                sNFeArqXml = "C:\SGE\xml\33150721803286000113650030000003671414122908-pre.xml"
            
            Case "C:\SGE\xml\33150721803286000113650030000003681627616808-procNfe.xml"
                sNFeArqXml = "C:\SGE\xml\33150721803286000113650030000003681966993400-pre.xml"
            
            Case "C:\SGE\xml\33150721803286000113650030000003691510548206-procNfe.xml"
                sNFeArqXml = "C:\SGE\xml\33150721803286000113650030000003691793901409-pre.xml"
            
            Case "C:\SGE\xml\33150721803286000113650030000003701861433500-procNfe.xml"
                sNFeArqXml = "C:\SGE\xml\33150721803286000113650030000003701111578200-pre.xml"
            
            Case "C:\SGE\xml\33150721803286000113650030000003711940537100-procNfe.xml"
                sNFeArqXml = "C:\SGE\xml\33150721803286000113650030000003711576181007-pre.xml"
            
            Case "C:\SGE\xml\33150721803286000113650030000003721611795603-procNfe.xml"
                sNFeArqXml = "C:\SGE\xml\33150721803286000113650030000003721381942103-pre.xml"
            
            Case "C:\SGE\xml\33150721803286000113650030000003731369428400-procNfe.xml"
                sNFeArqXml = "C:\SGE\xml\33150721803286000113650030000003731563230807-pre.xml"
            
            Case "C:\SGE\xml\33150721803286000113650030000003741471957007-procNfe.xml"
                sNFeArqXml = "C:\SGE\xml\33150721803286000113650030000003741645493906-pre.xml"
            
            Case "C:\SGE\xml\33150721803286000113650030000003751298679303-procNfe.xml"
                sNFeArqXml = "C:\SGE\xml\33150721803286000113650030000003751367896908-pre.xml"
            
            Case "C:\SGE\xml\33150721803286000113650030000003761276733809-procNfe.xml"
                sNFeArqXml = "C:\SGE\xml\33150721803286000113650030000003761785557405-pre.xml"
            
            Case "C:\SGE\xml\33150721803286000113650030000003771395777807-procNfe.xml"
                sNFeArqXml = "C:\SGE\xml\33150721803286000113650030000003771609373604-pre.xml"
            
            Case "C:\SGE\xml\33150721803286000113650030000003781768275302-procNfe.xml"
                sNFeArqXml = "C:\SGE\xml\33150721803286000113650030000003781459671700-pre.xml"
            
            Case "C:\SGE\xml\33150721803286000113650030000003791265788307-procNfe.xml"
                sNFeArqXml = "C:\SGE\xml\33150721803286000113650030000003791449381005-pre.xml"
            
            Case "C:\SGE\xml\33150721803286000113650030000003801742151809-procNfe.xml"
                sNFeArqXml = "C:\SGE\xml\33150721803286000113650030000003801430585706-pre.xml"
            
            Case "C:\SGE\xml\33150721803286000113650030000003811680141802-procNfe.xml"
                sNFeArqXml = "C:\SGE\xml\33150721803286000113650030000003811131136702-pre.xml"
            
        End Select
        
    End If
        
    iAux = InStrRev(sNFeArqXml, "\")
    If iAux <> 0 Then
    
        lErro = CF("NFe_Obtem_Dir_Xml", sDirXml)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        
        sNFeArqXml = sDirXml & Mid(sNFeArqXml, iAux + 1)
    
    End If
        
    'Inicializa a parte tributária
    Call objNF.Inicializa_Tributacao
    Call objNF.objTributacaoNF.Coloca_Auto
    
    objNF.iNFe = MARCADO
    objNF.iFilialEmpresa = iFilialEmpresa
    objNF.iNaoVerificaCredito = NAO_VERIFICA_CREDITO_CLIENTE
    objNF.iStatus = STATUS_BAIXADO
    objNF.dtDataReferencia = DATA_NULA
    objNF.iFreteRespons = FRETE_SEM
    objNF.dtDataRegistro = Date
    objNF.dtDataVencimento = DATA_NULA
    objNF.dtDataEntrada = DATA_NULA
    
    objNF.objTributacaoNF.iTipoTributacao = 99
    objNF.objTributacaoNF.iTipoTributacaoManual = VAR_PREENCH_AUTOMATICO
    
    objNF.objTributacaoNF.iICMSBaseManual = VAR_PREENCH_MANUAL
    objNF.objTributacaoNF.iICMSValorManual = VAR_PREENCH_MANUAL
    objNF.objTributacaoNF.iICMSSubstBaseManual = VAR_PREENCH_MANUAL
    objNF.objTributacaoNF.iICMSSubstValorManual = VAR_PREENCH_MANUAL
    objNF.objTributacaoNF.iIPIValorManual = VAR_PREENCH_MANUAL
    
    objNF.objTributacaoNF.iISSValorManual = VAR_PREENCH_MANUAL
    objNF.objTributacaoNF.iISSBaseManual = VAR_PREENCH_MANUAL
    
    objNF.objTributacaoNF.iPISCreditoManual = VAR_PREENCH_MANUAL
    objNF.objTributacaoNF.iPISRetidoManual = VAR_PREENCH_MANUAL
    objNF.objTributacaoNF.iCOFINSCreditoManual = VAR_PREENCH_MANUAL
    objNF.objTributacaoNF.iCOFINSRetidoManual = VAR_PREENCH_MANUAL
    objNF.objTributacaoNF.iCSLLRetidoManual = VAR_PREENCH_MANUAL
    
    objNF.objTributacaoNF.iIRRFBaseManual = VAR_PREENCH_MANUAL
    objNF.objTributacaoNF.iIRRFValorManual = VAR_PREENCH_MANUAL
    objNF.objTributacaoNF.iINSSBaseManual = VAR_PREENCH_MANUAL
    objNF.objTributacaoNF.iINSSValorManual = VAR_PREENCH_MANUAL
    objNF.objTributacaoNF.iINSSRetidoManual = VAR_PREENCH_MANUAL
    
    Set objCliente = New ClassCliente
    Set objEndCli = New ClassEndereco
                
    If left(sChaveAcesso, 3) = "CFe" Then
        
        bSAT = True
        Set objSAT = CreateObject("sgesat.SATCarrega")
        
        lErro = objSAT.SAT_Carrega(sNFeArqXml, objNF, objCliente, objEndCli)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
            
        Set objSAT = Nothing
        
        'completar dados de nf que faltam no SAT
        '????
        
        'preencher objProt para poder gravar nfefedprotnfe abaixo
        With objProt
        
            .dtData = objNF.dtDataEmissao
            .schNFe = objNF.sChvNFe

        End With
    
    Else
        bSAT = False
        
'        lErro = XML_Obtem_Tipo_Versao(sNFeArqXml, sTipo, sVersao)
'        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
'
'        If sVersao = "400" Then
            Set objNFe = CreateObject("sgenfe4.NFeCarrega")
'        Else
'            Set objNFe = CreateObject("sgenfe.NFeCarrega")
'        End If
        
        lErro = objNFe.NFe_Carrega(sNFeArqXml, objNF, objCliente, objEndCli, objProt)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
            
        Set objNFe = Nothing
        
        If bSubstXml Then
            objNF.sSerie = "103-e"
            objVenda.objCupomFiscal.sNumSerieECF = "103"
        End If
        
    End If
        
    'ajusta campos hora
    objNF.dtHoraEmissao = CDbl(CDbl(objNF.dtHoraEmissao) - Fix(CDbl(objNF.dtHoraEmissao)))
    objNF.dtHoraSaida = CDbl(CDbl(objNF.dtHoraSaida) - Fix(CDbl(objNF.dtHoraSaida)))
    
    iItemNF = 0
    
    For Each objItemNF In objNF.colItensNF
    
        iItemNF = iItemNF + 1
        
        
        'objProduto.sCodigo = Trim(left(objItemNF.sProduto + Space(20), 20)) deu problema qdo codigo do produto no xml foi alterado devido a caracter invalido: SD402 20MR virou SD402_20MR no xml
                
        'buscar o produto que está no item do cupom
        iItemCupom = 0
        For Each objItemCupom In objVenda.objCupomFiscal.colItens
            
            'só conta os itens nao cancelados
            If objItemCupom.iStatus <> STATUS_CANCELADO Then
            
                iItemCupom = iItemCupom + 1
                If iItemCupom = iItemNF Then Exit For
            
            End If
        
        Next
        
        If iItemNF <> iItemCupom Then
            gError 212009
        End If
        
        Set objProduto = New ClassProduto
        objProduto.sCodigo = objItemCupom.sProduto
        
        lErro = CF("Produto_Le", objProduto)
        If lErro <> SUCESSO And lErro <> 28030 Then gError 212008
        'Caso Produto não esteja cadastrado
        If lErro = 28030 Then
        
            bAchouProd = False
            
            If Not bAchouProd Then
            
                sProdAux = String(STRING_PRODUTO, 0)
            
                lErro = Comando_Executar(alComando(33), "SELECT Codigo FROM Produtos WHERE REPLACE(Codigo,'.','') = ? ", sProdAux, objProduto.sCodigo)
                If lErro <> AD_SQL_SUCESSO Then gError 212043
    
                lErro = Comando_BuscarProximo(alComando(33))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 212044
           
                If lErro = AD_SQL_SUCESSO Then bAchouProd = True
                
            End If
            
            If Not bAchouProd Then
            
                sProdAux = String(STRING_PRODUTO, 0)
            
                lErro = Comando_Executar(alComando(34), "SELECT Codigo FROM Produtos WHERE REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(Codigo,'.',''),'/',''),'\',''),'-',''),'_','') = ? ", sProdAux, objProduto.sCodigo)
                If lErro <> AD_SQL_SUCESSO Then gError 212043
    
                lErro = Comando_BuscarProximo(alComando(34))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 212044
           
                If lErro = AD_SQL_SUCESSO Then bAchouProd = True
                
            End If
            
            If Not bAchouProd Then
                
                sProdAux = String(STRING_PRODUTO, 0)
            
                lErro = Comando_Executar(alComando(35), "SELECT Codigo FROM Produtos WHERE REPLACE(Codigo,'.','') = ? ", sProdAux, Replace(objProduto.sCodigo, ".", ""))
                If lErro <> AD_SQL_SUCESSO Then gError 212043
    
                lErro = Comando_BuscarProximo(alComando(35))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 212044
           
                If lErro = AD_SQL_SUCESSO Then bAchouProd = True
                
            End If
            
            If Not bAchouProd Then
            
                sProdAux = String(STRING_PRODUTO, 0)
            
                lErro = Comando_Executar(alComando(36), "SELECT Codigo FROM Produtos WHERE REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(Codigo,'.',''),'/',''),'\',''),'-',''),'_','') = ? ", sProdAux, Replace(Replace(Replace(Replace(Replace(objProduto.sCodigo, ".", ""), "/", ""), "\", ""), "-", ""), "_", ""))
                If lErro <> AD_SQL_SUCESSO Then gError 212043
    
                lErro = Comando_BuscarProximo(alComando(36))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 212044
           
                If lErro = AD_SQL_SUCESSO Then bAchouProd = True
                
            End If
            
            If bAchouProd Then
            
                Set objProduto = New ClassProduto
                objProduto.sCodigo = sProdAux
                
                lErro = CF("Produto_Le", objProduto)
                If lErro <> SUCESSO And lErro <> 28030 Then gError 212008
            
                If lErro <> SUCESSO Then
                    bAchouProd = False
                Else
                    objItemCupom.sProduto = sProdAux 'estava errado no ccc
                End If
            End If
        
            If Not bAchouProd Then gError 212009
            
        End If
        
        objItemNF.sProduto = objProduto.sCodigo
        objItemNF.sUMEstoque = objProduto.sSiglaUMEstoque
        objItemNF.sUMVenda = objProduto.sSiglaUMVenda
        objItemNF.iClasseUM = objProduto.iClasseUM
    
        'Obtém dados fixos
        objItemNF.dtDataEntrega = DATA_NULA
    
        objItemNF.objTributacaoItemNF.iTipoTributacao = 99
        objItemNF.objTributacaoItemNF.iTipoTributacaoManual = VAR_PREENCH_AUTOMATICO
        objItemNF.objTributacaoItemNF.iNaturezaOpManual = VAR_PREENCH_MANUAL
        objItemNF.objTributacaoItemNF.iNaturezaOpManual = VAR_PREENCH_MANUAL
        objItemNF.objTributacaoItemNF.iCSTManual = VAR_PREENCH_MANUAL
        objItemNF.objTributacaoItemNF.iICMSBaseModalidadeManual = VAR_PREENCH_MANUAL
        objItemNF.objTributacaoItemNF.iICMSBaseManual = VAR_PREENCH_MANUAL
        objItemNF.objTributacaoItemNF.iICMSPercRedBaseManual = VAR_PREENCH_MANUAL
        objItemNF.objTributacaoItemNF.iICMSAliquotaManual = VAR_PREENCH_MANUAL
        objItemNF.objTributacaoItemNF.iICMSValorManual = VAR_PREENCH_MANUAL
        objItemNF.objTributacaoItemNF.iICMSTipoManual = VAR_PREENCH_MANUAL
        
        objItemNF.objTributacaoItemNF.iIPIAliquotaManual = VAR_PREENCH_MANUAL
        objItemNF.objTributacaoItemNF.iIPIBaseManual = VAR_PREENCH_MANUAL
        objItemNF.objTributacaoItemNF.iIPIBaseCalculoManual = VAR_PREENCH_MANUAL
        objItemNF.objTributacaoItemNF.iIPITipoCalculoManual = VAR_PREENCH_MANUAL
        objItemNF.objTributacaoItemNF.iIPIValorManual = VAR_PREENCH_MANUAL
        
        objItemNF.objTributacaoItemNF.iRegimeTributarioManual = VAR_PREENCH_MANUAL
        
        If objItemNF.objTributacaoItemNF.iPISTipoManual = VAR_PREENCH_VAZIO Then objItemNF.objTributacaoItemNF.iPISTipoManual = VAR_PREENCH_MANUAL
        If objItemNF.objTributacaoItemNF.iCOFINSTipoManual = VAR_PREENCH_VAZIO Then objItemNF.objTributacaoItemNF.iCOFINSTipoManual = VAR_PREENCH_MANUAL
    
        If objProduto.iControleEstoque <> PRODUTO_CONTROLE_SEM_ESTOQUE Then
        
            iAlmoxarifado = 0
            
            iFilialEmpresa1 = iFilialEmpresa
            lErro = CF("FilialEmpresaAlmox_Customiza", iFilialEmpresa1)
            If lErro <> SUCESSO Then gError 212043
            
            lErro = Comando_Executar(alComando(3), "SELECT Almoxarifado FROM ProdutosFilial WHERE Produto = ? AND FilialEmpresa = ?", iAlmoxarifado, objProduto.sCodigo, iFilialEmpresa1)
            If lErro <> AD_SQL_SUCESSO Then gError 212043

            lErro = Comando_BuscarProximo(alComando(3))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 212044
        
            If iAlmoxarifado = 0 Then 'gError 201573
                lErro = NFe_PAF_ImportarXml_Trata_Almox(alComando(31), alComando(32), objProduto.sCodigo, iFilialEmpresa1, iAlmoxarifado)
                If lErro <> SUCESSO Then gError 212034
            End If
            
            lErro = CF("UM_Conversao", objItemNF.iClasseUM, objItemNF.sUnidadeMed, objItemNF.sUMEstoque, dFator)
            If lErro <> SUCESSO Then gError 212034
            
            Set objItemAloc = objItemNF.colAlocacoes.Add(iAlmoxarifado, "Outros " + CStr(iAlmoxarifado), Arredonda_Estoque(objItemNF.dQuantidade * dFator))
            objItemAloc.sUnidadeMed = objItemNF.sUMEstoque
            
        ElseIf objProduto.iKitVendaComp = MARCADO Then
        
            Set colItensRomaneioGrade = New Collection
            Set objKitVenda = New ClassKitVenda
              
            lErro = CF("ProdutoKitVenda_Le_Romaneio", objProduto, colItensRomaneioGrade)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
            
            objKitVenda.sProduto = objProduto.sCodigo
            objKitVenda.sUM = objItemNF.sUnidadeMed
            objKitVenda.dQuantidade = objItemNF.dQuantidade
            
            lErro = CF("ProdutoKitVenda_Atualiza_Romaneio", objProduto, objKitVenda, colItensRomaneioGrade)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
            
            Set objItemNF.colItensRomaneioGrade = colItensRomaneioGrade
            
            For Each objItemRomaneio In colItensRomaneioGrade
            
                Set objProduto1 = New ClassProduto
        
                objProduto1.sCodigo = objItemRomaneio.sProduto
        
                'Lê na tabela de Produto a UM de venda
                lErro = CF("Produto_Le", objProduto1)
                If lErro <> SUCESSO And lErro <> 28030 Then gError ERRO_SEM_MENSAGEM
        
                If lErro <> SUCESSO Then gError 42765 'Não encontrou
        
                If objProduto1.iControleEstoque <> PRODUTO_CONTROLE_SEM_ESTOQUE Then
                
                    iAlmoxarifado = 0
                    
                    iFilialEmpresa1 = iFilialEmpresa
                    lErro = CF("FilialEmpresaAlmox_Customiza", iFilialEmpresa1)
                    If lErro <> SUCESSO Then gError 212043
                    
                    lErro = Comando_Executar(alComando(3), "SELECT Almoxarifado FROM ProdutosFilial WHERE Produto = ? AND FilialEmpresa = ?", iAlmoxarifado, objProduto1.sCodigo, iFilialEmpresa1)
                    If lErro <> AD_SQL_SUCESSO Then gError 212043
        
                    lErro = Comando_BuscarProximo(alComando(3))
                    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 212044
                
                    If iAlmoxarifado = 0 Then 'gError 201573
                        lErro = NFe_PAF_ImportarXml_Trata_Almox(alComando(31), alComando(32), objProduto1.sCodigo, iFilialEmpresa1, iAlmoxarifado)
                        If lErro <> SUCESSO Then gError 212034
                    End If
                    
                    Set objItemAloc = objItemNF.colAlocacoes.Add(iAlmoxarifado, "Outros " + CStr(iAlmoxarifado), Arredonda_Estoque(objItemRomaneio.dQuantidade))
                    objItemAloc.sUnidadeMed = objProduto1.sSiglaUMEstoque
                    
                    Set objReservaItem = New ClassReservaItem
                    objReservaItem.dQuantidade = objItemAloc.dQuantidade
                    objReservaItem.iAlmoxarifado = objItemAloc.iAlmoxarifado
                    objReservaItem.iFilialEmpresa = objNF.iFilialEmpresa
                    objReservaItem.sAlmoxarifado = objItemAloc.sAlmoxarifado
                    objItemRomaneio.colLocalizacao.Add objReservaItem
                
                End If
                    
            Next
            
        
        End If
    
    Next
        
    If objCliente.sCgc = "" And (objNF.iTipoNFiscal = DOCINFO_NFCEPDV Or objNF.iTipoNFiscal = DOCINFO_NFISSAT) Then
    
        objNF.lCliente = gobjFAT.lCodCliNFCeSemCPF
        objNF.iFilialCli = FILIAL_MATRIZ '??? poderia ter uma para cada estado ou filialempresa
    
    Else
    
        'obter o cliente e filial
        lErro = Comando_Executar(alComando(5), "SELECT CodCliente, CodFilial FROM FiliaisClientes WHERE CGC = ? AND CGC <> ''", _
            lCodCliente, iCodFilial, objCliente.sCgc)
        If lErro <> AD_SQL_SUCESSO Then gError 212043
        
        lErro = Comando_BuscarProximo(alComando(5))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 212016
        If lErro = AD_SQL_SUCESSO Then
        
            objNF.lCliente = lCodCliente
            objNF.iFilialCli = iCodFilial
        
        Else
        
            'nao vai cadastrar o cliente mesmo tendo cpf se for nfce
            If (objNF.iTipoNFiscal = DOCINFO_NFCEPDV Or objNF.iTipoNFiscal = DOCINFO_NFISSAT) Then
            
                objNF.lCliente = gobjFAT.lCodCliNFCeSemCPF
                objNF.iFilialCli = FILIAL_MATRIZ '??? poderia ter uma para cada estado ou filialempresa
            
            Else
        
                With objCliente
            
                    .sRazaoSocial = left(.sRazaoSocial, STRING_CLIENTE_RAZAO_SOCIAL)
        
                    If .sNomeReduzido = "" Then .sNomeReduzido = .sRazaoSocial
                    .sNomeReduzido = left(Trim(.sNomeReduzido), STRING_CLIENTE_NOME_REDUZIDO)
                    
                End With
                
                'obter o cliente e filial pelo nome reduzido
                lErro = Comando_Executar(alComando(4), "SELECT F.CodCliente, F.CodFilial FROM FiliaisClientes F, Clientes C WHERE C.Codigo = F.CodCliente AND C.NomeReduzido = ? ORDER BY F.CodFilial DESC", _
                    lCodCliente, iCodFilial, objCliente.sNomeReduzido)
                If lErro <> AD_SQL_SUCESSO Then gError 212043
                
                lErro = Comando_BuscarProximo(alComando(4))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 212016
                If lErro = AD_SQL_SUCESSO Then
                
                    objNF.lCliente = lCodCliente
                    objNF.iFilialCli = iCodFilial
                
                Else
        
                    'cadastrar o cliente
                    If lProxCodCliente = 0 Then
            
                        lErro = Comando_Executar(alComando(11), "SELECT MAX(Codigo)+1 FROM Clientes", lProxCodCliente)
                        If lErro <> AD_SQL_SUCESSO Then gError 212043
            
                        lErro = Comando_BuscarProximo(alComando(11))
                        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 212044
            
                    End If
                                
                    Set colEndereco = New Collection
            
                    With objCliente
                        .lCodigo = lProxCodCliente
                        lProxCodCliente = lProxCodCliente + 1
                
                        .sRazaoSocial = left(.sRazaoSocial, STRING_CLIENTE_RAZAO_SOCIAL)
            
                        If .sNomeReduzido = "" Then .sNomeReduzido = .sRazaoSocial
                        .sNomeReduzido = left(Trim(.sNomeReduzido), STRING_CLIENTE_NOME_REDUZIDO)
                        
                        .iTipo = 1 '???
                        .iAtivo = 1 '???
                        .iProxCodFilial = 2 '???
                        .iRegimeTributario = REGIME_TRIBUTARIO_NORMAL '?????
            
                        .dtDataUltVisita = DATA_NULA
                        .iTipoFrete = TIPO_SEM_FRETE
            
                        objEndCli.sEndereco = left(objEndCli.sLogradouro + IIf(objEndCli.lNumero <> 0, ", " + CStr(objEndCli.lNumero), "") + IIf(Len(Trim(objEndCli.sComplemento)) <> 0, " " + Trim(objEndCli.sComplemento), ""), STRING_ENDERECO)
                        
                        colEndereco.Add objEndCli
            
                        Set objEndereco = New ClassEndereco
            
                        objEndereco.iCodigoPais = PAIS_BRASIL '???
                        objEndereco.sSiglaEstado = objEndCli.sSiglaEstado
            
                        colEndereco.Add objEndereco
            
                        Set objEndereco = New ClassEndereco
            
                        objEndereco.iCodigoPais = PAIS_BRASIL '???
                        objEndereco.sSiglaEstado = objEndCli.sSiglaEstado
            
                        colEndereco.Add objEndereco
            
                    End With
            
                    'Grava o Cliente
                    lErro = CF("Cliente_Grava_EmTrans", objCliente, colEndereco)
                    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
                    
                    objNF.lCliente = objCliente.lCodigo
                    objNF.iFilialCli = FILIAL_MATRIZ
        
                End If
    
            End If
    
        End If
    
    End If
    
    objNF.iFilialEntrega = objNF.iFilialCli
    
    Set objTribTab = New ClassTribTab
    
    lErro = objTribTab.TributacaoNF_Reset(objNF)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    Select Case objNF.iTipoNFiscal
    
        Case DOCINFO_NFISSAT
            Call objTribTab.TipoNFiscal_Definir(DOCINFO_NFISSAT, "NFISSAT")
        
        Case DOCINFO_NFISFVPAF
            Call objTribTab.TipoNFiscal_Definir(DOCINFO_NFISFVPAF, "NFISFVPAF")

        Case DOCINFO_NFCEPDV
            Call objTribTab.TipoNFiscal_Definir(DOCINFO_NFCEPDV, "NFCEPDV")
    
    End Select
    
    Call objTribTab.DataEmissao_Alterada(objNF.dtDataEmissao)
    Call objTribTab.Serie_Alterada(objNF.sSerie)
    
    lErro = gobjTributacao.AtualizaImpostos(objTribTab.mvarobjNFTributacao, 0)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    lErro = objTribTab.PreencherNF(objNF)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    Set objTribTab = Nothing
            
    objNF.iNumNFManual = 1 'para indicar que o numero da nf já é passado e nao deve ser buscado pela serie
    
    'Grava a Nota em Transação
    lErro = CF("NFiscal_Grava_EmTrans", objNF, Nothing)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
            
    lNumIntNF = objNF.lNumIntDoc
    
    With objNF
        lErro = Comando_Executar(alComando(1), "INSERT INTO NFeFedProtNFe (versao, nRec, tpAmb, verAplic, chNFe, data, nProt, cStat, xMotivo, NumIntNF, hora, FilialEmpresa, DataRegistro, HoraRegistro, QRCode) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
            objProt.sVersao, "", objProt.itpAmb, objProt.sverAplic, objProt.schNFe, objProt.dtData, objProt.snProt, objProt.scStat, objProt.sxMotivo, lNumIntNF, objProt.dHora, .iFilialEmpresa, gdtDataHoje, CDbl(Time), .sQRCode)
    End With
    If lErro <> AD_SQL_SUCESSO Then gError 212043
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

'    'Fechar transacao
'    lErro = Transacao_Commit()
'    If lErro <> AD_SQL_SUCESSO Then gError 212003
    
    NFe_PAF_ImportarXml = SUCESSO
    
    Exit Function
    
Erro_NFe_PAF_ImportarXml:

    NFe_PAF_ImportarXml = gErr

    Select Case gErr

        Case ERRO_SEM_MENSAGEM
        
        Case 212009
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_NAO_CADASTRADO", gErr, objProduto.sCodigo)
            Call MsgBox("Item de NF com produto não cadastrado: " & objItemNF.sProduto & " " & objItemNF.sDescricaoItem & " " & objItemNF.sUnidadeMed)
        
        Case 201573
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVEST_SEM_ESTOQUE_INICIAL", gErr, objProduto.sCodigo)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 201548)

    End Select
    
'    Call Transacao_Rollback
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Private Function NFiscal_Valida_CFOP_TipoNF(ByVal objNF As ClassNFiscal, ByVal objTipoDocInfo As ClassTipoDocInfo, ByVal lComando1 As Long, ByVal lComando2 As Long) As Long

Dim lErro As Long
Dim vbMsgResult As VbMsgBoxResult
Dim objItem As ClassItemNF, iTipoNF As Integer

On Error GoTo Erro_NFiscal_Valida_CFOP_TipoNF

    If gobjCRFAT.iAcaoTesteCFOPTipoNF <> ACAO_NAO_AVISA Then
    
        For Each objItem In objNF.colItens
        
            lErro = Comando_Executar(lComando1, "SELECT TipoNF FROM CFOPTipoNF WHERE CFOP = ?", iTipoNF, objItem.objTributacao.sNaturezaOp)
            If lErro <> AD_SQL_SUCESSO Then gError 213515
        
            'Verifica se o CFOP existe nesse tabela
            lErro = Comando_BuscarPrimeiro(lComando1)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 213516
            
            If lErro = AD_SQL_SUCESSO Then
                
                lErro = Comando_Executar(lComando2, "SELECT TipoNF FROM CFOPTipoNF WHERE CFOP = ? AND TipoNF = ? ", iTipoNF, objItem.objTributacao.sNaturezaOp, objTipoDocInfo.iCodigo)
                If lErro <> AD_SQL_SUCESSO Then gError 213517
            
                'Verifica se o CFOP pode ser usado nesse tipo de NF
                lErro = Comando_BuscarPrimeiro(lComando2)
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 213518
                
                If lErro <> AD_SQL_SUCESSO Then
                
                    Select Case gobjCRFAT.iAcaoTesteCFOPTipoNF
                    
                        Case ACAO_AVISA
                            vbMsgResult = Rotina_Aviso(vbYesNo, "AVISO_CFOP_DIVERGE_TIPONF")
                            If vbMsgResult = vbNo Then gError ERRO_SEM_MENSAGEM
                        
                        Case ACAO_ERRO
                            gError 213519
                
                    End Select
                
                End If
            
            End If
    
        Next
        
    End If

    NFiscal_Valida_CFOP_TipoNF = SUCESSO
    
    Exit Function
    
Erro_NFiscal_Valida_CFOP_TipoNF:
    
    NFiscal_Valida_CFOP_TipoNF = gErr
    
    Select Case gErr
    
        Case 213515 To 213518
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NATUREZAOP1", gErr)

        Case 213519
            Call Rotina_Erro(vbOKOnly, "ERRO_CFOP_INCOMPATIVEL_COM_TIPONF", gErr, objItem.objTributacao.sNaturezaOp, objTipoDocInfo.iCodigo)
    
        Case ERRO_SEM_MENSAGEM
 
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 213520)
            
    End Select
    
    Exit Function

End Function

Function Contratos_CampanhaRHBarra_Gera()

Dim lErro As Long, lCliente As Long, lTransacao As Long, lCodContrato As Long
Dim alComando(0 To 10) As Long, objContrato As ClassContrato
Dim objItensDeContrato As ClassItensDeContrato
Dim lNumIntDoc As Long, iIndice As Integer, dValContrato As Double
Dim lNumProx As Long, lNum As Long, lContrato As Long

On Error GoTo Erro_Contratos_CampanhaRHBarra_Gera

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 130423

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 130426
    Next

    lErro = Comando_Executar(alComando(0), "SELECT CLI.Codigo FROM Clientes CLI, FiliaisClientes FIL, Enderecos ENDE WHERE ENDE.email<> '' AND CLI.Ativo=1 AND FIL.CodCliente = CLI.Codigo AND FIL.CodFilial = 1 AND FIL.Endereco = ENDE.Codigo ORDER BY RazaoSocial", lCliente)
'    lErro = Comando_Executar(alComando(0), "select codigo from clientes where ativo=1 and codigo <> 1932 and codigo in (select cliente from FilialClienteCategorias where Categoria='almoço' and item='sim') or observacao like '%almo%' order by razaosocial", lCliente)
    
    If lErro <> AD_SQL_SUCESSO Then gError 2222

    lErro = Comando_BuscarProximo(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 2222

    Do While lErro <> AD_SQL_SEM_DADOS

        lContrato = lContrato + 1

        'Busca próximo identificador
        lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_PROX_CONTRATO", lNumProx)
        If lErro <> SUCESSO Then gError 131066

        Set objContrato = New ClassContrato

        With objContrato

            .lNumIntDoc = lNumProx
            .iFilialEmpresa = 4 'BEIT BARRA
            .lCliente = lCliente

            .dtDataFimContrato = StrParaDate("09/06/2016")
            .dtDataIniCobrancaPadrao = StrParaDate("09/06/2016")
            .dtDataIniContrato = StrParaDate("09/06/2016")
            .dtDataRenovContrato = StrParaDate("09/06/2016")

            .iCondPagtoPadrao = 18
            .iFilCli = 1
            .iPeriodicidadePadrao = PERIODICIDADE_MENSAL

            .iAtivo = 1

            .sCodigo = "YJ" & Format(lContrato, "0000") '??? ALTERAR
            .sContaContabil = ""
            .sDescricao = "YZKOR SHAVUOT 2016" '??? ALTERAR
            .sObservacao = ""
            .sHistoricoContabil = ""

            .sCcl = ""

            .sNaturezaOp = "5949"
            .iTipoTributacao = 32

            .iTipo = CONTRATOS_RECEBER
            .iRecibo = DESMARCADO

            'Insere contrato
            lErro = Comando_Executar(alComando(2), "INSERT INTO Contratos(NumIntDoc, FilialEmpresa, Codigo, Descricao, Ativo, Cliente, FilCli, Observacao, DataIniContrato, DataFimContrato, DataRenovContrato, ContaContabil, HistoricoContabil, DataIniCobrancaPadrao, PeriodicidadePadrao, CondPagtoPadrao, Ccl, NaturezaOP,TipoTributacao, Tipo, FilialFornecedor, Fornecedor, Recibo) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                                                                        .lNumIntDoc, .iFilialEmpresa, .sCodigo, .sDescricao, .iAtivo, .lCliente, .iFilCli, .sObservacao, .dtDataIniContrato, .dtDataFimContrato, .dtDataRenovContrato, .sContaContabil, .sHistoricoContabil, .dtDataIniCobrancaPadrao, .iPeriodicidadePadrao, .iCondPagtoPadrao, .sCcl, .sNaturezaOp, .iTipoTributacao, .iTipo, .iFilForn, .lFornecedor, .iRecibo)
        End With
        If lErro <> AD_SQL_SUCESSO Then gError 129341

        Set objItensDeContrato = New ClassItensDeContrato

        'Obtem identificado (NumIntDoc)
        lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_PROX_ITENSDECONTRATO", lNumProx)
        If lErro <> SUCESSO Then gError 129367

        With objItensDeContrato

            .lNumIntDoc = lNumProx
            .lNumIntContrato = objContrato.lNumIntDoc
            .dtDataRefIni = StrParaDate("01/01/2016")
            .dtDataRefFim = StrParaDate("31/12/2016")
            .dQuantidade = 1
            .dtDataIniCobranca = StrParaDate("09/06/2016")
            .dtDataProxCobranca = StrParaDate("09/06/2016")
            .dValor = 1
            .iCobrar = 1
            .iMedicao = 0
            .iSeq = 1

            .iCondPagto = 18
            .iPeriodicidade = PERIODICIDADE_MENSAL

'            .sProduto = "00032"
'            .sDescProd = "DONATIVO ROSH HASHANA"

            .sProduto = "00062"
            .sDescProd = "DONATIVO YIZCOR"

'            .sProduto = "00112"
'            .sDescProd = "ALMOÇO EXECUTIVO"

'            .sProduto = "00001"
'            .sDescProd = "13o Socios 2015" '??? ALTERAR
            
            .sObservacao = ""
            .sUM = "un"

            'Insere item
            lErro = Comando_Executar(alComando(3), "INSERT INTO ItensDeContrato(NumIntDoc, NumIntContrato, Seq, Cobrar, Produto, DescProd, Quantidade, UM, Valor, Medicao, DataIniCobranca, Periodicidade, CondPagto, Observacao, DataProxCobranca, DataRefIni, DataRefFim) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                                                        .lNumIntDoc, .lNumIntContrato, .iSeq, .iCobrar, .sProduto, .sDescProd, .dQuantidade, .sUM, .dValor, .iMedicao, .dtDataIniCobranca, .iPeriodicidade, .iCondPagto, .sObservacao, .dtDataProxCobranca, .dtDataRefIni, .dtDataRefFim)
        End With
        If lErro <> AD_SQL_SUCESSO Then gError 129348

        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 2222

    Loop

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 130425

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Contratos_CampanhaRHBarra_Gera = SUCESSO

    Exit Function

Erro_Contratos_CampanhaRHBarra_Gera:

    Contratos_CampanhaRHBarra_Gera = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 201037)

    End Select

    'Desfaz Transação
    Call Transacao_Rollback

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function RelBxPorProd_Prepara(ByVal objRelBxPorProd As ClassRelBxPorProdSel) As Long

Dim lErro As Long, lNumIntRel As Long
Dim iIndice As Integer, iSeq As Integer
Dim lTransacao As Long, sSQL As String
Dim alComando(0 To 4) As Long
Dim objVendedor As ClassVendedor
Dim colVendFiltro As New Collection
Dim colVendedores As New Collection

Dim lNumIntNF As Long, lNumIntItemNF As Long, sSerie As String, lNumNF As Long, iItemNF As Integer
Dim dtDataEmissao As Date, dValorNF As Double, dValorProdutos As Double, dValorItem As Double
Dim iFaturamento As Integer, sProduto As String, sDescricaoItem As String, lCliente As Long
Dim iFilial As Integer, iVendedor As Integer, iRegiao As Integer, sCidade As String
Dim sNomeCliente As String, iClasseDocCPR As Integer, lNumIntDocCPR As Long

Dim lNumIntBaixa As Long, lNumIntParcela As Long, iNumParcela As Integer, dValorTitulo As Double
Dim dValorIRRF As Double, dValorParcela As Double, dValorRecebido As Double, dtDataBaixa As Date
Dim dValorBaixado As Double

Dim dtDataDeAux As Date, dtDataAteAux As Date, dValorParcBxRateadoProd As Double
Dim iVendedorAnt As Integer, sProdutoAnt As String, sDescProdAnt As String
Dim dFatorNF As Double, dFatorBx As Double, bTerminou As Boolean
Dim dAcumuladoProd As Double, dAcumuladoVend As Double, sNomeVend As String

On Error GoTo Erro_RelBxPorProd_Prepara

    'Abrir transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 213687

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 213688
    Next
    
    'Obter NumIntRel
    lErro = CF("Config_ObterNumInt", "FATConfig", "NUMINTREL_BXPORPROD", lNumIntRel)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    objRelBxPorProd.lNumIntRel = lNumIntRel
    
    'Lê todos os vendedores com o seus respectivos nomes
    lErro = CF("Vendedor_Le_Todos", colVendedores)
    If lErro <> SUCESSO And lErro <> 104287 Then gError ERRO_SEM_MENSAGEM

    'Obtem a lista de vendedores que serão filtrados
    If objRelBxPorProd.iVendedor <> 0 Then
        If objRelBxPorProd.iTipoVend = VENDEDOR_DIRETO Then
            Set objVendedor = New ClassVendedor
            objVendedor.iCodigo = objRelBxPorProd.iVendedor
            colVendFiltro.Add objVendedor
        Else
            lErro = CF("Vendedor_Le_Hierarquia", objRelBxPorProd.iVendedor, colVendFiltro, 0)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        End If
    End If
    
    iSeq = 0
    bTerminou = False
    
     If objRelBxPorProd.dtDataBxDe = DATA_NULA Then
        dtDataDeAux = #1/1/1900#
    Else
        dtDataDeAux = objRelBxPorProd.dtDataBxDe
    End If
    
    If objRelBxPorProd.dtDataBxAte = DATA_NULA Then
        dtDataAteAux = DateAdd("y", 10, gdtDataHoje)
    Else
        dtDataAteAux = objRelBxPorProd.dtDataBxAte
    End If
        
    sSerie = String(STRING_MAXIMO, 0)
    sProduto = String(STRING_MAXIMO, 0)
    sDescricaoItem = String(STRING_MAXIMO, 0)
    sCidade = String(STRING_MAXIMO, 0)
    sNomeCliente = String(STRING_MAXIMO, 0)
    
    lErro = RelBxPorProd_PreparaSQL(objRelBxPorProd, colVendFiltro, sSQL)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    lErro = RelBxPorProd_PreparaInt(alComando(0), sSQL, objRelBxPorProd.iFilialEmpresa, objRelBxPorProd.dtDataEmiDe, objRelBxPorProd.dtDataEmiAte, objRelBxPorProd.dtDataBxDe, objRelBxPorProd.dtDataBxAte, objRelBxPorProd.lClienteDe, objRelBxPorProd.lClienteAte, objRelBxPorProd.sProdutoDe, objRelBxPorProd.sProdutoAte, objRelBxPorProd.iTipoDe, objRelBxPorProd.iTipoAte, objRelBxPorProd.sCidade, colVendFiltro, objRelBxPorProd.colRegioes, lNumIntNF, lNumIntItemNF, sSerie, lNumNF, iItemNF, dtDataEmissao, dValorNF, dValorProdutos, dValorItem, iFaturamento, sProduto, sDescricaoItem, lCliente, iFilial, iVendedor, iRegiao, sCidade, sNomeCliente, iClasseDocCPR, lNumIntDocCPR)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    lErro = Comando_BuscarProximo(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 213689
    
    If lErro = AD_SQL_SEM_DADOS Then bTerminou = True
    
    If objRelBxPorProd.iExibirVend = MARCADO Then
        iVendedorAnt = iVendedor
    Else
        iVendedorAnt = 0
    End If

    dAcumuladoProd = 0
    dAcumuladoVend = 0
    
    sProdutoAnt = sProduto
    sDescProdAnt = sDescricaoItem
    
    Do While Not bTerminou
       
        lErro = Comando_Executar(alComando(1), "SELECT NumIntBaixa, NumIntParcela, NumParcela, ValorTitulo, ValorIRRF, ValorParcela, ValorRecebido, ValorBaixado, Data FROM BaixasClasseDocCR WHERE ClasseDocCPR = ? AND NumIntDoc = ? AND Data BETWEEN ? AND ? ORDER BY Data", _
        lNumIntBaixa, lNumIntParcela, iNumParcela, dValorTitulo, dValorIRRF, dValorParcela, dValorRecebido, dValorBaixado, dtDataBaixa, iClasseDocCPR, lNumIntDocCPR, dtDataDeAux, dtDataAteAux)
        If lErro <> AD_SQL_SUCESSO Then gError 213690
    
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 213691
    
        Do While lErro <> AD_SQL_SEM_DADOS
   
            iSeq = iSeq + 1
            
            'CÁLCULO BASEADO NO VALOR RECEBIDO
'            dFatorNF = 0
'            If dValorProdutos > DELTA_VALORMONETARIO Then
'                dFatorNF = dValorItem / dValorProdutos
'            End If
'
'            dValorParcBxRateadoProd = Arredonda_Moeda(dValorRecebido * dFatorNF)

            'CÁLCULO BASEADO NO VALOR DOS ITENS
            dFatorBx = 0
            If (dValorTitulo - dValorIRRF) > DELTA_VALORMONETARIO Then
                dFatorBx = dValorBaixado / (dValorTitulo - dValorIRRF)
            End If
            
            If iFaturamento = 1 Then
                dValorParcBxRateadoProd = Arredonda_Moeda(dValorItem * dFatorBx)
            Else
                dValorParcBxRateadoProd = -Arredonda_Moeda(dValorItem * dFatorBx)
            End If
                        
            lErro = Comando_Executar(alComando(2), "INSERT INTO RelBxPorProdDet (NumIntRel,Produto,Vendedor,Seq,SerieNF,NumNF,DataEmissaoNF,ValorTotalNF,ItemNF,ValorItemNF,NumParcela,DataBaixa,ValorTotalParc,ValorParcBx,ValorParcBxRateadoProd,Cliente,NomeCliente,Cidade,NumIntItemNF,NumIntParcRec,NumIntBaixa) " & _
                                                   "VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                lNumIntRel, sProduto, IIf(objRelBxPorProd.iExibirVend = MARCADO, iVendedor, 0), iSeq, sSerie, lNumNF, dtDataEmissao, dValorNF, iItemNF, dValorItem, iNumParcela, dtDataBaixa, (dValorTitulo - dValorIRRF), dValorBaixado, dValorParcBxRateadoProd, lCliente, sNomeCliente, sCidade, lNumIntItemNF, lNumIntParcela, lNumIntBaixa)
            If lErro <> AD_SQL_SUCESSO Then gError 213692
            
            dAcumuladoProd = dAcumuladoProd + dValorParcBxRateadoProd
            dAcumuladoVend = dAcumuladoVend + dValorParcBxRateadoProd
            
            lErro = Comando_BuscarProximo(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 213693
            
        Loop
        
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 213694
        
        If lErro = AD_SQL_SEM_DADOS Then bTerminou = True
        
        'Se acabou ou trocou o produto ou trocou o vendedor (quando exibe quebrado por vendedor)
        If bTerminou Or sProduto <> sProdutoAnt Or (iVendedor <> iVendedorAnt And objRelBxPorProd.iExibirVend = MARCADO) Then
        
            lErro = Comando_Executar(alComando(3), "INSERT INTO RelBxPorProd (NumIntRel,Vendedor,Produto,Descricao,ValorBx) VALUES (?,?,?,?,?)", _
                lNumIntRel, iVendedorAnt, sProdutoAnt, sDescProdAnt, dAcumuladoProd)
            If lErro <> AD_SQL_SUCESSO Then gError 213695
            
            dAcumuladoProd = 0
            sProdutoAnt = sProduto
            sDescProdAnt = sDescricaoItem
        
        End If
        
        'Se acabou ou trocou o vendedor (quando exibe quebrado por vendedor)
        If bTerminou Or (iVendedor <> iVendedorAnt And objRelBxPorProd.iExibirVend = MARCADO) Then
        
            sNomeVend = ""
            If iVendedorAnt <> 0 Then
                For Each objVendedor In colVendedores
                    If objVendedor.iCodigo = iVendedorAnt Then
                        sNomeVend = objVendedor.sNomeReduzido
                        Exit For
                    End If
                Next
            End If
        
            lErro = Comando_Executar(alComando(4), "INSERT INTO RelBxPorVend (NumIntRel,Vendedor,NomeVendedor,ValorBx) VALUES (?,?,?,?)", _
                lNumIntRel, iVendedorAnt, sNomeVend, dAcumuladoVend)
            If lErro <> AD_SQL_SUCESSO Then gError 213696
            
            dAcumuladoVend = 0
            iVendedorAnt = iVendedor
        
        End If
    
    Loop
        
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    'Fechar transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 213697

    RelBxPorProd_Prepara = SUCESSO
    
    Exit Function
    
Erro_RelBxPorProd_Prepara:

    RelBxPorProd_Prepara = gErr

    Select Case gErr

        Case 213687
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 213688
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 213689 To 213696
            Call Rotina_Erro(vbOKOnly, "ERRO_PREPARACAO_COMANDO_SQL", gErr, sSQL)

        Case 213697
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case ERRO_SEM_MENSAGEM

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 213698)

    End Select
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Call Transacao_Rollback

    Exit Function

End Function

Private Function RelBxPorProd_PreparaSQL(ByVal objRelBxPorProd As ClassRelBxPorProdSel, ByVal colVendedores As Collection, sSQL As String) As Long

Dim lErro As Long
Dim sWhere As String
Dim sOrderBy As String
Dim sSubWhere As String
Dim objVendedor As ClassVendedor
Dim vValor As Variant

On Error GoTo Erro_RelBxPorProd_PreparaSQL
  
    sSQL = "SELECT N.NumIntDoc AS NumIntNF, I.NumIntDoc AS NumIntItemNF, N.Serie, N.NumNotaFiscal, I.Item, N.DataEmissao, N.ValorTotal, N.ValorProdutos, "
    sSQL = sSQL & "ROUND(I.Quantidade * I.PrecoUnitario - I.ValorDesconto,2), T.Faturamento , I.Produto, P.Descricao, "
    sSQL = sSQL & "F.CodCliente, F.CodFilial, F.Vendedor, F.Regiao, E.Cidade, C.NomeReduzido, "
    sSQL = sSQL & "N.ClasseDocCPR , N.NumIntDocCPR "
    sSQL = sSQL & "FROM TiposDocInfo AS T, ItensNFiscal As I, NFiscal As N, Produtos As P, Clientes AS C, FiliaisClientes AS F, Enderecos AS E "

    sWhere = "WHERE N.NumIntDoc = I.NumIntNF AND T.Codigo = N.TipoNFiscal AND I.Produto = P.Codigo AND N.Status <> 7 AND "
    sWhere = sWhere & "C.Codigo = N.Cliente And F.CodCliente = N.Cliente And F.CodFilial = N.FilialCli And F.Endereco = E.Codigo "
    
    If objRelBxPorProd.iDevolucoes = MARCADO Then
        sWhere = sWhere & "AND T.Faturamento IN (1,2) "
    Else
        sWhere = sWhere & "AND T.Faturamento = 1 "
    End If
        
    If objRelBxPorProd.iFilialEmpresa <> 0 Then
        sWhere = sWhere & "AND N.FilialEmpresa = ? "
    End If
    
    If objRelBxPorProd.dtDataEmiDe <> DATA_NULA Then
        sWhere = sWhere & "AND N.DataEmissao >= ? "
    End If
    
    If objRelBxPorProd.dtDataEmiAte <> DATA_NULA Then
        sWhere = sWhere & "AND N.DataEmissao <= ? "
    End If
    
    If objRelBxPorProd.lClienteDe <> 0 Then
        sWhere = sWhere & "AND N.Cliente >= ? "
    End If
    
    If objRelBxPorProd.lClienteAte <> 0 Then
        sWhere = sWhere & "AND N.Cliente <= ? "
    End If
    
    If objRelBxPorProd.iTipoDe <> 0 Then
        sWhere = sWhere & "AND P.Tipo >= ? "
    End If
    
    If objRelBxPorProd.iTipoAte <> 0 Then
        sWhere = sWhere & "AND P.Tipo <= ? "
    End If
        
    If Len(Trim(objRelBxPorProd.sProdutoDe)) <> 0 Then
        sWhere = sWhere & "AND I.Produto >= ? "
    End If
    
    If Len(Trim(objRelBxPorProd.sProdutoAte)) <> 0 Then
        sWhere = sWhere & "AND I.Produto <= ? "
    End If
    
    If Len(Trim(objRelBxPorProd.sCidade)) <> 0 Then
        sWhere = sWhere & "AND E.Cidade = ? "
    End If
    
    If colVendedores.Count <> 0 Then
        sSubWhere = ""
        For Each objVendedor In colVendedores
            If Len(Trim(sSubWhere)) > 0 Then sSubWhere = sSubWhere & ","
            sSubWhere = sSubWhere & CStr(objVendedor.iCodigo)
        Next
        sWhere = sWhere & "AND F.Vendedor IN (" & sSubWhere & ") "
    End If
    
   If objRelBxPorProd.colRegioes.Count <> 0 Then
        sSubWhere = ""
        For Each vValor In objRelBxPorProd.colRegioes
            If Len(Trim(sSubWhere)) > 0 Then sSubWhere = sSubWhere & ","
            sSubWhere = sSubWhere & CStr(vValor)
        Next
        sWhere = sWhere & "AND F.Regiao IN (" & sSubWhere & ") "
    End If
    
    If objRelBxPorProd.dtDataBxDe <> DATA_NULA And objRelBxPorProd.dtDataBxAte <> DATA_NULA Then
        sWhere = sWhere & "AND EXISTS (SELECT * FROM BaixasClasseDocCR AS X WHERE X.ClasseDocCPR = N.ClasseDocCPR AND X.NumIntDoc=N.NumIntDocCPR AND X.Data BETWEEN ? AND ?) "
    ElseIf objRelBxPorProd.dtDataBxDe <> DATA_NULA Then
        sWhere = sWhere & "AND EXISTS (SELECT * FROM BaixasClasseDocCR AS X WHERE X.ClasseDocCPR = N.ClasseDocCPR AND X.NumIntDoc=N.NumIntDocCPR AND X.Data >= ?) "
    ElseIf objRelBxPorProd.dtDataBxAte <> DATA_NULA Then
        sWhere = sWhere & "AND EXISTS (SELECT * FROM BaixasClasseDocCR AS X WHERE X.ClasseDocCPR = N.ClasseDocCPR AND X.NumIntDoc=N.NumIntDocCPR AND X.Data <= ?) "
    Else
        sWhere = sWhere & "AND EXISTS (SELECT * FROM BaixasClasseDocCR AS X WHERE X.ClasseDocCPR = N.ClasseDocCPR AND X.NumIntDoc=N.NumIntDocCPR) "
    End If
    
    If objRelBxPorProd.iExibirVend = MARCADO Then
        sOrderBy = "ORDER BY F.Vendedor, I.Produto "
    Else
        sOrderBy = "ORDER BY I.Produto "
    End If
    
    sSQL = sSQL & sWhere & sOrderBy
    
    RelBxPorProd_PreparaSQL = SUCESSO
     
    Exit Function
    
Erro_RelBxPorProd_PreparaSQL:

    RelBxPorProd_PreparaSQL = gErr
     
    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 213699)
     
    End Select
     
    Exit Function

End Function

Private Function RelBxPorProd_PreparaInt(ByVal lComando As Long, ByVal sSQL As String, ByVal viFilialEmpresa As Variant, ByVal vdtDataEmiDe As Variant, ByVal vdtDataEmiAte As Variant, ByVal vdtDataBxDe As Variant, ByVal vdtDataBxAte As Variant, ByVal vlClienteDe As Variant, ByVal vlClienteAte As Variant, ByVal vsProdDe As Variant, ByVal vsProdAte As Variant, ByVal viTipoDe As Variant, ByVal viTipoAte As Variant, ByVal vsCidade As Variant, ByVal colVend As Collection, ByVal colRegiao As Collection, _
                                        vlNumIntNF As Variant, vlNumIntItemNF As Variant, vsSerie As Variant, vlNumNotaFiscal As Variant, viItemNF As Variant, vdtDataEmissao As Variant, vdValorTotal As Variant, vdValorProdutos As Variant, vdValorItem As Variant, viFaturamento As Variant, vsProduto As Variant, vsDescricaoItem As Variant, vlCliente As Variant, viFilial As Variant, viVendedor As Variant, viRegiao As Variant, vsCidadeRet As Variant, vsNomeCliente As Variant, viClasseDocCPR As Variant, vlNumIntDocCPR As Variant) As Long

Dim lErro As Long
Dim viStatus As Variant

On Error GoTo Erro_RelBxPorProd_PreparaInt

    lErro = Comando_PrepararInt(lComando, sSQL)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM

    lErro = Comando_BindVarInt(lComando, vlNumIntNF)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM

    lErro = Comando_BindVarInt(lComando, vlNumIntItemNF)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, vsSerie)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, vlNumNotaFiscal)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, viItemNF)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, vdtDataEmissao)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, vdValorTotal)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, vdValorProdutos)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, vdValorItem)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, viFaturamento)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, vsProduto)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, vsDescricaoItem)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, vlCliente)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, viFilial)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, viVendedor)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, viRegiao)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, vsCidadeRet)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, vsNomeCliente)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, viClasseDocCPR)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, vlNumIntDocCPR)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, viFilialEmpresa)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    If vdtDataEmiDe <> DATA_NULA Then
        lErro = Comando_BindVarInt(lComando, vdtDataEmiDe)
        If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    End If
        
    If vdtDataEmiAte <> DATA_NULA Then
        lErro = Comando_BindVarInt(lComando, vdtDataEmiAte)
        If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    End If
    
    If vlClienteDe <> 0 Then
        lErro = Comando_BindVarInt(lComando, vlClienteDe)
        If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    End If
    
    If vlClienteAte <> 0 Then
        lErro = Comando_BindVarInt(lComando, vlClienteAte)
        If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    End If
    
    If viTipoDe <> 0 Then
        lErro = Comando_BindVarInt(lComando, viTipoDe)
        If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    End If
    
    If viTipoAte <> 0 Then
        lErro = Comando_BindVarInt(lComando, viTipoAte)
        If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    End If
    
     If vsProdDe <> "" Then
        lErro = Comando_BindVarInt(lComando, vsProdDe)
        If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    End If
    
    If vsProdAte <> "" Then
        lErro = Comando_BindVarInt(lComando, vsProdAte)
        If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    End If
    
    If vsCidade <> "" Then
        lErro = Comando_BindVarInt(lComando, vsCidade)
        If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    End If
       
    If vdtDataBxDe <> DATA_NULA Then
        lErro = Comando_BindVarInt(lComando, vdtDataBxDe)
        If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    End If
        
    If vdtDataBxAte <> DATA_NULA Then
        lErro = Comando_BindVarInt(lComando, vdtDataBxAte)
        If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    End If
    
    lErro = Comando_ExecutarInt(lComando)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    RelBxPorProd_PreparaInt = SUCESSO
     
    Exit Function
    
Erro_RelBxPorProd_PreparaInt:

    RelBxPorProd_PreparaInt = gErr
     
    Select Case gErr

        Case ERRO_SEM_MENSAGEM
            Call Rotina_Erro(vbOKOnly, "ERRO_PREPARACAO_COMANDO_SQL", gErr, sSQL)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 213700)
     
    End Select
     
    Exit Function

End Function

Function PrevVendaMensal_Importa() As Long

Dim lTransacao As Long
Dim alComando(0 To 2) As Long
Dim lErro As Long
Dim iIndice As Integer
Dim iFilialEmpresa As Integer
Dim objPrev As ClassPrevVendaMensal
Dim colPrevVenda As New Collection
Dim tPrev As typePrevVendaMensal
Dim iRegiao As Integer

On Error GoTo Erro_PrevVendaMensal_Importa

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 91132
    
    'Abre os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 91131
    Next

    lErro = CF("ImportPrevVenda_Le", colPrevVenda)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    For Each objPrev In colPrevVenda
    
        'se não tiver região associada a filial do cliente --> erro
        lErro = Comando_Executar(alComando(2), "SELECT Regiao FROM FiliaisClientes WHERE CodFilial = ? AND CodCliente = ? ", iRegiao, objPrev.iFilial, objPrev.lCliente)
        If lErro <> AD_SQL_SUCESSO Then gError 99331
    
        lErro = Comando_BuscarPrimeiro(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 99332
    
        If lErro = AD_SQL_SEM_DADOS Then gError 99333
    
        objPrev.iCodRegiao = iRegiao
    
        'Lê os dados da tabela PrevVendaMensal
        lErro = Comando_ExecutarPos(alComando(0), "SELECT Quantidade1, valor1, DataAtualizacao1, Quantidade2, valor2, DataAtualizacao2, Quantidade3 , valor3, DataAtualizacao3, Quantidade4, valor4, DataAtualizacao4, Quantidade5 , valor5, DataAtualizacao5, " & _
        "Quantidade6, valor6, DataAtualizacao6, Quantidade7 , valor7, DataAtualizacao7, Quantidade8, valor8, DataAtualizacao8, Quantidade9 , valor9, DataAtualizacao9, Quantidade10, valor10, DataAtualizacao10, Quantidade11, valor11, DataAtualizacao11, " & _
        "Quantidade12, valor12, DataAtualizacao12 FROM PrevVendaMensal  WHERE FilialEmpresa = ? AND Codigo = ? AND Ano = ? AND CodRegiao = ? AND Cliente = ? AND Filial = ? AND Produto = ? ", 0, _
        tPrev.dQuantidade1, tPrev.dvalor1, tPrev.dtDataAtualizacao1, tPrev.dQuantidade2, tPrev.dvalor2, tPrev.dtDataAtualizacao2, tPrev.dQuantidade3, tPrev.dvalor3, tPrev.dtDataAtualizacao3, tPrev.dQuantidade4, tPrev.dValor4, tPrev.dtDataAtualizacao4, tPrev.dQuantidade5, tPrev.dValor5, tPrev.dtDataAtualizacao5, tPrev.dQuantidade6, tPrev.dValor6, tPrev.dtDataAtualizacao6, tPrev.dQuantidade7, tPrev.dValor7, tPrev.dtDataAtualizacao7, tPrev.dQuantidade8, tPrev.dValor8, tPrev.dtDataAtualizacao8, _
        tPrev.dQuantidade9, tPrev.dValor9, tPrev.dtDataAtualizacao9, tPrev.dQuantidade10, tPrev.dValor10, tPrev.dtDataAtualizacao10, tPrev.dQuantidade11, tPrev.dValor11, tPrev.dtDataAtualizacao11, tPrev.dQuantidade12, tPrev.dValor12, tPrev.dtDataAtualizacao12, objPrev.iFilialEmpresa, objPrev.sCodigo, objPrev.iAno, objPrev.iCodRegiao, objPrev.lCliente, objPrev.iFilial, objPrev.sProduto)
    
        lErro = Comando_BuscarPrimeiro(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 91134
        
        If objPrev.dQuantidade1 = -1 Then objPrev.dQuantidade1 = tPrev.dQuantidade1
        If objPrev.dvalor1 = -1 Then objPrev.dvalor1 = tPrev.dvalor1
        If objPrev.dQuantidade2 = -1 Then objPrev.dQuantidade2 = tPrev.dQuantidade2
        If objPrev.dvalor2 = -1 Then objPrev.dvalor2 = tPrev.dvalor2
        If objPrev.dQuantidade3 = -1 Then objPrev.dQuantidade3 = tPrev.dQuantidade3
        If objPrev.dvalor3 = -1 Then objPrev.dvalor3 = tPrev.dvalor3
        If objPrev.dQuantidade4 = -1 Then objPrev.dQuantidade4 = tPrev.dQuantidade4
        If objPrev.dValor4 = -1 Then objPrev.dValor4 = tPrev.dValor4
        If objPrev.dQuantidade5 = -1 Then objPrev.dQuantidade5 = tPrev.dQuantidade5
        If objPrev.dValor5 = -1 Then objPrev.dValor5 = tPrev.dValor5
        If objPrev.dQuantidade6 = -1 Then objPrev.dQuantidade6 = tPrev.dQuantidade6
        If objPrev.dValor6 = -1 Then objPrev.dValor6 = tPrev.dValor6
        If objPrev.dQuantidade7 = -1 Then objPrev.dQuantidade7 = tPrev.dQuantidade7
        If objPrev.dValor7 = -1 Then objPrev.dValor7 = tPrev.dValor7
        If objPrev.dQuantidade8 = -1 Then objPrev.dQuantidade8 = tPrev.dQuantidade8
        If objPrev.dValor8 = -1 Then objPrev.dValor8 = tPrev.dValor8
        If objPrev.dQuantidade9 = -1 Then objPrev.dQuantidade9 = tPrev.dQuantidade9
        If objPrev.dValor9 = -1 Then objPrev.dValor9 = tPrev.dValor9
        If objPrev.dQuantidade10 = -1 Then objPrev.dQuantidade10 = tPrev.dQuantidade10
        If objPrev.dValor10 = -1 Then objPrev.dValor10 = tPrev.dValor10
        If objPrev.dQuantidade11 = -1 Then objPrev.dQuantidade11 = tPrev.dQuantidade11
        If objPrev.dValor11 = -1 Then objPrev.dValor11 = tPrev.dValor11
        If objPrev.dQuantidade12 = -1 Then objPrev.dQuantidade12 = tPrev.dQuantidade12
        If objPrev.dValor12 = -1 Then objPrev.dValor12 = tPrev.dValor12
    
        'Se Encontrou o registro
        If lErro = AD_SQL_SUCESSO Then
    
            'Lock do registro
            lErro = Comando_LockExclusive(alComando(0))
            If lErro <> AD_SQL_SUCESSO Then gError 91135
    
            'Atualiza os dados da PrevVendaMensal
            lErro = Comando_ExecutarPos(alComando(1), "UPDATE PrevVendaMensal SET CodRegiao = ?, " & _
            "Quantidade1 = ? , Valor1 = ? , DataAtualizacao1 = ? , Quantidade2 = ? , valor2 = ? , DataAtualizacao2 = ? , Quantidade3 = ? , valor3 = ? , DataAtualizacao3 = ? , " & _
            "Quantidade4 = ? , valor4 = ? , DataAtualizacao4 = ? , Quantidade5 = ? , Valor5 = ? , DataAtualizacao5 = ?, Quantidade6 = ? , valor6 = ? ,DataAtualizacao6 = ?, " & _
            "Quantidade7 = ? , valor7 = ? , DataAtualizacao7 = ? , Quantidade8 = ? , valor8 = ?, DataAtualizacao8 = ?, Quantidade9 = ? , valor9 = ?, DataAtualizacao9 = ? , " & _
            "Quantidade10 = ? , valor10 = ?, DataAtualizacao10 = ? , Quantidade11 = ? , valor11 = ? , DataAtualizacao11 = ? , Quantidade12 = ?, valor12 = ? , DataAtualizacao12 = ?", _
            alComando(0), objPrev.iCodRegiao, objPrev.dQuantidade1, objPrev.dvalor1, objPrev.dtDataAtualizacao1, _
            objPrev.dQuantidade2, objPrev.dvalor2, objPrev.dtDataAtualizacao2, _
            objPrev.dQuantidade3, objPrev.dvalor3, objPrev.dtDataAtualizacao3, _
            objPrev.dQuantidade4, objPrev.dValor4, objPrev.dtDataAtualizacao4, _
            objPrev.dQuantidade5, objPrev.dValor5, objPrev.dtDataAtualizacao5, _
            objPrev.dQuantidade6, objPrev.dValor6, objPrev.dtDataAtualizacao6, _
            objPrev.dQuantidade7, objPrev.dValor7, objPrev.dtDataAtualizacao7, _
            objPrev.dQuantidade8, objPrev.dValor8, objPrev.dtDataAtualizacao8, _
            objPrev.dQuantidade9, objPrev.dValor9, objPrev.dtDataAtualizacao9, _
            objPrev.dQuantidade10, objPrev.dValor10, objPrev.dtDataAtualizacao10, _
            objPrev.dQuantidade11, objPrev.dValor11, objPrev.dtDataAtualizacao11, _
            objPrev.dQuantidade12, objPrev.dValor12, objPrev.dtDataAtualizacao12)
    
           If lErro <> AD_SQL_SUCESSO Then gError 91136
    
       Else
            'Insere os dados em PrevVendaMensal
            lErro = Comando_Executar(alComando(1), "INSERT INTO PrevVendaMensal(FilialEmpresa, Codigo, Ano, CodRegiao,Cliente, Filial, Produto, " & _
            "Quantidade1, Valor1, DataAtualizacao1, Quantidade2, valor2, DataAtualizacao2, Quantidade3, valor3, DataAtualizacao3, " & _
            "Quantidade4, valor4, DataAtualizacao4, Quantidade5, Valor5, DataAtualizacao5, Quantidade6, valor6,DataAtualizacao6, " & _
            "Quantidade7, valor7, DataAtualizacao7, Quantidade8, valor8, DataAtualizacao8, Quantidade9, valor9, DataAtualizacao9," & _
            "Quantidade10, valor10, DataAtualizacao10, Quantidade11, valor11, DataAtualizacao11, Quantidade12, valor12, DataAtualizacao12) " & _
            "VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
            objPrev.iFilialEmpresa, objPrev.sCodigo, objPrev.iAno, objPrev.iCodRegiao, _
            objPrev.lCliente, objPrev.iFilial, objPrev.sProduto, objPrev.dQuantidade1, objPrev.dvalor1, objPrev.dtDataAtualizacao1, _
            objPrev.dQuantidade2, objPrev.dvalor2, objPrev.dtDataAtualizacao2, _
            objPrev.dQuantidade3, objPrev.dvalor3, objPrev.dtDataAtualizacao3, _
            objPrev.dQuantidade4, objPrev.dValor4, objPrev.dtDataAtualizacao4, _
            objPrev.dQuantidade5, objPrev.dValor5, objPrev.dtDataAtualizacao5, _
            objPrev.dQuantidade6, objPrev.dValor6, objPrev.dtDataAtualizacao6, _
            objPrev.dQuantidade7, objPrev.dValor7, objPrev.dtDataAtualizacao7, _
            objPrev.dQuantidade8, objPrev.dValor8, objPrev.dtDataAtualizacao8, _
            objPrev.dQuantidade9, objPrev.dValor9, objPrev.dtDataAtualizacao9, _
            objPrev.dQuantidade10, objPrev.dValor10, objPrev.dtDataAtualizacao10, _
            objPrev.dQuantidade11, objPrev.dValor11, objPrev.dtDataAtualizacao11, _
            objPrev.dQuantidade12, objPrev.dValor12, objPrev.dtDataAtualizacao12)
            
            If lErro <> AD_SQL_SUCESSO Then gError 91137
    
        End If
        
    Next

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 91138

    PrevVendaMensal_Importa = SUCESSO

    Exit Function

Erro_PrevVendaMensal_Importa:

    PrevVendaMensal_Importa = gErr

    Select Case gErr

        Case 91131
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 91132
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
        
        Case 91133, 91134
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PREVVENDAMENSAL", gErr, objPrev.sCodigo)
        
        Case 91135
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_PREVVENDAMENSAL", gErr)

        Case 91136
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_PREVVENDAMENSAL", gErr)

        Case 91137
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_PREVVENDAMENSAL", gErr)

        Case 91138
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case 99331, 99332
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIAIS", gErr)
        
        Case 99333
            Call Rotina_Erro(vbOKOnly, "ERRO_REGIAO_NAO_SELECIONADA2", gErr)
            
        Case ERRO_SEM_MENSAGEM
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 165153)

    End Select

    Call Transacao_Rollback

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function RelRecPorProd_Prepara(ByVal objRelRecPorProd As ClassRelRecPorProd) As Long

Dim lErro As Long, lNumIntRel As Long
Dim iIndice As Integer, iSeq As Integer
Dim lTransacao As Long, sSQL As String
Dim alComando(0 To 4) As Long
Dim objVendedor As ClassVendedor
Dim colVendFiltro As New Collection
Dim colVendedores As New Collection

Dim lNumIntNF As Long, lNumIntItemNF As Long, sSerie As String, lNumNF As Long, iItemNF As Integer
Dim dtDataEmissao As Date, dValorNF As Double, dValorProdutos As Double, dValorItem As Double
Dim iFaturamento As Integer, sProduto As String, sDescricaoItem As String, lCliente As Long
Dim iFilial As Integer, iVendedor As Integer, iRegiao As Integer, sCidade As String
Dim sNomeCliente As String, iClasseDocCPR As Integer, lNumIntDocCPR As Long

Dim lNumIntBaixa As Long, lNumIntParcela As Long, iNumParcela As Integer, dValorTitulo As Double
Dim dValorIRRF As Double, dValorParcela As Double, dValorRecebido As Double
Dim dValorBaixado As Double

Dim dtDataDeAux As Date, dtDataAteAux As Date, dValorParcRecRateadoProd As Double
Dim iVendedorAnt As Integer, sProdutoAnt As String, sDescProdAnt As String
Dim dFatorNF As Double, dFatorRec As Double, bTerminou As Boolean
Dim dAcumuladoProd As Double, dAcumuladoVend As Double, sNomeVend As String
Dim dSaldo As Double
Dim lNumIntDoc As Long
Dim dtDataVencimento As Date

On Error GoTo Erro_RelRecPorProd_Prepara

    'Abrir transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 215012

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 215013
    Next
    
    'Obter NumIntRel
    lErro = CF("Config_ObterNumInt", "FATConfig", "NUMINTREL_RECPORPROD", lNumIntRel)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    objRelRecPorProd.lNumIntRel = lNumIntRel
    
    'Lê todos os vendedores com o seus respectivos nomes
    lErro = CF("Vendedor_Le_Todos", colVendedores)
    If lErro <> SUCESSO And lErro <> 104287 Then gError ERRO_SEM_MENSAGEM

    'Obtem a lista de vendedores que serão filtrados
    If objRelRecPorProd.iVendedor <> 0 Then
        If objRelRecPorProd.iTipoVend = VENDEDOR_DIRETO Then
            Set objVendedor = New ClassVendedor
            objVendedor.iCodigo = objRelRecPorProd.iVendedor
            colVendFiltro.Add objVendedor
        Else
            lErro = CF("Vendedor_Le_Hierarquia", objRelRecPorProd.iVendedor, colVendFiltro, 0)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        End If
    End If
    
    iSeq = 0
    bTerminou = False
    
    sSerie = String(STRING_MAXIMO, 0)
    sProduto = String(STRING_MAXIMO, 0)
    sDescricaoItem = String(STRING_MAXIMO, 0)
    sCidade = String(STRING_MAXIMO, 0)
    sNomeCliente = String(STRING_MAXIMO, 0)
    
    lErro = RelRecPorProd_PreparaSQL(objRelRecPorProd, colVendFiltro, sSQL)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    lErro = RelRecPorProd_PreparaInt(alComando(0), sSQL, objRelRecPorProd.iFilialEmpresa, objRelRecPorProd.dtDataEmiDe, objRelRecPorProd.dtDataEmiAte, objRelRecPorProd.lClienteDe, objRelRecPorProd.lClienteAte, objRelRecPorProd.sProdutoDe, objRelRecPorProd.sProdutoAte, objRelRecPorProd.iTipoDe, objRelRecPorProd.iTipoAte, objRelRecPorProd.sCidade, colVendFiltro, objRelRecPorProd.colRegioes, lNumIntNF, lNumIntItemNF, sSerie, lNumNF, iItemNF, dtDataEmissao, dValorNF, dValorProdutos, dValorItem, iFaturamento, sProduto, sDescricaoItem, lCliente, iFilial, iVendedor, iRegiao, sCidade, sNomeCliente, iClasseDocCPR, lNumIntDocCPR)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    lErro = Comando_BuscarProximo(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 215014
    
    If lErro = AD_SQL_SEM_DADOS Then bTerminou = True
    
    If objRelRecPorProd.iExibirVend = MARCADO Then
        iVendedorAnt = iVendedor
    Else
        iVendedorAnt = 0
    End If

    dAcumuladoProd = 0
    dAcumuladoVend = 0
    
    sProdutoAnt = sProduto
    sDescProdAnt = sDescricaoItem
    
    Do While Not bTerminou
       
        lErro = Comando_Executar(alComando(1), "SELECT NumIntDoc, NumParcela, ValorTitulo, ValorIRRF, ValorParcela, SaldoParcela, DataVencimento FROM ReceberClasseDocCR WHERE ClasseDocCPR = ? AND NumIntDoc = ? ORDER BY DataVencimento", _
        lNumIntDoc, iNumParcela, dValorTitulo, dValorIRRF, dValorParcela, dSaldo, dtDataVencimento, iClasseDocCPR, lNumIntDocCPR)
        If lErro <> AD_SQL_SUCESSO Then gError 215015
    
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 215016
    
        Do While lErro <> AD_SQL_SEM_DADOS
   
            iSeq = iSeq + 1
            
            'CÁLCULO BASEADO NO VALOR RECEBIDO
'            dFatorNF = 0
'            If dValorProdutos > DELTA_VALORMONETARIO Then
'                dFatorNF = dValorItem / dValorProdutos
'            End If
'
'            dValorParcBxRateadoProd = Arredonda_Moeda(dValorRecebido * dFatorNF)

            'CÁLCULO BASEADO NO VALOR DOS ITENS
            dFatorRec = 0
            If (dValorTitulo - dValorIRRF) > DELTA_VALORMONETARIO Then
                dFatorRec = dSaldo / (dValorTitulo - dValorIRRF)
            End If
            
            If iFaturamento = 1 Then
                dValorParcRecRateadoProd = Arredonda_Moeda(dValorItem * dFatorRec)
            Else
                dValorParcRecRateadoProd = -Arredonda_Moeda(dValorItem * dFatorRec)
            End If
                        
            lErro = Comando_Executar(alComando(2), "INSERT INTO RelRecPorProdDet (NumIntRel,Produto,Vendedor,Seq,SerieNF,NumNF,DataEmissaoNF,ValorTotalNF,ItemNF,ValorItemNF,NumParcela,DataVencimento,ValorTotalParc,Saldo,ValorParcRecRateadoProd,Cliente,NomeCliente,Cidade,NumIntItemNF,NumIntParcRec) " & _
                                                   "VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                lNumIntRel, sProduto, IIf(objRelRecPorProd.iExibirVend = MARCADO, iVendedor, 0), iSeq, sSerie, lNumNF, dtDataEmissao, dValorNF, iItemNF, dValorItem, iNumParcela, dtDataVencimento, (dValorTitulo - dValorIRRF), dSaldo, dValorParcRecRateadoProd, lCliente, sNomeCliente, sCidade, lNumIntItemNF, lNumIntParcela)
            If lErro <> AD_SQL_SUCESSO Then gError 215017
            
            dAcumuladoProd = dAcumuladoProd + dValorParcRecRateadoProd
            dAcumuladoVend = dAcumuladoVend + dValorParcRecRateadoProd
            
            lErro = Comando_BuscarProximo(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 215018
            
        Loop
        
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 215019
        
        If lErro = AD_SQL_SEM_DADOS Then bTerminou = True
        
        'Se acabou ou trocou o produto ou trocou o vendedor (quando exibe quebrado por vendedor)
        If bTerminou Or sProduto <> sProdutoAnt Or (iVendedor <> iVendedorAnt And objRelRecPorProd.iExibirVend = MARCADO) Then
        
            lErro = Comando_Executar(alComando(3), "INSERT INTO RelRecPorProd (NumIntRel,Vendedor,Produto,Descricao,ValorRec) VALUES (?,?,?,?,?)", _
                lNumIntRel, iVendedorAnt, sProdutoAnt, sDescProdAnt, dAcumuladoProd)
            If lErro <> AD_SQL_SUCESSO Then gError 215020
            
            dAcumuladoProd = 0
            sProdutoAnt = sProduto
            sDescProdAnt = sDescricaoItem
        
        End If
        
        'Se acabou ou trocou o vendedor (quando exibe quebrado por vendedor)
        If bTerminou Or (iVendedor <> iVendedorAnt And objRelRecPorProd.iExibirVend = MARCADO) Then
        
            sNomeVend = ""
            If iVendedorAnt <> 0 Then
                For Each objVendedor In colVendedores
                    If objVendedor.iCodigo = iVendedorAnt Then
                        sNomeVend = objVendedor.sNomeReduzido
                        Exit For
                    End If
                Next
            End If
        
            lErro = Comando_Executar(alComando(4), "INSERT INTO RelRecPorVend (NumIntRel,Vendedor,NomeVendedor,ValorRec) VALUES (?,?,?,?)", _
                lNumIntRel, iVendedorAnt, sNomeVend, dAcumuladoVend)
            If lErro <> AD_SQL_SUCESSO Then gError 215021
            
            dAcumuladoVend = 0
            iVendedorAnt = iVendedor
        
        End If
    
    Loop
        
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    'Fechar transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 215022

    RelRecPorProd_Prepara = SUCESSO
    
    Exit Function
    
Erro_RelRecPorProd_Prepara:

    RelRecPorProd_Prepara = gErr

    Select Case gErr

        Case 215012
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 215013
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 215014 To 215021
            Call Rotina_Erro(vbOKOnly, "ERRO_PREPARACAO_COMANDO_SQL", gErr, sSQL)

        Case 215022
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case ERRO_SEM_MENSAGEM

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 215023)

    End Select
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Call Transacao_Rollback

    Exit Function

End Function

Private Function RelRecPorProd_PreparaSQL(ByVal objRelRecPorProd As ClassRelRecPorProd, ByVal colVendedores As Collection, sSQL As String) As Long

Dim lErro As Long
Dim sWhere As String
Dim sOrderBy As String
Dim sSubWhere As String
Dim objVendedor As ClassVendedor
Dim vValor As Variant

On Error GoTo Erro_RelRecPorProd_PreparaSQL
  
    sSQL = "SELECT N.NumIntDoc AS NumIntNF, I.NumIntDoc AS NumIntItemNF, N.Serie, N.NumNotaFiscal, I.Item, N.DataEmissao, N.ValorTotal, N.ValorProdutos, "
    sSQL = sSQL & "ROUND(I.Quantidade * I.PrecoUnitario - I.ValorDesconto,2), T.Faturamento , I.Produto, P.Descricao, "
    sSQL = sSQL & "F.CodCliente, F.CodFilial, F.Vendedor, F.Regiao, E.Cidade, C.NomeReduzido, "
    sSQL = sSQL & "N.ClasseDocCPR , N.NumIntDocCPR "
    sSQL = sSQL & "FROM TiposDocInfo AS T, ItensNFiscal As I, NFiscal As N, Produtos As P, Clientes AS C, FiliaisClientes AS F, Enderecos AS E "

    sWhere = "WHERE N.NumIntDoc = I.NumIntNF AND T.Codigo = N.TipoNFiscal AND I.Produto = P.Codigo AND N.Status <> 7 AND "
    sWhere = sWhere & "C.Codigo = N.Cliente And F.CodCliente = N.Cliente And F.CodFilial = N.FilialCli And F.Endereco = E.Codigo "
    
    If objRelRecPorProd.iDevolucoes = MARCADO Then
        sWhere = sWhere & "AND T.Faturamento IN (1,2) "
    Else
        sWhere = sWhere & "AND T.Faturamento = 1 "
    End If
        
    If objRelRecPorProd.iFilialEmpresa <> 0 Then
        sWhere = sWhere & "AND N.FilialEmpresa = ? "
    End If
    
    If objRelRecPorProd.dtDataEmiDe <> DATA_NULA Then
        sWhere = sWhere & "AND N.DataEmissao >= ? "
    End If
    
    If objRelRecPorProd.dtDataEmiAte <> DATA_NULA Then
        sWhere = sWhere & "AND N.DataEmissao <= ? "
    End If
    
    If objRelRecPorProd.lClienteDe <> 0 Then
        sWhere = sWhere & "AND N.Cliente >= ? "
    End If
    
    If objRelRecPorProd.lClienteAte <> 0 Then
        sWhere = sWhere & "AND N.Cliente <= ? "
    End If
    
    If objRelRecPorProd.iTipoDe <> 0 Then
        sWhere = sWhere & "AND P.Tipo >= ? "
    End If
    
    If objRelRecPorProd.iTipoAte <> 0 Then
        sWhere = sWhere & "AND P.Tipo <= ? "
    End If
        
    If Len(Trim(objRelRecPorProd.sProdutoDe)) <> 0 Then
        sWhere = sWhere & "AND I.Produto >= ? "
    End If
    
    If Len(Trim(objRelRecPorProd.sProdutoAte)) <> 0 Then
        sWhere = sWhere & "AND I.Produto <= ? "
    End If
    
    If Len(Trim(objRelRecPorProd.sCidade)) <> 0 Then
        sWhere = sWhere & "AND E.Cidade = ? "
    End If
    
    If colVendedores.Count <> 0 Then
        sSubWhere = ""
        For Each objVendedor In colVendedores
            If Len(Trim(sSubWhere)) > 0 Then sSubWhere = sSubWhere & ","
            sSubWhere = sSubWhere & CStr(objVendedor.iCodigo)
        Next
        sWhere = sWhere & "AND F.Vendedor IN (" & sSubWhere & ") "
    End If
    
   If objRelRecPorProd.colRegioes.Count <> 0 Then
        sSubWhere = ""
        For Each vValor In objRelRecPorProd.colRegioes
            If Len(Trim(sSubWhere)) > 0 Then sSubWhere = sSubWhere & ","
            sSubWhere = sSubWhere & CStr(vValor)
        Next
        sWhere = sWhere & "AND F.Regiao IN (" & sSubWhere & ") "
    End If
    
'    If objRelBxPorProd.dtDataBxDe <> DATA_NULA And objRelBxPorProd.dtDataBxAte <> DATA_NULA Then
'        sWhere = sWhere & "AND EXISTS (SELECT * FROM BaixasClasseDocCR AS X WHERE X.ClasseDocCPR = N.ClasseDocCPR AND X.NumIntDoc=N.NumIntDocCPR AND X.Data BETWEEN ? AND ?) "
'    ElseIf objRelBxPorProd.dtDataBxDe <> DATA_NULA Then
'        sWhere = sWhere & "AND EXISTS (SELECT * FROM BaixasClasseDocCR AS X WHERE X.ClasseDocCPR = N.ClasseDocCPR AND X.NumIntDoc=N.NumIntDocCPR AND X.Data >= ?) "
'    ElseIf objRelBxPorProd.dtDataBxAte <> DATA_NULA Then
'        sWhere = sWhere & "AND EXISTS (SELECT * FROM BaixasClasseDocCR AS X WHERE X.ClasseDocCPR = N.ClasseDocCPR AND X.NumIntDoc=N.NumIntDocCPR AND X.Data <= ?) "
'    Else
'        sWhere = sWhere & "AND EXISTS (SELECT * FROM BaixasClasseDocCR AS X WHERE X.ClasseDocCPR = N.ClasseDocCPR AND X.NumIntDoc=N.NumIntDocCPR) "
'    End If
    
    sWhere = sWhere & "AND EXISTS (SELECT * FROM ReceberClasseDocCR AS X WHERE X.ClasseDocCPR = N.ClasseDocCPR AND X.NumIntDoc=N.NumIntDocCPR AND Round(X.SaldoParcela, 2) > 0) "
    
    
    If objRelRecPorProd.iExibirVend = MARCADO Then
        sOrderBy = "ORDER BY F.Vendedor, I.Produto "
    Else
        sOrderBy = "ORDER BY I.Produto "
    End If
    
    sSQL = sSQL & sWhere & sOrderBy
    
    RelRecPorProd_PreparaSQL = SUCESSO
     
    Exit Function
    
Erro_RelRecPorProd_PreparaSQL:

    RelRecPorProd_PreparaSQL = gErr
     
    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 215024)
     
    End Select
     
    Exit Function

End Function

Private Function RelRecPorProd_PreparaInt(ByVal lComando As Long, ByVal sSQL As String, ByVal viFilialEmpresa As Variant, ByVal vdtDataEmiDe As Variant, ByVal vdtDataEmiAte As Variant, ByVal vlClienteDe As Variant, ByVal vlClienteAte As Variant, ByVal vsProdDe As Variant, ByVal vsProdAte As Variant, ByVal viTipoDe As Variant, ByVal viTipoAte As Variant, ByVal vsCidade As Variant, ByVal colVend As Collection, ByVal colRegiao As Collection, _
                                        vlNumIntNF As Variant, vlNumIntItemNF As Variant, vsSerie As Variant, vlNumNotaFiscal As Variant, viItemNF As Variant, vdtDataEmissao As Variant, vdValorTotal As Variant, vdValorProdutos As Variant, vdValorItem As Variant, viFaturamento As Variant, vsProduto As Variant, vsDescricaoItem As Variant, vlCliente As Variant, viFilial As Variant, viVendedor As Variant, viRegiao As Variant, vsCidadeRet As Variant, vsNomeCliente As Variant, viClasseDocCPR As Variant, vlNumIntDocCPR As Variant) As Long

Dim lErro As Long
Dim viStatus As Variant

On Error GoTo Erro_RelRecPorProd_PreparaInt

    lErro = Comando_PrepararInt(lComando, sSQL)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM

    lErro = Comando_BindVarInt(lComando, vlNumIntNF)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM

    lErro = Comando_BindVarInt(lComando, vlNumIntItemNF)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, vsSerie)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, vlNumNotaFiscal)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, viItemNF)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, vdtDataEmissao)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, vdValorTotal)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, vdValorProdutos)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, vdValorItem)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, viFaturamento)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, vsProduto)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, vsDescricaoItem)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, vlCliente)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, viFilial)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, viVendedor)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, viRegiao)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, vsCidadeRet)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, vsNomeCliente)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, viClasseDocCPR)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, vlNumIntDocCPR)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(lComando, viFilialEmpresa)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    If vdtDataEmiDe <> DATA_NULA Then
        lErro = Comando_BindVarInt(lComando, vdtDataEmiDe)
        If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    End If
        
    If vdtDataEmiAte <> DATA_NULA Then
        lErro = Comando_BindVarInt(lComando, vdtDataEmiAte)
        If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    End If
    
    If vlClienteDe <> 0 Then
        lErro = Comando_BindVarInt(lComando, vlClienteDe)
        If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    End If
    
    If vlClienteAte <> 0 Then
        lErro = Comando_BindVarInt(lComando, vlClienteAte)
        If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    End If
    
    If viTipoDe <> 0 Then
        lErro = Comando_BindVarInt(lComando, viTipoDe)
        If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    End If
    
    If viTipoAte <> 0 Then
        lErro = Comando_BindVarInt(lComando, viTipoAte)
        If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    End If
    
     If vsProdDe <> "" Then
        lErro = Comando_BindVarInt(lComando, vsProdDe)
        If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    End If
    
    If vsProdAte <> "" Then
        lErro = Comando_BindVarInt(lComando, vsProdAte)
        If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    End If
    
    If vsCidade <> "" Then
        lErro = Comando_BindVarInt(lComando, vsCidade)
        If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    End If
       
    lErro = Comando_ExecutarInt(lComando)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    RelRecPorProd_PreparaInt = SUCESSO
     
    Exit Function
    
Erro_RelRecPorProd_PreparaInt:

    RelRecPorProd_PreparaInt = gErr
     
    Select Case gErr

        Case ERRO_SEM_MENSAGEM
            Call Rotina_Erro(vbOKOnly, "ERRO_PREPARACAO_COMANDO_SQL", gErr, sSQL)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 215025)
     
    End Select
     
    Exit Function

End Function

Private Function NFe_PAF_ImportarXml_Trata_Almox(ByVal lComando1 As Long, ByVal lComando2 As Long, ByVal sProduto As String, ByVal iFilialEmpresa As Integer, iAlmoxarifado As Integer) As Long

Dim lErro As Long
Dim iAlmoxAux As Integer
Dim dtData As Date
Dim objEstoqueProduto As New ClassEstoqueProduto
Dim colRastreamento As New Collection
Dim iAlmoxarifadoPadrao As Integer

On Error GoTo Erro_NFe_PAF_ImportarXml_Trata_Almox

    lErro = Comando_Executar(lComando1, "SELECT Codigo FROM Almoxarifado WHERE FilialEmpresa = ? ORDER BY Codigo", iAlmoxAux, iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 213845

    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 213846
    
    If lErro <> AD_SQL_SUCESSO Then gError 213847 'Nenhum almoxarifado cadastrado para filial
    
    dtData = CDate("01/01/" & CStr(Year(Date)))
    
    objEstoqueProduto.dtDataInicial = dtData
    objEstoqueProduto.iFilialEmpresa = iFilialEmpresa
    objEstoqueProduto.iAlmoxarifado = iAlmoxAux
    objEstoqueProduto.sProduto = sProduto
    objEstoqueProduto.dQuantidadeInicial = 0
    
    iAlmoxarifadoPadrao = MARCADO
    
    'Chama EstoqueInicial_Grava
    lErro = CF("EstoqueInicial_Grava_Trans", objEstoqueProduto, iAlmoxarifadoPadrao, colRastreamento)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    iAlmoxarifado = iAlmoxAux

    NFe_PAF_ImportarXml_Trata_Almox = SUCESSO
     
    Exit Function
    
Erro_NFe_PAF_ImportarXml_Trata_Almox:

    NFe_PAF_ImportarXml_Trata_Almox = gErr
     
    Select Case gErr
        
        Case 213845, 213846
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TABELA_ALMOXARIFADOS", gErr)
        
        Case 213847
            Call Rotina_Erro(vbOKOnly, "ERRO_NENHUM_ALMOXARIFADO_BD", gErr)
        
        Case ERRO_SEM_MENSAGEM
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 213848)
     
    End Select
     
    Exit Function
    
End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'GRAVAÇÃO
Public Function DEInfo_Grava(ByVal objDEInfo As ClassDEInfo) As Long

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_DEInfo_Grava

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 213970

    lErro = CF("DEInfo_Grava_EmTrans", objDEInfo)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 213971

    DEInfo_Grava = SUCESSO

    Exit Function

Erro_DEInfo_Grava:

    DEInfo_Grava = gErr

    Select Case gErr

        Case 213970
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case ERRO_SEM_MENSAGEM

        Case 213971
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 213972)

    End Select

    'Desfaz Transação
    Call Transacao_Rollback

    Exit Function

End Function

Public Function DEInfo_Grava_EmTrans(ByVal objDEInfo As ClassDEInfo) As Long

Dim lErro As Long
Dim alComando(0 To 5) As Long
Dim iIndice As Integer
Dim lNumIntDoc As Long
Dim iAux As Integer

On Error GoTo Erro_DEInfo_Grava_EmTrans

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 213973
    Next

    'Le a tabela DEInfo
    lErro = Comando_ExecutarPos(alComando(0), "SELECT NumIntDoc FROM DEInfo WHERE Numero= ? ", _
                0, lNumIntDoc, objDEInfo.sNumero)
    If lErro <> AD_SQL_SUCESSO Then gError 213974

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 213975

    'Se existir => UPDATE, senão => INSERT
    If lErro = AD_SQL_SUCESSO Then

        'Trava registro contra alterações/Leituras
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> SUCESSO Then gError 213976
        
        objDEInfo.lNumIntDoc = lNumIntDoc

        lErro = Comando_ExecutarPos(alComando(1), "UPDATE DEInfo SET Data= ? , FilialEmpresa= ? , Descricao= ? , TipoDoc= ? , " & _
                "Natureza= ? , NumConhEmbarque= ? , UFEmbarque= ? , LocalEmbarque= ? , DataConhEmbarque= ? , " & _
                "TipoConhEmbarque= ? , CodPais= ? , DataAverbacao= ? ", alComando(0), _
                objDEInfo.dtData, objDEInfo.iFilialEmpresa, objDEInfo.sDescricao, objDEInfo.iTipoDoc, _
                objDEInfo.iNatureza, objDEInfo.sNumConhEmbarque, objDEInfo.sUFEmbarque, objDEInfo.sLocalEmbarque, objDEInfo.dtDataConhEmbarque, _
                objDEInfo.iTipoConhEmbarque, objDEInfo.iCodPais, objDEInfo.dtDataAverbacao)
        If lErro <> AD_SQL_SUCESSO Then gError 213977
        
        lErro = DERegistro_Exclui(objDEInfo, alComando(2))
        If lErro <> AD_SQL_SUCESSO Then gError ERRO_SEM_MENSAGEM

    Else

        'Obter NumIntDoc
        lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_INT_PROX_DEINFO", lNumIntDoc)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

        objDEInfo.lNumIntDoc = lNumIntDoc

        lErro = Comando_Executar(alComando(1), "INSERT INTO DEInfo( NumIntDoc, Numero, Data, FilialEmpresa, " & _
                "Descricao, TipoDoc, Natureza, NumConhEmbarque, UFEmbarque, " & _
                "LocalEmbarque, DataConhEmbarque, TipoConhEmbarque, CodPais, DataAverbacao) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                objDEInfo.lNumIntDoc, objDEInfo.sNumero, objDEInfo.dtData, objDEInfo.iFilialEmpresa, _
                objDEInfo.sDescricao, objDEInfo.iTipoDoc, objDEInfo.iNatureza, objDEInfo.sNumConhEmbarque, objDEInfo.sUFEmbarque, _
                objDEInfo.sLocalEmbarque, objDEInfo.dtDataConhEmbarque, objDEInfo.iTipoConhEmbarque, objDEInfo.iCodPais, objDEInfo.dtDataAverbacao)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 213978

    End If

    lErro = DERegistro_Insere(objDEInfo, alComando(3))
    If lErro <> AD_SQL_SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_Executar(alComando(4), "SELECT E.TipoDoc FROM InfoAdicExportacao As E WHERE E.NumIntDE= ? AND E.NumRE <> '' AND E.NumRE NOT IN (SELECT R.NumRegistro FROM DERegistro As R WHERE R.NumIntDE = E.NumIntDE)", _
                iAux, lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 216067

    lErro = Comando_BuscarPrimeiro(alComando(4))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 216068
    
    If lErro = AD_SQL_SUCESSO Then gError 216069
    
    lErro = Comando_Executar(alComando(5), "SELECT E.TipoDoc FROM InfoAdicDocItem As E WHERE E.NumIntDE= ? AND E.NumRE <> '' AND E.NumRE NOT IN (SELECT R.NumRegistro FROM DERegistro As R WHERE R.NumIntDE = E.NumIntDE)", _
                iAux, lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 216070

    lErro = Comando_BuscarPrimeiro(alComando(5))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 216071
    
    If lErro = AD_SQL_SUCESSO Then gError 216072

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    DEInfo_Grava_EmTrans = SUCESSO

    Exit Function

Erro_DEInfo_Grava_EmTrans:

    DEInfo_Grava_EmTrans = gErr

    Select Case gErr

        Case ERRO_SEM_MENSAGEM

        Case 213973
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 213974, 213975
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_DEINFO", gErr)

        Case 213976
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_DEINFO", gErr)

        Case 213977
            Call Rotina_Erro(vbOKOnly, "ERRO_UPDATE_DEINFO", gErr)

        Case 213978
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_DEINFO", gErr)

        Case 216067, 216068
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TABELA", gErr, "InfoAdicExportacao")
        
        Case 216069, 216072
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_DEINFO_USADA", gErr)

        Case 216070, 216071
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TABELA", gErr, "InfoAdicDocItem")

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 213979)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'EXCLUSÃO
Public Function DEInfo_Exclui(ByVal objDEInfo As ClassDEInfo) As Long

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_DEInfo_Exclui

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 213980

    lErro = CF("DEInfo_Exclui_EmTrans", objDEInfo)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 213981

    DEInfo_Exclui = SUCESSO

    Exit Function

Erro_DEInfo_Exclui:

    DEInfo_Exclui = gErr

    Select Case gErr

        Case 213980
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case ERRO_SEM_MENSAGEM

        Case 213981
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 213982)

    End Select

    'Desfaz Transação
    Call Transacao_Rollback

    Exit Function

End Function

Public Function DEInfo_Exclui_EmTrans(ByVal objDEInfo As ClassDEInfo) As Long

Dim lErro As Long
Dim alComando(0 To 4) As Long
Dim iIndice As Integer
Dim lNumIntDoc As Long
Dim iAux As Integer

On Error GoTo Erro_DEInfo_Exclui_EmTrans

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 213983
    Next

    'Le a tabela DEInfo
    lErro = Comando_ExecutarPos(alComando(0), "SELECT NumIntDoc FROM DEInfo WHERE Numero= ? ", _
                0, lNumIntDoc, objDEInfo.sNumero)
    If lErro <> AD_SQL_SUCESSO Then gError 213984

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 213985

    'Se não existir => ERRO
    If lErro = AD_SQL_SEM_DADOS Then gError 213986

    'Trava registro contra alterações/Leituras
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> SUCESSO Then gError 213987
        
    lErro = Comando_Executar(alComando(3), "SELECT TipoDoc FROM InfoAdicExportacao WHERE NumIntDE= ? ", _
                iAux, lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 216061

    lErro = Comando_BuscarPrimeiro(alComando(3))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 216062
    
    If lErro = AD_SQL_SUCESSO Then gError 216063
    
    lErro = Comando_Executar(alComando(4), "SELECT TipoDoc FROM InfoAdicDocItem WHERE NumIntDE= ? ", _
                iAux, lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 216064

    lErro = Comando_BuscarPrimeiro(alComando(4))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 216065
    
    If lErro = AD_SQL_SUCESSO Then gError 216066

    lErro = DERegistro_Exclui(objDEInfo, alComando(2))
    If lErro <> AD_SQL_SUCESSO Then gError ERRO_SEM_MENSAGEM

    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM DEInfo", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 213988

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    DEInfo_Exclui_EmTrans = SUCESSO

    Exit Function

Erro_DEInfo_Exclui_EmTrans:

    DEInfo_Exclui_EmTrans = gErr

    Select Case gErr

        Case 213983
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 213984, 213985
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_DEINFO", gErr)

        Case 213986
            Call Rotina_Erro(vbOKOnly, "ERRO_DEINFO_NAO_CADASTRADO", gErr, objDEInfo.sNumero)

        Case 213987
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_DEINFO", gErr)

        Case 213988
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_DEINFO", gErr)
            
        Case 216061, 216062
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TABELA", gErr, "InfoAdicExportacao")
        
        Case 216063, 216066
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_DEINFO_USADA", gErr)

        Case 216064, 216065
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TABELA", gErr, "InfoAdicDocItem")

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 213989)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function DERegistro_Exclui(ByVal objDEInfo As ClassDEInfo, ByVal lComando As Long) As Long

Dim lErro As Long

On Error GoTo Erro_DERegistro_Exclui

    lErro = Comando_Executar(lComando, "DELETE FROM DERegistro WHERE NumIntDE= ? ", objDEInfo.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 213990

    DERegistro_Exclui = SUCESSO

    Exit Function

Erro_DERegistro_Exclui:

    DERegistro_Exclui = gErr

    Select Case gErr

        Case 213990
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_DEREGISTRO", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 213991)

    End Select

    Exit Function

End Function

Public Function DERegistro_Insere(ByVal objDEInfo As ClassDEInfo, ByVal lComando As Long) As Long

Dim lErro As Long
Dim objRE As ClassDERegistro
Dim iIndice As Integer

On Error GoTo Erro_DERegistro_Insere

    iIndice = 0
    For Each objRE In objDEInfo.colRE
        iIndice = iIndice + 1
        lErro = Comando_Executar(lComando, "INSERT INTO DERegistro( NumIntDE, NumRegistro, DataRegistro, Seq) VALUES (?,?,?,?)", _
                objDEInfo.lNumIntDoc, objRE.sNumRegistro, objRE.dtDataRegistro, iIndice)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 213992
    Next

    DERegistro_Insere = SUCESSO

    Exit Function

Erro_DERegistro_Insere:

    DERegistro_Insere = gErr

    Select Case gErr

        Case 213992
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_DEREGISTRO", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 213993)

    End Select

    Exit Function

End Function

Private Function IBGEMunicipio_Obtem(ByVal sCodIBGE As String, sCidade As String, sUF As String) As Long

Dim lErro As Long
Dim lComando As Long
Dim sCidadeAux As String, sUFAux As String

On Error GoTo Erro_IBGEMunicipio_Obtem

    'Executa a abertura do Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 202769
    
    sCidade = ""
    sUF = ""

    'Alocação de espaço no buffer
    sCidadeAux = String(STRING_MAXIMO, 0)
    sUFAux = String(STRING_MAXIMO, 0)

    'Le a tabelaISSQN
    lErro = Comando_Executar(lComando, "SELECT E.Sigla, M.Munic FROM IBGEMunicipios AS M, Estados AS E WHERE E.CodIBGE = M.CodUF AND M.CodIBGE = ?  ", sUFAux, sCidadeAux, sCodIBGE)
    If lErro <> AD_SQL_SUCESSO Then gError 202770

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 202771

    'Sem Dados
    If lErro = AD_SQL_SEM_DADOS Then gError ERRO_LEITURA_SEM_DADOS

    sCidade = sCidadeAux
    sUF = sUFAux

    'Fecha Comando
    Call Comando_Fechar(lComando)

    IBGEMunicipio_Obtem = SUCESSO

    Exit Function

Erro_IBGEMunicipio_Obtem:

    IBGEMunicipio_Obtem = gErr

    Select Case gErr

        Case 202769
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 202770, 202771
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ISSQN", gErr)

        Case ERRO_LEITURA_SEM_DADOS 'Sem dados -> Tratado na rotina chamadora

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 202772)

    End Select

    'Fecha Comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Public Function RelFiltroFilCliCat_Prepara(ByVal vsCategoria As Variant, ByVal colCatItem As Collection, lNumIntRel As Variant, Optional ByVal vlCliDe As Variant = 0, Optional ByVal vlCliAte As Variant = 0, Optional ByVal vsCidade As Variant = "", Optional ByVal viVendDe As Variant = 0, Optional ByVal viVendAte As Variant = 0, Optional ByVal iTipoVend As Integer = 0, Optional ByVal vsUsuCobrador As Variant = "", Optional ByVal viRegDe As Variant = 0, Optional ByVal viRegAte As Variant = 0, Optional ByVal iTipoPFPJ As Integer = 0, Optional ByVal colRegioes As Collection = Nothing) As Long

Dim lErro As Long
Dim iIndice As Integer
Dim lTransacao As Long
Dim alComando(0 To 1) As Long
Dim vlCliente As Variant, viFilial As Variant
Dim sFiltro As String, vsCatBD As Variant, vsItemBD As Variant
Dim vValor As Variant, sSQL As String, sWhere As String
Dim iFiltraUsuCobr As Integer, colVendedores As New Collection
Dim objVendedor As ClassVendedor, vRegiao As Variant

On Error GoTo Erro_RelFiltroFilCliCat_Prepara

    'Abrir transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 211571

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 211572
    Next
    
    vlCliente = CLng(0)
    viFilial = CInt(0)
    vsCatBD = String(STRING_MAXIMO, 0)
    vsItemBD = String(STRING_MAXIMO, 0)

    'Obter NumIntRel
    lErro = CF("Config_ObterNumInt", "FATConfig", "NUMINTREL_FILTROFILCLICAT", lNumIntRel)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    If Len(Trim(vsCategoria)) = 0 Then

        sSQL = "SELECT CodCliente, CodFilial, '' As Categoria, '' AS Item FROM FiliaisClientes As F, Enderecos As E "
        sWhere = "WHERE F.Endereco = E.Codigo "
    Else

        sFiltro = ""
        If colCatItem.Count > 0 Then
            For Each vValor In colCatItem
                If Len(Trim(sFiltro)) > 0 Then sFiltro = sFiltro & ","
                sFiltro = sFiltro & "'" & vValor & "'"
            Next
            sFiltro = "AND FC.Item IN (" & sFiltro & ") "
        End If

        sSQL = "SELECT Cliente, Filial, Categoria, Item FROM FilialClienteCategorias As FC, FiliaisClientes AS F, Enderecos As E "
        sWhere = "WHERE F.CodCliente = FC.Cliente AND F.CodFilial = FC.Filial AND F.Endereco = E.Codigo AND FC.Categoria = ? " & sFiltro

    End If
    
    If vlCliDe <> 0 Then
        sWhere = sWhere & "AND F.CodCliente >= ? "
    End If
    
    If vlCliAte <> 0 Then
        sWhere = sWhere & "AND F.CodCliente <= ? "
    End If
    
    If Len(Trim(vsCidade)) <> 0 Then
        sWhere = sWhere & "AND E.Cidade = ? "
    End If
        
    If iTipoVend = VENDEDOR_DIRETO Then
        If viVendDe <> 0 Then
            sWhere = sWhere & "AND F.Vendedor >= ? "
        End If
        
        If viVendAte <> 0 Then
            sWhere = sWhere & "AND F.Vendedor <= ? "
        End If
    Else
    
        If viVendDe <> 0 Then
    
            lErro = CF("Vendedor_Le_Hierarquia", viVendDe, colVendedores, 0)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
            
            sFiltro = ""
            If colVendedores.Count > 0 Then
                For Each objVendedor In colVendedores
                    If Len(Trim(sFiltro)) > 0 Then sFiltro = sFiltro & ","
                    sFiltro = sFiltro & CStr(objVendedor.iCodigo)
                Next
                sFiltro = "AND F.Vendedor IN (" & sFiltro & ") "
            Else
                sFiltro = "AND 1 <> 1 "
            End If
            
            sWhere = sWhere & sFiltro
            
        End If
        
    End If
    
    If Len(Trim(vsUsuCobrador)) <> 0 Then
    
        lErro = CF("RegiaoVenda_Le_UsuarioCobrador", vsUsuCobrador, iFiltraUsuCobr)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
        If iFiltraUsuCobr = MARCADO Then
    
            sSQL = sSQL & ", RegioesVendas As R "
            sWhere = sWhere & "AND F.Regiao = R.Codigo AND R.UsuarioCobrador = ? "
    
        End If
        
    End If
    
    If viRegDe <> 0 Then
        sWhere = sWhere & "AND F.Regiao >= ? "
    End If
    
    If viRegAte <> 0 Then
        sWhere = sWhere & "AND F.Regiao <= ? "
    End If
    
    If Not (colRegioes Is Nothing) Then
        If colRegioes.Count > 0 Then
            sFiltro = ""
            For Each vRegiao In colRegioes
                If Len(Trim(sFiltro)) > 0 Then sFiltro = sFiltro & ","
                sFiltro = sFiltro & CStr(vRegiao)
            Next
            sWhere = sWhere & "AND F.Regiao IN (" & sFiltro & ") "
        End If
    End If
    
    If iTipoPFPJ = 1 Then
        sWhere = sWhere & "AND LEN(F.CGC) = 11 "
    End If
    
    If iTipoPFPJ = 2 Then
        sWhere = sWhere & "AND LEN(F.CGC) = 14 "
    End If
    
    sSQL = sSQL & sWhere
    
    lErro = Comando_PrepararInt(alComando(0), sSQL)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM

    lErro = Comando_BindVarInt(alComando(0), vlCliente)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(alComando(0), viFilial)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(alComando(0), vsCatBD)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BindVarInt(alComando(0), vsItemBD)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    If Len(Trim(vsCategoria)) <> 0 Then
        lErro = Comando_BindVarInt(alComando(0), vsCategoria)
        If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    End If

    If vlCliDe <> 0 Then
        lErro = Comando_BindVarInt(alComando(0), vlCliDe)
        If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    End If
    
    If vlCliAte <> 0 Then
        lErro = Comando_BindVarInt(alComando(0), vlCliAte)
        If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    End If
        
    If Len(Trim(vsCidade)) <> 0 Then
        lErro = Comando_BindVarInt(alComando(0), vsCidade)
        If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    End If
    
    If iTipoVend = VENDEDOR_DIRETO Then
    
        If viVendDe <> 0 Then
            lErro = Comando_BindVarInt(alComando(0), viVendDe)
            If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
        End If
        
        If viVendAte <> 0 Then
            lErro = Comando_BindVarInt(alComando(0), viVendAte)
            If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
        End If
        
    End If
    
    If Len(Trim(vsUsuCobrador)) <> 0 And iFiltraUsuCobr = MARCADO Then
        lErro = Comando_BindVarInt(alComando(0), vsUsuCobrador)
        If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    End If
    
    If viRegDe <> 0 Then
        lErro = Comando_BindVarInt(alComando(0), viRegDe)
        If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    End If
    
    If viRegAte <> 0 Then
        lErro = Comando_BindVarInt(alComando(0), viRegAte)
        If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    End If
    
    lErro = Comando_ExecutarInt(alComando(0))
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 202815
    
    Do While lErro = AD_SQL_SUCESSO
    
        lErro = Comando_Executar(alComando(1), "INSERT INTO RelFiltroFilCliCat (NumIntRel, Cliente, Filial, Categoria, Item) VALUES (?,?,?,?,?)", lNumIntRel, vlCliente, viFilial, vsCatBD, vsItemBD)
        If lErro <> AD_SQL_SUCESSO Then gError 211573
    
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 202815
    
    Loop

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    'Fechar transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 211574

    RelFiltroFilCliCat_Prepara = SUCESSO

    Exit Function

Erro_RelFiltroFilCliCat_Prepara:

    RelFiltroFilCliCat_Prepara = gErr

    Select Case gErr

        Case 211571
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 211572
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 211573
            Call Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_RELFATPRODVEND", gErr)

        Case 211574
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case ERRO_SEM_MENSAGEM
            Call Rotina_Erro(vbOKOnly, "ERRO_PREPARACAO_COMANDO_SQL", gErr, sSQL)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 211575)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Call Transacao_Rollback

    Exit Function

End Function

Public Function RelFiltroFilCliCat_Exclui(ByVal lNumIntRel As Variant) As Long

Dim lErro As Long
Dim iIndice As Integer
Dim lTransacao As Long
Dim alComando(1 To 1) As Long
Dim sSQL As String

On Error GoTo Erro_RelFiltroFilCliCat_Exclui

    'Abrir transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 211571

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 211572
    Next
    
    sSQL = "DELETE FROM RelFiltroFilCliCat WHERE NumIntRel = " & CStr(lNumIntRel)
    
    lErro = Comando_Executar(alComando(1), "DELETE FROM RelFiltroFilCliCat WHERE NumIntRel = ?", lNumIntRel)
    If lErro <> AD_SQL_SUCESSO Then gError 211573

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    'Fechar transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 211574

    RelFiltroFilCliCat_Exclui = SUCESSO

    Exit Function

Erro_RelFiltroFilCliCat_Exclui:

    RelFiltroFilCliCat_Exclui = gErr

    Select Case gErr

        Case 211571
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 211572
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 211573
            Call Rotina_Erro(vbOKOnly, "ERRO_PREPARACAO_COMANDO_SQL", gErr, sSQL)

        Case 211574
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case ERRO_SEM_MENSAGEM

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 211575)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Call Transacao_Rollback

    Exit Function

End Function

Function Contratos_Campanha13Ipanema_Gera(Optional ByVal bApagarNFs As Boolean = False) As Long

Dim lErro As Long, lCliente As Long, lTransacao As Long, lCodContrato As Long
Dim alComando(0 To 11) As Long, objContrato As ClassContrato
Dim objItensDeContrato As ClassItensDeContrato
Dim lNumIntDoc As Long, iIndice As Integer, dValContrato As Double, objNFiscal As ClassNFiscal
Dim lNumProx As Long, lNum As Long, lContrato As Long, sProduto As String, lNumIntNF As Long

On Error GoTo Erro_Contratos_Campanha13Ipanema_Gera

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 130423

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 130426
    Next
    
    If False Then
    
'        lErro = Comando_Executar(alComando(11), "SELECT numintdoc FROM nfiscal WHERE numintdoc IN (SELECT numintnf FROM itensnfiscal where DescricaoItem like 'Contribuição Associado EJS 13o %') AND numintdoccpr in (SELECT numintdoc from titulosrec) ORDER BY NumIntDoc", lNumIntNF)
'        If lErro <> AD_SQL_SUCESSO Then gError 2222
'
'        lErro = Comando_BuscarProximo(alComando(11))
'        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 2222
'
'        Do While lErro <> AD_SQL_SEM_DADOS
'
'            Set objNFiscal = New ClassNFiscal
'
'            objNFiscal.lNumIntDoc = lNumIntNF
'
'            lErro = CF("NFiscal_Le", objNFiscal)
'            If lErro <> SUCESSO And lErro <> 31442 Then gError ERRO_SEM_MENSAGEM
'
'            'Lê os itens da nota fiscal
'            lErro = CF("NFiscalItens_Le", objNFiscal)
'            If lErro <> SUCESSO Then gError 207573
'
'            'Faz a exclusao de uma nota fiscal de Saida
'            lErro = CF("NotaFiscalSaida_Excluir_EmTrans", objNFiscal, objNFiscal.objContabil)
'            If lErro <> SUCESSO Then gError 207574
'
'            lErro = Comando_BuscarProximo(alComando(11))
'            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 2222
'
'        Loop

    Else
    
        sProduto = String(STRING_PRODUTO, 0)
        lErro = Comando_Executar(alComando(0), "SELECT CLI.Codigo, ic.valor*ic.quantidade, ic.produto FROM Clientes CLI, FiliaisClientes FIL, Enderecos ENDE, Contratos C, ItensDeContrato IC WHERE C.Ativo=1 AND C.NumIntDoc = IC.NumIntContrato AND C.Cliente = CLI.Codigo AND C.Filialempresa=1 AND CLI.Ativo=1 AND FIL.CodCliente = CLI.Codigo AND FIL.CodFilial = 1 AND FIL.Endereco = ENDE.Codigo AND (CLI.Codigo <> 20 OR IC.descProd <> 'Contribuição Associado EJS' ) ORDER BY RazaoSocial", lCliente, dValContrato, sProduto)
        If lErro <> AD_SQL_SUCESSO Then gError 2222
    
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 2222
    
        Do While lErro <> AD_SQL_SEM_DADOS
    
            lContrato = lContrato + 1
    
            'Busca próximo identificador
            lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_PROX_CONTRATO", lNumProx)
            If lErro <> SUCESSO Then gError 131066
    
            Set objContrato = New ClassContrato
    
            With objContrato
    
                .lNumIntDoc = lNumProx
                .iFilialEmpresa = 1
                .lCliente = lCliente
    
                .dtDataFimContrato = StrParaDate("21/12/2019")
                .dtDataIniCobrancaPadrao = StrParaDate("29/10/2019")
                .dtDataIniContrato = StrParaDate("29/10/2019")
                .dtDataRenovContrato = StrParaDate("21/12/2019")
    
                .iCondPagtoPadrao = 20
                .iFilCli = 1
                .iPeriodicidadePadrao = PERIODICIDADE_MENSAL
    
                .iAtivo = 1
    
                .sCodigo = "U6" & Format(lContrato, "0000") '??? ALTERAR
                .sContaContabil = ""
                .sDescricao = "13o 2019" '??? ALTERAR
                .sObservacao = ""
                .sHistoricoContabil = ""
    
                .sCcl = ""
    
                .sNaturezaOp = "5949"
                .iTipoTributacao = 32
    
                .iTipo = CONTRATOS_RECEBER
                .iRecibo = DESMARCADO
    
                'Insere contrato
                lErro = Comando_Executar(alComando(2), "INSERT INTO Contratos(NumIntDoc, FilialEmpresa, Codigo, Descricao, Ativo, Cliente, FilCli, Observacao, DataIniContrato, DataFimContrato, DataRenovContrato, ContaContabil, HistoricoContabil, DataIniCobrancaPadrao, PeriodicidadePadrao, CondPagtoPadrao, Ccl, NaturezaOP,TipoTributacao, Tipo, FilialFornecedor, Fornecedor, Recibo) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                                                                            .lNumIntDoc, .iFilialEmpresa, .sCodigo, .sDescricao, .iAtivo, .lCliente, .iFilCli, .sObservacao, .dtDataIniContrato, .dtDataFimContrato, .dtDataRenovContrato, .sContaContabil, .sHistoricoContabil, .dtDataIniCobrancaPadrao, .iPeriodicidadePadrao, .iCondPagtoPadrao, .sCcl, .sNaturezaOp, .iTipoTributacao, .iTipo, .iFilForn, .lFornecedor, .iRecibo)
            End With
            If lErro <> AD_SQL_SUCESSO Then gError 129341
    
            Set objItensDeContrato = New ClassItensDeContrato
    
            'Obtem identificado (NumIntDoc)
            lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_PROX_ITENSDECONTRATO", lNumProx)
            If lErro <> SUCESSO Then gError 129367
    
            With objItensDeContrato
    
                .lNumIntDoc = lNumProx
                .lNumIntContrato = objContrato.lNumIntDoc
                .dtDataRefIni = StrParaDate("01/11/2019")
                .dtDataRefFim = StrParaDate("30/11/2019")
                .dQuantidade = 1
                .dtDataIniCobranca = StrParaDate("29/10/2019")
                .dtDataProxCobranca = StrParaDate("29/10/2019")
                .dValor = dValContrato / 2
                .iCobrar = 1
                .iMedicao = 0
                .iSeq = 1
    
                .iCondPagto = 20
                .iPeriodicidade = PERIODICIDADE_MENSAL
    
                .sProduto = sProduto
                .sDescProd = "Contribuição Associado EJS 13o 1/2" '??? ALTERAR
                
                .sObservacao = ""
                .sUM = "un"
    
                'Insere item
                lErro = Comando_Executar(alComando(3), "INSERT INTO ItensDeContrato(NumIntDoc, NumIntContrato, Seq, Cobrar, Produto, DescProd, Quantidade, UM, Valor, Medicao, DataIniCobranca, Periodicidade, CondPagto, Observacao, DataProxCobranca, DataRefIni, DataRefFim) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                                                            .lNumIntDoc, .lNumIntContrato, .iSeq, .iCobrar, .sProduto, .sDescProd, .dQuantidade, .sUM, .dValor, .iMedicao, .dtDataIniCobranca, .iPeriodicidade, .iCondPagto, .sObservacao, .dtDataProxCobranca, .dtDataRefIni, .dtDataRefFim)
            End With
            If lErro <> AD_SQL_SUCESSO Then gError 129348
    
            lErro = Comando_BuscarProximo(alComando(0))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 2222
    
        Loop

    End If
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 130425

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Contratos_Campanha13Ipanema_Gera = SUCESSO

    Exit Function

Erro_Contratos_Campanha13Ipanema_Gera:

    Contratos_Campanha13Ipanema_Gera = gErr
    
    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 201037)

    End Select

    'Desfaz Transação
    Call Transacao_Rollback

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function RelFiltroNumDoc_Prepara_PV(ByVal iFilialEmpresa As Integer, ByVal lCodDe As Long, ByVal lCodAte As Long, ByVal dtDataDe As Date, ByVal dtDataAte As Date, ByVal iTipoVend As Integer, ByVal iVend As Integer, ByVal sProdDe As String, ByVal sProdAte As String, lNumIntRel As Long) As Long

Dim lErro As Long, sSQL As String
Dim sFiltro As String, lNumIntDoc As Long
Dim alComando(0 To 1) As Long, lTransacao As Long, iIndice As Integer

On Error GoTo Erro_RelFiltroNumDoc_Prepara_PV

    'abre a transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 216239
    
    'abre o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = SUCESSO Then gError 216240
    Next
    
    'Obtem o próximo NumIntRel
    lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_PROX_NUMINTREL_FILTRONUMDOC", lNumIntRel)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    lErro = RelFiltroNumDoc_Prepara_PV_SQL(iFilialEmpresa, lCodDe, lCodAte, dtDataDe, dtDataAte, iTipoVend, iVend, sProdDe, sProdAte, sSQL)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    lErro = RelFiltroNumDoc_Prepara_PV_Int(alComando(0), sSQL, iFilialEmpresa, lCodDe, lCodAte, dtDataDe, dtDataAte, iTipoVend, iVend, sProdDe, sProdAte, lNumIntDoc)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    lErro = Comando_BuscarProximo(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 216241
        
    Do While lErro <> AD_SQL_SEM_DADOS
        
        lErro = Comando_Executar(alComando(1), "INSERT INTO RelFiltroNumDoc (NumIntRel, TipoDoc, NumDoc) VALUES (?,?,?)", _
            lNumIntRel, PRJ_CR_TIPO_PV, lNumIntDoc)
        If lErro <> AD_SQL_SUCESSO Then gError 216242
    
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 216243

    Loop
    
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Comando_Fechar (alComando(iIndice))
    Next
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 216244
    
    RelFiltroNumDoc_Prepara_PV = SUCESSO
     
    Exit Function
    
Erro_RelFiltroNumDoc_Prepara_PV:

    RelFiltroNumDoc_Prepara_PV = gErr
     
    Select Case gErr
          
        Case 216239
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 216240
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 216241, 216243
            Call Rotina_Erro(vbOKOnly, "ERRO_PREPARACAO_COMANDO_SQL", gErr, sSQL)
        
        Case 216242
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_RELFILTRONUMDOC", gErr)
        
        Case 216244
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case ERRO_SEM_MENSAGEM
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 216245)
     
    End Select
     
    For iIndice = LBound(alComando) To UBound(alComando)
        Comando_Fechar (alComando(iIndice))
    Next
    
    Call Transacao_Rollback
    
    Exit Function

End Function

Public Function RelFiltroNumDoc_Prepara_PV_SQL(ByVal iFilialEmpresa As Integer, ByVal lCodDe As Long, ByVal lCodAte As Long, ByVal dtDataDe As Date, ByVal dtDataAte As Date, ByVal iTipoVend As Integer, ByVal iVend As Integer, ByVal sProdDe As String, ByVal sProdAte As String, sSQL As String) As Long

Dim lErro As Long
Dim sWhere As String
Dim sFiltroProd As String, sFiltro As String
Dim colVendedores As New Collection, objVendedor As ClassVendedor

On Error GoTo Erro_RelFiltroNumDoc_Prepara_PV_SQL

    sSQL = "SELECT NumIntDoc FROM PedidosDeVenda As P, Clientes As C, FiliaisClientes As F "
    sWhere = "WHERE P.Cliente = C.Codigo AND P.Cliente = F.CodCliente AND P.Filial = F.CodFilial AND P.FilialEmpresa = ? "
        
    If lCodDe <> 0 Then
        sWhere = sWhere & "AND P.Codigo >= ? "
    End If
    
    If lCodAte <> 0 Then
        sWhere = sWhere & "AND P.Codigo <= ? "
    End If
    
    If dtDataDe <> DATA_NULA Then
        sWhere = sWhere & "AND P.DataEmissao >= ? "
    End If
    
    If dtDataAte <> DATA_NULA Then
        sWhere = sWhere & "AND P.DataEmissao <= ? "
    End If
    
    If iTipoVend = VENDEDOR_DIRETO Then
        If iVend <> 0 Then
            sWhere = sWhere & "AND F.Vendedor = ? "
        End If
    Else
    
        If iVend <> 0 Then
    
            lErro = CF("Vendedor_Le_Hierarquia", iVend, colVendedores, 0)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
            
            sFiltro = ""
            If colVendedores.Count > 0 Then
                For Each objVendedor In colVendedores
                    If Len(Trim(sFiltro)) > 0 Then sFiltro = sFiltro & ","
                    sFiltro = sFiltro & CStr(objVendedor.iCodigo)
                Next
                sFiltro = "AND F.Vendedor IN (" & sFiltro & ") "
            Else
                sFiltro = "AND 1 <> 1 "
            End If
            
            sWhere = sWhere & sFiltro
            
        End If
        
    End If
    
    If sProdDe <> "" Or sProdAte <> "" Then
        sFiltroProd = ""
        If sProdDe <> "" Then sFiltroProd = " I.Produto >= ? "
        If sProdAte <> "" Then
            If Len(Trim(sFiltroProd)) > 0 Then sFiltroProd = sFiltroProd & " AND "
            sFiltroProd = sFiltroProd & " I.Produto <= ? "
        End If
        sWhere = sWhere & " AND EXISTS (SELECT * FROM ItensPedidoDeVenda AS I WHERE P.Codigo = I.CodPedido AND P.FilialEmpresa = I.FilialEmpresa AND " & sFiltroProd & ")"
    End If
    
    sSQL = sSQL & sWhere
    
    RelFiltroNumDoc_Prepara_PV_SQL = SUCESSO
     
    Exit Function
    
Erro_RelFiltroNumDoc_Prepara_PV_SQL:

    RelFiltroNumDoc_Prepara_PV_SQL = gErr
     
    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 216246)
     
    End Select
     
    Exit Function

End Function

Private Function RelFiltroNumDoc_Prepara_PV_Int(ByVal lComando As Long, ByVal sSQL As String, ByVal viFilialEmpresa As Variant, ByVal vlCodDe As Variant, ByVal vlCodAte As Variant, ByVal vdtDataDe As Variant, ByVal vdtDataAte As Variant, ByVal viTipoVend As Variant, ByVal viVend As Variant, ByVal vsProdDe As Variant, ByVal vsProdAte As Variant, vlNumIntDoc As Variant) As Long

Dim lErro As Long
Dim viStatus As Variant

On Error GoTo Erro_RelFiltroNumDoc_Prepara_PV_Int

    lErro = Comando_PrepararInt(lComando, sSQL)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM

    lErro = Comando_BindVarInt(lComando, vlNumIntDoc)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM

    lErro = Comando_BindVarInt(lComando, viFilialEmpresa)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
       
    If vlCodDe <> 0 Then
        lErro = Comando_BindVarInt(lComando, vlCodDe)
        If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    End If
    
    If vlCodAte <> 0 Then
        lErro = Comando_BindVarInt(lComando, vlCodAte)
        If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    End If
       
    If vdtDataDe <> DATA_NULA Then
        lErro = Comando_BindVarInt(lComando, vdtDataDe)
        If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    End If
        
    If vdtDataAte <> DATA_NULA Then
        lErro = Comando_BindVarInt(lComando, vdtDataAte)
        If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    End If
    
    If viTipoVend = VENDEDOR_DIRETO Then
        If viVend <> 0 Then
            lErro = Comando_BindVarInt(lComando, viVend)
            If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
        End If
    End If
    
    If vsProdDe <> "" Then
        lErro = Comando_BindVarInt(lComando, vsProdDe)
        If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    End If
        
    If vsProdAte <> "" Then
        lErro = Comando_BindVarInt(lComando, vsProdAte)
        If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    End If
    
    lErro = Comando_ExecutarInt(lComando)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    RelFiltroNumDoc_Prepara_PV_Int = SUCESSO
     
    Exit Function
    
Erro_RelFiltroNumDoc_Prepara_PV_Int:

    RelFiltroNumDoc_Prepara_PV_Int = gErr
     
    Select Case gErr

        Case ERRO_SEM_MENSAGEM
            Call Rotina_Erro(vbOKOnly, "ERRO_PREPARACAO_COMANDO_SQL", gErr, sSQL)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 216247)
     
    End Select
     
    Exit Function

End Function


Function RelFiltroNumDoc_Prepara_TitRec(ByVal iFilialEmpresa As Integer, ByVal iTipoCli As Integer, ByVal lCliDe As Long, ByVal lCliAte As Long, ByVal dtDataDe As Date, ByVal dtDataAte As Date, ByVal iTipoVend As Integer, ByVal iVend As Integer, ByVal sProdDe As String, ByVal sProdAte As String, lNumIntRel As Long) As Long

Dim lErro As Long, sSQL As String
Dim sFiltro As String, lNumIntDoc As Long
Dim alComando(0 To 1) As Long, lTransacao As Long, iIndice As Integer

On Error GoTo Erro_RelFiltroNumDoc_Prepara_TitRec

    'abre a transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 216239
    
    'abre o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = SUCESSO Then gError 216240
    Next
    
    'Obtem o próximo NumIntRel
    lErro = CF("Config_ObterNumInt", "FATConfig", "NUM_PROX_NUMINTREL_FILTRONUMDOC", lNumIntRel)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    lErro = RelFiltroNumDoc_Prepara_TitRec_SQL(iFilialEmpresa, iTipoCli, lCliDe, lCliAte, dtDataDe, dtDataAte, iTipoVend, iVend, sProdDe, sProdAte, sSQL)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    lErro = RelFiltroNumDoc_Prepara_TitRec_Int(alComando(0), sSQL, iFilialEmpresa, iTipoCli, lCliDe, lCliAte, dtDataDe, dtDataAte, iTipoVend, iVend, sProdDe, sProdAte, lNumIntDoc)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    lErro = Comando_BuscarProximo(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 216241
        
    Do While lErro <> AD_SQL_SEM_DADOS
        
        lErro = Comando_Executar(alComando(1), "INSERT INTO RelFiltroNumDoc (NumIntRel, TipoDoc, NumDoc) VALUES (?,?,?)", _
            lNumIntRel, PRJ_CR_TIPO_TITREC, lNumIntDoc)
        If lErro <> AD_SQL_SUCESSO Then gError 216242
    
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 216243

    Loop
    
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Comando_Fechar (alComando(iIndice))
    Next
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 216244
    
    RelFiltroNumDoc_Prepara_TitRec = SUCESSO
     
    Exit Function
    
Erro_RelFiltroNumDoc_Prepara_TitRec:

    RelFiltroNumDoc_Prepara_TitRec = gErr
     
    Select Case gErr
          
        Case 216239
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 216240
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 216241, 216243
            Call Rotina_Erro(vbOKOnly, "ERRO_PREPARACAO_COMANDO_SQL", gErr, sSQL)
        
        Case 216242
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_RELFILTRONUMDOC", gErr)
        
        Case 216244
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case ERRO_SEM_MENSAGEM
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 216245)
     
    End Select
     
    For iIndice = LBound(alComando) To UBound(alComando)
        Comando_Fechar (alComando(iIndice))
    Next
    
    Call Transacao_Rollback
    
    Exit Function

End Function

Public Function RelFiltroNumDoc_Prepara_TitRec_SQL(ByVal iFilialEmpresa As Integer, ByVal iTipoCli As Integer, ByVal lCliDe As Long, ByVal lCliAte As Long, ByVal dtDataDe As Date, ByVal dtDataAte As Date, ByVal iTipoVend As Integer, ByVal iVend As Integer, ByVal sProdDe As String, ByVal sProdAte As String, sSQL As String) As Long

Dim lErro As Long
Dim sWhere As String
Dim sFiltroProd As String, sFiltro As String
Dim colVendedores As New Collection, objVendedor As ClassVendedor

On Error GoTo Erro_RelFiltroNumDoc_Prepara_TitRec_SQL

    sSQL = "SELECT NumIntDoc FROM TitulosRec AS T, Clientes As C, FiliaisClientes AS F "
    sWhere = "WHERE T.Cliente = C.Codigo AND T.Cliente = F.CodCliente AND T.Filial = F.CodFilial AND T.FilialEmpresa = ? "
        
    If iTipoCli <> 0 Then
        sWhere = sWhere & "AND C.Tipo = ? "
    End If
    
    If lCliDe <> 0 Then
        sWhere = sWhere & "AND T.Cliente >= ? "
    End If
    
    If lCliAte <> 0 Then
        sWhere = sWhere & "AND T.Cliente <= ? "
    End If
    
    If dtDataDe <> DATA_NULA Then
        sWhere = sWhere & "AND T.DataEmissao >= ? "
    End If
    
    If dtDataAte <> DATA_NULA Then
        sWhere = sWhere & "AND T.DataEmissao <= ? "
    End If
    
    If iTipoVend = VENDEDOR_DIRETO Then
        If iVend <> 0 Then
            sWhere = sWhere & "AND F.Vendedor = ? "
        End If
    Else
    
        If iVend <> 0 Then
    
            lErro = CF("Vendedor_Le_Hierarquia", iVend, colVendedores, 0)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
            
            sFiltro = ""
            If colVendedores.Count > 0 Then
                For Each objVendedor In colVendedores
                    If Len(Trim(sFiltro)) > 0 Then sFiltro = sFiltro & ","
                    sFiltro = sFiltro & CStr(objVendedor.iCodigo)
                Next
                sFiltro = "AND F.Vendedor IN (" & sFiltro & ") "
            Else
                sFiltro = "AND 1 <> 1 "
            End If
            
            sWhere = sWhere & sFiltro
            
        End If
        
    End If
    
    If sProdDe <> "" Or sProdAte <> "" Then
        sFiltroProd = ""
        If sProdDe <> "" Then sFiltroProd = " I.Produto >= ? "
        If sProdAte <> "" Then
            If Len(Trim(sFiltroProd)) > 0 Then sFiltroProd = sFiltroProd & " AND "
            sFiltroProd = sFiltroProd & " I.Produto <= ? "
        End If
        sWhere = sWhere & " AND EXISTS (SELECT * FROM NFiscal AS N, ItensNFiscal AS I WHERE N.NumInTDoc = I.NumIntNF AND N.ClasseDocCPR = 2 AND T.NumIntDoc = N.NumIntDocCPR AND " & sFiltroProd & ")"
    End If
    
    sSQL = sSQL & sWhere
    
    RelFiltroNumDoc_Prepara_TitRec_SQL = SUCESSO
     
    Exit Function
    
Erro_RelFiltroNumDoc_Prepara_TitRec_SQL:

    RelFiltroNumDoc_Prepara_TitRec_SQL = gErr
     
    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 216246)
     
    End Select
     
    Exit Function

End Function

Private Function RelFiltroNumDoc_Prepara_TitRec_Int(ByVal lComando As Long, ByVal sSQL As String, ByVal viFilialEmpresa As Variant, ByVal viTipoCli As Variant, ByVal vlCliDe As Variant, ByVal vlCliAte As Variant, ByVal vdtDataDe As Variant, ByVal vdtDataAte As Variant, ByVal viTipoVend As Variant, ByVal viVend As Variant, ByVal vsProdDe As Variant, ByVal vsProdAte As Variant, vlNumIntDoc As Variant) As Long

Dim lErro As Long
Dim viStatus As Variant

On Error GoTo Erro_RelFiltroNumDoc_Prepara_TitRec_Int

    lErro = Comando_PrepararInt(lComando, sSQL)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM

    lErro = Comando_BindVarInt(lComando, vlNumIntDoc)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM

    lErro = Comando_BindVarInt(lComando, viFilialEmpresa)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
       
    If viTipoCli <> 0 Then
        lErro = Comando_BindVarInt(lComando, viTipoCli)
        If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    End If
    
    If vlCliDe <> 0 Then
        lErro = Comando_BindVarInt(lComando, vlCliDe)
        If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    End If
    
    If vlCliAte <> 0 Then
        lErro = Comando_BindVarInt(lComando, vlCliAte)
        If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    End If
       
    If vdtDataDe <> DATA_NULA Then
        lErro = Comando_BindVarInt(lComando, vdtDataDe)
        If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    End If
        
    If vdtDataAte <> DATA_NULA Then
        lErro = Comando_BindVarInt(lComando, vdtDataAte)
        If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    End If
    
    If viTipoVend = VENDEDOR_DIRETO Then
        If viVend <> 0 Then
            lErro = Comando_BindVarInt(lComando, viVend)
            If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
        End If
    End If
    
    If vsProdDe <> "" Then
        lErro = Comando_BindVarInt(lComando, vsProdDe)
        If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    End If
        
    If vsProdAte <> "" Then
        lErro = Comando_BindVarInt(lComando, vsProdAte)
        If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    End If
    
    lErro = Comando_ExecutarInt(lComando)
    If (lErro <> AD_SQL_SUCESSO) Then gError ERRO_SEM_MENSAGEM
    
    RelFiltroNumDoc_Prepara_TitRec_Int = SUCESSO
     
    Exit Function
    
Erro_RelFiltroNumDoc_Prepara_TitRec_Int:

    RelFiltroNumDoc_Prepara_TitRec_Int = gErr
     
    Select Case gErr

        Case ERRO_SEM_MENSAGEM
            Call Rotina_Erro(vbOKOnly, "ERRO_PREPARACAO_COMANDO_SQL", gErr, sSQL)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 216247)
     
    End Select
     
    Exit Function

End Function

Public Function XML_Obtem_Tipo_Versao(ByVal sLocArq As String, ByRef sTipoXML As String, ByRef sVersaoXML As String) As Long

Dim sTexto As String
Dim sTextoAux As String
Dim iPos As Integer
Dim iPosV As Integer
Dim lErro As Long

On Error GoTo Erro_XML_Obtem_Tipo_Versao

    sTipoXML = ""
    sVersaoXML = ""

    Open sLocArq For Input As #1
    'Busca o próximo registro do arquivo
    Line Input #1, sTextoAux
    sTexto = sTextoAux
    Do While Not EOF(1)
        Line Input #1, sTextoAux
        sTexto = sTexto & sTextoAux
    Loop
    'Fecha o Arquivo
    Close #1

    sTextoAux = UCase(left(sTexto, 1000))

    iPos = InStr(sTextoAux, "<NFEPROC")
    If iPos <> 0 Then
        sTipoXML = "NFe"

        sTextoAux = Mid(sTextoAux, iPos + 8)
        iPosV = InStr(sTextoAux, "VERSAO=")
        sVersaoXML = Replace(Replace(Replace(Mid(sTextoAux, iPosV + 7, 6), ".", ""), """", ""), "'", "")
    Else

        iPos = InStr(sTextoAux, "<CTEPROC")
        If iPos <> 0 Then
            sTipoXML = "CTe"

            sTextoAux = Mid(sTextoAux, iPos + 8)
            iPosV = InStr(sTextoAux, "VERSAO=")
            sVersaoXML = Replace(Replace(Replace(Mid(sTextoAux, iPosV + 7, 6), ".", ""), """", ""), "'", "")

        Else

            iPos = InStr(sTextoAux, "<LISTADECLARACOES>")
            If iPos <> 0 Then
                sTipoXML = "DI"
                sVersaoXML = "001"
            Else

                iPos = InStr(sTextoAux, "<CLASSPEDIDOCONSULTAINFO")
                If iPos <> 0 Then
                    sTipoXML = "PV"
                    sVersaoXML = "001"
                End If

            End If

        End If

    End If

    XML_Obtem_Tipo_Versao = SUCESSO
     
    Exit Function
    
Erro_XML_Obtem_Tipo_Versao:

    XML_Obtem_Tipo_Versao = gErr
     
    Select Case gErr

        Case ERRO_SEM_MENSAGEM

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 216247)
     
    End Select
     
    Exit Function
    
End Function

Function OVAcomp_Importa() As Long

Dim lTransacao As Long
Dim lErro As Long
Dim colOVAcomp As New Collection
Dim objOVBD As ClassOrcamentoVenda
Dim objOV As ClassOrcamentoVenda
Dim objRelacCli As ClassRelacClientes

Const STATUS_APAGA = -1
Const DATA_APAGA = #1/1/1822#

On Error GoTo Erro_OVAcomp_Importa

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 91132
    
    lErro = CF("ImportOVAcomp_Le", colOVAcomp)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    For Each objOV In colOVAcomp
    
        Set objOVBD = New ClassOrcamentoVenda
        
        objOVBD.lCodigo = objOV.lCodigo
        objOVBD.iFilialEmpresa = giFilialEmpresa
            
        lErro = CF("OrcamentoVenda_Le", objOVBD)
        If lErro <> SUCESSO And lErro <> 101232 Then gError ERRO_SEM_MENSAGEM
        
        If lErro <> SUCESSO Then gError 216880
        
        If objOV.dtDataPrevReceb = DATA_NULA Then objOV.dtDataPrevReceb = objOVBD.dtDataPrevReceb
        If objOV.dtDataProxCobr = DATA_NULA Then objOV.dtDataProxCobr = objOVBD.dtDataProxCobr
        If objOV.lStatus = 0 Then objOV.lStatus = objOVBD.lStatus

        'Realmente querem excluir a informação "-" na planilha
        If objOV.dtDataPrevReceb = DATA_APAGA Then objOV.dtDataPrevReceb = DATA_NULA
        If objOV.dtDataProxCobr = DATA_APAGA Then objOV.dtDataProxCobr = DATA_NULA
        If objOV.lStatus = STATUS_APAGA Then objOV.lStatus = 0
        
        'Se preencheram o assunto ou mudaram alguma das datas ou o status => grava
        If objOV.sMensagemNota <> "" Or objOV.dtDataPrevReceb <> objOVBD.dtDataPrevReceb Or objOV.dtDataProxCobr <> objOVBD.dtDataProxCobr Or objOV.lStatus <> objOVBD.lStatus Then
        
            Set objRelacCli = New ClassRelacClientes
            
            If objOV.sMensagemNota = "" Then
                objOV.sMensagemNota = "Registro de Alterações. "
                If objOV.lStatus <> objOVBD.lStatus Then objOV.sMensagemNota = objOV.sMensagemNota & "Status alterado de " & CStr(objOVBD.lStatus) & " para " & CStr(objOV.lStatus) & ". "
                If objOV.dtDataProxCobr <> objOVBD.dtDataProxCobr Then objOV.sMensagemNota = objOV.sMensagemNota & "Próximo Contato alterado de " & IIf(objOVBD.dtDataProxCobr = DATA_NULA, "VAZIA", Format(objOVBD.dtDataProxCobr, "dd/mm/yyyy")) & " para " & IIf(objOV.dtDataProxCobr = DATA_NULA, "VAZIA", Format(objOV.dtDataProxCobr, "dd/mm/yyyy")) & ". "
                If objOV.dtDataPrevReceb <> objOVBD.dtDataPrevReceb Then objOV.sMensagemNota = objOV.sMensagemNota & "Fechamento alterado de " & IIf(objOVBD.dtDataPrevReceb = DATA_NULA, "VAZIA", Format(objOVBD.dtDataPrevReceb, "dd/mm/yyyy")) & " para " & IIf(objOV.dtDataPrevReceb = DATA_NULA, "VAZIA", Format(objOV.dtDataPrevReceb, "dd/mm/yyyy")) & ". "
                
            End If
            
            objRelacCli.lCliente = objOVBD.lCliente
            objRelacCli.iFilialCliente = objOVBD.iFilial
            objRelacCli.dtData = Date
            objRelacCli.dtDataPrevReceb = objOV.dtDataPrevReceb
            objRelacCli.dtDataProxCobr = objOV.dtDataProxCobr
            objRelacCli.dtDataFim = DATA_NULA
            objRelacCli.iFilialEmpresa = giFilialEmpresa
            'Guarda no obj a primeira parte do assunto
            objRelacCli.sAssunto1 = left(objOV.sMensagemNota, STRING_BUFFER_MAX_TEXTO - 1)
            'Guarda no obj a segunda parte do assunto
            objRelacCli.sAssunto2 = Mid(objOV.sMensagemNota, STRING_BUFFER_MAX_TEXTO)
            
            objRelacCli.lNumIntDocOrigem = objOVBD.lNumIntDoc
            objRelacCli.iTipoDoc = RELACCLI_TIPODOC_OV
            
            objRelacCli.iOrigem = RELACIONAMENTOCLIENTES_ORIGEM_EMPRESA
            objRelacCli.dtHora = Time
            objRelacCli.iContato = 0
            objRelacCli.lTipo = TIPO_RELACIONAMENTO_OVACOMP
            objRelacCli.lStatusTipoDoc = objOV.lStatus
            
            lErro = CF("RelacionamentoClientes_Grava_Trans", objRelacCli, True, gsUsuario, True)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        
        End If
       
    Next

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 91138

    OVAcomp_Importa = SUCESSO

    Exit Function

Erro_OVAcomp_Importa:

    OVAcomp_Importa = gErr

    Select Case gErr

        Case 91131
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 91132
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 91138
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case 216880
            Call Rotina_Erro(vbOKOnly, "ERRO_ORCAMENTOVENDA_NAO_CADASTRADO1", gErr, objOVBD.lCodigo, objOVBD.iFilialEmpresa)

        Case ERRO_SEM_MENSAGEM
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 165153)

    End Select

    Call Transacao_Rollback

    Exit Function

End Function

Public Function RelLogClientes_Prepara(lNumIntRel As Long, ByVal iFilialEmpresa As Integer, ByVal dtDataDe As Date, ByVal dtDataAte As Date) As Long
'Relatório específico da Tour e Anderson

Dim lErro As Long
Dim iIndice As Integer
Dim lTransacao As Long
Dim alComando(1 To 4) As Long
Dim lSeq As Long, lSeqPai As Long, lNumIntDoc As Long
Dim objCH1 As ClassClienteHistorico
Dim objCH2 As ClassClienteHistorico
Dim iTipo As Integer, sAux1 As String, sAux2 As String
Dim objVendedor As ClassVendedor
Dim objTabelaPreco As ClassTabelaPreco
Dim objCondicaoPagto As ClassCondicaoPagto
Dim objRegiaoVenda As ClassRegiaoVenda
Dim objTransportadora As ClassTransportadora
Dim objTipoCliente As ClassTipoCliente

On Error GoTo Erro_RelLogClientes_Prepara

    'Abrir transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 208029

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 208030
    Next
       
    'Obter NumIntRel
    lErro = CF("Config_ObterNumInt", "FATConfig", "NUMINTREL_RELLOGCLIENTES", lNumIntRel)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
   
    
    lErro = Comando_Executar(alComando(1), "SELECT NumIntDoc FROM ClienteHistorico WHERE DataAtualizacao BETWEEN ? AND ? ORDER BY DataAtualizacao, NumIntDoc", lNumIntDoc, dtDataDe, dtDataAte)
    If lErro <> AD_SQL_SUCESSO Then gError 208033
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 208034

    lSeqPai = 0
    Do While lErro = AD_SQL_SUCESSO

        iTipo = 1 '1=INCLUSÕES

        Set objCH1 = New ClassClienteHistorico
        Set objCH2 = New ClassClienteHistorico

        objCH1.lNumIntDoc = lNumIntDoc

        lErro = CF("ClienteHistorico_Le", objCH1)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

        lErro = Comando_Executar(alComando(2), "SELECT NumIntDoc FROM ClienteHistorico WHERE Codigo = ? AND Filial = ? AND NumIntDoc < ? ORDER BY NumIntDoc DESC", lNumIntDoc, objCH1.lCodigo, objCH1.iFilialCliente, objCH1.lNumIntDoc)
        If lErro <> AD_SQL_SUCESSO Then gError 208033
        
        lErro = Comando_BuscarPrimeiro(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 208034

        If lErro = AD_SQL_SUCESSO Then

            iTipo = 2 '2 = ALTERAÇÔES

            objCH2.lNumIntDoc = lNumIntDoc
    
            lErro = CF("ClienteHistorico_Le", objCH2)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

        End If

        lSeqPai = lSeqPai + 1
        lSeq = 0
    
        lErro = Comando_Executar(alComando(3), "INSERT INTO RelLogCliente (NumIntRel, Seq,Data,Hora,Usuario,Cliente,Filial,NomeCliente,Tipo) VALUES (?,?,?,?,?,?,?,?,?) ", _
        lNumIntRel, lSeqPai, objCH1.dtDataAtualizacao, objCH1.dHoraReg, objCH1.sUsuario, objCH1.lCodigo, objCH1.iFilialCliente, objCH1.sRazaoSocial, iTipo)
        If lErro <> AD_SQL_SUCESSO Then gError 208037

        If Not String_Igual(objCH1.sCgc, objCH2.sCgc) Then
            Call Formata_CNPJ_CPF(sAux1, objCH1.sCgc)
            Call Formata_CNPJ_CPF(sAux2, objCH2.sCgc)
            lErro = RelLogClientesDet_Prepara(lSeq, alComando(4), lNumIntRel, lSeqPai, "CNPJ", sAux2, sAux1)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        End If

        If Not String_Igual(objCH1.sRazaoSocial, objCH2.sRazaoSocial) Then
            lErro = RelLogClientesDet_Prepara(lSeq, alComando(4), lNumIntRel, lSeqPai, "Nome", objCH2.sRazaoSocial, objCH1.sRazaoSocial)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        End If

        If Not String_Igual(objCH1.sNomeReduzido, objCH2.sNomeReduzido) Then
            lErro = RelLogClientesDet_Prepara(lSeq, alComando(4), lNumIntRel, lSeqPai, "Nome Red.", objCH2.sNomeReduzido, objCH1.sNomeReduzido)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        End If

        If Not String_Igual(objCH1.sInscricaoEstadual, objCH2.sInscricaoEstadual) Then
            lErro = RelLogClientesDet_Prepara(lSeq, alComando(4), lNumIntRel, lSeqPai, "I.E.", objCH2.sInscricaoEstadual, objCH1.sInscricaoEstadual)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        End If

        If Not String_Igual(objCH1.sInscricaoMunicipal, objCH2.sInscricaoMunicipal) Then
            lErro = RelLogClientesDet_Prepara(lSeq, alComando(4), lNumIntRel, lSeqPai, "I.M.", objCH2.sInscricaoMunicipal, objCH1.sInscricaoMunicipal)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        End If

        If Not String_Igual(objCH1.sInscricaoSuframa, objCH2.sInscricaoSuframa) Then
            lErro = RelLogClientesDet_Prepara(lSeq, alComando(4), lNumIntRel, lSeqPai, "I.S.", objCH2.sInscricaoSuframa, objCH1.sInscricaoSuframa)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        End If

        If Not String_Igual(objCH1.sEndereco, objCH2.sEndereco) Then
            lErro = RelLogClientesDet_Prepara(lSeq, alComando(4), lNumIntRel, lSeqPai, "Endereço", objCH2.sEndereco, objCH1.sEndereco)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        End If

        If Not String_Igual(objCH1.sBairro, objCH2.sBairro) Then
            lErro = RelLogClientesDet_Prepara(lSeq, alComando(4), lNumIntRel, lSeqPai, "Bairro", objCH2.sBairro, objCH1.sBairro)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        End If

        If Not String_Igual(objCH1.sCidade, objCH2.sCidade) Then
            lErro = RelLogClientesDet_Prepara(lSeq, alComando(4), lNumIntRel, lSeqPai, "Cidade", objCH2.sCidade, objCH1.sCidade)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        End If

        If Not String_Igual(objCH1.sUF, objCH2.sUF) Then
            lErro = RelLogClientesDet_Prepara(lSeq, alComando(4), lNumIntRel, lSeqPai, "UF", objCH2.sUF, objCH1.sUF)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        End If

        If Not String_Igual(objCH1.sPais, objCH2.sPais) Then
            lErro = RelLogClientesDet_Prepara(lSeq, alComando(4), lNumIntRel, lSeqPai, "País", objCH2.sPais, objCH1.sPais)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        End If

        If Not String_Igual(objCH1.sCEP, objCH2.sCEP) Then
            lErro = RelLogClientesDet_Prepara(lSeq, alComando(4), lNumIntRel, lSeqPai, "CEP", objCH2.sCEP, objCH1.sCEP)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        End If

        If objCH1.iRegiao <> objCH2.iRegiao Then
            If objCH1.iRegiao = 0 Then
                sAux1 = ""
            Else
                Set objRegiaoVenda = New ClassRegiaoVenda
                objRegiaoVenda.iCodigo = objCH1.iRegiao
                lErro = CF("RegiaoVenda_Le", objRegiaoVenda)
                If lErro <> SUCESSO And lErro <> 16137 Then gError ERRO_SEM_MENSAGEM
                sAux1 = objRegiaoVenda.iCodigo & SEPARADOR & objRegiaoVenda.sDescricao
            End If
            If objCH2.iRegiao = 0 Then
                sAux2 = ""
            Else
                Set objRegiaoVenda = New ClassRegiaoVenda
                objRegiaoVenda.iCodigo = objCH2.iRegiao
                lErro = CF("RegiaoVenda_Le", objRegiaoVenda)
                If lErro <> SUCESSO And lErro <> 16137 Then gError ERRO_SEM_MENSAGEM
                sAux2 = objRegiaoVenda.iCodigo & SEPARADOR & objRegiaoVenda.sDescricao
            End If
            lErro = RelLogClientesDet_Prepara(lSeq, alComando(4), lNumIntRel, lSeqPai, "R.V.", sAux2, sAux1)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        End If

        If Not String_Igual(objCH1.sTelefone1, objCH2.sTelefone1) Then
            lErro = RelLogClientesDet_Prepara(lSeq, alComando(4), lNumIntRel, lSeqPai, "Fone 1", objCH2.sTelefone1, objCH1.sTelefone1)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        End If

        If Not String_Igual(objCH1.sTelefone2, objCH2.sTelefone2) Then
            lErro = RelLogClientesDet_Prepara(lSeq, alComando(4), lNumIntRel, lSeqPai, "Fone 2", objCH2.sTelefone2, objCH1.sTelefone2)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        End If

        If Not String_Igual(objCH1.sEmail, objCH2.sEmail) Then
            lErro = RelLogClientesDet_Prepara(lSeq, alComando(4), lNumIntRel, lSeqPai, "Email 1", objCH2.sEmail, objCH1.sEmail)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        End If

        If Not String_Igual(objCH1.sEmail2, objCH2.sEmail2) Then
            lErro = RelLogClientesDet_Prepara(lSeq, alComando(4), lNumIntRel, lSeqPai, "Email 2", objCH2.sEmail2, objCH1.sEmail2)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        End If

        If objCH1.iAtivo <> objCH2.iAtivo Then
            lErro = RelLogClientesDet_Prepara(lSeq, alComando(4), lNumIntRel, lSeqPai, "Ativo", IIf(objCH2.iAtivo = CLIENTE_ATIVO, "SIM", "NÃO"), IIf(objCH1.iAtivo = CLIENTE_ATIVO, "SIM", "NÃO"))
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        End If

        If Not String_Igual(objCH1.sObservacao, objCH2.sObservacao) Then
            lErro = RelLogClientesDet_Prepara(lSeq, alComando(4), lNumIntRel, lSeqPai, "OBS", objCH2.sObservacao, objCH1.sObservacao)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        End If

        If Not String_Igual(objCH1.sUsuarioCobrador, objCH2.sUsuarioCobrador) Then
            lErro = RelLogClientesDet_Prepara(lSeq, alComando(4), lNumIntRel, lSeqPai, "U.Cobrador", objCH2.sUsuarioCobrador, objCH1.sUsuarioCobrador)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        End If

        If Not String_Igual(objCH1.sUsuRespCallCenter, objCH2.sUsuRespCallCenter) Then
            lErro = RelLogClientesDet_Prepara(lSeq, alComando(4), lNumIntRel, lSeqPai, "R.Call Center", objCH2.sUsuRespCallCenter, objCH1.sUsuRespCallCenter)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        End If

        If Not String_Igual(objCH1.sMensagemNF, objCH2.sMensagemNF) Then
            lErro = RelLogClientesDet_Prepara(lSeq, alComando(4), lNumIntRel, lSeqPai, "Msg NF", objCH2.sMensagemNF, objCH1.sMensagemNF)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        End If

        If objCH1.iTipo <> objCH2.iTipo Then
            If objCH1.iTipo = 0 Then
                sAux1 = ""
            Else
                Set objTipoCliente = New ClassTipoCliente
                objTipoCliente.iCodigo = objCH1.iTipo
                lErro = CF("TipoDeCliente_Le", objTipoCliente)
                If lErro <> SUCESSO And lErro <> 28943 Then gError ERRO_SEM_MENSAGEM
                sAux1 = objTipoCliente.iCodigo & SEPARADOR & objTipoCliente.sDescricao
            End If
            If objCH2.iTipo = 0 Then
                sAux2 = ""
            Else
                Set objTipoCliente = New ClassTipoCliente
                objTipoCliente.iCodigo = objCH2.iTipo
                lErro = CF("TipoDeCliente_Le", objTipoCliente)
                If lErro <> SUCESSO And lErro <> 28943 Then gError ERRO_SEM_MENSAGEM
                sAux2 = objTipoCliente.iCodigo & SEPARADOR & objTipoCliente.sDescricao
            End If
            lErro = RelLogClientesDet_Prepara(lSeq, alComando(4), lNumIntRel, lSeqPai, "Tipo", sAux2, sAux1)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        End If

        If Abs(objCH1.dLimiteCredito - objCH2.dLimiteCredito) > DELTA_VALORMONETARIO Then
            lErro = RelLogClientesDet_Prepara(lSeq, alComando(4), lNumIntRel, lSeqPai, "L.Crédito", Format(objCH2.dLimiteCredito, "STANDARD"), Format(objCH1.dLimiteCredito, "STANDARD"))
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        End If

        If Abs(objCH1.dComissaoVendas - objCH2.dComissaoVendas) > DELTA_VALORMONETARIO Then
            lErro = RelLogClientesDet_Prepara(lSeq, alComando(4), lNumIntRel, lSeqPai, "%Comissão", Format(objCH2.dComissaoVendas, "PERCENT"), Format(objCH1.dComissaoVendas, "PERCENT"))
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        End If

        If Abs(objCH1.dDesconto - objCH2.dDesconto) > DELTA_VALORMONETARIO Then
            lErro = RelLogClientesDet_Prepara(lSeq, alComando(4), lNumIntRel, lSeqPai, "%Desconto", Format(objCH2.dDesconto, "PERCENT"), Format(objCH1.dDesconto, "PERCENT"))
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        End If

        If objCH1.iCondicaoPagto <> objCH2.iCondicaoPagto Then
            If objCH1.iCondicaoPagto = 0 Then
                sAux1 = ""
            Else
                Set objCondicaoPagto = New ClassCondicaoPagto
                objCondicaoPagto.iCodigo = objCH1.iCondicaoPagto
                lErro = CF("CondicaoPagto_Le", objCondicaoPagto)
                If lErro <> SUCESSO And lErro <> 19205 Then gError ERRO_SEM_MENSAGEM
                sAux1 = objCondicaoPagto.iCodigo & SEPARADOR & objCondicaoPagto.sDescReduzida
            End If
            If objCH2.iCondicaoPagto = 0 Then
                sAux2 = ""
            Else
                Set objCondicaoPagto = New ClassCondicaoPagto
                objCondicaoPagto.iCodigo = objCH2.iCondicaoPagto
                lErro = CF("CondicaoPagto_Le", objCondicaoPagto)
                If lErro <> SUCESSO And lErro <> 19205 Then gError ERRO_SEM_MENSAGEM
                sAux2 = objCondicaoPagto.iCodigo & SEPARADOR & objCondicaoPagto.sDescReduzida
            End If
            lErro = RelLogClientesDet_Prepara(lSeq, alComando(4), lNumIntRel, lSeqPai, "Cond.Pagto", sAux2, sAux1)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        End If

        If objCH1.iTabelaPreco <> objCH2.iTabelaPreco Then
            If objCH1.iTabelaPreco = 0 Then
                sAux1 = ""
            Else
                Set objTabelaPreco = New ClassTabelaPreco
                objTabelaPreco.iCodigo = objCH1.iTabelaPreco
                lErro = CF("TabelaPreco_Le", objTabelaPreco)
                If lErro <> SUCESSO And lErro <> 28004 Then gError ERRO_SEM_MENSAGEM
                sAux1 = objTabelaPreco.iCodigo & SEPARADOR & objTabelaPreco.sDescricao
            End If
            If objCH2.iTabelaPreco = 0 Then
                sAux2 = ""
            Else
                Set objTabelaPreco = New ClassTabelaPreco
                objTabelaPreco.iCodigo = objCH2.iTabelaPreco
                lErro = CF("TabelaPreco_Le", objTabelaPreco)
                If lErro <> SUCESSO And lErro <> 28004 Then gError ERRO_SEM_MENSAGEM
                sAux2 = objTabelaPreco.iCodigo & SEPARADOR & objTabelaPreco.sDescricao
            End If
            lErro = RelLogClientesDet_Prepara(lSeq, alComando(4), lNumIntRel, lSeqPai, "Tab.Preço", sAux2, sAux1)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        End If

        If objCH1.iCodTransportadora <> objCH2.iCodTransportadora Then
            If objCH1.iCodTransportadora = 0 Then
                sAux1 = ""
            Else
                Set objTransportadora = New ClassTransportadora
                objTransportadora.iCodigo = objCH1.iCodTransportadora
                lErro = CF("Transportadora_Le", objTransportadora)
                If lErro <> SUCESSO And lErro <> 19250 Then gError ERRO_SEM_MENSAGEM
                sAux1 = objTransportadora.iCodigo & SEPARADOR & objTransportadora.sNomeReduzido
            End If
            If objCH2.iCodTransportadora = 0 Then
                sAux2 = ""
            Else
                Set objTransportadora = New ClassTransportadora
                objTransportadora.iCodigo = objCH2.iCodTransportadora
                lErro = CF("Transportadora_Le", objTransportadora)
                If lErro <> SUCESSO And lErro <> 19250 Then gError ERRO_SEM_MENSAGEM
                sAux2 = objTransportadora.iCodigo & SEPARADOR & objTransportadora.sNomeReduzido
            End If
            lErro = RelLogClientesDet_Prepara(lSeq, alComando(4), lNumIntRel, lSeqPai, "Transportadora", sAux2, sAux1)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        End If

        If objCH1.iVendedor <> objCH2.iVendedor Then
            If objCH1.iVendedor = 0 Then
                sAux1 = ""
            Else
                Set objVendedor = New ClassVendedor
                objVendedor.iCodigo = objCH1.iVendedor
                lErro = CF("Vendedor_Le", objVendedor)
                If lErro <> SUCESSO And lErro <> 12582 Then gError ERRO_SEM_MENSAGEM
                sAux1 = objVendedor.iCodigo & SEPARADOR & objVendedor.sNomeReduzido
            End If
            If objCH2.iVendedor = 0 Then
                sAux2 = ""
            Else
                Set objVendedor = New ClassVendedor
                objVendedor.iCodigo = objCH2.iVendedor
                lErro = CF("Vendedor_Le", objVendedor)
                If lErro <> SUCESSO And lErro <> 12582 Then gError ERRO_SEM_MENSAGEM
                sAux2 = objVendedor.iCodigo & SEPARADOR & objVendedor.sNomeReduzido
            End If
            lErro = RelLogClientesDet_Prepara(lSeq, alComando(4), lNumIntRel, lSeqPai, "Vendedor", sAux2, sAux1)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        End If

        If objCH1.iRegimeTributario <> objCH2.iRegimeTributario Then
            sAux1 = IIf(objCH1.iRegimeTributario = REGIME_TRIBUTARIO_NORMAL, REGIME_TRIBUTARIO_NORMAL_TEXTO, REGIME_TRIBUTARIO_SIMPLES_TEXTO)
            sAux2 = IIf(objCH2.iRegimeTributario = REGIME_TRIBUTARIO_NORMAL, REGIME_TRIBUTARIO_NORMAL_TEXTO, REGIME_TRIBUTARIO_SIMPLES_TEXTO)
            lErro = RelLogClientesDet_Prepara(lSeq, alComando(4), lNumIntRel, lSeqPai, "R.T.", sAux2, sAux1)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        End If
        
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 208038

    Loop

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    'Fechar transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 208039

    RelLogClientes_Prepara = SUCESSO

    Exit Function

Erro_RelLogClientes_Prepara:

    RelLogClientes_Prepara = gErr

    Select Case gErr

        Case 208029
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 208030
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 208031 To 208034, 208038
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ORCAMENTOVENDA", gErr)

        Case 208035, 208036
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PROJETOS", gErr)

        Case 208037
            Call Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_REL12SEMANAS", gErr)

        Case 208039
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
                        
        Case ERRO_SEM_MENSAGEM
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 208040)

    End Select
       
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Call Transacao_Rollback

    Exit Function

End Function

Public Function RelLogClientesDet_Prepara(lSeq As Long, ByVal lComando As Long, ByVal lNumIntRel As Long, ByVal lSeqPai As Long, ByVal sCampo As String, ByVal sValorDe As String, ByVal sValorAte As String) As Long

Dim lErro As Long

On Error GoTo Erro_RelLogClientesDet_Prepara

    lSeq = lSeq + 1

    lErro = Comando_Executar(lComando, "INSERT INTO RelLogClienteDet (NumIntRel, SeqPai, Seq, Campo, ValorDe, ValorPara) VALUES (?,?,?,?,?,?) ", _
                            lNumIntRel, lSeqPai, lSeq, sCampo, sValorDe, sValorAte)
    If lErro <> AD_SQL_SUCESSO Then gError ERRO_SEM_MENSAGEM

On Error GoTo Erro_RelLogClientesDet_Prepara

    RelLogClientesDet_Prepara = SUCESSO

    Exit Function

Erro_RelLogClientesDet_Prepara:

    RelLogClientesDet_Prepara = gErr

    Select Case gErr
                       
        Case ERRO_SEM_MENSAGEM
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 208040)

    End Select

    Exit Function

End Function
