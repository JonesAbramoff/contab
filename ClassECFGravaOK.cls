VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
  Persistable = 0  'NotPersistable
  DataBindingBehavior = 0  'vbNone
  DataSourceBehavior  = 0  'vbNone
  MTSTransactionMode  = 0  'NotAnMTSObject
END
Attribute VB_Name = "ClassECFGrava"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Option Explicit
'mario rotinasecf.txt

Private Const ODBC_ADD_DSN = 1
Private Const ODBC_CONFIG_DSN = 2
Private Const ODBC_REMOVE_DSN = 3
Private Const ODBC_ADD_SYS_DSN = 4
Private Const ODBC_CONFIG_SYS_DSN = 5
Private Const ODBC_REMOVE_SYS_DSN = 6

Private Const SQL_DRIVER_NOPROMPT = 0

Private Const SQL_ATTR_CONNECTION_POOLING = 201
Private Const SQL_CP_ONE_PER_DRIVER = 1
Private Const SQL_IS_INTEGER = -6
Private Const SQL_CP_OFF = 0
Private Const SQL_DRIVER_AWARE_POOLING_SUPPORTED = 65572 ' 10024 - DIO N CON 65572

Private Const SQL_MAX_MESSAGE_LENGTH = 512
Private Const SQL_SUCCESS = 0
Private Const SQL_SUCCESS_WITH_INFO = 1
Private Const SQL_ATTR_ODBC_VERSION = 200
Private Const SQL_OV_ODBC3 = 3
Private Const SQL_HANDLE_DBC = 2
Private Const SQL_HANDLE_ENV = 1
Private Const SQL_NTS = -3
Private Const SQL_ERROR = -1
Private Const SQL_DRIVER_VER = 7
Private Const SQL_SERVER_NAME = 13
Private Const SQL_ODBC_VER = 10

Private Declare Function Conexao_AbrirExt Lib "ADSQLMN.DLL" Alias "AD_Conexao_Abrir" (ByVal driver_sql As Integer, ByVal lpParamIn As String, ByVal ParamLenIn As Integer, ByVal lpParamOut As String, lpParamLenOut As Integer) As Long
Private Declare Function Conexao_FecharExt Lib "ADSQLMN.DLL" Alias "AD_Conexao_Fechar" (ByVal lConexao As Long) As Long
Private Declare Function Conexao_AbrirBrowseExt Lib "ADSQLMN.DLL" Alias "AD_Conexao_AbrirBrowse" (ByVal driver_sql As Integer, ByVal lpParamIn As String, ByVal ParamLenIn As Integer, ByVal lpParamOut As String, lpParamLenOut As Integer) As Long

Private Declare Function SQLConfigDataSource Lib "ODBCCP32.dll" (ByVal hWnd As Long, ByVal iTipo As Integer, ByVal sDriver As String, ByVal sAtributos As String) As Long
Private Declare Function SQLAllocEnv Lib "ODBC32.DLL" (henv As Long) As Integer
Private Declare Function SQLAllocConnect Lib "ODBC32.DLL" (ByVal henv As Long, hdbc As Long) As Integer
Private Declare Function SQLDriverConnect Lib "ODBC32.DLL" (ByVal hdbc As Long, ByVal hWnd As Long, ByVal lpParamIn As String, ByVal ParamLenIn As Integer, ByVal ach_conn_out As String, ByVal maxtamstrout As Integer, cb_conn_out As Integer, ByVal drivercompl As Integer) As Integer
Private Declare Function SQLDisconnect Lib "ODBC32.DLL" (ByVal hdbc As Long) As Integer
Private Declare Function SQLFreeConnect Lib "ODBC32.DLL" (ByVal hdbc As Long) As Integer
Private Declare Function SQLFreeEnv Lib "ODBC32.DLL" (ByVal henv As Long) As Integer
Private Declare Function SQLInstallerError Lib "ODBCCP32.dll" (ByVal iErro As Integer, pfErrorCode As Long, ByVal lpszErrorMsg As String, ByVal cbErrorMsgMax As Integer, pcbErrorMsg As Integer) As Integer
Private Declare Function SQLError Lib "ODBC32.DLL" (ByVal henv As Long, ByVal hdbc As Long, ByVal hstmt As Long, ByVal ssqlstate As String, iNative As Integer, ByVal sMsg As String, ByVal BufferLength As Integer, TextLength As Integer) As Integer
Private Declare Function SQLGetInfo Lib "ODBC32.DLL" (ByVal ldbc As Long, ByVal hWnd As Long, ByVal szInfo As String, ByVal cbInfoMax As Integer, cbInfoOut As Integer) As Integer

Function Caixa_Transacao_Abrir(lSequencial As Long, Optional dtData As Date) As Long
'Função que Abre a Transação no Caixa

Dim lErro As Long
Dim lSeqAberta As Long
Dim lSeqEncerrada As Long
Dim sSequeCaixaUltimTransAberta As String
Dim sSequeCaixaUltimTransFechada As String
Dim sLog As String
Dim colRegistro As New Collection
Dim lTamanho As Long
Dim sRetorno As String

On Error GoTo Erro_Caixa_Transacao_Abrir
    
    lSequencial = 0
    
    glTransacaoPAFECF = 0
    
    'Inicia a Transacao
    glTransacaoPAFECF = Transacao_AbrirExt(glConexaoPAFECF)
    If glTransacaoPAFECF = 0 Then gError 204608
    
    Caixa_Transacao_Abrir = SUCESSO

    Exit Function

Erro_Caixa_Transacao_Abrir:

    Caixa_Transacao_Abrir = gErr
    
    Select Case gErr

        Case 204608
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_TRANSACAO1, gErr)

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB, gErr, Error$, 149269)

    
    End Select
    
    Exit Function

End Function

Function Caixa_Transacao_Fechar(lSequencial As Long, Optional dtData As Date) As Long
'Função que Fecha a Transação

Dim lErro As Long
Dim sSequeCaixaUltimTransFechada As String
Dim sSequeCaixaUltimTransAberta As String
Dim sLog As String
Dim colRegistro As New Collection
Dim lTamanho As Long
Dim sRetorno As String

On Error GoTo Erro_Caixa_Transacao_Fechar
    
    'Confirma a transação
    lErro = Transacao_CommitExt(glTransacaoPAFECF)
    If lErro <> AD_SQL_SUCESSO Then gError 204614

    glTransacaoPAFECF = 0

    Caixa_Transacao_Fechar = SUCESSO

    Exit Function

Erro_Caixa_Transacao_Fechar:

    Caixa_Transacao_Fechar = gErr

    Select Case gErr

        Case 204614
            Call Rotina_ErroECF(vbOKOnly, ERRO_COMMIT_TRANSACAO1, gErr)

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 149270)

    End Select

    Exit Function

End Function

Sub Caixa_Transacao_Rollback(ByVal lTransacao As Long)
'Função que Fecha a Transação

Dim lErro As Long
Dim sSequeCaixaUltimTransFechada As String
Dim sSequeCaixaUltimTransAberta As String
Dim sLog As String
Dim lTrans As Long

On Error GoTo Erro_Caixa_Transacao_Rollback


    If lTransacao <> 0 Then
    
        lTrans = lTransacao
    
        'Desfaz Transação
        Call Transacao_RollbackExt(lTrans)
    
        If lTransacao = glTransacaoOrcPAFECF Then glTransacaoOrcPAFECF = 0
        If lTransacao = glTransacaoPAFECF Then glTransacaoPAFECF = 0

    End If

    Exit Sub

Erro_Caixa_Transacao_Rollback:

    Select Case gErr

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 149271)

    End Select

    Exit Sub

End Sub

Function Caixa_Transacao_Abrir_Orc(lSequencial As Long, Optional dtData As Date) As Long
'Função que Abre a Transação no Caixa

Dim lErro As Long
Dim sLog As String
Dim colRegistro As New Collection

On Error GoTo Erro_Caixa_Transacao_Abrir_Orc

    If glConexaoOrcPAF Then
    
        lSequencial = 0
    
        glTransacaoOrcPAFECF = 0
        
        lErro = TestaVersaoORC()
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
        'Inicia a Transacao
        glTransacaoOrcPAFECF = Transacao_AbrirExt(glConexaoOrcPAF)
        If glTransacaoOrcPAFECF = 0 Then gError 204626
    
    End If
    
    Caixa_Transacao_Abrir_Orc = SUCESSO

    Exit Function

Erro_Caixa_Transacao_Abrir_Orc:

    Caixa_Transacao_Abrir_Orc = gErr
    
    glConexaoOrcPAF = 0 'Jones 02/09/15: para nao tentar mais acessar o bd de orcamento
    
    Select Case gErr
    
        Case ERRO_SEM_MENSAGEM

        Case 204626
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_TRANSACAO1, gErr)

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 149272)

    End Select
    
    Exit Function

End Function

Function Caixa_Transacao_Fechar_Orc(lSequencial As Long, Optional dtData As Date) As Long
'Função que Fecha a Transação

Dim lErro As Long
Dim sLog As String
Dim colRegistro As New Collection

On Error GoTo Erro_Caixa_Transacao_Fechar_Orc
    
    If glConexaoOrcPAF Then
    
        'Confirma a transação
        lErro = Transacao_CommitExt(glTransacaoOrcPAFECF)
        If lErro <> AD_SQL_SUCESSO Then gError 204627
    
    End If
    
    glTransacaoOrcPAFECF = 0
    
    Caixa_Transacao_Fechar_Orc = SUCESSO

    Exit Function

Erro_Caixa_Transacao_Fechar_Orc:

    Caixa_Transacao_Fechar_Orc = gErr

    glConexaoOrcPAF = 0 'Jones 02/09/15: para nao tentar mais acessar o bd de orcamento
    
    Select Case gErr

        Case 204627
            Call Rotina_ErroECF(vbOKOnly, ERRO_COMMIT_TRANSACAO1, gErr)

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 149273)

    End Select

    Exit Function

End Function

Public Function MovimentoCaixaECF_Grava(ByVal colRegistro As Collection, Optional ByVal objVenda As ClassVenda) As Long
'Função Que Grava no Arquivo as Funções que Estão no objMovimentos de Caixa

Dim lErro As Long
Dim dtDate As Date
Dim sNomeArq As String
Dim sLog As String
Dim iIndice As Integer
Dim lTamanho As Long
Dim sRetorno As String
Dim alComando(1 To 10) As Long
Dim lTransacao As Long
Dim lNumIntDoc As Long
Dim sRegistro As String
Dim iTipo As Integer
Dim iPos As Integer
Dim sData As String
Dim sHora As String
Dim dtHora As Date
Dim dHora As Double, schNFe As String
Dim dtData1 As Date, iCodModeloECF As Integer, lAux As Long
Dim dtUltimoMovto As Date, sTipo2 As String, sRegAux As String
Dim lNumMovtoIni As Long, lNumMovtoFim As Long

On Error GoTo Erro_MovimentoCaixaECF_Grava
    
'    If giOrcamentoECF <> CAIXA_SO_ORCAMENTO Then
        
    
       'Abre os  comandos
        For iIndice = LBound(alComando) To UBound(alComando)
            alComando(iIndice) = Comando_AbrirExt(glConexaoPAFECF)
            If alComando(iIndice) = 0 Then gError 204609
        Next
     
'        lErro = AFRAC_DataHoraImpressora(sData, sHora)
'        If lErro <> SUCESSO Then
'            lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Data Hora Impressora")
'            If lErro <> SUCESSO Then gError 204867
'        End If
'
'        dtHora = left(sHora, 2) & ":" & Mid(sHora, 3, 2) & ":" & right(sHora, 2)
'
'        dHora = CDbl(dtHora)
'
'        If dtData = "00:00:00" Then
'
'            dtData = left(sData, 2) & "/" & Mid(sData, 3, 2) & "/" & right(sData, 2)
'
'        End If
    
    
        dtData1 = Date
        
        dtHora = Time
    
        dHora = CDbl(dtHora)
        
'        sRegAux = colRegistro.Item(1)
'        iPos = InStr(1, sRegAux, Chr(vbKeyControl))
'        iTipo = StrParaInt(Mid(sRegAux, 1, iPos - 1))
'        sRegAux = Mid(sRegAux, iPos + 1)
'        sTipo2 = Mid(sRegAux, 1, 2)
'
'        'Se está movimentando dinheiro ou vendendo tem que ter o registro 88 no dia
'        If (iTipo = TIPOREGISTROECF_MOVIMENTOCAIXA_DINHEIRO And sTipo2 <> "88") Or (iTipo = TIPOREGISTROECF_VENDAS) Then
'
'            lErro = MovimentoCaixa_DataUltMovto_24_88(dtUltimoMovto)
'            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
'
'            'Se o último 24_88 é anterior dá erro
'            If dtUltimoMovto < dtData1 Then gError 216176 'Não pode gravar nada se não tiver o arquivo 88 gravado
'
'        End If
    
        lErro = CF_ECF("ECFConfig_ObterNumInt", "NUM_PROX_MOVIMENTOCAIXA", lNumIntDoc, colRegistro.Count)
        If lErro <> SUCESSO Then gError 204612
    
        sRegistro = colRegistro.Item(1)
    
        'Procura o Primeiro Control para saber o tipo do registro
        iPos = InStr(1, sRegistro, Chr(vbKeyControl))
        
        'Recolhe o tipo
        iTipo = StrParaInt(Mid(sRegistro, 1, iPos - 1))
        
        iCodModeloECF = 0
        If Not (objVenda Is Nothing) Then iCodModeloECF = objVenda.iCodModeloECF
        If iCodModeloECF = 0 Then iCodModeloECF = giCodModeloECF
    
        For iIndice = 1 To colRegistro.Count
            
            If iIndice = 1 And Not (objVenda Is Nothing) And (iTipo = TIPOREGISTROECF_VENDAS Or iTipo = TIPOREGISTROECF_EXCLUSAOCUPOM) Then
            
                If objVenda.iTipo <> OPTION_ORCAMENTO Then
                
                    Select Case iCodModeloECF
                    
                        Case IMPRESSORA_NFE
                            schNFe = objVenda.objCupomFiscal.sNFeChaveAcesso
                        
                        Case IMPRESSORA_NFCE
                        
                            schNFe = objVenda.objCupomFiscal.sNFeChaveAcesso
                            
                            If iTipo = TIPOREGISTROECF_VENDAS Then
                            
                                lErro = Comando_ExecutarPos(alComando(3), "SELECT NumMovto FROM NFCeInfo WHERE chNFe = ?", 0, lAux, schNFe)
                                If lErro <> AD_SQL_SUCESSO Then gError 201564
                                
                                lErro = Comando_BuscarProximo(alComando(3))
                                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SUCESSO Then gError 201565
                                
                                If lAux <> 0 Then gError 201566
                                
                                lErro = Comando_ExecutarPos(alComando(4), "UPDATE NFCeInfo SET NumMovto = ?", alComando(3), lNumIntDoc)
                                If lErro <> AD_SQL_SUCESSO Then gError 201567
                            
                            Else
                            
                                lErro = Comando_ExecutarPos(alComando(5), "SELECT NumMovtoCanc FROM NFCeInfo WHERE chNFe = ?", 0, lAux, schNFe)
                                If lErro <> AD_SQL_SUCESSO Then gError 201568
                                
                                lErro = Comando_BuscarProximo(alComando(5))
                                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SUCESSO Then gError 201569
                                
                                If lAux <> 0 Then gError 201570
                                
                                lErro = Comando_ExecutarPos(alComando(6), "UPDATE NFCeInfo SET NumMovtoCanc = ?", alComando(5), lNumIntDoc)
                                If lErro <> AD_SQL_SUCESSO Then gError 201571
                            
                            End If
                            
                        Case IMPRESSORA_SAT_2_5_15
                        
                            If iTipo = TIPOREGISTROECF_VENDAS Then
                            
                                schNFe = objVenda.objCupomFiscal.sSATChaveAcesso
                                
                                lErro = Comando_ExecutarPos(alComando(7), "SELECT NumMovto FROM SATInfo WHERE ChaveAcesso = ?", 0, lAux, schNFe)
                                If lErro <> AD_SQL_SUCESSO Then gError 201572
                                
                                lErro = Comando_BuscarProximo(alComando(7))
                                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SUCESSO Then gError 201573
                                
                                If lAux <> 0 Then gError 201574
                                
                                lErro = Comando_ExecutarPos(alComando(8), "UPDATE SATInfo SET NumMovto = ?", alComando(7), lNumIntDoc)
                                If lErro <> AD_SQL_SUCESSO Then gError 201575
                                
                            Else
                            
                                schNFe = objVenda.objCupomFiscal.sSATCancChaveAcesso
                                
                                lErro = Comando_ExecutarPos(alComando(9), "SELECT NumMovtoCanc FROM SATInfo WHERE CancChaveAcesso = ?", 0, lAux, schNFe)
                                If lErro <> AD_SQL_SUCESSO Then gError 201576
                                
                                lErro = Comando_BuscarProximo(alComando(9))
                                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SUCESSO Then gError 201577
                                
                                If lAux <> 0 Then gError 201578
                                
                                lErro = Comando_ExecutarPos(alComando(10), "UPDATE SATInfo SET NumMovtoCanc = ?", alComando(9), lNumIntDoc)
                                If lErro <> AD_SQL_SUCESSO Then gError 201579
                            
                            End If
                        
                        Case Else
                            schNFe = ""
                            
                    End Select
            
                Else
                
                    schNFe = ""
                    
                End If
            
            Else
                schNFe = ""
            End If
    
            sRegistro = colRegistro.Item(iIndice)
                
            'inserir na tabela de movto caixa de
            lErro = Comando_Executar(alComando(1), "INSERT INTO MovimentoCaixa (NumMovto, Data, Tipo, Msg, Hora, Seq, CodModeloECF, chNFe) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?)", _
                                                   lNumIntDoc, dtData1, iTipo, sRegistro, dHora, iIndice, iCodModeloECF, schNFe)
            If lErro <> AD_SQL_SUCESSO Then gError 204613
            
            If lNumMovtoIni = 0 Then lNumMovtoIni = lNumIntDoc
            lNumMovtoFim = lNumIntDoc
            
            lNumIntDoc = lNumIntDoc + 1
    
        Next
    
        lErro = SaldoEmDinheiro_Trata_Movto(lNumMovtoIni, lNumMovtoFim)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
        For iIndice = LBound(alComando) To UBound(alComando)
            Call Comando_Fechar(alComando(iIndice))
        Next

'    End If

    MovimentoCaixaECF_Grava = SUCESSO

    Exit Function

Erro_MovimentoCaixaECF_Grava:
    
    MovimentoCaixaECF_Grava = gErr

    Select Case gErr
        
        
        Case 204609
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)
        
        Case 204610, 204611
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_MOVIMENTOCAIXA, gErr)
        
        Case 204612, 204867
        
        Case 204613
            Call Rotina_ErroECF(vbOKOnly, ERRO_INCLUSAO_MOVIMENTOCAIXA, gErr, lNumIntDoc)
        
        Case ERRO_SEM_MENSAGEM
        
        Case 216176
            Call Rotina_ErroECF(vbOKOnly, "O caixa ainda não foi aberto para " & Format(dtData1, "dd/mm/yyyy") & ". Reinicie o Caixa.", gErr)
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 204615)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function
    
End Function

Function Caixa_Executa_Abertura() As Long
'Função que Realiza a abertura de Caixa

Dim lErro As Long
Dim lSequencial As Long
Dim objOperador As New ClassOperador
Dim iCodGerente As Integer
Dim sStatusSessao As String
Dim dtData As Date
Dim lTransacao As Long
Dim lSequencialOrc As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer
Dim objVenda As ClassVenda
Dim colRegistro As Collection
Dim sArquivo As String
Dim tOrcamento As typeOrcamentoECF
Dim lCodigo As Long

On Error GoTo Erro_Caixa_Executa_Abertura

    If giOrcamentoECF <> CAIXA_SO_ORCAMENTO Then

        If glConexaoOrcPAF <> 0 Then
    
            'Abre os  comandos
             For iIndice = LBound(alComando) To UBound(alComando)
                 alComando(iIndice) = Comando_AbrirExt(glConexaoOrcPAF)
                 If alComando(iIndice) = 0 Then gError 204674
             Next
    
        End If
    
        If Not AFRAC_ImpressoraCFe(giCodModeloECF) Then
    
            'Se for Necessário a autorização do Gerente para abertura do Caixa
            If gobjLojaECF.iGerenteAutoriza = AUTORIZACAO_GERENTE Then
        
                'Chama a Tela de Senha
                Call Chama_TelaECF_Modal("OperadorLogin", objOperador, LOGIN_APENAS_GERENTE)
        
                'Sai de Função se a Tela de Login não Retornar ok
                If giRetornoTela <> vbOK Then gError 107626
                
                'Se Operador for Gerente
                iCodGerente = objOperador.iCodigo
        
            End If
    
        End If
    
        If giOrcamentoECF = CAIXA_SO_ORCAMENTO Then
    
            'Altera o Status do Caixa, Instancia a Varialvel Global
            giStatusCaixa = STATUS_CAIXA_ABERTO
    
            'Função que Grava no Arquivo de Configuração de Caixa o Novo Status do Caixa
            lErro = WritePrivateProfileString(APLICACAO_CAIXA, "StatusCaixa", CStr(giStatusCaixa), NOME_ARQUIVO_CAIXA)
            If lErro = 0 Then gError 105901
    
            'funcao que cria/altera a chave e grava no caixaconfig.ini
            lErro = CF_ECF("CaixaConfig_Chave")
            If lErro <> SUCESSO Then gError 204256
    
        Else
    
    '        'coloca a data de hoje no arquivo
    '        lErro = WritePrivateProfileString(APLICACAO_ECF, "DataUltimoArquivo", CStr(gdtDataHoje), NOME_ARQUIVO_CAIXA)
    '        If lErro = 0 Then gError 117514
    
            'funcao que cria/altera a chave e grava no caixaconfig.ini
            lErro = CF_ECF("CaixaConfig_Chave")
            If lErro <> SUCESSO Then gError 204257
    
    
            'Função que Abre a Transação de Caixa, Identifica o Movimento dentro do Caixa
            lErro = CF_ECF("Caixa_Transacao_Abrir", lSequencial)
            If lErro <> SUCESSO Then gError 107559
            
            If glConexaoOrcPAF <> 0 Then
    
                'Abre a Transação
                Call CF_ECF("Caixa_Transacao_Abrir_Orc", lSequencialOrc)
        
            End If
        
            If Not AFRAC_ImpressoraCFe(giCodModeloECF) Then
        
                'PAFECF - na hipotese de ser excedido o prazo de tolerancia para emissao da Reducao Z, emitir automaticamente os cupons
                'fiscais referentes as pre vendas antigos quando da abertura do movimento do proximo dia de funcionamento
            
                tOrcamento.sMsg = String(STRING_ORCAMENTO_MSG, 0)
        
                lErro = Comando_Executar(alComando(1), "SELECT Codigo, Seq, Msg FROM Orcamento WHERE DataEmissao <=? AND Status <> ? AND NumeroDAV = '0000000000' ORDER BY Codigo, Seq", tOrcamento.lCodigo, tOrcamento.iSeq, tOrcamento.sMsg, Date - 2, STATUS_BAIXADO)
                If lErro <> AD_SQL_SUCESSO Then gError 204675
                
                lErro = Comando_BuscarPrimeiro(alComando(1))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 204676
                
                lCodigo = tOrcamento.lCodigo
                
                Set colRegistro = New Collection
                
                lCodigo = tOrcamento.lCodigo
                
                Do While lErro = AD_SQL_SUCESSO
        
                    If tOrcamento.lCodigo <> lCodigo Then
                    
                        Set objVenda = New ClassVenda
            
                        lErro = CF_ECF("Registro_ECF_Vendas", colRegistro, sArquivo, 1, objVenda)
                        If lErro <> SUCESSO Then gError 204677
                        
                        lErro = CF_ECF("Imprime_Orcamento_EmTrans", objVenda)
                        If lErro <> SUCESSO Then gError 204678
            
                        Set colRegistro = New Collection
        
                        lCodigo = tOrcamento.lCodigo
                    
                    End If
                    
                    colRegistro.Add tOrcamento.sMsg
                    
                    lErro = Comando_BuscarProximo(alComando(1))
                    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 204679
                    
                Loop
            
                If colRegistro.Count > 0 Then
            
                    Set objVenda = New ClassVenda
        
                    lErro = CF_ECF("Registro_ECF_Vendas", colRegistro, sArquivo, 1, objVenda)
                    If lErro <> SUCESSO Then gError 210521
        
                    lErro = CF_ECF("Imprime_Orcamento_EmTrans", objVenda)
                    If lErro <> SUCESSO Then gError 210522
        
                End If
        
            End If
        
            'Executar a Abertura do Caixa
            lErro = CF_ECF("Caixa_Executa_Abertura_EmTrans", lSequencial, iCodGerente)
            If lErro <> SUCESSO Then gError 107540
        
            If glConexaoOrcPAF <> 0 Then
    
                'Fecha a Transação
                lErro = CF_ECF("Caixa_Transacao_Fechar_Orc", lSequencialOrc)
                If lErro <> SUCESSO Then gError 204673
            
            End If
        
            'Fechar a Transação
            lErro = CF_ECF("Caixa_Transacao_Fechar", lSequencial)
            If lErro <> SUCESSO Then gError 107541
        
        
        
        End If
        
         'Verifica o Status da Sessão
        If giStatusSessao = SESSAO_ABERTA Then
            sStatusSessao = "Sessão Aberta"
        ElseIf giStatusSessao = SESSAO_SUSPENSA Then
            sStatusSessao = "Sessão Suspensa"
        ElseIf giStatusSessao = SESSAO_ENCERRADA Then
            sStatusSessao = "Sessão Encerrada"
        End If
        
        'Alterar o Caption do ECF
        GL_objMDIForm.Caption = "CAIXA_STATUS : Caixa Aberto / SESSAO_STATUS : " & sStatusSessao
    
        gdtDataAnterior = Date

        If glConexaoOrcPAF <> 0 Then
    
            For iIndice = LBound(alComando) To UBound(alComando)
                Call Comando_Fechar(alComando(iIndice))
            Next
    
        End If
    
    End If
    
    Caixa_Executa_Abertura = SUCESSO

    Exit Function

Erro_Caixa_Executa_Abertura:

    Caixa_Executa_Abertura = gErr

    Select Case gErr

        Case 105901
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, APLICACAO_CAIXA, "StatusCaixa", NOME_ARQUIVO_CAIXA)

        Case 107540, 107541, 107559, 107626, 204256, 204257, 204672, 204677, 204678, 210521, 210522
            'Erro Tratado Dentro da Função Chamadora

        Case 117514
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, APLICACAO_ECF, "DataUltimoArquivo", NOME_ARQUIVO_CAIXA)

        Case 204674
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)
            
        Case 204675, 204676, 204679
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_ORCAMENTO, gErr)
            

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 149276)

    End Select
    
'    lSequencial = glSeqTransacaoAberta

    'Rollback na transação
    Call CF_ECF("Caixa_Transacao_Rollback", glTransacaoPAFECF)
    
    If glConexaoOrcPAF <> 0 Then
    
        Call CF_ECF("Caixa_Transacao_Rollback", glTransacaoOrcPAFECF)
    
        For iIndice = LBound(alComando) To UBound(alComando)
            Call Comando_Fechar(alComando(iIndice))
        Next

    End If

    Exit Function

End Function

Function Caixa_Executa_Abertura_EmTrans(lSequencial As Long, iCodGerente As Integer) As Long
'Função que Prepara o Caixa para o Dia de Trabalho

Dim lErro As Long
Dim objMovimentoCaixa As New ClassMovimentoCaixa
Dim sStatusCaixa As String
Dim colRegistro As New Collection
Dim sRetorno As String
Dim sRetorno1 As String
Dim sRetorno2 As String
'Dim dtData As Date

On Error GoTo Erro_Caixa_Executa_Abertura_EmTrans



    If giOrcamentoECF <> CAIXA_SO_ORCAMENTO Then

    
'        gdtDataAnterior = gdtDataHoje
        
    '    'Verifica se Data da ultima redução < ontem
    '    If gdtUltimaReducao < (gdtDataHoje - 1) Then
    '
    '        'Verificar se Houve a Redução Z, para a Nova Abertura de Caixa
    '        lErro = CF_ECF("Caixa_Executa_ReducaoZ_EmTrans", lSequencial, iCodGerente, (Date - 1))
    '        If lErro <> SUCESSO Then gError 107627
    '
    '        'Verifica se não Houver Erro se não Incrementa o Sequencial
    '        lSequencial = lSequencial + 1
    '
    '    End If
        
        
        'Função que Move as Informações para a Movimento de Caixa Corresponde
        lErro = CF_ECF("MovimentoCaixa_Move_Dados_Memoria", MOVIMENTO_CAIXA_ABERTURA, objMovimentoCaixa)
        If lErro <> SUCESSO Then gError 107543
    
        'Guarda o Código do Gerente no ObjMovimentos  de Caixa
        objMovimentoCaixa.iGerente = iCodGerente
    
        'Guarda o Sequencial do movimento dentro do caixa
        objMovimentoCaixa.lSequencial = lSequencial
        
        Call CF_ECF("MovimentoCaixa_Gera_Log", colRegistro, objMovimentoCaixa)
        
        'Função que Grava as Informções referentes ao Movimento de Caixa no Arquivo
        lErro = CF_ECF("MovimentoCaixaECF_Grava", colRegistro)
        If lErro <> SUCESSO Then gError 107544
        
        Set colRegistro = New Collection
        
        'Altera o Status do Caixa, Instancia a Varialvel Global
        giStatusCaixa = STATUS_CAIXA_ABERTO
        
        lErro = Informa_Arq
        If lErro <> SUCESSO Then gError 112080
        
        'Adcionar o objMovimentos na Coleção Global
        gcolMovimentosCaixa.Add objMovimentoCaixa
        
        If giCodModeloECF <> 1 And giCodModeloECF <> 2 And giCodModeloECF <> 3 Then
            
            'obten o Novo Sequencial para a Proxima Transação do Caixa
            lSequencial = lSequencial + 1
            
'            dtData = gdtDataHoje
            
            'Executa a Leitura X
            lErro = CF_ECF("Caixa_Executa_LeituraX_EmTrans", lSequencial, iCodGerente)
            If lErro <> SUCESSO Then gError 107546
                
                
        End If
        
        'obten o Novo Sequencial para a Proxima Transação do Caixa
        lSequencial = lSequencial + 1
        
        'grava o que tem de suprimento no caixa (se houver) no novo arquivao que está sendo aberto
        lErro = Caixa_Executa_Transf_Suprimento(lSequencial)
        If lErro <> SUCESSO Then gError 105390
        
        'Transforma de Inteiro para String
        sStatusCaixa = CStr(giStatusCaixa)
        
        'Função que Grava no Arquivo de Configuração de Caixa o Novo Status do Caixa
        lErro = WritePrivateProfileString(APLICACAO_CAIXA, "StatusCaixa", sStatusCaixa, NOME_ARQUIVO_CAIXA)
        If lErro = 0 Then gError 117515
        
        If Not AFRAC_ImpressoraCFe(giCodModeloECF) Then

            'funcao que cria/altera a chave e grava no caixaconfig.ini
            lErro = CF_ECF("CaixaConfig_Chave")
            If lErro <> SUCESSO Then gError 204258
            
            'Função Que insere o caixa atual no arquivo q contem os caixas ativos - PAFECF
            lErro = CF_ECF("CaixasAtivos_Insere_Caixa")
            If lErro <> SUCESSO Then gError 204231
    
        End If
    
    Else
        
        Call CF_ECF("Trata_Caixa_So_Orcamento")
        
    End If
    
    Caixa_Executa_Abertura_EmTrans = SUCESSO

    Exit Function

Erro_Caixa_Executa_Abertura_EmTrans:

    Caixa_Executa_Abertura_EmTrans = gErr

    Select Case gErr

        Case 105390, 105391, 107543, 107544, 107545, 107546, 107627, 107634, 112080, 204231, 204258

        Case 117515
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, APLICACAO_CAIXA, "StatusCaixa", NOME_ARQUIVO_CAIXA)

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 149277)

    End Select

    Exit Function

End Function

Private Function Informa_Arq() As Long

Dim lErro As Long
Dim sRetorno1 As String
Dim sRetorno As String
Dim sRetorno2 As String
Dim sLog As String
Dim colRegistro As New Collection
Dim lCOO As Long

On Error GoTo Erro_Informa_Arq
    
    'COO primeiro no Afrac
    lErro = AFRAC_LerInformacaoImpressora("023", sRetorno)
    If lErro <> SUCESSO Then
        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Informação Impressora")
        If lErro <> SUCESSO Then gError 112061
    End If
            
    lCOO = StrParaLong(sRetorno)
            
    lErro = WritePrivateProfileString("Caixa", "COO", CStr(lCOO + 1), NOME_ARQUIVO_CAIXA)
    If lErro = 0 Then gError 117516
    
    'funcao que cria/altera a chave e grava no caixaconfig.ini
    lErro = CF_ECF("CaixaConfig_Chave")
    If lErro <> SUCESSO Then gError 204259
    
    Informa_Arq = SUCESSO
    
    Exit Function

Erro_Informa_Arq:

    Informa_Arq = gErr

    Select Case gErr

        Case 112061, 204259
            
        Case 117516
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, "Caixa", "COO", NOME_ARQUIVO_CAIXA)

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 149278)

    End Select

    Exit Function
    
End Function

Public Sub Cancela_Venda(sRede As String, sNSU As String, sFim As String, dValorTotal As Double)

Dim lErro As Long

On Error GoTo Erro_Cancela_Venda

    'Envia cancelamento da venda
    'Abre o arquivo Temporário
    Open Arquivo_Tef_Temp_Prop For Append As #10
    
    'Confirmação de venda e impressão
    Print #10, "000-000 = NCN"
    Print #10, "001-000 = " & CStr(glNumProxIdentificacao)
    Print #10, "003-000 = " & dValorTotal * 100
    Print #10, "010-000 = " & sRede
    Print #10, "012-000 = " & sNSU
    Print #10, "027-000 = " & sFim
    Print #10, "999-999 = 0"
    
    Close #10
     
    'renomeando os arquivos
    Name Arquivo_Tef_Temp_Prop As Arquivo_Tef_Req_Prop
       
    'Faz uso da Função da Afrac
    lErro = AFRAC_CancelarVinculado()
    If lErro <> SUCESSO Then
        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Cancela Vinculado")
        If lErro <> SUCESSO Then gError 109567
    End If
    
    Exit Sub

Erro_Cancela_Venda:
    
    Select Case gErr
        
        Case 109567
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 149279)

    End Select

    Exit Sub
    
End Sub

Function Sessao_Executa_Suspensao() As Long
'Função que Vai Executar o Fechamento da Sessão

Dim lErro As Long
Dim lSequencial As Long
Dim lTransacao As Long

On Error GoTo Erro_Sessao_Executa_Suspensao

    'Abre a Transação
    lErro = CF_ECF("Caixa_Transacao_Abrir", lSequencial)
    If lErro <> SUCESSO Then gError 99829

    'Função que Executa o Encerramento da Sessão
    lErro = CF_ECF("Sessao_Executa_Suspensao_EmTrans", lSequencial)
    If lErro <> SUCESSO Then gError 99830

    'Função que Executa o Encerramento da Sessão
    lErro = CF_ECF("Caixa_Transacao_Fechar", lSequencial)
    If lErro <> SUCESSO Then gError 99831
    

    If giOrcamentoECF = CAIXA_SO_ORCAMENTO Then

        'Muda a Caption do ECF para indicar que a Sessão está Suspensa
        GL_objMDIForm.Caption = "SESSAO_STATUS : Sessão Suspensa"
    

    Else

        'Muda a Caption do ECF para indicar que a Sessão está Suspensa
        GL_objMDIForm.Caption = "CAIXA_STATUS : Caixa Aberta / SESSAO_STATUS : Sessão Suspensa"
   
    
    End If

    Sessao_Executa_Suspensao = SUCESSO

    Exit Function

Erro_Sessao_Executa_Suspensao:

    Sessao_Executa_Suspensao = gErr

    Select Case gErr

        Case 99829 To 99831, 204260
            'Erros Tratados Dentro da Função Chamadora

        Case 105907
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, "Sessao", "StatusSessao", NOME_ARQUIVO_CAIXA)

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 149280)

    End Select
    
'    lSequencial = glSeqTransacaoAberta
            
    'Rollback na transação
    Call CF_ECF("Caixa_Transacao_Rollback", glTransacaoPAFECF)

    Exit Function

End Function

Function Sessao_Executa_Suspensao_EmTrans(lSequencial As Long) As Long
'Função que Executa a Suspenção da Sessão em Transação

Dim lErro As Long
Dim sLog As String
Dim objMovimentoCaixa As New ClassMovimentoCaixa
Dim colRegistro As New Collection

On Error GoTo Erro_Sessao_Executa_Suspensao_EmTrans

    'Guarda os Dados na Memória
    lErro = CF_ECF("MovimentoCaixa_Move_Dados_Memoria", MOVIMENTO_CAIXA_SESSAO_SUSPENSAO, objMovimentoCaixa)
    If lErro <> SUCESSO Then gError 99833

    'Guarda o Sequencial em objMovimentoCaixa
    objMovimentoCaixa.lSequencial = lSequencial

    'Guarda o Codigo do Novo Operador
    objMovimentoCaixa.iCodOperador = giCodOperador
    
    Call CF_ECF("MovimentoCaixa_Gera_Log", colRegistro, objMovimentoCaixa)
    
    'Função que Grava o Arquivo de Movimento Caixa
    lErro = CF_ECF("MovimentoCaixaECF_Grava", colRegistro)
    If lErro <> SUCESSO Then gError 99834
    
    Set colRegistro = New Collection
    
    'Indica o Novo status da Sessão Suspensa
    giStatusSessao = SESSAO_SUSPENSA
    
    lErro = WritePrivateProfileString("Sessao", "StatusSessao", CStr(giStatusSessao), NOME_ARQUIVO_CAIXA)
    If lErro = 0 Then gError 117517
    
    'funcao que cria/altera a chave e grava no caixaconfig.ini
    lErro = CF_ECF("CaixaConfig_Chave")
    If lErro <> SUCESSO Then gError 204261
    
    'Adcionar o objMovimentos na Coleção Global
    gcolMovimentosCaixa.Add objMovimentoCaixa
    
    Sessao_Executa_Suspensao_EmTrans = SUCESSO
    
    Exit Function
    
Erro_Sessao_Executa_Suspensao_EmTrans:

    Sessao_Executa_Suspensao_EmTrans = gErr

    Select Case gErr

        Case 99833 To 99834, 117537, 204261

        Case 117517
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, "Sessao", "StatusSessao", NOME_ARQUIVO_CAIXA)
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 149281)

    End Select

    Exit Function

End Function

Function Sessao_Executa_Termino_Susp() As Long
'Função que Vai Executar o Termino da suspensao  da Sessão

Dim lErro As Long
Dim lSequencial As Long
Dim objOperador As New ClassOperador
Dim iCodGerente As Integer

On Error GoTo Erro_Sessao_Executa_Termino_Susp

    'Chama a Tela Modal de Login ( Tela Modal só Retornar depois que for Digitada algo )
    Call Chama_TelaECF_Modal("OperadorLogin", objOperador, LOGIN_OPERADOR_SUSPENSO)
    If objOperador.iCodigo = 0 Then gError ERRO_SEM_MENSAGEM
    
    'Abre a Transação
    lErro = CF_ECF("Caixa_Transacao_Abrir", lSequencial)
    If lErro <> SUCESSO Then gError 117539
        
    
    'Verifica Se o Operador Mudou, Verifica-se que é Gerente
    If giCodOperador <> objOperador.iCodigo Then

'        dtData = gdtDataHoje
        
        lSequencial = lSequencial + 1
        
        'Gera Leitura X, para o Ultimo Operador que Estava Locado, dentro da Função busca por giCodOperador
        lErro = CF_ECF("Caixa_Executa_LeituraX_EmTrans", lSequencial)
        If lErro <> SUCESSO Then gError 99835
        
        lSequencial = lSequencial + 1
        
        'Função que Faz o Encerramento de Sessão, para o Ultimo Operador que Estava Locado, dentro da Função busca por giCodOperador
        lErro = CF_ECF("Operacoes_Sessao_Executa_Encerramento_EmTrans", lSequencial, iCodGerente)
        If lErro <> SUCESSO Then gError 99836
        
        'Codigo do Novo Operador, para a Volta da Suspenção só pode ser o proprio ou o Gerente
        giCodOperador = objOperador.iCodigo
            
    End If
    
    'Incrementa o Sequencial
    lSequencial = lSequencial + 1
    
    'Função que Faz a Abertura de Sessão
    lErro = CF_ECF("Sessao_Executa_Abertura_EmTrans", lSequencial)
    If lErro <> SUCESSO Then gError 99837

    'Função que Executa o Encerramento da Sessão
    lErro = CF_ECF("Caixa_Transacao_Fechar", lSequencial)
    If lErro <> SUCESSO Then gError 117541


    If giOrcamentoECF = CAIXA_SO_ORCAMENTO Then


        'Indica o Nome do Operador dessa Sessão.
        GL_objMDIForm.Caption = "SESSAO_STATUS :  Sessão Aberta " & " / OPERADOR : " & objOperador.sNome

    Else

        'Indica o Nome do Operador dessa Sessão.
        GL_objMDIForm.Caption = "CAIXA_STATUS : Caixa Aberta / SESSAO_STATUS :  Sessão Aberta  / OPERADOR : " & objOperador.sNome

    End If
    
    Sessao_Executa_Termino_Susp = SUCESSO

    Exit Function

Erro_Sessao_Executa_Termino_Susp:

    Sessao_Executa_Termino_Susp = gErr

    Select Case gErr

        Case 105908
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, "Sessao", "CodOperador", NOME_ARQUIVO_CAIXA)

        Case 105909
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, "Sessao", "StatusSessao", NOME_ARQUIVO_CAIXA)

        Case 117539 To 117541, 204262, ERRO_SEM_MENSAGEM

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 149282)

    End Select
    
'    lSequencial = glSeqTransacaoAberta
            
    'Rollback na transação
    Call CF_ECF("Caixa_Transacao_Rollback", glTransacaoPAFECF)

    Exit Function

End Function

'Function Sessao_Executa_Termino_Susp_EmTrans(lSequencial As Long, objOperador As ClassOperador) As Long
''função que termina a suspensao de uma sessao
'
'Dim lErro As Long
'Dim sStatusSessao As String
'Dim sStatusCaixa  As String
'Dim sLog As String
'Dim objMovimentoCaixa As New ClassMovimentoCaixa
'Dim colRegistro As New Collection
''Dim dtData As Date
'Dim iCodGerente As Integer
'
'On Error GoTo Erro_Sessao_Executa_Termino_Susp_EmTrans
'
'
'    'Chama a Tela Modal de Login ( Tela Modal só Retornar depois que for Digitada algo )
'    Call Chama_TelaECF_Modal("OperadorLogin", objOperador, LOGIN_OPERADOR_SUSPENSO)
'
'    'Verifica Se o Operador Mudou, Verifica-se que é Gerente
'    If giCodOperador <> objOperador.iCodigo Then
'
''        dtData = gdtDataHoje
'
'        lSequencial = lSequencial + 1
'
'        'Gera Leitura X, para o Ultimo Operador que Estava Locado, dentro da Função busca por giCodOperador
'        lErro = CF_ECF("Caixa_Executa_LeituraX_EmTrans", lSequencial)
'        If lErro <> SUCESSO Then gError 99835
'
'        lSequencial = lSequencial + 1
'
'        'Função que Faz o Encerramento de Sessão, para o Ultimo Operador que Estava Locado, dentro da Função busca por giCodOperador
'        lErro = CF_ECF("Operacoes_Sessao_Executa_Encerramento_EmTrans", lSequencial, iCodGerente)
'        If lErro <> SUCESSO Then gError 99836
'
'        'Codigo do Novo Operador, para a Volta da Suspenção só pode ser o proprio ou o Gerente
'        giCodOperador = objOperador.iCodigo
'
'    End If
'
'    'Incrementa o Sequencial
'    lSequencial = lSequencial + 1
'
'    'Função que Faz a Abertura de Sessão
'    lErro = CF_ECF("Sessao_Executa_Abertura_EmTrans", lSequencial)
'    If lErro <> SUCESSO Then gError 99837
'
'
'    Sessao_Executa_Termino_Susp_EmTrans = SUCESSO
'
'    Exit Function
'
'Erro_Sessao_Executa_Termino_Susp_EmTrans:
'
'    Sessao_Executa_Termino_Susp_EmTrans = gErr
'
'    Select Case gErr
'
'        Case 99835 To 99837
'
'        Case Else
'            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 149283)
'
'    End Select
'
'    Exit Function
'
'End Function

Function Sessao_Executa_Abertura_EmTrans(lSequencial As Long, Optional iCodGerente As Integer) As Long
'Função Que Abre a Abertura de sessão em Transação

Dim lErro As Long
Dim objMovimentoCaixa As New ClassMovimentoCaixa
Dim sCodOperador As String
Dim sLog As String
Dim colRegistro As New Collection

On Error GoTo Erro_Sessao_Executa_Abertura_EmTrans

    'Muda o Status da Sessão
    giStatusSessao = SESSAO_ABERTA

    'Guarda no obj os Dados que serão utiliazados para gerar o movimento de caixa correspondente
    lErro = CF_ECF("MovimentoCaixa_Move_Dados_Memoria", MOVIMENTO_CAIXA_SESSAO_ABERTURA, objMovimentoCaixa)
    If lErro <> SUCESSO Then gError 99845

    'Guarda no objmovimentosCaixa o Sequencial
    objMovimentoCaixa.lSequencial = lSequencial
    
    'Se o operador for Gerente
    objMovimentoCaixa.iGerente = iCodGerente
    
    Call CF_ECF("MovimentoCaixa_Gera_Log", colRegistro, objMovimentoCaixa)
    
    'Grava as Informações no Arquivo
    lErro = CF_ECF("MovimentoCaixaECF_Grava", colRegistro)
    If lErro <> SUCESSO Then gError 99846
    
    Set colRegistro = New Collection
    
    'Guarda o Codigo do Operador no Arquivo de Configuração
    sCodOperador = CStr(giCodOperador)

    lErro = WritePrivateProfileString("Sessao", "CodOperador", sCodOperador, NOME_ARQUIVO_CAIXA)
    If lErro = 0 Then gError 117518
    
    lErro = WritePrivateProfileString("Sessao", "StatusSessao", CStr(giStatusSessao), NOME_ARQUIVO_CAIXA)
    If lErro = 0 Then gError 117519
    
    'funcao que cria/altera a chave e grava no caixaconfig.ini
    lErro = CF_ECF("CaixaConfig_Chave")
    If lErro <> SUCESSO Then gError 204263
    
    'Adcionar o objMovimentos na Coleção Global
    gcolMovimentosCaixa.Add objMovimentoCaixa
    
    Sessao_Executa_Abertura_EmTrans = SUCESSO

    Exit Function

Erro_Sessao_Executa_Abertura_EmTrans:

    Sessao_Executa_Abertura_EmTrans = gErr

    Select Case gErr

        Case 99845, 99846, 204263

        Case 117518
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, "Sessao", "CodOperador", NOME_ARQUIVO_CAIXA)

        Case 117519
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, "Sessao", "StatusSessao", NOME_ARQUIVO_CAIXA)

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 149284)

    End Select

    Exit Function

End Function

Function Operacoes_Sessao_Executa_Encerramento_EmTrans(lSequencial As Long, Optional iCodGerente As Integer) As Long
'Função que Excuta o Encerramento da Sessão

Dim lErro As Long
Dim objMovimentoCaixa As New ClassMovimentoCaixa
Dim vbMsgRes As VbMsgBoxResult
Dim sLog As String
Dim colRegistro As New Collection
Dim sStatusCaixa As String

On Error GoTo Erro_Operacoes_Sessao_Executa_Encerramento_EmTrans

    
        'Guarda os Dados na Memória
        lErro = CF_ECF("MovimentoCaixa_Move_Dados_Memoria", MOVIMENTO_CAIXA_SESSAO_FECHAMENTO, objMovimentoCaixa)
        If lErro <> SUCESSO Then gError 99841
    
        'Guarda o Sequencial em objMovimentoCaixa
        objMovimentoCaixa.lSequencial = lSequencial
    
        'Guarda o Codigo do Gerente
        objMovimentoCaixa.iGerente = iCodGerente
        
        Call CF_ECF("MovimentoCaixa_Gera_Log", colRegistro, objMovimentoCaixa)
        
        'Função que Grava o Arquivo de Movimento Caixa
        lErro = CF_ECF("MovimentoCaixaECF_Grava", colRegistro)
        If lErro <> SUCESSO Then gError 99842
        
        Set colRegistro = New Collection
        
        lSequencial = lSequencial + 1
        
        If giOrcamentoECF <> CAIXA_SO_ORCAMENTO Then

        
'            'Função que Executa a Leitura X
'            lErro = CF_ECF("Caixa_Executa_LeituraX_EmTrans", lSequencial, iCodGerente)
'            If lErro <> SUCESSO Then gError 99843
        
'            'Pergunta se Deseja Efetuar a Sangria
'            vbMsgRes = Rotina_AvisoECF(vbYesNo, AVISO_DESEJA_FAZER_SANGRIA_COMPLETA, giCodCaixa)
'
'            'Se nao então sai da Função
'            If vbMsgRes = vbYes Then
'
'                lSequencial = lSequencial + 1
'
'               'Função que Executa a Sangria
'                lErro = Caixa_Executa_Sangria_Completa(lSequencial)
'                If lErro <> SUCESSO Then gError 99844
'
'            End If
        
        
        End If
    
        
        'Indica o Novo Status da Sessão
        giStatusSessao = SESSAO_ENCERRADA
        giCodOperador = 0
        
        lErro = WritePrivateProfileString("Sessao", "StatusSessao", CStr(giStatusSessao), NOME_ARQUIVO_CAIXA)
        If lErro = 0 Then gError 117520
        
        lErro = WritePrivateProfileString("Sessao", "CodOperador", "0", NOME_ARQUIVO_CAIXA)
        If lErro = 0 Then gError 117521
        
        'Verifica o Status da Sessão
        If giStatusCaixa = 0 Then
            sStatusCaixa = "Caixa Fechada"
        ElseIf giStatusCaixa = 1 Then
            sStatusCaixa = "Caixa Aberta"
        End If
    
        'Indica o Nome do Operador dessa Sessão.
        GL_objMDIForm.Caption = "CAIXA_STATUS : " & sStatusCaixa & " / SESSAO_STATUS :  Sessão Fechada "
        
        
        'funcao que cria/altera a chave e grava no caixaconfig.ini
        lErro = CF_ECF("CaixaConfig_Chave")
        If lErro <> SUCESSO Then gError 204264
        
        'Adcionar o objMovimentos na Coleção Global
        gcolMovimentosCaixa.Add objMovimentoCaixa
    
    Operacoes_Sessao_Executa_Encerramento_EmTrans = SUCESSO

    Exit Function

Erro_Operacoes_Sessao_Executa_Encerramento_EmTrans:

    Operacoes_Sessao_Executa_Encerramento_EmTrans = gErr

    Select Case gErr

        Case 99841 To 99844, 204264

        Case 117520
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, "Sessao", "StatusSessao", NOME_ARQUIVO_CAIXA)

        Case 117521
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, "Sessao", "CodOperador", NOME_ARQUIVO_CAIXA)

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 149285)

    End Select

    Exit Function

End Function

Function Caixa_Executa_Fechamento() As Long
'Função que Executa o Fechamento do Caixa

Dim lErro As Long
Dim lSequencial As Long
Dim iCodGerente As Integer
Dim objOperador As New ClassOperador
Dim sNomeArq As String
'Dim lSeqArq As Long
Dim sRetorno As String
Dim lTamanho As Long
Dim sRet As String
Dim sNomeArq1 As String
Dim sStatusCaixa As String
Dim sData As String
Dim vbMsgRes As VbMsgBoxResult
Dim lIntervaloTrans As Long
Dim objObject As Object
Dim lSequencialOrc As Long
Dim lNumero As Long

On Error GoTo Erro_Caixa_Executa_Fechamento

    If giOrcamentoECF <> CAIXA_SO_ORCAMENTO Then


        If giDebug = 1 Then MsgBox ("inicia Caixa_Executa_Fechamento")
    
        'funcao que verifica se o caixaconfig.ini foi alterado
        lErro = CF_ECF("CaixaConfig_Verifica_Chave")
        If lErro <> SUCESSO Then gError 204249
                    
        If Not AFRAC_ImpressoraCFe(giCodModeloECF) Then
        
            'Se for Necessário a autorização do Gerente para o Fechamento do Caixa
            If gobjLojaECF.iGerenteAutoriza = AUTORIZACAO_GERENTE Then
        
                'Chama a Tela de Senha
                Call Chama_TelaECF_Modal("OperadorLogin", objOperador, LOGIN_APENAS_GERENTE)
        
                'Sai de Função se a Tela de Login não Retornar ok
                If giRetornoTela <> vbOK Then gError 107631
        
                'Se o Operador for o Gerente
                iCodGerente = objOperador.iCodigo
        
            End If
        
        End If
        
'        If giOrcamentoECF <> CAIXA_SO_ORCAMENTO Then
        
    '        lTamanho = 15
    '        sRetorno = String(lTamanho, 0)
    '
    '        'pega o último sequencial do arquivo
    '        Call GetPrivateProfileString(APLICACAO_ARQUIVO, "SeqArquivo", CONSTANTE_ERRO, sRetorno, lTamanho, NOME_ARQUIVO_CAIXA)
    '        If sRetorno <> String(lTamanho, 0) Then lSeqArq = StrParaLong(sRetorno)
            
            'Função que Abre a Transação
            lErro = CF_ECF("Caixa_Transacao_Abrir", lSequencial)
            If lErro <> SUCESSO Then gError 107575
        
            If glConexaoOrcPAF <> 0 Then
    
                'Abre a Transação
                Call CF_ECF("Caixa_Transacao_Abrir_Orc", lSequencialOrc)
        
            End If
        
            If giDebug = 1 Then MsgBox ("59")
    
            'Função que Executa Fechamento do Caixa
            lErro = CF_ECF("Caixa_Executa_Fechamento_EmTrans", lSequencial, iCodGerente)
            If lErro <> SUCESSO And lErro <> 99760 Then gError 107576
            
            
            If giDebug = 1 Then MsgBox ("Realizou Caixa_Executa_Fechamento_EmTrans")
            
            If glConexaoOrcPAF <> 0 Then
    
                'Fecha a Transação
                lErro = CF_ECF("Caixa_Transacao_Fechar_Orc", lSequencialOrc)
                If lErro <> SUCESSO Then gError 204669
            
            End If
            
            'Função que Encerra a Transação
            lErro = CF_ECF("Caixa_Transacao_Fechar", lSequencial)
            If lErro <> SUCESSO Then gError 107577
            
            If giDebug = 1 Then MsgBox ("73")
            
'        End If
            
'        If giOrcamentoECF = CAIXA_SO_ORCAMENTO Then
'
'            'Verifica se Existe um Sessão aberta
'            If giStatusSessao = SESSAO_ABERTA Or giStatusSessao = SESSAO_SUSPENSA Then
'
'                'Envia aviso perguntando se deseja executar o fechamamento da sessao
'                vbMsgRes = Rotina_AvisoECF(vbYesNo, AVISO_FECHAR_SESSAO_ABERTA)
'
'                'Se nao então sai da Função
'                If vbMsgRes = vbNo Then gError 105902
'
'                'Indica o Novo Status da Sessão
'                giStatusSessao = SESSAO_ENCERRADA
'                giCodOperador = 0
'
'                lErro = WritePrivateProfileString("Sessao", "StatusSessao", CStr(giStatusSessao), NOME_ARQUIVO_CAIXA)
'                If lErro = 0 Then gError 117520
'
'                lErro = WritePrivateProfileString("Sessao", "CodOperador", "0", NOME_ARQUIVO_CAIXA)
'                If lErro = 0 Then gError 117521
'
'            End If
'        End If
                
'        If giDebug = 1 Then MsgBox ("74")
'
'        'Indica o Nome do Operador dessa Sessão.
'        GL_objMDIForm.Caption = "CAIXA_STATUS : Caixa Fechado"
'
'        'Caixa Muda o Status
'        giStatusCaixa = STATUS_CAIXA_FECHADO
'
'        'Transforma de Inteiro para String
'        sStatusCaixa = CStr(giStatusCaixa)
'
'        'Função que Grava no Arquivo de Configuração de Caixa o Novo Status do Caixa
'        lErro = WritePrivateProfileString("Caixa", "StatusCaixa", sStatusCaixa, NOME_ARQUIVO_CAIXA)
'        If lErro = 0 Then gError 117522
'
'        If giDebug = 1 Then MsgBox ("Gravou StatusCaixa = " & sStatusCaixa)
'
'        'funcao que cria/altera a chave e grava no caixaconfig.ini
'        lErro = CF_ECF("CaixaConfig_Chave")
'        If lErro <> SUCESSO Then gError 204265
'
'
'        sData = gdtUltimaReducao
'
'        If giDebug = 1 Then MsgBox ("75")
'
'        'Função que Grava no Arquivo de Configuração de Caixa o Novo Status do Caixa
'        lErro = WritePrivateProfileString("ECF", "DataUltimaReducaoZ", sData, NOME_ARQUIVO_CAIXA)
'        If lErro = 0 Then gError 117523
'
'        If giDebug = 1 Then MsgBox ("76")
'
'        'funcao que cria/altera a chave e grava no caixaconfig.ini
'        lErro = CF_ECF("CaixaConfig_Chave")
'        If lErro <> SUCESSO Then gError 204295
'
'        lErro = CF_ECF("Transmitir_Arquivo")
'        If lErro <> SUCESSO Then gError 112619
'
'
'        If giDebug = 1 Then MsgBox ("77")
                
    '         If Len(gobjLojaECF.sFTPURL) > 0 Then
    '
    '            gobjLojaECF.dtData = gdtDataHoje
    '
    '            Set objObject = gobjLojaECF
    '
    '            lErro = CF_ECF("Rotina_FTP_Envio_Caixa", objObject, 2)
    '            If lErro <> SUCESSO Then gError 133399
    '
    '        End If
            
    End If
        
    Caixa_Executa_Fechamento = SUCESSO

    Exit Function

Erro_Caixa_Executa_Fechamento:

    Call GetPrivateProfileString(APLICACAO_ECF, "DataUltimaReducaoZ", CONSTANTE_ERRO, sRetorno, lTamanho, NOME_ARQUIVO_CAIXA)
    If sRetorno <> String(lTamanho, 0) Then gdtUltimaReducao = StrParaDate(sRetorno)
    
    Caixa_Executa_Fechamento = gErr

    Select Case gErr

        Case 105902, 107575, 107576, 107577, 107631, 112619, 126151, 133399, 204249, 204265, 204295, 204668, 204669, 210437
        
        Case 117522
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, "Caixa", "StatusCaixa", NOME_ARQUIVO_CAIXA)
        
        Case 117523
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, "ECF", "DataUltimaReducaoZ", NOME_ARQUIVO_CAIXA)
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 149286)

    End Select
    
'    lSequencial = glSeqTransacaoAberta
            
    If giOrcamentoECF <> CAIXA_SO_ORCAMENTO Then
            
        'Rollback na transação
        Call CF_ECF("Caixa_Transacao_Rollback", glTransacaoPAFECF)
        If glConexaoOrcPAF <> 0 Then Call CF_ECF("Caixa_Transacao_Rollback", glTransacaoOrcPAFECF)
        
    End If


    Exit Function

End Function

Function Caixa_Executa_Fechamento_EmTrans(lSequencial As Long, iCodGerente As Integer) As Long
'Funçào que Executa o Fechamento em Transação

Dim sRet As String
Dim sReg As String
Dim vbMsg As VbMsgBoxResult
Dim bOk As Boolean
Dim objAdmMeioPagto As ClassAdmMeioPagto
Dim lErro As Long
Dim objMovimentoCaixa As New ClassMovimentoCaixa
Dim vbMsgRes As VbMsgBoxResult
Dim sStatusCaixa As String
Dim sLog As String
Dim sRetorno As String
Dim sRetorno1 As String
Dim sRetorno2 As String
Dim sRetorno3 As String
Dim sRetorno4 As String
Dim sRetorno5 As String
Dim iPosInicio As Integer
Dim asReg() As String
Dim iImprime As Integer
Dim iPos As Integer
Dim sTipo As String
Dim sNomeArq As String
Dim colRegistro As New Collection
Dim sData As String
Dim iIndice As Integer
Dim sRegistro As String
Dim lTamanho As Long
Dim objLojaArqFisMestre As New ClassLojaArqFisMestre
Dim colLojaArqFisAnalitico As New Collection
Dim objUltimaReducao As New ClassUltimaReducao
Dim sCOOInicial1 As String
Dim sCOOFinal1 As String
'Dim dtData As Date
Dim iRZPendente As Integer
Dim dtUltimaReducaoECF As Date
Dim sDataHora As String
Dim dtDataECF As Date
Dim dtHoraECF As Date
Dim dtDataUltimoMovimento As Date


On Error GoTo Erro_Caixa_Executa_Fechamento_EmTrans
    
    If giOrcamentoECF <> CAIXA_SO_ORCAMENTO Then
    
        If giDebug = 1 Then MsgBox ("60")
        
        
'        lErro = CF_ECF("MovimentoCaixa_Le", lNumero, dtData)
'        If lErro <> SUCESSO Then gError 210437
        
        
        'Guarga na Memoria os Dados que Serão Usados no Movimento de Caixa
'        lErro = CF_ECF("MovimentoCaixa_Move_Dados_Memoria", MOVIMENTO_CAIXA_FECHAMENTO, objMovimentoCaixa)
'        If lErro <> SUCESSO Then gError 107578
    
        'Verifica se Existe um Sessão aberta
        If giStatusSessao = SESSAO_ABERTA Or giStatusSessao = SESSAO_SUSPENSA Then
            
            If Not AFRAC_ImpressoraCFe(giCodModeloECF) Then

    '            'se a data do ultimo registro de movimento caixa for a data de hoje e a sessao estiver aberta ==> pergunta se quer fechar a sessao
    '            If dtData = gdtDataHoje Then
    
    '            lErro = AFRAC_RZPendenteDiaAnterior(iRZPendenteDiaAnterior)
    '            If lErro <> SUCESSO Then
    '                lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Reducao Z Pendente Dia Anteior")
    '                gError 210919
    '            End If
                
                lErro = AFRAC_DataReducao(dtUltimaReducaoECF)
                lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Data Ultima Reducao Z")
                If lErro <> SUCESSO Then gError 214017
    
                
                lErro = AFRAC_RZPendente(iRZPendente)
                If lErro <> SUCESSO Then
                    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Reducao Z Pendente")
                    gError 214009
                End If
                
                'le a data/hora do ecf
                lErro = AFRAC_LerInformacaoImpressora("017", sDataHora)
                lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Informação Impressora")
                If lErro <> SUCESSO Then gError 207235
                
                dtDataECF = StrParaDate(left(sDataHora, 2) & "/" & Mid(sDataHora, 3, 2) & "/" & Mid(sDataHora, 5, 2))
                
                dtHoraECF = StrParaDate(Mid(sDataHora, 7, 2) & ":" & Mid(sDataHora, 9, 2) & ":" & right(sDataHora, 2))
                
                lErro = AFRAC_DataMovimentoProximaReducao(sData)
                If lErro <> SUCESSO Then
                    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "DataMovimentoProximaReducao")
                    If lErro <> SUCESSO Then gError 214024
                End If
                
                dtDataUltimoMovimento = StrParaDate(left(sData, 2) & "/" & Mid(sData, 3, 2) & "/" & right(sData, 4))
                
                
                
                'se nao tem RZ Pendente do dia anterior e a data da Ultima Reducao Z processada pelo sistema igual ao do ECF ==> nao necessariamente precisa fechar a sessao
    '            If iRZPendenteDiaAnterior = 0 And dtUltimaReducaoECF = gdtUltimaReducao Then
    '            If dtUltimaReducaoECF = gdtUltimaReducao Then
                'se tem RZPendente e a data do ecf = data do ultimo movimento ou se a data do ecf = data do ultimo movimento + 1 e a hora < 2
                If iRZPendente = 1 And (dtDataECF = dtDataUltimoMovimento Or (dtDataECF = dtDataUltimoMovimento + 1 And Hour(dtHoraECF) < 2)) Then
    
                    'Envia aviso perguntando se deseja executar o fechamamento da sessao
                    vbMsgRes = Rotina_AvisoECF(vbYesNo, AVISO_FECHAR_SESSAO_ABERTA)
    
                    'Se nao então sai da Função
                    If vbMsgRes = vbNo Then gError 107632
    
                End If
            
            End If
            
            If giDebug = 1 Then MsgBox ("61")
            
            
            'Executa o Fechamento da SESSÃO
            lErro = CF_ECF("Operacoes_Sessao_Executa_Encerramento_EmTrans", lSequencial, iCodGerente)
            If lErro <> SUCESSO Then gError 107579
    
    
            If giDebug = 1 Then MsgBox ("62")
    
            'Incrementa o Sequencial
            lSequencial = lSequencial + 1
    
        End If
        
        
        
'        'executa a sangria de todos boletos PosTef
'        lErro = Caixa_Executa_Sangria_Boleto_PosTef(lSequencial)
'        If lErro <> SUCESSO Then gError 105430
        
        If giDebug = 1 Then MsgBox ("63")
        
    '    If giCodModeloECF <> 1 And giCodModeloECF <> 2 And giCodModeloECF <> 3 And giCodModeloECF <> 5 Then
        
        
'        lErro = AFRAC_COOInicialFinal(sCOOInicial1, sCOOFinal1)
'        If lErro <> SUCESSO Then
'            lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Retorna COO Inicial Final")
'            gError 210919
'        End If
            
        If Not AFRAC_ImpressoraCFe(giCodModeloECF) Then
        

            'Função que Referenciar a Função da Afrac que Vai Executar a ReduçãoZ e fica a Cargo do ECF fazer a Verificação se pode ou não fazer a Redução naquela Data passada
            lErro = CF_ECF("Caixa_Executa_ReducaoZ_EmTrans", lSequencial, iCodGerente)
            If lErro <> SUCESSO Then gError 107571
    
        Else
        
            If giDebug = 1 Then MsgBox ("74")
                    
            'Indica o Nome do Operador dessa Sessão.
            GL_objMDIForm.Caption = "CAIXA_STATUS : Caixa Fechado"
            
            'Caixa Muda o Status
            giStatusCaixa = STATUS_CAIXA_FECHADO
        
            'Transforma de Inteiro para String
            sStatusCaixa = CStr(giStatusCaixa)
        
            'Função que Grava no Arquivo de Configuração de Caixa o Novo Status do Caixa
            lErro = WritePrivateProfileString("Caixa", "StatusCaixa", sStatusCaixa, NOME_ARQUIVO_CAIXA)
            If lErro = 0 Then gError ERRO_SEM_MENSAGEM
        
            If giDebug = 1 Then MsgBox ("Gravou StatusCaixa = " & sStatusCaixa)
        
            'funcao que cria/altera a chave e grava no caixaconfig.ini
            lErro = CF_ECF("CaixaConfig_Chave")
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        
            If giDebug = 1 Then MsgBox ("76")
                
            'funcao que cria/altera a chave e grava no caixaconfig.ini
            lErro = CF_ECF("CaixaConfig_Chave")
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
                
            lErro = CF_ECF("Transmitir_Arquivo_EmTrans")
            If lErro <> SUCESSO And lErro <> 117565 Then gError ERRO_SEM_MENSAGEM
        
        End If
    
        If giDebug = 1 Then MsgBox ("65")
    
        lSequencial = lSequencial + 1
        
    '    End If
        
        'Guarda o Sequencial em ObjMovimentos de Caixa
        objMovimentoCaixa.lSequencial = lSequencial
        
    '    If dtData = gdtDataHoje Then
    '
    '        If giDebug = 1 Then MsgBox ("66")
    '
    '        lErro = AFRAC_FechaDia
    '        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Fechamento do Dia")
    '        If lErro <> SUCESSO Then gError 112055
    '
    '        If giDebug = 1 Then MsgBox ("67")
    '
    '    End If
        
'        If giDebug = 1 Then MsgBox ("68")
'
'    '    lErro = AFRAC_Carrega_Dados_MestreAnalitico(objLojaArqFisMestre, colLojaArqFisAnalitico)
'    '    If lErro <> SUCESSO Then gError 133665
'
'        If giDebug = 1 Then MsgBox ("69")
'
'        lErro = AFRAC_Carrega_Dados_UltimaReducao(objUltimaReducao, objLojaArqFisMestre, colLojaArqFisAnalitico)
'        If lErro <> SUCESSO Then gError 133665
'
'        gdtUltimaReducao = objUltimaReducao.dtDataMovimento
'
'        If giDebug = 1 Then MsgBox ("70")
'
'        lTamanho = 15
'        sRetorno = String(lTamanho, 0)
'
'
'        'pega o COO da ultima Reducao Z
'        Call GetPrivateProfileString(APLICACAO_ECF, "COOultRZ", CONSTANTE_ERRO, sRetorno, lTamanho, NOME_ARQUIVO_CAIXA)
'        If sRetorno = String(lTamanho, 0) Then gError 214011
'
'        objLojaArqFisMestre.lCOOIni = StrParaLong(sRetorno) + 1
'
'
'        lErro = AFRAC_COOInicialFinal(sCOOInicial1, sCOOFinal1)
'        If lErro <> SUCESSO Then
'            lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Retorna COO Inicial Final")
'            gError 210919
'        End If
'
'        objLojaArqFisMestre.lCOOFim = StrParaLong(sCOOFinal1)
'
'        'Atualiza o arquivo
'        lErro = WritePrivateProfileString(APLICACAO_ECF, "COOultRZ", sCOOFinal1, NOME_ARQUIVO_CAIXA)
'        If lErro Then gError 214012
'
'
'        Call CF_ECF("FechamentoCaixa_Gera_Log", colRegistro, objMovimentoCaixa, objLojaArqFisMestre, colLojaArqFisAnalitico, objUltimaReducao)
'
'        If giDebug = 1 Then MsgBox ("71")
'
'        'Grava as Informações no Arquivo
'        lErro = CF_ECF("MovimentoCaixaECF_Grava", colRegistro)
'        If lErro <> SUCESSO Then gError 107580
'
'        If giDebug = 1 Then MsgBox ("72")
'
'        lErro = CF_ECF("Requisito_X")
'        If lErro <> SUCESSO Then gError 210033
'
'        'Adicionar o objMovimentos na Coleção Global
'        gcolMovimentosCaixa.Add objMovimentoCaixa
        
    '    'Verifica o arquivo Ativo
    '    sRet = Dir(ARQUIVO_TEF_ATIVO, vbNormal)
    '    'TEF não está ativo
    '    If sRet = "" Then gError 99760
    '
    '    'Se tiver visanet-->chama tela de fechamento de lote
    '    For Each objAdmMeioPagto In gcolAdmMeioPagto
    '        If objAdmMeioPagto.iRede = REDE_VISANET Then
    '            '****Fechamento dos Lotes**********
    '
    '            bOk = False
    '
    '            'Adiciona na variável global
    '            glNumProxIdentificacao = glNumProxIdentificacao + 1
    '
    '            'Atualiza o arquivo
    '            lErro = WritePrivateProfileString(APLICACAO_ECF, "NumProxIdent", CStr(glNumProxIdentificacao), NOME_ARQUIVO_CAIXA)
    '            If lErro Then gError 117524
    '
    '            'Abre o arquivo Temporário
    '            Open ARQUIVO_TEF_TEMP For Append As #1
    '
    '            'Informa dados de pagamento
    '            Print #1, "000-000 = ADM"
    '            Print #1, "001-000 = " & CStr(glNumProxIdentificacao)
    '            Print #1, "999-999 = 0"
    '
    '            Close #1
    '
    '            'renomeando os arquivos
    '            Name ARQUIVO_TEF_TEMP As ARQUIVO_TEF_REQ
    '
    '            'Verifica o arquivo Ativo
    '            sRet = Dir(ARQUIVO_TEF_ATIVO, vbNormal)
    '            'TEF não está ativo
    '            If sRet = "" Then gError 99760
    '
    '            Do
    '                'Verifica o arquivo intpos.001
    '                sRet = Dir(ARQUIVO_TEF_RESP2, vbNormal)
    '                If sRet <> "" Then
    '
    '                    'Abre o arquivo de resposta do gerenciador
    '                    Open ARQUIVO_TEF_RESP2 For Input As #1
    '
    '                    'Até chegar ao fim do arquivo
    '                    Do While Not EOF(1)
    '
    '                        'Busca o próximo registro do arquivo
    '                        Line Input #1, sReg
    '
    '                        If Mid(sReg, 1, 7) = "001-000" Then
    '                            If Right(sReg, Len(sReg) - 10) <> glNumProxIdentificacao Then
    '                                sRet = ""
    '                                Close #1
    '                                Exit Do
    '                            End If
    '                        End If
    '
    '                        If Mid(sReg, 1, 7) = "030-000" Then
    '                            'mensagem para operador
    '                            If Mid(sReg, 11, Len(sReg) - 10) <> "" Then vbMsg = Rotina_AvisoECF(vbOK, Mid(sReg, 11, Len(sReg) - 10))
    '                            If Mid(sReg, 11, Len(sReg) - 10) = "" Then bOk = True
    '                        End If
    '                    Loop
    '                End If
    '            Loop Until sRet <> ""
    '
    '            Close #1
    '
    '            '******encerra Fechamento do Lote*******
    '            Exit For
    '        End If
    '    Next
            
            
    Else
        
        Call CF_ECF("Trata_Caixa_So_Orcamento")
        
    End If
    
    Caixa_Executa_Fechamento_EmTrans = SUCESSO

    Exit Function

Erro_Caixa_Executa_Fechamento_EmTrans:

    Caixa_Executa_Fechamento_EmTrans = gErr

    Select Case gErr

        Case 99760
            If giTipoTEF = TIPOTEF_SITEF Then
            
                Call Rotina_ErroECF(vbOKOnly, ERRO_SITEF_NAO_ATIVO, gErr)
            
            Else
            
                Call Rotina_ErroECF(vbOKOnly, ERRO_TEF_NAO_ATIVO, gErr)
            
            End If
        
        Case 105430, 107571, 107578, 107579, 107580, 107581, 107632, 112063 To 112066, 112077, 112055, 133665, 204512, 210033, 214017, ERRO_SEM_MENSAGEM
        
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 149287)

    End Select

    Exit Function

End Function


'Function Caixa_Executa_ReducaoZ() As Long
''Função que Executa a Redução Z
'
'Dim lErro As Long
'Dim lSequencial As Long
'Dim iCodGerente As Integer
'Dim objOperador As New ClassOperador
'Dim colOrcamento As New Collection
'Dim lSequencialOrc As Long
'Dim dtData As Date
'Dim iFazReducaoZ As Integer
'
'
'On Error GoTo Erro_Caixa_Executa_ReducaoZ
'
'    iFazReducaoZ = FAZ_REDUCAOZ
'
'    'Se for Necessário a autorização do Gerente para abertura do Caixa
'    If gobjLojaECF.iGerenteAutoriza = AUTORIZACAO_GERENTE Then
'
'        'Chama a Tela de Senha
'        Call Chama_TelaECF_Modal("OperadorLogin", objOperador, LOGIN_APENAS_GERENTE)
'
'        'Sai de Função se a Tela de Login não Retornar ok
'        If giRetornoTela <> vbOK Then Exit Function
'
'        'Se o Operador For Gerente
'        iCodGerente = objOperador.iCodigo
'
'    End If
'
'    'Função que Abre a Transação
'    lErro = CF_ECF("Caixa_Transacao_Abrir", lSequencial)
'    If lErro <> SUCESSO Then gError 107570
'
'    'Abre a Transação
'    lErro = CF_ECF("Caixa_Transacao_Abrir_Orc", lSequencialOrc)
'    If lErro <> SUCESSO Then gError 204670
'
'    dtData = gdtDataHoje
'
'    'Função que Executa Fechamento do Caixa
'    lErro = CF_ECF("Caixa_Executa_Fechamento_EmTrans", lSequencial, iCodGerente, dtData, iFazReducaoZ)
'    If lErro <> SUCESSO And lErro <> 99760 Then gError 107576
'
'    'Fecha a Transação
'    lErro = CF_ECF("Caixa_Transacao_Fechar_Orc", lSequencialOrc)
'    If lErro <> SUCESSO Then gError 204671
'
'
''    'Função que Referenciar a Função da Afrac que Vai Executar a ReduçãoZ e fica a Cargo do ECF fazer a Verificação se pode ou não fazer a Redução naquela Data passada
''    lErro = CF_ECF("Caixa_Executa_ReducaoZ_EmTrans", lSequencial, iCodGerente, Date)
''    If lErro <> SUCESSO Then gError 107571
'
'    'Função que Encerra a Transação com o Caixa
'    lErro = CF_ECF("Caixa_Transacao_Fechar", lSequencial)
'    If lErro <> SUCESSO Then gError 107572
'
'    'Função que Grava no Arquivo de Configuração de Caixa o Novo Status do Caixa
'    lErro = WritePrivateProfileString("ECF", "DataUltimaReducaoZ", CStr(Date), NOME_ARQUIVO_CAIXA)
'    If lErro = 0 Then gError 117525
'
'    'funcao que cria/altera a chave e grava no caixaconfig.ini
'    lErro = CF_ECF("CaixaConfig_Chave")
'    If lErro <> SUCESSO Then gError 204266
'
'    Caixa_Executa_ReducaoZ = SUCESSO
'
'    Exit Function
'
'Erro_Caixa_Executa_ReducaoZ:
'
'    Caixa_Executa_ReducaoZ = gErr
'
'     Select Case gErr
'
'        Case 107570, 107571, 107572, 204266, 204670, 204671
'            'Erro Tratado Dentro da Função que Foi Chamada
'
'        Case 117525
'            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, "ECF", "DataUltimaReducaoZ", NOME_ARQUIVO_CAIXA)
'
'        Case Else
'            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 149288)
'
'    End Select
'
'    lSequencial = glSeqTransacaoAberta
'
'    'Rollback na transação
'    Call CF_ECF("Caixa_Transacao_Rollback", glTransacaoPAFECF)
'    Call CF_ECF("Caixa_Transacao_Rollback", glTransacaoOrcPAFECF)
'
'    Exit Function
'
'End Function

Public Function Caixa_Executa_ReducaoZ_EmTrans(ByVal lSequencial As Long, ByVal iCodGerente As Integer) As Long
'Função que se Utiliza da Função da Afrac para Realização da ReduçãoZ

Dim lErro As Long
Dim objMovimentoCaixa As New ClassMovimentoCaixa
Dim sData As String
Dim sLog As String
Dim sRetorno As String
Dim sRetorno1 As String
Dim sRetorno2 As String
Dim sRetorno3 As String
Dim vbMsgRes As VbMsgBoxResult
Dim colRegistro As New Collection
Dim sRetorno4 As String
Dim sRetorno5 As String
Dim asReg() As String
Dim dtDataUltRedZ As Date
Dim objTiposMeiosPagtos As ClassTMPLoja
Dim colOrcamento As New Collection
Dim objVenda As ClassVenda
Dim iTotalCaixaAtivo As Integer
Dim alComando(1 To 1) As Long
Dim iIndice As Integer
Dim sArquivo As String
Dim lCodigo As Long
Dim tOrcamento As typeOrcamentoECF
'Dim iRZPendenteDiaAnterior As Integer
Dim iRZPendente As Integer
Dim sHora As String
Dim dtUltimaReducaoECF As Date
Dim lTamanho As Long
Dim objLojaArqFisMestre As New ClassLojaArqFisMestre
Dim colLojaArqFisAnalitico As New Collection
Dim objUltimaReducao As New ClassUltimaReducao
Dim sCOOInicial1 As String
Dim sCOOFinal1 As String
Dim colProdutos As Collection
Dim iMetodo As Integer
Dim dtDataECF As Date
Dim dtHoraECF As Date
Dim dtDataUltimoMovimento As Date
Dim sDataHora As String
Dim sStatusCaixa As String
Dim sStatusSessao As String

On Error GoTo Erro_Caixa_Executa_ReducaoZ_EmTrans
    
    If Not AFRAC_ImpressoraCFe(giCodModeloECF) Then
            
        If giOrcamentoECF <> CAIXA_SO_ORCAMENTO Then
    
'            lErro = AFRAC_RZPendenteDiaAnterior(iRZPendenteDiaAnterior)
'            If lErro <> SUCESSO Then
'                lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Reducao Z Pendente Dia Anteior")
'                gError 210919
'            End If
        
            lErro = AFRAC_RZPendente(iRZPendente)
            If lErro <> SUCESSO Then
                lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Reducao Z Pendente")
                gError 214009
            End If
        
            If giDebug = 1 Then MsgBox ("Caixa Executa ReducaoZ iRZPendente = " & CStr(iRZPendente))
        
            lErro = AFRAC_DataReducao(dtUltimaReducaoECF)
            lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Data Ultima Reducao Z")
            If lErro <> SUCESSO Then gError 214010
                
            If giDebug = 1 Then MsgBox ("Caixa Executa ReducaoZ dtUltimaReducaoECF = " & CStr(dtUltimaReducaoECF))
                
            'le a data/hora do ecf
            lErro = AFRAC_LerInformacaoImpressora("017", sDataHora)
            lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Informação Impressora")
            If lErro <> SUCESSO Then gError 207235
            
            dtDataECF = StrParaDate(left(sDataHora, 2) & "/" & Mid(sDataHora, 3, 2) & "/" & Mid(sDataHora, 5, 2))
            
            dtHoraECF = StrParaDate(Mid(sDataHora, 7, 2) & ":" & Mid(sDataHora, 9, 2) & ":" & right(sDataHora, 2))
            
            If giDebug = 1 Then MsgBox ("Caixa Executa ReducaoZ dtDataECF = " & CStr(dtDataECF))
            
            
            lErro = AFRAC_DataMovimentoProximaReducao(sData)
            If lErro <> SUCESSO Then
                lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "DataMovimentoProximaReducao")
                If lErro <> SUCESSO Then gError 214024
            End If
            
            dtDataUltimoMovimento = StrParaDate(left(sData, 2) & "/" & Mid(sData, 3, 2) & "/" & right(sData, 4))
        
            If giDebug = 1 Then MsgBox ("Caixa Executa ReducaoZ dtDataUltimoMovimento = " & CStr(dtDataUltimoMovimento))
        
        
            'se tem reddcao Z pendente e se a data do ecf = a data do ultimo movimento ou a data do ecf = data do ultimo movimeento + 1 e a hora menor do que 2 horas
'            If iRZPendenteDiaAnterior = 0 And iRZPendente = 1 And gdtUltimaReducao = dtUltimaReducaoECF Then
            If iRZPendente = 1 And (dtDataECF = dtDataUltimoMovimento Or (dtDataECF = dtDataUltimoMovimento + 1 And Hour(dtHoraECF) < 2)) Then
                'Envia aviso perguntando se deseja realmente fazer a redução z
                vbMsgRes = Rotina_AvisoECF(vbYesNo, AVISO_DESEJA_REDUCAOZ, gdtDataAnterior)
            
                'Se nao então sai da Função
                If vbMsgRes = vbNo Then gError 112077
            End If
            
        '    If iFazReducao = FAZ_REDUCAOZ Then
                'Faz uso da Função da Afrac
        '        lErro = AFRAC_ReducaoZ(dtData)
        '        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Redução Z")
        '        If lErro <> SUCESSO Then gError 107549
                
                
                
            'se esta em jornada fiscal e a data do ecf for maior que a data do ultimo movimento - só deve acontecer nos emuladores e nos ecfs que nao estao configurados para gerar a reducaoZ automaticamente
            If iRZPendente = 1 And (dtDataUltimoMovimento <> DATA_NULA And (dtDataECF > dtDataUltimoMovimento + 1 Or (dtDataECF = dtDataUltimoMovimento + 1 And Hour(dtHoraECF) > 2))) Then
            
                lErro = AFRAC_FechaDia()
                If lErro <> SUCESSO Then
                    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Redução Z")
                    If lErro <> SUCESSO Then gError 214905
                End If
            
                lErro = AFRAC_RZPendente(iRZPendente)
                If lErro <> SUCESSO Then
                    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Reducao Z Pendente")
                    gError 214009
                End If
            
                If giDebug = 1 Then MsgBox ("Caixa Executa ReducaoZ depois fechar dia iRZPendente = " & CStr(iRZPendente))
            
                lErro = AFRAC_DataReducao(dtUltimaReducaoECF)
                lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Data Ultima Reducao Z")
                If lErro <> SUCESSO Then gError 214010
                    
                If giDebug = 1 Then MsgBox ("Caixa Executa ReducaoZ depois de fechar dia dtUltimaReducaoECF = " & CStr(dtUltimaReducaoECF))
            
            End If
                
            'se esta em jornada fiscal ou se a data da ultima reducao Z processada pelo sistema menor q a data da ultima reducao Z do ecf ==> fechamento do caixa
            'ou se a  data do ultimo movimento é menor q a data do ecf  ==> fechamento de caixa
            If iRZPendente = 1 Or (gdtUltimaReducao < dtUltimaReducaoECF Or (dtDataUltimoMovimento <> DATA_NULA And (dtDataECF > dtDataUltimoMovimento + 1 Or (dtDataECF = dtDataUltimoMovimento + 1 And Hour(dtHoraECF) > 2)))) Then
                
                If iRZPendente = 0 Then
                    gdtDataAnterior = dtDataECF
                End If
                
                
                'essa rotina foi subsituida pelo envio dos movimentos para boleto cada venda
                'executa a sangria de todos boletos PosTef
'                lErro = Caixa_Executa_Sangria_Boleto_PosTef(lSequencial)
'                If lErro <> SUCESSO Then gError 105430
                
                
               'Abre os  comandos
                For iIndice = LBound(alComando) To UBound(alComando)
                    alComando(iIndice) = Comando_AbrirExt(glConexaoOrcPAF)
                    If alComando(iIndice) = 0 Then gError 204666
                Next
                    
                    
                'Função Que remove o caixa do arquivo de caixas ativos - PAFECF
                lErro = CF_ECF("CaixasAtivos_Remove_Caixa")
                If lErro <> SUCESSO Then gError 204233
                
                lErro = CaixasAtivos_Total(iTotalCaixaAtivo)
                If lErro <> SUCESSO Then gError 204661
                        
                If iTotalCaixaAtivo = 0 Then
               
                    tOrcamento.sMsg = String(STRING_ORCAMENTO_MSG, 0)
        
                        
                    'se a ultima reducao Z foi processada pelo sistema ==> esta entrando aqui pois foi comandado fechamento do caixa para o dia atual
                    If gdtUltimaReducao = dtUltimaReducaoECF Then
                    
                        'imprime e cancela as pre-vendas antigas
                        lErro = Comando_Executar(alComando(1), "SELECT Codigo, Seq, Msg FROM Orcamento WHERE DataEmissao <=? AND Status <> ? AND NumeroDAV = '0000000000' ORDER BY Codigo, Seq", tOrcamento.lCodigo, tOrcamento.iSeq, tOrcamento.sMsg, Date - 1, STATUS_BAIXADO)
                        If lErro <> AD_SQL_SUCESSO Then gError 204662
                    
                    Else
                    
                        'imprime e cancela as pre-vendas antigas
                        lErro = Comando_Executar(alComando(1), "SELECT Codigo, Seq, Msg FROM Orcamento WHERE DataEmissao < ? AND Status <> ? AND NumeroDAV = '0000000000' ORDER BY Codigo, Seq", tOrcamento.lCodigo, tOrcamento.iSeq, tOrcamento.sMsg, dtUltimaReducaoECF, STATUS_BAIXADO)
                        If lErro <> AD_SQL_SUCESSO Then gError 204662
                    
                    End If
                    
                    lErro = Comando_BuscarPrimeiro(alComando(1))
                    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 204663
                    
                    lCodigo = tOrcamento.lCodigo
            
                    Set colRegistro = New Collection
            
                    Do While lErro = AD_SQL_SUCESSO
            
                        If tOrcamento.lCodigo <> lCodigo Then
                        
                            Set objVenda = New ClassVenda
            
                            lErro = CF_ECF("Registro_ECF_Vendas", colRegistro, sArquivo, 1, objVenda)
                            If lErro <> SUCESSO Then gError 204664
            
                            lErro = CF_ECF("Imprime_Orcamento_EmTrans", objVenda)
                            If lErro <> SUCESSO Then gError 204211
            
                            Set colRegistro = New Collection
            
                            lCodigo = tOrcamento.lCodigo
                        
                        End If
            
                        colRegistro.Add tOrcamento.sMsg
            
                        lErro = Comando_BuscarProximo(alComando(1))
                        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 204665
                        
                    Loop
                
                
                    If colRegistro.Count > 0 Then
                
                        Set objVenda = New ClassVenda
            
                        lErro = CF_ECF("Registro_ECF_Vendas", colRegistro, sArquivo, 1, objVenda)
                        If lErro <> SUCESSO Then gError 210523
            
                        lErro = CF_ECF("Imprime_Orcamento_EmTrans", objVenda)
                        If lErro <> SUCESSO Then gError 210524
            
                    End If
                
                End If
                
                'se esta em jornada fiscal e a ultima reducao Z tiver sido processada pelo sistema (ou seja, alguem comandou o reducao Z) ==> pode fazer a reducao Z
                'ou a data do ecf for maior que a data do ultimo movimento - só deve acontecer nos emuladores
                If iRZPendente = 1 And (gdtUltimaReducao = dtUltimaReducaoECF Or (dtDataUltimoMovimento <> DATA_NULA And (dtDataECF > dtDataUltimoMovimento + 1 Or (dtDataECF = dtDataUltimoMovimento + 1 And Hour(dtHoraECF) > 2)))) Then
                
                    lErro = AFRAC_FechaDia()
                    If lErro <> SUCESSO Then
                        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Redução Z")
                        If lErro <> SUCESSO Then gError 107549
                    End If
                
                End If
                    
                    
                'Verifica se o horário de verão está ou não ativo
                If gobjLojaECF.iHorarioVerao = HORARIO_VERAO_ATIVO Then
                    lErro = AFRAC_EntrarHorarioVerao()
                    If lErro <> SUCESSO Then
                        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Entrar Horário Verão")
                    End If
                Else
                    lErro = AFRAC_SairHorarioVerao()
                    If lErro <> SUCESSO Then
                        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Sair Horário Verão")
                    End If
                End If
                
                
                
                If giDebug = 1 Then MsgBox ("120")
                    
                lErro = AFRAC_ProgramarTotalizadorNaoSujeitoICMS(giTotalizador_Sangria, "Sangria", "+", False, False, "01")
                If lErro <> SUCESSO Then
                    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Totalizadores")
                    If lErro <> SUCESSO Then gError 109700
                End If
                
                If giDebug = 1 Then MsgBox ("121")
                
                lErro = AFRAC_ProgramarTotalizadorNaoSujeitoICMS(giTotalizador_Suprimento, "Suprimento", "-", False, False, "02")
                If lErro <> SUCESSO Then
                    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Totalizadores")
                    If lErro <> SUCESSO Then gError 109701
                End If
                    
                If gobjLojaECF.sTruncamentoArredondamento = LOJA_TRUNCAMENTO Then
                    iMetodo = TRUNCA_LOJA
                Else
                    iMetodo = ARREDONDA_LOJA
                End If
                
                lErro = AFRAC_ArredondarTruncar(iMetodo)
                If lErro <> SUCESSO Then
                    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Arredondar - Truncar")
                    If lErro <> SUCESSO Then gError 99875
                End If
    
                If giDebug = 1 Then MsgBox ("122")
    
                lErro = AFRAC_ConfigurarMoeda(gobjLojaECF.sSimboloMoeda)
                If lErro <> SUCESSO Then
                    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Configurar Moeda")
                    If lErro <> SUCESSO Then gError 210912
                End If
                
                
                If giDebug = 1 Then MsgBox ("123")
    
                For iIndice = 2 To 16
                
                    lErro = AFRAC_ProgramarRelGer(CStr(iIndice), "", False)
                    If lErro <> SUCESSO Then
                        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "")
                        If lErro <> SUCESSO Then gError 214502
                    End If
                
                Next
                    
                If giDebug = 1 Then MsgBox ("124")
                    
                    
            '    End If
                
                'Função que lê as Informações para a Geração de um novo movimento de Caixa
                lErro = CF_ECF("MovimentoCaixa_Move_Dados_Memoria", MOVIMENTO_CAIXA_REDUCAO_Z, objMovimentoCaixa)
                If lErro <> SUCESSO Then gError 107547
                
                'Data do Movimento de Caixa
                objMovimentoCaixa.dtDataMovimento = Date
                
                'Guarda o sequencial no objmovimento de Caixa, lSequencial Indica o Sequencial do Movimento dentro do Caixa
                objMovimentoCaixa.lSequencial = lSequencial
            
                'Guarda o Gerente
                objMovimentoCaixa.iGerente = iCodGerente
                
                Call CF_ECF("MovimentoCaixa_Gera_Log", colRegistro, objMovimentoCaixa)
                
                'Função que Grava as Informções referentes ao Série e valores do ECF
                lErro = CF_ECF("MovimentoCaixaECF_Grava", colRegistro)
                If lErro <> SUCESSO Then gError 112065
                        
                Set colRegistro = New Collection
                
                
                'Adcionar o objMovimentosCaixa na Coll Global
                gcolMovimentosCaixa.Add objMovimentoCaixa
                
                
    '******************************************
                
                Set objMovimentoCaixa = New ClassMovimentoCaixa
                    
                'Guarga na Memoria os Dados que Serão Usados no Movimento de Caixa
                lErro = CF_ECF("MovimentoCaixa_Move_Dados_Memoria", MOVIMENTO_CAIXA_FECHAMENTO, objMovimentoCaixa)
                If lErro <> SUCESSO Then gError 107578
                    
                
                If giDebug = 1 Then MsgBox ("69")
                
                lErro = AFRAC_Carrega_Dados_UltimaReducao(objUltimaReducao, objLojaArqFisMestre, colLojaArqFisAnalitico)
                If lErro <> SUCESSO Then gError 133665
                
                If objUltimaReducao.dtDataMovimento = DATA_NULA Then
                    gdtUltimaReducao = Date
                Else
                    gdtUltimaReducao = objUltimaReducao.dtDataMovimento
                End If
                
                If giDebug = 1 Then MsgBox ("70")
                
                lTamanho = 15
                sRetorno = String(lTamanho, 0)
                
                
                'pega o COO da ultima Reducao Z
                Call GetPrivateProfileString(APLICACAO_ECF, "COOultRZ", CONSTANTE_ERRO, sRetorno, lTamanho, NOME_ARQUIVO_CAIXA)
                If sRetorno = String(lTamanho, 0) Then gError 214011
                
                objLojaArqFisMestre.lCOOIni = StrParaLong(sRetorno) + 1
                                
                
    '            lErro = AFRAC_COOInicialFinal(sCOOInicial1, sCOOFinal1)
    '            If lErro <> SUCESSO Then
    '                lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Retorna COO Inicial Final")
    '                gError 210919
    '            End If
                
                objLojaArqFisMestre.lCOOFim = objUltimaReducao.lCOOReducaoZ
                sCOOFinal1 = objUltimaReducao.lCOOReducaoZ
                
                'Atualiza o arquivo
                lErro = WritePrivateProfileString(APLICACAO_ECF, "COOultRZ", sCOOFinal1, NOME_ARQUIVO_CAIXA)
                If lErro = 0 Then gError 214012
                
                
                Call CF_ECF("FechamentoCaixa_Gera_Log", colRegistro, objMovimentoCaixa, objLojaArqFisMestre, colLojaArqFisAnalitico, objUltimaReducao)
                
                If giDebug = 1 Then MsgBox ("71")
                
                'Grava as Informações no Arquivo
                lErro = CF_ECF("MovimentoCaixaECF_Grava", colRegistro)
                If lErro <> SUCESSO Then gError 107580
                   
                If giDebug = 1 Then MsgBox ("72")
                   
                lErro = CF_ECF("Requisito_X")
                If lErro <> SUCESSO Then gError 210033
                   
                'Adicionar o objMovimentos na Coleção Global
                gcolMovimentosCaixa.Add objMovimentoCaixa
                    
                'funcao criada para atender o requisito XXV do PAFECF que obriga a criar um arquivo com os movimentos relativos a ultima reducao
                lErro = CF_ECF("MovimentoPorECF_Grava", colRegistro)
                If lErro <> SUCESSO Then gError 204512
            
                lErro = CF_ECF("Requisito_VII_Item8_E3")
                If lErro <> SUCESSO Then gError 214336
            
                lErro = CF_ECF("Relatorio_Registros_PAFECF", gdtUltimaReducao, gdtUltimaReducao, colProdutos)
                If lErro <> SUCESSO Then gError 204512
            
            
            
                If giDebug = 1 Then MsgBox ("74")
                        
                'Indica o Nome do Operador dessa Sessão.
                GL_objMDIForm.Caption = "CAIXA_STATUS : Caixa Fechado"
                
                'Caixa Muda o Status
                giStatusCaixa = STATUS_CAIXA_FECHADO
            
                'Transforma de Inteiro para String
                sStatusCaixa = CStr(giStatusCaixa)
            
                'Função que Grava no Arquivo de Configuração de Caixa o Novo Status do Caixa
                lErro = WritePrivateProfileString("Caixa", "StatusCaixa", sStatusCaixa, NOME_ARQUIVO_CAIXA)
                If lErro = 0 Then gError 117522
            
                If giDebug = 1 Then MsgBox ("Gravou StatusCaixa = " & sStatusCaixa)
            
                'funcao que cria/altera a chave e grava no caixaconfig.ini
                lErro = CF_ECF("CaixaConfig_Chave")
                If lErro <> SUCESSO Then gError 204265
            
            
                sData = gdtUltimaReducao
                
                If giDebug = 1 Then MsgBox ("75")
                
                'Função que Grava no Arquivo de Configuração de Caixa o Novo Status do Caixa
                lErro = WritePrivateProfileString("ECF", "DataUltimaReducaoZ", sData, NOME_ARQUIVO_CAIXA)
                If lErro = 0 Then gError 117523
                    
                If giDebug = 1 Then MsgBox ("76")
                    
                'funcao que cria/altera a chave e grava no caixaconfig.ini
                lErro = CF_ECF("CaixaConfig_Chave")
                If lErro <> SUCESSO Then gError 204295
                    
                lErro = CF_ECF("Transmitir_Arquivo_EmTrans")
                If lErro <> SUCESSO And lErro <> 117565 Then gError 112619
                    
                    
                If giDebug = 1 Then MsgBox ("77")
            
            
                'se o Reducao Z esta pendente porque imprimiu os orcamentos depois de imprimir a reducao Z
                'que estava pendente e nao tinha sido gerada automaticamente ==> o caixa tem q abrir
                lErro = AFRAC_RZPendente(iRZPendente)
                If lErro <> SUCESSO Then
                    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Reducao Z Pendente")
                    gError 214009
                End If
            
                If iRZPendente = 1 Then
                
                    If giDebug = 1 Then MsgBox ("77.1")
                
                    'Se caixa não estiver Aberto então realizar a Abertura de Caixa
                    lErro = CF_ECF("Caixa_Executa_Abertura_EmTrans", lSequencial, iCodGerente)
                    If lErro <> SUCESSO Then gError 214906
                
                
                    lErro = AFRAC_AbrirDia(Date)
                    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Abertura do Dia")
                    If lErro <> SUCESSO Then gError 214907
                
                     'Verifica o Status da Sessão
                    If giStatusSessao = SESSAO_ABERTA Then
                        sStatusSessao = "Sessão Aberta"
                    ElseIf giStatusSessao = SESSAO_SUSPENSA Then
                        sStatusSessao = "Sessão Suspensa"
                    ElseIf giStatusSessao = SESSAO_ENCERRADA Then
                        sStatusSessao = "Sessão Encerrada"
                    End If
                    
                    'Alterar o Caption do ECF
                    GL_objMDIForm.Caption = "CAIXA_STATUS : Caixa Aberto / SESSAO_STATUS : " & sStatusSessao
                
                    gdtDataAnterior = Date
                
                    If giDebug = 1 Then MsgBox ("77.2")
                
                End If
            
                If giDebug = 1 Then MsgBox ("77.3")
            
            
                For iIndice = LBound(alComando) To UBound(alComando)
                    Call Comando_Fechar(alComando(iIndice))
                Next
        
            End If
    
        Else
            
            Call CF_ECF("Trata_Caixa_So_Orcamento")
    
        End If

    End If

    Caixa_Executa_ReducaoZ_EmTrans = SUCESSO

    Exit Function

Erro_Caixa_Executa_ReducaoZ_EmTrans:

    Caixa_Executa_ReducaoZ_EmTrans = gErr

    Select Case gErr

        Case 99875, 99878, 105430, 107547, 107548, 107549, 107578, 107580, 109700, 109701, 112077, 112392, 112393, 112619, 133665, 204211, 204220, 204232, 204265, 204295, 204512, 204661, 204664, 204866, 210033, 210523, 210524, 210912, 210919, 214009, 214010, 214016, 214336, 214502, 214503, 214514, 214905 To 214907

        Case 117522
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, "Caixa", "StatusCaixa", NOME_ARQUIVO_CAIXA)

        Case 117523
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, "ECF", "DataUltimaReducaoZ", NOME_ARQUIVO_CAIXA)
        
        Case 204662, 204663, 204665
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_ORCAMENTO, gErr)

        Case 204666
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)

        Case 214011
            Call Rotina_ErroECF(vbOKOnly, ERRO_PREENCHIMENTO_ARQUIVO_CONFIG, gErr, "COOultRZ", APLICACAO_ECF, NOME_ARQUIVO_CAIXA)
        
        Case 214012
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, APLICACAO_ECF, "COOultRZ", NOME_ARQUIVO_CAIXA)

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 149289)

    
    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Sessao_Executa_Abertura() As Long
'Executa a Abertura da Sessão, Verifica se o Caixa já Está aberto

Dim lErro As Long
Dim vbMsgRes As VbMsgBoxResult
Dim lSequencial As Long
Dim objOperador As New ClassOperador
Dim iCodGerente As Integer
Dim sSatatusCaixa As String

On Error GoTo Erro_Sessao_Executa_Abertura

    If giStatusCaixa <> STATUS_CAIXA_ABERTO And giOrcamentoECF <> CAIXA_SO_ORCAMENTO Then

        'Envia aviso perguntando se de seja Abrica Caixa que ainda não foi Aberto
        vbMsgRes = Rotina_AvisoECF(vbYesNo, AVISO_DESEJA_ABRIR_CAIXA, giCodCaixa)

        'Se nao então sai da Função
        If vbMsgRes = vbNo Then gError 107622

        'Faz Abertura do Status do Caixa
        lErro = CF_ECF("Caixa_Executa_Abertura")
        If lErro <> SUCESSO Then gError 107555
        
        If giOrcamentoECF <> CAIXA_SO_ORCAMENTO Then
        
            lErro = AFRAC_AbrirDia(Date)
            If lErro <> SUCESSO Then
                lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Abertura do Dia")
                If lErro <> SUCESSO Then gError 133669
            End If
        
        End If
        

    End If
    
    'Verifica se a Sessão já Esta Aberta
    If giStatusSessao = SESSAO_ABERTA Then gError 107553
    
    If Not AFRAC_ImpressoraCFe(giCodModeloECF) Then
    
        'Se for Necessário para ser Iniciada a Sessão
        If gobjLojaECF.iGerenteAutoriza = AUTORIZACAO_GERENTE Then
    
            'Chama a Tela de Senha
            Call Chama_TelaECF_Modal("OperadorLogin", objOperador, LOGIN_APENAS_GERENTE)
    
            'Sai de Função se a Tela de Login não Retornar ok
            If giRetornoTela <> vbOK Then gError 107629
            
            'Se o Operador for Gerente
            iCodGerente = objOperador.iCodigo
            
       End If
   
    End If
   
    Call Chama_TelaECF_Modal("OperadorLogin", objOperador, LOGIN_TODOS_OPERADORES)
    If giRetornoTela <> vbOK Then gError 107630
    
    'A variavel Global está Recebendo o Codigo do Operador que Abriu a Sessão
    giCodOperador = objOperador.iCodigo
       
       
    'Função Executa a Abertura de Transação
    lErro = CF_ECF("Caixa_Transacao_Abrir", lSequencial)
    If lErro <> SUCESSO Then gError 107556
    
    'Função que Executa a Abertura da Sessão
    lErro = CF_ECF("Sessao_Executa_Abertura_EmTrans", lSequencial, iCodGerente)
    If lErro <> SUCESSO Then gError 107557

    'Função que Fecha A transação antiga
    lErro = CF_ECF("Caixa_Transacao_Fechar", lSequencial)
    If lErro <> SUCESSO Then gError 107558
       
       
    If giOrcamentoECF = CAIXA_SO_ORCAMENTO Then
       
'        'Muda o Status da Sessão
'        giStatusSessao = SESSAO_ABERTA
'
'        lErro = WritePrivateProfileString("Sessao", "CodOperador", CStr(giCodOperador), NOME_ARQUIVO_CAIXA)
'        If lErro = 0 Then gError 105903
'
'        lErro = WritePrivateProfileString("Sessao", "StatusSessao", CStr(giStatusSessao), NOME_ARQUIVO_CAIXA)
'        If lErro = 0 Then gError 105904
'
'        'funcao que cria/altera a chave e grava no caixaconfig.ini
'        lErro = CF_ECF("CaixaConfig_Chave")
'        If lErro <> SUCESSO Then gError 204267
            
        
        'Indica o Nome do Operador dessa Sessão.
        GL_objMDIForm.Caption = "SESSAO_STATUS :  Sessão Aberta " & " / OPERADOR : " & objOperador.sNome
        
       
    Else
       

        'Verifica o Status da Sessão
        If giStatusCaixa = 0 Then
            sSatatusCaixa = "Caixa Fechada"
        ElseIf giStatusCaixa = 1 Then
            sSatatusCaixa = "Caixa Aberta"
        End If
    
        'Indica o Nome do Operador dessa Sessão.
        GL_objMDIForm.Caption = "CAIXA_STATUS : " & sSatatusCaixa & " / SESSAO_STATUS :  Sessão Aberta " & " / OPERADOR : " & objOperador.sNome
    


    End If

    Sessao_Executa_Abertura = SUCESSO

    Exit Function

Erro_Sessao_Executa_Abertura:

    Sessao_Executa_Abertura = gErr

    Select Case gErr

        Case 105903
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, "Sessao", "CodOperador", NOME_ARQUIVO_CAIXA)

        Case 105904
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, "Sessao", "StatusSessao", NOME_ARQUIVO_CAIXA)

        Case 107553
            Call Rotina_ErroECF(vbOKOnly, ERRO_SESSAO_ABERTA, gErr, giCodCaixa, giCodOperador)
        
        Case 107555, 107556, 107557, 107558, 107622, 107629, 107630, 133669, 204267

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 149290)

    End Select
    
'    lSequencial = glSeqTransacaoAberta
            
    'Rollback na transação
    Call CF_ECF("Caixa_Transacao_Rollback", glTransacaoPAFECF)


    Exit Function

End Function

Function Operacoes_Sessao_Executa_Encerramento(Optional dtData As Date) As Long
'Função que Executa o Encerramento da Sessão

Dim lErro As Long
Dim lSequencial As Long
Dim iCodGerente As Integer
Dim objOperador As New ClassOperador
Dim sStatusCaixa As String

On Error GoTo Erro_Operacoes_Sessao_Executa_Encerramento
    
'    If dtData = "00:00:00" Then dtData = gdtDataHoje
    
    If Not AFRAC_ImpressoraCFe(giCodModeloECF) Then
    
        'Se for Necessário a autorização do Gerente para o Encerramento da Sessão
        If gobjLojaECF.iGerenteAutoriza = AUTORIZACAO_GERENTE Then
    
            'Chama a Tela de Senha
            Call Chama_TelaECF_Modal("OperadorLogin", objOperador, LOGIN_APENAS_GERENTE)
    
            'Sai de Função se a Tela de Login não Retornar ok
            If giRetornoTela <> vbOK Then gError 107625
    
            'Se o Operador for o Gerente
            iCodGerente = objOperador.iCodigo
    
        End If

    End If

    'Função que Abre a Transação
    lErro = CF_ECF("Caixa_Transacao_Abrir", lSequencial)
    If lErro <> SUCESSO Then gError 107594

    'Função que Executa o Encerramento da Sessão
    lErro = CF_ECF("Operacoes_Sessao_Executa_Encerramento_EmTrans", lSequencial, iCodGerente)
    If lErro <> SUCESSO Then gError 107595
    
    'Função que Encerra a Transação
    lErro = CF_ECF("Caixa_Transacao_Fechar", lSequencial)
    If lErro <> SUCESSO Then gError 107596

    If giOrcamentoECF = CAIXA_SO_ORCAMENTO Then
       
        'Muda a Caption do ECF para indicar que a Sessão está Suspensa
        GL_objMDIForm.Caption = "SESSAO_STATUS : Sessão Fechada"
       
       
    Else

        'Verifica o Status da Sessão
        If giStatusCaixa = 0 Then
            sStatusCaixa = "Caixa Fechada"
        ElseIf giStatusCaixa = 1 Then
            sStatusCaixa = "Caixa Aberta"
        End If


        'Alterar o Caption do ECF
        GL_objMDIForm.Caption = "CAIXA_STATUS : " & sStatusCaixa & " / SESSAO_STATUS : Sessão Fechada "


    End If

    
    Operacoes_Sessao_Executa_Encerramento = SUCESSO

    Exit Function

Erro_Operacoes_Sessao_Executa_Encerramento:

    Operacoes_Sessao_Executa_Encerramento = gErr

    Select Case gErr

        Case 105905
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, "Sessao", "StatusSessao", NOME_ARQUIVO_CAIXA)

        Case 105906
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, "Sessao", "CodOperador", NOME_ARQUIVO_CAIXA)

        Case 107594, 107595, 107596, 107625, 204268
            'Erros Tratados Dentro da Função Chamadora

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 149291)

    End Select

'    lSequencial = glSeqTransacaoAberta
            
    'Rollback na transação
    Call CF_ECF("Caixa_Transacao_Rollback", glTransacaoPAFECF)

    Exit Function

End Function

'Function Pagamento_TEF(ByVal dValorTotal As Double, ByVal dPagTEF As Double, ByVal lNumero As Long, ByVal colMeiosPag As Collection, ByVal objVenda As ClassVenda) As Long
'
'
'Dim sReg As String
'Dim iLoop As Integer
'Dim iIndice As Integer
'Dim iIndice1 As Integer
'Dim iIndice2 As Integer
'Dim iIndice4 As Integer
'Dim bCont As Boolean
'Dim asReg() As String
'Dim sTxt As String
'Dim vbMsg As VbMsgBoxResult
'Dim lErro As Long
'Dim sRede As String
'Dim sNSU As String
'Dim sFim As String
'Dim objParcela As New ClassCarneParcelas
'Dim sNomeArq As String
'Dim lNum As Long
'Dim bCon As Boolean
'Dim objMovCaixa As New ClassMovimentoCaixa
'Dim objTiposMeiosPagtos As New ClassTMPLoja
'Dim sMsg As String
'Dim sDescricao As String
'Dim iTipo As Integer
'Dim objCheque As New ClassChequePre
'Dim objAdmMeioPagto As New ClassAdmMeioPagto
'Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
'Dim iPag As Integer
'Dim iTipoMov As Integer
'Dim iNumParcelas As Integer
'Dim sAdm As String
'Dim iRede As Integer
'Dim bAchouAdm As Boolean
'Dim sArquivoSTS As String
'Dim sArquivoINTPOS As String
'Dim sArqATIVO As String
'
'On Error GoTo Erro_Pagamento_TEF
'
'    'Verifica o arquivo Ativo
'    sArqATIVO = Dir(ARQUIVO_TEF_ATIVO)
'    'TEF não está ativo
'    If sArqATIVO = "" Then gError 99760
'
'    sArquivoSTS = Dir(ARQUIVO_TEF_RESP1)
'    If sArquivoSTS <> "" Then ECF_Apaga_Arquivo ARQUIVO_TEF_RESP1
'
'    sArquivoINTPOS = Dir(ARQUIVO_TEF_RESP2)
'    If sArquivoINTPOS <> "" Then ECF_Apaga_Arquivo ARQUIVO_TEF_RESP2
'
'    'Adiciona na variável global
'    glNumProxIdentificacao = glNumProxIdentificacao + 1
'
'    'Atualiza o arquivo
'    lErro = WritePrivateProfileString(APLICACAO_ECF, "NumProxIdent", CStr(glNumProxIdentificacao), NOME_ARQUIVO_CAIXA)
'    If lErro = 0 Then gError 117527
'
'    'Abre o arquivo Temporário
'    Open ARQUIVO_TEF_TEMP For Append As #1
'
'    'Informa dados de pagamento
'    Print #1, "000-000 = CRT"
'    Print #1, "001-000 = " & CStr(glNumProxIdentificacao)
'    Print #1, "002-000 = " & CStr(lNumero)
'    Print #1, "003-000 = " & dPagTEF * 100
'    Print #1, "999-999 = 0"
'
'    Close #1
'
'    'renomeando os arquivos
'    FileCopy ARQUIVO_TEF_TEMP, ARQUIVO_TEF_REQ
'
'    ECF_Apaga_Arquivo ARQUIVO_TEF_TEMP
'
'    sNomeArq = gsDirMVTEF & "TEF" & CStr(Format(Date, "ddmmyy")) & (".txt")
'
'    If Len(Dir(sNomeArq)) > 0 Then ECF_Apaga_Arquivo sNomeArq
'
'    Open sNomeArq For Append As #1
'
'    'Inseri no Arquivo
'    Print #1, ABRE_TEF & Chr(vbKeyControl) & glNumProxIdentificacao & Chr(vbKeyEscape) & dPagTEF & Chr(vbKeyEnd)
'
'    'Fecha o Arquivo
'    Close #1
'
'    iPag = 1
'
'    For iIndice4 = 1 To 7
'
'        sArquivoSTS = Dir(ARQUIVO_TEF_RESP1)
'
'        If sArquivoSTS <> "" Then
'
'            'Verifica o arquivo intpos.001
'            sArquivoINTPOS = Dir(ARQUIVO_TEF_RESP2, vbNormal)
'
'            If sArquivoINTPOS <> "" Then
'
'                'Abre o arquivo de resposta do gerenciador
'                Open ARQUIVO_TEF_RESP2 For Input As #1
'
'                'Até chegar ao fim do arquivo
'                Do While Not EOF(1)
'
'                    'Busca o próximo registro do arquivo
'                    Line Input #1, sReg
'
'                    Select Case Mid(sReg, 1, 7)
'
'                        Case "001-000"
'                            'verifica se a identificacao no arquivo de resposta e' o mesmo do arquivo de requisicao
'                            If Right(sReg, Len(sReg) - 10) <> glNumProxIdentificacao Then
'                                Close #1
'                                ECF_Apaga_Arquivo ARQUIVO_TEF_RESP2
'                                Exit Do
'                            End If
'
'                        'Recolhe a rede
'                        Case "010-000": sRede = UCase(Mid(sReg, 11, Len(sReg) - 10))
'
'                        'tipo de pagamento
'                        Case "011-000"
'                            If Left(sReg, 1) = "0" Then
'                                iPag = 0
'                                iNumParcelas = 1
'                            End If
'                            If Mid(sReg, 11, 1) = "1" Then
'                                For Each objTiposMeiosPagtos In gcolTiposMeiosPagtos
'                                    'Se for do tipo procurado
'                                    If objTiposMeiosPagtos.iTipo = TIPOMEIOPAGTOLOJA_CARTAO_CREDITO Then
'                                        sDescricao = objTiposMeiosPagtos.sDescricao
'                                        iTipo = objTiposMeiosPagtos.iTipo
'                                        iTipoMov = MOVIMENTOCAIXA_RECEB_CARTAOCREDITO
'                                    End If
'                                 Next
'                            ElseIf Mid(sReg, 11, 1) = "2" Then
'                                For Each objTiposMeiosPagtos In gcolTiposMeiosPagtos
'                                    'Se for do tipo procurado
'                                    If objTiposMeiosPagtos.iTipo = TIPOMEIOPAGTOLOJA_CARTAO_DEBITO Then
'                                        sDescricao = objTiposMeiosPagtos.sDescricao
'                                        iTipo = objTiposMeiosPagtos.iTipo
'                                        iTipoMov = MOVIMENTOCAIXA_RECEB_CARTAODEBITO
'                                    End If
'                                 Next
'                            End If
'
'                        'número da NSU
'                        Case "012-000": sNSU = Mid(sReg, 11, Len(sReg) - 10)
'
'                        'Quantidade de parcelas
'                        Case "018-000": iNumParcelas = StrParaInt(Mid(sReg, 11, Len(sReg) - 10))
'
'                        'Recolhe a finalização
'                        Case "027-000": sFim = Mid(sReg, 11, Len(sReg) - 10)
'
'                        Case "028-000":
'                            iLoop = Mid(sReg, 11, Len(sReg) - 10)
'                            sNomeArq = gsDirMVTEF & "TEF" & CStr(Format(Date, "ddmmyy")) & (".txt")
'
'                            Open sNomeArq For Append As #2
'
'                            'Inseri no Arquivo
'                            Print #2, DADOS_TEF & Chr(vbKeyControl) & glNumProxIdentificacao & Chr(vbKeyEscape) & dValorTotal & Chr(vbKeyEscape) & sNSU & Chr(vbKeyEscape) & sRede & Chr(vbKeyEscape) & sFim & Chr(vbKeyEscape) & lNumero & Chr(vbKeyEscape) & gdtDataHoje & Chr(vbKeyEscape) & CDbl(Time) & Chr(vbKeyEnd)
'
'                            'Fecha o Arquivo
'                            Close #2
'
'                            iIndice1 = 0
'                            For iIndice = 1 To iLoop
'                                'Busca o próximo registro do arquivo
'                                Line Input #1, sReg
'                                sTxt = Mid(sReg, 12, Len(sReg) - 12)
'                                If sTxt = "" Then sTxt = "         "
'                                iIndice1 = iIndice1 + 1
'                                ReDim Preserve asReg(iIndice1)
'                                'Busca o próximo registro do arquivo
'                                asReg(iIndice1) = sTxt
'                            Next
'
'                        'mensagem para operador
'                        Case "030-000"
'                            If Mid(sReg, 11, Len(sReg) - 10) <> "" Then vbMsg = Rotina_AvisoECF(vbOK, Mid(sReg, 11, Len(sReg) - 10))
'
'                        Case "040-000": sAdm = UCase(Mid(sReg, 11, Len(sReg) - 10))
'
'                    End Select
'                Loop
'                Close #1
'            End If
'
'        End If
'
'        Sleep 1000
'
'    Next iIndice4
'
'
'    If iLoop > 0 Then
'
'        'Insere um novo movimento
'        objMovCaixa.iFilialEmpresa = giFilialEmpresa
'        objMovCaixa.iCaixa = giCodCaixa
'        objMovCaixa.iCodOperador = giCodOperador
'        objMovCaixa.dtDataMovimento = gdtDataHoje
'        objMovCaixa.dValor = dPagTEF
'        objMovCaixa.dHora = CDbl(Time)
'        objMovCaixa.lCupomFiscal = objVenda.objCupomFiscal.lNumero
'        objMovCaixa.lNumIntExt = objVenda.objCupomFiscal.lNumOrcamento
'        objMovCaixa.iTipoCartao = TIPO_TEF
'        objMovCaixa.iTipo = iTipoMov
'
'        Select Case sRede
'            Case "AMEX"
'                iRede = REDE_TECBAN
'            Case "REDECARD"
'                iRede = REDE_REDECARD
'            Case "VISANET"
'                iRede = REDE_VISANET
'        End Select
'            '?????????
''        bAchouAdm = False
''        seleciona admmeiopagto
''        For Each objAdmMeioPagto In gcolAdmMeioPagto
''            If objAdmMeioPagto.iTipoMeioPagto = iTipoMov And UCase(objAdmMeioPagto.sNome) = Trim(UCase(sAdm)) And objAdmMeioPagto.iRede = iRede Then
''                objMovCaixa.iAdmMeioPagto = objAdmMeioPagto.iCodigo
''                bAchouAdm = True
''                Exit For
''            End If
''        Next
''
''        If bAchouAdm = False Then
''            Call CF_ECF("Cancela_Venda", sRede, sNSU, sFim, dPagTEF)
''            lNum = glNumProxIdentificacao
''            bCon = False
''            Call CF_ECF("ExcluiArq_Pagamento_TEF", lNum, bCon)
''            gError 112410
''        End If
''
''        bAchouAdm = False
''
''        'se for parcelado e não foi informado
''        If iPag = 1 And iNumParcelas = 0 Then
''            For iIndice = 1 To gcolAdmMeioPagto.Count
''                Set objAdmMeioPagto = gcolAdmMeioPagto.Item(iIndice)
''                If objAdmMeioPagto.iCodigo = objMovCaixa.iAdmMeioPagto Then
''                    'se só tiver um seleciona ele
''                    If objAdmMeioPagto.colCondPagtoLoja.Count = 1 Then
''                        Set objAdmMeioPagtoCondPagto = objAdmMeioPagto.colCondPagtoLoja.Item(1)
''                        objMovCaixa.iParcelamento = objAdmMeioPagtoCondPagto.iParcelamento
''                    Else
''                        'abre uma telinha
''                        Call Chama_TelaECF_Modal("ParcelamentoTEF", objMovCaixa)
''                        If giRetornoTela = vbOK Then bAchouAdm = True
''                    End If
''
''                End If
''            Next
''        Else
''            For iIndice = 1 To gcolAdmMeioPagto.Count
''                Set objAdmMeioPagto = gcolAdmMeioPagto.Item(iIndice)
''                If objAdmMeioPagto.iCodigo = objMovCaixa.iAdmMeioPagto Then
''                    For Each objAdmMeioPagtoCondPagto In objAdmMeioPagto.colCondPagtoLoja
''                        If objAdmMeioPagtoCondPagto.iNumParcelas = iNumParcelas Then
''                            objMovCaixa.iParcelamento = objAdmMeioPagtoCondPagto.iParcelamento
''                            bAchouAdm = True
''                            Exit For
''                        End If
''                    Next
''                    Exit For
''                End If
''            Next
''        End If
''
''        If bAchouAdm = False Then
''            Call CF_ECF("Cancela_Venda", sRede, sNSU, sFim, dPagTEF)
''            lNum = glNumProxIdentificacao
''            bCon = False
''            Call CF_ECF("ExcluiArq_Pagamento_TEF", lNum, bCon)
''            gError 112411
''        End If
''
'        objVenda.colMovimentosCaixa.Add objMovCaixa
'
'        'iNFORMAR PARA IMPRESSORA AS FORMAS PAGTO
'        For Each objMovCaixa In colMeiosPag
'            For Each objTiposMeiosPagtos In gcolTiposMeiosPagtos
'                'Se for do tipo procurado
'                If objTiposMeiosPagtos.iTipo = objMovCaixa.iTipo Then
'                    'informa a forma de pagamento passando os seus dados
'                    lErro = AFRAC_FormaPagamento(objTiposMeiosPagtos.sDescricao, CStr(objTiposMeiosPagtos.iTipo), CStr(Format(objMovCaixa.dValor, "standard")), sMsg)
'                    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Forma Pagamento")
'                    If lErro <> SUCESSO Then gError 112406
'                End If
'            Next
'        Next
'
'        'informa a forma de pagamento passando os seus dados
'        lErro = AFRAC_FormaPagamento(sDescricao, CStr(iTipo), CStr(Format(dPagTEF, "standard")), sMsg)
'        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Forma Pagamento")
'        If lErro <> SUCESSO Then gError 112407
'
'        'Abri a Gaveta
'        lErro = AFRAC_AbrirGaveta()
'        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Abrir Gaveta")
'        If lErro <> SUCESSO Then gError 112408
'
'
'        'Verifica se existe carnê
'        If objVenda.objCarne.colParcelas.Count > 0 Then
'            'Gera o Código do Carnê
'            objVenda.objCarne.sCodBarrasCarne = FormataCpoNum(giFilialEmpresa, 5) & FormataCpoNum(giCodCaixa, 5) & FormataCpoNum(objVenda.objCupomFiscal.lNumero, 10)
'        End If
'
'
'        'Jogo todos os cheques na col global
'        For Each objCheque In objVenda.colCheques
'
'            'Atualiza o saldos de cheques
'            gdSaldocheques = gdSaldocheques + objCheque.dValor
'            'Adiciona os cheques na coleção global
'            gcolCheque.Add objCheque
'
'        Next
'
'        'Realiza as operações necessárias para gravar
'        lErro = CF_ECF("Grava_Venda_Arquivo", objVenda)
'        If lErro <> SUCESSO Then gError 112402
'
'        'Atualiza os Movimentos nas coleções globais
'        Call CF_ECF("Atualiza_Movimentos_Memoria", objVenda)
'
'        'Atribui para a coleção global o objvenda
'        gcolVendas.Add objVenda
'
'        'Fecha cupom
'        lErro = AFRAC_FecharCupom(False)
'        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Fechar Cupom")
'        If lErro <> SUCESSO Then gError 112409
'
'        'Atualiza o arquivo
'        lErro = WritePrivateProfileString(APLICACAO_ECF, "CupomAberto", "0", NOME_ARQUIVO_CAIXA)
'        If lErro = 0 Then gError 117528
'
'        For Each objTiposMeiosPagtos In gcolTiposMeiosPagtos
'            'Se for do tipo procurado
'            If objTiposMeiosPagtos.iTipo = iTipo Then sDescricao = objTiposMeiosPagtos.sDescricao
'         Next
'
'        'Abri vinculado
'        lErro = AFRAC_AbrirVinculado(CInt(lNumero), sDescricao, dPagTEF)
'        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Abrir Vinculado")
'        If lErro <> SUCESSO Then gError 109566
'
'        For iIndice2 = 1 To iIndice1
'            Do
'                bCont = True
'                'imprime a linha --> se erro sai
'                lErro = AFRAC_ImprimirVinculado(asReg(iIndice2))
'                If lErro <> SUCESSO Then
'                    'Impressora não responde
'                    vbMsg = Rotina_AvisoECF(vbYesNo, AVISO_IMPRESSORA_NAO_RESPONDE)
'                    If vbMsg = vbNo Then
'                        Call CF_ECF("Cancela_Venda", sRede, sNSU, sFim, dPagTEF)
'                        lNum = glNumProxIdentificacao
'                        bCon = False
'                        Call CF_ECF("ExcluiArq_Pagamento_TEF", lNum, bCon)
'                        gError 99803
'                    Else
'                        bCont = False
'                    End If
'                End If
'            Loop Until bCont
'        Next
'
'        lErro = AFRAC_FecharVinculado()
'        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Fechar Vinculado")
'        If lErro <> SUCESSO Then gError 99821
'
'        'se foi impresso com sucesso-->pode confirmar a venda.
'
'        'Abre o arquivo Temporário
'        Open ARQUIVO_TEF_TEMP For Append As #1
'
'        'Confirmação de venda e impressão
'        Print #1, "000-000 = CNF"
'        Print #1, "001-000 = " & CStr(glNumProxIdentificacao)
'        Print #1, "002-000 = " & CStr(lNumero)
'        Print #1, "010-000 = " & sRede
'        Print #1, "012-000 = " & sNSU
'        Print #1, "027-000 = " & sFim
'        Print #1, "999-999 = 0"
'
'        Close #1
'
'        'renomeando os arquivos
'        Name ARQUIVO_TEF_TEMP As ARQUIVO_TEF_REQ
'
'        lNum = glNumProxIdentificacao
'        bCon = True
'        Call CF_ECF("ExcluiArq_Pagamento_TEF", lNum, bCon)
'
'    Else
'        lNum = glNumProxIdentificacao
'        Call CF_ECF("Cancela_Venda", sRede, sNSU, sFim, dPagTEF)
'        bCon = False
'        Call CF_ECF("ExcluiArq_Pagamento_TEF", lNum, bCon)
'        gError 112395
'    End If
'
'    Pagamento_TEF = SUCESSO
'
'    Exit Function
'
'Erro_Pagamento_TEF:
'
'    Pagamento_TEF = gErr
'
'    Close #1
'
'    Select Case gErr
'
'        Case 99760
'            Call Rotina_ErroECF(vbOKOnly, ERRO_TEF_NAO_ATIVO, gErr)
'
'        Case 99803
'            Call Rotina_ErroECF(vbOKOnly, ERRO_IMPRESSORA_NAO_RESPONDE, gErr)
'
'        Case 109566, 112395, 112406 To 112409
'
'        Case 112410
'            Call Rotina_ErroECF(vbOKOnly, ERRO_ADMMEIOPAGTO_NAO_EXISTENTE, gErr)
'
'        Case 112411
'            Call Rotina_ErroECF(vbOKOnly, ERRO_PARCELAMENTO_NAO_EXISTENTE, gErr)
'
'        Case 117527
'            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, APLICACAO_ECF, "NumProxIdent", NOME_ARQUIVO_CAIXA)
'
'        Case 117528
'            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, APLICACAO_ECF, "CupomAberto", NOME_ARQUIVO_CAIXA)
'
'        Case Else
'            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149293)
'
'    End Select
'
'    Exit Function
'
'End Function

Function Bematech_Pagamento_TEF(ByVal sValorTotal As String, ByVal lNumero As Long) As Long
    
Dim sReg As String
Dim iLoop As Integer
Dim iIndice As Integer
Dim sTxt As String
Dim vbMsg As VbMsgBoxResult
Dim lErro As Long
Dim sRet As String
Dim sRede As String
Dim sNSU As String
Dim sFim As String
Dim objParcela As New ClassCarneParcelas
Dim sNomeArq As String

On Error GoTo Erro_Bematech_Pagamento_TEF
        
    'Adiciona na variável global
    glNumProxIdentificacao = glNumProxIdentificacao + 1
    
    'Atualiza o arquivo
    lErro = WritePrivateProfileString(APLICACAO_ECF, "NumProxIdent", CStr(glNumProxIdentificacao), NOME_ARQUIVO_CAIXA)
    If lErro = 0 Then gError 117529
    
    'funcao que cria/altera a chave e grava no caixaconfig.ini
    lErro = CF_ECF("CaixaConfig_Chave")
    If lErro <> SUCESSO Then gError 204270
    
    lErro = AFRAC_VendaCartao(glNumProxIdentificacao, sValorTotal)
    If lErro <> SUCESSO Then
        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Venda Cartão")
        If lErro <> SUCESSO Then gError 109693
    End If
            
    sNomeArq = gsDirMVTEF & "TEF" & CStr(Format(Date, "ddmmyy")) & (".txt")
    
    Open sNomeArq For Append As #1
    
    'Inseri no Arquivo
    Print #1, ABRE_TEF & vbKeyControl & glNumProxIdentificacao & vbKeyEscape & sValorTotal
        
    'Fecha o Arquivo
    Close #1
        
    'Abre o arquivo de resposta do gerenciador
    Open Arquivo_Tef_Resp2_Prop For Input As #1
    
    'Até chegar ao fim do arquivo
    Do While Not EOF(1)

        'Busca o próximo registro do arquivo
        Line Input #1, sReg
        
        If Mid(sReg, 1, 7) = "001-000" Then
            If right(sReg, Len(sReg) - 10) <> glNumProxIdentificacao Then
                sRet = ""
                Close #1
                Exit Do
            End If
        End If
        
        'Recolhe a rede
        If Mid(sReg, 1, 7) = "010-000" Then sRede = Mid(sReg, 11, Len(sReg) - 10)
            
        'número da NSU
        If Mid(sReg, 1, 7) = "012-000" Then sNSU = Mid(sReg, 11, Len(sReg) - 10)
        
    Loop
       
    Close #1
        
    Open sNomeArq For Append As #1
    
    'Inseri no Arquivo
    Print #1, DADOS_TEF & vbKeyControl & glNumProxIdentificacao & vbKeyEscape & sValorTotal & vbKeyEscape & sNSU & vbKeyEscape & lNumero & vbKeyEscape & Date & vbKeyEscape & CDbl(Time) & vbKeyEscape & sRede
        
    'Fecha o Arquivo
    Close #1
        
    Bematech_Pagamento_TEF = SUCESSO
    
    Exit Function
    
Erro_Bematech_Pagamento_TEF:
    
    Bematech_Pagamento_TEF = gErr
    
    Close #1
    
    Select Case gErr
            
        Case 109693, 204270

        Case 117529
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, APLICACAO_ECF, "NumProxIdent", NOME_ARQUIVO_CAIXA)

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149294)

    End Select
    
    Exit Function
         
End Function

Sub ExcluiArq_Pagamento_TEF(lNum As Long, bConfirma As Boolean)
    
Dim sNomeArq As String

    sNomeArq = gsDirMVTEF & "TEF" & CStr(Format(Date, "ddmmyy")) & (".txt")

    Open sNomeArq For Append As #10
    
    If bConfirma Then
        'Inseri no Arquivo
        Print #10, FECHA_TEF & Chr(vbKeyControl) & lNum & Chr(vbKeyEnd)
    Else
        'Inseri no Arquivo
        Print #10, CANCELA_TEF & Chr(vbKeyControl) & lNum & Chr(vbKeyEnd)
    End If
    
    'Fecha o Arquivo
    Close #10
        
End Sub

Function Grava_Venda_Arquivo(ByVal objVenda As ClassVenda) As Long
    
Dim objMovCaixa As ClassMovimentoCaixa
Dim objCheque As ClassChequePre
Dim objAdmMeioPagtoCondPagto As ClassAdmMeioPagtoCondPagto
Dim colRegistro As New Collection
Dim iIndice As Integer
Dim bAchou As Boolean
Dim bAchou1 As Boolean
Dim lNum As Long
Dim lErro As Long
Dim sRetorno As String
Dim lSequencial As Long
Dim colOrcamento As New Collection
Dim objVendaOrc As New ClassVenda
Dim lSequencialOrc As Long

On Error GoTo Erro_Grava_Venda_Arquivo
        
    'Função que Abre a Transação de Caixa, Identifica o Movimento dentro do Caixa
    lErro = CF_ECF("Caixa_Transacao_Abrir", lSequencial)
    If lErro <> SUCESSO Then gError 99938
        
    If glConexaoOrcPAF <> 0 Then
    
        'Abre a Transação
        Call CF_ECF("Caixa_Transacao_Abrir_Orc", lSequencialOrc)
    
    End If
        
    lErro = CF_ECF("Grava_Venda_Arquivo_EmTrans", objVenda)
    If lErro <> SUCESSO Then gError 204680
        
    If glConexaoOrcPAF <> 0 Then
    
        'Fecha a Transação
        lErro = CF_ECF("Caixa_Transacao_Fechar_Orc", lSequencialOrc)
        If lErro <> SUCESSO Then gError 204682
        
    End If
        
    'Fecha a Transação
    lErro = CF_ECF("Caixa_Transacao_Fechar", lSequencial)
    If lErro <> SUCESSO Then gError 99942
        
    Grava_Venda_Arquivo = SUCESSO
    
    Exit Function
    
Erro_Grava_Venda_Arquivo:
    
    Grava_Venda_Arquivo = gErr
    
    Select Case gErr
    
        Case 99938, 99942, 204680 To 204682
                
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149295)

    End Select
    
'    lSequencial = glSeqTransacaoAberta
    
    lErro = CF_ECF("Caixa_Transacao_Rollback", glTransacaoPAFECF)
    Call CF_ECF("Caixa_Transacao_Rollback", glTransacaoOrcPAFECF)
    
    Exit Function
    
End Function
        
        
Function Grava_Venda_Arquivo_EmTrans(ByVal objVenda As ClassVenda) As Long
    
Dim objMovCaixa As ClassMovimentoCaixa
Dim objCheque As ClassChequePre
Dim objAdmMeioPagtoCondPagto As ClassAdmMeioPagtoCondPagto
Dim colRegistro As New Collection
Dim iIndice As Integer
Dim iAchouAdmMeioPagto As Integer
Dim iAchouTipoMeioPagto As Integer
Dim lNum As Long
Dim lErro As Long
Dim sRetorno As String
Dim lSequencial As Long
Dim colOrcamento As New Collection
Dim objVendaOrc As New ClassVenda
Dim sNumeroSerie As String
Dim sMFAdicional As String
Dim sTipoECF As String
Dim sMarcaECF As String
Dim sModeloECF As String
Dim iNumeroUsuario As Integer
Dim alComando(1 To 13) As Long
Dim objProduto As New ClassProduto
Dim tMeioPagamento As typeMeioPagamento
Dim objItem As ClassItemCupomFiscal
Dim sEAD As String
Dim sTexto As String
Dim sSequencialECF As String
Dim objAdmMeioPagto As ClassAdmMeioPagto
Dim objTipoMeioPagto As ClassTMPLoja
Dim sProduto As String
Dim dValor As Double
Dim sAdmMeioPagto As String
Dim alComandoOrc(1 To 5) As Long
Dim sConteudo As String
Dim lTotRegMeioPagto As Long
Dim objItemNF As ClassItemNF
Dim lTotReg04 As Long
Dim lTotReg05 As Long
Dim lTotReg07 As Long
Dim lTotReg04BD As Long
Dim lTotReg05BD As Long
Dim lTotReg06BD As Long
Dim lTotReg07BD As Long

Dim sCodNacId As String
Dim sVersaoSB As String
Dim dtDataInstalacaoSB As Date
Dim sHoraInstalacaoSB As String
Dim sCNPJUsuario As String
Dim sCNPJ As String
Dim sIEUsuario As String
Dim sIE As String
Dim sSequencial As String
Dim dtHora As Date
Dim dtData As Date
Dim objConfiguracaoECF As New ClassConfiguracaoECF




On Error GoTo Erro_Grava_Venda_Arquivo_EmTrans
        
    If objVenda.objCupomFiscal.colItens.Count = 0 Then gError 654321
    
    If giOrcamentoECF <> CAIXA_SO_ORCAMENTO Then
        
        
       'Abre os  comandos
        For iIndice = LBound(alComando) To UBound(alComando)
            alComando(iIndice) = Comando_AbrirExt(glConexaoPAFECF)
            If alComando(iIndice) = 0 Then gError 207162
        Next
            
        If glConexaoOrcPAF <> 0 Then
        
            For iIndice = LBound(alComandoOrc) To UBound(alComandoOrc)
                alComandoOrc(iIndice) = Comando_AbrirExt(glConexaoOrcPAF)
                If alComandoOrc(iIndice) = 0 Then gError 204765
            Next
            
        End If
            
        For Each objMovCaixa In objVenda.colMovimentosCaixa
            objMovCaixa.lSequencial = lSequencial
            lSequencial = lSequencial + 1
        Next
        
        
        lErro = AFRAC_LerInformacaoImpressora("002", sNumeroSerie)
        If lErro <> SUCESSO Then
            lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Informação Impressora")
            If lErro <> SUCESSO Then gError 207163
        End If
    
        lErro = AFRAC_LerInformacaoImpressora("050", sMFAdicional)
        If lErro <> SUCESSO Then
            lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Informação Impressora")
            If lErro <> SUCESSO Then gError 207164
        End If
    
        lErro = AFRAC_RetornaTipoECF(sTipoECF)
        If lErro <> SUCESSO Then
            lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Retorna Tipo ECF")
            If lErro <> SUCESSO Then gError 207165
        End If
    
        lErro = AFRAC_RetornaMarcaECF(sMarcaECF)
        If lErro <> SUCESSO Then
            lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Retorna Marca ECF")
            If lErro <> SUCESSO Then gError 207166
        End If
    
        lErro = AFRAC_RetornaModeloECF(sModeloECF)
        If lErro <> SUCESSO Then
            lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Retorna Modelo ECF")
            If lErro <> SUCESSO Then gError 207167
        End If
    
        lErro = AFRAC_NumeroUsuario(iNumeroUsuario)
        If lErro <> SUCESSO Then
            lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Numero Usuario")
            If lErro <> SUCESSO Then gError 207168
        End If
        
        lErro = AFRAC_SequencialECF(sSequencialECF)
        If lErro <> SUCESSO Then
            lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Retorna Sequencial ECF")
            If lErro <> SUCESSO Then gError 210193
        End If
        
        
        If Not AFRAC_ImpressoraCFe(giCodModeloECF) Then
            objVenda.objCupomFiscal.sMarcaECF = sMarcaECF
            objVenda.objCupomFiscal.sTipoECF = sTipoECF
            objVenda.objCupomFiscal.sModeloECF = sModeloECF
            objVenda.objCupomFiscal.sNumSerieECF = sNumeroSerie
            objVenda.objCupomFiscal.iSequencialECF = StrParaInt(sSequencialECF)
        Else
            
            If objVenda.iTipo <> OPTION_ORCAMENTO Then
            
                If objVenda.objCupomFiscal.lNumero = 0 Then gError 201583
                
                If objVenda.objSATInfo.iEmuladorSefaz Then
                    sMarcaECF = StrParaInt(objVenda.objCupomFiscal.iCodCaixa)
                Else
                    sMarcaECF = objVenda.objCupomFiscal.sMarcaECF
                End If
                sTipoECF = objVenda.objCupomFiscal.sTipoECF
                If sTipoECF = "" Then sTipoECF = "CFe"
                sModeloECF = objVenda.objCupomFiscal.sModeloECF
                If sModeloECF = "" Then sModeloECF = CStr(giCodModeloECF)
                sNumeroSerie = objVenda.objCupomFiscal.sNumSerieECF
            
            End If
            
            lErro = Comando_Executar(alComando(13), "DELETE FROM MovimentoCaixaAtual")
            If lErro <> AD_SQL_SUCESSO Then gError 204613
            
        End If
        
        'Gera a string que vai ser adicionada no arquivo
        Call CF_ECF("Venda_Gera_Log", colRegistro, objVenda)
        
        'Grava no arquivo
        lErro = CF_ECF("MovimentoCaixaECF_Grava", colRegistro, objVenda)
        If lErro <> SUCESSO Then gError 99904

        If Not AFRAC_ImpressoraCFe(giCodModeloECF) Then
        
            sTexto = gdtDataAnterior & left(sNumeroSerie, 20) & sMFAdicional & left(sTipoECF, 7) & sMarcaECF & sModeloECF & iNumeroUsuario & _
                objVenda.objCupomFiscal.lCCF & objVenda.objCupomFiscal.lNumero & objVenda.objCupomFiscal.dtDataEmissao & objVenda.objCupomFiscal.dValorProdutos & objVenda.objCupomFiscal.dValorDesconto & IIf(objVenda.objCupomFiscal.dValorDesconto = 0, " ", "V") & objVenda.objCupomFiscal.dValorAcrescimo & IIf(objVenda.objCupomFiscal.dValorAcrescimo = 0, " ", "V") & objVenda.objCupomFiscal.dValorTotal & "N" & 0 & IIf(objVenda.objCupomFiscal.dValorAcrescimo <> 0, "A", IIf(objVenda.objCupomFiscal.dValorDesconto <> 0, "D", " ")) & objVenda.objCupomFiscal.sNomeCliente & objVenda.objCupomFiscal.sCPFCGC
            
            
            lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
            If lErro <> SUCESSO Then gError 210347
            
            'Insere o registro R04 ao executar uma venda por cupom fiscal
            lErro = Comando_Executar(alComando(1), "INSERT INTO R04 (DataMovimento, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, NumeroUsuario, CCF, COO, DataEmissao, Subtotal, Desconto, TipoDesconto, Acrescimo, TipoAcrescimo, ValorTotal, IndicadorCancelamento, ValorCancAcrescimo, OrdemDescAcresc, NomeAdiquirente, CPFCNPJ, EAD) " & _
            " VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                gdtDataAnterior, left(sNumeroSerie, 20), sMFAdicional, left(sTipoECF, 7), sMarcaECF, sModeloECF, iNumeroUsuario, _
                objVenda.objCupomFiscal.lCCF, objVenda.objCupomFiscal.lNumero, objVenda.objCupomFiscal.dtDataEmissao, objVenda.objCupomFiscal.dValorProdutos, objVenda.objCupomFiscal.dValorDesconto, IIf(objVenda.objCupomFiscal.dValorDesconto = 0, " ", "V"), objVenda.objCupomFiscal.dValorAcrescimo, IIf(objVenda.objCupomFiscal.dValorAcrescimo = 0, " ", "V"), objVenda.objCupomFiscal.dValorTotal, "N", 0, IIf(objVenda.objCupomFiscal.dValorAcrescimo <> 0, "A", IIf(objVenda.objCupomFiscal.dValorDesconto <> 0, "D", " ")), objVenda.objCupomFiscal.sNomeCliente, objVenda.objCupomFiscal.sCPFCGC, sEAD)
            If lErro <> AD_SQL_SUCESSO Then gError 207169
            
            lTotReg04 = lTotReg04 + 1
            
            For Each objItem In objVenda.objCupomFiscal.colItens
            
            
                sProduto = objItem.sProdutoNomeRed
                
                Call TP_Produto_Le_Col(gaobjProdutosReferencia, gaobjProdutosCodBarras, gaobjProdutosNome, sProduto, objProduto)
            
                sTexto = gdtDataAnterior & left(sNumeroSerie, 20) & sMFAdicional & left(sTipoECF, 7) & sMarcaECF & sModeloECF & iNumeroUsuario & _
                    objVenda.objCupomFiscal.lCCF & objVenda.objCupomFiscal.lNumero & objItem.iItem & objItem.sProduto & objProduto.sDescricao & objItem.dQuantidade & _
                    objProduto.sSiglaUMVenda & objItem.dPrecoUnitario & objItem.dValorDesconto & 0 & (objItem.dPrecoUnitario * objItem.dQuantidade) - objItem.dValorDesconto & _
                    objItem.sSituacaoTrib & IIf(objItem.iStatus = STATUS_CANCELADO, "S", "N") & 0 & 0 & 0 & objProduto.sTruncamento & IIf(objProduto.iCompras = 1, "T", "P") & 3 & 2
        
        
                If Len(objProduto.sSituacaoTribECF) = 1 And objProduto.sSituacaoTribECF <> "S" And objItem.iStatus <> STATUS_CANCELADO Then
                        objProduto.dQuantEstLoja = objProduto.dQuantEstLoja - objItem.dQuantidade
                End If
                
                lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
                If lErro <> SUCESSO Then gError 210348
            
                'Insere o registro R05 ao executar uma venda por cupom fiscal
                lErro = Comando_Executar(alComando(2), "INSERT INTO R05 (DataMovimento, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, NumeroUsuario, CCF, COO, Item, CodProduto, DescProduto, " & _
                "Quantidade, UM,  ValorUnitario, Desconto, Acrescimo, ValorTotal, TotalizadorParcial, IndicadorCancelamento, QuantidadeCancelada, ValorCancelado, ValorCancelAcrescimo, IAT, PPT, Casasdecimaisqtde, Casasdecimaisvalor, EAD) " & _
                " VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                    gdtDataAnterior, left(sNumeroSerie, 20), sMFAdicional, left(sTipoECF, 7), sMarcaECF, sModeloECF, iNumeroUsuario, _
                    objVenda.objCupomFiscal.lCCF, objVenda.objCupomFiscal.lNumero, objItem.iItem, objItem.sProduto, objProduto.sDescricao, objItem.dQuantidade, _
                    objProduto.sSiglaUMVenda, objItem.dPrecoUnitario, objItem.dValorDesconto, 0, (objItem.dPrecoUnitario * objItem.dQuantidade) - objItem.dValorDesconto, _
                    objItem.sSituacaoTrib, IIf(objItem.iStatus = STATUS_CANCELADO, "S", "N"), 0, 0, 0, objProduto.sTruncamento, IIf(objProduto.iCompras = 1, "T", "P"), 3, 2, sEAD)
                If lErro <> AD_SQL_SUCESSO Then gError 207187
                
                lTotReg05 = lTotReg05 + 1
            
                If objVenda.objCupomFiscal.objNF.lNumNotaFiscal <> 0 And objItem.iStatus <> STATUS_CANCELADO Then
                
                    Set objItemNF = New ClassItemNF
                    
                    With objItemNF
                    
                        .iItem = objItem.iItem
                        .sDescricaoItem = objItem.sProdutoNomeRed
                        .dQuantidade = objItem.dQuantidade
                        .dPrecoUnitario = objItem.dPrecoUnitario
            
                    End With
            
                    objVenda.objCupomFiscal.objNF.ColItensNF.Add1 objItemNF
                
                End If
                
            Next
            
            If objVenda.objCupomFiscal.objNF.lNumNotaFiscal <> 0 Then
                
                lErro = NFD2_Grava_Trans(objVenda.objCupomFiscal.objNF)
                If lErro <> SUCESSO Then gError 207187
                
            End If
            
        End If
            
        For Each objMovCaixa In objVenda.colMovimentosCaixa
        
            iAchouAdmMeioPagto = 0
        
        
            If objMovCaixa.iTipo = MOVIMENTOCAIXA_TROCO_DINHEIRO Then
                objMovCaixa.dValor = -objMovCaixa.dValor
            End If
        
            For Each objAdmMeioPagto In gcolAdmMeioPagto
        
                If objAdmMeioPagto.iCodigo = objMovCaixa.iAdmMeioPagto Then
                    iAchouAdmMeioPagto = 1
                    sAdmMeioPagto = objAdmMeioPagto.sNome
                    Exit For
                End If
        
            Next
        
            iAchouTipoMeioPagto = 0
        
            If iAchouAdmMeioPagto = 1 Then
            
                For Each objTipoMeioPagto In gcolTiposMeiosPagtos
                    If objTipoMeioPagto.iTipo = objAdmMeioPagto.iTipoMeioPagto Then
                        iAchouTipoMeioPagto = 1
                        Exit For
                    End If
                Next
                
            Else
            
                If objMovCaixa.iTipo = MOVIMENTOCAIXA_RECEB_CARTAOCREDITO Or objMovCaixa.iTipo = MOVIMENTOCAIXA_CANC_RECEB_CARTAOCREDITO Then
                    For Each objTipoMeioPagto In gcolTiposMeiosPagtos
                        If objTipoMeioPagto.iTipo = TIPOMEIOPAGTOLOJA_CARTAO_CREDITO Then
                            iAchouTipoMeioPagto = 1
                            Exit For
                        End If
                    Next
                ElseIf objMovCaixa.iTipo = MOVIMENTOCAIXA_RECEB_CARTAODEBITO Or objMovCaixa.iTipo = MOVIMENTOCAIXA_CANC_RECEB_CARTAODEBITO Then
                    For Each objTipoMeioPagto In gcolTiposMeiosPagtos
                        If objTipoMeioPagto.iTipo = TIPOMEIOPAGTOLOJA_CARTAO_DEBITO Then
                            iAchouTipoMeioPagto = 1
                            Exit For
                        End If
                    Next
                ElseIf objMovCaixa.iTipo = MOVIMENTOCAIXA_RECEB_VALETICKET Then
                    For Each objTipoMeioPagto In gcolTiposMeiosPagtos
                        If objTipoMeioPagto.iTipo = TIPOMEIOPAGTOLOJA_VALE_TICKET Then
                            iAchouTipoMeioPagto = 1
                            Exit For
                        End If
                    Next
                ElseIf objMovCaixa.iTipo = MOVIMENTOCAIXA_RECEB_OUTROS Then
                    For Each objTipoMeioPagto In gcolTiposMeiosPagtos
                        If objTipoMeioPagto.iTipo = TIPOMEIOPAGTOLOJA_OUTROS Then
                            iAchouTipoMeioPagto = 1
                            Exit For
                        End If
                    Next
                    
                End If
            
            End If
            
            If iAchouTipoMeioPagto = 1 Then
        
                If Not AFRAC_ImpressoraCFe(giCodModeloECF) Then
        
        
                    lErro = Comando_ExecutarPos(alComando(7), "SELECT Valor FROM R07 WHERE DataMovimento = ? AND NumeroSerie = ? AND MFAdicional = ? AND TipoECF = ? AND MarcaECF = ? AND ModeloECF = ? AND COO = ? AND MeioPagamento = ?", 0, _
                    dValor, gdtDataAnterior, left(sNumeroSerie, 20), sMFAdicional, left(sTipoECF, 7), sMarcaECF, sModeloECF, objVenda.objCupomFiscal.lNumero, left(objTipoMeioPagto.sDescricao, 15))
                    If lErro <> AD_SQL_SUCESSO Then gError 210788
            
                    lErro = Comando_BuscarPrimeiro(alComando(7))
                    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210789
            
                    If lErro = AD_SQL_SEM_DADOS Then
            
                        sTexto = gdtDataAnterior & left(sNumeroSerie, 20) & sMFAdicional & left(sTipoECF, 7) & sMarcaECF & sModeloECF & iNumeroUsuario & _
                            objVenda.objCupomFiscal.lNumero & objVenda.objCupomFiscal.lCCF & 0 & objTipoMeioPagto.sDescricao & objMovCaixa.dValor & "N" & 0
            
                        
                        lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
                        If lErro <> SUCESSO Then gError 210349
            
            
                        'Insere o registro R05 ao executar uma venda por cupom fiscal
                        lErro = Comando_Executar(alComando(3), "INSERT INTO R07 (DataMovimento, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, NumeroUsuario, COO, CCF, GNF, MeioPagamento, Valor, IndicadorEstorno, ValorEstorno, EAD)" & _
                        " VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                            gdtDataAnterior, left(sNumeroSerie, 20), sMFAdicional, left(sTipoECF, 7), sMarcaECF, sModeloECF, iNumeroUsuario, _
                            objVenda.objCupomFiscal.lNumero, objVenda.objCupomFiscal.lCCF, 0, left(objTipoMeioPagto.sDescricao, 15), objMovCaixa.dValor, "N", 0, sEAD)
                        If lErro <> AD_SQL_SUCESSO Then gError 207188
                        
                        lTotReg07 = lTotReg07 + 1
            
                    Else
                    
                            sTexto = gdtDataAnterior & left(sNumeroSerie, 20) & sMFAdicional & left(sTipoECF, 7) & sMarcaECF & sModeloECF & iNumeroUsuario & _
                                objVenda.objCupomFiscal.lNumero & objVenda.objCupomFiscal.lCCF & 0 & objTipoMeioPagto.sDescricao & objMovCaixa.dValor + dValor & "N" & 0
                            
                            lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
                            If lErro <> SUCESSO Then gError 210806
                    
                            lErro = Comando_ExecutarPos(alComando(8), "UPDATE R07 SET Valor = ?, EAD = ? ", alComando(7), objMovCaixa.dValor + dValor, sEAD)
                            If lErro <> AD_SQL_SUCESSO Then gError 210790
                    End If
        
                    lErro = Comando_Executar(alComandoOrc(5), "SELECT Valor FROM MeioPagamento WHERE DataMovimento = ? AND CodTipoDocumento = 1 AND MeioPagamento = ?", tMeioPagamento.dValor, gdtDataAnterior, objTipoMeioPagto.sDescricao)
                    If lErro <> AD_SQL_SUCESSO Then gError 207275
            
                    lErro = Comando_BuscarPrimeiro(alComandoOrc(5))
                    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 207276
            
            
                    If lErro = AD_SQL_SEM_DADOS Then
            
                        sTexto = CStr(gdtDataAnterior) & "1" & objTipoMeioPagto.sDescricao & CStr(objMovCaixa.dValor)
                        
                        
                        
                        lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
                        If lErro <> SUCESSO Then gError 214060
            
                        lErro = Comando_Executar(alComandoOrc(1), "INSERT INTO MeioPagamento (DataMovimento, CodTipoDocumento, MeioPagamento, Valor, EAD)" & _
                        " VALUES (?,?,?,?,?)", _
                            gdtDataAnterior, 1, objTipoMeioPagto.sDescricao, objMovCaixa.dValor, sEAD)
                        If lErro <> AD_SQL_SUCESSO Then gError 210786
            
            
                        sConteudo = String(STRING_BUFFER_MAX_TEXTO, 0)
                    
                        'Pesquisa o número automático que está no BD para giFilialEmpresa
                        lErro = Comando_ExecutarPos(alComandoOrc(2), "SELECT Conteudo FROM OrcamentoConfig WHERE Codigo = 'TOT_REG_MEIOPAGAMENTO' AND FilialEmpresa = 0", 0, sConteudo)
                        If lErro <> AD_SQL_SUCESSO Then gError 214151
                    
                        'Le o registro com o número automático
                        lErro = Comando_BuscarPrimeiro(alComandoOrc(2))
                        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 214152
                        If lErro = AD_SQL_SEM_DADOS And giFilialEmpresa = EMPRESA_TODA Then gError 214153
        
                        lTotRegMeioPagto = StrParaLong(sConteudo) + 1
            
            
                        lErro = Comando_ExecutarPos(alComandoOrc(3), "UPDATE OrcamentoConfig SET Conteudo = ?", alComandoOrc(2), lTotRegMeioPagto)
                        If lErro <> AD_SQL_SUCESSO Then gError 214154
            
            
    '                    If objMovCaixa.iAdmMeioPagto = 0 Then
    '
    '                        lErro = Comando_Executar(alComando(5), "INSERT INTO MeioPagamento (DataMovimento, CodTipoDocumento, TipoMeioPagto, AdmMeioPagto, MeioPagamento, Valor)" & _
    '                        " VALUES (?,?,?,?,?,?)", _
    '                            gdtDataAnterior, 1, objTipoMeioPagto.iTipo, objMovCaixa.iAdmMeioPagto, objTipoMeioPagto.sDescricao, objMovCaixa.dValor)
    '                        If lErro <> AD_SQL_SUCESSO Then gError 210786
    '
    '                    Else
    '
    '                        lErro = Comando_Executar(alComando(5), "INSERT INTO MeioPagamento (DataMovimento, TipoDocumento, TipoMeioPagto, AdmMeioPagto, MeioPagamento, Valor)" & _
    '                        " VALUES (?,?,?,?,?,?)", _
    '                            gdtDataAnterior, 1, objTipoMeioPagto.iTipo, objMovCaixa.iAdmMeioPagto, objTipoMeioPagto.sDescricao & IIf(objTipoMeioPagto.iTipo = 4 Or objTipoMeioPagto.iTipo = 5 Or objTipoMeioPagto.iTipo = 6 Or objTipoMeioPagto.iTipo = 8, " - " & objAdmMeioPagto.sNome, ""), objMovCaixa.dValor)
    '                        If lErro <> AD_SQL_SUCESSO Then gError 207277
    '
    '                    End If
                        
                    Else
                    
        '                If objMovCaixa.iAdmMeioPagto = 0 Then
        '
        '                    lErro = Comando_Executar(alComando(6), "UPDATE MeioPagamento SET MeioPagamento = ?, Valor = Valor + ? WHERE DataMovimento = ? AND TipoDocumento = 'ECF' AND TipoMeioPagto = ? AND AdmMeioPagto = ?", objTipoMeioPagto.sDescricao, objMovCaixa.dValor, objVenda.objCupomFiscal.dtDataEmissao, objTipoMeioPagto.iTipo, objMovCaixa.iAdmMeioPagto)
        '                    If lErro <> AD_SQL_SUCESSO Then gError 210787
        '
        '                Else
                    
                            
                        sTexto = CStr(gdtDataAnterior) & "1" & objTipoMeioPagto.sDescricao & CStr(tMeioPagamento.dValor + objMovCaixa.dValor)
                        
                        lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
                        If lErro <> SUCESSO Then gError 214061
                            
                        lErro = Comando_Executar(alComandoOrc(4), "UPDATE MeioPagamento SET Valor = ?, EAD = ? WHERE DataMovimento = ? AND CodTipoDocumento = 1 AND MeioPagamento = ?", tMeioPagamento.dValor + objMovCaixa.dValor, sEAD, gdtDataAnterior, objTipoMeioPagto.sDescricao)
                        If lErro <> AD_SQL_SUCESSO Then gError 207278
                            
        '                End If
                    End If
        
                End If
        
            End If
        
        Next
        
        lErro = AFRAC_LerInformacaoImpressora("003", sVersaoSB)
        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Informação Impressora")
        If lErro <> SUCESSO Then gError 207235
    
        lErro = AFRAC_DataInstalacaoSB(dtDataInstalacaoSB)
        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Data Instalação SB")
        If lErro <> SUCESSO Then gError 207236
    
        lErro = AFRAC_HoraInstalacaoSB(sHoraInstalacaoSB)
        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Hora Instalação SB")
        If lErro <> SUCESSO Then gError 207237
    
        dtHora = StrParaDate(left(sHoraInstalacaoSB, 2) & ":" & Mid(sHoraInstalacaoSB, 3, 2) & ":" & right(sHoraInstalacaoSB, 2))

        lErro = AFRAC_SequencialECF(sSequencial)
        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Retorna Sequencial ECF")
        If lErro <> SUCESSO Then gError 207238
    
        lErro = AFRAC_LerInformacaoImpressora("004", sCNPJUsuario)
        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Informação Impressora")
        If lErro <> SUCESSO Then gError 207239
    
        sCNPJ = sCNPJUsuario
        sCNPJUsuario = ""
    
        Call Formata_String_Numero(sCNPJ, sCNPJUsuario)
    

        lErro = AFRAC_LerInformacaoImpressora("005", sIEUsuario)
        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Informação Impressora")
        If lErro <> SUCESSO Then gError 207240
    
        sIE = sIEUsuario
        sIEUsuario = ""
    
        Call Formata_String_Numero(sIE, sIEUsuario)
    
        lErro = AFRAC_NumeroUsuario(iNumeroUsuario)
        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Numero Usuario")
        If lErro <> SUCESSO Then gError 207241


        '****mario *** colocar a chamada as funções que geram o arquivo do ANEXO IV
        lErro = CF_ECF("ConfiguracaoECF_Le", objConfiguracaoECF)
        If lErro <> SUCESSO Then gError 210438
        
        If Not AFRAC_ImpressoraCFe(giCodModeloECF) Then
        
            lErro = AFRAC_CodigoNacionalIdentificacao(sCodNacId)
            lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Codigo Nacional Identificação")
            If lErro <> SUCESSO Then gError 207229
    
        
            'seleciona os registros R01
            lErro = Comando_Executar(alComando(10), "SELECT Data, TotRegR04, TotRegR05, TotRegR06, TotRegR07 FROM R01 WHERE Data = ? AND NumeroSerie = ? AND MFAdicional = ? AND TipoECF = ? AND MarcaECF = ? AND ModeloECF = ? ", _
            dtData, lTotReg04BD, lTotReg05BD, lTotReg06BD, lTotReg07BD, gdtDataAnterior, left(sNumeroSerie, 20), sMFAdicional, left(sTipoECF, 7), sMarcaECF, sModeloECF)
            If lErro <> AD_SQL_SUCESSO Then gError 210794
            
            lErro = Comando_BuscarPrimeiro(alComando(10))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210795
        
            If lErro = AD_SQL_SEM_DADOS Then
        
                'Insere o registro R01
                lErro = Comando_Executar(alComando(11), "INSERT INTO R01 (Data, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, VersaoSB, DataInstalacaoSB, HoraInstalacaoSB, SequencialECF, CNPJUsu, InscEstadualUsu, CNPJDesenv, InscEstadualDesenv, InscMunicipalDesenv, " & _
                " NomeDesenv, NomePAFECF, VersaoPAFECF, CodigoMD5,  VersaoERPAFECF, CodNacId)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                    gdtDataAnterior, left(sNumeroSerie, 20), sMFAdicional, left(sTipoECF, 7), sMarcaECF, sModeloECF, sVersaoSB, dtDataInstalacaoSB, Format(dtHora, "hh:mm:ss"), CInt(left(sSequencial, 3)), sCNPJUsuario, sIEUsuario, objConfiguracaoECF.sCNPJDesenv, objConfiguracaoECF.sIEDesenv, objConfiguracaoECF.sIMDesenv, objConfiguracaoECF.sRazaoSocialDesenv, objConfiguracaoECF.sNomePAFECF, objConfiguracaoECF.sVersaoPAFECF, gsMD5PAFECF, objConfiguracaoECF.sVersaoEspReqPAFECF, sCodNacId)
                If lErro <> AD_SQL_SUCESSO Then gError 207242
            
            
            End If
            
            
            sTexto = gdtDataAnterior & left(sNumeroSerie, 20) & sMFAdicional & left(sTipoECF, 7) & sMarcaECF & sModeloECF & sVersaoSB & dtDataInstalacaoSB & Format(dtHora, "hh:mm:ss") & CInt(left(sSequencial, 3)) & sCNPJUsuario & sIEUsuario & objConfiguracaoECF.sCNPJDesenv & objConfiguracaoECF.sIEDesenv & objConfiguracaoECF.sIMDesenv & objConfiguracaoECF.sRazaoSocialDesenv & objConfiguracaoECF.sNomePAFECF & objConfiguracaoECF.sVersaoPAFECF & gsMD5PAFECF & objConfiguracaoECF.sVersaoEspReqPAFECF & sCodNacId
            sTexto = sTexto & "0" & "0" & lTotReg04 + lTotReg04BD & lTotReg05 + lTotReg05BD & lTotReg06BD & lTotReg07 + lTotReg07BD
            
            
            lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
            If lErro <> SUCESSO Then gError 210331
            
            lErro = Comando_Executar(alComando(12), "UPDATE R01 SET TotRegR04 = ?, TotRegR05 = ?, TotRegR07 = ?, EAD = ? WHERE  Data = ? AND NumeroSerie = ? AND MFAdicional = ? AND TipoECF = ? AND MarcaECF = ? AND ModeloECF = ? ", _
                lTotReg04 + lTotReg04BD, lTotReg05 + lTotReg05BD, lTotReg07 + lTotReg07BD, sEAD, gdtDataAnterior, left(sNumeroSerie, 20), sMFAdicional, left(sTipoECF, 7), sMarcaECF, sModeloECF)
            If lErro <> AD_SQL_SUCESSO Then gError 210375
        
'            Call MovimentoPorECF_Grava_Testa(gdtDataAnterior)
        
            Set colRegistro = New Collection
            
            lSequencial = lSequencial - 1
            
        End If
            
        'se tiver um orcamento associado ao cupom fiscal
        If objVenda.objCupomFiscal.lNumOrcamento <> 0 Then
        
            'se o numero do cupom fiscal estiver preenchido
            If objVenda.objCupomFiscal.lNumero <> 0 Then
                'grava no orcamento seja prevenda ou DAV o numero do cupom fiscal que esta ligado ao orcamento, o cliente, cnpj
                lErro = CF_ECF("Altera_DAV", objVenda)
                If lErro <> SUCESSO Then gError 204310
        
            End If
        
            lErro = CF_ECF("Caixa_Exclui_Orcamento_EmTrans", objVenda)
            If lErro <> SUCESSO And lErro <> 105761 Then gError 210515
        
        
        End If
            
        '
        '        objVendaOrc.objCupomFiscal.lNumOrcamento = objVenda.objCupomFiscal.lNumOrcamento
        '
        '        'le os registros do orcamento e loca o arquivo
        '        lErro = CF_ECF("OrcamentoECF_Le", objVendaOrc)
        '        If lErro <> SUCESSO And lErro <> 204690 Then gError 204310
        '
        '        If lErro = SUCESSO Then
        '
        '
        '            'guarda no orcamento o numero do cupom fiscal - PAFECF
        '            objVendaOrc.objCupomFiscal.lNumero = objVenda.objCupomFiscal.lNumero
        '
        '            'exclui o  orcamento e grava novamente contendo a informacao.
        '            lErro = CF_ECF("Grava_Orcamento_ECF1_EmTrans", objVendaOrc)
        '            If lErro <> SUCESSO Then gError 204308
        '
        '
        '        End If
        '
        '
        '    End If
            
        If Not AFRAC_ImpressoraCFe(giCodModeloECF) Then
            
            lErro = CF_ECF("Requisito_XXII_AtualizaGT")
            If lErro <> SUCESSO Then gError 210031
            
            lErro = CF_ECF("Requisito_VII_Item8_E3")
            If lErro <> SUCESSO Then gError 210205
    
        End If
    
        For iIndice = LBound(alComando) To UBound(alComando)
            Call Comando_Fechar(alComando(iIndice))
        Next
        
        If glConexaoOrcPAF <> 0 Then
        
            For iIndice = LBound(alComandoOrc) To UBound(alComandoOrc)
                Call Comando_Fechar(alComandoOrc(iIndice))
            Next
    
        End If
    
    Else
        
        Call CF_ECF("Trata_Caixa_So_Orcamento")
    
    End If
    
    Grava_Venda_Arquivo_EmTrans = SUCESSO
    
    Exit Function
    
Erro_Grava_Venda_Arquivo_EmTrans:
    
    Grava_Venda_Arquivo_EmTrans = gErr
    
    Select Case gErr
    
        Case 99904, 99938, 99942, 204308, 204310, 207163 To 207168, 210031, 210205, 210347 To 210349, 210515, 210806, 214060, 214061
                
        Case 201583
            Call Rotina_ErroECF(vbOKOnly, ERRO_NFCE_NAO_AUTORIZADA, gErr)
                
        Case 207162, 654321
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)
                
        Case 207169
            Call Rotina_ErroECF(vbOKOnly, ERRO_INCLUSAO_R04, gErr)
                
        Case 207187
            Call Rotina_ErroECF(vbOKOnly, ERRO_INCLUSAO_R05, gErr)
                
        Case 207188
            Call Rotina_ErroECF(vbOKOnly, ERRO_INCLUSAO_R07, gErr)
                
        Case 207275, 207276
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_MEIOPAGAMENTO, gErr)
                
        Case 207277, 210786
            Call Rotina_ErroECF(vbOKOnly, ERRO_INCLUSAO_MEIOPAGAMENTO, gErr)
                
        Case 207278, 210787
            Call Rotina_ErroECF(vbOKOnly, ERRO_ALTERACAO_MEIOPAGAMENTO, gErr)
            
        Case 210788, 210789
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_R07, gErr)
                
        Case 210790
            Call Rotina_ErroECF(vbOKOnly, ERRO_ALTERACAO_R07, gErr)
                
        Case 214068
            Call Rotina_ErroECF(vbOKOnly, ERRO_ALTERACAO_CONFIGURACAOECF, gErr)
                
        Case 214151 To 214153
            Call Rotina_ErroECF(vbOKOnly, ERRO_ECF_LEITURA_TABELA_CONFIG, gErr, "OrcamentoConfig", "TOT_REG_MEIOPAGAMENTO")

        Case 214154
            Call Rotina_ErroECF(vbOKOnly, ERRO_ALTERACAO_TABELA_CONFIG, gErr, "OrcamentoConfig", "TOT_REG_MEIOPAGAMENTO")
                
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149295)

    End Select
    
    'se nao for nfce nao autorizada
    If lErro <> 201583 Then
    
        'cancelar o Cupom de Venda
        lErro = AFRAC_CancelarCupom(Nothing, objVenda)
        If lErro <> SUCESSO Then
            lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Cancelar Cupom")
            If lErro <> SUCESSO Then gError 99610
        End If
        
        Call CF_ECF("Requisito_XXII_AtualizaGT")
    
    End If
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    If glConexaoOrcPAF <> 0 Then
    
        For iIndice = LBound(alComandoOrc) To UBound(alComandoOrc)
            Call Comando_Fechar(alComandoOrc(iIndice))
        Next
    
    End If
    
    Exit Function
    
End Function
                        

Sub Atualiza_Movimentos_Memoria(ByVal objVenda As ClassVenda)
    
Dim objMovCaixa As ClassMovimentoCaixa
Dim objCheque As ClassChequePre
Dim objAdmMeioPagtoCondPagto As ClassAdmMeioPagtoCondPagto
Dim iIndice As Integer
Dim bAchou As Boolean
Dim bAchou1 As Boolean
Dim objCarne As ClassCarne
Dim objCarneParc As ClassCarneParcelas
Dim lErro As Long
Dim objAdmMeioPagto As New ClassAdmMeioPagto
Dim objAliquota As New ClassAliquotaICMS
Dim objItens As ClassItemCupomFiscal
Dim objAdmMeioPagtoCondPagto1 As New ClassAdmMeioPagtoCondPagto

Dim objadmMeioPagtoCondAux As ClassAdmMeioPagtoCondPagto

On Error GoTo Erro_Atualiza_Movimentos_Memoria
        
    bAchou = False
    
    'Para cada movimento da venda
    For Each objMovCaixa In objVenda.colMovimentosCaixa
        bAchou = False
        'Se for de cartao de crédito ou débito especificado
        If (objMovCaixa.iTipo = MOVIMENTOCAIXA_RECEB_CARTAOCREDITO Or objMovCaixa.iTipo = MOVIMENTOCAIXA_RECEB_CARTAODEBITO Or objMovCaixa.iTipo = MOVIMENTOCAIXA_CANC_RECEB_CARTAOCREDITO Or objMovCaixa.iTipo = MOVIMENTOCAIXA_CANC_RECEB_CARTAODEBITO) And objMovCaixa.iAdmMeioPagto <> 0 Then
            'Busca em gcolCartão a ocorrencia de Cartão especificado
            For Each objAdmMeioPagtoCondPagto In gcolCartao
                'Se encontrou
                If objAdmMeioPagtoCondPagto.iAdmMeioPagto = objMovCaixa.iAdmMeioPagto And objAdmMeioPagtoCondPagto.iParcelamento = objMovCaixa.iParcelamento And (objAdmMeioPagtoCondPagto.iTipoCartao = objMovCaixa.iTipoCartao Or objMovCaixa.iTipoCartao = TIPO_TEF) And _
                objMovCaixa.dtDataPreDatado = objAdmMeioPagtoCondPagto.dtDataPreDatado Then ' And objAdmMeioPagtoCondPagto.iOrigem = OPTION_CF Then
                    'Atualiza o saldo do cartão
                    objAdmMeioPagtoCondPagto.dSaldo = objAdmMeioPagtoCondPagto.dSaldo + objMovCaixa.dValor
                    bAchou = True
                    Exit For
                End If
            Next
            
            If Not (bAchou) And objMovCaixa.dtDataPreDatado = DATA_NULA Then gError 133292
            
            'se Não achou
            If Not (bAchou) Then
                'Cria um obj sobre o cartão/parcelamento em questão
                Set objAdmMeioPagtoCondPagto = New ClassAdmMeioPagtoCondPagto

                For Each objAdmMeioPagto In gcolAdmMeioPagto
                    If objAdmMeioPagto.iCodigo = objMovCaixa.iAdmMeioPagto Then
                        objAdmMeioPagtoCondPagto.sNomeAdmMeioPagto = objAdmMeioPagto.sNome
                        For Each objAdmMeioPagtoCondPagto1 In objAdmMeioPagto.colCondPagtoLoja
                            If objAdmMeioPagtoCondPagto1.iParcelamento = objMovCaixa.iParcelamento And objAdmMeioPagtoCondPagto1.iPreDatado = 1 Then
                                objAdmMeioPagtoCondPagto.sNomeParcelamento = objAdmMeioPagtoCondPagto1.sNomeParcelamento
                                Exit For
                            End If
                        Next
                    End If
                Next

                'Preenche com os dados dessa venda
                objAdmMeioPagtoCondPagto.iAdmMeioPagto = objMovCaixa.iAdmMeioPagto
                objAdmMeioPagtoCondPagto.iParcelamento = objMovCaixa.iParcelamento
                objAdmMeioPagtoCondPagto.dSaldo = objMovCaixa.dValor
                objAdmMeioPagtoCondPagto.iPreDatado = objAdmMeioPagtoCondPagto1.iPreDatado
                objAdmMeioPagtoCondPagto.dtDataPreDatado = objMovCaixa.dtDataPreDatado
                objAdmMeioPagtoCondPagto.iTipoCartao = objMovCaixa.iTipoCartao
                objAdmMeioPagtoCondPagto.iOrigem = OPTION_CF

                'Adiciona essa informação na coleção global de cartões
                gcolCartao.Add objAdmMeioPagtoCondPagto
            End If
        End If
        
        'Jogo esse movimenot na coleção global de movimentos
        gcolMovimentosCaixa.Add objMovCaixa
        
        bAchou = False
        'Se o omvimento for de cartão de crédito não especificado
        If (objMovCaixa.iTipo = MOVIMENTOCAIXA_RECEB_CARTAOCREDITO Or objMovCaixa.iTipo = MOVIMENTOCAIXA_CANC_RECEB_CARTAOCREDITO) And objMovCaixa.iAdmMeioPagto = 0 Then
            'inclui na col como não especificado
            For Each objAdmMeioPagtoCondPagto In gcolCartao
                If objAdmMeioPagtoCondPagto.sNomeAdmMeioPagto = STRING_NAO_DETALHADO_CCREDITO Then 'And objAdmMeioPagtoCondPagto.iOrigem = OPTION_CF Then
                    'Atualiza o saldo de não especificado
                    objAdmMeioPagtoCondPagto.dSaldo = objAdmMeioPagtoCondPagto.dSaldo + objMovCaixa.dValor
                    bAchou = True
                    Exit For
                End If
            Next
            
            'se Não achou
            If Not (bAchou) Then gError 133293
            
'            'se Não achou
'            If Not (bAchou) Then
'                'Cria um obj sobre o cartão/parcelamento em questão
'                Set objAdmMeioPagtoCondPagto = New ClassAdmMeioPagtoCondPagto
'
'                'Preenche com os dados dessa venda
'                objAdmMeioPagtoCondPagto.dSaldo = objMovCaixa.dValor
'                objAdmMeioPagtoCondPagto.iTipoCartao = objMovCaixa.iTipoCartao
'                objAdmMeioPagtoCondPagto.sNomeAdmMeioPagto = STRING_NAO_DETALHADO_CCREDITO
'                objAdmMeioPagtoCondPagto.iOrigem = OPTION_CF
'
'                'Adiciona essa informação na coleção global de cartões
'                gcolCartao.Add objAdmMeioPagtoCondPagto
'            End If
            
        End If
        
        bAchou = False
        
        'Se o omvimento for de cartão de débito não especificado
        If (objMovCaixa.iTipo = MOVIMENTOCAIXA_RECEB_CARTAODEBITO Or objMovCaixa.iTipo = MOVIMENTOCAIXA_CANC_RECEB_CARTAODEBITO) And objMovCaixa.iAdmMeioPagto = 0 Then
            'inclui na col como não especificado
            For Each objAdmMeioPagtoCondPagto In gcolCartao
                If objAdmMeioPagtoCondPagto.sNomeAdmMeioPagto = STRING_NAO_DETALHADO_CDEBITO Then ' And objAdmMeioPagtoCondPagto.iOrigem = OPTION_CF Then
                    'Atualiza o saldo de não especificado
                    objAdmMeioPagtoCondPagto.dSaldo = objAdmMeioPagtoCondPagto.dSaldo + objMovCaixa.dValor
                    bAchou = True
                    Exit For
                End If
            Next
            
            'se Não achou
            If Not (bAchou) Then gError 133294
            
'            'se Não achou
'            If Not (bAchou) Then
'                'Cria um obj sobre o cartão/parcelamento em questão
'                Set objAdmMeioPagtoCondPagto = New ClassAdmMeioPagtoCondPagto
'
'                'Preenche com os dados dessa venda
'                objAdmMeioPagtoCondPagto.dSaldo = objMovCaixa.dValor
'                objAdmMeioPagtoCondPagto.iTipoCartao = objMovCaixa.iTipoCartao
'                objAdmMeioPagtoCondPagto.sNomeAdmMeioPagto = STRING_NAO_DETALHADO_CDEBITO
'                objAdmMeioPagtoCondPagto.iOrigem = OPTION_CF
'
'                'Adiciona essa informação na coleção global de cartões
'                gcolCartao.Add objAdmMeioPagtoCondPagto
'            End If
        End If
    Next
    
    'Para cada movimento
    For iIndice = objVenda.colMovimentosCaixa.Count To 1 Step -1
        'Pega o movimento
        Set objMovCaixa = objVenda.colMovimentosCaixa.Item(iIndice)
        'Se for um recebimento em ticket
        If objMovCaixa.iTipo = MOVIMENTOCAIXA_RECEB_VALETICKET Then
            'Se for não especificado
            If objMovCaixa.iAdmMeioPagto = 0 Then
                'Para cada obj de ticket da coleção global de tickets
                For Each objAdmMeioPagtoCondPagto In gcolTicket
                    'Se for o não especificado
                    If objAdmMeioPagtoCondPagto.iAdmMeioPagto = 0 Then
                        'Atualiza o saldo de não especificado
                        objAdmMeioPagtoCondPagto.dSaldo = objAdmMeioPagtoCondPagto.dSaldo + objMovCaixa.dValor
                        Exit For
                    End If
                Next
            'Se for especificado
            Else
            
                bAchou1 = False
            
                'Para cada Ticket da coleção global
                For Each objAdmMeioPagtoCondPagto In gcolTicket
                    'Se encontrou o ticket/parcelamento
                    If objAdmMeioPagtoCondPagto.iAdmMeioPagto = objMovCaixa.iAdmMeioPagto And objAdmMeioPagtoCondPagto.iParcelamento = objMovCaixa.iParcelamento Then ' And objAdmMeioPagtoCondPagto.iOrigem = OPTION_CF Then
                        'Atualiza o saldo
                        objAdmMeioPagtoCondPagto.dSaldo = objAdmMeioPagtoCondPagto.dSaldo + objMovCaixa.dValor
                        'Sinaliza que encontrou
                        bAchou1 = True
                        Exit For
                    End If
                Next
                
            'se Não achou
            If Not (bAchou1) Then gError 133295
                
'                'Se econtrou
'                If Not bAchou1 Then
'                    'cria um novo ojb com dados do Ticket
'                    Set objAdmMeioPagtoCondPagto = New ClassAdmMeioPagtoCondPagto
'                    'Carrega o obj
'
'                    For Each objAdmMeioPagto In gcolAdmMeioPagto
'                        If objAdmMeioPagto.iCodigo = objMovCaixa.iAdmMeioPagto Then
'                            objAdmMeioPagtoCondPagto.sNomeAdmMeioPagto = objAdmMeioPagto.sNome
'                            For Each objAdmMeioPagtoCondPagto1 In objAdmMeioPagto.colCondPagtoLoja
'                                If objAdmMeioPagtoCondPagto1.iParcelamento = objMovCaixa.iParcelamento Then
'                                    objAdmMeioPagtoCondPagto.sNomeParcelamento = objAdmMeioPagtoCondPagto1.sNomeParcelamento
'                                    Exit For
'                                End If
'                            Next
'                        End If
'                    Next
'
'                    objAdmMeioPagtoCondPagto.iAdmMeioPagto = objMovCaixa.iAdmMeioPagto
'                    objAdmMeioPagtoCondPagto.iParcelamento = objMovCaixa.iParcelamento
'                    objAdmMeioPagtoCondPagto.dSaldo = objMovCaixa.dValor
'                    objAdmMeioPagtoCondPagto.iOrigem = OPTION_CF
'
'                    'Adicional o ticket na coleção global
'                    gcolTicket.Add objAdmMeioPagtoCondPagto
'                End If
            End If
        End If
    Next
    
    Set objAdmMeioPagtoCondPagto = New ClassAdmMeioPagtoCondPagto
    
    'Verifica se já existe movimentos de Outros\
    'Para cada MOvimento de Outros
    For iIndice = objVenda.colMovimentosCaixa.Count To 1 Step -1
        'Pega o MOvimento
        Set objMovCaixa = objVenda.colMovimentosCaixa.Item(iIndice)
        'Se for do tipo outros
        If objMovCaixa.iTipo = MOVIMENTOCAIXA_RECEB_OUTROS Then
            'Se for não especificado
            If objMovCaixa.iAdmMeioPagto = 0 Then
                'Para cada pagamento em outros na coleção global
                For Each objAdmMeioPagtoCondPagto In gcolOutros
                    'Se for o não especificado
                    If objAdmMeioPagtoCondPagto.iAdmMeioPagto = 0 Then
                        'Atualiza o saldo não especificado
                        objAdmMeioPagtoCondPagto.dSaldo = objAdmMeioPagtoCondPagto.dSaldo + objMovCaixa.dValor
                        Exit For
                    End If
                Next
            'Se for especificado
            Else
                
                bAchou1 = False
                
                'Para cada Pagamento em outros na col global
                For Each objAdmMeioPagtoCondPagto In gcolOutros
                    'Se for do mesmo tipo que o atual
                    If objAdmMeioPagtoCondPagto.iAdmMeioPagto = objMovCaixa.iAdmMeioPagto Then 'And objAdmMeioPagtoCondPagto.iOrigem = OPTION_CF Then
                        'Atualiza o saldo
                        objAdmMeioPagtoCondPagto.dSaldo = objAdmMeioPagtoCondPagto.dSaldo + objMovCaixa.dValor
                        'Indica que encontoru
                        bAchou1 = True
                        Exit For
                    End If
                Next
                
                'se Não achou
                If Not (bAchou1) Then gError 133296

'                'Se não achou
'                If Not bAchou1 Then
'                    'Cria um novo obj
'                    Set objAdmMeioPagtoCondPagto = New ClassAdmMeioPagtoCondPagto
'                    'Preenche com os dados desse movimento
'                    For Each objAdmMeioPagto In gcolAdmMeioPagto
'                        If objAdmMeioPagto.iCodigo = objMovCaixa.iAdmMeioPagto Then
'                            objAdmMeioPagtoCondPagto.sNomeAdmMeioPagto = objAdmMeioPagto.sNome
'                            For Each objAdmMeioPagtoCondPagto1 In objAdmMeioPagto.colCondPagtoLoja
'                                If objAdmMeioPagtoCondPagto1.iParcelamento = objMovCaixa.iParcelamento Then
'                                    objAdmMeioPagtoCondPagto.sNomeParcelamento = objAdmMeioPagtoCondPagto1.sNomeParcelamento
'                                    Exit For
'                                End If
'                            Next
'                        End If
'                    Next
'
'                    objAdmMeioPagtoCondPagto.iAdmMeioPagto = objMovCaixa.iAdmMeioPagto
'                    objAdmMeioPagtoCondPagto.iParcelamento = objMovCaixa.iParcelamento
'                    objAdmMeioPagtoCondPagto.dSaldo = objMovCaixa.dValor
'                    objAdmMeioPagtoCondPagto.iOrigem = OPTION_CF
'
'                    'Adiciona na coleção de outros
'                    gcolOutros.Add objAdmMeioPagtoCondPagto
'                End If
            End If
        End If
    Next
        
    'Insere o Carne na col global
    If objVenda.objCarne.colParcelas.Count > 0 Then
        gcolCarne.Add objVenda.objCarne
        'Chama a impressão do carnê
        '????lErro = CF_ECF("Imprime_Carne", objVenda.objCarne.sCodBarrasCarne)
        If lErro <> SUCESSO Then gError 109570
    End If
        
    For Each objItens In objVenda.objCupomFiscal.colItens
        For Each objAliquota In gcolAliquotasTotal
            If objItens.dAliquotaICMS = objAliquota.dAliquota Then
                objAliquota.dValorTotalizadoLoja = objAliquota.dValorTotalizadoLoja + ((objItens.dPrecoUnitario * objItens.dQuantidade) * objAliquota.dAliquota)
                Exit For
            End If
        Next
    Next
    
    'Para cada movimento de troco
    For Each objMovCaixa In objVenda.colMovimentosCaixa
        'Se for de cartao de crédito ou débito especificado
        Select Case objMovCaixa.iTipo
        
            Case MOVIMENTOCAIXA_TROCO_DINHEIRO
            
                '??? 24/08/2016 gdSaldoDinheiro = gdSaldoDinheiro + objMovCaixa.dValor
                
            Case MOVIMENTOCAIXA_TROCO_CONTRAVALE
            
                'Se for não especificado
                If objMovCaixa.iAdmMeioPagto = 0 Then
                    'Para cada pagamento em outros na coleção global
                    For Each objAdmMeioPagtoCondPagto In gcolOutros
                        'Se for o não especificado
                        If objAdmMeioPagtoCondPagto.iAdmMeioPagto = 0 Then
                            'Atualiza o saldo não especificado
                            objAdmMeioPagtoCondPagto.dSaldo = objAdmMeioPagtoCondPagto.dSaldo - objMovCaixa.dValor
                            Exit For
                        End If
                    Next
                'Se for especificado
                Else
                    bAchou1 = False
                    'Para cada Pagamento em outros na col global
                    For Each objAdmMeioPagtoCondPagto In gcolOutros
                        'Se for do mesmo tipo que o atual
                        If objAdmMeioPagtoCondPagto.iAdmMeioPagto = objMovCaixa.iAdmMeioPagto Then ' And objAdmMeioPagtoCondPagto.iOrigem = OPTION_CF Then
                            'Atualiza o saldo
                            objAdmMeioPagtoCondPagto.dSaldo = objAdmMeioPagtoCondPagto.dSaldo - objMovCaixa.dValor
                            'Indica que encontoru
                            bAchou1 = True
                            Exit For
                        End If
                    Next
                    
                    'se Não achou
                    If Not (bAchou1) Then gError 133297
                    
'                    'Se não achou
'                    If Not bAchou1 Then
'                        'Cria um novo obj
'                        Set objAdmMeioPagtoCondPagto = New ClassAdmMeioPagtoCondPagto
'                        'Preenche com os dados desse movimento
'                        For Each objAdmMeioPagto In gcolAdmMeioPagto
'                            If objAdmMeioPagto.iCodigo = objMovCaixa.iAdmMeioPagto Then
'                                objAdmMeioPagtoCondPagto.sNomeAdmMeioPagto = objAdmMeioPagto.sNome
'                                For Each objAdmMeioPagtoCondPagto1 In objAdmMeioPagto.colCondPagtoLoja
'                                    If objAdmMeioPagtoCondPagto1.iParcelamento = objMovCaixa.iParcelamento Then
'                                        objAdmMeioPagtoCondPagto.sNomeParcelamento = objAdmMeioPagtoCondPagto1.sNomeParcelamento
'                                        Exit For
'                                    End If
'                                Next
'                            End If
'                        Next
'
'                        objAdmMeioPagtoCondPagto.iAdmMeioPagto = objMovCaixa.iAdmMeioPagto
'                        objAdmMeioPagtoCondPagto.iParcelamento = objMovCaixa.iParcelamento
'                        objAdmMeioPagtoCondPagto.dSaldo = -objMovCaixa.dValor
'                        objAdmMeioPagtoCondPagto.iOrigem = OPTION_CF
'
'                        'Adiciona na coleção de outros
'                        gcolOutros.Add objAdmMeioPagtoCondPagto
'                    End If
                End If
        
            Case MOVIMENTOCAIXA_TROCO_VALE
                
                'Para cada movimento
                If objMovCaixa.iAdmMeioPagto = 0 Then
                'Para cada obj de ticket da coleção global de tickets
                    For Each objAdmMeioPagtoCondPagto In gcolTicket
                        'Se for o não especificado
                        If objAdmMeioPagtoCondPagto.iAdmMeioPagto = 0 Then
                            'Atualiza o saldo de não especificado
                            objAdmMeioPagtoCondPagto.dSaldo = objAdmMeioPagtoCondPagto.dSaldo - objMovCaixa.dValor
                            Exit For
                        End If
                    Next
                'Se for especificado
                Else
                    bAchou1 = False
                    'Para cada Ticket da coleção global
                    For Each objAdmMeioPagtoCondPagto In gcolTicket
                        'Se encontrou o ticket/parcelamento
                        If objAdmMeioPagtoCondPagto.iAdmMeioPagto = objMovCaixa.iAdmMeioPagto And objAdmMeioPagtoCondPagto.iAtivo = ADMMEIOPAGTOCONDPAGTO_ATIVO Then
                            'Atualiza o saldo
                            objAdmMeioPagtoCondPagto.dSaldo = objAdmMeioPagtoCondPagto.dSaldo - objMovCaixa.dValor
                            'Sinaliza que encontrou
                            bAchou1 = True
                            Exit For
                        End If
                    Next
                    
                    'Se econtrou
                    If Not bAchou1 Then gError 133298
                    
'                    'Se econtrou
'                    If Not bAchou1 Then
'                        'cria um novo ojb com dados do Ticket
'                        Set objAdmMeioPagtoCondPagto = New ClassAdmMeioPagtoCondPagto
'                        'Carrega o obj
'
'                        For Each objAdmMeioPagto In gcolAdmMeioPagto
'                            If objAdmMeioPagto.iCodigo = objMovCaixa.iAdmMeioPagto Then
'                                objAdmMeioPagtoCondPagto.sNomeAdmMeioPagto = objAdmMeioPagto.sNome
'                                For Each objAdmMeioPagtoCondPagto1 In objAdmMeioPagto.colCondPagtoLoja
'                                    If objAdmMeioPagtoCondPagto1.iParcelamento = objMovCaixa.iParcelamento Then
'                                        objAdmMeioPagtoCondPagto.sNomeParcelamento = objAdmMeioPagtoCondPagto1.sNomeParcelamento
'                                        Exit For
'                                    End If
'                                Next
'                            End If
'                        Next
'
'                        objAdmMeioPagtoCondPagto.iAdmMeioPagto = objMovCaixa.iAdmMeioPagto
'                        objAdmMeioPagtoCondPagto.iParcelamento = objMovCaixa.iParcelamento
'                        objAdmMeioPagtoCondPagto.dSaldo = -objMovCaixa.dValor
'                        objAdmMeioPagtoCondPagto.iOrigem = OPTION_CF
'
'                        'Adicional o ticket na coleção global
'                        gcolTicket.Add objAdmMeioPagtoCondPagto
'
'                    End If
                End If
        End Select
    Next
    
    Exit Sub
    
Erro_Atualiza_Movimentos_Memoria:

    Select Case gErr
    
        Case 109570
        
        Case 133292 To 133298
            Call Rotina_ErroECF(vbOKOnly, ERRO_PARCELAMENTO_NAO_EXISTENTE, gErr)

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149296)

    End Select
        
    Exit Sub
    
End Sub

Sub Atualiza_Movimentos_Memoria1(ByVal objVenda As ClassVenda)
    
Dim objMovCaixa As ClassMovimentoCaixa
Dim objCheque As ClassChequePre
Dim objAdmMeioPagtoCondPagto As ClassAdmMeioPagtoCondPagto
Dim iIndice As Integer
Dim bAchou As Boolean
Dim bAchou1 As Boolean
Dim objCarne As ClassCarne
Dim objCarneParc As ClassCarneParcelas
Dim lErro As Long
Dim objAdmMeioPagto As New ClassAdmMeioPagto
Dim objAliquota As New ClassAliquotaICMS
Dim objItens As ClassItemCupomFiscal
Dim objAdmMeioPagtoCondPagto1 As New ClassAdmMeioPagtoCondPagto

Dim objadmMeioPagtoCondAux As ClassAdmMeioPagtoCondPagto

On Error GoTo Erro_Atualiza_Movimentos_Memoria1
        
    bAchou = False
    
    'Para cada movimento da venda
    For Each objMovCaixa In objVenda.colMovimentosCaixa
        bAchou = False
        'Se for de cartao de crédito ou débito especificado
        If (objMovCaixa.iTipo = MOVIMENTOCAIXA_RECEB_CARTAOCREDITO Or objMovCaixa.iTipo = MOVIMENTOCAIXA_RECEB_CARTAODEBITO Or objMovCaixa.iTipo = MOVIMENTOCAIXA_CANC_RECEB_CARTAOCREDITO Or objMovCaixa.iTipo = MOVIMENTOCAIXA_CANC_RECEB_CARTAODEBITO) And objMovCaixa.iAdmMeioPagto <> 0 Then
            'Busca em gcolCartão a ocorrencia de Cartão especificado
            For Each objAdmMeioPagtoCondPagto In gcolCartao
                'Se encontrou
                If objAdmMeioPagtoCondPagto.iAdmMeioPagto = objMovCaixa.iAdmMeioPagto And objAdmMeioPagtoCondPagto.iParcelamento = objMovCaixa.iParcelamento And objAdmMeioPagtoCondPagto.iTipoCartao = objMovCaixa.iTipoCartao And _
                objMovCaixa.dtDataPreDatado = objAdmMeioPagtoCondPagto.dtDataPreDatado Then ' And objAdmMeioPagtoCondPagto.iOrigem = OPTION_CF Then
                    
                    'Atualiza o saldo do cartão
                    objAdmMeioPagtoCondPagto.dSaldo = objAdmMeioPagtoCondPagto.dSaldo + objMovCaixa.dValor
                    
                    bAchou = True
                    
                    Exit For
                End If
            Next
            
            If Not (bAchou) And objMovCaixa.dtDataPreDatado = DATA_NULA Then gError 133299
            
            'se Não achou
            If Not (bAchou) Then
                'Cria um obj sobre o cartão/parcelamento em questão
                Set objAdmMeioPagtoCondPagto = New ClassAdmMeioPagtoCondPagto

                For Each objAdmMeioPagto In gcolAdmMeioPagto
                    If objAdmMeioPagto.iCodigo = objMovCaixa.iAdmMeioPagto Then
                        objAdmMeioPagtoCondPagto.sNomeAdmMeioPagto = objAdmMeioPagto.sNome
                        For Each objAdmMeioPagtoCondPagto1 In objAdmMeioPagto.colCondPagtoLoja
                            If objAdmMeioPagtoCondPagto1.iParcelamento = objMovCaixa.iParcelamento And objAdmMeioPagtoCondPagto1.iPreDatado = 1 Then
                                objAdmMeioPagtoCondPagto.sNomeParcelamento = objAdmMeioPagtoCondPagto1.sNomeParcelamento
                                Exit For
                            End If
                        Next
                    End If
                Next

                'Preenche com os dados dessa venda
                objAdmMeioPagtoCondPagto.iAdmMeioPagto = objMovCaixa.iAdmMeioPagto
                objAdmMeioPagtoCondPagto.iParcelamento = objMovCaixa.iParcelamento
                objAdmMeioPagtoCondPagto.dSaldo = objMovCaixa.dValor
                objAdmMeioPagtoCondPagto.iPreDatado = objAdmMeioPagtoCondPagto1.iPreDatado
                objAdmMeioPagtoCondPagto.dtDataPreDatado = objMovCaixa.dtDataPreDatado
                objAdmMeioPagtoCondPagto.iTipoCartao = objMovCaixa.iTipoCartao
                objAdmMeioPagtoCondPagto.iOrigem = OPTION_CF

                'Adiciona essa informação na coleção global de cartões
                gcolCartao.Add objAdmMeioPagtoCondPagto
            End If
            
        End If
        
        'Jogo esse movimenot na coleção global de movimentos
        gcolMovimentosCaixa.Add objMovCaixa
        
        bAchou = False
        'Se o omvimento for de cartão de crédito não especificado
        If (objMovCaixa.iTipo = MOVIMENTOCAIXA_RECEB_CARTAOCREDITO Or objMovCaixa.iTipo = MOVIMENTOCAIXA_CANC_RECEB_CARTAOCREDITO) And objMovCaixa.iAdmMeioPagto = 0 Then
            'inclui na col como não especificado
            For Each objAdmMeioPagtoCondPagto In gcolCartao
                If objAdmMeioPagtoCondPagto.sNomeAdmMeioPagto = STRING_NAO_DETALHADO_CCREDITO Then 'And objAdmMeioPagtoCondPagto.iOrigem = OPTION_CF Then
                    'Atualiza o saldo de não especificado
                    objAdmMeioPagtoCondPagto.dSaldo = objAdmMeioPagtoCondPagto.dSaldo + objMovCaixa.dValor
                    bAchou = True
                    Exit For
                End If
            Next
            
            'se Não achou
            If Not (bAchou) Then gError 133300
            
'            'se Não achou
'            If Not (bAchou) Then
'                'Cria um obj sobre o cartão/parcelamento em questão
'                Set objAdmMeioPagtoCondPagto = New ClassAdmMeioPagtoCondPagto
'
'                'Preenche com os dados dessa venda
'                objAdmMeioPagtoCondPagto.dSaldo = objMovCaixa.dValor
'                objAdmMeioPagtoCondPagto.iTipoCartao = objMovCaixa.iTipoCartao
'                objAdmMeioPagtoCondPagto.sNomeAdmMeioPagto = STRING_NAO_DETALHADO_CCREDITO
'                objAdmMeioPagtoCondPagto.iOrigem = OPTION_CF
'
'                'Adiciona essa informação na coleção global de cartões
'                gcolCartao.Add objAdmMeioPagtoCondPagto
'            End If
            
        End If
        
        
        bAchou = False
        'Se o omvimento for de cartão de débito não especificado
        If (objMovCaixa.iTipo = MOVIMENTOCAIXA_RECEB_CARTAODEBITO Or objMovCaixa.iTipo = MOVIMENTOCAIXA_CANC_RECEB_CARTAODEBITO) And objMovCaixa.iAdmMeioPagto = 0 Then
            'inclui na col como não especificado
            For Each objAdmMeioPagtoCondPagto In gcolCartao
                If objAdmMeioPagtoCondPagto.sNomeAdmMeioPagto = STRING_NAO_DETALHADO_CDEBITO Then 'And objAdmMeioPagtoCondPagto.iOrigem = OPTION_CF Then
                    'Atualiza o saldo de não especificado
                    objAdmMeioPagtoCondPagto.dSaldo = objAdmMeioPagtoCondPagto.dSaldo + objMovCaixa.dValor
                    bAchou = True
                    Exit For
                End If
            Next
            
            'se Não achou
            If Not (bAchou) Then gError 133301
            
            'se Não achou
'            If Not (bAchou) Then
'                'Cria um obj sobre o cartão/parcelamento em questão
'                Set objAdmMeioPagtoCondPagto = New ClassAdmMeioPagtoCondPagto
'
'                'Preenche com os dados dessa venda
'                objAdmMeioPagtoCondPagto.dSaldo = objMovCaixa.dValor
'                objAdmMeioPagtoCondPagto.iTipoCartao = objMovCaixa.iTipoCartao
'                objAdmMeioPagtoCondPagto.sNomeAdmMeioPagto = STRING_NAO_DETALHADO_CDEBITO
'                objAdmMeioPagtoCondPagto.iOrigem = OPTION_CF
'
'                'Adiciona essa informação na coleção global de cartões
'                gcolCartao.Add objAdmMeioPagtoCondPagto
'            End If
        End If
    Next
    
    bAchou1 = False
    
    'Para cada movimento
    For iIndice = objVenda.colMovimentosCaixa.Count To 1 Step -1
        'Pega o movimento
        Set objMovCaixa = objVenda.colMovimentosCaixa.Item(iIndice)
        'Se for um recebimento em ticket
        If objMovCaixa.iTipo = MOVIMENTOCAIXA_RECEB_VALETICKET Then
            'Se for não especificado
            If objMovCaixa.iAdmMeioPagto = 0 Then
                'Para cada obj de ticket da coleção global de tickets
                For Each objAdmMeioPagtoCondPagto In gcolTicket
                    'Se for o não especificado
                    If objAdmMeioPagtoCondPagto.iAdmMeioPagto = 0 Then
                        'Atualiza o saldo de não especificado
                        objAdmMeioPagtoCondPagto.dSaldo = objAdmMeioPagtoCondPagto.dSaldo + objMovCaixa.dValor
                        Exit For
                    End If
                Next
            'Se for especificado
            Else
                'Para cada Ticket da coleção global
                For Each objAdmMeioPagtoCondPagto In gcolTicket
                    'Se encontrou o ticket/parcelamento
                    If objAdmMeioPagtoCondPagto.iAdmMeioPagto = objMovCaixa.iAdmMeioPagto And objAdmMeioPagtoCondPagto.iParcelamento = objMovCaixa.iParcelamento Then ' And objAdmMeioPagtoCondPagto.iOrigem = OPTION_CF Then
                        'Atualiza o saldo
                        objAdmMeioPagtoCondPagto.dSaldo = objAdmMeioPagtoCondPagto.dSaldo + objMovCaixa.dValor
                        'Sinaliza que encontrou
                        bAchou1 = True
                        Exit For
                    End If
                Next
                
                'Se econtrou
                If Not bAchou1 Then gError 133302
                
'                'Se econtrou
'                If Not bAchou1 Then
'                    'cria um novo ojb com dados do Ticket
'                    Set objAdmMeioPagtoCondPagto = New ClassAdmMeioPagtoCondPagto
'                    'Carrega o obj
'
'                    For Each objAdmMeioPagto In gcolAdmMeioPagto
'                        If objAdmMeioPagto.iCodigo = objMovCaixa.iAdmMeioPagto Then
'                            objAdmMeioPagtoCondPagto.sNomeAdmMeioPagto = objAdmMeioPagto.sNome
'                            For Each objAdmMeioPagtoCondPagto1 In objAdmMeioPagto.colCondPagtoLoja
'                                If objAdmMeioPagtoCondPagto1.iParcelamento = objMovCaixa.iParcelamento Then
'                                    objAdmMeioPagtoCondPagto.sNomeParcelamento = objAdmMeioPagtoCondPagto1.sNomeParcelamento
'                                    Exit For
'                                End If
'                            Next
'                        End If
'                    Next
'
'                    objAdmMeioPagtoCondPagto.iAdmMeioPagto = objMovCaixa.iAdmMeioPagto
'                    objAdmMeioPagtoCondPagto.iParcelamento = objMovCaixa.iParcelamento
'                    objAdmMeioPagtoCondPagto.dSaldo = objMovCaixa.dValor
'                    objAdmMeioPagtoCondPagto.iOrigem = OPTION_CF
'
'                    'Adicional o ticket na coleção global
'                    gcolTicket.Add objAdmMeioPagtoCondPagto
'                End If
            End If
        End If
    Next
    
    bAchou1 = False
    Set objAdmMeioPagtoCondPagto = New ClassAdmMeioPagtoCondPagto
    
    'Verifica se já existe movimentos de Outros\
    'Para cada MOvimento de Outros
    For iIndice = objVenda.colMovimentosCaixa.Count To 1 Step -1
        'Pega o MOvimento
        Set objMovCaixa = objVenda.colMovimentosCaixa.Item(iIndice)
        'Se for do tipo outros
        If objMovCaixa.iTipo = MOVIMENTOCAIXA_RECEB_OUTROS Then
            'Se for não especificado
            If objMovCaixa.iAdmMeioPagto = 0 Then
                'Para cada pagamento em outros na coleção global
                For Each objAdmMeioPagtoCondPagto In gcolOutros
                    'Se for o não especificado
                    If objAdmMeioPagtoCondPagto.iAdmMeioPagto = 0 Then
                        'Atualiza o saldo não especificado
                        objAdmMeioPagtoCondPagto.dSaldo = objAdmMeioPagtoCondPagto.dSaldo + objMovCaixa.dValor
                        Exit For
                    End If
                Next
            'Se for especificado
            Else
                'Para cada Pagamento em outros na col global
                For Each objAdmMeioPagtoCondPagto In gcolOutros
                    'Se for do mesmo tipo que o atual
                    If objAdmMeioPagtoCondPagto.iAdmMeioPagto = objMovCaixa.iAdmMeioPagto And objAdmMeioPagtoCondPagto.iParcelamento = objMovCaixa.iParcelamento Then 'And objAdmMeioPagtoCondPagto.iOrigem = OPTION_CF Then
                        'Atualiza o saldo
                        objAdmMeioPagtoCondPagto.dSaldo = objAdmMeioPagtoCondPagto.dSaldo + objMovCaixa.dValor
                        'Indica que encontoru
                        bAchou1 = True
                        Exit For
                    End If
                Next
                
                'Se não achou
                If Not bAchou1 Then gError 133303
                
'                'Se não achou
'                If Not bAchou1 Then
'                    'Cria um novo obj
'                    Set objAdmMeioPagtoCondPagto = New ClassAdmMeioPagtoCondPagto
'                    'Preenche com os dados desse movimento
'                    For Each objAdmMeioPagto In gcolAdmMeioPagto
'                        If objAdmMeioPagto.iCodigo = objMovCaixa.iAdmMeioPagto Then
'                            objAdmMeioPagtoCondPagto.sNomeAdmMeioPagto = objAdmMeioPagto.sNome
'                            For Each objAdmMeioPagtoCondPagto1 In objAdmMeioPagto.colCondPagtoLoja
'                                If objAdmMeioPagtoCondPagto1.iParcelamento = objMovCaixa.iParcelamento Then
'                                    objAdmMeioPagtoCondPagto.sNomeParcelamento = objAdmMeioPagtoCondPagto1.sNomeParcelamento
'                                    Exit For
'                                End If
'                            Next
'                        End If
'                    Next
'
'                    objAdmMeioPagtoCondPagto.iAdmMeioPagto = objMovCaixa.iAdmMeioPagto
'                    objAdmMeioPagtoCondPagto.iParcelamento = objMovCaixa.iParcelamento
'                    objAdmMeioPagtoCondPagto.dSaldo = objMovCaixa.dValor
'                    objAdmMeioPagtoCondPagto.iOrigem = OPTION_CF
'
'                    'Adiciona na coleção de outros
'                    gcolOutros.Add objAdmMeioPagtoCondPagto
'                End If
            End If
        End If
    Next
        
    'Insere o Carne na col global
    If objVenda.objCarne.colParcelas.Count > 0 Then
        gcolCarne.Add objVenda.objCarne
        'Chama a impressão do carnê
        '????lErro = CF_ECF("Imprime_Carne", objVenda.objCarne.sCodBarrasCarne)
        If lErro <> SUCESSO Then gError 109570
    End If
        
    For Each objItens In objVenda.objCupomFiscal.colItens
        For Each objAliquota In gcolAliquotasTotal
            If objItens.dAliquotaICMS = objAliquota.dAliquota Then
                objAliquota.dValorTotalizadoLoja = objAliquota.dValorTotalizadoLoja + ((objItens.dPrecoUnitario * objItens.dQuantidade) * objAliquota.dAliquota)
                Exit For
            End If
        Next
    Next
    
    'Para cada movimento de troco
    For Each objMovCaixa In objVenda.colMovimentosCaixa
        'Se for de cartao de crédito ou débito especificado
        Select Case objMovCaixa.iTipo
        
            Case MOVIMENTOCAIXA_TROCO_DINHEIRO
            
                '??? 24/08/2016 gdSaldoDinheiro = gdSaldoDinheiro + objMovCaixa.dValor
                
            Case MOVIMENTOCAIXA_TROCO_CONTRAVALE
            
                'Se for não especificado
                If objMovCaixa.iAdmMeioPagto = 0 Then
                    'Para cada pagamento em outros na coleção global
                    For Each objAdmMeioPagtoCondPagto In gcolOutros
                        'Se for o não especificado
                        If objAdmMeioPagtoCondPagto.iAdmMeioPagto = 0 Then
                            'Atualiza o saldo não especificado
                            objAdmMeioPagtoCondPagto.dSaldo = objAdmMeioPagtoCondPagto.dSaldo - objMovCaixa.dValor
                            Exit For
                        End If
                    Next
                'Se for especificado
                Else
                    bAchou1 = False
                    'Para cada Pagamento em outros na col global
                    For Each objAdmMeioPagtoCondPagto In gcolOutros
                        'Se for do mesmo tipo que o atual
                        If objAdmMeioPagtoCondPagto.iAdmMeioPagto = objMovCaixa.iAdmMeioPagto Then 'And objAdmMeioPagtoCondPagto.iOrigem = OPTION_CF Then
                            'Atualiza o saldo
                            objAdmMeioPagtoCondPagto.dSaldo = objAdmMeioPagtoCondPagto.dSaldo - objMovCaixa.dValor
                            'Indica que encontoru
                            bAchou1 = True
                            Exit For
                        End If
                    Next
                    
                    'Se não achou
                    If Not bAchou1 Then gError 133304
                    
'                    'Se não achou
'                    If Not bAchou1 Then
'                        'Cria um novo obj
'                        Set objAdmMeioPagtoCondPagto = New ClassAdmMeioPagtoCondPagto
'                        'Preenche com os dados desse movimento
'                        For Each objAdmMeioPagto In gcolAdmMeioPagto
'                            If objAdmMeioPagto.iCodigo = objMovCaixa.iAdmMeioPagto Then
'                                objAdmMeioPagtoCondPagto.sNomeAdmMeioPagto = objAdmMeioPagto.sNome
'                                For Each objAdmMeioPagtoCondPagto1 In objAdmMeioPagto.colCondPagtoLoja
'                                    If objAdmMeioPagtoCondPagto1.iParcelamento = objMovCaixa.iParcelamento Then
'                                        objAdmMeioPagtoCondPagto.sNomeParcelamento = objAdmMeioPagtoCondPagto1.sNomeParcelamento
'                                        Exit For
'                                    End If
'                                Next
'                            End If
'                        Next
'
'                        objAdmMeioPagtoCondPagto.iAdmMeioPagto = objMovCaixa.iAdmMeioPagto
'                        objAdmMeioPagtoCondPagto.iParcelamento = objMovCaixa.iParcelamento
'                        objAdmMeioPagtoCondPagto.dSaldo = -objMovCaixa.dValor
'                        objAdmMeioPagtoCondPagto.iOrigem = OPTION_CF
'
'                        'Adiciona na coleção de outros
'                        gcolOutros.Add objAdmMeioPagtoCondPagto
'                    End If
                End If
        
            Case MOVIMENTOCAIXA_TROCO_VALE
                
                'Para cada movimento
                If objMovCaixa.iAdmMeioPagto = 0 Then
                'Para cada obj de ticket da coleção global de tickets
                    For Each objAdmMeioPagtoCondPagto In gcolTicket
                        'Se for o não especificado
                        If objAdmMeioPagtoCondPagto.iAdmMeioPagto = 0 Then
                            'Atualiza o saldo de não especificado
                            objAdmMeioPagtoCondPagto.dSaldo = objAdmMeioPagtoCondPagto.dSaldo - objMovCaixa.dValor
                            Exit For
                        End If
                    Next
                'Se for especificado
                Else
                    bAchou1 = False
                    'Para cada Ticket da coleção global
                    For Each objAdmMeioPagtoCondPagto In gcolTicket
                        'Se encontrou o ticket/parcelamento
                        If objAdmMeioPagtoCondPagto.iAdmMeioPagto = objMovCaixa.iAdmMeioPagto And objAdmMeioPagtoCondPagto.iAtivo = ADMMEIOPAGTOCONDPAGTO_ATIVO Then
                            'Atualiza o saldo
                            objAdmMeioPagtoCondPagto.dSaldo = objAdmMeioPagtoCondPagto.dSaldo - objMovCaixa.dValor
                            'Sinaliza que encontrou
                            bAchou1 = True
                            Exit For
                        End If
                    Next
                    
                    'Se econtrou
                    If Not bAchou1 Then gError 133305
                    
'                    'Se econtrou
'                    If Not bAchou1 Then
'                        'cria um novo ojb com dados do Ticket
'                        Set objAdmMeioPagtoCondPagto = New ClassAdmMeioPagtoCondPagto
'                        'Carrega o obj
'
'                        For Each objAdmMeioPagto In gcolAdmMeioPagto
'                            If objAdmMeioPagto.iCodigo = objMovCaixa.iAdmMeioPagto Then
'                                objAdmMeioPagtoCondPagto.sNomeAdmMeioPagto = objAdmMeioPagto.sNome
'                                For Each objAdmMeioPagtoCondPagto1 In objAdmMeioPagto.colCondPagtoLoja
'                                    If objAdmMeioPagtoCondPagto1.iParcelamento = objMovCaixa.iParcelamento Then
'                                        objAdmMeioPagtoCondPagto.sNomeParcelamento = objAdmMeioPagtoCondPagto1.sNomeParcelamento
'                                        Exit For
'                                    End If
'                                Next
'                            End If
'                        Next
'
'                        objAdmMeioPagtoCondPagto.iAdmMeioPagto = objMovCaixa.iAdmMeioPagto
'                        objAdmMeioPagtoCondPagto.iParcelamento = objMovCaixa.iParcelamento
'                        objAdmMeioPagtoCondPagto.dSaldo = -objMovCaixa.dValor
'                        objAdmMeioPagtoCondPagto.iOrigem = OPTION_CF
'
'                        'Adicional o ticket na coleção global
'                        gcolTicket.Add objAdmMeioPagtoCondPagto
'
'                    End If
                End If
        End Select
    Next
    
    Exit Sub
    
Erro_Atualiza_Movimentos_Memoria1:

    Select Case gErr
    
        Case 109570
            
        Case 133299 To 133305
            Call Rotina_ErroECF(vbOKOnly, ERRO_PARCELAMENTO_NAO_EXISTENTE, gErr)
            
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149297)

    End Select
        
    Exit Sub
    
End Sub



Public Function TransfCaixa_Grava_Memoria_Sai(ByVal objMovCaixa As ClassMovimentoCaixa) As Long

Dim iBanco As Integer
Dim dValor As Double
Dim lErro As Long
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim sNomeAdmMeioPagto As String

On Error GoTo Erro_TransfCaixa_Grava_Memoria_Sai
    
    objAdmMeioPagtoCondPagto.iAdmMeioPagto = objMovCaixa.iAdmMeioPagto
    objAdmMeioPagtoCondPagto.iParcelamento = objMovCaixa.iParcelamento
    objAdmMeioPagtoCondPagto.sNomeParcelamento = NOME_A_VISTA
    objAdmMeioPagtoCondPagto.dSaldo = -objMovCaixa.dValor
    objAdmMeioPagtoCondPagto.iTipoCartao = objMovCaixa.iTipoCartao
    Call CF_ECF("Obtem_Nome_AdmMeioPagto", objMovCaixa, sNomeAdmMeioPagto)
    objAdmMeioPagtoCondPagto.sNomeAdmMeioPagto = sNomeAdmMeioPagto
    
    Select Case CF_ECF("DeTipoMovtoParaTMP", objMovCaixa.iTipo)
    
        'se for dinheiro
        Case TIPOMEIOPAGTOLOJA_DINHEIRO
            '??? 24/08/2016 gdSaldoDinheiro = gdSaldoDinheiro - objMovCaixa.dValor
    
        Case TIPOMEIOPAGTOLOJA_CHEQUE
            gdSaldocheques = gdSaldocheques - objMovCaixa.dValor
            
        Case TIPOMEIOPAGTOLOJA_CARTAO_CREDITO, TIPOMEIOPAGTOLOJA_CARTAO_DEBITO
        
            'pesquisar na colecao gcolCartao para obter o valor, subtrair desse valor o dvalor do obj
            Call Adiciona_Saldo_AdmMeioPagto(objAdmMeioPagtoCondPagto, gcolCartao)
    
        Case TIPOMEIOPAGTOLOJA_VALE_TICKET, TIPOMEIOPAGTOLOJA_VALE_REFEICAO, TIPOMEIOPAGTOLOJA_VALE_PRESENTE, TIPOMEIOPAGTOLOJA_VALE_COMBUSTIVEL
    
            'pesquisar na colecao gcolTicket para obter o valor, subtrair desse valor o dvalor do obj
            Call Adiciona_Saldo_AdmMeioPagto(objAdmMeioPagtoCondPagto, gcolTicket)
    
        Case TIPOMEIOPAGTOLOJA_OUTROS
    
            'pesquisar na colecao gcolOutros para obter o valor, subtrair desse valor o dvalor do obj
            Call Adiciona_Saldo_AdmMeioPagto(objAdmMeioPagtoCondPagto, gcolOutros)
            
    End Select
    
    TransfCaixa_Grava_Memoria_Sai = SUCESSO
    
    Exit Function

Erro_TransfCaixa_Grava_Memoria_Sai:

    TransfCaixa_Grava_Memoria_Sai = gErr
    
    Select Case gErr
        
        Case 109466
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 149300)
    
    End Select
    
    Exit Function

End Function

Public Function TransfCaixa_Grava_Memoria_Entra(ByVal objMovCaixa As ClassMovimentoCaixa, ByVal objCheque As ClassChequePre) As Long

Dim iBanco As Integer
Dim dValor As Double
Dim lErro As Long
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim sNomeAdmMeioPagto As String

On Error GoTo Erro_TransfCaixa_Grava_Memoria_Entra

    objAdmMeioPagtoCondPagto.iAdmMeioPagto = objMovCaixa.iAdmMeioPagto
    objAdmMeioPagtoCondPagto.iParcelamento = objMovCaixa.iParcelamento
    objAdmMeioPagtoCondPagto.sNomeParcelamento = NOME_A_VISTA
    objAdmMeioPagtoCondPagto.dSaldo = objMovCaixa.dValor
    objAdmMeioPagtoCondPagto.iTipoCartao = objMovCaixa.iTipoCartao
    Call CF_ECF("Obtem_Nome_AdmMeioPagto", objMovCaixa, sNomeAdmMeioPagto)
    objAdmMeioPagtoCondPagto.sNomeAdmMeioPagto = sNomeAdmMeioPagto
    
    'seleciona o tipomeiopagto
    Select Case CF_ECF("DeTipoMovtoParaTMP", objMovCaixa.iTipo)
    
        Case TIPOMEIOPAGTOLOJA_DINHEIRO
            '??? 24/08/2016 gdSaldoDinheiro = gdSaldoDinheiro + objMovCaixa.dValor
        
        Case TIPOMEIOPAGTOLOJA_CHEQUE
            gdSaldocheques = gdSaldocheques + objMovCaixa.dValor
            
        Case TIPOMEIOPAGTOLOJA_CARTAO_CREDITO, TIPOMEIOPAGTOLOJA_CARTAO_DEBITO
            Call Adiciona_Saldo_AdmMeioPagto(objAdmMeioPagtoCondPagto, gcolCartao)
        
        Case TIPOMEIOPAGTOLOJA_VALE_TICKET, TIPOMEIOPAGTOLOJA_VALE_REFEICAO, TIPOMEIOPAGTOLOJA_VALE_PRESENTE, TIPOMEIOPAGTOLOJA_VALE_COMBUSTIVEL
            Call Adiciona_Saldo_AdmMeioPagto(objAdmMeioPagtoCondPagto, gcolTicket)
        
        Case TIPOMEIOPAGTOLOJA_OUTROS
            Call Adiciona_Saldo_AdmMeioPagto(objAdmMeioPagtoCondPagto, gcolOutros)
    
    End Select
    
    TransfCaixa_Grava_Memoria_Entra = SUCESSO
    
    Exit Function

Erro_TransfCaixa_Grava_Memoria_Entra:

    TransfCaixa_Grava_Memoria_Entra = gErr
    
    Select Case gErr
            
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149301)
    
    End Select
    
    Exit Function

End Function

Public Function TransfCaixa_Grava_Memoria(ByVal objTransfCaixa As ClassTransfCaixa, ByVal objChequePara As ClassChequePre) As Long

Dim lErro As Long
Dim objChequeDe As New ClassChequePre

On Error GoTo Erro_TransfCaixa_Grava_Memoria
    
    'grava o movimento de saída na memória
    lErro = CF_ECF("TransfCaixa_Grava_Memoria_Sai", objTransfCaixa.objMovCaixaDe)
    If lErro <> SUCESSO Then gError 101931
    
    objChequeDe.lSequencialCaixa = objTransfCaixa.objMovCaixaDe.lNumRefInterna
    
    'se a parte de envolve cheque ==> coloca o status do cheque para excluido
    If CF_ECF("DeTipoMovtoParaTMP", objTransfCaixa.objMovCaixaDe.iTipo) = TIPOMEIOPAGTOLOJA_CHEQUE Then Call Exclui_Cheque_Memoria(objChequeDe)
    
    'grava o movimento de entrada na memória
    lErro = CF_ECF("TransfCaixa_Grava_Memoria_Entra", objTransfCaixa.objMovCaixaPara, objChequePara)
    If lErro <> SUCESSO Then gError 101932
    
    'se a parte para envolve cheque ==> insere o cheque em gcolCheque
    If CF_ECF("DeTipoMovtoParaTMP", objTransfCaixa.objMovCaixaPara.iTipo) = TIPOMEIOPAGTOLOJA_CHEQUE Then gcolCheque.Add objChequePara
    
    'adiciona o movimento de saída à coleção global
    gcolMovimentosCaixa.Add objTransfCaixa.objMovCaixaDe
    
    'adiciona o movimento de entrada à coleção global
    gcolMovimentosCaixa.Add objTransfCaixa.objMovCaixaPara
    
    TransfCaixa_Grava_Memoria = SUCESSO
    
    Exit Function
    
Erro_TransfCaixa_Grava_Memoria:

    Select Case gErr
    
    End Select
    
    Exit Function
    
End Function

Public Function Exclui_Cheque_Memoria(ByVal objCheque As ClassChequePre) As Long

Dim objChequeAux As ClassChequePre
Dim bAchou As Boolean

On Error GoTo Erro_Exclui_Cheque_Memoria

    bAchou = False

    'varrea a coleção em busca do cheque
    For Each objChequeAux In gcolCheque
    
        'achando o dito-cujo, marca-o como excluído
        If objChequeAux.lSequencialCaixa = objCheque.lSequencialCaixa Then
            
            objChequeAux.iStatus = STATUS_EXCLUIDO
            
            bAchou = True
            
            Exit For
            
        End If
    
    Next
    
    If bAchou = False Then gError 109467

    Exclui_Cheque_Memoria = SUCESSO
    
    Exit Function
    
Erro_Exclui_Cheque_Memoria:
    
    Exclui_Cheque_Memoria = gErr
    
    Select Case gErr
    
        Case 109467
            Call Rotina_ErroECF(vbOKOnly, ERRO_CHEQUEPRE_NAO_ENCONTRADO2, gErr, objCheque.lSequencialCaixa)
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 149302)
    
    End Select
    
    Exit Function

End Function

Private Sub Adiciona_Saldo_AdmMeioPagto(objAdmMeioPagtoCondPagto As ClassAdmMeioPagtoCondPagto, colAdmMeioPagtoCondPagto As Collection)

Dim objAdmMeioPagtoCondPagtoAux As ClassAdmMeioPagtoCondPagto
Dim bAchou As Boolean
Dim objAdmMeioPagto As ClassAdmMeioPagto

On Error GoTo Erro_Adiciona_Saldo_AdmMeioPagto

    bAchou = False
    
    For Each objAdmMeioPagtoCondPagtoAux In colAdmMeioPagtoCondPagto
    
        If objAdmMeioPagtoCondPagtoAux.iAdmMeioPagto = objAdmMeioPagtoCondPagto.iAdmMeioPagto And _
           objAdmMeioPagtoCondPagtoAux.iParcelamento = objAdmMeioPagtoCondPagto.iParcelamento And _
           objAdmMeioPagtoCondPagtoAux.iTipoCartao = objAdmMeioPagtoCondPagto.iTipoCartao And _
           objAdmMeioPagtoCondPagtoAux.sNomeAdmMeioPagto = objAdmMeioPagtoCondPagto.sNomeAdmMeioPagto And _
           objAdmMeioPagtoCondPagtoAux.iOrigem = OPTION_CF Then
            
            objAdmMeioPagtoCondPagtoAux.dSaldo = objAdmMeioPagtoCondPagtoAux.dSaldo + objAdmMeioPagtoCondPagto.dSaldo
            bAchou = True
            Exit For
        
        End If
    
    Next
    
    'se não achou a admmeiopagtocondpagto recebida por parâmetro, adiciona-a à coleção global
    If bAchou = False Then
    
        'busco na coleção de admmeiopagto...
        For Each objAdmMeioPagto In gcolAdmMeioPagto
            
            '... um admmeiopagto com o codigo igual ao admmeiopagtocondpagto passado por parâmetro...
            If objAdmMeioPagto.iCodigo = objAdmMeioPagtoCondPagto.iAdmMeioPagto Then
                
                '...e preencho o nomeAdmMeioPagto desse admmeiopagtocondpagto.
                objAdmMeioPagtoCondPagto.sNomeAdmMeioPagto = objAdmMeioPagto.sNome
                
                'nesse admmeiopagto encontrado, procuro na sua coleção de admmeiopagtocondpagto
                For Each objAdmMeioPagtoCondPagtoAux In objAdmMeioPagto.colCondPagtoLoja
                    
                    'o que possui parcelamento igual ao passado por parâmetro
                    If objAdmMeioPagtoCondPagto.iParcelamento = objAdmMeioPagtoCondPagtoAux.iParcelamento Then
                        
                        'encontrando, preenchdo o nomeparcelamento
                        objAdmMeioPagtoCondPagto.sNomeParcelamento = objAdmMeioPagtoCondPagtoAux.sNomeParcelamento
                        
                        'saio do loop mais interno
                        Exit For
                    
                    End If
                    
                Next
                
                'saio do loop mais externo
                Exit For
            
            End If

        Next
        
        'Preenche com os dados dessa transferência
        objAdmMeioPagtoCondPagto.iOrigem = OPTION_CF
        
        'Adiciona essa informação na coleção global recebida por parâmetro
        colAdmMeioPagtoCondPagto.Add objAdmMeioPagtoCondPagto

    End If
    
    Exit Sub
    
Erro_Adiciona_Saldo_AdmMeioPagto:

    Select Case gErr
    
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149303)
    
    End Select
    
    Exit Sub

End Sub

Public Function TransfCaixa_Exclui_Memoria(objTransfCaixa As ClassTransfCaixa) As Long

Dim lErro As Long
Dim objChequeDe As New ClassChequePre
Dim objChequePara As New ClassChequePre
Dim objMovimentoCaixaAux As ClassMovimentoCaixa
Dim iIndice As Integer

On Error GoTo Erro_TransfCaixa_Exclui_Memoria

    'verifica se o movimento (De) era do tipo cheque
    If CF_ECF("DeTipoMovtoParaTMP", objTransfCaixa.objMovCaixaDe.iTipo) = TIPOMEIOPAGTOLOJA_CHEQUE Then
        
        'preenche o sequencial
        objChequeDe.lSequencialCaixa = objTransfCaixa.objMovCaixaDe.lNumRefInterna

        'obtem os cheques (cheque Para)
        lErro = CF_ECF("Cheque_Le_SequencialCaixa", objChequeDe)
        If lErro <> SUCESSO And lErro <> 109462 Then gError 109476
        
        If lErro = 109462 Then gError 109477
        
        objChequeDe.iStatus = STATUS_ATIVO
            
    End If
    
    'grava a memória de forma contrária. o que era origem será gravado como destino
    lErro = CF_ECF("TransfCaixa_Grava_Memoria_Entra", objTransfCaixa.objMovCaixaDe, objChequeDe)
    If lErro <> SUCESSO Then gError 109471
    
    'verifica se o movimento (Para) era do tipo Cheque
    If CF_ECF("DeTipoMovtoParaTMP", objTransfCaixa.objMovCaixaPara.iTipo) = TIPOMEIOPAGTOLOJA_CHEQUE Then
        
        'preenche o atributo para busca do cheque
        objChequePara.lSequencialCaixa = objTransfCaixa.objMovCaixaPara.lNumRefInterna
        
        'preenche o cheque
        lErro = CF_ECF("Cheque_Le_SequencialCaixa", objChequePara)
        If lErro <> SUCESSO And lErro <> 109462 Then gError 109473
        
        'se não encontrar-> erro
        If lErro = 109462 Then gError 109474
    
        'exclui os movimentos da memória
        For iIndice = gcolCheque.Count To 1 Step -1
    
            If gcolCheque.Item(iIndice).lSequencialCaixa = objChequePara.lSequencialCaixa Then
                gcolCheque.Remove (iIndice)
                Exit For
            End If
            
        Next
        
    End If
    
    'grava a memória de forma contrária. o que era destino, será gravado como origem
    lErro = CF_ECF("TransfCaixa_Grava_Memoria_Sai", objTransfCaixa.objMovCaixaPara)
    If lErro <> SUCESSO Then gError 109472
    
    'exclui os movimentos da memória
    For iIndice = gcolMovimentosCaixa.Count To 1 Step -1
    
        Set objMovimentoCaixaAux = gcolMovimentosCaixa.Item(iIndice)
        
        'se combinar o lSequencial do movto (DE) OU o do movto(PARA),remove-os da coleção global
        If objMovimentoCaixaAux.lSequencial = objTransfCaixa.objMovCaixaDe.lSequencial Or _
           objMovimentoCaixaAux.lSequencial = objTransfCaixa.objMovCaixaPara.lSequencial Then
            
            gcolMovimentosCaixa.Remove (iIndice)
        
        End If
    
    Next

    TransfCaixa_Exclui_Memoria = SUCESSO
    
    Exit Function
    
Erro_TransfCaixa_Exclui_Memoria:
    
    TransfCaixa_Exclui_Memoria = gErr
    
    Select Case gErr
    
        Case 109473, 109476
    
        Case 109474
            Call Rotina_ErroECF(vbOKOnly, ERRO_CHEQUEPRE_NAO_ENCONTRADO2, objChequePara.lSequencialCaixa)
            
        Case 109477
            Call Rotina_ErroECF(vbOKOnly, ERRO_CHEQUEPRE_NAO_ENCONTRADO2, objChequeDe.lSequencialCaixa)
    
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149304)
            
    End Select
    
    Exit Function

End Function

Function Caixa_Executa_Sangria_Completa(lSequencial As Long) As Long
'executa a sangria completa do caixa

Dim colRegistro As New Collection
Dim lErro As Long

On Error GoTo Erro_Caixa_Executa_Sangria_Completa

    'executa a sangria de dinheiro
    lErro = Caixa_Executa_Sangria_Dinheiro(lSequencial)
    If lErro <> SUCESSO Then gError 105353

    'executa a sangria de cheque
    lErro = Caixa_Executa_Sangria_Cheque(lSequencial)
    If lErro <> SUCESSO Then gError 105364

    'executa a sangria de boleto
    lErro = Caixa_Executa_Sangria_Boleto(lSequencial)
    If lErro <> SUCESSO Then gError 105373

    'executa a sangria de ticket
    lErro = Caixa_Executa_Sangria_ValeTicket(lSequencial)
    If lErro <> SUCESSO Then gError 105381

    'executa a sangria de outros
    lErro = Caixa_Executa_Sangria_Outros(lSequencial)
    If lErro <> SUCESSO Then gError 105389

    lSequencial = lSequencial - 1

    Caixa_Executa_Sangria_Completa = SUCESSO
    
    Exit Function

Erro_Caixa_Executa_Sangria_Completa:

    Caixa_Executa_Sangria_Completa = gErr

    Select Case gErr
    
        Case 105353, 105364, 105373, 105381, 105389
    
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149305)
            
    End Select
    
    Exit Function

End Function

Function Caixa_Executa_Sangria_Dinheiro(lSequencial As Long) As Long
'executa a sangria de todo dinheiro

Dim colRegistro As New Collection
Dim objMovimentoCaixa As ClassMovimentoCaixa
Dim lNumMovto As Long
Dim colMovimentoCaixa As New Collection
Dim lErro As Long
Dim dSaldoEmDinheiro As Double

On Error GoTo Erro_Caixa_Executa_Sangria_Dinheiro

    If giOrcamentoECF <> CAIXA_SO_ORCAMENTO Then

        lErro = CF_ECF("SaldoEmDinheiro_Le", dSaldoEmDinheiro)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

        '??? 24/08/2016 If gdSaldoDinheiro > 0 Then
        If dSaldoEmDinheiro > 0 Then
        
            'Função que Gera o Próximo Código do movimento de caixa
            lErro = CF_ECF("Caixa_Obtem_NumAutomatico", lNumMovto)
            If lErro <> SUCESSO Then gError 105369
    
            lErro = Move_Dados_Sangria_MovimentoCaixa(colMovimentoCaixa, dSaldoEmDinheiro, MOVIMENTOCAIXA_SANGRIA_DINHEIRO, MEIO_PAGAMENTO_DINHEIRO, COD_A_VISTA, lSequencial, lNumMovto)
            If lErro <> SUCESSO Then gError 105367
        
            Set objMovimentoCaixa = colMovimentoCaixa.Item(1)
        
            '??? 24/08/2016 gdSaldoDinheiro = 0
            
            'Funçao que Gera o Arquivo preparando para a gravação
            Call CF_ECF("MovimentoDinheiro_Gera_Log", colRegistro, objMovimentoCaixa)
        
            'Função que Vai Gravar as Informações no Arquivo de Caixa
            lErro = CF_ECF("MovimentoCaixaECF_Grava", colRegistro)
            If lErro <> SUCESSO Then gError 105355
        
            'Faz a sangria
            lErro = CF_ECF("Sangria_AFRAC", objMovimentoCaixa.dValor, "", MOVIMENTOCAIXA_SANGRIA_DINHEIRO)
            If lErro <> SUCESSO Then gError 105356
    
            gcolMovimentosCaixa.Add objMovimentoCaixa
    
        End If
    
    Else
        
        Call CF_ECF("Trata_Caixa_So_Orcamento")

    End If

    Caixa_Executa_Sangria_Dinheiro = SUCESSO
    
    Exit Function

Erro_Caixa_Executa_Sangria_Dinheiro:

    Caixa_Executa_Sangria_Dinheiro = gErr
    
    Select Case gErr
    
        Case 105354, 105355, 105356, 105367, 105369
        
        Case ERRO_SEM_MENSAGEM
    
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149306)
            
    End Select
    
    Exit Function

End Function

Function Caixa_Executa_Sangria_Cheque(lSequencial As Long) As Long
'executa a sangria de todos cheques ainda nao sangrados

Dim colMovimentoCaixa As New Collection
Dim colChequeNEsp As New Collection
Dim colChequeEsp As New Collection
Dim lErro As Long

On Error GoTo Erro_Caixa_Executa_Sangria_Cheque

    'Guarda os dados na memoria que serão gravados
    lErro = Move_Dados_Sangria_Cheque(lSequencial, colMovimentoCaixa, colChequeEsp, colChequeNEsp)
    If lErro <> SUCESSO Then gError 105357
    
    'Função que grava a sangria dos cheques ainda nao sangrados
    lErro = Caixa_Grava_Sangria_Cheque(colMovimentoCaixa, colChequeNEsp, colChequeEsp)
    If lErro <> SUCESSO Then gError 105358
    
    Caixa_Executa_Sangria_Cheque = SUCESSO
    
    Exit Function

Erro_Caixa_Executa_Sangria_Cheque:

    Caixa_Executa_Sangria_Cheque = gErr
    
    Select Case gErr
    
        Case 105357, 105358
    
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149307)
            
    End Select
    
    Exit Function

End Function

Function Move_Dados_Sangria_Cheque(lSequencial As Long, ByVal colMovimentoCaixa As Collection, ByVal colChequeEsp As Collection, ByVal colChequeNEsp As Collection) As Long
'Guarda os dados na memoria que serão gravados

Dim lErro As Long
Dim objCheque As ClassChequePre
Dim dValorEsp As Double
Dim dValorNaoEsp As Double
Dim lNumMovto As Long

On Error GoTo Erro_Move_Dados_Sangria_Cheque
    
    'Função que Gera o Próximo Código do movimento de caixa
    lErro = CF_ECF("Caixa_Obtem_NumAutomatico", lNumMovto)
    If lErro <> SUCESSO Then gError 105370
    
    For Each objCheque In gcolCheque
            
       If objCheque.lNumMovtoSangria = 0 Then
            
            If objCheque.iNaoEspecificado = CHEQUE_ESPECIFICADO Then
                'Adcionar o SequencialLoja a Coleção de Informações Adcionais que Foi passada por parâmetro
                colChequeEsp.Add objCheque.lSequencialCaixa
                dValorEsp = dValorEsp + objCheque.dValor
            Else
                'Adcionar o SequencialLoja a Coleção de Informações Adcionais que Foi passada por parâmetro
                colChequeNEsp.Add objCheque.lSequencialCaixa
                dValorNaoEsp = dValorNaoEsp + objCheque.dValor
            End If
            
        End If
        
    Next
    
    If dValorEsp > 0 Then
        
        lErro = Move_Dados_Sangria_MovimentoCaixa(colMovimentoCaixa, dValorEsp, MOVIMENTOCAIXA_SANGRIA_CHEQUE, MEIO_PAGAMENTO_CHEQUE, COD_A_VISTA, lSequencial, lNumMovto)
        If lErro <> SUCESSO Then gError 105371
        
    End If
    
    If dValorNaoEsp > 0 Then

        lErro = Move_Dados_Sangria_MovimentoCaixa(colMovimentoCaixa, dValorNaoEsp, MOVIMENTOCAIXA_SANGRIA_CHEQUE, 0, COD_A_VISTA, lSequencial, lNumMovto)
        If lErro <> SUCESSO Then gError 105372

    End If

    Move_Dados_Sangria_Cheque = SUCESSO

    Exit Function

Erro_Move_Dados_Sangria_Cheque:

    Move_Dados_Sangria_Cheque = gErr

    Select Case gErr

        Case 105370, 105371, 105372

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 149308)

    End Select

    Exit Function
    
End Function

Function Caixa_Grava_Sangria_Cheque(colMovimentoCaixa As Collection, colChequeNEsp As Collection, colChequeEsp As Collection) As Long
'Função que grava a sangria dos cheques ainda nao sangrados

Dim lErro As Long
Dim colRegistro As Collection
Dim iIndice As Integer
Dim objMovimentoCaixa As ClassMovimentoCaixa
Dim sMensagem As String
Dim objCheque As ClassChequePre

On Error GoTo Erro_Caixa_Grava_Sangria_Cheque

    If giOrcamentoECF <> CAIXA_SO_ORCAMENTO Then

        For Each objMovimentoCaixa In colMovimentoCaixa
                
            Set colRegistro = New Collection
                
            If objMovimentoCaixa.iAdmMeioPagto = 0 Then
                'Funçao que Gera o Arquivo preparando para a gravação
                Call CF_ECF("MovimentoCheque_Gera_Log", colRegistro, objMovimentoCaixa, colChequeNEsp)
            Else
                'Funçao que Gera o Arquivo preparando para a gravação
                Call CF_ECF("MovimentoCheque_Gera_Log", colRegistro, objMovimentoCaixa, colChequeEsp)
            End If
            
            'Função que Vai Gravar as Informações no Arquivo de Caixa
            lErro = CF_ECF("MovimentoCaixaECF_Grava", colRegistro)
            If lErro <> SUCESSO Then gError 105362
            
            'Faz a sangria
            lErro = CF_ECF("Sangria_AFRAC", objMovimentoCaixa.dValor, sMensagem, MOVIMENTOCAIXA_SANGRIA_CHEQUE)
            If lErro <> SUCESSO Then gError 105363
            
            'Adcionar a Coleção Global o objMovimento Caixa
            gcolMovimentosCaixa.Add objMovimentoCaixa
            
            gdSaldocheques = gdSaldocheques - objMovimentoCaixa.dValor
            
        Next
            
        For Each objCheque In gcolCheque
            
            'marca o cheque como sangrado
            If objCheque.lNumMovtoSangria = 0 Then objCheque.lNumMovtoSangria = colMovimentoCaixa(1).lNumMovto
                
        Next
    
    Else
        
        Call CF_ECF("Trata_Caixa_So_Orcamento")
        
    End If
    
    Caixa_Grava_Sangria_Cheque = SUCESSO

    Exit Function

Erro_Caixa_Grava_Sangria_Cheque:

    Caixa_Grava_Sangria_Cheque = gErr

    Select Case gErr

        Case 105362, 105363

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 149309)

    End Select
    
    Exit Function

End Function

Function Caixa_Executa_Sangria_Boleto(lSequencial As Long) As Long
'executa a sangria de todos boletos ainda nao sangrados

Dim colMovimentoCaixa As New Collection
Dim lErro As Long

On Error GoTo Erro_Caixa_Executa_Sangria_Boleto

    'Guarda os dados na memoria que serão gravados
    lErro = Move_Dados_Sangria_Boleto(lSequencial, colMovimentoCaixa)
    If lErro <> SUCESSO Then gError 105365
    
    'Função que grava a sangria dos boletos ainda nao sangrados
    lErro = Caixa_Grava_Sangria_Boleto(colMovimentoCaixa)
    If lErro <> SUCESSO Then gError 105366
    
    Caixa_Executa_Sangria_Boleto = SUCESSO
    
    Exit Function

Erro_Caixa_Executa_Sangria_Boleto:

    Caixa_Executa_Sangria_Boleto = gErr
    
    Select Case gErr
    
        Case 105365, 105366
    
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149310)
            
    End Select
    
    Exit Function

End Function

Function Move_Dados_Sangria_Boleto(lSequencial As Long, colMovimentoCaixa As Collection) As Long
'Função que Move os dados para a memoria

Dim lErro As Long
Dim objAdmMeioPagto As New ClassAdmMeioPagto
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim lNumMovto As Long
Dim colInfoComplementar As New Collection

On Error GoTo Erro_Move_Dados_Sangria_Boleto

    'Função que Gera o Próximo Código do movimento de caixa
    lErro = CF_ECF("Caixa_Obtem_NumAutomatico", lNumMovto)
    If lErro <> SUCESSO Then gError 105375

    For Each objAdmMeioPagtoCondPagto In gcolCartao

        If (objAdmMeioPagtoCondPagto.iTipoCartao = TIPO_MANUAL) And objAdmMeioPagtoCondPagto.dSaldo > 0 Then

            lErro = Move_Dados_Sangria_MovimentoCaixa(colMovimentoCaixa, objAdmMeioPagtoCondPagto.dSaldo, MOVIMENTOCAIXA_SANGRIA_BOLETO_CC, objAdmMeioPagtoCondPagto.iAdmMeioPagto, objAdmMeioPagtoCondPagto.iParcelamento, lSequencial, lNumMovto, TIPO_MANUAL)
            If lErro <> SUCESSO Then gError 105376
            
        End If

    Next

    Move_Dados_Sangria_Boleto = SUCESSO

    Exit Function

Erro_Move_Dados_Sangria_Boleto:

    Move_Dados_Sangria_Boleto = gErr

    Select Case gErr

        Case 105374
            Call Rotina_ErroECF(vbOKOnly, ERRO_TIPOMEIOPAGTO_NAO_CARTAO, gErr, objAdmMeioPagto.iTipoMeioPagto)

        Case 105375, 105376

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149311)

    End Select

    Exit Function

End Function

Function Caixa_Grava_Sangria_Boleto(colMovimentoCaixa As Collection) As Long
'grava os dados da sangria dos boletos manuais que ainda nao haviam sido sangrados

Dim lErro As Long
Dim colRegistro As Collection
Dim objMovimentoCaixa As New ClassMovimentoCaixa
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim sMensagem As String

On Error GoTo Erro_Caixa_Grava_Sangria_Boleto

    If giOrcamentoECF <> CAIXA_SO_ORCAMENTO Then

        For Each objMovimentoCaixa In colMovimentoCaixa
    
            Set colRegistro = New Collection
    
            'Funçao que Gera o Arquivo preparando para a gravação
            Call CF_ECF("MovimentoBoleto_Gera_Log", colRegistro, objMovimentoCaixa)
    
            'Função que Vai Gravar as Informações no Arquivo de Caixa
            lErro = CF_ECF("MovimentoCaixaECF_Grava", colRegistro)
            If lErro <> SUCESSO Then gError 105377
            
            'Faz a sangria
            lErro = CF_ECF("Sangria_AFRAC", objMovimentoCaixa.dValor, sMensagem, MOVIMENTOCAIXA_SANGRIA_BOLETO_CC)
            If lErro <> SUCESSO Then gError 105378
                
            'Adcionar a Coleção Global o Movimento Caixa de Sangria
            gcolMovimentosCaixa.Add objMovimentoCaixa
    
            For Each objAdmMeioPagtoCondPagto In gcolCartao
    
                If objMovimentoCaixa.iAdmMeioPagto = objAdmMeioPagtoCondPagto.iAdmMeioPagto And objMovimentoCaixa.iParcelamento = objAdmMeioPagtoCondPagto.iParcelamento And objMovimentoCaixa.iTipoCartao = objAdmMeioPagtoCondPagto.iTipoCartao Then
                    If objMovimentoCaixa.iAdmMeioPagto <> 0 Then
                        objAdmMeioPagtoCondPagto.dSaldo = objAdmMeioPagtoCondPagto.dSaldo - objMovimentoCaixa.dValor
                        Exit For
                    ElseIf objAdmMeioPagtoCondPagto.sNomeAdmMeioPagto = STRING_NAO_DETALHADO_CCREDITO Then
                        objAdmMeioPagtoCondPagto.dSaldo = objAdmMeioPagtoCondPagto.dSaldo - objMovimentoCaixa.dValor
                        Exit For
                    End If
                End If
            Next
    
        Next
    
    Else
        
        Call CF_ECF("Trata_Caixa_So_Orcamento")
    
    End If
    
    Caixa_Grava_Sangria_Boleto = SUCESSO

    Exit Function

Erro_Caixa_Grava_Sangria_Boleto:

    Caixa_Grava_Sangria_Boleto = gErr

    Select Case gErr

        Case 105377, 105378
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 149312)

    End Select
    
    Exit Function

End Function

Function Caixa_Executa_Sangria_ValeTicket(lSequencial As Long) As Long
'executa a sangria de todos vales ainda nao sangrados

Dim colMovimentoCaixa As New Collection
Dim lErro As Long

On Error GoTo Erro_Caixa_Executa_Sangria_ValeTicket

    'Guarda os dados na memoria que serão gravados
    lErro = Move_Dados_Sangria_ValeTicket(lSequencial, colMovimentoCaixa)
    If lErro <> SUCESSO Then gError 105379
    
    'Função que grava a sangria dos tickets ainda nao sangrados
    lErro = Caixa_Grava_Sangria_ValeTicket(colMovimentoCaixa)
    If lErro <> SUCESSO Then gError 105380
    
    Caixa_Executa_Sangria_ValeTicket = SUCESSO
    
    Exit Function

Erro_Caixa_Executa_Sangria_ValeTicket:

    Caixa_Executa_Sangria_ValeTicket = gErr
    
    Select Case gErr
    
        Case 105379, 105380
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149313)
            
    End Select
    
    Exit Function

End Function

Function Move_Dados_Sangria_ValeTicket(lSequencial As Long, colMovimentoCaixa As Collection) As Long
'Função que Move os dados para a memoria

Dim lErro As Long
Dim objAdmMeioPagtoCondPagto As ClassAdmMeioPagtoCondPagto
Dim lNumMovto As Long

On Error GoTo Erro_Move_Dados_Sangria_ValeTicket

    'Função que Gera o Próximo Código do movimento de caixa
    lErro = CF_ECF("Caixa_Obtem_NumAutomatico", lNumMovto)
    If lErro <> SUCESSO Then gError 105382

    For Each objAdmMeioPagtoCondPagto In gcolTicket

        If objAdmMeioPagtoCondPagto.dSaldo > 0 Then

            lErro = Move_Dados_Sangria_MovimentoCaixa(colMovimentoCaixa, objAdmMeioPagtoCondPagto.dSaldo, MOVIMENTOCAIXA_SANGRIA_TICKET, objAdmMeioPagtoCondPagto.iAdmMeioPagto, objAdmMeioPagtoCondPagto.iParcelamento, lSequencial, lNumMovto)
            If lErro <> SUCESSO Then gError 105383
            
        End If

    Next

    Move_Dados_Sangria_ValeTicket = SUCESSO

    Exit Function

Erro_Move_Dados_Sangria_ValeTicket:

    Move_Dados_Sangria_ValeTicket = gErr

    Select Case gErr

        Case 105382, 105383
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149314)

    End Select

    Exit Function

End Function

Function Caixa_Grava_Sangria_ValeTicket(colMovimentosCaixa As Collection) As Long
'grava os dados da sangria de ticket

Dim lErro As Long
Dim colRegistro As Collection
Dim objMovimentoCaixa As New ClassMovimentoCaixa
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim sMensagem As String
Dim colInfoComplementar As New Collection

On Error GoTo Erro_Caixa_Grava_Sangria_ValeTicket

    If giOrcamentoECF <> CAIXA_SO_ORCAMENTO Then


        For Each objMovimentoCaixa In colMovimentosCaixa
    
            Set colRegistro = New Collection
    
            'Funçao que Gera o Arquivo preparando para a gravação
            Call CF_ECF("MovimentoTicket_Gera_Log", colRegistro, objMovimentoCaixa)
    
            'Função que Vai Gravar as Informações no Arquivo de Caixa
            lErro = CF_ECF("MovimentoCaixaECF_Grava", colRegistro)
            If lErro <> SUCESSO Then gError 105384
            
            'Faz a sangria
            lErro = CF_ECF("Sangria_AFRAC", objMovimentoCaixa.dValor, sMensagem, MOVIMENTOCAIXA_SANGRIA_TICKET)
            If lErro <> SUCESSO Then gError 105385
                
            'Adcionar a Coleção Global o Movimento Caixa de Sangria
            gcolMovimentosCaixa.Add objMovimentoCaixa
                
            For Each objAdmMeioPagtoCondPagto In gcolTicket
    
                If objMovimentoCaixa.iAdmMeioPagto = objAdmMeioPagtoCondPagto.iAdmMeioPagto And objMovimentoCaixa.iParcelamento = objAdmMeioPagtoCondPagto.iParcelamento Then
                    objAdmMeioPagtoCondPagto.dSaldo = objAdmMeioPagtoCondPagto.dSaldo - objMovimentoCaixa.dValor
                    Exit For
                End If
            
            Next
                
        Next
    
    Else
        
        Call CF_ECF("Trata_Caixa_So_Orcamento")
            
    End If
            
    Caixa_Grava_Sangria_ValeTicket = SUCESSO

    Exit Function

Erro_Caixa_Grava_Sangria_ValeTicket:

    Caixa_Grava_Sangria_ValeTicket = gErr

    Select Case gErr
        
        Case 105384, 105385
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 149315)

    End Select

    Exit Function

End Function

Function Caixa_Executa_Sangria_Outros(lSequencial As Long) As Long
'executa a sangria de outros ainda nao sangrados

Dim colMovimentoCaixa As New Collection
Dim lErro As Long

On Error GoTo Erro_Caixa_Executa_Sangria_Outros

    'Guarda os dados na memoria que serão gravados
    lErro = Move_Dados_Sangria_Outros(lSequencial, colMovimentoCaixa)
    If lErro <> SUCESSO Then gError 105379
    
    'Função que grava a sangria outros ainda nao sangrados
    lErro = Caixa_Grava_Sangria_Outros(colMovimentoCaixa)
    If lErro <> SUCESSO Then gError 105380
    
    Caixa_Executa_Sangria_Outros = SUCESSO
    
    Exit Function

Erro_Caixa_Executa_Sangria_Outros:

    Caixa_Executa_Sangria_Outros = gErr
    
    Select Case gErr
    
        Case 105379, 105380
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149316)
            
    End Select
    
    Exit Function

End Function

Function Move_Dados_Sangria_Outros(lSequencial As Long, colMovimentoCaixa As Collection) As Long
'Função que Move os dados para a memoria

Dim lErro As Long
Dim objAdmMeioPagtoCondPagto As ClassAdmMeioPagtoCondPagto
Dim lNumMovto As Long

On Error GoTo Erro_Move_Dados_Sangria_Outros

    'Função que Gera o Próximo Código do movimento de caixa
    lErro = CF_ECF("Caixa_Obtem_NumAutomatico", lNumMovto)
    If lErro <> SUCESSO Then gError 105382

    For Each objAdmMeioPagtoCondPagto In gcolOutros

        If objAdmMeioPagtoCondPagto.dSaldo > 0 Then

            lErro = Move_Dados_Sangria_MovimentoCaixa(colMovimentoCaixa, objAdmMeioPagtoCondPagto.dSaldo, MOVIMENTOCAIXA_SANGRIA_OUTROS, objAdmMeioPagtoCondPagto.iAdmMeioPagto, objAdmMeioPagtoCondPagto.iParcelamento, lSequencial, lNumMovto)
            If lErro <> SUCESSO Then gError 105383
            
        End If

    Next

    Move_Dados_Sangria_Outros = SUCESSO

    Exit Function

Erro_Move_Dados_Sangria_Outros:

    Move_Dados_Sangria_Outros = gErr

    Select Case gErr

        Case 105382, 105383
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149317)

    End Select

    Exit Function

End Function

Function Caixa_Grava_Sangria_Outros(colMovimentosCaixa As Collection) As Long
'grava os dados da sangria outros

Dim lErro As Long
Dim colRegistro As Collection
Dim objMovimentoCaixa As New ClassMovimentoCaixa
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim sMensagem As String
Dim colInfoComplementar As New Collection

On Error GoTo Erro_Caixa_Grava_Sangria_Outros


    If giOrcamentoECF <> CAIXA_SO_ORCAMENTO Then

        For Each objMovimentoCaixa In colMovimentosCaixa
    
            Set colRegistro = New Collection
    
            'Funçao que Gera o Arquivo preparando para a gravação
            Call CF_ECF("MovimentoOutros_Gera_Log", colRegistro, objMovimentoCaixa)
            If lErro <> SUCESSO Then gError 105770
    
            'Função que Vai Gravar as Informações no Arquivo de Caixa
            lErro = CF_ECF("MovimentoCaixaECF_Grava", colRegistro)
            If lErro <> SUCESSO Then gError 105386
            
            'Faz a sangria
            lErro = CF_ECF("Sangria_AFRAC", objMovimentoCaixa.dValor, sMensagem, MOVIMENTOCAIXA_SANGRIA_OUTROS)
            If lErro <> SUCESSO Then gError 105387
                
            'Adcionar a Coleção Global o Movimento Caixa de Sangria
            gcolMovimentosCaixa.Add objMovimentoCaixa
                
            For Each objAdmMeioPagtoCondPagto In gcolTicket
    
                If objMovimentoCaixa.iAdmMeioPagto = objAdmMeioPagtoCondPagto.iAdmMeioPagto And objMovimentoCaixa.iParcelamento = objAdmMeioPagtoCondPagto.iParcelamento Then
                    objAdmMeioPagtoCondPagto.dSaldo = objAdmMeioPagtoCondPagto.dSaldo - objMovimentoCaixa.dValor
                    Exit For
                End If
            
            Next
                
        Next
    
    Else
        
        Call CF_ECF("Trata_Caixa_So_Orcamento")
            
    End If
            
    Caixa_Grava_Sangria_Outros = SUCESSO

    Exit Function

Erro_Caixa_Grava_Sangria_Outros:

    Caixa_Grava_Sangria_Outros = gErr

Select Case gErr
        
        Case 105386, 105387, 105770
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 149318)

    End Select

    Exit Function

End Function

Private Function Move_Dados_Sangria_MovimentoCaixa(colMovimentoCaixa As Collection, ByVal dValor As Double, ByVal iTipoMovtoCaixa As Integer, ByVal iAdmMeioPagto As Integer, ByVal iParcelamento As Integer, lSequencial As Long, ByVal lNumMovto As Long, Optional ByVal iTipoCartao As Integer = 0, Optional ByVal dtDataPreDatado As Date = DATA_NULA) As Long
'move os dados passados como parametro para objMovimentoCaixa e retorna em colMovimentoCaixa

Dim objMovimentoCaixa As New ClassMovimentoCaixa
Dim lErro As Long

On Error GoTo Erro_Move_Dados_Sangria_MovimentoCaixa

    'Guarda no objMovimentoCaixa os Dados que Serão Usados para a Geração do Movimento de Caixa
    lErro = CF_ECF("Move_DadosGlobais_Memoria", objMovimentoCaixa)
    If lErro <> SUCESSO Then gError 105367

    'guarda o valor do movimento
    objMovimentoCaixa.dValor = dValor
    
    'guarda o tipo de Movto
    objMovimentoCaixa.iTipo = iTipoMovtoCaixa
    
    'Preenche o obj com o Numero do Movimento
    objMovimentoCaixa.lNumMovto = lNumMovto
    
    objMovimentoCaixa.iParcelamento = iParcelamento

    'Guardo o Codigo do meio de Pagto no Movimento Caixa
    objMovimentoCaixa.iAdmMeioPagto = iAdmMeioPagto
    
    objMovimentoCaixa.iTipoCartao = iTipoCartao

    objMovimentoCaixa.lSequencial = lSequencial
    
    objMovimentoCaixa.dtDataPreDatado = dtDataPreDatado

    lSequencial = lSequencial + 1

    colMovimentoCaixa.Add objMovimentoCaixa

    Move_Dados_Sangria_MovimentoCaixa = SUCESSO
    
    Exit Function
        
Erro_Move_Dados_Sangria_MovimentoCaixa:

    Move_Dados_Sangria_MovimentoCaixa = gErr

    Select Case gErr

        Case 105367

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149319)

    End Select

    Exit Function

End Function

Function Caixa_Executa_Transf_Suprimento(lSequencial As Long) As Long
'gera registros no arquivão correspondente ao suprimento que está no caixa.
'para ser usado, quando o dia virar, novo arquivão será utilizado,
'e não foi feita sangria completa

Dim colRegistro As New Collection
Dim lErro As Long

On Error GoTo Erro_Caixa_Executa_Transf_Suprimento

    'executa a transferencia de dinheiro
    lErro = Caixa_Executa_Transf_Sup_Dinheiro(lSequencial)
    If lErro <> SUCESSO Then gError 105417

    'executa a transferencia de cheque
    lErro = Caixa_Executa_Transf_Sup_Cheque(lSequencial)
    If lErro <> SUCESSO Then gError 105418

    'executa a transferencia de boleto
    lErro = Caixa_Executa_Transf_Sup_Boleto(lSequencial)
    If lErro <> SUCESSO Then gError 105419

    'executa a transferencia de ticket
    lErro = Caixa_Executa_Transf_Sup_ValeTicket(lSequencial)
    If lErro <> SUCESSO Then gError 105420

    'executa a transferencia de outros
    lErro = Caixa_Executa_Transf_Sup_Outros(lSequencial)
    If lErro <> SUCESSO Then gError 105421

    Caixa_Executa_Transf_Suprimento = SUCESSO
    
    Exit Function

Erro_Caixa_Executa_Transf_Suprimento:

    Caixa_Executa_Transf_Suprimento = gErr

    Select Case gErr
    
        Case 105417 To 105421
    
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149320)
            
    End Select
    
    Exit Function

End Function

Function Caixa_Executa_Transf_Sup_Dinheiro(lSequencial As Long) As Long
'cria registro no arquivão referente ao suprimento de dinheiro que tem no caixa
'para ser usado, quando o dia virar, novo arquivão será utilizado,
'e não foi feita sangria completa

Dim colRegistro As New Collection
Dim objMovimentoCaixa As ClassMovimentoCaixa
Dim lNumMovto As Long
Dim colMovimentoCaixa As New Collection
Dim lErro As Long
Dim dSaldoEmDinheiro As Double

On Error GoTo Erro_Caixa_Executa_Transf_Sup_Dinheiro

    If giOrcamentoECF <> CAIXA_SO_ORCAMENTO Then

        lErro = CF_ECF("SaldoEmDinheiro_Le", dSaldoEmDinheiro)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

        '??? 24/08/2016 If gdSaldoDinheiro > 0 Then
        If dSaldoEmDinheiro > 0 Then
    
            'Função que Gera o Próximo Código do movimento de caixa
            lErro = CF_ECF("Caixa_Obtem_NumAutomatico", lNumMovto)
            If lErro <> SUCESSO Then gError 105392
    
   
            lErro = Move_Dados_Sangria_MovimentoCaixa(colMovimentoCaixa, dSaldoEmDinheiro, MOVIMENTOCAIXA_TRANSF_SUP_DINHEIRO, MEIO_PAGAMENTO_DINHEIRO, COD_A_VISTA, lSequencial, lNumMovto)
            If lErro <> SUCESSO Then gError 105393
        
            Set objMovimentoCaixa = colMovimentoCaixa.Item(1)
        
            'Funçao que Gera o Arquivo preparando para a gravação
            Call CF_ECF("MovimentoDinheiro_Gera_Log", colRegistro, objMovimentoCaixa)
        
            'Função que Vai Gravar as Informações no Arquivo de Caixa
            lErro = CF_ECF("MovimentoCaixaECF_Grava", colRegistro)
            If lErro <> SUCESSO Then gError 105394
        
        End If
    
    Else
        
        Call CF_ECF("Trata_Caixa_So_Orcamento")

    End If
    
    Caixa_Executa_Transf_Sup_Dinheiro = SUCESSO
    
    Exit Function

Erro_Caixa_Executa_Transf_Sup_Dinheiro:

    Caixa_Executa_Transf_Sup_Dinheiro = gErr
    
    Select Case gErr
    
        Case 105392 To 105394
        
        Case ERRO_SEM_MENSAGEM
    
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149321)
            
    End Select
    
    Exit Function

End Function

Function Caixa_Executa_Transf_Sup_Cheque(lSequencial As Long) As Long
'cria registro no arquivão referente ao suprimento de cheque que tem no caixa
'para ser usado, quando o dia virar, novo arquivão será utilizado,
'e não foi feita sangria completa

Dim colMovimentoCaixa As New Collection
Dim colChequeNEsp As New Collection
Dim colChequeEsp As New Collection
Dim lErro As Long

On Error GoTo Erro_Caixa_Executa_Transf_Sup_Cheque

    'Guarda os dados na memoria que serão gravados
    lErro = Move_Dados_Transf_Sup_Cheque(lSequencial, colMovimentoCaixa, colChequeEsp, colChequeNEsp)
    If lErro <> SUCESSO Then gError 105395
    
    'Função que grava a transferencia dos suprimentos
    lErro = Caixa_Grava_Transf_Sup_Cheque(colMovimentoCaixa, colChequeNEsp, colChequeEsp)
    If lErro <> SUCESSO Then gError 105396
    
    Caixa_Executa_Transf_Sup_Cheque = SUCESSO
    
    Exit Function

Erro_Caixa_Executa_Transf_Sup_Cheque:

    Caixa_Executa_Transf_Sup_Cheque = gErr
    
    Select Case gErr
    
        Case 105395, 105396
    
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149322)
            
    End Select
    
    Exit Function

End Function

Function Move_Dados_Transf_Sup_Cheque(lSequencial As Long, ByVal colMovimentoCaixa As Collection, ByVal colChequeEsp As Collection, ByVal colChequeNEsp As Collection) As Long
'Guarda os dados na memoria que serão gravados
'cria registro no arquivão referente ao suprimento de cheque que tem no caixa
'para ser usado, quando o dia virar, novo arquivão será utilizado,
'e não foi feita sangria completa

Dim lErro As Long
Dim objCheque As ClassChequePre
Dim dValorEsp As Double
Dim dValorNaoEsp As Double
Dim lNumMovto As Long

On Error GoTo Erro_Move_Dados_Transf_Sup_Cheque
    
    For Each objCheque In gcolCheque
            
       If objCheque.lNumMovtoSangria = 0 And objCheque.iStatus <> STATUS_EXCLUIDO Then
            
            If objCheque.iNaoEspecificado = CHEQUE_ESPECIFICADO Then
                'Adicionar o SequencialLoja a Coleção de Informações Adcionais que Foi passada por parâmetro
                colChequeEsp.Add objCheque
                dValorEsp = dValorEsp + objCheque.dValor
            Else
                'Adicionar o SequencialLoja a Coleção de Informações Adcionais que Foi passada por parâmetro
                colChequeNEsp.Add objCheque
                dValorNaoEsp = dValorNaoEsp + objCheque.dValor
            End If
            
        End If
        
    Next
    
    If dValorEsp > 0 Then
        
        'Função que Gera o Próximo Código do movimento de caixa
        lErro = CF_ECF("Caixa_Obtem_NumAutomatico", lNumMovto)
        If lErro <> SUCESSO Then gError 105397
        
        lErro = Move_Dados_Sangria_MovimentoCaixa(colMovimentoCaixa, dValorEsp, MOVIMENTOCAIXA_TRANSF_SUP_CHEQUE, MEIO_PAGAMENTO_CHEQUE, COD_A_VISTA, lSequencial, lNumMovto)
        If lErro <> SUCESSO Then gError 105398
        
    End If
    
    If dValorNaoEsp > 0 Then

        'Função que Gera o Próximo Código do movimento de caixa
        lErro = CF_ECF("Caixa_Obtem_NumAutomatico", lNumMovto)
        If lErro <> SUCESSO Then gError 105692

        lErro = Move_Dados_Sangria_MovimentoCaixa(colMovimentoCaixa, dValorNaoEsp, MOVIMENTOCAIXA_TRANSF_SUP_CHEQUE, 0, COD_A_VISTA, lSequencial, lNumMovto)
        If lErro <> SUCESSO Then gError 105399

    End If

    Move_Dados_Transf_Sup_Cheque = SUCESSO

    Exit Function

Erro_Move_Dados_Transf_Sup_Cheque:

    Move_Dados_Transf_Sup_Cheque = gErr

    Select Case gErr

        Case 105397 To 105399, 105692

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 149323)

    End Select

    Exit Function
    
End Function

Function Caixa_Grava_Transf_Sup_Cheque(colMovimentoCaixa As Collection, colChequeNEsp As Collection, colChequeEsp As Collection) As Long
'Função que grava a trasnferencia dos cheques ainda nao sangrados
'cria registro no arquivão referente ao suprimento de cheque que tem no caixa
'para ser usado, quando o dia virar, novo arquivão será utilizado,
'e não foi feita sangria completa

Dim lErro As Long
Dim colRegistro As Collection
Dim iIndice As Integer
Dim objMovimentoCaixa As ClassMovimentoCaixa
Dim sMensagem As String
Dim objCheque As ClassChequePre

On Error GoTo Erro_Caixa_Grava_Transf_Sup_Cheque

    If giOrcamentoECF <> CAIXA_SO_ORCAMENTO Then

        For Each objMovimentoCaixa In colMovimentoCaixa
                
            Set colRegistro = New Collection
                
            If objMovimentoCaixa.iAdmMeioPagto = 0 Then
                'Funçao que Gera o Arquivo preparando para a gravação
                Call CF_ECF("MovimentoCheque_Gera_Log_1", colRegistro, objMovimentoCaixa, colChequeNEsp)
            Else
                'Funçao que Gera o Arquivo preparando para a gravação
                Call CF_ECF("MovimentoCheque_Gera_Log_1", colRegistro, objMovimentoCaixa, colChequeEsp)
            End If
            
            'Função que Vai Gravar as Informações no Arquivo de Caixa
            lErro = CF_ECF("MovimentoCaixaECF_Grava", colRegistro)
            If lErro <> SUCESSO Then gError 105400
            
        Next
    
    Else
        
        Call CF_ECF("Trata_Caixa_So_Orcamento")
        
    End If
        
    Caixa_Grava_Transf_Sup_Cheque = SUCESSO

    Exit Function

Erro_Caixa_Grava_Transf_Sup_Cheque:

    Caixa_Grava_Transf_Sup_Cheque = gErr

    Select Case gErr

        Case 105400

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 149324)

    End Select
    
    Exit Function

End Function

Function Caixa_Executa_Transf_Sup_Boleto(lSequencial As Long) As Long
'cria registro no arquivão referente ao suprimento de boletos que tem no caixa
'para ser usado, quando o dia virar, novo arquivão será utilizado,
'e não foi feita sangria completa

Dim colMovimentoCaixa As New Collection
Dim lErro As Long

On Error GoTo Erro_Caixa_Executa_Transf_Sup_Boleto

    'Guarda os dados na memoria que serão gravados
    lErro = Move_Dados_Transf_Sup_Boleto(lSequencial, colMovimentoCaixa)
    If lErro <> SUCESSO Then gError 105401
    
    'Função que grava a transferencia dos suprimentos
    lErro = Caixa_Grava_Transf_Sup_Boleto(colMovimentoCaixa)
    If lErro <> SUCESSO Then gError 105402
    
    Caixa_Executa_Transf_Sup_Boleto = SUCESSO
    
    Exit Function

Erro_Caixa_Executa_Transf_Sup_Boleto:

    Caixa_Executa_Transf_Sup_Boleto = gErr
    
    Select Case gErr
    
        Case 105401, 105402
    
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149325)
            
    End Select
    
    Exit Function

End Function

Function Move_Dados_Transf_Sup_Boleto(lSequencial As Long, colMovimentoCaixa As Collection) As Long
'Guarda os dados na memoria que serão gravados
'cria registro no arquivão referente ao suprimento de cheque que tem no caixa
'para ser usado, quando o dia virar, novo arquivão será utilizado,
'e não foi feita sangria completa

Dim lErro As Long
Dim objAdmMeioPagto As New ClassAdmMeioPagto
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim iTipoMovtoCaixa As Integer
Dim lNumMovto As Long

On Error GoTo Erro_Move_Dados_Transf_Sup_Boleto

    For Each objAdmMeioPagtoCondPagto In gcolCartao

        If (objAdmMeioPagtoCondPagto.iTipoCartao = TIPO_MANUAL) And objAdmMeioPagtoCondPagto.dSaldo > 0 Then

            'Função que Gera o Próximo Código do movimento de caixa
            lErro = CF_ECF("Caixa_Obtem_NumAutomatico", lNumMovto)
            If lErro <> SUCESSO Then gError 105404

            lErro = Move_Dados_Sangria_MovimentoCaixa(colMovimentoCaixa, objAdmMeioPagtoCondPagto.dSaldo, MOVIMENTOCAIXA_TRANSF_SUP_BOLETO_CC, objAdmMeioPagtoCondPagto.iAdmMeioPagto, objAdmMeioPagtoCondPagto.iParcelamento, lSequencial, lNumMovto, TIPO_MANUAL)
            If lErro <> SUCESSO Then gError 105405
            
        End If

    Next

    Move_Dados_Transf_Sup_Boleto = SUCESSO

    Exit Function

Erro_Move_Dados_Transf_Sup_Boleto:

    Move_Dados_Transf_Sup_Boleto = gErr

    Select Case gErr

        Case 105404, 105405

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149326)

    End Select

    Exit Function

End Function

Function Caixa_Grava_Transf_Sup_Boleto(colMovimentoCaixa As Collection) As Long
'Função que grava a trasnferencia dos boletos de cartao de credito ainda nao sangrados
'cria registro no arquivão referente ao suprimento de cheque que tem no caixa
'para ser usado, quando o dia virar, novo arquivão será utilizado,
'e não foi feita sangria completa

Dim lErro As Long
Dim colRegistro As Collection
Dim objMovimentoCaixa As New ClassMovimentoCaixa
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim sMensagem As String

On Error GoTo Erro_Caixa_Grava_Transf_Sup_Boleto

    If giOrcamentoECF <> CAIXA_SO_ORCAMENTO Then


        For Each objMovimentoCaixa In colMovimentoCaixa
    
            Set colRegistro = New Collection
    
            'Funçao que Gera o Arquivo preparando para a gravação
            Call CF_ECF("MovimentoBoleto_Gera_Log", colRegistro, objMovimentoCaixa)
    
            'Função que Vai Gravar as Informações no Arquivo de Caixa
            lErro = CF_ECF("MovimentoCaixaECF_Grava", colRegistro)
            If lErro <> SUCESSO Then gError 105406
            
        Next
    
    Else
        
        Call CF_ECF("Trata_Caixa_So_Orcamento")
    
    End If
    
    Caixa_Grava_Transf_Sup_Boleto = SUCESSO

    Exit Function

Erro_Caixa_Grava_Transf_Sup_Boleto:

    Caixa_Grava_Transf_Sup_Boleto = gErr

    Select Case gErr

        Case 105406
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 149327)

    End Select
    
    Exit Function

End Function

Function Caixa_Executa_Transf_Sup_ValeTicket(lSequencial As Long) As Long
'cria registro no arquivão referente ao suprimento de vale ticket que tem no caixa
'para ser usado, quando o dia virar, novo arquivão será utilizado,
'e não foi feita sangria completa

Dim colMovimentoCaixa As New Collection
Dim lErro As Long

On Error GoTo Erro_Caixa_Executa_Transf_Sup_ValeTicket

    'Guarda os dados na memoria que serão gravados
    lErro = Move_Dados_Transf_Sup_ValeTicket(lSequencial, colMovimentoCaixa)
    If lErro <> SUCESSO Then gError 105407
    
    'Função que grava a transferencia do suprimento dos tickets ainda nao sangrados
    lErro = Caixa_Grava_Transf_Sup_ValeTicket(colMovimentoCaixa)
    If lErro <> SUCESSO Then gError 105408
    
    Caixa_Executa_Transf_Sup_ValeTicket = SUCESSO
    
    Exit Function

Erro_Caixa_Executa_Transf_Sup_ValeTicket:

    Caixa_Executa_Transf_Sup_ValeTicket = gErr
    
    Select Case gErr
    
        Case 105407, 105408
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149328)
            
    End Select
    
    Exit Function

End Function

Function Move_Dados_Transf_Sup_ValeTicket(lSequencial As Long, colMovimentoCaixa As Collection) As Long
'Guarda os dados na memoria que serão gravados
'cria registro no arquivão referente ao suprimento de cheque que tem no caixa
'para ser usado, quando o dia virar, novo arquivão será utilizado,
'e não foi feita sangria completa

Dim lErro As Long
Dim objAdmMeioPagtoCondPagto As ClassAdmMeioPagtoCondPagto
Dim lNumMovto As Long

On Error GoTo Erro_Move_Dados_Transf_Sup_ValeTicket

    For Each objAdmMeioPagtoCondPagto In gcolTicket

        If objAdmMeioPagtoCondPagto.dSaldo > 0 Then

            'Função que Gera o Próximo Código do movimento de caixa
            lErro = CF_ECF("Caixa_Obtem_NumAutomatico", lNumMovto)
            If lErro <> SUCESSO Then gError 105409

            lErro = Move_Dados_Sangria_MovimentoCaixa(colMovimentoCaixa, objAdmMeioPagtoCondPagto.dSaldo, MOVIMENTOCAIXA_TRANSF_SUP_TICKET, objAdmMeioPagtoCondPagto.iAdmMeioPagto, objAdmMeioPagtoCondPagto.iParcelamento, lSequencial, lNumMovto)
            If lErro <> SUCESSO Then gError 105410
            
        End If

    Next

    Move_Dados_Transf_Sup_ValeTicket = SUCESSO

    Exit Function

Erro_Move_Dados_Transf_Sup_ValeTicket:

    Move_Dados_Transf_Sup_ValeTicket = gErr

    Select Case gErr

        Case 105409, 105410
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149329)

    End Select

    Exit Function

End Function

Function Caixa_Grava_Transf_Sup_ValeTicket(colMovimentosCaixa As Collection) As Long
'Função que grava a transferencia dos tickets ainda nao sangrados
'cria registro no arquivão referente ao suprimento de cheque que tem no caixa
'para ser usado, quando o dia virar, novo arquivão será utilizado,
'e não foi feita sangria completa

Dim lErro As Long
Dim colRegistro As Collection
Dim objMovimentoCaixa As New ClassMovimentoCaixa
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim sMensagem As String
Dim colInfoComplementar As New Collection

On Error GoTo Erro_Caixa_Grava_Transf_Sup_ValeTicket

    If giOrcamentoECF <> CAIXA_SO_ORCAMENTO Then

        For Each objMovimentoCaixa In colMovimentosCaixa
    
            Set colRegistro = New Collection
    
            'Funçao que Gera o Arquivo preparando para a gravação
            Call CF_ECF("MovimentoTicket_Gera_Log", colRegistro, objMovimentoCaixa)
    
            'Função que Vai Gravar as Informações no Arquivo de Caixa
            lErro = CF_ECF("MovimentoCaixaECF_Grava", colRegistro)
            If lErro <> SUCESSO Then gError 105411
            
        Next
    
    Else
        
        Call CF_ECF("Trata_Caixa_So_Orcamento")
            
    End If
    
    Caixa_Grava_Transf_Sup_ValeTicket = SUCESSO

    Exit Function

Erro_Caixa_Grava_Transf_Sup_ValeTicket:

    Caixa_Grava_Transf_Sup_ValeTicket = gErr

    Select Case gErr
        
        Case 105411
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 149330)

    End Select

    Exit Function

End Function

Function Caixa_Executa_Transf_Sup_Outros(lSequencial As Long) As Long
'cria registro no arquivão referente ao suprimento de outros que tem no caixa
'para ser usado, quando o dia virar, novo arquivão será utilizado,
'e não foi feita sangria completa

Dim colMovimentoCaixa As New Collection
Dim lErro As Long

On Error GoTo Erro_Caixa_Executa_Transf_Sup_Outros

    'Guarda os dados na memoria que serão gravados
    lErro = Move_Dados_Transf_Sup_Outros(lSequencial, colMovimentoCaixa)
    If lErro <> SUCESSO Then gError 105412
    
    'Função que grava a transferencia do suprimento de outros ainda nao sangrados
    lErro = Caixa_Grava_Transf_Sup_Outros(colMovimentoCaixa)
    If lErro <> SUCESSO Then gError 105413
    
    Caixa_Executa_Transf_Sup_Outros = SUCESSO
    
    Exit Function

Erro_Caixa_Executa_Transf_Sup_Outros:

    Caixa_Executa_Transf_Sup_Outros = gErr
    
    Select Case gErr
    
        Case 105412, 105413
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149331)
            
    End Select
    
    Exit Function

End Function

Function Move_Dados_Transf_Sup_Outros(lSequencial As Long, colMovimentoCaixa As Collection) As Long
'Guarda os dados na memoria que serão gravados
'cria registro no arquivão referente ao suprimento de cheque que tem no caixa
'para ser usado, quando o dia virar, novo arquivão será utilizado,
'e não foi feita sangria completa

Dim lErro As Long
Dim objAdmMeioPagtoCondPagto As ClassAdmMeioPagtoCondPagto
Dim lNumMovto As Long

On Error GoTo Erro_Move_Dados_Transf_Sup_Outros

    For Each objAdmMeioPagtoCondPagto In gcolOutros

        If objAdmMeioPagtoCondPagto.dSaldo > 0 Then

            'Função que Gera o Próximo Código do movimento de caixa
            lErro = CF_ECF("Caixa_Obtem_NumAutomatico", lNumMovto)
            If lErro <> SUCESSO Then gError 105414

            lErro = Move_Dados_Sangria_MovimentoCaixa(colMovimentoCaixa, objAdmMeioPagtoCondPagto.dSaldo, MOVIMENTOCAIXA_TRANSF_SUP_OUTROS, objAdmMeioPagtoCondPagto.iAdmMeioPagto, objAdmMeioPagtoCondPagto.iParcelamento, lSequencial, lNumMovto)
            If lErro <> SUCESSO Then gError 105415
            
        End If

    Next

    Move_Dados_Transf_Sup_Outros = SUCESSO

    Exit Function

Erro_Move_Dados_Transf_Sup_Outros:

    Move_Dados_Transf_Sup_Outros = gErr

    Select Case gErr

        Case 105414, 105415
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149332)

    End Select

    Exit Function

End Function

Function Caixa_Grava_Transf_Sup_Outros(colMovimentosCaixa As Collection) As Long
'Função que grava a transferencia de outros ainda nao sangrados
'cria registro no arquivão referente ao suprimento de cheque que tem no caixa
'para ser usado, quando o dia virar, novo arquivão será utilizado,
'e não foi feita sangria completa

Dim lErro As Long
Dim colRegistro As Collection
Dim objMovimentoCaixa As New ClassMovimentoCaixa
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim sMensagem As String
Dim colInfoComplementar As New Collection

On Error GoTo Erro_Caixa_Grava_Transf_Sup_Outros

    If giOrcamentoECF <> CAIXA_SO_ORCAMENTO Then

        For Each objMovimentoCaixa In colMovimentosCaixa
    
            Set colRegistro = New Collection
    
            'Funçao que Gera o Arquivo preparando para a gravação
            Call CF_ECF("MovimentoOutros_Gera_Log", colRegistro, objMovimentoCaixa)
    
            'Função que Vai Gravar as Informações no Arquivo de Caixa
            lErro = CF_ECF("MovimentoCaixaECF_Grava", colRegistro)
            If lErro <> SUCESSO Then gError 105416
            
        Next
    
    Else
        
        Call CF_ECF("Trata_Caixa_So_Orcamento")
            
    End If
    
    Caixa_Grava_Transf_Sup_Outros = SUCESSO

    Exit Function

Erro_Caixa_Grava_Transf_Sup_Outros:

    Caixa_Grava_Transf_Sup_Outros = gErr

    Select Case gErr
        
        Case 105416
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 149333)

    End Select

    Exit Function

End Function

Function Caixa_Executa_Sangria_Boleto_PosTef(lSequencial As Long) As Long
'executa a sangria de todos boletos PosTef

Dim colMovimentoCaixa As New Collection
Dim lErro As Long
Dim objMovCaixa As ClassMovimentoCaixa

On Error GoTo Erro_Caixa_Executa_Sangria_Boleto_PosTef

    'Guarda os dados na memoria que serão gravados
    lErro = Move_Dados_Sangria_Boleto_PosTef(lSequencial, colMovimentoCaixa)
    If lErro <> SUCESSO Then gError 105423

    For Each objMovCaixa In colMovimentoCaixa
            objMovCaixa.dtDataMovimento = Date
            objMovCaixa.dHora = CDbl(Time)
    Next

    'Função que grava a sangria dos boletos ainda nao sangrados
    lErro = Caixa_Grava_Sangria_Boleto_PosTef(colMovimentoCaixa)
    If lErro <> SUCESSO Then gError 105424

    Caixa_Executa_Sangria_Boleto_PosTef = SUCESSO

    Exit Function

Erro_Caixa_Executa_Sangria_Boleto_PosTef:

    Caixa_Executa_Sangria_Boleto_PosTef = gErr

    Select Case gErr

        Case 105423, 105424

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149334)

    End Select

    Exit Function

End Function

Function Move_Dados_Sangria_Boleto_PosTef(lSequencial As Long, colMovimentoCaixa As Collection) As Long
'Função que Move os dados para a memoria

Dim lErro As Long
Dim objAdmMeioPagto As New ClassAdmMeioPagto
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim lNumMovto As Long
Dim colInfoComplementar As New Collection
Dim iTipoMovCx As Integer

On Error GoTo Erro_Move_Dados_Sangria_Boleto_PosTef

    'Função que Gera o Próximo Código do movimento de caixa
    lErro = CF_ECF("Caixa_Obtem_NumAutomatico", lNumMovto)
    If lErro <> SUCESSO Then gError 105425

    For Each objAdmMeioPagtoCondPagto In gcolCartao

        iTipoMovCx = 0

        If (objAdmMeioPagtoCondPagto.iTipoCartao = TIPO_POS Or objAdmMeioPagtoCondPagto.iTipoCartao = TIPO_TEF) And objAdmMeioPagtoCondPagto.dSaldo > 0 Then

            If objAdmMeioPagtoCondPagto.sNomeAdmMeioPagto = STRING_NAO_DETALHADO_CCREDITO Then iTipoMovCx = MOVIMENTOCAIXA_SANGRIA_BOLETO_CC

            If objAdmMeioPagtoCondPagto.sNomeAdmMeioPagto = STRING_NAO_DETALHADO_CDEBITO Then iTipoMovCx = MOVIMENTOCAIXA_SANGRIA_BOLETO_CD

            If iTipoMovCx = 0 Then
            
                    For Each objAdmMeioPagto In gcolAdmMeioPagto
                        If objAdmMeioPagto.iCodigo = objAdmMeioPagtoCondPagto.iAdmMeioPagto Then
                            If objAdmMeioPagto.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_CARTAO_CREDITO Then iTipoMovCx = MOVIMENTOCAIXA_SANGRIA_BOLETO_CC
                            If objAdmMeioPagto.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_CARTAO_DEBITO Then iTipoMovCx = MOVIMENTOCAIXA_SANGRIA_BOLETO_CD
                            
                            Exit For
                        End If
                    Next
                    
            End If
            
            lErro = Move_Dados_Sangria_MovimentoCaixa(colMovimentoCaixa, objAdmMeioPagtoCondPagto.dSaldo, iTipoMovCx, objAdmMeioPagtoCondPagto.iAdmMeioPagto, objAdmMeioPagtoCondPagto.iParcelamento, lSequencial, lNumMovto, objAdmMeioPagtoCondPagto.iTipoCartao, objAdmMeioPagtoCondPagto.dtDataPreDatado)
            If lErro <> SUCESSO Then gError 105426

        End If

    Next
    
    For Each objAdmMeioPagtoCondPagto In gcolTicket

        iTipoMovCx = 0

        If (objAdmMeioPagtoCondPagto.iTipoCartao = TIPO_POS Or objAdmMeioPagtoCondPagto.iTipoCartao = TIPO_TEF) And objAdmMeioPagtoCondPagto.dSaldo > 0 Then

            iTipoMovCx = MOVIMENTOCAIXA_SANGRIA_TICKET
            
            lErro = Move_Dados_Sangria_MovimentoCaixa(colMovimentoCaixa, objAdmMeioPagtoCondPagto.dSaldo, iTipoMovCx, objAdmMeioPagtoCondPagto.iAdmMeioPagto, objAdmMeioPagtoCondPagto.iParcelamento, lSequencial, lNumMovto, objAdmMeioPagtoCondPagto.iTipoCartao, objAdmMeioPagtoCondPagto.dtDataPreDatado)
            If lErro <> SUCESSO Then gError 214633

        End If

    Next
    
    For Each objAdmMeioPagtoCondPagto In gcolOutros

        iTipoMovCx = 0

        If (objAdmMeioPagtoCondPagto.iTipoCartao = TIPO_POS Or objAdmMeioPagtoCondPagto.iTipoCartao = TIPO_TEF) And objAdmMeioPagtoCondPagto.dSaldo > 0 Then

            iTipoMovCx = MOVIMENTOCAIXA_SANGRIA_OUTROS
            
            lErro = Move_Dados_Sangria_MovimentoCaixa(colMovimentoCaixa, objAdmMeioPagtoCondPagto.dSaldo, iTipoMovCx, objAdmMeioPagtoCondPagto.iAdmMeioPagto, objAdmMeioPagtoCondPagto.iParcelamento, lSequencial, lNumMovto, objAdmMeioPagtoCondPagto.iTipoCartao, objAdmMeioPagtoCondPagto.dtDataPreDatado)
            If lErro <> SUCESSO Then gError 214634

        End If

    Next
    
    

    Move_Dados_Sangria_Boleto_PosTef = SUCESSO

    Exit Function

Erro_Move_Dados_Sangria_Boleto_PosTef:

    Move_Dados_Sangria_Boleto_PosTef = gErr

    Select Case gErr

        Case 105425, 105426, 214633, 214634

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149335)

    End Select

    Exit Function

End Function

Function Caixa_Grava_Sangria_Boleto_PosTef(colMovimentoCaixa As Collection) As Long
'grava os dados da sangria dos boletos manuais que ainda nao haviam sido sangrados

Dim lErro As Long
Dim colRegistro As Collection
Dim objMovimentoCaixa As New ClassMovimentoCaixa
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim sMensagem As String

On Error GoTo Erro_Caixa_Grava_Sangria_Boleto_PosTef

    If giOrcamentoECF <> CAIXA_SO_ORCAMENTO Then

        For Each objMovimentoCaixa In colMovimentoCaixa
    
            Set colRegistro = New Collection
    
            'Funçao que Gera o Arquivo preparando para a gravação
            Call CF_ECF("MovimentoBoleto_Gera_Log", colRegistro, objMovimentoCaixa)
    
            'Função que Vai Gravar as Informações no Arquivo de Caixa
            
            lErro = CF_ECF("MovimentoCaixaECF_Grava", colRegistro)
            If lErro <> SUCESSO Then gError 105428
    
            'Faz a sangria
    '        lErro = CF_ECF("Sangria_AFRAC", objMovimentoCaixa.dValor, sMensagem, 0)
    '        If lErro <> SUCESSO Then gError 105429
    
            'Adcionar a Coleção Global o Movimento Caixa de Sangria
            gcolMovimentosCaixa.Add objMovimentoCaixa
    
            For Each objAdmMeioPagtoCondPagto In gcolCartao
    
                If objMovimentoCaixa.iAdmMeioPagto = objAdmMeioPagtoCondPagto.iAdmMeioPagto And objMovimentoCaixa.iParcelamento = objAdmMeioPagtoCondPagto.iParcelamento And _
                objMovimentoCaixa.iTipoCartao = objAdmMeioPagtoCondPagto.iTipoCartao And objMovimentoCaixa.dtDataPreDatado = objAdmMeioPagtoCondPagto.dtDataPreDatado Then
                    If objMovimentoCaixa.iAdmMeioPagto <> 0 Then
                        objAdmMeioPagtoCondPagto.dSaldo = objAdmMeioPagtoCondPagto.dSaldo - objMovimentoCaixa.dValor
                        Exit For
                    ElseIf objAdmMeioPagtoCondPagto.sNomeAdmMeioPagto = STRING_NAO_DETALHADO_CCREDITO And objMovimentoCaixa.iTipo = MOVIMENTOCAIXA_SANGRIA_BOLETO_CC Then
                        objAdmMeioPagtoCondPagto.dSaldo = objAdmMeioPagtoCondPagto.dSaldo - objMovimentoCaixa.dValor
                        Exit For
                    ElseIf objAdmMeioPagtoCondPagto.sNomeAdmMeioPagto = STRING_NAO_DETALHADO_CDEBITO And objMovimentoCaixa.iTipo = MOVIMENTOCAIXA_SANGRIA_BOLETO_CD Then
                        objAdmMeioPagtoCondPagto.dSaldo = objAdmMeioPagtoCondPagto.dSaldo - objMovimentoCaixa.dValor
                        Exit For
                    End If
                End If
    
            Next
    
        Next
    
    Else
        
        Call CF_ECF("Trata_Caixa_So_Orcamento")

    End If

    Caixa_Grava_Sangria_Boleto_PosTef = SUCESSO

    Exit Function

Erro_Caixa_Grava_Sangria_Boleto_PosTef:

    Caixa_Grava_Sangria_Boleto_PosTef = gErr

    Select Case gErr

        Case 105428, 105429

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 149336)

    End Select

    Exit Function

End Function



'Function ArqSeq_Grava_Data(objArqSeq As ClassArqSeq) As Long
''grava a data passada como parametro. Nao mexe no sequencial
'
'Dim sArqSeq As String
'Dim sRetorno As String
'Dim lTamanho As Long
'Dim tArqSeq As typeArqSeq
'Dim sDir As String
'
'On Error GoTo Erro_ArqSeq_Grava_Data
'
'    lTamanho = 255
'    sRetorno = String(lTamanho, 0)
'
'    Call GetPrivateProfileString(APLICACAO_ORCAMENTO, "Dir", CONSTANTE_ERRO, sRetorno, lTamanho, NOME_ARQUIVO_CAIXA)
'    If sRetorno = String(lTamanho, 0) Then gError 105873
'
'    sDir = StringZ(sRetorno)
'
'    'se o diretorio nao for terminado por \  ===> acrescentar
'    If right(sDir, 1) <> "\" Then sDir = sDir & "\"
'
'    sArqSeq = sDir & "ArqSeqOr.txt"
'
'    sRetorno = Dir(sArqSeq)
'
'    'se nao encontrou o arquivo que contem o sequencial de orcamento ==> criar
'    If Len(sRetorno) = 0 Then
'
'        Open sArqSeq For Random Lock Read Write As 5 Len = Len(tArqSeq)
'        tArqSeq.sSequencial = "0"
'        tArqSeq.sData = Format(DATA_NULA, "dd/mm/yyyy")
'        Put #5, 1, tArqSeq
'        Put #5, 2, tArqSeq
'        Close #5
'
'    End If
'
'    Open sArqSeq For Random Lock Read Write As 5 Len = Len(tArqSeq)
'    Get #5, 1, tArqSeq
'
'    tArqSeq.sData = Format(objArqSeq.dtData, "dd/mm/yyyy")
'
'    Put #5, 1, tArqSeq
'    Close #5
'
'    ArqSeq_Grava_Data = SUCESSO
'
'    Exit Function
'
'Erro_ArqSeq_Grava_Data:
'
'    ArqSeq_Grava_Data = gErr
'
'    Close #5
'
'    Select Case gErr
'
'        Case 105873
'            Call Rotina_ErroECF(vbOKOnly, ERRO_PREENCHIMENTO_ARQUIVO_CONFIG, gErr, "Dir", APLICACAO_ORCAMENTO, NOME_ARQUIVO_CAIXA)
'
'        Case Else
'            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 149339)
'
'    End Select
'
'    Exit Function
'
'End Function

'Public Function OrcamentoECF_Grava_Novo(ByVal colRegistro As Collection) As Long
''Função Que Grava os orcamentos passados como parametro na data de hoje
'
'Dim sLog As String
'Dim iIndice As Integer
'Dim lErro As Long
'Dim dtData As Date
'Dim lTransacao As Long
'Dim lSequencial As Long
'Dim lSequencialOrc As Long
'
'On Error GoTo Erro_OrcamentoECF_Grava_Novo
'
'    dtData = Date
'
'    'Função que Abre a Transação de Caixa, Identifica o Movimento dentro do Caixa
'    lErro = CF_ECF("Caixa_Transacao_Abrir", lSequencial)
'    If lErro <> SUCESSO Then gError 210253
'
'    'Abre a Transação
'    lErro = CF_ECF("Caixa_Transacao_Abrir_Orc", lSequencialOrc)
'    If lErro <> SUCESSO Then gError 210258
'
'    'cria o arquivo que vai armazenar os orcamentos validos na data atual
'    lErro = CF_ECF("OrcamentoECF_Lock", dtData)
'    If lErro <> SUCESSO Then gError 105866
'
'    'Grava os registros validos no orcamento atual (retirando as exclusoes e os que tiverem a data de validade vencida)
'    lErro = CF_ECF("OrcamentoECF_Grava", colRegistro)
'    If lErro <> SUCESSO Then gError 105876
'
'    'Fecha a Transação
'    lErro = CF_ECF("Caixa_Transacao_Fechar_Orc", lSequencialOrc)
'    If lErro <> SUCESSO Then gError 210259
'
'    'Função que Executa o Encerramento da Sessão
'    lErro = CF_ECF("Caixa_Transacao_Fechar", lSequencial)
'    If lErro <> SUCESSO Then gError 210260
'
'    OrcamentoECF_Grava_Novo = SUCESSO
'
'    Exit Function
'
'Erro_OrcamentoECF_Grava_Novo:
'
'    OrcamentoECF_Grava_Novo = gErr
'    lErro = gErr
'
'    Select Case lErro
'
'        Case 105866, 105876
'
'        Case 210253, 210258 To 210260
'
'        Case 210254
'            Call Rotina_ErroECF(vbOKOnly, ERRO_COMMIT_TRANSACAO1, gErr)
'
'        Case Else
'            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, lErro, Error$, 149340)
'
'    End Select
'
'    Call CF_ECF("Caixa_Transacao_Rollback", glTransacaoPAFECF)
'    Call CF_ECF("Caixa_Transacao_Rollback", glTransacaoOrcPAFECF)
'
'    Exit Function
'
'End Function

Private Function Ler_Arquivo_Mestre_Analitico(ByVal objLojaArqFisMestre As ClassLojaArqFisMestre, ByVal colArqFisAnalitico As Collection) As Long

Dim lErro As Long
Dim lTamanho As Long
Dim sRetorno As String

    lTamanho = 255
    sRetorno = String(lTamanho, 0)
    
    'Obtém o diretório onde deve ser armazenado o arquivo com dados do backoffice
    Call GetPrivateProfileString(APLICACAO_DADOS, "DirDadosECF", CONSTANTE_ERRO, sRetorno, lTamanho, NOME_ARQUIVO_CAIXA)
    
    'Retira os espaços no final da string
    sRetorno = StringZ(sRetorno)
    
    'Se não encontrou
    If Len(Trim(sRetorno)) = 0 Or sRetorno = CStr(CONSTANTE_ERRO) Then gError 127100
    
    'se o diretorio nao for terminado por \  ===> acrescentar
    If right(sRetorno, 1) <> "\" Then sRetorno = sRetorno & "\"

End Function

Function TEF_Venda(ByVal dPagTEF As Double, ByVal lNumero As Long, ByVal objVenda As ClassVenda, ByVal objMsg As Object, ByVal objTela As Object, Optional iCaptura As Integer = 0) As Long
    
Dim lErro As Long
Dim objParcela As New ClassCarneParcelas
Dim objMovCaixa As New ClassMovimentoCaixa
Dim objCheque As New ClassChequePre
Dim objAdmMeioPagto As New ClassAdmMeioPagto
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim bAchouAdm As Boolean
Dim sArquivoSTS As String
Dim sArquivoINTPOS As String
Dim sArquivoINTPOSBACK As String
Dim objTEF As New ClassTEF
Dim sNomeArq As String
Dim sData As String
Dim sHora As String
Dim sData1 As String
Dim sData2 As String
Dim dtData As Date
Dim objRede As New ClassRede
Dim lErroAux As Long

On Error GoTo Erro_TEF_Venda
    
    Call ECF_Grava_Log("TEF_Venda 01-> Núm:" & CStr(objVenda.objCupomFiscal.lNumero) & " Núm.Orc: " & CStr(objVenda.objCupomFiscal.lNumOrcamento) & " Chv.NFCe: " & CStr(objVenda.objCupomFiscal.sNFeChaveAcesso), "INFO")
   
    Call ECF_Grava_Log("TEF_Venda 02-> dPagTEF:" & CStr(dPagTEF) & " lNumero: " & CStr(lNumero) & " iCaptura: " & CStr(iCaptura), "INFO")
   
    Call ECF_Grava_Log("TEF_Venda 03-> Arquivo_Tef_Resp1_Prop:" & Arquivo_Tef_Resp1_Prop, "INFO")
   
    sArquivoSTS = Dir(Arquivo_Tef_Resp1_Prop)
    If sArquivoSTS <> "" Then ECF_Apaga_Arquivo Arquivo_Tef_Resp1_Prop

    Call ECF_Grava_Log("TEF_Venda 04-> Arquivo_Tef_Resp2_Prop:" & Arquivo_Tef_Resp2_Prop, "INFO")

    sArquivoINTPOS = Dir(Arquivo_Tef_Resp2_Prop)
    If sArquivoINTPOS <> "" Then ECF_Apaga_Arquivo Arquivo_Tef_Resp2_Prop
        
    Call ECF_Grava_Log("TEF_Venda 05-> Arquivo_Tef_Resp2_Backup_Prop:" & Arquivo_Tef_Resp2_Backup_Prop, "INFO")
        
    sArquivoINTPOSBACK = Dir(Arquivo_Tef_Resp2_Backup_Prop)
    If sArquivoINTPOSBACK <> "" Then ECF_Apaga_Arquivo Arquivo_Tef_Resp2_Backup_Prop
        
        
'    lErro = TEF_CNF_NCN_Pendente()
'    If lErro <> SUCESSO Then gError 126576
        
        
    'Adiciona na variável global
    glNumProxIdentificacao = glNumProxIdentificacao + 1
    
    'Atualiza o arquivo
    lErro = WritePrivateProfileString(APLICACAO_ECF, "NumProxIdent", CStr(glNumProxIdentificacao), NOME_ARQUIVO_CAIXA)
    If lErro = 0 Then gError 117527
        
    'funcao que cria/altera a chave e grava no caixaconfig.ini
    lErro = CF_ECF("CaixaConfig_Chave")
    If lErro <> SUCESSO Then gError 204272
        
    Call ECF_Grava_Log("TEF_Venda 06-> Arquivo_Tef_Temp_Prop:" & Arquivo_Tef_Temp_Prop, "INFO")
        
    'Abre o arquivo Temporário
    Open Arquivo_Tef_Temp_Prop For Append As #1
        
    If iCaptura = TEF_PRE_AUTORIZACAO_CAPTURA Then
    
        'Informa dados de pagamento
        Print #1, "000-000 = PRE"
        Print #1, "001-000 = " & CStr(glNumProxIdentificacao)
        
        If Not AFRAC_ImpressoraCFe(giCodModeloECF) Then
            Print #1, "002-000 = " & CStr(lNumero)
        End If
        
        Print #1, "003-000 = " & Format(dPagTEF * 100, "#########000")
        Print #1, "999-999 = 0"
    
    Else
        
        'Informa dados de pagamento
        Print #1, "000-000 = CRT"
        Print #1, "001-000 = " & CStr(glNumProxIdentificacao)  'numero de controle gerado pela automacao
        
        If Not AFRAC_ImpressoraCFe(giCodModeloECF) Then
            Print #1, "002-000 = " & CStr(lNumero) 'documento fiscal = COO
        End If
            
        Print #1, "003-000 = " & Format(dPagTEF * 100, "#########000") 'valor total
        Print #1, "004-000 = 0" 'moeda = real = 0
        Print #1, "706-000 = 31" 'funcionalidades suportadas pela automacao 1=troco 2=desconto 4=valor fixo 8=vias diferenciadas(cliente\estabelecimento) 16=cupom reduzido
        Print #1, "716-000 = Corporator Serviços de Informática Ltda" 'razao social da empresa responsavel pelo desenv. da automação comercial
        
        lErro = AFRAC_DataHoraUltimoDocumento(sData, sHora)
        If lErro <> SUCESSO Then
            lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "DataHoraUltimoDocumento")
            If lErro <> SUCESSO Then gError 214635
        End If
        
        sData1 = left(sData, 2) & "/" & Mid(sData, 3, 2) & "/" & right(sData, 4)
        
        dtData = StrParaDate(sData1)
        
        sData2 = Format(dtData, "yymmdd")
        
        Print #1, "717-000 = sData2 & sHora 'Data/hora registrada no cupom fiscal, no formato AAMMDDhhmmss"
        Print #1, "733-000 = 211" 'versao da interface 2.11
        Print #1, "735-000 = CORPORATOR ECF" 'nome da automacao comercial
        Print #1, "736-000 = 3" 'nome da automacao comercial
        Print #1, "738-000 = " & TEF_PAYGO_CERTIFICADO
        Print #1, "999-999 = 0"
    
    End If
    
    Close #1
    
    Call ECF_Grava_Log("TEF_Venda 07-> Arquivo_Tef_Req_Prop:" & Arquivo_Tef_Req_Prop, "INFO")
    
    'renomeando os arquivos
    FileCopy Arquivo_Tef_Temp_Prop, Arquivo_Tef_Req_Prop
    
    Call ECF_Grava_Log("TEF_Venda 08-> Arquivo_Tef_Req_Prop:" & Arquivo_Tef_Req_Prop, "INFO")
    
    ECF_Apaga_Arquivo Arquivo_Tef_Temp_Prop
    
    lErro = TEF_Trata_Resp_PAYGO(objTEF, objMsg, objTela, objVenda)
    If lErro <> SUCESSO Then gError 133718
    
    Call ECF_Grava_Log("TEF_Venda 09-> objTEF.dValorDesconto: " & CStr(objTEF.dValorDesconto) & " objTEF.dValorTroco: " & CStr(objTEF.dValorTroco), "INFO")
    
    objVenda.objCupomFiscal.dValorDescontoTEF = objVenda.objCupomFiscal.dValorDescontoTEF + objTEF.dValorDesconto
    objVenda.objCupomFiscal.dValorTrocoTEF = objVenda.objCupomFiscal.dValorTrocoTEF + objTEF.dValorTroco
    
    Set objVenda.objTEF = objTEF
    
    Call ECF_Grava_Log("TEF_Venda 10", "INFO")
    
    'Insere um novo movimento
    objMovCaixa.iFilialEmpresa = giFilialEmpresa
    objMovCaixa.iCaixa = giCodCaixa
    objMovCaixa.iCodOperador = giCodOperador
    objMovCaixa.dtDataMovimento = objTEF.dtDataComprovante
    objMovCaixa.dValor = dPagTEF
    objMovCaixa.dHora = CDbl(objTEF.dtHoraComprovante)
    
    If Not AFRAC_ImpressoraCFe(giCodModeloECF) Then
        objMovCaixa.lCupomFiscal = objVenda.objCupomFiscal.lNumero
    Else
        objMovCaixa.lCupomFiscal = objVenda.objNFeInfo.lNFCeProximoNum
    End If
    
    objMovCaixa.lNumIntExt = objVenda.objCupomFiscal.lNumOrcamento
    objMovCaixa.iTipoCartao = TIPO_TEF
    objMovCaixa.iTipo = objTEF.iTipoMov
    objMovCaixa.dtDataPreDatado = objTEF.dtDataPreDatado
    objMovCaixa.sAutorizacao = objTEF.sAutorizacao
    
'    If giTipoTEF = TIPOTEF_SITEF Then
'
'
'    Else

    Call ECF_Grava_Log("TEF_Venda 11", "INFO")

    objTEF.iRede = -1

    'pesquisa o coidigo da rede pois é retornado o nome da rede
    For Each objRede In gcolRedes
    
        If UCase(objTEF.sRede) = UCase(objRede.sNome) Then
            objTEF.iRede = objRede.iCodigo
            Exit For
        End If
    Next
        

'    Select Case objTEF.sRede
''            Case "AMEX"
''                objTEF.iRede = REDE_AMEX
'        Case "REDECARD"
'            objTEF.iRede = REDE_REDECARD
'        Case "VISANET"
'            objTEF.iRede = REDE_VISANET
'        Case "CERTIF"
'            objTEF.iRede = REDE_CERTIF
'        Case "VLCARD"
'            objTEF.iRede = REDE_VALEREFEICAO
'        Case "TKTCAR"
'            objTEF.iRede = REDE_
'
'    End Select
        
'    End If

    bAchouAdm = False
    
    Call ECF_Grava_Log("TEF_Venda 12", "INFO")
    
    For Each objAdmMeioPagto In gcolAdmMeioPagto
        If objAdmMeioPagto.iTipoMeioPagto = objTEF.iTipoMeioPagto And objAdmMeioPagto.iRede = objTEF.iRede Then
            If (UCase(objAdmMeioPagto.sNome) = Trim(UCase(objTEF.sAdm))) Then
                objMovCaixa.iAdmMeioPagto = objAdmMeioPagto.iCodigo
                
                If objTEF.iNumParcelas = 0 Then
                    
                    Call Chama_TelaECF_Modal("ParcelamentoTEF", objMovCaixa)
                    If giRetornoTela = vbOK Then bAchouAdm = True
                    
                Else
                    For Each objAdmMeioPagtoCondPagto In objAdmMeioPagto.colCondPagtoLoja
                        If objAdmMeioPagtoCondPagto.iNumParcelas = objTEF.iNumParcelas Then
                           'JUROS_LOJA = 1 ...JUROS_ADM=2 conteudo do campo JUROS PARCELAMENTO
                           'TipoFinanciamento = 3 = parcelado pela LOJA    Tipo financiamento = 2 = parcelado pela ADM  Tipo de finaciamento = 1 = A vista
                           'TipoFinanciamento = 4 (pre-datado) ou TipoFinanciamento = 5 (pre-datado forcado)
'                            If objAdmMeioPagtoCondPagto.iJurosParcelamento + 1 = objTEF.iTipoParcelamento Or objTEF.iTipoParcelamento = -1 Then
                           'o primeiro if trata os campos 731 e 732
                             If objTEF.iOperacao <> 0 Then
                                 If (objAdmMeioPagtoCondPagto.iJurosParcelamento = JUROS_LOJA And objTEF.iTipoFinanciamento = 3) Or (objAdmMeioPagtoCondPagto.iJurosParcelamento = JUROS_ADM And objTEF.iTipoFinanciamento = 2) Or ((objTEF.iTipoFinanciamento = 1 Or objTEF.iTipoFinanciamento = 0) And objAdmMeioPagtoCondPagto.iPreDatado = 0) Or ((objTEF.iTipoFinanciamento = 4 Or objTEF.iTipoFinanciamento = 5) And objAdmMeioPagtoCondPagto.iPreDatado = 1) Then
                                    objMovCaixa.iParcelamento = objAdmMeioPagtoCondPagto.iParcelamento
                                    bAchouAdm = True
                                    Exit For
                                End If
                            Else
                                'essa parte cuda dos campos 011 e 017
                                 If (objAdmMeioPagtoCondPagto.iJurosParcelamento = JUROS_LOJA And (objTEF.iTipoTransacao = 11 Or objTEF.iTipoTransacao = 22)) Or (objAdmMeioPagtoCondPagto.iJurosParcelamento = JUROS_ADM And objTEF.iTipoTransacao = 12) Or ((objTEF.iTipoTransacao = 10 Or objTEF.iTipoTransacao = 20) And objAdmMeioPagtoCondPagto.iPreDatado = 0) Or ((objTEF.iTipoTransacao = 21 Or objTEF.iTipoTransacao = 24) And objAdmMeioPagtoCondPagto.iPreDatado = 1) Or objTEF.iTipoTransacao = 60 Or objTEF.iTipoTransacao = 30 Then
                                    objMovCaixa.iParcelamento = objAdmMeioPagtoCondPagto.iParcelamento
                                    bAchouAdm = True
                                    Exit For
                                End If
                            
                            End If
                        End If
                    Next
                End If
                If bAchouAdm = True Then Exit For
            End If
        End If
    Next

    Call ECF_Grava_Log("TEF_Venda 13", "INFO")

    If bAchouAdm = False Then
    
        For Each objAdmMeioPagto In gcolAdmMeioPagto
            
            If objAdmMeioPagto.iTipoMeioPagto = objTEF.iTipoMeioPagto And objAdmMeioPagto.iRede = objTEF.iRede Then
                
                objMovCaixa.iAdmMeioPagto = objAdmMeioPagto.iCodigo
                
                If objTEF.iNumParcelas = 0 Then
                    
                    Call Chama_TelaECF_Modal("ParcelamentoTEF", objMovCaixa)
                    If giRetornoTela = vbOK Then bAchouAdm = True
                    
                Else
                    For Each objAdmMeioPagtoCondPagto In objAdmMeioPagto.colCondPagtoLoja
                        If objAdmMeioPagtoCondPagto.iNumParcelas = objTEF.iNumParcelas Then
                           'JUROS_LOJA = 1 ...JUROS_ADM=2 conteudo do campo JUROS PARCELAMENTO
                           'TipoFinanciamento = 3 = parcelado pela LOJA    Tipo financiamento = 2 = parcelado pela ADM  Tipo de finaciamento = 1 = A vista
                           'TipoFinanciamento = 4 (pre-datado) ou TipoFinanciamento = 5 (pre-datado forcado)
'                            If objAdmMeioPagtoCondPagto.iJurosParcelamento + 1 = objTEF.iTipoParcelamento Or objTEF.iTipoParcelamento = -1 Then
                           'o primeiro if trata os campos 731 e 732
                             If objTEF.iOperacao <> 0 Then
                                 If (objAdmMeioPagtoCondPagto.iJurosParcelamento = JUROS_LOJA And objTEF.iTipoFinanciamento = 3) Or (objAdmMeioPagtoCondPagto.iJurosParcelamento = JUROS_ADM And objTEF.iTipoFinanciamento = 2) Or ((objTEF.iTipoFinanciamento = 1 Or objTEF.iTipoFinanciamento = 0) And objAdmMeioPagtoCondPagto.iPreDatado = 0) Or ((objTEF.iTipoFinanciamento = 4 Or objTEF.iTipoFinanciamento = 5) And objAdmMeioPagtoCondPagto.iPreDatado = 1) Then
                                    objMovCaixa.iParcelamento = objAdmMeioPagtoCondPagto.iParcelamento
                                    bAchouAdm = True
                                    Exit For
                                End If
                            Else
                                'essa parte cuda dos campos 011 e 017
                                 If (objAdmMeioPagtoCondPagto.iJurosParcelamento = JUROS_LOJA And (objTEF.iTipoTransacao = 11 Or objTEF.iTipoTransacao = 22)) Or (objAdmMeioPagtoCondPagto.iJurosParcelamento = JUROS_ADM And objTEF.iTipoTransacao = 12) Or ((objTEF.iTipoTransacao = 10 Or objTEF.iTipoTransacao = 20) And objAdmMeioPagtoCondPagto.iPreDatado = 0) Or ((objTEF.iTipoTransacao = 21 Or objTEF.iTipoTransacao = 24) And objAdmMeioPagtoCondPagto.iPreDatado = 1) Or objTEF.iTipoTransacao = 60 Or objTEF.iTipoTransacao = 30 Then
                                    objMovCaixa.iParcelamento = objAdmMeioPagtoCondPagto.iParcelamento
                                    bAchouAdm = True
                                    Exit For
                                End If
                            
                            End If
                        End If
                    Next
                End If
                If bAchouAdm = True Then Exit For
                
            End If
            
        Next
    
    End If

    Call ECF_Grava_Log("TEF_Venda 14", "INFO")

'somente para homologacao *******************
'deixa passar qq condicao de pagamento *******
'    If bAchouAdm = False Then
'
'        For Each objAdmMeioPagto In gcolAdmMeioPagto
'            If objAdmMeioPagto.iRede = objTEF.iRede Then
'                    objMovCaixa.iAdmMeioPagto = objAdmMeioPagto.iCodigo
'
'                    For Each objAdmMeioPagtoCondPagto In objAdmMeioPagto.colCondPagtoLoja
'                        objMovCaixa.iParcelamento = objAdmMeioPagtoCondPagto.iParcelamento
'                        bAchouAdm = True
'                        Exit For
'                    Next
'                    If bAchouAdm = True Then Exit For
'            End If
'        Next
'
'    End If
'fim somente para homologacao *******************
    
    If bAchouAdm = False Then gError 133715
    
    objVenda.colMovimentosCaixa.Add objMovCaixa
    
    Call ECF_Grava_Log("TEF_Venda 15-> FIM", "INFO")
    
    TEF_Venda = SUCESSO

    Exit Function
    
Erro_TEF_Venda:
    
    TEF_Venda = gErr
    
    lErroAux = gErr
    
    Call ECF_Grava_Log("TEF_Venda 16-> ERRO: " & CStr(lErroAux), "INFO")
    
    If Not objVenda Is Nothing Then

        sNomeArq = "a"

        Do While Len(sNomeArq) > 0
        
            If Not AFRAC_ImpressoraCFe(giCodModeloECF) Then
                sNomeArq = Dir(gsDirMVTEF & "TEF_" & objVenda.objCupomFiscal.lNumero & "_" & "*.txt")
            Else
                sNomeArq = Dir(gsDirMVTEF & "TEF_" & objVenda.objNFeInfo.lNFCeProximoNum & "_" & "*.txt")
            End If
    
            If Len(sNomeArq) > 0 Then ECF_Apaga_Arquivo gsDirMVTEF & sNomeArq
            
        Loop

    End If
    
    Select Case lErroAux
    
        Case 53
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO2, lErroAux)
    
        Case 117527
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, lErroAux, APLICACAO_ECF, "NumProxIdent", NOME_ARQUIVO_CAIXA)
    
        Case 126576, 133718, 204272, 214635
        
        Case 133715
            Call TEF_NaoConfirma_Transacao(objTela)
            Call Rotina_ErroECF(vbOKOnly, ERRO_CONDPAGTO_NAO_CADASTRADO, lErroAux, objTEF.sRede, objTEF.sAdm, objTEF.iNumParcelas, objTEF.sDescricao, objTEF.iTipoMeioPagto)
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, lErroAux, Error, 149341)

    End Select
    
    Exit Function
         
End Function

Private Function TEF_Trata_Resp(ByVal objTEF As ClassTEF, ByVal objMsg As Object, ByVal objTela As Object) As Long

Dim lErro As Long
Dim sArquivoSTS As String
Dim sArquivoINTPOS As String
Dim sArquivoINTPOSBACK As String
Dim sArquivoIMP As String
Dim sReg As String
Dim sTxt As String
Dim objTiposMeiosPagtos As ClassTMPLoja
Dim iIndice As Integer
Dim iIndice1 As Integer
Dim iLoop As Integer
Dim vbMsg As VbMsgBoxResult
Dim iImprimeLinha As Integer
Dim iTentativas As Integer
Dim sArqSTS As String
Dim sArqCNF_NCN As String
Dim vTexto As Variant

On Error GoTo Erro_TEF_Trata_Resp

    sArquivoIMP = gsDirMVTEF & Arquivo_Tef_Imp_Prop

    objTEF.iTipoParcelamento = -1
    objTEF.iTransacao = 0
    
    For iIndice1 = 1 To 7
        
        sArquivoSTS = Dir(Arquivo_Tef_Resp1_Prop)
        
        If sArquivoSTS <> "" Then
    
            'Abre o arquivo de resposta do gerenciador
'            Open Arquivo_Tef_Resp1_Prop For Input As #1
            
            lErro = ECF_Abrir_Arquivo(Arquivo_Tef_Resp1_Prop, 1)
            If lErro <> SUCESSO Then gError 214584
            
            'Até chegar ao fim do arquivo
            Do While Not EOF(1)
        
                'Busca o próximo registro do arquivo
                Line Input #1, sReg

                Select Case Mid(sReg, 1, 7)
                
                    Case "001-000"
                        'verifica se a identificacao no arquivo de resposta e' o mesmo do arquivo de requisicao
                        If right(sReg, Len(sReg) - 10) <> glNumProxIdentificacao Then
                            Close #1
                            ECF_Apaga_Arquivo Arquivo_Tef_Resp1_Prop
                            Exit Do
                        End If
                        
                End Select
                                                        
            Loop
            
        Else
            Sleep 1000
        End If
    
    Next
    
    sArquivoSTS = Dir(Arquivo_Tef_Resp1_Prop)
    
    If sArquivoSTS <> "" Then

        Close #1
        
        Do While True
        
            'Verifica o arquivo intpos.001
            sArquivoINTPOS = Dir(Arquivo_Tef_Resp2_Prop)
            
            If sArquivoINTPOS <> "" Then
        
                sArquivoINTPOSBACK = Dir(Arquivo_Tef_Resp2_Backup_Prop)
                If sArquivoINTPOSBACK <> "" Then ECF_Apaga_Arquivo Arquivo_Tef_Resp2_Backup_Prop
                
                FileCopy Arquivo_Tef_Resp2_Prop, Arquivo_Tef_Resp2_Backup_Prop
        
                'Atualiza o arquivo
                lErro = WritePrivateProfileString(APLICACAO_ECF, "StatusTEF", TEF_STATUS_VENDA, NOME_ARQUIVO_CAIXA)
                If lErro = 0 Then gError 133696
        
                'funcao que cria/altera a chave e grava no caixaconfig.ini
                lErro = CF_ECF("CaixaConfig_Chave")
                If lErro <> SUCESSO Then gError 204273
        
                lErro = TEF_Trata_Resp1(objTEF, Arquivo_Tef_Resp2_Prop)
                If lErro <> SUCESSO Then gError 214568
    
'                'Abre o arquivo de resposta do gerenciador
'                Open Arquivo_Tef_Resp2_Prop For Input As #2
'
'                'Até chegar ao fim do arquivo
'                Do While Not EOF(2)
'
'                    'Busca o próximo registro do arquivo
'                    Line Input #2, sReg
'
'                    Select Case Mid(sReg, 1, 7)
'
'                        Case "000-000" 'comando
'                            objTEF.sComando = right(sReg, Len(sReg) - 10)
'
'                        Case "001-000" 'identificacao
'                            objTEF.sIdentificacao = right(sReg, Len(sReg) - 10)
''                            If right(sReg, Len(sReg) - 10) <> glNumProxIdentificacao Then
''                                Close #2
''                                ECF_Apaga_Arquivo Arquivo_Tef_Resp2_Prop
''                                Exit Do
''                            End If
'
'                        Case "003-000" 'valor total
'                            objTEF.dValorTotal = StrParaDbl(Mid(sReg, 11, Len(sReg) - 10)) / 100
'
'                        Case "009-000" 'status
'                            If right(sReg, Len(sReg) - 10) = "0" Then
'                                objTEF.iTransacao = 1
'                            Else
'                                'se houve erro ==> remove o arquivo de resposta e retorna ao loop dos sete segundos
'                                objTEF.iTransacao = -1
'                            End If
'
'                        'Recolhe a rede
'                        Case "010-000"
'                            objTEF.sRede = Trim(UCase(right(sReg, Len(sReg) - 10)))
'
''                        Case "010-001"
''                            objTEF.iRede = StrParaInt(Trim(UCase(right(sReg, Len(sReg) - 10))))
'
'                        'tipo de pagamento
''                        Case "011-000"
''
''                            If giTipoTEF = TIPOTEF_SITEF Then
''
''                                objTEF.iTipoTransacao = StrParaInt(Mid(sReg, 11, 3))
''
''                                Select Case objTEF.iTipoTransacao
''
''                                    Case TIPOTRANS_SITEF_CRED_MAGN, TIPOTRANS_SITEF_CRED_DIG, TIPOTRANS_SITEF_CRED_PARC, TIPOTRANS_SITEF_CAPTURA_PRE_AUT, TIPOTRANS_SITEF_OUTRAS_CONSULTAS
''                                        For Each objTiposMeiosPagtos In gcolTiposMeiosPagtos
''                                            'Se for do tipo procurado
''                                            If objTiposMeiosPagtos.iTipo = TIPOMEIOPAGTOLOJA_CARTAO_CREDITO Then
''                                                objTEF.sDescricao = objTiposMeiosPagtos.sDescricao
''                                                objTEF.iTipo = objTiposMeiosPagtos.iTipo
''                                                objTEF.iTipoMov = MOVIMENTOCAIXA_RECEB_CARTAOCREDITO
''                                                objTEF.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_CARTAO_CREDITO
''                                                Exit For
''                                            End If
''                                        Next
''
''
''                                    Case TIPOTRANS_SITEF_DEB_MAGN, TIPOTRANS_SITEF_DEB_FORCADA, TIPOTRANS_SITEF_DEB_PRE, TIPOTRANS_SITEF_DEB_PARC_CENT, TIPOTRANS_SITEF_DEB_PARC_SENT, TIPOTRANS_SITEF_CDC, TIPOTRANS_SITEF_DEB_PARC
''
''                                        objTEF.iNumParcelas = 1
''                                        For Each objTiposMeiosPagtos In gcolTiposMeiosPagtos
''                                            'Se for do tipo procurado
''                                            If objTiposMeiosPagtos.iTipo = TIPOMEIOPAGTOLOJA_CARTAO_DEBITO Then
''                                                objTEF.sDescricao = objTiposMeiosPagtos.sDescricao
''                                                objTEF.iTipo = objTiposMeiosPagtos.iTipo
''                                                objTEF.iTipoMov = MOVIMENTOCAIXA_RECEB_CARTAODEBITO
''                                                objTEF.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_CARTAO_DEBITO
''                                                Exit For
''                                            End If
''                                         Next
''
''                                End Select
''
''                            Else
''
''                                objTEF.iTipoTransacao = StrParaInt(Mid(sReg, 11, 2))
''                                If objTEF.iTipoTransacao = TIPOTRANS_DISC_CRED_VISTA Or objTEF.iTipoTransacao = TIPOTRANS_DISC_CRED_PARC_LOJA Or objTEF.iTipoTransacao = TIPOTRANS_DISC_CRED_PARC_ADM Then
''                                    For Each objTiposMeiosPagtos In gcolTiposMeiosPagtos
''                                        'Se for do tipo procurado
''                                        If objTiposMeiosPagtos.iTipo = TIPOMEIOPAGTOLOJA_CARTAO_CREDITO Then
''                                            objTEF.sDescricao = objTiposMeiosPagtos.sDescricao
''                                            objTEF.iTipo = objTiposMeiosPagtos.iTipo
''                                            objTEF.iTipoMov = MOVIMENTOCAIXA_RECEB_CARTAOCREDITO
''                                            objTEF.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_CARTAO_CREDITO
''                                            Exit For
''                                        End If
''                                    Next
''
''                                    If objTEF.iTipoTransacao = TIPOTRANS_DISC_CRED_VISTA Then
''                                        objTEF.iNumParcelas = 1
''                                    End If
''
''                                ElseIf Mid(sReg, 11, 1) = "2" Or objTEF.iTipoTransacao = TIPOTRANS_DISC_CDC Then
''                                    objTEF.iNumParcelas = 1
''                                    For Each objTiposMeiosPagtos In gcolTiposMeiosPagtos
''                                        'Se for do tipo procurado
''                                        If objTiposMeiosPagtos.iTipo = TIPOMEIOPAGTOLOJA_CARTAO_DEBITO Then
''                                            objTEF.sDescricao = objTiposMeiosPagtos.sDescricao
''                                            objTEF.iTipo = objTiposMeiosPagtos.iTipo
''                                            objTEF.iTipoMov = MOVIMENTOCAIXA_RECEB_CARTAODEBITO
''                                            objTEF.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_CARTAO_DEBITO
''                                            Exit For
''                                        End If
''                                     Next
''
''                                End If
''
''                            End If
'
'                        'número da NSU
'                        Case "012-000"
'                            objTEF.sNSU = right(sReg, Len(sReg) - 10)
'
'                        Case "013-000"
'                            objTEF.sAutorizacao = right(sReg, Len(sReg) - 10)
''
''                        Case "017-000"
''                            objTEF.iTipoParcelamento = right(sReg, Len(sReg) - 10)
'
'                        'Quantidade de parcelas
'                        Case "018-000"
'                            objTEF.iNumParcelas = StrParaInt(Mid(sReg, 11, Len(sReg) - 10))
'
'                        'data no comprovante
'                        Case "022-000"
'                            objTEF.dtDataComprovante = StrParaDate(Mid(sReg, 11, 2) & "/" & Mid(sReg, 13, 2) & "/" & Mid(sReg, 15, 4))
'
'                        'data no comprovante
'                        Case "023-000"
'                            objTEF.dtHoraComprovante = StrParaDate(Mid(sReg, 11, 2) & ":" & Mid(sReg, 13, 2) & ":" & Mid(sReg, 15, 2))
'
'                        'data pré-datado
'                        Case "024-000"
'                            objTEF.dtDataPreDatado = StrParaDate(Mid(sReg, 11, 2) & "/" & Mid(sReg, 13, 2) & "/" & Mid(sReg, 15, 4))
'
'                        'NSU Original
'                        Case "025-000"
'                            objTEF.sNSUOriginal = right(sReg, Len(sReg) - 10)
'
'                        'DataHora Original no formato ddmmhhmmss
'                        Case "026-000"
'                            objTEF.sDataHoraOriginal = right(sReg, Len(sReg) - 10)
'
'                        'Recolhe a finalização
'                        Case "027-000"
'                            objTEF.sFinalizacao = Mid(sReg, 11, Len(sReg) - 10)
'
'                        Case "028-000"
'                            objTEF.iTamViaUnica = StrParaInt(Mid(sReg, 11, Len(sReg) - 10))
'
''                            If objTEF.iTransacao = 1 Then
''
''                                iLoop = Mid(sReg, 11, Len(sReg) - 10)
''
''                                Open sArquivoIMP For Append As #3
''
''                                For iIndice = 1 To iLoop
''
''                                    'Busca o próximo registro do arquivo
''                                    Line Input #1, sReg
''
''                                    If Mid(sReg, 1, 3) = "029" Then
''
''                                        sTxt = Mid(sReg, 12, Len(sReg) - 12)
''                                        If sTxt = "" Then sTxt = "         "
''
''                                        Print #3, sTxt
''                                        iImprimeLinha = 1
''
''                                    End If
''
''                                Next
''
''                                'Fecha o Arquivo
''                                Close #3
''
''                            End If
'
'                        'mensagem para operador
'                        Case "030-000"
'                            objTEF.sOperador = Mid(sReg, 11, Len(sReg) - 10)
'
'                        'administradora ou nome do cartao
'                        Case "040-000"
''                            If giTipoTEF = TIPOTEF_DISC Then objTEF.sAdm = UCase(Mid(sReg, 11, Len(sReg) - 10))
'                            objTEF.sAdm = UCase(Mid(sReg, 11, Len(sReg) - 10))
'
'                        'valor original
'                        Case "707-000"
'                            objTEF.dValorOriginal = StrParaDbl(Mid(sReg, 11, Len(sReg) - 10)) / 100
'
'                        'valor troco
'                        Case "708-000"
'                            objTEF.dValorTroco = StrParaDbl(Mid(sReg, 11, Len(sReg) - 10)) / 100
'
'                        'valor troco
'                        Case "709-000"
'                            objTEF.dValorDesconto = StrParaDbl(Mid(sReg, 11, Len(sReg) - 10)) / 100
'
'                        'numero de linhas do cupom reduzido
'                        Case "710-000"
'                            objTEF.iTamReduzido = StrParaInt(Mid(sReg, 11, Len(sReg) - 10))
'
'                        'numero de linhas da via do cliente
'                        Case "712-000"
'                            objTEF.iTamViaCliente = StrParaInt(Mid(sReg, 11, Len(sReg) - 10))
'
'                        'numero de linhas da via do estabelecimento
'                        Case "714-000"
'                            objTEF.iTamViaEstab = StrParaInt(Mid(sReg, 11, Len(sReg) - 10))
'
'                        'numero do terminal
'                        Case "718-000"
'                            objTEF.sNumTerminal = Mid(sReg, 11, Len(sReg) - 10)
'
'                        'codigo do estabelecimento
'                        Case "719-000"
'                            objTEF.sCodEstab = Mid(sReg, 11, Len(sReg) - 10)
'
'                        'status de confirmação
'                        Case "729-000"
'                            objTEF.iStatusConfirmacao = StrParaInt(Mid(sReg, 11, Len(sReg) - 10))
'
'                        'tipo de operacao (venda, cancelamento, consulta de cheque, garantia de cheque, pre-autorizacao ...)
'                        Case "730-000"
'                            objTEF.iOperacao = StrParaInt(Mid(sReg, 11, Len(sReg) - 10))
'
'                        'tipo de cartao (credito, debito, voucher)
'                        Case "731-000"
'                            objTEF.iTipoCartao = StrParaInt(Mid(sReg, 11, Len(sReg) - 10))
'
'                        'tipo de financiamento (a vista, parcelada pelo emissor, parcelado pela loja, pre-datado, pre-datado forcado)
'                        Case "732-000"
'                            objTEF.iTipoFinanciamento = StrParaInt(Mid(sReg, 11, Len(sReg) - 10))
'
'                        'vias de comprovante
'                        Case "737-000"
'                            objTEF.iViasComprovante = StrParaInt(Mid(sReg, 11, Len(sReg) - 10))
'
'                    End Select
'
'                    If Mid(sReg, 1, 3) = "029" Then
'
'                        objTEF.colViaUnica.Add Mid(sReg, 12, Len(sReg) - 12)
'
'                    End If
'
'                    If Mid(sReg, 1, 3) = "711" Then
'
'                        objTEF.colReduzido.Add Mid(sReg, 12, Len(sReg) - 12)
'
'                    End If
'
'                    If Mid(sReg, 1, 3) = "713" Then
'
'                        objTEF.colViaCliente.Add Mid(sReg, 12, Len(sReg) - 12)
'
'                    End If
'
'                    If Mid(sReg, 1, 3) = "715" Then
'
'                        objTEF.colViaEstab.Add Mid(sReg, 12, Len(sReg) - 12)
'
'                    End If
'
'
'                Loop
                
'                If objTEF.sIdentificacao <> glNumProxIdentificacao Then
'                    Exit Do
'                End If
                
                Exit Do
                
            Else
                Sleep 1000
                
            End If
        
        Loop

    End If
        
'        Else
'            Sleep 1000
'        End If
        
        
'    Next
        
    'gerenciador padrao nao esta ativo
    If sArquivoSTS = "" Then gError 133690
        
        
    If objTEF.sIdentificacao <> glNumProxIdentificacao Then gError 214529
        
        
    'tratamento do campo 30 foi colocado nesta posicao pois a ordem dos campos
    'no arquivo nao e´sempre obedecido.
        
'    If objTEF.sOperador <> "" Then
'
'        If iImprimeLinha = 0 Then
'
'            If giTipoTEF = TIPOTEF_DISC Then Sleep 7000
'            objTela.objParent.SetFocus
'            vbMsg = Rotina_AvisoECF(vbOK, objTEF.sOperador)
'            objTela.objParent.Refresh
'
'        Else
'            objTela.objParent.SetFocus
'            objMsg.LabelMsg.Caption = objTEF.sOperador
'            objMsg.Show vbModal
'            objTela.objParent.Refresh
'        End If
'    Else
'        If iImprimeLinha <> 0 Then
'            objTela.objParent.SetFocus
'            objMsg.LabelMsg.Caption = "Aguarde Impressão"
'            objMsg.Show vbModal
'            objTela.objParent.Refresh
'
'        End If
'    End If
    

    If objTEF.sOperador <> "" Then
        objTela.objParent.SetFocus
        objMsg.LabelMsg.Caption = objTEF.sOperador
        objMsg.Show vbModal
        objTela.objParent.Refresh
    End If
                                    
    
    'se a transacao for negada ==>
    'deve-se remover o arquivo intpos.001 logo apos a exibicao da mensagem do campo 30
    If objTEF.iTransacao = -1 Then
    
'        sArquivoINTPOS = Dir(Arquivo_Tef_Resp2_Prop)
'        Close #2
'        If sArquivoINTPOS <> "" Then ECF_Apaga_Arquivo Arquivo_Tef_Resp2_Prop
        gError 133735
    
    End If
        
    'se a operacao = VENDA e o Tipo do cartao é CREDITO
    If objTEF.iOperacao = 1 And objTEF.iTipoCartao = 1 Then
            For Each objTiposMeiosPagtos In gcolTiposMeiosPagtos
                'Se for do tipo procurado
                If objTiposMeiosPagtos.iTipo = TIPOMEIOPAGTOLOJA_CARTAO_CREDITO Then
                    objTEF.sDescricao = objTiposMeiosPagtos.sDescricao
                    objTEF.iTipo = objTiposMeiosPagtos.iTipo
                    objTEF.iTipoMov = MOVIMENTOCAIXA_RECEB_CARTAOCREDITO
                    objTEF.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_CARTAO_CREDITO
                    Exit For
                End If
            Next
    End If

    'se a operacao = VENDA e o Tipo do cartao é DEBITO
    If objTEF.iOperacao = 1 And objTEF.iTipoCartao = 2 Then
        For Each objTiposMeiosPagtos In gcolTiposMeiosPagtos
            'Se for do tipo procurado
            If objTiposMeiosPagtos.iTipo = TIPOMEIOPAGTOLOJA_CARTAO_DEBITO Then
                objTEF.sDescricao = objTiposMeiosPagtos.sDescricao
                objTEF.iTipo = objTiposMeiosPagtos.iTipo
                objTEF.iTipoMov = MOVIMENTOCAIXA_RECEB_CARTAODEBITO
                objTEF.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_CARTAO_DEBITO
                Exit For
            End If
         Next
    End If
        
        
        
'    If objTEF.colViaUnica.Count > 0 And Not objVenda Is Nothing Then
'
'        If Len(Dir(sArquivoIMP)) > 0 Then ECF_Apaga_Arquivo sArquivoIMP
'
'        Open sArquivoIMP For Append As #3
'
'        For Each vTexto In objTEF.colViaUnica
'
'            Print #3, vTexto
'
'        Next
'
'        Close #3
'
'        lErro = TEF_Copia(objVenda, "VIAUNICA", objTEF)
'        If lErro <> SUCESSO Then gError 214531
'
'    End If
'
'    If objTEF.colViaCliente.Count > 0 And Not objVenda Is Nothing Then
'
'        If Len(Dir(sArquivoIMP)) > 0 Then ECF_Apaga_Arquivo sArquivoIMP
'
'        Open sArquivoIMP For Append As #3
'
'        For Each vTexto In objTEF.colViaCliente
'
'            Print #3, vTexto
'
'        Next
'
'        Close #3
'
'        lErro = TEF_Copia(objVenda, "VIACLIENTE", objTEF)
'        If lErro <> SUCESSO Then gError 214532
'
'    End If
'
'
'    If objTEF.colViaEstab.Count > 0 And Not objVenda Is Nothing Then
'
'        If Len(Dir(sArquivoIMP)) > 0 Then ECF_Apaga_Arquivo sArquivoIMP
'
'        Open sArquivoIMP For Append As #3
'
'        For Each vTexto In objTEF.colViaEstab
'
'            Print #3, vTexto
'
'        Next
'
'        Close #3
'
'        lErro = TEF_Copia(objVenda, "VIAESTAB", objTEF)
'        If lErro <> SUCESSO Then gError 214533
'
'    End If
'
'    If objTEF.colReduzido.Count > 0 And Not objVenda Is Nothing Then
'
'        If Len(Dir(sArquivoIMP)) > 0 Then ECF_Apaga_Arquivo sArquivoIMP
'
'        Open sArquivoIMP For Append As #3
'
'        For Each vTexto In objTEF.colReduzido
'
'            Print #3, vTexto
'
'        Next
'
'        Close #3
'
'        lErro = TEF_Copia(objVenda, "VIAREDUZIDA", objTEF)
'        If lErro <> SUCESSO Then gError 214534
'
'    End If
    
    
    'se tentou as 7 vezes e o arquivo nao foi retornado
'    If iIndice1 = 8 Then gError 133716
    
'    If iImprimeLinha = 0 Then gError 133717

    TEF_Trata_Resp = SUCESSO
    
    Exit Function

Erro_TEF_Trata_Resp:

    TEF_Trata_Resp = gErr

    Close #1
    Close #2
    
'    If objTEF.iTransacao = 1 Then
'
'        If UCase(Trim(objTEF.sOperador)) <> "INICIACAO DO TERMINAL CONCLUIDA." And UCase(Trim(objTEF.sOperador)) <> "INICIAÇÃO DO TERMINAL CONCLUÍDA." And _
'           UCase(Trim(objTEF.sOperador)) <> "INICIACAO DO TERMINAL CONCLUIDA" And UCase(Trim(objTEF.sOperador)) <> "INICIAÇÃO DO TERMINAL CONCLUÍDA" And _
'           UCase(Trim(objTEF.sOperador)) <> "INICIAÇAO DO TERMINAL CONCLUIDA" And UCase(Trim(objTEF.sOperador)) <> "INICIAÇAO DO TERMINAL CONCLUIDA." Then
'
'            If giTipoTEF = TIPOTEF_SITEF And (objTEF.iTipoTransacao = TIPOTRANS_SITEF_CONS_GAR_CHQ Or objTEF.iTipoTransacao = TIPOTRANS_SITEF_CONSULTA_AVS Or objTEF.iTipoTransacao = TIPOTRANS_SITEF_CONS_CGC_SERASA) Then
'
'            Else
'                'venda foi consumada ==> NCF
'                Call TEF_NaoConfirma_Transacao(objTela)
'
'                'Indica que a nao confirmacao foi completada para caso cair a energia
'                Call WritePrivateProfileString(APLICACAO_ECF, "StatusTEF", "", NOME_ARQUIVO_CAIXA)
'
'                'funcao que cria/altera a chave e grava no caixaconfig.ini
'                lErro = CF_ECF("CaixaConfig_Chave")
'                If lErro <> SUCESSO Then gError 204274
'
'
'            End If
'
'        End If
'
'    End If

    Select Case gErr
    
    
        Case 53
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO2, gErr)

        Case 133690, 133716
'            If giTipoTEF = TIPOTEF_SITEF Then
'                Call Rotina_ErroECF(vbOKOnly, ERRO_SITEF_NAO_ATIVO, gErr)
'
'            Else
'                Call Rotina_ErroECF(vbOKOnly, ERRO_TEF_NAO_ATIVO, gErr)
'            End If
            
            Call Rotina_ErroECF(vbOKOnly, ERRO_TEF_NAO_RESPONDE, gErr)
            
            
        Case 133696
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, APLICACAO_ECF, "StatusTEF", NOME_ARQUIVO_CAIXA)
        
        Case 133717, 204273, 204274, 214531 To 214534, 214568, 214584
        
        Case 133735
            Call Rotina_ErroECF(vbOKOnly, ERRO_TEF_TRANSACAO_NEGADA, gErr, objTEF.sOperador)
        
        Case 214529
            Call Rotina_ErroECF(vbOKOnly, ERRO_INCONSISTENCIA_ARQUIVO_TEF, gErr, "001-000", "Resp\Intpos.001", "Identificação arquivo = " & objTEF.sIdentificacao & " Identificação esperada = " & glNumProxIdentificacao)
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149342)

    End Select
    
    Exit Function

End Function

Function TEF_Imprime(ByVal sDescricao As String, ByVal dValor As Double, ByVal lCOO As Long, ByVal objMsg As Object, ByVal objTela As Object, ByVal objVenda As ClassVenda) As Long

Dim lErro As Long
Dim sNomeArq As String
Dim sLinha As String
Dim sSaltaLinha As String
Dim sConteudo As String
Dim vbMsg As VbMsgBoxResult
Dim sNomeArq1 As String

On Error GoTo Erro_TEF_Imprime

    'imprime vinculado
    lErro = TEF_Imprime_Vinculado(sDescricao, dValor, lCOO, objMsg, objTela, objVenda)
    
    vbMsg = vbYes
    
    'se nao conseguiu imprimir os comprovantes e quer continuar tentando
    Do While vbMsg = vbYes And lErro <> SUCESSO
    
        vbMsg = Rotina_AvisoECF(vbYesNo, "Impressora não responde, tentar novamente?")
        
        If vbMsg = vbYes Then
        
            'imprime gerencial
            lErro = TEF_Imprime_Gerencial(objMsg, objTela, objVenda)
                
        End If

    Loop
    
    'se imprimiu corretamente
    If lErro = SUCESSO Then
    
        lErro = TEF_Confirma_Transacao1(objVenda)
        If lErro <> SUCESSO Then gError 133689
    
'        sNomeArq1 = gsDirMVTEF & "TEF_" & objVenda.objCupomFiscal.lNumero & "_" & "CPV" & "_" & "*" & ".rsp"
'
'        sNomeArq = Dir(sNomeArq1)
'
'        Do While Len(sNomeArq) > 0
'
'            ECF_Apaga_Arquivo gsDirMVTEF & sNomeArq
'
'            sNomeArq = Dir
'
'        Loop
        
    Else
    
        lErro = TEF_NaoConfirma_Transacao1(objTela, objVenda)
        If lErro <> SUCESSO Then gError 133690
    
        'cancela os cartoes ja confirmados e nao confirma o ultimo
        lErro = CF_ECF("TEF_CNC", objVenda, objMsg, objTela)
        If lErro <> SUCESSO Then gError 133806
    
        gError 133728
    
    End If
    
'    Call WritePrivateProfileString(APLICACAO_ECF, "CancelamentoTEF", "", NOME_ARQUIVO_CAIXA)
'
    TEF_Imprime = SUCESSO

    Exit Function

Erro_TEF_Imprime:

    TEF_Imprime = gErr
    
    Select Case gErr
    
        Case 133689, 133690, 133728, 133806, 133807
    
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149343)
    
    End Select

End Function

Private Function TEF_Imprime_Vinculado(ByVal sDescricao As String, ByVal dValor As Double, ByVal lCOO As Long, ByVal objMsg As Object, ByVal objTela As Object, ByVal objVenda As ClassVenda) As Long

Dim lErro As Long
Dim sNomeArq As String
Dim sLinha As String
Dim sSaltaLinha As String
Dim sConteudo As String
Dim sRetorno As Long
Dim sConteudo1 As String

On Error GoTo Erro_TEF_Imprime_Vinculado

    objTela.objParent.SetFocus

    'bloqueio o mouse e teclado
'    Call AFRAC_BloqueiaTecladoMouse

    lErro = TEF_Libera_Impressora(objTela)

    If lErro = SUCESSO Then

        lErro = TEF_Imprime_Vinculado_CHQ(lCOO, objMsg, objTela, objVenda)
        If lErro <> SUCESSO Then gError 133680

        If dValor > 0 Then

            'Abri vinculado
            lErro = AFRAC_AbrirVinculado(lCOO, sDescricao, dValor, 1)
            If lErro <> SUCESSO Then
                lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Abrir Vinculado")
                If lErro <> SUCESSO Then gError 126570
            End If
        
            'Atualiza o arquivo
            lErro = WritePrivateProfileString(APLICACAO_ECF, "StatusTEF", TEF_STATUS_VENDA_VINCULADA, NOME_ARQUIVO_CAIXA)
            If lErro = 0 Then gError 133697
        
            'Atualiza o arquivo
            lErro = WritePrivateProfileString(APLICACAO_ECF, "StatusImpTEF", TEF_STATUS_VENDA_VINCULADA, NOME_ARQUIVO_CAIXA)
            If lErro = 0 Then gError 133825
        
            'funcao que cria/altera a chave e grava no caixaconfig.ini
            lErro = CF_ECF("CaixaConfig_Chave")
            If lErro <> SUCESSO Then gError 204275
        
            If Not objVenda Is Nothing Then
    
                sNomeArq = Dir(gsDirMVTEF & "TEF_" & objVenda.objCupomFiscal.lNumero & "_CPV_" & "*.txt")
        
                Do While Len(sNomeArq) > 0
            
                    sSaltaLinha = Chr(13) + Chr(10) + Chr(13) + Chr(10) + Chr(13) + Chr(10)
                        
                    lErro = AFRAC_ImprimirVinculado(sSaltaLinha)
                    If lErro <> SUCESSO Then
                        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Vinculado")
                        If lErro <> SUCESSO Then gError 133682
                    End If
            
                    lErro = TEF_Imprime_Vinculado1(sDescricao, dValor, lCOO, objMsg, objTela, objVenda, gsDirMVTEF & sNomeArq)
                    If lErro <> SUCESSO Then gError 133778
                        
                    sNomeArq = Dir
                
                Loop
    
            End If
    
            sNomeArq = gsDirMVTEF & Arquivo_Tef_Imp_Prop
        
            If Len(Dir(sNomeArq)) > 0 Then
    
                sSaltaLinha = Chr(13) + Chr(10) + Chr(13) + Chr(10) + Chr(13) + Chr(10)
                        
                lErro = AFRAC_ImprimirVinculado(sSaltaLinha)
                If lErro <> SUCESSO Then
                    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Vinculado")
                    If lErro <> SUCESSO Then gError 126571
                End If
            
                lErro = TEF_Imprime_Vinculado1(sDescricao, dValor, lCOO, objMsg, objTela, objVenda, sNomeArq)
                If lErro <> SUCESSO Then gError 133777
            
                'fecha vinculado
                lErro = AFRAC_FecharVinculado()
                If lErro <> SUCESSO Then
                    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Fechar Vinculado")
                    If lErro <> SUCESSO Then gError 133685
                End If
                
                'Atualiza o arquivo
                lErro = WritePrivateProfileString(APLICACAO_ECF, "StatusTEF", TEF_STATUS_VENDA, NOME_ARQUIVO_CAIXA)
                If lErro = 0 Then gError 133698
        
                'Atualiza o arquivo
                lErro = WritePrivateProfileString(APLICACAO_ECF, "StatusImpTEF", "", NOME_ARQUIVO_CAIXA)
                If lErro = 0 Then gError 133826
                
                'funcao que cria/altera a chave e grava no caixaconfig.ini
                lErro = CF_ECF("CaixaConfig_Chave")
                If lErro <> SUCESSO Then gError 204276
                
                ECF_Apaga_Arquivo sNomeArq
    
            End If
            
        End If
    
        If Not objVenda Is Nothing Then
    
            sNomeArq = "a"
    
            Do While Len(sNomeArq) > 0
            
                sNomeArq = Dir(gsDirMVTEF & "TEF_" & objVenda.objCupomFiscal.lNumero & "_" & "*.txt")
                
                If Len(sNomeArq) > 0 Then ECF_Apaga_Arquivo gsDirMVTEF & sNomeArq
                    
            Loop
    
        End If

    End If

    'desbloqueia mouse e teclado
    Call AFRAC_DesbloqueiaTecladoMouse

    TEF_Imprime_Vinculado = SUCESSO

    Exit Function

Erro_TEF_Imprime_Vinculado:

    TEF_Imprime_Vinculado = gErr
    
    Select Case gErr
    
        Case 126570, 126571, 133678, 133680, 133681, 133682, 133683, 133730, 133731
            Call AFRAC_DesbloqueiaTecladoMouse
    
        Case 133679, 133684, 133771, 133777, 133778, 204275, 204276
    
        Case 133685, 133729
            'desbloqueia mouse e teclado
            Call AFRAC_DesbloqueiaTecladoMouse
    
        Case 133697, 133698, 133824, 133825
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, APLICACAO_ECF, "StatusTEF", NOME_ARQUIVO_CAIXA)
    
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149344)
    
    End Select

End Function

Private Function TEF_Imprime_Vinculado_CHQ(ByVal lCOO As Long, ByVal objMsg As Object, ByVal objTela As Object, ByVal objVenda As ClassVenda) As Long

Dim lErro As Long
Dim sNomeArq As String
Dim sLinha As String
Dim sSaltaLinha As String
Dim sConteudo As String
Dim sRetorno As Long
Dim sConteudo1 As String
Dim sDescricao As String
Dim dValor As Double
Dim objMovCaixa As ClassMovimentoCaixa

On Error GoTo Erro_TEF_Imprime_Vinculado_CHQ

    For Each objMovCaixa In objVenda.colVinculado

        If objMovCaixa.iTipo = TIPOMEIOPAGTOLOJA_TEFCHQ And objMovCaixa.iIndiceImpChq > 0 Then

            dValor = objMovCaixa.dValor
            
            sDescricao = objMovCaixa.sVinculado
            
            sNomeArq = Dir(gsDirMVTEF & "TEF_" & objVenda.objCupomFiscal.lNumero & "_CHQ_" & CStr(objMovCaixa.iIndiceImpChq) & ".txt")
            
            If Len(sNomeArq) > 0 Then
            
                'Abri vinculado
                lErro = AFRAC_AbrirVinculado(lCOO, sDescricao, dValor, 1)
                If lErro <> SUCESSO Then
                    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Abrir Vinculado")
                    If lErro <> SUCESSO Then gError 126589
                End If
            
                'Atualiza o arquivo
                lErro = WritePrivateProfileString(APLICACAO_ECF, "StatusTEF", TEF_STATUS_VENDA_VINCULADA, NOME_ARQUIVO_CAIXA)
                If lErro = 0 Then gError 126590
            
                'Atualiza o arquivo
                lErro = WritePrivateProfileString(APLICACAO_ECF, "StatusImpTEF", TEF_STATUS_VENDA_VINCULADA, NOME_ARQUIVO_CAIXA)
                If lErro = 0 Then gError 126591
            
                'funcao que cria/altera a chave e grava no caixaconfig.ini
                lErro = CF_ECF("CaixaConfig_Chave")
                If lErro <> SUCESSO Then gError 204277
            
                If Not objVenda Is Nothing Then
                    
                    'mario1
                    sSaltaLinha = Chr(13) + Chr(10) + Chr(13) + Chr(10) + Chr(13) + Chr(10)
                            
                    lErro = AFRAC_ImprimirVinculado(sSaltaLinha)
                    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Vinculado")
                    If lErro <> SUCESSO Then gError 126592
                    'fim mario1
                
                    lErro = TEF_Imprime_Vinculado1(sDescricao, dValor, lCOO, objMsg, objTela, objVenda, gsDirMVTEF & sNomeArq)
                    If lErro <> SUCESSO Then gError 126593
                        
                    'fecha vinculado
                    lErro = AFRAC_FecharVinculado()
                    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Fechar Vinculado")
                    If lErro <> SUCESSO Then gError 126594
                        
                End If
        
            End If
    
        End If
    
    Next
        
    TEF_Imprime_Vinculado_CHQ = SUCESSO

    Exit Function

Erro_TEF_Imprime_Vinculado_CHQ:

    TEF_Imprime_Vinculado_CHQ = gErr
    
    Select Case gErr
    
        Case 126589, 126592, 126593, 126594, 204277
    
        Case 126590, 126591
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, APLICACAO_ECF, "StatusTEF", NOME_ARQUIVO_CAIXA)
    
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149345)
    
    End Select

    Exit Function

End Function

Private Function TEF_Imprime_Vinculado1(ByVal sDescricao As String, ByVal dValor As Double, ByVal lCOO As Long, ByVal objMsg As Object, ByVal objTela As Object, ByVal objVenda As ClassVenda, ByVal sNomeArq As String) As Long

Dim lErro As Long
Dim sLinha As String
Dim sSaltaLinha As String
Dim sRetorno As Long
Dim iPos1 As Integer

On Error GoTo Erro_TEF_Imprime_Vinculado1

    Open sNomeArq For Input As #1

    Do While Not EOF(1)
    
        Line Input #1, sLinha

        If iPos1 = 0 Then
        
            'a nota promissoria, quando houver, so e' impressa na segunda via
            iPos1 = InStr(UCase(sLinha), "            NOTA  PROMISSORIA           ")
            
            If iPos1 = 0 Then
            
                lErro = AFRAC_ImprimirVinculado(sLinha)
                lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Vinculado")
                If lErro <> SUCESSO Then gError 133681
            
            End If
        
        End If
        
    Loop
        
    Close #1
            
    sSaltaLinha = Chr(13) + Chr(10) + Chr(13) + Chr(10) + Chr(13) + Chr(10) + Chr(13) + Chr(10) + Chr(13) + Chr(10)
            
    lErro = AFRAC_ImprimirVinculado(sSaltaLinha)
    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Vinculado")
    If lErro <> SUCESSO Then gError 133682

    objMsg.LabelMsg.Caption = "Por favor, destaque a 1a via"
    objMsg.Show vbModal
    objTela.objParent.Refresh
            
    Open sNomeArq For Input As #1
            
    Do While Not EOF(1)
    
        Line Input #1, sLinha

        lErro = AFRAC_ImprimirVinculado(sLinha)
        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Vinculado")
        If lErro <> SUCESSO Then gError 133683
            
    Loop
        
    Close #1

    TEF_Imprime_Vinculado1 = SUCESSO

    Exit Function

Erro_TEF_Imprime_Vinculado1:

    TEF_Imprime_Vinculado1 = gErr
    
    Close #1
    
    Select Case gErr
    
        Case 133681, 133682, 133683, 133730
            Call AFRAC_DesbloqueiaTecladoMouse
    
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149346)
    
    End Select

End Function

Private Function TEF_Imprime_Gerencial(ByVal objMsg As Object, ByVal objTela As Object, Optional ByVal objVenda As ClassVenda) As Long

Dim lErro As Long
Dim sNomeArq As String
Dim lTamanho As Long
Dim sRetorno As String
Dim sSaltaLinha As String

On Error GoTo Erro_TEF_Imprime_Gerencial

    objTela.objParent.SetFocus

    'bloqueio o mouse e teclado
'    Call AFRAC_BloqueiaTecladoMouse
    
   lErro = TEF_Libera_Impressora(objTela)

     If lErro = SUCESSO Then

        lErro = AFRAC_AbrirRelatorioGerencial(RELGER_COMPROVANTE_TEF, objTela)
        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Abre Comprovante TEF")
        If lErro <> SUCESSO Then gError 133687
    
'        lTamanho = 10
'        sRetorno = String(lTamanho, 0)
'
'        'Indica o status do TEF
'        Call GetPrivateProfileString(APLICACAO_ECF, "CancelamentoTEF", CONSTANTE_ERRO, sRetorno, lTamanho, NOME_ARQUIVO_CAIXA)
'
'        sRetorno = StringZ(sRetorno)
'
'        If sRetorno <> TEF_CANCELAMENTO_IMPRESSAO Then
    
            'Atualiza o arquivo
            lErro = WritePrivateProfileString(APLICACAO_ECF, "StatusTEF", TEF_STATUS_VENDA_GERENCIAL, NOME_ARQUIVO_CAIXA)
            If lErro = 0 Then gError 133699
    
            'Atualiza o arquivo
            lErro = WritePrivateProfileString(APLICACAO_ECF, "StatusImpTEF", TEF_STATUS_VENDA_GERENCIAL, NOME_ARQUIVO_CAIXA)
            If lErro = 0 Then gError 133823
    
            'funcao que cria/altera a chave e grava no caixaconfig.ini
            lErro = CF_ECF("CaixaConfig_Chave")
            If lErro <> SUCESSO Then gError 204278

    
'        End If
    
        If Not objVenda Is Nothing Then

            sNomeArq = Dir(gsDirMVTEF & "TEF_" & objVenda.objCupomFiscal.lNumero & "_" & "*.txt")
            
            Do While Len(sNomeArq) > 0

                sSaltaLinha = Chr(13) + Chr(10) + Chr(13) + Chr(10) + Chr(13) + Chr(10)
                
                lErro = AFRAC_ImprimirRelatorioGerencial(sSaltaLinha, objTela)
                lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Rel. Gerencial")
                If lErro <> SUCESSO Then gError 126572

                lErro = TEF_Imprime_Gerencial1(objMsg, objTela, gsDirMVTEF & sNomeArq)
                If lErro <> SUCESSO Then gError 133779

                sNomeArq = Dir

            Loop

        End If
    
    
'        'se so estiver imprimindo os cancelamento ==> nao tem que imprimir o Arquivo_Tef_Imp_Prop
'        If sRetorno <> TEF_CANCELAMENTO_IMPRESSAO Then
    
            sNomeArq = gsDirMVTEF & Arquivo_Tef_Imp_Prop
            
            If Len(Dir(sNomeArq)) = 0 Then gError 133688
        
            sSaltaLinha = Chr(13) + Chr(10) + Chr(13) + Chr(10) + Chr(13) + Chr(10)
        
            lErro = AFRAC_ImprimirRelatorioGerencial(sSaltaLinha, objTela)
            lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Rel. Gerencial")
            If lErro <> SUCESSO Then gError 126573
        
            lErro = TEF_Imprime_Gerencial1(objMsg, objTela, sNomeArq)
            If lErro <> SUCESSO Then gError 133778
    
'        End If
    
        'fecha vinculado
        lErro = AFRAC_FecharRelatorioGerencial(objTela)
        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Fechar Rel. Gerencial")
        If lErro <> SUCESSO Then gError 133692
        
'        'se so estiver imprimindo os cancelamento ==> nao tem que imprimir o Arquivo_Tef_Imp_Prop
'        If sRetorno <> TEF_CANCELAMENTO_IMPRESSAO Then
        
        'Atualiza o arquivo
        lErro = WritePrivateProfileString(APLICACAO_ECF, "StatusTEF", TEF_STATUS_VENDA, NOME_ARQUIVO_CAIXA)
        If lErro = 0 Then gError 133700
    
        lErro = WritePrivateProfileString(APLICACAO_ECF, "StatusImpTEF", "", NOME_ARQUIVO_CAIXA)
        If lErro = 0 Then gError 133824
        
        
        'funcao que cria/altera a chave e grava no caixaconfig.ini
        lErro = CF_ECF("CaixaConfig_Chave")
        If lErro <> SUCESSO Then gError 204279
        
    
        ECF_Apaga_Arquivo sNomeArq
        
'        End If
'
        If Not objVenda Is Nothing Then

            sNomeArq = "a"

            Do While Len(sNomeArq) > 0

                sNomeArq = Dir(gsDirMVTEF & "TEF_" & objVenda.objCupomFiscal.lNumero & "_" & "*.txt")
                
                If Len(sNomeArq) > 0 Then ECF_Apaga_Arquivo gsDirMVTEF & sNomeArq

            Loop

        End If
        
        
    End If

    'desbloqueia mouse e teclado
    Call AFRAC_DesbloqueiaTecladoMouse

    TEF_Imprime_Gerencial = SUCESSO

    Exit Function

Erro_TEF_Imprime_Gerencial:

    TEF_Imprime_Gerencial = gErr
    
    Select Case gErr
    
        Case 126572, 126573, 133687, 133688, 133692, 133778, 133779, 204278, 204279
            Call AFRAC_DesbloqueiaTecladoMouse
    
        Case 133699, 133700, 133823, 133824
            Call AFRAC_DesbloqueiaTecladoMouse
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, APLICACAO_ECF, "StatusTEF", NOME_ARQUIVO_CAIXA)
    
        Case Else
            Call AFRAC_DesbloqueiaTecladoMouse
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149347)
    
    End Select

    Exit Function

End Function

Private Function TEF_Imprime_Gerencial1(ByVal objMsg As Object, ByVal objTela As Object, ByVal sNomeArq As String) As Long

Dim lErro As Long
Dim sLinha As String
Dim sSaltaLinha As String
Dim iPos1 As Integer

On Error GoTo Erro_TEF_Imprime_Gerencial1

    Open sNomeArq For Input As #1

    Do While Not EOF(1)
    
        Line Input #1, sLinha

        If iPos1 = 0 Then
        
            'a nota promissoria, quando houver, so e' impressa na segunda via
            iPos1 = InStr(UCase(sLinha), "            NOTA  PROMISSORIA           ")
            
            If iPos1 = 0 Then
            
                lErro = AFRAC_ImprimirRelatorioGerencial(sLinha, objTela)
                lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Rel. Gerencial")
                If lErro <> SUCESSO Then gError 133689
            
            End If
        
        End If
        
    Loop
        
    Close #1
    
    sSaltaLinha = Chr(13) + Chr(10) + Chr(13) + Chr(10) + Chr(13) + Chr(10) + Chr(13) + Chr(10) + Chr(13) + Chr(10)
    
    lErro = AFRAC_ImprimirRelatorioGerencial(sSaltaLinha, objTela)
    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Rel. Gerencial")
    If lErro <> SUCESSO Then gError 133690
        
    objMsg.LabelMsg.Caption = "Por favor, destaque a 1a via"
    objMsg.Show vbModal
    objTela.objParent.Refresh
            
    Open sNomeArq For Input As #1

    Do While Not EOF(1)
    
        Line Input #1, sLinha

        lErro = AFRAC_ImprimirRelatorioGerencial(sLinha, objTela)
        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Vinculado")
        If lErro <> SUCESSO Then gError 133691
        
    Loop

    Close #1

    TEF_Imprime_Gerencial1 = SUCESSO

    Exit Function

Erro_TEF_Imprime_Gerencial1:

    TEF_Imprime_Gerencial1 = gErr
    
    Close #1
    
    Select Case gErr
    
        Case 133689 To 133691, 133737
    
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149348)
    
    End Select

    Exit Function

End Function

Function TEF_Confirma_Transacao(Optional ByVal iExibirMsg As Integer = 0, Optional iSitefNaoRespondeu1 As Integer = 0) As Long

Dim lErro As Long
Dim sLinha As String
Dim sConteudo As String
Dim sArqSTS As String
Dim sArqINTPOS As String
Dim iTentativas As Integer
Dim sNSU As String
Dim iSitefNaoRespondeu As Integer
Dim sFinalizacao As String

On Error GoTo Erro_TEF_Confirma_Transacao

    If Len(Dir(Arquivo_Tef_Resp1_Prop)) > 0 Then ECF_Apaga_Arquivo Arquivo_Tef_Resp1_Prop

    Do While True

        sConteudo = ""

        'Abre o arquivo da venda
        Open Arquivo_Tef_Resp2_Prop For Input As #1
        
        Do While Not EOF(1)
    
            Line Input #1, sLinha
            
            If (Mid(sLinha, 1, 7) = "001-000") Or _
               (Mid(sLinha, 1, 7) = "002-000") Or _
               (Mid(sLinha, 1, 7) = "010-000") Or _
               (Mid(sLinha, 1, 7) = "012-000") Or _
               (Mid(sLinha, 1, 7) = "027-000") Then
                sConteudo = sConteudo + sLinha + Chr(13) + Chr(10)
                
                If Mid(sLinha, 1, 7) = "012-000" Then
                    sNSU = Mid(sLinha, 11, Len(sLinha) - 10)
                End If
            
                If Mid(sLinha, 1, 7) = "027-000" Then
                    sFinalizacao = Mid(sLinha, 11, Len(sLinha) - 10)
                End If
            
            End If
            
            If (Mid(sLinha, 1, 7)) = "999-999" Then
                sConteudo = sConteudo + sLinha
            End If
            
        Loop
        
        Close #1
        
        sConteudo = "000-000 = CNF" + Chr(13) + Chr(10) + sConteudo
        
        Open Arquivo_Tef_Temp_Prop For Binary As #1
        
        Put #1, , sConteudo
        
        Close #1
        
'        If StrParaDbl(sNSU) <> 0 Then FileCopy Arquivo_Tef_Temp_Prop, Arquivo_Tef_Req_Prop
         If Len(sFinalizacao) > 0 Then FileCopy Arquivo_Tef_Temp_Prop, Arquivo_Tef_Req_Prop
         
        If giTipoTEF = TIPOTEF_SITEF Then
         
            'verifica se tem a confirmacao/nao confirmacao da transacao anterior guardada
            If Len(Dir(Arquivo_Tef_Req_Backup1_Prop)) > 0 Then
                 If Len(sFinalizacao) > 0 Then FileCopy Arquivo_Tef_Temp_Prop, Arquivo_Tef_Req_Backup2_Prop
            Else
                 If Len(sFinalizacao) > 0 Then FileCopy Arquivo_Tef_Temp_Prop, Arquivo_Tef_Req_Backup1_Prop
            End If
             
        End If
        
        ECF_Apaga_Arquivo Arquivo_Tef_Temp_Prop
    
'        If StrParaDbl(sNSU) = 0 Then Exit Do
         If Len(sFinalizacao) = 0 Then Exit Do
        
        For iTentativas = 1 To 7
        
            sArqSTS = Dir(Arquivo_Tef_Resp1_Prop)
            If sArqSTS <> "" Then
                ECF_Apaga_Arquivo Arquivo_Tef_Resp1_Prop
                
                If giTipoTEF = TIPOTEF_SITEF Then
                    If Len(Dir(Arquivo_Tef_Req_Backup2_Prop)) > 0 Then
                        ECF_Apaga_Arquivo Arquivo_Tef_Req_Backup2_Prop
                    Else
                        ECF_Apaga_Arquivo Arquivo_Tef_Req_Backup1_Prop
                    End If
                End If
                
                Exit Do
            End If
        
            Sleep 1000
            
        Next
    
        If iTentativas > 7 Then
        
            If giTipoTEF = TIPOTEF_SITEF Then
                           
                               
                iSitefNaoRespondeu = 1
                iSitefNaoRespondeu1 = 1
                Exit Do

            
            Else
            
                Call Rotina_AvisoECF(vbOKOnly, ERRO_TEF_NAO_ATIVO, gErr)
            
            End If
            
        End If
    
    Loop
    
    sArqINTPOS = Dir(Arquivo_Tef_Resp2_Prop)
    If sArqINTPOS <> "" Then
        ECF_Apaga_Arquivo Arquivo_Tef_Resp2_Prop
    End If
    
    If iExibirMsg = 0 And iSitefNaoRespondeu <> 1 Then
    
        'Atualiza o arquivo
        lErro = WritePrivateProfileString(APLICACAO_ECF, "StatusTEF", "", NOME_ARQUIVO_CAIXA)
        If lErro = 0 Then gError 133701
    
    
        'funcao que cria/altera a chave e grava no caixaconfig.ini
        lErro = CF_ECF("CaixaConfig_Chave")
        If lErro <> SUCESSO Then gError 204280

    
    End If
    
    TEF_Confirma_Transacao = SUCESSO

    Exit Function

Erro_TEF_Confirma_Transacao:

    TEF_Confirma_Transacao = gErr
    
    Select Case gErr
    
        Case 133701
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, APLICACAO_ECF, "StatusTEF", NOME_ARQUIVO_CAIXA)
    
        Case 204280
    
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149349)
    
    End Select

End Function
        
Function TEF_NaoConfirma_Transacao(ByVal objTela As Object, Optional ByVal iExibirMsg As Integer = 0, Optional iSitefNaoRespondeu1 As Integer = 0) As Long

Dim lErro As Long
Dim sLinha As String
Dim sConteudo As String
Dim sArqSTS As String
Dim sArqINTPOS As String
Dim sRede As String
Dim sNSU As String
Dim dValor As Double
Dim sValor As String
Dim iTentativas As Integer
Dim iSitefNaoRespondeu As Integer
Dim sFinalizacao As String

On Error GoTo Erro_TEF_NaoConfirma_Transacao

    If Len(Dir(Arquivo_Tef_Resp1_Prop)) > 0 Then ECF_Apaga_Arquivo Arquivo_Tef_Resp1_Prop

    Do While True
    
        sConteudo = ""
    
        'Abre o arquivo da venda
        Open Arquivo_Tef_Resp2_Prop For Input As #1
        
        Do While Not EOF(1)
    
            Line Input #1, sLinha
            
            If (Mid(sLinha, 1, 3) = "001") Or _
              (Mid(sLinha, 1, 3) = "002") Or _
              (Mid(sLinha, 1, 3) = "027") Then
                sConteudo = sConteudo + sLinha + Chr(13) + Chr(10)
            End If
            
            If Mid(sLinha, 1, 3) = "003" Then
                sValor = Mid(sLinha, 11, Len(sLinha) - 10)
                
                If giTipoTEF = TIPOTEF_SITEF Then
                    dValor = StrParaDbl(sValor)
                Else
                    dValor = StrParaDbl(sValor) / 100
                End If
            End If
            
            If Mid(sLinha, 1, 7) = "010-000" Then
                sConteudo = sConteudo + sLinha + Chr(13) + Chr(10)
                sRede = Mid(sLinha, 11, Len(sLinha) - 10)
            End If
            
            If Mid(sLinha, 1, 7) = "012-000" Then
                sConteudo = sConteudo + sLinha + Chr(13) + Chr(10)
                sNSU = Mid(sLinha, 11, Len(sLinha) - 10)
            End If
            
            If Mid(sLinha, 1, 7) = "027-000" Then
                sFinalizacao = Mid(sLinha, 11, Len(sLinha) - 10)
            End If
            
            If (Mid(sLinha, 1, 7)) = "999-999" Then
                sConteudo = sConteudo + sLinha
            End If
            
        Loop
        
        Close #1
        
        sConteudo = "000-000 = NCN" + Chr(13) + Chr(10) + sConteudo
        
        Open Arquivo_Tef_Temp_Prop For Binary As #1
        
        Put #1, , sConteudo
        
        Close #1
        
'        If StrParaDbl(sNSU) <> 0 Then FileCopy Arquivo_Tef_Temp_Prop, Arquivo_Tef_Req_Prop
         If Len(sFinalizacao) > 0 Then FileCopy Arquivo_Tef_Temp_Prop, Arquivo_Tef_Req_Prop
        
        If giTipoTEF = TIPOTEF_SITEF Then
         
            If Len(Dir(Arquivo_Tef_Req_Backup1_Prop)) > 0 Then
                 If Len(sFinalizacao) > 0 Then FileCopy Arquivo_Tef_Temp_Prop, Arquivo_Tef_Req_Backup2_Prop
            Else
                 If Len(sFinalizacao) > 0 Then FileCopy Arquivo_Tef_Temp_Prop, Arquivo_Tef_Req_Backup1_Prop
            End If
             
        End If
        
        ECF_Apaga_Arquivo Arquivo_Tef_Temp_Prop
    
'        If StrParaDbl(sNSU) = 0 Then Exit Do
    
        If Len(sFinalizacao) = 0 Then Exit Do
    
        For iTentativas = 1 To 7
        
            sArqSTS = Dir(Arquivo_Tef_Resp1_Prop)
            
            If sArqSTS <> "" Then
                ECF_Apaga_Arquivo Arquivo_Tef_Resp1_Prop
                
                If giTipoTEF = TIPOTEF_SITEF Then
                    If Len(Dir(Arquivo_Tef_Req_Backup2_Prop)) > 0 Then
                        ECF_Apaga_Arquivo Arquivo_Tef_Req_Backup2_Prop
                    Else
                        ECF_Apaga_Arquivo Arquivo_Tef_Req_Backup1_Prop
                    End If
                End If
                
                Exit Do
            End If
        
            Sleep 1000
            
        Next
        
        If iTentativas > 7 Then
        
            If giTipoTEF = TIPOTEF_SITEF Then
                
                iSitefNaoRespondeu = 1
                iSitefNaoRespondeu1 = 1
'                Call Rotina_AvisoECF(vbOKOnly, ERRO_SITEF_NAO_ATIVO, gErr)
                Exit Do
            Else
            
                Call Rotina_AvisoECF(vbOKOnly, ERRO_TEF_NAO_ATIVO, gErr)
            
            End If
            
        End If
    
    Loop
    
    sArqINTPOS = Dir(Arquivo_Tef_Resp2_Prop)
    If sArqINTPOS <> "" Then
        ECF_Apaga_Arquivo Arquivo_Tef_Resp2_Prop
    End If
    
    sConteudo = "Última transação TEF foi cancelada." + Chr(13)
    
    If Len(sRede) > 0 Then
    
        sConteudo = sConteudo + "Rede: " + sRede + Chr(13)
        
    End If
    
    If Len(sNSU) > 0 Then
    
        sConteudo = sConteudo + "Doc. Num.: " + sNSU + Chr(13)
        
    End If
    
    If Len(sValor) > 0 Then
    
        sConteudo = sConteudo + "Valor: " + Format(dValor, "standard")
    
    End If
    
'    If StrParaDbl(sNSU) <> 0 Then
        If giTipoTEF = TIPOTEF_DISC Then
            Call Rotina_AvisoECF(vbOKOnly, sConteudo)
        End If
'    End If
    
    If iExibirMsg = 0 Then
    
        If giTipoTEF = TIPOTEF_SITEF And iSitefNaoRespondeu <> 1 Then
            Call Rotina_AvisoECF(vbOKOnly, ERRO_SITEF_TRN_NAO_EFETUADA)
        End If
        
        
        lErro = TEF_Libera_Impressora(objTela)
        If lErro <> SUCESSO Then gError 133808
        
        If iSitefNaoRespondeu <> 1 Then
        
            'Indica que a nao confirmacao foi completada para caso cair a energia
            lErro = WritePrivateProfileString(APLICACAO_ECF, "StatusTEF", "", NOME_ARQUIVO_CAIXA)
            If lErro = 0 Then gError 133702
        
            'funcao que cria/altera a chave e grava no caixaconfig.ini
            lErro = CF_ECF("CaixaConfig_Chave")
            If lErro <> SUCESSO Then gError 204281
        
        
        End If
    
    End If
    
    TEF_NaoConfirma_Transacao = SUCESSO

    Exit Function

Erro_TEF_NaoConfirma_Transacao:

    TEF_NaoConfirma_Transacao = gErr
    
    Select Case gErr
    
        Case 133702
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, APLICACAO_ECF, "StatusTEF", NOME_ARQUIVO_CAIXA)
    
        Case 133808, 204281
    
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149350)
    
    End Select

End Function

Function TEF_ADM(ByVal objMsg As Object, ByVal objTela As Object) As Long
    
Dim lErro As Long
Dim sArquivoSTS As String
Dim sArquivoINTPOS As String
Dim objTEF As New ClassTEF

On Error GoTo Erro_TEF_ADM
    
    sArquivoSTS = Dir(Arquivo_Tef_Resp1_Prop)
    If sArquivoSTS <> "" Then ECF_Apaga_Arquivo Arquivo_Tef_Resp1_Prop
    
    sArquivoINTPOS = Dir(Arquivo_Tef_Resp2_Prop)
    If sArquivoINTPOS <> "" Then ECF_Apaga_Arquivo Arquivo_Tef_Resp2_Prop
        
    lErro = TEF_CNF_NCN_Pendente()
    If lErro <> SUCESSO Then gError 126577
        
    'Adiciona na variável global
    glNumProxIdentificacao = glNumProxIdentificacao + 1
    
    'Atualiza o arquivo
    lErro = WritePrivateProfileString(APLICACAO_ECF, "NumProxIdent", CStr(glNumProxIdentificacao), NOME_ARQUIVO_CAIXA)
    If lErro = 0 Then gError 214594
        
    'funcao que cria/altera a chave e grava no caixaconfig.ini
    lErro = CF_ECF("CaixaConfig_Chave")
    If lErro <> SUCESSO Then gError 204282
        
    'Abre o arquivo Temporário
    Open Arquivo_Tef_Temp_Prop For Append As #1
        
    'Informa dados de pagamento
    Print #1, "000-000 = ADM"
    Print #1, "001-000 = " & CStr(glNumProxIdentificacao)
    Print #1, "999-999 = 0"
    
    Close #1
    
    'renomeando os arquivos
    FileCopy Arquivo_Tef_Temp_Prop, Arquivo_Tef_Req_Prop
    
    ECF_Apaga_Arquivo Arquivo_Tef_Temp_Prop
    
    lErro = TEF_Trata_Resp(objTEF, objMsg, objTela)
    If lErro <> SUCESSO And lErro <> 133717 Then gError 133722
        
    If lErro = 133717 Then
    
'        If UCase(Trim(objTEF.sOperador)) <> "INICIACAO DO TERMINAL CONCLUIDA." And UCase(Trim(objTEF.sOperador)) <> "INICIAÇÃO DO TERMINAL CONCLUÍDA." And _
'           UCase(Trim(objTEF.sOperador)) <> "INICIACAO DO TERMINAL CONCLUIDA" And UCase(Trim(objTEF.sOperador)) <> "INICIAÇÃO DO TERMINAL CONCLUÍDA" And _
'           UCase(Trim(objTEF.sOperador)) <> "INICIAÇAO DO TERMINAL CONCLUIDA" And UCase(Trim(objTEF.sOperador)) <> "INICIAÇAO DO TERMINAL CONCLUIDA." Then
'
'                gError 133723
'
'        End If
    
    Else
    
        lErro = TEF_Imprime_ADM(objMsg, objTela)
        If lErro <> SUCESSO Then gError 133726
        
    End If
    
    
    TEF_ADM = SUCESSO

    Exit Function
    
Erro_TEF_ADM:
    
    TEF_ADM = gErr
    
    Select Case gErr
    
        Case 5
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO2, gErr)
    
        Case 126577, 133722, 204282
    
        Case 214594
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, APLICACAO_ECF, "NumProxIdent", NOME_ARQUIVO_CAIXA)
    
        Case 133723
                Call TEF_NaoConfirma_Transacao(objTela)
        
        Case 133726
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149351)

    End Select
    
    Exit Function
         
End Function

Function TEF_Imprime_ADM(ByVal objMsg As Object, ByVal objTela As Object) As Long

Dim lErro As Long
Dim sNomeArq As String
Dim sLinha As String
Dim sSaltaLinha As String
Dim sConteudo As String
Dim vbMsg As VbMsgBoxResult

On Error GoTo Erro_TEF_Imprime_ADM

    'imprime gerencial
    lErro = TEF_Imprime_Gerencial(objMsg, objTela)
    
    vbMsg = vbYes
    
    'se nao conseguiu imprimir os comprovantes e quer continuar tentando
    Do While vbMsg = vbYes And lErro <> SUCESSO
    
        vbMsg = Rotina_AvisoECF(vbYesNo, "Impressora não responde, tentar novamente?")
        
        If vbMsg = vbYes Then
        
            'imprime gerencial
            lErro = TEF_Imprime_Gerencial(objMsg, objTela)
        
        End If

    Loop
    
    'se imprimiu corretamente
    If lErro = SUCESSO Then
    
        lErro = TEF_Confirma_Transacao
        If lErro <> SUCESSO Then gError 133724
    
    Else
    
        lErro = TEF_NaoConfirma_Transacao(objTela)
        If lErro <> SUCESSO Then gError 133725
    
    End If
    
    TEF_Imprime_ADM = SUCESSO

    Exit Function

Erro_TEF_Imprime_ADM:

    TEF_Imprime_ADM = gErr
    
    Select Case gErr
    
        Case 133724, 133725
    
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149352)
    
    End Select

End Function

Function TEF_Gerenciador_Padrao() As Long

Dim lErro As Long
Dim sArquivoSTS As String
Dim iTentativas As Integer

On Error GoTo Erro_TEF_Gerenciador_Padrao
    
    If giTipoTEF = TIPOTEF_DISC Then
    
        sArquivoSTS = Dir(Arquivo_Tef_Resp1_Prop)
        If sArquivoSTS <> "" Then ECF_Apaga_Arquivo Arquivo_Tef_Resp1_Prop
        
        'Adiciona na variável global
        glNumProxIdentificacao = glNumProxIdentificacao + 1
        
        'Atualiza o arquivo
        lErro = WritePrivateProfileString(APLICACAO_ECF, "NumProxIdent", CStr(glNumProxIdentificacao), NOME_ARQUIVO_CAIXA)
        If lErro = 0 Then gError 214595
            
        'funcao que cria/altera a chave e grava no caixaconfig.ini
        lErro = CF_ECF("CaixaConfig_Chave")
        If lErro <> SUCESSO Then gError 204283
            
        'Abre o arquivo Temporário
        Open Arquivo_Tef_Temp_Prop For Append As #1
            
        'Informa dados de pagamento
        Print #1, "000-000 = ATV"
        Print #1, "001-000 = " & CStr(glNumProxIdentificacao)
        Print #1, "999-999 = 0"
        
        Close #1
        
        'renomeando os arquivos
        FileCopy Arquivo_Tef_Temp_Prop, Arquivo_Tef_Req_Prop
        
        ECF_Apaga_Arquivo Arquivo_Tef_Temp_Prop
        
        For iTentativas = 1 To 7
        
           sArquivoSTS = Dir(Arquivo_Tef_Resp1_Prop)
           If sArquivoSTS <> "" Then Exit For
           Sleep (1000)
        Next
    
        If sArquivoSTS = "" Then
            Call Rotina_AvisoECF(vbOKOnly, ERRO_TEF_NAO_ATIVO)
            gError 133756
        End If
    
    End If
    
    TEF_Gerenciador_Padrao = SUCESSO

    Exit Function
    
Erro_TEF_Gerenciador_Padrao:
    
    TEF_Gerenciador_Padrao = gErr
    
    Select Case gErr
    
        Case 133756, 204283
    
        Case 214595
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, APLICACAO_ECF, "NumProxIdent", NOME_ARQUIVO_CAIXA)

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149353)

    End Select
    
    Exit Function


End Function

Public Function TEF_Libera_Impressora(ByVal objTela As Object) As Long

Dim lErro As Long
Dim lTamanho As Long
Dim sRetorno As String
Dim lSequencial As Long
Dim lTransacao As Long

On Error GoTo Erro_TEF_Libera_Impressora

    If glTransacaoPAFECF = 0 Then

        'Abre a Transação
        lErro = CF_ECF("Caixa_Transacao_Abrir", lSequencial)
        If lErro <> SUCESSO Then gError 214630

        lTransacao = glTransacaoPAFECF

    End If

    lTamanho = 10
    sRetorno = String(lTamanho, 0)
    
    'Indica o status do TEF quando foi interrompido o processo
    Call GetPrivateProfileString(APLICACAO_ECF, "StatusImpTEF", CONSTANTE_ERRO, sRetorno, lTamanho, NOME_ARQUIVO_CAIXA)
    
    If sRetorno <> String(lTamanho, 0) Then
    
        sRetorno = StringZ(sRetorno)
    
        If sRetorno = TEF_STATUS_VENDA_VINCULADA Then
        
            'fecha vinculado
            lErro = AFRAC_FecharVinculado()
            If lErro = SUCESSO Then
            
                'Atualiza o arquivo
                lErro = WritePrivateProfileString(APLICACAO_ECF, "StatusTEF", TEF_STATUS_VENDA, NOME_ARQUIVO_CAIXA)
                If lErro = 0 Then gError 133757
                    
                'Atualiza o arquivo
                lErro = WritePrivateProfileString(APLICACAO_ECF, "StatusImpTEF", "", NOME_ARQUIVO_CAIXA)
                If lErro = 0 Then gError 133826
                
                'funcao que cria/altera a chave e grava no caixaconfig.ini
                lErro = CF_ECF("CaixaConfig_Chave")
                If lErro <> SUCESSO Then gError 204284
                
                
            End If
        
        End If
        
        If sRetorno = TEF_STATUS_VENDA_GERENCIAL Then
        
            'fecha vinculado
            lErro = AFRAC_FecharRelatorioGerencial(objTela)
            If lErro = SUCESSO Then
            
                'Atualiza o arquivo
                lErro = WritePrivateProfileString(APLICACAO_ECF, "StatusTEF", TEF_STATUS_VENDA, NOME_ARQUIVO_CAIXA)
                If lErro = 0 Then gError 133758
                
                'Atualiza o arquivo
                lErro = WritePrivateProfileString(APLICACAO_ECF, "StatusImpTEF", "", NOME_ARQUIVO_CAIXA)
                If lErro = 0 Then gError 133827
                
                'funcao que cria/altera a chave e grava no caixaconfig.ini
                lErro = CF_ECF("CaixaConfig_Chave")
                If lErro <> SUCESSO Then gError 204285
                
            End If
        
        End If

    End If
    
    If lTransacao <> 0 Then
        
        'Fecha a Transação
        lErro = CF_ECF("Caixa_Transacao_Fechar", lSequencial)
        If lErro <> SUCESSO Then gError 214631
            
    End If
    
    TEF_Libera_Impressora = SUCESSO
    
    Exit Function
    
Erro_TEF_Libera_Impressora:
    
    TEF_Libera_Impressora = gErr
    
    Select Case gErr
    
        Case 133757, 133758, 133826, 133827
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, APLICACAO_ECF, "StatusTEF", NOME_ARQUIVO_CAIXA)
    
        Case 204284, 204285, 214630, 214631
    
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB, gErr, Error$, 149354)

    End Select
    
    If lTransacao <> 0 Then
        'Rollback na transação
        lErro = CF_ECF("Caixa_Transacao_Rollback", glTransacaoPAFECF)
    End If
    
    
    Exit Function


End Function

Function TEF_CHQ(ByVal objMsg As Object, ByVal objTela As Object, ByVal objCheque As ClassChequePre, ByVal objVenda As ClassVenda) As Long
    
Dim lErro As Long
Dim sArquivoSTS As String
Dim sArquivoINTPOS As String
Dim objTEF As New ClassTEF

On Error GoTo Erro_TEF_CHQ
    
    sArquivoSTS = Dir(Arquivo_Tef_Resp1_Prop)
    If sArquivoSTS <> "" Then ECF_Apaga_Arquivo Arquivo_Tef_Resp1_Prop
    
    sArquivoINTPOS = Dir(Arquivo_Tef_Resp2_Prop)
    If sArquivoINTPOS <> "" Then ECF_Apaga_Arquivo Arquivo_Tef_Resp2_Prop
        
    'Adiciona na variável global
    glNumProxIdentificacao = glNumProxIdentificacao + 1
    
    'Atualiza o arquivo
    lErro = WritePrivateProfileString(APLICACAO_ECF, "NumProxIdent", CStr(glNumProxIdentificacao), NOME_ARQUIVO_CAIXA)
    If lErro = 0 Then gError 133774
        
    'funcao que cria/altera a chave e grava no caixaconfig.ini
    lErro = CF_ECF("CaixaConfig_Chave")
    If lErro <> SUCESSO Then gError 204286
        
    'Abre o arquivo Temporário
    Open Arquivo_Tef_Temp_Prop For Append As #1
        
    'Informa dados de pagamento
    Print #1, "000-000 = CHQ"
    Print #1, "001-000 = " & CStr(glNumProxIdentificacao)
    Print #1, "003-000 = " & CStr(objCheque.dValor * 100)
    If Len(Trim(objCheque.sCPFCGC)) > 0 Then
        Print #1, "006-000 = " & IIf(Len(Trim(objCheque.sCPFCGC)) > 11, "J", "F")
        Print #1, "007-000 = " & objCheque.sCPFCGC
    End If
    
    Print #1, "008-000 = " & Format(objCheque.dtDataDeposito, "ddmmyyyy")
    Print #1, "033-000 = " & CStr(objCheque.iBanco)
    Print #1, "034-000 = " & objCheque.sAgencia
    Print #1, "036-000 = " & objCheque.sContaCorrente
    Print #1, "038-000 = " & CStr(objCheque.lNumero)
    Print #1, "999-999 = 0"
    
    Close #1
    
    'renomeando os arquivos
    FileCopy Arquivo_Tef_Temp_Prop, Arquivo_Tef_Req_Prop
    
    ECF_Apaga_Arquivo Arquivo_Tef_Temp_Prop
    
    lErro = TEF_Trata_Resp(objTEF, objMsg, objTela)
    If lErro <> SUCESSO And lErro <> 133717 Then gError 133775
    
    If lErro = 133717 And giTipoTEF <> TIPOTEF_SITEF Then gError 133829
    
    If lErro = SUCESSO Then
    
        lErro = CF_ECF("TEF_Imprime_Doc", objVenda, objTela, "CHQ")
        If lErro <> SUCESSO Then gError 133776
        
    Else
        objVenda.colIndiceImpCheque.Add 0
    
    End If
    
    objCheque.iAprovado = CHEQUE_APROVADO
    
    TEF_CHQ = SUCESSO

    Exit Function
    
Erro_TEF_CHQ:
    
    TEF_CHQ = gErr
    
    Select Case gErr
    
        Case 5
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO2, gErr)
    
        Case 133774
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, APLICACAO_ECF, "NumProxIdent", NOME_ARQUIVO_CAIXA)
    
        Case 133775, 133776, 133829, 204286
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149355)

    End Select
    
    Exit Function
         
End Function

Function TEF_Imprime_Doc(ByVal objVenda As Object, ByVal objTela As Object, ByVal sTipoDoc As String, Optional ByVal sNomeArq As String = "") As Long

Dim lErro As Long
Dim sNomeArq1 As String
Dim objTEF As New ClassTEF

On Error GoTo Erro_TEF_Imprime_Doc

    lErro = TEF_Copia(objVenda, sTipoDoc, objTEF)
    
    'o tef dedicado confirma todos os cartoes no final
    
    If giTipoTEF = TIPOTEF_DISC Then
    
    
        'se copiou corretamente
        If lErro = SUCESSO Then
        
            lErro = TEF_Confirma_Transacao
            If lErro <> SUCESSO Then gError 133772
        
            If Len(sNomeArq) > 0 Then
                
                ECF_Apaga_Arquivo sNomeArq
            
                sNomeArq = left(sNomeArq, Len(sNomeArq) - 3) & "txt"
            
                sNomeArq1 = Dir(sNomeArq)
                If Len(sNomeArq1) > 0 Then ECF_Apaga_Arquivo sNomeArq
        
            End If
        
        Else
        
            lErro = TEF_NaoConfirma_Transacao(objTela)
            If lErro <> SUCESSO Then gError 133773
        
        End If
    
    End If
    
    TEF_Imprime_Doc = SUCESSO

    Exit Function

Erro_TEF_Imprime_Doc:

    TEF_Imprime_Doc = gErr
    
    Select Case gErr
    
        Case 133772, 133773
    
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149356)
    
    End Select

    Exit Function

End Function

Private Function TEF_Copia(ByVal objVenda As ClassVenda, ByVal sTipoDoc As String, ByVal objTEF As ClassTEF) As Long

Dim lErro As Long
Dim sNomeArqOrig As String
Dim sNomeArqDest As String
Dim sLinha As String
Dim sArquivoINTPOS As String
Dim iIndice As Integer

On Error GoTo Erro_TEF_Copia

    sNomeArqOrig = gsDirMVTEF & Arquivo_Tef_Imp_Prop
    
    If Len(Dir(sNomeArqOrig)) = 0 Then gError 133771

    Open sNomeArqOrig For Input As #1

    If LOF(1) > 0 Then

        iIndice = 0
    
        Do While True
    
            iIndice = iIndice + 1
    
            If Not AFRAC_ImpressoraCFe(giCodModeloECF) Or objVenda.objCupomFiscal.lNumero <> 0 Then
                sNomeArqDest = gsDirMVTEF & "TEF_" & objVenda.objCupomFiscal.lNumero & "_" & CStr(iIndice) & "_" & sTipoDoc & ".txt"
            Else
                sNomeArqDest = gsDirMVTEF & "TEF_" & objVenda.objNFeInfo.lNFCeProximoNum & "_" & CStr(iIndice) & "_" & sTipoDoc & ".txt"
            End If
            
            If Len(Dir(sNomeArqDest)) = 0 Then Exit Do
            
        Loop
    
        objVenda.colIndiceImpCheque.Add iIndice
    
        Open sNomeArqDest For Append As #2
    
        sLinha = objTEF.iViasComprovante & objTEF.sComando & Format(objTEF.iTamViaCliente, "000") & Format(objTEF.iTamViaEstab, "000") & Format(objTEF.iTamReduzido, "000") & Format(objTEF.iTamViaUnica, "000") & objTEF.iStatusConfirmacao & Formata_Campo(ALINHAMENTO_DIREITA, 8, " ", objTEF.sRede) & Formata_Campo(ALINHAMENTO_DIREITA, 12, " ", objTEF.sNSU) & Formata_Campo(ALINHAMENTO_ESQUERDA, 12, "0", objTEF.dValorTotal * 100)
    
        Print #2, sLinha
    
        Do While Not EOF(1)
        
            Line Input #1, sLinha
    
            Print #2, sLinha
            
        Loop
        
        Close #1
        Close #2
    
'        If sTipoDoc = "VIAUNICA" Then
'
'            sNomeArqDest = gsDirMVTEF & "TEF_" & objVenda.objCupomFiscal.lNumero & "_" & CStr(iIndice) & ".rsp"
'
'            sArquivoINTPOS = Dir(Arquivo_Tef_Resp2_Prop)
'            If sArquivoINTPOS <> "" Then FileCopy Arquivo_Tef_Resp2_Prop, sNomeArqDest
'
'        End If
    
    Else
    
        Close #1
    
    End If
    
    ECF_Apaga_Arquivo sNomeArqOrig
    
    TEF_Copia = SUCESSO

    Exit Function

Erro_TEF_Copia:

    Close #1
    Close #2

    TEF_Copia = gErr
    
    Select Case gErr
    
        Case 133771
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO2, gErr, sNomeArqOrig)
    
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149357)
    
    End Select

    Exit Function

End Function

Function TEF_Imprime_CNC(ByVal objMsg As Object, ByVal objTela As Object) As Long

Dim lErro As Long
Dim sNomeArq As String
Dim sLinha As String
Dim sSaltaLinha As String
Dim sConteudo As String
Dim vbMsg As VbMsgBoxResult
Dim sRetorno As String
Dim lTamanho As Long


On Error GoTo Erro_TEF_Imprime_CNC

'    lTamanho = 10
'    sRetorno = String(lTamanho, 0)
'
'    Call GetPrivateProfileString(APLICACAO_ECF, "CancelamentoTEF", CONSTANTE_ERRO, sRetorno, lTamanho, NOME_ARQUIVO_CAIXA)
'
'    If sRetorno <> String(lTamanho, 0) Then
'
'        sRetorno = StringZ(sRetorno)
'
'        If sRetorno = TEF_CANCELAMENTO Then
'
'            Call WritePrivateProfileString(APLICACAO_ECF, "CancelamentoTEF", TEF_CANCELAMENTO_IMPRESSAO, NOME_ARQUIVO_CAIXA)
        
            'imprime gerencial
            lErro = TEF_Imprime_Gerencial(objMsg, objTela)
            
            vbMsg = vbYes
            
            'se nao conseguiu imprimir os comprovantes e quer continuar tentando
            Do While vbMsg = vbYes And lErro <> SUCESSO
            
                vbMsg = Rotina_AvisoECF(vbYesNo, "Impressora não responde, tentar novamente?")
                
                If vbMsg = vbYes Then
                
                    'imprime gerencial
                    lErro = TEF_Imprime_Gerencial(objMsg, objTela)
                
                End If
        
            Loop
            
            'se imprimiu corretamente
            If lErro = SUCESSO Then
            
                lErro = TEF_Confirma_Transacao
                If lErro <> SUCESSO Then gError 133820
            
            Else
            
                lErro = TEF_NaoConfirma_Transacao(objTela)
                If lErro <> SUCESSO Then gError 133821
            
                gError 133822
            
            End If
            
'            Call WritePrivateProfileString(APLICACAO_ECF, "CancelamentoTEF", "", NOME_ARQUIVO_CAIXA)
'
'        End If
'
'    End If
    
    TEF_Imprime_CNC = SUCESSO

    Exit Function

Erro_TEF_Imprime_CNC:

    TEF_Imprime_CNC = gErr
    
    Select Case gErr
    
        Case 133820, 133821, 133822
    
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149358)
    
    End Select

End Function

Function TEF_CNC(ByVal objVenda As ClassVenda, ByVal objMsg As Object, ByVal objTela As Object) As Long

Dim lErro As Long
Dim sNomeArq1 As String
Dim sNomeArq As String
Dim objTEF As New ClassTEF
Dim sReg As String
Dim sNomeArq2 As String

On Error GoTo Erro_TEF_CNC

    sNomeArq1 = gsDirMVTEF & "TEF_" & objVenda.objCupomFiscal.lNumero & "_" & "CPV" & "_" & "*" & ".rsp"
        
    sNomeArq = Dir(sNomeArq1)

    Do While Len(sNomeArq) > 0

        'Abre o arquivo do comprovante de venda
        Open gsDirMVTEF & sNomeArq For Input As #1

        'Abre o arquivo Temporário
        Open Arquivo_Tef_Temp_Prop For Append As #2

        'Adiciona na variável global
        glNumProxIdentificacao = glNumProxIdentificacao + 1
        
        'Atualiza o arquivo
        lErro = WritePrivateProfileString(APLICACAO_ECF, "NumProxIdent", CStr(glNumProxIdentificacao), NOME_ARQUIVO_CAIXA)
        If lErro = 0 Then gError 214596

        'funcao que cria/altera a chave e grava no caixaconfig.ini
        lErro = CF_ECF("CaixaConfig_Chave")
        If lErro <> SUCESSO Then gError 204287

        Print #2, "000-000 = CNC"
        Print #2, "001-000 = " & CStr(glNumProxIdentificacao)

        'Até chegar ao fim do arquivo
        Do While Not EOF(1)

            'Busca o próximo registro do arquivo
            Line Input #1, sReg

            Select Case Mid(sReg, 1, 7)
            
                Case "002-000", "003-000", "005-000", "006-000", "007-000", "008-000", _
                "010-000", "012-000", "022-000", "023-000", "033-000", "034-000", "035-000", "036-000", "037-000", "038-000", "039-000", "999-999"
                    Print #2, sReg

            End Select

        Loop

        Close #1
        Close #2

        'renomeando os arquivos
        FileCopy Arquivo_Tef_Temp_Prop, Arquivo_Tef_Req_Prop
        
        ECF_Apaga_Arquivo Arquivo_Tef_Temp_Prop
        
        lErro = TEF_Trata_Resp(objTEF, objMsg, objTela)
        If lErro <> SUCESSO Then gError 133798

'        lErro = CF_ECF("TEF_Imprime_Doc", objVenda, objTela, "CNC", gsDirMVTEF & sNomeArq)
'        If lErro <> SUCESSO Then gError 133799
'
'        'Indica que ha cancelamento a ser impresso
'        Call WritePrivateProfileString(APLICACAO_ECF, "CancelamentoTEF", TEF_CANCELAMENTO, NOME_ARQUIVO_CAIXA)

        lErro = TEF_Imprime_CNC(objMsg, objTela)
        If lErro <> SUCESSO And lErro <> 133822 Then gError 133799

        If lErro = SUCESSO Then

            ECF_Apaga_Arquivo gsDirMVTEF & sNomeArq
    
            sNomeArq = Dir

        End If

    Loop

    TEF_CNC = SUCESSO

    Exit Function

Erro_TEF_CNC:

    TEF_CNC = gErr

    Close #1
    Close #2

    If objTEF.iTransacao = 1 Then

        'venda foi consumada ==> NCF
        Call TEF_NaoConfirma_Transacao(objTela)

    End If

    'Indica que a nao confirmacao foi completada para caso cair a energia
    Call WritePrivateProfileString(APLICACAO_ECF, "StatusTEF", "", NOME_ARQUIVO_CAIXA)

    'funcao que cria/altera a chave e grava no caixaconfig.ini
    lErro = CF_ECF("CaixaConfig_Chave")

    Select Case gErr

        Case 53
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO2, gErr)

        Case 133798, 133799, 204287

        Case 214596
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, APLICACAO_ECF, "NumProxIdent", NOME_ARQUIVO_CAIXA)

        Case Else

            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149359)

    End Select

    Exit Function

End Function

Function TEF_PreAutorizacao(ByVal dPagTEF As Double, ByVal objMsg As Object, ByVal objTela As Object) As Long
    
Dim lErro As Long
Dim objParcela As New ClassCarneParcelas
Dim objMovCaixa As New ClassMovimentoCaixa
Dim objCheque As New ClassChequePre
Dim objAdmMeioPagto As New ClassAdmMeioPagto
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim bAchouAdm As Boolean
Dim sArquivoSTS As String
Dim sArquivoINTPOS As String
Dim objTEF As New ClassTEF

On Error GoTo Erro_TEF_PreAutorizacao
    
    sArquivoSTS = Dir(Arquivo_Tef_Resp1_Prop)
    If sArquivoSTS <> "" Then ECF_Apaga_Arquivo Arquivo_Tef_Resp1_Prop

    sArquivoINTPOS = Dir(Arquivo_Tef_Resp2_Prop)
    If sArquivoINTPOS <> "" Then ECF_Apaga_Arquivo Arquivo_Tef_Resp2_Prop
        
    'Adiciona na variável global
    glNumProxIdentificacao = glNumProxIdentificacao + 1
    
    'Atualiza o arquivo
    lErro = WritePrivateProfileString(APLICACAO_ECF, "NumProxIdent", CStr(glNumProxIdentificacao), NOME_ARQUIVO_CAIXA)
    If lErro = 0 Then gError 133833
        
    'funcao que cria/altera a chave e grava no caixaconfig.ini
    lErro = CF_ECF("CaixaConfig_Chave")
    If lErro <> SUCESSO Then gError 204288
        
    'Abre o arquivo Temporário
    Open Arquivo_Tef_Temp_Prop For Append As #1
    
    'Informa dados de pagamento
    Print #1, "000-000 = PRE"
    Print #1, "001-000 = " & CStr(glNumProxIdentificacao)
    Print #1, "003-000 = " & dPagTEF * 100
    Print #1, "501-001 = " & "1101" & String(56, "0")
    Print #1, "999-999 = 0"
    
    Close #1
    
    'renomeando os arquivos
    FileCopy Arquivo_Tef_Temp_Prop, Arquivo_Tef_Req_Prop
    
    ECF_Apaga_Arquivo Arquivo_Tef_Temp_Prop
    
    lErro = TEF_Trata_Resp(objTEF, objMsg, objTela)
    If lErro <> SUCESSO Then gError 133834
    
    lErro = TEF_Imprime_ADM(objMsg, objTela)
    If lErro <> SUCESSO Then gError 133835
    
    TEF_PreAutorizacao = SUCESSO

    Exit Function
    
Erro_TEF_PreAutorizacao:
    
    TEF_PreAutorizacao = gErr
    
    Select Case gErr
    
        Case 53
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO2, gErr)
    
        Case 133833
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, APLICACAO_ECF, "NumProxIdent", NOME_ARQUIVO_CAIXA)
    
        Case 133834, 133835, 204288
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149360)

    End Select
    
    Exit Function
         
End Function

Function TEF_Fininvest(ByVal dPagTEF As Double, ByVal objMsg As Object, ByVal objTela As Object) As Long
    
Dim lErro As Long
Dim objParcela As New ClassCarneParcelas
Dim objMovCaixa As New ClassMovimentoCaixa
Dim objCheque As New ClassChequePre
Dim objAdmMeioPagto As New ClassAdmMeioPagto
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim bAchouAdm As Boolean
Dim sArquivoSTS As String
Dim sArquivoINTPOS As String
Dim objTEF As New ClassTEF

On Error GoTo Erro_TEF_Fininvest
    
    sArquivoSTS = Dir(Arquivo_Tef_Resp1_Prop)
    If sArquivoSTS <> "" Then ECF_Apaga_Arquivo Arquivo_Tef_Resp1_Prop

    sArquivoINTPOS = Dir(Arquivo_Tef_Resp2_Prop)
    If sArquivoINTPOS <> "" Then ECF_Apaga_Arquivo Arquivo_Tef_Resp2_Prop
        
    'Adiciona na variável global
    glNumProxIdentificacao = glNumProxIdentificacao + 1
    
    'Atualiza o arquivo
    lErro = WritePrivateProfileString(APLICACAO_ECF, "NumProxIdent", CStr(glNumProxIdentificacao), NOME_ARQUIVO_CAIXA)
    If lErro = 0 Then gError 133839
        
    'funcao que cria/altera a chave e grava no caixaconfig.ini
    lErro = CF_ECF("CaixaConfig_Chave")
    If lErro <> SUCESSO Then gError 204289
        
    'Abre o arquivo Temporário
    Open Arquivo_Tef_Temp_Prop For Append As #1
    
    'Informa dados de pagamento
    Print #1, "000-000 = CRT"
    Print #1, "001-000 = " & CStr(glNumProxIdentificacao)
    Print #1, "003-000 = " & dPagTEF * 100
    Print #1, "501-001 = " & String(31, "0") & "111" & String(26, "0")
    Print #1, "999-999 = 0"
    
    Close #1
    
    'renomeando os arquivos
    FileCopy Arquivo_Tef_Temp_Prop, Arquivo_Tef_Req_Prop
    
    ECF_Apaga_Arquivo Arquivo_Tef_Temp_Prop
    
    lErro = TEF_Trata_Resp(objTEF, objMsg, objTela)
    If lErro <> SUCESSO Then gError 133840
    
    lErro = TEF_Imprime_ADM(objMsg, objTela)
    If lErro <> SUCESSO Then gError 133841
    
    TEF_Fininvest = SUCESSO

    Exit Function
    
Erro_TEF_Fininvest:
    
    TEF_Fininvest = gErr
    
    Select Case gErr
    
        Case 53
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO2, gErr)
    
        Case 133839
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, APLICACAO_ECF, "NumProxIdent", NOME_ARQUIVO_CAIXA)
    
        Case 133840, 133841, 204289
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149361)

    End Select
    
    Exit Function
         
End Function

Function TEF_Imprime_Gerencial2(ByVal objMsg As Object, ByVal objTela As Object, Optional ByVal objVenda As ClassVenda) As Long

Dim lErro As Long
Dim sNomeArq As String
Dim lTamanho As Long
Dim sRetorno As String

On Error GoTo Erro_TEF_Imprime_Gerencial2

    objTela.objParent.SetFocus

    If Not objVenda Is Nothing Then

        sNomeArq = Dir(gsDirMVTEF & "TEF_" & objVenda.objCupomFiscal.lNumero & "_" & "*.txt")
        
        If Len(sNomeArq) > 0 Then
        
            'bloqueio o mouse e teclado
'            Call AFRAC_BloqueiaTecladoMouse
            
            lErro = TEF_Libera_Impressora(objTela)
        
            If lErro = SUCESSO Then
        
                lErro = AFRAC_AbrirRelatorioGerencial(RELGER_COMPROVANTE_TEF, objTela)
                lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Abre Comprovante TEF")
                If lErro <> SUCESSO Then gError 133856
            
            
                If Not objVenda Is Nothing Then
        
                    sNomeArq = Dir(gsDirMVTEF & "TEF_" & objVenda.objCupomFiscal.lNumero & "_" & "*.txt")
                    
                    Do While Len(sNomeArq) > 0
        
                        lErro = TEF_Imprime_Gerencial1(objMsg, objTela, gsDirMVTEF & sNomeArq)
                        If lErro <> SUCESSO Then gError 133857
        
                        sNomeArq = Dir
        
                    Loop
        
                End If
            
                'fecha vinculado
                lErro = AFRAC_FecharRelatorioGerencial(objTela)
                lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Fechar Rel. Gerencial")
                If lErro <> SUCESSO Then gError 133858
                
                If Not objVenda Is Nothing Then
        
                    sNomeArq = "a"
        
                    Do While Len(sNomeArq) > 0
        
                        sNomeArq = Dir(gsDirMVTEF & "TEF_" & objVenda.objCupomFiscal.lNumero & "_" & "*.txt")
                        
                        If Len(sNomeArq) > 0 Then ECF_Apaga_Arquivo gsDirMVTEF & sNomeArq
        
                    Loop
        
                End If
                
                
            End If
        
            'desbloqueia mouse e teclado
            Call AFRAC_DesbloqueiaTecladoMouse

        End If
        
    End If

    TEF_Imprime_Gerencial2 = SUCESSO

    Exit Function

Erro_TEF_Imprime_Gerencial2:

    TEF_Imprime_Gerencial2 = gErr
    
    Select Case gErr
    
        Case 133856, 133857, 133858
            Call AFRAC_DesbloqueiaTecladoMouse
    
        Case Else
            Call AFRAC_DesbloqueiaTecladoMouse
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149362)
    
    End Select

    Exit Function

End Function

Function TEF_CNF_NCN_Pendente() As Long

Dim iTentativas As Integer
Dim sArqCNF_NCN As String
Dim sArqSTS As String

On Error GoTo Erro_TEF_CNF_NCN_Pendente

    If giTipoTEF = TIPOTEF_SITEF Then

        'verifica se tem a confirmacao/nao confirmacao da transacao anterior guardada
        sArqCNF_NCN = Dir(Arquivo_Tef_Req_Backup1_Prop)
        
        'se tiver ==> reenvia
        If sArqCNF_NCN <> "" Then
            
            'verifica se tem algum STS antigo guardado, se tiver elimina
            sArqSTS = Dir(Arquivo_Tef_Resp1_Prop)
            If sArqSTS <> "" Then

                'elimina o arquivo sts da transacao atual
                ECF_Apaga_Arquivo Arquivo_Tef_Resp1_Prop
            
            End If
        
            'reenvia a cnf/ncn da ultima transacao
            FileCopy Arquivo_Tef_Req_Backup1_Prop, Arquivo_Tef_Req_Prop
            
            For iTentativas = 1 To 7
            
                sArqSTS = Dir(Arquivo_Tef_Resp1_Prop)
                If sArqSTS <> "" Then
                    ECF_Apaga_Arquivo Arquivo_Tef_Resp1_Prop
                    ECF_Apaga_Arquivo Arquivo_Tef_Req_Backup1_Prop
                    Exit For
                End If
            
                Sleep 1000
                
            Next
        
            If iTentativas > 7 Then gError 126574
        
        End If
        
        'verifica se tem a confirmacao/nao confirmacao da transacao anterior guardada
        sArqCNF_NCN = Dir(Arquivo_Tef_Req_Backup2_Prop)
        
        'se tiver ==> reenvia
        If sArqCNF_NCN <> "" Then
            
            'verifica se tem algum STS antigo guardado, se tiver elimina
            sArqSTS = Dir(Arquivo_Tef_Resp1_Prop)
            If sArqSTS <> "" Then

                'elimina o arquivo sts da transacao atual
                ECF_Apaga_Arquivo Arquivo_Tef_Resp1_Prop
            
            End If
        
            'reenvia a cnf/ncn da ultima transacao
            FileCopy Arquivo_Tef_Req_Backup2_Prop, Arquivo_Tef_Req_Prop
            
            For iTentativas = 1 To 7
            
                sArqSTS = Dir(Arquivo_Tef_Resp1_Prop)
                If sArqSTS <> "" Then
                    ECF_Apaga_Arquivo Arquivo_Tef_Resp1_Prop
                    ECF_Apaga_Arquivo Arquivo_Tef_Req_Backup2_Prop
                    Exit For
                End If
            
                Sleep 1000
                
            Next
        
            If iTentativas > 7 Then gError 126590
        
        End If
        
    End If

    TEF_CNF_NCN_Pendente = SUCESSO

    Exit Function

Erro_TEF_CNF_NCN_Pendente:

    TEF_CNF_NCN_Pendente = gErr
    
    Select Case gErr
    
        Case 126574, 126590
            Call Rotina_ErroECF(vbOKOnly, ERRO_SITEF_NAO_ATIVO, gErr)
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149363)
    
    End Select

    Exit Function

End Function

Function TEF_NaoConfirma_Transacao1(ByVal objTela As Object, objVenda As ClassVenda) As Long

Dim lErro As Long
Dim iSitefNaoRespondeu1 As Integer
Dim iSitefNaoRespondeu As Integer
Dim sNomeArq As String
Dim sNomeArq1 As String
Dim sNomeArqBack As String

On Error GoTo Erro_TEF_NaoConfirma_Transacao1

    lErro = TEF_NaoConfirma_Transacao(objTela, 1, iSitefNaoRespondeu1)
    If lErro <> SUCESSO Then gError 126578
    
    iSitefNaoRespondeu = iSitefNaoRespondeu1
    
    If giTipoTEF = TIPOTEF_SITEF Then
    
        sNomeArq1 = gsDirMVTEF & "TEF_" & objVenda.objCupomFiscal.lNumero & "_" & "CPV" & "_" & "*" & ".rsp"
    
        sNomeArq = Dir(sNomeArq1)
    
        Do While Len(sNomeArq) > 0
    
            If giTipoTEF = TIPOTEF_SITEF Then
                
                FileCopy gsDirMVTEF & sNomeArq, Arquivo_Tef_Resp2_Prop
                
                iSitefNaoRespondeu1 = 0
    
                lErro = TEF_NaoConfirma_Transacao(objTela, 1, iSitefNaoRespondeu1)
                If lErro <> SUCESSO Then gError 126579
                
                iSitefNaoRespondeu = iSitefNaoRespondeu + iSitefNaoRespondeu1
                
            End If
    
            If iSitefNaoRespondeu1 = 0 Then ECF_Apaga_Arquivo gsDirMVTEF & sNomeArq
            
            sNomeArq = Dir
            
        Loop
            
    End If

    If giTipoTEF = TIPOTEF_SITEF And iSitefNaoRespondeu = 0 Then
        Call Rotina_AvisoECF(vbOKOnly, ERRO_SITEF_TRN_NAO_EFETUADA)
    End If

    lErro = TEF_Libera_Impressora(objTela)
    If lErro <> SUCESSO Then gError 126580

    If iSitefNaoRespondeu = 0 Then
    
        'Indica que a nao confirmacao foi completada para caso cair a energia
        lErro = WritePrivateProfileString(APLICACAO_ECF, "StatusTEF", "", NOME_ARQUIVO_CAIXA)
        If lErro = 0 Then gError 126581
    
        'funcao que cria/altera a chave e grava no caixaconfig.ini
        lErro = CF_ECF("CaixaConfig_Chave")
        If lErro <> SUCESSO Then gError 204290
    
    End If

    TEF_NaoConfirma_Transacao1 = SUCESSO

    Exit Function

Erro_TEF_NaoConfirma_Transacao1:

    TEF_NaoConfirma_Transacao1 = gErr
    
    Select Case gErr
    
        Case 126578, 126579, 126580, 204290
    
        Case 126581
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, APLICACAO_ECF, "StatusTEF", NOME_ARQUIVO_CAIXA)
    
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149364)
    
    End Select
    
    Exit Function

End Function

Function TEF_Confirma_Transacao1(objVenda As ClassVenda) As Long

Dim lErro As Long
Dim sNomeArq As String
Dim sNomeArq1 As String
Dim iSitefNaoRespondeu As Integer
Dim iSitefNaoRespondeu1 As Integer
Dim sNomeArqBack As String

On Error GoTo Erro_TEF_Confirma_Transacao1

    lErro = TEF_Confirma_Transacao(1, iSitefNaoRespondeu1)
    If lErro <> SUCESSO Then gError 126583

    iSitefNaoRespondeu = iSitefNaoRespondeu1

    sNomeArq1 = gsDirMVTEF & "TEF_" & objVenda.objCupomFiscal.lNumero & "_" & "CPV" & "_" & "*" & ".rsp"
        
    sNomeArq = Dir(sNomeArq1)

    Do While Len(sNomeArq) > 0
    
        'rotina colocada para confirmar todos os comprovantes em multiplos cartoes
            
        If giTipoTEF = TIPOTEF_SITEF Then
            
            FileCopy gsDirMVTEF & sNomeArq, Arquivo_Tef_Resp2_Prop

            iSitefNaoRespondeu1 = 0

            lErro = TEF_Confirma_Transacao(1, iSitefNaoRespondeu1)
            If lErro <> SUCESSO Then gError 126584
            
            iSitefNaoRespondeu = iSitefNaoRespondeu + iSitefNaoRespondeu1
            
        End If

        If iSitefNaoRespondeu1 = 0 Then ECF_Apaga_Arquivo gsDirMVTEF & sNomeArq
        
        sNomeArq = Dir
            
    Loop

    If iSitefNaoRespondeu = 0 Then
    
        'Atualiza o arquivo
        lErro = WritePrivateProfileString(APLICACAO_ECF, "StatusTEF", "", NOME_ARQUIVO_CAIXA)
        If lErro = 0 Then gError 126585
    
        'funcao que cria/altera a chave e grava no caixaconfig.ini
        lErro = CF_ECF("CaixaConfig_Chave")
        If lErro <> SUCESSO Then gError 204291
        
    End If
    
    TEF_Confirma_Transacao1 = SUCESSO

    Exit Function

Erro_TEF_Confirma_Transacao1:

    TEF_Confirma_Transacao1 = gErr
    
    Select Case gErr
    
        Case 126583, 126584, 204291
    
        Case 126585
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, APLICACAO_ECF, "StatusTEF", NOME_ARQUIVO_CAIXA)
    
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149365)
    
    End Select

End Function

Function TEF_NaoConfirma_Transacao2(ByVal objTela As Object, objVenda As ClassVenda) As Long
'**** falta acertar a numeracao de erro *****

Dim lErro As Long
Dim iSitefNaoRespondeu1 As Integer
Dim iSitefNaoRespondeu As Integer
Dim sNomeArq As String
Dim sNomeArq1 As String
Dim sNomeArqBack As String
Dim sNomeArqDest As String

On Error GoTo Erro_TEF_NaoConfirma_Transacao2

    If giTipoTEF = TIPOTEF_SITEF Then
    
        sNomeArq1 = gsDirMVTEF & "TEF_" & objVenda.objCupomFiscal.lNumero & "_" & "CPV" & "_" & "*" & ".rsp"
        
        sNomeArq = Dir(sNomeArq1)
    
        Do While Len(sNomeArq) > 0
    
            If giTipoTEF = TIPOTEF_SITEF Then
                
                FileCopy gsDirMVTEF & sNomeArq, Arquivo_Tef_Resp2_Prop
                
                iSitefNaoRespondeu1 = 0
    
                lErro = TEF_NaoConfirma_Transacao(objTela, 1, iSitefNaoRespondeu1)
                If lErro <> SUCESSO Then gError 126591
                
                iSitefNaoRespondeu = iSitefNaoRespondeu + iSitefNaoRespondeu1
                
            End If
    
            If iSitefNaoRespondeu1 = 0 Then ECF_Apaga_Arquivo gsDirMVTEF & sNomeArq
            
            sNomeArq = Dir
            
        Loop
            
        sNomeArqDest = Dir(gsDirMVTEF & "TEF_" & objVenda.objCupomFiscal.lNumero & "_" & "CPV" & "_" & "*" & ".txt")
        
        Do While Len(sNomeArqDest) > 0
            
            ECF_Apaga_Arquivo gsDirMVTEF & sNomeArqDest
            
            sNomeArqDest = Dir
            
        Loop
            
        If iSitefNaoRespondeu = 0 Then
        
            'Indica que a nao confirmacao foi completada para caso cair a energia
            lErro = WritePrivateProfileString(APLICACAO_ECF, "StatusTEF", "", NOME_ARQUIVO_CAIXA)
            If lErro = 0 Then gError 126592
        
            'funcao que cria/altera a chave e grava no caixaconfig.ini
            lErro = CF_ECF("CaixaConfig_Chave")
            If lErro <> SUCESSO Then gError 204292
            
        End If

    End If
    TEF_NaoConfirma_Transacao2 = SUCESSO

    Exit Function

Erro_TEF_NaoConfirma_Transacao2:

    TEF_NaoConfirma_Transacao2 = gErr
    
    Select Case gErr
    
        Case 126591, 204292
    
        Case 126592
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, APLICACAO_ECF, "StatusTEF", NOME_ARQUIVO_CAIXA)
    
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149366)
    
    End Select
    
    Exit Function

End Function

Function Retorna_Prox_Orcamento(objOrcamento As Object, objVenda As ClassVenda) As Long
    Retorna_Prox_Orcamento = SUCESSO
End Function

Function Inicializa_Sessao(Optional ByVal bAbrir As Boolean = False) As Long
    
Dim lErro As Long

On Error GoTo Erro_Inicializa_Sessao


    'Se o caixa estava suspenso --> chama a tela de Operador Login
    If giStatusSessao = SESSAO_ABERTA Then
    
        'Função que Executa o Encerramento da Sessão
        lErro = CF_ECF("Sessao_Executa_Suspensao")
        If lErro <> SUCESSO Then gError 99830

        'funcao que executa o termino da suspensao se a senha for digitada.
        lErro = CF_ECF("Sessao_Executa_Termino_Susp")
        If lErro <> SUCESSO Then gError 117543

    ElseIf giStatusSessao = SESSAO_SUSPENSA Or bAbrir Then

        If bAbrir Then giCodOperador = 0
        
        'funcao que executa o termino da suspensao se a senha for digitada.
        lErro = CF_ECF("Sessao_Executa_Termino_Susp")
        If lErro <> SUCESSO Then gError 117538

    End If

    Inicializa_Sessao = SUCESSO

    Exit Function

Erro_Inicializa_Sessao:

    Inicializa_Sessao = gErr
    
    Select Case gErr
    
        Case 99830, 117538, 117543
    
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 199542)
    
    End Select
    
    Exit Function

End Function


Private Function Adiciona_Cupom(objItens As ClassItemCupomFiscal) As Long
'Pega o produto que deve estar em ProdutoNomeRed - PAFECF

Dim lErro As Long
Dim bAchou As Boolean
Dim objProduto As ClassProduto
Dim objProduto1 As TextBox
Dim lNum As Long
Dim lNumero As Long
Dim objAliquota As New ClassAliquotaICMS
Dim objCliente As ClassCliente
Dim sCPF As String
Dim sRet As String
Dim lErro1 As Long
Dim sPrecoItem As String
Dim sAliquota As String
Dim sPeso As String
Dim sPrecoKilo As String
Dim sPrecoTotal As String
Dim objAliquota1 As ClassAliquotaICMS
Dim iTotalizador As Integer
Dim sProduto As String

On Error GoTo Erro_Adiciona_Cupom
    
'    If gobjVenda.iTipo = 0 Then gError 126815
'
'    giItem = gobjVenda.objCupomFiscal.colItens.Count + 1
    
'    sProduto = objItens.sProdutoNomeRed
'
'    Call TP_Produto_Le_Col(gaobjProdutosReferencia, gaobjProdutosCodBarras, gaobjProdutosNome, sProduto, objProduto)
            
    'caso o produto não seja encontrado
'    If objProduto Is Nothing Then gError 99884
        
    
'    For Each objAliquota In gcolAliquotasTotal
'        If objAliquota.sSigla = objProduto.sICMSAliquota Then
'            objItens.dAliquotaICMS = objAliquota.dAliquota
'            Exit For
'        End If
'    Next
    
'    objItens.dQuantidade = StrParaDbl(Quantidade.Text)
'    objItens.dPrecoUnitario = objProduto.dPrecoLoja
'    objItens.sUnidadeMed = objProduto.sSiglaUMVenda
'    objItens.sSituacaoTrib = objProduto.sSituacaoTribECF
'    objItens.sProduto = objProduto.sCodigo
'    objItens.sProdutoNomeRed = objProduto.sNomeReduzido
    
'    objItens.iItem = giItem
'    objItens.icancel = ITEM_NORMAL
        

'    'Vende o item
'    If objItens.dAliquotaICMS > 0 Then
'        If objProduto.sSituacaoTribECF = TIPOTRIBISS_SITUACAOTRIBECF_INTEGRAL Then
'            sAliquota = TIPOTRIBISS_SITUACAOTRIBECF_INTEGRAL & Format(objItens.dAliquotaICMS * 10000, "0000")
'        Else
'            sAliquota = Format(objItens.dAliquotaICMS * 10000, "0000")
'        End If
'    Else
'       sAliquota = objProduto.sSituacaoTribECF
'    End If
    
    'Vende o item
'    If objItens.dAliquotaICMS > 0 Then
'        If objProduto.sSituacaoTribECF = TIPOTRIBISS_SITUACAOTRIBECF_INTEGRAL Then
'
'            sAliquota = TIPOTRIBISS_SITUACAOTRIBECF_INTEGRAL & Format(objItens.dAliquotaICMS * 10000, "0000")
'
''            For Each objAliquota1 In gobjLojaECF.colAliquotaICMS
''                If objAliquota1.iISS = 1 And objItens.dAliquotaICMS = objAliquota1.dAliquota Then
''                    Exit For
''                End If
''                iTotalizador = iTotalizador + 1
''            Next
''
''            objItens.sSituacaoTrib = Format(iTotalizador, "00") & sAliquota
'            objItens.sSituacaoTrib = sAliquota
'
'        Else
'
''            For Each objAliquota1 In gobjLojaECF.colAliquotaICMS
''                If objAliquota1.iISS = 0 And objItens.dAliquotaICMS = objAliquota1.dAliquota Then
''                    Exit For
''                End If
''                iTotalizador = iTotalizador + 1
''            Next
'
'            sAliquota = Format(objItens.dAliquotaICMS * 10000, "0000")
''            objItens.sSituacaoTrib = Format(iTotalizador, "00") & TIPOTRIBICMS_SITUACAOTRIBECF_INTEGRAL & sAliquota
'            objItens.sSituacaoTrib = TIPOTRIBICMS_SITUACAOTRIBECF_INTEGRAL & sAliquota
'
'        End If
'    Else
'        sAliquota = left(objProduto.sSituacaoTribECF, 1)
'        objItens.sSituacaoTrib = sAliquota & "1"
'
'    End If
    
    If objItens.dAliquotaICMS > 0 Then
        sAliquota = objItens.sSituacaoTrib
    Else
        sAliquota = left(objItens.sSituacaoTrib, 1)
    End If
    
'    lErro = AFRAC_VenderItem(objProduto.sCodigo, objProduto.sDescricao, objItens.dQuantidade, Format(objItens.dPrecoUnitario, "standard"), 1, 1, objItens.dValorDesconto, StrParaDbl(Format(StrParaDbl(Format(objItens.dQuantidade, "0.000")) * StrParaDbl(Format(objItens.dPrecoUnitario, "standard")), "Standard")), sAliquota, objItens.sUnidadeMed, False)
    lErro = AFRAC_VenderItem(objItens.sProduto, objItens.sProdutoNomeRed, objItens.dQuantidade, Format(objItens.dPrecoUnitario, "standard"), 1, 1, objItens.dValorDesconto, StrParaDbl(Format(StrParaDbl(Format(objItens.dQuantidade, "0.000")) * StrParaDbl(Format(objItens.dPrecoUnitario, "standard")), "Standard")), sAliquota, objItens.sUnidadeMed, False)
    lErro1 = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Vender Item")
    If lErro1 <> SUCESSO Then gError 99912
        
    lErro = CF_ECF("Requisito_XXII_AtualizaGT")
    If lErro <> SUCESSO Then gError 210424
        
    Adiciona_Cupom = SUCESSO
    
    Exit Function

Erro_Adiciona_Cupom:
    
    Adiciona_Cupom = gErr
    
    Select Case gErr
                
        Case 99607
            lErro = Rotina_ErroECF(vbOKOnly, ERRO_FIGURA_INVALIDO, gErr, objProduto.sFigura)
                    
        Case 99818, 99884
        
        Case 99912, 133754, 210424
        
        Case 126815
            Call Rotina_ErroECF(vbOKOnly, ERRO_TIPOCF_NAO_ESCOLHIDO, gErr)
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 175690)

    End Select
    
    Exit Function
    
End Function

Function Imprime_Orcamento(objVenda As ClassVenda) As Long
'PAFECF - É a funcao que imprime os orcamentos pendentes automaticamente e baixa-os

Dim lErro As Long
Dim iIndice As Integer
Dim objVendaAux As ClassVenda
Dim colItens As New Collection
Dim colItens1 As New Collection
Dim objItens As ClassItemCupomFiscal
Dim sIndice As String
Dim objTiposMeioPagto As ClassTMPLoja
Dim sDesc As String
Dim sOrcamento As String
Dim colOrcamento As New Collection
Dim sCPF As String
Dim lNumero As Long
Dim sMsg As String
Dim objProduto As ClassProduto
Dim lSequencial As Long
Dim lSequencialOrc As Long

On Error GoTo Erro_Imprime_Orcamento

    
    'Função que Abre a Transação de Caixa, Identifica o Movimento dentro do Caixa
    lErro = CF_ECF("Caixa_Transacao_Abrir", lSequencial)
    If lErro <> SUCESSO Then gError 210464
    
    'Abre a Transação
    lErro = CF_ECF("Caixa_Transacao_Abrir_Orc", lSequencialOrc)
    If lErro <> SUCESSO Then gError 210465


    'Realiza as operações necessárias para gravar
    lErro = CF_ECF("Imprime_Orcamento_EmTrans", objVenda)
    If lErro <> SUCESSO Then gError 210462
    

    'Fecha a Transação
    lErro = CF_ECF("Caixa_Transacao_Fechar_Orc", lSequencialOrc)
    If lErro <> SUCESSO Then gError 210466
    

    'Fechar a Transação
    lErro = CF_ECF("Caixa_Transacao_Fechar", lSequencial)
    If lErro <> SUCESSO Then gError 210467

    Imprime_Orcamento = SUCESSO
    
    Exit Function

Erro_Imprime_Orcamento:
    
    Imprime_Orcamento = gErr
    
    Select Case gErr
                
        Case 210462, 210464 To 210467
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 210463)

    End Select
    
    'Rollback na transação
    Call CF_ECF("Caixa_Transacao_Rollback", glTransacaoPAFECF)
    Call CF_ECF("Caixa_Transacao_Rollback", glTransacaoOrcPAFECF)
    
    Exit Function

End Function

Function Imprime_Orcamento_EmTrans(objVenda As ClassVenda) As Long
'PAFECF - É a funcao que imprime os orcamentos pendentes automaticamente e baixa-os

Dim lErro As Long
Dim iIndice As Integer
Dim objVendaAux As ClassVenda
Dim colItens As New Collection
Dim colItens1 As New Collection
Dim objItens As ClassItemCupomFiscal
Dim sIndice As String
Dim objTiposMeioPagto As ClassTMPLoja
Dim sDesc As String
Dim sOrcamento As String
Dim colOrcamento As New Collection
Dim sCPF As String
Dim lNumero As Long
Dim sMsg As String
Dim objProduto As ClassProduto

On Error GoTo Erro_Imprime_Orcamento_EmTrans

    'se usa impressora fiscal, ja q a impressao tem que ser nela
    'se nao usa DAV, ja que o requisito é só para orcamentos
    If giUsaImpressoraFiscal = 1 Then

        objVenda.iTipo = OPTION_CF
        objVenda.objCupomFiscal.dtDataEmissao = Date
        objVenda.objCupomFiscal.dHoraEmissao = CDbl(Time)
        objVenda.objCupomFiscal.iCodCaixa = giCodCaixa
        objVenda.objCupomFiscal.iECF = giCodECF

        'descobre o nome reduzido do produto
'        For Each objItens In objVenda.objCupomFiscal.colItens
'            For iIndice = 1 To gaobjProdutosNome.Count
'                Set objProduto = gaobjProdutosNome.Item(iIndice)
'                If objItens.sProduto = objProduto.sCodigo Then
'                    objItens.sProdutoNomeRed = objProduto.sNomeReduzido
'                    Exit For
'                End If
'            Next
'        Next
    
        For Each objItens In objVenda.objCupomFiscal.colItens
        
            Set objProduto = New ClassProduto
            
            lErro = CF_ECF("Produtos_Le", objItens.sProduto, objProduto)
            If lErro <> SUCESSO And lErro <> ERRO_LEITURA_SEM_DADOS Then gError 214856
            
            If lErro = SUCESSO Then
                objItens.sProdutoNomeRed = objProduto.sNomeReduzido
            End If
            
            
        Next

    
        For iIndice = objVenda.objCupomFiscal.colItens.Count To 1 Step -1
            colItens1.Add objVenda.objCupomFiscal.colItens.Item(iIndice)
        Next
        
        For iIndice = colItens1.Count To 1 Step -1
            colItens.Add colItens1.Item(iIndice)
        Next
    
        sCPF = objVenda.objCupomFiscal.sCPFCGC
        
        lErro = CF_ECF("Abre_Cupom", objVenda)
        If lErro <> SUCESSO Then gError 204212
    
    
        For Each objItens In objVenda.objCupomFiscal.colItens
            
'            If objItens.iStatus = STATUS_ATIVO Then
                
            lErro = Adiciona_Cupom(objItens)
            If lErro <> SUCESSO Then gError 204219
                
'            End If
            
            If objItens.iStatus = STATUS_CANCELADO Then
                'cancelar o Item anterior
                lErro = AFRAC_CancelarItem(CInt(objItens.iItem))
                lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Cancelar Item")
                If lErro <> SUCESSO Then gError 210526
                
            End If
                    
        Next
    
        sIndice = TIPOMEIOPAGTOLOJA_DINHEIRO
        'Recolhe a descrição
        For Each objTiposMeioPagto In gcolTiposMeiosPagtos
            'Se o tipo for dinheiro
            If objTiposMeioPagto.iTipo = StrParaInt(sIndice) Then
                sDesc = objTiposMeioPagto.sDescricao
                Exit For
            End If
        Next
        
        lErro = AFRAC_AcrescimoDescontoCupom(0, 0, "", "")
        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Acrescimo - Desconto")
        If lErro <> SUCESSO Then gError 204213
            
        
        'Informa o pagamento
        lErro = AFRAC_FormaPagamento(sDesc, sIndice, Format(objVenda.objCupomFiscal.dValorProdutos, "fixed"), sMsg)
        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Forma Pagamento")
        If lErro <> SUCESSO Then gError 204214
    
        sOrcamento = "PV""" & Format(objVenda.objCupomFiscal.lNumOrcamento, "0000000000") & """ "
        
        'Fecha cupom
        lErro = AFRAC_FecharCupom(Nothing, objVenda, False, objVenda.objCupomFiscal.sCPFCGC1, objVenda.objCupomFiscal.sNomeCliente, objVenda.objCupomFiscal.sEndereco, False, sOrcamento)
        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Fechar Cupom")
        If lErro <> SUCESSO Then gError 204215
    
        'cancelar o Cupom de Venda
        lErro = AFRAC_CancelarCupom(Nothing, objVenda)
        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Cancelar Cupom")
        If lErro <> SUCESSO Then gError 204216
    
        'troca o tipo de orcamento para cupom
        objVenda.iTipo = OPTION_CF
        
        'coloca a data em que foram impressos os orcamentos pendentes
        objVenda.objCupomFiscal.dtDataEmissao = Date
        objVenda.objCupomFiscal.dHoraEmissao = CDbl(Time)
        
    
        'Realiza as operações necessárias para gravar
        lErro = CF_ECF("Grava_Venda_Arquivo_EmTrans", objVenda)
        If lErro <> SUCESSO Then gError 204549
        
        lErro = CF_ECF("Grava_CancelamentoCupom_Arquivo_EmTrans", objVenda)
        If lErro <> SUCESSO Then gError 204550
    
    
        'exclui o orcamento que está sendo transformado em cupom - foi retirado pois em grava_venda_arquivo_EmTrans ja exclui o orcamento associado
'        lErro = CF_ECF("Caixa_Exclui_Orcamento_EmTrans", objVenda)
'        If lErro <> SUCESSO And lErro <> 105761 Then gError 204218

    End If

    Imprime_Orcamento_EmTrans = SUCESSO
    
    Exit Function

Erro_Imprime_Orcamento_EmTrans:
    
    Imprime_Orcamento_EmTrans = gErr
    
    Select Case gErr
                
        Case 204212 To 204216, 204218, 204219, 204549, 204550, 214856
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 204217)

    End Select
    
    Exit Function

End Function

Public Function CaixasAtivos_Insere_Caixa_Old() As Long
'Função Que insere o caixa atual no arquivo q contem os caixas ativos - PAFECF

Dim sLog As String
Dim iIndice As Integer
Dim colCaixa As New Collection
Dim sCaixa As String
Dim iAchou As Integer
Dim lErro As Long

On Error GoTo Erro_CaixasAtivos_Insere_Caixa_Old
    
    If giOrcamentoECF <> CAIXA_SO_ORCAMENTO Then
    
        lErro = CF_ECF("CaixasAtivos_Le", colCaixa)
        If lErro <> SUCESSO Then gError 204229
        
        iAchou = 0
        
        'verifica se o caixa ja esta na lista
        For iIndice = colCaixa.Count To 1 Step -1
        
            sCaixa = colCaixa(iIndice)
            
            'se achar o caixa mais de uma vez na colecao ==> remove a duplicidade
            If sCaixa = CStr(giCodCaixa) And iAchou = 1 Then
                colCaixa.Remove (iIndice)
            End If
            
            
            If sCaixa = CStr(giCodCaixa) And iAchou = 0 Then
                iAchou = 1
            End If
                            
        Next
        
        'se ainda noa estiver na lista ==> insere
        If iAchou = 0 Then
        
            lErro = CF_ECF("CaixasAtivos_Lock")
            If lErro <> SUCESSO Then gError 204230
            
            'Inseri no Arquivo
            Print #4, giCodCaixa
            
            Close #4
            
        End If
        
    End If
        
    CaixasAtivos_Insere_Caixa_Old = SUCESSO

    Exit Function

Erro_CaixasAtivos_Insere_Caixa_Old:
    
    CaixasAtivos_Insere_Caixa_Old = gErr

    Select Case gErr
        
        Case 204230
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 204231)

    End Select

    Close #4

    Exit Function
    
End Function

Public Function CaixasAtivos_Remove_Caixa_Old(colCaixa As Collection) As Long
'Função Que remove o caixa do arquivo de caixas ativos - PAFECF

Dim iIndice As Integer
Dim sCaixa As String
Dim lTamanho As Long
Dim sRetorno As String
Dim sDir As String
Dim dtData As Date
Dim sNomeArq As String
Dim sNomeArq1 As String
Dim lErro As Long
Dim sRet As String
Dim vCaixa As Variant


On Error GoTo Erro_CaixasAtivos_Remove_Caixa_Old
    
    If giOrcamentoECF <> CAIXA_SO_ORCAMENTO Then
    
        'funcao que verifica se o caixaconfig.ini foi alterado
        lErro = CF_ECF("CaixaConfig_Verifica_Chave")
        If lErro <> SUCESSO Then gError 204252
        
        lErro = CF_ECF("CaixasAtivos_Le", colCaixa)
        If lErro <> SUCESSO Then gError 204229
        
        For iIndice = colCaixa.Count To 1 Step -1
        
            sCaixa = colCaixa(iIndice)
            If sCaixa = CStr(giCodCaixa) Then
                colCaixa.Remove (iIndice)
            End If
                            
        Next
        
        dtData = gdtDataHoje
            
        lTamanho = 255
        sRetorno = String(lTamanho, 0)
            
        Call GetPrivateProfileString(APLICACAO_ORCAMENTO, "Dir", CONSTANTE_ERRO, sRetorno, lTamanho, NOME_ARQUIVO_CAIXA)
        If sRetorno = String(lTamanho, 0) Then gError 204226
            
        sDir = StringZ(sRetorno)
        
        'se o diretorio nao for terminado por \  ===> acrescentar
        If right(sDir, 1) <> "\" Then sDir = sDir & "\"
    
        sNomeArq1 = "CaixasAtivos_" & Format(dtData, "ddmmyy") & ".txt"
    
        sNomeArq = sDir & sNomeArq1
    
        'Verifica se tem orcamento para a data de hoje
        sRet = Dir(sNomeArq)
        
        If Len(sRet) = 0 Then
        
            ECF_Apaga_Arquivo sNomeArq
            
        End If
            
        lErro = CF_ECF("CaixasAtivos_Lock")
        If lErro <> SUCESSO Then gError 204227
        
        For Each vCaixa In colCaixa
        
            Print #4, vCaixa
        
        Next
            
        Close #4
    
    End If
    
    CaixasAtivos_Remove_Caixa_Old = SUCESSO

    Exit Function

Erro_CaixasAtivos_Remove_Caixa_Old:
    
    CaixasAtivos_Remove_Caixa_Old = gErr

    Close #4

    Select Case gErr
        
        Case 204226, 204227, 204229, 204252
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 204228)

    End Select

    Exit Function
    
End Function

Function CaixaConfig_Chave() As Long
'funcao que cria/altera a chave e grava no caixaconfig.ini

Dim lErro As Long
Dim sRegistro As String
Dim colRegistro As New Collection
Dim lTotal As Long
Dim icol As Integer
Dim iLinha As Integer
Dim sArqTmp As String
Dim sArquivo As String
Dim sArquivo1 As String
Dim sDir As String
Dim lTentaAcessoArquivo As Long


On Error GoTo Erro_CaixaConfig_Chave

'    sDir = String(STRING_MAX_NOME_ARQUIVO, 0)
'
'    lErro = GetWindowsDirectory(sDir, STRING_MAX_NOME_ARQUIVO)
'    If lErro = 0 Then gError 204233
'
'    sDir = StringZ(sDir)
'
'    If right(sDir, 1) <> "\" Then sDir = sDir & "\"
'
'    sArquivo = sDir & NOME_ARQUIVO_CAIXA
'
'    sArquivo1 = Dir(sArquivo)
'
'    If Len(sArquivo1) = 0 Then gError 204234
'
'    sArqTmp = left(sArquivo, Len(sArquivo) - 3) & ".tmp"
'
'    sArquivo1 = Dir(sArqTmp)
'
'    If Len(sArquivo1) <> 0 Then ECF_Apaga_Arquivo sArqTmp
'
'
'    Open sArqTmp For Append Lock Read Write As #2
'
'    Open sArquivo For Input Lock Read Write As #1
'
'    Do While Not EOF(1)
'
'        iLinha = iLinha + 1
'
'        'Busca o próximo registro do arquivo
'        Line Input #1, sRegistro
'
'        If UCase(left(sRegistro, 6)) <> "CHAVE=" Then
'
'            colRegistro.Add sRegistro
'
'            Print #2, sRegistro
'
'            For iCol = 1 To Len(sRegistro)
'                lTotal = lTotal + Asc(Mid(sRegistro, iCol, 1)) * iCol * iLinha
'            Next
'
'        End If
'
'    Loop
'
'    Print #2, "chave=" & CStr(lTotal)
'
'    Close #1
'
'    Close #2
'
'    ECF_Apaga_Arquivo sArquivo
'
'    Name sArqTmp As sArquivo

    CaixaConfig_Chave = SUCESSO

    Exit Function

Erro_CaixaConfig_Chave:

    CaixaConfig_Chave = gErr
    
    Select Case gErr

        Case 70
            lTentaAcessoArquivo = lTentaAcessoArquivo + 1
            If lTentaAcessoArquivo < NUM_MAX_LOCK Then Resume
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_LOCADO, gErr, sArquivo)
            
        Case 204233

        Case 204234
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO2, gErr, sArquivo)

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 204235)

    End Select
    
    Exit Function

End Function

Function CaixaConfig_Verifica_Chave() As Long
'funcao que verifica se o orcamento.ini foi alterado pelo usuario


Dim lErro As Long
Dim sRegistro As String
Dim colRegistro As New Collection
Dim lTotal As Long
Dim icol As Integer
Dim iLinha As Integer
Dim sArqTmp As String
Dim sArquivo As String
Dim sArquivo1 As String
Dim sDir As String
Dim lTentaAcessoArquivo As Long


On Error GoTo Erro_CaixaConfig_Verifica_Chave


'    sDir = String(STRING_MAX_NOME_ARQUIVO, 0)
'
'    lErro = GetWindowsDirectory(sDir, STRING_MAX_NOME_ARQUIVO)
'    If lErro = 0 Then gError 204236
'
'    sDir = StringZ(sDir)
'
'    If right(sDir, 1) <> "\" Then sDir = sDir & "\"
'
'    sArquivo = sDir & NOME_ARQUIVO_CAIXA
'
'    sArquivo1 = Dir(sArquivo)
'
'    If Len(sArquivo1) = 0 Then gError 204237
'
'    Open sArquivo For Input Lock Read Write As #1
'
'    Do While Not EOF(1)
'
'        iLinha = iLinha + 1
'
'        'Busca o próximo registro do arquivo
'        Line Input #1, sRegistro
'
'        If UCase(left(sRegistro, 6)) <> "CHAVE=" Then
'
'            For iCol = 1 To Len(sRegistro)
'                lTotal = lTotal + Asc(Mid(sRegistro, iCol, 1)) * iCol * iLinha
'            Next
'
'        Else
'            lChave = StrParaLong(Mid(sRegistro, 7))
'
'        End If
'
'    Loop
'
'    If lChave <> lTotal Then gError 204239
'
'    Close #1
        
    CaixaConfig_Verifica_Chave = SUCESSO

    Exit Function

Erro_CaixaConfig_Verifica_Chave:

    CaixaConfig_Verifica_Chave = gErr
    
    Select Case gErr

        Case 70
            lTentaAcessoArquivo = lTentaAcessoArquivo + 1
            If lTentaAcessoArquivo < NUM_MAX_LOCK Then Resume
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_LOCADO, gErr, sArquivo)
            
            
        Case 204236
            
        Case 204237
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO2, gErr, sArquivo)

        Case 204239
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_CONFIGURACAO_ALTERADO, gErr)

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 204238)

    End Select
    
    Exit Function

End Function

Function OrcamentoIni_Chave() As Long
'funcao que cria/altera a chave e grava no orcamento.ini

Dim lErro As Long
Dim sRegistro As String
Dim colRegistro As New Collection
Dim lTotal As Long
Dim icol As Integer
Dim iLinha As Integer
Dim sArqTmp As String
Dim sArquivo As String
Dim sArquivo1 As String
Dim sDir As String
Dim lTentaAcessoArquivo As Long


On Error GoTo Erro_OrcamentoIni_Chave

    sDir = String(STRING_MAX_NOME_ARQUIVO, 0)

    lErro = GetWindowsDirectory(sDir, STRING_MAX_NOME_ARQUIVO)
    If lErro = 0 Then gError 204233

    sDir = StringZ(sDir)

    If right(sDir, 1) <> "\" Then sDir = sDir & "\"

    sArquivo = sDir & NOME_ARQUIVO_ORCAMENTO

    sArquivo1 = Dir(sArquivo)

    If Len(sArquivo1) = 0 Then gError 204234

    sArqTmp = left(sArquivo, Len(sArquivo) - 3) & ".tmp"

    sArquivo1 = Dir(sArqTmp)

    If Len(sArquivo1) <> 0 Then ECF_Apaga_Arquivo sArqTmp

    Open sArqTmp For Append Lock Read Write As #2

    Open sArquivo For Input Lock Read Write As #1

    Do While Not EOF(1)

        iLinha = iLinha + 1

        'Busca o próximo registro do arquivo
        Line Input #1, sRegistro

        If UCase(left(sRegistro, 6)) <> "CHAVE=" Then

            colRegistro.Add sRegistro

            Print #2, sRegistro

            For icol = 1 To Len(sRegistro)
                lTotal = lTotal + Asc(Mid(sRegistro, icol, 1)) * icol * (iLinha ^ 2)
            Next

        End If

    Loop

    Print #2, "chave=" & CStr(lTotal)

    Close #1

    Close #2

    ECF_Apaga_Arquivo sArquivo

    Name sArqTmp As sArquivo

    OrcamentoIni_Chave = SUCESSO

    Exit Function

Erro_OrcamentoIni_Chave:

    OrcamentoIni_Chave = gErr
    
    Select Case gErr

        Case 70
            lTentaAcessoArquivo = lTentaAcessoArquivo + 1
            If lTentaAcessoArquivo < NUM_MAX_LOCK Then Resume
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_LOCADO, gErr, sArquivo)
            
        Case 204233

        Case 204234
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO2, gErr, sArquivo)

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 204235)

    End Select
    
    Exit Function

End Function


Function OrcamentoIni_Verifica_Chave() As Long
'funcao que verifica se o orcamento.ini foi alterado


Dim lErro As Long
Dim sRegistro As String
Dim colRegistro As New Collection
Dim lTotal As Long
Dim icol As Integer
Dim iLinha As Integer
Dim sArqTmp As String
Dim sArquivo As String
Dim sArquivo1 As String
Dim sDir As String
Dim lTentaAcessoArquivo As Long
Dim lChave As Long


On Error GoTo Erro_OrcamentoIni_Verifica_Chave


    sDir = String(STRING_MAX_NOME_ARQUIVO, 0)

    lErro = GetWindowsDirectory(sDir, STRING_MAX_NOME_ARQUIVO)
    If lErro = 0 Then gError 204299

    sDir = StringZ(sDir)

    If right(sDir, 1) <> "\" Then sDir = sDir & "\"

    sArquivo = sDir & NOME_ARQUIVO_ORCAMENTO

    sArquivo1 = Dir(sArquivo)

    If Len(sArquivo1) = 0 Then gError 204300

    Open sArquivo For Input Lock Read Write As #1

    Do While Not EOF(1)

        iLinha = iLinha + 1

        'Busca o próximo registro do arquivo
        Line Input #1, sRegistro

        If UCase(left(sRegistro, 6)) <> "CHAVE=" Then

            For icol = 1 To Len(sRegistro)
                lTotal = lTotal + Asc(Mid(sRegistro, icol, 1)) * icol * (iLinha ^ 2)
            Next

        Else
            lChave = StrParaLong(Mid(sRegistro, 7))

        End If

    Loop

    If lChave <> lTotal Then gError 204301

    Close #1
        
    OrcamentoIni_Verifica_Chave = SUCESSO

    Exit Function

Erro_OrcamentoIni_Verifica_Chave:

    OrcamentoIni_Verifica_Chave = gErr
    
    Close #1
    
    Select Case gErr

        Case 70
            lTentaAcessoArquivo = lTentaAcessoArquivo + 1
            If lTentaAcessoArquivo < NUM_MAX_LOCK Then Resume
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_LOCADO, gErr, sArquivo)
            
            
        Case 204299
            
        Case 204300
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO2, gErr, sArquivo)

        Case 204301
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_CONFIGURACAO_ALTERADO, gErr)

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 204302)

    End Select
    
    Exit Function

End Function

Function Caixa_Exclui_Orcamento1(objVendaParam As ClassVenda) As Long
'exclui o orcamento contido em objVendaParam

Dim lErro As Long
Dim objVenda As ClassVenda
Dim bAchou As Boolean
Dim sLog As String
Dim lSequencial As Long
Dim colRegistro As New Collection
Dim colOrcamento As New Collection
Dim iIndice As Integer

    Call Rotina_AvisoECF(vbOKOnly, AVISO_NAO_E_POSSIVEL_EXLUIR_ORCAMENTO)
    
    Caixa_Exclui_Orcamento1 = SUCESSO
    
End Function

Function Gravar_Orcamento(ByVal objTela As Object, objVenda As ClassVenda) As Long

Dim lErro As Long
Dim lSequencial As Long
Dim vbMsgRes As VbMsgBoxResult
Dim dtDataFinal As Date
Dim lSequencialOrc As Long
Dim objVendaAux As New ClassVenda

On Error GoTo Erro_Gravar_Orcamento

    'Função que Abre a Transação de Caixa, Identifica o Movimento dentro do Caixa
    lErro = CF_ECF("Caixa_Transacao_Abrir", lSequencial)
    If lErro <> SUCESSO Then gError 204666

    'Abre a Transação
    lErro = CF_ECF("Caixa_Transacao_Abrir_Orc", lSequencialOrc)
    If lErro <> SUCESSO Then gError 204685
    
    lErro = CF_ECF("Testa_Limite_Desconto", objVenda)
    If lErro <> SUCESSO Then gError 126779

    'Se o valor é insuficiente para pagar
    If StrParaDbl(objTela.objFalta.Caption) > 0 Then gError 99891
    
    If StrParaDbl(objTela.objPago.Caption) = 0 Then gError 133760
    
    'gera o CodBarrasCarne do Carnê
    If objVenda.objCarne.colParcelas.Count > 0 Then objVenda.objCarne.sCodBarrasCarne = FormataCpoNum(giFilialEmpresa, 5) & FormataCpoNum(giCodCaixa, 5) & FormataCpoNum(objVenda.objCupomFiscal.lNumero, 10)
    
    objVenda.objCupomFiscal.dtDataEmissao = StrParaDate(objTela.objLabelEmissao.Caption)
    'se a hora de emissao nao estiver preenchida ==> preenche. Se estiver
    If objVenda.objCupomFiscal.dHoraEmissao = 0 Then objVenda.objCupomFiscal.dHoraEmissao = CDbl(Time)
    objVenda.objCupomFiscal.dValorTroco = StrParaDbl(objTela.objTroco.Caption)
    objVenda.objCupomFiscal.lDuracao = StrParaLong(objTela.objDuracao.Text)
    objVenda.objCupomFiscal.iFilialEmpresa = giFilialEmpresa
    objVenda.objCupomFiscal.iCodCaixa = giCodCaixa
    objVenda.objCupomFiscal.iECF = giCodECF
    objVenda.objCupomFiscal.iTabelaPreco = gobjLojaECF.iTabelaPreco
    objVenda.objCupomFiscal.dValorProdutos = objVenda.objCupomFiscal.dValorTotal
    objVenda.objCupomFiscal.dValorTotal = StrParaDbl(objTela.objAPagar.Caption)
    
    If objVenda.iTipo = OPTION_PREVENDA Then
    
        'grava o orcamento.
        lErro = CF_ECF("Grava_Orcamento_ECF1_EmTrans", objVenda)
        If lErro <> SUCESSO Then gError 105862
    
    
    ElseIf objVenda.iTipo = OPTION_DAV Then
        
        dtDataFinal = StrParaDate(objTela.objDataFinal.Text)
        
        objVendaAux.objCupomFiscal.lNumOrcamento = objVenda.objCupomFiscal.lNumOrcamento
        
        lErro = CF_ECF("OrcamentoECF_Le", objVendaAux)
        If lErro <> SUCESSO And lErro <> 204690 And lErro <> 210447 Then gError 210893

        'se for dav é ja tiver sido impresso ==> nao imprime nem altera o DAV
        If objVendaAux.objCupomFiscal.iDAVImpresso <> 0 Then gError 210996

        'se o orcamento ja tiver sido usado para gerar cupom fiscal ==> nao pode alterar
        If lErro = 210447 Then gError 210997
        
        'le os registros do orcamento e loca o arquivo
'        lErro = CF_ECF("Imprime_OrcamentoECF_EmTrans", dtDataFinal, objVenda.objCupomFiscal.lNumOrcamento, objTela, objVenda)
'        If lErro <> SUCESSO Then gError 204305
        
        'grava o orcamento.
        lErro = CF_ECF("Grava_Orcamento_ECF1_EmTrans", objVenda)
        If lErro <> SUCESSO Then gError 204305
        
    End If

    'Fecha a Transação
    lErro = CF_ECF("Caixa_Transacao_Fechar_Orc", lSequencialOrc)
    If lErro <> SUCESSO Then gError 204686


    'Fecha a Transação
    lErro = CF_ECF("Caixa_Transacao_Fechar", lSequencial)
    If lErro <> SUCESSO Then gError 204667
    
    Gravar_Orcamento = SUCESSO
    
    Exit Function
    
Erro_Gravar_Orcamento:

    Gravar_Orcamento = gErr
    
    Select Case gErr
    
        
    
        Case 99891
            Call Rotina_ErroECF(vbOKOnly, ERRO_VALOR_INSUFICIENTE, gErr)
        
        Case 105862, 126779, 204305, 204666, 204667, 204685, 204686
        
        Case 133760
            Call Rotina_ErroECF(vbOKOnly, ERRO_VALOR_JA_PAGO1, gErr)
        
        Case 210996
            Call Rotina_ErroECF(vbOKOnly, ERRO_DAV_NAO_ALTERADO_DEPOIS_DE_IMPRESSO, gErr)
            
        Case 210997
            Call Rotina_ErroECF(vbOKOnly, ERRO_ORCAMENTO_BAIXADO, gErr)
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 160216)

    End Select
    
    Call CF_ECF("Caixa_Transacao_Rollback", glTransacaoPAFECF)
    Call CF_ECF("Caixa_Transacao_Rollback", glTransacaoOrcPAFECF)
    
    Exit Function

End Function

Public Function DAV_Obtem_Num_Automatico_Old(lNumero As Long) As Long
    
Dim lErro As Long
Dim sArqSeq As String
Dim lTamanho As Long
Dim sRetorno As String
Dim tArqSeq As typeArqSeq
Dim colOrcamento As New Collection
Dim objVenda As ClassVenda
Dim iAchou As Integer
Dim sDir As String

On Error GoTo Erro_DAV_Obtem_Num_Automatico_Old
    
    'funcao que verifica se o caixaconfig.ini foi alterado
    lErro = CF_ECF("CaixaConfig_Verifica_Chave")
    If lErro <> SUCESSO Then gError 204315
    
    lTamanho = 255
    sRetorno = String(lTamanho, 0)
    
    Call GetPrivateProfileString(APLICACAO_ORCAMENTO, "Dir", CONSTANTE_ERRO, sRetorno, lTamanho, NOME_ARQUIVO_CAIXA)
    If sRetorno = String(lTamanho, 0) Then gError 204316

    sDir = StringZ(sRetorno)
    
    'se o diretorio nao for terminado por \  ===> acrescentar
    If right(sDir, 1) <> "\" Then sDir = sDir & "\"
    
    sArqSeq = sDir & "ArqSeqOr.txt"

    sRetorno = Dir(sArqSeq)
    
    'se nao encontrou o arquivo que contem o sequencial de orcamento ==> criar
    If Len(sRetorno) = 0 Then
        
        Open sArqSeq For Random Lock Read Write As 5 Len = Len(tArqSeq)
        tArqSeq.sSequencial = "0"
        tArqSeq.sData = Format(DATA_NULA, "dd/mm/yyyy")
        Put #5, 1, tArqSeq
        Put #5, 2, tArqSeq
        Close #5
        
    End If

    'Função Que le os orcamentos
    lErro = CF_ECF("OrcamentoECF_Le", colOrcamento)
    If lErro <> SUCESSO Then gError 204317

    Open sArqSeq For Random Lock Read Write As 5 Len = Len(tArqSeq)
    Get #5, 2, tArqSeq
    lNumero = CLng(tArqSeq.sSequencial) + 1
    
    tArqSeq.sSequencial = CStr(lNumero)
    
    Put #5, 2, tArqSeq
    Close #5
    
    DAV_Obtem_Num_Automatico_Old = SUCESSO
    
    Exit Function

Erro_DAV_Obtem_Num_Automatico_Old:
    
    DAV_Obtem_Num_Automatico_Old = gErr
    
    Close #5
    
    Select Case gErr
        
        Case 204315, 204317
        
        Case 204316
            Call Rotina_ErroECF(vbOKOnly, ERRO_PREENCHIMENTO_ARQUIVO_CONFIG, gErr, "Dir", APLICACAO_ORCAMENTO, NOME_ARQUIVO_CAIXA)
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 204318)

    End Select

    Exit Function

End Function
    
'Function Grava_Orcamento_ECF(objVendaParam As ClassVenda) As Long
''grava o orcamento. EM DESUSO
'
'Dim lErro As Long
'
'On Error GoTo Erro_Grava_Orcamento_ECF
'
'    'se nao imprime DAV ==> grava o orcamento nesta funcao
'    If giImprimeOrc = 0 Then 'PAFECF
'
'        lErro = Grava_Orcamento_ECF1(objVendaParam)
'        If lErro <> SUCESSO Then gError 204320
'
'    End If
'
'    Grava_Orcamento_ECF = SUCESSO
'
'    Exit Function
'
'Erro_Grava_Orcamento_ECF:
'
'    Grava_Orcamento_ECF = gErr
'
'    Select Case gErr
'
'        Case 204320
'
'        Case Else
'            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB, lErro, Error, 204321)
'
'    End Select
'
'    Exit Function
'
'End Function
'
'Function Grava_Orcamento_ECF_EmTrans(objVendaParam As ClassVenda) As Long
''grava o orcamento. EM DESUSO
'
'Dim lErro As Long
'
'On Error GoTo Erro_Grava_Orcamento_ECF_EmTrans
'
'    'se nao imprime DAV ==> grava o orcamento nesta funcao
'    If giImprimeOrc = 0 Then 'PAFECF
'
'        lErro = Grava_Orcamento_ECF1_EmTrans(objVendaParam)
'        If lErro <> SUCESSO Then gError 204320
'
'    End If
'
'    Grava_Orcamento_ECF_EmTrans = SUCESSO
'
'    Exit Function
'
'Erro_Grava_Orcamento_ECF_EmTrans:
'
'    Grava_Orcamento_ECF_EmTrans = gErr
'
'    Select Case gErr
'
'        Case 204320
'
'        Case Else
'            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB, lErro, Error, 204321)
'
'    End Select
'
'    Exit Function
'
'End Function


'Function DAVECF_Grava_EmTrans(objVendaParam As ClassVenda) As Long
''PAFECF EM DESUSO
'
'Dim sNomeArq As String
'Dim sNomeArq1 As String
'Dim sRet As String
'Dim sRetorno As String
'Dim lTamanho As Long
'Dim sDir As String
'Dim lErro As Long
'Dim dtData As Date
'Dim colRegistro As New Collection
'Dim iIndice As Integer
'Dim sLog As String
'Dim lTentaAcessoArquivo As Long
'
'On Error GoTo Erro_DAVECF_Grava_EmTrans
'
'    dtData = objVendaParam.objCupomFiscal.dtDataEmissao
'
'    lTamanho = 255
'    sRetorno = String(lTamanho, 0)
'
'    'funcao que verifica se o caixaconfig.ini foi alterado
'    lErro = CF_ECF("CaixaConfig_Verifica_Chave")
'    If lErro <> SUCESSO Then gError 204325
'
'    Call GetPrivateProfileString(APLICACAO_ORCAMENTO, "Dir", CONSTANTE_ERRO, sRetorno, lTamanho, NOME_ARQUIVO_CAIXA)
'    If sRetorno = String(lTamanho, 0) Then gError 204326
'
'    sDir = StringZ(sRetorno)
'
'    'se o diretorio nao for terminado por \  ===> acrescentar
'    If right(sDir, 1) <> "\" Then sDir = sDir & "\"
'
'    sNomeArq1 = "DAV" & Format(dtData, "ddmmyy") & (".txt")
'
'    sNomeArq = sDir & sNomeArq1
'
'    'Verifica se tem orcamento para a data de hoje
'    sRet = Dir(sNomeArq)
'
'    If Len(sRet) = 0 Then
'
'        Open sNomeArq For Append Lock Read Write As #4
'
'        'Inserido no Arquivo o nome do arquivo
'        Print #4, sNomeArq1
'
'        Close #4
'
'    End If
'
'    Open sNomeArq For Append Lock Read Write As #4
'
'    'Gera a string que vai ser adicionada no arquivo
'    Call CF_ECF("Venda_Gera_Log", colRegistro, objVendaParam)
'
'    For iIndice = 1 To colRegistro.Count
'
'        sLog = colRegistro.Item(iIndice)
'
'        'Inseri no Arquivo
'        Print #4, sLog
'
'    Next
'
'    Close #4
'
'    DAVECF_Grava_EmTrans = SUCESSO
'
'    Exit Function
'
'Erro_DAVECF_Grava_EmTrans:
'
'    DAVECF_Grava_EmTrans = gErr
'
'    Close #4
'
'    Select Case gErr
'
'        Case 70
'            lTentaAcessoArquivo = lTentaAcessoArquivo + 1
'            If lTentaAcessoArquivo < NUM_MAX_LOCK Then Resume
'            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_LOCADO, gErr, sNomeArq)
'
'        Case 204325, 204326
'
'        Case Else
'            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 204327)
'
'    End Select
'
'    Exit Function
'
'End Function

'Function DAVECF_Grava(objVendaParam As ClassVenda) As Long
''PAFECF EM DESUSO
'
'Dim sNomeArq As String
'Dim sNomeArq1 As String
'Dim sRet As String
'Dim sRetorno As String
'Dim lTamanho As Long
'Dim sDir As String
'Dim lErro As Long
'Dim dtData As Date
'Dim colRegistro As New Collection
'Dim iIndice As Integer
'Dim sLog As String
'Dim lTentaAcessoArquivo As Long
'
'On Error GoTo Erro_DAVECF_Grava
'
'    dtData = objVendaParam.objCupomFiscal.dtDataEmissao
'
'    lTamanho = 255
'    sRetorno = String(lTamanho, 0)
'
'    'funcao que verifica se o caixaconfig.ini foi alterado
'    lErro = CF_ECF("CaixaConfig_Verifica_Chave")
'    If lErro <> SUCESSO Then gError 204325
'
'    Call GetPrivateProfileString(APLICACAO_ORCAMENTO, "Dir", CONSTANTE_ERRO, sRetorno, lTamanho, NOME_ARQUIVO_CAIXA)
'    If sRetorno = String(lTamanho, 0) Then gError 204326
'
'    sDir = StringZ(sRetorno)
'
'    'se o diretorio nao for terminado por \  ===> acrescentar
'    If right(sDir, 1) <> "\" Then sDir = sDir & "\"
'
'    sNomeArq1 = "DAV" & Format(dtData, "ddmmyy") & (".txt")
'
'    sNomeArq = sDir & sNomeArq1
'
'    'Verifica se tem orcamento para a data de hoje
'    sRet = Dir(sNomeArq)
'
'    If Len(sRet) = 0 Then
'
'        Open sNomeArq For Append Lock Read Write As #4
'
'        'Inserido no Arquivo o nome do arquivo
'        Print #4, sNomeArq1
'
'        Close #4
'
'    End If
'
'    Open sNomeArq For Append Lock Read Write As #4
'
'    'Gera a string que vai ser adicionada no arquivo
'    Call CF_ECF("Venda_Gera_Log", colRegistro, objVendaParam)
'
'    For iIndice = 1 To colRegistro.Count
'
'        sLog = colRegistro.Item(iIndice)
'
'        'Inseri no Arquivo
'        Print #4, sLog
'
'    Next
'
'    Close #4
'
'    DAVECF_Grava = SUCESSO
'
'    Exit Function
'
'Erro_DAVECF_Grava:
'
'    DAVECF_Grava = gErr
'
'    Close #4
'
'    Select Case gErr
'
'        Case 70
'            lTentaAcessoArquivo = lTentaAcessoArquivo + 1
'            If lTentaAcessoArquivo < NUM_MAX_LOCK Then Resume
'            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_LOCADO, gErr, sNomeArq)
'
'        Case 204325, 204326
'
'        Case Else
'            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 204327)
'
'    End Select
'
'    Exit Function
'
'End Function


'Function Grava_Orcamento_DAV(objVendaParam As ClassVenda) As Long
''grava o orcamento. PAFECF EM DESUSO
'
'Dim lErro As Long
'
'On Error GoTo Erro_Grava_Orcamento_DAV
'
'    'se imprime DAV ==> grava o orcamento nesta funcao
'    If giImprimeOrc = 1 Then 'PAFECF
'
'        lErro = Grava_Orcamento_ECF1(objVendaParam)
'        If lErro <> SUCESSO Then gError 204328
'
'    End If
'
'    Grava_Orcamento_DAV = SUCESSO
'
'    Exit Function
'
'Erro_Grava_Orcamento_DAV:
'
'    Grava_Orcamento_DAV = gErr
'
'    Select Case gErr
'
'        Case 204328
'
'        Case Else
'            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB, lErro, Error, 204329)
'
'    End Select
'
'    Exit Function
'
'End Function

'Function Grava_Orcamento_DAV_EmTrans(objVendaParam As ClassVenda) As Long
''grava o orcamento. PAFECF EM DESUSO
'
'Dim lErro As Long
'
'On Error GoTo Erro_Grava_Orcamento_DAV_EmTrans
'
'    'se imprime DAV ==> grava o orcamento nesta funcao
'    If giImprimeOrc = 1 Then 'PAFECF
'
'        lErro = Grava_Orcamento_ECF1_EmTrans(objVendaParam)
'        If lErro <> SUCESSO Then gError 204328
'
'    End If
'
'    Grava_Orcamento_DAV_EmTrans = SUCESSO
'
'    Exit Function
'
'Erro_Grava_Orcamento_DAV_EmTrans:
'
'    Grava_Orcamento_DAV_EmTrans = gErr
'
'    Select Case gErr
'
'        Case 204328
'
'        Case Else
'            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB, lErro, Error, 204329)
'
'    End Select
'
'    Exit Function
'
'End Function

Function Altera_DAV(objVendaParam As ClassVenda) As Long
'grava no orcamento seja prevenda ou DAV o numero do cupom fiscal que esta ligado ao orcamento

Dim colRegistro As New Collection
Dim iIndice As Integer
Dim lErro As Long
Dim objVenda As New ClassVenda
Dim sLog As String
Dim colOrcamento As New Collection
Dim lSequencial As Long
Dim dtData As Date
Dim lTamanho As Long
Dim sRetorno As String
Dim sDir As String
Dim sNomeArq As String
Dim sNomeArq1 As String
Dim sNomeArqTmp As String
Dim lTentaAcessoArquivo As Long

On Error GoTo Erro_Altera_DAV

    If objVendaParam.objCupomFiscal.lNumOrcamento = 0 Then gError 204333
    
    If objVendaParam.objCupomFiscal.colItens.Count = 0 Then gError 204334
    
    objVenda.objCupomFiscal.lNumOrcamento = objVendaParam.objCupomFiscal.lNumOrcamento
    
    'Função Que le os orcamentos
    lErro = CF_ECF("OrcamentoECF_Le", objVenda)
    If lErro <> SUCESSO And lErro <> 204690 And lErro <> 210447 Then gError 204335
    
    If lErro = 210447 Then gError 210455
    
    'se o orcamento esta cadastrado
    If lErro = SUCESSO Then
    
        'se o numero do cupom fiscal estiver preenchido ==> erro
        If objVenda.objCupomFiscal.lCOOCupomOrigDAV = 0 Then
        
            objVenda.objCupomFiscal.lCOOCupomOrigDAV = objVendaParam.objCupomFiscal.lNumero
            
            objVenda.objCupomFiscal.lCliente = objVendaParam.objCupomFiscal.lCliente
            objVenda.objCupomFiscal.sCPFCGC1 = objVendaParam.objCupomFiscal.sCPFCGC1
            objVenda.objCupomFiscal.sCPFCGC = objVendaParam.objCupomFiscal.sCPFCGC
            objVenda.objCupomFiscal.sNomeCliente = objVendaParam.objCupomFiscal.sNomeCliente
            objVenda.objCupomFiscal.iSequencialECFOrigDAV = objVendaParam.objCupomFiscal.iSequencialECF
            
            lErro = CF_ECF("Grava_Orcamento_ECF1_EmTrans", objVenda)
            If lErro <> SUCESSO Then gError 204338
        
        Else
                Call Rotina_AvisoECF(vbOKOnly, ERRO_ORCAMENTO_COM_CUPOM, objVenda.objCupomFiscal.lNumOrcamento)
        
        End If
    
    End If
    
    Altera_DAV = SUCESSO
    
    
    Exit Function
    
Erro_Altera_DAV:
    
    Altera_DAV = gErr
    
    lErro = gErr
    
    Select Case lErro
    
        Case 204333
            Call Rotina_ErroECF(vbOKOnly, ERRO_ORCAMENTO_NAO_PREENCHIDO, lErro)
    
        Case 204334
            Call Rotina_ErroECF(vbOKOnly, ERRO_ORCAMENTO_SEM_ITEM, lErro)

        Case 204335, 204338
    
        Case 204336
            Call Rotina_ErroECF(vbOKOnly, ERRO_ORCAMENTO_COM_CUPOM, lErro)
    
        Case 204337
            Call Rotina_ErroECF(vbOKOnly, ERRO_ORCAMENTO_NAO_CADASTRADO1, gErr, objVendaParam.objCupomFiscal.lNumOrcamento)
    
        Case 210455
            Call Rotina_ErroECF(vbOKOnly, ERRO_ORCAMENTO_BAIXADO, gErr, objVenda.objCupomFiscal.lNumOrcamento)
    
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB, lErro, Error, 204339)

    End Select
    
    Exit Function
    
End Function



Function DAVEmitidos_Grava(ByVal dtDataDe As Date, ByVal dtDataAte As Date) As Long

Dim lErro As Long
Dim lSequencial As Long
Dim sNomeArq As String

On Error GoTo Erro_DAVEmitidos_Grava

    'Função que Abre a Transação
    lErro = CF_ECF("Caixa_Transacao_Abrir", lSequencial)
    If lErro <> SUCESSO Then gError 204368

    'Função que Referenciar a Função da Afrac que Vai Executar a Leitura
    lErro = CF_ECF("DAVEmitidos_GravaEmTrans", lSequencial, dtDataDe, dtDataAte, sNomeArq)
    If lErro <> SUCESSO Then gError 204369

    'Função que Encerra a Transação com o Caixa
    lErro = CF_ECF("Caixa_Transacao_Fechar", lSequencial)
    If lErro <> SUCESSO Then gError 204370

    Call Rotina_AvisoECF(vbOKOnly, "Arquivo " & sNomeArq & " gerado com sucesso.")

    DAVEmitidos_Grava = SUCESSO

    Exit Function

Erro_DAVEmitidos_Grava:

    DAVEmitidos_Grava = gErr

     Select Case gErr

        Case 204368, 204369, 204370
            'Erro Tratado Dentro da Função que Foi Chamada

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 204371)

    End Select
    
'    lSequencial = glSeqTransacaoAberta
            
    'Rollback na transação
    Call CF_ECF("Caixa_Transacao_Rollback", glTransacaoPAFECF)

    Exit Function

End Function


Function DAVEmitidos_GravaEmTrans(lSequencial As Long, ByVal dtDataDe As Date, ByVal dtDataAte As Date, sNomeArq As String) As Long
'PAFECF

Dim sNomeArq1 As String
Dim sRet As String
Dim sRetorno As String
Dim lTamanho As Long
Dim sDir As String
Dim lErro As Long
Dim dtData As Date
Dim colRegistro As New Collection
Dim iIndice As Integer
Dim sLog As String
Dim lTentaAcessoArquivo As Long
Dim objVenda As ClassVenda
Dim sNomeArq_ChavePrivada As String
Dim sModulo As String
Dim sExpoente As String
Dim sMD5 As String
Dim sAssinatura As String
Dim alComandoOrc(1 To 6) As Long
Dim sRegistroEAD As String
Dim lNumOrcamento As Long
Dim sNomeCliente As String
Dim sCPFCGC As String
Dim sEAD As String
Dim dtDataEmissao As Date
Dim iStatus As Integer
Dim sTexto As String
Dim sEADbd As String
Dim tD2 As typeD2
Dim objItem As ClassItemCupomFiscal
Dim tD3 As typeD3
Dim tD4 As typeD4
Dim lTotRegD2 As Long
Dim lTotRegD3 As Long
Dim tD1 As typeD1
Dim sMensagem As String


On Error GoTo Erro_DAVEmitidos_GravaEmTrans

    For iIndice = LBound(alComandoOrc) To UBound(alComandoOrc)
        alComandoOrc(iIndice) = Comando_AbrirExt(glConexaoOrcPAF)
        If alComandoOrc(iIndice) = 0 Then gError 204765
    Next

    lTamanho = 255
    sRetorno = String(lTamanho, 0)
        
    'funcao que verifica se o caixaconfig.ini foi alterado
    lErro = CF_ECF("CaixaConfig_Verifica_Chave")
    If lErro <> SUCESSO Then gError 204372
        
        
'    Call GetPrivateProfileString(APLICACAO_ORCAMENTO, "Dir", CONSTANTE_ERRO, sRetorno, lTamanho, NOME_ARQUIVO_CAIXA)
'    If sRetorno = String(lTamanho, 0) Then gError 204373
'
'    sDir = StringZ(sRetorno)
'
'    'se o diretorio nao for terminado por \  ===> acrescentar
'    If right(sDir, 1) <> "\" Then sDir = sDir & "\"
'
'    sNomeArq1 = "DAVEMITIDOS" & Format(dtDataDe, "ddmmyy") & Format(dtDataAte, "ddmmyy") & (".txt")
'
'    sNomeArq = sDir & sNomeArq1
'
'    'Verifica se tem orcamento para a data de hoje
'    sRet = Dir(sNomeArq)
'
'    If Len(sRet) <> 0 Then ECF_Apaga_Arquivo sNomeArq
'
'    Open sNomeArq For Append Lock Read Write As #4


'    lErro = Comando_Executar(alComando(1), "SELECT Count(*) FROM D2 WHERE DataDAV >= ? AND DataDAV <= ? ", lTotRegD2, dtDataDe, dtDataAte)
'    If lErro <> AD_SQL_SUCESSO Then gError 210279
'
'    lErro = Comando_BuscarPrimeiro(alComando(1))
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210280
'
'    lErro = Comando_Executar(alComando(2), "SELECT Count(*) FROM D3 WHERE DataDAV >= ? AND DataDAV <= ? ", lTotRegD3, dtDataDe, dtDataAte)
'    If lErro <> AD_SQL_SUCESSO Then gError 210281
'
'    lErro = Comando_BuscarPrimeiro(alComando(2))
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210282
    
'    tD1.sCNPJ = String(STRING_D1_CNPJ, 0)
'    tD1.sInscEstadual = String(STRING_D1_INSCESTADUAL, 0)
'    tD1.sInscMunicipal = String(STRING_D1_INSCMUNICIPAL, 0)
'    tD1.sRazaoSocial = String(STRING_D1_RAZAOSOCIAL, 0)
'
'    lErro = Comando_Executar(alComando(3), "SELECT CNPJ, MAX(InscEstadual), MAX(InscMunicipal), MAX(RazaoSocial), SUM(TotRegD2), SUM(TotRegD3) FROM D1 WHERE DataDAV >= ? AND DataDAV <= ? Group By CNPJ ", _
'    tD1.sCNPJ, tD1.sInscEstadual, tD1.sInscMunicipal, tD1.sRazaoSocial, tD1.lTotRegD2, tD1.lTotRegD3, dtDataDe, dtDataAte)
'    If lErro <> AD_SQL_SUCESSO Then gError 210283
'
'    lErro = Comando_BuscarPrimeiro(alComando(3))
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210284
'
'
'
'    'Inserido no Arquivo o nome do arquivo
'    Print #4, "D1" & Formata_Campo(ALINHAMENTO_DIREITA, 14, "0", tD1.sCNPJ) & Formata_Campo(ALINHAMENTO_DIREITA, 14, " ", tD1.sInscEstadual) & Formata_Campo(ALINHAMENTO_DIREITA, 14, " ", tD1.sInscMunicipal) & IIf(tD1.lTotRegD2 <> lTotRegD2 Or tD1.lTotRegD3 <> lTotRegD3, Replace(Formata_Campo(ALINHAMENTO_DIREITA, 50, " ", tD1.sRazaoSocial), " ", "?"), Formata_Campo(ALINHAMENTO_DIREITA, 50, " ", tD1.sRazaoSocial))
    
    tD2.sCNPJ = String(STRING_D2_CNPJ, 0)
    tD2.sNumeroSerie = String(STRING_D2_NUMEROSERIE, 0)
    tD2.sMFAdicional = String(STRING_D2_MFADICIONAL, 0)
    tD2.sTipoECF = String(STRING_D2_TIPOECF, 0)
    tD2.sMarcaECF = String(STRING_D2_MARCAECF, 0)
    tD2.sModeloECF = String(STRING_D2_MODELOECF, 0)
    tD2.sNumeroDAV = String(STRING_D2_NUMERODAV, 0)
    tD2.sTituloDAV = String(STRING_D2_TITULODAV, 0)
    tD2.sNomeCliente = String(STRING_D2_NOMECLIENTE, 0)
    tD2.sCNPJCliente = String(STRING_D2_CNPJCLIENTE, 0)
    tD2.sEAD = String(STRING_D2_EAD, 0)
    
    
    lErro = Comando_Executar(alComandoOrc(4), "SELECT CNPJ, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, COO, NumeroDAV, DataDAV, TituloDAV, ValorDAV, COOcupomvinculado, SequencialECFVinculado, NomeCliente, CNPJCliente, EAD, CodOrcamento FROM D2 WHERE DataDAV >= ? AND DataDAV <= ? ORDER BY NumeroDAV", _
    tD2.sCNPJ, tD2.sNumeroSerie, tD2.sMFAdicional, tD2.sTipoECF, tD2.sMarcaECF, tD2.sModeloECF, tD2.lCOO, tD2.sNumeroDAV, tD2.dtDataDAV, tD2.sTituloDAV, tD2.dValorDAV, tD2.lCOOCupomVinculado, tD2.iSequencialECFVinculado, tD2.sNomeCliente, tD2.sCNPJCliente, tD2.sEAD, tD2.lCodOrcamento, dtDataDe, dtDataAte)
    If lErro <> AD_SQL_SUCESSO Then gError 210285
    
    lErro = Comando_BuscarPrimeiro(alComandoOrc(4))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210286
    
    
    
    
    
'    sMsg = Space(STRING_ORCAMENTO_MSG)
'    sNomeCliente = Space(STRING_ORCAMENTO_CLINOMERED)
'    sCPFCGC = Space(STRING_ORCAMENTO_CNPJ)
'    sEADbd = Space(STRING_ORCAMENTO_EAD)
'
'    lErro = Comando_Executar(alComando(1), "SELECT Msg, Codigo, ClienteNomeRed, CPFCNPJ, Status, DataEmissao, EAD FROM Orcamento WHERE DataEmissao => ? AND DataEmissao <= ? ORDER BY Codigo", sMsg, lNumOrcamento, sNomeCliente, sCPFCGC, iStatus, dtDataEmissao, sEADbd, dtDataDe, dtDataAte)
'    If lErro <> AD_SQL_SUCESSO Then gError 204766
'
'    lErro = Comando_BuscarPrimeiro(alComando(1))
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 204767
    
    Do While lErro = AD_SQL_SUCESSO
    
    
    
    
        sTexto = tD2.sCNPJ & tD2.sNumeroSerie & tD2.sMFAdicional & tD2.sTipoECF & tD2.sMarcaECF & tD2.sModeloECF & CStr(tD2.lCOO) & tD2.sNumeroDAV & CStr(tD2.dtDataDAV) & tD2.sTituloDAV & CStr(tD2.dValorDAV) & CStr(tD2.lCOOCupomVinculado) & CStr(tD2.iSequencialECFVinculado) & tD2.sNomeCliente & tD2.sCNPJCliente & tD2.lCodOrcamento
        
        lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
        If lErro <> SUCESSO Then gError 210190
    
    
    
    
    
'        colRegistro.Add sMsg
'
'        Set objVenda = New ClassVenda
'
'        lErro = CF_ECF("Registro_ECF_Vendas", colRegistro, sArquivo, 1, objVenda)
'        If lErro <> SUCESSO Then gError 204768
'
'        If objVenda.objCupomFiscal.iTipo = OPTION_DAV Then
'
'            sTexto = CStr(lNumOrcamento) & sNomeCliente & sCPFCGC & sMsg & CStr(dtDataEmissao) & iStatus
'
'            lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
'            If lErro <> SUCESSO Then gError 210191
            
            sMensagem = "D2" & Formata_Campo(ALINHAMENTO_DIREITA, 14, "0", tD2.sCNPJ)
            
            sMensagem = sMensagem & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tD2.sNumeroSerie)
            sMensagem = sMensagem & Formata_Campo(ALINHAMENTO_DIREITA, 1, " ", tD2.sMFAdicional)
            
            sMensagem = sMensagem & Formata_Campo(ALINHAMENTO_DIREITA, 7, " ", tD2.sTipoECF)
            sMensagem = sMensagem & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tD2.sMarcaECF)
            sMensagem = sMensagem & IIf(sEAD <> tD2.sEAD, Replace(Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tD2.sModeloECF), " ", "?"), Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tD2.sModeloECF))
            sMensagem = sMensagem & Format(tD2.lCOO, "000000")
            
            sMensagem = sMensagem & Formata_Campo(ALINHAMENTO_DIREITA, 13, " ", tD2.sNumeroDAV)
            sMensagem = sMensagem & Format(tD2.dtDataDAV, "yyyymmdd")
            sMensagem = sMensagem & Formata_Campo(ALINHAMENTO_DIREITA, 30, " ", tD2.sTituloDAV)
            sMensagem = sMensagem & Formata_Campo(ALINHAMENTO_ESQUERDA, 8, "0", CDbl(Format(tD2.dValorDAV, "0.00")) * 100)
            sMensagem = sMensagem & Format(tD2.lCOOCupomVinculado, "000000")
            sMensagem = sMensagem & Format(tD2.iSequencialECFVinculado, "000")
            sMensagem = sMensagem & Formata_Campo(ALINHAMENTO_DIREITA, 40, " ", tD2.sNomeCliente)
            sMensagem = sMensagem & Formata_Campo(ALINHAMENTO_DIREITA, 14, "0", tD2.sCNPJCliente)
            
            Print #7, sMensagem
            
            
        
        
        lErro = Comando_BuscarProximo(alComandoOrc(4))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210287


    Loop

    tD3.sCNPJ = String(STRING_D3_CNPJ, 0)
    tD3.sNumeroSerie = String(STRING_D3_NUMEROSERIE, 0)
    tD3.sMFAdicional = String(STRING_D3_MFADICIONAL, 0)
    tD3.sTipoECF = String(STRING_D3_TIPOECF, 0)
    tD3.sMarcaECF = String(STRING_D3_MARCAECF, 0)
    tD3.sModeloECF = String(STRING_D3_MODELOECF, 0)
    tD3.sNumeroDAV = String(STRING_D3_NUMERODAV, 0)
    tD3.sCodProduto = String(STRING_D3_CODPRODUTO, 0)
    tD3.sDescProduto = String(STRING_D3_DESCPRODUTO, 0)
    tD3.sUM = String(STRING_D3_UM, 0)
    tD3.sSituacaoTributaria = String(STRING_D3_SITUACAOTRIBUTARIA, 0)
    tD3.sIndicadorCancelamento = String(STRING_D3_INDICADORCANCELAMENTO, 0)
    tD3.sEAD = String(STRING_D3_EAD, 0)
            
    lErro = Comando_Executar(alComandoOrc(5), "SELECT CNPJ, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, COO, NumeroDAV, ItemDAV,  DataDAV, CodProduto, DescProduto, Quantidade, UM, ValorUnitario, Desconto, Acrescimo, ValorTotal, SituacaoTributaria, Aliquota, IndicadorCancelamento, EAD, CodOrcamento FROM D3 WHERE DataDAV >= ? AND DataDAV <= ? ORDER BY NumeroDAV, ItemDAV", _
    tD3.sCNPJ, tD3.sNumeroSerie, tD3.sMFAdicional, tD3.sTipoECF, tD3.sMarcaECF, tD3.sModeloECF, tD3.lCOO, tD3.sNumeroDAV, tD3.iItemDAV, tD3.dtDataDAV, tD3.sCodProduto, tD3.sDescProduto, tD3.dQuantidade, tD3.sUM, tD3.dValorUnitario, tD3.dDesconto, tD3.dAcrescimo, tD3.dValorTotal, tD3.sSituacaoTributaria, tD3.dAliquota, tD3.sIndicadorCancelamento, tD3.sEAD, tD3.lCodOrcamento, dtDataDe, dtDataAte)
    If lErro <> AD_SQL_SUCESSO Then gError 210288
    
    lErro = Comando_BuscarPrimeiro(alComandoOrc(5))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210289
            
            
    Do While lErro = AD_SQL_SUCESSO
            
        sTexto = tD3.sCNPJ & tD3.sNumeroSerie & tD3.sMFAdicional & tD3.sTipoECF & tD3.sMarcaECF & tD3.sModeloECF & CStr(tD3.lCOO) & tD3.sNumeroDAV & CStr(tD3.iItemDAV) & CStr(tD3.dtDataDAV) & tD3.sCodProduto & tD3.sDescProduto & CStr(tD3.dQuantidade) _
        & tD3.sUM & CStr(tD3.dValorUnitario) & CStr(tD3.dDesconto) & CStr(tD3.dAcrescimo) & CStr(tD3.dValorTotal) & tD3.sSituacaoTributaria & CStr(tD3.dAliquota) & tD3.sIndicadorCancelamento & tD3.lCodOrcamento

        lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
        If lErro <> SUCESSO Then gError 210290
            
        sMensagem = "D3"
        sMensagem = sMensagem & Formata_Campo(ALINHAMENTO_ESQUERDA, 13, "0", tD3.sNumeroDAV)
        sMensagem = sMensagem & Format(tD3.dtDataDAV, "yyyymmdd")
        sMensagem = sMensagem & Format(tD3.iItemDAV, "000")
        sMensagem = sMensagem & Formata_Campo(ALINHAMENTO_DIREITA, 14, " ", tD3.sCodProduto)
        sMensagem = sMensagem & IIf(sEAD <> tD3.sEAD, Replace(Formata_Campo(ALINHAMENTO_DIREITA, 100, " ", tD3.sDescProduto), " ", "?"), Formata_Campo(ALINHAMENTO_DIREITA, 100, " ", tD3.sDescProduto))
        sMensagem = sMensagem & Formata_Campo(ALINHAMENTO_ESQUERDA, 7, "0", CDbl(Format(tD3.dQuantidade, "0.000")) * 1000)
        sMensagem = sMensagem & Formata_Campo(ALINHAMENTO_DIREITA, 3, " ", tD3.sUM)
        sMensagem = sMensagem & Formata_Campo(ALINHAMENTO_ESQUERDA, 8, "0", CDbl(Format(tD3.dValorUnitario, "0.00")) * 100)
        sMensagem = sMensagem & Formata_Campo(ALINHAMENTO_ESQUERDA, 8, "0", CDbl(Format(tD3.dDesconto, "0.00")) * 100)
        sMensagem = sMensagem & Formata_Campo(ALINHAMENTO_ESQUERDA, 8, "0", CDbl(Format(tD3.dAcrescimo, "0.00")) * 100)
        sMensagem = sMensagem & Formata_Campo(ALINHAMENTO_ESQUERDA, 14, "0", CDbl(Format(tD3.dValorTotal, "0.00")) * 100)
        sMensagem = sMensagem & tD3.sSituacaoTributaria
        sMensagem = sMensagem & Format(tD3.dAliquota * 10000, "0000")
        sMensagem = sMensagem & tD3.sIndicadorCancelamento & "32"
        
        Print #7, sMensagem
        
        lErro = Comando_BuscarProximo(alComandoOrc(5))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210291
        

    Loop


    tD4.sCNPJ = String(STRING_D4_CNPJ, 0)
    tD4.sNumeroSerie = String(STRING_D4_NUMEROSERIE, 0)
    tD4.sMFAdicional = String(STRING_D4_MFADICIONAL, 0)
    tD4.sTipoECF = String(STRING_D4_TIPOECF, 0)
    tD4.sMarcaECF = String(STRING_D4_MARCAECF, 0)
    tD4.sModeloECF = String(STRING_D4_MODELOECF, 0)
    tD4.sNumeroDAV = String(STRING_D4_NUMERODAV, 0)
    tD4.sCodProduto = String(STRING_D4_CODPRODUTO, 0)
    tD4.sDescProduto = String(STRING_D4_DESCPRODUTO, 0)
    tD4.sUM = String(STRING_D4_UM, 0)
    tD4.sSituacaoTributaria = String(STRING_D4_SITUACAOTRIBUTARIA, 0)
    tD4.sIndicadorCancelamento = String(STRING_D4_INDICADORCANCELAMENTO, 0)
    tD4.sTipoAlteracao = String(STRING_D4_TIPOALTERACAO, 0)
    tD4.sEAD = String(STRING_D4_EAD, 0)
            
    lErro = Comando_Executar(alComandoOrc(6), "SELECT CNPJ, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, COO, NumeroDAV, ItemDAV,  DataAlteracao, HoraAlteracao, CodProduto, DescProduto, Quantidade, UM, ValorUnitario, Desconto, Acrescimo, ValorTotal, SituacaoTributaria, Aliquota, IndicadorCancelamento, EAD, CodOrcamento, TipoAlteracao FROM D4 WHERE DataAlteracao >= ? AND DataAlteracao <= ? ORDER BY NumeroDAV, DataAlteracao, HoraAlteracao", _
    tD4.sCNPJ, tD4.sNumeroSerie, tD4.sMFAdicional, tD4.sTipoECF, tD4.sMarcaECF, tD4.sModeloECF, tD4.lCOO, tD4.sNumeroDAV, tD4.iItemDAV, tD4.dtDataAlteracao, tD4.dHoraAlteracao, tD4.sCodProduto, tD4.sDescProduto, tD4.dQuantidade, tD4.sUM, tD4.dValorUnitario, tD4.dDesconto, tD4.dAcrescimo, tD4.dValorTotal, tD4.sSituacaoTributaria, tD4.dAliquota, tD4.sIndicadorCancelamento, tD4.sEAD, tD4.lCodOrcamento, tD4.sTipoAlteracao, dtDataDe, dtDataAte)
    If lErro <> AD_SQL_SUCESSO Then gError 214164
    
    lErro = Comando_BuscarPrimeiro(alComandoOrc(6))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 214165
            
            
    Do While lErro = AD_SQL_SUCESSO
            
        sTexto = tD4.sCNPJ & tD4.sNumeroSerie & tD4.sMFAdicional & tD4.sTipoECF & tD4.sMarcaECF & tD4.sModeloECF & CStr(tD4.lCOO) & tD4.sNumeroDAV & CStr(tD4.iItemDAV) & CStr(tD4.dtDataAlteracao) & CStr(tD4.dHoraAlteracao) & tD4.sCodProduto & tD4.sDescProduto & CStr(tD4.dQuantidade) & tD4.sUM & CStr(tD4.dValorUnitario) & CStr(tD4.dDesconto) & CStr(tD4.dAcrescimo) & CStr(tD4.dValorTotal) & tD4.sSituacaoTributaria & CStr(tD4.dAliquota) & tD4.sIndicadorCancelamento & tD4.lCodOrcamento & tD4.sTipoAlteracao
    
        lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
        If lErro <> SUCESSO Then gError 210290
            
        sMensagem = "D4"
        sMensagem = sMensagem & Formata_Campo(ALINHAMENTO_ESQUERDA, 13, "0", tD4.sNumeroDAV)
        sMensagem = sMensagem & Format(tD4.dtDataAlteracao, "yyyymmdd")
        sMensagem = sMensagem & Format(CDate(tD4.dHoraAlteracao), "hhmmss")
        sMensagem = sMensagem & Formata_Campo(ALINHAMENTO_DIREITA, 14, " ", tD4.sCodProduto)
        sMensagem = sMensagem & Formata_Campo(ALINHAMENTO_DIREITA, 100, " ", tD4.sDescProduto)
        sMensagem = sMensagem & Formata_Campo(ALINHAMENTO_ESQUERDA, 7, "0", CDbl(Format(tD4.dQuantidade, "0.000")) * 1000)
        sMensagem = sMensagem & Formata_Campo(ALINHAMENTO_DIREITA, 3, " ", tD4.sUM)
        sMensagem = sMensagem & Formata_Campo(ALINHAMENTO_ESQUERDA, 8, "0", CDbl(Format(tD4.dValorUnitario, "0.00")) * 100)
        sMensagem = sMensagem & Formata_Campo(ALINHAMENTO_ESQUERDA, 8, "0", CDbl(Format(tD4.dDesconto, "0.00")) * 100)
        sMensagem = sMensagem & Formata_Campo(ALINHAMENTO_ESQUERDA, 8, "0", CDbl(Format(tD4.dAcrescimo, "0.00")) * 100)
        sMensagem = sMensagem & Formata_Campo(ALINHAMENTO_ESQUERDA, 14, "0", CDbl(Format(tD4.dValorTotal, "0.00")) * 100)
        sMensagem = sMensagem & tD4.sSituacaoTributaria
        sMensagem = sMensagem & Format(tD4.dAliquota * 10000, "0000")
        sMensagem = sMensagem & tD4.sIndicadorCancelamento & "32"
        sMensagem = sMensagem & tD4.sTipoAlteracao
        
        
        Print #7, sMensagem
        
        lErro = Comando_BuscarProximo(alComandoOrc(6))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 214166
        

    Loop


'    Print #4, "D9" & Formata_Campo(ALINHAMENTO_DIREITA, 14, "0", tD1.sCNPJ) & Formata_Campo(ALINHAMENTO_DIREITA, 14, " ", tD1.sInscEstadual) & Format(lTotRegD2, "000000") & Format(lTotRegD3, "000000")
'
'    Close #4
'
'    lErro = AFRAC_CriaAssinaturaRSA(sNomeArq, sRegistroEAD)
'    If lErro <> SUCESSO Then gError 210292

    For iIndice = LBound(alComandoOrc) To UBound(alComandoOrc)
        Call Comando_Fechar(alComandoOrc(iIndice))
    Next

    DAVEmitidos_GravaEmTrans = SUCESSO

    Exit Function

Erro_DAVEmitidos_GravaEmTrans:

    DAVEmitidos_GravaEmTrans = gErr
    
    Select Case gErr

        Case 70
            lTentaAcessoArquivo = lTentaAcessoArquivo + 1
            If lTentaAcessoArquivo < NUM_MAX_LOCK Then Resume
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_LOCADO, gErr, sNomeArq)

        Case 204325, 204326, 204768, 210290, 210292

        Case 204376
            Call Rotina_ErroECF(vbOKOnly, ERRO_GERACAO_ASSINATURA, gErr)

        Case 204765
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)
    
        Case 204770, 204771, 204772, 204766, 104767, 204769
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_ORCAMENTO, gErr)

        
        Case 210279, 210280, 210285 To 210287
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_D2, gErr)

        Case 210281, 210282, 210288, 210289, 210291
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_D3, gErr)

        Case 214164 To 214166
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_D4, gErr)

        Case 210283, 210284
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_D1, gErr)

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 204327)

    End Select
    
'    Close #7
    
    For iIndice = LBound(alComandoOrc) To UBound(alComandoOrc)
        Call Comando_Fechar(alComandoOrc(iIndice))
    Next
    
    Exit Function

End Function


Sub TabProd_Grava()

Dim lErro As Long
Dim lSequencial As Long
Dim sNomeArq As String

On Error GoTo Erro_TabProd_Grava

    'Função que Abre a Transação
    lErro = CF_ECF("Caixa_Transacao_Abrir", lSequencial)
    If lErro <> SUCESSO Then gError 204368

    'Função que Referenciar a Função da Afrac que Vai Executar a Leitura
    lErro = CF_ECF("TabProd_GravaEmTrans", lSequencial, sNomeArq)
    If lErro <> SUCESSO Then gError 204369

    'Função que Encerra a Transação com o Caixa
    lErro = CF_ECF("Caixa_Transacao_Fechar", lSequencial)
    If lErro <> SUCESSO Then gError 204370



'    Call MsgBox("Arquivo de Produtos " & sNomeArq & " gerado com sucesso.", vbOKOnly, "Tabela de Produtos")
    Call Rotina_AvisoECF(vbOKOnly, "Arquivo de Produtos " & sNomeArq & " gerado com sucesso.")

    Exit Sub

Erro_TabProd_Grava:

     Select Case gErr

        Case 204368, 204369, 204370

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 204371)

    End Select
    
'    lSequencial = glSeqTransacaoAberta
            
    'Rollback na transação
    Call CF_ECF("Caixa_Transacao_Rollback", glTransacaoPAFECF)

    Exit Sub

End Sub

Function TabProd_GravaEmTrans(lSequencial As Long, sNomeArq As String) As Long
'PAFECF - Requisito VII - Item 17
 
Dim sNomeArq1 As String
Dim sRet As String
Dim sRetorno As String
Dim lTamanho As Long
Dim sDir As String
Dim lErro As Long
Dim dtData As Date
Dim colRegistro As New Collection
Dim iIndice As Integer
Dim sLog As String
Dim lTentaAcessoArquivo As Long
Dim lTotalRegistros As Long
Dim sNomeArq_ChavePrivada As String
Dim sModulo As String
Dim sExpoente As String
Dim sMD5 As String
Dim sAssinatura As String
Dim objProduto As ClassProduto
Dim objAliquota As New ClassAliquotaICMS
Dim dAliquotaICMS As Double
Dim sRegistroEAD As String
Dim alComando(1 To 3) As Long
Dim tP1 As typeP1
Dim tP2 As typeP2
Dim sTexto As String
Dim sEAD As String
Dim lTotRegP2 As Long
Dim sMensagem As String

On Error GoTo Erro_TabProd_GravaEmTrans

   'Abre os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_AbrirExt(glConexaoPAFECF)
        If alComando(iIndice) = 0 Then gError 210322
    Next

    lTamanho = 255
    sRetorno = String(lTamanho, 0)
        
    'funcao que verifica se o caixaconfig.ini foi alterado
    lErro = CF_ECF("CaixaConfig_Verifica_Chave")
    If lErro <> SUCESSO Then gError 204499
        
        
'    Call GetPrivateProfileString(APLICACAO_ORCAMENTO, "Dir", CONSTANTE_ERRO, sRetorno, lTamanho, NOME_ARQUIVO_CAIXA)
'    If sRetorno = String(lTamanho, 0) Then gError 204500
'
'    sDir = StringZ(sRetorno)
    
    'se o diretorio nao for terminado por \  ===> acrescentar
'    If right(sDir, 1) <> "\" Then sDir = sDir & "\"

'    sNomeArq1 = "LISTAPRODUTOS.TXT"
'
'    sNomeArq = CurDir() & IIf(right(CurDir, 1) <> "\", "\", "") & sNomeArq1
'
'    'Verifica se tem orcamento para a data de hoje
'    sRet = Dir(sNomeArq)
'
'    If Len(sRet) <> 0 Then ECF_Apaga_Arquivo sNomeArq
'
'    Open sNomeArq For Append Lock Read Write As #4

'    tP1.sCNPJ = String(P1_CNPJ, 0)
'    tP1.sInscEstadual = String(P1_INSCESTADUAL, 0)
'    tP1.sInscMunicipal = String(P1_INSCMUNICIPAL, 0)
'    tP1.sRazaoSocial = String(P1_RAZAOSOCIAL, 0)
'
'
'    lErro = Comando_Executar(alComando(1), "SELECT CNPJ, InscEstadual, InscMunicipal, RazaoSocial, TotRegP2 FROM P1", _
'    tP1.sCNPJ, tP1.sInscEstadual, tP1.sInscMunicipal, tP1.sRazaoSocial, tP1.lTotRegP2)
'    If lErro <> AD_SQL_SUCESSO Then gError 210323
'
'    lErro = Comando_BuscarPrimeiro(alComando(1))
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210324
'
'    If lErro <> AD_SQL_SUCESSO Then gError 210330
'
'    'seleciona os registros de P2 da data mais recente
'    lErro = Comando_Executar(alComando(3), "SELECT Count(*) FROM P2", _
'    lTotRegP2)
'    If lErro <> AD_SQL_SUCESSO Then gError 210325
'
'    lErro = Comando_BuscarPrimeiro(alComando(3))
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210326
'
'    'Inserido no Arquivo o nome do arquivo
'    Print #4, "P1" & Formata_Campo(ALINHAMENTO_DIREITA, 14, "0", tP1.sCNPJ) & Formata_Campo(ALINHAMENTO_DIREITA, 14, " ", tP1.sInscEstadual) & Formata_Campo(ALINHAMENTO_DIREITA, 14, " ", tP1.sInscMunicipal) & IIf(tP1.lTotRegP2 <> lTotRegP2, Replace(Formata_Campo(ALINHAMENTO_DIREITA, 50, " ", tP1.sRazaoSocial), " ", "?"), Formata_Campo(ALINHAMENTO_DIREITA, 50, " ", tP1.sRazaoSocial))
    
    tP2.sCNPJ = String(P2_CNPJ, 0)
    tP2.sCodProduto = String(P2_CODPRODUTO, 0)
    tP2.sDescricao = String(P2_DESCRICAO, 0)
    tP2.sUM = String(P2_UM, 0)
    tP2.sIAT = String(P2_IAT, 0)
    tP2.sIPPT = String(P2_IPPT, 0)
    tP2.sEAD = String(P2_EAD, 0)
    tP2.sSituacaoTributaria = String(P2_SITTRIB, 0)
    
    lErro = Comando_Executar(alComando(2), "SELECT CNPJ, CodProduto, Descricao, UM, IAT, IPPT, SituacaoTributaria, Aliquota, ValorUnitario, EAD FROM P2 ORDER BY CodProduto", _
    tP2.sCNPJ, tP2.sCodProduto, tP2.sDescricao, tP2.sUM, tP2.sIAT, tP2.sIPPT, tP2.sSituacaoTributaria, tP2.dAliquota, tP2.dValorUnitario, tP2.sEAD)
    If lErro <> AD_SQL_SUCESSO Then gError 210327
    
    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210328
    
    Do While lErro = AD_SQL_SUCESSO
    
        sTexto = tP2.sCNPJ & left(tP2.sCodProduto, 14) & left(tP2.sDescricao, 50) & tP2.sUM & tP2.sIAT & tP2.sIPPT & tP2.sSituacaoTributaria & Format(tP2.dAliquota * 10000, "0000") & Format(CDbl(Format(IIf(tP2.sIAT = "A", Round(tP2.dValorUnitario, 2), tP2.dValorUnitario), "Fixed")) * 100, "000000000000")
                
        lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
        If lErro <> SUCESSO Then gError 210244
    
        sMensagem = "P2" & Formata_Campo(ALINHAMENTO_DIREITA, 14, "0", tP2.sCNPJ)
            
        sMensagem = sMensagem & Formata_Campo(ALINHAMENTO_DIREITA, 14, " ", tP2.sCodProduto)
        sMensagem = sMensagem & Formata_Campo(ALINHAMENTO_DIREITA, 50, " ", left(tP2.sDescricao, 50))
        sMensagem = sMensagem & IIf(tP2.sEAD <> sEAD, Replace(Formata_Campo(ALINHAMENTO_DIREITA, 6, " ", tP2.sUM), " ", "?"), Formata_Campo(ALINHAMENTO_DIREITA, 6, " ", tP2.sUM))
        sMensagem = sMensagem & tP2.sIAT
        sMensagem = sMensagem & tP2.sIPPT
        sMensagem = sMensagem & tP2.sSituacaoTributaria
        
        sMensagem = sMensagem & Format(tP2.dAliquota * 10000, "0000")
        sMensagem = sMensagem & Format(CDbl(Format(IIf(tP2.sIAT = "A", Round(tP2.dValorUnitario, 2), tP2.dValorUnitario), "Fixed")) * 100, "000000000000")
        
        
        Print #7, sMensagem
        
        lTotalRegistros = lTotalRegistros + 1
            
        lErro = Comando_BuscarProximo(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210329
            
            
    Loop

'    Print #4, "P9" & Formata_Campo(ALINHAMENTO_DIREITA, 14, "0", tP1.sCNPJ) & Formata_Campo(ALINHAMENTO_DIREITA, 14, " ", tP1.sInscEstadual) & Format(lTotalRegistros, "000000")
'
'    Close #4
'
'    lErro = AFRAC_CriaAssinaturaRSA(sNomeArq, sRegistroEAD)
'    If lErro <> SUCESSO Then gError 204501
    
    TabProd_GravaEmTrans = SUCESSO

    Exit Function

Erro_TabProd_GravaEmTrans:

    TabProd_GravaEmTrans = gErr
    
    Select Case gErr

        Case 70
            lTentaAcessoArquivo = lTentaAcessoArquivo + 1
            If lTentaAcessoArquivo < NUM_MAX_LOCK Then Resume
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_LOCADO, gErr, sNomeArq)

        Case 204499, 204500

        Case 204501
            Call Rotina_ErroECF(vbOKOnly, ERRO_GERACAO_ASSINATURA, gErr)

        Case 210322
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)
    
        Case 210323, 210324
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_P1, gErr)

        Case 210325 To 210329
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_P2, gErr)

        Case 210330
            Call Rotina_ErroECF(vbOKOnly, ERRO_P1_NAO_CADASTRADO, gErr)
    
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 204502)

    End Select
    
'    Close #4
    
    Exit Function

End Function



Function MovimentoPorECF_Grava(ByVal colRegistro As Collection) As Long
'Requisito XXVI itens 5 e 6


Dim sArquivo As String
Dim sArquivo1 As String
Dim sCodNacId As String
Dim lErro As Long
Dim sNumeroSerie As String
Dim sMFAdicional As String
Dim sMarcaECF As String
Dim sTipoECF As String
Dim sModeloECF As String
Dim sVersaoSB As String
Dim dtDataInstalacaoSB As Date
Dim sHoraInstalacaoSB As String
Dim sCNPJUsuario As String
Dim iNumeroUsuario As Integer
Dim dtDataUltimaReducaoZ As Date
Dim dtDataUltimoMovimento As Date
Dim sIEUsuario As String
Dim sRegistro As String
Dim lTentaAcessoArquivo As Long
Dim sSequencial As String
Dim objLojaArqFisMestre As New ClassLojaArqFisMestre
Dim colLojaArqFisAnalitico As New Collection
Dim objUltimaReducao As New ClassUltimaReducao
Dim objMovCaixa As New ClassMovimentoCaixa
Dim sRegistro1 As String
Dim sRegistro2 As String
Dim objAliquota As ClassAliquotaICMS
Dim sTotalizadorParcial As String
Dim alComando(1 To 10) As Long
Dim tR03 As typeR03
Dim tR04 As typeR04
Dim tR05 As typeR05
Dim tR06 As typeR06
Dim tR07 As typeR07
Dim dtHora As Date
Dim sZerosQtde As String
Dim sZerosValor As String
Dim sRegistroEAD As String
Dim objAliquota1 As ClassAliquotaICMS
Dim sTexto As String
Dim sEAD As String
Dim lTotReg02 As Long
Dim lTotReg03 As Long
Dim lTotReg04 As Long
Dim lTotReg05 As Long
Dim lTotReg06 As Long
Dim lTotReg07 As Long
Dim iIndice As Integer
Dim iTotalizador As Integer
Dim sCNPJ As String
Dim sIE As String
Dim objConfiguracaoECF As New ClassConfiguracaoECF
Dim dtHoraRedZ As Date
Dim dtData As Date
Dim tR01 As typeR01, sTextoAux As String, sTextoBD As String

On Error GoTo Erro_MovimentoPorECF_Grava


   'Abre os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_AbrirExt(glConexaoPAFECF)
        If alComando(iIndice) = 0 Then gError 207227
    Next

    'traz o registro para a memoria
    lErro = CF_ECF("Registro_ECF_MovcxFechamento", colRegistro, sArquivo, 1, objMovCaixa, objLojaArqFisMestre, colLojaArqFisAnalitico, objUltimaReducao)
    If lErro <> SUCESSO Then gError 207228
        
    lErro = AFRAC_CodigoNacionalIdentificacao(sCodNacId)
    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Codigo Nacional Identificação")
    If lErro <> SUCESSO Then gError 207229

    lErro = AFRAC_LerInformacaoImpressora("002", sNumeroSerie)
    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Informação Impressora")
    If lErro <> SUCESSO Then gError 207230

    lErro = AFRAC_LerInformacaoImpressora("050", sMFAdicional)
    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Informação Impressora")
    If lErro <> SUCESSO Then gError 207231

    lErro = AFRAC_RetornaTipoECF(sTipoECF)
    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Retorna Tipo ECF")
    If lErro <> SUCESSO Then gError 207232

    sTipoECF = Trim(sTipoECF)

    lErro = AFRAC_RetornaMarcaECF(sMarcaECF)
    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Retorna Marca ECF")
    If lErro <> SUCESSO Then gError 207233

    sMarcaECF = Trim(sMarcaECF)

    lErro = AFRAC_RetornaModeloECF(sModeloECF)
    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Retorna Modelo ECF")
    If lErro <> SUCESSO Then gError 207234

    sModeloECF = Trim(sModeloECF)

    lErro = AFRAC_LerInformacaoImpressora("003", sVersaoSB)
    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Informação Impressora")
    If lErro <> SUCESSO Then gError 207235

    lErro = AFRAC_DataInstalacaoSB(dtDataInstalacaoSB)
    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Data Instalação SB")
    If lErro <> SUCESSO Then gError 207236

    lErro = AFRAC_HoraInstalacaoSB(sHoraInstalacaoSB)
    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Hora Instalação SB")
    If lErro <> SUCESSO Then gError 207237

    dtHora = StrParaDate(left(sHoraInstalacaoSB, 2) & ":" & Mid(sHoraInstalacaoSB, 3, 2) & ":" & right(sHoraInstalacaoSB, 2))

    lErro = AFRAC_SequencialECF(sSequencial)
    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Retorna Sequencial ECF")
    If lErro <> SUCESSO Then gError 207238

    lErro = AFRAC_LerInformacaoImpressora("004", sCNPJUsuario)
    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Informação Impressora")
    If lErro <> SUCESSO Then gError 207239

    sCNPJ = sCNPJUsuario
    sCNPJUsuario = ""

    Call Formata_String_Numero(sCNPJ, sCNPJUsuario)

    lErro = AFRAC_LerInformacaoImpressora("005", sIEUsuario)
    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Informação Impressora")
    If lErro <> SUCESSO Then gError 207240

    sIE = sIEUsuario
    sIEUsuario = ""

    Call Formata_String_Numero(sIE, sIEUsuario)

    lErro = AFRAC_NumeroUsuario(iNumeroUsuario)
    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Numero Usuario")
    If lErro <> SUCESSO Then gError 207241

    lErro = CF_ECF("ConfiguracaoECF_Le", objConfiguracaoECF)
    If lErro <> SUCESSO Then gError 210438
        

'        sArquivo = gsDirMVTEF & Formata_Campo(ALINHAMENTO_DIREITA, 6, " ", sCodNacID) & Format(right(sNumeroSerie, 14), "00000000000000")
'
'        sArquivo = sArquivo & Format(objUltimaReducao.dtDataMovimento, "ddmmyyyy") & ".txt"
'
'        sArquivo1 = Dir(sArquivo)
'
'        'se o arquivo existir ==> remove o arquivo
'        If Len(sArquivo1) > 0 Then ECF_Apaga_Arquivo (sArquivo)
'
'        'abre o arquivo q sera gerado
'        Open sArquivo For Append As #7
    
    
    
    
        '****mario *** colocar a chamada as funções que geram o arquivo do ANEXO IV
'        lErro = CF_ECF("ConfiguracaoECF_Le", objConfiguracaoECF)
'        If lErro <> SUCESSO Then gError 210438
    
    
    
    
    
    
    
'        sRegistro = "R01" & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", sNumeroSerie) & Format(sMFAdicional, "@")
'        sRegistro = sRegistro & Formata_Campo(ALINHAMENTO_DIREITA, 7, " ", sTipoECF) & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", sMarcaECF)
'        sRegistro = sRegistro & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", sModeloECF) & Formata_Campo(ALINHAMENTO_DIREITA, 10, " ", sVersaoSB)
'        sRegistro = sRegistro & Format(dtDataInstalacaoSB, "yyyymmdd") & sHoraInstalacaoSB & Format(left(sSequencial, 3), "000") & Format(sCNPJUsuario, "00000000000000") & Formata_Campo(ALINHAMENTO_DIREITA, 14, " ", sIEUsuario)
'        sRegistro = sRegistro & Format(objConfiguracaoECF.sCNPJDesenv, "00000000000000") & Formata_Campo(ALINHAMENTO_DIREITA, 14, " ", objConfiguracaoECF.sIEDesenv) & Formata_Campo(ALINHAMENTO_DIREITA, 14, "0", objConfiguracaoECF.sIMDesenv)
'        sRegistro = sRegistro & Formata_Campo(ALINHAMENTO_DIREITA, 40, " ", objConfiguracaoECF.sRazaoSocialDesenv) & Formata_Campo(ALINHAMENTO_DIREITA, 40, " ", objConfiguracaoECF.sNomePAFECF)
'        sRegistro = sRegistro & Formata_Campo(ALINHAMENTO_DIREITA, 10, " ", objConfiguracaoECF.sVersaoPAFECF) & Formata_Campo(ALINHAMENTO_DIREITA, 32, " ", gsMD5PAFECF)
'        sRegistro = sRegistro & Format(objUltimaReducao.dtDataMovimento, "yyyymmdd") & Format(objUltimaReducao.dtDataMovimento, "yyyymmdd") & Formata_Campo(ALINHAMENTO_DIREITA, 4, " ", objConfiguracaoECF.sVersaoEspReqPAFECF)
'
'        'Inseri no Arquivo
'        Print #7, sRegistro
            
        tR01.sCodNacId = String(R01_CODNACID, 0)
        tR01.sNumeroSerie = String(R01_NUMEROSERIE, 0)
        tR01.sMFAdicional = String(R01_MFADICIONAL, 0)
        tR01.sTipoECF = String(R01_TIPOECF, 0)
        tR01.sMarcaECF = String(R01_MARCAECF, 0)
        tR01.sModeloECF = String(R01_MODELOECF, 0)
        tR01.sVersaoSB = String(R01_VERSAOSB, 0)
        tR01.sCNPJUsu = String(R01_CNPJUSU, 0)
        tR01.sIEUsu = String(R01_IEUSU, 0)
        tR01.sCNPJDesenv = String(R01_CNPJDESENV, 0)
        tR01.sIEDesenv = String(R01_IEDESENV, 0)
        tR01.sIMDesenv = String(R01_IMDESENV, 0)
        tR01.sNomeDesenv = String(R01_NOMEDESENV, 0)
        tR01.sNomePAFECF = String(R01_NOMEPAFECF, 0)
        tR01.sVersaoPAFECF = String(R01_VERSAOPAFECF, 0)
        tR01.sMD5PAFECF = String(R01_MD5PAFECF, 0)
        tR01.sVersaoEspecPAFECF = String(R01_VERSAOESPECPAFECF, 0)
        tR01.sEAD = String(R01_EAD, 0)
        tR01.sHoraInstalacaoSB = String(R01_HORAINSTALACAOSB, 0)

    'Le o registro R01
        'seleciona os registros R03 ordenados por Totalizador para insercao no arquivo
        lErro = Comando_Executar(alComando(10), "SELECT Data, CodNacId, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, VersaoSB, DataInstalacaoSB, HoraInstalacaoSB, " & _
    "SequencialECF, CNPJUsu, InscEstadualUsu, CNPJDesenv, InscEstadualDesenv, InscMunicipalDesenv, " & _
    " NomeDesenv, NomePAFECF, VersaoPAFECF, CodigoMD5,  VersaoERPAFECF, EAD, " & _
    "TotRegR02, TotRegR03, TotRegR04, TotRegR05, TotRegR06, TotRegR07  FROM R01 WHERE Data = ? AND NumeroSerie = ? AND MFAdicional = ? AND TipoECF = ? AND MarcaECF = ? AND ModeloECF = ? ", _
        tR01.dtData, tR01.sCodNacId, tR01.sNumeroSerie, tR01.sMFAdicional, tR01.sTipoECF, tR01.sMarcaECF, tR01.sModeloECF, tR01.sVersaoSB, tR01.dtDataInstalacaoSB, _
        tR01.sHoraInstalacaoSB, tR01.iSequencialECF, tR01.sCNPJUsu, tR01.sIEUsu, tR01.sCNPJDesenv, tR01.sIEDesenv, tR01.sIMDesenv, _
        tR01.sNomeDesenv, tR01.sNomePAFECF, tR01.sVersaoPAFECF, tR01.sMD5PAFECF, tR01.sVersaoEspecPAFECF, tR01.sEAD, _
        tR01.lTotRegR02, tR01.lTotRegR03, tR01.lTotRegR04, tR01.lTotRegR05, tR01.lTotRegR06, tR01.lTotRegR07, _
         objUltimaReducao.dtDataMovimento, left(sNumeroSerie, 20), sMFAdicional, left(sTipoECF, 7), sMarcaECF, sModeloECF)
        If lErro <> AD_SQL_SUCESSO Then gError 210794
        
        lErro = Comando_BuscarPrimeiro(alComando(10))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210795
            
        If lErro = AD_SQL_SEM_DADOS Then
            
            'Insere o registro R01
            lErro = Comando_Executar(alComando(1), "INSERT INTO R01 (Data, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, VersaoSB, DataInstalacaoSB, HoraInstalacaoSB, SequencialECF, CNPJUsu, InscEstadualUsu, CNPJDesenv, InscEstadualDesenv, InscMunicipalDesenv, " & _
            " NomeDesenv, NomePAFECF, VersaoPAFECF, CodigoMD5,  VersaoERPAFECF, CodNacId)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                objUltimaReducao.dtDataMovimento, left(sNumeroSerie, 20), sMFAdicional, left(sTipoECF, 7), sMarcaECF, sModeloECF, sVersaoSB, dtDataInstalacaoSB, Format(dtHora, "hh:mm:ss"), CInt(left(sSequencial, 3)), sCNPJUsuario, sIEUsuario, objConfiguracaoECF.sCNPJDesenv, objConfiguracaoECF.sIEDesenv, objConfiguracaoECF.sIMDesenv, objConfiguracaoECF.sRazaoSocialDesenv, objConfiguracaoECF.sNomePAFECF, objConfiguracaoECF.sVersaoPAFECF, gsMD5PAFECF, objConfiguracaoECF.sVersaoEspReqPAFECF, sCodNacId)
            If lErro <> AD_SQL_SUCESSO Then gError 207242
            
        End If
            
        'trata registro 02
        
        dtHoraRedZ = StrParaDate(left(objUltimaReducao.sHoraReducao, 2) & ":" & Mid(objUltimaReducao.sHoraReducao, 3, 2) & ":" & right(objUltimaReducao.sHoraReducao, 2))
        
        
'        sRegistro1 = "R02" & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", sNumeroSerie) & Format(sMFAdicional, "@")
'        sRegistro1 = sRegistro1 & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", sModeloECF) & Format(iNumeroUsuario, "00")
'        sRegistro1 = sRegistro1 & Format(objLojaArqFisMestre.lCRZ, "000000") & Format(objUltimaReducao.lCOOReducaoZ, "000000")
'        sRegistro1 = sRegistro1 & Format(objLojaArqFisMestre.lCRO, "000000") & Format(objUltimaReducao.dtDataMovimento, "yyyymmdd")
'        sRegistro1 = sRegistro1 & Format(objUltimaReducao.dtDataReducao, "yyyymmdd") & objUltimaReducao.sHoraReducao
'        sRegistro1 = sRegistro1 & Format(CDbl(Format(objUltimaReducao.dVendaBruta, "Fixed")) * 100, "00000000000000") & objUltimaReducao.sIncidenciaDescontoISS
'
'        'Inseri no Arquivo
'        Print #7, sRegistro1
            
        sTexto = objUltimaReducao.dtDataMovimento & left(sNumeroSerie, 20) & sMFAdicional & left(sTipoECF, 7) & sMarcaECF & sModeloECF & iNumeroUsuario & _
        objLojaArqFisMestre.lCRZ & objUltimaReducao.lCOOReducaoZ & objLojaArqFisMestre.lCRO & objUltimaReducao.dtDataReducao & Format(dtHoraRedZ, "hh:mm:ss") & _
        Round(objUltimaReducao.dVendaBruta, 2) & objUltimaReducao.sIncidenciaDescontoISS
        
        lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
        If lErro <> SUCESSO Then gError 210332
            
           
           
        'Insere o registro R02
        lErro = Comando_Executar(alComando(2), "INSERT INTO R02 (DataMovimento, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, NumeroUsuario, CRZ, COO, CRO, DataEmissaoRedZ, HoraEmissaoRedZ, VendaBruta, IncidenciaDescontoISS, EAD) " & _
        " VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
            objUltimaReducao.dtDataMovimento, left(sNumeroSerie, 20), sMFAdicional, left(sTipoECF, 7), sMarcaECF, sModeloECF, iNumeroUsuario, objLojaArqFisMestre.lCRZ, objUltimaReducao.lCOOReducaoZ, objLojaArqFisMestre.lCRO, objUltimaReducao.dtDataReducao, Format(dtHoraRedZ, "hh:mm:ss"), _
            Round(objUltimaReducao.dVendaBruta, 2), objUltimaReducao.sIncidenciaDescontoISS, sEAD)
        If lErro <> AD_SQL_SUCESSO Then gError 207243
        
        lTotReg02 = 1
        iTotalizador = 0
            
        
        For Each objAliquota In objUltimaReducao.colAliquotas
        
            If objAliquota.dAliquota <> 0 Then
            
'                For Each objAliquota1 In gobjLojaECF.colAliquotaICMS
'                    If objAliquota1.iISS = objAliquota.iISS And objAliquota.dAliquota = objAliquota1.dAliquota Then
'                        Exit For
'                    End If
'                    iTotalizador = iTotalizador + 1
'                Next
            
                iTotalizador = iTotalizador + 1
            
                If objAliquota.iISS = 0 Then
                    sTotalizadorParcial = Format(iTotalizador, "00") & "T" & Format(CDbl(Format(objAliquota.dAliquota, "Fixed")) * 100, "0000")
                Else
                    sTotalizadorParcial = Format(iTotalizador, "00") & "S" & Format(CDbl(Format(objAliquota.dAliquota, "Fixed")) * 100, "0000")
                End If
                
                sTexto = objUltimaReducao.dtDataMovimento & left(sNumeroSerie, 20) & sMFAdicional & left(sTipoECF, 7) & sMarcaECF & sModeloECF & iNumeroUsuario & objLojaArqFisMestre.lCRZ & sTotalizadorParcial & objAliquota.dValorTotalizadoLoja
                
                lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
                If lErro <> SUCESSO Then gError 210333
                
                'Insere o registro R03
                lErro = Comando_Executar(alComando(3), "INSERT INTO R03 (DataMovimento, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, NumeroUsuario, CRZ, TotalizadorParcial, Valor, EAD) " & _
                " VALUES (?,?,?,?,?,?,?,?,?,?,?)", _
                    objUltimaReducao.dtDataMovimento, left(sNumeroSerie, 20), sMFAdicional, left(sTipoECF, 7), sMarcaECF, sModeloECF, iNumeroUsuario, objLojaArqFisMestre.lCRZ, _
                    sTotalizadorParcial, objAliquota.dValorTotalizadoLoja, sEAD)
                If lErro <> AD_SQL_SUCESSO Then gError 207244
        
            End If
        
        Next
    
        sTexto = objUltimaReducao.dtDataMovimento & left(sNumeroSerie, 20) & sMFAdicional & left(sTipoECF, 7) & sMarcaECF & sModeloECF & iNumeroUsuario & objLojaArqFisMestre.lCRZ & "F1" & objUltimaReducao.dSubstTribICMS
        
        lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
        If lErro <> SUCESSO Then gError 210334
    
        'Insere o registro R03
        lErro = Comando_Executar(alComando(3), "INSERT INTO R03 (DataMovimento, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, NumeroUsuario, CRZ, TotalizadorParcial, Valor, EAD) " & _
        " VALUES (?,?,?,?,?,?,?,?,?,?,?)", _
            objUltimaReducao.dtDataMovimento, left(sNumeroSerie, 20), sMFAdicional, left(sTipoECF, 7), sMarcaECF, sModeloECF, iNumeroUsuario, objLojaArqFisMestre.lCRZ, _
            "F1", objUltimaReducao.dSubstTribICMS, sEAD)
        If lErro <> AD_SQL_SUCESSO Then gError 207245
        
        sTexto = objUltimaReducao.dtDataMovimento & left(sNumeroSerie, 20) & sMFAdicional & left(sTipoECF, 7) & sMarcaECF & sModeloECF & iNumeroUsuario & objLojaArqFisMestre.lCRZ & "I1" & objUltimaReducao.dIsentoICMS
        
        lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
        If lErro <> SUCESSO Then gError 210335
        
        'Insere o registro R03
        lErro = Comando_Executar(alComando(3), "INSERT INTO R03 (DataMovimento, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, NumeroUsuario, CRZ, TotalizadorParcial, Valor, EAD) " & _
        " VALUES (?,?,?,?,?,?,?,?,?,?,?)", _
            objUltimaReducao.dtDataMovimento, left(sNumeroSerie, 20), sMFAdicional, left(sTipoECF, 7), sMarcaECF, sModeloECF, iNumeroUsuario, objLojaArqFisMestre.lCRZ, _
            "I1", objUltimaReducao.dIsentoICMS, sEAD)
        If lErro <> AD_SQL_SUCESSO Then gError 207246
        
        sTexto = objUltimaReducao.dtDataMovimento & left(sNumeroSerie, 20) & sMFAdicional & left(sTipoECF, 7) & sMarcaECF & sModeloECF & iNumeroUsuario & objLojaArqFisMestre.lCRZ & "N1" & objUltimaReducao.dNaoIncideICMS
        
        lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
        If lErro <> SUCESSO Then gError 210336
        
        'Insere o registro R03
        lErro = Comando_Executar(alComando(3), "INSERT INTO R03 (DataMovimento, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, NumeroUsuario, CRZ, TotalizadorParcial, Valor, EAD) " & _
        " VALUES (?,?,?,?,?,?,?,?,?,?,?)", _
            objUltimaReducao.dtDataMovimento, left(sNumeroSerie, 20), sMFAdicional, left(sTipoECF, 7), sMarcaECF, sModeloECF, iNumeroUsuario, objLojaArqFisMestre.lCRZ, _
            "N1", objUltimaReducao.dNaoIncideICMS, sEAD)
        If lErro <> AD_SQL_SUCESSO Then gError 207247
        
        sTexto = objUltimaReducao.dtDataMovimento & left(sNumeroSerie, 20) & sMFAdicional & left(sTipoECF, 7) & sMarcaECF & sModeloECF & iNumeroUsuario & objLojaArqFisMestre.lCRZ & "FS1" & objUltimaReducao.dSubstTribISS
        
        lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
        If lErro <> SUCESSO Then gError 210337
        
        'Insere o registro R03
        lErro = Comando_Executar(alComando(3), "INSERT INTO R03 (DataMovimento, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, NumeroUsuario, CRZ, TotalizadorParcial, Valor, EAD) " & _
        " VALUES (?,?,?,?,?,?,?,?,?,?,?)", _
            objUltimaReducao.dtDataMovimento, left(sNumeroSerie, 20), sMFAdicional, left(sTipoECF, 7), sMarcaECF, sModeloECF, iNumeroUsuario, objLojaArqFisMestre.lCRZ, _
            "FS1", objUltimaReducao.dSubstTribISS, sEAD)
        If lErro <> AD_SQL_SUCESSO Then gError 207248
        
        sTexto = objUltimaReducao.dtDataMovimento & left(sNumeroSerie, 20) & sMFAdicional & left(sTipoECF, 7) & sMarcaECF & sModeloECF & iNumeroUsuario & objLojaArqFisMestre.lCRZ & "IS1" & objUltimaReducao.dIsentoISS
        
        lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
        If lErro <> SUCESSO Then gError 210338
        
        'Insere o registro R03
        lErro = Comando_Executar(alComando(3), "INSERT INTO R03 (DataMovimento, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, NumeroUsuario, CRZ, TotalizadorParcial, Valor, EAD) " & _
        " VALUES (?,?,?,?,?,?,?,?,?,?,?)", _
            objUltimaReducao.dtDataMovimento, left(sNumeroSerie, 20), sMFAdicional, left(sTipoECF, 7), sMarcaECF, sModeloECF, iNumeroUsuario, objLojaArqFisMestre.lCRZ, _
            "IS1", objUltimaReducao.dIsentoISS, sEAD)
        If lErro <> AD_SQL_SUCESSO Then gError 207249
        
        sTexto = objUltimaReducao.dtDataMovimento & left(sNumeroSerie, 20) & sMFAdicional & left(sTipoECF, 7) & sMarcaECF & sModeloECF & iNumeroUsuario & objLojaArqFisMestre.lCRZ & "NS1" & objUltimaReducao.dNaoIncideISS
        
        lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
        If lErro <> SUCESSO Then gError 210339
        
        'Insere o registro R03
        lErro = Comando_Executar(alComando(3), "INSERT INTO R03 (DataMovimento, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, NumeroUsuario, CRZ, TotalizadorParcial, Valor, EAD) " & _
        " VALUES (?,?,?,?,?,?,?,?,?,?,?)", _
            objUltimaReducao.dtDataMovimento, left(sNumeroSerie, 20), sMFAdicional, left(sTipoECF, 7), sMarcaECF, sModeloECF, iNumeroUsuario, objLojaArqFisMestre.lCRZ, _
            "NS1", objUltimaReducao.dNaoIncideISS, sEAD)
        If lErro <> AD_SQL_SUCESSO Then gError 207250
        
        sTexto = objUltimaReducao.dtDataMovimento & left(sNumeroSerie, 20) & sMFAdicional & left(sTipoECF, 7) & sMarcaECF & sModeloECF & iNumeroUsuario & objLojaArqFisMestre.lCRZ & "OPNF" & objUltimaReducao.dTotalNaoFiscal
        
        lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
        If lErro <> SUCESSO Then gError 210340
        
        'Insere o registro R03
        lErro = Comando_Executar(alComando(3), "INSERT INTO R03 (DataMovimento, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, NumeroUsuario, CRZ, TotalizadorParcial, Valor, EAD) " & _
        " VALUES (?,?,?,?,?,?,?,?,?,?,?)", _
            objUltimaReducao.dtDataMovimento, left(sNumeroSerie, 20), sMFAdicional, left(sTipoECF, 7), sMarcaECF, sModeloECF, iNumeroUsuario, objLojaArqFisMestre.lCRZ, _
            "OPNF", objUltimaReducao.dTotalNaoFiscal, sEAD)
        If lErro <> AD_SQL_SUCESSO Then gError 207251
        
        sTexto = objUltimaReducao.dtDataMovimento & left(sNumeroSerie, 20) & sMFAdicional & left(sTipoECF, 7) & sMarcaECF & sModeloECF & iNumeroUsuario & objLojaArqFisMestre.lCRZ & "DT" & objUltimaReducao.dDescontoICMS
        
        lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
        If lErro <> SUCESSO Then gError 210341
        
        'Insere o registro R03
        lErro = Comando_Executar(alComando(3), "INSERT INTO R03 (DataMovimento, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, NumeroUsuario, CRZ, TotalizadorParcial, Valor, EAD) " & _
        " VALUES (?,?,?,?,?,?,?,?,?,?,?)", _
            objUltimaReducao.dtDataMovimento, left(sNumeroSerie, 20), sMFAdicional, left(sTipoECF, 7), sMarcaECF, sModeloECF, iNumeroUsuario, objLojaArqFisMestre.lCRZ, _
            "DT", objUltimaReducao.dDescontoICMS, sEAD)
        If lErro <> AD_SQL_SUCESSO Then gError 207252
        
        sTexto = objUltimaReducao.dtDataMovimento & left(sNumeroSerie, 20) & sMFAdicional & left(sTipoECF, 7) & sMarcaECF & sModeloECF & iNumeroUsuario & objLojaArqFisMestre.lCRZ & "DS" & objUltimaReducao.dDescontoISS
        
        lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
        If lErro <> SUCESSO Then gError 210342
        
        'Insere o registro R03
        lErro = Comando_Executar(alComando(3), "INSERT INTO R03 (DataMovimento, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, NumeroUsuario, CRZ, TotalizadorParcial, Valor, EAD) " & _
        " VALUES (?,?,?,?,?,?,?,?,?,?,?)", _
            objUltimaReducao.dtDataMovimento, left(sNumeroSerie, 20), sMFAdicional, left(sTipoECF, 7), sMarcaECF, sModeloECF, iNumeroUsuario, objLojaArqFisMestre.lCRZ, _
            "DS", objUltimaReducao.dDescontoISS, sEAD)
        If lErro <> AD_SQL_SUCESSO Then gError 207253
        
        sTexto = objUltimaReducao.dtDataMovimento & left(sNumeroSerie, 20) & sMFAdicional & left(sTipoECF, 7) & sMarcaECF & sModeloECF & iNumeroUsuario & objLojaArqFisMestre.lCRZ & "AT" & objUltimaReducao.dAcrescimoICMS
        
        lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
        If lErro <> SUCESSO Then gError 210343
        
        'Insere o registro R03
        lErro = Comando_Executar(alComando(3), "INSERT INTO R03 (DataMovimento, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, NumeroUsuario, CRZ, TotalizadorParcial, Valor, EAD) " & _
        " VALUES (?,?,?,?,?,?,?,?,?,?,?)", _
            objUltimaReducao.dtDataMovimento, left(sNumeroSerie, 20), sMFAdicional, left(sTipoECF, 7), sMarcaECF, sModeloECF, iNumeroUsuario, objLojaArqFisMestre.lCRZ, _
            "AT", objUltimaReducao.dAcrescimoICMS, sEAD)
        If lErro <> AD_SQL_SUCESSO Then gError 207254
        
        sTexto = objUltimaReducao.dtDataMovimento & left(sNumeroSerie, 20) & sMFAdicional & left(sTipoECF, 7) & sMarcaECF & sModeloECF & iNumeroUsuario & objLojaArqFisMestre.lCRZ & "AS" & objUltimaReducao.dAcrescimoISS
        
        lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
        If lErro <> SUCESSO Then gError 210344
        
        'Insere o registro R03
        lErro = Comando_Executar(alComando(3), "INSERT INTO R03 (DataMovimento, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, NumeroUsuario, CRZ, TotalizadorParcial, Valor, EAD) " & _
        " VALUES (?,?,?,?,?,?,?,?,?,?,?)", _
            objUltimaReducao.dtDataMovimento, left(sNumeroSerie, 20), sMFAdicional, left(sTipoECF, 7), sMarcaECF, sModeloECF, iNumeroUsuario, objLojaArqFisMestre.lCRZ, _
            "AS", objUltimaReducao.dAcrescimoISS, sEAD)
        If lErro <> AD_SQL_SUCESSO Then gError 207255
        
        sTexto = objUltimaReducao.dtDataMovimento & left(sNumeroSerie, 20) & sMFAdicional & left(sTipoECF, 7) & sMarcaECF & sModeloECF & iNumeroUsuario & objLojaArqFisMestre.lCRZ & "Can-T" & objUltimaReducao.dCancelamentoICMS
        
        lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
        If lErro <> SUCESSO Then gError 210345
        
        
        'Insere o registro R03
        lErro = Comando_Executar(alComando(3), "INSERT INTO R03 (DataMovimento, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, NumeroUsuario, CRZ, TotalizadorParcial, Valor, EAD) " & _
        " VALUES (?,?,?,?,?,?,?,?,?,?,?)", _
            objUltimaReducao.dtDataMovimento, left(sNumeroSerie, 20), sMFAdicional, left(sTipoECF, 7), sMarcaECF, sModeloECF, iNumeroUsuario, objLojaArqFisMestre.lCRZ, _
            "Can-T", objUltimaReducao.dCancelamentoICMS, sEAD)
        If lErro <> AD_SQL_SUCESSO Then gError 207256
        
        sTexto = objUltimaReducao.dtDataMovimento & left(sNumeroSerie, 20) & sMFAdicional & left(sTipoECF, 7) & sMarcaECF & sModeloECF & iNumeroUsuario & objLojaArqFisMestre.lCRZ & "Can-S" & objUltimaReducao.dCancelamentoISS
        
        lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
        If lErro <> SUCESSO Then gError 210346
        
        'Insere o registro R03
        lErro = Comando_Executar(alComando(3), "INSERT INTO R03 (DataMovimento, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, NumeroUsuario, CRZ, TotalizadorParcial, Valor, EAD) " & _
        " VALUES (?,?,?,?,?,?,?,?,?,?,?)", _
            objUltimaReducao.dtDataMovimento, left(sNumeroSerie, 20), sMFAdicional, left(sTipoECF, 7), sMarcaECF, sModeloECF, iNumeroUsuario, objLojaArqFisMestre.lCRZ, _
            "Can-S", objUltimaReducao.dCancelamentoISS, sEAD)
        If lErro <> AD_SQL_SUCESSO Then gError 207257
    
        tR03.sTotalizadorParcial = String(R03_TOTALIZADORPARCIAL, 0)
                                
        'seleciona os registros R03 ordenados por Totalizador para insercao no arquivo
        lErro = Comando_Executar(alComando(4), "SELECT TotalizadorParcial, Valor FROM R03 WHERE DataMovimento = ? AND NumeroSerie = ? AND MFAdicional = ? AND TipoECF = ? AND MarcaECF = ? AND ModeloECF = ? AND NumeroUsuario = ? AND CRZ = ? ORDER BY NumeroSerie, ModeloECF, NumeroUsuario, CRZ, TotalizadorParcial", _
        tR03.sTotalizadorParcial, tR03.dValor, objUltimaReducao.dtDataMovimento, left(sNumeroSerie, 20), sMFAdicional, left(sTipoECF, 7), sMarcaECF, sModeloECF, iNumeroUsuario, objLojaArqFisMestre.lCRZ)
        If lErro <> AD_SQL_SUCESSO Then gError 207258
        
'        sRegistro1 = "R03" & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", sNumeroSerie) & Format(sMFAdicional, "@")
'        sRegistro1 = sRegistro1 & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", sModeloECF) & Format(iNumeroUsuario, "00")
'        sRegistro1 = sRegistro1 & Format(objLojaArqFisMestre.lCRZ, "000000")
        
        
        lErro = Comando_BuscarPrimeiro(alComando(4))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 207259
        
        Do While lErro = AD_SQL_SUCESSO
        
'            sRegistro2 = sRegistro1 & Formata_Campo(ALINHAMENTO_DIREITA, 7, " ", tR03.sTotalizadorParcial) & Format(CDbl(Format(tR03.dValor, "Fixed")) * 100, "0000000000000")
'            Print #7, sRegistro2
        
            lTotReg03 = lTotReg03 + 1
                
            lErro = Comando_BuscarProximo(alComando(4))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 207260
        
        Loop
        
        tR04.sNumeroSerie = String(R01_NUMEROSERIE, 0)
        tR04.sMFAdicional = String(R01_MFADICIONAL, 0)
        tR04.sTipoECF = String(R01_TIPOECF, 0)
        tR04.sMarcaECF = String(R01_MARCAECF, 0)
        tR04.sModeloECF = String(R01_MODELOECF, 0)
        tR04.sTipoDesconto = String(R04_TIPODESCONTO, 0)
        tR04.sTipoAcrescimo = String(R04_TIPOACRESCIMO, 0)
        tR04.sIndicadorCancelamento = String(R04_INDICADORCANCELAMENTO, 0)
        tR04.sOrdemDescAcresc = String(R04_ORDEMDESCACRESC, 0)
        tR04.sNomeAdiquirente = String(R04_NOMEADQUIRENTE, 0)
        tR04.sCPFCNPJ = String(R04_CPFCNPJ, 0)
        tR04.sEAD = String(R04_EAD, 0)
        
        
        'seleciona os registros R04 ordenados por CCF para insercao no arquivo
        lErro = Comando_Executar(alComando(5), "SELECT DataMovimento, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, NumeroUsuario, CCF, COO, DataEmissao, Subtotal, Desconto, TipoDesconto, Acrescimo, TipoAcrescimo, ValorTotal, IndicadorCancelamento, ValorCancAcrescimo, OrdemDescAcresc, NomeAdiquirente, CPFCNPJ, EAD FROM R04 WHERE DataMovimento = ? AND NumeroSerie = ? AND MFAdicional = ? AND TipoECF = ? AND MarcaECF = ? AND ModeloECF = ? AND NumeroUsuario = ? ORDER BY CCF", _
        tR04.dtDataMovimento, tR04.sNumeroSerie, tR04.sMFAdicional, tR04.sTipoECF, tR04.sMarcaECF, tR04.sModeloECF, tR04.iNumeroUsuario, tR04.lCCF, tR04.lCOO, tR04.dtDataEmissao, tR04.dSubtotal, tR04.dDesconto, tR04.sTipoDesconto, tR04.dAcrescimo, tR04.sTipoAcrescimo, tR04.dValorTotal, tR04.sIndicadorCancelamento, tR04.dValorCancAcrescimo, tR04.sOrdemDescAcresc, tR04.sNomeAdiquirente, tR04.sCPFCNPJ, tR04.sEAD, objUltimaReducao.dtDataMovimento, left(sNumeroSerie, 20), sMFAdicional, left(sTipoECF, 7), sMarcaECF, sModeloECF, iNumeroUsuario)
        If lErro <> AD_SQL_SUCESSO Then gError 207261
        
    
        lErro = Comando_BuscarPrimeiro(alComando(5))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 207262
        
        Do While lErro = AD_SQL_SUCESSO
        
            sTexto = tR04.dtDataMovimento & tR04.sNumeroSerie & tR04.sMFAdicional & tR04.sTipoECF & tR04.sMarcaECF & tR04.sModeloECF & tR04.iNumeroUsuario & _
            tR04.lCCF & tR04.lCOO & tR04.dtDataEmissao & tR04.dSubtotal & tR04.dDesconto & tR04.sTipoDesconto & tR04.dAcrescimo & tR04.sTipoAcrescimo & _
            tR04.dValorTotal & tR04.sIndicadorCancelamento & tR04.dValorCancAcrescimo & tR04.sOrdemDescAcresc & tR04.sNomeAdiquirente & tR04.sCPFCNPJ
        
            lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
            If lErro <> SUCESSO Then gError 210360
    
        
'            sRegistro1 = "R04" & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR04.sNumeroSerie) & Format(tR04.sMFAdicional, "@")
'            sRegistro1 = sRegistro1 & IIf(tR04.sEAD <> sEAD, Replace(Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR04.sModeloECF), " ", "?"), Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR04.sModeloECF)) & Format(tR04.iNumeroUsuario, "00")
'            sRegistro1 = sRegistro1 & Format(tR04.lCCF, "000000") & Format(tR04.lCOO, "000000")
'            sRegistro1 = sRegistro1 & Format(tR04.dtDataEmissao, "yyyymmdd") & Format(CDbl(Format(tR04.dSubtotal, "Fixed")) * 100, "00000000000000")
'            sRegistro1 = sRegistro1 & Format(CDbl(Format(tR04.dDesconto, "Fixed")) * 100, "0000000000000") & tR04.sTipoDesconto
'            sRegistro1 = sRegistro1 & Format(CDbl(Format(tR04.dAcrescimo, "Fixed")) * 100, "0000000000000") & tR04.sTipoAcrescimo
'            sRegistro1 = sRegistro1 & Format(CDbl(Format(tR04.dValorTotal, "Fixed")) * 100, "00000000000000") & tR04.sIndicadorCancelamento & Format(CDbl(Format(tR04.dValorCancAcrescimo, "Fixed")) * 100, "0000000000000")
'            sRegistro1 = sRegistro1 & tR04.sOrdemDescAcresc & Formata_Campo(ALINHAMENTO_DIREITA, 40, " ", tR04.sNomeAdiquirente)
'            sRegistro1 = sRegistro1 & Formata_Campo(ALINHAMENTO_ESQUERDA, 14, "0", tR04.sCPFCNPJ)
'
'            Print #7, sRegistro1
        
            lTotReg04 = lTotReg04 + 1
        
            lErro = Comando_BuscarProximo(alComando(5))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 207263
        
        Loop
        
        
        tR05.sNumeroSerie = String(R01_NUMEROSERIE, 0)
        tR05.sMFAdicional = String(R01_MFADICIONAL, 0)
        tR05.sTipoECF = String(R01_TIPOECF, 0)
        tR05.sMarcaECF = String(R01_MARCAECF, 0)
        tR05.sModeloECF = String(R01_MODELOECF, 0)
        tR05.sCodProduto = String(R05_CODPRODUTO, 0)
        tR05.sDescProduto = String(R05_DESCPRODUTO, 0)
        tR05.sUM = String(R05_UM, 0)
        tR05.sTotalizadorParcial = String(R05_TOTALIZADORPARCIAL, 0)
        tR05.sIndicadorCancelamento = String(R05_INDICADORCANCELAMENTO, 0)
        tR05.sIAT = String(R05_IAT, 0)
        tR05.sPPT = String(R05_PPT, 0)
        tR05.sEAD = String(R05_EAD, 0)
        
        
        'seleciona os registros R05 ordenados por CCF para insercao no arquivo
        lErro = Comando_Executar(alComando(6), "SELECT DataMovimento, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, NumeroUsuario, COO, Item, CCF, CodProduto, DescProduto, Quantidade, ValorUnitario, Desconto, Acrescimo, " & _
        " ValorTotal, TotalizadorParcial, IndicadorCancelamento, QuantidadeCancelada, ValorCancelado, ValorCancelAcrescimo, IAT, PPT, Casasdecimaisqtde, Casasdecimaisvalor, UM, EAD FROM R05 WHERE  DataMovimento = ? AND NumeroSerie = ? AND MFAdicional = ? AND TipoECF = ? AND MarcaECF = ? AND ModeloECF = ? AND NumeroUsuario = ? ORDER BY CCF, Item", _
        tR05.dtDataMovimento, tR05.sNumeroSerie, tR05.sMFAdicional, tR05.sTipoECF, tR05.sMarcaECF, tR05.sModeloECF, tR05.iNumeroUsuario, tR05.lCOO, tR05.iItem, tR05.lCCF, tR05.sCodProduto, tR05.sDescProduto, tR05.dQuantidade, tR05.dValorUnitario, tR05.dDesconto, tR05.dAcrescimo, tR05.dValorTotal, tR05.sTotalizadorParcial, tR05.sIndicadorCancelamento, tR05.dQuantidadeCancelada, tR05.dValorCancelado, tR05.dValorCancelAcrescimo, tR05.sIAT, tR05.sPPT, tR05.iCasasdecimaisqtde, tR05.iCasasdecimaisvalor, tR05.sUM, tR05.sEAD, objUltimaReducao.dtDataMovimento, left(sNumeroSerie, 20), sMFAdicional, left(sTipoECF, 7), sMarcaECF, sModeloECF, iNumeroUsuario)
        If lErro <> AD_SQL_SUCESSO Then gError 207264
        
        lErro = Comando_BuscarPrimeiro(alComando(6))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 207265
        
        Do While lErro = AD_SQL_SUCESSO
        
            For iIndice = 1 To tR05.iCasasdecimaisqtde
                sZerosQtde = sZerosQtde & "0"
            Next
        
            For iIndice = 1 To tR05.iCasasdecimaisvalor
                sZerosValor = sZerosValor & "0"
            Next
        
            sTexto = tR05.dtDataMovimento & tR05.sNumeroSerie & tR05.sMFAdicional & tR05.sTipoECF & tR05.sMarcaECF & tR05.sModeloECF & tR05.iNumeroUsuario & _
                tR05.lCCF & tR05.lCOO & tR05.iItem & tR05.sCodProduto & tR05.sDescProduto & tR05.dQuantidade & _
                tR05.sUM & tR05.dValorUnitario & tR05.dDesconto & tR05.dAcrescimo & tR05.dValorTotal & _
                tR05.sTotalizadorParcial & tR05.sIndicadorCancelamento & tR05.dQuantidadeCancelada & tR05.dValorCancelado & tR05.dValorCancelAcrescimo & tR05.sIAT & tR05.sPPT & tR05.iCasasdecimaisqtde & tR05.iCasasdecimaisvalor
            
            lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
            If lErro <> SUCESSO Then gError 210361
        
'            sRegistro1 = "R05" & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR05.sNumeroSerie) & Format(tR05.sMFAdicional, "@")
'            sRegistro1 = sRegistro1 & IIf(tR05.sEAD <> sEAD, Replace(Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR05.sModeloECF), " ", "?"), Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR05.sModeloECF)) & Format(tR05.iNumeroUsuario, "00")
'            sRegistro1 = sRegistro1 & Format(tR05.lCOO, "000000") & Format(tR05.lCCF, "000000")
'            sRegistro1 = sRegistro1 & Format(tR05.iItem, "000") & Formata_Campo(ALINHAMENTO_DIREITA, 14, " ", tR05.sCodProduto)
'            sRegistro1 = sRegistro1 & Formata_Campo(ALINHAMENTO_DIREITA, 100, " ", tR05.sDescProduto) & Format(CDbl(Format(tR05.dQuantidade, "0." & sZerosQtde)) * (10 ^ tR05.iCasasdecimaisqtde), "0000000")
'            sRegistro1 = sRegistro1 & Formata_Campo(ALINHAMENTO_DIREITA, 3, " ", tR05.sUM) & Format(CDbl(Format(tR05.dValorUnitario, "0." & sZerosValor)) * (10 ^ tR05.iCasasdecimaisvalor), "00000000") & Format(CDbl(Format(tR05.dDesconto, "Fixed")) * 100, "00000000")
'            sRegistro1 = sRegistro1 & Format(CDbl(Format(tR05.dAcrescimo, "Fixed")) * 100, "00000000") & Format(CDbl(Format(tR05.dValorTotal, "Fixed")) * 100, "00000000000000")
'            sRegistro1 = sRegistro1 & Formata_Campo(ALINHAMENTO_DIREITA, 7, " ", tR05.sTotalizadorParcial) & tR05.sIndicadorCancelamento
'            sRegistro1 = sRegistro1 & Format(tR05.dQuantidadeCancelada, "0000000") & Format(CDbl(Format(tR05.dValorCancelado, "Fixed")) * 100, "0000000000000") & Format(CDbl(Format(tR05.dValorCancelAcrescimo, "Fixed")) * 100, "0000000000000") & tR05.sIAT & tR05.sPPT & Format(tR05.iCasasdecimaisqtde, "0") & Format(tR05.iCasasdecimaisvalor, "0")
'
'            Print #7, sRegistro1
        
            lTotReg05 = lTotReg05 + 1
        
            lErro = Comando_BuscarProximo(alComando(6))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 207266
        
        Loop
        
        tR06.sNumeroSerie = String(R01_NUMEROSERIE, 0)
        tR06.sMFAdicional = String(R01_MFADICIONAL, 0)
        tR06.sModeloECF = String(R01_MODELOECF, 0)
        tR06.sDenominacao = String(R06_DENOMINACAO, 0)
        tR06.sEAD = String(R06_EAD, 0)
        tR06.sTipoECF = String(R01_TIPOECF, 0)
        tR06.sMarcaECF = String(R01_MARCAECF, 0)
        tR06.sHoraFinalEmissao = String(R06_HORAFINALEMISSAO, 0)
        
        'seleciona os registros R06 ordenados por COO para insercao no arquivo
        lErro = Comando_Executar(alComando(7), "SELECT DataMovimento, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, NumeroUsuario,  COO, GNF, GRG, CDC, denominacao, datafinalemissao, horafinalemissao, EAD " & _
        "  FROM R06 WHERE DataMovimento = ? AND NumeroSerie = ? AND MFAdicional = ? AND TipoECF = ? AND MarcaECF = ? AND ModeloECF = ? AND NumeroUsuario = ? ORDER BY COO", _
        tR06.dtDataMovimento, tR06.sNumeroSerie, tR06.sMFAdicional, tR06.sTipoECF, tR06.sMarcaECF, tR06.sModeloECF, tR06.iNumeroUsuario, tR06.lCOO, tR06.lGNF, tR06.lGRG, tR06.lCDC, tR06.sDenominacao, tR06.dtDataFinalEmissao, tR06.sHoraFinalEmissao, tR06.sEAD, objUltimaReducao.dtDataMovimento, left(sNumeroSerie, 20), sMFAdicional, left(sTipoECF, 7), sMarcaECF, sModeloECF, iNumeroUsuario)
        If lErro <> AD_SQL_SUCESSO Then gError 207267
        
        lErro = Comando_BuscarPrimeiro(alComando(7))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 207268
        
        Do While lErro = AD_SQL_SUCESSO
        
            sTexto = tR06.dtDataMovimento & tR06.sNumeroSerie & tR06.sMFAdicional & tR06.sTipoECF & tR06.sMarcaECF & tR06.sModeloECF & tR06.iNumeroUsuario & _
                tR06.lCOO & tR06.lGNF & tR06.lGRG & tR06.lCDC & tR06.sDenominacao & tR06.dtDataFinalEmissao & tR06.sHoraFinalEmissao
        
        
            lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
            If lErro <> SUCESSO Then gError 210363
        
'            sRegistro1 = "R06" & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR06.sNumeroSerie) & Format(tR06.sMFAdicional, "@")
'            sRegistro1 = sRegistro1 & IIf(tR06.sEAD <> sEAD, Replace(Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR06.sModeloECF), " ", "?"), Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR06.sModeloECF)) & Format(tR06.iNumeroUsuario, "00")
'            sRegistro1 = sRegistro1 & Format(tR06.lCOO, "000000") & Format(tR06.lGNF, "000000") & Format(tR06.lGRG, "000000")
'            sRegistro1 = sRegistro1 & Format(tR06.lCDC, "0000") & Formata_Campo(ALINHAMENTO_DIREITA, 2, " ", tR06.sDenominacao)
'            sRegistro1 = sRegistro1 & Format(tR06.dtDataFinalEmissao, "yyyymmdd") & Format(CDate(tR06.sHoraFinalEmissao), "hhmmss")
'
'
'            Print #7, sRegistro1
        
            lTotReg06 = lTotReg06 + 1
        
        
            lErro = Comando_BuscarProximo(alComando(7))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 207269
        
        Loop
        
        tR07.sNumeroSerie = String(R01_NUMEROSERIE, 0)
        tR07.sMFAdicional = String(R01_MFADICIONAL, 0)
        tR07.sModeloECF = String(R01_MODELOECF, 0)
        tR07.sTipoECF = String(R01_TIPOECF, 0)
        tR07.sMarcaECF = String(R01_MARCAECF, 0)
        tR07.sMeioPagamento = String(R07_MEIOPAGAMENTO, 0)
        tR07.sIndicadorEstorno = String(R07_INDICADORESTORNO, 0)
        tR07.sEAD = String(R07_EAD, 0)
        
        
        'seleciona os registros R07 ordenados por COO para insercao no arquivo
        lErro = Comando_Executar(alComando(8), "SELECT DataMovimento, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, NumeroUsuario, COO, GNF, CCF, MeioPagamento, Valor, IndicadorEstorno, ValorEstorno, EAD " & _
        "  FROM R07 WHERE DataMovimento = ? AND NumeroSerie = ? AND MFAdicional = ? AND TipoECF = ? AND MarcaECF = ? AND ModeloECF = ? AND NumeroUsuario = ? ORDER BY COO, MeioPagamento", _
        tR07.dtDataMovimento, tR07.sNumeroSerie, tR07.sMFAdicional, tR07.sTipoECF, tR07.sMarcaECF, tR07.sModeloECF, tR07.iNumeroUsuario, tR07.lCOO, tR07.lGNF, tR07.lCCF, tR07.sMeioPagamento, tR07.dValor, tR07.sIndicadorEstorno, tR07.dValorEstorno, tR07.sEAD, objUltimaReducao.dtDataMovimento, left(sNumeroSerie, 20), sMFAdicional, left(sTipoECF, 7), sMarcaECF, sModeloECF, iNumeroUsuario)
        If lErro <> AD_SQL_SUCESSO Then gError 207270
        
        
        lErro = Comando_BuscarPrimeiro(alComando(8))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 207271
        
        Do While lErro = AD_SQL_SUCESSO
        
            sTexto = tR07.dtDataMovimento & tR07.sNumeroSerie & tR07.sMFAdicional & tR07.sTipoECF & tR07.sMarcaECF & tR07.sModeloECF & tR07.iNumeroUsuario & _
                tR07.lCOO & tR07.lCCF & tR07.lGNF & tR07.sMeioPagamento & tR07.dValor & tR07.sIndicadorEstorno & tR07.dValorEstorno
                
                
    
            lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
            If lErro <> SUCESSO Then gError 210372
        
        
'            sRegistro1 = "R07" & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", sNumeroSerie) & Format(sMFAdicional, "@")
'            sRegistro1 = sRegistro1 & IIf(tR07.sEAD <> sEAD, Replace(Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR07.sModeloECF), " ", "?"), Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR07.sModeloECF)) & Format(tR07.iNumeroUsuario, "00")
'            sRegistro1 = sRegistro1 & Format(tR07.lCOO, "000000") & Format(tR07.lCCF, "000000") & Format(tR07.lGNF, "000000")
'            sRegistro1 = sRegistro1 & Formata_Campo(ALINHAMENTO_DIREITA, R07_MEIOPAGAMENTO, " ", tR07.sMeioPagamento)
'            sRegistro1 = sRegistro1 & Format(CDbl(Format(tR07.dValor, "Fixed")) * 100, "0000000000000")
'            sRegistro1 = sRegistro1 & tR07.sIndicadorEstorno & Format(CDbl(Format(tR07.dValorEstorno, "Fixed")) * 100, "0000000000000")
'
'            Print #7, sRegistro1
        
            lTotReg07 = lTotReg07 + 1
        
            lErro = Comando_BuscarProximo(alComando(8))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 207272
        
        Loop
        

        
'        Close #7
    
'        lErro = AFRAC_CriaAssinaturaRSA(sArquivo, sRegistroEAD)
'        If lErro <> SUCESSO Then gError 207273
        
        sTexto = objUltimaReducao.dtDataMovimento & left(sNumeroSerie, 20) & sMFAdicional & left(sTipoECF, 7) & sMarcaECF & sModeloECF & sVersaoSB & dtDataInstalacaoSB & Format(dtHora, "hh:mm:ss") & CInt(left(sSequencial, 3)) & sCNPJUsuario & sIEUsuario & objConfiguracaoECF.sCNPJDesenv & objConfiguracaoECF.sIEDesenv & objConfiguracaoECF.sIMDesenv & objConfiguracaoECF.sRazaoSocialDesenv & objConfiguracaoECF.sNomePAFECF & objConfiguracaoECF.sVersaoPAFECF & gsMD5PAFECF & objConfiguracaoECF.sVersaoEspReqPAFECF & sCodNacId
        sTexto = sTexto & lTotReg02 & lTotReg03 & lTotReg04 & lTotReg05 & lTotReg06 & lTotReg07
        
        lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
        If lErro <> SUCESSO Then gError 210331
        
        lErro = Comando_Executar(alComando(9), "UPDATE R01 SET TotRegR02 = ?, TotRegR03 = ?, TotRegR04 = ?, TotRegR05 = ?, TotRegR06 = ?, TotRegR07 = ?, EAD = ? WHERE  Data = ? AND NumeroSerie = ? AND MFAdicional = ? AND TipoECF = ? AND MarcaECF = ? AND ModeloECF = ? ", _
            lTotReg02, lTotReg03, lTotReg04, lTotReg05, lTotReg06, lTotReg07, sEAD, objUltimaReducao.dtDataMovimento, left(sNumeroSerie, 20), sMFAdicional, left(sTipoECF, 7), sMarcaECF, sModeloECF)
        If lErro <> AD_SQL_SUCESSO Then gError 210375
        
'        Call MovimentoPorECF_Grava_Testa(objUltimaReducao.dtDataMovimento)
        
        For iIndice = LBound(alComando) To UBound(alComando)
            lErro = Comando_Fechar(alComando(iIndice))
        Next
        
    '    Call MsgBox("Arquivo " & sArquivo & " foi gerado com sucesso.", vbOKOnly, "Movimentos Diários")
'        Call Rotina_AvisoECF(vbOKOnly, "Arquivo de Movimentos Diários " & sArquivo & " foi gerado com sucesso.")
    
    
    MovimentoPorECF_Grava = SUCESSO

    Exit Function

Erro_MovimentoPorECF_Grava:

    MovimentoPorECF_Grava = gErr
    
    Select Case gErr

        Case 70
            lTentaAcessoArquivo = lTentaAcessoArquivo + 1
            If lTentaAcessoArquivo < NUM_MAX_LOCK Then Resume
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_LOCADO, gErr, sArquivo)

        Case 207227
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)

        Case 207228 To 207241, 210331 To 210346, 210360, 210361, 210363, 210372, 210375, 210438

        Case 207242
            Call Rotina_ErroECF(vbOKOnly, ERRO_INCLUSAO_R01, gErr)

        Case 207243
            Call Rotina_ErroECF(vbOKOnly, ERRO_INCLUSAO_R02, gErr)

        Case 207244 To 207257
            Call Rotina_ErroECF(vbOKOnly, ERRO_INCLUSAO_R03, gErr)

        Case 207258 To 207260
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_R03, gErr)

        Case 207261 To 207263
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_R04, gErr)

        Case 207264 To 207266
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_R05, gErr)

        Case 207267 To 207269
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_R06, gErr)

        Case 207270 To 207272
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_R07, gErr)

        Case 207273
            Call Rotina_ErroECF(vbOKOnly, ERRO_GERACAO_ASSINATURA, gErr)

        Case 210794 To 210795
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_R01, gErr)

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 207274)

    End Select
    
'    Close #7
    
    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function


Private Function MovimentoCaixa_Le_Registro02(sArqMov As String, ByVal dtDataIni As Date, ByVal dtDataFim As Date, ByVal sNumeroSerie As String, ByVal sMFAdicional As String, ByVal sModeloECF As String, ByVal iNumeroUsuario As Integer, dtDataUltimaReducaoZ As Date) As Long
'funcao que le as reducoes z e grava registro 02

Dim lErro As Long
Dim sTipo As String
Dim iPos As Integer
Dim iPosEsc As Integer
Dim iIndice As Integer
Dim iIndice1 As Integer
Dim iIndice2 As Integer
Dim sNomeArq As String
Dim iPosInicio As Integer
Dim bAchou As Boolean
Dim bAchouAbert As Boolean
Dim colRegistroTemp As New Collection
Dim sSeqAbert As String
Dim sSeqFech As String
Dim sRegistro As String
Dim colRegistro As New Collection
Dim iRegistro As Integer
Dim iNum As Integer
Dim iSeqArq As Integer
Dim lTamanho As Long
Dim sRetorno As String
Dim sNomeArq1 As String
Dim sNomeArq2 As String
Dim sRet As String
Dim sArquivo As String
Dim objVenda As New ClassVenda
Dim sNomeArq0 As String
Dim iStatus As Integer
Dim vbMsg As VbMsgBoxResult
Dim objArqSeq As New ClassArqSeq
Dim lCountOrcamento As Long
Dim objLojaArqFisMestre As New ClassLojaArqFisMestre
Dim colLojaArqFisAnalitico As New Collection
Dim objUltimaReducao As New ClassUltimaReducao
Dim sRegistro1 As String
Dim objMovCaixa As ClassMovimentoCaixa

On Error GoTo Erro_MovimentoCaixa_Le_Registro02
    
        dtDataUltimaReducaoZ = DATA_NULA
    
        iPosInicio = 1
    
        Open sArqMov For Input As #8
    
        iIndice = 1
        
        Do While Not EOF(8)
                    
            'Busca o próximo registro do arquivo
            Line Input #8, sRegistro
                    
            If sRegistro <> "" Then
                            
                iIndice = iIndice + 1
                
                'Procura o Primeiro Control para saber o tipo do registro
                iPos = InStr(iPosInicio, sRegistro, Chr(vbKeyControl))
                
                sTipo = Mid(sRegistro, iPosInicio, iPos - iPosInicio)
                
                Select Case sTipo
                    
                    'verifica se é de abertura
                    Case TIPOREGISTROECF_ABRESEQ
                        'se encontrei um sequencial aberto antes do encerramento do anterior-->desprezo o anterior
                        If bAchouAbert Then Set colRegistroTemp = New Collection
                        'Recolhe o sequencial
                        sSeqAbert = Mid(sRegistro, iPos + 1, Len(sRegistro) - (iPos + 1))
                        bAchouAbert = True
                            'Procura o end
                        iPosEsc = InStr(iPos, sRegistro, Chr(vbKeyEnd))
                        
                    'verifica se é de fechamento
                    Case TIPOREGISTROECF_ENCERRASEQ
                        'Recolhe o sequencial
                        sSeqFech = Mid(sRegistro, iPos + 1, Len(sRegistro) - (iPos + 1))
                        If sSeqAbert = sSeqFech Then bAchou = True
                        
                    Case TIPOREGISTROECF_FECHAMENTOCAIXA
                        colRegistroTemp.Add sRegistro
                                        
'                    Case Else
'                        colRegistroTemp.Add sRegistro
                                        
                End Select
                
                If bAchou Then
                
                    If colRegistroTemp.Count > 0 Then
                
                        Set objLojaArqFisMestre = New ClassLojaArqFisMestre
                        Set colLojaArqFisAnalitico = New Collection
                        Set objUltimaReducao = New ClassUltimaReducao
                        Set objMovCaixa = New ClassMovimentoCaixa
                    
                        'traz o registro para a memoria
                        lErro = CF_ECF("Registro_ECF_MovcxFechamento", colRegistroTemp, sArquivo, 1, objMovCaixa, objLojaArqFisMestre, colLojaArqFisAnalitico, objUltimaReducao)
                        If lErro <> SUCESSO Then gError 204570
                            
                        dtDataUltimaReducaoZ = objUltimaReducao.dtDataMovimento
                            
                        If objUltimaReducao.dtDataMovimento >= dtDataIni And objUltimaReducao.dtDataMovimento <= dtDataFim Then
                        
                        
                            sRegistro1 = "R02" & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", sNumeroSerie) & Format(sMFAdicional, "@")
                            sRegistro1 = sRegistro1 & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", sModeloECF) & Format(iNumeroUsuario, "00")
                            sRegistro1 = sRegistro1 & Format(objLojaArqFisMestre.lCRZ, "000000") & Format(objUltimaReducao.lCOOReducaoZ, "000000")
                            sRegistro1 = sRegistro1 & Format(objLojaArqFisMestre.lCRO, "000000") & Format(objUltimaReducao.dtDataMovimento, "yyyymmdd")
                            sRegistro1 = sRegistro1 & Format(objMovCaixa.dtDataMovimento, "yyyymmdd") & Format(objMovCaixa.dHora, "hhmmss")
                            sRegistro1 = sRegistro1 & Format(objUltimaReducao.dVendaBruta * 100, "00000000000000") & objUltimaReducao.sIncidenciaDescontoISS
                        
                            'Inseri no Arquivo
                            Print #7, sRegistro1
                            
                        
                        End If
                        
                    End If
                    
                        
                    bAchouAbert = False
                    bAchou = False
                End If
            End If
        Loop
        
    
    Close #8
    
    MovimentoCaixa_Le_Registro02 = SUCESSO
    
    Exit Function
    
Erro_MovimentoCaixa_Le_Registro02:
    
    MovimentoCaixa_Le_Registro02 = gErr
    lErro = gErr
    Close #8
    
    
    Select Case lErro
            
        Case 204570
            
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, lErro, Error$, 204571)

    End Select
    
    Exit Function
    
End Function

Private Function MovimentoCaixa_Le_Registro03(sArqMov As String, ByVal dtDataIni As Date, ByVal dtDataFim As Date, ByVal sNumeroSerie As String, ByVal sMFAdicional As String, ByVal sModeloECF As String, ByVal iNumeroUsuario As Integer, dtDataUltimaReducaoZ As Date) As Long
'funcao que le os totalizadores das reducoes z e grava registro 03

Dim lErro As Long
Dim sTipo As String
Dim iPos As Integer
Dim iPosEsc As Integer
Dim iIndice As Integer
Dim iIndice1 As Integer
Dim iIndice2 As Integer
Dim sNomeArq As String
Dim iPosInicio As Integer
Dim bAchou As Boolean
Dim bAchouAbert As Boolean
Dim colRegistroTemp As New Collection
Dim sSeqAbert As String
Dim sSeqFech As String
Dim sRegistro As String
Dim colRegistro As New Collection
Dim iRegistro As Integer
Dim iNum As Integer
Dim iSeqArq As Integer
Dim lTamanho As Long
Dim sRetorno As String
Dim sNomeArq1 As String
Dim sNomeArq2 As String
Dim sRet As String
Dim sArquivo As String
Dim objVenda As New ClassVenda
Dim sNomeArq0 As String
Dim iStatus As Integer
Dim vbMsg As VbMsgBoxResult
Dim objArqSeq As New ClassArqSeq
Dim lCountOrcamento As Long
Dim objLojaArqFisMestre As New ClassLojaArqFisMestre
Dim colLojaArqFisAnalitico As New Collection
Dim objUltimaReducao As New ClassUltimaReducao
Dim sRegistro1 As String
Dim sRegistro2 As String
Dim objMovCaixa As ClassMovimentoCaixa
Dim objAliquota As ClassAliquotaICMS

On Error GoTo Erro_MovimentoCaixa_Le_Registro03
    
        dtDataUltimaReducaoZ = DATA_NULA
    
        iPosInicio = 1
    
        Open sArqMov For Input As #8
    
        iIndice = 1
        
        Do While Not EOF(8)
                    
            'Busca o próximo registro do arquivo
            Line Input #8, sRegistro
                    
            If sRegistro <> "" Then
                            
                iIndice = iIndice + 1
                
                'Procura o Primeiro Control para saber o tipo do registro
                iPos = InStr(iPosInicio, sRegistro, Chr(vbKeyControl))
                
                sTipo = Mid(sRegistro, iPosInicio, iPos - iPosInicio)
                
                Select Case sTipo
                    
                    'verifica se é de abertura
                    Case TIPOREGISTROECF_ABRESEQ
                        'se encontrei um sequencial aberto antes do encerramento do anterior-->desprezo o anterior
                        If bAchouAbert Then Set colRegistroTemp = New Collection
                        'Recolhe o sequencial
                        sSeqAbert = Mid(sRegistro, iPos + 1, Len(sRegistro) - (iPos + 1))
                        bAchouAbert = True
                            'Procura o end
                        iPosEsc = InStr(iPos, sRegistro, Chr(vbKeyEnd))
                        
                    'verifica se é de fechamento
                    Case TIPOREGISTROECF_ENCERRASEQ
                        'Recolhe o sequencial
                        sSeqFech = Mid(sRegistro, iPos + 1, Len(sRegistro) - (iPos + 1))
                        If sSeqAbert = sSeqFech Then bAchou = True
                        
                    Case TIPOREGISTROECF_FECHAMENTOCAIXA
                        colRegistroTemp.Add sRegistro
                                        
'                    Case Else
'                        colRegistroTemp.Add sRegistro
                                        
                End Select
                
                If bAchou Then
                
                    If colRegistroTemp.Count > 0 Then
                
                        Set objLojaArqFisMestre = New ClassLojaArqFisMestre
                        Set colLojaArqFisAnalitico = New Collection
                        Set objUltimaReducao = New ClassUltimaReducao
                        Set objMovCaixa = New ClassMovimentoCaixa
                    
                        'traz o registro para a memoria
                        lErro = CF("Registro_ECF_MovcxFechamento", colRegistroTemp, sArquivo, 1, objMovCaixa, objLojaArqFisMestre, colLojaArqFisAnalitico, objUltimaReducao)
                        If lErro <> SUCESSO Then gError 204572
                            
                        sRegistro1 = "R03" & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", sNumeroSerie) & Format(sMFAdicional, "@")
                        sRegistro1 = sRegistro1 & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", sModeloECF) & Format(iNumeroUsuario, "00")
                        sRegistro1 = sRegistro1 & Format(objLojaArqFisMestre.lCRZ, "000000")
                            
                            
                        dtDataUltimaReducaoZ = objUltimaReducao.dtDataMovimento
                            
                        If objUltimaReducao.dtDataMovimento >= dtDataIni And objUltimaReducao.dtDataMovimento <= dtDataFim Then
                        
                            For Each objAliquota In objUltimaReducao.colAliquotas
                            
                                If objAliquota.dAliquota <> 0 Then
                                
                                    If objAliquota.iISS = 0 Then
                                        sRegistro2 = sRegistro1 & "01T" & Format(objAliquota.dAliquota * 100, "0000")
                                    Else
                                        sRegistro2 = sRegistro1 & "01S" & Format(objAliquota.dAliquota * 100, "0000")
                                    End If
                                    
                                    sRegistro2 = sRegistro2 & Format(objAliquota.dValorTotalizadoLoja * 100, "0000000000000")
                            
                                    'Inseri no Arquivo
                                    Print #7, sRegistro2
                            
                                End If
                            
                            Next
                        
                            sRegistro2 = sRegistro1 & "F1" & Format(objUltimaReducao.dSubstTribICMS * 100, "0000000000000")
                            Print #7, sRegistro2
                            
                            sRegistro2 = sRegistro1 & "I1" & Format(objUltimaReducao.dIsentoICMS * 100, "0000000000000")
                            Print #7, sRegistro2
                            
                            sRegistro2 = sRegistro1 & "N1" & Format(objUltimaReducao.dNaoIncideICMS * 100, "0000000000000")
                            Print #7, sRegistro2
                            
                            sRegistro2 = sRegistro1 & "FS1" & Format(objUltimaReducao.dSubstTribISS * 100, "0000000000000")
                            Print #7, sRegistro2
                            
                            sRegistro2 = sRegistro1 & "IS1" & Format(objUltimaReducao.dIsentoISS * 100, "0000000000000")
                            Print #7, sRegistro2
                            
                            sRegistro2 = sRegistro1 & "NS1" & Format(objUltimaReducao.dNaoIncideISS * 100, "0000000000000")
                            Print #7, sRegistro2
                            
                            sRegistro2 = sRegistro1 & "OPNF" & Format(objUltimaReducao.dTotalNaoFiscal * 100, "0000000000000")
                            Print #7, sRegistro2
                            
                            sRegistro2 = sRegistro1 & "DT" & Format(objUltimaReducao.dDescontoICMS * 100, "0000000000000")
                            Print #7, sRegistro2
                            
                            sRegistro2 = sRegistro1 & "DS" & Format(objUltimaReducao.dDescontoISS * 100, "0000000000000")
                            Print #7, sRegistro2
                            
                            sRegistro2 = sRegistro1 & "AT" & Format(objUltimaReducao.dAcrescimoICMS * 100, "0000000000000")
                            Print #7, sRegistro2
                            
                            sRegistro2 = sRegistro1 & "AS" & Format(objUltimaReducao.dAcrescimoISS * 100, "0000000000000")
                            Print #7, sRegistro2
                            
                            sRegistro2 = sRegistro1 & "Can-T" & Format(objUltimaReducao.dCancelamentoICMS * 100, "0000000000000")
                            Print #7, sRegistro2
                            
                            sRegistro2 = sRegistro1 & "Can-S" & Format(objUltimaReducao.dCancelamentoISS * 100, "0000000000000")
                            Print #7, sRegistro2
                            
                        End If
                        
                    End If
                        
                    bAchouAbert = False
                    bAchou = False
                End If
            End If
        Loop
        
    
    Close #8
    
    MovimentoCaixa_Le_Registro03 = SUCESSO
    
    Exit Function
    
Erro_MovimentoCaixa_Le_Registro03:
    
    MovimentoCaixa_Le_Registro03 = gErr
    lErro = gErr
    Close #8
    
    Select Case lErro
            
        Case 204572
            
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, lErro, Error$, 204573)

    End Select
    
    Exit Function
    
End Function

Private Function MovimentoCaixa_Le_Registro04(sArqMov As String, ByVal dtDataIni As Date, ByVal dtDataFim As Date, ByVal sNumeroSerie As String, ByVal sMFAdicional As String, ByVal sModeloECF As String, ByVal iNumeroUsuario As Integer, dtDataUltimoMovimento As Date) As Long
'funcao que le os cupons fiscais e grava registro 04

Dim lErro As Long
Dim sTipo As String
Dim iPos As Integer
Dim iPosEsc As Integer
Dim iIndice As Integer
Dim iIndice1 As Integer
Dim iIndice2 As Integer
Dim sNomeArq As String
Dim iPosInicio As Integer
Dim bAchou As Boolean
Dim bAchouAbert As Boolean
Dim bAchouVenda As Boolean
Dim bAchouCancela As Boolean
Dim colRegistroTemp As New Collection
Dim sSeqAbert As String
Dim sSeqFech As String
Dim sRegistro As String
Dim colRegistro As New Collection
Dim iRegistro As Integer
Dim iNum As Integer
Dim iSeqArq As Integer
Dim lTamanho As Long
Dim sRetorno As String
Dim sNomeArq1 As String
Dim sNomeArq2 As String
Dim sRet As String
Dim sArquivo As String
Dim objVenda As New ClassVenda
Dim sNomeArq0 As String
Dim iStatus As Integer
Dim vbMsg As VbMsgBoxResult
Dim sRegistro1 As String
Dim sSeq1 As String
Dim objMovCaixa As ClassMovimentoCaixa
Dim sRegistroCancela As String
Dim iPosInicio1 As Integer
Dim iPosKeyControl As Integer
Dim iPosEscape As Integer

On Error GoTo Erro_MovimentoCaixa_Le_Registro04
    
        dtDataUltimoMovimento = DATA_NULA
    
        iPosInicio = 1
    
        Open sArqMov For Input As #8
    
        iIndice = 1
        
        Do While Not EOF(8)
                    
            'Busca o próximo registro do arquivo
            Line Input #8, sRegistro
                    
            If sRegistro <> "" Then
                            
                iIndice = iIndice + 1
                
                'Procura o Primeiro Control para saber o tipo do registro
                iPos = InStr(iPosInicio, sRegistro, Chr(vbKeyControl))
                
                sTipo = Mid(sRegistro, iPosInicio, iPos - iPosInicio)
                
                Select Case sTipo
                    
                    'verifica se é de abertura
                    Case TIPOREGISTROECF_ABRESEQ
                        'se encontrei um sequencial aberto antes do encerramento do anterior-->desprezo o anterior
                        If bAchouAbert Then Set colRegistroTemp = New Collection
                        'Recolhe o sequencial
                        sSeqAbert = Mid(sRegistro, iPos + 1, Len(sRegistro) - (iPos + 1))
                        bAchouAbert = True
                            'Procura o end
                        iPosEsc = InStr(iPos, sRegistro, Chr(vbKeyEnd))
                        
                    'verifica se é de fechamento
                    Case TIPOREGISTROECF_ENCERRASEQ
                        'Recolhe o sequencial
                        sSeqFech = Mid(sRegistro, iPos + 1, Len(sRegistro) - (iPos + 1))
                        If sSeqAbert = sSeqFech Then bAchou = True
                        
                    Case TIPOREGISTROECF_VENDAS
                        colRegistroTemp.Add sRegistro
                        bAchouVenda = True
                                        
                    Case TIPOREGISTROECF_EXCLUSAOCUPOM
                        colRegistroTemp.Add sRegistro
                        bAchouCancela = True
                                        
'                    Case Else
'                        colRegistroTemp.Add sRegistro
                                        
                End Select
                
                If bAchou Then
                
                    If bAchouVenda And Len(sRegistro1) > 0 Then
                        Print #7, sRegistro1
                        sRegistro1 = ""
                    End If
                
                    If colRegistroTemp.Count > 0 And bAchouVenda Then
                
                        Set objVenda = New ClassVenda
                    
                        lErro = CF_ECF("Registro_ECF_Vendas", colRegistroTemp, sArquivo, 1, objVenda)
                        If lErro <> SUCESSO Then gError 204574
    
                        dtDataUltimoMovimento = objVenda.objCupomFiscal.dtDataEmissao
                            
                        If objVenda.objCupomFiscal.dtDataEmissao >= dtDataIni And objVenda.objCupomFiscal.dtDataEmissao <= dtDataFim Then
                        
                        
                            sRegistro1 = "R04" & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", sNumeroSerie) & Format(sMFAdicional, "@")
                            sRegistro1 = sRegistro1 & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", sModeloECF) & Format(iNumeroUsuario, "00")
                            sRegistro1 = sRegistro1 & Format(objVenda.objCupomFiscal.lCCF, "000000") & Format(objVenda.objCupomFiscal.lNumero, "000000")
                            sRegistro1 = sRegistro1 & Format(objVenda.objCupomFiscal.dtDataEmissao, "yyyymmdd") & Format(objVenda.objCupomFiscal.dValorProdutos * 100, "00000000000000")
                            sRegistro1 = sRegistro1 & Format(objVenda.objCupomFiscal.dValorDesconto * 100, "0000000000000") & "V"
                            sRegistro1 = sRegistro1 & Format(objVenda.objCupomFiscal.dValorAcrescimo * 100, "0000000000000") & "V"
                            sRegistro1 = sRegistro1 & Format(objVenda.objCupomFiscal.dValorTotal * 100, "00000000000000") & "N0000000000000"
                            sRegistro1 = sRegistro1 & Formata_Campo(ALINHAMENTO_DIREITA, 40, " ", objVenda.objCupomFiscal.sNomeCliente)
                            sRegistro1 = sRegistro1 & Format(objVenda.objCupomFiscal.sCPFCGC, "00000000000000")
                        
                        End If
                        
                    ElseIf colRegistroTemp.Count > 0 And bAchouCancela Then
                        
                        sRegistroCancela = colRegistro.Item(1)
                        iPosInicio1 = 1
                        
                        iPosKeyControl = InStr(sRegistroCancela, Chr(vbKeyControl))
                        
                        iPosEscape = InStr(iPosInicio1, sRegistroCancela, Chr(vbKeyEscape))
                        sSeq1 = Mid(sRegistroCancela, iPosKeyControl + 1, iPosEscape - (iPosKeyControl + 1))
                        
                        
                        If StrParaLong(sSeq1) = objVenda.objCupomFiscal.lNumero Then
                            sRegistro1 = left(sRegistro1, 122) & "S" & Mid(sRegistro1, 124)
                        End If
                        
                    End If
                        
                    bAchouCancela = False
                    bAchouVenda = False
                    bAchouAbert = False
                    bAchou = False
                End If
            End If
        Loop
        
    
    If Len(sRegistro1) > 0 Then
        Print #7, sRegistro
    End If
    
    Close #8
    
    MovimentoCaixa_Le_Registro04 = SUCESSO
    
    Exit Function
    
Erro_MovimentoCaixa_Le_Registro04:
    
    MovimentoCaixa_Le_Registro04 = gErr
    lErro = gErr
    Close #8
    
    Select Case lErro
            
        Case 204574
            
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, lErro, Error$, 204575)

    End Select
    
    Exit Function
    
End Function

Function Grava_CancelamentoCupom_Arquivo(ByVal objVenda As ClassVenda) As Long
    
Dim objMovCaixa As ClassMovimentoCaixa
Dim objCheque As ClassChequePre
Dim objAdmMeioPagtoCondPagto As ClassAdmMeioPagtoCondPagto
Dim colRegistro As New Collection
Dim iIndice As Integer
Dim bAchou As Boolean
Dim bAchou1 As Boolean
Dim lNum As Long
Dim lErro As Long
Dim sRetorno As String
Dim lSequencial As Long
Dim colOrcamento As New Collection
Dim objVendaOrc As New ClassVenda
Dim sLog As String
Dim lSequencialOrc As Long

On Error GoTo Erro_Grava_CancelamentoCupom_Arquivo
        
    'Abre a Transação
    lErro = CF_ECF("Caixa_Transacao_Abrir", lSequencial)
    If lErro <> SUCESSO Then gError 204580

    If glConexaoOrcPAF <> 0 Then
        
        'Abre a Transação
        Call CF_ECF("Caixa_Transacao_Abrir_Orc", lSequencialOrc)

    End If

    'Abre a Transação
    lErro = CF_ECF("Grava_CancelamentoCupom_Arquivo_EmTrans", objVenda)
    If lErro <> SUCESSO Then gError 204682

'    lSequencial = glSeqTransacaoAberta
    
    If glConexaoOrcPAF <> 0 Then
        
        'Fecha a Transação
        lErro = CF_ECF("Caixa_Transacao_Fechar_Orc", lSequencialOrc)
        If lErro <> SUCESSO Then gError 214163
    
    End If
    
    'Fecha a Transação
    lErro = CF_ECF("Caixa_Transacao_Fechar", lSequencial)
    If lErro <> SUCESSO Then gError 204582
        
    Grava_CancelamentoCupom_Arquivo = SUCESSO
    
    Exit Function
    
Erro_Grava_CancelamentoCupom_Arquivo:
    
    Grava_CancelamentoCupom_Arquivo = gErr
    
    Select Case gErr
    
        Case 204580 To 204582, 204682, 214162, 214163
                
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 204583)

    End Select
    
'    lSequencial = glSeqTransacaoAberta
    
    Call CF_ECF("Caixa_Transacao_Rollback", glTransacaoOrcPAFECF)
    lErro = CF_ECF("Caixa_Transacao_Rollback", glTransacaoPAFECF)
    
    Exit Function
    
End Function

Function Grava_CancelamentoCupom_Arquivo_EmTrans(ByVal objVenda As ClassVenda) As Long
    
Dim objMovCaixa As ClassMovimentoCaixa
Dim objCheque As ClassChequePre
Dim objAdmMeioPagtoCondPagto As ClassAdmMeioPagtoCondPagto
Dim colRegistro As New Collection
Dim iIndice As Integer
Dim bAchou As Boolean
Dim bAchou1 As Boolean
Dim lNum As Long
Dim lErro As Long
Dim sRetorno As String
Dim lSequencial As Long
Dim colOrcamento As New Collection
Dim objVendaOrc As New ClassVenda
Dim sLog As String
Dim alComando(1 To 7) As Long
Dim alComandoOrc(1 To 3) As Long
Dim sNumeroSerie As String
Dim sMFAdicional As String
Dim sTipoECF As String
Dim sMarcaECF As String
Dim sModeloECF As String
Dim iNumeroUsuario As Integer
Dim iAchou As Integer
Dim iAchouTipoMeioPagto As Integer
Dim objAdmMeioPagto As ClassAdmMeioPagto
Dim objTipoMeioPagto As ClassTMPLoja
Dim sTexto As String
Dim sEAD As String
Dim tR04 As typeR04
Dim dValor As Double
Dim sProduto As String
Dim objItem As ClassItemCupomFiscal
Dim objProduto As New ClassProduto
Dim tMeioPagamento As typeMeioPagamento



On Error GoTo Erro_Grava_CancelamentoCupom_Arquivo_EmTrans
        
    If giOrcamentoECF <> CAIXA_SO_ORCAMENTO Then
        
       'Abre os  comandos
        For iIndice = LBound(alComando) To UBound(alComando)
            alComando(iIndice) = Comando_AbrirExt(glConexaoPAFECF)
            If alComando(iIndice) = 0 Then gError 207154
        Next
        
        If glConexaoOrcPAF <> 0 Then
        
            For iIndice = LBound(alComandoOrc) To UBound(alComandoOrc)
                alComandoOrc(iIndice) = Comando_AbrirExt(glConexaoOrcPAF)
                If alComandoOrc(iIndice) = 0 Then gError 204765
            Next
        
        End If
        
        'Joga na string para gravar
        If objVenda.iTipo = OPTION_CF Then
            sLog = TIPOREGISTROECF_EXCLUSAOCUPOM & Chr(vbKeyControl) & objVenda.objCupomFiscal.lNumero & Chr(vbKeyEscape) & giCodECF & Chr(vbKeyEnd)
        Else
            sLog = TIPOREGISTROECF_EXCLUSAOORCAMENTO & Chr(vbKeyControl) & objVenda.objCupomFiscal.lNumOrcamento & Chr(vbKeyEscape) & giCodECF & Chr(vbKeyEnd)
        End If
        
        colRegistro.Add sLog
        
        'Grava no arquivo
        lErro = CF_ECF("MovimentoCaixaECF_Grava", colRegistro, objVenda)
        If lErro <> SUCESSO Then gError 204581
    
        lErro = AFRAC_LerInformacaoImpressora("002", sNumeroSerie)
        If lErro <> SUCESSO Then
            lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Informação Impressora")
            If lErro <> SUCESSO Then gError 207155
        End If
    
        lErro = AFRAC_LerInformacaoImpressora("050", sMFAdicional)
        If lErro <> SUCESSO Then
            lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Informação Impressora")
            If lErro <> SUCESSO Then gError 207156
        End If
    
    
        lErro = AFRAC_RetornaTipoECF(sTipoECF)
        If lErro <> SUCESSO Then
            lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Retorna Tipo ECF")
            If lErro <> SUCESSO Then gError 207157
        End If
        
        lErro = AFRAC_RetornaMarcaECF(sMarcaECF)
        If lErro <> SUCESSO Then
            lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Retorna Marca ECF")
            If lErro <> SUCESSO Then gError 207158
        End If
        
        lErro = AFRAC_RetornaModeloECF(sModeloECF)
        If lErro <> SUCESSO Then
            lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Retorna Modelo ECF")
            If lErro <> SUCESSO Then gError 207159
        End If
    
        lErro = AFRAC_NumeroUsuario(iNumeroUsuario)
        If lErro <> SUCESSO Then
            lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Numero Usuario")
            If lErro <> SUCESSO Then gError 207160
        End If
    
        If AFRAC_ImpressoraCFe(giCodModeloECF) Then
            If objVenda.objSATInfo.iEmuladorSefaz Then
                sMarcaECF = StrParaInt(objVenda.objCupomFiscal.iCodCaixa)
            Else
                sMarcaECF = objVenda.objCupomFiscal.sMarcaECF
            End If
            sTipoECF = objVenda.objCupomFiscal.sTipoECF
            If sTipoECF = "" Then sTipoECF = "CFe"
            sModeloECF = objVenda.objCupomFiscal.sModeloECF
            If sModeloECF = "" Then sModeloECF = CStr(giCodModeloECF)
            sNumeroSerie = objVenda.objCupomFiscal.sNumSerieECF
        End If
        
        If Not AFRAC_ImpressoraCFe(giCodModeloECF) Then
        
            tR04.sNumeroSerie = String(R01_NUMEROSERIE, 0)
            tR04.sMFAdicional = String(R01_MFADICIONAL, 0)
            tR04.sTipoECF = String(R01_TIPOECF, 0)
            tR04.sMarcaECF = String(R01_MARCAECF, 0)
            tR04.sModeloECF = String(R01_MODELOECF, 0)
            tR04.sTipoDesconto = String(R04_TIPODESCONTO, 0)
            tR04.sTipoAcrescimo = String(R04_TIPOACRESCIMO, 0)
            tR04.sIndicadorCancelamento = String(R04_INDICADORCANCELAMENTO, 0)
            tR04.sOrdemDescAcresc = String(R04_ORDEMDESCACRESC, 0)
            tR04.sNomeAdiquirente = String(R04_NOMEADQUIRENTE, 0)
            tR04.sCPFCNPJ = String(R04_CPFCNPJ, 0)
            tR04.sEAD = String(R04_EAD, 0)
        
            'seleciona os registros R04 ordenados por CCF para insercao no arquivo
            lErro = Comando_Executar(alComando(5), "SELECT DataMovimento, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, NumeroUsuario, CCF, COO, DataEmissao, Subtotal, Desconto, TipoDesconto, Acrescimo, TipoAcrescimo, ValorTotal, IndicadorCancelamento, ValorCancAcrescimo, OrdemDescAcresc, NomeAdiquirente, CPFCNPJ, EAD FROM R04 WHERE NumeroSerie = ? AND MFAdicional = ? AND TipoECF = ? AND MarcaECF = ? AND ModeloECF = ? AND NumeroUsuario = ? AND COO = ? AND DataEmissao = ? ", _
            tR04.dtDataMovimento, tR04.sNumeroSerie, tR04.sMFAdicional, tR04.sTipoECF, tR04.sMarcaECF, tR04.sModeloECF, tR04.iNumeroUsuario, tR04.lCCF, tR04.lCOO, tR04.dtDataEmissao, tR04.dSubtotal, tR04.dDesconto, tR04.sTipoDesconto, tR04.dAcrescimo, tR04.sTipoAcrescimo, tR04.dValorTotal, tR04.sIndicadorCancelamento, tR04.dValorCancAcrescimo, tR04.sOrdemDescAcresc, tR04.sNomeAdiquirente, tR04.sCPFCNPJ, tR04.sEAD, left(sNumeroSerie, 20), sMFAdicional, left(sTipoECF, 7), sMarcaECF, sModeloECF, iNumeroUsuario, objVenda.objCupomFiscal.lNumero, objVenda.objCupomFiscal.dtDataEmissao)
            If lErro <> AD_SQL_SUCESSO Then gError 210441
            
        
            lErro = Comando_BuscarPrimeiro(alComando(5))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210442
            
            sTexto = tR04.dtDataMovimento & tR04.sNumeroSerie & tR04.sMFAdicional & tR04.sTipoECF & tR04.sMarcaECF & tR04.sModeloECF & tR04.iNumeroUsuario & _
                tR04.lCCF & tR04.lCOO & tR04.dtDataEmissao & tR04.dSubtotal & tR04.dDesconto & tR04.sTipoDesconto & tR04.dAcrescimo & tR04.sTipoAcrescimo & tR04.dValorTotal & "S" & tR04.dValorCancAcrescimo & tR04.sOrdemDescAcresc & tR04.sNomeAdiquirente & tR04.sCPFCNPJ
            
            lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
            If lErro <> SUCESSO Then gError 210443
        
            'Atualiza o registro R04
            lErro = Comando_Executar(alComando(1), "UPDATE R04 SET IndicadorCancelamento = 'S', EAD = ? WHERE NumeroSerie = ? AND MFAdicional = ? AND TipoECF = ? AND MarcaECF = ? AND ModeloECF = ? AND NumeroUsuario = ? AND COO = ? AND DataEmissao = ? ", _
              sEAD, left(sNumeroSerie, 20), sMFAdicional, left(sTipoECF, 7), sMarcaECF, sModeloECF, iNumeroUsuario, objVenda.objCupomFiscal.lNumero, objVenda.objCupomFiscal.dtDataEmissao)
            If lErro <> AD_SQL_SUCESSO Then gError 207161
        
        End If
        
        For Each objItem In objVenda.objCupomFiscal.colItens
        
            sProduto = objItem.sProdutoNomeRed
            
            Call TP_Produto_Le_Col(gaobjProdutosReferencia, gaobjProdutosCodBarras, gaobjProdutosNome, sProduto, objProduto)
        
            If Len(objProduto.sSituacaoTribECF) = 1 And objProduto.sSituacaoTribECF <> "S" Then
                    objProduto.dQuantEstLoja = objProduto.dQuantEstLoja + objItem.dQuantidade
            End If
        
        Next
    
        For Each objMovCaixa In objVenda.colMovimentosCaixa
    
            iAchou = 0
    
            For Each objAdmMeioPagto In gcolAdmMeioPagto
    
                If objAdmMeioPagto.iCodigo = objMovCaixa.iAdmMeioPagto Then
                    iAchou = 1
                    Exit For
                End If
    
            Next
    
            iAchouTipoMeioPagto = 0
    
            If iAchou = 1 Then
    
                For Each objTipoMeioPagto In gcolTiposMeiosPagtos
                    If objTipoMeioPagto.iTipo = objAdmMeioPagto.iTipoMeioPagto Then
                        iAchouTipoMeioPagto = 1
                        Exit For
                    End If
                Next
    
            End If
    
            If iAchouTipoMeioPagto = 1 Then
    
                If Not AFRAC_ImpressoraCFe(giCodModeloECF) Then
                
                    lErro = Comando_ExecutarPos(alComando(6), "SELECT Valor FROM R07 WHERE DataMovimento = ? AND NumeroSerie = ? AND MFAdicional = ? AND TipoECF = ? AND MarcaECF = ? AND ModeloECF = ? AND COO = ? AND MeioPagamento = ?", 0, _
                    dValor, gdtDataAnterior, left(sNumeroSerie, 20), sMFAdicional, left(sTipoECF, 7), sMarcaECF, sModeloECF, objVenda.objCupomFiscal.lNumero, left(objTipoMeioPagto.sDescricao, 15))
                    If lErro <> AD_SQL_SUCESSO Then gError 210802
            
                    lErro = Comando_BuscarPrimeiro(alComando(6))
                    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210803
            
                    If lErro = AD_SQL_SEM_DADOS Then gError 210804
        
                    sTexto = gdtDataAnterior & left(sNumeroSerie, 20) & sMFAdicional & left(sTipoECF, 7) & sMarcaECF & sModeloECF & iNumeroUsuario & _
                        objVenda.objCupomFiscal.lNumero & objVenda.objCupomFiscal.lCCF & 0 & objTipoMeioPagto.sDescricao & objMovCaixa.dValor & "S" & objMovCaixa.dValor
        
                    lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
                    If lErro <> SUCESSO Then gError 210372
        
                    lErro = Comando_ExecutarPos(alComando(7), "UPDATE R07 SET ValorEstorno = ?, IndicadorEstorno = ?, EAD = ? ", alComando(6), objMovCaixa.dValor, "S", sEAD)
                    If lErro <> AD_SQL_SUCESSO Then gError 210805
    
                    lErro = Comando_Executar(alComandoOrc(3), "SELECT Valor FROM MeioPagamento WHERE DataMovimento = ? AND CodTipoDocumento = 1 AND MeioPagamento = ?", tMeioPagamento.dValor, gdtDataAnterior, objTipoMeioPagto.sDescricao)
                    If lErro <> AD_SQL_SUCESSO Then gError 207275
            
                    lErro = Comando_BuscarPrimeiro(alComandoOrc(3))
                    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 207276
        
        
                    sTexto = CStr(gdtDataAnterior) & "1" & objTipoMeioPagto.sDescricao & CStr(tMeioPagamento.dValor - objMovCaixa.dValor)
                    
                    lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
                    If lErro <> SUCESSO Then gError 214061
        
                    lErro = Comando_Executar(alComandoOrc(1), "UPDATE MeioPagamento SET Valor = Valor - ?, EAD = ? WHERE DataMovimento = ? AND CodTipoDocumento = 1 AND MeioPagamento = ?", objMovCaixa.dValor, sEAD, gdtDataAnterior, objTipoMeioPagto.sDescricao)
                    If lErro <> AD_SQL_SUCESSO Then gError 207279
    
                End If
    
            End If
    
        Next
    
        For iIndice = LBound(alComando) To UBound(alComando)
            Call Comando_Fechar(alComando(iIndice))
        Next
    
        If glConexaoOrcPAF <> 0 Then
        
            For iIndice = LBound(alComandoOrc) To UBound(alComandoOrc)
                Call Comando_Fechar(alComandoOrc(iIndice))
            Next
    
        End If
    
    Else
        
        Call CF_ECF("Trata_Caixa_So_Orcamento")

    End If
    
    Grava_CancelamentoCupom_Arquivo_EmTrans = SUCESSO
    
    Exit Function
    
Erro_Grava_CancelamentoCupom_Arquivo_EmTrans:
    
    Grava_CancelamentoCupom_Arquivo_EmTrans = gErr
    
    Select Case gErr
    
        Case 204580 To 204582, 207155 To 207160, 210443, 210444
                
        Case 207154
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)
    
        Case 207161
            Call Rotina_ErroECF(vbOKOnly, ERRO_ALTERACAO_R04, gErr)
                
        Case 207279
            Call Rotina_ErroECF(vbOKOnly, ERRO_ALTERACAO_MEIOPAGAMENTO, gErr)
                
        Case 210441, 210442
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_R04, gErr)
                
        Case 210802, 210803
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_R07, gErr)
                
        Case 210804
            Call Rotina_ErroECF(vbOKOnly, ERRO_R07_NAO_CADASTRADO, gErr)
                
        Case 210805
            Call Rotina_ErroECF(vbOKOnly, ERRO_ALTERACAO_R07, gErr)
                
                
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 204583)

    End Select
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function
    
End Function


Private Function MovimentoCaixa_Le_Registro05(sArqMov As String, ByVal dtDataIni As Date, ByVal dtDataFim As Date, ByVal sNumeroSerie As String, ByVal sMFAdicional As String, ByVal sModeloECF As String, ByVal iNumeroUsuario As Integer, dtDataUltimoMovimento As Date) As Long
'funcao que le os itens dos cupons fiscais e grava registro 05

Dim lErro As Long
Dim iIndice As Integer
Dim iIndice1 As Integer
Dim iIndice2 As Integer
Dim sNomeArq As String
Dim iPosInicio As Integer
Dim bAchou As Boolean
Dim bAchouAbert As Boolean
Dim colRegistroTemp As New Collection
Dim sSeqAbert As String
Dim sSeqFech As String
Dim sRegistro As String
Dim colRegistro As New Collection
Dim iRegistro As Integer
Dim iNum As Integer
Dim iSeqArq As Integer
Dim lTamanho As Long
Dim sRetorno As String
Dim sNomeArq1 As String
Dim sNomeArq2 As String
Dim sRet As String
Dim sArquivo As String
Dim objVenda As New ClassVenda
Dim sNomeArq0 As String
Dim iStatus As Integer
Dim vbMsg As VbMsgBoxResult
Dim sRegistro1 As String
Dim sRegistro2 As String
Dim sSeq1 As String
Dim objMovCaixa As ClassMovimentoCaixa
Dim objItem As ClassItemCupomFiscal
Dim objProduto As New ClassProduto
Dim iPos As Integer
Dim sTipo As String
Dim iPosEsc As Integer
Dim sProduto As String


On Error GoTo Erro_MovimentoCaixa_Le_Registro05
    
        dtDataUltimoMovimento = DATA_NULA
    
        iPosInicio = 1
    
        Open sArqMov For Input As #8
    
        iIndice = 1
        
        Do While Not EOF(8)
                    
            'Busca o próximo registro do arquivo
            Line Input #8, sRegistro
                    
            If sRegistro <> "" Then
                            
                iIndice = iIndice + 1
                
                'Procura o Primeiro Control para saber o tipo do registro
                iPos = InStr(iPosInicio, sRegistro, Chr(vbKeyControl))
                
                sTipo = Mid(sRegistro, iPosInicio, iPos - iPosInicio)
                
                Select Case sTipo
                    
                    'verifica se é de abertura
                    Case TIPOREGISTROECF_ABRESEQ
                        'se encontrei um sequencial aberto antes do encerramento do anterior-->desprezo o anterior
                        If bAchouAbert Then Set colRegistroTemp = New Collection
                        'Recolhe o sequencial
                        sSeqAbert = Mid(sRegistro, iPos + 1, Len(sRegistro) - (iPos + 1))
                        bAchouAbert = True
                            'Procura o end
                        iPosEsc = InStr(iPos, sRegistro, Chr(vbKeyEnd))
                        
                    'verifica se é de fechamento
                    Case TIPOREGISTROECF_ENCERRASEQ
                        'Recolhe o sequencial
                        sSeqFech = Mid(sRegistro, iPos + 1, Len(sRegistro) - (iPos + 1))
                        If sSeqAbert = sSeqFech Then bAchou = True
                        
                    Case TIPOREGISTROECF_VENDAS
                        colRegistroTemp.Add sRegistro
                                        
'                    Case Else
'                        colRegistroTemp.Add sRegistro
                                        
                End Select
                
                If bAchou Then
                
                    If colRegistroTemp.Count > 0 Then
                
                        Set objVenda = New ClassVenda
                    
                        lErro = CF_ECF("Registro_ECF_Vendas", colRegistroTemp, sArquivo, 1, objVenda)
                        If lErro <> SUCESSO Then gError 204576
    
                        dtDataUltimoMovimento = objVenda.objCupomFiscal.dtDataEmissao
                            
                        If objVenda.objCupomFiscal.dtDataEmissao >= dtDataIni And objVenda.objCupomFiscal.dtDataEmissao <= dtDataFim Then
                        
                            sRegistro1 = "R05" & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", sNumeroSerie) & Format(sMFAdicional, "@")
                            sRegistro1 = sRegistro1 & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", sModeloECF) & Format(iNumeroUsuario, "00")
                            sRegistro1 = sRegistro1 & Format(objVenda.objCupomFiscal.lNumero, "000000") & Format(objVenda.objCupomFiscal.lCCF, "000000")
                            
                            For Each objItem In objVenda.objCupomFiscal.colItens
                            
                                sProduto = objItem.sProdutoNomeRed
                            
                            
                                Call TP_Produto_Le_Col(gaobjProdutosReferencia, gaobjProdutosCodBarras, gaobjProdutosNome, sProduto, objProduto)
                            
                                sRegistro2 = sRegistro1 & Format(objItem.iItem, "000") & Formata_Campo(ALINHAMENTO_DIREITA, 14, " ", objItem.sProduto)
                                sRegistro2 = sRegistro2 & Formata_Campo(ALINHAMENTO_DIREITA, 100, " ", objProduto.sDescricao) & Format(StrParaDbl(Format(objItem.dQuantidade, "0.000")) * 1000, "0000000")
                                sRegistro2 = sRegistro2 & Formata_Campo(ALINHAMENTO_DIREITA, 3, " ", objProduto.sSiglaUMVenda) & Format(Round(objItem.dValorDesconto, 2) * 100, "000000")
                                sRegistro2 = sRegistro2 & "00000000" & Format(CDbl(Format(CDbl(Format(objItem.dQuantidade, "0.000")) * CDbl(Format(objItem.dPrecoUnitario - objItem.dValorDesconto, "standard")), "standard")) * 100, "00000000000000")
                                sRegistro2 = sRegistro2 & Formata_Campo(ALINHAMENTO_DIREITA, 7, " ", objItem.sSituacaoTrib) & IIf(objItem.iStatus = STATUS_CANCELADO, "S", " ")
                                sRegistro2 = sRegistro2 & "0000000" & "0000000000000" & "0000000000000" & objProduto.sTruncamento & IIf(objProduto.iCompras = 1, "T", "P") & "3" & "2"
                                
                                Print #7, sRegistro2
                            Next
                        
                        End If
                        
                    End If
                    
                    bAchouAbert = False
                    bAchou = False
                End If
            End If
        Loop
        
    
    Close #8
    
    MovimentoCaixa_Le_Registro05 = SUCESSO
    
    Exit Function
    
Erro_MovimentoCaixa_Le_Registro05:
    
    MovimentoCaixa_Le_Registro05 = gErr
    lErro = gErr
    Close #8
    
    Select Case lErro
            
        Case 204576
            
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, lErro, Error$, 204577)

    End Select
    
    Exit Function
    
End Function


Private Function MovimentoCaixa_Le_Registro07(sArqMov As String, ByVal dtDataIni As Date, ByVal dtDataFim As Date, ByVal sNumeroSerie As String, ByVal sMFAdicional As String, ByVal sModeloECF As String, ByVal iNumeroUsuario As Integer, dtDataUltimoMovimento As Date) As Long
'funcao que le os itens dos cupons fiscais e grava registro 05

Dim lErro As Long
Dim iIndice As Integer
Dim iIndice1 As Integer
Dim iIndice2 As Integer
Dim sNomeArq As String
Dim iPosInicio As Integer
Dim bAchou As Boolean
Dim bAchouAbert As Boolean
Dim colRegistroTemp As New Collection
Dim sSeqAbert As String
Dim sSeqFech As String
Dim sRegistro As String
Dim colRegistro As New Collection
Dim iRegistro As Integer
Dim iNum As Integer
Dim iSeqArq As Integer
Dim lTamanho As Long
Dim sRetorno As String
Dim sNomeArq1 As String
Dim sNomeArq2 As String
Dim sRet As String
Dim sArquivo As String
Dim objVenda As New ClassVenda
Dim sNomeArq0 As String
Dim iStatus As Integer
Dim vbMsg As VbMsgBoxResult
Dim sRegistro1 As String
Dim sRegistro2 As String
Dim sSeq1 As String
Dim objMovCaixa As ClassMovimentoCaixa
Dim objItem As ClassItemCupomFiscal
Dim objProduto As New ClassProduto
Dim objAdmMeioPagto As ClassAdmMeioPagto
Dim objTipoMeioPagto As ClassTMPLoja
Dim iAchou As Integer
Dim iAchouTipoMeioPagto As Integer
Dim iPos As Integer
Dim sTipo As String
Dim iPosEsc As Integer


On Error GoTo Erro_MovimentoCaixa_Le_Registro07
    
        dtDataUltimoMovimento = DATA_NULA
    
        iPosInicio = 1
    
        Open sArqMov For Input As #8
    
        iIndice = 1
        
        Do While Not EOF(8)
                    
            'Busca o próximo registro do arquivo
            Line Input #8, sRegistro
                    
            If sRegistro <> "" Then
                            
                iIndice = iIndice + 1
                
                'Procura o Primeiro Control para saber o tipo do registro
                iPos = InStr(iPosInicio, sRegistro, Chr(vbKeyControl))
                
                sTipo = Mid(sRegistro, iPosInicio, iPos - iPosInicio)
                
                Select Case sTipo
                    
                    'verifica se é de abertura
                    Case TIPOREGISTROECF_ABRESEQ
                        'se encontrei um sequencial aberto antes do encerramento do anterior-->desprezo o anterior
                        If bAchouAbert Then Set colRegistroTemp = New Collection
                        'Recolhe o sequencial
                        sSeqAbert = Mid(sRegistro, iPos + 1, Len(sRegistro) - (iPos + 1))
                        bAchouAbert = True
                            'Procura o end
                        iPosEsc = InStr(iPos, sRegistro, Chr(vbKeyEnd))
                        
                    'verifica se é de fechamento
                    Case TIPOREGISTROECF_ENCERRASEQ
                        'Recolhe o sequencial
                        sSeqFech = Mid(sRegistro, iPos + 1, Len(sRegistro) - (iPos + 1))
                        If sSeqAbert = sSeqFech Then bAchou = True
                        
                    Case TIPOREGISTROECF_VENDAS
                        colRegistroTemp.Add sRegistro
                                        
'                    Case Else
'                        colRegistroTemp.Add sRegistro
                                        
                End Select
                
                If bAchou Then
                
                    If colRegistroTemp.Count > 0 Then
                
                        Set objVenda = New ClassVenda
                    
                        lErro = CF_ECF("Registro_ECF_Vendas", colRegistroTemp, sArquivo, 1, objVenda)
                        If lErro <> SUCESSO Then gError 204578
    
                        dtDataUltimoMovimento = objVenda.objCupomFiscal.dtDataEmissao
                            
                        If objVenda.objCupomFiscal.dtDataEmissao >= dtDataIni And objVenda.objCupomFiscal.dtDataEmissao <= dtDataFim Then
                        
                            sRegistro1 = "R07" & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", sNumeroSerie) & Format(sMFAdicional, "@")
                            sRegistro1 = sRegistro1 & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", sModeloECF) & Format(iNumeroUsuario, "00")
                            sRegistro1 = sRegistro1 & Format(objVenda.objCupomFiscal.lNumero, "000000") & Format(objVenda.objCupomFiscal.lCCF, "000000") & "000000"
                            
                            For Each objMovCaixa In objVenda.colMovimentosCaixa
                            
                                iAchou = 0
                            
                                For Each objAdmMeioPagto In gcolAdmMeioPagto
                            
                                    If objAdmMeioPagto.iCodigo = objMovCaixa.iAdmMeioPagto Then
                                        iAchou = 1
                                        Exit For
                                    End If
                            
                                Next
                            
                                iAchouTipoMeioPagto = 0
                            
                                If iAchou = 1 Then
                                
                                    For Each objTipoMeioPagto In gcolTiposMeiosPagtos
                                        If objTipoMeioPagto.iTipo = objAdmMeioPagto.iTipoMeioPagto Then
                                            iAchouTipoMeioPagto = 1
                                            Exit For
                                        End If
                                    Next
                                    
                                End If
                                
                                If iAchouTipoMeioPagto = 1 Then
                                    sRegistro2 = sRegistro1 & Formata_Campo(ALINHAMENTO_DIREITA, 15, " ", objTipoMeioPagto.sDescricao)
                                    sRegistro2 = sRegistro2 & Format(Round(objMovCaixa.dValor, 2) * 100, "0000000000000") & "N" & "0000000000000"
                                End If
                                
                                Print #7, sRegistro2
                            Next
                        
                        End If
                        
                    End If
                    
                    bAchouAbert = False
                    bAchou = False
                End If
            End If
        Loop
        
    
    Close #8
    
    MovimentoCaixa_Le_Registro07 = SUCESSO
    
    Exit Function
    
Erro_MovimentoCaixa_Le_Registro07:
    
    MovimentoCaixa_Le_Registro07 = gErr
    lErro = gErr
    Close #8
    
    Select Case lErro
            
        Case 204578
            
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, lErro, Error$, 204579)

    End Select
    
    
    Exit Function
    
End Function

'Function R01_Grava(ByVal dtData As Date) As Long
'
'Dim sNomeArq As String
'Dim sNomeArq1 As String
'Dim sArquivo As String
'Dim sArquivo1 As String
'Dim sCodNacID As String
'Dim lErro As Long
'Dim sNumeroSerie As String
'Dim sMFAdicional As String
'Dim sMarcaECF As String
'Dim sTipoECF As String
'Dim sModeloECF As String
'Dim sVersaoSB As String
'Dim dtDataInstalacaoSB As Date
'Dim sHoraInstalacaoSB As String
'Dim sCNPJUsuario As String
'Dim iNumeroUsuario As Integer
'Dim dtDataUltimaReducaoZ As Date
'Dim dtDataUltimoMovimento As Date
'Dim sIEUsuario As String
'Dim sRegistro As String
'Dim lTentaAcessoArquivo As Long
'Dim dtHora As Date
'Dim sRegistroEAD As String
'
'Dim alComando(1 To 1) As Long
'Dim iIndice As Integer
'
'On Error GoTo Erro_R01_Grava
'
'    lErro = AFRAC_CodigoNacionalIdentificacao(sCodNacID)
'    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Codigo Nacional Identificação")
'    If lErro <> SUCESSO Then gError 204551
'
'    lErro = AFRAC_LerInformacaoImpressora("002", sNumeroSerie)
'    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Informação Impressora")
'    If lErro <> SUCESSO Then gError 204552
'
'    lErro = AFRAC_LerInformacaoImpressora("050", sMFAdicional)
'    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Informação Impressora")
'    If lErro <> SUCESSO Then gError 204553
'
'    lErro = AFRAC_RetornaTipoECF(sTipoECF)
'    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Retorna Marca ECF")
'    If lErro <> SUCESSO Then gError 204554
'
'    lErro = AFRAC_RetornaMarcaECF(sMarcaECF)
'    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Retorna Marca ECF")
'    If lErro <> SUCESSO Then gError 204555
'
'    lErro = AFRAC_RetornaModeloECF(sModeloECF)
'    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Retorna Marca ECF")
'    If lErro <> SUCESSO Then gError 204556
'
'    lErro = AFRAC_LerInformacaoImpressora("003", sVersaoSB)
'    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Informação Impressora")
'    If lErro <> SUCESSO Then gError 204557
'
'    lErro = AFRAC_DataInstalacaoSB(dtDataInstalacaoSB)
'    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Retorna Marca ECF")
'    If lErro <> SUCESSO Then gError 204558
'
'    lErro = AFRAC_HoraInstalacaoSB(sHoraInstalacaoSB)
'    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Retorna Marca ECF")
'    If lErro <> SUCESSO Then gError 204559
'
'    dtHora = StrParaDate(left(sHoraInstalacaoSB, 2) & ":" & Mid(sHoraInstalacaoSB, 3, 2) & ":" & right(sHoraInstalacaoSB, 2))
'
'
'    lErro = AFRAC_LerInformacaoImpressora("004", sCNPJUsuario)
'    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Informação Impressora")
'    If lErro <> SUCESSO Then gError 204560
'
'    lErro = AFRAC_LerInformacaoImpressora("005", sIEUsuario)
'    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Informação Impressora")
'    If lErro <> SUCESSO Then gError 204561
'
'    lErro = AFRAC_NumeroUsuario(iNumeroUsuario)
'    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Numero Usuario")
'    If lErro <> SUCESSO Then gError 204562
'
'
'    sRegistro = "R01" & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", sNumeroSerie) & Format(sMFAdicional, "@")
'    sRegistro = sRegistro & Formata_Campo(ALINHAMENTO_DIREITA, 7, " ", sTipoECF) & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", sMarcaECF)
'    sRegistro = sRegistro & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", sModeloECF) & Formata_Campo(ALINHAMENTO_DIREITA, 10, " ", sVersaoSB)
'    sRegistro = sRegistro & Format(dtDataInstalacaoSB, "yyyymmdd") & sHoraInstalacaoSB & sCNPJUsuario & sIEUsuario
'    sRegistro = sRegistro & gsCNPJDesenv & Format(gsInscricaoEstadualDesenv, "00000000000000") & Format(gsInscricaoMunicipalDesenv, "00000000000000")
'    sRegistro = sRegistro & Formata_Campo(ALINHAMENTO_DIREITA, 40, " ", gsNomeDesenv) & Formata_Campo(ALINHAMENTO_DIREITA, 40, " ", gsNomePAFECF)
'    sRegistro = sRegistro & Formata_Campo(ALINHAMENTO_DIREITA, 10, " ", gsVersaoPAFECF) & Formata_Campo(ALINHAMENTO_DIREITA, 32, " ", gsMD5PAFECF)
'    sRegistro = sRegistro & Format(dtDataIni, "yyyymmdd") & Format(dtDataFim, "yyyymmdd") & Formata_Campo(ALINHAMENTO_DIREITA, 4, " ", gsVersaoEspecPAFECF)
'
'    'Inseri no Arquivo
'    Print #7, sRegistro
'
'    'Insere a nova Nota Fiscal de Saida no BD
'    lErro = Comando_Executar(alComando(1), "INSERT INTO R01 (Data, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, VersaoSB, DataInstalacaoSB, HoraInstalacaoSB, SequencialECF, CNPJUsu, InscEstadualUsu, CNPJDesenv, InscEstadualDesenv, InscMunicipalDesenv, " & _
'    " NomeDesenv, NomePAFECF, VersaoPAFECF, CodigoMD5,  VersaoERPAFECF)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?))", _
'        dtData, .lNumIntDoc, left(sNumeroSerie, 20), sMFAdicional, left(sTipoECF, 7), sMarcaECF, sModeloECF, sVersaoSB, dtDataInstalacaoSB, CDbl(dtHora))
'    If lErro <> AD_SQL_SUCESSO Then gError 35998
'
'    'trata registro 02
'    dtData = dtDataIni
'
'    Do While True
'
'        'Verifica se tem alguma venda de Loja em aberta
'        sNomeArq = gsDirMVTEF & "MV" & CStr(Format(dtData, "ddmmyy")) & (".txt")
'
'        sNomeArq1 = Dir(sNomeArq)
'
'        If Len(sNomeArq1) > 0 Then
'
'            'le as reducoes
'            lErro = MovimentoCaixa_Le_Registro02(sNomeArq, dtDataIni, dtDataFim, sNumeroSerie, sMFAdicional, sModeloECF, iNumeroUsuario, dtDataUltimaReducaoZ)
'            If lErro <> SUCESSO Then gError 204563
'
'
'            'se encontrar uma reducao com a data de data fim ==> esta na hora de parar a pesquisa
'            If dtDataUltimaReducaoZ >= dtDataFim Then Exit Do
'
'        End If
'
'        'se ja leu uma data maior q datafim ==> todos as reducoes solicitadas ja foram lidas
'        If dtData > dtDataFim And Len(Dir(gsDirMVTEF & "MV" & CStr(Format(dtData, "ddmmyy")) & (".txt"))) > 0 Then
'            Exit Do
'
'        End If
'
'        dtData = DateAdd("d", 1, dtData)
'
'        'se o intervalo entre a datafim e a proxima data de arquivo a ser aberto for maior q 60 dias ==> para a pesquisa
'        If Abs(DateDiff("d", dtData, dtDataFim)) > 60 Then Exit Do
'
'    Loop
'
'
'    'trata registro 03
'    dtData = dtDataIni
'
'    Do While True
'
'        'Verifica se tem alguma venda de Loja em aberta
'        sNomeArq = gsDirMVTEF & "MV" & CStr(Format(dtData, "ddmmyy")) & (".txt")
'
'        sNomeArq1 = Dir(sNomeArq)
'
'        If Len(sNomeArq1) > 0 Then
'
'            'le as reducoes
'            lErro = MovimentoCaixa_Le_Registro03(sNomeArq, dtDataIni, dtDataFim, sNumeroSerie, sMFAdicional, sModeloECF, iNumeroUsuario, dtDataUltimaReducaoZ)
'            If lErro <> SUCESSO Then gError 204564
'
'
'            'se encontrar uma reducao com a data de data fim ==> esta na hora de parar a pesquisa
'            If dtDataUltimaReducaoZ >= dtDataFim Then Exit Do
'
'        End If
'
'        'se ja leu uma data maior q datafim ==> todos as reducoes solicitadas ja foram lidas
'        If dtData > dtDataFim And Len(Dir(gsDirMVTEF & "MV" & CStr(Format(dtData, "ddmmyy")) & (".txt"))) > 0 Then
'            Exit Do
'
'        End If
'
'        dtData = DateAdd("d", 1, dtData)
'
'        'se o intervalo entre a datafim e a proxima data de arquivo a ser aberto for maior q 60 dias ==> para a pesquisa
'        If Abs(DateDiff("d", dtData, dtDataFim)) > 60 Then Exit Do
'
'    Loop
'
'    'trata registro 04
'    dtData = dtDataIni
'
'    Do While True
'
'        'Verifica se tem alguma venda de Loja em aberta
'        sNomeArq = gsDirMVTEF & "MV" & CStr(Format(dtData, "ddmmyy")) & (".txt")
'
'        sNomeArq1 = Dir(sNomeArq)
'
'        If Len(sNomeArq1) > 0 Then
'
'            'le os cupons
'            lErro = MovimentoCaixa_Le_Registro04(sNomeArq, dtDataIni, dtDataFim, sNumeroSerie, sMFAdicional, sModeloECF, iNumeroUsuario, dtDataUltimoMovimento)
'            If lErro <> SUCESSO Then gError 204565
'
'
'            'se encontrar um movimento com a data maior ou igual a data fim ==> esta na hora de parar a pesquisa
'            If dtDataUltimoMovimento >= dtDataFim Then Exit Do
'
'        End If
'
'        'se ja leu uma data maior q datafim ==> todos as reducoes solicitadas ja foram lidas
'        If dtData > dtDataFim And Len(Dir(gsDirMVTEF & "MV" & CStr(Format(dtData, "ddmmyy")) & (".txt"))) > 0 Then
'            Exit Do
'
'        End If
'
'        dtData = DateAdd("d", 1, dtData)
'
'        'se o intervalo entre a datafim e a proxima data de arquivo a ser aberto for maior q 60 dias ==> para a pesquisa
'        If Abs(DateDiff("d", dtData, dtDataFim)) > 60 Then Exit Do
'
'    Loop
'
'
'    'trata registro 05
'    dtData = dtDataIni
'
'    Do While True
'
'        'Verifica se tem alguma venda de Loja em aberta
'        sNomeArq = gsDirMVTEF & "MV" & CStr(Format(dtData, "ddmmyy")) & (".txt")
'
'        sNomeArq1 = Dir(sNomeArq)
'
'        If Len(sNomeArq1) > 0 Then
'
'            'le os cupons
'            lErro = MovimentoCaixa_Le_Registro05(sNomeArq, dtDataIni, dtDataFim, sNumeroSerie, sMFAdicional, sModeloECF, iNumeroUsuario, dtDataUltimoMovimento)
'            If lErro <> SUCESSO Then gError 204566
'
'
'            'se encontrar um movimento com a data maior ou igual a data fim ==> esta na hora de parar a pesquisa
'            If dtDataUltimoMovimento >= dtDataFim Then Exit Do
'
'        End If
'
'        'se ja leu uma data maior q datafim ==> todos as reducoes solicitadas ja foram lidas
'        If dtData > dtDataFim And Len(Dir(gsDirMVTEF & "MV" & CStr(Format(dtData, "ddmmyy")) & (".txt"))) > 0 Then
'            Exit Do
'
'        End If
'
'        dtData = DateAdd("d", 1, dtData)
'
'        'se o intervalo entre a datafim e a proxima data de arquivo a ser aberto for maior q 60 dias ==> para a pesquisa
'        If Abs(DateDiff("d", dtData, dtDataFim)) > 60 Then Exit Do
'
'    Loop
'
'
'    'trata registro 07
'    dtData = dtDataIni
'
'    Do While True
'
'        'Verifica se tem alguma venda de Loja em aberta
'        sNomeArq = gsDirMVTEF & "MV" & CStr(Format(dtData, "ddmmyy")) & (".txt")
'
'        sNomeArq1 = Dir(sNomeArq)
'
'        If Len(sNomeArq1) > 0 Then
'
'            'le os cupons
'            lErro = MovimentoCaixa_Le_Registro07(sNomeArq, dtDataIni, dtDataFim, sNumeroSerie, sMFAdicional, sModeloECF, iNumeroUsuario, dtDataUltimoMovimento)
'            If lErro <> SUCESSO Then gError 204567
'
'
'            'se encontrar uma reducao com a data de data fim ==> esta na hora de parar a pesquisa
'            If dtDataUltimoMovimento >= dtDataFim Then Exit Do
'
'        End If
'
'        'se ja leu uma data maior q datafim ==> todos as reducoes solicitadas ja foram lidas
'        If dtData > dtDataFim And Len(Dir(gsDirMVTEF & "MV" & CStr(Format(dtData, "ddmmyy")) & (".txt"))) > 0 Then
'            Exit Do
'
'        End If
'
'        dtData = DateAdd("d", 1, dtData)
'
'        'se o intervalo entre a datafim e a proxima data de arquivo a ser aberto for maior q 60 dias ==> para a pesquisa
'        If Abs(DateDiff("d", dtData, dtDataFim)) > 60 Then Exit Do
'
'    Loop
'
'
'    Close #7
'
'    lErro = AFRAC_CriaAssinaturaRSA(sArquivo, sRegistroEAD)
'    If lErro <> SUCESSO Then gError 204568
'
'    Call MsgBox("Arquivo " & sNomeArq & " foi gerado com sucesso.", vbOKOnly, "Movimentos Diários")
'
'    R01_Grava = SUCESSO
'
'    Exit Function
'
'Erro_R01_Grava:
'
'    R01_Grava = gErr
'
'    Select Case gErr
'
'        Case 70
'            lTentaAcessoArquivo = lTentaAcessoArquivo + 1
'            If lTentaAcessoArquivo < NUM_MAX_LOCK Then Resume
'            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_LOCADO, gErr, sNomeArq)
'
'        Case 204551 To 204567
'
'        Case 204568
'            Call Rotina_ErroECF(vbOKOnly, ERRO_GERACAO_ASSINATURA, gErr)
'
'        Case Else
'            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 204569)
'
'    End Select
'
'    Close #7
'
'    Exit Function
'
'End Function


Function ECFConfig_ObterNumInt(ByVal sCodigo As String, lNumInt As Long, Optional ByVal iQtde As Integer = 1) As Long
'obter um numero automatico a partir de um contador identificado por uma chave
'iQtde identifica quantos numeros devem ser "liberados" a partir do lNumInt retornado
'TEM QUE SER CHAMADA DENTRO DE TRANSACAO

Dim lErro As Long
Dim sConteudo As String
Dim alComando(1 To 2) As Long
Dim iIndice As Integer

On Error GoTo Erro_ECFConfig_ObterNumInt

   'Abre os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_AbrirExt(glConexaoPAFECF)
        If alComando(iIndice) = 0 Then gError 204603
    Next

    sConteudo = String(STRING_ECFCONFIG_CONTEUDO, 0)

    lErro = Comando_ExecutarPos(alComando(1), "SELECT Conteudo FROM ECFConfig WHERE Codigo = ? ", 0, sConteudo, sCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 204604

    lErro = Comando_BuscarProximo(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 204605

    lNumInt = CLng(sConteudo)
    sConteudo = CStr(lNumInt + iQtde)

    lErro = Comando_ExecutarPos(alComando(2), "UPDATE ECFConfig SET Conteudo = ?", alComando(1), sConteudo)
    If lErro <> AD_SQL_SUCESSO Then gError 204606

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    ECFConfig_ObterNumInt = SUCESSO

    Exit Function

Erro_ECFConfig_ObterNumInt:

    ECFConfig_ObterNumInt = gErr

    Select Case gErr

        Case 204603
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)

        Case 204604, 204605
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_ECFCONFIG, gErr, sCodigo)

        Case 204606
            Call Rotina_ErroECF(vbOKOnly, ERRO_ALTERACAO_ECFCONFIG, gErr, sCodigo)

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 204607)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Transmitir_Arquivo(Optional ByVal iBatch As Integer = 0, Optional sNomeArqTransmitido As String) As Long

Dim lErro As Long
Dim sRetorno As String
Dim lTamanho As Long
Dim lSeqArq As Long
Dim sNomeArq As String
Dim asReg() As String
Dim sNomeArq1 As String
Dim sRegistro As String
Dim bEntrou As Boolean
Dim sNomeArq2 As String
Dim iPos As Integer
Dim sTipo As String
Dim lSeq As Long
Dim objMovCC As ClassMovimentoCaixa
Dim sSeqAbert As String
Dim sSeqFech As String
Dim sNomeArqErro As String
Dim sArquivo As String
Dim colRegistroTemp As New Collection
Dim sDir As String
Dim sRet As String
Dim lNumBytes As Long

Dim iIndice As Integer
Dim alComando(1 To 3) As Long
Dim lNumMovto1 As Long
Dim lSequencial As Long
Dim lNumMovto As Long
Dim lTransacao As Long
Dim sMsg As String
Dim dtData As Date
Dim iTipo As Integer
Dim dHora As Double
Dim iSeq As Integer

On Error GoTo Erro_Transmitir_Arquivo

    lErro = CF_ECF("Caixa_Transacao_Abrir", lTransacao)
    If lErro <> SUCESSO Then gError 204617

    'funcao que verifica se o caixaconfig.ini foi alterado
    lErro = CF_ECF("Transmitir_Arquivo_EmTrans", iBatch, sNomeArqTransmitido)
    If lErro <> SUCESSO And lErro <> 117565 Then gError 214763
    
    'Função que Executa o Encerramento da Sessão
    lErro = CF_ECF("Caixa_Transacao_Fechar", lTransacao)
    If lErro <> SUCESSO Then gError 204624
    
    
    Transmitir_Arquivo = SUCESSO
    
    Exit Function
    
Erro_Transmitir_Arquivo:
    
    Transmitir_Arquivo = gErr

    Select Case gErr
    
        Case 204617, 204624
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 214762)
        
    End Select
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    'Desfaz Transação
    Call CF_ECF("Caixa_Transacao_Rollback", glTransacaoPAFECF)
    
    Exit Function
    
End Function
    
Function Transmitir_Arquivo_EmTrans(Optional ByVal iBatch As Integer = 0, Optional sNomeArqTransmitido As String) As Long

Dim lErro As Long
Dim sRetorno As String
Dim lTamanho As Long
Dim lSeqArq As Long
Dim sNomeArq As String
Dim asReg() As String
Dim sNomeArq1 As String
Dim sRegistro As String
Dim bEntrou As Boolean
Dim sNomeArq2 As String
Dim iPos As Integer
Dim sTipo As String
Dim lSeq As Long
Dim objMovCC As ClassMovimentoCaixa
Dim sSeqAbert As String
Dim sSeqFech As String
Dim sNomeArqErro As String
Dim sArquivo As String
Dim colRegistroTemp As New Collection
Dim sDir As String
Dim sRet As String
Dim lNumBytes As Long, lNumBytes1 As Long

Dim iIndice As Integer
Dim alComando(1 To 3) As Long
Dim lNumMovto1 As Long
Dim lSequencial As Long
Dim lNumMovto As Long
Dim lTransacao As Long
Dim sMsg As String
Dim dtData As Date
Dim iTipo As Integer
Dim dHora As Double
Dim iSeq As Integer

On Error GoTo Erro_Transmitir_Arquivo_EmTrans

    'funcao que verifica se o caixaconfig.ini foi alterado
    lErro = CF_ECF("CaixaConfig_Verifica_Chave")
    If lErro <> SUCESSO Then gError 204251
    
   'Abre os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_AbrirExt(glConexaoPAFECF)
        If alComando(iIndice) = 0 Then gError 204625
    Next


    lErro = Comando_Executar(alComando(1), "SELECT UltimoNumMovto, Sequencial FROM ArquivoSeq ORDER BY UltimoNumMovto DESC", lNumMovto1, lSeqArq)
    If lErro <> AD_SQL_SUCESSO Then gError 204618

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 204619

    If lErro = AD_SQL_SEM_DADOS Then
        lNumMovto1 = 0
        lSeqArq = 1
    Else
        lSeqArq = lSeqArq + 1
    End If
    
    
    'cria o arquivo que vai receber os dados q depois serao transmitidos para a retaguarda e que posteriormente sera renomeado
    'inicialmente tera a terminacao  .tmp
    
    sNomeArq1 = giCodEmpresa & "_" & giFilialEmpresa & "_" & giCodCaixa & "_" & lSeqArq
    sNomeArq2 = gsDirMVTEF & sNomeArq1 & ".tmp"

    sNomeArqErro = sNomeArq2

    'verifica se o arquivo da forma 1_1_1_1.tmp existe
    sArquivo = Dir(sNomeArq2)
    
    'se o arquivo existir ==> remove o arquivo
    If Len(sArquivo) > 0 Then ECF_Apaga_Arquivo (sNomeArq2)

    Open sNomeArq2 For Append As #2

    'Inseri no Arquivo o nome do arquivinho
    Print #2, sNomeArq1 & ".ccc"
    Print #2, CStr(VERSAO_ECF)
    
    sMsg = String(STRING_MOVIMENTOCAIXA_MSG, 0)
    
    lErro = Comando_Executar(alComando(2), "SELECT NumMovto, Data, Tipo, Msg, Hora, Seq  FROM MovimentoCaixa  WHERE NumMovto > ? ORDER BY NumMovto, Seq ", lNumMovto, dtData, iTipo, sMsg, dHora, iSeq, lNumMovto1)
    If lErro <> AD_SQL_SUCESSO Then gError 204620

    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 204621
    
    If lErro = AD_SQL_SEM_DADOS Then gError 117565
    
    Do While lErro = AD_SQL_SUCESSO

        Print #2, lNumMovto & Chr(vbKeyLButton) & sMsg

        lErro = Comando_BuscarProximo(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 204622

    Loop
    
    lNumBytes = LOF(2)
    
    If lNumBytes > 0 Then
    
        lNumBytes1 = lNumBytes + Len(CStr(lNumBytes)) + 2
        
        lNumBytes1 = lNumBytes1 + Len(CStr(lNumBytes1)) - Len(CStr(lNumBytes))
        
        lNumBytes = lNumBytes1
    
        Print #2, CStr(lNumBytes)
    
    End If
    
    'fecha o arquivinho
    Close 2
    
    lErro = Comando_Executar(alComando(3), "INSERT INTO ArquivoSeq (UltimoNumMovto, Sequencial) VALUES (?,?)", lNumMovto, lSeqArq)
    If lErro <> AD_SQL_SUCESSO Then gError 204623
    
    gcolMarcas.Add lSeqArq
    
    lTamanho = 255
    sRetorno = String(lTamanho, 0)
    
    'Obtém o diretório onde deve ser armazenado o arquivo com dados do backoffice
    Call GetPrivateProfileString(APLICACAO_DADOS, "DirDadosECF", CONSTANTE_ERRO, sRetorno, lTamanho, NOME_ARQUIVO_CAIXA)
    
    'Retira os espaços no final da string
    sRetorno = StringZ(sRetorno)
    
    'Se não encontrou
    If Len(Trim(sRetorno)) = 0 Or sRetorno = CStr(CONSTANTE_ERRO) Then gError 127100
    
    'se o diretorio nao for terminado por \  ===> acrescentar
    If right(sRetorno, 1) <> "\" Then sRetorno = sRetorno & "\"
    
    sDir = left(sRetorno, Len(sRetorno) - 1)
    
    sRet = Dir(sDir, vbDirectory)
    
    'se o diretorio DirDadadosECF\back nao existir ==> cria
    If sRet = "" Then MkDir (sDir)
    
    sNomeArq1 = sRetorno & sNomeArq1 & ".ccc"
    '*************************************************************
    
    sNomeArqErro = sNomeArq1
    
    'verifica se o arquivo da forma 1_1_1_1.tmp existe
    sArquivo = Dir(sNomeArq1)
    
    'se o arquivo existir ==> remove o arquivo
    If Len(sArquivo) > 0 Then ECF_Apaga_Arquivo (sNomeArq1)
    
    'renomeando os arquivos
    Name sNomeArq2 As sNomeArq1
    
    'funcao que cria/altera a chave e grava no caixaconfig.ini
    lErro = CF_ECF("CaixaConfig_Chave")
    If lErro <> SUCESSO Then gError 204271
            
    For Each objMovCC In gcolMovimentosCaixa
        objMovCC.lNumIntDocLog = MARCADO
    Next
    
    If iBatch = 0 Then
        Call Rotina_AvisoECF(vbOK, AVISO_ARQUIVO_TRANSMITIDO, sNomeArq1)
    Else
        sNomeArqTransmitido = sNomeArq1
    End If
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    
    Transmitir_Arquivo_EmTrans = SUCESSO
    
    Exit Function
    
Erro_Transmitir_Arquivo_EmTrans:
    
    Close 1
    Close 2
    
    Transmitir_Arquivo_EmTrans = gErr

    Select Case gErr
    
        Case 53
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO2, gErr, sNomeArqErro)

        Case 58
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_EXISTENTE, gErr, sNomeArqErro)
        
        Case 117565
            'If iBatch = 0 Then Call Rotina_ErroECF(vbOKOnly, ERRO_NAO_HA_DADOS_TRANSMITIR, gErr)
        
        Case 105688, 105689, 126079, 204251, 204271
        
        Case 127100
            Call Rotina_ErroECF(vbOKOnly, ERRO_PREENCHIMENTO_ARQUIVO_CONFIG, gErr, "DirDadosECF", APLICACAO_DADOS, NOME_ARQUIVO_CAIXA)
        
        Case 133844
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, APLICACAO_ARQUIVO, "UltimaTransacaoTransf", NOME_ARQUIVO_CAIXA)
        
        Case 204617
        
        Case 204618, 204619
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_ARQUIVOSEQ, gErr)
        
        Case 204620, 204621, 204622
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_MOVIMENTOCAIXA, gErr)
        
        Case 204623
            Call Rotina_ErroECF(vbOKOnly, ERRO_INCLUSAO_ARQUIVOSEQ, gErr)
        
        Case 204624
        
        Case 204625
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149298)
        
    End Select
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function
    
End Function

Private Function OrcamentoECF_Grava(ByVal objVendaParam As ClassVenda, ByVal colRegistro As Collection) As Long
'Função Que Grava os orcamentos no Arquivo de Orcamentos

Dim sLog As String
Dim iIndice As Integer
Dim sArquivo As String
Dim objVenda As New ClassVenda
Dim alComandoOrc(1 To 8) As Long
Dim sTexto As String
Dim sEAD As String
Dim objItem As ClassItemCupomFiscal
Dim objProduto As New ClassProduto
Dim lErro As Long
Dim sProduto As String
Dim iSeq As Integer
Dim sNumeroDAV As String
Dim iItem As Integer
Dim iDAVNovo As Integer
Dim sIndicadorCancelamento As String
Dim lNumOrcamento As Long
Dim lTotRegD2 As Long
Dim lTotRegD3 As Long
Dim lTotRegD4 As Long, iItemNovo As Integer, sIndicadorCanc As String


On Error GoTo Erro_OrcamentoECF_Grava
    
   'Abre os  comandos
    For iIndice = LBound(alComandoOrc) To UBound(alComandoOrc)
        alComandoOrc(iIndice) = Comando_AbrirExt(glConexaoOrcPAF)
        If alComandoOrc(iIndice) = 0 Then gError 204628
    Next
    
    
    lErro = CF_ECF("Registro_ECF_Vendas", colRegistro, sArquivo, 1, objVenda)
    If lErro <> SUCESSO Then gError 204629
    
    For iSeq = 1 To colRegistro.Count
    
        sLog = colRegistro.Item(iSeq)
        
        sNumeroDAV = Format(objVenda.objCupomFiscal.lNumeroDAV, "0000000000")

        sTexto = objVenda.objCupomFiscal.lNumOrcamento & objVenda.objCupomFiscal.sNomeCliente & objVenda.objCupomFiscal.sCPFCGC & sLog & objVenda.objCupomFiscal.dtDataEmissao & STATUS_LANCADO & objVenda.objCupomFiscal.lNumero & sNumeroDAV & objVenda.objCupomFiscal.lCOOCupomOrigDAV & iSeq & objVenda.objCupomFiscal.iDAVImpresso
    
        lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
        If lErro <> SUCESSO Then gError 210195
    
        lErro = Comando_Executar(alComandoOrc(1), "INSERT INTO Orcamento (Codigo, ClienteNomeRed, CPFCNPJ, Msg, DataEmissao, Status, COO, NumeroDAV, COOCupom, Seq, DAVImpresso, EAD, IdExterno, NumCaixa, StatusExterno, EndEntLogradouro, EndEntNumero, EndEntComplemento, EndEntBairro, EndEntCidade, EndEntUF, EndEntIBGECidade, EndEntEmail) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
            objVenda.objCupomFiscal.lNumOrcamento, objVenda.objCupomFiscal.sNomeCliente, objVenda.objCupomFiscal.sCPFCGC, sLog, objVenda.objCupomFiscal.dtDataEmissao, STATUS_LANCADO, _
            objVenda.objCupomFiscal.lNumero, sNumeroDAV, objVenda.objCupomFiscal.lCOOCupomOrigDAV, iSeq, objVenda.objCupomFiscal.iDAVImpresso, sEAD, objVendaParam.objCupomFiscal.IdExterno, objVendaParam.objCupomFiscal.NumCaixa, objVendaParam.objCupomFiscal.StatusExterno, objVendaParam.objCupomFiscal.sEndEntLogradouro, objVendaParam.objCupomFiscal.sEndEntNúmero, objVendaParam.objCupomFiscal.sEndEntComplemento, objVendaParam.objCupomFiscal.sEndEntBairro, objVendaParam.objCupomFiscal.sEndEntCidade, objVendaParam.objCupomFiscal.sEndEntUF, objVendaParam.objCupomFiscal.lEndEntIBGECidade, objVendaParam.objCupomFiscal.sEndEntEmail)
        If lErro <> AD_SQL_SUCESSO Then gError 204630
    
    Next
    
    If objVenda.iTipo = OPTION_DAV Then

        If Not AFRAC_ImpressoraCFe(giCodModeloECF) Then
        
            sTexto = gsCNPJ & gsNumSerie & gsMFAdicional & gsTipoECF & gsMarcaECF & gsModeloECF & objVenda.objCupomFiscal.lNumero & sNumeroDAV & objVenda.objCupomFiscal.dtDataEmissao & "Orçamento" & objVenda.objCupomFiscal.dValorTotal & objVenda.objCupomFiscal.lCOOCupomOrigDAV & objVenda.objCupomFiscal.iSequencialECFOrigDAV & objVenda.objCupomFiscal.sNomeCliente & objVenda.objCupomFiscal.sCPFCGC & objVenda.objCupomFiscal.lNumOrcamento
        
            lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
            If lErro <> SUCESSO Then gError 210195
    
            lErro = Comando_Executar(alComandoOrc(4), "SELECT CodOrcamento FROM D2 WHERE CodOrcamento = ?", lNumOrcamento, objVenda.objCupomFiscal.lNumOrcamento)
            If lErro <> AD_SQL_SUCESSO Then gError 214040
    
            lErro = Comando_BuscarPrimeiro(alComandoOrc(4))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 214041
    
    
            If lErro = AD_SQL_SEM_DADOS Then
    
                lErro = Comando_Executar(alComandoOrc(7), "INSERT INTO D2 (CNPJ, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, COO, NumeroDAV, DataDAV, TituloDAV, ValorDAV, COOcupomvinculado, SequencialECFVinculado, NomeCliente, CNPJCliente, EAD, CodOrcamento) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                gsCNPJ, gsNumSerie, gsMFAdicional, gsTipoECF, gsMarcaECF, gsModeloECF, objVenda.objCupomFiscal.lNumero, sNumeroDAV, objVenda.objCupomFiscal.dtDataEmissao, "Orçamento", objVenda.objCupomFiscal.dValorTotal, objVenda.objCupomFiscal.lCOOCupomOrigDAV, _
                objVenda.objCupomFiscal.iSequencialECFOrigDAV, objVenda.objCupomFiscal.sNomeCliente, objVenda.objCupomFiscal.sCPFCGC, sEAD, objVenda.objCupomFiscal.lNumOrcamento)
                If lErro <> AD_SQL_SUCESSO Then gError 210196
                
                lTotRegD2 = lTotRegD2 + 1
    
                iDAVNovo = 1
    
            Else
            
                iDAVNovo = 0
                
            End If
    
    
            For Each objItem In objVenda.objCupomFiscal.colItens
                
                iItemNovo = 1
                sIndicadorCanc = ""
                
                sProduto = objItem.sProduto
                
                lErro = TP_Produto_Le_Col2(gaobjProdutosCodigo, sProduto, objProduto)
                If lErro <> SUCESSO Then gError 210473
                    
                    
                sIndicadorCancelamento = String(STRING_D4_INDICADORCANCELAMENTO, 0)
                    
                lErro = Comando_Executar(alComandoOrc(6), "SELECT IndicadorCancelamento FROM D4 WHERE CodOrcamento = ? AND ItemDAV = ? ORDER BY DataAlteracao DESC, HoraAlteracao DESC", sIndicadorCancelamento, objVenda.objCupomFiscal.lNumOrcamento, objItem.iItem)
                If lErro <> AD_SQL_SUCESSO Then gError 214038
                    
                lErro = Comando_BuscarPrimeiro(alComandoOrc(6))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 214039
                    
                If lErro = AD_SQL_SUCESSO Then
                    iItemNovo = 0
                    sIndicadorCanc = sIndicadorCancelamento
                End If
                    
                '***** se nao ha registro de alteração para o item do DAV ou se ja existe é está ocorrendo um cancelamento
                If lErro = AD_SQL_SEM_DADOS Or (lErro = AD_SQL_SUCESSO And objItem.iStatus = STATUS_CANCELADO And sIndicadorCanc = "N") Then
                    
                    If iItemNovo = 1 Then
                    
                        sIndicadorCancelamento = String(STRING_D3_INDICADORCANCELAMENTO, 0)
                        
                        lErro = Comando_Executar(alComandoOrc(3), "SELECT IndicadorCancelamento FROM D3 WHERE CodOrcamento = ? AND ItemDAV = ?", sIndicadorCancelamento, objVenda.objCupomFiscal.lNumOrcamento, objItem.iItem)
                        If lErro <> AD_SQL_SUCESSO Then gError 214038
            
                        lErro = Comando_BuscarPrimeiro(alComandoOrc(3))
                        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 214039
                            
                        If lErro = AD_SQL_SUCESSO Then
                            iItemNovo = 0
                            sIndicadorCanc = sIndicadorCancelamento
                        End If
                        
                    End If
                        
                    '***** se o DAV é novo ou seja ainda nao foi gravado, grava os itens na tabela D3
                    If iDAVNovo = 1 Then
                        
                        sTexto = gsCNPJ & gsNumSerie & gsMFAdicional & gsTipoECF & gsMarcaECF & gsModeloECF & CStr(objVenda.objCupomFiscal.lNumero) & sNumeroDAV & CStr(objItem.iItem) & CStr(objVenda.objCupomFiscal.dtDataEmissao) & objItem.sProduto & objProduto.sDescricao & CStr(objItem.dQuantidade)
                        sTexto = sTexto & objProduto.sSiglaUMVenda & CStr(objItem.dPrecoUnitario) & CStr(objItem.dValorDesconto) & "0" & CStr((objItem.dPrecoUnitario * objItem.dQuantidade) - objItem.dValorDesconto)
                        sTexto = sTexto & left(objItem.sSituacaoTrib, 1) & CStr(objItem.dAliquotaICMS) & IIf(objItem.iStatus = STATUS_CANCELADO, "S", "N") & objVenda.objCupomFiscal.lNumOrcamento
                        
                        lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
                        If lErro <> SUCESSO Then gError 210197
                        
                        
                        lErro = Comando_Executar(alComandoOrc(2), "INSERT INTO D3 (CNPJ, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, COO, NumeroDAV, ItemDAV, DataDAV, CodProduto, DescProduto, Quantidade, UM, ValorUnitario, Desconto, Acrescimo, ValorTotal, SituacaoTributaria, Aliquota, IndicadorCancelamento, EAD, CodOrcamento) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                        gsCNPJ, gsNumSerie, gsMFAdicional, gsTipoECF, gsMarcaECF, gsModeloECF, objVenda.objCupomFiscal.lNumero, sNumeroDAV, objItem.iItem, objVenda.objCupomFiscal.dtDataEmissao, objItem.sProduto, objProduto.sDescricao, objItem.dQuantidade, objProduto.sSiglaUMVenda, objItem.dPrecoUnitario, objItem.dValorDesconto, 0, (objItem.dPrecoUnitario * objItem.dQuantidade) - objItem.dValorDesconto, _
                        left(objItem.sSituacaoTrib, 1), objItem.dAliquotaICMS, IIf(objItem.iStatus = STATUS_CANCELADO, "S", "N"), sEAD, objVenda.objCupomFiscal.lNumOrcamento)
                        If lErro <> AD_SQL_SUCESSO Then gError 210198
                        
                        lTotRegD3 = lTotRegD3 + 1
                        
                    '***** se o item esta cadastrado mas houve alteração do status para cancelado ==> coloca os dados no D4 como uma exclusao
                    ElseIf iItemNovo = 0 And objItem.iStatus = STATUS_CANCELADO And sIndicadorCanc = "N" Then
                    
                        
                        sTexto = gsCNPJ & gsNumSerie & gsMFAdicional & gsTipoECF & gsMarcaECF & gsModeloECF & CStr(objVenda.objCupomFiscal.lNumero) & sNumeroDAV & CStr(objItem.iItem) & CStr(objVenda.objCupomFiscal.dtDataEmissao) & CStr(objVenda.objCupomFiscal.dHoraEmissao) & objItem.sProduto & objProduto.sDescricao & CStr(objItem.dQuantidade)
                        sTexto = sTexto & objProduto.sSiglaUMVenda & CStr(objItem.dPrecoUnitario) & CStr(objItem.dValorDesconto) & "0" & CStr((objItem.dPrecoUnitario * objItem.dQuantidade) - objItem.dValorDesconto)
                        sTexto = sTexto & left(objItem.sSituacaoTrib, 1) & CStr(objItem.dAliquotaICMS) & IIf(objItem.iStatus = STATUS_CANCELADO, "S", "N") & objVenda.objCupomFiscal.lNumOrcamento & "E"
                        
                        lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
                        If lErro <> SUCESSO Then gError 214042
                        
                        lErro = Comando_Executar(alComandoOrc(5), "INSERT INTO D4 (CNPJ, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, COO, NumeroDAV, ItemDAV, DataAlteracao, HoraAlteracao, CodProduto, DescProduto, Quantidade, UM, ValorUnitario, Desconto, Acrescimo, ValorTotal, SituacaoTributaria, Aliquota, IndicadorCancelamento, EAD, CodOrcamento, TipoAlteracao) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                        gsCNPJ, gsNumSerie, gsMFAdicional, gsTipoECF, gsMarcaECF, gsModeloECF, objVenda.objCupomFiscal.lNumero, sNumeroDAV, objItem.iItem, objVenda.objCupomFiscal.dtDataEmissao, objVenda.objCupomFiscal.dHoraEmissao, objItem.sProduto, objProduto.sDescricao, objItem.dQuantidade, objProduto.sSiglaUMVenda, objItem.dPrecoUnitario, objItem.dValorDesconto, 0, (objItem.dPrecoUnitario * objItem.dQuantidade) - objItem.dValorDesconto, _
                        left(objItem.sSituacaoTrib, 1), objItem.dAliquotaICMS, IIf(objItem.iStatus = STATUS_CANCELADO, "S", "N"), sEAD, objVenda.objCupomFiscal.lNumOrcamento, "E")
                        If lErro <> AD_SQL_SUCESSO Then gError 214036
                    
                        lTotRegD4 = lTotRegD4 + 1
                    
                    '***** se o DAV já existe no bd e é um item novo ==> coloca os dados no D4 como uma inclusao
                    ElseIf iItemNovo = 1 Then
                    
                        sTexto = gsCNPJ & gsNumSerie & gsMFAdicional & gsTipoECF & gsMarcaECF & gsModeloECF & CStr(objVenda.objCupomFiscal.lNumero) & sNumeroDAV & CStr(objItem.iItem) & CStr(objVenda.objCupomFiscal.dtDataEmissao) & CStr(objVenda.objCupomFiscal.dHoraEmissao) & objItem.sProduto & objProduto.sDescricao & CStr(objItem.dQuantidade)
                        sTexto = sTexto & objProduto.sSiglaUMVenda & CStr(objItem.dPrecoUnitario) & CStr(objItem.dValorDesconto) & "0" & CStr((objItem.dPrecoUnitario * objItem.dQuantidade) - objItem.dValorDesconto)
                        sTexto = sTexto & left(objItem.sSituacaoTrib, 1) & CStr(objItem.dAliquotaICMS) & IIf(objItem.iStatus = STATUS_CANCELADO, "S", "N") & objVenda.objCupomFiscal.lNumOrcamento & "I"
                    
                        lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
                        If lErro <> SUCESSO Then gError 214043
                    
                        lErro = Comando_Executar(alComandoOrc(5), "INSERT INTO D4 (CNPJ, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, COO, NumeroDAV, ItemDAV, DataAlteracao, HoraAlteracao, CodProduto, DescProduto, Quantidade, UM, ValorUnitario, Desconto, Acrescimo, ValorTotal, SituacaoTributaria, Aliquota, IndicadorCancelamento, EAD, CodOrcamento, TipoAlteracao) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                        gsCNPJ, gsNumSerie, gsMFAdicional, gsTipoECF, gsMarcaECF, gsModeloECF, objVenda.objCupomFiscal.lNumero, sNumeroDAV, objItem.iItem, objVenda.objCupomFiscal.dtDataEmissao, objVenda.objCupomFiscal.dHoraEmissao, objItem.sProduto, objProduto.sDescricao, objItem.dQuantidade, objProduto.sSiglaUMVenda, objItem.dPrecoUnitario, objItem.dValorDesconto, 0, (objItem.dPrecoUnitario * objItem.dQuantidade) - objItem.dValorDesconto, _
                        left(objItem.sSituacaoTrib, 1), objItem.dAliquotaICMS, IIf(objItem.iStatus = STATUS_CANCELADO, "S", "N"), sEAD, objVenda.objCupomFiscal.lNumOrcamento, "I")
                        If lErro <> AD_SQL_SUCESSO Then gError 214037
                    
                        lTotRegD4 = lTotRegD4 + 1
                    
                    
                    End If
                    
                End If
                            
            Next
                
            If iDAVNovo = 1 Then
            
                lErro = CF_ECF("Atualiza_D1", objVenda.objCupomFiscal.dtDataEmissao, lTotRegD2, lTotRegD3, lTotRegD4)
                If lErro <> SUCESSO Then gError 210252
    
            End If
            
        End If

    End If

    For iIndice = LBound(alComandoOrc) To UBound(alComandoOrc)
        Call Comando_Fechar(alComandoOrc(iIndice))
    Next

    OrcamentoECF_Grava = SUCESSO

    Exit Function

Erro_OrcamentoECF_Grava:
    
    OrcamentoECF_Grava = gErr

    Select Case gErr
        
        Case 204628, 210257
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)
        
        Case 204629, 210195, 210197, 210252, 210473, 214042, 214043
        
        Case 204630
            Call Rotina_ErroECF(vbOKOnly, ERRO_INCLUSAO_ORCAMENTO, gErr)
        
        Case 210196
            Call Rotina_ErroECF(vbOKOnly, ERRO_INCLUSAO_D2, gErr)
        
        Case 210198
            Call Rotina_ErroECF(vbOKOnly, ERRO_INCLUSAO_D3, gErr)
        
        Case 214036, 214037
            Call Rotina_ErroECF(vbOKOnly, ERRO_INCLUSAO_D4, gErr)
        
        Case 214038, 214039
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_D3, gErr)
        
        Case 214040, 214041
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_D2, gErr)
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 149275)

    End Select

    For iIndice = LBound(alComandoOrc) To UBound(alComandoOrc)
        Call Comando_Fechar(alComandoOrc(iIndice))
    Next

    Exit Function
    
End Function

Public Function OrcamentoECF_Exclui(ByVal colRegistro As Collection) As Long
'Função Que Grava os orcamentos no Arquivo de Orcamentos

Dim sLog As String
Dim iIndice As Integer
Dim sArquivo As String
Dim objVenda As New ClassVenda
Dim alComandoOrc(1 To 3) As Long
Dim lErro As Long
Dim lTotalRegD3 As Long
Dim lNumOrcamento As Long
Dim iTipo As Integer
Dim iPosAtual As Integer
Dim iPosFimAtual As Integer
Dim sRegistro As String
Dim tOrcamento As typeOrcamentoECF

On Error GoTo Erro_OrcamentoECF_Exclui
    
   'Abre os  comandos
    For iIndice = LBound(alComandoOrc) To UBound(alComandoOrc)
        alComandoOrc(iIndice) = Comando_AbrirExt(glConexaoOrcPAF)
        If alComandoOrc(iIndice) = 0 Then gError 204631
    Next
    
'    lErro = CF_ECF("Registro_ECF_Vendas", colRegistro, sArquivo, 1, objVenda)
'    If lErro <> SUCESSO Then gError 204632
    
    sRegistro = colRegistro(1)
    
    iPosFimAtual = InStr(1, sRegistro, Chr(vbKeyControl))
    
    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objVenda.objCupomFiscal.lNumOrcamento = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
'    iPosAtual = iPosFimAtual + 1
'    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
'    objVenda.objCupomFiscal.iTipo = StrParaInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
    tOrcamento.sNumeroDAV = String(STRING_ORCAMENTO_NUMERODAV, 0)
    
    lErro = Comando_Executar(alComandoOrc(1), "SELECT DataEmissao, NumeroDAV FROM Orcamento WHERE Codigo = ?", tOrcamento.dtDataEmissao, tOrcamento.sNumeroDAV, objVenda.objCupomFiscal.lNumOrcamento)
    If lErro <> AD_SQL_SUCESSO Then gError 210269

    lErro = Comando_BuscarPrimeiro(alComandoOrc(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210270

    lErro = Comando_Executar(alComandoOrc(2), "DELETE FROM Orcamento WHERE Codigo = ?", objVenda.objCupomFiscal.lNumOrcamento)
    If lErro <> AD_SQL_SUCESSO Then gError 204633


    'retirado este codigo porque a gravacao  D3 agora só é feita quando o DAV é gravado a primeira vez
    'as alterações sao armazendas em D4 na funcao OrcamentoECF_Grava
    
    'se for DAV
    If StrParaDbl(tOrcamento.sNumeroDAV) <> 0 Then

'        lErro = Comando_Executar(alComandoOrc(3), "DELETE FROM D2 WHERE CodOrcamento = ?", objVenda.objCupomFiscal.lNumOrcamento)
'        If lErro <> AD_SQL_SUCESSO Then gError 210264
'
'        lErro = Comando_Executar(alComando(2), "SELECT Count(*) FROM D3 WHERE CodOrcamento = ?", lTotalRegD3, objVenda.objCupomFiscal.lNumOrcamento)
'        If lErro <> AD_SQL_SUCESSO Then gError 210265
'
'        lErro = Comando_BuscarPrimeiro(alComando(2))
'        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210266
'
'        lErro = Comando_Executar(alComando(3), "DELETE FROM D3 WHERE CodOrcamento = ?", objVenda.objCupomFiscal.lNumOrcamento)
'        If lErro <> AD_SQL_SUCESSO Then gError 210267
'
'        lErro = CF_ECF("Atualiza_D1", tOrcamento.dtDataEmissao, -1, 0, 0)
'        If lErro <> SUCESSO Then gError 210268

    End If

'    sLog = colRegistro.Item(1)
'
'    lErro = Comando_Executar(alComando(1), "INSERT INTO OrcamentoBaixado (Codigo, ClienteNomeRed, CPFCNPJ, Msg) VALUES (?,?,?,?)", objVenda.objCupomFiscal.lNumOrcamento, objVenda.objCupomFiscal.sNomeCliente, objVenda.objCupomFiscal.sCPFCGC, sLog)
'    If lErro <> AD_SQL_SUCESSO Then gError 204630



    For iIndice = LBound(alComandoOrc) To UBound(alComandoOrc)
        Call Comando_Fechar(alComandoOrc(iIndice))
    Next

    OrcamentoECF_Exclui = SUCESSO

    Exit Function

Erro_OrcamentoECF_Exclui:
    
    OrcamentoECF_Exclui = gErr

    Select Case gErr
        
        Case 204631, 210263
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)
        
        Case 204632, 210268
        
        Case 204633
            Call Rotina_ErroECF(vbOKOnly, ERRO_EXCLUSAO_ORCAMENTO, gErr)
        
        Case 210264
            Call Rotina_ErroECF(vbOKOnly, ERRO_EXCLUSAO_D2, gErr)
        
        Case 210265, 210266
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_D3, gErr)
        
        Case 210267
            Call Rotina_ErroECF(vbOKOnly, ERRO_EXCLUSAO_D3, gErr)
        
        Case 210269, 210270
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_ORCAMENTO, gErr)
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 214008)

    End Select

    For iIndice = LBound(alComandoOrc) To UBound(alComandoOrc)
        Call Comando_Fechar(alComandoOrc(iIndice))
    Next


    Exit Function
    
End Function

Function Grava_Orcamento_ECF1(objVendaParam As ClassVenda) As Long
'grava o orcamento.

Dim colRegistro As New Collection
Dim iIndice As Integer
Dim lErro As Long
Dim objVenda As New ClassVenda
Dim sLog As String
Dim colOrcamento As New Collection
Dim lSequencialOrc As Long
Dim alComando(1 To 1) As Long
Dim sMsg As String
Dim sArquivo As String
Dim lSequencial As Long

On Error GoTo Erro_Grava_Orcamento_ECF1

    objVenda.objCupomFiscal.lNumOrcamento = objVendaParam.objCupomFiscal.lNumOrcamento

    lErro = CF_ECF("OrcamentoECF_Le", objVenda)
    If lErro <> SUCESSO And lErro <> 204690 And lErro <> 210447 Then gError 204727
        
    'se orcamento ja cadastrado ==> nao pode alterar PAFECF
'    If lErro = SUCESSO Then gError 204728

    If lErro = 210447 Then gError 210456

    'Função que Abre a Transação de Caixa, Identifica o Movimento dentro do Caixa
    lErro = CF_ECF("Caixa_Transacao_Abrir", lSequencial)
    If lErro <> SUCESSO Then gError 210255


    'Abre a Transação
    lErro = CF_ECF("Caixa_Transacao_Abrir_Orc", lSequencialOrc)
    If lErro <> SUCESSO Then gError 105830
    
    'Abre a Transação
    lErro = CF_ECF("Grava_Orcamento_ECF1_EmTrans", objVendaParam)
    If lErro <> SUCESSO Then gError 204683
    
    'Fecha a Transação
    lErro = CF_ECF("Caixa_Transacao_Fechar_Orc", lSequencialOrc)
    If lErro <> SUCESSO Then gError 105833

    'Função que Executa o Encerramento da Sessão
    lErro = CF_ECF("Caixa_Transacao_Fechar", lSequencial)
    If lErro <> SUCESSO Then gError 210256
    
    Grava_Orcamento_ECF1 = SUCESSO
    
    Exit Function
    
Erro_Grava_Orcamento_ECF1:
    
    Grava_Orcamento_ECF1 = gErr
    
    lErro = gErr
    
    Select Case lErro
    
        Case 105830 To 105833, 105835 To 105838, 105860, 133404, 133405, 204683, 204727, 210255, 210256
        
        Case 204728
            Call Rotina_ErroECF(vbOKOnly, ERRO_ORCAMENTO_JA_CADASTRADO, gErr, objVendaParam.objCupomFiscal.lNumOrcamento)
    
        Case 210456
            Call Rotina_ErroECF(vbOKOnly, ERRO_ORCAMENTO_BAIXADO, gErr, objVenda.objCupomFiscal.lNumOrcamento)
    
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB, lErro, Error, 204684)


    End Select
    
    Call CF_ECF("Caixa_Transacao_Rollback", glTransacaoPAFECF)
    Call CF_ECF("Caixa_Transacao_Rollback", glTransacaoOrcPAFECF)
    
    Exit Function
    
End Function

Function Grava_Orcamento_ECF1_EmTrans(objVendaParam As ClassVenda) As Long
'grava o orcamento.

Dim colRegistro As New Collection
Dim iIndice As Integer
Dim lErro As Long
Dim objVenda As New ClassVenda
Dim sLog As String
Dim colOrcamento As New Collection
Dim lSequencialOrc As Long
Dim alComando(1 To 1) As Long
Dim sMsg As String
Dim sArquivo As String
Dim lNumDAV As Long
Dim lNumero As Long

On Error GoTo Erro_Grava_Orcamento_ECF1_EmTrans

    If objVendaParam.objCupomFiscal.lNumOrcamento = 0 Then 'gError 105891
    
        lErro = CF_ECF("Config_ObterAutomatico_EmTrans", "OrcamentoConfig", "NUM_PROX_ORCAMENTO", "Orcamento", "Codigo", lNumero)
        If lErro <> SUCESSO And lErro <> 25191 Then gError ERRO_SEM_MENSAGEM
        
        objVendaParam.objCupomFiscal.lNumOrcamento = lNumero
    
    End If
    
    If objVendaParam.objCupomFiscal.colItens.Count = 0 Then gError 105892
    
'    'le os registros do orcamento e loca o arquivo
'    lErro = CF_ECF("OrcamentoECF_Le", colOrcamento)
'    If lErro <> SUCESSO Then gError 105860
'
'    Set colRegistro = New Collection
'
'    lSequencial = objVendaParam.objCupomFiscal.lNumOrcamento

   'Abre os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_AbrirExt(glConexaoOrcPAF)
        If alComando(iIndice) = 0 Then gError 204634
    Next
    
    

    sMsg = String(STRING_ORCAMENTO_MSG, 0)
    
    lErro = Comando_Executar(alComando(1), "SELECT Msg FROM Orcamento WHERE Codigo = ? ORDER BY Seq", sMsg, objVendaParam.objCupomFiscal.lNumOrcamento)
    If lErro <> AD_SQL_SUCESSO Then gError 204635
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 204636
    
    Set colRegistro = New Collection
    
    Do While lErro = AD_SQL_SUCESSO
        
        colRegistro.Add sMsg
    
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210525
    
    Loop
    
    If colRegistro.Count > 0 Then
        
        Set objVenda = New ClassVenda
        
        lErro = CF_ECF("Registro_ECF_Vendas", colRegistro, sArquivo, 1, objVenda)
        If lErro <> SUCESSO Then gError 204629
    
        'se o numero do cupom fiscal estiver preenchido ==> erro
        If objVenda.objCupomFiscal.lCOOCupomOrigDAV <> 0 Then gError 204309
            
        Set colRegistro = New Collection

        'Joga na string para gravar
        sLog = TIPOREGISTROECF_EXCLUSAOORCAMENTO & Chr(vbKeyControl) & objVenda.objCupomFiscal.lNumOrcamento & Chr(vbKeyEscape) & objVenda.objCupomFiscal.iECF & Chr(vbKeyEnd)
        colRegistro.Add sLog

        'Grava no arquivo ccc
        lErro = CF_ECF("MovimentoCaixaECF_Grava", colRegistro)
        If lErro <> SUCESSO Then gError 133405

        'Exclui o orcamento
        lErro = CF_ECF("OrcamentoECF_Exclui", colRegistro)
        If lErro <> SUCESSO Then gError 204740
        
    End If


    If colRegistro.Count = 0 And objVendaParam.iTipo = OPTION_DAV And objVendaParam.objCupomFiscal.IdExterno = "" Then
        
        'Função que obtém o próximo número de DAV
        lErro = CF_ECF("DAV_Obtem_Num_Automatico_EmTrans", lNumDAV)
        If lErro <> SUCESSO Then gError 214018
    
        
        objVendaParam.objCupomFiscal.lNumeroDAV = lNumDAV
        objVendaParam.objCupomFiscal.iDAVImpresso = 0
        
    End If
 


    Set colRegistro = New Collection

    'Gera a string que vai ser adicionada no arquivo
    Call CF_ECF("Venda_Gera_Log", colRegistro, objVendaParam)
    
    'Grava no arquivo
    lErro = OrcamentoECF_Grava(objVendaParam, colRegistro)
    If lErro <> SUCESSO Then gError 105838
    
    Set colRegistro = New Collection
    
    'Gera a string que vai ser adicionada no arquivo ccc
    'tanto faz colocar DAV ou PREVENDA
    Call CF_ECF("Venda_Gera_Log", colRegistro, objVendaParam, OPTION_DAV)
    
    'Grava no arquivo ccc
    lErro = CF_ECF("MovimentoCaixaECF_Grava", colRegistro)
    If lErro <> SUCESSO Then gError 133404
    
    Set colRegistro = New Collection
    
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    
    Grava_Orcamento_ECF1_EmTrans = SUCESSO
    
    Exit Function
    
Erro_Grava_Orcamento_ECF1_EmTrans:
    
    Grava_Orcamento_ECF1_EmTrans = gErr
    
    lErro = gErr
    
    Select Case lErro
    
        Case 105830 To 105833, 105835 To 105838, 105860, 133404, 133405, 204740, 210191, 214018
    
        Case 105891
            Call Rotina_ErroECF(vbOKOnly, ERRO_ORCAMENTO_NAO_PREENCHIDO, lErro)
    
        Case 105892
            Call Rotina_ErroECF(vbOKOnly, ERRO_ORCAMENTO_SEM_ITEM, lErro)

        Case 105893
    
        Case 204309
            Call Rotina_ErroECF(vbOKOnly, ERRO_ORCAMENTO_COM_CUPOM, lErro)
    
        Case 204634
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)
    
        Case 204635, 204636, 210525
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_ORCAMENTO, gErr)
            
        Case ERRO_SEM_MENSAGEM
    
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB, lErro, Error, 149338)


    End Select
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function
    
End Function



Public Function OrcamentoECF_Baixa(ByVal colRegistro As Collection) As Long
'Função Que Grava os orcamentos no Arquivo de Orcamentos

Dim sLog As String
Dim iIndice As Integer
Dim sArquivo As String
Dim objVenda As New ClassVenda
Dim alComandoOrc(1 To 4) As Long
Dim lErro As Long
Dim iPosInicio1 As Integer
Dim iPosKeyControl As Integer
Dim iPosEscape As Integer
Dim sRegistro As String
Dim tOrcamento As typeOrcamentoECF
Dim sEAD As String
Dim sTexto As String

On Error GoTo Erro_OrcamentoECF_Baixa
    
   'Abre os  comandos
    For iIndice = LBound(alComandoOrc) To UBound(alComandoOrc)
        alComandoOrc(iIndice) = Comando_AbrirExt(glConexaoOrcPAF)
        If alComandoOrc(iIndice) = 0 Then gError 204635
    Next
    
    sRegistro = colRegistro(1)
    iPosInicio1 = 1
    
    iPosKeyControl = InStr(sRegistro, Chr(vbKeyControl))
    
    iPosEscape = InStr(iPosInicio1, sRegistro, Chr(vbKeyEscape))
    objVenda.objCupomFiscal.lNumOrcamento = Mid(sRegistro, iPosKeyControl + 1, iPosEscape - (iPosKeyControl + 1))
    
    tOrcamento.sClienteNomeRed = String(STRING_ORCAMENTO_CLINOMERED, 0)
    tOrcamento.sCPFCNPJ = String(STRING_ORCAMENTO_CNPJ, 0)
    tOrcamento.sMsg = String(STRING_ORCAMENTO_MSG, 0)
    tOrcamento.sNumeroDAV = String(STRING_ORCAMENTO_NUMERODAV, 0)
    tOrcamento.sEAD = String(STRING_ORCAMENTO_EAD, 0)
    
    lErro = Comando_Executar(alComandoOrc(1), "SELECT Codigo, ClienteNomeRed, CPFCNPJ, Msg, DataEmissao, Status, COO, NumeroDAV, COOCupom, EAD, Seq, DAVImpresso FROM Orcamento WHERE Codigo = ? ORDER BY Seq", _
    tOrcamento.lCodigo, tOrcamento.sClienteNomeRed, tOrcamento.sCPFCNPJ, tOrcamento.sMsg, tOrcamento.dtDataEmissao, tOrcamento.iStatus, tOrcamento.lCOO, tOrcamento.sNumeroDAV, tOrcamento.lCOOCupom, tOrcamento.sEAD, tOrcamento.iSeq, tOrcamento.iDAVImpresso, objVenda.objCupomFiscal.lNumOrcamento)
    If lErro <> AD_SQL_SUCESSO Then gError 210488
    
    lErro = Comando_BuscarPrimeiro(alComandoOrc(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210489
    
    If lErro = AD_SQL_SEM_DADOS Then gError 210490
    
    Do While lErro = AD_SQL_SUCESSO
    
        sTexto = tOrcamento.lCodigo & tOrcamento.sClienteNomeRed & tOrcamento.sCPFCNPJ & tOrcamento.sMsg & tOrcamento.dtDataEmissao & STATUS_BAIXADO & tOrcamento.lCOO & tOrcamento.sNumeroDAV & tOrcamento.lCOOCupom & tOrcamento.iSeq & tOrcamento.iDAVImpresso
        
        lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
        If lErro <> SUCESSO Then gError 210491
        
        lErro = Comando_Executar(alComandoOrc(2), "UPDATE Orcamento SET Status = ?, EAD = ? WHERE Codigo = ? AND Seq = ?", STATUS_BAIXADO, sEAD, tOrcamento.lCodigo, tOrcamento.iSeq)
        If lErro <> AD_SQL_SUCESSO Then gError 204638
    
        lErro = Comando_BuscarProximo(alComandoOrc(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210520
    
    Loop
    
    
    For iIndice = LBound(alComandoOrc) To UBound(alComandoOrc)
        Call Comando_Fechar(alComandoOrc(iIndice))
    Next

    OrcamentoECF_Baixa = SUCESSO

    Exit Function

Erro_OrcamentoECF_Baixa:
    
    OrcamentoECF_Baixa = gErr

    Select Case gErr
        
        Case 204635
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)
        
        Case 204636, 210491
        
        Case 204638
            Call Rotina_ErroECF(vbOKOnly, ERRO_INCLUSAO_ORCAMENTOBAIXADO, gErr)
        
        Case 210488, 210489, 210520
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_ORCAMENTO, gErr)
        
        Case 210490
            Call Rotina_ErroECF(vbOKOnly, ERRO_ORCAMENTO_NAO_CADASTRADO1, gErr, objVenda.objCupomFiscal.lNumOrcamento)
            
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 204639)

    End Select

    For iIndice = LBound(alComandoOrc) To UBound(alComandoOrc)
        Call Comando_Fechar(alComandoOrc(iIndice))
    Next

    Exit Function
    
End Function


Function Caixa_Exclui_Orcamento(objVendaParam As ClassVenda) As Long
'exclui o orcamento contido em objVendaParam

Dim lErro As Long
Dim lSequencial As Long
Dim lSequencialOrc As Long

On Error GoTo Erro_Caixa_Exclui_Orcamento


    'Abre a Transação
    lErro = CF_ECF("Caixa_Transacao_Abrir", lSequencial)
    If lErro <> SUCESSO Then gError 99829


    'Abre a Transação
    lErro = CF_ECF("Caixa_Transacao_Abrir_Orc", lSequencialOrc)
    If lErro <> SUCESSO Then gError 99952

    lErro = CF_ECF("Caixa_Exclui_Orcamento_EmTrans", objVendaParam)
    If lErro <> SUCESSO And lErro <> 105761 Then gError 210445
    
    'Fecha a Transação
    lErro = CF_ECF("Caixa_Transacao_Fechar_Orc", lSequencialOrc)
    If lErro <> SUCESSO Then gError 99953
        
    
    'Função que Executa o Encerramento da Sessão
    lErro = CF_ECF("Caixa_Transacao_Fechar", lSequencial)
    If lErro <> SUCESSO Then gError 99831
                
    Caixa_Exclui_Orcamento = SUCESSO
    
    Exit Function
        
Erro_Caixa_Exclui_Orcamento:

    Caixa_Exclui_Orcamento = gErr
    lErro = gErr
    
    Select Case lErro
    
        Case 99829, 99952, 99953, 99831, 210445
                
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, lErro, Error, 210446)

    End Select
    
    'Desfaz Transação
    Call CF_ECF("Caixa_Transacao_Rollback", glTransacaoPAFECF)
    Call CF_ECF("Caixa_Transacao_Rollback", glTransacaoOrcPAFECF)

    Exit Function

End Function

Function Caixa_Exclui_Orcamento_EmTrans(objVendaParam As ClassVenda) As Long
'exclui o orcamento contido em objVendaParam

Dim lErro As Long
Dim objVenda As New ClassVenda
Dim sLog As String
Dim lSequencial As Long
Dim colRegistro As New Collection
Dim colOrcamento As New Collection
Dim iIndice As Integer
Dim lSequencialOrc As Long

On Error GoTo Erro_Caixa_Exclui_Orcamento_EmTrans

    objVenda.objCupomFiscal.lNumOrcamento = objVendaParam.objCupomFiscal.lNumOrcamento

    'le os registros do orcamento e loca o arquivo
    lErro = CF_ECF("OrcamentoECF_Le", objVenda)
    If lErro <> SUCESSO And lErro <> 204690 And lErro <> 210447 Then gError 105867

    If lErro = 210447 Then gError 210457

    If lErro <> SUCESSO Then gError 105761

    

    Set colRegistro = New Collection
        

    'Joga na string para gravar
    sLog = TIPOREGISTROECF_EXCLUSAOORCAMENTO & Chr(vbKeyControl) & objVendaParam.objCupomFiscal.lNumOrcamento & Chr(vbKeyEscape) & objVenda.objCupomFiscal.iECF & Chr(vbKeyEnd)
    
    colRegistro.Add sLog
    
    lErro = CF_ECF("OrcamentoECF_Baixa", colRegistro)
    If lErro <> SUCESSO Then gError 99901
    
    
    'Grava no arquivo ccc
    lErro = CF_ECF("MovimentoCaixaECF_Grava", colRegistro)
    If lErro <> SUCESSO Then gError 133406
    
                
    Caixa_Exclui_Orcamento_EmTrans = SUCESSO
    
    Exit Function
        
Erro_Caixa_Exclui_Orcamento_EmTrans:

    Caixa_Exclui_Orcamento_EmTrans = gErr
    
    Select Case gErr
    
        Case 99901, 105761, 105867, 133406
                
        Case 210457
            Call Rotina_ErroECF(vbOKOnly, ERRO_ORCAMENTO_BAIXADO, gErr, objVenda.objCupomFiscal.lNumOrcamento)
                
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149337)

    End Select
    
    Exit Function

End Function

Public Function CaixasAtivos_Insere_Caixa() As Long
'Função Que insere o caixa atual no arquivo q contem os caixas ativos - PAFECF

Dim sLog As String
Dim iIndice As Integer
Dim colCaixa As New Collection
Dim sCaixa As String
Dim iAchou As Integer
Dim lErro As Long
Dim alComando(1 To 2) As Long

On Error GoTo Erro_CaixasAtivos_Insere_Caixa
    
   'Abre os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_AbrirExt(glConexaoOrcPAF)
        If alComando(iIndice) = 0 Then gError 204640
    Next
    
    If giOrcamentoECF <> CAIXA_SO_ORCAMENTO Then
    
        lErro = Comando_Executar(alComando(1), "SELECT Caixa FROM CaixaAtivo WHERE Caixa = ? AND Data = ?", iCaixa, giCodCaixa, Date)
        If lErro <> AD_SQL_SUCESSO Then gError 204641
        
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 204642
        
        If lErro = AD_SQL_SEM_DADOS Then
    
            lErro = Comando_Executar(alComando(2), "INSERT INTO CaixaAtivo (Caixa, Data) VALUES (?,?)", giCodCaixa, Date)
            If lErro <> AD_SQL_SUCESSO Then gError 204643
    
        End If
    
    End If
        
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
        
    CaixasAtivos_Insere_Caixa = SUCESSO

    Exit Function

Erro_CaixasAtivos_Insere_Caixa:
    
    CaixasAtivos_Insere_Caixa = gErr

    Select Case gErr
        
        Case 204640
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)
        
        Case 204641, 204642
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_CAIXAATIVO, gErr)
        
        Case 204643
            Call Rotina_ErroECF(vbOKOnly, ERRO_INCLUSAO_CAIXAATIVO, gErr)
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 204644)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function
    
End Function

Public Function CaixasAtivos_Remove_Caixa() As Long
'Função Que remove o caixa do arquivo de caixas ativos - PAFECF

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer

On Error GoTo Erro_CaixasAtivos_Remove_Caixa
    
   'Abre os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_AbrirExt(glConexaoOrcPAF)
        If alComando(iIndice) = 0 Then gError 204640
    Next
    
    If giOrcamentoECF <> CAIXA_SO_ORCAMENTO Then
    
        'se se tratar de meia noite ou 1 da manha, transfere os caixasativos do dia anterior para o dia de hoje
'        If Hour(Time()) = 0 Or Hour(Time()) = 1 Then
'
'            lErro = CaixasAtivos_Transfere()
'            If lErro <> SUCESSO Then gError 204658
'
'        End If
    
        lErro = Comando_Executar(alComando(1), "DELETE FROM CaixaAtivo WHERE Caixa = ?", giCodCaixa)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 204659
    
    End If
        
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    CaixasAtivos_Remove_Caixa = SUCESSO

    Exit Function

Erro_CaixasAtivos_Remove_Caixa:
    
    CaixasAtivos_Remove_Caixa = gErr

    Select Case gErr
        
        Case 204658
        
        Case 204659
            Call Rotina_ErroECF(vbOKOnly, ERRO_EXCLUSAO_CAIXAATIVO, gErr)
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 204660)

    End Select

    Exit Function
    
End Function

Public Function CaixasAtivos_Total(iTotalCaixaAtivo As Integer) As Long
'Função Que conta o numero de caixas ativos - PAFECF

Dim sLog As String
Dim iIndice As Integer
Dim lErro As Long
Dim alComando(1 To 2) As Long

On Error GoTo Erro_CaixasAtivos_Total
    
   'Abre os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_AbrirExt(glConexaoOrcPAF)
        If alComando(iIndice) = 0 Then gError 204646
    Next
    
    lErro = Comando_Executar(alComando(1), "SELECT Count(*) FROM CaixaAtivo WHERE Data = ?", iTotalCaixaAtivo, Date)
    If lErro <> AD_SQL_SUCESSO Then gError 204647
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 204648
    
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
        
    CaixasAtivos_Total = SUCESSO

    Exit Function

Erro_CaixasAtivos_Total:
    
    CaixasAtivos_Total = gErr

    Select Case gErr
        
        Case 204646
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)
        
        Case 204647, 204648
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_CAIXAATIVO, gErr)
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 204649)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function
    
End Function

Public Function CaixasAtivos_Transfere() As Long
'Função Que transfere os caixas ativos do dia anterior para o dia atual

Dim sLog As String
Dim iIndice As Integer
Dim colCaixa As New Collection
Dim sCaixa As String
Dim iAchou As Integer
Dim lErro As Long
Dim alComando(1 To 3) As Long
Dim dtDataAnterior As Date
Dim iCaixa As Integer
Dim iCaixa1 As Integer

On Error GoTo Erro_CaixasAtivos_Transfere
    
   'Abre os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_AbrirExt(glConexaoOrcPAF)
        If alComando(iIndice) = 0 Then gError 204650
    Next
    
    If giOrcamentoECF <> CAIXA_SO_ORCAMENTO Then
    
        dtDataAnterior = DateAdd("d", -1, Date)
    
        lErro = Comando_Executar(alComando(1), "SELECT Caixa FROM CaixaAtivo WHERE Data = ?", iCaixa, giCodCaixa, dtDataAnterior)
        If lErro <> AD_SQL_SUCESSO Then gError 204651
        
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 204652
        
        Do While lErro = AD_SQL_SUCESSO
    
            lErro = Comando_Executar(alComando(2), "SELECT Caixa FROM CaixaAtivo WHERE Data = ?", iCaixa1, iCaixa, Date)
            If lErro <> AD_SQL_SUCESSO Then gError 204653
            
            lErro = Comando_BuscarPrimeiro(alComando(2))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 204654
            
            If lErro = AD_SQL_SEM_DADOS Then
            
                lErro = Comando_Executar(alComando(2), "INSERT INTO CaixaAtivo (Caixa, Data) VALUES (?,?)", iCaixa, Date)
                If lErro <> AD_SQL_SUCESSO Then gError 204655
                
            End If
    
            lErro = Comando_BuscarProximo(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 204656
    
        Loop
    
    End If
        
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
        
    CaixasAtivos_Transfere = SUCESSO

    Exit Function

Erro_CaixasAtivos_Transfere:
    
    CaixasAtivos_Transfere = gErr

    Select Case gErr
        
        Case 204650
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)
        
        Case 204651 To 204654, 204656
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_CAIXAATIVO, gErr)
        
        Case 204655
            Call Rotina_ErroECF(vbOKOnly, ERRO_INCLUSAO_CAIXAATIVO, gErr)
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 204657)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function
    
End Function

Public Function Venda_Obtem_Num_Automatico(lNumero As Long) As Long
    
Dim lErro As Long
Dim sArqSeq As String
Dim lTamanho As Long
Dim sRetorno As String
Dim tArqSeq As typeArqSeq
Dim colOrcamento As New Collection
Dim objVenda As ClassVenda
Dim iAchou As Integer
Dim sDir As String

On Error GoTo Erro_Venda_Obtem_Num_Automatico
    
    
    'seleciona o codigo no bd e verifica se já existe
    lErro = CF_ECF("Config_ObterAutomatico", "OrcamentoConfig", "NUM_PROX_ORCAMENTO", "Orcamento", "Codigo", lNumero)
    If lErro <> SUCESSO And lErro <> 25191 Then gError 204693
    
    Venda_Obtem_Num_Automatico = SUCESSO
    
    Exit Function

Erro_Venda_Obtem_Num_Automatico:
    
    Venda_Obtem_Num_Automatico = gErr
    
    Select Case gErr
        
        Case 204693
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 204694)

    End Select

    Exit Function

End Function

Function Config_ObterAutomatico_EmTrans(ByVal sTabelaConfig As String, ByVal sCodigo As String, ByVal sTabelaObjeto As String, ByVal sCampo As String, lNumAuto As Long, Optional ByVal sCampoFilial As String = "FilialEmpresa") As Long
'CHAMADA EM TRANSACAO
'retorna em lNumAuto o número automático disponivel do próximo objeto
'o objeto é identificado por sCodigo
'sTabelaObjeto é a Tabela do objeto
'sTabelaConfig é a Tabela de configuração do módulo
'sCampo é o campo na Tabela do objeto que armazena o número/código do objeto.

Dim lComando(1 To 3) As Long
Dim iIndice As Integer
Dim lErro As Long
Dim lNumeroBD As Long
Dim lTransacao As Long
Dim sComandoSQL As String
Dim sConteudo As String, iDependeFilial As Integer
Dim alComando(1 To 3) As Long

On Error GoTo Erro_Config_ObterAutomatico_EmTrans
    
    For iIndice = LBound(lComando) To UBound(lComando)
        lComando(iIndice) = Comando_AbrirExt(glConexaoOrcPAF)
        If lComando(iIndice) = 0 Then gError 204694
    Next

    sConteudo = String(STRING_BUFFER_MAX_TEXTO, 0)
    'Monta comando SQL de leitura na tabela de configuração
    sComandoSQL = "SELECT Conteudo FROM " & sTabelaConfig & " WHERE Codigo = ? AND FilialEmpresa = ?"

    'Pesquisa o número automático que está no BD para giFilialEmpresa
    lErro = Comando_ExecutarPos(lComando(1), sComandoSQL, 0, sConteudo, sCodigo, giFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 204695

    'Le o registro com o número automático
    lErro = Comando_BuscarPrimeiro(lComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 204696
    If lErro = AD_SQL_SEM_DADOS And giFilialEmpresa = EMPRESA_TODA Then gError 204697
    
    'se o codigo depende da filial
    iDependeFilial = 0
    
    'Se não achar pesquisa o número automático que está no BD para EMPRESA_TODA
    If lErro = AD_SQL_SEM_DADOS And giFilialEmpresa <> EMPRESA_TODA Then
    
        lErro = Comando_ExecutarPos(lComando(1), sComandoSQL, 0, sConteudo, sCodigo, EMPRESA_TODA)
        If lErro <> AD_SQL_SUCESSO Then gError 204698
    
        lErro = Comando_BuscarPrimeiro(lComando(1))
        If lErro <> AD_SQL_SUCESSO Then gError 204699
        
    Else
    
        If giFilialEmpresa <> EMPRESA_TODA Then iDependeFilial = 1
        
    End If
    
    'Locka o registro
    lErro = Comando_LockExclusive(lComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 204700

    lNumAuto = CLng(sConteudo)

    If iDependeFilial = 0 Then

        'Verifica se número automático ainda não foi utilizado
        'Monta comando SQL leitura na tabela do objeto
        sComandoSQL = "SELECT " & sCampo & " FROM " & sTabelaObjeto & " WHERE " & sCampo & " >= ? ORDER BY " & sCampo
    
        'Pesquisa as numerações do objeto maiores ou iguais ao número automático
        lErro = Comando_Executar(lComando(2), sComandoSQL, lNumeroBD, lNumAuto)
        If lErro <> AD_SQL_SUCESSO Then gError 204701

    Else
    
        'Verifica se número automático ainda não foi utilizado
        'Monta comando SQL leitura na tabela do objeto
        sComandoSQL = "SELECT " & sCampo & " FROM " & sTabelaObjeto & " WHERE " & sCampoFilial & " = ? AND " & sCampo & " >= ? ORDER BY " & sCampo
    
        'Pesquisa as numerações do objeto maiores ou iguais ao número automático
        lErro = Comando_Executar(lComando(2), sComandoSQL, lNumeroBD, giFilialEmpresa, lNumAuto)
        If lErro <> AD_SQL_SUCESSO Then gError 204702
    
    End If

    'le o primeiro codigo >= ao codigo automatico
    lErro = Comando_BuscarPrimeiro(lComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 204703

    'pesquisa o proximo número automático disponível
    Do While lErro <> AD_SQL_SEM_DADOS

        Select Case lNumeroBD
            Case Is > lNumAuto
                Exit Do
            Case Is = lNumAuto
                lNumAuto = lNumAuto + 1
        End Select

        lErro = Comando_BuscarProximo(lComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 204704

    Loop

    sConteudo = CStr(lNumAuto + 1)
    
    'Monta Comando SQL de atualizar número automático na tabela configuração
    sComandoSQL = "UPDATE " & sTabelaConfig & " SET Conteudo = ?"
    
    'Atualiza o numero automático no BD
    lErro = Comando_ExecutarPos(lComando(3), sComandoSQL, lComando(1), sConteudo)
    If lErro <> AD_SQL_SUCESSO Then gError 204705

    For iIndice = LBound(lComando) To UBound(lComando)
        lErro = Comando_Fechar(lComando(iIndice))
    Next
    
    Config_ObterAutomatico_EmTrans = SUCESSO

    Exit Function

Erro_Config_ObterAutomatico_EmTrans:

    Config_ObterAutomatico_EmTrans = gErr

    Select Case gErr

    Case 204694, 204706
        Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)

    Case 204695 To 204699
        Call Rotina_ErroECF(vbOKOnly, ERRO_ECF_LEITURA_TABELA_CONFIG, gErr, sTabelaConfig, sCodigo)

    Case 204700
        Call Rotina_ErroECF(vbOKOnly, ERRO_ECF_LOCK_TABELA_CONFIG, gErr, sTabelaConfig, sCodigo)

    Case 204701 To 204704
        Call Rotina_ErroECF(vbOKOnly, ERRO_ECF_LEITURA_TABELA, gErr, sTabelaConfig)

    Case 204705
        Call Rotina_ErroECF(vbOKOnly, ERRO_ALTERACAO_TABELA_CONFIG, gErr, sTabelaConfig, sCodigo)

    Case Else
        Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 204706)

    End Select

    For iIndice = LBound(lComando) To UBound(lComando)
        Call Comando_Fechar(lComando(iIndice))
    Next
    
    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next
    
End Function

Function Config_ObterAutomatico(ByVal sTabelaConfig As String, ByVal sCodigo As String, ByVal sTabelaObjeto As String, ByVal sCampo As String, lNumAuto As Long, Optional ByVal sCampoFilial As String = "FilialEmpresa") As Long
'CHAMADA EM TRANSACAO
'retorna em lNumAuto o número automático disponivel do próximo objeto
'o objeto é identificado por sCodigo
'sTabelaObjeto é a Tabela do objeto
'sTabelaConfig é a Tabela de configuração do módulo
'sCampo é o campo na Tabela do objeto que armazena o número/código do objeto.

Dim iIndice As Integer
Dim lErro As Long
Dim lSequencial As Long
Dim lSequencialOrc As Long

On Error GoTo Erro_Config_ObterAutomatico
    
    'Abre a Transação
    lErro = CF_ECF("Caixa_Transacao_Abrir", lSequencial)
    If lErro <> SUCESSO Then gError 204707

    If glConexaoOrcPAF <> 0 Then

        'Abre a Transação
        Call CF_ECF("Caixa_Transacao_Abrir_Orc", lSequencialOrc)
    
    End If
    
    'Grava no arquivo ccc
    lErro = CF_ECF("Config_ObterAutomatico_EmTrans", sTabelaConfig, sCodigo, sTabelaObjeto, sCampo, lNumAuto, sCampoFilial)
    If lErro <> SUCESSO Then gError 204709
    
    
    If glConexaoOrcPAF <> 0 Then
    
        'Fecha a Transação
        lErro = CF_ECF("Caixa_Transacao_Fechar_Orc", lSequencialOrc)
        If lErro <> SUCESSO Then gError 204710
        
    End If
    
    'Função que Executa o Encerramento da Sessão
    lErro = CF_ECF("Caixa_Transacao_Fechar", lSequencial)
    If lErro <> SUCESSO Then gError 204711
    
    Config_ObterAutomatico = SUCESSO

    Exit Function

Erro_Config_ObterAutomatico:

    Config_ObterAutomatico = gErr

    Select Case gErr

        Case 204707 To 204711

        Case Else
            lErro = Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 204712)

    End Select

    'Desfaz Transação
    Call CF_ECF("Caixa_Transacao_Rollback", glTransacaoPAFECF)
    Call CF_ECF("Caixa_Transacao_Rollback", glTransacaoOrcPAFECF)
    
    
End Function


Public Function DAV_Obtem_Num_Automatico_EmTrans(lNumero As Long) As Long
    
Dim lErro As Long
Dim sArqSeq As String
Dim lTamanho As Long
Dim sRetorno As String
Dim tArqSeq As typeArqSeq
Dim colOrcamento As New Collection
Dim objVenda As ClassVenda
Dim iAchou As Integer
Dim sDir As String

On Error GoTo Erro_DAV_Obtem_Num_Automatico_EmTrans
    
    'seleciona o codigo no bd e verifica se já existe
    lErro = CF_ECF("Config_ObterNumInt_EmTrans", "OrcamentoConfig", "NUM_PROX_DAV", lNumero)
    If lErro <> SUCESSO Then gError 204737
    
    DAV_Obtem_Num_Automatico_EmTrans = SUCESSO
    
    Exit Function

Erro_DAV_Obtem_Num_Automatico_EmTrans:
    
    DAV_Obtem_Num_Automatico_EmTrans = gErr
    
    Select Case gErr
        
        Case 204737
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 204738)

    End Select

    Exit Function

End Function

Function Config_ObterNumInt_EmTrans(ByVal sTabelaConfig As String, ByVal sCodigo As String, lNumInt As Long, Optional ByVal iQtde As Integer = 1, Optional ByVal iFilialEmpresa As Integer = EMPRESA_TODA) As Long
'obter um numero automatico a partir de um contador identificado por uma chave
'iQtde identifica quantos numeros devem ser "liberados" a partir do lNumInt retornado
'TEM QUE SER CHAMADA DENTRO DE TRANSACAO

Dim lErro As Long
Dim lComandoSel As Long, lComandoMod As Long
Dim sConteudo As String
Dim alComando(1 To 2) As Long
Dim iIndice As Integer

On Error GoTo Erro_Config_ObterNumInt_EmTrans

    If iQtde < 0 Then gError 204735
    
    sConteudo = String(STRING_CPRCONFIG_CONTEUDO, 0)

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_AbrirExt(glConexaoOrcPAF)
        If alComando(iIndice) = 0 Then gError 204729
    Next

    lErro = Comando_ExecutarPos(alComando(1), "SELECT Conteudo FROM " & sTabelaConfig & " WHERE Codigo = ? AND FilialEmpresa = ?", 0, sConteudo, sCodigo, iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 204730

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 204731

    If lErro = AD_SQL_SEM_DADOS Then gError 204732
    
    lErro = Comando_LockExclusive(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 204733
    
    lNumInt = CLng(sConteudo)
    sConteudo = CStr(lNumInt + iQtde)

    lErro = Comando_ExecutarPos(alComando(2), "UPDATE " & sTabelaConfig & " SET Conteudo = ?", alComando(1), sConteudo)
    If lErro <> AD_SQL_SUCESSO Then gError 204734

    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next

    Config_ObterNumInt_EmTrans = SUCESSO

    Exit Function

Erro_Config_ObterNumInt_EmTrans:

    Config_ObterNumInt_EmTrans = gErr

    Select Case gErr

        Case 204729
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)

        Case 204730, 204731
            Call Rotina_ErroECF(vbOKOnly, ERRO_ECF_LEITURA_TABELA_CONFIG, gErr, sTabelaConfig, sCodigo)

        Case 204732
            Call Rotina_ErroECF(vbOKOnly, ERRO_CONFIG_NAO_CADASTRADO, gErr, sCodigo, sTabelaConfig)
            
        Case 204733
            Call Rotina_ErroECF(vbOKOnly, ERRO_LOCK_TABELA_CONFIG, gErr, sTabelaConfig, sCodigo)
        
        Case 204734
            Call Rotina_ErroECF(vbOKOnly, ERRO_ALTERACAO_TABELA_CONFIG, gErr, sCodigo)

        Case 204735
            Call Rotina_ErroECF(vbOKOnly, ERRO_QTDE_INVALIDA_NUMINT, gErr)
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 204736)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Gravar_Arquivo_Retransmissao(ByVal sNomeArq2 As String, ByVal sNomeArq3 As String, ByVal lSeqArq As Long) As Long
'pega os dados relativo ao arquivo em questao (lSeqArq) e regrava-os para reenvio

Dim alComando(1 To 2) As Long
Dim iIndice As Integer
Dim lUltimoSequencial As Long
Dim lPrimeiroSequencial As Long
Dim sMsg As String
Dim lErro As Long
Dim lNumMovto As Long
Dim lNumBytes As Long, lNumBytes1 As Long

On Error GoTo Erro_Gravar_Arquivo_Retransmissao


    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_AbrirExt(glConexaoPAFECF)
        If alComando(iIndice) = 0 Then gError 204745
    Next

    lErro = Comando_Executar(alComando(1), "SELECT UltimoNumMovto FROM ArquivoSeq WHERE Sequencial = ?", lUltimoSequencial, lSeqArq)
    If lErro <> AD_SQL_SUCESSO Then gError 204746
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 204747

    If lErro = AD_SQL_SEM_DADOS Then gError 204748

    If lSeqArq = 1 Then
        lPrimeiroSequencial = 1
    Else
        
        lErro = Comando_Executar(alComando(1), "SELECT UltimoNumMovto FROM ArquivoSeq WHERE Sequencial = ?", lPrimeiroSequencial, lSeqArq - 1)
        If lErro <> AD_SQL_SUCESSO Then gError 204749
        
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 204750

        If lErro = AD_SQL_SEM_DADOS Then gError 204751
        
        lPrimeiroSequencial = lPrimeiroSequencial + 1

    End If
    
    'abre o arquivo temporario onde vao ser colocados os dados
    Open sNomeArq2 For Append As #2

    'Insere no Arquivo o nome do arquivinho
    Print #2, sNomeArq3
    Print #2, CStr(VERSAO_ECF)
            
    sMsg = String(STRING_MOVIMENTOCAIXA_MSG, 0)
            
    lErro = Comando_Executar(alComando(2), "SELECT NumMovto, Msg FROM MovimentoCaixa WHERE NumMovto >= ? AND NumMovto <= ? ORDER BY NumMovto, Seq", lNumMovto, sMsg, lPrimeiroSequencial, lUltimoSequencial)
    If lErro <> AD_SQL_SUCESSO Then gError 204752
    
    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 204753
            
            
    Do While lErro = AD_SQL_SUCESSO
            
        'Inseri no Arquivo
        Print #2, lNumMovto & Chr(vbKeyLButton) & sMsg
            
        lErro = Comando_BuscarProximo(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 204754
            
    Loop
            
    lNumBytes = LOF(2)
    
    If lNumBytes > 0 Then
    
        lNumBytes1 = lNumBytes + Len(CStr(lNumBytes)) + 2
        
        lNumBytes1 = lNumBytes1 + Len(CStr(lNumBytes1)) - Len(CStr(lNumBytes))
        
        lNumBytes = lNumBytes1
        
        Print #2, CStr(lNumBytes)
    
    End If
            
    Close 2
    
    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next
    
    Gravar_Arquivo_Retransmissao = SUCESSO

    Exit Function

Erro_Gravar_Arquivo_Retransmissao:

    Gravar_Arquivo_Retransmissao = gErr

    Select Case gErr

        Case 204745
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)

        Case 204746, 204747, 204749, 204750
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_ARQUIVOSEQ, gErr)

        Case 204748
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVOSEQ_NAO_CADASTRADO, gErr, lSeqArq)
            
        Case 204751
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVOSEQ_NAO_CADASTRADO, gErr, lSeqArq - 1)
            
        Case 204752 To 204754
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_MOVIMENTOCAIXA, gErr)
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB, gErr, Error, 204755)

    End Select

    Close 2

    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Requisito_X() As Long
'verifica se é a primeira reducao Z do mes e se for imprime a leitura fiscal do mes anterior

Dim alComando(1 To 2) As Long
Dim iIndice As Integer
Dim lUltimoSequencial As Long
Dim lPrimeiroSequencial As Long
Dim sMsg As String
Dim lErro As Long
Dim iDia As Integer
Dim iMes As Integer
Dim iAno As Integer
Dim sDataInicio As String
Dim sDataFinal As String
Dim dtDataInicio As Date
Dim dtDataFinal As Date
Dim dtData As Date
Dim sRetorno As String

On Error GoTo Erro_Requisito_X

    If Not AFRAC_ImpressoraCFe(giCodModeloECF) Then

        If giCodModeloECF = 1 Or giCodModeloECF = 2 Or giCodModeloECF = 3 Then
    
            For iIndice = LBound(alComando) To UBound(alComando)
                alComando(iIndice) = Comando_AbrirExt(glConexaoPAFECF)
                If alComando(iIndice) = 0 Then gError 204867
            Next
        
            'pega a data e hora da ultima reducao
            lErro = AFRAC_LerInformacaoImpressora("018", sRetorno)
            If lErro <> SUCESSO Then
            
                lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Informação Impressora")
                If lErro <> SUCESSO Then gError 204868
            End If
        
            iDia = Int(Mid(sRetorno, 1, 2))
            iMes = Int(Mid(sRetorno, 3, 2))
            iAno = Int(Mid(sRetorno, 5, 2))
        
            dtDataFinal = CDate(iDia & "/" & iMes & "/" & iAno)
            dtDataInicio = CDate("01/" & iMes & "/" & iAno)
        
            lErro = Comando_Executar(alComando(1), "SELECT DataMovimento FROM R02 WHERE DataMovimento >=  ? AND DataMovimento < ?", dtData, dtDataInicio, dtDataFinal)
            If lErro <> AD_SQL_SUCESSO Then gError 204869
            
            lErro = Comando_BuscarPrimeiro(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 204870
        
            If lErro = AD_SQL_SEM_DADOS Then
        
        
                dtData = CDate("01/" & iMes & "/" & iAno)
                
                dtDataInicio = DateDiff("m", -1, dtData)
                
                dtDataFinal = DateDiff("d", -1, Data)
                
                lErro = AFRAC_EmitirLeituraMemoriaFiscal1(sDataInicio, sDataFinal)
                If lErro <> SUCESSO Then
                    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Leitura Memoria Fiscal")
                    If lErro <> SUCESSO Then gError 204872
                End If
        
            End If
        
            For iIndice = LBound(alComando) To UBound(alComando)
                lErro = Comando_Fechar(alComando(iIndice))
            Next
        
        End If
    
    End If
    
    Requisito_X = SUCESSO
    
    Exit Function

Erro_Requisito_X:

    Requisito_X = gErr

    Select Case gErr

        Case 204867
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)

        Case 204868, 204872
    
        Case 204869, 204870
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_REDUCAOZ, gErr)

        Case 204871
            Call Rotina_ErroECF(vbOKOnly, ERRO_INCLUSAO_REDUCAOZ, gErr)
            
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 204873)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Grava_R06(ByVal sDenominacao As String) As Long
    
Dim objMovCaixa As ClassMovimentoCaixa
Dim iIndice As Integer
Dim lErro As Long
Dim sRetorno As String
Dim sNumeroSerie As String
Dim sMFAdicional As String
Dim sTipoECF As String
Dim sMarcaECF As String
Dim sModeloECF As String
Dim iNumeroUsuario As Integer
Dim lCOO As Long
Dim sData As String
Dim sHora As String
Dim sHora1 As String
Dim dtHora As Date
Dim lSequencial As Long
Dim sGRG As String
Dim lGRG As Long
Dim sGNF As String
Dim lGNF As Long
Dim sTexto As String
Dim sEAD As String
Dim alComando(1 To 4) As Long
Dim dtData As Date
Dim sData1 As String
Dim sCDC As String
Dim lCDC As Long

Dim lTotReg04 As Long
Dim lTotReg05 As Long
Dim lTotReg06 As Long
Dim lTotReg07 As Long
Dim lTotReg02BD As Long
Dim lTotReg03BD As Long
Dim lTotReg04BD As Long
Dim lTotReg05BD As Long
Dim lTotReg06BD As Long
Dim lTotReg07BD As Long

Dim sCodNacId As String
Dim sVersaoSB As String
Dim dtDataInstalacaoSB As Date
Dim sHoraInstalacaoSB As String
Dim sCNPJUsuario As String
Dim sCNPJ As String
Dim sIEUsuario As String
Dim sIE As String
Dim sSequencial As String
Dim objConfiguracaoECF As New ClassConfiguracaoECF
Dim iAbriuTransacao As Integer

On Error GoTo Erro_Grava_R06
        
    iAbriuTransacao = 0
        
    If glTransacaoPAFECF = 0 Then
        
        'Função que Abre a Transação de Caixa, Identifica o Movimento dentro do Caixa
        lErro = CF_ECF("Caixa_Transacao_Abrir", lSequencial)
        If lErro <> SUCESSO Then gError 207189
        
        iAbriuTransacao = 1
        
    End If
        
    lErro = CF_ECF("Requisito_VII_Item8_E3")
    If lErro <> SUCESSO Then gError 214340
        
        
   'Abre os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_AbrirExt(glConexaoPAFECF)
        If alComando(iIndice) = 0 Then gError 207190
    Next
        
    lErro = AFRAC_LerInformacaoImpressora("002", sNumeroSerie)
    If lErro <> SUCESSO Then
        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Informação Impressora")
        If lErro <> SUCESSO Then gError 207191
    End If

    lErro = AFRAC_LerInformacaoImpressora("050", sMFAdicional)
    If lErro <> SUCESSO Then
        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Informação Impressora")
        If lErro <> SUCESSO Then gError 207192
    End If

    lErro = AFRAC_RetornaTipoECF(sTipoECF)
    If lErro <> SUCESSO Then
        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Retorna Tipo ECF")
        If lErro <> SUCESSO Then gError 207193
    End If

    lErro = AFRAC_RetornaMarcaECF(sMarcaECF)
    If lErro <> SUCESSO Then
        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Retorna Marca ECF")
        If lErro <> SUCESSO Then gError 207194
    End If

    lErro = AFRAC_RetornaModeloECF(sModeloECF)
    If lErro <> SUCESSO Then
        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Retorna Modelo ECF")
        If lErro <> SUCESSO Then gError 207195
    End If

    lErro = AFRAC_NumeroUsuario(iNumeroUsuario)
    If lErro <> SUCESSO Then
        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Numero Usuario")
        If lErro <> SUCESSO Then gError 207196
    End If
    
    'cupom fiscal (número) no Afrac
    lErro = AFRAC_LerInformacaoImpressora("023", sRetorno)
    If lErro <> SUCESSO Then
        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Informação Impressora")
        If lErro <> SUCESSO Then gError 207197
    End If
           
    lCOO = StrParaLong(sRetorno)
           
    'le o GNF contador de operacoes nao fiscais
    lErro = AFRAC_GNF(sGNF)
    If lErro <> SUCESSO Then
        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "GNF")
        If lErro <> SUCESSO Then gError 207198
    End If
    
    lGNF = StrParaLong(sGNF)
           
    If sDenominacao = "RG" Then
           
        'le o GNF contador de relatorios gerenciais
        lErro = AFRAC_GRG(sGRG)
        If lErro <> SUCESSO Then
            lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "GRG")
            If lErro <> SUCESSO Then gError 207198
        End If
        
        lGRG = StrParaLong(sGRG)
        
    Else
        lGRG = 0
        
    End If
    
    If sDenominacao = "CC" Then
           
        'le o GNF contador de operacoes nao fiscais
        lErro = AFRAC_CDC(sCDC)
        If lErro <> SUCESSO Then
            lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "CDC")
            If lErro <> SUCESSO Then gError 207198
        End If
        
        lCDC = StrParaLong(sCDC)
        
    Else
        lCDC = 0
        
    End If
    
    
    lErro = AFRAC_DataHoraUltimoDocumento(sData, sHora)
    If lErro <> SUCESSO Then
        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "DataHoraUltimoDocumento")
        If lErro <> SUCESSO Then gError 207199
    End If
    
    sData1 = left(sData, 2) & "/" & Mid(sData, 3, 2) & "/" & right(sData, 4)
    
    dtData = StrParaDate(sData1)
    
    sHora1 = left(sHora, 2) & ":" & Mid(sHora, 3, 2) & ":" & right(sHora, 2)
    
    dtHora = StrParaDate(sHora1)
    
    
    sTexto = gdtDataAnterior & left(sNumeroSerie, 20) & sMFAdicional & left(sTipoECF, 7) & sMarcaECF & sModeloECF & iNumeroUsuario & _
        lCOO & lGNF & lGRG & lCDC & sDenominacao & dtData & sHora1

    lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
    If lErro <> SUCESSO Then gError 210363
    
    'Insere o registro R04 ao executar uma venda por cupom fiscal
    lErro = Comando_Executar(alComando(1), "INSERT INTO R06 (DataMovimento, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, NumeroUsuario, COO, GNF, GRG, CDC, Denominacao, DataFinalEmissao, HoraFinalEmissao, EAD) " & _
    " VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
        gdtDataAnterior, left(sNumeroSerie, 20), sMFAdicional, left(sTipoECF, 7), sMarcaECF, sModeloECF, iNumeroUsuario, _
        lCOO, lGNF, lGRG, lCDC, sDenominacao, dtData, Format(dtHora, "hh:mm:ss"), sEAD)
    If lErro <> AD_SQL_SUCESSO Then gError 207200
        
    lTotReg06 = lTotReg06 + 1
    
            lErro = AFRAC_LerInformacaoImpressora("003", sVersaoSB)
            lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Informação Impressora")
            If lErro <> SUCESSO Then gError 207235
        
            lErro = AFRAC_DataInstalacaoSB(dtDataInstalacaoSB)
            lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Data Instalação SB")
            If lErro <> SUCESSO Then gError 207236
        
            lErro = AFRAC_HoraInstalacaoSB(sHoraInstalacaoSB)
            lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Hora Instalação SB")
            If lErro <> SUCESSO Then gError 207237
        
            dtHora = StrParaDate(left(sHoraInstalacaoSB, 2) & ":" & Mid(sHoraInstalacaoSB, 3, 2) & ":" & right(sHoraInstalacaoSB, 2))

            lErro = AFRAC_SequencialECF(sSequencial)
            lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Retorna Sequencial ECF")
            If lErro <> SUCESSO Then gError 207238
        
            lErro = AFRAC_LerInformacaoImpressora("004", sCNPJUsuario)
            lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Informação Impressora")
            If lErro <> SUCESSO Then gError 207239
        
            sCNPJ = sCNPJUsuario
            sCNPJUsuario = ""
        
            Call Formata_String_Numero(sCNPJ, sCNPJUsuario)
        

            lErro = AFRAC_LerInformacaoImpressora("005", sIEUsuario)
            lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Informação Impressora")
            If lErro <> SUCESSO Then gError 207240
        
            sIE = sIEUsuario
            sIEUsuario = ""
        
            Call Formata_String_Numero(sIE, sIEUsuario)
        
            lErro = AFRAC_NumeroUsuario(iNumeroUsuario)
            lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Numero Usuario")
            If lErro <> SUCESSO Then gError 207241


            lErro = AFRAC_CodigoNacionalIdentificacao(sCodNacId)
            lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Codigo Nacional Identificação")
            If lErro <> SUCESSO Then gError 207229
        
    
            '****mario *** colocar a chamada as funções que geram o arquivo do ANEXO IV
            lErro = CF_ECF("ConfiguracaoECF_Le", objConfiguracaoECF)
            If lErro <> SUCESSO Then gError 210438
    
    
    
        'seleciona os registros R01
        lErro = Comando_Executar(alComando(2), "SELECT Data, TotRegR02, TotRegR03, TotRegR04, TotRegR05, TotRegR06, TotRegR07 FROM R01 WHERE Data = ? AND NumeroSerie = ? AND MFAdicional = ? AND TipoECF = ? AND MarcaECF = ? AND ModeloECF = ? ", _
        dtData, lTotReg02BD, lTotReg03BD, lTotReg04BD, lTotReg05BD, lTotReg06BD, lTotReg07BD, gdtDataAnterior, left(sNumeroSerie, 20), sMFAdicional, left(sTipoECF, 7), sMarcaECF, sModeloECF)
        If lErro <> AD_SQL_SUCESSO Then gError 210794
        
        lErro = Comando_BuscarPrimeiro(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210795
    
        If lErro = AD_SQL_SEM_DADOS Then

    
    
            'Insere o registro R01
            lErro = Comando_Executar(alComando(4), "INSERT INTO R01 (Data, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, VersaoSB, DataInstalacaoSB, HoraInstalacaoSB, SequencialECF, CNPJUsu, InscEstadualUsu, CNPJDesenv, InscEstadualDesenv, InscMunicipalDesenv, " & _
            " NomeDesenv, NomePAFECF, VersaoPAFECF, CodigoMD5,  VersaoERPAFECF, CodNacId)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                gdtDataAnterior, left(sNumeroSerie, 20), sMFAdicional, left(sTipoECF, 7), sMarcaECF, sModeloECF, sVersaoSB, dtDataInstalacaoSB, Format(dtHora, "hh:mm:ss"), CInt(left(sSequencial, 3)), sCNPJUsuario, sIEUsuario, objConfiguracaoECF.sCNPJDesenv, objConfiguracaoECF.sIEDesenv, objConfiguracaoECF.sIMDesenv, objConfiguracaoECF.sRazaoSocialDesenv, objConfiguracaoECF.sNomePAFECF, objConfiguracaoECF.sVersaoPAFECF, gsMD5PAFECF, objConfiguracaoECF.sVersaoEspReqPAFECF, sCodNacId)
            If lErro <> AD_SQL_SUCESSO Then gError 207242
        
        
        End If
        
        
        sTexto = gdtDataAnterior & left(sNumeroSerie, 20) & sMFAdicional & left(sTipoECF, 7) & sMarcaECF & sModeloECF & sVersaoSB & dtDataInstalacaoSB & Format(dtHora, "hh:mm:ss") & CInt(left(sSequencial, 3)) & sCNPJUsuario & sIEUsuario & objConfiguracaoECF.sCNPJDesenv & objConfiguracaoECF.sIEDesenv & objConfiguracaoECF.sIMDesenv & objConfiguracaoECF.sRazaoSocialDesenv & objConfiguracaoECF.sNomePAFECF & objConfiguracaoECF.sVersaoPAFECF & gsMD5PAFECF & objConfiguracaoECF.sVersaoEspReqPAFECF & sCodNacId
        sTexto = sTexto & lTotReg02BD & lTotReg03BD & lTotReg04BD & lTotReg05BD & lTotReg06 + lTotReg06BD & lTotReg07BD
        
        lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
        If lErro <> SUCESSO Then gError 210331
        
        lErro = Comando_Executar(alComando(3), "UPDATE R01 SET TotRegR06 = ?, EAD = ? WHERE  Data = ? AND NumeroSerie = ? AND MFAdicional = ? AND TipoECF = ? AND MarcaECF = ? AND ModeloECF = ? ", _
            lTotReg06 + lTotReg06BD, sEAD, gdtDataAnterior, left(sNumeroSerie, 20), sMFAdicional, left(sTipoECF, 7), sMarcaECF, sModeloECF)
        If lErro <> AD_SQL_SUCESSO Then gError 210375
        
'        Call MovimentoPorECF_Grava_Testa(gdtDataAnterior)
        
        
    If iAbriuTransacao = 1 Then
        'Fecha a Transação
        lErro = CF_ECF("Caixa_Transacao_Fechar", lSequencial)
        If lErro <> SUCESSO Then gError 207201
    End If
                        
    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next
                        
    Grava_R06 = SUCESSO
    
    Exit Function
    
Erro_Grava_R06:
    
    Grava_R06 = gErr
    
    Select Case gErr
    
        Case 207189, 207191 To 207199, 207201, 210363, 214340
    
        Case 207190
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)
                
        Case 207200
            Call Rotina_ErroECF(vbOKOnly, ERRO_INCLUSAO_R06, gErr)
                
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 207202)

    End Select
    
    If iAbriuTransacao = 1 Then
        Call CF_ECF("Caixa_Transacao_Rollback", glTransacaoPAFECF)
    End If
    
    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function
    
End Function

Function MovimentoPorECF_Grava_Data(ByVal dtDataIni As Date, ByVal dtDataFim As Date) As Long

Dim sArquivo As String
Dim sArquivo1 As String
Dim sCodNacId As String
Dim lErro As Long
Dim sNumeroSerie As String
Dim sMFAdicional As String
Dim sMarcaECF As String
Dim sTipoECF As String
Dim sModeloECF As String
Dim sVersaoSB As String
Dim dtDataInstalacaoSB As Date
Dim sHoraInstalacaoSB As String
Dim sCNPJUsuario As String
Dim iNumeroUsuario As Integer
Dim dtDataUltimaReducaoZ As Date
Dim dtDataUltimoMovimento As Date
Dim sIEUsuario As String
Dim sRegistro As String
Dim lTentaAcessoArquivo As Long
Dim sSequencial As String
Dim objLojaArqFisMestre As New ClassLojaArqFisMestre
Dim colLojaArqFisAnalitico As New Collection
Dim objUltimaReducao As New ClassUltimaReducao
Dim objMovCaixa As New ClassMovimentoCaixa
Dim sRegistro1 As String
Dim sRegistro2 As String
Dim objAliquota As ClassAliquotaICMS
Dim sTotalizadorParcial As String
Dim alComando(1 To 15) As Long
Dim tR01 As typeR01
Dim tR02 As typeR02
Dim tR03 As typeR03
Dim tR04 As typeR04
Dim tR05 As typeR05
Dim tR06 As typeR06
Dim tR07 As typeR07
Dim sZerosQtde As String
Dim sZerosValor As String
Dim sRegistroEAD As String
Dim sEAD As String
Dim sTexto As String
Dim iR01EAD As Integer
Dim lTotRegR02 As Long
Dim lTotRegR03 As Long
Dim lTotRegR04 As Long
Dim lTotRegR05 As Long
Dim lTotRegR06 As Long
Dim lTotRegR07 As Long
Dim iIndice As Integer
Dim tR01_1 As typeR01


On Error GoTo Erro_MovimentoPorECF_Grava_Data


   'Abre os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_AbrirExt(glConexaoPAFECF)
        If alComando(iIndice) = 0 Then gError 207203
    Next

    lErro = Comando_Executar(alComando(9), "SELECT SUM(TotRegR02), SUM(TotRegR03), SUM(TotRegR04), SUM(TotRegR05), SUM(TotRegR06), SUM(TotRegR07) " & _
        "  FROM R01 WHERE Data >= ? AND Data <= ?", _
        tR01_1.lTotRegR02, tR01_1.lTotRegR03, tR01_1.lTotRegR04, tR01_1.lTotRegR05, tR01_1.lTotRegR06, tR01_1.lTotRegR07, _
        dtDataIni, dtDataFim)
    If lErro <> AD_SQL_SUCESSO Then gError 210391

    lErro = Comando_BuscarPrimeiro(alComando(9))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210392


    'Conta os registros R02
    lErro = Comando_Executar(alComando(10), "SELECT Count(*) " & _
    " FROM R02 WHERE DataMovimento >= ? AND DataMovimento <= ? ", _
       lTotRegR02, dtDataIni, dtDataFim)
    If lErro <> AD_SQL_SUCESSO Then gError 210379

    lErro = Comando_BuscarPrimeiro(alComando(10))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210380

    'Conta os registros R03
    lErro = Comando_Executar(alComando(11), "SELECT Count(*) " & _
    " FROM R03 WHERE DataMovimento >= ? AND DataMovimento <= ? ", _
       lTotRegR03, dtDataIni, dtDataFim)
    If lErro <> AD_SQL_SUCESSO Then gError 210381

    lErro = Comando_BuscarPrimeiro(alComando(11))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210382

    'Conta os registros R04
    lErro = Comando_Executar(alComando(12), "SELECT Count(*) " & _
    " FROM R04 WHERE DataMovimento >= ? AND DataMovimento <= ? ", _
       lTotRegR04, dtDataIni, dtDataFim)
    If lErro <> AD_SQL_SUCESSO Then gError 210383

    lErro = Comando_BuscarPrimeiro(alComando(12))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210384

    'Conta os registros R05
    lErro = Comando_Executar(alComando(13), "SELECT Count(*) " & _
    " FROM R05 WHERE DataMovimento >= ? AND DataMovimento <= ? ", _
       lTotRegR05, dtDataIni, dtDataFim)
    If lErro <> AD_SQL_SUCESSO Then gError 210385

    lErro = Comando_BuscarPrimeiro(alComando(13))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210386

    'Conta os registros R06
    lErro = Comando_Executar(alComando(14), "SELECT Count(*) " & _
    " FROM R06 WHERE DataMovimento >= ? AND DataMovimento <= ? ", _
       lTotRegR06, dtDataIni, dtDataFim)
    If lErro <> AD_SQL_SUCESSO Then gError 210387

    lErro = Comando_BuscarPrimeiro(alComando(14))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210388

    'Conta os registros R07
    lErro = Comando_Executar(alComando(15), "SELECT Count(*) " & _
    " FROM R07 WHERE DataMovimento >= ? AND DataMovimento <= ? ", _
       lTotRegR07, dtDataIni, dtDataFim)
    If lErro <> AD_SQL_SUCESSO Then gError 210389

    lErro = Comando_BuscarPrimeiro(alComando(15))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210390

    tR01.sCodNacId = String(R01_CODNACID, 0)
    tR01.sNumeroSerie = String(R01_NUMEROSERIE, 0)
    tR01.sMFAdicional = String(R01_MFADICIONAL, 0)
    tR01.sTipoECF = String(R01_TIPOECF, 0)
    tR01.sMarcaECF = String(R01_MARCAECF, 0)
    tR01.sModeloECF = String(R01_MODELOECF, 0)
    tR01.sVersaoSB = String(R01_VERSAOSB, 0)
    tR01.sCNPJUsu = String(R01_CNPJUSU, 0)
    tR01.sIEUsu = String(R01_IEUSU, 0)
    tR01.sCNPJDesenv = String(R01_CNPJDESENV, 0)
    tR01.sIEDesenv = String(R01_IEDESENV, 0)
    tR01.sIMDesenv = String(R01_IMDESENV, 0)
    tR01.sNomeDesenv = String(R01_NOMEDESENV, 0)
    tR01.sNomePAFECF = String(R01_NOMEPAFECF, 0)
    tR01.sVersaoPAFECF = String(R01_VERSAOPAFECF, 0)
    tR01.sMD5PAFECF = String(R01_MD5PAFECF, 0)
    tR01.sVersaoEspecPAFECF = String(R01_VERSAOESPECPAFECF, 0)
    tR01.sEAD = String(R01_EAD, 0)
    tR01.sHoraInstalacaoSB = String(R01_HORAINSTALACAOSB, 0)

    'Le o registro R01
    lErro = Comando_Executar(alComando(1), "SELECT Data, CodNacId, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, VersaoSB, DataInstalacaoSB, HoraInstalacaoSB, " & _
    "SequencialECF, CNPJUsu, InscEstadualUsu, CNPJDesenv, InscEstadualDesenv, InscMunicipalDesenv, " & _
    " NomeDesenv, NomePAFECF, VersaoPAFECF, CodigoMD5,  VersaoERPAFECF, EAD, " & _
    "TotRegR02, TotRegR03, TotRegR04, TotRegR05, TotRegR06, TotRegR07 FROM R01 WHERE Data >= ? AND Data <= ? ORDER BY Data", _
        tR01.dtData, tR01.sCodNacId, tR01.sNumeroSerie, tR01.sMFAdicional, tR01.sTipoECF, tR01.sMarcaECF, tR01.sModeloECF, tR01.sVersaoSB, tR01.dtDataInstalacaoSB, _
        tR01.sHoraInstalacaoSB, tR01.iSequencialECF, tR01.sCNPJUsu, tR01.sIEUsu, tR01.sCNPJDesenv, tR01.sIEDesenv, tR01.sIMDesenv, _
        tR01.sNomeDesenv, tR01.sNomePAFECF, tR01.sVersaoPAFECF, tR01.sMD5PAFECF, tR01.sVersaoEspecPAFECF, tR01.sEAD, _
        tR01.lTotRegR02, tR01.lTotRegR03, tR01.lTotRegR04, tR01.lTotRegR05, tR01.lTotRegR06, tR01.lTotRegR07, _
        dtDataIni, dtDataFim)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210376

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210377

    iR01EAD = 0

    Do While lErro = AD_SQL_SUCESSO

        sTexto = tR01.dtData & tR01.sNumeroSerie & tR01.sMFAdicional & tR01.sTipoECF & tR01.sMarcaECF & tR01.sModeloECF & tR01.sVersaoSB & tR01.dtDataInstalacaoSB & tR01.sHoraInstalacaoSB & tR01.iSequencialECF & tR01.sCNPJUsu & tR01.sIEUsu & tR01.sCNPJDesenv & tR01.sIEDesenv & tR01.sIMDesenv & tR01.sNomeDesenv & tR01.sNomePAFECF & tR01.sVersaoPAFECF & gsMD5PAFECF & tR01.sVersaoEspecPAFECF & tR01.sCodNacId
        sTexto = sTexto & tR01.lTotRegR02 & tR01.lTotRegR03 & tR01.lTotRegR04 & tR01.lTotRegR05 & tR01.lTotRegR06 & tR01.lTotRegR07
        
        lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
        If lErro <> SUCESSO Then gError 210350

'        If tR01.sEAD <> sEAD Then
'            iR01EAD = 1
'            Exit Do
'        End If

        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210378

    Loop

    tR01.sCodNacId = String(R01_CODNACID, 0)
    tR01.sNumeroSerie = String(R01_NUMEROSERIE, 0)
    tR01.sMFAdicional = String(R01_MFADICIONAL, 0)
    tR01.sTipoECF = String(R01_TIPOECF, 0)
    tR01.sMarcaECF = String(R01_MARCAECF, 0)
    tR01.sModeloECF = String(R01_MODELOECF, 0)
    tR01.sVersaoSB = String(R01_VERSAOSB, 0)
    tR01.sCNPJUsu = String(R01_CNPJUSU, 0)
    tR01.sIEUsu = String(R01_IEUSU, 0)
    tR01.sCNPJDesenv = String(R01_CNPJDESENV, 0)
    tR01.sIEDesenv = String(R01_IEDESENV, 0)
    tR01.sIMDesenv = String(R01_IMDESENV, 0)
    tR01.sNomeDesenv = String(R01_NOMEDESENV, 0)
    tR01.sNomePAFECF = String(R01_NOMEPAFECF, 0)
    tR01.sVersaoPAFECF = String(R01_VERSAOPAFECF, 0)
    tR01.sMD5PAFECF = String(R01_MD5PAFECF, 0)
    tR01.sVersaoEspecPAFECF = String(R01_VERSAOESPECPAFECF, 0)
    tR01.sEAD = String(R01_EAD, 0)
    tR01.sHoraInstalacaoSB = String(R01_HORAINSTALACAOSB, 0)
    

    'Le o registro R01
    lErro = Comando_Executar(alComando(1), "SELECT Data, CodNacId, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, VersaoSB, DataInstalacaoSB, HoraInstalacaoSB, " & _
    "SequencialECF, CNPJUsu, InscEstadualUsu, CNPJDesenv, InscEstadualDesenv, InscMunicipalDesenv, " & _
    " NomeDesenv, NomePAFECF, VersaoPAFECF, CodigoMD5,  VersaoERPAFECF, EAD FROM R01 WHERE Data >= ? AND Data <= ? ORDER BY Data", _
        tR01.dtData, tR01.sCodNacId, tR01.sNumeroSerie, tR01.sMFAdicional, tR01.sTipoECF, tR01.sMarcaECF, tR01.sModeloECF, tR01.sVersaoSB, tR01.dtDataInstalacaoSB, _
        tR01.sHoraInstalacaoSB, tR01.iSequencialECF, tR01.sCNPJUsu, tR01.sIEUsu, tR01.sCNPJDesenv, tR01.sIEDesenv, tR01.sIMDesenv, _
        tR01.sNomeDesenv, tR01.sNomePAFECF, tR01.sVersaoPAFECF, tR01.sMD5PAFECF, tR01.sVersaoEspecPAFECF, tR01.sEAD, dtDataIni, dtDataFim)
    If lErro <> AD_SQL_SUCESSO Then gError 207204

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 207205
    
    If lErro = AD_SQL_SEM_DADOS Then gError 207206
    
'    sArquivo = gsDirMVTEF & Formata_Campo(ALINHAMENTO_DIREITA, 6, " ", tR01.sCodNacID) & Format(right(tR01.sNumeroSerie, 14), "00000000000000")
'
'    sArquivo = sArquivo & Format(Date, "ddmmyyyy") & ".txt"
'
'    sArquivo1 = Dir(sArquivo)
'
'    'se o arquivo existir ==> remove o arquivo
'    If Len(sArquivo1) > 0 Then ECF_Apaga_Arquivo (sArquivo)
'
'    'abre o arquivo q sera gerado
'    Open sArquivo For Append As #7

    

    sRegistro = "R01" & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR01.sNumeroSerie) & Format(tR01.sMFAdicional, "@")
    sRegistro = sRegistro & Formata_Campo(ALINHAMENTO_DIREITA, 7, " ", tR01.sTipoECF) & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR01.sMarcaECF)
    sRegistro = sRegistro & IIf(iR01EAD = 1, Replace(Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR01.sModeloECF), " ", "?"), Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR01.sModeloECF)) & Formata_Campo(ALINHAMENTO_DIREITA, 10, " ", tR01.sVersaoSB)
    sRegistro = sRegistro & Format(tR01.dtDataInstalacaoSB, "yyyymmdd") & Format(CDate(tR01.sHoraInstalacaoSB), "hhmmss") & Format(tR01.iSequencialECF, "000")
    sRegistro = sRegistro & Formata_Campo(ALINHAMENTO_DIREITA, 14, "0", tR01.sCNPJUsu) & Formata_Campo(ALINHAMENTO_DIREITA, 14, " ", tR01.sIEUsu)
    sRegistro = sRegistro & Formata_Campo(ALINHAMENTO_DIREITA, 14, "0", tR01.sCNPJDesenv) & Formata_Campo(ALINHAMENTO_DIREITA, 14, " ", tR01.sIEDesenv) & Formata_Campo(ALINHAMENTO_DIREITA, 14, "0", tR01.sIMDesenv)
'    sRegistro = sRegistro & IIf(tR01_1.lTotRegR02 <> lTotRegR02 Or tR01_1.lTotRegR03 <> lTotRegR03 Or tR01_1.lTotRegR04 <> lTotRegR04 Or tR01_1.lTotRegR05 <> lTotRegR05 Or tR01_1.lTotRegR06 <> lTotRegR06 Or tR01_1.lTotRegR07 <> lTotRegR07, Replace(Formata_Campo(ALINHAMENTO_DIREITA, 40, " ", tR01.sNomeDesenv), " ", "?"), Formata_Campo(ALINHAMENTO_DIREITA, 40, " ", tR01.sNomeDesenv))
    sRegistro = sRegistro & Formata_Campo(ALINHAMENTO_DIREITA, 40, " ", tR01.sNomeDesenv)
    sRegistro = sRegistro & Formata_Campo(ALINHAMENTO_DIREITA, 40, " ", tR01.sNomePAFECF)
    sRegistro = sRegistro & Formata_Campo(ALINHAMENTO_DIREITA, 10, " ", tR01.sVersaoPAFECF) & Formata_Campo(ALINHAMENTO_DIREITA, 32, " ", tR01.sMD5PAFECF)
    sRegistro = sRegistro & Format(dtDataIni, "yyyymmdd") & Format(dtDataFim, "yyyymmdd") & Formata_Campo(ALINHAMENTO_DIREITA, 4, " ", tR01.sVersaoEspecPAFECF)
    
    'Inseri no Arquivo
    Print #7, sRegistro
        
        
    tR02.sIncidenciaDescontoISS = String(R02_INCIDENCIADESCONTOISS, 0)
    tR02.sNumeroSerie = String(R01_NUMEROSERIE, 0)
    tR02.sMFAdicional = String(R01_MFADICIONAL, 0)
    tR02.sModeloECF = String(R01_MODELOECF, 0)
    tR02.sTipoECF = String(R01_TIPOECF, 0)
    tR02.sMarcaECF = String(R01_MARCAECF, 0)
    tR02.sEAD = String(R02_EAD, 0)
    tR02.sHoraEmissaoRedZ = String(R02_HORAREDUCAOZ, 0)

    'Le os registros R02
    lErro = Comando_Executar(alComando(2), "SELECT NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, DataMovimento, NumeroUsuario, CRZ, COO, CRO, DataEmissaoRedZ, HoraEmissaoRedZ, VendaBruta, IncidenciaDescontoISS, EAD " & _
    " FROM R02 WHERE DataMovimento >= ? AND DataMovimento <= ? ORDER BY NumeroSerie, ModeloEcf, NumeroUsuario, CRZ, CRO", _
    tR02.sNumeroSerie, tR02.sMFAdicional, tR02.sTipoECF, tR02.sMarcaECF, tR02.sModeloECF, tR02.dtDataMovimento, tR02.iNumeroUsuario, tR02.lCRZ, tR02.lCOO, tR02.lCRO, tR02.dtDataEmissaoRedZ, tR02.sHoraEmissaoRedZ, tR02.dVendaBruta, tR02.sIncidenciaDescontoISS, tR02.sEAD, _
        dtDataIni, dtDataFim)
    If lErro <> AD_SQL_SUCESSO Then gError 207207

    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 207208
        
    Do While lErro = AD_SQL_SUCESSO
        
        'trata registro 02
        
        sTexto = tR02.dtDataMovimento & tR02.sNumeroSerie & tR02.sMFAdicional & tR02.sTipoECF & tR02.sMarcaECF & tR02.sModeloECF & tR02.iNumeroUsuario & tR02.lCRZ & tR02.lCOO & tR02.lCRO & tR02.dtDataEmissaoRedZ & tR02.sHoraEmissaoRedZ & tR02.dVendaBruta & tR02.sIncidenciaDescontoISS
        
        lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
        If lErro <> SUCESSO Then gError 210351
        
        
        sRegistro1 = "R02" & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR02.sNumeroSerie) & Format(tR02.sMFAdicional, "@")
        sRegistro1 = sRegistro1 & IIf(tR02.sEAD <> sEAD, Replace(Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR02.sModeloECF), " ", "?"), Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR02.sModeloECF)) & Format(tR02.iNumeroUsuario, "00")
        sRegistro1 = sRegistro1 & Format(tR02.lCRZ, "000000") & Format(tR02.lCOO, "000000")
        sRegistro1 = sRegistro1 & Format(tR02.lCRO, "000000") & Format(tR02.dtDataMovimento, "yyyymmdd")
        sRegistro1 = sRegistro1 & Format(tR02.dtDataEmissaoRedZ, "yyyymmdd") & Format(CDate(tR02.sHoraEmissaoRedZ), "hhmmss")
        sRegistro1 = sRegistro1 & Format(CDbl(Format(tR02.dVendaBruta, "Fixed")) * 100, "00000000000000") & tR02.sIncidenciaDescontoISS
        
        'Inseri no Arquivo
        Print #7, sRegistro1
        
        lErro = Comando_BuscarProximo(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 207209
        
    Loop
           
           

    tR03.sTotalizadorParcial = String(R03_TOTALIZADORPARCIAL, 0)
    tR03.sNumeroSerie = String(R01_NUMEROSERIE, 0)
    tR03.sMFAdicional = String(R01_MFADICIONAL, 0)
    tR03.sTipoECF = String(R01_TIPOECF, 0)
    tR03.sMarcaECF = String(R01_MARCAECF, 0)
    tR03.sModeloECF = String(R01_MODELOECF, 0)
    tR03.sEAD = String(R03_EAD, 0)
        
    'Le os registros R03
    lErro = Comando_Executar(alComando(3), "SELECT NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, DataMovimento, NumeroUsuario, CRZ, TotalizadorParcial, Valor, EAD " & _
    " FROM R03 WHERE  DataMovimento >= ? AND DataMovimento <= ? ORDER BY NumeroSerie, ModeloECF, NumeroUsuario, CRZ, TotalizadorParcial ", _
    tR03.sNumeroSerie, tR03.sMFAdicional, tR03.sTipoECF, tR03.sMarcaECF, tR03.sModeloECF, tR03.dtDataMovimento, tR03.iNumeroUsuario, tR03.lCRZ, tR03.sTotalizadorParcial, tR03.dValor, tR03.sEAD, _
        dtDataIni, dtDataFim)
    If lErro <> AD_SQL_SUCESSO Then gError 207210

    lErro = Comando_BuscarPrimeiro(alComando(3))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 207211
        
    Do While lErro = AD_SQL_SUCESSO
        
        'trata registro 03
        
        sTexto = tR03.dtDataMovimento & tR03.sNumeroSerie & tR03.sMFAdicional & tR03.sTipoECF & tR03.sMarcaECF & tR03.sModeloECF & tR03.iNumeroUsuario & tR03.lCRZ & tR03.sTotalizadorParcial & tR03.dValor
        
        lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
        If lErro <> SUCESSO Then gError 210352
        
        
        sRegistro1 = "R03" & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR03.sNumeroSerie) & Format(tR03.sMFAdicional, "@")
        sRegistro1 = sRegistro1 & IIf(tR03.sEAD <> sEAD, Replace(Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR03.sModeloECF), " ", "?"), Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR03.sModeloECF)) & Format(tR03.iNumeroUsuario, "00")
        sRegistro1 = sRegistro1 & Format(tR03.lCRZ, "000000") & Formata_Campo(ALINHAMENTO_DIREITA, 7, " ", tR03.sTotalizadorParcial)
        sRegistro1 = sRegistro1 & Format(CDbl(Format(tR03.dValor, "Fixed")) * 100, "0000000000000")
        
        'Inseri no Arquivo
        Print #7, sRegistro1
        
        lErro = Comando_BuscarProximo(alComando(3))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 207212
        
    Loop
    
    tR04.sNumeroSerie = String(R01_NUMEROSERIE, 0)
    tR04.sMFAdicional = String(R01_MFADICIONAL, 0)
    tR04.sTipoECF = String(R01_TIPOECF, 0)
    tR04.sMarcaECF = String(R01_MARCAECF, 0)
    tR04.sModeloECF = String(R01_MODELOECF, 0)
    tR04.sTipoDesconto = String(R04_TIPODESCONTO, 0)
    tR04.sTipoAcrescimo = String(R04_TIPOACRESCIMO, 0)
    tR04.sIndicadorCancelamento = String(R04_INDICADORCANCELAMENTO, 0)
    tR04.sOrdemDescAcresc = String(R04_ORDEMDESCACRESC, 0)
    tR04.sNomeAdiquirente = String(R04_NOMEADQUIRENTE, 0)
    tR04.sCPFCNPJ = String(R04_CPFCNPJ, 0)
    tR04.sEAD = String(R04_EAD, 0)
    
    
    'seleciona os registros R04 ordenados por CCF para insercao no arquivo
    lErro = Comando_Executar(alComando(5), "SELECT DataMovimento, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, NumeroUsuario, CCF, COO, DataEmissao, Subtotal, Desconto, TipoDesconto, Acrescimo, TipoAcrescimo, ValorTotal, IndicadorCancelamento, ValorCancAcrescimo, OrdemDescAcresc, NomeAdiquirente, CPFCNPJ, EAD FROM R04 WHERE DataMovimento >= ? AND DataMovimento <= ?  ORDER BY NumeroSerie, ModeloECF, NumeroUsuario, CCF, EAD", _
    tR04.dtDataMovimento, tR04.sNumeroSerie, tR04.sMFAdicional, tR04.sTipoECF, tR04.sMarcaECF, tR04.sModeloECF, tR04.iNumeroUsuario, tR04.lCCF, tR04.lCOO, tR04.dtDataEmissao, tR04.dSubtotal, tR04.dDesconto, tR04.sTipoDesconto, tR04.dAcrescimo, tR04.sTipoAcrescimo, tR04.dValorTotal, tR04.sIndicadorCancelamento, tR04.dValorCancAcrescimo, tR04.sOrdemDescAcresc, tR04.sNomeAdiquirente, tR04.sCPFCNPJ, tR04.sEAD, dtDataIni, dtDataFim)
    If lErro <> AD_SQL_SUCESSO Then gError 207213
    

    lErro = Comando_BuscarPrimeiro(alComando(5))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 207214
    
    Do While lErro = AD_SQL_SUCESSO
    
        sTexto = tR04.dtDataMovimento & tR04.sNumeroSerie & tR04.sMFAdicional & tR04.sTipoECF & tR04.sMarcaECF & tR04.sModeloECF & tR04.iNumeroUsuario & _
            tR04.lCCF & tR04.lCOO & tR04.dtDataEmissao & tR04.dSubtotal & tR04.dDesconto & tR04.sTipoDesconto & tR04.dAcrescimo & tR04.sTipoAcrescimo & tR04.dValorTotal & tR04.sIndicadorCancelamento & tR04.dValorCancAcrescimo & tR04.sOrdemDescAcresc & tR04.sNomeAdiquirente & tR04.sCPFCNPJ
        
        lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
        If lErro <> SUCESSO Then gError 210362
    
    
        sRegistro1 = "R04" & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR04.sNumeroSerie) & Format(tR04.sMFAdicional, "@")
        sRegistro1 = sRegistro1 & IIf(tR04.sEAD <> sEAD, Replace(Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR04.sModeloECF), " ", "?"), Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR04.sModeloECF)) & Format(tR04.iNumeroUsuario, "00")
        sRegistro1 = sRegistro1 & Format(tR04.lCCF, "000000") & Format(tR04.lCOO, "000000")
        sRegistro1 = sRegistro1 & Format(tR04.dtDataEmissao, "yyyymmdd") & Format(CDbl(Format(tR04.dSubtotal, "Fixed")) * 100, "00000000000000")
        sRegistro1 = sRegistro1 & Format(CDbl(Format(tR04.dDesconto, "Fixed")) * 100, "0000000000000") & tR04.sTipoDesconto
        sRegistro1 = sRegistro1 & Format(CDbl(Format(tR04.dAcrescimo, "Fixed")) * 100, "0000000000000") & tR04.sTipoAcrescimo
        sRegistro1 = sRegistro1 & Format(CDbl(Format(tR04.dValorTotal, "Fixed")) * 100, "00000000000000") & tR04.sIndicadorCancelamento & Format(CDbl(Format(tR04.dValorCancAcrescimo, "Fixed")) * 100, "0000000000000")
        sRegistro1 = sRegistro1 & tR04.sOrdemDescAcresc & Formata_Campo(ALINHAMENTO_DIREITA, 40, " ", tR04.sNomeAdiquirente)
        sRegistro1 = sRegistro1 & Formata_Campo(ALINHAMENTO_ESQUERDA, 14, "0", tR04.sCPFCNPJ)
    
        Print #7, sRegistro1
    
        lErro = Comando_BuscarProximo(alComando(5))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 207215
    
    Loop
    
    
    tR05.sNumeroSerie = String(R01_NUMEROSERIE, 0)
    tR05.sMFAdicional = String(R01_MFADICIONAL, 0)
    tR05.sModeloECF = String(R01_MODELOECF, 0)
    tR05.sCodProduto = String(R05_CODPRODUTO, 0)
    tR05.sDescProduto = String(R05_DESCPRODUTO, 0)
    tR05.sUM = String(R05_UM, 0)
    tR05.sTotalizadorParcial = String(R05_TOTALIZADORPARCIAL, 0)
    tR05.sIndicadorCancelamento = String(R05_INDICADORCANCELAMENTO, 0)
    tR05.sIAT = String(R05_IAT, 0)
    tR05.sPPT = String(R05_PPT, 0)
    tR05.sEAD = String(R05_EAD, 0)
    
    tR05.sTipoECF = String(R01_TIPOECF, 0)
    tR05.sMarcaECF = String(R01_MARCAECF, 0)
    
    
    'seleciona os registros R05 ordenados por CCF para insercao no arquivo
    lErro = Comando_Executar(alComando(6), "SELECT DataMovimento, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, NumeroUsuario, COO, Item, CCF, CodProduto, DescProduto, Quantidade, ValorUnitario, Desconto, Acrescimo, " & _
    " ValorTotal, TotalizadorParcial, IndicadorCancelamento, QuantidadeCancelada, ValorCancelado, ValorCancelAcrescimo, IAT, PPT, Casasdecimaisqtde, Casasdecimaisvalor, UM, EAD FROM R05 WHERE DataMovimento >= ? AND DataMovimento <= ? ORDER BY NumeroSerie, ModeloECF, NumeroUsuario, CCF, Item", _
    tR05.dtDataMovimento, tR05.sNumeroSerie, tR05.sMFAdicional, tR05.sTipoECF, tR05.sMarcaECF, tR05.sModeloECF, tR05.iNumeroUsuario, tR05.lCOO, tR05.iItem, tR05.lCCF, tR05.sCodProduto, tR05.sDescProduto, tR05.dQuantidade, tR05.dValorUnitario, tR05.dDesconto, tR05.dAcrescimo, tR05.dValorTotal, tR05.sTotalizadorParcial, tR05.sIndicadorCancelamento, tR05.dQuantidadeCancelada, tR05.dValorCancelado, tR05.dValorCancelAcrescimo, tR05.sIAT, tR05.sPPT, tR05.iCasasdecimaisqtde, tR05.iCasasdecimaisvalor, tR05.sUM, tR05.sEAD, dtDataIni, dtDataFim)
    If lErro <> AD_SQL_SUCESSO Then gError 207216
    
    lErro = Comando_BuscarPrimeiro(alComando(6))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 207217
    
    Do While lErro = AD_SQL_SUCESSO
    
        For iIndice = 1 To tR05.iCasasdecimaisqtde
            sZerosQtde = sZerosQtde & "0"
        Next
    
        For iIndice = 1 To tR05.iCasasdecimaisvalor
            sZerosValor = sZerosValor & "0"
        Next
    
        sTexto = tR05.dtDataMovimento & tR05.sNumeroSerie & tR05.sMFAdicional & tR05.sTipoECF & tR05.sMarcaECF & tR05.sModeloECF & tR05.iNumeroUsuario & _
            tR05.lCCF & tR05.lCOO & tR05.iItem & tR05.sCodProduto & tR05.sDescProduto & tR05.dQuantidade & _
            tR05.sUM & tR05.dValorUnitario & tR05.dDesconto & tR05.dAcrescimo & tR05.dValorTotal & _
            tR05.sTotalizadorParcial & tR05.sIndicadorCancelamento & tR05.dQuantidadeCancelada & tR05.dValorCancelado & tR05.dValorCancelAcrescimo & tR05.sIAT & tR05.sPPT & tR05.iCasasdecimaisqtde & tR05.iCasasdecimaisvalor

        
        lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
        If lErro <> SUCESSO Then gError 210348
    
        sRegistro1 = "R05" & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR05.sNumeroSerie) & Format(tR05.sMFAdicional, "@")
        sRegistro1 = sRegistro1 & IIf(tR05.sEAD <> sEAD, Replace(Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR05.sModeloECF), " ", "?"), Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR05.sModeloECF)) & Format(tR05.iNumeroUsuario, "00")
        sRegistro1 = sRegistro1 & Format(tR05.lCOO, "000000") & Format(tR05.lCCF, "000000")
        sRegistro1 = sRegistro1 & Format(tR05.iItem, "000") & Formata_Campo(ALINHAMENTO_DIREITA, 14, " ", tR05.sCodProduto)
        sRegistro1 = sRegistro1 & Formata_Campo(ALINHAMENTO_DIREITA, 100, " ", tR05.sDescProduto) & Format(CDbl(Format(tR05.dQuantidade, "0." & sZerosQtde)) * (10 ^ tR05.iCasasdecimaisqtde), "0000000")
        sRegistro1 = sRegistro1 & Formata_Campo(ALINHAMENTO_DIREITA, 3, " ", tR05.sUM) & Format(CDbl(Format(tR05.dValorUnitario, "0." & sZerosValor)) * (10 ^ tR05.iCasasdecimaisvalor), "00000000") & Format(CDbl(Format(tR05.dDesconto, "Fixed")) * 100, "00000000")
        sRegistro1 = sRegistro1 & Format(CDbl(Format(tR05.dAcrescimo, "Fixed")) * 100, "00000000") & Format(CDbl(Format(tR05.dValorTotal, "Fixed")) * 100, "00000000000000")
        sRegistro1 = sRegistro1 & Formata_Campo(ALINHAMENTO_DIREITA, 7, " ", tR05.sTotalizadorParcial) & tR05.sIndicadorCancelamento
        sRegistro1 = sRegistro1 & Format(tR05.dQuantidadeCancelada, "0000000") & Format(CDbl(Format(tR05.dValorCancelado, "Fixed")) * 100, "0000000000000") & Format(CDbl(Format(tR05.dValorCancelAcrescimo, "Fixed")) * 100, "0000000000000") & tR05.sIAT & tR05.sPPT & Format(tR05.iCasasdecimaisqtde, "0") & Format(tR05.iCasasdecimaisvalor, "0")
        
        Print #7, sRegistro1
    
        lErro = Comando_BuscarProximo(alComando(6))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 207218
    
    Loop
    
    tR06.sNumeroSerie = String(R01_NUMEROSERIE, 0)
    tR06.sMFAdicional = String(R01_MFADICIONAL, 0)
    tR06.sModeloECF = String(R01_MODELOECF, 0)
    tR06.sDenominacao = String(R06_DENOMINACAO, 0)
    tR06.sEAD = String(R06_EAD, 0)
    
    tR06.sTipoECF = String(R01_TIPOECF, 0)
    tR06.sMarcaECF = String(R01_MARCAECF, 0)
    tR06.sHoraFinalEmissao = String(R06_HORAFINALEMISSAO, 0)
    
    'seleciona os registros R06 ordenados por COO para insercao no arquivo
    lErro = Comando_Executar(alComando(7), "SELECT DataMovimento, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, NumeroUsuario, COO, GNF, GRG, CDC, denominacao, datafinalemissao, horafinalemissao, EAD " & _
    "  FROM R06 WHERE DataMovimento >= ? AND DataMovimento <= ? ORDER BY NumeroSerie, ModeloECF, NumeroUsuario, COO", _
    tR06.dtDataMovimento, tR06.sNumeroSerie, tR06.sMFAdicional, tR06.sTipoECF, tR06.sMarcaECF, tR06.sModeloECF, tR06.iNumeroUsuario, tR06.lCOO, tR06.lGNF, tR06.lGRG, tR06.lCDC, tR06.sDenominacao, tR06.dtDataFinalEmissao, tR06.sHoraFinalEmissao, tR06.sEAD, dtDataIni, dtDataFim)
    If lErro <> AD_SQL_SUCESSO Then gError 207219
    
    lErro = Comando_BuscarPrimeiro(alComando(7))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 207220
    
    Do While lErro = AD_SQL_SUCESSO
    
        sTexto = tR06.dtDataMovimento & tR06.sNumeroSerie & tR06.sMFAdicional & tR06.sTipoECF & tR06.sMarcaECF & tR06.sModeloECF & tR06.iNumeroUsuario & _
            tR06.lCOO & tR06.lGNF & tR06.lGRG & tR06.lCDC & tR06.sDenominacao & tR06.dtDataFinalEmissao & tR06.sHoraFinalEmissao
    
    
        lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
        If lErro <> SUCESSO Then gError 210363
    
        sRegistro1 = "R06" & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR06.sNumeroSerie) & Format(tR06.sMFAdicional, "@")
        sRegistro1 = sRegistro1 & IIf(tR06.sEAD <> sEAD, Replace(Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR06.sModeloECF), " ", "?"), Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR06.sModeloECF)) & Format(tR06.iNumeroUsuario, "00")
        sRegistro1 = sRegistro1 & Format(tR06.lCOO, "000000") & Format(tR06.lGNF, "000000") & Format(tR06.lGRG, "000000")
        sRegistro1 = sRegistro1 & Format(tR06.lCDC, "0000") & Formata_Campo(ALINHAMENTO_DIREITA, 2, " ", tR06.sDenominacao)
        sRegistro1 = sRegistro1 & Format(tR06.dtDataFinalEmissao, "yyyymmdd") & Format(CDate(tR06.sHoraFinalEmissao), "hhmmss")
        
        Print #7, sRegistro1
    
        lErro = Comando_BuscarProximo(alComando(7))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 207221
    
    Loop
    
    
    tR07.sNumeroSerie = String(R01_NUMEROSERIE, 0)
    tR07.sMFAdicional = String(R01_MFADICIONAL, 0)
    tR07.sModeloECF = String(R01_MODELOECF, 0)
    tR07.sMeioPagamento = String(R07_MEIOPAGAMENTO, 0)
    tR07.sIndicadorEstorno = String(R07_INDICADORESTORNO, 0)
    tR07.sEAD = String(R07_EAD, 0)
    
    tR07.sTipoECF = String(R01_TIPOECF, 0)
    tR07.sMarcaECF = String(R01_MARCAECF, 0)
    
    
    'seleciona os registros R07 ordenados por COO para insercao no arquivo
    lErro = Comando_Executar(alComando(8), "SELECT DataMovimento, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, NumeroUsuario, COO, GNF, CCF, MeioPagamento, Valor, IndicadorEstorno, ValorEstorno, EAD " & _
    "  FROM R07 WHERE DataMovimento >= ? AND DataMovimento <= ?  ORDER BY NumeroSerie, ModeloECF, NumeroUsuario, COO, MeioPagamento", _
    tR07.dtDataMovimento, tR07.sNumeroSerie, tR07.sMFAdicional, tR07.sTipoECF, tR07.sMarcaECF, tR07.sModeloECF, tR07.iNumeroUsuario, tR07.lCOO, tR07.lGNF, tR07.lCCF, tR07.sMeioPagamento, tR07.dValor, tR07.sIndicadorEstorno, tR07.dValorEstorno, tR07.sEAD, dtDataIni, dtDataFim)
    If lErro <> AD_SQL_SUCESSO Then gError 207222
    
    
    lErro = Comando_BuscarPrimeiro(alComando(8))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 207223
    
    Do While lErro = AD_SQL_SUCESSO
    
    
        sTexto = tR07.dtDataMovimento & tR07.sNumeroSerie & tR07.sMFAdicional & tR07.sTipoECF & tR07.sMarcaECF & tR07.sModeloECF & tR07.iNumeroUsuario & _
            tR07.lCOO & tR07.lCCF & tR07.lGNF & tR07.sMeioPagamento & tR07.dValor & tR07.sIndicadorEstorno & tR07.dValorEstorno

        
        lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
        If lErro <> SUCESSO Then gError 210365
    
        sRegistro1 = "R07" & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR07.sNumeroSerie) & Format(tR07.sMFAdicional, "@")
        sRegistro1 = sRegistro1 & IIf(tR07.sEAD <> sEAD, Replace(Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR07.sModeloECF), " ", "?"), Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR07.sModeloECF)) & Format(tR07.iNumeroUsuario, "00")
        sRegistro1 = sRegistro1 & Format(tR07.lCOO, "000000") & Format(tR07.lCCF, "000000") & Format(tR07.lGNF, "000000")
        sRegistro1 = sRegistro1 & Formata_Campo(ALINHAMENTO_DIREITA, R07_MEIOPAGAMENTO, " ", tR07.sMeioPagamento)
        sRegistro1 = sRegistro1 & Format(CDbl(Format(tR07.dValor, "Fixed")) * 100, "0000000000000")
        sRegistro1 = sRegistro1 & tR07.sIndicadorEstorno & Format(CDbl(Format(tR07.dValorEstorno, "Fixed")) * 100, "0000000000000")
        
        Print #7, sRegistro1
    
        lErro = Comando_BuscarProximo(alComando(8))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 207224
    
    Loop
    
    
'    Close #7
'
'    lErro = AFRAC_CriaAssinaturaRSA(sArquivo, sRegistroEAD)
'    If lErro <> SUCESSO Then gError 207225
    
    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next
    
'    Call MsgBox("Arquivo " & sArquivo & " foi gerado com sucesso.", vbOKOnly, "Movimentos Diários")
'    Call Rotina_AvisoECF(vbOKOnly, "Arquivo de Movimentos Diários " & sArquivo & " foi gerado com sucesso.")
    
    
    MovimentoPorECF_Grava_Data = SUCESSO

    Exit Function

Erro_MovimentoPorECF_Grava_Data:

    MovimentoPorECF_Grava_Data = gErr
    
    Select Case gErr

        Case 207203
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)

        Case 207204, 207205, 210376 To 210378, 210391, 210392
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_R01, gErr)

        Case 207206
            Call Rotina_ErroECF(vbOKOnly, ERRO_NAO_EXISTE_R01_PERIODO, gErr)

        Case 207207, 207208, 207209, 210379, 210380
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_R02, gErr)

        Case 207210, 207211, 207212, 210381, 210382
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_R03, gErr)

        Case 207213, 207214, 207215, 210383, 210384
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_R04, gErr)

        Case 207216, 207217, 207218, 210385, 210386
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_R05, gErr)
        
        Case 207219, 207220, 207221, 210387, 210388
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_R06, gErr)
        
        Case 207222, 207223, 207224, 210289, 210290
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_R07, gErr)
        
        Case 70
            lTentaAcessoArquivo = lTentaAcessoArquivo + 1
            If lTentaAcessoArquivo < NUM_MAX_LOCK Then Resume
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_LOCADO, gErr, sArquivo)

        Case 207225
            Call Rotina_ErroECF(vbOKOnly, ERRO_GERACAO_ASSINATURA, gErr)

        Case 210350 To 210352, 210362 To 210363, 210365

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 207226)

    End Select
    
'    Close #7
    
    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Function Requisito_IX() As Long

Dim alComando(1 To 1) As Long
Dim iIndice As Integer
Dim lErro As Long
Dim sConteudo As String
Dim sMD5 As String
Dim sArquivo As String
Dim sRegistro As String
Dim iNumRegN3 As Integer
Dim sNome As String
Dim sNomeCompleto As String
Dim objECFCorporator As New ClassECFCorporator
Dim sRegistroEAD As String
Dim objConfiguracaoECF As New ClassConfiguracaoECF

On Error GoTo Erro_Requisito_IX

    If Not AFRAC_ImpressoraCFe(giCodModeloECF) Then
        
        If giOrcamentoECF <> CAIXA_SO_ORCAMENTO Then

            For iIndice = LBound(alComando) To UBound(alComando)
                alComando(iIndice) = Comando_AbrirExt(glConexaoPAFECF)
                If alComando(iIndice) = 0 Then gError 207923
            Next
        
            sArquivo = gsDirMVTEF & "REQUISITO_XI.txt"
        
            'se o arquivo existir ==> remove o arquivo
            If Len(Dir(sArquivo)) > 0 Then ECF_Apaga_Arquivo (sArquivo)
        
            Open sArquivo For Append As #1
        
        
            lErro = CF_ECF("ConfiguracaoECF_Le", objConfiguracaoECF)
            If lErro <> SUCESSO Then gError 207924
        
            sRegistro = "N1" & objConfiguracaoECF.sCNPJDesenv & Formata_Campo(ALINHAMENTO_DIREITA, 14, " ", objConfiguracaoECF.sIEDesenv) & Formata_Campo(ALINHAMENTO_DIREITA, 14, " ", objConfiguracaoECF.sIMDesenv) & Formata_Campo(ALINHAMENTO_DIREITA, 50, " ", objConfiguracaoECF.sRazaoSocialDesenv)
        
            Print #1, sRegistro
            
            sRegistro = "N2" & Formata_Campo(ALINHAMENTO_DIREITA, 10, " ", objConfiguracaoECF.sNumLaudo) & Formata_Campo(ALINHAMENTO_DIREITA, 50, " ", objConfiguracaoECF.sNomePAFECF) & Formata_Campo(ALINHAMENTO_DIREITA, 10, " ", objConfiguracaoECF.sVersaoPAFECF)
        
            Print #1, sRegistro
        
            sNome = String(ARQUIVOECF_NOME, 0)
            
            lErro = Comando_Executar(alComando(1), "SELECT Nome FROM ArquivoECF ORDER BY Nome", sNome)
            If lErro <> AD_SQL_SUCESSO Then gError 207925
        
            lErro = Comando_BuscarPrimeiro(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 207926
        
            Do While lErro = AD_SQL_SUCESSO
            
                sNomeCompleto = objConfiguracaoECF.sDirPAFECF & "\" & sNome
            
                lErro = AFRAC_MD5(sNomeCompleto, sMD5)
                If lErro <> SUCESSO Then gError 207927
            
                sRegistro = "N3" & Formata_Campo(ALINHAMENTO_DIREITA, 50, " ", sNome) & Formata_Campo(ALINHAMENTO_DIREITA, 32, " ", sMD5)
            
                Print #1, sRegistro
                    
                iNumRegN3 = iNumRegN3 + 1
            
                lErro = Comando_BuscarProximo(alComando(1))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 207928
            
            Loop
            
            
            sRegistro = "N9" & objConfiguracaoECF.sCNPJDesenv & Formata_Campo(ALINHAMENTO_DIREITA, 14, " ", objConfiguracaoECF.sIEDesenv) & Format(iNumRegN3, "000000")
            
            Print #1, sRegistro
            
            Close #1
        
            lErro = AFRAC_CriaAssinaturaRSA(sArquivo, sRegistroEAD)
            lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Requisito_XI")
            
            If lErro <> SUCESSO Then gError 207929
            
            lErro = AFRAC_MD5(sArquivo, sMD5)
            If lErro <> SUCESSO Then gError 207930
            
            lErro = CF_ECF("EcfCorporator_Descriptografa", objECFCorporator)
            If lErro <> SUCESSO And lErro <> 204505 Then gError 207931
            
            objECFCorporator.sMD5PAFECF = sMD5
            gsMD5PAFECF = sMD5
            
            lErro = CF_ECF("EcfCorporator_Criptografa", objECFCorporator)
            If lErro <> SUCESSO Then gError 207932
            
            For iIndice = LBound(alComando) To UBound(alComando)
                lErro = Comando_Fechar(alComando(iIndice))
            Next
            
        '    Call MsgBox("Arquivo " & sArquivo & " foi gerado com sucesso.", vbOKOnly, "REQUISITO IX")
            Call Rotina_AvisoECF(vbOKOnly, "REQUISITO XI - Arquivo  " & sArquivo & " foi gerado com sucesso.")
    
        End If
    
    End If
    
    Requisito_IX = SUCESSO

    Exit Function

Erro_Requisito_IX:

    Requisito_IX = gErr

    Select Case gErr

        Case 207923
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)

        Case 207924, 207927, 207929 To 207932

        Case 207925, 207926, 207928
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_ARQUIVOECF, gErr)

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB, gErr, Error, 207933)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Requisito_XXII() As Long

Dim alComando(1 To 2) As Long
Dim iIndice As Integer
Dim lErro As Long
Dim sConteudo As String
Dim sMD5 As String
Dim sArquivo As String
Dim sRegistro As String
Dim iNumRegN3 As Integer
Dim sNome As String
Dim sNomeCompleto As String
Dim objECFCorporator As New ClassECFCorporator
Dim tR02 As typeR02
Dim dVendaBruta As Double
Dim lCRZ As Long
Dim lCRO As Long
Dim sCRZ As String
Dim sCRO As String
Dim objECFAutorizado As New ClassECFAutorizado
Dim sNumeroSerie As String
Dim sGrandeTotal As String
Dim iAchou As Integer
Dim sArquivo1 As String
Dim objLojaArqFisMestre As New ClassLojaArqFisMestre
Dim colLojaArqFisAnalitico As New Collection
Dim objUltimaReducao As New ClassUltimaReducao

On Error GoTo Erro_Requisito_XXII

    If Not AFRAC_ImpressoraCFe(giCodModeloECF) Then
    
        If giOrcamentoECF <> CAIXA_SO_ORCAMENTO Then
    
            For iIndice = LBound(alComando) To UBound(alComando)
                alComando(iIndice) = Comando_AbrirExt(glConexaoPAFECF)
                If alComando(iIndice) = 0 Then gError 207941
            Next
    
    
            'funcao que verifica se o orcamento.ini foi alterado
            lErro = CF_ECF("OrcamentoIni_Verifica_Chave")
            If lErro <> SUCESSO Then gError 210990
        
            If giUsaImpressoraFiscal = 1 Then
        
            
                lErro = AFRAC_LerInformacaoImpressora("002", sNumeroSerie)
                If lErro <> SUCESSO Then
                    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Informação Impressora")
                    If lErro <> SUCESSO Then gError 207942
                End If
            
                lErro = AFRAC_LerInformacaoImpressora("007", sGrandeTotal)
                If lErro <> SUCESSO Then
                    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Informação Impressora")
                    If lErro <> SUCESSO Then gError 207943
                End If
            
            
                Set objECFCorporator = New ClassECFCorporator
            
                lErro = CF_ECF("EcfCorporator_Descriptografa", objECFCorporator)
                If lErro <> SUCESSO And lErro <> 204505 Then gError 207952
            
                If gsMD5PAFECF <> objECFCorporator.sMD5PAFECF Then gError 214330
                
                If giDebug = 1 Then MsgBox ("Requisito XXII 1")
            
                'Item 8
                If lErro = 204505 Then
                
                    If giDebug = 1 Then MsgBox ("Requisito XXII 2")
                
                    lErro = Comando_Executar(alComando(1), "SELECT CRZ, CRO, VendaBruta FROM R02 ORDER BY DataMovimento DESC ", _
                    tR02.lCRZ, tR02.lCRO, tR02.dVendaBruta)
                    If lErro <> AD_SQL_SUCESSO Then gError 207944
            
                    lErro = Comando_BuscarPrimeiro(alComando(1))
                    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 207945
            
                    If lErro = AD_SQL_SEM_DADOS Then gError 207946
                    
                    lErro = AFRAC_Carrega_Dados_UltimaReducao(objUltimaReducao, objLojaArqFisMestre, colLojaArqFisAnalitico)
                    If lErro <> SUCESSO Then gError 133665
                    
                    
                    
                    If tR02.lCRZ = objLojaArqFisMestre.lCRZ And tR02.lCRO = objLojaArqFisMestre.lCRO And tR02.dVendaBruta = objUltimaReducao.dVendaBruta Then
                            
                        If giDebug = 1 Then MsgBox ("Requisito XXII 3")
                            
                        sArquivo = gsDirMVTEF & "REQUISITO_XI.txt"
            
                        lErro = AFRAC_MD5(sArquivo, sMD5)
                        If lErro <> SUCESSO Then gError 207950
                        
                        objECFCorporator.sMD5PAFECF = sMD5
                        
            
                        objECFAutorizado.sNumFabricacao = sNumeroSerie
            
                        objECFAutorizado.sGT = sGrandeTotal
            
                        Set objECFCorporator.colECFAutorizado = New Collection
                        
                        objECFCorporator.colECFAutorizado.Add objECFAutorizado
            
                        lErro = CF_ECF("EcfCorporator_Criptografa", objECFCorporator)
                        If lErro <> SUCESSO Then gError 207951
            
                    Else
                        gError 214331
            
            
                    End If
                
                
                Else
            
                    If giDebug = 1 Then MsgBox ("Requisito XXII 4")
            
                    iAchou = 0
                
                    For Each objECFAutorizado In objECFCorporator.colECFAutorizado
                            
                        If giDebug = 1 Then MsgBox ("Requisito XXII 5 ecf corporator Numero Serie = " & objECFAutorizado.sNumFabricacao & " Numero Serie ECF = " & sNumeroSerie)
                            
                        If objECFAutorizado.sNumFabricacao = sNumeroSerie Then
                        
                            If StrParaDbl(objECFAutorizado.sGT) <> StrParaDbl(sGrandeTotal) Then
                                
                                If giDebug = 1 Then MsgBox ("Requisito XXII 6")
                                
                                lErro = Comando_Executar(alComando(2), "SELECT CRO FROM R02 ORDER BY DataMovimento DESC ", _
                                tR02.lCRO)
                                If lErro <> AD_SQL_SUCESSO Then gError 207953
                        
                                lErro = Comando_BuscarPrimeiro(alComando(2))
                                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 207954
                        
                                If lErro = AD_SQL_SEM_DADOS Then gError 207955
                                
                                lErro = AFRAC_Carrega_Dados_UltimaReducao(objUltimaReducao, objLojaArqFisMestre, colLojaArqFisAnalitico)
                                If lErro <> SUCESSO Then gError 133665
                                
'
'                                lErro = AFRAC_CRO(sCRO)
'                                If lErro <> SUCESSO Then
'                                    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Consulta CRO")
'                                    If lErro <> SUCESSO Then gError 207956
'                                End If
'
'                                lCRO = StrParaLong(sCRO)
                                
                                'item 7
                                If objLojaArqFisMestre.lCRO > tR02.lCRO Then
                                        
                                    If giDebug = 1 Then MsgBox ("Requisito XXII 7")
                                    
                                    objECFAutorizado.sGT = sGrandeTotal
                                    
                                    lErro = CF_ECF("EcfCorporator_Criptografa", objECFCorporator)
                                    If lErro <> SUCESSO Then gError 207957
                                    
                                Else
                                    
                                    'o GT é diferente do q esta cadastrado no arquivo
                                    gError 207958
                                
                                End If
                                
                            End If
                        
                        iAchou = 1
                        
                        If giDebug = 1 Then MsgBox ("Requisito XXII 8")
                        
                        Exit For
                        
                        End If
                    
                    Next
                
                    If giDebug = 1 Then MsgBox ("Requisito XXII 9")
                
                    'nao encontrou o numero de fabricacao do ECF
                    If iAchou = 0 Then
                        gError 207959
                    End If
        
                End If
                
            End If
        
            For iIndice = LBound(alComando) To UBound(alComando)
                lErro = Comando_Fechar(alComando(iIndice))
            Next
        
        
        End If
    
    End If
    
    Requisito_XXII = SUCESSO

    Exit Function

Erro_Requisito_XXII:

    Requisito_XXII = gErr

    Select Case gErr

        Case 207941
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)

        Case 207942, 207943, 207947 To 207952, 207956, 207957, 210990
    
        Case 207944, 207945, 207953, 207954
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_R02, gErr)

        Case 207946, 207955
            Call Rotina_ErroECF(vbOKOnly, ERRO_R02_NAO_CADASTRADO, gErr, objECFAutorizado.sGT, sGrandeTotal)

        Case 207958
           Call Rotina_ErroECF(vbOKOnly, ERRO_GT_NAO_CONFERE_BLOQUEIO, gErr, objECFAutorizado.sGT, sGrandeTotal)

        Case 207959
           Call Rotina_ErroECF(vbOKOnly, ERRO_NUMFAB_NAO_CADASTRADO_BLOQUEIO, gErr, sNumeroSerie)

        Case 210884
           Call Rotina_ErroECF(vbOKOnly, ERRO_ARQ_CRIPTOGRAFADO_INEXISTENTE, gErr, sArquivo)
        
        Case 214330
           Call Rotina_ErroECF(vbOKOnly, ERRO_MD5_ALTERADO, gErr)
        
        Case 214331
           Call Rotina_ErroECF(vbOKOnly, ERRO_HOUVE_PERDA_DADOS_ARQ_CRIPTO, gErr)
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB, gErr, Error, 207960)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Requisito_XXII_AtualizaGT() As Long

Dim alComando(1 To 2) As Long
Dim iIndice As Integer
Dim lErro As Long
Dim sConteudo As String
Dim sMD5 As String
Dim sArquivo As String
Dim sRegistro As String
Dim iNumRegN3 As Integer
Dim sNome As String
Dim sNomeCompleto As String
Dim objECFCorporator As New ClassECFCorporator
Dim tR02 As typeR02
Dim dVendaBruta As Double
Dim lCRZ As Long
Dim lCRO As Long
Dim sCRZ As String
Dim sCRO As String
Dim objECFAutorizado As New ClassECFAutorizado
Dim sNumeroSerie As String
Dim sGrandeTotal As String
Dim iAchou As Integer

On Error GoTo Erro_Requisito_XXII_AtualizaGT

    If Not AFRAC_ImpressoraCFe(giCodModeloECF) Then
        
        If giUsaImpressoraFiscal = 1 Then
    
            lErro = CF_ECF("EcfCorporator_Descriptografa", objECFCorporator)
            If lErro <> SUCESSO And lErro <> 204505 Then gError 207961
        
            lErro = AFRAC_LerInformacaoImpressora("007", sGrandeTotal)
            If lErro <> SUCESSO Then
                lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Informação Impressora")
                If lErro <> SUCESSO Then gError 207962
            End If
            
            lErro = AFRAC_LerInformacaoImpressora("002", sNumeroSerie)
            If lErro <> SUCESSO Then
                lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Informação Impressora")
                If lErro <> SUCESSO Then gError 207963
            End If
            
            
            iAchou = 0
        
            For Each objECFAutorizado In objECFCorporator.colECFAutorizado
                    
                If objECFAutorizado.sNumFabricacao = sNumeroSerie Then
                
                    objECFAutorizado.sGT = sGrandeTotal
                
                    iAchou = 1
                
                    Exit For
                
                End If
            
            Next
        
            'nao encontrou o numero de fabricacao do ECF
            If iAchou = 0 Then
                gError 207964
            End If
        
            lErro = CF_ECF("EcfCorporator_Criptografa", objECFCorporator)
            If lErro <> SUCESSO Then gError 207965
    
        End If

    End If

    Requisito_XXII_AtualizaGT = SUCESSO

    Exit Function

Erro_Requisito_XXII_AtualizaGT:

    Requisito_XXII_AtualizaGT = gErr

    Select Case gErr

        Case 207961 To 207963, 207965

        Case 207964
           Call Rotina_ErroECF(vbOKOnly, ERRO_NUMFAB_NAO_CADASTRADO_BLOQUEIO, gErr, sNumeroSerie)

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB, gErr, Error, 207966)

    End Select

    Exit Function

End Function


Function VendaPeriodoSINTEGRA_Gera(ByVal dtDataDe As Date, ByVal dtDataAte As Date) As Long
'Função que Vai Chamar a Função da Afrac que vai Executar a Leitura de Memória Fiscal

Dim lErro As Long
Dim lSequencial As Long
Dim iCodGerente As Integer
Dim objOperador As New ClassOperador

On Error GoTo Erro_VendaPeriodoSINTEGRA_Gera

    'Função que Abre a Transação
    lErro = CF_ECF("Caixa_Transacao_Abrir", lSequencial)
    If lErro <> SUCESSO Then gError 210093

    'Função que Referenciar a Função da Afrac que Vai Executar a Leitura
    lErro = CF_ECF("VendaPeriodoSINTEGRA_GeraEmTrans", lSequencial, dtDataDe, dtDataAte)
    If lErro <> SUCESSO Then gError 210094

    'Função que Encerra a Transação com o Caixa
    lErro = CF_ECF("Caixa_Transacao_Fechar", lSequencial)
    If lErro <> SUCESSO Then gError 210095

    VendaPeriodoSINTEGRA_Gera = SUCESSO

    Exit Function

Erro_VendaPeriodoSINTEGRA_Gera:

    VendaPeriodoSINTEGRA_Gera = gErr

     Select Case gErr

        Case 210093, 210094, 210095

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 210096)

    End Select
    
'    lSequencial = glSeqTransacaoAberta
            
    'Rollback na transação
    Call CF_ECF("Caixa_Transacao_Rollback", glTransacaoPAFECF)

    Exit Function

End Function

Function VendaPeriodoSINTEGRA_GeraEmTrans(lSequencial As Long, ByVal dtDataDe As Date, ByVal dtDataAte As Date) As Long
'Função que Chama a Função da Afrac que Executa a Leitura da Memória Fiscal

Dim lErro As Long
Dim objMovimentoCaixa As New ClassMovimentoCaixa
Dim sCampoReducao1 As String
Dim sCampoReducao2 As String
Dim sLog As String
Dim colRegistro As New Collection

On Error GoTo Erro_VendaPeriodoSINTEGRA_GeraEmTrans

'    If giOrcamentoECF <> CAIXA_SO_ORCAMENTO Then


        'Função que Move os Dados para a Memória
        lErro = CF_ECF("MovimentoCaixa_Move_Dados_Memoria", MOVIMENTOCAIXA_VENDAPERIODO_SINTEGRA, objMovimentoCaixa)
        If lErro <> SUCESSO Then gError 210097
        
        'Guarda o Sequencial no objMovimentos Caixa
        objMovimentoCaixa.lSequencial = lSequencial
        objMovimentoCaixa.dtDataInicio = dtDataDe
        objMovimentoCaixa.dtDataFim = dtDataAte
        
        Call CF_ECF("MovimentoSINTEGRA_Gera_Log", colRegistro, objMovimentoCaixa)
        
        'Guarda as Informações no Arquivo
        lErro = CF_ECF("MovimentoCaixaECF_Grava", colRegistro)
        If lErro <> SUCESSO Then gError 210098
        
        If dtDataDe > dtDataAte Then gError 210099
    
        VendaPeriodoSINTEGRA_GeraEmTrans = SUCESSO
    
'    Else
        
'        Call CF_ECF("Trata_Caixa_So_Orcamento")
    
    'End If
    
    Exit Function

Erro_VendaPeriodoSINTEGRA_GeraEmTrans:

    VendaPeriodoSINTEGRA_GeraEmTrans = gErr

        Select Case gErr
        
        Case 210097, 210098, 210100

        Case 210099
            Call Rotina_ErroECF(vbOKOnly, ERRO_DATA_INICIAL_MAIOR1, gErr)

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 210101)

    End Select

    Exit Function

End Function

Function VendaPeriodoSPED_Gera(ByVal dtDataDe As Date, ByVal dtDataAte As Date) As Long
'Função que Vai Chamar a Função da Afrac que vai Executar a Leitura de Memória Fiscal

Dim lErro As Long
Dim lSequencial As Long
Dim iCodGerente As Integer
Dim objOperador As New ClassOperador

On Error GoTo Erro_VendaPeriodoSPED_Gera

    'Função que Abre a Transação
    lErro = CF_ECF("Caixa_Transacao_Abrir", lSequencial)
    If lErro <> SUCESSO Then gError 210039

    'Função que Referenciar a Função da Afrac que Vai Executar a Leitura
    lErro = CF_ECF("VendaPeriodoSPED_GeraEmTrans", lSequencial, dtDataDe, dtDataAte)
    If lErro <> SUCESSO Then gError 210040

    'Função que Encerra a Transação com o Caixa
    lErro = CF_ECF("Caixa_Transacao_Fechar", lSequencial)
    If lErro <> SUCESSO Then gError 210041


    VendaPeriodoSPED_Gera = SUCESSO

    Exit Function

Erro_VendaPeriodoSPED_Gera:

    VendaPeriodoSPED_Gera = gErr

     Select Case gErr

        Case 210039, 210040, 210041

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 210042)

    End Select
    
'    lSequencial = glSeqTransacaoAberta
            
    'Rollback na transação
    Call CF_ECF("Caixa_Transacao_Rollback", glTransacaoPAFECF)

    Exit Function

End Function

Function VendaPeriodoSPED_GeraEmTrans(lSequencial As Long, ByVal dtDataDe As Date, ByVal dtDataAte As Date) As Long
'Função que Chama a Função da Afrac que Executa a Leitura da Memória Fiscal

Dim lErro As Long
Dim objMovimentoCaixa As New ClassMovimentoCaixa
Dim sCampoReducao1 As String
Dim sCampoReducao2 As String
Dim sLog As String
Dim colRegistro As New Collection

On Error GoTo Erro_VendaPeriodoSPED_GeraEmTrans

'    If giOrcamentoECF <> CAIXA_SO_ORCAMENTO Then

        'Função que Move os Dados para a Memória
        lErro = CF_ECF("MovimentoCaixa_Move_Dados_Memoria", MOVIMENTOCAIXA_VENDAPERIODO_SPED, objMovimentoCaixa)
        If lErro <> SUCESSO Then gError 210034
        
        'Guarda o Sequencial no objMovimentos Caixa
        objMovimentoCaixa.lSequencial = lSequencial
        objMovimentoCaixa.dtDataInicio = dtDataDe
        objMovimentoCaixa.dtDataFim = dtDataAte
        
        Call CF_ECF("MovimentoSPED_Gera_Log", colRegistro, objMovimentoCaixa)
        
        'Guarda as Informações no Arquivo
        lErro = CF_ECF("MovimentoCaixaECF_Grava", colRegistro)
        If lErro <> SUCESSO Then gError 210035
        
        Set colRegistro = New Collection
    
        If dtDataDe > dtDataAte Then gError 210037
    
        VendaPeriodoSPED_GeraEmTrans = SUCESSO
    
 '   Else
        
 '       Call CF_ECF("Trata_Caixa_So_Orcamento")
    
 '   End If
    
    Exit Function

Erro_VendaPeriodoSPED_GeraEmTrans:

    VendaPeriodoSPED_GeraEmTrans = gErr

        Select Case gErr
        
        Case 210034, 210035, 210036

        Case 210037
            Call Rotina_ErroECF(vbOKOnly, ERRO_DATA_INICIAL_MAIOR1, gErr)

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 210038)

    End Select

    Exit Function

End Function

Function MovimentoPorECF_Grava_ECF(ByVal sNumSerie As String) As Long

Dim sArquivo As String
Dim sArquivo1 As String
Dim sCodigo As String
Dim lErro As Long
Dim sNumeroSerie As String
Dim sMFAdicional As String
Dim sMarcaECF As String
Dim sTipoECF As String
Dim sModeloECF As String
Dim sVersaoSB As String
Dim dtDataInstalacaoSB As Date
Dim sHoraInstalacaoSB As String
Dim sCNPJUsuario As String
Dim iNumeroUsuario As Integer
Dim dtDataUltimaReducaoZ As Date
Dim dtDataUltimoMovimento As Date
Dim sIEUsuario As String
Dim sRegistro As String
Dim lTentaAcessoArquivo As Long
Dim sSequencial As String
Dim objLojaArqFisMestre As New ClassLojaArqFisMestre
Dim colLojaArqFisAnalitico As New Collection
Dim objUltimaReducao As New ClassUltimaReducao
Dim objMovCaixa As New ClassMovimentoCaixa
Dim sRegistro1 As String
Dim sRegistro2 As String
Dim objAliquota As ClassAliquotaICMS
Dim sTotalizadorParcial As String
Dim alComando(1 To 15) As Long
Dim tR01 As typeR01
Dim tR02 As typeR02
Dim tR03 As typeR03
Dim tR04 As typeR04
Dim tR05 As typeR05
Dim tR06 As typeR06
Dim tR07 As typeR07
Dim sZerosQtde As String
Dim sZerosValor As String
Dim sRegistroEAD As String
Dim sTexto As String
Dim sEAD As String
Dim iR01EAD As Integer
Dim lTotRegR02 As Long
Dim lTotRegR03 As Long
Dim lTotRegR04 As Long
Dim lTotRegR05 As Long
Dim lTotRegR06 As Long
Dim lTotRegR07 As Long
Dim iIndice As Integer
Dim dtDataIni As Date
Dim dtDataFim As Date
Dim tR01_1 As typeR01

On Error GoTo Erro_MovimentoPorECF_Grava_ECF


   'Abre os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_AbrirExt(glConexaoPAFECF)
        If alComando(iIndice) = 0 Then gError 210149
    Next


    lErro = Comando_Executar(alComando(9), "SELECT MIN(Data),MAX(Data), SUM(TotRegR02), SUM(TotRegR03), SUM(TotRegR04), SUM(TotRegR05), SUM(TotRegR06), SUM(TotRegR07) " & _
        "  FROM R01 WHERE NumeroSerie = ? ", dtDataIni, dtDataFim, _
        tR01_1.lTotRegR02, tR01_1.lTotRegR03, tR01_1.lTotRegR04, tR01_1.lTotRegR05, tR01_1.lTotRegR06, tR01_1.lTotRegR07, _
        sNumeroSerie)
    If lErro <> AD_SQL_SUCESSO Then gError 210393

    lErro = Comando_BuscarPrimeiro(alComando(9))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210394


    'Conta os registros R02
    lErro = Comando_Executar(alComando(10), "SELECT Count(*) " & _
    " FROM R02 WHERE NumeroSerie = ? ", _
       lTotRegR02, sNumeroSerie)
    If lErro <> AD_SQL_SUCESSO Then gError 210395

    lErro = Comando_BuscarPrimeiro(alComando(10))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210396


    'Conta os registros R03
    lErro = Comando_Executar(alComando(11), "SELECT Count(*) " & _
    " FROM R03 WHERE NumeroSerie = ? ", _
       lTotRegR03, sNumeroSerie)
    If lErro <> AD_SQL_SUCESSO Then gError 210397

    lErro = Comando_BuscarPrimeiro(alComando(11))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210398


    'Conta os registros R04
    lErro = Comando_Executar(alComando(12), "SELECT Count(*) " & _
    " FROM R04 WHERE NumeroSerie = ? ", _
       lTotRegR04, sNumeroSerie)
    If lErro <> AD_SQL_SUCESSO Then gError 210399

    lErro = Comando_BuscarPrimeiro(alComando(12))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210400

    'Conta os registros R05
    lErro = Comando_Executar(alComando(13), "SELECT Count(*) " & _
    " FROM R05 WHERE NumeroSerie = ? ", _
       lTotRegR05, sNumeroSerie)
    If lErro <> AD_SQL_SUCESSO Then gError 210401

    lErro = Comando_BuscarPrimeiro(alComando(13))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210402

    'Conta os registros R06
    lErro = Comando_Executar(alComando(14), "SELECT Count(*) " & _
    " FROM R06 WHERE NumeroSerie = ? ", _
       lTotRegR06, sNumeroSerie)
    If lErro <> AD_SQL_SUCESSO Then gError 210403

    lErro = Comando_BuscarPrimeiro(alComando(14))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210404

    'Conta os registros R07
    lErro = Comando_Executar(alComando(15), "SELECT Count(*) " & _
    " FROM R07 WHERE NumeroSerie = ? ", _
       lTotRegR07, sNumeroSerie)
    If lErro <> AD_SQL_SUCESSO Then gError 210405

    lErro = Comando_BuscarPrimeiro(alComando(15))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210406


    tR01.sCodNacId = String(R01_CODNACID, 0)
    tR01.sNumeroSerie = String(R01_NUMEROSERIE, 0)
    tR01.sMFAdicional = String(R01_MFADICIONAL, 0)
    tR01.sTipoECF = String(R01_TIPOECF, 0)
    tR01.sMarcaECF = String(R01_MARCAECF, 0)
    tR01.sModeloECF = String(R01_MODELOECF, 0)
    tR01.sVersaoSB = String(R01_VERSAOSB, 0)
    tR01.sCNPJUsu = String(R01_CNPJUSU, 0)
    tR01.sIEUsu = String(R01_IEUSU, 0)
    tR01.sCNPJDesenv = String(R01_CNPJDESENV, 0)
    tR01.sIEDesenv = String(R01_IEDESENV, 0)
    tR01.sIMDesenv = String(R01_IMDESENV, 0)
    tR01.sNomeDesenv = String(R01_NOMEDESENV, 0)
    tR01.sNomePAFECF = String(R01_NOMEPAFECF, 0)
    tR01.sVersaoPAFECF = String(R01_VERSAOPAFECF, 0)
    tR01.sMD5PAFECF = String(R01_MD5PAFECF, 0)
    tR01.sVersaoEspecPAFECF = String(R01_VERSAOESPECPAFECF, 0)
    tR01.sEAD = String(R01_EAD, 0)
    tR01.sHoraInstalacaoSB = String(R01_HORAINSTALACAOSB, 0)


    'Le o registro R01
    lErro = Comando_Executar(alComando(1), "SELECT Data, CodNacId, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, VersaoSB, DataInstalacaoSB, HoraInstalacaoSB, " & _
    "SequencialECF, CNPJUsu, InscEstadualUsu, CNPJDesenv, InscEstadualDesenv, InscMunicipalDesenv, " & _
    " NomeDesenv, NomePAFECF, VersaoPAFECF, CodigoMD5,  VersaoERPAFECF, EAD, " & _
    "TotRegR02, TotRegR03, TotRegR04, TotRegR05, TotRegR06, TotRegR07 FROM R01 WHERE NumeroSerie = ? ORDER BY Data", _
    tR01.dtData, tR01.sCodNacId, tR01.sNumeroSerie, tR01.sMFAdicional, tR01.sTipoECF, tR01.sMarcaECF, tR01.sModeloECF, tR01.sVersaoSB, tR01.dtDataInstalacaoSB, _
        tR01.sHoraInstalacaoSB, tR01.iSequencialECF, tR01.sCNPJUsu, tR01.sIEUsu, tR01.sCNPJDesenv, tR01.sIEDesenv, tR01.sIMDesenv, _
        tR01.sNomeDesenv, tR01.sNomePAFECF, tR01.sVersaoPAFECF, tR01.sMD5PAFECF, tR01.sVersaoEspecPAFECF, tR01.sEAD, _
        tR01.lTotRegR02, tR01.lTotRegR03, tR01.lTotRegR04, tR01.lTotRegR05, tR01.lTotRegR06, tR01.lTotRegR07, _
        sNumSerie)
    If lErro <> AD_SQL_SUCESSO Then gError 210407

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210408

    iR01EAD = 0

    Do While lErro = AD_SQL_SUCESSO

        sTexto = tR01.dtData & tR01.sNumeroSerie & tR01.sMFAdicional & tR01.sTipoECF & tR01.sMarcaECF & tR01.sModeloECF & tR01.sVersaoSB & tR01.dtDataInstalacaoSB & tR01.sHoraInstalacaoSB & tR01.iSequencialECF & tR01.sCNPJUsu & tR01.sIEUsu & tR01.sCNPJDesenv & tR01.sIEDesenv & tR01.sIMDesenv & tR01.sNomeDesenv & tR01.sNomePAFECF & tR01.sVersaoPAFECF & tR01.sMD5PAFECF & tR01.sVersaoEspecPAFECF & tR01.sCodNacId
        sTexto = sTexto & tR01.lTotRegR02 & tR01.lTotRegR03 & tR01.lTotRegR04 & tR01.lTotRegR05 & tR01.lTotRegR06 & tR01.lTotRegR07
        
        lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
        If lErro <> SUCESSO Then gError 210409

        If tR01.sEAD <> sEAD Then
            iR01EAD = 1
            Exit Do
        End If

        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210410

    Loop



    tR01.sCodNacId = String(R01_CODNACID, 0)
    tR01.sNumeroSerie = String(R01_NUMEROSERIE, 0)
    tR01.sMFAdicional = String(R01_MFADICIONAL, 0)
    tR01.sTipoECF = String(R01_TIPOECF, 0)
    tR01.sMarcaECF = String(R01_MARCAECF, 0)
    tR01.sModeloECF = String(R01_MODELOECF, 0)
    tR01.sVersaoSB = String(R01_VERSAOSB, 0)
    tR01.sCNPJUsu = String(R01_CNPJUSU, 0)
    tR01.sIEUsu = String(R01_IEUSU, 0)
    tR01.sCNPJDesenv = String(R01_CNPJDESENV, 0)
    tR01.sIEDesenv = String(R01_IEDESENV, 0)
    tR01.sIMDesenv = String(R01_IMDESENV, 0)
    tR01.sNomeDesenv = String(R01_NOMEDESENV, 0)
    tR01.sNomePAFECF = String(R01_NOMEPAFECF, 0)
    tR01.sVersaoPAFECF = String(R01_VERSAOPAFECF, 0)
    tR01.sMD5PAFECF = String(R01_MD5PAFECF, 0)
    tR01.sVersaoEspecPAFECF = String(R01_VERSAOESPECPAFECF, 0)
    tR01.sEAD = String(R01_EAD, 0)
    tR01.sHoraInstalacaoSB = String(R01_HORAINSTALACAOSB, 0)


    'Le o registro R01
    lErro = Comando_Executar(alComando(1), "SELECT Data, CodNacId, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, VersaoSB, DataInstalacaoSB, HoraInstalacaoSB, " & _
    "SequencialECF, CNPJUsu, InscEstadualUsu, CNPJDesenv, InscEstadualDesenv, InscMunicipalDesenv, " & _
    " NomeDesenv, NomePAFECF, VersaoPAFECF, CodigoMD5,  VersaoERPAFECF FROM R01 WHERE NumeroSerie = ? ORDER BY Data", _
    tR01.dtData, tR01.sCodNacId, tR01.sNumeroSerie, tR01.sMFAdicional, tR01.sTipoECF, tR01.sMarcaECF, tR01.sModeloECF, tR01.sVersaoSB, tR01.dtDataInstalacaoSB, _
        tR01.sHoraInstalacaoSB, tR01.iSequencialECF, tR01.sCNPJUsu, tR01.sIEUsu, tR01.sCNPJDesenv, tR01.sIEDesenv, tR01.sIMDesenv, _
        tR01.sNomeDesenv, tR01.sNomePAFECF, tR01.sVersaoPAFECF, tR01.sMD5PAFECF, tR01.sVersaoEspecPAFECF, tR01.sEAD, sNumSerie)
    If lErro <> AD_SQL_SUCESSO Then gError 210150

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210151
    
    If lErro = AD_SQL_SEM_DADOS Then gError 210152
    
    sArquivo = gsDirMVTEF & Formata_Campo(ALINHAMENTO_DIREITA, 6, " ", tR01.sCodNacId) & Format(right(tR01.sNumeroSerie, 14), "00000000000000")
    
    sArquivo = sArquivo & Format(Date, "ddmmyyyy") & ".txt"
    
    sArquivo1 = Dir(sArquivo)
    
    'se o arquivo existir ==> remove o arquivo
    If Len(sArquivo1) > 0 Then ECF_Apaga_Arquivo (sArquivo)

    'abre o arquivo q sera gerado
    Open sArquivo For Append As #7

    sRegistro = "R01" & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR01.sNumeroSerie) & Format(tR01.sMFAdicional, "@")
    sRegistro = sRegistro & Formata_Campo(ALINHAMENTO_DIREITA, 7, " ", tR01.sTipoECF) & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR01.sMarcaECF)
    sRegistro = sRegistro & IIf(iR01EAD = 1, Replace(Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR01.sModeloECF), " ", "?"), Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR01.sModeloECF)) & Formata_Campo(ALINHAMENTO_DIREITA, 10, " ", tR01.sVersaoSB)
    sRegistro = sRegistro & Format(tR01.dtDataInstalacaoSB, "yyyymmdd") & Format(CDate(tR01.sHoraInstalacaoSB), "hhmmss") & Format(tR01.iSequencialECF, "000")
    sRegistro = sRegistro & Formata_Campo(ALINHAMENTO_DIREITA, 14, "0", tR01.sCNPJUsu) & Formata_Campo(ALINHAMENTO_DIREITA, 14, " ", tR01.sIEUsu)
    sRegistro = sRegistro & Formata_Campo(ALINHAMENTO_DIREITA, 14, "0", tR01.sCNPJDesenv) & Formata_Campo(ALINHAMENTO_DIREITA, 14, " ", tR01.sIEDesenv) & Formata_Campo(ALINHAMENTO_DIREITA, 14, " ", tR01.sIMDesenv)
    sRegistro = sRegistro & IIf(tR01_1.lTotRegR02 <> lTotRegR02 Or tR01_1.lTotRegR03 <> lTotRegR03 Or tR01_1.lTotRegR04 <> lTotRegR04 Or tR01_1.lTotRegR05 <> lTotRegR05 Or tR01_1.lTotRegR06 <> lTotRegR06 Or tR01_1.lTotRegR07 <> lTotRegR07, Replace(Formata_Campo(ALINHAMENTO_DIREITA, 40, " ", tR01.sNomeDesenv), " ", "?"), Formata_Campo(ALINHAMENTO_DIREITA, 40, " ", tR01.sNomeDesenv))
    sRegistro = sRegistro & Formata_Campo(ALINHAMENTO_DIREITA, 40, " ", tR01.sNomePAFECF)
    sRegistro = sRegistro & Formata_Campo(ALINHAMENTO_DIREITA, 10, " ", tR01.sVersaoPAFECF) & Formata_Campo(ALINHAMENTO_DIREITA, 32, " ", tR01.sMD5PAFECF)
    sRegistro = sRegistro & Format(dtDataIni, "yyyymmdd") & Format(dtDataFim, "yyyymmdd") & Formata_Campo(ALINHAMENTO_DIREITA, 4, " ", tR01.sVersaoEspecPAFECF)
    
    'Inseri no Arquivo
    Print #7, sRegistro
        
        
    tR02.sIncidenciaDescontoISS = String(R02_INCIDENCIADESCONTOISS, 0)
    tR02.sNumeroSerie = String(R01_NUMEROSERIE, 0)
    tR02.sMFAdicional = String(R01_MFADICIONAL, 0)
    tR02.sModeloECF = String(R01_MODELOECF, 0)
    tR02.sEAD = String(R02_EAD, 0)
    tR02.sTipoECF = String(R01_TIPOECF, 0)
    tR02.sMarcaECF = String(R01_MARCAECF, 0)
    tR02.sHoraEmissaoRedZ = String(R02_HORAREDUCAOZ, 0)

    'Le os registros R02
    lErro = Comando_Executar(alComando(2), "SELECT NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, DataMovimento, NumeroUsuario, CRZ, COO, CRO, DataEmissaoRedZ, HoraEmissaoRedZ, VendaBruta, IncidenciaDescontoISS, EAD " & _
    " FROM R02 WHERE NumeroSerie = ? ORDER BY NumeroSerie, ModeloEcf, NumeroUsuario, CRZ, CRO", _
    tR02.sNumeroSerie, tR02.sMFAdicional, tR02.sTipoECF, tR02.sMarcaECF, tR02.sModeloECF, tR02.dtDataMovimento, tR02.iNumeroUsuario, tR02.lCRZ, tR02.lCOO, tR02.lCRO, tR02.dtDataEmissaoRedZ, tR02.sHoraEmissaoRedZ, tR02.dVendaBruta, tR02.sIncidenciaDescontoISS, _
        sNumSerie)
    If lErro <> AD_SQL_SUCESSO Then gError 210153

    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210154
        
    Do While lErro = AD_SQL_SUCESSO
        
        
        sTexto = tR02.dtDataMovimento & tR02.sNumeroSerie & tR02.sMFAdicional & tR02.sTipoECF & tR02.sMarcaECF & tR02.sModeloECF & tR02.iNumeroUsuario & tR02.lCRZ & tR02.lCOO & tR02.lCRO & tR02.dtDataEmissaoRedZ & tR02.sHoraEmissaoRedZ & tR02.dVendaBruta & tR02.sIncidenciaDescontoISS
        
        lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
        If lErro <> SUCESSO Then gError 210366
        
        
        'trata registro 02
        
        sRegistro1 = "R02" & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR02.sNumeroSerie) & Format(tR02.sMFAdicional, "@")
        sRegistro1 = sRegistro1 & IIf(tR02.sEAD <> sEAD, Replace(Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR02.sModeloECF), " ", "?"), Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR02.sModeloECF)) & Format(tR02.iNumeroUsuario, "00")
        sRegistro1 = sRegistro1 & Format(tR02.lCRZ, "000000") & Format(tR02.lCOO, "000000")
        sRegistro1 = sRegistro1 & Format(tR02.lCRO, "000000") & Format(tR02.dtDataMovimento, "yyyymmdd")
        sRegistro1 = sRegistro1 & Format(tR02.dtDataEmissaoRedZ, "yyyymmdd") & Format(CDate(tR02.sHoraEmissaoRedZ), "hhmmss")
        sRegistro1 = sRegistro1 & Format(CDbl(Format(tR02.dVendaBruta, "Fixed")) * 100, "00000000000000") & objUltimaReducao.sIncidenciaDescontoISS
        
        'Inseri no Arquivo
        Print #7, sRegistro1
        
        lErro = Comando_BuscarProximo(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210155
        
    Loop
           
           

    tR03.sTotalizadorParcial = String(R03_TOTALIZADORPARCIAL, 0)
    tR03.sNumeroSerie = String(R01_NUMEROSERIE, 0)
    tR03.sMFAdicional = String(R01_MFADICIONAL, 0)
    tR03.sModeloECF = String(R01_MODELOECF, 0)
    tR03.sEAD = String(R03_EAD, 0)
    tR03.sTipoECF = String(R01_TIPOECF, 0)
    tR03.sMarcaECF = String(R01_MARCAECF, 0)
    
        
    'Le os registros R03
    lErro = Comando_Executar(alComando(3), "SELECT NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, DataMovimento, NumeroUsuario, CRZ, TotalizadorParcial, Valor, EAD " & _
    " FROM R03 WHERE  NumeroSerie = ? ORDER BY NumeroSerie, ModeloECF, NumeroUsuario, CRZ, TotalizadorParcial ", _
    tR03.sNumeroSerie, tR03.sMFAdicional, tR03.sTipoECF, tR03.sMarcaECF, tR03.sModeloECF, tR03.dtDataMovimento, tR03.iNumeroUsuario, tR03.lCRZ, tR03.sTotalizadorParcial, tR03.dValor, tR03.sEAD, _
        sNumSerie)
    If lErro <> AD_SQL_SUCESSO Then gError 210156

    lErro = Comando_BuscarPrimeiro(alComando(3))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210157
        
    Do While lErro = AD_SQL_SUCESSO
        
        sTexto = tR03.dtDataMovimento & tR03.sNumeroSerie & tR03.sMFAdicional & tR03.sTipoECF & tR03.sMarcaECF & tR03.sModeloECF & tR03.iNumeroUsuario & tR03.lCRZ & tR03.sTotalizadorParcial & tR03.dValor
        
        lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
        If lErro <> SUCESSO Then gError 210367
        
        
        'trata registro 03
        
        sRegistro1 = "R03" & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR03.sNumeroSerie) & Format(tR03.sMFAdicional, "@")
        sRegistro1 = sRegistro1 & IIf(tR03.sEAD <> sEAD, Replace(Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR03.sModeloECF), " ", "?"), Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR03.sModeloECF)) & Format(tR03.iNumeroUsuario, "00")
        sRegistro1 = sRegistro1 & Format(tR03.lCRZ, "000000") & Formata_Campo(ALINHAMENTO_DIREITA, 7, " ", tR03.sTotalizadorParcial)
        sRegistro1 = sRegistro1 & Format(CDbl(Format(tR03.dValor, "Fixed")) * 100, "0000000000000")
        
        'Inseri no Arquivo
        Print #7, sRegistro1
        
        lErro = Comando_BuscarProximo(alComando(3))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210158
        
    Loop
    
    tR04.sNumeroSerie = String(R01_NUMEROSERIE, 0)
    tR04.sMFAdicional = String(R01_MFADICIONAL, 0)
    tR04.sModeloECF = String(R01_MODELOECF, 0)
    tR04.sTipoDesconto = String(R04_TIPODESCONTO, 0)
    tR04.sTipoAcrescimo = String(R04_TIPOACRESCIMO, 0)
    tR04.sIndicadorCancelamento = String(R04_INDICADORCANCELAMENTO, 0)
    tR04.sOrdemDescAcresc = String(R04_ORDEMDESCACRESC, 0)
    tR04.sNomeAdiquirente = String(R04_NOMEADQUIRENTE, 0)
    tR04.sCPFCNPJ = String(R04_CPFCNPJ, 0)
    tR04.sEAD = String(R04_EAD, 0)
    tR04.sTipoECF = String(R01_TIPOECF, 0)
    tR04.sMarcaECF = String(R01_MARCAECF, 0)
    
    
    'seleciona os registros R04 ordenados por CCF para insercao no arquivo
    
    lErro = Comando_Executar(alComando(5), "SELECT DataMovimento, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, NumeroUsuario, CCF, COO, DataEmissao, Subtotal, Desconto, TipoDesconto, Acrescimo, TipoAcrescimo, ValorTotal, IndicadorCancelamento, ValorCancAcrescimo, OrdemDescAcresc, NomeAdiquirente, CPFCNPJ, EAD FROM R04 WHERE NumeroSerie = ?  ORDER BY NumeroSerie, ModeloECF, NumeroUsuario, CCF", _
    tR04.dtDataMovimento, tR04.sNumeroSerie, tR04.sMFAdicional, tR04.sTipoECF, tR04.sMarcaECF, tR04.sModeloECF, tR04.iNumeroUsuario, tR04.lCCF, tR04.lCOO, tR04.dtDataEmissao, tR04.dSubtotal, tR04.dDesconto, tR04.sTipoDesconto, tR04.dAcrescimo, tR04.sTipoAcrescimo, tR04.dValorTotal, tR04.sIndicadorCancelamento, tR04.dValorCancAcrescimo, tR04.sOrdemDescAcresc, tR04.sNomeAdiquirente, tR04.sCPFCNPJ, tR04.sEAD, sNumSerie)
    If lErro <> AD_SQL_SUCESSO Then gError 210159
    

    lErro = Comando_BuscarPrimeiro(alComando(5))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210160
    
    Do While lErro = AD_SQL_SUCESSO
    
        sTexto = tR04.dtDataMovimento & tR04.sNumeroSerie & tR04.sMFAdicional & tR04.sTipoECF & tR04.sMarcaECF & tR04.sModeloECF & tR04.iNumeroUsuario & _
            tR04.lCCF & tR04.lCOO & tR04.dtDataEmissao & tR04.dSubtotal & tR04.dDesconto & tR04.sTipoDesconto & tR04.dAcrescimo & tR04.sTipoAcrescimo & tR04.dValorTotal & tR04.sIndicadorCancelamento & tR04.dValorCancAcrescimo & tR04.sOrdemDescAcresc & tR04.sNomeAdiquirente & tR04.sCPFCNPJ
        
        lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
        If lErro <> SUCESSO Then gError 210368
    
    
        sRegistro1 = "R04" & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR04.sNumeroSerie) & Format(tR04.sMFAdicional, "@")
        sRegistro1 = sRegistro1 & IIf(tR04.sEAD <> sEAD, Replace(Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR04.sModeloECF), " ", "?"), Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR04.sModeloECF)) & Format(tR04.iNumeroUsuario, "00")
        sRegistro1 = sRegistro1 & Format(tR04.lCCF, "000000") & Format(tR04.lCOO, "000000")
        sRegistro1 = sRegistro1 & Format(tR04.dtDataEmissao, "yyyymmdd") & Format(CDbl(Format(tR04.dSubtotal, "Fixed")) * 100, "00000000000000")
        sRegistro1 = sRegistro1 & Format(CDbl(Format(tR04.dDesconto, "Fixed")) * 100, "0000000000000") & tR04.sTipoDesconto
        sRegistro1 = sRegistro1 & Format(CDbl(Format(tR04.dAcrescimo, "Fixed")) * 100, "0000000000000") & tR04.sTipoAcrescimo
        sRegistro1 = sRegistro1 & Format(CDbl(Format(tR04.dValorTotal, "Fixed")) * 100, "00000000000000") & tR04.sIndicadorCancelamento & Format(CDbl(Format(tR04.dValorCancAcrescimo, "Fixed")) * 100, "0000000000000")
        sRegistro1 = sRegistro1 & tR04.sOrdemDescAcresc & Formata_Campo(ALINHAMENTO_DIREITA, 40, " ", tR04.sNomeAdiquirente)
        sRegistro1 = sRegistro1 & Formata_Campo(ALINHAMENTO_ESQUERDA, 14, "0", tR04.sNumeroSerie)
    
        Print #7, sRegistro1
    
        lErro = Comando_BuscarProximo(alComando(5))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210161
    
    Loop
    
    
    tR05.sNumeroSerie = String(R01_NUMEROSERIE, 0)
    tR05.sMFAdicional = String(R01_MFADICIONAL, 0)
    tR05.sModeloECF = String(R01_MODELOECF, 0)
    tR05.sCodProduto = String(R05_CODPRODUTO, 0)
    tR05.sDescProduto = String(R05_DESCPRODUTO, 0)
    tR05.sUM = String(R05_UM, 0)
    tR05.sTotalizadorParcial = String(R05_TOTALIZADORPARCIAL, 0)
    tR05.sIndicadorCancelamento = String(R05_INDICADORCANCELAMENTO, 0)
    tR05.sIAT = String(R05_IAT, 0)
    tR05.sPPT = String(R05_PPT, 0)
    tR05.sEAD = String(R05_EAD, 0)
    tR05.sTipoECF = String(R01_TIPOECF, 0)
    tR05.sMarcaECF = String(R01_MARCAECF, 0)
    
    
    'seleciona os registros R05 ordenados por CCF para insercao no arquivo
    lErro = Comando_Executar(alComando(6), "SELECT DataMovimento, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, NumeroUsuario, COO, Item, CCF, CodProduto, DescProduto, Quantidade, ValorUnitario, Desconto, Acrescimo, " & _
    " ValorTotal, TotalizadorParcial, IndicadorCancelamento, QuantidadeCancelada, ValorCancelado, ValorCancelAcrescimo, IAT, PPT, Casasdecimaisqtde, Casasdecimaisvalor, UM, EAD FROM R05 WHERE NumeroSerie = ? ORDER BY NumeroSerie, ModeloECF, NumeroUsuario, CCF, Item", _
    tR05.dtDataMovimento, tR05.sNumeroSerie, tR05.sMFAdicional, tR05.sTipoECF, tR05.sMarcaECF, tR05.sModeloECF, tR05.iNumeroUsuario, tR05.lCOO, tR05.iItem, tR05.lCCF, tR05.sCodProduto, tR05.dQuantidade, tR05.dValorUnitario, tR05.dDesconto, tR05.dAcrescimo, tR05.dValorTotal, tR05.sTotalizadorParcial, tR05.sIndicadorCancelamento, tR05.dQuantidadeCancelada, tR05.dValorCancelado, tR05.dValorCancelAcrescimo, tR05.sIAT, tR05.sPPT, tR05.iCasasdecimaisqtde, tR05.iCasasdecimaisvalor, tR05.sUM, tR05.sEAD, objUltimaReducao.dtDataMovimento, sNumSerie)
    If lErro <> AD_SQL_SUCESSO Then gError 210162
    
    lErro = Comando_BuscarPrimeiro(alComando(6))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210163
    
    Do While lErro = AD_SQL_SUCESSO
    
        For iIndice = 1 To tR05.iCasasdecimaisqtde
            sZerosQtde = sZerosQtde & "0"
        Next
    
        For iIndice = 1 To tR05.iCasasdecimaisvalor
            sZerosValor = sZerosValor & "0"
        Next
    
        sTexto = tR05.dtDataMovimento & tR05.sNumeroSerie & tR05.sMFAdicional & tR05.sTipoECF & tR05.sMarcaECF & tR05.sModeloECF & tR05.iNumeroUsuario & _
            tR05.lCCF & tR05.lCOO & tR05.iItem & tR05.sCodProduto & tR05.sDescProduto & tR05.dQuantidade & _
            tR05.sUM & tR05.dValorUnitario & tR05.dDesconto & tR05.dAcrescimo & tR05.dValorTotal & _
            tR05.sTotalizadorParcial & tR05.sIndicadorCancelamento & tR05.dQuantidadeCancelada & tR05.dValorCancelado & tR05.dValorCancelAcrescimo & tR05.sIAT & tR05.sPPT & tR05.iCasasdecimaisqtde & tR05.iCasasdecimaisvalor

        
        lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
        If lErro <> SUCESSO Then gError 210369
    
    
        sRegistro1 = "R05" & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR05.sNumeroSerie) & Format(tR05.sMFAdicional, "@")
        sRegistro1 = sRegistro1 & IIf(tR05.sEAD <> sEAD, Replace(Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR05.sModeloECF), " ", "?"), Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR05.sModeloECF)) & Format(tR05.iNumeroUsuario, "00")
        sRegistro1 = sRegistro1 & Format(tR05.lCOO, "000000") & Format(tR05.lCCF, "000000")
        sRegistro1 = sRegistro1 & Format(tR05.iItem, "000") & Formata_Campo(ALINHAMENTO_DIREITA, 14, " ", tR05.sCodProduto)
        sRegistro1 = sRegistro1 & Formata_Campo(ALINHAMENTO_DIREITA, 100, " ", tR05.sDescProduto) & Format(CDbl(Format(tR05.dQuantidade, "0." & sZerosQtde)) * (10 ^ tR05.iCasasdecimaisqtde), "0000000")
        sRegistro1 = sRegistro1 & Formata_Campo(ALINHAMENTO_DIREITA, 3, " ", tR05.sUM) & Format(CDbl(Format(tR05.dValorUnitario, "0." & sZerosValor)) * (10 ^ tR05.iCasasdecimaisvalor), "00000000") & Format(CDbl(Format(tR05.dDesconto, "Fixed")) * 100, "00000000")
        sRegistro1 = sRegistro1 & Format(CDbl(Format(tR05.dAcrescimo, "Fixed")) * 100, "00000000") & Format(CDbl(Format(tR05.dValorTotal, "Fixed")) * 100, "00000000000000")
        sRegistro1 = sRegistro1 & Formata_Campo(ALINHAMENTO_DIREITA, 7, " ", tR05.sTotalizadorParcial) & tR05.sIndicadorCancelamento
        sRegistro1 = sRegistro1 & Format(tR05.dQuantidadeCancelada, "0000000") & Format(CDbl(Format(tR05.dValorCancelado, "Fixed")) * 100, "0000000000000") & Format(CDbl(Format(tR05.dValorCancelAcrescimo, "Fixed")) * 100, "0000000000000") & tR05.sIAT & tR05.sPPT & Format(tR05.iCasasdecimaisqtde, "0") & Format(tR05.iCasasdecimaisvalor, "0")
        
        Print #7, sRegistro1
    
        lErro = Comando_BuscarProximo(alComando(6))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210164
    
    Loop
    
    tR06.sNumeroSerie = String(R01_NUMEROSERIE, 0)
    tR06.sMFAdicional = String(R01_MFADICIONAL, 0)
    tR06.sModeloECF = String(R01_MODELOECF, 0)
    tR06.sDenominacao = String(R06_DENOMINACAO, 0)
    tR06.sEAD = String(R06_EAD, 0)
    tR06.sTipoECF = String(R01_TIPOECF, 0)
    tR06.sMarcaECF = String(R01_MARCAECF, 0)
    tR06.sHoraFinalEmissao = String(R06_HORAFINALEMISSAO, 0)

    'seleciona os registros R06 ordenados por COO para insercao no arquivo
    lErro = Comando_Executar(alComando(7), "SELECT DataMovimento, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, NumeroUsuario, COO, GNF, GRG, CDC, denominacao, datafinalemissao, horafinalemissao, EAD " & _
    "  FROM R06 WHERE NumeroSerie = ? ORDER BY NumeroSerie, ModeloECF, NumeroUsuario, COO", _
    tR06.dtDataMovimento, tR06.sNumeroSerie, tR06.sMFAdicional, tR06.sTipoECF, tR06.sMarcaECF, tR06.sModeloECF, tR06.iNumeroUsuario, tR06.lCOO, tR06.lGNF, tR06.lGRG, tR06.lCDC, tR06.sDenominacao, tR06.dtDataFinalEmissao, tR06.sHoraFinalEmissao, tR06.sEAD, sNumSerie)
    If lErro <> AD_SQL_SUCESSO Then gError 210165
    
    lErro = Comando_BuscarPrimeiro(alComando(7))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210166
    
    Do While lErro = AD_SQL_SUCESSO
    
        sTexto = tR06.dtDataMovimento & tR06.sNumeroSerie & tR06.sMFAdicional & tR06.sTipoECF & tR06.sMarcaECF & tR06.sModeloECF & tR06.iNumeroUsuario & _
            tR06.lCOO & tR06.lGNF & tR06.lGRG & tR06.lCDC & tR06.sDenominacao & tR06.dtDataFinalEmissao & tR06.sHoraFinalEmissao
    
        lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
        If lErro <> SUCESSO Then gError 210370
    
        sRegistro1 = "R06" & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR06.sNumeroSerie) & Format(tR06.sMFAdicional, "@")
        sRegistro1 = sRegistro1 & IIf(tR06.sEAD <> sEAD, Replace(Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR06.sModeloECF), " ", "?"), Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR06.sModeloECF)) & Format(tR06.iNumeroUsuario, "00")
        sRegistro1 = sRegistro1 & Format(tR06.lCOO, "000000") & Format(tR06.lGNF, "000000") & Format(tR06.lGRG, "000000")
        sRegistro1 = sRegistro1 & Format(tR06.lCDC, "0000") & Formata_Campo(ALINHAMENTO_DIREITA, 2, " ", tR06.sDenominacao)
        sRegistro1 = sRegistro1 & Format(tR06.dtDataFinalEmissao, "yyyymmdd") & Format(CDate(tR06.sHoraFinalEmissao), "hhmmss")
        
        Print #7, sRegistro1
    
        lErro = Comando_BuscarProximo(alComando(7))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210167
    
    Loop
    
    
    tR07.sNumeroSerie = String(R01_NUMEROSERIE, 0)
    tR07.sMFAdicional = String(R01_MFADICIONAL, 0)
    tR07.sModeloECF = String(R01_MODELOECF, 0)
    tR07.sMeioPagamento = String(R07_MEIOPAGAMENTO, 0)
    tR07.sIndicadorEstorno = String(R07_INDICADORESTORNO, 0)
    tR07.sEAD = String(R07_EAD, 0)
    tR07.sTipoECF = String(R01_TIPOECF, 0)
    tR07.sMarcaECF = String(R01_MARCAECF, 0)
    
    
    'seleciona os registros R07 ordenados por COO para insercao no arquivo
    lErro = Comando_Executar(alComando(8), "SELECT DataMovimento, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, NumeroUsuario, COO, GNF, CCF, MeioPagamento, Valor, IndicadorEstorno, ValorEstorno, EAD " & _
    "  FROM R07 WHERE NumeroSerie = ? ORDER BY NumeroSerie, ModeloECF, NumeroUsuario, COO, MeioPagamento", _
    tR07.dtDataMovimento, tR07.sNumeroSerie, tR07.sMFAdicional, tR07.sTipoECF, tR07.sMarcaECF, tR07.sModeloECF, tR07.iNumeroUsuario, tR07.lCOO, tR07.lGNF, tR07.lCCF, tR07.sMeioPagamento, tR07.dValor, tR07.sIndicadorEstorno, tR07.dValorEstorno, tR07.sEAD, sNumSerie)
    If lErro <> AD_SQL_SUCESSO Then gError 210168
    
    
    lErro = Comando_BuscarPrimeiro(alComando(8))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210169
    
    Do While lErro = AD_SQL_SUCESSO
    
    
        sTexto = tR07.dtDataMovimento & tR07.sNumeroSerie & tR07.sMFAdicional & tR07.sTipoECF & tR07.sMarcaECF & tR07.sModeloECF & tR07.iNumeroUsuario & _
            tR07.lCOO & tR07.lCCF & tR07.lGNF & tR07.sMeioPagamento & tR07.dValor & tR07.sIndicadorEstorno & tR07.dValorEstorno

        
        lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
        If lErro <> SUCESSO Then gError 210371
    
        sRegistro1 = "R07" & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR07.sNumeroSerie) & Format(tR07.sMFAdicional, "@")
        sRegistro1 = sRegistro1 & IIf(tR07.sEAD <> sEAD, Replace(Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR07.sModeloECF), " ", "?"), Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR07.sModeloECF)) & Format(tR07.iNumeroUsuario, "00")
        sRegistro1 = sRegistro1 & Format(tR07.lCOO, "000000") & Format(tR07.lCCF, "000000") & Format(tR07.lGNF, "000000")
        sRegistro1 = sRegistro1 & Formata_Campo(ALINHAMENTO_DIREITA, R07_MEIOPAGAMENTO, " ", tR07.sMeioPagamento)
        sRegistro1 = sRegistro1 & Format(CDbl(Format(tR07.dValor, "Fixed")) * 100, "0000000000000")
        sRegistro1 = sRegistro1 & tR07.sIndicadorEstorno & Format(CDbl(Format(tR07.dValorEstorno, "Fixed")) * 100, "0000000000000")
        
        Print #7, sRegistro1
    
        lErro = Comando_BuscarProximo(alComando(8))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210170
    
    Loop
    
    
    Close #7

    lErro = AFRAC_CriaAssinaturaRSA(sArquivo, sRegistroEAD)
    If lErro <> SUCESSO Then gError 210171
    
    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next
    
'    Call MsgBox("Arquivo " & sArquivo & " foi gerado com sucesso.", vbOKOnly, "Movimentos Diários")
    Call Rotina_AvisoECF(vbOKOnly, "Arquivo de Movimentos Diários " & sArquivo & " foi gerado com sucesso.")
    
    MovimentoPorECF_Grava_ECF = SUCESSO

    Exit Function

Erro_MovimentoPorECF_Grava_ECF:

    MovimentoPorECF_Grava_ECF = gErr
    
    Select Case gErr

        Case 210149
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)

        Case 210150, 210151, 210393, 210394, 210407, 210408, 210410
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_R01, gErr)

        Case 210152
            Call Rotina_ErroECF(vbOKOnly, ERRO_NAO_EXISTE_R01_PERIODO, gErr)

        Case 210153, 210154, 210155, 210395, 210396
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_R02, gErr)

        Case 210156, 210157, 210158, 210397, 210398
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_R03, gErr)

        Case 210159, 210160, 210161, 210399, 210400
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_R04, gErr)

        Case 210162, 210163, 210164, 210401, 210402
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_R05, gErr)
        
        Case 210165, 210166, 210167, 210403, 210404
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_R06, gErr)
        
        Case 210168, 210169, 210170, 210405, 210406
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_R07, gErr)
        
        Case 70
            lTentaAcessoArquivo = lTentaAcessoArquivo + 1
            If lTentaAcessoArquivo < NUM_MAX_LOCK Then Resume
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_LOCADO, gErr, sArquivo)

        Case 210171
            Call Rotina_ErroECF(vbOKOnly, ERRO_GERACAO_ASSINATURA, gErr)

        Case 210365 To 210371, 210409

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 210172)

    End Select
    
    Close #7
    
    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Sub EstProd_Grava()

Dim lErro As Long
Dim lSequencial As Long
Dim sNomeArq As String

On Error GoTo Erro_EstProd_Grava

    'Função que Abre a Transação
    lErro = CF_ECF("Caixa_Transacao_Abrir", lSequencial)
    If lErro <> SUCESSO Then gError 204368

    'Função que Referenciar a Função da Afrac que Vai Executar a Leitura
    lErro = CF_ECF("EstProd_GravaEmTrans", lSequencial, sNomeArq)
    If lErro <> SUCESSO Then gError 204369

    'Função que Encerra a Transação com o Caixa
    lErro = CF_ECF("Caixa_Transacao_Fechar", lSequencial)
    If lErro <> SUCESSO Then gError 204370

'    Call MsgBox("Tabela de Estoque de Produtos " & sNomeArq & " gerado com sucesso.", vbOKOnly, "Estoque de Produtos")
    Call Rotina_AvisoECF(vbOKOnly, "Tabela de Estoque de Produtos " & sNomeArq & " gerado com sucesso.")

    Exit Sub

Erro_EstProd_Grava:

     Select Case gErr

        Case 204368, 204369, 204370
            'Erro Tratado Dentro da Função que Foi Chamada

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 204371)

    End Select
    
'    lSequencial = glSeqTransacaoAberta
            
    'Rollback na transação
    Call CF_ECF("Caixa_Transacao_Rollback", glTransacaoPAFECF)

    Exit Sub

End Sub

Function EstProd_GravaEmTrans(lSequencial As Long, sNomeArq As String) As Long
'PAFECF

Dim sNomeArq1 As String
Dim sRet As String
Dim sRetorno As String
Dim lTamanho As Long
Dim sDir As String
Dim lErro As Long
Dim dtData As Date
Dim colRegistro As New Collection
Dim iIndice As Integer
Dim sLog As String
Dim lTentaAcessoArquivo As Long
Dim lTotalRegistros As Long
Dim sNomeArq_ChavePrivada As String
Dim sModulo As String
Dim sExpoente As String
Dim sMD5 As String
Dim sAssinatura As String
Dim objProduto As ClassProduto
Dim objAliquota As New ClassAliquotaICMS
Dim dAliquotaICMS As Double
Dim sRegistroEAD As String
Dim alComando(1 To 3) As Long
Dim tE3 As typeE3
Dim tE2 As typeE2
Dim sTexto As String
Dim sEAD As String
Dim lTotRegE2 As Long
Dim sMensagem As String

On Error GoTo Erro_EstProd_GravaEmTrans


   'Abre os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_AbrirExt(glConexaoPAFECF)
        If alComando(iIndice) = 0 Then gError 210217
    Next

    lTamanho = 255
    sRetorno = String(lTamanho, 0)
        
    'funcao que verifica se o caixaconfig.ini foi alterado
    lErro = CF_ECF("CaixaConfig_Verifica_Chave")
    If lErro <> SUCESSO Then gError 210218
        
        
'    Call GetPrivateProfileString(APLICACAO_ORCAMENTO, "Dir", CONSTANTE_ERRO, sRetorno, lTamanho, NOME_ARQUIVO_CAIXA)
'    If sRetorno = String(lTamanho, 0) Then gError 210219
'
'    sDir = StringZ(sRetorno)
'
'    'se o diretorio nao for terminado por \  ===> acrescentar
'    If right(sDir, 1) <> "\" Then sDir = sDir & "\"

'    sNomeArq1 = "ESTOQUEPRODUTOS.TXT"
'
'    sNomeArq = CurDir() & IIf(right(CurDir, 1) <> "\", "\", "") & sNomeArq1
'
'
''    sNomeArq = sDir & sNomeArq1
'
'    'Verifica se tem orcamento para a data de hoje
'    sRet = Dir(sNomeArq)
'
'    If Len(sRet) <> 0 Then ECF_Apaga_Arquivo sNomeArq
'
'    Open sNomeArq For Append Lock Read Write As #4

'    tE1.sCNPJ = String(E1_CNPJ, 0)
'    tE1.sInscEstadual = String(E1_INSCESTADUAL, 0)
'    tE1.sInscMunicipal = String(E1_INSCMUNICIPAL, 0)
'    tE1.sRazaoSocial = String(E1_RAZAOSOCIAL, 0)
'    tE1.sNumeroSerie = String(E1_NUMEROSERIE, 0)
'    tE1.sMFAdicional = String(E1_MFADICIONAL, 0)
'    tE1.sTipoECF = String(E1_TIPOECF, 0)
'    tE1.sMarcaECF = String(E1_MARCAECF, 0)
'    tE1.sModeloECF = String(E1_MODELOECF, 0)
'
'    'seleciona o registro mais recente de E1
'    lErro = Comando_Executar(alComando(1), "SELECT DataEstoque, HoraEstoque, CNPJ, InscEstadual, InscMunicipal, RazaoSocial, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, TotRegE2 FROM E1 ORDER BY DataEstoque DESC", _
'    tE1.dtDataEstoque, tE1.dHoraEstoque, tE1.sCNPJ, tE1.sInscEstadual, tE1.sInscMunicipal, tE1.sRazaoSocial, tE1.sNumeroSerie, tE1.sMFAdicional, tE1.sTipoECF, tE1.sMarcaECF, tE1.sModeloECF, tE1.lTotRegE2)
'    If lErro <> AD_SQL_SUCESSO Then gError 210220
'
'    lErro = Comando_BuscarPrimeiro(alComando(1))
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210221
'
'    If lErro <> AD_SQL_SUCESSO Then gError 210222
'
'    'seleciona os registros de E2 da data mais recente
'    lErro = Comando_Executar(alComando(3), "SELECT Count(*) FROM E2 WHERE DataEstoque = ? ", _
'    lTotRegE2, tE1.dtDataEstoque)
'    If lErro <> AD_SQL_SUCESSO Then gError 210277
'
'    lErro = Comando_BuscarPrimeiro(alComando(3))
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210278
'
'    'Inserido no Arquivo o nome do arquivo
'    Print #4, "E1" & Formata_Campo(ALINHAMENTO_DIREITA, 14, "0", tE1.sCNPJ) & Formata_Campo(ALINHAMENTO_DIREITA, 14, " ", tE1.sInscEstadual) & Formata_Campo(ALINHAMENTO_DIREITA, 14, " ", tE1.sInscMunicipal) & IIf(tE1.lTotRegE2 <> lTotRegE2, Replace(Formata_Campo(ALINHAMENTO_DIREITA, 50, " ", tE1.sRazaoSocial), " ", "?"), Formata_Campo(ALINHAMENTO_DIREITA, 50, " ", tE1.sRazaoSocial)) & _
'    Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tE1.sNumeroSerie) & Formata_Campo(ALINHAMENTO_DIREITA, 1, " ", tE1.sMFAdicional) & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tE1.sTipoECF) & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tE1.sMarcaECF) & _
'    Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tE1.sModeloECF) & Format(tE1.dtDataEstoque, "yyyymmdd") & Format(CDate(tE1.dHoraEstoque), "hhmmss")
     
    tE3.sNumeroSerie = String(E3_NUMEROSERIE, 0)
    tE3.sMFAdicional = String(E3_MFADICIONAL, 0)
    tE3.sTipoECF = String(E3_TIPOECF, 0)
    tE3.sMarcaECF = String(E3_MARCAECF, 0)
    tE3.sModeloECF = String(E3_MODELOECF, 0)
    tE3.sEAD = String(E3_EAD, 0)

    
    'seleciona o registro mais recente de E3
    lErro = Comando_Executar(alComando(1), "SELECT DataEstoque, HoraEstoque, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, EAD, TotRegE2 FROM E3 ORDER BY DataEstoque DESC", _
    tE3.dtDataEstoque, tE3.dHoraEstoque, tE3.sNumeroSerie, tE3.sMFAdicional, tE3.sTipoECF, tE3.sMarcaECF, tE3.sModeloECF, tE3.sEAD, tE3.lTotRegE2)
    If lErro <> AD_SQL_SUCESSO Then gError 214051
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 214052
    
    If lErro <> AD_SQL_SUCESSO Then gError 214053
     
    tE2.sCodProduto = String(E2_CODPRODUTO, 0)
    tE2.sDescricao = String(E2_DESCRICAO, 0)
    tE2.sUM = String(E2_UM, 0)
    tE2.sPositivoNegativo = String(E2_POSITIVONEGATIVO, 0)
    tE2.sCNPJ = String(E2_CNPJ, 0)
    tE2.sEAD = String(E2_EAD, 0)
    
    'seleciona os registros de E2 da data mais recente
    lErro = Comando_Executar(alComando(2), "SELECT CodProduto, Descricao, UM, PositivoNegativo, Quantidade, CNPJ, EAD FROM E2 WHERE DataEstoque = ? ORDER BY CodProduto ", _
    tE2.sCodProduto, tE2.sDescricao, tE2.sUM, tE2.sPositivoNegativo, tE2.lQuantidade, tE2.sCNPJ, tE2.sEAD, tE3.dtDataEstoque)
    If lErro <> AD_SQL_SUCESSO Then gError 210223
    
    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210224
    
    
    Do While lErro = AD_SQL_SUCESSO
    
        sTexto = tE2.sCNPJ & tE2.sCodProduto & tE2.sDescricao & tE2.sUM & tE2.sPositivoNegativo & tE2.lQuantidade
    
    
        lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
        If lErro <> SUCESSO Then gError 210225
    
        sMensagem = "E2" & Formata_Campo(ALINHAMENTO_DIREITA, 14, "0", tE2.sCNPJ)
        sMensagem = sMensagem & Formata_Campo(ALINHAMENTO_DIREITA, 14, " ", tE2.sCodProduto)
        sMensagem = sMensagem & Formata_Campo(ALINHAMENTO_DIREITA, 50, " ", tE2.sDescricao)
        sMensagem = sMensagem & IIf(sEAD <> tE2.sEAD, Replace(Formata_Campo(ALINHAMENTO_DIREITA, 6, " ", tE2.sUM), " ", "?"), Formata_Campo(ALINHAMENTO_DIREITA, 6, " ", tE2.sUM))
        sMensagem = sMensagem & tE2.sPositivoNegativo
        sMensagem = sMensagem & Format(tE2.lQuantidade, "000000000")
    
    
        Print #7, sMensagem
        
        lTotalRegistros = lTotalRegistros + 1
    
        lErro = Comando_BuscarProximo(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210226
    
    Loop


    
    sTexto = tE3.sNumeroSerie & tE3.sMFAdicional & tE3.sTipoECF & tE3.sMarcaECF & tE3.sModeloECF & CStr(tE3.dtDataEstoque) & CStr(tE3.dHoraEstoque) & CStr(tE3.lTotRegE2)

    lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
    If lErro <> SUCESSO Then gError 214054
    
    
    'Inserido no Arquivo o nome do arquivo
    Print #7, "E3" & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tE3.sNumeroSerie) & Formata_Campo(ALINHAMENTO_DIREITA, 1, " ", tE3.sMFAdicional) & Formata_Campo(ALINHAMENTO_DIREITA, 7, " ", tE3.sTipoECF) & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tE3.sMarcaECF) & _
    IIf(tE3.sEAD <> sEAD, Replace(Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tE3.sModeloECF), " ", "?"), Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tE3.sModeloECF)) & Format(tE3.dtDataEstoque, "yyyymmdd") & Format(CDate(tE3.dHoraEstoque), "hhmmss")



'    Print #4, "E9" & Formata_Campo(ALINHAMENTO_DIREITA, 14, "0", tE1.sCNPJ) & Formata_Campo(ALINHAMENTO_DIREITA, 14, " ", tE1.sInscEstadual) & Format(lTotalRegistros, "000000")
'
'    Close #4
'
'    lErro = AFRAC_CriaAssinaturaRSA(sNomeArq, sRegistroEAD)
'    If lErro <> SUCESSO Then gError 210227
    
    EstProd_GravaEmTrans = SUCESSO

    Exit Function

Erro_EstProd_GravaEmTrans:

    EstProd_GravaEmTrans = gErr
    
    Select Case gErr

        Case 210217
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)

        Case 210218, 210225, 214054

        Case 210219
            Call Rotina_ErroECF(vbOKOnly, ERRO_PREENCHIMENTO_ARQUIVO_CONFIG, gErr, "Dir", APLICACAO_ORCAMENTO, NOME_ARQUIVO_CAIXA)

        Case 210220, 210221
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_E1, gErr)

        Case 210222
            Call Rotina_ErroECF(vbOKOnly, ERRO_E1_NAO_CADASTRADO, gErr)

        Case 210223, 210224, 210226, 210227, 210277, 210278
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_E2, gErr)

        Case 70
            lTentaAcessoArquivo = lTentaAcessoArquivo + 1
            If lTentaAcessoArquivo < NUM_MAX_LOCK Then Resume
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_LOCADO, gErr, sNomeArq)

        Case 214051, 214052
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_E3, gErr)

        Case 214053
            Call Rotina_ErroECF(vbOKOnly, ERRO_E3_NAO_CADASTRADO, gErr)

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 210228)

    End Select
    
'    Close #7
    
    Exit Function

End Function

Sub EstProdParcial_Grava(ByVal colProdutos As Collection)
'PAFECF

Dim lErro As Long
Dim lSequencial As Long
Dim sNomeArq As String

On Error GoTo Erro_EstProdParcial_Grava

    'Função que Abre a Transação
    lErro = CF_ECF("Caixa_Transacao_Abrir", lSequencial)
    If lErro <> SUCESSO Then gError 210173

    'Função que Referenciar a Função da Afrac que Vai Executar a Leitura
    lErro = CF_ECF("EstProdParcial_GravaEmTrans", lSequencial, sNomeArq, colProdutos)
    If lErro <> SUCESSO Then gError 210174

    'Função que Encerra a Transação com o Caixa
    lErro = CF_ECF("Caixa_Transacao_Fechar", lSequencial)
    If lErro <> SUCESSO Then gError 210175

'    Call MsgBox("Tabela de Estoque de Produtos Parcial " & sNomeArq & " gerado com sucesso.", vbOKOnly, "Estoque de Produtos")
    Call Rotina_AvisoECF(vbOKOnly, "Tabela de Estoque de Produtos Parcial " & sNomeArq & " gerado com sucesso.")
    
    Exit Sub

Erro_EstProdParcial_Grava:

     Select Case gErr

        Case 210173, 210174, 210175

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 210176)

    End Select
    
'    lSequencial = glSeqTransacaoAberta
            
    'Rollback na transação
    Call CF_ECF("Caixa_Transacao_Rollback", glTransacaoPAFECF)

    Exit Sub

End Sub

Function EstProdParcial_GravaEmTrans(lSequencial As Long, sNomeArq As String, ByVal colProdutos As Collection) As Long
'PAFECF

Dim sNomeArq1 As String
Dim sRet As String
Dim sRetorno As String
Dim lTamanho As Long
Dim sDir As String
Dim lErro As Long
Dim dtData As Date
Dim colRegistro As New Collection
Dim iIndice As Integer
Dim sLog As String
Dim lTentaAcessoArquivo As Long
Dim lTotalRegistros As Long
Dim sNomeArq_ChavePrivada As String
Dim sModulo As String
Dim sExpoente As String
Dim sMD5 As String
Dim sAssinatura As String
Dim objProduto As New ClassProduto
Dim objAliquota As New ClassAliquotaICMS
Dim dAliquotaICMS As Double
Dim vProduto As Variant
Dim sProduto As String
Dim sRegistroEAD As String
Dim alComando(1 To 3) As Long
Dim tE1 As typeE1
Dim tE2 As typeE2
Dim tE3 As typeE3
Dim sTexto As String
Dim sEAD As String
Dim lTotRegE2 As Long
Dim sMensagem As String

On Error GoTo Erro_EstProdParcial_GravaEmTrans

   'Abre os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_AbrirExt(glConexaoPAFECF)
        If alComando(iIndice) = 0 Then gError 210229
    Next

    lTamanho = 255
    sRetorno = String(lTamanho, 0)
        
    'funcao que verifica se o caixaconfig.ini foi alterado
    lErro = CF_ECF("CaixaConfig_Verifica_Chave")
    If lErro <> SUCESSO Then gError 210230
        
        
'    Call GetPrivateProfileString(APLICACAO_ORCAMENTO, "Dir", CONSTANTE_ERRO, sRetorno, lTamanho, NOME_ARQUIVO_CAIXA)
'    If sRetorno = String(lTamanho, 0) Then gError 210231
'
'    sDir = StringZ(sRetorno)
'
'    'se o diretorio nao for terminado por \  ===> acrescentar
'    If right(sDir, 1) <> "\" Then sDir = sDir & "\"

'    sNomeArq1 = "ESTOQUEPRODUTOSPARCIAL.TXT"
'
'    sNomeArq = CurDir() & IIf(right(CurDir, 1) <> "\", "\", "") & sNomeArq1
''    sNomeArq = sDir & sNomeArq1
'
'    'Verifica se tem orcamento para a data de hoje
'    sRet = Dir(sNomeArq)
'
'    If Len(sRet) <> 0 Then ECF_Apaga_Arquivo sNomeArq
'
'    Open sNomeArq For Append Lock Read Write As #4
'
'    tE1.sCNPJ = String(E1_CNPJ, 0)
'    tE1.sInscEstadual = String(E1_INSCESTADUAL, 0)
'    tE1.sInscMunicipal = String(E1_INSCMUNICIPAL, 0)
'    tE1.sRazaoSocial = String(E1_RAZAOSOCIAL, 0)
'    tE1.sNumeroSerie = String(E1_NUMEROSERIE, 0)
'    tE1.sMFAdicional = String(E1_MFADICIONAL, 0)
'    tE1.sTipoECF = String(E1_TIPOECF, 0)
'    tE1.sMarcaECF = String(E1_MARCAECF, 0)
'    tE1.sModeloECF = String(E1_MODELOECF, 0)
'
'    'seleciona o registro mais recente de E1
'    lErro = Comando_Executar(alComando(1), "SELECT DataEstoque, HoraEstoque, CNPJ, InscEstadual, InscMunicipal, RazaoSocial, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, TotRegE2 FROM E1 ORDER BY DataEstoque DESC", _
'    tE1.dtDataEstoque, tE1.dHoraEstoque, tE1.sCNPJ, tE1.sInscEstadual, tE1.sInscMunicipal, tE1.sRazaoSocial, tE1.sNumeroSerie, tE1.sMFAdicional, tE1.sTipoECF, tE1.sMarcaECF, tE1.sModeloECF, tE1.lTotRegE2)
'    If lErro <> AD_SQL_SUCESSO Then gError 210232
'
'    lErro = Comando_BuscarPrimeiro(alComando(1))
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210233
'
'    If lErro <> AD_SQL_SUCESSO Then gError 210234
'
'    'seleciona os registros de E2 da data mais recente
'    lErro = Comando_Executar(alComando(3), "SELECT Count(*) FROM E2 WHERE DataEstoque = ? ", _
'    lTotRegE2, tE1.dtDataEstoque)
'    If lErro <> AD_SQL_SUCESSO Then gError 210373
'
'    lErro = Comando_BuscarPrimeiro(alComando(3))
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210374
'
'    'Inserido no Arquivo o nome do arquivo
'    Print #4, "E1" & Formata_Campo(ALINHAMENTO_DIREITA, 14, "0", tE1.sCNPJ) & Formata_Campo(ALINHAMENTO_DIREITA, 14, " ", tE1.sInscEstadual) & Formata_Campo(ALINHAMENTO_DIREITA, 14, " ", tE1.sInscMunicipal) & IIf(tE1.lTotRegE2 <> lTotRegE2, Replace(Formata_Campo(ALINHAMENTO_DIREITA, 50, " ", tE1.sRazaoSocial), " ", "?"), Formata_Campo(ALINHAMENTO_DIREITA, 50, " ", tE1.sRazaoSocial)) & _
'    Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tE1.sNumeroSerie) & Formata_Campo(ALINHAMENTO_DIREITA, 1, " ", tE1.sMFAdicional) & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tE1.sTipoECF) & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tE1.sMarcaECF) & _
'    Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tE1.sModeloECF) & Format(tE1.dtDataEstoque, "yyyymmdd") & Format(CDate(tE1.dHoraEstoque), "hhmmss")


    tE3.sNumeroSerie = String(E3_NUMEROSERIE, 0)
    tE3.sMFAdicional = String(E3_MFADICIONAL, 0)
    tE3.sTipoECF = String(E3_TIPOECF, 0)
    tE3.sMarcaECF = String(E3_MARCAECF, 0)
    tE3.sModeloECF = String(E3_MODELOECF, 0)
    tE3.sEAD = String(E3_EAD, 0)

    'seleciona o registro mais recente de E3
    lErro = Comando_Executar(alComando(1), "SELECT DataEstoque, HoraEstoque, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, EAD, TotRegE2 FROM E3 ORDER BY DataEstoque DESC", _
    tE3.dtDataEstoque, tE3.dHoraEstoque, tE3.sNumeroSerie, tE3.sMFAdicional, tE3.sTipoECF, tE3.sMarcaECF, tE3.sModeloECF, tE3.sEAD, tE3.lTotRegE2)
    If lErro <> AD_SQL_SUCESSO Then gError 214056
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 214057
    
    If lErro <> AD_SQL_SUCESSO Then gError 214058


    For Each vProduto In colProdutos

        sProduto = vProduto
        
        tE2.sCodProduto = String(E2_CODPRODUTO, 0)
        tE2.sDescricao = String(E2_DESCRICAO, 0)
        tE2.sUM = String(E2_UM, 0)
        tE2.sPositivoNegativo = String(E2_POSITIVONEGATIVO, 0)
        tE2.sCNPJ = String(E2_CNPJ, 0)
        tE2.sEAD = String(E2_EAD, 0)
        
        'seleciona os registros de E2 da data mais recente
        lErro = Comando_Executar(alComando(2), "SELECT CodProduto, Descricao, UM, PositivoNegativo, Quantidade, CNPJ, EAD FROM E2 WHERE DataEstoque = ? And CodProduto = ? ORDER BY CodProduto ", _
        tE2.sCodProduto, tE2.sDescricao, tE2.sUM, tE2.sPositivoNegativo, tE2.lQuantidade, tE2.sCNPJ, tE2.sEAD, tE3.dtDataEstoque, sProduto)
        If lErro <> AD_SQL_SUCESSO Then gError 210235
        
        lErro = Comando_BuscarPrimeiro(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210236
        
        If lErro <> AD_SQL_SUCESSO Then gError 210237
        
        sTexto = tE2.sCNPJ & tE2.sCodProduto & tE2.sDescricao & tE2.sUM & tE2.sPositivoNegativo & tE2.lQuantidade
    
        lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
        If lErro <> SUCESSO Then gError 210238
    
        sMensagem = "E2" & Formata_Campo(ALINHAMENTO_DIREITA, 14, "0", tE2.sCNPJ)
        sMensagem = sMensagem & Formata_Campo(ALINHAMENTO_DIREITA, 14, " ", tE2.sCodProduto)
        sMensagem = sMensagem & Formata_Campo(ALINHAMENTO_DIREITA, 50, " ", tE2.sDescricao)
        sMensagem = sMensagem & IIf(sEAD <> tE2.sEAD, Replace(Formata_Campo(ALINHAMENTO_DIREITA, 6, " ", tE2.sUM), " ", "?"), Formata_Campo(ALINHAMENTO_DIREITA, 6, " ", tE2.sUM))
        sMensagem = sMensagem & tE2.sPositivoNegativo
        sMensagem = sMensagem & Format(tE2.lQuantidade, "000000000")
    
        Print #7, sMensagem
        
        lTotalRegistros = lTotalRegistros + 1
        
    Next

    sTexto = tE3.sNumeroSerie & tE3.sMFAdicional & tE3.sTipoECF & tE3.sMarcaECF & tE3.sModeloECF & CStr(tE3.dtDataEstoque) & CStr(tE3.dHoraEstoque) & CStr(tE3.lTotRegE2)

    lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
    If lErro <> SUCESSO Then gError 214059
    
    
    'Inserido no Arquivo o nome do arquivo
    Print #7, "E3" & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tE3.sNumeroSerie) & Formata_Campo(ALINHAMENTO_DIREITA, 1, " ", tE3.sMFAdicional) & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tE3.sTipoECF) & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tE3.sMarcaECF) & _
    IIf(tE3.sEAD <> sEAD, Replace(Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tE3.sModeloECF), " ", "?"), Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tE3.sModeloECF)) & Format(tE3.dtDataEstoque, "yyyymmdd") & Format(CDate(tE3.dHoraEstoque), "hhmmss")



'    Print #4, "E9" & Formata_Campo(ALINHAMENTO_DIREITA, 14, "0", tE1.sCNPJ) & Formata_Campo(ALINHAMENTO_DIREITA, 14, " ", tE1.sInscEstadual) & Format(lTotalRegistros, "000000")
'
'    Close #4
'
'    lErro = AFRAC_CriaAssinaturaRSA(sNomeArq, sRegistroEAD)
'    If lErro <> SUCESSO Then gError 210239
    
    EstProdParcial_GravaEmTrans = SUCESSO

    Exit Function

Erro_EstProdParcial_GravaEmTrans:

    EstProdParcial_GravaEmTrans = gErr
    
    Select Case gErr

        Case 210229
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)

        Case 210230, 210238, 210239, 214059
        
        Case 210231
            Call Rotina_ErroECF(vbOKOnly, ERRO_PREENCHIMENTO_ARQUIVO_CONFIG, gErr, "Dir", APLICACAO_ORCAMENTO, NOME_ARQUIVO_CAIXA)

        Case 210232, 210233
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_E1, gErr)

        Case 210234
            Call Rotina_ErroECF(vbOKOnly, ERRO_E1_NAO_CADASTRADO, gErr)

        Case 210235, 210236
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_E2, gErr)

        Case 210237
            Call Rotina_ErroECF(vbOKOnly, ERRO_E2_NAO_CADASTRADO, gErr, tE1.dtDataEstoque, sProduto)
        
        Case 70
            lTentaAcessoArquivo = lTentaAcessoArquivo + 1
            If lTentaAcessoArquivo < NUM_MAX_LOCK Then Resume
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_LOCADO, gErr, sNomeArq)

        Case 214056, 214057
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_E3, gErr)

        Case 214058
            Call Rotina_ErroECF(vbOKOnly, ERRO_E3_NAO_CADASTRADO, gErr)

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 210240)


    End Select
    
'    Close #7
    
    Exit Function

End Function

Function Gerar_EAD(sTexto As String, sEAD As String) As Long

Dim sNomeArq1 As String
Dim sArquivo As String
Dim lErro As Long
Dim lTentaAcessoArquivo As Long

On Error GoTo Erro_Gerar_EAD

    sNomeArq1 = gsDirMVTEF & "TextoEAD.tmp"

    'verifica se o arquivo da forma 1_1_1_1.tmp existe
    sArquivo = Dir(sNomeArq1)
    
    'se o arquivo existir ==> remove o arquivo
    If Len(sArquivo) > 0 Then ECF_Apaga_Arquivo (sNomeArq1)

    Open sNomeArq1 For Append As #1
    
    Print #1, sTexto
    
    Close #1
    
    lErro = AFRAC_CriaAssinaturaRSA(sNomeArq1, sEAD)
    If lErro <> SUCESSO Then gError 210188
    
    Gerar_EAD = SUCESSO

    Exit Function

Erro_Gerar_EAD:

    Gerar_EAD = gErr
    
    Select Case gErr

        Case 70
            lTentaAcessoArquivo = lTentaAcessoArquivo + 1
            If lTentaAcessoArquivo < NUM_MAX_LOCK Then Resume
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_LOCADO, gErr, sNomeArq1)

        Case 210188
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 210189)

    End Select
    
    Close #1
    
    Exit Function


End Function

Function Requisito_VII_Item8_E2() As Long

Dim iIndice As Integer
Dim objProduto As ClassProduto
Dim sPositivoNegativo As String
Dim alComando(1 To 2) As Long
Dim sTexto As String
Dim sEAD As String
Dim lErro As Long
Dim lTransacao As Long
Dim dtDataEstoque As Date
Dim colProdutos As New Collection

On Error GoTo Erro_Requisito_VII_Item8_E2

    If Not AFRAC_ImpressoraCFe(giCodModeloECF) Then
    
        If giOrcamentoECF <> CAIXA_SO_ORCAMENTO Then
    
'            lErro = CF_ECF("Caixa_Transacao_Abrir", lTransacao)
'            If lErro <> SUCESSO Then gError 210250
    
    
           'Abre os  comandos
            For iIndice = LBound(alComando) To UBound(alComando)
                alComando(iIndice) = Comando_AbrirExt(glConexaoPAFECF)
                If alComando(iIndice) = 0 Then gError 210201
            Next
            
            lErro = Comando_Executar(alComando(1), "SELECT DataEstoque FROM E2 WHERE DataEstoque = ?", dtDataEstoque, Date)
            If lErro <> AD_SQL_SUCESSO Then gError 210422
               
            lErro = Comando_BuscarPrimeiro(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210423
               
            If lErro = AD_SQL_SEM_DADOS Then
        
'                For iIndice = 1 To gaobjProdutosNome.Count
'
'                    Set objProduto = gaobjProdutosNome.Item(iIndice)
'
'                    If objProduto.dQuantEstLoja > 999999 Then objProduto.dQuantEstLoja = 999999 '??? Jones
'
'                    If objProduto.dQuantEstLoja >= 0 Then
'                        sPositivoNegativo = "+"
'                    Else
'                        sPositivoNegativo = "-"
'                    End If
'
'                    sTexto = gsCNPJ & left(objProduto.sCodigo, 14) & left(objProduto.sDescricao, 50) & objProduto.sSiglaUMVenda & sPositivoNegativo & CDbl(Format(Abs(objProduto.dQuantEstLoja), "######.000")) * 1000
'
'                    lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
'                    If lErro <> SUCESSO Then gError 210202
'
'                    lErro = Comando_Executar(alComando(2), "INSERT INTO E2 (CodProduto, DataEstoque, Descricao, UM, PositivoNegativo, Quantidade, CNPJ, EAD) VALUES (?,?,?,?,?,?,?,?)", _
'                    left(objProduto.sCodigo, 14), Date, left(objProduto.sDescricao, 50), objProduto.sSiglaUMVenda, sPositivoNegativo, CLng(CDbl(Format(Abs(objProduto.dQuantEstLoja), "######.000")) * 1000), gsCNPJ, sEAD)
'                    If lErro <> AD_SQL_SUCESSO Then gError 210203
'
'
'                Next
        
        
        
                lErro = CF_ECF("Produtos_Le_NomeReduzido1", colProdutos)
                If lErro <> SUCESSO Then gError 214857
       
        
                For Each objProduto In colProdutos
                    
                    If objProduto.dQuantEstLoja > 999999 Then objProduto.dQuantEstLoja = 999999 '??? Jones
                    
                    If objProduto.dQuantEstLoja >= 0 Then
                        sPositivoNegativo = "+"
                    Else
                        sPositivoNegativo = "-"
                    End If
                    
                    sTexto = gsCNPJ & left(objProduto.sCodigo, 14) & left(objProduto.sDescricao, 50) & objProduto.sSiglaUMVenda & sPositivoNegativo & CDbl(Format(Abs(objProduto.dQuantEstLoja), "######.000")) * 1000
                    
                    lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
                    If lErro <> SUCESSO Then gError 210202
                    
                    lErro = Comando_Executar(alComando(2), "INSERT INTO E2 (CodProduto, DataEstoque, Descricao, UM, PositivoNegativo, Quantidade, CNPJ, EAD) VALUES (?,?,?,?,?,?,?,?)", _
                    left(objProduto.sCodigo, 14), Date, left(objProduto.sDescricao, 50), objProduto.sSiglaUMVenda, sPositivoNegativo, CLng(CDbl(Format(Abs(objProduto.dQuantEstLoja), "######.000")) * 1000), gsCNPJ, sEAD)
                    If lErro <> AD_SQL_SUCESSO Then gError 210203
                    
                    
                Next
        
        
            End If
        
'            'Função que Executa o Encerramento da Sessão
'            lErro = CF_ECF("Caixa_Transacao_Fechar", lTransacao)
'            If lErro <> SUCESSO Then gError 210251
        
            For iIndice = LBound(alComando) To UBound(alComando)
                lErro = Comando_Fechar(alComando(iIndice))
            Next
    
        End If

    End If

    Requisito_VII_Item8_E2 = SUCESSO

    Exit Function

Erro_Requisito_VII_Item8_E2:

    Requisito_VII_Item8_E2 = gErr
    
    Select Case gErr

        Case 210201
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)

        Case 210202, 214857

        Case 210203
            Call Rotina_ErroECF(vbOKOnly, ERRO_INCLUSAO_E2, gErr)

        Case 210250

        Case 210251

        Case 210422, 210423
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_E2, gErr)

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 210204)

    End Select
    
'    Call CF_ECF("Caixa_Transacao_Rollback", glTransacaoPAFECF)
    
    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function


Function Requisito_VII_Item8_E3() As Long

Dim iIndice As Integer
Dim alComando(1 To 4) As Long
Dim lErro As Long
Dim sData As String
Dim sHora As String
Dim dtHora As Date
Dim dtData As Date
Dim sNumeroSerie As String
Dim sMFAdicional As String
Dim sTipoECF As String
Dim sMarcaECF As String
Dim sModeloECF As String
Dim lTotRegE2 As Long
Dim dtData1 As Date
Dim dtData2 As Date
Dim dHora As Double
Dim sEAD As String
Dim sTexto As String


On Error GoTo Erro_Requisito_VII_Item8_E3

    If Not AFRAC_ImpressoraCFe(giCodModeloECF) Then

       'Abre os  comandos
        For iIndice = LBound(alComando) To UBound(alComando)
            alComando(iIndice) = Comando_AbrirExt(glConexaoPAFECF)
            If alComando(iIndice) = 0 Then gError 210206
        Next
    
        lErro = AFRAC_DataHoraUltimoDocumento(sData, sHora)
        If lErro <> SUCESSO Then
            lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "DataHoraUltimoDocumento")
            If lErro <> SUCESSO Then gError 210207
        End If
    
        dtData1 = StrParaDate(left(sData, 2) & "/" & Mid(sData, 3, 2) & "/" & right(sData, 4))
    
    
    
        lErro = Comando_Executar(alComando(1), "SELECT DataEstoque  FROM E3 WHERE DataEstoque = ?", dtData2, dtData1)
        If lErro <> AD_SQL_SUCESSO Then gError 210208
        
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210209
        
        If lErro = AD_SQL_SEM_DADOS Then
        
            lErro = CF_ECF("Requisito_VII_Item8_E2")
            If lErro <> SUCESSO Then gError 210196
        
            dtHora = StrParaDate(left(sHora, 2) & ":" & Mid(sHora, 3, 2) & ":" & right(sHora, 2))
            dtData = StrParaDate(left(sData, 2) & "/" & Mid(sData, 3, 2) & "/" & right(sData, 4))
        
            lErro = AFRAC_LerInformacaoImpressora("002", sNumeroSerie)
            If lErro <> SUCESSO Then
                lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Informação Impressora")
                If lErro <> SUCESSO Then gError 210210
            End If
        
            lErro = AFRAC_LerInformacaoImpressora("050", sMFAdicional)
            If lErro <> SUCESSO Then
                lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Informação Impressora")
                If lErro <> SUCESSO Then gError 210211
            End If
        
            lErro = AFRAC_RetornaTipoECF(sTipoECF)
            If lErro <> SUCESSO Then
                lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Retorna Tipo ECF")
                If lErro <> SUCESSO Then gError 210212
            End If
        
            lErro = AFRAC_RetornaMarcaECF(sMarcaECF)
            If lErro <> SUCESSO Then
                lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Retorna Marca ECF")
                If lErro <> SUCESSO Then gError 210213
            End If
            
            lErro = AFRAC_RetornaModeloECF(sModeloECF)
            If lErro <> SUCESSO Then
                lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Retorna Modelo ECF")
                If lErro <> SUCESSO Then gError 210214
            End If
        
'            lErro = Comando_Executar(alComando(3), "SELECT Count(*)  FROM E2 WHERE DataEstoque = ?", lTotRegE2, dtData)
'            If lErro <> AD_SQL_SUCESSO Then gError 210208
'
'            lErro = Comando_BuscarPrimeiro(alComando(3))
'            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210209
        
        
            dHora = CDbl(dtHora)
            
            lErro = Comando_Executar(alComando(3), "SELECT Count(*) " & _
            " FROM E2 WHERE DataEstoque = ?  ", lTotRegE2, dtData)
            If lErro <> AD_SQL_SUCESSO Then gError 214068
            
            lErro = Comando_BuscarPrimeiro(alComando(3))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 214069
        
            sTexto = sNumeroSerie & sMFAdicional & sTipoECF & sMarcaECF & sModeloECF & CStr(dtData) & CStr(dHora) & CStr(lTotRegE2)

            lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
            If lErro <> SUCESSO Then gError 214055
        
            lErro = Comando_Executar(alComando(2), "INSERT INTO E3 (DataEstoque, HoraEstoque, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, EAD, TotRegE2) VALUES (?,?,?,?,?,?,?,?,?)", _
            dtData, dHora, sNumeroSerie, sMFAdicional, sTipoECF, sMarcaECF, sModeloECF, sEAD, lTotRegE2)
            If lErro <> AD_SQL_SUCESSO Then gError 210215
            
            lErro = Comando_Executar(alComando(4), "UPDATE ConfiguracaoECF SET TotRegE3 = TotRegE3 + 1")
            If lErro <> AD_SQL_SUCESSO Then gError 214068
            
            
        End If
    
        For iIndice = LBound(alComando) To UBound(alComando)
            lErro = Comando_Fechar(alComando(iIndice))
        Next

    End If

    Requisito_VII_Item8_E3 = SUCESSO

    Exit Function

Erro_Requisito_VII_Item8_E3:

    Requisito_VII_Item8_E3 = gErr
    
    Select Case gErr

        Case 210206
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)

        Case 210207, 210210 To 210214, 214055, 210196

        Case 210208, 210209
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_E3, gErr)

        Case 210215
            Call Rotina_ErroECF(vbOKOnly, ERRO_INCLUSAO_E3, gErr)

        Case 214068, 214069
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_E2, gErr)

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 210216)

    End Select
    
    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function


Function Requisito_XI() As Long

Dim iIndice As Integer
Dim objProduto As ClassProduto
Dim sPositivoNegativo As String
Dim alComando(1 To 4) As Long
Dim sTexto As String
Dim sEAD As String
Dim lErro As Long
Dim lTransacao As Long
Dim objAliquota As ClassAliquotaICMS
Dim dAliquotaICMS As Double
Dim sMensagem As String


Dim objLojaArqFisMestre As New ClassLojaArqFisMestre
Dim colLojaArqFisAnalitico As New Collection
Dim objUltimaReducao As New ClassUltimaReducao
Dim colProdutos As New Collection


On Error GoTo Erro_Requisito_XI

    If Not AFRAC_ImpressoraCFe(giCodModeloECF) Then
    
        If giOrcamentoECF <> CAIXA_SO_ORCAMENTO Then
    
    
            lErro = CF_ECF("Caixa_Transacao_Abrir", lTransacao)
            If lErro <> SUCESSO Then gError 210242
        
           'Abre os  comandos
            For iIndice = LBound(alComando) To UBound(alComando)
                alComando(iIndice) = Comando_AbrirExt(glConexaoPAFECF)
                If alComando(iIndice) = 0 Then gError 210243
            Next
        
            lErro = Comando_Executar(alComando(1), "DELETE FROM P2")
            If lErro <> AD_SQL_SUCESSO Then gError 210421
        
        
            lErro = CF_ECF("Produtos_Le_NomeReduzido1", colProdutos)
            If lErro <> SUCESSO Then gError 214858
    
     
            For Each objProduto In colProdutos
      
        
'            For iIndice = 1 To gaobjProdutosNome.Count
                
                dAliquotaICMS = 0
                
'                Set objProduto = gaobjProdutosNome.Item(iIndice)
                
                For Each objAliquota In gcolAliquotasTotal
                    If objAliquota.sSigla = objProduto.sICMSAliquota Then
                        dAliquotaICMS = objAliquota.dAliquota
                        Exit For
                    End If
                Next
                
                sMensagem = sMensagem & Format(dAliquotaICMS * 10000, "0000")
                
                sTexto = gsCNPJ & left(objProduto.sCodigo, 14) & left(objProduto.sDescricao, 50) & objProduto.sSiglaUMVenda & objProduto.sTruncamento & IIf(objProduto.iCompras = 1, "T", "P") & left(objProduto.sSituacaoTribECF, 1) & Format(dAliquotaICMS * 10000, "0000") & Format(CDbl(Format(IIf(objProduto.sTruncamento = "A", Round(objProduto.dPrecoLoja, 2), objProduto.dPrecoLoja), "Fixed")) * 100, "000000000000")
        
                
                lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
                If lErro <> SUCESSO Then gError 210244
                
                lErro = Comando_Executar(alComando(2), "INSERT INTO P2 (CNPJ, CodProduto, Descricao, UM, IAT, IPPT, SituacaoTributaria, Aliquota, ValorUnitario, EAD) VALUES (?,?,?,?,?,?,?,?,?,?)", _
                gsCNPJ, left(objProduto.sCodigo, 14), left(objProduto.sDescricao, 50), objProduto.sSiglaUMVenda, objProduto.sTruncamento, IIf(objProduto.iCompras = 1, "T", "P"), left(objProduto.sSituacaoTribECF, 1), dAliquotaICMS, objProduto.dPrecoLoja, sEAD)
                If lErro <> AD_SQL_SUCESSO Then gError 210245
                
                
            Next
        
            lErro = Comando_Executar(alComando(3), "DELETE FROM P1")
            If lErro <> AD_SQL_SUCESSO Then gError 210246
        
            lErro = Comando_Executar(alComando(4), "INSERT INTO P1 (CNPJ, InscEstadual, InscMunicipal, RazaoSocial, TotRegP2) VALUES (?,?,?,?,?)", _
            gsCNPJ, gsInscricaoEstadual, gsInscricaoMunicipal, gsNomeEmpresa, gaobjProdutosNome.Count)
            If lErro <> AD_SQL_SUCESSO Then gError 210247
        
            'Função que Executa o Encerramento da Sessão
            lErro = CF_ECF("Caixa_Transacao_Fechar", lTransacao)
            If lErro <> SUCESSO Then gError 210248
        
            For iIndice = LBound(alComando) To UBound(alComando)
                lErro = Comando_Fechar(alComando(iIndice))
            Next
    
        End If

    End If

    Requisito_XI = SUCESSO

    Exit Function

Erro_Requisito_XI:

    Requisito_XI = gErr
    
    Select Case gErr

        Case 210242, 210244, 210248, 214858

        Case 210243
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)

        Case 210245
            Call Rotina_ErroECF(vbOKOnly, ERRO_INCLUSAO_P2, gErr)

        Case 210246
            Call Rotina_ErroECF(vbOKOnly, ERRO_EXCLUSAO_P1, gErr)

        Case 210247
            Call Rotina_ErroECF(vbOKOnly, ERRO_INCLUSAO_P1, gErr)

        Case 210421
            Call Rotina_ErroECF(vbOKOnly, ERRO_EXCLUSAO_P2, gErr)

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 210249)

    End Select
    
    Call CF_ECF("Caixa_Transacao_Rollback", glTransacaoPAFECF)
    
    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Function Atualiza_D1(ByVal dtDataDAV As Date, ByVal lTotRegD2 As Long, ByVal lTotRegD3 As Long, ByVal lTotRegD4 As Long) As Long

Dim iIndice As Integer
Dim alComandoOrc(1 To 3) As Long
Dim lErro As Long
Dim sTexto As String
Dim sEAD As String
Dim tD1 As typeD1

On Error GoTo Erro_Atualiza_D1
    
   'Abre os  comandos
    For iIndice = LBound(alComandoOrc) To UBound(alComandoOrc)
        alComandoOrc(iIndice) = Comando_AbrirExt(glConexaoOrcPAF)
        If alComandoOrc(iIndice) = 0 Then gError 210271
    Next
    
    tD1.sInscEstadual = String(STRING_D1_INSCESTADUAL, 0)
    tD1.sInscMunicipal = String(STRING_D1_INSCMUNICIPAL, 0)
    tD1.sRazaoSocial = String(STRING_D1_RAZAOSOCIAL, 0)
    
    lErro = Comando_Executar(alComandoOrc(1), "SELECT InscEstadual, InscMunicipal, RazaoSocial, TotRegD2, TotRegD3, TotRegD4 FROM D1 WHERE DataDAV = ? AND CNPJ =? AND NumeroSerie = ? AND MFAdicional =? AND TipoECF = ? AND MarcaECF = ? AND ModeloECF = ?", _
    tD1.sInscEstadual, tD1.sInscMunicipal, tD1.sRazaoSocial, tD1.lTotRegD2, tD1.lTotRegD3, tD1.lTotRegD4, dtDataDAV, gsCNPJ, gsNumSerie, gsMFAdicional, gsTipoECF, gsMarcaECF, gsModeloECF)
    If lErro <> AD_SQL_SUCESSO Then gError 210272

    lErro = Comando_BuscarPrimeiro(alComandoOrc(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210273

    If lErro = AD_SQL_SEM_DADOS Then
    
        sTexto = CStr(dtDataDAV) & gsCNPJ & gsNumSerie & gsMFAdicional & gsTipoECF & gsMarcaECF & gsModeloECF & gsInscricaoEstadual & gsInscricaoMunicipal & left(gsNomeEmpresa, 50) & CStr(lTotRegD2) & CStr(lTotRegD3) & CStr(lTotRegD4)

        lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
        If lErro <> SUCESSO Then gError 214055
    
        lErro = Comando_Executar(alComandoOrc(2), "INSERT INTO D1 (DataDAV, CNPJ, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, InscEstadual, InscMunicipal, RazaoSocial, TotRegD2, TotRegD3, TotRegD4, EAD) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
        dtDataDAV, gsCNPJ, gsNumSerie, gsMFAdicional, gsTipoECF, gsMarcaECF, gsModeloECF, gsInscricaoEstadual, gsInscricaoMunicipal, left(gsNomeEmpresa, 50), lTotRegD2, lTotRegD3, lTotRegD4, sEAD)
        If lErro <> AD_SQL_SUCESSO Then gError 210274
    
    Else
    
        sTexto = CStr(dtDataDAV) & gsCNPJ & gsNumSerie & gsMFAdicional & gsTipoECF & gsMarcaECF & gsModeloECF & tD1.sInscEstadual & tD1.sInscMunicipal & tD1.sRazaoSocial & CStr(tD1.lTotRegD2 + lTotRegD2) & CStr(tD1.lTotRegD3 + lTotRegD3) & CStr(tD1.lTotRegD4 + lTotRegD4)

        lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
        If lErro <> SUCESSO Then gError 214055
    
        lErro = Comando_Executar(alComandoOrc(3), "UPDATE D1 SET TotRegD2 = ?, TotRegD3 = ?, TotRegD4 = ?, EAD = ? WHERE DataDAV = ?  AND CNPJ =? AND NumeroSerie = ? AND MFAdicional =? AND TipoECF = ? AND MarcaECF = ? AND ModeloECF = ?", tD1.lTotRegD2 + lTotRegD2, tD1.lTotRegD3 + lTotRegD3, tD1.lTotRegD4 + lTotRegD4, sEAD, dtDataDAV, gsCNPJ, gsNumSerie, gsMFAdicional, gsTipoECF, gsMarcaECF, gsModeloECF)
        If lErro <> AD_SQL_SUCESSO Then gError 210275
    
    End If

    For iIndice = LBound(alComandoOrc) To UBound(alComandoOrc)
        Call Comando_Fechar(alComandoOrc(iIndice))
    Next

    Atualiza_D1 = SUCESSO

    Exit Function

Erro_Atualiza_D1:
    
    Atualiza_D1 = gErr

    Select Case gErr
        
        Case 210271
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)
        
        Case 210272, 210273
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_D1, gErr)
        
        Case 210274
            Call Rotina_ErroECF(vbOKOnly, ERRO_INCLUSAO_D1, gErr)
        
        Case 210275
            Call Rotina_ErroECF(vbOKOnly, ERRO_ALTERACAO_D1, gErr)
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 210276)

    End Select

    For iIndice = LBound(alComandoOrc) To UBound(alComandoOrc)
        Call Comando_Fechar(alComandoOrc(iIndice))
    Next

    Exit Function

End Function


Function AbreBDs_PAFECF() As Long
                
Dim sDSN As String, lErro As Long
Dim iLenDSN As Integer
Dim sParamOut As String
Dim iLenParamOut As Integer

On Error GoTo Erro_AbreBDs_PAFECF

    sDSN = "DSN=SGEPAFECF;UID=sa;PWD=SAPWD;"
    iLenDSN = Len(sDSN)
    sParamOut = String(1024, 0)
    iLenParamOut = 1024
            
    glConexaoPAFECF = Conexao_AbrirExt(AD_SQL_DRIVER_ODBC, sDSN, iLenDSN, sParamOut, iLenParamOut)
    If glConexaoPAFECF = 0 Then gError 210414

    GL_lConexaoDic = glConexaoPAFECF
    GL_lDicDados = glConexaoPAFECF
    gsUsuario = "supervisor"
    
    sDSN = "DSN=SGEPAFECF;UID=sa;PWD=SAPWD;"
    iLenDSN = Len(sDSN)
    sParamOut = String(1024, 0)
    iLenParamOut = 1024
    
    GL_lConexaoBrowse = Conexao_AbrirBrowseExt(AD_SQL_DRIVER_ODBC, sDSN, iLenDSN, sParamOut, iLenParamOut)
    If GL_lConexaoBrowse = 0 Then gError 214933
    
    sDSN = "DSN=SGEOrcPAF;UID=sa;PWD=SAPWD;"
    iLenDSN = Len(sDSN)
    sParamOut = String(1024, 0)
    iLenParamOut = 1024
    
    lErro = ODBC_Testa_Acesso(sDSN)
    'If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    If lErro <> 216221 Then
        glConexaoOrcPAF = Conexao_AbrirExt(AD_SQL_DRIVER_ODBC, sDSN, iLenDSN, sParamOut, iLenParamOut)
        
        If glConexaoOrcPAF <> 0 Then
        
            sDSN = "DSN=SGEOrcPAF;UID=sa;PWD=SAPWD;"
            iLenDSN = Len(sDSN)
            sParamOut = String(1024, 0)
            iLenParamOut = 1024
        
            GL_lConexaoDicBrowse = Conexao_AbrirBrowseExt(AD_SQL_DRIVER_ODBC, sDSN, iLenDSN, sParamOut, iLenParamOut)
    
            lErro = ECFConfig_ObterIntegracao
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
            
        End If
    End If

    lErro = Rede_Testa_Acesso()
    'If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    AbreBDs_PAFECF = SUCESSO

    Exit Function

Erro_AbreBDs_PAFECF:
    
    AbreBDs_PAFECF = gErr

    Select Case gErr
        
        Case 210414, 210415, 214933, 214957, ERRO_SEM_MENSAGEM
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 210416)

    End Select

    Exit Function

End Function

Function FechaBDs_PAFECF() As Long
                
Dim lErro As Long

On Error GoTo Erro_FechaBDs_PAFECF


    lErro = Conexao_FecharExt(glConexaoPAFECF)
    If lErro <> AD_SQL_SUCESSO Then gError 210417

    lErro = Conexao_FecharExt(glConexaoOrcPAF)
    If lErro <> AD_SQL_SUCESSO Then gError 210418

    FechaBDs_PAFECF = SUCESSO

    Exit Function

Erro_FechaBDs_PAFECF:
    
    FechaBDs_PAFECF = gErr

    Select Case gErr
        
        Case 210417, 210418
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 210419)

    End Select

    Exit Function


End Function

Function Copia_Arquivo_EspelhoMFD_Daruma() As Long

Dim sArqTmp As String
Dim sArqTmp1 As String
Dim sArq As String
Dim sArq1 As String
Dim sRegistro As String

On Error GoTo Erro_Copia_Arquivo_EspelhoMFD_Daruma

    sArqTmp = CurDir() & "\Espelho_MFD.tmp"

    sArqTmp1 = Dir(sArqTmp)

    If Len(sArqTmp1) <> 0 Then ECF_Apaga_Arquivo sArqTmp

    Open sArqTmp For Append Lock Read Write As #1
    
    sArq = CurDir() & "\Espelho_MFD.txt"

    Open sArq For Input As #2
    
    If Not EOF(2) Then Line Input #2, sRegistro
    
    Do While Not EOF(2)

        Print #1, sRegistro

        'Busca o próximo registro do arquivo
        If Not EOF(2) Then
        
            Line Input #2, sRegistro
        End If
    Loop
    
        
    
    If Len(sRegistro) > 4 Then
        Print #1, sRegistro
    End If
    

    Close #1
    Close #2

    ECF_Apaga_Arquivo sArq

    Name sArqTmp As sArq

    Copia_Arquivo_EspelhoMFD_Daruma = SUCESSO
    
    Exit Function

Erro_Copia_Arquivo_EspelhoMFD_Daruma:
    
    Copia_Arquivo_EspelhoMFD_Daruma = gErr

    Select Case gErr
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 210796)

    End Select

    Exit Function

End Function

Function MovimentoPorECF_Grava1(ByVal sNumeroSerie As String, ByVal dtDataIni As Date, ByVal dtDataFim As Date, ByVal sArquivo As String) As Long

Dim sArquivo1 As String
Dim sCodNacId As String
Dim lErro As Long
Dim sMFAdicional As String
Dim sMarcaECF As String
Dim sTipoECF As String
Dim sModeloECF As String
Dim sVersaoSB As String
Dim dtDataInstalacaoSB As Date
Dim sHoraInstalacaoSB As String
Dim sCNPJUsuario As String
Dim iNumeroUsuario As Integer
Dim dtDataUltimaReducaoZ As Date
Dim dtDataUltimoMovimento As Date
Dim sIEUsuario As String
Dim sRegistro As String
Dim lTentaAcessoArquivo As Long
Dim sSequencial As String
Dim objLojaArqFisMestre As New ClassLojaArqFisMestre
Dim colLojaArqFisAnalitico As New Collection
Dim objUltimaReducao As New ClassUltimaReducao
Dim objMovCaixa As New ClassMovimentoCaixa
Dim sRegistro1 As String
Dim sRegistro2 As String
Dim objAliquota As ClassAliquotaICMS
Dim sTotalizadorParcial As String
Dim alComando(1 To 15) As Long
Dim tR01 As typeR01
Dim tR02 As typeR02
Dim tR03 As typeR03
Dim tR04 As typeR04
Dim tR05 As typeR05
Dim tR06 As typeR06
Dim tR07 As typeR07
Dim sZerosQtde As String
Dim sZerosValor As String
Dim sRegistroEAD As String
Dim sEAD As String
Dim sTexto As String
Dim iR01EAD As Integer
Dim lTotRegR02 As Long
Dim lTotRegR03 As Long
Dim lTotRegR04 As Long
Dim lTotRegR05 As Long
Dim lTotRegR06 As Long
Dim lTotRegR07 As Long
Dim iIndice As Integer
Dim tR01_1 As typeR01


On Error GoTo Erro_MovimentoPorECF_Grava1


   'Abre os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_AbrirExt(glConexaoPAFECF)
        If alComando(iIndice) = 0 Then gError 207203
    Next

    lErro = Comando_Executar(alComando(9), "SELECT SUM(TotRegR02), SUM(TotRegR03), SUM(TotRegR04), SUM(TotRegR05), SUM(TotRegR06), SUM(TotRegR07) " & _
        "  FROM R01 WHERE NumeroSerie = ? AND Data >= ? AND Data <= ?", _
        tR01_1.lTotRegR02, tR01_1.lTotRegR03, tR01_1.lTotRegR04, tR01_1.lTotRegR05, tR01_1.lTotRegR06, tR01_1.lTotRegR07, _
        sNumeroSerie, dtDataIni, dtDataFim)
    If lErro <> AD_SQL_SUCESSO Then gError 210391

    lErro = Comando_BuscarPrimeiro(alComando(9))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210392


    'Conta os registros R02
    lErro = Comando_Executar(alComando(10), "SELECT Count(*) " & _
    " FROM R02 WHERE NumeroSerie = ?  AND DataMovimento >= ? AND DataMovimento <= ? ", _
       lTotRegR02, sNumeroSerie, dtDataIni, dtDataFim)
    If lErro <> AD_SQL_SUCESSO Then gError 210379

    lErro = Comando_BuscarPrimeiro(alComando(10))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210380

    'Conta os registros R03
    lErro = Comando_Executar(alComando(11), "SELECT Count(*) " & _
    " FROM R03 WHERE NumeroSerie = ? AND DataMovimento >= ? AND DataMovimento <= ? ", _
       lTotRegR03, sNumeroSerie, dtDataIni, dtDataFim)
    If lErro <> AD_SQL_SUCESSO Then gError 210381

    lErro = Comando_BuscarPrimeiro(alComando(11))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210382

    'Conta os registros R04
    lErro = Comando_Executar(alComando(12), "SELECT Count(*) " & _
    " FROM R04 WHERE NumeroSerie = ? AND DataMovimento >= ? AND DataMovimento <= ? ", _
       lTotRegR04, sNumeroSerie, dtDataIni, dtDataFim)
    If lErro <> AD_SQL_SUCESSO Then gError 210383

    lErro = Comando_BuscarPrimeiro(alComando(12))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210384

    'Conta os registros R05
    lErro = Comando_Executar(alComando(13), "SELECT Count(*) " & _
    " FROM R05 WHERE NumeroSerie = ? AND DataMovimento >= ? AND DataMovimento <= ? ", _
       lTotRegR05, sNumeroSerie, dtDataIni, dtDataFim)
    If lErro <> AD_SQL_SUCESSO Then gError 210385

    lErro = Comando_BuscarPrimeiro(alComando(13))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210386

    'Conta os registros R06
    lErro = Comando_Executar(alComando(14), "SELECT Count(*) " & _
    " FROM R06 WHERE NumeroSerie = ? AND DataMovimento >= ? AND DataMovimento <= ? ", _
       lTotRegR06, sNumeroSerie, dtDataIni, dtDataFim)
    If lErro <> AD_SQL_SUCESSO Then gError 210387

    lErro = Comando_BuscarPrimeiro(alComando(14))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210388

    'Conta os registros R07
    lErro = Comando_Executar(alComando(15), "SELECT Count(*) " & _
    " FROM R07 WHERE NumeroSerie = ? AND DataMovimento >= ? AND DataMovimento <= ? ", _
       lTotRegR07, sNumeroSerie, dtDataIni, dtDataFim)
    If lErro <> AD_SQL_SUCESSO Then gError 210389

    lErro = Comando_BuscarPrimeiro(alComando(15))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210390

    tR01.sCodNacId = String(R01_CODNACID, 0)
    tR01.sNumeroSerie = String(R01_NUMEROSERIE, 0)
    tR01.sMFAdicional = String(R01_MFADICIONAL, 0)
    tR01.sTipoECF = String(R01_TIPOECF, 0)
    tR01.sMarcaECF = String(R01_MARCAECF, 0)
    tR01.sModeloECF = String(R01_MODELOECF, 0)
    tR01.sVersaoSB = String(R01_VERSAOSB, 0)
    tR01.sCNPJUsu = String(R01_CNPJUSU, 0)
    tR01.sIEUsu = String(R01_IEUSU, 0)
    tR01.sCNPJDesenv = String(R01_CNPJDESENV, 0)
    tR01.sIEDesenv = String(R01_IEDESENV, 0)
    tR01.sIMDesenv = String(R01_IMDESENV, 0)
    tR01.sNomeDesenv = String(R01_NOMEDESENV, 0)
    tR01.sNomePAFECF = String(R01_NOMEPAFECF, 0)
    tR01.sVersaoPAFECF = String(R01_VERSAOPAFECF, 0)
    tR01.sMD5PAFECF = String(R01_MD5PAFECF, 0)
    tR01.sVersaoEspecPAFECF = String(R01_VERSAOESPECPAFECF, 0)
    tR01.sEAD = String(R01_EAD, 0)
    tR01.sHoraInstalacaoSB = String(R01_HORAINSTALACAOSB, 0)

'lErro = Comando_Executar(alComando(1), "SELECT Data, CodNacId, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, VersaoSB, DataInstalacaoSB, HoraInstalacaoSB, " & _
'    "SequencialECF, CNPJUsu, InscEstadualUsu, CNPJDesenv, InscEstadualDesenv, InscMunicipalDesenv, " & _
'    " NomeDesenv, NomePAFECF, VersaoPAFECF, CodigoMD5,  VersaoERPAFECF, EAD, " & _
'    "TotRegR02, TotRegR03, TotRegR04, TotRegR05, TotRegR06, TotRegR07 FROM R01 WHERE NumeroSerie = ? AND Data >= ? AND Data <= ? ORDER BY Data", _
'        tR01.dtData, tR01.sCodNacID, tR01.sNumeroSerie, tR01.sMFAdicional, tR01.sTipoECF, tR01.sMarcaECF, tR01.sModeloECF, tR01.sVersaoSB, tR01.dtDataInstalacaoSB, _
'        tR01.dtHoraInstalacaoSB, tR01.iSequencialECF, tR01.sCNPJUsu, tR01.sIEUsu, tR01.sCNPJDesenv, tR01.sIEDesenv, tR01.sIMDesenv, _
'        tR01.sNomeDesenv, tR01.sNomePAFECF, tR01.sVersaoPAFECF, tR01.sMD5PAFECF, tR01.sVersaoEspecPAFECF, tR01.sEAD, _
'        tR01.lTotRegR02, tR01.lTotRegR03, tR01.lTotRegR04, tR01.lTotRegR05, tR01.lTotRegR06, tR01.lTotRegR07, _
'        sNumeroSerie, dtDataIni, dtDataFim)
    
    'Le o registro R01
    lErro = Comando_Executar(alComando(1), "SELECT Data, CodNacId, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, VersaoSB, DataInstalacaoSB, HoraInstalacaoSB, " & _
    "SequencialECF, CNPJUsu, InscEstadualUsu, CNPJDesenv, InscEstadualDesenv, InscMunicipalDesenv, " & _
    " NomeDesenv, NomePAFECF, VersaoPAFECF, CodigoMD5,  VersaoERPAFECF, EAD, " & _
    "TotRegR02, TotRegR03, TotRegR04, TotRegR05, TotRegR06, TotRegR07 FROM R01 WHERE NumeroSerie = ? AND Data >= ? AND Data <= ? ORDER BY Data", _
        tR01.dtData, tR01.sCodNacId, tR01.sNumeroSerie, tR01.sMFAdicional, tR01.sTipoECF, tR01.sMarcaECF, tR01.sModeloECF, tR01.sVersaoSB, tR01.dtDataInstalacaoSB, tR01.sHoraInstalacaoSB, _
        tR01.iSequencialECF, tR01.sCNPJUsu, tR01.sIEUsu, tR01.sCNPJDesenv, tR01.sIEDesenv, tR01.sIMDesenv, _
        tR01.sNomeDesenv, tR01.sNomePAFECF, tR01.sVersaoPAFECF, tR01.sMD5PAFECF, tR01.sVersaoEspecPAFECF, tR01.sEAD, _
        tR01.lTotRegR02, tR01.lTotRegR03, tR01.lTotRegR04, tR01.lTotRegR05, tR01.lTotRegR06, tR01.lTotRegR07, _
        sNumeroSerie, dtDataIni, dtDataFim)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210376

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210377

    iR01EAD = 0

    Do While lErro = AD_SQL_SUCESSO

        sTexto = tR01.dtData & tR01.sNumeroSerie & tR01.sMFAdicional & tR01.sTipoECF & tR01.sMarcaECF & tR01.sModeloECF & tR01.sVersaoSB & tR01.dtDataInstalacaoSB & tR01.sHoraInstalacaoSB & tR01.iSequencialECF & tR01.sCNPJUsu & tR01.sIEUsu & tR01.sCNPJDesenv & tR01.sIEDesenv & tR01.sIMDesenv & tR01.sNomeDesenv & tR01.sNomePAFECF & tR01.sVersaoPAFECF & tR01.sMD5PAFECF & tR01.sVersaoEspecPAFECF & tR01.sCodNacId
        sTexto = sTexto & tR01.lTotRegR02 & tR01.lTotRegR03 & tR01.lTotRegR04 & tR01.lTotRegR05 & tR01.lTotRegR06 & tR01.lTotRegR07
        
        
        lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
        If lErro <> SUCESSO Then gError 210350

        If tR01.sEAD <> sEAD Then
            iR01EAD = 1
        End If

        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210378

    Loop

    tR01.sCodNacId = String(R01_CODNACID, 0)
    tR01.sNumeroSerie = String(R01_NUMEROSERIE, 0)
    tR01.sMFAdicional = String(R01_MFADICIONAL, 0)
    tR01.sTipoECF = String(R01_TIPOECF, 0)
    tR01.sMarcaECF = String(R01_MARCAECF, 0)
    tR01.sModeloECF = String(R01_MODELOECF, 0)
    tR01.sVersaoSB = String(R01_VERSAOSB, 0)
    tR01.sCNPJUsu = String(R01_CNPJUSU, 0)
    tR01.sIEUsu = String(R01_IEUSU, 0)
    tR01.sCNPJDesenv = String(R01_CNPJDESENV, 0)
    tR01.sIEDesenv = String(R01_IEDESENV, 0)
    tR01.sIMDesenv = String(R01_IMDESENV, 0)
    tR01.sNomeDesenv = String(R01_NOMEDESENV, 0)
    tR01.sNomePAFECF = String(R01_NOMEPAFECF, 0)
    tR01.sVersaoPAFECF = String(R01_VERSAOPAFECF, 0)
    tR01.sMD5PAFECF = String(R01_MD5PAFECF, 0)
    tR01.sVersaoEspecPAFECF = String(R01_VERSAOESPECPAFECF, 0)
    tR01.sEAD = String(R01_EAD, 0)
    tR01.sHoraInstalacaoSB = String(R01_HORAINSTALACAOSB, 0)

    'Le o registro R01
    lErro = Comando_Executar(alComando(1), "SELECT Data, CodNacId, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, VersaoSB, DataInstalacaoSB, HoraInstalacaoSB, " & _
    "SequencialECF, CNPJUsu, InscEstadualUsu, CNPJDesenv, InscEstadualDesenv, InscMunicipalDesenv, " & _
    " NomeDesenv, NomePAFECF, VersaoPAFECF, CodigoMD5,  VersaoERPAFECF, EAD FROM R01 WHERE NumeroSerie = ? AND Data >= ? AND Data <= ? ORDER BY Data", _
        tR01.dtData, tR01.sCodNacId, tR01.sNumeroSerie, tR01.sMFAdicional, tR01.sTipoECF, tR01.sMarcaECF, tR01.sModeloECF, tR01.sVersaoSB, tR01.dtDataInstalacaoSB, _
        tR01.sHoraInstalacaoSB, tR01.iSequencialECF, tR01.sCNPJUsu, tR01.sIEUsu, tR01.sCNPJDesenv, tR01.sIEDesenv, tR01.sIMDesenv, _
        tR01.sNomeDesenv, tR01.sNomePAFECF, tR01.sVersaoPAFECF, tR01.sMD5PAFECF, tR01.sVersaoEspecPAFECF, tR01.sEAD, sNumeroSerie, dtDataIni, dtDataFim)
    If lErro <> AD_SQL_SUCESSO Then gError 207204

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 207205
    
    If lErro = AD_SQL_SEM_DADOS Then gError 207206
    
'    sArquivo = gsDirMVTEF & Formata_Campo(ALINHAMENTO_DIREITA, 6, " ", tR01.sCodNacID) & Format(right(tR01.sNumeroSerie, 14), "00000000000000")
'
'    sArquivo = sArquivo & Format(Date, "ddmmyyyy") & ".txt"
'
'    sArquivo1 = Dir(sArquivo)
'
'    'se o arquivo existir ==> remove o arquivo
'    If Len(sArquivo1) > 0 Then ECF_Apaga_Arquivo (sArquivo)
'
'    'abre o arquivo q sera gerado
'    Open sArquivo For Append As #7

    

    sRegistro = "R01" & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR01.sNumeroSerie) & Format(tR01.sMFAdicional, "@")
    sRegistro = sRegistro & Formata_Campo(ALINHAMENTO_DIREITA, 7, " ", tR01.sTipoECF) & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR01.sMarcaECF)
    sRegistro = sRegistro & IIf(iR01EAD = 1, Replace(Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR01.sModeloECF), " ", "?"), Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR01.sModeloECF)) & Formata_Campo(ALINHAMENTO_DIREITA, 10, " ", tR01.sVersaoSB)
    sRegistro = sRegistro & Format(tR01.dtDataInstalacaoSB, "yyyymmdd") & Format(CDate(tR01.sHoraInstalacaoSB), "hhmmss") & Format(tR01.iSequencialECF, "000")
    sRegistro = sRegistro & Formata_Campo(ALINHAMENTO_DIREITA, 14, "0", tR01.sCNPJUsu) & Formata_Campo(ALINHAMENTO_DIREITA, 14, " ", tR01.sIEUsu)
    sRegistro = sRegistro & Formata_Campo(ALINHAMENTO_DIREITA, 14, "0", tR01.sCNPJDesenv) & Formata_Campo(ALINHAMENTO_DIREITA, 14, " ", tR01.sIEDesenv) & Formata_Campo(ALINHAMENTO_DIREITA, 14, "0", tR01.sIMDesenv)
    sRegistro = sRegistro & IIf(tR01_1.lTotRegR02 <> lTotRegR02 Or tR01_1.lTotRegR03 <> lTotRegR03 Or tR01_1.lTotRegR04 <> lTotRegR04 Or tR01_1.lTotRegR05 <> lTotRegR05 Or tR01_1.lTotRegR06 <> lTotRegR06 Or tR01_1.lTotRegR07 <> lTotRegR07, Replace(Formata_Campo(ALINHAMENTO_DIREITA, 40, " ", tR01.sNomeDesenv), " ", "?"), Formata_Campo(ALINHAMENTO_DIREITA, 40, " ", tR01.sNomeDesenv))
    sRegistro = sRegistro & Formata_Campo(ALINHAMENTO_DIREITA, 40, " ", tR01.sNomePAFECF)
    sRegistro = sRegistro & Formata_Campo(ALINHAMENTO_DIREITA, 10, " ", tR01.sVersaoPAFECF) & Formata_Campo(ALINHAMENTO_DIREITA, 32, " ", tR01.sMD5PAFECF)
    sRegistro = sRegistro & Format(dtDataIni, "yyyymmdd") & Format(dtDataFim, "yyyymmdd") & Formata_Campo(ALINHAMENTO_DIREITA, 4, " ", tR01.sVersaoEspecPAFECF)
    
    'Inseri no Arquivo
    Print #7, sRegistro
        
        
    tR02.sIncidenciaDescontoISS = String(R02_INCIDENCIADESCONTOISS, 0)
    tR02.sNumeroSerie = String(R01_NUMEROSERIE, 0)
    tR02.sMFAdicional = String(R01_MFADICIONAL, 0)
    tR02.sModeloECF = String(R01_MODELOECF, 0)
    tR02.sTipoECF = String(R01_TIPOECF, 0)
    tR02.sMarcaECF = String(R01_MARCAECF, 0)
    tR02.sEAD = String(R02_EAD, 0)
    tR02.sHoraEmissaoRedZ = String(R02_HORAREDUCAOZ, 0)

    'Le os registros R02
    lErro = Comando_Executar(alComando(2), "SELECT NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, DataMovimento, NumeroUsuario, CRZ, COO, CRO, DataEmissaoRedZ, HoraEmissaoRedZ, VendaBruta, IncidenciaDescontoISS, EAD " & _
    " FROM R02 WHERE NumeroSerie = ? AND DataMovimento >= ? AND DataMovimento <= ? ORDER BY NumeroSerie, ModeloEcf, NumeroUsuario, CRZ, CRO", _
    tR02.sNumeroSerie, tR02.sMFAdicional, tR02.sTipoECF, tR02.sMarcaECF, tR02.sModeloECF, tR02.dtDataMovimento, tR02.iNumeroUsuario, tR02.lCRZ, tR02.lCOO, tR02.lCRO, tR02.dtDataEmissaoRedZ, tR02.sHoraEmissaoRedZ, tR02.dVendaBruta, tR02.sIncidenciaDescontoISS, tR02.sEAD, _
        sNumeroSerie, dtDataIni, dtDataFim)
    If lErro <> AD_SQL_SUCESSO Then gError 207207

    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 207208
        
    Do While lErro = AD_SQL_SUCESSO
        
        'trata registro 02
        
        sTexto = tR02.dtDataMovimento & tR02.sNumeroSerie & tR02.sMFAdicional & tR02.sTipoECF & tR02.sMarcaECF & tR02.sModeloECF & tR02.iNumeroUsuario & tR02.lCRZ & tR02.lCOO & tR02.lCRO & tR02.dtDataEmissaoRedZ & tR02.sHoraEmissaoRedZ & tR02.dVendaBruta & tR02.sIncidenciaDescontoISS
        
        
        lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
        If lErro <> SUCESSO Then gError 210351
        
        
        sRegistro1 = "R02" & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR02.sNumeroSerie) & Format(tR02.sMFAdicional, "@")
        sRegistro1 = sRegistro1 & IIf(tR02.sEAD <> sEAD, Replace(Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR02.sModeloECF), " ", "?"), Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR02.sModeloECF)) & Format(tR02.iNumeroUsuario, "00")
        sRegistro1 = sRegistro1 & Format(tR02.lCRZ, "000000") & Format(tR02.lCOO, "000000")
        sRegistro1 = sRegistro1 & Format(tR02.lCRO, "000000") & Format(tR02.dtDataMovimento, "yyyymmdd")
        sRegistro1 = sRegistro1 & Format(tR02.dtDataEmissaoRedZ, "yyyymmdd") & Format(CDate(tR02.sHoraEmissaoRedZ), "hhmmss")
        sRegistro1 = sRegistro1 & Format(CDbl(Format(tR02.dVendaBruta, "Fixed")) * 100, "00000000000000") & objUltimaReducao.sIncidenciaDescontoISS
        
        'Inseri no Arquivo
        Print #7, sRegistro1
        
        lErro = Comando_BuscarProximo(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 207209
        
    Loop
           
           

    tR03.sTotalizadorParcial = String(R03_TOTALIZADORPARCIAL, 0)
    tR03.sNumeroSerie = String(R01_NUMEROSERIE, 0)
    tR03.sMFAdicional = String(R01_MFADICIONAL, 0)
    tR03.sTipoECF = String(R01_TIPOECF, 0)
    tR03.sMarcaECF = String(R01_MARCAECF, 0)
    tR03.sModeloECF = String(R01_MODELOECF, 0)
    tR03.sEAD = String(R03_EAD, 0)
        
    'Le os registros R03
    lErro = Comando_Executar(alComando(3), "SELECT NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, DataMovimento, NumeroUsuario, CRZ, TotalizadorParcial, Valor, EAD " & _
    " FROM R03 WHERE  NumeroSerie = ? AND DataMovimento >= ? AND DataMovimento <= ? ORDER BY NumeroSerie, ModeloECF, NumeroUsuario, CRZ, TotalizadorParcial ", _
    tR03.sNumeroSerie, tR03.sMFAdicional, tR03.sTipoECF, tR03.sMarcaECF, tR03.sModeloECF, tR03.dtDataMovimento, tR03.iNumeroUsuario, tR03.lCRZ, tR03.sTotalizadorParcial, tR03.dValor, tR03.sEAD, _
        sNumeroSerie, dtDataIni, dtDataFim)
    If lErro <> AD_SQL_SUCESSO Then gError 207210

    lErro = Comando_BuscarPrimeiro(alComando(3))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 207211
        
    Do While lErro = AD_SQL_SUCESSO
        
        'trata registro 03
        
        sTexto = tR03.dtDataMovimento & tR03.sNumeroSerie & tR03.sMFAdicional & tR03.sTipoECF & tR03.sMarcaECF & tR03.sModeloECF & tR03.iNumeroUsuario & tR03.lCRZ & tR03.sTotalizadorParcial & tR03.dValor
        
        lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
        If lErro <> SUCESSO Then gError 210352
        
        
        sRegistro1 = "R03" & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR03.sNumeroSerie) & Format(tR03.sMFAdicional, "@")
        sRegistro1 = sRegistro1 & IIf(tR03.sEAD <> sEAD, Replace(Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR03.sModeloECF), " ", "?"), Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR03.sModeloECF)) & Format(tR03.iNumeroUsuario, "00")
        sRegistro1 = sRegistro1 & Format(tR03.lCRZ, "000000") & Formata_Campo(ALINHAMENTO_DIREITA, 7, " ", tR03.sTotalizadorParcial)
        sRegistro1 = sRegistro1 & Format(CDbl(Format(tR03.dValor, "Fixed")) * 100, "0000000000000")
        
        'Inseri no Arquivo
        Print #7, sRegistro1
        
        lErro = Comando_BuscarProximo(alComando(3))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 207212
        
    Loop
    
    tR04.sNumeroSerie = String(R01_NUMEROSERIE, 0)
    tR04.sMFAdicional = String(R01_MFADICIONAL, 0)
    tR04.sTipoECF = String(R01_TIPOECF, 0)
    tR04.sMarcaECF = String(R01_MARCAECF, 0)
    tR04.sModeloECF = String(R01_MODELOECF, 0)
    tR04.sTipoDesconto = String(R04_TIPODESCONTO, 0)
    tR04.sTipoAcrescimo = String(R04_TIPOACRESCIMO, 0)
    tR04.sIndicadorCancelamento = String(R04_INDICADORCANCELAMENTO, 0)
    tR04.sOrdemDescAcresc = String(R04_ORDEMDESCACRESC, 0)
    tR04.sNomeAdiquirente = String(R04_NOMEADQUIRENTE, 0)
    tR04.sCPFCNPJ = String(R04_CPFCNPJ, 0)
    tR04.sEAD = String(R04_EAD, 0)
    
    
    'seleciona os registros R04 ordenados por CCF para insercao no arquivo
    lErro = Comando_Executar(alComando(5), "SELECT DataMovimento, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, NumeroUsuario, CCF, COO, DataEmissao, Subtotal, Desconto, TipoDesconto, Acrescimo, TipoAcrescimo, ValorTotal, IndicadorCancelamento, ValorCancAcrescimo, OrdemDescAcresc, NomeAdiquirente, CPFCNPJ, EAD FROM R04 WHERE NumeroSerie = ? AND DataMovimento >= ? AND DataMovimento <= ?  ORDER BY NumeroSerie, ModeloECF, NumeroUsuario, CCF, EAD", _
    tR04.dtDataMovimento, tR04.sNumeroSerie, tR04.sMFAdicional, tR04.sTipoECF, tR04.sMarcaECF, tR04.sModeloECF, tR04.iNumeroUsuario, tR04.lCCF, tR04.lCOO, tR04.dtDataEmissao, tR04.dSubtotal, tR04.dDesconto, tR04.sTipoDesconto, tR04.dAcrescimo, tR04.sTipoAcrescimo, tR04.dValorTotal, tR04.sIndicadorCancelamento, tR04.dValorCancAcrescimo, tR04.sOrdemDescAcresc, tR04.sNomeAdiquirente, tR04.sCPFCNPJ, tR04.sEAD, sNumeroSerie, dtDataIni, dtDataFim)
    If lErro <> AD_SQL_SUCESSO Then gError 207213
    

    lErro = Comando_BuscarPrimeiro(alComando(5))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 207214
    
    Do While lErro = AD_SQL_SUCESSO
    
        sTexto = tR04.dtDataMovimento & tR04.sNumeroSerie & tR04.sMFAdicional & tR04.sTipoECF & tR04.sMarcaECF & tR04.sModeloECF & tR04.iNumeroUsuario & _
            tR04.lCCF & tR04.lCOO & tR04.dtDataEmissao & tR04.dSubtotal & tR04.dDesconto & tR04.sTipoDesconto & tR04.dAcrescimo & tR04.sTipoAcrescimo & tR04.dValorTotal & tR04.sIndicadorCancelamento & tR04.dValorCancAcrescimo & tR04.sOrdemDescAcresc & tR04.sNomeAdiquirente & tR04.sCPFCNPJ
        
        lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
        If lErro <> SUCESSO Then gError 210362
    
    
        sRegistro1 = "R04" & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR04.sNumeroSerie) & Format(tR04.sMFAdicional, "@")
        sRegistro1 = sRegistro1 & IIf(tR04.sEAD <> sEAD, Replace(Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR04.sModeloECF), " ", "?"), Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR04.sModeloECF)) & Format(tR04.iNumeroUsuario, "00")
        sRegistro1 = sRegistro1 & Format(tR04.lCCF, "000000") & Format(tR04.lCOO, "000000")
        sRegistro1 = sRegistro1 & Format(tR04.dtDataEmissao, "yyyymmdd") & Format(CDbl(Format(tR04.dSubtotal, "Fixed")) * 100, "00000000000000")
        sRegistro1 = sRegistro1 & Format(CDbl(Format(tR04.dDesconto, "Fixed")) * 100, "0000000000000") & tR04.sTipoDesconto
        sRegistro1 = sRegistro1 & Format(CDbl(Format(tR04.dAcrescimo, "Fixed")) * 100, "0000000000000") & tR04.sTipoAcrescimo
        sRegistro1 = sRegistro1 & Format(CDbl(Format(tR04.dValorTotal, "Fixed")) * 100, "00000000000000") & tR04.sIndicadorCancelamento & Format(CDbl(Format(tR04.dValorCancAcrescimo, "Fixed")) * 100, "0000000000000")
        sRegistro1 = sRegistro1 & tR04.sOrdemDescAcresc & Formata_Campo(ALINHAMENTO_DIREITA, 40, " ", tR04.sNomeAdiquirente)
        sRegistro1 = sRegistro1 & Formata_Campo(ALINHAMENTO_ESQUERDA, 14, "0", tR04.sCPFCNPJ)
    
        Print #7, sRegistro1
    
        lErro = Comando_BuscarProximo(alComando(5))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 207215
    
    Loop
    
    
    tR05.sNumeroSerie = String(R01_NUMEROSERIE, 0)
    tR05.sMFAdicional = String(R01_MFADICIONAL, 0)
    tR05.sModeloECF = String(R01_MODELOECF, 0)
    tR05.sCodProduto = String(R05_CODPRODUTO, 0)
    tR05.sDescProduto = String(R05_DESCPRODUTO, 0)
    tR05.sUM = String(R05_UM, 0)
    tR05.sTotalizadorParcial = String(R05_TOTALIZADORPARCIAL, 0)
    tR05.sIndicadorCancelamento = String(R05_INDICADORCANCELAMENTO, 0)
    tR05.sIAT = String(R05_IAT, 0)
    tR05.sPPT = String(R05_PPT, 0)
    tR05.sEAD = String(R05_EAD, 0)
    
    tR05.sTipoECF = String(R01_TIPOECF, 0)
    tR05.sMarcaECF = String(R01_MARCAECF, 0)
    
    
    'seleciona os registros R05 ordenados por CCF para insercao no arquivo
    lErro = Comando_Executar(alComando(6), "SELECT DataMovimento, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, NumeroUsuario, COO, Item, CCF, CodProduto, DescProduto, Quantidade, ValorUnitario, Desconto, Acrescimo, " & _
    " ValorTotal, TotalizadorParcial, IndicadorCancelamento, QuantidadeCancelada, ValorCancelado, ValorCancelAcrescimo, IAT, PPT, Casasdecimaisqtde, Casasdecimaisvalor, UM, EAD FROM R05 WHERE NumeroSerie = ? AND DataMovimento >= ? AND DataMovimento <= ? ORDER BY NumeroSerie, ModeloECF, NumeroUsuario, CCF, Item", _
    tR05.dtDataMovimento, tR05.sNumeroSerie, tR05.sMFAdicional, tR05.sTipoECF, tR05.sMarcaECF, tR05.sModeloECF, tR05.iNumeroUsuario, tR05.lCOO, tR05.iItem, tR05.lCCF, tR05.sCodProduto, tR05.sDescProduto, tR05.dQuantidade, tR05.dValorUnitario, tR05.dDesconto, tR05.dAcrescimo, tR05.dValorTotal, tR05.sTotalizadorParcial, tR05.sIndicadorCancelamento, tR05.dQuantidadeCancelada, tR05.dValorCancelado, tR05.dValorCancelAcrescimo, tR05.sIAT, tR05.sPPT, tR05.iCasasdecimaisqtde, tR05.iCasasdecimaisvalor, tR05.sUM, tR05.sEAD, sNumeroSerie, dtDataIni, dtDataFim)
    If lErro <> AD_SQL_SUCESSO Then gError 207216
    
    lErro = Comando_BuscarPrimeiro(alComando(6))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 207217
    
    Do While lErro = AD_SQL_SUCESSO
    
        For iIndice = 1 To tR05.iCasasdecimaisqtde
            sZerosQtde = sZerosQtde & "0"
        Next
    
        For iIndice = 1 To tR05.iCasasdecimaisvalor
            sZerosValor = sZerosValor & "0"
        Next
    
        sTexto = tR05.dtDataMovimento & tR05.sNumeroSerie & tR05.sMFAdicional & tR05.sTipoECF & tR05.sMarcaECF & tR05.sModeloECF & tR05.iNumeroUsuario & _
            tR05.lCCF & tR05.lCOO & tR05.iItem & tR05.sCodProduto & tR05.sDescProduto & tR05.dQuantidade & _
            tR05.sUM & tR05.dValorUnitario & tR05.dDesconto & tR05.dAcrescimo & tR05.dValorTotal & _
            tR05.sTotalizadorParcial & tR05.sIndicadorCancelamento & tR05.dQuantidadeCancelada & tR05.dValorCancelado & tR05.dValorCancelAcrescimo & tR05.sIAT & tR05.sPPT & tR05.iCasasdecimaisqtde & tR05.iCasasdecimaisvalor

        
        lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
        If lErro <> SUCESSO Then gError 210348
    
        sRegistro1 = "R05" & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR05.sNumeroSerie) & Format(tR05.sMFAdicional, "@")
        sRegistro1 = sRegistro1 & IIf(tR05.sEAD <> sEAD, Replace(Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR05.sModeloECF), " ", "?"), Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR05.sModeloECF)) & Format(tR05.iNumeroUsuario, "00")
        sRegistro1 = sRegistro1 & Format(tR05.lCOO, "000000") & Format(tR05.lCCF, "000000")
        sRegistro1 = sRegistro1 & Format(tR05.iItem, "000") & Formata_Campo(ALINHAMENTO_DIREITA, 14, " ", tR05.sCodProduto)
        sRegistro1 = sRegistro1 & Formata_Campo(ALINHAMENTO_DIREITA, 100, " ", tR05.sDescProduto) & Format(CDbl(Format(tR05.dQuantidade, "0." & sZerosQtde)) * (10 ^ tR05.iCasasdecimaisqtde), "0000000")
        sRegistro1 = sRegistro1 & Formata_Campo(ALINHAMENTO_DIREITA, 3, " ", tR05.sUM) & Format(CDbl(Format(tR05.dValorUnitario, "0." & sZerosValor)) * (10 ^ tR05.iCasasdecimaisvalor), "00000000") & Format(CDbl(Format(tR05.dDesconto, "Fixed")) * 100, "00000000")
        sRegistro1 = sRegistro1 & Format(CDbl(Format(tR05.dAcrescimo, "Fixed")) * 100, "00000000") & Format(CDbl(Format(tR05.dValorTotal, "Fixed")) * 100, "00000000000000")
        sRegistro1 = sRegistro1 & Formata_Campo(ALINHAMENTO_DIREITA, 7, " ", tR05.sTotalizadorParcial) & tR05.sIndicadorCancelamento
        sRegistro1 = sRegistro1 & Format(tR05.dQuantidadeCancelada, "0000000") & Format(CDbl(Format(tR05.dValorCancelado, "Fixed")) * 100, "0000000000000") & Format(CDbl(Format(tR05.dValorCancelAcrescimo, "Fixed")) * 100, "0000000000000") & tR05.sIAT & tR05.sPPT & Format(tR05.iCasasdecimaisqtde, "0") & Format(tR05.iCasasdecimaisvalor, "0")
        
        Print #7, sRegistro1
    
        lErro = Comando_BuscarProximo(alComando(6))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 207218
    
    Loop
    
    tR06.sNumeroSerie = String(R01_NUMEROSERIE, 0)
    tR06.sMFAdicional = String(R01_MFADICIONAL, 0)
    tR06.sModeloECF = String(R01_MODELOECF, 0)
    tR06.sDenominacao = String(R06_DENOMINACAO, 0)
    tR06.sEAD = String(R06_EAD, 0)
    
    tR06.sTipoECF = String(R01_TIPOECF, 0)
    tR06.sMarcaECF = String(R01_MARCAECF, 0)
    tR06.sHoraFinalEmissao = String(R06_HORAFINALEMISSAO, 0)
    
    'seleciona os registros R06 ordenados por COO para insercao no arquivo
    lErro = Comando_Executar(alComando(7), "SELECT DataMovimento, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, NumeroUsuario, COO, GNF, GRG, CDC, denominacao, datafinalemissao, horafinalemissao, EAD " & _
    "  FROM R06 WHERE NumeroSerie = ? AND DataMovimento >= ? AND DataMovimento >= ? ORDER BY NumeroSerie, ModeloECF, NumeroUsuario, COO", _
    tR06.dtDataMovimento, tR06.sNumeroSerie, tR06.sMFAdicional, tR06.sTipoECF, tR06.sMarcaECF, tR06.sModeloECF, tR06.iNumeroUsuario, tR06.lCOO, tR06.lGNF, tR06.lGRG, tR06.lCDC, tR06.sDenominacao, tR06.dtDataFinalEmissao, tR06.sHoraFinalEmissao, tR06.sEAD, sNumeroSerie, dtDataIni, dtDataFim)
    If lErro <> AD_SQL_SUCESSO Then gError 207219
    
    lErro = Comando_BuscarPrimeiro(alComando(7))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 207220
    
    Do While lErro = AD_SQL_SUCESSO
    
        sTexto = tR06.dtDataMovimento & tR06.sNumeroSerie & tR06.sMFAdicional & tR06.sTipoECF & tR06.sMarcaECF & tR06.sModeloECF & tR06.iNumeroUsuario & _
            tR06.lCOO & tR06.lGNF & tR06.lGRG & tR06.lCDC & tR06.sDenominacao & tR06.dtDataFinalEmissao & tR06.sHoraFinalEmissao
    
    
        lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
        If lErro <> SUCESSO Then gError 210363
    
        sRegistro1 = "R06" & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR06.sNumeroSerie) & Format(tR06.sMFAdicional, "@")
        sRegistro1 = sRegistro1 & IIf(tR06.sEAD <> sEAD, Replace(Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR06.sModeloECF), " ", "?"), Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR06.sModeloECF)) & Format(tR06.iNumeroUsuario, "00")
        sRegistro1 = sRegistro1 & Format(tR06.lCOO, "000000") & Format(tR06.lGNF, "000000") & Format(tR06.lGRG, "000000")
        sRegistro1 = sRegistro1 & Format(tR06.lCDC, "0000") & Formata_Campo(ALINHAMENTO_DIREITA, 2, " ", tR06.sDenominacao)
        sRegistro1 = sRegistro1 & Format(tR06.dtDataFinalEmissao, "yyyymmdd") & Format(CDate(tR06.sHoraFinalEmissao), "hhmmss")
        
        Print #7, sRegistro1
    
        lErro = Comando_BuscarProximo(alComando(7))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 207221
    
    Loop
    
    
    tR07.sNumeroSerie = String(R01_NUMEROSERIE, 0)
    tR07.sMFAdicional = String(R01_MFADICIONAL, 0)
    tR07.sModeloECF = String(R01_MODELOECF, 0)
    tR07.sMeioPagamento = String(R07_MEIOPAGAMENTO, 0)
    tR07.sIndicadorEstorno = String(R07_INDICADORESTORNO, 0)
    tR07.sEAD = String(R07_EAD, 0)
    
    tR07.sTipoECF = String(R01_TIPOECF, 0)
    tR07.sMarcaECF = String(R01_MARCAECF, 0)
    
    
    'seleciona os registros R07 ordenados por COO para insercao no arquivo
    lErro = Comando_Executar(alComando(8), "SELECT DataMovimento, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, NumeroUsuario, COO, GNF, CCF, MeioPagamento, Valor, IndicadorEstorno, ValorEstorno, EAD " & _
    "  FROM R07 WHERE NumeroSerie = ? AND DataMovimento >= ? AND DataMovimento <= ?  ORDER BY NumeroSerie, ModeloECF, NumeroUsuario, COO, MeioPagamento", _
    tR07.dtDataMovimento, tR07.sNumeroSerie, tR07.sMFAdicional, tR07.sTipoECF, tR07.sMarcaECF, tR07.sModeloECF, tR07.iNumeroUsuario, tR07.lCOO, tR07.lGNF, tR07.lCCF, tR07.sMeioPagamento, tR07.dValor, tR07.sIndicadorEstorno, tR07.dValorEstorno, tR07.sEAD, sNumeroSerie, dtDataIni, dtDataFim)
    If lErro <> AD_SQL_SUCESSO Then gError 207222
    
    
    lErro = Comando_BuscarPrimeiro(alComando(8))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 207223
    
    Do While lErro = AD_SQL_SUCESSO
    
    
        sTexto = tR07.dtDataMovimento & tR07.sNumeroSerie & tR07.sMFAdicional & tR07.sTipoECF & tR07.sMarcaECF & tR07.sModeloECF & tR07.iNumeroUsuario & _
            tR07.lCOO & tR07.lCCF & tR07.lGNF & tR07.sMeioPagamento & tR07.dValor & tR07.sIndicadorEstorno & tR07.dValorEstorno

        
        lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
        If lErro <> SUCESSO Then gError 210365
    
        sRegistro1 = "R07" & Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR07.sNumeroSerie) & Format(tR07.sMFAdicional, "@")
        sRegistro1 = sRegistro1 & IIf(tR07.sEAD <> sEAD, Replace(Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR07.sModeloECF), " ", "?"), Formata_Campo(ALINHAMENTO_DIREITA, 20, " ", tR07.sModeloECF)) & Format(tR07.iNumeroUsuario, "00")
        sRegistro1 = sRegistro1 & Format(tR07.lCOO, "000000") & Format(tR07.lCCF, "000000") & Format(tR07.lGNF, "000000")
        sRegistro1 = sRegistro1 & Formata_Campo(ALINHAMENTO_DIREITA, R07_MEIOPAGAMENTO, " ", tR07.sMeioPagamento)
        sRegistro1 = sRegistro1 & Format(CDbl(Format(tR07.dValor, "Fixed")) * 100, "0000000000000")
        sRegistro1 = sRegistro1 & tR07.sIndicadorEstorno & Format(CDbl(Format(tR07.dValorEstorno, "Fixed")) * 100, "0000000000000")
        
        Print #7, sRegistro1
    
        lErro = Comando_BuscarProximo(alComando(8))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 207224
    
    Loop
    
    
    Close #7

    lErro = AFRAC_CriaAssinaturaRSA(sArquivo, sRegistroEAD)
    If lErro <> SUCESSO Then gError 207225
    
    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next
    
'    Call MsgBox("Arquivo " & sArquivo & " foi gerado com sucesso.", vbOKOnly, "Movimentos Diários")
    Call Rotina_AvisoECF(vbOKOnly, "Arquivo Eletronico de Registros " & sArquivo & " foi gerado com sucesso.")
    
    
    MovimentoPorECF_Grava1 = SUCESSO

    Exit Function

Erro_MovimentoPorECF_Grava1:

    MovimentoPorECF_Grava1 = gErr
    
    Select Case gErr

        Case 207203
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)

        Case 207204, 207205, 210376 To 210378, 210391, 210392
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_R01, gErr)

        Case 207206
            Call Rotina_ErroECF(vbOKOnly, ERRO_NAO_EXISTE_R01_PERIODO, gErr)

        Case 207207, 207208, 207209, 210379, 210380
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_R02, gErr)

        Case 207210, 207211, 207212, 210381, 210382
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_R03, gErr)

        Case 207213, 207214, 207215, 210383, 210384
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_R04, gErr)

        Case 207216, 207217, 207218, 210385, 210386
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_R05, gErr)
        
        Case 207219, 207220, 207221, 210387, 210388
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_R06, gErr)
        
        Case 207222, 207223, 207224, 210289, 210290
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_R07, gErr)
        
        Case 70
            lTentaAcessoArquivo = lTentaAcessoArquivo + 1
            If lTentaAcessoArquivo < NUM_MAX_LOCK Then Resume
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_LOCADO, gErr, sArquivo)

        Case 207225
            Call Rotina_ErroECF(vbOKOnly, ERRO_GERACAO_ASSINATURA, gErr)

        Case 210350 To 210352, 210362 To 210363, 210365

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 207226)

    End Select
    
    Close #7
    
    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Function Trata_Caixa_So_Orcamento() As Long
'exclui o orcamento contido em objVendaParam

Dim lErro As Long
Dim objVenda As ClassVenda
Dim bAchou As Boolean
Dim sLog As String
Dim lSequencial As Long
Dim colRegistro As New Collection
Dim colOrcamento As New Collection
Dim iIndice As Integer

    Call Rotina_AvisoECF(vbOKOnly, AVISO_CAIXA_SO_ORCAMENTO)
    
    Trata_Caixa_So_Orcamento = SUCESSO
    
End Function

Public Function CCD_Imprime(colMeiosPag As Collection, ByVal objVenda As ClassVenda) As Long

Dim objMovCaixa As ClassMovimentoCaixa
Dim objMovCaixa1 As ClassMovimentoCaixa
Dim objTiposMeiosPagtos As ClassTMPLoja
Dim objAdmMeioPagto As New ClassAdmMeioPagto
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim sSaltaLinha As String
Dim sLinha As String
Dim lErro As Long
Dim iParcelas As Integer
Dim lSequencial As Long
Dim lTransacao As Long


On Error GoTo Erro_CCD_Imprime

    lErro = CF_ECF("Caixa_Transacao_Abrir", lTransacao)
    If lErro <> SUCESSO Then gError 214157

    For Each objMovCaixa1 In colMeiosPag
    
'        If objMovCaixa1.iTipo = TIPOMEIOPAGTOLOJA_CARTAO_CREDITO Then
                
        For Each objTiposMeiosPagtos In gcolTiposMeiosPagtos
            'Se for do tipo procurado
            If objTiposMeiosPagtos.iTipo = objMovCaixa1.iTipo Then Exit For
        Next
            
        If objMovCaixa1.iTipo = TIPOMEIOPAGTOLOJA_CARTAO_CREDITO Or objMovCaixa1.iTipo = TIPOMEIOPAGTOLOJA_CARTAO_DEBITO Then
        
            lErro = AFRAC_AbrirVinculado(objVenda.objCupomFiscal.lNumero, objTiposMeiosPagtos.sDescricao, objMovCaixa1.dValor, 1)
            If lErro <> SUCESSO Then
                lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Abrir Vinculado")
                If lErro <> SUCESSO Then gError 214134
            End If
            
            
            
            For Each objMovCaixa In objVenda.colMovimentosCaixa
            
                If objMovCaixa1.iTipo = TIPOMEIOPAGTOLOJA_CARTAO_CREDITO And objMovCaixa.iTipo = MOVIMENTOCAIXA_RECEB_CARTAOCREDITO Then
            
                    If objMovCaixa.iAdmMeioPagto = 0 Then
                        iParcelas = 0
                        objAdmMeioPagto.sNome = "Cartão Não Especfiicado"
                        objAdmMeioPagtoCondPagto.sNomeParcelamento = "Parcelamento Não Especificado"
                    Else
            
                        For Each objAdmMeioPagto In gcolAdmMeioPagto
                            If objAdmMeioPagto.iCodigo = objMovCaixa.iAdmMeioPagto Then Exit For
                        Next
                        
                        For Each objAdmMeioPagtoCondPagto In objAdmMeioPagto.colCondPagtoLoja
                            If objAdmMeioPagtoCondPagto.iParcelamento = objMovCaixa.iParcelamento Then
                                iParcelas = objAdmMeioPagtoCondPagto.iNumParcelas
                                Exit For
                            End If
                        Next
            
                    End If
            
            
                    sSaltaLinha = Chr(13) + Chr(10) + Chr(13) + Chr(10)
                        
                    lErro = AFRAC_ImprimirVinculado(sSaltaLinha)
                    If lErro <> SUCESSO Then
                        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Vinculado")
                        If lErro <> SUCESSO Then gError 214135
                    End If
            
                    sLinha = Formata_Campo(ALINHAMENTO_CENTRALIZADO, 48, " ", objAdmMeioPagto.sNome)
            
                    lErro = AFRAC_ImprimirVinculado(sLinha)
                    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Vinculado")
                    If lErro <> SUCESSO Then gError 214136
            
                    sLinha = Formata_Campo(ALINHAMENTO_CENTRALIZADO, 48, " ", objAdmMeioPagtoCondPagto.sNomeParcelamento)
            
                    lErro = AFRAC_ImprimirVinculado(sLinha)
                    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Vinculado")
                    If lErro <> SUCESSO Then gError 214137
        
                    sLinha = Formata_Campo(ALINHAMENTO_CENTRALIZADO, 48, " ", "Valor = " & Format(objMovCaixa.dValor, "standard"))
            
                    lErro = AFRAC_ImprimirVinculado(sLinha)
                    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Vinculado")
                    If lErro <> SUCESSO Then gError 214137
        
    
                End If
    
                If objMovCaixa1.iTipo = TIPOMEIOPAGTOLOJA_CARTAO_DEBITO And objMovCaixa.iTipo = MOVIMENTOCAIXA_RECEB_CARTAODEBITO Then
            
                    If objMovCaixa.iAdmMeioPagto = 0 Then
                        iParcelas = 0
                        objAdmMeioPagto.sNome = "Cartão Não Especfiicado"
                        objAdmMeioPagtoCondPagto.sNomeParcelamento = "Parcelamento Não Especificado"
                    Else
            
                        For Each objAdmMeioPagto In gcolAdmMeioPagto
                            If objAdmMeioPagto.iCodigo = objMovCaixa.iAdmMeioPagto Then Exit For
                        Next
                        
                        For Each objAdmMeioPagtoCondPagto In objAdmMeioPagto.colCondPagtoLoja
                            If objAdmMeioPagtoCondPagto.iParcelamento = objMovCaixa.iParcelamento Then
                                iParcelas = objAdmMeioPagtoCondPagto.iNumParcelas
                                Exit For
                            End If
                        Next
            
                    End If
            
                    sSaltaLinha = Chr(13) + Chr(10) + Chr(13) + Chr(10)
                        
                    lErro = AFRAC_ImprimirVinculado(sSaltaLinha)
                    If lErro <> SUCESSO Then
                        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Vinculado")
                        If lErro <> SUCESSO Then gError 214135
                    End If
            
                    sLinha = Formata_Campo(ALINHAMENTO_CENTRALIZADO, 48, " ", objAdmMeioPagto.sNome)
            
                    lErro = AFRAC_ImprimirVinculado(sLinha)
                    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Vinculado")
                    If lErro <> SUCESSO Then gError 214136
            
                    sLinha = Formata_Campo(ALINHAMENTO_CENTRALIZADO, 48, " ", objAdmMeioPagtoCondPagto.sNomeParcelamento)
            
                    lErro = AFRAC_ImprimirVinculado(sLinha)
                    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Vinculado")
                    If lErro <> SUCESSO Then gError 214137
        
                    sLinha = Formata_Campo(ALINHAMENTO_CENTRALIZADO, 48, " ", "Valor = " & Format(objMovCaixa.dValor, "standard"))
            
                    lErro = AFRAC_ImprimirVinculado(sLinha)
                    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Vinculado")
                    If lErro <> SUCESSO Then gError 214137
        
    
                End If
    
    
            Next

            lErro = AFRAC_FecharVinculado()
                lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Fechar Vinculado")
                If lErro <> SUCESSO Then gError 214138
    
        End If
    
    Next

    lErro = CF_ECF("Caixa_Transacao_Fechar", lTransacao)
    If lErro <> SUCESSO Then gError 214158

    CCD_Imprime = SUCESSO
    
    Exit Function
    
Erro_CCD_Imprime:

    CCD_Imprime = gErr

    Select Case gErr

        Case 214134 To 214138, 214157, 214158

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 214139)

    End Select
    
    Call CF_ECF("Caixa_Transacao_Rollback", glTransacaoPAFECF)
    
    Exit Function
    
End Function

Public Function Venda_CalculaCodigoCFe(ByVal objVenda As ClassVenda) As Long
'colocar o CodigoCFe devido nos meios de pagto

Dim lErro As Long, objMovCaixa As ClassMovimentoCaixa, objAdmMeioPagto As ClassAdmMeioPagto
Dim iTipoMeioPagto As Integer, objTMPLoja As ClassTMPLoja, iRede As Integer, objRede As ClassRede

On Error GoTo Erro_Venda_CalculaCodigoCFe

    For Each objMovCaixa In objVenda.colMovimentosCaixa

        objMovCaixa.iCodigoCFe = 0
        objMovCaixa.sCNPJRede = ""
        objMovCaixa.iBandeiraCartao = 0
        
        If objMovCaixa.iTipo <> MOVIMENTOCAIXA_TROCO_DINHEIRO And objMovCaixa.iTipo <> MOVIMENTOCAIXA_TROCO_CONTRAVALE And objMovCaixa.iTipo <> MOVIMENTOCAIXA_TROCO_VALE Then
        
            iTipoMeioPagto = 0
            
            If objMovCaixa.iAdmMeioPagto <> 0 Then
                
                For Each objAdmMeioPagto In gcolAdmMeioPagto
                
                    If objAdmMeioPagto.iCodigo = objMovCaixa.iAdmMeioPagto Then
                    
                        iTipoMeioPagto = objAdmMeioPagto.iTipoMeioPagto
                        Exit For
                        
                    End If
                
                Next
                
                If iTipoMeioPagto <> 0 Then
                
                    iRede = objAdmMeioPagto.iRede
                    
                    For Each objRede In gcolRedes
                    
                        If iRede = objRede.iCodigo Then
                        
                            objMovCaixa.sCNPJRede = objRede.sCgc
                            Exit For
                        
                        End If
                    
                    Next
                
                    If InStr(UCase(objAdmMeioPagto.sNome), "VISA") <> 0 Then
                        objMovCaixa.iBandeiraCartao = 1
                    ElseIf InStr(UCase(objAdmMeioPagto.sNome), "MASTERCARD") <> 0 Then
                        objMovCaixa.iBandeiraCartao = 2
                    ElseIf InStr(UCase(objAdmMeioPagto.sNome), "AMEX") <> 0 Or InStr(UCase(objAdmMeioPagto.sNome), "AMERICAN") <> 0 Then
                        objMovCaixa.iBandeiraCartao = 3
                    ElseIf InStr(UCase(objAdmMeioPagto.sNome), "SOROCRED") <> 0 Then
                        objMovCaixa.iBandeiraCartao = 4
                    Else
                        objMovCaixa.iBandeiraCartao = 99
                    End If
                
                End If
            
                For Each objTMPLoja In gcolTiposMeiosPagtos
                
                    If objTMPLoja.iTipo = iTipoMeioPagto Then
                    
                        objMovCaixa.iCodigoCFe = objTMPLoja.iCodigoCFe
                        Exit For
                    
                    End If
                
                Next
    
            Else
            
                Select Case objMovCaixa.iTipo
                
                    Case MOVIMENTOCAIXA_RECEB_CARTAOCREDITO
                        objMovCaixa.iCodigoCFe = 3
                    
                    Case MOVIMENTOCAIXA_RECEB_CARTAODEBITO
                        objMovCaixa.iCodigoCFe = 4
                        
                    Case MOVIMENTOCAIXA_RECEB_VALETICKET
                        objMovCaixa.iCodigoCFe = 10
                        
                    Case MOVIMENTOCAIXA_RECEB_OUTROS
                        objMovCaixa.iCodigoCFe = 99
                    
                End Select
            
            End If
            
            If objMovCaixa.iCodigoCFe = 0 Then gError 201999
    
        End If
    
    Next

    Venda_CalculaCodigoCFe = SUCESSO
    
    Exit Function
    
Erro_Venda_CalculaCodigoCFe:

    Venda_CalculaCodigoCFe = gErr

    Select Case gErr

        Case 201999
            Call Rotina_ErroECF(vbOKOnly, ERRO_CODIGO_CODIGOCFE_INVALIDO, gErr)
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 201549)

    End Select
    
    Exit Function
    
End Function

Public Function Venda_Prepara_SAT(ByVal objVenda As ClassVenda) As Long
'preenche os dados da venda especificos para o SAT
Dim lErro As Long

On Error GoTo Erro_Venda_Prepara_SAT

    'colocar o CodigoCFe devido nos meios de pagto
    lErro = Venda_CalculaCodigoCFe(objVenda)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    'gravar venda atual para o caso de dar problema e poder recuperar depois de onde parou
    lErro = Grava_Venda_Atual(objVenda)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    Venda_Prepara_SAT = SUCESSO
    
    Exit Function
    
Erro_Venda_Prepara_SAT:

    Venda_Prepara_SAT = gErr

    Select Case gErr

        Case ERRO_SEM_MENSAGEM

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 201548)

    End Select
    
    Exit Function
    
End Function

Public Function Venda_Prepara_NFCE(ByVal objVenda As ClassVenda) As Long
'preenche os dados da venda especificos para NFCE

Dim lErro As Long, lSequencial As Long
Dim alComando(1 To 5) As Long, sMunic As String, objTribDoc As ClassTributacaoDoc, objTribDocItem As ClassTributacaoDocItem
Dim iIndice As Integer, iUFCodIBGE As Integer, objItem As ClassItemCupomFiscal, lNFCeProximoNum As Long

On Error GoTo Erro_Venda_Prepara_NFCE

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_AbrirExt(glConexaoPAFECF)
        If alComando(iIndice) = 0 Then gError 213410
    Next

    If objVenda.objNFeInfo.iUFCodIBGE = 0 Then
    
        Call UF_ObterCodIBGE(objVenda.objNFeInfo.sEmitUF, iUFCodIBGE)
        objVenda.objNFeInfo.iUFCodIBGE = iUFCodIBGE
    
    End If
    
    If objVenda.objNFeInfo.cMun = 0 And objVenda.objNFeInfo.iUFCodIBGE <> 0 Then
    
        sMunic = String(STRING_CIDADE_CODIBGE, 0)
        lErro = Comando_Executar(alComando(1), "SELECT Munic FROM IBGECodArea WHERE UF = ? AND UPPER(NomeMunic) = ?", sMunic, objVenda.objNFeInfo.iUFCodIBGE, objVenda.objNFeInfo.objEndereco.sCidade)
        If lErro <> AD_SQL_SUCESSO Then gError 213411
        
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 213412
        
        If lErro = AD_SQL_SUCESSO Then objVenda.objNFeInfo.cMun = StrParaLong(CStr(objVenda.objNFeInfo.iUFCodIBGE) & sMunic)
    
    End If

    'copiar endereco
    With objVenda.objCupomFiscal.objEndDest
        .sLogradouro = objVenda.objCupomFiscal.sEndEntLogradouro
        
        If Len(Trim(objVenda.objCupomFiscal.sEndEntNúmero)) <> 0 And IsNumeric(objVenda.objCupomFiscal.sEndEntNúmero) Then
            .lNumero = StrParaLong(objVenda.objCupomFiscal.sEndEntNúmero)
            .sComplemento = objVenda.objCupomFiscal.sEndEntComplemento
        Else
            .lNumero = 0
            .sComplemento = objVenda.objCupomFiscal.sEndEntNúmero
            If Len(Trim(.sComplemento)) <> 0 And Len(Trim(objVenda.objCupomFiscal.sEndEntComplemento)) <> 0 Then .sComplemento = .sComplemento + " " 'Espaço para separar o número (não numérico se tiver) e o complemento (se tiver)
            .sComplemento = .sComplemento + objVenda.objCupomFiscal.sEndEntComplemento
        End If
        
'        .lNumero = StrParaLong(objVenda.objCupomFiscal.sEndEntNúmero)
'        .sComplemento = objVenda.objCupomFiscal.sEndEntComplemento
        .sBairro = objVenda.objCupomFiscal.sEndEntBairro
        .sCidade = objVenda.objCupomFiscal.sEndEntCidade
        .sSiglaEstado = objVenda.objCupomFiscal.sEndEntUF
    End With

    'preparar tributacao do cupom como um todo
    
    Set objTribDoc = objVenda.objCupomFiscal.objTributacaoDoc
    With objTribDoc
    
        .dICMSBase = 0
        .dICMSValorIsento = 0
        .dICMSValor = 0
        .dICMSSubstBase = 0
        .dICMSSubstValor = 0
        .dPISValor = 0
        .dCOFINSValor = 0
        .dTotTrib = 0
        .dValorFrete = objVenda.objCupomFiscal.dValorAcrescimo
        
    End With
    For Each objItem In objVenda.objCupomFiscal.colItens
    
        If objItem.iStatus <> STATUS_CANCELADO Then
        
            Set objTribDocItem = objItem.objTributacaoDocItem
            
            With objTribDoc
            
                .dICMSBase = Arredonda_Moeda(.dICMSBase + objTribDocItem.dICMSBase)
                .dICMSValorIsento = Arredonda_Moeda(.dICMSValorIsento + objTribDocItem.dICMSValorIsento)
                .dICMSValor = Arredonda_Moeda(.dICMSValor + objTribDocItem.dICMSValor)
                .dICMSSubstBase = Arredonda_Moeda(.dICMSSubstBase + objTribDocItem.dICMSSubstBase)
                .dICMSSubstValor = Arredonda_Moeda(.dICMSSubstValor + objTribDocItem.dICMSSubstValor)
                .dPISValor = Arredonda_Moeda(.dPISValor + objTribDocItem.dPISValor)
                .dCOFINSValor = Arredonda_Moeda(.dCOFINSValor + objTribDocItem.dCOFINSValor)
                .dTotTrib = Arredonda_Moeda(.dTotTrib + objTribDocItem.dTotTrib)
                
            End With
    
        End If
    
    Next
    
    'colocar o CodigoCFe devido nos meios de pagto
    lErro = Venda_CalculaCodigoCFe(objVenda)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    lErro = CF_ECF("Caixa_Transacao_Abrir", lSequencial)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    lErro = Comando_Executar(alComando(4), "SELECT NFCeProximoNum FROM ConfiguracaoNFe", lNFCeProximoNum)
    If lErro <> AD_SQL_SUCESSO Then gError 207916

    lErro = Comando_BuscarProximo(alComando(4))
    If lErro <> AD_SQL_SUCESSO Then gError 207916
    
    If lNFCeProximoNum <> objVenda.objNFeInfo.lNFCeProximoNum Then gError 207916
    
    lErro = Comando_Executar(alComando(5), "UPDATE ConfiguracaoNFe SET NFCeProximoLote = ?", objVenda.objNFeInfo.lNFCeProximoLote + 1)
    If lErro <> AD_SQL_SUCESSO Then gError 207916
    
    'gravar venda atual para o caso de dar problema e poder recuperar depois de onde parou
    lErro = Grava_Venda_Atual_EmTrans(objVenda)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    'Fechar a Transação
    lErro = CF_ECF("Caixa_Transacao_Fechar", lSequencial)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    objVenda.objNFeInfo.lNFCeProximoLote = objVenda.objNFeInfo.lNFCeProximoLote + 1
    
    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next
    
    Venda_Prepara_NFCE = SUCESSO
    
    Exit Function
    
Erro_Venda_Prepara_NFCE:

    Venda_Prepara_NFCE = gErr

    Select Case gErr

        Case ERRO_SEM_MENSAGEM
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 201549)

    End Select
    
    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next
    
    Call CF_ECF("Caixa_Transacao_Rollback", glTransacaoPAFECF)
    
    Exit Function
    
End Function

Function ConfiguracaoSAT_Grava(ByVal objConfiguracaoSAT As ClassConfiguracaoSAT) As Long
'grava configuracoes especificas do SAT

Dim alComando(1 To 1) As Long
Dim iIndice As Integer
Dim lErro As Long, lSequencial As Long

On Error GoTo Erro_ConfiguracaoSAT_Grava

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_AbrirExt(glConexaoPAFECF)
        If alComando(iIndice) = 0 Then gError ERRO_SEM_MENSAGEM
    Next

    lErro = CF_ECF("Caixa_Transacao_Abrir", lSequencial)
    If lErro <> SUCESSO Then gError 107559

    With objConfiguracaoSAT
        lErro = Comando_Executar(alComando(1), "UPDATE ConfiguracaoSAT SET CodigoDeAtivacao = ?, EmuladorSefaz = ?, DirArqXml = ?, NomeArqDLL = ?, NomeArqEmulador = ?,  ModeloImpressora = ?, LayoutImpressao = ?, EmTeste = ?, NomeArqLogo = ?, PortaImpressora = ?", _
            .sCodigoDeAtivacao, .iEmuladorSefaz, .sDirArqXml, .sNomeArqDLL, .sNomeArqEmulador, .iModeloImpressora, .iLayoutImpressao, .iEmTeste, .sNomeArqLogo, .sPortaImpressora)
    End With
    If lErro <> AD_SQL_SUCESSO Then gError 214768

    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next
    
    'Fechar a Transação
    lErro = CF_ECF("Caixa_Transacao_Fechar", lSequencial)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    ConfiguracaoSAT_Grava = SUCESSO

    Exit Function

Erro_ConfiguracaoSAT_Grava:

    ConfiguracaoSAT_Grava = gErr

    Select Case gErr
    
        Case ERRO_SEM_MENSAGEM

        Case 207916
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)
        
        Case 214768
            Call Rotina_ErroECF(vbOKOnly, ERRO_ALTERACAO_CONFIGURACAOSAT, gErr)

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB, gErr, Error, 207920)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next

    Call CF_ECF("Caixa_Transacao_Rollback", glTransacaoPAFECF)
    
    Exit Function

End Function

Public Sub UF_ObterCodIBGE(ByVal sUF As String, iCodIBGE As Integer)
            
    iCodIBGE = 0

    Select Case UCase(sUF)
    
        Case "AC"
                iCodIBGE = 12
        Case "AL"
                iCodIBGE = 27
        Case "AM"
                iCodIBGE = 13
        Case "AP"
                iCodIBGE = 16
        Case "BA"
                iCodIBGE = 29
        Case "CE"
                iCodIBGE = 23
        Case "DF"
                iCodIBGE = 53
        Case "ES"
                iCodIBGE = 32
        Case "GO"
                iCodIBGE = 52
        Case "MA"
                iCodIBGE = 21
        Case "MG"
                iCodIBGE = 31
        Case "MS"
                iCodIBGE = 50
        Case "MT"
                iCodIBGE = 51
        Case "PA"
                iCodIBGE = 15
        Case "PB"
                iCodIBGE = 25
        Case "PE"
                iCodIBGE = 26
        Case "PI"
                iCodIBGE = 22
        Case "PR"
                iCodIBGE = 41
        Case "RJ"
                iCodIBGE = 33
        Case "RN"
                iCodIBGE = 24
        Case "RO"
                iCodIBGE = 11
        Case "RR"
                iCodIBGE = 14
        Case "RS"
                iCodIBGE = 43
        Case "SC"
                iCodIBGE = 42
        Case "SE"
                iCodIBGE = 28
        Case "SP"
                iCodIBGE = 35
        Case "TO"
                iCodIBGE = 17
    End Select
    
End Sub

Public Function Venda_Prepara_NFe(ByVal objVenda As ClassVenda) As Long
'preenche os dados da venda especificos para NFe
Dim lErro As Long
Dim alComando(1 To 4) As Long, sMunic As String, objTribDoc As ClassTributacaoDoc, objTribDocItem As ClassTributacaoDocItem
Dim iIndice As Integer, iUFCodIBGE As Integer, objItem As ClassItemCupomFiscal

On Error GoTo Erro_Venda_Prepara_NFe

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_AbrirExt(glConexaoPAFECF)
        If alComando(iIndice) = 0 Then gError 213410
    Next

    If objVenda.objNFeInfo.iUFCodIBGE = 0 Then
    
        Call UF_ObterCodIBGE(objVenda.objNFeInfo.sEmitUF, iUFCodIBGE)
        objVenda.objNFeInfo.iUFCodIBGE = iUFCodIBGE
    
    End If
    
    If objVenda.objNFeInfo.cMun = 0 And objVenda.objNFeInfo.iUFCodIBGE <> 0 Then
    
        sMunic = String(STRING_CIDADE_CODIBGE, 0)
        lErro = Comando_Executar(alComando(1), "SELECT Munic FROM IBGECodArea WHERE UF = ? AND UPPER(NomeMunic) = ?", sMunic, objVenda.objNFeInfo.iUFCodIBGE, objVenda.objNFeInfo.objEndereco.sCidade)
        If lErro <> AD_SQL_SUCESSO Then gError 213411
        
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 213412
        
        If lErro = AD_SQL_SUCESSO Then objVenda.objNFeInfo.cMun = StrParaLong(CStr(objVenda.objNFeInfo.iUFCodIBGE) & sMunic)
    
    End If

    'copiar endereco
    With objVenda.objCupomFiscal.objEndDest
        .sLogradouro = objVenda.objCupomFiscal.sEndEntLogradouro
        
        If Len(Trim(objVenda.objCupomFiscal.sEndEntNúmero)) <> 0 And IsNumeric(objVenda.objCupomFiscal.sEndEntNúmero) Then
            .lNumero = StrParaLong(objVenda.objCupomFiscal.sEndEntNúmero)
            .sComplemento = objVenda.objCupomFiscal.sEndEntComplemento
        Else
            .lNumero = 0
            .sComplemento = objVenda.objCupomFiscal.sEndEntNúmero
            If Len(Trim(.sComplemento)) <> 0 And Len(Trim(objVenda.objCupomFiscal.sEndEntComplemento)) <> 0 Then .sComplemento = .sComplemento + " " 'Espaço para separar o número (não numérico se tiver) e o complemento (se tiver)
            .sComplemento = .sComplemento + objVenda.objCupomFiscal.sEndEntComplemento
        End If
        
        '.lNumero = objVenda.objCupomFiscal.sEndEntNúmero
        '.sComplemento = objVenda.objCupomFiscal.sEndEntComplemento
        .sBairro = objVenda.objCupomFiscal.sEndEntBairro
        .sCidade = objVenda.objCupomFiscal.sEndEntCidade
        .sSiglaEstado = objVenda.objCupomFiscal.sEndEntUF
    End With

    'preparar tributacao do cupom como um todo
    
    Set objTribDoc = objVenda.objCupomFiscal.objTributacaoDoc
    With objTribDoc
    
        .dICMSBase = 0
        .dICMSValorIsento = 0
        .dICMSValor = 0
        .dICMSSubstBase = 0
        .dICMSSubstValor = 0
        .dPISValor = 0
        .dCOFINSValor = 0
        .dTotTrib = 0
        
    End With
    For Each objItem In objVenda.objCupomFiscal.colItens
    
        If objItem.iStatus <> STATUS_CANCELADO Then
        
            Set objTribDocItem = objItem.objTributacaoDocItem
            
            With objTribDoc
            
                .dICMSBase = Arredonda_Moeda(.dICMSBase + objTribDocItem.dICMSBase)
                .dICMSValor = Arredonda_Moeda(.dICMSValor + objTribDocItem.dICMSValor)
                .dICMSSubstBase = Arredonda_Moeda(.dICMSSubstBase + objTribDocItem.dICMSSubstBase)
                .dICMSSubstValor = Arredonda_Moeda(.dICMSSubstValor + objTribDocItem.dICMSSubstValor)
                .dPISValor = Arredonda_Moeda(.dPISValor + objTribDocItem.dPISValor)
                .dCOFINSValor = Arredonda_Moeda(.dCOFINSValor + objTribDocItem.dCOFINSValor)
                .dTotTrib = Arredonda_Moeda(.dTotTrib + objTribDocItem.dTotTrib)
                
            End With
    
        End If
    
    Next
    
    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next
    
    Venda_Prepara_NFe = SUCESSO
    
    Exit Function
    
Erro_Venda_Prepara_NFe:

    Venda_Prepara_NFe = gErr

    Select Case gErr

        Case ERRO_SEM_MENSAGEM
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 201549)

    End Select
    
    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function
    
End Function

Function NFD2_Grava(ByVal objNF As ClassNFiscal) As Long

Dim lErro As Long, lSequencial As Long

On Error GoTo Erro_NFD2_Grava

    If glConexaoOrcPAF <> 0 Then
    
        lErro = CF_ECF("Caixa_Transacao_Abrir_Orc", lSequencial)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    End If

    lErro = NFD2_Grava_Trans(objNF)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    If glConexaoOrcPAF <> 0 Then
    
        'Fechar a Transação
        lErro = CF_ECF("Caixa_Transacao_Fechar_Orc", lSequencial)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    End If

    NFD2_Grava = SUCESSO

    Exit Function

Erro_NFD2_Grava:

    NFD2_Grava = gErr

    Select Case gErr
    
        Case ERRO_SEM_MENSAGEM

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB, gErr, Error, 213415)

    End Select

    Call CF_ECF("Caixa_Transacao_Rollback", glTransacaoOrcPAFECF)
    
    Exit Function

End Function

Function NFD2_Exclui(ByVal objNF As ClassNFiscal) As Long

Dim alComando(1 To 3) As Long
Dim iIndice As Integer
Dim lErro As Long, lSequencial As Long
Dim lNumIntNF As Long

On Error GoTo Erro_NFD2_Exclui

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_AbrirExt(glConexaoOrcPAF)
        If alComando(iIndice) = 0 Then gError 213416
    Next

    If glConexaoOrcPAF <> 0 Then
    
        lErro = CF_ECF("Caixa_Transacao_Abrir_Orc", lSequencial)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    End If
    
    lErro = Comando_ExecutarPos(alComando(1), "SELECT NumIntDoc FROM NFD2 WHERE Serie = ? AND Numero = ? AND DataEmissao BETWEEN ? AND ?", 0, lNumIntNF, objNF.sSerie, objNF.lNumNotaFiscal, objNF.dtDataEmissao - PERIODO_EMISSAO, objNF.dtDataEmissao + PERIODO_EMISSAO)
    If lErro <> AD_SQL_SUCESSO Then gError 213417
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 213418
    
    If lErro <> AD_SQL_SUCESSO Then gError 213419
   
    lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM NFD2 ", alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 213420
    
    lErro = Comando_Executar(alComando(3), "DELETE FROM NFD2Itens WHERE NumIntNF = ? ", lNumIntNF)
    If lErro <> AD_SQL_SUCESSO Then gError 213421
    
    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next
    
    If glConexaoOrcPAF <> 0 Then
    
        'Fechar a Transação
        lErro = CF_ECF("Caixa_Transacao_Fechar_Orc", lSequencial)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    End If

    NFD2_Exclui = SUCESSO

    Exit Function

Erro_NFD2_Exclui:

    NFD2_Exclui = gErr

    Select Case gErr
    
        Case ERRO_SEM_MENSAGEM

        Case 213416
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)

        Case 213417, 213418
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_NFD2, gErr)
            
        Case 213419
            Call Rotina_ErroECF(vbOKOnly, ERRO_NFD2_NAO_LOCALIZADA, gErr, objNF.sSerie, objNF.lNumNotaFiscal, objNF.dtDataEmissao)

        Case 213420, 213421
            Call Rotina_ErroECF(vbOKOnly, ERRO_EXCLUSAO_NFD2, gErr)

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB, gErr, Error, 213422)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next

    Call CF_ECF("Caixa_Transacao_Rollback", glTransacaoOrcPAFECF)
    
    Exit Function

End Function

Public Function CidadesUF_CarregaCombo(ByVal ComboCidade As Object, ByVal sUF As String) As Long

Dim lErro As Long
Dim lComando As Long, sNomeMunic As String, sMunic As String
Dim iIndice As Integer, iUFCodIBGE As Integer

On Error GoTo Erro_CidadesUF_CarregaCombo

    lComando = Comando_AbrirExt(glConexaoPAFECF)
    If lComando = 0 Then gError 213410
    
    Call UF_ObterCodIBGE(sUF, iUFCodIBGE)

    sNomeMunic = String(255, 0)
    sMunic = String(STRING_CIDADE_CODIBGE, 0)

    lErro = Comando_Executar(lComando, "SELECT DISTINCT Munic, NomeMunic FROM IBGECodArea WHERE UF = ? ORDER BY NomeMunic", sMunic, sNomeMunic, iUFCodIBGE)
    If lErro <> AD_SQL_SUCESSO Then gError 213411
    
    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 213412
        
    Do While lErro = AD_SQL_SUCESSO
    
        ComboCidade.AddItem sNomeMunic
        ComboCidade.ItemData(ComboCidade.NewIndex) = StrParaLong(CStr(iUFCodIBGE) & sMunic)
        
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 213412
    
    Loop
    
    Call Comando_Fechar(lComando)
    
    CidadesUF_CarregaCombo = SUCESSO
    
    Exit Function
    
Erro_CidadesUF_CarregaCombo:

    CidadesUF_CarregaCombo = gErr

    Select Case gErr

        Case ERRO_SEM_MENSAGEM
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 201549)

    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function
    
End Function

Public Function Venda_Grava_NFe(ByVal objVenda As ClassVenda) As Long
'registra a autorizacao da nfe
Dim lErro As Long, lSequencial As Long
Dim alComando(1 To 4) As Long
Dim iIndice As Integer

On Error GoTo Erro_Venda_Grava_NFe

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_AbrirExt(glConexaoPAFECF)
        If alComando(iIndice) = 0 Then gError 207916
    Next

    lErro = CF_ECF("Caixa_Transacao_Abrir", lSequencial)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    lErro = Comando_Executar(alComando(1), "UPDATE ConfiguracaoNFe SET NFeProximoNum = ?, NFeProximoLote = ?", objVenda.objNFeInfo.lNFeProximoNum + 1, objVenda.objNFeInfo.lNFeProximoLote + 1)
    If lErro <> AD_SQL_SUCESSO Then gError 207916
    
    'Fechar a Transação
    lErro = CF_ECF("Caixa_Transacao_Fechar", lSequencial)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next
    
    objVenda.objNFeInfo.lNFeProximoNum = objVenda.objNFeInfo.lNFeProximoNum + 1
    objVenda.objNFeInfo.lNFeProximoLote = objVenda.objNFeInfo.lNFeProximoLote + 1
    
    Venda_Grava_NFe = SUCESSO
    
    Exit Function
    
Erro_Venda_Grava_NFe:

    Venda_Grava_NFe = gErr

    Select Case gErr
    
        Case ERRO_SEM_MENSAGEM

        Case 207916
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB, gErr, Error, 207920)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next

    Call CF_ECF("Caixa_Transacao_Rollback", glTransacaoPAFECF)
    
    Exit Function
    
End Function

Function NFD2_Grava_Trans(ByVal objNF As ClassNFiscal) As Long

Dim alComando(1 To 4) As Long
Dim iIndice As Integer
Dim lErro As Long, lSequencial As Long
Dim lNumIntNF As Long, objItem As ClassItemNF

On Error GoTo Erro_NFD2_Grava_Trans

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_AbrirExt(glConexaoOrcPAF)
        If alComando(iIndice) = 0 Then gError 213410
    Next

    lErro = Comando_ExecutarPos(alComando(1), "SELECT NumIntDoc FROM NFD2 WHERE Serie = ? AND Numero = ? AND DataEmissao BETWEEN ? AND ?", 0, lNumIntNF, objNF.sSerie, objNF.lNumNotaFiscal, objNF.dtDataEmissao - PERIODO_EMISSAO, objNF.dtDataEmissao + PERIODO_EMISSAO)
    If lErro <> AD_SQL_SUCESSO Then gError 213411
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 213412
    
    If lErro = AD_SQL_SUCESSO Then
   
        lErro = Comando_ExecutarPos(alComando(2), "UPDATE NFD2 SET DataEmissao = ?, Destinatario = ?", alComando(1), objNF.dtDataEmissao, objNF.sDestino)
        If lErro <> AD_SQL_SUCESSO Then gError 213413
        
        lErro = Comando_Executar(alComando(3), "DELETE FROM NFD2Itens WHERE NumIntNF = ? ", lNumIntNF)
        If lErro <> AD_SQL_SUCESSO Then gError 213414
   
    Else
   
        lErro = CF_ECF("Config_ObterNumInt_EmTrans", "OrcamentoConfig", "NUM_INT_PROX_NFD2", lNumIntNF)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        
        lErro = Comando_Executar(alComando(2), "INSERT INTO NFD2 (NumIntDoc, Numero, Serie, DataEmissao, Destinatario) VALUES (?,?,?,?,?)", lNumIntNF, objNF.lNumNotaFiscal, objNF.sSerie, objNF.dtDataEmissao, objNF.sDestino)
        If lErro <> AD_SQL_SUCESSO Then gError 213415
   
    End If
   
    iIndice = 0
    For Each objItem In objNF.colItens
    
        iIndice = iIndice + 1
   
        lErro = Comando_Executar(alComando(4), "INSERT INTO NFD2Itens (NumIntNF, Item, Produto, ProdutoNomeRed, Qtde, Discriminacao, PrecoUnitario) VALUES (?,?,?,?,?,?,?)", lNumIntNF, iIndice, objItem.sProduto, objItem.sProdutoXml, objItem.dQuantidade, objItem.sDescricaoItem, objItem.dPrecoUnitario)
        If lErro <> AD_SQL_SUCESSO Then gError 213416
   
    Next

    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next
    
    NFD2_Grava_Trans = SUCESSO

    Exit Function

Erro_NFD2_Grava_Trans:

    NFD2_Grava_Trans = gErr

    Select Case gErr
    
        Case ERRO_SEM_MENSAGEM

        Case 213410
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)

        Case 213411, 213412
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_NFD2, gErr)

        Case 213413, 213415, 213416
            Call Rotina_ErroECF(vbOKOnly, ERRO_GRAVACAO_NFD2, gErr)

        Case 213414
            Call Rotina_ErroECF(vbOKOnly, ERRO_EXCLUSAO_NFD2, gErr)

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB, gErr, Error, 213415)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function ConfiguracaoNFe_Grava(ByVal objConfiguracaoNFe As ClassConfiguracaoNFe) As Long
'grava configuracoes especificas do NFe

Dim alComando(1 To 1) As Long
Dim iIndice As Integer
Dim lErro As Long, lSequencial As Long

On Error GoTo Erro_ConfiguracaoNFe_Grava

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_AbrirExt(glConexaoPAFECF)
        If alComando(iIndice) = 0 Then gError ERRO_SEM_MENSAGEM
    Next

    lErro = CF_ECF("Caixa_Transacao_Abrir", lSequencial)
    If lErro <> SUCESSO Then gError 107559

    With objConfiguracaoNFe
        lErro = Comando_Executar(alComando(1), "UPDATE ConfiguracaoNFe SET Token = ?, NFCeSerie = ?, NFCeProximoNum = ?, DirArqXml = ?, CertificadoA1A3 = ?, NFeAmbiente = ?, NFeSerie = ?, NFeProximoNum = ?, NFeProximoLote = ?, DirXsd = ?, NFCeProximoLote = ?, NFCeAmbiente = ?, NFCECSC = ?, idNFCECSC = ?, EmContingencia = ?, ContingenciaDataEntrada = ?, ContingenciaHoraEntrada = ?, ContigenciaxJust = ?, ModeloImpressora = ?, PortaImpressora = ?, SMTP = ?, SMTPUsu = ?, SMTPSenha = ?, SMTPPorta = ?, NFCeEnviarEmail = ?", _
           .sToken, .sNFCeSerie, .lNFCeProximoNum, .sDirArqXml, .sCertificadoA1A3, .iNFeAmbiente, .sNFeSerie, .lNFeProximoNum, .lNFeProximoLote, .sDirXsd, .lNFCeProximoLote, .iNFCeAmbiente, .sNFCECSC, .sidNFCECSC, .iEmContingencia, .dtContingenciaDataEntrada, .dContingenciaHoraEntrada, .sContigenciaxJust, .iModeloImpressora, .sPortaImpressora, .sSMTP, .sSMTPUsu, .sSMTPSenha, .lSMTPPorta, .iNFCeEnviarEmail)
    End With
    If lErro <> AD_SQL_SUCESSO Then gError 214769

    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next
    
    'Fechar a Transação
    lErro = CF_ECF("Caixa_Transacao_Fechar", lSequencial)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    ConfiguracaoNFe_Grava = SUCESSO

    Exit Function

Erro_ConfiguracaoNFe_Grava:

    ConfiguracaoNFe_Grava = gErr

    Select Case gErr
    
        Case ERRO_SEM_MENSAGEM

        Case 207916
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)

        Case 214769
            Call Rotina_ErroECF(vbOKOnly, ERRO_ALTERACAO_CONFIGURACAONFE, gErr)

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB, gErr, Error, 207920)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next

    Call CF_ECF("Caixa_Transacao_Rollback", glTransacaoPAFECF)
    
    Exit Function

End Function


Function MovimentoPorECF_Grava_Testa(ByVal dtData As Date) As Long

Dim dtDataIni As Date, dtDataFim As Date
Dim sArquivo As String
Dim sArquivo1 As String
Dim sCodNacId As String
Dim lErro As Long
Dim sNumeroSerie As String
Dim sMFAdicional As String
Dim sMarcaECF As String
Dim sTipoECF As String
Dim sModeloECF As String
Dim sVersaoSB As String
Dim dtDataInstalacaoSB As Date
Dim sHoraInstalacaoSB As String
Dim sCNPJUsuario As String
Dim iNumeroUsuario As Integer
Dim dtDataUltimaReducaoZ As Date
Dim dtDataUltimoMovimento As Date
Dim sIEUsuario As String
Dim sRegistro As String
Dim lTentaAcessoArquivo As Long
Dim sSequencial As String
Dim objLojaArqFisMestre As New ClassLojaArqFisMestre
Dim colLojaArqFisAnalitico As New Collection
Dim objUltimaReducao As New ClassUltimaReducao
Dim objMovCaixa As New ClassMovimentoCaixa
Dim sRegistro1 As String
Dim sRegistro2 As String
Dim objAliquota As ClassAliquotaICMS
Dim sTotalizadorParcial As String
Dim alComando(1 To 15) As Long
Dim tR01 As typeR01
Dim tR02 As typeR02
Dim tR03 As typeR03
Dim tR04 As typeR04
Dim tR05 As typeR05
Dim tR06 As typeR06
Dim tR07 As typeR07
Dim sZerosQtde As String
Dim sZerosValor As String
Dim sRegistroEAD As String
Dim sEAD As String
Dim sTexto As String
Dim iR01EAD As Integer
Dim lTotRegR02 As Long
Dim lTotRegR03 As Long
Dim lTotRegR04 As Long
Dim lTotRegR05 As Long
Dim lTotRegR06 As Long
Dim lTotRegR07 As Long
Dim iIndice As Integer
Dim tR01_1 As typeR01


On Error GoTo Erro_MovimentoPorECF_Grava_Testa

    dtDataIni = dtData
    dtDataFim = dtData

   'Abre os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_AbrirExt(glConexaoPAFECF)
        If alComando(iIndice) = 0 Then gError 207203
    Next

    lErro = Comando_Executar(alComando(9), "SELECT SUM(TotRegR02), SUM(TotRegR03), SUM(TotRegR04), SUM(TotRegR05), SUM(TotRegR06), SUM(TotRegR07) " & _
        "  FROM R01 WHERE Data >= ? AND Data <= ?", _
        tR01_1.lTotRegR02, tR01_1.lTotRegR03, tR01_1.lTotRegR04, tR01_1.lTotRegR05, tR01_1.lTotRegR06, tR01_1.lTotRegR07, _
        dtDataIni, dtDataFim)
    If lErro <> AD_SQL_SUCESSO Then gError 210391

    lErro = Comando_BuscarPrimeiro(alComando(9))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210392


    'Conta os registros R02
    lErro = Comando_Executar(alComando(10), "SELECT Count(*) " & _
    " FROM R02 WHERE DataMovimento >= ? AND DataMovimento <= ? ", _
       lTotRegR02, dtDataIni, dtDataFim)
    If lErro <> AD_SQL_SUCESSO Then gError 210379

    lErro = Comando_BuscarPrimeiro(alComando(10))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210380

    'Conta os registros R03
    lErro = Comando_Executar(alComando(11), "SELECT Count(*) " & _
    " FROM R03 WHERE DataMovimento >= ? AND DataMovimento <= ? ", _
       lTotRegR03, dtDataIni, dtDataFim)
    If lErro <> AD_SQL_SUCESSO Then gError 210381

    lErro = Comando_BuscarPrimeiro(alComando(11))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210382

    'Conta os registros R04
    lErro = Comando_Executar(alComando(12), "SELECT Count(*) " & _
    " FROM R04 WHERE DataMovimento >= ? AND DataMovimento <= ? ", _
       lTotRegR04, dtDataIni, dtDataFim)
    If lErro <> AD_SQL_SUCESSO Then gError 210383

    lErro = Comando_BuscarPrimeiro(alComando(12))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210384

    'Conta os registros R05
    lErro = Comando_Executar(alComando(13), "SELECT Count(*) " & _
    " FROM R05 WHERE DataMovimento >= ? AND DataMovimento <= ? ", _
       lTotRegR05, dtDataIni, dtDataFim)
    If lErro <> AD_SQL_SUCESSO Then gError 210385

    lErro = Comando_BuscarPrimeiro(alComando(13))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210386

    'Conta os registros R06
    lErro = Comando_Executar(alComando(14), "SELECT Count(*) " & _
    " FROM R06 WHERE DataMovimento >= ? AND DataMovimento <= ? ", _
       lTotRegR06, dtDataIni, dtDataFim)
    If lErro <> AD_SQL_SUCESSO Then gError 210387

    lErro = Comando_BuscarPrimeiro(alComando(14))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210388

    'Conta os registros R07
    lErro = Comando_Executar(alComando(15), "SELECT Count(*) " & _
    " FROM R07 WHERE DataMovimento >= ? AND DataMovimento <= ? ", _
       lTotRegR07, dtDataIni, dtDataFim)
    If lErro <> AD_SQL_SUCESSO Then gError 210389

    lErro = Comando_BuscarPrimeiro(alComando(15))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210390

    tR01.sCodNacId = String(R01_CODNACID, 0)
    tR01.sNumeroSerie = String(R01_NUMEROSERIE, 0)
    tR01.sMFAdicional = String(R01_MFADICIONAL, 0)
    tR01.sTipoECF = String(R01_TIPOECF, 0)
    tR01.sMarcaECF = String(R01_MARCAECF, 0)
    tR01.sModeloECF = String(R01_MODELOECF, 0)
    tR01.sVersaoSB = String(R01_VERSAOSB, 0)
    tR01.sCNPJUsu = String(R01_CNPJUSU, 0)
    tR01.sIEUsu = String(R01_IEUSU, 0)
    tR01.sCNPJDesenv = String(R01_CNPJDESENV, 0)
    tR01.sIEDesenv = String(R01_IEDESENV, 0)
    tR01.sIMDesenv = String(R01_IMDESENV, 0)
    tR01.sNomeDesenv = String(R01_NOMEDESENV, 0)
    tR01.sNomePAFECF = String(R01_NOMEPAFECF, 0)
    tR01.sVersaoPAFECF = String(R01_VERSAOPAFECF, 0)
    tR01.sMD5PAFECF = String(R01_MD5PAFECF, 0)
    tR01.sVersaoEspecPAFECF = String(R01_VERSAOESPECPAFECF, 0)
    tR01.sEAD = String(R01_EAD, 0)
    tR01.sHoraInstalacaoSB = String(R01_HORAINSTALACAOSB, 0)

    'Le o registro R01
    lErro = Comando_Executar(alComando(1), "SELECT Data, CodNacId, NumeroSerie, MFAdicional, TipoECF, MarcaECF, ModeloECF, VersaoSB, DataInstalacaoSB, HoraInstalacaoSB, " & _
    "SequencialECF, CNPJUsu, InscEstadualUsu, CNPJDesenv, InscEstadualDesenv, InscMunicipalDesenv, " & _
    " NomeDesenv, NomePAFECF, VersaoPAFECF, CodigoMD5,  VersaoERPAFECF, EAD, " & _
    "TotRegR02, TotRegR03, TotRegR04, TotRegR05, TotRegR06, TotRegR07 FROM R01 WHERE Data >= ? AND Data <= ? ORDER BY Data", _
        tR01.dtData, tR01.sCodNacId, tR01.sNumeroSerie, tR01.sMFAdicional, tR01.sTipoECF, tR01.sMarcaECF, tR01.sModeloECF, tR01.sVersaoSB, tR01.dtDataInstalacaoSB, _
        tR01.sHoraInstalacaoSB, tR01.iSequencialECF, tR01.sCNPJUsu, tR01.sIEUsu, tR01.sCNPJDesenv, tR01.sIEDesenv, tR01.sIMDesenv, _
        tR01.sNomeDesenv, tR01.sNomePAFECF, tR01.sVersaoPAFECF, tR01.sMD5PAFECF, tR01.sVersaoEspecPAFECF, tR01.sEAD, _
        tR01.lTotRegR02, tR01.lTotRegR03, tR01.lTotRegR04, tR01.lTotRegR05, tR01.lTotRegR06, tR01.lTotRegR07, _
        dtDataIni, dtDataFim)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210376

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210377

    iR01EAD = 0

    Do While lErro = AD_SQL_SUCESSO

        sTexto = tR01.dtData & tR01.sNumeroSerie & tR01.sMFAdicional & tR01.sTipoECF & tR01.sMarcaECF & tR01.sModeloECF & tR01.sVersaoSB & tR01.dtDataInstalacaoSB & tR01.sHoraInstalacaoSB & tR01.iSequencialECF & tR01.sCNPJUsu & tR01.sIEUsu & tR01.sCNPJDesenv & tR01.sIEDesenv & tR01.sIMDesenv & tR01.sNomeDesenv & tR01.sNomePAFECF & tR01.sVersaoPAFECF & gsMD5PAFECF & tR01.sVersaoEspecPAFECF & tR01.sCodNacId
        sTexto = sTexto & tR01.lTotRegR02 & tR01.lTotRegR03 & tR01.lTotRegR04 & tR01.lTotRegR05 & tR01.lTotRegR06 & tR01.lTotRegR07
        
        lErro = CF_ECF("Gerar_EAD", sTexto, sEAD)
        If lErro <> SUCESSO Then gError 210350

        If tR01.sEAD <> sEAD Then
            iR01EAD = 1
            MsgBox ("erro r01")
        End If

        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210378

    Loop

    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next
    
    MovimentoPorECF_Grava_Testa = SUCESSO

    Exit Function

Erro_MovimentoPorECF_Grava_Testa:

    MovimentoPorECF_Grava_Testa = gErr
    
    Select Case gErr

        Case 207203
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)

        Case 207204, 207205, 210376 To 210378, 210391, 210392
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_R01, gErr)

        Case 207206
            Call Rotina_ErroECF(vbOKOnly, ERRO_NAO_EXISTE_R01_PERIODO, gErr)

        Case 207207, 207208, 207209, 210379, 210380
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_R02, gErr)

        Case 207210, 207211, 207212, 210381, 210382
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_R03, gErr)

        Case 207213, 207214, 207215, 210383, 210384
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_R04, gErr)

        Case 207216, 207217, 207218, 210385, 210386
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_R05, gErr)
        
        Case 207219, 207220, 207221, 210387, 210388
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_R06, gErr)
        
        Case 207222, 207223, 207224, 210289, 210290
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_R07, gErr)
        
        Case 70
            lTentaAcessoArquivo = lTentaAcessoArquivo + 1
            If lTentaAcessoArquivo < NUM_MAX_LOCK Then Resume
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_LOCADO, gErr, sArquivo)

        Case 207225
            Call Rotina_ErroECF(vbOKOnly, ERRO_GERACAO_ASSINATURA, gErr)

        Case 210350 To 210352, 210362 To 210363, 210365

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 207226)

    End Select
    
'    Close #7
    
    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Function Programar_Aliquotas() As Long

Dim lErro As Long
Dim sRetornoICMS As String
Dim sRetornoISS As String
Dim objAliquota As ClassAliquotaICMS
Dim iPos As Integer
Dim sAliquota As String
Dim bAchou As Boolean
Dim sTrib As String
Dim iInicio As Integer
Dim iFim As Integer
Dim sTributacao As String
Dim iIndice As Integer
Dim sIndiceAliquotasISS As String
Dim iIndice1 As Integer
Dim iIndice2 As Integer
Dim iInicioIndice As Integer
Dim iFimIndice As Integer

On Error GoTo Erro_Programar_Aliquotas

    If giDebug = 1 Then MsgBox ("Programar Aliquotas 1.1")

    lErro = AFRAC_ProgramarAliquotas()
    If lErro <> SUCESSO Then
        Call CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Programar Aliquotas")
        If lErro <> SUCESSO Then gError 210791
    End If

    If giDebug = 1 Then MsgBox ("Programar Aliquotas 1.2")

    Programar_Aliquotas = SUCESSO
    
    Exit Function
    
Erro_Programar_Aliquotas:
    
    Programar_Aliquotas = gErr
    
    Select Case gErr
                
        Case 210791
                
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB, gErr, Error$, 165214)

    End Select
    
    Exit Function

End Function

Private Function TestaVersaoORC() As Long

Dim lErro As Long, lComando As Long
Dim sConteudo As String, lIdAtualizacao As Long

On Error GoTo Erro_TestaVersaoORC

    If InStr(fOSMachineName, "JONES-STI") = 0 And InStr(fOSMachineName, "GHEINER1-PC") = 0 And InStr(fOSMachineName, "W02-PC") = 0 Then
    
        If CORPORATOR_ECF_VERSAO_BD_ORC <> "" Then
    
            lComando = Comando_AbrirExt(glConexaoOrcPAF)
            If lComando = 0 Then gError ERRO_SEM_MENSAGEM
            
            sConteudo = String(255, 0)
            lErro = Comando_Executar(lComando, "SELECT MAX(IdAtualizacao) FROM VersaoBD", lIdAtualizacao)
            If lErro <> AD_SQL_SUCESSO Then gError ERRO_SEM_MENSAGEM
            
            lErro = Comando_BuscarProximo(lComando)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError ERRO_SEM_MENSAGEM
            
            If lErro = AD_SQL_SUCESSO Then
                sConteudo = CStr(lIdAtualizacao)
                If UCase(Trim(sConteudo)) <> UCase(Trim(CORPORATOR_ECF_VERSAO_BD_ORC)) Then gError 201229
            End If
            
            Call Comando_Fechar(lComando)
            
        End If
    
    End If
    
    TestaVersaoORC = SUCESSO
    
    Exit Function
    
Erro_TestaVersaoORC:

    TestaVersaoORC = gErr

    Select Case gErr

        Case ERRO_SEM_MENSAGEM
        
        Case 201229
            Call Rotina_ErroECF(vbOKOnly, ERRO_VERSAO_PGM_INCOMPATIVEL_BD_ORC, gErr, UCase(Trim(CORPORATOR_ECF_VERSAO_BD_ORC)), UCase(Trim(sConteudo)))
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB, gErr, Error$, 201228)

    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Public Function Venda_Grava_NFCE(ByVal objVenda As ClassVenda) As Long
'registra a autorizacao da nfce
Dim lErro As Long, lSequencial As Long, lSequencialOrc As Long
Dim alComando(1 To 4) As Long
Dim iIndice As Integer, iNFetpAmb As Integer, lNFCeProximoNum As Long
Dim bComTEF As Boolean, objMovCaixa As New ClassMovimentoCaixa

On Error GoTo Erro_Venda_Grava_NFCE

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_AbrirExt(glConexaoPAFECF)
        If alComando(iIndice) = 0 Then gError 214772
    Next

    lErro = CF_ECF("Caixa_Transacao_Abrir", lSequencial)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    lErro = Comando_Executar(alComando(1), "SELECT NFCeProximoNum FROM ConfiguracaoNFe", lNFCeProximoNum)
    If lErro <> AD_SQL_SUCESSO Then gError 201587

    lErro = Comando_BuscarProximo(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 201585
    
    If lNFCeProximoNum <> objVenda.objNFeInfo.lNFCeProximoNum Then gError 201586

    lErro = Comando_Executar(alComando(2), "UPDATE ConfiguracaoNFe SET NFCeProximoNum = ?", objVenda.objNFeInfo.lNFCeProximoNum + 1)
    If lErro <> AD_SQL_SUCESSO Then gError 214773
    
    lErro = Comando_Executar(alComando(4), "SELECT tpAmb FROM NFCeInfo WHERE LEFT(chNFe,34) = ? AND tpAmb = ?", iNFetpAmb, left(objVenda.objCupomFiscal.sNFeChaveAcesso, 34), objVenda.objCupomFiscal.iNFetpAmb)
    If lErro <> AD_SQL_SUCESSO Then gError 201588

    lErro = Comando_BuscarProximo(alComando(4))
    If lErro <> AD_SQL_SEM_DADOS Then
        objVenda.objCupomFiscal.sNFeChaveAcesso = ""
        objVenda.objCupomFiscal.lNumero = 0
        gError 214773
    End If
    
    lErro = Comando_Executar(alComando(3), "INSERT INTO NFCeInfo (versao,tpAmb,chNFe,data,hora,nProt,cStat,QRCode,ArqXml,ArqXmlPre,DataRegistro,HoraRegistro) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)", objVenda.objCupomFiscal.sNFEversao, objVenda.objCupomFiscal.iNFetpAmb, objVenda.objCupomFiscal.sNFeChaveAcesso, objVenda.objCupomFiscal.dtNFeData, objVenda.objCupomFiscal.dNFeHora, objVenda.objCupomFiscal.sNFenProt, objVenda.objCupomFiscal.sNFecStat, objVenda.objCupomFiscal.sNFCeQRCode, objVenda.objCupomFiscal.sNFeArqXml, objVenda.objCupomFiscal.sNFeArqXmlPre, Date, CDbl(Time))
    If lErro <> AD_SQL_SUCESSO Then gError 214774
    
    If glConexaoOrcPAF <> 0 Then
    
        'Abre a Transação
        Call CF_ECF("Caixa_Transacao_Abrir_Orc", lSequencialOrc)
    
    End If
        
    lErro = CF_ECF("Grava_Venda_Arquivo_EmTrans", objVenda)
    If lErro <> SUCESSO Then gError 201590
        
    If glConexaoOrcPAF <> 0 Then
    
        'Fecha a Transação
        lErro = CF_ECF("Caixa_Transacao_Fechar_Orc", lSequencialOrc)
        If lErro <> SUCESSO Then gError 201591
        
    End If
        
    bComTEF = False
    For Each objMovCaixa In objVenda.colMovimentosCaixa
    
        If objMovCaixa.iTipoCartao = TIPO_TEF Or objMovCaixa.iTipoCartao = TIPOMEIOPAGTOLOJA_TEFCHQ Then
        
            bComTEF = True
            Exit For
        
        End If
    
    Next
    
    If bComTEF Then
    
        lErro = TEF_PAYGO_NFCE_CONFIRMA_VENDA(objVenda)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        
    End If
    
    'Fechar a Transação
    lErro = CF_ECF("Caixa_Transacao_Fechar", lSequencial)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next
    
    objVenda.objNFeInfo.lNFCeProximoNum = objVenda.objNFeInfo.lNFCeProximoNum + 1
    
    Venda_Grava_NFCE = SUCESSO
    
    Exit Function
    
Erro_Venda_Grava_NFCE:

    Venda_Grava_NFCE = gErr

    Select Case gErr
    
        Case ERRO_SEM_MENSAGEM

        Case 214772
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)

        Case 214773
            Call Rotina_ErroECF(vbOKOnly, ERRO_ALTERACAO_CONFIGURACAONFE, gErr)

        Case 214774
            Call Rotina_ErroECF(vbOKOnly, ERRO_INCLUSAO_NFCEINFO, gErr)

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB, gErr, Error, 207920)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next

    Call CF_ECF("Caixa_Transacao_Rollback", glTransacaoPAFECF)
    Call CF_ECF("Caixa_Transacao_Rollback", glTransacaoOrcPAFECF)
    
    Exit Function
    
End Function

Function TEF_Imprime_PAYGO(ByVal sDescricao As String, ByVal dValor As Double, ByVal lCOO As Long, ByVal objMsg As Object, ByVal objTela As Object, ByVal objVenda As ClassVenda) As Long

Dim lErro As Long
Dim sNomeArq As String
Dim sLinha As String
Dim sSaltaLinha As String
Dim sConteudo As String
Dim vbMsg As VbMsgBoxResult
Dim sNomeArq1 As String
Dim objTEF As New ClassTEF
Dim lErro1 As Long
Dim sArquivoSTS As String
Dim sArquivoINTPOS As String
Dim sArquivoINTPOSBACK As String

On Error GoTo Erro_TEF_Imprime_PAYGO

    'imprime vinculado
    lErro = TEF_Imprime_Vinculado_PAYGO(sDescricao, dValor, lCOO, objMsg, objTela, objVenda)
    
    vbMsg = vbYes
    
    'se nao conseguiu imprimir os comprovantes e quer continuar tentando
    Do While vbMsg = vbYes And lErro <> SUCESSO
    
'        vbMsg = Rotina_AvisoECF(vbYesNo, "Impressora não responde, tentar novamente?")
        vbMsg = Rotina_AvisoECF(vbYesNo, "Ocorreu uma falha na impressão, tentar novamente?")
        
        If vbMsg = vbYes Then
        
'            'imprime gerencial
'            lErro = TEF_Imprime_Gerencial(objMsg, objTela, objVenda)
            'imprime vinculado
            lErro = TEF_Imprime_Vinculado_PAYGO(sDescricao, dValor, lCOO, objMsg, objTela, objVenda)
                
                
        Else
                
            Exit Do
                
        End If

    Loop
    
    lErro1 = TEF_Trata_Resp1(objTEF, Arquivo_Tef_Resp2_Prop)
    If lErro1 <> SUCESSO Then gError 214569
    
    'se imprimiu corretamente
    If lErro = SUCESSO Then
    
        '<> 1 significa que requer confirmação =1 significa que nao precisa de confirmacao
        If objTEF.iStatusConfirmacao <> 1 Then
    
            lErro = TEF_Confirma_Transacao1_PAYGO(objVenda)
            If lErro <> SUCESSO Then gError 133689
    
        Else
        
            'Atualiza o arquivo
            lErro = WritePrivateProfileString(APLICACAO_ECF, "StatusTEF", "", NOME_ARQUIVO_CAIXA)
            If lErro = 0 Then gError 214544
    
        End If
    
    
        sArquivoSTS = Dir(Arquivo_Tef_Resp1_Prop)
        If sArquivoSTS <> "" Then ECF_Apaga_Arquivo Arquivo_Tef_Resp1_Prop
    
        sArquivoINTPOS = Dir(Arquivo_Tef_Resp2_Prop)
        If sArquivoINTPOS <> "" Then ECF_Apaga_Arquivo Arquivo_Tef_Resp2_Prop
    
        sArquivoINTPOSBACK = Dir(Arquivo_Tef_Resp2_Backup_Prop)
        If sArquivoINTPOSBACK <> "" Then ECF_Apaga_Arquivo Arquivo_Tef_Resp2_Backup_Prop
    
    
'        sNomeArq1 = gsDirMVTEF & "TEF_" & objVenda.objCupomFiscal.lNumero & "_" & "CPV" & "_" & "*" & ".rsp"
'
'        sNomeArq = Dir(sNomeArq1)
'
'        Do While Len(sNomeArq) > 0
'
'            ECF_Apaga_Arquivo gsDirMVTEF & sNomeArq
'
'            sNomeArq = Dir
'
'        Loop
        
    Else
    
        'se houve falha de impressao e nao quer tentar novamente
    
        lErro = TEF_NaoConfirma_Transacao1_PAYGO(objTela, objVenda)
        If lErro <> SUCESSO Then gError 133690
    
        lErro = TEF_Trata_Resp1(objTEF, Arquivo_Tef_Resp2_Prop)
        If lErro <> SUCESSO Then gError 214585
    
        objVenda.objCupomFiscal.dValorDescontoTEF = objVenda.objCupomFiscal.dValorDescontoTEF - objTEF.dValorDesconto
        objVenda.objCupomFiscal.dValorTrocoTEF = objVenda.objCupomFiscal.dValorTrocoTEF - objTEF.dValorTroco
    
        'cancela os cartoes ja confirmados e nao confirma o ultimo
        lErro = CF_ECF("TEF_CNC_PAYGO", objVenda, objMsg, objTela)
        If lErro <> SUCESSO Then gError 133806
        
        sArquivoSTS = Dir(Arquivo_Tef_Resp1_Prop)
        If sArquivoSTS <> "" Then ECF_Apaga_Arquivo Arquivo_Tef_Resp1_Prop
    
        sArquivoINTPOS = Dir(Arquivo_Tef_Resp2_Prop)
        If sArquivoINTPOS <> "" Then ECF_Apaga_Arquivo Arquivo_Tef_Resp2_Prop
    
        sArquivoINTPOSBACK = Dir(Arquivo_Tef_Resp2_Backup_Prop)
        If sArquivoINTPOSBACK <> "" Then ECF_Apaga_Arquivo Arquivo_Tef_Resp2_Backup_Prop
    
        gError 133728
        
    End If
    
    If Not objVenda Is Nothing Then

        sNomeArq = "a"

        Do While Len(sNomeArq) > 0
        
            sNomeArq = Dir(gsDirMVTEF & "TEF_" & objVenda.objCupomFiscal.lNumero & "_" & "*.txt")
    
            If Len(sNomeArq) > 0 Then ECF_Apaga_Arquivo gsDirMVTEF & sNomeArq
            
        Loop

    End If
    
'    Call WritePrivateProfileString(APLICACAO_ECF, "CancelamentoTEF", "", NOME_ARQUIVO_CAIXA)
'
    TEF_Imprime_PAYGO = SUCESSO

    Exit Function

Erro_TEF_Imprime_PAYGO:

    TEF_Imprime_PAYGO = gErr
    
    If Not objVenda Is Nothing Then

        sNomeArq = "a"

        Do While Len(sNomeArq) > 0
        
            sNomeArq = Dir(gsDirMVTEF & "TEF_" & objVenda.objCupomFiscal.lNumero & "_" & "*.txt")
    
            If Len(sNomeArq) > 0 Then ECF_Apaga_Arquivo gsDirMVTEF & sNomeArq
            
        Loop

    End If
    
    Select Case gErr
    
        Case 133689, 133690, 133806, 133807, 214569, 214585
        
        Case 214544
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, APLICACAO_ECF, "StatusTEF", NOME_ARQUIVO_CAIXA)
    
        Case 133728
            Call Rotina_ErroECF(vbOKOnly, ERRO_TEF_FALHA_IMPRESSAO, gErr, objTEF.sRede, objTEF.sNSU, objTEF.dValorTotal)
    
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149343)
    
    End Select

End Function


Private Function TEF_Imprime_Vinculado_PAYGO1(ByVal sDescricao As String, ByVal dValor As Double, ByVal lCOO As Long, ByVal objMsg As Object, ByVal objTela As Object, ByVal objVenda As ClassVenda, ByVal sVia As String, ByVal iIndice As Integer) As Long

Dim lErro As Long
Dim sNomeArq As String
Dim sLinha As String
Dim sSaltaLinha As String
Dim sConteudo As String
Dim sRetorno As Long
Dim sConteudo1 As String

On Error GoTo Erro_TEF_Imprime_Vinculado_PAYGO1

    sNomeArq = Dir(gsDirMVTEF & "TEF_" & objVenda.objCupomFiscal.lNumero & "_" & CStr(iIndice) & "_" & sVia & ".txt")
    
    If Len(sNomeArq) > 0 Then

        sSaltaLinha = Chr(13) + Chr(10)
            
'        lErro = AFRAC_ImprimirVinculado(sSaltaLinha)
'        If lErro <> SUCESSO Then
'            lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Vinculado")
'            If lErro <> SUCESSO Then gError 133682
'        End If
'
'
'        lErro = AFRAC_ImprimirVinculado(sSaltaLinha)
'        If lErro <> SUCESSO Then
'            lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Vinculado")
'            If lErro <> SUCESSO Then gError 133682
'        End If
'
'        lErro = AFRAC_ImprimirVinculado(sSaltaLinha)
'        If lErro <> SUCESSO Then
'            lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Vinculado")
'            If lErro <> SUCESSO Then gError 133682
'        End If

'                    lErro = TEF_Imprime_Vinculado1(sDescricao, dValor, lCOO, objMsg, objTela, objVenda, gsDirMVTEF & sNomeArq)
'                    If lErro <> SUCESSO Then gError 133778
            
        Open gsDirMVTEF & sNomeArq For Input As #1
                
        If Not EOF(1) Then Line Input #1, sLinha
                
        Do While Not EOF(1)
        
            Line Input #1, sLinha
    
            lErro = AFRAC_ImprimirVinculado(sLinha)
            lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Vinculado")
            If lErro <> SUCESSO Then gError 133683
        
        Loop
                
                
                
        Close #1
            
    End If


    TEF_Imprime_Vinculado_PAYGO1 = SUCESSO

    Exit Function

Erro_TEF_Imprime_Vinculado_PAYGO1:

    Close #1

    TEF_Imprime_Vinculado_PAYGO1 = gErr
    
    Select Case gErr
    
'        Case 126570, 126571, 133678, 133680, 133681, 133682, 133683, 133730, 133731
'            Call AFRAC_DesbloqueiaTecladoMouse
    
        Case 126570, 133682, 133683, 214607
            Call AFRAC_DesbloqueiaTecladoMouse
    
'        Case 133679, 133684, 133771, 133777, 133778, 204275, 204276
    
        Case 204275
        
'        Case 133685, 133729
'            'desbloqueia mouse e teclado
'            Call AFRAC_DesbloqueiaTecladoMouse
    
'        Case 133697, 133698, 133824, 133825
'            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, APLICACAO_ECF, "StatusTEF", NOME_ARQUIVO_CAIXA)
    
        Case 133697, 133825
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, APLICACAO_ECF, "StatusTEF", NOME_ARQUIVO_CAIXA)
    
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 214534)
    
    End Select

End Function

Private Function TEF_Ler_Parametros_Impressao(objTEF As ClassTEF, objVenda As ClassVenda, ByVal iIndice As Integer) As Long

Dim lErro As Long
Dim sNomeArq As String
Dim sNomeArq1 As String
Dim sLinha As String

On Error GoTo Erro_TEF_Ler_Parametros_Impressao

    sNomeArq1 = Dir(gsDirMVTEF & "TEF_" & objVenda.objCupomFiscal.lNumero & "_" & iIndice & "_" & "*.txt")
    
    If Len(sNomeArq1) > 0 Then

        sNomeArq = gsDirMVTEF & sNomeArq1
        
        Open sNomeArq For Input As #1
                
        Line Input #1, sLinha
    
        objTEF.iViasComprovante = StrParaInt(left(sLinha, 1))
        objTEF.sComando = Mid(sLinha, 2, 3)
        objTEF.iTamViaCliente = StrParaInt(Mid(sLinha, 5, 3))
        objTEF.iTamViaEstab = StrParaInt(Mid(sLinha, 8, 3))
        objTEF.iTamReduzido = StrParaInt(Mid(sLinha, 11, 3))
        objTEF.iTamViaUnica = StrParaInt(Mid(sLinha, 14, 3))
        objTEF.iStatusConfirmacao = StrParaInt(Mid(sLinha, 17, 1))
        objTEF.sRede = Mid(sLinha, 18, 8)
        objTEF.sNSU = Mid(sLinha, 26, 12)
        objTEF.dValorTotal = StrParaDbl(Mid(sLinha, 38, 12)) / 100
        
        Close #1

    Else
        gError 214541

    End If

    TEF_Ler_Parametros_Impressao = SUCESSO

    Exit Function

Erro_TEF_Ler_Parametros_Impressao:

    TEF_Ler_Parametros_Impressao = gErr
    
    Select Case gErr
    
        'arquivo com o indice em questao nao existe
        Case 214541
    
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 214539)
    
    End Select


End Function

Function TEF_Confirma_Transacao_PAYGO(ByVal objVenda As ClassVenda, Optional ByVal iExibirMsg As Integer = 0, Optional iSitefNaoRespondeu1 As Integer = 0) As Long

Dim lErro As Long
Dim sLinha As String
Dim sConteudo As String
Dim sArqSTS As String
Dim sArqINTPOS As String
Dim iTentativas As Integer
Dim sNSU As String
Dim iSitefNaoRespondeu As Integer
Dim sFinalizacao As String
Dim sArquivoSTS As String
Dim iIndice As Integer
Dim sNomeArqDest As String
Dim sArquivoINTPOS As String
Dim sComando As String
Dim dValorTroco As Double
Dim dValorDesconto As Double

On Error GoTo Erro_TEF_Confirma_Transacao_PAYGO

    Call ECF_Grava_Log("TEF_Confirma_Transacao_PAYGO 01-> Núm:" & CStr(objVenda.objCupomFiscal.lNumero) & " Núm.Orc: " & CStr(objVenda.objCupomFiscal.lNumOrcamento) & " Chv.NFCe: " & CStr(objVenda.objCupomFiscal.sNFeChaveAcesso), "INFO")

    Call ECF_Grava_Log("TEF_Confirma_Transacao_PAYGO 02-> Arquivo_Tef_Resp1_Prop:" & Arquivo_Tef_Resp1_Prop, "INFO")

    sArquivoSTS = Dir(Arquivo_Tef_Resp1_Prop)
    If Len(sArquivoSTS) > 0 Then ECF_Apaga_Arquivo Arquivo_Tef_Resp1_Prop

    Do While True

        sConteudo = ""

        'Abre o arquivo da venda
        'Open Arquivo_Tef_Resp2_Prop For Input As #1
        
        Call ECF_Grava_Log("TEF_Confirma_Transacao_PAYGO 03-> Arquivo_Tef_Resp2_Prop:" & Arquivo_Tef_Resp2_Prop, "INFO")
        
        lErro = ECF_Abrir_Arquivo(Arquivo_Tef_Resp2_Prop, 1)
        If lErro <> SUCESSO Then gError 214585
        
        
        Do While Not EOF(1)
    
            Line Input #1, sLinha
            
            If Mid(sLinha, 1, 7) = "000-000" Then
                sComando = right(sLinha, Len(sLinha) - 10)
            End If
            
            If (Mid(sLinha, 1, 7) = "001-000") Or _
               (Mid(sLinha, 1, 7) = "002-000") Or _
               (Mid(sLinha, 1, 7) = "010-000") Or _
               (Mid(sLinha, 1, 7) = "027-000") Then
                sConteudo = sConteudo + sLinha + Chr(13) + Chr(10)
                
            
                If Mid(sLinha, 1, 7) = "027-000" Then
                    sFinalizacao = Mid(sLinha, 11, Len(sLinha) - 10)
                End If
            
            End If
            
            'valor troco
            If Mid(sLinha, 1, 7) = "708-000" Then
                dValorTroco = StrParaDbl(Mid(sLinha, 11, Len(sLinha) - 10)) / 100
            End If
        
            'valor desconto
            If Mid(sLinha, 1, 7) = "709-000" Then
                dValorDesconto = StrParaDbl(Mid(sLinha, 11, Len(sLinha) - 10)) / 100
            End If
                        
        Loop
        
        Close #1
        
        sConteudo = sConteudo + "733-000 = 211" + Chr(13) + Chr(10) 'versao da interface 2.11
        sConteudo = sConteudo + "738-000 = " & TEF_PAYGO_CERTIFICADO + Chr(13) + Chr(10)
        sConteudo = sConteudo + "999-999 = 0" + Chr(13) + Chr(10) 'versao da interface 2.11
        
        sConteudo = "000-000 = CNF" + Chr(13) + Chr(10) + sConteudo
        
        Call ECF_Grava_Log("TEF_Confirma_Transacao_PAYGO 04-> Arquivo_Tef_Temp_Prop:" & Arquivo_Tef_Temp_Prop, "INFO")
        
        'Open Arquivo_Tef_Temp_Prop For Binary As #1
        
        lErro = ECF_Abrir_Arquivo_Binario(Arquivo_Tef_Temp_Prop, 1)
        If lErro <> SUCESSO Then gError 214585
        
        Put #1, , sConteudo
        
        Close #1
        
        Call ECF_Grava_Log("TEF_Confirma_Transacao_PAYGO 04.01-> Arquivo_Tef_Req_Prop:" & Arquivo_Tef_Req_Prop, "INFO")
        
'        If StrParaDbl(sNSU) <> 0 Then FileCopy Arquivo_Tef_Temp_Prop, Arquivo_Tef_Req_Prop
         If Len(sFinalizacao) > 0 Then 'FileCopy Arquivo_Tef_Temp_Prop, Arquivo_Tef_Req_Prop
            lErro = ECF_Transfere_Arquivo(Arquivo_Tef_Temp_Prop, Arquivo_Tef_Req_Prop)
            If lErro <> SUCESSO Then gError 214585
         End If
         
'        If giTipoTEF = TIPOTEF_SITEF Then
'
'            'verifica se tem a confirmacao/nao confirmacao da transacao anterior guardada
'            If Len(Dir(Arquivo_Tef_Req_Backup1_Prop)) > 0 Then
'                 If Len(sFinalizacao) > 0 Then FileCopy Arquivo_Tef_Temp_Prop, Arquivo_Tef_Req_Backup2_Prop
'            Else
'                 If Len(sFinalizacao) > 0 Then FileCopy Arquivo_Tef_Temp_Prop, Arquivo_Tef_Req_Backup1_Prop
'            End If
'
'        End If
        
        Call ECF_Grava_Log("TEF_Confirma_Transacao_PAYGO 05-> Arquivo_Tef_Temp_Prop:" & Arquivo_Tef_Temp_Prop, "INFO")
        
        ECF_Apaga_Arquivo Arquivo_Tef_Temp_Prop
    
'        If StrParaDbl(sNSU) = 0 Then Exit Do
         If Len(sFinalizacao) = 0 Then Exit Do
        
        For iTentativas = 1 To 7
        
            sArqSTS = Dir(Arquivo_Tef_Resp1_Prop)
            If sArqSTS <> "" Then
                
                ECF_Apaga_Arquivo Arquivo_Tef_Resp1_Prop
                
'                If giTipoTEF = TIPOTEF_SITEF Then
'                    If Len(Dir(Arquivo_Tef_Req_Backup2_Prop)) > 0 Then
'                        ECF_Apaga_Arquivo Arquivo_Tef_Req_Backup2_Prop
'                    Else
'                        ECF_Apaga_Arquivo Arquivo_Tef_Req_Backup1_Prop
'                    End If
'                End If
                
                Exit Do
            End If
        
            Sleep 1000
            
        Next
    
        If iTentativas > 7 Then
        
'            If giTipoTEF = TIPOTEF_SITEF Then
'
'
'                iSitefNaoRespondeu = 1
'                iSitefNaoRespondeu1 = 1
'                Exit Do
'
'
'            Else
            
                Call Rotina_AvisoECF(vbOKOnly, ERRO_TEF_NAO_ATIVO, gErr)
            
'            End If
            
        End If
    
    Loop
    
    Call ECF_Grava_Log("TEF_Confirma_Transacao_PAYGO 06", "INFO")
    
    'se a confirmacao é de uma venda ==> vai gerar o arquivo .rsp que é uma copia do intpos.001 para permitir cancelamento
    If left(sComando, 3) = "CRT" Then
    
        iIndice = 0
        
        
        'descobre o indice do ultimo cartao que foi processado
        Do While True
    
            iIndice = iIndice + 1
    
            sNomeArqDest = gsDirMVTEF & "TEF_" & objVenda.objCupomFiscal.lNumero & "_" & CStr(iIndice) & ".rsp"
            
            If Len(Dir(sNomeArqDest)) = 0 Then Exit Do
            
        Loop
    
        'gera o arquivo com extensao rsp que serve de base para o cancelamento no caso de multiplos cartoes
        
        sNomeArqDest = gsDirMVTEF & "TEF_" & objVenda.objCupomFiscal.lNumero & "_" & CStr(iIndice) & ".rsp"
        
        Call ECF_Grava_Log("TEF_Confirma_Transacao_PAYGO 07-> Arquivo_Tef_Resp2_Prop:" & Arquivo_Tef_Resp2_Prop, "INFO")
        
        sArquivoINTPOS = Dir(Arquivo_Tef_Resp2_Prop)
        If sArquivoINTPOS <> "" Then FileCopy Arquivo_Tef_Resp2_Prop, sNomeArqDest
        

    End If
    
    
'    sArqINTPOS = Dir(Arquivo_Tef_Resp2_Prop)
'    If sArqINTPOS <> "" Then
'        ECF_Apaga_Arquivo Arquivo_Tef_Resp2_Prop
'    End If
    
    Call ECF_Grava_Log("TEF_Confirma_Transacao_PAYGO 08", "INFO")
    
'    If iExibirMsg = 0 And iSitefNaoRespondeu <> 1 Then
    If iExibirMsg = 0 Then
    
        'Atualiza o arquivo
        lErro = WritePrivateProfileString(APLICACAO_ECF, "StatusTEF", "", NOME_ARQUIVO_CAIXA)
        If lErro = 0 Then gError 133701
    
    
        'funcao que cria/altera a chave e grava no caixaconfig.ini
        lErro = CF_ECF("CaixaConfig_Chave")
        If lErro <> SUCESSO Then gError 204280

    
    End If
    
    Call ECF_Grava_Log("TEF_Confirma_Transacao_PAYGO 09", "INFO")
    
    TEF_Confirma_Transacao_PAYGO = SUCESSO

    Exit Function

Erro_TEF_Confirma_Transacao_PAYGO:

    TEF_Confirma_Transacao_PAYGO = gErr
    
    Select Case gErr
    
        Case 133701
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, APLICACAO_ECF, "StatusTEF", NOME_ARQUIVO_CAIXA)
    
        Case 204280, 214585
    
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149349)
    
    End Select

End Function

Function TEF_Confirma_Transacao1_PAYGO(objVenda As ClassVenda) As Long

Dim lErro As Long
Dim sNomeArq As String
Dim sNomeArq1 As String
Dim iSitefNaoRespondeu As Integer
Dim iSitefNaoRespondeu1 As Integer
Dim sNomeArqBack As String

On Error GoTo Erro_TEF_Confirma_Transacao1_PAYGO

    lErro = TEF_Confirma_Transacao_PAYGO(objVenda, 1, iSitefNaoRespondeu1)
    If lErro <> SUCESSO Then gError 126583

'    iSitefNaoRespondeu = iSitefNaoRespondeu1
'
'    sNomeArq1 = gsDirMVTEF & "TEF_" & objVenda.objCupomFiscal.lNumero & "_" & "CPV" & "_" & "*" & ".rsp"
'
'    sNomeArq = Dir(sNomeArq1)
'
'    Do While Len(sNomeArq) > 0
'
'        'rotina colocada para confirmar todos os comprovantes em multiplos cartoes
'
'        If giTipoTEF = TIPOTEF_SITEF Then
'
'            FileCopy gsDirMVTEF & sNomeArq, Arquivo_Tef_Resp2_Prop
'
'            iSitefNaoRespondeu1 = 0
'
'            lErro = TEF_Confirma_Transacao(1, iSitefNaoRespondeu1)
'            If lErro <> SUCESSO Then gError 126584
'
'            iSitefNaoRespondeu = iSitefNaoRespondeu + iSitefNaoRespondeu1
'
'        End If
'
'        If iSitefNaoRespondeu1 = 0 Then ECF_Apaga_Arquivo gsDirMVTEF & sNomeArq
'
'        sNomeArq = Dir
'
'    Loop

    If iSitefNaoRespondeu = 0 Then

        'Atualiza o arquivo
        lErro = WritePrivateProfileString(APLICACAO_ECF, "StatusTEF", "", NOME_ARQUIVO_CAIXA)
        If lErro = 0 Then gError 126585

        'funcao que cria/altera a chave e grava no caixaconfig.ini
        lErro = CF_ECF("CaixaConfig_Chave")
        If lErro <> SUCESSO Then gError 204291

    End If
    
    TEF_Confirma_Transacao1_PAYGO = SUCESSO

    Exit Function

Erro_TEF_Confirma_Transacao1_PAYGO:

    TEF_Confirma_Transacao1_PAYGO = gErr
    
    Select Case gErr
    
        Case 126583, 126584, 204291
    
        Case 126585
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, APLICACAO_ECF, "StatusTEF", NOME_ARQUIVO_CAIXA)
    
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149365)
    
    End Select

End Function

Function TEF_NaoConfirma_Transacao1_PAYGO(ByVal objTela As Object, objVenda As ClassVenda) As Long

Dim lErro As Long
Dim iSitefNaoRespondeu1 As Integer
Dim iSitefNaoRespondeu As Integer
Dim sNomeArq As String
Dim sNomeArq1 As String
Dim sNomeArqBack As String

On Error GoTo Erro_TEF_NaoConfirma_Transacao1_PAYGO

    lErro = TEF_NaoConfirma_Transacao_PAYGO(objTela, 1, iSitefNaoRespondeu1)
    If lErro <> SUCESSO Then gError 126578
    
    
    
'    iSitefNaoRespondeu = iSitefNaoRespondeu1
'
'    If giTipoTEF = TIPOTEF_SITEF Then
'
'        sNomeArq1 = gsDirMVTEF & "TEF_" & objVenda.objCupomFiscal.lNumero & "_" & "CPV" & "_" & "*" & ".rsp"
'
'        sNomeArq = Dir(sNomeArq1)
'
'        Do While Len(sNomeArq) > 0
'
'            If giTipoTEF = TIPOTEF_SITEF Then
'
'                FileCopy gsDirMVTEF & sNomeArq, Arquivo_Tef_Resp2_Prop
'
'                iSitefNaoRespondeu1 = 0
'
'                lErro = TEF_NaoConfirma_Transacao(objTela, 1, iSitefNaoRespondeu1)
'                If lErro <> SUCESSO Then gError 126579
'
'                iSitefNaoRespondeu = iSitefNaoRespondeu + iSitefNaoRespondeu1
'
'            End If
'
'            If iSitefNaoRespondeu1 = 0 Then ECF_Apaga_Arquivo gsDirMVTEF & sNomeArq
'
'            sNomeArq = Dir
'
'        Loop
'
'    End If
'
'    If giTipoTEF = TIPOTEF_SITEF And iSitefNaoRespondeu = 0 Then
'        Call Rotina_AvisoECF(vbOKOnly, ERRO_SITEF_TRN_NAO_EFETUADA)
'    End If
'
    lErro = TEF_Libera_Impressora(objTela)
    If lErro <> SUCESSO Then gError 126580

    If iSitefNaoRespondeu = 0 Then

        'Indica que a nao confirmacao foi completada para caso cair a energia
        lErro = WritePrivateProfileString(APLICACAO_ECF, "StatusTEF", "", NOME_ARQUIVO_CAIXA)
        If lErro = 0 Then gError 126581

        'funcao que cria/altera a chave e grava no caixaconfig.ini
        lErro = CF_ECF("CaixaConfig_Chave")
        If lErro <> SUCESSO Then gError 204290

    End If

    TEF_NaoConfirma_Transacao1_PAYGO = SUCESSO

    Exit Function

Erro_TEF_NaoConfirma_Transacao1_PAYGO:

    TEF_NaoConfirma_Transacao1_PAYGO = gErr
    
    Select Case gErr
    
        Case 126578, 126579, 126580, 204290
    
        Case 126581
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, APLICACAO_ECF, "StatusTEF", NOME_ARQUIVO_CAIXA)
    
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149364)
    
    End Select
    
    Exit Function

End Function

Private Function TEF_NaoConfirma_Transacao_PAYGO(ByVal objTela As Object, Optional ByVal iExibirMsg As Integer = 0, Optional iSitefNaoRespondeu1 As Integer = 0) As Long

Dim lErro As Long
Dim sLinha As String
Dim sConteudo As String
Dim sArqSTS As String
Dim sArqINTPOS As String
Dim sRede As String
Dim sNSU As String
Dim dValor As Double
Dim sValor As String
Dim iTentativas As Integer
Dim iSitefNaoRespondeu As Integer
Dim sFinalizacao As String
Dim sArquivoSTS As String

On Error GoTo Erro_TEF_NaoConfirma_Transacao_PAYGO

    sArquivoSTS = Dir(Arquivo_Tef_Resp1_Prop)
    If Len(sArquivoSTS) > 0 Then ECF_Apaga_Arquivo Arquivo_Tef_Resp1_Prop

    Do While True
    
        sConteudo = ""
    
        'Abre o arquivo da venda
        'Open Arquivo_Tef_Resp2_Prop For Input As #1
        
        lErro = ECF_Abrir_Arquivo(Arquivo_Tef_Resp2_Prop, 1)
        If lErro <> SUCESSO Then gError 214586
        
        Do While Not EOF(1)
    
            Line Input #1, sLinha
            
            
            If (Mid(sLinha, 1, 7) = "001-000") Or _
               (Mid(sLinha, 1, 7) = "002-000") Or _
               (Mid(sLinha, 1, 7) = "010-000") Or _
               (Mid(sLinha, 1, 7) = "027-000") Then
                sConteudo = sConteudo + sLinha + Chr(13) + Chr(10)
                
            
                If Mid(sLinha, 1, 7) = "027-000" Then
                    sFinalizacao = Mid(sLinha, 11, Len(sLinha) - 10)
                End If
            
            End If
            
        Loop
        
        
        Close #1
        
        sConteudo = sConteudo + "733-000 = 211" + Chr(13) + Chr(10) 'versao da interface 2.11
        sConteudo = sConteudo + "738-000 = " & TEF_PAYGO_CERTIFICADO + Chr(13) + Chr(10)  'Código obtido junto à NTK Solutions no início do processo de certificação da Automação Comercial
        sConteudo = sConteudo + "999-999 = 0" + Chr(13) + Chr(10) 'versao da interface 2.11
        
        sConteudo = "000-000 = NCN" + Chr(13) + Chr(10) + sConteudo
        
        Open Arquivo_Tef_Temp_Prop For Binary As #1
        
        Put #1, , sConteudo
        
        Close #1
        
        
'        If StrParaDbl(sNSU) <> 0 Then FileCopy Arquivo_Tef_Temp_Prop, Arquivo_Tef_Req_Prop
         If Len(sFinalizacao) > 0 Then FileCopy Arquivo_Tef_Temp_Prop, Arquivo_Tef_Req_Prop
        
'        If giTipoTEF = TIPOTEF_SITEF Then
'
'            If Len(Dir(Arquivo_Tef_Req_Backup1_Prop)) > 0 Then
'                 If Len(sFinalizacao) > 0 Then FileCopy Arquivo_Tef_Temp_Prop, Arquivo_Tef_Req_Backup2_Prop
'            Else
'                 If Len(sFinalizacao) > 0 Then FileCopy Arquivo_Tef_Temp_Prop, Arquivo_Tef_Req_Backup1_Prop
'            End If
'
'        End If
        
        ECF_Apaga_Arquivo Arquivo_Tef_Temp_Prop
    
'        If StrParaDbl(sNSU) = 0 Then Exit Do
    
        If Len(sFinalizacao) = 0 Then Exit Do
    
        For iTentativas = 1 To 7
        
            sArqSTS = Dir(Arquivo_Tef_Resp1_Prop)
            
            If sArqSTS <> "" Then
                ECF_Apaga_Arquivo Arquivo_Tef_Resp1_Prop
                
'                If giTipoTEF = TIPOTEF_SITEF Then
'                    If Len(Dir(Arquivo_Tef_Req_Backup2_Prop)) > 0 Then
'                        ECF_Apaga_Arquivo Arquivo_Tef_Req_Backup2_Prop
'                    Else
'                        ECF_Apaga_Arquivo Arquivo_Tef_Req_Backup1_Prop
'                    End If
'                End If
                
                Exit Do
            End If
        
            Sleep 1000
            
        Next
        
        If iTentativas > 7 Then
        
'            If giTipoTEF = TIPOTEF_SITEF Then
'
'                iSitefNaoRespondeu = 1
'                iSitefNaoRespondeu1 = 1
''                Call Rotina_AvisoECF(vbOKOnly, ERRO_SITEF_NAO_ATIVO, gErr)
'                Exit Do
'            Else
            
                Call Rotina_AvisoECF(vbOKOnly, ERRO_TEF_NAO_ATIVO, gErr)
            
'            End If
            
        End If
    
    Loop
    
    
    If iExibirMsg = 0 Then
    
'        If giTipoTEF = TIPOTEF_SITEF And iSitefNaoRespondeu <> 1 Then
'            Call Rotina_AvisoECF(vbOKOnly, ERRO_SITEF_TRN_NAO_EFETUADA)
'        End If
'
'
'        lErro = TEF_Libera_Impressora(objTela)
'        If lErro <> SUCESSO Then gError 133808
'
'        If iSitefNaoRespondeu <> 1 Then
        
            'Indica que a nao confirmacao foi completada para caso cair a energia
            lErro = WritePrivateProfileString(APLICACAO_ECF, "StatusTEF", "", NOME_ARQUIVO_CAIXA)
            If lErro = 0 Then gError 133702
        
            'funcao que cria/altera a chave e grava no caixaconfig.ini
            lErro = CF_ECF("CaixaConfig_Chave")
            If lErro <> SUCESSO Then gError 204281
        
        
'        End If
    
    End If
    
    TEF_NaoConfirma_Transacao_PAYGO = SUCESSO

    Exit Function

Erro_TEF_NaoConfirma_Transacao_PAYGO:

    TEF_NaoConfirma_Transacao_PAYGO = gErr
    
    Select Case gErr
    
        Case 133702
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, APLICACAO_ECF, "StatusTEF", NOME_ARQUIVO_CAIXA)
    
        Case 133808, 204281, 214586
    
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149350)
    
    End Select

End Function


Function TEF_ADM_PAYGO(ByVal objMsg As Object, ByVal objTela As Object) As Long
    
Dim lErro As Long
Dim sArquivoSTS As String
Dim sArquivoINTPOS As String
Dim sArquivoINTPOSBACK As String
Dim objTEF As New ClassTEF
Dim objVenda As New ClassVenda
Dim sNomeArq As String


On Error GoTo Erro_TEF_ADM_PAYGO
    
    sArquivoSTS = Dir(Arquivo_Tef_Resp1_Prop)
    If sArquivoSTS <> "" Then ECF_Apaga_Arquivo Arquivo_Tef_Resp1_Prop
    
    sArquivoINTPOS = Dir(Arquivo_Tef_Resp2_Prop)
    If sArquivoINTPOS <> "" Then ECF_Apaga_Arquivo Arquivo_Tef_Resp2_Prop
        
    sArquivoINTPOSBACK = Dir(Arquivo_Tef_Resp2_Backup_Prop)
    If sArquivoINTPOSBACK <> "" Then ECF_Apaga_Arquivo Arquivo_Tef_Resp2_Backup_Prop
        
'    lErro = TEF_CNF_NCN_Pendente()
'    If lErro <> SUCESSO Then gError 126577
        
    'Adiciona na variável global
    glNumProxIdentificacao = glNumProxIdentificacao + 1
    
    'Atualiza o arquivo
    lErro = WritePrivateProfileString(APLICACAO_ECF, "NumProxIdent", CStr(glNumProxIdentificacao), NOME_ARQUIVO_CAIXA)
    If lErro = 0 Then gError 214597
        
    'funcao que cria/altera a chave e grava no caixaconfig.ini
    lErro = CF_ECF("CaixaConfig_Chave")
    If lErro <> SUCESSO Then gError 204282
        
    'Abre o arquivo Temporário
    Open Arquivo_Tef_Temp_Prop For Append As #1
        
    'Informa dados de pagamento
    Print #1, "000-000 = ADM"
    Print #1, "001-000 = " & CStr(glNumProxIdentificacao)
    Print #1, "706-000 = 31" 'funcionalidades suportadas pela automacao 1=troco 2=desconto 4=valor fixo 8=vias diferenciadas(cliente\estabelecimento) 16=cupom reduzido
    Print #1, "716-000 = Corporator Serviços de Informática Ltda" 'razao social da empresa responsavel pelo desenv. da automação comercial
    Print #1, "733-000 = 211" 'versao da interface 2.11
    Print #1, "735-000 = CORPORATOR ECF" 'nome da automacao comercial
    Print #1, "736-000 = 3" 'nome da automacao comercial
    Print #1, "738-000 = " & TEF_PAYGO_CERTIFICADO 'Código obtido junto à NTK Solutions no início do processo de certificação da Automação Comercial
    Print #1, "999-999 = 0"
    
    Close #1
    
    'renomeando os arquivos
    FileCopy Arquivo_Tef_Temp_Prop, Arquivo_Tef_Req_Prop
    
    ECF_Apaga_Arquivo Arquivo_Tef_Temp_Prop
    
    'Jones 20/06/2016 - nao estava imprimindo
    objVenda.objCupomFiscal.lNumero = 999999
   
    lErro = TEF_Trata_Resp_PAYGO(objTEF, objMsg, objTela, objVenda)
    If lErro <> SUCESSO Then gError 133722
   
    Set objVenda.objTEF = objTEF
    
    lErro = TEF_Imprime_ADM_PAYGO(objVenda, objMsg, objTela)
    If lErro <> SUCESSO Then gError 133726
    
    TEF_ADM_PAYGO = SUCESSO

    Exit Function
    
Erro_TEF_ADM_PAYGO:
    
    TEF_ADM_PAYGO = gErr
    
    If Not objVenda Is Nothing Then

        sNomeArq = "a"

        Do While Len(sNomeArq) > 0
        
            sNomeArq = Dir(gsDirMVTEF & "TEF_" & objVenda.objCupomFiscal.lNumero & "_" & "*.txt")
            
            If Len(sNomeArq) > 0 Then ECF_Apaga_Arquivo gsDirMVTEF & sNomeArq
            
        Loop

    End If
    
    
    Select Case gErr
    
        Case 5
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO2, gErr)
    
        Case 126577, 133722, 133726, 204282
    
        Case 214597
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, APLICACAO_ECF, "NumProxIdent", NOME_ARQUIVO_CAIXA)
    
        Case 133723
                Call TEF_NaoConfirma_Transacao(objTela)
        
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149351)

    End Select
    
    Exit Function
         
End Function


Function TEF_Imprime_ADM_PAYGO(ByVal objVenda As ClassVenda, ByVal objMsg As Object, ByVal objTela As Object) As Long

Dim lErro As Long
Dim sNomeArq As String
Dim sLinha As String
Dim sSaltaLinha As String
Dim sConteudo As String
Dim vbMsg As VbMsgBoxResult
Dim sArquivoSTS As String
Dim sArquivoINTPOS As String
Dim sArquivoINTPOSBACK As String
Dim objTEF As New ClassTEF
Dim lErro1 As Long

On Error GoTo Erro_TEF_Imprime_ADM_PAYGO

    'imprime gerencial
    lErro = TEF_Imprime_Gerencial_PAYGO(objMsg, objTela, objVenda)
    
    vbMsg = vbYes
    
    'se nao conseguiu imprimir os comprovantes e quer continuar tentando
    Do While vbMsg = vbYes And lErro <> SUCESSO
    
        vbMsg = Rotina_AvisoECF(vbYesNo, "Impressora não responde, tentar novamente?")
        
        If vbMsg = vbYes Then
        
            'imprime gerencial
            lErro = TEF_Imprime_Gerencial_PAYGO(objMsg, objTela, objVenda)
        
        End If

    Loop
    
    lErro1 = TEF_Trata_Resp1(objTEF, Arquivo_Tef_Resp2_Prop)
    If lErro1 <> SUCESSO Then gError 214570
    
    'se imprimiu corretamente
    If lErro = SUCESSO Then
    
        '<> 1 significa que requer confirmação =1 significa que nao precisa de confirmacao
        If objTEF.iStatusConfirmacao <> 1 Then
    
            lErro = TEF_Confirma_Transacao_PAYGO(objVenda)
            If lErro <> SUCESSO Then gError 133724
    
        End If
    
    Else
    
        lErro = TEF_NaoConfirma_Transacao_PAYGO(objTela)
        If lErro <> SUCESSO Then gError 133725
            
    End If
    
    sArquivoSTS = Dir(Arquivo_Tef_Resp1_Prop)
    If sArquivoSTS <> "" Then ECF_Apaga_Arquivo Arquivo_Tef_Resp1_Prop

    sArquivoINTPOS = Dir(Arquivo_Tef_Resp2_Prop)
    If sArquivoINTPOS <> "" Then ECF_Apaga_Arquivo Arquivo_Tef_Resp2_Prop
    
    sArquivoINTPOSBACK = Dir(Arquivo_Tef_Resp2_Backup_Prop)
    If sArquivoINTPOSBACK <> "" Then ECF_Apaga_Arquivo Arquivo_Tef_Resp2_Backup_Prop
    
    If Not objVenda Is Nothing Then

        sNomeArq = "a"

        Do While Len(sNomeArq) > 0
        
            sNomeArq = Dir(gsDirMVTEF & "TEF_" & objVenda.objCupomFiscal.lNumero & "_" & "*.txt")
    
            If Len(sNomeArq) > 0 Then ECF_Apaga_Arquivo gsDirMVTEF & sNomeArq
            
        Loop

    End If
    
    
    TEF_Imprime_ADM_PAYGO = SUCESSO

    Exit Function

Erro_TEF_Imprime_ADM_PAYGO:

    TEF_Imprime_ADM_PAYGO = gErr
    
    If Not objVenda Is Nothing Then

        sNomeArq = "a"

        Do While Len(sNomeArq) > 0
        
            sNomeArq = Dir(gsDirMVTEF & "TEF_" & objVenda.objCupomFiscal.lNumero & "_" & "*.txt")
    
            If Len(sNomeArq) > 0 Then ECF_Apaga_Arquivo gsDirMVTEF & sNomeArq
            
        Loop

    End If
    
    
    Select Case gErr
    
        Case 133724, 133725, 214570
    
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149352)
    
    End Select

End Function

Function TEF_Imprime_Gerencial_PAYGO(ByVal objMsg As Object, ByVal objTela As Object, ByVal objVenda As ClassVenda) As Long

Dim lErro As Long
Dim sNomeArq As String
Dim lTamanho As Long
Dim sRetorno As String
Dim sSaltaLinha As String
Dim objTEF As New ClassTEF
Dim iIndice As Integer
Dim lTransacao As Long

On Error GoTo Erro_TEF_Imprime_Gerencial_PAYGO

    lErro = TEF_Ler_Parametros_Impressao(objTEF, objVenda, 1)
    If lErro <> SUCESSO And lErro <> 214541 Then gError 214633

    'se existe arquivo com o indice em questao
    If lErro = SUCESSO Then

        lErro = CF_ECF("Caixa_Transacao_Abrir", lTransacao)
        If lErro <> SUCESSO Then gError 214605
    
    
    '    objTela.objParent.SetFocus
    
        
        'bloqueio o mouse e teclado
    '    Call AFRAC_BloqueiaTecladoMouse
        
        lErro = TEF_Libera_Impressora(objTela)
    
        If lErro = SUCESSO Then
    
            lErro = AFRAC_AbrirRelatorioGerencial(RELGER_COMPROVANTE_TEF, objTela)
            lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Abre Comprovante TEF")
            If lErro <> SUCESSO Then gError 133687
        
            sSaltaLinha = Chr(13) + Chr(10)
        
        
    '        lTamanho = 10
    '        sRetorno = String(lTamanho, 0)
    '
    '        'Indica o status do TEF
    '        Call GetPrivateProfileString(APLICACAO_ECF, "CancelamentoTEF", CONSTANTE_ERRO, sRetorno, lTamanho, NOME_ARQUIVO_CAIXA)
    '
    '        sRetorno = StringZ(sRetorno)
    '
    '        If sRetorno <> TEF_CANCELAMENTO_IMPRESSAO Then
        
            'Atualiza o arquivo
            lErro = WritePrivateProfileString(APLICACAO_ECF, "StatusTEF", TEF_STATUS_VENDA_GERENCIAL, NOME_ARQUIVO_CAIXA)
            If lErro = 0 Then gError 133699
    
            'Atualiza o arquivo
            lErro = WritePrivateProfileString(APLICACAO_ECF, "StatusImpTEF", TEF_STATUS_VENDA_GERENCIAL, NOME_ARQUIVO_CAIXA)
            If lErro = 0 Then gError 133823
    
            'funcao que cria/altera a chave e grava no caixaconfig.ini
            lErro = CF_ECF("CaixaConfig_Chave")
            If lErro <> SUCESSO Then gError 204278
    
        
            For iIndice = 1 To 10
        
                lErro = TEF_Ler_Parametros_Impressao(objTEF, objVenda, iIndice)
                If lErro <> SUCESSO And lErro <> 214541 Then gError 214545
    
                'se nao existe arquivo com o indice em questao
                If lErro <> SUCESSO Then Exit For
    
                'se tiver multiplos comprovantes a imprimir a partir do segundo tem q separar o primeiro do segundo e assim por diante
                If iIndice > 1 Then
                
                    lErro = AFRAC_ImprimirRelatorioGerencial(sSaltaLinha, objTela)
                    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Rel. Gerencial")
                    If lErro <> SUCESSO Then gError 214622
            
                    lErro = AFRAC_ImprimirRelatorioGerencial(sSaltaLinha, objTela)
                    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Rel. Gerencial")
                    If lErro <> SUCESSO Then gError 214623
            
                    lErro = AFRAC_ImprimirRelatorioGerencial(sSaltaLinha, objTela)
                    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Rel. Gerencial")
                    If lErro <> SUCESSO Then gError 214624
            
                    lErro = AFRAC_ImprimirRelatorioGerencial(sSaltaLinha, objTela)
                    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Rel. Gerencial")
                    If lErro <> SUCESSO Then gError 214625
                
                    'aciona guilhotina apos imprimir o cartao anterior
                    lErro = AFRAC_AcionarGuilhotina("P")
                    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Acionar Guilhotina")
                    If lErro <> SUCESSO Then gError 214610
                
                End If
    
                'caso seja folha dupla
                If giTEFImpressoraFolhaDupla = 1 Then
    
                    lErro = TEF_Imprime_Gerencial1_PAYGO(objTela, objVenda, "VIAUNICA", iIndice)
                    If lErro <> SUCESSO Then gError 214546
    
                Else
                
                    '1 = so via CLIENTE  3 = CLIENTE E ESTAB  0= nao ha comprovante
                    If objVenda.objTEF.iViasComprovante = 1 Or objVenda.objTEF.iViasComprovante = 3 Or objVenda.objTEF.iViasComprovante = 0 Then
                
                        If objVenda.objTEF.sComando = "CRT" Then
                        
                            If objVenda.objTEF.iTamReduzido > 0 Then
                                
                                
                                lErro = TEF_Imprime_Gerencial1_PAYGO(objTela, objVenda, "VIAREDUZIDA", iIndice)
                                If lErro <> SUCESSO Then gError 214547
                                
                            Else
                            
                                If objVenda.objTEF.iTamViaCliente > 0 Then
                            
                                    lErro = TEF_Imprime_Gerencial1_PAYGO(objTela, objVenda, "VIACLIENTE", iIndice)
                                    If lErro <> SUCESSO Then gError 214548
                                    
                                    
                                Else
                    
                                    lErro = TEF_Imprime_Gerencial1_PAYGO(objTela, objVenda, "VIAUNICA", iIndice)
                                    If lErro <> SUCESSO Then gError 214549
                                    
                                End If
                    
                    
                            End If
                    
                        ElseIf objVenda.objTEF.sComando = "ADM" Or objVenda.objTEF.sComando = "CNC" Then
                    
                    
                                If objVenda.objTEF.iTamViaCliente > 0 Then
                            
                                    lErro = TEF_Imprime_Gerencial1_PAYGO(objTela, objVenda, "VIACLIENTE", iIndice)
                                    If lErro <> SUCESSO Then gError 214550
                                    
                                Else
                    
                                    lErro = TEF_Imprime_Gerencial1_PAYGO(objTela, objVenda, "VIAUNICA", iIndice)
                                    If lErro <> SUCESSO Then gError 214551
                                    
                                End If
                    
                        End If
                
                        lErro = AFRAC_ImprimirRelatorioGerencial(sSaltaLinha, objTela)
                        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Rel. Gerencial")
                        If lErro <> SUCESSO Then gError 214626
                
                        lErro = AFRAC_ImprimirRelatorioGerencial(sSaltaLinha, objTela)
                        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Rel. Gerencial")
                        If lErro <> SUCESSO Then gError 214627
                
                        lErro = AFRAC_ImprimirRelatorioGerencial(sSaltaLinha, objTela)
                        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Rel. Gerencial")
                        If lErro <> SUCESSO Then gError 214628
                
                        lErro = AFRAC_ImprimirRelatorioGerencial(sSaltaLinha, objTela)
                        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Rel. Gerencial")
                        If lErro <> SUCESSO Then gError 214629
                
                
                        'guilhotina
                        lErro = AFRAC_AcionarGuilhotina("P")
                        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Acionar Guilhotina")
                        If lErro <> SUCESSO Then gError 214566
                
                    End If
                
                    'se 2 = so via ESTAB  3 = via ESTAB e CLIENTE  0 = nao ha comprovante
                    If objVenda.objTEF.iViasComprovante = 2 Or objVenda.objTEF.iViasComprovante = 3 Or objVenda.objTEF.iViasComprovante = 0 Then
                
                        If objVenda.objTEF.iTamViaEstab > 0 Then
                    
                            'imprime a via do esbaelecimento
                            lErro = TEF_Imprime_Gerencial1_PAYGO(objTela, objVenda, "VIAESTAB", iIndice)
                            If lErro <> SUCESSO Then gError 214552
                            
                        Else
            
                            lErro = TEF_Imprime_Gerencial1_PAYGO(objTela, objVenda, "VIAUNICA", iIndice)
                            If lErro <> SUCESSO Then gError 214553
                            
                        End If
                
                    End If
                
                End If
                
            Next
        
            lErro = AFRAC_FecharRelatorioGerencial(objTela)
            lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Fechar Rel. Gerencial")
            If lErro <> SUCESSO Then gError 133692
    
        
        
    '        'se so estiver imprimindo os cancelamento ==> nao tem que imprimir o Arquivo_Tef_Imp_Prop
    '        If sRetorno <> TEF_CANCELAMENTO_IMPRESSAO Then
            
            'Atualiza o arquivo
            lErro = WritePrivateProfileString(APLICACAO_ECF, "StatusTEF", TEF_STATUS_VENDA, NOME_ARQUIVO_CAIXA)
            If lErro = 0 Then gError 133700
        
            lErro = WritePrivateProfileString(APLICACAO_ECF, "StatusImpTEF", "", NOME_ARQUIVO_CAIXA)
            If lErro = 0 Then gError 133824
            
            
            'funcao que cria/altera a chave e grava no caixaconfig.ini
            lErro = CF_ECF("CaixaConfig_Chave")
            If lErro <> SUCESSO Then gError 204279
            
            
        End If
    
        lErro = CF_ECF("Caixa_Transacao_Fechar", lTransacao)
        If lErro <> SUCESSO Then gError 214606
    
    
        'desbloqueia mouse e teclado
        Call AFRAC_DesbloqueiaTecladoMouse

    End If

    TEF_Imprime_Gerencial_PAYGO = SUCESSO

    Exit Function

Erro_TEF_Imprime_Gerencial_PAYGO:

    TEF_Imprime_Gerencial_PAYGO = gErr
    
    Select Case gErr
    
        Case 126572, 126573, 133687, 133688, 133692, 133778, 133779, 204278, 204279, 214545 To 214553, 214566, 214605, 214606, 214610, 214622 To 214629, 214633
            Call AFRAC_DesbloqueiaTecladoMouse
    
        Case 133699, 133700, 133823, 133824
            Call AFRAC_DesbloqueiaTecladoMouse
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, APLICACAO_ECF, "StatusTEF", NOME_ARQUIVO_CAIXA)
        
        Case Else
            Call AFRAC_DesbloqueiaTecladoMouse
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149347)
    
    End Select

    Call CF_ECF("Caixa_Transacao_Rollback", glTransacaoPAFECF)

    Exit Function

End Function

Private Function TEF_Imprime_Vinculado_PAYGO(ByVal sDescricao As String, ByVal dValor As Double, ByVal lCOO As Long, ByVal objMsg As Object, ByVal objTela As Object, ByVal objVenda As ClassVenda) As Long

Dim lErro As Long
Dim sNomeArq As String
Dim sLinha As String
Dim sSaltaLinha As String
Dim sConteudo As String
Dim sRetorno As Long
Dim sConteudo1 As String
Dim objTEF As New ClassTEF
Dim iIndice As Integer
Dim lTransacao As Long

On Error GoTo Erro_TEF_Imprime_Vinculado_PAYGO

    lErro = TEF_Ler_Parametros_Impressao(objTEF, objVenda, 1)
    If lErro <> SUCESSO And lErro <> 214541 Then gError 214632

    'se existe arquivo com o indice em questao
    If lErro = SUCESSO Then

        lErro = CF_ECF("Caixa_Transacao_Abrir", lTransacao)
        If lErro <> SUCESSO Then gError 214603
    
        objTela.objParent.SetFocus
    
        'bloqueio o mouse e teclado
    '    Call AFRAC_BloqueiaTecladoMouse
    
        lErro = TEF_Libera_Impressora(objTela)
    
        If lErro = SUCESSO Then
    
            'Abri vinculado
            lErro = AFRAC_AbrirVinculado(lCOO, sDescricao, dValor, 1)
            If lErro <> SUCESSO Then
                lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Abrir Vinculado")
                If lErro <> SUCESSO Then gError 126570
            End If
        
            sSaltaLinha = Chr(13) + Chr(10)
        
            'Atualiza o arquivo
            lErro = WritePrivateProfileString(APLICACAO_ECF, "StatusTEF", TEF_STATUS_VENDA_VINCULADA, NOME_ARQUIVO_CAIXA)
            If lErro = 0 Then gError 133697
        
            'Atualiza o arquivo
            lErro = WritePrivateProfileString(APLICACAO_ECF, "StatusImpTEF", TEF_STATUS_VENDA_VINCULADA, NOME_ARQUIVO_CAIXA)
            If lErro = 0 Then gError 133825
        
            'funcao que cria/altera a chave e grava no caixaconfig.ini
            lErro = CF_ECF("CaixaConfig_Chave")
            If lErro <> SUCESSO Then gError 204275
    
    
            For iIndice = 1 To 10
        
                lErro = TEF_Ler_Parametros_Impressao(objTEF, objVenda, iIndice)
                If lErro <> SUCESSO And lErro <> 214541 Then gError 214540
        
                'se nao existe arquivo com o indice em questao
                If lErro <> SUCESSO Then Exit For
        
                'se tiver multiplos comprovantes a imprimir a partir do segundo tem q separar o primeiro do segundo e assim por diante
                If iIndice > 1 Then
                
                    If giDebug = 2 Then MsgBox ("TEF Imprime Vinculado PAYGO saltalinha")
                
                    lErro = AFRAC_ImprimirVinculado(sSaltaLinha)
                    If lErro <> SUCESSO Then
                        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Vinculado")
                        If lErro <> SUCESSO Then gError 214614
                    End If
                    
                    If giDebug = 2 Then MsgBox ("TEF Imprime Vinculado PAYGO saltalinha")
                                
                    lErro = AFRAC_ImprimirVinculado(sSaltaLinha)
                    If lErro <> SUCESSO Then
                        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Vinculado")
                        If lErro <> SUCESSO Then gError 214615
                    End If
                            
                    If giDebug = 2 Then MsgBox ("TEF Imprime Vinculado PAYGO saltalinha")
                            
                    lErro = AFRAC_ImprimirVinculado(sSaltaLinha)
                    If lErro <> SUCESSO Then
                        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Vinculado")
                        If lErro <> SUCESSO Then gError 214616
                    End If
                            
                    If giDebug = 2 Then MsgBox ("TEF Imprime Vinculado PAYGO saltalinha")
                            
                    lErro = AFRAC_ImprimirVinculado(sSaltaLinha)
                    If lErro <> SUCESSO Then
                        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Vinculado")
                        If lErro <> SUCESSO Then gError 214617
                    End If
                    
                    If giDebug = 2 Then MsgBox ("TEF Imprime Vinculado PAYGO saltalinha")
                            
                    lErro = AFRAC_ImprimirVinculado(sSaltaLinha)
                    If lErro <> SUCESSO Then
                        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Vinculado")
                        If lErro <> SUCESSO Then gError 214867
                    End If
                    
                    
                    If giDebug = 2 Then MsgBox ("TEF Imprime Vinculado PAYGO guilhotina")
                
                    'aciona guilhotina apos imprimir o cartao anterior
                    lErro = AFRAC_AcionarGuilhotina("P")
                    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Acionar Guilhotina")
                    If lErro <> SUCESSO Then gError 214609
                
                End If
                
        
                lErro = TEF_Imprime_Vinculado_CHQ(lCOO, objMsg, objTela, objVenda)
                If lErro <> SUCESSO Then gError 133680
        
                If dValor > 0 Then
        
                    'caso seja folha dupla
                    If giTEFImpressoraFolhaDupla = 1 Then
        
                        'imprime a via Unica
                        lErro = TEF_Imprime_Vinculado_PAYGO1(sDescricao, dValor, lCOO, objMsg, objTela, objVenda, "VIAUNICA", iIndice)
                        If lErro <> SUCESSO Then gError 214535
                
                    Else
                    
                        '1 = so via CLIENTE  3 = CLIENTE E ESTAB  0= nao ha comprovante
                        If objVenda.objTEF.iViasComprovante = 1 Or objVenda.objTEF.iViasComprovante = 3 Or objVenda.objTEF.iViasComprovante = 0 Then
                    
                            If objVenda.objTEF.sComando = "CRT" Then
                            
                                If objVenda.objTEF.iTamReduzido > 0 Then
                                    
                                    'imprime a via reduzida
                                    lErro = TEF_Imprime_Vinculado_PAYGO1(sDescricao, dValor, lCOO, objMsg, objTela, objVenda, "VIAREDUZIDA", iIndice)
                                    If lErro <> SUCESSO Then gError 214536
                        
                                Else
                                
                                    If objVenda.objTEF.iTamViaCliente > 0 Then
                                
                                        'imprime a via reduzida
                                        lErro = TEF_Imprime_Vinculado_PAYGO1(sDescricao, dValor, lCOO, objMsg, objTela, objVenda, "VIACLIENTE", iIndice)
                                        If lErro <> SUCESSO Then gError 214554
                                        
                                    Else
                        
                                        'imprime a via Unica
                                        lErro = TEF_Imprime_Vinculado_PAYGO1(sDescricao, dValor, lCOO, objMsg, objTela, objVenda, "VIAUNICA", iIndice)
                                        If lErro <> SUCESSO Then gError 214555
                                        
                                    End If
                        
                        
                                End If
                        
                            ElseIf objVenda.objTEF.sComando = "ADM" Or objVenda.objTEF.sComando = "CNC" Then
                        
                        
                                    If objVenda.objTEF.iTamViaCliente > 0 Then
                                
                                        'imprime a via reduzida
                                        lErro = TEF_Imprime_Vinculado_PAYGO1(sDescricao, dValor, lCOO, objMsg, objTela, objVenda, "VIACLIENTE", iIndice)
                                        If lErro <> SUCESSO Then gError 214556
                                        
                                    Else
                        
                                        'imprime a via Unica
                                        lErro = TEF_Imprime_Vinculado_PAYGO1(sDescricao, dValor, lCOO, objMsg, objTela, objVenda, "VIAUNICA", iIndice)
                                        If lErro <> SUCESSO Then gError 214557
                                        
                                    End If
                        
                            End If
                    
                    If giDebug = 2 Then MsgBox ("TEF Imprime Vinculado PAYGO saltalinha")
                    
                            lErro = AFRAC_ImprimirVinculado(sSaltaLinha)
                            If lErro <> SUCESSO Then
                                lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Vinculado")
                                If lErro <> SUCESSO Then gError 214618
                            End If
                                        
                    If giDebug = 2 Then MsgBox ("TEF Imprime Vinculado PAYGO saltalinha")
                    
                            lErro = AFRAC_ImprimirVinculado(sSaltaLinha)
                            If lErro <> SUCESSO Then
                                lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Vinculado")
                                If lErro <> SUCESSO Then gError 214619
                            End If
                                    
                    If giDebug = 2 Then MsgBox ("TEF Imprime Vinculado PAYGO saltalinha")
                                    
                            lErro = AFRAC_ImprimirVinculado(sSaltaLinha)
                            If lErro <> SUCESSO Then
                                lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Vinculado")
                                If lErro <> SUCESSO Then gError 214620
                            End If
                                    
                    If giDebug = 2 Then MsgBox ("TEF Imprime Vinculado PAYGO saltalinha")
                            
                            lErro = AFRAC_ImprimirVinculado(sSaltaLinha)
                            If lErro <> SUCESSO Then
                                lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Vinculado")
                                If lErro <> SUCESSO Then gError 214621
                            End If
                    
                    If giDebug = 2 Then MsgBox ("TEF Imprime Vinculado PAYGO ghilhotina")
                    
                            'aciona guilhotina apos imprimir a primeira via
                            lErro = AFRAC_AcionarGuilhotina("P")
                            lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Acionar Guilhotina")
                            If lErro <> SUCESSO Then gError 214565
                    
                    
                        End If
                    
                        'se 2 = so via ESTAB  3 = via ESTAB e CLIENTE  0 = nao ha comprovante
                        If objVenda.objTEF.iViasComprovante = 2 Or objVenda.objTEF.iViasComprovante = 3 Or objVenda.objTEF.iViasComprovante = 0 Then
                    
                            If objVenda.objTEF.iTamViaEstab > 0 Then
                        
                                'imprime a via reduzida
                                lErro = TEF_Imprime_Vinculado_PAYGO1(sDescricao, dValor, lCOO, objMsg, objTela, objVenda, "VIAESTAB", iIndice)
                                If lErro <> SUCESSO Then gError 214537
                                
                            Else
                
                                'imprime a via Unica
                                lErro = TEF_Imprime_Vinculado_PAYGO1(sDescricao, dValor, lCOO, objMsg, objTela, objVenda, "VIAUNICA", iIndice)
                                If lErro <> SUCESSO Then gError 214538
                                
                            End If
                    
                    
                    
                        End If
                    
                    End If
                    
                End If
                
            Next
        
            'fecha vinculado
            lErro = AFRAC_FecharVinculado()
            If lErro <> SUCESSO Then
                lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Fechar Vinculado")
                If lErro <> SUCESSO Then gError 133685
            End If
            
            'Atualiza o arquivo
            lErro = WritePrivateProfileString(APLICACAO_ECF, "StatusTEF", TEF_STATUS_VENDA, NOME_ARQUIVO_CAIXA)
            If lErro = 0 Then gError 133698
    
            'Atualiza o arquivo
            lErro = WritePrivateProfileString(APLICACAO_ECF, "StatusImpTEF", "", NOME_ARQUIVO_CAIXA)
            If lErro = 0 Then gError 133826
            
            'funcao que cria/altera a chave e grava no caixaconfig.ini
            lErro = CF_ECF("CaixaConfig_Chave")
            If lErro <> SUCESSO Then gError 204276
        
        
    '        If Not objVenda Is Nothing Then
    '
    '            sNomeArq = "a"
    '
    '            Do While Len(sNomeArq) > 0
    '
    '                sNomeArq = Dir(gsDirMVTEF & "TEF_" & objVenda.objCupomFiscal.lNumero & "_" & "*.txt")
    '
    '                If Len(sNomeArq) > 0 Then ECF_Apaga_Arquivo gsDirMVTEF & sNomeArq
    '
    '            Loop
    '
    '        End If
    
        End If
    
    
        'desbloqueia mouse e teclado
        Call AFRAC_DesbloqueiaTecladoMouse
    
        lErro = CF_ECF("Caixa_Transacao_Fechar", lTransacao)
        If lErro <> SUCESSO Then gError 214604

    End If

    TEF_Imprime_Vinculado_PAYGO = SUCESSO

    Exit Function

Erro_TEF_Imprime_Vinculado_PAYGO:

    TEF_Imprime_Vinculado_PAYGO = gErr
    
    Select Case gErr
    
        Case 126570, 126571, 133678, 133680, 133681, 133682, 133683, 133730, 133731, 214535, 214536, 214537, 214538, 214554 To 214558, 214565, 214603, 214604, 214609, 214614 To 214621, 214632, 214687
            Call AFRAC_DesbloqueiaTecladoMouse
    
        Case 133679, 133684, 133771, 133777, 133778, 204275, 204276, 214540
    
        Case 133685, 133729
            'desbloqueia mouse e teclado
            Call AFRAC_DesbloqueiaTecladoMouse
    
        Case 133697, 133698, 133824
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, APLICACAO_ECF, "StatusTEF", NOME_ARQUIVO_CAIXA)
    
        Case 133825, 133826
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, APLICACAO_ECF, "StatusImpTEF", NOME_ARQUIVO_CAIXA)
    
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149344)
    
    End Select

    Call CF_ECF("Caixa_Transacao_Rollback", glTransacaoPAFECF)
    
End Function

Private Function TEF_Imprime_Gerencial1_PAYGO(ByVal objTela As Object, ByVal objVenda As ClassVenda, ByVal sVia As String, ByVal iIndice As Integer) As Long

Dim lErro As Long
Dim sLinha As String
Dim sSaltaLinha As String
Dim iPos1 As Integer
Dim sNomeArq As String

On Error GoTo Erro_TEF_Imprime_Gerencial1_PAYGO

    sNomeArq = Dir(gsDirMVTEF & "TEF_" & objVenda.objCupomFiscal.lNumero & "_" & CStr(iIndice) & "_" & sVia & ".txt")

    If Len(sNomeArq) > 0 Then

'        sSaltaLinha = Chr(13) + Chr(10)
'
'        lErro = AFRAC_ImprimirRelatorioGerencial(sSaltaLinha, objTela)
'        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Rel. Gerencial")
'        If lErro <> SUCESSO Then gError 133689
'
'        lErro = AFRAC_ImprimirRelatorioGerencial(sSaltaLinha, objTela)
'        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Rel. Gerencial")
'        If lErro <> SUCESSO Then gError 133689
'
'        lErro = AFRAC_ImprimirRelatorioGerencial(sSaltaLinha, objTela)
'        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Rel. Gerencial")
'        If lErro <> SUCESSO Then gError 133689

        Open gsDirMVTEF & sNomeArq For Input As #1
        
        If Not EOF(1) Then Line Input #1, sLinha
    
        Do While Not EOF(1)
        
            Line Input #1, sLinha
                
            lErro = AFRAC_ImprimirRelatorioGerencial(sLinha, objTela)
            lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Rel. Gerencial")
            If lErro <> SUCESSO Then gError 133690
                
        Loop
            
'        lErro = AFRAC_ImprimirRelatorioGerencial(sSaltaLinha, objTela)
'        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Rel. Gerencial")
'        If lErro <> SUCESSO Then gError 214608
'
'        lErro = AFRAC_ImprimirRelatorioGerencial(sSaltaLinha, objTela)
'        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Rel. Gerencial")
'        If lErro <> SUCESSO Then gError 214608
'
'        lErro = AFRAC_ImprimirRelatorioGerencial(sSaltaLinha, objTela)
'        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Rel. Gerencial")
'        If lErro <> SUCESSO Then gError 214608
'
'        lErro = AFRAC_ImprimirRelatorioGerencial(sSaltaLinha, objTela)
'        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Rel. Gerencial")
'        If lErro <> SUCESSO Then gError 214608
            
        Close #1
    
    End If

    TEF_Imprime_Gerencial1_PAYGO = SUCESSO

    Exit Function

Erro_TEF_Imprime_Gerencial1_PAYGO:

    TEF_Imprime_Gerencial1_PAYGO = gErr
    
    Close #1
    
    Select Case gErr
    
        Case 133689 To 133691, 133737, 214608
    
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149348)
    
    End Select

    Exit Function

End Function

'Function TEF_NaoConfirma_Transacao2_PAYGO(ByVal objTela As Object, objVenda As ClassVenda) As Long
''**** falta acertar a numeracao de erro *****
'
'Dim lErro As Long
'Dim iSitefNaoRespondeu1 As Integer
'Dim iSitefNaoRespondeu As Integer
'Dim sNomeArq As String
'Dim sNomeArq1 As String
'Dim sNomeArqBack As String
'Dim sNomeArqDest As String
'
'On Error GoTo Erro_TEF_NaoConfirma_Transacao2_PAYGO
'
'    If giTipoTEF = TIPOTEF_SITEF Then
'
'        sNomeArq1 = gsDirMVTEF & "TEF_" & objVenda.objCupomFiscal.lNumero & "_*.rsp"
'
'        sNomeArq = Dir(sNomeArq1)
'
'        Do While Len(sNomeArq) > 0
'
'            If giTipoTEF = TIPOTEF_SITEF Then
'
'                FileCopy gsDirMVTEF & sNomeArq, Arquivo_Tef_Resp2_Prop
'
'                iSitefNaoRespondeu1 = 0
'
'                lErro = TEF_NaoConfirma_Transacao_PAYGO(objTela, 1, iSitefNaoRespondeu1)
'                If lErro <> SUCESSO Then gError 126591
'
'                iSitefNaoRespondeu = iSitefNaoRespondeu + iSitefNaoRespondeu1
'
'            End If
'
'            If iSitefNaoRespondeu1 = 0 Then ECF_Apaga_Arquivo gsDirMVTEF & sNomeArq
'
'            sNomeArq = Dir
'
'        Loop
'
'        'remove os arquivos de impressao
'        sNomeArqDest = Dir(gsDirMVTEF & "TEF_" & objVenda.objCupomFiscal.lNumero & "_" & "*" & ".txt")
'
'        Do While Len(sNomeArqDest) > 0
'
'            ECF_Apaga_Arquivo gsDirMVTEF & sNomeArqDest
'
'            sNomeArqDest = Dir
'
'        Loop
'
'        If iSitefNaoRespondeu = 0 Then
'
'            'Indica que a nao confirmacao foi completada para caso cair a energia
'            lErro = WritePrivateProfileString(APLICACAO_ECF, "StatusTEF", "", NOME_ARQUIVO_CAIXA)
'            If lErro = 0 Then gError 126592
'
'            'funcao que cria/altera a chave e grava no caixaconfig.ini
'            lErro = CF_ECF("CaixaConfig_Chave")
'            If lErro <> SUCESSO Then gError 204292
'
'        End If
'
'    End If
'    TEF_NaoConfirma_Transacao2_PAYGO = SUCESSO
'
'    Exit Function
'
'Erro_TEF_NaoConfirma_Transacao2_PAYGO:
'
'    TEF_NaoConfirma_Transacao2_PAYGO = gErr
'
'    Select Case gErr
'
'        Case 126591, 204292
'
'        Case 126592
'            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, APLICACAO_ECF, "StatusTEF", NOME_ARQUIVO_CAIXA)
'
'        Case Else
'            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149366)
'
'    End Select
'
'    Exit Function
'
'End Function

Function TEF_CNC_PAYGO(ByVal objVenda As ClassVenda, ByVal objMsg As Object, ByVal objTela As Object) As Long

Dim lErro As Long
Dim sNomeArq1 As String
Dim sNomeArq As String
Dim objTEF As New ClassTEF
Dim sReg As String
Dim sNomeArq2 As String
Dim sMoeda As String
Dim objTEF1 As New ClassTEF
Dim objParcela As New ClassCarneParcelas
Dim objMovCaixa As New ClassMovimentoCaixa
Dim objCheque As New ClassChequePre
Dim objAdmMeioPagto As New ClassAdmMeioPagto
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim bAchouAdm As Boolean
Dim objTiposMeiosPagtos As ClassTMPLoja
Dim sArquivoSTS As String
Dim sArquivoINTPOS As String
Dim sArquivoINTPOSBACK As String
Dim objRede As New ClassRede

On Error GoTo Erro_TEF_CNC_PAYGO

    Set objVenda.colMovimentosCaixa = New Collection

    sArquivoSTS = Dir(Arquivo_Tef_Resp1_Prop)
    If sArquivoSTS <> "" Then ECF_Apaga_Arquivo Arquivo_Tef_Resp1_Prop

    sArquivoINTPOS = Dir(Arquivo_Tef_Resp2_Prop)
    If sArquivoINTPOS <> "" Then ECF_Apaga_Arquivo Arquivo_Tef_Resp2_Prop

    sArquivoINTPOSBACK = Dir(Arquivo_Tef_Resp2_Backup_Prop)
    If sArquivoINTPOSBACK <> "" Then ECF_Apaga_Arquivo Arquivo_Tef_Resp2_Backup_Prop

    'limpa os arquivos de impressao dos cartoes enviados mas que ainda nao estao impressos
    sNomeArq = "a"

    Do While Len(sNomeArq) > 0
    
        sNomeArq = Dir(gsDirMVTEF & "TEF_" & objVenda.objCupomFiscal.lNumero & "_" & "*.txt")
        
        If Len(sNomeArq) > 0 Then ECF_Apaga_Arquivo gsDirMVTEF & sNomeArq
            
    Loop

    sNomeArq1 = gsDirMVTEF & "TEF_" & objVenda.objCupomFiscal.lNumero & "_" & "*" & ".rsp"

    sNomeArq = Dir(sNomeArq1)

    Do While Len(sNomeArq) > 0

'        'Abre o arquivo do comprovante de venda
'        Open gsDirMVTEF & sNomeArq For Input As #1

        'Abre o arquivo Temporário
        Open Arquivo_Tef_Temp_Prop For Append As #1

        'Adiciona na variável global
        glNumProxIdentificacao = glNumProxIdentificacao + 1
        
        'Atualiza o arquivo
        lErro = WritePrivateProfileString(APLICACAO_ECF, "NumProxIdent", CStr(glNumProxIdentificacao), NOME_ARQUIVO_CAIXA)
        If lErro = 0 Then gError 214598

        'funcao que cria/altera a chave e grava no caixaconfig.ini
        lErro = CF_ECF("CaixaConfig_Chave")
        If lErro <> SUCESSO Then gError 204287

        lErro = TEF_Trata_Resp1(objTEF, gsDirMVTEF & sNomeArq)
        If lErro <> SUCESSO Then gError 214568

        Print #1, "000-000 = CNC"
        Print #1, "001-000 = " & CStr(glNumProxIdentificacao)
        Print #1, "003-000 = " & CStr(objTEF.dValorTotal * 100)
        Print #1, "004-000 = 0"
        Print #1, "010-000 = " & objTEF.sRede
        Print #1, "012-000 = " & objTEF.sNSU


        'parcelado pelo emissor (2) ou pelo estabelecimento (3)
        If objTEF.iTipoFinanciamento = 2 Or objTEF.iTipoFinanciamento = 3 Then
            Print #1, "018-000 = " & objTEF.iNumParcelas
        End If
        
        Print #1, "022-000 = " & Format(objTEF.dtDataComprovante, "ddmmyyyy")
        Print #1, "023-000 = " & Format(objTEF.dtHoraComprovante, "hhmmss")
        
        'pre-datado
        If objTEF.iTipoFinanciamento = 4 Or objTEF.iTipoFinanciamento = 5 Or objTEF.iTipoTransacao = 21 Or objTEF.iTipoTransacao = 24 Then
            Print #1, "024-000 = " & Format(objTEF.dtDataPreDatado, "ddmmyyyy")
        End If
        
        Print #1, "706-000 = 31" 'funcionalidades suportadas pela automacao 1=troco 2=desconto 4=valor fixo 8=vias diferenciadas(cliente\estabelecimento) 16=cupom reduzido
        Print #1, "716-000 = Corporator Serviços de Informática Ltda" 'razao social da empresa responsavel pelo desenv. da automação comercial
        Print #1, "733-000 = 211" 'versao da interface 2.11
        Print #1, "735-000 = CORPORATOR ECF" 'nome da automacao comercial
        Print #1, "736-000 = 3" 'nome da automacao comercial
        Print #1, "738-000 = " & TEF_PAYGO_CERTIFICADO 'Código obtido junto à NTK Solutions no início do processo de certificação da Automação Comercial
        Print #1, "999-999 = 0"
        
        
        Close #1
        

        'renomeando os arquivos
        FileCopy Arquivo_Tef_Temp_Prop, Arquivo_Tef_Req_Prop
        
        ECF_Apaga_Arquivo Arquivo_Tef_Temp_Prop
        
        lErro = TEF_Trata_Resp_PAYGO(objTEF1, objMsg, objTela, objVenda)
        If lErro <> SUCESSO Then gError 133798

'        lErro = CF_ECF("TEF_Imprime_Doc", objVenda, objTela, "CNC", gsDirMVTEF & sNomeArq)
'        If lErro <> SUCESSO Then gError 133799
'
'        'Indica que ha cancelamento a ser impresso
'        Call WritePrivateProfileString(APLICACAO_ECF, "CancelamentoTEF", TEF_CANCELAMENTO, NOME_ARQUIVO_CAIXA)



        'se a operacao = VENDA e o Tipo do cartao é CREDITO
        If objTEF1.iOperacao = 1 And objTEF1.iTipoCartao = 1 Then
                For Each objTiposMeiosPagtos In gcolTiposMeiosPagtos
                    'Se for do tipo procurado
                    If objTiposMeiosPagtos.iTipo = TIPOMEIOPAGTOLOJA_CARTAO_CREDITO Then
                        objTEF1.sDescricao = objTiposMeiosPagtos.sDescricao
                        objTEF1.iTipo = objTiposMeiosPagtos.iTipo
                        objTEF1.iTipoMov = MOVIMENTOCAIXA_CANC_RECEB_CARTAOCREDITO
                        objTEF1.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_CARTAO_CREDITO
                        Exit For
                    End If
                Next
        End If
    
        'se a operacao = VENDA e o Tipo do cartao é DEBITO
        If objTEF1.iOperacao = 1 And objTEF1.iTipoCartao = 2 Then
            For Each objTiposMeiosPagtos In gcolTiposMeiosPagtos
                'Se for do tipo procurado
                If objTiposMeiosPagtos.iTipo = TIPOMEIOPAGTOLOJA_CARTAO_DEBITO Then
                    objTEF1.sDescricao = objTiposMeiosPagtos.sDescricao
                    objTEF1.iTipo = objTiposMeiosPagtos.iTipo
                    objTEF1.iTipoMov = MOVIMENTOCAIXA_CANC_RECEB_CARTAODEBITO
                    objTEF1.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_CARTAO_DEBITO
                    Exit For
                End If
             Next
        End If
            
        'se a operacao = VENDA e o Tipo do cartao é Voucher
        If objTEF1.iOperacao = 1 And objTEF1.iTipoCartao = 3 Then
            For Each objTiposMeiosPagtos In gcolTiposMeiosPagtos
                'Se for do tipo procurado
                If objTiposMeiosPagtos.iTipo = TIPOMEIOPAGTOLOJA_VALE_REFEICAO Then
                    objTEF1.sDescricao = objTiposMeiosPagtos.sDescricao
                    objTEF1.iTipo = objTiposMeiosPagtos.iTipo
                    objTEF1.iTipoMov = MOVIMENTOCAIXA_CANC_RECEB_VALETICKET
                    objTEF1.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_VALE_REFEICAO
                    Exit For
                End If
             Next
        End If
            
            
        'se a operacao = VENDA e o Tipo do cartao é Private Label
        If objTEF1.iOperacao = 1 And objTEF1.iTipoCartao = 0 Then
            For Each objTiposMeiosPagtos In gcolTiposMeiosPagtos
                'Se for do tipo procurado
                If objTiposMeiosPagtos.iTipo = TIPOMEIOPAGTOLOJA_OUTROS Then
                    objTEF1.sDescricao = objTiposMeiosPagtos.sDescricao
                    objTEF1.iTipo = objTiposMeiosPagtos.iTipo
                    objTEF1.iTipoMov = MOVIMENTOCAIXA_CANC_RECEB_OUTROS
                    objTEF1.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_OUTROS
                    Exit For
                End If
             Next
        End If
            
            
            
        'se o campos 730-000 não for usado ==> vai usar o 011-000
        If objTEF1.iOperacao = 0 And objTEF1.iTipoTransacao <> 0 Then
            
            If objTEF1.iTipoTransacao >= 10 And objTEF1.iTipoTransacao <= 12 Then
                For Each objTiposMeiosPagtos In gcolTiposMeiosPagtos
                    'Se for do tipo procurado
                    If objTiposMeiosPagtos.iTipo = TIPOMEIOPAGTOLOJA_CARTAO_CREDITO Then
                        objTEF1.sDescricao = objTiposMeiosPagtos.sDescricao
                        objTEF1.iTipo = objTiposMeiosPagtos.iTipo
                        objTEF1.iTipoMov = MOVIMENTOCAIXA_CANC_RECEB_CARTAOCREDITO
                        objTEF1.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_CARTAO_CREDITO
                        Exit For
                    End If
                Next
            End If
            
            If objTEF1.iTipoTransacao >= 20 And objTEF1.iTipoTransacao <= 24 Then
                For Each objTiposMeiosPagtos In gcolTiposMeiosPagtos
                    'Se for do tipo procurado
                    If objTiposMeiosPagtos.iTipo = TIPOMEIOPAGTOLOJA_CARTAO_DEBITO Then
                        objTEF1.sDescricao = objTiposMeiosPagtos.sDescricao
                        objTEF1.iTipo = objTiposMeiosPagtos.iTipo
                        objTEF1.iTipoMov = MOVIMENTOCAIXA_CANC_RECEB_CARTAODEBITO
                        objTEF1.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_CARTAO_DEBITO
                        Exit For
                    End If
                 Next
            End If
            
            If objTEF1.iTipoTransacao = 60 Then
            
                For Each objTiposMeiosPagtos In gcolTiposMeiosPagtos
                    'Se for do tipo procurado
                    If objTiposMeiosPagtos.iTipo = TIPOMEIOPAGTOLOJA_VALE_REFEICAO Then
                        objTEF1.sDescricao = objTiposMeiosPagtos.sDescricao
                        objTEF1.iTipo = objTiposMeiosPagtos.iTipo
                        objTEF1.iTipoMov = MOVIMENTOCAIXA_CANC_RECEB_VALETICKET
                        objTEF1.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_VALE_REFEICAO
                        Exit For
                    End If
                 Next
            End If
            
            
            If objTEF1.iTipoTransacao = 30 Then
            
                For Each objTiposMeiosPagtos In gcolTiposMeiosPagtos
                    'Se for do tipo procurado
                    If objTiposMeiosPagtos.iTipo = TIPOMEIOPAGTOLOJA_OUTROS Then
                        objTEF1.sDescricao = objTiposMeiosPagtos.sDescricao
                        objTEF1.iTipo = objTiposMeiosPagtos.iTipo
                        objTEF1.iTipoMov = MOVIMENTOCAIXA_CANC_RECEB_OUTROS
                        objTEF1.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_OUTROS
                        Exit For
                    End If
                 Next
            End If
            
        End If


        'Insere um novo movimento
        objMovCaixa.iFilialEmpresa = giFilialEmpresa
        objMovCaixa.iCaixa = giCodCaixa
        objMovCaixa.iCodOperador = giCodOperador
        objMovCaixa.dtDataMovimento = objTEF1.dtDataComprovante
        'foi colocado o valor negativo pois esta cancelando a venda
        objMovCaixa.dValor = -objTEF.dValorTotal
        objMovCaixa.dHora = CDbl(objTEF1.dtHoraComprovante)
        objMovCaixa.lCupomFiscal = objVenda.objCupomFiscal.lNumero
        objMovCaixa.lNumIntExt = objVenda.objCupomFiscal.lNumOrcamento
        objMovCaixa.iTipoCartao = TIPO_TEF
        objMovCaixa.iTipo = objTEF1.iTipoMov
        objMovCaixa.sAutorizacao = objTEF1.sAutorizacao
        
    '    If giTipoTEF = TIPOTEF_SITEF Then
    '
    '
    '    Else
    
    
        objTEF1.iRede = -1
    
        'pesquisa o coidigo da rede pois é retornado o nome da rede
        For Each objRede In gcolRedes
        
            If UCase(objTEF1.sRede) = UCase(objRede.sNome) Then
                objTEF1.iRede = objRede.iCodigo
                Exit For
            End If
        Next
    
    
    
'        Select Case objTEF1.sRede
'    '            Case "AMEX"
'    '                objTEF.iRede = REDE_AMEX
'            Case "REDECARD"
'                objTEF1.iRede = REDE_REDECARD
'            Case "VISANET", "CERTIFICACAO"
'                objTEF1.iRede = REDE_VISANET
'        End Select
            
    '    End If
    
        bAchouAdm = False
        
        For Each objAdmMeioPagto In gcolAdmMeioPagto
        
            If objAdmMeioPagto.iTipoMeioPagto = objTEF1.iTipoMeioPagto And objAdmMeioPagto.iRede = objTEF1.iRede Then
                If (objTEF.sAdm <> "" And UCase(objAdmMeioPagto.sNome) = Trim(UCase(objTEF1.sAdm))) Or objTEF1.sAdm = "" Then
                    objMovCaixa.iAdmMeioPagto = objAdmMeioPagto.iCodigo
                    
                    If objTEF1.iNumParcelas = 0 Then
                        
                        Call Chama_TelaECF_Modal("ParcelamentoTEF", objMovCaixa)
                        If giRetornoTela = vbOK Then bAchouAdm = True
                        
                    Else
                        For Each objAdmMeioPagtoCondPagto In objAdmMeioPagto.colCondPagtoLoja
                            If objAdmMeioPagtoCondPagto.iNumParcelas = objTEF1.iNumParcelas Then
                               'JUROS_LOJA = 1 ...JUROS_ADM=2 conteudo do campo JUROS PARCELAMENTO
                               'TipoFinanciamento = 3 = parcelado pela LOJA    Tipo financiamento = 2 = parcelado pela ADM  Tipo de finaciamento = 1 = A vista
                               'TipoFinanciamento = 4 (pre-datado) ou TipoFinanciamento = 5 (pre-datado forcado)
    '                            If objAdmMeioPagtoCondPagto.iJurosParcelamento + 1 = objTEF.iTipoParcelamento Or objTEF.iTipoParcelamento = -1 Then
                                'o primeiro if trata os campos 731 e 732
                                  If objTEF1.iOperacao <> 0 Then
                                      If (objAdmMeioPagtoCondPagto.iJurosParcelamento = JUROS_LOJA And objTEF1.iTipoFinanciamento = 3) Or (objAdmMeioPagtoCondPagto.iJurosParcelamento = JUROS_ADM And objTEF1.iTipoFinanciamento = 2) Or (objTEF1.iTipoFinanciamento = 1) Or ((objTEF1.iTipoFinanciamento = 4 Or objTEF1.iTipoFinanciamento = 5) And objAdmMeioPagtoCondPagto.iPreDatado = 1) Then
                                         objMovCaixa.iParcelamento = objAdmMeioPagtoCondPagto.iParcelamento
                                         bAchouAdm = True
                                         Exit For
                                     End If
                                 Else
                                     'essa parte cuda dos campos 011 e 017
                                      If (objAdmMeioPagtoCondPagto.iJurosParcelamento = JUROS_LOJA And (objTEF1.iTipoTransacao = 11 Or objTEF1.iTipoTransacao = 22)) Or (objAdmMeioPagtoCondPagto.iJurosParcelamento = JUROS_ADM And objTEF1.iTipoTransacao = 12) Or (objTEF1.iTipoTransacao = 10 Or objTEF1.iTipoTransacao = 20) Or ((objTEF1.iTipoTransacao = 21 Or objTEF1.iTipoTransacao = 24) And objAdmMeioPagtoCondPagto.iPreDatado = 1) Then
                                         objMovCaixa.iParcelamento = objAdmMeioPagtoCondPagto.iParcelamento
                                         bAchouAdm = True
                                         Exit For
                                     End If
                                 
                                 End If
                            End If
                        Next
                    End If
                    If bAchouAdm = True Then Exit For
                End If
            End If
        Next
    
        If bAchouAdm = False Then
            
            For Each objAdmMeioPagto In gcolAdmMeioPagto
            
                If objAdmMeioPagto.iTipoMeioPagto = objTEF1.iTipoMeioPagto And objAdmMeioPagto.iRede = objTEF1.iRede Then
                    
                    If objTEF.sAdm <> "" Or objTEF1.sAdm = "" Then
                        
                        objMovCaixa.iAdmMeioPagto = objAdmMeioPagto.iCodigo
                        
                        If objTEF1.iNumParcelas = 0 Then
                            
                            Call Chama_TelaECF_Modal("ParcelamentoTEF", objMovCaixa)
                            If giRetornoTela = vbOK Then bAchouAdm = True
                            
                        Else
                            For Each objAdmMeioPagtoCondPagto In objAdmMeioPagto.colCondPagtoLoja
                                If objAdmMeioPagtoCondPagto.iNumParcelas = objTEF1.iNumParcelas Then
                                   'JUROS_LOJA = 1 ...JUROS_ADM=2 conteudo do campo JUROS PARCELAMENTO
                                   'TipoFinanciamento = 3 = parcelado pela LOJA    Tipo financiamento = 2 = parcelado pela ADM  Tipo de finaciamento = 1 = A vista
                                   'TipoFinanciamento = 4 (pre-datado) ou TipoFinanciamento = 5 (pre-datado forcado)
        '                            If objAdmMeioPagtoCondPagto.iJurosParcelamento + 1 = objTEF.iTipoParcelamento Or objTEF.iTipoParcelamento = -1 Then
                                    'o primeiro if trata os campos 731 e 732
                                      If objTEF1.iOperacao <> 0 Then
                                          If (objAdmMeioPagtoCondPagto.iJurosParcelamento = JUROS_LOJA And objTEF1.iTipoFinanciamento = 3) Or (objAdmMeioPagtoCondPagto.iJurosParcelamento = JUROS_ADM And objTEF1.iTipoFinanciamento = 2) Or (objTEF1.iTipoFinanciamento = 1) Or ((objTEF1.iTipoFinanciamento = 4 Or objTEF1.iTipoFinanciamento = 5) And objAdmMeioPagtoCondPagto.iPreDatado = 1) Then
                                             objMovCaixa.iParcelamento = objAdmMeioPagtoCondPagto.iParcelamento
                                             bAchouAdm = True
                                             Exit For
                                         End If
                                     Else
                                         'essa parte cuda dos campos 011 e 017
                                          If (objAdmMeioPagtoCondPagto.iJurosParcelamento = JUROS_LOJA And (objTEF1.iTipoTransacao = 11 Or objTEF1.iTipoTransacao = 22)) Or (objAdmMeioPagtoCondPagto.iJurosParcelamento = JUROS_ADM And objTEF1.iTipoTransacao = 12) Or (objTEF1.iTipoTransacao = 10 Or objTEF1.iTipoTransacao = 20) Or ((objTEF1.iTipoTransacao = 21 Or objTEF1.iTipoTransacao = 24) And objAdmMeioPagtoCondPagto.iPreDatado = 1) Then
                                             objMovCaixa.iParcelamento = objAdmMeioPagtoCondPagto.iParcelamento
                                             bAchouAdm = True
                                             Exit For
                                         End If
                                     
                                     End If
                                End If
                            Next
                        End If
                        If bAchouAdm = True Then Exit For
                    End If
                End If
            Next
            
        End If
        
        If bAchouAdm = False Then gError 214559
        
        objVenda.colMovimentosCaixa.Add objMovCaixa

        '<> 1 significa que requer confirmação =1 significa que nao precisa de confirmacao
        If objTEF.iStatusConfirmacao <> 1 Then
    
            lErro = CF_ECF("TEF_Confirma_Transacao_PAYGO", objVenda, 1)
            If lErro <> SUCESSO Then gError 133791

        Else
            lErro = SUCESSO

        End If

        If lErro = SUCESSO Then

            ECF_Apaga_Arquivo gsDirMVTEF & sNomeArq
    
            sNomeArq = Dir(gsDirMVTEF & "TEF_" & objVenda.objCupomFiscal.lNumero & "_" & "*.rsp")
            
            If Len(sNomeArq) > 0 Then
            
                sArquivoSTS = Dir(Arquivo_Tef_Resp1_Prop)
                If sArquivoSTS <> "" Then ECF_Apaga_Arquivo Arquivo_Tef_Resp1_Prop
            
                sArquivoINTPOS = Dir(Arquivo_Tef_Resp2_Prop)
                If sArquivoINTPOS <> "" Then ECF_Apaga_Arquivo Arquivo_Tef_Resp2_Prop
                
                sArquivoINTPOSBACK = Dir(Arquivo_Tef_Resp2_Backup_Prop)
                If sArquivoINTPOSBACK <> "" Then ECF_Apaga_Arquivo Arquivo_Tef_Resp2_Backup_Prop
                
                If Len(Dir(Arquivo_Tef_Req_Prop)) > 0 Then ECF_Apaga_Arquivo Arquivo_Tef_Req_Prop
            
            End If


        End If
        
        objVenda.objCupomFiscal.dValorDescontoTEF = objVenda.objCupomFiscal.dValorDescontoTEF - objTEF.dValorDesconto
        objVenda.objCupomFiscal.dValorTrocoTEF = objVenda.objCupomFiscal.dValorTrocoTEF - objTEF.dValorTroco

    Loop


'    lErro = TEF_Imprime_CNC_PAYGO(objMsg, objTela, objVenda)
'    If lErro <> SUCESSO And lErro <> 133822 Then gError 133799
'
'
'
'

    Set objVenda.objTEF = objTEF1

    TEF_CNC_PAYGO = SUCESSO

    Exit Function

Erro_TEF_CNC_PAYGO:

    TEF_CNC_PAYGO = gErr

    Close #1

    If objTEF1.iTransacao = 1 Then

        'venda foi consumada ==> NCF
        Call TEF_NaoConfirma_Transacao_PAYGO(objTela)

    End If

    'Indica que a nao confirmacao foi completada para caso cair a energia
    Call WritePrivateProfileString(APLICACAO_ECF, "StatusTEF", "", NOME_ARQUIVO_CAIXA)

    'funcao que cria/altera a chave e grava no caixaconfig.ini
    lErro = CF_ECF("CaixaConfig_Chave")
    
    If Not objVenda Is Nothing Then

        sNomeArq = "a"

        Do While Len(sNomeArq) > 0
        
            sNomeArq = Dir(gsDirMVTEF & "TEF_" & objVenda.objCupomFiscal.lNumero & "_" & "*.txt")
    
            If Len(sNomeArq) > 0 Then ECF_Apaga_Arquivo gsDirMVTEF & sNomeArq
            
        Loop

    End If
    

    Select Case gErr

        Case 53
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO2, gErr)

        Case 133798, 133799, 204287

        Case 214559
            Call Rotina_ErroECF(vbOKOnly, ERRO_CONDPAGTO_NAO_CADASTRADO, gErr, objTEF.sRede, objTEF.sAdm, objTEF.iNumParcelas)

        Case 214598
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, APLICACAO_ECF, "NumProxIdent", NOME_ARQUIVO_CAIXA)

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149359)

    End Select

    Exit Function

End Function


Function TEF_Imprime_CNC_PAYGO(ByVal objMsg As Object, ByVal objTela As Object, ByVal objVenda As ClassVenda) As Long
'imprime os comprovantes em relatorio gerencial

Dim lErro As Long
Dim sNomeArq As String
Dim sLinha As String
Dim sSaltaLinha As String
Dim sConteudo As String
Dim vbMsg As VbMsgBoxResult
Dim sRetorno As String
Dim lTamanho As Long
Dim sArquivoSTS As String
Dim sArquivoINTPOS As String
Dim objTEF As New ClassTEF
Dim lErro1 As Long
Dim sArquivoINTPOSBACK As String


On Error GoTo Erro_TEF_Imprime_CNC_PAYGO



'    lTamanho = 10
'    sRetorno = String(lTamanho, 0)
'
'    Call GetPrivateProfileString(APLICACAO_ECF, "CancelamentoTEF", CONSTANTE_ERRO, sRetorno, lTamanho, NOME_ARQUIVO_CAIXA)
'
'    If sRetorno <> String(lTamanho, 0) Then
'
'        sRetorno = StringZ(sRetorno)
'
'        If sRetorno = TEF_CANCELAMENTO Then
'
'            Call WritePrivateProfileString(APLICACAO_ECF, "CancelamentoTEF", TEF_CANCELAMENTO_IMPRESSAO, NOME_ARQUIVO_CAIXA)
        
    lErro = TEF_Ler_Parametros_Impressao(objTEF, objVenda, 1)
    If lErro <> SUCESSO And lErro <> 214541 Then gError 214545

    
    If lErro = SUCESSO Then
        
        
        'imprime gerencial
        lErro = TEF_Imprime_Gerencial_PAYGO(objMsg, objTela, objVenda)
        
        vbMsg = vbYes
        
        'se nao conseguiu imprimir os comprovantes e quer continuar tentando
        Do While vbMsg = vbYes And lErro <> SUCESSO
        
            vbMsg = Rotina_AvisoECF(vbYesNo, "Impressora não responde, tentar novamente?")
            
            If vbMsg = vbYes Then
            
                'imprime gerencial
                lErro = TEF_Imprime_Gerencial_PAYGO(objMsg, objTela, objVenda)
            
            End If
    
        Loop
        
        lErro1 = TEF_Trata_Resp1(objTEF, Arquivo_Tef_Resp2_Prop)
        If lErro1 <> SUCESSO Then gError 214571
        
        'se imprimiu corretamente
        If lErro = SUCESSO Then
        
            '<> 1 significa que requer confirmação =1 significa que nao precisa de confirmacao
            If objTEF.iStatusConfirmacao <> 1 Then
        
                lErro = TEF_Confirma_Transacao_PAYGO(objVenda)
                If lErro <> SUCESSO Then gError 133820
        
            End If
        
        Else
        
            lErro = TEF_NaoConfirma_Transacao_PAYGO(objTela)
            If lErro <> SUCESSO Then gError 133821
                
            gError 133822
        
        End If
        
        sArquivoSTS = Dir(Arquivo_Tef_Resp1_Prop)
        If sArquivoSTS <> "" Then ECF_Apaga_Arquivo Arquivo_Tef_Resp1_Prop
    
        sArquivoINTPOS = Dir(Arquivo_Tef_Resp2_Prop)
        If sArquivoINTPOS <> "" Then ECF_Apaga_Arquivo Arquivo_Tef_Resp2_Prop
        
        sArquivoINTPOSBACK = Dir(Arquivo_Tef_Resp2_Backup_Prop)
        If sArquivoINTPOSBACK <> "" Then ECF_Apaga_Arquivo Arquivo_Tef_Resp2_Backup_Prop
        
        If Not objVenda Is Nothing Then
    
            sNomeArq = "a"
    
            Do While Len(sNomeArq) > 0
            
                sNomeArq = Dir(gsDirMVTEF & "TEF_" & objVenda.objCupomFiscal.lNumero & "_" & "*.txt")
        
                If Len(sNomeArq) > 0 Then ECF_Apaga_Arquivo gsDirMVTEF & sNomeArq
                
            Loop
    
        End If
            
            
            
'            Call WritePrivateProfileString(APLICACAO_ECF, "CancelamentoTEF", "", NOME_ARQUIVO_CAIXA)
'
'        End If
'
    End If
    
    TEF_Imprime_CNC_PAYGO = SUCESSO

    Exit Function

Erro_TEF_Imprime_CNC_PAYGO:

    TEF_Imprime_CNC_PAYGO = gErr
    
    If Not objVenda Is Nothing Then

        sNomeArq = "a"

        Do While Len(sNomeArq) > 0
        
            sNomeArq = Dir(gsDirMVTEF & "TEF_" & objVenda.objCupomFiscal.lNumero & "_" & "*.txt")
            
            If Len(sNomeArq) > 0 Then ECF_Apaga_Arquivo gsDirMVTEF & sNomeArq
            
        Loop

    End If
    
    
    Select Case gErr
    
        Case 133820, 133821, 133822
    
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149358)
    
    End Select

End Function

Function TEF_Trata_Resp1(objTEF As ClassTEF, ByVal sNomeArq As String) As Long

Dim lErro As Long
Dim sReg As String

On Error GoTo Erro_TEF_Trata_Resp1


    'Abre o arquivo de resposta do gerenciador
'    Open Arquivo_Tef_Resp2_Prop For Input As #2
    
'    lErro = ECF_Abrir_Arquivo(Arquivo_Tef_Resp2_Prop, 2)
    lErro = ECF_Abrir_Arquivo(sNomeArq, 2)
    If lErro <> SUCESSO Then gError 214583
    
    'Até chegar ao fim do arquivo
    Do While Not EOF(2)

        'Busca o próximo registro do arquivo
        Line Input #2, sReg
        
        Select Case Mid(sReg, 1, 7)
        
            Case "000-000" 'comando
                objTEF.sComando = right(sReg, Len(sReg) - 10)
        
            Case "001-000" 'identificacao
                objTEF.sIdentificacao = right(sReg, Len(sReg) - 10)
'                            If right(sReg, Len(sReg) - 10) <> glNumProxIdentificacao Then
'                                Close #2
'                                ECF_Apaga_Arquivo Arquivo_Tef_Resp2_Prop
'                                Exit Do
'                            End If
                            
            Case "003-000" 'valor total
                
                objTEF.dValorTotal = StrParaDbl(Mid(sReg, 11, Len(sReg) - 10)) / 100
                            
            Case "009-000" 'status
                If right(sReg, Len(sReg) - 10) = "0" Then
                    objTEF.iTransacao = 1
                Else
                    'se houve erro ==> remove o arquivo de resposta e retorna ao loop dos sete segundos
                    objTEF.iTransacao = -1
                End If
                            
            'Recolhe a rede
            Case "010-000"
                objTEF.sRede = Trim(UCase(right(sReg, Len(sReg) - 10)))
                
'                        Case "010-001"
'                            objTEF.iRede = StrParaInt(Trim(UCase(right(sReg, Len(sReg) - 10))))
                
            'tipo de pagamento
            Case "011-000"
                objTEF.iTipoTransacao = StrParaInt(right(sReg, Len(sReg) - 10))

'                            If giTipoTEF = TIPOTEF_SITEF Then
'
'                                objTEF.iTipoTransacao = StrParaInt(Mid(sReg, 11, 3))
'
'                                Select Case objTEF.iTipoTransacao
'
'                                    Case TIPOTRANS_SITEF_CRED_MAGN, TIPOTRANS_SITEF_CRED_DIG, TIPOTRANS_SITEF_CRED_PARC, TIPOTRANS_SITEF_CAPTURA_PRE_AUT, TIPOTRANS_SITEF_OUTRAS_CONSULTAS
'                                        For Each objTiposMeiosPagtos In gcolTiposMeiosPagtos
'                                            'Se for do tipo procurado
'                                            If objTiposMeiosPagtos.iTipo = TIPOMEIOPAGTOLOJA_CARTAO_CREDITO Then
'                                                objTEF.sDescricao = objTiposMeiosPagtos.sDescricao
'                                                objTEF.iTipo = objTiposMeiosPagtos.iTipo
'                                                objTEF.iTipoMov = MOVIMENTOCAIXA_RECEB_CARTAOCREDITO
'                                                objTEF.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_CARTAO_CREDITO
'                                                Exit For
'                                            End If
'                                        Next
'
'
'                                    Case TIPOTRANS_SITEF_DEB_MAGN, TIPOTRANS_SITEF_DEB_FORCADA, TIPOTRANS_SITEF_DEB_PRE, TIPOTRANS_SITEF_DEB_PARC_CENT, TIPOTRANS_SITEF_DEB_PARC_SENT, TIPOTRANS_SITEF_CDC, TIPOTRANS_SITEF_DEB_PARC
'
'                                        objTEF.iNumParcelas = 1
'                                        For Each objTiposMeiosPagtos In gcolTiposMeiosPagtos
'                                            'Se for do tipo procurado
'                                            If objTiposMeiosPagtos.iTipo = TIPOMEIOPAGTOLOJA_CARTAO_DEBITO Then
'                                                objTEF.sDescricao = objTiposMeiosPagtos.sDescricao
'                                                objTEF.iTipo = objTiposMeiosPagtos.iTipo
'                                                objTEF.iTipoMov = MOVIMENTOCAIXA_RECEB_CARTAODEBITO
'                                                objTEF.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_CARTAO_DEBITO
'                                                Exit For
'                                            End If
'                                         Next
'
'                                End Select
'
'                            Else
'
'                                objTEF.iTipoTransacao = StrParaInt(Mid(sReg, 11, 2))
'                                If objTEF.iTipoTransacao = TIPOTRANS_DISC_CRED_VISTA Or objTEF.iTipoTransacao = TIPOTRANS_DISC_CRED_PARC_LOJA Or objTEF.iTipoTransacao = TIPOTRANS_DISC_CRED_PARC_ADM Then
'                                    For Each objTiposMeiosPagtos In gcolTiposMeiosPagtos
'                                        'Se for do tipo procurado
'                                        If objTiposMeiosPagtos.iTipo = TIPOMEIOPAGTOLOJA_CARTAO_CREDITO Then
'                                            objTEF.sDescricao = objTiposMeiosPagtos.sDescricao
'                                            objTEF.iTipo = objTiposMeiosPagtos.iTipo
'                                            objTEF.iTipoMov = MOVIMENTOCAIXA_RECEB_CARTAOCREDITO
'                                            objTEF.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_CARTAO_CREDITO
'                                            Exit For
'                                        End If
'                                    Next
'
'                                    If objTEF.iTipoTransacao = TIPOTRANS_DISC_CRED_VISTA Then
'                                        objTEF.iNumParcelas = 1
'                                    End If
'
'                                ElseIf Mid(sReg, 11, 1) = "2" Or objTEF.iTipoTransacao = TIPOTRANS_DISC_CDC Then
'                                    objTEF.iNumParcelas = 1
'                                    For Each objTiposMeiosPagtos In gcolTiposMeiosPagtos
'                                        'Se for do tipo procurado
'                                        If objTiposMeiosPagtos.iTipo = TIPOMEIOPAGTOLOJA_CARTAO_DEBITO Then
'                                            objTEF.sDescricao = objTiposMeiosPagtos.sDescricao
'                                            objTEF.iTipo = objTiposMeiosPagtos.iTipo
'                                            objTEF.iTipoMov = MOVIMENTOCAIXA_RECEB_CARTAODEBITO
'                                            objTEF.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_CARTAO_DEBITO
'                                            Exit For
'                                        End If
'                                     Next
'
'                                End If
'
'                            End If
                                    
            'número da NSU
            Case "012-000"
                objTEF.sNSU = right(sReg, Len(sReg) - 10)
                
            Case "013-000"
                objTEF.sAutorizacao = right(sReg, Len(sReg) - 10)

            Case "017-000"
                objTEF.iTipoParcelamento = right(sReg, Len(sReg) - 10)
                
            'Quantidade de parcelas
            Case "018-000"
                objTEF.iNumParcelas = StrParaInt(Mid(sReg, 11, Len(sReg) - 10))
                                    
            'data no comprovante
            Case "022-000"
                objTEF.dtDataComprovante = StrParaDate(Mid(sReg, 11, 2) & "/" & Mid(sReg, 13, 2) & "/" & Mid(sReg, 15, 4))
                
            'data no comprovante
            Case "023-000"
                objTEF.dtHoraComprovante = StrParaDate(Mid(sReg, 11, 2) & ":" & Mid(sReg, 13, 2) & ":" & Mid(sReg, 15, 2))
                
            'data pré-datado
            Case "024-000"
                objTEF.dtDataPreDatado = StrParaDate(Mid(sReg, 11, 2) & "/" & Mid(sReg, 13, 2) & "/" & Mid(sReg, 15, 4))
                
            'NSU Original
            Case "025-000"
                objTEF.sNSUOriginal = right(sReg, Len(sReg) - 10)
                
            'DataHora Original no formato ddmmhhmmss
            Case "026-000"
                objTEF.sDataHoraOriginal = right(sReg, Len(sReg) - 10)
                
            'Recolhe a finalização
            Case "027-000"
                objTEF.sFinalizacao = Mid(sReg, 11, Len(sReg) - 10)
                
            Case "028-000"
                objTEF.iTamViaUnica = StrParaInt(Mid(sReg, 11, Len(sReg) - 10))
                                        
'                            If objTEF.iTransacao = 1 Then
'
'                                iLoop = Mid(sReg, 11, Len(sReg) - 10)
'
'                                Open sArquivoIMP For Append As #3
'
'                                For iIndice = 1 To iLoop
'
'                                    'Busca o próximo registro do arquivo
'                                    Line Input #1, sReg
'
'                                    If Mid(sReg, 1, 3) = "029" Then
'
'                                        sTxt = Mid(sReg, 12, Len(sReg) - 12)
'                                        If sTxt = "" Then sTxt = "         "
'
'                                        Print #3, sTxt
'                                        iImprimeLinha = 1
'
'                                    End If
'
'                                Next
'
'                                'Fecha o Arquivo
'                                Close #3
'
'                            End If
                            
            'mensagem para operador
            Case "030-000"
                objTEF.sOperador = Mid(sReg, 11, Len(sReg) - 10)
                
            'administradora ou nome do cartao
            Case "040-000"
'                            If giTipoTEF = TIPOTEF_DISC Then objTEF.sAdm = UCase(Mid(sReg, 11, Len(sReg) - 10))
                objTEF.sAdm = UCase(Mid(sReg, 11, Len(sReg) - 10))
        
            'valor original
            Case "707-000"
                objTEF.dValorOriginal = StrParaDbl(Mid(sReg, 11, Len(sReg) - 10)) / 100
        
            'valor troco
            Case "708-000"
                objTEF.dValorTroco = StrParaDbl(Mid(sReg, 11, Len(sReg) - 10)) / 100
        
            'valor desconto
            Case "709-000"
                objTEF.dValorDesconto = StrParaDbl(Mid(sReg, 11, Len(sReg) - 10)) / 100
        
            'numero de linhas do cupom reduzido
            Case "710-000"
                objTEF.iTamReduzido = StrParaInt(Mid(sReg, 11, Len(sReg) - 10))
        
            'numero de linhas da via do cliente
            Case "712-000"
                objTEF.iTamViaCliente = StrParaInt(Mid(sReg, 11, Len(sReg) - 10))
        
            'numero de linhas da via do estabelecimento
            Case "714-000"
                objTEF.iTamViaEstab = StrParaInt(Mid(sReg, 11, Len(sReg) - 10))
        
            'numero do terminal
            Case "718-000"
                objTEF.sNumTerminal = Mid(sReg, 11, Len(sReg) - 10)
        
            'codigo do estabelecimento
            Case "719-000"
                objTEF.sCodEstab = Mid(sReg, 11, Len(sReg) - 10)
        
            'status de confirmação
            Case "729-000"
                objTEF.iStatusConfirmacao = StrParaInt(Mid(sReg, 11, Len(sReg) - 10))
        
            'tipo de operacao (venda, cancelamento, consulta de cheque, garantia de cheque, pre-autorizacao ...)
            Case "730-000"
                objTEF.iOperacao = StrParaInt(Mid(sReg, 11, Len(sReg) - 10))
        
            'tipo de cartao (credito, debito, voucher)
            Case "731-000"
                objTEF.iTipoCartao = StrParaInt(Mid(sReg, 11, Len(sReg) - 10))
        
            'tipo de financiamento (a vista, parcelada pelo emissor, parcelado pela loja, pre-datado, pre-datado forcado)
            Case "732-000"
                objTEF.iTipoFinanciamento = StrParaInt(Mid(sReg, 11, Len(sReg) - 10))
        
            'vias de comprovante
            Case "737-000"
                objTEF.iViasComprovante = StrParaInt(Mid(sReg, 11, Len(sReg) - 10))
        
        End Select
        
        If Mid(sReg, 1, 3) = "029" Then
        
            objTEF.colViaUnica.Add Mid(sReg, 12, Len(sReg) - 12)
                                
        End If
        
        If Mid(sReg, 1, 3) = "711" Then
        
            objTEF.colReduzido.Add Mid(sReg, 12, Len(sReg) - 12)
                                
        End If
        
        If Mid(sReg, 1, 3) = "713" Then
        
            objTEF.colViaCliente.Add Mid(sReg, 12, Len(sReg) - 12)
                                
        End If
        
        If Mid(sReg, 1, 3) = "715" Then
        
            objTEF.colViaEstab.Add Mid(sReg, 12, Len(sReg) - 12)
                                
        End If
        
        
    Loop

    If objTEF.iNumParcelas = 0 Then objTEF.iNumParcelas = 1

    Close #2

    
    
    
    TEF_Trata_Resp1 = SUCESSO
    
    Exit Function

Erro_TEF_Trata_Resp1:

    TEF_Trata_Resp1 = gErr

    Close #2

    Select Case gErr
    
        Case 53
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO2, gErr)

        Case 214583

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 214567)

    End Select
    
    Exit Function

End Function

Function ECF_Abrir_Arquivo(ByVal sNomeArquivo As String, ByVal fileNumber As Integer) As Long

Dim iTentativa As Integer
Dim lErro As Long

On Error GoTo Erro_ECF_Abrir_Arquivo
    
    iTentativa = 1
    
    Do While iTentativa < 10

        lErro = 0

        Open sNomeArquivo For Input As fileNumber

        If lErro = 0 Then Exit Do
        
        iTentativa = iTentativa + 1
        
    Loop

    ECF_Abrir_Arquivo = SUCESSO

    Exit Function

Erro_ECF_Abrir_Arquivo:

    Sleep 1000
    
    lErro = 1
    
    If iTentativa < 9 Then Resume Next
    
    ECF_Abrir_Arquivo = gErr
    
    Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1 & ". Arquivo: " & sNomeArquivo, gErr, Error, 214582)

End Function

Function ECF_Abrir_Arquivo_Binario(ByVal sNomeArquivo As String, ByVal fileNumber As Integer) As Long

Dim iTentativa As Integer
Dim lErro As Long

On Error GoTo Erro_ECF_Abrir_Arquivo_Binario
    
    iTentativa = 1
    
    Do While iTentativa < 10

        lErro = 0

        Open sNomeArquivo For Binary As fileNumber

        If lErro = 0 Then Exit Do
        
        iTentativa = iTentativa + 1
        
    Loop

    ECF_Abrir_Arquivo_Binario = SUCESSO

    Exit Function

Erro_ECF_Abrir_Arquivo_Binario:

    Sleep 1000
    
    lErro = 1
    
    If iTentativa < 9 Then Resume Next
    
    ECF_Abrir_Arquivo_Binario = gErr
    
    Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1 & ". Arquivo: " & sNomeArquivo, gErr, Error, 216161)

End Function

Function ECF_Transfere_Arquivo(ByVal sNomeArquivoOrigem As String, ByVal sNomeArquivoDestino As String) As Long

Dim iTentativa As Integer
Dim lErro As Long

On Error GoTo Erro_ECF_Transfere_Arquivo
    
    iTentativa = 1
    
    Do While iTentativa < 10

        lErro = 0

        FileCopy sNomeArquivoOrigem, sNomeArquivoDestino

        If lErro = 0 Then Exit Do
        
        iTentativa = iTentativa + 1
        
    Loop

    ECF_Transfere_Arquivo = SUCESSO

    Exit Function

Erro_ECF_Transfere_Arquivo:

    Sleep 1000
    
    lErro = 1
    
    If iTentativa < 9 Then Resume Next
    
    ECF_Transfere_Arquivo = gErr
    
    Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1 & ". Arquivo Origem: " & sNomeArquivoOrigem & " Destino: sNomeArquivoDestino", gErr, Error, 216162)

End Function

Sub ECF_Apaga_Arquivo(ByVal sNomeArquivo As String)
Dim lErro As Long
    lErro = ECF_Kill_Arquivo(sNomeArquivo)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
End Sub

Function ECF_Kill_Arquivo(ByVal sNomeArquivo As String) As Long

Dim iTentativa As Integer
Dim lErro As Long

On Error GoTo Erro_ECF_Kill_Arquivo
    
    iTentativa = 1
    
    Do While iTentativa < 10

        lErro = 0

        Kill sNomeArquivo

        If lErro = 0 Then Exit Do
        
        iTentativa = iTentativa + 1
        
    Loop

    ECF_Kill_Arquivo = SUCESSO

    Exit Function

Erro_ECF_Kill_Arquivo:

    Sleep 1000
    
    lErro = 1
    
    If iTentativa < 9 Then Resume Next
    
    ECF_Kill_Arquivo = gErr
    
    Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1 & ". Arquivo: " & sNomeArquivo, gErr, Error, 216160)

End Function

Private Function TEF_Trata_Resp_PAYGO(ByVal objTEF As ClassTEF, ByVal objMsg As Object, ByVal objTela As Object, ByVal objVenda As ClassVenda) As Long

Dim lErro As Long
Dim sArquivoSTS As String
Dim sArquivoINTPOS As String
Dim sArquivoINTPOSBACK As String
Dim sArquivoIMP As String
Dim sReg As String
Dim sTxt As String
Dim objTiposMeiosPagtos As ClassTMPLoja
Dim iIndice As Integer
Dim iIndice1 As Integer
Dim iLoop As Integer
Dim vbMsg As VbMsgBoxResult
Dim iImprimeLinha As Integer
Dim iTentativas As Integer
Dim sArqSTS As String
Dim sArqCNF_NCN As String
Dim vTexto As Variant

On Error GoTo Erro_TEF_Trata_Resp_PAYGO

    Call ECF_Grava_Log("TEF_Trata_Resp_PAYGO 01-> Arquivo_Tef_Imp_Prop: " & gsDirMVTEF & Arquivo_Tef_Imp_Prop, "INFO")

    sArquivoIMP = gsDirMVTEF & Arquivo_Tef_Imp_Prop

    objTEF.iTipoParcelamento = -1
    objTEF.iTransacao = 0
    
    For iIndice1 = 1 To 7
        
        sArquivoSTS = Dir(Arquivo_Tef_Resp1_Prop)
        
        Call ECF_Grava_Log("TEF_Trata_Resp_PAYGO 02." & CStr(iIndice1) & "-> sArquivoSTS: " & sArquivoSTS, "INFO")
        
        If sArquivoSTS <> "" Then
    
            'Abre o arquivo de resposta do gerenciador
'            Open Arquivo_Tef_Resp1_Prop For Input As #1
            
            lErro = ECF_Abrir_Arquivo(Arquivo_Tef_Resp1_Prop, 1)
            If lErro <> SUCESSO Then gError 214584
            
            Call ECF_Grava_Log("TEF_Trata_Resp_PAYGO 03." & CStr(iIndice1) & "-> Arquivo_Tef_Resp1_Prop: " & Arquivo_Tef_Resp1_Prop, "INFO")
            
            'Até chegar ao fim do arquivo
            Do While Not EOF(1)
        
                'Busca o próximo registro do arquivo
                Line Input #1, sReg

                Call ECF_Grava_Log("TEF_Trata_Resp_PAYGO 04." & CStr(iIndice1) & "-> sReg: " & sReg, "INFO")

                Select Case Mid(sReg, 1, 7)
                
                    Case "001-000"
                        'verifica se a identificacao no arquivo de resposta e' o mesmo do arquivo de requisicao
                        If right(sReg, Len(sReg) - 10) <> glNumProxIdentificacao Then
                            Close #1
                            
                            Call ECF_Grava_Log("TEF_Trata_Resp_PAYGO 05." & CStr(iIndice1) & "-> glNumProxIdentificacao: " & CStr(glNumProxIdentificacao), "INFO")
                            
                            ECF_Apaga_Arquivo Arquivo_Tef_Resp1_Prop
                            Exit Do
                        Else
                            Exit For
                        End If
                        
                End Select
                                                        
            Loop
            
        Else
            
            Call ECF_Grava_Log("TEF_Trata_Resp_PAYGO 06." & CStr(iIndice1) & "-> Sleep 1000", "INFO")
            
            Sleep 1000
        End If
    
    Next
    
    Call ECF_Grava_Log("TEF_Trata_Resp_PAYGO 07-> Arquivo_Tef_Imp_Prop: " & gsDirMVTEF & Arquivo_Tef_Imp_Prop, "INFO")
    
    sArquivoSTS = Dir(Arquivo_Tef_Resp1_Prop)
    
    If sArquivoSTS <> "" Then

        Close #1
        
        Do While True
        
            'Verifica o arquivo intpos.001
            sArquivoINTPOS = Dir(Arquivo_Tef_Resp2_Prop)
            
            If sArquivoINTPOS <> "" Then
        
                Call ECF_Grava_Log("TEF_Trata_Resp_PAYGO 08-> Arquivo_Tef_Resp2_Backup_Prop: " & Arquivo_Tef_Resp2_Backup_Prop, "INFO")
        
                sArquivoINTPOSBACK = Dir(Arquivo_Tef_Resp2_Backup_Prop)
                If sArquivoINTPOSBACK <> "" Then ECF_Apaga_Arquivo Arquivo_Tef_Resp2_Backup_Prop

                FileCopy Arquivo_Tef_Resp2_Prop, Arquivo_Tef_Resp2_Backup_Prop
        
                'Atualiza o arquivo
                lErro = WritePrivateProfileString(APLICACAO_ECF, "StatusTEF", TEF_STATUS_VENDA, NOME_ARQUIVO_CAIXA)
                If lErro = 0 Then gError 133696
        
                'funcao que cria/altera a chave e grava no caixaconfig.ini
                lErro = CF_ECF("CaixaConfig_Chave")
                If lErro <> SUCESSO Then gError 204273
                
                Call ECF_Grava_Log("TEF_Trata_Resp_PAYGO 09-> Arquivo_Tef_Resp2_Prop: " & Arquivo_Tef_Resp2_Prop, "INFO")
                
                lErro = TEF_Trata_Resp1(objTEF, Arquivo_Tef_Resp2_Prop)
                If lErro <> SUCESSO Then gError 214568
    
                Call ECF_Grava_Log("TEF_Trata_Resp_PAYGO 10-> Arquivo_Tef_Resp2_Prop: " & Arquivo_Tef_Resp2_Prop, "INFO")
    
'                'Abre o arquivo de resposta do gerenciador
'                Open Arquivo_Tef_Resp2_Prop For Input As #2
'
'                'Até chegar ao fim do arquivo
'                Do While Not EOF(2)
'
'                    'Busca o próximo registro do arquivo
'                    Line Input #2, sReg
'
'                    Select Case Mid(sReg, 1, 7)
'
'                        Case "000-000" 'comando
'                            objTEF.sComando = right(sReg, Len(sReg) - 10)
'
'                        Case "001-000" 'identificacao
'                            objTEF.sIdentificacao = right(sReg, Len(sReg) - 10)
''                            If right(sReg, Len(sReg) - 10) <> glNumProxIdentificacao Then
''                                Close #2
''                                ECF_Apaga_Arquivo Arquivo_Tef_Resp2_Prop
''                                Exit Do
''                            End If
'
'                        Case "003-000" 'valor total
'                            objTEF.dValorTotal = StrParaDbl(Mid(sReg, 11, Len(sReg) - 10)) / 100
'
'                        Case "009-000" 'status
'                            If right(sReg, Len(sReg) - 10) = "0" Then
'                                objTEF.iTransacao = 1
'                            Else
'                                'se houve erro ==> remove o arquivo de resposta e retorna ao loop dos sete segundos
'                                objTEF.iTransacao = -1
'                            End If
'
'                        'Recolhe a rede
'                        Case "010-000"
'                            objTEF.sRede = Trim(UCase(right(sReg, Len(sReg) - 10)))
'
''                        Case "010-001"
''                            objTEF.iRede = StrParaInt(Trim(UCase(right(sReg, Len(sReg) - 10))))
'
'                        'tipo de pagamento
''                        Case "011-000"
''
''                            If giTipoTEF = TIPOTEF_SITEF Then
''
''                                objTEF.iTipoTransacao = StrParaInt(Mid(sReg, 11, 3))
''
''                                Select Case objTEF.iTipoTransacao
''
''                                    Case TIPOTRANS_SITEF_CRED_MAGN, TIPOTRANS_SITEF_CRED_DIG, TIPOTRANS_SITEF_CRED_PARC, TIPOTRANS_SITEF_CAPTURA_PRE_AUT, TIPOTRANS_SITEF_OUTRAS_CONSULTAS
''                                        For Each objTiposMeiosPagtos In gcolTiposMeiosPagtos
''                                            'Se for do tipo procurado
''                                            If objTiposMeiosPagtos.iTipo = TIPOMEIOPAGTOLOJA_CARTAO_CREDITO Then
''                                                objTEF.sDescricao = objTiposMeiosPagtos.sDescricao
''                                                objTEF.iTipo = objTiposMeiosPagtos.iTipo
''                                                objTEF.iTipoMov = MOVIMENTOCAIXA_RECEB_CARTAOCREDITO
''                                                objTEF.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_CARTAO_CREDITO
''                                                Exit For
''                                            End If
''                                        Next
''
''
''                                    Case TIPOTRANS_SITEF_DEB_MAGN, TIPOTRANS_SITEF_DEB_FORCADA, TIPOTRANS_SITEF_DEB_PRE, TIPOTRANS_SITEF_DEB_PARC_CENT, TIPOTRANS_SITEF_DEB_PARC_SENT, TIPOTRANS_SITEF_CDC, TIPOTRANS_SITEF_DEB_PARC
''
''                                        objTEF.iNumParcelas = 1
''                                        For Each objTiposMeiosPagtos In gcolTiposMeiosPagtos
''                                            'Se for do tipo procurado
''                                            If objTiposMeiosPagtos.iTipo = TIPOMEIOPAGTOLOJA_CARTAO_DEBITO Then
''                                                objTEF.sDescricao = objTiposMeiosPagtos.sDescricao
''                                                objTEF.iTipo = objTiposMeiosPagtos.iTipo
''                                                objTEF.iTipoMov = MOVIMENTOCAIXA_RECEB_CARTAODEBITO
''                                                objTEF.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_CARTAO_DEBITO
''                                                Exit For
''                                            End If
''                                         Next
''
''                                End Select
''
''                            Else
''
''                                objTEF.iTipoTransacao = StrParaInt(Mid(sReg, 11, 2))
''                                If objTEF.iTipoTransacao = TIPOTRANS_DISC_CRED_VISTA Or objTEF.iTipoTransacao = TIPOTRANS_DISC_CRED_PARC_LOJA Or objTEF.iTipoTransacao = TIPOTRANS_DISC_CRED_PARC_ADM Then
''                                    For Each objTiposMeiosPagtos In gcolTiposMeiosPagtos
''                                        'Se for do tipo procurado
''                                        If objTiposMeiosPagtos.iTipo = TIPOMEIOPAGTOLOJA_CARTAO_CREDITO Then
''                                            objTEF.sDescricao = objTiposMeiosPagtos.sDescricao
''                                            objTEF.iTipo = objTiposMeiosPagtos.iTipo
''                                            objTEF.iTipoMov = MOVIMENTOCAIXA_RECEB_CARTAOCREDITO
''                                            objTEF.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_CARTAO_CREDITO
''                                            Exit For
''                                        End If
''                                    Next
''
''                                    If objTEF.iTipoTransacao = TIPOTRANS_DISC_CRED_VISTA Then
''                                        objTEF.iNumParcelas = 1
''                                    End If
''
''                                ElseIf Mid(sReg, 11, 1) = "2" Or objTEF.iTipoTransacao = TIPOTRANS_DISC_CDC Then
''                                    objTEF.iNumParcelas = 1
''                                    For Each objTiposMeiosPagtos In gcolTiposMeiosPagtos
''                                        'Se for do tipo procurado
''                                        If objTiposMeiosPagtos.iTipo = TIPOMEIOPAGTOLOJA_CARTAO_DEBITO Then
''                                            objTEF.sDescricao = objTiposMeiosPagtos.sDescricao
''                                            objTEF.iTipo = objTiposMeiosPagtos.iTipo
''                                            objTEF.iTipoMov = MOVIMENTOCAIXA_RECEB_CARTAODEBITO
''                                            objTEF.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_CARTAO_DEBITO
''                                            Exit For
''                                        End If
''                                     Next
''
''                                End If
''
''                            End If
'
'                        'número da NSU
'                        Case "012-000"
'                            objTEF.sNSU = right(sReg, Len(sReg) - 10)
'
'                        Case "013-000"
'                            objTEF.sAutorizacao = right(sReg, Len(sReg) - 10)
''
''                        Case "017-000"
''                            objTEF.iTipoParcelamento = right(sReg, Len(sReg) - 10)
'
'                        'Quantidade de parcelas
'                        Case "018-000"
'                            objTEF.iNumParcelas = StrParaInt(Mid(sReg, 11, Len(sReg) - 10))
'
'                        'data no comprovante
'                        Case "022-000"
'                            objTEF.dtDataComprovante = StrParaDate(Mid(sReg, 11, 2) & "/" & Mid(sReg, 13, 2) & "/" & Mid(sReg, 15, 4))
'
'                        'data no comprovante
'                        Case "023-000"
'                            objTEF.dtHoraComprovante = StrParaDate(Mid(sReg, 11, 2) & ":" & Mid(sReg, 13, 2) & ":" & Mid(sReg, 15, 2))
'
'                        'data pré-datado
'                        Case "024-000"
'                            objTEF.dtDataPreDatado = StrParaDate(Mid(sReg, 11, 2) & "/" & Mid(sReg, 13, 2) & "/" & Mid(sReg, 15, 4))
'
'                        'NSU Original
'                        Case "025-000"
'                            objTEF.sNSUOriginal = right(sReg, Len(sReg) - 10)
'
'                        'DataHora Original no formato ddmmhhmmss
'                        Case "026-000"
'                            objTEF.sDataHoraOriginal = right(sReg, Len(sReg) - 10)
'
'                        'Recolhe a finalização
'                        Case "027-000"
'                            objTEF.sFinalizacao = Mid(sReg, 11, Len(sReg) - 10)
'
'                        Case "028-000"
'                            objTEF.iTamViaUnica = StrParaInt(Mid(sReg, 11, Len(sReg) - 10))
'
''                            If objTEF.iTransacao = 1 Then
''
''                                iLoop = Mid(sReg, 11, Len(sReg) - 10)
''
''                                Open sArquivoIMP For Append As #3
''
''                                For iIndice = 1 To iLoop
''
''                                    'Busca o próximo registro do arquivo
''                                    Line Input #1, sReg
''
''                                    If Mid(sReg, 1, 3) = "029" Then
''
''                                        sTxt = Mid(sReg, 12, Len(sReg) - 12)
''                                        If sTxt = "" Then sTxt = "         "
''
''                                        Print #3, sTxt
''                                        iImprimeLinha = 1
''
''                                    End If
''
''                                Next
''
''                                'Fecha o Arquivo
''                                Close #3
''
''                            End If
'
'                        'mensagem para operador
'                        Case "030-000"
'                            objTEF.sOperador = Mid(sReg, 11, Len(sReg) - 10)
'
'                        'administradora ou nome do cartao
'                        Case "040-000"
''                            If giTipoTEF = TIPOTEF_DISC Then objTEF.sAdm = UCase(Mid(sReg, 11, Len(sReg) - 10))
'                            objTEF.sAdm = UCase(Mid(sReg, 11, Len(sReg) - 10))
'
'                        'valor original
'                        Case "707-000"
'                            objTEF.dValorOriginal = StrParaDbl(Mid(sReg, 11, Len(sReg) - 10)) / 100
'
'                        'valor troco
'                        Case "708-000"
'                            objTEF.dValorTroco = StrParaDbl(Mid(sReg, 11, Len(sReg) - 10)) / 100
'
'                        'valor troco
'                        Case "709-000"
'                            objTEF.dValorDesconto = StrParaDbl(Mid(sReg, 11, Len(sReg) - 10)) / 100
'
'                        'numero de linhas do cupom reduzido
'                        Case "710-000"
'                            objTEF.iTamReduzido = StrParaInt(Mid(sReg, 11, Len(sReg) - 10))
'
'                        'numero de linhas da via do cliente
'                        Case "712-000"
'                            objTEF.iTamViaCliente = StrParaInt(Mid(sReg, 11, Len(sReg) - 10))
'
'                        'numero de linhas da via do estabelecimento
'                        Case "714-000"
'                            objTEF.iTamViaEstab = StrParaInt(Mid(sReg, 11, Len(sReg) - 10))
'
'                        'numero do terminal
'                        Case "718-000"
'                            objTEF.sNumTerminal = Mid(sReg, 11, Len(sReg) - 10)
'
'                        'codigo do estabelecimento
'                        Case "719-000"
'                            objTEF.sCodEstab = Mid(sReg, 11, Len(sReg) - 10)
'
'                        'status de confirmação
'                        Case "729-000"
'                            objTEF.iStatusConfirmacao = StrParaInt(Mid(sReg, 11, Len(sReg) - 10))
'
'                        'tipo de operacao (venda, cancelamento, consulta de cheque, garantia de cheque, pre-autorizacao ...)
'                        Case "730-000"
'                            objTEF.iOperacao = StrParaInt(Mid(sReg, 11, Len(sReg) - 10))
'
'                        'tipo de cartao (credito, debito, voucher)
'                        Case "731-000"
'                            objTEF.iTipoCartao = StrParaInt(Mid(sReg, 11, Len(sReg) - 10))
'
'                        'tipo de financiamento (a vista, parcelada pelo emissor, parcelado pela loja, pre-datado, pre-datado forcado)
'                        Case "732-000"
'                            objTEF.iTipoFinanciamento = StrParaInt(Mid(sReg, 11, Len(sReg) - 10))
'
'                        'vias de comprovante
'                        Case "737-000"
'                            objTEF.iViasComprovante = StrParaInt(Mid(sReg, 11, Len(sReg) - 10))
'
'                    End Select
'
'                    If Mid(sReg, 1, 3) = "029" Then
'
'                        objTEF.colViaUnica.Add Mid(sReg, 12, Len(sReg) - 12)
'
'                    End If
'
'                    If Mid(sReg, 1, 3) = "711" Then
'
'                        objTEF.colReduzido.Add Mid(sReg, 12, Len(sReg) - 12)
'
'                    End If
'
'                    If Mid(sReg, 1, 3) = "713" Then
'
'                        objTEF.colViaCliente.Add Mid(sReg, 12, Len(sReg) - 12)
'
'                    End If
'
'                    If Mid(sReg, 1, 3) = "715" Then
'
'                        objTEF.colViaEstab.Add Mid(sReg, 12, Len(sReg) - 12)
'
'                    End If
'
'
'                Loop
                
'                If objTEF.sIdentificacao <> glNumProxIdentificacao Then
'                    Exit Do
'                End If
                
                Exit Do
                
            Else
                Sleep 1000
                
                Call ECF_Grava_Log("TEF_Trata_Resp_PAYGO 11-> Sleep 1000", "INFO")
                
            End If
        
        Loop

    End If
        
'        Else
'            Sleep 1000
'        End If
        
        
'    Next
        
    'gerenciador padrao nao esta ativo
    If sArquivoSTS = "" Then gError 133690
        
    Call ECF_Grava_Log("TEF_Trata_Resp_PAYGO 12-> objTEF.sIdentificacao: " & objTEF.sIdentificacao, "INFO")
        
    If objTEF.sIdentificacao <> glNumProxIdentificacao Then gError 214529
        
        
    'tratamento do campo 30 foi colocado nesta posicao pois a ordem dos campos
    'no arquivo nao e´sempre obedecido.
        
'    If objTEF.sOperador <> "" Then
'
'        If iImprimeLinha = 0 Then
'
'            If giTipoTEF = TIPOTEF_DISC Then Sleep 7000
'            objTela.objParent.SetFocus
'            vbMsg = Rotina_AvisoECF(vbOK, objTEF.sOperador)
'            objTela.objParent.Refresh
'
'        Else
'            objTela.objParent.SetFocus
'            objMsg.LabelMsg.Caption = objTEF.sOperador
'            objMsg.Show vbModal
'            objTela.objParent.Refresh
'        End If
'    Else
'        If iImprimeLinha <> 0 Then
'            objTela.objParent.SetFocus
'            objMsg.LabelMsg.Caption = "Aguarde Impressão"
'            objMsg.Show vbModal
'            objTela.objParent.Refresh
'
'        End If
'    End If
    

    Call ECF_Grava_Log("TEF_Trata_Resp_PAYGO 13-> objTEF.sOperador: " & objTEF.sOperador, "INFO")

    If objTEF.sOperador <> "" Then
        objTela.objParent.SetFocus
        objMsg.LabelMsg.Caption = objTEF.sOperador
        objMsg.Show vbModal
        objTela.objParent.Refresh
    End If
    
    Call ECF_Grava_Log("TEF_Trata_Resp_PAYGO 14-> objTEF.iTransacao: " & CStr(objTEF.iTransacao), "INFO")
    
    'se a transacao for negada ==>
    'deve-se remover o arquivo intpos.001 logo apos a exibicao da mensagem do campo 30
    If objTEF.iTransacao = -1 Then
    
        sArquivoSTS = Dir(Arquivo_Tef_Resp1_Prop)
        If sArquivoSTS <> "" Then ECF_Apaga_Arquivo Arquivo_Tef_Resp1_Prop
    
        sArquivoINTPOS = Dir(Arquivo_Tef_Resp2_Prop)
        If sArquivoINTPOS <> "" Then ECF_Apaga_Arquivo Arquivo_Tef_Resp2_Prop
    
        sArquivoINTPOSBACK = Dir(Arquivo_Tef_Resp2_Backup_Prop)
        If sArquivoINTPOSBACK <> "" Then ECF_Apaga_Arquivo Arquivo_Tef_Resp2_Backup_Prop
    
    
        gError 133735
    
    End If
        
    Call ECF_Grava_Log("TEF_Trata_Resp_PAYGO 15-> objTEF.iOperacao: " & CStr(objTEF.iOperacao) & " objTEF.iTipoCartao: " & CStr(objTEF.iTipoCartao), "INFO")
        
    'se a operacao = VENDA e o Tipo do cartao é CREDITO
    If objTEF.iOperacao = 1 And objTEF.iTipoCartao = 1 Then
            For Each objTiposMeiosPagtos In gcolTiposMeiosPagtos
                'Se for do tipo procurado
                If objTiposMeiosPagtos.iTipo = TIPOMEIOPAGTOLOJA_CARTAO_CREDITO Then
                    objTEF.sDescricao = objTiposMeiosPagtos.sDescricao
                    objTEF.iTipo = objTiposMeiosPagtos.iTipo
                    objTEF.iTipoMov = MOVIMENTOCAIXA_RECEB_CARTAOCREDITO
                    objTEF.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_CARTAO_CREDITO
                    Exit For
                End If
            Next
    End If

    Call ECF_Grava_Log("TEF_Trata_Resp_PAYGO 16-> objTEF.iOperacao: " & CStr(objTEF.iOperacao) & " objTEF.iTipoCartao: " & CStr(objTEF.iTipoCartao), "INFO")

    'se a operacao = VENDA e o Tipo do cartao é DEBITO
    If objTEF.iOperacao = 1 And objTEF.iTipoCartao = 2 Then
        For Each objTiposMeiosPagtos In gcolTiposMeiosPagtos
            'Se for do tipo procurado
            If objTiposMeiosPagtos.iTipo = TIPOMEIOPAGTOLOJA_CARTAO_DEBITO Then
                objTEF.sDescricao = objTiposMeiosPagtos.sDescricao
                objTEF.iTipo = objTiposMeiosPagtos.iTipo
                objTEF.iTipoMov = MOVIMENTOCAIXA_RECEB_CARTAODEBITO
                objTEF.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_CARTAO_DEBITO
                Exit For
            End If
         Next
    End If
        
    Call ECF_Grava_Log("TEF_Trata_Resp_PAYGO 17-> objTEF.iOperacao: " & CStr(objTEF.iOperacao) & " objTEF.iTipoCartao: " & CStr(objTEF.iTipoCartao), "INFO")
        
    'se a operacao = VENDA e o Tipo do cartao é Voucher
    If objTEF.iOperacao = 1 And objTEF.iTipoCartao = 3 Then
        For Each objTiposMeiosPagtos In gcolTiposMeiosPagtos
            'Se for do tipo procurado
            If objTiposMeiosPagtos.iTipo = TIPOMEIOPAGTOLOJA_VALE_REFEICAO Then
                objTEF.sDescricao = objTiposMeiosPagtos.sDescricao
                objTEF.iTipo = objTiposMeiosPagtos.iTipo
                objTEF.iTipoMov = MOVIMENTOCAIXA_RECEB_VALETICKET
                objTEF.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_VALE_REFEICAO
                Exit For
            End If
         Next
    End If
        
    Call ECF_Grava_Log("TEF_Trata_Resp_PAYGO 18-> objTEF.iOperacao: " & CStr(objTEF.iOperacao) & " objTEF.iTipoCartao: " & CStr(objTEF.iTipoCartao), "INFO")
        
    'se a operacao = VENDA e o Tipo do cartao é Private Label
    If objTEF.iOperacao = 1 And objTEF.iTipoCartao = 0 Then
        For Each objTiposMeiosPagtos In gcolTiposMeiosPagtos
            'Se for do tipo procurado
            If objTiposMeiosPagtos.iTipo = TIPOMEIOPAGTOLOJA_OUTROS Then
                objTEF.sDescricao = objTiposMeiosPagtos.sDescricao
                objTEF.iTipo = objTiposMeiosPagtos.iTipo
                objTEF.iTipoMov = MOVIMENTOCAIXA_RECEB_OUTROS
                objTEF.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_OUTROS
                Exit For
            End If
         Next
    End If
        
    Call ECF_Grava_Log("TEF_Trata_Resp_PAYGO 19-> objTEF.iOperacao: " & CStr(objTEF.iOperacao) & " objTEF.iTipoTransacao: " & CStr(objTEF.iTipoTransacao), "INFO")
        
    'se o campos 730-000 não for usado ==> vai usar o 011-000
    If objTEF.iOperacao = 0 And objTEF.iTipoTransacao <> 0 Then
        
        If objTEF.iTipoTransacao >= 10 And objTEF.iTipoTransacao <= 12 Then
            For Each objTiposMeiosPagtos In gcolTiposMeiosPagtos
                'Se for do tipo procurado
                If objTiposMeiosPagtos.iTipo = TIPOMEIOPAGTOLOJA_CARTAO_CREDITO Then
                    objTEF.sDescricao = objTiposMeiosPagtos.sDescricao
                    objTEF.iTipo = objTiposMeiosPagtos.iTipo
                    objTEF.iTipoMov = MOVIMENTOCAIXA_RECEB_CARTAOCREDITO
                    objTEF.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_CARTAO_CREDITO
                    Exit For
                End If
            Next
        End If
        
        If objTEF.iTipoTransacao >= 20 And objTEF.iTipoTransacao <= 24 Then
            For Each objTiposMeiosPagtos In gcolTiposMeiosPagtos
                'Se for do tipo procurado
                If objTiposMeiosPagtos.iTipo = TIPOMEIOPAGTOLOJA_CARTAO_DEBITO Then
                    objTEF.sDescricao = objTiposMeiosPagtos.sDescricao
                    objTEF.iTipo = objTiposMeiosPagtos.iTipo
                    objTEF.iTipoMov = MOVIMENTOCAIXA_RECEB_CARTAODEBITO
                    objTEF.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_CARTAO_DEBITO
                    Exit For
                End If
             Next
        End If
        
        If objTEF.iTipoTransacao = 60 Then
        
            For Each objTiposMeiosPagtos In gcolTiposMeiosPagtos
                'Se for do tipo procurado
                If objTiposMeiosPagtos.iTipo = TIPOMEIOPAGTOLOJA_VALE_REFEICAO Then
                    objTEF.sDescricao = objTiposMeiosPagtos.sDescricao
                    objTEF.iTipo = objTiposMeiosPagtos.iTipo
                    objTEF.iTipoMov = MOVIMENTOCAIXA_RECEB_VALETICKET
                    objTEF.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_VALE_REFEICAO
                    Exit For
                End If
             Next
        End If
        
        If objTEF.iTipoTransacao = 30 Then
        
            For Each objTiposMeiosPagtos In gcolTiposMeiosPagtos
                'Se for do tipo procurado
                If objTiposMeiosPagtos.iTipo = TIPOMEIOPAGTOLOJA_OUTROS Then
                    objTEF.sDescricao = objTiposMeiosPagtos.sDescricao
                    objTEF.iTipo = objTiposMeiosPagtos.iTipo
                    objTEF.iTipoMov = MOVIMENTOCAIXA_RECEB_OUTROS
                    objTEF.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_OUTROS
                    Exit For
                End If
             Next
        End If
        
        
    End If
        
    Call ECF_Grava_Log("TEF_Trata_Resp_PAYGO 20-> objTEF.colViaUnica.Count: " & CStr(objTEF.colViaUnica.Count), "INFO")
        
    If objTEF.colViaUnica.Count > 0 And Not objVenda Is Nothing Then
            
        If Len(Dir(sArquivoIMP)) > 0 Then ECF_Apaga_Arquivo sArquivoIMP
            
        Open sArquivoIMP For Append As #3
        
        For Each vTexto In objTEF.colViaUnica
            
            Print #3, vTexto
            
        Next
    
        Close #3

        lErro = TEF_Copia(objVenda, "VIAUNICA", objTEF)
        If lErro <> SUCESSO Then gError 214531
    
    End If
    
    Call ECF_Grava_Log("TEF_Trata_Resp_PAYGO 21-> objTEF.colViaCliente.Count: " & CStr(objTEF.colViaCliente.Count), "INFO")
    
    If objTEF.colViaCliente.Count > 0 And Not objVenda Is Nothing Then
            
        If Len(Dir(sArquivoIMP)) > 0 Then ECF_Apaga_Arquivo sArquivoIMP
            
        Open sArquivoIMP For Append As #3
        
        For Each vTexto In objTEF.colViaCliente
            
            Print #3, vTexto
            
        Next
    
        Close #3

        lErro = TEF_Copia(objVenda, "VIACLIENTE", objTEF)
        If lErro <> SUCESSO Then gError 214532
    
    End If
    
    Call ECF_Grava_Log("TEF_Trata_Resp_PAYGO 22-> objTEF.colViaEstab.Count: " & CStr(objTEF.colViaEstab.Count), "INFO")
    
    If objTEF.colViaEstab.Count > 0 And Not objVenda Is Nothing Then
            
        If Len(Dir(sArquivoIMP)) > 0 Then ECF_Apaga_Arquivo sArquivoIMP
            
        Open sArquivoIMP For Append As #3
        
        For Each vTexto In objTEF.colViaEstab
            
            Print #3, vTexto
            
        Next
    
        Close #3

        lErro = TEF_Copia(objVenda, "VIAESTAB", objTEF)
        If lErro <> SUCESSO Then gError 214533
    
    End If
    
    Call ECF_Grava_Log("TEF_Trata_Resp_PAYGO 23-> objTEF.colReduzido.Count: " & CStr(objTEF.colReduzido.Count), "INFO")
    
    If objTEF.colReduzido.Count > 0 And Not objVenda Is Nothing Then
            
        If Len(Dir(sArquivoIMP)) > 0 Then ECF_Apaga_Arquivo sArquivoIMP
            
        Open sArquivoIMP For Append As #3
        
        For Each vTexto In objTEF.colReduzido
            
            Print #3, vTexto
            
        Next
    
        Close #3

        lErro = TEF_Copia(objVenda, "VIAREDUZIDA", objTEF)
        If lErro <> SUCESSO Then gError 214534
    
    End If
    
    Call ECF_Grava_Log("TEF_Trata_Resp_PAYGO 24-> FIM", "INFO")
    
    'se tentou as 7 vezes e o arquivo nao foi retornado
'    If iIndice1 = 8 Then gError 133716
    
'    If iImprimeLinha = 0 Then gError 133717

    TEF_Trata_Resp_PAYGO = SUCESSO
    
    Exit Function

Erro_TEF_Trata_Resp_PAYGO:

    TEF_Trata_Resp_PAYGO = gErr

    Call ECF_Grava_Log("TEF_Trata_Resp_PAYGO 25-> ERRO: " & CStr(gErr), "INFO")

    Close #1
    Close #2
    
'    If objTEF.iTransacao = 1 Then
'
'        If UCase(Trim(objTEF.sOperador)) <> "INICIACAO DO TERMINAL CONCLUIDA." And UCase(Trim(objTEF.sOperador)) <> "INICIAÇÃO DO TERMINAL CONCLUÍDA." And _
'           UCase(Trim(objTEF.sOperador)) <> "INICIACAO DO TERMINAL CONCLUIDA" And UCase(Trim(objTEF.sOperador)) <> "INICIAÇÃO DO TERMINAL CONCLUÍDA" And _
'           UCase(Trim(objTEF.sOperador)) <> "INICIAÇAO DO TERMINAL CONCLUIDA" And UCase(Trim(objTEF.sOperador)) <> "INICIAÇAO DO TERMINAL CONCLUIDA." Then
'
'            If giTipoTEF = TIPOTEF_SITEF And (objTEF.iTipoTransacao = TIPOTRANS_SITEF_CONS_GAR_CHQ Or objTEF.iTipoTransacao = TIPOTRANS_SITEF_CONSULTA_AVS Or objTEF.iTipoTransacao = TIPOTRANS_SITEF_CONS_CGC_SERASA) Then
'
'            Else
'                'venda foi consumada ==> NCF
'                Call TEF_NaoConfirma_Transacao(objTela)
'
'                'Indica que a nao confirmacao foi completada para caso cair a energia
'                Call WritePrivateProfileString(APLICACAO_ECF, "StatusTEF", "", NOME_ARQUIVO_CAIXA)
'
'                'funcao que cria/altera a chave e grava no caixaconfig.ini
'                lErro = CF_ECF("CaixaConfig_Chave")
'                If lErro <> SUCESSO Then gError 204274
'
'
'            End If
'
'        End If
'
'    End If

    Select Case gErr
    
    
        Case 53
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO2, gErr)

        Case 133690, 133716
'            If giTipoTEF = TIPOTEF_SITEF Then
'                Call Rotina_ErroECF(vbOKOnly, ERRO_SITEF_NAO_ATIVO, gErr)
'
'            Else
'                Call Rotina_ErroECF(vbOKOnly, ERRO_TEF_NAO_ATIVO, gErr)
'            End If
            
            Call Rotina_ErroECF(vbOKOnly, ERRO_TEF_NAO_RESPONDE, gErr)
            
            
        Case 133696
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, APLICACAO_ECF, "StatusTEF", NOME_ARQUIVO_CAIXA)
        
        Case 133717, 204273, 204274, 214531 To 214534, 214568, 214584
        
        Case 133735
'            Call Rotina_ErroECF(vbOKOnly, ERRO_TEF_TRANSACAO_NEGADA, gErr, objTEF.sOperador)
        
        Case 214529
            Call Rotina_ErroECF(vbOKOnly, ERRO_INCONSISTENCIA_ARQUIVO_TEF, gErr, "001-000", "Resp\Intpos.001", "Identificação arquivo = " & objTEF.sIdentificacao & " Identificação esperada = " & glNumProxIdentificacao)
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149342)

    End Select
    
    Exit Function

End Function


Function TEF_Gerenciador_Padrao_PAYGO() As Long

Dim lErro As Long
Dim sArquivoSTS As String
Dim iTentativas As Integer

On Error GoTo Erro_TEF_Gerenciador_Padrao_PAYGO
    
    
    sArquivoSTS = Dir(Arquivo_Tef_Resp1_Prop)
    If sArquivoSTS <> "" Then ECF_Apaga_Arquivo Arquivo_Tef_Resp1_Prop
    
    'Adiciona na variável global
    glNumProxIdentificacao = glNumProxIdentificacao + 1
    
    'Atualiza o arquivo
    lErro = WritePrivateProfileString(APLICACAO_ECF, "NumProxIdent", CStr(glNumProxIdentificacao), NOME_ARQUIVO_CAIXA)
    If lErro = 0 Then gError 214599
        
    'funcao que cria/altera a chave e grava no caixaconfig.ini
    lErro = CF_ECF("CaixaConfig_Chave")
    If lErro <> SUCESSO Then gError 214600
        
    'Abre o arquivo Temporário
    Open Arquivo_Tef_Temp_Prop For Append As #1
        
    'Informa dados de pagamento
    Print #1, "000-000 = ATV"
    Print #1, "001-000 = " & CStr(glNumProxIdentificacao)
    Print #1, "999-999 = 0"
    
    Close #1
    
    'renomeando os arquivos
    FileCopy Arquivo_Tef_Temp_Prop, Arquivo_Tef_Req_Prop
    
    ECF_Apaga_Arquivo Arquivo_Tef_Temp_Prop
    
    For iTentativas = 1 To 7
    
       sArquivoSTS = Dir(Arquivo_Tef_Resp1_Prop)
       If sArquivoSTS <> "" Then Exit For
       Sleep (1000)
    Next

    If sArquivoSTS = "" Then
        Call Rotina_AvisoECF(vbOKOnly, ERRO_TEF_NAO_ATIVO)
        gError 214601
    End If
    
    TEF_Gerenciador_Padrao_PAYGO = SUCESSO

    Exit Function
    
Erro_TEF_Gerenciador_Padrao_PAYGO:
    
    TEF_Gerenciador_Padrao_PAYGO = gErr
    
    Select Case gErr
    
        Case 214600, 214601
    
        Case 214599
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, APLICACAO_ECF, "NumProxIdent", NOME_ARQUIVO_CAIXA)
    
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 214602)

    End Select
    
    Exit Function


End Function

Public Function NFCE_Enviar_Offline() As Long
'envia os xmls de nfces que foram emitidas em contingencia offline

Dim lErro As Long
Dim iIndice As Integer, schNFe As String, colChaves As New Collection
Dim alComando(1 To 1) As Long, objCupomFiscal As ClassCupomFiscal

On Error GoTo Erro_NFCE_Enviar_Offline

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_AbrirExt(glConexaoPAFECF)
        If alComando(iIndice) = 0 Then gError 201560
    Next

    schNFe = String(STRING_NFE_CHNFE, 0)
    lErro = Comando_Executar(alComando(1), "SELECT chNFe FROM NFCeInfo WHERE nProt = '' OR CancPendente <> 0 ORDER BY chNFe", schNFe)
    If lErro <> AD_SQL_SUCESSO Then gError 201562
        
    lErro = Comando_BuscarProximo(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 201563

    Do While lErro <> AD_SQL_SEM_DADOS
    
        Set objCupomFiscal = New ClassCupomFiscal
        
        objCupomFiscal.sNFeChaveAcesso = schNFe
        
        colChaves.Add objCupomFiscal
    
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 201564
    
    Loop
    
    For Each objCupomFiscal In colChaves
    
        lErro = NFCE_Enviar_Offline1(objCupomFiscal.sNFeChaveAcesso)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    Next
    
    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next
    
    NFCE_Enviar_Offline = SUCESSO

    Exit Function
    
Erro_NFCE_Enviar_Offline:
    
    NFCE_Enviar_Offline = gErr
    
    Select Case gErr
    
        Case 201560
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)
        
        Case 201562, 201563, 201564
            Call Rotina_ErroECF(vbOKOnly, ERRO_NFCE_INFO_LEITURA, gErr)
        
        Case ERRO_SEM_MENSAGEM
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB, gErr, Error, 201561)

    End Select
    
    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Private Function NFCE_Enviar_Offline1(ByVal schNFe As String) As Long
'envia o xml de uma nfce que foi emitida em contingencia offline

Dim lErro As Long, lSequencial As Long
Dim objVenda As New ClassVenda
Dim objNFE As Object
Dim alComando(1 To 4) As Long
Dim iIndice As Integer, sArqXml As String, iCancPendente As Integer, snProt As String

On Error GoTo Erro_NFCE_Enviar_Offline1
    
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_AbrirExt(glConexaoPAFECF)
        If alComando(iIndice) = 0 Then gError 201552
    Next

    lErro = CF_ECF("Caixa_Transacao_Abrir", lSequencial)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    sArqXml = String(255, 0)
    snProt = String(255, 0)
    lErro = Comando_ExecutarPos(alComando(1), "SELECT nProt, CancPendente, ArqXml FROM NFCeInfo WHERE (nProt = '' OR CancPendente <> 0) AND chNFe = ?", 0, snProt, iCancPendente, sArqXml, schNFe)
    If lErro <> AD_SQL_SUCESSO Then gError 201553
        
    lErro = Comando_BuscarProximo(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 201554

    If lErro = AD_SQL_SEM_DADOS Then gError 201555
    
    objVenda.objCupomFiscal.sNFenProt = snProt
    objVenda.objCupomFiscal.iNFeCancPendente = iCancPendente
    
    If snProt = "" Then
    
        Set objNFE = CreateObject("sgenfe.NFeEnvio")
        Call objNFE.Envia_NFCE_Offline(sArqXml, objVenda)
    
        If objVenda.objCupomFiscal.sNFenProt <> "" Then
        
            lErro = Comando_ExecutarPos(alComando(2), "UPDATE NFCeInfo SET data = ?, hora = ?, nProt = ?, cStat = ?, ArqXml = ?, XmlTransmitido = 0", alComando(1), _
                objVenda.objCupomFiscal.dtNFeData, objVenda.objCupomFiscal.dNFeHora, objVenda.objCupomFiscal.sNFenProt, objVenda.objCupomFiscal.sNFecStat, objVenda.objCupomFiscal.sNFeArqXml)
            If lErro <> AD_SQL_SUCESSO Then gError 201558
        
        Else
            MsgBox (sArqXml)
            gError ERRO_SEM_MENSAGEM
    
        End If

    End If
    
    If iCancPendente <> 0 And objVenda.objCupomFiscal.sNFenProt <> "" Then
    
        Set objNFE = CreateObject("SGENFE.NFeCancela")
        Call objNFE.NFCE_Cancela(objVenda)

        If objVenda.objCupomFiscal.iNFeCancPendente = 0 Then
    
            lErro = NFCE_Canc_Grava_Trans(objVenda)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
            
        End If
    
    End If

    'Fechar a Transação
    lErro = CF_ECF("Caixa_Transacao_Fechar", lSequencial)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next
    
    NFCE_Enviar_Offline1 = SUCESSO

    Exit Function
    
Erro_NFCE_Enviar_Offline1:
    
    NFCE_Enviar_Offline1 = gErr
    
    Select Case gErr
    
        Case 201552
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)
        
        Case ERRO_SEM_MENSAGEM
        
        Case 201555
            Call Rotina_ErroECF(vbOKOnly, ERRO_NFCE_OFFLINE_PENDENTE, gErr, schNFe)
    
        Case 201558
            Call Rotina_ErroECF(vbOKOnly, ERRO_NFCE_INFO_UPDATE, gErr, schNFe)
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB, gErr, Error, 201557)

    End Select
    
    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next
    
    Call CF_ECF("Caixa_Transacao_Rollback", glTransacaoPAFECF)
    
    Exit Function

End Function

Function Produto_Exclui_EmTrans() As Long

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer

On Error GoTo Erro_Produto_Exclui_EmTrans

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_AbrirExt(glConexaoPAFECF)
        If alComando(iIndice) = 0 Then gError 214813
    Next

    lErro = Comando_Executar(alComando(1), "DELETE FROM Produtos")
    If lErro <> AD_SQL_SUCESSO Then gError 214814
        
    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next

    Produto_Exclui_EmTrans = SUCESSO

    Exit Function
    
Erro_Produto_Exclui_EmTrans:
    
    Produto_Exclui_EmTrans = gErr
    
    Select Case gErr
    
        Case 214813
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)
        
        Case 214814
            Call Rotina_ErroECF(vbOKOnly, ERRO_EXCLUSAO_PRODUTOS1, gErr)
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB, gErr, Error, 214815)

    End Select
    
    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Function Produto_Grava_EmTrans(objProduto As ClassProduto, ByVal lCom1 As Long, ByVal lCom2 As Long, ByVal lCom3 As Long) As Long

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer

On Error GoTo Erro_Produto_Grava_EmTrans
'
'    For iIndice = LBound(alComando) To UBound(alComando)
'        alComando(iIndice) = Comando_AbrirExt(glConexaoPAFECF)
'        If alComando(iIndice) = 0 Then gError 214813
'    Next

    With objProduto

        lErro = Comando_Executar(lCom1, _
        "INSERT INTO Produtos (Codigo, NomeReduzido, SiglaUMVenda, Referencia, Figura, SituacaoTribECF, ICMSAliquota, Descricao, ClasseUM, " & _
        "SiglaUMEstoque, SiglaUMCompra, Ativo, LimiteDesconto, UsaBalanca,  Compras, Truncamento, QuantEstLoja, CodigoBarras, PrecoLoja) " & _
        "VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", .sCodigo, .sNomeReduzido, .sSiglaUMVenda, .sReferencia, .sFigura, .sSituacaoTribECF, _
        .sICMSAliquota, .sDescricao, .iClasseUM, .sSiglaUMEstoque, .sSiglaUMCompra, .iAtivo, .dLimiteDesconto, .iUsaBalanca, .iCompras, _
        .sTruncamento, .dQuantEstLoja, .sCodigoBarras, .dPrecoLoja)
        If lErro <> AD_SQL_SUCESSO Then gError 214814
        
    End With

    lErro = TributacaoDocItem_Grava_EmTrans(objProduto.objTributacaoDocItem, lCom2)
    If lErro <> SUCESSO Then gError 214829

    lErro = ProdutoCodBarras_Grava_EmTrans(objProduto, lCom3)
    If lErro <> SUCESSO Then gError 214862
'
'    For iIndice = LBound(alComando) To UBound(alComando)
'        lErro = Comando_Fechar(alComando(iIndice))
'    Next

    Produto_Grava_EmTrans = SUCESSO

    Exit Function
    
Erro_Produto_Grava_EmTrans:
    
    Produto_Grava_EmTrans = gErr
    
    Select Case gErr
    
        Case 214813
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)
        
        Case 214814
            Call Rotina_ErroECF(vbOKOnly, ERRO_INCLUSAO_PRODUTOS, gErr)
            
        Case 214829, 214862
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB, gErr, Error, 214815)

    End Select
'
'    For iIndice = LBound(alComando) To UBound(alComando)
'        lErro = Comando_Fechar(alComando(iIndice))
'    Next
    
    Exit Function

End Function

Private Function TributacaoDocItem_Grava_EmTrans(ByVal objTributacaoDocItem As ClassTributacaoDocItem, ByVal lComando As Long) As Long

Dim lErro As Long
'Dim alComando(1 To 1) As Long
'Dim iIndice As Integer

On Error GoTo Erro_TributacaoDocItem_Grava_EmTrans
'
'    For iIndice = LBound(alComando) To UBound(alComando)
'        alComando(iIndice) = Comando_AbrirExt(glConexaoPAFECF)
'        If alComando(iIndice) = 0 Then gError 214826
'    Next

    With objTributacaoDocItem
        lErro = Comando_Executar(lComando, "INSERT INTO TributacaoDocItem( Produto, Quantidade, PrecoTotal, PrecoUnitario, PrecoUnitarioMoeda, DescontoGrid, NaturezaOp, TipoTributacao, IPITipo, IPICodProduto, IPIBaseCalculo, IPIPercRedBase, IPIAliquota, IPIValor, IPICredito, ICMSTipo, ICMSBase, ICMSPercRedBase, " & _
                "ICMSAliquota, ICMSValor, ICMSCredito, ICMSSubstBase, ICMSSubstAliquota, ICMSSubstValor, PISCredito, COFINSCredito, ICMSAliquotaAdicaoDI, ICMSPercRedBaseAdicaoDI, DespImpICMSBase, DespImpICMSValor, DespImpICMSCredito, ICMSSubstPercRedBase, ICMSSubstPercMVA, PISTipo, PISTipoCalculo, PISBase, PISAliquota, PISAliquotaValor, PISQtde, PISValor, PISSTTipoCalculo, PISSTBase, PISSTAliquota, PISSTAliquotaValor, " & _
                "PISSTQtde, PISSTValor, COFINSTipo, COFINSTipoCalculo, COFINSBase, COFINSAliquota, COFINSAliquotaValor, COFINSQtde, COFINSValor, COFINSSTTipoCalculo, COFINSSTBase, COFINSSTAliquota, COFINSSTAliquotaValor, COFINSSTQtde, COFINSSTValor, CST, ISSQN, ISSBase, ISSAliquota, ISSCidadeIBGE, ISSValor, IIBase, IIDespAduaneira, IIIOF, IIValor, " & _
                "ICMSBaseModalidade, ICMSSubstBaseModalidade, IPIEnquadramentoClasse, IPIEnquadramentoCodigo, IPICNPJProdutor, IPISeloCodigo, IPISeloQtde, IPITipoCalculo, IPIUnidadePadraoQtde, IPIUnidadePadraoValor, ValorFreteItem, ValorSeguroItem, ValorOutrasDespesasItem, ValorDescontoItem, OrigemMercadoria, ExTIPI, Genero, ProdutoEspecifico, EAN, EANTrib, QtdTrib, UMTrib, ValorUnitTrib, NaturezaOpManual, TipoTributacaoManual, " & _
                "IPITipoManual, IPICodProdutoManual, IPIBaseCalculoManual, IPIPercRedBaseManual, IPIAliquotaManual, IPIValorManual, IPICreditoManual, ICMSTipoManual, ICMSBaseManual, ICMSPercRedBaseManual, ICMSAliquotaManual, ICMSValorManual, ICMSCreditoManual, ICMSSubstBaseManual, ICMSSubstAliquotaManual,ICMSSubstValorManual, PISCreditoManual, COFINSCreditoManual, ICMSAliquotaAdicaoDIManual, ICMSPercRedBaseAdicaoDIManual, DespImpICMSBaseManual, DespImpICMSValorManual, DespImpICMSCreditoManual, ICMSSubstPercRedBaseManual, ICMSSubstPercMVAManual, PISTipoManual, " & _
                "PISTipoCalculoManual, PISBaseManual, PISAliquotaManual, PISAliquotaValorManual, PISQtdeManual, PISValorManual, PISSTTipoCalculoManual, PISSTBaseManual, PISSTAliquotaManual, PISSTAliquotaValorManual, PISSTQtdeManual, PISSTValorManual, COFINSTipoManual, COFINSTipoCalculoManual, COFINSBaseManual, COFINSAliquotaManual, COFINSAliquotaValorManual, COFINSQtdeManual, COFINSValorManual, COFINSSTTipoCalculoManual, COFINSSTBaseManual, COFINSSTAliquotaManual, COFINSSTAliquotaValorManual, COFINSSTQtdeManual, COFINSSTValorManual, " & _
                "CSTManual, ISSQNManual, ISSBaseManual, ISSAliquotaManual, ISSCidadeIBGEManual, ISSValorManual, IIBaseManual, IIDespAduaneiraManual, IIIOFManual, IIValorManual, ICMSBaseModalidadeManual, ICMSSubstBaseModalidadeManual, IPIEnquadramentoClasseManual, IPIEnquadramentoCodigoManual, IPICNPJProdutorManual, IPISeloCodigoManual, IPISeloQtdeManual, IPITipoCalculoManual, IPIUnidadePadraoQtdeManual, IPIUnidadePadraoValorManual, ValorFreteItemManual, ValorSeguroItemManual, ValorOutrasDespesasItemManual, ValorDescontoItemManual, OrigemMercadoriaManual, FCI, FCIManual, ICMSSTCobrAntBase,ICMSSTCobrAntValor,ICMSSTCobrAntBaseManual,ICMSSTCobrAntValorManual, " & _
                "ICMSpercBaseOperacaoPropria,ICMSUFDevidoST,ICMSvBCSTRet,ICMSvICMSSTRet,ICMSvBCSTDest,ICMSvICMSSTDest,ICMSpCredSN,ICMSvCredSN,ISSCST,ICMSValorIsento,ICMSMotivo,ICMSSimplesTipo,ICMSpercBaseOperacaoPropriaManual,ICMSUFDevidoSTManual," & _
                "ICMSvBCSTRetManual,ICMSvICMSSTRetManual,ICMSvBCSTDestManual,ICMSvICMSSTDestManual,ICMSpCredSNManual,ICMSvCredSNManual, ICMSValorIsentoManual, ICMSMotivoManual, ICMSSimplesTipoManual, ISSTipo, ISSTipoManual, RegimeTributario, CSOSN, NatBCCred, NatBCCredManual, TotTrib, TotTribManual, TotTribTipo, TotTribTipoManual, " & _
                "ICMS51ValorOp, ICMSPercDifer, ICMSValorDif, ICMS51ValorOpManual, ICMSPercDiferManual, ICMSValorDifManual, ISSValorDeducao, ISSValorOutrasRet, ISSValorDescIncond, ISSValorDescCond, ISSValorRet, ISSIndExigibilidade, ISSCodServ, ISSMunicIncidImp, ISSCodPais, ISSNumProcesso, ISSIndIncentivo, ISSValorDeducaoManual, ISSValorOutrasRetManual," & _
                "ISSValorDescIncondManual , ISSValorDescCondManual, ISSValorRetManual, ISSIndExigibilidadeManual, ISSCodServManual, ISSMunicIncidImpManual, ISSCodPaisManual, ISSNumProcessoManual, ISSIndIncentivoManual) " & _
                "VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                .sProduto, .dQuantidade, .dPrecoTotal, .dPrecoUnitario, .dPrecoUnitarioMoeda, .dDescontoGrid, .sNaturezaOp, .iTipoTributacao, .iIPITipo, .sIPICodProduto, .dIPIBaseCalculo, .dIPIPercRedBase, .dIPIAliquota, .dIPIValor, .dIPICredito, .iICMSTipo, .dICMSBase, .dICMSPercRedBase, _
                .dICMSAliquota, .dICMSValor, .dICMSCredito, .dICMSSubstBase, .dICMSSubstAliquota, .dICMSSubstValor, .dPISCredito, .dCOFINSCredito, .dICMSAliquotaAdicaoDI, .dICMSPercRedBaseAdicaoDI, .dDespImpICMSBase, .dDespImpICMSValor, .dDespImpICMSCredito, .dICMSSubstPercRedBase, .dICMSSubstPercMVA, .iPISTipo, .iPISTipoCalculo, .dPISBase, .dPISAliquota, .dPISAliquotaValor, .dPISQtde, .dPISValor, .iPISSTTipoCalculo, .dPISSTBase, .dPISSTAliquota, .dPISSTAliquotaValor, _
                .dPISSTQtde, .dPISSTValor, .iCOFINSTipo, .iCOFINSTipoCalculo, .dCOFINSBase, .dCOFINSAliquota, .dCOFINSAliquotaValor, .dCOFINSQtde, .dCOFINSValor, .iCOFINSSTTipoCalculo, .dCOFINSSTBase, .dCOFINSSTAliquota, .dCOFINSSTAliquotaValor, .dCOFINSSTQtde, .dCOFINSSTValor, .sCST, .sISSQN, .dISSBase, .dISSAliquota, .sISSCidadeIBGE, .dISSValor, .dIIBase, .dIIDespAduaneira, .dIIIOF, .dIIValor, _
                .iICMSBaseModalidade, .iICMSSubstBaseModalidade, .sIPIEnquadramentoClasse, .sIPIEnquadramentoCodigo, .sIPICNPJProdutor, .sIPISeloCodigo, .lIPISeloQtde, .iIPITipoCalculo, .dIPIUnidadePadraoQtde, .dIPIUnidadePadraoValor, .dValorFreteItem, .dValorSeguroItem, .dValorOutrasDespesasItem, .dValorDescontoItem, .iOrigemMercadoria, .iExTIPI, .sGenero, .iProdutoEspecifico, .sEAN, .sEANTrib, .dQtdTrib, .sUMTrib, .dValorUnitTrib, .iNaturezaOpManual, .iTipoTributacaoManual, _
                .iIPITipoManual, .iIPICodProdutoManual, .iIPIBaseCalculoManual, .iIPIPercRedBaseManual, .iIPIAliquotaManual, .iIPIValorManual, .iIPICreditoManual, .iICMSTipoManual, .iICMSBaseManual, .iICMSPercRedBaseManual, .iICMSAliquotaManual, .iICMSValorManual, .iICMSCreditoManual, .iICMSSubstBaseManual, .iICMSSubstAliquotaManual, .iICMSSubstValorManual, .iPISCreditoManual, .iCOFINSCreditoManual, .iICMSAliquotaAdicaoDIManual, .iICMSPercRedBaseAdicaoDIManual, _
                .iDespImpICMSBaseManual, .iDespImpICMSValorManual, .iDespImpICMSCreditoManual, .iICMSSubstPercRedBaseManual, .iICMSSubstPercMVAManual, .iPISTipoManual, .iPISTipoCalculoManual, .iPISBaseManual, .iPISAliquotaManual, .iPISAliquotaValorManual, _
                .iPISQtdeManual, .iPISValorManual, .iPISSTTipoCalculoManual, .iPISSTBaseManual, .iPISSTAliquotaManual, .iPISSTAliquotaValorManual, .iPISSTQtdeManual, .iPISSTValorManual, .iCOFINSTipoManual, .iCOFINSTipoCalculoManual, .iCOFINSBaseManual, .iCOFINSAliquotaManual, .iCOFINSAliquotaValorManual, .iCOFINSQtdeManual, .iCOFINSValorManual, .iCOFINSSTTipoCalculoManual, .iCOFINSSTBaseManual, .iCOFINSSTAliquotaManual, .iCOFINSSTAliquotaValorManual, _
                .iCOFINSSTQtdeManual, .iCOFINSSTValorManual, .iCSTManual, .iISSQNManual, .iISSBaseManual, .iISSAliquotaManual, .iISSCidadeIBGEManual, .iISSValorManual, .iIIBaseManual, .iIIDespAduaneiraManual, .iIIIOFManual, .iIIValorManual, .iICMSBaseModalidadeManual, .iICMSSubstBaseModalidadeManual, .iIPIEnquadramentoClasseManual, .iIPIEnquadramentoCodigoManual, .iIPICNPJProdutorManual, .iIPISeloCodigoManual, .iIPISeloQtdeManual, .iIPITipoCalculoManual, .iIPIUnidadePadraoQtdeManual, .iIPIUnidadePadraoValorManual, .iValorFreteItemManual, .iValorSeguroItemManual, .iValorOutrasDespesasItemManual, .iValorDescontoItemManual, .iOrigemMercadoriaManual, .sFCI, .iFCIManual, _
                .dICMSSTCobrAntBase, .dICMSSTCobrAntValor, .iICMSSTCobrAntBaseManual, .iICMSSTCobrAntValorManual, .dICMSpercBaseOperacaoPropria, .sICMSUFDevidoST, .dICMSvBCSTRet, .dICMSvICMSSTRet, .dICMSvBCSTDest, .dICMSvICMSSTDest, .dICMSpCredSN, .dICMSvCredSN, .sISSCST, .dICMSValorIsento, .iICMSMotivo, .iICMSSimplesTipo, .iICMSpercBaseOperacaoPropriaManual, .iICMSUFDevidoSTManual, .iICMSvBCSTRetManual, .iICMSvICMSSTRetManual, .iICMSvBCSTDestManual, .iICMSvICMSSTDestManual, .iICMSpCredSNManual, .iICMSvCredSNManual, .iICMSValorIsentoManual, .iICMSMotivoManual, .iICMSSimplesTipoManual, .iISSTipo, .iISSTipoManual, .iRegimeTributario, .sCSOSN, .sNatBCCred, .iNatBCCredManual, .dTotTrib, .iTotTribManual, .iTotTribTipo, .iTotTribTipoManual, _
                .dICMS51ValorOp, .dICMSPercDifer, .dICMSValorDif, .iICMS51ValorOpManual, .iICMSPercDiferManual, .iICMSValorDifManual, .dISSValorDeducao, .dISSValorOutrasRet, .dISSValorDescIncond, .dISSValorDescCond, .dISSValorRet, .iISSIndExigibilidade, .sISSCodServ, .sISSMunicIncidImp, .iISSCodPais, .sISSNumProcesso, .iISSIndIncentivo, .iISSValorDeducaoManual, .iISSValorOutrasRetManual, .iISSValorDescIncondManual, _
                .iISSValorDescCondManual, .iISSValorRetManual, .iISSIndExigibilidadeManual, .iISSCodServManual, .iISSMunicIncidImpManual, .iISSCodPaisManual, .iISSNumProcessoManual, .iISSIndIncentivoManual)
    End With
    If lErro <> AD_SQL_SUCESSO Then gError 214827
'
'    'Fecha Comando
'    For iIndice = LBound(alComando) To UBound(alComando)
'        Call Comando_Fechar(alComando(iIndice))
'    Next

    TributacaoDocItem_Grava_EmTrans = SUCESSO

    Exit Function

Erro_TributacaoDocItem_Grava_EmTrans:

    TributacaoDocItem_Grava_EmTrans = gErr

    Select Case gErr
'
'        Case 214826
'            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)

        Case 214827
            Call Rotina_ErroECF(vbOKOnly, ERRO_INCLUSAO_TRIBUTACAODOCITEM, gErr)

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB, gErr, Error, 214828)

    End Select
'
'    'Fecha Comando
'    For iIndice = LBound(alComando) To UBound(alComando)
'        Call Comando_Fechar(alComando(iIndice))
'    Next

    Exit Function

End Function

Function TributacaoDocItem_Exclui_EmTrans() As Long

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer

On Error GoTo Erro_TributacaoDocItem_Exclui_EmTrans

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_AbrirExt(glConexaoPAFECF)
        If alComando(iIndice) = 0 Then gError 214830
    Next

    lErro = Comando_Executar(alComando(1), "DELETE FROM TributacaoDocItem")
    If lErro <> AD_SQL_SUCESSO Then gError 214831
        

    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next

    TributacaoDocItem_Exclui_EmTrans = SUCESSO

    Exit Function
    
Erro_TributacaoDocItem_Exclui_EmTrans:
    
    TributacaoDocItem_Exclui_EmTrans = gErr
    
    Select Case gErr
    
        Case 214830
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)
        
        Case 214831
            Call Rotina_ErroECF(vbOKOnly, ERRO_EXCLUSAO_TRIBUTACAODOCITEM, gErr)
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB, gErr, Error, 214832)

    End Select
    
    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Public Function ProdutoCodBarras_Grava_EmTrans(ByVal objProduto As ClassProduto, ByVal lComando As Long) As Long

Dim lErro As Long
'Dim lComando As Long
Dim vCodBarras As Variant

On Error GoTo Erro_ProdutoCodBarras_Grava_EmTrans
'
'    'abre os comandos
'    lComando = Comando_AbrirExt(glConexaoPAFECF)
'    If lComando = 0 Then gError 214859
    
    'Para  cada registro da coleção
    For Each vCodBarras In objProduto.colCodBarras

        'Insere o registro na tabela produtocodbarras
        lErro = Comando_Executar(lComando, "INSERT INTO ProdutoCodBarras (CodProduto,CodBarras) values (?,?)", objProduto.sCodigo, CStr(vCodBarras))
        If lErro <> AD_SQL_SUCESSO Then gError 214860
        
    Next

    'Call Comando_Fechar(lComando)

    ProdutoCodBarras_Grava_EmTrans = SUCESSO

    Exit Function

Erro_ProdutoCodBarras_Grava_EmTrans:

    ProdutoCodBarras_Grava_EmTrans = gErr
        
    Select Case gErr
'
'        Case 214859
'            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)
'
        Case 214860
            Call Rotina_ErroECF(vbOKOnly, ERRO_INCLUSAO_PRODUTOCODBARRAS, gErr)
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB, gErr, Error, 214861)
            
    End Select
    
    'Call Comando_Fechar(lComando)
    
    Exit Function
    
End Function

Function ProdutoCodBarras_Exclui_EmTrans() As Long

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer

On Error GoTo Erro_ProdutoCodBarras_Exclui_EmTrans

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_AbrirExt(glConexaoPAFECF)
        If alComando(iIndice) = 0 Then gError 214863
    Next

    lErro = Comando_Executar(alComando(1), "DELETE FROM ProdutoCodBarras")
    If lErro <> AD_SQL_SUCESSO Then gError 214864
        

    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next

    ProdutoCodBarras_Exclui_EmTrans = SUCESSO

    Exit Function
    
Erro_ProdutoCodBarras_Exclui_EmTrans:
    
    ProdutoCodBarras_Exclui_EmTrans = gErr
    
    Select Case gErr
    
        Case 214863
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)
        
        Case 214864
            Call Rotina_ErroECF(vbOKOnly, ERRO_EXCLUSAO_PRODUTOCODBARRAS, gErr)
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB, gErr, Error, 214865)

    End Select
    
    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Function Clientes_Grava_EmTrans(objCliente As ClassCliente) As Long

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer
Dim objCliente1 As New ClassCliente

On Error GoTo Erro_Clientes_Grava_EmTrans

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_AbrirExt(glConexaoPAFECF)
        If alComando(iIndice) = 0 Then gError 214869
    Next

    lErro = CF_ECF("Clientes_Le_CPFCNPJ", objCliente.sCgc, objCliente1)
    If lErro <> SUCESSO And lErro <> 214887 Then gError 214902

    'se nao tiver cliente com o CNPJ em questao ja cadastrado ==> cadastra o cliente
    If lErro <> SUCESSO Then

        With objCliente
    
            lErro = Comando_Executar(alComando(1), "INSERT INTO Clientes (Codigo, NomeReduzido, CGC) " & _
            "VALUES (?,?,?)", .lCodigo, .sNomeReduzido, .sCgc)
            If lErro <> AD_SQL_SUCESSO Then gError 214870
            
        End With

    End If

    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next

    Clientes_Grava_EmTrans = SUCESSO

    Exit Function
    
Erro_Clientes_Grava_EmTrans:
    
    Clientes_Grava_EmTrans = gErr
    
    Select Case gErr
    
        Case 214869
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)
        
        Case 214870
            Call Rotina_ErroECF(vbOKOnly, ERRO_INCLUSAO_CLIENTES, gErr)
            
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB, gErr, Error, 214871)

    End Select
    
    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Function Clientes_Exclui_EmTrans() As Long

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer

On Error GoTo Erro_Clientes_Exclui_EmTrans

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_AbrirExt(glConexaoPAFECF)
        If alComando(iIndice) = 0 Then gError 214872
    Next

    lErro = Comando_Executar(alComando(1), "DELETE FROM Clientes")
    If lErro <> AD_SQL_SUCESSO Then gError 214873
        
    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next

    Clientes_Exclui_EmTrans = SUCESSO

    Exit Function
    
Erro_Clientes_Exclui_EmTrans:
    
    Clientes_Exclui_EmTrans = gErr
    
    Select Case gErr
    
        Case 214872
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)
        
        Case 214873
            Call Rotina_ErroECF(vbOKOnly, ERRO_EXCLUSAO_CLIENTES1, gErr)
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB, gErr, Error, 214874)

    End Select
    
    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Public Function NFCE_Canc_Grava(ByVal objVenda As ClassVenda) As Long
'registra o cancelamento da nfce

Dim lErro As Long, lSequencial As Long

On Error GoTo Erro_NFCE_Canc_Grava

    lErro = CF_ECF("Caixa_Transacao_Abrir", lSequencial)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    lErro = NFCE_Canc_Grava_Trans(objVenda)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    'Fechar a Transação
    lErro = CF_ECF("Caixa_Transacao_Fechar", lSequencial)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    NFCE_Canc_Grava = SUCESSO
    
    Exit Function
    
Erro_NFCE_Canc_Grava:

    NFCE_Canc_Grava = gErr

    Select Case gErr
    
        Case ERRO_SEM_MENSAGEM

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB, gErr, Error, 207920)

    End Select

    Call CF_ECF("Caixa_Transacao_Rollback", glTransacaoPAFECF)
    
    Exit Function
    
End Function

Private Function NFCE_Canc_Grava_Trans(ByVal objVenda As ClassVenda) As Long
'registra o cancelamento da nfce

Dim lErro As Long, lSequencial As Long
Dim alComando(1 To 4) As Long
Dim iIndice As Integer, iCancPendente As Integer

On Error GoTo Erro_NFCE_Canc_Grava_Trans

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_AbrirExt(glConexaoPAFECF)
        If alComando(iIndice) = 0 Then gError 214772
    Next

    lErro = Comando_ExecutarPos(alComando(1), "SELECT CancPendente FROM NFCeInfo WHERE chNFe = ?", 0, iCancPendente, objVenda.objCupomFiscal.sNFeChaveAcesso)
    If lErro <> AD_SQL_SUCESSO Then gError 201553
        
    lErro = Comando_BuscarProximo(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 201554

    If lErro = AD_SQL_SEM_DADOS Then gError 201555
    
    lErro = Comando_ExecutarPos(alComando(3), "UPDATE NFCeInfo SET CancData = ?, CancHora = ?, CancnProt = ?, CancPendente = ?, CancArqXml = ?", alComando(1), _
        objVenda.objCupomFiscal.dtNFeCancData, objVenda.objCupomFiscal.dNFeCancHora, objVenda.objCupomFiscal.sNFeCancnProt, objVenda.objCupomFiscal.iNFeCancPendente, objVenda.objCupomFiscal.sNFeCancArqXml)
    If lErro <> AD_SQL_SUCESSO Then gError 201558
    
    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next
    
    NFCE_Canc_Grava_Trans = SUCESSO
    
    Exit Function
    
Erro_NFCE_Canc_Grava_Trans:

    NFCE_Canc_Grava_Trans = gErr

    Select Case gErr
    
        Case ERRO_SEM_MENSAGEM

        Case 214772
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB, gErr, Error, 207920)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next

    Exit Function
    
End Function

Function Vendedores_Grava_EmTrans(objVendedor As ClassVendedor) As Long

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer

On Error GoTo Erro_Vendedores_Grava_EmTrans

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_AbrirExt(glConexaoPAFECF)
        If alComando(iIndice) = 0 Then gError 214936
    Next

    With objVendedor

        lErro = Comando_Executar(alComando(1), "INSERT INTO Vendedores (Codigo, NomeReduzido) " & _
        "VALUES (?,?)", .iCodigo, .sNomeReduzido)
        If lErro <> AD_SQL_SUCESSO Then gError 214937
        
    End With

    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next

    Vendedores_Grava_EmTrans = SUCESSO

    Exit Function
    
Erro_Vendedores_Grava_EmTrans:
    
    Vendedores_Grava_EmTrans = gErr
    
    Select Case gErr
    
        Case 214936
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)
        
        Case 214937
            Call Rotina_ErroECF(vbOKOnly, ERRO_INCLUSAO_VENDEDORES, gErr)
            
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB, gErr, Error, 214938)

    End Select
    
    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Function Vendedores_Exclui_EmTrans() As Long

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer

On Error GoTo Erro_Vendedores_Exclui_EmTrans

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_AbrirExt(glConexaoPAFECF)
        If alComando(iIndice) = 0 Then gError 214952
    Next

    lErro = Comando_Executar(alComando(1), "DELETE FROM Vendedores")
    If lErro <> AD_SQL_SUCESSO Then gError 214953
        
    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next

    Vendedores_Exclui_EmTrans = SUCESSO

    Exit Function
    
Erro_Vendedores_Exclui_EmTrans:
    
    Vendedores_Exclui_EmTrans = gErr
    
    Select Case gErr
    
        Case 214952
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)
        
        Case 214953
            Call Rotina_ErroECF(vbOKOnly, ERRO_EXCLUSAO_VENDEDORES, gErr)
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB, gErr, Error, 214954)

    End Select
    
    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Public Function Venda_Grava_SAT(ByVal objVenda As ClassVenda) As Long
'registra a autorizacao da SAT
Dim lErro As Long, lSequencial As Long, lSequencialOrc As Long
Dim alComando(1 To 4) As Long
Dim iIndice As Integer

On Error GoTo Erro_Venda_Grava_SAT

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_AbrirExt(glConexaoPAFECF)
        If alComando(iIndice) = 0 Then gError 214772
    Next

    lErro = CF_ECF("Caixa_Transacao_Abrir", lSequencial)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    With objVenda.objCupomFiscal
        lErro = Comando_Executar(alComando(2), "INSERT INTO SATInfo (numeroSessao,EEEEE,mensagem,cod,mensagemSEFAZ,DataEmissao,HoraEmissao,ChaveAcesso,ArqXml,NumSerieECF,QRCode,tpAmb,DataRegistro,HoraRegistro, ValorTotalCFE, CPFCNPJValue) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
            .sSATnumeroSessao, .sSATEEEEE, .sSATmensagem, .sSATcod, .sSATmensagemSEFAZ, .dtDataEmissao, .dHoraEmissao, .sSATChaveAcesso, .sSATArqXml, .sNumSerieECF, .sSATQRCode, .iSATtpAmb, Date, CDbl(Time), .sSATvalorTotalCFe, .sSATCPFCNPJValue)
    End With
    If lErro <> AD_SQL_SUCESSO Then gError 214774
    
    If glConexaoOrcPAF <> 0 Then
    
        'Abre a Transação
        Call CF_ECF("Caixa_Transacao_Abrir_Orc", lSequencialOrc)
    
    End If
        
    lErro = CF_ECF("Grava_Venda_Arquivo_EmTrans", objVenda)
    If lErro <> SUCESSO Then gError 204680
        
    If glConexaoOrcPAF <> 0 Then
    
        'Fecha a Transação
        lErro = CF_ECF("Caixa_Transacao_Fechar_Orc", lSequencialOrc)
        If lErro <> SUCESSO Then gError 204682
        
    End If
        
    'Fechar a Transação
    lErro = CF_ECF("Caixa_Transacao_Fechar", lSequencial)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next
    
    Venda_Grava_SAT = SUCESSO
    
    Exit Function
    
Erro_Venda_Grava_SAT:

    Venda_Grava_SAT = gErr

    Select Case gErr
    
        Case ERRO_SEM_MENSAGEM

        Case 214772
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)

        Case 214773
            Call Rotina_ErroECF(vbOKOnly, ERRO_ALTERACAO_CONFIGURACAONFE, gErr)

        Case 214774
            Call Rotina_ErroECF(vbOKOnly, ERRO_INCLUSAO_NFCEINFO, gErr)

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB, gErr, Error, 207920)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next

    Call CF_ECF("Caixa_Transacao_Rollback", glTransacaoPAFECF)
    Call CF_ECF("Caixa_Transacao_Rollback", glTransacaoOrcPAFECF)
    
    Exit Function
    
End Function

Public Function SAT_Canc_Grava(ByVal objVenda As ClassVenda) As Long
'registra o cancelamento da nfce

Dim lErro As Long, lSequencial As Long

On Error GoTo Erro_SAT_Canc_Grava

    lErro = CF_ECF("Caixa_Transacao_Abrir", lSequencial)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    lErro = SAT_Canc_Grava_Trans(objVenda)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    'Fechar a Transação
    lErro = CF_ECF("Caixa_Transacao_Fechar", lSequencial)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    SAT_Canc_Grava = SUCESSO
    
    Exit Function
    
Erro_SAT_Canc_Grava:

    SAT_Canc_Grava = gErr

    Select Case gErr
    
        Case ERRO_SEM_MENSAGEM

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB, gErr, Error, 207920)

    End Select

    Call CF_ECF("Caixa_Transacao_Rollback", glTransacaoPAFECF)
    
    Exit Function
    
End Function

Private Function SAT_Canc_Grava_Trans(ByVal objVenda As ClassVenda) As Long
'registra o cancelamento do sat cfe

Dim lErro As Long, lSequencial As Long
Dim alComando(1 To 4) As Long
Dim iIndice As Integer, itpAmb As Integer

On Error GoTo Erro_SAT_Canc_Grava_Trans

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_AbrirExt(glConexaoPAFECF)
        If alComando(iIndice) = 0 Then gError 214772
    Next

    lErro = Comando_ExecutarPos(alComando(1), "SELECT tpAmb FROM SATInfo WHERE ChaveAcesso = ?", 0, itpAmb, objVenda.objCupomFiscal.sSATChaveAcesso)
    If lErro <> AD_SQL_SUCESSO Then gError 201553
        
    lErro = Comando_BuscarProximo(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 201554

    If lErro = AD_SQL_SEM_DADOS Then gError 201555
    
    lErro = Comando_ExecutarPos(alComando(3), "UPDATE SATInfo SET CancData = ?, CancHora = ?, CancArqXml = ?, CancChaveAcesso = ?", alComando(1), _
        objVenda.objCupomFiscal.dtSATCancData, objVenda.objCupomFiscal.dSATCancHora, objVenda.objCupomFiscal.sSATCancArqXml, objVenda.objCupomFiscal.sSATCancChaveAcesso)
    If lErro <> AD_SQL_SUCESSO Then gError 201558

    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next
    
    SAT_Canc_Grava_Trans = SUCESSO
    
    Exit Function
    
Erro_SAT_Canc_Grava_Trans:

    SAT_Canc_Grava_Trans = gErr

    Select Case gErr
    
        Case ERRO_SEM_MENSAGEM

        Case 214772
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB, gErr, Error, 207920)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next

    Exit Function
    
End Function


Public Function BackupConfig_Grava(ByVal objBackupConfig As ClassBackupConfig) As Long

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_BackupConfig_Grava

    'Abertura de transação
    lErro = CF_ECF("Caixa_Transacao_Abrir", lTransacao)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    lErro = BackupConfig_Grava_EmTrans(objBackupConfig)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    'Confirma a transação
    lErro = CF_ECF("Caixa_Transacao_Fechar", lTransacao)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    BackupConfig_Grava = SUCESSO

    Exit Function

Erro_BackupConfig_Grava:

    BackupConfig_Grava = gErr

    Select Case gErr

        Case ERRO_SEM_MENSAGEM

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 209000)

    End Select

    'Desfaz Transação
    Call CF_ECF("Caixa_Transacao_Rollback", lTransacao)

    Exit Function

End Function

Public Function BackupConfig_Grava_EmTrans(ByVal objBackupConfig As ClassBackupConfig) As Long

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim dtData As Date

On Error GoTo Erro_BackupConfig_Grava_EmTrans

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_AbrirExt(glConexaoPAFECF)
        If alComando(iIndice) = 0 Then gError 208991
    Next

    'Le a tabelaBackupConfig
    lErro = Comando_ExecutarPos(alComando(0), "SELECT DataUltBkp FROM BackupConfig WHERE Codigo= ? ", _
                0, dtData, objBackupConfig.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 208992

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 208993

    'Se existir => UPDATE, senão => INSERT
    If lErro = AD_SQL_SUCESSO Then
'
'        'Trava registro contra alterações/Leituras
'        lErro = Comando_LockExclusive(alComando(0))
'        If lErro <> SUCESSO Then gError 208994

        lErro = Comando_ExecutarPos(alComando(1), "UPDATE BackupConfig SET Descricao= ? , Habilitado= ? , DataInicio= ? , Hora= ? , " & _
                "RepetirDias= ? , Diretorio= ? , IncluirDataNomeArq= ? , DataProxBkp= ?, Compactar= ? , TransfFTP= ? , FTPURL= ? , FTPUsu= ? , FTPSenha= ? , FTPDir= ?, DirDownload = ?   ", alComando(0), _
                objBackupConfig.sDescricao, objBackupConfig.iHabilitado, objBackupConfig.dtDataInicio, objBackupConfig.dHora, _
                objBackupConfig.iRepetirDias, objBackupConfig.sDiretorio, objBackupConfig.iIncluirDataNomeArq, objBackupConfig.dtDataProxBkp, objBackupConfig.iCompactar, objBackupConfig.iTransfFTP, objBackupConfig.sFTPURL, objBackupConfig.sFTPUsu, objBackupConfig.sFTPSenha, objBackupConfig.sFTPDir, objBackupConfig.sDirDownload)
        If lErro <> AD_SQL_SUCESSO Then gError 208995

    Else


        lErro = Comando_Executar(alComando(1), "INSERT INTO BackupConfig( Codigo, Descricao, Habilitado, DataInicio, " & _
                "Hora, RepetirDias, Diretorio, IncluirDataNomeArq, DataUltBkp, " & _
                "DataProxBkp, Compactar, TransfFTP, FTPURL, FTPUsu, FTPSenha, FTPDir, DirDownload) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                objBackupConfig.lCodigo, objBackupConfig.sDescricao, objBackupConfig.iHabilitado, objBackupConfig.dtDataInicio, _
                objBackupConfig.dHora, objBackupConfig.iRepetirDias, objBackupConfig.sDiretorio, objBackupConfig.iIncluirDataNomeArq, objBackupConfig.dtDataUltBkp, _
                objBackupConfig.dtDataProxBkp, objBackupConfig.iCompactar, objBackupConfig.iTransfFTP, objBackupConfig.sFTPURL, objBackupConfig.sFTPUsu, objBackupConfig.sFTPSenha, objBackupConfig.sFTPDir, objBackupConfig.sDirDownload)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 208996

    End If

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    BackupConfig_Grava_EmTrans = SUCESSO

    Exit Function

Erro_BackupConfig_Grava_EmTrans:

    BackupConfig_Grava_EmTrans = gErr

    Select Case gErr

        Case 208991
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)

        Case 208992, 208993
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_BACKUPCONFIG, gErr)

'        Case 208994
'            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_BACKUPCONFIG", gErr)

        Case 208995
            Call Rotina_ErroECF(vbOKOnly, ERRO_UPDATE_BACKUPCONFIG, gErr)

        Case 208996
            Call Rotina_ErroECF(vbOKOnly, ERRO_INSERCAO_BACKUPCONFIG, gErr)

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 208997)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function Backup_Executa() As Long

Dim lErro As Long
Dim alComando(0 To 1) As Long, iLiberado As Integer
Dim iIndice As Integer, iRepetirDias As Integer, lTransacao As Long
Dim dtData As Date, dHora As Double, dHoraAtual As Double
Dim objBackupConfig As ClassBackupConfig, dtProxBkp As Date
Dim sDiretorio As String, iIncluirDataNomeArq As Integer, lCodigo As Long
Dim bExecutar As Boolean, lConexaoExt As Long
Dim sDSN As String
Dim iLenDSN As Integer
Dim sParamOut As String
Dim iLenParamOut As Integer

On Error GoTo Erro_Backup_Executa

    sDSN = "DSN=SGEPAFECF;UID=sa;PWD=SAPWD;"
    iLenDSN = Len(sDSN)
    sParamOut = String(1024, 0)
    iLenParamOut = 1024

    lConexaoExt = Conexao_AbrirExt(AD_SQL_DRIVER_ODBC, sDSN, iLenDSN, sParamOut, iLenParamOut)
    If lConexaoExt = 0 Then gError ERRO_SEM_MENSAGEM

    'lConexaoExt = glConexaoPAFECF

    lErro = Backup_Token(BACKUP_TOKEN_ACAO_OBTER, iLiberado, lConexaoExt)
    If lErro = SUCESSO And iLiberado = MARCADO Then
                
        dHoraAtual = CDbl(Time)
    
        'Abertura de Comando
        For iIndice = LBound(alComando) To UBound(alComando)
            alComando(iIndice) = Comando_AbrirExt(lConexaoExt)
            If alComando(iIndice) = 0 Then gError 209010
        Next
        
        sDiretorio = String(STRING_MAXIMO, 0)
        
        'Le os backups a realizar
        lErro = Comando_Executar(alComando(0), "SELECT Codigo, DataProxBkp, Hora, RepetirDias, Diretorio ,IncluirDataNomeArq FROM BackupConfig WHERE Habilitado <> 0 AND DataProxBkp <> ? AND DataProxBkp <= ? ", _
                    lCodigo, dtProxBkp, dHora, iRepetirDias, sDiretorio, iIncluirDataNomeArq, DATA_NULA, Date)
        If lErro <> AD_SQL_SUCESSO Then gError 209011
    
        'Busca Primeiro
        lErro = Comando_BuscarPrimeiro(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 209012
        
        bExecutar = False
        Do While lErro <> AD_SQL_SEM_DADOS
        
            If dtProxBkp < Date Or (dtProxBkp = Date And dHora <= dHoraAtual) Then
                bExecutar = True
                Exit Do
            End If
                
            lErro = Comando_BuscarProximo(alComando(0))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 209014
        
        Loop
        
        If bExecutar Then
        
            Set objBackupConfig = New ClassBackupConfig
        
            objBackupConfig.lCodigo = lCodigo
                
            lErro = CF_ECF("BackupConfig_Le", objBackupConfig)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
            
            lErro = Backup_Executa2(objBackupConfig, lConexaoExt)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
            dtProxBkp = Date + iRepetirDias
    
            lTransacao = Transacao_AbrirExt(lConexaoExt)
            If lTransacao = 0 Then gError 209024
    
            lErro = Comando_Executar(alComando(1), "UPDATE BackupConfig SET DataUltBkp = ?, DataProxBkp = ? WHERE Codigo = ? ", Date, dtProxBkp, lCodigo)
            If lErro <> AD_SQL_SUCESSO Then gError 209013
            
            lErro = Transacao_CommitExt(lTransacao)
            If lErro <> AD_SQL_SUCESSO Then gError 209025
            
        End If
                        
        'Fecha Comando
        For iIndice = LBound(alComando) To UBound(alComando)
            Call Comando_Fechar(alComando(iIndice))
        Next
        
        lErro = Backup_Token(BACKUP_TOKEN_ACAO_LIBERAR, iLiberado, lConexaoExt)
        If lErro <> SUCESSO Then gError 209023
        
    End If

    lErro = Backup_Trata_Log(lConexaoExt)
    If lErro <> SUCESSO Then gError 209023
    
    Call Conexao_FecharExt(lConexaoExt)
    
    Backup_Executa = SUCESSO

    Exit Function

Erro_Backup_Executa:

    Backup_Executa = gErr

    Select Case gErr

        Case 209010
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)

        Case 209011, 209012, 209014
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_BACKUPCONFIG, gErr)

        Case 209013
            Call Rotina_ErroECF(vbOKOnly, ERRO_UPDATE_BACKUPCONFIG, gErr)
            
        Case 209023
            Call Rotina_ErroECF(vbOKOnly, ERRO_BACKUP_TOKEN_LIBERAR, gErr)
            
        Case 209024
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_TRANSACAO1, gErr)

        Case 209025
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_TRANSACAO1, gErr)

        Case ERRO_SEM_MENSAGEM

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 209015)

    End Select
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    'Desfaz Transação
    Call Transacao_RollbackExt(lTransacao)
       
    If iLiberado = MARCADO Then
        Call Backup_Token(BACKUP_TOKEN_ACAO_LIBERAR, iLiberado, lConexaoExt)
    End If

    Call Conexao_FecharExt(lConexaoExt)

    Exit Function

End Function

Public Function Backup_Executa_Direto(ByVal lCodigo As Long, Optional ByVal bApenasBkpeRestoreEmpTeste As Boolean = False) As Long

Dim lErro As Long
Dim alComando(0 To 1) As Long, iLiberado As Integer
Dim iIndice As Integer, iRepetirDias As Integer, lTransacao As Long
Dim dtData As Date, dHora As Double, dHoraAtual As Double
Dim objBackupConfig As New ClassBackupConfig, dtProxBkp As Date
Dim sDiretorio As String, iIncluirDataNomeArq As Integer
Dim bExecutar As Boolean, lConexaoExt As Long
Dim sDSN As String
Dim iLenDSN As Integer
Dim sParamOut As String
Dim iLenParamOut As Integer

On Error GoTo Erro_Backup_Executa_Direto

    sDSN = "DSN=SGEPAFECF;UID=sa;PWD=SAPWD;"
    'sDSN = "DSN=SGEPAFECF;UID=administrador;Trusted_Connection=Yes;"
    
    iLenDSN = Len(sDSN)
    sParamOut = String(1024, 0)
    iLenParamOut = 1024

    lConexaoExt = Conexao_AbrirExt(AD_SQL_DRIVER_ODBC, sDSN, iLenDSN, sParamOut, iLenParamOut)
    If lConexaoExt = 0 Then gError ERRO_SEM_MENSAGEM

    'lConexaoExt = glConexaoPAFECF

    lErro = Backup_Token(BACKUP_TOKEN_ACAO_OBTER, iLiberado, lConexaoExt)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
                    
    dHoraAtual = CDbl(Time)

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_AbrirExt(lConexaoExt)
        If alComando(iIndice) = 0 Then gError 209010
    Next
    
    sDiretorio = String(STRING_MAXIMO, 0)
    
    'Le os backups a realizar
    lErro = Comando_Executar(alComando(0), "SELECT DataProxBkp, Hora, RepetirDias, Diretorio ,IncluirDataNomeArq FROM BackupConfig WHERE Codigo = ? ", _
                dtProxBkp, dHora, iRepetirDias, sDiretorio, iIncluirDataNomeArq, lCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 209011

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 209012
    
    If lErro <> AD_SQL_SUCESSO Then gError 211711 'Código não cadastrado
    
    objBackupConfig.lCodigo = lCodigo
    
    lErro = CF("BackupConfig_Le", objBackupConfig)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    If bApenasBkpeRestoreEmpTeste Then
        objBackupConfig.iTransfFTP = 0
        objBackupConfig.iCompactar = 0
        objBackupConfig.bApenasBkpeRestoreEmpTeste = bApenasBkpeRestoreEmpTeste
    End If

    lErro = Backup_Executa2(objBackupConfig, lConexaoExt)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    If Not bApenasBkpeRestoreEmpTeste Then
        dtProxBkp = Date + iRepetirDias
    
        lTransacao = Transacao_AbrirExt(lConexaoExt)
        If lTransacao = 0 Then gError 209024
    
        lErro = Comando_Executar(alComando(1), "UPDATE BackupConfig SET DataUltBkp = ?, DataProxBkp = ? WHERE Codigo = ? ", Date, dtProxBkp, lCodigo)
        If lErro <> AD_SQL_SUCESSO Then gError 209013
        
        lErro = Transacao_CommitExt(lTransacao)
        If lErro <> AD_SQL_SUCESSO Then gError 209025
    End If
                    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    lErro = Backup_Token(BACKUP_TOKEN_ACAO_LIBERAR, iLiberado, lConexaoExt)
    If lErro <> SUCESSO Then gError 209023
    
    lErro = Backup_Trata_Log(lConexaoExt, objBackupConfig.bApenasBkpeRestoreEmpTeste)
    If lErro <> SUCESSO Then gError 209023
    
    Call Conexao_FecharExt(lConexaoExt)

    Backup_Executa_Direto = SUCESSO

    Exit Function

Erro_Backup_Executa_Direto:

    Backup_Executa_Direto = gErr

    Select Case gErr

        Case 209010
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)

        Case 209011, 209012, 209014
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_BACKUPCONFIG, gErr)

        Case 209013
            Call Rotina_ErroECF(vbOKOnly, ERRO_UPDATE_BACKUPCONFIG, gErr)
            
        Case 209023
            Call Rotina_ErroECF(vbOKOnly, ERRO_BACKUP_TOKEN_LIBERAR, gErr)
            
        Case 209024
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_TRANSACAO1, gErr)
            
        Case 209025
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_TRANSACAO1, gErr)
        
        Case 211711
            Call Rotina_ErroECF(vbOKOnly, ERRO_BACKUPCONFIG_NAO_CADASTRADO, gErr, lCodigo)
        
        Case ERRO_SEM_MENSAGEM

        Case Else
            Call Rotina_Erro(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 209015)

    End Select
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    'Desfaz Transação
    Call Transacao_RollbackExt(lTransacao)
    
    If iLiberado = MARCADO Then
        Call Backup_Token(BACKUP_TOKEN_ACAO_LIBERAR, iLiberado, lConexaoExt)
    End If

    Call Conexao_FecharExt(lConexaoExt)

    Exit Function

End Function

Private Function Arquivo_Exclui(ByVal sNomeArq As String) As Long
On Error GoTo Erro_Arquivo_Exclui
    Call Kill(sNomeArq)
    Exit Function
Erro_Arquivo_Exclui:
    Exit Function
End Function

Private Function Backup_Executa2(ByVal objBackupConfig As ClassBackupConfig, ByVal lConexaoExt As Long) As Long

Dim lErro As Long, lTransacaoDic As Long
Dim alComando(1 To 3) As Long, sComando As String
Dim iIndice As Integer, lEmpresaRestore As Long
Dim sNome As String, sNomeArq As String, sBDTesteParaRestore As String
'Dim objFrmBackup As New FrmBackup
Dim sHora As String, sHoraNomeArq As String, dtData As Date, sArq As String
Dim asArquivos(1 To 50, 1 To 4) As String, iQtdArqs As Integer

On Error GoTo Erro_Backup_Executa2

    'If giStatusSessao = SESSAO_ABERTA Then Call objFrmBackup.Abrir
    
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_AbrirExt(lConexaoExt)
        If alComando(iIndice) = 0 Then gError 209016
    Next
    
    sHora = Format(Now, "HH:MM:SS")
    sHoraNomeArq = Format(Now, "hhmm")
    dtData = Date
    
    sNome = String(STRING_MAXIMO, 0)
     
    'If Not objBackupConfig.bApenasBkpeRestoreEmpTeste Then
        lErro = Comando_Executar(alComando(1), "SELECT Nome FROM BDsInfo ORDER BY Nome", sNome)
'    Else
'        sBDTesteParaRestore = String(STRING_MAXIMO, 0)
'        lErro = Comando_Executar(alComando(1), "SELECT Nome, BDTesteParaRestore, EmpresaTesteParaRestore FROM BDsInfo WHERE BDTesteParaRestore <> '' ORDER BY Nome", sNome, sBDTesteParaRestore, lEmpresaRestore)
    'End If
    If lErro <> AD_SQL_SUCESSO Then gError 209017
         
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 209018
    
    If lErro = AD_SQL_SEM_DADOS Then gError 209019
    
    iQtdArqs = 0
    Do While lErro <> AD_SQL_SEM_DADOS
    
        iQtdArqs = iQtdArqs + 1
    
        If objBackupConfig.iIncluirDataNomeArq = MARCADO Then
            sArq = sNome & "_" & Format(dtData, "yyyymmdd") & "_" & sHoraNomeArq & ".bak"
        Else
            sArq = sNome & ".bak"
        End If
        sNomeArq = objBackupConfig.sDiretorio & sArq
        
        Call Arquivo_Exclui(sNomeArq)
    
        'If Not objBackupConfig.bApenasBkpeRestoreEmpTeste Then
            sComando = "EXEC Executar_Backup '" & sNome & "','" & sNomeArq & "'"
'        Else
'            If lEmpresaRestore = 0 Or lEmpresaRestore = glEmpresa Then gError 213171
'
'            sComando = "EXEC Executar_Backup_Com_Restore '" & sNome & "','" & sNomeArq & "','" & sBDTesteParaRestore & "'"
        'End If
        
        lErro = Comando_Executar(alComando(2), sComando)
        If lErro <> AD_SQL_SUCESSO Then gError 209020
        
        asArquivos(iQtdArqs, 1) = sNome
        asArquivos(iQtdArqs, 2) = sArq
        asArquivos(iQtdArqs, 3) = sBDTesteParaRestore
        asArquivos(iQtdArqs, 4) = lEmpresaRestore
        
'        lErro = Comando_Executar(alComando(3), "INSERT INTO BackupLog (Usuario, Data, Hora, NomeBD, NomeDir, NomeArq, Compactar, TransfFTP, CodBkp) VALUES (?,?,?,?,?,?,?,?,?)", gsUsuario, dtData, sHora, sNome, objBackupConfig.sDiretorio, sArq, objBackupConfig.iCompactar, objBackupConfig.iTransfFTP, objBackupConfig.lCodigo)
'        If lErro <> AD_SQL_SUCESSO Then gError 209017
    
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 209021
    
    Loop
    
    'Fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    'Inicia a Transacao
    lTransacaoDic = Transacao_AbrirExt(lConexaoExt)
    If lTransacaoDic = 0 Then gError 211743

    alComando(3) = Comando_AbrirExt(lConexaoExt)
    If alComando(3) = 0 Then gError 209016

    For iIndice = 1 To iQtdArqs
    
        sNome = asArquivos(iIndice, 1)
        sArq = asArquivos(iIndice, 2)
        sBDTesteParaRestore = asArquivos(iIndice, 3)
        lEmpresaRestore = asArquivos(iIndice, 4)

        lErro = Comando_Executar(alComando(3), "INSERT INTO BackupLog (Usuario, Data, Hora, NomeBD, NomeDir, NomeArq, Compactar, TransfFTP, CodBkp, ComRestore, BDRestore, EmpresaRestore, ConfigurarRestore) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", gsUsuario, dtData, sHora, sNome, objBackupConfig.sDiretorio, sArq, objBackupConfig.iCompactar, objBackupConfig.iTransfFTP, objBackupConfig.lCodigo, IIf(objBackupConfig.bApenasBkpeRestoreEmpTeste, 1, 0), sBDTesteParaRestore, lEmpresaRestore, IIf(objBackupConfig.bApenasBkpeRestoreEmpTeste, 1, 0))
        If lErro <> AD_SQL_SUCESSO Then gError 209017
        
    Next
    
    'Fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Call Comando_Fechar(alComando(3))
        
    lErro = Transacao_CommitExt(lTransacaoDic)
    If lErro <> AD_SQL_SUCESSO Then gError 211754

    'If giStatusSessao = SESSAO_ABERTA Then Call objFrmBackup.Fechar

    Backup_Executa2 = SUCESSO
   
   Exit Function
   
Erro_Backup_Executa2:

   Backup_Executa2 = gErr

    Select Case gErr

        Case 209016
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)
        
        Case 209017, 209018, 209021
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_BDSINFO, gErr)
            
        Case 209019
            Call Rotina_ErroECF(vbOKOnly, ERRO_BDSINFO_NAO_CADASTRADO, gErr)

        Case 209020
            Call Rotina_ErroECF(vbOKOnly, ERRO_BACKUP_BDSINFO, gErr, sComando)

        Case 211743
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_TRANSACAO1, gErr)

        Case 211754
            Call Rotina_ErroECF(vbOKOnly, ERRO_COMMIT_TRANSACAO1, gErr)
            
'        Case 213171
'            Call Rotina_ErroECF(vbOKOnly, "ERRO_BKP_COM_RESTORE_CONFIG", gErr)

        Case Else
            Call Rotina_ErroECF(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 209022)

    End Select
   
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Call Transacao_RollbackExt(lTransacaoDic)
    
    'If giStatusSessao = SESSAO_ABERTA Then Call objFrmBackup.Fechar
    
    Exit Function

End Function

Private Function Backup_Token(ByVal iAcao As Integer, iLiberado As Integer, ByVal lConexaoExt As Long) As Long

'Dim lErro As Long, iIndice As Integer
'Dim alComando(1 To 2) As Long
'Dim lTransacao As Long
'Dim sConteudo As String
'Dim sConteudoNovo As String

On Error GoTo Erro_Backup_Token

    iLiberado = MARCADO

'    iLiberado = DESMARCADO
'
'    lTransacao = Transacao_AbrirExt(lConexaoExt)
'    If lTransacao = 0 Then gError ERRO_SEM_MENSAGEM
'
'    'Abre o comando
'    For iIndice = LBound(alComando) To UBound(alComando)
'        alComando(iIndice) = Comando_AbrirExt(lConexaoExt)
'        If alComando(iIndice) = 0 Then gError ERRO_SEM_MENSAGEM
'    Next
'
'    sConteudo = String(STRING_CONTROLE_CONTEUDO, 0)
'
'    'Lê a marcação para ver se já existe alguém tentando executar o backup
'    lErro = Comando_ExecutarPos(alComando(1), "SELECT Conteudo FROM Controle WHERE Codigo = ? ", 0, sConteudo, CONTROLE_TOKEN_BACKUP)
'    If lErro <> AD_SQL_SUCESSO Then gError ERRO_SEM_MENSAGEM
'
'    'Busca o Primeiro
'    lErro = Comando_BuscarPrimeiro(alComando(1))
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError ERRO_SEM_MENSAGEM
'
'    'Se não achou => Insere o Path do usuário atual
'    If lErro = AD_SQL_SEM_DADOS Then gError ERRO_SEM_MENSAGEM
'
'    If iAcao = BACKUP_TOKEN_ACAO_LIBERAR Then
'        sConteudoNovo = ""
'        iLiberado = MARCADO
'    Else
'        sConteudoNovo = Format(Date, "dd/mm/yyyy")
'        If StrParaDate(sConteudo) <> Date Then iLiberado = MARCADO
'    End If
'
'    If iLiberado = MARCADO Then
'
'        lErro = Comando_ExecutarPos(alComando(2), "UPDATE Controle SET Conteudo = ?", alComando(1), sConteudoNovo)
'        If lErro <> AD_SQL_SUCESSO Then gError ERRO_SEM_MENSAGEM
'
'    End If
'
'    For iIndice = LBound(alComando) To UBound(alComando)
'        Call Comando_Fechar(alComando(iIndice))
'    Next
'
'    'confirma a transação
'    lErro = Transacao_CommitExt(lTransacao)
'    If lErro <> AD_SQL_SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    Backup_Token = SUCESSO
    
    Exit Function

Erro_Backup_Token:

    Backup_Token = gErr
'
'    For iIndice = LBound(alComando) To UBound(alComando)
'        Call Comando_Fechar(alComando(iIndice))
'    Next
'
'    Call Transacao_RollbackExt(lTransacao)
   
    Exit Function

End Function

Private Function Backup_Trata_Log(ByVal lConexaoExt As Long, Optional ByVal bApenasBkpeRestoreEmpTeste As Boolean = False) As Long

Dim lErro As Long
'Dim objFrmBackup As New FrmBackup

On Error GoTo Erro_Backup_Trata_Log

    'If giStatusSessao = SESSAO_ABERTA Then Call objFrmBackup.Abrir
    
    lErro = Backup_Trata_Zip(lConexaoExt)
    If lErro <> SUCESSO Then Call Rotina_AvisoECF(vbOKOnly, AVISO_ERRO_AO_COMPACTAR_O_BACKUP, lErro)
    
    lErro = Backup_Trata_Upload(lConexaoExt)
    If lErro <> SUCESSO Then Call Rotina_AvisoECF(vbOKOnly, AVISO_ERRO_AO_FAZER_O_UPLOAD_DO_BACKUP, lErro)
    
    lErro = Backup_Trata_Limpa_FTP(lConexaoExt)
    If lErro <> SUCESSO Then Call Rotina_AvisoECF(vbOKOnly, AVISO_ERRO_AO_APAGAR_BACKUPS_ANTIGOS_FTP, lErro)
    
    'If giStatusSessao = SESSAO_ABERTA Then Call objFrmBackup.Fechar
    
    Backup_Trata_Log = SUCESSO
   
    Exit Function
   
Erro_Backup_Trata_Log:

    Backup_Trata_Log = gErr

    Select Case gErr

        Case ERRO_SEM_MENSAGEM
         
        'Case 213172
            'Call Rotina_Aviso(vbOKOnly, "AVISO_ERRO_AO_CONFIGURAR_BD_RESTAURADO", gErr)
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 211926)

    End Select
    
    'If giStatusSessao = SESSAO_ABERTA Then Call objFrmBackup.Fechar
    
    Exit Function
    
End Function

Private Function Backup_Trata_Zip(ByVal lConexaoExt As Long) As Long

Dim iIndice As Integer, lErro As Long
Dim lTransacaoDic As Long
Dim alComandoDic(0 To 2) As Long
Dim sUsuario As String, dtData As Date, sHora As String, sNomeArq As String, sNomeBd As String, sDir As String
Dim bDirTempCriado As Boolean, bZipTempCriado As Boolean, sDirTemp As String, sArqTemp As String
Dim iPos As Integer, dtDataZip As Date, sHoraZip As String

On Error GoTo Erro_Backup_Trata_Zip

    bDirTempCriado = False
    bZipTempCriado = False

    'Inicia a Transacao
    lTransacaoDic = Transacao_AbrirExt(lConexaoExt)
    If lTransacaoDic = 0 Then gError 211927

    'Abre o comando
    For iIndice = LBound(alComandoDic) To UBound(alComandoDic)
        alComandoDic(iIndice) = Comando_AbrirExt(lConexaoExt)
        If alComandoDic(iIndice) = 0 Then gError 211928
    Next
    
    dtDataZip = Date
    sHoraZip = Format(Now, "HH:MM:SS")
    
    sUsuario = String(STRING_MAXIMO, 0)
    sHora = String(STRING_MAXIMO, 0)
    
    lErro = Comando_Executar(alComandoDic(0), "SELECT DISTINCT Usuario, Data, Hora FROM BackupLog WHERE Compactar = 1 AND NomeArqZip = ''", sUsuario, dtData, sHora)
    If lErro <> AD_SQL_SUCESSO Then gError 211929
    
    lErro = Comando_BuscarPrimeiro(alComandoDic(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211930
    
    Do While lErro = AD_SQL_SUCESSO
    
        sDirTemp = ""
                
        sNomeArq = String(STRING_MAXIMO, 0)
        sNomeBd = String(STRING_MAXIMO, 0)
        sDir = String(STRING_MAXIMO, 0)
        
        lErro = Comando_ExecutarPos(alComandoDic(1), "SELECT NomeDir, NomeArq, NomeBD FROM BackupLog WHERE Usuario = ? AND Data = ? AND Hora = ? ", 0, sDir, sNomeArq, sNomeBd, sUsuario, dtData, sHora)
        If lErro <> AD_SQL_SUCESSO Then gError 211931
        
        lErro = Comando_BuscarPrimeiro(alComandoDic(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211932
        
        Do While lErro = AD_SQL_SUCESSO
        
            If sDirTemp = "" Then
            
                sDirTemp = "BKP_CORP_BD_" & Format(dtDataZip, "YYYYMMDD") & "_" & Replace(sHoraZip, ":", "") & "\"
                
                lErro = Zip_Cria_Diretorio(sDir & sDirTemp)
                If lErro <> SUCESSO Then gError 211933
                bDirTempCriado = True

            End If
        
            lErro = Zip_Verifica_Existencia_Arquivo(sDir & sNomeArq)
            If lErro <> SUCESSO Then gError 211934
        
            lErro = Zip_Copia_Arquivo(sDir & sNomeArq, sDir & sDirTemp & sNomeArq)
            If lErro <> SUCESSO Then gError 211935
        
            lErro = Comando_BuscarProximo(alComandoDic(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211936
        
        Loop
                
        lErro = Zip_Compacta(sDir & Replace(sDirTemp, "\", "") & ".zip", sDir & sDirTemp & "*.*")
        If lErro <> SUCESSO Then gError 211937
        bZipTempCriado = True
        
        lErro = Zip_Exclui_Diretorio(sDir & sDirTemp)
        If lErro <> SUCESSO Then gError 211938
        bDirTempCriado = False
        
        lErro = Comando_Executar(alComandoDic(2), "UPDATE BackupLog SET NomeArqZip = ?, DataZip = ?, HoraZip = ? WHERE Usuario = ? AND Data = ? AND Hora = ? ", Replace(sDirTemp, "\", "") & ".zip", dtDataZip, sHoraZip, sUsuario, dtData, sHora)
        If lErro <> AD_SQL_SUCESSO Then gError 211939
    
        lErro = Comando_BuscarProximo(alComandoDic(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211940
    
    Loop
   
    For iIndice = LBound(alComandoDic) To UBound(alComandoDic)
        Call Comando_Fechar(alComandoDic(iIndice))
    Next
    
    lErro = Transacao_CommitExt(lTransacaoDic)
    If lErro <> AD_SQL_SUCESSO Then gError 211941

    Backup_Trata_Zip = SUCESSO
   
    Exit Function
   
Erro_Backup_Trata_Zip:

    Backup_Trata_Zip = gErr

    Select Case gErr

        Case 211927 To 211941
         
        Case Else
            'Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 211942)

    End Select
   
    For iIndice = LBound(alComandoDic) To UBound(alComandoDic)
        Call Comando_Fechar(alComandoDic(iIndice))
    Next
    
    Call Transacao_RollbackExt(lTransacaoDic)
    
    If bZipTempCriado Then Call Zip_Exclui_Arquivo(sDir & sDirTemp & ".zip")
    If bDirTempCriado Then Call Zip_Exclui_Diretorio(sDir & sDirTemp)
    
    Exit Function
    
End Function

Private Function Backup_Trata_Upload(ByVal lConexaoExt As Long) As Long

Dim iIndice As Integer, lErro As Long
Dim lTransacaoDic As Long
Dim alComandoDic(0 To 2) As Long
Dim sNomeZip As String, sNomeArqFTP As String, sNomeDir As String
Dim sFTPURL As String, sFTPUsu As String, sFTPSenha As String, sFTPDir As String
Dim objFrmFTP As New FrmFTP, sUsuario, dtData As Date, sHora As String

On Error GoTo Erro_Backup_Trata_Upload

    'Inicia a Transacao
    lTransacaoDic = Transacao_AbrirExt(lConexaoExt)
    If lTransacaoDic = 0 Then gError 211943

    'Abre o comando
    For iIndice = LBound(alComandoDic) To UBound(alComandoDic)
        alComandoDic(iIndice) = Comando_AbrirExt(lConexaoExt)
        If alComandoDic(iIndice) = 0 Then gError 211944
    Next
    
    sNomeZip = String(STRING_MAXIMO, 0)
    sNomeArqFTP = String(STRING_MAXIMO, 0)
    sFTPURL = String(STRING_MAXIMO, 0)
    sFTPUsu = String(STRING_MAXIMO, 0)
    sFTPSenha = String(STRING_MAXIMO, 0)
    sFTPDir = String(STRING_MAXIMO, 0)
    sNomeDir = String(STRING_MAXIMO, 0)
    sUsuario = String(STRING_MAXIMO, 0)
    sHora = String(STRING_MAXIMO, 0)
        
    'Lê só o último backup zipado, só ele deverá ser transferido (a princípio)
    lErro = Comando_Executar(alComandoDic(0), "SELECT L.Usuario, L.Data, L.Hora, L.NomeDir, L.NomeArqZip, L.NomeArqFTP, B.FTPURL, B.FTPUsu, B.FTPSenha, B.FTPDir FROM BackupLog AS L, BackupConfig AS B WHERE L.CodBkp = Codigo AND L.TransfFTP = 1 AND L.NomeArqZip <> '' ORDER BY L.Data DESC, L.Hora DESC", sUsuario, dtData, sHora, sNomeDir, sNomeZip, sNomeArqFTP, sFTPURL, sFTPUsu, sFTPSenha, sFTPDir)
    If lErro <> AD_SQL_SUCESSO Then gError 211945
    
    lErro = Comando_BuscarPrimeiro(alComandoDic(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211946
    
    If lErro = AD_SQL_SUCESSO Then
    
        'Se ainda não foi para o ftp
        If Len(Trim(sNomeArqFTP)) = 0 Then
        
            objFrmFTP.Inet1.AccessType = icUseDefault
            objFrmFTP.Inet1.URL = sFTPURL
            objFrmFTP.Inet1.UserName = sFTPUsu
            objFrmFTP.Inet1.Password = sFTPSenha
            
            If right(sFTPDir, 1) <> "/" Then sFTPDir = sFTPDir & "/"
            
            lErro = objFrmFTP.Fazer_Upload(sNomeDir & sNomeZip, sFTPDir & sNomeZip)
            If lErro <> SUCESSO Then gError 211947
     
            lErro = Comando_Executar(alComandoDic(1), "UPDATE BackupLog SET ApagarArqFTP = 1 WHERE NomeArqFTP <> '' AND ArqFTPApagado = 0 ")
            If lErro <> AD_SQL_SUCESSO Then gError 211948
     
            lErro = Comando_Executar(alComandoDic(2), "UPDATE BackupLog SET FTP = ?, NomeArqFTP = ?, DataFTP = ?, HoraFTP = ?, ApagarArqFTP = ? WHERE Usuario = ? AND Data = ? AND Hora = ? ", sFTPURL, sFTPDir & sNomeZip, Date, Format(Now, "HH:MM:SS"), DESMARCADO, sUsuario, dtData, sHora)
            If lErro <> AD_SQL_SUCESSO Then gError 211948
     
        End If
            
    End If
   
    For iIndice = LBound(alComandoDic) To UBound(alComandoDic)
        Call Comando_Fechar(alComandoDic(iIndice))
    Next
    
    lErro = Transacao_CommitExt(lTransacaoDic)
    If lErro <> AD_SQL_SUCESSO Then gError 211949

    Set objFrmFTP = Nothing

    Backup_Trata_Upload = SUCESSO
   
    Exit Function
   
Erro_Backup_Trata_Upload:

    Backup_Trata_Upload = gErr

    Select Case gErr

        Case 211943 To 211949
         
        Case Else
            'Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 211950)

    End Select
   
    For iIndice = LBound(alComandoDic) To UBound(alComandoDic)
        Call Comando_Fechar(alComandoDic(iIndice))
    Next
    
    Call Transacao_RollbackExt(lTransacaoDic)
    
    Set objFrmFTP = Nothing
    
    Exit Function
    
End Function

Private Function Backup_Trata_Limpa_FTP(ByVal lConexaoExt As Long) As Long

Dim iIndice As Integer, lErro As Long
Dim lTransacaoDic As Long
Dim alComandoDic(0 To 2) As Long
Dim sNomeArqFTP As String, sNomeArqFTPAnt As String
Dim sFTPURL As String, sFTPUsu As String, sFTPSenha As String
Dim objFrmFTP As New FrmFTP, sUsuario, dtData As Date, sHora As String

On Error GoTo Erro_Backup_Trata_Limpa_FTP

    'Inicia a Transacao
    lTransacaoDic = Transacao_AbrirExt(lConexaoExt)
    If lTransacaoDic = 0 Then gError 211951

    'Abre o comando
    For iIndice = LBound(alComandoDic) To UBound(alComandoDic)
        alComandoDic(iIndice) = Comando_AbrirExt(lConexaoExt)
        If alComandoDic(iIndice) = 0 Then gError 211952
    Next
    
    sNomeArqFTP = String(STRING_MAXIMO, 0)
    sFTPURL = String(STRING_MAXIMO, 0)
    sFTPUsu = String(STRING_MAXIMO, 0)
    sFTPSenha = String(STRING_MAXIMO, 0)
    sUsuario = String(STRING_MAXIMO, 0)
    sHora = String(STRING_MAXIMO, 0)
        
    'Lê só os FTPs que devem ser pagados e ainda não o foram
    lErro = Comando_Executar(alComandoDic(0), "SELECT L.Usuario, L.Data, L.Hora, L.NomeArqFTP, B.FTPURL, B.FTPUsu, B.FTPSenha FROM BackupLog AS L, BackupConfig AS B WHERE L.CodBkp = Codigo AND L.ApagarArqFTP = 1 AND L.NomeArqFTP <> '' AND L.ArqFTPApagado = 0 ORDER BY L.NomeArqFTP ", sUsuario, dtData, sHora, sNomeArqFTP, sFTPURL, sFTPUsu, sFTPSenha)
    If lErro <> AD_SQL_SUCESSO Then gError 211953
    
    lErro = Comando_BuscarPrimeiro(alComandoDic(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211954
    
    Do While lErro = AD_SQL_SUCESSO
    
        If sNomeArqFTPAnt <> sNomeArqFTP Then
        
            sNomeArqFTPAnt = sNomeArqFTP
        
            objFrmFTP.Inet1.AccessType = icUseDefault
            objFrmFTP.Inet1.URL = sFTPURL
            objFrmFTP.Inet1.UserName = sFTPUsu
            objFrmFTP.Inet1.Password = sFTPSenha
            
            lErro = objFrmFTP.Apagar_Arquivo_FTP(sNomeArqFTP)
            If lErro <> SUCESSO Then gError 211955
     
            lErro = Comando_Executar(alComandoDic(1), "UPDATE BackupLog SET ArqFTPApagado = ?, DataDEL = ?, HoraDEL = ? WHERE Usuario = ? AND Data = ? AND Hora = ? ", MARCADO, Date, Format(Now, "HH:MM:SS"), sUsuario, dtData, sHora)
            If lErro <> AD_SQL_SUCESSO Then gError 211956
     
        End If
            
        lErro = Comando_BuscarProximo(alComandoDic(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211957
        
    Loop
   
    For iIndice = LBound(alComandoDic) To UBound(alComandoDic)
        Call Comando_Fechar(alComandoDic(iIndice))
    Next
    
    lErro = Transacao_CommitExt(lTransacaoDic)
    If lErro <> AD_SQL_SUCESSO Then gError 211958

    Set objFrmFTP = Nothing

    Backup_Trata_Limpa_FTP = SUCESSO
   
    Exit Function
   
Erro_Backup_Trata_Limpa_FTP:

    Backup_Trata_Limpa_FTP = gErr

    Select Case gErr

        Case 211951 To 211958
         
        Case Else
            'Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 211959)

    End Select
   
    For iIndice = LBound(alComandoDic) To UBound(alComandoDic)
        Call Comando_Fechar(alComandoDic(iIndice))
    Next
    
    Call Transacao_RollbackExt(lTransacaoDic)
    
    Set objFrmFTP = Nothing
    
    Exit Function
    
End Function

Public Function Backup_Trata_Download(ByVal sDir As String) As Long

Dim iIndice As Integer, lErro As Long
Dim lTransacaoDic As Long
Dim alComandoDic(0 To 2) As Long
Dim sNomeArqFTP As String, sNomeZip As String
Dim sFTPURL As String, sFTPUsu As String, sFTPSenha As String
Dim objFrmFTP As New FrmFTP, sUsuario, dtData As Date, sHora As String

On Error GoTo Erro_Backup_Trata_Download

    'Inicia a Transacao
    lTransacaoDic = Transacao_AbrirExt(glConexaoPAFECF)
    If lTransacaoDic = 0 Then gError 211960

    'Abre o comando
    For iIndice = LBound(alComandoDic) To UBound(alComandoDic)
        alComandoDic(iIndice) = Comando_AbrirExt(glConexaoPAFECF)
        If alComandoDic(iIndice) = 0 Then gError 211961
    Next
    
    sNomeArqFTP = String(STRING_MAXIMO, 0)
    sFTPURL = String(STRING_MAXIMO, 0)
    sFTPUsu = String(STRING_MAXIMO, 0)
    sFTPSenha = String(STRING_MAXIMO, 0)
    sUsuario = String(STRING_MAXIMO, 0)
    sHora = String(STRING_MAXIMO, 0)
    sNomeZip = String(STRING_MAXIMO, 0)
        
    'Lê só os FTPs que devem ser pagados e ainda não o foram
    lErro = Comando_Executar(alComandoDic(0), "SELECT L.Usuario, L.Data, L.Hora, L.NomeArqFTP, L.NomeArqZip, B.FTPURL, B.FTPUsu, B.FTPSenha FROM BackupLog AS L, BackupConfig AS B WHERE L.CodBkp = Codigo AND L.NomeArqFTP <> '' AND L.ArqFTPApagado = 0 ORDER BY L.DataFTP DESC ", sUsuario, dtData, sHora, sNomeArqFTP, sNomeZip, sFTPURL, sFTPUsu, sFTPSenha)
    If lErro <> AD_SQL_SUCESSO Then gError 211962
    
    lErro = Comando_BuscarPrimeiro(alComandoDic(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211963
    
    If lErro <> AD_SQL_SUCESSO Then gError 211964
        
    objFrmFTP.Inet1.AccessType = icUseDefault
    objFrmFTP.Inet1.URL = sFTPURL
    objFrmFTP.Inet1.UserName = sFTPUsu
    objFrmFTP.Inet1.Password = sFTPSenha
    
    lErro = objFrmFTP.Fazer_Download(sNomeArqFTP, sDir & sNomeZip)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    lErro = Comando_Executar(alComandoDic(1), "UPDATE BackupLog SET NomeDirDownload = ?, DataDownload = ?, HoraDownload = ? WHERE Usuario = ? AND Data = ? AND Hora = ? ", sDir, Date, Format(Now, "HH:MM:SS"), sUsuario, dtData, sHora)
    If lErro <> AD_SQL_SUCESSO Then gError 211965
        
    For iIndice = LBound(alComandoDic) To UBound(alComandoDic)
        Call Comando_Fechar(alComandoDic(iIndice))
    Next
    
    lErro = Transacao_CommitDic
    If lErro <> AD_SQL_SUCESSO Then gError 211966

    Set objFrmFTP = Nothing

    Backup_Trata_Download = SUCESSO
   
    Exit Function
   
Erro_Backup_Trata_Download:

    Backup_Trata_Download = gErr

    Select Case gErr

        Case 211960
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_TRANSACAO1, gErr)

        Case 211961
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)
        
        Case 211962, 211963
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_BACKUPLOG, gErr)
            
        Case 211964
            Call Rotina_ErroECF(vbOKOnly, ERRO_NENHUMARQ_BKP_ENCONTRADO_FTP, gErr)
            
        Case 211965
            Call Rotina_ErroECF(vbOKOnly, ERRO_UPDATE_BACKUPLOG, gErr)

        Case 211966
            Call Rotina_ErroECF(vbOKOnly, ERRO_COMMIT_TRANSACAO1, gErr)

        Case ERRO_SEM_MENSAGEM
         
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 211967)

    End Select
   
    For iIndice = LBound(alComandoDic) To UBound(alComandoDic)
        Call Comando_Fechar(alComandoDic(iIndice))
    Next
    
    Call Transacao_RollbackDic
    
    Set objFrmFTP = Nothing
    
    Exit Function
    
End Function

Private Function Grava_Venda_Atual_EmTrans(ByVal objVenda As ClassVenda) As Long
    
Dim colRegistro As New Collection
Dim iIndice As Integer
Dim lErro As Long
Dim lSequencial As Long
Dim alComando(1 To 2) As Long
Dim objMovCaixa As ClassMovimentoCaixa
Dim sRegistro As String

On Error GoTo Erro_Grava_Venda_Atual_EmTrans
        
   'Abre os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_AbrirExt(glConexaoPAFECF)
        If alComando(iIndice) = 0 Then gError 207162
    Next
        
    For Each objMovCaixa In objVenda.colMovimentosCaixa
        objMovCaixa.lSequencial = lSequencial
        lSequencial = lSequencial + 1
    Next
    
    lErro = Comando_Executar(alComando(1), "DELETE FROM MovimentoCaixaAtual")
    If lErro <> AD_SQL_SUCESSO Then gError 204613
    
    If objVenda.objCupomFiscal.colItens.Count <> 0 Then
    
        'Gera a string que vai ser adicionada no arquivo
        Call CF_ECF("Venda_Gera_Log", colRegistro, objVenda)
    
        For iIndice = 1 To colRegistro.Count
        
            sRegistro = colRegistro.Item(iIndice)
            
            lErro = Comando_Executar(alComando(2), "INSERT INTO MovimentoCaixaAtual (Seq, Msg, Editavel) VALUES ( ?,?,? )", iIndice, sRegistro, IIf(objVenda.objCupomFiscal.bEditavel, 1, 0))
            If lErro <> AD_SQL_SUCESSO Then gError 204613
            
        Next

    End If

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
        
    Grava_Venda_Atual_EmTrans = SUCESSO
    
    Exit Function
    
Erro_Grava_Venda_Atual_EmTrans:
    
    Grava_Venda_Atual_EmTrans = gErr
    
    Select Case gErr
    
                
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149295)

    End Select
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function
    
End Function

Public Function Grava_Venda_Atual(ByVal objVenda As ClassVenda) As Long
    
Dim lErro As Long
Dim lSequencial As Long

On Error GoTo Erro_Grava_Venda_Atual
        
    lErro = CF_ECF("Caixa_Transacao_Abrir", lSequencial)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    lErro = Grava_Venda_Atual_EmTrans(objVenda)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        
    'Fechar a Transação
    lErro = CF_ECF("Caixa_Transacao_Fechar", lSequencial)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    Grava_Venda_Atual = SUCESSO
    
    Exit Function
    
Erro_Grava_Venda_Atual:
    
    Grava_Venda_Atual = gErr
    
    Select Case gErr
    
        Case ERRO_SEM_MENSAGEM
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149295)

    End Select
    
    Exit Function
    
End Function

Public Function Apaga_Venda_Atual() As Long
    
Dim iIndice As Integer
Dim lErro As Long
Dim lSequencial As Long
Dim alComando(1 To 1) As Long

On Error GoTo Erro_Apaga_Venda_Atual
        
    lErro = CF_ECF("Caixa_Transacao_Abrir", lSequencial)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

   'Abre os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_AbrirExt(glConexaoPAFECF)
        If alComando(iIndice) = 0 Then gError 207162
    Next
        
    lErro = Comando_Executar(alComando(1), "DELETE FROM MovimentoCaixaAtual")
    If lErro <> AD_SQL_SUCESSO Then gError 204613
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
        
    'Fechar a Transação
    lErro = CF_ECF("Caixa_Transacao_Fechar", lSequencial)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    Apaga_Venda_Atual = SUCESSO
    
    Exit Function
    
Erro_Apaga_Venda_Atual:
    
    Apaga_Venda_Atual = gErr
    
    Select Case gErr
    
                
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149295)

    End Select
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function
    
End Function

Function TEF_PAYGO_NFCE_CONFIRMA_VENDA(ByVal objVenda As ClassVenda) As Long

Dim lErro As Long, sNomeArq As String
Dim objTEF As New ClassTEF
Dim sArquivoSTS As String
Dim sArquivoINTPOS As String
Dim sArquivoINTPOSBACK As String

On Error GoTo Erro_TEF_PAYGO_NFCE_CONFIRMA_VENDA

    lErro = TEF_Trata_Resp1(objTEF, Arquivo_Tef_Resp2_Prop)
    If lErro <> SUCESSO Then gError 214569
    
    '<> 1 significa que requer confirmação =1 significa que nao precisa de confirmacao
    If objTEF.iStatusConfirmacao <> 1 Then

        lErro = TEF_Confirma_Transacao1_PAYGO(objVenda)
        If lErro <> SUCESSO Then gError 133689

    End If

    sArquivoSTS = Dir(Arquivo_Tef_Resp1_Prop)
    If sArquivoSTS <> "" Then ECF_Apaga_Arquivo Arquivo_Tef_Resp1_Prop

    sArquivoINTPOS = Dir(Arquivo_Tef_Resp2_Prop)
    If sArquivoINTPOS <> "" Then ECF_Apaga_Arquivo Arquivo_Tef_Resp2_Prop

    sArquivoINTPOSBACK = Dir(Arquivo_Tef_Resp2_Backup_Prop)
    If sArquivoINTPOSBACK <> "" Then ECF_Apaga_Arquivo Arquivo_Tef_Resp2_Backup_Prop
    
    TEF_PAYGO_NFCE_CONFIRMA_VENDA = SUCESSO

    Exit Function

Erro_TEF_PAYGO_NFCE_CONFIRMA_VENDA:

    TEF_PAYGO_NFCE_CONFIRMA_VENDA = gErr
    
    Select Case gErr
    
        Case 133689, 133690, 133806, 133807, 214569, 214585
        
        Case 214544
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, APLICACAO_ECF, "StatusTEF", NOME_ARQUIVO_CAIXA)
    
        Case 133728
            Call Rotina_ErroECF(vbOKOnly, ERRO_TEF_FALHA_IMPRESSAO, gErr, objTEF.sRede, objTEF.sNSU, objTEF.dValorTotal)
    
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149343)
    
    End Select

End Function

Function TEF_Imprime_Gerencial2_PAYGO(ByVal objVenda As ClassVenda, ByVal objTela As Object) As Long

Dim lErro As Long
Dim sNomeArq As String
Dim lTamanho As Long
Dim sRetorno As String
Dim sSaltaLinha As String
Dim objTEF As New ClassTEF
Dim iIndice As Integer
Dim lTransacao As Long, objRel As Object

On Error GoTo Erro_TEF_Imprime_Gerencial2_PAYGO

    lErro = TEF_Ler_Parametros_Impressao(objTEF, objVenda, 1)
    If lErro <> SUCESSO And lErro <> 214541 Then gError 214633

    'se existe arquivo com o indice em questao
    If lErro = SUCESSO Then

        lErro = AFRAC_AbrirRelatorioGerencial2(RELGER_COMPROVANTE_TEF, objTela, objRel)
        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Abre Comprovante TEF")
        If lErro <> SUCESSO Then gError 133687
    
        sSaltaLinha = Chr(13) + Chr(10)
    
        For iIndice = 1 To 10
    
            lErro = TEF_Ler_Parametros_Impressao(objTEF, objVenda, iIndice)
            If lErro <> SUCESSO And lErro <> 214541 Then gError 214545

            'se nao existe arquivo com o indice em questao
            If lErro <> SUCESSO Then Exit For

            'se tiver multiplos comprovantes a imprimir a partir do segundo tem q separar o primeiro do segundo e assim por diante
            If iIndice > 1 Then
            
                lErro = AFRAC_ImprimirRelatorioGerencial2(sSaltaLinha, objTela, objRel)
                lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Rel. Gerencial")
                If lErro <> SUCESSO Then gError 214622
        
                lErro = AFRAC_ImprimirRelatorioGerencial2(sSaltaLinha, objTela, objRel)
                lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Rel. Gerencial")
                If lErro <> SUCESSO Then gError 214623
        
                lErro = AFRAC_ImprimirRelatorioGerencial2(sSaltaLinha, objTela, objRel)
                lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Rel. Gerencial")
                If lErro <> SUCESSO Then gError 214624
        
                lErro = AFRAC_ImprimirRelatorioGerencial2(sSaltaLinha, objTela, objRel)
                lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Rel. Gerencial")
                If lErro <> SUCESSO Then gError 214625
            
                'aciona guilhotina apos imprimir o cartao anterior
                lErro = AFRAC_AcionarGuilhotina2("P", objRel)
                lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Acionar Guilhotina")
                If lErro <> SUCESSO Then gError 214610
            
            End If

            'caso seja folha dupla
            If giTEFImpressoraFolhaDupla = 1 Then

                lErro = TEF_Imprime_Gerencial3_PAYGO(objTela, objVenda, "VIAUNICA", iIndice, objRel)
                If lErro <> SUCESSO Then gError 214546

            Else
            
                '1 = so via CLIENTE  3 = CLIENTE E ESTAB  0= nao ha comprovante
                If objTEF.iViasComprovante = 1 Or objTEF.iViasComprovante = 3 Or objTEF.iViasComprovante = 0 Then
            
                    If objTEF.sComando = "CRT" Then
                    
                        If objTEF.iTamReduzido > 0 Then
                            
                            
                            lErro = TEF_Imprime_Gerencial3_PAYGO(objTela, objVenda, "VIAREDUZIDA", iIndice, objRel)
                            If lErro <> SUCESSO Then gError 214547
                            
                        Else
                        
                            If objTEF.iTamViaCliente > 0 Then
                        
                                lErro = TEF_Imprime_Gerencial3_PAYGO(objTela, objVenda, "VIACLIENTE", iIndice, objRel)
                                If lErro <> SUCESSO Then gError 214548
                                
                                
                            Else
                
                                lErro = TEF_Imprime_Gerencial3_PAYGO(objTela, objVenda, "VIAUNICA", iIndice, objRel)
                                If lErro <> SUCESSO Then gError 214549
                                
                            End If
                
                
                        End If
                
                    ElseIf objTEF.sComando = "ADM" Or objTEF.sComando = "CNC" Then
                
                
                            If objTEF.iTamViaCliente > 0 Then
                        
                                lErro = TEF_Imprime_Gerencial3_PAYGO(objTela, objVenda, "VIACLIENTE", iIndice, objRel)
                                If lErro <> SUCESSO Then gError 214550
                                
                            Else
                
                                lErro = TEF_Imprime_Gerencial3_PAYGO(objTela, objVenda, "VIAUNICA", iIndice, objRel)
                                If lErro <> SUCESSO Then gError 214551
                                
                            End If
                
                    End If
            
                    lErro = AFRAC_ImprimirRelatorioGerencial2(sSaltaLinha, objTela, objRel)
                    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Rel. Gerencial")
                    If lErro <> SUCESSO Then gError 214626
            
                    lErro = AFRAC_ImprimirRelatorioGerencial2(sSaltaLinha, objTela, objRel)
                    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Rel. Gerencial")
                    If lErro <> SUCESSO Then gError 214627
            
                    lErro = AFRAC_ImprimirRelatorioGerencial2(sSaltaLinha, objTela, objRel)
                    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Rel. Gerencial")
                    If lErro <> SUCESSO Then gError 214628
            
                    lErro = AFRAC_ImprimirRelatorioGerencial2(sSaltaLinha, objTela, objRel)
                    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Rel. Gerencial")
                    If lErro <> SUCESSO Then gError 214629
            
            
                    'guilhotina
                    lErro = AFRAC_AcionarGuilhotina2("P", objRel)
                    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Acionar Guilhotina")
                    If lErro <> SUCESSO Then gError 214566
            
                End If
            
                'se 2 = so via ESTAB  3 = via ESTAB e CLIENTE  0 = nao ha comprovante
                If objTEF.iViasComprovante = 2 Or objTEF.iViasComprovante = 3 Or objTEF.iViasComprovante = 0 Then
            
                    If objTEF.iTamViaEstab > 0 Then
                
                        'imprime a via do esbaelecimento
                        lErro = TEF_Imprime_Gerencial3_PAYGO(objTela, objVenda, "VIAESTAB", iIndice, objRel)
                        If lErro <> SUCESSO Then gError 214552
                        
                    Else
        
                        lErro = TEF_Imprime_Gerencial3_PAYGO(objTela, objVenda, "VIAUNICA", iIndice, objRel)
                        If lErro <> SUCESSO Then gError 214553
                        
                    End If
            
                    lErro = AFRAC_ImprimirRelatorioGerencial2(sSaltaLinha, objTela, objRel)
                    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Rel. Gerencial")
                    If lErro <> SUCESSO Then gError 214626
            
                    lErro = AFRAC_ImprimirRelatorioGerencial2(sSaltaLinha, objTela, objRel)
                    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Rel. Gerencial")
                    If lErro <> SUCESSO Then gError 214627
            
                    lErro = AFRAC_ImprimirRelatorioGerencial2(sSaltaLinha, objTela, objRel)
                    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Rel. Gerencial")
                    If lErro <> SUCESSO Then gError 214628
            
                    lErro = AFRAC_ImprimirRelatorioGerencial2(sSaltaLinha, objTela, objRel)
                    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Rel. Gerencial")
                    If lErro <> SUCESSO Then gError 214629
            
            
                    'guilhotina
                    lErro = AFRAC_AcionarGuilhotina2("P", objRel)
                    lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Acionar Guilhotina")
                    If lErro <> SUCESSO Then gError 214566
                
                End If
            
            End If
            
        Next
    
        lErro = AFRAC_FecharRelatorioGerencial2(objTela, objRel)
        lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Fechar Rel. Gerencial")
        If lErro <> SUCESSO Then gError 133692
    
    End If
    
    TEF_Imprime_Gerencial2_PAYGO = SUCESSO

    Exit Function

Erro_TEF_Imprime_Gerencial2_PAYGO:

    TEF_Imprime_Gerencial2_PAYGO = gErr
    
    Select Case gErr
    
        Case 126572, 126573, 133687, 133688, 133692, 133778, 133779, 204278, 204279, 214545 To 214553, 214566, 214605, 214606, 214610, 214622 To 214629, 214633
    
        Case 133699, 133700, 133823, 133824
            Call Rotina_ErroECF(vbOKOnly, ERRO_ARQUIVO_NAO_ENCONTRADO1, gErr, APLICACAO_ECF, "StatusTEF", NOME_ARQUIVO_CAIXA)
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149347)
    
    End Select

    Exit Function

End Function

Private Function TEF_Imprime_Gerencial3_PAYGO(ByVal objTela As Object, ByVal objVenda As ClassVenda, ByVal sVia As String, ByVal iIndice As Integer, ByVal objRel As Object) As Long

Dim lErro As Long
Dim sLinha As String
Dim sSaltaLinha As String
Dim iPos1 As Integer
Dim sNomeArq As String

On Error GoTo Erro_TEF_Imprime_Gerencial3_PAYGO

    sNomeArq = Dir(gsDirMVTEF & "TEF_" & objVenda.objCupomFiscal.lNumero & "_" & CStr(iIndice) & "_" & sVia & ".txt")

    If Len(sNomeArq) > 0 Then

        Open gsDirMVTEF & sNomeArq For Input As #1
        
        If Not EOF(1) Then Line Input #1, sLinha
    
        Do While Not EOF(1)
        
            Line Input #1, sLinha
                
            lErro = AFRAC_ImprimirRelatorioGerencial2(sLinha, objTela, objRel)
            lErro = CF_ECF("Retorna_MSGErro_AFRAC", lErro, "Imprimir Rel. Gerencial")
            If lErro <> SUCESSO Then gError 133690
                
        Loop
            
        Close #1
    
    End If

    TEF_Imprime_Gerencial3_PAYGO = SUCESSO

    Exit Function

Erro_TEF_Imprime_Gerencial3_PAYGO:

    TEF_Imprime_Gerencial3_PAYGO = gErr
    
    Close #1
    
    Select Case gErr
    
        Case 133689 To 133691, 133737, 214608
    
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error, 149348)
    
    End Select

    Exit Function

End Function


Private Function ECFConfig_ObterIntegracao() As Long
'obtem dados de configuracao da integracao para receber pedidos externos como do aplicativo da NTK
'TEM QUE SER CHAMADA DENTRO DE TRANSACAO

Dim lErro As Long
Dim sConteudo As String, iIntegracaoIni As Integer
Dim alComando(1 To 4) As Long
Dim iIndice As Integer, sCodigo As String

On Error GoTo Erro_ECFConfig_ObterIntegracao

    giIntegracaoTipo = INTEGRACAO_TIPO_NENHUMA
    gsIntegracaoTipo = ""

   'Abre os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_AbrirExt(glConexaoOrcPAF)
        If alComando(iIndice) = 0 Then gError 204603
    Next

    iIntegracaoIni = GetPrivateProfileInt(APLICACAO_ECF, "Integracao", 999, NOME_ARQUIVO_CAIXA)
    
    If iIntegracaoIni = 999 Then
    
        sConteudo = String(STRING_BUFFER_MAX_TEXTO, 0)
        sCodigo = "INTEGRACAO_TIPO"
        lErro = Comando_Executar(alComando(1), "SELECT Conteudo FROM OrcamentoConfig WHERE Codigo = ?", sConteudo, sCodigo)
        If lErro <> AD_SQL_SUCESSO Then gError 204604
    
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO Then gError 204605
    
        giIntegracaoTipo = StrParaInt(sConteudo)
        gsIntegracaoTipo = Trim(sConteudo)

    Else
    
        giIntegracaoTipo = iIntegracaoIni
        gsIntegracaoTipo = CStr(iIntegracaoIni)
    
    End If
    
    If InStr(gsIntegracaoTipo, CStr(INTEGRACAO_TIPO_NTK)) <> 0 Then
        
        sConteudo = String(STRING_BUFFER_MAX_TEXTO, 0)
        sCodigo = "INTEGRACAO_NTK_TOKEN"

        lErro = Comando_Executar(alComando(2), "SELECT Conteudo FROM OrcamentoConfig WHERE Codigo = ?", sConteudo, sCodigo)
        If lErro <> AD_SQL_SUCESSO Then gError 204604
    
        lErro = Comando_BuscarProximo(alComando(2))
        If lErro <> AD_SQL_SUCESSO Then gError 204605

        gsNTKToken = sConteudo
    
        sConteudo = String(STRING_BUFFER_MAX_TEXTO, 0)
        sCodigo = "INTEGRACAO_NTK_MERCHANT_ID"

        lErro = Comando_Executar(alComando(3), "SELECT Conteudo FROM OrcamentoConfig WHERE Codigo = ?", sConteudo, sCodigo)
        If lErro <> AD_SQL_SUCESSO Then gError 204604
    
        lErro = Comando_BuscarProximo(alComando(3))
        If lErro <> AD_SQL_SUCESSO Then gError 204605

        gsNTKMerchantId = sConteudo
    
        sConteudo = String(STRING_BUFFER_MAX_TEXTO, 0)
        sCodigo = "INTEGRACAO_NTK_URL_SERVIDOR"

        lErro = Comando_Executar(alComando(4), "SELECT Conteudo FROM OrcamentoConfig WHERE Codigo = ?", sConteudo, sCodigo)
        If lErro <> AD_SQL_SUCESSO Then gError 204604
    
        lErro = Comando_BuscarProximo(alComando(4))
        If lErro <> AD_SQL_SUCESSO Then gError 204605

        gsNTKURLServidor = sConteudo
        
    End If

    If InStr(gsIntegracaoTipo, CStr(INTEGRACAO_TIPO_PP)) <> 0 Then
        
        sConteudo = String(STRING_BUFFER_MAX_TEXTO, 0)
        sCodigo = "INTEGRACAO_PP_AMBIENTE"

        lErro = Comando_Executar(alComando(2), "SELECT Conteudo FROM OrcamentoConfig WHERE Codigo = ?", sConteudo, sCodigo)
        If lErro <> AD_SQL_SUCESSO Then gError 204604
    
        lErro = Comando_BuscarProximo(alComando(2))
        If lErro <> AD_SQL_SUCESSO Then gError 204605

        gsPPAmbiente = sConteudo
    
        sConteudo = String(STRING_BUFFER_MAX_TEXTO, 0)
        sCodigo = "INTEGRACAO_PP_CODIGO_LOJA"

        lErro = Comando_Executar(alComando(3), "SELECT Conteudo FROM OrcamentoConfig WHERE Codigo = ?", sConteudo, sCodigo)
        If lErro <> AD_SQL_SUCESSO Then gError 204604
    
        lErro = Comando_BuscarProximo(alComando(3))
        If lErro <> AD_SQL_SUCESSO Then gError 204605

        glPPCodLoja = StrParaLong(sConteudo)
    
        sConteudo = String(STRING_BUFFER_MAX_TEXTO, 0)
        sCodigo = "INTEGRACAO_PP_EMAIL_LOJISTA"

        lErro = Comando_Executar(alComando(4), "SELECT Conteudo FROM OrcamentoConfig WHERE Codigo = ?", sConteudo, sCodigo)
        If lErro <> AD_SQL_SUCESSO Then gError 204604
    
        lErro = Comando_BuscarProximo(alComando(4))
        If lErro <> AD_SQL_SUCESSO Then gError 204605

        gsPPEmailLojista = sConteudo
        
        sConteudo = String(STRING_BUFFER_MAX_TEXTO, 0)
        sCodigo = "INTEGRACAO_PP_SENHA_LOJISTA"

        lErro = Comando_Executar(alComando(4), "SELECT Conteudo FROM OrcamentoConfig WHERE Codigo = ?", sConteudo, sCodigo)
        If lErro <> AD_SQL_SUCESSO Then gError 204604
    
        lErro = Comando_BuscarProximo(alComando(4))
        If lErro <> AD_SQL_SUCESSO Then gError 204605

        gsPPSenhaLojista = sConteudo
        
        sConteudo = String(STRING_BUFFER_MAX_TEXTO, 0)
        sCodigo = "INTEGRACAO_PP_VERSAO"

        lErro = Comando_Executar(alComando(4), "SELECT Conteudo FROM OrcamentoConfig WHERE Codigo = ?", sConteudo, sCodigo)
        If lErro <> AD_SQL_SUCESSO Then gError 204604
    
        lErro = Comando_BuscarProximo(alComando(4))
        If lErro <> AD_SQL_SUCESSO Then gError 204605

        gsPPVersao = sConteudo
        
    End If

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    ECFConfig_ObterIntegracao = SUCESSO

    Exit Function

Erro_ECFConfig_ObterIntegracao:

    ECFConfig_ObterIntegracao = gErr

    Select Case gErr

        Case 204603
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)

        Case 204604, 204605
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_ECFCONFIG, gErr, sCodigo)

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB_1, gErr, Error$, 204607)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function Cidade_ObtemIBGE(ByVal sUF As String, ByRef sCidade As String, ByRef lIBGECidade As Long) As Long

Dim lErro As Long, sMunic As String, iUFCodIBGE As Integer, sNomeMunic As String
Dim lComando As Long

On Error GoTo Erro_Cidade_ObtemIBGE
    
    lIBGECidade = 0
    
    lComando = Comando_AbrirExt(glConexaoPAFECF)
    If lComando = 0 Then gError 210425
                    
    Call UF_ObterCodIBGE(sUF, iUFCodIBGE)

    sMunic = String(STRING_CIDADE_CODIBGE, 0)
    sNomeMunic = String(100, 0)

    lErro = Comando_Executar(lComando, "SELECT DISTINCT Munic, NomeMunic FROM IBGECodArea WHERE UF = ? AND UPPER(NomeMunic) = ?", sMunic, sNomeMunic, iUFCodIBGE, UCase(sCidade))
    If lErro <> AD_SQL_SUCESSO Then gError 213411
    
    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 213412
        
    If lErro = AD_SQL_SUCESSO Then
        lIBGECidade = StrParaLong(CStr(iUFCodIBGE) & sMunic)
        sCidade = sNomeMunic
    End If
        
    Call Comando_Fechar(lComando)
    
    Cidade_ObtemIBGE = SUCESSO
    
    Exit Function
    
Erro_Cidade_ObtemIBGE:
    
    Cidade_ObtemIBGE = gErr
    
    Select Case gErr
            
        Case ERRO_SEM_MENSAGEM
        
        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB, gErr, Error$, 165191)

    End Select
    
    Call Comando_Fechar(lComando)
    
End Function

Private Function MovimentoCaixa_DataUltMovto_24_88(dtUltimoMovto As Date) As Long

Dim lErro As Long
Dim dtData1 As Date
Dim lComando As Long

On Error GoTo Erro_MovimentoCaixa_DataUltMovto_24_88

    dtUltimoMovto = DATA_NULA
    
    lComando = Comando_AbrirExt(glConexaoPAFECF)
    If lComando = 0 Then gError 210425

    lErro = Comando_Executar(lComando, "SELECT Data FROM MovimentoCaixa WHERE Msg LIKE '24_88%' ORDER BY Data DESC ", dtData1)
    If lErro <> AD_SQL_SUCESSO Then gError 210426
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210427
    
    If lErro = AD_SQL_SUCESSO Then dtUltimoMovto = dtData1
    
    Call Comando_Fechar(lComando)
    
    MovimentoCaixa_DataUltMovto_24_88 = SUCESSO
    
    Exit Function
    
Erro_MovimentoCaixa_DataUltMovto_24_88:

    MovimentoCaixa_DataUltMovto_24_88 = gErr

    Select Case gErr

        Case 210425
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)

        Case 210426 To 210430
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_MOVIMENTOCAIXA, gErr)

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB, gErr, Error$, 165191)

    End Select

    Call Comando_Fechar(lComando)

End Function

Public Function SaldoEmDinheiro_Trata_Carga() As Long

Dim lErro As Long, lErro1 As Long
Dim iIndice As Integer
Dim alComando(0 To 1) As Long
Dim lNumMovtoIni As Long, lNumMovtoFim As Long, lNumMovto As Long
Dim dSaldoEmDinheiro As Double, iSeq As Integer, lSequencial As Long

On Error GoTo Erro_SaldoEmDinheiro_Trata_Carga

    lErro = CF_ECF("SaldoEmDinheiro_Le", dSaldoEmDinheiro, True)
    If lErro <> SUCESSO And lErro <> ERRO_LEITURA_SEM_DADOS Then gError ERRO_SEM_MENSAGEM

    'Se ainda não inseriu o saldoemdinheiro processa desde o início
    If lErro = ERRO_LEITURA_SEM_DADOS Then
    
        lErro = CF_ECF("Caixa_Transacao_Abrir", lSequencial)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
        'Abre os  comandos
        For iIndice = LBound(alComando) To UBound(alComando)
            alComando(iIndice) = Comando_AbrirExt(glConexaoPAFECF)
            If alComando(iIndice) = 0 Then gError 216180
        Next
        
        'Insere o saldo em dinheiro zerado e reprocessa
        lErro = Comando_Executar(alComando(0), "INSERT INTO SaldoEmDinheiro (Valor,NumUltMovto,DataAlteracao,HoraAlteracao) VALUES (?,?,?,?)", _
                                               0, 0, Date, CDbl(Time))
        If lErro <> AD_SQL_SUCESSO Then gError 216181

        
        'Le o conjunto que representa o movimento em questão
        lErro = Comando_Executar(alComando(1), "SELECT NumMovto, Seq FROM MovimentoCaixa ORDER BY  NumMovto", lNumMovto, iSeq)
        If lErro <> AD_SQL_SUCESSO Then gError 216182
        
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 216183
               
        Do While lErro <> AD_SQL_SEM_DADOS
        
            If lNumMovtoIni = 0 Then lNumMovtoIni = lNumMovto
            lNumMovtoFim = lNumMovto
       
            lErro = Comando_BuscarProximo(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 216184
            
            'Se começou um novo movto ou foi o último registro
            If iSeq = 1 Or lErro = AD_SQL_SEM_DADOS Then
            
                lErro1 = SaldoEmDinheiro_Trata_Movto(lNumMovtoIni, lNumMovtoFim)
                If lErro1 <> SUCESSO Then gError ERRO_SEM_MENSAGEM
                
                lNumMovtoIni = 0
                lNumMovtoFim = 0
            End If
        
        Loop
        
        For iIndice = LBound(alComando) To UBound(alComando)
            Call Comando_Fechar(alComando(iIndice))
        Next
        
        lErro = CF_ECF("Caixa_Transacao_Fechar", lSequencial)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        
    End If
        
    SaldoEmDinheiro_Trata_Carga = SUCESSO
    
    Exit Function
    
Erro_SaldoEmDinheiro_Trata_Carga:

    SaldoEmDinheiro_Trata_Carga = gErr

    Select Case gErr

        Case 216180
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)

        Case 216181
            Call Rotina_ErroECF(vbOKOnly, ERRO_INSERT_SALDOEMDINHEIRO, gErr)

        Case 216182 To 216184
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_MOVIMENTOCAIXA, gErr)
            
        Case ERRO_SEM_MENSAGEM

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB, gErr, Error$, 216185)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Call CF_ECF("Caixa_Transacao_Rollback", glTransacaoPAFECF)
    
    Exit Function
    
End Function

Private Function SaldoEmDinheiro_Trata_Movto(ByVal lNumMovtoIni As Long, ByVal lNumMovtoFim As Long) As Long

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(1 To 10) As Long
Dim colRegistro As New Collection
Dim sReg As String, iTipoRegistro As Integer
Dim iPosEscape As Integer, iPosKeyControl As Integer, iPosKeyEnd As Integer
Dim objVenda As New ClassVenda
Dim objTransfCaixa As New ClassTransfCaixa
Dim objMovimentosCaixa As New ClassMovimentoCaixa
Dim dSaldoEmDinheiroAnt As Double, dValorEmDinheiro As Double, iTipoID As Integer, lID As Long, lNumMovtoRegEstornado As Long
Dim iPosInicio1 As Integer, sSeq1 As String, lCOO As Long, iECF As Integer, lORC As Long
Dim dValorAux As Double, lNumMovtoAux As Long
Dim objChequePara As New ClassChequePre

On Error GoTo Erro_SaldoEmDinheiro_Trata_Movto

   'Abre os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_AbrirExt(glConexaoPAFECF)
        If alComando(iIndice) = 0 Then gError 216186
    Next
    
    iTipoID = 0
    lID = 0
    lNumMovtoRegEstornado = 0
    dSaldoEmDinheiroAnt = 0
    dValorEmDinheiro = 0
    dValorAux = 0
    iPosInicio1 = 1
    
    sReg = String(STRING_MOVIMENTOCAIXA_MSG, 0)
    
    'Le o conjunto que representa o movimento em questão
    lErro = Comando_Executar(alComando(1), "SELECT Msg FROM MovimentoCaixa WHERE NumMovto BETWEEN ? AND ? ORDER BY  NumMovto", sReg, lNumMovtoIni, lNumMovtoFim)
    If lErro <> AD_SQL_SUCESSO Then gError 216187
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 216188
    
    iPosKeyControl = InStr(sReg, Chr(vbKeyControl))
    iTipoRegistro = CInt(left(sReg, iPosKeyControl - 1))
    
    Do While lErro <> AD_SQL_SEM_DADOS
    
        colRegistro.Add sReg
    
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 216189
    
    Loop
    
    lErro = CF_ECF("SaldoEmDinheiro_Le", dSaldoEmDinheiroAnt)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    Select Case iTipoRegistro

        Case TIPOREGISTROECF_VENDAS

            lErro = CF_ECF("Registro_ECF_Vendas", colRegistro, "", 0, objVenda)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
            
            iTipoID = objVenda.iTipo
            If objVenda.iTipo = OPTION_CF Then
                lID = objVenda.objCupomFiscal.lNumero
            Else
                lID = objVenda.objCupomFiscal.lNumOrcamento
            End If
                
            If objVenda.iTipo = OPTION_CF Or ((objVenda.iTipo = OPTION_DAV Or objVenda.iTipo = OPTION_PREVENDA) And objVenda.objCupomFiscal.iStatus = STATUS_BAIXADO) Then
                       
                For Each objMovimentosCaixa In objVenda.colMovimentosCaixa
                    Select Case objMovimentosCaixa.iTipo
                        Case MOVIMENTOCAIXA_TROCO_DINHEIRO
                            dValorEmDinheiro = dValorEmDinheiro - objMovimentosCaixa.dValor
                            
                        Case MOVIMENTOCAIXA_RECEB_DINHEIRO
                            dValorEmDinheiro = dValorEmDinheiro + objMovimentosCaixa.dValor
                    End Select
                Next
                
            End If
                
        Case TIPOREGISTROECF_EXCLUSAOCUPOM
            
            iPosEscape = InStr(sReg, Chr(vbKeyEscape))
            lCOO = CLng(Mid(sReg, iPosKeyControl + 1, iPosEscape - (iPosKeyControl + 1)))
            iPosKeyEnd = InStr(sReg, Chr(vbKeyEnd))
            iECF = CInt(Mid(sReg, iPosEscape + 1, iPosKeyEnd - (iPosEscape + 1)))
            lORC = 0
            
            If iECF = giCodECF Then
            
                'Acha a venda e lança no valor contrário caso ela não tenha sido estornada
                lErro = Comando_Executar(alComando(4), "SELECT NumMovto, ValorEmDinheiro FROM MovimentoCaixa WHERE TipoID = ? AND ID = ? AND NumMovto < ? AND NumMovtoEstorno = 0 AND Seq = 1 ORDER BY NumMovto DESC", lNumMovtoAux, dValorAux, OPTION_CF, lCOO, lNumMovtoIni)
                If lErro <> AD_SQL_SUCESSO Then gError 216190
                
                lErro = Comando_BuscarPrimeiro(alComando(4))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 216191
                
                If lErro <> AD_SQL_SEM_DADOS Then
                    dValorEmDinheiro = -dValorAux
                    lNumMovtoRegEstornado = lNumMovtoAux
                    lErro = Comando_Executar(alComando(5), "UPDATE MovimentoCaixa SET NumMovtoEstorno = ? WHERE NumMovto = ?", lNumMovtoIni, lNumMovtoAux)
                    If lErro <> AD_SQL_SUCESSO Then gError 216192
                End If
                
            End If
            
        Case TIPOREGISTROECF_EXCLUSAOORCAMENTO
            
            iPosEscape = InStr(sReg, Chr(vbKeyEscape))
            lORC = CLng(Mid(sReg, iPosKeyControl + 1, iPosEscape - (iPosKeyControl + 1)))
            iPosKeyEnd = InStr(sReg, Chr(vbKeyEnd))
            iECF = CInt(Mid(sReg, iPosEscape + 1, iPosKeyEnd - (iPosEscape + 1)))
            lCOO = 0
            
            If iECF = giCodECF Then
            
                'Acha a venda lança no valor contrário se  <> OPTION_CF
                lErro = Comando_Executar(alComando(6), "SELECT NumMovto, ValorEmDinheiro FROM MovimentoCaixa WHERE TipoID IN (2,3) AND ID = ? AND NumMovto < ? AND NumMovtoEstorno = 0 AND Seq = 1 ORDER BY NumMovto ASC", lNumMovtoAux, dValorAux, lORC, lNumMovtoIni)
                If lErro <> AD_SQL_SUCESSO Then gError 216193
                
                lErro = Comando_BuscarPrimeiro(alComando(6))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 216194
                
                If lErro <> AD_SQL_SEM_DADOS Then
                    dValorEmDinheiro = -dValorAux
                    lNumMovtoRegEstornado = lNumMovtoAux
                    lErro = Comando_Executar(alComando(7), "UPDATE MovimentoCaixa SET NumMovtoEstorno = ? WHERE NumMovto = ?", lNumMovtoIni, lNumMovtoAux)
                    If lErro <> AD_SQL_SUCESSO Then gError 216195
                End If
                
            End If
            
        Case TIPOREGISTROECF_MOVIMENTOCAIXA_DINHEIRO
                   
            lErro = CF_ECF("Registro_ECF_MovcxDin", colRegistro, "", 0, objMovimentosCaixa)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
               
            If objMovimentosCaixa.iTipo = MOVIMENTOCAIXA_SANGRIA_DINHEIRO Or objMovimentosCaixa.iTipo = MOVIMENTOCAIXA_EXCLUSAO_SUPRIMENTO_DINHEIRO Then
                dValorEmDinheiro = -objMovimentosCaixa.dValor
            ElseIf objMovimentosCaixa.iTipo = MOVIMENTOCAIXA_SUPRIMENTO_DINHEIRO Or objMovimentosCaixa.iTipo = MOVIMENTOCAIXA_EXCLUSAO_SANGRIA_DINHEIRO Then
                dValorEmDinheiro = objMovimentosCaixa.dValor
            End If
            
        Case TIPOREGISTROECF_TRANSFCAIXA_INCLUSAO
        
            iTipoID = 1000
            lID = lNumMovtoIni
        
            lErro = CF_ECF("Registro_ECF_TransfCaixa", colRegistro, "", objTransfCaixa, objChequePara)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
            
            If objTransfCaixa.objMovCaixaDe.iTipo = MOVIMENTOCAIXA_SAIDA_TRANSF_DINHEIRO Then
                dValorEmDinheiro = -objTransfCaixa.objMovCaixaDe.dValor
            End If
            If objTransfCaixa.objMovCaixaPara.iTipo = MOVIMENTOCAIXA_ENTRADA_TRANSF_DINHEIRO Then
                dValorEmDinheiro = objTransfCaixa.objMovCaixaPara.dValor
            End If

        Case TIPOREGISTROECF_TRANSFCAIXA_EXCLUSAO
        
            lErro = CF_ECF("Registro_ECF_TransfCaixa_Exclusao", colRegistro, "", objTransfCaixa)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

            'Acha a transferência e lança no valor contrário
            lErro = Comando_Executar(alComando(8), "SELECT NumMovto, ValorEmDinheiro FROM MovimentoCaixa WHERE TipoID =1000 AND ID = ? AND NumMovto < ? AND NumMovtoEstorno = 0 AND Seq = 1 ORDER BY NumMovto ASC", lNumMovtoAux, dValorAux, objTransfCaixa.objMovCaixaDe.lTransferencia, lNumMovtoIni)
            If lErro <> AD_SQL_SUCESSO Then gError 216193
            
            lErro = Comando_BuscarPrimeiro(alComando(8))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 216194
            
            If lErro <> AD_SQL_SEM_DADOS Then
                dValorEmDinheiro = -dValorAux
                lNumMovtoRegEstornado = lNumMovtoAux
                lErro = Comando_Executar(alComando(9), "UPDATE MovimentoCaixa SET NumMovtoEstorno = ? WHERE NumMovto = ?", lNumMovtoIni, lNumMovtoAux)
                If lErro <> AD_SQL_SUCESSO Then gError 216195
            End If

            
    End Select
    
    lErro = Comando_Executar(alComando(2), "UPDATE MovimentoCaixa SET SaldoEmDinheiroAnt = ?, ValorEmDinheiro = ?, TipoID = ?, ID = ?, NumMovtoRegEstornado = ? WHERE NumMovto = ?", dSaldoEmDinheiroAnt, dValorEmDinheiro, iTipoID, lID, lNumMovtoRegEstornado, lNumMovtoIni)
    If lErro <> AD_SQL_SUCESSO Then gError 216196
    
    lErro = Comando_Executar(alComando(3), "UPDATE SaldoEmDinheiro SET Valor = ?, NumUltMovto = ?, DataAlteracao = ?, HoraAlteracao = ? ", dSaldoEmDinheiroAnt + dValorEmDinheiro, lNumMovtoIni, Date, CDbl(Time))
    If lErro <> AD_SQL_SUCESSO Then gError 216197
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    SaldoEmDinheiro_Trata_Movto = SUCESSO
    
    Exit Function
    
Erro_SaldoEmDinheiro_Trata_Movto:

    SaldoEmDinheiro_Trata_Movto = gErr

    Select Case gErr

        Case 216186
            Call Rotina_ErroECF(vbOKOnly, ERRO_ABERTURA_COMANDO, gErr)

        Case 216187 To 216196
            Call Rotina_ErroECF(vbOKOnly, ERRO_LEITURA_MOVIMENTOCAIXA, gErr)
            
        Case 216197
            Call Rotina_ErroECF(vbOKOnly, ERRO_INSERT_SALDOEMDINHEIRO, gErr)
            
        Case ERRO_SEM_MENSAGEM

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB, gErr, Error$, 216198)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Public Function ODBC_Testa_Acesso_Orc() As Long
    ODBC_Testa_Acesso_Orc = ODBC_Testa_Acesso("DSN=SGEOrcPAF;UID=sa;PWD=SAPWD;")
End Function

Private Function ODBC_Testa_Acesso(ByVal sDSN As String) As Long

Dim lErro As Long
Dim rc As Integer
Dim henv As Long, hdbc As Long, cb_conn_out As Integer
Dim ach_conn_out As String
Dim ssqlstate As String, iNative As Integer, sMsg As String, BufferLength As Integer, TextLength As Integer
Dim sInfo As String

On Error GoTo Erro_ODBC_Testa_Acesso

    rc = SQLAllocEnv(henv)
    If (rc <> 0) Then gError ERRO_SEM_MENSAGEM

    rc = SQLAllocConnect(henv, hdbc)
    If (rc <> 0) Then gError ERRO_SEM_MENSAGEM
    
    ach_conn_out = String(2000, 0)
    rc = SQLDriverConnect(hdbc, 0, sDSN, Len(sDSN), ach_conn_out, 2000, cb_conn_out, SQL_DRIVER_NOPROMPT)
    If (rc <> 0 And rc <> 1) Then
        BufferLength = 20000
        sMsg = String(BufferLength, 0)
        ssqlstate = String(200, 0)
        rc = SQLError(henv, hdbc, 0, ssqlstate, iNative, sMsg, BufferLength, TextLength)
        sMsg = Replace(left(sMsg, TextLength), Chr(0), "")
        
        'BufferLength = 129
        'sInfo = String(BufferLength, 0)
        'rc = SQLGetInfo(hdbc, SQL_SERVER_NAME, sInfo, BufferLength, TextLength)
        'sInfo = Replace(left(sInfo, TextLength), Chr(0), "")
        
        gError 216221
    End If
    
    Call SQLDisconnect(hdbc)
    Call SQLFreeConnect(hdbc)
    Call SQLFreeEnv(henv)
    
    ODBC_Testa_Acesso = SUCESSO
    
    Exit Function
    
Erro_ODBC_Testa_Acesso:

    ODBC_Testa_Acesso = gErr

    Select Case gErr

        Case ERRO_SEM_MENSAGEM
        
        Case 216221
            'Call Rotina_ErroECF(vbOKOnly, "Ocorreu um erro no acesso ao servidor de orçamento '" & sInfo & "'. Verifique se ele está ligado, na rede e se o acesso pelo windows explorer necessita da recolocação da senha." & vbNewLine & vbNewLine & sMsg, gErr, Error$)
            Call Rotina_ErroECF(vbOKOnly, "Ocorreu um erro no acesso ao servidor de orçamento. Verifique se ele está ligado, na rede e se o acesso pelo windows explorer necessita da recolocação da senha." & vbNewLine & sMsg, gErr, Error$)

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB, gErr, Error$, 216222)

    End Select
    
    If (hdbc <> 0) Then

        Call SQLDisconnect(hdbc)
        Call SQLFreeConnect(hdbc)
        hdbc = 0

    End If

    If (henv <> 0) Then

        Call SQLFreeEnv(henv)
        henv = 0

    End If
    
    Exit Function
    
End Function

Private Function Rede_Testa_Acesso() As Long

Dim lErro As Long
Dim sRetorno As String
Dim lTamanho As Long, iRet As Integer
Dim sDirDadosECFSemFTP As String, sDirDadosCCSemFTP As String, sDirXMLSemFTP As String, sDir As String

On Error GoTo Erro_Rede_Testa_Acesso

    lTamanho = 255
    sRetorno = String(lTamanho, 0)
    iRet = GetPrivateProfileString(APLICACAO_DADOS, "DirDadosECFSemFTP", CONSTANTE_ERRO, sRetorno, lTamanho, NOME_ARQUIVO_CAIXA)
    sDirDadosECFSemFTP = left(sRetorno, iRet)

    lTamanho = 255
    sRetorno = String(lTamanho, 0)
    iRet = GetPrivateProfileString(APLICACAO_DADOS, "DirDadosCCSemFTP", CONSTANTE_ERRO, sRetorno, lTamanho, NOME_ARQUIVO_CAIXA)
    sDirDadosCCSemFTP = left(sRetorno, iRet)

    lTamanho = 255
    sRetorno = String(lTamanho, 0)
    iRet = GetPrivateProfileString(APLICACAO_DADOS, "DirXMLSemFTP", CONSTANTE_ERRO, sRetorno, lTamanho, NOME_ARQUIVO_CAIXA)
    sDirXMLSemFTP = left(sRetorno, iRet)

    sDir = sDirDadosECFSemFTP
    If Len(Trim(sDir)) <> 0 Then
        If Len(Trim(Dir(sDir, vbDirectory))) = 0 Then gError 216223
    End If
    
    sDir = sDirDadosCCSemFTP
    If Len(Trim(sDir)) <> 0 Then
        If Len(Trim(Dir(sDir, vbDirectory))) = 0 Then gError 216224
    End If
    
    sDir = sDirXMLSemFTP
    If Len(Trim(sDir)) <> 0 Then
        If Len(Trim(Dir(sDir, vbDirectory))) = 0 Then gError 216225
    End If
    
    Rede_Testa_Acesso = SUCESSO
    
    Exit Function
    
Erro_Rede_Testa_Acesso:

    Rede_Testa_Acesso = gErr

    Select Case gErr

        Case 216223, 216224, 216225
            Call Rotina_ErroECF(vbOKOnly, "Ocorreu um erro no acesso a pasta '" & sDir & "'. Verifique se o servidor está ligado, na rede e se o acesso pelo windows explorer necessita da recolocação da senha.", gErr, Error$)

        Case Else
            Call Rotina_ErroECF(vbOKOnly, ERRO_FORNECIDO_PELO_VB, gErr, Error$, 216226)

    End Select
    
    Exit Function
    
End Function
