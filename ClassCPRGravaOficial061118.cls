VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
  Persistable = 0  'NotPersistable
  DataBindingBehavior = 0  'vbNone
  DataSourceBehavior  = 0  'vbNone
  MTSTransactionMode  = 0  'NotAnMTSObject
END
Attribute VB_Name = "ClassCPRGrava"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Option Explicit

'??? muitas funcoes auxiliares a baixa de parc pag estao com muito pouco conteudo
'??? ver se precisa colocar em evidencia codigo comum a gravacoes de movtos cta corrente, titulos, parcelas,...
'??? poderia encurtar funcoes usando alComando em vez de varios lComando individuais

Type typeImportForn
    lCodigo As Long
    sRazaoSocial As String
    sNomeReduzido As String
    iTipo As Integer
    sObservacao As String
    iCondicaoPagto As Integer
    dDesconto As Double
    iProxCodFilial As Integer
    iFilialCod As Integer
    sFilialNome As String
    sFilialCGC As String
    sFilialInscEstadual As String
    sFilialInscMunicipal As String
    sFilialContaContabil As String
    iFilialBanco As Integer
    sFilialAgencia As String
    sFilialContaCorrente As String
    sFilialObservacao1 As String
    iFilialTipoFrete As Integer
    sEndereco As String
    sBairro As String
    sCidade As String
    sSiglaEstado As String
    iCodigoPais As Integer
    sCEP As String
    sTelefone1 As String
    sTelefone2 As String
    sEmail As String
    sFax As String
    sContato As String
End Type

Private Declare Function Comando_PrepararPosInt Lib "ADSQLMN.DLL" Alias "AD_Comando_PrepararPos" (ByVal lComando As Long, ByVal lpSQLStmt As String, ByVal lSelect As Long) As Long
Private Declare Function Comando_BindVarInt Lib "ADSQLMN.DLL" Alias "AD_Comando_BindVar" (ByVal lComando As Long, lpVar As Variant) As Long
Private Declare Function Comando_ExecutarInt Lib "ADSQLMN.DLL" Alias "AD_Comando_Executar" (ByVal lComando As Long) As Long

Public Function BorderoDescChq_Exclui(ByVal objBorderoDescChq As ClassBorderoDescChq) As Long
'Função que recebe um objBorderoDescChq preenchido e exclui os lançamentos referentes a ele
'afeta a tabela de BorderoDescChq (exclui 1 registro)
'afeta a tabela ChequeBordero (exclui registros que possuem numbordero=objBorderoDescChq.lnumBordero
'afeta a tabela MovimentosContaCorrente(exclui o registro que se refere ao crédito do valor na conta corrente do bordero e o que se refere ao débito na conta corrente de chequepre
'efetua contabilização se o módulo estiver ativo
 
Dim alComando(0 To 1) As Long
Dim lTransacao As Long
Dim iIndice As Integer
Dim lErro As Long
Dim dValor As Double
Dim iContaCorrente2 As Integer
Dim iContaCorrente1 As Integer
Dim dtDataMovimento As Date
Dim lNumMovtoContaCorrente As Long
Dim lNumIntCheque As Long
Dim objContabil As New ClassContabil
Dim dValorChequeLojaEsp As Double
Dim dValorChequeLojaNEsp As Double
Dim colBaixasRec As New Collection
Dim colBaixasParcRec As New Collection
Dim objBaixaRec As ClassBaixaReceber
Dim objBaixaParcRec As ClassBaixaParcRec

On Error GoTo Erro_BorderoDescChq_Exclui
 
    'abre a transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 109307
    
    'abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 109308
    Next
    
    'selecionar o registro BorderoDescChq
    lErro = Comando_ExecutarPos(alComando(0), "SELECT ContaCorrente " & _
                                              "FROM BorderoDescChq " & _
                                               "WHERE FilialEmpresa = ? " & _
                                              "AND NumBordero = ?", 0, _
                                              iContaCorrente2, _
                                              objBorderoDescChq.iFilialEmpresa, _
                                              objBorderoDescChq.lNumBordero)
    If lErro <> AD_SQL_SUCESSO Then gError 109310
    
    'busca o primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109311
    
    'se não encontrar-> erro
    If lErro = AD_SQL_SEM_DADOS Then gError 109312
    
    'Loca o registro
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 109313
    
    'exclui o registro de borderodeschq
    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM BorderoDescChq", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 109314
    
    'Le as Baixas a receber vinculadas ao bordero para depois poder efetuar a exclusão da contabilidade
    lErro = BorderoDescChq_Le_Baixas(objBorderoDescChq, colBaixasRec, colBaixasParcRec)
    If lErro <> SUCESSO Then gError 182006
    
    'exclui registro em ChequeBordero e atualiza a localizacao dos cheques
    lErro = ChequeBordero_Exclui_BorderoDescChq(objBorderoDescChq, dValorChequeLojaEsp, dValorChequeLojaNEsp)
    If lErro <> SUCESSO Then gError 126120
    
    'passou a excluir as baixas do borderô como um todo e não cheque a cheque, até porque não dá
    'para fazer uma correlação 100% entre ChequePre e BaixasParcRec
    lErro = BaixaRecCancelar_Efetua_BordDescChq(objBorderoDescChq, "Exclusão do Bordero Desconto " & CStr(objBorderoDescChq.lNumBordero))
    If lErro <> SUCESSO Then gError 126120
    
    'exclui os movimentos de conta corrente referentes ao bordero de desconto de cheque passado como parametro
    lErro = MovCCI_Exclui_BorderoDescChq(objBorderoDescChq)
    If lErro <> AD_SQL_SUCESSO Then gError 126186
    
    'exclui os movimentos de caixa correspondentes a saida por bordero de desconto dos cheques do loja
    lErro = Movcx_Exclui_BorderoDescChq(objBorderoDescChq, dValorChequeLojaEsp, dValorChequeLojaNEsp)
    If lErro <> SUCESSO Then gError 126198
    
    'se o módulo de contabilidade estiver ativo
    If gcolModulo.Ativo(MODULO_CONTABILIDADE) = MODULO_ATIVO Then
'        lErro = objContabil.Contabil_Inicializa_Contabilidade1(Me, MODULO_CONTASARECEBER, "BorderoDescChq")
'        lErro = objContabil.Contabil_Inicializa_Contabilidade1(Me, MODULO_CONTASARECEBER, "BorderoDescChequeRes")
'        If lErro <> SUCESSO Then gError 109331
'
'        lErro = objContabil.Contabil_Exclui(objBorderoDescChq.lNumBordero, CONTABIL_EXCLUI_EFETIVO)
'        If lErro <> SUCESSO Then gError 109332

        For Each objBaixaRec In colBaixasRec
        
            Set objContabil = New ClassContabil
    
            'Exclui a contabilização
            lErro = objContabil.Contabil_Inicializa_Contabilidade1(Me, MODULO_CONTASARECEBER, "BorderoDescChequeRes")
            If lErro <> SUCESSO Then gError 109331
    
            lErro = objContabil.Contabil_Exclui(objBaixaRec.lNumIntBaixa, CONTABIL_EXCLUI_EFETIVO, , MODULO_BATCHCONTASARECEBER)
            If lErro <> SUCESSO Then gError 109332
            
        Next
        
        For Each objBaixaParcRec In colBaixasParcRec
        
            Set objContabil = New ClassContabil
    
            'Exclui a contabilização
            lErro = objContabil.Contabil_Inicializa_Contabilidade1(Me, MODULO_CONTASARECEBER, "BorderoDescChequeFilDep")
            If lErro <> SUCESSO Then gError 109331
    
            lErro = objContabil.Contabil_Exclui(objBaixaParcRec.lNumIntDoc, CONTABIL_EXCLUI_EFETIVO)
            If lErro <> SUCESSO Then gError 109332
            
            Set objContabil = New ClassContabil
    
            'Exclui a contabilização
            lErro = objContabil.Contabil_Inicializa_Contabilidade1(Me, MODULO_CONTASARECEBER, "BorderoDescChequeFilNaoDep")
            If lErro <> SUCESSO Then gError 109331
    
            lErro = objContabil.Contabil_Exclui(objBaixaParcRec.lNumIntDoc, CONTABIL_EXCLUI_EFETIVO)
            If lErro <> SUCESSO Then gError 109332
            
            Set objContabil = New ClassContabil
    
            'Exclui a contabilização
            lErro = objContabil.Contabil_Inicializa_Contabilidade1(Me, MODULO_CONTASARECEBER, "BorderoDescCheque")
            If lErro <> SUCESSO Then gError 109331
    
            lErro = objContabil.Contabil_Exclui(objBaixaParcRec.lNumIntDoc, CONTABIL_EXCLUI_EFETIVO)
            If lErro <> SUCESSO Then gError 109332
            
        Next
        
    End If
    
    'confirma a transação
    lErro = Transacao_Commit
    If lErro <> AD_SQL_SUCESSO Then gError 109309
    
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
 
    BorderoDescChq_Exclui = SUCESSO
    
    Exit Function
    
Erro_BorderoDescChq_Exclui:
    
    BorderoDescChq_Exclui = gErr
    
    Select Case gErr
    
        Case 109307
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
        
        Case 109308
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 109309
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case 109310, 109311
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BORDERODESCCHQ", gErr)
            
        Case 109312
            Call Rotina_Erro(vbOKOnly, "ERRO_BORDERODESCCHQ_NAO_ENCONTRADO", gErr, objBorderoDescChq.iFilialEmpresa, objBorderoDescChq.lNumBordero)
            
        Case 109313
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_BORDERODESCCHQ", gErr, objBorderoDescChq.iFilialEmpresa, objBorderoDescChq.lNumBordero)
            
        Case 109314
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_BORDERODESCCHQ", gErr, objBorderoDescChq.iFilialEmpresa, objBorderoDescChq.lNumBordero)
        
        Case 109331, 109332, 126119, 126120, 126186, 126198
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 147905)
    
    End Select
    
    'cancela a transação
    Call Transacao_Rollback
    
    'fecha os comandos
    For iIndice = LBound(alComando) To LBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function
 
End Function

Private Function MovCCI_Exclui_BorderoDescChq(objBorderoDescChq As ClassBorderoDescChq, Optional ByVal iTipoBordero As Integer = BORDERO_DESCONTO) As Long
'exclui os movimentos de conta corrente referentes ao bordero de desconto de cheque passado como parametro

Dim alComando(1 To 5) As Long
Dim iIndice As Integer
Dim lErro As Long
Dim dValor As Double
Dim iContaCorrente2 As Integer
Dim iContaCorrente1 As Integer
Dim dtDataMovimento As Date
Dim lNumMovtoContaCorrente As Long
Dim lNumIntCheque As Long
Dim iMovCCI1 As Integer
Dim iMovCCI2 As Integer
Dim iTipoMeioPagto1 As Integer

On Error GoTo Erro_MovCCI_Exclui_BorderoDescChq

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 126187
    Next
    
    If iTipoBordero = BORDERO_DESCONTO Then
        iMovCCI1 = MOVCCI_SAQ_DESCONTO_CHEQUE
        iMovCCI2 = MOVCCI_DEP_DESCONTO_CHEQUE
        iTipoMeioPagto1 = BORDERO
    Else
        iMovCCI1 = MOVCCI_BORDERO_CHEQUE_PRE_SAQ
        iMovCCI2 = MOVCCI_BORDERO_CHEQUE_PRE
        iTipoMeioPagto1 = Cheque
    End If

    'descubro o código da conta corrente de cheques pre da filial
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Codigo " & _
                                              "FROM ContasCorrentesInternas " & _
                                              "WHERE FilialEmpresa = ? " & _
                                              "AND ChequePre = ?", 0, _
                                              iContaCorrente1, _
                                              objBorderoDescChq.iFilialEmpresa, _
                                              CONTA_CHEQUE_PRE)
    If lErro <> AD_SQL_SUCESSO Then gError 109315
    
    'busca o primeiro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109316
    
    'se não encontrar ->erro
    If lErro = AD_SQL_SEM_DADOS Then gError 109317
    
    'acessa o registro em conta corrente que tinha o débito dos cheques
    lErro = Comando_ExecutarPos(alComando(2), "SELECT NumMovto, DataMovimento, Valor " & _
                                              "FROM MovimentosContaCorrente " & _
                                              "WHERE CodConta = ? " & _
                                              "AND Tipo = ? " & _
                                              "AND NumRefInterna = ? " & _
                                              "AND TipoMeioPagto = ? ", 0, _
                                              lNumMovtoContaCorrente, dtDataMovimento, dValor, _
                                              iContaCorrente1, _
                                              iMovCCI1, _
                                              objBorderoDescChq.lNumBordero, _
                                              iTipoMeioPagto1)
    If lErro <> AD_SQL_SUCESSO Then gError 109318
    
    'busca o primeiro
    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109319
    
    'se não encontrar-> erro
    If lErro = AD_SQL_SEM_DADOS Then gError 109320
    
    'loca o registro
    lErro = Comando_LockExclusive(alComando(2))
    If lErro <> AD_SQL_SUCESSO Then gError 109321
    
    'exclui o registro
    lErro = Comando_ExecutarPos(alComando(3), "DELETE FROM MovimentosContaCorrente", alComando(2))
    If lErro <> AD_SQL_SUCESSO Then gError 109323
    
    'coloquei -dValor pq é um saque que está sendo excluido
    
    'abate do consolidado de contas correntes do dia
    lErro = CF("CCIMovDia_Exclui", iContaCorrente1, dtDataMovimento, -dValor)
    If lErro <> SUCESSO Then gError 109324
    
    'abate do consolidado de contas correntes do mês
    lErro = CF("CCIMov_Exclui", iContaCorrente1, Year(dtDataMovimento), Month(dtDataMovimento), -dValor)
    If lErro <> SUCESSO Then gError 109325
    
    iContaCorrente2 = objBorderoDescChq.iContaCorrente
    
    'acessa o registro em conta corrente que tinha o débito dos cheques
    lErro = Comando_ExecutarPos(alComando(4), "SELECT NumMovto, DataMovimento, Valor " & _
                                              "FROM MovimentosContaCorrente " & _
                                              "WHERE CodConta = ? " & _
                                              "AND Tipo = ? " & _
                                              "AND NumRefInterna = ? " & _
                                              "AND TipoMeioPagto = ? ", 0, _
                                              lNumMovtoContaCorrente, dtDataMovimento, dValor, _
                                              iContaCorrente2, _
                                              iMovCCI2, _
                                              objBorderoDescChq.lNumBordero, _
                                              BORDERO)
    If lErro <> AD_SQL_SUCESSO Then gError 126114
    
    'busca o primeiro
    lErro = Comando_BuscarPrimeiro(alComando(4))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126115
    
    'se não encontrar-> erro
    If lErro <> AD_SQL_SUCESSO Then gError 126116
    
    'loca o registro
    lErro = Comando_LockExclusive(alComando(4))
    If lErro <> AD_SQL_SUCESSO Then gError 126117
    
    'exclui o registro
    lErro = Comando_ExecutarPos(alComando(5), "DELETE FROM MovimentosContaCorrente", alComando(4))
    If lErro <> AD_SQL_SUCESSO Then gError 126118
    
    'abate do consolidado de contas correntes do dia
    lErro = CF("CCIMovDia_Exclui", iContaCorrente2, dtDataMovimento, dValor)
    If lErro <> SUCESSO Then gError 126119
    
    'abate do consolidado de contas correntes do mês
    lErro = CF("CCIMov_Exclui", iContaCorrente2, Year(dtDataMovimento), Month(dtDataMovimento), dValor)
    If lErro <> SUCESSO Then gError 126120

    MovCCI_Exclui_BorderoDescChq = SUCESSO
    
    Exit Function
    
Erro_MovCCI_Exclui_BorderoDescChq:
    
    MovCCI_Exclui_BorderoDescChq = gErr
    
    Select Case gErr
    
        Case 109310, 109311
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BORDERODESCCHQ", gErr)
            
        Case 109315, 109316
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONTASCORRENTESINTERNAS", gErr)
            
        Case 109317
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTACORRENTE_CHEQUEPRE_NAO_ENCONTRADA", gErr, objBorderoDescChq.iFilialEmpresa)
        
        Case 109318, 109319, 126114, 126115
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCONTACORRENTE", gErr)
            
        Case 109320
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVCCI_NAO_ENCONTRADO", gErr, iContaCorrente1)
            
        Case 109321
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_MOVIMENTOSCONTACORRENTE", gErr, iContaCorrente1, objBorderoDescChq.lNumBordero)
            
        Case 109323
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_MOVCCI", gErr, iContaCorrente1, objBorderoDescChq.lNumBordero)
            
        Case 109324, 109325, 126119, 126120
        
        Case 126116
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVCCI_NAO_ENCONTRADO", gErr, iContaCorrente2)
        
        Case 126117
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_MOVIMENTOSCONTACORRENTE", gErr, iContaCorrente2, objBorderoDescChq.lNumBordero)
        
        Case 126118
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_MOVCCI", gErr, iContaCorrente2, objBorderoDescChq.lNumBordero)
            
        Case 126187
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 147906)
    
    End Select
    
    'fecha os comandos
    For iIndice = LBound(alComando) To LBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Private Function ChequeBordero_Exclui_BorderoDescChq(objBorderoDescChq As ClassBorderoDescChq, dValorChequeLojaEsp As Double, dValorChequeLojaNEsp As Double, Optional ByVal iTipoBordero As Integer = BORDERO_DESCONTO) As Long
'exclui registro de ChequeBordero e atualiza a localizacao dos cheques.
'cancela a baixa de titulo se o cheque tiver um titulo associado

Dim lErro As Long
Dim lNumIntCheque As Long
Dim objChequePre As New ClassChequePre
Dim alComando(1 To 2) As Long
Dim iIndice As Integer
Dim lNumIntDoc As Long

On Error GoTo Erro_ChequeBordero_Exclui_BorderoDescChq

    'abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 126184
    Next

    'seleciona os registros da tabela ChequeBordero (tabela "cruzamento" entre chequepre e bordero)
    lErro = Comando_ExecutarPos(alComando(1), "SELECT NumIntCheque " & _
                                              "FROM ChequeBordero " & _
                                              "WHERE NumBordero = ? " & _
                                              "AND FilialEmpresa = ? " & _
                                              "AND TipoBordero = ?", 0, _
                                              lNumIntCheque, _
                                              objBorderoDescChq.lNumBordero, _
                                              objBorderoDescChq.iFilialEmpresa, _
                                              iTipoBordero)
    If lErro <> AD_SQL_SUCESSO Then gError 109326
    
    'busca o primeiro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109327
    
    'se não encontrar-> erro
    If lErro = AD_SQL_SEM_DADOS Then gError 109328
    
    'enquanto houver registros
    Do While lErro = AD_SQL_SUCESSO
        
        'loca os registros
        lErro = Comando_LockExclusive(alComando(1))
        If lErro <> AD_SQL_SUCESSO Then gError 109329
        
        'exclui esses registros
        lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM ChequeBordero", alComando(1))
        If lErro <> AD_SQL_SUCESSO Then gError 109330
        
        objChequePre.lNumIntCheque = lNumIntCheque
        objChequePre.iFilialEmpresa = objBorderoDescChq.iFilialEmpresa
    
        'atualiza a localizacao do cheque passado como parametro
        lErro = ChequePre_Altera_Localizacao(objChequePre, CHEQUEPRE_LOCALIZACAO_BACKOFFICE)
        If lErro <> SUCESSO Then gError 126185
    
        If objChequePre.lSequencialLoja <> 0 Then
        
            If objChequePre.iNaoEspecificado = CHEQUE_ESPECIFICADO Then
                dValorChequeLojaEsp = dValorChequeLojaEsp + objChequePre.dValor
            Else
               dValorChequeLojaNEsp = dValorChequeLojaNEsp + objChequePre.dValor
            End If
            
        End If
        
        'se nao for cheque oriundo do loja ==> o cheque tem um titulo associado
        If objChequePre.lSequencialLoja = 0 Then
            
            objChequePre.lNumBordero = objBorderoDescChq.lNumBordero
            
            If iTipoBordero = BORDERO_DESCONTO Then
            
                'recolhe os dados e desfaz as baixas das parcelas associadas ao cheque
                'lErro = CF("BaixaRecCancelar_Efetua", lNumIntDoc, objChequePre, MOVCCI_DEP_DESCONTO_CHEQUE, EXCLUSAO_BORDDESCCHQ_HISTORICO_CANCELAMENTO)
            
            Else
            
                'recolhe os dados e desfaz as baixas das parcelas associadas ao cheque
                lErro = CF("BaixaRecCancelar_Efetua", lNumIntDoc, objChequePre, MOVCCI_BORDERO_CHEQUE_PRE, EXCLUSAO_BORDCHQPRE_HISTORICO_CANCELAMENTO)
            
            End If
            
            If lErro <> SUCESSO Then gError 126254
            
        End If
        
        'busca o próximo
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109337
    
    Loop
 
    'fecha os comandos
    For iIndice = LBound(alComando) To LBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
 
    ChequeBordero_Exclui_BorderoDescChq = SUCESSO
 
    Exit Function
 
Erro_ChequeBordero_Exclui_BorderoDescChq:

    ChequeBordero_Exclui_BorderoDescChq = gErr
    
    Select Case gErr
    
        Case 109326, 109327, 109337
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUEBORDERO", gErr)
            
        Case 109328
            Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEBORDERO_NAO_ENCONTRADO", gErr, objBorderoDescChq.iFilialEmpresa, objBorderoDescChq.lNumBordero)
            
        Case 109329
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CHEQUEBORDERO", gErr, objBorderoDescChq.iFilialEmpresa, objBorderoDescChq.lNumBordero)
            
        Case 109330
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CHEQUEBORDERO", gErr, objBorderoDescChq.iFilialEmpresa, objBorderoDescChq.lNumBordero)
            
        Case 126184
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 126185, 126254
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 147907)
    
    End Select
    
    'fecha os comandos
    For iIndice = LBound(alComando) To LBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function
 
End Function
 
Public Function BorderoDescChq_Automatico_Trans(lNumBordero As Long) As Long
'função que gera um número automático para o número do borderô.
'DEVE SER CHAMADA DENTRO DE TRANSAÇÃO

Dim lErro As Long

On Error GoTo Erro_BorderoDescChq_Automatico_Trans

    lErro = CF("Config_ObterAutomatico_EmTrans", "CPRConfig", "NUM_PROX_BORDERODESCCHQ", "BorderoDescChq", "NumBordero", lNumBordero)
    If lErro <> SUCESSO Then gError 109283

    BorderoDescChq_Automatico_Trans = SUCESSO
    
    Exit Function
    
Erro_BorderoDescChq_Automatico_Trans:
    
    BorderoDescChq_Automatico_Trans = gErr
    
    Select Case gErr
    
        Case 109283
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 147908)
    
    End Select
    
    Exit Function

End Function

Public Function BorderoDescChq_Atualizar(ByVal objBorderoDescChq As ClassBorderoDescChq) As Long

Dim lErro As Long
Dim lTransacao As Long
Dim lNumBordero As Long
Dim objContabAutomatica As New ClassContabAutomatica
Dim vParams As Variant
Dim dValorChequeLojaEsp As Double 'guarda o valor total dos cheques oriundos do loja
Dim dValorChequeLojaNEsp As Double 'guarda o valor total dos cheques oriundos do loja
Dim objMovContaCorrente As New ClassMovContaCorrente
Dim colBaixaParcRec As New colBaixaParcRec
Dim colInfoParcRec As New Collection
Dim iIndice As Integer

On Error GoTo Erro_BorderoDescChq_Atualizar

    'abre a transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 109241
    
    'gera um número automático para o borderô
    lErro = CF("BorderoDescChq_Automatico_Trans", lNumBordero)
    If lErro <> SUCESSO Then gError 109243
    
    'preenche o número do borderô
    objBorderoDescChq.lNumBordero = lNumBordero
    
    If (gcolModulo.Ativo(MODULO_CONTABILIDADE) = MODULO_ATIVO) Then
        'inicializa a contabilização
        lErro = objContabAutomatica.Inicializa_Contab(objBorderoDescChq, MODULO_CONTASARECEBER, "BCR", objBorderoDescChq.dtDataContabil, DATA_NULA)
        If lErro <> SUCESSO Then gError 109246
    End If
    
    
    'insere o bordero na tabela BorderoDescChq
    lErro = CF("BorderoDescChq_Inserir", objBorderoDescChq)
    If lErro <> SUCESSO Then gError 109244
    
    For iIndice = objBorderoDescChq.colInfoParcRec.Count To 1 Step -1
        objBorderoDescChq.colInfoParcRec.Remove iIndice
    Next
    
    'chama a função que faz a atualização do status dos cheques-pré
    lErro = CF("ChequePre_Atualiza_NumBordero", objBorderoDescChq, objBorderoDescChq.objTelaAtualizacao, dValorChequeLojaEsp, dValorChequeLojaNEsp, colBaixaParcRec, objBorderoDescChq.colInfoParcRec)
    If lErro <> SUCESSO Then gError 109280
    
    'atualiza a contacorrente interna
    lErro = CF("BorderoDescChq_Atualizar_CCI", objBorderoDescChq, objMovContaCorrente)
    If lErro <> SUCESSO Then gError 109245
    
    'prepara e insere a baixa rec e as baixasparcrec referentes aos cheques associados a titulos
    lErro = BorderoDescChq_Atualizar_BaixasRec(objBorderoDescChq, objMovContaCorrente, colBaixaParcRec, objContabAutomatica)
    If lErro <> SUCESSO Then gError 126252
    
    'prepara e insere o movto de caixa central correspondente a saida por bordero de desconto dos cheques do loja
    lErro = Movcx_Grava_BorderoDescChq(objBorderoDescChq, dValorChequeLojaEsp, dValorChequeLojaNEsp)
    If lErro <> SUCESSO Then gError 126172
    
    If gcolModulo.Ativo(MODULO_CONTABILIDADE) = MODULO_ATIVO Then
    
'        'gera a contabilização
'        lErro = objContabAutomatica.GeraContabilizacao(objContabAutomatica, vParams)
'        If lErro <> SUCESSO Then gError 109247
        
        'finaliza a contabilização
        lErro = objContabAutomatica.Finaliza_Contab()
        If lErro <> SUCESSO Then gError 109248
        
    End If
    
    'confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 109242

    BorderoDescChq_Atualizar = SUCESSO
    
    Exit Function
    
Erro_BorderoDescChq_Atualizar:
    
    BorderoDescChq_Atualizar = gErr
    
    Select Case gErr
    
        Case 109241
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 109242
            Call Rotina_Erro(vbOKOnly, "ERRO_TRANSACAO_COMMIT", gErr)
    
        Case 109243 To 109248, 126172, 126252
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 147909)
    
    End Select
    
    'desfaz a transação
    Call Transacao_Rollback
    
    Exit Function

End Function

Private Function BorderoDescChq_Atualizar_BaixasRec(ByVal objBorderoDescChq As ClassBorderoDescChq, ByVal objMovContaCorrente As ClassMovContaCorrente, ByVal colBaixaParcRec As colBaixaParcRec, ByVal objContabAutomatica As ClassContabAutomatica) As Long
'prepara e insere a baixa rec e as baixasparcrec

Dim lErro As Long, objContabil As ClassContabil, objBaixaReceber As New ClassBaixaReceber

On Error GoTo Erro_BorderoDescChq_Atualizar_BaixasRec

    objBaixaReceber.dtData = objBorderoDescChq.dtDataDeposito
    objBaixaReceber.dtDataContabil = objBorderoDescChq.dtDataContabil
    objBaixaReceber.lNumMovCta = objMovContaCorrente.lNumMovto
    objBaixaReceber.iStatus = STATUS_LANCADO
    objBaixaReceber.iMotivo = MOTIVO_RECEBIMENTO
    objBaixaReceber.dtDataRegistro = gdtDataHoje
    objBaixaReceber.sHistorico = "recebto conta " & CStr(objMovContaCorrente.iCodConta) & " sequencial: " & CStr(objMovContaCorrente.lSequencial)
    
    lErro = BaixaReceber_Grava(objBaixaReceber, colBaixaParcRec, objContabil, 0, 0, objContabAutomatica)
    If lErro <> SUCESSO Then gError 126251
    
    BorderoDescChq_Atualizar_BaixasRec = SUCESSO
     
    Exit Function
    
Erro_BorderoDescChq_Atualizar_BaixasRec:

    BorderoDescChq_Atualizar_BaixasRec = gErr
     
    Select Case gErr
          
        Case 126251
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 147910)
     
    End Select
     
    Exit Function

End Function

Private Function ChequePre_Atualiza_ColBaixaParcRec(ByVal lNumIntCheque As Long, ByVal colBaixaParcRec As colBaixaParcRec, ByVal colInfoParcRec As Collection) As Long
'monta a colecao de parcelas associadas ao cheque pre que serao baixadas atraves do bordero

Dim lErro As Long, dValorBaixado As Double
Dim colDesconto As colDesconto
Dim dSaldoComDesconto As Double
Dim tParcelaReceber As typeParcelaReceber
Dim tInfoParcRec As typeInfoParcRec
Dim objInfoParcRec As ClassInfoParcRec
Dim alComando(1 To 2) As Long
Dim iIndice As Integer

On Error GoTo Erro_ChequePre_Atualiza_ColBaixaParcRec

    'abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 126242
    Next

    lErro = Comando_Executar(alComando(1), "SELECT NumIntParcela,Multa,Juros, Desconto, ValorRecebto FROM ChequeParcelaRec WHERE NumIntCheque = ?", tInfoParcRec.lNumIntParc, tInfoParcRec.dValorMulta, tInfoParcRec.dValorJuros, tInfoParcRec.dValorDesconto, tInfoParcRec.dValorRecebto, lNumIntCheque)
    If lErro <> AD_SQL_SUCESSO Then gError 126243
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126244

    If lErro = AD_SQL_SEM_DADOS Then gError 126245
    
    Do While lErro = AD_SQL_SUCESSO
    
        lErro = Comando_Executar(alComando(2), "SELECT ParcelasRec.Status, Cobrador, CarteiraCobranca, NumParcela, Cliente, Filial, NumTitulo FROM ParcelasRec, TitulosRec WHERE ParcelasRec.NumIntDoc = ? AND ParcelasRec.NumIntTitulo = TitulosRec.NumIntDoc", tParcelaReceber.iStatus, tParcelaReceber.iCobrador, tInfoParcRec.iCarteiraCobrador, tInfoParcRec.iNumParcela, tInfoParcRec.lCliente, tInfoParcRec.iFilialCliente, tInfoParcRec.lNumTitulo, tInfoParcRec.lNumIntParc)
        If lErro <> AD_SQL_SUCESSO Then gError 126246
        
        lErro = Comando_BuscarPrimeiro(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126247
        
        If tParcelaReceber.iStatus <> STATUS_ABERTO Then gError 126248
        
        Set objInfoParcRec = New ClassInfoParcRec
        
        With objInfoParcRec
            .lNumIntParc = tInfoParcRec.lNumIntParc
            .lCliente = tInfoParcRec.lCliente
            .iFilialCliente = tInfoParcRec.iFilialCliente
            .lNumTitulo = tInfoParcRec.lNumTitulo
            .iCarteiraCobrador = tInfoParcRec.iCarteiraCobrador
            .iCobrador = tParcelaReceber.iCobrador
            .iNumParcela = tInfoParcRec.iNumParcela
        End With
        
        colInfoParcRec.Add objInfoParcRec
        
        'inclui a parcela na colecao
        colBaixaParcRec.Add 0, 0, tInfoParcRec.lNumIntParc, 0, STATUS_LANCADO, tInfoParcRec.dValorMulta, tInfoParcRec.dValorJuros, tInfoParcRec.dValorDesconto, Round(tInfoParcRec.dValorRecebto - tInfoParcRec.dValorJuros - tInfoParcRec.dValorMulta + tInfoParcRec.dValorDesconto, 2), tInfoParcRec.dValorRecebto, tParcelaReceber.iCobrador
    
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126250
    
    Loop
    
    ChequePre_Atualiza_ColBaixaParcRec = SUCESSO

    'fecha os comandos
    For iIndice = LBound(alComando) To LBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

Erro_ChequePre_Atualiza_ColBaixaParcRec:

    ChequePre_Atualiza_ColBaixaParcRec = gErr

    Select Case gErr

        Case 126242
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 124243, 126244, 126250
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCCHEQUEPRE", gErr)
        
        Case 126245
           Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPRE_SEM_PARCELA", gErr)
        
        Case 126246, 126247 'leitura parcelas rec
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_REC", gErr)

        Case 126248 'a parcela a receber tem que estar em aberto
            Call Rotina_Erro(vbOKOnly, "ERRO_PARCELA_REC_NAO_ABERTA", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 147911)

    End Select

    'fecha os comandos
    For iIndice = LBound(alComando) To LBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function BorderoDescChq_Atualizar_CCI(ByVal objBorderoDescChq As ClassBorderoDescChq, ByVal objMovContaCorrente As ClassMovContaCorrente) As Long
'Essa função recebe um borderô de desconto de cheques e atualiza a conta corrente interna
'deve ser chama dentro de transação!!!

Dim lErro As Long
Dim alComando(0 To 10) As Long
Dim tContaCorrenteInt As typeContaCorrenteInt
Dim iIndice As Integer

On Error GoTo Erro_BorderoDescChq_Atualizar_CCI

    'abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
    
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 109260
    
    Next
    
    tContaCorrenteInt.sNomeReduzido = String(STRING_CONTA_CORRENTE_NOME_REDUZIDO, 0)
    tContaCorrenteInt.sDescricao = String(STRING_CONTA_CORRENTE_DESCRICAO, 0)
    tContaCorrenteInt.sAgencia = String(STRING_AGENCIA_CCI, 0)
    tContaCorrenteInt.sDVAgencia = String(STRING_DV, 0)
    tContaCorrenteInt.sNumConta = String(STRING_NUMCONTA, 0)
    tContaCorrenteInt.sDVNumConta = String(STRING_DV, 0)
    tContaCorrenteInt.sDVAgConta = String(STRING_DV, 0)
    tContaCorrenteInt.sContato = String(STRING_CONTATO, 0)
    tContaCorrenteInt.sTelefone = String(STRING_TELEFONE, 0)
    tContaCorrenteInt.sFax = String(STRING_FAX, 0)
    tContaCorrenteInt.sContaContabil = String(STRING_CONTA, 0)

    'busca a conta corrente interna exclusiva para cheques_pre da filial em questão
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Codigo, FilialEmpresa, NomeReduzido,Descricao,CodBanco, Agencia, DVAgencia, NumConta, DVNumConta, DVAgConta, Contato, Telefone, Fax, SaldoInicial, DataSaldoInicial, ContaContabil, ProxSeqMov, NumMenorExtratoNaoConciliado, ProxBordero, ChequeBordero, ChequePre " & _
                                              "FROM ContasCorrentesInternas " & _
                                              "WHERE FilialEmpresa = ? " & _
                                              "AND ChequePre = ?", 0, _
                                              tContaCorrenteInt.iCodigo, tContaCorrenteInt.iFilialEmpresa, tContaCorrenteInt.sNomeReduzido, tContaCorrenteInt.sDescricao, tContaCorrenteInt.iCodBanco, tContaCorrenteInt.sAgencia, tContaCorrenteInt.sDVAgencia, tContaCorrenteInt.sNumConta, tContaCorrenteInt.sDVNumConta, tContaCorrenteInt.sDVAgConta, tContaCorrenteInt.sContato, tContaCorrenteInt.sTelefone, tContaCorrenteInt.sFax, tContaCorrenteInt.dSaldoInicial, tContaCorrenteInt.dtDataSaldoInicial, tContaCorrenteInt.sContaContabil, tContaCorrenteInt.lProxSeq, tContaCorrenteInt.iNumMenorExtratoNaoConciliado, tContaCorrenteInt.lProxBordero, tContaCorrenteInt.iChequeBordero, tContaCorrenteInt.iChequePre, _
                                              objBorderoDescChq.iFilialEmpresa, _
                                              CONTA_CHEQUE_PRE)
    If lErro <> AD_SQL_SUCESSO Then gError 109261
    
    'busca o primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109262
    
    'se não encontrar-> erro
    If lErro = AD_SQL_SEM_DADOS Then gError 109263
    
    'locar
    lErro = Comando_LockShared(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 109264
    
    'preencher os dados do movimento da conta corrente para gravar o débito
    objMovContaCorrente.dtDataMovimento = objBorderoDescChq.dtDataEmissao
    objMovContaCorrente.dValor = objBorderoDescChq.dValorChequesSel
    objMovContaCorrente.iFilialEmpresa = tContaCorrenteInt.iFilialEmpresa
    objMovContaCorrente.iCodConta = tContaCorrenteInt.iCodigo
    objMovContaCorrente.iPortador = 0
    objMovContaCorrente.iTipo = MOVCCI_SAQ_DESCONTO_CHEQUE
    objMovContaCorrente.iTipoMeioPagto = BORDERO
    objMovContaCorrente.lNumero = objBorderoDescChq.lNumBordero
    objMovContaCorrente.lNumRefInterna = objBorderoDescChq.lNumBordero
    objMovContaCorrente.sHistorico = HIST_SAQUE_CHQ_LJ
    objMovContaCorrente.iConciliado = NAO_CONCILIADO
    objMovContaCorrente.iExcluido = MOVCONTACORRENTE_NAO_EXCLUIDO
    
    'grava o movto de débito
    lErro = CF("MovCCI_Grava_PagRec", objMovContaCorrente)
    If lErro <> SUCESSO Then gError 109265
    
    'preencher os dados do movimento da conta corrente para gravar o crédito
    objMovContaCorrente.dValor = objBorderoDescChq.dValorCredito
    objMovContaCorrente.iCodConta = objBorderoDescChq.iContaCorrente
    objMovContaCorrente.sHistorico = HIST_DEP_CHQ_LJ
    objMovContaCorrente.iTipo = MOVCCI_DEP_DESCONTO_CHEQUE
    
    'grava o movto de crédito
    lErro = CF("MovCCI_Grava_PagRec", objMovContaCorrente)
    If lErro <> SUCESSO Then gError 109266
    
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    BorderoDescChq_Atualizar_CCI = SUCESSO
    
    Exit Function
    
Erro_BorderoDescChq_Atualizar_CCI:
    
    BorderoDescChq_Atualizar_CCI = gErr
    
    Select Case gErr
    
        Case 109260
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 109261, 109262
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CCI", gErr)
            
        Case 109263
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTA_CHEQUEPRE_NAO_ENCONTRADA", gErr, objBorderoDescChq.iFilialEmpresa)
            
        Case 109264
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CONTASCORRENTESINTERNAS", gErr, tContaCorrenteInt.iCodigo)
            
        Case 109265, 109280
    
    End Select
    
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Public Function ChequePre_Atualiza_NumBordero(ByVal objBorderoDescChq As ClassBorderoDescChq, ByVal objEvolucao As Object, dValorChequeLojaEsp As Double, dValorChequeLojaNEsp As Double, ByVal colBaixaParcRec As colBaixaParcRec, ByVal colInfoParcRec As Collection) As Long
'Atualiza a tabela ChequeBordero
 
Dim lErro As Long
Dim dValorCheque As Double
Dim lSequencialLoja As Long
Dim lSequencialBack As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim objChequePre As ClassChequePre
Dim lNumIntCheque As Long
Dim iEvolucao As Integer
Dim iNaoEspecificado As Integer
 
On Error GoTo Erro_ChequePre_Atualiza_NumBordero
 
    'abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
    
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 109267
    
    Next
    
    For Each objChequePre In objBorderoDescChq.colChequePre
    
        'se o cheque foi selecionado
        If objChequePre.iChequeSel = MARCADO Then
        
            'localiza o chequepre na tabela de chequespre
            lErro = Comando_ExecutarPos(alComando(0), "SELECT NumIntCheque, Valor, SequencialLoja, SequencialBack, NaoEspecificado " & _
                                                      "FROM ChequePre " & _
                                                      "WHERE NumIntCheque = ? AND FilialEmpresa = ? AND Localizacao = ?", _
                                                      0, _
                                                      lNumIntCheque, dValorCheque, lSequencialLoja, lSequencialBack, iNaoEspecificado, _
                                                      objChequePre.lNumIntCheque, objChequePre.iFilialEmpresa, CHEQUEPRE_LOCALIZACAO_BACKOFFICE)
            If lErro <> AD_SQL_SUCESSO Then gError 109268
            
            'busca o primeiro
            lErro = Comando_BuscarPrimeiro(alComando(0))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109269
            
            'se não encontrou-> erro
            If lErro = AD_SQL_SEM_DADOS Then gError 109270
            
            'loca o cheque
            lErro = Comando_LockExclusive(alComando(0))
            If lErro <> AD_SQL_SUCESSO Then gError 109271
            
            'verifico se o valor está batendo
            If objChequePre.dValor <> dValorCheque Then gError 109272
            
            'se for um cheque do loja ==> acumula o valor para fazer movimento do caixa central no valor dos cheques do loja
            If lSequencialLoja <> 0 Then
            
                If iNaoEspecificado = CHEQUE_ESPECIFICADO Then
            
                    dValorChequeLojaEsp = dValorChequeLojaEsp + dValorCheque
            
                Else
                
                    dValorChequeLojaNEsp = dValorChequeLojaNEsp + dValorCheque
            
                End If
            
            Else
            
                'monta a colecao de parcelas associadas ao cheque pre que serao baixadas atraves do bordero
                lErro = ChequePre_Atualiza_ColBaixaParcRec(objChequePre.lNumIntCheque, colBaixaParcRec, colInfoParcRec)
                If lErro <> SUCESSO Then gError 126241
            
            End If
            
            lErro = Comando_ExecutarPos(alComando(1), "UPDATE ChequePre SET Localizacao = ?", alComando(0), CHEQUEPRE_LOCALIZACAO_BANCO)
            If lErro <> AD_SQL_SUCESSO Then gError 117504
            
            'gravo os dados da tabela ChequeBordero
            lErro = CF("ChequeBordero_Inserir", objBorderoDescChq.lNumBordero, objChequePre.lNumIntCheque, TIPO_BORDERO_DESCONTO)
            If lErro <> SUCESSO Then gError 109278
            
            iEvolucao = 1
            
            'mostra a evolução na tela
            lErro = CF("Evolucao_BorderoDescChq", objEvolucao, iEvolucao)
            If lErro <> SUCESSO Then gError 109279
            
        End If
    
    Next
    
    ChequePre_Atualiza_NumBordero = SUCESSO
 
    Exit Function
 
Erro_ChequePre_Atualiza_NumBordero:
 
    ChequePre_Atualiza_NumBordero = gErr
 
    Select Case gErr
 
        Case 109267
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 109268, 109269
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUEBORDERO", gErr)
        
        Case 109270
            Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPRE_NAO_ENCONTRADO", gErr, objChequePre.iBanco, objChequePre.sAgencia, objChequePre.sContaCorrente, objChequePre.lNumero)
            
        Case 109271
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CHEQUESPRE", gErr, objChequePre.iBanco, objChequePre.sAgencia, objChequePre.sContaCorrente, objChequePre.lNumero)
        
        Case 109272
            Call Rotina_Erro(vbOKOnly, "ERRO_VALOR_CHEQUEPRE_ALTERADO", gErr)
        
        Case 109273
            Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPRE_NAO_BACK", gErr, objChequePre.iBanco, objChequePre.sAgencia, objChequePre.sContaCorrente, objChequePre.lNumero)
        
        Case 109274
            Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPRE_NAO_LOJA", gErr, objChequePre.iBanco, objChequePre.sAgencia, objChequePre.sContaCorrente, objChequePre.lNumero)
        
        Case 109278, 109279, 126241
        
        Case 117504
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_CHEQUESPRE2", gErr, objChequePre.iBanco, objChequePre.sAgencia, objChequePre.sContaCorrente, objChequePre.lNumero)
 
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 147912)
 
    End Select
 
    Exit Function
 
End Function


Public Function Evolucao_BorderoDescChq(ByVal objEvolucao As Object, iNumProc As Integer) As Long

Dim lErro As Long
Dim iCancela As Integer

On Error GoTo Erro_Evolucao_BorderoDescChq

    lErro = objEvolucao.Mostra_Evolucao(iCancela, iNumProc)
    If lErro <> SUCESSO Then gError 109281
    
    If iCancela = CANCELA_BATCH Then gError 109282

    Evolucao_BorderoDescChq = SUCESSO
    
    Exit Function
    
Erro_Evolucao_BorderoDescChq:
    
    Evolucao_BorderoDescChq = gErr
    
    Select Case gErr
    
        Case 109281, 109282
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 147913)
            
    End Select
    
    Exit Function

End Function

Private Function Movcx_Grava_BorderoDescChq(ByVal objBorderoDescChq As ClassBorderoDescChq, ByVal dValorChequeLojaEsp As Double, ByVal dValorChequeLojaNEsp As Double) As Long
'prepara e insere o movto de caixa central correspondente a saida por bordero de desconto dos cheques do loja

Dim objMovimentoCaixa As New ClassMovimentoCaixa
Dim lNumMovto As Long
Dim lSequencial As Long
Dim objCCMovDia As New ClassCCMovDia
Dim alComando(1 To 1) As Long
Dim iIndice As Integer
Dim lErro As Long
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim objTipoMeioPagtoLojaFilial As New ClassTMPLojaFilial

On Error GoTo Erro_Movcx_Grava_BorderoDescChq

    If dValorChequeLojaEsp + dValorChequeLojaNEsp <> 0 And giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL_BACKOFFICE Then

        'abre os comandos
        For iIndice = LBound(alComando) To UBound(alComando)
            alComando(iIndice) = Comando_Abrir
            If alComando(iIndice) = 0 Then gError 126173
        Next
    
        'preenche o movimento de caixa com os dados do borderocheque
        Call Mover_Dados_BorderoDescChq_MovCaixa(objBorderoDescChq, objMovimentoCaixa, dValorChequeLojaEsp + dValorChequeLojaNEsp)
    
        'pegar o proximo numero de movimento disponivel na tabela.
        lErro = CF("Config_ObterNumInt", "LojaConfig", "NUM_PROX_MOVCAIXACENTRAL", lNumMovto, 1, objBorderoDescChq.iFilialEmpresa)
        If lErro <> SUCESSO Then gError 126174
        
        'preencher o movimentocaixa com número de movimento novo gerado
        objMovimentoCaixa.lNumMovto = lNumMovto
        
        'cria um
        lErro = CF("Caixa_Sequencial_Automatico", objMovimentoCaixa.iCaixa, objMovimentoCaixa.iFilialEmpresa, lSequencial)
        If lErro <> SUCESSO Then gError 126175
        
        objMovimentoCaixa.lSequencial = lSequencial
    
        'executa a inserção na tabela de movimentos de caixa
        lErro = Comando_Executar(alComando(1), "INSERT INTO MovimentosCaixa(FilialEmpresa,NumMovto,Caixa,Sequencial,Tipo,AdmMeioPagto,Parcelamento,TipoCartao,Numero,DataMovimento,Valor,Historico,Favorecido,CupomFiscal,NumRefInterna,MovtoTransf,MovtoEstorno,Gerente,CodConta,Hora) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
        objMovimentoCaixa.iFilialEmpresa, objMovimentoCaixa.lNumMovto, objMovimentoCaixa.iCaixa, objMovimentoCaixa.lSequencial, objMovimentoCaixa.iTipo, objMovimentoCaixa.iAdmMeioPagto, objMovimentoCaixa.iParcelamento, objMovimentoCaixa.iTipoCartao, objMovimentoCaixa.lNumero, objMovimentoCaixa.dtDataMovimento, objMovimentoCaixa.dValor, objMovimentoCaixa.sHistorico, objMovimentoCaixa.sFavorecido, objMovimentoCaixa.lCupomFiscal, objMovimentoCaixa.lNumRefInterna, objMovimentoCaixa.lMovtoTransf, objMovimentoCaixa.lMovtoEstorno, objMovimentoCaixa.iGerente, objMovimentoCaixa.iCodConta, objMovimentoCaixa.dHora)
        If lErro <> SUCESSO Then gError 126176
    
        'preenche o ccmovdia com os dados do borderocheque
        Call Mover_Dados_BorderoDescChq_CCMovDia(objBorderoDescChq, objCCMovDia, dValorChequeLojaEsp + dValorChequeLojaNEsp)
    
        'adiciona ao acumulado deb/cred diário
        lErro = CF("CCMovDia_Grava", objCCMovDia)
        If lErro <> SUCESSO Then gError 126177
    
        'adiciona ao acumulado déb/créd mensal
        lErro = CF("CCMov_Grava", objCCMovDia)
        If lErro <> SUCESSO Then gError 126178
    
        If dValorChequeLojaNEsp <> 0 Then
    
            'Valor dos Cheques não Especificados
            objTipoMeioPagtoLojaFilial.dSaldo = dValorChequeLojaNEsp
            objTipoMeioPagtoLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_CHEQUE
            objTipoMeioPagtoLojaFilial.iFilialEmpresa = objMovimentoCaixa.iFilialEmpresa
    
            'Função que Serve para atualizar Saldo dos cheques nao especificados
            lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTipoMeioPagtoLojaFilial)
            If lErro <> SUCESSO Then gError 126182
    
        End If
    
        If dValorChequeLojaEsp <> 0 Then
    
            'Mover Valor dos Cheques Especificados para admMeioPagtoCondPagto.Saldo
            objAdmMeioPagtoCondPagto.dSaldo = dValorChequeLojaEsp
    
            'Vincula-se ao Meio_Pagamento_Cheque para o AdmMeioPagtoCondPagto.iAdmMeioPagto
            objAdmMeioPagtoCondPagto.iAdmMeioPagto = MEIO_PAGAMENTO_CHEQUE
    
            'Vincula-se ao Pagamento_Avista para o AdmMeioPagtoCondPagto.parcelamento
            objAdmMeioPagtoCondPagto.iParcelamento = PARCELAMENTO_AVISTA
    
            'Vincula-se FilialEmpresa a o Meio de Pagamento
            objAdmMeioPagtoCondPagto.iFilialEmpresa = objMovimentoCaixa.iFilialEmpresa
    
            'Função para Alteração de Saldo
            lErro = CF("AdmMeioPagtoCondPagto_Altera_Saldo", objAdmMeioPagtoCondPagto)
            If lErro <> SUCESSO Then gError 126183
    
        End If
    
        'fecha os comandos
        For iIndice = LBound(alComando) To UBound(alComando)
            Call Comando_Fechar(alComando(iIndice))
        Next

    End If

    Movcx_Grava_BorderoDescChq = SUCESSO

    Exit Function

Erro_Movcx_Grava_BorderoDescChq:

    Movcx_Grava_BorderoDescChq = gErr

    Select Case gErr

        Case 126173
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 126174, 126175, 126177, 126178, 126182, 126183

        Case 126176
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_INSERCAO", gErr, objMovimentoCaixa.iCaixa, objMovimentoCaixa.lSequencial)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 147914)

    End Select

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function Movcx_Exclui_BorderoDescChq(ByVal objBorderoDescChq As ClassBorderoDescChq, ByVal dValorChequeLojaEsp As Double, ByVal dValorChequeLojaNEsp As Double, Optional ByVal iTipoBordero As Integer = BORDERO_DESCONTO) As Long
'exclui os movimentos de caixa correspondentes a saida por bordero de desconto dos cheques do loja

Dim lErro As Long
Dim alComando(1 To 2) As Long
Dim iIndice As Integer
Dim objCCMovDia As New ClassCCMovDia
Dim objTipoMeioPagtoLojaFilial As New ClassTMPLojaFilial
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim tMovCx As typeMovimentoCaixa
Dim objMovCx As New ClassMovimentoCaixa

On Error GoTo Erro_Movcx_Exclui_BorderoDescChq

    If dValorChequeLojaEsp + dValorChequeLojaNEsp <> 0 And giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL_BACKOFFICE Then

        For iIndice = LBound(alComando) To UBound(alComando)
            alComando(iIndice) = Comando_Abrir()
            If alComando(iIndice) = 0 Then gError 126188
        Next
    
        'selecionar os registros da tabela de MovimentosCaixa referente a saida de dinheiro do caixa que está sendo excluida
        If iTipoBordero = BORDERO_DESCONTO Then
            lErro = Comando_ExecutarPos(alComando(1), "SELECT NumMovto, Tipo, AdmMeioPagto, Parcelamento, DataMovimento, Valor, NumIntDocLog, QuantLog FROM MovimentosCaixa WHERE FilialEmpresa = ? AND Tipo = ? AND NumRefInterna = ?", 0, tMovCx.lNumMovto, tMovCx.iTipo, tMovCx.iAdmMeioPagto, tMovCx.iParcelamento, tMovCx.dtDataMovimento, tMovCx.dValor, tMovCx.lNumIntDocLog, tMovCx.iQuantLog, objBorderoDescChq.iFilialEmpresa, MOVIMENTOCAIXA_BORDERO_DESC_CHEQUE, objBorderoDescChq.lNumBordero)
        Else
            lErro = Comando_ExecutarPos(alComando(1), "SELECT NumMovto, Tipo, AdmMeioPagto, Parcelamento, DataMovimento, Valor, NumIntDocLog, QuantLog FROM MovimentosCaixa WHERE FilialEmpresa = ? AND Tipo = ? AND NumRefInterna = ?", 0, tMovCx.lNumMovto, tMovCx.iTipo, tMovCx.iAdmMeioPagto, tMovCx.iParcelamento, tMovCx.dtDataMovimento, tMovCx.dValor, tMovCx.lNumIntDocLog, tMovCx.iQuantLog, objBorderoDescChq.iFilialEmpresa, MOVIMENTOCAIXA_BORDERO_CHEQUEPRE, objBorderoDescChq.lNumBordero)
        End If
        If lErro <> AD_SQL_SUCESSO Then gError 126189
    
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126190
    
        If lErro = AD_SQL_SEM_DADOS Then gError 126191
    
        
        objMovCx.iFilialEmpresa = objBorderoDescChq.iFilialEmpresa
        objMovCx.iTipo = tMovCx.iTipo
        objMovCx.iAdmMeioPagto = tMovCx.iAdmMeioPagto
        objMovCx.iParcelamento = tMovCx.iParcelamento
        objMovCx.dtDataMovimento = tMovCx.dtDataMovimento
        objMovCx.dValor = tMovCx.dValor
        objMovCx.lNumMovto = tMovCx.lNumMovto
        
        'preenche um objccmovdia com os dados do movimento de saque do caixa
        lErro = CF("Mover_Dados_Saque_CCMovDia", objMovCx, objCCMovDia)
        If lErro <> SUCESSO Then gError 126192
    
        objCCMovDia.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_CHEQUE
    
        'subtrai o mesmo no consolidado diário
        lErro = CF("CCMovDia_Exclui", objCCMovDia)
        If lErro <> SUCESSO Then gError 126193
    
        'subtrai o mesmo no consolidado anual no mês em questão
        lErro = CF("CCMov_Exclui", objCCMovDia)
        If lErro <> SUCESSO Then gError 126194
    
        lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM MovimentosCaixa", alComando(1))
        If lErro <> AD_SQL_SUCESSO Then gError 126195
    
        If dValorChequeLojaNEsp <> 0 Then
    
            objTipoMeioPagtoLojaFilial.dSaldo = -dValorChequeLojaNEsp
            objTipoMeioPagtoLojaFilial.iFilialEmpresa = objMovCx.iFilialEmpresa
    
            'mover Meio_pagamento_Dineiro para objtipomeiopagtoloja.itipo
            objTipoMeioPagtoLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_CHEQUE
    
            'altera o saldo atual na tabela de tipomeiopagtoloja
            lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTipoMeioPagtoLojaFilial)
            If lErro <> SUCESSO Then gError 126196
    
        End If
    
        If dValorChequeLojaEsp <> 0 Then
    
            'Mover Valor dos Cheques Especificados para admMeioPagtoCondPagto.Saldo
            objAdmMeioPagtoCondPagto.dSaldo = -dValorChequeLojaEsp
    
            'Vincula-se ao Meio_Pagamento_Cheque para o AdmMeioPagtoCondPagto.iAdmMeioPagto
            objAdmMeioPagtoCondPagto.iAdmMeioPagto = MEIO_PAGAMENTO_CHEQUE
    
            'Vincula-se ao Pagamento_Avista para o AdmMeioPagtoCondPagto.parcelamento
            objAdmMeioPagtoCondPagto.iParcelamento = PARCELAMENTO_AVISTA
    
            'Vincula-se FilialEmpresa a o Meio de Pagamento
            objAdmMeioPagtoCondPagto.iFilialEmpresa = objMovCx.iFilialEmpresa
    
            'Função para Alteração de Saldo
            lErro = CF("AdmMeioPagtoCondPagto_Altera_Saldo", objAdmMeioPagtoCondPagto)
            If lErro <> SUCESSO Then gError 126197
    
        End If
    
        For iIndice = LBound(alComando) To UBound(alComando)
            Call Comando_Fechar(alComando(iIndice))
        Next

    End If

    Movcx_Exclui_BorderoDescChq = SUCESSO

    Exit Function

Erro_Movcx_Exclui_BorderoDescChq:

    Movcx_Exclui_BorderoDescChq = gErr

    Select Case gErr

        Case 126188
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 126189, 126190
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVCAIXA1", gErr, objBorderoDescChq.iFilialEmpresa, MOVIMENTOCAIXA_BORDERO_DESC_CHEQUE, objBorderoDescChq.lNumBordero)

        Case 126191
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOCAIXA_NAO_CADASTRADO1", gErr)

        Case 126192 To 126194, 126196 To 126197

        Case 126195
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_MOVIMENTOSCAIXA", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 147915)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Sub Mover_Dados_BorderoDescChq_MovCaixa(objBorderoDescChq As ClassBorderoDescChq, objMovimentoCaixa As ClassMovimentoCaixa, ByVal dValorChequeLoja As Double)

On Error GoTo Erro_Mover_Dados_BorderoDescChq_MovCaixa

    'preenche o movimentocaixa com os dados do borderô
    objMovimentoCaixa.dHora = CDbl(Time)
    objMovimentoCaixa.dtDataMovimento = objBorderoDescChq.dtDataEmissao
    objMovimentoCaixa.dValor = dValorChequeLoja
    objMovimentoCaixa.iAdmMeioPagto = MEIO_PAGAMENTO_CHEQUE
    objMovimentoCaixa.iCaixa = CODIGO_CAIXA_CENTRAL
    objMovimentoCaixa.iCodConta = objBorderoDescChq.iContaCorrente
    objMovimentoCaixa.iFilialEmpresa = objBorderoDescChq.iFilialEmpresa
    objMovimentoCaixa.iParcelamento = PARCELAMENTO_AVISTA
    objMovimentoCaixa.iTipo = MOVIMENTOCAIXA_BORDERO_DESC_CHEQUE
    objMovimentoCaixa.lNumRefInterna = objBorderoDescChq.lNumBordero
    
    Exit Sub

Erro_Mover_Dados_BorderoDescChq_MovCaixa:

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 147916)

    End Select

    Exit Sub

End Sub

Private Sub Mover_Dados_BorderoDescChq_CCMovDia(objBorderoDescChq As ClassBorderoDescChq, objCCMovDia As ClassCCMovDia, ByVal dValorChequeLoja As Double)

On Error GoTo Erro_Mover_Dados_BorderoDescChq_CCMovDia

    'preenche um movdia com os dados de um borderocheque
    objCCMovDia.dDeb = dValorChequeLoja
    objCCMovDia.dtData = objBorderoDescChq.dtDataEmissao
    objCCMovDia.iCodCaixa = CODIGO_CAIXA_CENTRAL
    objCCMovDia.iFilialEmpresa = objBorderoDescChq.iFilialEmpresa
    objCCMovDia.iParcelamento = PARCELAMENTO_AVISTA
    objCCMovDia.iAdmMeioPagto = MEIO_PAGAMENTO_CHEQUE
    objCCMovDia.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_CHEQUE

    Exit Sub

Erro_Mover_Dados_BorderoDescChq_CCMovDia:

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 147917)

    End Select

    Exit Sub

End Sub

Public Function BorderoDescChq_Inserir(ByVal objBorderoDescChq As ClassBorderoDescChq) As Long
'função que simplesmente insere um registro na tabela BorderoDescChq.
'DEVE SER CHAMADA DENTRO DE TRANSAÇÃO!

Dim lComando As Long
Dim lErro As Long

On Error GoTo Erro_BorderoDescChq_Inserir

    'abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 109284
    
    'insere o registro
    lErro = Comando_Executar(lComando, "INSERT " & _
                                       "INTO BorderoDescChq " & _
                                       "(FilialEmpresa, NumBordero, ContaCorrente, DataEmissao, DataContabil, Cobrador, CarteiraCobranca, DataDeposito, ValorCredito) " & _
                                       "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)", _
                                       objBorderoDescChq.iFilialEmpresa, objBorderoDescChq.lNumBordero, objBorderoDescChq.iContaCorrente, objBorderoDescChq.dtDataEmissao, objBorderoDescChq.dtDataContabil, objBorderoDescChq.iCobrador, objBorderoDescChq.iCarteiraCobranca, objBorderoDescChq.dtDataDeposito, objBorderoDescChq.dValorCredito)
    If lErro <> AD_SQL_SUCESSO Then gError 109285
    
    'fecha o comando
    Call Comando_Fechar(lComando)

    BorderoDescChq_Inserir = SUCESSO
    
    Exit Function
    
Erro_BorderoDescChq_Inserir:
    
    BorderoDescChq_Inserir = gErr
    
    Select Case gErr
    
        Case 109284
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 109285
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_BORDERODESCCHQ", gErr, objBorderoDescChq.iFilialEmpresa, objBorderoDescChq.lNumBordero)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 147918)
            
    End Select
    
    'fecha o comando
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Public Function CPR_Inicializa_CCI_ChequePre() As Long
'esta função será chamada na inicialização para criar os registros de contas correntes internas para cheques pré

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim lTransacao As Long
Dim iIndice As Integer
Dim iCodigoContaCorrente As Integer
Dim sNomeRed As String

On Error GoTo Erro_CPR_Inicializa_CCI_ChequePre

    'abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
    
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 109248
    
    Next
    
    'abre a transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 109258

    '...verifica se existe um registro com a combinação ChequePre=1 e filialempresa= objFilialEmpresa
    'isso é feito, pq DEVE sempre existir
    lErro = Comando_Executar(alComando(0), "SELECT Codigo " & _
                                           "FROM ContasCorrentesInternas " & _
                                           "WHERE FilialEmpresa = ? " & _
                                           "AND ChequePre = ?", _
                                           iCodigoContaCorrente, _
                                           giFilialEmpresa, _
                                           CONTA_CHEQUE_PRE)
    If lErro <> AD_SQL_SUCESSO Then gError 109249
    
    'busca o primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109250
    
    'se não achar, insere
    If lErro = AD_SQL_SEM_DADOS Then
    
        'cria um código para a nova conta corrente interna
        
        lErro = CF("Conta_Automatica_Trans", iCodigoContaCorrente)
        If lErro <> SUCESSO Then gError 109251
        
        'gera um nome reduzido para uma conta corrente de cheque pre.
        'a regra de formação é "ChequePre x", onde x será o primeiro inteiro
        'maior ou igual à filial atual da coleção que ainda não tenha sido usado
        lErro = CF("Conta_NomeRed_Automatico", giFilialEmpresa, sNomeRed)
        If lErro <> SUCESSO Then gError 109252
        
        'insere na tabela de contas correntes internas o novo registro
        lErro = Comando_Executar(alComando(1), "INSERT " & _
                                               "INTO ContasCorrentesInternas " & _
                                               "(Codigo, FilialEmpresa, NomeReduzido, Descricao, DataSaldoInicial, ProxSeqMov, ProxBordero, ChequePre) " & _
                                               "VALUES (?, ?, ?, ?, ?, ?, ?, ?)", _
                                               iCodigoContaCorrente, giFilialEmpresa, sNomeRed, left(CONTA_CHEQUE_PRE_DESCRICAO & SEPARADOR & gsNomeFilialEmpresa, STRING_CONTA_CORRENTE_DESCRICAO), gdtDataAtual, 1, 1, CONTA_CHEQUE_PRE)
        If lErro <> AD_SQL_SUCESSO Then gError 109253
        
    End If
    
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    'confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 109254

    CPR_Inicializa_CCI_ChequePre = SUCESSO
    
    Exit Function
    
Erro_CPR_Inicializa_CCI_ChequePre:

    CPR_Inicializa_CCI_ChequePre = gErr
    
    Select Case gErr
    
        Case 109251, 109252
        
        Case 109258
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
        
        Case 109248
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 109249, 109250
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CCI", gErr)
        
        Case 109253
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CCI", gErr, iCodigoContaCorrente)
            
        Case 109254
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 147919)
    
    End Select
    
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    'desfaz a transação
    Call Transacao_Rollback
    
    Exit Function

End Function

Public Function Conta_Automatica_Trans(iCodigo As Integer) As Long
'Retorna o número da proxima Conta Corrente Interna disponível
'DEVE SER CHAMADA DENTRO DE TRANSACAO!

Dim lCodigo As Long, lErro As Long

On Error GoTo Erro_Conta_Automatica_Trans

    lErro = CF("Config_ObterAutomatico_EmTrans", "CPRConfig", "NUM_PROX_CONTA", "ContasCorrentesInternas", "Codigo", lCodigo)
    If lErro <> SUCESSO Then gError 109261
    
    iCodigo = lCodigo
    
    Conta_Automatica_Trans = SUCESSO

    Exit Function

Erro_Conta_Automatica_Trans:

    Conta_Automatica_Trans = gErr

    Select Case gErr

        Case 109261
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 147920)

    End Select
    
    Exit Function
    
End Function

Private Function Banco_Le_Portador(ByVal iCodBanco As Integer, iPortador As Integer) As Long
'retorna em iPortador o codigo do portador associado ao banco identificado por iCodBanco
'se nao houver portador associado iPortador retorna zero

Dim lErro As Long
Dim lComando As Long, iInativo As Integer

On Error GoTo Erro_Banco_Le_Portador

    iPortador = 0
    
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 19389

    lErro = Comando_Executar(lComando, "SELECT Codigo, Inativo FROM Portador WHERE Banco = ?", iPortador, iInativo, iCodBanco)
    If lErro <> AD_SQL_SUCESSO Then Error 19390

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 19391
    
    If lErro = AD_SQL_SUCESSO Then
    
        'Verifica se está ativo
        If iInativo = Inativo Then Error 56789
        
    End If
    
    Call Comando_Fechar(lComando)
        
    Banco_Le_Portador = SUCESSO
    
    Exit Function
    
Erro_Banco_Le_Portador:

    Banco_Le_Portador = Err
    
    Select Case Err
        
        Case 19389
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
            
        Case 19390, 19391
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PORTADOR1", Err)
            
        Case 56789
            Call Rotina_Erro(vbOKOnly, "ERRO_PORTADOR_INATIVO", Err, iPortador)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 147921)
    
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function Banco_Exclui(ByVal objBanco As ClassBanco) As Long
'Exclui o banco do BD

Dim lErro As Long, iPortador As Integer, iCobrador As Integer
Dim lComando1 As Long
Dim lComando2 As Long
Dim lTransacao As Long
Dim sNome As String
Dim lNumIntDoc As Long
    
On Error GoTo Erro_Banco_Exclui

    'Inicializa comandos
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 16113
    
    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 16114
    
    'Inicia a Transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 16115
    
    sNome = String(STRING_BANCO_NOME, 0)
    
    'Pesquisa banco na tabela Bancos
    lErro = Comando_ExecutarPos(lComando1, "SELECT Nome FROM Bancos WHERE CodBanco = ? ", 0, sNome, objBanco.iCodBanco)
    If lErro <> AD_SQL_SUCESSO Then Error 16117
    
    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 16128
    
    If lErro = AD_SQL_SEM_DADOS Then Error 16118
    
    'Lock do Banco
    lErro = Comando_LockExclusive(lComando1)
    If lErro <> AD_SQL_SUCESSO Then Error 16116
    
    'Verifica se Banco está relacionado com ContasCorrentesInternas
    lErro = CF("ContasCorrentesInternas_Le_Banco", objBanco.iCodBanco)
    If lErro = SUCESSO Then Error 16123
    
    If lErro <> 16112 Then Error 16131
    
    'Verifica se o Banco está associado a algum portador
    lErro = Banco_Le_Portador(objBanco.iCodBanco, iPortador)
    If lErro <> SUCESSO Then Error 19388
        
    If iPortador <> 0 Then Error 16502
    
    'Verifica se existe ParcelaPag associada ao Banco em questão
    lErro = Banco_Le_ParcelasPag(objBanco.iCodBanco, lNumIntDoc)
    If lErro <> SUCESSO And lErro <> 28624 Then Error 28625
    
    'Se encontrou ParcelaPag associada ao Banco --> Erro
    If lErro = SUCESSO Then Error 28605
    
    'Verifica se existe ParcelaPagBaixada associada ao Banco em questão
    lErro = Banco_Le_ParcelasPagBaixadas(objBanco.iCodBanco, lNumIntDoc)
    If lErro <> SUCESSO And lErro <> 28609 Then Error 28610
    
    'Se encontrou ParcelaPagBaixada associada ao Banco --> Erro
    If lErro = SUCESSO Then Error 19153
    
    'Verifica se existe Cobrador associado ao Banco em questão
    lErro = Banco_Le_Cobrador(objBanco.iCodBanco, iCobrador)
    If lErro <> SUCESSO And lErro <> 19157 Then Error 19158
    
    'Se encontrou Cobrador associado ao Banco --> Erro
    If lErro = SUCESSO Then Error 19159
    
    'Exclui Banco da tabela Bancos
    lErro = Comando_ExecutarPos(lComando2, "DELETE FROM Bancos", lComando1)
    If lErro <> AD_SQL_SUCESSO Then Error 16119
            
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 16120

    'Libera comandos
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
        
    Banco_Exclui = SUCESSO

    Exit Function

Erro_Banco_Exclui:
    
    Banco_Exclui = Err
    
    Select Case Err
    
        Case 16502
            Call Rotina_Erro(vbOKOnly, "ERRO_BANCO_PORTADOR", Err, objBanco.iCodBanco)
        
        Case 16113, 16114
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 16115
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
        
        Case 16116
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_BANCOS", Err, objBanco.iCodBanco)
      
        Case 16117, 16128
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BANCOS", Err, objBanco.iCodBanco)
            
        Case 16118
            Call Rotina_Erro(vbOKOnly, "ERRO_BANCO_NAO_CADASTRADO", Err, objBanco.iCodBanco)
        
        Case 16119
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_BANCOS", Err, objBanco.iCodBanco)
            
        Case 16120
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
       
        Case 16123
            Call Rotina_Erro(vbOKOnly, "ERRO_BANCO_RELACIONADO_COM_CONTASCORRENTESINTERNAS", Err)
                                   
        Case 16131, 19158, 19388, 28625, 28610
            'Erro tratado na rotina chamada
                        
        Case 19153
            Call Rotina_Erro(vbOKOnly, "ERRO_BANCO_ASSOCIADO_PARCELAPAGBAIXADA", Err, objBanco.iCodBanco, lNumIntDoc)
                                   
        Case 19159
            Call Rotina_Erro(vbOKOnly, "ERRO_BANCO_ASSOCIADO_COBRADOR", Err, objBanco.iCodBanco, iCobrador)
                                   
        Case 28605
            Call Rotina_Erro(vbOKOnly, "ERRO_BANCO_ASSOCIADO_PARCELAPAG", Err, objBanco.iCodBanco, lNumIntDoc)
                                   
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 147922)
        
    End Select
    
    Call Transacao_Rollback
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
      
    Exit Function

End Function

Function Banco_Grava(ByVal objBanco As ClassBanco) As Long
'Atualiza ou insere um novo registro na tabela Bancos

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim lComando2 As Long
Dim lTransacao As Long
Dim sNome As String
Dim sNomeReduzido As String

On Error GoTo Erro_Banco_Grava

    'inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 16096
    
    lErro = CF("Banco_Grava_Trans", objBanco)
    If lErro <> SUCESSO Then gError 126444
    
    'Confirma a Transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 16104
        
    Banco_Grava = SUCESSO
    
    Exit Function
    
Erro_Banco_Grava:

    Banco_Grava = gErr
    
        Select Case gErr

            Case 16096
                Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

            Case 16104
                 Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

            Case 126444

            Case Else
                Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 147923)

    End Select
    
    Call Transacao_Rollback

    Exit Function
        
End Function

Function Banco_Grava_Trans(ByVal objBanco As ClassBanco) As Long
'Atualiza ou insere um novo registro na tabela Bancos
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim lComando2 As Long
Dim lTransacao As Long
Dim sNome As String
Dim sNomeReduzido As String

On Error GoTo Erro_Banco_Grava_Trans

    lComando = 0
    lComando1 = 0
    lComando2 = 0
    lTransacao = 0

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 16093
    
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 16094
    
    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 16095
    
    sNomeReduzido = String(STRING_BANCO_NOME_REDUZIDO, 0)
    sNome = String(STRING_BANCO_NOME, 0)
    
    'pesquisa nome reduzido no BD
    lErro = Comando_Executar(lComando, "SELECT  Nome FROM Bancos WHERE CodBanco <> ? AND NomeReduzido = ?", sNome, objBanco.iCodBanco, objBanco.sNomeReduzido)
    If lErro <> AD_SQL_SUCESSO Then Error 16097

    'verifica resultado da pesquisa
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 16098

    If lErro <> AD_SQL_SEM_DADOS Then Error 16099
    
    sNome = String(STRING_BANCO_NOME, 0)
    
    'pesquisa banco no BD
    lErro = Comando_ExecutarPos(lComando1, "SELECT  Nome FROM Bancos WHERE CodBanco = ? ", 0, sNome, objBanco.iCodBanco)
    If lErro <> AD_SQL_SUCESSO Then Error 16100

    'verifica resultado da pesquisa
    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 16101

    If lErro = AD_SQL_SEM_DADOS Then
    'banco nao pertence ao BD
    
        'Insere novo registro na tabela Bancos
        lErro = Comando_Executar(lComando2, "INSERT INTO Bancos (CodBanco, Nome, NomeReduzido, LayoutCheque, LayoutBoleto, Ativo) VALUES (?,?,?,?,?,?)", objBanco.iCodBanco, objBanco.sNome, objBanco.sNomeReduzido, objBanco.sLayoutCheque, objBanco.sLayoutBoleto, objBanco.iAtivo)
        If lErro <> AD_SQL_SUCESSO Then Error 16102
        
    Else
    'Banco existe no BD
    
        'Altera registro na tabela Bancos
        lErro = Comando_ExecutarPos(lComando2, "UPDATE Bancos SET Nome = ? , NomeReduzido = ? , LayoutCheque = ? , LayoutBoleto = ?, Ativo = ? ", lComando1, objBanco.sNome, objBanco.sNomeReduzido, objBanco.sLayoutCheque, objBanco.sLayoutBoleto, objBanco.iAtivo)
        If lErro <> AD_SQL_SUCESSO Then Error 16103
        
    End If
    
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    
    Banco_Grava_Trans = SUCESSO
    
    Exit Function
    
Erro_Banco_Grava_Trans:

    Banco_Grava_Trans = Err
    
        Select Case Err

        Case 16093, 16094, 16095
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 16097, 16098, 16100, 16101
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BANCOS", Err, objBanco.iCodBanco)

        Case 16099
            Call Rotina_Erro(vbOKOnly, "ERRO_NOME_REDUZIDO_BANCO_REPETIDO", Err)

        Case 16102
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_BANCOS", Err, objBanco.iCodBanco)
        
        Case 16103
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_BANCOS", Err, objBanco.iCodBanco)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 147924)

    End Select
    
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)

    Exit Function
        
End Function


Function RegiaoVenda_Exclui(ByVal objRegiaoVenda As ClassRegiaoVenda) As Long
'exclui regiao de venda do BD

Dim lComando1 As Long
Dim lComando2 As Long
Dim lTransacao As Long
Dim lErro As Long
Dim sDescricao As String

On Error GoTo Erro_RegiaoVenda_Exclui

    lComando1 = 0
    lComando2 = 0
    lTransacao = 0

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 16181

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then gError 16182

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 16183

    sDescricao = String(STRING_REGIAO_VENDA_DESCRICAO, 0)

    'pesquisa regiao de venda no BD
    lErro = Comando_ExecutarPos(lComando1, "SELECT Descricao FROM RegioesVendas WHERE Codigo = ? ", 0, sDescricao, objRegiaoVenda.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 16184

    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 16185

    If lErro = AD_SQL_SEM_DADOS Then gError 16186

    'lock da regiao de venda
    lErro = Comando_LockExclusive(lComando1)
    If lErro <> AD_SQL_SUCESSO Then gError 16187

    'verifica se regiao de venda esta relacionada com Vendedores
    lErro = CF("Vendedores_Le_Regiao", objRegiaoVenda.iCodigo)
    If lErro <> SUCESSO And lErro <> 16172 Then gError 16193

    If lErro = SUCESSO Then gError 16194
    
    'verifica se regiao de venda esta relacionada com Vendedores
    lErro = CF("PrevVenda_Le_Regiao", objRegiaoVenda.iCodigo)
    If lErro <> SUCESSO And lErro <> 52924 Then gError 52919

    If lErro = SUCESSO Then gError 52920
    
    'verifica se regiao de venda está relacionada com Filiais Clientes
    lErro = CF("FiliaisClientes_Le_Regiao", objRegiaoVenda.iCodigo)
    If lErro <> SUCESSO And lErro <> 16176 Then gError 16195

    If lErro = SUCESSO Then gError 16196

    'verifica se regiao de venda está relacionada com Tipos de Cliente
    lErro = CF("TiposDeCliente_Le_Regiao", objRegiaoVenda.iCodigo)
    If lErro <> SUCESSO And lErro <> 16180 Then gError 16197

    If lErro = SUCESSO Then gError 16198

    lErro = CF("RegiaoVenda_Exclui_Customizado", objRegiaoVenda)
    If lErro <> SUCESSO Then gError 197183

    'exclui regiao da tabela Regioes
    lErro = Comando_ExecutarPos(lComando2, "DELETE FROM RegioesVendas", lComando1)
    If lErro <> AD_SQL_SUCESSO Then gError 16188

    'confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 16189

    lErro = Comando_Fechar(lComando1)
    lErro = Comando_Fechar(lComando2)

    RegiaoVenda_Exclui = SUCESSO

    Exit Function

Erro_RegiaoVenda_Exclui:

    RegiaoVenda_Exclui = gErr

    Select Case gErr

        Case 16181, 16182
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 16183
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 16184, 16185
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_REGIOESVENDAS", gErr, objRegiaoVenda.iCodigo)

        Case 16186
            Call Rotina_Erro(vbOKOnly, "ERRO_REGIAO_VENDA_NAO_CADASTRADA", gErr, objRegiaoVenda.iCodigo)

        Case 16187
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_REGIOESVENDAS", gErr, objRegiaoVenda.iCodigo)

        Case 16188
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_REGIOESVENDAS", gErr, objRegiaoVenda.iCodigo)

        Case 16189
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case 16194
            Call Rotina_Erro(vbOKOnly, "ERRO_REGIAO_VENDA_RELACIONADA_COM_VENDEDOR", gErr)
            
        Case 16193, 16195, 16197, 52919, 197183
            'Erro tratado na rotina chamada
                    
        Case 16196
            Call Rotina_Erro(vbOKOnly, "ERRO_REGIAO_VENDA_RELACIONADA_COM_FILIAIS_CLIENTES", gErr)
            
        Case 16198
            Call Rotina_Erro(vbOKOnly, "ERRO_REGIAO_VENDA_RELACIONADA_COM_TIPOSDECLIENTE", gErr)
        
        Case 52920
            Call Rotina_Erro(vbOKOnly, "ERRO_REGIAO_VENDA_RELACIONADA_COM_PREVVENDA", gErr)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 147925)

    End Select

    Call Transacao_Rollback
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)

    Exit Function

End Function

Function RegiaoVenda_Grava(ByVal objRegiaoVenda As ClassRegiaoVenda) As Long
'Atualiza ou insere um novo registro na tabela RegioesVendas

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_RegiaoVenda_Grava

    'inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 16157

    lErro = CF("RegiaoVenda_Grava_EmTrans", objRegiaoVenda)
    If lErro <> SUCESSO Then gError 76397
    
    'Confirma a Transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 16165
    
    RegiaoVenda_Grava = SUCESSO

    Exit Function

Erro_RegiaoVenda_Grava:

    RegiaoVenda_Grava = gErr

        Select Case gErr

        Case 16157
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 16165
             Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case 76397
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 147926)

    End Select

    Call Transacao_Rollback
    
    Exit Function

End Function

Function RegiaoVenda_Grava_EmTrans(ByVal objRegiaoVenda As ClassRegiaoVenda) As Long
'Atualiza ou insere um novo registro na tabela RegioesVendas

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim lComando2 As Long
Dim lComando3 As Long
Dim sDescricao As String
Dim sGerente As String
Dim iCodigoPais As Integer

On Error GoTo Erro_RegiaoVenda_Grava_EmTrans

    lComando = 0
    lComando1 = 0
    lComando2 = 0
    lComando3 = 0

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 16154

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 16155

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then gError 16156
    
    lComando3 = Comando_Abrir()
    If lComando3 = 0 Then gError 16139
    
    sDescricao = String(STRING_REGIAO_VENDA_DESCRICAO, 0)

    'pesquisa descricao nas outras regioes de venda no BD
    lErro = Comando_Executar(lComando, "SELECT Descricao FROM RegioesVendas WHERE Codigo <> ? AND Descricao = ?", sDescricao, objRegiaoVenda.iCodigo, objRegiaoVenda.sDescricao)
    If lErro <> AD_SQL_SUCESSO Then gError 16158

    'verifica resultado da pesquisa
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 16159

    If lErro <> AD_SQL_SEM_DADOS Then gError 16160

    sGerente = String(STRING_REGIAO_VENDA_GERENTE, 0)
    
    'pesquisa regiao de venda no BD
    lErro = Comando_ExecutarPos(lComando1, "SELECT CodigoPais, Gerente FROM RegioesVendas WHERE Codigo = ? ", 0, iCodigoPais, sGerente, objRegiaoVenda.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 16161

    'verifica resultado da pesquisa
    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 16162

    If lErro = AD_SQL_SEM_DADOS Then
    'Região de venda nao pertence ao BD

        lErro = CF("Pais_Lock", objRegiaoVenda.iCodigoPais, lComando3)
        If lErro <> SUCESSO Then gError 16140
        
        'Insere novo registro na tabela RegioesVendas
        lErro = Comando_Executar(lComando2, "INSERT INTO RegioesVendas (Codigo, Descricao, CodigoPais, Gerente, UsuarioCobrador,UsuRespCallCenter) VALUES (?,?,?,?,?,?)", objRegiaoVenda.iCodigo, objRegiaoVenda.sDescricao, objRegiaoVenda.iCodigoPais, objRegiaoVenda.sGerente, objRegiaoVenda.sUsuarioCobrador, objRegiaoVenda.sUsuRespCallCenter)
        If lErro <> AD_SQL_SUCESSO Then gError 16163

    Else
    'Região de venda existe no BD

        'se trocou pais
        If iCodigoPais <> objRegiaoVenda.iCodigoPais Then
        
            lErro = CF("Pais_Lock", objRegiaoVenda.iCodigoPais, lComando3)
            If lErro <> SUCESSO Then gError 16141
            
        End If
        
        'Altera registro na tabela RegioesVendas
        lErro = Comando_ExecutarPos(lComando2, "UPDATE RegioesVendas SET Descricao = ? , CodigoPais = ? , Gerente = ?, UsuarioCobrador = ?, UsuRespCallCenter = ? ", lComando1, objRegiaoVenda.sDescricao, objRegiaoVenda.iCodigoPais, objRegiaoVenda.sGerente, objRegiaoVenda.sUsuarioCobrador, objRegiaoVenda.sUsuRespCallCenter)
        If lErro <> AD_SQL_SUCESSO Then gError 16164

    End If

    lErro = CF("RegiaoVenda_Grava_Customizacao", objRegiaoVenda)
    If lErro <> SUCESSO Then gError 197180

    lErro = Comando_Fechar(lComando)
    lErro = Comando_Fechar(lComando1)
    lErro = Comando_Fechar(lComando2)
    lErro = Comando_Fechar(lComando3)
    
    RegiaoVenda_Grava_EmTrans = SUCESSO

    Exit Function

Erro_RegiaoVenda_Grava_EmTrans:

    RegiaoVenda_Grava_EmTrans = gErr

    Select Case gErr

        Case 16154, 16155, 16156, 16139
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 16158, 16159, 16161, 16162
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_REGIOESVENDAS", gErr, objRegiaoVenda.iCodigo)

        Case 16160
            Call Rotina_Erro(vbOKOnly, "ERRO_DESCRICAO_REPETIDA", gErr)

        Case 16163
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_REGIOESVENDAS", gErr, objRegiaoVenda.iCodigo)

        Case 16164
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_REGIOESVENDAS", gErr, objRegiaoVenda.iCodigo)

        Case 16141, 197180
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 147927)

    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)
    
    Exit Function

End Function

Function Pais_Lock(ByVal iCodigoPais As Integer, ByVal lComando As Long) As Long
'Rotina executada dentro de uma transacao
'faz lock shared no Codigo País passado como parametro

Dim lErro As Long
Dim iCodigoPais1 As Integer

On Error GoTo Erro_Pais_Lock
    
    'pesquisa Codigo do País no BD
    lErro = Comando_ExecutarLockado(lComando, "SELECT Codigo FROM Paises WHERE Codigo = ? ", iCodigoPais1, iCodigoPais)
    If lErro <> AD_SQL_SUCESSO Then Error 16142

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 16143

    If lErro = AD_SQL_SEM_DADOS Then Error 16144
    
    lErro = Comando_LockShared(lComando)
    If lErro <> AD_SQL_SUCESSO Then Error 16145
            
    Pais_Lock = SUCESSO

    Exit Function

Erro_Pais_Lock:

    Pais_Lock = Err

    Select Case Err

        Case 16142, 16143
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CODIGO_PAIS", Err, iCodigoPais)

        Case 16144
            Call Rotina_Erro(vbOKOnly, "ERRO_CODIGO_PAIS_NAO_CADASTRADO", Err, iCodigoPais)

        Case 16145
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CODIGO_PAIS", Err, iCodigoPais)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 147928)

    End Select

    Exit Function

End Function

Function RegiaoVenda_Automatico(iCodigo As Integer) As Long
'retorna o código da próxima Regiao de Venda disponivel

Dim lErro As Long, lNumAuto As Long

On Error GoTo Erro_RegiaoVenda_Automatico

    'Gera número automático.
    lErro = CF("Config_ObterAutomatico", "CPRConfig", "NUM_PROX_REGIAO_VENDA", "RegioesVendas", "Codigo", lNumAuto)
    If lErro <> SUCESSO Then Error 16138

    iCodigo = lNumAuto
    
    RegiaoVenda_Automatico = SUCESSO

    Exit Function

Erro_RegiaoVenda_Automatico:

    RegiaoVenda_Automatico = Err

    Select Case Err

        Case 16138
         
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 147929)

    End Select

    Exit Function

End Function

Function Endereco_Automatico(lCodigo As Long) As Long
'retorna o número do proximo Endereco disponivel, funcao chamada dentro de uma transacao
Dim lErro As Long

On Error GoTo Erro_Endereco_Automatico

    lErro = CF("Config_ObterNumInt", "CPRConfig", "NUM_PROX_ENDERECO", lCodigo)
    If lErro <> SUCESSO Then Error 12497
    
    Endereco_Automatico = SUCESSO

    Exit Function

Erro_Endereco_Automatico:

    Endereco_Automatico = Err

    Select Case Err

    Case 12497

    Case Else
        Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 147930)

    End Select

    Exit Function

End Function

Function Endereco_Grava(ByVal objEndereco As ClassEndereco, Optional ByVal bTesteCidade As Boolean = True) As Long
'Grava o endereço no banco de dados.
'Chamada DENTRO DE TRANSAÇÃO.

Dim alComando(1 To 5) As Long
Dim lErro As Long, iIndice As Integer
Dim tEndereco As typeEndereco

On Error GoTo Erro_Endereco_Grava

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 124087
    Next
    
    If Len(Trim(objEndereco.sEndereco)) = 0 Then
        objEndereco.sEndereco = objEndereco.sTipoLogradouro
        objEndereco.sEndereco = objEndereco.sEndereco & IIf(Len(Trim(objEndereco.sEndereco)) <> 0, " ", "") & objEndereco.sLogradouro
        objEndereco.sEndereco = objEndereco.sEndereco & IIf(objEndereco.lNumero <> 0, ", " & CStr(objEndereco.lNumero), "")
        objEndereco.sEndereco = objEndereco.sEndereco & IIf(Len(Trim(objEndereco.sComplemento)) <> 0, " - " & objEndereco.sComplemento, "")
        If Len(objEndereco.sEndereco) > STRING_ENDERECO Then gError 202950
    End If

    If Len(Trim(objEndereco.sTelefone1)) = 0 Then
        objEndereco.sTelefone1 = IIf(objEndereco.iTelDDD1 <> 0, Format(objEndereco.iTelDDD1, "00"), "")
        objEndereco.sTelefone1 = objEndereco.sTelefone1 & IIf(Len(Trim(objEndereco.sTelefone1)) <> 0, " ", "") & objEndereco.sTelNumero1
        If Len(objEndereco.sTelefone1) > STRING_TELEFONE Then gError 202951
    End If
    
    If Len(Trim(objEndereco.sTelefone2)) = 0 Then
        objEndereco.sTelefone2 = IIf(objEndereco.iTelDDD2 <> 0, Format(objEndereco.iTelDDD2, "00"), "")
        objEndereco.sTelefone2 = objEndereco.sTelefone2 & IIf(Len(Trim(objEndereco.sTelefone2)) <> 0, " ", "") & objEndereco.sTelNumero2
        If Len(objEndereco.sTelefone2) > STRING_TELEFONE Then gError 202952
    End If
    
    If Len(Trim(objEndereco.sFax)) = 0 Then
        objEndereco.sFax = IIf(objEndereco.iFaxDDD <> 0, Format(objEndereco.iFaxDDD, "00"), "")
        objEndereco.sFax = objEndereco.sFax & IIf(Len(Trim(objEndereco.sFax)) <> 0, " ", "") & objEndereco.sFaxNumero
        If Len(objEndereco.sFax) > STRING_FAX Then gError 202953
    End If
    
    With tEndereco
        .sEndereco = String(STRING_ENDERECO, 0)
        .sBairro = String(STRING_BAIRRO, 0)
        .sCidade = String(STRING_CIDADE, 0)
        .sSiglaEstado = String(STRING_ESTADO, 0)
        .sCEP = String(STRING_CEP, 0)
        .sTelefone1 = String(STRING_TELEFONE, 0)
        .sTelefone2 = String(STRING_TELEFONE, 0)
        .sEmail = String(STRING_EMAIL, 0)
        .sFax = String(STRING_FAX, 0)
        .sContato = String(STRING_CONTATO, 0)
    End With
    
    'Verifica se o endereco existe, e se existir carrega seus dados em objEndereco
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Codigo, Endereco, Bairro, Cidade, SiglaEstado, CodigoPais, CEP, telefone1, telefone2, Email, Fax, Contato FROM Enderecos WHERE Codigo = ?", 0, tEndereco.lCodigo, tEndereco.sEndereco, tEndereco.sBairro, tEndereco.sCidade, tEndereco.sSiglaEstado, tEndereco.iCodigoPais, tEndereco.sCEP, tEndereco.sTelefone1, tEndereco.sTelefone2, tEndereco.sEmail, tEndereco.sFax, tEndereco.sContato, objEndereco.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 124088

    'le o Endereco, se estiver no BD
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 124089

    'encontrou o endereco ==> isto é uma alteração
    If lErro = AD_SQL_SUCESSO Then

        If bTesteCidade Then

            If objEndereco.sCidade <> tEndereco.sCidade Then
            
                lErro = CF("Cidade_Lock_Nome", objEndereco.sCidade, alComando(4))
                If lErro <> SUCESSO Then gError 124090
                
            End If
        
        End If
        
        If objEndereco.iCodigoPais <> tEndereco.iCodigoPais Then
            lErro = CF("Pais_Lock", objEndereco.iCodigoPais, alComando(5))
            If lErro <> SUCESSO Then gError 124091
        End If
        
        'atualiza o endereco
        lErro = Comando_ExecutarPos(alComando(2), "UPDATE Enderecos SET Endereco = ?, Bairro = ?, Cidade = ?, SiglaEstado = ?, CodigoPais = ?, CEP = ?, Telefone1 = ?, Telefone2 = ?, Email = ?, Fax = ?, Contato = ?, Referencia= ?,Logradouro= ?,Complemento= ?,TipoLogradouro= ?,Email2= ?,Numero= ?,TelDDD1= ?,TelDDD2= ?,FaxDDD= ?,TelNumero1= ?,TelNumero2= ?,FaxNumero= ?", alComando(1), objEndereco.sEndereco, objEndereco.sBairro, objEndereco.sCidade, objEndereco.sSiglaEstado, objEndereco.iCodigoPais, objEndereco.sCEP, objEndereco.sTelefone1, objEndereco.sTelefone2, objEndereco.sEmail, objEndereco.sFax, objEndereco.sContato, objEndereco.sReferencia, objEndereco.sLogradouro, objEndereco.sComplemento, objEndereco.sTipoLogradouro, objEndereco.sEmail2, objEndereco.lNumero, objEndereco.iTelDDD1, objEndereco.iTelDDD2, objEndereco.iFaxDDD, objEndereco.sTelNumero1, objEndereco.sTelNumero2, objEndereco.sFaxNumero)
        If lErro <> AD_SQL_SUCESSO Then gError 124092

    Else

        If bTesteCidade = True Then

            lErro = CF("Cidade_Lock_Nome", objEndereco.sCidade, alComando(4))
            If lErro <> SUCESSO Then gError 124093
        
        End If
        
        lErro = CF("Pais_Lock", objEndereco.iCodigoPais, alComando(5))
        If lErro <> SUCESSO Then gError 124094
        
        'não encontrou o endereco ==>  é uma inserção de endereco
        lErro = Comando_Executar(alComando(3), "INSERT INTO Enderecos (Codigo,Endereco,Bairro,Cidade,SiglaEstado,CodigoPais,CEP,Telefone1,Telefone2,Email,Fax,Contato, Referencia,Logradouro,Complemento,TipoLogradouro,Email2,Numero,TelDDD1,TelDDD2,FaxDDD,TelNumero1,TelNumero2,FaxNumero) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", objEndereco.lCodigo, objEndereco.sEndereco, objEndereco.sBairro, objEndereco.sCidade, objEndereco.sSiglaEstado, objEndereco.iCodigoPais, objEndereco.sCEP, objEndereco.sTelefone1, objEndereco.sTelefone2, objEndereco.sEmail, objEndereco.sFax, objEndereco.sContato, objEndereco.sReferencia, objEndereco.sLogradouro, objEndereco.sComplemento, objEndereco.sTipoLogradouro, objEndereco.sEmail2, objEndereco.lNumero, objEndereco.iTelDDD1, objEndereco.iTelDDD2, objEndereco.iFaxDDD, objEndereco.sTelNumero1, objEndereco.sTelNumero2, objEndereco.sFaxNumero)
        If lErro <> AD_SQL_SUCESSO Then gError 124095

    End If

    lErro = CF("Endereco_Grava_Customizado", objEndereco)
    If lErro <> SUCESSO Then gError 196221

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Endereco_Grava = SUCESSO

    Exit Function

Erro_Endereco_Grava:

    Endereco_Grava = gErr

    Select Case gErr

        Case 124090, 124091, 124093, 124094, 196221
        
        Case 124087
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 124088, 124089
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ENDERECOS", gErr)

        Case 124092
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_ENDERECO", gErr)

        Case 124095
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_ENDERECO", gErr)
            
        Case 202950
            Call Rotina_Erro(vbOKOnly, "ERRO_ENDERECO_MAIOR_MAXIMO", gErr, Len(objEndereco.sEndereco), STRING_ENDERECO)

        Case 202951
            Call Rotina_Erro(vbOKOnly, "ERRO_TELEFONE1_MAIOR_MAXIMO", gErr, Len(objEndereco.sTelefone1), STRING_TELEFONE)

        Case 202952
            Call Rotina_Erro(vbOKOnly, "ERRO_TELEFONE2_MAIOR_MAXIMO", gErr, Len(objEndereco.sTelefone2), STRING_TELEFONE)

        Case 202953
            Call Rotina_Erro(vbOKOnly, "ERRO_FAX_MAIOR_MAXIMO", gErr, Len(objEndereco.sFax), STRING_FAX)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 147931)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function FiliaisClientes_Automatico_EmTrans(ByVal lCodCliente As Long, iCodigo As Integer) As Long
'retorna o número da proxima Filial Cliente disponivel em iCodigo em relacao ao numero de cliente passado em lCodigo

Dim lComando1 As Long
Dim lComando2 As Long
Dim lComando3 As Long
Dim lErro As Long
Dim lTransacao As Long
Dim iCodigo_Automatico As Integer
Dim iCodFilial As Integer

On Error GoTo Erro_FiliaisClientes_Automatico_EmTrans

    lComando1 = 0
    lComando2 = 0
    lComando3 = 0
    lTransacao = 0

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 12700

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 12701

    lComando3 = Comando_Abrir()
    If lComando3 = 0 Then Error 12702
    
    'Seleciona o Proximo Codigo da Filial , do respectivo Cliente
    lErro = Comando_ExecutarPos(lComando1, "SELECT ProxCodFilial FROM Clientes WHERE Codigo = ?", 0, iCodigo_Automatico, lCodCliente)
    If lErro <> AD_SQL_SUCESSO Then Error 12704

    'le o registro com o número da próxima Filial
    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO Then Error 12705

    'loca o registro que guarda o numero da Filial Cliente gerado automaticamente
    lErro = Comando_LockExclusive(lComando1)
    If lErro <> AD_SQL_SUCESSO Then Error 12706

    'verifica se este número ainda não foi utilizado
    'Pesquisa as numerações de Filiais maiores ou iguais a numeração gerada automaticamente
    lErro = Comando_Executar(lComando2, "SELECT CodFilial FROM FiliaisClientes WHERE CodCliente = ? AND CodFilial >= ? ORDER BY CodFilial", iCodFilial, lCodCliente, iCodigo_Automatico)
    If lErro <> AD_SQL_SUCESSO Then Error 12707

    'le o primeiro codigo >= ao codigo automatico
    lErro = Comando_BuscarPrimeiro(lComando2)
    If lErro <> AD_SQL_SEM_DADOS And lErro <> AD_SQL_SUCESSO Then Error 12707

    'pesquisa o proximo número de codigo disponível
    Do While lErro <> AD_SQL_SEM_DADOS

        If iCodFilial > iCodigo_Automatico Then Exit Do

        If iCodFilial = iCodigo_Automatico Then
            iCodigo_Automatico = iCodigo_Automatico + 1
        End If

        lErro = Comando_BuscarProximo(lComando2)
        If lErro <> AD_SQL_SEM_DADOS And lErro <> AD_SQL_SUCESSO Then Error 12707

    Loop

    'Valor de retorno da funcao
    iCodigo = iCodigo_Automatico

    iCodigo_Automatico = iCodigo_Automatico + 1

    'atualiza o numero do cliente gerado automaticamente
    lErro = Comando_ExecutarPos(lComando3, "UPDATE Clientes SET ProxCodFilial = ?", lComando1, iCodigo_Automatico)
    If lErro <> AD_SQL_SUCESSO Then Error 12708

    lErro = Comando_Fechar(lComando1)
    lErro = Comando_Fechar(lComando2)
    lErro = Comando_Fechar(lComando3)

    FiliaisClientes_Automatico_EmTrans = SUCESSO

    Exit Function

Erro_FiliaisClientes_Automatico_EmTrans:

    FiliaisClientes_Automatico_EmTrans = Err

    Select Case Err

    Case 12700, 12701, 12702
        Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

    Case 12704, 12705
        Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CLIENTES", Err)

    Case 12706
        Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CLIENTES", Err)

    Case 12707
        Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CLIENTES", Err)

    Case 12708
        Call Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_CLIENTE", Err, lCodCliente)

    Case 12709
        Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

    Case Else
        Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 147932)

    End Select

    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)

    Exit Function

End Function

Function FiliaisClientes_Automatico(ByVal lCodCliente As Long, iCodigo As Integer) As Long
'retorna o número da proxima Filial Cliente disponivel em iCodigo em relacao ao numero de cliente passado em lCodigo

Dim lComando1 As Long
Dim lComando2 As Long
Dim lComando3 As Long
Dim lErro As Long
Dim lTransacao As Long
Dim iCodigo_Automatico As Integer
Dim iCodFilial As Integer

On Error GoTo Erro_FiliaisClientes_Automatico

    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 12703
    
    lErro = CF("FiliaisClientes_Automatico_EmTrans", lCodCliente, iCodigo)
    If lErro <> SUCESSO Then gError 119020
    
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 12709

    FiliaisClientes_Automatico = SUCESSO

    Exit Function

Erro_FiliaisClientes_Automatico:

    FiliaisClientes_Automatico = gErr

    Select Case gErr

    Case 12703
        Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

    Case 12709
        Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
    
    Case 119020
    
    Case Else
        Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 147933)

    End Select

    Call Transacao_Rollback

    Exit Function

End Function

Function Endereco_Exclui(ByVal lCodEndereco As Long) As Long
'Exclui o Endereco cujo código foi passado
'Chamada DENTRO DE TRANSAÇÃO

Dim lErro As Long
Dim lComando1 As Long
Dim lComando2 As Long
Dim lCodigo As Long

On Error GoTo Erro_Endereco_Exclui

    lComando1 = 0
    lComando2 = 0
    
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 12888

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 12889

    'Seleciona o Endereco a ser excluido
    lErro = Comando_ExecutarPos(lComando1, "SELECT Codigo FROM Enderecos WHERE Codigo =? ", 0, lCodigo, lCodEndereco)
    If lErro <> AD_SQL_SUCESSO Then Error 12891

    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 12892

    If lErro = AD_SQL_SEM_DADOS Then Error 12893

    'Lock da Endereco
    lErro = Comando_LockExclusive(lComando1)
    If lErro <> AD_SQL_SUCESSO Then Error 12894

    'Exclui o Endereco
    lErro = Comando_ExecutarPos(lComando2, "DELETE FROM Enderecos", lComando1)
    If lErro <> AD_SQL_SUCESSO Then Error 12895

    lErro = Comando_Fechar(lComando1)
    lErro = Comando_Fechar(lComando2)

    Endereco_Exclui = SUCESSO

    Exit Function

Erro_Endereco_Exclui:

    Endereco_Exclui = Err

    Select Case Err

        Case 12888, 12889
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 12891, 12892
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ENDERECOS", Err)

        Case 12893 'Endereco inexistente

        Case 12894
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_ENDERECOS", Err)

        Case 12895
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_ENDERECO", Err, lCodEndereco)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 147934)

    End Select

    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)

    Exit Function

End Function

''Function Fornecedor_Exclui(objFornecedor As ClassFornecedor) As Long
'''Exclui o Fornecedor e suas filiais
''
''Dim lErro As Long
''Dim lComando1 As Long
''Dim lComando2 As Long
''Dim lComando3 As Long
''Dim lComando4 As Long
''Dim lTransacao As Long
''Dim lEndereco As Long
''Dim lCodigo As Long
''
''On Error GoTo Erro_Fornecedor_Exclui
''
''    'Inicializa comandos
''    lComando1 = Comando_Abrir()
''    If lComando1 = 0 Then gError 12834
''
''    lComando2 = Comando_Abrir()
''    If lComando2 = 0 Then gError 12835
''
''    lComando3 = Comando_Abrir()
''    If lComando3 = 0 Then gError 12836
''
''    lComando4 = Comando_Abrir()
''    If lComando4 = 0 Then gError 12837
''
''    'Inicia a Transacao
''    lTransacao = Transacao_Abrir()
''    If lTransacao = 0 Then gError 12838
''
''    'Seleciona o Fornecedor a ser excluido
''    lErro = Comando_ExecutarPos(lComando1, "SELECT Codigo FROM Fornecedores WHERE Codigo =?", 0, lCodigo, objFornecedor.lCodigo)
''    If lErro <> AD_SQL_SUCESSO Then gError 12839
''
''    lErro = Comando_BuscarPrimeiro(lComando1)
''    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 12840
''
''    If lErro = AD_SQL_SEM_DADOS Then gError 12841
''
''    'Lock do Fornecedor
''    lErro = Comando_LockExclusive(lComando1)
''    If lErro <> AD_SQL_SUCESSO Then gError 12842
''
''    'Lock das Filiais
''    lErro = CF("FiliaisFornecedores_Lock",objFornecedor.lCodigo)
''    If lErro <> SUCESSO Then gError 12843
''
''    'Verifica se Fornecedor está relacionado a outros objetos
''    lErro = CF("Fornecedor_Objetos_Relacionados_Testa",objFornecedor)
''    If lErro <> SUCESSO Then gError 33848
''
''    'Exclui registros de MvDiaForn ligados a Fornecedor
''    lErro = CF("MvDiaForn_Exclui_Fornecedor",objFornecedor)
''    If lErro <> SUCESSO Then gError 33827
''
''    'Exclui os registros de MvPerForn relacionados ao Fornecedor.
''    lErro = CF("MvPerForn_Exclui_Fornecedor",objFornecedor)
''    If lErro <> SUCESSO Then gError 33828
''
''    'Seleciona as Filiais do Fornecedor a serem excluídas
''    lErro = Comando_ExecutarPos(lComando3, "SELECT CodFornecedor, Endereco FROM FiliaisFornecedores WHERE CodFornecedor =?", 0, lCodigo, lEndereco, objFornecedor.lCodigo)
''    If lErro <> AD_SQL_SUCESSO Then gError 12852
''
''    lErro = Comando_BuscarPrimeiro(lComando3)
''    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 12853
''
''    If lErro = AD_SQL_SEM_DADOS Then gError 12854
''
''    Do While lErro = AD_SQL_SUCESSO
''
''        'Deleta cada Filial do respectivo Fornecedor
''        lErro = Comando_ExecutarPos(lComando4, "DELETE FROM FiliaisFornecedores", lComando3)
''        If lErro <> AD_SQL_SUCESSO Then gError 12855
''
''        'Exclui Endereco da Filial.
''        lErro = CF("Endereco_Exclui",lEndereco)
''        If lErro <> SUCESSO Then gError 12898
''
''        lErro = Comando_BuscarProximo(lComando3)
''
''    Loop
''
''    'Deleta o Fornecedor em questão
''    lErro = Comando_ExecutarPos(lComando2, "DELETE FROM Fornecedores", lComando1)
''    If lErro <> AD_SQL_SUCESSO Then gError 12856
''
''    'Confirma a transação
''    lErro = Transacao_Commit()
''    If lErro <> AD_SQL_SUCESSO Then gError 12857
''
''    'Libera comandos
''    Call Comando_Fechar(lComando1)
''    Call Comando_Fechar(lComando2)
''    Call Comando_Fechar(lComando3)
''    Call Comando_Fechar(lComando4)
''
''    Fornecedor_Exclui = SUCESSO
''
''    Exit Function
''
''Erro_Fornecedor_Exclui:
''
''    Fornecedor_Exclui = Err
''
''    Select Case Err
''
''        Case 12834, 12835, 12836, 12837
''            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
''
''        Case 12838
''            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
''
''        Case 12839, 12840
''            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FORNECEDORES", Err)
''
''        Case 12841
''            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECEDOR_NAO_CADASTRADO", Err, objFornecedor.lCodigo)
''
''        Case 12842
''            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_FORNECEDORES", Err, objFornecedor.lCodigo)
''
''        Case 12843, 12844, 12846, 12848, 12898, 33827, 33828, 33848
''
''        Case 12845
''            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECEDOR_REL_NOTA_FISCAL_EXT", Err)
''
''        Case 12847
''            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECEDOR_REL_TITULOS_PAGAR", Err)
''
''        Case 12849
''            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECEDOR_REL_CREDITOS_PAGAR", Err)
''
''        Case 12852, 12853
''            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIAISFORNECEDORES", Err)
''
''        Case 12854
''            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECEDOR_SEM_FILIAL", Err, objFornecedor.lCodigo)
''
''        Case 12855
''            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_FILIAISFORNECEDORES", Err, objFornecedor.lCodigo)
''
''        Case 12856
''            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_FORNECEDOR", Err, objFornecedor.lCodigo)
''
''        Case 12857
''            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
''
''        Case Else
''            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 147935)
''
''    End Select
''
''    Call Transacao_Rollback
''
''    'Libera comandos
''    Call Comando_Fechar(lComando1)
''    Call Comando_Fechar(lComando2)
''    Call Comando_Fechar(lComando3)
''    Call Comando_Fechar(lComando4)
''
''    Exit Function
''
''End Function
''
Function Fornecedor_Grava_EmTrans(ByVal objFornecedor As ClassFornecedor, ByVal objEndereco As ClassEndereco) As Long
'Grava um novo Fornecedor ou atualiza um já existente

Dim lErro As Long
Dim lComando1 As Long
Dim lComando2 As Long
Dim lComando3 As Long
Dim lComando4 As Long
Dim lCodigo As Long
Dim lCodEndereco As Long
Dim tFornecedor As typeFornecedor
Dim colCategoriaItemCopia As New Collection
Dim objFilialFornecedor As New ClassFilialFornecedor
Dim objFilialFornCategoria As ClassFilialFornCategoria
Dim objFornecedor1 As New ClassFornecedor
Dim objFornecedorHistorico As New ClassFornecedorHistorico
Dim objPais As New ClassPais

On Error GoTo Erro_Fornecedor_Grava_EmTrans

    tFornecedor.sRazaoSocial = String(STRING_FORNECEDOR_RAZAO_SOC, 0)
    tFornecedor.sNomeReduzido = String(STRING_FORNECEDOR_NOME_REDUZIDO, 0)
    tFornecedor.sObservacao = String(STRING_FORNECEDOR_OBS, 0)
    tFornecedor.sNome = String(STRING_FILIAL_FORNECEDOR_NOME, 0)
    tFornecedor.sCgc = String(STRING_CGC, 0)
    tFornecedor.sIdEstrangeiro = String(STRING_ID_ESTRANGEIRO, 0)
    tFornecedor.sInscricaoEstadual = String(STRING_INSCR_EST, 0)
    tFornecedor.sInscricaoMunicipal = String(STRING_INSCR_MUN, 0)
    tFornecedor.sInscricaoSuframa = String(STRING_INSCR_SUF, 0)
    tFornecedor.sContaContabil = String(STRING_CONTA, 0)
    tFornecedor.sContaFornConsig = String(STRING_CONTA, 0)
    tFornecedor.sAgencia = String(STRING_AGENCIA, 0)
    tFornecedor.sContaCorrente = String(STRING_CONTA_CORRENTE, 0)
    tFornecedor.sObservacao2 = String(STRING_FILIAL_FORNECEDOR_OBS, 0)
    
    'Inicializa comandos
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 12801

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then gError 12802

    lComando3 = Comando_Abrir()
    If lComando3 = 0 Then gError 12803

    lComando4 = Comando_Abrir()
    If lComando4 = 0 Then gError 12804
   
    '***** Janaina *****
    'Cria uma cópia "de trabalho" da coleção passada como parâmetro
    For Each objFilialFornCategoria In objFornecedor.colCategoriaItem
        colCategoriaItemCopia.Add objFilialFornCategoria
    Next
    '*******************
    
    'Procura por um outro Nome Reduzido ja cadastrado
    lErro = Comando_Executar(lComando1, "SELECT Codigo FROM Fornecedores WHERE Codigo <> ? AND NomeReduzido = ? ", lCodigo, objFornecedor.lCodigo, objFornecedor.sNomeReduzido)
    If lErro <> AD_SQL_SUCESSO Then gError 12806

    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 12807

    'Se existir outro Nome Reduzido acusa erro
    If lErro <> AD_SQL_SEM_DADOS Then gError 12808

    'Faz os locks nas tabelas ligadas ao cadastramento de um novo Fornecedor
    lErro = CF("Fornecedores_Le_Tabelas_Lock", objFornecedor)
    If lErro <> SUCESSO Then gError 12809

    'Atualiza os dados para futura gravacao de histórico
    With objFornecedorHistorico
    
        .dtDataAtualizacao = gdtDataHoje
        .iFilialForn = FILIAL_MATRIZ
        .lCodigo = objFornecedor.lCodigo
        .sBairro = objEndereco.sBairro
        .sCEP = objEndereco.sCEP
        .sCgc = objFornecedor.sCgc
        .sCidade = objEndereco.sCidade
        .sEndereco = objEndereco.sEndereco
        .sInscricaoEstadual = objFornecedor.sInscricaoEstadual
        .sInscricaoMunicipal = objFornecedor.sInscricaoMunicipal
        .sUF = objEndereco.sSiglaEstado
        .sRazaoSocial = objFornecedor.sRazaoSocial
        
        'Le o nome do Pais com o codigo no obj
        objPais.iCodigo = objEndereco.iCodigoPais
        lErro = CF("Paises_Le", objPais)
        If lErro <> SUCESSO And lErro <> 47876 Then gError 97583
    
        'Pais não está cadastrado - --- -> Erro
        If lErro = 47876 Then gError 97584
        
        .sPais = objPais.sNome
        
    End With
    
    'FAZ A GRAVACAO DO HISTORICO
    lErro = FornecedorHistorico_Grava(objFornecedorHistorico)
    If lErro <> SUCESSO Then gError 97585

    'Lê o Fornecedor no BD
    lErro = Comando_ExecutarPos(lComando2, "SELECT Codigo, RazaoSocial, NomeReduzido, Tipo, Observacao, CondicaoPagto, Desconto, ProxCodFilial FROM Fornecedores WHERE Codigo = ?", 0, _
        tFornecedor.lCodigo, tFornecedor.sRazaoSocial, tFornecedor.sNomeReduzido, tFornecedor.iTipo, tFornecedor.sObservacao, tFornecedor.iCondicaoPagto, tFornecedor.dDesconto, tFornecedor.iProxCodFilial, objFornecedor.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 12810

    lErro = Comando_BuscarPrimeiro(lComando2)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 12811

    'Fornecedor não está cadastrado - GRAVACAO
    If lErro = AD_SQL_SEM_DADOS Then

        'Gera codigo para o novo endereco
        lErro = CF("Endereco_Automatico", lCodEndereco)
        If lErro <> SUCESSO Then gError 12796

        objEndereco.lCodigo = lCodEndereco
        
        'Grava o Endereco do Fornecedor
        lErro = CF("Endereco_Grava", objEndereco)
        If lErro <> SUCESSO Then gError 12797
    
        'Insere o Fornecedor na tabela Fornecedores
        lErro = Comando_Executar(lComando3, "INSERT INTO Fornecedores (Codigo, RazaoSocial, NomeReduzido, Tipo, Observacao, CondicaoPagto, Desconto,ProxCodFilial, Ativo, Natureza) VALUES (?,?,?,?,?,?,?,?,?,?)", _
            objFornecedor.lCodigo, objFornecedor.sRazaoSocial, objFornecedor.sNomeReduzido, objFornecedor.iTipo, objFornecedor.sObservacao, objFornecedor.iCondicaoPagto, objFornecedor.dDesconto, 2, objFornecedor.iAtivo, objFornecedor.sNatureza) 'Alterado por Wagner
        If lErro <> AD_SQL_SUCESSO Then gError 12812

        'Insere o Fornecedor na tabela FiliaisFornecedores
        lErro = Comando_Executar(lComando4, "INSERT INTO FiliaisFornecedores (CodFornecedor, CodFilial, Nome, Endereco, CGC, IdEstrangeiro, InscricaoEstadual, InscricaoMunicipal, ContaContabil, ContaFornConsig, Banco, Agencia, ContaCorrente, Observacao, TipoFrete, InscricaoINSS, TipoCobranca, GeraCredICMS, ContaDespesa,InscricaoSuframa, RegimeTributario, IEIsento, IENaoContrib, DataRegistro, HoraRegistro, UsuarioRegistro) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
            objFornecedor.lCodigo, FILIAL_MATRIZ, MATRIZ, objEndereco.lCodigo, objFornecedor.sCgc, objFornecedor.sIdEstrangeiro, objFornecedor.sInscricaoEstadual, objFornecedor.sInscricaoMunicipal, objFornecedor.sContaContabil, objFornecedor.sContaFornConsig, objFornecedor.iBanco, objFornecedor.sAgencia, objFornecedor.sContaCorrente, objFornecedor.sObservacao2, objFornecedor.iTipoFrete, objFornecedor.sInscricaoINSS, objFornecedor.iTipoCobranca, objFornecedor.iGeraCredICMS, objFornecedor.sContaDespesa, objFornecedor.sInscricaoSuframa, objFornecedor.iRegimeTributario, objFornecedor.iIEIsento, objFornecedor.iIENaoContrib, Date, CDbl(Now), gsUsuario)
        If lErro <> AD_SQL_SUCESSO Then gError 12813
        
        '***** Janaina ******
        'Insere as categorias da filial do forn em FilialFornecedorCategorias
        objFilialFornecedor.lCodFornecedor = objFornecedor.lCodigo
        objFilialFornecedor.iCodFilial = FILIAL_MATRIZ
        lErro = FilialFornecedor_Insere_Categorias(objFilialFornecedor, colCategoriaItemCopia)
        If lErro <> SUCESSO Then gError 91269
        '********************

    Else 'Fornecedor já existe - MODIFICACAO
    
        'Seleciona a Filial Fornecedor e pega o valor da proxima Filial e do codigo de Endereco
        lErro = Comando_ExecutarPos(lComando4, "SELECT Nome, Endereco, CGC, IdEstrangeiro, InscricaoEstadual, InscricaoMunicipal, ContaContabil, ContaFornConsig, Banco, Agencia, ContaCorrente, Observacao FROM  FiliaisFornecedores WHERE CodFornecedor = ? AND CodFilial = ?", 0, _
        tFornecedor.sNome, tFornecedor.lEndereco, tFornecedor.sCgc, tFornecedor.sIdEstrangeiro, tFornecedor.sInscricaoEstadual, tFornecedor.sInscricaoMunicipal, tFornecedor.sContaContabil, tFornecedor.sContaFornConsig, tFornecedor.iBanco, tFornecedor.sAgencia, tFornecedor.sContaCorrente, tFornecedor.sObservacao2, objFornecedor.lCodigo, FILIAL_MATRIZ)
        If lErro <> AD_SQL_SUCESSO Then gError 12815

        lErro = Comando_BuscarPrimeiro(lComando4)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 12816
 
        objEndereco.lCodigo = tFornecedor.lEndereco
        
        lErro = CF("Endereco_Grava", objEndereco)
        If lErro <> SUCESSO Then gError 12500
        
        'Atualiza a tabela de Fornecedores
        lErro = Comando_ExecutarPos(lComando3, "UPDATE Fornecedores SET RazaoSocial = ?, NomeReduzido = ?, Tipo = ?, Observacao = ?, CondicaoPagto = ?, Desconto = ?, ProxCodFilial = ?, Ativo = ?, Natureza = ?", lComando2, _
            objFornecedor.sRazaoSocial, objFornecedor.sNomeReduzido, objFornecedor.iTipo, objFornecedor.sObservacao, objFornecedor.iCondicaoPagto, objFornecedor.dDesconto, tFornecedor.iProxCodFilial, objFornecedor.iAtivo, objFornecedor.sNatureza)
        If lErro <> AD_SQL_SUCESSO Then gError 12814

        'Atualiza a tabela de FiliaisFornecedores
        lErro = Comando_ExecutarPos(lComando1, "UPDATE FiliaisFornecedores SET Endereco = ?, CGC = ?, IdEstrangeiro = ?, InscricaoEstadual = ?, InscricaoMunicipal = ?, ContaContabil = ?, ContaFornConsig = ?, Banco = ?, Agencia =?, ContaCorrente =?, Observacao = ?, TipoFrete =?, InscricaoINSS =?, TipoCobranca =?, GeraCredICMS =?, ContaDespesa =?, InscricaoSuframa = ?, RegimeTributario = ?, IEIsento = ?, IENaoContrib = ?, DataAlteracao = ?, HoraAlteracao = ?, UsuarioAlteracao = ?", lComando4, _
            tFornecedor.lEndereco, objFornecedor.sCgc, objFornecedor.sIdEstrangeiro, objFornecedor.sInscricaoEstadual, objFornecedor.sInscricaoMunicipal, objFornecedor.sContaContabil, objFornecedor.sContaFornConsig, objFornecedor.iBanco, objFornecedor.sAgencia, objFornecedor.sContaCorrente, objFornecedor.sObservacao2, objFornecedor.iTipoFrete, objFornecedor.sInscricaoINSS, objFornecedor.iTipoCobranca, objFornecedor.iGeraCredICMS, objFornecedor.sContaDespesa, objFornecedor.sInscricaoSuframa, objFornecedor.iRegimeTributario, objFornecedor.iIEIsento, objFornecedor.iIENaoContrib, Date, CDbl(Now), gsUsuario)
        If lErro <> AD_SQL_SUCESSO Then gError 12817

        '****** Janaina ******
        'Atualiza as categorias da filial do Fornecedor
        objFilialFornecedor.lCodFornecedor = objFornecedor.lCodigo
        objFilialFornecedor.iCodFilial = FILIAL_MATRIZ
        lErro = FilialFornecedor_Atualiza_Categorias(objFilialFornecedor, colCategoriaItemCopia)
        If lErro <> SUCESSO Then gError 91270
        '*********************

    End If
        
    'Libera comandos
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)
    Call Comando_Fechar(lComando4)

    Fornecedor_Grava_EmTrans = SUCESSO

    Exit Function

Erro_Fornecedor_Grava_EmTrans:

    Fornecedor_Grava_EmTrans = gErr

    Select Case gErr

        Case 12801, 12802, 12803, 12804
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 12806, 12807, 12810, 12811
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FORNECEDORES", gErr)

        Case 12808
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECEDOR_NOME_RED_DUPLICADO", gErr)

        Case 12809, 12796, 12797, 12500, 91269, 91270

        Case 12812
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FORNECEDORES", gErr)

        Case 12813
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FILIAISFORNECEDORES", gErr)

        Case 12814
            Call Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_FORNECEDOR", gErr, objFornecedor.lCodigo)

        Case 12815
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIAISFORNECEDORES", gErr)

        Case 12816
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECEDOR_SEM_FILIAL", gErr, objFornecedor.lCodigo)

        Case 12817
            Call Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_FILIAISFORNECEDORES", gErr, objFornecedor.lCodigo, FILIAL_MATRIZ)
            
        Case 97583, 97585
        
        Case 97584
            Call Rotina_Erro(vbOKOnly, "ERRO_PAIS_NAO_CADASTRADO", gErr, objPais.iCodigo)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 147936)

    End Select

    'Libera comandos
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)
    Call Comando_Fechar(lComando4)

    Exit Function

End Function

Private Function FilialFornecedor_Atualiza_Categorias(ByVal objFilialFornecedor As ClassFilialFornecedor, ByVal colCategoriaItem As Collection) As Long
'atualiza as categorias da filial cliente no bd

'**** Janaina ******

Dim lErro As Long
Dim alComando(0 To 2) As Long
Dim lCliente As Long, sCategoria As String, sItem As String, sCategoria1 As String, sItem1 As String, iIndice As Integer
Dim objFilialFornCategoria As ClassFilialFornCategoria

On Error GoTo Erro_FilialFornecedor_Atualiza_Categorias

 'Abre o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 91208
    Next

    sCategoria = String(STRING_CATEGORIAFORNECEDOR_CATEGORIA, 0)
    sItem = String(STRING_CATEGORIAFORNECEDORITEM_ITEM, 0)

    'Percorre as categorias associadas a filial que já estão no bd
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Categoria, Item FROM FilialFornecedorCategorias WHERE Fornecedor = ? AND Filial = ?", 0, sCategoria, sItem, objFilialFornecedor.lCodFornecedor, objFilialFornecedor.iCodFilial)
    If lErro <> AD_SQL_SUCESSO Then gError 91209

    'Tenta ler
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 91230

    Do While lErro <> AD_SQL_SEM_DADOS

        iIndice = FilialFornecedor_Grava_CategoriaNaColecao(colCategoriaItem, sCategoria)

        If iIndice <> 0 Then
            
            Set objFilialFornCategoria = colCategoriaItem.Item(iIndice)
            
            'Se houver sido alterado o Item
            If objFilialFornCategoria.sItem <> sItem Then

                lErro = CategoriaFornecedorItem_Lock(sCategoria, objFilialFornCategoria.sItem, alComando(1))
                If lErro <> SUCESSO Then gError 91231
                
                'Atualiza a categoria da filial do Fornecedor
                lErro = Comando_ExecutarPos(alComando(2), "UPDATE FilialfornecedorCategorias SET Item = ?", alComando(0), objFilialFornCategoria.sItem)
                If lErro <> AD_SQL_SUCESSO Then gError 91232

            End If

            'Retira da coleção
            colCategoriaItem.Remove (iIndice)

        Else
            
            'Excluir registro em FilialFornCategoria
            lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM FilialfornecedorCategorias", alComando(0))
            If lErro <> AD_SQL_SUCESSO Then gError 91233
            
        End If

        'Tenta ler a próxima categoria do Fornecedor da filial
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 91234

    Loop

    'Chama Filialfornecedor_Insere_Categorias
    lErro = FilialFornecedor_Insere_Categorias(objFilialFornecedor, colCategoriaItem)
    If lErro <> SUCESSO Then gError 91234

   
    'Libera os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    FilialFornecedor_Atualiza_Categorias = SUCESSO

    Exit Function

Erro_FilialFornecedor_Atualiza_Categorias:

    FilialFornecedor_Atualiza_Categorias = gErr

    Select Case gErr

        Case 91208, 33038, 33071
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 91209, 91230
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIALFORNECEDORCATEGORIAS2", gErr, objFilialFornCategoria.lFornecedor)

        Case 91232
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_FILIALFORNECEDORCATEGORIAS", gErr, objFilialFornCategoria.lFornecedor)

        Case 33042
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FILIALFORNECEDORCATEGORIAS", gErr, objFilialFornCategoria.lFornecedor)

        Case 91231

        Case 91233
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_FILIALFORNECEDORCATEGORIAS1", gErr, objFilialFornecedor.lCodFornecedor, objFilialFornecedor.iCodFilial)

        Case 33107
            Call Rotina_Erro(vbOKOnly, "ERRO_ITEM_CATEGORIA_NAO_CADASTRADO", gErr, sItem, sCategoria)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 147937)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
         Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function CategoriaFornecedorItem_Lock(ByVal sCategoria As String, ByVal sItemCategoria As String, ByVal lComando As Long) As Long
'faz lock shared de uma CategoriaFornecedorItem para garantir a sua existencia

'***** Janaina ******

Dim sCategoriaItem As String
Dim lErro As Long

On Error GoTo Erro_CategoriaFornecedorItem_Lock

    sCategoriaItem = String(STRING_CATEGORIAFORNECEDORITEM_ITEM, 0)
                
    'Pesquisa a Item da CategoriaFornecedor
    lErro = Comando_ExecutarLockado(lComando, "SELECT Item FROM CategoriaFornecedorItem WHERE Categoria = ? AND Item = ?", sCategoriaItem, sCategoria, sItemCategoria)
    If lErro <> AD_SQL_SUCESSO Then gError 91196

    'Tenta ler
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 91197

    'Se não encontrou ==> erro
    If lErro = AD_SQL_SEM_DADOS Then Error 91198

    '"Lock" da CategoriaClienteItem
    lErro = Comando_LockShared(lComando)
    If lErro <> SUCESSO Then Error 91199
    
    CategoriaFornecedorItem_Lock = SUCESSO
    
    Exit Function
    
Erro_CategoriaFornecedorItem_Lock:

    CategoriaFornecedorItem_Lock = gErr
    
    Select Case Err
    
        Case 91196, 91197
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CATEGORIAFORNECEDORITEM", gErr, sCategoria)
        
        Case 91198
        
        Case 91199
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CATEGORIAFORNECEDORITEM2", gErr, sCategoria, sItemCategoria)
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 147938)

    End Select

    Exit Function
    
End Function

Private Function FilialFornecedor_Grava_CategoriaNaColecao(ByVal colCategoriaItem As Collection, ByVal sCategoria As String) As Long
'Retorna o Indice da Categoria na coleção ou Zero se não achá-la (na coleção)

'**** Janaina ****

Dim iIndice As Integer
Dim objFilailFornCategoria As New ClassFilialFornCategoria

    'Pesquisa a Categoria na coleção
    For iIndice = 1 To colCategoriaItem.Count

        Set objFilailFornCategoria = colCategoriaItem.Item(iIndice)

        'Se achou a categoria na coleção
        If objFilailFornCategoria.sCategoria = sCategoria Then

            FilialFornecedor_Grava_CategoriaNaColecao = iIndice

            Exit Function

        End If

    Next

    FilialFornecedor_Grava_CategoriaNaColecao = 0

End Function

'Alterada em 03/03/04 por Luiz Nogueira. Corrigido tratamento de erro, substituindo Error por gError
Private Function FilialFornecedor_Insere_Categorias(ByVal objFilialFornecedor As ClassFilialFornecedor, ByVal colCategoriaItem As Collection) As Long
'Percorre as Categorias na coleção incluindo-as no BD

'**** Janaina ******

Dim lErro As Long
Dim alComando(0 To 2) As Long
Dim sCategoria As String, sItem As String
Dim objFilialFornCategoria As New ClassFilialFornCategoria
Dim iIndice As Integer

On Error GoTo Erro_FilialFornecedor_Insere_Categorias

 'Abre o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 91104
    Next
   
    'Para cada registro da coleção
    For Each objFilialFornCategoria In colCategoriaItem

        lErro = CategoriaFornecedorItem_Lock(objFilialFornCategoria.sCategoria, objFilialFornCategoria.sItem, alComando(0))
        If lErro <> SUCESSO Then gError 91194
        
        'Insere a filial cliente categoria
        lErro = Comando_Executar(alComando(1), "INSERT INTO FilialFornecedorCategorias (Fornecedor, Filial, Categoria, Item) VALUES(?,?,?,?)", objFilialFornecedor.lCodFornecedor, objFilialFornecedor.iCodFilial, objFilialFornCategoria.sCategoria, objFilialFornCategoria.sItem)
        If lErro <> AD_SQL_SUCESSO Then gError 91195

    Next

    'Fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    FilialFornecedor_Insere_Categorias = SUCESSO

    Exit Function

Erro_FilialFornecedor_Insere_Categorias:

    FilialFornecedor_Insere_Categorias = gErr

    Select Case gErr

        Case 91104
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 91194

        Case 91195
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FILIALFORNECEDORCATEGORIAS", gErr, objFilialFornCategoria.sCategoria, objFilialFornCategoria.sItem)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 147939)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
         Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Fornecedor_Grava(ByVal objFornecedor As ClassFornecedor, ByVal objEndereco As ClassEndereco) As Long
'Grava um novo Fornecedor ou atualiza um já existente

Dim lErro As Long, lTransacao As Long

On Error GoTo Erro_Fornecedor_Grava

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 12805

    lErro = Fornecedor_Grava_EmTrans(objFornecedor, objEndereco)
    If lErro <> SUCESSO Then Error 59490

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 12818

    Fornecedor_Grava = SUCESSO

    Exit Function

Erro_Fornecedor_Grava:

    Fornecedor_Grava = Err

    Select Case Err

        Case 59490
        
        Case 12805
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 12818
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT_TRANSACAO", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 147940)

    End Select

    Call Transacao_Rollback
    
    Exit Function

End Function

Function Fornecedor_Automatico(lCodigo As Long) As Long
'retorna o número do proximo Fornecedor disponivel

    Fornecedor_Automatico = CF("Config_ObterAutomatico", "CPRConfig", "NUM_PROX_FORNECEDOR", "Fornecedores", "Codigo", lCodigo)

End Function

Function FiliaisFornecedores_Grava_EmTrans(ByVal objFilialFornecedor As ClassFilialFornecedor, ByVal objEndereco As ClassEndereco) As Long
'Grava a Filial Fornecedor e seu de Endereco

Dim lComando1 As Long
Dim lComando2 As Long
Dim lComando3 As Long
Dim lErro As Long
Dim lCodigo As Long
Dim lCodEndereco As Long
Dim tFilialFornecedor As typeFilialFornecedor
Dim colCategoriaItemCopia As New Collection
Dim objFornecedor As New ClassFornecedor
Dim objFilialFornCategoria As ClassFilialFornCategoria
Dim objFornecedorHistorico As New ClassFornecedorHistorico
Dim objPais As New ClassPais

On Error GoTo Erro_FiliaisFornecedores_Grava_EmTrans

    tFilialFornecedor.sNome = String(STRING_FILIAL_FORNECEDOR_NOME, 0)
    tFilialFornecedor.sCgc = String(STRING_CGC, 0)
    tFilialFornecedor.sIdEstrangeiro = String(STRING_ID_ESTRANGEIRO, 0)
    tFilialFornecedor.sInscricaoEstadual = String(STRING_INSCR_EST, 0)
    tFilialFornecedor.sInscricaoMunicipal = String(STRING_INSCR_MUN, 0)
    tFilialFornecedor.sContaContabil = String(STRING_CONTA, 0)
    tFilialFornecedor.sContaFornConsig = String(STRING_CONTA, 0)
    tFilialFornecedor.sAgencia = String(STRING_AGENCIA, 0)
    tFilialFornecedor.sContaCorrente = String(STRING_CONTA_CORRENTE, 0)
    tFilialFornecedor.sObservacao = String(STRING_FILIAL_FORNECEDOR_OBS, 0)

    lComando1 = 0
    lComando2 = 0
    lComando3 = 0

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 12967

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then gError 12968

    lComando3 = Comando_Abrir()
    If lComando3 = 0 Then gError 12969
    
    '***** Janaina *****
    'Cria uma cópia "de trabalho" da coleção passada como parâmetro
    For Each objFilialFornCategoria In objFilialFornecedor.colCategoriaItem
        colCategoriaItemCopia.Add objFilialFornCategoria
    Next
    '*******************

    'Faz os locks nas tabelas ligadas ao cadastramento de uma nova Filial Fornecedor
    lErro = CF("FiliaisFornecedores_Le_Tabelas_Lock", objFilialFornecedor)
    If lErro <> SUCESSO Then gError 12971

    'Procura por um outro Nome ja cadastrado
    lErro = Comando_Executar(lComando1, "SELECT CodFornecedor FROM FiliaisFornecedores WHERE CodFornecedor = ? AND CodFilial <> ? AND Nome = ? ", lCodigo, objFilialFornecedor.lCodFornecedor, objFilialFornecedor.iCodFilial, objFilialFornecedor.sNome)

    If lErro <> AD_SQL_SUCESSO Then gError 12972

    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 12973

    'se existir outro Nome acusa erro
    If lErro <> AD_SQL_SEM_DADOS Then gError 12974

    'Atualiza os dados para futura gravacao de histórico
    With objFornecedorHistorico
    
        .dtDataAtualizacao = gdtDataHoje
        .iFilialForn = objFilialFornecedor.iCodFilial
        .lCodigo = objFilialFornecedor.lCodFornecedor
        .sBairro = objEndereco.sBairro
        .sCEP = objEndereco.sCEP
        .sCgc = objFilialFornecedor.sCgc
        .sCidade = objEndereco.sCidade
        .sEndereco = objEndereco.sEndereco
        .sInscricaoEstadual = objFilialFornecedor.sInscricaoEstadual
        .sInscricaoMunicipal = objFilialFornecedor.sInscricaoMunicipal
        .sInscricaoSuframa = objFilialFornecedor.sInscricaoSuframa
        .sUF = objEndereco.sSiglaEstado
        
        'Le a RazaoSocial do fornecedor a partir do codigo no obj
        objFornecedor.lCodigo = objFilialFornecedor.lCodFornecedor
        lErro = CF("Fornecedor_Le", objFornecedor)
        If lErro <> SUCESSO And lErro <> 12729 Then gError 97579

        'Verifica se Fornecedor nao esta cadastrado
        If lErro = 12729 Then gError 97580
        
        .sRazaoSocial = objFornecedor.sRazaoSocial
        
        'Le o nome do Pais com o codigo no obj
        objPais.iCodigo = objEndereco.iCodigoPais
        lErro = CF("Paises_Le", objPais)
        If lErro <> SUCESSO And lErro <> 47876 Then gError 97577
    
        'Pais não está cadastrado - --- -> Erro
        If lErro = 47876 Then gError 97578
        
        .sPais = objPais.sNome
        
    End With
    
    'FAZ A GRAVACAO DO HISTORICO
    lErro = FornecedorHistorico_Grava(objFornecedorHistorico)
    If lErro <> SUCESSO Then gError 97586

    'Le a Filial no BD
    lErro = Comando_ExecutarPos(lComando2, "SELECT CodFilial, Nome, Endereco, CGC, IdEstrangeiro, InscricaoEstadual, InscricaoMunicipal, ContaContabil, ContaFornConsig, Banco, Agencia, ContaCorrente, Observacao FROM FiliaisFornecedores WHERE CodFornecedor = ? AND CodFilial = ?", 0, _
    tFilialFornecedor.iCodFilial, tFilialFornecedor.sNome, tFilialFornecedor.lEndereco, tFilialFornecedor.sCgc, tFilialFornecedor.sIdEstrangeiro, tFilialFornecedor.sInscricaoEstadual, tFilialFornecedor.sInscricaoMunicipal, tFilialFornecedor.sContaContabil, tFilialFornecedor.sContaFornConsig, tFilialFornecedor.iBanco, tFilialFornecedor.sAgencia, tFilialFornecedor.sContaCorrente, tFilialFornecedor.sObservacao, objFilialFornecedor.lCodFornecedor, objFilialFornecedor.iCodFilial)
    
    If lErro <> AD_SQL_SUCESSO Then gError 12975

    lErro = Comando_BuscarPrimeiro(lComando2)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 12976

    'Filial Fornecedor não está cadastrada - GRAVACAO
    If lErro = AD_SQL_SEM_DADOS Then
                
        lErro = CF("Endereco_Automatico", lCodEndereco)
        If lErro <> SUCESSO Then gError 12977
            
        objEndereco.lCodigo = lCodEndereco

        lErro = CF("Endereco_Grava", objEndereco)
        If lErro <> SUCESSO Then gError 12978
        
        'Insere a FilialFornecedor na tabela FiliaisFornecedores
        lErro = Comando_Executar(lComando3, "INSERT INTO FiliaisFornecedores (CodFornecedor,CodFilial,Nome,Endereco,CGC,IdEstrangeiro,InscricaoEstadual,InscricaoMunicipal,ContaContabil,ContaFornConsig,Banco,Agencia,ContaCorrente,Observacao, TipoFrete, InscricaoINSS, TipoCobranca, GeraCredICMS, ContaDespesa, InscricaoSuframa, RegimeTributario, IEIsento, IENaoContrib, DataRegistro, HoraRegistro, UsuarioRegistro) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
            objFilialFornecedor.lCodFornecedor, objFilialFornecedor.iCodFilial, objFilialFornecedor.sNome, objEndereco.lCodigo, objFilialFornecedor.sCgc, objFilialFornecedor.sIdEstrangeiro, objFilialFornecedor.sInscricaoEstadual, objFilialFornecedor.sInscricaoMunicipal, objFilialFornecedor.sContaContabil, objFilialFornecedor.sContaFornConsig, objFilialFornecedor.iBanco, objFilialFornecedor.sAgencia, objFilialFornecedor.sContaCorrente, objFilialFornecedor.sObservacao, objFilialFornecedor.iTipoFrete, objFilialFornecedor.sInscricaoINSS, objFilialFornecedor.iTipoCobranca, objFilialFornecedor.iGeraCredICMS, objFilialFornecedor.sContaDespesa, objFilialFornecedor.sInscricaoSuframa, objFilialFornecedor.iRegimeTributario, objFilialFornecedor.iIEIsento, objFilialFornecedor.iIENaoContrib, Date, CDbl(Now), gsUsuario)
        If lErro <> AD_SQL_SUCESSO Then gError 12979
        
        '***** Janaina ******
        'Insere as categorias da filial do cliente em FilialClientesCategorias
        lErro = FilialFornecedor_Insere_Categorias(objFilialFornecedor, colCategoriaItemCopia)
        If lErro <> SUCESSO Then gError 91267
        '********************

    Else 'FilialFornecedor ja existe - MODIFICACAO

        objEndereco.lCodigo = tFilialFornecedor.lEndereco

        lErro = CF("Endereco_Grava", objEndereco)
        If lErro <> SUCESSO Then gError 12980
                        
        'atualiza a tabela de FiliaisFornecedores
        lErro = Comando_ExecutarPos(lComando3, "UPDATE FiliaisFornecedores SET Nome = ?, Endereco = ?, CGC = ?, IdEstrangeiro = ?, InscricaoEstadual = ?, InscricaoMunicipal = ?, ContaContabil = ?, ContaFornConsig = ?, Banco = ?, Agencia = ?, ContaCorrente = ?, Observacao = ?, TipoFrete = ?, InscricaoINSS = ?, TipoCobranca = ?, GeraCredICMS = ?, ContaDespesa = ?, InscricaoSuframa = ?, RegimeTributario = ?, IEIsento = ?, IENaoContrib = ?, DataAlteracao = ?, HoraAlteracao = ?, UsuarioAlteracao = ?", lComando2, _
            objFilialFornecedor.sNome, objEndereco.lCodigo, objFilialFornecedor.sCgc, objFilialFornecedor.sIdEstrangeiro, objFilialFornecedor.sInscricaoEstadual, objFilialFornecedor.sInscricaoMunicipal, objFilialFornecedor.sContaContabil, objFilialFornecedor.sContaFornConsig, objFilialFornecedor.iBanco, objFilialFornecedor.sAgencia, objFilialFornecedor.sContaCorrente, objFilialFornecedor.sObservacao, objFilialFornecedor.iTipoFrete, objFilialFornecedor.sInscricaoINSS, objFilialFornecedor.iTipoCobranca, objFilialFornecedor.iGeraCredICMS, objFilialFornecedor.sContaDespesa, objFilialFornecedor.sInscricaoSuframa, objFilialFornecedor.iRegimeTributario, objFilialFornecedor.iIEIsento, objFilialFornecedor.iIENaoContrib, Date, CDbl(Now), gsUsuario)
        If lErro <> AD_SQL_SUCESSO Then gError 12981
        
        '****** Janaina ******
     
        'Atualiza as categorias da filial do Fornecedor
        lErro = FilialFornecedor_Atualiza_Categorias(objFilialFornecedor, colCategoriaItemCopia)
        If lErro <> SUCESSO Then gError 91268
        '*********************

    End If

    lErro = Comando_Fechar(lComando1)
    lErro = Comando_Fechar(lComando2)
    lErro = Comando_Fechar(lComando3)

    FiliaisFornecedores_Grava_EmTrans = SUCESSO

    Exit Function

Erro_FiliaisFornecedores_Grava_EmTrans:

    FiliaisFornecedores_Grava_EmTrans = gErr

    Select Case gErr

        Case 12967, 12968, 12969
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 12972, 12973, 12975, 12976
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIAISFORNECEDORES", gErr)

        Case 12974
            Call Rotina_Erro(vbOKOnly, "ERRO_FILIALFORNECEDOR_NOME_DUPLICADO", gErr, objFilialFornecedor.sNome)

        Case 12971, 12977, 12978, 12980, 91267, 91268

        Case 12979
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FILIAISFORNECEDORES", gErr)

        Case 12981
            Call Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_FILIAISFORNECEDORES", gErr)

        Case 97577, 97579, 97586
        
        Case 97578
            Call Rotina_Erro(vbOKOnly, "ERRO_PAIS_NAO_CADASTRADO", gErr, objPais.iCodigo)
            
        Case 97580
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECEDOR_NAO_CADASTRADO", gErr, objFornecedor.lCodigo)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 147941)

    End Select

    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)

    Exit Function

End Function

Function FiliaisFornecedores_Grava(ByVal objFilialFornecedor As ClassFilialFornecedor, ByVal objEndereco As ClassEndereco) As Long
'Grava a Filial Fornecedor e seu de Endereco

Dim lTransacao As Long
Dim lErro As Long

On Error GoTo Erro_FiliaisFornecedores_Grava

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 12970

    lErro = FiliaisFornecedores_Grava_EmTrans(objFilialFornecedor, objEndereco)
    If lErro <> SUCESSO Then Error 59491

    'confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 12982

    FiliaisFornecedores_Grava = SUCESSO

    Exit Function

Erro_FiliaisFornecedores_Grava:

    FiliaisFornecedores_Grava = Err

    Select Case Err

        Case 59491
        
        Case 12970
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 12982
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT_TRANSACAO", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 147942)

    End Select

    Call Transacao_Rollback

    Exit Function

End Function

''Function FiliaisFornecedores_Exclui(objFilialFornecedor As ClassFilialFornecedor) As Long
'''Exclui a Filial Fornecedor e seu Endereço
''
''Dim lErro As Long
''Dim colNotasFiscais As New Collection
''Dim ColTitulosPagar As New Collection
''Dim colCreditos As New Collection
''Dim colRecAntec As New Collection
''Dim lComando1 As Long
''Dim lComando2 As Long
''Dim lTransacao As Long
''Dim lCodigo As Long
''
''On Error GoTo Erro_FiliaisFornecedores_Exclui
''
''    'Inicializa comandos
''    lComando1 = Comando_Abrir()
''    If lComando1 = 0 Then Error 19005
''
''    lComando2 = Comando_Abrir()
''    If lComando2 = 0 Then Error 19006
''
''    'Inicia a Transacao
''    lTransacao = Transacao_Abrir()
''    If lTransacao = 0 Then Error 19007
''
''    'Seleciona a Filial Fornecedor para ser lockada e excluída
''    lErro = Comando_ExecutarPos(lComando1, "SELECT CodFornecedor FROM FiliaisFornecedores WHERE CodFornecedor =? AND CodFilial = ?", 0, lCodigo, objFilialFornecedor.lCodFornecedor, objFilialFornecedor.iCodFilial)
''    If lErro <> AD_SQL_SUCESSO Then Error 19008
''
''    lErro = Comando_BuscarPrimeiro(lComando1)
''    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 19009
''
''    If lErro = AD_SQL_SEM_DADOS Then Error 19010
''
''    'Lock da FilialFornecedor
''    lErro = Comando_LockExclusive(lComando1)
''    If lErro <> AD_SQL_SUCESSO Then Error 19011
''
''    lErro = CF("FilialFornecedor_Objetos_Relacionados_Testa",objFilialFornecedor)
''    If lErro <> SUCESSO Then Error 33849
''
''    'Exclui os registros de MvDiaForn relacionados a FilialFornecedor
''    lErro = CF("MvDiaForn_Exclui_FilialFornecedor",objFilialFornecedor)
''    If lErro <> SUCESSO Then Error 33922
''
''    'Exclui os registros de MvPerForn relacionados a FilialFornecedor
''    lErro = CF("MvPerForn_Exclui_FilialFornecedor",objFilialFornecedor)
''    If lErro <> SUCESSO Then Error 33930
''
''    'Exclui a Filial Fornecedor
''    lErro = Comando_ExecutarPos(lComando2, "DELETE FROM FiliaisFornecedores", lComando1)
''    If lErro <> AD_SQL_SUCESSO Then Error 19019
''
''    'Exclui o Endereço
''    lErro = CF("Endereco_Exclui",objFilialFornecedor.lEndereco)
''    If lErro <> SUCESSO Then Error 19018
''
''    'Confirma a transação
''    lErro = Transacao_Commit()
''    If lErro <> AD_SQL_SUCESSO Then Error 19020
''
''    'Libera comandos
''    Call Comando_Fechar(lComando1)
''    Call Comando_Fechar(lComando2)
''
''    FiliaisFornecedores_Exclui = SUCESSO
''
''    Exit Function
''
''Erro_FiliaisFornecedores_Exclui:
''
''    FiliaisFornecedores_Exclui = Err
''
''    Select Case Err
''
''        Case 19005, 19006
''            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
''
''        Case 19007
''            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
''
''        Case 19008, 19009
''            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIAISFORNECEDORES", Err)
''
''        Case 19010
''            Call Rotina_Erro(vbOKOnly, "ERRO_FILIAL_FORNECEDOR_INEXISTENTE", Err)
''
''        Case 19011
''            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_FILIAISFORNECEDORES", Err, objFilialFornecedor.lCodFornecedor)
''
''        Case 19012, 19014, 19016, 19018, 33849, 33922, 33930
''
''        Case 19013
''            Call Rotina_Erro(vbOKOnly, "ERRO_FILIALFORNECEDOR_REL_NFE", Err)
''
''        Case 19015
''            Call Rotina_Erro(vbOKOnly, "ERRO_FILIALFORNECEDOR_REL_TIT_PAGAR", Err)
''
''        Case 19017
''            Call Rotina_Erro(vbOKOnly, "ERRO_FILIALFORNECEDOR_REL_CREDITOS", Err)
''
''        Case 19019
''            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_FILIAISFORNECEDORES", Err, objFilialFornecedor.lCodFornecedor)
''
''        Case 19020
''            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
''
''        Case Else
''            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 147943)
''
''    End Select
''
''    Call Transacao_Rollback
''
''    'Libera comandos
''    Call Comando_Fechar(lComando1)
''    Call Comando_Fechar(lComando2)
''
''    Exit Function
''
''End Function
''
Function FiliaisFornecedores_Automatico(ByVal lCodFornecedor As Long, iCodigo As Integer) As Long
'retorna o número da proxima Filial Fornecedor disponivel em iCodigo em relacao ao numero de Fornecedor passado em lCodigo

Dim lComando1 As Long
Dim lComando2 As Long
Dim lComando3 As Long
Dim lErro As Long
Dim lTransacao As Long
Dim iCodigo_Automatico As Integer
Dim iCodFilial As Integer

On Error GoTo Erro_FiliaisFornecedores_Automatico

    lComando1 = 0
    lComando2 = 0
    lComando3 = 0
    lTransacao = 0

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 19036

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 19037

    lComando3 = Comando_Abrir()
    If lComando3 = 0 Then Error 19038

    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 19039

    'Seleciona o Proximo Codigo da Filial , do respectivo Fornecedor
    lErro = Comando_ExecutarPos(lComando1, "SELECT ProxCodFilial FROM Fornecedores WHERE Codigo = ?", 0, iCodigo_Automatico, lCodFornecedor)
    If lErro <> AD_SQL_SUCESSO Then Error 19040

    'le o registro com o número da próxima Filial
    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO Then Error 19041

    'loca o registro que guarda o numero da Filial Fornecedor gerado automaticamente
    lErro = Comando_LockExclusive(lComando1)
    If lErro <> AD_SQL_SUCESSO Then Error 19042

    'verifica se este número ainda não foi utilizado
    'Pesquisa as numerações de Filiais maiores ou iguais a numeração gerada automaticamente
    lErro = Comando_Executar(lComando2, "SELECT CodFilial FROM FiliaisFornecedores WHERE CodFornecedor = ? AND CodFilial >= ? ORDER BY CodFornecedor", iCodFilial, lCodFornecedor, iCodigo_Automatico)
    If lErro <> AD_SQL_SUCESSO Then Error 19043

    'le o primeiro codigo >= ao codigo automatico
    lErro = Comando_BuscarPrimeiro(lComando2)

    'pesquisa o proximo número de codigo disponível
    Do While lErro <> AD_SQL_SEM_DADOS

        If iCodFilial > iCodigo_Automatico Then Exit Do

        If iCodFilial = iCodigo_Automatico Then
            iCodigo_Automatico = iCodigo_Automatico + 1
        End If

        lErro = Comando_BuscarProximo(lComando2)

    Loop

    'Valor de retorno da funcao
    iCodigo = iCodigo_Automatico

    iCodigo_Automatico = iCodigo_Automatico + 1

    'atualiza o numero do Fornecedor gerado automaticamente
    lErro = Comando_ExecutarPos(lComando3, "UPDATE Fornecedores SET ProxCodFilial = ?", lComando1, iCodigo_Automatico)
    If lErro <> AD_SQL_SUCESSO Then Error 19044

    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 19045

    lErro = Comando_Fechar(lComando1)
    lErro = Comando_Fechar(lComando2)
    lErro = Comando_Fechar(lComando3)

    FiliaisFornecedores_Automatico = SUCESSO

    Exit Function

Erro_FiliaisFornecedores_Automatico:

    FiliaisFornecedores_Automatico = Err

    Select Case Err

    Case 19036, 19037, 19038
        Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

    Case 19039
        Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

    Case 19040, 19041
        Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FORNECEDORES", Err)

    Case 19042
        Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_FORNECEDORES", Err)

    Case 19043
        Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FORNECEDORES", Err)

    Case 19044
        Call Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_FORNECEDOR", Err, lCodFornecedor)

    Case 19045
        Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

    Case Else
        Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 147944)

    End Select

    Call Transacao_Rollback
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)

    Exit Function

End Function

Function Favorecidos_Automatico(iCodigo As Integer) As Long
'retorna o número do proximo favorecido disponivel

Dim lCodigo As Long, lErro As Long

On Error GoTo Erro_Favorecidos_Automatico

    lErro = CF("Config_ObterAutomatico", "CPRConfig", NUM_PROX_FAVORECIDO, "Favorecidos", "Codigo", lCodigo)
    If lErro <> SUCESSO Then Error 17017
    
    iCodigo = lCodigo
    
    Favorecidos_Automatico = SUCESSO

    Exit Function

Erro_Favorecidos_Automatico:

    Favorecidos_Automatico = Err

    Select Case Err

        Case 17017
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 147945)

    End Select
    
    Exit Function
    
End Function

Function Favorecidos_Grava(ByVal objFavorecidos As ClassFavorecidos) As Long
'grava o Favorecido no banco de dados

Dim lComando1 As Long
Dim lComando2 As Long
Dim lTransacao As Long
Dim lErro As Long
Dim iStatus As Integer
Dim iCodigo As Integer

On Error GoTo Erro_Favorecidos_Grava

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 17036

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 17037

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 17038

    'Pesquisa no BD o Favorecido em questão
    lErro = Comando_ExecutarPos(lComando1, "SELECT Codigo FROM Favorecidos WHERE Codigo=?", 0, iCodigo, objFavorecidos.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 17039

    'Lê o Favorecido, se estiver no BD
    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 17040

    'Encontrou o Favorecido ==> é uma alteração
    If lErro = AD_SQL_SUCESSO Then
    
        'Atualiza o Favorecido
        lErro = Comando_ExecutarPos(lComando2, "UPDATE Favorecidos SET Nome=?, Inativo=?", lComando1, objFavorecidos.sNome, objFavorecidos.iInativo)
        If lErro <> AD_SQL_SUCESSO Then Error 17041

    Else
        'Não encontrou o Favorecido ==>  é uma inserção de Favorecido
        
        'Insere o Favorecido
        lErro = Comando_Executar(lComando2, "INSERT INTO Favorecidos (Codigo,Nome,Inativo) VALUES (?,?,?)", objFavorecidos.iCodigo, objFavorecidos.sNome, objFavorecidos.iInativo)
        If lErro <> AD_SQL_SUCESSO Then Error 17042

    End If

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 17043

    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)

    Favorecidos_Grava = SUCESSO

    Exit Function

Erro_Favorecidos_Grava:

    Favorecidos_Grava = Err

    Select Case Err

        Case 17036, 17037
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 17038
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 17039, 17040
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FAVORECIDO", Err, objFavorecidos.iCodigo)

        Case 17041
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_FAVORECIDOS", Err, objFavorecidos.iCodigo)

        Case 17042
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FAVORECIDOS", Err, objFavorecidos.iCodigo)

        Case 17043
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 147946)

    End Select
    
    Call Transacao_Rollback
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)

    Exit Function

End Function

Function CCIMovDia_Grava(ByVal iCodConta As Integer, ByVal dtData As Date, ByVal dValor As Double, Optional ByVal vTipo As Variant, Optional ByVal vValor1 As Variant, Optional ByVal iCodConta1 As Integer) As Long
'ATENCAO: ESSA FUNCAO TEM QUE SER CHAMADA JA DENTRO DE UMA TRANSACAO
'O parametro vTipo quando usado indica o tipo de movimento de conta para fins de tratamento da aplicação consolidada
'O parametro dValor1 quando usado conterá o valor resgatado menos os rendimentos

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim lComando2 As Long
Dim lComando3 As Long
Dim dCred As Double
Dim dDeb As Double
Dim dAplic As Double

On Error GoTo Erro_CCIMovDia_Grava

    lComando = 0
    lComando1 = 0

    lComando = Comando_Abrir
    If lComando = 0 Then gError 11963

    lComando1 = Comando_Abrir
    If lComando = 0 Then gError 11964

    lComando2 = Comando_Abrir
    If lComando2 = 0 Then gError 69149

    lComando3 = Comando_Abrir
    If lComando3 = 0 Then gError 69178

    lErro = CF("Movimento_Verifica_Bloqueio_Data", dtData, 2, gobjTES.iMovCCVerificaBloqData, gobjTES.dtMovCCBloqDataLimite)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    If iCodConta = iCodConta1 Or iCodConta1 = 0 Then

        lErro = Comando_ExecutarPos(lComando, "SELECT Deb, Cred, Aplic FROM CCIMovDia WHERE Data = ? AND CodContaCorrenteInterna = ? ", 0, dDeb, dCred, dAplic, dtData, iCodConta)
        If lErro <> AD_SQL_SUCESSO Then gError 11965
    
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 11966
    
        If Not IsMissing(vTipo) Then
        
            If vTipo = MOVCCI_APLICACAO Then
                dAplic = dAplic + Abs(dValor)
            ElseIf vTipo = MOVCCI_APLICACAO_EXCLUSAO Then
                dAplic = dAplic - Abs(dValor)
            ElseIf vTipo = MOVCCI_RESGATE Then
                dAplic = dAplic - vValor1
            End If
        End If
    
        If lErro = AD_SQL_SUCESSO Then
        
            lErro = Comando_LockExclusive(lComando)
            If lErro <> AD_SQL_SUCESSO Then gError 18034
    
            If dValor < 0 Then
                dDeb = dDeb - dValor
                lErro = Comando_ExecutarPos(lComando1, "UPDATE CCIMovDia SET Deb = ?, Aplic = ?", lComando, dDeb, dAplic)
                If lErro <> AD_SQL_SUCESSO Then gError 11967
    
            Else
                dCred = dCred + dValor
                lErro = Comando_ExecutarPos(lComando1, "UPDATE CCIMovDia SET Cred = ?, Aplic =?", lComando, dCred, dAplic)
                If lErro <> AD_SQL_SUCESSO Then gError 11968
            End If
    
        ElseIf lErro = AD_SQL_SEM_DADOS Then
    
            If dValor > 0 Then
                lErro = Comando_Executar(lComando1, "INSERT INTO CCIMovDia (CodContaCorrenteInterna, Cred, Data, Aplic) VALUES (?,?,?,?) ", iCodConta, dValor, dtData, dAplic)
                If lErro <> AD_SQL_SUCESSO Then gError 11969
            Else
                lErro = Comando_Executar(lComando1, "INSERT INTO CCIMovDia (CodContaCorrenteInterna, Deb, Data, Aplic) VALUES (?,?,?,?)", iCodConta, -dValor, dtData, dAplic)
                If lErro <> AD_SQL_SUCESSO Then gError 11970
            End If
        
        End If
        
    Else 'PARA RESGATE DE UMA CONTA QUE TENHA APLICACAO EM OUTRA CONTA
            
        'ATUALIZA CREDITO DA CONMTA DE RESGATE
        
        lErro = Comando_ExecutarPos(lComando, "SELECT Deb, Cred FROM CCIMovDia WHERE Data = ? AND CodContaCorrenteInterna = ? ", 0, dDeb, dCred, dtData, iCodConta)
        If lErro <> AD_SQL_SUCESSO Then gError 69150
    
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 69151
        
        If lErro = AD_SQL_SUCESSO Then
        
            lErro = Comando_LockExclusive(lComando)
            If lErro <> AD_SQL_SUCESSO Then gError 69152
    
            If dValor < 0 Then
                dDeb = dDeb - dValor
                lErro = Comando_ExecutarPos(lComando1, "UPDATE CCIMovDia SET Deb = ?", lComando, dDeb)
                If lErro <> AD_SQL_SUCESSO Then gError 69153
            Else
                dCred = dCred + dValor
                lErro = Comando_ExecutarPos(lComando1, "UPDATE CCIMovDia SET Cred = ?", lComando, dCred)
                If lErro <> AD_SQL_SUCESSO Then gError 69154
            End If
    
        ElseIf lErro = AD_SQL_SEM_DADOS Then
    
            If dValor > 0 Then
                lErro = Comando_Executar(lComando1, "INSERT INTO CCIMovDia (CodContaCorrenteInterna, Cred, Data) VALUES (?,?,?) ", iCodConta, dValor, dtData)
                If lErro <> AD_SQL_SUCESSO Then gError 69155
            Else
                lErro = Comando_Executar(lComando1, "INSERT INTO CCIMovDia (CodContaCorrenteInterna, Deb, Data) VALUES (?,?,?)", iCodConta, -dValor, dtData)
                If lErro <> AD_SQL_SUCESSO Then gError 69156
            End If
    
        End If
        
        'ATUALIZA A APLICACAO DA CONTA DE APLICACAO
        
        lErro = Comando_ExecutarPos(lComando2, "SELECT Aplic FROM CCIMovDia WHERE Data = ? AND CodContaCorrenteInterna = ? ", 0, dAplic, dtData, iCodConta1)
        If lErro <> AD_SQL_SUCESSO Then gError 69157
    
        lErro = Comando_BuscarPrimeiro(lComando2)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 69158
    
        If Not IsMissing(vTipo) Then
            If vTipo = MOVCCI_RESGATE Then
                dAplic = dAplic - vValor1
            End If
        End If
    
        If lErro = AD_SQL_SUCESSO Then
        
            lErro = Comando_LockExclusive(lComando2)
            If lErro <> AD_SQL_SUCESSO Then gError 69159
    
            lErro = Comando_ExecutarPos(lComando3, "UPDATE CCIMovDia SET Aplic = ?", lComando2, dAplic)
            If lErro <> AD_SQL_SUCESSO Then gError 69160
        
        ElseIf lErro = AD_SQL_SEM_DADOS Then
    
            lErro = Comando_Executar(lComando1, "INSERT INTO CCIMovDia (CodContaCorrenteInterna, Data, Aplic) VALUES (?,?,?)", iCodConta1, dtData, dAplic)
            If lErro <> AD_SQL_SUCESSO Then gError 69161
    
        End If
    
    End If
    
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)

    CCIMovDia_Grava = SUCESSO

    Exit Function

Erro_CCIMovDia_Grava:

    CCIMovDia_Grava = gErr

    Select Case gErr
        
        Case 11963, 11964, 69149, 69178
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 11965, 11966, 69150, 69151
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CCIMOVDIA", gErr, dtData, iCodConta)

        Case 11967, 11968, 69153, 69154, 69160
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_CCIMOVDIA", gErr, dtData, iCodConta)

        Case 11969, 11970, 69155, 69156, 69161
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CCIMOVDIA", gErr, dtData, iCodConta)
        
        Case 18034, 69152, 69159
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CCIMOVDIA", gErr)
        
        Case 69157, 69158
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CCIMOVDIA", gErr, dtData, iCodConta1)
        
        Case ERRO_SEM_MENSAGEM
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 147947)

    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)

    Exit Function

End Function

Function CCIMov_Grava(ByVal iCodConta As Integer, ByVal iAno As Integer, ByVal iMes As Integer, ByVal dValor As Double, Optional ByVal vTipo As Variant, Optional ByVal vValor1 As Variant, Optional ByVal iCodConta1 As Integer) As Long
'ATENCAO: ESSA FUNCAO TEM QUE SER CHAMADA JA DENTRO DE UMA TRANSACAO
'O parametro vTipo quando usado indica o tipo de movimento de conta para fins de tratamento da aplicação consolidada

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim lComando2 As Long
Dim lComando3 As Long
Dim sMes As String
Dim dSaldoInicial As Double
Dim dDeb As Double
Dim dCred As Double
Dim dAplic As Double

On Error GoTo Erro_CCIMov_Grava

    lComando1 = 0
    lComando = 0

    lComando = Comando_Abrir
    If lComando = 0 Then gError 11973

    lComando1 = Comando_Abrir
    If lComando1 = 0 Then gError 11974
    
    lComando2 = Comando_Abrir
    If lComando2 = 0 Then gError 69124
    
    lComando3 = Comando_Abrir
    If lComando3 = 0 Then gError 69175
    
    If iCodConta = iCodConta1 Or iCodConta1 = 0 Then
    
        sMes = Format(iMes, "00")
    
        lErro = Comando_ExecutarPos(lComando, "SELECT SaldoInicial, Deb" & sMes & ", Cred" & sMes & ", Aplic" & sMes & " FROM CCIMov WHERE CodContaCorrenteInterna = ? AND Ano = ?", 0, dSaldoInicial, dDeb, dCred, dAplic, iCodConta, iAno)
        If lErro <> AD_SQL_SUCESSO Then gError 11975
    
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 11976
    
        If Not IsMissing(vTipo) Then
        
            If vTipo = MOVCCI_APLICACAO Then
                dAplic = dAplic + Abs(dValor)
            ElseIf vTipo = MOVCCI_APLICACAO_EXCLUSAO Then
                dAplic = dAplic - Abs(dValor)
            ElseIf vTipo = MOVCCI_RESGATE Then
                dAplic = dAplic - vValor1
            End If
        End If
    
        If lErro = AD_SQL_SUCESSO Then
        
            lErro = Comando_LockExclusive(lComando)
            If lErro <> AD_SQL_SUCESSO Then gError 18037
    
            If dValor < 0 Then
                dDeb = dDeb - dValor
                lErro = Comando_ExecutarPos(lComando1, "UPDATE CCIMov SET Deb" & sMes & " = ?" & ", Aplic" & sMes & " = ?", lComando, dDeb, dAplic)
                If lErro <> AD_SQL_SUCESSO Then gError 11977
            Else
                dCred = dCred + dValor
                lErro = Comando_ExecutarPos(lComando1, "UPDATE CCIMov SET Cred" & sMes & " = ?" & ", Aplic" & sMes & " = ?", lComando, dCred, dAplic)
                If lErro <> AD_SQL_SUCESSO Then gError 11978
            End If
            
        Else
    
            If dValor > 0 Then
                lErro = Comando_Executar(lComando1, "INSERT INTO CCIMov (CodContaCorrenteInterna, Ano, Cred" & sMes & ", Aplic" & sMes & ") VALUES (?,?,?,?)", iCodConta, iAno, dValor, dAplic)
                If lErro <> AD_SQL_SUCESSO Then gError 11979
            Else
                lErro = Comando_Executar(lComando1, "INSERT INTO CCIMov (CodContaCorrenteInterna, Ano, Deb" & sMes & ", Aplic" & sMes & ") VALUES (?,?,?,?)", iCodConta, iAno, -dValor, dAplic)
                If lErro <> AD_SQL_SUCESSO Then gError 11980
            End If
    
        End If
    
    Else 'Resgate de uma Aplicacao de uma Conta para outra Conta
        
        'TRATA PRIMEIRO O CREDITO DA CONTA DE RESGATE
        sMes = Format(iMes, "00")
            
        'Le o Saldo da Credito para Atualizar a Conta de Resgate
        lErro = Comando_ExecutarPos(lComando, "SELECT SaldoInicial, Deb" & sMes & ", Cred" & sMes & " FROM CCIMov WHERE CodContaCorrenteInterna = ? AND Ano = ?", 0, dSaldoInicial, dDeb, dCred, iCodConta, iAno)
        If lErro <> AD_SQL_SUCESSO Then gError 69125
    
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 69126
    
        If lErro = AD_SQL_SUCESSO Then
        
            lErro = Comando_LockExclusive(lComando)
            If lErro <> AD_SQL_SUCESSO Then gError 69127
    
            If dValor < 0 Then
                dDeb = dDeb - dValor
                lErro = Comando_ExecutarPos(lComando1, "UPDATE CCIMov SET Deb" & sMes & " = ?", lComando, dDeb)
                If lErro <> AD_SQL_SUCESSO Then gError 69128
            Else
                dCred = dCred + dValor
                lErro = Comando_ExecutarPos(lComando1, "UPDATE CCIMov SET Cred" & sMes & " = ?", lComando, dCred)
                If lErro <> AD_SQL_SUCESSO Then gError 69129
            End If
            
        Else
    
            If dValor > 0 Then
                lErro = Comando_Executar(lComando1, "INSERT INTO CCIMov (CodContaCorrenteInterna, Ano, Cred" & sMes & ") VALUES (?,?,?)", iCodConta, iAno, dValor)
                If lErro <> AD_SQL_SUCESSO Then gError 69130
            Else
                lErro = Comando_Executar(lComando1, "INSERT INTO CCIMov (CodContaCorrenteInterna, Ano, Deb" & sMes & ") VALUES (?,?,?)", iCodConta, iAno, -dValor)
                If lErro <> AD_SQL_SUCESSO Then gError 69131
            End If
    
        End If
        
        'TRATA A APLICACAO DA CONTA DE APLICACAO
        
        'Le o Saldo da Aplicacao para Atualizar a Conta de Resgate
        lErro = Comando_ExecutarPos(lComando2, "SELECT Aplic" & sMes & " FROM CCIMov WHERE CodContaCorrenteInterna = ? AND Ano = ?", 0, dAplic, iCodConta1, iAno)
        If lErro <> AD_SQL_SUCESSO Then gError 69132
    
        lErro = Comando_BuscarPrimeiro(lComando2)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 69133
    
        If Not IsMissing(vTipo) Then
            If vTipo = MOVCCI_RESGATE Then
                dAplic = dAplic - vValor1
            End If
        End If
    
        If lErro = AD_SQL_SUCESSO Then
        
            lErro = Comando_LockExclusive(lComando2)
            If lErro <> AD_SQL_SUCESSO Then gError 69134
    
            lErro = Comando_ExecutarPos(lComando3, "UPDATE CCIMov SET Aplic" & sMes & " = ?", lComando2, dAplic)
            If lErro <> AD_SQL_SUCESSO Then gError 69135
            
        Else
    
            lErro = Comando_Executar(lComando3, "INSERT INTO CCIMov (CodContaCorrenteInterna, Ano, Aplic" & sMes & ") VALUES (?,?,?)", iCodConta1, iAno, dAplic)
            If lErro <> AD_SQL_SUCESSO Then gError 69136
    
        End If
    
    End If
    
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)

    CCIMov_Grava = SUCESSO

    Exit Function

Erro_CCIMov_Grava:

    CCIMov_Grava = gErr

    Select Case gErr

        Case 11973, 11974, 69124, 69175
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 11975, 11976, 69125, 69126, 69132, 69133
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CCIMOV", gErr, iCodConta, iAno)

        Case 11977, 11978, 69128, 69129, 69135
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_CCIMOV", gErr)

        Case 11979, 11980, 69130, 69131, 69136
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CCIMOV", gErr)

        Case 18037, 69127, 69134
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CCIMOV", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 147948)

    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)

    Exit Function

End Function

Function CCIMovDia_Exclui(ByVal iCodConta As Integer, ByVal dtData As Date, ByVal dValor As Double, Optional ByVal vTipo As Variant, Optional ByVal vValor1 As Variant, Optional ByVal iCodConta1 As Integer) As Long
'ATENCAO: ESSA FUNCAO TEM QUE SER CHAMADA JA DENTRO DE UMA TRANSACAO
'O parametro vTipo quando usado indica o tipo de movimento de conta para fins de tratamento da aplicação consolidada

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim lComando2 As Long
Dim lComando3 As Long
Dim dCred As Double
Dim dDeb As Double
Dim dAplic As Double

On Error GoTo Erro_CCIMovDia_Exclui

    lComando = 0
    lComando1 = 0

    lComando = Comando_Abrir
    If lComando = 0 Then gError 18020

    lComando1 = Comando_Abrir
    If lComando = 0 Then gError 18021

    lComando2 = Comando_Abrir
    If lComando2 = 0 Then gError 69162

    lComando3 = Comando_Abrir
    If lComando3 = 0 Then gError 69177

    lErro = CF("Movimento_Verifica_Bloqueio_Data", dtData, 2, gobjTES.iMovCCVerificaBloqData, gobjTES.dtMovCCBloqDataLimite)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    If iCodConta = iCodConta1 Or iCodConta1 = 0 Then

        lErro = Comando_ExecutarPos(lComando, "SELECT Deb, Cred, Aplic FROM CCIMovDia WHERE Data = ? AND CodContaCorrenteInterna = ? ", 0, dDeb, dCred, dAplic, dtData, iCodConta)
        If lErro <> AD_SQL_SUCESSO Then gError 18022
    
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 18023
    
        If lErro <> AD_SQL_SUCESSO Then gError 18024
    
        lErro = Comando_LockExclusive(lComando)
        If lErro <> AD_SQL_SUCESSO Then gError 18035
    
         If Not IsMissing(vTipo) Then
        
            If vTipo = MOVCCI_APLICACAO Then
                dAplic = dAplic + Abs(dValor)
            ElseIf vTipo = MOVCCI_APLICACAO_EXCLUSAO Then
                dAplic = dAplic - Abs(dValor)
            ElseIf vTipo = MOVCCI_RESGATE_EXCLUSAO Then
                dAplic = dAplic + vValor1
            End If
        End If
    
        If dValor < 0 Then
            dDeb = dDeb + dValor
            lErro = Comando_ExecutarPos(lComando1, "UPDATE CCIMovDia SET Deb = ?, Aplic = ?", lComando, dDeb, dAplic)
            If lErro <> AD_SQL_SUCESSO Then gError 18025
    
        Else
            dCred = dCred - dValor
            lErro = Comando_ExecutarPos(lComando1, "UPDATE CCIMovDia SET Cred = ?, Aplic = ?", lComando, dCred, dAplic)
            If lErro <> AD_SQL_SUCESSO Then gError 18026
        End If
    
    Else
    
        'ATUALIZA CREDITO DA CONTA DE RESGATE
        
        lErro = Comando_ExecutarPos(lComando, "SELECT Deb, Cred FROM CCIMovDia WHERE Data = ? AND CodContaCorrenteInterna = ? ", 0, dDeb, dCred, dtData, iCodConta)
        If lErro <> AD_SQL_SUCESSO Then gError 69163
    
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 69164
        
        If lErro <> AD_SQL_SUCESSO Then gError 69165
        
        lErro = Comando_LockExclusive(lComando)
        If lErro <> AD_SQL_SUCESSO Then gError 69166
    
        If dValor < 0 Then
            dDeb = dDeb + dValor
            lErro = Comando_ExecutarPos(lComando1, "UPDATE CCIMovDia SET Deb = ?", lComando, dDeb)
            If lErro <> AD_SQL_SUCESSO Then gError 69167
        Else
            dCred = dCred - dValor
            lErro = Comando_ExecutarPos(lComando1, "UPDATE CCIMovDia SET Cred = ?", lComando, dCred)
            If lErro <> AD_SQL_SUCESSO Then gError 69168
        End If
    
        'ATUALIZA A APLICACAO DA CONTA DE APLICACAO
        
        lErro = Comando_ExecutarPos(lComando2, "SELECT Aplic FROM CCIMovDia WHERE Data = ? AND CodContaCorrenteInterna = ? ", 0, dAplic, dtData, iCodConta1)
        If lErro <> AD_SQL_SUCESSO Then gError 69169
    
        lErro = Comando_BuscarPrimeiro(lComando2)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 69170
    
        If Not IsMissing(vTipo) Then
            If vTipo = MOVCCI_RESGATE Then
                dAplic = dAplic + vValor1
            End If
        End If
    
        If lErro <> AD_SQL_SUCESSO Then gError 69171
        
        lErro = Comando_LockExclusive(lComando2)
        If lErro <> AD_SQL_SUCESSO Then gError 69172
    
        lErro = Comando_ExecutarPos(lComando3, "UPDATE CCIMovDia SET Aplic = ?", lComando2, dAplic)
        If lErro <> AD_SQL_SUCESSO Then gError 69173
        
    End If
    
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)

    CCIMovDia_Exclui = SUCESSO

    Exit Function

Erro_CCIMovDia_Exclui:

    CCIMovDia_Exclui = gErr

    Select Case gErr
        
        Case 18020, 18021, 69162, 69177
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 18022, 18023, 69163, 69164
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CCIMOVDIA", gErr, dtData, iCodConta)
        
        Case 18024, 69165
            Call Rotina_Erro(vbOKOnly, "ERRO_CCIMOVDIA_NAO_CADASTRADO", gErr, dtData, iCodConta)

        Case 18025, 18026, 69167, 69168, 69173
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_CCIMOVDIA", gErr)

        Case 18035, 69166, 69172
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CCIMOVDIA", gErr)

        Case 69169, 69170
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CCIMOVDIA", gErr, dtData, iCodConta1)
        
        Case 69171
            Call Rotina_Erro(vbOKOnly, "ERRO_CCIMOVDIA_NAO_CADASTRADO", gErr, dtData, iCodConta1)
        
        Case ERRO_SEM_MENSAGEM
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 147949)

    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)

    Exit Function

End Function

Function CCIMov_Exclui(ByVal iCodConta As Integer, ByVal iAno As Integer, ByVal iMes As Integer, ByVal dValor As Double, Optional ByVal vTipo As Variant, Optional ByVal vValor1 As Variant, Optional ByVal iCodConta1 As Integer) As Long
'funcao auxiliar a exclusao de um movto de cta corrente
'O parametro vTipo quando usado indica o tipo de movimento de conta para fins de tratamento da aplicação consolidada

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim lComando2 As Long
Dim lComando3 As Long
Dim sMes As String
Dim dSaldoInicial As Double
Dim dDeb As Double
Dim dCred As Double
Dim dAplic As Double

On Error GoTo Erro_CCIMov_Exclui

    lComando1 = 0
    lComando = 0

    lComando = Comando_Abrir
    If lComando = 0 Then gError 18027

    lComando1 = Comando_Abrir
    If lComando1 = 0 Then gError 18028

    lComando2 = Comando_Abrir
    If lComando2 = 0 Then gError 69137

    lComando3 = Comando_Abrir
    If lComando3 = 0 Then gError 69176

    If iCodConta = iCodConta1 Or iCodConta1 = 0 Then

        sMes = Format(iMes, "00")
    
        lErro = Comando_ExecutarPos(lComando, "SELECT SaldoInicial, Deb" & sMes & ", Cred" & sMes & ", Aplic" & sMes & " FROM CCIMov WHERE CodContaCorrenteInterna = ? AND Ano = ?", 0, dSaldoInicial, dDeb, dCred, dAplic, iCodConta, iAno)
        If lErro <> AD_SQL_SUCESSO Then gError 18029
    
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 18030
    
        If lErro <> AD_SQL_SUCESSO Then gError 18031
    
        lErro = Comando_LockExclusive(lComando)
        If lErro <> AD_SQL_SUCESSO Then gError 18036
    
        If Not IsMissing(vTipo) Then
        
            If vTipo = MOVCCI_APLICACAO Then
                dAplic = dAplic + Abs(dValor)
            ElseIf vTipo = MOVCCI_APLICACAO_EXCLUSAO Then
                dAplic = dAplic - Abs(dValor)
            ElseIf vTipo = MOVCCI_RESGATE_EXCLUSAO Then
                dAplic = dAplic + vValor1
            End If
        End If
    
        If dValor < 0 Then
            dDeb = dDeb + dValor
            lErro = Comando_ExecutarPos(lComando1, "UPDATE CCIMov SET Deb" & sMes & " = ?" & ", Aplic" & sMes & " = ?", lComando, dDeb, dAplic)
            If lErro <> AD_SQL_SUCESSO Then gError 18032
        Else
            dCred = dCred - dValor
            lErro = Comando_ExecutarPos(lComando1, "UPDATE CCIMov SET Cred" & sMes & " = ?" & ", Aplic" & sMes & " = ?", lComando, dCred, dAplic)
            If lErro <> AD_SQL_SUCESSO Then gError 18033
        End If
    
    Else
    
        'TRATA PRIMEIRO O DEBITO DA CONTA DE RESGATE
        sMes = Format(iMes, "00")
            
        'Le o Saldo da Credito para Atualizar a Conta de Resgate
        lErro = Comando_ExecutarPos(lComando, "SELECT SaldoInicial, Deb" & sMes & ", Cred" & sMes & " FROM CCIMov WHERE CodContaCorrenteInterna = ? AND Ano = ?", 0, dSaldoInicial, dDeb, dCred, iCodConta, iAno)
        If lErro <> AD_SQL_SUCESSO Then gError 69138
    
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 69139
    
        If lErro <> AD_SQL_SUCESSO Then gError 69140
    
        lErro = Comando_LockExclusive(lComando)
        If lErro <> AD_SQL_SUCESSO Then gError 69141
    
        If dValor < 0 Then
            dDeb = dDeb + dValor
            lErro = Comando_ExecutarPos(lComando1, "UPDATE CCIMov SET Deb" & sMes & " = ?", lComando, dDeb)
            If lErro <> AD_SQL_SUCESSO Then gError 69142
        Else
            dCred = dCred - dValor
            lErro = Comando_ExecutarPos(lComando1, "UPDATE CCIMov SET Cred" & sMes & " = ?", lComando, dCred)
            If lErro <> AD_SQL_SUCESSO Then gError 69143
        End If
            
        'TRATA A APLICACAO DA CONTA DE APLICACAO
        
        'Le o Saldo da Aplicacao para Atualizar a Conta de Resgate
        lErro = Comando_ExecutarPos(lComando2, "SELECT SaldoInicial, Aplic" & sMes & " FROM CCIMov WHERE CodContaCorrenteInterna = ? AND Ano = ?", 0, dSaldoInicial, dAplic, iCodConta1, iAno)
        If lErro <> AD_SQL_SUCESSO Then gError 69144
    
        lErro = Comando_BuscarPrimeiro(lComando2)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 69145
    
        If lErro <> AD_SQL_SUCESSO Then gError 69146
    
        If Not IsMissing(vTipo) Then
            If vTipo = MOVCCI_RESGATE Then
                dAplic = dAplic + vValor1
            End If
        End If
    
        lErro = Comando_LockExclusive(lComando2)
        If lErro <> AD_SQL_SUCESSO Then gError 69147
    
        lErro = Comando_ExecutarPos(lComando3, "UPDATE CCIMov SET Aplic" & sMes & " = ?", lComando2, dAplic)
        If lErro <> AD_SQL_SUCESSO Then gError 69148
    
    End If
    
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)
    
    CCIMov_Exclui = SUCESSO

    Exit Function

Erro_CCIMov_Exclui:

    CCIMov_Exclui = gErr

    Select Case gErr

        Case 18027, 18028, 69137, 69176
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 18029, 18030, 69138, 69139
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CCIMOV", gErr, iCodConta, iAno)

        Case 18031, 69140
            Call Rotina_Erro(vbOKOnly, "ERRO_CCIMOV_NAO_CADASTRADO", gErr, iCodConta, iAno)

        Case 18032, 18033, 69142, 69143, 69148
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_CCIMOV", gErr)

        Case 18036, 69141, 69147
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CCIMOV", gErr)
        
        Case 69144, 69145
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CCIMOV", gErr, iCodConta1, iAno)
        
        Case 69146
            Call Rotina_Erro(vbOKOnly, "ERRO_CCIMOV_NAO_CADASTRADO", gErr, iCodConta1, iAno)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 147950)

    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)

    Exit Function

End Function

Function MovCCI_Exclui_EmTransacao(ByVal objMovContaCorrente As ClassMovContaCorrente) As Long
'Exclui o movimento passado como parametro, dentro de uma transacao
'revisada para uso com MOVCCI_SAQUE, MOVCCI_PAGTO_ANTECIPADO, MOVCCI_PAGTO_TITULO_POR_CHEQUE, MOVCCI_PAGTO_TITULO_POR_BORDERO, MOVCCI_PAGTO_TITULO_POR_DINHEIRO
'IMPORTANTE: para outros tipos de movto tem que ser revista
'TEM QUE ESTAR DENTRO DE UMA TRANSACAO
Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim tMovContaCorrente As typeMovContaCorrente
Dim dDeb As Double
Dim iAno As Integer
Dim iMes As Integer, dValor As Double

On Error GoTo Erro_MovCCI_Exclui_EmTransacao

    lComando = 0
    lComando1 = 0

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 11998

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 11999

    'Verifica se o movimento esta cadastrado
    lErro = Comando_ExecutarPos(lComando, "SELECT NumMovto, Excluido, Tipo, Conciliado, Valor, DataMovimento FROM MovimentosContaCorrente WHERE CodConta = ? AND Sequencial = ?", 0, tMovContaCorrente.lNumMovto, tMovContaCorrente.iExcluido, tMovContaCorrente.iTipo, tMovContaCorrente.iConciliado, tMovContaCorrente.dValor, tMovContaCorrente.dtDataMovimento, objMovContaCorrente.iCodConta, objMovContaCorrente.lSequencial)
    If lErro <> AD_SQL_SUCESSO Then Error 18001

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 18002

    'se o movimento nao esta cadastrado erro
    If lErro = AD_SQL_SEM_DADOS Then Error 18003

    lErro = Comando_LockExclusive(lComando)
    If lErro <> AD_SQL_SUCESSO Then Error 18004
    
    objMovContaCorrente.lNumMovto = tMovContaCorrente.lNumMovto

    'verifica se o mov. ja foi excluido
    If tMovContaCorrente.iExcluido = MOVCONTACORRENTE_EXCLUIDO Then Error 18005

    'Verifica se o movimento se refere ao tipo certo
    If tMovContaCorrente.iTipo <> objMovContaCorrente.iTipo Then Error 18006
    
    'Verifica se esta conciliado
    If tMovContaCorrente.iConciliado <> 0 Then Error 18007

    'Exclui o Registro
    lErro = Comando_ExecutarPos(lComando1, "UPDATE MovimentosContaCorrente SET Excluido = ?", lComando, MOVCONTACORRENTE_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then Error 18008

    'obtem valor para atualizar acumuladores por dia e mes
    Select Case objMovContaCorrente.iTipo
    
        Case MOVCCI_ENTRADA_TRANSFERENCIA, MOVCCI_RESGATE, MOVCCI_DEPOSITO, MOVCCI_RECEBIMENTO_TITULO, MOVCCI_CREDITO_RETORNO_COBRANCA, MOVCCI_RECEB_ANTECIPADO, MOVCCI_CANC_PAGTO, MOVCCI_BORDERO_CHEQUE_PRE, MOVCCI_CRED_RET_COBRANCA, MOVCCI_EXTRATO_CARTAO_CRED
            dValor = tMovContaCorrente.dValor
        
        Case MOVCCI_SAQUE, MOVCCI_APLICACAO, MOVCCI_SAIDA_TRANSFERENCIA, MOVCCI_PAGTO_TITULO_POR_CHEQUE, MOVCCI_PAGTO_TITULO_POR_BORDERO, MOVCCI_PAGTO_TITULO_POR_DINHEIRO, MOVCCI_PAGTO_ANTECIPADO, MOVCCI_CANC_RECEBTO, MOVCCI_DEB_RET_COBRANCA
            dValor = -tMovContaCorrente.dValor
    
        Case Else
            Error 56755
            
    End Select
    
    '############################################
    'Inserido por Wagner 22/03/2006
    If objMovContaCorrente.iTipo = MOVCCI_DEPOSITO Then
        lErro = CF("ProjetoInfo_Exclui", PRJ_CR_TIPO_DEPOSITO, objMovContaCorrente.lNumMovto)
        If lErro <> SUCESSO Then gError 181764
    ElseIf objMovContaCorrente.iTipo = MOVCCI_SAQUE Then
        lErro = CF("ProjetoInfo_Exclui", PRJ_CR_TIPO_SAQUE, objMovContaCorrente.lNumMovto)
        If lErro <> SUCESSO Then gError 181764
    End If
    '############################################
    
    'Chama a rotina para Excluir o movimento conta da tabela CCIMovDia
    lErro = CF("CCIMovDia_Exclui", objMovContaCorrente.iCodConta, tMovContaCorrente.dtDataMovimento, dValor)
    If lErro <> SUCESSO Then Error 18009

    iAno = Year(tMovContaCorrente.dtDataMovimento)
    iMes = Month(tMovContaCorrente.dtDataMovimento)

    'Chama a rotina para Excluir o movimento conta da tabela CCIMov
    lErro = CF("CCIMov_Exclui", objMovContaCorrente.iCodConta, iAno, iMes, dValor)
    If lErro <> SUCESSO Then Error 18012

    'efetua procedimentos adicionais, se necessario
    Select Case tMovContaCorrente.iTipo

        Case MOVCCI_PAGTO_ANTECIPADO
            lErro = AntecipPag_Exclui_Movto(objMovContaCorrente.lNumMovto)
            If lErro <> SUCESSO Then Error 7895
            
        Case MOVCCI_PAGTO_TITULO_POR_BORDERO
            lErro = BorderoPagto_Excluir(objMovContaCorrente.lNumRefInterna)
            If lErro <> SUCESSO Then Error 7896
            
    End Select
    
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    MovCCI_Exclui_EmTransacao = SUCESSO

    Exit Function

Erro_MovCCI_Exclui_EmTransacao:

    MovCCI_Exclui_EmTransacao = Err
    
    Select Case Err

        Case 7895, 7896, 181764
        
        Case 11998, 11999
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 18001, 18002
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCONTACORRENTE1", Err, objMovContaCorrente.iCodConta, objMovContaCorrente.lSequencial)

        Case 18003
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVCONTACORRENTE_INEXISTENTE", Err, objMovContaCorrente.iCodConta, objMovContaCorrente.lSequencial)

        Case 18004
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_MOVIMENTOSCONTACORRENTE", Err, objMovContaCorrente.iCodConta, objMovContaCorrente.lSequencial)

        Case 18005
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVCONTACORRENTE_EXCLUIDO", Err)

        Case 18006
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPOMOV_DIFERENTE", Err)

        Case 18007
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVCONTACORRENTE_CONCILIADO", Err, objMovContaCorrente.iCodConta, objMovContaCorrente.lSequencial)

        Case 18008
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_MOVIMENTOSCONTACORRENTE", Err)

        Case 18009, 18012

        Case 56755
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPOMOV_DIFERENTE", Err)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 147951)
    
    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Function MovCCI_Grava_Saque(ByVal objMovContaCorrente As ClassMovContaCorrente, ByVal objContabil As ClassContabil) As Long
'Grava o movimento passado como parametro como um do tipo saque

Dim lTransacao As Long
Dim alComando(4) As Long
Dim tMovContaCorrente As typeMovContaCorrente
Dim dtDataSaldoInicial As Date
Dim iInativo As Integer
Dim iExigeNumero As Integer
Dim lErro As Long
Dim iExcluido As Integer
Dim iIndice As Integer
Dim objMovContaCorrente1 As New ClassMovContaCorrente
Dim lSequencial As Long, iTipoNatMovCta As Integer

On Error GoTo Erro_MovCCI_Grava_Saque

    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 11919

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 11920
    Next
    
    'Le a conta passada como parametro
    lErro = Comando_ExecutarPos(alComando(0), "SELECT DataSaldoInicial FROM ContasCorrentesInternas WHERE Codigo = ?", 0, dtDataSaldoInicial, objMovContaCorrente.iCodConta)
    If lErro <> AD_SQL_SUCESSO Then gError 11926

    'verifica se esta cadastrada
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 11950
    If lErro = AD_SQL_SEM_DADOS Then gError 11927

    'faz o lock da Conta
    lErro = Comando_LockShared(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 11928

    'Verifica se a data do saque e maior que a data do saldo inicial associada a conta
    If objMovContaCorrente.dtDataMovimento < dtDataSaldoInicial Then gError 11929

    'Le o tipo de pagamento
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Inativo, ExigeNumero FROM TipoMeioPagto WHERE Tipo = ? ", 0, iInativo, iExigeNumero, objMovContaCorrente.iTipoMeioPagto)
    If lErro <> AD_SQL_SUCESSO Then gError 11930

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 11931
    If lErro = AD_SQL_SEM_DADOS Then gError 11932

    'verifica se está ativo
    If iInativo = TIPOMEIOPAGTO_INATIVO Then gError 11933

    If iExigeNumero = TIPOMEIOPAGTO_EXIGENUMERO Then
    
        If objMovContaCorrente.lNumero = 0 Then gError 18207
    
        lErro = Comando_ExecutarPos(alComando(2), "SELECT Sequencial FROM MovimentosContaCorrente WHERE CodConta = ? AND TipoMeioPagto = ? AND Numero = ? AND Excluido = ?", 0, lSequencial, objMovContaCorrente.iCodConta, objMovContaCorrente.iTipoMeioPagto, objMovContaCorrente.lNumero, NAO_EXCLUIDO)
        If lErro <> SUCESSO Then gError 18249
        
        lErro = Comando_BuscarPrimeiro(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 18250
        
        If lErro = AD_SQL_SUCESSO And lSequencial <> objMovContaCorrente.lSequencial Then gError 18251
            
    Else
        objMovContaCorrente.lNumero = 0
    End If
    
    'Loca o tipo de Pagamento
    lErro = Comando_LockShared(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 11934

    If objMovContaCorrente.iFavorecido <> 0 Then
        
        'Le o Favorecido
        lErro = Comando_ExecutarPos(alComando(2), "SELECT Inativo FROM Favorecidos WHERE Codigo = ? ", 0, iInativo, objMovContaCorrente.iFavorecido)
        If lErro <> AD_SQL_SUCESSO Then gError 11935

        lErro = Comando_BuscarPrimeiro(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 11936
        If lErro = AD_SQL_SEM_DADOS Then gError 11937
        
        'Verifica se esta ativo
        If iInativo = FAVORECIDO_INATIVO Then gError 11938

        lErro = Comando_LockShared(alComando(2))
        If lErro <> AD_SQL_SUCESSO Then gError 11939

    End If
    
    'Se a natureza estiver preenchida
    If objMovContaCorrente.sNatureza <> "" Then
    
        'Le o Código correspondente à natureza contida em objMovContaCorrente
        lErro = Comando_ExecutarLockado(alComando(4), "SELECT Tipo FROM NatMovCta WHERE Codigo=?", iTipoNatMovCta, objMovContaCorrente.sNatureza)
        If lErro <> SUCESSO Then gError 32289
        
        lErro = Comando_BuscarPrimeiro(alComando(4))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 32292
        If lErro = AD_SQL_SEM_DADOS Then gError 32290
        
        lErro = Comando_LockShared(alComando(4))
        If lErro <> AD_SQL_SUCESSO Then gError 32291
        
    End If

    
    'Pesquisa o movimento pela conta + sequencial
    lErro = Comando_ExecutarPos(alComando(3), "SELECT Excluido, Tipo, CodConta, TipoMeioPagto, Numero, dataMovimento, valor,  NumMovto, Conciliado FROM MovimentosContaCorrente WHERE CodConta =? AND Sequencial = ? ", 0, tMovContaCorrente.iExcluido, tMovContaCorrente.iTipo, tMovContaCorrente.iCodConta, tMovContaCorrente.iTipoMeioPagto, tMovContaCorrente.lNumero, tMovContaCorrente.dtDataMovimento, tMovContaCorrente.dValor, tMovContaCorrente.lNumMovto, tMovContaCorrente.iConciliado, objMovContaCorrente.iCodConta, objMovContaCorrente.lSequencial)
    If lErro <> AD_SQL_SUCESSO Then gError 11940

    'Verifica se esta cadastrado
    lErro = Comando_BuscarPrimeiro(alComando(3))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 11941

    If lErro = AD_SQL_SUCESSO Then

        objMovContaCorrente1.iExcluido = tMovContaCorrente.iExcluido
        objMovContaCorrente1.iTipo = tMovContaCorrente.iTipo
        objMovContaCorrente1.iCodConta = tMovContaCorrente.iCodConta
        objMovContaCorrente1.iTipoMeioPagto = tMovContaCorrente.iTipoMeioPagto
        objMovContaCorrente1.lNumero = tMovContaCorrente.lNumero
        objMovContaCorrente1.dtDataMovimento = tMovContaCorrente.dtDataMovimento
        objMovContaCorrente1.dValor = tMovContaCorrente.dValor
        objMovContaCorrente.lNumMovto = tMovContaCorrente.lNumMovto
        objMovContaCorrente1.iConciliado = tMovContaCorrente.iConciliado
        
        lErro = CF("MovCCI_Grava_Saque_ComMov", objMovContaCorrente, alComando(3), objMovContaCorrente1)
        If lErro <> SUCESSO Then gError 18437
        
    'Se nao estiver cadastrado
    ElseIf lErro = AD_SQL_SEM_DADOS Then

        lErro = CF("MovCCI_Grava_Saque_SemMov", objMovContaCorrente)
        If lErro <> SUCESSO Then gError 18438
        
    End If

    '############################################
    'Inserido por Wagner 22/03/2006
    lErro = CF("ProjetoInfo_Grava", objMovContaCorrente.objProjetoInfo, PRJ_CR_TIPO_SAQUE, objMovContaCorrente.lNumMovto)
    If lErro <> SUCESSO Then gError 181706
    '############################################
    
    'Grava os dados contábeis (contabilidade)
    lErro = objContabil.Contabil_Gravar_Registro(objMovContaCorrente.lNumMovto, 0, 0, DATA_NULA)
    If lErro <> SUCESSO Then gError 20510

    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 11961

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    MovCCI_Grava_Saque = SUCESSO

    Exit Function

Erro_MovCCI_Grava_Saque:

    MovCCI_Grava_Saque = gErr

    Select Case gErr

        Case 11919
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 11920
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 11926, 11950
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONTASCORRENTESINTERNAS1", gErr, objMovContaCorrente.iCodConta)
            
        Case 11927
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTACORRENTE_INEXISTENTE", gErr, objMovContaCorrente.iCodConta)

        Case 11928
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CONTASCORRENTESINTERNAS", gErr, objMovContaCorrente.iCodConta)

        Case 11929
            Call Rotina_Erro(vbOKOnly, "ERRO_DATAMOVIMENTO_MENOR", gErr, objMovContaCorrente.dtDataMovimento, dtDataSaldoInicial, objMovContaCorrente.iCodConta)

        Case 11930, 11931
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOMEIOPAGTO1", gErr, objMovContaCorrente.iTipoMeioPagto)

        Case 11932
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPOMEIOPAGTO_INEXISTENTE", gErr, objMovContaCorrente.iTipoMeioPagto)

        Case 11933
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPOMEIOPAGTO_INATIVO", gErr, objMovContaCorrente.iTipoMeioPagto)

        Case 11934
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_TIPOMEIOPAGTO", gErr, objMovContaCorrente.iTipoMeioPagto)

        Case 11935, 11936
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FAVORECIDOS1", gErr)

        Case 11937
            Call Rotina_Erro(vbOKOnly, "ERRO_FAVORECIDO_INEXISTENTE", gErr, objMovContaCorrente.iFavorecido)

        Case 11938
            Call Rotina_Erro(vbOKOnly, "ERRO_FAVORECIDO_INATIVO", gErr, objMovContaCorrente.iFavorecido)

        Case 11939
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_FAVORECIDOS", gErr)

        Case 11940, 11941
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCONTACORRENTE1", gErr, objMovContaCorrente.iCodConta, objMovContaCorrente.lSequencial)
                     
        Case 11961
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case 18207
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPOMEIOPAGTO_EXIGENUMERO", gErr, objMovContaCorrente.iTipoMeioPagto)
        
        Case 18249, 18250
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONTASCORRENTESINTERNAS1", gErr, objMovContaCorrente.iCodConta)
           
        Case 18251
            Call Rotina_Erro(vbOKOnly, "ERRO_MOV_NUMPAGTO_DUPLICADO", gErr, objMovContaCorrente.iCodConta, objMovContaCorrente.iTipoMeioPagto, objMovContaCorrente.lNumero)
        
        Case 18437, 18438, 20510, 181706
        
        Case 32289, 32292
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NATMOVCTA", gErr, objMovContaCorrente.sNatureza)
        
        Case 32290
            Call Rotina_Erro(vbOKOnly, "ERRO_NATMOVCTA_NAO_CADASTRADO", gErr, objMovContaCorrente.sNatureza)
        
        Case 32291
             Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_NATMOVCTA", gErr, objMovContaCorrente.sNatureza)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 147952)

    End Select

    Call Transacao_Rollback
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function MovCCI_Grava_Saque_ComMov(ByVal objMovContaCorrente As ClassMovContaCorrente, ByVal lComando As Long, ByVal objMovContaCorrente1 As ClassMovContaCorrente) As Long
'auxiliar a atualizacao de um saque existente

Dim lErro As Long
Dim lComando1 As Long
Dim vbMsgRes As VbMsgBoxResult
Dim dtData As Date

On Error GoTo Erro_MovCCI_Grava_Saque_ComMov

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 18435
    
    'Loca o movimento
    lErro = Comando_LockExclusive(lComando)
    If lErro <> AD_SQL_SUCESSO Then gError 11942
    
    'Verifica se esta excluido e se é do tipo saque
    If objMovContaCorrente1.iExcluido = MOVCONTACORRENTE_EXCLUIDO Then gError 11943
    If objMovContaCorrente1.iTipo <> MOVCCI_SAQUE Then gError 11944

    'Verifica de os dados da tela coincidem com os do BD
    If (objMovContaCorrente1.iCodConta <> objMovContaCorrente.iCodConta) Or (objMovContaCorrente1.iTipoMeioPagto <> objMovContaCorrente.iTipoMeioPagto) Or _
       (objMovContaCorrente1.lNumero <> objMovContaCorrente.lNumero) Then

        If objMovContaCorrente.iTipoMeioPagto <> 0 And objMovContaCorrente.lNumero <> 0 Then
            'Verifica se ja existe movimento com o codconta+ tipomeioPagto + NUmero
            lErro = Comando_Executar(lComando1, "SELECT CodConta FROM MovimentosContaCorrente WHERE CodConta = ? AND TipoMeioPagto=? AND Numero = ? AND Excluido=0", objMovContaCorrente1.iCodConta, objMovContaCorrente.iCodConta, _
            objMovContaCorrente.iTipoMeioPagto, objMovContaCorrente.lNumero)
            If lErro <> AD_SQL_SUCESSO Then gError 11945

            lErro = Comando_BuscarPrimeiro(lComando1)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 11946

            'Se exsitir erro
            If lErro = AD_SQL_SUCESSO Then gError 11947
        End If
    End If

    'se estiver conciliado
    If objMovContaCorrente1.iConciliado <> NAO_CONCILIADO Then
        'verifica se a data e valor da tela coincide com os cadastrado
        If objMovContaCorrente1.dtDataMovimento <> objMovContaCorrente.dtDataMovimento Or _
        objMovContaCorrente1.dValor <> objMovContaCorrente.dValor Then
            'Avisar que tais dados nao serao alterados e pergunta se quer continuar
            vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_DATA_VALOR_NAO_ALTERAVEIS")

            If vbMsgRes = vbNo Then gError 11948

            If vbMsgRes = vbYes Then
                objMovContaCorrente.dtDataMovimento = objMovContaCorrente1.dtDataMovimento
                objMovContaCorrente.dValor = objMovContaCorrente1.dValor
            End If
        End If
    End If

    '##########################################
    'Alterado por Wagner 04/01/2005
    'Atualiza a tabela
    lErro = Comando_ExecutarPos(lComando1, "UPDATE MovimentosContaCorrente SET TipoMeioPagto = ?, Favorecido=?, Historico=?, NumRefExterna=?, Valor = ?, DataMovimento = ? , Numero = ?, Observacao = ?, Natureza = ?, Ccl = ?", lComando, _
        objMovContaCorrente.iTipoMeioPagto, objMovContaCorrente.iFavorecido, objMovContaCorrente.sHistorico, objMovContaCorrente.sNumRefExterna, objMovContaCorrente.dValor, objMovContaCorrente.dtDataMovimento, objMovContaCorrente.lNumero, objMovContaCorrente.sObservacao, objMovContaCorrente.sNatureza, objMovContaCorrente.sCcl)
    If lErro <> AD_SQL_SUCESSO Then gError 11949
    '##########################################

    dtData = objMovContaCorrente1.dtDataMovimento

    'Exclui o movimento com os dados antigos da tabela CCIMOVDIA
    lErro = CF("CCIMovDia_Exclui", objMovContaCorrente.iCodConta, dtData, -objMovContaCorrente1.dValor)
    If lErro <> SUCESSO Then gError 18038
    
    'Exclui o movimento com os dados antigos da tabela CCIMOVD
    lErro = CF("CCIMov_Exclui", objMovContaCorrente.iCodConta, Year(dtData), Month(dtData), -objMovContaCorrente1.dValor)
    If lErro <> SUCESSO Then gError 18039

    dtData = objMovContaCorrente.dtDataMovimento

    'Insere o movimento nas tabelas CCIMOV e CCIMOVDIa com os dados ja atualizados
    lErro = CF("CCIMovDia_Grava", objMovContaCorrente.iCodConta, dtData, -objMovContaCorrente.dValor)
    If lErro <> SUCESSO Then gError 18040

    lErro = CF("CCIMov_Grava", objMovContaCorrente.iCodConta, Year(dtData), Month(dtData), -objMovContaCorrente.dValor)
    If lErro <> SUCESSO Then gError 18041

    Call Comando_Fechar(lComando1)
    
    MovCCI_Grava_Saque_ComMov = SUCESSO

    Exit Function

Erro_MovCCI_Grava_Saque_ComMov:

    MovCCI_Grava_Saque_ComMov = gErr
    
    Select Case gErr
    
        Case 18435
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 11942
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_MOVIMENTOSCONTACORRENTE", gErr, objMovContaCorrente.iCodConta, objMovContaCorrente.lSequencial)
        
        Case 11943
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVCONTACORRENTE_EXCLUIDO", gErr, objMovContaCorrente.iCodConta, objMovContaCorrente.lSequencial)

        Case 11944
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPO_NAO_SAQUE", gErr, objMovContaCorrente.lSequencial)
        
        Case 11945, 11946
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCONTACORRENTE", gErr)

        Case 11947
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPOMEIOPAGTO_JA_UTILIZADO", gErr, objMovContaCorrente.iCodConta, objMovContaCorrente.iTipoMeioPagto, objMovContaCorrente.lNumero)

        Case 11948, 18038, 18039, 18040, 18041

        Case 11949
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_MOVIMENTOSCONTACORRENTE", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 147953)
        
    End Select
    
    Call Comando_Fechar(lComando1)
    
    Exit Function
    
End Function

Function MovCCI_Grava_Saque_SemMov(ByVal objMovContaCorrente As ClassMovContaCorrente) As Long
'auxiliar a inclusao de um saque

Dim lErro As Long
Dim dtData As Date
Dim tMovContaCorrente As typeMovContaCorrente
Dim lNumMovto As Long
Dim lComando As Long

On Error GoTo Erro_MovCCI_Grava_Saque_SemMov

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 18436

    'Verificar se ja existe um registro com o mesmo codconta + TipomeioPagto +Numero
    If objMovContaCorrente.iTipoMeioPagto <> 0 And objMovContaCorrente.lNumero <> 0 Then
        lErro = Comando_Executar(lComando, "SELECT CodConta FROM MovimentosContaCorrente WHERE CodConta = ? AND TipoMeioPagto=? and Numero = ? AND Excluido=0", _
        tMovContaCorrente.iCodConta, objMovContaCorrente.iCodConta, objMovContaCorrente.iTipoMeioPagto, objMovContaCorrente.lNumero)
        If lErro <> AD_SQL_SUCESSO Then Error 11951

        'Se existir -->Erro
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 11952
        If lErro = AD_SQL_SUCESSO Then Error 11953
    End If

    'Pega o número do próximo MovCCI
    lErro = CF("MovCCI_Automatico", lNumMovto)
    If lErro <> SUCESSO Then Error 18434

    objMovContaCorrente.lNumMovto = lNumMovto

    '##########################################
    'Alterado por Wagner 04/01/2005
    'Insere o Saque na Tabela MovimentosContaCorrente
    lErro = Comando_Executar(lComando, "INSERT INTO MovimentosContaCorrente (NumMovto, FilialEmpresa, CodConta, Sequencial, Tipo, Excluido, TipoMeioPagto, Numero, DataMovimento, Valor, Historico, Portador, Conciliado, Favorecido, NumRefExterna, NumRefInterna, Observacao, Natureza, Ccl) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", objMovContaCorrente.lNumMovto, giFilialEmpresa, objMovContaCorrente.iCodConta, objMovContaCorrente.lSequencial, MOVCCI_SAQUE, MOVCONTACORRENTE_NAO_EXCLUIDO, _
        objMovContaCorrente.iTipoMeioPagto, objMovContaCorrente.lNumero, objMovContaCorrente.dtDataMovimento, objMovContaCorrente.dValor, objMovContaCorrente.sHistorico, objMovContaCorrente.iPortador, objMovContaCorrente.iConciliado, objMovContaCorrente.iFavorecido, objMovContaCorrente.sNumRefExterna, objMovContaCorrente.lNumRefInterna, objMovContaCorrente.sObservacao, objMovContaCorrente.sNatureza, objMovContaCorrente.sCcl)
    If lErro <> AD_SQL_SUCESSO Then Error 11958
    '##########################################

    dtData = objMovContaCorrente.dtDataMovimento

    'Atualiza os dados em CCIMovDia
    lErro = CF("CCIMovDia_Grava", objMovContaCorrente.iCodConta, dtData, -objMovContaCorrente.dValor)
    If lErro <> SUCESSO Then Error 11959

    'Atualiza os dados em CCIMov
    lErro = CF("CCIMov_Grava", objMovContaCorrente.iCodConta, Year(dtData), Month(dtData), -objMovContaCorrente.dValor)
    If lErro <> SUCESSO Then Error 11960

    Call Comando_Fechar(lComando)

    MovCCI_Grava_Saque_SemMov = SUCESSO
    
    Exit Function
    
Erro_MovCCI_Grava_Saque_SemMov:

    MovCCI_Grava_Saque_SemMov = Err
    
    Select Case Err
    
        Case 11951, 11952
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCONTACORRENTE", Err)

        Case 11953
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPOMEIOPAGTO_JA_UTILIZADO", Err, objMovContaCorrente.iCodConta, objMovContaCorrente.iTipoMeioPagto, objMovContaCorrente.lNumero)

        Case 11959, 11960, 18434

        Case 11958
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MOVIMENTOSCONTACORRENTE", Err, objMovContaCorrente.iCodConta)
                   
        Case 18436
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 147954)
    
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function
    
End Function

Function TipoCliente_Automatico(iCodigo As Integer) As Long
'retorna o número do proximo TipoCliente disponivel

Dim lCodigo As Long, lErro As Long

On Error GoTo Erro_TipoCliente_Automatico

    lErro = CF("Config_ObterAutomatico", "CPRConfig", "NUM_PROX_TIPO_CLIENTE", "TiposDeCliente", "Codigo", lCodigo)
    If lErro <> SUCESSO Then Error 19063
    
    iCodigo = lCodigo
    
    TipoCliente_Automatico = SUCESSO

    Exit Function

Erro_TipoCliente_Automatico:

    TipoCliente_Automatico = Err

    Select Case Err

        Case 19063
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 147955)

    End Select
    
    Exit Function

End Function
        
Function MovCCI_Automatico(lNumMovto As Long) As Long
'Retorna o proximo numero de Movimento disponivel

    MovCCI_Automatico = CF("Config_ObterNumInt", "CPRConfig", "NUM_PROX_MOV_CCI", lNumMovto)

End Function

Function ContasCorrentesInt_Grava(ByVal objContaCorrenteInt As ClassContasCorrentesInternas) As Long
'Grava Conta Corrente da filialempresa corrente no bd

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_ContasCorrentesInt_Grava

    'Inicializa transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 11817
    
    'Rotina responsável pela gravação da parte relacionada a contabilidade
    lErro = CF("ContasCorrentesInt_Grava_Trans", objContaCorrenteInt)
    If lErro <> SUCESSO Then gError 117625
    
    'Finaliza Transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 11836

    ContasCorrentesInt_Grava = SUCESSO
    
    Exit Function
    
Erro_ContasCorrentesInt_Grava:

    ContasCorrentesInt_Grava = gErr
    
    Select Case gErr
        
        Case 11817
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
        
        Case 11836
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case 117625
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 147956)
        
    End Select
    
    Call Transacao_Rollback
    
    Exit Function
    
End Function

Function ContasCorrentesInt_Grava_Trans(ByVal objContaCorrenteInt As ClassContasCorrentesInternas) As Long
'Grava Conta Corrente da filialempresa corrente no bd
'IMPORTANTE: TEM QUE SER CHAMADA DENTRO DE TRANSACAO

Dim lErro As Long
Dim alComando(0 To 5) As Long, iIndice As Integer
Dim sNomeBanco As String
Dim sNomeConta As String
Dim iCodigo As Integer
Dim dtDataSaldoInicial As Date
Dim dtDataMovimento As Date

On Error GoTo Erro_ContasCorrentesInt_Grava_Trans

    'Inicializa comandos
    For iIndice = LBound(alComando) To UBound(alComando)
    
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 11818
        
    Next
    
    'Se o banco foi informado...
    If objContaCorrenteInt.iCodBanco <> 0 Then
        
        lErro = CF("Banco_Lock", alComando(0), objContaCorrenteInt.iCodBanco)
        If lErro <> SUCESSO And lErro <> 19384 Then Error 11824
                
        If lErro = 19384 Then Error 11826
        
    End If
    
    'Rotina responsável pela gravação da parte relacionada a contabilidade
    lErro = CF("CCI_Grava_Contabil", alComando(1), objContaCorrenteInt)
    If lErro <> SUCESSO Then Error 11828
    
    'Lê a conta corrente com o código da tela
    lErro = Comando_ExecutarPos(alComando(2), "SELECT DataSaldoInicial FROM ContasCorrentesInternas WHERE Codigo = ? ", 0, dtDataSaldoInicial, objContaCorrenteInt.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 11829
    
    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 11830
    
    'Se a conta estiver cadastrada
    If lErro = AD_SQL_SUCESSO Then
        
        sNomeConta = String(STRING_NOME_REDUZIDO, 0)
        
        'Verifica se já existe uma outra Conta Corrente com o mesmo Nome Reduzido
        lErro = Comando_Executar(alComando(5), "SELECT Codigo, NomeReduzido FROM ContasCorrentesInternas WHERE NomeReduzido = ?", iCodigo, sNomeConta, objContaCorrenteInt.sNomeReduzido)
        If lErro <> AD_SQL_SUCESSO Then Error 11780
    
        lErro = Comando_BuscarPrimeiro(alComando(5))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 11781
    
        'Se achou uma Conta Corrente com mesmo Nome Reduzido com outro Código --> Erro
        If lErro = AD_SQL_SUCESSO And iCodigo <> objContaCorrenteInt.iCodigo Then Error 11782
        
        'Verifica se a Data do Saldo inicial é menor do que qualquer movimento feito para a conta em questao
        lErro = Comando_Executar(alComando(3), "SELECT DataMovimento FROM MovimentosContaCorrente WHERE CodConta = ? AND DataMovimento < ?", dtDataMovimento, objContaCorrenteInt.iCodigo, objContaCorrenteInt.dtDataInicial)
        If lErro <> AD_SQL_SUCESSO Then Error 11831
        
        lErro = Comando_BuscarPrimeiro(alComando(3))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 11832
        
        If lErro = AD_SQL_SUCESSO Then Error 11833
        
        'Faz a atualização de dados
        lErro = Comando_ExecutarPos(alComando(4), "UPDATE ContascorrentesInternas SET NomeReduzido=?, Descricao =?, CodBanco=?, Agencia=?, DVAgencia =?, NumConta =?, DVNumConta =?, DVAgConta=?, Contato=?, ConvenioPagto=?, Telefone=?, Fax =?, SaldoInicial=?, DataSaldoInicial=?, ContaContabil=?, Ativo=?, Rotativo=?, DirArqBordPagto = ?", alComando(2), objContaCorrenteInt.sNomeReduzido, _
            objContaCorrenteInt.sDescricao, objContaCorrenteInt.iCodBanco, objContaCorrenteInt.sAgencia, objContaCorrenteInt.sDVAgencia, objContaCorrenteInt.sNumConta, objContaCorrenteInt.sDVNumConta, objContaCorrenteInt.sDVAgConta, objContaCorrenteInt.sContato, objContaCorrenteInt.sConvenioPagto, objContaCorrenteInt.sTelefone, objContaCorrenteInt.sFax, objContaCorrenteInt.dSaldoInicial, objContaCorrenteInt.dtDataInicial, objContaCorrenteInt.sContaContabil, objContaCorrenteInt.iAtivo, objContaCorrenteInt.dRotativo, objContaCorrenteInt.sDirArqBordPagto)
        If lErro <> AD_SQL_SUCESSO Then Error 11834
    
    'Se não estiver cadstrada
    Else
        If giFilialEmpresa = EMPRESA_TODA Then Error 7692
        
        sNomeConta = String(STRING_NOME_REDUZIDO, 0)
        
        'Verifica se já existe uma outra Conta Corrente com o mesmo Nome Reduzido
        lErro = Comando_Executar(alComando(5), "SELECT NomeReduzido FROM ContasCorrentesInternas WHERE NomeReduzido = ?", sNomeConta, objContaCorrenteInt.sNomeReduzido)
        If lErro <> AD_SQL_SUCESSO Then Error 22035
    
        lErro = Comando_BuscarPrimeiro(alComando(5))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 22573
    
        'Se achou uma Conta Corrente com mesmo Nome Reduzido com outro Código --> Erro
        If lErro = AD_SQL_SUCESSO Then Error 22574
        
        'Insere a nova conta corrente na tabela de contas correntes internas
        lErro = Comando_Executar(alComando(4), "INSERT INTO ContasCorrentesInternas (Codigo, NomeReduzido, Descricao, FilialEmpresa, CodBanco, Agencia, DVAgencia, NumConta, DVNumConta, DVAgConta, Contato, ConvenioPagto, Telefone, Fax, Saldoinicial, DataSaldoInicial, ContaContabil, ProxSeqMov, ProxBordero, Ativo, Rotativo, DirArqBordPagto) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,1,1,?,?,?)", objContaCorrenteInt.iCodigo, _
            objContaCorrenteInt.sNomeReduzido, objContaCorrenteInt.sDescricao, giFilialEmpresa, objContaCorrenteInt.iCodBanco, objContaCorrenteInt.sAgencia, objContaCorrenteInt.sDVAgencia, objContaCorrenteInt.sNumConta, objContaCorrenteInt.sDVNumConta, objContaCorrenteInt.sDVAgConta, objContaCorrenteInt.sContato, objContaCorrenteInt.sConvenioPagto, objContaCorrenteInt.sTelefone, objContaCorrenteInt.sFax, objContaCorrenteInt.dSaldoInicial, objContaCorrenteInt.dtDataInicial, objContaCorrenteInt.sContaContabil, objContaCorrenteInt.iAtivo, objContaCorrenteInt.dRotativo, objContaCorrenteInt.sDirArqBordPagto)
        If lErro <> AD_SQL_SUCESSO Then Error 11835
        
    End If
    
    'Libera comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
        
    ContasCorrentesInt_Grava_Trans = SUCESSO
    
    Exit Function
    
Erro_ContasCorrentesInt_Grava_Trans:

    ContasCorrentesInt_Grava_Trans = Err
    
    Select Case Err
        
        Case 7692
            Call Rotina_Erro(vbOKOnly, "ERRO_CCI_INSERCAO_EMPRESA_TODA", Err)
        
        Case 11780, 11781, 22035, 22573
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONTASCORRENTESINTERNAS1", Err, objContaCorrenteInt.sNomeReduzido)
            
        Case 11782, 22574
            Call Rotina_Erro(vbOKOnly, "ERRO_NOME_CONTACORRENTEINTERNA_EXISTENTE", Err, objContaCorrenteInt.sNomeReduzido)
            
        Case 11818
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
            
        Case 11823
            Call Rotina_Erro(vbOKOnly, "ERRO_CODBANCO_NAO_INFORMADO", Err)

        Case 11825
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BANCOS", Err, objContaCorrenteInt.iCodBanco)
                   
        Case 11826
            Call Rotina_Erro(vbOKOnly, "ERRO_BANCO_NAO_CADASTRADO", Err, objContaCorrenteInt.iCodBanco)
        
        Case 11827
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_BANCOS", Err, objContaCorrenteInt.iCodBanco)
             
        Case 11828, 11824
        
        Case 11829, 11830
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONTASCORRENTESINTERNAS", Err)
            
        Case 11831, 11832
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCONTACORRENTE", Err)
        
        Case 11833
            Call Rotina_Erro(vbOKOnly, "ERRO_DATA_COM_MOVIMENTOS", Err, objContaCorrenteInt.dtDataInicial)
        
        Case 11834
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_CONTASCORRENTESINTERNAS", Err)
        
        Case 11835
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CONTASCORRENTESINTERNAS", Err, objContaCorrenteInt.iCodigo)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 147957)
        
    End Select
    
    'Libera comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function
    
End Function

Function ContasCorrentesInt_Exclui(ByVal objContaCorrenteInt As ClassContasCorrentesInternas) As Long
'exclui uma conta corrente

Dim lErro As Long
Dim lTransacao As Long
Dim lComando As Long
Dim lComando1 As Long
Dim lComando2 As Long
Dim iChequeBordero As Integer
Dim lNumMovto As Long

On Error GoTo Erro_ContasCorrentesInt_Exclui

    lTransacao = 0
    lComando = 0
    lComando1 = 0
    lComando2 = 0

    lTransacao = Transacao_Abrir
    If lTransacao = 0 Then Error 11844
    
    lComando = Comando_Abrir
    If lComando = 0 Then Error 11845
    
    lComando1 = Comando_Abrir
    If lComando1 = 0 Then Error 11847
    
    lComando2 = Comando_Abrir
    If lComando2 = 0 Then Error 11846
    
    'Le a conta corrente
    lErro = Comando_ExecutarPos(lComando, "SELECT ChequeBordero FROM ContasCorrentesInternas WHERE Codigo = ? ", 0, iChequeBordero, objContaCorrenteInt.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 11848
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 11849
    
    'Se nao estiver cadstrada --> erro
    If lErro = AD_SQL_SEM_DADOS Then Error 11850
    
    lErro = Comando_LockExclusive(lComando)
    If lErro <> AD_SQL_SUCESSO Then Error 11851
    
    'Verifica se o compo bordero e diferente de zero
    If iChequeBordero <> 0 Then Error 11852
    
    'Verifica se existe alguma movimento associado a conta corrente
    lErro = Comando_Executar(lComando1, "SELECT NumMovto FROM MovimentosContaCorrente WHERE CodConta = ? ", lNumMovto, objContaCorrenteInt.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 11853
    
    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 11854
    
    If lErro = AD_SQL_SUCESSO Then Error 11855
    
    'Exclui a conta do BD
    lErro = Comando_ExecutarPos(lComando2, "DELETE FROM ContasCorrentesInternas", lComando)
    If lErro <> AD_SQL_SUCESSO Then Error 11856
    
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 11857
    
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    
    ContasCorrentesInt_Exclui = SUCESSO
    
    Exit Function
    
Erro_ContasCorrentesInt_Exclui:

    ContasCorrentesInt_Exclui = Err
    
    Select Case Err
        
        Case 11844
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
        
        Case 11845, 11846, 11847
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 11848, 11849
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONTASCORRENTESINTERNAS", Err)
        
        Case 11850
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTACORRENTE_INEXISTENTE", Err)
        
        Case 11851
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CONTASCORRENTESINTERNAS", Err)
        
        Case 11852
            Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEBORDERO_DIFERENTE_ZERO", Err, objContaCorrenteInt.iCodigo)
            
        Case 11853, 11854
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCONTACORRENTE", Err)
            
        Case 11855
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTA_COM_MOVIMENTO", Err, objContaCorrenteInt.sContaContabil)
            
        Case 11856
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CONTASCORRENTESINTERNAS", Err)
            
        Case 11857
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 147958)
    
    End Select
    
    Call Transacao_Rollback
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    
    Exit Function
    
End Function

Function CCI_Grava_Contabil(ByVal lComando As Long, ByVal objContaCorrenteInt As ClassContasCorrentesInternas) As Long
'auxiliar a gravacao de uma conta corrente da empresa, faz o lock da conta contabil, se necessario

Dim lErro As Long
Dim iTipoConta As Integer
Dim objcolModulo As New AdmColModulo

On Error GoTo Erro_CCI_Grava_Contabil

    'verifica se o modulo de contabilidade esta ativo
    If gcolModulo.Ativo(MODULO_CONTABILIDADE) = MODULO_ATIVO Then
    
        'Verifica se a conta foi digitada
        If Not (Len(objContaCorrenteInt.sContaContabil) = 0) Then
        
            'Verifica se a conta esta cadastrada
            lErro = Comando_ExecutarLockado(lComando, "SELECT TipoConta FROM PlanoConta WHERE Conta = ?", iTipoConta, objContaCorrenteInt.sContaContabil)
            If lErro <> AD_SQL_SUCESSO Then Error 11838
            
            lErro = Comando_BuscarPrimeiro(lComando)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 11869
        
            'Se a conta nao estiver cadastrada --> erro
            If lErro = AD_SQL_SEM_DADOS Then Error 11839
            
            lErro = Comando_LockShared(lComando)
            If lErro <> AD_SQL_SUCESSO Then Error 11840
            
            If iTipoConta <> CONTA_ANALITICA Then Error 11841
        
        End If
    End If
    
    CCI_Grava_Contabil = SUCESSO
    
    Exit Function
    
Erro_CCI_Grava_Contabil:

    CCI_Grava_Contabil = Err
    
    Select Case Err
    
        Case 11837
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTA_NAO_INFORMADA", Err)
            
        Case 11838, 11869
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PLANOCONTA", Err)
        
        Case 11839
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTA_NAO_CADASTRADA", Err, objContaCorrenteInt.sContaContabil)
        
        Case 11840
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_PLANOCONTA", Err)
        
        Case 11841
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTA_NAO_ANALITICA", objContaCorrenteInt.sContaContabil, Err)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 147959)
            
    End Select
    
    Exit Function

End Function

Function HistMovCta_Automatico(iCodigo As Integer) As Long
'Retorna o Código do proximo Histórico disponível

Dim lCodigo As Long, lErro As Long

On Error GoTo Erro_HistMovCta_Automatico

    lErro = CF("Config_ObterAutomatico", "CPRConfig", NUM_PROX_HISTPADRAO_MOV, "HistPadraoMovConta", "Codigo", lCodigo)
    If lErro <> SUCESSO Then Error 15014
    
    iCodigo = lCodigo
    
    HistMovCta_Automatico = SUCESSO

    Exit Function

Erro_HistMovCta_Automatico:

    HistMovCta_Automatico = Err

    Select Case Err

        Case 15014
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 147960)

    End Select
    
    Exit Function
    
End Function

Function HistMovCta_Grava(ByVal objHistMovCta As ClassHistMovCta) As Long
'Grava o Histórico no Banco de Dados

Dim lComando1 As Long
Dim lComando2 As Long
Dim lTransacao As Long
Dim lErro As Long
Dim iStatus As Integer
Dim iCodigo As Integer

On Error GoTo Erro_HistMovCta_Grava

    lComando1 = 0
    lComando2 = 0
    lTransacao = 0

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 15033

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 15034

    'Inicia a Transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 15035

    'Pesquisa no Banco de Dados o Histórico em questão
    lErro = Comando_ExecutarPos(lComando1, "SELECT Codigo FROM HistPadraoMovConta WHERE Codigo=?", 0, iCodigo, objHistMovCta.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 15036

    'Lê os dados do Histórico, se estiver no Banco de Dados
    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 15037

    'Encontrou o Histórico, então isto é uma alteração
    If lErro = AD_SQL_SUCESSO Then

        'Atualiza os dados do Histórico
        lErro = Comando_ExecutarPos(lComando2, "UPDATE HistPadraoMovConta SET Descricao=?", lComando1, objHistMovCta.sDescricao)
        If lErro <> AD_SQL_SUCESSO Then Error 15038

    'Não encontrou o Histórico, então isto é uma inserção
    Else

        'Insere o Histórico
        lErro = Comando_Executar(lComando2, "INSERT INTO HistPadraoMovConta (Codigo,Descricao) VALUES (?,?)", objHistMovCta.iCodigo, objHistMovCta.sDescricao)
        If lErro <> AD_SQL_SUCESSO Then Error 15039

    End If

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 15040

    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando1)

    HistMovCta_Grava = SUCESSO

    Exit Function

Erro_HistMovCta_Grava:

    HistMovCta_Grava = Err

    Select Case Err

        Case 15033, 15034
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 15035
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 15036, 15037
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TABELA_HISTMOVCTA1", Err, objHistMovCta.iCodigo)

        Case 15038
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_HISTMOVCTA", Err, objHistMovCta.iCodigo)

        Case 15039
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_HISTMOVCTA", Err, objHistMovCta.iCodigo)

        Case 15040
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 147961)

    End Select

    Call Transacao_Rollback
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)

    Exit Function

End Function

Function HistMovCta_Exclui(ByVal iCodigo As Integer) As Long
'Exclui o Histórico do Banco de Dados

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim lTransacao As Long
Dim sDescricao As String

On Error GoTo Erro_HistMovCta_Exclui

    lComando = 0
    lComando1 = 0
    lTransacao = 0

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 15052

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 15053

    'Inicia a Transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 15054

    sDescricao = String(STRING_HISTORICOMOVCONTA, 0)

    'Seleciona os Históricos que possuem o Código em questão
    lErro = Comando_ExecutarPos(lComando, "SELECT Descricao FROM HistPadraoMovConta WHERE Codigo=?", 0, sDescricao, iCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 15055

    'Lê o primeiro histórico da seleção feita
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 15324

    'Se não existir Histórico com o ódigo em questão
    If lErro = AD_SQL_SEM_DADOS Then Error 15056

    'Loca o registro que guarda o Código do Histórico
    lErro = Comando_LockExclusive(lComando)
    If lErro <> AD_SQL_SUCESSO Then Error 15058

    'Exclui o Histórico do Banco de Dados
    lErro = Comando_ExecutarPos(lComando1, "DELETE FROM HistPadraoMovConta", lComando)
    If lErro <> AD_SQL_SUCESSO Then Error 15059

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 15060

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    HistMovCta_Exclui = SUCESSO

    Exit Function

Erro_HistMovCta_Exclui:

    HistMovCta_Exclui = Err

    Select Case Err

        Case 15052, 15053
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 15054
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 15055, 15324
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TABELA_HISTMOVCTA1", Err, iCodigo)

        Case 15056
            Call Rotina_Erro(vbOKOnly, "ERRO_HISTMOVCTA_NAO_CADASTRADO", Err, iCodigo)

        Case 15058
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_HISTMOVCTA", Err, iCodigo)

        Case 15059
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_HISTMOVCTA", Err, iCodigo)

        Case 15060
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 147962)

    End Select

    Call Transacao_Rollback
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Function CtaCorrente_Sequencial_Automatico(ByVal iConta As Integer, lSeq As Long) As Long
'Gera o proximo sequencial de movimento para a conta em questao
'AVISO: ESSA ROTINA DEVE SER CHAMADA DENTRO DE UMA TRANSACAO

Dim lComando As Long
Dim lComando1 As Long
Dim lSeq1 As Long
Dim lNumMovto As Long
Dim lErro As Long

On Error GoTo Erro_CtaCorrente_Sequencial_Automatico

    lComando = 0
    lComando1 = 0

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 11983

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 11984

    'Pesquisa na tabela de contascorrentes o proximo sequencial disponivel para a contq em questao
    lErro = Comando_ExecutarPos(lComando, "SELECT ProxSeqMov FROM ContasCorrentesInternas WHERE Codigo = ?", 0, lSeq, iConta)
    If lErro <> AD_SQL_SUCESSO Then Error 11985

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO Then Error 11986

    'Loca o sequencial
    lErro = Comando_LockExclusive(lComando)
    If lErro <> AD_SQL_SUCESSO Then Error 11987

    'Pesquisa se ja foi utilizado em outro movimento
    lErro = Comando_Executar(lComando1, "SELECT Sequencial FROM MovimentosContaCorrente WHERE CodConta = ? AND Sequencial >= ? ORDER BY Sequencial", lSeq1, iConta, lSeq)
    If lErro <> AD_SQL_SUCESSO Then Error 11988

    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 10040

    Do While lErro <> AD_SQL_SEM_DADOS

        If lSeq1 > lSeq Then

            Exit Do

        Else

            lSeq = lSeq + 1

            lErro = Comando_BuscarProximo(lComando1)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 11989

        End If

    Loop

    'atualiza o sequencial na tabela de contas correntes
    lErro = Comando_ExecutarPos(lComando1, "UPDATE ContasCorrentesInternas SET ProxSeqMov =? ", lComando, lSeq + 1)
    If lErro <> AD_SQL_SUCESSO Then Error 11990

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    CtaCorrente_Sequencial_Automatico = SUCESSO

    Exit Function

Erro_CtaCorrente_Sequencial_Automatico:

    CtaCorrente_Sequencial_Automatico = Err

    Select Case Err

        Case 10040, 11988, 11989
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCONTACORRENTE", Err)

        Case 11983, 11984
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 11985, 11986
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONTASCORRENTESINTERNAS1", Err, iConta)

        Case 11987
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CONTASCORRENTESINTERNAS", Err, iConta)

        Case 11990
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_CONTASCORRENTESINTERNAS", Err, iConta)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 147963)

    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Function MovCCI_Grava_Transferencia(ByVal objTransferencia As ClassTransferencia, ByVal objContabil As ClassContabil) As Long
'grava uma transferencia de dinheiro feita pela tesouraria entre contas correntes da empresa

Dim lErro As Long
Dim lTransacao As Long
Dim lComando As Long
Dim lComando1 As Long
Dim lComando2 As Long
Dim lComando3 As Long
Dim dtDataInicialOrigem As Date
Dim dtDataInicialDestino As Date
Dim iInativo As Integer
Dim iExigeNumero As Integer
Dim dtData As Date
Dim colLog As New Collection
Dim iTestaInt As Integer
Dim sConteudo As String, iComErro As Integer

On Error GoTo Erro_MovCCI_Grava_Transferencia
               
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 18155
    
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 18156
    
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 18240
    
    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 18241
    
    lComando3 = Comando_Abrir()
    If lComando3 = 0 Then Error 18240
    
    lErro = CF("Config_Le", "CRFATConfig", "TESTA_INTEGRIDADE_CCIMOVDIA", EMPRESA_TODA, sConteudo)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    iTestaInt = StrParaInt(sConteudo)
    
    If iTestaInt = MARCADO Then
    
        colLog.Add "FUNÇÃO: MovCCI_Grava_Transferencia"
        colLog.Add ""
        colLog.Add "DADOS VINDOS DA TELA"
        colLog.Add "===================="
        colLog.Add ""
    
        colLog.Add "CodContaOrigem: " & CStr(objTransferencia.iCodContaOrigem)
        colLog.Add "SeqOrigem: " & CStr(objTransferencia.lSeqOrigem)
        colLog.Add "CodContaDestino: " & CStr(objTransferencia.iCodContaDestino)
        colLog.Add "SeqDestino: " & CStr(objTransferencia.lSeqDestino)
        colLog.Add "Data: " & Format(objTransferencia.dtData, "dd/mm/yyyy")
        colLog.Add "Valor: " & Format(objTransferencia.dValor, "STANDARD")
        
        colLog.Add ""
        colLog.Add "DADOS INICIAIS DE VALIDAÇÃO DE INTEGRIDADE"
        colLog.Add "=========================================="
        colLog.Add ""
        
        lErro = CCIMovDia_Testa_Integridade(colLog, iComErro)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        
        If iComErro = MARCADO Then gError 211241
        
    End If

    'Verifica se a conta origem existe no BD
    lErro = Comando_ExecutarPos(lComando, "SELECT DataSaldoInicial FROM ContasCorrentesInternas WHERE Codigo = ?", 0, dtDataInicialOrigem, objTransferencia.iCodContaOrigem)
    If lErro <> AD_SQL_SUCESSO Then Error 18157
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 18158
    
    'Se nao existir ==>> erro
    If lErro = AD_SQL_SEM_DADOS Then Error 18159
    
    'Loca a conta origem
    lErro = Comando_LockExclusive(lComando)
    If lErro <> AD_SQL_SUCESSO Then Error 18160
    
    'Verifica se a conta destino Existe no BD
    lErro = Comando_ExecutarPos(lComando1, "SELECT DataSaldoInicial FROM ContasCorrentesInternas WHERE Codigo = ?", 0, dtDataInicialDestino, objTransferencia.iCodContaDestino)
    If lErro <> AD_SQL_SUCESSO Then Error 18161
    
    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 18162
    
    'Se nao existir --> Erro
    If lErro = AD_SQL_SEM_DADOS Then Error 18163
    
    'Loca a conta destino
    lErro = Comando_LockExclusive(lComando1)
    If lErro <> AD_SQL_SUCESSO Then Error 18164
    
    'Verifica se a data do movimento e menor que a data inicial da conta origem
    If objTransferencia.dtData < dtDataInicialOrigem Then Error 18165
    
    'Verifica se a data do movimento e menor que a data inicial da conta destino
    If objTransferencia.dtData < dtDataInicialDestino Then Error 18166
    
    'Verifica se o tipo de pagamento esta cadastrado no BD
    lErro = Comando_ExecutarPos(lComando2, "SELECT Inativo, ExigeNumero FROM TipoMeioPagto WHERE Tipo = ?", 0, iInativo, iExigeNumero, objTransferencia.iTipoMeioPagto)
    If lErro <> AD_SQL_SUCESSO Then Error 18167
    
    lErro = Comando_BuscarPrimeiro(lComando2)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 18168
    
    'Se nao existir --> Erro
    If lErro = AD_SQL_SEM_DADOS Then Error 18169
    
    'Loca o tipo de pagamento
    lErro = Comando_LockShared(lComando2)
    If lErro <> AD_SQL_SUCESSO Then Error 18170
        
    'Verifica se é um tipo de pagamento ativo
    If iInativo = TIPOMEIOPAGTO_INATIVO Then Error 18186
        
    If iExigeNumero = TIPOMEIOPAGTO_EXIGENUMERO Then
        
        If objTransferencia.lNumero = 0 Then Error 18205
        
        lErro = Comando_ExecutarPos(lComando3, "SELECT DataMovimento FROM MovimentosContaCorrente WHERE CodConta = ? AND TipoMeioPagto = ? AND Numero = ? AND Excluido=0 ", 0, dtDataInicialOrigem, objTransferencia.iCodContaOrigem, objTransferencia.iTipoMeioPagto, objTransferencia.lNumero)
        If lErro <> SUCESSO Then Error 18245
        
        lErro = Comando_BuscarPrimeiro(lComando3)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 18246
        
        If lErro = AD_SQL_SUCESSO Then Error 18247

    Else
        objTransferencia.lNumero = 0
    End If
    
    lErro = CF("MovCCI_Grava_Transferencia_BD", objTransferencia)
    If lErro <> SUCESSO Then Error 18243
    
    dtData = objTransferencia.dtData
    
    'Atualiza o movimento nas tabelas CCIMov e CCIMovDia
    lErro = CF("CCIMovDia_Grava", objTransferencia.iCodContaOrigem, dtData, -objTransferencia.dValor)
    If lErro <> SUCESSO Then Error 18182
    
    lErro = CF("CCIMov_Grava", objTransferencia.iCodContaOrigem, Year(dtData), Month(dtData), -objTransferencia.dValor)
    If lErro <> SUCESSO Then Error 18183
    
    lErro = CF("CCIMovDia_Grava", objTransferencia.iCodContaDestino, dtData, objTransferencia.dValor)
    If lErro <> SUCESSO Then Error 18184
    
    lErro = CF("CCIMov_Grava", objTransferencia.iCodContaDestino, Year(dtData), Month(dtData), objTransferencia.dValor)
    If lErro <> SUCESSO Then Error 18185
    
    'Grava os dados contábeis (contabilidade)
    lErro = objContabil.Contabil_Gravar_Registro(objTransferencia.lNumIntDoc, 0, 0, DATA_NULA)
    If lErro <> SUCESSO Then Error 20526
    
    If iTestaInt = MARCADO Then
    
        colLog.Add ""
        colLog.Add "DADOS FINAIS DE VALIDAÇÃO DE INTEGRIDADE"
        colLog.Add "========================================"
        colLog.Add ""
        
        lErro = CCIMovDia_Testa_Integridade(colLog, iComErro)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        
        If iComErro = MARCADO Then gError 211242
    
    End If
    
    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then Error 18187
    
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)
    
    MovCCI_Grava_Transferencia = SUCESSO
    
    Exit Function
    
Erro_MovCCI_Grava_Transferencia:

    MovCCI_Grava_Transferencia = Err
    
    Select Case Err
            
        Case 18155
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
            
        Case 18156
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 18157, 18158, 18245, 18246
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONTASCORRENTESINTERNAS1", Err, objTransferencia.iCodContaOrigem)
        
        Case 18161, 18162
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONTASCORRENTESINTERNAS1", Err, objTransferencia.iCodContaDestino)
        
        Case 18159
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTACORRENTE_INEXISTENTE", Err, objTransferencia.iCodContaOrigem)
        
        Case 18160
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CONTASCORRENTESINTERNAS", Err, objTransferencia.iCodContaOrigem)
              
        Case 18163
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTACORRENTE_INEXISTENTE", Err, objTransferencia.iCodContaDestino)
        
        Case 18164
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CONTASCORRENTESINTERNAS", Err, objTransferencia.iCodContaDestino)
        
        Case 18165
            Call Rotina_Erro(vbOKOnly, "ERRO_DATAMOVIMENTO_MENOR", Err, objTransferencia.dtData, dtDataInicialOrigem, objTransferencia.iCodContaOrigem)
        
        Case 18166
            Call Rotina_Erro(vbOKOnly, "ERRO_DATAMOVIMENTO_MENOR", Err, objTransferencia.dtData, dtDataInicialDestino, objTransferencia.iCodContaDestino)
        
        Case 18167, 18168
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOMEIOPAGTO1", Err, objTransferencia.iTipoMeioPagto)
            
        Case 18169
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPOMEIOPAGTO_INEXISTENTE", Err, objTransferencia.iTipoMeioPagto)
        
        Case 18170
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_TIPOMEIOPAGTO", Err, objTransferencia.iTipoMeioPagto)
        
        Case 18182, 18183, 18184, 18185, 18243, 20526
        
        Case 18186
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPOMEIOPAGTO_INATIVO", Err, objTransferencia.iTipoMeioPagto)
        
        Case 18187
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
            
        Case 18205
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPOMEIOPAGTO_EXIGENUMERO", Err, objTransferencia.iTipoMeioPagto)
        
        Case 18247
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPOMEIOPAGTO_JA_UTILIZADO", Err, objTransferencia.iCodContaOrigem, objTransferencia.iTipoMeioPagto, objTransferencia.lNumero)
        
        Case 211241
            Call Rotina_Erro(vbOKOnly, "ERRO_CCIMOVDIA_NAO_INTEGRA1", gErr)
            
        Case 211242
            Call Rotina_Erro(vbOKOnly, "ERRO_CCIMOVDIA_NAO_INTEGRA2", gErr)
            
        Case ERRO_SEM_MENSAGEM
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 147964)
            
    End Select
        
    Call Transacao_Rollback
         
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)
    
    If iTestaInt = MARCADO Then Call MovCCI_Grava_LogAux(colLog)
    
    Exit Function
    
End Function

Function MovCCI_Grava_Transferencia_BD(ByVal objTransferencia As ClassTransferencia) As Long
'auxiliar a MovCCI_Grava_Transferencia

Dim lErro As Long
Dim lNumMovto1 As Long
Dim lNumMovto2 As Long
Dim lSeq1 As Long
Dim lSeq2 As Long
Dim lComando As Long
Dim objContaCorrenteInterna As New ClassContasCorrentesInternas

On Error GoTo Erro_MovCCI_Grava_Transferencia_BD

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 18242

    'Gera o proximo sequencial de movimento daconta origem
    lErro = CF("CtaCorrente_Sequencial_Automatico", objTransferencia.iCodContaOrigem, lSeq1)
    If lErro <> SUCESSO Then gError 18171
    
    'Gera um Numero de movimento para o movimento de saida transferencia
    lErro = CF("MovCCI_Automatico", lNumMovto1)
    If lErro <> SUCESSO Then gError 18175
    
    objTransferencia.lNumIntDoc = lNumMovto1
    
    'Gera o proximo sequencial de movimento da conta destino
    lErro = CF("CtaCorrente_Sequencial_Automatico", objTransferencia.iCodContaDestino, lSeq2)
    If lErro <> SUCESSO Then gError 18177
      
    'Gera um Numero de movimento para o movimento de entrada transferencia
    lErro = CF("MovCCI_Automatico", lNumMovto2)
    If lErro <> SUCESSO Then gError 18180
    
    'Lê a Conta Corrente
    lErro = CF("ContaCorrenteInt_Le", objTransferencia.iCodContaOrigem, objContaCorrenteInterna)
    If lErro <> SUCESSO And lErro <> 11807 Then gError 82276
    
    If lErro = 11807 Then gError 82277
    
    'Faz a insersao na tabela MovimentosContaCorrente do movimento na conta origem
    lErro = Comando_Executar(lComando, "INSERT INTO MovimentosContaCorrente (NumMovto, FilialEmpresa, CodConta, Sequencial, Tipo, TipoMeioPagto, Numero, DataMovimento, Valor, Historico, NumRefExterna, NumMovtoTransf) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)", lNumMovto1, objContaCorrenteInterna.iFilialEmpresa, objTransferencia.iCodContaOrigem, lSeq1, MOVCCI_SAIDA_TRANSFERENCIA, objTransferencia.iTipoMeioPagto, objTransferencia.lNumero, objTransferencia.dtData, objTransferencia.dValor, objTransferencia.sHistorico, objTransferencia.sNumRefExterna, lNumMovto2)
    If lErro <> AD_SQL_SUCESSO Then gError 18176
    
    'Lê a Conta Corrente
    lErro = CF("ContaCorrenteInt_Le", objTransferencia.iCodContaDestino, objContaCorrenteInterna)
    If lErro <> SUCESSO And lErro <> 11807 Then gError 82278
    
    If lErro = 11807 Then gError 82279
    
    'Insere na tabela MovimentosContaCorrente do movimento na conta destino
    lErro = Comando_Executar(lComando, "INSERT INTO MovimentosContaCorrente (NumMovto, FilialEmpresa, CodConta, Sequencial, Tipo, TipoMeioPagto, Numero, DataMovimento, Valor, Historico, NumRefExterna, NumMovtoTransf) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)", lNumMovto2, objContaCorrenteInterna.iFilialEmpresa, objTransferencia.iCodContaDestino, lSeq2, MOVCCI_ENTRADA_TRANSFERENCIA, objTransferencia.iTipoMeioPagto, 0, objTransferencia.dtData, objTransferencia.dValor, objTransferencia.sHistorico, objTransferencia.sNumRefExterna, lNumMovto1)
    If lErro <> AD_SQL_SUCESSO Then gError 18181

    Call Comando_Fechar(lComando)

    MovCCI_Grava_Transferencia_BD = SUCESSO
        
    Exit Function
    
Erro_MovCCI_Grava_Transferencia_BD:

    MovCCI_Grava_Transferencia_BD = gErr
    
    Select Case gErr
    
        Case 18171, 18175, 18177, 18180, 82276, 82278
        
        Case 18176
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MOVIMENTOSCONTACORRENTE", gErr, objTransferencia.iCodContaOrigem)
            
        Case 18181
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MOVIMENTOSCONTACORRENTE", gErr, objTransferencia.iCodContaDestino)
            
        Case 18242
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 82277
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTACORRENTE_INEXISTENTE", gErr, objTransferencia.iCodContaOrigem)
    
        Case 82279
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTACORRENTE_INEXISTENTE", gErr, objTransferencia.iCodContaDestino)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 147965)
        
    End Select
    
    Call Comando_Fechar(lComando)
     
    Exit Function
    
End Function

Function TiposDeAplicacao_Grava(ByVal objTiposDeAplicacao As ClassTiposDeAplicacao) As Long
'Grava o Tipo de aplicação na tabela TiposDeAplicacao

Dim lComando As Long
Dim lComando1 As Long
Dim lComando2 As Long
Dim lComando3 As Long
Dim lTransacao As Long
Dim lErro As Long
Dim sDescricao As String

On Error GoTo Erro_TiposDeAplicacao_Grava

    lComando = 0
    lComando1 = 0
    lComando2 = 0
    lComando3 = 0
    lTransacao = 0

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 15157

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 15158
    
    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 15166

    lComando3 = Comando_Abrir()
    If lComando3 = 0 Then Error 15167

    'Inicia a Transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 15159
        
    sDescricao = String(STRING_DESCRICAO_CAMPO, 0)
    
    'Trata a parte referente à Contabilidade do Tipo de aplicação
    lErro = CF("TiposDeAplicacao_Grava_Contabil", lComando, lComando1, objTiposDeAplicacao)
    If lErro <> SUCESSO Then Error 15160
        
    'Seleciona o Tipo de aplicação em questão
    lErro = Comando_ExecutarPos(lComando2, "SELECT Descricao FROM TiposDeAplicacao WHERE Codigo=?", 0, sDescricao, objTiposDeAplicacao.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 15161

    'Lê o Tipo de aplicação
    lErro = Comando_BuscarPrimeiro(lComando2)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 15162

    'Se encontrou o Código, então isto é uma alteração
    If lErro = AD_SQL_SUCESSO Then
    
        'Atualiza os dados do Tipo de aplicação na tabela
        lErro = Comando_ExecutarPos(lComando3, "UPDATE TiposDeAplicacao SET Descricao=?, ContaContabilAplicacao=?, ContaReceitaFinanceira=?, Historico=?, Inativo=?", lComando2, objTiposDeAplicacao.sDescricao, objTiposDeAplicacao.sContaAplicacao, objTiposDeAplicacao.sContaReceita, objTiposDeAplicacao.sHistorico, objTiposDeAplicacao.iInativo)
        If lErro <> AD_SQL_SUCESSO Then Error 15163
        
    'Se não encontrou o Código, então isto é uma inserção
    Else
        
        'Insere os dados do novo Tipo de aplicação na tabela
        lErro = Comando_Executar(lComando3, "INSERT INTO TiposDeAplicacao (Codigo, Descricao, ContaContabilAplicacao, ContaReceitaFinanceira, Historico, Inativo) VALUES (?, ?, ?, ?, ?, ?)", objTiposDeAplicacao.iCodigo, objTiposDeAplicacao.sDescricao, objTiposDeAplicacao.sContaAplicacao, objTiposDeAplicacao.sContaReceita, objTiposDeAplicacao.sHistorico, objTiposDeAplicacao.iInativo)
        If lErro <> AD_SQL_SUCESSO Then Error 15164

    End If

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 15165

    Call Comando_Fechar(lComando3)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando)
    
    TiposDeAplicacao_Grava = SUCESSO

    Exit Function
    
Erro_TiposDeAplicacao_Grava:

    TiposDeAplicacao_Grava = Err
    
    Select Case Err
        
        Case 15157, 15158, 15166, 15167
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
            
        Case 15159
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
        
        Case 15160
        
        Case 15161, 15162
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOSDEAPLICACAO", Err, objTiposDeAplicacao.iCodigo)
        
        Case 15163
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_TIPOAPLICACAO", Err, objTiposDeAplicacao.iCodigo)
        
        Case 15164
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_TIPOAPLICACAO", Err, objTiposDeAplicacao.iCodigo)
        
        Case 15165
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 147966)
        
    End Select
    
    Call Transacao_Rollback
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)

    Exit Function
    
End Function

Function TiposDeAplicacao_Exclui(ByVal objTiposDeAplicacao As ClassTiposDeAplicacao) As Long
'Exclui Tipo de aplicação da tabela TiposDeAplicacao

Dim lErro As Long
Dim lTransacao As Long
Dim lComando As Long
Dim lComando1 As Long
Dim lComando2 As Long
Dim lCodigoAplic As Long
Dim sDescricao As String

On Error GoTo Erro_TiposDeAplicacao_Exclui

    lTransacao = 0
    lComando = 0
    lComando1 = 0
    lComando2 = 0
        
    lComando = Comando_Abrir
    If lComando = 0 Then Error 15189
    
    lComando1 = Comando_Abrir
    If lComando1 = 0 Then Error 15190
    
    lComando2 = Comando_Abrir
    If lComando2 = 0 Then Error 15191

    lTransacao = Transacao_Abrir
    If lTransacao = 0 Then Error 15188
   
    sDescricao = String(STRING_HISTORICO, 0)
    
    'Seleciona o Tipo de aplicação em questão
    lErro = Comando_ExecutarPos(lComando, "SELECT Descricao FROM TiposDeAplicacao WHERE Codigo=?", 0, sDescricao, objTiposDeAplicacao.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 15192

    'Lê o Tipo de aplicação
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 15193

    'Se não encontrou o Código
    If lErro = AD_SQL_SEM_DADOS Then Error 15194
    
    'Loca o Tipo de Aplicação
    lErro = Comando_LockExclusive(lComando)
    If lErro <> AD_SQL_SUCESSO Then Error 15195
    
    'Verifica se há alguma aplicação com o tipo em questão.
    lErro = Comando_Executar(lComando1, "SELECT Codigo FROM Aplicacoes WHERE TipoAplicacao=?", lCodigoAplic, objTiposDeAplicacao.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 15196
    
    'Lê a primeira Aplicação
    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 15197
    
    'Se encontrou alguma Aplicação que utiliza Tipo de aplicação
    If lErro = AD_SQL_SUCESSO Then Error 15198
       
    'Exclui o Tipo de aplicação da tabela
    lErro = Comando_ExecutarPos(lComando2, "DELETE FROM TiposDeAplicacao", lComando)
    If lErro <> AD_SQL_SUCESSO Then Error 15199
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 15200
    
    lErro = Comando_Fechar(lComando2)
    lErro = Comando_Fechar(lComando1)
    lErro = Comando_Fechar(lComando)
        
    TiposDeAplicacao_Exclui = SUCESSO
    
    Exit Function
    
Erro_TiposDeAplicacao_Exclui:

    TiposDeAplicacao_Exclui = Err
    
    Select Case Err
    
        Case 15188
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
        
        Case 15189, 15190, 15191
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 15192, 15193
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOSDEAPLICACAO", Err, objTiposDeAplicacao.iCodigo)
        
        Case 15194
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPOAPLICACAO_INEXISTENTE", Err, objTiposDeAplicacao.iCodigo)
        
        Case 15195
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_TIPOAPLICACAO", Err, objTiposDeAplicacao.iCodigo)
        
        Case 15196, 15197
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_APLICACOES", Err, objTiposDeAplicacao.iCodigo)
            
        Case 15198
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_TIPOAPLICACAO_RELACIONADA", Err, objTiposDeAplicacao.sDescricao)
            
        Case 15199
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_TIPOAPLICACAO", Err, objTiposDeAplicacao.iCodigo)
            
        Case 15200
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 147967)
    
    End Select
    
    Call Transacao_Rollback
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    
    Exit Function
    
End Function

Function TiposDeAplicacao_Grava_Contabil(ByVal lComando As Long, ByVal lComando1 As Long, ByVal objTiposDeAplicacao As ClassTiposDeAplicacao) As Long
'auxiliar a TiposDeAplicacao_Grava. Trata os dados referentes à Contabilidade do Tipo de aplicação

Dim lErro As Long
Dim iTipoContaAplicacao As Integer
Dim iTipoContaReceita As Integer

On Error GoTo Erro_TiposDeAplicacao_Grava_Contabil

    'Se o módulo de Contabilidade estiver ativo
    If gcolModulo.Ativo(MODULO_CONTABILIDADE) = MODULO_ATIVO Then
   
        'Se a Conta Aplicação está preenchida
        If Len(Trim(objTiposDeAplicacao.sContaAplicacao)) <> 0 Then
        
            'Seleciona na tabela PlanoConta a Conta que possui o Código fornecido
            lErro = Comando_ExecutarPos(lComando, "SELECT TipoConta FROM PlanoConta WHERE Conta = ?", 0, iTipoContaAplicacao, objTiposDeAplicacao.sContaAplicacao)
            If lErro <> AD_SQL_SUCESSO Then Error 15171
            
            'Lê a Conta
            lErro = Comando_BuscarPrimeiro(lComando)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 15172
            
            'Se não encontrou a Conta Aplicação
            If lErro = AD_SQL_SEM_DADOS Then Error 15173
                    
            'Loca a Conta Aplicação lida
            lErro = Comando_LockShared(lComando)
            If lErro <> AD_SQL_SUCESSO Then Error 15175
            
            'Confere se a Conta Aplicação é Analítica
            If iTipoContaAplicacao <> CONTA_ANALITICA Then Error 15176
        
        End If
        
        'Se a Conta Receita está preenchida
        If Len(Trim(objTiposDeAplicacao.sContaReceita)) <> 0 Then
        
            'Seleciona na tabela PlanoConta as Contas que possuem o Código passado pelo Obj
            lErro = Comando_ExecutarPos(lComando1, "SELECT TipoConta FROM PlanoConta WHERE Conta = ?", 0, iTipoContaReceita, objTiposDeAplicacao.sContaReceita)
            If lErro <> AD_SQL_SUCESSO Then Error 15179
            
            'Lê a primeira Conta da seleção feita
            lErro = Comando_BuscarPrimeiro(lComando1)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 15180
            
            'Se não encontrou a Conta Receita
            If lErro = AD_SQL_SEM_DADOS Then Error 15181
                    
            'Loca a Conta Receita
            lErro = Comando_LockShared(lComando1)
            If lErro <> AD_SQL_SUCESSO Then Error 15182
            
            'Confere se a Conta Receita é Analítica
            If iTipoContaReceita <> CONTA_ANALITICA Then Error 15183
        
        End If
        
        'Confere se as Contas Aplicação e Receita não são iguais
        If Len(Trim(objTiposDeAplicacao.sContaAplicacao)) <> 0 And objTiposDeAplicacao.sContaAplicacao = objTiposDeAplicacao.sContaReceita Then Error 15184
                         
    End If
    
    TiposDeAplicacao_Grava_Contabil = SUCESSO
    
    Exit Function
    
Erro_TiposDeAplicacao_Grava_Contabil:

    TiposDeAplicacao_Grava_Contabil = Err
    
    Select Case Err
    
        Case 15171, 15172
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PLANOCONTA3", Err, objTiposDeAplicacao.sContaAplicacao)
        
        Case 15173
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTA_NAO_CADASTRADA", Err, objTiposDeAplicacao.sContaAplicacao)
                           
        Case 15175
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_PLANOCONTA", Err, objTiposDeAplicacao.sContaAplicacao)
            
        Case 15176
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTA_NAO_ANALITICA1", Err, objTiposDeAplicacao.sContaAplicacao)
        
        Case 15179, 15180
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PLANOCONTA3", Err, objTiposDeAplicacao.sContaReceita)
            
        Case 15181
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTA_NAO_CADASTRADA", Err, objTiposDeAplicacao.sContaReceita)
            
        Case 15182
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_PLANOCONTA", Err, objTiposDeAplicacao.sContaReceita)
            
        Case 15183
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTA_NAO_ANALITICA1", Err, objTiposDeAplicacao.sContaReceita)
                        
        Case 15184
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTASIGUAIS", Err, objTiposDeAplicacao.sContaAplicacao)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 147968)
            
    End Select
    
    Exit Function

End Function

Function MovCCI_Grava_Deposito(ByVal objMovContaCorrente As ClassMovContaCorrente, ByVal objContabil As ClassContabil) As Long
'Grava o deposito em conta corrente da empresa passado como parametro

Dim lTransacao As Long
Dim lComando As Long
Dim lComando1 As Long
Dim lComando2 As Long

Dim dtDataSaldoInicial As Date
Dim iInativo As Integer
Dim iExigeNumero As Integer
Dim iTipo As Integer
Dim lErro As Long
Dim iTipoNatMovCta As Integer

On Error GoTo Erro_MovCCi_Grava_Deposito

    lTransacao = 0
    lComando = 0
    lComando1 = 0
    
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 18083

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 18084

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 18230
    
    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 18230
    
    'seleciona a conta passada como parametro
    lErro = Comando_ExecutarPos(lComando, "SELECT DataSaldoInicial FROM ContasCorrentesInternas WHERE Codigo = ?", 0, dtDataSaldoInicial, objMovContaCorrente.iCodConta)
    If lErro <> AD_SQL_SUCESSO Then gError 18085

    'le a conta
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 18089
    
    'se não estiver cadastrada ==> erro
    If lErro = AD_SQL_SEM_DADOS Then gError 18086

    'lock da conta
    lErro = Comando_LockShared(lComando)
    If lErro <> AD_SQL_SUCESSO Then gError 18087

    'Verifica se a data do Deposito é maior que a data do saldo inicial associada a conta
    If objMovContaCorrente.dtDataMovimento < dtDataSaldoInicial Then gError 18088

    'Le o tipo de pagamento
    lErro = Comando_ExecutarPos(lComando1, "SELECT Inativo FROM TipoMeioPagto WHERE Tipo = ? ", 0, iInativo, objMovContaCorrente.iTipoMeioPagto)
    If lErro <> AD_SQL_SUCESSO Then gError 18090

    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 18091
    
    If lErro = AD_SQL_SEM_DADOS Then gError 18092

    'verifica se está ativo
    If iInativo = TIPOMEIOPAGTO_INATIVO Then gError 18093
    
    'Loca o tipo de Pagamento
    lErro = Comando_LockShared(lComando1)
    If lErro <> AD_SQL_SUCESSO Then gError 18094
    
    'Se a natureza estiver preenchida
    If objMovContaCorrente.sNatureza <> "" Then
    
        'Le o Código correspondente à natureza contida em objMovContaCorrente
        lErro = Comando_ExecutarLockado(lComando2, "SELECT Tipo FROM NatMovCta WHERE Codigo=?", iTipoNatMovCta, objMovContaCorrente.sNatureza)
        If lErro <> SUCESSO Then gError 32289
        
        lErro = Comando_BuscarPrimeiro(lComando2)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 32292
        If lErro = AD_SQL_SEM_DADOS Then gError 32290
        
        lErro = Comando_LockShared(lComando2)
        If lErro <> AD_SQL_SUCESSO Then gError 32291
        
    End If


    lErro = CF("MovCCI_Grava_Deposito_BD", objMovContaCorrente)
    If lErro <> SUCESSO Then gError 18229
        
    '############################################
    'Inserido por Wagner 22/03/2006
    lErro = CF("ProjetoInfo_Grava", objMovContaCorrente.objProjetoInfo, PRJ_CR_TIPO_DEPOSITO, objMovContaCorrente.lNumMovto)
    If lErro <> SUCESSO Then gError 181706
    '############################################
    
    'Grava os dados contábeis (contabilidade)
    lErro = objContabil.Contabil_Gravar_Registro(objMovContaCorrente.lNumMovto, 0, 0, DATA_NULA)
    If lErro <> SUCESSO Then gError 20488
        
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 18110

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
     
    MovCCI_Grava_Deposito = SUCESSO

    Exit Function

Erro_MovCCi_Grava_Deposito:

    MovCCI_Grava_Deposito = gErr

    Select Case gErr

        Case 18083
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 18084, 18230
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 18085, 18089
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONTASCORRENTESINTERNAS1", gErr, objMovContaCorrente.iCodConta)

        Case 18086
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTACORRENTE_INEXISTENTE", gErr, objMovContaCorrente.iCodConta)

        Case 18087
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CONTASCORRENTESINTERNAS", gErr, objMovContaCorrente.iCodConta)

        Case 18088
            Call Rotina_Erro(vbOKOnly, "ERRO_DATAMOVIMENTO_MENOR", gErr, objMovContaCorrente.dtDataMovimento, dtDataSaldoInicial, objMovContaCorrente.iCodConta)

        Case 18090, 18091
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOMEIOPAGTO1", gErr, objMovContaCorrente.iTipoMeioPagto)

        Case 18092
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPOMEIOPAGTO_INEXISTENTE", gErr, objMovContaCorrente.iTipoMeioPagto)

        Case 18093
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPOMEIOPAGTO_INATIVO", gErr, objMovContaCorrente.iTipoMeioPagto)
            
        Case 18094
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_TIPOMEIOPAGTO", gErr, objMovContaCorrente.iTipoMeioPagto)

        Case 18110
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case 18229, 20488, 181706
        
        Case 32289, 32292
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NATMOVCTA", gErr, objMovContaCorrente.sNatureza)
        
        Case 32290
            Call Rotina_Erro(vbOKOnly, "ERRO_NATMOVCTA_NAO_CADASTRADO", gErr, objMovContaCorrente.sNatureza)
        
        Case 32291
             Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_NATMOVCTA", gErr, objMovContaCorrente.sNatureza)


        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 147969)

    End Select

    Call Transacao_Rollback
            
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)

    Exit Function

End Function

Function MovCCI_Grava_Deposito_BD(ByVal objMovContaCorrente As ClassMovContaCorrente) As Long
'auxiliar a MovCCI_Grava_Deposito
'Função que é responsável pela atualizacao dos depositos em conta corrente da empresa no BD
'AVISO: Essa Rotina deve ser chamada dentro de uma transacao

Dim tMovContaCorrente As typeMovContaCorrente
Dim lErro As Long
Dim lNumMovto As Long
Dim dtData As Date
Dim lComando As Long
Dim lComando1 As Long
Dim vbMsgRes As VbMsgBoxResult

On Error GoTo Erro_MovCCI_Grava_Deposito_BD

    lComando = 0
    lComando1 = 0
    
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 18231
    
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 18232

    'Pesquisa o movimento pela conta + sequencial
    lErro = Comando_ExecutarPos(lComando, "SELECT Excluido, Tipo, CodConta, TipoMeioPagto, dataMovimento, Valor, NumMovto, Conciliado FROM MovimentosContaCorrente WHERE CodConta =? AND Sequencial = ? ", 0, tMovContaCorrente.iExcluido, tMovContaCorrente.iTipo, tMovContaCorrente.iCodConta, tMovContaCorrente.iTipoMeioPagto, tMovContaCorrente.dtDataMovimento, tMovContaCorrente.dValor, tMovContaCorrente.lNumMovto, tMovContaCorrente.iConciliado, objMovContaCorrente.iCodConta, objMovContaCorrente.lSequencial)
    If lErro <> AD_SQL_SUCESSO Then Error 18095

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 18096

    'Se o deposito está cadastrado
    If lErro = AD_SQL_SUCESSO Then
    
        'Loca o movimento
        lErro = Comando_LockExclusive(lComando)
        If lErro <> AD_SQL_SUCESSO Then Error 18097

        objMovContaCorrente.lNumMovto = tMovContaCorrente.lNumMovto

        'Verifica se esta excluido e se é do tipo Deposito
        If tMovContaCorrente.iExcluido = MOVCONTACORRENTE_EXCLUIDO Then Error 18098
        
        If tMovContaCorrente.iTipo <> MOVCCI_DEPOSITO Then Error 18099
        
        'se estiver conciliado
        If tMovContaCorrente.iConciliado <> NAO_CONCILIADO Then
        
            'verifica se a data e valor da tela coincide com os cadastrado
            If tMovContaCorrente.dtDataMovimento <> objMovContaCorrente.dtDataMovimento Or tMovContaCorrente.dValor <> objMovContaCorrente.dValor Then
            
                'Avisar que tais dados nao serao alterados e pergunta se quer continuar
                vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_DATA_VALOR_NAO_ALTERAVEIS")

                If vbMsgRes = vbNo Then Error 18100

                If vbMsgRes = vbYes Then
                    objMovContaCorrente.dtDataMovimento = tMovContaCorrente.dtDataMovimento
                    objMovContaCorrente.dValor = tMovContaCorrente.dValor
                End If
            End If
        End If

        'Atualiza a tabela
        lErro = Comando_ExecutarPos(lComando1, "UPDATE MovimentosContaCorrente SET TipoMeioPagto = ?, Historico=?, NumRefExterna=?, Valor = ?, DataMovimento = ?, Natureza = ?, Ccl = ? ", lComando, _
            objMovContaCorrente.iTipoMeioPagto, objMovContaCorrente.sHistorico, objMovContaCorrente.sNumRefExterna, objMovContaCorrente.dValor, objMovContaCorrente.dtDataMovimento, objMovContaCorrente.sNatureza, objMovContaCorrente.sCcl)
        If lErro <> AD_SQL_SUCESSO Then Error 18101

        dtData = tMovContaCorrente.dtDataMovimento

        'Exclui o movimento com os dados antigos da tabela CCIMOVDIA
        lErro = CF("CCIMovDia_Exclui", objMovContaCorrente.iCodConta, dtData, tMovContaCorrente.dValor)
        If lErro <> SUCESSO Then Error 18102
        
        'Exclui o movimento com os dados antigos da tabela CCIMOVD
        lErro = CF("CCIMov_Exclui", objMovContaCorrente.iCodConta, Year(dtData), Month(dtData), tMovContaCorrente.dValor)
        If lErro <> SUCESSO Then Error 18103

        dtData = objMovContaCorrente.dtDataMovimento

        'Insere o movimento nas tabelas CCIMOV e CCIMOVDIa com os dados ja atualizados
        lErro = CF("CCIMovDia_Grava", objMovContaCorrente.iCodConta, dtData, objMovContaCorrente.dValor)
        If lErro <> SUCESSO Then Error 18104

        lErro = CF("CCIMov_Grava", objMovContaCorrente.iCodConta, Year(dtData), Month(dtData), objMovContaCorrente.dValor)
        If lErro <> SUCESSO Then Error 18105

    'Se nao estiver cadastrado
    ElseIf lErro = AD_SQL_SEM_DADOS Then

        'Pega o numero do proximo movCci
        lErro = CF("MovCCI_Automatico", lNumMovto)
        If lErro <> SUCESSO Then Error 18106
        
        objMovContaCorrente.lNumMovto = lNumMovto
        
        'Insere o Deposito na Tabela MovimentosContaCorrente
        lErro = Comando_Executar(lComando1, "INSERT INTO MovimentosContaCorrente (NumMovto, CodConta, Sequencial, Tipo, Excluido, TipoMeioPagto, DataMovimento, Valor, Historico, NumRefExterna, FilialEmpresa, Portador, Conciliado, Favorecido, NumRefInterna, Natureza, Ccl) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", lNumMovto, _
            objMovContaCorrente.iCodConta, objMovContaCorrente.lSequencial, MOVCCI_DEPOSITO, MOVCONTACORRENTE_NAO_EXCLUIDO, objMovContaCorrente.iTipoMeioPagto, objMovContaCorrente.dtDataMovimento, objMovContaCorrente.dValor, objMovContaCorrente.sHistorico, objMovContaCorrente.sNumRefExterna, objMovContaCorrente.iFilialEmpresa, objMovContaCorrente.iPortador, objMovContaCorrente.iConciliado, objMovContaCorrente.iFavorecido, objMovContaCorrente.lNumRefInterna, objMovContaCorrente.sNatureza, objMovContaCorrente.sCcl)
        If lErro <> AD_SQL_SUCESSO Then Error 18107

        dtData = objMovContaCorrente.dtDataMovimento

        'Atualiza os dados em CCIMovDia
        lErro = CF("CCIMovDia_Grava", objMovContaCorrente.iCodConta, dtData, objMovContaCorrente.dValor)
        If lErro <> SUCESSO Then Error 18108

        'Atualiza os dados em CCIMov
        lErro = CF("CCIMov_Grava", objMovContaCorrente.iCodConta, Year(dtData), Month(dtData), objMovContaCorrente.dValor)
        If lErro <> SUCESSO Then Error 18109
    End If
    
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    
    MovCCI_Grava_Deposito_BD = SUCESSO
    
    Exit Function

Erro_MovCCI_Grava_Deposito_BD:

    MovCCI_Grava_Deposito_BD = Err
    
    Select Case Err

        Case 18095, 18096
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCONTACORRENTE1", Err, objMovContaCorrente.iCodConta, objMovContaCorrente.lSequencial)

        Case 18097
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_MOVIMENTOSCONTACORRENTE", Err, objMovContaCorrente.iCodConta, objMovContaCorrente.lSequencial)

        Case 18098
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVCONTACORRENTE_EXCLUIDO", Err, objMovContaCorrente.iCodConta, objMovContaCorrente.lSequencial)

        Case 18099
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPO_MOVIMENTO_NAO_DEPOSITO", Err, objMovContaCorrente.lSequencial, objMovContaCorrente.iCodConta)

        Case 18100, 18102, 18103, 18104, 18105, 18106, 18108, 18109

        Case 18101
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_MOVIMENTOSCONTACORRENTE", Err)

        Case 18107
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MOVIMENTOSCONTACORRENTE", Err, objMovContaCorrente.iCodConta)

        Case 18231, 18232
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
       
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 147970)
            
    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Function CtaCorrente_Sequencial_Transacao(ByVal iConta As Integer, lSeq As Long) As Long
'Abre a transacao para que seja gerado o sequencial automatico

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_CtaCorrente_Sequencial_Transacao

    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 11982

    'Chama a rotina que gera o sequencial
    lErro = CF("CtaCorrente_Sequencial_Automatico", iConta, lSeq)
    If lErro <> SUCESSO Then Error 18237

    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 11991

    CtaCorrente_Sequencial_Transacao = SUCESSO

    Exit Function

Erro_CtaCorrente_Sequencial_Transacao:

    CtaCorrente_Sequencial_Transacao = Err

    Select Case Err

        Case 11982
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 11991
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case 18237

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 147971)

    End Select

    Call Transacao_Rollback

    Exit Function

End Function

Function ConciliacaoBancaria_Grava(ByVal colExtrato As Collection, ByVal colExtMarcado As Collection, ByVal colMovCCI As Collection, ByVal colMovMarcado As Collection, ByVal iIndiceExt As Integer, ByVal iIndiceMov As Integer) As Long
Attribute ConciliacaoBancaria_Grava.VB_Description = "Grava a conciliacao de movimentos com lançamentos de extrato\r\n"
'grava a conciliacao de movimentos com lançamentos de extrato

Dim vIndice As Variant
Dim vIndice1 As Variant
Dim objExtrBcoDet As ClassExtrBcoDet
Dim objMovCCI As ClassMovContaCorrente
Dim lErro As Long
Dim lTransacao As Long
Dim alComando(1 To 5) As Long
Dim iIndice As Integer
Dim iConciliado As Integer

On Error GoTo Erro_ConciliacaoBancaria_Grava

    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 10813

    For iIndice = LBound(alComando) To UBound(alComando)
    
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 10814
    
    Next

    'processa a marcacao dos extratos como conciliados
    For Each vIndice In colExtMarcado
    
        Set objExtrBcoDet = colExtrato.Item(vIndice)
        
        'Pesquisa o extrato no BD
        lErro = Comando_ExecutarPos(alComando(1), "SELECT Conciliado FROM LctosExtratoBancario WHERE CodConta =? AND NumExtrato = ? AND SeqLcto = ? ", 0, iConciliado, objExtrBcoDet.iCodConta, objExtrBcoDet.iNumExtrato, objExtrBcoDet.lSeqLcto)
        If lErro <> AD_SQL_SUCESSO Then Error 10815

        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO Then Error 10816

        If iConciliado <> NAO_CONCILIADO Then Error 10818

        lErro = Comando_LockExclusive(alComando(1))
        If lErro <> AD_SQL_SUCESSO Then Error 10839
        
        'coloca o extrato como conciliado
        lErro = Comando_ExecutarPos(alComando(2), "UPDATE LctosExtratoBancario SET Conciliado = ?", alComando(1), CONCILIADO_MANUAL)
        If lErro <> AD_SQL_SUCESSO Then Error 10817

    Next
    
    'processa a marcacao dos movimentos como conciliados
    For Each vIndice In colMovMarcado
    
        Set objMovCCI = colMovCCI.Item(vIndice)
        
        'Pesquisa o movimento no BD
        lErro = Comando_ExecutarPos(alComando(3), "SELECT Conciliado FROM MovimentosContaCorrente WHERE CodConta =? AND Sequencial = ? ", 0, iConciliado, objMovCCI.iCodConta, objMovCCI.lSequencial)
        If lErro <> AD_SQL_SUCESSO Then Error 10819

        lErro = Comando_BuscarPrimeiro(alComando(3))
        If lErro <> AD_SQL_SUCESSO Then Error 10820
        
        If iConciliado <> NAO_CONCILIADO Then Error 10821

        lErro = Comando_LockExclusive(alComando(3))
        If lErro <> AD_SQL_SUCESSO Then Error 10840

        'coloca o movimento como conciliado
        lErro = Comando_ExecutarPos(alComando(4), "UPDATE MovimentosContaCorrente SET Conciliado = ?", alComando(3), CONCILIADO_MANUAL)
        If lErro <> AD_SQL_SUCESSO Then Error 10822

    Next
    
    'processa a insercao das associacoes de movimento com lancamento de extrato
    For Each vIndice In colExtMarcado
    
        Set objExtrBcoDet = colExtrato.Item(vIndice)
    
        For Each vIndice1 In colMovMarcado
    
            Set objMovCCI = colMovCCI.Item(vIndice1)
                
            'insere a associação da conta com o extrato no BD
            lErro = Comando_Executar(alComando(5), "INSERT INTO ConciliacaoBancaria (CodConta, SequencialMovto, NumExtrato, SeqExtrBco, Tipo) VALUES (?,?,?,?,?)", objMovCCI.iCodConta, objMovCCI.lSequencial, objExtrBcoDet.iNumExtrato, objExtrBcoDet.lSeqLcto, CONCILIADO_MANUAL)
            If lErro <> AD_SQL_SUCESSO Then Error 10823
            
        Next
        
    Next
            
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 10824
            
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
            
    ConciliacaoBancaria_Grava = SUCESSO

    Exit Function

Erro_ConciliacaoBancaria_Grava:

    ConciliacaoBancaria_Grava = Err

    Select Case Err
        
        Case 10813
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 10814
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 10815, 10816
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_LCTOSEXTRATOBANCARIO1", Err, objExtrBcoDet.iCodConta, objExtrBcoDet.iNumExtrato, objExtrBcoDet.lSeqLcto)
        
        Case 10817
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_LCTOSEXTRATOBANCARIO", Err, objExtrBcoDet.iCodConta, objExtrBcoDet.iNumExtrato, objExtrBcoDet.lSeqLcto)
        
        Case 10818
            iIndiceExt = vIndice

        Case 10819, 10820
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCONTACORRENTE1", Err, objMovCCI.iCodConta, objMovCCI.lSequencial)

        Case 10821
            iIndiceMov = vIndice
            
        Case 10822
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_MOVIMENTOSCONTACORRENTE1", Err, objMovCCI.iCodConta, objMovCCI.lSequencial)

        Case 10823
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CONCILIACAOBANCARIA", Err, objMovCCI.iCodConta, objMovCCI.lSequencial, objExtrBcoDet.iNumExtrato, objExtrBcoDet.lSeqLcto)

        Case 10824
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case 10839
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_LCTOSEXTRATOBANCARIO", Err, objExtrBcoDet.iCodConta, objExtrBcoDet.iNumExtrato, objExtrBcoDet.lSeqLcto)

        Case 10840
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_MOVIMENTOSCONTACORRENTE1", Err, objMovCCI.iCodConta, objMovCCI.lSequencial)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 147972)

    End Select

    Call Transacao_Rollback
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function
    
End Function

Function ConciliacaoBancaria_Exclui(ByVal colExtrato As Collection, ByVal colExtMarcado As Collection, ByVal colMovCCI As Collection, ByVal colMovMarcado As Collection) As Long
Attribute ConciliacaoBancaria_Exclui.VB_Description = " Desconcilia os movimentos e lançamentos de extrato selecionados"
'desconcilia os movimentos e lançamentos de extrato selecionados

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_ConciliacaoBancaria_Exclui

    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 10831

    'processa a desconciliação dos extratos marcados
    lErro = ConciliacaoBancaria_Extrato_Exclui(colExtrato, colExtMarcado, colMovCCI)
    If lErro <> SUCESSO Then Error 10845

    'processa a desconciliação dos movimentos marcados
    lErro = ConciliacaoBancaria_Mov_Exclui(colMovCCI, colMovMarcado, colExtrato)
    If lErro <> SUCESSO Then Error 10846

    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 10824
            
    ConciliacaoBancaria_Exclui = SUCESSO

    Exit Function

Erro_ConciliacaoBancaria_Exclui:

    ConciliacaoBancaria_Exclui = Err

    Select Case Err

        Case 10831
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 10824
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case 10845, 10846
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 147973)

    End Select

    Call Transacao_Rollback

    Exit Function
    
End Function

Function ConciliacaoBancaria_Extrato_Exclui(ByVal colExtrato As Collection, ByVal colExtMarcado As Collection, ByVal colMovCCI As Collection) As Long
Attribute ConciliacaoBancaria_Extrato_Exclui.VB_Description = "Processa a desconciliacao dos extratos selecionados"
'processa a desconciliacao dos extratos selecionados
'AVISO: Essa Rotina deve ser chamada dentro de uma transacao

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(1 To 6) As Long
Dim iConciliado As Integer
Dim vIndice As Variant
Dim lSequencial As Long
Dim objExtrBcoDet As ClassExtrBcoDet
Dim objMovCCI As ClassMovContaCorrente
Dim colMovMarcado As New Collection

On Error GoTo Erro_ConciliacaoBancaria_Extrato_Exclui

    For iIndice = LBound(alComando) To UBound(alComando)
    
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 10832
    
    Next

    'processa a desconciliacao dos extratos
    For Each vIndice In colExtMarcado
    
        Set objExtrBcoDet = colExtrato.Item(vIndice)
        
        'Pesquisa o extrato no BD
        lErro = Comando_ExecutarPos(alComando(1), "SELECT Conciliado FROM LctosExtratoBancario WHERE CodConta =? AND NumExtrato = ? AND SeqLcto = ? ", 0, iConciliado, objExtrBcoDet.iCodConta, objExtrBcoDet.iNumExtrato, objExtrBcoDet.lSeqLcto)
        If lErro <> AD_SQL_SUCESSO Then Error 10833

        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO Then Error 10834

        If iConciliado <> NAO_CONCILIADO Then

            lErro = Comando_LockExclusive(alComando(1))
            If lErro <> AD_SQL_SUCESSO Then Error 10841

            'coloca o extrato como desconciliado
            lErro = Comando_ExecutarPos(alComando(2), "UPDATE LctosExtratoBancario SET Conciliado = ?", alComando(1), NAO_CONCILIADO)
            If lErro <> AD_SQL_SUCESSO Then Error 10835
            
       End If
            
        'Pesquisa se tem associação envolvendo o extrato
        lErro = Comando_ExecutarPos(alComando(3), "SELECT SequencialMovto FROM ConciliacaoBancaria WHERE CodConta =? AND NumExtrato = ? AND SeqExtrBco = ? ", 0, lSequencial, objExtrBcoDet.iCodConta, objExtrBcoDet.iNumExtrato, objExtrBcoDet.lSeqLcto)
        If lErro <> AD_SQL_SUCESSO Then Error 10836

        lErro = Comando_BuscarPrimeiro(alComando(3))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 10837
        
        Do While lErro = AD_SQL_SUCESSO
        
            lErro = Comando_LockExclusive(alComando(3))
            If lErro <> AD_SQL_SUCESSO Then Error 10842
            
            'Exclui a associação envolvendo o extrato
            lErro = Comando_ExecutarPos(alComando(4), "DELETE FROM ConciliacaoBancaria", alComando(3))
            If lErro <> AD_SQL_SUCESSO Then Error 10838
        
            'Pesquisa o movimento no BD
            lErro = Comando_ExecutarPos(alComando(5), "SELECT Conciliado FROM MovimentosContaCorrente WHERE CodConta =? AND Sequencial = ? ", 0, iConciliado, objExtrBcoDet.iCodConta, lSequencial)
            If lErro <> AD_SQL_SUCESSO Then Error 10839

            lErro = Comando_BuscarPrimeiro(alComando(5))
            If lErro <> AD_SQL_SUCESSO Then Error 10848
    
            If iConciliado <> NAO_CONCILIADO Then

                lErro = Comando_LockExclusive(alComando(5))
                If lErro <> AD_SQL_SUCESSO Then Error 10843

                'coloca o movimento como desconciliado
                lErro = Comando_ExecutarPos(alComando(6), "UPDATE MovimentosContaCorrente SET Conciliado = ?", alComando(5), NAO_CONCILIADO)
                If lErro <> AD_SQL_SUCESSO Then Error 10844
                
                'coloca o movimento na coleção de movimentos marcados para verificar se está associado com algum extrato e se for necessário excluir os extratos associados
                For iIndice = 1 To colMovCCI.Count
                
                    Set objMovCCI = colMovCCI.Item(iIndice)
                
                    If objMovCCI.iCodConta = objExtrBcoDet.iCodConta And objMovCCI.lSequencial = lSequencial Then
                    
                        colMovMarcado.Add iIndice
                        Exit For
                        
                    End If
                    
                Next
        
            End If
            
            lErro = Comando_BuscarProximo(alComando(3))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 10847
            
        Loop
            
    Next
    
    If colMovMarcado.Count > 0 Then
    
        'processa a desconciliação dos movimentos marcados
        lErro = ConciliacaoBancaria_Mov_Exclui(colMovCCI, colMovMarcado, colExtrato)
        If lErro <> SUCESSO Then Error 10912
    
    End If

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    ConciliacaoBancaria_Extrato_Exclui = SUCESSO

    Exit Function

Erro_ConciliacaoBancaria_Extrato_Exclui:

    ConciliacaoBancaria_Extrato_Exclui = Err

    Select Case Err

        Case 10832
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 10833, 10834
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_LCTOSEXTRATOBANCARIO1", Err, objExtrBcoDet.iCodConta, objExtrBcoDet.iNumExtrato, objExtrBcoDet.lSeqLcto)
        
        Case 10835
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_LCTOSEXTRATOBANCARIO", Err, objExtrBcoDet.iCodConta, objExtrBcoDet.iNumExtrato, objExtrBcoDet.lSeqLcto)
        
        Case 10836, 10837, 10847
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONCILIACAOBANCARIA1", Err, objExtrBcoDet.iCodConta, objExtrBcoDet.iNumExtrato, objExtrBcoDet.lSeqLcto)

        Case 10838
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CONCILIACAOBANCARIA", Err, objExtrBcoDet.iCodConta, lSequencial, objExtrBcoDet.iNumExtrato, objExtrBcoDet.lSeqLcto)

        Case 10839, 10848
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCONTACORRENTE1", Err, objExtrBcoDet.iCodConta, lSequencial)

        Case 10841
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_LCTOSEXTRATOBANCARIO", Err, objExtrBcoDet.iCodConta, objExtrBcoDet.iNumExtrato, objExtrBcoDet.lSeqLcto)
        
        Case 10842
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CONCILIACAOBANCARIA", Err, objExtrBcoDet.iCodConta, lSequencial, objExtrBcoDet.iNumExtrato, objExtrBcoDet.lSeqLcto)
        
        Case 10843
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_MOVIMENTOSCONTACORRENTE1", Err, objExtrBcoDet.iCodConta, lSequencial)

        Case 10844
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_MOVIMENTOSCONTACORRENTE1", Err, objExtrBcoDet.iCodConta, lSequencial)

        Case 10912

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 147974)

    End Select
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function
    
End Function

Function ConciliacaoBancaria_Mov_Exclui(ByVal colMovCCI As Collection, ByVal colMovMarcado As Collection, ByVal colExtrato As Collection) As Long
Attribute ConciliacaoBancaria_Mov_Exclui.VB_Description = "Processa a desconciliacao dos movimentos selecionados\r\n"
'processa a desconciliacao dos movimentos selecionados
'AVISO: Essa Rotina deve ser chamada dentro de uma transacao

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(1 To 6) As Long
Dim iConciliado As Integer
Dim vIndice As Variant
Dim iNumExtrato As Integer
Dim lSeqExtrBco As Long
Dim objMovCCI As ClassMovContaCorrente
Dim colExtMarcado As New Collection
Dim objExtrBcoDet As ClassExtrBcoDet

On Error GoTo Erro_ConciliacaoBancaria_Mov_Exclui

    For iIndice = LBound(alComando) To UBound(alComando)
    
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 10849
    
    Next

    'processa a desconciliacao dos extratos
    For Each vIndice In colMovMarcado
    
        Set objMovCCI = colMovCCI.Item(vIndice)
        
        'Pesquisa o movimento no BD
        lErro = Comando_ExecutarPos(alComando(1), "SELECT Conciliado FROM MovimentosContaCorrente WHERE CodConta =? AND Sequencial = ? ", 0, iConciliado, objMovCCI.iCodConta, objMovCCI.lSequencial)
        If lErro <> AD_SQL_SUCESSO Then Error 10850

        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO Then Error 10851

        If iConciliado <> NAO_CONCILIADO Then

            lErro = Comando_LockExclusive(alComando(1))
            If lErro <> AD_SQL_SUCESSO Then Error 10852

            'coloca o movimento como desconciliado
            lErro = Comando_ExecutarPos(alComando(2), "UPDATE MovimentosContaCorrente SET Conciliado = ?", alComando(1), NAO_CONCILIADO)
            If lErro <> AD_SQL_SUCESSO Then Error 10853
            
        End If
        
        'Pesquisa se tem associação envolvendo o movimento
        lErro = Comando_ExecutarPos(alComando(3), "SELECT NumExtrato, SeqExtrBco FROM ConciliacaoBancaria WHERE CodConta =? AND SequencialMovto = ?", 0, iNumExtrato, lSeqExtrBco, objMovCCI.iCodConta, objMovCCI.lSequencial)
        If lErro <> AD_SQL_SUCESSO Then Error 10854

        lErro = Comando_BuscarPrimeiro(alComando(3))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 10855
        
        Do While lErro = AD_SQL_SUCESSO
        
            lErro = Comando_LockExclusive(alComando(3))
            If lErro <> AD_SQL_SUCESSO Then Error 10856
            
            'Exclui a associação envolvendo o movimento
            lErro = Comando_ExecutarPos(alComando(4), "DELETE FROM ConciliacaoBancaria", alComando(3))
            If lErro <> AD_SQL_SUCESSO Then Error 10857
        
            'Pesquisa o extrato no BD
            lErro = Comando_ExecutarPos(alComando(5), "SELECT Conciliado FROM LctosExtratoBancario WHERE CodConta =? AND NumExtrato = ? AND SeqLcto = ?", 0, iConciliado, objMovCCI.iCodConta, iNumExtrato, lSeqExtrBco)
            If lErro <> AD_SQL_SUCESSO Then Error 10858

            lErro = Comando_BuscarPrimeiro(alComando(5))
            If lErro <> AD_SQL_SUCESSO Then Error 10859
    
            If iConciliado <> NAO_CONCILIADO Then

                lErro = Comando_LockExclusive(alComando(5))
                If lErro <> AD_SQL_SUCESSO Then Error 10860

                'coloca o extrato como desconciliado
                lErro = Comando_ExecutarPos(alComando(6), "UPDATE LctosExtratoBancario SET Conciliado = ?", alComando(5), NAO_CONCILIADO)
                If lErro <> AD_SQL_SUCESSO Then Error 10861
                
                For iIndice = 1 To colExtrato.Count
                
                    Set objExtrBcoDet = colExtrato.Item(iIndice)
                
                    If objExtrBcoDet.iCodConta = objMovCCI.iCodConta And objExtrBcoDet.iNumExtrato = iNumExtrato And objExtrBcoDet.lSeqLcto = lSeqExtrBco Then
                    
                        colExtMarcado.Add iIndice
                        Exit For
                        
                    End If
                    
                Next
                
            End If
            
            lErro = Comando_BuscarProximo(alComando(3))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 10862
            
        Loop
                
    Next

    If colExtMarcado.Count > 0 Then
    
        'processa a desconciliação dos extratos marcados
        lErro = ConciliacaoBancaria_Extrato_Exclui(colExtrato, colExtMarcado, colMovCCI)
        If lErro <> SUCESSO Then Error 10913
        
    End If

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    ConciliacaoBancaria_Mov_Exclui = SUCESSO

    Exit Function

Erro_ConciliacaoBancaria_Mov_Exclui:

    ConciliacaoBancaria_Mov_Exclui = Err

    Select Case Err

        Case 10849
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 10850, 10851
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCONTACORRENTE1", Err, objMovCCI.iCodConta, objMovCCI.lSequencial)

        Case 10852
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_MOVIMENTOSCONTACORRENTE1", Err, objMovCCI.iCodConta, objMovCCI.lSequencial)

        Case 10853
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_MOVIMENTOSCONTACORRENTE1", Err, objMovCCI.iCodConta, objMovCCI.lSequencial)

        Case 10854, 10855, 10862
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONCILIACAOBANCARIA2", Err, objMovCCI.iCodConta, objMovCCI.lSequencial)

        Case 10856
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CONCILIACAOBANCARIA", Err, objMovCCI.iCodConta, objMovCCI.lSequencial, iNumExtrato, lSeqExtrBco)

        Case 10857
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CONCILIACAOBANCARIA", Err, objMovCCI.iCodConta, objMovCCI.lSequencial, iNumExtrato, lSeqExtrBco)
        
        Case 10858, 10859
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_LCTOSEXTRATOBANCARIO1", Err, objMovCCI.iCodConta, iNumExtrato, lSeqExtrBco)

        Case 10860
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_LCTOSEXTRATOBANCARIO", Err, objMovCCI.iCodConta, iNumExtrato, lSeqExtrBco)

        Case 10861
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_LCTOSEXTRATOBANCARIO", Err, objMovCCI.iCodConta, iNumExtrato, lSeqExtrBco)

        Case 10913

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 147975)

    End Select
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function
    
End Function

Function MovCCI_Atualiza_Conciliado(ByVal colMovCCI As Collection, ByVal colMovMarcado As Collection, ByVal iIndiceMov As Integer) As Long
'grava a conciliacao de movimentos. Os movimentos selecionados são aqueles marcados

Dim vIndice As Variant
Dim objMovCCI As ClassMovContaCorrente
Dim lErro As Long
Dim lTransacao As Long
Dim alComando(1 To 2) As Long
Dim iIndice As Integer
Dim iConciliado As Integer

On Error GoTo Erro_MovCCI_Atualiza_Conciliado

    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 10883

    For iIndice = LBound(alComando) To UBound(alComando)
    
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 10884
    
    Next

    'processa a marcacao dos movimentos como conciliados
    For Each vIndice In colMovMarcado
    
        Set objMovCCI = colMovCCI.Item(vIndice)
        
        'Pesquisa o movimento no BD
        lErro = Comando_ExecutarPos(alComando(1), "SELECT Conciliado FROM MovimentosContaCorrente WHERE CodConta =? AND Sequencial = ? ", 0, iConciliado, objMovCCI.iCodConta, objMovCCI.lSequencial)
        If lErro <> AD_SQL_SUCESSO Then Error 10885

        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO Then Error 10886
        
        If iConciliado <> NAO_CONCILIADO Then Error 10887

        lErro = Comando_LockExclusive(alComando(1))
        If lErro <> AD_SQL_SUCESSO Then Error 10888

        'coloca o movimento como conciliado
        lErro = Comando_ExecutarPos(alComando(2), "UPDATE MovimentosContaCorrente SET Conciliado = ?", alComando(1), CONCILIADO_MANUAL)
        If lErro <> AD_SQL_SUCESSO Then Error 10889

    Next
    
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 10890
            
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
            
    MovCCI_Atualiza_Conciliado = SUCESSO

    Exit Function

Erro_MovCCI_Atualiza_Conciliado:

    MovCCI_Atualiza_Conciliado = Err

    Select Case Err
        
        Case 10883
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 10884
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 10885, 10886
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCONTACORRENTE1", Err, objMovCCI.iCodConta, objMovCCI.lSequencial)

        Case 10887
            iIndiceMov = vIndice
        
        Case 10888
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_MOVIMENTOSCONTACORRENTE1", Err, objMovCCI.iCodConta, objMovCCI.lSequencial)
            
        Case 10889
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_MOVIMENTOSCONTACORRENTE1", Err, objMovCCI.iCodConta, objMovCCI.lSequencial)

        Case 10890
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 147976)

    End Select

    Call Transacao_Rollback
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function
    
End Function

Function ChequesPag_PrepararImpressao(ByVal objChequesPag As ClassChequesPag) As Long
'preenche a tabela GeracaoDeCheques com os cheques a serem impressos identificados
'por um sequencial de "geracao" de impressao que ficará armazenado em objChequesPag.lNumImpressao

Dim objInfoChequePag As New ClassInfoChequePag
Dim lNumImpressao As Long
Dim lErro As Long

On Error GoTo Erro_ChequesPag_PrepararImpressao

    lErro = CF("Cheques_PrepararImpressao", lNumImpressao, objChequesPag.ColInfoChequePag)
    If lErro <> SUCESSO Then Error 7406
    
    objChequesPag.lNumImpressao = lNumImpressao
    
    ChequesPag_PrepararImpressao = SUCESSO

    Exit Function

Erro_ChequesPag_PrepararImpressao:

    ChequesPag_PrepararImpressao = Err

    Select Case Err
    
        Case 7406
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 147977)

    End Select

    Exit Function

End Function

Function BorderoPagto_Criar(ByVal objBorderoPagEmissao As ClassBorderoPagEmissao) As Long
'faz todas as atualizacoes no bd correspondentes a criacao de um bordero de pagto
Dim objInfoParcPag As ClassInfoParcPag
Dim objColBaixaParcPagar As New colBaixaParcPagar
Dim objBorderoPagto As New ClassBorderoPagto
Dim objMovContaCorrente As New ClassMovContaCorrente
Dim lNumIntBaixa As Long, lErro As Long
Dim lTransacao As Long, objContabAutomatica As ClassContabAutomatica

On Error GoTo Erro_BorderoPagto_Criar

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 7404
    
    lNumIntBaixa = 0 'o valor definitivo será colocado apos a criacao da baixa

    'percorrer a colecao de parcelas a pagar
    For Each objInfoParcPag In objBorderoPagEmissao.colInfoParcPag

        'pular parcelas com iseqcheque = 0
        If objInfoParcPag.iSeqCheque <> 0 Then

            'criar objeto com info p/baixa e coloca-lo numa colecao
            objColBaixaParcPagar.Add 0, lNumIntBaixa, objInfoParcPag.lNumIntParc, 0, _
                objInfoParcPag.dValorMulta, objInfoParcPag.dValorJuros, objInfoParcPag.dValorDesconto, _
                objInfoParcPag.dValor, STATUS_LANCADO

        End If

    Next

    'incluir BORDERO Pagto
    objBorderoPagto.dtDataEmissao = objBorderoPagEmissao.dtEmissao
    objBorderoPagto.dtDataEnvio = DATA_NULA
    objBorderoPagto.iCodConta = objBorderoPagEmissao.iCta
    objBorderoPagto.iExcluido = 0
    objBorderoPagto.iTipoDeCobranca = objBorderoPagEmissao.iTipoCobranca
    objBorderoPagto.iTitOutroBanco = objBorderoPagEmissao.iLiqTitOutroBco
    objBorderoPagto.lNumIntBordero = 0
    objBorderoPagto.sNomeArq = ""
    objBorderoPagto.iNumArqRemessa = 0
    objBorderoPagto.dtDataVencimento = objBorderoPagEmissao.dtVencto
    
    lErro = CF("BorderoPagto_Gravar", objBorderoPagto)
    If lErro <> SUCESSO Then Error 7378

    objBorderoPagEmissao.lNumero = objBorderoPagto.lNumero
    
    'montar objMovContaCorrente
    objMovContaCorrente.dtDataContabil = objBorderoPagEmissao.dtContabil
    objMovContaCorrente.dtDataMovimento = objBorderoPagEmissao.dtEmissao
    objMovContaCorrente.dValor = objBorderoPagEmissao.dValorParcelasSelecionadas
    objMovContaCorrente.iCodConta = objBorderoPagEmissao.iCta
    objMovContaCorrente.iConciliado = NAO_CONCILIADO
    objMovContaCorrente.iExcluido = 0
    objMovContaCorrente.iFavorecido = 0
    objMovContaCorrente.iPortador = 0
    objMovContaCorrente.iTipo = MOVCCI_PAGTO_TITULO_POR_BORDERO
    objMovContaCorrente.iTipoMeioPagto = BORDERO
    objMovContaCorrente.lNumero = objBorderoPagEmissao.lNumero
    objMovContaCorrente.lNumMovto = 0
    objMovContaCorrente.lNumRefInterna = objBorderoPagto.lNumIntBordero
    objMovContaCorrente.lSequencial = 0
    objMovContaCorrente.sHistorico = ""
    objMovContaCorrente.sNumRefExterna = ""

    objBorderoPagEmissao.lNumeroInt = objBorderoPagto.lNumIntBordero

    If (gcolModulo.Ativo(MODULO_CONTABILIDADE) = MODULO_ATIVO) Then
    
        Set objContabAutomatica = New ClassContabAutomatica
    
        lErro = objContabAutomatica.Inicializa_Contab(objBorderoPagEmissao, MODULO_CONTASAPAGAR, "BCP", objBorderoPagEmissao.dtContabil, DATA_NULA)
        If lErro <> SUCESSO Then Error 32153
        
    End If
    
    lErro = CF("BaixaPagar_Grava_Pagamento1", objBorderoPagEmissao, objColBaixaParcPagar, objMovContaCorrente, objContabAutomatica, objBorderoPagEmissao.objEvolucao)
    If lErro <> SUCESSO And lErro <> 26427 Then Error 7379

    If lErro = 26427 Then Error 26428
    
    If Not (objContabAutomatica Is Nothing) Then
    
        lErro = objContabAutomatica.Finaliza_Contab()
        If lErro <> SUCESSO Then Error 32154
        
    End If
    
    If gobjCRFAT.iValidaBordPagto = VALIDA_BORDERO_PAGTO_CRIACAO Then
    
        lErro = CF("BorderoPagto_Valida_GeracaoArq", objBorderoPagEmissao.lNumeroInt)
        If lErro <> SUCESSO Then Error 32154
        
    End If
    
    'confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 7405
    
    BorderoPagto_Criar = SUCESSO

    Exit Function

Erro_BorderoPagto_Criar:

    BorderoPagto_Criar = Err

    Select Case Err

        Case 7378, 7379, 26428, 32153, 32154

        Case 7404
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
        
        Case 7405
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 147978)

    End Select

    Call Transacao_Rollback

    Exit Function

End Function

Function BaixasParcelaPag_Grava2(lComandoParcSel As Long, lComandoParcMod As Long, lComandoParcDel As Long, lComandoParcIns As Long, lComandoBaixaParc As Long, lComandoTitSel As Long, lComandoTitMod As Long, lComandoTitDel As Long, lComandoTitIns As Long, lComandoNFsSel As Long, lComandoNFsDel As Long, lComandoNFsIns As Long, lComandoOutrasParcSel As Long, lComandoOutrasParcDel As Long, lComandoOutrasParcIns As Long) As Long
'auxiliar a BaixasParcelaPag_Grava. Abre os comandos

Dim lErro As Long
On Error GoTo Erro_BaixasParcelaPag_Grava2

    lComandoParcSel = Comando_Abrir()
    If lComandoParcSel = 0 Then Error 7327

    lComandoParcMod = Comando_Abrir()
    If lComandoParcMod = 0 Then Error 7328

    lComandoParcDel = Comando_Abrir()
    If lComandoParcDel = 0 Then Error 7329

    lComandoParcIns = Comando_Abrir()
    If lComandoParcIns = 0 Then Error 7330

    lComandoBaixaParc = Comando_Abrir()
    If lComandoBaixaParc = 0 Then Error 7331

    lComandoTitSel = Comando_Abrir()
    If lComandoTitSel = 0 Then Error 7332

    lComandoTitMod = Comando_Abrir()
    If lComandoTitSel = 0 Then Error 7412

    lComandoTitDel = Comando_Abrir()
    If lComandoTitDel = 0 Then Error 7333

    lComandoTitIns = Comando_Abrir()
    If lComandoTitIns = 0 Then Error 7334

    lComandoNFsSel = Comando_Abrir()
    If lComandoNFsSel = 0 Then Error 7335

    lComandoNFsDel = Comando_Abrir()
    If lComandoNFsDel = 0 Then Error 7336

    lComandoNFsIns = Comando_Abrir()
    If lComandoNFsIns = 0 Then Error 7337

    lComandoOutrasParcSel = Comando_Abrir()
    If lComandoOutrasParcSel = 0 Then Error 7351

    lComandoOutrasParcDel = Comando_Abrir()
    If lComandoOutrasParcDel = 0 Then Error 7352

    lComandoOutrasParcIns = Comando_Abrir()
    If lComandoOutrasParcIns = 0 Then Error 7353

    BaixasParcelaPag_Grava2 = SUCESSO

    Exit Function

Erro_BaixasParcelaPag_Grava2:

    BaixasParcelaPag_Grava2 = Err

    Select Case Err

        Case 7327 To 7337, 7351, 7352, 7353, 7412
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 147979)

    End Select

    Exit Function

End Function

Function Evolucao_BaixasParcPag(ByVal objEvolucao As Object, ByVal iNumProc As Integer) As Long
'permite que a tela que mostra a evolucao da atualizacao seja atualizada e testa se o usuario interrompeu a atualizacao

Dim lErro As Long
Dim iCancela As Integer

On Error GoTo Erro_Evolucao_BaixasParcPag

    lErro = objEvolucao.Mostra_Evolucao(iCancela, iNumProc)
    If lErro <> SUCESSO Then Error 25181
    
    If iCancela = CANCELA_BATCH Then Error 25182

    Evolucao_BaixasParcPag = SUCESSO
    
    Exit Function
    
Erro_Evolucao_BaixasParcPag:

    Evolucao_BaixasParcPag = Err
    
    Select Case Err
        Case 25181, 25182
    End Select

    Exit Function
    
End Function

Function BaixasParcelaPag_Grava(ByVal objColBaixaParcPagar As colBaixaParcPagar, Optional ByVal objContabAutomatica As ClassContabAutomatica, Optional ByVal objEvolucao As Object) As Long
'TEM QUE SER CHAMADA DENTRO DE TRANSACAO

Dim lErro As Long
Dim objTituloPagar As New ClassTituloPagar
Dim objParcelaPagar As New ClassParcelaPagar
Dim objBaixaParcPagar As New ClassBaixaParcPagar
Dim lComandoBaixaParc As Long
Dim lComandoTitSel As Long, lComandoTitMod As Long, lComandoTitDel As Long, lComandoTitIns As Long
Dim lComandoParcSel As Long, lComandoParcMod As Long, lComandoParcDel As Long, lComandoParcIns As Long
Dim lComandoOutrasParcSel As Long, lComandoOutrasParcDel As Long, lComandoOutrasParcIns As Long
Dim lComandoNFsSel As Long, lComandoNFsDel As Long, lComandoNFsIns As Long
Dim objTipoDocumento As New ClassTipoDocumento
Dim dDiferenca As Double

On Error GoTo Erro_BaixasParcelaPag_Grava

    'abrir comandos
    lErro = CF("BaixasParcelaPag_Grava2", lComandoParcSel, lComandoParcMod, lComandoParcDel, lComandoParcIns, lComandoBaixaParc, lComandoTitSel, lComandoTitMod, lComandoTitDel, lComandoTitIns, lComandoNFsSel, lComandoNFsDel, lComandoNFsIns, lComandoOutrasParcSel, lComandoOutrasParcDel, lComandoOutrasParcIns)
    If lErro <> SUCESSO Then Error 7338

    For Each objBaixaParcPagar In objColBaixaParcPagar

        'ler a parcela
        objParcelaPagar.lNumIntDoc = objBaixaParcPagar.lNumIntParcela
        lErro = CF("ParcelaPagar_LeMod", objParcelaPagar, lComandoParcSel)
        If lErro <> SUCESSO Then Error 7411
        
        'fazer o lock exclusivo
        lErro = Comando_LockExclusive(lComandoParcSel)
        If lErro <> AD_SQL_SUCESSO Then Error 7339

        'verificar se a parcela esta em condicoes de ser baixada
        If objParcelaPagar.iStatus <> STATUS_ABERTO Then Error 7354

        objBaixaParcPagar.iSequencial = objParcelaPagar.iProxSeqBaixa
        objParcelaPagar.iProxSeqBaixa = objParcelaPagar.iProxSeqBaixa + 1
        objParcelaPagar.dSaldo = objParcelaPagar.dSaldo - objBaixaParcPagar.dValorBaixado
        If objParcelaPagar.dSaldo < DELTA_VALORMONETARIO Then objParcelaPagar.dSaldo = 0
        dDiferenca = Round(objParcelaPagar.dValor - objParcelaPagar.dValorOriginal, 2)
        
        If objParcelaPagar.dSaldo = 0 Then objParcelaPagar.iStatus = STATUS_BAIXADO

        'Inserir registro em BaixasParcPag
        lErro = CF("BaixaParcPag_Inserir", objBaixaParcPagar, lComandoBaixaParc)
        If lErro <> SUCESSO Then Error 7340

        'Selecionar titulo
        objTituloPagar.lNumIntDoc = objParcelaPagar.lNumIntTitulo
        lErro = CF("TitulosPagar_LeMod", objTituloPagar, lComandoTitSel)
        If lErro <> SUCESSO Then Error 7853
        
        'fazer o lock exclusivo no titulo
        lErro = Comando_LockExclusive(lComandoTitSel)
        If lErro <> AD_SQL_SUCESSO Then Error 7341

        objTituloPagar.dSaldo = objTituloPagar.dSaldo - objBaixaParcPagar.dValorBaixado
        If objTituloPagar.dSaldo < DELTA_VALORMONETARIO Then objTituloPagar.dSaldo = 0
        
        lErro = CF("BaixasParcelaPagar_Grava_Customizado", objTituloPagar, objParcelaPagar, objBaixaParcPagar)
        If lErro <> SUCESSO Then Error 7853
        
        'Se o saldo do titulo ( apos a baixa da parcela ) for zero
        If objTituloPagar.dSaldo = 0 Then
            
            objTituloPagar.iStatus = STATUS_BAIXADO
            
            'incluir titulo na tabela TitulosPagBaixados
            lErro = CF("TitulosPagBaixados_Inserir", objTituloPagar, lComandoTitIns)
            If lErro <> SUCESSO Then Error 7343

            'se o titulo pode possuir NFs associadas
            If objTituloPagar.sSiglaDocumento = TIPODOC_FATURA_A_PAGAR Then
                'transferir as notas fiscais p/nfs baixadas
                lErro = CF("NotasFiscaisPag_Baixar", objTituloPagar.lNumIntDoc, lComandoNFsSel, lComandoNFsDel, lComandoNFsIns)
                If lErro <> SUCESSO Then Error 7344
            Else
                objTipoDocumento.sSigla = objTituloPagar.sSiglaDocumento
                
                lErro = CF("TipoDocumento_Le", objTipoDocumento)
                If lErro <> SUCESSO And lErro <> 17078 Then Error 15965
                If lErro = 17078 Then Error 15966
                
            End If

            'se o titulo tem outras parcelas (baixadas anteriormente)
            If objTituloPagar.iNumParcelas <> 1 Then
                'Transferir as outras parcelas p/parcelas baixadas (verificando se estao mesmo baixadas)
                lErro = CF("ParcelasPag_BaixarOutras", objTituloPagar.lNumIntDoc, objBaixaParcPagar.lNumIntParcela, lComandoOutrasParcSel, lComandoOutrasParcDel, lComandoOutrasParcIns)
                If lErro <> SUCESSO Then Error 7345
            End If

            'transferir a parcela que está sendo baixada agora

            'fazer o delete da tabela ParcelasPag
            lErro = CF("ParcelaPag_Excluir", objParcelaPagar, lComandoParcSel, lComandoParcDel)
            If lErro <> SUCESSO Then Error 7346

            'fazer o insert em ParcelasPagBaixadas
            lErro = CF("ParcelasPagBaixadas_Inserir", objParcelaPagar, lComandoParcIns)
            If lErro <> SUCESSO Then Error 7347
            
            objTituloPagar.iStatus = STATUS_BAIXADO

            'excluir titulo da tabela TitulosPag
            lErro = CF("TitulosPag_Excluir", objTituloPagar, lComandoTitSel, lComandoTitDel)
            If lErro <> SUCESSO Then Error 7342

        Else
            'Atualizar ParcelasPag: ProxSeqBaixa , Saldo e Status (a parcela pode ter sido baixada apesar do titulo nao)
            lErro = CF("ParcelaPag_Modificar_BaixaParcial", objParcelaPagar, lComandoParcMod, lComandoParcSel)
            If lErro <> SUCESSO Then Error 7348
            
            'Atualizar TitulosPag (saldo)
            lErro = CF("TitulosPag_Modificar_BaixaParcial", objTituloPagar, lComandoTitMod, lComandoTitSel)
            If lErro <> SUCESSO Then Error 7411
        End If

        'Desfazer lock exclusivo do titulo
        lErro = Comando_Unlock(lComandoTitSel)
        If lErro <> AD_SQL_SUCESSO Then Error 7349

        'Desfazer lock exclusivo da parcela
        lErro = Comando_Unlock(lComandoParcSel)
        If lErro <> AD_SQL_SUCESSO Then Error 7350
        
        'contabiliza a baixa da parcela
        If gobjCP.iContabSemDet = 0 And Not (objContabAutomatica Is Nothing) Then
        
            lErro = objContabAutomatica.GeraContabilizacao(objBaixaParcPagar, objParcelaPagar, objTituloPagar, Nothing)
            If lErro <> SUCESSO Then Error 32155
            
        End If
        
        If Not (objEvolucao Is Nothing) Then

            lErro = CF("Evolucao_BaixasParcPag", objEvolucao, 1)
            If lErro <> SUCESSO And lErro <> 25182 Then Error 25183
            
            If lErro = 25182 Then Error 26425

        End If
        
    Next

    'fechar comandos
    lErro = CF("BaixasParcelaPag_Grava3", lComandoParcSel, lComandoParcMod, lComandoParcDel, lComandoParcIns, lComandoBaixaParc, lComandoTitSel, lComandoTitMod, lComandoTitDel, lComandoTitIns, lComandoNFsSel, lComandoNFsDel, lComandoNFsIns, lComandoOutrasParcSel, lComandoOutrasParcDel, lComandoOutrasParcIns)
    If lErro <> SUCESSO Then Error 7357

    BaixasParcelaPag_Grava = SUCESSO

    Exit Function

Erro_BaixasParcelaPag_Grava:

    BaixasParcelaPag_Grava = Err

    Select Case Err
        
        Case 7338, 7340, 7343, 7344, 7345, 7347, 7342, 7357, 7411, 7348, 7411, 7853, 25183, 26425, 32155

        Case 7339
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_PARCELAS_PAGAR", Err)

        Case 7341
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_TITULOS_PAGAR", Err)

        Case 7349
            Call Rotina_Erro(vbOKOnly, "ERRO_UNLOCK_TITULOS_PAGAR", Err)

        Case 7350
            Call Rotina_Erro(vbOKOnly, "ERRO_UNLOCK_PARCELAS_PAGAR", Err)

        Case 7354
            Call Rotina_Erro(vbOKOnly, "ERRO_PARCELA_PAGAR_NAO_ABERTA", Err)

        Case 15965
        
        Case 15966
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPO_DOCUMENTO_NAO_CADASTRADO1", Err, objTipoDocumento.sSigla)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 147980)

    End Select

    'fechar comandos
    lErro = CF("BaixasParcelaPag_Grava3", lComandoParcSel, lComandoParcMod, lComandoParcDel, lComandoParcIns, lComandoBaixaParc, lComandoTitSel, lComandoTitMod, lComandoTitDel, lComandoTitIns, lComandoNFsSel, lComandoNFsDel, lComandoNFsIns, lComandoOutrasParcSel, lComandoOutrasParcDel, lComandoOutrasParcIns)
    
    Exit Function

End Function

Function NotasFiscaisPag_Baixar(ByVal lNumIntTitulo As Long, ByVal lComandoSel As Long, ByVal lComandoDel As Long, ByVal lComandoIns As Long) As Long
'transfere as notas fiscais vinculadas a um titulo a pagar de NFsPag para NFsPagBaixadas
'TEM QUE SER CHAMADA DENTRO DE TRANSACAO
Dim lErro As Long
Dim tNFsPag As typeNFsPag
Dim iIndice As Integer

On Error GoTo Erro_NotasFiscaisPag_Baixar

    tNFsPag.sHistorico = String(STRING_NFSPAG_HISTORICO, 0)

    lErro = Comando_ExecutarPos(lComandoSel, "SELECT NumIntDoc, FilialEmpresa, Fornecedor, Filial, NumNotaFiscal, DataEmissao, Status, DataVencimento, ValorTotal, ValorSeguro, ValorFrete, OutrasDespesas, ValorProdutos, ValorIRRF, ValorICMS, ValorICMSSubst, CreditoICMS, ValorIPI, CreditoIPI, PISRetido, COFINSRetido, CSLLRetido, TaxaMoeda, Historico, ISSRetido, INSSRetido, ValorINSS FROM NFsPag WHERE NumIntTitPag = ?", 0, tNFsPag.lNumIntDoc, tNFsPag.iFilialEmpresa, tNFsPag.lFornecedor, tNFsPag.iFilial, tNFsPag.lNumNotaFiscal, tNFsPag.dtDataEmissao, tNFsPag.iStatus, tNFsPag.dtDataVencimento, tNFsPag.dValorTotal, tNFsPag.dValorSeguro, tNFsPag.dValorFrete, tNFsPag.dOutrasDespesas, tNFsPag.dValorProdutos, tNFsPag.dValorIRRF, tNFsPag.dValorICMS, tNFsPag.dValorICMSSubst, tNFsPag.iCreditoICMS, tNFsPag.dValorIPI, tNFsPag.iCreditoIPI, tNFsPag.dPISRetido, tNFsPag.dCOFINSRetido, tNFsPag.dCSLLRetido, tNFsPag.dTaxaMoeda, tNFsPag.sHistorico, tNFsPag.dISSRetido, tNFsPag.iINSSRetido, tNFsPag.dValorINSS, lNumIntTitulo)
    If lErro <> AD_SQL_SUCESSO Then Error 7321

    lErro = Comando_BuscarProximo(lComandoSel)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7322

    If lErro = AD_SQL_SEM_DADOS Then Error 19377
        
    Do While lErro = AD_SQL_SUCESSO

        'Excluir a NF da tabela NFsPag
        lErro = Comando_ExecutarPos(lComandoDel, "DELETE FROM NFsPag", lComandoSel)
        If lErro <> AD_SQL_SUCESSO Then Error 7323

        lErro = Comando_Executar(lComandoIns, "INSERT INTO NFsPagBaixadas(NumIntDoc,FilialEmpresa,Fornecedor,Filial,NumNotaFiscal,DataEmissao,Status, NumIntTitPag, DataVencimento,ValorTotal,ValorSeguro, ValorFrete, OutrasDespesas, ValorProdutos, ValorIRRF, ValorICMS, ValorICMSSUbst, CreditoICMS, ValorIPI, CreditoIPI, PISRetido, COFINSRetido, CSLLRetido, TaxaMoeda, Historico, ISSRetido, INSSRetido, ValorINSS) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
            tNFsPag.lNumIntDoc, tNFsPag.iFilialEmpresa, tNFsPag.lFornecedor, tNFsPag.iFilial, tNFsPag.lNumNotaFiscal, tNFsPag.dtDataEmissao, STATUS_BAIXADO, lNumIntTitulo, tNFsPag.dtDataVencimento, tNFsPag.dValorTotal, tNFsPag.dValorSeguro, tNFsPag.dValorFrete, tNFsPag.dOutrasDespesas, tNFsPag.dValorProdutos, tNFsPag.dValorIRRF, tNFsPag.dValorICMS, tNFsPag.dValorICMSSubst, tNFsPag.iCreditoICMS, tNFsPag.dValorIPI, tNFsPag.iCreditoIPI, tNFsPag.dPISRetido, tNFsPag.dCOFINSRetido, tNFsPag.dCSLLRetido, tNFsPag.dTaxaMoeda, tNFsPag.sHistorico, tNFsPag.dISSRetido, tNFsPag.iINSSRetido, tNFsPag.dValorINSS)
        If lErro <> AD_SQL_SUCESSO Then Error 7325
        
        'Altera o Status da Nota para Baixado
        lErro = NFiscal_Altera_Status(tNFsPag.lNumIntDoc, CPR_NF_PAGAR, STATUS_BAIXADO)
        If lErro <> SUCESSO Then Error 61291
        
        lErro = Comando_BuscarProximo(lComandoSel)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7324

    Loop

    NotasFiscaisPag_Baixar = SUCESSO

    Exit Function

Erro_NotasFiscaisPag_Baixar:

    NotasFiscaisPag_Baixar = Err

    Select Case Err

        Case 7321, 7322, 7324, 19377
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NOTAS_FISCAIS_EXT", Err)

        Case 7323
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_NOTAS_FISCAIS_EXT", Err)

        Case 7325
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_NOTAS_FISCAIS_EXT_BAIXADAS", Err)
        
        Case 61291 'Tratado na rotina chamada
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 147981)

    End Select

    Exit Function

End Function

Function ParcelasPag_BaixarOutras(ByVal lNumIntTitulo As Long, ByVal lNumIntParcela As Long, ByVal lComandoSel As Long, ByVal lComandoDel As Long, ByVal lComandoIns As Long) As Long
'transfere as outras parcelas (que nao a identificada por lNumIntParcela) vinculadas a um titulo a pagar de ParcelasPag para ParcelasPagBaixadas
'TEM QUE SER CHAMADA DENTRO DE TRANSACAO
Dim lErro As Long
Dim tParcelaPagar As typeParcelaPagar
Dim objParcelaPagar As New ClassParcelaPagar
On Error GoTo Erro_ParcelasPag_BaixarOutras

    tParcelaPagar.sNossoNumero = String(STRING_NOSSO_NUMERO, 0)
    tParcelaPagar.sCodigoDeBarras = String(STRING_CODIGO_BARRAS_PARC_CPR, 0)
    tParcelaPagar.sCodUsuarioLib = String(STRING_USUARIO_CODIGO, 0)
    
    tParcelaPagar.lNumIntTitulo = lNumIntTitulo 'fixo
    
    lErro = Comando_ExecutarPos(lComandoSel, "SELECT NumIntDoc, Saldo, DataVencimento, DataVencimentoReal, Valor, ValorOriginal, MotivoDiferenca, BancoCobrador, NumParcela, Portador, ProxSeqBaixa, Status, TipoCobranca, NossoNumero, CodigoDeBarras, CodUsuarioLib, DataLib FROM ParcelasPag WHERE ParcelasPag.NumIntTitulo = ? AND ParcelasPag.NumIntDoc <> ?", 0, _
        tParcelaPagar.lNumIntDoc, tParcelaPagar.dSaldo, tParcelaPagar.dtDataVencimento, tParcelaPagar.dtDataVencimentoReal, tParcelaPagar.dValor, tParcelaPagar.dValorOriginal, tParcelaPagar.iMotivoDiferenca, tParcelaPagar.iBancoCobrador, tParcelaPagar.iNumParcela, tParcelaPagar.iPortador, tParcelaPagar.iProxSeqBaixa, tParcelaPagar.iStatus, tParcelaPagar.iTipoCobranca, tParcelaPagar.sNossoNumero, tParcelaPagar.sCodigoDeBarras, _
        tParcelaPagar.sCodUsuarioLib, tParcelaPagar.dtDataLib, lNumIntTitulo, lNumIntParcela)
    If lErro <> AD_SQL_SUCESSO Then Error 7319

    lErro = Comando_BuscarProximo(lComandoSel)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7318

    If lErro = AD_SQL_SEM_DADOS Then Error 19378

    Do While lErro = AD_SQL_SUCESSO

        'verificar se a parcela ainda nao foi baixada ou excluida
        If tParcelaPagar.iStatus <> STATUS_BAIXADO And tParcelaPagar.iStatus <> STATUS_EXCLUIDO Then Error 7320

        Call ParcelaPag_MoverCamposObj(objParcelaPagar, tParcelaPagar)

        'Excluir a parcela da tabela ParcelasPag
        lErro = CF("ParcelaPag_Excluir", objParcelaPagar, lComandoSel, lComandoDel)
        If lErro <> SUCESSO Then Error 7315

        lErro = CF("ParcelasPagBaixadas_Inserir", objParcelaPagar, lComandoIns)
        If lErro <> SUCESSO Then Error 7316

        lErro = Comando_BuscarProximo(lComandoSel)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7317

    Loop

    ParcelasPag_BaixarOutras = SUCESSO

    Exit Function

Erro_ParcelasPag_BaixarOutras:

    ParcelasPag_BaixarOutras = Err

    Select Case Err
        Case 7320 'a parcela deveria estar baixada ou excluida pois foi verificado que o saldo do titulo é zero
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_PAG", Err)

        Case 7319, 7317, 7318, 19378
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_PAG", Err)

        Case 7315
            'Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_PARCELAS_PAG", Err)

        Case 7316
'            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_PARCELAS_PAG_BAIXADAS", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 147982)

    End Select

    Exit Function

End Function

Function ParcelasPagBaixadas_Inserir(ByVal objParcelaPagar As ClassParcelaPagar, ByVal lComandoParcIns As Long) As Long
'auxiliar a baixa de parcelas

Dim lErro As Long

On Error GoTo Erro_ParcelasPagBaixadas_Inserir

    lErro = Comando_Executar(lComandoParcIns, "INSERT INTO ParcelasPagBaixadas " & _
        "( NumIntDoc, NumIntTitulo, NumParcela, Status, DataVencimento, DataVencimentoReal, Valor, ValorOriginal, MotivoDiferenca, TipoCobranca, Portador, BancoCobrador, ProxSeqBaixa, NossoNumero, CodigoDeBarras, CodUsuarioLib, DataLib) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
        objParcelaPagar.lNumIntDoc, objParcelaPagar.lNumIntTitulo, objParcelaPagar.iNumParcela, objParcelaPagar.iStatus, objParcelaPagar.dtDataVencimento, objParcelaPagar.dtDataVencimentoReal, objParcelaPagar.dValor, objParcelaPagar.dValorOriginal, objParcelaPagar.iMotivoDiferenca, objParcelaPagar.iTipoCobranca, objParcelaPagar.iPortador, objParcelaPagar.iBancoCobrador, objParcelaPagar.iProxSeqBaixa, objParcelaPagar.sNossoNumero, objParcelaPagar.sCodigoDeBarras, objParcelaPagar.sCodUsuarioLib, objParcelaPagar.dtDataLib)
    If lErro <> AD_SQL_SUCESSO Then Error 7314

    ParcelasPagBaixadas_Inserir = SUCESSO

    Exit Function

Erro_ParcelasPagBaixadas_Inserir:

    ParcelasPagBaixadas_Inserir = Err

    Select Case Err

        Case 7314
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_PARCELAS_PAG", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 147983)

    End Select

    Exit Function

End Function

Function TitulosPagBaixados_Inserir(ByVal objTituloPagar As ClassTituloPagar, ByVal lComandoTitIns As Long) As Long
'auxiliar a baixa de parcelas ( e portanto de titulos )

Dim lErro As Long

On Error GoTo Erro_TitulosPagBaixados_Inserir

    lErro = Comando_Executar(lComandoTitIns, "INSERT INTO TitulosPagBaixados " & _
            "( NumIntDoc, FilialEmpresa, Fornecedor, Filial, SiglaDocumento, NumTitulo, DataEmissao, Status, Saldo, NumParcelas, ValorTotal, ValorSeguro, ValorFrete, OutrasDespesas, ValorProdutos, ValorICMS, ValorICMSSubst, CreditoICMS, ValorIPI, CreditoIPI, ValorIRRF, ValorINSS, INSSRetido, DataRegistro, Observacao, CondicaoPagto, FilialPedCompra, NumPedCompra, PISRetido, ISSRetido, COFINSRetido, CSLLRetido, TaxaMoeda, Historico, Natureza, Ccl) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
            objTituloPagar.lNumIntDoc, objTituloPagar.iFilialEmpresa, objTituloPagar.lFornecedor, objTituloPagar.iFilial, objTituloPagar.sSiglaDocumento, objTituloPagar.lNumTitulo, objTituloPagar.dtDataEmissao, objTituloPagar.iStatus, objTituloPagar.dSaldo, objTituloPagar.iNumParcelas, objTituloPagar.dValorTotal, objTituloPagar.dValorSeguro, objTituloPagar.dValorFrete, objTituloPagar.dOutrasDespesas, objTituloPagar.dValorProdutos, objTituloPagar.dValorICMS, objTituloPagar.dValorICMSSubst, objTituloPagar.iCreditoICMS, objTituloPagar.dValorIPI, objTituloPagar.iCreditoIPI, objTituloPagar.dValorIRRF, objTituloPagar.dValorINSS, objTituloPagar.iINSSRetido, objTituloPagar.dtDataRegistro, objTituloPagar.sObservacao, objTituloPagar.iCondicaoPagto, objTituloPagar.iFilialPedCompra, _
            objTituloPagar.lNumPedCompra, objTituloPagar.dPISRetido, objTituloPagar.dISSRetido, objTituloPagar.dCOFINSRetido, objTituloPagar.dCSLLRetido, objTituloPagar.dTaxaMoeda, objTituloPagar.sHistorico, objTituloPagar.sNatureza, objTituloPagar.sCcl)
    If lErro <> AD_SQL_SUCESSO Then Error 7313

    'Altera o status da Nfiscal para Baixado caso tenha nota vinculada
    lErro = NFiscal_Altera_Status(objTituloPagar.lNumIntDoc, CPR_TITULO_PAGAR, STATUS_BAIXADO)
    If lErro <> SUCESSO Then Error 61289
    
    TitulosPagBaixados_Inserir = SUCESSO

    Exit Function

Erro_TitulosPagBaixados_Inserir:

    TitulosPagBaixados_Inserir = Err

    Select Case Err

        Case 7313
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_TITULOS_PAG", Err)
        
        Case 61289 'Tratado na rotina chamada
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 147984)

    End Select

    Exit Function

End Function

Function BaixaParcPag_Inserir(ByVal objBaixaParcPagar As ClassBaixaParcPagar, ByVal lComando As Long) As Long
'auxiliar a baixa de parcela a pagar
'insere no bd uma baixa de parcela a pagar com o lComando passado
'TEM QUE SER CHAMADA DENTRO DE TRANSACAO
Dim lErro As Long

On Error GoTo Erro_BaixaParcPag_Inserir

    lErro = Comando_Executar(lComando, "INSERT INTO BaixasParcPag (NumIntDoc, ValorBaixado, ValorDesconto, ValorJuros, ValorMulta , Sequencial, Status, NumIntBaixa, NumIntParcela,ValorDiferenca) VALUES (?,?,?,?,?,?,?,?,?,?)", _
         objBaixaParcPagar.lNumIntDoc, objBaixaParcPagar.dValorBaixado, objBaixaParcPagar.dValorDesconto, objBaixaParcPagar.dValorJuros, _
        objBaixaParcPagar.dValorMulta, objBaixaParcPagar.iSequencial, objBaixaParcPagar.iStatus, objBaixaParcPagar.lNumIntBaixa, objBaixaParcPagar.lNumIntParcela, objBaixaParcPagar.dValorDiferenca)
    If lErro <> AD_SQL_SUCESSO Then Error 7326

    BaixaParcPag_Inserir = SUCESSO

    Exit Function

Erro_BaixaParcPag_Inserir:

    BaixaParcPag_Inserir = Err

    Select Case Err

        Case 7326
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_BAIXA_PARC_PAG", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 147985)

    End Select

    Exit Function

End Function

Function TitulosPag_Excluir(ByVal objTituloPagar As ClassTituloPagar, ByVal lComandoTitSel As Long, ByVal lComandoTitDel As Long) As Long
'auxiliar a baixa de parcela

Dim lErro As Long

On Error GoTo Erro_TitulosPag_Excluir

    lErro = Comando_ExecutarPos(lComandoTitDel, "DELETE FROM TitulosPag", lComandoTitSel)
    If lErro <> AD_SQL_SUCESSO Then Error 7355

    TitulosPag_Excluir = SUCESSO

    Exit Function

Erro_TitulosPag_Excluir:

    TitulosPag_Excluir = Err

    Select Case Err

        Case 7355
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_TITULOS_PAGAR", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 147986)

    End Select

    Exit Function

End Function

Function ParcelaPag_Excluir(ByVal objParcelaPagar As ClassParcelaPagar, ByVal lComandoSel As Long, ByVal lComandoDel As Long) As Long
'auxiliar a baixa de parcela

Dim lErro As Long

On Error GoTo Erro_ParcelaPag_Excluir

    lErro = Comando_ExecutarPos(lComandoDel, "DELETE FROM ParcelasPag", lComandoSel)
    If lErro <> AD_SQL_SUCESSO Then Error 7356

    ParcelaPag_Excluir = SUCESSO

    Exit Function

Erro_ParcelaPag_Excluir:

    ParcelaPag_Excluir = Err

    Select Case Err

        Case 7356
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_PARCELAS_PAGAR", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 147987)

    End Select

    Exit Function

End Function

Function ParcelaPag_Modificar_BaixaParcial(ByVal objParcelaPagar As ClassParcelaPagar, ByVal lComandoMod As Long, ByVal lComandoSel As Long) As Long
'alteracoes em uma parcela pag em uma baixa parcial
Dim lErro As Long

On Error GoTo Erro_ParcelaPag_Modificar_BaixaParcial

    lErro = Comando_ExecutarPos(lComandoMod, "UPDATE ParcelasPag SET " & _
        "ProxSeqBaixa = ?, Saldo = ?, Status = ?", lComandoSel, _
        objParcelaPagar.iProxSeqBaixa, objParcelaPagar.dSaldo, objParcelaPagar.iStatus)
    If lErro <> AD_SQL_SUCESSO Then Error 7358

    ParcelaPag_Modificar_BaixaParcial = SUCESSO

    Exit Function

Erro_ParcelaPag_Modificar_BaixaParcial:

    ParcelaPag_Modificar_BaixaParcial = Err

    Select Case Err

        Case 7358
            Call Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_PARCELAS_PAGAR", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 147988)

    End Select

    Exit Function

End Function

Function BaixasParcelaPag_Grava3(lComandoParcSel As Long, lComandoParcMod As Long, lComandoParcDel As Long, lComandoParcIns As Long, lComandoBaixaParc As Long, lComandoTitSel As Long, lComandoTitMod As Long, lComandoTitDel As Long, lComandoTitIns As Long, lComandoNFsSel As Long, lComandoNFsDel As Long, lComandoNFsIns As Long, lComandoOutrasParcSel As Long, lComandoOutrasParcDel As Long, lComandoOutrasParcIns As Long) As Long
'auxiliar a BaixasParcelaPag_Grava. Fecha os comandos abertos
Dim lErro As Long

On Error GoTo Erro_BaixasParcelaPag_Grava3

    lErro = Comando_Fechar(lComandoParcSel)
    lErro = Comando_Fechar(lComandoParcMod)
    lErro = Comando_Fechar(lComandoParcDel)
    lErro = Comando_Fechar(lComandoParcIns)
    lErro = Comando_Fechar(lComandoBaixaParc)
    lErro = Comando_Fechar(lComandoTitSel)
    lErro = Comando_Fechar(lComandoTitMod)
    lErro = Comando_Fechar(lComandoTitDel)
    lErro = Comando_Fechar(lComandoTitIns)
    lErro = Comando_Fechar(lComandoNFsSel)
    lErro = Comando_Fechar(lComandoNFsDel)
    lErro = Comando_Fechar(lComandoNFsIns)
    lErro = Comando_Fechar(lComandoOutrasParcSel)
    lErro = Comando_Fechar(lComandoOutrasParcDel)
    lErro = Comando_Fechar(lComandoOutrasParcIns)

    BaixasParcelaPag_Grava3 = SUCESSO

    Exit Function

Erro_BaixasParcelaPag_Grava3:

    BaixasParcelaPag_Grava3 = Err

    Select Case Err

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 147989)

    End Select

    Exit Function

End Function

Function BorderoPagto_ObterProxNumInt(lNumIntBordero As Long) As Long
'obtem um proximo numero automatico p/bordero de pagto
Dim lErro As Long
On Error GoTo Erro_BorderoPagto_ObterProxNumInt

    lErro = CF("CPRConfig_ObterNumInt", "NUM_INT_PROX_BORDERO_PAG", lNumIntBordero)
    If lErro <> SUCESSO Then Error 7362

    BorderoPagto_ObterProxNumInt = SUCESSO

    Exit Function

Erro_BorderoPagto_ObterProxNumInt:

    BorderoPagto_ObterProxNumInt = Err

    Select Case Err

        Case 7362

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 147990)

    End Select

End Function

Function BorderoPagto_Gravar(ByVal objBorderoPagto As ClassBorderoPagto) As Long
'inclui ou altera bordero de pagto

Dim lErro As Long
Dim lNumIntBordero As Long
Dim lComandoSel As Long, lComandoMod As Long, lComandoIns As Long

On Error GoTo Erro_BorderoPagto_Gravar

    lComandoSel = Comando_Abrir()
    If lComandoSel = 0 Then Error 7370

    lComandoMod = Comando_Abrir()
    If lComandoMod = 0 Then Error 7371

    lComandoIns = Comando_Abrir()
    If lComandoIns = 0 Then Error 7372

    'se é um bordero novo
    If objBorderoPagto.lNumIntBordero = 0 Then

        'obter o proximo numero interno p/bordero de pagto
        lErro = CF("BorderoPagto_ObterProxNumInt", lNumIntBordero)
        If lErro <> SUCESSO Then Error 7369

        objBorderoPagto.lNumIntBordero = lNumIntBordero
        objBorderoPagto.lNumero = lNumIntBordero
        
        lErro = Comando_Executar(lComandoIns, "INSERT INTO BorderosPagto (NumIntBordero, Excluido, CodConta, DataEmissao, Numero, TipoDeCobranca, TitOutroBanco, NomeArq, NumArqRemessa, DataEnvio, DataVencimento) VALUES(?,?,?,?,?,?,?,?,?,?,?)", _
            objBorderoPagto.lNumIntBordero, 0, objBorderoPagto.iCodConta, objBorderoPagto.dtDataEmissao, objBorderoPagto.lNumero, objBorderoPagto.iTipoDeCobranca, objBorderoPagto.iTitOutroBanco, objBorderoPagto.sNomeArq, objBorderoPagto.iNumArqRemessa, objBorderoPagto.dtDataEnvio, objBorderoPagto.dtDataVencimento)
        If lErro <> AD_SQL_SUCESSO Then Error 7373

    Else 'modificacao de bordero existente

        lErro = Comando_ExecutarPos(lComandoSel, "SELECT NumIntBordero FROM BorderosPagto WHERE NumIntBordero = ?", 0, _
                lNumIntBordero, objBorderoPagto.lNumIntBordero)
        If lErro <> AD_SQL_SUCESSO Then Error 7374

        lErro = Comando_BuscarProximo(lComandoSel)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7375

        If lErro <> AD_SQL_SUCESSO Then Error 7376

        lErro = Comando_ExecutarPos(lComandoMod, "UPDATE BorderosPagto SET Excluido = ?, CodConta = ?, DataEmissao = ?, Numero = ?, TipoDeCobranca = ?, TitOutroBanco = ?, NomeArq = ?, NumArqRemessa = ?, DataEnvio = ?", lComandoSel, _
                objBorderoPagto.iExcluido, objBorderoPagto.iCodConta, objBorderoPagto.dtDataEmissao, objBorderoPagto.lNumero, objBorderoPagto.iTipoDeCobranca, objBorderoPagto.iTitOutroBanco, objBorderoPagto.sNomeArq, objBorderoPagto.iNumArqRemessa, objBorderoPagto.dtDataEnvio)
        If lErro <> AD_SQL_SUCESSO Then Error 7377

    End If

    lErro = Comando_Fechar(lComandoSel)
    lErro = Comando_Fechar(lComandoMod)
    lErro = Comando_Fechar(lComandoIns)

    BorderoPagto_Gravar = SUCESSO

    Exit Function

Erro_BorderoPagto_Gravar:

    BorderoPagto_Gravar = Err

    Select Case Err

        Case 7369

        Case 7370, 7371, 7372
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 7373
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_BORDERO_PAG", Err)

        Case 7374, 7375, 7376
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BORDERO_PAG", Err)

        Case 7377
            Call Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_BORDERO_PAG", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 147991)

    End Select

    Call Comando_Fechar(lComandoSel)
    Call Comando_Fechar(lComandoMod)
    Call Comando_Fechar(lComandoIns)
    
    Exit Function

End Function

Function BaixaPagar_Grava(ByVal objBaixaPagar As ClassBaixaPagar, ByVal colBaixaParcPagar As colBaixaParcPagar, ByVal objContabil As ClassContabil, ByVal lFornecedor As Long, ByVal iFilial As Integer) As Long
'AVISO: DEVE SER CHAMADA DENTRO DE UMA TRANSAÇÃO
'Insere uma BaixaPagar e as BaixasParcela correspondentes no BD

Dim lErro As Long
Dim lComando As Long, iItem As Integer, lComando2 As Long
Dim lNumIntBaixa As Long, lNumIntBaixaParc As Long
Dim objBaixaParcPagar As ClassBaixaParcPagar
Dim dValorLivroAuxiliar As Double

On Error GoTo Erro_BaixaPagar_Grava

    'Abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 6768
    
    'Abre o comando
    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 6768
    
    'Gera código interno para BaixaPagar
    lErro = CF("BaixaPagar_Automatico", lNumIntBaixa)
    If lErro <> SUCESSO Then Error 6769
        
    objBaixaPagar.lNumIntBaixa = lNumIntBaixa
        
    lErro = Comando_Executar(lComando2, "INSERT INTO LogInterno (FilialEmpresa, Usuario, Transacao, Chave, Data, Hora, Doc, Msg) VALUES (?,?,?,?,?,?,?,?)", _
        giFilialEmpresa, gsUsuario, 2, CStr(lNumIntBaixa), Date, CDbl(Time), "Baixa de Titulos a Pagar", "Baixa de Titulos a Pagar")
    If lErro <> AD_SQL_SUCESSO Then Error 6770
        
    'Insere novo registro na tabela BaixasPag
    lErro = Comando_Executar(lComando, "INSERT INTO BaixasPag (NumIntBaixa, Status, Historico, Motivo, Data, DataContabil, DataRegistro, NumMovCta, NumIntDoc, NumIntCheque, FilialEmpresaCheque,NumIntDocBaixaAgrupada) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)", lNumIntBaixa, objBaixaPagar.iStatus, objBaixaPagar.sHistorico, objBaixaPagar.iMotivo, objBaixaPagar.dtData, objBaixaPagar.dtDataContabil, objBaixaPagar.dtDataRegistro, objBaixaPagar.lNumMovConta, objBaixaPagar.lNumIntDoc, objBaixaPagar.lNumIntCheque, objBaixaPagar.iFilialEmpresaCheque, objBaixaPagar.lNumIntDocBaixaAgrupada)
    If lErro <> AD_SQL_SUCESSO Then Error 6770
    
    'Obtem NumIntDocs para os registros em BaixasParcPag
    lErro = CF("Config_ObterNumInt", "CPRConfig", "NUM_PROX_BAIXAPARCPAG", lNumIntBaixaParc, colBaixaParcPagar.Count)
    If lErro <> AD_SQL_SUCESSO Then Error 41650
    
    dValorLivroAuxiliar = 0
    
    'Preenche NumIntDoc e NumIntBaixa na coleção colBaixaParcPagar
    iItem = 0
    For Each objBaixaParcPagar In colBaixaParcPagar
    
        objBaixaParcPagar.lNumIntDoc = lNumIntBaixaParc + iItem
        iItem = iItem + 1
        
        objBaixaParcPagar.lNumIntBaixa = lNumIntBaixa
        
        dValorLivroAuxiliar = dValorLivroAuxiliar + Round(objBaixaParcPagar.dValorBaixado, 2)
    
    Next
    
    'Insere Baixas de Parcelas Pagar no BD
    lErro = CF("BaixasParcelaPag_Grava", colBaixaParcPagar)
    If lErro <> SUCESSO Then Error 6771
    
    If Not (objContabil Is Nothing) Then
        'Grava os dados contábeis (contabilidade)
        lErro = objContabil.Contabil_Gravar_Registro(objBaixaPagar.lNumIntBaixa, lFornecedor, iFilial, DATA_NULA, , 0, , -dValorLivroAuxiliar)
        If lErro <> SUCESSO Then Error 20534
    End If
    
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)
    
    BaixaPagar_Grava = SUCESSO
    
    Exit Function
    
Erro_BaixaPagar_Grava:

    BaixaPagar_Grava = Err
    
        Select Case Err

        Case 6768
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 6769, 6771, 20534, 26426, 41650

        Case 6770
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_BAIXAS_PAG", Err, lNumIntBaixa)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 147992)

    End Select
    
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)

    Exit Function
        
End Function

Function BaixaPagar_Grava1(ByVal objBaixaPagar As ClassBaixaPagar, ByVal colBaixaParcPagar As colBaixaParcPagar, ByVal objContabAutomatica As ClassContabAutomatica, Optional ByVal objEvolucao As Object) As Long
'AVISO: DEVE SER CHAMADA DENTRO DE UMA TRANSAÇÃO
'Insere uma BaixaPagar e as BaixasParcela correspondentes no BD

Dim lErro As Long
Dim lComando As Long, iItem As Integer
Dim lNumIntBaixa As Long, lNumIntBaixaParc As Long
Dim objBaixaParcPagar As ClassBaixaParcPagar

On Error GoTo Erro_BaixaPagar_Grava1

    'Abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 6768
    
    'Gera código interno para BaixaPagar
    lErro = CF("BaixaPagar_Automatico", lNumIntBaixa)
    If lErro <> SUCESSO Then Error 6769
        
    objBaixaPagar.lNumIntBaixa = lNumIntBaixa
        
    'Insere novo registro na tabela BaixasPag
    lErro = Comando_Executar(lComando, "INSERT INTO BaixasPag (NumIntBaixa, Status, Historico, Motivo, Data, DataContabil, DataRegistro, NumMovCta, NumIntDoc) VALUES (?,?,?,?,?,?,?,?,?)", lNumIntBaixa, objBaixaPagar.iStatus, objBaixaPagar.sHistorico, objBaixaPagar.iMotivo, objBaixaPagar.dtData, objBaixaPagar.dtDataContabil, objBaixaPagar.dtDataRegistro, objBaixaPagar.lNumMovConta, objBaixaPagar.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then Error 6770
    
    'obtem os NumIntDocs para os registros de BaixasParcPag
    lErro = CF("Config_ObterNumInt", "CPRConfig", "NUM_PROX_BAIXAPARCPAG", lNumIntBaixaParc, colBaixaParcPagar.Count)
    If lErro <> AD_SQL_SUCESSO Then Error 41649
    
    'Preenche NumIntDoc e NumIntBaixa na coleção colBaixaParcPagar
    iItem = 0
    For Each objBaixaParcPagar In colBaixaParcPagar
    
        objBaixaParcPagar.lNumIntDoc = lNumIntBaixaParc + iItem
        iItem = iItem + 1
        objBaixaParcPagar.lNumIntBaixa = lNumIntBaixa
    
    Next
    
    'Insere Baixas de Parcelas Pagar no BD
    lErro = CF("BaixasParcelaPag_Grava", colBaixaParcPagar, objContabAutomatica, objEvolucao)
    If lErro <> SUCESSO And lErro <> 26425 Then Error 6771
    
    'se usuario cancelou atualizacao
    If lErro = 26425 Then Error 26426
    
    Call Comando_Fechar(lComando)
    
    BaixaPagar_Grava1 = SUCESSO
    
    Exit Function
    
Erro_BaixaPagar_Grava1:

    BaixaPagar_Grava1 = Err
    
        Select Case Err

        Case 6768
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 6769, 6771, 26426, 41649

        Case 6770
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_BAIXAS_PAG", Err, lNumIntBaixa)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 147993)

    End Select
    
    Call Comando_Fechar(lComando)

    Exit Function
        
End Function

Function Cheques_PrepararTesteImpressao(lNumImpressao As Long) As Long
'retorna lNumImpressao
'preenche a tabela GeracaoDeCheques com um cheque teste a ser impresso identificados
'por um sequencial de "geracao" de impressao que ficará armazenado em objChequesPag.lNumImpressao

Dim lErro As Long
Dim objColInfoChequePag As New ColInfoChequePag
On Error GoTo Erro_Cheques_PrepararTesteImpressao

    Call objColInfoChequePag.Add(1, "TESTE DE POSICIONAMENTO PARA IMPRESSÃO", 0, 0, 1, 0)

    lErro = CF("Cheques_PrepararImpressao", lNumImpressao, objColInfoChequePag)
    If lErro <> SUCESSO Then Error 7403

    Cheques_PrepararTesteImpressao = SUCESSO

    Exit Function

Erro_Cheques_PrepararTesteImpressao:

    Cheques_PrepararTesteImpressao = Err

    Select Case Err
    
        Case 7403
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 147994)

    End Select

    Exit Function

End Function

Function ChequesPagAvulso_PrepararImpressao(ByVal objChequesPagAvulso As ClassChequesPagAvulso) As Long
'preenche a tabela GeracaoDeCheques com os cheques a serem impressos identificados
'por um sequencial de "geracao" de impressao que ficará armazenado em objChequesPag.lNumImpressao

Dim lErro As Long, lNumImpressao As Long
Dim objColInfoChequePag As New ColInfoChequePag
On Error GoTo Erro_ChequesPagAvulso_PrepararImpressao

    Call objColInfoChequePag.Add(objChequesPagAvulso.objInfoChequePag.iSeqCheque, objChequesPagAvulso.objInfoChequePag.sFavorecido, objChequesPagAvulso.objInfoChequePag.dValor, objChequesPagAvulso.objInfoChequePag.lNumRealCheque, 1, objChequesPagAvulso.objInfoChequePag.iPortador)

    lErro = CF("Cheques_PrepararImpressao", lNumImpressao, objColInfoChequePag)
    If lErro <> SUCESSO Then Error 7400

    objChequesPagAvulso.lNumImpressao = lNumImpressao

    ChequesPagAvulso_PrepararImpressao = SUCESSO

    Exit Function

Erro_ChequesPagAvulso_PrepararImpressao:

    ChequesPagAvulso_PrepararImpressao = Err

    Select Case Err
        
        Case 7400
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 147995)

    End Select

    Exit Function

End Function

Function Cheques_PrepararImpressao(lNumImpressao As Long, ByVal objColInfoChequesPag As ColInfoChequePag) As Long
'retorna lNumImpressao
'preenche a tabela GeracaoDeCheques com os cheques a serem impressos identificados
'por um sequencial de "geracao" de impressao que retornará em lNumImpressao

Dim objInfoChequePag As New ClassInfoChequePag
Dim lComando As Long, lErro As Long, lTransacao As Long
On Error GoTo Erro_Cheques_PrepararImpressao

    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 7787

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 7380

    'obtem sequencial que identifica "geracao" de impressao
    lErro = CF("CPRConfig_ObterNumInt", "NUM_PROX_GERACAO_CHEQUES", lNumImpressao)
    If lErro <> SUCESSO Then Error 7381

    'limpa a tabela
    lErro = Comando_Executar(lComando, "DELETE FROM GeracaoDeCheques WHERE CodGeracao = ?", lNumImpressao)
    If lErro <> AD_SQL_SUCESSO Then Error 7382

    'percorre a colecao de cheques
    For Each objInfoChequePag In objColInfoChequesPag
        'se o cheque está marcado para impressao
        If objInfoChequePag.iImprimir <> 0 Then

            lErro = Comando_Executar(lComando, "INSERT INTO GeracaoDeCheques (CodGeracao, SeqCheque, Favorecido, Valor, NumCheque, Verso) VALUES (?,?,?,?,?,?)", lNumImpressao, objInfoChequePag.iSeqCheque, objInfoChequePag.sFavorecido, objInfoChequePag.dValor, objInfoChequePag.lNumRealCheque, objInfoChequePag.sVerso)
            If lErro <> AD_SQL_SUCESSO Then Error 7383

        End If
    Next

    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 7789

    lErro = Comando_Fechar(lComando)

    Cheques_PrepararImpressao = SUCESSO

    Exit Function

Erro_Cheques_PrepararImpressao:

    Cheques_PrepararImpressao = Err

    Select Case Err

        Case 7787
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
        
        Case 7789
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
        
        Case 7381

        Case 7380
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 7382
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_GERACAO_CHEQUES", Err)

        Case 7383
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_GERACAO_CHEQUES", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 147996)

    End Select

    Call Transacao_Rollback
    
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function BaixaPagar_Automatico(lCodigo As Long) As Long
'Gera o próximo número interno de BaixaPagar
'AVISO: ESSA ROTINA DEVE SER CHAMADA DENTRO DE UMA TRANSAÇÃO

    BaixaPagar_Automatico = CF("Config_ObterNumInt", "CPRConfig", "NUM_PROX_BAIXA_PAGAR", lCodigo)
    
End Function

Private Sub ParcelaPag_MoverCamposObj(ByVal objParcelaPagar As ClassParcelaPagar, tParcelaPagar As typeParcelaPagar)

    objParcelaPagar.lNumIntDoc = tParcelaPagar.lNumIntDoc
    objParcelaPagar.dSaldo = tParcelaPagar.dSaldo
    objParcelaPagar.dtDataVencimento = tParcelaPagar.dtDataVencimento
    objParcelaPagar.dtDataVencimentoReal = tParcelaPagar.dtDataVencimentoReal
    objParcelaPagar.dValor = tParcelaPagar.dValor
    objParcelaPagar.dValorOriginal = tParcelaPagar.dValorOriginal
    objParcelaPagar.iMotivoDiferenca = tParcelaPagar.iMotivoDiferenca
    objParcelaPagar.iBancoCobrador = tParcelaPagar.iBancoCobrador
    objParcelaPagar.iNumParcela = tParcelaPagar.iNumParcela
    objParcelaPagar.iPortador = tParcelaPagar.iPortador
    objParcelaPagar.iProxSeqBaixa = tParcelaPagar.iProxSeqBaixa
    objParcelaPagar.iStatus = tParcelaPagar.iStatus
    objParcelaPagar.iTipoCobranca = tParcelaPagar.iTipoCobranca
    objParcelaPagar.lNumIntTitulo = tParcelaPagar.lNumIntTitulo
    objParcelaPagar.sNossoNumero = tParcelaPagar.sNossoNumero
    objParcelaPagar.sCodigoDeBarras = tParcelaPagar.sCodigoDeBarras
    objParcelaPagar.sCodUsuarioLib = tParcelaPagar.sCodUsuarioLib
    objParcelaPagar.dtDataLib = tParcelaPagar.dtDataLib

End Sub

Function ParcelaPagar_LeMod(ByVal objParcelaPagar As ClassParcelaPagar, ByVal lComando As Long) As Long
'faz a leitura de um registro da tabela ParcelasPag p/objParcelaPagar c/ExecutarPos
'objParcelaPagar.lNumIntDoc entra preenchido
'TEM QUE SER CHAMADO EM TRANSACAO
Dim lErro As Long
Dim tParcelaPagar As typeParcelaPagar

On Error GoTo Erro_ParcelaPagar_LeMod

    tParcelaPagar.sNossoNumero = String(STRING_NOSSO_NUMERO, 0)
    tParcelaPagar.sCodigoDeBarras = String(STRING_CODIGO_BARRAS_PARC_CPR, 0)
    tParcelaPagar.sCodUsuarioLib = String(STRING_USUARIO_CODIGO, 0)

    lErro = Comando_ExecutarPos(lComando, "SELECT Saldo, DataVencimento, DataVencimentoReal, Valor, ValorOriginal, MotivoDiferenca, BancoCobrador, NumParcela, Portador, ProxSeqBaixa, Status, TipoCobranca, NumIntTitulo, NossoNumero, CodigoDeBarras, CodUsuarioLib, DataLib FROM ParcelasPag WHERE ParcelasPag.NumIntDoc = ?", 0, _
        tParcelaPagar.dSaldo, tParcelaPagar.dtDataVencimento, tParcelaPagar.dtDataVencimentoReal, tParcelaPagar.dValor, tParcelaPagar.dValorOriginal, tParcelaPagar.iMotivoDiferenca, tParcelaPagar.iBancoCobrador, tParcelaPagar.iNumParcela, tParcelaPagar.iPortador, tParcelaPagar.iProxSeqBaixa, tParcelaPagar.iStatus, tParcelaPagar.iTipoCobranca, tParcelaPagar.lNumIntTitulo, tParcelaPagar.sNossoNumero, tParcelaPagar.sCodigoDeBarras, _
        tParcelaPagar.sCodUsuarioLib, tParcelaPagar.dtDataLib, objParcelaPagar.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then Error 7312

    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7409
    
    If lErro <> AD_SQL_SUCESSO Then Error 7410
    
    tParcelaPagar.lNumIntDoc = objParcelaPagar.lNumIntDoc
    Call ParcelaPag_MoverCamposObj(objParcelaPagar, tParcelaPagar)

    ParcelaPagar_LeMod = SUCESSO

    Exit Function

Erro_ParcelaPagar_LeMod:

    ParcelaPagar_LeMod = Err

    Select Case Err

        Case 7312, 7409
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_PAG", Err)

        Case 7410
            Call Rotina_Erro(vbOKOnly, "ERRO_PARCELA_PAGAR_INEXISTENTE", Err)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 147997)

    End Select

    Exit Function

End Function

Function TitulosPag_Modificar_BaixaParcial(ByVal objTituloPagar As ClassTituloPagar, ByVal lComandoMod As Long, ByVal lComandoSel As Long) As Long
'auxiliar a baixa de parcela a pagar
'executa alteracoes a nivel de titulo quando é efetuada uma baixa de uma parcela que nao baixa o titulo como um todo
Dim lErro As Long
On Error GoTo Erro_TitulosPag_Modificar_BaixaParcial

    lErro = Comando_ExecutarPos(lComandoMod, "UPDATE TitulosPag SET " & _
            "Saldo = ?", lComandoSel, _
            objTituloPagar.dSaldo)
        If lErro <> AD_SQL_SUCESSO Then Error 7413
    
    TitulosPag_Modificar_BaixaParcial = SUCESSO
    
    Exit Function

Erro_TitulosPag_Modificar_BaixaParcial:

    TitulosPag_Modificar_BaixaParcial = Err
    
    Select Case Err
    
        Case 7413
            Call Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_TITULOS_PAGAR", Err)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 147998)

    End Select

    Exit Function

End Function

Function Evolucao_ChequesPag(ByVal objEvolucao As Object, ByVal iNumProc As Integer) As Long
'permite que a tela de atualizacao de cheques mostre a evolucao da gravacao e testa se o usuario interrompeu o processo

Dim lErro As Long
Dim iCancela As Integer

On Error GoTo Erro_Evolucao_ChequesPag

    lErro = objEvolucao.Mostra_Evolucao1(iCancela, iNumProc)
    If lErro <> SUCESSO Then Error 26430
    
    If iCancela = CANCELA_BATCH Then Error 26399
    
    Evolucao_ChequesPag = SUCESSO
    
    Exit Function
    
Erro_Evolucao_ChequesPag:

    Evolucao_ChequesPag = Err
    
    Select Case Err
        Case 26430, 26399
    End Select
    
    Exit Function
    
End Function

Function ChequesPag_AtualizarBD(ByVal objChequesPag As ClassChequesPag) As Long
'atualiza o bd para refletir a emissao de cheques automaticos

Dim lErro As Long, lComando As Long
Dim objInfoChequePag As New ClassInfoChequePag
Dim objMovContaCorrente As New ClassMovContaCorrente
Dim lTransacao As Long, lNumIntBaixa As Long
Dim objInfoParcPag As ClassInfoParcPag
Dim objColBaixaParcPagar As colBaixaParcPagar, objContabAutomatica As ClassContabAutomatica

On Error GoTo Erro_ChequesPag_AtualizarBD

    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 7414
    
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 32001
    
    If (gcolModulo.Ativo(MODULO_CONTABILIDADE) = MODULO_ATIVO) Then
    
        Set objContabAutomatica = New ClassContabAutomatica
    
        lErro = objContabAutomatica.Inicializa_Contab(objChequesPag, MODULO_CONTASAPAGAR, "BCP", objChequesPag.dtContabil, DATA_NULA)
        If lErro <> SUCESSO Then Error 32156
        
    End If
    
    objChequesPag.iIndiceChequeProc = 0
    
    For Each objInfoChequePag In objChequesPag.ColInfoChequePag
    
        objChequesPag.iIndiceChequeProc = objChequesPag.iIndiceChequeProc + 1
        
        'montar objMovContaCorrente
        objMovContaCorrente.dtDataContabil = objChequesPag.dtContabil
        objMovContaCorrente.dtDataMovimento = objChequesPag.dtEmissao
        objMovContaCorrente.dValor = objInfoChequePag.dValor
        objMovContaCorrente.iCodConta = objChequesPag.iCta
        objMovContaCorrente.iConciliado = NAO_CONCILIADO
        objMovContaCorrente.iExcluido = 0
        objMovContaCorrente.iFavorecido = 0
        objMovContaCorrente.iFilialEmpresa = objChequesPag.iFilialEmpresaCta
        objMovContaCorrente.iPortador = objInfoChequePag.iPortador
        objMovContaCorrente.iTipo = MOVCCI_PAGTO_TITULO_POR_CHEQUE
        objMovContaCorrente.iTipoMeioPagto = Cheque
        objMovContaCorrente.lNumero = objInfoChequePag.lNumRealCheque
        objMovContaCorrente.lNumMovto = 0
        objMovContaCorrente.lNumRefInterna = 0
        objMovContaCorrente.lSequencial = 0
        objMovContaCorrente.sHistorico = ""
        objMovContaCorrente.sNumRefExterna = ""
    
        If Not (objChequesPag.objEvolucao Is Nothing) Then
    
            lErro = Evolucao_ChequesPag(objChequesPag.objEvolucao, 1)
            If lErro <> SUCESSO And lErro <> 26399 Then Error 26377
            
            If lErro = 26399 Then Error 30626
            
        End If
        
        Set objColBaixaParcPagar = New colBaixaParcPagar
        
        'percorrer a colecao de parcelas a pagar
        For Each objInfoParcPag In objChequesPag.colInfoParcPag
    
            If objInfoParcPag.iSeqCheque = objInfoChequePag.iSeqCheque Then
    
                'criar objeto com info p/baixa e coloca-lo numa colecao
                objColBaixaParcPagar.Add 0, lNumIntBaixa, objInfoParcPag.lNumIntParc, 0, _
                    objInfoParcPag.dValorMulta, objInfoParcPag.dValorJuros, objInfoParcPag.dValorDesconto, _
                    objInfoParcPag.dValor, STATUS_LANCADO
    
            End If
    
        Next
    
        lErro = CF("BaixaPagar_Grava_Pagamento1", objChequesPag, objColBaixaParcPagar, objMovContaCorrente, objContabAutomatica, objChequesPag.objEvolucao)
        If lErro <> SUCESSO And lErro <> 26427 Then Error 7415
        
        If lErro = 26427 Then Error 26429
        
        lErro = Comando_Executar(lComando, "INSERT INTO ChequesDet ( NumMovto, EmNomeDeQuem, Usuario ) VALUES (?,?,?)", objMovContaCorrente.lNumMovto, objInfoChequePag.sFavorecido, gsUsuario)
        If lErro <> SUCESSO Then Error 32002
        
    Next
    
    If (gcolModulo.Ativo(MODULO_CONTABILIDADE) = MODULO_ATIVO) Then
    
        lErro = objContabAutomatica.Finaliza_Contab
        If lErro <> SUCESSO Then Error 32157
        
    End If
    
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 7416
    
    Call Comando_Fechar(lComando)
    
    ChequesPag_AtualizarBD = SUCESSO
    
    Exit Function
    
Erro_ChequesPag_AtualizarBD:

    ChequesPag_AtualizarBD = Err

    Select Case Err
    
        Case 32001
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 32002
            Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEDET_GRAVACAO", Err)
        
        Case 7414
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
        
        Case 7415, 26429, 26377, 30626, 32156, 32157
        
        Case 7416
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 147999)

    End Select
    
    Call Transacao_Rollback
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function ChequesPagAvulso_AtualizarBD(ByVal objChequesPagAvulso As ClassChequesPagAvulso) As Long
'faz as atualizacoes no bd correspondentes a criacao de um cheque avulso (manual)

Dim lErro As Long, lComando As Long
Dim objInfoChequePag As New ClassInfoChequePag
Dim objMovContaCorrente As New ClassMovContaCorrente
Dim lTransacao As Long, lNumIntBaixa As Long
Dim objInfoParcPag As ClassInfoParcPag
Dim objColBaixaParcPagar As New colBaixaParcPagar, objContabAutomatica As ClassContabAutomatica
Dim objBaixaParcPagar As ClassBaixaParcPagar

On Error GoTo Erro_ChequesPagAvulso_AtualizarBD

    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 7417
    
    If (gcolModulo.Ativo(MODULO_CONTABILIDADE) = MODULO_ATIVO) Then
    
        Set objContabAutomatica = New ClassContabAutomatica
    
        lErro = objContabAutomatica.Inicializa_Contab(objChequesPagAvulso, MODULO_CONTASAPAGAR, "BCP", objChequesPagAvulso.dtContabil, DATA_NULA)
        If lErro <> SUCESSO Then Error 32158
        
    End If
    
    'percorrer a colecao de parcelas a pagar
    For Each objInfoParcPag In objChequesPagAvulso.colInfoParcPag

        'pular parcelas com iseqcheque = 0
        If objInfoParcPag.iSeqCheque <> 0 Then

            'criar objeto com info p/baixa e coloca-lo numa colecao
            Set objBaixaParcPagar = objColBaixaParcPagar.Add(0, lNumIntBaixa, objInfoParcPag.lNumIntParc, 0, _
                objInfoParcPag.dValorMulta, objInfoParcPag.dValorJuros, objInfoParcPag.dValorDesconto, _
                objInfoParcPag.dValor, STATUS_LANCADO)

        End If

    Next
    
    'se nao for um cheque pre-datado
    If objChequesPagAvulso.dtBomPara = DATA_NULA Then
        
        'montar objMovContaCorrente
        objMovContaCorrente.dtDataContabil = objChequesPagAvulso.dtContabil
        objMovContaCorrente.dtDataMovimento = objChequesPagAvulso.dtEmissao
        objMovContaCorrente.dValor = objChequesPagAvulso.objInfoChequePag.dValor
        objMovContaCorrente.iCodConta = objChequesPagAvulso.iCta
        objMovContaCorrente.iConciliado = NAO_CONCILIADO
        objMovContaCorrente.iExcluido = 0
        objMovContaCorrente.iFavorecido = 0
        objMovContaCorrente.iFilialEmpresa = objChequesPagAvulso.iFilialEmpresaCta
        objMovContaCorrente.iPortador = objChequesPagAvulso.objInfoChequePag.iPortador
        objMovContaCorrente.iTipo = MOVCCI_PAGTO_TITULO_POR_CHEQUE
        objMovContaCorrente.iTipoMeioPagto = Cheque
        objMovContaCorrente.lNumero = objChequesPagAvulso.objInfoChequePag.lNumRealCheque
        objMovContaCorrente.lNumMovto = 0
        objMovContaCorrente.lNumRefInterna = 0
        objMovContaCorrente.lSequencial = 0
        objMovContaCorrente.sHistorico = ""
        objMovContaCorrente.sNumRefExterna = ""
        
        lErro = CF("BaixaPagar_Grava_Pagamento1", objChequesPagAvulso, objColBaixaParcPagar, objMovContaCorrente, objContabAutomatica, objChequesPagAvulso.objEvolucao)
        If lErro <> SUCESSO And lErro <> 26427 Then Error 7418
        
        If lErro = 26427 Then Error 30627
        
        lComando = Comando_Abrir()
        If lComando = 0 Then Error 32003
        
        '########################################
        'Alterado por Wagner
        lErro = Comando_Executar(lComando, "INSERT INTO ChequesDet ( NumMovto, EmNomeDeQuem, Observacao, Usuario ) VALUES (?,?,?,?)", objMovContaCorrente.lNumMovto, objChequesPagAvulso.objInfoChequePag.sFavorecido, objChequesPagAvulso.objInfoChequePag.sObservacao, gsUsuario)
        If lErro <> SUCESSO Then Error 32004
        '########################################
    
        Call Comando_Fechar(lComando)
    
    Else 'gravar cheque-pre
    
        lErro = ChequesPagAvulso_GravarChequePre(objChequesPagAvulso)
        If lErro <> SUCESSO Then Error 32159
        
        If gobjCP.iContabSemDet = 1 And Not (objContabAutomatica Is Nothing) Then
        
            Set objChequesPagAvulso.objColBaixaParcPagar = objColBaixaParcPagar
            
            objChequesPagAvulso.dValorBaixado = 0
            objChequesPagAvulso.dValorDesconto = 0
            objChequesPagAvulso.dValorJuros = 0
            objChequesPagAvulso.dValorMulta = 0
            For Each objBaixaParcPagar In objColBaixaParcPagar
                objChequesPagAvulso.dValorBaixado = objChequesPagAvulso.dValorBaixado + objBaixaParcPagar.dValorBaixado
                objChequesPagAvulso.dValorDesconto = objChequesPagAvulso.dValorDesconto + objBaixaParcPagar.dValorDesconto
                objChequesPagAvulso.dValorJuros = objChequesPagAvulso.dValorJuros + objBaixaParcPagar.dValorJuros
                objChequesPagAvulso.dValorMulta = objChequesPagAvulso.dValorMulta + objBaixaParcPagar.dValorMulta
            Next
        
            lErro = objContabAutomatica.GeraContabilizacao(Nothing, Nothing, Nothing, Nothing)
            If lErro <> SUCESSO Then Error 32257
            
        End If
    
    End If
    
    If (gcolModulo.Ativo(MODULO_CONTABILIDADE) = MODULO_ATIVO) Then
    
        lErro = objContabAutomatica.Finaliza_Contab
        If lErro <> SUCESSO Then Error 32159
        
    End If
    
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 7419
    
    ChequesPagAvulso_AtualizarBD = SUCESSO
    
    Exit Function
    
Erro_ChequesPagAvulso_AtualizarBD:

    ChequesPagAvulso_AtualizarBD = Err

    Select Case Err
        
        Case 32003
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 32004
            Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEDET_GRAVACAO", Err)
        
        Case 7417
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
        
        Case 7418, 30627, 32158, 32159
        
        Case 7419
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148000)

    End Select
    
    Call Transacao_Rollback
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function BaixaPagar_Grava_Pagamento_Transacao(ByVal colBaixaParcPagar As colBaixaParcPagar, ByVal objMovContaCorrente As ClassMovContaCorrente, ByVal objContabil As ClassContabil, ByVal lFornecedor As Long, ByVal iFilial As Integer) As Long
'Insere BaixaPagar e MovimentoContaCorrente e BaixasParcelaPagar correspondentes no BD
'Atributos de MovimentoContaCorrente preenchidos com exceção de:
'Excluido, NumMovto e Sequencial (serão gerados automaticamente)

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_BaixaPagar_Grava_Pagamento_Transacao
    
    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 6782
    
    lErro = CF("BaixaPagar_Grava_Pagamento", colBaixaParcPagar, objMovContaCorrente, objContabil, lFornecedor, iFilial)
    If lErro <> SUCESSO Then Error 7436
    
    'Confirma a Transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 6785
     
    BaixaPagar_Grava_Pagamento_Transacao = SUCESSO
    
    Exit Function
    
Erro_BaixaPagar_Grava_Pagamento_Transacao:

    BaixaPagar_Grava_Pagamento_Transacao = Err
    
    Select Case Err

        Case 6782
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
    
        Case 7436  'Já tratado
        
        Case 6785
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148001)

    End Select

    Call Transacao_Rollback
    
    Exit Function

End Function

Function BaixaPagar_Grava_Pagamento(ByVal colBaixaParcPagar As colBaixaParcPagar, ByVal objMovContaCorrente As ClassMovContaCorrente, ByVal objContabil As ClassContabil, ByVal lFornecedor As Long, ByVal iFilial As Integer) As Long
'Insere BaixaPagar e MovimentoContaCorrente e BaixasParcelaPagar correspondentes no BD
'Atributos de MovimentoContaCorrente preenchidos com exceção de:
'Excluido, NumMovto e Sequencial (serão gerados automaticamente)

Dim lErro As Long
Dim objBaixaPagar As New ClassBaixaPagar

On Error GoTo Erro_BaixaPagar_Grava_Pagamento
        
'Jones 11/09/00: passei a testar na propria telad e baixa, cheque ou bordero
'''    'Verifica se o Título a pagar possui um Adiantamento vinculado ao Fornecedor
'''    lErro = CF("TituloPagar_Verifica_Adiantamento",lFornecedor, iFilial)
'''    If lErro <> SUCESSO Then gError 75480
    
    'Grava o Pagamento no BD
    lErro = MovCCI_Grava_Pagamento(objMovContaCorrente)
    If lErro <> SUCESSO Then gError 6783
        
    'Inicializa BaixaPagar
    objBaixaPagar.iStatus = STATUS_LANCADO
    objBaixaPagar.iMotivo = MOTIVO_PAGAMENTO
    objBaixaPagar.dtData = objMovContaCorrente.dtDataMovimento
    objBaixaPagar.dtDataContabil = objMovContaCorrente.dtDataContabil
    objBaixaPagar.dtDataRegistro = gdtDataHoje
    objBaixaPagar.lNumMovConta = objMovContaCorrente.lNumMovto
    objBaixaPagar.sHistorico = "pagto conta " & CStr(objMovContaCorrente.iCodConta) & " sequencial: " & CStr(objMovContaCorrente.lSequencial)
    
    'Grava BaixaPagar e BaixasPagarParcela associadas
    lErro = CF("BaixaPagar_Grava", objBaixaPagar, colBaixaParcPagar, objContabil, lFornecedor, iFilial)
    If lErro <> SUCESSO Then gError 6784
    
    BaixaPagar_Grava_Pagamento = SUCESSO
    
    Exit Function
    
Erro_BaixaPagar_Grava_Pagamento:

    BaixaPagar_Grava_Pagamento = gErr
    
        Select Case gErr

        Case 6783, 6784, 75480 'Já tratados
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148002)

    End Select

    Exit Function

End Function

Function BaixaPagar_Grava_Pagamento1(ByVal objPagEmissao As Object, ByVal colBaixaParcPagar As colBaixaParcPagar, ByVal objMovContaCorrente As ClassMovContaCorrente, ByVal objContabAutomatica As ClassContabAutomatica, Optional ByVal objEvolucao As Object) As Long
'Insere BaixaPagar e MovimentoContaCorrente e BaixasParcelaPagar correspondentes no BD
'Atributos de MovimentoContaCorrente preenchidos com exceção de:
'Excluido, NumMovto e Sequencial (serão gerados automaticamente)

Dim lErro As Long
Dim objBaixaPagar As New ClassBaixaPagar

On Error GoTo Erro_BaixaPagar_Grava_Pagamento1
    
    'Grava o Pagamento no BD
    lErro = MovCCI_Grava_Pagamento(objMovContaCorrente)
    If lErro <> SUCESSO Then Error 6783
        
    'Inicializa BaixaPagar
    objBaixaPagar.iStatus = STATUS_LANCADO
    objBaixaPagar.iMotivo = MOTIVO_PAGAMENTO
    objBaixaPagar.dtData = objMovContaCorrente.dtDataMovimento
    objBaixaPagar.dtDataContabil = objMovContaCorrente.dtDataContabil
    objBaixaPagar.dtDataRegistro = gdtDataHoje
    objBaixaPagar.lNumMovConta = objMovContaCorrente.lNumMovto
    objBaixaPagar.sHistorico = "pagto conta " & CStr(objMovContaCorrente.iCodConta) & " sequencial: " & CStr(objMovContaCorrente.lSequencial)
    
    'Grava BaixaPagar e BaixasPagarParcela associadas
    lErro = CF("BaixaPagar_Grava1", objBaixaPagar, colBaixaParcPagar, objContabAutomatica, objEvolucao)
    If lErro <> SUCESSO And lErro <> 26426 Then Error 6784
    
    If lErro = 26426 Then Error 26427
    
    If gobjCP.iContabSemDet = 1 And Not (objContabAutomatica Is Nothing) Then
    
        'atualiza em objPagEmissao informacoes p/contabilizacao
        Call BaixasPag_GeraAuxCtb(objPagEmissao, objBaixaPagar, colBaixaParcPagar)
        
        lErro = objContabAutomatica.GeraContabilizacao(Nothing, Nothing, Nothing, objBaixaPagar)
        If lErro <> SUCESSO Then Error 32257
        
    End If
    
    BaixaPagar_Grava_Pagamento1 = SUCESSO
    
    Exit Function
    
Erro_BaixaPagar_Grava_Pagamento1:

    BaixaPagar_Grava_Pagamento1 = Err
    
        Select Case Err

        Case 6783, 6784, 26427, 32257  'Já tratados
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148003)

    End Select

    Exit Function

End Function

Function MovCCI_Grava_Pagamento(ByVal objMovContaCorrente As ClassMovContaCorrente) As Long
'Grava o pagamento no BD
'ATENÇÃO: Chamada DENTRO de uma Transação
Dim lErro As Long

On Error GoTo Erro_MovCCI_Grava_Pagamento

    lErro = CF("MovCCI_Grava_PagRec", objMovContaCorrente)
    If lErro <> SUCESSO Then Error 7708
    
    MovCCI_Grava_Pagamento = SUCESSO

    Exit Function

Erro_MovCCI_Grava_Pagamento:

    MovCCI_Grava_Pagamento = Err

    Select Case Err

        Case 7708
           
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148004)

    End Select

    Exit Function

End Function

Private Function BaixasParcelaRec_Grava2(lComandoParcSel As Long, lComandoParcMod As Long, lComandoParcDel As Long, lComandoParcIns As Long, lComandoBaixaParc As Long, lComandoTitSel As Long, lComandoTitMod As Long, lComandoTitDel As Long, lComandoTitIns As Long, lComandoNFsSel As Long, lComandoNFsDel As Long, lComandoNFsIns As Long, lComandoOutrasParcSel As Long, lComandoOutrasParcDel As Long, lComandoOutrasParcIns As Long, lComandoSelCom As Long, lComandoModCom As Long) As Long
'auxiliar a BaixasParcelaRec_Grava. Abre os comandos
Dim lErro As Long
On Error GoTo Erro_BaixasParcelaRec_Grava2

    lComandoParcSel = Comando_Abrir()
    If lComandoParcSel = 0 Then Error 7452

    lComandoParcMod = Comando_Abrir()
    If lComandoParcMod = 0 Then Error 7453

    lComandoParcDel = Comando_Abrir()
    If lComandoParcDel = 0 Then Error 7454

    lComandoParcIns = Comando_Abrir()
    If lComandoParcIns = 0 Then Error 7455

    lComandoBaixaParc = Comando_Abrir()
    If lComandoBaixaParc = 0 Then Error 7456

    lComandoTitSel = Comando_Abrir()
    If lComandoTitSel = 0 Then Error 7457

    lComandoTitMod = Comando_Abrir()
    If lComandoTitSel = 0 Then Error 7458

    lComandoTitDel = Comando_Abrir()
    If lComandoTitDel = 0 Then Error 7459

    lComandoTitIns = Comando_Abrir()
    If lComandoTitIns = 0 Then Error 7460

    lComandoNFsSel = Comando_Abrir()
    If lComandoNFsSel = 0 Then Error 7461

    lComandoNFsDel = Comando_Abrir()
    If lComandoNFsDel = 0 Then Error 7462

    lComandoNFsIns = Comando_Abrir()
    If lComandoNFsIns = 0 Then Error 7463

    lComandoOutrasParcSel = Comando_Abrir()
    If lComandoOutrasParcSel = 0 Then Error 7464

    lComandoOutrasParcDel = Comando_Abrir()
    If lComandoOutrasParcDel = 0 Then Error 7465

    lComandoOutrasParcIns = Comando_Abrir()
    If lComandoOutrasParcIns = 0 Then Error 7466

    lComandoSelCom = Comando_Abrir()
    If lComandoSelCom = 0 Then Error 19459

    lComandoModCom = Comando_Abrir()
    If lComandoModCom = 0 Then Error 19460

    BaixasParcelaRec_Grava2 = SUCESSO

    Exit Function

Erro_BaixasParcelaRec_Grava2:

    BaixasParcelaRec_Grava2 = Err

    Select Case Err

        Case 7452 To 7466
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148005)

    End Select

    Exit Function

End Function

Private Function BaixasParcelaRec_Grava3(lComandoParcSel As Long, lComandoParcMod As Long, lComandoParcDel As Long, lComandoParcIns As Long, lComandoBaixaParc As Long, lComandoTitSel As Long, lComandoTitMod As Long, lComandoTitDel As Long, lComandoTitIns As Long, lComandoNFsSel As Long, lComandoNFsDel As Long, lComandoNFsIns As Long, lComandoOutrasParcSel As Long, lComandoOutrasParcDel As Long, lComandoOutrasParcIns As Long, lComandoSelCom As Long, lComandoModCom As Long) As Long
'auxiliar a BaixasParcelaRec_Grava. Fecha os comandos abertos
Dim lErro As Long

On Error GoTo Erro_BaixasParcelaRec_Grava3

    lErro = Comando_Fechar(lComandoParcSel)
    lErro = Comando_Fechar(lComandoParcMod)
    lErro = Comando_Fechar(lComandoParcDel)
    lErro = Comando_Fechar(lComandoParcIns)
    lErro = Comando_Fechar(lComandoBaixaParc)
    lErro = Comando_Fechar(lComandoTitSel)
    lErro = Comando_Fechar(lComandoTitMod)
    lErro = Comando_Fechar(lComandoTitDel)
    lErro = Comando_Fechar(lComandoTitIns)
    lErro = Comando_Fechar(lComandoNFsSel)
    lErro = Comando_Fechar(lComandoNFsDel)
    lErro = Comando_Fechar(lComandoNFsIns)
    lErro = Comando_Fechar(lComandoOutrasParcSel)
    lErro = Comando_Fechar(lComandoOutrasParcDel)
    lErro = Comando_Fechar(lComandoOutrasParcIns)
    lErro = Comando_Fechar(lComandoSelCom)
    lErro = Comando_Fechar(lComandoModCom)

    BaixasParcelaRec_Grava3 = SUCESSO

    Exit Function

Erro_BaixasParcelaRec_Grava3:

    BaixasParcelaRec_Grava3 = Err

    Select Case Err

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148006)

    End Select

    Exit Function

End Function

Function BaixasParcelaRec_Grava(ByVal objBaixaReceber As ClassBaixaReceber, ByVal colBaixaParcRec As colBaixaParcRec, ByVal objContabAutomatica As ClassContabAutomatica, Optional ByVal objEvolucao As Object) As Long
'TEM QUE SER CHAMADA DENTRO DE TRANSACAO

Dim lErro As Long
Dim objTituloRec As New ClassTituloReceber
Dim objParcelaRec As New ClassParcelaReceber
Dim objBaixaParcRec As New ClassBaixaParcRec
Dim lComandoBaixaParc As Long
Dim lComandoTitSel As Long, lComandoTitMod As Long, lComandoTitDel As Long, lComandoTitIns As Long
Dim lComandoParcSel As Long, lComandoParcMod As Long, lComandoParcDel As Long, lComandoParcIns As Long
Dim lComandoOutrasParcSel As Long, lComandoOutrasParcDel As Long, lComandoOutrasParcIns As Long
Dim lComandoNFsSel As Long, lComandoNFsDel As Long, lComandoNFsIns As Long, lComandoSelCom As Long, lComandoModCom As Long
Dim objCarteiraCobrador As New ClassCarteiraCobrador, dValBaixaPorPerda As Double
Dim objTipoDocumento As New ClassTipoDocumento
Dim dSaldoAnterior As Double 'Inserido por Wagner
Dim colChequesPre As Collection 'Inserido por Wagner

On Error GoTo Erro_BaixasParcelaRec_Grava

    'abrir comandos
    lErro = BaixasParcelaRec_Grava2(lComandoParcSel, lComandoParcMod, lComandoParcDel, lComandoParcIns, lComandoBaixaParc, lComandoTitSel, lComandoTitMod, lComandoTitDel, lComandoTitIns, lComandoNFsSel, lComandoNFsDel, lComandoNFsIns, lComandoOutrasParcSel, lComandoOutrasParcDel, lComandoOutrasParcIns, lComandoSelCom, lComandoModCom)
    If lErro <> SUCESSO Then gError 7467

    For Each objBaixaParcRec In colBaixaParcRec

        'ler a parcela
        objParcelaRec.lNumIntDoc = objBaixaParcRec.lNumIntParcela
        lErro = CF("ParcelaRec_LeMod", objParcelaRec, lComandoParcSel)
        If lErro <> SUCESSO Then gError 7468

        'fazer o lock exclusivo
        lErro = Comando_LockExclusive(lComandoParcSel)
        If lErro <> AD_SQL_SUCESSO Then gError 7469

        'verificar se a parcela esta em condicoes de ser baixada
        If objParcelaRec.iStatus <> STATUS_ABERTO Then gError 7470

'        Select Case objBaixaReceber.iMotivo
'
'            Case MOTIVO_DEBITO_CLIENTE, MOTIVO_RECEBTO_ANTECIPADO, MOTIVO_PERDA
'                If objParcelaRec.iCobrador <> COBRADOR_PROPRIA_EMPRESA Or (objParcelaRec.iCarteiraCobranca <> CARTEIRA_CARTEIRA And objParcelaRec.iCarteiraCobranca <> CARTEIRA_CHEQUEPRE) Then gError 59185
'
'        End Select

        objBaixaParcRec.iSequencial = objParcelaRec.iProxSeqBaixa
        objParcelaRec.iProxSeqBaixa = objParcelaRec.iProxSeqBaixa + 1
        
        '################################################
        'Alterado por Wagner
        'ANTIGO
        'objParcelaRec.dSaldo = objParcelaRec.dSaldo - objBaixaParcRec.dValorBaixado
        'If objParcelaRec.dSaldo < DELTA_VALORMONETARIO Then objParcelaRec.dSaldo = 0
        'NOVO
        dSaldoAnterior = objParcelaRec.dSaldo

        objParcelaRec.dSaldo = objParcelaRec.dSaldo - objBaixaParcRec.dValorBaixado

        'Se for baixar mais que o saldo zera o saldo e baixa só o que tem
        If objParcelaRec.dSaldo < DELTA_VALORMONETARIO Then
            objBaixaParcRec.dValorBaixado = dSaldoAnterior
            objParcelaRec.dSaldo = 0
        End If
        '################################################
        objCarteiraCobrador.iCobrador = objParcelaRec.iCobrador
        objCarteiraCobrador.iCodCarteiraCobranca = objParcelaRec.iCarteiraCobranca
        
        'se a baixa se deve ao deposito de um cheque pré-datado
        If objParcelaRec.iCobrador = COBRADOR_PROPRIA_EMPRESA And objParcelaRec.iCarteiraCobranca = CARTEIRA_CHEQUEPRE Then
            
            '##############################################################
            'Alterado por Wagner 13/03/2006
            Set colChequesPre = New Collection
            
            lErro = CF("ParcelaRec_Le_ChequesPre", objParcelaRec, colChequesPre)
            If lErro <> SUCESSO Then gError 141933
            
            'Só altera a carteira se não existirem mais cheques pré
            If colChequesPre.Count = 0 Then
                objParcelaRec.iCarteiraCobranca = CARTEIRA_CARTEIRA
            End If
            'obs.: se esta baixa for desfeita a parcela passará a estar "em carteira"
            '##############################################################

        End If
        
        If objParcelaRec.dSaldo = 0 Then
            
            objParcelaRec.iStatus = STATUS_BAIXADO
            
            If objBaixaReceber.iMotivo <> MOTIVO_PERDA Then
        
                dValBaixaPorPerda = 0
                
                'se a parcela nao esta sendo paga de uma unica vez
                If objBaixaParcRec.dValorBaixado <> objParcelaRec.dValor Then
                
                    'verificar se houve baixa por motivo PERDA
                    lErro = ParcelaRec_ValBaixaPorPerda(objParcelaRec.lNumIntDoc, dValBaixaPorPerda)
                    If lErro <> SUCESSO Then gError 19457
                    
                End If
                
                'se nao houve baixa por perda
                If dValBaixaPorPerda = 0 Then
                
                    lErro = BaixaParcRec_LiberaComissoes(objBaixaParcRec, objBaixaReceber.dtData, lComandoSelCom, lComandoModCom)
                    If lErro <> SUCESSO Then gError 19458
                    
                End If
                
            End If
            
        End If
            
        'Inserir registro em BaixasParcRec
        lErro = BaixaParcRec_Inserir(objBaixaParcRec, lComandoBaixaParc)
        If lErro <> SUCESSO Then gError 7471

        'Selecionar titulo
        objTituloRec.lNumIntDoc = objParcelaRec.lNumIntTitulo
        lErro = TitulosRec_LeMod(objTituloRec, lComandoTitSel)
        If lErro <> SUCESSO Then gError 7471

        'fazer o lock exclusivo no titulo
        lErro = Comando_LockExclusive(lComandoTitSel)
        If lErro <> AD_SQL_SUCESSO Then gError 7472

        objTituloRec.dSaldo = objTituloRec.dSaldo - objBaixaParcRec.dValorBaixado
        If objTituloRec.dSaldo < DELTA_VALORMONETARIO Then objTituloRec.dSaldo = 0

        lErro = CF("BaixasParcelaRec_Grava_Customizado", objTituloRec, objParcelaRec, objBaixaParcRec)
        If lErro <> SUCESSO Then gError 192307

        'Se o saldo do titulo ( apos a baixa da parcela ) for zero
        If objTituloRec.dSaldo = 0 Then

            objTituloRec.iStatus = STATUS_BAIXADO
            
            'incluir titulo na tabela TitulosRecBaixados
            lErro = TitulosRecBaixados_Inserir(objTituloRec, lComandoTitIns)
            If lErro <> SUCESSO Then gError 7473

            objTipoDocumento.sSigla = objTituloRec.sSiglaDocumento
            
            lErro = CF("TipoDocumento_Le", objTipoDocumento)
            If lErro <> SUCESSO And lErro <> 17078 Then gError 29154
            If lErro = 17078 Then gError 29131
            
            'se o titulo tem outras parcelas (baixadas anteriormente)
            If objTituloRec.iNumParcelas <> 1 Then
                'Transferir as outras parcelas p/parcelas baixadas (verificando se estao mesmo baixadas)
                lErro = ParcelasRec_BaixarOutras(objTituloRec.lNumIntDoc, objBaixaParcRec.lNumIntParcela, lComandoOutrasParcSel, lComandoOutrasParcDel, lComandoOutrasParcIns)
                If lErro <> SUCESSO Then gError 7475
            End If

            'transferir a parcela que está sendo baixada agora

            'fazer o delete da tabela ParcelasRec
            lErro = ParcelaRec_Excluir(objParcelaRec, lComandoParcSel, lComandoParcDel)
            If lErro <> SUCESSO Then gError 7476

            'fazer o insert em ParcelasRecBaixadas
            lErro = ParcelasRecBaixadas_Inserir(objParcelaRec, lComandoParcIns)
            If lErro <> SUCESSO Then gError 7477

            'diminuir qtde e saldo da parcela da carteira onde estava
            lErro = CF("CarteiraCobrador_AtualizaSaldo", objCarteiraCobrador, -1, -objBaixaParcRec.dValorBaixado)
            If lErro <> SUCESSO Then gError 15996
        
            objTituloRec.iStatus = STATUS_BAIXADO

            'excluir titulo da tabela TitulosRec
            lErro = TitulosRec_Excluir(objTituloRec, lComandoTitSel, lComandoTitDel)
            If lErro <> SUCESSO Then gError 7478

        Else
            'Atualizar ParcelasRec: ProxSeqBaixa , Saldo e Status (a parcela pode ter sido baixada apesar do titulo nao)
            lErro = ParcelaRec_Modificar_BaixaParcial(objParcelaRec, lComandoParcMod, lComandoParcSel)
            If lErro <> SUCESSO Then gError 7479

            'diminuir saldo da parcela da carteira onde estava
            'só pode diminuir a qtde se a parcela foi totalmente baixada pois caso contrario continua na carteira onde estava, apenas com um valor menor
            lErro = CF("CarteiraCobrador_AtualizaSaldo", objCarteiraCobrador, IIf(objParcelaRec.iStatus = STATUS_BAIXADO, -1, 0), -objBaixaParcRec.dValorBaixado)
            If lErro <> SUCESSO Then gError 18958
            
            'Atualizar TitulosRec (saldo)
            lErro = TitulosRec_Modificar_BaixaParcial(objTituloRec, lComandoTitMod, lComandoTitSel)
            If lErro <> SUCESSO Then gError 7480
        End If

        'Desfazer lock exclusivo do titulo
        lErro = Comando_Unlock(lComandoTitSel)
        If lErro <> AD_SQL_SUCESSO Then gError 7481

        'Desfazer lock exclusivo da parcela
        lErro = Comando_Unlock(lComandoParcSel)
        If lErro <> AD_SQL_SUCESSO Then gError 7482

        'contabilizacao automatica da baixa da parcela
        If gobjCR.iContabSemDet = 0 And Not (objContabAutomatica Is Nothing) Then
        
            lErro = objContabAutomatica.GeraContabilizacao(objBaixaParcRec, objParcelaRec, objTituloRec, Nothing)
            If lErro <> SUCESSO Then gError 32214
            
        End If
            
        If Not (objEvolucao Is Nothing) Then

            lErro = Evolucao_BaixasParcRec(objEvolucao, 1)
            If lErro <> SUCESSO And lErro <> 59180 Then gError 59181
            
            If lErro = 59180 Then gError 59182

        End If
    
    Next

    'fechar comandos
    lErro = BaixasParcelaRec_Grava3(lComandoParcSel, lComandoParcMod, lComandoParcDel, lComandoParcIns, lComandoBaixaParc, lComandoTitSel, lComandoTitMod, lComandoTitDel, lComandoTitIns, lComandoNFsSel, lComandoNFsDel, lComandoNFsIns, lComandoOutrasParcSel, lComandoOutrasParcDel, lComandoOutrasParcIns, lComandoSelCom, lComandoModCom)
    If lErro <> SUCESSO Then gError 7483

    BaixasParcelaRec_Grava = SUCESSO

    Exit Function

Erro_BaixasParcelaRec_Grava:

    BaixasParcelaRec_Grava = gErr

    Select Case gErr
        Case 7467, 7468, 7471, 7473 To 7480, 7483, 15996, 18958, 32214, 192307
        
        Case 7469
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_PARCELAS_REC", gErr)

        Case 7472
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_TITULOS_REC", gErr)

        Case 7481
            Call Rotina_Erro(vbOKOnly, "ERRO_UNLOCK_TITULOS_REC", gErr)

        Case 7482
            Call Rotina_Erro(vbOKOnly, "ERRO_UNLOCK_PARCELAS_REC", gErr)

        Case 7470
            Call Rotina_Erro(vbOKOnly, "ERRO_PARCELA_REC_NAO_ABERTA", gErr, objParcelaRec.lNumIntDoc)

        Case 29131
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPO_DOCUMENTO_NAO_CADASTRADO1", gErr, objTipoDocumento.sSigla)
        
        Case 29154, 19457, 19458, 59181, 59182

        Case 59185
            Call Rotina_Erro(vbOKOnly, "ERRO_BAIXAREC_COBR_CART", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148007)

    End Select

    'fechar comandos
    lErro = BaixasParcelaRec_Grava3(lComandoParcSel, lComandoParcMod, lComandoParcDel, lComandoParcIns, lComandoBaixaParc, lComandoTitSel, lComandoTitMod, lComandoTitDel, lComandoTitIns, lComandoNFsSel, lComandoNFsDel, lComandoNFsIns, lComandoOutrasParcSel, lComandoOutrasParcDel, lComandoOutrasParcIns, lComandoSelCom, lComandoModCom)

    Exit Function

End Function

Private Sub ParcelaRec_MoverCamposObj(ByVal objParcelaRec As ClassParcelaReceber, tParcelaReceber As typeParcelaReceber)

    objParcelaRec.lNumIntDoc = tParcelaReceber.lNumIntDoc
    objParcelaRec.lNumIntTitulo = tParcelaReceber.lNumIntTitulo
    objParcelaRec.iNumParcela = tParcelaReceber.iNumParcela
    objParcelaRec.iStatus = tParcelaReceber.iStatus
    objParcelaRec.dtDataVencimento = tParcelaReceber.dtDataVencimento
    objParcelaRec.dtDataVencimentoReal = tParcelaReceber.dtDataVencimentoReal
    objParcelaRec.dSaldo = tParcelaReceber.dSaldo
    objParcelaRec.dValor = tParcelaReceber.dValor
    objParcelaRec.iCobrador = tParcelaReceber.iCobrador
    objParcelaRec.iCarteiraCobranca = tParcelaReceber.iCarteiraCobranca
    objParcelaRec.sNumTitCobrador = tParcelaReceber.sNumTitCobrador
    objParcelaRec.iProxSeqBaixa = tParcelaReceber.iProxSeqBaixa
    objParcelaRec.iProxSeqOcorr = tParcelaReceber.iProxSeqOcorr
    objParcelaRec.iDesconto1Codigo = tParcelaReceber.iDesconto1Codigo
    objParcelaRec.dtDesconto1Ate = tParcelaReceber.dtDesconto1Ate
    objParcelaRec.dDesconto1Valor = tParcelaReceber.dDesconto1Valor
    objParcelaRec.iDesconto2Codigo = tParcelaReceber.iDesconto2Codigo
    objParcelaRec.dtDesconto2Ate = tParcelaReceber.dtDesconto2Ate
    objParcelaRec.dDesconto2Valor = tParcelaReceber.dDesconto2Valor
    objParcelaRec.iDesconto3Codigo = tParcelaReceber.iDesconto3Codigo
    objParcelaRec.dtDesconto3Ate = tParcelaReceber.dtDesconto3Ate
    objParcelaRec.dDesconto3Valor = tParcelaReceber.dDesconto3Valor
    objParcelaRec.iAceite = tParcelaReceber.iAceite
    objParcelaRec.iDescontada = tParcelaReceber.iDescontada
    objParcelaRec.dValorOriginal = tParcelaReceber.dValorOriginal
    objParcelaRec.sObservacao = tParcelaReceber.sObservacao
    objParcelaRec.iPrevisao = tParcelaReceber.iPrevisao
    objParcelaRec.iTipoPagto = tParcelaReceber.iTipoPagto
    objParcelaRec.iCodConta = tParcelaReceber.iCodConta
    objParcelaRec.dtDataCredito = tParcelaReceber.dtDataCredito
    objParcelaRec.dtDataEmissaoCheque = tParcelaReceber.dtDataEmissaoCheque
    objParcelaRec.iBancoCheque = tParcelaReceber.iBancoCheque
    objParcelaRec.sAgenciaCheque = tParcelaReceber.sAgenciaCheque
    objParcelaRec.sContaCorrenteCheque = tParcelaReceber.sContaCorrenteCheque
    objParcelaRec.lNumeroCheque = tParcelaReceber.lNumeroCheque
    objParcelaRec.dtDataDepositoCheque = tParcelaReceber.dtDataDepositoCheque
    objParcelaRec.iAdmMeioPagto = tParcelaReceber.iAdmMeioPagto
    objParcelaRec.iParcelamento = tParcelaReceber.iParcelamento
    objParcelaRec.sNumeroCartao = tParcelaReceber.sNumeroCartao
    objParcelaRec.dtValidadeCartao = tParcelaReceber.dtValidadeCartao
    objParcelaRec.sAprovacaoCartao = tParcelaReceber.sAprovacaoCartao
    objParcelaRec.dtDataTransacaoCartao = tParcelaReceber.dtDataTransacaoCartao
    
End Sub

Function ParcelaRec_LeMod(ByVal objParcelaRec As ClassParcelaReceber, ByVal lComando As Long) As Long
'faz a leitura de um registro da tabela ParcelasRec p/objParcelaRec c/ExecutarPos
'objParcelaRec.lNumIntDoc entra preenchido
'TEM QUE SER CHAMADO EM TRANSACAO

Dim lErro As Long
Dim tParcelaReceber As typeParcelaReceber

On Error GoTo Erro_ParcelaRec_LeMod

    tParcelaReceber.sNumTitCobrador = String(STRING_NOSSO_NUMERO, 0)
    tParcelaReceber.sObservacao = String(STRING_OBS_PARC_REC, 0)
    tParcelaReceber.sAgenciaCheque = String(STRING_AGENCIA, 0)
    tParcelaReceber.sAprovacaoCartao = String(STRING_APROVACAO_CARTAO, 0)
    tParcelaReceber.sContaCorrenteCheque = String(STRING_CONTA_CORRENTE, 0)
    tParcelaReceber.sNumeroCartao = String(STRING_NUMERO_CARTAO, 0)

    lErro = Comando_ExecutarPos(lComando, "SELECT NumIntTitulo, NumParcela, Status, DataVencimento, DataVencimentoReal, Saldo, Valor, " & _
    "Cobrador, CarteiraCobranca, NumTitCobrador, ProxSeqBaixa, ProxSeqOcorr, " & _
    "Desconto1Codigo, Desconto1Ate, Desconto1Valor, Desconto2Codigo, Desconto2Ate, Desconto2Valor, " & _
    "Desconto3Codigo , Desconto3Ate, Desconto3Valor, Aceite, Descontada, ValorOriginal, Observacao, Previsao, TipoPagto, CodConta, DataCredito, DataEmissaoCheque, BancoCheque, AgenciaCheque, ContaCorrenteCheque, NumeroCheque, DataDepositoCheque, AdmMeioPagto, Parcelamento, NumeroCartao, ValidadeCartao, AprovacaoCartao, DataTransacaoCartao " & _
    "FROM ParcelasRec WHERE ParcelasRec.NumIntDoc = ?", 0, _
    tParcelaReceber.lNumIntTitulo, tParcelaReceber.iNumParcela, tParcelaReceber.iStatus, tParcelaReceber.dtDataVencimento, tParcelaReceber.dtDataVencimentoReal, tParcelaReceber.dSaldo, tParcelaReceber.dValor, _
    tParcelaReceber.iCobrador, tParcelaReceber.iCarteiraCobranca, tParcelaReceber.sNumTitCobrador, tParcelaReceber.iProxSeqBaixa, tParcelaReceber.iProxSeqOcorr, _
    tParcelaReceber.iDesconto1Codigo, tParcelaReceber.dtDesconto1Ate, tParcelaReceber.dDesconto1Valor, tParcelaReceber.iDesconto2Codigo, tParcelaReceber.dtDesconto2Ate, tParcelaReceber.dDesconto2Valor, _
    tParcelaReceber.iDesconto3Codigo, tParcelaReceber.dtDesconto3Ate, tParcelaReceber.dDesconto3Valor, tParcelaReceber.iAceite, tParcelaReceber.iDescontada, tParcelaReceber.dValorOriginal, tParcelaReceber.sObservacao, tParcelaReceber.iPrevisao, tParcelaReceber.iTipoPagto, tParcelaReceber.iCodConta, tParcelaReceber.dtDataCredito, tParcelaReceber.dtDataEmissaoCheque, tParcelaReceber.iBancoCheque, tParcelaReceber.sAgenciaCheque, tParcelaReceber.sContaCorrenteCheque, tParcelaReceber.lNumeroCheque, tParcelaReceber.dtDataDepositoCheque, tParcelaReceber.iAdmMeioPagto, tParcelaReceber.iParcelamento, tParcelaReceber.sNumeroCartao, tParcelaReceber.dtValidadeCartao, tParcelaReceber.sAprovacaoCartao, tParcelaReceber.dtDataTransacaoCartao, objParcelaRec.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then Error 7484

    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7485

    If lErro <> AD_SQL_SUCESSO Then Error 7486
    
    tParcelaReceber.lNumIntDoc = objParcelaRec.lNumIntDoc
    Call ParcelaRec_MoverCamposObj(objParcelaRec, tParcelaReceber)

    ParcelaRec_LeMod = SUCESSO

    Exit Function

Erro_ParcelaRec_LeMod:

    ParcelaRec_LeMod = Err

    Select Case Err

        Case 7484, 7485
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_REC", Err)

        Case 7486 'parcela nao encontrada
            Call Rotina_Erro(vbOKOnly, "ERRO_PARCELA_REC_INEXISTENTE", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148008)

    End Select

    Exit Function

End Function

Private Sub TituloRec_MoverCamposObj(ByVal objTituloRec As ClassTituloReceber, tTituloRec As typeTituloReceber)

    objTituloRec.lNumIntDoc = tTituloRec.lNumIntDoc
    objTituloRec.iFilialEmpresa = tTituloRec.iFilialEmpresa
    objTituloRec.lCliente = tTituloRec.lCliente
    objTituloRec.iFilial = tTituloRec.iFilial
    objTituloRec.sSiglaDocumento = tTituloRec.sSiglaDocumento
    objTituloRec.lNumTitulo = tTituloRec.lNumTitulo
    objTituloRec.dtDataEmissao = tTituloRec.dtDataEmissao
    objTituloRec.iStatus = tTituloRec.iStatus
    objTituloRec.dSaldo = tTituloRec.dSaldo
    objTituloRec.iNumParcelas = tTituloRec.iNumParcelas
    objTituloRec.dValor = tTituloRec.dValor
    objTituloRec.dValorIRRF = tTituloRec.dValorIRRF
    objTituloRec.dValorISS = tTituloRec.dValorISS
    objTituloRec.dISSRetido = tTituloRec.dISSRetido
    objTituloRec.dValorINSS = tTituloRec.dValorINSS
    objTituloRec.iINSSRetido = tTituloRec.iINSSRetido
    objTituloRec.dPercJurosDiario = tTituloRec.dPercJurosDiario
    objTituloRec.dPercMulta = tTituloRec.dPercMulta
    objTituloRec.sObservacao = tTituloRec.sObservacao
    objTituloRec.iCondicaoPagto = tTituloRec.iCondicaoPagto
    objTituloRec.dtDataRegistro = tTituloRec.dtDataRegistro
    objTituloRec.dPISRetido = tTituloRec.dPISRetido
    objTituloRec.dCOFINSRetido = tTituloRec.dCOFINSRetido
    objTituloRec.dCSLLRetido = tTituloRec.dCSLLRetido
    objTituloRec.iMoeda = tTituloRec.iMoeda
    objTituloRec.sCcl = tTituloRec.sCcl
    objTituloRec.sNatureza = tTituloRec.sNatureza
    objTituloRec.lCpoGenerico1 = tTituloRec.lCpoGenerico1
    objTituloRec.iReajustePeriodicidade = tTituloRec.iReajustePeriodicidade
    objTituloRec.dtReajusteBase = tTituloRec.dtReajusteBase
    objTituloRec.dtReajustadoAte = tTituloRec.dtReajustadoAte
    
End Sub

Function TitulosRec_LeMod(ByVal objTituloRec As ClassTituloReceber, ByVal lComando As Long) As Long
'faz a leitura de um registro da tabela TitulosRec p/objTituloRec c/ExecutarPos
'objTituloRec.lNumIntDoc entra preenchido
'TEM QUE SER CHAMADO EM TRANSACAO
Dim lErro As Long
Dim tTituloRec As typeTituloReceber

On Error GoTo Erro_TitulosRec_LeMod

    tTituloRec.sObservacao = String(STRING_TITULO_OBSERVACAO, 0)
    tTituloRec.sSiglaDocumento = String(STRING_SIGLA_DOCUMENTO, 0)
    tTituloRec.sCcl = String(STRING_CCL, 0)
    tTituloRec.sNatureza = String(STRING_NATMOVCTA_CODIGO, 0)

    lErro = Comando_ExecutarPos(lComando, "SELECT FilialEmpresa , Cliente, Filial, SiglaDocumento, " & _
    "NumTitulo, DataEmissao, Status, Saldo, NumParcelas, " & _
    "Valor , ValorIRRF, ValorISS, ISSRetido, ValorINSS, INSSRetido, " & _
    "PercJurosDiarios, PercMulta, Observacao, CondicaoPagto, DataRegistro, PISRetido, COFINSRetido, CSLLRetido, Moeda, Ccl, Natureza, CpoGenerico1, ReajustePeriodicidade, ReajusteBase, ReajustadoAte" & _
    " FROM TitulosRec WHERE TitulosRec.NumIntDoc = ?", 0, _
    tTituloRec.iFilialEmpresa, tTituloRec.lCliente, tTituloRec.iFilial, tTituloRec.sSiglaDocumento, _
    tTituloRec.lNumTitulo, tTituloRec.dtDataEmissao, tTituloRec.iStatus, tTituloRec.dSaldo, tTituloRec.iNumParcelas, _
    tTituloRec.dValor, tTituloRec.dValorIRRF, tTituloRec.dValorISS, tTituloRec.dISSRetido, tTituloRec.dValorINSS, tTituloRec.iINSSRetido, _
    tTituloRec.dPercJurosDiario, tTituloRec.dPercMulta, tTituloRec.sObservacao, tTituloRec.iCondicaoPagto, tTituloRec.dtDataRegistro, tTituloRec.dPISRetido, tTituloRec.dCOFINSRetido, tTituloRec.dCSLLRetido, tTituloRec.iMoeda, tTituloRec.sCcl, tTituloRec.sNatureza, tTituloRec.lCpoGenerico1, tTituloRec.iReajustePeriodicidade, tTituloRec.dtReajusteBase, tTituloRec.dtReajustadoAte, objTituloRec.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then Error 7487

    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7488

    If lErro <> AD_SQL_SUCESSO Then Error 7489

    tTituloRec.lNumIntDoc = objTituloRec.lNumIntDoc
    Call TituloRec_MoverCamposObj(objTituloRec, tTituloRec)

    TitulosRec_LeMod = SUCESSO

    Exit Function

Erro_TitulosRec_LeMod:

    TitulosRec_LeMod = Err

    Select Case Err

        Case 7487, 7488
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TITULOS_REC", Err)

        Case 7489 'titulo nao encontrado
            Call Rotina_Erro(vbOKOnly, "ERRO_TITULO_REC_INEXISTENTE", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148009)

    End Select

    Exit Function

End Function

Private Function TitulosRec_Modificar_BaixaParcial(ByVal objTituloRec As ClassTituloReceber, ByVal lComandoMod As Long, ByVal lComandoSel As Long) As Long
'executa alteracoes a nivel de titulo quando é efetuada uma baixa de uma parcela que nao baixa o titulo como um todo
Dim lErro As Long
On Error GoTo Erro_TitulosRec_Modificar_BaixaParcial

    lErro = Comando_ExecutarPos(lComandoMod, "UPDATE TitulosRec SET " & _
            "Saldo = ?", lComandoSel, _
            objTituloRec.dSaldo)
        If lErro <> AD_SQL_SUCESSO Then Error 7490

    TitulosRec_Modificar_BaixaParcial = SUCESSO

    Exit Function

Erro_TitulosRec_Modificar_BaixaParcial:

    TitulosRec_Modificar_BaixaParcial = Err

    Select Case Err

        Case 7490
            Call Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_TITULOS_REC", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148010)

    End Select

    Exit Function

End Function

Private Function BaixaParcRec_Inserir(ByVal objBaixaParcRec As ClassBaixaParcRec, ByVal lComando As Long) As Long
'insere no bd uma baixa de parcela a receber com o lComando passado
'TEM QUE SER CHAMADA DENTRO DE TRANSACAO
Dim lErro As Long

On Error GoTo Erro_BaixaParcRec_Inserir

    lErro = Comando_Executar(lComando, "INSERT INTO BaixasParcRec (NumIntDoc, ValorBaixado, ValorDesconto, ValorJuros, ValorMulta , Sequencial, Status, NumIntBaixa, NumIntParcela, Cobrador,ValorRecebido) VALUES (?,?,?,?,?,?,?,?,?,?,?)", _
        objBaixaParcRec.lNumIntDoc, objBaixaParcRec.dValorBaixado, objBaixaParcRec.dValorDesconto, objBaixaParcRec.dValorJuros, _
        objBaixaParcRec.dValorMulta, objBaixaParcRec.iSequencial, objBaixaParcRec.iStatus, objBaixaParcRec.lNumIntBaixa, objBaixaParcRec.lNumIntParcela, objBaixaParcRec.iCobrador, objBaixaParcRec.dValorRecebido)
        If lErro <> AD_SQL_SUCESSO Then Error 7491

    BaixaParcRec_Inserir = SUCESSO

    Exit Function

Erro_BaixaParcRec_Inserir:

    BaixaParcRec_Inserir = Err

    Select Case Err

        Case 7491
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_BAIXA_PARC_REC", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148011)

    End Select

    Exit Function

End Function

Private Function TitulosRec_Excluir(ByVal objTituloRec As ClassTituloReceber, ByVal lComandoTitSel As Long, ByVal lComandoTitDel As Long) As Long
'auxiliar a gravacao de baixa de parcela a receber

Dim lErro As Long

On Error GoTo Erro_TitulosRec_Excluir

    lErro = Comando_ExecutarPos(lComandoTitDel, "DELETE FROM TitulosRec", lComandoTitSel)
    If lErro <> AD_SQL_SUCESSO Then Error 7492

    TitulosRec_Excluir = SUCESSO

    Exit Function

Erro_TitulosRec_Excluir:

    TitulosRec_Excluir = Err

    Select Case Err

        Case 7492
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_TITULOS_RECEBER", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148012)

    End Select

    Exit Function

End Function

Private Function ParcelaRec_Excluir(ByVal objParcelaRec As ClassParcelaReceber, ByVal lComandoSel As Long, ByVal lComandoDel As Long) As Long
'auxiliar a gravacao de baixa de parcela a receber

Dim lErro As Long

On Error GoTo Erro_ParcelaRec_Excluir
    
    lErro = Comando_ExecutarPos(lComandoDel, "DELETE FROM ParcelasRec", lComandoSel)
    If lErro <> AD_SQL_SUCESSO Then gError 7493

    ParcelaRec_Excluir = SUCESSO

    Exit Function

Erro_ParcelaRec_Excluir:

    ParcelaRec_Excluir = gErr

    Select Case gErr

        Case 7493
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_PARCELAS_RECEBER", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148013)

    End Select

    Exit Function

End Function

Private Function TitulosRecBaixados_Inserir(ByVal objTituloRec As ClassTituloReceber, ByVal lComandoTitIns As Long) As Long
'auxiliar a gravacao de baixa de parcela a receber

Dim lErro As Long

On Error GoTo Erro_TitulosRecBaixados_Inserir

    lErro = Comando_Executar(lComandoTitIns, "INSERT INTO TitulosRecBaixados " & _
            "(NumIntDoc, FilialEmpresa, Cliente, Filial, SiglaDocumento, NumTitulo, DataEmissao, Status, Saldo, NumParcelas, Valor, ValorIRRF, ValorISS, ISSRetido, ValorINSS, INSSRetido, PercJurosDiarios, PercMulta, Observacao, CondicaoPagto, DataRegistro, PISRetido, COFINSRetido, CSLLRetido, Moeda, Ccl, Natureza, CpoGenerico1, ReajustePeriodicidade, ReajusteBase, ReajustadoAte) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
            objTituloRec.lNumIntDoc, objTituloRec.iFilialEmpresa, objTituloRec.lCliente, objTituloRec.iFilial, objTituloRec.sSiglaDocumento, objTituloRec.lNumTitulo, objTituloRec.dtDataEmissao, objTituloRec.iStatus, objTituloRec.dSaldo, objTituloRec.iNumParcelas, objTituloRec.dValor, objTituloRec.dValorIRRF, objTituloRec.dValorISS, objTituloRec.dISSRetido, objTituloRec.dValorINSS, objTituloRec.iINSSRetido, objTituloRec.dPercJurosDiario, objTituloRec.dPercMulta, objTituloRec.sObservacao, objTituloRec.iCondicaoPagto, objTituloRec.dtDataRegistro, objTituloRec.dPISRetido, objTituloRec.dCOFINSRetido, objTituloRec.dCSLLRetido, objTituloRec.iMoeda, objTituloRec.sCcl, objTituloRec.sNatureza, objTituloRec.lCpoGenerico1, objTituloRec.iReajustePeriodicidade, objTituloRec.dtReajusteBase, objTituloRec.dtReajustadoAte)
    If lErro <> AD_SQL_SUCESSO Then Error 7494

    'Atualiza o Status da NFiscal caso tenha vinculo com Nota Fiscal
    lErro = NFiscal_Altera_Status(objTituloRec.lNumIntDoc, CPR_TITULO_RECEBER, STATUS_BAIXADO)
    If lErro <> SUCESSO Then Error 61287
    
    TitulosRecBaixados_Inserir = SUCESSO

    Exit Function

Erro_TitulosRecBaixados_Inserir:

    TitulosRecBaixados_Inserir = Err

    Select Case Err

        Case 7494
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_TITULOS_REC", Err)
        
        Case 61287 'Tratado na rotina chamada
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148014)

    End Select

    Exit Function

End Function

'Alterado de Private para Public por Wagner 18/02/2005
Public Function NFiscal_Altera_Status(ByVal lNumIntDoc As Long, ByVal iClasseDocCPR, ByVal iStatus As Integer) As Long
'Altera o Status da Nota Fiscal para a ClasseDoc e NumIntDoc passados

Dim lErro As Long
Dim lComando As Long
Dim lComando2 As Long
Dim lNumIntDocAux As Long

On Error GoTo Erro_NFiscal_Altera_Status

    'Inicializa comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 61281
    
    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 61282

    'Lê as Notas Fiscas que tenham o NumIntDocCPR e ClasseDocCPR igual ao passado
    lErro = Comando_ExecutarPos(lComando, "SELECT NumIntDoc FROM NFiscal WHERE ClasseDocCPR = ? AND NumIntDocCPR = ?", 0, lNumIntDocAux, iClasseDocCPR, lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then Error 61283

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 61284
     
    Do While lErro = AD_SQL_SUCESSO
        
        'Altera o status da Nota para o Status passado
        lErro = Comando_ExecutarPos(lComando2, "UPDATE NFiscal SET Status = ?", lComando, iStatus)
        If lErro <> AD_SQL_SUCESSO Then Error 61285
    
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 61286
    
    Loop
    
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)

    NFiscal_Altera_Status = SUCESSO
    
    Exit Function
    
Erro_NFiscal_Altera_Status:

    NFiscal_Altera_Status = Err
    
    Select Case Err
    
        Case 61281, 61282
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 61283, 61284, 61286
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL3", Err)
        
        Case 61285
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_NFISCAL2", Err)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148015)

    End Select
    
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)

    Exit Function

End Function

Private Function ParcelasRec_BaixarOutras(ByVal lNumIntTitulo As Long, ByVal lNumIntParcela As Long, ByVal lComandoSel As Long, ByVal lComandoDel As Long, ByVal lComandoIns As Long) As Long
'auxiliar a gravacao de baixa de parcela a receber
'transfere as outras parcelas (que nao a identificada por lNumIntParcela) vinculadas a um titulo a receber de ParcelasRec para ParcelasRecBaixadas
'TEM QUE SER CHAMADA DENTRO DE TRANSACAO
Dim lErro As Long
Dim tParcelaReceber As typeParcelaReceber
Dim objParcelaReceber As New ClassParcelaReceber

On Error GoTo Erro_ParcelasRec_BaixarOutras

    tParcelaReceber.sNumTitCobrador = String(STRING_NOSSO_NUMERO, 0)
    tParcelaReceber.sObservacao = String(STRING_OBS_PARC_REC, 0)
    tParcelaReceber.sAgenciaCheque = String(STRING_AGENCIA, 0)
    tParcelaReceber.sAprovacaoCartao = String(STRING_APROVACAO_CARTAO, 0)
    tParcelaReceber.sContaCorrenteCheque = String(STRING_CONTA_CORRENTE, 0)
    tParcelaReceber.sNumeroCartao = String(STRING_NUMERO_CARTAO, 0)
    
    tParcelaReceber.lNumIntTitulo = lNumIntTitulo 'fixo
    
    lErro = Comando_ExecutarPos(lComandoSel, "SELECT NumIntDoc, NumParcela, Status, DataVencimento, DataVencimentoReal, Saldo, Valor, " & _
    "Cobrador, CarteiraCobranca, NumTitCobrador, ProxSeqBaixa, ProxSeqOcorr, " & _
    "Desconto1Codigo, Desconto1Ate, Desconto1Valor, Desconto2Codigo, Desconto2Ate, Desconto2Valor, " & _
    "Desconto3Codigo , Desconto3Ate, Desconto3Valor, Aceite, Descontada, ValorOriginal, Observacao, TipoPagto, CodConta, DataCredito, DataEmissaoCheque, BancoCheque, AgenciaCheque, ContaCorrenteCheque, NumeroCheque, DataDepositoCheque, AdmMeioPagto, Parcelamento, NumeroCartao, ValidadeCartao, AprovacaoCartao, DataTransacaoCartao " & _
    "FROM ParcelasRec WHERE ParcelasRec.NumIntTitulo = ? AND ParcelasRec.NumIntDoc <> ?", 0, _
    tParcelaReceber.lNumIntDoc, tParcelaReceber.iNumParcela, tParcelaReceber.iStatus, tParcelaReceber.dtDataVencimento, tParcelaReceber.dtDataVencimentoReal, tParcelaReceber.dSaldo, tParcelaReceber.dValor, _
    tParcelaReceber.iCobrador, tParcelaReceber.iCarteiraCobranca, tParcelaReceber.sNumTitCobrador, tParcelaReceber.iProxSeqBaixa, tParcelaReceber.iProxSeqOcorr, _
    tParcelaReceber.iDesconto1Codigo, tParcelaReceber.dtDesconto1Ate, tParcelaReceber.dDesconto1Valor, tParcelaReceber.iDesconto2Codigo, tParcelaReceber.dtDesconto2Ate, tParcelaReceber.dDesconto2Valor, _
    tParcelaReceber.iDesconto3Codigo, tParcelaReceber.dtDesconto3Ate, tParcelaReceber.dDesconto3Valor, tParcelaReceber.iAceite, tParcelaReceber.iDescontada, tParcelaReceber.dValorOriginal, tParcelaReceber.sObservacao, _
    tParcelaReceber.iTipoPagto, tParcelaReceber.iCodConta, tParcelaReceber.dtDataCredito, tParcelaReceber.dtDataEmissaoCheque, tParcelaReceber.iBancoCheque, tParcelaReceber.sAgenciaCheque, tParcelaReceber.sContaCorrenteCheque, tParcelaReceber.lNumeroCheque, tParcelaReceber.dtDataDepositoCheque, tParcelaReceber.iAdmMeioPagto, tParcelaReceber.iParcelamento, tParcelaReceber.sNumeroCartao, tParcelaReceber.dtValidadeCartao, tParcelaReceber.sAprovacaoCartao, tParcelaReceber.dtDataTransacaoCartao, lNumIntTitulo, lNumIntParcela)
    If lErro <> AD_SQL_SUCESSO Then Error 7500

    lErro = Comando_BuscarProximo(lComandoSel)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7501

    If lErro = AD_SQL_SEM_DADOS Then Error 19379

    Do While lErro = AD_SQL_SUCESSO

        'verificar se a parcela ainda nao foi baixada ou excluida
        If tParcelaReceber.iStatus <> STATUS_BAIXADO And tParcelaReceber.iStatus <> STATUS_EXCLUIDO Then Error 7502

        Call ParcelaRec_MoverCamposObj(objParcelaReceber, tParcelaReceber)

        'Excluir a parcela da tabela ParcelasRec
        lErro = ParcelaRec_Excluir(objParcelaReceber, lComandoSel, lComandoDel)
        If lErro <> SUCESSO Then Error 7503

        lErro = ParcelasRecBaixadas_Inserir(objParcelaReceber, lComandoIns)
        If lErro <> SUCESSO Then Error 7504
        
        lErro = Comando_BuscarProximo(lComandoSel)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7505

    Loop

    ParcelasRec_BaixarOutras = SUCESSO

    Exit Function

Erro_ParcelasRec_BaixarOutras:

    ParcelasRec_BaixarOutras = Err

    Select Case Err
        Case 7502 'a parcela deveria estar baixada ou excluida pois foi verificado que o saldo do titulo é zero
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_REC", Err)

        Case 7500, 7501, 7505, 19379
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_REC", Err)

        Case 7503, 7504

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148016)

    End Select

    Exit Function

End Function

Private Function ParcelasRecBaixadas_Inserir(ByVal objParcelaReceber As ClassParcelaReceber, ByVal lComandoParcIns As Long) As Long
'auxiliar a gravacao de baixa de parcela a receber

Dim lErro As Long

On Error GoTo Erro_ParcelasRecBaixadas_Inserir

    lErro = Comando_Executar(lComandoParcIns, "INSERT INTO ParcelasRecBaixadas " & _
        "(NumIntDoc, NumIntTitulo, NumParcela, Status, DataVencimento, DataVencimentoReal, " & _
        "Valor, Cobrador, CarteiraCobranca, NumTitCobrador, ProxSeqBaixa, ProxSeqOcorr, " & _
        "Desconto1Codigo, Desconto1Ate, Desconto1Valor, Desconto2Codigo, Desconto2Ate, Desconto2Valor, " & _
        "Desconto3Codigo , Desconto3Ate, Desconto3Valor, Aceite, ValorOriginal, Observacao, TipoPagto, CodConta, DataCredito, DataEmissaoCheque, BancoCheque, AgenciaCheque, ContaCorrenteCheque, NumeroCheque, DataDepositoCheque, AdmMeioPagto, Parcelamento, NumeroCartao, ValidadeCartao, AprovacaoCartao, DataTransacaoCartao) " & _
        "VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
        objParcelaReceber.lNumIntDoc, objParcelaReceber.lNumIntTitulo, objParcelaReceber.iNumParcela, objParcelaReceber.iStatus, objParcelaReceber.dtDataVencimento, objParcelaReceber.dtDataVencimentoReal, _
        objParcelaReceber.dValor, objParcelaReceber.iCobrador, objParcelaReceber.iCarteiraCobranca, objParcelaReceber.sNumTitCobrador, objParcelaReceber.iProxSeqBaixa, objParcelaReceber.iProxSeqOcorr, _
        objParcelaReceber.iDesconto1Codigo, objParcelaReceber.dtDesconto1Ate, objParcelaReceber.dDesconto1Valor, objParcelaReceber.iDesconto2Codigo, objParcelaReceber.dtDesconto2Ate, objParcelaReceber.dDesconto2Valor, _
        objParcelaReceber.iDesconto3Codigo, objParcelaReceber.dtDesconto3Ate, objParcelaReceber.dDesconto3Valor, objParcelaReceber.iAceite, objParcelaReceber.dValorOriginal, objParcelaReceber.sObservacao, _
        objParcelaReceber.iTipoPagto, objParcelaReceber.iCodConta, objParcelaReceber.dtDataCredito, objParcelaReceber.dtDataEmissaoCheque, objParcelaReceber.iBancoCheque, objParcelaReceber.sAgenciaCheque, _
        objParcelaReceber.sContaCorrenteCheque, objParcelaReceber.lNumeroCheque, objParcelaReceber.dtDataDepositoCheque, objParcelaReceber.iAdmMeioPagto, objParcelaReceber.iParcelamento, objParcelaReceber.sNumeroCartao, _
        objParcelaReceber.dtValidadeCartao, objParcelaReceber.sAprovacaoCartao, objParcelaReceber.dtDataTransacaoCartao)

    If lErro <> AD_SQL_SUCESSO Then Error 7506

    ParcelasRecBaixadas_Inserir = SUCESSO

    Exit Function

Erro_ParcelasRecBaixadas_Inserir:

    ParcelasRecBaixadas_Inserir = Err

    Select Case Err

        Case 7506
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_PARCELAS_REC", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148017)

    End Select

    Exit Function

End Function

Private Function ParcelaRec_Modificar_BaixaParcial(ByVal objParcelaReceber As ClassParcelaReceber, ByVal lComandoMod As Long, ByVal lComandoSel As Long) As Long
'alteracoes em uma parcela a receber em uma baixa parcial de titulo ( a parcela pode estar sendo totalmente baixada )

Dim lErro As Long

On Error GoTo Erro_ParcelaRec_Modificar_BaixaParcial

        lErro = Comando_ExecutarPos(lComandoMod, "UPDATE ParcelasRec SET " & _
            "ProxSeqBaixa = ?, Saldo = ?, Status = ?, Cobrador = ?, CarteiraCobranca = ?", lComandoSel, _
            objParcelaReceber.iProxSeqBaixa, objParcelaReceber.dSaldo, objParcelaReceber.iStatus, objParcelaReceber.iCobrador, objParcelaReceber.iCarteiraCobranca)
        
        If lErro <> AD_SQL_SUCESSO Then Error 7507

        ParcelaRec_Modificar_BaixaParcial = SUCESSO

        Exit Function

Erro_ParcelaRec_Modificar_BaixaParcial:

        ParcelaRec_Modificar_BaixaParcial = Err

    Select Case Err

        Case 7507
            Call Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_PARCELAS_REC", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148018)

    End Select

    Exit Function

End Function

Function AntecipPag_Grava(ByVal objAntecipPag As ClassAntecipPag, ByVal objContabil As ClassContabil) As Long

Dim lTransacao As Long
Dim lErro As Long
Dim lSeq As Long

On Error GoTo Erro_AntecipPag_Grava

    'Entra em transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 15271

    'Verifica se o Módulo de Compras está ativo
    If gcolModulo.Ativo(MODULO_COMPRAS) = MODULO_ATIVO Then

        'Verifica se o pedido de compra foi preenchido
        If objAntecipPag.lNumPedCompra <> 0 Then
        
            'Busca no bd os Adiantamentos existentes para o Pedido
            'de compras cujo código foi passado como parametro
            lErro = PedidoCompras_Le_AntecipPag(objAntecipPag)
            If lErro <> SUCESSO Then gError 74879
        
        End If
        
    End If
    
    If objAntecipPag.lSequencial = 0 Then
        
        'verifica se há outro adiantamento p/a filial forn na mesma data na mesma filialempresa
        lErro = AntecipPag_TestaRepeticao(objAntecipPag)
        If lErro <> SUCESSO Then gError 59235
        
        lErro = CF("CtaCorrente_Sequencial_Automatico", objAntecipPag.iCodConta, lSeq)
        If lErro <> SUCESSO Then gError 39016
        
        objAntecipPag.lSequencial = lSeq
        
    End If
    
    'Grava a Antecipação de pagamento em Movimento CCI
    lErro = CF("MovCCI_Grava_AntecipPag", objAntecipPag)
    If lErro <> SUCESSO Then gError 15319

    'Se Número do movimento estiver preenchido
    If objAntecipPag.lNumMovto <> 0 Then

        'Insere Pagamento antecipado na tabela
        lErro = CF("PagtosAntecipados_Insere", objAntecipPag)
        If lErro <> SUCESSO Then gError 15349

        'Grava os dados contábeis (contabilidade)
        lErro = objContabil.Contabil_Gravar_Registro(objAntecipPag.lNumMovto, objAntecipPag.lFornecedor, objAntecipPag.iFilial, DATA_NULA, , 0)
        If lErro <> SUCESSO Then gError 20504

    End If

    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 15320

    AntecipPag_Grava = SUCESSO

    Exit Function

Erro_AntecipPag_Grava:

    AntecipPag_Grava = gErr

    Select Case gErr

        Case 15271
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 15319, 15349, 20504, 39016, 59235, 74879

        Case 15320
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148019)

    End Select

    Call Transacao_Rollback

    Exit Function

End Function

Function AntecipPag_Testa_Gravacao(ByVal objAntecipPag As ClassAntecipPag) As Long

Dim lErro As Long

On Error GoTo Erro_AntecipPag_Testa_Gravacao


    AntecipPag_Testa_Gravacao = SUCESSO

    Exit Function

Erro_AntecipPag_Testa_Gravacao:

    AntecipPag_Testa_Gravacao = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 189408)

    End Select


    Exit Function

End Function

Function AntecipPag_Exclui(ByVal objAntecipPag As ClassAntecipPag, ByVal objContabil As ClassContabil) As Long
'Exclui o Pagamento antecipado

' *** Função alterada por Luiz G.F.Nogueira em 21/08/2001 ***
' *** Alteração: incluído código para excluir registro em ChequesDet
' quando o tipo pagto da Antecipação que está sendo excluída for Cheque ***
' ************************************************************

Dim lErro As Long
Dim lTransacao As Long
Dim alComando(6) As Long
Dim tMovContaCorrente As typeMovContaCorrente
Dim tAntecipPag As typeAntecipPag
Dim iIndice As Integer
Dim lNumMovtoAux As Long

On Error GoTo Erro_AntecipPag_Exclui

    For iIndice = LBound(alComando) To UBound(alComando)

        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 15400

    Next

    'Entra em transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 15399

    'Select alterado em 21/08/2001
    ' *** Alteração: o select passou a ler também o campo TipoMeioPagto, pois, caso esteja sendo excluído um adiantamento em cheque
    ' o sistema deve excluir também um registro em ChequesDet ***
    'Lê a tabela de Movimentos de Conta corrente
    lErro = Comando_ExecutarPos(alComando(0), "SELECT NumMovto, Tipo, TipoMeioPagto, Excluido, DataMovimento, Valor, Conciliado FROM MovimentosContaCorrente WHERE CodConta = ? AND Sequencial = ?", 0, tMovContaCorrente.lNumMovto, tMovContaCorrente.iTipo, tMovContaCorrente.iTipoMeioPagto, tMovContaCorrente.iExcluido, tMovContaCorrente.dtDataMovimento, tMovContaCorrente.dValor, tMovContaCorrente.iConciliado, objAntecipPag.iCodConta, objAntecipPag.lSequencial)
    If lErro <> AD_SQL_SUCESSO Then Error 15404

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 15405

    'Se o Movimento não está cadastrado
    If lErro = AD_SQL_SEM_DADOS Then Error 15406

    'Loca o Movimento
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then Error 15407

    'Verifica se o Movimento já foi excluído
    If tMovContaCorrente.iExcluido = MOVCONTACORRENTE_EXCLUIDO Then Error 15408

    'Verifica se o movimento se refere a um Pagamento antecipado
    If tMovContaCorrente.iTipo <> MOVCCI_PAGTO_ANTECIPADO Then Error 15409

    'Verifica se o Movimento está conciliado
    If tMovContaCorrente.iConciliado <> NAO_CONCILIADO Then Error 15410

    objAntecipPag.dtData = tMovContaCorrente.dtDataMovimento
    objAntecipPag.dValor = tMovContaCorrente.dValor
    objAntecipPag.lNumMovto = tMovContaCorrente.lNumMovto
        
    'Exclui o Pagamento antecipado
    lErro = CF("AntecipPag_Exclui_BD", alComando(), objAntecipPag)
    If lErro <> SUCESSO Then Error 15532

    ' *** Trecho incluído por Luiz G.F.Nogueira em 21/08/2001 ***
    'se o tipo do movimento que está sendo excluído é cheque
    If tMovContaCorrente.iTipoMeioPagto = Cheque Then

        'Lê o registro em ChequeDet para depois excluí-lo
        lErro = Comando_ExecutarPos(alComando(5), "SELECT NumMovto FROM ChequesDet WHERE NumMovto = ?", 0, lNumMovtoAux, objAntecipPag.lNumMovto)
        If lErro <> AD_SQL_SUCESSO Then gError 94520

        lErro = Comando_BuscarPrimeiro(alComando(5))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 94521

        'Se não encontrou => erro
        If lErro = AD_SQL_SEM_DADOS Then gError 94522

        'Faz lock em ChequesDet
        lErro = Comando_LockExclusive(alComando(5))
        If lErro <> AD_SQL_SUCESSO Then gError 94525

        'Exclui o registro de ChequesDET
        lErro = Comando_ExecutarPos(alComando(6), "DELETE FROM ChequesDet", alComando(5))
        If lErro <> AD_SQL_SUCESSO Then gError 94523

    End If
    ' *** Fim do trecho incluído em 21/08/2001 ***

    'exclui os lançamentos contábeis (se houverem) associados ao titulo em questao
    lErro = objContabil.Contabil_Exclui(objAntecipPag.lNumMovto, CONTABIL_EXCLUI_EFETIVO)
    If lErro <> SUCESSO Then Error 20505

    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 15419

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    AntecipPag_Exclui = SUCESSO

    Exit Function

Erro_AntecipPag_Exclui:

    AntecipPag_Exclui = Err

    Select Case Err

        Case 15399
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 15400
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 15404, 15405
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCONTACORRENTE1", Err, objAntecipPag.iCodConta, objAntecipPag.lSequencial)

        Case 15406
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVCONTACORRENTE_INEXISTENTE", Err, objAntecipPag.iCodConta, objAntecipPag.lSequencial)

        Case 15407
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_MOVIMENTOSCONTACORRENTE1", Err, objAntecipPag.iCodConta, objAntecipPag.lSequencial)

        Case 15408
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVCONTACORRENTE_EXCLUIDO", Err, objAntecipPag.iCodConta, objAntecipPag.lSequencial)

        Case 15409
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPO_NAO_ANTECIPPAG", Err)

        Case 15410
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVCONTACORRENTE_CONCILIADO", Err, objAntecipPag.iCodConta, objAntecipPag.lSequencial)

        Case 15419
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case 15532, 20505

        Case 94520, 94521
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUESDET", gErr)
        
        Case 94522
            Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUESDET_REG_INEXISTENTE", gErr, objAntecipPag.lNumMovto)
            
        Case 94523
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CHEQUESDET", gErr)
        
        Case 94525
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CHEQUESDET", gErr, objAntecipPag.lNumMovto)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148020)

    End Select

    Call Transacao_Rollback
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function PagtosAntecipados_Insere(ByVal objAntecipPag As ClassAntecipPag) As Long
'Insere o Pagamento antecipado passado como parâmetro na tabela PagtosAntecipados
'IMPORTANTE: Esta rotina tem que ser chamada dentro de Transação

Dim lErro As Long
Dim alComando(2) As Long
Dim tAntecipPag As typeAntecipPag
Dim lNumIntPag As Long
Dim iIndice As Integer
Dim lFornecedor As Long
Dim iFilial As Integer

On Error GoTo Erro_PagtosAntecipados_Insere

    For iIndice = LBound(alComando) To UBound(alComando)

        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 15385

    Next

    'Acessa a tabela FiliaisFornecedores pela chave CodFornecedor + CodFilial
    lErro = Comando_ExecutarPos(alComando(1), "SELECT CodFornecedor, CodFilial FROM FiliaisFornecedores WHERE CodFornecedor = ? AND CodFilial = ?", 0, lFornecedor, iFilial, objAntecipPag.lFornecedor, objAntecipPag.iFilial)
    If lErro <> AD_SQL_SUCESSO Then Error 15613

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then Error 15614

    lErro = Comando_LockExclusive(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then Error 15615
   
    'Pega o número do próximo Movimento
    lErro = CF("AntecipPag_Automatico", lNumIntPag)
    If lErro <> AD_SQL_SUCESSO Then Error 15384

    objAntecipPag.lNumIntPag = lNumIntPag

    'Insere os dados na tabela PagtosAntecipados
    lErro = Comando_Executar(alComando(0), "INSERT INTO PagtosAntecipados ( NumIntPag, Excluido, NumMovto, SaldoNaoApropriado, Fornecedor, Filial_Fornecedor, FilialPedCompra, NumPedCompra) VALUES (?,?,?,?,?,?,?,?)", objAntecipPag.lNumIntPag, ANTECIPPAG_NAO_EXCLUIDO, objAntecipPag.lNumMovto, objAntecipPag.dValor, objAntecipPag.lFornecedor, objAntecipPag.iFilial, objAntecipPag.iFilialPedCompra, objAntecipPag.lNumPedCompra)
    If lErro <> AD_SQL_SUCESSO Then Error 15386

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    PagtosAntecipados_Insere = SUCESSO

    Exit Function

Erro_PagtosAntecipados_Insere:

    PagtosAntecipados_Insere = Err

    Select Case Err

        Case 15384

        Case 15385
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 15386
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_ANTECIPPAG", Err, objAntecipPag.lNumIntPag)

        Case 15613, 15614
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIAISFORNECEDORES1", Err, objAntecipPag.lFornecedor, objAntecipPag.iFilial)
        
        Case 15615
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_FILIAISFORNECEDORES1", Err, objAntecipPag.lFornecedor, objAntecipPag.iFilial)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148021)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function AntecipPag_Automatico(lNumIntPag As Long) As Long
'Retorna o próximo número identificador de Antecipação de pagamento.
'IMPORTANTE : Esta rotina deve ser chamada dentro de transacao

    AntecipPag_Automatico = CF("Config_ObterNumInt", "CPRConfig", NUM_PROX_PAG_ANTECIPADO, lNumIntPag)
'
End Function

Function MovCCI_Grava_AntecipPag(ByVal objAntecipPag As ClassAntecipPag) As Long
'Insere o Pagamento antecipado passado como parâmetro em Movimentos de Conta Corrente
'IMPORTANTE: Esta função tem que ser chamada dentro de Transação

Dim alComando(10) As Long
Dim tMovContaCorrente As typeMovContaCorrente
Dim objMovContaCorrente As New ClassMovContaCorrente
Dim dtDataSaldoInicial As Date
Dim iInativo As Integer
Dim lErro As Long
Dim dtData As Date
Dim iIndice As Integer
Dim iExigeNumero As Integer
Dim lNumMovto As Long
Dim objAntecipPagAux As New ClassAntecipPag
Dim lErro1 As Long

On Error GoTo Erro_MovCCi_Grava_AntecipPag

    'Zera Número do movimento
    objAntecipPag.lNumMovto = 0

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 15352
    Next

    'Lê a Conta corrente passada como parâmetro na tabela ContasCorrentesInternas
    lErro = Comando_ExecutarPos(alComando(0), "SELECT DataSaldoInicial FROM ContasCorrentesInternas WHERE Codigo = ?", 0, dtDataSaldoInicial, objAntecipPag.iCodConta)
    If lErro <> AD_SQL_SUCESSO Then Error 15353

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 15354

    'Se a Conta não está cadastrada
    If lErro = AD_SQL_SEM_DADOS Then Error 15355

    'Loca a Conta
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then Error 15356

    'Verifica se a data do Pagamento antecipado é maior que a data do saldo inicial associada à Conta
    If objAntecipPag.dtData < dtDataSaldoInicial Then Error 15357

    'Se Tipo de pagamento estiver preenchido
    If objAntecipPag.iTipoMeioPagto <> 0 Then

        'Lê o Tipo de pagamento na tabela TipoMeioPagto
        lErro = Comando_ExecutarLockado(alComando(1), "SELECT Inativo, ExigeNumero FROM TipoMeioPagto WHERE Tipo = ? ", iInativo, iExigeNumero, objAntecipPag.iTipoMeioPagto)
        If lErro <> AD_SQL_SUCESSO Then Error 15358

        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 15359

        'Se Tipo de pagamento não está cadastrado
        If lErro = AD_SQL_SEM_DADOS Then Error 15360

        'Verifica se Tipo de pagamento está ativo
        If iInativo = TIPOMEIOPAGTO_INATIVO Then Error 15361

        'Loca o Tipo de pagamento
        lErro = Comando_LockShared(alComando(1))
        If lErro <> AD_SQL_SUCESSO Then Error 15362

    End If

    'Pesquisa o Movimento pela chave Conta + Sequencial
    lErro = Comando_ExecutarPos(alComando(2), "SELECT NumMovto, Tipo, Excluido, TipoMeioPagto, Numero, DataMovimento, Valor, Conciliado  FROM MovimentosContaCorrente WHERE CodConta =? AND Sequencial = ? ", 0, tMovContaCorrente.lNumMovto, tMovContaCorrente.iTipo, tMovContaCorrente.iExcluido, tMovContaCorrente.iTipoMeioPagto, tMovContaCorrente.lNumero, tMovContaCorrente.dtDataMovimento, tMovContaCorrente.dValor, tMovContaCorrente.iConciliado, objAntecipPag.iCodConta, objAntecipPag.lSequencial)
    If lErro <> AD_SQL_SUCESSO Then Error 15363

    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 15364

    objAntecipPagAux.lNumPedCompra = objAntecipPag.lNumPedCompra
    objAntecipPagAux.lNumMovto = tMovContaCorrente.lNumMovto

    lErro1 = CF("AntecipPag_Testa_Gravacao", objAntecipPagAux)
    If lErro1 <> SUCESSO Then Error 15534

    'Se o Movimento está cadastrado
    If lErro = AD_SQL_SUCESSO Then

        objMovContaCorrente.lNumMovto = tMovContaCorrente.lNumMovto
        objMovContaCorrente.iTipo = tMovContaCorrente.iTipo
        objMovContaCorrente.iExcluido = tMovContaCorrente.iExcluido
        objMovContaCorrente.iTipoMeioPagto = tMovContaCorrente.iTipoMeioPagto
        objMovContaCorrente.lNumero = tMovContaCorrente.lNumero
        objMovContaCorrente.dtDataMovimento = tMovContaCorrente.dtDataMovimento
        objMovContaCorrente.dValor = tMovContaCorrente.dValor
        objMovContaCorrente.iConciliado = tMovContaCorrente.iConciliado
        
        objAntecipPag.dSaldoNaoApropriado = objAntecipPag.dValor - (objMovContaCorrente.dValor - objAntecipPag.dSaldoNaoApropriado)
        
        If objAntecipPag.dSaldoNaoApropriado < 0 Then Error 20592
        
        'Grava Pagamento antecipado com Movimento
        lErro = CF("MovCCI_Grava_AP_ComMov", alComando(), objAntecipPag, objMovContaCorrente)
        If lErro <> AD_SQL_SUCESSO Then Error 15533

    'Se o Movimento não estiver cadastrado
    ElseIf lErro = AD_SQL_SEM_DADOS Then

        'Grava Pagamento antecipado sem Movimento
        lErro = CF("MovCCI_Grava_AP_SemMov", alComando(), objAntecipPag)
        If lErro <> AD_SQL_SUCESSO Then Error 15534

    End If
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    MovCCI_Grava_AntecipPag = SUCESSO

    Exit Function

Erro_MovCCi_Grava_AntecipPag:

    MovCCI_Grava_AntecipPag = Err

    Select Case Err

        Case 15352
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 15353, 15354
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONTASCORRENTESINTERNAS1", Err, objAntecipPag.iCodConta)

        Case 15355
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTACORRENTE_INEXISTENTE", Err, objAntecipPag.iCodConta)

        Case 15356
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CONTASCORRENTESINTERNAS", Err, objAntecipPag.iCodConta)

        Case 15357
            Call Rotina_Erro(vbOKOnly, "ERRO_DATAMOVIMENTO_MENOR", Err, objAntecipPag.dtData, dtDataSaldoInicial, objAntecipPag.iCodConta)

        Case 15358, 15359
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOMEIOPAGTO1", Err, objAntecipPag.iTipoMeioPagto)

        Case 15360
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPOMEIOPAGTO_INEXISTENTE", Err, objAntecipPag.iTipoMeioPagto)

        Case 15361
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPOMEIOPAGTO_INATIVO", Err, objAntecipPag.iTipoMeioPagto)

        Case 15362
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_TIPOMEIOPAGTO", Err, objAntecipPag.iTipoMeioPagto)

        Case 15363, 15364
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCONTACORRENTE1", Err, objAntecipPag.iCodConta, objAntecipPag.lSequencial)

        Case 15533, 15534
        
        Case 20592
            Call Rotina_Erro(vbOKOnly, "ERRO_SALDO_NEGATIVO", Err, objAntecipPag.dValor, objAntecipPag.dSaldoNaoApropriado)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148022)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function AntecipPag_Exclui_BD(alComando() As Long, ByVal objAntecipPag As ClassAntecipPag) As Long
'Exclui o Pagamento antecipado do BD

Dim lErro As Long
Dim tAntecipPag As typeAntecipPag
Dim iAno As Integer
Dim iMes As Integer

On Error GoTo Erro_AntecipPag_Exclui_BD

    'Lê a tabela de Pagamentos antecipados
    lErro = Comando_ExecutarPos(alComando(1), "SELECT SaldoNaoApropriado, Fornecedor, Filial_Fornecedor FROM PagtosAntecipados WHERE NumMovto = ?", 0, tAntecipPag.dSaldoNaoApropriado, tAntecipPag.lFornecedor, tAntecipPag.iFilial, objAntecipPag.lNumMovto)
    If lErro <> AD_SQL_SUCESSO Then Error 15411

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then Error 15412

    'Se o Pagamento antecipado não está cadastrado
    If lErro = AD_SQL_SEM_DADOS Then Error 15595
    
    'Loca o Pagamento antecipado
    lErro = Comando_LockExclusive(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then Error 15413

    'Se o Fornecedor cadastrado for diferente do Fornecedor informado na tela
    If tAntecipPag.lFornecedor <> objAntecipPag.lFornecedor Then Error 15432

    'Se a Filial cadastrada for diferente da Filial informada na tela
    If tAntecipPag.iFilial <> objAntecipPag.iFilial Then Error 15433

    'Se o Valor do Movimento for diferente do SaldoNaoApropriado
    'Não é possível excluir um pagamento que tenha sido total ou parcialmente apropriado
    If objAntecipPag.dValor <> tAntecipPag.dSaldoNaoApropriado Then Error 15414

    'Atualiza o Registro como Excluído na tabela MovimentosContaCorrente
    lErro = Comando_ExecutarPos(alComando(2), "UPDATE MovimentosContaCorrente SET Excluido = ?", alComando(0), MOVCONTACORRENTE_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then Error 15415

    'Exclui o Pagamento antecipado nos Movimentos de Conta Corrente do dia
    lErro = CF("CCIMovDia_Exclui", objAntecipPag.iCodConta, objAntecipPag.dtData, -objAntecipPag.dValor)
    If lErro <> SUCESSO Then Error 15416

    iAno = Year(objAntecipPag.dtData)
    iMes = Month(objAntecipPag.dtData)

    'Exclui o Pagamento antecipado nos Movimentos de Conta Corrente
    lErro = CF("CCIMov_Exclui", objAntecipPag.iCodConta, iAno, iMes, -objAntecipPag.dValor)
    If lErro <> SUCESSO Then Error 15417

    'Atualiza o Registro como Excluído na tabela PagtosAntecipados
    lErro = Comando_ExecutarPos(alComando(3), "UPDATE PagtosAntecipados SET Excluido = ?", alComando(1), ANTECIPPAG_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then Error 15418

    AntecipPag_Exclui_BD = SUCESSO

    Exit Function

Erro_AntecipPag_Exclui_BD:

    AntecipPag_Exclui_BD = Err

    Select Case Err

        Case 15411, 15412
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ANTECIPPAG1", Err, objAntecipPag.lNumMovto)

        Case 15413
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_ANTECIPPAG", Err, objAntecipPag.lNumMovto)

        Case 15414
            Call Rotina_Erro(vbOKOnly, "ERRO_PAGAMENTO_APROPRIADO", Err, objAntecipPag.lNumMovto)

        Case 15415
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_MOVIMENTOSCONTACORRENTE1", Err, objAntecipPag.iCodConta, objAntecipPag.lSequencial)

        Case 15416, 15417

        Case 15418
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_ANTECIPPAG", Err, objAntecipPag.lNumMovto)

        Case 15432
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECEDOR_NAO_COINCIDE", Err, objAntecipPag.lFornecedor, tAntecipPag.lFornecedor)

        Case 15433
            Call Rotina_Erro(vbOKOnly, "ERRO_FILIAL_NAO_COINCIDE", Err, objAntecipPag.iFilial, tAntecipPag.iFilial)

        Case 15595
            Call Rotina_Erro(vbOKOnly, "ERRO_ANTECIPPAG_INEXISTENTE", Err, objAntecipPag.iCodConta, objAntecipPag.lSequencial)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148023)

    End Select

    Exit Function

End Function

Function MovCCI_Grava_AP_ComMov(alComando() As Long, ByVal objAntecipPag As ClassAntecipPag, ByVal objMovContaCorrente As ClassMovContaCorrente) As Long
'Atualiza o Pagamento antecipado nos Movimentos de Conta Corrente

' *** Função alterada por Luiz Nogueira em 20/08/01 ***
' *** A alteração foi feita para que a função faça inser-
' ção de registro em ChequesDet ***
' *****************************************************

Dim lErro As Long
Dim vbMsgRes As VbMsgBoxResult
Dim dtData As Date
Dim lFornecedor As Long
Dim iFilial As Integer
Dim iExcluido As Integer
Dim lNumMovtoAux As Long
Dim objFornecedor As New ClassFornecedor

On Error GoTo Erro_MovCCI_Grava_AP_ComMov

    'Loca o Movimento
    lErro = Comando_LockExclusive(alComando(2))
    If lErro <> AD_SQL_SUCESSO Then gError 15365

    'Verifica se está excluido
    If objMovContaCorrente.iExcluido = MOVCONTACORRENTE_EXCLUIDO Then gError 15366

    'Verifica se é do tipo Pagamento antecipado
    If objMovContaCorrente.iTipo <> MOVCCI_PAGTO_ANTECIPADO Then gError 15367

    'Acessa a tabela PagtosAntecipados pela chave NumMovto
    lErro = Comando_ExecutarPos(alComando(5), "SELECT Fornecedor, Filial_Fornecedor FROM PagtosAntecipados WHERE NumMovto = ? AND Excluido <> ?", 0, lFornecedor, iFilial, objMovContaCorrente.lNumMovto, ANTECIPPAG_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then gError 15609

    lErro = Comando_BuscarPrimeiro(alComando(5))
    If lErro <> AD_SQL_SUCESSO Then gError 15610

    'Se o Fornecedor cadastrado não bate com o Fornecedor da tela
    If lFornecedor <> objAntecipPag.lFornecedor Then gError 15611
    
    'Se a Filial cadastrada não bate com a Filial da tela
    If iFilial <> objAntecipPag.iFilial Then gError 15612
    
    'Verifica de os dados da tela coincidem com os do BD
    If (objMovContaCorrente.iTipoMeioPagto <> objAntecipPag.iTipoMeioPagto) Or (objMovContaCorrente.lNumero <> objAntecipPag.lNumero) Then

        'Se Tipo de pagamento e Numero estiverem preenchidos
        If Len(Trim(objAntecipPag.iTipoMeioPagto)) <> 0 And Len(Trim(objAntecipPag.lNumero)) <> 0 Then

            'Acessa a tabela de Movimentos de Conta Corrente pela chave Codconta+ TipomeioPagto + Numero
            lErro = Comando_Executar(alComando(3), "SELECT Excluido FROM MovimentosContaCorrente WHERE CodConta = ? AND TipoMeioPagto=? AND Numero = ? AND Excluido = ? ", iExcluido, objAntecipPag.iCodConta, objAntecipPag.iTipoMeioPagto, objAntecipPag.lNumero, NAO_EXCLUIDO)
            If lErro <> AD_SQL_SUCESSO Then gError 15368

            lErro = Comando_BuscarPrimeiro(alComando(3))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 15369

            'Se já existe Movimento com a chave Codconta+ TipomeioPagto + Numero, e se este movimento não tiver sido excluído
            If lErro = AD_SQL_SUCESSO Then gError 15370

        End If
        
        ' *** Incluído por Luiz Nogueira em 20/08/01 ***
        'Se o TipoMeioPagto foi alterado
        If objMovContaCorrente.iTipoMeioPagto <> objAntecipPag.iTipoMeioPagto Then
        
            'se o tipo do movimento estava gravado como cheque
            If objMovContaCorrente.iTipoMeioPagto = Cheque Then
    
                'Lê o registro em ChequeDet para depois excluí-lo
                lErro = Comando_ExecutarPos(alComando(9), "SELECT NumMovto FROM ChequesDet WHERE NumMovto = ?", 0, lNumMovtoAux, objMovContaCorrente.lNumMovto)
                If lErro <> AD_SQL_SUCESSO Then gError 94512
    
                lErro = Comando_BuscarPrimeiro(alComando(9))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 94513
    
                'Se não encontrou => erro
                If lErro = AD_SQL_SEM_DADOS Then gError 94514
    
                'Faz lock em ChequesDet
                lErro = Comando_LockExclusive(alComando(9))
                If lErro <> AD_SQL_SUCESSO Then gError 94524
                
                'Exclui o registro de ChequesDET
                lErro = Comando_ExecutarPos(alComando(10), "DELETE FROM ChequesDet", alComando(9))
                If lErro <> AD_SQL_SUCESSO Then gError 94515
    
            End If
    
            'Se o TipoMeioPagto na tela é cheque
            If objAntecipPag.iTipoMeioPagto = Cheque Then
    
                objFornecedor.lCodigo = objAntecipPag.lFornecedor
                'Lê os dados do fornecedor para obter a razão social do fornecedor e inserí-la em ChequesDet
                lErro = CF("Fornecedor_Le", objFornecedor)
                If lErro <> SUCESSO And lErro <> 12729 Then gError 94516
    
                'Se não encontrou o fornecedor => erro
                If lErro = 12729 Then gError 94517
    
                'Insere em chequesdet a informação do cheque
                lErro = Comando_Executar(alComando(8), "INSERT INTO ChequesDet ( NumMovto, EmNomeDeQuem ) VALUES (?,?)", objMovContaCorrente.lNumMovto, objFornecedor.sRazaoSocial)
                If lErro <> SUCESSO Then gError 94518
    
            End If
        
        End If
        ' *** Fim do trecho incluído ***
        
    End If

    'Se o Movimento estiver Conciliado
    If objMovContaCorrente.iConciliado <> NAO_CONCILIADO Then

        'Verifica se a data e valor da tela coincidem com os cadastrados
        If objMovContaCorrente.dtDataMovimento <> objAntecipPag.dtData Or objMovContaCorrente.dValor <> objAntecipPag.dValor Then

            'Avisar que tais dados não serão alterados e pergunta se deseja prosseguir com a alteração
            vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_DATA_VALOR_NAO_ALTERAVEIS")

            'Se não confirmar
            If vbMsgRes = vbNo Then gError 15371

            'Move os dados Data e Valor da tela para o Obj
            objAntecipPag.dtData = objMovContaCorrente.dtDataMovimento
            objAntecipPag.dValor = objMovContaCorrente.dValor

        End If

    End If

    'Atualiza o Movimento na tabela
    lErro = Comando_ExecutarPos(alComando(4), "UPDATE MovimentosContaCorrente SET TipoMeioPagto = ?, Numero=?, DataMovimento=?, Valor=?, Historico=?, Natureza=?", alComando(2), objAntecipPag.iTipoMeioPagto, objAntecipPag.lNumero, objAntecipPag.dtData, objAntecipPag.dValor, objAntecipPag.sHistorico, objAntecipPag.sNatureza)
    If lErro <> AD_SQL_SUCESSO Then gError 15372
    
    lErro = MovCCI_Atualiza_Acumuladores(objAntecipPag.iCodConta, objAntecipPag.dtData, -objAntecipPag.dValor, objMovContaCorrente.dtDataMovimento, -objMovContaCorrente.dValor)
    If lErro <> SUCESSO Then gError 56854
    
    lErro = Comando_ExecutarPos(alComando(7), "UPDATE PagtosAntecipados SET SaldoNaoApropriado = ?, FilialPedCompra = ?, NumPedCompra = ?", alComando(5), objAntecipPag.dSaldoNaoApropriado, objAntecipPag.iFilialPedCompra, objAntecipPag.lNumPedCompra)
    If lErro <> AD_SQL_SUCESSO Then gError 20589
    
    MovCCI_Grava_AP_ComMov = SUCESSO

    Exit Function

Erro_MovCCI_Grava_AP_ComMov:

    MovCCI_Grava_AP_ComMov = gErr

    Select Case gErr

        Case 15365
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_MOVIMENTOSCONTACORRENTE1", gErr, objAntecipPag.iCodConta, objAntecipPag.lSequencial)

        Case 15366
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVCONTACORRENTE_EXCLUIDO", gErr, objAntecipPag.iCodConta, objAntecipPag.lSequencial)

        Case 15367
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPO_NAO_ANTECIPPAG", gErr)

        Case 15368, 15369
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCONTACORRENTE1", gErr, objAntecipPag.iCodConta, objAntecipPag.lSequencial)

        Case 15370
            Call Rotina_Erro(vbOKOnly, "ERRO_MOV_NUMPAGTO_DUPLICADO", gErr, objAntecipPag.iCodConta, objAntecipPag.iTipoMeioPagto, objAntecipPag.lNumero)

        Case 15371, 56854

        Case 15372
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_MOVIMENTOSCONTACORRENTE1", gErr, objAntecipPag.iCodConta, objAntecipPag.lSequencial)

        Case 15609, 15610
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ANTECIPPAG1", gErr, objAntecipPag.lNumMovto)
        
        Case 15611
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECEDOR_NAO_COINCIDE", gErr, objAntecipPag.lFornecedor, lFornecedor)
            
        Case 15612
            Call Rotina_Erro(vbOKOnly, "ERRO_FILIAL_NAO_COINCIDE", gErr, objAntecipPag.iFilial, iFilial)
        
        Case 20589
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_ANTECIPPAG", gErr, objAntecipPag.lNumMovto)
        
        Case 94511, 94516
        
        Case 94512, 94513
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUESDET", gErr)
        
        Case 94514
            Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUESDET_REG_INEXISTENTE", gErr, objMovContaCorrente.lNumMovto)
            
        Case 94515
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CHEQUESDET", gErr)
        
        Case 94517
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECEDOR_INEXISTENTE", gErr)
        
        Case 94518
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CHEQUESDET", gErr)
        
        Case 94524
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CHEQUESDET", gErr, objMovContaCorrente.lNumMovto)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148024)

        End Select

    Exit Function

End Function

Function MovCCI_Grava_AP_SemMov(alComando() As Long, ByVal objAntecipPag As ClassAntecipPag) As Long
'Insere o Pagamento antecipado nos Movimentos de Conta Corrente

' *** Função alterada por Luiz Nogueira em 20/08/01 ***
' *** A alteração foi feita para que a função faça inser-
' ção de registro em ChequesDet ***
' *****************************************************

Dim lErro As Long
Dim dtData As Date
Dim lNumMovto As Long
Dim iCodConta As Integer
Dim objFornecedor As New ClassFornecedor

On Error GoTo Erro_MovCCI_Grava_AP_SemMov

    'Se Tipo de pagamento e Numero estiverem preenchidos
    If objAntecipPag.iTipoMeioPagto <> 0 And objAntecipPag.lNumero <> 0 Then

        'Acessa a tabela de Movimentos de Conta Corrente pela chave Codconta+ TipomeioPagto + Numero
        lErro = Comando_Executar(alComando(3), "SELECT CodConta FROM MovimentosContaCorrente WHERE CodConta = ? AND TipoMeioPagto=? AND Numero = ? AND Excluido = 0", iCodConta, objAntecipPag.iCodConta, objAntecipPag.iTipoMeioPagto, objAntecipPag.lNumero)
        If lErro <> AD_SQL_SUCESSO Then gError 15373

        lErro = Comando_BuscarPrimeiro(alComando(3))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 15374

        'Se já existe Movimento com a chave Codconta+ TipomeioPagto + Numero
        If lErro = AD_SQL_SUCESSO Then gError 15375

    End If

    'Pega o número do próximo Movimento
    lErro = CF("MovCCI_Automatico", lNumMovto)
    If lErro <> AD_SQL_SUCESSO Then gError 15376

    objAntecipPag.lNumMovto = lNumMovto

    'Insere o Pagamento antecipado na Tabela MovimentosContaCorrente
    lErro = Comando_Executar(alComando(4), "INSERT INTO MovimentosContaCorrente (NumMovto, FilialEmpresa, CodConta, Sequencial, Tipo, Excluido, TipoMeioPagto, Numero, DataMovimento, Valor, Historico, NumRefInterna, Natureza) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", objAntecipPag.lNumMovto, giFilialEmpresa, objAntecipPag.iCodConta, objAntecipPag.lSequencial, MOVCCI_PAGTO_ANTECIPADO, MOVCONTACORRENTE_NAO_EXCLUIDO, objAntecipPag.iTipoMeioPagto, objAntecipPag.lNumero, objAntecipPag.dtData, objAntecipPag.dValor, objAntecipPag.sHistorico, objAntecipPag.lNumIntPag, objAntecipPag.sNatureza)
    If lErro <> AD_SQL_SUCESSO Then gError 15377

    dtData = objAntecipPag.dtData

    'Atualiza os dados em CCIMovDia
    lErro = CF("CCIMovDia_Grava", objAntecipPag.iCodConta, dtData, -objAntecipPag.dValor)
    If lErro <> SUCESSO Then gError 15395

    'Atualiza os dados em CCIMov
    lErro = CF("CCIMov_Grava", objAntecipPag.iCodConta, Year(dtData), Month(dtData), -objAntecipPag.dValor)
    If lErro <> SUCESSO Then gError 15396
    
    ' *** Incluído por Luiz Nogueira em 20/08/01 ***
    
    'Se o movimento é em cheque
    If objAntecipPag.iTipoMeioPagto = Cheque Then
    
        'Guarda em objFornecedor, o código do fornecedor que será lido
        objFornecedor.lCodigo = objAntecipPag.lFornecedor
        
        'Lê os dados do fornecedor para obter a razão social do fornecedor e inserí-la em ChequesDet
        lErro = CF("Fornecedor_Le", objFornecedor)
        If lErro <> SUCESSO And lErro <> 12729 Then gError 94509
        
        'Se não encontrou o fornecedor => erro
        If lErro = 12729 Then gError 94510

        'Insere em chequesdet a informação do cheque
        lErro = Comando_Executar(alComando(8), "INSERT INTO ChequesDet ( NumMovto, EmNomeDeQuem ) VALUES (?,?)", objAntecipPag.lNumMovto, objFornecedor.sRazaoSocial)
        If lErro <> SUCESSO Then gError 94511
    
    End If
    '*** Fim do trecho incluído por Luiz Nogueira em 20/08/01 ***
    
    MovCCI_Grava_AP_SemMov = SUCESSO

    Exit Function

Erro_MovCCI_Grava_AP_SemMov:

    MovCCI_Grava_AP_SemMov = gErr

    Select Case gErr

        Case 15373, 15374
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCONTACORRENTE1", gErr, objAntecipPag.iCodConta, objAntecipPag.lSequencial)

        Case 15375
            Call Rotina_Erro(vbOKOnly, "ERRO_MOV_NUMPAGTO_DUPLICADO", gErr, objAntecipPag.iCodConta, objAntecipPag.iTipoMeioPagto, objAntecipPag.lNumero)

        Case 15376, 15395, 15396, 94509

        Case 15377
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MOVIMENTOSCONTACORRENTE", gErr)
        
        Case 94510
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECEDOR_INEXISTENTE", gErr)
        
        Case 94511
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CHEQUESDET", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148025)

        End Select

    Exit Function

End Function

Function AntecipRec_Grava(ByVal objAntecipReceb As ClassAntecipReceb, ByVal objContabil As ClassContabil) As Long
'grava um adiantamento de cliente

Dim lTransacao As Long
Dim lErro As Long
Dim lSeq As Long

On Error GoTo Erro_AntecipRec_Grava

    'Entra em transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 15503
    
    If objAntecipReceb.lSequencial = 0 Then
        
        'verifica se há outro adiantamento da filial cli na mesma data na mesma filialempresa
        lErro = AntecipRec_TestaRepeticao(objAntecipReceb)
        If lErro <> SUCESSO Then Error 59240
        
        lErro = CF("CtaCorrente_Sequencial_Automatico", objAntecipReceb.iCodConta, lSeq)
        If lErro <> SUCESSO Then Error 17722
            
        objAntecipReceb.lSequencial = lSeq
    
    End If

    'Grava a Antecipação de recebimento em Movimento CCI
    lErro = CF("MovCCI_Grava_AntecipRec", objAntecipReceb)
    If lErro <> SUCESSO Then Error 15504

    'Se Número do movimento estiver preenchido
    If objAntecipReceb.lNumMovto <> 0 Then
        
        'Insere Recebimento antecipado na tabela
        lErro = CF("RecebAntecipados_Insere", objAntecipReceb)
        If lErro <> SUCESSO Then Error 15505

        'Grava os dados contábeis (contabilidade)
        lErro = objContabil.Contabil_Gravar_Registro(objAntecipReceb.lNumMovto, objAntecipReceb.lCliente, objAntecipReceb.iFilial, DATA_NULA, , 0)
        If lErro <> SUCESSO Then Error 20506

    End If

    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 15506

    AntecipRec_Grava = SUCESSO

    Exit Function

Erro_AntecipRec_Grava:

    AntecipRec_Grava = Err

    Select Case Err

        Case 15503
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 15504, 15505, 17722, 20506, 59240

        Case 15506
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148026)

    End Select

    Call Transacao_Rollback

    Exit Function

End Function

Function RecebAntecipados_Insere(ByVal objAntecipReceb As ClassAntecipReceb) As Long
'Insere o Recebimento antecipado passado como parâmetro na tabela RecebAntecipados
'IMPORTANTE: Esta rotina tem que ser chamada dentro de Transação

Dim lErro As Long
Dim alComando(2) As Long
Dim tAntecipRec As typeAntecipRec
Dim tMovContaCorrente As typeMovContaCorrente
Dim lNumIntRec As Long
Dim iIndice As Integer
Dim lCliente As Long
Dim iFilial As Integer

On Error GoTo Erro_RecebAntecipados_Insere

    For iIndice = LBound(alComando) To UBound(alComando)

        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 15507

    Next

    'Acessa a tabela FiliaisClientes pela chave CodCliente + CodFilial
    lErro = Comando_ExecutarPos(alComando(1), "SELECT CodCliente, CodFilial FROM FiliaisClientes WHERE CodCliente = ? AND CodFilial = ?", 0, lCliente, iFilial, objAntecipReceb.lCliente, objAntecipReceb.iFilial)
    If lErro <> AD_SQL_SUCESSO Then Error 15618

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then Error 15619

    'Loca a Filial
    lErro = Comando_LockExclusive(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then Error 15620

    'Pega o número do próximo Movimento
    lErro = CF("AntecipRec_Automatico", lNumIntRec)
    If lErro <> AD_SQL_SUCESSO Then Error 15508

    objAntecipReceb.lNumIntRec = lNumIntRec

    'Insere os dados na tabela RecebAntecipados
    lErro = Comando_Executar(alComando(0), "INSERT INTO RecebAntecipados ( NumIntRec, Excluido, NumMovto, SaldoNaoApropriado, Cliente, Filial_Cliente) VALUES (?,?,?,?,?,?)", objAntecipReceb.lNumIntRec, ANTECIPREC_NAO_EXCLUIDO, objAntecipReceb.lNumMovto, objAntecipReceb.dValor, objAntecipReceb.lCliente, objAntecipReceb.iFilial)
    If lErro <> AD_SQL_SUCESSO Then Error 15509

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    RecebAntecipados_Insere = SUCESSO

    Exit Function

Erro_RecebAntecipados_Insere:

    RecebAntecipados_Insere = Err

    Select Case Err

        Case 15507
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 15508
        
        Case 15509
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_ANTECIPREC", Err, objAntecipReceb.lNumIntRec)

        Case 15618, 15619
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIAISCLIENTES1", Err, objAntecipReceb.lCliente, objAntecipReceb.iFilial)
        
        Case 15620
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_FILIAISCLIENTES", Err, objAntecipReceb.lCliente, objAntecipReceb.iFilial)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148027)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function AntecipRec_Automatico(lNumIntRec As Long) As Long
'Retorna o próximo número identificador de Antecipação de recebimento.
'IMPORTANTE : Esta rotina deve ser chamada dentro de transacao

    AntecipRec_Automatico = CF("Config_ObterNumInt", "CPRConfig", NUM_PROX_REC_ANTECIPADO, lNumIntRec)

End Function

Function AntecipRec_Exclui(ByVal objAntecipReceb As ClassAntecipReceb, ByVal objContabil As ClassContabil) As Long
'Exclui o Recebimento antecipado

Dim lErro As Long
Dim lTransacao As Long
Dim alComando(4) As Long
Dim tMovContaCorrente As typeMovContaCorrente
Dim iIndice As Integer

On Error GoTo Erro_AntecipRec_Exclui

    For iIndice = LBound(alComando) To UBound(alComando)

        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 15419

    Next

    'Entra em transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 15517

    'Lê a tabela de Movimentos de Conta corrente
    lErro = Comando_ExecutarPos(alComando(0), "SELECT NumMovto, Tipo, Excluido, DataMovimento, Valor, Conciliado FROM MovimentosContaCorrente WHERE CodConta = ? AND Sequencial = ?", 0, tMovContaCorrente.lNumMovto, tMovContaCorrente.iTipo, tMovContaCorrente.iExcluido, tMovContaCorrente.dtDataMovimento, tMovContaCorrente.dValor, tMovContaCorrente.iConciliado, objAntecipReceb.iCodConta, objAntecipReceb.lSequencial)
    If lErro <> AD_SQL_SUCESSO Then Error 15518

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 15519

    'Se o Movimento não está cadastrado
    If lErro = AD_SQL_SEM_DADOS Then Error 15523

    'Loca o Movimento
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then Error 15524

    'Verifica se o Movimento já foi excluído
    If tMovContaCorrente.iExcluido = MOVCONTACORRENTE_EXCLUIDO Then Error 15525

    'Verifica se o movimento se refere a um Recebimento antecipado
    If tMovContaCorrente.iTipo <> MOVCCI_RECEB_ANTECIPADO Then Error 15526

    'Verifica se está conciliado
    If tMovContaCorrente.iConciliado <> NAO_CONCILIADO Then Error 15527

    objAntecipReceb.lNumMovto = tMovContaCorrente.lNumMovto
    objAntecipReceb.dValor = tMovContaCorrente.dValor
    objAntecipReceb.dtData = tMovContaCorrente.dtDataMovimento

    'Exclui o Recebimento antecipado
    lErro = AntecipRec_Exclui_BD(alComando(), objAntecipReceb)
    If lErro <> SUCESSO Then Error 15528

    'exclui os lançamentos contábeis (se houverem) associados ao titulo em questao
    lErro = objContabil.Contabil_Exclui(objAntecipReceb.lNumMovto, CONTABIL_EXCLUI_EFETIVO)
    If lErro <> SUCESSO Then Error 20507

    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 15529

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    AntecipRec_Exclui = SUCESSO

    Exit Function

Erro_AntecipRec_Exclui:

    AntecipRec_Exclui = Err

    Select Case Err

        Case 15419
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 15517
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 15518, 15519
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCONTACORRENTE1", Err, objAntecipReceb.iCodConta, objAntecipReceb.lSequencial)

        Case 15523
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVCONTACORRENTE_INEXISTENTE", Err, objAntecipReceb.iCodConta, objAntecipReceb.lSequencial)

        Case 15524
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_MOVIMENTOSCONTACORRENTE1", Err, objAntecipReceb.iCodConta, objAntecipReceb.lSequencial)

        Case 15525
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVCONTACORRENTE_EXCLUIDO", Err, objAntecipReceb.iCodConta, objAntecipReceb.lSequencial)

        Case 15526
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPO_NAO_ANTECIPREC", Err)

        Case 15527
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVCONTACORRENTE_CONCILIADO", Err, objAntecipReceb.iCodConta, objAntecipReceb.lSequencial)

        Case 15528, 20507
        
        Case 15529
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148028)

    End Select

    Call Transacao_Rollback
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function AntecipRec_Exclui_BD(alComando() As Long, ByVal objAntecipReceb As ClassAntecipReceb) As Long
'Exclui o Recebimento antecipado do BD

Dim lErro As Long
Dim tAntecipRec As typeAntecipRec
Dim iAno As Integer
Dim iMes As Integer

On Error GoTo Erro_AntecipRec_Exclui_BD

    'Lê a tabela de Recebimentos antecipados
    lErro = Comando_ExecutarPos(alComando(1), "SELECT SaldoNaoApropriado, Cliente, Filial_Cliente FROM RecebAntecipados WHERE NumMovto = ?", 0, tAntecipRec.dSaldoNaoApropriado, tAntecipRec.lCliente, tAntecipRec.iFilial_Cliente, objAntecipReceb.lNumMovto)
    If lErro <> AD_SQL_SUCESSO Then Error 15535

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then Error 15536

    'Se o Recebimento antecipado não está cadastrado
    If lErro = AD_SQL_SEM_DADOS Then Error 15537
    
    'Loca o Recebimento antecipado
    lErro = Comando_LockExclusive(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then Error 15538

    'Se o Cliente cadastrado for diferente do Cliente informado na tela
    If tAntecipRec.lCliente <> objAntecipReceb.lCliente Then Error 15539

    'Se a Filial cadastrada for diferente da Filial informada na tela
    If tAntecipRec.iFilial_Cliente <> objAntecipReceb.iFilial Then Error 15540

    'Se o Valor do Movimento for diferente do SaldoNaoApropriado
    'Não é possível excluir um recebimento que tenha sido total ou parcialmente apropriado
    If Abs(objAntecipReceb.dValor - tAntecipRec.dSaldoNaoApropriado) > DELTA_VALORMONETARIO Then Error 15541

    'Atualiza o Registro como Excluído na tabela MovimentosContaCorrente
    lErro = Comando_ExecutarPos(alComando(2), "UPDATE MovimentosContaCorrente SET Excluido = ?", alComando(0), MOVCONTACORRENTE_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then Error 15542

    'Exclui o Recebimento antecipado nos Movimentos de Conta Corrente do dia
    lErro = CF("CCIMovDia_Exclui", objAntecipReceb.iCodConta, objAntecipReceb.dtData, objAntecipReceb.dValor)
    If lErro <> SUCESSO Then Error 15543

    iAno = Year(objAntecipReceb.dtData)
    iMes = Month(objAntecipReceb.dtData)

    'Exclui o Recebimento antecipado nos Movimentos de Conta Corrente
    lErro = CF("CCIMov_Exclui", objAntecipReceb.iCodConta, iAno, iMes, objAntecipReceb.dValor)
    If lErro <> SUCESSO Then Error 15544

    'Atualiza o Registro como Excluído na tabela RecebAntecipados
    lErro = Comando_ExecutarPos(alComando(3), "UPDATE RecebAntecipados SET Excluido = ?", alComando(1), ANTECIPREC_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then Error 15545

    AntecipRec_Exclui_BD = SUCESSO

    Exit Function

Erro_AntecipRec_Exclui_BD:

    AntecipRec_Exclui_BD = Err

    Select Case Err

        Case 15535, 15536
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ANTECIPREC1", Err, objAntecipReceb.lNumMovto)

        Case 15537
            Call Rotina_Erro(vbOKOnly, "ERRO_ANTECIPREC_INEXISTENTE", Err, objAntecipReceb.iCodConta, objAntecipReceb.lSequencial)
        
        Case 15538
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_ANTECIPREC", Err, objAntecipReceb.lNumMovto)

        Case 15539
            Call Rotina_Erro(vbOKOnly, "ERRO_CLIENTE_NAO_COINCIDE", Err, objAntecipReceb.lCliente, tAntecipRec.lCliente)

        Case 15540
            Call Rotina_Erro(vbOKOnly, "ERRO_FILIAL_NAO_COINCIDE", Err, objAntecipReceb.iFilial, tAntecipRec.iFilial_Cliente)

        Case 15541
            Call Rotina_Erro(vbOKOnly, "ERRO_RECEBIMENTO_APROPRIADO", Err, objAntecipReceb.lNumMovto)

        Case 15542
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_MOVIMENTOSCONTACORRENTE1", Err, objAntecipReceb.iCodConta, objAntecipReceb.lSequencial)

        Case 15543, 15544

        Case 15545
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_ANTECIPREC", Err, objAntecipReceb.lNumMovto)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148029)

    End Select

    Exit Function

End Function

Function MovCCI_Grava_AntecipRec(ByVal objAntecipReceb As ClassAntecipReceb) As Long
'Insere o Recebimento antecipado passado como parâmetro em Movimentos de Conta Corrente
'IMPORTANTE: Esta função tem que ser chamada dentro de Transação

Dim alComando(7) As Long
Dim tMovContaCorrente As typeMovContaCorrente
Dim objMovContaCorrente As ClassMovContaCorrente
Dim dtDataSaldoInicial As Date
Dim iInativo As Integer
Dim lErro As Long
Dim dtData As Date
Dim iIndice As Integer
Dim iExigeNumero As Integer
Dim lNumMovto As Long
Dim sNumRefExterna As String

On Error GoTo Erro_MovCCi_Grava_AntecipRec

    Set objMovContaCorrente = New ClassMovContaCorrente
    
    'Zera Número do movimento
    objAntecipReceb.lNumMovto = 0

    For iIndice = LBound(alComando) To UBound(alComando)

        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 15546

    Next

    'Lê a Conta corrente passada como parâmetro na tabela ContasCorrentesInternas
    lErro = Comando_ExecutarPos(alComando(0), "SELECT DataSaldoInicial FROM ContasCorrentesInternas WHERE Codigo = ?", 0, dtDataSaldoInicial, objAntecipReceb.iCodConta)
    If lErro <> AD_SQL_SUCESSO Then Error 15547

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 15548

    'Se a Conta não está cadastrada
    If lErro = AD_SQL_SEM_DADOS Then Error 15549

    'Loca a Conta
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then Error 15550

    'Verifica se a data do Recebimento antecipado é maior que a data do saldo inicial associada à Conta
    If objAntecipReceb.dtData < dtDataSaldoInicial Then Error 15551

    'Lê o Tipo de pagamento na tabela TipoMeioPagto
    lErro = Comando_ExecutarLockado(alComando(1), "SELECT Inativo, ExigeNumero FROM TipoMeioPagto WHERE Tipo = ? ", iInativo, iExigeNumero, objAntecipReceb.iTipoMeioPagto)
    If lErro <> AD_SQL_SUCESSO Then Error 15552

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 15553

    'Se Tipo de pagamento não está cadastrado
    If lErro = AD_SQL_SEM_DADOS Then Error 15554

    'Verifica se Tipo de pagamento está ativo
    If iInativo = TIPOMEIOPAGTO_INATIVO Then Error 15555

    'Loca o Tipo de pagamento
    lErro = Comando_LockShared(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then Error 15556

    sNumRefExterna = String(STRING_NUMREFEXTERNA, 0)
    
    'Pesquisa o Movimento pela chave Conta + Sequencial
    lErro = Comando_ExecutarPos(alComando(2), "SELECT NumMovto, Excluido, Tipo, TipoMeioPagto, NumRefExterna, DataMovimento, Valor  FROM MovimentosContaCorrente WHERE CodConta =? AND Sequencial = ? ", 0, tMovContaCorrente.lNumMovto, tMovContaCorrente.iExcluido, tMovContaCorrente.iTipo, tMovContaCorrente.iTipoMeioPagto, sNumRefExterna, tMovContaCorrente.dtDataMovimento, tMovContaCorrente.dValor, objAntecipReceb.iCodConta, objAntecipReceb.lSequencial)
    If lErro <> AD_SQL_SUCESSO Then Error 15557

    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 15558

    'Se o Movimento está cadastrado
    If lErro = AD_SQL_SUCESSO Then
    
        objMovContaCorrente.iExcluido = tMovContaCorrente.iExcluido
        objMovContaCorrente.iTipo = tMovContaCorrente.iTipo
        objMovContaCorrente.lNumMovto = tMovContaCorrente.lNumMovto
        objMovContaCorrente.iTipoMeioPagto = tMovContaCorrente.iTipoMeioPagto
        objMovContaCorrente.sNumRefExterna = sNumRefExterna
        objMovContaCorrente.iConciliado = tMovContaCorrente.iConciliado
        objMovContaCorrente.dtDataMovimento = tMovContaCorrente.dtDataMovimento
        objMovContaCorrente.dValor = tMovContaCorrente.dValor
        
        objAntecipReceb.dSaldoNaoApropriado = objAntecipReceb.dValor - (objMovContaCorrente.dValor - objAntecipReceb.dSaldoNaoApropriado)
        
        If objAntecipReceb.dSaldoNaoApropriado <= 0 Then Error 20591
    
        'Grava Recebimento antecipado com Movimento
        lErro = CF("MovCCI_Grava_AR_ComMov", alComando(), objAntecipReceb, objMovContaCorrente)
        If lErro <> AD_SQL_SUCESSO Then Error 15559

    'Se o Movimento não estiver cadastrado
    ElseIf lErro = AD_SQL_SEM_DADOS Then

        'Grava Recebimento antecipado sem Movimento
        lErro = CF("MovCCI_Grava_AR_SemMov", alComando(), objAntecipReceb)
        If lErro <> AD_SQL_SUCESSO Then Error 15560

    End If

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    MovCCI_Grava_AntecipRec = SUCESSO

    Exit Function

Erro_MovCCi_Grava_AntecipRec:

    MovCCI_Grava_AntecipRec = Err

    Select Case Err

        Case 15546
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 15547, 15548
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONTASCORRENTESINTERNAS1", Err, objAntecipReceb.iCodConta)

        Case 15549
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTACORRENTE_INEXISTENTE", Err, objAntecipReceb.iCodConta)

        Case 15550
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CONTASCORRENTESINTERNAS", Err, objAntecipReceb.iCodConta)

        Case 15551
            Call Rotina_Erro(vbOKOnly, "ERRO_DATAMOVIMENTO_MENOR", Err, objAntecipReceb.dtData, dtDataSaldoInicial, objAntecipReceb.iCodConta)

        Case 15552, 15553
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOMEIOPAGTO1", Err, objAntecipReceb.iTipoMeioPagto)

        Case 15554
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPOMEIOPAGTO_INEXISTENTE", Err, objAntecipReceb.iTipoMeioPagto)

        Case 15555
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPOMEIOPAGTO_INATIVO", Err, objAntecipReceb.iTipoMeioPagto)

        Case 15556
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_TIPOMEIOPAGTO", Err, objAntecipReceb.iTipoMeioPagto)

        Case 15557, 15558
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCONTACORRENTE1", Err, objAntecipReceb.iCodConta, objAntecipReceb.lSequencial)

        Case 15559, 15560
        
        Case 20591
            Call Rotina_Erro(vbOKOnly, "ERRO_SALDO_NEGATIVO", Err, objAntecipReceb.dValor, objAntecipReceb.dSaldoNaoApropriado)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148030)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function MovCCI_Grava_AR_ComMov(alComando() As Long, ByVal objAntecipReceb As ClassAntecipReceb, ByVal objMovContaCorrente As ClassMovContaCorrente) As Long
'Atualiza o Recebimento antecipado nos Movimentos de Conta Corrente

Dim lErro As Long
Dim vbMsgRes As VbMsgBoxResult
Dim dtData As Date
Dim lCliente As Long
Dim iFilial As Integer
Dim iExcluido As Integer
Dim sNumRefExterna As String

On Error GoTo Erro_MovCCI_Grava_AR_ComMov

    'Loca o Movimento
    lErro = Comando_LockExclusive(alComando(2))
    If lErro <> AD_SQL_SUCESSO Then Error 15561

    'Verifica se está excluido
    If objMovContaCorrente.iExcluido = MOVCONTACORRENTE_EXCLUIDO Then Error 15562

    'Verifica se é do tipo Recebimento antecipado
    If objMovContaCorrente.iTipo <> MOVCCI_RECEB_ANTECIPADO Then Error 15563
     
    'Acessa a tabela RecebAntecipados pela chave NumMovto
    lErro = Comando_ExecutarPos(alComando(5), "SELECT Cliente, Filial_Cliente FROM RecebAntecipados WHERE NumMovto = ? ", 0, lCliente, iFilial, objMovContaCorrente.lNumMovto)
    If lErro <> AD_SQL_SUCESSO Then Error 15622

    lErro = Comando_BuscarPrimeiro(alComando(5))
    If lErro <> AD_SQL_SUCESSO Then Error 15623

    'Se o Cliente cadastrado não bate com o Cliente da tela
    If lCliente <> objAntecipReceb.lCliente Then Error 15624
    
    'Se a Filial cadastrada não bate com a Filial da tela
    If iFilial <> objAntecipReceb.iFilial Then Error 15625

    'Se o Movimento estiver Conciliado
    If objMovContaCorrente.iConciliado <> NAO_CONCILIADO Then

        'Verifica se a data e valor da tela coincidem com os cadastrados
        If objMovContaCorrente.dtDataMovimento <> objAntecipReceb.dtData Or objMovContaCorrente.dValor <> objAntecipReceb.dValor Then

            'Avisar que tais dados não serão alterados e pergunta se deseja prosseguir com a alteração
            vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_DATA_VALOR_NAO_ALTERAVEIS")

            'Se não confirmar
            If vbMsgRes = vbNo Then Error 15567

            'Move os dados Data e Valor da tela para o Obj
            objAntecipReceb.dtData = objMovContaCorrente.dtDataMovimento
            objAntecipReceb.dValor = objMovContaCorrente.dValor

        End If

    End If

    'Atualiza o Movimento na tabela
    lErro = Comando_ExecutarPos(alComando(4), "UPDATE MovimentosContaCorrente SET TipoMeioPagto=?, NumRefExterna=?, DataMovimento=?, Valor=?, Historico=?, Natureza=?", alComando(2), objAntecipReceb.iTipoMeioPagto, objAntecipReceb.sNumRefExterna, objAntecipReceb.dtData, objAntecipReceb.dValor, objAntecipReceb.sHistorico, objAntecipReceb.sNatureza)
    If lErro <> AD_SQL_SUCESSO Then Error 15568
    
    lErro = MovCCI_Atualiza_Acumuladores(objAntecipReceb.iCodConta, objAntecipReceb.dtData, objAntecipReceb.dValor, objMovContaCorrente.dtDataMovimento, objMovContaCorrente.dValor)
    If lErro <> SUCESSO Then Error 56855
        
    lErro = Comando_ExecutarPos(alComando(7), "UPDATE RecebAntecipados SET SaldoNaoApropriado =?", alComando(5), objAntecipReceb.dSaldoNaoApropriado)
    If lErro <> AD_SQL_SUCESSO Then Error 20590
    
    MovCCI_Grava_AR_ComMov = SUCESSO

    Exit Function

Erro_MovCCI_Grava_AR_ComMov:

    MovCCI_Grava_AR_ComMov = Err

    Select Case Err

        Case 15561
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_MOVIMENTOSCONTACORRENTE1", Err, objAntecipReceb.iCodConta, objAntecipReceb.lSequencial)

        Case 15562
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVCONTACORRENTE_EXCLUIDO", Err, objAntecipReceb.iCodConta, objAntecipReceb.lSequencial)

        Case 15563
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPO_NAO_ANTECIPREC", Err)

        Case 15567, 56855

        Case 15568
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_MOVIMENTOSCONTACORRENTE1", Err, objAntecipReceb.iCodConta, objAntecipReceb.lSequencial)

        Case 15622, 15623
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ANTECIPREC1", Err, objAntecipReceb.lNumMovto)
        
        Case 15624
            Call Rotina_Erro(vbOKOnly, "ERRO_CLIENTE_NAO_COINCIDE", Err, objAntecipReceb.lCliente, lCliente)
            
        Case 15625
            Call Rotina_Erro(vbOKOnly, "ERRO_FILIAL_NAO_COINCIDE", Err, objAntecipReceb.iFilial, iFilial)
        
        Case 20590
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_ANTECIPRECEB", Err, objAntecipReceb.lNumMovto)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148031)

        End Select

    Exit Function

End Function

Function MovCCI_Grava_AR_SemMov(alComando() As Long, ByVal objAntecipReceb As ClassAntecipReceb) As Long
'Insere o Recebimento antecipado nos Movimentos de Conta Corrente

Dim lErro As Long
Dim dtData As Date
Dim lNumMovto As Long
Dim iCodConta As Integer
Dim sNumRefExterna As String

On Error GoTo Erro_MovCCI_Grava_AR_SemMov

    'Pega o número do próximo Movimento
    lErro = CF("MovCCI_Automatico", lNumMovto)
    If lErro <> AD_SQL_SUCESSO Then Error 15572

    objAntecipReceb.lNumMovto = lNumMovto
            
    'Insere o Recebimento antecipado na Tabela MovimentosContaCorrente
    lErro = Comando_Executar(alComando(4), "INSERT INTO MovimentosContaCorrente (NumMovto, FilialEmpresa, CodConta, Sequencial, Tipo, Excluido, TipoMeioPagto, DataMovimento, Valor, Historico, NumRefExterna, NumRefInterna, Natureza) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", objAntecipReceb.lNumMovto, giFilialEmpresa, objAntecipReceb.iCodConta, objAntecipReceb.lSequencial, MOVCCI_RECEB_ANTECIPADO, MOVCONTACORRENTE_NAO_EXCLUIDO, objAntecipReceb.iTipoMeioPagto, objAntecipReceb.dtData, objAntecipReceb.dValor, objAntecipReceb.sHistorico, objAntecipReceb.sNumRefExterna, objAntecipReceb.lNumIntRec, objAntecipReceb.sNatureza)
    If lErro <> AD_SQL_SUCESSO Then Error 15573

    dtData = objAntecipReceb.dtData

    'Atualiza os dados em CCIMovDia
    lErro = CF("CCIMovDia_Grava", objAntecipReceb.iCodConta, dtData, objAntecipReceb.dValor)
    If lErro <> SUCESSO Then Error 15574

    'Atualiza os dados em CCIMov
    lErro = CF("CCIMov_Grava", objAntecipReceb.iCodConta, Year(dtData), Month(dtData), objAntecipReceb.dValor)
    If lErro <> SUCESSO Then Error 15575

    MovCCI_Grava_AR_SemMov = SUCESSO

    Exit Function

Erro_MovCCI_Grava_AR_SemMov:

    MovCCI_Grava_AR_SemMov = Err

    Select Case Err

        Case 15572, 15574, 15575

        Case 15573
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MOVIMENTOSCONTACORRENTE", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148032)

        End Select

    Exit Function

End Function

Function CreditoPagar_Grava(ByVal objCreditoPagar As ClassCreditoPagar, ByVal objContabil As ClassContabil) As Long
'Atualiza ou insere Crédito a Pagar no Banco de Dados.

Dim lTransacao As Long
Dim lErro As Long

On Error GoTo Erro_CreditoPagar_Grava

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 17149

    lErro = CF("CreditoPagar_Grava_EmTrans", objCreditoPagar, objContabil)
    If lErro <> SUCESSO Then gError 190324

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 17161

    CreditoPagar_Grava = SUCESSO

    Exit Function

Erro_CreditoPagar_Grava:

    CreditoPagar_Grava = gErr

    Select Case gErr

        Case 17149
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 190324

        Case 17161
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148033)

    End Select

    Call Transacao_Rollback


    Exit Function

End Function

Function CreditoPagar_Grava_EmTrans(ByVal objCreditoPagar As ClassCreditoPagar, ByVal objContabil As ClassContabil) As Long
'Atualiza ou insere Crédito a Pagar no Banco de Dados.

Dim lComando1 As Long
'Dim lTransacao As Long
Dim lErro As Long
Dim tCreditoPagar As typeCreditoPagar
Dim lNumIntDoc As Long, lNumIntNF As Long

On Error GoTo Erro_CreditoPagar_Grava_EmTrans

    'Abertura comandos
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 17146

'    'Inicia a Transacao
'    lTransacao = Transacao_Abrir()
'    If lTransacao = 0 Then Error 17149

    'Verifica se o Crédito a Pagar está cadastrado no BD
    lErro = Comando_ExecutarPos(lComando1, "SELECT NumIntDoc, FilialEmpresa, Fornecedor, Filial, NumTitulo, DataEmissao, Status, ValorTotal, ValorSeguro, ValorFrete, OutrasDespesas, ValorProdutos, ValorICMS, ValorICMSSubst, DebitoICMS, ValorIPI, DebitoIPI, ValorIRRF, PISRetido, COFINSRetido, CSLLRetido FROM CreditosPagForn WHERE FilialEmpresa = ? AND Fornecedor = ? AND Filial = ? AND SiglaDocumento = ? AND NumTitulo = ? AND DataEmissao = ? AND Status <> ? ", 0, _
        tCreditoPagar.lNumIntDoc, tCreditoPagar.iFilialEmpresa, tCreditoPagar.lFornecedor, tCreditoPagar.iFilial, tCreditoPagar.lNumTitulo, tCreditoPagar.dtDataEmissao, tCreditoPagar.iStatus, tCreditoPagar.dValorTotal, tCreditoPagar.dValorSeguro, tCreditoPagar.dValorFrete, tCreditoPagar.dOutrasDespesas, tCreditoPagar.dValorProdutos, tCreditoPagar.dValorICMS, tCreditoPagar.dValorICMSSubst, tCreditoPagar.iDebitoICMS, tCreditoPagar.dValorIPI, tCreditoPagar.iDebitoIPI, tCreditoPagar.dValorIRRF, tCreditoPagar.dPISRetido, tCreditoPagar.dCOFINSRetido, tCreditoPagar.dCSLLRetido, objCreditoPagar.iFilialEmpresa, objCreditoPagar.lFornecedor, objCreditoPagar.iFilial, objCreditoPagar.sSiglaDocumento, objCreditoPagar.lNumTitulo, objCreditoPagar.dtDataEmissao, STATUS_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 17155

    'Tenta ler
    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 17156

    'Crédito a Pagar não existe no BD
    If lErro = AD_SQL_SEM_DADOS Then
    
        'verifica se o docto já foi registrado anteriormente
        lErro = CreditoPagar_Testa_Repeticao(objCreditoPagar)
        If lErro <> SUCESSO Then Error 17801
        
        lErro = CF("FilialFornecedor_Lock", objCreditoPagar.lFornecedor, objCreditoPagar.iFilial)
        If lErro <> SUCESSO Then Error 59245

        'Gera o número automático do próximo Crédito a Pagar
        lErro = CF("CreditoPagar_Automatico", lNumIntDoc)
        If lErro <> AD_SQL_SUCESSO Then Error 17158
 
        objCreditoPagar.lNumIntDoc = lNumIntDoc
 
        'Calcula o Saldo do Credito a inserir no BD
        objCreditoPagar.dSaldo = Round(objCreditoPagar.dValorTotal - (objCreditoPagar.dValorIRRF + objCreditoPagar.dPISRetido + objCreditoPagar.dCOFINSRetido + objCreditoPagar.dCSLLRetido), 2)
        objCreditoPagar.iStatus = STATUS_LANCADO

        'Insere novo registro na tabela CreditosPagForn
        lErro = Comando_Executar(lComando1, "INSERT INTO CreditosPagForn (NumIntDoc, FilialEmpresa, Fornecedor, Filial, SiglaDocumento, NumTitulo, DataEmissao, Status, Saldo, ValorTotal, ValorSeguro, ValorFrete, OutrasDespesas, ValorProdutos, ValorICMS, ValorICMSSubst, DebitoICMS, ValorIPI, DebitoIPI, ValorIRRF, PISRetido, COFINSRetido, CSLLRetido) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
            lNumIntDoc, objCreditoPagar.iFilialEmpresa, objCreditoPagar.lFornecedor, objCreditoPagar.iFilial, objCreditoPagar.sSiglaDocumento, objCreditoPagar.lNumTitulo, objCreditoPagar.dtDataEmissao, objCreditoPagar.iStatus, objCreditoPagar.dSaldo, objCreditoPagar.dValorTotal, objCreditoPagar.dValorSeguro, objCreditoPagar.dValorFrete, objCreditoPagar.dOutrasDespesas, objCreditoPagar.dValorProdutos, objCreditoPagar.dValorICMS, objCreditoPagar.dValorICMSSubst, objCreditoPagar.iDebitoICMS, objCreditoPagar.dValorIPI, objCreditoPagar.iDebitoIPI, objCreditoPagar.dValorIRRF, objCreditoPagar.dPISRetido, objCreditoPagar.dCOFINSRetido, objCreditoPagar.dCSLLRetido)
        If lErro <> AD_SQL_SUCESSO Then Error 17209

    Else
    'Crédito a Pagar existe no BD

       'Verifica se Status é STATUS_BAIXADO
       If tCreditoPagar.iStatus = STATUS_BAIXADO Then Error 17377

       'Verifica se algum valor foi alterado
       If (objCreditoPagar.dValorTotal <> tCreditoPagar.dValorTotal) Or (tCreditoPagar.dValorSeguro <> objCreditoPagar.dValorSeguro) Or (tCreditoPagar.dValorFrete <> objCreditoPagar.dValorFrete) Or (tCreditoPagar.dOutrasDespesas) <> (objCreditoPagar.dOutrasDespesas) Or (tCreditoPagar.dValorProdutos <> objCreditoPagar.dValorProdutos) Or _
            (tCreditoPagar.dValorICMS <> objCreditoPagar.dValorICMS) Or (tCreditoPagar.dValorICMSSubst <> objCreditoPagar.dValorICMSSubst) Or (tCreditoPagar.iDebitoICMS <> objCreditoPagar.iDebitoICMS) Or (tCreditoPagar.dValorIPI <> objCreditoPagar.dValorIPI) Or (tCreditoPagar.iDebitoIPI <> objCreditoPagar.iDebitoIPI) Or (tCreditoPagar.dValorIRRF <> objCreditoPagar.dValorIRRF) Or _
            (tCreditoPagar.dPISRetido <> objCreditoPagar.dPISRetido) Or (tCreditoPagar.dCOFINSRetido <> objCreditoPagar.dCOFINSRetido) Or (tCreditoPagar.dCSLLRetido <> objCreditoPagar.dCSLLRetido) _
            Then Error 17213

       objCreditoPagar.lNumIntDoc = tCreditoPagar.lNumIntDoc
       objCreditoPagar.lFornecedor = tCreditoPagar.lFornecedor
       objCreditoPagar.iFilial = tCreditoPagar.iFilial

    End If

    If (gcolModulo.Ativo(MODULO_CONTABILIDADE) = MODULO_ATIVO) Then

        'se o documento foi originado fora de CPR nao pode ter a contabilidade alterada em CPR
        lErro = CF("DocumentoCPR_OrigemNFiscal", objCreditoPagar.sSiglaDocumento, objCreditoPagar.lNumIntDoc, lNumIntNF)
        If lErro <> SUCESSO And lErro <> 41542 Then Error 59227

        'se nao é um docto gerado fora do cpr
        If lErro <> SUCESSO Then

            If Not (objContabil Is Nothing) Then
            
                'Grava os dados contábeis (contabilidade)
                lErro = objContabil.Contabil_Gravar_Registro(objCreditoPagar.lNumIntDoc, objCreditoPagar.lFornecedor, objCreditoPagar.iFilial, DATA_NULA, , 0)
                If lErro <> SUCESSO Then Error 20525
                
            End If

        End If

    End If

'    'Confirma a transação
'    lErro = Transacao_Commit()
'    If lErro <> AD_SQL_SUCESSO Then Error 17161

    'Fechamento comandos
    Call Comando_Fechar(lComando1)

    CreditoPagar_Grava_EmTrans = SUCESSO

    Exit Function

Erro_CreditoPagar_Grava_EmTrans:

    CreditoPagar_Grava_EmTrans = Err

    Select Case Err

        Case 17146
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

'        Case 17149
'            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 17155, 17156
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CREDITOSPAGFORN", Err, objCreditoPagar.lFornecedor, objCreditoPagar.iFilial, objCreditoPagar.sSiglaDocumento, objCreditoPagar.lNumTitulo, objCreditoPagar.dtDataEmissao)
        
        Case 17158, 17801, 20525, 59227, 59245

'        Case 17161
'            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case 17209
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CREDITOSPAGFORN", Err, objCreditoPagar.lFornecedor, objCreditoPagar.iFilial, objCreditoPagar.sSiglaDocumento, objCreditoPagar.lNumTitulo)

        Case 17213
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_CREDPAG_LANCADO", Err, objCreditoPagar.lFornecedor, objCreditoPagar.iFilial, objCreditoPagar.sSiglaDocumento, objCreditoPagar.lNumTitulo, objCreditoPagar.dtDataEmissao)

         Case 17377
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_CREDPAG_BAIXADO", Err, objCreditoPagar.lFornecedor, objCreditoPagar.iFilial, objCreditoPagar.sSiglaDocumento, objCreditoPagar.lNumTitulo, objCreditoPagar.dtDataEmissao)
                  
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148033)

    End Select

'    Call Transacao_Rollback
    
    'Fechamento comandos
    Call Comando_Fechar(lComando1)

    Exit Function

End Function


Function CreditoPagar_Exclui(ByVal objCreditoPagar As ClassCreditoPagar, ByVal objContabil As ClassContabil) As Long
'Exclui Crédito a Pagar do BD

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_CreditoPagar_Exclui


    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 17175

    lErro = CF("CreditoPagar_Exclui_EmTransacao", objCreditoPagar, objContabil)
    If lErro <> SUCESSO Then Error 62147

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 17183

    CreditoPagar_Exclui = SUCESSO

    Exit Function

Erro_CreditoPagar_Exclui:

    CreditoPagar_Exclui = Err

    Select Case Err

        Case 17175
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 62147

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148034)

    End Select

    Call Transacao_Rollback
    
    Exit Function

End Function

Function CreditoPagar_Exclui_EmTransacao(ByVal objCreditoPagar As ClassCreditoPagar, ByVal objContabil As ClassContabil) As Long
'Exclui Crédito a Pagar do BD
'ATENÇÃO: ESSA ROTINA DEVE SER CHAMADA DENTRO DE UMA TRANSACAO

Dim lComando1 As Long
Dim lComando2 As Long
Dim lComando3 As Long
Dim lErro As Long
Dim lNumIntDoc As Long, lNumIntNF As Long
Dim lNumIntBaixa As Long
Dim objBaixaPagar As New ClassBaixaPagar
Dim objNFiscal As New ClassNFiscal

On Error GoTo Erro_CreditoPagar_Exclui_EmTransacao

    'Abertura comandos
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 17173

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then gError 17174

    lComando3 = Comando_Abrir()
    If lComando3 = 0 Then gError 17360

    If objCreditoPagar.iExclusao = 1 Then

        'Pesquisa Crédito a Pagar no BD
        lErro = Comando_ExecutarPos(lComando1, "SELECT NumIntDoc FROM CreditosPagForn WHERE FilialEmpresa = ? AND Fornecedor = ? AND Filial = ? AND SiglaDocumento = ? AND NumTitulo = ? AND DataEmissao = ?", 0, lNumIntDoc, objCreditoPagar.iFilialEmpresa, objCreditoPagar.lFornecedor, objCreditoPagar.iFilial, objCreditoPagar.sSiglaDocumento, objCreditoPagar.lNumTitulo, objCreditoPagar.dtDataEmissao)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 17176

    Else

        'Pesquisa Crédito a Pagar no BD
        lErro = Comando_ExecutarPos(lComando1, "SELECT NumIntDoc FROM CreditosPagForn WHERE FilialEmpresa = ? AND Fornecedor = ? AND Filial = ? AND SiglaDocumento = ? AND NumTitulo = ? AND DataEmissao = ? AND Status <> ?", 0, lNumIntDoc, objCreditoPagar.iFilialEmpresa, objCreditoPagar.lFornecedor, objCreditoPagar.iFilial, objCreditoPagar.sSiglaDocumento, objCreditoPagar.lNumTitulo, objCreditoPagar.dtDataEmissao, STATUS_EXCLUIDO)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 17176

    End If
    
    'Tenta ler
    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 17177

    'Não encontrou o Crédito a Pagar ==> Erro
    If lErro = AD_SQL_SEM_DADOS Then gError 17178

    'lock do Crédito a Pagar
    lErro = Comando_LockExclusive(lComando1)
    If lErro <> AD_SQL_SUCESSO Then gError 17179

    'Lê Baixas a Pagar associada a este Crédito a Pagar
    lErro = Comando_ExecutarPos(lComando2, "SELECT NumIntBaixa FROM BaixasPag WHERE NumIntDoc = ? AND Status <> ?", 0, lNumIntBaixa, lNumIntDoc, STATUS_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 17354

    'Tenta ler
    lErro = Comando_BuscarPrimeiro(lComando2)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 17355
    
    'Encontrou ==> Erro
    If lErro = AD_SQL_SUCESSO Then gError 17181

    'se o documento foi originado fora de CPR nao pode ser excluido em CPR
    lErro = CF("DocumentoCPR_OrigemNFiscal", objCreditoPagar.sSiglaDocumento, lNumIntDoc, lNumIntNF)
    If lErro <> SUCESSO And lErro <> 41542 Then gError 59229
    If lErro = SUCESSO Then
    
        objNFiscal.lNumIntDoc = lNumIntNF

        lErro = CF("NFiscal_Le", objNFiscal)
        If lErro <> SUCESSO And lErro <> 31442 Then gError 59446
        If lErro <> SUCESSO Then gError 59447
        
        If objCreditoPagar.iExclusao = 0 And objNFiscal.iStatus <> STATUS_CANCELADO Then gError 59230
    
    End If
        
    If objCreditoPagar.iExclusao = 1 Then
        
        'Exclui Crédito a Pagar da tabela de CreditosPagForn
        lErro = Comando_ExecutarPos(lComando3, "DELETE FROM CreditosPagForn", lComando1)
        If lErro <> AD_SQL_SUCESSO Then gError 83956
        
    Else
        
        'Exclui Crédito a Pagar da tabela de CreditosPagForn
        lErro = Comando_ExecutarPos(lComando3, "UPDATE CreditosPagForn SET Status = ?", lComando1, STATUS_EXCLUIDO)
        If lErro <> AD_SQL_SUCESSO Then gError 17182
    
    End If
    
    lErro = CF("Trata_Exclusao_Do_Destino", objCreditoPagar)
    If lErro <> SUCESSO Then gError 192055
    
    If objCreditoPagar.iExclusao = 1 Then
    
        'Exclui os lançamentos contábeis (se houverem) associados ao título em questão
        lErro = objContabil.Contabil_Exclui(lNumIntDoc, CONTABIL_EXCLUI_EFETIVO, , , , objCreditoPagar.iFilialEmpresa)
        If lErro <> SUCESSO Then gError 20524

    Else
    
        'Exclui os lançamentos contábeis (se houverem) associados ao título em questão
        lErro = objContabil.Contabil_Exclui(lNumIntDoc, , , , , objCreditoPagar.iFilialEmpresa)
        If lErro <> SUCESSO Then gError 20524

    End If

    'Fechamento comandos
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)

    CreditoPagar_Exclui_EmTransacao = SUCESSO

    Exit Function

Erro_CreditoPagar_Exclui_EmTransacao:

    CreditoPagar_Exclui_EmTransacao = gErr

    Select Case gErr

        Case 17173, 17174, 17360
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 17175
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 17176, 17177
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CREDITOSPAGFORN", gErr, objCreditoPagar.lFornecedor, objCreditoPagar.iFilial, objCreditoPagar.lNumTitulo, objCreditoPagar.dtDataEmissao)

        Case 17178
            Call Rotina_Erro(vbOKOnly, "ERRO_CREDITOPAGAR_NAO_CADASTRADO", gErr, objCreditoPagar.lFornecedor, objCreditoPagar.iFilial, objCreditoPagar.sSiglaDocumento, objCreditoPagar.lNumTitulo, objCreditoPagar.dtDataEmissao)

        Case 17179
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CREDITOSPAGFORN", gErr, objCreditoPagar.lFornecedor, objCreditoPagar.iFilial, objCreditoPagar.sSiglaDocumento, objCreditoPagar.lNumTitulo, objCreditoPagar.dtDataEmissao)

        Case 17181
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CREDPAG_VINCULADO_BAIXA", gErr, lNumIntBaixa, objCreditoPagar.lFornecedor, objCreditoPagar.iFilial, objCreditoPagar.sSiglaDocumento, objCreditoPagar.lNumTitulo, objCreditoPagar.dtDataEmissao)

        Case 17182, 83956
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CREDITOSPAGFORN", gErr, objCreditoPagar.lFornecedor, objCreditoPagar.iFilial, objCreditoPagar.sSiglaDocumento, objCreditoPagar.lNumTitulo, objCreditoPagar.dtDataEmissao)

        Case 17183
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case 17354, 17355
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BAIXASPAG1", gErr, lNumIntDoc)

        Case 20524, 59229, 59446, 59447, 192055 'Tratado na rotina chamada
        
        Case 59230
            Call Rotina_Erro(vbOKOnly, "ERRO_CREDITOPAGAR_VINCULADO_NFISCAL", gErr, objCreditoPagar.lNumTitulo)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148035)

    End Select
   
    'Fechamento comandos
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)

    Exit Function

End Function

Function CreditoPagar_Automatico(lNumIntDoc As Long) As Long
'Retorna o próximo número de Crédito a Pagar disponível

    CreditoPagar_Automatico = CF("Config_ObterNumInt", "CPRConfig", "NUM_PROX_CREDITO_PAGAR", lNumIntDoc)
    
End Function

Function NFPag_Grava(ByVal objNFsPag As ClassNFsPag, ByVal objContabil As ClassContabil) As Long
'Grava Nota Fiscal a Pagar no BD.

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_NFPag_Grava

    lTransacao = 0
    
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 18293
    
    lErro = CF("NFPag_Grava_EmTrans", objNFsPag, objContabil)
    If lErro <> SUCESSO Then gError 182854
    
    'Efetiva transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 18318
    
    NFPag_Grava = SUCESSO
    
    Exit Function

Erro_NFPag_Grava:

    NFPag_Grava = gErr
    
    Select Case gErr
        
        Case 18293
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 18318
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case 182854
                
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148036)
                
    End Select
        
    Call Transacao_Rollback
    
    Exit Function
        
End Function

Function NFPag_Grava_EmTrans(ByVal objNFsPag As ClassNFsPag, ByVal objContabil As ClassContabil) As Long
'Grava Nota Fiscal a Pagar no BD.

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim sNome As String, lNumIntNF As Long
Dim iFilialEmpresa As Integer

On Error GoTo Erro_NFPag_Grava_EmTrans

    lComando = 0
    lComando1 = 0
    
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 18294

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 18432

    sNome = String(STRING_FILIAL_FORNECEDOR_NOME, 0)
    
    'Produra o BD a filialFornecedor fornecida
    lErro = Comando_ExecutarLockado(lComando, "SELECT Nome FROM FiliaisFornecedores WHERE CodFornecedor = ? AND CodFilial = ? ", sNome, objNFsPag.lFornecedor, objNFsPag.iFilial)
    If lErro <> AD_SQL_SUCESSO Then gError 18295
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 18296
    
    'Se nao encontrar --> Erro
    If lErro = AD_SQL_SEM_DADOS Then gError 18297
    
    'Faz lock na FilialFornecedor
    lErro = Comando_LockShared(lComando)
    If lErro <> AD_SQL_SUCESSO Then gError 18298
    
    'Grava Nota Fiscal no BD
    lErro = CF("NFPag_Grava_BD", objNFsPag)
    If lErro <> SUCESSO Then gError 18433

    '############################################
    'Inserido por Wagner 22/03/2006
    lErro = CF("ProjetoInfo_Grava", objNFsPag.objProjetoInfo, PRJ_CR_TIPO_NFPAG, objNFsPag.lNumIntDoc)
    If lErro <> SUCESSO Then gError 181706
    '############################################
    
    If (gcolModulo.Ativo(MODULO_CONTABILIDADE) = MODULO_ATIVO) Then
    
        If Not (objContabil Is Nothing) Then
    
            'se o documento foi originado fora de CPR nao pode ter a contabilidade alterada em CPR
            lErro = CF("DocumentoCPR_OrigemNFiscal", TIPODOC_NF_A_PAGAR, objNFsPag.lNumIntDoc, lNumIntNF)
            If lErro <> SUCESSO And lErro <> 41542 Then gError 59223
            
            'se nao é um docto gerado fora do cpr
            If lErro <> SUCESSO Then
                
                'Grava os dados contábeis (contabilidade)
                lErro = objContabil.Contabil_Gravar_Registro(objNFsPag.lNumIntDoc, objNFsPag.lFornecedor, objNFsPag.iFilial, DATA_NULA, , 0, objNFsPag.lNumNotaFiscal, Round(objNFsPag.dValorTotal - (objNFsPag.dValorIRRF + objNFsPag.dPISRetido + objNFsPag.dCOFINSRetido + objNFsPag.dCSLLRetido), 2))
                If lErro <> SUCESSO Then gError 20521
    
            End If
            
        End If
        
    End If
    
    'Fecha comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    
    NFPag_Grava_EmTrans = SUCESSO
    
    Exit Function

Erro_NFPag_Grava_EmTrans:

    NFPag_Grava_EmTrans = gErr
    
    Select Case gErr
        
        Case 18294, 18432
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 18295, 18296
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIAISFORNECEDORES2", gErr, objNFsPag.lFornecedor, objNFsPag.iFilial)
        
        Case 18297
             Call Rotina_Erro(vbOKOnly, "ERRO_FILIALFORNECEDOR_NAO_CADASTRADA", gErr, objNFsPag.lFornecedor, objNFsPag.iFilial)
            
        Case 18298
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_FILIALFORNECEDOR", gErr, objNFsPag.lFornecedor, objNFsPag.iFilial)
            
        Case 18433, 20521, 59223, 181706
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148036)
                
    End Select
        
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    
    Exit Function
        
End Function

Function NFPag_Automatico(lNumIntAuto As Long)
'Funçao que gera automaticamente os numeros internos para Notas Fiscais a Pagar
'AVISO: Esta função deve ser chamada dentro de uma transação

    NFPag_Automatico = CF("Config_ObterNumInt", "CPRConfig", "NUM_PROX_NF_PAGAR", lNumIntAuto)

End Function

Function NFPag_Exclui_EmTransacao(ByVal objNFsPag As ClassNFsPag, ByVal objContabil As ClassContabil) As Long
'Exclui a Nota Fiscal com código interno passado por parâmetro.

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim lNumIntTitPag As Long
Dim lNumTitulo As Long, lNumIntNF As Long
Dim objTipoDocumento As New ClassTipoDocumento
Dim objNFiscal As New ClassNFiscal
Dim objTituloPagar As New ClassTituloPagar

On Error GoTo Erro_NFPag_Exclui_EmTransacao

    'Abre comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 18327
    
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 18351
    
    If objNFsPag.iExclusao = 1 Then
    
        'Seleciona a Nota Fiscal em NfsPag
        lErro = Comando_ExecutarPos(lComando, "SELECT NumIntTitPag FROM NFsPag WHERE NumIntDoc = ? AND FilialEmpresa = ?", 0, lNumIntTitPag, objNFsPag.lNumIntDoc, objNFsPag.iFilialEmpresa)
        If lErro <> AD_SQL_SUCESSO Then gError 18349

    Else

        'Seleciona a Nota Fiscal em NfsPag
        lErro = Comando_ExecutarPos(lComando, "SELECT NumIntTitPag FROM NFsPag WHERE NumIntDoc = ? AND FilialEmpresa = ? AND Status <> ? ", 0, lNumIntTitPag, objNFsPag.lNumIntDoc, objNFsPag.iFilialEmpresa, STATUS_EXCLUIDO)
        If lErro <> AD_SQL_SUCESSO Then gError 18349

    End If

    'Tenta ler
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 18350

    'Se nao encontrar --> erro
    If lErro = AD_SQL_SEM_DADOS Then gError 18357

    'Faz lock na Nota Fiscal
    lErro = Comando_LockExclusive(lComando)
    If lErro <> AD_SQL_SUCESSO Then gError 18352

    'Verifica se a Nota Fiscal Pagar está vinculada a algum Título
    If lNumIntTitPag <> 0 Then

        objTituloPagar.lNumIntDoc = lNumIntTitPag

        lErro = CF("TituloPagar_Le", objTituloPagar)
        If lErro <> SUCESSO And lErro <> 18372 Then gError 59724

        If lErro <> SUCESSO Then gError 59725

        lNumTitulo = objTituloPagar.lNumTitulo

        gError 18353

    End If

    'se o documento foi originado fora de CPR nao pode ser excluido em CPR
    lErro = CF("DocumentoCPR_OrigemNFiscal", TIPODOC_NF_A_PAGAR, objNFsPag.lNumIntDoc, lNumIntNF)
    If lErro <> SUCESSO And lErro <> 41542 Then gError 43005
    If lErro = SUCESSO Then
    
        objNFiscal.lNumIntDoc = lNumIntNF

        lErro = CF("NFiscal_Le", objNFiscal)
        If lErro <> SUCESSO And lErro <> 31442 Then gError 59448
        If lErro <> SUCESSO Then gError 59449
        
        If objNFsPag.iExclusao = 0 And objNFiscal.iStatus <> STATUS_CANCELADO Then gError 43006
    
    End If
    
    If objNFsPag.iExclusao = 1 Then
    
        'Faz a exclusão da Nota Fiscal (EXCLUSAO FISICA)
        lErro = Comando_ExecutarPos(lComando1, "DELETE FROM NfsPag", lComando)
        If lErro <> AD_SQL_SUCESSO Then gError 83953
    
    Else
    
        'Faz a exclusão da Nota Fiscal (EXCLUSAO LÓGICA)
        lErro = Comando_ExecutarPos(lComando1, "UPDATE NfsPag SET Status = ? ", lComando, STATUS_EXCLUIDO)
        If lErro <> AD_SQL_SUCESSO Then gError 18354
    
    End If

    '############################################
    'Inserido por Wagner 22/03/2006
    lErro = CF("ProjetoInfo_Exclui", PRJ_CR_TIPO_NFPAG, objNFsPag.lNumIntDoc)
    If lErro <> SUCESSO Then gError 181764
    '############################################
    
    lErro = CF("Trata_Exclusao_Do_Destino", objNFsPag)
    If lErro <> SUCESSO Then gError 194220
    
    If objNFsPag.iExclusao = 1 Then
    
        'Exclui os lançamentos contábeis (se houverem) associados ao titulo em questao
        lErro = objContabil.Contabil_Exclui(objNFsPag.lNumIntDoc, CONTABIL_EXCLUI_EFETIVO, , , , objNFsPag.iFilialEmpresa)
        If lErro <> SUCESSO Then gError 20520
    
    Else
    
        'Exclui os lançamentos contábeis (se houverem) associados ao titulo em questao
        lErro = objContabil.Contabil_Exclui(objNFsPag.lNumIntDoc, , , , objNFsPag.dtDataEstorno, objNFsPag.iFilialEmpresa)
        If lErro <> SUCESSO Then gError 20520
    
    End If
    
    'Fecha os comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    
    NFPag_Exclui_EmTransacao = SUCESSO
    
    Exit Function
    
Erro_NFPag_Exclui_EmTransacao:

    NFPag_Exclui_EmTransacao = gErr
    
    Select Case gErr
    
        Case 18327, 18351
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 18349, 18350
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFSPAG1", gErr, objNFsPag.lNumNotaFiscal)
        
        Case 18352
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_NFSPAG", gErr, objNFsPag.lNumNotaFiscal)
        
        Case 18353
            Call Rotina_Erro(vbOKOnly, "ERRO_NF_VINCULADA", gErr, objNFsPag.lNumNotaFiscal, lNumTitulo)
            
        Case 18354
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_NFSPAG", gErr, objNFsPag.lNumNotaFiscal)
        
        Case 18355
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case 18357
            Call Rotina_Erro(vbOKOnly, "ERRO_NFPAG_NAO_CADASTRADA1", gErr, objNFsPag.lNumNotaFiscal)
            
        Case 20520, 43005, 59724, 59448, 59449, 181764, 194220
            
        Case 59725
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TITULOPAGAR_NAO_CADASTRADO", gErr, objTituloPagar.lNumIntDoc)
            
        Case 43006
            Call Rotina_Erro(vbOKOnly, "ERRO_NFPAGAR_VINCULADA_NFISCAL", gErr, objNFsPag.lNumNotaFiscal)
            
        Case 83953
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_NFSPAG", gErr, objNFsPag.lNumNotaFiscal)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148037)
            
    End Select
    
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    
    Exit Function
    
End Function
Function NFPag_Exclui(ByVal objNFsPag As ClassNFsPag, ByVal objContabil As ClassContabil) As Long
'Exclui a Nota Fiscal com código interno passado por parâmetro.

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_NFPag_Exclui

    'Abre transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 18356
    
    lErro = CF("NFPag_Exclui_EmTransacao", objNFsPag, objContabil)
    If lErro <> SUCESSO Then Error 62186
    
    'Encerra transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 18355
    
    NFPag_Exclui = SUCESSO
    
    Exit Function
    
Erro_NFPag_Exclui:

    NFPag_Exclui = Err
    
    Select Case Err
    
        Case 18355
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
        
        Case 18356
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
        
        Case 62186
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148038)
            
    End Select
    
    Call Transacao_Rollback
    
    Exit Function
    
End Function

Function NFPag_Grava_BD(ByVal objNFsPag As ClassNFsPag, Optional ByVal iOrigemNFsPag As Integer = NFPAG_CONTASAPAGAR) As Long
'Grava Nota Fiscal a Pagar no BD
'Chamada por NFPag_Grava DENTRO DE TANSAÇÃO
'O Parâmetro iOrigemNFsPag serve p/ identificar o documento que esta gerando a gravação.Incluido por Leo em 20/02/02
' 0 = Oriundo de Contas a Pagar, 1 = Inserção NotaFiscal, 2 = Alteração NotaFiscal
'Const NFPAG_CONTASAPAGAR = 0
'Const NFPAG_NFINSERCAO = 1
'Const NFPAG_NFALTERACAO = 2

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim lComando2 As Long
Dim iFilialEmpresa As Integer
Dim lNumIntDoc As Long
Dim tNFsPag As typeNFsPag
Dim vbMsgRes As VbMsgBoxResult
Dim dtDataEmissao As Date
Dim objFilialFornecedor As New ClassFilialFornecedor

On Error GoTo Erro_NFPag_Grava_BD

    lComando = 0
    lComando1 = 0
    
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 18430
    
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 18431
    
    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then gError 94358
        
    'Trecho incluido por leo em 25/02/02
    
    'Procura em NFsPagBaixadas se existe alguma Nota Fiscal com o índice fornecido pela Tela - Fornecedor, Filial, Numero, DataEmissao
    lErro = Comando_Executar(lComando2, "SELECT NumIntDoc,Fornecedor,Filial,ValorTotal,ValorIRRF, PISRetido, COFINSRetido, CSLLRetido, TaxaMoeda FROM NfsPagBaixadas WHERE Fornecedor = ? AND Filial = ? AND NumNotaFiscal = ? AND DataEmissao = ?", tNFsPag.lNumIntDoc, tNFsPag.lFornecedor, tNFsPag.iFilial, tNFsPag.dValorTotal, tNFsPag.dValorIRRF, tNFsPag.dPISRetido, tNFsPag.dCOFINSRetido, tNFsPag.dCSLLRetido, tNFsPag.dTaxaMoeda, objNFsPag.lFornecedor, objNFsPag.iFilial, objNFsPag.lNumNotaFiscal, objNFsPag.dtDataEmissao)
    If lErro <> AD_SQL_SUCESSO Then gError 94360
    
    lErro = Comando_BuscarPrimeiro(lComando2)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 94361
    
    'Se a nota em questão esta baixada ...
    If lErro = AD_SQL_SUCESSO Then
        
        '... e veio do cp
        If iOrigemNFsPag = NFPAG_CONTASAPAGAR Then
        
            'poe dados necessarios para gravar ctb no obj
            objNFsPag.lNumIntDoc = tNFsPag.lNumIntDoc
            objNFsPag.lFornecedor = tNFsPag.lFornecedor
            objNFsPag.iFilial = tNFsPag.iFilial
            objNFsPag.dValorTotal = tNFsPag.dValorTotal
            objNFsPag.dValorIRRF = tNFsPag.dValorIRRF
            objNFsPag.dPISRetido = tNFsPag.dPISRetido
            objNFsPag.dCOFINSRetido = tNFsPag.dCOFINSRetido
            objNFsPag.dCSLLRetido = tNFsPag.dCSLLRetido
            objNFsPag.dTaxaMoeda = tNFsPag.dTaxaMoeda
            
            'exibe aviso de alteracao somente da ctb...
            If Rotina_Aviso(vbYesNo, "AVISO_TITBAIXADO_GRAVA_CONTAB_SOMENTE") = vbNo Then gError 120100
            
            'fecha os comandos
            Call Comando_Fechar(lComando)
            Call Comando_Fechar(lComando1)
            Call Comando_Fechar(lComando2)
            
            'retorna sucesso
            NFPag_Grava_BD = SUCESSO
            
            Exit Function
            
        'senao, mantem o tratamento que era usado anteriormente (msg de erro...)
        Else
        
            gError 94362
            
        End If
    
    
    End If
        
    tNFsPag.lNumIntDoc = 0
            
    'Leo até aqui
    
    tNFsPag.sHistorico = String(STRING_NFSPAG_HISTORICO, 0)
            
    'Procura em NFsPag se existe alguma Nota Fiscal com o índice fornecido pela Tela - Fornecedor, Filial, Numero, DataEmissao
    lErro = Comando_ExecutarPos(lComando, "SELECT NumIntDoc, FilialEmpresa, DataVencimento, ValorTotal, ValorSeguro, ValorFrete, OutrasDespesas, ValorProdutos, ValorIRRF, ValorICMS, ValorICMSSubst, CreditoICMS, ValorIPI, CreditoIPI, PISRetido, COFINSRetido, CSLLRetido, TaxaMoeda, Historico, ISSRetido, INSSRetido, ValorINSS FROM NfsPag WHERE Fornecedor = ? AND Filial = ? AND NumNotaFiscal = ? AND DataEmissao = ? AND Status <> ? ", 0, tNFsPag.lNumIntDoc, tNFsPag.iFilialEmpresa, tNFsPag.dtDataVencimento, tNFsPag.dValorTotal, tNFsPag.dValorSeguro, tNFsPag.dValorFrete, tNFsPag.dOutrasDespesas, tNFsPag.dValorProdutos, tNFsPag.dValorIRRF, tNFsPag.dValorICMS, tNFsPag.dValorICMSSubst, tNFsPag.iCreditoICMS, tNFsPag.dValorIPI, tNFsPag.iCreditoIPI, tNFsPag.dPISRetido, tNFsPag.dCOFINSRetido, tNFsPag.dCSLLRetido, tNFsPag.dTaxaMoeda, tNFsPag.sHistorico, tNFsPag.dISSRetido, tNFsPag.iINSSRetido, tNFsPag.dValorINSS, objNFsPag.lFornecedor, objNFsPag.iFilial, objNFsPag.lNumNotaFiscal, objNFsPag.dtDataEmissao, STATUS_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then gError 18302
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 18303
    
    'Se existir
    If lErro = AD_SQL_SUCESSO Then
        
        'Se é uma Inserção de Nota Fiscal, Erro. Nota Fiscal já existe.
        If iOrigemNFsPag = NFPAG_NFINSERCAO Then gError 94330 'Incluido por Leo em 20/02/02
        
        'Verifica se algum campo não alterável foi modificado
        If tNFsPag.dValorTotal <> objNFsPag.dValorTotal Or tNFsPag.dValorSeguro <> objNFsPag.dValorSeguro Or tNFsPag.dValorFrete <> objNFsPag.dValorFrete Or tNFsPag.dOutrasDespesas <> objNFsPag.dOutrasDespesas Or _
           tNFsPag.dValorProdutos <> objNFsPag.dValorProdutos Or tNFsPag.dValorIRRF <> objNFsPag.dValorIRRF Or tNFsPag.dValorICMS <> objNFsPag.dValorICMS Or tNFsPag.dValorICMSSubst <> objNFsPag.dValorICMSSubst Or _
           tNFsPag.iCreditoICMS <> objNFsPag.iCreditoICMS Or tNFsPag.dValorIPI <> tNFsPag.dValorIPI Or tNFsPag.iCreditoIPI <> objNFsPag.iCreditoIPI Or _
           tNFsPag.dPISRetido <> objNFsPag.dPISRetido Or tNFsPag.dCOFINSRetido <> objNFsPag.dCOFINSRetido Or tNFsPag.dCSLLRetido <> objNFsPag.dCSLLRetido Or _
           tNFsPag.dISSRetido <> objNFsPag.dISSRetido Or tNFsPag.iINSSRetido <> objNFsPag.iINSSRetido Or tNFsPag.dValorINSS <> objNFsPag.dValorINSS _
           Then
           
           'Avisar que só a data de vencimento será alterada
            vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_DATAVENCIMENTO_ALTERAVEL")
            If vbMsgRes = vbNo Then gError 18315
           
        End If
   
        'Altera no BD
        lErro = Comando_ExecutarPos(lComando1, "UPDATE NfsPag SET DataVencimento =?, Historico=?", lComando, objNFsPag.dtDataVencimento, objNFsPag.sHistorico)
        If lErro <> AD_SQL_SUCESSO Then gError 18316
    
        objNFsPag.lNumIntDoc = tNFsPag.lNumIntDoc

    'Se não encontrar
    ElseIf lErro = AD_SQL_SEM_DADOS Then
    
        'Verifica se a Nota Fiscal está baixada
        lErro = Comando_Executar(lComando, "SELECT FilialEmpresa FROM NfsPagBaixadas WHERE Fornecedor = ? AND Filial = ? AND NumNotaFiscal = ? AND DataEmissao = ? AND Status <> ? ", iFilialEmpresa, objNFsPag.lFornecedor, objNFsPag.iFilial, objNFsPag.lNumNotaFiscal, objNFsPag.dtDataEmissao, STATUS_EXCLUIDO)
        If lErro <> AD_SQL_SUCESSO Then gError 18305
        
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 18306
   
        'Se estiver erro
        If lErro = AD_SQL_SUCESSO Then gError 18307
        
        'faz verificacoes p/evitar entrada em duplicidade
        lErro = CF("NFPag_Testa_Repeticao", objNFsPag)
        If lErro <> SUCESSO Then gError 18530
    
        objFilialFornecedor.lCodFornecedor = objNFsPag.lFornecedor
        objFilialFornecedor.iCodFilial = objNFsPag.iFilial
        
        'Lê a Filial Fornecedor
        lErro = CF("FilialFornecedor_Lock1", objFilialFornecedor)
        If lErro <> SUCESSO And lErro <> 18900 Then gError 58633
    
        'Se não encontrar Filial Fornecedor --> Erro
        If lErro = 18900 Then gError 58634

        'Gera um novo número interno
        lErro = CF("NFPag_Automatico", lNumIntDoc)
        If lErro <> SUCESSO Then gError 18308

        objNFsPag.lNumIntDoc = lNumIntDoc
        If objNFsPag.iFilialEmpresa = EMPRESA_TODA Then objNFsPag.iFilialEmpresa = giFilialEmpresa
        objNFsPag.iStatus = STATUS_LANCADO
        
        'Inserir o novo registro em NfsPag
        lErro = Comando_Executar(lComando, "INSERT INTO NfsPag (NumIntDoc,FilialEmpresa,Fornecedor,Filial,NumNotaFiscal,DataEmissao,Status,DataVencimento,ValorTotal,ValorSeguro, ValorFrete, OutrasDespesas, ValorProdutos, ValorIRRF, ValorICMS, ValorICMSSUbst, CreditoICMS, ValorIPI, CreditoIPI,NumIntTitPag, PISRetido, COFINSRetido, CSLLRetido, TaxaMoeda, Historico, ISSRetido, INSSRetido, ValorINSS) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
            objNFsPag.lNumIntDoc, objNFsPag.iFilialEmpresa, objNFsPag.lFornecedor, objNFsPag.iFilial, objNFsPag.lNumNotaFiscal, objNFsPag.dtDataEmissao, objNFsPag.iStatus, objNFsPag.dtDataVencimento, objNFsPag.dValorTotal, objNFsPag.dValorSeguro, objNFsPag.dValorFrete, objNFsPag.dOutrasDespesas, objNFsPag.dValorProdutos, objNFsPag.dValorIRRF, objNFsPag.dValorICMS, objNFsPag.dValorICMSSubst, objNFsPag.iCreditoICMS, objNFsPag.dValorIPI, objNFsPag.iCreditoIPI, objNFsPag.lNumIntTitPag, objNFsPag.dPISRetido, objNFsPag.dCOFINSRetido, objNFsPag.dCSLLRetido, objNFsPag.dTaxaMoeda, objNFsPag.sHistorico, objNFsPag.dISSRetido, objNFsPag.iINSSRetido, objNFsPag.dValorINSS)
        If lErro <> AD_SQL_SUCESSO Then gError 18317

    End If
   
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    
    NFPag_Grava_BD = SUCESSO
    
    Exit Function

Erro_NFPag_Grava_BD:

    NFPag_Grava_BD = gErr
    
    Select Case gErr
        
        Case 18302, 18303
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFSPAG1", gErr, objNFsPag.lNumNotaFiscal)
            
        Case 18305, 18306, 94360, 94361
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFSPAGBAIXADAS", gErr, objNFsPag.lNumNotaFiscal)
            
        Case 18307
            Call Rotina_Erro(vbOKOnly, "ERRO_NF_BAIXADA_MODIFICACAO", gErr, objNFsPag.lNumNotaFiscal)
            
        Case 18315, 18308, 18530, 58633, 120100 'Tratados pelas rotinas chamadas
            
        Case 18316
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_NFSPAG", gErr, objNFsPag.lNumNotaFiscal)
            
        Case 18317
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_NFSPAG", gErr, objNFsPag.lNumNotaFiscal)
       
        Case 18430, 18431, 94358, 94359
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 58634
            Call Rotina_Erro(vbOKOnly, "ERRO_FILIALFORNECEDOR_NAO_CADASTRADA", gErr, objNFsPag.lFornecedor, objNFsPag.iFilial)
        
        Case 94330
            Call Rotina_Erro(vbOKOnly, "ERRO_NFSPAG_EXISTENTE", gErr, objNFsPag.lNumNotaFiscal)
                       
        Case 94362
            Call Rotina_Erro(vbOKOnly, "ERRO_NOTA_BAIXADA_NFSPAGBAIXADAS", gErr, objNFsPag.lNumNotaFiscal)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148039)
                
    End Select
        
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    
    Exit Function
        
End Function

Function Portador_Automatico(sCodigo As String) As Long
'Retorna o código do próximo Portador disponível

Dim lErro As Long
Dim lNumAuto As Long

On Error GoTo Erro_Portador_Automatico

    'Obtém o número automático do BD
    lErro = CF("CPRConfig_ObterAutomatico", "NUM_PROX_PORTADOR", "Portador", "Codigo", lNumAuto)
    If lErro <> SUCESSO Then Error 32029

    sCodigo = CStr(lNumAuto)

    Portador_Automatico = SUCESSO

    Exit Function

Erro_Portador_Automatico:

    Portador_Automatico = Err

    Select Case Err

        Case 32029

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148040)

    End Select

    Exit Function

End Function

Function Portador_Grava(ByVal objPortador As ClassPortador) As Long
'Atualiza ou insere um novo registro na tabela Portador

Dim lErro As Long
Dim iCodigo As Integer
Dim alComando(0 To 4) As Long
Dim iIndice As Integer
Dim lTransacao As Long
Dim sNomeReduzido As String
Dim iBanco As Integer

On Error GoTo Erro_Portador_Grava

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 16510
    Next
    
    'inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 16511

    sNomeReduzido = String(STRING_PORTADOR_NOME_REDUZIDO, 0)

    'pesquisa nome reduzido de outros Portadores no BD
    lErro = Comando_Executar(alComando(0), "SELECT NomeReduzido FROM Portador WHERE Codigo <> ? AND NomeReduzido = ?", sNomeReduzido, objPortador.iCodigo, objPortador.sNomeReduzido)
    If lErro <> AD_SQL_SUCESSO Then Error 16512

    'verifica resultado da pesquisa
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 16513
    If lErro <> AD_SQL_SEM_DADOS Then Error 16514

    'pesquisa Portador no BD
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Codigo, Banco FROM Portador WHERE Codigo = ? ", 0, iCodigo, iBanco, objPortador.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 16515

    'verifica resultado da pesquisa
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 16516

    If lErro = AD_SQL_SEM_DADOS Then
    'Portador nao pertence ao BD

        If objPortador.iBanco <> 0 Then
        
            lErro = CF("Banco_Lock", alComando(3), objPortador.iBanco)
            If lErro <> SUCESSO And lErro <> 19384 Then Error 16508
        
            If lErro = 19384 Then Error 16509
        
        End If
        
        'insere novo registro na tabela Portador
        lErro = Comando_Executar(alComando(2), "INSERT INTO Portador (Codigo, NomeReduzido, Nome, Inativo, Banco) VALUES (?,?,?,?,?)", objPortador.iCodigo, objPortador.sNomeReduzido, objPortador.sNome, objPortador.iInativo, objPortador.iBanco)
        If lErro <> AD_SQL_SUCESSO Then Error 16517

    Else
    'Portador existe no BD

        If (objPortador.iBanco <> 0) And (objPortador.iBanco <> iBanco) Then
        
            lErro = CF("Banco_Lock", alComando(3), objPortador.iBanco)
            If lErro <> SUCESSO And lErro <> 19384 Then Error 19386
        
            If lErro = 19384 Then Error 19387
        
        End If

        'altera registro na tabela Portador
        lErro = Comando_ExecutarPos(alComando(2), "UPDATE Portador SET Codigo = ?, NomeReduzido = ?, Nome = ?, Inativo = ? , Banco = ?", alComando(1), objPortador.iCodigo, objPortador.sNomeReduzido, objPortador.sNome, objPortador.iInativo, objPortador.iBanco)
        If lErro <> AD_SQL_SUCESSO Then Error 16518

    End If

    'confirma a Transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 16519

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Portador_Grava = SUCESSO

    Exit Function

Erro_Portador_Grava:

    Portador_Grava = Err

        Select Case Err

        Case 16508, 19386
                       
        Case 16509, 19387
            Call Rotina_Erro(vbOKOnly, "ERRO_BANCO_NAO_CADASTRADO", Err, objPortador.iBanco)
       
        Case 16510
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 16511
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 16512, 16513, 16515, 16516
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PORTADOR", Err, objPortador.iCodigo)

        Case 16514
            Call Rotina_Erro(vbOKOnly, "ERRO_NOME_REDUZIDO_PORTADOR_REPETIDO", Err)

        Case 16517
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_PORTADOR", Err, objPortador.iCodigo)

        Case 16518
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_PORTADOR", Err, objPortador.iCodigo)

        Case 16519
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148041)

    End Select

    Call Transacao_Rollback
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function TipoFornecedor_Grava(ByVal objTipoFornecedor As ClassTipoFornecedor) As Long
'Atualiza ou insere um novo registro na tabela TiposDeFornecedor

Dim lErro As Long







Dim lTransacao As Long


On Error GoTo Erro_TipoFornecedor_Grava

    'inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 16231

    lErro = CF("TipoFornecedor_Grava_EmTrans", objTipoFornecedor)
    If lErro <> SUCESSO Then gError 130714

    'Confirma a Transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 16239

    TipoFornecedor_Grava = SUCESSO

    Exit Function

Erro_TipoFornecedor_Grava:

    TipoFornecedor_Grava = gErr

    Select Case gErr

        Case 130714
        
        Case 16231
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 16239
             Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148042)

    End Select

    Call Transacao_Rollback
    
    Exit Function

End Function

Function TipoFornecedor_Grava_EmTrans(ByVal objTipoFornecedor As ClassTipoFornecedor) As Long
'Atualiza ou insere um novo registro na tabela TiposDeFornecedor

Dim lErro As Long
Dim iCodigo As Integer
Dim lComando As Long
Dim lComando1 As Long
Dim lComando2 As Long
Dim lComando3 As Long
Dim lComando4 As Long
Dim lComando5 As Long
Dim sDescricao As String

On Error GoTo Erro_TipoFornecedor_Grava_EmTrans

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 16228

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 16229

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 16230

    lComando3 = Comando_Abrir()
    If lComando3 = 0 Then Error 16353

    lComando4 = Comando_Abrir()
    If lComando4 = 0 Then Error 16354

    lComando5 = Comando_Abrir()
    If lComando5 = 0 Then Error 16355





    'Pesquisa descrição dos outros Tipos de Fornecedores no BD
    lErro = Comando_Executar(lComando, "SELECT Codigo FROM TiposDeFornecedor WHERE Codigo <> ? AND Descricao = ?", iCodigo, objTipoFornecedor.iCodigo, objTipoFornecedor.sDescricao)
    If lErro <> AD_SQL_SUCESSO Then Error 16232

    'verifica resultado da pesquisa
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 16233

    If lErro <> AD_SQL_SEM_DADOS Then Error 16234

    'locka Condicao de Pagamento
    If objTipoFornecedor.iCondicaoPagto <> 0 Then
        
        lErro = CF("CondicaoPagto_Lock", lComando3, objTipoFornecedor.iCondicaoPagto)
        If lErro <> SUCESSO Then Error 16356
                            
    End If
    
    'Locka Conta Despesa
    If objTipoFornecedor.sContaDespesa <> "" Then
        
        lErro = CF("Conta_Analitica_Lock", objTipoFornecedor.sContaDespesa, MODULO_CONTABILIDADE)
        If lErro <> SUCESSO Then Error 16357
        
    End If
    
    'locka Histórico Padrão
    If objTipoFornecedor.iHistPadraoDespesa <> 0 Then
        
        lErro = CF("HistPadrao_Lock", lComando5, objTipoFornecedor.iHistPadraoDespesa)
        If lErro <> SUCESSO Then Error 16358
        
    End If
            
    'pesquisa Tipo de Fornecedor no BD
    lErro = Comando_ExecutarPos(lComando1, "SELECT Codigo FROM TiposDeFornecedor WHERE Codigo = ? ", 0, iCodigo, objTipoFornecedor.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 16235

    'verifica resultado da pesquisa
    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 16236

    If lErro = AD_SQL_SEM_DADOS Then
    'Tipo de Fornecedor nao pertence ao BD

        'Insere novo registro na tabela TiposDeFornecedor
        lErro = Comando_Executar(lComando2, "INSERT INTO TiposDeFornecedor(Codigo, Descricao, CondicaoPagto, Desconto, Observacao, ContaDespesa, HistPadraoDespesa) VALUES (?,?,?,?,?,?,?)", objTipoFornecedor.iCodigo, objTipoFornecedor.sDescricao, objTipoFornecedor.iCondicaoPagto, objTipoFornecedor.dDesconto, objTipoFornecedor.sObservacao, objTipoFornecedor.sContaDespesa, objTipoFornecedor.iHistPadraoDespesa)
        If lErro <> AD_SQL_SUCESSO Then Error 16237

    Else
    'Tipo de Fornecedor já existe no BD

        'Altera registro na tabela TiposDeFornecedor
        lErro = Comando_ExecutarPos(lComando2, "UPDATE TiposDeFornecedor SET Descricao = ? , CondicaoPagto = ? , Desconto = ? , Observacao = ? , ContaDespesa = ? , HistPadraoDespesa = ?", lComando1, objTipoFornecedor.sDescricao, objTipoFornecedor.iCondicaoPagto, objTipoFornecedor.dDesconto, objTipoFornecedor.sObservacao, objTipoFornecedor.sContaDespesa, objTipoFornecedor.iHistPadraoDespesa)
        If lErro <> AD_SQL_SUCESSO Then Error 16238

    End If





    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)
    Call Comando_Fechar(lComando4)
    Call Comando_Fechar(lComando5)

    TipoFornecedor_Grava_EmTrans = SUCESSO

    Exit Function

Erro_TipoFornecedor_Grava_EmTrans:

    TipoFornecedor_Grava_EmTrans = Err

    Select Case Err

        Case 16228, 16229, 16230, 16353, 16354, 16355
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)




        Case 16232, 16233, 16235, 16236
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOSFORNECEDOR", Err)

        Case 16234
            Call Rotina_Erro(vbOKOnly, "ERRO_DESCRICAO_TIPO_FORNECEDOR_REPETIDA", Err, iCodigo)

        Case 16237
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_TIPOSDEFORNECEDOR", Err, objTipoFornecedor.iCodigo)

        Case 16238
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_TIPOSDEFORNECEDOR", Err, objTipoFornecedor.iCodigo)




        Case 16356, 16357, 16358
            'Erro tratado nas rotinas chamadas
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148042)

    End Select


    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)
    Call Comando_Fechar(lComando4)
    Call Comando_Fechar(lComando5)
    
    Exit Function

End Function

Function TipoFornecedor_Exclui(ByVal objTipoFornecedor As ClassTipoFornecedor) As Long
'exclui Tipo de Fornecedor do BD

Dim lComando1 As Long
Dim lComando2 As Long
Dim lTransacao As Long
Dim lErro As Long
Dim sDescricao As String

On Error GoTo Erro_TipoFornecedor_Exclui

    lComando1 = 0
    lComando2 = 0
    lTransacao = 0

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 16334

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 16335

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 16336

    sDescricao = String(STRING_TIPO_FORNECEDOR_DESCRICAO, 0)
 
    'pesquisa Tipo de Fornecedor no BD
    lErro = Comando_ExecutarPos(lComando1, "SELECT Descricao FROM TiposDeFornecedor WHERE Codigo = ? ", 0, sDescricao, objTipoFornecedor.iCodigo)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 16337

    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 16338

    If lErro = AD_SQL_SEM_DADOS Then Error 16339

    'lock do Tipo de Fornecedor
    lErro = Comando_LockExclusive(lComando1)
    If lErro <> AD_SQL_SUCESSO Then Error 16340

    'verifica se Tipo do Fornecedor esta relacionada com Fornecedores
    lErro = CF("Fornecedores_Le_Tipo", objTipoFornecedor.iCodigo)

    If lErro = SUCESSO Then Error 16341
    If lErro <> 16348 Then Error 16342
 
    'exclui Tipo de Fornecedor da tabela TiposDeFornecedor
    lErro = Comando_ExecutarPos(lComando2, "DELETE FROM TiposDeFornecedor", lComando1)
    If lErro <> AD_SQL_SUCESSO Then Error 16343

    'confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 16344

    lErro = Comando_Fechar(lComando1)
    lErro = Comando_Fechar(lComando2)

    TipoFornecedor_Exclui = SUCESSO

    Exit Function

Erro_TipoFornecedor_Exclui:

    TipoFornecedor_Exclui = Err

    Select Case Err
                       
        Case 16334, 16335
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 16336
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 16337, 16338
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOSFORNECEDOR", Err)

        Case 16339
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPODEFORNECEDOR_NAO_CADASTRADO", Err, objTipoFornecedor.iCodigo)

        Case 16340
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_TIPOSDEFORNECEDOR", Err, objTipoFornecedor.iCodigo)

        Case 16341
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPODEFORNECEDOR_RELACIONADO_COM_FORNECEDOR", Err)
            
        Case 16342
            'Erro tratado na rotina chamada
        
        Case 16343
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_TIPOSDEFORNECEDOR", Err, objTipoFornecedor.iCodigo)

        Case 16344
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148043)

    End Select

    Call Transacao_Rollback
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)

    Exit Function

End Function

Function HistPadrao_Lock(ByVal lComando As Long, ByVal iHistPadrao As Integer) As Long
'Rotina executada dentro de uma transacao
'faz lock shared no Histórico Padrão passado como parametro

Dim lErro As Long
Dim iHistPadrao1 As Integer

On Error GoTo Erro_HistPadrao_Lock
    
    'pesquisa Histórico Padrão no BD
    lErro = Comando_ExecutarLockado(lComando, "SELECT HistPadrao FROM HistPadrao WHERE HistPadrao = ? ", iHistPadrao1, iHistPadrao)
    If lErro <> AD_SQL_SUCESSO Then Error 16363

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 16364

    If lErro = AD_SQL_SEM_DADOS Then Error 16365
    
    lErro = Comando_LockShared(lComando)
    If lErro <> AD_SQL_SUCESSO Then Error 16366
            
    HistPadrao_Lock = SUCESSO

    Exit Function

Erro_HistPadrao_Lock:

    HistPadrao_Lock = Err

    Select Case Err

        Case 16363, 16364
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_HISTPADRAO", Err, iHistPadrao)

        Case 16365
            Call Rotina_Erro(vbOKOnly, "ERRO_HISTPADRAO_NAO_CADASTRADO", Err)

        Case 16366
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_HISTPADRAO", Err)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148044)

    End Select

    Exit Function

End Function

Function TipoFornecedor_Automatico(iCodigo As Integer) As Long
'retorna o código do próximo Tipo de Fornecedor disponivel

Dim lCodigo As Long, lErro As Long

On Error GoTo Erro_TipoFornecedor_Automatico

    lErro = CF("Config_ObterAutomatico", "CPRConfig", "NUM_PROX_TIPO_FORNECEDOR", "TiposDeFornecedor", "Codigo", lCodigo)
    If lErro <> SUCESSO Then Error 56674
    
    iCodigo = lCodigo
    
    TipoFornecedor_Automatico = SUCESSO

    Exit Function

Erro_TipoFornecedor_Automatico:

    TipoFornecedor_Automatico = Err

    Select Case Err

        Case 56674
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148045)

    End Select
    
    Exit Function

End Function

Function Fluxo_Grava(ByVal objFluxo As ClassFluxo) As Long
'grava o fluxo de caixa

Dim lErro As Long
Dim lTransacao As Long
Dim alComando(1 To 2) As Long
Dim iIndice As Integer
Dim lFluxoId As Long
Dim dtDataFinal As Date
Dim vbMsgRes As VbMsgBoxResult

On Error GoTo Erro_Fluxo_Grava

    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 10928

    For iIndice = LBound(alComando) To UBound(alComando)

        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 10929

    Next

    'Pesquisa o fluxo no BD
    lErro = Comando_ExecutarPos(alComando(1), "SELECT FluxoId, DataFinal FROM Fluxo WHERE Fluxo =? AND FilialEmpresa = ?", 0, lFluxoId, dtDataFinal, objFluxo.sFluxo, objFluxo.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then Error 10930

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 10931

    'se o fluxo já estiver cadastrado
    If lErro = AD_SQL_SUCESSO Then

        If dtDataFinal <> objFluxo.dtDataFinal Then

            'se a data final cadastrada não coincidir com a informada na tela ==> pergunta se quer prosseguir com a alteracao, já que a datafinal não será alterada
            vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_FLUXO_DATAFINAL_INALTERAVEL")

            If vbMsgRes = vbNo Then
                Call Transacao_Rollback
                For iIndice = LBound(alComando) To UBound(alComando)
                    Call Comando_Fechar(alComando(iIndice))
                Next
                Exit Function
            End If

        End If

        'Atualiza o fluxo no BD
        lErro = Comando_ExecutarPos(alComando(2), "UPDATE Fluxo SET Descricao = ?", alComando(1), objFluxo.sDescricao)
        If lErro <> AD_SQL_SUCESSO Then Error 10932

    Else

        lErro = CF("Fluxo_Grava_Fluxo", objFluxo)
        If lErro <> SUCESSO Then Error 10935

        lErro = CF("FluxoAnalitico_Grava", objFluxo)
        If lErro <> SUCESSO Then Error 10937

        lErro = CF("FluxoSaldosIniciais_Grava", objFluxo)
        If lErro <> SUCESSO Then Error 20069

        lErro = CF("FluxoAplic_Grava_Aplicacoes", objFluxo)
        If lErro <> SUCESSO Then Error 20082

        lErro = CF("FluxoConsolidado_Grava", objFluxo)
        If lErro <> SUCESSO Then Error 20332

    End If

    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 10936

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Fluxo_Grava = SUCESSO

    Exit Function

Erro_Fluxo_Grava:

    Fluxo_Grava = Err

    Select Case Err

        Case 10928
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 10929
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 10930, 10931
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FLUXO", Err, objFluxo.sFluxo)

        Case 10932
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_FLUXO", Err, objFluxo.sFluxo)

        Case 10935, 10937, 20069, 20082, 20332

        Case 10936
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148046)

    End Select

    Call Transacao_Rollback
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Fluxo_Grava_Fluxo(ByVal objFluxo As ClassFluxo) As Long
'insere o fluxo de caixa
'IMPORTANTE: TEM QUE SER CHAMADA DENTRO DE TRANSACAO

Dim lErro As Long
Dim lComando As Long
Dim lFluxoId As Long

On Error GoTo Erro_Fluxo_Grava_Fluxo

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 10938

    lErro = CF("CPRConfig_ObterNumInt", NUM_PROX_FLUXO, lFluxoId)
    If lErro <> SUCESSO Then gError 20120

    objFluxo.lFluxoId = lFluxoId

    lErro = Fluxo_Grava_NumIntDoc_Baixas(objFluxo)
    If lErro <> SUCESSO Then gError 83794

    'Insere o fluxo no BD
    lErro = Comando_Executar(lComando, "INSERT INTO Fluxo (Fluxo, Descricao, DataInicial, DataFinal, DataDadosReais, FluxoId, FilialEmpresa, NumMovCta, NumIntBaixaPag, NumIntBaixaRec) VALUES (?,?,?,?,?,?,?,?,?,?)", objFluxo.sFluxo, objFluxo.sDescricao, objFluxo.dtDataBase, objFluxo.dtDataFinal, DATA_NULA, objFluxo.lFluxoId, objFluxo.iFilialEmpresa, objFluxo.lNumMovCta, objFluxo.lNumIntBaixaPag, objFluxo.lNumIntBaixaRec)
    If lErro <> AD_SQL_SUCESSO Then gError 10939

    Call Comando_Fechar(lComando)

    Fluxo_Grava_Fluxo = SUCESSO

    Exit Function

Erro_Fluxo_Grava_Fluxo:

    Fluxo_Grava_Fluxo = gErr

    Select Case gErr

        Case 10938
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 10939
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FLUXO", gErr, objFluxo.sFluxo)

        Case 20120, 83794

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148047)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function FluxoAnalitico_Grava(ByVal objFluxo As ClassFluxo) As Long
'grava o fluxo de caixa analitico
'IMPORTANTE: TEM QUE SER CHAMADA DENTRO DE TRANSACAO

Dim lErro As Long
Dim iCancel As Integer

On Error GoTo Erro_FluxoAnalitico_Grava

    lErro = Acompanha_Fluxo(objFluxo)
    If lErro <> SUCESSO Then gError 188617

    lErro = CF("FluxoAnalitico_Grava_Pagtos", objFluxo)
    If lErro <> SUCESSO Then gError 10940

    lErro = CF("FluxoAnalitico_Grava_Recebtos", objFluxo)
    If lErro <> SUCESSO Then gError 10941

    If Not objFluxo.objTela Is Nothing Then objFluxo.objTela.Form_Unload (iCancel)

    FluxoAnalitico_Grava = SUCESSO

    Exit Function

Erro_FluxoAnalitico_Grava:

    FluxoAnalitico_Grava = gErr

    Select Case gErr

        Case 10940, 10941, 188617
            If Not objFluxo.objTela Is Nothing Then objFluxo.objTela.Form_Unload (iCancel)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148048)

    End Select

    Exit Function

End Function

Function Fluxo_ObterDadosReais_Pagtos(ByVal objFluxo As ClassFluxo) As Long
Dim lErro As Long
'obtem dados de pagtos
On Error GoTo Erro_Fluxo_ObterDadosReais_Pagtos

    'ler pagtos de titulos nao baixados
    lErro = Fluxo_ObterDadosReais_Pagtos1(objFluxo)
    If lErro <> SUCESSO Then Error 7579

    'ler pagtos de titulos baixados
    lErro = Fluxo_ObterDadosReais_Pagtos3(objFluxo)
    If lErro <> SUCESSO Then Error 7580

    'Baixas por credpagforn
    lErro = Fluxo_ObterDadosReais_Pagtos4(objFluxo)
    If lErro <> SUCESSO Then Error 7581

    'Baixas por pagtos antecipados
    lErro = Fluxo_ObterDadosReais_Pagtos5(objFluxo)
    If lErro <> SUCESSO Then Error 7590

    Fluxo_ObterDadosReais_Pagtos = SUCESSO

    Exit Function

Erro_Fluxo_ObterDadosReais_Pagtos:

    Fluxo_ObterDadosReais_Pagtos = Err

    Select Case Err

        Case 7579 To 7581

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148049)

    End Select

    Exit Function

End Function

Private Function Fluxo_Comando_BuscarProximo(ByVal lComando As Long, dtData As Date, ByVal objFluxo As ClassFluxo, ByVal iDiasRetencao As Integer) As Long

Dim lErro As Long
Dim dtDataVenctoReal As Date
Dim iIndice As Integer

On Error GoTo Erro_Fluxo_Comando_BuscarProximo


    lErro = AD_SQL_SUCESSO

    Do While lErro = AD_SQL_SUCESSO

        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 83821
    
        If lErro = AD_SQL_SUCESSO Then
    
            lErro = CF("DataVencto_Real", dtData, dtDataVenctoReal)
            If lErro <> SUCESSO Then gError 83822
    
            For iIndice = 1 To iDiasRetencao Step 1
            
                dtData = dtDataVenctoReal + 1
            
                lErro = CF("DataVencto_Real", dtData, dtDataVenctoReal)
                If lErro <> SUCESSO Then gError 83822
            
            Next
            
            dtData = dtDataVenctoReal
    
            If dtDataVenctoReal <= objFluxo.dtDataFinal And dtDataVenctoReal >= objFluxo.dtDataBase Then Exit Do
    
        End If

    Loop

    Fluxo_Comando_BuscarProximo = lErro

    Exit Function

Erro_Fluxo_Comando_BuscarProximo:

    Fluxo_Comando_BuscarProximo = gErr
    
    Select Case gErr
    
        Case 83821
            Fluxo_Comando_BuscarProximo = lErro
    
        Case 83822
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148050)

    End Select

    Exit Function

End Function

Function FluxoAnalitico_Grava_Pagtos(ByVal objFluxo As ClassFluxo) As Long
'grava os pagamentos no fluxo analitico
'IMPORTANTE: TEM QUE SER CHAMADA DENTRO DE TRANSACAO

Dim lErro As Long
Dim alErro(1 To 5) As Long
Dim alComando(1 To 11) As Long
Dim iIndice As Integer
Dim tFluxoAux As typeFluxoAux

On Error GoTo Erro_FluxoAnalitico_Grava_Pagtos

    For iIndice = LBound(alComando) To UBound(alComando)

        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 10942

    Next

    If objFluxo.sFluxo <> "fluxocontabil" Then

        'preenche tabela auxiliar com dados de créditos com fornecedores
        lErro = Comando_Executar(alComando(7), "INSERT INTO FluxoCredAntecip (FluxoId, FilialEmpresa, Fornecedor, Filial, SiglaDocumento, NumTitulo, Saldo, TipoReg, SiglaDocOrig) SELECT ?, FilialEmpresa, Fornecedor, Filial, ?, NumTitulo, Saldo,?, SiglaDocumento FROM CreditosPagForn WHERE Status = ? AND Saldo > 0", objFluxo.lFluxoId, TIPODOC_CREDITOSPAGFORN, FLUXOANALITICO_TIPOREG_PAGTO, STATUS_LANCADO)
        If lErro <> SUCESSO Then Error 21244
    
        'preenche tabela auxiliar com dados de pagamentos antecipados
        lErro = Comando_Executar(alComando(8), "INSERT INTO FluxoCredAntecip (FluxoId, FilialEmpresa, Fornecedor, Filial, SiglaDocumento, NumTitulo, Saldo, TipoReg, SiglaDocOrig) SELECT ?, FilialEmpresa, Fornecedor, Filial_Fornecedor, ?, PagtosAntecipados.NumMovto, SaldoNaoApropriado, ?, ? FROM PagtosAntecipados, MovimentosContaCorrente WHERE PagtosAntecipados.Excluido <> ? AND SaldoNaoApropriado > 0 AND PagtosAntecipados.NumMovto = MovimentosContaCorrente.NumMovto", objFluxo.lFluxoId, TIPODOC_PAGAMENTO_ANTECIPADO, FLUXOANALITICO_TIPOREG_PAGTO, TIPODOC_PAGAMENTO_ANTECIPADO, EXCLUIDO)
        If lErro <> SUCESSO Then Error 21245

    End If

    'seleciona os registros das tabelas relacionadas a pagamentos que entrarão no fluxo de caixa
    lErro = FluxoAnalitico_Le_Pagtos(objFluxo, alErro(), alComando(), tFluxoAux)
    If lErro <> SUCESSO Then Error 10960

    lErro = FluxoAnalitico_Grava_Pagtos_6(objFluxo, alErro(), alComando(), tFluxoAux)



    If lErro <> SUCESSO Then Error 10961

'    'se há registros em todas as tabelas
'    If alErro(1) = AD_SQL_SUCESSO And alErro(2) = AD_SQL_SUCESSO And alErro(3) = AD_SQL_SUCESSO Then
'
'        lErro = FluxoAnalitico_Grava_Pagtos_1(objFluxo, alErro(), alComando(), tFluxoAux)
'        If lErro <> SUCESSO Then Error 10961
'
'    End If
'
'    'se somente existem registros na tabelas CreditosPagForn e NFsPag
'    If alErro(1) = AD_SQL_SUCESSO And alErro(2) = AD_SQL_SUCESSO Then
'
'        lErro = FluxoAnalitico_Grava_Pagtos_2(objFluxo, alErro(), alComando(), tFluxoAux)
'        If lErro <> SUCESSO Then Error 10962
'
'    End If
'
'    'se somente existem registros na tabelas CreditosPagForn e ParcelasPag
'    If alErro(1) = AD_SQL_SUCESSO And alErro(3) = AD_SQL_SUCESSO Then
'
'        lErro = FluxoAnalitico_Grava_Pagtos_3(objFluxo, alErro(), alComando(), tFluxoAux)
'        If lErro <> SUCESSO Then Error 10963
'
'    End If
'
'    'se somente existem registros na tabela NFsPag
'    If alErro(2) = AD_SQL_SUCESSO Then
'
'        lErro = FluxoAnalitico_Grava_Pagtos_4(objFluxo, alComando(2), alComando(4), tFluxoAux)
'        If lErro <> SUCESSO Then Error 10964
'
'    End If
'
'    'se somente existem registros na tabela ParcelasPag
'    If alErro(3) = AD_SQL_SUCESSO Then
'
'        lErro = FluxoAnalitico_Grava_Pagtos_5(objFluxo, alComando(3), alComando(6), tFluxoAux)
'        If lErro <> SUCESSO Then Error 10965
'
'    End If

    lErro = Comando_Executar(alComando(8), "DELETE FROM FluxoCredAntecip WHERE FluxoId = ? AND TipoReg =? ", objFluxo.lFluxoId, FLUXOANALITICO_TIPOREG_PAGTO)
    If lErro <> SUCESSO Then Error 21246

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    FluxoAnalitico_Grava_Pagtos = SUCESSO

    Exit Function

Erro_FluxoAnalitico_Grava_Pagtos:

    FluxoAnalitico_Grava_Pagtos = Err

    Select Case Err

        Case 10942
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 10960, 10961, 10962, 10963, 10964, 10965

        Case 21244, 21245
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FLUXOCREDANTECIP", Err)

        Case 21246
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_FLUXOCREDANTECIP", Err, objFluxo.sFluxo)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148051)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function FluxoAnalitico_Grava_Pagtos_1(ByVal objFluxo As ClassFluxo, alErro() As Long, alComando() As Long, tFluxoAux As typeFluxoAux) As Long
'processa os registros de pagamento de todas as tabelas
'IMPORTANTE: TEM QUE SER CHAMADA DENTRO DE TRANSACAO

Dim lErro As Long
Dim tCreditoPagar1 As typeCreditoPagar
Dim dValorPagarRestante As Double
Dim tNFsPag1 As typeNFsPag
Dim tParcelaPagar1 As typeParcelaPagar
Dim dValor As Double

On Error GoTo Erro_FluxoAnalitico_Grava_Pagtos_1

    tNFsPag1.dValorTotal = tFluxoAux.tNFsPag.dValorTotal
    tParcelaPagar1.dSaldo = tFluxoAux.tParcelaPagar.dSaldo

    Do While alErro(1) = AD_SQL_SUCESSO And alErro(2) = AD_SQL_SUCESSO And alErro(3) = AD_SQL_SUCESSO

        If tFluxoAux.tCreditoPagar.lFornecedor = tFluxoAux.tNFsPag.lFornecedor And tFluxoAux.tCreditoPagar.iFilial = tFluxoAux.tNFsPag.iFilial Then

            If tFluxoAux.tCreditoPagar.lFornecedor = tFluxoAux.tTituloPagar.lFornecedor And tFluxoAux.tCreditoPagar.iFilial = tFluxoAux.tTituloPagar.iFilial And tFluxoAux.tNFsPag.dtDataVencimento > tFluxoAux.tParcelaPagar.dtDataVencimento Then GoTo Label_MenorData

            If tNFsPag1.dValorTotal <= tFluxoAux.tCreditoPagar.dSaldo Then

                tFluxoAux.tCreditoPagar.dSaldo = tFluxoAux.tCreditoPagar.dSaldo - tNFsPag1.dValorTotal

                lErro = Comando_Executar(alComando(4), "INSERT INTO FluxoAnalitico (FluxoId, TipoReg, Fornecedor, Filial, SiglaDocumento, NumTitulo, NumParcela, Data, Valor, TipoFornecedor, NomeReduzido, Descricao, NumIntDoc) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", objFluxo.lFluxoId, FLUXOANALITICO_TIPOREG_PAGTO, tFluxoAux.tNFsPag.lFornecedor, tFluxoAux.tNFsPag.iFilial, TIPODOC_NF_A_PAGAR, CStr(tFluxoAux.tNFsPag.lNumNotaFiscal), 0, tFluxoAux.tNFsPag.dtDataVencimento, -tFluxoAux.tNFsPag.dValorTotal, tFluxoAux.iTipoForn_NFsPag, left(tFluxoAux.sNomeReduzido_NFsPag, 20), tFluxoAux.sDescricaoTipo_NFsPag, tFluxoAux.tNFsPag.lNumIntDoc)
                If lErro <> AD_SQL_SUCESSO Then Error 10975

                tCreditoPagar1 = tFluxoAux.tCreditoPagar
                tCreditoPagar1.dSaldo = tNFsPag1.dValorTotal
                tCreditoPagar1.dtDataEmissao = tFluxoAux.tNFsPag.dtDataVencimento

                'insere ou atualiza o registro de credito a pagar
                lErro = FluxoAnalitico_Atualizar_Credito(alComando(5), alComando(9), alComando(4), objFluxo, tCreditoPagar1, tFluxoAux)
                If lErro <> SUCESSO Then Error 20687

                alErro(2) = Fluxo_Comando_BuscarProximo(alComando(2), tFluxoAux.tNFsPag.dtDataVencimento, objFluxo, 0)
                If alErro(2) <> AD_SQL_SUCESSO And alErro(2) <> AD_SQL_SEM_DADOS Then Error 10977

                tNFsPag1.dValorTotal = tFluxoAux.tNFsPag.dValorTotal

                GoTo Label_FluxoAnalitico_Grava_Pagtos_1

            Else

                tFluxoAux.tCreditoPagar.dtDataEmissao = tFluxoAux.tNFsPag.dtDataVencimento

                tNFsPag1.dValorTotal = tNFsPag1.dValorTotal - tFluxoAux.tCreditoPagar.dSaldo

                'insere ou atualiza o registro de credito a pagar
                lErro = FluxoAnalitico_Atualizar_Credito(alComando(5), alComando(9), alComando(4), objFluxo, tFluxoAux.tCreditoPagar, tFluxoAux)
                If lErro <> SUCESSO Then Error 20688

                alErro(1) = Comando_BuscarProximo(alComando(1))
                If alErro(1) <> AD_SQL_SUCESSO And alErro(1) <> AD_SQL_SEM_DADOS Then Error 10979

                GoTo Label_FluxoAnalitico_Grava_Pagtos_1

            End If

        End If

        If tFluxoAux.tCreditoPagar.lFornecedor = tFluxoAux.tTituloPagar.lFornecedor And tFluxoAux.tCreditoPagar.iFilial = tFluxoAux.tTituloPagar.iFilial Then

Label_MenorData:

            If tParcelaPagar1.dSaldo <= tFluxoAux.tCreditoPagar.dSaldo Then

                tFluxoAux.tCreditoPagar.dSaldo = tFluxoAux.tCreditoPagar.dSaldo - tParcelaPagar1.dSaldo

                lErro = Comando_Executar(alComando(6), "INSERT INTO FluxoAnalitico (FluxoId, TipoReg, Fornecedor, Filial, SiglaDocumento, NumTitulo, NumParcela, Data, Valor, TipoFornecedor, NomeReduzido, Descricao, NumIntDoc) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", objFluxo.lFluxoId, FLUXOANALITICO_TIPOREG_PAGTO, tFluxoAux.tTituloPagar.lFornecedor, tFluxoAux.tTituloPagar.iFilial, tFluxoAux.tTituloPagar.sSiglaDocumento, CStr(tFluxoAux.tTituloPagar.lNumTitulo), tFluxoAux.tParcelaPagar.iNumParcela, tFluxoAux.tParcelaPagar.dtDataVencimento, -tFluxoAux.tParcelaPagar.dSaldo, tFluxoAux.iTipoForn_TitPag, left(tFluxoAux.sNomeReduzido_TitPag, 20), tFluxoAux.sDescricaoTipo_TitPag, tFluxoAux.tParcelaPagar.lNumIntDoc)
                If lErro <> AD_SQL_SUCESSO Then Error 10980

                tCreditoPagar1 = tFluxoAux.tCreditoPagar
                tCreditoPagar1.dSaldo = tParcelaPagar1.dSaldo
                tCreditoPagar1.dtDataEmissao = tFluxoAux.tParcelaPagar.dtDataVencimento

                'insere ou atualiza o registro de credito a pagar
                lErro = FluxoAnalitico_Atualizar_Credito(alComando(5), alComando(9), alComando(4), objFluxo, tCreditoPagar1, tFluxoAux)
                If lErro <> SUCESSO Then Error 20689

                alErro(3) = Fluxo_Comando_BuscarProximo(alComando(3), tFluxoAux.tParcelaPagar.dtDataVencimento, objFluxo, 0)
                If alErro(3) <> AD_SQL_SUCESSO And alErro(3) <> AD_SQL_SEM_DADOS Then Error 10982

                tParcelaPagar1.dSaldo = tFluxoAux.tParcelaPagar.dSaldo

                GoTo Label_FluxoAnalitico_Grava_Pagtos_1

            Else

                tFluxoAux.tCreditoPagar.dtDataEmissao = tFluxoAux.tParcelaPagar.dtDataVencimento
                tParcelaPagar1.dSaldo = tParcelaPagar1.dSaldo - tFluxoAux.tCreditoPagar.dSaldo

                'insere ou atualiza o registro de credito a pagar
                lErro = FluxoAnalitico_Atualizar_Credito(alComando(5), alComando(9), alComando(4), objFluxo, tFluxoAux.tCreditoPagar, tFluxoAux)
                If lErro <> SUCESSO Then Error 20690

                alErro(1) = Comando_BuscarProximo(alComando(1))
                If alErro(1) <> AD_SQL_SUCESSO And alErro(1) <> AD_SQL_SEM_DADOS Then Error 10984

                GoTo Label_FluxoAnalitico_Grava_Pagtos_1

            End If

        End If

        If (tFluxoAux.tCreditoPagar.lFornecedor < tFluxoAux.tNFsPag.lFornecedor Or (tFluxoAux.tCreditoPagar.lFornecedor = tFluxoAux.tNFsPag.lFornecedor And tFluxoAux.tCreditoPagar.iFilial < tFluxoAux.tNFsPag.iFilial)) And _
           (tFluxoAux.tCreditoPagar.lFornecedor < tFluxoAux.tTituloPagar.lFornecedor Or (tFluxoAux.tCreditoPagar.lFornecedor = tFluxoAux.tTituloPagar.lFornecedor And tFluxoAux.tCreditoPagar.iFilial < tFluxoAux.tTituloPagar.iFilial)) Then

            alErro(1) = Comando_BuscarProximo(alComando(1))
            If alErro(1) <> AD_SQL_SUCESSO And alErro(1) <> AD_SQL_SEM_DADOS Then Error 10985

        Else
            If tFluxoAux.tNFsPag.lFornecedor <= tFluxoAux.tTituloPagar.lFornecedor Then

                lErro = Comando_Executar(alComando(4), "INSERT INTO FluxoAnalitico (FluxoId, TipoReg, Fornecedor, Filial, SiglaDocumento, NumTitulo, NumParcela, Data, Valor, TipoFornecedor, NomeReduzido, Descricao, NumIntDoc) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", objFluxo.lFluxoId, FLUXOANALITICO_TIPOREG_PAGTO, tFluxoAux.tNFsPag.lFornecedor, tFluxoAux.tNFsPag.iFilial, TIPODOC_NF_A_PAGAR, CStr(tFluxoAux.tNFsPag.lNumNotaFiscal), 0, tFluxoAux.tNFsPag.dtDataVencimento, -tFluxoAux.tNFsPag.dValorTotal, tFluxoAux.iTipoForn_NFsPag, left(tFluxoAux.sNomeReduzido_NFsPag, 20), tFluxoAux.sDescricaoTipo_NFsPag, tFluxoAux.tNFsPag.lNumIntDoc)
                If lErro <> AD_SQL_SUCESSO Then Error 10986

                alErro(2) = Fluxo_Comando_BuscarProximo(alComando(2), tFluxoAux.tNFsPag.dtDataVencimento, objFluxo, 0)
                If alErro(2) <> AD_SQL_SUCESSO And alErro(2) <> AD_SQL_SEM_DADOS Then Error 10987

                tNFsPag1.dValorTotal = tFluxoAux.tNFsPag.dValorTotal

            Else

                lErro = Comando_Executar(alComando(6), "INSERT INTO FluxoAnalitico (FluxoId, TipoReg, Fornecedor, Filial, SiglaDocumento, NumTitulo, NumParcela, Data, Valor, TipoFornecedor, NomeReduzido, Descricao, NumIntDoc) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", objFluxo.lFluxoId, FLUXOANALITICO_TIPOREG_PAGTO, tFluxoAux.tTituloPagar.lFornecedor, tFluxoAux.tTituloPagar.iFilial, tFluxoAux.tTituloPagar.sSiglaDocumento, CStr(tFluxoAux.tTituloPagar.lNumTitulo), tFluxoAux.tParcelaPagar.iNumParcela, tFluxoAux.tParcelaPagar.dtDataVencimento, -tFluxoAux.tParcelaPagar.dSaldo, tFluxoAux.iTipoForn_TitPag, left(tFluxoAux.sNomeReduzido_TitPag, 20), tFluxoAux.sDescricaoTipo_TitPag, tFluxoAux.tParcelaPagar.lNumIntDoc)
                If lErro <> AD_SQL_SUCESSO Then Error 10988

                alErro(3) = Fluxo_Comando_BuscarProximo(alComando(3), tFluxoAux.tParcelaPagar.dtDataVencimento, objFluxo, 0)
                If alErro(3) <> AD_SQL_SUCESSO And alErro(3) <> AD_SQL_SEM_DADOS Then Error 10989

                tParcelaPagar1.dSaldo = tFluxoAux.tParcelaPagar.dSaldo

            End If

        End If

Label_FluxoAnalitico_Grava_Pagtos_1:
    Loop

    FluxoAnalitico_Grava_Pagtos_1 = SUCESSO

    Exit Function

Erro_FluxoAnalitico_Grava_Pagtos_1:

    FluxoAnalitico_Grava_Pagtos_1 = Err

    Select Case Err

        Case 10975, 10980, 10986, 10988
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FLUXOANALITICO", Err)

        Case 10977, 10987
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFSPAG", Err)

        Case 10979, 10984, 10985
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CREDITO_PAG_FORN", Err)

        Case 10982, 10989
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_PAG1", Err)

        Case 20687, 20688, 20689, 20690

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148052)

    End Select

    Exit Function

End Function

Private Function FluxoAnalitico_Grava_Pagtos_2(ByVal objFluxo As ClassFluxo, alErro() As Long, alComando() As Long, tFluxoAux As typeFluxoAux) As Long
'processa os registros de pagamento das tabelas de Creditos a Pagar e Notas Fiscais a Pagar
'IMPORTANTE: TEM QUE SER CHAMADA DENTRO DE TRANSACAO

Dim lErro As Long
Dim tNFsPag1 As typeNFsPag
Dim tCreditoPagar1 As typeCreditoPagar

On Error GoTo Erro_FluxoAnalitico_Grava_Pagtos_2

    tNFsPag1.dValorTotal = tFluxoAux.tNFsPag.dValorTotal

    Do While alErro(1) = AD_SQL_SUCESSO And alErro(2) = AD_SQL_SUCESSO

        If tFluxoAux.tCreditoPagar.lFornecedor = tFluxoAux.tNFsPag.lFornecedor And tFluxoAux.tCreditoPagar.iFilial = tFluxoAux.tNFsPag.iFilial Then

            If tNFsPag1.dValorTotal <= tFluxoAux.tCreditoPagar.dSaldo Then

                tFluxoAux.tCreditoPagar.dSaldo = tFluxoAux.tCreditoPagar.dSaldo - tNFsPag1.dValorTotal

                lErro = Comando_Executar(alComando(4), "INSERT INTO FluxoAnalitico (FluxoId, TipoReg, Fornecedor, Filial, SiglaDocumento, NumTitulo, NumParcela, Data, Valor, TipoFornecedor, NomeReduzido, Descricao, NumIntDoc) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", objFluxo.lFluxoId, FLUXOANALITICO_TIPOREG_PAGTO, tFluxoAux.tNFsPag.lFornecedor, tFluxoAux.tNFsPag.iFilial, TIPODOC_NF_A_PAGAR, CStr(tFluxoAux.tNFsPag.lNumNotaFiscal), 0, tFluxoAux.tNFsPag.dtDataVencimento, -tFluxoAux.tNFsPag.dValorTotal, tFluxoAux.iTipoForn_NFsPag, left(tFluxoAux.sNomeReduzido_NFsPag, 20), tFluxoAux.sDescricaoTipo_NFsPag, tFluxoAux.tNFsPag.lNumIntDoc)
                If lErro <> AD_SQL_SUCESSO Then Error 10990

                tCreditoPagar1 = tFluxoAux.tCreditoPagar
                tCreditoPagar1.dSaldo = tNFsPag1.dValorTotal
                tCreditoPagar1.dtDataEmissao = tFluxoAux.tNFsPag.dtDataVencimento

                'insere ou atualiza o registro de credito a pagar
                lErro = FluxoAnalitico_Atualizar_Credito(alComando(5), alComando(9), alComando(4), objFluxo, tCreditoPagar1, tFluxoAux)
                If lErro <> SUCESSO Then Error 20691

                alErro(2) = Fluxo_Comando_BuscarProximo(alComando(2), tFluxoAux.tNFsPag.dtDataVencimento, objFluxo, 0)
                If alErro(2) <> AD_SQL_SUCESSO And alErro(2) <> AD_SQL_SEM_DADOS Then Error 10992

                tNFsPag1.dValorTotal = tFluxoAux.tNFsPag.dValorTotal

                GoTo Label_FluxoAnalitico_Grava_Pagtos_2

            Else

                tFluxoAux.tCreditoPagar.dtDataEmissao = tFluxoAux.tNFsPag.dtDataVencimento
                tNFsPag1.dValorTotal = tNFsPag1.dValorTotal - tFluxoAux.tCreditoPagar.dSaldo

                'insere ou atualiza o registro de credito a pagar
                lErro = FluxoAnalitico_Atualizar_Credito(alComando(5), alComando(9), alComando(4), objFluxo, tFluxoAux.tCreditoPagar, tFluxoAux)
                If lErro <> SUCESSO Then Error 20692

                alErro(1) = Comando_BuscarProximo(alComando(1))
                If alErro(1) <> AD_SQL_SUCESSO And alErro(1) <> AD_SQL_SEM_DADOS Then Error 10994

                GoTo Label_FluxoAnalitico_Grava_Pagtos_2

            End If

        End If

        If (tFluxoAux.tCreditoPagar.lFornecedor < tFluxoAux.tNFsPag.lFornecedor Or (tFluxoAux.tCreditoPagar.lFornecedor = tFluxoAux.tNFsPag.lFornecedor And tFluxoAux.tCreditoPagar.iFilial < tFluxoAux.tNFsPag.iFilial)) Then

            alErro(1) = Comando_BuscarProximo(alComando(1))
            If alErro(1) <> AD_SQL_SUCESSO And alErro(1) <> AD_SQL_SEM_DADOS Then Error 10995

        Else

            lErro = Comando_Executar(alComando(4), "INSERT INTO FluxoAnalitico (FluxoId, TipoReg, Fornecedor, Filial, SiglaDocumento, NumTitulo, NumParcela, Data, Valor, TipoFornecedor, NomeReduzido, Descricao, NumIntDoc) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", objFluxo.lFluxoId, FLUXOANALITICO_TIPOREG_PAGTO, tFluxoAux.tNFsPag.lFornecedor, tFluxoAux.tNFsPag.iFilial, TIPODOC_NF_A_PAGAR, CStr(tFluxoAux.tNFsPag.lNumNotaFiscal), 0, tFluxoAux.tNFsPag.dtDataVencimento, -tFluxoAux.tNFsPag.dValorTotal, tFluxoAux.iTipoForn_NFsPag, left(tFluxoAux.sNomeReduzido_NFsPag, 20), tFluxoAux.sDescricaoTipo_NFsPag, tFluxoAux.tNFsPag.lNumIntDoc)
            If lErro <> AD_SQL_SUCESSO Then Error 10996

            alErro(2) = Fluxo_Comando_BuscarProximo(alComando(2), tFluxoAux.tNFsPag.dtDataVencimento, objFluxo, 0)
            If alErro(2) <> AD_SQL_SUCESSO And alErro(2) <> AD_SQL_SEM_DADOS Then Error 10997

            tNFsPag1.dValorTotal = tFluxoAux.tNFsPag.dValorTotal

        End If

Label_FluxoAnalitico_Grava_Pagtos_2:
    Loop

    FluxoAnalitico_Grava_Pagtos_2 = SUCESSO

    Exit Function

Erro_FluxoAnalitico_Grava_Pagtos_2:

    FluxoAnalitico_Grava_Pagtos_2 = Err

    Select Case Err

        Case 10990, 10996
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FLUXOANALITICO", Err)

        Case 10992, 10997
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFSPAG", Err)

        Case 10994, 10995
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CREDITO_PAG_FORN", Err)

        Case 20691, 20692

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148053)

    End Select

    Exit Function

End Function


Private Function FluxoAnalitico_Atualizar_Credito(ByVal lComando As Long, ByVal lComando1 As Long, ByVal lComando2 As Long, ByVal objFluxo As ClassFluxo, tCreditoPagar1 As typeCreditoPagar, tFluxoAux As typeFluxoAux) As Long

Dim lErro As Long
Dim dValor As Double

On Error GoTo Erro_FluxoAnalitico_Atualizar_Credito

    lErro = Comando_ExecutarPos(lComando, "SELECT Valor FROM FluxoAnalitico WHERE FluxoId =? AND TipoReg =? AND Fornecedor =? AND Filial =? AND SiglaDocumento =? AND NumTitulo =? AND NumParcela =? AND Data =?", 0, dValor, objFluxo.lFluxoId, FLUXOANALITICO_TIPOREG_PAGTO, tCreditoPagar1.lFornecedor, tCreditoPagar1.iFilial, tCreditoPagar1.sSiglaDocumento, CStr(tCreditoPagar1.lNumTitulo), 0, tCreditoPagar1.dtDataEmissao)
    If lErro <> AD_SQL_SUCESSO Then Error 21249

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 21250

    If lErro = AD_SQL_SUCESSO Then
        lErro = Comando_ExecutarPos(lComando1, "UPDATE FluxoAnalitico SET Valor =? ", lComando, tCreditoPagar1.dSaldo + dValor)
        If lErro <> AD_SQL_SUCESSO Then Error 21260
        
    Else
        lErro = Comando_Executar(lComando2, "INSERT INTO FluxoAnalitico (FluxoId, TipoReg, Fornecedor, Filial, SiglaDocumento, NumTitulo, NumParcela, Data, Valor, TipoFornecedor, NomeReduzido, Descricao) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)", objFluxo.lFluxoId, FLUXOANALITICO_TIPOREG_PAGTO, tCreditoPagar1.lFornecedor, tCreditoPagar1.iFilial, tCreditoPagar1.sSiglaDocumento, CStr(tCreditoPagar1.lNumTitulo), 0, tCreditoPagar1.dtDataEmissao, tCreditoPagar1.dSaldo, tFluxoAux.iTipoForn_CreditoPagar, left(tFluxoAux.sNomeReduzido_CreditoPagar, 20), tFluxoAux.sDescricaoTipo_CreditoPagar)
        If lErro <> AD_SQL_SUCESSO Then Error 10976
        
    End If

    FluxoAnalitico_Atualizar_Credito = SUCESSO
    
    Exit Function
    
Erro_FluxoAnalitico_Atualizar_Credito:

    FluxoAnalitico_Atualizar_Credito = Err
    
    Select Case Err

        Case 10976
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FLUXOANALITICO", Err)

        Case 21249, 21250
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FLUXOANALITICO", Err, objFluxo.sFluxo)

        Case 21260
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_FLUXOANALITICO", Err, objFluxo.sFluxo)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148054)

    End Select

    Exit Function

End Function

Private Function FluxoAnalitico_Atualizar_Rec(ByVal lComando As Long, ByVal lComando1 As Long, ByVal lComando2 As Long, ByVal objFluxo As ClassFluxo, tDebitosRecCli1 As typeDebitosRecCli, tFluxoAux1 As typeFluxoAux) As Long

Dim lErro As Long
Dim dValor As Double

On Error GoTo Erro_FluxoAnalitico_Atualizar_Rec

    lErro = Comando_ExecutarPos(lComando, "SELECT Valor FROM FluxoAnalitico WHERE FluxoId = ? AND TipoReg = ?  AND Fornecedor = ? AND Filial = ? AND SiglaDocumento = ? AND NumTitulo =? AND NumParcela = ? AND Data = ?", 0, dValor, objFluxo.lFluxoId, FLUXOANALITICO_TIPOREG_RECEBTO, tDebitosRecCli1.lCliente, tDebitosRecCli1.iFilial, tDebitosRecCli1.sSiglaDocumento, CStr(tDebitosRecCli1.lNumTitulo), 0, tDebitosRecCli1.dtDataEmissao)
    If lErro <> AD_SQL_SUCESSO Then Error 21261

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 21262

    If lErro = AD_SQL_SUCESSO Then
        lErro = Comando_ExecutarPos(lComando1, "UPDATE FluxoAnalitico SET Valor =?", lComando, -tDebitosRecCli1.dSaldo + dValor)
        If lErro <> AD_SQL_SUCESSO Then Error 21263
    Else
        lErro = Comando_Executar(lComando2, "INSERT INTO FluxoAnalitico (FluxoId, TipoReg, Fornecedor, Filial, SiglaDocumento, NumTitulo, NumParcela, Data, Valor, TipoFornecedor, NomeReduzido, Descricao, NumIntDoc, Item) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)", objFluxo.lFluxoId, FLUXOANALITICO_TIPOREG_RECEBTO, tDebitosRecCli1.lCliente, tDebitosRecCli1.iFilial, tDebitosRecCli1.sSiglaDocumento, CStr(tDebitosRecCli1.lNumTitulo), 0, tDebitosRecCli1.dtDataEmissao, -tDebitosRecCli1.dSaldo, tFluxoAux1.iTipoForn_DebitosRecCli, left(tFluxoAux1.sNomeReduzido_DebitosRecCli, 20), tFluxoAux1.sDescricaoTipo_DebitosRecCli, 0, 0)
        If lErro <> AD_SQL_SUCESSO Then Error 20028
    End If

    FluxoAnalitico_Atualizar_Rec = SUCESSO
    
    Exit Function
    
Erro_FluxoAnalitico_Atualizar_Rec:

    FluxoAnalitico_Atualizar_Rec = Err
    
    Select Case Err

        Case 20028
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FLUXOANALITICO", Err)

        Case 21261, 21262
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FLUXOANALITICO", Err, objFluxo.sFluxo)

        Case 21263
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_FLUXOANALITICO", Err, objFluxo.sFluxo)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148055)

    End Select

    Exit Function

End Function

Private Function FluxoAnalitico_Grava_Pagtos_3(ByVal objFluxo As ClassFluxo, alErro() As Long, alComando() As Long, tFluxoAux As typeFluxoAux) As Long
'processa os registros de pagamento das tabelas de Creditos a Pagar e Parcelas a Pagar
'IMPORTANTE: TEM QUE SER CHAMADA DENTRO DE TRANSACAO

Dim lErro As Long
Dim tCreditoPagar1 As typeCreditoPagar
Dim tParcelaPagar1 As typeParcelaPagar

On Error GoTo Erro_FluxoAnalitico_Grava_Pagtos_3

    tParcelaPagar1.dSaldo = tFluxoAux.tParcelaPagar.dSaldo

    Do While alErro(1) = AD_SQL_SUCESSO And alErro(3) = AD_SQL_SUCESSO

        If tFluxoAux.tCreditoPagar.lFornecedor = tFluxoAux.tTituloPagar.lFornecedor And tFluxoAux.tCreditoPagar.iFilial = tFluxoAux.tTituloPagar.iFilial Then

            If tParcelaPagar1.dSaldo <= tFluxoAux.tCreditoPagar.dSaldo Then

                tFluxoAux.tCreditoPagar.dSaldo = tFluxoAux.tCreditoPagar.dSaldo - tParcelaPagar1.dSaldo

                lErro = Comando_Executar(alComando(6), "INSERT INTO FluxoAnalitico (FluxoId, TipoReg, Fornecedor, Filial, SiglaDocumento, NumTitulo, NumParcela, Data, Valor, TipoFornecedor, NomeReduzido, Descricao, NumIntDoc) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", objFluxo.lFluxoId, FLUXOANALITICO_TIPOREG_PAGTO, tFluxoAux.tTituloPagar.lFornecedor, tFluxoAux.tTituloPagar.iFilial, tFluxoAux.tTituloPagar.sSiglaDocumento, CStr(tFluxoAux.tTituloPagar.lNumTitulo), tFluxoAux.tParcelaPagar.iNumParcela, tFluxoAux.tParcelaPagar.dtDataVencimento, -tFluxoAux.tParcelaPagar.dSaldo, tFluxoAux.iTipoForn_TitPag, left(tFluxoAux.sNomeReduzido_TitPag, 20), tFluxoAux.sDescricaoTipo_TitPag, tFluxoAux.tParcelaPagar.lNumIntDoc)
                If lErro <> AD_SQL_SUCESSO Then Error 10998

                tCreditoPagar1 = tFluxoAux.tCreditoPagar
                tCreditoPagar1.dSaldo = tParcelaPagar1.dSaldo
                tCreditoPagar1.dtDataEmissao = tFluxoAux.tParcelaPagar.dtDataVencimento

                'insere ou atualiza o registro de credito a pagar
                lErro = FluxoAnalitico_Atualizar_Credito(alComando(5), alComando(9), alComando(4), objFluxo, tCreditoPagar1, tFluxoAux)
                If lErro <> SUCESSO Then Error 20693

                alErro(3) = Fluxo_Comando_BuscarProximo(alComando(3), tFluxoAux.tParcelaPagar.dtDataVencimento, objFluxo, 0)
                If alErro(3) <> AD_SQL_SUCESSO And alErro(3) <> AD_SQL_SEM_DADOS Then Error 20000

                tParcelaPagar1.dSaldo = tFluxoAux.tParcelaPagar.dSaldo

                GoTo Label_FluxoAnalitico_Grava_Pagtos_3

            Else

                tFluxoAux.tCreditoPagar.dtDataEmissao = tFluxoAux.tParcelaPagar.dtDataVencimento
                tParcelaPagar1.dSaldo = tParcelaPagar1.dSaldo - tFluxoAux.tCreditoPagar.dSaldo

                'insere ou atualiza o registro de credito a pagar
                lErro = FluxoAnalitico_Atualizar_Credito(alComando(5), alComando(9), alComando(4), objFluxo, tFluxoAux.tCreditoPagar, tFluxoAux)
                If lErro <> SUCESSO Then Error 20694

                alErro(1) = Comando_BuscarProximo(alComando(1))
                If alErro(1) <> AD_SQL_SUCESSO And alErro(1) <> AD_SQL_SEM_DADOS Then Error 20002

                GoTo Label_FluxoAnalitico_Grava_Pagtos_3

            End If

        End If

        If tFluxoAux.tCreditoPagar.lFornecedor < tFluxoAux.tTituloPagar.lFornecedor Or (tFluxoAux.tCreditoPagar.lFornecedor = tFluxoAux.tTituloPagar.lFornecedor And tFluxoAux.tCreditoPagar.iFilial < tFluxoAux.tTituloPagar.iFilial) Then

            alErro(1) = Comando_BuscarProximo(alComando(1))
            If alErro(1) <> AD_SQL_SUCESSO And alErro(1) <> AD_SQL_SEM_DADOS Then Error 20003

        Else

            lErro = Comando_Executar(alComando(6), "INSERT INTO FluxoAnalitico (FluxoId, TipoReg, Fornecedor, Filial, SiglaDocumento, NumTitulo, NumParcela, Data, Valor, TipoFornecedor, NomeReduzido, Descricao, NumIntDoc) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", objFluxo.lFluxoId, FLUXOANALITICO_TIPOREG_PAGTO, tFluxoAux.tTituloPagar.lFornecedor, tFluxoAux.tTituloPagar.iFilial, tFluxoAux.tTituloPagar.sSiglaDocumento, CStr(tFluxoAux.tTituloPagar.lNumTitulo), tFluxoAux.tParcelaPagar.iNumParcela, tFluxoAux.tParcelaPagar.dtDataVencimento, -tFluxoAux.tParcelaPagar.dSaldo, tFluxoAux.iTipoForn_TitPag, left(tFluxoAux.sNomeReduzido_TitPag, 20), tFluxoAux.sDescricaoTipo_TitPag, tFluxoAux.tParcelaPagar.lNumIntDoc)
            If lErro <> AD_SQL_SUCESSO Then Error 20004

            alErro(3) = Fluxo_Comando_BuscarProximo(alComando(3), tFluxoAux.tParcelaPagar.dtDataVencimento, objFluxo, 0)
            If alErro(3) <> AD_SQL_SUCESSO And alErro(3) <> AD_SQL_SEM_DADOS Then Error 20005

            tParcelaPagar1.dSaldo = tFluxoAux.tParcelaPagar.dSaldo

        End If

Label_FluxoAnalitico_Grava_Pagtos_3:
    Loop

    FluxoAnalitico_Grava_Pagtos_3 = SUCESSO

    Exit Function

Erro_FluxoAnalitico_Grava_Pagtos_3:

    FluxoAnalitico_Grava_Pagtos_3 = Err

    Select Case Err

        Case 10998, 20004
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FLUXOANALITICO", Err)

        Case 20000, 20005
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_PAG1", Err)

        Case 20002, 20003
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CREDITO_PAG_FORN", Err)

        Case 20693, 20694
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148056)

    End Select

    Exit Function

End Function

Private Function FluxoAnalitico_Grava_Pagtos_4(ByVal objFluxo As ClassFluxo, ByVal lComando As Long, ByVal lComando1 As Long, tFluxoAux As typeFluxoAux) As Long
'processa os registros de pagamento da tabela de Notas Fiscais a Pagar
'IMPORTANTE: TEM QUE SER CHAMADA DENTRO DE TRANSACAO

Dim lErro As Long

On Error GoTo Erro_FluxoAnalitico_Grava_Pagtos_4

    lErro = AD_SQL_SUCESSO

    Do While lErro = AD_SQL_SUCESSO

        lErro = Comando_Executar(lComando1, "INSERT INTO FluxoAnalitico (FluxoId, TipoReg, Fornecedor, Filial, SiglaDocumento, NumTitulo, NumParcela, Data, Valor, TipoFornecedor, NomeReduzido, Descricao, NumIntDoc) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", objFluxo.lFluxoId, FLUXOANALITICO_TIPOREG_PAGTO, tFluxoAux.tNFsPag.lFornecedor, tFluxoAux.tNFsPag.iFilial, TIPODOC_NF_A_PAGAR, CStr(tFluxoAux.tNFsPag.lNumNotaFiscal), 0, tFluxoAux.tNFsPag.dtDataVencimento, -tFluxoAux.tNFsPag.dValorTotal, tFluxoAux.iTipoForn_NFsPag, left(tFluxoAux.sNomeReduzido_NFsPag, 20), tFluxoAux.sDescricaoTipo_NFsPag, tFluxoAux.tNFsPag.lNumIntDoc)
        If lErro <> AD_SQL_SUCESSO Then Error 20006

        lErro = Fluxo_Comando_BuscarProximo(lComando, tFluxoAux.tNFsPag.dtDataVencimento, objFluxo, 0)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 20007

    Loop

    FluxoAnalitico_Grava_Pagtos_4 = SUCESSO

    Exit Function

Erro_FluxoAnalitico_Grava_Pagtos_4:

    FluxoAnalitico_Grava_Pagtos_4 = Err

    Select Case Err

        Case 20006
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FLUXOANALITICO", Err)

        Case 20007
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFSPAG", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148057)

    End Select

    Exit Function

End Function

Private Function FluxoAnalitico_Grava_Pagtos_5(ByVal objFluxo As ClassFluxo, ByVal lComando As Long, ByVal lComando1 As Long, tFluxoAux As typeFluxoAux) As Long
'processa os registros de pagamento da tabela de Parcelas A Pagar
'IMPORTANTE: TEM QUE SER CHAMADA DENTRO DE TRANSACAO

Dim lErro As Long

On Error GoTo Erro_FluxoAnalitico_Grava_Pagtos_5

    lErro = AD_SQL_SUCESSO

    Do While lErro = AD_SQL_SUCESSO


        lErro = Comando_Executar(lComando1, "INSERT INTO FluxoAnalitico (FluxoId, TipoReg, Fornecedor, Filial, SiglaDocumento, NumTitulo, NumParcela, Data, Valor, TipoFornecedor, NomeReduzido, Descricao, NumIntDoc) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", objFluxo.lFluxoId, FLUXOANALITICO_TIPOREG_PAGTO, tFluxoAux.tTituloPagar.lFornecedor, tFluxoAux.tTituloPagar.iFilial, tFluxoAux.tTituloPagar.sSiglaDocumento, CStr(tFluxoAux.tTituloPagar.lNumTitulo), tFluxoAux.tParcelaPagar.iNumParcela, tFluxoAux.tParcelaPagar.dtDataVencimento, -tFluxoAux.tParcelaPagar.dSaldo, tFluxoAux.iTipoForn_TitPag, left(tFluxoAux.sNomeReduzido_TitPag, 20), tFluxoAux.sDescricaoTipo_TitPag, tFluxoAux.tParcelaPagar.lNumIntDoc)
        If lErro <> AD_SQL_SUCESSO Then Error 20008

        lErro = Fluxo_Comando_BuscarProximo(lComando, tFluxoAux.tParcelaPagar.dtDataVencimento, objFluxo, 0)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 20009

    Loop

    FluxoAnalitico_Grava_Pagtos_5 = SUCESSO

    Exit Function

Erro_FluxoAnalitico_Grava_Pagtos_5:

    FluxoAnalitico_Grava_Pagtos_5 = Err

    Select Case Err

        Case 20008
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FLUXOANALITICO", Err)

        Case 20009
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_PAG1", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148058)

    End Select

    Exit Function

End Function

Function FluxoAnalitico_Grava_Recebtos(ByVal objFluxo As ClassFluxo) As Long
'grava os recebimentos no fluxo analitico
'IMPORTANTE: TEM QUE SER CHAMADA DENTRO DE TRANSACAO

Dim lErro As Long
Dim alErro(1 To 5) As Long
Dim alComando(1 To 11) As Long
Dim iIndice As Integer
Dim tFluxoAux1 As typeFluxoAux

On Error GoTo Erro_FluxoAnalitico_Grava_Recebtos

    For iIndice = LBound(alComando) To UBound(alComando)

        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 20011

    Next

    If objFluxo.sFluxo <> "fluxocontabil" Then
    
        'preenche tabela auxiliar com dados de créditos de clientes
        lErro = Comando_Executar(alComando(7), "INSERT INTO FluxoCredAntecip (FluxoId, FilialEmpresa, Fornecedor, Filial, SiglaDocumento, NumTitulo, Saldo, TipoReg, SiglaDocOrig) SELECT ?, FilialEmpresa, Cliente, Filial, ?, NumTitulo, Saldo,?, SiglaDocumento FROM DebitosRecCli WHERE Status = ? AND Saldo > 0 ", objFluxo.lFluxoId, TIPODOC_CREDITOSRECCLI, FLUXOANALITICO_TIPOREG_RECEBTO, STATUS_LANCADO)
        If lErro <> SUCESSO Then Error 21247
    
        'preenche tabela auxiliar com dados de recebimentos antecipados
        lErro = Comando_Executar(alComando(8), "INSERT INTO FluxoCredAntecip (FluxoId, FilialEmpresa, Fornecedor, Filial, SiglaDocumento, NumTitulo, Saldo, TipoReg, SiglaDocOrig) SELECT ?, FilialEmpresa, Cliente, Filial_Cliente, ?, RecebAntecipados.NumMovto , SaldoNaoApropriado,?, ? FROM RecebAntecipados, MovimentosContaCorrente WHERE RecebAntecipados.Excluido <> ? AND SaldoNaoApropriado > 0 AND RecebAntecipados.NumMovto = MovimentosContaCorrente.NumMovto ", objFluxo.lFluxoId, TIPODOC_RECEBIMENTO_ANTECIPADO, FLUXOANALITICO_TIPOREG_RECEBTO, TIPODOC_RECEBIMENTO_ANTECIPADO, EXCLUIDO)
        If lErro <> SUCESSO Then Error 21248

    End If
    
    'seleciona os registros das tabelas relacionadas a recebimentos que entrarão no fluxo de caixa
    lErro = FluxoAnalitico_Le_Recebtos(objFluxo, alErro(), alComando(), tFluxoAux1)
    If lErro <> SUCESSO Then Error 20012

    lErro = FluxoAnalitico_Grava_Recebtos_6(objFluxo, alErro(), alComando(), tFluxoAux1)
    If lErro <> SUCESSO Then Error 20013

'    'se há registros em todas as tabelas
'    If alErro(1) = AD_SQL_SUCESSO And alErro(2) = AD_SQL_SUCESSO And alErro(3) = AD_SQL_SUCESSO Then
'
'        lErro = FluxoAnalitico_Grava_Recebtos_1(objFluxo, alErro(), alComando(), tFluxoAux1)
'        If lErro <> SUCESSO Then Error 20013
'
'    End If
'
'    'se há registros em todas as tabelas
'    If alErro(1) = AD_SQL_SUCESSO And alErro(2) = AD_SQL_SUCESSO And alErro(4) = AD_SQL_SUCESSO Then
'
'        lErro = FluxoAnalitico_Grava_Recebtos_6(objFluxo, alErro(), alComando(), tFluxoAux1)
'        If lErro <> SUCESSO Then Error 20013
'
'    End If
'
'
'
'    'se somente existem registros na tabelas DebitosRecCli e NFsRec
'    If alErro(1) = AD_SQL_SUCESSO And alErro(2) = AD_SQL_SUCESSO Then
'
'        lErro = FluxoAnalitico_Grava_Recebtos_2(objFluxo, alErro(), alComando(), tFluxoAux1)
'        If lErro <> SUCESSO Then Error 20014
'
'    End If
'
'    'se somente existem registros na tabelas DebitosRecCli e ParcelasRec
'    If alErro(1) = AD_SQL_SUCESSO And alErro(3) = AD_SQL_SUCESSO Then
'
'        lErro = FluxoAnalitico_Grava_Recebtos_3(objFluxo, alErro(), alComando(), tFluxoAux1)
'        If lErro <> SUCESSO Then Error 20015
'
'    End If
'
'    'se somente existem registros na tabela NFsRec
'    If alErro(2) = AD_SQL_SUCESSO Then
'
'        lErro = FluxoAnalitico_Grava_Recebtos_4(objFluxo, alComando(2), alComando(4), tFluxoAux1)
'        If lErro <> SUCESSO Then Error 20016
'
'    End If
'
'    'se somente existem registros na tabela ParcelasRec
'    If alErro(3) = AD_SQL_SUCESSO Then
'
'        lErro = FluxoAnalitico_Grava_Recebtos_5(objFluxo, alComando(3), alComando(4), tFluxoAux1)
'        If lErro <> SUCESSO Then Error 20017
'
'    End If

    lErro = Comando_Executar(alComando(8), "DELETE FROM FluxoCredAntecip WHERE FluxoId = ? AND TipoReg =? ", objFluxo.lFluxoId, FLUXOANALITICO_TIPOREG_RECEBTO)
    If lErro <> SUCESSO Then Error 21273

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    FluxoAnalitico_Grava_Recebtos = SUCESSO

    Exit Function

Erro_FluxoAnalitico_Grava_Recebtos:

    FluxoAnalitico_Grava_Recebtos = Err

    Select Case Err

        Case 20011
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 20012, 20013, 20014, 20015, 20016, 20017

        Case 21247, 21248
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FLUXOCREDANTECIP", Err)

        Case 21273
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_FLUXOCREDANTECIP", Err, objFluxo.sFluxo)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148059)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

'Private Function FluxoAnalitico_Grava_Recebtos_1(ByVal objFluxo As ClassFluxo, alErro() As Long, alComando() As Long, tFluxoAux1 As typeFluxoAux1) As Long
''processa os registros de recebimento de todas as tabelas
''IMPORTANTE: TEM QUE SER CHAMADA DENTRO DE TRANSACAO
'
'Dim lErro As Long
'Dim tDebitosRecCli1 As typeDebitosRecCli
'Dim tNFiscal1 As typeNFiscal
'Dim tParcelaReceber1 As typeParcelaReceber
'Dim dValor As Double
'
'On Error GoTo Erro_FluxoAnalitico_Grava_Recebtos_1
'
'    tNFiscal1.dValorTotal = tFluxoAux1.tNFiscal.dValorTotal
'    tParcelaReceber1.dSaldo = tFluxoAux1.tParcelaReceber.dSaldo
'
'    Do While alErro(1) = AD_SQL_SUCESSO And alErro(2) = AD_SQL_SUCESSO And alErro(3) = AD_SQL_SUCESSO
'
'        If tFluxoAux1.tDebitosRecCli.lCliente = tFluxoAux1.tNFiscal.lCliente And tFluxoAux1.tDebitosRecCli.iFilial = tFluxoAux1.tNFiscal.iFilialCli Then
'
'            If tFluxoAux1.tDebitosRecCli.lCliente = tFluxoAux1.tTituloReceber.lCliente And tFluxoAux1.tDebitosRecCli.iFilial = tFluxoAux1.tTituloReceber.iFilial And tFluxoAux1.tNFiscal.dtDataVencimento > tFluxoAux1.tParcelaReceber.dtDataVencimento Then GoTo Label_MenorData
'
'            If tNFiscal1.dValorTotal <= tFluxoAux1.tDebitosRecCli.dSaldo Then
'
'                tFluxoAux1.tDebitosRecCli.dSaldo = tFluxoAux1.tDebitosRecCli.dSaldo - tNFiscal1.dValorTotal
'
'                lErro = Comando_Executar(alComando(4), "INSERT INTO FluxoAnalitico (FluxoId, TipoReg, Fornecedor, Filial, SiglaDocumento, NumTitulo, NumParcela, Data, Valor, TipoFornecedor, NomeReduzido, Descricao, NumIntDoc) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", objFluxo.lFluxoId, FLUXOANALITICO_TIPOREG_RECEBTO, tFluxoAux1.tNFiscal.lCliente, tFluxoAux1.tNFiscal.iFilialCli, TIPODOC_NF_A_RECEBER, tFluxoAux1.tNFiscal.lNumNotaFiscal, 0, tFluxoAux1.tNFiscal.dtDataVencimento, tFluxoAux1.tNFiscal.dValorTotal, tFluxoAux1.iTipoForn_NFsRec, tFluxoAux1.sNomeReduzido_NFsRec, tFluxoAux1.sDescricaoTipo_NFsRec, tFluxoAux1.tNFiscal.lNumIntDoc)
'                If lErro <> AD_SQL_SUCESSO Then Error 20027
'
'                tDebitosRecCli1 = tFluxoAux1.tDebitosRecCli
'                tDebitosRecCli1.dSaldo = tNFiscal1.dValorTotal
'                tDebitosRecCli1.dtDataEmissao = tFluxoAux1.tNFiscal.dtDataVencimento
'
'                'atualiza/insere os recebimentos antecipados
'                lErro = FluxoAnalitico_Atualizar_Rec(alComando(5), alComando(9), alComando(4), objFluxo, tDebitosRecCli1, tFluxoAux1)
'                If lErro <> SUCESSO Then Error 20695
'
'                alErro(2) = Fluxo_Comando_BuscarProximo(alComando(2), tFluxoAux1.tNFiscal.dtDataVencimento, objFluxo.dtDataFinal, 0)
'                If alErro(2) <> AD_SQL_SUCESSO And alErro(2) <> AD_SQL_SEM_DADOS Then Error 20029
'
'                tNFiscal1.dValorTotal = tFluxoAux1.tNFiscal.dValorTotal
'
'                GoTo Label_FluxoAnalitico_Grava_Recebtos_1
'
'            Else
'
'                tFluxoAux1.tDebitosRecCli.dtDataEmissao = tFluxoAux1.tNFiscal.dtDataVencimento
'                tNFiscal1.dValorTotal = tNFiscal1.dValorTotal - tFluxoAux1.tDebitosRecCli.dSaldo
'
'                'atualiza/insere os recebimentos antecipados
'                lErro = FluxoAnalitico_Atualizar_Rec(alComando(5), alComando(9), alComando(4), objFluxo, tFluxoAux1.tDebitosRecCli, tFluxoAux1)
'                If lErro <> SUCESSO Then Error 20696
'
'                alErro(1) = Comando_BuscarProximo(alComando(1))
'                If alErro(1) <> AD_SQL_SUCESSO And alErro(1) <> AD_SQL_SEM_DADOS Then Error 20031
'
'                GoTo Label_FluxoAnalitico_Grava_Recebtos_1
'
'            End If
'
'        End If
'
'        If tFluxoAux1.tDebitosRecCli.lCliente = tFluxoAux1.tTituloReceber.lCliente And tFluxoAux1.tDebitosRecCli.iFilial = tFluxoAux1.tTituloReceber.iFilial Then
'
'Label_MenorData:
'            If tParcelaReceber1.dSaldo <= tFluxoAux1.tDebitosRecCli.dSaldo Then
'
'                tFluxoAux1.tDebitosRecCli.dSaldo = tFluxoAux1.tDebitosRecCli.dSaldo - tParcelaReceber1.dSaldo
'
'                lErro = Comando_Executar(alComando(4), "INSERT INTO FluxoAnalitico (FluxoId, TipoReg, Fornecedor, Filial, SiglaDocumento, NumTitulo, NumParcela, Data, Valor, TipoFornecedor, NomeReduzido, Descricao, NumIntDoc) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", objFluxo.lFluxoId, FLUXOANALITICO_TIPOREG_RECEBTO, tFluxoAux1.tTituloReceber.lCliente, tFluxoAux1.tTituloReceber.iFilial, tFluxoAux1.tTituloReceber.sSiglaDocumento, tFluxoAux1.tTituloReceber.lNumTitulo, tFluxoAux1.tParcelaReceber.iNumParcela, tFluxoAux1.tParcelaReceber.dtDataVencimento, tFluxoAux1.tParcelaReceber.dSaldo, tFluxoAux1.iTipoForn_TitRec, tFluxoAux1.sNomeReduzido_TitRec, tFluxoAux1.sDescricaoTipo_TitRec, tFluxoAux1.tParcelaReceber.lNumIntDoc)
'                If lErro <> AD_SQL_SUCESSO Then Error 20032
'
'                tDebitosRecCli1 = tFluxoAux1.tDebitosRecCli
'                tDebitosRecCli1.dSaldo = tParcelaReceber1.dSaldo
'                tDebitosRecCli1.dtDataEmissao = tFluxoAux1.tParcelaReceber.dtDataVencimento
'
'                'atualiza/insere os recebimentos antecipados
'                lErro = FluxoAnalitico_Atualizar_Rec(alComando(5), alComando(9), alComando(4), objFluxo, tDebitosRecCli1, tFluxoAux1)
'                If lErro <> SUCESSO Then Error 20697
'
'                alErro(3) = Fluxo_Comando_BuscarProximo(alComando(3), tFluxoAux1.tParcelaReceber.dtDataVencimento, objFluxo.dtDataFinal, tFluxoAux1.iDiasRetencao)
'                If alErro(3) <> AD_SQL_SUCESSO And alErro(3) <> AD_SQL_SEM_DADOS Then Error 20034
'
'                tParcelaReceber1.dSaldo = tFluxoAux1.tParcelaReceber.dSaldo
'
'                GoTo Label_FluxoAnalitico_Grava_Recebtos_1
'
'            Else
'
'                tFluxoAux1.tDebitosRecCli.dtDataEmissao = tFluxoAux1.tParcelaReceber.dtDataVencimento
'                tParcelaReceber1.dSaldo = tParcelaReceber1.dSaldo - tFluxoAux1.tDebitosRecCli.dSaldo
'
'                'atualiza/insere os recebimentos antecipados
'                lErro = FluxoAnalitico_Atualizar_Rec(alComando(5), alComando(9), alComando(4), objFluxo, tFluxoAux1.tDebitosRecCli, tFluxoAux1)
'                If lErro <> SUCESSO Then Error 20698
'
'                alErro(1) = Comando_BuscarProximo(alComando(1))
'                If alErro(1) <> AD_SQL_SUCESSO And alErro(1) <> AD_SQL_SEM_DADOS Then Error 20036
'
'                GoTo Label_FluxoAnalitico_Grava_Recebtos_1
'
'            End If
'
'        End If
'
'        If (tFluxoAux1.tDebitosRecCli.lCliente < tFluxoAux1.tNFiscal.lCliente Or (tFluxoAux1.tDebitosRecCli.lCliente = tFluxoAux1.tNFiscal.lCliente And tFluxoAux1.tDebitosRecCli.iFilial < tFluxoAux1.tNFiscal.iFilialCli)) And _
'           (tFluxoAux1.tDebitosRecCli.lCliente < tFluxoAux1.tTituloReceber.lCliente Or (tFluxoAux1.tDebitosRecCli.lCliente = tFluxoAux1.tTituloReceber.lCliente And tFluxoAux1.tDebitosRecCli.iFilial < tFluxoAux1.tTituloReceber.iFilial)) Then
'
'            alErro(1) = Comando_BuscarProximo(alComando(1))
'            If alErro(1) <> AD_SQL_SUCESSO And alErro(1) <> AD_SQL_SEM_DADOS Then Error 20037
'
'        Else
'
'            If tFluxoAux1.tDebitosRecCli.lCliente > tFluxoAux1.tNFiscal.lCliente Or (tFluxoAux1.tDebitosRecCli.lCliente = tFluxoAux1.tNFiscal.lCliente And tFluxoAux1.tDebitosRecCli.iFilial > tFluxoAux1.tNFiscal.iFilialCli) Then
'
'                lErro = Comando_Executar(alComando(4), "INSERT INTO FluxoAnalitico (FluxoId, TipoReg, Fornecedor, Filial, SiglaDocumento, NumTitulo, NumParcela, Data, Valor, TipoFornecedor, NomeReduzido, Descricao, NumIntDoc) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", objFluxo.lFluxoId, FLUXOANALITICO_TIPOREG_RECEBTO, tFluxoAux1.tNFiscal.lCliente, tFluxoAux1.tNFiscal.iFilialCli, TIPODOC_NF_A_RECEBER, tFluxoAux1.tNFiscal.lNumNotaFiscal, 0, tFluxoAux1.tNFiscal.dtDataVencimento, tFluxoAux1.tNFiscal.dValorTotal, tFluxoAux1.iTipoForn_NFsRec, tFluxoAux1.sNomeReduzido_NFsRec, tFluxoAux1.sDescricaoTipo_NFsRec, tFluxoAux1.tNFiscal.lNumIntDoc)
'                If lErro <> AD_SQL_SUCESSO Then Error 20038
'
'                alErro(2) = Fluxo_Comando_BuscarProximo(alComando(2), tFluxoAux1.tNFiscal.dtDataVencimento, objFluxo.dtDataFinal, 0)
'                If alErro(2) <> AD_SQL_SUCESSO And alErro(2) <> AD_SQL_SEM_DADOS Then Error 20039
'
'                tNFiscal1.dValorTotal = tFluxoAux1.tNFiscal.dValorTotal
'
'            End If
'
'            If tFluxoAux1.tDebitosRecCli.lCliente > tFluxoAux1.tTituloReceber.lCliente Or (tFluxoAux1.tDebitosRecCli.lCliente = tFluxoAux1.tTituloReceber.lCliente And tFluxoAux1.tDebitosRecCli.iFilial > tFluxoAux1.tTituloReceber.iFilial) Then
'
'                lErro = Comando_Executar(alComando(4), "INSERT INTO FluxoAnalitico (FluxoId, TipoReg, Fornecedor, Filial, SiglaDocumento, NumTitulo, NumParcela, Data, Valor, TipoFornecedor, NomeReduzido, Descricao, NumIntDoc) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", objFluxo.lFluxoId, FLUXOANALITICO_TIPOREG_RECEBTO, tFluxoAux1.tTituloReceber.lCliente, tFluxoAux1.tTituloReceber.iFilial, tFluxoAux1.tTituloReceber.sSiglaDocumento, tFluxoAux1.tTituloReceber.lNumTitulo, tFluxoAux1.tParcelaReceber.iNumParcela, tFluxoAux1.tParcelaReceber.dtDataVencimento, tFluxoAux1.tParcelaReceber.dSaldo, tFluxoAux1.iTipoForn_TitRec, tFluxoAux1.sNomeReduzido_TitRec, tFluxoAux1.sDescricaoTipo_TitRec, tFluxoAux1.tParcelaReceber.lNumIntDoc)
'                If lErro <> AD_SQL_SUCESSO Then Error 20040
'
'                alErro(3) = Fluxo_Comando_BuscarProximo(alComando(3), tFluxoAux1.tParcelaReceber.dtDataVencimento, objFluxo.dtDataFinal, tFluxoAux1.iDiasRetencao)
'                If alErro(3) <> AD_SQL_SUCESSO And alErro(3) <> AD_SQL_SEM_DADOS Then Error 20041
'
'                tParcelaReceber1.dSaldo = tFluxoAux1.tParcelaReceber.dSaldo
'
'            End If
'
'        End If
'
'Label_FluxoAnalitico_Grava_Recebtos_1:
'    Loop
'
'    FluxoAnalitico_Grava_Recebtos_1 = SUCESSO
'
'    Exit Function
'
'Erro_FluxoAnalitico_Grava_Recebtos_1:
'
'    FluxoAnalitico_Grava_Recebtos_1 = Err
'
'    Select Case Err
'
'        Case 20027, 20032, 20038, 20040
'            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FLUXOANALITICO", Err)
'
'        Case 20031, 20036, 20037
'            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_DEBITOSRECCLI", Err)
'
'        Case 20029, 20039
'            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NOTAS_FISCAIS_REC", Err)
'
'        Case 20034, 20041
'            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_REC1", Err)
'
'        Case 20695, 20696, 20697, 20698
'
'        Case Else
'            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148060)
'
'    End Select
'
'    Exit Function
'
'End Function
'
'Private Function FluxoAnalitico_Grava_Recebtos_2(ByVal objFluxo As ClassFluxo, alErro() As Long, alComando() As Long, tFluxoAux1 As typeFluxoAux1) As Long
''processa os registros de recebimento das tabelas de Debitos a Receber e Notas Fiscais a Receber
''IMPORTANTE: TEM QUE SER CHAMADA DENTRO DE TRANSACAO
'
'Dim lErro As Long
'Dim tDebitosRecCli1 As typeDebitosRecCli
'Dim tNFiscal1 As typeNFiscal
'
'On Error GoTo Erro_FluxoAnalitico_Grava_Recebtos_2
'
'    tNFiscal1.dValorTotal = tFluxoAux1.tNFiscal.dValorTotal
'
'    Do While alErro(1) = AD_SQL_SUCESSO And alErro(2) = AD_SQL_SUCESSO
'
'        If tFluxoAux1.tDebitosRecCli.lCliente = tFluxoAux1.tNFiscal.lCliente And tFluxoAux1.tDebitosRecCli.iFilial = tFluxoAux1.tNFiscal.iFilialCli Then
'
'            If tNFiscal1.dValorTotal <= tFluxoAux1.tDebitosRecCli.dSaldo Then
'
'                tFluxoAux1.tDebitosRecCli.dSaldo = tFluxoAux1.tDebitosRecCli.dSaldo - tNFiscal1.dValorTotal
'
'                lErro = Comando_Executar(alComando(4), "INSERT INTO FluxoAnalitico (FluxoId, TipoReg, Fornecedor, Filial, SiglaDocumento, NumTitulo, NumParcela, Data, Valor, TipoFornecedor, NomeReduzido, Descricao, NumIntDoc) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", objFluxo.lFluxoId, FLUXOANALITICO_TIPOREG_RECEBTO, tFluxoAux1.tNFiscal.lCliente, tFluxoAux1.tNFiscal.iFilialCli, TIPODOC_NF_A_RECEBER, tFluxoAux1.tNFiscal.lNumNotaFiscal, 0, tFluxoAux1.tNFiscal.dtDataVencimento, tFluxoAux1.tNFiscal.dValorTotal, tFluxoAux1.iTipoForn_NFsRec, tFluxoAux1.sNomeReduzido_NFsRec, tFluxoAux1.sDescricaoTipo_NFsRec, tFluxoAux1.tNFiscal.lNumIntDoc)
'                If lErro <> AD_SQL_SUCESSO Then Error 20042
'
'                tDebitosRecCli1 = tFluxoAux1.tDebitosRecCli
'                tDebitosRecCli1.dSaldo = tNFiscal1.dValorTotal
'                tDebitosRecCli1.dtDataEmissao = tFluxoAux1.tNFiscal.dtDataVencimento
'
'                'atualiza/insere os recebimentos antecipados
'                lErro = FluxoAnalitico_Atualizar_Rec(alComando(5), alComando(9), alComando(4), objFluxo, tDebitosRecCli1, tFluxoAux1)
'                If lErro <> SUCESSO Then Error 20699
'
'                alErro(2) = Fluxo_Comando_BuscarProximo(alComando(2), tFluxoAux1.tNFiscal.dtDataVencimento, objFluxo.dtDataFinal, 0)
'                If alErro(2) <> AD_SQL_SUCESSO And alErro(2) <> AD_SQL_SEM_DADOS Then Error 20044
'
'                tNFiscal1.dValorTotal = tFluxoAux1.tNFiscal.dValorTotal
'
'                GoTo Label_FluxoAnalitico_Grava_Recebtos_2
'
'            Else
'
'                tFluxoAux1.tDebitosRecCli.dtDataEmissao = tFluxoAux1.tNFiscal.dtDataVencimento
'                tNFiscal1.dValorTotal = tNFiscal1.dValorTotal - tFluxoAux1.tDebitosRecCli.dSaldo
'
'                'atualiza/insere os recebimentos antecipados
'                lErro = FluxoAnalitico_Atualizar_Rec(alComando(5), alComando(9), alComando(4), objFluxo, tFluxoAux1.tDebitosRecCli, tFluxoAux1)
'                If lErro <> SUCESSO Then Error 20700
'
'                alErro(1) = Comando_BuscarProximo(alComando(1))
'                If alErro(1) <> AD_SQL_SUCESSO And alErro(1) <> AD_SQL_SEM_DADOS Then Error 20046
'
'                GoTo Label_FluxoAnalitico_Grava_Recebtos_2
'
'            End If
'
'        End If
'
'        If (tFluxoAux1.tDebitosRecCli.lCliente < tFluxoAux1.tNFiscal.lCliente Or (tFluxoAux1.tDebitosRecCli.lCliente = tFluxoAux1.tNFiscal.lCliente And tFluxoAux1.tDebitosRecCli.iFilial < tFluxoAux1.tNFiscal.iFilialCli)) Then
'
'            alErro(1) = Comando_BuscarProximo(alComando(1))
'            If alErro(1) <> AD_SQL_SUCESSO And alErro(1) <> AD_SQL_SEM_DADOS Then Error 20047
'
'        Else
'
'            lErro = Comando_Executar(alComando(4), "INSERT INTO FluxoAnalitico (FluxoId, TipoReg, Fornecedor, Filial, SiglaDocumento, NumTitulo, NumParcela, Data, Valor, TipoFornecedor, NomeReduzido, Descricao, NumIntDoc) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", objFluxo.lFluxoId, FLUXOANALITICO_TIPOREG_RECEBTO, tFluxoAux1.tNFiscal.lCliente, tFluxoAux1.tNFiscal.iFilialCli, TIPODOC_NF_A_RECEBER, tFluxoAux1.tNFiscal.lNumNotaFiscal, 0, tFluxoAux1.tNFiscal.dtDataVencimento, tFluxoAux1.tNFiscal.dValorTotal, tFluxoAux1.iTipoForn_NFsRec, tFluxoAux1.sNomeReduzido_NFsRec, tFluxoAux1.sDescricaoTipo_NFsRec, tFluxoAux1.tNFiscal.lNumIntDoc)
'            If lErro <> AD_SQL_SUCESSO Then Error 20048
'
'            alErro(2) = Fluxo_Comando_BuscarProximo(alComando(2), tFluxoAux1.tNFiscal.dtDataVencimento, objFluxo.dtDataFinal, 0)
'            If alErro(2) <> AD_SQL_SUCESSO And alErro(2) <> AD_SQL_SEM_DADOS Then Error 20049
'
'            tNFiscal1.dValorTotal = tFluxoAux1.tNFiscal.dValorTotal
'
'        End If
'
'Label_FluxoAnalitico_Grava_Recebtos_2:
'    Loop
'
'    FluxoAnalitico_Grava_Recebtos_2 = SUCESSO
'
'    Exit Function
'
'Erro_FluxoAnalitico_Grava_Recebtos_2:
'
'    FluxoAnalitico_Grava_Recebtos_2 = Err
'
'    Select Case Err
'
'        Case 20042, 20048
'            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FLUXOANALITICO", Err)
'
'        Case 20046, 20047
'            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_DEBITOSRECCLI", Err)
'
'        Case 20044, 20049
'            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NOTAS_FISCAIS_REC", Err)
'
'        Case 20699, 20700
'
'        Case Else
'            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148061)
'
'    End Select
'
'    Exit Function
'
'End Function
'
'Private Function FluxoAnalitico_Grava_Recebtos_3(ByVal objFluxo As ClassFluxo, alErro() As Long, alComando() As Long, tFluxoAux1 As typeFluxoAux1) As Long
''processa os registros de recebimento das tabelas de Debitos a Receber e Parcelas a Receber
''IMPORTANTE: TEM QUE SER CHAMADA DENTRO DE TRANSACAO
'
'Dim lErro As Long
'Dim tDebitosRecCli1 As typeDebitosRecCli
'Dim tParcelaReceber1 As typeParcelaReceber
'
'On Error GoTo Erro_FluxoAnalitico_Grava_Recebtos_3
'
'    tParcelaReceber1.dSaldo = tFluxoAux1.tParcelaReceber.dSaldo
'
'    Do While alErro(1) = AD_SQL_SUCESSO And alErro(3) = AD_SQL_SUCESSO
'
'        If tFluxoAux1.tDebitosRecCli.lCliente = tFluxoAux1.tTituloReceber.lCliente And tFluxoAux1.tDebitosRecCli.iFilial = tFluxoAux1.tTituloReceber.iFilial Then
'
'            If tParcelaReceber1.dSaldo <= tFluxoAux1.tDebitosRecCli.dSaldo Then
'
'                tFluxoAux1.tDebitosRecCli.dSaldo = tFluxoAux1.tDebitosRecCli.dSaldo - tParcelaReceber1.dSaldo
'
'                lErro = Comando_Executar(alComando(4), "INSERT INTO FluxoAnalitico (FluxoId, TipoReg, Fornecedor, Filial, SiglaDocumento, NumTitulo, NumParcela, Data, Valor, TipoFornecedor, NomeReduzido, Descricao, NumIntDoc) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", objFluxo.lFluxoId, FLUXOANALITICO_TIPOREG_RECEBTO, tFluxoAux1.tTituloReceber.lCliente, tFluxoAux1.tTituloReceber.iFilial, tFluxoAux1.tTituloReceber.sSiglaDocumento, tFluxoAux1.tTituloReceber.lNumTitulo, tFluxoAux1.tParcelaReceber.iNumParcela, tFluxoAux1.tParcelaReceber.dtDataVencimento, tFluxoAux1.tParcelaReceber.dSaldo, tFluxoAux1.iTipoForn_TitRec, tFluxoAux1.sNomeReduzido_TitRec, tFluxoAux1.sDescricaoTipo_TitRec, tFluxoAux1.tParcelaReceber.lNumIntDoc)
'                If lErro <> AD_SQL_SUCESSO Then Error 20050
'
'                tDebitosRecCli1 = tFluxoAux1.tDebitosRecCli
'                tDebitosRecCli1.dSaldo = tParcelaReceber1.dSaldo
'                tDebitosRecCli1.dtDataEmissao = tFluxoAux1.tParcelaReceber.dtDataVencimento
'
'                'atualiza/insere os recebimentos antecipados
'                lErro = FluxoAnalitico_Atualizar_Rec(alComando(5), alComando(9), alComando(4), objFluxo, tDebitosRecCli1, tFluxoAux1)
'                If lErro <> SUCESSO Then Error 20701
'
'                alErro(3) = Fluxo_Comando_BuscarProximo(alComando(3), tFluxoAux1.tParcelaReceber.dtDataVencimento, objFluxo.dtDataFinal, tFluxoAux1.iDiasRetencao)
'                If alErro(3) <> AD_SQL_SUCESSO And alErro(3) <> AD_SQL_SEM_DADOS Then Error 20052
'
'                tParcelaReceber1.dSaldo = tFluxoAux1.tParcelaReceber.dSaldo
'
'                GoTo Label_FluxoAnalitico_Grava_Recebtos_3
'
'            Else
'
'                tFluxoAux1.tDebitosRecCli.dtDataEmissao = tFluxoAux1.tParcelaReceber.dtDataVencimento
'                tParcelaReceber1.dSaldo = tParcelaReceber1.dSaldo - tFluxoAux1.tDebitosRecCli.dSaldo
'
'                'atualiza/insere os recebimentos antecipados
'                lErro = FluxoAnalitico_Atualizar_Rec(alComando(5), alComando(9), alComando(4), objFluxo, tFluxoAux1.tDebitosRecCli, tFluxoAux1)
'                If lErro <> SUCESSO Then Error 20702
'
'                alErro(1) = Comando_BuscarProximo(alComando(1))
'                If alErro(1) <> AD_SQL_SUCESSO And alErro(1) <> AD_SQL_SEM_DADOS Then Error 20054
'
'                GoTo Label_FluxoAnalitico_Grava_Recebtos_3
'
'            End If
'
'        End If
'
'        If tFluxoAux1.tDebitosRecCli.lCliente < tFluxoAux1.tTituloReceber.lCliente Or (tFluxoAux1.tDebitosRecCli.lCliente = tFluxoAux1.tTituloReceber.lCliente And tFluxoAux1.tDebitosRecCli.iFilial < tFluxoAux1.tTituloReceber.iFilial) Then
'
'            alErro(1) = Comando_BuscarProximo(alComando(1))
'            If alErro(1) <> AD_SQL_SUCESSO And alErro(1) <> AD_SQL_SEM_DADOS Then Error 20055
'
'        Else
'
'            lErro = Comando_Executar(alComando(4), "INSERT INTO FluxoAnalitico (FluxoId, TipoReg, Fornecedor, Filial, SiglaDocumento, NumTitulo, NumParcela, Data, Valor, TipoFornecedor, NomeReduzido, Descricao, NumIntDoc) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", objFluxo.lFluxoId, FLUXOANALITICO_TIPOREG_RECEBTO, tFluxoAux1.tTituloReceber.lCliente, tFluxoAux1.tTituloReceber.iFilial, tFluxoAux1.tTituloReceber.sSiglaDocumento, tFluxoAux1.tTituloReceber.lNumTitulo, tFluxoAux1.tParcelaReceber.iNumParcela, tFluxoAux1.tParcelaReceber.dtDataVencimento, tFluxoAux1.tParcelaReceber.dSaldo, tFluxoAux1.iTipoForn_TitRec, tFluxoAux1.sNomeReduzido_TitRec, tFluxoAux1.sDescricaoTipo_TitRec, tFluxoAux1.tParcelaReceber.lNumIntDoc)
'            If lErro <> AD_SQL_SUCESSO Then Error 20056
'
'            alErro(3) = Fluxo_Comando_BuscarProximo(alComando(3), tFluxoAux1.tParcelaReceber.dtDataVencimento, objFluxo.dtDataFinal, tFluxoAux1.iDiasRetencao)
'            If alErro(3) <> AD_SQL_SUCESSO And alErro(3) <> AD_SQL_SEM_DADOS Then Error 20057
'
'            tParcelaReceber1.dSaldo = tFluxoAux1.tParcelaReceber.dSaldo
'        End If
'
'Label_FluxoAnalitico_Grava_Recebtos_3:
'    Loop
'
'    FluxoAnalitico_Grava_Recebtos_3 = SUCESSO
'
'    Exit Function
'
'Erro_FluxoAnalitico_Grava_Recebtos_3:
'
'    FluxoAnalitico_Grava_Recebtos_3 = Err
'
'    Select Case Err
'
'        Case 20050, 20051, 20053, 20056
'            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FLUXOANALITICO", Err)
'
'        Case 20054, 20055
'            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_DEBITOSRECCLI", Err)
'
'        Case 20052, 20057
'            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_REC1", Err)
'
'        Case 20701, 20702
'
'        Case Else
'            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148062)
'
'    End Select
'
'    Exit Function
'
'End Function
'
'Private Function FluxoAnalitico_Grava_Recebtos_4(ByVal objFluxo As ClassFluxo, ByVal lComando As Long, ByVal lComando1 As Long, tFluxoAux1 As typeFluxoAux1) As Long
''processa os registros da tabela de Notas Fiscais a Receber
''IMPORTANTE: TEM QUE SER CHAMADA DENTRO DE TRANSACAO
'
'Dim lErro As Long
'
'On Error GoTo Erro_FluxoAnalitico_Grava_Recebtos_4
'
'    lErro = AD_SQL_SUCESSO
'
'    Do While lErro = AD_SQL_SUCESSO
'
'        lErro = Comando_Executar(lComando1, "INSERT INTO FluxoAnalitico (FluxoId, TipoReg, Fornecedor, Filial, SiglaDocumento, NumTitulo, NumParcela, Data, Valor, TipoFornecedor, NomeReduzido, Descricao, NumIntDoc) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", objFluxo.lFluxoId, FLUXOANALITICO_TIPOREG_RECEBTO, tFluxoAux1.tNFiscal.lCliente, tFluxoAux1.tNFiscal.iFilialCli, TIPODOC_NF_A_RECEBER, tFluxoAux1.tNFiscal.lNumNotaFiscal, 0, tFluxoAux1.tNFiscal.dtDataVencimento, tFluxoAux1.tNFiscal.dValorTotal, tFluxoAux1.iTipoForn_NFsRec, tFluxoAux1.sNomeReduzido_NFsRec, tFluxoAux1.sDescricaoTipo_NFsRec, tFluxoAux1.tNFiscal.lNumIntDoc)
'        If lErro <> AD_SQL_SUCESSO Then Error 20058
'
'        lErro = Fluxo_Comando_BuscarProximo(lComando, tFluxoAux1.tNFiscal.dtDataVencimento, objFluxo.dtDataFinal, 0)
'        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 20059
'
'    Loop
'
'    FluxoAnalitico_Grava_Recebtos_4 = SUCESSO
'
'    Exit Function
'
'Erro_FluxoAnalitico_Grava_Recebtos_4:
'
'    FluxoAnalitico_Grava_Recebtos_4 = Err
'
'    Select Case Err
'
'        Case 20058
'            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FLUXOANALITICO", Err)
'
'        Case 20059
'            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NOTAS_FISCAIS_REC", Err)
'
'        Case Else
'            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148063)
'
'    End Select
'
'    Exit Function
'
'End Function
'
'Private Function FluxoAnalitico_Grava_Recebtos_5(ByVal objFluxo As ClassFluxo, ByVal lComando As Long, ByVal lComando1 As Long, tFluxoAux1 As typeFluxoAux1) As Long
''processa os registros da tabela de Parcelas A Receber
''IMPORTANTE: TEM QUE SER CHAMADA DENTRO DE TRANSACAO
'
'Dim lErro As Long
'
'On Error GoTo Erro_FluxoAnalitico_Grava_Recebtos_5
'
'    lErro = AD_SQL_SUCESSO
'
'    Do While lErro = AD_SQL_SUCESSO
'
'        lErro = Comando_Executar(lComando1, "INSERT INTO FluxoAnalitico (FluxoId, TipoReg, Fornecedor, Filial, SiglaDocumento, NumTitulo, NumParcela, Data, Valor, TipoFornecedor, NomeReduzido, Descricao, NumIntDoc) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", objFluxo.lFluxoId, FLUXOANALITICO_TIPOREG_RECEBTO, tFluxoAux1.tTituloReceber.lCliente, tFluxoAux1.tTituloReceber.iFilial, tFluxoAux1.tTituloReceber.sSiglaDocumento, tFluxoAux1.tTituloReceber.lNumTitulo, tFluxoAux1.tParcelaReceber.iNumParcela, tFluxoAux1.tParcelaReceber.dtDataVencimento, tFluxoAux1.tParcelaReceber.dSaldo, tFluxoAux1.iTipoForn_TitRec, tFluxoAux1.sNomeReduzido_TitRec, tFluxoAux1.sDescricaoTipo_TitRec, tFluxoAux1.tParcelaReceber.lNumIntDoc)
'        If lErro <> AD_SQL_SUCESSO Then Error 20060
'
'        lErro = Fluxo_Comando_BuscarProximo(lComando, tFluxoAux1.tParcelaReceber.dtDataVencimento, objFluxo.dtDataFinal, tFluxoAux1.iDiasRetencao)
'        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 20061
'
'    Loop
'
'    FluxoAnalitico_Grava_Recebtos_5 = SUCESSO
'
'    Exit Function
'
'Erro_FluxoAnalitico_Grava_Recebtos_5:
'
'    FluxoAnalitico_Grava_Recebtos_5 = Err
'
'    Select Case Err
'
'        Case 20060
'            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FLUXOANALITICO", Err)
'
'        Case 20061
'            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_REC1", Err)
'
'        Case Else
'            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148064)
'
'    End Select
'
'    Exit Function
'
'End Function

Function FluxoAplic_Grava_Aplicacoes(ByVal objFluxo As ClassFluxo) As Long
'grava as previsoes de resgate no fluxo analitico
'IMPORTANTE: TEM QUE SER CHAMADA DENTRO DE TRANSACAO

Dim lErro As Long
Dim alComando(1 To 4) As Long
Dim iIndice As Integer
Dim tAplicacao As typeAplicacao
Dim dtData As Date
Dim iTipoAplicacao As Integer
Dim dValor As Double
Dim iAchou As Integer

On Error GoTo Erro_FluxoAplic_Grava_Aplicacoes

    For iIndice = LBound(alComando) To UBound(alComando)

        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 20063

    Next

    'seleciona as previsoes de resgate das aplicacoes
    If giFilialEmpresa = EMPRESA_TODA Then

        'Pesquisa todas as previsoes de resgate no ambito empresa
        lErro = Comando_Executar(alComando(1), "SELECT FilialEmpresa, Codigo, DataResgatePrevista, ValorResgatePrevisto, TipoAplicacao, SaldoAplicado FROM Aplicacoes WHERE Status = ? AND DataResgatePrevista >= ? AND DataResgatePrevista <= ? ORDER BY TipoAplicacao, DataResgatePrevista", tAplicacao.iFilialEmpresa, tAplicacao.lCodigo, tAplicacao.dtDataResgatePrevista, tAplicacao.dValorResgatePrevisto, tAplicacao.iTipoAplicacao, tAplicacao.dSaldoAplicado, APLICACAO_ATIVA, objFluxo.dtDataBase, objFluxo.dtDataFinal + 7)
        If lErro <> AD_SQL_SUCESSO Then Error 20064

    Else

        lErro = Comando_Executar(alComando(1), "SELECT Codigo, DataResgatePrevista, ValorResgatePrevisto, TipoAplicacao, SaldoAplicado FROM Aplicacoes WHERE FilialEmpresa = ? AND Status = ? AND DataResgatePrevista >= ? AND DataResgatePrevista <= ? ORDER BY TipoAplicacao, DataResgatePrevista", tAplicacao.lCodigo, tAplicacao.dtDataResgatePrevista, tAplicacao.dValorResgatePrevisto, tAplicacao.iTipoAplicacao, tAplicacao.dSaldoAplicado, giFilialEmpresa, APLICACAO_ATIVA, objFluxo.dtDataBase, objFluxo.dtDataFinal + 7)
        If lErro <> AD_SQL_SUCESSO Then Error 20065

    End If

    lErro = Fluxo_Comando_BuscarProximo(alComando(1), tAplicacao.dtDataResgatePrevista, objFluxo, 0)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 20066

    dtData = tAplicacao.dtDataResgatePrevista
    dValor = 0
    iTipoAplicacao = tAplicacao.iTipoAplicacao

    If lErro = AD_SQL_SUCESSO Then
        iAchou = 1
    Else
        iAchou = 0
    End If

    Do While lErro = AD_SQL_SUCESSO

        If dtData <> tAplicacao.dtDataResgatePrevista Or iTipoAplicacao <> tAplicacao.iTipoAplicacao Then

            lErro = Comando_Executar(alComando(3), "INSERT INTO FluxoTipoAplic (FluxoId, TipoAplicacao, Data, TotalSistema) VALUES (?,?,?,?)", objFluxo.lFluxoId, iTipoAplicacao, dtData, dValor)
            If lErro <> AD_SQL_SUCESSO Then Error 20080

            dtData = tAplicacao.dtDataResgatePrevista
            iTipoAplicacao = tAplicacao.iTipoAplicacao
            dValor = 0

        End If

        dValor = dValor + tAplicacao.dValorResgatePrevisto

        lErro = Comando_Executar(alComando(2), "INSERT INTO FluxoAplic (FluxoId, Codigo, DataResgatePrevista, SaldoAplicado, ValorResgatePrevisto) VALUES (?,?,?,?,?)", objFluxo.lFluxoId, tAplicacao.lCodigo, tAplicacao.dtDataResgatePrevista, tAplicacao.dSaldoAplicado, tAplicacao.dValorResgatePrevisto)
        If lErro <> AD_SQL_SUCESSO Then Error 20067

        lErro = Comando_Executar(alComando(4), "INSERT INTO FluxoAnalitico (FluxoId, TipoReg, NumTitulo, Data, Valor, TipoFornecedor, Fornecedor, Filial, SiglaDocumento, NumParcela, NomeReduzido, NumIntDoc) VALUES (?,?,?,?,?,?,0,0,0,0,0,0)", objFluxo.lFluxoId, FLUXOANALITICO_TIPOREG_APLICACAO, CStr(tAplicacao.lCodigo), tAplicacao.dtDataResgatePrevista, tAplicacao.dValorResgatePrevisto, tAplicacao.iTipoAplicacao)
        If lErro <> AD_SQL_SUCESSO Then Error 20084

        lErro = Fluxo_Comando_BuscarProximo(alComando(1), tAplicacao.dtDataResgatePrevista, objFluxo, 0)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 20068

    Loop

    If iAchou = 1 Then

        lErro = Comando_Executar(alComando(3), "INSERT INTO FluxoTipoAplic (FluxoId, TipoAplicacao, Data, TotalSistema) VALUES (?,?,?,?)", objFluxo.lFluxoId, iTipoAplicacao, dtData, dValor)
        If lErro <> AD_SQL_SUCESSO Then Error 20081

    End If

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    FluxoAplic_Grava_Aplicacoes = SUCESSO

    Exit Function

Erro_FluxoAplic_Grava_Aplicacoes:

    FluxoAplic_Grava_Aplicacoes = Err

    Select Case Err

        Case 20063
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 20064, 20065, 20066, 20068
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_APLICACOES1", Err)

        Case 20067
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FLUXOAPLIC", Err)

        Case 20080, 20081
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FLUXOTIPOAPLIC", Err)

        Case 20084
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FLUXOANALITICO", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148065)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function FluxoSaldosIniciais_Grava(ByVal objFluxo As ClassFluxo) As Long
'grava os saldos inciais das contas correntes na tabela de FluxoSaldosIniciais
'IMPORTANTE: TEM QUE SER CHAMADA DENTRO DE TRANSACAO

Dim lErro As Long
Dim iAno As Integer
Dim iAnoCCIMov As Integer
Dim iMes As Integer
Dim dtDataInicial As Date
Dim alComando(1 To 5) As Long
Dim iIndice As Integer
Dim dCred(1 To 12) As Double
Dim dDeb(1 To 12) As Double
Dim dDeb1 As Double
Dim dCred1 As Double
Dim dSaldoInicial As Double
Dim tCCi As typeContaCorrenteInt

On Error GoTo Erro_FluxoSaldosIniciais_Grava

    For iIndice = LBound(alComando) To UBound(alComando)

        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 20071

    Next

    iAno = Year(objFluxo.dtDataBase)
    iMes = Month(objFluxo.dtDataBase)
    dtDataInicial = CDate("01" & "/" & CStr(iMes) & "/" & CStr(iAno))

    tCCi.sNomeReduzido = String(STRING_NOME_REDUZIDO, 0)

    'seleciona os saldos iniciais das contas correntes
    If giFilialEmpresa = EMPRESA_TODA Then

        'Pesquisa os saldos iniciais das contas
        lErro = Comando_Executar(alComando(5), "SELECT FilialEmpresa, Codigo, NomeReduzido, SaldoInicial FROM ContasCorrentesInternas WHERE DataSaldoInicial <= ? AND ChequePre <> ?", tCCi.iFilialEmpresa, tCCi.iCodigo, tCCi.sNomeReduzido, dSaldoInicial, objFluxo.dtDataBase, CONTA_CHEQUE_PRE)
        If lErro <> AD_SQL_SUCESSO Then Error 55909

    Else

        lErro = Comando_Executar(alComando(5), "SELECT Codigo, NomeReduzido, SaldoInicial FROM ContasCorrentesInternas WHERE FilialEmpresa = ? AND DataSaldoInicial <= ? AND ChequePre <> ?", tCCi.iCodigo, tCCi.sNomeReduzido, dSaldoInicial, giFilialEmpresa, objFluxo.dtDataBase, CONTA_CHEQUE_PRE)
        If lErro <> AD_SQL_SUCESSO Then Error 55910

    End If

    lErro = Comando_BuscarPrimeiro(alComando(5))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 55911

    Do While lErro = AD_SQL_SUCESSO

        'Complementa a Pesquisa dos saldos iniciais das contas
        lErro = Comando_Executar(alComando(1), "SELECT Ano, Deb01, Cred01, Deb02, Cred02, Deb03, Cred03, Deb04, Cred04, Deb05, Cred05, Deb06, Cred06, Deb07, Cred07, Deb08, Cred08, Deb09, Cred09, Deb10, Cred10, Deb11, Cred11, Deb12, Cred12 FROM CCIMov WHERE CodContaCorrenteInterna = ? AND Ano <= ?", iAnoCCIMov, dDeb(1), dCred(1), dDeb(2), dCred(2), dDeb(3), dCred(3), dDeb(4), dCred(4), dDeb(5), dCred(5), dDeb(6), dCred(6), dDeb(7), dCred(7), dDeb(8), dCred(8), dDeb(9), dCred(9), dDeb(10), dCred(10), dDeb(11), dCred(11), dDeb(12), dCred(12), tCCi.iCodigo, iAno)
        If lErro <> AD_SQL_SUCESSO Then Error 20072
        
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 20074
        
        Do While lErro = AD_SQL_SUCESSO
        
                    
            If iAno = iAnoCCIMov Then
            
                'calcula o valor do saldo inicial
                For iIndice = 1 To iMes - 1
                    dSaldoInicial = dSaldoInicial + dCred(iIndice) - dDeb(iIndice)
                Next
                
            Else
            
                'calcula o valor do saldo inicial
                For iIndice = 1 To 12
                    dSaldoInicial = dSaldoInicial + dCred(iIndice) - dDeb(iIndice)
                Next
            
            End If
            
            lErro = Comando_BuscarProximo(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 20079
        
        Loop
            
        'pesquisar em CCIMovDia as movimentações entre o primeiro dia do mes e a database
        lErro = Comando_Executar(alComando(2), "SELECT Deb, Cred FROM CCIMovDia WHERE CodContaCorrenteInterna = ? AND Data >= ? AND Data <= ?", dDeb1, dCred1, tCCi.iCodigo, dtDataInicial, objFluxo.dtDataBase)
        If lErro <> AD_SQL_SUCESSO Then Error 20075
    
        lErro = Comando_BuscarPrimeiro(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 20076
    
        Do While lErro = AD_SQL_SUCESSO
    
            dSaldoInicial = dSaldoInicial + dCred1 - dDeb1
    
            lErro = Comando_BuscarProximo(alComando(2))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 20077
    
        Loop
    
        lErro = Comando_Executar(alComando(3), "INSERT INTO FluxoSaldosIniciais (FluxoId, NomeReduzido, CodConta, SaldoSistema, SaldoAjustado) VALUES (?,?,?,?,?)", objFluxo.lFluxoId, tCCi.sNomeReduzido, tCCi.iCodigo, dSaldoInicial, dSaldoInicial)
        If lErro <> AD_SQL_SUCESSO Then Error 20078
    
        lErro = Comando_Executar(alComando(4), "INSERT INTO FluxoAnalitico (FluxoId, TipoReg, NumTitulo, Data, Valor, Fornecedor, Filial, SiglaDocumento, NumParcela, NomeReduzido, NumIntDoc) VALUES (?,?,?,?,?,0,0,0,0,0,0)", objFluxo.lFluxoId, FLUXOANALITICO_TIPOREG_SALDOINI, CStr(tCCi.iCodigo), objFluxo.dtDataBase, dSaldoInicial)
        If lErro <> AD_SQL_SUCESSO Then Error 20085
        
        lErro = Comando_BuscarProximo(alComando(5))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 55912

    Loop

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    FluxoSaldosIniciais_Grava = SUCESSO

    Exit Function

Erro_FluxoSaldosIniciais_Grava:

    FluxoSaldosIniciais_Grava = Err

    Select Case Err

        Case 20071
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 20072, 20074, 20079
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CCI_CCIMOV", Err)

        Case 20075, 20076, 20077
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CCIMOVDIA1", Err)

        Case 20078
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FLUXOSALDOSINICIAIS", Err)

        Case 20085
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FLUXOANALITICO", Err)

        Case 55909, 55910, 55911, 55912
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONTASCORRENTESINTERNAS", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148066)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function FluxoConsolidado_Grava(ByVal objFluxo As ClassFluxo) As Long
'grava os dados consolidados por Fornecedor e Tipo de Fornecedor no fluxo analitico
'IMPORTANTE: TEM QUE SER CHAMADA DENTRO DE TRANSACAO

Dim lErro As Long
Dim alComando(1 To 4) As Long
Dim iIndice As Integer
Dim tFluxoAnalitico As typeFluxoAnalitico
Dim iTipoReg As Integer
Dim iTipo As Integer
Dim lFornecedor As Long
Dim dValorTipo As Double
Dim dValor As Double
Dim dtData As Date
Dim dValorForn As Double
Dim dValorPag As Double
Dim dValorRec As Double
Dim dValorSaldo As Double
Dim sNomeReduzido As String
Dim sDescricao As String
Dim iAchou As Integer
Dim dValorTes As Double
Dim dAcumAnt As Double
Dim dAcumAtual As Double

On Error GoTo Erro_FluxoConsolidado_Grava

    For iIndice = LBound(alComando) To UBound(alComando)

        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 20086

    Next

    sNomeReduzido = String(STRING_FLUXOANALITICO_NOME_REDUZIDO, 0)
    tFluxoAnalitico.sNomeReduzido = String(STRING_FLUXOANALITICO_NOME_REDUZIDO, 0)
    tFluxoAnalitico.sDescricao = String(STRING_FLUXOANALITICO_DESCRICAO, 0)

    'Pesquisa os registros de fluxo analitico
    lErro = Comando_Executar(alComando(1), "SELECT TipoReg, Fornecedor, TipoFornecedor, Data, Valor, NomeReduzido, Descricao FROM FluxoAnalitico WHERE FluxoId = ? ORDER BY Data, TipoReg, TipoFornecedor, Fornecedor", tFluxoAnalitico.iTipoReg, tFluxoAnalitico.lFornecedor, tFluxoAnalitico.iTipo, tFluxoAnalitico.dtData, tFluxoAnalitico.dValor, tFluxoAnalitico.sNomeReduzido, tFluxoAnalitico.sDescricao, objFluxo.lFluxoId)
    If lErro <> AD_SQL_SUCESSO Then Error 20087

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 20088

    If lErro = AD_SQL_SUCESSO Then
        dtData = tFluxoAnalitico.dtData
        iTipoReg = tFluxoAnalitico.iTipoReg
        iTipo = tFluxoAnalitico.iTipo
        lFornecedor = tFluxoAnalitico.lFornecedor
        sNomeReduzido = tFluxoAnalitico.sNomeReduzido
        sDescricao = tFluxoAnalitico.sDescricao
        iAchou = 1
    Else
        iAchou = 0
    End If

    dValorForn = 0
    dValorTipo = 0
    dValorPag = 0
    dValorRec = 0
    dValorSaldo = 0
    dValorTes = 0

    Do While lErro = AD_SQL_SUCESSO

        'se quebrou data ou tipo do registro ou o tipo do cliente/fornecedor ou o cliente/fornecedor
        If dtData <> tFluxoAnalitico.dtData Or iTipoReg <> tFluxoAnalitico.iTipoReg Or iTipo <> tFluxoAnalitico.iTipo Or lFornecedor <> tFluxoAnalitico.lFornecedor Then

            If iTipoReg = FLUXOANALITICO_TIPOREG_PAGTO Or iTipoReg = FLUXOANALITICO_TIPOREG_RECEBTO Then

                'insere registro no fluxo por fornecedor/cliente
                lErro = Comando_Executar(alComando(4), "INSERT INTO FluxoForn (FluxoId, TipoReg, TipoFornecedor, Fornecedor, Data, TotalSistema, NomeReduzido, TotalAjustado) VALUES (?,?,?,?,?,?,?,?)", objFluxo.lFluxoId, iTipoReg, iTipo, lFornecedor, dtData, dValorForn, sNomeReduzido, dValorForn)
                If lErro <> AD_SQL_SUCESSO Then Error 20089

            End If

            dValorForn = 0

            lFornecedor = tFluxoAnalitico.lFornecedor
            sNomeReduzido = tFluxoAnalitico.sNomeReduzido

        End If

        'se quebrou data ou tipo do registro ou o tipo do cliente/fornecedor
        If dtData <> tFluxoAnalitico.dtData Or iTipoReg <> tFluxoAnalitico.iTipoReg Or iTipo <> tFluxoAnalitico.iTipo Then

            If iTipoReg = FLUXOANALITICO_TIPOREG_PAGTO Or iTipoReg = FLUXOANALITICO_TIPOREG_RECEBTO Then

                'insere registro no fluxo por tipo
                lErro = Comando_Executar(alComando(3), "INSERT INTO FluxoTipoForn (FluxoId, TipoReg, TipoFornecedor, Data, TotalSistema, Descricao, TotalAjustado) VALUES (?,?,?,?,?,?,?)", objFluxo.lFluxoId, iTipoReg, iTipo, dtData, dValorTipo, sDescricao, dValorTipo)
                If lErro <> AD_SQL_SUCESSO Then Error 20090

            End If

            dValorTipo = 0
            iTipoReg = tFluxoAnalitico.iTipoReg
            iTipo = tFluxoAnalitico.iTipo
            sDescricao = tFluxoAnalitico.sDescricao

        End If

        'se quebrou data
        If dtData <> tFluxoAnalitico.dtData Then

            'insere registro no fluxo sintetico
            lErro = Comando_Executar(alComando(2), "INSERT INTO FluxoSintetico (FluxoId, Data, RecValorSistema, RecValorAjustado, PagValorSistema, PagValorAjustado, TesValorSistema, TesValorAjustado, SaldoValorSistema, SaldoValorAjustado, AcumuladoAnterior, AcumuladoAtual) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)", objFluxo.lFluxoId, dtData, dValorRec, dValorRec, dValorPag, dValorPag, dValorTes, dValorTes, dValorSaldo, dValorSaldo, dAcumAnt, dAcumAtual)
            If lErro <> AD_SQL_SUCESSO Then Error 20091

            dValorPag = 0
            dValorRec = 0
            dValorSaldo = 0
            dValorTes = 0
            dtData = tFluxoAnalitico.dtData
            dAcumAnt = dAcumAtual

        End If


        If tFluxoAnalitico.iTipoReg = FLUXOANALITICO_TIPOREG_SALDOINI Then
            dValorSaldo = dValorSaldo + tFluxoAnalitico.dValor
            dAcumAnt = dValorSaldo
            dAcumAtual = dAcumAtual + tFluxoAnalitico.dValor
        End If

        If tFluxoAnalitico.iTipoReg = FLUXOANALITICO_TIPOREG_PAGTO Then
            dValorForn = dValorForn + tFluxoAnalitico.dValor
            dValorTipo = dValorTipo + tFluxoAnalitico.dValor
            dValorPag = dValorPag - tFluxoAnalitico.dValor
            dAcumAtual = dAcumAtual + tFluxoAnalitico.dValor
        End If

        If tFluxoAnalitico.iTipoReg = FLUXOANALITICO_TIPOREG_RECEBTO Then
            dValorForn = dValorForn + tFluxoAnalitico.dValor
            dValorTipo = dValorTipo + tFluxoAnalitico.dValor
            dValorRec = dValorRec + tFluxoAnalitico.dValor
            dAcumAtual = dAcumAtual + tFluxoAnalitico.dValor
        End If

        If tFluxoAnalitico.iTipoReg = FLUXOANALITICO_TIPOREG_APLICACAO Then
            dValorTes = dValorTes + tFluxoAnalitico.dValor
        End If

        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 20092

    Loop

    If iAchou = 1 Then

        If iTipoReg = FLUXOANALITICO_TIPOREG_PAGTO Or iTipoReg = FLUXOANALITICO_TIPOREG_RECEBTO Then

            'insere registro no fluxo por fornecedor/cliente
            lErro = Comando_Executar(alComando(4), "INSERT INTO FluxoForn (FluxoId, TipoReg, TipoFornecedor, Fornecedor, Data, TotalSistema, NomeReduzido, TotalAjustado) VALUES (?,?,?,?,?,?,?,?)", objFluxo.lFluxoId, iTipoReg, iTipo, lFornecedor, dtData, dValorForn, sNomeReduzido, dValorForn)
            If lErro <> AD_SQL_SUCESSO Then Error 20093

            'insere registro no fluxo por tipo
            lErro = Comando_Executar(alComando(3), "INSERT INTO FluxoTipoForn (FluxoId, TipoReg, TipoFornecedor, Data, TotalSistema, Descricao, TotalAjustado) VALUES (?,?,?,?,?,?,?)", objFluxo.lFluxoId, iTipoReg, iTipo, dtData, dValorTipo, sDescricao, dValorTipo)
            If lErro <> AD_SQL_SUCESSO Then Error 20094

        End If

        'insere registro no fluxo sintetico
        lErro = Comando_Executar(alComando(2), "INSERT INTO FluxoSintetico (FluxoId, Data, RecValorSistema, RecValorAjustado, PagValorSistema, PagValorAjustado, TesValorSistema, TesValorAjustado, SaldoValorSistema, SaldoValorAjustado, AcumuladoAnterior, AcumuladoAtual) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)", objFluxo.lFluxoId, dtData, dValorRec, dValorRec, dValorPag, dValorPag, dValorTes, dValorTes, dValorSaldo, dValorSaldo, dAcumAnt, dAcumAtual)
        If lErro <> AD_SQL_SUCESSO Then Error 20095

    End If

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    FluxoConsolidado_Grava = SUCESSO

    Exit Function

Erro_FluxoConsolidado_Grava:

    FluxoConsolidado_Grava = Err

    Select Case Err

        Case 20086
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 20087, 20088, 20092
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FLUXOANALITICO", Err, objFluxo.lFluxoId)

        Case 20089, 20093
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FLUXOFORN", Err)

        Case 20090, 20094
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FLUXOTIPOFORN", Err)

        Case 20091, 20095
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FLUXOSINTETICO", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148067)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Fluxo_Exclui(ByVal objFluxo As ClassFluxo) As Long
'Exclui o fluxo passado como parametro

Dim lErro As Long
Dim lTransacao As Long
Dim alComando(1 To 7) As Long
Dim iIndice As Integer
Dim lFluxoId As Long

On Error GoTo Erro_Fluxo_Exclui

    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 20108

    For iIndice = LBound(alComando) To UBound(alComando)

        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 20109

    Next

    'Verifica se o fluxo esta cadastrado
    lErro = Comando_ExecutarPos(alComando(1), "SELECT FluxoId FROM Fluxo WHERE Fluxo = ? AND FilialEmpresa = ?", 0, lFluxoId, objFluxo.sFluxo, giFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 20110

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 20111

    'se o fluxo nao esta cadastrado erro
    If lErro = AD_SQL_SEM_DADOS Then gError 20112

    lErro = Comando_LockExclusive(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 20113

    objFluxo.lFluxoId = lFluxoId

    lErro = CF("FluxoForn_Exclui", objFluxo)
    If lErro <> SUCESSO Then gError 20122

    lErro = CF("FluxoTipoForn_Exclui", objFluxo)
    If lErro <> SUCESSO Then gError 20123

    lErro = CF("FluxoAnalitico_Exclui", objFluxo)
    If lErro <> SUCESSO Then gError 20124

    lErro = CF("FluxoAplic_Exclui", objFluxo)
    If lErro <> SUCESSO Then gError 20125

    lErro = CF("FluxoSaldosIniciais_Exclui", objFluxo)
    If lErro <> SUCESSO Then gError 20126

    lErro = CF("FluxoTipoAplic_Exclui", objFluxo)
    If lErro <> SUCESSO Then gError 20127

    lErro = CF("FluxoSintetico_Exclui", objFluxo)
    If lErro <> SUCESSO Then gError 20128

    lErro = Comando_Executar(alComando(3), "DELETE FROM FluxoPV WHERE FluxoID = ?", lFluxoId)
    If lErro <> AD_SQL_SUCESSO Then gError 188758

    lErro = Comando_Executar(alComando(4), "DELETE FROM FluxoPC WHERE FluxoID = ?", lFluxoId)
    If lErro <> AD_SQL_SUCESSO Then gError 188759

    lErro = Comando_Executar(alComando(5), "DELETE FROM FluxoContratoItemNF WHERE FluxoID = ?", lFluxoId)
    If lErro <> AD_SQL_SUCESSO Then gError 188760

    lErro = Comando_Executar(alComando(6), "DELETE FROM FluxoContratoRec WHERE FluxoID = ?", lFluxoId)
    If lErro <> AD_SQL_SUCESSO Then gError 188761

    lErro = Comando_Executar(alComando(7), "DELETE FROM FluxoContratoPag WHERE FluxoID = ?", lFluxoId)
    If lErro <> AD_SQL_SUCESSO Then gError 188762

    'Exclui o fluxo
    lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM Fluxo", alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 20129

    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 20130

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Fluxo_Exclui = SUCESSO

    Exit Function

Erro_Fluxo_Exclui:

    Fluxo_Exclui = gErr

    Select Case gErr

        Case 20108
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 20109
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 20110, 20111
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FLUXO", gErr, objFluxo.sFluxo)

        Case 20112
            Call Rotina_Erro(vbOKOnly, "ERRO_FLUXO_NAO_CADASTRADO", gErr, objFluxo.sFluxo)

        Case 20113
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_FLUXO", gErr, objFluxo.sFluxo)

        Case 20122, 20123, 20124, 20125, 20126, 20127, 20128

        Case 20128
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_FLUXO", gErr, objFluxo.sFluxo)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148068)

    End Select

    Call Transacao_Rollback
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function FluxoForn_Exclui(ByVal objFluxo As ClassFluxo) As Long
'Exclui de FluxoForn o fluxo passado como parametro
'IMPORTANTE: ESTA FUNCAO TEM QUE SER EXECUTADA DENTRO DE UMA TRANSACAO

Dim lErro As Long
Dim alComando(1 To 2) As Long
Dim iIndice As Integer
Dim lFluxoId As Long

On Error GoTo Erro_FluxoForn_Exclui

    For iIndice = LBound(alComando) To UBound(alComando)

        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 20132

    Next

    'Pesquisa todos os registros associados ao fluxo em questão
    lErro = Comando_ExecutarPos(alComando(1), "SELECT FluxoId FROM FluxoForn WHERE FluxoId = ?", 0, lFluxoId, objFluxo.lFluxoId)
    If lErro <> AD_SQL_SUCESSO Then Error 20133

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 20134

    Do While lErro = AD_SQL_SUCESSO

        'Exclui o fluxo
        lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM FluxoForn", alComando(1))
        If lErro <> AD_SQL_SUCESSO Then Error 20135

        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 20136

    Loop

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    FluxoForn_Exclui = SUCESSO

    Exit Function

Erro_FluxoForn_Exclui:

    FluxoForn_Exclui = Err

    Select Case Err

        Case 20132
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 20133, 20134, 20136
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FLUXOFORN", Err, objFluxo.sFluxo)

        Case 20135
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_FLUXOFORN", Err, objFluxo.sFluxo)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148069)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function FluxoTipoForn_Exclui(ByVal objFluxo As ClassFluxo) As Long
'Exclui de FluxoTipoForn o fluxo passado como parametro
'IMPORTANTE: ESTA FUNCAO TEM QUE SER EXECUTADA DENTRO DE UMA TRANSACAO

Dim lErro As Long
Dim alComando(1 To 2) As Long
Dim iIndice As Integer
Dim lFluxoId As Long

On Error GoTo Erro_FluxoTipoForn_Exclui

    For iIndice = LBound(alComando) To UBound(alComando)

        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 20137

    Next

    'Pesquisa todos os registros associados ao fluxo em questão
    lErro = Comando_ExecutarPos(alComando(1), "SELECT FluxoId FROM FluxoTipoForn WHERE FluxoId = ?", 0, lFluxoId, objFluxo.lFluxoId)
    If lErro <> AD_SQL_SUCESSO Then Error 20138

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 20139

    Do While lErro = AD_SQL_SUCESSO

        'Exclui o fluxo
        lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM FluxoTipoForn", alComando(1))
        If lErro <> AD_SQL_SUCESSO Then Error 20140

        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 20141

    Loop

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    FluxoTipoForn_Exclui = SUCESSO

    Exit Function

Erro_FluxoTipoForn_Exclui:

    FluxoTipoForn_Exclui = Err

    Select Case Err

        Case 20137
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 20138, 20139, 20141
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FLUXOTIPOFORN", Err, objFluxo.sFluxo)

        Case 20140
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_FLUXOTIPOFORN", Err, objFluxo.sFluxo)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148070)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function FluxoAnalitico_Exclui(ByVal objFluxo As ClassFluxo) As Long
'Exclui de FluxoAnalitico o fluxo passado como parametro
'IMPORTANTE: ESTA FUNCAO TEM QUE SER EXECUTADA DENTRO DE UMA TRANSACAO

Dim lErro As Long
Dim alComando(1 To 2) As Long
Dim iIndice As Integer
Dim lFluxoId As Long

On Error GoTo Erro_FluxoAnalitico_Exclui

    For iIndice = LBound(alComando) To UBound(alComando)

        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 20142

    Next

    'Pesquisa todos os registros associados ao fluxo em questão
    lErro = Comando_ExecutarPos(alComando(1), "SELECT FluxoId FROM FluxoAnalitico WHERE FluxoId = ?", 0, lFluxoId, objFluxo.lFluxoId)
    If lErro <> AD_SQL_SUCESSO Then Error 20143

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 20144

    Do While lErro = AD_SQL_SUCESSO

        'Exclui o fluxo
        lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM FluxoAnalitico", alComando(1))
        If lErro <> AD_SQL_SUCESSO Then Error 20145

        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 20146

    Loop

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    FluxoAnalitico_Exclui = SUCESSO

    Exit Function

Erro_FluxoAnalitico_Exclui:

    FluxoAnalitico_Exclui = Err

    Select Case Err

        Case 20142
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 20143, 20144, 20146
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FLUXOANALITICO", Err, objFluxo.lFluxoId)

        Case 20145
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_FLUXOANALITICO", Err, objFluxo.sFluxo)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148071)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function FluxoAplic_Exclui(ByVal objFluxo As ClassFluxo) As Long
'Exclui de FluxoAplic o fluxo passado como parametro
'IMPORTANTE: ESTA FUNCAO TEM QUE SER EXECUTADA DENTRO DE UMA TRANSACAO

Dim lErro As Long
Dim alComando(1 To 2) As Long
Dim iIndice As Integer
Dim lFluxoId As Long

On Error GoTo Erro_FluxoAplic_Exclui

    For iIndice = LBound(alComando) To UBound(alComando)

        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 20147

    Next

    'Pesquisa todos os registros associados ao fluxo em questão
    lErro = Comando_ExecutarPos(alComando(1), "SELECT FluxoId FROM FluxoAplic WHERE FluxoId = ?", 0, lFluxoId, objFluxo.lFluxoId)
    If lErro <> AD_SQL_SUCESSO Then Error 20148

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 20149

    Do While lErro = AD_SQL_SUCESSO

        'Exclui o fluxo
        lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM FluxoAplic", alComando(1))
        If lErro <> AD_SQL_SUCESSO Then Error 20150

        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 20151

    Loop

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    FluxoAplic_Exclui = SUCESSO

    Exit Function

Erro_FluxoAplic_Exclui:

    FluxoAplic_Exclui = Err

    Select Case Err

        Case 20147
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 20148, 20149, 20151
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FLUXOAPLIC", Err, objFluxo.sFluxo)

        Case 20150
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_FLUXOAPLIC", Err, objFluxo.sFluxo)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148072)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function FluxoSaldosIniciais_Exclui(ByVal objFluxo As ClassFluxo) As Long
'Exclui de FluxoSaldosIniciais o fluxo passado como parametro
'IMPORTANTE: ESTA FUNCAO TEM QUE SER EXECUTADA DENTRO DE UMA TRANSACAO

Dim lErro As Long
Dim alComando(1 To 2) As Long
Dim iIndice As Integer
Dim lFluxoId As Long

On Error GoTo Erro_FluxoSaldosIniciais_Exclui

    For iIndice = LBound(alComando) To UBound(alComando)

        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 20152

    Next

    'Pesquisa todos os registros associados ao fluxo em questão
    lErro = Comando_ExecutarPos(alComando(1), "SELECT FluxoId FROM FluxoSaldosIniciais WHERE FluxoId = ?", 0, lFluxoId, objFluxo.lFluxoId)
    If lErro <> AD_SQL_SUCESSO Then Error 20153

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 20154

    Do While lErro = AD_SQL_SUCESSO

        'Exclui o fluxo
        lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM FluxoSaldosIniciais", alComando(1))
        If lErro <> AD_SQL_SUCESSO Then Error 20155


        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 20156

    Loop

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    FluxoSaldosIniciais_Exclui = SUCESSO

    Exit Function

Erro_FluxoSaldosIniciais_Exclui:

    FluxoSaldosIniciais_Exclui = Err

    Select Case Err

        Case 20152
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 20153, 20154, 20156
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FLUXOSALDOSINICIAIS", Err, objFluxo.sFluxo)

        Case 20155
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_FLUXOSALDOSINICIAIS", Err, objFluxo.sFluxo)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148073)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function FluxoSintetico_Exclui(ByVal objFluxo As ClassFluxo) As Long
'Exclui de FluxoSintetico o fluxo passado como parametro
'IMPORTANTE: ESTA FUNCAO TEM QUE SER EXECUTADA DENTRO DE UMA TRANSACAO

Dim lErro As Long
Dim alComando(1 To 2) As Long
Dim iIndice As Integer
Dim lFluxoId As Long

On Error GoTo Erro_FluxoSintetico_Exclui

    For iIndice = LBound(alComando) To UBound(alComando)

        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 20157

    Next

    'Pesquis
    lErro = Comando_ExecutarPos(alComando(1), "SELECT FluxoId FROM FluxoSintetico WHERE FluxoId = ?", 0, lFluxoId, objFluxo.lFluxoId)
    If lErro <> AD_SQL_SUCESSO Then Error 20158

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 20159

    Do While lErro = AD_SQL_SUCESSO

        'Exclui o fluxo
        lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM FluxoSintetico", alComando(1))
        If lErro <> AD_SQL_SUCESSO Then Error 20160

        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 20161

    Loop

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    FluxoSintetico_Exclui = SUCESSO

    Exit Function

Erro_FluxoSintetico_Exclui:

    FluxoSintetico_Exclui = Err

    Select Case Err

        Case 20157
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 20158, 20159, 20161
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FLUXOSINTETICO", Err, objFluxo.sFluxo)

        Case 20160
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_FLUXOSINTETICO", Err, objFluxo.sFluxo)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148074)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function FluxoTipoAplic_Exclui(ByVal objFluxo As ClassFluxo) As Long
'Exclui de FluxoTipoAplic o fluxo passado como parametro
'IMPORTANTE: ESTA FUNCAO TEM QUE SER EXECUTADA DENTRO DE UMA TRANSACAO

Dim lErro As Long
Dim alComando(1 To 2) As Long
Dim iIndice As Integer
Dim lFluxoId As Long

On Error GoTo Erro_FluxoTipoAplic_Exclui

    For iIndice = LBound(alComando) To UBound(alComando)

        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 20162

    Next

    'Pesquisa todos os registros associados ao fluxo em questão
    lErro = Comando_ExecutarPos(alComando(1), "SELECT FluxoId FROM FluxoTipoAplic WHERE FluxoId = ?", 0, lFluxoId, objFluxo.lFluxoId)
    If lErro <> AD_SQL_SUCESSO Then Error 20163

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 20164

    Do While lErro = AD_SQL_SUCESSO

        'Exclui o fluxo
        lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM FluxoTipoAplic", alComando(1))
        If lErro <> AD_SQL_SUCESSO Then Error 20165

        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 20166

    Loop

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    FluxoTipoAplic_Exclui = SUCESSO

    Exit Function

Erro_FluxoTipoAplic_Exclui:

    FluxoTipoAplic_Exclui = Err

    Select Case Err

        Case 20162
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 20163, 20164, 20166
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FLUXOTIPOAPLIC", Err, objFluxo.sFluxo)

        Case 20165
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_FLUXOTIPOAPLIC", Err, objFluxo.sFluxo)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148075)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function NFFatPag_Grava(ByVal objTituloPagar As ClassTituloPagar, ByVal colParcelas As colParcelaPagar, ByVal objContabil As ClassContabil) As Long
'Grava Nota Fiscal Fatura a Pagar no BD (nível + alto)

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_NFFatPag_Grava

    'Abre a transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 18461
    
    lErro = CF("NFFatPag_Grava_EmTrans", objTituloPagar, colParcelas, objContabil)
    If lErro <> SUCESSO Then gError 182506

    'Encerra transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 18471
    
    NFFatPag_Grava = SUCESSO
    
    Exit Function
    
Erro_NFFatPag_Grava:

    NFFatPag_Grava = gErr
    
    Select Case gErr
    
        Case 18461
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 18471
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case 182506
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148076)

    End Select
    
    Call Transacao_Rollback
    
    Exit Function
    
End Function

Function NFFatPag_Grava_EmTrans(ByVal objTituloPagar As ClassTituloPagar, ByVal colParcelas As colParcelaPagar, ByVal objContabil As ClassContabil) As Long
'Grava Nota Fiscal Fatura a Pagar no BD (nível + alto)

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim lNumIntNF As Long
Dim iFilialEmpresa As Integer
Dim objParcelaPagar As ClassParcelaPagar, dValorLivroAux As Double
Dim lNumIntDoc As Long

On Error GoTo Erro_NFFatPag_Grava_EmTrans
    
    'Abre os comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 18462
    
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 18463
    
    'Verifica se o Título está cadastrado como um Título Baixado
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc FROM TitulosPagBaixados WHERE Fornecedor = ? AND Filial = ? AND NumTitulo = ? AND DataEmissao = ? AND SiglaDocumento = ? AND Status <> ?", lNumIntDoc, objTituloPagar.lFornecedor, objTituloPagar.iFilial, objTituloPagar.lNumTitulo, objTituloPagar.dtDataEmissao, objTituloPagar.sSiglaDocumento, STATUS_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then gError 18476
    
    'Tenta ler
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 18477
    
    'Se nao encontrou
    If lErro <> AD_SQL_SUCESSO Then
    
        'Verifica se o Título a pagar possui um Adiantamento vinculado ao Fornecedor
        lErro = CF("TituloPagar_Verifica_Adiantamento", objTituloPagar.lFornecedor, objTituloPagar.iFilial)
        If lErro <> SUCESSO Then gError 75478
            
        'Grava no BD
        lErro = CF("NFFatPag_Grava_BD", objTituloPagar, colParcelas)
        If lErro <> SUCESSO Then gError 18470
        
    Else
        
        If Rotina_Aviso(vbYesNo, "AVISO_TITBAIXADO_GRAVA_CONTAB_SOMENTE") = vbNo Then gError 18478
        objTituloPagar.lNumIntDoc = lNumIntDoc

    End If
    
    lErro = CF("ProjetoInfo_Grava", objTituloPagar.objProjetoInfo, PRJ_CR_TIPO_TITPAG, objTituloPagar.lNumIntDoc)
    If lErro <> SUCESSO Then gError 181706
    
    If Not (objTituloPagar.objAnexos Is Nothing) Then
        lErro = CF("DocumentoCPR_OrigemNFiscal", objTituloPagar.sSiglaDocumento, objTituloPagar.lNumIntDoc, lNumIntNF)
        If lErro <> SUCESSO And lErro <> 41542 Then gError 59224
        If lErro <> SUCESSO Then
            objTituloPagar.objAnexos.iTipoDoc = ANEXO_TIPO_TITPAG
            objTituloPagar.objAnexos.lNumIntDoc = objTituloPagar.lNumIntDoc
        Else
            objTituloPagar.objAnexos.iTipoDoc = ANEXO_TIPO_NF
            objTituloPagar.objAnexos.lNumIntDoc = lNumIntNF
        End If
        lErro = CF("Anexos_Grava", objTituloPagar.objAnexos)
        If lErro <> SUCESSO Then gError 181706
    End If
        
    If (gcolModulo.Ativo(MODULO_CONTABILIDADE) = MODULO_ATIVO) Then
    
        'se o documento foi originado fora de CPR nao pode ter a contabilidade alterada em CPR
        lErro = CF("DocumentoCPR_OrigemNFiscal", objTituloPagar.sSiglaDocumento, objTituloPagar.lNumIntDoc, lNumIntNF)
        If lErro <> SUCESSO And lErro <> 41542 Then gError 59224
        
        'se nao é um docto gerado fora do cpr
        If lErro <> SUCESSO Then
            
            dValorLivroAux = 0
                        
            For Each objParcelaPagar In colParcelas
            
                dValorLivroAux = dValorLivroAux + Round(objParcelaPagar.dValorOriginal, 2)
                
            Next
            
            If Not (objContabil Is Nothing) Then
            
                'Grava os dados contábeis (contabilidade)
                lErro = objContabil.Contabil_Gravar_Registro(objTituloPagar.lNumIntDoc, objTituloPagar.lFornecedor, objTituloPagar.iFilial, DATA_NULA, , 0, objTituloPagar.lNumTitulo, dValorLivroAux)
                If lErro <> SUCESSO Then gError 20473
                
            End If
    
        End If
        
    End If
    
    'Fecha os comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    
    NFFatPag_Grava_EmTrans = SUCESSO
    
    Exit Function
    
Erro_NFFatPag_Grava_EmTrans:

    NFFatPag_Grava_EmTrans = gErr
    
    Select Case gErr
    
        Case 18461
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 18462, 18463
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 18470, 20473, 59224, 75478, 181706
        
        Case 18471
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case 18476, 18477
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFFATBAIXADA", gErr, objTituloPagar.lNumTitulo)
        
        Case 18478
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148076)

    End Select
    
'    Call Transacao_Rollback
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    
    Exit Function

End Function

Function NFFatPag_Grava_BD(ByVal objTituloPagar As ClassTituloPagar, ByVal colParcelaPagar As colParcelaPagar, Optional ByVal bPodeAlterar As Boolean = True) As Long
'Grava NotaFiscalFatura (e outros titulos, menos fatura que cobra nfs simples ) no BD (nível + baixo)
'CHAMADA EM TRANSAÇÃO por NFFatPag_Grava

Dim lErro As Long
Dim lComando As Long, lComando1 As Long
Dim lComando2 As Long, lComando3 As Long, lComando4 As Long, lComando5 As Long
Dim tTituloPagar As typeTituloPagar
Dim iIndice As Integer
Dim colParcelaPagarBD As New colParcelaPagar
Dim objParcelaPagar As ClassParcelaPagar
Dim objParcelaPagar1 As ClassParcelaPagar
Dim objFilialFornecedor As New ClassFilialFornecedor
Dim vbMsgRes As VbMsgBoxResult
Dim iCamposAlterados As Integer
Dim iParcelasAlteradas As Integer, iExclusaoAux As Integer, dDifValorParc As Double

On Error GoTo Erro_NFFatPag_Grava_BD
    
    'Abre os comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 18471

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 18472
    
    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then gError 48919
    
    lComando3 = Comando_Abrir()
    If lComando3 = 0 Then gError 59066
    
    lComando4 = Comando_Abrir()
    If lComando4 = 0 Then gError 59066
    
    lComando5 = Comando_Abrir()
    If lComando5 = 0 Then gError 59066
    
    tTituloPagar.sObservacao = String(STRING_TITULO_OBSERVACAO, 0)
    tTituloPagar.sNatureza = String(STRING_NATMOVCTA_CODIGO, 0)
    tTituloPagar.sHistorico = String(STRING_NFSPAG_HISTORICO, 0)
    
    'Verifica se a NotaFiscalFatura já existe em TitulosPag
    lErro = Comando_ExecutarPos(lComando, "SELECT CondicaoPagto, FilialEmpresa, NumIntDoc, ValorTotal, ValorICMS, CreditoICMS, ValorICMSSubst, ValorFrete, ValorINSS, ValorIPI, CreditoIPI, OutrasDespesas , ValorProdutos, ValorIRRF, ValorSeguro, ValorINSS, INSSRetido, FilialPedCompra, NumPedCompra, PISRetido, ISSRetido, COFINSRetido, CSLLRetido, TaxaMoeda, Natureza,Status, Observacao, Historico FROM TitulosPag WHERE Fornecedor = ? AND Filial = ? AND NumTitulo = ? AND DataEmissao = ? AND SiglaDocumento = ? AND Status <> ?", 0, _
        tTituloPagar.iCondicaoPagto, tTituloPagar.iFilialEmpresa, tTituloPagar.lNumIntDoc, tTituloPagar.dValorTotal, _
        tTituloPagar.dValorICMS, tTituloPagar.iCreditoICMS, tTituloPagar.dValorICMSSubst, _
        tTituloPagar.dValorFrete, tTituloPagar.dValorINSS, tTituloPagar.dValorIPI, tTituloPagar.iCreditoIPI, tTituloPagar.dOutrasDespesas, _
        tTituloPagar.dValorProdutos, tTituloPagar.dValorIRRF, tTituloPagar.dValorSeguro, tTituloPagar.dValorINSS, tTituloPagar.iINSSRetido, _
        tTituloPagar.iFilialPedCompra, tTituloPagar.lNumPedCompra, tTituloPagar.dPISRetido, tTituloPagar.dISSRetido, tTituloPagar.dCOFINSRetido, tTituloPagar.dCSLLRetido, tTituloPagar.dTaxaMoeda, tTituloPagar.sNatureza, tTituloPagar.iStatus, tTituloPagar.sObservacao, tTituloPagar.sHistorico, objTituloPagar.lFornecedor, objTituloPagar.iFilial, objTituloPagar.lNumTitulo, objTituloPagar.dtDataEmissao, objTituloPagar.sSiglaDocumento, STATUS_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then gError 111785

    'Tenta ler
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 111786
    
    'Se for uma alteracao ...
    If lErro <> AD_SQL_SEM_DADOS Then

        'Verifica se a NotaFiscalFatura já existe em TitulosPag
        'lErro = Comando_ExecutarPos(lComando, "SELECT NumIntDoc FROM TitulosPag WHERE NumIntDoc = ?", 0, tTituloPagar.lNumIntDoc, objTituloPagar.lNumIntDoc)
        'If lErro <> AD_SQL_SUCESSO Then gError 18473

        'Tenta ler
'        lErro = Comando_BuscarPrimeiro(lComando)
'        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 18474
        
        'Se nao encontrou => Erro
 '       If lErro = AD_SQL_SEM_DADOS Then gError 108791

        If Not bPodeAlterar Then gError 180335

        'Faz lock no TítuloPagar
        lErro = Comando_LockExclusive(lComando)
        If lErro <> AD_SQL_SUCESSO Then gError 25028
        
        'Se não pertence a essa FilialEmpresa, erro
        If tTituloPagar.iFilialEmpresa <> objTituloPagar.iFilialEmpresa Then Error 18475
        
        'verifica a alteracao dos campos alteraveis , se houve  - - - > altera no BD
'        If tTituloPagar.iCondicaoPagto <> objTituloPagar.iCondicaoPagto Or Abs(tTituloPagar.dTaxaMoeda - objTituloPagar.dTaxaMoeda) > DELTA_VALORMONETARIO2 Or tTituloPagar.iFilialPedCompra <> objTituloPagar.iFilialPedCompra Or tTituloPagar.lNumPedCompra <> objTituloPagar.lNumPedCompra Or tTituloPagar.sHistorico <> objTituloPagar.sHistorico Then
            
        objTituloPagar.iNumParcelas = colParcelaPagar.Count
        
            lErro = Comando_ExecutarPos(lComando2, "UPDATE TitulosPag SET TaxaMoeda = ?, FilialPedCompra = ?, NumPedCompra =?, Historico=?, CondicaoPagto = ?, NumParcelas = ?, Natureza = ?, Ccl = ? ", lComando, objTituloPagar.dTaxaMoeda, objTituloPagar.iFilialPedCompra, objTituloPagar.lNumPedCompra, objTituloPagar.sHistorico, objTituloPagar.iCondicaoPagto, objTituloPagar.iNumParcelas, objTituloPagar.sNatureza, objTituloPagar.sCcl)
            If lErro <> AD_SQL_SUCESSO Then gError 48918

'        End If
        
        'Coloca o NumIntTitulo lido na coleção de parcelas
        For iIndice = 1 To colParcelaPagar.Count
            colParcelaPagar(iIndice).lNumIntTitulo = tTituloPagar.lNumIntDoc
            dDifValorParc = Arredonda_Moeda(dDifValorParc + colParcelaPagar(iIndice).dValor)
        Next
        
        'Coloca o NumIntDoc lido no objTituloPagar
        objTituloPagar.lNumIntDoc = tTituloPagar.lNumIntDoc
        
        'Lê no BD as Parcelas referentes ao Título
        lErro = CF("ParcelasPagar_Le", objTituloPagar, colParcelaPagarBD)
        If lErro <> SUCESSO Then gError 18502
        
        For iIndice = 1 To colParcelaPagarBD.Count
            dDifValorParc = Arredonda_Moeda(dDifValorParc - colParcelaPagarBD(iIndice).dValor)
        Next
        
        'se a soma dos valores das parcelas mudou em relacao ao que estava no bd então alterar o saldo do titulo
        If Abs(dDifValorParc) >= DELTA_VALORMONETARIO Then
            
            lErro = Comando_Executar(lComando5, "UPDATE TitulosPag SET Saldo = Saldo + ? WHERE NumIntDoc = ?", dDifValorParc, tTituloPagar.lNumIntDoc)
            If lErro <> AD_SQL_SUCESSO Then gError 48918
        
        End If
        
        iParcelasAlteradas = 0

        'Verifica se o número de Parcelas da tela é igual ao do BD
        If colParcelaPagarBD.Count <> colParcelaPagar.Count Then iParcelasAlteradas = 1 ' gError 18503
       
        'se é uma previsao
        If objTituloPagar.iStatus = STATUS_PREVISAO Then
            For iIndice = 1 To colParcelaPagar.Count
                If colParcelaPagar(iIndice).iProxSeqBaixa <> 1 Then gError 32301
            Next
        End If
       
        'Flag para alterações
'        iCamposAlterados = 0
        
        'Verifica se os campos da Tela não alteráveis foram alterados
'        If tTituloPagar.dValorTotal <> objTituloPagar.dValorTotal Or tTituloPagar.dValorICMS <> objTituloPagar.dValorICMS Or tTituloPagar.iCreditoICMS <> objTituloPagar.iCreditoICMS Or tTituloPagar.dValorICMSSubst <> objTituloPagar.dValorICMSSubst Or _
'           tTituloPagar.dValorFrete <> objTituloPagar.dValorFrete Or tTituloPagar.dValorINSS <> objTituloPagar.dValorINSS Or tTituloPagar.dValorIPI <> objTituloPagar.dValorIPI Or tTituloPagar.iCreditoIPI <> objTituloPagar.iCreditoIPI Or _
'           tTituloPagar.dOutrasDespesas <> objTituloPagar.dOutrasDespesas Or tTituloPagar.dValorProdutos <> objTituloPagar.dValorProdutos Or tTituloPagar.dValorIRRF <> objTituloPagar.dValorIRRF Or tTituloPagar.dValorSeguro <> objTituloPagar.dValorSeguro Or _
'           tTituloPagar.dValorINSS <> objTituloPagar.dValorINSS Or tTituloPagar.iINSSRetido <> objTituloPagar.iINSSRetido Or _
'           tTituloPagar.dPISRetido <> objTituloPagar.dPISRetido Or tTituloPagar.dISSRetido <> objTituloPagar.dISSRetido Or tTituloPagar.dCOFINSRetido <> objTituloPagar.dCOFINSRetido Or tTituloPagar.dCSLLRetido <> objTituloPagar.dCSLLRetido _
'           Or tTituloPagar.sNatureza <> objTituloPagar.sNatureza Or _
'            tTituloPagar.iStatus <> objTituloPagar.iStatus Then iCamposAlterados = 1
            
        'Não pode chamar rotina aviso dentro de transação
        'Alterado para dar erro no caso dessas mexidas e liberar a alteração nas parcelas
        'sendo que se alterou valor ou quantidade ele exclui e lança de novo
        
        If Abs(tTituloPagar.dValorTotal - objTituloPagar.dValorTotal) > DELTA_VALORMONETARIO Or Abs(tTituloPagar.dValorICMS - objTituloPagar.dValorICMS) > DELTA_VALORMONETARIO Or tTituloPagar.iCreditoICMS <> objTituloPagar.iCreditoICMS Or Abs(tTituloPagar.dValorICMSSubst - objTituloPagar.dValorICMSSubst) > DELTA_VALORMONETARIO Or _
           Abs(tTituloPagar.dValorFrete - objTituloPagar.dValorFrete) > DELTA_VALORMONETARIO Or Abs(tTituloPagar.dValorINSS - objTituloPagar.dValorINSS) > DELTA_VALORMONETARIO Or Abs(tTituloPagar.dValorIPI - objTituloPagar.dValorIPI) > DELTA_VALORMONETARIO Or tTituloPagar.iCreditoIPI <> objTituloPagar.iCreditoIPI Or _
           Abs(tTituloPagar.dOutrasDespesas - objTituloPagar.dOutrasDespesas) > DELTA_VALORMONETARIO Or Abs(tTituloPagar.dValorProdutos - objTituloPagar.dValorProdutos) > DELTA_VALORMONETARIO Or Abs(tTituloPagar.dValorIRRF - objTituloPagar.dValorIRRF) > DELTA_VALORMONETARIO Or Abs(tTituloPagar.dValorSeguro - objTituloPagar.dValorSeguro) > DELTA_VALORMONETARIO Or _
           Abs(tTituloPagar.dValorINSS - objTituloPagar.dValorINSS) > DELTA_VALORMONETARIO Or tTituloPagar.iINSSRetido <> objTituloPagar.iINSSRetido Or _
           Abs(tTituloPagar.dPISRetido - objTituloPagar.dPISRetido) > DELTA_VALORMONETARIO Or Abs(tTituloPagar.dISSRetido - objTituloPagar.dISSRetido) > DELTA_VALORMONETARIO Or Abs(tTituloPagar.dCOFINSRetido - objTituloPagar.dCOFINSRetido) > DELTA_VALORMONETARIO Or Abs(tTituloPagar.dCSLLRetido - objTituloPagar.dCSLLRetido) > DELTA_VALORMONETARIO _
        Then gError 18504
            'Or UCase(tTituloPagar.sNatureza) <> UCase(objTituloPagar.sNatureza) _   '*REMOVIDO

        'Verifica se campos do Grid Parcelas não alteráveis foram alterados
        If iParcelasAlteradas = 0 Then 'iCamposAlterados = 0 Then

            For iIndice = 1 To colParcelaPagar.Count
                If colParcelaPagar(iIndice).dValor <> colParcelaPagarBD(iIndice).dValor Then ' iCamposAlterados = 1
                    iParcelasAlteradas = 1
                    Exit For
                End If
            Next

        End If
        
        'Se houve alteração de campos não alteráveis
'        If iCamposAlterados = 1 Then
'
'            'Pergunta se deseja prosseguir na alteração para os alteráveis
'            vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_TITULOS_PAGAR_CAMPOS_ALTERAVEIS")
'            If vbMsgRes = vbNo Then gError 18504
'
'        End If

        If iParcelasAlteradas = 1 Then
        
            iExclusaoAux = objTituloPagar.iExclusao
            objTituloPagar.iExclusao = MARCADO
            'Faz a exclusão das parcelas referentes ao Título passado
            lErro = CF("ParcelasPagar_Exclui", objTituloPagar)
            objTituloPagar.iExclusao = iExclusaoAux
            If lErro <> SUCESSO Then gError 18505
    
            If gobjCRFAT.iCriarPagSuspenso <> 0 Then
            
                For iIndice = 1 To colParcelaPagar.Count
                    
                    colParcelaPagar(iIndice).iStatus = STATUS_SUSPENSO
                    colParcelaPagar(iIndice).sCodUsuarioLib = ""
                    colParcelaPagar(iIndice).dtDataLib = DATA_NULA
                    
                Next
            
            End If
            
            'Grava ParcelasPagar no BD
            lErro = CF("ParcelasPagar_Grava", colParcelaPagar)
            If lErro <> SUCESSO Then gError 18505
            
        Else
                    
            'Altera os campos alteráveis
            lErro = CF("ParcelasPagar_Altera_CamposAlteraveis", colParcelaPagar)
            If lErro <> SUCESSO Then gError 18505
            
        End If

    Else  'Nota Fiscal Fatura Pagar não existe na tabela TitulosPag
        
        If Not bPodeAlterar Then
        
            'se existir o titulo como baixado entao dar erro
    
            'Verifica se a NotaFiscalFatura já existe em TitulosPagBaixados
            lErro = Comando_ExecutarPos(lComando, "SELECT NumIntDoc FROM TitulosPagBaixados WHERE Fornecedor = ? AND Filial = ? AND NumTitulo = ? AND DataEmissao = ? AND SiglaDocumento = ? AND Status <> ?", 0, _
                tTituloPagar.lNumIntDoc, objTituloPagar.lFornecedor, objTituloPagar.iFilial, objTituloPagar.lNumTitulo, objTituloPagar.dtDataEmissao, objTituloPagar.sSiglaDocumento, STATUS_EXCLUIDO)
            If lErro <> AD_SQL_SUCESSO Then gError 130781
        
            'Tenta ler
            lErro = Comando_BuscarPrimeiro(lComando)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 130782
            
            'Se for uma alteracao ...
            If lErro <> AD_SQL_SEM_DADOS Then gError 180335
            
        End If
        
        'Testa se há Titulo com mesmo número no Sistema
        lErro = CF("NFFatPag_Testa_Repeticao", objTituloPagar)
        If lErro <> SUCESSO Then gError 18529
            
        objFilialFornecedor.lCodFornecedor = objTituloPagar.lFornecedor
        objFilialFornecedor.iCodFilial = objTituloPagar.iFilial
        
        'Lê a Filial Fornecedor
        lErro = CF("FilialFornecedor_Lock1", objFilialFornecedor)
        If lErro <> SUCESSO And lErro <> 18900 Then gError 18464
    
        'Se não encontrar Filial Fornecedor --> Erro
        If lErro = 18900 Then gError 18465

        If objTituloPagar.iCondicaoPagto <> 0 Then
        
            lErro = CF("CondicaoPagto_Lock", lComando3, objTituloPagar.iCondicaoPagto)
            If lErro <> SUCESSO Then gError 59067
            
        End If
        
        'Gera número interno automático
        lErro = CF("TituloPagar_Automatico", tTituloPagar.lNumIntDoc)
        If lErro <> SUCESSO Then gError 18479
        
        objTituloPagar.lNumIntDoc = tTituloPagar.lNumIntDoc
        objTituloPagar.dtDataRegistro = gdtDataHoje

        'Preenche Saldo = ValorTotal - retencoes
        'objTituloPagar.dSaldo = objTituloPagar.dValorTotal - (objTituloPagar.dValorIRRF + objTituloPagar.dPISRetido + objTituloPagar.dISSRetido + objTituloPagar.dCOFINSRetido + objTituloPagar.dCSLLRetido) - IIf(objTituloPagar.iINSSRetido = 1, objTituloPagar.dValorINSS, 0)
        objTituloPagar.dSaldo = 0
        For iIndice = 1 To colParcelaPagar.Count
            objTituloPagar.dSaldo = Arredonda_Moeda(objTituloPagar.dSaldo + colParcelaPagar(iIndice).dValor, 2)
        Next
        
        If objTituloPagar.iFilialEmpresa = 0 Then objTituloPagar.iFilialEmpresa = giFilialEmpresa
        
        'Insere o Título na tabela TitulosPag
        lErro = Comando_Executar(lComando1, "INSERT INTO TitulosPag (NumIntDoc,FilialEmpresa,Fornecedor,Filial,SiglaDocumento,NumTitulo,DataEmissao,Status,Saldo,NumParcelas,ValorTotal,ValorSeguro,ValorFrete,OutrasDespesas,ValorProdutos,ValorICMS,ValorICMSSubst,CreditoICMS,ValorIPI,CreditoIPI,ValorIRRF,ValorINSS, INSSRetido, DataRegistro, Observacao, FilialPedCompra, NumPedCompra, CondicaoPagto, PISRetido, ISSRetido, COFINSRetido, CSLLRetido, TaxaMoeda, Historico, Natureza, Ccl) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", tTituloPagar.lNumIntDoc, objTituloPagar.iFilialEmpresa, objTituloPagar.lFornecedor, objTituloPagar.iFilial, objTituloPagar.sSiglaDocumento, objTituloPagar.lNumTitulo, objTituloPagar.dtDataEmissao, IIf(objTituloPagar.iStatus = STATUS_PREVISAO, STATUS_PREVISAO, STATUS_LANCADO), objTituloPagar.dSaldo, objTituloPagar.iNumParcelas, _
            objTituloPagar.dValorTotal, objTituloPagar.dValorSeguro, objTituloPagar.dValorFrete, objTituloPagar.dOutrasDespesas, objTituloPagar.dValorProdutos, objTituloPagar.dValorICMS, objTituloPagar.dValorICMSSubst, objTituloPagar.iCreditoICMS, objTituloPagar.dValorIPI, objTituloPagar.iCreditoIPI, objTituloPagar.dValorIRRF, objTituloPagar.dValorINSS, objTituloPagar.iINSSRetido, objTituloPagar.dtDataRegistro, objTituloPagar.sObservacao, objTituloPagar.iFilialPedCompra, objTituloPagar.lNumPedCompra, objTituloPagar.iCondicaoPagto, objTituloPagar.dPISRetido, objTituloPagar.dISSRetido, objTituloPagar.dCOFINSRetido, objTituloPagar.dCSLLRetido, objTituloPagar.dTaxaMoeda, objTituloPagar.sHistorico, objTituloPagar.sNatureza, objTituloPagar.sCcl)
        If lErro <> AD_SQL_SUCESSO Then gError 18480

        'Armazena em colParcelaPagar o lNumIntTitulo para cada parcela
        For iIndice = 1 To colParcelaPagar.Count
        
            colParcelaPagar(iIndice).lNumIntTitulo = tTituloPagar.lNumIntDoc
        
            If gobjCRFAT.iCriarPagSuspenso <> 0 Then
            
                colParcelaPagar(iIndice).iStatus = STATUS_SUSPENSO
                colParcelaPagar(iIndice).sCodUsuarioLib = ""
                colParcelaPagar(iIndice).dtDataLib = DATA_NULA
            
            End If
            
        Next
        
        'Grava ParcelasPagar no BD
        lErro = CF("ParcelasPagar_Grava", colParcelaPagar)
        If lErro <> SUCESSO Then gError 18481
    
    End If
    
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)
    Call Comando_Fechar(lComando4)
    Call Comando_Fechar(lComando5)
    
    NFFatPag_Grava_BD = SUCESSO
    
    Exit Function

Erro_NFFatPag_Grava_BD:

    NFFatPag_Grava_BD = gErr
    
    Select Case gErr
    
        Case 18465
            Call Rotina_Erro(vbOKOnly, "ERRO_FILIALFORNECEDOR_NAO_CADASTRADA", gErr, objTituloPagar.lFornecedor, objTituloPagar.iFilial)
    
        Case 18471, 18472, 48919, 59066
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 18473, 18474, 130781, 130782
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFFATURA", gErr, objTituloPagar.lNumTitulo)
            
        Case 18475
            Call Rotina_Erro(vbOKOnly, "ERRO_NFFAT_FILIALEMPRESA_DIFERENTE", gErr, objTituloPagar.lNumTitulo)
        
        Case 18464, 18479, 18481, 18502, 18505, 18529, 59067, 180335
        
        Case 18504
            Call Rotina_Erro(vbOKOnly, "ERRO_TITPAG_ALTERACOES_NAO_PERMITIDAS", gErr, objTituloPagar.lNumTitulo)
        
        Case 18480
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_NFFATURA", gErr, objTituloPagar.lNumTitulo)
                    
        Case 18503
            Call Rotina_Erro(vbOKOnly, "ERRO_NUMERO_PARCELAS_ALTERADO", gErr, colParcelaPagarBD.Count, colParcelaPagar.Count)
        
        Case 25028
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_TITULOSPAG", gErr, objTituloPagar.lNumIntDoc)
            
        Case 48918
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_TITULOSPAG", gErr, tTituloPagar.lNumIntDoc)
            
        Case 108791
            Call Rotina_Erro(vbOKOnly, "ERRO_TITULO_PAGAR_INEXISTENTE", gErr)
            
        Case 32301
            Call Rotina_Erro(vbOKOnly, "ERRO_PARC_COM_BAIXA_PREVISAO", gErr, tTituloPagar.lNumIntDoc)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148077)

    End Select
    
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)
    Call Comando_Fechar(lComando4)
    Call Comando_Fechar(lComando5)
    
End Function

Function ParcelasPagar_Altera_CamposAlteraveis(ByVal colParcelaPagar As colParcelaPagar) As Long
'Altera no BD campos alteráveis das Parcelas de Titulo a Pagar
'cujo lNumIntTitulo é passado dentro de colParcelaPagar

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim iNumParcela As Integer
Dim lNumIntDoc As Long, iStatusBD As Integer

On Error GoTo Erro_ParcelasPagar_Altera_CamposAlteraveis

    'Abre os comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 18507
    
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 18515
        
    'Seleciona as Parcelas a alterar (nao inclui as baixadas)
    lErro = Comando_ExecutarPos(lComando, "SELECT NumIntDoc, NumParcela, Status FROM ParcelasPag WHERE NumIntTitulo = ? AND Status <> ? ORDER BY DataVencimento", 0, lNumIntDoc, iNumParcela, iStatusBD, colParcelaPagar(1).lNumIntTitulo, STATUS_BAIXADO)
    If lErro <> AD_SQL_SUCESSO Then Error 18508
    
    'Tenta ler a Parcela
    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SEM_DADOS And lErro <> AD_SQL_SUCESSO Then Error 18509
    
    Do While lErro <> AD_SQL_SEM_DADOS
    
        'se está iberando o pagto de uma parcela
        If iStatusBD = STATUS_SUSPENSO And colParcelaPagar(iNumParcela).iStatus <> STATUS_SUSPENSO Then
        
            If gobjCRFAT.iCriarPagSuspenso <> 0 Then
            
                lErro = CF("PagSusPenso_Libera")
                If lErro <> SUCESSO Then Error 18512
                
            End If
            
            'Altera os campos alteráveis
            lErro = Comando_ExecutarPos(lComando1, "UPDATE ParcelasPag SET DataVencimento = ?, DataVencimentoReal =?, Status = ?, TipoCobranca = ?, Portador = ? , BancoCobrador=?, CodigoDeBarras = ?, CodUsuarioLib = ?, DataLib = ? ", lComando, colParcelaPagar(iNumParcela).dtDataVencimento, colParcelaPagar(iNumParcela).dtDataVencimentoReal, colParcelaPagar(iNumParcela).iStatus, colParcelaPagar(iNumParcela).iTipoCobranca, colParcelaPagar(iNumParcela).iPortador, colParcelaPagar(iNumParcela).iBancoCobrador, colParcelaPagar(iNumParcela).sCodigoDeBarras, gsUsuario, gdtDataHoje)
            If lErro <> AD_SQL_SUCESSO Then Error 18511
        
        Else
        
            'Altera os campos alteráveis
            lErro = Comando_ExecutarPos(lComando1, "UPDATE ParcelasPag SET DataVencimento = ?, DataVencimentoReal =?, Status = ?, TipoCobranca = ?, Portador = ? , BancoCobrador=?, CodigoDeBarras = ? ", lComando, colParcelaPagar(iNumParcela).dtDataVencimento, colParcelaPagar(iNumParcela).dtDataVencimentoReal, colParcelaPagar(iNumParcela).iStatus, colParcelaPagar(iNumParcela).iTipoCobranca, colParcelaPagar(iNumParcela).iPortador, colParcelaPagar(iNumParcela).iBancoCobrador, colParcelaPagar(iNumParcela).sCodigoDeBarras)
            If lErro <> AD_SQL_SUCESSO Then Error 18511
        
        End If
        
        'Tenta ler a Parcela
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SEM_DADOS And lErro <> AD_SQL_SUCESSO Then Error 18510
    
    Loop

    'Fecha os comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    ParcelasPagar_Altera_CamposAlteraveis = SUCESSO
    
    Exit Function
    
Erro_ParcelasPagar_Altera_CamposAlteraveis:
    
    ParcelasPagar_Altera_CamposAlteraveis = Err
    
    Select Case Err
    
        Case 18507, 18515
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 18508
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELASPAG", Err, colParcelaPagar(1).lNumIntTitulo)
       
        Case 18509, 18510
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELASPAG1", Err, colParcelaPagar(1).lNumIntTitulo, iNumParcela)
    
        Case 18511
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_PARCELASPAG", Err, colParcelaPagar(1).lNumIntTitulo, iNumParcela)
        
        Case 18512
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148078)

    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Function TituloPagar_Automatico(lNumIntDoc As Long) As Long
'Gera o próximo Número Interno de um Título Pagar
'AVISO: ESSA ROTINA DEVE SER CHAMADA DE DENTRO DE UMA TRANSACAO

    TituloPagar_Automatico = CF("Config_ObterNumInt", "CPRConfig", "NUM_PROX_TIT_PAG", lNumIntDoc)

End Function

Function ParcelasPagar_Grava(ByVal colParcelaPagar As colParcelaPagar) As Long
'Grava as Parcelas de um Titulo passadas por parâmetro
'CHAMADA EM TRANSAÇÃO

Dim lErro As Long
Dim iIndice As Integer
Dim lComando As Long
Dim lNumIntDoc As Long

On Error GoTo Erro_ParcelasPagar_Grava

    'Abre comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 18482
    
    For iIndice = 1 To colParcelaPagar.Count
    
        'Gera número interno automático
        lErro = CF("ParcelaPagar_Automatico", lNumIntDoc)
        If lErro <> SUCESSO Then Error 18496

        colParcelaPagar(iIndice).lNumIntDoc = lNumIntDoc
        
        'Armazena iProxSeqBaixa e Saldo
        colParcelaPagar(iIndice).iProxSeqBaixa = 1
        colParcelaPagar(iIndice).dSaldo = colParcelaPagar(iIndice).dValor
        
        'Insere a Parcela no BD
        With colParcelaPagar(iIndice)
            lErro = Comando_Executar(lComando, "INSERT INTO ParcelasPag (NumIntDoc,NumIntTitulo,NumParcela,Status,DataVencimento,DataVencimentoReal,Saldo,Valor,ValorOriginal,MotivoDiferenca,TipoCobranca,Portador,BancoCobrador,ProxSeqBaixa,NossoNumero, CodigoDeBarras, CodUsuarioLib, DataLib) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", .lNumIntDoc, .lNumIntTitulo, .iNumParcela, .iStatus, .dtDataVencimento, .dtDataVencimentoReal, .dSaldo, .dValor, .dValorOriginal, .iMotivoDiferenca, .iTipoCobranca, .iPortador, .iBancoCobrador, .iProxSeqBaixa, .sNossoNumero, .sCodigoDeBarras, IIf(.iStatus = STATUS_SUSPENSO, "", .sCodUsuarioLib), IIf(.iStatus = STATUS_SUSPENSO, DATA_NULA, .dtDataLib))
        End With
        If lErro <> AD_SQL_SUCESSO Then Error 18497
    Next

    'Fecha comando
    Call Comando_Fechar(lComando)
    
    ParcelasPagar_Grava = SUCESSO
    
    Exit Function

Erro_ParcelasPagar_Grava:

    ParcelasPagar_Grava = Err
    
    Select Case Err
    
        Case 18482
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
            
        Case 18496  'Tratado na rotina chamada
        
        Case 18497
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_PARCELASPAG", Err, colParcelaPagar(iIndice).lNumIntTitulo, iIndice)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148079)
            
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function
    
End Function

Function ParcelaPagar_Automatico(lNumIntDoc As Long) As Long
'Gera o próximo Número Interno a ser utilizado por uma Parcela a Pagar
'AVISO:ESSA FUNÇÃO DEVE SER CHAMADA DENTRO DE UMA TRANSACAO

    ParcelaPagar_Automatico = CF("Config_ObterNumInt", "CPRConfig", "NUM_PROX_PARC_PAG", lNumIntDoc)
    
End Function

Function NFFatPag_Exclui(ByVal objTituloPagar As ClassTituloPagar, ByVal objContabil As ClassContabil) As Long
'Executa a exclusão da Nota Fiscal Fatura passada por parâmetro

Dim lErro As Long
Dim lTransacao As Long
Dim lComando As Long
Dim lComando1 As Long
Dim lNumIntDoc As Long, lNumIntNF As Long
Dim objNFiscal As New ClassNFiscal

On Error GoTo Erro_NFFatPag_Exclui
    
    'Abre transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 18560

    'Abre comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 18561

    lComando1 = Comando_Abrir()
    If lComando = 0 Then gError 18576

    If objTituloPagar.iFilialEmpresa = 0 Then objTituloPagar.iFilialEmpresa = giFilialEmpresa
    
    'Seleciona o Título na Tabela de Titulos a Pagar
    lErro = Comando_ExecutarPos(lComando, "SELECT NumIntDoc FROM TitulosPag WHERE NumIntDoc = ? AND FilialEmpresa = ? AND Status <> ? AND SiglaDocumento = ? ", 0, lNumIntDoc, objTituloPagar.lNumIntDoc, objTituloPagar.iFilialEmpresa, STATUS_EXCLUIDO, objTituloPagar.sSiglaDocumento)
    If lErro <> AD_SQL_SUCESSO Then gError 18562

    'Tenta ler
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 18563
    
    If lErro = AD_SQL_SEM_DADOS Then gError 18564

    'Faz um "lock" no Título
    lErro = Comando_LockExclusive(lComando)
    If lErro <> AD_SQL_SUCESSO Then gError 18565

    'se o documento foi originado fora de CPR nao pode ser excluido em CPR
    lErro = CF("DocumentoCPR_OrigemNFiscal", objTituloPagar.sSiglaDocumento, objTituloPagar.lNumIntDoc, lNumIntNF)
    If lErro <> SUCESSO And lErro <> 41542 Then gError 41543
    If lErro = SUCESSO Then
    
        objNFiscal.lNumIntDoc = lNumIntNF

        lErro = CF("NFiscal_Le", objNFiscal)
        If lErro <> SUCESSO And lErro <> 31442 Then gError 59450
        If lErro <> SUCESSO Then gError 59451
        If objNFiscal.iStatus <> STATUS_CANCELADO Then gError 18467

    End If
    
    'Exclui as parcelas referentes ao Título passado
    lErro = CF("ParcelasPagar_Exclui", objTituloPagar)
    If lErro <> SUCESSO Then gError 18566

    'Faz a exclusão lógica do Título
    lErro = Comando_ExecutarPos(lComando1, "UPDATE TitulosPag SET Status = ? ", lComando, STATUS_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then gError 18587

    '############################################
    'Inserido por Wagner 22/03/2006
    lErro = CF("ProjetoInfo_Exclui", PRJ_CR_TIPO_TITPAG, objTituloPagar.lNumIntDoc)
    If lErro <> SUCESSO Then gError 181764
    '############################################
    
    If Not (objTituloPagar.objAnexos Is Nothing) Then
        objTituloPagar.objAnexos.iTipoDoc = ANEXO_TIPO_TITPAG
        objTituloPagar.objAnexos.lNumIntDoc = objTituloPagar.lNumIntDoc
        lErro = CF("Anexos_Exclui", objTituloPagar.objAnexos)
        If lErro <> SUCESSO Then gError 181764
    End If
    
    lErro = CF("Trata_Exclusao_Do_Destino", objTituloPagar)
    If lErro <> SUCESSO Then gError 192053
    
    If Not (objContabil Is Nothing) Then
        'Exclui os lançamentos contábeis (se houverem) associados ao titulo em questao
        lErro = objContabil.Contabil_Exclui(objTituloPagar.lNumIntDoc, CONTABIL_EXCLUI_EFETIVO)
        If lErro <> SUCESSO Then gError 20476
    End If

    'Finaliza transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 18574

    'Fecha comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    
    NFFatPag_Exclui = SUCESSO
    
    Exit Function
    
Erro_NFFatPag_Exclui:

    NFFatPag_Exclui = gErr
    
    Select Case gErr
    
        Case 18467
            Call Rotina_Erro(vbOKOnly, "ERRO_NFFATPAGAR_VINCULADA_NFISCAL", gErr, objTituloPagar.lNumTitulo)
            
        Case 18560
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
        
        Case 18561, 18576
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 18562, 18563
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TITULOSPAG", gErr, objTituloPagar.lNumIntDoc)
            
        Case 18564
            Call Rotina_Erro(vbOKOnly, "ERRO_NFFATPAG_NAO_CADASTRADA", gErr, objTituloPagar.lNumIntDoc)
        
        Case 18565
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_TITULOSPAG", gErr, objTituloPagar.lNumIntDoc)
        
        Case 18466, 18566, 18905, 20476, 41543, 59450, 59451, 181764, 192053
            
        Case 18574
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case 18587
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_TITULOSPAG", gErr, objTituloPagar.lNumIntDoc)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148080)

    End Select
    
    Call Transacao_Rollback
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    
    Exit Function
    
End Function

Function ParcelasPagar_Exclui(ByVal objTituloPagar As ClassTituloPagar)
'Exclui as parcelas relacionadas ao Título passado por parâmetro
'FUNÇÃO CHAMADA DENTRO DE TRANSAÇÃO

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim lComando2 As Long
Dim iProxSeqBaixa As Integer
Dim dValor As Double
Dim dSaldo As Double
Dim colParcelaPag As New colParcelaPagar
Dim objParcelaPagar As ClassParcelaPagar
'Dim colBaixasParcPag As New colBaixaParcPagar
Dim iNumParcela As Integer
Dim lNumIntParc As Long, lNumCheque As Long

On Error GoTo Erro_ParcelasPagar_Exclui
    
    'Abre comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 18567
        
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 18568
    
    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then gError 18568
    
    If objTituloPagar.iExclusao = 1 Then
    
        'Seleciona as Parcelas referentes ao Título passado por ordem de Vencimento
        lErro = Comando_ExecutarPos(lComando, "SELECT ProxSeqBaixa,Saldo,Valor, NumIntDoc FROM ParcelasPag WHERE NumIntTitulo = ? ORDER BY DataVencimento", 0, iProxSeqBaixa, dSaldo, dValor, lNumIntParc, objTituloPagar.lNumIntDoc)
        If lErro <> AD_SQL_SUCESSO Then gError 18569
    
    Else
    
        'Seleciona as Parcelas referentes ao Título passado por ordem de Vencimento
        lErro = Comando_ExecutarPos(lComando, "SELECT ProxSeqBaixa,Saldo,Valor, NumIntDoc FROM ParcelasPag WHERE NumIntTitulo = ? AND Status <> ? ORDER BY DataVencimento", 0, iProxSeqBaixa, dSaldo, dValor, lNumIntParc, objTituloPagar.lNumIntDoc, STATUS_EXCLUIDO)
        If lErro <> AD_SQL_SUCESSO Then gError 18569
    
    End If
    
    iNumParcela = 1
    
    'Lê a primeira Parcela
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 18570
   
    'Loop de exclusão lógica das Parcelas
    Do While lErro = AD_SQL_SUCESSO
    
        'Faz o "lock" da Parcela
        lErro = Comando_LockExclusive(lComando)
        If lErro <> AD_SQL_SUCESSO Then gError 18582
        
        'Verifica se a parcela já sofreu alguma baixa
        If Abs(dSaldo - dValor) > 0.01 Then gError 18583
        
        ''Lê cheque pré
        lErro = Comando_Executar(lComando2, "SELECT C.Numero FROM ChequePrePag As C, ChequePrePagParc As P WHERE P.NumIntCheque = C.NumIntDoc AND P.NumIntParcela = ?", lNumCheque, lNumIntParc)
        If lErro <> AD_SQL_SUCESSO Then gError 213773
        
        lErro = Comando_BuscarPrimeiro(lComando2)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 213774
       
        If lErro = AD_SQL_SUCESSO Then gError 213775
        
        If objTituloPagar.iExclusao = 1 Then
        
            'Faz a exclusão lógica da Parcela
            lErro = Comando_ExecutarPos(lComando1, "DELETE FROM ParcelasPag", lComando)
            If lErro <> AD_SQL_SUCESSO Then gError 83954
            
        Else
            
            'Faz a exclusão lógica da Parcela
            lErro = Comando_ExecutarPos(lComando1, "UPDATE ParcelasPag SET Status = ? ", lComando, STATUS_EXCLUIDO)
            If lErro <> AD_SQL_SUCESSO Then gError 18585
        
        End If
        
        iNumParcela = iNumParcela + 1
        
        'Lê a próxima Parcela
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 18573
            
    Loop
    
    'Fecha os comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    
    ParcelasPagar_Exclui = SUCESSO
    
    Exit Function
    
Erro_ParcelasPagar_Exclui:

    ParcelasPagar_Exclui = gErr
    
    Select Case gErr
    
        Case 18567, 18568
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 18569, 213773, 213774
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELASPAG", gErr, objTituloPagar.lNumIntDoc)
            
        Case 18570, 18573
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELASPAG1", gErr, objTituloPagar.lNumIntDoc, iNumParcela)
        
        Case 18582
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_PARCELASPAG", gErr, objTituloPagar.lNumIntDoc, iNumParcela)
        
        Case 18583
            Call Rotina_Erro(vbOKOnly, "ERRO_PARCELA_COM_BAIXA", gErr, iNumParcela, objTituloPagar.lNumTitulo)
            
        Case 18585
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_PARCELASPAG", gErr, objParcelaPagar.lNumIntTitulo, iNumParcela)
            
        Case 83954
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_PARCELASPAG", gErr, iNumParcela, objTituloPagar.lNumTitulo)
        
        Case 213775
            Call Rotina_Erro(vbOKOnly, "ERRO_PARCELAPAG_COM_CHEQUEPRE", gErr, iNumParcela, lNumCheque)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148081)
            
    End Select
    
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    
    Exit Function
    
End Function

Private Function OcorrRemParcRec_Inserir(ByVal objOcorrRemParcRec As ClassOcorrRemParcRec, ByVal lComando As Long) As Long

Dim lErro As Long

On Error GoTo Erro_OcorrRemParcRec_Inserir

    lErro = Comando_Executar(lComando, "INSERT INTO OcorrenciasRemParcRec (NumIntDoc, NumIntParc, NumSeqOcorr, FilialEmpresa, Cobrador, CodOcorrencia, DataRegistro, Data, TituloVoltaCarteira, NovaDataVcto, Juros, Instrucao1, DiasDeProtesto1, Instrucao2, DiasDeProtesto2, ValorCobrado, NumBordero, NumTitCobrador) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", objOcorrRemParcRec.lNumIntDoc, objOcorrRemParcRec.lNumIntParc, objOcorrRemParcRec.iNumSeqOcorr, objOcorrRemParcRec.iFilialEmpresa, objOcorrRemParcRec.iCobrador, objOcorrRemParcRec.iCodOcorrencia, objOcorrRemParcRec.dtDataRegistro, objOcorrRemParcRec.dtData, objOcorrRemParcRec.iTituloVoltaCarteira, objOcorrRemParcRec.dtNovaDataVcto, objOcorrRemParcRec.dJuros, objOcorrRemParcRec.iInstrucao1, objOcorrRemParcRec.iDiasDeProtesto1, objOcorrRemParcRec.iInstrucao2, objOcorrRemParcRec.iDiasDeProtesto2, objOcorrRemParcRec.dValorCobrado, objOcorrRemParcRec.lNumBordero, objOcorrRemParcRec.sNumTitCobrador)
    If lErro <> AD_SQL_SUCESSO Then Error 7352

    OcorrRemParcRec_Inserir = SUCESSO

    Exit Function

Erro_OcorrRemParcRec_Inserir:

    OcorrRemParcRec_Inserir = Err

    Select Case Err

        Case 7352
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_OCORR_REM_PARC_REC", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148082)

    End Select

    Exit Function

End Function

Private Function BorderoCobranca_Inserir(ByVal objBorderoCobranca As ClassBorderoCobranca) As Long
'insere um registro correspondente a criacao de um bordero de cobranca

Dim lComando As Long, lErro As Long

On Error GoTo Erro_BorderoCobranca_Inserir

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 7742
        
    lErro = Comando_Executar(lComando, "INSERT INTO BorderosCobranca (NumBordero,Cobrador,DataEmissao,CodNossaConta,DiasDeRetencao,TaxaCobranca,TaxaDesconto,Valor,ValorDesconto,Convenio,Status,DataCancelamento,DataContabilCancelamento,CarteiraCobranca) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?)", objBorderoCobranca.lNumBordero, objBorderoCobranca.iCobrador, objBorderoCobranca.dtDataEmissao, objBorderoCobranca.iCodNossaConta, objBorderoCobranca.iDiasDeRetencao, objBorderoCobranca.dTaxaCobranca, objBorderoCobranca.dTaxaDesconto, objBorderoCobranca.dValor, objBorderoCobranca.dValorDesconto, objBorderoCobranca.sConvenio, objBorderoCobranca.iStatus, objBorderoCobranca.dtDataCancelamento, objBorderoCobranca.dtDataContabilCancelamento, objBorderoCobranca.iCodCarteiraCobranca)
    If lErro <> AD_SQL_SUCESSO Then Error 7531

    lErro = Comando_Fechar(lComando)
    
    BorderoCobranca_Inserir = SUCESSO

    Exit Function

Erro_BorderoCobranca_Inserir:

    BorderoCobranca_Inserir = Err

    Select Case Err

        Case 7742
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 7531
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_BORDERO_COBRANCA", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148083)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function BorderoCobranca_Automatico(lNumIntBordero As Long) As Long
'obtem o proximo numero de um bordero de cobranca
'chamada dentro de transacao
Dim lErro As Long
On Error GoTo Erro_BorderoCobranca_Automatico

    lErro = CF("CPRConfig_ObterNumInt", "NUM_PROX_BORDERO_COB", lNumIntBordero)
    If lErro <> SUCESSO Then Error 7535

    BorderoCobranca_Automatico = SUCESSO

    Exit Function

Erro_BorderoCobranca_Automatico:

    BorderoCobranca_Automatico = Err

   Select Case Err

        Case 7535

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148084)

    End Select

    Exit Function

End Function

Private Function CarteiraCobrador_AtualizarBorderoCobranca(ByVal objCarteiraCobrador As ClassCarteiraCobrador, ByVal lComandoSel As Long) As Long
'atualiza o registro em CarteirasCobrador devido a criacao (emissao) de um bordero de cobranca

Dim lComandoMod As Long, lErro As Long

On Error GoTo Erro_CarteiraCobrador_AtualizarBorderoCobranca

    lComandoMod = Comando_Abrir()
    If lComandoMod = 0 Then Error 7534

    lErro = Comando_ExecutarPos(lComandoMod, "UPDATE CarteirasCobrador SET QuantidadeAtual = ?, SaldoAtual = ?, FaixaNossoNumeroProx = ?", lComandoSel, objCarteiraCobrador.lQuantidadeAtual, objCarteiraCobrador.dSaldoAtual, objCarteiraCobrador.sFaixaNossoNumeroProx)
    If lErro <> AD_SQL_SUCESSO Then Error 7533

    lErro = Comando_Fechar(lComandoMod)

    CarteiraCobrador_AtualizarBorderoCobranca = SUCESSO

    Exit Function

Erro_CarteiraCobrador_AtualizarBorderoCobranca:

    CarteiraCobrador_AtualizarBorderoCobranca = Err

    Select Case Err

        Case 7534
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 7533
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_CARTEIRAS_COBRADOR", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148085)

    End Select

    Call Comando_Fechar(lComandoMod)

    Exit Function

End Function

Private Function BorderoCobranca_Grava1(ByVal objBorderoCobrancaEmissao As ClassBorderoCobrancaEmissao, lNumIntDocOcRem As Long) As Long
'retorna em lNumIntDocOcRem o 1o numero a ser utilizado para a criacao de ocorrencias em OcorrenciasRemParcRec

Dim lErro As Long, iQtde As Integer, objInfoParcRec As ClassInfoParcRec
Dim lTransacao As Long

On Error GoTo Erro_BorderoCobranca_Grava1

    iQtde = 0
    
    'Loop de parcelas da colecao
    For Each objInfoParcRec In objBorderoCobrancaEmissao.colInfoParcRec

        'pular as parcelas desmarcadas
        If objInfoParcRec.iMarcada = 1 Then iQtde = iQtde + 1
    
    Next
    
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 32204
        
    lErro = CF("Config_ObterNumInt", "CRFATConfig", "NUM_PROX_OCREMPARC", lNumIntDocOcRem, iQtde)
    If lErro <> SUCESSO Then Error 32205
    
    'confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 32206
    
    BorderoCobranca_Grava1 = SUCESSO
     
    Exit Function
    
Erro_BorderoCobranca_Grava1:

    BorderoCobranca_Grava1 = Err
     
    Select Case Err
          
        Case 32205
        
        Case 32204
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
        
        Case 32206
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148086)
     
    End Select
     
    Call Transacao_Rollback
    
    Exit Function

End Function

Function BorderoCobranca_Grava(ByVal objBorderoCobrancaEmissao As ClassBorderoCobrancaEmissao) As Long
'faz todas as atualizacoes no banco de dados correspondentes a criacao (emissao) de um bordero de cobranca

Dim lErro As Long, lTransacao As Long, iIndice As Integer
Dim objBorderoCobranca As New ClassBorderoCobranca
Dim objCarteiraCobrador As New ClassCarteiraCobrador
Dim colPadroesCobranca As New Collection, objInfoParcRec As ClassInfoParcRec
Dim objOcorrRemParcRec As New ClassOcorrRemParcRec
Dim objPadraoCobranca As New ClassPadraoCobranca, objCobrador As New ClassCobrador
Dim objParcelaRec As New ClassParcelaReceber
Dim lNumIntBordero As Long, objCarteiraEmpresa As New ClassCarteiraCobrador
Dim objContabAutomatica As ClassContabAutomatica, iCancela As Integer
Dim alComando(1 To 4) As Long, lNumIntDocOcRem As Long
Dim sProxNossoNumero As String, sFormatoNossoNum As String
Dim iTamNossoNumero As Integer
Dim objCNABCarteiraInfo As New ClassCNABInfo, objCodNome As AdmCodigoNome, sCodConvenio As String
Dim sAux As String, iTamConvenio As Integer, sDVNossoNumero As String, sCodCedente As String, colCobradorInfo As New Collection

On Error GoTo Erro_BorderoCobranca_Grava

    'obtem o 1o numintdoc p/ocorrencias em a serem criadas em OcorrenciasRemParcRec
    lErro = BorderoCobranca_Grava1(objBorderoCobrancaEmissao, lNumIntDocOcRem)
    If lErro <> SUCESSO Then Error 32207
    
    For iIndice = LBound(alComando) To UBound(alComando)
    
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 7550
        
    Next

    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 19316
        
    'obter dados de carteirascobrador (ler com lock exclusivo)
    objCarteiraCobrador.iCobrador = objBorderoCobrancaEmissao.iCobrador
    objCarteiraCobrador.iCodCarteiraCobranca = objBorderoCobrancaEmissao.iCarteira

    lErro = CF("CarteiraCobrador_LeMod", objCarteiraCobrador, alComando(1))
    If lErro <> SUCESSO Then Error 7539
    
    sProxNossoNumero = objCarteiraCobrador.sFaixaNossoNumeroProx

    objCobrador.iCodigo = objBorderoCobrancaEmissao.iCobrador
    lErro = CF("Cobrador_Le", objCobrador)
    If lErro <> SUCESSO Then Error 19318
    
    lErro = CF("Banco_ObtemTamNossoNumero", objCobrador.iCodBanco, iTamNossoNumero)
    If lErro <> SUCESSO Then Error 19318
    
    If objCobrador.iCodBanco = 104 And iTamNossoNumero = 15 And Len(Trim(sProxNossoNumero)) = 10 Then iTamNossoNumero = 10
    
    sFormatoNossoNum = FormataCpoNum(0, iTamNossoNumero)
    
    objBorderoCobranca.dTaxaCobranca = objCarteiraCobrador.dTaxaCobranca
    objBorderoCobranca.dTaxaDesconto = objCarteiraCobrador.dTaxaDesconto
    objBorderoCobranca.dtDataEmissao = objBorderoCobrancaEmissao.dtDataEmissao
    objBorderoCobranca.dValor = objBorderoCobrancaEmissao.dValorParcelasSelecionadas
    objBorderoCobranca.dValorDesconto = 0 '???
    objBorderoCobranca.iCobrador = objBorderoCobrancaEmissao.iCobrador
    objBorderoCobranca.iCodNossaConta = objCobrador.iCodCCI
    objBorderoCobranca.iDiasDeRetencao = objCarteiraCobrador.iDiasDeRetencao
    objBorderoCobranca.sConvenio = "" '???
    objBorderoCobranca.dtDataCancelamento = DATA_NULA
    objBorderoCobranca.dtDataContabilCancelamento = DATA_NULA
    objBorderoCobranca.iCodCarteiraCobranca = objCarteiraCobrador.iCodCarteiraCobranca
    objBorderoCobranca.iStatus = STATUS_LANCADO
    
    lErro = BorderoCobranca_Automatico(lNumIntBordero)
    If lErro <> SUCESSO Then Error 29018
   
    objBorderoCobranca.lNumBordero = lNumIntBordero
    objBorderoCobrancaEmissao.lNumero = lNumIntBordero
   
    'inserir bordero de cobranca
    lErro = BorderoCobranca_Inserir(objBorderoCobranca)
    If lErro <> SUCESSO Then Error 7540

    'criar colecao com os padroes de cobranca
    lErro = CF("PadroesCobranca_Le_Todos", colPadroesCobranca)
    If lErro <> SUCESSO Then Error 7541
    
    lErro = CF("CobradorInfo_Le", objBorderoCobrancaEmissao.iCobrador, colCobradorInfo)
    If lErro <> SUCESSO Then Error 7541
    
    'Preenche variável que vai guardar os dados dessa carteira
    objCNABCarteiraInfo.iCodCobrador = objBorderoCobrancaEmissao.iCobrador
    objCNABCarteiraInfo.iCarteiraCobrador = objCarteiraCobrador.iCodCarteiraCobranca

    lErro = CF("CarteiraCobradorInfo_Le", objCNABCarteiraInfo.iCodCobrador, objCNABCarteiraInfo.iCarteiraCobrador, objCNABCarteiraInfo.colInformacoes)
    If lErro <> SUCESSO Then Error 7551

    objOcorrRemParcRec.dtData = objBorderoCobranca.dtDataEmissao
    objOcorrRemParcRec.dtDataRegistro = gdtDataHoje
    objOcorrRemParcRec.dtNovaDataVcto = DATA_NULA
    objOcorrRemParcRec.iCobrador = objBorderoCobranca.iCobrador
    objOcorrRemParcRec.iCodOcorrencia = COBRANCA_OCORR_INC_TITULO
    objOcorrRemParcRec.iTituloVoltaCarteira = 0
    objOcorrRemParcRec.lNumBordero = objBorderoCobranca.lNumBordero
               
    If (gcolModulo.Ativo(MODULO_CONTABILIDADE) = MODULO_ATIVO) Then
    
        Set objContabAutomatica = New ClassContabAutomatica
    
        lErro = objContabAutomatica.Inicializa_Contab(objBorderoCobrancaEmissao, MODULO_CONTASARECEBER, "BCR", objBorderoCobrancaEmissao.dtDataContabil, DATA_NULA)
        If lErro <> SUCESSO Then Error 32208
        
    End If
    
    'Loop de parcelas da colecao
    For Each objInfoParcRec In objBorderoCobrancaEmissao.colInfoParcRec

        'pular as parcelas desmarcadas
        If objInfoParcRec.iMarcada = 1 Then

            'le a parcela do bd c/executarpos
            objParcelaRec.lNumIntDoc = objInfoParcRec.lNumIntParc
            lErro = CF("ParcelaRec_LeMod", objParcelaRec, alComando(3))
            If lErro <> SUCESSO Then Error 19308

            'faz lock exclusivo
            lErro = Comando_LockExclusive(alComando(3))
            If lErro <> SUCESSO Then Error 19309
            
            objParcelaRec.sNumTitCobrador = ""
            
            lErro = ParcelaRec_PodeIncluirBordCobr(objParcelaRec, objInfoParcRec)
            If lErro <> SUCESSO Then Error 7546
            
            If Len(Trim(sProxNossoNumero)) <> 0 And objCarteiraCobrador.iFormPreImp = DESMARCADO Then
                If objCobrador.iCodBanco = 1 Then
                    'xxxxxxxxxxxxxxxxxxxxxxx'Formato do nosso número CCCCCCCNNNNNNNNNN
                    'xxxxxxxxxxxxxxxxxxxxxxx'CCCCCCC = número do convênio de 07 posições (1529178) e NNNNNNNNNN =
                    'xxxxxxxxxxxxxxxxxxxxxxx'seqüencial numérico de 10 dígitos de livre escolha do cliente (a partir de
                    'xxxxxxxxxxxxxxxxxxxxxxx'0000000001). Ex.: 15291780002648003, 15291780000000100
                    
                    'COMPOSIÇÃO DO CAMPO NOSSO NÚMERO  CONVÊNIO DE 4 POSIÇÕES
                    'CCCCNNNNNNN-X convênios com 4 posições, onde:
                    '"C" - número do convênio fornecido pelo Banco (número fixo e não pode ser alterado)
                    '"N" - seqüencial atribuído pelo cliente
                    '"X" - dígito verificador do Nosso-Número, calculado de acordo com o anexo 9
                    '
                    'COMPOSIÇÃO DO CAMPO NOSSO NÚMERO  CONVÊNIO DE 6 POSIÇÕES
                    'CCCCCCNNNNN-X convênios com 6 posições, onde:
                    '"C" - número do convênio fornecido pelo Banco (número fixo e não pode ser alterado)
                    '"N" - seqüencial atribuído pelo cliente
                    '"X" - dígito verificador do Nosso-Número
                    '
                    'COMPOSIÇÃO DO CAMPO NOSSO NÚMERO  CONVÊNIO DE 7 POSIÇÕES
                    'CCCCCCCNNNNNNNNNN convênios com numeração acima de 1.000.000, onde:
                    '"C" - é o número do convênio fornecido pelo Banco (número fixo e não pode ser alterado)
                    '"N" - é um seqüencial atribuído pelo cliente
                    sCodConvenio = FormataCpoNum("", 7)
                    iTamConvenio = 7
                    For Each objCodNome In objCNABCarteiraInfo.colInformacoes
                        If objCodNome.iCodigo = 7 Then
                            'Convênio = 9999999994444CCVVV
                            '999999999 - codigo do convenio
                            '4444      - codigo do produto
                            'CC        - carteira de cobranca
                            'VVV       - variacao da carteira de cobranca
                            If Len(Trim(objCodNome.sNome)) = 18 Then
                                sAux = Mid(objCodNome.sNome, 1, 9)
                            Else
                                sAux = left(objCodNome.sNome, 7)
                            End If
                            Select Case StrParaDbl(sAux)
                                Case Is < 10000
                                    iTamConvenio = 4
                                Case 10000 To 999999
                                    iTamConvenio = 6
                                Case Else
                                    iTamConvenio = 7
                            End Select
                            sCodConvenio = FormataCpoNum(StrParaDbl(sAux), iTamConvenio)
                            Exit For
                        End If
                    Next
                    Select Case iTamConvenio
                        Case 4 'CCCCNNNNNNN-X
                            iTamNossoNumero = 7
                        Case 6 'CCCCCCNNNNN-X
                            iTamNossoNumero = 5
                        Case 7 'CCCCCCCNNNNNNNNNN
                            iTamNossoNumero = 10
                    End Select
                    If Len(Trim(sProxNossoNumero)) > iTamNossoNumero Then sProxNossoNumero = right(Trim(sProxNossoNumero), iTamNossoNumero)
                    sFormatoNossoNum = FormataCpoNum(0, iTamNossoNumero)
                    
                    'objParcelaRec.sNumTitCobrador = FormataCpoNum(sCodConvenio, 7) & Format(sProxNossoNumero, sFormatoNossoNum)
                    objParcelaRec.sNumTitCobrador = sCodConvenio & Format(sProxNossoNumero, sFormatoNossoNum)
                    
                    If Len(objParcelaRec.sNumTitCobrador) < 12 Then
                        lErro = Calcula_DV11(objParcelaRec.sNumTitCobrador, 9, sDVNossoNumero)
                        If lErro <> SUCESSO Then Error 7551
                    
                        objParcelaRec.sNumTitCobrador = objParcelaRec.sNumTitCobrador & sDVNossoNumero
                    End If
                
                ElseIf objCobrador.iCodBanco = 748 Then
                    'AA/BXXXXX-D
                    'AA = Ano
                    'B = Byte (2 a 9). 1 só poderá ser utilizado pela cooperativa.
                    'XXXXX  Número livre de 00000 a 99999.
                    'D = Digito Verificador pelo módulo 11.
                    'EX: 12/20004-1
                    If Len(Trim(sProxNossoNumero)) = 5 Then 'Só sequencial
                        objParcelaRec.sNumTitCobrador = Format(objParcelaRec.dtDataVencimento, "YY") & "2" & Format(sProxNossoNumero, FormataCpoNum(0, 5))
                    ElseIf Len(Trim(sProxNossoNumero)) = 6 Then 'Sem Ano
                        objParcelaRec.sNumTitCobrador = Format(objParcelaRec.dtDataVencimento, "YY") & Format(sProxNossoNumero, FormataCpoNum(0, 6))
                    Else
                        objParcelaRec.sNumTitCobrador = Format(sProxNossoNumero, FormataCpoNum(0, 8))
                    End If
                    'SEM O DV
                ElseIf objCobrador.iCodBanco = 85 Then
                    sCodConvenio = FormataCpoNum("", 8)
                    iTamConvenio = 8
                    For Each objCodNome In colCobradorInfo
                        If objCodNome.iCodigo = 1 Then
                            sCodConvenio = FormataCpoNum(objCodNome.sNome, iTamConvenio)
                            Exit For
                        End If
                    Next
                    objParcelaRec.sNumTitCobrador = sCodConvenio & Format(sProxNossoNumero, sFormatoNossoNum)
                Else
                    objParcelaRec.sNumTitCobrador = Format(sProxNossoNumero, sFormatoNossoNum)
                End If
                sProxNossoNumero = Format(Val(sProxNossoNumero) + 1, sFormatoNossoNum)
            End If

            'alterar ParcelasRec no bd
            objParcelaRec.iCobrador = objBorderoCobranca.iCobrador
            objParcelaRec.iCarteiraCobranca = objCarteiraCobrador.iCodCarteiraCobranca
            objParcelaRec.iProxSeqOcorr = objParcelaRec.iProxSeqOcorr + 1
            lErro = ParcelaRec_Modificar_BorderoCobranca(objParcelaRec, alComando(4), alComando(3))
            If lErro <> SUCESSO Then Error 7551

            objPadraoCobranca.iCodigo = objInfoParcRec.iPadraoCobranca
            
            If objPadraoCobranca.iCodigo <> 0 Then
            
                lErro = CF("PadraoCobranca_ObterNaColecao", objPadraoCobranca, colPadroesCobranca)
                If lErro <> SUCESSO Then Error 7552
        
            Else
            
                objPadraoCobranca.dJuros = 0
                objPadraoCobranca.iDiasDeProtesto1 = 0
                objPadraoCobranca.iDiasDeProtesto2 = 0
                objPadraoCobranca.iInstrucao1 = 0
                objPadraoCobranca.iInstrucao2 = 0
            
            End If
        
            'Incluir reg em OcorrenciasRemParcRec
            objOcorrRemParcRec.lNumIntDoc = lNumIntDocOcRem
            lNumIntDocOcRem = lNumIntDocOcRem + 1
            objOcorrRemParcRec.dJuros = objPadraoCobranca.dJuros
            objOcorrRemParcRec.iDiasDeProtesto1 = objPadraoCobranca.iDiasDeProtesto1
            objOcorrRemParcRec.iDiasDeProtesto2 = objPadraoCobranca.iDiasDeProtesto2
            objOcorrRemParcRec.iInstrucao1 = objPadraoCobranca.iInstrucao1
            objOcorrRemParcRec.iInstrucao2 = objPadraoCobranca.iInstrucao2
            objOcorrRemParcRec.iNumSeqOcorr = objParcelaRec.iProxSeqOcorr - 1
            objOcorrRemParcRec.lNumIntParc = objInfoParcRec.lNumIntParc
            objOcorrRemParcRec.iFilialEmpresa = objInfoParcRec.iFilialEmpresa
            objOcorrRemParcRec.dValorCobrado = objInfoParcRec.dValor
            objOcorrRemParcRec.sNumTitCobrador = objParcelaRec.sNumTitCobrador
    
            lErro = OcorrRemParcRec_Inserir(objOcorrRemParcRec, alComando(2))
            If lErro <> SUCESSO Then Error 7553

            If Not (objContabAutomatica Is Nothing) Then
            
                lErro = objContabAutomatica.GeraContabilizacao(objInfoParcRec, objOcorrRemParcRec)
                If lErro <> SUCESSO Then Error 32213
                
            End If
        
            lErro = objBorderoCobrancaEmissao.objTelaAtualizacao.Mostra_Evolucao(iCancela, 1)
            If lErro <> SUCESSO Then Error 59189
            
            If iCancela = CANCELA_BATCH Then Error 59190
        
        End If

    Next

    'incluir as ocorrencias entradas manualmente que ainda nao tenham sido enviadas
    lErro = BorderoCobranca_IncluirOcManuais(objBorderoCobranca)
    If lErro <> SUCESSO Then Error 19310

    'Atualizar CarteirasCobrador pela qtde e valor das parcelas cobradas
    objCarteiraCobrador.lQuantidadeAtual = objCarteiraCobrador.lQuantidadeAtual + objBorderoCobrancaEmissao.iQtdeParcelasSelecionadas
    objCarteiraCobrador.dSaldoAtual = objCarteiraCobrador.dSaldoAtual + objBorderoCobrancaEmissao.dValorParcelasSelecionadas
    objCarteiraCobrador.sFaixaNossoNumeroProx = sProxNossoNumero
    '??? objCarteiraCobrador.sFaixaNossoNumeroProx = sFaixaNossoNumeroProx '????
    lErro = CarteiraCobrador_AtualizarBorderoCobranca(objCarteiraCobrador, alComando(1))
    If lErro <> SUCESSO Then Error 7554

    'diminui a qtde e valor dos titulos "em carteira" na propria empresa
    objCarteiraEmpresa.iCobrador = COBRADOR_PROPRIA_EMPRESA
    objCarteiraEmpresa.iCodCarteiraCobranca = CARTEIRA_CARTEIRA
    lErro = CF("CarteiraCobrador_AtualizaSaldo", objCarteiraEmpresa, -objBorderoCobrancaEmissao.iQtdeParcelasSelecionadas, -objBorderoCobrancaEmissao.dValorParcelasSelecionadas)
    If lErro <> SUCESSO Then Error 32209
    
    If (gcolModulo.Ativo(MODULO_CONTABILIDADE) = MODULO_ATIVO) Then
    
        lErro = objContabAutomatica.Finaliza_Contab()
        If lErro <> SUCESSO Then Error 32210
        
    End If
   
    'confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 19317
    
    For iIndice = LBound(alComando) To UBound(alComando)
    
        Call Comando_Fechar(alComando(iIndice))
        
    Next

    BorderoCobranca_Grava = SUCESSO

    Exit Function

Erro_BorderoCobranca_Grava:

    BorderoCobranca_Grava = Err

    Select Case Err

        Case 19309
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_PARCELAS_REC", Err)
            
        Case 7539, 7540, 7541, 7546, 7551, 7552, 7553, 7554, 19318, 29018, 32207 To 32210, 32213, 59189, 59190
        
        Case 19316
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
        
        Case 19317
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
        
        Case 7538, 7548 To 7550, 19308
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148087)

    End Select

    Call Transacao_Rollback
    
    For iIndice = LBound(alComando) To UBound(alComando)
    
        Call Comando_Fechar(alComando(iIndice))
        
    Next

    Exit Function

End Function

Private Function ParcelaRec_Modificar_BorderoCobranca(ByVal objParcelaRec As ClassParcelaReceber, ByVal lComandoMod As Long, ByVal lComandoSel As Long) As Long
'alteracoes em uma parcela a receber sendo incluida em um bordero de cobranca
'??? NumTitCobrador ainda nao foi alterado
Dim lErro As Long

On Error GoTo Erro_ParcelaRec_Modificar_BorderoCobranca

        lErro = Comando_ExecutarPos(lComandoMod, "UPDATE ParcelasRec SET " & _
            "ProxSeqOcorr = ?, Cobrador = ?, CarteiraCobranca = ?, NumTitCobrador = ?", lComandoSel, _
            objParcelaRec.iProxSeqOcorr, objParcelaRec.iCobrador, objParcelaRec.iCarteiraCobranca, objParcelaRec.sNumTitCobrador)
        If lErro <> AD_SQL_SUCESSO Then Error 7547

        ParcelaRec_Modificar_BorderoCobranca = SUCESSO

        Exit Function

Erro_ParcelaRec_Modificar_BorderoCobranca:

        ParcelaRec_Modificar_BorderoCobranca = Err

    Select Case Err

        Case 7547
            Call Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_PARCELAS_REC", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148088)

    End Select

    Exit Function

End Function

Function Fluxo_ObterDadosReais(ByVal objFluxo As ClassFluxo) As Long
'atualiza os dados "reais" nas tabelas Fluxo* que sao utilizadas na consulta de Fluxo de Caixa
Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_Fluxo_ObterDadosReais

    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 21243

    lErro = Fluxo_ObterDadosReais_Inicializar(objFluxo)
    If lErro <> SUCESSO Then Error 7648

    'obter pagtos no periodo
    lErro = Fluxo_ObterDadosReais_Pagtos(objFluxo)
    If lErro <> SUCESSO Then Error 7642

    'obter recebtos no periodo
    lErro = Fluxo_ObterDadosReais_Recebtos(objFluxo)
    If lErro <> SUCESSO Then Error 7643

    'obter resgates no periodo por tipo de aplicacao
    lErro = Fluxo_ObterDadosReais_Resgates(objFluxo)
    If lErro <> SUCESSO Then Error 7649

'    If giTipoVersao <> VERSAO_LIGHT Then
    
        'totalizar pagtos por tipo de fornecedor
        lErro = Fluxo_ObterDadosReais_TotalizaPorTipoForn(objFluxo, FLUXOANALITICO_TIPOREG_PAGTO)
        If lErro <> SUCESSO Then Error 7644
    
        'totalizar recebtos por tipo de cliente
        lErro = Fluxo_ObterDadosReais_TotalizaPorTipoForn(objFluxo, FLUXOANALITICO_TIPOREG_RECEBTO)
        If lErro <> SUCESSO Then Error 7645

'    End If
    
    'obter outros tipos de movto ( Saque, Deposito, Aplicacao, Resgate) totalizando por dia
    lErro = Fluxo_ObterDadosReais_Outros(objFluxo)
    If lErro <> SUCESSO Then Error 7646

    'recalcular saldos reais dia a dia
    lErro = Fluxo_ObterDadosReais_AtualizarSaldos(objFluxo)
    If lErro <> SUCESSO Then Error 21242
    
    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 21244

    Fluxo_ObterDadosReais = SUCESSO

    Exit Function

Erro_Fluxo_ObterDadosReais:

    Fluxo_ObterDadosReais = Err

    Select Case Err

        Case 7642 To 7646, 7648, 21242
        
        Case 21243
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 21244
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148089)

    End Select

    Call Transacao_Rollback

    Exit Function

End Function

Private Function FluxoForn_Inserir(tFluxoForn As typeFluxoForn, ByVal lComando As Long) As Long

Dim lErro As Long

On Error GoTo Erro_FluxoForn_Inserir

    lErro = Comando_Executar(lComando, "INSERT INTO FluxoForn (FluxoId, TipoReg, Fornecedor, Data, TipoFornecedor, TotalSistema, TotalAjustado, TotalReal, NomeReduzido) VALUES (?,?,?,?,?,?,?,?,?)", tFluxoForn.lFluxoId, tFluxoForn.iTipoReg, tFluxoForn.lFornecedor, tFluxoForn.dtData, tFluxoForn.iTipoFornecedor, tFluxoForn.dTotalSistema, tFluxoForn.dTotalAjustado, tFluxoForn.dTotalReal, tFluxoForn.sNomeReduzido)
    If lErro <> AD_SQL_SUCESSO Then Error 7563

    FluxoForn_Inserir = SUCESSO

    Exit Function

Erro_FluxoForn_Inserir:

    FluxoForn_Inserir = Err

    Select Case Err

        Case 7563
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FLUXOFORN", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148090)

    End Select

    Exit Function

End Function

Function Fluxo_ObterDadosReais_Pagtos1(ByVal objFluxo As ClassFluxo) As Long
'obtem dados de pagtos de titulos nao baixados

Dim i As Integer, lErro As Long, lComando(1 To 5) As Long, lFornecedor As Long, dtDataMovto As Date, dValor As Double

On Error GoTo Erro_Fluxo_ObterDadosReais_Pagtos1

    For i = 1 To 5
        lComando(i) = Comando_Abrir()
        If lComando(i) = 0 Then Error 7568
    Next

    'ler pagtos de titulos nao baixados
    'removido motivo 2 porque adiantamento são lidos em Fluxo_ObterDadosReais_Pagtos5
    If (objFluxo.iFilialEmpresa = EMPRESA_TODA) Then
        lErro = Comando_Executar(lComando(1), "SELECT MovimentosContaCorrente.DataMovimento, TitulosPag.Fornecedor, " & _
        "Sum (BaixasParcPag.ValorBaixado + BaixasParcPag.ValorMulta + BaixasParcPag.ValorJuros - BaixasParcPag.ValorDesconto) " & _
        "From BaixasPag, BaixasParcPag, ParcelasPag, TitulosPag, MovimentosContaCorrente " & _
        "WHERE BaixasPag.Motivo<>2 AND BaixasPag.NumIntBaixa = BaixasParcPag.NumIntBaixa AND BaixasParcPag.Status <> ? AND BaixasParcPag.NumIntParcela = ParcelasPag.NumIntDoc AND ParcelasPag.NumIntTitulo = TitulosPag.NumIntDoc " & _
        "AND MovimentosContaCorrente.DataMovimento >= ? AND MovimentosContaCorrente.DataMovimento <= ? AND BaixasPag.NumMovCta = MovimentosContaCorrente.NumMovto AND NOT(DataMovimento = ? AND MovimentosContaCorrente.NumMovto <= ?) " & _
        "GROUP BY MovimentosContaCorrente.DataMovimento, TitulosPag.Fornecedor ORDER BY MovimentosContaCorrente.DataMovimento, TitulosPag.Fornecedor", dtDataMovto, lFornecedor, dValor, STATUS_EXCLUIDO, objFluxo.dtDataBase, objFluxo.dtDataDadosReais, objFluxo.dtDataBase, objFluxo.lNumMovCta)
    Else
        lErro = Comando_Executar(lComando(1), "SELECT MovimentosContaCorrente.DataMovimento, TitulosPag.Fornecedor, " & _
        "Sum (BaixasParcPag.ValorBaixado + BaixasParcPag.ValorMulta + BaixasParcPag.ValorJuros - BaixasParcPag.ValorDesconto) " & _
        "From BaixasPag, BaixasParcPag, ParcelasPag, TitulosPag, MovimentosContaCorrente " & _
        "WHERE BaixasPag.Motivo<>2 AND BaixasPag.NumIntBaixa = BaixasParcPag.NumIntBaixa AND BaixasParcPag.Status <> ? AND BaixasParcPag.NumIntParcela = ParcelasPag.NumIntDoc AND ParcelasPag.NumIntTitulo = TitulosPag.NumIntDoc " & _
        "AND TitulosPag.FilialEmpresa = ? AND MovimentosContaCorrente.DataMovimento >= ? AND MovimentosContaCorrente.DataMovimento <= ? AND BaixasPag.NumMovCta = MovimentosContaCorrente.NumMovto AND NOT(DataMovimento = ? AND MovimentosContaCorrente.NumMovto <= ?) " & _
        "GROUP BY MovimentosContaCorrente.DataMovimento, TitulosPag.Fornecedor ORDER BY MovimentosContaCorrente.DataMovimento, TitulosPag.Fornecedor", dtDataMovto, lFornecedor, dValor, STATUS_EXCLUIDO, objFluxo.iFilialEmpresa, objFluxo.dtDataBase, objFluxo.dtDataDadosReais, objFluxo.dtDataBase, objFluxo.lNumMovCta)
    End If

    If lErro <> AD_SQL_SUCESSO Then Error 7564

    lErro = Comando_BuscarProximo(lComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7565

    Do While lErro <> AD_SQL_SEM_DADOS
       
        'processa registro
        lErro = Fluxo_ObterDadosReais_Pagtos2(objFluxo.lFluxoId, lFornecedor, dtDataMovto, -dValor, lComando(2), lComando(3), lComando(4), lComando(5))
        If lErro <> SUCESSO Then Error 7566

        'le o proximo registro
        lErro = Comando_BuscarProximo(lComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7567

    Loop

    For i = 1 To 5
        lErro = Comando_Fechar(lComando(i))
    Next

    Fluxo_ObterDadosReais_Pagtos1 = SUCESSO

    Exit Function

Erro_Fluxo_ObterDadosReais_Pagtos1:

    Fluxo_ObterDadosReais_Pagtos1 = Err

    Select Case Err

        Case 7566

        Case 7564, 7565, 7567
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PAGAMENTOS_PARA_FLUXO", Err)

        Case 7568
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148091)

    End Select

    For i = 1 To 5
        Call Comando_Fechar(lComando(i))
    Next

    Exit Function

End Function

Private Function Fluxo_ObterDadosReais_Pagtos2(ByVal lFluxoId As Long, ByVal lFornecedor As Long, ByVal dtDataMovto As Date, ByVal dValor As Double, ByVal lComandoSel As Long, ByVal lComandoMod As Long, ByVal lComandoIns As Long, ByVal lComandoDadosForn As Long) As Long
'processa o movto de um fornecedor numa data
Dim lErro As Long, iTipoFornecedor As Integer, tFluxoForn As typeFluxoForn, objFornecedor As New ClassFornecedor
On Error GoTo Erro_Fluxo_ObterDadosReais_Pagtos2

    'ver se o registro já existe
    lErro = Comando_ExecutarPos(lComandoSel, "SELECT TipoFornecedor FROM FluxoForn WHERE FluxoId = ? AND TipoReg = 0 AND Fornecedor = ? AND Data = ?", 0, iTipoFornecedor, lFluxoId, lFornecedor, dtDataMovto)
    If lErro <> AD_SQL_SUCESSO Then Error 7569

    lErro = Comando_BuscarProximo(lComandoSel)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7570

    'se nao existe registro a ser alterado...
    If lErro <> AD_SQL_SUCESSO Then

        tFluxoForn.dtData = dtDataMovto
        tFluxoForn.dTotalAjustado = 0
        tFluxoForn.dTotalReal = dValor
        tFluxoForn.dTotalSistema = 0
        tFluxoForn.iTipoReg = FLUXOANALITICO_TIPOREG_PAGTO
        tFluxoForn.lFluxoId = lFluxoId
        tFluxoForn.lFornecedor = lFornecedor

        objFornecedor.lCodigo = lFornecedor
        lErro = CF("Fornecedor_ObterDadosBasicos", objFornecedor, lComandoDadosForn)
        If lErro <> SUCESSO Then Error 7571

        tFluxoForn.iTipoFornecedor = objFornecedor.iTipo
        tFluxoForn.sNomeReduzido = objFornecedor.sNomeReduzido

        lErro = FluxoForn_Inserir(tFluxoForn, lComandoIns)
        If lErro <> SUCESSO Then Error 7572

    Else

        lErro = Comando_ExecutarPos(lComandoMod, "UPDATE FluxoForn SET TotalReal = TotalReal + ?", lComandoSel, dValor)
        If lErro <> AD_SQL_SUCESSO Then Error 7573

    End If

    Fluxo_ObterDadosReais_Pagtos2 = SUCESSO

    Exit Function

Erro_Fluxo_ObterDadosReais_Pagtos2:

    Fluxo_ObterDadosReais_Pagtos2 = Err

    Select Case Err

        Case 7569, 7570
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FLUXOFORN", Err)

        Case 7571, 7572

        Case 7573
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_FLUXOFORN", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148092)

    End Select

    Exit Function

End Function

Function Fluxo_ObterDadosReais_Pagtos3(ByVal objFluxo As ClassFluxo) As Long
'obtem dados de pagtos de titulos baixados

Dim i As Integer, lErro As Long, lComando(1 To 5) As Long, dtDataMovto As Date, lFornecedor As Long, dValor As Double

On Error GoTo Erro_Fluxo_ObterDadosReais_Pagtos3

    For i = 1 To 5
        lComando(i) = Comando_Abrir()
        If lComando(i) = 0 Then Error 7574
    Next

    'ler pagtos de titulos baixados
    'removido motivo 2 porque adiantamento são lidos em Fluxo_ObterDadosReais_Pagtos5
    If (objFluxo.iFilialEmpresa = EMPRESA_TODA) Then
        lErro = Comando_Executar(lComando(1), "SELECT MovimentosContaCorrente.DataMovimento, TitulosPagBaixados.Fornecedor, " & _
        "Sum (BaixasParcPag.ValorBaixado + BaixasParcPag.ValorMulta + BaixasParcPag.ValorJuros - BaixasParcPag.ValorDesconto) " & _
        "From BaixasPag, BaixasParcPag, ParcelasPagBaixadas, TitulosPagBaixados, MovimentosContaCorrente " & _
        "WHERE BaixasPag.Motivo<>2 AND BaixasPag.NumIntBaixa = BaixasParcPag.NumIntBaixa AND BaixasParcPag.Status <> ? AND BaixasParcPag.NumIntParcela = ParcelasPagBaixadas.NumIntDoc AND ParcelasPagBaixadas.NumIntTitulo = TitulosPagBaixados.NumIntDoc " & _
        "AND MovimentosContaCorrente.DataMovimento >= ? AND MovimentosContaCorrente.DataMovimento <= ? AND BaixasPag.NumMovCta = MovimentosContaCorrente.NumMovto AND NOT(DataMovimento = ? AND MovimentosContaCorrente.NumMovto <= ?) " & _
        "GROUP BY MovimentosContaCorrente.DataMovimento, TitulosPagBaixados.Fornecedor ORDER BY MovimentosContaCorrente.DataMovimento, TitulosPagBaixados.Fornecedor", dtDataMovto, lFornecedor, dValor, STATUS_EXCLUIDO, objFluxo.dtDataBase, objFluxo.dtDataDadosReais, objFluxo.dtDataBase, objFluxo.lNumMovCta)
    Else
        lErro = Comando_Executar(lComando(1), "SELECT MovimentosContaCorrente.DataMovimento, TitulosPagBaixados.Fornecedor, " & _
        "Sum (BaixasParcPag.ValorBaixado + BaixasParcPag.ValorMulta + BaixasParcPag.ValorJuros - BaixasParcPag.ValorDesconto) " & _
        "From BaixasPag, BaixasParcPag, ParcelasPagBaixadas, TitulosPagBaixados, MovimentosContaCorrente " & _
        "WHERE BaixasPag.Motivo<>2 AND BaixasPag.NumIntBaixa = BaixasParcPag.NumIntBaixa AND BaixasParcPag.Status <> ? AND BaixasParcPag.NumIntParcela = ParcelasPagBaixadas.NumIntDoc AND ParcelasPagBaixadas.NumIntTitulo = TitulosPagBaixados.NumIntDoc " & _
        "AND TitulosPagBaixados.FilialEmpresa = ? AND MovimentosContaCorrente.DataMovimento >= ? AND MovimentosContaCorrente.DataMovimento <= ? AND BaixasPag.NumMovCta = MovimentosContaCorrente.NumMovto AND NOT(DataMovimento = ? AND MovimentosContaCorrente.NumMovto <= ?) " & _
        "GROUP BY MovimentosContaCorrente.DataMovimento, TitulosPagBaixados.Fornecedor ORDER BY MovimentosContaCorrente.DataMovimento, TitulosPagBaixados.Fornecedor", dtDataMovto, lFornecedor, dValor, STATUS_EXCLUIDO, objFluxo.iFilialEmpresa, objFluxo.dtDataBase, objFluxo.dtDataDadosReais, objFluxo.dtDataBase, objFluxo.lNumMovCta)
    End If
    If lErro <> AD_SQL_SUCESSO Then Error 7575

    lErro = Comando_BuscarProximo(lComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7576

    Do While lErro <> AD_SQL_SEM_DADOS

        'processa registro
        lErro = Fluxo_ObterDadosReais_Pagtos2(objFluxo.lFluxoId, lFornecedor, dtDataMovto, -dValor, lComando(2), lComando(3), lComando(4), lComando(5))
        If lErro <> SUCESSO Then Error 7577

        'le o proximo registro
        lErro = Comando_BuscarProximo(lComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7578

    Loop

    For i = 1 To 5
        lErro = Comando_Fechar(lComando(i))
    Next

    Fluxo_ObterDadosReais_Pagtos3 = SUCESSO

    Exit Function

Erro_Fluxo_ObterDadosReais_Pagtos3:

    Fluxo_ObterDadosReais_Pagtos3 = Err

    Select Case Err

        Case 7577

        Case 7575, 7576, 7578
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PAGAMENTOS_PARA_FLUXO", Err)

        Case 7574
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148093)

    End Select

    For i = 1 To 5
        Call Comando_Fechar(lComando(i))
    Next

    Exit Function

End Function


Function Fluxo_ObterDadosReais_Pagtos4(ByVal objFluxo As ClassFluxo) As Long
'obtem dados de creditos com fornecedores (CreditosPagForn) utilizados no periodo indicado

Dim i As Integer, lErro As Long, lComando(1 To 5) As Long, lFornecedor As Long, dtDataMovto As Date, dValor As Double

On Error GoTo Erro_Fluxo_ObterDadosReais_Pagtos4

    For i = 1 To 5
        lComando(i) = Comando_Abrir()
        If lComando(i) = 0 Then Error 7582
    Next

    If (objFluxo.iFilialEmpresa = EMPRESA_TODA) Then
        lErro = Comando_Executar(lComando(1), "SELECT BaixasPag.Data, CreditosPagForn.Fornecedor, " & _
        "Sum (BaixasParcPag.ValorBaixado + BaixasParcPag.ValorMulta + BaixasParcPag.ValorJuros - BaixasParcPag.ValorDesconto) " & _
        "FROM BaixasPag, BaixasParcPag, CreditosPagForn " & _
        "WHERE BaixasPag.NumIntDoc = CreditosPagForn.NumIntDoc AND BaixasPag.NumIntBaixa = BaixasParcPag.NumIntBaixa AND BaixasParcPag.Status <> ? " & _
        "AND BaixasPag.Data >= ? AND BaixasPag.Data <= ? AND NOT(BaixasPag.Data = ? AND BaixasPag.NumIntBaixa <= ?) " & _
        "GROUP BY BaixasPag.Data, CreditosPagForn.Fornecedor ORDER BY BaixasPag.Data, CreditosPagForn.Fornecedor", dtDataMovto, lFornecedor, dValor, STATUS_EXCLUIDO, objFluxo.dtDataBase, objFluxo.dtDataDadosReais, objFluxo.dtDataBase, objFluxo.lNumIntBaixaPag)
    Else
        lErro = Comando_Executar(lComando(1), "SELECT BaixasPag.Data, CreditosPagForn.Fornecedor, " & _
        "Sum (BaixasParcPag.ValorBaixado + BaixasParcPag.ValorMulta + BaixasParcPag.ValorJuros - BaixasParcPag.ValorDesconto) " & _
        "FROM BaixasPag, BaixasParcPag, CreditosPagForn " & _
        "WHERE BaixasPag.NumIntDoc = CreditosPagForn.NumIntDoc AND BaixasPag.NumIntBaixa = BaixasParcPag.NumIntBaixa AND BaixasParcPag.Status <> ? " & _
        "AND CreditosPagForn.FilialEmpresa = ? AND BaixasPag.Data >= ? AND BaixasPag.Data <= ? AND NOT(BaixasPag.Data = ? AND BaixasPag.NumIntBaixa <= ?) " & _
        "GROUP BY BaixasPag.Data, CreditosPagForn.Fornecedor ORDER BY BaixasPag.Data, CreditosPagForn.Fornecedor", dtDataMovto, lFornecedor, dValor, STATUS_EXCLUIDO, objFluxo.iFilialEmpresa, objFluxo.dtDataBase, objFluxo.dtDataDadosReais, objFluxo.dtDataBase, objFluxo.lNumIntBaixaPag)
    End If
    If lErro <> AD_SQL_SUCESSO Then Error 7583

    lErro = Comando_BuscarProximo(lComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7584

    Do While lErro <> AD_SQL_SEM_DADOS

        'processa registro
        dValor = -dValor
        lErro = Fluxo_ObterDadosReais_Pagtos2(objFluxo.lFluxoId, lFornecedor, dtDataMovto, dValor, lComando(2), lComando(3), lComando(4), lComando(5))
        If lErro <> SUCESSO Then Error 7585

        'le o proximo registro
        lErro = Comando_BuscarProximo(lComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7586

    Loop

    For i = 1 To 5
        Call Comando_Fechar(lComando(i))
    Next

    Fluxo_ObterDadosReais_Pagtos4 = SUCESSO

    Exit Function

Erro_Fluxo_ObterDadosReais_Pagtos4:

    Fluxo_ObterDadosReais_Pagtos4 = Err

    Select Case Err

        Case 7585

        Case 7583, 7584, 7586
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CREDPAGFORN_PARA_FLUXO", Err)

        Case 7582
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148094)

    End Select

    For i = 1 To 5
        Call Comando_Fechar(lComando(i))
    Next

    Exit Function

End Function

Function Fluxo_ObterDadosReais_Pagtos5(ByVal objFluxo As ClassFluxo) As Long
'obtem dados de pagamentos antecipados com fornecedores (tabela PagtosAntecipados) utilizados no periodo indicado

Dim i As Integer, lErro As Long, lComando(1 To 5) As Long, lFornecedor As Long, dtDataMovto As Date, dValor As Double

On Error GoTo Erro_Fluxo_ObterDadosReais_Pagtos5

    For i = 1 To 5
        lComando(i) = Comando_Abrir()
        If lComando(i) = 0 Then Error 7591
    Next

    If (objFluxo.iFilialEmpresa = EMPRESA_TODA) Then
        lErro = Comando_Executar(lComando(1), "SELECT DataMovimento, PagtosAntecipados.Fornecedor, " & _
        "Sum (BaixasParcPag.ValorBaixado + BaixasParcPag.ValorMulta + BaixasParcPag.ValorJuros - BaixasParcPag.ValorDesconto) " & _
        "FROM PagtosAntecipados, MovimentosContaCorrente, BaixasPag, BaixasParcPag " & _
        "WHERE PagtosAntecipados.NumMovto = MovimentosContaCorrente.NumMovto AND MovimentosContaCorrente.NumMovto = BaixasPag.NumMovCta AND BaixasPag.NumIntBaixa = BaixasParcPag.NumIntBaixa AND BaixasParcPag.Status <> ? " & _
        "AND DataMovimento >= ? AND DataMovimento <= ? AND NOT(DataMovimento = ? AND MovimentosContaCorrente.NumMovto <= ?) " & _
        "GROUP BY DataMovimento, PagtosAntecipados.Fornecedor ORDER BY DataMovimento, PagtosAntecipados.Fornecedor", dtDataMovto, lFornecedor, dValor, STATUS_EXCLUIDO, objFluxo.dtDataBase, objFluxo.dtDataDadosReais, objFluxo.dtDataBase, objFluxo.lNumMovCta)
    Else
        lErro = Comando_Executar(lComando(1), "SELECT DataMovimento, PagtosAntecipados.Fornecedor, " & _
        "Sum (BaixasParcPag.ValorBaixado + BaixasParcPag.ValorMulta + BaixasParcPag.ValorJuros - BaixasParcPag.ValorDesconto) " & _
        "FROM PagtosAntecipados, MovimentosContaCorrente, BaixasPag, BaixasParcPag " & _
        "WHERE PagtosAntecipados.NumMovto = MovimentosContaCorrente.NumMovto AND MovimentosContaCorrente.NumMovto = BaixasPag.NumMovCta AND BaixasPag.NumIntBaixa = BaixasParcPag.NumIntBaixa AND BaixasParcPag.Status <> ? " & _
        "AND MovimentosContaCorrente.FilialEmpresa = ? AND DataMovimento >= ? AND DataMovimento <= ? AND NOT(DataMovimento = ? AND MovimentosContaCorrente.NumMovto <= ?) " & _
        "GROUP BY DataMovimento, PagtosAntecipados.Fornecedor ORDER BY DataMovimento, PagtosAntecipados.Fornecedor", dtDataMovto, lFornecedor, dValor, STATUS_EXCLUIDO, objFluxo.iFilialEmpresa, objFluxo.dtDataBase, objFluxo.dtDataDadosReais, objFluxo.dtDataBase, objFluxo.lNumMovCta)
    End If
    If lErro <> AD_SQL_SUCESSO Then Error 7592

    lErro = Comando_BuscarProximo(lComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7593

    Do While lErro <> AD_SQL_SEM_DADOS

        'processa registro
        dValor = -dValor
        lErro = Fluxo_ObterDadosReais_Pagtos2(objFluxo.lFluxoId, lFornecedor, dtDataMovto, dValor, lComando(2), lComando(3), lComando(4), lComando(5))
        If lErro <> SUCESSO Then Error 7595

        'le o proximo registro
        lErro = Comando_BuscarProximo(lComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7594

    Loop

    For i = 1 To 5
        Call Comando_Fechar(lComando(i))
    Next

    Fluxo_ObterDadosReais_Pagtos5 = SUCESSO

    Exit Function

Erro_Fluxo_ObterDadosReais_Pagtos5:

    Fluxo_ObterDadosReais_Pagtos5 = Err

    Select Case Err

        Case 7595

        Case 7592, 7593, 7594
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PAGTOANTEC_PARA_FLUXO", Err)

        Case 7591
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148095)

    End Select

    For i = 1 To 5
        Call Comando_Fechar(lComando(i))
    Next

    Exit Function

End Function

Function Fluxo_ObterDadosReais_TotalizaPorTipoForn(ByVal objFluxo As ClassFluxo, ByVal iTipoReg As Integer)
'totaliza pagtos (ou recebtos, depende de iTipoReg) por tipo de fornecedor e grava o resultado em FluxoTipoForn
Dim i As Integer, lErro As Long, lComando(1 To 11) As Long
Dim iTipoForn As Integer, dtData As Date, dValor As Double, dtDataAnterior As Date, dValorDia As Double
On Error GoTo Erro_Fluxo_ObterDadosReais_TotalizaPorTipoForn

    For i = 1 To 11
        lComando(i) = Comando_Abrir()
        If lComando(i) = 0 Then Error 7604
    Next

    dtDataAnterior = DATA_NULA

    lErro = Comando_Executar(lComando(1), "SELECT Data, TipoFornecedor, SUM(TotalReal) FROM FluxoForn WHERE FluxoId = ? AND TipoReg = ? AND TipoFornecedor <> 0 GROUP BY Data, TipoFornecedor ORDER BY Data, TipoFornecedor", dtData, iTipoForn, dValor, objFluxo.lFluxoId, iTipoReg)
    If lErro <> AD_SQL_SUCESSO Then Error 7601

    'Lê um registro
    lErro = Comando_BuscarProximo(lComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7665

    'Enquanto a tabela tiver dados
    Do While lErro <> AD_SQL_SEM_DADOS

        'se está comecando a processar um dia...
        If dtDataAnterior <> dtData Then

            If dtDataAnterior <> DATA_NULA Then
                If iTipoReg = FLUXOANALITICO_TIPOREG_PAGTO Then
                    lErro = Fluxo_ObterDadosReais_AtualizarDiaPag(objFluxo, dtDataAnterior, -dValorDia, lComando(6), lComando(7), lComando(8))
                Else
                    lErro = Fluxo_ObterDadosReais_AtualizarDiaRec(objFluxo, dtDataAnterior, dValorDia, lComando(9), lComando(10), lComando(11))
                End If
                If lErro <> SUCESSO Then Error 7666
            End If

            dtDataAnterior = dtData
            'dValorDia = dValor
            dValorDia = 0
        End If
        dValorDia = dValorDia + dValor

        'processa tipo forn
        lErro = Fluxo_ObterDadosReais_AtualizaFluxoTipoForn(objFluxo, iTipoReg, iTipoForn, dtData, dValor, lComando(2), lComando(3), lComando(4), lComando(5))
        If lErro <> SUCESSO Then Error 7602

        'Lê o próximo registro
        lErro = Comando_BuscarProximo(lComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7603

    Loop

    If dtDataAnterior <> DATA_NULA Then
        If iTipoReg = FLUXOANALITICO_TIPOREG_PAGTO Then
            lErro = Fluxo_ObterDadosReais_AtualizarDiaPag(objFluxo, dtDataAnterior, -dValorDia, lComando(6), lComando(7), lComando(8))
        Else
            lErro = Fluxo_ObterDadosReais_AtualizarDiaRec(objFluxo, dtDataAnterior, dValorDia, lComando(9), lComando(10), lComando(11))
        End If
        If lErro <> SUCESSO Then Error 7667
    End If

    For i = 1 To 11
        Call Comando_Fechar(lComando(i))
    Next

    Fluxo_ObterDadosReais_TotalizaPorTipoForn = SUCESSO

    Exit Function

Erro_Fluxo_ObterDadosReais_TotalizaPorTipoForn:

    Fluxo_ObterDadosReais_TotalizaPorTipoForn = Err

    Select Case Err

        Case 7604
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 7601, 7603, 7665
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FLUXOFORN2", Err)

        Case 7602, 7666, 7667

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148096)

    End Select

    For i = 1 To 8
        Call Comando_Fechar(lComando(i))
    Next

    Exit Function

End Function

Function Fluxo_ObterDadosReais_AtualizaFluxoTipoForn(ByVal objFluxo As ClassFluxo, ByVal iTipoReg As Integer, ByVal iTipoForn As Integer, ByVal dtData As Date, ByVal dValor As Double, ByVal lComandoSel As Long, ByVal lComandoMod As Long, ByVal lComandoIns As Long, ByVal lComandoTipoForn As Long) As Long
'atualiza dados reais de um tipo de fornecedor baseado nos dados passados como parametro

Dim lErro As Long, dValorAnterior As Double, sDescTipoForn As String
Dim objTipoFornecedor As New ClassTipoFornecedor
Dim objTipoCliente As New ClassTipoCliente
On Error GoTo Erro_Fluxo_ObterDadosReais_AtualizaFluxoTipoForn

    lErro = Comando_ExecutarPos(lComandoSel, "SELECT TotalReal FROM FluxoTipoForn WHERE FluxoId = ? AND TipoReg = ? AND TipoFornecedor = ? AND Data = ?", 0, dValorAnterior, objFluxo.lFluxoId, iTipoReg, iTipoForn, dtData)
    If lErro <> AD_SQL_SUCESSO Then Error 7596

    lErro = Comando_BuscarProximo(lComandoSel)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7597

    'se o registro nao existe
    If lErro = AD_SQL_SEM_DADOS Then

        Select Case iTipoReg

            Case FLUXOANALITICO_TIPOREG_PAGTO

                objTipoFornecedor.iCodigo = iTipoForn
                lErro = CF("TipoFornecedor_Le", objTipoFornecedor)
                If lErro <> SUCESSO Then Error 7598

                sDescTipoForn = objTipoFornecedor.sDescricao

            Case FLUXOANALITICO_TIPOREG_RECEBTO

                objTipoCliente.iCodigo = iTipoForn
                lErro = CF("TipoCliente_Le", objTipoCliente)
                If lErro <> SUCESSO Then Error 7639

                sDescTipoForn = objTipoCliente.sDescricao

        End Select

        lErro = Comando_Executar(lComandoIns, "INSERT INTO FluxoTipoForn (FluxoId, TipoReg, TipoFornecedor, Data, TotalSistema, TotalAjustado, TotalReal, Descricao) VALUES (?,?,?,?,?,?,?,?)", objFluxo.lFluxoId, iTipoReg, iTipoForn, dtData, 0, 0, dValor, sDescTipoForn)
        If lErro <> AD_SQL_SUCESSO Then Error 7599
    Else
        'alterar
        lErro = Comando_ExecutarPos(lComandoMod, "UPDATE FluxoTipoForn SET TotalReal = ?", lComandoSel, dValor)
        If lErro <> AD_SQL_SUCESSO Then Error 7600
    End If

    Fluxo_ObterDadosReais_AtualizaFluxoTipoForn = SUCESSO

    Exit Function

Erro_Fluxo_ObterDadosReais_AtualizaFluxoTipoForn:

    Fluxo_ObterDadosReais_AtualizaFluxoTipoForn = Err

    Select Case Err
        Case 7598, 7639

        Case 7596, 7597
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FLUXOTIPOFORN2", Err)

        Case 7599
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FLUXOTIPOFORN", Err)

        Case 7600
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_FLUXOTIPOFORN", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148097)

    End Select

    Exit Function

End Function


Function Fluxo_ObterDadosReais_Recebtos(ByVal objFluxo As ClassFluxo) As Long
'obtem dados de recebiemntos
Dim lErro As Long
On Error GoTo Erro_Fluxo_ObterDadosReais_Recebtos

    'ler recebtos de titulos nao baixados
    lErro = Fluxo_ObterDadosReais_Recebtos1(objFluxo)
    If lErro <> SUCESSO Then Error 7604

    'ler recebtos de titulos baixados
    lErro = Fluxo_ObterDadosReais_Recebtos3(objFluxo)
    If lErro <> SUCESSO Then Error 7605

    'Baixas por DebitosRecCli
    lErro = Fluxo_ObterDadosReais_Recebtos4(objFluxo)
    If lErro <> SUCESSO Then Error 7606

    'Baixas por recebtos antecipados
    lErro = Fluxo_ObterDadosReais_Recebtos5(objFluxo)
    If lErro <> SUCESSO Then Error 7607

    Fluxo_ObterDadosReais_Recebtos = SUCESSO

    Exit Function

Erro_Fluxo_ObterDadosReais_Recebtos:

    Fluxo_ObterDadosReais_Recebtos = Err

    Select Case Err

        Case 7604 To 7607

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148098)

    End Select

    Exit Function

End Function

Function Fluxo_ObterDadosReais_Recebtos1(ByVal objFluxo As ClassFluxo) As Long
'obtem dados de recebtos de titulos nao baixados

Dim i As Integer, lErro As Long, lComando(1 To 5) As Long, lCliente As Long, dtDataMovto As Date, dValor As Double

On Error GoTo Erro_Fluxo_ObterDadosReais_Recebtos1

    For i = 1 To 5
        lComando(i) = Comando_Abrir()
        If lComando(i) = 0 Then Error 7608
    Next

    'ler recebtos de titulos nao baixados
    If (objFluxo.iFilialEmpresa = EMPRESA_TODA) Then
        lErro = Comando_Executar(lComando(1), "SELECT MovimentosContaCorrente.DataMovimento, TitulosRec.Cliente, " & _
        "Sum (BaixasParcRec.ValorBaixado + BaixasParcRec.ValorMulta + BaixasParcRec.ValorJuros - BaixasParcRec.ValorDesconto) " & _
        "From BaixasRec, BaixasParcRec, ParcelasRec, TitulosRec, MovimentosContaCorrente " & _
        "WHERE BaixasRec.NumIntBaixa = BaixasParcRec.NumIntBaixa AND BaixasParcRec.Status <> ? AND BaixasParcRec.NumIntParcela = ParcelasRec.NumIntDoc AND ParcelasRec.NumIntTitulo = TitulosRec.NumIntDoc " & _
        "AND MovimentosContaCorrente.DataMovimento >= ? AND MovimentosContaCorrente.DataMovimento <= ? AND BaixasRec.NumMovCta = MovimentosContaCorrente.NumMovto AND NOT(DataMovimento = ? AND MovimentosContaCorrente.NumMovto <= ?) " & _
        "GROUP BY MovimentosContaCorrente.DataMovimento, TitulosRec.Cliente ORDER BY MovimentosContaCorrente.DataMovimento, TitulosRec.Cliente", dtDataMovto, lCliente, dValor, STATUS_EXCLUIDO, objFluxo.dtDataBase, objFluxo.dtDataDadosReais, objFluxo.dtDataBase, objFluxo.lNumMovCta)
    Else
        lErro = Comando_Executar(lComando(1), "SELECT MovimentosContaCorrente.DataMovimento, TitulosRec.Cliente, " & _
        "Sum (BaixasParcRec.ValorBaixado + BaixasParcRec.ValorMulta + BaixasParcRec.ValorJuros - BaixasParcRec.ValorDesconto) " & _
        "From BaixasRec, BaixasParcRec, ParcelasRec, TitulosRec, MovimentosContaCorrente " & _
        "WHERE BaixasRec.NumIntBaixa = BaixasParcRec.NumIntBaixa AND BaixasParcRec.Status <> ? AND BaixasParcRec.NumIntParcela = ParcelasRec.NumIntDoc AND ParcelasRec.NumIntTitulo = TitulosRec.NumIntDoc " & _
        "AND TitulosRec.FilialEmpresa = ? AND MovimentosContaCorrente.DataMovimento >= ? AND MovimentosContaCorrente.DataMovimento <= ?  AND BaixasRec.NumMovCta = MovimentosContaCorrente.NumMovto AND NOT(DataMovimento = ? AND MovimentosContaCorrente.NumMovto <= ?) " & _
        "GROUP BY MovimentosContaCorrente.DataMovimento, TitulosRec.Cliente ORDER BY MovimentosContaCorrente.DataMovimento, TitulosRec.Cliente", dtDataMovto, lCliente, dValor, STATUS_EXCLUIDO, objFluxo.iFilialEmpresa, objFluxo.dtDataBase, objFluxo.dtDataDadosReais, objFluxo.dtDataBase, objFluxo.lNumMovCta)
    End If
    If lErro <> AD_SQL_SUCESSO Then Error 7609

    lErro = Comando_BuscarProximo(lComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7610

    Do While lErro <> AD_SQL_SEM_DADOS

        'processa registro
        lErro = Fluxo_ObterDadosReais_Recebtos2(objFluxo.lFluxoId, lCliente, dtDataMovto, dValor, lComando(2), lComando(3), lComando(4), lComando(5))
        If lErro <> SUCESSO Then Error 7612

        'le o proximo registro
        lErro = Comando_BuscarProximo(lComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7611

    Loop

    For i = 1 To 5
        lErro = Comando_Fechar(lComando(i))
    Next

    Fluxo_ObterDadosReais_Recebtos1 = SUCESSO

    Exit Function

Erro_Fluxo_ObterDadosReais_Recebtos1:

    Fluxo_ObterDadosReais_Recebtos1 = Err

    Select Case Err

        Case 7612

        Case 7609 To 7611
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RECEBTOS_PARA_FLUXO", Err)

        Case 7608
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148099)

    End Select

    For i = 1 To 5
        Call Comando_Fechar(lComando(i))
    Next

    Exit Function

End Function

Function Fluxo_ObterDadosReais_Recebtos2(ByVal lFluxoId As Long, ByVal lCliente As Long, ByVal dtDataMovto As Date, ByVal dValor As Double, ByVal lComandoSel As Long, ByVal lComandoMod As Long, ByVal lComandoIns As Long, ByVal lComandoDadosCli As Long) As Long
'processa o movto de um cliente numa data
Dim lErro As Long, iTipoCliente As Integer, objCliente As New ClassCliente
Dim tFluxoForn As typeFluxoForn
On Error GoTo Erro_Fluxo_ObterDadosReais_Recebtos2

    'ver se o registro já existe
    lErro = Comando_ExecutarPos(lComandoSel, "SELECT TipoFornecedor FROM FluxoForn WHERE FluxoId = ? AND TipoReg = 1 AND Fornecedor = ? AND Data = ?", 0, iTipoCliente, lFluxoId, lCliente, dtDataMovto)
    If lErro <> AD_SQL_SUCESSO Then Error 7617

    lErro = Comando_BuscarProximo(lComandoSel)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7618

    'se nao existe registro a ser alterado...
    If lErro <> AD_SQL_SUCESSO Then

        tFluxoForn.dtData = dtDataMovto
        tFluxoForn.dTotalAjustado = 0
        tFluxoForn.dTotalReal = dValor
        tFluxoForn.dTotalSistema = 0
        tFluxoForn.iTipoReg = FLUXOANALITICO_TIPOREG_RECEBTO
        tFluxoForn.lFluxoId = lFluxoId
        tFluxoForn.lFornecedor = lCliente

        objCliente.lCodigo = lCliente
        lErro = CF("Cliente_ObterDadosBasicos", objCliente)
        If lErro <> SUCESSO Then Error 7619

        tFluxoForn.iTipoFornecedor = objCliente.iTipo
        tFluxoForn.sNomeReduzido = objCliente.sNomeReduzido

        lErro = FluxoForn_Inserir(tFluxoForn, lComandoIns)
        If lErro <> SUCESSO Then Error 7620

    Else

        lErro = Comando_ExecutarPos(lComandoMod, "UPDATE FluxoForn SET TotalReal = TotalReal + ?", lComandoSel, dValor)
        If lErro <> AD_SQL_SUCESSO Then Error 7621

    End If

    Fluxo_ObterDadosReais_Recebtos2 = SUCESSO

    Exit Function

Erro_Fluxo_ObterDadosReais_Recebtos2:

    Fluxo_ObterDadosReais_Recebtos2 = Err

    Select Case Err

        Case 7617, 7618
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FLUXOFORN", Err)

        Case 7619, 7620

        Case 7621
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_FLUXOFORN", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148100)

    End Select

    Exit Function

End Function

Function Fluxo_ObterDadosReais_Recebtos3(ByVal objFluxo As ClassFluxo) As Long
'obtem dados de Recebtos de titulos baixados

Dim i As Integer, lErro As Long, lComando(1 To 5) As Long, dtDataMovto As Date, lCliente As Long, dValor As Double

On Error GoTo Erro_Fluxo_ObterDadosReais_Recebtos3

    For i = 1 To 5
        lComando(i) = Comando_Abrir()
        If lComando(i) = 0 Then Error 7622
    Next

    'ler Recebtos de titulos baixados
    If (objFluxo.iFilialEmpresa = EMPRESA_TODA) Then
        lErro = Comando_Executar(lComando(1), "SELECT MovimentosContaCorrente.DataMovimento, TitulosRecBaixados.Cliente, " & _
        "Sum (BaixasParcRec.ValorBaixado + BaixasParcRec.ValorMulta + BaixasParcRec.ValorJuros - BaixasParcRec.ValorDesconto) " & _
        "From BaixasRec, BaixasParcRec, ParcelasRecBaixadas, TitulosRecBaixados, MovimentosContaCorrente " & _
        "WHERE BaixasRec.NumIntBaixa = BaixasParcRec.NumIntBaixa AND BaixasParcRec.Status <> ? AND BaixasParcRec.NumIntParcela = ParcelasRecBaixadas.NumIntDoc AND ParcelasRecBaixadas.NumIntTitulo = TitulosRecBaixados.NumIntDoc " & _
        "AND MovimentosContaCorrente.DataMovimento >= ? AND MovimentosContaCorrente.DataMovimento <= ?  AND BaixasRec.NumMovCta = MovimentosContaCorrente.NumMovto AND NOT(DataMovimento = ? AND MovimentosContaCorrente.NumMovto <= ?) " & _
        "GROUP BY MovimentosContaCorrente.DataMovimento, TitulosRecBaixados.Cliente ORDER BY MovimentosContaCorrente.DataMovimento, TitulosRecBaixados.Cliente", dtDataMovto, lCliente, dValor, STATUS_EXCLUIDO, objFluxo.dtDataBase, objFluxo.dtDataDadosReais, objFluxo.dtDataBase, objFluxo.lNumMovCta)
    Else
        lErro = Comando_Executar(lComando(1), "SELECT MovimentosContaCorrente.DataMovimento, TitulosRecBaixados.Cliente, " & _
        "Sum (BaixasParcRec.ValorBaixado + BaixasParcRec.ValorMulta + BaixasParcRec.ValorJuros - BaixasParcRec.ValorDesconto) " & _
        "From BaixasRec, BaixasParcRec, ParcelasRecBaixadas, TitulosRecBaixados, MovimentosContaCorrente " & _
        "WHERE BaixasRec.NumIntBaixa = BaixasParcRec.NumIntBaixa AND BaixasParcRec.Status <> ? AND BaixasParcRec.NumIntParcela = ParcelasRecBaixadas.NumIntDoc AND ParcelasRecBaixadas.NumIntTitulo = TitulosRecBaixados.NumIntDoc " & _
        "AND MovimentosContaCorrente.FilialEmpresa = ? AND MovimentosContaCorrente.DataMovimento >= ? AND MovimentosContaCorrente.DataMovimento <= ?  AND BaixasRec.NumMovCta = MovimentosContaCorrente.NumMovto  AND NOT(DataMovimento = ? AND MovimentosContaCorrente.NumMovto <= ?) " & _
        "GROUP BY MovimentosContaCorrente.DataMovimento, TitulosRecBaixados.Cliente ORDER BY MovimentosContaCorrente.DataMovimento, TitulosRecBaixados.Cliente", dtDataMovto, lCliente, dValor, STATUS_EXCLUIDO, objFluxo.iFilialEmpresa, objFluxo.dtDataBase, objFluxo.dtDataDadosReais, objFluxo.dtDataBase, objFluxo.lNumMovCta)
    End If
    If lErro <> AD_SQL_SUCESSO Then Error 7623

    lErro = Comando_BuscarProximo(lComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7624

    Do While lErro <> AD_SQL_SEM_DADOS

        'processa registro
        lErro = Fluxo_ObterDadosReais_Recebtos2(objFluxo.lFluxoId, lCliente, dtDataMovto, dValor, lComando(2), lComando(3), lComando(4), lComando(5))
        If lErro <> SUCESSO Then Error 7625

        'le o proximo registro
        lErro = Comando_BuscarProximo(lComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7626

    Loop

    For i = 1 To 5
        lErro = Comando_Fechar(lComando(i))
    Next

    Fluxo_ObterDadosReais_Recebtos3 = SUCESSO

    Exit Function

Erro_Fluxo_ObterDadosReais_Recebtos3:

    Fluxo_ObterDadosReais_Recebtos3 = Err

    Select Case Err

        Case 7625

        Case 7623, 7624, 7626
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RECEBTOS_PARA_FLUXO", Err)

        Case 7622
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148101)

    End Select

    For i = 1 To 5
        Call Comando_Fechar(lComando(i))
    Next

    Exit Function

End Function

Function Fluxo_ObterDadosReais_Recebtos4(ByVal objFluxo As ClassFluxo) As Long
'obtem dados de creditos de clientes (DebitosRecCli) utilizados no periodo indicado

Dim i As Integer, lErro As Long, lComando(1 To 5) As Long, lCliente As Long, dtDataMovto As Date, dValor As Double

On Error GoTo Erro_Fluxo_ObterDadosReais_Recebtos4

    For i = 1 To 5
        lComando(i) = Comando_Abrir()
        If lComando(i) = 0 Then Error 7627
    Next

    If (objFluxo.iFilialEmpresa = EMPRESA_TODA) Then
        lErro = Comando_Executar(lComando(1), "SELECT BaixasRec.Data, DebitosRecCli.Cliente, " & _
        "Sum (BaixasParcRec.ValorBaixado + BaixasParcRec.ValorMulta + BaixasParcRec.ValorJuros - BaixasParcRec.ValorDesconto) " & _
        "FROM BaixasRec, BaixasParcRec, DebitosRecCli " & _
        "WHERE BaixasRec.NumIntDoc = DebitosRecCli.NumIntDoc AND BaixasRec.NumIntBaixa = BaixasParcRec.NumIntBaixa AND BaixasParcRec.Status <> ? " & _
        "AND BaixasRec.Data >= ? AND BaixasRec.Data <= ? AND NOT (BaixasRec.Data = ? AND BaixasRec.NumIntBaixa <= ?) " & _
        "GROUP BY BaixasRec.Data, DebitosRecCli.Cliente ORDER BY BaixasRec.Data, DebitosRecCli.Cliente", dtDataMovto, lCliente, dValor, STATUS_EXCLUIDO, objFluxo.dtDataBase, objFluxo.dtDataDadosReais, objFluxo.dtDataBase, objFluxo.lNumIntBaixaRec)
    Else
        lErro = Comando_Executar(lComando(1), "SELECT BaixasRec.Data, DebitosRecCli.Cliente, " & _
        "Sum (BaixasParcRec.ValorBaixado + BaixasParcRec.ValorMulta + BaixasParcRec.ValorJuros - BaixasParcRec.ValorDesconto) " & _
        "FROM BaixasRec, BaixasParcRec, DebitosRecCli " & _
        "WHERE BaixasRec.NumIntDoc = DebitosRecCli.NumIntDoc AND BaixasRec.NumIntBaixa = BaixasParcRec.NumIntBaixa AND BaixasParcRec.Status <> ? " & _
        "AND DebitosRecCli.FilialEmpresa = ? AND BaixasRec.Data >= ? AND BaixasRec.Data <= ? AND NOT (BaixasRec.Data = ? AND BaixasRec.NumIntBaixa <= ?) " & _
        "GROUP BY BaixasRec.Data, DebitosRecCli.Cliente ORDER BY BaixasRec.Data, DebitosRecCli.Cliente", dtDataMovto, lCliente, dValor, STATUS_EXCLUIDO, objFluxo.iFilialEmpresa, objFluxo.dtDataBase, objFluxo.dtDataDadosReais, objFluxo.dtDataBase, objFluxo.lNumIntBaixaRec)
    End If
    If lErro <> AD_SQL_SUCESSO Then Error 7628

    lErro = Comando_BuscarProximo(lComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7629

    Do While lErro <> AD_SQL_SEM_DADOS

        'processa registro
        dValor = -dValor
        lErro = Fluxo_ObterDadosReais_Recebtos2(objFluxo.lFluxoId, lCliente, dtDataMovto, dValor, lComando(2), lComando(3), lComando(4), lComando(5))
        If lErro <> SUCESSO Then Error 7630

        'le o proximo registro
        lErro = Comando_BuscarProximo(lComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7631

    Loop

    For i = 1 To 5
        Call Comando_Fechar(lComando(i))
    Next

    Fluxo_ObterDadosReais_Recebtos4 = SUCESSO

    Exit Function

Erro_Fluxo_ObterDadosReais_Recebtos4:

    Fluxo_ObterDadosReais_Recebtos4 = Err

    Select Case Err

        Case 7630

        Case 7628, 7629, 7631
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_DEBRECCLI_PARA_FLUXO", Err)

        Case 7627
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148102)

    End Select

    For i = 1 To 5
        Call Comando_Fechar(lComando(i))
    Next

    Exit Function

End Function

Function Fluxo_ObterDadosReais_Recebtos5(ByVal objFluxo As ClassFluxo) As Long
'obtem dados de recebimentos antecipados de clientes (tabela RecebAntecipados) utilizados no periodo indicado

Dim i As Integer, lErro As Long, lComando(1 To 5) As Long, lCliente As Long, dtDataMovto As Date, dValor As Double

On Error GoTo Erro_Fluxo_ObterDadosReais_Recebtos5

    For i = 1 To 5
        lComando(i) = Comando_Abrir()
        If lComando(i) = 0 Then Error 7632
    Next

    If (objFluxo.iFilialEmpresa = EMPRESA_TODA) Then
        lErro = Comando_Executar(lComando(1), "SELECT DataMovimento, RecebAntecipados.Cliente, " & _
        "Sum (BaixasParcRec.ValorBaixado + BaixasParcRec.ValorMulta + BaixasParcRec.ValorJuros - BaixasParcRec.ValorDesconto) " & _
        "FROM RecebAntecipados, MovimentosContaCorrente, BaixasRec, BaixasParcRec " & _
        "WHERE RecebAntecipados.NumMovto = MovimentosContaCorrente.NumMovto AND MovimentosContaCorrente.NumMovto = BaixasRec.NumMovCta AND BaixasRec.NumIntBaixa = BaixasParcRec.NumIntBaixa AND BaixasParcRec.Status <> ? " & _
        "AND DataMovimento >= ? AND DataMovimento <= ? AND NOT (DataMovimento = ? AND MovimentosContaCorrente.NumMovto <= ?) " & _
        "GROUP BY DataMovimento, RecebAntecipados.Cliente ORDER BY DataMovimento, RecebAntecipados.Cliente", dtDataMovto, lCliente, dValor, STATUS_EXCLUIDO, objFluxo.dtDataBase, objFluxo.dtDataDadosReais, objFluxo.dtDataBase, objFluxo.lNumMovCta)
    Else
        lErro = Comando_Executar(lComando(1), "SELECT DataMovimento, RecebAntecipados.Cliente, " & _
        "Sum (BaixasParcRec.ValorBaixado + BaixasParcRec.ValorMulta + BaixasParcRec.ValorJuros - BaixasParcRec.ValorDesconto) " & _
        "FROM RecebAntecipados, MovimentosContaCorrente, BaixasRec, BaixasParcRec " & _
        "WHERE RecebAntecipados.NumMovto = MovimentosContaCorrente.NumMovto AND MovimentosContaCorrente.NumMovto = BaixasRec.NumMovCta AND BaixasRec.NumIntBaixa = BaixasParcRec.NumIntBaixa AND BaixasParcRec.Status <> ? " & _
        "AND MovimentosContaCorrente.FilialEmpresa = ? AND DataMovimento >= ? AND DataMovimento <= ? AND NOT (DataMovimento = ? AND MovimentosContaCorrente.NumMovto <= ?) " & _
        "GROUP BY DataMovimento, RecebAntecipados.Cliente ORDER BY DataMovimento, RecebAntecipados.Cliente", dtDataMovto, lCliente, dValor, STATUS_EXCLUIDO, objFluxo.iFilialEmpresa, objFluxo.dtDataBase, objFluxo.dtDataDadosReais, objFluxo.dtDataBase, objFluxo.lNumMovCta)
    End If
    If lErro <> AD_SQL_SUCESSO Then Error 7633

    lErro = Comando_BuscarProximo(lComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7634

    Do While lErro <> AD_SQL_SEM_DADOS

        'processa registro
        lErro = Fluxo_ObterDadosReais_Recebtos2(objFluxo.lFluxoId, lCliente, dtDataMovto, dValor, lComando(2), lComando(3), lComando(4), lComando(5))
        If lErro <> SUCESSO Then Error 7635

        'le o proximo registro
        lErro = Comando_BuscarProximo(lComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7636

    Loop

    For i = 1 To 5
        Call Comando_Fechar(lComando(i))
    Next

    Fluxo_ObterDadosReais_Recebtos5 = SUCESSO

    Exit Function

Erro_Fluxo_ObterDadosReais_Recebtos5:

    Fluxo_ObterDadosReais_Recebtos5 = Err

    Select Case Err

        Case 7635

        Case 7633, 7634, 7636
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RECEBTOANTEC_PARA_FLUXO", Err)

        Case 7632
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148103)

    End Select

    For i = 1 To 5
        Call Comando_Fechar(lComando(i))
    Next

    Exit Function

End Function


Function Fluxo_ObterDadosReais_Outros(ByVal objFluxo As ClassFluxo) As Long
'obter dados de outros tipos de movto ( Saque, Deposito, Aplicacao, Resgate) totalizando por dia

Dim lErro As Long, dtDataMovto As Date, dValor As Double, aiTiposMov(1 To 4)
Dim lComando(1 To 4) As Long, i As Integer

On Error GoTo Erro_Fluxo_ObterDadosReais_Outros

    aiTiposMov(1) = MOVCCI_SAQUE
    aiTiposMov(2) = MOVCCI_DEPOSITO
    aiTiposMov(3) = MOVCCI_APLICACAO
    aiTiposMov(4) = MOVCCI_RESGATE
    'observacao: as transferencias foram desconsideradas pois a soma delas é zero

    For i = 1 To 4
        lComando(i) = Comando_Abrir()
        If lComando(i) = 0 Then Error 7680
    Next

    If (objFluxo.iFilialEmpresa = EMPRESA_TODA) Then
        lErro = Comando_Executar(lComando(1), "SELECT DataMovimento, SUM(Valor) FROM MovimentosContaCorrente WHERE DataMovimento > ? AND DataMovimento <=? AND (Tipo = ? OR Tipo = ? OR Tipo = ? OR Tipo = ?) AND NOT (DataMovimento = ? AND MovimentosContaCorrente.NumMovto <= ?) GROUP BY DataMovimento ORDER BY DataMovimento", dtDataMovto, dValor, objFluxo.dtDataBase, objFluxo.dtDataDadosReais, aiTiposMov(1), aiTiposMov(2), aiTiposMov(3), aiTiposMov(4), objFluxo.dtDataBase, objFluxo.lNumMovCta)
    Else
        lErro = Comando_Executar(lComando(1), "SELECT DataMovimento, SUM(Valor) FROM MovimentosContaCorrente WHERE FilialEmpresa = ? AND DataMovimento > ? AND DataMovimento <=? AND (Tipo = ? OR Tipo = ? OR Tipo = ? OR Tipo = ?) AND NOT (DataMovimento = ? AND MovimentosContaCorrente.NumMovto <= ?) GROUP BY DataMovimento ORDER BY DataMovimento", dtDataMovto, dValor, objFluxo.iFilialEmpresa, objFluxo.dtDataBase, objFluxo.dtDataDadosReais, aiTiposMov(1), aiTiposMov(2), aiTiposMov(3), aiTiposMov(4), objFluxo.dtDataBase, objFluxo.lNumMovCta)
    End If
    If lErro <> AD_SQL_SUCESSO Then Error 7681

    lErro = Comando_BuscarProximo(lComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7682

    Do While lErro <> AD_SQL_SEM_DADOS

        lErro = Fluxo_ObterDadosReais_AtualizarDiaTes(objFluxo, dtDataMovto, dValor, lComando(2), lComando(3), lComando(4))
        If lErro <> SUCESSO Then Error 7683

        lErro = Comando_BuscarProximo(lComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7684

    Loop

    For i = 1 To 4
        Call Comando_Fechar(lComando(i))
    Next

    Fluxo_ObterDadosReais_Outros = SUCESSO

    Exit Function

Erro_Fluxo_ObterDadosReais_Outros:

    Fluxo_ObterDadosReais_Outros = Err

    Select Case Err

        Case 7683

        Case 7681, 7682, 7684
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVSCCIFLUXO", Err)

        Case 7680
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148104)

    End Select

    For i = 1 To 4
        Call Comando_Fechar(lComando(i))
    Next

    Exit Function

End Function

Function Fluxo_ObterDadosReais_Inicializar(ByVal objFluxo As ClassFluxo) As Long
Dim lErro As Long, lComando As Long
On Error GoTo Erro_Fluxo_ObterDadosReais_Inicializar

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 7685

    lErro = Comando_Executar(lComando, "UPDATE Fluxo SET DataDadosReais = ? WHERE FluxoId = ?", gdtDataAtual, objFluxo.lFluxoId)
    If lErro <> AD_SQL_SUCESSO Then Error 21245

    'zerar totais reais de valores obtidos anteriormente

    lErro = Comando_Executar(lComando, "UPDATE FluxoForn SET TotalReal = 0 WHERE FluxoId = ?", objFluxo.lFluxoId)
    If lErro <> AD_SQL_SUCESSO Then Error 7662

    lErro = Comando_Executar(lComando, "UPDATE FluxoTipoAplic SET TotalReal = 0 WHERE FluxoId = ?", objFluxo.lFluxoId)
    If lErro <> AD_SQL_SUCESSO Then Error 7663

    lErro = Comando_Executar(lComando, "UPDATE FluxoTipoForn SET TotalReal = 0 WHERE FluxoId = ?", objFluxo.lFluxoId)
    If lErro <> AD_SQL_SUCESSO Then Error 7664

    lErro = Comando_Fechar(lComando)

    Fluxo_ObterDadosReais_Inicializar = SUCESSO

    Exit Function

Erro_Fluxo_ObterDadosReais_Inicializar:

    Fluxo_ObterDadosReais_Inicializar = Err

    Select Case Err
        Case 7685
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 7662
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_FLUXOFORN", Err, objFluxo.sFluxo)

        Case 7663
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_FLUXOTIPOAPLIC", Err, objFluxo.sFluxo)

        Case 7664
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_FLUXOSINTETICO", Err, objFluxo.sFluxo)

        Case 21245
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_FLUXO", Err, objFluxo.sFluxo)
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148105)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function Fluxo_ObterDadosReais_Resgates(ByVal objFluxo As ClassFluxo) As Long

'obter resgates ocorridos no periodo entre a data base e a data de atualizacao
'de dados reais em que a aplicacao tenha sido feita até a data base
'totalizando por data e tipo de aplicacao

Dim i As Integer, lErro As Long, lComando(1 To 4) As Long, dtDataMovto As Date, iTipoAplicacao As Integer, dValor As Double
Dim iTipoResgate As Integer, iStatusExcluido As Integer

On Error GoTo Erro_Fluxo_ObterDadosReais_Resgates

    For i = 1 To 4
        lComando(i) = Comando_Abrir()
        If lComando(i) = 0 Then Error 7654
    Next

    iTipoResgate = MOVCCI_RESGATE
    iStatusExcluido = STATUS_EXCLUIDO

    If (objFluxo.iFilialEmpresa = EMPRESA_TODA) Then
        lErro = Comando_Executar(lComando(1), "SELECT MovimentosContaCorrente.DataMovimento, Aplicacoes.TipoAplicacao, SUM(MovimentosContaCorrente.Valor) FROM MovimentosContaCorrente, Resgates, Aplicacoes WHERE MovimentosContaCorrente.Tipo = ? AND MovimentosContaCorrente.DataMovimento > ? AND MovimentosContaCorrente.DataMovimento <= ? AND MovimentosContaCorrente.NumMovto = Resgates.NumMovto AND Resgates.Status <> ? AND Resgates.CodigoAplicacao = Aplicacoes.Codigo AND Aplicacoes.DataAplicacao <= ? AND NOT (DataMovimento = ? AND MovimentosContaCorrente.NumMovto <= ?) GROUP BY MovimentosContaCorrente.DataMovimento, Aplicacoes.TipoAplicacao ORDER BY MovimentosContaCorrente.DataMovimento, Aplicacoes.TipoAplicacao", dtDataMovto, iTipoAplicacao, dValor, iTipoResgate, objFluxo.dtDataBase, objFluxo.dtDataDadosReais, iStatusExcluido, objFluxo.dtDataBase, objFluxo.dtDataBase, objFluxo.lNumMovCta)
    Else
        lErro = Comando_Executar(lComando(1), "SELECT MovimentosContaCorrente.DataMovimento, Aplicacoes.TipoAplicacao, SUM(MovimentosContaCorrente.Valor) FROM MovimentosContaCorrente, Resgates, Aplicacoes WHERE MovimentosContaCorrente.FilialEmpresa = ? AND MovimentosContaCorrente.Tipo = ? AND MovimentosContaCorrente.DataMovimento > ? AND MovimentosContaCorrente.DataMovimento <= ? AND MovimentosContaCorrente.NumMovto = Resgates.NumMovto AND Resgates.Status <> ? AND Resgates.CodigoAplicacao = Aplicacoes.Codigo AND Aplicacoes.DataAplicacao <= ? AND NOT (DataMovimento = ? AND MovimentosContaCorrente.NumMovto <= ?) GROUP BY MovimentosContaCorrente.DataMovimento, Aplicacoes.TipoAplicacao ORDER BY MovimentosContaCorrente.DataMovimento, Aplicacoes.TipoAplicacao", dtDataMovto, iTipoAplicacao, dValor, objFluxo.iFilialEmpresa, iTipoResgate, objFluxo.dtDataBase, objFluxo.dtDataDadosReais, iStatusExcluido, objFluxo.dtDataBase, objFluxo.dtDataBase, objFluxo.lNumMovCta)
    End If
    If lErro <> AD_SQL_SUCESSO Then Error 7655

    lErro = Comando_BuscarProximo(lComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7656

    Do While lErro <> AD_SQL_SEM_DADOS

        lErro = Fluxo_ObterDadosReais_Resgates1(objFluxo, dtDataMovto, iTipoAplicacao, dValor, lComando(2), lComando(3), lComando(4))
        If lErro <> SUCESSO Then Error 7657

        lErro = Comando_BuscarProximo(lComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7658

    Loop

    For i = 1 To 4
        Call Comando_Fechar(lComando(i))
    Next

    Fluxo_ObterDadosReais_Resgates = SUCESSO

    Exit Function

Erro_Fluxo_ObterDadosReais_Resgates:

    Fluxo_ObterDadosReais_Resgates = Err

    Select Case Err

        Case 7657

        Case 7655, 7656, 7658
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RESGATESFLUXO", Err)

        Case 7654
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148106)

    End Select

    For i = 1 To 4
        Call Comando_Fechar(lComando(i))
    Next

    Exit Function

End Function

Function Fluxo_ObterDadosReais_Resgates1(ByVal objFluxo As ClassFluxo, ByVal dtDataMovto As Date, ByVal iTipoAplicacao As Integer, ByVal dValor As Double, ByVal lComandoSel As Long, ByVal lComandoMod As Long, ByVal lComandoIns As Long) As Long
'processa os dados acumulados de resgates referentes a um tipo de aplicacao numa data
Dim lErro As Long, dTotalRealAnterior As Double
On Error GoTo Erro_Fluxo_ObterDadosReais_Resgates1

    lErro = Comando_ExecutarPos(lComandoSel, "SELECT TotalReal FROM FluxoTipoAplic WHERE FluxoId = ? AND TipoAplicacao = ? AND Data = ?", 0, dTotalRealAnterior, objFluxo.lFluxoId, iTipoAplicacao, dtDataMovto)
    If lErro <> AD_SQL_SUCESSO Then Error 7650

    lErro = Comando_BuscarProximo(lComandoSel)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7651

    If lErro <> AD_SQL_SUCESSO Then
        lErro = Comando_Executar(lComandoIns, "INSERT INTO FluxoTipoAplic (FluxoId,TipoAplicacao,Data,TotalSistema,TotalAjustado,TotalReal) VALUES (?,?,?,?,?,?)", objFluxo.lFluxoId, iTipoAplicacao, dtDataMovto, 0, 0, dValor)
        If lErro <> AD_SQL_SUCESSO Then Error 7652
    Else
        lErro = Comando_ExecutarPos(lComandoMod, "UPDATE FluxoTipoAplic SET TotalReal = ?", lComandoSel, dValor)
        If lErro <> AD_SQL_SUCESSO Then Error 7653
    End If

    Fluxo_ObterDadosReais_Resgates1 = SUCESSO

    Exit Function

Erro_Fluxo_ObterDadosReais_Resgates1:

    Fluxo_ObterDadosReais_Resgates1 = Err

    Select Case Err

        Case 7650, 7651
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FLUXOTIPOAPLIC", Err, objFluxo.sFluxo)

        Case 7652
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FLUXOTIPOAPLIC", Err, objFluxo.sFluxo)

        Case 7653
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_FLUXOTIPOAPLIC", Err, objFluxo.sFluxo)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148107)

    End Select

    Exit Function

End Function

Function Fluxo_ObterDadosReais_AtualizarDiaPag(ByVal objFluxo As ClassFluxo, ByVal dtData As Date, ByVal dValorDia As Double, ByVal lComandoSel As Long, ByVal lComandoMod As Long, ByVal lComandoIns As Long) As Long
'atualiza dados consolidados de pagtos por dia na tabela FluxoSintetico
Dim lErro As Long, dPagValorRealAnterior As Double
Dim tFluxoSint As typeFluxoSint
On Error GoTo Erro_Fluxo_ObterDadosReais_AtualizarDiaPag

    lErro = Comando_ExecutarPos(lComandoSel, "SELECT PagValorReal FROM FluxoSintetico WHERE FluxoId = ? AND Data = ?", 0, dPagValorRealAnterior, objFluxo.lFluxoId, dtData)
    If lErro <> AD_SQL_SUCESSO Then Error 7668

    lErro = Comando_BuscarProximo(lComandoSel)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7669

    If lErro <> AD_SQL_SUCESSO Then
        tFluxoSint.dPagValorAjustado = 0
        tFluxoSint.dPagValorReal = dValorDia
        tFluxoSint.dPagValorSistema = 0
        tFluxoSint.dRecValorAjustado = 0
        tFluxoSint.dRecValorReal = 0
        tFluxoSint.dRecValorSistema = 0
        tFluxoSint.dTesValorAjustado = 0
        tFluxoSint.dTesValorReal = 0
        tFluxoSint.dTesValorSistema = 0
        tFluxoSint.dSaldoValorAjustado = 0
        tFluxoSint.dSaldoValorReal = 0
        tFluxoSint.dSaldoValorSistema = 0
        lErro = Comando_Executar(lComandoIns, "INSERT INTO FluxoSintetico (FluxoId,Data,RecValorSistema,RecValorAjustado,RecValorReal,PagValorSistema,PagValorAjustado,PagValorReal,TesValorSistema,TesValorAjustado,TesValorReal,SaldoValorSistema,SaldoValorAjustado,SaldoValorReal) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?)", objFluxo.lFluxoId, dtData, tFluxoSint.dRecValorSistema, tFluxoSint.dRecValorAjustado, tFluxoSint.dRecValorReal, tFluxoSint.dPagValorSistema, tFluxoSint.dPagValorAjustado, tFluxoSint.dPagValorReal, tFluxoSint.dTesValorSistema, tFluxoSint.dTesValorAjustado, tFluxoSint.dTesValorReal, tFluxoSint.dSaldoValorSistema, tFluxoSint.dSaldoValorAjustado, tFluxoSint.dSaldoValorReal)
        If lErro <> AD_SQL_SUCESSO Then Error 7670
    Else
        lErro = Comando_ExecutarPos(lComandoMod, "UPDATE FluxoSintetico SET PagValorReal = ?", lComandoSel, dValorDia)
        If lErro <> AD_SQL_SUCESSO Then Error 7671
    End If

    Fluxo_ObterDadosReais_AtualizarDiaPag = SUCESSO

    Exit Function

Erro_Fluxo_ObterDadosReais_AtualizarDiaPag:

    Fluxo_ObterDadosReais_AtualizarDiaPag = Err

    Select Case Err
        Case 7668, 7669 'erro na leitura de fluxo sintetico
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FLUXOSINTETICO", Err, objFluxo.sFluxo)

        Case 7670 'erro na insercao
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FLUXOSINTETICO", Err)

        Case 7671 'erro na atualizacao
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_FLUXOSINTETICO", Err, objFluxo.sFluxo)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148108)

    End Select

    Exit Function

End Function


Function Fluxo_ObterDadosReais_AtualizarDiaRec(ByVal objFluxo As ClassFluxo, ByVal dtData As Date, ByVal dValorDia As Double, ByVal lComandoSel As Long, ByVal lComandoMod As Long, ByVal lComandoIns As Long) As Long
'atualiza dados consolidados de recebtos por dia na tabela FluxoSintetico
Dim lErro As Long, dPagValorRealAnterior As Double
Dim tFluxoSint As typeFluxoSint
On Error GoTo Erro_Fluxo_ObterDadosReais_AtualizarDiaRec

    lErro = Comando_ExecutarPos(lComandoSel, "SELECT PagValorReal FROM FluxoSintetico WHERE FluxoId = ? AND Data = ?", 0, dPagValorRealAnterior, objFluxo.lFluxoId, dtData)
    If lErro <> AD_SQL_SUCESSO Then Error 7672

    lErro = Comando_BuscarProximo(lComandoSel)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7673

    If lErro <> AD_SQL_SUCESSO Then
        tFluxoSint.dPagValorAjustado = 0
        tFluxoSint.dPagValorReal = 0
        tFluxoSint.dPagValorSistema = 0
        tFluxoSint.dRecValorAjustado = 0
        tFluxoSint.dRecValorReal = dValorDia
        tFluxoSint.dRecValorSistema = 0
        tFluxoSint.dTesValorAjustado = 0
        tFluxoSint.dTesValorReal = 0
        tFluxoSint.dTesValorSistema = 0
        tFluxoSint.dSaldoValorAjustado = 0
        tFluxoSint.dSaldoValorReal = 0
        tFluxoSint.dSaldoValorSistema = 0
        lErro = Comando_Executar(lComandoIns, "INSERT INTO FluxoSintetico (FluxoId,Data,RecValorSistema,RecValorAjustado,RecValorReal,PagValorSistema,PagValorAjustado,PagValorReal,TesValorSistema,TesValorAjustado,TesValorReal,SaldoValorSistema,SaldoValorAjustado,SaldoValorReal) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?)", objFluxo.lFluxoId, dtData, tFluxoSint.dRecValorSistema, tFluxoSint.dRecValorAjustado, tFluxoSint.dRecValorReal, tFluxoSint.dPagValorSistema, tFluxoSint.dPagValorAjustado, tFluxoSint.dPagValorReal, tFluxoSint.dTesValorSistema, tFluxoSint.dTesValorAjustado, tFluxoSint.dTesValorReal, tFluxoSint.dSaldoValorSistema, tFluxoSint.dSaldoValorAjustado, tFluxoSint.dSaldoValorReal)
        If lErro <> AD_SQL_SUCESSO Then Error 7674
    Else
        lErro = Comando_ExecutarPos(lComandoMod, "UPDATE FluxoSintetico SET RecValorReal = ?", lComandoSel, dValorDia)
        If lErro <> AD_SQL_SUCESSO Then Error 7675
    End If

    Fluxo_ObterDadosReais_AtualizarDiaRec = SUCESSO

    Exit Function

Erro_Fluxo_ObterDadosReais_AtualizarDiaRec:

    Fluxo_ObterDadosReais_AtualizarDiaRec = Err

    Select Case Err

        Case 7672, 7673 'erro na leitura de fluxo sintetico
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FLUXOSINTETICO", Err, objFluxo.sFluxo)

        Case 7674 'erro na insercao
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FLUXOSINTETICO", Err)

        Case 7675 'erro na atualizacao
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_FLUXOSINTETICO", Err, objFluxo.sFluxo)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148109)

    End Select

    Exit Function

End Function

Function Fluxo_ObterDadosReais_AtualizarDiaTes(ByVal objFluxo As ClassFluxo, ByVal dtData As Date, ByVal dValorDia As Double, ByVal lComandoSel As Long, ByVal lComandoMod As Long, ByVal lComandoIns As Long) As Long
'atualiza dados consolidados de movtos de tesouraria por dia na tabela FluxoSintetico

Dim lErro As Long, dPagValorRealAnterior As Double
Dim tFluxoSint As typeFluxoSint
On Error GoTo Erro_Fluxo_ObterDadosReais_AtualizarDiaTes

    lErro = Comando_ExecutarPos(lComandoSel, "SELECT PagValorReal FROM FluxoSintetico WHERE FluxoId = ? AND Data = ?", 0, dPagValorRealAnterior, objFluxo.lFluxoId, dtData)
    If lErro <> AD_SQL_SUCESSO Then Error 7676

    lErro = Comando_BuscarProximo(lComandoSel)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7677

    If lErro <> AD_SQL_SUCESSO Then
        tFluxoSint.dPagValorAjustado = 0
        tFluxoSint.dPagValorReal = 0
        tFluxoSint.dPagValorSistema = 0
        tFluxoSint.dRecValorAjustado = 0
        tFluxoSint.dRecValorReal = 0
        tFluxoSint.dRecValorSistema = 0
        tFluxoSint.dTesValorAjustado = 0
        tFluxoSint.dTesValorReal = dValorDia
        tFluxoSint.dTesValorSistema = 0
        tFluxoSint.dSaldoValorAjustado = 0
        tFluxoSint.dSaldoValorReal = 0
        tFluxoSint.dSaldoValorSistema = 0
        lErro = Comando_Executar(lComandoIns, "INSERT INTO FluxoSintetico (FluxoId,Data,RecValorSistema,RecValorAjustado,RecValorReal,PagValorSistema,PagValorAjustado,PagValorReal,TesValorSistema,TesValorAjustado,TesValorReal,SaldoValorSistema,SaldoValorAjustado,SaldoValorReal) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?)", objFluxo.lFluxoId, dtData, tFluxoSint.dRecValorSistema, tFluxoSint.dRecValorAjustado, tFluxoSint.dRecValorReal, tFluxoSint.dPagValorSistema, tFluxoSint.dPagValorAjustado, tFluxoSint.dPagValorReal, tFluxoSint.dTesValorSistema, tFluxoSint.dTesValorAjustado, tFluxoSint.dTesValorReal, tFluxoSint.dSaldoValorSistema, tFluxoSint.dSaldoValorAjustado, tFluxoSint.dSaldoValorReal)
        If lErro <> AD_SQL_SUCESSO Then Error 7678
    Else
        lErro = Comando_ExecutarPos(lComandoMod, "UPDATE FluxoSintetico SET TesValorReal = ?", lComandoSel, dValorDia)
        If lErro <> AD_SQL_SUCESSO Then Error 7679
    End If

    Fluxo_ObterDadosReais_AtualizarDiaTes = SUCESSO

    Exit Function

Erro_Fluxo_ObterDadosReais_AtualizarDiaTes:

    Fluxo_ObterDadosReais_AtualizarDiaTes = Err

    Select Case Err

        Case 7676, 7677 'erro na leitura de fluxo sintetico
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FLUXOSINTETICO", Err, objFluxo.sFluxo)

        Case 7678 'erro na insercao
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FLUXOSINTETICO", Err)

        Case 7679 'erro na atualizacao
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_FLUXOSINTETICO", Err, objFluxo.sFluxo)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148110)

    End Select

    Exit Function

End Function

Private Function Fluxo_ObterDadosReais_AtualizarSaldos(ByVal objFluxo As ClassFluxo) As Long

Dim i As Integer, lErro As Long, alComando(1 To 4) As Long
Dim dRecValorReal As Double, dPagValorReal As Double, dTesValorReal As Double, dSaldoValorReal As Double
Dim dSaldoValorReal1 As Double

On Error GoTo Erro_Fluxo_ObterDadosReais_AtualizarSaldos

    For i = LBound(alComando) To UBound(alComando)
        alComando(i) = Comando_Abrir()
        If alComando(i) = 0 Then gError 7686
    Next

    'obter saldo inicial real
    lErro = Comando_ExecutarPos(alComando(1), "SELECT SaldoAjustado FROM FluxoSaldosIniciais WHERE FluxoId = ?", 0, dSaldoValorReal1, objFluxo.lFluxoId)
    If lErro <> AD_SQL_SUCESSO Then gError 7659

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 7660

    Do While lErro = AD_SQL_SUCESSO
    
        dSaldoValorReal = dSaldoValorReal + dSaldoValorReal1
    
        lErro = Comando_ExecutarPos(alComando(2), "UPDATE FluxoSaldosIniciais SET SaldoReal = ?", alComando(1), dSaldoValorReal1)
        If lErro <> AD_SQL_SUCESSO Then gError 83795
    
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 7661

    Loop

'    'percorrer fluxo sintetico dia a dia atualizando o saldo
'    lErro = Comando_ExecutarPos(alComando(3), "SELECT RecValorReal, PagValorReal, TesValorReal FROM FluxoSintetico WHERE FluxoId = ? ORDER BY Data", 0, dRecValorReal, dPagValorReal, dTesValorReal, objFluxo.lFluxoId)
'    If lErro <> AD_SQL_SUCESSO Then gError 7687
'
'    lErro = Comando_BuscarProximo(alComando(3))
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 7688
'
'    Do While lErro <> AD_SQL_SEM_DADOS
'
'        dSaldoValorReal = dSaldoValorReal + dRecValorReal - dPagValorReal + dTesValorReal
'
'        lErro = Comando_ExecutarPos(alComando(4), "UPDATE FluxoSintetico SET SaldoValorReal = ?", alComando(3), dSaldoValorReal)
'        If lErro <> AD_SQL_SUCESSO Then gError 7689
'
'        lErro = Comando_BuscarProximo(alComando(3))
'        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 7690
'
'    Loop

    For i = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(i))
    Next

    Fluxo_ObterDadosReais_AtualizarSaldos = SUCESSO
    
    Exit Function

Erro_Fluxo_ObterDadosReais_AtualizarSaldos:

    Fluxo_ObterDadosReais_AtualizarSaldos = gErr

    Select Case gErr

        Case 7686
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 7659, 7660, 7661
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FLUXOSALDOSINICIAIS", gErr, objFluxo.sFluxo)

        Case 83795
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_FLUXOSALDOSINICIAIS", gErr, objFluxo.sFluxo)

        Case 7687, 7688, 7690
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FLUXOSINTETICO", gErr, objFluxo.sFluxo)

        Case 7689
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_FLUXOSINTETICO", gErr, objFluxo.sFluxo)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148111)

    End Select

    For i = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(i))
    Next

    Exit Function

End Function

Function BorderoPagto_Automatico(lNumero As Long)
'Lê o próximo número de Bordero de pagamento disponível na tabela CPRConfig
    
Dim lErro As Long
Dim lNumInt As Long
Dim sCodigo As String

On Error GoTo Erro_BorderoPagto_Automatico
    
    sCodigo = "NUM_PROX_BORDERO_PAG"

    'Pega o próximo número de Bordero de Pagamento
    lErro = CF("Config_ObterAutomatico", "CPRConfig", sCodigo, "BorderosPagto", "Numero", lNumInt)
    If lErro <> SUCESSO Then Error 15770

    lNumero = lNumInt
    
    BorderoPagto_Automatico = SUCESSO

    Exit Function

Erro_BorderoPagto_Automatico:

    BorderoPagto_Automatico = Err

    Select Case Err
     
        Case 15769
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
        
        Case 15770
        
        Case 15771
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
        
        Case Else
             Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148112)

    End Select
    
    Exit Function

End Function

Function FluxoForn_Grava(ByVal colFluxoForn As Collection, ByVal lFluxoId As Long, ByVal dtData As Date, ByVal iTipoReg As Integer) As Long
'grava as alterações realizadas pelo usuário nos dados de fluxo de caixa por fornecedor. ColFluxoForn contem os dados da tela, lFluxoID é o fluxo em questão, dtData a data em questão e iTipoReg o tipo de registro que está sendo processado

Dim lErro As Long
Dim colFluxoFornBD As New Collection
Dim lTransacao As Long
Dim alComando(1 To 18) As Long
Dim lFluxoId1 As Long
Dim dTotalRecAjustado As Double
Dim dTotalPagAjustado As Double
Dim dTotalSintAjustado As Double
Dim iIndice As Integer

On Error GoTo Erro_FluxoForn_Grava

    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 20243

    For iIndice = LBound(alComando) To UBound(alComando)

        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 20244

    Next

    'Verifica se o fluxo esta cadastrado
    lErro = Comando_ExecutarPos(alComando(1), "SELECT FluxoId FROM Fluxo WHERE FluxoId = ?", 0, lFluxoId1, lFluxoId)
    If lErro <> AD_SQL_SUCESSO Then Error 20245

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 20246

    'se o fluxo nao esta cadastrado ==> erro
    If lErro = AD_SQL_SEM_DADOS Then Error 20247

    lErro = Comando_LockExclusive(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then Error 20248
    
    'le os pagamentos consolidados por fornecedor
    lErro = CF("FluxoForn_Le", colFluxoFornBD, lFluxoId, dtData, iTipoReg)
    If lErro <> SUCESSO And lErro <> 20205 Then Error 20242

    dTotalSintAjustado = 0

    'exclui os fluxos por fornecedor gerados pelo usuario que não são mais desejáveis
    lErro = FluxoForn_Grava_Exclusao(alComando(), colFluxoForn, colFluxoFornBD, dTotalSintAjustado)
    If lErro <> SUCESSO Then Error 20276

    If iTipoReg = FLUXOANALITICO_TIPOREG_PAGTO Then
        
        'atualiza/insere os fluxo por fornecedor e por tipo de fornecedor
        lErro = FluxoForn_Grava_TipoForn(alComando(), lFluxoId, dtData, iTipoReg, dTotalSintAjustado, colFluxoForn, colFluxoFornBD)
        If lErro <> SUCESSO Then Error 20277
        
        dTotalRecAjustado = 0
        dTotalPagAjustado = dTotalSintAjustado
        
    Else
        
        'atualiza/insere os fluxo por cliente e por tipo de cliente
        lErro = FluxoForn_Grava_TipoForn1(alComando(), lFluxoId, dtData, iTipoReg, dTotalSintAjustado, colFluxoForn, colFluxoFornBD)
        If lErro <> SUCESSO Then Error 21028
         
        dTotalRecAjustado = dTotalSintAjustado
        dTotalPagAjustado = 0
       
        
    End If
    
    'atualiza o total ajustado do fluxo sintetico
    lErro = FluxoForn_Grava_Sintetico(alComando(), lFluxoId, dtData, dTotalRecAjustado, -dTotalPagAjustado)
    If lErro <> SUCESSO Then Error 20278
    
    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 20279

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    FluxoForn_Grava = SUCESSO
    
    Exit Function
    
Erro_FluxoForn_Grava:

    FluxoForn_Grava = Err
    
    Select Case Err

        Case 20242, 20276, 20277, 20278, 21028

        Case 20243
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 20244
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 20245, 20246
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FLUXO", Err, lFluxoId)

        Case 20247
            Call Rotina_Erro(vbOKOnly, "ERRO_FLUXO_NAO_CADASTRADO1", Err, lFluxoId)

        Case 20248
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_FLUXO1", Err, lFluxoId)

        Case 20279
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148113)


    End Select
    
    Call Transacao_Rollback
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Private Function FluxoForn_Grava_Exclusao(alComando() As Long, ByVal colFluxoForn As Collection, ByVal colFluxoFornBD As Collection, dTotalSintAjustado As Double)
'exclui os fluxos por fornecedor gerados pelo usuario que não são mais desejáveis

Dim lErro As Long
Dim objFluxoFornBD As ClassFluxoForn
Dim objFluxoForn As ClassFluxoForn
Dim iAchou As Integer
Dim dTotalAjustado As Double
Dim lFluxoId1 As Long

On Error GoTo Erro_FluxoForn_Grava_Exclusao

    'exclui os dados de usuario que não estiverem presentes em colFluxoForn
    For Each objFluxoFornBD In colFluxoFornBD
    
        If objFluxoFornBD.iUsuario = FLUXO_GERADO_PELO_USUARIO Then
    
            iAchou = 0
    
            For Each objFluxoForn In colFluxoForn
            
                If objFluxoFornBD.sNomeReduzido = objFluxoForn.sNomeReduzido Then
                    iAchou = 1
                    Exit For
                End If
            
            Next
        
            'se não achou o dado digitado pelo usuario, significa que tem que excluir
            If iAchou = 0 Then

                'Pesquisa o fluxoforn em questão
                lErro = Comando_ExecutarPos(alComando(2), "SELECT TotalAjustado FROM FluxoForn WHERE FluxoId = ? AND TipoReg = ? AND Fornecedor = ? AND Data = ?", 0, dTotalAjustado, objFluxoFornBD.lFluxoId, objFluxoFornBD.iTipoReg, objFluxoFornBD.lFornecedor, objFluxoFornBD.dtData)
                If lErro <> AD_SQL_SUCESSO Then Error 20249

                lErro = Comando_BuscarPrimeiro(alComando(2))
                If lErro <> AD_SQL_SUCESSO Then Error 20250

                'Exclui o fluxoforn
                lErro = Comando_ExecutarPos(alComando(3), "DELETE FROM FluxoForn", alComando(2))
                If lErro <> AD_SQL_SUCESSO Then Error 20251

                'Pesquisa o fluxoTipoForn em questão
                lErro = Comando_ExecutarPos(alComando(8), "SELECT FluxoId FROM FluxoTipoForn WHERE FluxoId = ? AND TipoReg = ? AND TipoFornecedor = ? AND Data = ?", 0, lFluxoId1, objFluxoFornBD.lFluxoId, objFluxoFornBD.iTipoReg, objFluxoFornBD.iTipoFornecedor, objFluxoFornBD.dtData)
                If lErro <> AD_SQL_SUCESSO Then Error 20255

                lErro = Comando_BuscarPrimeiro(alComando(8))
                If lErro <> AD_SQL_SUCESSO Then Error 20256

                'Atualiza o fluxoTipoForn em questão
                lErro = Comando_ExecutarPos(alComando(9), "UPDATE FluxoTipoForn SET TotalAjustado=TotalAjustado - ?", alComando(8), dTotalAjustado)
                If lErro <> AD_SQL_SUCESSO Then Error 20257

                dTotalSintAjustado = dTotalSintAjustado - dTotalAjustado

            End If
            
        End If
        
    Next

    FluxoForn_Grava_Exclusao = SUCESSO
    
    Exit Function
    
Erro_FluxoForn_Grava_Exclusao:

    FluxoForn_Grava_Exclusao = Err
    
    Select Case Err
    
        Case 20249, 20250
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FLUXOFORN3", Err, objFluxoFornBD.lFluxoId, objFluxoFornBD.iTipoReg, objFluxoFornBD.lFornecedor, CStr(objFluxoFornBD.dtData))

        Case 20251
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_FLUXOFORN1", Err, objFluxoFornBD.lFluxoId, objFluxoFornBD.iTipoReg, objFluxoFornBD.lFornecedor, CStr(objFluxoFornBD.dtData))

        Case 20255, 20256
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FLUXOTIPOFORN1", Err, objFluxoFornBD.lFluxoId, objFluxoFornBD.iTipoReg, objFluxoFornBD.iTipoFornecedor, CStr(objFluxoFornBD.dtData))
    
        Case 20257
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_FLUXOTIPOFORN1", Err, objFluxoFornBD.lFluxoId, objFluxoFornBD.iTipoReg, objFluxoFornBD.iTipoFornecedor, CStr(objFluxoFornBD.dtData))
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148114)
    
    End Select

End Function

Private Function FluxoForn_Grava_TipoForn(alComando() As Long, ByVal lFluxoId As Long, ByVal dtData As Date, ByVal iTipoReg As Integer, dTotalSintAjustado As Double, ByVal colFluxoForn As Collection, ByVal colFluxoFornBD As Collection) As Long
'atualiza/insere os fluxo por fornecedor e por tipo de fornecedor

Dim lErro As Long
Dim objFluxoFornBD As ClassFluxoForn
Dim objFluxoForn As ClassFluxoForn
Dim iAchou As Integer
Dim dTotalAjustado As Double
Dim lFluxoId1 As Long
Dim lCodigo As Long
Dim iTipoForn As Integer
Dim sDescricao As String

On Error GoTo Erro_FluxoForn_Grava_TipoForn

    For Each objFluxoForn In colFluxoForn
    
        iAchou = 0
    
        For Each objFluxoFornBD In colFluxoFornBD
        
            If objFluxoForn.sNomeReduzido = objFluxoFornBD.sNomeReduzido Then
                
                iAchou = 1
                
                If objFluxoForn.dTotalAjustado <> objFluxoFornBD.dTotalAjustado Then

                    'Pesquisa o fluxoforn em questão
                    lErro = Comando_ExecutarPos(alComando(4), "SELECT TotalAjustado FROM FluxoForn WHERE FluxoId = ? AND TipoReg = ? AND Fornecedor = ? AND Data = ?", 0, dTotalAjustado, objFluxoFornBD.lFluxoId, objFluxoFornBD.iTipoReg, objFluxoFornBD.lFornecedor, objFluxoFornBD.dtData)
                    If lErro <> AD_SQL_SUCESSO Then Error 20252

                    lErro = Comando_BuscarPrimeiro(alComando(4))
                    If lErro <> AD_SQL_SUCESSO Then Error 20253

                    'Atualiza o fluxoforn em questão
                    lErro = Comando_ExecutarPos(alComando(5), "UPDATE FluxoForn SET TotalAjustado=? , Usuario=?", alComando(4), objFluxoForn.dTotalAjustado, objFluxoForn.iUsuario)
                    If lErro <> AD_SQL_SUCESSO Then Error 20254

                    'Pesquisa o fluxoTipoForn em questão
                    lErro = Comando_ExecutarPos(alComando(6), "SELECT FluxoId FROM FluxoTipoForn WHERE FluxoId = ? AND TipoReg = ? AND TipoFornecedor = ? AND Data = ?", 0, lFluxoId1, objFluxoFornBD.lFluxoId, objFluxoFornBD.iTipoReg, objFluxoFornBD.iTipoFornecedor, objFluxoFornBD.dtData)
                    If lErro <> AD_SQL_SUCESSO Then Error 20280

                    lErro = Comando_BuscarPrimeiro(alComando(6))
                    If lErro <> AD_SQL_SUCESSO Then Error 20281

                    'Atualiza o fluxoTipoForn em questão
                    lErro = Comando_ExecutarPos(alComando(7), "UPDATE FluxoTipoForn SET TotalAjustado=TotalAjustado + ?", alComando(6), objFluxoForn.dTotalAjustado - dTotalAjustado)
                    If lErro <> AD_SQL_SUCESSO Then Error 20282

                    dTotalSintAjustado = dTotalSintAjustado + (objFluxoForn.dTotalAjustado - dTotalAjustado)

                End If

                Exit For
                
            End If
            
        Next
        
        'se não encontrou o que foi digitado pelo usuario no banco de dados ==> inclui o fluxo
        If iAchou = 0 And objFluxoForn.iUsuario = FLUXO_GERADO_PELO_USUARIO Then
        
            'Pega os dados da tabela Fornecedores para descobrir o codigo e o tipo do fornecedor
            lErro = Comando_Executar(alComando(10), "SELECT Codigo, Tipo FROM Fornecedores WHERE NomeReduzido = ?", lCodigo, iTipoForn, objFluxoForn.sNomeReduzido)
            If lErro <> AD_SQL_SUCESSO Then Error 20260
        
            lErro = Comando_BuscarPrimeiro(alComando(10))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 20261
        
            'insere o fluxoforn
            lErro = Comando_Executar(alComando(11), "INSERT INTO FluxoForn (FluxoId, TipoReg, Fornecedor, Data, TipoFornecedor, TotalSistema, TotalAjustado, TotalReal, NomeReduzido, Usuario) VALUES (?,?,?,?,?,0,?,0,?,?)", lFluxoId, iTipoReg, lCodigo, dtData, iTipoForn, objFluxoForn.dTotalAjustado, objFluxoForn.sNomeReduzido, FLUXO_GERADO_PELO_USUARIO)
            If lErro <> AD_SQL_SUCESSO Then Error 20262
        
            'Pesquisa o fluxoTipoForn em questão
            lErro = Comando_ExecutarPos(alComando(12), "SELECT FluxoId FROM FluxoTipoForn WHERE FluxoId = ? AND TipoReg = ? AND TipoFornecedor = ? AND Data = ?", 0, lFluxoId1, lFluxoId, iTipoReg, iTipoForn, dtData)
            If lErro <> AD_SQL_SUCESSO Then Error 20283

            lErro = Comando_BuscarPrimeiro(alComando(12))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 20284

            'se encontrou o fluxotipoforn ==> atualizacao
            If lErro = SUCESSO Then
            
                'Atualiza o fluxoTipoForn em questão
                lErro = Comando_ExecutarPos(alComando(13), "UPDATE FluxoTipoForn SET TotalAjustado=TotalAjustado + ?", alComando(12), objFluxoForn.dTotalAjustado)
                If lErro <> AD_SQL_SUCESSO Then Error 20285
        
        
            Else
        
                'se não encontrou o fluxotipoforn ==> insercao
                
                'descobre a descricao do tipo de fornecedor
                sDescricao = String(STRING_TIPO_FORNECEDOR_DESCRICAO, 0)
        
                'Pesquisa o Tipo de Fornecedor para descobrir a descricao do tipo
                lErro = Comando_Executar(alComando(15), "SELECT Descricao FROM TiposDeFornecedor WHERE Codigo = ?", sDescricao, iTipoForn)
                If lErro <> AD_SQL_SUCESSO Then Error 20286
    
                lErro = Comando_BuscarPrimeiro(alComando(15))
                If lErro <> AD_SQL_SUCESSO Then Error 20287
        
                'insere o fluxotipoforn
                lErro = Comando_Executar(alComando(14), "INSERT INTO FluxoTipoForn (FluxoId, TipoReg, TipoFornecedor, Data, TotalSistema, TotalAjustado, TotalReal, Descricao) VALUES (?,?,?,?,0,?,0,?)", lFluxoId, iTipoReg, iTipoForn, dtData, objFluxoForn.dTotalAjustado, sDescricao)
                If lErro <> AD_SQL_SUCESSO Then Error 20288
        
            End If
        
            dTotalSintAjustado = dTotalSintAjustado + objFluxoForn.dTotalAjustado
        
        End If
    Next

    FluxoForn_Grava_TipoForn = SUCESSO
    
    Exit Function
    
Erro_FluxoForn_Grava_TipoForn:

    FluxoForn_Grava_TipoForn = Err

    Select Case Err
    
        Case 20252, 20253
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FLUXOFORN3", Err, objFluxoFornBD.lFluxoId, objFluxoFornBD.iTipoReg, objFluxoFornBD.lFornecedor, CStr(objFluxoFornBD.dtData))
                                                                    
        Case 20254
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_FLUXOFORN1", Err, objFluxoFornBD.lFluxoId, objFluxoFornBD.iTipoReg, objFluxoFornBD.lFornecedor, CStr(objFluxoFornBD.dtData))
            
        Case 20260, 20261
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FORNECEDORES_NOMEREDUZIDO", Err, objFluxoForn.sNomeReduzido)
        
        Case 20262
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FLUXOFORN", Err)
      
      Case 20280, 20281
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FLUXOTIPOFORN1", Err, objFluxoFornBD.lFluxoId, objFluxoFornBD.iTipoReg, objFluxoFornBD.iTipoFornecedor, objFluxoFornBD.dtData)
                    
        Case 20282
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_FLUXOTIPOFORN1", Err, objFluxoFornBD.lFluxoId, objFluxoFornBD.iTipoReg, objFluxoFornBD.iTipoFornecedor, objFluxoFornBD.dtData)
                    
        Case 20283, 20284
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FLUXOTIPOFORN1", Err, lFluxoId, iTipoReg, iTipoForn, CStr(dtData))
            
        Case 20285
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_FLUXOTIPOFORN1", Err, lFluxoId, iTipoReg, iTipoForn, CStr(dtData))
    
        Case 20286, 20287
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOSFORNECEDOR1", Err, iTipoForn)
    
        Case 20288
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FLUXOTIPOFORN", Err)
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148115)
        
    End Select
    
    Exit Function
    
End Function

Private Function FluxoForn_Grava_TipoForn1(alComando() As Long, ByVal lFluxoId As Long, ByVal dtData As Date, ByVal iTipoReg As Integer, dTotalSintAjustado As Double, ByVal colFluxoForn As Collection, ByVal colFluxoFornBD As Collection) As Long
'atualiza/insere os fluxo por cliente e por tipo de cliente

Dim lErro As Long
Dim objFluxoFornBD As ClassFluxoForn
Dim objFluxoForn As ClassFluxoForn
Dim iAchou As Integer
Dim dTotalAjustado As Double
Dim lFluxoId1 As Long
Dim lCodigo As Long
Dim iTipoForn As Integer
Dim sDescricao As String

On Error GoTo Erro_FluxoForn_Grava_TipoForn1

    For Each objFluxoForn In colFluxoForn
    
        iAchou = 0
    
        For Each objFluxoFornBD In colFluxoFornBD
        
            If objFluxoForn.sNomeReduzido = objFluxoFornBD.sNomeReduzido Then
                
                iAchou = 1
                
                If objFluxoForn.dTotalAjustado <> objFluxoFornBD.dTotalAjustado Then

                    'Pesquisa o fluxoforn em questão
                    lErro = Comando_ExecutarPos(alComando(4), "SELECT TotalAjustado FROM FluxoForn WHERE FluxoId = ? AND TipoReg = ? AND Fornecedor = ? AND Data = ?", 0, dTotalAjustado, objFluxoFornBD.lFluxoId, objFluxoFornBD.iTipoReg, objFluxoFornBD.lFornecedor, objFluxoFornBD.dtData)
                    If lErro <> AD_SQL_SUCESSO Then Error 21029

                    lErro = Comando_BuscarPrimeiro(alComando(4))
                    If lErro <> AD_SQL_SUCESSO Then Error 21030

                    'Atualiza o fluxoforn em questão
                    lErro = Comando_ExecutarPos(alComando(5), "UPDATE FluxoForn SET TotalAjustado=?, Usuario=?", alComando(4), objFluxoForn.dTotalAjustado, objFluxoForn.iUsuario)
                    If lErro <> AD_SQL_SUCESSO Then Error 21031

                    'Pesquisa o fluxoTipoForn em questão
                    lErro = Comando_ExecutarPos(alComando(6), "SELECT FluxoId FROM FluxoTipoForn WHERE FluxoId = ? AND TipoReg = ? AND TipoFornecedor = ? AND Data = ?", 0, lFluxoId1, objFluxoFornBD.lFluxoId, objFluxoFornBD.iTipoReg, objFluxoFornBD.iTipoFornecedor, objFluxoFornBD.dtData)
                    If lErro <> AD_SQL_SUCESSO Then Error 21041

                    lErro = Comando_BuscarPrimeiro(alComando(6))
                    If lErro <> AD_SQL_SUCESSO Then Error 21042

                    'Atualiza o fluxoTipoForn em questão
                    lErro = Comando_ExecutarPos(alComando(7), "UPDATE FluxoTipoForn SET TotalAjustado=TotalAjustado + ?", alComando(6), objFluxoForn.dTotalAjustado - dTotalAjustado)
                    If lErro <> AD_SQL_SUCESSO Then Error 21043

                    dTotalSintAjustado = dTotalSintAjustado + (objFluxoForn.dTotalAjustado - dTotalAjustado)

                End If

                Exit For
                
            End If
            
        Next
        
        'se não encontrou o que foi digitado pelo usuario no banco de dados ==> inclui o fluxo
        If iAchou = 0 And objFluxoForn.iUsuario = FLUXO_GERADO_PELO_USUARIO Then
        
            'Pega os dados da tabela Clientes para descobrir o codigo e o tipo do cliente
            lErro = Comando_Executar(alComando(10), "SELECT Codigo, Tipo FROM Clientes WHERE NomeReduzido = ?", lCodigo, iTipoForn, objFluxoForn.sNomeReduzido)
            If lErro <> AD_SQL_SUCESSO Then Error 21032
        
            lErro = Comando_BuscarPrimeiro(alComando(10))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 21033
        
            'insere o fluxoforn
            lErro = Comando_Executar(alComando(11), "INSERT INTO FluxoForn (FluxoId, TipoReg, Fornecedor, Data, TipoFornecedor, TotalSistema, TotalAjustado, TotalReal, NomeReduzido, Usuario) VALUES (?,?,?,?,?,0,?,0,?,?)", lFluxoId, iTipoReg, lCodigo, dtData, iTipoForn, objFluxoForn.dTotalAjustado, objFluxoForn.sNomeReduzido, FLUXO_GERADO_PELO_USUARIO)
            If lErro <> AD_SQL_SUCESSO Then Error 21034
        
            'Pesquisa o fluxoTipoForn em questão
            lErro = Comando_ExecutarPos(alComando(12), "SELECT FluxoId FROM FluxoTipoForn WHERE FluxoId = ? AND TipoReg = ? AND TipoFornecedor = ? AND Data = ?", 0, lFluxoId1, lFluxoId, iTipoReg, iTipoForn, dtData)
            If lErro <> AD_SQL_SUCESSO Then Error 21035

            lErro = Comando_BuscarPrimeiro(alComando(12))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 21036

            'se encontrou o fluxotipoforn ==> atualizacao
            If lErro = SUCESSO Then
            
                'Atualiza o fluxoTipoForn em questão
                lErro = Comando_ExecutarPos(alComando(13), "UPDATE FluxoTipoForn SET TotalAjustado=TotalAjustado + ?", alComando(12), objFluxoForn.dTotalAjustado)
                If lErro <> AD_SQL_SUCESSO Then Error 21037
        
        
            Else
        
                'se não encontrou o fluxotipoforn ==> insercao
                
                'descobre a descricao do tipo de fornecedor
                sDescricao = String(STRING_TIPO_FORNECEDOR_DESCRICAO, 0)
        
                'Pesquisa o Tipo de Cliente para descobrir a descricao do tipo
                lErro = Comando_Executar(alComando(15), "SELECT Descricao FROM TiposDeCliente WHERE Codigo = ?", sDescricao, iTipoForn)
                If lErro <> AD_SQL_SUCESSO Then Error 21038
    
                lErro = Comando_BuscarPrimeiro(alComando(15))
                If lErro <> AD_SQL_SUCESSO Then Error 21039
        
                'insere o fluxotipoforn
                lErro = Comando_Executar(alComando(14), "INSERT INTO FluxoTipoForn (FluxoId, TipoReg, TipoFornecedor, Data, TotalSistema, TotalAjustado, TotalReal, Descricao) VALUES (?,?,?,?,0,?,0,?)", lFluxoId, iTipoReg, iTipoForn, dtData, objFluxoForn.dTotalAjustado, sDescricao)
                If lErro <> AD_SQL_SUCESSO Then Error 21040
        
            End If
        
            dTotalSintAjustado = dTotalSintAjustado + objFluxoForn.dTotalAjustado
        
        End If
    Next

    FluxoForn_Grava_TipoForn1 = SUCESSO
    
    Exit Function
    
Erro_FluxoForn_Grava_TipoForn1:

    FluxoForn_Grava_TipoForn1 = Err

    Select Case Err
    
        Case 21029, 21030
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FLUXOFORN3", Err, objFluxoFornBD.lFluxoId, objFluxoFornBD.iTipoReg, objFluxoFornBD.lFornecedor, CStr(objFluxoFornBD.dtData))
                                                                    
        Case 21031
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_FLUXOFORN1", Err, objFluxoFornBD.lFluxoId, objFluxoFornBD.iTipoReg, objFluxoFornBD.lFornecedor, CStr(objFluxoFornBD.dtData))
            
        Case 21032, 21033
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CLIENTES_NOMEREDUZIDO", Err, objFluxoForn.sNomeReduzido)
        
        Case 21034
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FLUXOFORN", Err)
        
        Case 21035, 21036
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FLUXOTIPOFORN1", Err, lFluxoId, iTipoReg, iTipoForn, CStr(dtData))
            
        Case 21037
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_FLUXOTIPOFORN1", Err, lFluxoId, iTipoReg, iTipoForn, CStr(dtData))
    
        Case 21038, 21039
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOSCLIENTE1", Err, iTipoForn)
    
        Case 21040
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FLUXOTIPOFORN", Err)
            
        Case 21041, 21042
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FLUXOTIPOFORN1", Err, objFluxoFornBD.lFluxoId, objFluxoFornBD.iTipoReg, objFluxoFornBD.iTipoFornecedor, objFluxoFornBD.dtData)
                    
        Case 21043
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_FLUXOTIPOFORN1", Err, objFluxoFornBD.lFluxoId, objFluxoFornBD.iTipoReg, objFluxoFornBD.iTipoFornecedor, objFluxoFornBD.dtData)
               
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148116)
        
    End Select
    
    Exit Function
    
End Function

Private Function FluxoForn_Grava_Sintetico(alComando() As Long, ByVal lFluxoId As Long, ByVal dtData As Date, ByVal dTotalRecAjustado As Double, ByVal dTotalPagAjustado As Double) As Long
'atualiza o total ajustado do fluxo sintetico

Dim lErro As Long
Dim lFluxoId1 As Long

On Error GoTo Erro_FluxoForn_Grava_Sintetico

    'Pesquisa o fluxoSintetico em questão
    lErro = Comando_ExecutarPos(alComando(16), "SELECT FluxoId FROM FluxoSintetico WHERE FluxoId = ? AND Data = ?", 0, lFluxoId1, lFluxoId, dtData)
    If lErro <> AD_SQL_SUCESSO Then Error 20289

    lErro = Comando_BuscarPrimeiro(alComando(16))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 20290

    'se encontrou o fluxosintetico ==> atualizacao
    If lErro = SUCESSO Then
    
        'Atualiza o fluxoSintetico em questão
        lErro = Comando_ExecutarPos(alComando(17), "UPDATE FluxoSintetico SET PagValorAjustado=PagValorAjustado + ?, RecValorAjustado=RecValorAjustado + ?", alComando(16), dTotalPagAjustado, dTotalRecAjustado)
        If lErro <> AD_SQL_SUCESSO Then Error 20291

    Else

        'se não encontrou o fluxosintetico ==> insercao
        
        'insere o fluxosintetico
        lErro = Comando_Executar(alComando(18), "INSERT INTO FluxoSintetico (FluxoId, Data, RecValorSistema, RecValorAjustado, RecValorReal, PagValorSistema, PagValorAjustado, PagValorReal, TesValorSistema, TesValorAjustado, TesValorReal) VALUES (?,?,0,?,0,0,?,0,0,0,0)", lFluxoId, dtData, dTotalRecAjustado, dTotalPagAjustado)
        If lErro <> AD_SQL_SUCESSO Then Error 20292

    End If

    FluxoForn_Grava_Sintetico = SUCESSO
    
    Exit Function
    
Erro_FluxoForn_Grava_Sintetico:

    FluxoForn_Grava_Sintetico = Err

    Select Case Err
    
        Case 20289, 20290
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FLUXOSINTETICO1", Err, lFluxoId, CStr(dtData))
    
        Case 20291
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_FLUXOSINTETICO1", Err, lFluxoId, CStr(dtData))
    
        Case 20292
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FLUXOSINTETICO", Err)
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148117)
    
    End Select
    
    Exit Function

End Function

Function Enderecos_Exclui_FilialCliente(ByVal objFilialCliente As ClassFilialCliente) As Long
'Exclui os  Enderecos Principal, Entrega e Cobranca da Filial Cliente
'CHAMADA EM TRANSAÇÃO por FilialCliente_Exclui e por FiliaisClientes_Exclui

Dim lErro As Long

On Error GoTo Erro_Enderecos_Exclui_FilialCliente

    'Exclui os  Enderecos Principal, Entrega e Cobranca
    lErro = CF("Endereco_Exclui", objFilialCliente.lEndereco)
    If lErro <> SUCESSO Then Error 12896

    lErro = CF("Endereco_Exclui", objFilialCliente.lEnderecoEntrega)
    If lErro <> SUCESSO Then Error 12897

    lErro = CF("Endereco_Exclui", objFilialCliente.lEnderecoCobranca)
    If lErro <> SUCESSO Then Error 12898

    Enderecos_Exclui_FilialCliente = SUCESSO

    Exit Function

Erro_Enderecos_Exclui_FilialCliente:

    Enderecos_Exclui_FilialCliente = Err

    Select Case Err

        Case 12896, 12897, 12898  'tratados na rotina chamada

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148118)

    End Select

    Exit Function

End Function


Function BorderoChequePre_Automatico(lNumBordero As Long) As Long
'obtem o numero do bordero de cheques pré datados sendo emitido
Dim lErro As Long
On Error GoTo Erro_BorderoChequePre_Automatico

    lErro = CF("CPRConfig_ObterNumInt", "NUM_PROX_BORDERO_CHQPRE", lNumBordero)
    If lErro <> SUCESSO Then Error 7701

    BorderoChequePre_Automatico = SUCESSO

    Exit Function

Erro_BorderoChequePre_Automatico:

    BorderoChequePre_Automatico = Err

    Select Case Err

        Case 7701

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148119)

    End Select

    Exit Function

End Function

Private Function BorderoChequePre_Atualizar3(ByVal colChequePre As Collection, ByVal dtDataDeposito As Date) As Long
'monta uma colecao de cheques-pre que irao ser depositados

Dim lErro As Long, objChequePre As ClassChequePre
Dim lNumIntCheque As Long, dValorCheque As Double, lComando As Long

On Error GoTo Erro_BorderoChequePre_Atualizar3

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 56640
    
    'Selecionar os cheques pre com data p/deposito até a data informada que tenham NumBordero = 0
    If giFilialEmpresa = EMPRESA_TODA Then
        lErro = Comando_Executar(lComando, "SELECT NumIntCheque, Valor FROM ChequePre WHERE NumBordero = 0 AND DataDeposito <= ?", lNumIntCheque, dValorCheque, dtDataDeposito)
    Else
        lErro = Comando_Executar(lComando, "SELECT NumIntCheque, Valor FROM ChequePre WHERE FilialEmpresa = ? AND NumBordero = 0 AND DataDeposito <= ?", lNumIntCheque, dValorCheque, giFilialEmpresa, dtDataDeposito)
    End If
    If lErro <> AD_SQL_SUCESSO Then Error 7721

    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7722

    'se nao houver cheques a depositar erro
    If lErro <> AD_SQL_SUCESSO Then Error 7723

    'Percorrer os cheques
    Do While lErro <> AD_SQL_SEM_DADOS

        'adicionar o cheque na colecao
        Set objChequePre = New ClassChequePre
        
        objChequePre.lNumIntCheque = lNumIntCheque
        objChequePre.dValor = dValorCheque
        
        colChequePre.Add objChequePre
        
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7725

    Loop
    
    Call Comando_Fechar(lComando)
    
    BorderoChequePre_Atualizar3 = SUCESSO
     
    Exit Function
    
Erro_BorderoChequePre_Atualizar3:

    BorderoChequePre_Atualizar3 = Err
     
    Select Case Err
          
        Case 56640
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 7721, 7722, 7725
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUES_PRE_BORDERO", Err)
        
        Case 7723 'nao há cheque pre a depositar até a data informada
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BORDERO_SEM_CHEQUES_PRE", Err)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148120)
     
    End Select
     
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function BorderoChequePre_Atualizar(ByVal objBorderoChequePre As ClassBorderoChequePre, sMsgDebRecCli As String) As Long

Dim lErro As Long

On Error GoTo Erro_BorderoChequePre_Atualizar

    lErro = BorderoChequePre_Atualizar4(objBorderoChequePre, objBorderoChequePre.colChequePre, sMsgDebRecCli)
    If lErro <> SUCESSO Then Error 56634
    
    BorderoChequePre_Atualizar = SUCESSO
     
    Exit Function
    
Erro_BorderoChequePre_Atualizar:

    BorderoChequePre_Atualizar = Err
     
    Select Case Err
          
        Case 56634
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148121)
     
    End Select
     
    Exit Function

End Function

Private Function BorderoChequePre_Atualizar5(ByVal objBorderoChequePre As ClassBorderoChequePre, ByVal dValorBordero As Double, ByVal objMovContaCorrente As ClassMovContaCorrente) As Long
'prepara e insere o movto de cta corrente correspondente ao deposito do bordero como um todo

Dim lErro As Long, objContasCorrentesInternas As New ClassContasCorrentesInternas

On Error GoTo Erro_BorderoChequePre_Atualizar5

    lErro = CF("ContaCorrenteInt_Le", objBorderoChequePre.iCodNossaConta, objContasCorrentesInternas)
    If lErro <> SUCESSO Then Error 7720

    'Incluir o deposito do bordero na conta
    objMovContaCorrente.dtDataMovimento = objBorderoChequePre.dtDataDeposito
    objMovContaCorrente.dValor = dValorBordero
    objMovContaCorrente.iCodConta = objBorderoChequePre.iCodNossaConta
    'objMovContaCorrente.iFavorecido =
    objMovContaCorrente.iFilialEmpresa = objContasCorrentesInternas.iFilialEmpresa
    objMovContaCorrente.iPortador = 0
    objMovContaCorrente.iTipo = MOVCCI_BORDERO_CHEQUE_PRE
    objMovContaCorrente.iTipoMeioPagto = BORDERO
    objMovContaCorrente.lNumero = objBorderoChequePre.lNumBordero
    objMovContaCorrente.lNumRefInterna = objBorderoChequePre.lNumBordero
    objMovContaCorrente.sHistorico = "Depósito de Cheques Pré-Datados"
    objMovContaCorrente.sNumRefExterna = ""

    objMovContaCorrente.iConciliado = NAO_CONCILIADO
    objMovContaCorrente.iExcluido = MOVCONTACORRENTE_NAO_EXCLUIDO

    'Grava o Pagamento no BD
    lErro = CF("MovCCI_Grava_PagRec", objMovContaCorrente)
    If lErro <> SUCESSO Then Error 7730
        
    BorderoChequePre_Atualizar5 = SUCESSO
     
    Exit Function
    
Erro_BorderoChequePre_Atualizar5:

    BorderoChequePre_Atualizar5 = Err
     
    Select Case Err
          
        Case 7730
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148122)
     
    End Select
     
    Exit Function

End Function

Private Function BorderoChequePre_Atualizar6(ByVal objBorderoChequePre As ClassBorderoChequePre, ByVal objMovContaCorrente As ClassMovContaCorrente, ByVal colBaixaParcRec As colBaixaParcRec, ByVal objContabAutomatica As ClassContabAutomatica) As Long
'prepara e insere a baixa rec e as baixasparcrec

Dim lErro As Long, objContabil As ClassContabil, objBaixaReceber As New ClassBaixaReceber

On Error GoTo Erro_BorderoChequePre_Atualizar6

    objBaixaReceber.dtData = objBorderoChequePre.dtDataDeposito
    objBaixaReceber.dtDataContabil = objBorderoChequePre.dtDataContabil
    objBaixaReceber.lNumMovCta = objMovContaCorrente.lNumMovto
    objBaixaReceber.iStatus = STATUS_LANCADO
    objBaixaReceber.iMotivo = MOTIVO_RECEBIMENTO
    objBaixaReceber.dtDataRegistro = gdtDataHoje
    objBaixaReceber.lNumMovCta = objMovContaCorrente.lNumMovto
    objBaixaReceber.sHistorico = "recebto conta " & CStr(objMovContaCorrente.iCodConta) & " sequencial: " & CStr(objMovContaCorrente.lSequencial)
    
    objBorderoChequePre.iQuantParcelas = colBaixaParcRec.Count
    
    lErro = BaixaReceber_Grava(objBaixaReceber, colBaixaParcRec, objContabil, 0, 0, objContabAutomatica, objBorderoChequePre.objTelaAtualizacao)
    If lErro <> SUCESSO Then Error 56638
    
    BorderoChequePre_Atualizar6 = SUCESSO
     
    Exit Function
    
Erro_BorderoChequePre_Atualizar6:

    BorderoChequePre_Atualizar6 = Err
     
    Select Case Err
          
        Case 56638
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148123)
     
    End Select
     
    Exit Function

End Function
        
Private Function BorderoChequePre_Atualizar4(ByVal objBorderoChequePre As ClassBorderoChequePre, ByVal colChequePre As Collection, sMsgDebRecCli As String) As Long
'faz as atualizacoes correspondentes a emissao de bordero de cheques pré datados

Dim i As Integer, lTransacao As Long, lErro As Long, lNumBordero As Long, alComando(1 To 3) As Long
Dim dValorCheque As Double, dValorBordero As Double, iQtdeCheques As Integer, lNumIntCheque As Long
Dim iFilialEmpresaCta As Integer, objContasCorrentesInternas As New ClassContasCorrentesInternas
Dim objContabAutomatica As ClassContabAutomatica, objChequePre As ClassChequePre
Dim objMovContaCorrente As New ClassMovContaCorrente
Dim colBaixaParcRec As New colBaixaParcRec
Dim dValorChequeLojaEsp As Double
Dim dValorChequeLojaNEsp As Double

On Error GoTo Erro_BorderoChequePre_Atualizar4

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 7736

    For i = LBound(alComando) To UBound(alComando)
        alComando(i) = Comando_Abrir()
        If alComando(i) = 0 Then gError 7740
    Next
    
    Call objBorderoChequePre.LimpaColInfoParcRec
    
    'obter numero do bordero
    lErro = BorderoChequePre_Automatico(lNumBordero)
    If lErro <> SUCESSO Then gError 7737

    objBorderoChequePre.lNumBordero = lNumBordero
    
    If (gcolModulo.Ativo(MODULO_CONTABILIDADE) = MODULO_ATIVO) Then
    
        Set objContabAutomatica = New ClassContabAutomatica
    
        lErro = objContabAutomatica.Inicializa_Contab(objBorderoChequePre, MODULO_CONTASARECEBER, "BCR", objBorderoChequePre.dtDataContabil, DATA_NULA)
        If lErro <> SUCESSO Then gError 32215
        
    End If
        
    'obtem o valor do bordero
    dValorBordero = 0
    For Each objChequePre In colChequePre
        If objChequePre.iChequeSel = MARCADO Then
            dValorBordero = dValorBordero + objChequePre.dValor
        End If
    Next
        
    'Incluir o bordero na tabela BorderosChequesPre atraves de uma funcao especifica p/isso que receba um objBorderoChequePre preenchido
    lErro = BorderoChequePre_Inserir(objBorderoChequePre)
    If lErro <> SUCESSO Then gError 7739
    
    'prepara e insere o movto de cta corrente correspondente ao deposito do bordero como um todo
    lErro = BorderoChequePre_Atualizar5(objBorderoChequePre, dValorBordero, objMovContaCorrente)
    If lErro <> SUCESSO Then gError 56635
    
    'percorre todos os cheques que serao "depositados"
    For Each objChequePre In colChequePre
        If objChequePre.iChequeSel = MARCADO Then
            'Atualizar o cheque pre
            lErro = BorderoChequePre_Atualizar1(objBorderoChequePre, objChequePre, colBaixaParcRec, alComando, dValorChequeLojaEsp, dValorChequeLojaNEsp, sMsgDebRecCli)
            If lErro <> SUCESSO Then gError 7724
        End If
    Next

    'prepara e insere o movto de caixa central correspondente a saida dos cheques do loja
    lErro = BorderoChequePre_Atualizar7(objBorderoChequePre, dValorChequeLojaEsp, dValorChequeLojaNEsp)
    If lErro <> SUCESSO Then gError 126145

    'prepara e insere a baixa rec e as baixasparcrec
    lErro = BorderoChequePre_Atualizar6(objBorderoChequePre, objMovContaCorrente, colBaixaParcRec, objContabAutomatica)
    If lErro <> SUCESSO Then gError 56639
    
    'prepara e insere o movto de cta corrente correspondente a saida dos cheques de loja da conta cheque pre
    lErro = BorderoChequePre_MovCCI_Grava(objBorderoChequePre, dValorBordero)
    If lErro <> SUCESSO Then gError 126166

    If Not (objContabAutomatica Is Nothing) Then
    
        lErro = objContabAutomatica.Finaliza_Contab()
        If lErro <> SUCESSO Then gError 32216
        
    End If
    
    'confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 7726

    For i = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(i))
    Next
    
    BorderoChequePre_Atualizar4 = SUCESSO

    Exit Function

Erro_BorderoChequePre_Atualizar4:

    BorderoChequePre_Atualizar4 = gErr

    Select Case gErr

        Case 7724, 7737, 7739, 32215, 32216, 56635, 56639, 126145, 126166
        
        Case 7740
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 7726
          Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case 7736
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148124)

    End Select

    Call Transacao_Rollback
    
    For i = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(i))
    Next
    
    Exit Function

End Function

Private Function BorderoChequePre_Atualizar7(ByVal objBorderoChequePre As ClassBorderoChequePre, ByVal dValorChequeLojaEsp As Double, ByVal dValorChequeLojaNEsp As Double) As Long
'prepara e insere o movto de caixa central correspondente a saida dos cheques do loja

Dim objMovimentoCaixa As New ClassMovimentoCaixa
Dim lNumMovto As Long
Dim lSequencial As Long
Dim objCCMovDia As New ClassCCMovDia
Dim alComando(1 To 1) As Long
Dim iIndice As Integer
Dim lErro As Long
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim objTipoMeioPagtoLojaFilial As New ClassTMPLojaFilial

On Error GoTo Erro_BorderoChequePre_Atualizar7

    If dValorChequeLojaEsp + dValorChequeLojaNEsp <> 0 And giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL_BACKOFFICE Then

        'abre os comandos
        For iIndice = LBound(alComando) To UBound(alComando)
            alComando(iIndice) = Comando_Abrir
            If alComando(iIndice) = 0 Then gError 126151
        Next
    
        'preenche o movimento de caixa com os dados do borderocheque
        Call Mover_Dados_BorderoChequePre_MovCaixa(objBorderoChequePre, objMovimentoCaixa, dValorChequeLojaEsp + dValorChequeLojaNEsp)
    
        'pegar o proximo numero de movimento disponivel na tabela.
        lErro = CF("Config_ObterNumInt", "LojaConfig", "NUM_PROX_MOVCAIXACENTRAL", lNumMovto, 1, objBorderoChequePre.iFilialEmpresa)
        If lErro <> SUCESSO Then gError 126146
        
        'preencher o movimentocaixa com número de movimento novo gerado
        objMovimentoCaixa.lNumMovto = lNumMovto
        
        'cria um
        lErro = CF("Caixa_Sequencial_Automatico", objMovimentoCaixa.iCaixa, objMovimentoCaixa.iFilialEmpresa, lSequencial)
        If lErro <> SUCESSO Then gError 126147
        
        objMovimentoCaixa.lSequencial = lSequencial
    
        'executa a inserção na tabela de movimentos de caixa
        lErro = Comando_Executar(alComando(1), "INSERT INTO MovimentosCaixa(FilialEmpresa,NumMovto,Caixa,Sequencial,Tipo,AdmMeioPagto,Parcelamento,TipoCartao,Numero,DataMovimento,Valor,Historico,Favorecido,CupomFiscal,NumRefInterna,MovtoTransf,MovtoEstorno,Gerente,CodConta,Hora) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
        objMovimentoCaixa.iFilialEmpresa, objMovimentoCaixa.lNumMovto, objMovimentoCaixa.iCaixa, objMovimentoCaixa.lSequencial, objMovimentoCaixa.iTipo, objMovimentoCaixa.iAdmMeioPagto, objMovimentoCaixa.iParcelamento, objMovimentoCaixa.iTipoCartao, objMovimentoCaixa.lNumero, objMovimentoCaixa.dtDataMovimento, objMovimentoCaixa.dValor, objMovimentoCaixa.sHistorico, objMovimentoCaixa.sFavorecido, objMovimentoCaixa.lCupomFiscal, objMovimentoCaixa.lNumRefInterna, objMovimentoCaixa.lMovtoTransf, objMovimentoCaixa.lMovtoEstorno, objMovimentoCaixa.iGerente, objMovimentoCaixa.iCodConta, objMovimentoCaixa.dHora)
        If lErro <> SUCESSO Then gError 126148
    
        'preenche o ccmovdia com os dados do borderocheque
        Call Mover_Dados_BorderoChequePre_CCMovDia(objBorderoChequePre, objCCMovDia, dValorChequeLojaEsp + dValorChequeLojaNEsp)
    
        'adiciona ao acumulado deb/cred diário
        lErro = CF("CCMovDia_Grava", objCCMovDia)
        If lErro <> SUCESSO Then gError 126149
    
        'adiciona ao acumulado déb/créd mensal
        lErro = CF("CCMov_Grava", objCCMovDia)
        If lErro <> SUCESSO Then gError 126150
    
        If dValorChequeLojaNEsp <> 0 Then
    
            'Valor dos Cheques não Especificados
            objTipoMeioPagtoLojaFilial.dSaldo = dValorChequeLojaNEsp
            objTipoMeioPagtoLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_CHEQUE
            objTipoMeioPagtoLojaFilial.iFilialEmpresa = objMovimentoCaixa.iFilialEmpresa
    
            'Função que Serve para atualizar Saldo dos cheques nao especificados
            lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTipoMeioPagtoLojaFilial)
            If lErro <> SUCESSO Then gError 126180
    
        End If
    
        If dValorChequeLojaEsp <> 0 Then
    
            'Mover Valor dos Cheques Especificados para admMeioPagtoCondPagto.Saldo
            objAdmMeioPagtoCondPagto.dSaldo = dValorChequeLojaEsp
    
            'Vincula-se ao Meio_Pagamento_Cheque para o AdmMeioPagtoCondPagto.iAdmMeioPagto
            objAdmMeioPagtoCondPagto.iAdmMeioPagto = MEIO_PAGAMENTO_CHEQUE
    
            'Vincula-se ao Pagamento_Avista para o AdmMeioPagtoCondPagto.parcelamento
            objAdmMeioPagtoCondPagto.iParcelamento = PARCELAMENTO_AVISTA
    
            'Vincula-se FilialEmpresa a o Meio de Pagamento
            objAdmMeioPagtoCondPagto.iFilialEmpresa = objMovimentoCaixa.iFilialEmpresa
    
            'Função para Alteração de Saldo
            lErro = CF("AdmMeioPagtoCondPagto_Altera_Saldo", objAdmMeioPagtoCondPagto)
            If lErro <> SUCESSO Then gError 126181
    
        End If
    
        'fecha os comandos
        For iIndice = LBound(alComando) To UBound(alComando)
            Call Comando_Fechar(alComando(iIndice))
        Next

    End If

    BorderoChequePre_Atualizar7 = SUCESSO

    Exit Function

Erro_BorderoChequePre_Atualizar7:

    BorderoChequePre_Atualizar7 = gErr

    Select Case gErr

        Case 126146, 126147, 126149, 126150, 126180, 126181

        Case 126148
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_INSERCAO", gErr, objMovimentoCaixa.iCaixa, objMovimentoCaixa.lSequencial)

        Case 126151
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148125)

    End Select

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Sub Mover_Dados_BorderoChequePre_CCMovDia(objBorderoChequePre As ClassBorderoChequePre, objCCMovDia As ClassCCMovDia, ByVal dValorChequeLoja As Double)

On Error GoTo Erro_Mover_Dados_BorderoChequePre_CCMovDia

    'preenche um movdia com os dados de um borderocheque
    objCCMovDia.dDeb = dValorChequeLoja
    objCCMovDia.dtData = objBorderoChequePre.dtDataEmissao
    objCCMovDia.iCodCaixa = CODIGO_CAIXA_CENTRAL
    objCCMovDia.iFilialEmpresa = objBorderoChequePre.iFilialEmpresa
    objCCMovDia.iParcelamento = PARCELAMENTO_AVISTA
    objCCMovDia.iAdmMeioPagto = MEIO_PAGAMENTO_CHEQUE
    objCCMovDia.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_CHEQUE

    Exit Sub

Erro_Mover_Dados_BorderoChequePre_CCMovDia:

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148126)

    End Select

    Exit Sub

End Sub


Private Sub Mover_Dados_BorderoChequePre_MovCaixa(objBorderoChequePre As ClassBorderoChequePre, objMovimentoCaixa As ClassMovimentoCaixa, ByVal dValorChequeLoja As Double)

On Error GoTo Erro_Mover_Dados_BorderoChequePre_MovCaixa

    'preenche o movimentocaixa com os dados do borderô
    objMovimentoCaixa.dHora = CDbl(Time)
    objMovimentoCaixa.dtDataMovimento = objBorderoChequePre.dtDataEmissao
    objMovimentoCaixa.dValor = dValorChequeLoja
    objMovimentoCaixa.iAdmMeioPagto = MEIO_PAGAMENTO_CHEQUE
    objMovimentoCaixa.iCaixa = CODIGO_CAIXA_CENTRAL
    objMovimentoCaixa.iCodConta = objBorderoChequePre.iCodNossaConta
    objMovimentoCaixa.iFilialEmpresa = objBorderoChequePre.iFilialEmpresa
    objMovimentoCaixa.iParcelamento = PARCELAMENTO_AVISTA
    objMovimentoCaixa.iTipo = MOVIMENTOCAIXA_BORDERO_CHEQUEPRE
    objMovimentoCaixa.lNumRefInterna = objBorderoChequePre.lNumBordero
    
    Exit Sub

Erro_Mover_Dados_BorderoChequePre_MovCaixa:

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148127)

    End Select

    Exit Sub

End Sub

Private Function BorderoChequePre_MovCCI_Grava(ByVal objBorderoChequePre As ClassBorderoChequePre, ByVal dValorChequeLoja As Double) As Long
'prepara e insere o movto de cta corrente correspondente a saida dos cheques de loja da conta cheque pre

Dim lErro As Long
Dim objContasCorrentesInternas As New ClassContasCorrentesInternas
Dim objMovContaCorrente As New ClassMovContaCorrente
Dim objCCI As New ClassContasCorrentesInternas

On Error GoTo Erro_BorderoChequePre_MovCCI_Grava

    If dValorChequeLoja <> 0 Then

        objCCI.iFilialEmpresa = objBorderoChequePre.iFilialEmpresa
    
        'Retorna o codigo da conta de cheque pre da filial passada como parametro.
        lErro = CF("CCI_Le_ContaChequePre", objCCI)
        If lErro <> SUCESSO And lErro <> 126131 Then gError 126163
    
        If lErro <> SUCESSO Then gError 126164
        
        'Incluir o deposito do bordero na conta
        objMovContaCorrente.dtDataMovimento = objBorderoChequePre.dtDataEmissao
        objMovContaCorrente.dValor = dValorChequeLoja
        objMovContaCorrente.iCodConta = objCCI.iCodigo
        objMovContaCorrente.iFilialEmpresa = objBorderoChequePre.iFilialEmpresa
        objMovContaCorrente.iPortador = 0
        objMovContaCorrente.iTipo = MOVCCI_BORDERO_CHEQUE_PRE_SAQ
        objMovContaCorrente.iTipoMeioPagto = Cheque
        objMovContaCorrente.lNumRefInterna = objBorderoChequePre.lNumBordero
        objMovContaCorrente.sHistorico = "Saida de Cheque por BorderoChequePre"
        objMovContaCorrente.sNumRefExterna = ""
    
        objMovContaCorrente.iConciliado = NAO_CONCILIADO
        objMovContaCorrente.iExcluido = MOVCONTACORRENTE_NAO_EXCLUIDO
    
        'Grava o Pagamento no BD
        lErro = CF("MovCCI_Grava_PagRec", objMovContaCorrente)
        If lErro <> SUCESSO Then gError 126165
        
    End If
        
    BorderoChequePre_MovCCI_Grava = SUCESSO
     
    Exit Function
    
Erro_BorderoChequePre_MovCCI_Grava:

    BorderoChequePre_MovCCI_Grava = gErr
     
    Select Case gErr
          
        Case 126163, 126165
        
        Case 126164
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTACHEQUEPRE_INEXISTENTE", gErr, objBorderoChequePre.iFilialEmpresa)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148128)
     
    End Select
     
    Exit Function

End Function


Public Function ChequeBordero_Inserir(ByVal lNumBordero As Long, ByVal lNumIntCheque As Long, ByVal iTipoBordero As Integer) As Long
'Função que recebe um número de Bordero, um número interno de cheque e um tipo de borderô e insere na tabela ChequeBordero.
'DEVE ser chamada dentro de transação.

Dim alComando(0 To 0) As Long
Dim lErro As Long
Dim iIndice As Integer
Dim lNumIntDoc As Long

On Error GoTo Erro_ChequeBordero_Inserir

    'abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
    
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 109124
    
    Next
    
    'gera um número altomático para o NumIntDoc da tabela ChequeBordero
    lErro = CF("Config_ObterNumInt", "CPRConfig", "NUM_PROX_CHEQUEBORDERO", lNumIntDoc)
    If lErro <> SUCESSO Then gError 109125
    
    'insere na tabela de CHEQUEBordero
    lErro = Comando_Executar(alComando(0), "INSERT " & _
                                           "INTO ChequeBordero " & _
                                           "(NumIntDoc,NumIntCheque,FilialEmpresa,NumBordero,TipoBordero) " & _
                                           "VALUES (?,?,?,?,?)", _
                                           lNumIntDoc, lNumIntCheque, giFilialEmpresa, lNumBordero, iTipoBordero)
    If lErro <> AD_SQL_SUCESSO Then gError 109123
    
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    ChequeBordero_Inserir = SUCESSO
    
    Exit Function
    
Erro_ChequeBordero_Inserir:
    
    ChequeBordero_Inserir = gErr
    
    Select Case gErr
    
        Case 109123
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CHEQUEBORDERO", gErr, lNumBordero)
            
        Case 109125
        
        Case 109124
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
    
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148129)
    
    End Select
    
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Private Function BorderoChequePre_Atualizar1(ByVal objBorderoChequePre As ClassBorderoChequePre, ByVal objChequePre As ClassChequePre, ByVal colBaixaParcRec As colBaixaParcRec, alComando() As Long, dValorChequeLojaEsp As Double, dValorChequeLojaNEsp As Double, sMsgDebRecCli As String) As Long
'Atualizar o cheque pre e inclui na colecao as baixas de parcelas correspondentes ao seu deposito
'devolve em dValorChequeLoja a soma dos cheques do loja
 
Dim lErro As Long
Dim objBaixaReceber As New ClassBaixaReceber
Dim tChequePre As typeChequePre

On Error GoTo Erro_BorderoChequePre_Atualizar1
 
    lErro = Comando_ExecutarPos(alComando(1), "SELECT FilialEmpresa, Cliente, Filial, Localizacao, Valor, SequencialLoja, NaoEspecificado FROM ChequePre WHERE NumIntCheque = ? AND FilialEmpresa =?", 0, tChequePre.iFilialEmpresa, tChequePre.lCliente, tChequePre.iFilial, tChequePre.iLocalizacao, tChequePre.dValor, tChequePre.lSequencialLoja, tChequePre.iNaoEspecificado, objChequePre.lNumIntCheque, giFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 56641
    
    lErro = Comando_BuscarProximo(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 56642
    If lErro <> AD_SQL_SUCESSO Then gError 56643
 
    lErro = Comando_LockExclusive(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 56644
 
    objChequePre.iFilialEmpresa = tChequePre.iFilialEmpresa
    objChequePre.lCliente = tChequePre.lCliente
    objChequePre.iFilial = tChequePre.iFilial

    If tChequePre.dValor <> objChequePre.dValor Then gError 56645
    If tChequePre.iLocalizacao <> CHEQUEPRE_LOCALIZACAO_BACKOFFICE Then gError 56646
    
    lErro = Comando_ExecutarPos(alComando(2), "UPDATE ChequePre SET Localizacao = ?", alComando(1), CHEQUEPRE_LOCALIZACAO_BANCO)
    If lErro <> AD_SQL_SUCESSO Then gError 117505
    
    lErro = ChequeBordero_Inserir(objBorderoChequePre.lNumBordero, objChequePre.lNumIntCheque, objBorderoChequePre.iTipoBordero)
    If lErro <> SUCESSO Then gError 7727
 
    'se nao for cheque do loja. Pois os cheques do loja nao tem titulos associados.
    If tChequePre.lSequencialLoja = 0 Then
 
        'obter a colecao de BaixasParcRec para a poder efetivar a baixa
        lErro = BorderoChequePre_Atualizar2(objBorderoChequePre, objChequePre, colBaixaParcRec, alComando(3), sMsgDebRecCli)
        If lErro <> SUCESSO Then gError 7728
 
    Else
    
        If tChequePre.iNaoEspecificado = CHEQUE_ESPECIFICADO Then
            dValorChequeLojaEsp = dValorChequeLojaEsp + tChequePre.dValor
        Else
            dValorChequeLojaNEsp = dValorChequeLojaNEsp + tChequePre.dValor
        End If
 
    End If
 
    BorderoChequePre_Atualizar1 = SUCESSO
 
    Exit Function
 
Erro_BorderoChequePre_Atualizar1:
 
    BorderoChequePre_Atualizar1 = gErr
 
    Select Case gErr
 
        Case 7727, 7728, 7729
 
        Case 56641, 56642
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUEPRE", gErr, objChequePre.lNumIntCheque)
        
        Case 56643
            Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPRE_INEXISTENTE", gErr, objChequePre.lNumIntCheque)
        
        Case 56644
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CHEQUEPRE", gErr)
                
        Case 56645
            Call Rotina_Erro(vbOKOnly, "ERRO_VALOR_CHEQUEPRE_ALTERADO", gErr)
        
        Case 56646
            Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPRE_NAO_BACKOFFICE", gErr)
        
        Case 117505
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_CHEQUESPRE2", gErr, objChequePre.iBanco, objChequePre.sAgencia, objChequePre.sContaCorrente, objChequePre.lNumero)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148130)
 
    End Select
 
    Exit Function
 
End Function

Private Function BorderoChequePre_Atualizar2(ByVal objBorderoChequePre As ClassBorderoChequePre, ByVal objChequePre As ClassChequePre, ByVal colBaixaParcRec As colBaixaParcRec, ByVal lComando As Long, sMsgDebRecCli As String) As Long
'monta a colecao de parcelas associadas ao cheque pre que serao baixadas atraves do bordero

Dim lErro As Long, dValorBaixado As Double
Dim colDesconto As colDesconto
Dim dSaldoComDesconto As Double
Dim tParcelaReceber As typeParcelaReceber
Dim tInfoParcRec As typeInfoParcRec
Dim lComando1 As Long, objInfoParcRec As ClassInfoParcRec
Dim dValorSobra As Double
Dim dValorSobraTotal As Double

On Error GoTo Erro_BorderoChequePre_Atualizar2

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 91345
    
    lErro = Comando_Executar(lComando, "SELECT NumIntParcela,Multa,Juros, Desconto, ValorRecebto FROM ChequeParcelaRec WHERE NumIntCheque = ?", tInfoParcRec.lNumIntParc, tInfoParcRec.dValorMulta, tInfoParcRec.dValorJuros, tInfoParcRec.dValorDesconto, tInfoParcRec.dValorRecebto, objChequePre.lNumIntCheque)
    If lErro <> AD_SQL_SUCESSO Then gError 91340
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 7709

    If lErro = AD_SQL_SEM_DADOS Then gError 7710
    
    Do While lErro = AD_SQL_SUCESSO
    
        lErro = Comando_Executar(lComando1, "SELECT ParcelasRec.Saldo, ParcelasRec.Status, Cobrador, CarteiraCobranca, NumParcela, Cliente, Filial, NumTitulo FROM ParcelasRec, TitulosRec WHERE ParcelasRec.NumIntDoc = ? AND ParcelasRec.NumIntTitulo = TitulosRec.NumIntDoc", tInfoParcRec.dSaldo, tParcelaReceber.iStatus, tParcelaReceber.iCobrador, tInfoParcRec.iCarteiraCobrador, tInfoParcRec.iNumParcela, tInfoParcRec.lCliente, tInfoParcRec.iFilialCliente, tInfoParcRec.lNumTitulo, tInfoParcRec.lNumIntParc)
        If lErro <> AD_SQL_SUCESSO Then gError 91346
        
        lErro = Comando_BuscarPrimeiro(lComando1)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 91347
        
        If tParcelaReceber.iStatus <> STATUS_ABERTO Then gError 7711
        
        Set objInfoParcRec = New ClassInfoParcRec
        
        With objInfoParcRec
            .lNumIntParc = tInfoParcRec.lNumIntParc
            .lCliente = tInfoParcRec.lCliente
            .iFilialCliente = tInfoParcRec.iFilialCliente
            .lNumTitulo = tInfoParcRec.lNumTitulo
            .iCarteiraCobrador = tInfoParcRec.iCarteiraCobrador
            .iCobrador = tParcelaReceber.iCobrador
            .iNumParcela = tInfoParcRec.iNumParcela
        End With
        
        Call objBorderoChequePre.colInfoParcRec.Add(objInfoParcRec)
        
        If tInfoParcRec.dValorRecebto - (tInfoParcRec.dValorJuros + tInfoParcRec.dValorMulta - tInfoParcRec.dValorDesconto) - tInfoParcRec.dSaldo > DELTA_VALORMONETARIO Then
            dValorBaixado = Round(tInfoParcRec.dSaldo, 2)
            dValorSobra = tInfoParcRec.dValorRecebto - dValorBaixado - (tInfoParcRec.dValorJuros + tInfoParcRec.dValorMulta - tInfoParcRec.dValorDesconto)
        Else
            dValorBaixado = Round(IIf(tInfoParcRec.dValorRecebto - (tInfoParcRec.dValorJuros + tInfoParcRec.dValorMulta - tInfoParcRec.dValorDesconto) > 0, tInfoParcRec.dValorRecebto - (tInfoParcRec.dValorJuros + tInfoParcRec.dValorMulta - tInfoParcRec.dValorDesconto), 0), 2)
            dValorSobra = 0
        End If
        
        'inclui a parcela na colecao
        colBaixaParcRec.Add 0, 0, tInfoParcRec.lNumIntParc, 0, STATUS_LANCADO, tInfoParcRec.dValorMulta, tInfoParcRec.dValorJuros, tInfoParcRec.dValorDesconto, dValorBaixado, tInfoParcRec.dValorRecebto, tParcelaReceber.iCobrador
    
        dValorSobraTotal = dValorSobraTotal + dValorSobra
    
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 7709
    
    Loop
    
    'se o valor do cheque for superior a soma dos valores pagos nos titulos a receber ==>
    'guarda a sobra como um crédito do cliente
    If dValorSobraTotal > DELTA_VALORMONETARIO Then

        dValorSobraTotal = Round(dValorSobraTotal, 2)

        'Insere Debito a Receber Cliente no BD consequente da sobra de um cheque pre que nao chegou a ser totalmente consumido pelas parcelas a receber.
        lErro = DebitoRecCli_Insere_ChequePre(objChequePre, dValorSobraTotal, objBorderoChequePre.dtDataEmissao)
        If lErro <> SUCESSO Then gError 126274
        
        If Len(sMsgDebRecCli) = 0 Then sMsgDebRecCli = "Foi gerado crédito para os seguintes Clientes/Filiais:" & Chr(10) & Chr(13)
        
        sMsgDebRecCli = sMsgDebRecCli & "Cliente: " & objChequePre.lCliente & " Filial: " & objChequePre.iFilial & " no valor de: " & Format(dValorSobraTotal, "standard")
        
    End If
    
    BorderoChequePre_Atualizar2 = SUCESSO

    Call Comando_Fechar(lComando1)

    Exit Function

Erro_BorderoChequePre_Atualizar2:

    BorderoChequePre_Atualizar2 = gErr

    Select Case gErr

        Case 7710
           Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPRE_SEM_PARCELA", gErr)
        
        Case 7711 'a parcela a receber tem que estar em aberto
            Call Rotina_Erro(vbOKOnly, "ERRO_PARCELA_REC_NAO_ABERTA", gErr)

        Case 18980, 126274

        Case 18981
            Call Rotina_Erro(vbOKOnly, "ERRO_VALOR_CHQPRE_DIFERENTE_DESCONTO", gErr)
        
        Case 91345
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 91346, 91347 'leitura parcelas rec
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_REC", gErr)

        Case 91340
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCCHEQUEPRE", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148131)

    End Select

    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Function BaixaReceber_Grava_Recebimento(ByVal objBaixaReceber As ClassBaixaReceber, ByVal colBaixaParcRec As colBaixaParcRec, ByVal objMovContaCorrente As ClassMovContaCorrente, ByVal objContabil As ClassContabil, ByVal lCliente As Long, ByVal iFilialCli As Integer, Optional ByVal objContabAutomatica As ClassContabAutomatica) As Long
'Insere BaixaReceber, MovimentoContaCorrente e BaixasParRec correspondentes no BD

Dim lErro As Long

On Error GoTo Erro_BaixaReceber_Grava_Recebimento
    
    'Inicializa BaixaReceber
    objBaixaReceber.iStatus = STATUS_LANCADO
    objBaixaReceber.iMotivo = MOTIVO_RECEBIMENTO
    objBaixaReceber.dtDataRegistro = gdtDataHoje
    objBaixaReceber.lNumMovCta = objMovContaCorrente.lNumMovto
    objBaixaReceber.sHistorico = "recebto conta " & CStr(objMovContaCorrente.iCodConta) & " sequencial: " & CStr(objMovContaCorrente.lSequencial)
    
    'Grava BaixaReceber e BaixasRecParcela associadas
    lErro = BaixaReceber_Grava(objBaixaReceber, colBaixaParcRec, objContabil, lCliente, iFilialCli, objContabAutomatica)
    If lErro <> SUCESSO Then Error 7731
    
    BaixaReceber_Grava_Recebimento = SUCESSO
    
    Exit Function
    
Erro_BaixaReceber_Grava_Recebimento:

    BaixaReceber_Grava_Recebimento = Err
    
        Select Case Err

        Case 7731  'Já tratados
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148132)

    End Select

    Exit Function

End Function

Public Function BaixaReceber_Grava(ByVal objBaixaReceber As ClassBaixaReceber, ByVal colBaixaParcRec As colBaixaParcRec, ByVal objContabil As ClassContabil, ByVal lCliente As Long, ByVal iFilialCli As Integer, Optional ByVal objContabAutomatica As ClassContabAutomatica, Optional ByVal objEvolucao As Object) As Long
'AVISO: DEVE SER CHAMADA DENTRO DE UMA TRANSAÇÃO
'Insere uma BaixaReceber e as BaixasParcela correspondentes no BD

Dim lErro As Long
Dim lComando As Long, iItem As Integer, lComando2 As Long
Dim lNumIntBaixa As Long, lNumIntBaixaParc As Long
Dim objBaixaParcRec As ClassBaixaParcRec
Dim dValorLivroAux As Double

On Error GoTo Erro_BaixaReceber_Grava

    'Abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 7732
    
    'Abre o comando
    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 7732
    
    'Este teste visa a nao geracao de BaixaReceber se todos os cheques forem oriundos do loja
    If colBaixaParcRec.Count > 0 Then
    
        'Gera código interno para BaixaPagar
        lErro = CF("BaixaReceber_Automatico", lNumIntBaixa)
        If lErro <> SUCESSO Then Error 7733
            
        objBaixaReceber.lNumIntBaixa = lNumIntBaixa
        
        lErro = Comando_Executar(lComando2, "INSERT INTO LogInterno (FilialEmpresa, Usuario, Transacao, Chave, Data, Hora, Doc, Msg) VALUES (?,?,?,?,?,?,?,?)", _
            giFilialEmpresa, gsUsuario, 1, CStr(lNumIntBaixa), Date, CDbl(Time), "Baixa de Titulos a Receber", "Baixa de Titulos a Receber")
        If lErro <> AD_SQL_SUCESSO Then Error 7734
        
        'Obtem NumIntDocs para os registros em BaixasParcRec
        lErro = CF("Config_ObterNumInt", "CPRConfig", "NUM_PROX_BAIXAPARCREC", lNumIntBaixaParc, colBaixaParcRec.Count)
        If lErro <> AD_SQL_SUCESSO Then Error 41651
        
        'Insere novo registro na tabela BaixasRec
        lErro = Comando_Executar(lComando, "INSERT INTO BaixasRec (NumIntBaixa, Status, Historico, Motivo, Data, DataContabil, DataRegistro, NumMovCta, NumIntDoc, NumIntCheque, FilialEmpresaCheque,NumIntDocBaixaAgrupada, HoraRegistro) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", lNumIntBaixa, objBaixaReceber.iStatus, objBaixaReceber.sHistorico, objBaixaReceber.iMotivo, objBaixaReceber.dtData, objBaixaReceber.dtDataContabil, objBaixaReceber.dtDataRegistro, objBaixaReceber.lNumMovCta, objBaixaReceber.lNumIntDoc, objBaixaReceber.lNumIntCheque, objBaixaReceber.iFilialEmpresaCheque, objBaixaReceber.lNumIntDocBaixaAgrupada, CDbl(Time))
        If lErro <> AD_SQL_SUCESSO Then Error 7734
        
        dValorLivroAux = 0
        'Preenche NumIntDoc e NumIntBaixa na coleção colBaixaParcRec
        iItem = 0
        For Each objBaixaParcRec In colBaixaParcRec
        
            objBaixaParcRec.lNumIntDoc = lNumIntBaixaParc + iItem
            iItem = iItem + 1
            objBaixaParcRec.lNumIntBaixa = lNumIntBaixa
        
            dValorLivroAux = dValorLivroAux + Round(objBaixaParcRec.dValorBaixado, 2)
        
        Next
        
        'Insere Baixas de Parcelas Receber no BD
        If Not (objEvolucao Is Nothing) Then
            lErro = CF("BaixasParcelaRec_Grava", objBaixaReceber, colBaixaParcRec, objContabAutomatica, objEvolucao)
        Else
            lErro = CF("BaixasParcelaRec_Grava", objBaixaReceber, colBaixaParcRec, objContabAutomatica)
        End If
        If lErro <> SUCESSO Then Error 7735
    
    End If
    
    '???? Tem que acertar a contabilizacao para permitir contabilizar os cheques oriundos do loja
    If (gcolModulo.Ativo(MODULO_CONTABILIDADE) = MODULO_ATIVO) Then
    
        'Se a contabilidade não é automatica
        If Not (objContabil Is Nothing) Then
        
            'Grava os dados contábeis (contabilidade)
            lErro = objContabil.Contabil_Gravar_Registro(lNumIntBaixa, lCliente, iFilialCli, DATA_NULA, , 0, , dValorLivroAux)
            If lErro <> SUCESSO Then Error 20544
        
        Else
        
            If gobjCR.iContabSemDet = 1 Then
            
                Set objBaixaReceber.colBaixaParcRec = colBaixaParcRec
                
                If Not (objContabAutomatica Is Nothing) Then
                
                    lErro = objContabAutomatica.GeraContabilizacao(Nothing, Nothing, Nothing, objBaixaReceber)
                    If lErro <> SUCESSO Then Error 32271
                    
                End If
                
            End If
        
        End If
        
    End If
    
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)
    
    BaixaReceber_Grava = SUCESSO
    
    Exit Function
    
Erro_BaixaReceber_Grava:

    BaixaReceber_Grava = Err
    
        Select Case Err

        Case 7732
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 7733, 7735, 20544, 41651, 32271

        Case 7734
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_BAIXAS_REC", Err, lNumIntBaixa)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148133)

    End Select
    
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)

    Exit Function
        
End Function

Function BaixaReceber_Automatico(lNumInt As Long) As Long
'obtem um numero interno para identificar uma nova baixa de titulo a receber

Dim lErro As Long

On Error GoTo Erro_BaixaReceber_Automatico

    lErro = CF("CPRConfig_ObterNumInt", "NUM_PROX_BAIXA_RECEBER", lNumInt)
    If lErro <> SUCESSO Then Error 7719

    BaixaReceber_Automatico = SUCESSO

    Exit Function

Erro_BaixaReceber_Automatico:

    BaixaReceber_Automatico = Err

    Select Case Err

        Case 7719

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148134)

    End Select

    Exit Function

End Function

Private Function BorderoChequePre_Inserir(ByVal objBorderoChequePre As ClassBorderoChequePre) As Long
'insere um registro correspondente a criacao de um bordero de cheques pre-datados
'TEM QUE SER CHAMADO DENTRO DE TRANSACAO
Dim lComando As Long, lErro As Long
On Error GoTo Erro_BorderoChequePre_Inserir

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 7741
    
    lErro = Comando_Executar(lComando, "INSERT INTO BorderosChequesPre (NumBordero,CodNossaConta,DataEmissao,DataDeposito,DataContabil ) VALUES(?,?,?,?,?)", objBorderoChequePre.lNumBordero, objBorderoChequePre.iCodNossaConta, objBorderoChequePre.dtDataEmissao, objBorderoChequePre.dtDataDeposito, objBorderoChequePre.dtDataContabil)
    If lErro <> AD_SQL_SUCESSO Then Error 7738

    lErro = Comando_Fechar(lComando)
    
    BorderoChequePre_Inserir = SUCESSO

    Exit Function

Erro_BorderoChequePre_Inserir:

    BorderoChequePre_Inserir = Err

    Select Case Err

        Case 7741
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 7738
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_BORDERO_CHEQUE_PRE", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148135)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Public Function ComissoesVendasBaixar(ByVal objComissoesPag As ClassComissoesPag) As Long
'Atualiza as comissões de acordo com os parâmetros passados
'objComissoesPag RECEBE(Input) os parâmetros indicando se é para baixar ou cancelar baixa das comissões,
'e os critérios que devem ser utilizados para selecionar as comissões que serão alteradas

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_ComissoesVendasBaixar

    'Abre transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 102066
    
    'Executa a atualização na tabela de comissões
    lErro = ComissoesVendasBaixar_EmTrans(objComissoesPag)
    If lErro <> SUCESSO Then gError 102073
    
    'confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 102072

    ComissoesVendasBaixar = SUCESSO
    
    Exit Function
    
Erro_ComissoesVendasBaixar:

    ComissoesVendasBaixar = gErr
    
    Select Case gErr
    
        Case 102066
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
        
        Case 102073
        
        Case 102072
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148136)
            
    End Select
    
    Call Transacao_Rollback
    
    Exit Function

End Function

'*** Função refeita por Luiz Nogueira em 13/05/02 ***
'A função passou a receber objComissoesPag no lugar de um monte de variáveis independentes
'A função passou a ser chamada em transação
Public Function ComissoesVendasBaixar_EmTrans(ByVal objComissoesPag As ClassComissoesPag) As Long
'Atualiza o status (baixado ou liberado) das comissões selecionadas conforme os parâmetros passados em obj|ComissoesPag
'objComissoesPag RECEBE(Input) os parâmetros indicando se é para baixar ou cancelar baixa das comissões,
'e os critérios que devem ser utilizados para selecionar as comissões que serão alteradas

'para desmarcar passar dtDataBaixa como DATA_NULA
'para vendedor nao preenchido usar codigo zero
'para data nao preenchida usar DATA_NULA

Dim lErro As Long
Dim iIndice As Long
Dim alComando(1 To 2) As Long
Dim sSelect As String
Dim tComissoesPag As typeComissoesPagVariant

On Error GoTo Erro_ComissoesVendasBaixar_EmTrans

    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 102065
    Next
    
    'monta o SELECT p/obter as comissoes que atendem as condicoes informadas
    Call ComissoesVendasBaixar1(objComissoesPag, sSelect)
    
    'Transfere os dados recebidos no obj para o type
    With tComissoesPag
        
        .vlNumIntComissao = objComissoesPag.lNumIntComissao
        .viCodVendedorIni = objComissoesPag.iCodVendedorIni
        .viCodVendedorFim = objComissoesPag.iCodVendedorFim
        .vdtComisGeradasDe = objComissoesPag.dtComisGeradasDe
        .vdtComisGeradasAte = objComissoesPag.dtComisGeradasAte
        .viTipo = objComissoesPag.iTipo
        .viFilialEmpresa = objComissoesPag.iFilialEmpresa
    
    End With
    
    'Se vai cancelar baixas de comissões
    If (objComissoesPag.dtDataBaixa = DATA_NULA) Then
        
        'Indica que a leitura deve ser feita em cima de comissões baixadas (status baixado)
        tComissoesPag.viStatusAnterior = STATUS_BAIXADO
        
        'Indica que as comissões lidas serão modificadas para liberadas (status liberado)
        tComissoesPag.viStatusNovo = STATUS_LIBERADO
    
    'Senão, ou seja, se vai baixar comissões
    Else
        
        'Indica que a leitura deve ser feita em cima de comissões liberadas (status liberado)
        tComissoesPag.viStatusAnterior = STATUS_LIBERADO
        
        'Indica que as comissões lidas serão modificadas para baixadas (status baixado)
        tComissoesPag.viStatusNovo = STATUS_BAIXADO
    End If
    
    'prepara e executa o comando
    lErro = ComissoesVendasBaixar2(alComando(1), sSelect, tComissoesPag)
    If lErro <> SUCESSO Then gError 102067
    
    'percorre as comissoes atualizando a data de baixa
    lErro = Comando_BuscarProximo(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 102068
    
    'Se não encontrou nenhuma comissão => erro
    If lErro <> AD_SQL_SUCESSO Then gError 102069
    
    'Enquanto houverem comissões para serem atualizadas
    Do While lErro <> AD_SQL_SEM_DADOS
    
        'Atualiza o Status e a data da alteração no BD
        lErro = Comando_ExecutarPos(alComando(2), "UPDATE Comissoes SET Status = ?, DataBaixa = ?", alComando(1), tComissoesPag.viStatusNovo, objComissoesPag.dtDataBaixa)
        If lErro <> AD_SQL_SUCESSO Then gError 102070
        
        'Busca a próxima comissão a ser alterada
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 102071
    
    Loop
    
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next
    
    ComissoesVendasBaixar_EmTrans = SUCESSO
    
    Exit Function
    
Erro_ComissoesVendasBaixar_EmTrans:

    ComissoesVendasBaixar_EmTrans = gErr
    
    Select Case gErr

        Case 102067
        
        Case 102065
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 102068, 102071
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_COMISSOES_BAIXA", gErr)
        
        Case 102069
            Call Rotina_Erro(vbOKOnly, "ERRO_SEM_COMISSOES_BAIXA", gErr)
        
        Case 102070
            Call Rotina_Erro(vbOKOnly, "ERRO_GRAVACAO_BAIXA_COMISSAO", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148137)

    End Select

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Sub ComissoesVendasBaixar1(ByVal objComissoesPag As ClassComissoesPag, sSelect As String)
'Monta o SELECT e a cláusula WHERE de acordo com os filtros passados em objComissoesPag
'objComissoesPag RECEBE(Input) os filtros que indicam o conteúdo da cláusula WHERE
'sSelect RETORNA(Output) o SELECT montado

    sSelect = "SELECT NumIntCom FROM Comissoes WHERE Status = ? AND DataGeracao >= ? AND DataGeracao <= ?"

    'se foi definido um vendedor inicial
    If objComissoesPag.iCodVendedorIni <> 0 Then sSelect = sSelect & " AND CodVendedor >= ?"
    
    'se foi definido um vendedor final
    If objComissoesPag.iCodVendedorFim <> 0 Then sSelect = sSelect & " AND CodVendedor <= ?"
    
    If objComissoesPag.iTipo = COMISSAO_EMISSAO Then sSelect = sSelect & " AND ( TipoTitulo = ? OR TipoTitulo = ? OR TipoTitulo = ? OR TipoTitulo = ? OR TipoTitulo = ?)"
    
    If objComissoesPag.iTipo = COMISSAO_BAIXA Then sSelect = sSelect & " AND TipoTitulo = ?"
    
    If objComissoesPag.iFilialEmpresa <> EMPRESA_TODA Then sSelect = sSelect & " AND FilialEmpresa = ?"
    
End Sub

Private Function ComissoesVendasBaixar2(ByVal lComando As Long, ByVal sSelect As String, tComissoesPag As typeComissoesPagVariant) As Long
'prepara e executa o comando que obtem as comissoes a serem baixadas
'lComando RECEBE(Input) o lComando utilizado para preparar e executar o SELECT
'sSelect RECEBE(Input) o comando SELECT que será efetuado no BD
'tComissoesPag RECEBE(Input) as variáveis que serão usadas na preparação do SELECT e que posteriormente receberão os seus resultados

Dim lErro As Long
Dim avTipoEmissao(1 To 5) As Variant
Dim vTipoBaixa As Variant
Dim vFilialEmpresa As Variant

On Error GoTo Erro_ComissoesVendasBaixar2

    lErro = Comando_PrepararPosInt(lComando, sSelect, 0)
    If lErro <> AD_SQL_SUCESSO Then gError 102051
    
    tComissoesPag.vlNumIntComissao = CLng(tComissoesPag.vlNumIntComissao)
    lErro = Comando_BindVarInt(lComando, tComissoesPag.vlNumIntComissao)
    If lErro <> AD_SQL_SUCESSO Then gError 102052
    
    tComissoesPag.viStatusAnterior = CInt(tComissoesPag.viStatusAnterior)
    lErro = Comando_BindVarInt(lComando, tComissoesPag.viStatusAnterior)
    If lErro <> AD_SQL_SUCESSO Then gError 102053
    
    tComissoesPag.vdtComisGeradasDe = CDate(tComissoesPag.vdtComisGeradasDe)
    lErro = Comando_BindVarInt(lComando, tComissoesPag.vdtComisGeradasDe)
    If lErro <> AD_SQL_SUCESSO Then gError 102054
    
    tComissoesPag.vdtComisGeradasAte = CDate(tComissoesPag.vdtComisGeradasAte)
    lErro = Comando_BindVarInt(lComando, tComissoesPag.vdtComisGeradasAte)
    If lErro <> AD_SQL_SUCESSO Then gError 102055
    
    'se foi definido um vendedor inicial
    If tComissoesPag.viCodVendedorIni <> 0 Then
        lErro = Comando_BindVarInt(lComando, tComissoesPag.viCodVendedorIni)
        If lErro <> AD_SQL_SUCESSO Then gError 102056
    End If
    
    'se foi definido um vendedor final
    If tComissoesPag.viCodVendedorFim <> 0 Then
        lErro = Comando_BindVarInt(lComando, tComissoesPag.viCodVendedorFim)
        If lErro <> AD_SQL_SUCESSO Then gError 102057
    End If
    
    If tComissoesPag.viTipo = COMISSAO_EMISSAO Then
        
        avTipoEmissao(1) = TIPO_NF
        avTipoEmissao(2) = TIPO_TITULO_RECEBER
        avTipoEmissao(3) = TIPO_DEBITO
        avTipoEmissao(4) = TIPO_COMISSAO_AVULSA
        avTipoEmissao(5) = TIPO_COMISSAO_LOJA
                
        lErro = Comando_BindVarInt(lComando, avTipoEmissao(1))
        If lErro <> AD_SQL_SUCESSO Then gError 102058
        
        lErro = Comando_BindVarInt(lComando, avTipoEmissao(2))
        If lErro <> AD_SQL_SUCESSO Then gError 102059
        
        lErro = Comando_BindVarInt(lComando, avTipoEmissao(3))
        If lErro <> AD_SQL_SUCESSO Then gError 102060
    
        lErro = Comando_BindVarInt(lComando, avTipoEmissao(4))
        If lErro <> AD_SQL_SUCESSO Then gError 102061
    
        lErro = Comando_BindVarInt(lComando, avTipoEmissao(5))
        If lErro <> AD_SQL_SUCESSO Then gError 126308
    
    End If
    
    If tComissoesPag.viTipo = COMISSAO_BAIXA Then
        
        vTipoBaixa = TIPO_PARCELA
        
        lErro = Comando_BindVarInt(lComando, vTipoBaixa)
        If lErro <> AD_SQL_SUCESSO Then gError 102062
        
    End If
    
    If tComissoesPag.viFilialEmpresa <> EMPRESA_TODA Then
        vFilialEmpresa = tComissoesPag.viFilialEmpresa
        lErro = Comando_BindVarInt(lComando, vFilialEmpresa)
        If lErro <> AD_SQL_SUCESSO Then gError 102063
    End If
        
    lErro = Comando_ExecutarInt(lComando)
    If lErro <> AD_SQL_SUCESSO Then gError 102064
    
    ComissoesVendasBaixar2 = SUCESSO
    
    Exit Function
    
Erro_ComissoesVendasBaixar2:

    ComissoesVendasBaixar2 = gErr
    
    Select Case gErr

        Case 102051 To 102064, 126308
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_COMISSOES_BAIXA", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148138)

    End Select

    Exit Function

End Function

Function MovContaCorrente_Pagto_Cancelar(ByVal objMovContaCorrente As ClassMovContaCorrente) As Long
'cancela (exclui) um movto de cta corrente correspondente a pagto de titulo
'objMovContaCorrente tem que vir com lNumMovto, iCodConta e lSequencial preenchidos
Dim lErro As Long, lTransacao As Long
On Error GoTo Erro_MovContaCorrente_Pagto_Cancelar

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 7819

    'exclui as baixas associadas ao movto
    lErro = BaixasPagar_Movto_Exclui(objMovContaCorrente.lNumMovto)
    If lErro <> SUCESSO Then Error 7821

    'exclui o movto
    lErro = MovCCI_Exclui_EmTransacao(objMovContaCorrente)
    If lErro <> SUCESSO Then Error 7887

    lErro = ChequePrePag_Reabre(objMovContaCorrente.lNumMovto)
    If lErro <> SUCESSO Then Error 7887

    'confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 7820

    MovContaCorrente_Pagto_Cancelar = SUCESSO

    Exit Function

Erro_MovContaCorrente_Pagto_Cancelar:

    MovContaCorrente_Pagto_Cancelar = Err

    Select Case Err

        Case 7821, 7887
        
        Case 7819
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 7820
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148139)

    End Select

    Call Transacao_Rollback

    Exit Function

End Function

Private Function BaixasPagar_Movto_Exclui(ByVal lNumMovto As Long) As Long
'Exclui as baixas associadas a um movto de cta corrente
'No caso de pagto antecipado pode nao haver nenhuma baixa
Dim lErro As Long, lNumIntBaixa As Long
Dim lComandoSel As Long, lComandoMod As Long, objContabil As ClassContabil, iStatus As Integer

On Error GoTo Erro_BaixasPagar_Movto_Exclui

    lComandoSel = Comando_Abrir()
    If lComandoSel = 0 Then gError 7822

    lComandoMod = Comando_Abrir()
    If lComandoMod = 0 Then gError 7823

    lErro = Comando_ExecutarPos(lComandoSel, "SELECT Status, NumIntBaixa FROM BaixasPag WHERE NumMovCta = ?", 0, iStatus, lNumIntBaixa, lNumMovto)
    If lErro <> AD_SQL_SUCESSO Then gError 7824

    lErro = Comando_BuscarProximo(lComandoSel)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 7825

    If lErro = AD_SQL_SEM_DADOS Then gError 108793
    
    Do While lErro <> AD_SQL_SEM_DADOS
        
        'Se a baixa tiver sido cancelada => Erro
        If iStatus = STATUS_EXCLUIDO Then gError 108794
        
        lErro = Comando_LockExclusive(lComandoSel)
        If lErro <> AD_SQL_SUCESSO Then gError 7826

        'excluir as BaixasParcPag associadas
        lErro = BaixasParcPag_Exclui(lNumIntBaixa)
        If lErro <> SUCESSO Then gError 7827

        lErro = Comando_ExecutarPos(lComandoMod, "UPDATE BaixasPag SET Status = ?", lComandoSel, STATUS_EXCLUIDO)
        If lErro <> AD_SQL_SUCESSO Then gError 7828

        If gcolModulo.Ativo(MODULO_CONTABILIDADE) = MODULO_ATIVO Then
        
            Set objContabil = New ClassContabil
            
            lErro = objContabil.Contabil_DesfazContabilizacao1(GRUPOTRANSEXC_BAIXAPAG, lNumIntBaixa, gdtDataAtual)
            If lErro <> SUCESSO Then gError 7829
            
        End If
    
        lErro = Comando_BuscarProximo(lComandoSel)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 7830

    Loop

    Call Comando_Fechar(lComandoSel)
    Call Comando_Fechar(lComandoMod)

    BaixasPagar_Movto_Exclui = SUCESSO

    Exit Function

Erro_BaixasPagar_Movto_Exclui:

    BaixasPagar_Movto_Exclui = gErr

    Select Case gErr
    
        Case 7827
        
        Case 7822, 7823
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 7824, 7825, 7830
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BAIXAS_MOVTO_CTA", gErr)
        
        Case 7826
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_BAIXAPAG", gErr)
        
        Case 7828
            Call Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_BAIXAPAG", gErr)
        
        Case 7829
            Call Rotina_Erro(vbOKOnly, "ERRO_UNLOCK_BAIXAPAG", gErr)
            
        Case 108793
            Call Rotina_Erro(vbOKOnly, "ERRO_BAIXAPAG_INEXISTENTE_PAG_ASSOCIADO", gErr)
        
        Case 108794
            Call Rotina_Erro(vbOKOnly, "ERRO_BAIXACANC_ASSOCIADA_PAG", gErr)
                        
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148140)

    End Select

    Call Comando_Fechar(lComandoSel)
    Call Comando_Fechar(lComandoMod)

    Exit Function

End Function

Private Function BaixaParcPag_DesfazContabilizacao(ByVal lNumIntBaixaParcPag As Long) As Long
'desfaz a contabilizacao (exclui lancamentos pendentes ou estorna lancamentos atualizados)

Dim lErro As Long, objContabil As ClassContabil, objTela As Object

On Error GoTo Erro_BaixaParcPag_DesfazContabilizacao

    If gcolModulo.Ativo(MODULO_CONTABILIDADE) = MODULO_ATIVO Then
    
        Set objContabil = New ClassContabil
        
        lErro = objContabil.Contabil_DesfazContabilizacao1(GRUPOTRANSEXC_BAIXAPARCPAG, lNumIntBaixaParcPag, gdtDataAtual)
        If lErro <> SUCESSO Then Error 32222
        
    End If
    
    BaixaParcPag_DesfazContabilizacao = SUCESSO
     
    Exit Function
    
Erro_BaixaParcPag_DesfazContabilizacao:

    BaixaParcPag_DesfazContabilizacao = Err
     
    Select Case Err
           
        Case 32222
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148141)
     
    End Select
     
    Exit Function

End Function

Private Function BaixasParcPag_Exclui(ByVal lNumIntBaixa As Long) As Long
'exclui as BaixasParcPag associadas a uma baixa identificada por lNumIntBaixa
Dim lErro As Long, lNumIntParc As Long, iSequencial As Integer, dValorBaixado As Double
Dim lComandoSel As Long, lComandoMod As Long, lNumIntDoc As Long, iStatus As Integer

On Error GoTo Erro_BaixasParcPag_Exclui

    lComandoSel = Comando_Abrir()
    If lComandoSel = 0 Then gError 7831

    lComandoMod = Comando_Abrir()
    If lComandoMod = 0 Then gError 7832

    lErro = Comando_ExecutarPos(lComandoSel, "SELECT Status, NumIntDoc, NumIntParcela, Sequencial, ValorBaixado FROM BaixasParcPag WHERE NumIntBaixa = ?", 0, iStatus, lNumIntDoc, lNumIntParc, iSequencial, dValorBaixado, lNumIntBaixa)
    If lErro <> AD_SQL_SUCESSO Then gError 7833

    lErro = Comando_BuscarProximo(lComandoSel)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 7834

    If lErro = AD_SQL_SEM_DADOS Then gError 108795
    
    Do While lErro <> AD_SQL_SEM_DADOS

        'Se a baixa tiver sido cancelada => Erro
        If iStatus = STATUS_EXCLUIDO Then gError 108796
        
        lErro = Comando_LockExclusive(lComandoSel)
        If lErro <> AD_SQL_SUCESSO Then gError 7836

        lErro = ParcelaPag_CancelarBaixa(lNumIntParc, dValorBaixado)
        If lErro <> SUCESSO Then gError 7837

        lErro = Comando_ExecutarPos(lComandoMod, "UPDATE BaixasParcPag SET Status = ?, DataCancelamento = ?", lComandoSel, STATUS_EXCLUIDO, gdtDataAtual)
        If lErro <> AD_SQL_SUCESSO Then gError 7838

        'desfaz a contabilizacao (exclui lancamentos pendentes ou estorna lancamentos atualizados)
        lErro = BaixaParcPag_DesfazContabilizacao(lNumIntDoc)
        If lErro <> SUCESSO Then gError 32223
        
        lErro = Comando_Unlock(lComandoSel)
        If lErro <> AD_SQL_SUCESSO Then gError 7839

        lErro = Comando_BuscarProximo(lComandoSel)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 7835

    Loop

    Call Comando_Fechar(lComandoSel)
    Call Comando_Fechar(lComandoMod)

    BaixasParcPag_Exclui = SUCESSO

    Exit Function

Erro_BaixasParcPag_Exclui:

    BaixasParcPag_Exclui = gErr

    Select Case gErr

        Case 7837, 32223
        
        Case 7831, 7832
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 7833, 7834, 7835
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BAIXAPARCPAG", gErr)
            
        Case 7836
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_BAIXAPARCPAG", gErr)
        
        Case 7838
            Call Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_BAIXAPARCPAG", gErr)
        
        Case 7839
            Call Rotina_Erro(vbOKOnly, "ERRO_UNLOCK_BAIXAPARCPAG", gErr)
            
        Case 108795
            Call Rotina_Erro(vbOKOnly, "ERRO_BAIXAPARCPAG_INEXISTENTE_PAG_ASSOCIADO", gErr)
        
        Case 108796
            Call Rotina_Erro(vbOKOnly, "ERRO_BAIXAPARCCANC_ASSOCIADA_PAG", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148142)

    End Select

    Call Comando_Fechar(lComandoSel)
    Call Comando_Fechar(lComandoMod)

    Exit Function

End Function

Private Function ParcelaPag_CancelarBaixa(ByVal lNumIntParc As Long, ByVal dValorBaixado As Double) As Long
'desfaz o efeito de uma baixa sobre uma parcela

Dim lErro As Long

On Error GoTo Erro_ParcelaPag_CancelarBaixa

    lErro = ParcelaPag_CancelarBaixaTitNaoBaixado(lNumIntParc, dValorBaixado)
    If lErro <> SUCESSO And lErro <> 7845 Then Error 7840

    If lErro <> SUCESSO Then
        lErro = ParcelaPag_CancelarBaixaTitBaixado(lNumIntParc, dValorBaixado)
        If lErro <> SUCESSO Then Error 7841
    End If

    ParcelaPag_CancelarBaixa = SUCESSO

    Exit Function

Erro_ParcelaPag_CancelarBaixa:

    ParcelaPag_CancelarBaixa = Err

    Select Case Err

        Case 7840, 7841

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148143)

    End Select

    Exit Function

End Function

Private Function ParcelaPag_CancelarBaixaTitNaoBaixado(ByVal lNumIntParc As Long, ByVal dValorBaixado As Double) As Long
'desfaz o efeito de uma baixa sobre uma parcela associada a um titulo nao baixado

Dim i As Integer, lErro As Long, dSaldoAnteriorParc As Double, dValorParc As Double, iStatus As Integer, lNumIntTitulo As Long
Dim alComando(1 To 4) As Long, dNovoSaldoParc As Double, dNovoSaldoTit As Double, dValorTit As Double, dSaldoAnteriorTit As Double
Dim dValorIRRF As Double, dValorINSSRet As Double, iINSSRetido As Integer
Dim dPISRetido As Double, dISSRetido As Double, dCOFINSRetido As Double, dCSLLRetido As Double
Dim iTipoCobranca As Integer, dDif As Double

On Error GoTo Erro_ParcelaPag_CancelarBaixaTitNaoBaixado

    For i = 1 To 4
        alComando(i) = Comando_Abrir()
        If alComando(i) = 0 Then Error 7842
    Next

    'selecionar a parcela
    lErro = Comando_ExecutarPos(alComando(1), "SELECT NumIntTitulo, Saldo, Valor, Status, TipoCobranca FROM ParcelasPag WHERE NumIntDoc = ?", 0, lNumIntTitulo, dSaldoAnteriorParc, dValorParc, iStatus, iTipoCobranca, lNumIntParc)
    If lErro <> AD_SQL_SUCESSO Then Error 7843

    lErro = Comando_BuscarProximo(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7844

    'nao encontrou a parcela
    If lErro <> AD_SQL_SUCESSO Then Error 7845

    lErro = Comando_LockExclusive(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then Error 7846

    dNovoSaldoParc = dSaldoAnteriorParc + dValorBaixado
    If dNovoSaldoParc > (dValorParc + 0.01) Then Error 7847
    If dNovoSaldoParc > dValorParc Then dNovoSaldoParc = dValorParc
    
    dDif = dNovoSaldoParc - dSaldoAnteriorParc

    If iStatus = STATUS_BAIXADO Then iStatus = STATUS_ABERTO

    'alterar status e saldo da parcela
    'If iTipoCobranca <> TIPO_COBRANCA_CHEQUE_PRE Then
        lErro = Comando_ExecutarPos(alComando(2), "UPDATE ParcelasPag SET Saldo = ?, Status = ?", alComando(1), dNovoSaldoParc, iStatus)
    'Else
    '    lErro = Comando_ExecutarPos(alComando(2), "UPDATE ParcelasPag SET Saldo = ?, Status = ?, TipoCobranca = ?", alComando(1), dNovoSaldoParc, iStatus, TIPO_COBRANCA_CARTEIRA)
    'End If
    If lErro <> AD_SQL_SUCESSO Then Error 7848

    'selecionar o titulo
    lErro = Comando_ExecutarPos(alComando(3), "SELECT Status, Saldo, ValorTotal, ValorIRRF, ValorINSS, INSSRetido, PISRetido, ISSRetido, COFINSRetido, CSLLRetido FROM TitulosPag WHERE NumIntDoc = ?", 0, iStatus, dSaldoAnteriorTit, dValorTit, dValorIRRF, dValorINSSRet, iINSSRetido, dPISRetido, dISSRetido, dCOFINSRetido, dCSLLRetido, lNumIntTitulo)
    If lErro <> AD_SQL_SUCESSO Then Error 7849

    lErro = Comando_BuscarProximo(alComando(3))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7850

    'nao encontrou o titulo
    If lErro <> AD_SQL_SUCESSO Then Error 7851

    'dNovoSaldoTit = dSaldoAnteriorTit + dValorBaixado
    'If dNovoSaldoTit > (dValorTit - (dValorIRRF + dPISRetido + dISSRetido + dCOFINSRetido + dCSLLRetido) - IIf(iINSSRetido = 1, dValorINSSRet, 0) + 0.01) Then Error 59061
    'If dNovoSaldoTit > dValorTit Then dNovoSaldoTit = dValorTit - (dValorIRRF + dPISRetido + dISSRetido + dCOFINSRetido + dCSLLRetido) - IIf(iINSSRetido = 1, dValorINSSRet, 0)
    dNovoSaldoTit = dSaldoAnteriorTit + dDif

    'alterar saldo do titulo
    lErro = Comando_ExecutarPos(alComando(4), "UPDATE TitulosPag SET Saldo = ?", alComando(3), dNovoSaldoTit)
    If lErro <> AD_SQL_SUCESSO Then Error 7852

    lErro = Comando_Unlock(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then Error 7854

    For i = 1 To 4
        Call Comando_Fechar(alComando(i))
    Next

    ParcelaPag_CancelarBaixaTitNaoBaixado = SUCESSO

    Exit Function

Erro_ParcelaPag_CancelarBaixaTitNaoBaixado:

    ParcelaPag_CancelarBaixaTitNaoBaixado = Err

    Select Case Err

        Case 7842
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 7843, 7844
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_PAG", Err)

        Case 7845 'NAO DAR MSG DE ERRO POIS A PARCELA PODE ESTAR VINCULADA A TITULO BAIXADO
            'Call Rotina_Erro(vbOKOnly, "ERRO_PARCELA_PAGAR_INEXISTENTE", Err)

        Case 7846
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_PARCELAS_PAGAR", Err)

        Case 7847
            Call Rotina_Erro(vbOKOnly, "ERRO_SALDO_PARCELA_MAIOR_QUE_VALOR", Err)

        Case 7848
            Call Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_PARCELAS_PAGAR", Err)

        Case 7849, 7850
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TITULOS_PAGAR", Err)

        Case 7851
            Call Rotina_Erro(vbOKOnly, "ERRO_TITULO_PAGAR_INEXISTENTE", Err)

        Case 7852, 59061
            Call Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_TITULOS_PAGAR", Err)

        Case 7854
            Call Rotina_Erro(vbOKOnly, "ERRO_UNLOCK_PARCELAS_PAGAR", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148144)

    End Select

    For i = 1 To 4
        Call Comando_Fechar(alComando(i))
    Next

    Exit Function

End Function

Private Function ParcelaPag_CancelarBaixaTitBaixado(ByVal lNumIntParc As Long, ByVal dValorBaixado As Double) As Long
'desfaz o efeito de uma baixa sobre uma parcela associada a um titulo baixado

Dim i As Integer, lErro As Long, dSaldoAnterior As Double, dValor As Double, iStatus As Integer, lNumIntTitulo As Long
Dim objParcelaPag As New ClassParcelaPagar, objTituloPagar As New ClassTituloPagar
Dim alComando(1 To 12) As Long, dNovoSaldo As Double

On Error GoTo Erro_ParcelaPag_CancelarBaixaTitBaixado

    For i = LBound(alComando) To UBound(alComando)
        alComando(i) = Comando_Abrir()
        If alComando(i) = 0 Then Error 7855
    Next

    'ler a parcela com a baixa cancelada
    objParcelaPag.lNumIntDoc = lNumIntParc
    lErro = CF("ParcelaPagarBaixada_LeMod", objParcelaPag, alComando(1))
    If lErro <> SUCESSO Then Error 7856

    'bloquear a parcela com a baixa cancelada
    lErro = Comando_LockExclusive(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then Error 7857

    lNumIntTitulo = objParcelaPag.lNumIntTitulo

    'ler o titulo associado a parcela
    objTituloPagar.lNumIntDoc = lNumIntTitulo
    lErro = CF("TituloPagarBaixado_LeMod", objTituloPagar, alComando(2)) 'Alterado por Wagner - Chama via CF
    If lErro <> SUCESSO Then Error 7858

    'bloquear o titulo associado a parcela
    lErro = Comando_LockExclusive(alComando(2))
    If lErro <> AD_SQL_SUCESSO Then Error 7859

    'fazer alteracoes no titulo
    dNovoSaldo = dValorBaixado
    If dNovoSaldo > objParcelaPag.dValor + 0.01 Then Error 7860
    If dNovoSaldo > objParcelaPag.dValor Then dNovoSaldo = objParcelaPag.dValor
    objTituloPagar.dSaldo = dNovoSaldo
    objTituloPagar.iStatus = STATUS_LANCADO

    'inclui-lo em TitulosPag
    lErro = CF("TitulosPag_Inserir", objTituloPagar, alComando(3)) 'Alterado por Wagner  - Chama via CF
    If lErro <> SUCESSO Then Error 7861

    'fazer alteracoes na parcela
    objParcelaPag.dSaldo = dNovoSaldo
    If objParcelaPag.iStatus = STATUS_BAIXADO Then objParcelaPag.iStatus = STATUS_ABERTO
    'If objParcelaPag.iTipoCobranca = TIPO_COBRANCA_CHEQUE_PRE Then objParcelaPag.iTipoCobranca = TIPO_COBRANCA_CARTEIRA

    'inclui-la em ParcelasPag
    lErro = CF("ParcelasPag_Inserir", objParcelaPag, alComando(4))
    If lErro <> SUCESSO Then Error 7862

    'exclui-la de ParcelasPagBaixadas
    lErro = CF("ParcelaPagBaixada_Excluir", objParcelaPag, alComando(1), alComando(5))
    If lErro <> SUCESSO Then Error 7863

    'se o titulo tem outras parcelas
    If objTituloPagar.iNumParcelas <> 1 Then
        'transferir as outras parcelas de ParcelasPagBaixadas para ParcelasPag
        lErro = CF("TituloPag_MoverOutrasParc", lNumIntTitulo, alComando(7), alComando(8), alComando(9))
        If lErro <> SUCESSO Then Error 7864
    End If

    If objTituloPagar.sSiglaDocumento = TIPODOC_FATURA_A_PAGAR Then
    
        'transferir notas fiscais de baixadas p/nao baixadas
        lErro = NotasFiscaisPag_CancelarBaixa(lNumIntTitulo, alComando(10), alComando(11), alComando(12))
        If lErro <> SUCESSO Then Error 56751
        
    End If
    
    'excluir o titulo de TitulosPagBaixados
    lErro = TituloPagBaixado_Excluir(objTituloPagar, alComando(2), alComando(6))
    If lErro <> SUCESSO Then Error 7865

    'desbloquear a parcela
    lErro = Comando_Unlock(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then Error 7866

    'desbloquear o titulo
    lErro = Comando_Unlock(alComando(2))
    If lErro <> AD_SQL_SUCESSO Then Error 7867

    For i = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(i))
    Next

    ParcelaPag_CancelarBaixaTitBaixado = SUCESSO

    Exit Function

Erro_ParcelaPag_CancelarBaixaTitBaixado:

    ParcelaPag_CancelarBaixaTitBaixado = Err

    Select Case Err

        Case 7856, 7858, 7861, 7862, 7863, 7864, 7865, 56751

        Case 7855
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 7857
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_PARCELAS_PAGAR_BAIXADA", Err)

        Case 7859
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_TITULOS_PAGAR_BAIXADOS", Err)

        Case 7860
            Call Rotina_Erro(vbOKOnly, "ERRO_SALDO_PARCELA_MAIOR_QUE_VALOR", Err)

        Case 7866
            Call Rotina_Erro(vbOKOnly, "ERRO_UNLOCK_PARCELAS_PAGAR_BAIXADA", Err)

        Case 7867
            Call Rotina_Erro(vbOKOnly, "ERRO_UNLOCK_TITULOS_PAGAR_BAIXADOS", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148145)

    End Select

    For i = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(i))
    Next

    Exit Function

End Function

Function ParcelaPagarBaixada_LeMod(ByVal objParcelaPagar As ClassParcelaPagar, ByVal lComando As Long) As Long
'faz a leitura de um registro da tabela ParcelasPagBaixadas p/objParcelaPagar c/ExecutarPos
'objParcelaPagar.lNumIntDoc entra preenchido
'TEM QUE SER CHAMADO EM TRANSACAO
Dim lErro As Long
Dim tParcelaPagar As typeParcelaPagar

On Error GoTo Erro_ParcelaPagarBaixada_LeMod

    tParcelaPagar.sNossoNumero = String(STRING_NOSSO_NUMERO, 0)
    tParcelaPagar.sCodigoDeBarras = String(STRING_CODIGO_BARRAS_PARC_CPR, 0)
    tParcelaPagar.sCodUsuarioLib = String(STRING_USUARIO_CODIGO, 0)

    lErro = Comando_ExecutarPos(lComando, "SELECT DataVencimento, DataVencimentoReal, Valor, ValorOriginal, MotivoDiferenca, BancoCobrador, NumParcela, Portador, ProxSeqBaixa, Status, TipoCobranca, NumIntTitulo, NossoNumero, CodigoDeBarras, CodUsuarioLib, DataLib FROM ParcelasPagBaixadas WHERE NumIntDoc = ?", 0, _
        tParcelaPagar.dtDataVencimento, tParcelaPagar.dtDataVencimentoReal, tParcelaPagar.dValor, tParcelaPagar.dValorOriginal, tParcelaPagar.iMotivoDiferenca, tParcelaPagar.iBancoCobrador, tParcelaPagar.iNumParcela, tParcelaPagar.iPortador, tParcelaPagar.iProxSeqBaixa, tParcelaPagar.iStatus, tParcelaPagar.iTipoCobranca, tParcelaPagar.lNumIntTitulo, tParcelaPagar.sNossoNumero, tParcelaPagar.sCodigoDeBarras, _
        tParcelaPagar.sCodUsuarioLib, tParcelaPagar.dtDataLib, objParcelaPagar.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then Error 7868

    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7869

    If lErro <> AD_SQL_SUCESSO Then Error 7870

    tParcelaPagar.lNumIntDoc = objParcelaPagar.lNumIntDoc
    tParcelaPagar.dSaldo = 0
    Call ParcelaPag_MoverCamposObj(objParcelaPagar, tParcelaPagar)

    ParcelaPagarBaixada_LeMod = SUCESSO

    Exit Function

Erro_ParcelaPagarBaixada_LeMod:

    ParcelaPagarBaixada_LeMod = Err

    Select Case Err

        Case 7868, 7869
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_PAG_BAIXADA", Err)

        Case 7870
            Call Rotina_Erro(vbOKOnly, "ERRO_PARCELA_PAGAR_BAIXADA_INEXISTENTE", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148146)

    End Select

    Exit Function

End Function

'Alterado de Privete para Public por Wagner
Public Function TitulosPag_Inserir(ByVal objTituloPagar As ClassTituloPagar, ByVal lComandoTitIns As Long) As Long
'auxiliar ao cancelamento de uma baixa

Dim lErro As Long

On Error GoTo Erro_TitulosPag_Inserir

    lErro = Comando_Executar(lComandoTitIns, "INSERT INTO TitulosPag " & _
            "( NumIntDoc, FilialEmpresa, Fornecedor, Filial, SiglaDocumento, NumTitulo, DataEmissao, Status, Saldo, NumParcelas, ValorTotal, ValorSeguro, ValorFrete, OutrasDespesas, ValorProdutos, ValorICMS, ValorICMSSubst, CreditoICMS, ValorIPI, CreditoIPI, ValorIRRF, ValorINSS, INSSRetido, DataRegistro, Observacao, CondicaoPagto, FilialPedCompra, NumPedCompra, PISRetido, ISSRetido, COFINSRetido, CSLLRetido, TaxaMoeda, Natureza, Historico, Ccl) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
            objTituloPagar.lNumIntDoc, objTituloPagar.iFilialEmpresa, objTituloPagar.lFornecedor, objTituloPagar.iFilial, objTituloPagar.sSiglaDocumento, objTituloPagar.lNumTitulo, objTituloPagar.dtDataEmissao, objTituloPagar.iStatus, objTituloPagar.dSaldo, objTituloPagar.iNumParcelas, objTituloPagar.dValorTotal, objTituloPagar.dValorSeguro, objTituloPagar.dValorFrete, objTituloPagar.dOutrasDespesas, objTituloPagar.dValorProdutos, objTituloPagar.dValorICMS, objTituloPagar.dValorICMSSubst, objTituloPagar.iCreditoICMS, objTituloPagar.dValorIPI, objTituloPagar.iCreditoIPI, objTituloPagar.dValorIRRF, objTituloPagar.dValorINSS, objTituloPagar.iINSSRetido, objTituloPagar.dtDataRegistro, objTituloPagar.sObservacao, objTituloPagar.iCondicaoPagto, objTituloPagar.iFilialPedCompra, objTituloPagar.lNumPedCompra, objTituloPagar.dPISRetido, objTituloPagar.dISSRetido, objTituloPagar.dCOFINSRetido, objTituloPagar.dCSLLRetido, objTituloPagar.dTaxaMoeda, objTituloPagar.sNatureza, _
            objTituloPagar.sHistorico, objTituloPagar.sCcl)
    If lErro <> AD_SQL_SUCESSO Then Error 7874

    'Atualiza o Status da NFiscal caso tenha vinculo com Nota Fiscal
    lErro = NFiscal_Altera_Status(objTituloPagar.lNumIntDoc, CPR_TITULO_PAGAR, STATUS_LANCADO)
    If lErro <> SUCESSO Then Error 61287

    TitulosPag_Inserir = SUCESSO

    Exit Function

Erro_TitulosPag_Inserir:

    TitulosPag_Inserir = Err

    Select Case Err

        Case 7874
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_TITULOS_PAG", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148147)

    End Select

    Exit Function

End Function

Function ParcelasPag_Inserir(ByVal objParcelaPagar As ClassParcelaPagar, ByVal lComandoParcIns As Long) As Long
'auxiliar ao cancelamento de uma baixa

Dim lErro As Long

On Error GoTo Erro_ParcelasPag_Inserir

    lErro = Comando_Executar(lComandoParcIns, "INSERT INTO ParcelasPag " & _
        "( NumIntDoc, NumIntTitulo, NumParcela, Status, DataVencimento, DataVencimentoReal, Saldo, Valor, ValorOriginal, MotivoDiferenca, TipoCobranca, Portador, BancoCobrador, ProxSeqBaixa, NossoNumero, CodigoDeBarras, CodUsuarioLib, DataLib) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
        objParcelaPagar.lNumIntDoc, objParcelaPagar.lNumIntTitulo, objParcelaPagar.iNumParcela, objParcelaPagar.iStatus, objParcelaPagar.dtDataVencimento, objParcelaPagar.dtDataVencimentoReal, objParcelaPagar.dSaldo, objParcelaPagar.dValor, objParcelaPagar.dValorOriginal, objParcelaPagar.iMotivoDiferenca, objParcelaPagar.iTipoCobranca, objParcelaPagar.iPortador, objParcelaPagar.iBancoCobrador, objParcelaPagar.iProxSeqBaixa, objParcelaPagar.sNossoNumero, objParcelaPagar.sCodigoDeBarras, objParcelaPagar.sCodUsuarioLib, objParcelaPagar.dtDataLib)
    If lErro <> AD_SQL_SUCESSO Then Error 7875

    ParcelasPag_Inserir = SUCESSO

    Exit Function

Erro_ParcelasPag_Inserir:

    ParcelasPag_Inserir = Err

    Select Case Err

        Case 7875
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_PARCELAS_PAG", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148148)

    End Select

    Exit Function

End Function

Function ParcelaPagBaixada_Excluir(ByVal objParcelaPagar As ClassParcelaPagar, ByVal lComandoSel As Long, ByVal lComandoDel As Long) As Long
'auxiliar ao cancelamento de uma baixa

Dim lErro As Long

On Error GoTo Erro_ParcelaPagBaixada_Excluir

    lErro = Comando_ExecutarPos(lComandoDel, "DELETE FROM ParcelasPagBaixadas", lComandoSel)
    If lErro <> AD_SQL_SUCESSO Then Error 7876

    ParcelaPagBaixada_Excluir = SUCESSO

    Exit Function

Erro_ParcelaPagBaixada_Excluir:

    ParcelaPagBaixada_Excluir = Err

    Select Case Err

        Case 7876
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_PARCELAS_PAGAR_BAIXADAS", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148149)

    End Select

    Exit Function

End Function

Private Function TituloPagBaixado_Excluir(ByVal objTituloPagar As ClassTituloPagar, ByVal lComandoTitSel As Long, ByVal lComandoTitDel As Long) As Long
'auxiliar ao cancelamento de uma baixa

Dim lErro As Long

On Error GoTo Erro_TituloPagBaixado_Excluir

    lErro = Comando_ExecutarPos(lComandoTitDel, "DELETE FROM TitulosPagBaixados", lComandoTitSel)
    If lErro <> AD_SQL_SUCESSO Then Error 7877

    TituloPagBaixado_Excluir = SUCESSO

    Exit Function

Erro_TituloPagBaixado_Excluir:

    TituloPagBaixado_Excluir = Err

    Select Case Err

        Case 7877
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_TITULOS_PAGAR_BAIXADOS", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148150)

    End Select

    Exit Function

End Function

Function TituloPag_MoverOutrasParc(ByVal lNumIntTitulo As Long, ByVal lComandoSel As Long, ByVal lComandoDel As Long, ByVal lComandoIns As Long) As Long
'transfere as parcelas vinculadas a um titulo a pagar de ParcelasPagBaixadas para ParcelasPag
'auxiliar ao cancelamento de uma baixa
'TEM QUE SER CHAMADA DENTRO DE TRANSACAO

Dim lErro As Long
Dim tParcelaPagar As typeParcelaPagar
Dim objParcelaPagar As New ClassParcelaPagar

On Error GoTo Erro_TituloPag_MoverOutrasParc

    tParcelaPagar.sNossoNumero = String(STRING_NOSSO_NUMERO, 0)
    tParcelaPagar.sCodigoDeBarras = String(STRING_CODIGO_BARRAS_PARC_CPR, 0)
    tParcelaPagar.sCodUsuarioLib = String(STRING_USUARIO_CODIGO, 0)
    tParcelaPagar.lNumIntTitulo = lNumIntTitulo 'fixo
    tParcelaPagar.dSaldo = 0

    lErro = Comando_ExecutarPos(lComandoSel, "SELECT NumIntDoc, DataVencimento, DataVencimentoReal, Valor, ValorOriginal, MotivoDiferenca, BancoCobrador, NumParcela, Portador, ProxSeqBaixa, Status, TipoCobranca, NossoNumero, CodigoDeBarras, CodUsuarioLib, DataLib FROM ParcelasPagBaixadas WHERE NumIntTitulo = ?", 0, _
        tParcelaPagar.lNumIntDoc, tParcelaPagar.dtDataVencimento, tParcelaPagar.dtDataVencimentoReal, tParcelaPagar.dValor, tParcelaPagar.dValorOriginal, tParcelaPagar.iMotivoDiferenca, tParcelaPagar.iBancoCobrador, tParcelaPagar.iNumParcela, tParcelaPagar.iPortador, tParcelaPagar.iProxSeqBaixa, tParcelaPagar.iStatus, tParcelaPagar.iTipoCobranca, tParcelaPagar.sNossoNumero, tParcelaPagar.sCodigoDeBarras, _
        tParcelaPagar.sCodUsuarioLib, tParcelaPagar.dtDataLib, lNumIntTitulo)
    If lErro <> AD_SQL_SUCESSO Then Error 7878

    lErro = Comando_BuscarProximo(lComandoSel)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7879

    If lErro = AD_SQL_SEM_DADOS Then Error 19380

    Do While lErro = AD_SQL_SUCESSO

        'verificar se a parcela ainda nao foi baixada ou excluida
        If tParcelaPagar.iStatus <> STATUS_BAIXADO And tParcelaPagar.iStatus <> STATUS_EXCLUIDO Then Error 7880

        Call ParcelaPag_MoverCamposObj(objParcelaPagar, tParcelaPagar)

        'Excluir a parcela da tabela ParcelasPagBaixadas
        lErro = CF("ParcelaPagBaixada_Excluir", objParcelaPagar, lComandoSel, lComandoDel)
        If lErro <> SUCESSO Then Error 7881

        'incluir a parcela na tabela ParcelasPag
        lErro = CF("ParcelasPag_Inserir", objParcelaPagar, lComandoIns)
        If lErro <> SUCESSO Then Error 7882

        lErro = Comando_BuscarProximo(lComandoSel)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7883

    Loop

    TituloPag_MoverOutrasParc = SUCESSO

    Exit Function

Erro_TituloPag_MoverOutrasParc:

    TituloPag_MoverOutrasParc = Err

    Select Case Err

        Case 7881, 7882

        Case 7880 'a parcela deveria estar baixada ou excluida
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_PAG_BAIXADA", Err)

        Case 7878, 7879, 7883, 19380
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_PAG_BAIXADA", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148151)

    End Select

    Exit Function

End Function

Public Function MvPerForn_Exclui_FilialFornecedor(ByVal objFilialFornecedor As ClassFilialFornecedor) As Long 'alterado p/ public por Leo em 01/02/02
'Exclui os registros da tabela MvPerForn relacionados à Filial do Fornecedor passado
'como parâmetro em objFilialFornecedor.

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim lFornecedor As Long

On Error GoTo Erro_MvPerForn_Exclui_FilialFornecedor

    'Abre os comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 33923

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 33924

    'Lê a Filial do Fornecedor na tabela MvPerForn
    lErro = Comando_ExecutarPos(lComando, "SELECT Fornecedor FROM MvPerForn WHERE Fornecedor = ? AND Filial = ?", 0, lFornecedor, objFilialFornecedor.lCodFornecedor, objFilialFornecedor.iCodFilial)
    If lErro <> AD_SQL_SUCESSO Then Error 33925

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 33926
    
    Do While lErro <> AD_SQL_SEM_DADOS
    
        'Faz lock exclusive em MvPerForn
        lErro = Comando_LockExclusive(lComando)
        If lErro <> AD_SQL_SUCESSO Then Error 33927

        'Exclui da tabela
        lErro = Comando_ExecutarPos(lComando1, "DELETE FROM MvPerForn", lComando)
        If lErro <> AD_SQL_SUCESSO Then Error 33928

        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 33929

    Loop

    'Fecha os comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    MvPerForn_Exclui_FilialFornecedor = SUCESSO

Exit Function

Erro_MvPerForn_Exclui_FilialFornecedor:

    MvPerForn_Exclui_FilialFornecedor = Err

    Select Case Err

        Case 33923, 33924
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 33925, 33926, 33929
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MVPERFORN1", Err, objFilialFornecedor.lCodFornecedor, objFilialFornecedor.iCodFilial)

        Case 33927
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_MVPERFORN1", Err, objFilialFornecedor.lCodFornecedor, objFilialFornecedor.iCodFilial)

        Case 33928
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_MVPERFORN1", Err, objFilialFornecedor.lCodFornecedor, objFilialFornecedor.iCodFilial)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148152)

    End Select

    'Fecha os comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    
    Exit Function

End Function

Public Function MvPerForn_Exclui_Fornecedor(ByVal objFornecedor As ClassFornecedor) As Long
'Exclui os registros da tabela MvPerForn relacionados ao Fornecedor passado
'como parâmetro em objFornecedor.

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim lFornecedor As Long

On Error GoTo Erro_MvPerForn_Exclui_Fornecedor

    'Abre os comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 33836

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 33837

    'Lê o Fornecedor na tabela MvPerForn
    lErro = Comando_ExecutarPos(lComando, "SELECT Fornecedor FROM MvPerForn WHERE Fornecedor = ?", 0, lFornecedor, objFornecedor.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 33838

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 33839
    
    Do While lErro <> AD_SQL_SEM_DADOS
    
        'Faz lock exclusive em MvPerForn
        lErro = Comando_LockExclusive(lComando)
        If lErro <> AD_SQL_SUCESSO Then Error 33840

        'Exclui da tabela
        lErro = Comando_ExecutarPos(lComando1, "DELETE FROM MvPerForn", lComando)
        If lErro <> AD_SQL_SUCESSO Then Error 33841

        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 33842

    Loop

    'Fecha os comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    MvPerForn_Exclui_Fornecedor = SUCESSO

Exit Function

Erro_MvPerForn_Exclui_Fornecedor:

    MvPerForn_Exclui_Fornecedor = Err

    Select Case Err

        Case 33836, 33837
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 33838, 33839, 33842
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MVPERFORN", Err, objFornecedor.lCodigo)

        Case 33840
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_MVPERFORN", Err, objFornecedor.lCodigo)

        Case 33841
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_MVPERFORN", Err, objFornecedor.lCodigo)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148153)

    End Select

    'Fecha os comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    
    Exit Function

End Function

Public Function MvDiaForn_Exclui_Fornecedor(ByVal objFornecedor As ClassFornecedor) As Long 'alterado p/ public por Leo em 01/02/02
'Exclui os registros da tabela MvDiaForn relacionados ao Fornecedor passado
'como parâmetro em objFornecedor.

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim lFornecedor As Long

On Error GoTo Erro_MvDiaForn_Exclui_Fornecedor

    'Abre os comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 33829

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 33830

    'Lê o Fornecedor na tabela MvDiaForn
    lErro = Comando_ExecutarPos(lComando, "SELECT Fornecedor FROM MvDiaForn WHERE Fornecedor = ?", 0, lFornecedor, objFornecedor.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 33831

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 33832
    
    Do While lErro <> AD_SQL_SEM_DADOS
    
        'Faz lock exclusive em MvDiaForn
        lErro = Comando_LockExclusive(lComando)
        If lErro <> AD_SQL_SUCESSO Then Error 33833

        'Exclui da tabela
        lErro = Comando_ExecutarPos(lComando1, "DELETE FROM MvDiaForn", lComando)
        If lErro <> AD_SQL_SUCESSO Then Error 33834

        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 33835

    Loop

    'Fecha os comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    MvDiaForn_Exclui_Fornecedor = SUCESSO

Exit Function

Erro_MvDiaForn_Exclui_Fornecedor:

    MvDiaForn_Exclui_Fornecedor = Err

    Select Case Err

        Case 33829, 33830
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 33831, 33832, 33835
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MVDIAFORN", Err, objFornecedor.lCodigo)

        Case 33833
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_MVDIAFORN", Err, objFornecedor.lCodigo)

        Case 33834
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_MVDIAFORN", Err, objFornecedor.lCodigo)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148154)

    End Select

    'Fecha os comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    
    Exit Function

End Function

Public Function MvDiaForn_Exclui_FilialFornecedor(ByVal objFilialFornecedor As ClassFilialFornecedor) As Long 'alterado p/ public por Leo em 01/02/02
'Exclui os registros da tabela MvDiaForn relacionados à Filial do Fornecedor passado
'como parâmetro em objFilialFornecedor.

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim lFornecedor As Long

On Error GoTo Erro_MvDiaForn_Exclui_FilialFornecedor

    'Abre os comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 33915

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 33916

    'Lê a Filial do Fornecedor na tabela MvDiaForn
    lErro = Comando_ExecutarPos(lComando, "SELECT Fornecedor FROM MvDiaForn WHERE Fornecedor = ? AND Filial = ?", 0, lFornecedor, objFilialFornecedor.lCodFornecedor, objFilialFornecedor.iCodFilial)
    If lErro <> AD_SQL_SUCESSO Then Error 33917

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 33918
    
    Do While lErro <> AD_SQL_SEM_DADOS
    
        'Faz lock exclusive em MvDiaForn
        lErro = Comando_LockExclusive(lComando)
        If lErro <> AD_SQL_SUCESSO Then Error 33919

        'Exclui da tabela
        lErro = Comando_ExecutarPos(lComando1, "DELETE FROM MvDiaForn", lComando)
        If lErro <> AD_SQL_SUCESSO Then Error 33920

        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 33921

    Loop

    'Fecha os comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    MvDiaForn_Exclui_FilialFornecedor = SUCESSO

Exit Function

Erro_MvDiaForn_Exclui_FilialFornecedor:

    MvDiaForn_Exclui_FilialFornecedor = Err

    Select Case Err

        Case 33915, 33916
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 33917, 33918, 33921
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MVDIAFORN1", Err, objFilialFornecedor.lCodFornecedor, objFilialFornecedor.iCodFilial)

        Case 33919
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_MVDIAFORN1", Err, objFilialFornecedor.lCodFornecedor, objFilialFornecedor.iCodFilial)

        Case 33920
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_MVDIAFORN1", Err, objFilialFornecedor.lCodFornecedor, objFilialFornecedor.iCodFilial)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148155)

    End Select

    'Fecha os comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    
    Exit Function

End Function

Function MovCCI_Exclui(ByVal objMovContaCorrente As ClassMovContaCorrente, ByVal objContabil As ClassContabil) As Long
'Exclui o movimento passado como parametro

Dim lErro As Long
Dim lTransacao As Long
Dim colLog As New Collection
Dim iTestaInt As Integer
Dim sConteudo As String, iComErro As Integer

On Error GoTo Erro_MovCCI_Exclui

    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 11997
    
    lErro = CF("Config_Le", "CRFATConfig", "TESTA_INTEGRIDADE_CCIMOVDIA", EMPRESA_TODA, sConteudo)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    iTestaInt = StrParaInt(sConteudo)
    
    If iTestaInt = MARCADO Then
    
        colLog.Add "FUNÇÃO: MovCCI_Exclui"
        colLog.Add ""
        colLog.Add "DADOS VINDOS DA TELA"
        colLog.Add "===================="
        colLog.Add ""
    
        colLog.Add "CodConta: " & CStr(objMovContaCorrente.iCodConta)
        colLog.Add "Sequencial: " & CStr(objMovContaCorrente.lSequencial)
        colLog.Add "NumMovto: " & CStr(objMovContaCorrente.lNumMovto)
        colLog.Add "DataMovimento: " & Format(objMovContaCorrente.dtDataMovimento, "dd/mm/yyyy")
        colLog.Add "Valor: " & Format(objMovContaCorrente.dValor, "STANDARD")
        
        colLog.Add ""
        colLog.Add "DADOS INICIAIS DE VALIDAÇÃO DE INTEGRIDADE"
        colLog.Add "=========================================="
        colLog.Add ""
        
        lErro = CCIMovDia_Testa_Integridade(colLog, iComErro)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        
        If iComErro = MARCADO Then gError 211241
        
    End If

    lErro = MovCCI_Exclui_EmTransacao(objMovContaCorrente)
    If lErro <> SUCESSO Then gError 7886
    
    'exclui os lançamentos contábeis (se houverem) associados ao titulo em questao
    lErro = objContabil.Contabil_Exclui(objMovContaCorrente.lNumMovto, CONTABIL_EXCLUI_EFETIVO)
    If lErro <> SUCESSO Then gError 20489
    
    If iTestaInt = MARCADO Then
    
        colLog.Add ""
        colLog.Add "DADOS FINAIS DE VALIDAÇÃO DE INTEGRIDADE"
        colLog.Add "========================================"
        colLog.Add ""
        
        lErro = CCIMovDia_Testa_Integridade(colLog, iComErro)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        
        If iComErro = MARCADO Then gError 211242
    
    End If

    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 18015

    MovCCI_Exclui = SUCESSO

    Exit Function

Erro_MovCCI_Exclui:

    MovCCI_Exclui = gErr
    
    Select Case gErr

        Case 7886, 20489
        
        Case 11997
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 18015
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case 211241
            Call Rotina_Erro(vbOKOnly, "ERRO_CCIMOVDIA_NAO_INTEGRA1", gErr)
            
        Case 211242
            Call Rotina_Erro(vbOKOnly, "ERRO_CCIMOVDIA_NAO_INTEGRA2", gErr)
            
        Case ERRO_SEM_MENSAGEM

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148156)
    End Select

    Call Transacao_Rollback

    If iTestaInt = MARCADO Then Call MovCCI_Grava_LogAux(colLog)

    Exit Function

End Function

Private Function AntecipPag_Exclui_Movto(ByVal lNumMovto As Long) As Long
'Exclui o Pagamento antecipado associado ao movto de cta corrente identificado por lNumMovto
'esta funcao é chamada para complementar a exclusao do movto associado a este pagto
Dim lErro As Long, iExcluido As Integer
Dim lComandoSel As Long, lComandoMod As Long
On Error GoTo Erro_AntecipPag_Exclui_Movto

    lComandoSel = Comando_Abrir()
    If lComandoSel = 0 Then Error 7888

    lComandoMod = Comando_Abrir()
    If lComandoMod = 0 Then Error 7889

    'Lê a tabela de Pagamentos antecipados
    lErro = Comando_ExecutarPos(lComandoSel, "SELECT Excluido FROM PagtosAntecipados WHERE NumMovto = ?", 0, iExcluido, lNumMovto)
    If lErro <> AD_SQL_SUCESSO Then Error 7890

    lErro = Comando_BuscarPrimeiro(lComandoSel)
    If lErro <> AD_SQL_SUCESSO Then Error 7891

    'Se o Pagamento antecipado não está cadastrado
    If lErro = AD_SQL_SEM_DADOS Then Error 7892
    
    If iExcluido = STATUS_EXCLUIDO Then Error 7893
    
    'Atualiza o Registro como Excluído na tabela PagtosAntecipados
    lErro = Comando_ExecutarPos(lComandoMod, "UPDATE PagtosAntecipados SET Excluido = ?", lComandoSel, ANTECIPPAG_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then Error 7894

    lErro = Comando_Fechar(lComandoSel)
    lErro = Comando_Fechar(lComandoMod)

    AntecipPag_Exclui_Movto = SUCESSO

    Exit Function

Erro_AntecipPag_Exclui_Movto:

    AntecipPag_Exclui_Movto = Err

    Select Case Err

        Case 7888, 7889
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 7890, 7891
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ANTECIPPAG1", Err, lNumMovto)

        Case 7893
            Call Rotina_Erro(vbOKOnly, "ERRO_ANTECIPPAG_EXCLUIDO1", Err, lNumMovto)
        
        Case 7894
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_ANTECIPPAG2", Err)

        Case 7892
            Call Rotina_Erro(vbOKOnly, "ERRO_ANTECIPPAG_INEXISTENTE2", Err, lNumMovto)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148157)

    End Select

    Call Comando_Fechar(lComandoSel)
    Call Comando_Fechar(lComandoMod)
    
    Exit Function

End Function

Private Function BorderoPagto_Excluir(ByVal lNumIntBordero As Long) As Long
'exclui o bordero identificado por seu numero interno
'esta funcao é chamada para complementar a exclusao do movto associado a este pagto
Dim lErro As Long, iExcluido As Integer
Dim lComandoSel As Long, lComandoMod As Long
On Error GoTo Erro_BorderoPagto_Excluir

    lComandoSel = Comando_Abrir()
    If lComandoSel = 0 Then Error 7897

    lComandoMod = Comando_Abrir()
    If lComandoMod = 0 Then Error 7898

    'Lê a tabela de borderos de pagto
    lErro = Comando_ExecutarPos(lComandoSel, "SELECT Excluido FROM BorderosPagto WHERE NumIntBordero = ?", 0, iExcluido, lNumIntBordero)
    If lErro <> AD_SQL_SUCESSO Then Error 7899

    lErro = Comando_BuscarPrimeiro(lComandoSel)
    If lErro <> AD_SQL_SUCESSO Then Error 7900

    'Se o bordero de pagto não está cadastrado
    If lErro = AD_SQL_SEM_DADOS Then Error 7901
    
    If iExcluido = STATUS_EXCLUIDO Then Error 7902
    
    'Atualiza o Registro como Excluído na tabela PagtosAntecipados
    lErro = Comando_ExecutarPos(lComandoMod, "UPDATE BorderosPagto SET Excluido = ?", lComandoSel, ANTECIPPAG_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then Error 7903

    lErro = Comando_Fechar(lComandoSel)
    lErro = Comando_Fechar(lComandoMod)

    BorderoPagto_Excluir = SUCESSO

    Exit Function

Erro_BorderoPagto_Excluir:

    BorderoPagto_Excluir = Err

    Select Case Err

        Case 7897, 7898
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 7899, 7900
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BORDERO_PAGTO", Err)

        Case 7902
            Call Rotina_Erro(vbOKOnly, "ERRO_BORDERO_PAGTO_EXCLUIDO", Err)
        
        Case 7903
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_BORDERO_PAGTO", Err)

        Case 7901
            Call Rotina_Erro(vbOKOnly, "ERRO_BORDERO_PAGTO_INEXISTENTE", Err)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148158)

    End Select

    Call Comando_Fechar(lComandoSel)
    Call Comando_Fechar(lComandoMod)
    
    Exit Function

End Function

Private Function MovCCI_Deposito_CancBaixaBorderoPag1(ByVal objMovContaCorrente As ClassMovContaCorrente) As Long

Dim lErro As Long, lNumMovto As Long, dtData As Date, lSeq As Long, objContasCorrentesInternas As New ClassContasCorrentesInternas, iFilialEmpresa As Integer
Dim lComando As Long, lComando1 As Long

On Error GoTo Erro_MovCCI_Deposito_CancBaixaBorderoPag1

    lComando = 0
    lComando1 = 0

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 7916

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 7917

    'Pega o numero do proximo movCci
    lErro = CF("MovCCI_Automatico", lNumMovto)
    If lErro <> SUCESSO Then Error 7918

    objMovContaCorrente.lNumMovto = lNumMovto

    'le dados da cta corrente para obter a filialempresa correspondente a ela
    lErro = CF("ContaCorrenteInt_Le", objMovContaCorrente.iCodConta, objContasCorrentesInternas)
    If lErro <> SUCESSO Then Error 7919

    objMovContaCorrente.iFilialEmpresa = objContasCorrentesInternas.iFilialEmpresa

    'obtem o Sequencial do movto na cta
    lErro = CF("CtaCorrente_Sequencial_Automatico", objMovContaCorrente.iCodConta, lSeq)
    If lErro <> SUCESSO Then Error 7920

    objMovContaCorrente.lSequencial = lSeq
    objMovContaCorrente.lNumero = lSeq 'deposito em dinheiro

    'Insere o Deposito na Tabela MovimentosContaCorrente
    lErro = Comando_Executar(lComando1, "INSERT INTO MovimentosContaCorrente (NumMovto, FilialEmpresa, CodConta, Sequencial, Tipo, Excluido, TipoMeioPagto, DataMovimento, Valor, Historico, NumRefExterna, NumRefInterna) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)", lNumMovto, objMovContaCorrente.iFilialEmpresa, _
        objMovContaCorrente.iCodConta, objMovContaCorrente.lSequencial, MOVCCI_DEPOSITO, MOVCONTACORRENTE_NAO_EXCLUIDO, objMovContaCorrente.iTipoMeioPagto, objMovContaCorrente.dtDataMovimento, objMovContaCorrente.dValor, objMovContaCorrente.sHistorico, objMovContaCorrente.sNumRefExterna, objMovContaCorrente.lNumRefInterna)
    If lErro <> AD_SQL_SUCESSO Then Error 7921

    dtData = objMovContaCorrente.dtDataMovimento

    'Atualiza os dados em CCIMovDia
    lErro = CF("CCIMovDia_Grava", objMovContaCorrente.iCodConta, dtData, objMovContaCorrente.dValor)
    If lErro <> SUCESSO Then Error 7922

    'Atualiza os dados em CCIMov
    lErro = CF("CCIMov_Grava", objMovContaCorrente.iCodConta, Year(dtData), Month(dtData), objMovContaCorrente.dValor)
    If lErro <> SUCESSO Then Error 7923

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    MovCCI_Deposito_CancBaixaBorderoPag1 = SUCESSO

    Exit Function

Erro_MovCCI_Deposito_CancBaixaBorderoPag1:

    MovCCI_Deposito_CancBaixaBorderoPag1 = Err

    Select Case Err

        Case 7918, 7919, 7920, 7922, 7923

        Case 7916, 7917
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 7921
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MOVIMENTOSCONTACORRENTE", Err, objMovContaCorrente.iCodConta)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148159)

    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Private Function MovCCI_Deposito_CancBaixaBorderoPag(ByVal objBorderoPagto As ClassBorderoPagto, ByVal dValor As Double, ByVal lNumIntDocBaixaParcPag As Long) As Long
'inclui o deposito correspondente ao cancelamento da baixa de um titulo que havia sido pago atraves de um bordero de pagto

Dim lErro As Long, objMovCCIBordero As New ClassMovContaCorrente, objMovContaCorrente As New ClassMovContaCorrente

On Error GoTo Erro_MovCCI_Deposito_CancBaixaBorderoPag

    'inclui o deposito correspondente ao valor pago
    objMovContaCorrente.dtDataMovimento = objBorderoPagto.dtDataEmissao
    objMovContaCorrente.dValor = dValor
    objMovContaCorrente.iCodConta = objBorderoPagto.iCodConta
    objMovContaCorrente.iConciliado = NAO_CONCILIADO
    objMovContaCorrente.iExcluido = NAO_EXCLUIDO
    objMovContaCorrente.iFavorecido = 0
    'objMovContaCorrente.iFilialEmpresa = 0 'vai ser obtida
    objMovContaCorrente.iPortador = 0
    objMovContaCorrente.iTipo = MOVCCI_CANC_PAGTO
    objMovContaCorrente.iTipoMeioPagto = DINHEIRO
    objMovContaCorrente.lNumero = 0 'vai ser o numero do Sequencial ?
    'objMovContaCorrente.lNumMovto = 0 'vai ser obtido
    objMovContaCorrente.lNumRefInterna = lNumIntDocBaixaParcPag
    'objMovContaCorrente.lSequencial = 0 'vai ser obtido
    If objBorderoPagto.lNumero <> 0 Then
        objMovContaCorrente.sHistorico = "Cancelamento de baixa bordero/cheque " & CStr(objBorderoPagto.lNumero)
    Else
        objMovContaCorrente.sHistorico = "Cancelamento de baixa pagto em dinheiro"
    End If
    objMovContaCorrente.sNumRefExterna = ""

    lErro = MovCCI_Deposito_CancBaixaBorderoPag1(objMovContaCorrente)
    If lErro <> SUCESSO Then Error 7924

    MovCCI_Deposito_CancBaixaBorderoPag = SUCESSO

    Exit Function

Erro_MovCCI_Deposito_CancBaixaBorderoPag:

    MovCCI_Deposito_CancBaixaBorderoPag = Err

    Select Case Err

        Case 7924

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148160)

    End Select

    Exit Function

End Function

Function BaixaParcPag_Bordero_Cancelar(ByVal objBorderoPagto As ClassBorderoPagto, ByVal lNumIntParc As Long, ByVal iSequencial As Integer, lNumIntDocBaixaParcPag As Long) As Long
'cancela a baixa de uma parcela que havia sido gerada pela emissao de um bordero de pagto
'a baixa da parcela sera excluida aumentando o saldo da parcela (e talvez reabrindo-a) e do titulo (e talvez reabrindo-o)
'alem disso será gerado um deposito no valor "pago" na conta corrente utilizada p/o bordero

Dim lErro As Long, dValorPago As Double
Dim lNumIntBaixa As Long

On Error GoTo Erro_BaixaParcPag_Bordero_Cancelar

    'exclui a baixa da parcela
    lErro = BaixaParcPag_Exclui(lNumIntParc, iSequencial, dValorPago, lNumIntBaixa, lNumIntDocBaixaParcPag)
    If lErro <> SUCESSO Then Error 7914

    'exclui a baixa como um todo
    lErro = BaixaPag_Exclui(lNumIntBaixa)
    If lErro <> SUCESSO And lErro <> 56610 Then Error 56611

    lErro = MovCCI_Deposito_CancBaixaBorderoPag(objBorderoPagto, dValorPago, lNumIntDocBaixaParcPag)
    If lErro <> SUCESSO Then Error 7915

    BaixaParcPag_Bordero_Cancelar = SUCESSO

    Exit Function

Erro_BaixaParcPag_Bordero_Cancelar:

    BaixaParcPag_Bordero_Cancelar = Err

    Select Case Err

        Case 7914, 56611

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148161)

    End Select

    Exit Function

End Function

Public Function BaixaParcPag_Exclui_Customizado(ByVal lNumIntParc As Long, ByVal iSequencial As Integer, dValorPago As Double, lNumIntBaixa As Long, lNumIntDocBaixaParcPag As Long) As Long
    BaixaParcPag_Exclui_Customizado = SUCESSO
End Function

Private Function BaixaParcPag_Exclui(ByVal lNumIntParc As Long, ByVal iSequencial As Integer, dValorPago As Double, lNumIntBaixa As Long, lNumIntDocBaixaParcPag As Long) As Long
'exclui a BaixasParcPag identificada por lNumIntParc e iSequencial
'retorna em dValorPago o valorbaixado+multa+juros-desconto

Dim lErro As Long, iStatus As Integer, dValorBaixado As Double
Dim dValorMulta As Double, dValorJuros As Double, dValorDesconto As Double
Dim lComandoSel As Long, lComandoMod As Long

On Error GoTo Erro_BaixaParcPag_Exclui

    lComandoSel = Comando_Abrir()
    If lComandoSel = 0 Then Error 7904

    lComandoMod = Comando_Abrir()
    If lComandoMod = 0 Then Error 7905

    lErro = Comando_ExecutarPos(lComandoSel, "SELECT NumIntDoc, Status, ValorBaixado, ValorMulta, ValorJuros, ValorDesconto, NumIntBaixa FROM BaixasParcPag WHERE NumIntParcela = ? AND Sequencial = ?", 0, lNumIntDocBaixaParcPag, iStatus, dValorBaixado, dValorMulta, dValorJuros, dValorDesconto, lNumIntBaixa, lNumIntParc, iSequencial)
    If lErro <> AD_SQL_SUCESSO Then Error 7906

    lErro = Comando_BuscarProximo(lComandoSel)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7907

    If lErro <> AD_SQL_SUCESSO Then Error 7908

    lErro = Comando_LockExclusive(lComandoSel)
    If lErro <> AD_SQL_SUCESSO Then Error 7909

    If iStatus <> STATUS_LANCADO Then Error 7910

    dValorPago = dValorBaixado + dValorMulta + dValorJuros - dValorDesconto

    lErro = ParcelaPag_CancelarBaixa(lNumIntParc, dValorBaixado)
    If lErro <> SUCESSO Then Error 7911
    
    lErro = CF("BaixaParcPag_Exclui_Customizado", lNumIntParc, iSequencial, dValorPago, lNumIntBaixa, lNumIntDocBaixaParcPag)
    If lErro <> SUCESSO Then Error 7911

    lErro = Comando_ExecutarPos(lComandoMod, "UPDATE BaixasParcPag SET Status = ?, DataCancelamento = ?", lComandoSel, STATUS_EXCLUIDO, gdtDataAtual)
    If lErro <> AD_SQL_SUCESSO Then Error 7912

    lErro = Comando_Unlock(lComandoSel)
    If lErro <> AD_SQL_SUCESSO Then Error 7913

    Call Comando_Fechar(lComandoSel)
    Call Comando_Fechar(lComandoMod)

    BaixaParcPag_Exclui = SUCESSO

    Exit Function

Erro_BaixaParcPag_Exclui:

    BaixaParcPag_Exclui = Err

    Select Case Err

        Case 7910
            Call Rotina_Erro(vbOKOnly, "ERRO_BAIXAPARCPAG_EXCLUIDA", Err)

        Case 7908
            Call Rotina_Erro(vbOKOnly, "ERRO_BAIXAPARCPAG_INEXISTENTE", Err)

        Case 7911

        Case 7904, 7905
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 7906, 7907
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BAIXAPARCPAG", Err)

        Case 7909
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_BAIXAPARCPAG", Err)

        Case 7912
            Call Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_BAIXAPARCPAG", Err)

        Case 7913
            Call Rotina_Erro(vbOKOnly, "ERRO_UNLOCK_BAIXAPARCPAG", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148162)

    End Select

    Call Comando_Fechar(lComandoSel)
    Call Comando_Fechar(lComandoMod)

    Exit Function

End Function

Function CreditoPagar_AlterarSaldo(ByVal objCreditoPagar As ClassCreditoPagar, ByVal dValor As Double) As Long
'altera o saldo apropriado de um credito a pagar
'dValor pode ser positivo (aumenta o saldo) ou negativo

Dim lErro As Long, iStatus As Integer, dSaldoAnterior As Double, dValorTotal As Double, dValorIRRF As Double, dPISRetido As Double, dCOFINSRetido As Double, dCSLLRetido As Double
Dim lComandoSel As Long, lComandoMod As Long

On Error GoTo Erro_CreditoPagar_AlterarSaldo

    lComandoSel = Comando_Abrir()
    If lComandoSel = 0 Then Error 7932

    lComandoMod = Comando_Abrir()
    If lComandoMod = 0 Then Error 7933

    'Lê a tabela de CreditosPag
    lErro = Comando_ExecutarPos(lComandoSel, "SELECT Status, Saldo, ValorTotal, ValorIRRF, PISRetido, COFINSRetido, CSLLRetido FROM CreditosPagForn WHERE NumIntDoc = ?", 0, iStatus, dSaldoAnterior, dValorTotal, dValorIRRF, dPISRetido, dCOFINSRetido, dCSLLRetido, objCreditoPagar.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then Error 7934

    lErro = Comando_BuscarPrimeiro(lComandoSel)
    If lErro <> AD_SQL_SUCESSO Then Error 7935

    'Se o credito não está cadastrado
    If lErro = AD_SQL_SEM_DADOS Then Error 7936

    If iStatus = STATUS_EXCLUIDO Then Error 7937

    If dValor > 0 Then
        
        If (dSaldoAnterior + dValor) - (dValorTotal - (dValorIRRF + dPISRetido + dCOFINSRetido + dCSLLRetido)) > DELTA_VALORMONETARIO Then Error 7938

        If iStatus = STATUS_BAIXADO Then
        
            'altera o saldo e o status
            lErro = Comando_ExecutarPos(lComandoMod, "UPDATE CreditosPagForn SET Saldo = Saldo + ?, Status = ?", lComandoSel, dValor, STATUS_LANCADO)
            If lErro <> SUCESSO Then Error 7838
            
            'Altera o status da nota Fiscal para Lancada caso tenha nota vinculada
            lErro = NFiscal_Altera_Status(objCreditoPagar.lNumIntDoc, CPR_CREDITO_PAGAR, STATUS_LANCADO)
            If lErro <> SUCESSO Then Error 61294
            
        Else
        
            'altera apenas o saldo
            lErro = Comando_ExecutarPos(lComandoMod, "UPDATE CreditosPagForn SET Saldo = Saldo + ?", lComandoSel, dValor)
        
        End If
        
    Else
    
        If Abs(dSaldoAnterior + dValor) < DELTA_VALORMONETARIO Then
        
            'altera o saldo e o status
            lErro = Comando_ExecutarPos(lComandoMod, "UPDATE CreditosPagForn SET Saldo = ?, Status = ?", lComandoSel, 0, STATUS_BAIXADO)
            If lErro <> SUCESSO Then Error 7839
            
            'Altera o status da nota Fiscal para Baixada caso tenha nota vinculada
            lErro = NFiscal_Altera_Status(objCreditoPagar.lNumIntDoc, CPR_CREDITO_PAGAR, STATUS_BAIXADO)
            If lErro <> SUCESSO Then Error 61295
        
        Else
        
            'altera o saldo
            lErro = Comando_ExecutarPos(lComandoMod, "UPDATE CreditosPagForn SET Saldo = Saldo + ?", lComandoSel, dValor)
            If lErro <> SUCESSO Then Error 20841
        
        End If
    
    End If
    
    If lErro <> AD_SQL_SUCESSO Then Error 7939

    lErro = Comando_Fechar(lComandoSel)
    lErro = Comando_Fechar(lComandoMod)

    CreditoPagar_AlterarSaldo = SUCESSO

    Exit Function

Erro_CreditoPagar_AlterarSaldo:

    CreditoPagar_AlterarSaldo = Err

    Select Case Err

        Case 7932, 7933
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 7934, 7935
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CREDITO_PAG_FORN", Err)

        Case 7937
            Call Rotina_Erro(vbOKOnly, "ERRO_CREDITO_PAG_FORN_EXCLUIDO", Err)

        Case 7938, 7939, 20841
            Call Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_CREDITO_PAG_FORN", Err)

        Case 7936
            Call Rotina_Erro(vbOKOnly, "ERRO_CREDITO_PAG_FORN_INEXISTENTE", Err)
        
        Case 61294, 61295 'Tratados nas rotinas chamadas
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148163)

    End Select

    Call Comando_Fechar(lComandoSel)
    Call Comando_Fechar(lComandoMod)

    Exit Function

End Function

Private Function BaixaPag_Exclui(ByVal lNumIntBaixa As Long) As Long
'exclui a baixa de um titulo a pagar identificada por lNumIntBaixa

Dim lErro As Long, iStatus As Integer, lNumIntDoc As Long, iCodConta As Integer, lSequencial As Long
Dim lComandoSel As Long, lComandoMod As Long, lComando As Long, lNumMovCta As Long, lComandoMov As Long, iConciliado As Integer

On Error GoTo Erro_BaixaPag_Exclui

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 56607

    lComandoSel = Comando_Abrir()
    If lComandoSel = 0 Then Error 7925

    lComandoMod = Comando_Abrir()
    If lComandoMod = 0 Then Error 7926

    lComandoMov = Comando_Abrir()
    If lComandoMov = 0 Then Error 7926

    'Lê a tabela de BaixasPag
    lErro = Comando_ExecutarPos(lComandoSel, "SELECT NumMovCta, Status FROM BaixasPag WHERE NumIntBaixa = ?", 0, lNumMovCta, iStatus, lNumIntBaixa)
    If lErro <> AD_SQL_SUCESSO Then Error 7927

    lErro = Comando_BuscarPrimeiro(lComandoSel)
    If lErro <> AD_SQL_SUCESSO Then Error 7928

    'Se a baixa não está cadastrada
    If lErro = AD_SQL_SEM_DADOS Then Error 7929

    If iStatus = STATUS_EXCLUIDO Then Error 7930

    'verifica se está ligada a um movto de conta corrente conciliado
    If lNumMovCta <> 0 Then
    
        lErro = Comando_Executar(lComandoMov, "SELECT Conciliado, CodConta, Sequencial FROM MovimentosContaCorrente WHERE NumMovto = ?", iConciliado, iCodConta, lSequencial, lNumMovCta)
        If lErro <> AD_SQL_SUCESSO Then Error 7927
    
        lErro = Comando_BuscarProximo(lComandoMov)
        If lErro <> AD_SQL_SUCESSO Then Error 7928
        
        If iConciliado <> NAO_CONCILIADO Then Error 8000
    
    End If
    
    'verifica se há alguma baixa de parcela que ainda nao foi excluida
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc FROM BaixasParcPag WHERE NumIntBaixa = ? AND Status <> ?", lNumIntDoc, lNumIntBaixa, STATUS_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then Error 56608
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 56609
    If lErro = AD_SQL_SUCESSO Then Error 56610

    'exclui a baixa como um todo
    lErro = Comando_ExecutarPos(lComandoMod, "UPDATE BaixasPag SET Status = ?", lComandoSel, STATUS_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then Error 7931

    lErro = Comando_Fechar(lComando)
    lErro = Comando_Fechar(lComandoSel)
    lErro = Comando_Fechar(lComandoMod)
    lErro = Comando_Fechar(lComandoMov)

    BaixaPag_Exclui = SUCESSO

    Exit Function

Erro_BaixaPag_Exclui:

    BaixaPag_Exclui = Err

    Select Case Err

        Case 7925, 7926, 56607
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 7927, 7928
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BAIXAPAG", Err)

        Case 7930
            Call Rotina_Erro(vbOKOnly, "ERRO_BAIXAPAG_EXCLUIDA", Err)

        Case 7931
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_BAIXAPAG", Err)

        Case 7929
            Call Rotina_Erro(vbOKOnly, "ERRO_BAIXAPAG_INEXISTENTE", Err)

        Case 56608, 56609
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BAIXAPARCPAG", Err)
        
        Case 56610 'há alguma baixaparc nao excluida
        
        Case 8000
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVCONTACORRENTE_CONCILIADO", Err, iCodConta, lSequencial)
                
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148164)

    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComandoSel)
    Call Comando_Fechar(lComandoMod)
    Call Comando_Fechar(lComandoMov)

    Exit Function

End Function

Function BaixaParcPag_CredPagForn_Cancelar(ByVal objCreditoPagar As ClassCreditoPagar, ByVal lNumIntParc As Long, ByVal iSequencial As Integer, lNumIntDocBaixaParcPag As Long) As Long

Dim lErro As Long, dValorPago As Double, objBaixaParcPagar As New ClassBaixaParcPagar
Dim lNumIntBaixa As Long

On Error GoTo Erro_BaixaParcPag_CredPagForn_Cancelar

    'exclui a baixa da parcela
    objBaixaParcPagar.lNumIntParcela = lNumIntParc
    objBaixaParcPagar.iSequencial = iSequencial

    dValorPago = objBaixaParcPagar.dValorBaixado + objBaixaParcPagar.dValorJuros + objBaixaParcPagar.dValorMulta - objBaixaParcPagar.dValorDesconto
    lErro = BaixaParcPag_Exclui(lNumIntParc, iSequencial, dValorPago, lNumIntBaixa, lNumIntDocBaixaParcPag)
    If lErro <> SUCESSO Then Error 7940

    'exclui a baixa como um todo
    lErro = BaixaPag_Exclui(lNumIntBaixa)
    If lErro <> SUCESSO And lErro <> 56610 Then Error 7941

    'altera o saldo do credito a pagar
    lErro = CreditoPagar_AlterarSaldo(objCreditoPagar, dValorPago)
    If lErro <> SUCESSO Then Error 7942

    BaixaParcPag_CredPagForn_Cancelar = SUCESSO

    Exit Function

Erro_BaixaParcPag_CredPagForn_Cancelar:

    BaixaParcPag_CredPagForn_Cancelar = Err

    Select Case Err

        Case 7940, 7941, 7942

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148165)

    End Select

    Exit Function

End Function
    
Function BaixaParcPag_PagtoAntecipado_Cancelar(ByVal objAntecipPag As ClassAntecipPag, ByVal lNumIntParc As Long, ByVal iSequencial As Integer, lNumIntDocBaixaParcPag As Long) As Long
'cancela uma baixa que havia sido efetuada abatendo-se um adiantamento dado a um fornecedor

Dim lErro As Long, dValorPago As Double, objBaixaParcPagar As New ClassBaixaParcPagar
Dim lNumIntBaixa As Long

On Error GoTo Erro_BaixaParcPag_PagtoAntecipado_Cancelar

    'exclui a baixa da parcela
    objBaixaParcPagar.lNumIntParcela = lNumIntParc
    objBaixaParcPagar.iSequencial = iSequencial
    dValorPago = objBaixaParcPagar.dValorBaixado + objBaixaParcPagar.dValorJuros + objBaixaParcPagar.dValorMulta - objBaixaParcPagar.dValorDesconto

    lErro = BaixaParcPag_Exclui(lNumIntParc, iSequencial, dValorPago, lNumIntBaixa, lNumIntDocBaixaParcPag)
    If lErro <> SUCESSO Then Error 7943

    'exclui a baixa como um todo
    lErro = BaixaPag_Exclui(lNumIntBaixa)
    If lErro <> SUCESSO And lErro <> 56610 Then Error 7944

    'altera o saldo do pagto antecipado
    lErro = PagtoAntecipado_AlterarSaldo(objAntecipPag, dValorPago)
    If lErro <> SUCESSO Then Error 7945

    BaixaParcPag_PagtoAntecipado_Cancelar = SUCESSO

    Exit Function

Erro_BaixaParcPag_PagtoAntecipado_Cancelar:

    BaixaParcPag_PagtoAntecipado_Cancelar = Err

    Select Case Err

        Case 7943, 7944, 7945

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148166)

    End Select

    Exit Function

End Function

Function PagtoAntecipado_AlterarSaldo(ByVal objAntecipPag As ClassAntecipPag, ByVal dValor As Double) As Long
'altera o saldo apropriado de um pagto antecipado
'dValor pode ser positivo (aumenta o saldo) ou negativo

Dim lErro As Long, iExcluido As Integer, dSaldoAnterior As Double
Dim lComandoSel As Long, lComandoMod As Long

On Error GoTo Erro_PagtoAntecipado_AlterarSaldo

    lComandoSel = Comando_Abrir()
    If lComandoSel = 0 Then Error 7946

    lComandoMod = Comando_Abrir()
    If lComandoMod = 0 Then Error 7947

    'Lê a tabela de PagtosAntecipados
    lErro = Comando_ExecutarPos(lComandoSel, "SELECT Excluido,SaldoNaoApropriado FROM PagtosAntecipados WHERE NumIntPag = ?", 0, iExcluido, dSaldoAnterior, objAntecipPag.lNumIntPag)
    If lErro <> AD_SQL_SUCESSO Then Error 7948

    lErro = Comando_BuscarPrimeiro(lComandoSel)
    If lErro <> AD_SQL_SUCESSO Then Error 7949

    'Se o pagto não está cadastrado
    If lErro = AD_SQL_SEM_DADOS Then Error 7950

    If iExcluido = EXCLUIDO Then Error 7951

    'altera o saldo
    lErro = Comando_ExecutarPos(lComandoMod, "UPDATE PagtosAntecipados SET SaldoNaoApropriado = SaldoNaoApropriado + ?", lComandoSel, dValor)
    If lErro <> AD_SQL_SUCESSO Then Error 7952

    lErro = Comando_Fechar(lComandoSel)
    lErro = Comando_Fechar(lComandoMod)

    PagtoAntecipado_AlterarSaldo = SUCESSO

    Exit Function

Erro_PagtoAntecipado_AlterarSaldo:

    PagtoAntecipado_AlterarSaldo = Err

    Select Case Err

        Case 7946, 7947
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 7948, 7949
'            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PAGTO_ANTECIPADO", Err)

        Case 7951
'            Call Rotina_Erro(vbOKOnly, "ERRO_PAGTO_ANTECIPADO_EXCLUIDO", Err)

        Case 7952
'            Call Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_PAGTO_ANTECIPADO", Err)

        Case 7950
'            Call Rotina_Erro(vbOKOnly, "ERRO_PAGTO_ANTECIPADO_INEXISTENTE", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148167)

    End Select

    Call Comando_Fechar(lComandoSel)
    Call Comando_Fechar(lComandoMod)

    Exit Function

End Function

Function Cobrador_Exclui_Carteira(ByVal objCarteiraCobrador As ClassCarteiraCobrador) As Long
'Exclui a Carteira do Banco de Dados

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim lTransacao As Long
Dim tCarteira As typeCarteiraCobrador

On Error GoTo Erro_Cobrador_Exclui_Carteira

    lComando = 0
    lComando1 = 0
    lTransacao = 0

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 23519

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 23520

    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 23583

    tCarteira.sContaContabil = String(STRING_CONTA, 0)
    tCarteira.sContaDuplDescontadas = String(STRING_CONTA, 0)
    tCarteira.sFaixaNossoNumeroInicial = String(STRING_FAIXA_NUM_COB, 0)
    tCarteira.sFaixaNossoNumeroFinal = String(STRING_FAIXA_NUM_COB, 0)
    tCarteira.sFaixaNossoNumeroProx = String(STRING_FAIXA_NUM_COB, 0)
    tCarteira.sNomeNoBanco = String(STRING_NOMENOBANCO, 0)
    tCarteira.sCodCarteiraNoBanco = String(STRING_CODCARTNOBANCO, 0)

    'Seleciona a carteira cujo Código está no iCodigo e coloca os dados no type
    lErro = Comando_ExecutarPos(lComando, "SELECT Desativada, ContaContabil, ContaDuplDescontadas, DiasDeRetencao, TaxaCobranca , TaxaDesconto, FaixaNossoNumeroInicial, FaixaNossoNumeroFinal, FaixaNossoNumeroProx, NomeNoBanco, CodCarteiraNoBanco, NumCarteiraNoBanco, QuantidadeAtual , QuantidadeAtualBanco, SaldoAtual, SaldoAtualBanco FROM CarteirasCobrador WHERE CodCarteiraCobranca = ? AND Cobrador = ?", 0, tCarteira.iDesativada, tCarteira.sContaContabil, tCarteira.sContaDuplDescontadas, tCarteira.iDiasDeRetencao, tCarteira.dTaxaCobranca, tCarteira.dTaxaDesconto, tCarteira.sFaixaNossoNumeroInicial, tCarteira.sFaixaNossoNumeroFinal, tCarteira.sFaixaNossoNumeroProx, tCarteira.sNomeNoBanco, tCarteira.sCodCarteiraNoBanco, tCarteira.iNumCarteiraNoBanco, tCarteira.lQuantidadeAtual, tCarteira.lQuantidadeAtualBanco, tCarteira.dSaldoAtual, tCarteira.dSaldoAtualBanco, objCarteiraCobrador.iCodCarteiraCobranca, objCarteiraCobrador.iCobrador)
    If lErro <> AD_SQL_SUCESSO Then Error 23522

    'Tenta ler
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 23523

    'Se não existir Carteira com o código em questão
    If lErro = AD_SQL_SEM_DADOS Then Error 23524

    lErro = Comando_LockExclusive(lComando)
    If lErro <> AD_SQL_SUCESSO Then Error 42897
    
    'A Carteira não pode ser excluída caso tenha uma quantidade de títulos maior que zero
    If tCarteira.lQuantidadeAtual <> 0 Or tCarteira.lQuantidadeAtualBanco <> 0 Then Error 23460
       
    'Testa se o par Carteira e Cobrador estão sendo utilizados em Parcelas Rec, Parcelas RecBaixadas e BorderosCobranca
    lErro = CarteirasCobrador_Testa_Vinculos(objCarteiraCobrador.iCobrador, objCarteiraCobrador.iCodCarteiraCobranca)
    If lErro <> SUCESSO Then Error 58653
    
    'Exclui a Carteira do Banco de Dados
    lErro = Comando_ExecutarPos(lComando1, "DELETE FROM CarteirasCobrador", lComando)
    If lErro <> AD_SQL_SUCESSO Then Error 23525

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 23526

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Cobrador_Exclui_Carteira = SUCESSO

    Exit Function

Erro_Cobrador_Exclui_Carteira:

    Cobrador_Exclui_Carteira = Err

    Select Case Err

        Case 23519, 23520
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 23521
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 23522, 23523
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TABELA_CARTEIRASCOBRADOR", Err, objCarteiraCobrador.iCobrador)

        Case 23524 'Tratada na rotina que chama
        
        Case 58653 'Tratado na Rotina chamada
        
        Case 23525
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CARTEIRASCOBRADOR", Err, objCarteiraCobrador.iCodCarteiraCobranca, objCarteiraCobrador.iCobrador)

        Case 23526
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case 23460
            Call Rotina_Erro(vbOKOnly, "ERRO_CARTEIRACOBRANCA_VINCULADA_PARCELAS", Err, objCarteiraCobrador.iCodCarteiraCobranca, objCarteiraCobrador.iCobrador)

        Case 23583
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 42897
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CARTEIRASCOBRADOR", Err)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148168)

    End Select

    Call Transacao_Rollback
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Function CarteirasCobrador_Testa_Vinculos(ByVal iCobrador As Integer, ByVal iCodCarteiraCobranca As Integer) As Long
'Testa se o par Carteira e Cobrador estão sendo utilizados em Parcelas Rec, Parcelas RecBaixadas e BorderosCobranca

Dim lErro As Long
Dim iNumBordero As Integer
Dim iNumeroParcela As Integer
Dim lComando As Long

On Error GoTo Erro_CarteirasCobrador_Testa_Vinculos

    'Abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 58655
        
    'Verifica se está em Borderos Cobranca
    lErro = Comando_Executar(lComando, "SELECT NumBordero FROM BorderosCobranca WHERE Cobrador = ? AND CarteiraCobranca = ? ", iNumBordero, iCobrador, iCodCarteiraCobranca)
    If lErro <> AD_SQL_SUCESSO Then Error 58656
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 58657
    If lErro = AD_SQL_SUCESSO Then Error 58658 'Encontrou
     
    'Verifica se está ParcelasRec
    lErro = Comando_Executar(lComando, "SELECT NumParcela FROM ParcelasRec WHERE Cobrador = ? AND CarteiraCobranca = ?", iNumeroParcela, iCobrador, iCodCarteiraCobranca)
    If lErro <> AD_SQL_SUCESSO Then Error 58659
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 58660
    If lErro = AD_SQL_SUCESSO Then Error 58661 'Encontrou
    
    'Verifica se está em Parcelas Rec Baixadas
    lErro = Comando_Executar(lComando, "SELECT NumParcela FROM ParcelasRecBaixadas WHERE Cobrador = ? AND CarteiraCobranca = ?", iNumeroParcela, iCobrador, iCodCarteiraCobranca)
    If lErro <> AD_SQL_SUCESSO Then Error 58662
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 58663
    If lErro = AD_SQL_SUCESSO Then Error 58664 'Encontrou
    
    'Fecha o comando
    Call Comando_Fechar(lComando)
    
    CarteirasCobrador_Testa_Vinculos = SUCESSO
        
    Exit Function
    
Erro_CarteirasCobrador_Testa_Vinculos:

    CarteirasCobrador_Testa_Vinculos = Err
    
    Select Case Err
        
        Case 58655
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 58656, 58657
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BORDERO_COBRANCA", Err)
        
        Case 58658
            Call Rotina_Erro(vbOKOnly, "ERRO_CARTEIRACOBRADOR_USADO_BORDEROCOBRANCA", Err, iCobrador, iCodCarteiraCobranca, iNumBordero)
        
        Case 58659, 58660
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_REC", Err)
        
        Case 58661
            Call Rotina_Erro(vbOKOnly, "ERRO_CARTEIRACOBRADOR_USADO_PARCELAREC", Err, iCobrador, iCodCarteiraCobranca)
        
        Case 58662, 58663
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_REC", Err)
        
        Case 58664
            Call Rotina_Erro(vbOKOnly, "ERRO_CARTEIRACOBRADOR_USADO_PARCELAREC_BAIXADAS", Err, iCobrador, iCodCarteiraCobranca)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148169)
    
    End Select
    
    'Fecha o comando
    Call Comando_Fechar(lComando)
    
    Exit Function
        
End Function

Function Cobrador_Exclui(ByVal objCobrador As ClassCobrador) As Long
'Exclui o Cobrador

Dim lErro As Long
Dim lComando(2) As Long
Dim lTransacao As Long
Dim lTotal As Long
Dim iIndice As Integer
Dim iCodigo As Integer

On Error GoTo Erro_Cobrador_Exclui

    'Abre comandos
    For iIndice = 0 To 1
        lComando(iIndice) = Comando_Abrir()
        If lComando(iIndice) = 0 Then Error 23507
    Next

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 23508

    'Seleciona o Cobrador a ser excluido
    lErro = Comando_ExecutarPos(lComando(0), "SELECT Codigo FROM Cobradores WHERE Codigo =?", 0, iCodigo, objCobrador.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 23509

    'Tenta ler
    lErro = Comando_BuscarPrimeiro(lComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 23510
    If lErro = AD_SQL_SEM_DADOS Then Error 23511

    'Lock do Cobrador
    lErro = Comando_LockExclusive(lComando(0))
    If lErro <> AD_SQL_SUCESSO Then Error 23512

    'nao pode haver registro em borderoCobranca, ocorrenciasremparcrec, filiais clientes, baixaparcrec
    lErro = Cobrador_Valida_Exclusao(objCobrador)
    If lErro <> SUCESSO Then Error 42657
    
    'Exclui carteiras do cobrador
    lErro = CarteirasCobrador_Exclui(objCobrador)
    If lErro <> SUCESSO And lErro <> 23587 Then Error 23517
           
    lErro = CobradorInfo_Exclui(objCobrador.iCodigo)
    If lErro <> SUCESSO Then Error 62112
           
    'Exclui o Cobrador
    lErro = Comando_ExecutarPos(lComando(1), "DELETE FROM Cobradores", lComando(0))
    If lErro <> AD_SQL_SUCESSO Then Error 23513
    
    'Exclui o Endereço do Cobrador
    lErro = CF("Endereco_Exclui", objCobrador.lEndereco)
    If lErro <> SUCESSO Then Error 23514
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 23515

    'Fecha os comandos
    For iIndice = 0 To 1
        lErro = Comando_Fechar(lComando(iIndice))
    Next

    Cobrador_Exclui = SUCESSO

    Exit Function

Erro_Cobrador_Exclui:

    Cobrador_Exclui = Err

    Select Case Err

        Case 23507
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 23508
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 23509, 23510
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_COBRADOR", Err)

        Case 23511
            Call Rotina_Erro(vbOKOnly, "ERRO_COBRADOR_NAO_CADASTRADO", Err, objCobrador.iCodigo)

        Case 23512
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_COBRADOR", Err)

        Case 23513
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_COBRADOR", Err, objCobrador.iCodigo)

        'Tratado na rotina chamada
        Case 23514, 23517, 42657, 62112

        Case 23515
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148170)

    End Select

    Call Transacao_Rollback

    For iIndice = 0 To 1
        lErro = Comando_Fechar(lComando(iIndice))
    Next

    Exit Function

End Function

Function Cobrador_Automatico(iCodigo As Integer) As Long
'Retorna o Código da proxima Cobrador disponível

Dim lErro As Long
Dim lNumAuto As Long

On Error GoTo Erro_Cobrador_Automatico

    'Obtem o numero Automatico do BD
    lErro = CF("CPRConfig_ObterAutomatico", "NUM_PROX_COBRADOR", "Cobradores", "Codigo", lNumAuto)
    If lErro <> SUCESSO And lErro <> 25191 Then Error 40587
    
    iCodigo = CInt(lNumAuto)

    Cobrador_Automatico = SUCESSO

    Exit Function

Erro_Cobrador_Automatico:

    Cobrador_Automatico = Err

    Select Case Err

        Case 40587
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148171)

    End Select
    
    Exit Function

End Function

Function Comissoes_GravaDebitoReceb(ByVal colInfoComissao As colInfoComissao) As Long
'Insere Comissões ligadas ao Débito no BD.
'CHAMADA EM TRANSAÇÃO

Dim lErro As Long
Dim iIndice As Integer
Dim lComando As Long
Dim lComando1 As Long
Dim objInfoComissao As ClassInfoComissao
Dim lProxNumIntCom As Long
Dim iCodigo As Integer

On Error GoTo Erro_Comissoes_GravaDebitoReceb

    'Abertura comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 17904

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 28652

    For iIndice = 1 To colInfoComissao.Count

        lErro = CF("Vendedor_Lock", lComando1, colInfoComissao(iIndice).iCodVendedor)
        If lErro <> AD_SQL_SUCESSO Then Error 28653
        
        'Gera o número automático para comissão
        lErro = CF("CPRConfig_ObterNumInt", "NUM_PROX_COMISSAO", lProxNumIntCom)
        If lErro <> SUCESSO Then Error 17936

        colInfoComissao(iIndice).lNumIntCom = lProxNumIntCom

        'Armazena os campos da coleção
        colInfoComissao(iIndice).iStatus = STATUS_LIBERADO
        colInfoComissao(iIndice).iTipoTitulo = TIPO_DEBITO
        colInfoComissao(iIndice).dtDataBaixa = DATA_NULA

        'Insere a Comissão no BD com valor negativo
        With colInfoComissao(iIndice)
            lErro = Comando_Executar(lComando, "INSERT INTO Comissoes (NumIntCom, FilialEmpresa, Status, TipoTitulo, NumIntDoc, CodVendedor, DataGeracao, DataBaixa, Percentual, ValorBase, Valor) VALUES (?,?,?,?,?,?,?,?,?,?,?)", .lNumIntCom, .iFilialEmpresa, .iStatus, .iTipoTitulo, .lNumIntDoc, .iCodVendedor, .dtDataGeracao, .dtDataBaixa, .dPercentual, .dValorBase, -.dValor)
        End With
        If lErro <> AD_SQL_SUCESSO Then Error 17935
    
    Next

    'Fechamento comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Comissoes_GravaDebitoReceb = SUCESSO

    Exit Function

Erro_Comissoes_GravaDebitoReceb:

    Comissoes_GravaDebitoReceb = Err

    Select Case Err

        Case 17904, 28652
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 17936, 28653  'Tratado na rotina chamada

        Case 17935
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_COMISSOES", Err, colInfoComissao(iIndice).lNumIntCom, iIndice)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148172)

    End Select

    'Fechamento comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Function DebitoRecCli_Exclui(ByVal objDebitoRecCli As ClassDebitoRecCli, ByVal objContabil As ClassContabil) As Long
'Exclui Débito à Receber Cliente do BD

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_DebitoRecCli_Exclui

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 17923

    lErro = CF("DebitoRecCli_Exclui_EmTransacao", objDebitoRecCli, objContabil)
    If lErro <> SUCESSO Then Error 62460
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 17934

    DebitoRecCli_Exclui = SUCESSO

    Exit Function

Erro_DebitoRecCli_Exclui:

    DebitoRecCli_Exclui = Err

    Select Case Err

        Case 17923
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 17934
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case 62460

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148173)

    End Select

    Call Transacao_Rollback

    Exit Function

End Function

Function DebitoRecCli_Grava(ByVal objDebitoRecCli As ClassDebitoRecCli, ByVal colInfoComissao As colInfoComissao, ByVal objContabil As ClassContabil) As Long
'Grava Debito a Receber Cliente no BD

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_DebitoRecCli_Grava

    'Abre a transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 17881
    
    lErro = CF("DebitoRecCli_Grava_EmTrans", objDebitoRecCli, colInfoComissao, objContabil)
    If lErro <> SUCESSO Then gError 190314

    'Encerra transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 17907

    DebitoRecCli_Grava = SUCESSO

    Exit Function

Erro_DebitoRecCli_Grava:

    DebitoRecCli_Grava = gErr

    Select Case gErr

        Case 17881
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 17907
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case 190314

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148174)

    End Select

    Call Transacao_Rollback

    Exit Function

End Function

Function DebitoRecCli_Grava_EmTrans(ByVal objDebitoRecCli As ClassDebitoRecCli, ByVal colInfoComissao As colInfoComissao, ByVal objContabil As ClassContabil) As Long
'Grava Debito a Receber Cliente no BD

Dim lErro As Long
Dim lComando1 As Long
Dim lComando2 As Long
'Dim lTransacao As Long
Dim tDebitoRecCli As typeDebitosRecCli
Dim objInfoComissao As ClassInfoComissao
Dim vbMsgRes As VbMsgBoxResult
Dim lNumIntDoc As Long, lNumIntNF As Long
Dim lNumProxDebitoRecCli As Long
Dim iIndice As Integer

On Error GoTo Erro_DebitoRecCli_Grava_EmTrans

'    'Abre a transação
'    lTransacao = Transacao_Abrir()
'    If lTransacao = 0 Then Error 17881

    'Abre os comandos
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 17883

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 17890
    
    tDebitoRecCli.sObservacao = String(STRING_DEB_REC_OBS, 0)

    'Verifica se o Débito está cadastrado
    lErro = Comando_ExecutarPos(lComando1, "SELECT NumIntDoc, FilialEmpresa, Cliente, Filial, NumTitulo, DataEmissao, Status, ValorTotal, ValorSeguro, ValorFrete, OutrasDespesas, ValorProdutos, ValorICMS, ValorICMSSubst, ValorIPI, ValorIRRF, PISRetido, COFINSRetido, CSLLRetido, Observacao FROM DebitosRecCli WHERE FilialEmpresa = ? AND Cliente = ? AND Filial = ? AND SiglaDocumento = ? AND NumTitulo = ? AND DataEmissao = ? AND Status <> ?", 0, _
        tDebitoRecCli.lNumIntDoc, tDebitoRecCli.iFilialEmpresa, tDebitoRecCli.lCliente, tDebitoRecCli.iFilial, tDebitoRecCli.lNumTitulo, tDebitoRecCli.dtDataEmissao, tDebitoRecCli.iStatus, tDebitoRecCli.dValorTotal, tDebitoRecCli.dValorSeguro, tDebitoRecCli.dValorFrete, tDebitoRecCli.dOutrasDespesas, tDebitoRecCli.dValorProdutos, tDebitoRecCli.dValorICMS, tDebitoRecCli.dValorICMSSubst, tDebitoRecCli.dValorIPI, tDebitoRecCli.dValorIRRF, tDebitoRecCli.dPISRetido, tDebitoRecCli.dCOFINSRetido, tDebitoRecCli.dCSLLRetido, tDebitoRecCli.sObservacao, objDebitoRecCli.iFilialEmpresa, objDebitoRecCli.lCliente, objDebitoRecCli.iFilial, objDebitoRecCli.sSiglaDocumento, objDebitoRecCli.lNumTitulo, objDebitoRecCli.dtDataEmissao, STATUS_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then Error 17888

    'Tenta ler
    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 17889

    'Se não encontrou
    If lErro = AD_SQL_SEM_DADOS Then

        lErro = DebitoRecCli_Testa_Repeticao(objDebitoRecCli)
        If lErro <> SUCESSO Then Error 17893

        lErro = CF("FilialCliente_Lock", objDebitoRecCli.lCliente, objDebitoRecCli.iFilial)
        If lErro <> SUCESSO Then Error 17892
    
        'Gera o número automático do próximo Débito
        lErro = CF("CPRConfig_ObterNumInt", "NUM_PROX_DEBITO_RECEBER", lNumProxDebitoRecCli)
        If lErro <> SUCESSO Then Error 17894

        objDebitoRecCli.dSaldo = Round(objDebitoRecCli.dValorTotal - (objDebitoRecCli.dValorIRRF + objDebitoRecCli.dPISRetido + objDebitoRecCli.dCOFINSRetido + objDebitoRecCli.dCSLLRetido), 2)
        objDebitoRecCli.lNumIntDoc = lNumProxDebitoRecCli

        'Insere novo registro na tabela DebitosRecCli
        lErro = Comando_Executar(lComando2, "INSERT INTO DebitosRecCli (NumIntDoc, FilialEmpresa, Cliente, Filial, SiglaDocumento, NumTitulo, Status, DataEmissao, ValorTotal, Saldo, ValorSeguro, ValorFrete, OutrasDespesas, ValorProdutos, ValorICMS, ValorICMSSubst, ValorIPI, ValorIRRF, Observacao, PISRetido, COFINSRetido, CSLLRetido) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
            objDebitoRecCli.lNumIntDoc, objDebitoRecCli.iFilialEmpresa, objDebitoRecCli.lCliente, objDebitoRecCli.iFilial, objDebitoRecCli.sSiglaDocumento, objDebitoRecCli.lNumTitulo, STATUS_LANCADO, objDebitoRecCli.dtDataEmissao, objDebitoRecCli.dValorTotal, objDebitoRecCli.dSaldo, objDebitoRecCli.dValorSeguro, objDebitoRecCli.dValorFrete, objDebitoRecCli.dOutrasDespesas, objDebitoRecCli.dValorProdutos, objDebitoRecCli.dValorICMS, objDebitoRecCli.dValorICMSSubst, objDebitoRecCli.dValorIPI, objDebitoRecCli.dValorIRRF, objDebitoRecCli.sObservacao, objDebitoRecCli.dPISRetido, objDebitoRecCli.dCOFINSRetido, objDebitoRecCli.dCSLLRetido)
        If lErro <> AD_SQL_SUCESSO Then Error 17895

        'Completa colInfoComissao
        For iIndice = 1 To colInfoComissao.Count
            colInfoComissao(iIndice).lNumIntDoc = lNumProxDebitoRecCli
            colInfoComissao(iIndice).dtDataGeracao = objDebitoRecCli.dtDataEmissao
            colInfoComissao(iIndice).iFilialEmpresa = objDebitoRecCli.iFilialEmpresa
        Next

        'Chama Comissoes_GravaDebitoReceb
        lErro = CF("Comissoes_GravaDebitoReceb", colInfoComissao)
        If lErro <> SUCESSO Then Error 17896

    Else
    'Debito a Receber existe no BD
    
        objDebitoRecCli.lNumIntDoc = tDebitoRecCli.lNumIntDoc

       'Verifica se valor foi alterado
       If (objDebitoRecCli.dValorTotal <> tDebitoRecCli.dValorTotal) Or (tDebitoRecCli.dValorSeguro <> objDebitoRecCli.dValorSeguro) Or (tDebitoRecCli.dValorFrete <> objDebitoRecCli.dValorFrete) Or (tDebitoRecCli.dOutrasDespesas) <> (objDebitoRecCli.dOutrasDespesas) Or (tDebitoRecCli.dValorProdutos <> objDebitoRecCli.dValorProdutos) Or _
            (tDebitoRecCli.dValorICMS <> objDebitoRecCli.dValorICMS) Or (tDebitoRecCli.dValorICMSSubst <> objDebitoRecCli.dValorICMSSubst) Or (tDebitoRecCli.dValorIPI <> objDebitoRecCli.dValorIPI) Or (tDebitoRecCli.dValorIRRF <> objDebitoRecCli.dValorIRRF) Or _
            (tDebitoRecCli.dPISRetido <> objDebitoRecCli.dPISRetido) Or (tDebitoRecCli.dCOFINSRetido <> objDebitoRecCli.dCOFINSRetido) Or (tDebitoRecCli.dCSLLRetido <> objDebitoRecCli.dCSLLRetido) Or (tDebitoRecCli.sObservacao <> objDebitoRecCli.sObservacao) _
            Then

            vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_NAO_E_PERMITIDO_ALTERACOES_DEBRECCLI_LANCADO", tDebitoRecCli.lNumTitulo)

            If vbMsgRes = vbNo Then Error 17898
            
        End If

        lErro = DebitoRecCli_ValidaAlteracaoComissoes(objDebitoRecCli, colInfoComissao)
        If lErro <> SUCESSO Then Error 59217
        
        'exclui comissoes mesmo que estejam baixadas
        lErro = CF("Comissoes_Exclui", TIPO_DEBITO, tDebitoRecCli.lNumIntDoc, 1)
        If lErro <> SUCESSO Then Error 17905

        'Completa colInfoComissao
        For iIndice = 1 To colInfoComissao.Count
            colInfoComissao(iIndice).lNumIntDoc = tDebitoRecCli.lNumIntDoc
            colInfoComissao(iIndice).dtDataGeracao = objDebitoRecCli.dtDataEmissao
            colInfoComissao(iIndice).iFilialEmpresa = objDebitoRecCli.iFilialEmpresa
        Next
        
        'Chama Comissoes_GravaDebitoReceb
        lErro = CF("Comissoes_GravaDebitoReceb", colInfoComissao)
        If lErro <> SUCESSO Then Error 17906

    End If
    
    If (gcolModulo.Ativo(MODULO_CONTABILIDADE) = MODULO_ATIVO) Then
    
        'se o documento foi originado fora de CPR nao pode ter a contabilidade alterada em CPR
        lErro = CF("DocumentoCPR_OrigemNFiscal", objDebitoRecCli.sSiglaDocumento, objDebitoRecCli.lNumIntDoc, lNumIntNF)
        If lErro <> SUCESSO And lErro <> 41542 Then Error 59228
        
        'se nao é um docto gerado fora do cpr
        If lErro <> SUCESSO Then
        
            If Not (objContabil Is Nothing) Then
            
                'Grava os dados contábeis (contabilidade)
                lErro = objContabil.Contabil_Gravar_Registro(objDebitoRecCli.lNumIntDoc, objDebitoRecCli.lCliente, objDebitoRecCli.iFilial, DATA_NULA, , 0)
                If lErro <> SUCESSO Then Error 20533
                
            End If

        End If
        
    End If

'    'Encerra transação
'    lErro = Transacao_Commit()
'    If lErro <> AD_SQL_SUCESSO Then Error 17907

    'Fecha os comandos
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)

    DebitoRecCli_Grava_EmTrans = SUCESSO

    Exit Function

Erro_DebitoRecCli_Grava_EmTrans:

    DebitoRecCli_Grava_EmTrans = Err

    Select Case Err

'        Case 17881
'            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 17883, 17890
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 17888, 17889
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_DEBITOSRECCLI1", Err, objDebitoRecCli.lCliente, objDebitoRecCli.iFilial, objDebitoRecCli.sSiglaDocumento, objDebitoRecCli.dtDataEmissao)

        Case 17892, 17893, 17894, 17896, 17898, 17905, 17906, 20533, 59217, 59228

        Case 17895
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_DEBITOSRECCLI", Err, lNumProxDebitoRecCli)

'        Case 17907
'            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148174)

    End Select

'    Call Transacao_Rollback
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)

    Exit Function

End Function

Function OcorrRemParcRec_Automatico(ByVal lNumIntParc As Long, iSequencial As Integer) As Long
'Retorna em iSequencial um número de ocorrência de remessa de cobrança eletrônica
'e incrementa o próximo sequencial de ocorrências de cobrança da parcela
'que pode ser associado a parcela identificada por lNumIntParc

Dim lErro As Long
Dim lTransacao As Long
Dim lComandoSel As Long
Dim lComandoMod As Long

On Error GoTo Erro_OcorrRemParcRec_Automatico

    lComandoSel = Comando_Abrir()
    If lComandoSel = 0 Then Error 27084

    lComandoMod = Comando_Abrir()
    If lComandoMod = 0 Then Error 27085

    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 27086

    lErro = Comando_ExecutarPos(lComandoSel, "SELECT ProxSeqOcorr FROM ParcelasRec WHERE NumIntDoc = ?", 0, iSequencial, lNumIntParc)
    If lErro <> AD_SQL_SUCESSO Then Error 27087

    lErro = Comando_BuscarProximo(lComandoSel)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 27088

    If lErro = AD_SQL_SEM_DADOS Then Error 27089

    lErro = Comando_ExecutarPos(lComandoMod, "UPDATE ParcelasRec SET ProxSeqOcorr = ProxSeqOcorr + 1", lComandoSel)
    If lErro <> AD_SQL_SUCESSO Then Error 27090

    'confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 27091

    Call Comando_Fechar(lComandoSel)
    Call Comando_Fechar(lComandoMod)

    OcorrRemParcRec_Automatico = SUCESSO

    Exit Function

Erro_OcorrRemParcRec_Automatico:

    OcorrRemParcRec_Automatico = Err

    Select Case Err

        Case 27084, 27085
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 27086
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 27087, 27088
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_REC", Err)

        Case 27089
            Call Rotina_Erro(vbOKOnly, "ERRO_PARCELA_REC_INEXISTENTE", Err)

        Case 27090
            Call Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_PARCELAS_REC", Err)

        Case 27091
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148175)

    End Select

    Call Transacao_Rollback
    Call Comando_Fechar(lComandoSel)
    Call Comando_Fechar(lComandoMod)

    Exit Function

End Function

Function OcorrRemParcRec_Grava(ByVal objOcorrRemParcRec As ClassOcorrRemParcRec) As Long
'Inclui ou altera uma ocorrência de cobrança a ser enviada p/cobrança eletrônica
'vai incluir ou alterar um registro em OcorrenciasRemParcRec, incrementando proxseq em ParcelasRec.
'Se a ocorrência faz com que o título volte a carteira, trocar carteira e cobrador e atualizar estatística da carteira.
'Não permite alterar ocorrência associada a bordero de cobrança.

Dim lErro As Long, alComando(5) As Long, lTransacao As Long
Dim iIndice As Integer, lNumIntDoc As Long, dtDataVctoAtual As Date, dtDataVencimentoReal As Date
Dim lNumBordero As Long, iProxSeqOcorr As Integer
Dim iTrazParaCarteira As Integer, objCarteiraCobrador As New ClassCarteiraCobrador
Dim iOcorrencia As Integer, lNumIntDocOc As Long, iInstrucao1 As Integer
Dim iCobradorAnterior As Integer, iCarteiraAnterior As Integer, dSaldo As Double, dtNovaDataVcto As Date
Dim iNumParcela As Integer
Dim objContabAutomatica As ClassContabAutomatica, iDesconto1Codigo As Integer, iDesconto2Codigo As Integer, iDesconto3Codigo As Integer
Dim vbMsgRes As VbMsgBoxResult

On Error GoTo Erro_OcorrRemParcRec_Grava

    'Abertura comandos
    For iIndice = 0 To 4
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 28626
    Next

    'Abertura transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 28627

    'Pesquisa a Ocorrência no BD
    lErro = Comando_ExecutarPos(alComando(0), "SELECT CodOcorrencia, Instrucao1, NumBordero, NovaDataVcto FROM OcorrenciasRemParcRec WHERE NumIntParc = ? AND NumSeqOcorr = ?", 0, iOcorrencia, iInstrucao1, lNumBordero, dtNovaDataVcto, objOcorrRemParcRec.lNumIntParc, objOcorrRemParcRec.iNumSeqOcorr)
    If lErro <> AD_SQL_SUCESSO Then Error 28628

    'Verifica resultado da pesquisa
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 28629

    'Ocorrência não existe no BD
    If lErro = AD_SQL_SEM_DADOS Then

        'obter numero interno que identifica a ocorrencia
        lErro = CF("Config_ObterNumInt", "CRFATConfig", "NUM_PROX_OCREMPARC", lNumIntDocOc)
        If lErro <> SUCESSO Then Error 41912
        
        objOcorrRemParcRec.lNumIntDoc = lNumIntDocOc
        
        'Insere novo registro na tabela OcorrenciasRemParcRec
        lErro = Comando_Executar(alComando(0), "INSERT INTO OcorrenciasRemParcRec (NumIntDoc, NumIntParc, NumSeqOcorr, FilialEmpresa, Cobrador, CodOcorrencia, DataRegistro, Data, TituloVoltaCarteira, NovaDataVcto, Juros, Instrucao1, DiasDeProtesto1, Instrucao2, DiasDeProtesto2, ValorCobrado, NumBordero, NumTitCobrador) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
            objOcorrRemParcRec.lNumIntDoc, objOcorrRemParcRec.lNumIntParc, objOcorrRemParcRec.iNumSeqOcorr, objOcorrRemParcRec.iFilialEmpresa, objOcorrRemParcRec.iCobrador, objOcorrRemParcRec.iCodOcorrencia, objOcorrRemParcRec.dtDataRegistro, objOcorrRemParcRec.dtData, objOcorrRemParcRec.iTituloVoltaCarteira, objOcorrRemParcRec.dtNovaDataVcto, objOcorrRemParcRec.dJuros, objOcorrRemParcRec.iInstrucao1, objOcorrRemParcRec.iDiasDeProtesto1, objOcorrRemParcRec.iInstrucao2, objOcorrRemParcRec.iDiasDeProtesto2, objOcorrRemParcRec.dValorCobrado, objOcorrRemParcRec.lNumBordero, objOcorrRemParcRec.sNumTitCobrador)
        If lErro <> AD_SQL_SUCESSO Then Error 28631

        'Seleciona a Parcela a alterar
        lErro = Comando_ExecutarPos(alComando(1), "SELECT Cobrador, CarteiraCobranca, Saldo, ProxSeqOcorr, DataVencimento, Desconto1Codigo, Desconto2Codigo, Desconto3Codigo FROM ParcelasRec WHERE NumIntDoc = ?", 0, iCobradorAnterior, iCarteiraAnterior, dSaldo, iProxSeqOcorr, dtDataVctoAtual, iDesconto1Codigo, iDesconto2Codigo, iDesconto3Codigo, objOcorrRemParcRec.lNumIntParc)
        If lErro <> AD_SQL_SUCESSO Then Error 28632

        'Tenta ler a Parcela
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SEM_DADOS And lErro <> AD_SQL_SUCESSO Then Error 28633

        If lErro = AD_SQL_SEM_DADOS Then Error 28634

        If objOcorrRemParcRec.dtNovaDataVcto = DATA_NULA Then
        
            'Altera o campo ProxSeq incrementando
            lErro = Comando_ExecutarPos(alComando(2), "UPDATE ParcelasRec SET ProxSeqOcorr = ?", alComando(1), iProxSeqOcorr + 1)
            
        Else
            
            If dtDataVctoAtual <> objOcorrRemParcRec.dtNovaDataVcto Then
            
                'se há desconto por antecipacao de pagto
                If iDesconto1Codigo <> 0 Or iDesconto2Codigo <> 0 Or iDesconto3Codigo <> 0 Then
                
                    'o titulo terá que ser baixado e entrado novamente se a data limite para este for funcao da data de vcto
                    vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_ALTERACAO_VCTO_AFETA_DESC")

                    If vbMsgRes = vbNo Then Error 59195
                
                End If
                
                lErro = CF("DataVencto_Real", objOcorrRemParcRec.dtNovaDataVcto, dtDataVencimentoReal)
                If lErro <> SUCESSO Then Error 59194
                
                'Altera o campo ProxSeq incrementando e as datas de vcto e vcto real
                lErro = Comando_ExecutarPos(alComando(2), "UPDATE ParcelasRec SET ProxSeqOcorr = ?, DataVencimento = ?, DataVencimentoReal = ?", alComando(1), iProxSeqOcorr + 1, objOcorrRemParcRec.dtNovaDataVcto, dtDataVencimentoReal)
        
            End If
            
        End If
        
        If lErro <> AD_SQL_SUCESSO Then Error 28635

        'Seleciona o Tipo de Ocorrência Cobrança
        lErro = Comando_ExecutarPos(alComando(3), "SELECT TrazParaCarteira FROM TiposDeOcorRemCobr WHERE Codigo = ?", 0, iTrazParaCarteira, objOcorrRemParcRec.iCodOcorrencia)
        If lErro <> AD_SQL_SUCESSO Then Error 28636

        'Tenta ler o Tipo de Ocorrência Cobrança
        lErro = Comando_BuscarPrimeiro(alComando(3))
        If lErro <> AD_SQL_SEM_DADOS And lErro <> AD_SQL_SUCESSO Then Error 28637
        If lErro <> AD_SQL_SUCESSO Then Error 32240

        'Se a ocorrência faz com que o título volte a ficar "em carteira", na propria empresa
        If iTrazParaCarteira = INSTR_COBR_TRAZ_CARTEIRA Then
            
            If (gcolModulo.Ativo(MODULO_CONTABILIDADE) = MODULO_ATIVO) Then
            
                Set objContabAutomatica = New ClassContabAutomatica
            
                lErro = objContabAutomatica.Inicializa_Contab(objOcorrRemParcRec, MODULO_CONTASARECEBER, "BCR", objOcorrRemParcRec.dtData, DATA_NULA)
                If lErro <> SUCESSO Then Error 56543
                
                objOcorrRemParcRec.dSaldo = dSaldo
                lErro = objContabAutomatica.GeraContabilizacao(objOcorrRemParcRec)
                If lErro <> SUCESSO Then Error 56544
                
                lErro = objContabAutomatica.Finaliza_Contab()
                If lErro <> SUCESSO Then Error 56545
            
            End If
        
            'trocar carteira e cobrador da parcela
            lErro = Comando_ExecutarPos(alComando(2), "UPDATE ParcelasRec SET Cobrador =?, CarteiraCobranca =?", alComando(1), COBRADOR_PROPRIA_EMPRESA, CARTEIRA_CARTEIRA)
            If lErro <> AD_SQL_SUCESSO Then Error 32237
            
            'atualizar estatística das carteiras
        
            'retira da estatistica da carteira anterior
            objCarteiraCobrador.iCobrador = iCobradorAnterior
            objCarteiraCobrador.iCodCarteiraCobranca = iCarteiraAnterior
            lErro = CF("CarteiraCobrador_AtualizaSaldo", objCarteiraCobrador, -1, -dSaldo)
            If lErro <> SUCESSO Then Error 32238
            
            'inclui na estatistica da carteira nova
            objCarteiraCobrador.iCobrador = COBRADOR_PROPRIA_EMPRESA
            objCarteiraCobrador.iCodCarteiraCobranca = CARTEIRA_CARTEIRA
            lErro = CF("CarteiraCobrador_AtualizaSaldo", objCarteiraCobrador, 1, dSaldo)
            If lErro <> SUCESSO Then Error 32239
        
        End If

    Else
    'Ocorrência existe no BD

        'Verifica se Ocorrência faz parte de um Bordero de Cobrança
        If lNumBordero <> 0 Then Error 28638

        'Atualiza a Ocorrência
        'Verifica se Ocorrência ou Instrução 1 foram modificadas
        If iOcorrencia <> objOcorrRemParcRec.iCodOcorrencia Or iInstrucao1 <> objOcorrRemParcRec.iInstrucao1 Then Error 43563
                        
        'se a data de vcto da parcela foi trocada, atualizar a parcela
        If dtNovaDataVcto <> objOcorrRemParcRec.dtNovaDataVcto And objOcorrRemParcRec.dtNovaDataVcto <> DATA_NULA Then
        
            'Seleciona a Parcela a alterar
            lErro = Comando_ExecutarPos(alComando(2), "SELECT Cobrador, DataVencimento, Desconto1Codigo, Desconto2Codigo, Desconto3Codigo FROM ParcelasRec WHERE NumIntDoc = ?", 0, iCobradorAnterior, dtDataVctoAtual, iDesconto1Codigo, iDesconto2Codigo, iDesconto3Codigo, objOcorrRemParcRec.lNumIntParc)
            If lErro <> AD_SQL_SUCESSO Then Error 56596
    
            'Tenta ler a Parcela
            lErro = Comando_BuscarPrimeiro(alComando(2))
            If lErro <> AD_SQL_SEM_DADOS And lErro <> AD_SQL_SUCESSO Then Error 56597
            If lErro = AD_SQL_SEM_DADOS Then Error 56598
    
            If dtDataVctoAtual <> dtNovaDataVcto Then Error 59196
            
            'se há desconto por antecipacao de pagto
            If iDesconto1Codigo <> 0 Or iDesconto2Codigo <> 0 Or iDesconto3Codigo <> 0 Then
            
                'o titulo terá que ser baixado e entrado novamente se a data limite para este for funcao da data de vcto
                vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_ALTERACAO_VCTO_AFETA_DESC")

                If vbMsgRes = vbNo Then Error 59197
            
            End If
            
            lErro = CF("DataVencto_Real", objOcorrRemParcRec.dtNovaDataVcto, dtDataVencimentoReal)
            If lErro <> SUCESSO Then Error 59198
                
            'Altera as datas de vcto e vcto real
            lErro = Comando_ExecutarPos(alComando(3), "UPDATE ParcelasRec SET DataVencimento = ?, DataVencimentoReal = ?", alComando(2), objOcorrRemParcRec.dtNovaDataVcto, dtDataVencimentoReal)
            If lErro <> AD_SQL_SUCESSO Then Error 56599
            
        End If
        
        'Altera os campos alteráveis no BD
        lErro = Comando_ExecutarPos(alComando(1), "UPDATE OcorrenciasRemParcRec SET Juros = ?, NovaDataVcto = ?, DiasDeProtesto1 = ?, Instrucao2 = ?, DiasDeProtesto2 = ?", alComando(0), objOcorrRemParcRec.dJuros, objOcorrRemParcRec.dtNovaDataVcto, objOcorrRemParcRec.iDiasDeProtesto1, objOcorrRemParcRec.iInstrucao2, objOcorrRemParcRec.iDiasDeProtesto2)
        If lErro <> AD_SQL_SUCESSO Then Error 43564

    End If

    'Fechamento transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 43565

    'Fechamento comandos
    For iIndice = 0 To 4
        Call Comando_Fechar(alComando(iIndice))
    Next

    OcorrRemParcRec_Grava = SUCESSO

    Exit Function

Erro_OcorrRemParcRec_Grava:

    OcorrRemParcRec_Grava = Err

    Select Case Err

        Case 41912, 32237, 32238, 32239, 56543, 56544, 56545, 28633, 56597, 59194, 59195, 59197, 59198
        
        Case 32240
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPO_OCORR_COBR", Err, objOcorrRemParcRec.iCodOcorrencia)
        
        Case 28626
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 28627
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 28628, 28629
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_OCORRENCIASREMPARCREC", Err, objOcorrRemParcRec.lNumIntParc, objOcorrRemParcRec.iNumSeqOcorr)

        Case 28631
            Call Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_OCORRENCIASREMPARCREC", Err, objOcorrRemParcRec.lNumIntParc, objOcorrRemParcRec.iNumSeqOcorr)

        Case 28632, 56596
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELASREC1", Err, objOcorrRemParcRec.lNumIntParc)

        Case 28634, 56598
            Call Rotina_Erro(vbOKOnly, "ERRO_PARCELAREC_NAO_CADASTRADA", Err, objOcorrRemParcRec.lNumIntParc)

        Case 28635, 56599
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_PARCELASREC", Err, objOcorrRemParcRec.lNumIntParc)

        Case 28636, 28637
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOSDEOCORREMCOBR1", Err, objOcorrRemParcRec.iCodOcorrencia)

        Case 28638
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_PARCELAREC_OCORRENCIA_BORDERO_COBRANCA", Err, objOcorrRemParcRec.lNumIntParc, objOcorrRemParcRec.iNumSeqOcorr)

        Case 43563
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_OCORRENCIA_INSTRUCAO", Err, objOcorrRemParcRec.iNumSeqOcorr)
        
        Case 43564
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_OCORRENCIA", Err, objOcorrRemParcRec.iNumSeqOcorr)

        Case 43565
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
        
        Case 59196
            Call Rotina_Erro(vbOKOnly, "ERRO_OUTRA_OCORR_ALTEROU_VCTO", Err)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148176)

    End Select

    Call Transacao_Rollback

    'Fechamento comandos
    For iIndice = 0 To 4
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function OcorrRemParcRec_Exclui(ByVal objOcorrRemParcRec As ClassOcorrRemParcRec) As Long
'Exclui uma ocorrência de cobrança a ser enviada p/cobrança eletrônica
'Não permite excluir ocorrência associada a bordero de cobrança.

Dim lErro As Long
Dim lNumBordero As Long
Dim lComando As Long
Dim lComando1 As Long
Dim lTransacao As Long, dtNovaDataVcto As Date

On Error GoTo Erro_OcorrRemParcRec_Exclui

    'Abertura comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 28596

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 28657

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 28598

    'Pesquisa a Ocorrência no BD
    lErro = Comando_ExecutarPos(lComando, "SELECT NumBordero, NovaDataVcto FROM OcorrenciasRemParcRec WHERE NumIntParc = ? AND NumSeqOcorr = ?", 0, lNumBordero, dtNovaDataVcto, objOcorrRemParcRec.lNumIntParc, objOcorrRemParcRec.iNumSeqOcorr)
    If lErro <> AD_SQL_SUCESSO Then Error 28599

    'Tenta ler
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 28600

    'Não encontrou a Ocorrência ==> Erro
    If lErro = AD_SQL_SEM_DADOS Then Error 28601

    'Verifica se Ocorrência não faz parte de um borderô de cobrança
    If lNumBordero <> 0 Then Error 28658

    'uma alteracao de data deverá ser "desfeita" pela inclusao de uma nova alteracao de data
    If dtNovaDataVcto <> DATA_NULA Then Error 59199
    
    'Lock da Ocorrência
    lErro = Comando_LockExclusive(lComando)
    If lErro <> AD_SQL_SUCESSO Then Error 28602

    'Exclui a Ocorrência da tabela OcorrenciasRemParcRec
    lErro = Comando_ExecutarPos(lComando1, "DELETE FROM OcorrenciasRemParcRec", lComando)
    If lErro <> AD_SQL_SUCESSO Then Error 28603

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 28604

    'Fechamento comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    OcorrRemParcRec_Exclui = SUCESSO

    Exit Function

Erro_OcorrRemParcRec_Exclui:

    OcorrRemParcRec_Exclui = Err

    Select Case Err

        Case 28596, 28657
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 28598
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 28599, 28600
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_OCORRENCIASREMPARCREC", Err, objOcorrRemParcRec.lNumIntParc, objOcorrRemParcRec.iNumSeqOcorr)

        Case 28601
            Call Rotina_Erro(vbOKOnly, "ERRO_OCORR_REM_COBR_NAO_CADASTRADA", Err, objOcorrRemParcRec.iNumSeqOcorr, objOcorrRemParcRec.lNumIntParc)

        Case 28602
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_OCORRENCIASREMPARCREC", Err, objOcorrRemParcRec.lNumIntParc, objOcorrRemParcRec.iNumSeqOcorr)

        Case 28603
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_OCORRENCIASREMPARCREC", Err, objOcorrRemParcRec.lNumIntParc, objOcorrRemParcRec.iNumSeqOcorr)

        Case 28604
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case 28658
            Call Rotina_Erro(vbOKOnly, "ERRO_PARCELAREC_OCORRENCIA_BORDERO_COBRANCA", Err, objOcorrRemParcRec.lNumIntParc, objOcorrRemParcRec.iNumSeqOcorr)

        Case 59199
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_OCORR_ALTERACAO_DATA", Err)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148177)

    End Select

    Call Transacao_Rollback

    'Fechamento comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Function Aplicacao_Automatico(lCodigo As Long) As Long
'Retorna o número da proxima aplicacao disponivel

Dim lErro As Long

On Error GoTo Erro_Aplicacao_Automatico

    lErro = CF("Config_ObterAutomatico", "CPRConfig", NUM_PROX_APLICACAO, "Aplicacoes", "Codigo", lCodigo)
    If lErro <> SUCESSO Then Error 17263
    
    Aplicacao_Automatico = SUCESSO

    Exit Function

Erro_Aplicacao_Automatico:

    Aplicacao_Automatico = Err

    Select Case Err

        Case 17263
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148178)

    End Select
    
    Exit Function

End Function

Function Aplicacao_Grava(ByVal objAplicacao As ClassAplicacao, ByVal objMovContaCorrente As ClassMovContaCorrente, ByVal objContabil As ClassContabil) As Long
'Grava o movimento passado como parametro como um tipo aplicacao.

Dim lTransacao As Long
Dim alComando(9) As Long
Dim iIndice As Integer
Dim lErro As Long
Dim dtDataSaldoInicial As Date
Dim iInativo As Integer

On Error GoTo Erro_Aplicacao_Grava

    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 17386

    For iIndice = 0 To 8

        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 17387

    Next

    'Lê a conta corrente passada como parâmetro
    lErro = Comando_ExecutarPos(alComando(0), "SELECT DataSaldoInicial FROM ContasCorrentesInternas WHERE Codigo = ?", 0, dtDataSaldoInicial, objMovContaCorrente.iCodConta)
    If lErro <> AD_SQL_SUCESSO Then Error 17388

    'Verifica se esta cadastrada
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 17389

    If lErro = AD_SQL_SEM_DADOS Then Error 17390

    'Se existir loca
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then Error 17391

    'Verifica se a data da aplicacao é menor que a data do saldo inicial associada a conta
    If objAplicacao.dtDataAplicacao < dtDataSaldoInicial Then Error 17392

    'Lê o tipo de aplicação passado como parâmetro
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Inativo FROM TiposDeAplicacao WHERE Codigo = ?", 0, iInativo, objAplicacao.iTipoAplicacao)
    If lErro <> AD_SQL_SUCESSO Then Error 17394

    'Verifica se esta cadastrado
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 17395

    If lErro = AD_SQL_SEM_DADOS Then Error 17396

    'Verifica se está ativo
    If iInativo = TIPOAPLICACAO_INATIVO Then Error 17409

    'Se existir loca
    lErro = Comando_LockShared(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then Error 17397

    lErro = Aplicacao_Grava2(alComando(), objAplicacao, objMovContaCorrente)
    If lErro <> SUCESSO Then Error 17489

    'Grava os dados contábeis (contabilidade)
    lErro = objContabil.Contabil_Gravar_Registro(objAplicacao.lNumMovto, 0, 0, DATA_NULA)
    If lErro <> SUCESSO Then Error 20508

    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 17436

    For iIndice = 0 To 8
        Call Comando_Fechar(alComando(iIndice))
    Next

    Aplicacao_Grava = SUCESSO

    Exit Function

Erro_Aplicacao_Grava:

    Aplicacao_Grava = Err

    Select Case Err

        Case 17386
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 17387
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 17388, 17389
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONTASCORRENTESINTERNAS1", Err, objMovContaCorrente.iCodConta)

        Case 17390
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTACORRENTE_INEXISTENTE", Err, objMovContaCorrente.iCodConta)

        Case 17391
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CONTASCORRENTESINTERNAS", Err, objMovContaCorrente.iCodConta)

        Case 17392
            Call Rotina_Erro(vbOKOnly, "ERRO_DATAAPLICACAO_MENOR", Err, objAplicacao.dtDataAplicacao, dtDataSaldoInicial)

        Case 17394, 17395
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOSDEAPLICACAO", Err, objAplicacao.iTipoAplicacao)

        Case 17396
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPOAPLICACAO_INEXISTENTE1", Err, objAplicacao.iTipoAplicacao)

        Case 17397
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_TIPOSDEAPLICACAO", Err, objAplicacao.iTipoAplicacao)

        Case 17409
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPOAPLICACAO_INATIVO", Err, objAplicacao.iTipoAplicacao)

        Case 17436
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case 17489, 20508

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148179)

    End Select

    Call Transacao_Rollback

    For iIndice = 0 To 8
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function Aplicacao_Grava2(alComando() As Long, ByVal objAplicacao As ClassAplicacao, ByVal objMovContaCorrente As ClassMovContaCorrente) As Long
'Grava o movimento passado como parametro como um tipo aplicacao.

Dim objAplicacao1 As New ClassAplicacao
Dim tAplicacao As typeAplicacao
Dim tMovContaCorrente As typeMovContaCorrente
Dim lErro As Long
Dim iInativo As Integer
Dim iExigeNumero As Integer

On Error GoTo Erro_Aplicacao_Grava2

    'Lê o tipo de pagamento
    lErro = Comando_ExecutarPos(alComando(2), "SELECT Inativo, ExigeNumero FROM TipoMeioPagto WHERE Tipo = ? ", 0, iInativo, iExigeNumero, objMovContaCorrente.iTipoMeioPagto)
    If lErro <> AD_SQL_SUCESSO Then Error 17398

    'Verifica se esta cadastrado
    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 17399

    If lErro = AD_SQL_SEM_DADOS Then Error 17400

    'Verifica se está ativo
    If iInativo = TIPOMEIOPAGTO_INATIVO Then Error 17401

    If iExigeNumero = TIPOMEIOPAGTO_EXIGENUMERO Then
        If objMovContaCorrente.lNumero = 0 Then Error 17402
    End If

    'Loca o tipo de Pagamento
    lErro = Comando_LockShared(alComando(2))
    If lErro <> AD_SQL_SUCESSO Then Error 17403

    If objMovContaCorrente.iFavorecido <> 0 Then

        'Lê o Favorecido
        lErro = Comando_ExecutarPos(alComando(3), "SELECT Inativo FROM Favorecidos WHERE Codigo = ? ", 0, iInativo, objMovContaCorrente.iFavorecido)
        If lErro <> AD_SQL_SUCESSO Then Error 17404

        lErro = Comando_BuscarPrimeiro(alComando(3))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 17405

        If lErro = AD_SQL_SEM_DADOS Then Error 17406

        'Verifica se esta ativo
        If iInativo = FAVORECIDO_INATIVO Then Error 17407

        lErro = Comando_LockShared(alComando(3))
        If lErro <> AD_SQL_SUCESSO Then Error 17408

    End If

    'Pesquisa a aplicação pelo código
    lErro = Comando_ExecutarPos(alComando(4), "SELECT FilialEmpresa, Codigo, Status, DataAplicacao, ValorAplicado, TipoAplicacao, NumMovto, SaldoAplicado, DataResgatePrevista, ValorResgatePrevisto, TaxaPrevista, ProxSeqResgate FROM Aplicacoes WHERE Codigo =?", 0, tAplicacao.iFilialEmpresa, tAplicacao.lCodigo, tAplicacao.iStatus, tAplicacao.dtDataAplicacao, tAplicacao.dValorAplicado, tAplicacao.iTipoAplicacao, tAplicacao.lNumMovto, tAplicacao.dSaldoAplicado, tAplicacao.dtDataResgatePrevista, tAplicacao.dValorResgatePrevisto, tAplicacao.dTaxaPrevista, tAplicacao.iProxSeqResgate, objAplicacao.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 17410

    'Verifica se aplicação está cadastrada
    lErro = Comando_BuscarPrimeiro(alComando(4))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 17411

    'Se a aplicação está cadastrada
    If lErro = AD_SQL_SUCESSO Then

        'Verifica se aplicacao esta excluída e se é do tipo aplicacao
        If tAplicacao.iStatus = APLICACAO_EXCLUIDA Then Error 17413
        
        'move o que esta no BD para o tipo para ser usado na atualisacao
        objAplicacao1.lCodigo = tAplicacao.lCodigo
        objAplicacao1.iStatus = tAplicacao.iStatus
        objAplicacao1.dtDataAplicacao = tAplicacao.dtDataAplicacao
        objAplicacao1.dValorAplicado = tAplicacao.dValorAplicado
        objAplicacao1.iTipoAplicacao = tAplicacao.iTipoAplicacao
        objAplicacao1.lNumMovto = tAplicacao.lNumMovto
        objAplicacao1.dSaldoAplicado = tAplicacao.dSaldoAplicado
        objAplicacao1.dtDataResgatePrevista = tAplicacao.dtDataResgatePrevista
        objAplicacao1.dValorResgatePrevisto = tAplicacao.dValorResgatePrevisto
        objAplicacao1.dTaxaPrevista = tAplicacao.dTaxaPrevista
        objAplicacao1.iProxSeqResgate = tAplicacao.iProxSeqResgate
        objAplicacao1.iFilialEmpresa = tAplicacao.iFilialEmpresa
        
        objAplicacao.lNumMovto = tAplicacao.lNumMovto
        
        
        lErro = CF("Aplicacao_Grava_Atualiza", alComando(), objAplicacao, objMovContaCorrente, objAplicacao1)
        If lErro <> SUCESSO Then Error 17487

    'Se a aplicacao nao esta cadastrada
    ElseIf lErro = AD_SQL_SEM_DADOS Then

        lErro = CF("Aplicacao_Grava_Insere", iExigeNumero, alComando(), objAplicacao, objMovContaCorrente)
        If lErro <> SUCESSO Then Error 17488

    End If

    Aplicacao_Grava2 = SUCESSO

    Exit Function

Erro_Aplicacao_Grava2:

    Aplicacao_Grava2 = Err

    Select Case Err

        Case 17398, 17399
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOMEIOPAGTO1", Err, objMovContaCorrente.iTipoMeioPagto)

        Case 17400
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPOMEIOPAGTO_INEXISTENTE", Err, objMovContaCorrente.iTipoMeioPagto)

        Case 17401
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPOMEIOPAGTO_INATIVO", Err, objMovContaCorrente.iTipoMeioPagto)

        Case 17402
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPOMEIOPAGTO_EXIGENUMERO", Err, objMovContaCorrente.iTipoMeioPagto)

        Case 17403
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_TIPOMEIOPAGTO", Err, objMovContaCorrente.iTipoMeioPagto)

        Case 17404, 17405
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FAVORECIDOS", Err, objMovContaCorrente.iFavorecido)

        Case 17406
            Call Rotina_Erro(vbOKOnly, "ERRO_FAVORECIDO_INEXISTENTE", Err, objMovContaCorrente.iFavorecido)

        Case 17407
            Call Rotina_Erro(vbOKOnly, "ERRO_FAVORECIDO_INATIVO", Err, objMovContaCorrente.iFavorecido)

        Case 17408
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_FAVORECIDOS1", Err, objMovContaCorrente.iFavorecido)

        Case 17410, 17411
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_APLICACOES2", Err, objAplicacao.lCodigo)

        Case 17413
            Call Rotina_Erro(vbOKOnly, "ERRO_APLICACAO_EXCLUIDA", Err, tAplicacao.lCodigo)

        Case 17487, 17488

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148180)

    End Select

    Exit Function

End Function

Function Aplicacao_Grava_Atualiza(alComando() As Long, ByVal objAplicacao As ClassAplicacao, ByVal objMovContaCorrente As ClassMovContaCorrente, ByVal objAplicacao1 As ClassAplicacao) As Long
'Insere o movimento cadastrado passado como parametro como um tipo aplicacao.

Dim tAplicacao As typeAplicacao
Dim tMovContaCorrente As typeMovContaCorrente
Dim lErro As Long
Dim vbMsgRes As VbMsgBoxResult

On Error GoTo Erro_Aplicacao_Grava_Atualiza

    tMovContaCorrente.sHistorico = String(STRING_MOV_HISTORICO, 0)
    tMovContaCorrente.sNumRefExterna = String(STRING_NUMREFEXTERNA, 0)
    
    'mover do objeto para o tipo
    tAplicacao.lCodigo = objAplicacao1.lCodigo
    tAplicacao.iStatus = objAplicacao1.iStatus
    tAplicacao.dtDataAplicacao = objAplicacao1.dtDataAplicacao
    tAplicacao.dValorAplicado = objAplicacao1.dValorAplicado
    tAplicacao.iTipoAplicacao = objAplicacao1.iTipoAplicacao
    tAplicacao.lNumMovto = objAplicacao1.lNumMovto
    tAplicacao.dSaldoAplicado = objAplicacao1.dSaldoAplicado
    tAplicacao.dtDataResgatePrevista = objAplicacao1.dtDataResgatePrevista
    tAplicacao.dValorResgatePrevisto = objAplicacao1.dValorResgatePrevisto
    tAplicacao.dTaxaPrevista = objAplicacao1.dTaxaPrevista
    tAplicacao.iProxSeqResgate = objAplicacao1.iProxSeqResgate
    
    'Loca a aplicação
    lErro = Comando_LockExclusive(alComando(4))
    If lErro <> AD_SQL_SUCESSO Then Error 17412

    'Pesquisa o movimento associado a aplicacao pelo NumMovto
    lErro = Comando_ExecutarPos(alComando(5), "SELECT CodConta, Tipo, Excluido, TipoMeioPagto, Numero, Historico, Favorecido, NumRefExterna FROM MovimentosContaCorrente WHERE NumMovto =?", 0, tMovContaCorrente.iCodConta, tMovContaCorrente.iTipo, tMovContaCorrente.iExcluido, tMovContaCorrente.iTipoMeioPagto, tMovContaCorrente.lNumero, tMovContaCorrente.sHistorico, tMovContaCorrente.iFavorecido, tMovContaCorrente.sNumRefExterna, tAplicacao.lNumMovto)
    If lErro <> AD_SQL_SUCESSO Then Error 17415

    'Verifica se o movimento esta cadastrado
    lErro = Comando_BuscarPrimeiro(alComando(5))
    If lErro <> AD_SQL_SUCESSO Then Error 17416

    'Loca o movimento
    lErro = Comando_LockExclusive(alComando(5))
    If lErro <> AD_SQL_SUCESSO Then Error 17417

    'Verifica se movimento esta excluido
    If tMovContaCorrente.iExcluido = EXCLUIDO Then Error 17418

    'Verifica se é do tipo aplicacao
    If tMovContaCorrente.iTipo <> MOVCCI_APLICACAO Then Error 17419

    'Verifica se os dados da tela coincidem com os do BD
    If (tAplicacao.iTipoAplicacao <> objAplicacao.iTipoAplicacao) Or (tMovContaCorrente.iCodConta <> objMovContaCorrente.iCodConta) Or (tAplicacao.dValorAplicado <> objAplicacao.dValorAplicado) Or (tAplicacao.dtDataAplicacao <> objAplicacao.dtDataAplicacao) Or (tMovContaCorrente.iTipoMeioPagto <> objMovContaCorrente.iTipoMeioPagto) Or (tMovContaCorrente.lNumero <> objMovContaCorrente.lNumero) Or _
    (tMovContaCorrente.iFavorecido <> objMovContaCorrente.iFavorecido) Or (tMovContaCorrente.sHistorico <> objMovContaCorrente.sHistorico) Or (tMovContaCorrente.sNumRefExterna <> objMovContaCorrente.sNumRefExterna) Then Error 17420

    'Atualiza a tabela
    lErro = Comando_ExecutarPos(alComando(6), "UPDATE Aplicacoes SET DataResgatePrevista = ?, ValorResgatePrevisto = ?, TaxaPrevista = ?", alComando(4), _
        objAplicacao.dtDataResgatePrevista, objAplicacao.dValorResgatePrevisto, objAplicacao.dTaxaPrevista)
    If lErro <> AD_SQL_SUCESSO Then Error 17421

    Aplicacao_Grava_Atualiza = SUCESSO

    Exit Function

Erro_Aplicacao_Grava_Atualiza:

    Aplicacao_Grava_Atualiza = Err

    Select Case Err

        Case 17412
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_APLICACOES", Err, objAplicacao.lCodigo)

        Case 17415, 17416
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCONTACORRENTE3", Err, objAplicacao.lNumMovto)

        Case 17417
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_MOVIMENTOSCONTACORRENTE2", Err, objAplicacao.lNumMovto)

        Case 17418
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVCONTACORRENTE_EXCLUIDO1", Err, tAplicacao.lNumMovto)

         Case 17419
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPO_NAO_APLICACAO", Err, tAplicacao.lNumMovto)

        Case 17420
            Call Rotina_Erro(vbOKOnly, "ERRO_CAMPOS_APLICACAO_NAO_ALTERAVEIS", Err)

        Case 17421
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_APLICACOES", Err, objAplicacao.lCodigo)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148181)

    End Select

    Exit Function

End Function

Function Aplicacao_Grava_Insere(ByVal iExigeNumero As Integer, alComando() As Long, ByVal objAplicacao As ClassAplicacao, ByVal objMovContaCorrente As ClassMovContaCorrente) As Long
'Insere o movimento passado como parametro como um tipo aplicacao.

Dim tAplicacao As typeAplicacao
Dim tMovContaCorrente As typeMovContaCorrente
Dim lErro As Long, dtData As Date
Dim lNumMovto As Long
Dim lSeq As Long

On Error GoTo Erro_Aplicacao_Grava_Insere

    'Se exige numero
    If iExigeNumero = EXIGE_NUMERO Then

        'Verificar se ja existe um registro com o mesmo codconta + TipomeioPagto + Numero
        lErro = Comando_Executar(alComando(7), "SELECT CodConta FROM MovimentosContaCorrente WHERE CodConta = ? AND TipoMeioPagto=? and Numero = ? AND Excluido = ?", _
                            tMovContaCorrente.iCodConta, objMovContaCorrente.iCodConta, objMovContaCorrente.iTipoMeioPagto, objMovContaCorrente.lNumero, NAO_EXCLUIDO)
        If lErro <> AD_SQL_SUCESSO Then Error 17422

        'Se existir -->Erro
        lErro = Comando_BuscarPrimeiro(alComando(7))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 17423

        If lErro = AD_SQL_SUCESSO Then Error 17424

    End If

    'Pega o numero do proximo movCci
    lErro = CF("MovCCI_Automatico", lNumMovto)
    If lErro <> SUCESSO Then Error 17457

    objMovContaCorrente.lNumMovto = lNumMovto

    objAplicacao.lNumMovto = lNumMovto


    'Retorna o proximo sequencial disponivel para a conta em questao
    lErro = CF("CtaCorrente_Sequencial_Automatico", objMovContaCorrente.iCodConta, lSeq)
    If lErro <> SUCESSO Then Error 17425

    objMovContaCorrente.lSequencial = lSeq
    objMovContaCorrente.dtDataMovimento = objAplicacao.dtDataAplicacao
    objMovContaCorrente.dValor = objAplicacao.dValorAplicado

    'Insere o movimento na Tabela MovimentosContasCorrentes
    lErro = Comando_Executar(alComando(5), "INSERT INTO MovimentosContaCorrente (NumMovto, FilialEmpresa, CodConta, Sequencial, Tipo, Excluido, TipoMeioPagto, Numero, DataMovimento, Valor, Historico, Favorecido, NumRefExterna) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", objMovContaCorrente.lNumMovto, giFilialEmpresa, objMovContaCorrente.iCodConta, objMovContaCorrente.lSequencial, MOVCCI_APLICACAO, NAO_EXCLUIDO, _
    objMovContaCorrente.iTipoMeioPagto, objMovContaCorrente.lNumero, objMovContaCorrente.dtDataMovimento, objMovContaCorrente.dValor, objMovContaCorrente.sHistorico, objMovContaCorrente.iFavorecido, objMovContaCorrente.sNumRefExterna)
    If lErro <> AD_SQL_SUCESSO Then Error 17426

    'Insere a aplicacao na Tabela Aplicacoes
    lErro = Comando_Executar(alComando(7), "INSERT INTO Aplicacoes (Codigo, FilialEmpresa, Status, DataAplicacao, ValorAplicado, TipoAplicacao, NumMovto, SaldoAplicado, DataResgatePrevista, ValorResgatePrevisto, TaxaPrevista, ProxSeqResgate) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)", objAplicacao.lCodigo, giFilialEmpresa, APLICACAO_ATIVA, objAplicacao.dtDataAplicacao, objAplicacao.dValorAplicado, _
              objAplicacao.iTipoAplicacao, objAplicacao.lNumMovto, objAplicacao.dValorAplicado, objAplicacao.dtDataResgatePrevista, objAplicacao.dValorResgatePrevisto, objAplicacao.dTaxaPrevista, APLIC_PROX_RESGATE)
    If lErro <> AD_SQL_SUCESSO Then Error 17427

    dtData = objAplicacao.dtDataAplicacao

    'Atualiza ou insere os dados em CCIMovDia
    lErro = CF("CCIMovDia_Grava", objMovContaCorrente.iCodConta, dtData, -objMovContaCorrente.dValor, MOVCCI_APLICACAO)
    If lErro <> SUCESSO Then Error 17430

    'Atualiza ou insere os dados em CCIMov
    lErro = CF("CCIMov_Grava", objMovContaCorrente.iCodConta, Year(dtData), Month(dtData), -objMovContaCorrente.dValor, MOVCCI_APLICACAO)
    If lErro <> SUCESSO Then Error 17434

    Aplicacao_Grava_Insere = SUCESSO

    Exit Function

Erro_Aplicacao_Grava_Insere:

    Aplicacao_Grava_Insere = Err

    Select Case Err

        Case 17422, 17423
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCONTACORRENTE2", Err, objMovContaCorrente.iCodConta, objMovContaCorrente.iTipoMeioPagto, objMovContaCorrente.lNumero)

        Case 17424
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPOMEIOPAGTO_JA_UTILIZADO", Err, objMovContaCorrente.iCodConta, objMovContaCorrente.iTipoMeioPagto, objMovContaCorrente.lNumero)

        Case 17425, 17430, 17434, 17457

        Case 17426
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MOVIMENTOSCONTACORRENTE", Err, objMovContaCorrente.iCodConta)

        Case 17427
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_APLICACOES", Err, objAplicacao.lCodigo)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148182)

    End Select

    Exit Function

End Function

Function Aplicacao_Exclui(ByVal objAplicacao As ClassAplicacao, ByVal objContabil As ClassContabil) As Long
'Exclui a aplicacao passada como parametro

Dim lErro As Long
Dim lTransacao As Long
Dim alComando(6) As Long
Dim iIndice As Integer
Dim tAplicacao As typeAplicacao
Dim objMovContaCorrente As New ClassMovContaCorrente
Dim lCodAplic As Long

On Error GoTo Erro_Aplicacao_Exclui

    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 17440

    For iIndice = 0 To 5
        
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 17441

    Next

    'Verifica se a aplicacao esta cadastrado
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Status, NumMovto FROM Aplicacoes WHERE Codigo = ?", 0, tAplicacao.iStatus, tAplicacao.lNumMovto, objAplicacao.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 17444

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 17445

    'Se a aplicacao nao esta cadastrada erro
    If lErro = AD_SQL_SEM_DADOS Then Error 17446

    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then Error 17447

    'Verifica se a aplicacao ja foi excluida
    If tAplicacao.iStatus = APLICACAO_EXCLUIDA Then Error 17448

    'Verifica se existe algum resgate para o codigo da aplicacao em questao
    lErro = Comando_ExecutarPos(alComando(1), "SELECT CodigoAplicacao FROM Resgates WHERE CodigoAplicacao = ? AND Status <> ?", 0, lCodAplic, objAplicacao.lCodigo, RESGATE_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then Error 17449

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 17450

    'Se existe resgate associado à aplicacao ==> erro
    If lErro = AD_SQL_SUCESSO Then Error 17451

    'Se nao existe resgate associado à aplicacao
    objMovContaCorrente.lNumMovto = tAplicacao.lNumMovto

    'Chama rotina de exclusao de aplicacao sem Resgates
    lErro = Aplicacao_Exclui2(alComando(), objAplicacao, objMovContaCorrente)
    If lErro <> SUCESSO Then Error 17486

    'exclui os lançamentos contábeis (se houverem) associados ao titulo em questao
    lErro = objContabil.Contabil_Exclui(objMovContaCorrente.lNumMovto, CONTABIL_EXCLUI_EFETIVO)
    If lErro <> SUCESSO Then Error 20509

    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 17475

    For iIndice = 0 To 5
        Call Comando_Fechar(alComando(iIndice))
    Next

    Aplicacao_Exclui = SUCESSO

    Exit Function

Erro_Aplicacao_Exclui:

    Aplicacao_Exclui = Err

    Select Case Err

        Case 17440
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 17441
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 17444, 17445
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_APLICACOES2", Err, objAplicacao.lCodigo)

        Case 17446
            Call Rotina_Erro(vbOKOnly, "ERRO_APLICACAO_INEXISTENTE", Err, objAplicacao.lCodigo)

        Case 17447
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_APLICACOES", Err, objAplicacao.lCodigo)

        Case 17448
            Call Rotina_Erro(vbOKOnly, "ERRO_APLICACAO_EXCLUIDA", Err, objAplicacao.lCodigo)

        Case 17449, 17450
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RESGATES1", Err, objAplicacao.lCodigo)

        Case 17451
            Call Rotina_Erro(vbOKOnly, "ERRO_APLICACAO_RESGATE", Err, lCodAplic)

        Case 17475
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case 17486, 20509

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148183)

    End Select

    Call Transacao_Rollback

    For iIndice = 0 To 5
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function Aplicacao_Exclui2(alComando() As Long, ByVal objAplicacao As ClassAplicacao, ByVal objMovContaCorrente As ClassMovContaCorrente) As Long
'Exclui a aplicacao passada como parametro no caso de nao haver Resgates

Dim lErro As Long
Dim tMovContaCorrente As typeMovContaCorrente
Dim vbMsgRes As VbMsgBoxResult
Dim lSeq As Long, dtData As Date
Dim lNumMovto As Long
Dim iAno As Integer
Dim iMes As Integer

On Error GoTo Erro_Aplicacao_Exclui2

    'Pesquisa o movimento correspondente a aplicacao
    lErro = Comando_ExecutarPos(alComando(2), "SELECT FilialEmpresa, CodConta, Sequencial, Tipo, Excluido, TipoMeioPagto, Conciliado, Valor, DataMovimento FROM MovimentosContaCorrente WHERE NumMovto = ?", 0, tMovContaCorrente.iFilialEmpresa, tMovContaCorrente.iCodConta, tMovContaCorrente.lSequencial, tMovContaCorrente.iTipo, tMovContaCorrente.iExcluido, tMovContaCorrente.iTipoMeioPagto, tMovContaCorrente.iConciliado, tMovContaCorrente.dValor, tMovContaCorrente.dtDataMovimento, objMovContaCorrente.lNumMovto)
    If lErro <> AD_SQL_SUCESSO Then Error 17452

    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO Then Error 17453

    lErro = Comando_LockExclusive(alComando(2))
    If lErro <> AD_SQL_SUCESSO Then Error 17454

    'Verifica se o movimento ja foi excluido
    If tMovContaCorrente.iExcluido = EXCLUIDO Then Error 17472

    'Verifica se o movimento se refere a uma aplicação
    If tMovContaCorrente.iTipo <> MOVCCI_APLICACAO Then Error 17455

    'Verifica se esta conciliado
    If tMovContaCorrente.iConciliado <> NAO_CONCILIADO Then

        vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_APLICACAO_MOV_CONCILIADO", objAplicacao.lCodigo)

        If vbMsgRes = vbNo Then Error 17456

        'Pega o numero do proximo movCci
        lErro = CF("MovCCI_Automatico", lNumMovto)
        If lErro <> SUCESSO Then Error 17458

        objMovContaCorrente.lNumMovto = lNumMovto

        'Retorna o proximo sequencial disponivel para a conta em questao
        lErro = CF("CtaCorrente_Sequencial_Automatico", tMovContaCorrente.iCodConta, lSeq)
        If lErro <> SUCESSO Then Error 17474

        tMovContaCorrente.lSequencial = lSeq

        'Insere um registro de deposito na tabela de Movimentos
        lErro = Comando_Executar(alComando(5), "INSERT INTO MovimentosContaCorrente (FilialEmpresa, NumMovto, CodConta, Sequencial, Tipo, Excluido, TipoMeioPagto, Valor, DataMovimento) VALUES (?,?,?,?,?,?,?,?,?)", tMovContaCorrente.iFilialEmpresa, objMovContaCorrente.lNumMovto, tMovContaCorrente.iCodConta, tMovContaCorrente.lSequencial, MOVCCI_DEPOSITO, NAO_EXCLUIDO, _
                tMovContaCorrente.iTipoMeioPagto, tMovContaCorrente.dValor, tMovContaCorrente.dtDataMovimento)
        If lErro <> AD_SQL_SUCESSO Then Error 17476

        'Exclui a aplicacao, altera Status para excluido
        lErro = Comando_ExecutarPos(alComando(3), "UPDATE Aplicacoes SET Status = ?", alComando(0), APLICACAO_EXCLUIDA)
        If lErro <> AD_SQL_SUCESSO Then Error 17459

        dtData = tMovContaCorrente.dtDataMovimento

        'Atualiza os dados em CCIMovDia
        lErro = CF("CCIMovDia_Grava", tMovContaCorrente.iCodConta, dtData, tMovContaCorrente.dValor, MOVCCI_APLICACAO_EXCLUSAO)
        If lErro <> SUCESSO Then Error 20684

        'Atualiza os dados em CCIMov
        lErro = CF("CCIMov_Grava", tMovContaCorrente.iCodConta, Year(dtData), Month(dtData), tMovContaCorrente.dValor, MOVCCI_APLICACAO_EXCLUSAO)
        If lErro <> SUCESSO Then Error 20685

    Else
        'Exclui o movimento, altera Status para excluído
        lErro = Comando_ExecutarPos(alComando(3), "UPDATE MovimentosContaCorrente SET Excluido = ?", alComando(2), EXCLUIDO)
        If lErro <> AD_SQL_SUCESSO Then Error 17460

        'Exclui a aplicacao
        lErro = Comando_ExecutarPos(alComando(4), "UPDATE Aplicacoes SET Status = ?", alComando(0), APLICACAO_EXCLUIDA)
        If lErro <> AD_SQL_SUCESSO Then Error 17461
        
        'Chama a rotina para Excluir o movimento conta da tabela CCIMovDia
        lErro = CF("CCIMovDia_Exclui", tMovContaCorrente.iCodConta, tMovContaCorrente.dtDataMovimento, -tMovContaCorrente.dValor, MOVCCI_APLICACAO_EXCLUSAO)
        If lErro <> SUCESSO Then
            Error 20682
        End If
    
        iAno = Year(tMovContaCorrente.dtDataMovimento)
        iMes = Month(tMovContaCorrente.dtDataMovimento)
    
        'Chama a rotina para Excluir o movimento conta da tabela CCIMov
        lErro = CF("CCIMov_Exclui", tMovContaCorrente.iCodConta, iAno, iMes, -tMovContaCorrente.dValor, MOVCCI_APLICACAO_EXCLUSAO)
        If lErro <> SUCESSO Then Error 20683

    End If

    Aplicacao_Exclui2 = SUCESSO

    Exit Function

Erro_Aplicacao_Exclui2:

    Aplicacao_Exclui2 = Err

    Select Case Err

        Case 17452, 17453
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCONTACORRENTE3", Err, objMovContaCorrente.lNumMovto)

        Case 17454
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_MOVIMENTOSCONTACORRENTE2", Err, objMovContaCorrente.lNumMovto)

        Case 17455
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPO_NAO_APLICACAO", Err, objMovContaCorrente.lNumMovto)

        Case 17456, 17458, 17474, 20682, 20683

        Case 17459, 17461
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_APLICACOES", Err, objAplicacao.lCodigo)

        Case 17460
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_MOVIMENTOSCONTACORRENTE2", Err, objMovContaCorrente.lNumMovto)

        Case 17476
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MOVIMENTOSCONTACORRENTE2", Err, objMovContaCorrente.lNumMovto)

        Case 17472
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTO_EXCLUIDO", Err, objMovContaCorrente.lNumMovto)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148184)

    End Select

    Exit Function

End Function

Function ParcelasPag_Modificar_DetPag(ByVal objParcelaPagar As ClassParcelaPagar) As Long
'Faz alterações de dados para pagto de uma parcela à pagar
'os seguintes cpos tem que estar preenchidos em objParcelaPagar:
'  lNumIntDoc, dtDataVencimento, dtDataVencimentoReal, iBancoCobrador, iPortador, iTipoCobranca

Dim lErro As Long, lTransacao As Long, lComando1 As Long, lComando2 As Long, lComando3 As Long, lComando4 As Long, iStatus As Integer, dValorBD As Double, iMotivoDif As Integer, dNovoSaldo As Double, dSaldoBD As Double, dDiferenca As Double, dNovoValor As Double
Dim lNumIntTitulo As Long

On Error GoTo Erro_ParcelasPag_Modificar_DetPag

    'Inicializa comandos
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 7793

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 7794

    lComando3 = Comando_Abrir()
    If lComando3 = 0 Then Error 7793

    lComando4 = Comando_Abrir()
    If lComando4 = 0 Then Error 7794

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 7795

    lErro = Comando_ExecutarPos(lComando1, "SELECT Status, Valor, Saldo, MotivoDiferenca, NumIntTitulo FROM ParcelasPag WHERE NumIntDoc = ?", 0, iStatus, dValorBD, dSaldoBD, iMotivoDif, lNumIntTitulo, objParcelaPagar.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then Error 7797

    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7798

    'Não achou a parcela --> erro
    If lErro = AD_SQL_SEM_DADOS Then Error 7799

    'If iStatus <> STATUS_ABERTO Then Error 7800
    
    dDiferenca = Round(Round(objParcelaPagar.dValor, 2) - Round(dValorBD, 2), 2)
        
    'se o valor da parcela nao foi modificado
    If dDiferenca = 0 Then
    
        lErro = Comando_ExecutarPos(lComando2, "UPDATE ParcelasPag SET DataVencimento = ?, DataVencimentoReal = ?, TipoCobranca = ?, Portador = ?, BancoCobrador = ?, MotivoDiferenca = ?, CodigoDeBarras = ?", lComando1, objParcelaPagar.dtDataVencimento, objParcelaPagar.dtDataVencimentoReal, objParcelaPagar.iTipoCobranca, objParcelaPagar.iPortador, objParcelaPagar.iBancoCobrador, objParcelaPagar.iMotivoDiferenca, objParcelaPagar.sCodigoDeBarras)
        If lErro <> AD_SQL_SUCESSO Then Error 7801

    Else
    
        'saldo novo = valor novo - valor ja' baixado
        dNovoSaldo = Round(Round(objParcelaPagar.dValor, 2) - Round(dValorBD - dSaldoBD, 2), 2)
        If dNovoSaldo < 0.01 Then Error 59478
        
        objParcelaPagar.dSaldo = dNovoSaldo
        
        'atualiza os dados da parcela
        lErro = Comando_ExecutarPos(lComando2, "UPDATE ParcelasPag SET DataVencimento = ?, DataVencimentoReal = ?, TipoCobranca = ?, Portador = ?, BancoCobrador = ?, MotivoDiferenca = ?, Valor = ?, Saldo = ?, CodigoDeBarras = ?", lComando1, objParcelaPagar.dtDataVencimento, objParcelaPagar.dtDataVencimentoReal, objParcelaPagar.iTipoCobranca, objParcelaPagar.iPortador, objParcelaPagar.iBancoCobrador, objParcelaPagar.iMotivoDiferenca, objParcelaPagar.dValor, objParcelaPagar.dSaldo, objParcelaPagar.sCodigoDeBarras)
        If lErro <> AD_SQL_SUCESSO Then Error 7801
        
        'busca o titulo para atualizar o seu saldo e valor
        lErro = Comando_ExecutarPos(lComando3, "SELECT Status, ValorTotal, Saldo FROM TitulosPag WHERE NumIntDoc = ?", 0, iStatus, dValorBD, dSaldoBD, lNumIntTitulo)
        If lErro <> AD_SQL_SUCESSO Then Error 59479
    
        lErro = Comando_BuscarPrimeiro(lComando3)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 59480
    
        'Não achou o titulo --> erro
        If lErro = AD_SQL_SEM_DADOS Then Error 59481

        'Faz lock no TítuloPagar
        lErro = Comando_LockExclusive(lComando3)
        If lErro <> AD_SQL_SUCESSO Then Error 59482
        
        If iStatus <> STATUS_LANCADO Then Error 59483
    
        dNovoSaldo = Round(Round(dSaldoBD + Round(dDiferenca, 2), 2), 2)
        'dNovoValor = Round(Round(dValorBD + Round(dDiferenca, 2), 2), 2)
        dNovoValor = dValorBD
        
        If dNovoSaldo < 0.01 Or dNovoValor < 0.01 Then Error 59484
    
        'atualiza os dados da parcela
        'lErro = Comando_ExecutarPos(lComando4, "UPDATE TitulosPag SET ValorTotal = ?, Saldo = ?", lComando3, dNovoValor, dNovoSaldo)
        'O valor do título não é afetado pelo valor da diferença pelo novo conceito
        lErro = Comando_ExecutarPos(lComando4, "UPDATE TitulosPag SET Saldo = ?", lComando3, dNovoSaldo)
        If lErro <> AD_SQL_SUCESSO Then Error 59485
        
    End If
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 7796

    'Libera comandos
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)
    Call Comando_Fechar(lComando4)

    ParcelasPag_Modificar_DetPag = SUCESSO

    Exit Function

Erro_ParcelasPag_Modificar_DetPag:

    ParcelasPag_Modificar_DetPag = Err

    Select Case Err

        Case 59478 '???? trocar msg Jones 15/09/00
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_PARCELASPAG", Err, objParcelaPagar.lNumIntTitulo, objParcelaPagar.iNumParcela)
        
        Case 7793, 7794
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 7795
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 7797, 7798
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_PAG", Err)

        Case 7799
'            Call Rotina_Erro(vbOKOnly, "ERRO_PARCELA_PAGAR_NAO_CADASTRADA", Err, objParcelaPagar.iNumParcela)

        Case 59483
            Call Rotina_Erro(vbOKOnly, "ERRO_PARCELA_PAG_NAO_ABERTA2", Err)

        Case 7801
            Call Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_PARCELAS_PAGAR", Err)

        Case 7796
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case 59479, 59480, 59481, 59482
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TITULOSPAG", Err, lNumIntTitulo)
        
        Case 59484, 59485
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_TITULOSPAG", Err, lNumIntTitulo)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error)

    End Select

    Call Transacao_Rollback
    
    'Libera comandos
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)
    Call Comando_Fechar(lComando4)

    Exit Function

End Function

Function FaturaPagar_Grava(ByVal objTituloPagar As ClassTituloPagar, ByVal colParcelaPagar As colParcelaPagar, ByVal colNFPag As ColNFsPag, ByVal objContabil As ClassContabil) As Long
'Grava o Titulo passado em objTituloPagar como uma Fatura a Pagar

Dim lErro As Long
Dim lTransacao As Long
Dim lComando As Long
Dim lComando1 As Long
Dim iFilialEmpresa As Integer
Dim lNumIntNF As Long, objParcelaPagar As ClassParcelaPagar, dValorLivroAux As Double

On Error GoTo Erro_FaturaPagar_Grava
    
    'Abre a transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 18696
    
    'Abre os comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 18697
    
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 18698
    
    'Verifica se o Titulo é um Titulo Baixado
    lErro = Comando_Executar(lComando1, "SELECT FilialEmpresa FROM TitulosPagBaixados WHERE Fornecedor = ? AND Filial = ? AND NumTitulo = ? AND DataEmissao = ? AND SiglaDocumento = ? AND Status <> ?", iFilialEmpresa, objTituloPagar.lFornecedor, objTituloPagar.iFilial, objTituloPagar.lNumTitulo, objTituloPagar.dtDataEmissao, objTituloPagar.sSiglaDocumento, STATUS_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then Error 18706
    
    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 18707
    
    If lErro = AD_SQL_SUCESSO Then Error 18708

    'Faz a Inserção ou Mudança no BD
    lErro = FaturaPagar_Grava_BD(objTituloPagar, colParcelaPagar, colNFPag)
    If lErro <> SUCESSO Then Error 18709
    
    If (gcolModulo.Ativo(MODULO_CONTABILIDADE) = MODULO_ATIVO) Then
    
        'se o documento foi originado fora de CPR nao pode ter a contabilidade alterada em CPR
        lErro = CF("DocumentoCPR_OrigemNFiscal", objTituloPagar.sSiglaDocumento, objTituloPagar.lNumIntDoc, lNumIntNF)
        If lErro <> SUCESSO And lErro <> 41542 Then gError 59224
        
        'se nao é um docto gerado fora do cpr
        If lErro <> SUCESSO Then
            
            dValorLivroAux = 0
                        
            For Each objParcelaPagar In colParcelaPagar
            
                dValorLivroAux = dValorLivroAux + Round(objParcelaPagar.dValor, 2)
                
            Next
            
            If Not (objContabil Is Nothing) Then
            
                'Grava os dados contábeis (contabilidade)
                lErro = objContabil.Contabil_Gravar_Registro(objTituloPagar.lNumIntDoc, objTituloPagar.lFornecedor, objTituloPagar.iFilial, DATA_NULA, , 0, objTituloPagar.lNumTitulo, dValorLivroAux)
                If lErro <> SUCESSO Then gError 20473
                
            End If
    
        End If
        
    End If
    
    'Fecha os comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    
    'Confirma a Transacao
    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then Error 18746
   
    FaturaPagar_Grava = SUCESSO
    
    Exit Function

Erro_FaturaPagar_Grava:

'    MsgBox "FaturaPagar_Grava - " & CStr(Err)

    FaturaPagar_Grava = Err
    
    Select Case Err

        Case 18696
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
        
        Case 18697, 18698
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
            
        Case 18706, 18707
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FATURASPAGBAIXADAS", Err, objTituloPagar.lNumTitulo)
        
        Case 18708
            Call Rotina_Erro(vbOKOnly, "ERRO_FATURA_BAIXADA_MODIFICACAO", Err, objTituloPagar.lNumTitulo)
        
        Case 18709, 20473, 59224
            
        Case 18746
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
        
    End Select
    
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Transacao_Rollback
        
    Exit Function
        
End Function

Private Function FaturaPagar_Grava_BD(ByVal objTituloPagar As ClassTituloPagar, ByVal colParcelaPagar As colParcelaPagar, ByVal colNFPag As ColNFsPag) As Long
'Grava no BD os dados do Título passado em objTituloPagar

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long, lComando2 As Long
Dim colParcelaPagarBD As New colParcelaPagar
Dim colNFPagBD As New ColNFsPag
Dim iFaturaAlterada As Integer
Dim vbMsgRes As VbMsgBoxResult
Dim tTituloPagar As typeTituloPagar
Dim objFilialFornecedor As New ClassFilialFornecedor
Dim iIndice As Integer, iParcelasAlteradas As Integer
Dim iExclusaoAux As Integer

On Error GoTo Erro_FaturaPagar_Grava_BD
    
    'Abre os comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 18710
    
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 18711
    
    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 59069
    
    tTituloPagar.sObservacao = String(STRING_TITULO_OBSERVACAO, 0)
    tTituloPagar.sNatureza = String(STRING_NATMOVCTA_CODIGO, 0)
    
    'Verifica se o Titulo já existe em TitulosPag
    'lErro = Comando_ExecutarPos(lComando, "SELECT FilialEmpresa, NumIntDoc, ValorTotal FROM TitulosPag WHERE Fornecedor = ? AND Filial = ? AND NumTitulo = ? AND DataEmissao = ? AND SiglaDocumento = ? AND Status <> ?", 0, tTituloPagar.iFilialEmpresa, tTituloPagar.lNumIntDoc, tTituloPagar.dValorTotal, objTituloPagar.lFornecedor, objTituloPagar.iFilial, objTituloPagar.lNumTitulo, objTituloPagar.dtDataEmissao, objTituloPagar.sSiglaDocumento, STATUS_EXCLUIDO)
    lErro = Comando_ExecutarPos(lComando, "SELECT FilialEmpresa, NumIntDoc, ValorTotal, ValorINSS, ValorIRRF, FilialPedCompra, NumPedCompra, PISRetido, ISSRetido, COFINSRetido, CSLLRetido, TaxaMoeda,Observacao,Status, Natureza FROM TitulosPag WHERE Fornecedor = ? AND Filial = ? AND NumTitulo = ? AND DataEmissao = ? AND SiglaDocumento = ? AND Status <> ? ", 0, tTituloPagar.iFilialEmpresa, tTituloPagar.lNumIntDoc, tTituloPagar.dValorTotal, tTituloPagar.dValorINSS, tTituloPagar.dValorIRRF, tTituloPagar.iFilialPedCompra, tTituloPagar.lNumPedCompra, tTituloPagar.dPISRetido, tTituloPagar.dISSRetido, tTituloPagar.dCOFINSRetido, tTituloPagar.dCSLLRetido, tTituloPagar.dTaxaMoeda, tTituloPagar.sObservacao, tTituloPagar.iStatus, tTituloPagar.sNatureza, objTituloPagar.lFornecedor, objTituloPagar.iFilial, objTituloPagar.lNumTitulo, objTituloPagar.dtDataEmissao, objTituloPagar.sSiglaDocumento, STATUS_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then Error 18712
    
    'Tenta ler
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 18713
    
    'Se existir
    If lErro = AD_SQL_SUCESSO Then

        'Faz lock no TítuloPagar
        lErro = Comando_LockExclusive(lComando)
        If lErro <> AD_SQL_SUCESSO Then Error 25033
       
       'Verifica se pertence a essa FilialEmpresa
        If tTituloPagar.iFilialEmpresa <> objTituloPagar.iFilialEmpresa Then Error 18714
        
        'verifica a alteracao dos campos alteraveis , se houve  - - - > altera no BD
'        If tTituloPagar.iCondicaoPagto <> objTituloPagar.iCondicaoPagto Or Abs(tTituloPagar.dTaxaMoeda - objTituloPagar.dTaxaMoeda) > DELTA_VALORMONETARIO2 Or tTituloPagar.iFilialPedCompra <> objTituloPagar.iFilialPedCompra Or tTituloPagar.lNumPedCompra <> objTituloPagar.lNumPedCompra Or tTituloPagar.sHistorico <> objTituloPagar.sHistorico Then
            
            lErro = Comando_ExecutarPos(lComando2, "UPDATE TitulosPag SET TaxaMoeda = ?, FilialPedCompra = ?, NumPedCompra =?, Historico=?, CondicaoPagto = ?, NumParcelas = ? ", lComando, objTituloPagar.dTaxaMoeda, objTituloPagar.iFilialPedCompra, objTituloPagar.lNumPedCompra, objTituloPagar.sHistorico, objTituloPagar.iCondicaoPagto, objTituloPagar.iNumParcelas)
            If lErro <> AD_SQL_SUCESSO Then Error 18713
        
'        End If
        
        'Inicializa o NumIntTitulo de cada parcela com o NumIntDoc do Título lido
        For iIndice = 1 To colParcelaPagar.Count
            colParcelaPagar(iIndice).lNumIntTitulo = tTituloPagar.lNumIntDoc
        Next
        
        'atribui ao objTituloPagar o NumIntDoc lido
        objTituloPagar.lNumIntDoc = tTituloPagar.lNumIntDoc
        
        'Lê as parcelas referentes ao Título
        lErro = CF("ParcelasPagar_Le", objTituloPagar, colParcelaPagarBD)
        If lErro <> SUCESSO Then Error 18715
        
        iParcelasAlteradas = 0

        'Verifica se o número de parcelas da tela é igual ao do BD
        If colParcelaPagarBD.Count <> colParcelaPagar.Count Then iParcelasAlteradas = 1 'Error 18716

        iFaturaAlterada = 0
    
        'Verifica se algum campo excetuando data de vcto e status foi alterado
        If iParcelasAlteradas = 0 Then
            For iIndice = 1 To colParcelaPagar.Count
                If colParcelaPagar(iIndice).dValor <> colParcelaPagarBD(iIndice).dValor Or colParcelaPagar(iIndice).iTipoCobranca <> colParcelaPagarBD(iIndice).iTipoCobranca Then
                    iParcelasAlteradas = 1 'iFaturaAlterada = 1
                End If
            Next
        End If

        If iFaturaAlterada = 0 Then
        
            'Lê as Notas Fiscais no BD vinculadas a Fatura
            lErro = CF("NfsPag_Le_FaturaPagar", objTituloPagar, colNFPagBD)
            If lErro <> SUCESSO Then Error 18717
            
            'Verifica se o número de Notas Fiscais foi alterado
            If colNFPag.Count <> colNFPagBD.Count Then iFaturaAlterada = 1
            
        End If
        
        If iFaturaAlterada = 0 Then
            If Abs(tTituloPagar.dValorTotal - objTituloPagar.dValorTotal) > DELTA_VALORMONETARIO Or Abs(tTituloPagar.dValorICMS - objTituloPagar.dValorICMS) > DELTA_VALORMONETARIO Or tTituloPagar.iCreditoICMS <> objTituloPagar.iCreditoICMS Or Abs(tTituloPagar.dValorICMSSubst - objTituloPagar.dValorICMSSubst) > DELTA_VALORMONETARIO Or _
               Abs(tTituloPagar.dValorFrete - objTituloPagar.dValorFrete) > DELTA_VALORMONETARIO Or Abs(tTituloPagar.dValorINSS - objTituloPagar.dValorINSS) > DELTA_VALORMONETARIO Or Abs(tTituloPagar.dValorIPI - objTituloPagar.dValorIPI) > DELTA_VALORMONETARIO Or tTituloPagar.iCreditoIPI <> objTituloPagar.iCreditoIPI Or _
               Abs(tTituloPagar.dOutrasDespesas - objTituloPagar.dOutrasDespesas) > DELTA_VALORMONETARIO Or Abs(tTituloPagar.dValorProdutos - objTituloPagar.dValorProdutos) > DELTA_VALORMONETARIO Or Abs(tTituloPagar.dValorIRRF - objTituloPagar.dValorIRRF) > DELTA_VALORMONETARIO Or Abs(tTituloPagar.dValorSeguro - objTituloPagar.dValorSeguro) > DELTA_VALORMONETARIO Or _
               Abs(tTituloPagar.dValorINSS - objTituloPagar.dValorINSS) > DELTA_VALORMONETARIO Or tTituloPagar.iINSSRetido <> objTituloPagar.iINSSRetido Or _
               Abs(tTituloPagar.dPISRetido - objTituloPagar.dPISRetido) > DELTA_VALORMONETARIO Or Abs(tTituloPagar.dISSRetido - objTituloPagar.dISSRetido) > DELTA_VALORMONETARIO Or Abs(tTituloPagar.dCOFINSRetido - objTituloPagar.dCOFINSRetido) > DELTA_VALORMONETARIO Or Abs(tTituloPagar.dCSLLRetido - objTituloPagar.dCSLLRetido) > DELTA_VALORMONETARIO _
               Or UCase(tTituloPagar.sNatureza) <> UCase(objTituloPagar.sNatureza) _
            Then iFaturaAlterada = 1
        End If
        
        If iFaturaAlterada = 1 Then Error 18720 'Alteração não permitida
'
'            'Avisa que só os campos alteráveis serão mudados e pergunta se deseja prosseguir
'            vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_DATAVENCIMENTO_SUSPENSO_ALTERAVEIS")
'            If vbMsgRes = vbNo Then Error 18720
'
'        End If

        If iParcelasAlteradas = 1 Then
        
            iExclusaoAux = objTituloPagar.iExclusao
            objTituloPagar.iExclusao = MARCADO
            'Faz a exclusão das parcelas referentes ao Título passado
            lErro = CF("ParcelasPagar_Exclui", objTituloPagar)
            objTituloPagar.iExclusao = iExclusaoAux
            If lErro <> SUCESSO Then Error 18721
    
            If gobjCRFAT.iCriarPagSuspenso <> 0 Then
            
                For iIndice = 1 To colParcelaPagar.Count
                    
                    colParcelaPagar(iIndice).iStatus = STATUS_SUSPENSO
                    colParcelaPagar(iIndice).sCodUsuarioLib = ""
                    colParcelaPagar(iIndice).dtDataLib = DATA_NULA
                    
                Next
            
            End If
            
            'Grava ParcelasPagar no BD
            lErro = CF("ParcelasPagar_Grava", colParcelaPagar)
            If lErro <> SUCESSO Then Error 18721
            
        Else
        
            'Altera os campos das Parcelas que são alteráveis
            lErro = CF("ParcelasPagar_Altera_CamposAlteraveis", colParcelaPagar)
            If lErro <> SUCESSO Then Error 18721
            
        End If
        
    Else  'Se o titulo não existir
        
        'Pesquisa no BD se existe alguma Fatura de Mesmo Número
        lErro = CF("FaturasPag_Testa_Repeticao", objTituloPagar)
        If lErro <> SUCESSO Then Error 18722
        
        objFilialFornecedor.iCodFilial = objTituloPagar.iFilial
        objFilialFornecedor.lCodFornecedor = objTituloPagar.lFornecedor
        
        lErro = CF("FilialFornecedor_Lock1", objFilialFornecedor)
        If lErro <> SUCESSO And lErro <> 18900 Then Error 18903
        
        'Não encontrou a Filial do Fornecedor --> erro
        If lErro = 18900 Then Error 18904
    
        'locka Condicao de Pagamento
        If objTituloPagar.iCondicaoPagto <> 0 Then
        
            lErro = CF("CondicaoPagto_Lock", lComando2, objTituloPagar.iCondicaoPagto)
            If lErro <> SUCESSO Then Error 59068
            
        End If
        
        'Gera número interno automático
        lErro = CF("TituloPagar_Automatico", tTituloPagar.lNumIntDoc)
        If lErro <> SUCESSO Then Error 18734
        
        objTituloPagar.lNumIntDoc = tTituloPagar.lNumIntDoc
        
        'Preenche Saldo = ValorTotal
        objTituloPagar.dSaldo = objTituloPagar.dValorTotal - objTituloPagar.dValorIRRF
        
        'Preenche a Data do Registro
        objTituloPagar.dtDataRegistro = gdtDataHoje

        'Insere a nova Fatura no BD
        lErro = Comando_Executar(lComando, "INSERT INTO TitulosPag (NumIntDoc, FilialEmpresa, Fornecedor, Filial, SiglaDocumento, NumTitulo, DataEmissao, Status, Saldo, NumParcelas, ValorTotal, ValorSeguro, ValorFrete, OutrasDespesas, ValorProdutos, ValorICMS, ValorICMSSubst, CreditoICMS, ValorIPI, CreditoIPI, ValorIRRF, ValorINSS, INSSRetido, DataRegistro, Observacao, CondicaoPagto, PISRetido, ISSRetido, COFINSRetido, CSLLRetido, TaxaMoeda, Natureza) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", tTituloPagar.lNumIntDoc, objTituloPagar.iFilialEmpresa, objTituloPagar.lFornecedor, objTituloPagar.iFilial, objTituloPagar.sSiglaDocumento, objTituloPagar.lNumTitulo, objTituloPagar.dtDataEmissao, objTituloPagar.iStatus, objTituloPagar.dSaldo, objTituloPagar.iNumParcelas, _
            objTituloPagar.dValorTotal, objTituloPagar.dValorSeguro, objTituloPagar.dValorFrete, objTituloPagar.dOutrasDespesas, objTituloPagar.dValorProdutos, objTituloPagar.dValorICMS, objTituloPagar.dValorICMSSubst, objTituloPagar.iCreditoICMS, objTituloPagar.dValorIPI, objTituloPagar.iCreditoIPI, objTituloPagar.dValorIRRF, objTituloPagar.dValorINSS, objTituloPagar.iINSSRetido, objTituloPagar.dtDataRegistro, objTituloPagar.sObservacao, objTituloPagar.iCondicaoPagto, objTituloPagar.dPISRetido, objTituloPagar.dISSRetido, objTituloPagar.dCOFINSRetido, objTituloPagar.dCSLLRetido, objTituloPagar.dTaxaMoeda, objTituloPagar.sNatureza)
        If lErro <> AD_SQL_SUCESSO Then Error 18735
        
        'Atribui às parcela o NumIntTitulo gerado para o Titulo gravado
        For iIndice = 1 To colParcelaPagar.Count
            
            colParcelaPagar(iIndice).lNumIntTitulo = tTituloPagar.lNumIntDoc
        
            If gobjCRFAT.iCriarPagSuspenso <> 0 Then
            
                colParcelaPagar(iIndice).iStatus = STATUS_SUSPENSO
                colParcelaPagar(iIndice).sCodUsuarioLib = ""
                colParcelaPagar(iIndice).dtDataLib = DATA_NULA
            
            End If
        
        Next

        'Grava as Parcelas
        lErro = CF("ParcelasPagar_Grava", colParcelaPagar)
        If lErro <> SUCESSO Then Error 18736
        
        'Vincula as Notas Fiscais da nova Fatura
        lErro = CF("NFsPag_Vincula", tTituloPagar.lNumIntDoc, colNFPag)
        If lErro <> SUCESSO Then Error 18737
            
    End If

    lErro = CF("FaturaPagar_Grava_BD_Customizado", objTituloPagar, colParcelaPagar, colNFPag)
    If lErro <> SUCESSO Then Error 18737

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    
    FaturaPagar_Grava_BD = SUCESSO
    
    Exit Function
    
Erro_FaturaPagar_Grava_BD:

'    MsgBox "FaturaPagar_Grava_BD - " & CStr(Err)
'
'    If Err = 18720 Then
'        If Abs(tTituloPagar.dValorTotal - objTituloPagar.dValorTotal) > DELTA_VALORMONETARIO Then
'            MsgBox "TOTAL: " & CStr(tTituloPagar.dValorTotal) & "-" & CStr(objTituloPagar.dValorTotal)
'        End If
'        If Abs(tTituloPagar.dValorICMS - objTituloPagar.dValorICMS) > DELTA_VALORMONETARIO Then
'            MsgBox "ICMS: " & CStr(tTituloPagar.dValorICMS) & "-" & CStr(objTituloPagar.dValorICMS)
'        End If
'        If tTituloPagar.iCreditoICMS <> objTituloPagar.iCreditoICMS Then
'            MsgBox "CredICMS: " & CStr(tTituloPagar.iCreditoICMS) & "-" & CStr(objTituloPagar.iCreditoICMS)
'        End If
'        If Abs(tTituloPagar.dValorICMSSubst - objTituloPagar.dValorICMSSubst) > DELTA_VALORMONETARIO Then
'            MsgBox "ICMSST: " & CStr(tTituloPagar.dValorICMSSubst) & "-" & CStr(objTituloPagar.dValorICMSSubst)
'        End If
'        If Abs(tTituloPagar.dValorFrete - objTituloPagar.dValorFrete) > DELTA_VALORMONETARIO Then
'            MsgBox "Frete: " & CStr(tTituloPagar.dValorFrete) & "-" & CStr(objTituloPagar.dValorFrete)
'        End If
'        If Abs(tTituloPagar.dValorIPI - objTituloPagar.dValorIPI) > DELTA_VALORMONETARIO Then
'            MsgBox "IPI: " & CStr(tTituloPagar.dValorIPI) & "-" & CStr(objTituloPagar.dValorIPI)
'        End If
'        If tTituloPagar.iCreditoIPI <> objTituloPagar.iCreditoIPI Then
'            MsgBox "CredIPI: " & CStr(tTituloPagar.iCreditoIPI) & "-" & CStr(objTituloPagar.iCreditoIPI)
'        End If
'        If Abs(tTituloPagar.dOutrasDespesas - objTituloPagar.dOutrasDespesas) > DELTA_VALORMONETARIO Then
'            MsgBox "OD: " & CStr(tTituloPagar.dOutrasDespesas) & "-" & CStr(objTituloPagar.dOutrasDespesas)
'        End If
'        If Abs(tTituloPagar.dValorProdutos - objTituloPagar.dValorProdutos) > DELTA_VALORMONETARIO Then
'            MsgBox "Prod: " & CStr(tTituloPagar.dValorProdutos) & "-" & CStr(objTituloPagar.dValorProdutos)
'        End If
'        If Abs(tTituloPagar.dValorIRRF - objTituloPagar.dValorIRRF) > DELTA_VALORMONETARIO Then
'            MsgBox "IRRF: " & CStr(tTituloPagar.dValorIRRF) & "-" & CStr(objTituloPagar.dValorIRRF)
'        End If
'        If Abs(tTituloPagar.dValorINSS - objTituloPagar.dValorINSS) > DELTA_VALORMONETARIO Then
'            MsgBox "INSS: " & CStr(tTituloPagar.dValorINSS) & "-" & CStr(objTituloPagar.dValorINSS)
'        End If
'        If Abs(tTituloPagar.dValorSeguro - objTituloPagar.dValorSeguro) > DELTA_VALORMONETARIO Then
'            MsgBox "Seguro: " & CStr(tTituloPagar.dValorSeguro) & "-" & CStr(objTituloPagar.dValorSeguro)
'        End If
'        If tTituloPagar.iINSSRetido <> objTituloPagar.iINSSRetido Then
'            MsgBox "INSSRetido: " & CStr(tTituloPagar.iINSSRetido) & "-" & CStr(objTituloPagar.iINSSRetido)
'        End If
'        If Abs(tTituloPagar.dPISRetido - objTituloPagar.dPISRetido) > DELTA_VALORMONETARIO Then
'            MsgBox "PisRetido: " & CStr(tTituloPagar.dPISRetido) & "-" & CStr(objTituloPagar.dPISRetido)
'        End If
'        If Abs(tTituloPagar.dISSRetido - objTituloPagar.dISSRetido) > DELTA_VALORMONETARIO Then
'            MsgBox "ISSRetido: " & CStr(tTituloPagar.dISSRetido) & "-" & CStr(objTituloPagar.dISSRetido)
'        End If
'        If Abs(tTituloPagar.dCOFINSRetido - objTituloPagar.dCOFINSRetido) > DELTA_VALORMONETARIO Then
'            MsgBox "COFINSRetido: " & CStr(tTituloPagar.dCOFINSRetido) & "-" & CStr(objTituloPagar.dCOFINSRetido)
'        End If
'        If Abs(tTituloPagar.dCSLLRetido - objTituloPagar.dCSLLRetido) > DELTA_VALORMONETARIO Then
'            MsgBox "CSLLRetido: " & CStr(tTituloPagar.dCSLLRetido) & "-" & CStr(objTituloPagar.dCSLLRetido)
'        End If
'        If UCase(tTituloPagar.sNatureza) <> UCase(objTituloPagar.sNatureza) > DELTA_VALORMONETARIO Then
'            MsgBox "Natureza: " & CStr(tTituloPagar.sNatureza) & "-" & CStr(objTituloPagar.sNatureza)
'        End If
'
'    End If

    FaturaPagar_Grava_BD = Err
    
    Select Case Err
    
        Case 18710, 18711, 59069
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 18712, 18713
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TITULOSPAG3", Err, objTituloPagar.lFornecedor, objTituloPagar.iFilial, objTituloPagar.lNumTitulo, objTituloPagar.dtDataEmissao, objTituloPagar.sSiglaDocumento)
            
        Case 18714
            Call Rotina_Erro(vbOKOnly, "ERRO_FATURA_FILIALEMPRESA_DIFERENTE", Err, objTituloPagar.lNumTitulo)
        
        Case 18715, 18717, 18720, 18721, 18722, 18734, 18736, 18737, 18903, 59068
        
        Case 18716
            Call Rotina_Erro(vbOKOnly, "ERRO_NUMERO_PARCELAS_ALTERADO", Err, colParcelaPagar.Count, colParcelaPagarBD.Count)
        
        Case 18720
            Call Rotina_Erro(vbOKOnly, "ERRO_TITPAG_ALTERACOES_NAO_PERMITIDAS", gErr, objTituloPagar.lNumTitulo)
        
        Case 18735
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_TITULOSPAG", Err, objTituloPagar.lFornecedor, objTituloPagar.iFilial, objTituloPagar.lNumTitulo, objTituloPagar.dtDataEmissao, objTituloPagar.sSiglaDocumento)
        
        Case 18904
            Call Rotina_Erro(vbOKOnly, "ERRO_FILIALFORNECEDOR_NAO_CADASTRADA", Err, objTituloPagar.lFornecedor, objTituloPagar.iFilial)
    
        Case 25033
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_TITULOSPAG", Err, objTituloPagar.lNumIntDoc)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148186)
            
    End Select
    
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    
    Exit Function

End Function

Public Function FaturaPagar_Grava_BD_Customizado(ByVal objTituloPagar As ClassTituloPagar, ByVal colParcelaPagar As colParcelaPagar, ByVal colNFPag As ColNFsPag) As Long
    FaturaPagar_Grava_BD_Customizado = SUCESSO
End Function

Function FaturaPagar_Exclui(ByVal objTituloPagar As ClassTituloPagar, ByVal objContabil As ClassContabil) As Long
'Executa a exclusão da Fatura passada por parâmetro

Dim lErro As Long
Dim lTransacao As Long
Dim lComando As Long
Dim lComando1 As Long
Dim lNumIntDoc As Long

On Error GoTo Erro_FaturaPagar_Exclui

    'Abre a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 18763
    
    'Abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 18764
    
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 18765

    'Seleciona Título na Tabela de Titulos a Pagar
    lErro = Comando_ExecutarPos(lComando, "SELECT NumIntDoc FROM TitulosPag WHERE NumIntDoc = ? AND FilialEmpresa = ? AND Status <> ? AND SiglaDocumento = ? ", 0, lNumIntDoc, objTituloPagar.lNumIntDoc, giFilialEmpresa, STATUS_EXCLUIDO, TIPODOC_FATURA_A_PAGAR)
    If lErro <> AD_SQL_SUCESSO Then Error 18766

    'Tenta ler
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 18767
    If lErro = AD_SQL_SEM_DADOS Then Error 18768
    
    'Faz "lock" no Título
    lErro = Comando_LockExclusive(lComando)
    If lErro <> AD_SQL_SUCESSO Then Error 18769
    
    'Desvincula as Notas Fiscais vinculadas ao Título
    lErro = NFPag_Desvincula(objTituloPagar)
    If lErro <> SUCESSO Then Error 18771
    
    'Faz a exclusão das parcelas referentes ao Título passado
    lErro = CF("ParcelasPagar_Exclui", objTituloPagar)
    If lErro <> SUCESSO Then Error 18770
    
    'Faz a exclusão do Título (EXCLUSÃO LÓGICA)
    lErro = Comando_ExecutarPos(lComando1, "UPDATE TitulosPag SET Status = ?", lComando, STATUS_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then Error 18779
    
    'Exclui os lançamentos contábeis (se houverem) associados ao titulo em questao
    lErro = objContabil.Contabil_Exclui(objTituloPagar.lNumIntDoc, CONTABIL_EXCLUI_EFETIVO)
    If lErro <> SUCESSO Then Error 20476

    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 18780
    
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    FaturaPagar_Exclui = SUCESSO
    
    Exit Function
    
Erro_FaturaPagar_Exclui:

    FaturaPagar_Exclui = Err

    Select Case Err
    
        Case 18763
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
            
        Case 18764, 18765
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 18766, 18767
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FATURA", Err, objTituloPagar.lNumIntDoc)

        Case 18768
            Call Rotina_Erro(vbOKOnly, "ERRO_FATURAPAG_NAO_CADASTRADA", Err, objTituloPagar.lNumIntDoc)

        Case 18769
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_TITULOSPAG", Err, objTituloPagar.lNumIntDoc)

        Case 18770, 18771, 20476
        
        Case 18779
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_TITULOSPAG", Err, objTituloPagar.lNumIntDoc)

        Case 18780
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148187)
        

    End Select
    
    Call Transacao_Rollback
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Function NFsPag_Vincula(ByVal lNumIntFatura As Long, ByVal colNFPag As ColNFsPag) As Long
'Vincula as Notas Fiscais passadas com o Título de Número passado (= lNumIntFatura)

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim lNumIntTitPag As Long, objNFsPag As ClassNFsPag
Dim lNumIntDoc As Long

On Error GoTo Erro_NFsPag_Vincula

    'Abre os comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 18738
    
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 18745
    
    'Para cada Nota Fiscal
    For Each objNFsPag In colNFPag
    
        'Tenta Ler no BD a Nota
        lErro = Comando_ExecutarPos(lComando, "SELECT NumIntTitPag, NumIntDoc FROM NFsPag WHERE Fornecedor = ? AND Filial = ? AND NumNotaFiscal = ? AND DataEmissao = ? AND FilialEmpresa = ? AND Status <> ? ", 0, lNumIntTitPag, lNumIntDoc, objNFsPag.lFornecedor, objNFsPag.iFilial, objNFsPag.lNumNotaFiscal, objNFsPag.dtDataEmissao, objNFsPag.iFilialEmpresa, STATUS_EXCLUIDO)
        If lErro <> AD_SQL_SUCESSO Then Error 18739
        
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 18740

        'Se não encontrar --> Erro
        If lErro = AD_SQL_SEM_DADOS Then Error 18741
        
        'Verifica se já está vinculada a outra Fatura
        If lNumIntTitPag <> 0 Then Error 18743
        
        objNFsPag.lNumIntDoc = lNumIntDoc
        
        'Vincula a NF a Fatura
        lErro = Comando_ExecutarPos(lComando1, "UPDATE NFspag SET NumIntTitPag = ?", lComando, lNumIntFatura)
        If lErro <> AD_SQL_SUCESSO Then Error 18744
               
    Next
    
    'Fecha os comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    NFsPag_Vincula = SUCESSO
    
    Exit Function

Erro_NFsPag_Vincula:

    NFsPag_Vincula = Err
    
    Select Case Err
    
        Case 18738, 18745
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
            
        Case 18739, 18740, 18741
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFSPAG1", Err, objNFsPag.lNumNotaFiscal)
        
        Case 18743
            Call Rotina_Erro(vbOKOnly, "ERRO_NF_JA_VINCULADA", Err, objNFsPag.lNumNotaFiscal)
            
        Case 18744
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_NFSPAG", Err, objNFsPag.lNumNotaFiscal)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148188)

        End Select

    Exit Function

End Function

Private Function NFPag_Desvincula(ByVal objTituloPagar As ClassTituloPagar) As Long
'Desvincula as Notas Fiscais vinculadas ao Título passado

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long, lNumIntDocNF As Long
Dim lNumIntTitPag As Long

On Error GoTo Erro_NFPag_Desvincula

    'Abre os Comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 18772
    
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 18773
    
    'Seleciona as Notas Fiscais
    lErro = Comando_ExecutarPos(lComando, "SELECT NumIntDoc FROM NFsPag WHERE NumIntTitPag = ? AND Status <> ?", 0, lNumIntDocNF, objTituloPagar.lNumIntDoc, STATUS_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then Error 18774
       
    'Tenta ler
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 18775
    
    'Loop de Notas Fiscais
    Do While lErro = AD_SQL_SUCESSO
    
        'Desvincula a Nota Fiscal
        lErro = Comando_ExecutarPos(lComando1, "UPDATE NFsPag SET NumIntTitPag = 0 ", lComando)
        If lErro <> AD_SQL_SUCESSO Then Error 18777
        
        'Tenta ler próxima
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 18778
        
    Loop
        
    'Fecha comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    
    NFPag_Desvincula = SUCESSO
    
    Exit Function
        
Erro_NFPag_Desvincula:

    NFPag_Desvincula = Err
    
    Select Case Err
    
        Case 18772, 18773
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 18774, 19775, 18778
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELASPAG", Err, lNumIntTitPag)
                
        Case 18777
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_PARCELASPAG", Err, lNumIntTitPag)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148189)
            
    End Select
    
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    
    Exit Function
    
End Function

Function Resgate_Grava(ByVal objResgate As ClassResgate, ByVal objMovContaCorrente As ClassMovContaCorrente, ByVal objAplicacao As ClassAplicacao, ByVal objContabil As ClassContabil) As Long
'Grava o movimento passado como parametro como um tipo resgate.

Dim lTransacao As Long
Dim alComando(9) As Long
Dim iIndice As Integer
Dim lErro As Long
Dim dtDataSaldoInicial As Date
Dim iInativo As Integer
Dim iExigeNumero As Integer
Dim tResgate As typeResgate
Dim tAplicacao As typeAplicacao
Dim tMovContaCorrente As typeMovContaCorrente
Dim vbMsgRes As VbMsgBoxResult

On Error GoTo Erro_Resgate_Grava

    tMovContaCorrente.sHistorico = String(STRING_MOV_HISTORICO, 0)
    tMovContaCorrente.sNumRefExterna = String(STRING_NUMREFEXTERNA, 0)

    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 17556

    For iIndice = LBound(alComando) To UBound(alComando)
        
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 17557

    Next

    'Pesquisa a aplicacao pelo codigo
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Codigo, Status, DataAplicacao, ValorAplicado, TipoAplicacao, NumMovto, SaldoAplicado, DataResgatePrevista, ValorResgatePrevisto, TaxaPrevista, ProxSeqResgate FROM Aplicacoes WHERE Codigo = ?", 0, tAplicacao.lCodigo, tAplicacao.iStatus, tAplicacao.dtDataAplicacao, tAplicacao.dValorAplicado, tAplicacao.iTipoAplicacao, tAplicacao.lNumMovto, tAplicacao.dSaldoAplicado, tAplicacao.dtDataResgatePrevista, tAplicacao.dValorResgatePrevisto, tAplicacao.dTaxaPrevista, tAplicacao.iProxSeqResgate, objResgate.lCodigoAplicacao)
    If lErro <> AD_SQL_SUCESSO Then Error 17558

    'Verifica se aplicacao esta cadastrada
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 17559

    'Loca a aplicacao
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then Error 17560

    'Verifica se aplicacao esta excluída e se é do tipo aplicacao
    If tAplicacao.iStatus = APLICACAO_EXCLUIDA Then Error 17561

    'Le a conta corrente passada como parametro
    lErro = Comando_ExecutarPos(alComando(1), "SELECT DataSaldoInicial FROM ContasCorrentesInternas WHERE Codigo = ?", 0, dtDataSaldoInicial, objMovContaCorrente.iCodConta)
    If lErro <> AD_SQL_SUCESSO Then Error 17562

    'Verifica se esta cadastrada
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 17563

    If lErro = AD_SQL_SEM_DADOS Then Error 17564

    'Se existir loca
    lErro = Comando_LockExclusive(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then Error 17565

    'Verifica se a data do resgate é menor que a data do saldo inicial associada a conta
    If objMovContaCorrente.dtDataMovimento < dtDataSaldoInicial Then Error 17566
    If objMovContaCorrente.dtDataMovimento < tAplicacao.dtDataAplicacao Then Error 40713
    
    'Le o tipo de pagamento
    lErro = Comando_ExecutarPos(alComando(2), "SELECT Inativo, ExigeNumero FROM TipoMeioPagto WHERE Tipo = ? ", 0, iInativo, iExigeNumero, objMovContaCorrente.iTipoMeioPagto)
    If lErro <> AD_SQL_SUCESSO Then Error 17567

    'Verifica se esta cadastrado
    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 17568

    If lErro = AD_SQL_SEM_DADOS Then Error 17569

    'Verifica se está ativo
    If iInativo = TIPOMEIOPAGTO_INATIVO Then Error 17570

    If iExigeNumero = TIPOMEIOPAGTO_EXIGENUMERO Then
        If objMovContaCorrente.lNumero = 0 Then Error 17571
    End If

    'Loca o tipo de Pagamento
    lErro = Comando_LockShared(alComando(2))
    If lErro <> AD_SQL_SUCESSO Then Error 17572

    'Pesquisa o resgate pelo CodAplicacao + SeqResgate
    lErro = Comando_ExecutarPos(alComando(3), "SELECT  Status, NumMovto, ValorResgatado, Rendimentos, ValorIRRF, Descontos, SaldoAnterior FROM Resgates WHERE CodigoAplicacao = ? AND SeqResgate = ?", 0, tResgate.iStatus, tResgate.lNumMovto, tResgate.dValorResgatado, tResgate.dRendimentos, tResgate.dValorIRRF, tResgate.dDescontos, tResgate.dSaldoAnterior, objResgate.lCodigoAplicacao, objResgate.iSeqResgate)
    If lErro <> AD_SQL_SUCESSO Then Error 17573

    'Verifica se resgate esta cadastrado
    lErro = Comando_BuscarPrimeiro(alComando(3))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 17574

    'O resgate esta cadastrado
    If lErro = AD_SQL_SUCESSO Then
        
        'Pesquisa o movimento associado ao resgate pelo NumMovto
        lErro = Comando_ExecutarPos(alComando(4), "SELECT CodConta, Tipo, Excluido, TipoMeioPagto, Numero, Historico, Favorecido, NumRefExterna FROM MovimentosContaCorrente WHERE NumMovto =?", 0, tMovContaCorrente.iCodConta, tMovContaCorrente.iTipo, tMovContaCorrente.iExcluido, tMovContaCorrente.iTipoMeioPagto, tMovContaCorrente.lNumero, tMovContaCorrente.sHistorico, tMovContaCorrente.iFavorecido, tMovContaCorrente.sNumRefExterna, tResgate.lNumMovto)
        If lErro <> AD_SQL_SUCESSO Then Error 17578
    
        'Verifica se o movimento esta cadastrado
        lErro = Comando_BuscarPrimeiro(alComando(4))
        If lErro <> AD_SQL_SUCESSO Then Error 17579
    
        'Loca o movimento
        lErro = Comando_LockExclusive(alComando(4))
        If lErro <> AD_SQL_SUCESSO Then Error 17580
    
        'Verifica se o movimento é do tipo resgate
        If tMovContaCorrente.iTipo <> MOVCCI_RESGATE Then Error 55943
    
        'Verifica se movimento esta excluido
        If tMovContaCorrente.iExcluido = EXCLUIDO Then Error 17581
    
        'Verifica se os dados da tela coincidem com os do BD
        If (tResgate.lCodigoAplicacao <> objResgate.lCodigoAplicacao) Or (tResgate.iSeqResgate <> objResgate.iSeqResgate) Or (tMovContaCorrente.dtDataMovimento <> objMovContaCorrente.dtDataMovimento) Or (tMovContaCorrente.iCodConta <> objMovContaCorrente.iCodConta) Or (tResgate.dRendimentos <> objResgate.dRendimentos) Or (tResgate.dValorResgatado <> tResgate.dValorResgatado) Or (tResgate.dValorIRRF <> objResgate.dValorIRRF) Or _
        (tResgate.dDescontos <> objResgate.dDescontos) Or (tMovContaCorrente.iTipoMeioPagto <> objMovContaCorrente.iTipoMeioPagto) Or (tMovContaCorrente.lNumero <> objMovContaCorrente.lNumero) Then
    
           'Avisar que tais dados nao serao alterados e pergunta se quer continuar
           vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_CAMPOS_RESGATE_NAO_ALTERAVEIS")
    
           If vbMsgRes = vbNo Then Error 17582
    
        End If

        'Atualiza a tabela de Movimentos
        lErro = Comando_ExecutarPos(alComando(5), "UPDATE MovimentosContaCorrente SET Historico = ?, NumRefExterna = ?", alComando(4), objMovContaCorrente.sHistorico, objMovContaCorrente.sNumRefExterna)
        If lErro <> AD_SQL_SUCESSO Then Error 17583
    
        'Atualiza a tabela de Aplicacaoes
        lErro = Comando_ExecutarPos(alComando(6), "UPDATE Aplicacoes SET DataResgatePrevista = ?, ValorResgatePrevisto = ?, TaxaPrevista = ?", alComando(0), _
            objAplicacao.dtDataResgatePrevista, objAplicacao.dValorResgatePrevisto, objAplicacao.dTaxaPrevista)
        If lErro <> AD_SQL_SUCESSO Then Error 17584
        
        objMovContaCorrente.lNumMovto = tResgate.lNumMovto
        
    End If

    'O resgate nao esta cadastrado
    If lErro = AD_SQL_SEM_DADOS Then
        lErro = CF("Resgate_Grava2", iExigeNumero, alComando(), objResgate, objMovContaCorrente, objAplicacao)
        If lErro <> SUCESSO Then Error 17576

    End If

    'Grava os dados contábeis (contabilidade)
    lErro = objContabil.Contabil_Gravar_Registro(objMovContaCorrente.lNumMovto, 0, 0, DATA_NULA)
    If lErro <> SUCESSO Then Error 20513

    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 17577

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Resgate_Grava = SUCESSO

    Exit Function

Erro_Resgate_Grava:

    Resgate_Grava = Err

    Select Case Err

        Case 17556
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 17557
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 17558, 17559
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_APLICACOES2", Err, objResgate.lCodigoAplicacao)

        Case 17560
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_APLICACOES", Err, objResgate.lCodigoAplicacao)

        Case 17561
            Call Rotina_Erro(vbOKOnly, "ERRO_APLICACAO_EXCLUIDA", Err, tAplicacao.lCodigo)

        Case 17562, 17563
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONTASCORRENTESINTERNAS1", Err, objMovContaCorrente.iCodConta)

        Case 17564
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTACORRENTE_INEXISTENTE", Err, objMovContaCorrente.iCodConta)

        Case 17565
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CONTASCORRENTESINTERNAS", Err, objMovContaCorrente.iCodConta)

        Case 17566
            Call Rotina_Erro(vbOKOnly, "ERRO_DATA_RESGATE_MENOR", Err, objMovContaCorrente.dtDataMovimento, dtDataSaldoInicial)

        Case 17567, 17568
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOMEIOPAGTO1", Err, objMovContaCorrente.iTipoMeioPagto)

        Case 17569
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPOMEIOPAGTO_INEXISTENTE", Err, objMovContaCorrente.iTipoMeioPagto)

        Case 17570
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPOMEIOPAGTO_INATIVO", Err, objMovContaCorrente.iTipoMeioPagto)

        Case 17571
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPOMEIOPAGTO_EXIGENUMERO", Err, objMovContaCorrente.iTipoMeioPagto)

        Case 17572
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_TIPOMEIOPAGTO", Err, objMovContaCorrente.iTipoMeioPagto)

        Case 17573, 17574
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RESGATES1", Err, objResgate.lCodigoAplicacao, objResgate.iSeqResgate)

        Case 17576

        Case 17577
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case 17578, 17579
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCONTACORRENTE3", Err, tResgate.lNumMovto)

        Case 17580
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_MOVIMENTOSCONTACORRENTE2", Err, tResgate.lNumMovto)

        Case 17581
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVCONTACORRENTE_EXCLUIDO1", Err, tResgate.lNumMovto)

        Case 17582, 20513

        Case 17583
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_MOVIMENTOSCONTACORRENTE2", Err, tResgate.lNumMovto)

        Case 17584
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_APLICACOES", Err, objResgate.lCodigoAplicacao)

        Case 40713
            Call Rotina_Erro(vbOKOnly, "ERRO_DATA_RESGATE_MENOR1", Err, objMovContaCorrente.dtDataMovimento, tAplicacao.dtDataAplicacao)
            
        Case 55943
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPO_NAO_RESGATE", Err, tResgate.lNumMovto)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148190)

    End Select

    Call Transacao_Rollback

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Resgate_Grava2(ByVal iExigeNumero As Integer, alComando() As Long, ByVal objResgate As ClassResgate, ByVal objMovContaCorrente As ClassMovContaCorrente, ByVal objAplicacao As ClassAplicacao) As Long
'Insere o movimento passado como parametro como um tipo resgate.

Dim tAplicacao As typeAplicacao
Dim tMovContaCorrente As typeMovContaCorrente
Dim lErro As Long
Dim lNumMovto As Long
Dim lSeq As Long, dtData As Date
Dim dSalAnt As Double
Dim dRend As Double
Dim dValResg As Double
Dim dSalAtual As Double
Dim objMovContaCorrenteAplic As New ClassMovContaCorrente
Dim objAplicacao1 As New ClassAplicacao

On Error GoTo Erro_Resgate_Grava2

    'Se exige numero
    If iExigeNumero = EXIGE_NUMERO Then

        'Verificar se ja existe um registro com o mesmo codconta + TipomeioPagto + Numero
        lErro = Comando_Executar(alComando(4), "SELECT CodConta FROM MovimentosContaCorrente WHERE CodConta = ? AND TipoMeioPagto=? and Numero = ? AND Excluido = ?", _
                            tMovContaCorrente.iCodConta, objMovContaCorrente.iCodConta, objMovContaCorrente.iTipoMeioPagto, objMovContaCorrente.lNumero, NAO_EXCLUIDO)
        If lErro <> AD_SQL_SUCESSO Then gError 17585

        'Se existir -->Erro
        lErro = Comando_BuscarPrimeiro(alComando(4))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 17586

        If lErro = AD_SQL_SUCESSO Then gError 17587

    End If

    'Pega o numero do proximo movCci
    lErro = CF("MovCCI_Automatico", lNumMovto)
    If lErro <> SUCESSO Then gError 17588

    objMovContaCorrente.lNumMovto = lNumMovto

    objResgate.lNumMovto = lNumMovto

    'Retorna o proximo sequencial disponivel para a conta em questao
    lErro = CF("CtaCorrente_Sequencial_Automatico", objMovContaCorrente.iCodConta, lSeq)
    If lErro <> SUCESSO Then gError 17589

    objMovContaCorrente.lSequencial = lSeq
    objMovContaCorrente.dValor = IIf(objResgate.dValorResgatado >= 0, objResgate.dValorCreditado, objResgate.dValorResgatado)

    'Insere o movimento na Tabela MovimentosContasCorrentes
    lErro = Comando_Executar(alComando(5), "INSERT INTO MovimentosContaCorrente (NumMovto, FilialEmpresa, CodConta, Sequencial, Tipo, Excluido, TipoMeioPagto, Numero, DataMovimento, Valor, Historico,  NumRefExterna) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)", objMovContaCorrente.lNumMovto, giFilialEmpresa, objMovContaCorrente.iCodConta, objMovContaCorrente.lSequencial, MOVCCI_RESGATE, NAO_EXCLUIDO, _
        objMovContaCorrente.iTipoMeioPagto, objMovContaCorrente.lNumero, objMovContaCorrente.dtDataMovimento, objMovContaCorrente.dValor, objMovContaCorrente.sHistorico, objMovContaCorrente.sNumRefExterna)
    If lErro <> AD_SQL_SUCESSO Then gError 17590

    dtData = objMovContaCorrente.dtDataMovimento

    dSalAnt = objResgate.dSaldoAnterior
    dRend = objResgate.dRendimentos
    dValResg = objResgate.dValorResgatado

    dSalAtual = Round(dSalAnt + dRend - dValResg, 2)
    
    objAplicacao1.lCodigo = objResgate.lCodigoAplicacao
    objAplicacao1.iFilialEmpresa = giFilialEmpresa
    
    'Le o Movimento da Aplicação
    lErro = CF("Aplicacao_Le", objAplicacao1)
    If lErro <> SUCESSO And lErro <> 17241 Then gError 69193

    If lErro = 17241 Then gError 69194
    
    objMovContaCorrenteAplic.lNumMovto = objAplicacao1.lNumMovto
    
    'Lê a conta da Aplicacao
    lErro = CF("MovContaCorrente_Le", objMovContaCorrenteAplic)
    If lErro <> SUCESSO And lErro <> 11893 Then gError 69180
    
    If lErro = 11893 Then gError 69181
    
    'Atualiza ou insere os dados em CCIMovDia
    lErro = CF("CCIMovDia_Grava", objMovContaCorrente.iCodConta, dtData, objMovContaCorrente.dValor, MOVCCI_RESGATE, dValResg - dRend, objMovContaCorrenteAplic.iCodConta)
    If lErro <> SUCESSO Then gError 17591

    'Atualiza ou insere os dados em CCIMov
    lErro = CF("CCIMov_Grava", objMovContaCorrente.iCodConta, Year(dtData), Month(dtData), objMovContaCorrente.dValor, MOVCCI_RESGATE, dValResg - dRend, objMovContaCorrenteAplic.iCodConta)
    If lErro <> SUCESSO Then gError 17592
    
    'Insere o resgate na Tabela de Resgates
    lErro = Comando_Executar(alComando(6), "INSERT INTO Resgates (CodigoAplicacao, SeqResgate, Status, NumMovto, ValorResgatado, Rendimentos, ValorIRRF, Descontos, SaldoAnterior) VALUES (?,?,?,?,?,?,?,?,?)", objResgate.lCodigoAplicacao, objResgate.iSeqResgate, RESGATE_ATIVO, _
              objResgate.lNumMovto, objResgate.dValorResgatado, objResgate.dRendimentos, objResgate.dValorIRRF, objResgate.dDescontos, objResgate.dSaldoAnterior)
    If lErro <> AD_SQL_SUCESSO Then gError 17593

    'Atualiza a sequencia do resgate
    objAplicacao.iProxSeqResgate = objResgate.iSeqResgate + 1
    
    If dSalAtual = 0 Then

        objAplicacao.dSaldoAplicado = dSalAtual
        'Atualiza a tabela de Aplicacaoes (aplicacao resgatada)
        lErro = Comando_ExecutarPos(alComando(7), "UPDATE Aplicacoes SET Status = ?, DataBaixa = ?, SaldoAplicado = ?, DataResgatePrevista = ?, ValorResgatePrevisto = ?, TaxaPrevista = ?, ProxSeqResgate = ?", alComando(0), APLICACAO_RESGATADA, objMovContaCorrente.dtDataMovimento, _
            objAplicacao.dSaldoAplicado, objAplicacao.dtDataResgatePrevista, objAplicacao.dValorResgatePrevisto, objAplicacao.dTaxaPrevista, objAplicacao.iProxSeqResgate)
        If lErro <> AD_SQL_SUCESSO Then gError 17597

    Else

        objAplicacao.dSaldoAplicado = dSalAtual
        'Atualiza a tabela de Aplicacoes (aplicacao ativa)
        lErro = Comando_ExecutarPos(alComando(7), "UPDATE Aplicacoes SET Status = ?, DataBaixa = ?, SaldoAplicado = ?, DataResgatePrevista = ?, ValorResgatePrevisto = ?, TaxaPrevista = ?, ProxSeqResgate = ?", alComando(0), APLICACAO_ATIVA, DATA_NULA, _
            objAplicacao.dSaldoAplicado, objAplicacao.dtDataResgatePrevista, objAplicacao.dValorResgatePrevisto, objAplicacao.dTaxaPrevista, objAplicacao.iProxSeqResgate)
        If lErro <> AD_SQL_SUCESSO Then gError 17598

    End If

    Resgate_Grava2 = SUCESSO

    Exit Function

Erro_Resgate_Grava2:

    Resgate_Grava2 = gErr

    Select Case gErr

        Case 17585, 17586
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCONTACORRENTE2", gErr, objMovContaCorrente.iCodConta, objMovContaCorrente.iTipoMeioPagto, objMovContaCorrente.lNumero)

        Case 17587
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPOMEIOPAGTO_JA_UTILIZADO", gErr, objMovContaCorrente.iCodConta, objMovContaCorrente.iTipoMeioPagto, objMovContaCorrente.lNumero)

        Case 17588, 17589, 17591, 17592, 69180, 69193

        Case 17590
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MOVIMENTOSCONTACORRENTE", gErr, objMovContaCorrente.iCodConta)

        Case 17593
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_RESGATES", gErr, objResgate.lCodigoAplicacao, objResgate.iSeqResgate)

        Case 17597, 17598
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_APLICACOES", gErr, objResgate.lCodigoAplicacao)
        
        Case 69181
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTO_NAO_CADASTRADO", gErr)
        
        Case 69194
            Call Rotina_Erro(vbOKOnly, "ERRO_APLICACAO_INEXISTENTE", gErr, objAplicacao.lCodigo)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148191)

    End Select

    Exit Function

End Function

Function Resgate_Exclui(ByVal objResgate As ClassResgate, ByVal objContabil As ClassContabil) As Long
'Exclui o resgate passada como parametro

Dim lErro As Long
Dim lTransacao As Long
Dim alComando(12) As Long
Dim iIndice As Integer
Dim tResgate As typeResgate

On Error GoTo Erro_Resgate_Exclui

    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 17601

    For iIndice = LBound(alComando) To UBound(alComando)

        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 17602

    Next

    'Pesquisa o resgate pelo codigo e sequencial
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Status, NumMovto, ValorResgatado, Rendimentos FROM Resgates WHERE CodigoAplicacao = ? AND SeqResgate = ?", 0, tResgate.iStatus, tResgate.lNumMovto, tResgate.dValorResgatado, tResgate.dRendimentos, objResgate.lCodigoAplicacao, objResgate.iSeqResgate)
    If lErro <> AD_SQL_SUCESSO Then Error 17603

    'Verifica se o resgate esta cadastrado
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 17604

    'Se o resgate nao estiver cadastrado ==> erro
    If lErro = AD_SQL_SEM_DADOS Then Error 17605

    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then Error 17606

    'Verifica se a aplicacao ja foi excluida
    If tResgate.iStatus = RESGATE_EXCLUIDO Then Error 17607
    
    'exclui os lançamentos contábeis (se houverem) associados ao titulo em questao
    lErro = objContabil.Contabil_Exclui(tResgate.lNumMovto, CONTABIL_EXCLUI_EFETIVO)
    If lErro <> SUCESSO Then Error 20489
              
    'Atualiza o valor de SaldoAnterior da tabela de Resgate e Atualiza o SaldoAplicado da tabela de Aplicacoes
    lErro = Resgate_Exclui3(alComando(2), alComando(7), objResgate)
    If lErro <> SUCESSO Then Error 40727
    
    'Altera os valores na tabela de Aplicacoes
    lErro = Aplicacoes_Atualiza(alComando(3), alComando(4), objResgate)
    If lErro <> SUCESSO Then Error 40726
    
    objResgate.lNumMovto = tResgate.lNumMovto
    objResgate.dValorResgatado = tResgate.dValorResgatado
    objResgate.dRendimentos = tResgate.dRendimentos
                 
    'Exclui o movimento do resgate passado como parametro
    lErro = CF("Resgate_Exclui2", alComando(), objResgate)
    If lErro <> SUCESSO Then Error 17617

    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 17618

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Resgate_Exclui = SUCESSO

    Exit Function

Erro_Resgate_Exclui:

    Resgate_Exclui = Err

    Select Case Err

        Case 17601
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 17602
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 17603, 17604
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RESGATES1", Err, objResgate.lCodigoAplicacao, objResgate.iSeqResgate)

        Case 17605
            Call Rotina_Erro(vbOKOnly, "ERRO_RESGATE_INEXISTENTE1", Err, objResgate.lCodigoAplicacao, objResgate.iSeqResgate)

        Case 17606
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_RESGATES", Err, objResgate.lCodigoAplicacao, objResgate.iSeqResgate)

        Case 17607
            Call Rotina_Erro(vbOKOnly, "ERRO_RESGATE_EXCLUIDO", Err, objResgate.lCodigoAplicacao)
 
        Case 17617, 40726, 40727

        Case 17618
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148192)

    End Select

    Call Transacao_Rollback

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function Resgate_Exclui3(ByVal lComando As Long, ByVal lComando1 As Long, ByVal objResgate As ClassResgate) As Long
'Atualiza SaldoAnterior na tabela de Resgate

Dim lErro As Long
Dim tResgate As typeResgate

On Error GoTo Erro_Resgate_Exclui3

    'Le os registros da tabela de resgate com SeqResgate > CodResgate que foi excluido
    lErro = Comando_ExecutarPos(lComando, "SELECT SeqResgate, ValorResgatado, Rendimentos FROM Resgates WHERE Status = ? AND CodigoAplicacao = ? AND SeqResgate > ?", 0, tResgate.iSeqResgate, tResgate.dValorResgatado, tResgate.dRendimentos, RESGATE_ATIVO, objResgate.lCodigoAplicacao, objResgate.iSeqResgate)
    If lErro <> AD_SQL_SUCESSO Then Error 17613

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 17614
       
    Do While lErro <> AD_SQL_SEM_DADOS
        
        'Atualiza o saldo anterior da tabela de Resgates
        lErro = Comando_ExecutarPos(lComando1, "UPDATE Resgates SET SaldoAnterior = ?", lComando, objResgate.dSaldoAnterior)
        If lErro <> AD_SQL_SUCESSO Then Error 17615
                
        objResgate.dSaldoAnterior = objResgate.dSaldoAnterior + tResgate.dRendimentos - tResgate.dValorResgatado
                
        'Le o proximo resgate
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 17616
    
    Loop
      
    Resgate_Exclui3 = SUCESSO

    Exit Function

Erro_Resgate_Exclui3:

    Resgate_Exclui3 = Err

    Select Case Err
    
        Case 17613, 17614, 17616
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RESGATES1", Err, objResgate.lCodigoAplicacao, objResgate.iSeqResgate)

        Case 17615
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_RESGATES", Err, objResgate.lCodigoAplicacao, objResgate.iSeqResgate)
                
        Case 40723
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_APLICACOES", Err, objResgate.lCodigoAplicacao)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148193)

    End Select
    
    Exit Function
    
End Function

Private Function Aplicacoes_Atualiza(ByVal lComando As Long, ByVal lComando1 As Long, ByVal objResgate As ClassResgate) As Long
'Atualiza a tabela de aplicacoes referente ao resgate excluido

Dim lErro As Long
Dim tAplicacao As typeAplicacao
Dim objAplicacao As New ClassAplicacao
Dim dPercentual As Double

On Error GoTo Erro_Aplicacoes_Atualiza

    'Pesquisa a aplicacao pelo codigo
    lErro = Comando_ExecutarPos(lComando, "SELECT Codigo, Status, DataAplicacao, ValorAplicado, TipoAplicacao, NumMovto, SaldoAplicado, DataResgatePrevista, ValorResgatePrevisto, TaxaPrevista, ProxSeqResgate FROM Aplicacoes WHERE Codigo =?", 0, tAplicacao.lCodigo, tAplicacao.iStatus, tAplicacao.dtDataAplicacao, tAplicacao.dValorAplicado, tAplicacao.iTipoAplicacao, tAplicacao.lNumMovto, tAplicacao.dSaldoAplicado, tAplicacao.dtDataResgatePrevista, tAplicacao.dValorResgatePrevisto, tAplicacao.dTaxaPrevista, tAplicacao.iProxSeqResgate, objResgate.lCodigoAplicacao)
    If lErro <> AD_SQL_SUCESSO Then Error 17609

    'Verifica se aplicacao esta cadastrada
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 17610

    'Loca a aplicacao
    lErro = Comando_LockExclusive(lComando)
    If lErro <> AD_SQL_SUCESSO Then Error 17611

    'passa para o saldo aplicado o valor do proximo saldo anterior
    objAplicacao.dSaldoAplicado = objResgate.dSaldoAnterior
    
    dPercentual = tAplicacao.dTaxaPrevista / 100

    'Atualiza o valor do resgate previsto
    objAplicacao.dValorResgatePrevisto = (1 + dPercentual) * objAplicacao.dSaldoAplicado
    
    'Atualiza a tabela de Aplicacaoes
    lErro = Comando_ExecutarPos(lComando1, "UPDATE Aplicacoes SET SaldoAplicado = ?, ValorResgatePrevisto = ?", lComando, _
        objAplicacao.dSaldoAplicado, objAplicacao.dValorResgatePrevisto)
    If lErro <> AD_SQL_SUCESSO Then Error 17612

    Aplicacoes_Atualiza = SUCESSO

    Exit Function

Erro_Aplicacoes_Atualiza:

    Aplicacoes_Atualiza = Err

    Select Case Err

        Case 17609, 17610
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_APLICACOES2", Err, objResgate.lCodigoAplicacao)

        Case 17611
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_APLICACOES", Err, objResgate.lCodigoAplicacao)

        Case 17612
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_APLICACOES", Err, objResgate.lCodigoAplicacao)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148194)

    End Select
    
    Exit Function
    
End Function

Function Resgate_Exclui2(alComando() As Long, ByVal objResgate As ClassResgate) As Long
'Exclui o movimento do resgate passado como parametro

Dim lErro As Long
Dim tMovContaCorrente As typeMovContaCorrente
Dim objMovContaCorrente As New ClassMovContaCorrente
Dim vbMsgRes As VbMsgBoxResult
Dim lSeq As Long, dtData As Date
Dim lNumMovto As Long
Dim objMovContaCorrenteAplic As New ClassMovContaCorrente
Dim objAplicacao As New ClassAplicacao

On Error GoTo Erro_Resgate_Exclui2

    'Pesquisa o movimento correspondente a aplicacao
    lErro = Comando_ExecutarPos(alComando(8), "SELECT CodConta, Sequencial, Tipo, Excluido, TipoMeioPagto, Numero, DataMovimento, Conciliado, Valor FROM MovimentosContaCorrente WHERE NumMovto = ?", 0, tMovContaCorrente.iCodConta, tMovContaCorrente.lSequencial, tMovContaCorrente.iTipo, tMovContaCorrente.iExcluido, tMovContaCorrente.iTipoMeioPagto, tMovContaCorrente.lNumero, tMovContaCorrente.dtDataMovimento, tMovContaCorrente.iConciliado, tMovContaCorrente.dValor, objResgate.lNumMovto)
    If lErro <> AD_SQL_SUCESSO Then gError 17619

    lErro = Comando_BuscarPrimeiro(alComando(8))
    If lErro <> AD_SQL_SUCESSO Then gError 17620

    lErro = Comando_LockExclusive(alComando(8))
    If lErro <> AD_SQL_SUCESSO Then gError 17621

    'Verifica se o movimento é um resgate
    If tMovContaCorrente.iTipo <> MOVCCI_RESGATE Then gError 55944
    
    'Verifica se esta conciliado
    If tMovContaCorrente.iConciliado <> NAO_CONCILIADO Then
    
            gError 189412

'            vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_APLICACAO_MOV_CONCILIADO", objResgate.lCodigoAplicacao)
'
'            If vbMsgRes = vbNo Then gError 17622
'
'            'Pega o numero do proximo movCci
'            lErro = CF("MovCCI_Automatico", lNumMovto)
'            If lErro <> SUCESSO Then gError 17623
'
'            objResgate.lNumMovto = lNumMovto
'
'            'Retorna o proximo sequencial disponivel para a conta em questao
'            lErro = CF("CtaCorrente_Sequencial_Automatico", tMovContaCorrente.iCodConta, lSeq)
'            If lErro <> SUCESSO Then gError 17624
'
'            tMovContaCorrente.lSequencial = lSeq
'
'            'Insere um registro de saque na tabela de Movimentos
'            lErro = Comando_Executar(alComando(9), "INSERT INTO MovimentosContaCorrente (NumMovto, CodConta, Sequencial, Tipo, Excluido, TipoMeioPagto, Valor) VALUES (?,?,?,?,?,?,?)", objResgate.lNumMovto, tMovContaCorrente.iCodConta, tMovContaCorrente.lSequencial, MOVCCI_SAQUE, EXCLUIDO, _
'                    tMovContaCorrente.iTipoMeioPagto, objResgate.dValorResgatado)
'            If lErro <> AD_SQL_SUCESSO Then gError 17630
'
'            dtData = tMovContaCorrente.dtDataMovimento
'            objMovContaCorrente.iCodConta = tMovContaCorrente.iCodConta
'            objMovContaCorrente.dValor = tMovContaCorrente.dValor
'
'            'Le a Conta de Aplicação
'            objAplicacao.lCodigo = objResgate.lCodigoAplicacao
'            objAplicacao.iFilialEmpresa = giFilialEmpresa
'
'            lErro = CF("Aplicacao_Le", objAplicacao)
'            If lErro <> SUCESSO And lErro <> 17241 Then gError 69183
'
'            If lErro = 17241 Then gError 69184
'
'            objMovContaCorrenteAplic.lNumMovto = objAplicacao.lNumMovto
'
'            'Lê a conta da Aplicacao
'            lErro = CF("MovContaCorrente_Le", objMovContaCorrenteAplic)
'            If lErro <> SUCESSO And lErro <> 11893 Then gError 69185
'
'            If lErro = 11893 Then gError 69186
'
'            'Atualiza ou insere os dados em CCIMovDia
'            lErro = CF("CCIMovDia_Grava", objMovContaCorrente.iCodConta, dtData, -objMovContaCorrente.dValor, MOVCCI_RESGATE_EXCLUSAO, objResgate.dValorResgatado - objResgate.dRendimentos, objMovContaCorrenteAplic.iCodConta)
'            If lErro <> SUCESSO Then gError 17625
'
'            'Atualiza ou insere os dados em CCIMov
'            lErro = CF("CCIMov_Grava", objMovContaCorrente.iCodConta, Year(dtData), Month(dtData), -objMovContaCorrente.dValor, MOVCCI_RESGATE_EXCLUSAO, objResgate.dValorResgatado - objResgate.dRendimentos, objMovContaCorrenteAplic.iCodConta)
'            If lErro <> SUCESSO Then gError 17626
'
'            'Exclui o resgate, altera Status para excluido
'            lErro = Comando_ExecutarPos(alComando(10), "UPDATE Resgates SET Status = ?", alComando(0), RESGATE_EXCLUIDO)
'            If lErro <> AD_SQL_SUCESSO Then gError 17627

    Else
            'Exclui o movimento, altera Status para excluído
            lErro = Comando_ExecutarPos(alComando(9), "UPDATE MovimentosContaCorrente SET Excluido = ?", alComando(8), EXCLUIDO)
            If lErro <> AD_SQL_SUCESSO Then gError 17628

            'Exclui o resgate
            lErro = Comando_ExecutarPos(alComando(1), "UPDATE Resgates SET Status = ?", alComando(0), RESGATE_EXCLUIDO)
            If lErro <> AD_SQL_SUCESSO Then gError 17629
            
            dtData = tMovContaCorrente.dtDataMovimento
            objMovContaCorrente.iCodConta = tMovContaCorrente.iCodConta
            objMovContaCorrente.dValor = tMovContaCorrente.dValor

            'Le a Conta de Aplicação
            objAplicacao.lCodigo = objResgate.lCodigoAplicacao
            objAplicacao.iFilialEmpresa = giFilialEmpresa
            
            lErro = CF("Aplicacao_Le", objAplicacao)
            If lErro <> SUCESSO And lErro <> 17241 Then gError 69187
    
            If lErro = 17241 Then gError 69188
            
            objMovContaCorrenteAplic.lNumMovto = objAplicacao.lNumMovto
    
            'Lê a conta da Aplicacao
            lErro = CF("MovContaCorrente_Le", objMovContaCorrenteAplic)
            If lErro <> SUCESSO And lErro <> 11893 Then gError 69189
    
            If lErro = 11893 Then gError 69190
            
            'Exclui os dados em CCIMovDia
            lErro = CF("CCIMovDia_Exclui", objMovContaCorrente.iCodConta, dtData, objMovContaCorrente.dValor, MOVCCI_RESGATE_EXCLUSAO, objResgate.dValorResgatado - objResgate.dRendimentos, objMovContaCorrenteAplic.iCodConta)
            If lErro <> SUCESSO Then gError 17631

            'Exclui os dados em CCIMov
            lErro = CF("CCIMov_Exclui", objMovContaCorrente.iCodConta, Year(dtData), Month(dtData), objMovContaCorrente.dValor, MOVCCI_RESGATE_EXCLUSAO, objResgate.dValorResgatado - objResgate.dRendimentos, objMovContaCorrenteAplic.iCodConta)
            If lErro <> SUCESSO Then gError 17632

    End If

    Resgate_Exclui2 = SUCESSO

    Exit Function

Erro_Resgate_Exclui2:

    Resgate_Exclui2 = gErr

    Select Case gErr

        Case 17619, 17620
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCONTACORRENTE3", gErr, objResgate.lNumMovto)

        Case 17621
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_MOVIMENTOSCONTACORRENTE2", gErr, objResgate.lNumMovto)

        Case 17622, 17623, 17624, 17625, 17626, 17631, 17632, 69183, 69185, 69187, 69189

        Case 17627, 17629
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_RESGATES", gErr, objResgate.lCodigoAplicacao, objResgate.iSeqResgate)

        Case 17628
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_MOVIMENTOSCONTACORRENTE2", gErr, objResgate.lNumMovto)

        Case 17630
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MOVIMENTOSCONTACORRENTE2", gErr, objResgate.lNumMovto)

        Case 55944
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPO_NAO_RESGATE", gErr, objResgate.lNumMovto)
        
        Case 69184, 69188
            Call Rotina_Erro(vbOKOnly, "ERRO_APLICACAO_INEXISTENTE", gErr, objAplicacao.lCodigo)
        
        Case 69186, 69190
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTO_NAO_CADASTRADO", gErr)
            
        Case 189412
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVCONTACORRENTE_CONCILIADO", gErr, tMovContaCorrente.iCodConta, tMovContaCorrente.lSequencial)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148195)

    End Select

    Exit Function

End Function

Function OutroPagamento_Grava(ByVal objTituloPagar As ClassTituloPagar, ByVal objContabil As ClassContabil) As Long
'Grava o Título a Pagar no BD (nível + alto)

Dim lErro As Long
Dim lTransacao As Long
Dim iFilialEmpresa As Integer

On Error GoTo Erro_OutroPagamento_Grava
    
    'Abre a transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 18895
    
    'Grava no BD
    lErro = OutroPagamento_Grava_BD(objTituloPagar, objTituloPagar.colParcelaPagar)
    If lErro <> SUCESSO Then Error 18908
    
    'Grava os dados contábeis (contabilidade)
    lErro = objContabil.Contabil_Gravar_Registro(objTituloPagar.lNumIntDoc, objTituloPagar.lFornecedor, objTituloPagar.iFilial, DATA_NULA, , 0)
    If lErro <> SUCESSO Then Error 20527
    
    'Encerra transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 18909
    
    OutroPagamento_Grava = SUCESSO
    
    Exit Function
    
Erro_OutroPagamento_Grava:

    OutroPagamento_Grava = Err
    
    Select Case Err
    
        Case 18895
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
            
        Case 18908, 20527
        
        Case 18909
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148196)

    End Select
    
    Call Transacao_Rollback
    
    Exit Function

End Function

Private Function OutroPagamento_Grava_BD(ByVal objTituloPagar As ClassTituloPagar, ByVal colParcelaPagar As colParcelaPagar) As Long
'Grava Titulo a Pagar no BD (nível + baixo)
'CHAMADA EM TRANSAÇÃO por OutroPagamento_Grava

Dim lErro As Long
Dim lComando As Long, lComando1 As Long
Dim lComando2 As Long, lComando3 As Long
Dim tTituloPagar As typeTituloPagar
Dim iIndice As Integer
Dim colParcelaPagarBD As New colParcelaPagar
Dim objParcelaPagar As ClassParcelaPagar
Dim objParcelaPagar1 As ClassParcelaPagar
Dim objFilialFornecedor As New ClassFilialFornecedor
Dim vbMsgRes As VbMsgBoxResult
Dim iCamposAlterados As Integer

On Error GoTo Erro_OutroPagamento_Grava_BD
    
    'Abre os comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 18910

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 18911
    
    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 19435
    
    lComando3 = Comando_Abrir()
    If lComando3 = 0 Then Error 59071
    
    tTituloPagar.sObservacao = String(STRING_TITULO_OBSERVACAO, 0)
    tTituloPagar.sNatureza = String(STRING_NATMOVCTA_CODIGO, 0)
    
    'Verifica se o Título já existe em TitulosPag
    lErro = Comando_ExecutarPos(lComando, "SELECT FilialEmpresa, NumIntDoc, ValorTotal, ValorINSS, ValorIRRF, FilialPedCompra, NumPedCompra, PISRetido, ISSRetido, COFINSRetido, CSLLRetido, TaxaMoeda,Observacao,Status, Natureza FROM TitulosPag WHERE Fornecedor = ? AND Filial = ? AND NumTitulo = ? AND DataEmissao = ? AND SiglaDocumento = ? AND Status <> ? ", 0, tTituloPagar.iFilialEmpresa, tTituloPagar.lNumIntDoc, tTituloPagar.dValorTotal, tTituloPagar.dValorINSS, tTituloPagar.dValorIRRF, tTituloPagar.iFilialPedCompra, tTituloPagar.lNumPedCompra, tTituloPagar.dPISRetido, tTituloPagar.dISSRetido, tTituloPagar.dCOFINSRetido, tTituloPagar.dCSLLRetido, tTituloPagar.dTaxaMoeda, tTituloPagar.sObservacao, tTituloPagar.iStatus, tTituloPagar.sNatureza, objTituloPagar.lFornecedor, objTituloPagar.iFilial, objTituloPagar.lNumTitulo, objTituloPagar.dtDataEmissao, objTituloPagar.sSiglaDocumento, STATUS_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then Error 18912
    
    'Tenta ler
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 18913
    
    'Se existir
    If lErro = AD_SQL_SUCESSO Then

        'Faz lock no TítuloPagar
        lErro = Comando_LockExclusive(lComando)
        If lErro <> AD_SQL_SUCESSO Then Error 25034
        
        'Se não pertence a essa FilialEmpresa, Erro
        If tTituloPagar.iFilialEmpresa <> objTituloPagar.iFilialEmpresa Then Error 18914
        
        'verifica a alteracao dos campo que relacionam com Compras , se houve  - - - > altera no BD
        If tTituloPagar.iFilialPedCompra <> objTituloPagar.iFilialPedCompra Or tTituloPagar.lNumPedCompra <> objTituloPagar.lNumPedCompra Or tTituloPagar.sObservacao <> objTituloPagar.sObservacao Or tTituloPagar.sNatureza <> objTituloPagar.sNatureza Then
            
            lErro = Comando_ExecutarPos(lComando2, "UPDATE TitulosPag SET FilialPedCompra = ?, NumPedCompra =?, Observacao = ?, Natureza = ? ", lComando, objTituloPagar.iFilialPedCompra, objTituloPagar.lNumPedCompra, objTituloPagar.sObservacao, objTituloPagar.sNatureza)
            If lErro <> AD_SQL_SUCESSO Then Error 19434
        
        End If
        
        'Coloca o NumIntTitulo lido na coleção de parcelas
        For iIndice = 1 To colParcelaPagar.Count
            colParcelaPagar(iIndice).lNumIntTitulo = tTituloPagar.lNumIntDoc
        Next
        
        'Coloca o NumIntDoc lido no objTituloPagar
        objTituloPagar.lNumIntDoc = tTituloPagar.lNumIntDoc
        
        'Lê no BD as Parcelas referentes ao Título
        lErro = CF("ParcelasPagar_Le", objTituloPagar, colParcelaPagarBD)
        If lErro <> SUCESSO Then Error 18915

        'Verifica se o número de Parcelas da tela é igual ao do BD
         If colParcelaPagarBD.Count <> colParcelaPagar.Count Then Error 18916
                  
        'Flag para alterações
        iCamposAlterados = 0
        
        'Verifica se os campos da Tela não alteráveis foram alterados
        If tTituloPagar.dValorINSS <> objTituloPagar.dValorINSS Or tTituloPagar.dValorIRRF <> objTituloPagar.dValorIRRF _
             Or tTituloPagar.dPISRetido <> objTituloPagar.dPISRetido Or tTituloPagar.dISSRetido <> objTituloPagar.dISSRetido Or tTituloPagar.dCOFINSRetido <> objTituloPagar.dCOFINSRetido Or tTituloPagar.dCSLLRetido <> objTituloPagar.dCSLLRetido _
            Then iCamposAlterados = 1
        
        'Verifica se campos do Grid Parcelas não alteráveis foram alterados
        If iCamposAlterados = 0 Then
            
            For iIndice = 1 To colParcelaPagar.Count
                If colParcelaPagar(iIndice).dValor <> colParcelaPagarBD(iIndice).dValor Or colParcelaPagar(iIndice).iTipoCobranca <> colParcelaPagarBD(iIndice).iTipoCobranca Then iCamposAlterados = 1
            Next
            
        End If
        
        'Se houve alteração de campos não alteráveis
        If iCamposAlterados = 1 Then
            
            'Pergunta se deseja prosseguir na alteração para os alteráveis
            vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_DATAVENCIMENTO_SUSPENSO_ALTERAVEIS")
            If vbMsgRes = vbNo Then Error 18917
                        
        End If
                    
        'Altera os campos alteráveis
        lErro = CF("ParcelasPagar_Altera_CamposAlteraveis", colParcelaPagar)
        If lErro <> SUCESSO Then Error 18918

    Else
        'O Título passado não existe na tabela TitulosPag
        
        'Testa se há Titulo com mesmo número no Sistema
        lErro = CF("TituloPagar_Testa_Repeticao", objTituloPagar)
        If lErro <> SUCESSO Then Error 18929
            
        objFilialFornecedor.iCodFilial = objTituloPagar.iFilial
        objFilialFornecedor.lCodFornecedor = objTituloPagar.lFornecedor
        
        lErro = CF("FilialFornecedor_Lock1", objFilialFornecedor)
        If lErro <> SUCESSO And lErro <> 18900 Then Error 18896
        
        'Não encontrou a Filial do Fornecedor --> erro
        If lErro = 18900 Then Error 18897
    
        'locka Condicao de Pagamento
        If objTituloPagar.iCondicaoPagto <> 0 Then
            
            lErro = CF("CondicaoPagto_Lock", lComando3, objTituloPagar.iCondicaoPagto)
            If lErro <> SUCESSO Then Error 59070
        
        End If
        
        'Gera número interno automático
        lErro = CF("TituloPagar_Automatico", tTituloPagar.lNumIntDoc)
        If lErro <> SUCESSO Then Error 18930
 
        objTituloPagar.lNumIntDoc = tTituloPagar.lNumIntDoc
        objTituloPagar.dtDataRegistro = gdtDataHoje
 
        'Cálculo do Saldo
        objTituloPagar.dSaldo = objTituloPagar.dValorTotal - (objTituloPagar.dValorIRRF + objTituloPagar.dPISRetido + objTituloPagar.dISSRetido + objTituloPagar.dCOFINSRetido + objTituloPagar.dCSLLRetido) - IIf(objTituloPagar.iINSSRetido = 1, objTituloPagar.dValorINSS, 0)
 
        'Insere o Título na tabela TitulosPag
        lErro = Comando_Executar(lComando1, "INSERT INTO TitulosPag (NumIntDoc,FilialEmpresa,Fornecedor,Filial,SiglaDocumento,NumTitulo,DataEmissao,Status,Saldo,NumParcelas,ValorTotal,ValorSeguro,ValorFrete,OutrasDespesas,ValorProdutos,ValorICMS,ValorICMSSubst,CreditoICMS,ValorIPI,CreditoIPI,ValorIRRF,ValorINSS,INSSRetido,DataRegistro, Observacao,FilialPedCompra,NumPedCompra, CondicaoPagto, PISRetido, ISSRetido, COFINSRetido, CSLLRetido, TaxaMoeda, Observacao, Natureza) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", tTituloPagar.lNumIntDoc, objTituloPagar.iFilialEmpresa, objTituloPagar.lFornecedor, objTituloPagar.iFilial, objTituloPagar.sSiglaDocumento, objTituloPagar.lNumTitulo, objTituloPagar.dtDataEmissao, STATUS_LANCADO, objTituloPagar.dSaldo, objTituloPagar.iNumParcelas, _
            objTituloPagar.dValorTotal, objTituloPagar.dValorSeguro, objTituloPagar.dValorFrete, objTituloPagar.dOutrasDespesas, objTituloPagar.dValorProdutos, objTituloPagar.dValorICMS, objTituloPagar.dValorICMSSubst, objTituloPagar.iCreditoICMS, objTituloPagar.dValorIPI, objTituloPagar.iCreditoIPI, objTituloPagar.dValorIRRF, objTituloPagar.dValorINSS, objTituloPagar.iINSSRetido, objTituloPagar.dtDataRegistro, objTituloPagar.sObservacao, objTituloPagar.iFilialPedCompra, objTituloPagar.lNumPedCompra, objTituloPagar.iCondicaoPagto, objTituloPagar.dPISRetido, objTituloPagar.dISSRetido, objTituloPagar.dCOFINSRetido, objTituloPagar.dCSLLRetido, objTituloPagar.dTaxaMoeda, objTituloPagar.sObservacao, objTituloPagar.sNatureza)
        If lErro <> AD_SQL_SUCESSO Then Error 18931

        'Armazena em colParcelaPagar o lNumIntTitulo para cada parcela
        For iIndice = 1 To colParcelaPagar.Count
            
            colParcelaPagar(iIndice).lNumIntTitulo = tTituloPagar.lNumIntDoc
        
            If gobjCRFAT.iCriarPagSuspenso <> 0 Then
            
                colParcelaPagar(iIndice).iStatus = STATUS_SUSPENSO
                colParcelaPagar(iIndice).sCodUsuarioLib = ""
                colParcelaPagar(iIndice).dtDataLib = DATA_NULA
            
            End If
        
        Next
        
        'Grava ParcelasPagar no BD
        lErro = CF("ParcelasPagar_Grava", colParcelaPagar)
        If lErro <> SUCESSO Then Error 18932
    
    End If
    
    'Fecha os comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)
    
    OutroPagamento_Grava_BD = SUCESSO
    
    Exit Function

Erro_OutroPagamento_Grava_BD:

    OutroPagamento_Grava_BD = Err
    
    Select Case Err
    
        Case 18897
            Call Rotina_Erro(vbOKOnly, "ERRO_FILIALFORNECEDOR_NAO_CADASTRADA", Err, objTituloPagar.lFornecedor, objTituloPagar.iFilial)
    
        Case 18910, 18911, 19435, 59071
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
            
        Case 18912, 18913
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_OUTROSPAG1", Err, objTituloPagar.sSiglaDocumento, objTituloPagar.lNumTitulo)
            
        Case 18914
            Call Rotina_Erro(vbOKOnly, "ERRO_OUTROPAG_FILIALEMPRESA_DIFERENTE", Err, objTituloPagar.sSiglaDocumento, objTituloPagar.lNumTitulo)
        
        Case 18915, 18917, 18918, 18929, 18930, 18932, 18896, 59070
        
        Case 18916
            Call Rotina_Erro(vbOKOnly, "ERRO_NUMERO_PARCELAS_TITULO_ALTERADO", Err, objTituloPagar.sSiglaDocumento, objTituloPagar.lNumTitulo, colParcelaPagar.Count, colParcelaPagarBD.Count)
            
        Case 18931
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_TITULO_PAGAR", Err, objTituloPagar.lNumTitulo, objTituloPagar.sSiglaDocumento)
                    
        Case 19434
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_TITULOSPAG", Err, tTituloPagar.lNumIntDoc)
        
        Case 25034
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_TITULOSPAG", Err, objTituloPagar.lNumIntDoc)
                
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148197)

    End Select
    
    'Fecha os comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)
    
    Exit Function
    
End Function

Function TituloPagar_Exclui(ByVal objTituloPagar As ClassTituloPagar, ByVal objContabil As ClassContabil) As Long
'Executa a exclusão do Título a Pagar Passado por parâmetro

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_TituloPagar_Exclui
    
    'Abre transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 18945
    
    lErro = CF("TituloPagar_Exclui_EmTransacao", objTituloPagar, objContabil)
    If lErro <> SUCESSO Then Error 62187

    'Finaliza transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 18954
    
    TituloPagar_Exclui = SUCESSO
    
    Exit Function
    
Erro_TituloPagar_Exclui:

    TituloPagar_Exclui = Err
    
    Select Case Err
    
        Case 18945
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
       
        Case 18954
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
        
        Case 62187
            
        Case Else
             Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148198)

    End Select
    
    Call Transacao_Rollback
    
    Exit Function
    
End Function

Function TituloPagar_Exclui_EmTransacao(ByVal objTituloPagar As ClassTituloPagar, ByVal objContabil As ClassContabil) As Long
'Executa a exclusão do Título a Pagar Passado por parâmetro

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim lNumIntDoc As Long, lNumIntNF As Long
Dim iClasse As Integer
Dim objNFiscal As New ClassNFiscal

On Error GoTo Erro_TituloPagar_Exclui_EmTransacao
    
    'Abre comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 18946

    lComando1 = Comando_Abrir()
    If lComando = 0 Then gError 18947
    
    If objTituloPagar.iFilialEmpresa = 0 Then objTituloPagar.iFilialEmpresa = giFilialEmpresa

    If objTituloPagar.iExclusao = 1 Then

        'Seleciona o Título na Tabela de Titulos a Pagar
        lErro = Comando_ExecutarPos(lComando, "SELECT NumIntDoc FROM TitulosPag WHERE NumIntDoc = ? AND FilialEmpresa = ? AND SiglaDocumento = ? ", 0, lNumIntDoc, objTituloPagar.lNumIntDoc, objTituloPagar.iFilialEmpresa, objTituloPagar.sSiglaDocumento)
        If lErro <> AD_SQL_SUCESSO Then gError 18948

    Else
    
        'Seleciona o Título na Tabela de Titulos a Pagar
        lErro = Comando_ExecutarPos(lComando, "SELECT NumIntDoc FROM TitulosPag WHERE NumIntDoc = ? AND FilialEmpresa = ? AND Status <> ? AND SiglaDocumento = ? ", 0, lNumIntDoc, objTituloPagar.lNumIntDoc, objTituloPagar.iFilialEmpresa, STATUS_EXCLUIDO, objTituloPagar.sSiglaDocumento)
        If lErro <> AD_SQL_SUCESSO Then gError 18948

    End If

    'Tenta ler
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 18949
        
    If lErro = AD_SQL_SEM_DADOS Then gError 18950

    'Faz um "lock" no Título
    lErro = Comando_LockExclusive(lComando)
    If lErro <> AD_SQL_SUCESSO Then gError 18951
    
    'Verifica se existe alguma NFiscal correspondente ao Título
    lErro = CF("DocumentoCPR_OrigemNFiscal", objTituloPagar.sSiglaDocumento, lNumIntDoc, lNumIntNF)
    If lErro <> SUCESSO And lErro <> 41542 Then gError 43019
    
    'Achou NFiscal correspondente ao Título --> erro
    If lErro = SUCESSO Then
        
        objNFiscal.lNumIntDoc = lNumIntNF

        lErro = CF("NFiscal_Le", objNFiscal)
        If lErro <> SUCESSO And lErro <> 31442 Then gError 59452
        If lErro <> SUCESSO Then gError 59453
        
        If objTituloPagar.iExclusao = 0 And objNFiscal.iStatus <> STATUS_CANCELADO Then gError 43020
    
    End If
    
    'Exclui as parcelas referentes ao Título passado
    lErro = CF("ParcelasPagar_Exclui", objTituloPagar)
    If lErro <> SUCESSO Then gError 18952

    If objTituloPagar.iExclusao = 1 Then

        'Faz a exclusão lógica do Título
        lErro = Comando_ExecutarPos(lComando1, "DELETE FROM TitulosPag", lComando)
        If lErro <> AD_SQL_SUCESSO Then gError 83952
        
    Else

        'Faz a exclusão lógica do Título
        lErro = Comando_ExecutarPos(lComando1, "UPDATE TitulosPag SET Status = ? ", lComando, STATUS_EXCLUIDO)
        If lErro <> AD_SQL_SUCESSO Then gError 18953
        
    End If

    '############################################
    'Inserido por Wagner 22/03/2006
    lErro = CF("ProjetoInfo_Exclui", PRJ_CR_TIPO_TITPAG, objTituloPagar.lNumIntDoc)
    If lErro <> SUCESSO Then gError 181764
    '############################################
    
    lErro = CF("Trata_Exclusao_Do_Destino", objTituloPagar)
    If lErro <> SUCESSO Then gError 192054
    
    If Not (objContabil Is Nothing) Then
        If objTituloPagar.iExclusao = 1 Then
    
            'Exclui os lançamentos contábeis (se houverem) associados ao título em questao
            lErro = objContabil.Contabil_Exclui(objTituloPagar.lNumIntDoc, CONTABIL_EXCLUI_EFETIVO, , , , objTituloPagar.iFilialEmpresa)
            If lErro <> SUCESSO Then gError 20528
        
        Else
        
            'Exclui os lançamentos contábeis (se houverem) associados ao título em questao
            lErro = objContabil.Contabil_Exclui(objTituloPagar.lNumIntDoc, , , , objTituloPagar.dtDataEstorno, objTituloPagar.iFilialEmpresa)
            If lErro <> SUCESSO Then gError 20528
        
        End If
    End If
    
    'Fecha comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    
    TituloPagar_Exclui_EmTransacao = SUCESSO
    
    Exit Function
    
Erro_TituloPagar_Exclui_EmTransacao:

    TituloPagar_Exclui_EmTransacao = gErr
    
    Select Case gErr
    
        Case 18946, 18947
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 18948, 18949
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TITULOSPAG", gErr, objTituloPagar.lNumIntDoc)
            
        Case 18950
            Call Rotina_Erro(vbOKOnly, "ERRO_TITULOPAGAR_NAO_CADASTRADO", gErr, objTituloPagar.lNumIntDoc)
        
        Case 18951
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_TITULOSPAG", gErr, objTituloPagar.lNumIntDoc)
        
        Case 18952, 20528, 43019, 59452, 59453, 181764, 192054
            
        Case 18953
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_TITULOSPAG", gErr, objTituloPagar.lNumIntDoc)
                   
        Case 43020
            Call Rotina_Erro(vbOKOnly, "ERRO_TITULO_REL_NFISCAL", gErr)
        
        Case 83952
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_TITULOSPAG", gErr, objTituloPagar.lNumIntDoc)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148199)

    End Select
    
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    
    Exit Function
    
End Function

Private Function FluxoSaldosIniciais_Grava_Exclusao1(alComando() As Long, ByVal colFluxoSldIni As Collection, ByVal colFluxoSldIniBD As Collection) As Long
'exclui os FluxoSaldosIniciais gerados pelo usuario que não são mais desejáveis

Dim lErro As Long
Dim objFluxoSldIniBD As ClassFluxoSldIni
Dim objFluxoSldIni As ClassFluxoSldIni
Dim iAchou As Integer
Dim dSaldoAjustado As Double
Dim lFluxoId1 As Long

On Error GoTo Erro_FluxoSaldosIniciais_Grava_Exclusao1

    'exclui os dados de usuario que não estiverem presentes em colFluxoSldIni
    For Each objFluxoSldIniBD In colFluxoSldIniBD

        If objFluxoSldIniBD.iUsuario = FLUXO_GERADO_PELO_USUARIO Then

            iAchou = 0

            For Each objFluxoSldIni In colFluxoSldIni

                If objFluxoSldIniBD.iCodConta = objFluxoSldIni.iCodConta Then
                    iAchou = 1
                    Exit For
                End If

            Next

            'se não achou o dado digitado pelo usuario, significa que tem que excluir
            If iAchou = 0 Then

                'Pesquisa o FluxoSldIni
                lErro = Comando_ExecutarPos(alComando(2), "SELECT SaldoAjustado FROM FluxoSaldosIniciais WHERE FluxoId = ? AND CodConta= ?", 0, dSaldoAjustado, objFluxoSldIniBD.lFluxoId, objFluxoSldIniBD.iCodConta)
                If lErro <> AD_SQL_SUCESSO Then Error 21143

                lErro = Comando_BuscarPrimeiro(alComando(2))
                If lErro <> AD_SQL_SUCESSO Then Error 21144

                'Exclui o FluxoSldIni
                lErro = Comando_ExecutarPos(alComando(3), "DELETE FROM FluxoSaldosIniciais", alComando(2))
                If lErro <> AD_SQL_SUCESSO Then Error 21145

            End If

        End If

    Next

    FluxoSaldosIniciais_Grava_Exclusao1 = SUCESSO

    Exit Function

Erro_FluxoSaldosIniciais_Grava_Exclusao1:

    FluxoSaldosIniciais_Grava_Exclusao1 = Err

    Select Case Err

        Case 21143, 21144
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FLUXOSALDOSINICIAIS", Err, objFluxoSldIniBD.lFluxoId)

        Case 21145
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_FLUXOSALDOSINICIAIS", Err, objFluxoSldIniBD.lFluxoId)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148200)

    End Select

End Function

Function FluxoSaldosIniciais_Grava1(ByVal colFluxoSldIni As Collection, ByVal lFluxoId As Long) As Long
'grava as alterações realizadas pelo usuário nos dado de FluxoSaldosIniciais. ColFluxoSldIni contem os dados da tela e lFluxoID é o fluxo em questão

Dim lErro As Long
Dim colFluxoSldIniBD As New Collection
Dim lTransacao As Long
Dim alComando(1 To 7) As Long
Dim lFluxoId1 As Long
Dim iIndice As Integer

On Error GoTo Erro_FluxoSaldosIniciais_Grava1

    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 21146

    For iIndice = LBound(alComando) To UBound(alComando)

        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 21147

    Next

    'le os saldos iniciais das contas já existentes
    lErro = CF("FluxoSaldosIniciais_Le", colFluxoSldIniBD, lFluxoId)
    If lErro <> SUCESSO And lErro <> 21141 Then Error 21149

    'exclui as contas incluídas pelo usuario que não são mais desejáveis
    lErro = FluxoSaldosIniciais_Grava_Exclusao1(alComando(), colFluxoSldIni, colFluxoSldIniBD)
    If lErro <> SUCESSO Then Error 21150

    'atualiza/insere as contas e seus saldos ajustados
    lErro = FluxoSaldosIniciais_Grava2(alComando(), lFluxoId, colFluxoSldIni, colFluxoSldIniBD)
    If lErro <> SUCESSO Then Error 21158

    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 21159

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    FluxoSaldosIniciais_Grava1 = SUCESSO

    Exit Function

Erro_FluxoSaldosIniciais_Grava1:

    FluxoSaldosIniciais_Grava1 = Err

    Select Case Err

        Case 21149, 21150, 21158

        Case 21146
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 21147
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 21148, 21149
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FLUXOSALDOSINICIAIS", Err, lFluxoId)

        Case 21159
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148201)

    End Select

    Call Transacao_Rollback
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function FluxoSaldosIniciais_Grava2(alComando() As Long, ByVal lFluxoId As Long, ByVal colFluxoSldIni As Collection, ByVal colFluxoSldIniBD As Collection) As Long
'atualiza/insere as contas e seus saldos ajustados

Dim lErro As Long
Dim objFluxoSldIniBD As ClassFluxoSldIni
Dim objFluxoSldIni As ClassFluxoSldIni
Dim iAchou As Integer
Dim lFluxoId1 As Long
Dim sNomeReduzido As String
Dim dSaldoAjustado As Double

On Error GoTo Erro_FluxoSaldosIniciais_Grava2

    For Each objFluxoSldIni In colFluxoSldIni
    
        iAchou = 0
    
        For Each objFluxoSldIniBD In colFluxoSldIniBD
        
            If objFluxoSldIni.iCodConta = objFluxoSldIniBD.iCodConta Then
                
                iAchou = 1
                
                If objFluxoSldIni.dSaldoAjustado <> objFluxoSldIniBD.dSaldoAjustado Then

                    'Pesquisa o FluxoSaldosIniciais em questão
                    lErro = Comando_ExecutarPos(alComando(4), "SELECT SaldoAjustado FROM FluxoSaldosIniciais WHERE FluxoId = ? AND CodConta = ?", 0, dSaldoAjustado, objFluxoSldIniBD.lFluxoId, objFluxoSldIni.iCodConta)
                    If lErro <> AD_SQL_SUCESSO Then Error 21151

                    lErro = Comando_BuscarPrimeiro(alComando(4))
                    If lErro <> AD_SQL_SUCESSO Then Error 21152

                    'Atualiza o FluxoSaldosIniciais em questão
                    lErro = Comando_ExecutarPos(alComando(5), "UPDATE FluxoSaldosIniciais SET SaldoAjustado=?", alComando(4), objFluxoSldIni.dSaldoAjustado)
                    If lErro <> AD_SQL_SUCESSO Then Error 21153

                End If

                Exit For
                
            End If
            
        Next
        
        'se não encontrou o que foi digitado pelo usuario no banco de dados ==> inclui o fluxo
        If iAchou = 0 And objFluxoSldIni.iUsuario = FLUXO_GERADO_PELO_USUARIO Then
                
            sNomeReduzido = String(STRING_CONTA_CORRENTE_NOME_REDUZIDO, 0)
        
            'Pega os dados da tabela Contas Correntes Internas para descobrir o nome reduzido
            lErro = Comando_Executar(alComando(6), "SELECT NomeReduzido FROM ContasCorrentesInternas WHERE Codigo = ?", sNomeReduzido, objFluxoSldIni.iCodConta)
            If lErro <> AD_SQL_SUCESSO Then Error 21154
        
            lErro = Comando_BuscarPrimeiro(alComando(6))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 21155
        
            If lErro = AD_SQL_SEM_DADOS Then Error 21157

            'insere a conta
            lErro = Comando_Executar(alComando(7), "INSERT INTO FluxoSaldosIniciais (FluxoId, CodConta, NomeReduzido, SaldoSistema, SaldoAjustado, SaldoReal, Usuario) VALUES (?,?,?,0,?,0,?)", lFluxoId, objFluxoSldIni.iCodConta, objFluxoSldIni.sNomeReduzido, objFluxoSldIni.dSaldoAjustado, FLUXO_GERADO_PELO_USUARIO)
            If lErro <> AD_SQL_SUCESSO Then Error 21156
        
        End If
        
    Next

    FluxoSaldosIniciais_Grava2 = SUCESSO
    
    Exit Function
    
Erro_FluxoSaldosIniciais_Grava2:

    FluxoSaldosIniciais_Grava2 = Err

    Select Case Err
    
        Case 21151, 21152
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FLUXOSALDOSINICIAIS", Err, objFluxoSldIniBD.lFluxoId)
                                                                    
        Case 21153
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_FLUXOSALDOSINICIAIS", Err, objFluxoSldIniBD.lFluxoId)
            
        Case 21154, 21155
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONTASCORRENTESINTERNAS_CODIGO", Err, objFluxoSldIni.iCodConta)
        
        Case 21156
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FLUXOSALDOSINICIAIS", Err)
      
        Case 21157
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTACORRENTE_INEXISTENTE", Err, objFluxoSldIni.iCodConta)
      
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148202)
        
    End Select
    
    Exit Function
    
End Function

Function FluxoSintetico_Grava(ByVal colFluxoSintetico As Collection, ByVal lFluxoId As Long) As Long
'grava as alterações realizadas pelo usuário nos dados TesValorAjustado e SaldoValorAjustado de fluxo sintetico . ColFluxoSint contem os dados da tela, lFluxoID é o fluxo em questão.

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim lTransacao As Long
Dim objFluxoSint As ClassFluxoSint

On Error GoTo Erro_FluxoSintetico_Grava

    lComando = 0
    lComando1 = 0
    lTransacao = 0
    
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 21104

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 21094

    lComando1 = Comando_Abrir()
    If lComando = 1 Then Error 21097

    For Each objFluxoSint In colFluxoSintetico

        'Pesquisa o fluxo sintetico em questão
        lErro = Comando_ExecutarPos(lComando, "SELECT TesValorAjustado, SaldoValorAjustado FROM FluxoSintetico WHERE FluxoId = ? AND Data = ? ", 0, objFluxoSint.dTesValorAjustado, objFluxoSint.dSaldoValorAjustado, lFluxoId, objFluxoSint.dtData)
        If lErro <> AD_SQL_SUCESSO Then Error 21095
    
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO Then Error 21096
    
        lErro = Comando_LockExclusive(lComando)
        If lErro <> AD_SQL_SUCESSO Then Error 21105
        
        'Atualiza o fluxo sintetico em questão
        lErro = Comando_ExecutarPos(lComando1, "UPDATE FluxoSintetico SET TesValorAjustado=?, SaldoValorAjustado=?", lComando, objFluxoSint.dTesValorAjustado, objFluxoSint.dSaldoValorAjustado)
        If lErro <> AD_SQL_SUCESSO Then Error 21093

    Next
    
    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 21106

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    FluxoSintetico_Grava = SUCESSO

    Exit Function

Erro_FluxoSintetico_Grava:

    FluxoSintetico_Grava = Err

    Select Case Err

        Case 21094, 21097
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 21095, 21096
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FLUXOSINTETICO", Err, lFluxoId)

       Case 21093
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_FLUXOSINTETICO", Err)

        Case 21104
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

       Case 21105
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_FLUXOSINTETICO", Err, lFluxoId)

        Case 21106
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148203)

    End Select

    Call Transacao_Rollback
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Function FluxoTipoAplic_Grava(ByVal colFluxoTipoAplic As Collection, ByVal lFluxoId As Long, ByVal dtData As Date) As Long
'grava as alterações realizadas pelo usuário nos dados de fluxo de caixa por tipo de aplicação.

Dim lErro As Long
Dim colFluxoTipoAplicBD As New Collection
Dim lTransacao As Long
Dim alComando(1 To 18) As Long
Dim dValorAjustado As Double
Dim iIndice As Integer
Dim dTotalRecAjustado As Double

On Error GoTo Erro_FluxoTipoAplic_Grava

    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 21205

    For iIndice = LBound(alComando) To UBound(alComando)

        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 21206

    Next
    
    'le os as aplicações por tipo de aplicação
    lErro = CF("FluxoTipoAplic_Le", colFluxoTipoAplicBD, lFluxoId, dtData)
    If lErro <> SUCESSO And lErro <> 21204 Then Error 21207

    If lErro = 21204 Then Call Rotina_Aviso(vbOK, "AVISO_NUM_FLUXOTIPOAPLIC_ULTRAPASSOU_LIMITE", Format(dtData, "dd/mm/yyyy"), MAX_FLUXO)

    'exclui as aplicações por tipo de aplicação geradas pelo usuario que não são mais desejáveis
    lErro = FluxoTipoAplic_Grava_Exclusao(alComando(), colFluxoTipoAplic, colFluxoTipoAplicBD)
    If lErro <> SUCESSO Then Error 21208
        
    'atualiza/insere os fluxo por tipo de aplcação
    lErro = CF("FluxoTipoAplic_Grava1", alComando(), lFluxoId, dtData, colFluxoTipoAplic, colFluxoTipoAplicBD, dTotalRecAjustado)
    If lErro <> SUCESSO Then Error 21209
           
    'atualiza o total ajustado do fluxo sintetico
    lErro = FluxoForn_Grava_Sintetico(alComando(), lFluxoId, dtData, dTotalRecAjustado, 0)
    If lErro <> SUCESSO Then Error 55919
           
    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 21210

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    FluxoTipoAplic_Grava = SUCESSO
    
    Exit Function
    
Erro_FluxoTipoAplic_Grava:

    FluxoTipoAplic_Grava = Err
    
    Select Case Err

        Case 21207, 21208, 21209, 55919

        Case 21205
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 21206
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 21210
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148204)

    End Select
    
    Call Transacao_Rollback
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Function FluxoTipoAplic_Grava1(alComando() As Long, ByVal lFluxoId As Long, ByVal dtData As Date, ByVal colFluxoTipoAplic As Collection, ByVal colFluxoTipoAplicBD As Collection, dTotalSintAjustado As Double) As Long
'grava as alterações/inserções realizadas pelo usuário nos dados de fluxo de caixa por tipo de aplicação. ColFluxoTipoAplic contem os dados da tela, lFluxoID é o fluxo em questão e dtData a data em questão.

Dim lErro As Long
Dim dValorAjustado As Double
Dim objFluxoTipoAplic As ClassFluxoTipoAplic

On Error GoTo Erro_FluxoTipoAplic_Grava1

    For Each objFluxoTipoAplic In colFluxoTipoAplic

        'Pesquisa o fluxo tipo aplicação em questão
        lErro = Comando_ExecutarPos(alComando(4), "SELECT TotalAjustado FROM FluxoTipoAplic WHERE FluxoId = ? AND Data = ? AND TipoAplicacao = ?", 0, dValorAjustado, lFluxoId, dtData, objFluxoTipoAplic.iTipoAplicacao)
        If lErro <> AD_SQL_SUCESSO Then Error 21214

        lErro = Comando_BuscarPrimeiro(alComando(4))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 21215

        If lErro = AD_SQL_SEM_DADOS Then

            lErro = Comando_Executar(alComando(5), "INSERT INTO FluxoTipoAplic (FluxoId, TipoAplicacao, Data, TotalSistema, TotalAjustado, TotalReal, Usuario) VALUES (?,?,?,0,?,0,?)", lFluxoId, objFluxoTipoAplic.iTipoAplicacao, dtData, objFluxoTipoAplic.dTotalAjustado, objFluxoTipoAplic.iUsuario)
            If lErro <> AD_SQL_SUCESSO Then Error 21213

            dTotalSintAjustado = dTotalSintAjustado + objFluxoTipoAplic.dTotalAjustado

        Else

            If dValorAjustado <> objFluxoTipoAplic.dTotalAjustado Then

                lErro = Comando_LockExclusive(alComando(4))
                If lErro <> AD_SQL_SUCESSO Then Error 21211

                'Atualiza o fluxo tipo aplicação em questão
                lErro = Comando_ExecutarPos(alComando(5), "UPDATE FluxoTipoAplic SET TotalAjustado=?", alComando(4), objFluxoTipoAplic.dTotalAjustado)
                If lErro <> AD_SQL_SUCESSO Then Error 21212

                dTotalSintAjustado = dTotalSintAjustado + (objFluxoTipoAplic.dTotalAjustado - dValorAjustado)

            End If

        End If
    Next

    FluxoTipoAplic_Grava1 = SUCESSO

    Exit Function

Erro_FluxoTipoAplic_Grava1:

    FluxoTipoAplic_Grava1 = Err

    Select Case Err

        Case 21214, 21215
             Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FLUXOTIPOAPLIC", Err, lFluxoId)
        
        Case 21210
             Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FLUXOTIPOAPLIC", Err)
        
        Case 21212
             Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_FLUXOTIPOAPLIC", Err)
        
        Case 21211
             Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_FLUXOTIPOAPLIC", Err, lFluxoId, objFluxoTipoAplic.iTipoAplicacao)
        
        Case 21213
             Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_TIPOAPLICACAO", Err)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148205)

    End Select

    Exit Function

End Function

Private Function FluxoTipoAplic_Grava_Exclusao(alComando() As Long, ByVal colFluxoTipoAplic As Collection, ByVal colFluxoTipoAplicBD As Collection) As Long
'exclui os fluxos por tipo de aplicação gerados pelo usuario que não são mais desejáveis

Dim lErro As Long
Dim objFluxoTipoAplicBD As ClassFluxoTipoAplic
Dim objFluxoTipoAplic As ClassFluxoTipoAplic
Dim iAchou As Integer
Dim dTotalAjustado As Double
Dim lFluxoId1 As Long

On Error GoTo Erro_FluxoTipoAplic_Grava_Exclusao

    'exclui os dados de usuario que não estiverem presentes em colFluxoTipoAplic
    For Each objFluxoTipoAplicBD In colFluxoTipoAplicBD
    
        If objFluxoTipoAplicBD.iUsuario = FLUXO_GERADO_PELO_USUARIO Then
    
            iAchou = 0
    
            For Each objFluxoTipoAplic In colFluxoTipoAplic
            
                If objFluxoTipoAplicBD.iTipoAplicacao = objFluxoTipoAplic.iTipoAplicacao Then
                    iAchou = 1
                    Exit For
                End If
            
            Next
        
            'se não achou o dado digitado pelo usuario, significa que tem que excluir
            If iAchou = 0 Then

                'Pesquisa o fluxotipoaplic em questão
                lErro = Comando_ExecutarPos(alComando(1), "SELECT TotalAjustado FROM FluxoTipoAplic WHERE FluxoId = ? AND TipoAplicacao = ? AND Data = ?", 0, dTotalAjustado, objFluxoTipoAplicBD.lFluxoId, objFluxoTipoAplicBD.iTipoAplicacao, objFluxoTipoAplicBD.dtData)
                If lErro <> AD_SQL_SUCESSO Then Error 21216

                lErro = Comando_BuscarPrimeiro(alComando(1))
                If lErro <> AD_SQL_SUCESSO Then Error 21217

                'Exclui o flxotipoaplic
                lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM FluxoTipoAplic", alComando(1))
                If lErro <> AD_SQL_SUCESSO Then Error 21218

            End If
            
        End If
        
    Next

    FluxoTipoAplic_Grava_Exclusao = SUCESSO
    
    Exit Function
    
Erro_FluxoTipoAplic_Grava_Exclusao:

    FluxoTipoAplic_Grava_Exclusao = Err
    
    Select Case Err
    
        Case 21216, 21217
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FLUXOTIPOAPLIC", Err, objFluxoTipoAplicBD.lFluxoId)

        Case 21218
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_FLUXOTIPOAPLIC", Err, objFluxoTipoAplicBD.lFluxoId)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148206)
    
    End Select

End Function

Function CPConfig_Grava_Configs(ByVal colConfigs As ColCPConfig) As Long
'Grava na tabela CPConfig uma coleção de registros de configuração

Dim lErro As Long, iIndice As Integer
Dim lTransacao As Long

On Error GoTo Erro_CPConfig_Grava_Configs

    'Abrir transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 33681

    lErro = CF("CPConfig_Grava_Configs_Trans", colConfigs)
    If lErro <> SUCESSO Then Error 33682

    'Fechar transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 33683

    CPConfig_Grava_Configs = SUCESSO

    Exit Function

Erro_CPConfig_Grava_Configs:

    CPConfig_Grava_Configs = Err

    Select Case Err

        Case 33681
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 33682

        Case 33683
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148207)

    End Select

    Call Transacao_Rollback

    Exit Function

End Function

Function CPConfig_Grava_Configs_Trans(ByVal colConfigs As ColCPConfig) As Long
'Grava na tabela CPConfig uma coleção de registros de configuração
'TEM QUE SER CHAMADA DENTRO DE TRANSACAO

Dim lErro As Long, iIndice As Integer
Dim alComando(1 To 2) As Long
Dim objCPConfig As ClassCPConfig

On Error GoTo Erro_CPConfig_Grava_Configs_Trans

    'Abrir comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 33680
    Next

   'Para cada elemento da coleção
    For Each objCPConfig In colConfigs

        lErro = CPConfig_Grava_Trans(objCPConfig, alComando())
        If lErro <> SUCESSO Then Error 33682

    Next

   'Fechar comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    CPConfig_Grava_Configs_Trans = SUCESSO

    Exit Function

Erro_CPConfig_Grava_Configs_Trans:

    CPConfig_Grava_Configs_Trans = Err

    Select Case Err

        Case 33680
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 33682

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148208)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function CPConfig_Grava_Trans(ByVal objCPConfig As ClassCPConfig, alComando() As Long) As Long
'grava registro em CPConfig. Apenas altera o conteúdo, se não existir dá erro.
'TEM QUE SER CHAMADA EM TRANSACAO

Dim lErro As Long, tCPConfig As typeCPConfig

On Error GoTo Erro_CPConfig_Grava_Trans

    'Inicializar buffer
    tCPConfig.sConteudo = String(STRING_CPCONFIG_CONTEUDO, 0)

    'Lê o registo
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Conteudo FROM CPConfig WHERE Codigo = ? AND FilialEmpresa = ?", 0, tCPConfig.sConteudo, objCPConfig.sCodigo, objCPConfig.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then Error 33684

    'Lê o primeiro registro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 33685

    'Se não encontrou o registro
    If lErro = AD_SQL_SEM_DADOS Then Error 33686

    'Se o conteúdo foi modificado
    If objCPConfig.sConteudo <> tCPConfig.sConteudo Then
        lErro = Comando_ExecutarPos(alComando(2), "UPDATE CPConfig SET Conteudo = ?", alComando(1), objCPConfig.sConteudo)
        If lErro <> AD_SQL_SUCESSO Then Error 33687
    End If

    Exit Function

Erro_CPConfig_Grava_Trans:

    CPConfig_Grava_Trans = Err

    Select Case Err

        Case 33684, 33685
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CPCONFIG2", Err, objCPConfig.sCodigo, objCPConfig.iFilialEmpresa)

        Case 33686
            Call Rotina_Erro(vbOKOnly, "ERRO_CPCONFIG_INEXISTENTE", Err, objCPConfig.sCodigo, objCPConfig.iFilialEmpresa)

        Case 33687
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_CPCONFIG", Err, objCPConfig.sCodigo, objCPConfig.iFilialEmpresa)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148209)

    End Select

    Exit Function

End Function

Function CRConfig_Grava_Configs(ByVal colConfigs As ColCRConfig) As Long
'Grava na tabela CRConfig uma coleção de registros de configuração

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_CRConfig_Grava_Configs

    'Abrir transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 33696

    lErro = CF("CRConfig_Grava_Configs_Trans", colConfigs)
    If lErro <> SUCESSO Then Error 33697

    'Fechar transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 33698

    CRConfig_Grava_Configs = SUCESSO

    Exit Function

Erro_CRConfig_Grava_Configs:

    CRConfig_Grava_Configs = Err

    Select Case Err

        Case 33696
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 33697

        Case 33698
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148210)

    End Select

    Call Transacao_Rollback

    Exit Function

End Function

Function CRConfig_Grava_Configs_Trans(ByVal colConfigs As ColCRConfig) As Long
'Grava na tabela CRConfig uma coleção de registros de configuração
'TEM QUE SER CHAMADA EM TRANSACAO

Dim lErro As Long, iIndice As Integer
Dim alComando(1 To 2) As Long
Dim objCRConfig As ClassCRConfig

On Error GoTo Erro_CRConfig_Grava_Configs_Trans

    'Abrir comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 33695
    Next

   'Para cada elemento da coleção
    For Each objCRConfig In colConfigs

        lErro = CRConfig_Grava_Trans(objCRConfig, alComando())
        If lErro <> SUCESSO Then Error 33697

    Next

   'Fechar comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    CRConfig_Grava_Configs_Trans = SUCESSO

    Exit Function

Erro_CRConfig_Grava_Configs_Trans:

    CRConfig_Grava_Configs_Trans = Err

    Select Case Err

        Case 33695
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 33697

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148211)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function CRConfig_Grava_Trans(ByVal objCRConfig As ClassCRConfig, alComando() As Long) As Long
'grava registro em CRConfig. Apenas altera o conteúdo, se não existir dá erro.
'TEM QUE SER CHAMADA EM TRANSACAO

Dim lErro As Long, tCRConfig As typeCRConfig

On Error GoTo Erro_CRConfig_Grava_Trans

    'Inicializar buffer
    tCRConfig.sConteudo = String(STRING_CRCONFIG_CONTEUDO, 0)

    'Lê o registo
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Conteudo FROM CRConfig WHERE Codigo = ? AND FilialEmpresa = ?", 0, tCRConfig.sConteudo, objCRConfig.sCodigo, objCRConfig.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then Error 33699

    'Lê o primeiro registro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 33700

    'Se não encontrou o registro
    If lErro = AD_SQL_SEM_DADOS Then Error 33701

    'Se o conteúdo foi modificado
    If objCRConfig.sConteudo <> tCRConfig.sConteudo Then
        lErro = Comando_ExecutarPos(alComando(2), "UPDATE CRConfig SET Conteudo = ?", alComando(1), objCRConfig.sConteudo)
        If lErro <> AD_SQL_SUCESSO Then Error 33702
    End If

    Exit Function

Erro_CRConfig_Grava_Trans:

    CRConfig_Grava_Trans = Err

    Select Case Err

        Case 33699, 33700
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CRCONFIG2", Err, objCRConfig.sCodigo, objCRConfig.iFilialEmpresa)

        Case 33701
            Call Rotina_Erro(vbOKOnly, "ERRO_CRCONFIG_INEXISTENTE", Err, objCRConfig.sCodigo, objCRConfig.iFilialEmpresa)

        Case 33702
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_CRCONFIG", Err, objCRConfig.sCodigo, objCRConfig.iFilialEmpresa)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148212)

    End Select

    Exit Function

End Function

Function TESConfig_Grava_Configs_Trans(ByVal colConfigs As ColTESConfig) As Long
'Grava na tabela TESConfig uma coleção de registros de configuração

Dim lErro As Long, iIndice As Integer
Dim alComando(1 To 2) As Long
Dim objTESConfig As ClassTESConfig

On Error GoTo Erro_TESConfig_Grava_Configs_Trans

    'Abrir comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 33711
    Next

   'Para cada elemento da coleção
    For Each objTESConfig In colConfigs

        lErro = TESConfig_Grava_Trans(objTESConfig, alComando())
        If lErro <> SUCESSO Then Error 33713

    Next

   'Fechar comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    TESConfig_Grava_Configs_Trans = SUCESSO

    Exit Function

Erro_TESConfig_Grava_Configs_Trans:

    TESConfig_Grava_Configs_Trans = Err

    Select Case Err

        Case 33711
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 33713

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148213)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function CondicaoPagto_Automatico(iCodigo As Integer) As Long
'Retorna o código da próxima CondicaoPagto disponível

Dim lErro As Long
Dim lNumAuto As Long

On Error GoTo Erro_CondicaoPagto_Automatico

    'Obtém o número automático do BD
    lErro = CF("CPRConfig_ObterAutomatico", "NUM_PROX_CONDICAO_PAGTO", "CondicoesPagto", "Codigo", lNumAuto)
    If lErro <> SUCESSO Then Error 16395

    iCodigo = lNumAuto
    
    CondicaoPagto_Automatico = SUCESSO

    Exit Function

Erro_CondicaoPagto_Automatico:

    CondicaoPagto_Automatico = Err

    Select Case Err
    
        Case 16395

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148214)

    End Select

    Exit Function

End Function

Function CPRConfig_ObterAutomatico(ByVal sCodigo As String, ByVal sTabela As String, ByVal sCampo As String, lNumAuto As Long) As Long
'retorna em lNumAuto do número automático disponível do objeto
'sCodigo identifica o registro do objeto na tabela de configuração
'sTabela é a Tabela do objeto
'sCampo é o campo na Tabela do objeto que armazena o número/código do objeto.

Dim sTabelaConfig As String
Dim lErro As Long

On Error GoTo Erro_CPRConfig_ObterAutomatico
    
    sTabelaConfig = "CPRConfig"
    
    lErro = CF("Config_ObterAutomatico", sTabelaConfig, sCodigo, sTabela, sCampo, lNumAuto)
    If lErro <> SUCESSO Then Error 25191
    
    CPRConfig_ObterAutomatico = SUCESSO

    Exit Function

Erro_CPRConfig_ObterAutomatico:

    CPRConfig_ObterAutomatico = Err

    Select Case Err

        Case 25191  'tratado na rotina chamada

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148215)

    End Select

    Exit Function

End Function

Private Function NFiscal_Le_Fornecedor_Uma(ByVal objFornecedor As ClassFornecedor, ByVal lCodigo As Long, lNumNotaFiscal As Long) As Long
'Retorna sucesso se achar algum Fornecedor relacionado com NF dos moduloes de faturamento/estoque

Dim lErro As Long
Dim lComando As Long

On Error GoTo Erro_NFiscal_Le_Fornecedor_Uma

    'Inicializa comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 33750

    'Lê o Fornecedor na tabela NFiscal
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc,NumNotaFiscal FROM NFiscal WHERE Fornecedor = ?", lCodigo, lNumNotaFiscal, objFornecedor.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 33751

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 33752

    'Não achou o Fornecedor
    If lErro = AD_SQL_SEM_DADOS Then Error 33753

    Call Comando_Fechar(lComando)

    NFiscal_Le_Fornecedor_Uma = SUCESSO

Exit Function

Erro_NFiscal_Le_Fornecedor_Uma:

    NFiscal_Le_Fornecedor_Uma = Err

    Select Case Err

        Case 33750
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 33751, 33752
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFISCAL2", Err, objFornecedor.lCodigo)

        Case 33753
            'Erro tratado na rotina chamada

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148216)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Private Function NFPag_Le_Fornecedor_Uma(ByVal objFornecedor As ClassFornecedor, ByVal lCodigo As Long, lNumNotaFiscal As Long) As Long
'Retorna sucesso se achar algum Fornecedor relacionado com NF Pag.

Dim lErro As Long
Dim lComando As Long

On Error GoTo Erro_NFPag_Le_Fornecedor_Uma

    'Inicializa comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 33762

    'Lê o Fornecedor na tabela NFsPag
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc, NumNotaFiscal FROM NFsPag WHERE Fornecedor = ? AND Status <> ?", lCodigo, lNumNotaFiscal, objFornecedor.lCodigo, STATUS_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then Error 33763

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 33764

    'Não achou o Fornecedor
    If lErro = AD_SQL_SEM_DADOS Then Error 33765

    Call Comando_Fechar(lComando)

    NFPag_Le_Fornecedor_Uma = SUCESSO

Exit Function

Erro_NFPag_Le_Fornecedor_Uma:

    NFPag_Le_Fornecedor_Uma = Err

    Select Case Err

        Case 33762
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 33763, 33764
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFSPAG2", Err, objFornecedor.lCodigo)

        Case 33765
            'Erro tratado na rotina chamada

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148217)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Private Function NFPagBaixada_Le_Fornecedor_Uma(ByVal objFornecedor As ClassFornecedor, ByVal lCodigo As Long, lNumNotaFiscal As Long) As Long
'Retorna sucesso se achar algum Fornecedor relacionado com NF Pag Baixada.

Dim lErro As Long
Dim lComando As Long

On Error GoTo Erro_NFPagBaixada_Le_Fornecedor_Uma

    'Inicializa comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 33774

    'Lê o Fornecedor na tabela NFsPagBaixadas
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc,NumNotaFiscal FROM NFsPagBaixadas WHERE Fornecedor = ?", lCodigo, lNumNotaFiscal, objFornecedor.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 33775

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 33776

    'Não achou o Fornecedor
    If lErro = AD_SQL_SEM_DADOS Then Error 33777

    Call Comando_Fechar(lComando)

    NFPagBaixada_Le_Fornecedor_Uma = SUCESSO

    Exit Function

Erro_NFPagBaixada_Le_Fornecedor_Uma:

    NFPagBaixada_Le_Fornecedor_Uma = Err

    Select Case Err

        Case 33774
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 33775, 33776
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFSPAGBAIXADAS1", Err, objFornecedor.lCodigo)

        Case 33777
            'Erro tratado na rotina chamada

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148218)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Private Function TituloPagar_Le_Fornecedor_Um(ByVal objFornecedor As ClassFornecedor, lNumIntDoc As Long) As Long
'Retorna sucesso se achar algum Fornecedor relacionado com Título Pag.

Dim lErro As Long
Dim lComando As Long

On Error GoTo Erro_TituloPagar_Le_Fornecedor_Um

    'Inicializa comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 33780

    'Lê o Fornecedor na tabela TitulosPag
    '########################################
    'ALTERADO POR WAGNER - Não considera titulos excluídos
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc FROM TitulosPag WHERE Fornecedor = ? AND Status <> ?", lNumIntDoc, objFornecedor.lCodigo, STATUS_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then Error 33781
    '########################################

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 33782

    'Não achou o Fornecedor
    If lErro = AD_SQL_SEM_DADOS Then Error 33783

    Call Comando_Fechar(lComando)

    TituloPagar_Le_Fornecedor_Um = SUCESSO

Exit Function

Erro_TituloPagar_Le_Fornecedor_Um:

    TituloPagar_Le_Fornecedor_Um = Err

    Select Case Err

        Case 33780
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 33781, 33782
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TITULOSPAG1", Err, objFornecedor.lCodigo)

        Case 33783
            'Erro tratado na rotina chamada

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148219)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Private Function TituloPagarBaixado_Le_Fornecedor_Um(ByVal objFornecedor As ClassFornecedor, lNumIntDoc As Long) As Long
'Retorna sucesso se achar algum Fornecedor relacionado com Título Pag Baixado.

Dim lErro As Long
Dim lComando As Long

On Error GoTo Erro_TituloPagarBaixado_Le_Fornecedor_Um

    'Inicializa comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 33792

    'Lê o Fornecedor na tabela TitulosPagBaixados
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc FROM TitulosPagBaixados WHERE Fornecedor = ?", lNumIntDoc, objFornecedor.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 33793

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 33794

    'Não achou o Fornecedor
    If lErro = AD_SQL_SEM_DADOS Then Error 33795

    Call Comando_Fechar(lComando)

    TituloPagarBaixado_Le_Fornecedor_Um = SUCESSO

Exit Function

Erro_TituloPagarBaixado_Le_Fornecedor_Um:

    TituloPagarBaixado_Le_Fornecedor_Um = Err

    Select Case Err

        Case 33792
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 33793, 33794
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TITULOSPAGBAIXADOS1", Err, objFornecedor.lCodigo)

        Case 33795
            'Erro tratado na rotina chamada

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148220)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Private Function CreditoPagForn_Le_Fornecedor_Um(ByVal objFornecedor As ClassFornecedor, lNumIntDoc As Long) As Long
'Retorna sucesso se achar algum Fornecedor relacionado com Crédito Pag Forn.

Dim lErro As Long
Dim lComando As Long

On Error GoTo Erro_CreditoPagForn_Le_Fornecedor_Um

    'Inicializa comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 33797

    'Lê o Fornecedor na tabela CredtitosPagForn
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc FROM CreditosPagForn WHERE Fornecedor = ?", lNumIntDoc, objFornecedor.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 33798

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 33799

    'Não achou o Fornecedor
    If lErro = AD_SQL_SEM_DADOS Then Error 33800

    Call Comando_Fechar(lComando)

    CreditoPagForn_Le_Fornecedor_Um = SUCESSO

Exit Function

Erro_CreditoPagForn_Le_Fornecedor_Um:

    CreditoPagForn_Le_Fornecedor_Um = Err

    Select Case Err

        Case 33797
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 33798, 33799
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CREDITOSPAGFORN2", Err, objFornecedor.lCodigo)

        Case 33800
            'Erro tratado na rotina chamada

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148221)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Private Function PagtoAntecipado_Le_Fornecedor_Um(ByVal objFornecedor As ClassFornecedor, lNumIntPag As Long) As Long
'Retorna sucesso se achar algum Fornecedor relacionado com Pagamento Antecipado.

Dim lErro As Long
Dim lComando As Long

On Error GoTo Erro_PagtoAntecipado_Le_Fornecedor_Um

    'Inicializa comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 33803

    'Lê o Fornecedor na tabela PagtosAntecipados
    lErro = Comando_Executar(lComando, "SELECT NumIntPag FROM PagtosAntecipados WHERE Fornecedor = ?", lNumIntPag, objFornecedor.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 33804

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 33805

    'Não achou o Fornecedor
    If lErro = AD_SQL_SEM_DADOS Then Error 33806

    Call Comando_Fechar(lComando)

    PagtoAntecipado_Le_Fornecedor_Um = SUCESSO

Exit Function

Erro_PagtoAntecipado_Le_Fornecedor_Um:

    PagtoAntecipado_Le_Fornecedor_Um = Err

    Select Case Err

        Case 33803
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 33804, 33805
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PAGTOSANTECIPADOS1", Err, objFornecedor.lCodigo)

        Case 33806
            'Erro tratado na rotina chamada

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148222)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

'Friend Function FornecedorProduto_Le_Fornecedor_Um(objFornecedor As ClassFornecedor, objFornecedorProduto As ClassFornecedorProduto) As Long
''Retorna sucesso se achar algum Fornecedor relacionado com Fornecedor Produto.
'
'Dim lErro As Long
'Dim lComando As Long
'Dim sCodigo As String
'
'On Error GoTo Erro_FornecedorProduto_Le_Fornecedor_Um
'
'    sCodigo = String(STRING_PRODUTO, 0)
'
'    'Inicializa comando
'    lComando = Comando_Abrir()
'    If lComando = 0 Then Error 33809
'
'    'Lê o Fornecedor na tabela FornecedorProduto
'    lErro = Comando_Executar(lComando, "SELECT Produto FROM FornecedorProduto WHERE Fornecedor = ?", sCodigo, objFornecedor.lCodigo)
'    If lErro <> AD_SQL_SUCESSO Then Error 33810
'
'    lErro = Comando_BuscarPrimeiro(lComando)
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 33811
'
'    objFornecedorProduto.sProduto = sCodigo
'
'    'Não achou o Fornecedor
'    If lErro = AD_SQL_SEM_DADOS Then Error 33812
'
'    Call Comando_Fechar(lComando)
'
'    FornecedorProduto_Le_Fornecedor_Um = SUCESSO
'
'Exit Function
'
'Erro_FornecedorProduto_Le_Fornecedor_Um:
'
'    FornecedorProduto_Le_Fornecedor_Um = Err
'
'    Select Case Err
'
'        Case 33809
'            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
'
'        Case 33810, 33811
'            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FORNECEDORPRODUTO2", Err, objFornecedor.lCodigo)
'
'        Case 33812
'            'Erro tratado na rotina chamada
'
'        Case Else
'            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148223)
'
'    End Select
'
'    Call Comando_Fechar(lComando)
'
'    Exit Function
'
'End Function

Private Function ProdutoFilial_Le_Fornecedor_Um(ByVal objFornecedor As ClassFornecedor, ByVal objProdutoFilial As ClassProdutoFilial) As Long
'Retorna sucesso se achar algum Fornecedor relacionado com Produto Filial.

Dim lErro As Long
Dim lComando As Long
Dim sCodigo As String

On Error GoTo Erro_ProdutoFilial_Le_Fornecedor_Um

    sCodigo = String(STRING_PRODUTO, 0)

    'Inicializa comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 33815

    'Lê o Fornecedor na tabela ProdutosFilial
    lErro = Comando_Executar(lComando, "SELECT Produto FROM ProdutosFilial WHERE Fornecedor = ?", sCodigo, objFornecedor.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 33816

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 33817
    
    If sCodigo <> "" Then objProdutoFilial.sProduto = sCodigo

    'Não achou o Fornecedor
    If lErro = AD_SQL_SEM_DADOS Then Error 33818

    Call Comando_Fechar(lComando)

    ProdutoFilial_Le_Fornecedor_Um = SUCESSO

Exit Function

Erro_ProdutoFilial_Le_Fornecedor_Um:

    ProdutoFilial_Le_Fornecedor_Um = Err

    Select Case Err

        Case 33815
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 33816, 33817
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOSFILIAL1", Err, objFornecedor.lCodigo)

        Case 33818
            'Erro tratado na rotina chamada

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148224)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function TitulosPagar_LeMod(ByVal objTituloPagar As ClassTituloPagar, ByVal lComando As Long) As Long
'faz a leitura de um registro da tabela TitulosPagar p/objTituloPagar c/ExecutarPos
'objTituloPagar.lNumIntDoc entra preenchido
'TEM QUE SER CHAMADO EM TRANSACAO

Dim lErro As Long
Dim tTituloPagar As typeTituloPagar

On Error GoTo Erro_TitulosPagar_LeMod

    tTituloPagar.sObservacao = String(STRING_TITULO_OBSERVACAO, 0)
    tTituloPagar.sSiglaDocumento = String(STRING_SIGLA_DOCUMENTO, 0)
    tTituloPagar.sNatureza = String(STRING_NATMOVCTA_CODIGO, 0)
    tTituloPagar.sHistorico = String(STRING_NFSPAG_HISTORICO, 0)
    tTituloPagar.sCcl = String(STRING_CCL, 0)

    lErro = Comando_ExecutarPos(lComando, "SELECT OutrasDespesas , Saldo, DataEmissao, ValorFrete, ValorICMS, ValorICMSSubst, ValorINSS,INSSRetido, DataRegistro, " & _
        "ValorIPI , ValorIRRF, ValorProdutos, ValorSeguro, ValorTotal, CreditoICMS, CreditoIPI, " & _
        "Filial, FilialEmpresa, NumParcelas, Status, Fornecedor, " & _
        "NumTitulo, Observacao, SiglaDocumento, CondicaoPagto, FilialPedCompra, NumPedCompra, PISRetido, ISSRetido, COFINSRetido, CSLLRetido, TaxaMoeda, Historico, Natureza, Ccl FROM TitulosPag WHERE TitulosPag.NumIntDoc = ?", 0, _
        tTituloPagar.dOutrasDespesas, tTituloPagar.dSaldo, tTituloPagar.dtDataEmissao, tTituloPagar.dValorFrete, tTituloPagar.dValorICMS, tTituloPagar.dValorICMSSubst, tTituloPagar.dValorINSS, tTituloPagar.iINSSRetido, tTituloPagar.dtDataRegistro, _
        tTituloPagar.dValorIPI, tTituloPagar.dValorIRRF, tTituloPagar.dValorProdutos, tTituloPagar.dValorSeguro, tTituloPagar.dValorTotal, tTituloPagar.iCreditoICMS, tTituloPagar.iCreditoIPI, _
        tTituloPagar.iFilial, tTituloPagar.iFilialEmpresa, tTituloPagar.iNumParcelas, tTituloPagar.iStatus, tTituloPagar.lFornecedor, _
        tTituloPagar.lNumTitulo, tTituloPagar.sObservacao, tTituloPagar.sSiglaDocumento, tTituloPagar.iCondicaoPagto, tTituloPagar.iFilialPedCompra, tTituloPagar.lNumPedCompra, tTituloPagar.dPISRetido, tTituloPagar.dISSRetido, tTituloPagar.dCOFINSRetido, tTituloPagar.dCSLLRetido, tTituloPagar.dTaxaMoeda, tTituloPagar.sHistorico, tTituloPagar.sNatureza, _
        tTituloPagar.sCcl, objTituloPagar.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then Error 7311

    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7407
    
    If lErro <> AD_SQL_SUCESSO Then Error 7408
    
    tTituloPagar.lNumIntDoc = objTituloPagar.lNumIntDoc
    Call TituloPag_MoverCamposObj(objTituloPagar, tTituloPagar)

    TitulosPagar_LeMod = SUCESSO

    Exit Function

Erro_TitulosPagar_LeMod:

    TitulosPagar_LeMod = Err

    Select Case Err

        Case 7311, 7407
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TITULOS_PAGAR", Err)

        Case 7408
            Call Rotina_Erro(vbOKOnly, "ERRO_TITULO_PAGAR_INEXISTENTE", Err)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148225)

    End Select

    Exit Function

End Function

Private Sub TituloPag_MoverCamposObj(ByVal objTituloPagar As ClassTituloPagar, tTituloPagar As typeTituloPagar)

    objTituloPagar.dOutrasDespesas = tTituloPagar.dOutrasDespesas
    objTituloPagar.dSaldo = tTituloPagar.dSaldo
    objTituloPagar.dtDataEmissao = tTituloPagar.dtDataEmissao
    objTituloPagar.dtDataRegistro = tTituloPagar.dtDataRegistro
    objTituloPagar.dValorFrete = tTituloPagar.dValorFrete
    objTituloPagar.dValorICMS = tTituloPagar.dValorICMS
    objTituloPagar.dValorICMSSubst = tTituloPagar.dValorICMSSubst
    objTituloPagar.dValorINSS = tTituloPagar.dValorINSS
    objTituloPagar.dValorIPI = tTituloPagar.dValorIPI
    objTituloPagar.dValorIRRF = tTituloPagar.dValorIRRF
    objTituloPagar.dValorProdutos = tTituloPagar.dValorProdutos
    objTituloPagar.dValorSeguro = tTituloPagar.dValorSeguro
    objTituloPagar.dValorTotal = tTituloPagar.dValorTotal
    objTituloPagar.iCreditoICMS = tTituloPagar.iCreditoICMS
    objTituloPagar.iCreditoIPI = tTituloPagar.iCreditoIPI
    objTituloPagar.iFilial = tTituloPagar.iFilial
    objTituloPagar.iFilialEmpresa = tTituloPagar.iFilialEmpresa
    objTituloPagar.iINSSRetido = tTituloPagar.iINSSRetido
    objTituloPagar.iNumParcelas = tTituloPagar.iNumParcelas
    objTituloPagar.iStatus = tTituloPagar.iStatus
    objTituloPagar.lFornecedor = tTituloPagar.lFornecedor
    objTituloPagar.lNumTitulo = tTituloPagar.lNumTitulo
    objTituloPagar.sObservacao = tTituloPagar.sObservacao
    objTituloPagar.sSiglaDocumento = tTituloPagar.sSiglaDocumento
    objTituloPagar.iCondicaoPagto = tTituloPagar.iCondicaoPagto
    objTituloPagar.iFilialPedCompra = tTituloPagar.iFilialPedCompra
    objTituloPagar.lNumPedCompra = tTituloPagar.lNumPedCompra
    objTituloPagar.dPISRetido = tTituloPagar.dPISRetido
    objTituloPagar.dISSRetido = tTituloPagar.dISSRetido
    objTituloPagar.dCOFINSRetido = tTituloPagar.dCOFINSRetido
    objTituloPagar.dCSLLRetido = tTituloPagar.dCSLLRetido
    objTituloPagar.dTaxaMoeda = tTituloPagar.dTaxaMoeda
    objTituloPagar.sHistorico = tTituloPagar.sHistorico
    objTituloPagar.sNatureza = tTituloPagar.sNatureza
    objTituloPagar.sCcl = tTituloPagar.sCcl
    
End Sub

Function TituloPagarBaixado_LeMod(ByVal objTituloPagar As ClassTituloPagar, ByVal lComando As Long) As Long
'faz a leitura de um registro da tabela TitulosPagarBaixados p/objTituloPagar c/ExecutarPos
'objTituloPagar.lNumIntDoc entra preenchido
'TEM QUE SER CHAMADO EM TRANSACAO
Dim lErro As Long
Dim tTituloPagar As typeTituloPagar

On Error GoTo Erro_TituloPagarBaixado_LeMod

    tTituloPagar.sObservacao = String(STRING_TITULO_OBSERVACAO, 0)
    tTituloPagar.sNatureza = String(STRING_NATMOVCTA_CODIGO, 0)
    tTituloPagar.sSiglaDocumento = String(STRING_SIGLA_DOCUMENTO, 0)
    tTituloPagar.sHistorico = String(STRING_NFSPAG_HISTORICO, 0)
    tTituloPagar.sCcl = String(STRING_CCL, 0)

    lErro = Comando_ExecutarPos(lComando, "SELECT OutrasDespesas, Saldo, DataEmissao, ValorFrete, ValorICMS, ValorICMSSubst, ValorINSS, INSSRetido, DataRegistro, " & _
        "ValorIPI , ValorIRRF, ValorProdutos, ValorSeguro, ValorTotal, CreditoICMS, CreditoIPI, " & _
        "Filial, FilialEmpresa, NumParcelas, Status, Fornecedor, " & _
        "NumTitulo, Observacao, SiglaDocumento, CondicaoPagto, FilialPedCompra, NumPedCompra, PISRetido, ISSRetido, COFINSRetido, CSLLRetido, TaxaMoeda, Natureza, Historico, Ccl FROM TitulosPagBaixados WHERE NumIntDoc = ?", 0, _
        tTituloPagar.dOutrasDespesas, tTituloPagar.dSaldo, tTituloPagar.dtDataEmissao, tTituloPagar.dValorFrete, tTituloPagar.dValorICMS, tTituloPagar.dValorICMSSubst, tTituloPagar.dValorINSS, tTituloPagar.iINSSRetido, tTituloPagar.dtDataRegistro, _
        tTituloPagar.dValorIPI, tTituloPagar.dValorIRRF, tTituloPagar.dValorProdutos, tTituloPagar.dValorSeguro, tTituloPagar.dValorTotal, tTituloPagar.iCreditoICMS, tTituloPagar.iCreditoIPI, _
        tTituloPagar.iFilial, tTituloPagar.iFilialEmpresa, tTituloPagar.iNumParcelas, tTituloPagar.iStatus, tTituloPagar.lFornecedor, _
        tTituloPagar.lNumTitulo, tTituloPagar.sObservacao, tTituloPagar.sSiglaDocumento, tTituloPagar.iCondicaoPagto, tTituloPagar.iFilialPedCompra, tTituloPagar.lNumPedCompra, tTituloPagar.dPISRetido, tTituloPagar.dISSRetido, tTituloPagar.dCOFINSRetido, tTituloPagar.dCSLLRetido, tTituloPagar.dTaxaMoeda, tTituloPagar.sNatureza, tTituloPagar.sHistorico, tTituloPagar.sCcl, objTituloPagar.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then Error 7871

    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7872

    If lErro <> AD_SQL_SUCESSO Then Error 7873

    tTituloPagar.lNumIntDoc = objTituloPagar.lNumIntDoc
    Call TituloPag_MoverCamposObj(objTituloPagar, tTituloPagar)

    TituloPagarBaixado_LeMod = SUCESSO

    Exit Function

Erro_TituloPagarBaixado_LeMod:

    TituloPagarBaixado_LeMod = Err

    Select Case Err

        Case 7871, 7872
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TITULOS_PAGAR_BAIXADO", Err)

        Case 7873
            Call Rotina_Erro(vbOKOnly, "ERRO_TITULO_PAGAR_BAIXADO_INEXISTENTE", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148226)

    End Select

    Exit Function

End Function

Function TipoVendedor_Automatico(iCodigo As Integer) As Long
'Retorna o código do próximo Tipo de Vendedor disponível

Dim lErro As Long
Dim lNumAuto As Long

On Error GoTo Erro_TipoVendedor_Automatico

    'Obtém o número automático do BD
    lErro = CF("CPRConfig_ObterAutomatico", "NUM_PROX_TIPO_VENDEDOR", "TiposDeVendedor", "Codigo", lNumAuto)
    If lErro <> SUCESSO Then Error 25206

    iCodigo = CInt(lNumAuto)
    
    TipoVendedor_Automatico = SUCESSO

    Exit Function

Erro_TipoVendedor_Automatico:

    TipoVendedor_Automatico = Err

    Select Case Err

        Case 25206 'tratado na rotina chamada

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148227)

    End Select

End Function

Function Vendedor_Automatico(sCodigo As String) As Long
'retorna o código do próximo Vendedor disponivel

Dim lErro As Long
Dim lCodigo As Long

On Error GoTo Erro_Vendedor_Automatico

    lErro = CF("CPRConfig_ObterAutomatico", "NUM_PROX_VENDEDOR", "Vendedores", "Codigo", lCodigo)
    If lErro <> SUCESSO Then Error 25207

    sCodigo = CStr(lCodigo)

    Vendedor_Automatico = SUCESSO

    Exit Function

Erro_Vendedor_Automatico:

    Vendedor_Automatico = Err

    Select Case Err

    Case 25207 'tratado na rotina chamada
    
    Case Else
        Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148228)

    End Select

End Function

Function FaturasPag_Testa_Repeticao(ByVal objTituloPagar As ClassTituloPagar) As Long
'Pesquisa se já existe no BD em um certo Periodo de Emissão uma
'Fatura a Pagar ou Baixada com o mesmo Número

Dim lErro As Long

On Error GoTo Erro_FaturasPag_Testa_Repeticao

    'Chama TituloPagar_Testa_Repeticao
    lErro = CF("TituloPagar_Testa_Repeticao", objTituloPagar)
    If lErro <> SUCESSO Then Error 19921
        
    FaturasPag_Testa_Repeticao = SUCESSO
    
    Exit Function

Erro_FaturasPag_Testa_Repeticao:

    FaturasPag_Testa_Repeticao = Err
    
    Select Case Err
    
        Case 19921
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148229)
            
    End Select
    
    Exit Function
    
End Function

Function TituloPagar_Testa_Repeticao(ByVal objTituloPagar As ClassTituloPagar) As Long
'Pesquisa se já existe no BD em um certo Periodo de Emissão uma
'Fatura a Pagar ou Baixada com o mesmo Número
'Obs.: estou desconsiderando a sigla do docto e a filial da empresa

Dim lErro As Long
Dim lComando As Long
Dim lComando2 As Long
Dim dtDataEmissao As Date
Dim vbMsgRes As VbMsgBoxResult
Dim lNumIntDoc As Long

On Error GoTo Erro_TituloPagar_Testa_Repeticao
    
    'Abre o Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 18724
    
    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then gError 18724
    
    If objTituloPagar.dtDataEmissao <> DATA_NULA Then
    
        'Verifica se em um certo Período de Emissão foi cadastrada em TitulosPagBaixados um Título de mesmo número
        lErro = Comando_Executar(lComando, "SELECT DataEmissao FROM TitulosPagBaixados WHERE Fornecedor = ? AND Filial = ? AND SiglaDocumento = ? AND NumTitulo = ? AND ((DataEmissao > ? AND DataEmissao < ?) OR DataEmissao = ?) AND Status <> ? ", dtDataEmissao, objTituloPagar.lFornecedor, objTituloPagar.iFilial, objTituloPagar.sSiglaDocumento, objTituloPagar.lNumTitulo, objTituloPagar.dtDataEmissao - PERIODO_EMISSAO, objTituloPagar.dtDataEmissao + PERIODO_EMISSAO, DATA_NULA, STATUS_EXCLUIDO)
        
    Else
    
        'Verifica se foi cadastrada em TitulosPagBaixados um Título de mesmo número independente de data de emissao
        lErro = Comando_Executar(lComando, "SELECT DataEmissao FROM TitulosPagBaixados WHERE Fornecedor = ? AND Filial = ? AND SiglaDocumento = ? AND NumTitulo = ? AND Status <> ? ", dtDataEmissao, objTituloPagar.lFornecedor, objTituloPagar.iFilial, objTituloPagar.sSiglaDocumento, objTituloPagar.lNumTitulo, STATUS_EXCLUIDO)
    
    End If
    
    If lErro <> AD_SQL_SUCESSO Then gError 18731
    
    'Tenta ler
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 18732
    
    'Se encontrou
    If lErro = AD_SQL_SUCESSO Then
        
        'Pergunta se deseja cadastrar uma Fatura com o mesmo número
        vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_FATURAPAG_BAIXADA_MESMO_NUMERO", objTituloPagar.lFornecedor, objTituloPagar.iFilial, objTituloPagar.lNumTitulo, dtDataEmissao)
        
        'Se não, erro
        If vbMsgRes = vbNo Then gError 18733
    
    End If
    
    If gobjCRFAT.iTitPagVerRepetSemSigla = MARCADO Then
    
        If objTituloPagar.dtDataEmissao <> DATA_NULA Then
    
            'Verifica se em um certo Período de Emissão foi cadastrada em TitulosPag um Título de mesmo número
            lErro = Comando_Executar(lComando2, "SELECT NumIntDoc, DataEmissao FROM TitulosPag WHERE Fornecedor = ? AND Filial = ? AND NumTitulo = ? AND ((DataEmissao > ? AND DataEmissao < ?) OR DataEmissao = ?) AND Status <> ? ", lNumIntDoc, dtDataEmissao, objTituloPagar.lFornecedor, objTituloPagar.iFilial, objTituloPagar.lNumTitulo, objTituloPagar.dtDataEmissao - PERIODO_EMISSAO, objTituloPagar.dtDataEmissao + PERIODO_EMISSAO, DATA_NULA, STATUS_EXCLUIDO)
            
        Else
        
            'Verifica se foi cadastrada em TitulosPag um Título de mesmo número independente de data de emissao
            lErro = Comando_Executar(lComando2, "SELECT NumIntDoc, DataEmissao FROM TitulosPag WHERE Fornecedor = ? AND Filial = ? AND NumTitulo = ? AND Status <> ? ", lNumIntDoc, dtDataEmissao, objTituloPagar.lFornecedor, objTituloPagar.iFilial, objTituloPagar.lNumTitulo, STATUS_EXCLUIDO)
            
        End If
        
        If lErro <> AD_SQL_SUCESSO Then gError 18728
        
    Else
    
        If objTituloPagar.dtDataEmissao <> DATA_NULA Then
    
            'Verifica se em um certo Período de Emissão foi cadastrada em TitulosPag um Título de mesmo número
            lErro = Comando_Executar(lComando2, "SELECT NumIntDoc, DataEmissao FROM TitulosPag WHERE Fornecedor = ? AND Filial = ? AND SiglaDocumento = ? AND NumTitulo = ? AND ((DataEmissao > ? AND DataEmissao < ?) OR DataEmissao = ?) AND Status <> ? ", lNumIntDoc, dtDataEmissao, objTituloPagar.lFornecedor, objTituloPagar.iFilial, objTituloPagar.sSiglaDocumento, objTituloPagar.lNumTitulo, objTituloPagar.dtDataEmissao - PERIODO_EMISSAO, objTituloPagar.dtDataEmissao + PERIODO_EMISSAO, DATA_NULA, STATUS_EXCLUIDO)
            
        Else
        
            'Verifica se foi cadastrada em TitulosPag um Título de mesmo número independente de data de emissao
            lErro = Comando_Executar(lComando2, "SELECT NumIntDoc, DataEmissao FROM TitulosPag WHERE Fornecedor = ? AND Filial = ? AND SiglaDocumento = ? AND NumTitulo = ? AND Status <> ? ", lNumIntDoc, dtDataEmissao, objTituloPagar.lFornecedor, objTituloPagar.iFilial, objTituloPagar.sSiglaDocumento, objTituloPagar.lNumTitulo, STATUS_EXCLUIDO)
            
        End If
        
        If lErro <> AD_SQL_SUCESSO Then gError 18728
        
    End If

    'Tenta ler
    lErro = Comando_BuscarPrimeiro(lComando2)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 18729
    
    'Se encontrou
    If lErro = AD_SQL_SUCESSO Then gError 108780
    
    'Fecha comando
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)
    
    TituloPagar_Testa_Repeticao = SUCESSO
    
    Exit Function

Erro_TituloPagar_Testa_Repeticao:

    TituloPagar_Testa_Repeticao = gErr
    
    Select Case gErr
    
        Case 18730, 18733
        
        Case 18728, 18729
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FATURA1", gErr, objTituloPagar.lNumTitulo)
            
        Case 18731, 18732
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FATURASPAGBAIXADAS", gErr, objTituloPagar.lNumTitulo)
    
        Case 18724
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 108780
            Call Rotina_Erro(vbOKOnly, "ERRO_TITULOPAGAR_INSERCAO_MESMO_NUMERO", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148230)
            
    End Select
    
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)
    
End Function

Function NFFatPag_Testa_Repeticao(ByVal objTituloPagar As ClassTituloPagar) As Long
'Verifica se já existe uma Nota Fiscal Fatura em um periodo de emissao
'com os dados da nota a ser cadastrada (passada por parâmetro)

Dim lErro As Long

On Error GoTo Erro_NFFatPag_Testa_Repeticao

    'Chama TituloPagar_Testa_Repeticao
    lErro = CF("TituloPagar_Testa_Repeticao", objTituloPagar)
    If lErro <> SUCESSO Then Error 43088
    
    NFFatPag_Testa_Repeticao = SUCESSO
    
    Exit Function

Erro_NFFatPag_Testa_Repeticao:

    NFFatPag_Testa_Repeticao = Err
    
    Select Case Err
    
        Case 43088
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148231)
            
    End Select
    
    Exit Function
    
End Function

Function Mensagem_Exclui(ByVal iCodigo As Integer) As Long
'Exclui a Mensagem

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim lComando2 As Long
Dim lTransacao As Long
Dim iCodigo1 As Integer
Dim lCliente As Long

On Error GoTo Erro_Mensagem_Exclui

    'Inicializa comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 39736
    
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 39737
    
    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 43488
    
    'Inicia a transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 39738
    
    'Pesquisa a Mensagem em questão no BD
    lErro = Comando_ExecutarPos(lComando, "SELECT Codigo FROM Mensagens WHERE Codigo=?", 0, iCodigo1, iCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 39739
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 39740
        
    'Se não encontrou a Mensagem --> Erro
    If lErro = AD_SQL_SEM_DADOS Then Error 39741
    
    'Lock da Mensagem
    lErro = Comando_LockExclusive(lComando)
    If lErro <> AD_SQL_SUCESSO Then Error 39742
    
    'Verifica se existe algum Cliente associado à esta Mensagem
    lErro = Comando_Executar(lComando2, "SELECT Codigo FROM Clientes WHERE CodMensagem = ?", lCliente, iCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 43489
    
    lErro = Comando_BuscarPrimeiro(lComando2)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 43490
        
    'Se encontrou a Mensagem associada ao Cliente --> Erro
    If lErro = AD_SQL_SUCESSO Then Error 43491
    
    'Exclui a Mensagem do BD
    lErro = Comando_ExecutarPos(lComando1, "DELETE FROM Mensagens", lComando)
    If lErro <> AD_SQL_SUCESSO Then Error 39743
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 39744

    'Libera comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)

    Mensagem_Exclui = SUCESSO
    
    Exit Function
    
Erro_Mensagem_Exclui:

    Mensagem_Exclui = Err
    
    Select Case Err
    
        Case 39736, 39737, 43488
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
    
        Case 39738
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
            
        Case 39739, 39740
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MENSAGEM", Err, iCodigo)
            
        Case 39741
            Call Rotina_Erro(vbOKOnly, "ERRO_MENSAGEM_NAO_CADASTRADA", Err, iCodigo)
        
        Case 39742
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_MENSAGEM", Err, iCodigo)
        
        Case 39743
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_MENSAGEM", Err, iCodigo)
        
        Case 39744
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
                
        Case 43489, 43490
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CLIENTES", Err)
            
        Case 43491
            Call Rotina_Erro(vbOKOnly, "ERRO_MENSAGEM_ASSOCIADA_CLIENTE", Err, iCodigo)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148232)
    
    End Select
    
    Call Transacao_Rollback
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    
    Exit Function

End Function

Function Mensagem_Grava(ByVal objMensagem As ClassMensagem, iOperacao As Integer) As Long
'grava a Mensagem no banco de dados

Dim lComando1 As Long
Dim lComando2 As Long
Dim lTransacao As Long
Dim lErro As Long
Dim iStatus As Integer
Dim iCodigo As Integer

On Error GoTo Erro_Mensagem_Grava

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 39747

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 39748

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 39749

    'pesquisa no BD a Mensagem em questão
    lErro = Comando_ExecutarPos(lComando1, "SELECT Codigo FROM Mensagens WHERE Codigo=?", 0, iCodigo, objMensagem.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 39750

    'le a Mensagem, se estiver no BD
    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 39751

    'encontrou a Mensagem ==> isto é uma alteração
    If lErro = AD_SQL_SUCESSO Then
    
        iOperacao = MODIFICACAO
    
        'atualiza a Mensagem
        lErro = Comando_ExecutarPos(lComando2, "UPDATE Mensagens SET Descricao=?", lComando1, objMensagem.sDescricao)
        If lErro <> AD_SQL_SUCESSO Then Error 39752

    Else
        'não encontrou a Mensagem ==>  é uma inserção de Mensagem
        
        iOperacao = GRAVACAO
        
        'insere a Mensagem
        lErro = Comando_Executar(lComando2, "INSERT INTO Mensagens(Codigo,Descricao) VALUES (?,?)", objMensagem.iCodigo, objMensagem.sDescricao)
        If lErro <> AD_SQL_SUCESSO Then Error 39753

    End If

    'confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 39754

    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando1)

    Mensagem_Grava = SUCESSO

    Exit Function

Erro_Mensagem_Grava:

    Mensagem_Grava = Err

    Select Case Err

        Case 39747
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 39748
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 39749
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 39750, 39751
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MENSAGEM", Err, objMensagem.iCodigo)

        Case 39752
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_MENSAGEM", Err, objMensagem.iCodigo)

        Case 39753
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MENSAGEM", Err, objMensagem.iCodigo)

        Case 39754
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148233)

    End Select
    
    Call Transacao_Rollback
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)

    Exit Function

End Function

Function CarteirasCobranca_Automatico(iCodigo As Integer) As Long
'Retorna o Código da proxima Carteira disponível

Dim lErro As Long
Dim lNumAuto As Long

On Error GoTo Erro_CarteirasCobranca_Automatico

    'Obtem o numero Automatico do BD
    lErro = CF("CPRConfig_ObterAutomatico", "NUM_PROX_COD_CARTEIRACOBRANCA", "CarteirasCobranca", "Codigo", lNumAuto)
    If lErro <> SUCESSO And lErro <> 25191 Then Error 40585
    
    iCodigo = CInt(lNumAuto)
    
    CarteirasCobranca_Automatico = SUCESSO

    Exit Function

Erro_CarteirasCobranca_Automatico:

    CarteirasCobranca_Automatico = Err

    Select Case Err

        Case 40585
               
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148234)

    End Select
    
    Exit Function

End Function

Private Function BorderoCobranca_IncluirOcManuais(ByVal objBorderoCobranca As ClassBorderoCobranca) As Long
'incluir no bordero as ocorrencias entradas manualmente que ainda nao tenham sido enviadas ao cobrador
'faz parte da criacao de um bordero de cobranca

Dim lErro As Long, alComando(2) As Long, iIndice As Integer
Dim iCodOcorrencia As Integer
On Error GoTo Erro_BorderoCobranca_IncluirOcManuais

    For iIndice = LBound(alComando) To UBound(alComando)
    
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 19311
        
    Next
    
    'percorrer OcorrenciasRemParcRec obtendo e alterando as oc deste cobrador que tenham numbordero zerado
    If giFilialEmpresa = EMPRESA_TODA Then
        lErro = Comando_ExecutarPos(alComando(0), "SELECT CodOcorrencia FROM OcorrenciasRemParcRec WHERE NumBordero = 0 AND Cobrador = ?", 0, iCodOcorrencia, objBorderoCobranca.iCobrador)
    Else
        lErro = Comando_ExecutarPos(alComando(0), "SELECT CodOcorrencia FROM OcorrenciasRemParcRec WHERE NumBordero = 0 AND Cobrador = ? AND FilialEmpresa = ?", 0, iCodOcorrencia, objBorderoCobranca.iCobrador, giFilialEmpresa)
    End If
    If lErro <> AD_SQL_SUCESSO Then Error 19312
    
    lErro = Comando_BuscarProximo(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 19313
    
    Do While lErro <> AD_SQL_SEM_DADOS
    
        'atualizar as ocorrencias para indicar que fazem parte do bordero de cobranca
        lErro = Comando_ExecutarPos(alComando(1), "UPDATE OcorrenciasRemParcRec SET NumBordero = ?", alComando(0), objBorderoCobranca.lNumBordero)
        If lErro <> AD_SQL_SUCESSO Then Error 19314
    
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 19315
    
    Loop
    
    For iIndice = LBound(alComando) To UBound(alComando)
    
         Call Comando_Fechar(alComando(iIndice))
        
    Next
    
    BorderoCobranca_IncluirOcManuais = SUCESSO
     
    Exit Function
    
Erro_BorderoCobranca_IncluirOcManuais:

    BorderoCobranca_IncluirOcManuais = Err
     
    Select Case Err
          
        Case 19311
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 19312, 19313, 19315
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_OC_COB", Err, objBorderoCobranca.iCobrador)
        
        Case 19314
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_OC_COB", Err, objBorderoCobranca.iCobrador)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148235)
     
    End Select
     
    For iIndice = LBound(alComando) To UBound(alComando)
    
         Call Comando_Fechar(alComando(iIndice))
        
    Next
    
    Exit Function

End Function

Private Function Cobrador_Valida_Exclusao(ByVal objCobrador As ClassCobrador) As Long
'verifica a presença do cobrador passado nas tabelas
'BorderosCobranca, OcorrenciasRemParcRec, FiliaisClientes e BaixasParcRec
'ParcelasRec, ParcelasRecBaixados, Tipos de Cliente e TransfCartCobr

Dim lErro As Long
Dim lComando As Long
Dim iCobrador As Integer
Dim iCodTipoCliente As Integer

On Error GoTo Erro_Cobrador_Valida_Exclusao

    'Abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 42875
    
    'verifica se o Cobrador está presente em algum registro de BorderosCobranca
    lErro = Comando_Executar(lComando, "SELECT Cobrador FROM BorderosCobranca WHERE Cobrador = ?", iCobrador, objCobrador.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 42876
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 42877
    If lErro = AD_SQL_SUCESSO Then Error 42878 'Encontrou
    
    'Procura o Cobrador em OcorrenciasRemParcRec
    lErro = Comando_Executar(lComando, "SELECT Cobrador FROM OcorrenciasRemParcRec WHERE Cobrador= ?", iCobrador, objCobrador.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 42879
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 42880
    If lErro = AD_SQL_SUCESSO Then Error 42881 'Encontrou
    
    'Procura o cobrador em FilialCliente
    lErro = Comando_Executar(lComando, "SELECT CodCobrador FROM FiliaisClientes WHERE CodCobrador = ?", iCobrador, objCobrador.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 42882
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 42883
    If lErro = AD_SQL_SUCESSO Then Error 42884 'Encontrou
    
    'Procura o cobrador em BaixasParcRec
    lErro = Comando_Executar(lComando, "SELECT Cobrador FROM BaixasParcRec WHERE Cobrador = ?", iCobrador, objCobrador.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 42885
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 42886
    If lErro = AD_SQL_SUCESSO Then Error 42887 'Encontrou
    
    'Procura o Cobrador em Tipos de Cliente
    lErro = Comando_Executar(lComando, "SELECT Codigo FROM TiposDeCliente WHERE CodCobrador = ?", iCodTipoCliente, objCobrador.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 58641
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 58642
    If lErro = AD_SQL_SUCESSO Then Error 58643 'Encontrou
    
    'Procura o Cobrador em ParcelasRec
    lErro = Comando_Executar(lComando, "SELECT Cobrador FROM ParcelasRec WHERE Cobrador = ?", iCobrador, objCobrador.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 58644
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 58645
    If lErro = AD_SQL_SUCESSO Then Error 58646 'Encontrou
    
    'Procura em Parcelas Rec Baixadas
    lErro = Comando_Executar(lComando, "SELECT Cobrador FROM ParcelasRecBaixadas WHERE Cobrador = ?", iCobrador, objCobrador.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 58647
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 58648
    If lErro = AD_SQL_SUCESSO Then Error 58649 'Encontrou
    
    'Procura o Cobrador em TransfCartCobr
    lErro = Comando_Executar(lComando, "SELECT Cobrador FROM TransfCartCobr WHERE Cobrador = ?", iCobrador, objCobrador.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 58650
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 58651
    If lErro = AD_SQL_SUCESSO Then Error 58652 'Encontrou
    
    'Fecha o comando
    Call Comando_Fechar(lComando)
    
    Cobrador_Valida_Exclusao = SUCESSO
    
    Exit Function
    
Erro_Cobrador_Valida_Exclusao:

    Cobrador_Valida_Exclusao = Err
    
    Select Case Err
    
        Case 42875
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 42876, 42877
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BORDERO_COBRANCA", Err)

        Case 42878
            Call Rotina_Erro(vbOKOnly, "ERRO_COBRADOR_USADO_BORDEROCOBRANCA", Err)

        Case 42879, 42880
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_OCORRENCIASREMPARCREC", Err)

        Case 42881
            Call Rotina_Erro(vbOKOnly, "ERRO_COBRADOR_USADO_OCORRENCIA", Err)
    
        Case 42882, 42883
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIAISCLIENTES2", Err)
        
        Case 42884
            Call Rotina_Erro(vbOKOnly, "ERRO_COBRADOR_USADO_FILIAISCLIENTE", Err)
        
        Case 42885, 42886
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BAIXASPARCREC", Err)
            
        Case 42887
            Call Rotina_Erro(vbOKOnly, "ERRO_COBRADOR_USADO_BAIXASPARCREC", Err)
        
        Case 58641, 58642
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOCLIENTE", Err)
        
        Case 58643
            Call Rotina_Erro(vbOKOnly, "ERRO_COBRADOR_USADO_TIPOSCLIENTE", Err, objCobrador.iCodigo, iCodTipoCliente)
        
        Case 58644, 58645
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_REC", Err)
        
        Case 58646
            Call Rotina_Erro(vbOKOnly, "ERRO_COBRADOR_USADO_PARCELASREC", Err, objCobrador.iCodigo)
        
        Case 58647, 58648
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_REC_BAIXADAS", Err)
        
        Case 58649
            Call Rotina_Erro(vbOKOnly, "ERRO_COBRADOR_USADO_PARCELASREC_BAIXADA", Err, objCobrador.iCodigo)
        
        Case 58650, 58651
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TABELA", Err, "TransfCartCobr")
        
        Case 58652
            Call Rotina_Erro(vbOKOnly, "ERRO_COBRADOR_USADO_TRANSFCARTCOBR", Err, objCobrador.iCodigo)
                
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148236)
            
    End Select
    
    Call Comando_Fechar(lComando)

    Exit Function
    
End Function

Private Function CarteirasCobrador_Exclui(ByVal objCobrador As ClassCobrador) As Long
'Exclui as Carteiras do Cobrador
'Chamada por Cobrador_Exclui DENTRO DE TRANSAÇÃO.

Dim lErro As Long
Dim iIndice As Integer
Dim iCodigo As Integer
Dim iCarteira As Integer
Dim lQuantidadeAtual As Long, lQuantidadeAtualBanco As Long
Dim lComando(2) As Long

On Error GoTo Erro_CarteirasCobrador_Exclui

    'Abre comandos
    For iIndice = 0 To 1
        lComando(iIndice) = Comando_Abrir()
        If lComando(iIndice) = 0 Then Error 23584
    Next

    'obter a qtde de titulos na carteira p/ver se pode exclui-la (se for zero)
    'Seleciona as Carteira(s) a ser(em) excluida(s)
    lErro = Comando_ExecutarPos(lComando(0), "SELECT CodCarteiraCobranca, QuantidadeAtual,QuantidadeAtualBanco FROM CarteirasCobrador WHERE Cobrador =?", 0, iCodigo, lQuantidadeAtual, lQuantidadeAtualBanco, objCobrador.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 23585

    'Tenta ler
    lErro = Comando_BuscarPrimeiro(lComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 23586

    While lErro = SUCESSO

        'testar a qtde de titulos na carteira p/ver se pode exclui-la (se for zero)
        If lQuantidadeAtual <> 0 Or lQuantidadeAtualBanco <> 0 Then Error 42893
        
        lErro = Comando_Executar(lComando(1), "SELECT ParcelasRec.CarteiraCobranca FROM ParcelasRec WHERE ParcelasRec.Cobrador = ? AND ParcelasRec.CarteiraCobranca = ? UNION SELECT ParcelasRecBaixadas.CarteiraCobranca FROM ParcelasRecBaixadas WHERE ParcelasRecBaixadas.Cobrador = ? AND ParcelasRecBaixadas.CarteiraCobranca = ? ", iCarteira, objCobrador.iCodigo, iCodigo, objCobrador.iCodigo, iCodigo)
        If lErro <> AD_SQL_SUCESSO Then Error 42894
        
        lErro = Comando_BuscarPrimeiro(lComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 42895
        If lErro = AD_SQL_SUCESSO Then Error 42896
        
        'Exclui as informações CNAB bancárias da carteira
        lErro = CarteiraCobradorInfo_Exclui(objCobrador.iCodigo, iCodigo)
        If lErro <> SUCESSO Then Error 62111
        
        'Exclui Carteira
        lErro = Comando_ExecutarPos(lComando(1), "DELETE FROM CarteirasCobrador", lComando(0))
        If lErro <> AD_SQL_SUCESSO Then Error 23588

        lErro = Comando_BuscarProximo(lComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 19413

    Wend

    'Fecha os comandos
    For iIndice = 0 To 1
        lErro = Comando_Fechar(lComando(iIndice))
    Next

    CarteirasCobrador_Exclui = SUCESSO

    Exit Function

Erro_CarteirasCobrador_Exclui:

    CarteirasCobrador_Exclui = Err

    Select Case Err

        Case 23584
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 23585, 23586, 19413
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TABELA_CARTEIRASCOBRADOR1", Err)

        Case 23587, 62111 'Tratado na rotina que chama

        Case 23588
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CARTEIRASCOBRADOR", Err, iCodigo, objCobrador.iCodigo)

        Case 42893, 42896
            Call Rotina_Erro(vbOKOnly, "ERRO_CARTEIRACOBRANCA_VINCULADA_PARCELAS", Err)

        Case 42894, 42895
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELASREC", Err)
        

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148237)

    End Select

    Call Transacao_Rollback

    For iIndice = 0 To 1
        Call Comando_Fechar(lComando(iIndice))
    Next

    Exit Function

End Function

Private Function CarteirasCobrador_Grava(ByVal objCarteiraCobrador As ClassCarteiraCobrador) As Long
'Grava Carteira de cobranca no Banco de Dados
'NAO ALTERA DADOS ESTATISTICOS
'Chamada dentro de TRANSAÇÃO

Dim lComando1 As Long, lComando2 As Long, lComando3 As Long
Dim lErro As Long, sContaContabil As String, sContaDuplDescontadas As String
Dim iStatus As Integer
Dim iCodigo As Integer
Dim objPlanoConta As New ClassPlanoConta
Dim sNossoNumeroIni As String, sNossoNumeroFim As String, sNossoNumeroProx As String, iGeraNossoNumero As Integer

On Error GoTo Erro_CarteirasCobrador_Grava

    lComando1 = 0
    lComando2 = 0
    lComando3 = 0

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 23482

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 23483

    lComando3 = Comando_Abrir()
    If lComando3 = 0 Then Error 41646

    sContaContabil = String(STRING_CONTA, 0)
    sContaDuplDescontadas = String(STRING_CONTA, 0)
    sNossoNumeroFim = String(STRING_NOSSO_NUMERO, 0)
    sNossoNumeroIni = String(STRING_NOSSO_NUMERO, 0)
    sNossoNumeroProx = String(STRING_NOSSO_NUMERO, 0)
    
    'Pesquisa no Banco de Dados a Carteira em questão
    lErro = Comando_ExecutarPos(lComando1, "SELECT ContaContabil,ContaDuplDescontadas,FaixaNossoNumeroInicial,FaixaNossoNumeroFinal,FaixaNossoNumeroProx, GeraNossoNumero FROM CarteirasCobrador WHERE Cobrador = ? And CodCarteiraCobranca = ?", 0, sContaContabil, sContaDuplDescontadas, sNossoNumeroIni, sNossoNumeroFim, sNossoNumeroProx, iGeraNossoNumero, objCarteiraCobrador.iCobrador, objCarteiraCobrador.iCodCarteiraCobranca)
    If lErro <> AD_SQL_SUCESSO Then Error 23485

    'Lê os dados da Carteira, se estiver no Banco de Dados
    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 23486

    'Encontrou a carteira, então isto é uma alteração
    If lErro = AD_SQL_SUCESSO Then

        'obs.: nao atualizar dados estatisticos pois a tela pode estar defasada em relacao ao bd
        
        'se trocou alguma das ctas p/valor <> "" verificar se é uma cta valida
        If Len(Trim(objCarteiraCobrador.sContaContabil)) > 0 And objCarteiraCobrador.sContaContabil <> sContaContabil Then
            
            objPlanoConta.sConta = objCarteiraCobrador.sContaContabil
            lErro = CF("PlanoConta_Le_Conta1", objCarteiraCobrador.sContaContabil, objPlanoConta)
            If lErro <> SUCESSO And lErro <> 6030 Then Error 42906
            If lErro = 6030 Then Error 42907
        
        End If
        
        If Len(Trim(objCarteiraCobrador.sContaDuplDescontadas)) > 0 And objCarteiraCobrador.sContaDuplDescontadas <> sContaDuplDescontadas Then
            
            objPlanoConta.sConta = objCarteiraCobrador.sContaDuplDescontadas
            lErro = CF("PlanoConta_Le_Conta1", objCarteiraCobrador.sContaDuplDescontadas, objPlanoConta)
            If lErro <> SUCESSO And lErro <> 6030 Then Error 42908
            If lErro = 6030 Then Error 42909
        
        End If
        
        If objCarteiraCobrador.iGeraNossoNumero = EMPRESA_GERA_NOSSONUMERO Then
            If iGeraNossoNumero = BANCO_GERA_NOSSONUMERO Then
                objCarteiraCobrador.sFaixaNossoNumeroInicial = "1"
                objCarteiraCobrador.sFaixaNossoNumeroFinal = NUM_NOSSONUMERO_MAX
                objCarteiraCobrador.sFaixaNossoNumeroProx = "1"
            Else
                objCarteiraCobrador.sFaixaNossoNumeroInicial = sNossoNumeroIni
                objCarteiraCobrador.sFaixaNossoNumeroFinal = sNossoNumeroFim
                objCarteiraCobrador.sFaixaNossoNumeroProx = sNossoNumeroProx
            End If
        End If
                            
        'Atualiza os dados da Carteira
        lErro = Comando_ExecutarPos(lComando2, "UPDATE CarteirasCobrador SET Desativada=?, ContaContabil=?, ContaDuplDescontadas=?, DiasDeRetencao=?, TaxaCobranca=?, TaxaDesconto=? ,FaixaNossoNumeroInicial=?, FaixaNossoNumeroFinal=?, FaixaNossoNumeroProx=?, NomeNoBanco=?, CodCarteiraNoBanco=?, NumCarteiraNoBanco=?, ImprimeBoleta = ?,ComRegistro=?,GeraNossoNumero=?, FormPreImp = ?", lComando1, objCarteiraCobrador.iDesativada, objCarteiraCobrador.sContaContabil, _
        objCarteiraCobrador.sContaDuplDescontadas, objCarteiraCobrador.iDiasDeRetencao, objCarteiraCobrador.dTaxaCobranca, objCarteiraCobrador.dTaxaDesconto, objCarteiraCobrador.sFaixaNossoNumeroInicial, objCarteiraCobrador.sFaixaNossoNumeroFinal, objCarteiraCobrador.sFaixaNossoNumeroProx, objCarteiraCobrador.sNomeNoBanco, objCarteiraCobrador.sCodCarteiraNoBanco, objCarteiraCobrador.iNumCarteiraNoBanco, objCarteiraCobrador.iImprimeBoleta, objCarteiraCobrador.iComRegistro, objCarteiraCobrador.iGeraNossoNumero, objCarteiraCobrador.iFormPreImp)
        If lErro <> AD_SQL_SUCESSO Then Error 23487

    'Não encontrou a carteira, então isto é uma inserção
    Else
    
        'verificar se ctas <> "" são validas
        If Len(Trim(objCarteiraCobrador.sContaContabil)) > 0 Then
            objPlanoConta.sConta = objCarteiraCobrador.sContaContabil
            lErro = CF("PlanoConta_Le_Conta1", objCarteiraCobrador.sContaContabil, objPlanoConta)
            If lErro <> SUCESSO And lErro <> 6030 Then Error 42902
            If lErro = 6030 Then Error 42903
        
        End If
        
        If Len(Trim(objCarteiraCobrador.sContaDuplDescontadas)) > 0 Then
            objPlanoConta.sConta = objCarteiraCobrador.sContaDuplDescontadas
            lErro = CF("PlanoConta_Le_Conta1", objCarteiraCobrador.sContaDuplDescontadas, objPlanoConta)
            If lErro <> SUCESSO And lErro <> 6030 Then Error 42904
            If lErro = 6030 Then Error 42905
        
        End If
        
        lErro = CF("CarteiraDeCobranca_Lock", objCarteiraCobrador.iCodCarteiraCobranca, lComando3)
        If lErro <> SUCESSO And lErro <> 41642 Then Error 41644
        If lErro <> SUCESSO Then Error 41645
        
        If objCarteiraCobrador.iGeraNossoNumero = EMPRESA_GERA_NOSSONUMERO Then
            objCarteiraCobrador.sFaixaNossoNumeroInicial = "1"
            objCarteiraCobrador.sFaixaNossoNumeroFinal = NUM_NOSSONUMERO_MAX
            objCarteiraCobrador.sFaixaNossoNumeroProx = "1"
        End If
        
        'Insere a carteira
        lErro = Comando_Executar(lComando2, "INSERT INTO CarteirasCobrador(Cobrador,CodCarteiraCobranca,Desativada,ContaContabil,ContaDuplDescontadas,DiasDeRetencao,TaxaCobranca,TaxaDesconto,FaixaNossoNumeroInicial,FaixaNossoNumeroFinal,FaixaNossoNumeroProx,NomeNoBanco,CodCarteiraNoBanco,NumCarteiraNoBanco,QuantidadeAtual,QuantidadeAtualBanco,SaldoAtual,SaldoAtualBanco, ImprimeBoleta,ComRegistro,GeraNossoNumero, FormPreImp) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", objCarteiraCobrador.iCobrador, _
        objCarteiraCobrador.iCodCarteiraCobranca, objCarteiraCobrador.iDesativada, objCarteiraCobrador.sContaContabil, objCarteiraCobrador.sContaDuplDescontadas, objCarteiraCobrador.iDiasDeRetencao, objCarteiraCobrador.dTaxaCobranca, objCarteiraCobrador.dTaxaDesconto, objCarteiraCobrador.sFaixaNossoNumeroInicial, objCarteiraCobrador.sFaixaNossoNumeroFinal, objCarteiraCobrador.sFaixaNossoNumeroProx, objCarteiraCobrador.sNomeNoBanco, objCarteiraCobrador.sCodCarteiraNoBanco, _
        objCarteiraCobrador.iNumCarteiraNoBanco, objCarteiraCobrador.lQuantidadeAtual, objCarteiraCobrador.lQuantidadeAtualBanco, objCarteiraCobrador.dSaldoAtual, objCarteiraCobrador.dSaldoAtualBanco, objCarteiraCobrador.iImprimeBoleta, objCarteiraCobrador.iComRegistro, objCarteiraCobrador.iGeraNossoNumero, objCarteiraCobrador.iFormPreImp)

        If lErro <> AD_SQL_SUCESSO Then Error 23488

    End If

    Call Comando_Fechar(lComando3)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando1)

    CarteirasCobrador_Grava = SUCESSO

    Exit Function

Erro_CarteirasCobrador_Grava:

    CarteirasCobrador_Grava = Err

    Select Case Err

        Case 23482, 23483, 41646
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 23485, 23486
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TABELA_CARTEIRASCOBRADOR", Err, objCarteiraCobrador.iCodCarteiraCobranca)

        Case 23487
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_CARTEIRASCOBRADOR", Err, objCarteiraCobrador.iCodCarteiraCobranca)

        Case 23488
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CARTEIRASCOBRADOR", Err, objCarteiraCobrador.iCodCarteiraCobranca)
        
        Case 42902, 42904, 42906, 42908, 41644
        
        Case 42903, 42905, 42907, 42909
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTA_INEXISTENTE", Err, objPlanoConta.sConta)
        
        Case 41645
            Call Rotina_Erro(vbOKOnly, "ERRO_CARTEIRACOBRANCA_NAO_CADASTRADA", Err)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148238)

    End Select

    Call Transacao_Rollback
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)

    Exit Function

End Function

Function Cobrador_Grava(ByVal objCobrador As ClassCobrador, ByVal colCarteirasCobrador As Collection, ByVal objEndereco As ClassEndereco) As Long
'Grava o cobrador no BD

Dim alComando(0 To 5) As Long
Dim lErro As Long
Dim lTransacao As Long
Dim iCodCarteiraCobranca As Integer
Dim lCodEndereco As Long
Dim iIndice As Integer
Dim objCarteiraCobrador As New ClassCarteiraCobrador
Dim tCobrador As typeCobrador
Dim iCodigo  As Integer
Dim iCodBanco As Integer

On Error GoTo Erro_Cobrador_Grava

    'Inicializa o atributo STRING do type Cobrador
    tCobrador.sNome = String(STRING_COBRADORES_NOME, 0)

    'Abre os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 23469
    Next

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 23470

    'Procura por um Cobrador com o mesmo Nome Reduzido
    lErro = Comando_Executar(alComando(0), "SELECT Codigo FROM Cobradores WHERE Codigo <> ? AND NomeReduzido = ?", iCodigo, objCobrador.iCodigo, objCobrador.sNomeReduzido)
    If lErro <> AD_SQL_SUCESSO Then Error 23471

    'Tenta ler o código deste Cobrador
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 23472

    'Se existir outro Cobrador com o mesmo Nome Reduzido, erro
    If lErro <> AD_SQL_SEM_DADOS Then Error 23473

    'Lê o Cobrador no BD
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Codigo, Nome, Endereco, CodBanco, CodCCI FROM Cobradores WHERE Codigo = ?", 0, _
    tCobrador.iCodigo, tCobrador.sNome, tCobrador.lEndereco, tCobrador.iCodBanco, tCobrador.iCodCCI, objCobrador.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 23474

    'Tenta ler
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 23475

    'Cobrador não existe => INSERCAO

    If lErro = AD_SQL_SEM_DADOS Then

        'Grava o novo Endereco do Cobrador
        lErro = CF("Endereco_Automatico", lCodEndereco)
        If lErro <> SUCESSO Then Error 23475

        objEndereco.lCodigo = lCodEndereco
        
        lErro = CF("Endereco_Grava", objEndereco)
        If lErro <> SUCESSO Then Error 23476
        
        'Preenche ponteiro de endereço de objCobrador
        objCobrador.lEndereco = objEndereco.lCodigo

        'se for bco seleciona-lo e fazer lock shared
        If objCobrador.iCodBanco <> 0 Then
        
            lErro = CF("Banco_Lock", alComando(3), objCobrador.iCodBanco)
            If lErro <> SUCESSO And lErro <> 19384 Then Error 41631
            If lErro = 19384 Then Error 42891
                    
        End If
        
        If objCobrador.iCodCCI <> 0 Then
            
            lErro = CF("ContaCorrenteInt_Lock", objCobrador.iCodCCI, alComando(5))
            If lErro <> SUCESSO And lErro <> 41636 Then Error 41633
            If lErro <> SUCESSO Then Error 41637
        
        End If
        
        'Insere o Cobrador na tabela Cobradores
        lErro = Comando_Executar(alComando(2), "INSERT INTO Cobradores(Codigo, FilialEmpresa,Inativo, NomeReduzido, Nome, CodBanco, CobrancaEletronica, CodCCI, Endereco, Fornecedor, Filial, CNABProxSeqArqCobr) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)", objCobrador.iCodigo, objCobrador.iFilialEmpresa, objCobrador.iInativo, objCobrador.sNomeReduzido, objCobrador.sNome, objCobrador.iCodBanco, objCobrador.iCobrancaEletronica, objCobrador.iCodCCI, objCobrador.lEndereco, objCobrador.lFornecedor, objCobrador.iFilial, objCobrador.lCNABProxSeqArqCobr)
        If lErro <> AD_SQL_SUCESSO Then Error 23477
        
    Else 'Cobrador existe - ALTERACAO

        'Faz a modificação do Endereço
        objEndereco.lCodigo = tCobrador.lEndereco

        'Atualiza o endereço
        lErro = CF("Endereco_Grava", objEndereco)
        If lErro <> SUCESSO Then Error 23478
        
        'se for bco, se tiver sido alterado
        If objCobrador.iCodBanco <> 0 And objCobrador.iCodBanco <> tCobrador.iCodBanco Then
            
            'seleciona-lo e fazer lock shared
            lErro = CF("Banco_Lock", alComando(3), objCobrador.iCodBanco)
            If lErro <> SUCESSO And lErro <> 19384 Then Error 41632
            If lErro = 19384 Then Error 42900
                                
        End If

        'se houver conta corrente interna associada e esta tiver sido alterada
        If objCobrador.iCodCCI <> 0 And tCobrador.iCodCCI <> objCobrador.iCodCCI Then
            
            'seleciona-la e fazer lock shared
            lErro = CF("ContaCorrenteInt_Lock", objCobrador.iCodCCI, alComando(5))
            If lErro <> SUCESSO And lErro <> 41636 Then Error 41638
            If lErro <> SUCESSO Then Error 41639
        
        End If
        
        'Atualiza a tabela de Cobradores
        lErro = Comando_ExecutarPos(alComando(2), "UPDATE Cobradores SET Inativo= ?,  NomeReduzido = ?,Nome= ?, CodBanco= ?, CobrancaEletronica= ?, CodCCI= ?, Fornecedor = ?, Filial = ?, CNABProxSeqArqCobr = ?", alComando(1), _
        objCobrador.iInativo, objCobrador.sNomeReduzido, objCobrador.sNome, objCobrador.iCodBanco, objCobrador.iCobrancaEletronica, objCobrador.iCodCCI, objCobrador.lFornecedor, objCobrador.iFilial, objCobrador.lCNABProxSeqArqCobr)

        If lErro <> AD_SQL_SUCESSO Then Error 23479
                
    End If
        
    'Gravar Carteiras do Cobrador
    For Each objCarteiraCobrador In colCarteirasCobrador

        lErro = CarteirasCobrador_Grava(objCarteiraCobrador)
        If lErro <> SUCESSO Then Error 23580

    Next

    'Confirma a Transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 23480

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next

    Cobrador_Grava = SUCESSO

Exit Function

Erro_Cobrador_Grava:

    Cobrador_Grava = Err

    Select Case Err

        Case 23469
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 23470
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 23471, 23472, 23474, 23475
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_COBRADOR", Err, objCobrador.sNomeReduzido)

        Case 23473
            Call Rotina_Erro(vbOKOnly, "ERRO_COBRADOR_MESMO_NOMEREDUZIDO", Err, objCobrador.sNomeReduzido)

        Case 23477
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_COBRADOR", Err)

        Case 23478, 23552, 23476, 23481, 41631, 41632, 41633, 41638

        Case 23479
            Call Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_COBRADOR", Err, objCobrador.iCodigo)

        Case 23480
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case 23481, 23452, 23580

        Case 42891, 42900
            Call Rotina_Erro(vbOKOnly, "ERRO_BANCO_NAO_CADASTRADO", Err, objCobrador.iCodBanco)

        Case 41637, 41639
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTACORRENTE_INEXISTENTE", Err, objCobrador.iCodCCI)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148239)

    End Select

    Call Transacao_Rollback

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Parcela_Com_Desconto(ByVal colDesconto As colDesconto, ByVal dValorParcela As Double, ByVal dtDataDeposito As Date, ByVal dtDataVencimento As Date, dDesconto As Double) As Long
'Retorna o Valor da Parcela com o desconto mais apropriado dos descontos contidos em colDescoltos, já aplicados

Dim lErro As Long
Dim objDesconto As New ClassDesconto
Dim iDias As Integer
Dim dtDataMelhor As Date
Dim iIndice As Integer
Dim iIndice2 As Integer
Dim dtDataUtil As Date

On Error GoTo Erro_Parcela_Com_Desconto

    'Inicializa o Valor dDesconto com o valor da Parcela
    dDesconto = dValorParcela
    
    'Inicializa a data melhor de desconto com uma data nula
    dtDataMelhor = DATA_NULA
    iIndice = 0
    
    'Para cada desconto da coleção
    For Each objDesconto In colDesconto
        iIndice = iIndice + 1
        If dtDataDeposito <= objDesconto.dtData Then
            If dtDataMelhor <> DATA_NULA Then
                If objDesconto.dtData < dtDataMelhor Then
                    dtDataMelhor = objDesconto.dtData
                    iIndice2 = iIndice
                    Exit For
                End If
            Else
                dtDataMelhor = objDesconto.dtData
                iIndice2 = iIndice
            End If
            
        Else
            lErro = CF("DataVencto_Real", objDesconto.dtData, dtDataUtil)
            If lErro <> SUCESSO Then Error 19141
            
            If dtDataDeposito <= dtDataUtil Then
                If dtDataMelhor <> DATA_NULA Then
                    If dtDataUtil < dtDataMelhor Then
                        dtDataMelhor = dtDataUtil
                        iIndice2 = iIndice
                    End If
                Else
                    dtDataMelhor = dtDataUtil
                    iIndice2 = iIndice
                End If
            End If
        End If
        
    Next
    
    If dtDataMelhor <> DATA_NULA And dtDataMelhor <= dtDataVencimento Then
    
        Set objDesconto = colDesconto(iIndice2)
    
        'Verifica qual o Tipo de Desconto
        Select Case objDesconto.iCodigo
        
            'Valor fixo até a data informada
            Case VALOR_FIXO
                dDesconto = dDesconto - objDesconto.dValor
            
            'Percentual até a data informada
            Case Percentual
                dDesconto = dDesconto - (dDesconto * objDesconto.dValor)
                
            'Valor por antecipação de dia corrido
            Case VALOR_ANT_DIA
                iDias = dtDataVencimento - dtDataDeposito
                dDesconto = dDesconto - iDias * objDesconto.dValor
            
            'Percentual sobre o valor por dia corrido
            Case PERC_ANT_DIA
                iDias = dtDataVencimento - dtDataDeposito
                dDesconto = dDesconto - (dDesconto * iDias * objDesconto.dValor)
                
            'Valor por antecipação de dia útil
            Case VALOR_ANT_DIA_UTIL
                iDias = dtDataVencimento - dtDataDeposito
                If iDias > 0 Then
                    lErro = CF("Dias_Uteis", dtDataDeposito, dtDataVencimento, iDias)
                    If lErro <> SUCESSO Then Error 26212
                
                    dDesconto = dDesconto - Format(iDias * objDesconto.dValor, "0.00")
                
                End If
            
            'Percentual sobre o valor por dia útil
            Case PERC_ANT_DIA_UTIL
                iDias = dtDataVencimento - dtDataDeposito
                If iDias > 0 Then
                    lErro = CF("Dias_Uteis", dtDataDeposito, dtDataVencimento, iDias)
                    If lErro <> SUCESSO Then Error 26213
                
                    dDesconto = dDesconto - Format(dDesconto * iDias * objDesconto.dValor, "0.00")
                
                End If

        End Select
        
    End If
    
    If dDesconto <= 0 Then dDesconto = 0

    Parcela_Com_Desconto = SUCESSO

    Exit Function

Erro_Parcela_Com_Desconto:

    Parcela_Com_Desconto = Err

    Select Case Err

        Case 19141, 26212, 26213

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148240)

    End Select
            
    Exit Function
            
End Function

Private Function PagtoAntecipado_Apropria(ByVal objPagtoAntecipado As ClassAntecipPag) As Long
'Abate valor baixado do saldo de PagtoAntecipado
'ATENÇÃO: CHAMADA EM TRANSAÇÃO

'Alterada por Luiz G.F.Nogueira em 19/10/01

Dim alComando(2) As Long
Dim lErro As Long
Dim iIndice As Integer
Dim lNumMovto As Long
Dim tPagtoAntecipado As typeAntecipPag

On Error GoTo Erro_PagtoAntecipado_Apropria

    'Abre os comandos
    For iIndice = 0 To 1
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 6821
    Next

    If objPagtoAntecipado.iTipoMeioPagto = DINHEIRO Then

        'Seleciona o MovimentoContaCorrente
        lErro = Comando_Executar(alComando(0), "SELECT NumMovto FROM MovimentosContaCorrente WHERE CodConta=? AND Sequencial=? AND Excluido=?", lNumMovto, objPagtoAntecipado.iCodConta, objPagtoAntecipado.lSequencial, NAO_EXCLUIDO)
        If lErro <> AD_SQL_SUCESSO Then Error 6822

        'Lê o NumMovto do MovimentoContaCorrrente
        lErro = Comando_BuscarPrimeiro(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 6823
        If lErro = AD_SQL_SEM_DADOS Then Error 6824

    Else

        'Seleciona o MovimentoContaCorrente
        lErro = Comando_Executar(alComando(0), "SELECT NumMovto FROM MovimentosContaCorrente WHERE CodConta = ? AND TipoMeioPagto = ? AND Numero = ? AND Excluido = ? AND DataMovimento = ?", lNumMovto, objPagtoAntecipado.iCodConta, objPagtoAntecipado.iTipoMeioPagto, objPagtoAntecipado.lNumero, NAO_EXCLUIDO, objPagtoAntecipado.dtData)
        If lErro <> AD_SQL_SUCESSO Then Error 6825

        'Lê o NumMovto do MovimentoContaCorrrente
        lErro = Comando_BuscarPrimeiro(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 6826
        
        If lErro = AD_SQL_SEM_DADOS Then Error 6827

    End If

    objPagtoAntecipado.lNumMovto = lNumMovto

    'Seleciona PagtoAntecipado com Numero de Movimento lido acima
    lErro = Comando_ExecutarPos(alComando(0), "SELECT SaldoNaoApropriado, Fornecedor, Filial_Fornecedor FROM PagtosAntecipados WHERE NumMovto = ? AND Excluido = ?", 0, tPagtoAntecipado.dSaldoNaoApropriado, tPagtoAntecipado.lFornecedor, tPagtoAntecipado.iFilial, lNumMovto, NAO_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then Error 6828

    'Lê os atributos de PagtoAntecipado
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 6829
    
    'Não achou o pagamento antecipado --> erro
    If lErro = AD_SQL_SEM_DADOS Then Error 6830

    'Faz lock exclusive no PagtoAntecipado
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then Error 6831

    'Alterado por Luiz G.F.Nogueira em 19/10/01
    'No teste abaixo, a verificação do valor não apropriado para o adiantamento foi alterada para verificar se a diferença absoluta é maior que 0,009 centavos
    'Verifica se atributos de PagtoAntecipado do BD coincidem c/ os de objPagtoAntecipado
    If (Abs(tPagtoAntecipado.dSaldoNaoApropriado - objPagtoAntecipado.dSaldoNaoApropriado) > DELTA_VALORMONETARIO) _
        Or tPagtoAntecipado.lFornecedor <> objPagtoAntecipado.lFornecedor _
        Or tPagtoAntecipado.iFilial <> objPagtoAntecipado.iFilial _
        Then Error 6832

    'Atualiza o SaldoNaoApropriado de PagtoAntecipado
    lErro = Comando_ExecutarPos(alComando(1), "UPDATE PagtosAntecipados SET SaldoNaoApropriado = SaldoNaoApropriado - ?", alComando(0), objPagtoAntecipado.dValorBaixado)
    If lErro <> AD_SQL_SUCESSO Then Error 6833

    'Fecha os comandos
    For iIndice = 0 To 1
        Call Comando_Fechar(alComando(iIndice))
    Next

    PagtoAntecipado_Apropria = SUCESSO

    Exit Function

Erro_PagtoAntecipado_Apropria:

    PagtoAntecipado_Apropria = Err

    Select Case Err

        Case 6821
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 6822, 6823
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCONTACORRENTE1", Err, objPagtoAntecipado.iCodConta, objPagtoAntecipado.lSequencial)

        Case 6824
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTO_NAO_CADASTRADO2", Err, objPagtoAntecipado.iCodConta, objPagtoAntecipado.lSequencial)

        Case 6825, 6826
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCONTACORRENTE2", Err, objPagtoAntecipado.iCodConta, objPagtoAntecipado.iTipoMeioPagto, objPagtoAntecipado.lNumero)

        Case 6827
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTO_NAO_CADASTRADO1", Err, objPagtoAntecipado.iCodConta, objPagtoAntecipado.iTipoMeioPagto, objPagtoAntecipado.lNumero)

        Case 6828, 6829
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PAGTOANTECIPADO", Err, lNumMovto)

        Case 6830
            Call Rotina_Erro(vbOKOnly, "ERRO_PAGTOANTECIPADO_NAO_CADASTRADO", Err, lNumMovto)

        Case 6831
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_PAGTOSANTECIPADOS", Err, lNumMovto)

        Case 6832
            Call Rotina_Erro(vbOKOnly, "ERRO_ATRIBUTOS_PAGTOANTECIPADO_MUDARAM", Err, tPagtoAntecipado.dSaldoNaoApropriado, objPagtoAntecipado.dSaldoNaoApropriado, tPagtoAntecipado.lFornecedor, objPagtoAntecipado.lFornecedor, tPagtoAntecipado.iFilial, objPagtoAntecipado.iFilial)

        Case 6833
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_PAGTOANTECIPADO_SALDO", Err, lNumMovto)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148241)

    End Select

    'Fecha os comandos
    For iIndice = 0 To 1
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function CreditoPagar_Apropria(ByVal objCreditoPagar As ClassCreditoPagar) As Long
'Abate valor baixado de CreditoPagar
'ATENÇÃO: CHAMADA EM TRANSAÇÃO

Dim alComando(2) As Long
Dim lErro As Long
Dim iIndice As Integer, iStatus As Integer
Dim tCreditoPagar As typeCreditoPagar

On Error GoTo Erro_CreditoPagar_Apropria

    'Abre os comandos
    For iIndice = 0 To 1
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 6834
    Next

    'Seleciona CreditoPagar por Fornecedor, FilialFornecedor, SiglaDocumento, NumTitulo, DataEmissao
    lErro = Comando_ExecutarPos(alComando(0), "SELECT NumIntDoc, Saldo FROM CreditosPagForn WHERE Fornecedor=? AND Filial=? AND SiglaDocumento=? AND NumTitulo=? AND DataEmissao=? AND Status<>? AND FilialEmpresa = ?", 0, tCreditoPagar.lNumIntDoc, tCreditoPagar.dSaldo, objCreditoPagar.lFornecedor, objCreditoPagar.iFilial, objCreditoPagar.sSiglaDocumento, objCreditoPagar.lNumTitulo, objCreditoPagar.dtDataEmissao, STATUS_EXCLUIDO, giFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then Error 6835

    'Lê os atributos de CreditoPagar
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 6836
    
    'Não achou o CreditoPagar --> erro
    If lErro = AD_SQL_SEM_DADOS Then Error 6837

    'Faz lock exclusive no CreditoPagar
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then Error 6838

    objCreditoPagar.lNumIntDoc = tCreditoPagar.lNumIntDoc
    
    'Verifica se saldos de CreditoPagar no BD e na Tela coincidem
    'Alterado por Wagner
    If Abs(tCreditoPagar.dSaldo - objCreditoPagar.dSaldo) > DELTA_VALORMONETARIO Then Error 6839

    'Atualiza o Saldo de CreditoPagar, baixando o crédito se necessario
    If objCreditoPagar.dSaldo = objCreditoPagar.dValorBaixado Then
        iStatus = STATUS_BAIXADO
        lErro = Comando_ExecutarPos(alComando(1), "UPDATE CreditosPagForn SET Saldo = Saldo - ?, Status = ?", alComando(0), objCreditoPagar.dValorBaixado, iStatus)
        
        'Altera o status da nota Fiscal para Baixada caso tenha nota vinculada
        lErro = NFiscal_Altera_Status(tCreditoPagar.lNumIntDoc, CPR_CREDITO_PAGAR, iStatus)
        If lErro <> SUCESSO Then Error 61297
        
    Else
        lErro = Comando_ExecutarPos(alComando(1), "UPDATE CreditosPagForn SET Saldo = Saldo - ?", alComando(0), objCreditoPagar.dValorBaixado)
    End If
    If lErro <> AD_SQL_SUCESSO Then Error 6840

    'Fecha os comandos
    For iIndice = 0 To 1
        Call Comando_Fechar(alComando(iIndice))
    Next

    CreditoPagar_Apropria = SUCESSO

    Exit Function

Erro_CreditoPagar_Apropria:

    CreditoPagar_Apropria = Err

    Select Case Err

        Case 6834
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 6835, 6836
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CREDITOSPAGFORN1", Err, objCreditoPagar.lFornecedor, objCreditoPagar.iFilial, objCreditoPagar.sSiglaDocumento, objCreditoPagar.lNumTitulo, objCreditoPagar.dtDataEmissao)

        Case 6837
            Call Rotina_Erro(vbOKOnly, "ERRO_CREDITOPAGFORN_NAO_CADASTRADO", Err, objCreditoPagar.lFornecedor, objCreditoPagar.iFilial, objCreditoPagar.sSiglaDocumento, objCreditoPagar.lNumTitulo, objCreditoPagar.dtDataEmissao)

        Case 6838
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CREDITOPAGFORN", Err, tCreditoPagar.lNumIntDoc)

        Case 6839
            Call Rotina_Erro(vbOKOnly, "ERRO_SALDO_CREDITOPAGFORN_MUDOU", Err, tCreditoPagar.dSaldo, objCreditoPagar.dSaldo)

        Case 6840
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_CREDITOPAGFORN_SALDO", Err, tCreditoPagar.lNumIntDoc)
        
        Case 61297 'Tratado na rotina chamada
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148242)

    End Select

    'Fecha os comandos
    For iIndice = 0 To 1
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function BaixaPagar_Grava_PagtoAntecipado(ByVal colBaixaParcPagar As colBaixaParcPagar, ByVal objPagtoAntecipado As ClassAntecipPag, ByVal dtDataBaixa As Date, ByVal objContabil As ClassContabil, ByVal dtDataContabil As Date) As Long
'Insere BaixaPagar e BaixasParcelaPagar correspondentes no BD. Apropria PagtoAntecipado do valor baixado.

Dim lErro As Long
Dim lTransacao As Long
Dim objBaixaPagar As New ClassBaixaPagar

On Error GoTo Erro_BaixaPagar_Grava_PagtoAntecipado

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 6813

    'Grava a apropriação de saldo do PagtoAntecipado no BD
    lErro = PagtoAntecipado_Apropria(objPagtoAntecipado)
    If lErro Then gError 6814

    'Inicializa BaixaPagar
    objBaixaPagar.iStatus = STATUS_LANCADO
    objBaixaPagar.iMotivo = MOTIVO_PAGTO_ANTECIPADO
    objBaixaPagar.dtData = dtDataBaixa
    objBaixaPagar.dtDataContabil = IIf(dtDataContabil = DATA_NULA, gdtDataAtual, dtDataContabil)
    objBaixaPagar.dtDataRegistro = gdtDataHoje
    objBaixaPagar.lNumMovConta = objPagtoAntecipado.lNumMovto

    'Grava BaixaPagar e BaixasPagarParcela associadas
    lErro = CF("BaixaPagar_Grava", objBaixaPagar, colBaixaParcPagar, objContabil, objPagtoAntecipado.lFornecedor, objPagtoAntecipado.iFilial)
    If lErro <> SUCESSO Then gError 6815

    'Confirma a Transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 6816

    BaixaPagar_Grava_PagtoAntecipado = SUCESSO

    Exit Function

Erro_BaixaPagar_Grava_PagtoAntecipado:

    BaixaPagar_Grava_PagtoAntecipado = gErr

    Select Case gErr

        Case 6813
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 6814, 6815 'Já tratados

        Case 6816
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148243)

    End Select
    
    Call Transacao_Rollback

    Exit Function

End Function

Function BaixaPagar_Grava_CreditoPagar(ByVal dtDataBaixa As Date, ByVal colBaixaParcPagar As colBaixaParcPagar, ByVal objCreditoPagar As ClassCreditoPagar, ByVal objContabil As ClassContabil, ByVal dtDataContabil As Date) As Long
'Insere BaixaPagar e BaixasParcelaPagar correspondentes no BD. Apropria CreditoPagar do valor baixado.

Dim lErro As Long
Dim lTransacao As Long
Dim objBaixaPagar As New ClassBaixaPagar

On Error GoTo Erro_BaixaPagar_Grava_CreditoPagar

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 6817

    'Grava a apropriação de saldo do CreditoPagar no BD
    lErro = CreditoPagar_Apropria(objCreditoPagar)
    If lErro Then gError 6818

    'Inicializa BaixaPagar
    objBaixaPagar.iStatus = STATUS_LANCADO
    objBaixaPagar.iMotivo = MOTIVO_CREDITO_FORNECEDOR
    objBaixaPagar.dtData = dtDataBaixa
    objBaixaPagar.dtDataContabil = IIf(dtDataContabil = DATA_NULA, gdtDataAtual, dtDataContabil)
    objBaixaPagar.dtDataRegistro = gdtDataHoje
    objBaixaPagar.lNumIntDoc = objCreditoPagar.lNumIntDoc

    'Grava BaixaPagar e BaixasPagarParcela associadas
    lErro = CF("BaixaPagar_Grava", objBaixaPagar, colBaixaParcPagar, objContabil, objCreditoPagar.lFornecedor, objCreditoPagar.iFilial)
    If lErro <> SUCESSO Then gError 6819

    'Confirma a Transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 6820

    BaixaPagar_Grava_CreditoPagar = SUCESSO

    Exit Function

Erro_BaixaPagar_Grava_CreditoPagar:

    BaixaPagar_Grava_CreditoPagar = gErr

    Select Case gErr

        Case 6817
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 6818, 6819 'Já tratados

        Case 6820
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148244)

    End Select
    
    Call Transacao_Rollback

    Exit Function

End Function

Private Function RecebAntecipado_Apropria(ByVal objRecebAntecipado As ClassAntecipReceb) As Long
'Apropria valor baixado de RecebAntecipado
'ATENÇÃO: CHAMADA EM TRANSAÇÃO

Dim alComando(2) As Long
Dim lErro As Long
Dim iIndice As Integer
Dim lNumMovto As Long
Dim tRecebAntecipado As typeAntecipRec

On Error GoTo Erro_RecebAntecipado_Apropria

    'Abre os comandos
    For iIndice = 0 To 1
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 29066
    Next

    'Seleciona o MovimentoContaCorrente
    lErro = Comando_Executar(alComando(0), "SELECT NumMovto FROM MovimentosContaCorrente WHERE CodConta=? AND Sequencial=? AND Excluido=?", lNumMovto, objRecebAntecipado.iCodConta, objRecebAntecipado.lSequencial, NAO_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then Error 29067

    'Lê o NumMovto do MovimentoContaCorrrente
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 29068
    
    'Não achou o número do movimento --> erro
    If lErro = AD_SQL_SEM_DADOS Then Error 29069

    'Seleciona RecebAntecipado com Número de Movimento lido acima
    lErro = Comando_ExecutarPos(alComando(0), "SELECT SaldoNaoApropriado, Cliente, Filial_Cliente FROM RecebAntecipados WHERE NumMovto=? AND Excluido=?", 0, tRecebAntecipado.dSaldoNaoApropriado, tRecebAntecipado.lCliente, tRecebAntecipado.iFilial_Cliente, lNumMovto, NAO_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then Error 29073

    'Lê os atributos de RecebAntecipado
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 29074
    
    'Não acchou o Recebimento Antecipado --> erro
    If lErro = AD_SQL_SEM_DADOS Then Error 29075

    'Faz lock exclusive no RecebAntecipado
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then Error 29076

    'Verifica se atributos de RecebAntecipado do BD coincidem c/ os de objRecebAntecipado
    If tRecebAntecipado.dSaldoNaoApropriado <> objRecebAntecipado.dSaldoNaoApropriado Or tRecebAntecipado.lCliente <> objRecebAntecipado.lCliente Or tRecebAntecipado.iFilial_Cliente <> objRecebAntecipado.iFilial Then Error 29077

    objRecebAntecipado.lNumMovto = lNumMovto

    'Atualiza o SaldoNaoApropriado de RecebAntecipado
    lErro = Comando_ExecutarPos(alComando(1), "UPDATE RecebAntecipados SET SaldoNaoApropriado=SaldoNaoApropriado - ?", alComando(0), objRecebAntecipado.dValorBaixado)
    If lErro <> AD_SQL_SUCESSO Then Error 29078

    'Fecha os comandos
    For iIndice = 0 To 1
        Call Comando_Fechar(alComando(iIndice))
    Next

    RecebAntecipado_Apropria = SUCESSO

    Exit Function

Erro_RecebAntecipado_Apropria:

    RecebAntecipado_Apropria = Err

    Select Case Err

        Case 29066
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 29067, 29068
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCONTACORRENTE1", Err, objRecebAntecipado.iCodConta, objRecebAntecipado.lSequencial)

        Case 29069
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTO_NAO_CADASTRADO2", Err, objRecebAntecipado.iCodConta, objRecebAntecipado.lSequencial)

        Case 29073, 29074
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RECEB_ANTEC", Err, lNumMovto)

        Case 29075
            Call Rotina_Erro(vbOKOnly, "ERRO_RECEBANTECIPADO_NAO_CADASTRADO", Err, lNumMovto)

        Case 29076
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_ANTECIPREC", Err, lNumMovto)

        Case 29077
            Call Rotina_Erro(vbOKOnly, "ERRO_ATRIBUTOS_RECEBANTECIPADO_MUDARAM", Err, tRecebAntecipado.dSaldoNaoApropriado, objRecebAntecipado.dSaldoNaoApropriado, tRecebAntecipado.lCliente, objRecebAntecipado.lCliente, tRecebAntecipado.iFilial_Cliente, objRecebAntecipado.iFilial)

        Case 29078
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_RECEBANTECIPADO_SALDO", Err, lNumMovto)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148245)

    End Select

    'Fecha os comandos
    For iIndice = 0 To 1
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function BaixaRec_Grava_DebitoReceber(ByVal colBaixaParcReceber As colBaixaParcRec, ByVal objDebitos As ClassDebitoRecCli, ByVal dtDataBaixa As Date, ByVal objContabil As ClassContabil, ByVal dtDataContabil As Date, ByVal lCliente As Long, ByVal iFilialCli As Integer) As Long
'Insere BaixaReceber e BaixasParcelaReceber correspondentes no BD. Apropria DebitoReceber do valor baixado.

Dim lErro As Long
Dim lTransacao As Long
Dim objBaixaReceber As New ClassBaixaReceber

On Error GoTo Erro_BaixaRec_Grava_DebitoReceber

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 29120

    'Grava a apropriação de saldo do DebitoReceber no BD
    lErro = CF("DebitoRecCli_AlterarSaldo", objDebitos, -objDebitos.dValorBaixado)
    If lErro <> SUCESSO Then Error 29121

    'Inicializa BaixaReceber
    objBaixaReceber.iStatus = STATUS_LANCADO
    objBaixaReceber.iMotivo = MOTIVO_DEBITO_CLIENTE
    objBaixaReceber.dtData = dtDataBaixa
    objBaixaReceber.dtDataContabil = IIf(dtDataContabil = DATA_NULA, gdtDataAtual, dtDataContabil)
    objBaixaReceber.dtDataRegistro = gdtDataHoje
    objBaixaReceber.lNumIntDoc = objDebitos.lNumIntDoc

    'Grava BaixaReceber e BaixasReceberParcela associadas
    lErro = BaixaReceber_Grava(objBaixaReceber, colBaixaParcReceber, objContabil, lCliente, iFilialCli)
    If lErro <> SUCESSO Then Error 29122

    'Confirma a Transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 29123

    BaixaRec_Grava_DebitoReceber = SUCESSO

    Exit Function

Erro_BaixaRec_Grava_DebitoReceber:

    BaixaRec_Grava_DebitoReceber = Err

    Select Case Err

        Case 29120
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 29121, 29122

        Case 29123
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148246)

    End Select
    
    Call Transacao_Rollback

    Exit Function

End Function

Function BaixaRec_Grava_Recebimento(ByVal colBaixaParcReceber As colBaixaParcRec, ByVal objMovCtaCorrente As ClassMovContaCorrente, ByVal objContabil As ClassContabil, ByVal lCliente As Long, ByVal iFilialCli As Integer) As Long
'faz uma baixa de titulo a receber "avulsa" correspondente a um recebimento em cheque ou dinheiro

Dim lTransacao As Long
Dim lErro As Long
Dim objBaixaReceber As New ClassBaixaReceber

On Error GoTo Erro_BaixaRec_Grava_Recebimento

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 29156
    
    'Insere BaixaReceber e BaixasParRec correspondentes no BD
    lErro = CF("BaixaRec_Grava_Recebimento_Trans", colBaixaParcReceber, objMovCtaCorrente, objContabil, lCliente, iFilialCli)
    If lErro <> SUCESSO Then gError 183027
        
    'Confirma a Transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 29158
        
    BaixaRec_Grava_Recebimento = SUCESSO

    Exit Function

Erro_BaixaRec_Grava_Recebimento:

    BaixaRec_Grava_Recebimento = gErr

    Select Case gErr

        Case 29156
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 29158
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case 183027
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 183028)

    End Select
    
    Call Transacao_Rollback

    Exit Function
            
End Function

Function BaixaRec_Grava_Perda(ByVal colBaixaParcReceber As colBaixaParcRec, ByVal dtDataBaixa As Date, ByVal objContabil As ClassContabil, ByVal sHistorico As String, ByVal dtDataContabil As Date, ByVal lCliente As Long, ByVal iFilialCli As Integer) As Long
'Insere BaixaReceber e BaixasParcelaReceber correspondentes no BD.

Dim colBaixaParcRec As New colBaixaParcRec
Dim objBaixaReceber As New ClassBaixaReceber
Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_BaixaRec_Grava_Perda

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 29177

    lErro = CF("BaixaRec_Grava_Perda_Trans", colBaixaParcReceber, dtDataBaixa, objContabil, sHistorico, dtDataContabil, lCliente, iFilialCli)
    If lErro <> SUCESSO Then gError 183134

    'Confirma a Transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 29179

    BaixaRec_Grava_Perda = SUCESSO

    Exit Function

Erro_BaixaRec_Grava_Perda:

    BaixaRec_Grava_Perda = gErr

    Select Case gErr

        Case 29177
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 29179
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case 183134

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148248)

    End Select
    
    Call Transacao_Rollback

    Exit Function

End Function

Function BaixaRec_Grava_RecebAntecipado(ByVal colBaixaParcReceber As colBaixaParcRec, ByVal objRecebAntecipado As ClassAntecipReceb, ByVal dtDataBaixa As Date, ByVal objContabil As ClassContabil, ByVal dtDataContabil As Date, ByVal lCliente As Long, ByVal iFilialCli As Integer) As Long
'Insere BaixaReceber e BaixasParcelaRec correspondentes no BD. Apropria RecebAntecipado do valor baixado.

Dim colBaixaParcRec As New colBaixaParcRec
Dim lErro As Long
Dim lTransacao As Long
Dim objBaixaReceber As New ClassBaixaReceber

On Error GoTo Erro_BaixaRec_Grava_RecebAntecipado

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 29062

    Set colBaixaParcRec = colBaixaParcReceber
    
    'Grava a apropriação de saldo do RecebAntecipado no BD
    lErro = RecebAntecipado_Apropria(objRecebAntecipado)
    If lErro Then Error 29063

    'Inicializa BaixaReceber
    objBaixaReceber.iStatus = STATUS_LANCADO
    objBaixaReceber.iMotivo = MOTIVO_RECEBTO_ANTECIPADO
    objBaixaReceber.dtData = dtDataBaixa
    objBaixaReceber.dtDataContabil = IIf(dtDataContabil = DATA_NULA, gdtDataAtual, dtDataContabil)
    objBaixaReceber.dtDataRegistro = gdtDataHoje
    objBaixaReceber.lNumMovCta = objRecebAntecipado.lNumMovto

    'Grava BaixaReceber e BaixasRecebParcela associadas
    lErro = BaixaReceber_Grava(objBaixaReceber, colBaixaParcRec, objContabil, lCliente, iFilialCli)
    If lErro <> SUCESSO Then Error 29064

    Set colBaixaParcReceber = colBaixaParcRec
    
    'Confirma a Transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 29065

    BaixaRec_Grava_RecebAntecipado = SUCESSO

    Exit Function

Erro_BaixaRec_Grava_RecebAntecipado:

    BaixaRec_Grava_RecebAntecipado = Err

    Select Case Err

        Case 29062
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 29063, 29064

        Case 29065
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148249)

    End Select
        
    Call Transacao_Rollback

    Exit Function

End Function

Private Function BaixaParcRec_DesfazContabilizacao(ByVal lNumIntBaixaParcRec As Long) As Long
'desfaz a contabilizacao (exclui lancamentos pendentes ou estorna lancamentos atualizados)

Dim lErro As Long, objContabil As ClassContabil, objTela As Object

On Error GoTo Erro_BaixaParcRec_DesfazContabilizacao

    If gcolModulo.Ativo(MODULO_CONTABILIDADE) = MODULO_ATIVO Then
        
        Set objContabil = New ClassContabil
        
        lErro = objContabil.Contabil_DesfazContabilizacao1(GRUPOTRANSEXC_BAIXAPARCREC, lNumIntBaixaParcRec, gdtDataAtual)
        If lErro <> SUCESSO Then Error 32224
    
    End If
    
    BaixaParcRec_DesfazContabilizacao = SUCESSO
     
    Exit Function
    
Erro_BaixaParcRec_DesfazContabilizacao:

    BaixaParcRec_DesfazContabilizacao = Err
     
    Select Case Err
           
        Case 32224
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148250)
     
    End Select
     
    Exit Function

End Function

Private Function BaixaParcRec_Exclui(ByVal lNumIntParc As Long, ByVal iSequencial As Integer, dValorPago As Double, lNumIntBaixa As Long, lNumIntDocBaixaParc As Long) As Long
'Exclui (logicamente) a BaixasParcRec identificada por lNumIntParc e iSequencial
'Retorna em dValorPago o valorbaixado+multa+juros-desconto

Dim lErro As Long, iStatus As Integer, dValorBaixado As Double
Dim dValorMulta As Double, dValorJuros As Double, dValorDesconto As Double
Dim lComandoSel As Long, lComandoMod As Long, lNumIntDoc As Long

On Error GoTo Erro_BaixaParcRec_Exclui

    lComandoSel = Comando_Abrir()
    If lComandoSel = 0 Then Error 22478

    lComandoMod = Comando_Abrir()
    If lComandoMod = 0 Then Error 22479

    lErro = Comando_ExecutarPos(lComandoSel, "SELECT NumIntDoc, Status, ValorBaixado, ValorMulta, ValorJuros, ValorDesconto, NumIntBaixa FROM BaixasParcRec WHERE NumIntParcela = ? AND Sequencial = ?", 0, lNumIntDoc, iStatus, dValorBaixado, dValorMulta, dValorJuros, dValorDesconto, lNumIntBaixa, lNumIntParc, iSequencial)
    If lErro <> AD_SQL_SUCESSO Then Error 22480

    lErro = Comando_BuscarProximo(lComandoSel)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 22481

    If lErro <> AD_SQL_SUCESSO Then Error 22482

    lErro = Comando_LockExclusive(lComandoSel)
    If lErro <> AD_SQL_SUCESSO Then Error 22483

    If iStatus <> STATUS_LANCADO Then Error 22484

    lNumIntDocBaixaParc = lNumIntDoc
    
    dValorPago = dValorBaixado + dValorMulta + dValorJuros - dValorDesconto

    lErro = ParcelaRec_CancelarBaixa(lNumIntParc, dValorBaixado)
    If lErro <> SUCESSO Then Error 22485

    lErro = Comando_ExecutarPos(lComandoMod, "UPDATE BaixasParcRec SET Status = ?, DataCancelamento = ?, DataRegCancelamento = ?, HoraRegCancelamento = ?", lComandoSel, STATUS_EXCLUIDO, gdtDataAtual, gdtDataHoje, CDbl(Time))
    If lErro <> AD_SQL_SUCESSO Then Error 22486

    'desfaz a contabilizacao (exclui lancamentos pendentes ou estorna lancamentos atualizados)
    lErro = BaixaParcRec_DesfazContabilizacao(lNumIntDoc)
    If lErro <> SUCESSO Then Error 32225
        
    lErro = Comando_Unlock(lComandoSel)
    If lErro <> AD_SQL_SUCESSO Then Error 22487

    Call Comando_Fechar(lComandoSel)
    Call Comando_Fechar(lComandoMod)

    BaixaParcRec_Exclui = SUCESSO

    Exit Function

Erro_BaixaParcRec_Exclui:

    BaixaParcRec_Exclui = Err

    Select Case Err

        Case 22484
            Call Rotina_Erro(vbOKOnly, "ERRO_BAIXAPARCREC_EXCLUIDA", Err)

        Case 22482
            Call Rotina_Erro(vbOKOnly, "ERRO_BAIXAPARCREC_INEXISTENTE", Err)

        Case 22485, 32225

        Case 22478, 22479
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 22480, 22481
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BAIXAPARCREC", Err)

        Case 22483
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_BAIXAPARCREC", Err)

        Case 22486
            Call Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_BAIXAPARCREC", Err)

        Case 22487
            Call Rotina_Erro(vbOKOnly, "ERRO_UNLOCK_BAIXAPARCREC", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148251)

    End Select

    Call Comando_Fechar(lComandoSel)
    Call Comando_Fechar(lComandoMod)

    Exit Function

End Function

Private Function BaixaRec_Exclui(ByVal lNumIntBaixa As Long) As Long
'Exclui a baixa de um título a receber identificada por lNumIntBaixa

Dim lErro As Long, iStatus As Integer, lNumIntDoc As Long, iCodConta As Integer, lSequencial As Long
Dim lComandoSel As Long, lComandoMod As Long, lComando As Long, lNumMovCta As Long, lComandoMov As Long, iConciliado As Integer

On Error GoTo Erro_BaixaRec_Exclui

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 56602
    
    lComandoSel = Comando_Abrir()
    If lComandoSel = 0 Then Error 22489

    lComandoMod = Comando_Abrir()
    If lComandoMod = 0 Then Error 22490

    lComandoMov = Comando_Abrir()
    If lComandoMov = 0 Then Error 22490

    'Lê a tabela de BaixasRec
    lErro = Comando_ExecutarPos(lComandoSel, "SELECT NumMovCta, Status FROM BaixasRec WHERE NumIntBaixa = ?", 0, lNumMovCta, iStatus, lNumIntBaixa)
    If lErro <> AD_SQL_SUCESSO Then Error 22491

    lErro = Comando_BuscarPrimeiro(lComandoSel)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 22492

    'Se a baixa não está cadastrada
    If lErro = AD_SQL_SEM_DADOS Then Error 22493

    lErro = Comando_LockExclusive(lComandoSel)
    If lErro <> AD_SQL_SUCESSO Then Error 56603

    If iStatus = STATUS_EXCLUIDO Then Error 22494

    'verifica se está ligada a um movto de conta corrente conciliado
    If lNumMovCta <> 0 Then
    
        lErro = Comando_Executar(lComandoMov, "SELECT Conciliado, CodConta, Sequencial FROM MovimentosContaCorrente WHERE NumMovto = ?", iConciliado, iCodConta, lSequencial, lNumMovCta)
        If lErro <> AD_SQL_SUCESSO Then Error 7927
    
        lErro = Comando_BuscarProximo(lComandoMov)
        If lErro <> AD_SQL_SUCESSO Then Error 7928
        
        If iConciliado <> NAO_CONCILIADO Then Error 8000
    
    End If
    
    'verifica se há alguma baixa de parcela que ainda nao foi excluida
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc FROM BaixasParcRec WHERE NumIntBaixa = ? AND Status <> ?", lNumIntDoc, lNumIntBaixa, STATUS_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then Error 56604
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 56605
    If lErro = AD_SQL_SUCESSO Then Error 56606

    'Exclui a baixa como um todo
    lErro = Comando_ExecutarPos(lComandoMod, "UPDATE BaixasRec SET Status = ?", lComandoSel, STATUS_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then Error 22495

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComandoSel)
    Call Comando_Fechar(lComandoMod)
    Call Comando_Fechar(lComandoMov)

    BaixaRec_Exclui = SUCESSO

    Exit Function

Erro_BaixaRec_Exclui:

    BaixaRec_Exclui = Err

    Select Case Err

        Case 22489, 22490, 56602
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 22491, 22492
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BAIXAREC", Err)

        Case 56603
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_BAIXAREC", Err)
        
        Case 56604, 56605
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BAIXAPARCREC", Err)
        
        Case 56606 'há alguma baixaparc nao excluida
        
        Case 22494
            Call Rotina_Erro(vbOKOnly, "ERRO_BAIXAREC_EXCLUIDA", Err)

        Case 22495
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_BAIXAREC", Err)

        Case 22493
            Call Rotina_Erro(vbOKOnly, "ERRO_BAIXAREC_INEXISTENTE", Err)

        Case 8000
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVCONTACORRENTE_CONCILIADO", Err, iCodConta, lSequencial)
                
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148252)

    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComandoSel)
    Call Comando_Fechar(lComandoMod)
    Call Comando_Fechar(lComandoMov)

    Exit Function

End Function

Private Function ParcelaRec_CancelarBaixaTitNaoBaixado(ByVal lNumIntParc As Long, ByVal dValorBaixado As Double, Optional ByVal iTipoCancelamento As Integer) As Long
'desfaz o efeito de uma baixa sobre uma parcela associada a um titulo nao baixado

Dim i As Integer, lErro As Long, dSaldoAnteriorParc As Double, dValorParc As Double, iStatus As Integer, lNumIntTitulo As Long
Dim alComando(1 To 6) As Long, iCobrador As Integer, iCarteiraCobranca As Integer, dValorTit As Double
Dim objCarteiraCobrador As New ClassCarteiraCobrador, dNovoSaldoParc As Double, dNovoSaldoTit As Double, dSaldoAnteriorTit As Double
Dim dValorIRRF As Double, dValorINSSRet As Double, iINSSRetido As Integer
Dim objParcelaRec As New ClassParcelaReceber
Dim dPISRetido As Double, dISSRetido As Double, dCOFINSRetido As Double, dCSLLRetido As Double

On Error GoTo Erro_ParcelaRec_CancelarBaixaTitNaoBaixado

    For i = LBound(alComando) To UBound(alComando)
        alComando(i) = Comando_Abrir()
        If alComando(i) = 0 Then Error 46274
    Next

    'Seleciona a parcela
    lErro = Comando_ExecutarPos(alComando(1), "SELECT NumIntTitulo, Saldo, Valor, Status, Cobrador, CarteiraCobranca FROM ParcelasRec WHERE NumIntDoc = ?", 0, lNumIntTitulo, dSaldoAnteriorParc, dValorParc, iStatus, iCobrador, iCarteiraCobranca, lNumIntParc)
    If lErro <> AD_SQL_SUCESSO Then Error 46275

    lErro = Comando_BuscarProximo(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 46276

    'nao encontrou a parcela
    If lErro <> AD_SQL_SUCESSO Then Error 46277

    lErro = Comando_LockExclusive(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then Error 46278

    dNovoSaldoParc = dSaldoAnteriorParc + dValorBaixado
    If dNovoSaldoParc > (dValorParc + 0.01) Then Error 46279
    If dNovoSaldoParc > dValorParc Then dNovoSaldoParc = dValorParc

    'atualizar saldo da carteira de cobranca
    objCarteiraCobrador.iCobrador = iCobrador
    objCarteiraCobrador.iCodCarteiraCobranca = iCarteiraCobranca
    lErro = CF("CarteiraCobrador_AtualizaSaldo", objCarteiraCobrador, IIf(iStatus = STATUS_BAIXADO, 1, 0), dValorBaixado)
    If lErro <> SUCESSO Then Error 56627
    
    If iStatus = STATUS_BAIXADO Then iStatus = STATUS_ABERTO

    '##############################################################
    'Alterado por Wagner 16/01/2007
    If iTipoCancelamento = TIPOCONCELAMENTO_DEVCHQ Then
        objParcelaRec.iCarteiraCobranca = CARTEIRA_CHEQUEPRE
    Else
        objParcelaRec.iCarteiraCobranca = iCarteiraCobranca
    End If
    '##############################################################
    
    'Alterar atributos da parcela
    lErro = Comando_ExecutarPos(alComando(2), "UPDATE ParcelasRec SET Saldo = ?, Status = ?, CarteiraCobranca = ?", alComando(1), dNovoSaldoParc, iStatus, objParcelaRec.iCarteiraCobranca)
    If lErro <> AD_SQL_SUCESSO Then Error 46280

    'Selecionar o titulo
    lErro = Comando_ExecutarPos(alComando(3), "SELECT Status, Saldo, Valor, ValorIRRF, ValorINSS, INSSRetido, PISRetido, ISSRetido, COFINSRetido, CSLLRetido FROM TitulosRec WHERE NumIntDoc = ?", 0, iStatus, dSaldoAnteriorTit, dValorTit, dValorIRRF, dValorINSSRet, iINSSRetido, dPISRetido, dISSRetido, dCOFINSRetido, dCSLLRetido, lNumIntTitulo)
    If lErro <> AD_SQL_SUCESSO Then Error 46281

    lErro = Comando_BuscarProximo(alComando(3))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 46282

    'nao encontrou o titulo
    If lErro <> AD_SQL_SUCESSO Then Error 46283

    dNovoSaldoTit = dSaldoAnteriorTit + dValorBaixado
    If dNovoSaldoTit > (dValorTit - (dValorIRRF + dPISRetido + dISSRetido + dCOFINSRetido + dCSLLRetido) - IIf(iINSSRetido = 1, dValorINSSRet, 0) + 0.01) Then Error 59062
    If dNovoSaldoTit > dValorTit Then dNovoSaldoTit = dValorTit - (dValorIRRF + dPISRetido + dISSRetido + dCOFINSRetido + dCSLLRetido) - IIf(iINSSRetido = 1, dValorINSSRet, 0)

    'alterar saldo do titulo
    lErro = Comando_ExecutarPos(alComando(4), "UPDATE TitulosRec SET Saldo = ?", alComando(3), dNovoSaldoTit)
    If lErro <> AD_SQL_SUCESSO Then Error 46284

    lErro = Comando_Unlock(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then Error 46285

    'retornar as comissoes associadas à baixa da parcela de liberadas para pendentes
    objParcelaRec.lNumIntDoc = lNumIntParc
    lErro = ParcelaRec_CancelaLiberacaoComissoes(objParcelaRec, alComando(5), alComando(6))
    If lErro <> SUCESSO Then Error 56628
    
    For i = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(i))
    Next

    ParcelaRec_CancelarBaixaTitNaoBaixado = SUCESSO

    Exit Function

Erro_ParcelaRec_CancelarBaixaTitNaoBaixado:

    ParcelaRec_CancelarBaixaTitNaoBaixado = Err

    Select Case Err

        Case 46274
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 46275, 46276
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_REC", Err)

        Case 46277, 56627, 56628

        Case 46278
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_PARCELAS_REC", Err)

        Case 46279
            Call Rotina_Erro(vbOKOnly, "ERRO_SALDO_PARCELA_MAIOR_QUE_VALOR", Err)

        Case 46280
            Call Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_PARCELAS_REC", Err)

        Case 46281, 46282
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TITULOS_REC", Err)

        Case 46283
            Call Rotina_Erro(vbOKOnly, "ERRO_TITULO_REC_INEXISTENTE", Err)

        Case 46284, 59062
            Call Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_TITULOS_REC", Err)

        Case 46285
            Call Rotina_Erro(vbOKOnly, "ERRO_UNLOCK_PARCELAS_REC", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148253)

    End Select

    For i = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(i))
    Next

    Exit Function

End Function

Private Function ParcelaRec_CancelarBaixaTitBaixado(ByVal lNumIntParc As Long, ByVal dValorBaixado As Double, Optional ByVal iTipoCancelamento As Integer) As Long
'desfaz o efeito de uma baixa sobre uma parcela associada a um titulo baixado

Dim i As Integer, lErro As Long, dSaldoAnterior As Double, dValor As Double, iStatus As Integer, lNumIntTitulo As Long
Dim objParcelaRec As New ClassParcelaReceber, objTituloReceber As New ClassTituloReceber
Dim alComando(1 To 11) As Long, objCarteiraCobrador As New ClassCarteiraCobrador, dNovoSaldo As Double

On Error GoTo Erro_ParcelaRec_CancelarBaixaTitBaixado

    For i = LBound(alComando) To UBound(alComando)
        alComando(i) = Comando_Abrir()
        If alComando(i) = 0 Then Error 46293
    Next

    'ler a parcela com a baixa cancelada
    objParcelaRec.lNumIntDoc = lNumIntParc
    lErro = CF("ParcelaRecBaixada_LeMod", objParcelaRec, alComando(1))
    If lErro <> SUCESSO Then Error 46286

    'bloquear a parcela com a baixa cancelada
    lErro = Comando_LockExclusive(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then Error 46294

    lNumIntTitulo = objParcelaRec.lNumIntTitulo

    'ler o titulo associado a parcela
    objTituloReceber.lNumIntDoc = lNumIntTitulo
    lErro = CF("TituloRecBaixado_LeMod", objTituloReceber, alComando(2))
    If lErro <> SUCESSO Then Error 46287

    'bloquear o titulo associado a parcela
    lErro = Comando_LockExclusive(alComando(2))
    If lErro <> AD_SQL_SUCESSO Then Error 46295

    'fazer alteracoes no titulo
    dNovoSaldo = dValorBaixado
    If dNovoSaldo > objParcelaRec.dValor + 0.01 Then Error 46296
    If dNovoSaldo > objParcelaRec.dValor Then dNovoSaldo = objParcelaRec.dValor
    objTituloReceber.dSaldo = dNovoSaldo
    objTituloReceber.iStatus = STATUS_LANCADO

    'inclui-lo em TitulosRec
    lErro = TitulosRec_Inserir(objTituloReceber, alComando(3))
    If lErro <> SUCESSO Then Error 46288

    'fazer alteracoes na parcela
    objParcelaRec.dSaldo = dNovoSaldo
    If objParcelaRec.iStatus = STATUS_BAIXADO Then objParcelaRec.iStatus = STATUS_ABERTO

    'jogar a parcela p/"em carteira"
    
    objCarteiraCobrador.iCobrador = COBRADOR_PROPRIA_EMPRESA
    '##############################################################
    'Alterado por Wagner 16/01/2007
    If iTipoCancelamento = TIPOCONCELAMENTO_DEVCHQ Then
        objParcelaRec.iCarteiraCobranca = CARTEIRA_CHEQUEPRE
        objCarteiraCobrador.iCodCarteiraCobranca = CARTEIRA_CHEQUEPRE
    Else
        objParcelaRec.iCarteiraCobranca = CARTEIRA_CARTEIRA
        objCarteiraCobrador.iCodCarteiraCobranca = CARTEIRA_CARTEIRA
    End If
    '##############################################################

    lErro = CF("CarteiraCobrador_AtualizaSaldo", objCarteiraCobrador, 1, objParcelaRec.dSaldo)
    If lErro <> SUCESSO Then Error 56626
    
    objParcelaRec.iCobrador = COBRADOR_PROPRIA_EMPRESA
        
    'inclui-la em ParcelasRec
    lErro = CF("ParcelasRec_Inserir", objParcelaRec, alComando(4))
    If lErro <> SUCESSO Then Error 46289

    'exclui-la de ParcelasRecBaixadas
    lErro = ParcelaRecBaixada_Excluir(objParcelaRec, alComando(1), alComando(5))
    If lErro <> SUCESSO Then Error 46290

    'retornar as comissoes associadas à baixa da parcela de liberadas para pendentes
    lErro = ParcelaRec_CancelaLiberacaoComissoes(objParcelaRec, alComando(10), alComando(11))
    If lErro <> SUCESSO Then Error 56628
    
    'se o titulo tem outras parcelas
    If objTituloReceber.iNumParcelas <> 1 Then
        'transferir as outras parcelas de ParcelasRecBaixadas para ParcelasRec
        lErro = TituloRec_MoverOutrasParc(lNumIntTitulo, alComando(7), alComando(8), alComando(9))
        If lErro <> SUCESSO Then Error 46291
    End If

    'excluir o titulo de TitulosRecBaixados
    lErro = TituloRecBaixado_Excluir(objTituloReceber, alComando(2), alComando(6))
    If lErro <> SUCESSO Then Error 46292

    'desbloquear a parcela
    lErro = Comando_Unlock(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then Error 46297

    'desbloquear o titulo
    lErro = Comando_Unlock(alComando(2))
    If lErro <> AD_SQL_SUCESSO Then Error 46298

    For i = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(i))
    Next

    ParcelaRec_CancelarBaixaTitBaixado = SUCESSO

    Exit Function

Erro_ParcelaRec_CancelarBaixaTitBaixado:

    ParcelaRec_CancelarBaixaTitBaixado = Err

    Select Case Err

        Case 46286, 46287, 46288, 46289, 46290, 46291, 46292, 56626, 56628

        Case 46293
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 46294
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_PARCELAS_REC_BAIXADAS", Err)

        Case 46295
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_TITULOS_REC_BAIXADOS", Err)

        Case 46296
            Call Rotina_Erro(vbOKOnly, "ERRO_SALDO_PARCELA_MAIOR_QUE_VALOR", Err)

        Case 46297
            Call Rotina_Erro(vbOKOnly, "ERRO_UNLOCK_PARCELAS_REC_BAIXADAS", Err)

        Case 46298
            Call Rotina_Erro(vbOKOnly, "ERRO_UNLOCK_TITULOS_REC_BAIXADOS", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148254)

    End Select

    For i = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(i))
    Next

    Exit Function

End Function

Private Function TitulosRec_Inserir(ByVal objTituloReceber As ClassTituloReceber, ByVal lComandoTitIns As Long) As Long
'auxiliar ao cancelamento de baixa de parcela a receber

Dim lErro As Long

On Error GoTo Erro_TitulosRec_Inserir

    lErro = Comando_Executar(lComandoTitIns, "INSERT INTO TitulosRec (NumIntDoc, FilialEmpresa, Cliente, Filial, SiglaDocumento, NumTitulo, DataEmissao, Status, Saldo, NumParcelas, Valor, ValorIRRF, ValorISS, ISSRetido, ValorINSS, INSSRetido, PercJurosDiarios, PercMulta, Observacao, CondicaoPagto, DataRegistro, PISRetido, COFINSRetido, CSLLRetido, Moeda, Ccl, Natureza, CpoGenerico1, ReajustePeriodicidade, ReajusteBase, ReajustadoAte) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", objTituloReceber.lNumIntDoc, objTituloReceber.iFilialEmpresa, objTituloReceber.lCliente, objTituloReceber.iFilial, objTituloReceber.sSiglaDocumento, objTituloReceber.lNumTitulo, objTituloReceber.dtDataEmissao, STATUS_LANCADO, objTituloReceber.dSaldo, objTituloReceber.iNumParcelas, objTituloReceber.dValor, objTituloReceber.dValorIRRF, objTituloReceber.dValorISS, objTituloReceber.dISSRetido, objTituloReceber.dValorINSS, _
        objTituloReceber.iINSSRetido, objTituloReceber.dPercJurosDiario, objTituloReceber.dPercMulta, objTituloReceber.sObservacao, objTituloReceber.iCondicaoPagto, objTituloReceber.dtDataRegistro, objTituloReceber.dPISRetido, objTituloReceber.dCOFINSRetido, objTituloReceber.dCSLLRetido, objTituloReceber.iMoeda, objTituloReceber.sCcl, objTituloReceber.sNatureza, objTituloReceber.lCpoGenerico1, objTituloReceber.iReajustePeriodicidade, objTituloReceber.dtReajusteBase, objTituloReceber.dtReajustadoAte)
    If lErro <> AD_SQL_SUCESSO Then Error 46305
    
    'Atualiza o Status da NFiscal caso tenha vinculo com Nota Fiscal
    lErro = NFiscal_Altera_Status(objTituloReceber.lNumIntDoc, CPR_TITULO_RECEBER, STATUS_LANCADO)
    If lErro <> SUCESSO Then Error 61288

    TitulosRec_Inserir = SUCESSO

    Exit Function

Erro_TitulosRec_Inserir:

    TitulosRec_Inserir = Err

    Select Case Err

        Case 46305
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_TITULOS_REC", Err)
        
        Case 61288 'Tratado na rotina chamada
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148255)

    End Select

    Exit Function

End Function

Private Function ParcelaRecBaixada_Excluir(ByVal objParcelaReceber As ClassParcelaReceber, ByVal lComandoSel As Long, ByVal lComandoDel As Long) As Long
'auxiliar ao cancelamento de baixa de parcela a receber

Dim lErro As Long

On Error GoTo Erro_ParcelaRecBaixada_Excluir

    lErro = Comando_ExecutarPos(lComandoDel, "DELETE FROM ParcelasRecBaixadas", lComandoSel)
    If lErro <> AD_SQL_SUCESSO Then Error 46307

    ParcelaRecBaixada_Excluir = SUCESSO

    Exit Function

Erro_ParcelaRecBaixada_Excluir:

    ParcelaRecBaixada_Excluir = Err

    Select Case Err

        Case 46307
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_PARCELAS_RECEBER_BAIXADAS", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148256)

    End Select

    Exit Function

End Function

Private Function TituloRecBaixado_Excluir(ByVal objTituloReceber As ClassTituloReceber, ByVal lComandoTitSel As Long, ByVal lComandoTitDel As Long) As Long
'auxiliar ao cancelamento de baixa de parcela a receber

Dim lErro As Long

On Error GoTo Erro_TituloRecBaixado_Excluir

    lErro = Comando_ExecutarPos(lComandoTitDel, "DELETE FROM TitulosRecBaixados", lComandoTitSel)
    If lErro <> AD_SQL_SUCESSO Then Error 46315

    TituloRecBaixado_Excluir = SUCESSO

    Exit Function

Erro_TituloRecBaixado_Excluir:

    TituloRecBaixado_Excluir = Err

    Select Case Err

        Case 46315
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_TITULOS_RECEBER_BAIXADOS", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148257)

    End Select

    Exit Function

End Function

Private Function RecebimentoAntecipado_AlterarSaldo(ByVal objAntecipRec As ClassAntecipReceb, ByVal dValor As Double) As Long
'altera o saldo apropriado de um Recebimento antecipado
'dValor pode ser positivo (aumenta o saldo) ou negativo

Dim lErro As Long, iExcluido As Integer, dSaldoAnterior As Double
Dim lComandoSel As Long, lComandoMod As Long

On Error GoTo Erro_RecebimentoAntecipado_AlterarSaldo

    lComandoSel = Comando_Abrir()
    If lComandoSel = 0 Then Error 46316

    lComandoMod = Comando_Abrir()
    If lComandoMod = 0 Then Error 46317

    'Lê a tabela de RecebAntecipados
    lErro = Comando_ExecutarPos(lComandoSel, "SELECT Excluido,SaldoNaoApropriado FROM RecebAntecipados WHERE NumIntRec = ?", 0, iExcluido, dSaldoAnterior, objAntecipRec.lNumIntRec)
    If lErro <> AD_SQL_SUCESSO Then Error 46318

    lErro = Comando_BuscarPrimeiro(lComandoSel)
    If lErro <> AD_SQL_SUCESSO Then Error 46319

    'Se o Recebimento não está cadastrado
    If lErro = AD_SQL_SEM_DADOS Then Error 46320

    If iExcluido = EXCLUIDO Then Error 46321

    'altera o saldo
    lErro = Comando_ExecutarPos(lComandoMod, "UPDATE RecebAntecipados SET SaldoNaoApropriado = SaldoNaoApropriado + ?", lComandoSel, dValor)
    If lErro <> AD_SQL_SUCESSO Then Error 46322

    lErro = Comando_Fechar(lComandoSel)
    lErro = Comando_Fechar(lComandoMod)

    RecebimentoAntecipado_AlterarSaldo = SUCESSO

    Exit Function

Erro_RecebimentoAntecipado_AlterarSaldo:

    RecebimentoAntecipado_AlterarSaldo = Err

    Select Case Err

        Case 46316, 46317
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 46318, 46319
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RECEB_ANTEC", Err)

        Case 46321
            Call Rotina_Erro(vbOKOnly, "ERRO_RECEBIMENTO_ANTECIPADO_EXCLUIDO", Err)

        Case 46322
            Call Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_RECEBIMENTO_ANTECIPADO", Err)

        Case 46320
            Call Rotina_Erro(vbOKOnly, "ERRO_RECEBIMENTO_ANTECIPADO_INEXISTENTE", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148258)

    End Select

    Call Comando_Fechar(lComandoSel)
    Call Comando_Fechar(lComandoMod)

    Exit Function

End Function

Function DebitoRecCli_AlterarSaldo(ByVal objDebitoReceber As ClassDebitoRecCli, ByVal dValor As Double) As Long
'altera o saldo apropriado de um credito a pagar
'dValor pode ser positivo (aumenta o saldo) ou negativo

Dim lErro As Long, iStatus As Integer, dSaldoAnterior As Double, dValorTotal As Double, dValorIRRF As Double
Dim lComandoSel As Long, lComandoMod As Long, iNovoStatus As Integer
Dim dPISRetido As Double, dCOFINSRetido As Double, dCSLLRetido As Double

On Error GoTo Erro_DebitoRecCli_AlterarSaldo

    lComandoSel = Comando_Abrir()
    If lComandoSel = 0 Then Error 46326

    lComandoMod = Comando_Abrir()
    If lComandoMod = 0 Then Error 46327

    'Lê a tabela de DebitoRec
    lErro = Comando_ExecutarPos(lComandoSel, "SELECT Status, Saldo, ValorTotal, ValorIRRF, PISRetido, COFINSRetido, CSLLRetido FROM DebitosRecCli WHERE NumIntDoc = ?", 0, iStatus, dSaldoAnterior, dValorTotal, dValorIRRF, dPISRetido, dCOFINSRetido, dCSLLRetido, objDebitoReceber.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then Error 46328

    lErro = Comando_BuscarPrimeiro(lComandoSel)
    If lErro <> AD_SQL_SUCESSO Then Error 46329

    'Se o credito não está cadastrado
    If lErro = AD_SQL_SEM_DADOS Then Error 46330

    If iStatus = STATUS_EXCLUIDO Then Error 46331

    If (dSaldoAnterior + dValor) < -DELTA_VALORMONETARIO Then Error 46332
    If (dSaldoAnterior + dValor) > (dValorTotal - (dValorIRRF + dPISRetido + dCOFINSRetido + dCSLLRetido)) + DELTA_VALORMONETARIO Then Error 56595 'Alterado por Wagner

    iNovoStatus = IIf(Abs(dSaldoAnterior + dValor) > DELTA_VALORMONETARIO, STATUS_LANCADO, STATUS_BAIXADO)
    
    If iNovoStatus = STATUS_BAIXADO Then
    
        'altera o saldo
        lErro = Comando_ExecutarPos(lComandoMod, "UPDATE DebitosRecCli SET Saldo = ?, Status = ?", lComandoSel, 0, iNovoStatus)
        If lErro <> AD_SQL_SUCESSO Then Error 20840
    
    Else
    
        'altera o saldo
        lErro = Comando_ExecutarPos(lComandoMod, "UPDATE DebitosRecCli SET Saldo = Saldo + ?, Status = ?", lComandoSel, dValor, iNovoStatus)
        If lErro <> AD_SQL_SUCESSO Then Error 46333
    
    End If
    
    If iNovoStatus = STATUS_BAIXADO Then
        'Caso tenha Vinculo com Nota Fiscal altera o Status para Baixado
        lErro = NFiscal_Altera_Status(objDebitoReceber.lNumIntDoc, CPR_DEBITO_RECEBER, STATUS_BAIXADO)
        If lErro <> SUCESSO Then Error 61299
    Else
        'Caso tenha Vinculo com Nota Fiscal altera o Status para Lancado
        lErro = NFiscal_Altera_Status(objDebitoReceber.lNumIntDoc, CPR_DEBITO_RECEBER, STATUS_LANCADO)
        If lErro <> SUCESSO Then Error 61300
    End If
    
    lErro = Comando_Fechar(lComandoSel)
    lErro = Comando_Fechar(lComandoMod)

    DebitoRecCli_AlterarSaldo = SUCESSO

    Exit Function

Erro_DebitoRecCli_AlterarSaldo:

    DebitoRecCli_AlterarSaldo = Err

    Select Case Err

        Case 20840, 46333
            Call Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_DEBITO_REC_CLI", Err)

        Case 46326, 46327
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 46328, 46329
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_DEBITOSRECCLI", Err)

        Case 46330
            Call Rotina_Erro(vbOKOnly, "ERRO_DEBITORECCLI_NAO_ENCONTRADO", Err, objDebitoReceber.lNumIntDoc)
        
        Case 46331
            Call Rotina_Erro(vbOKOnly, "ERRO_DEBITO_REC_CLI_EXCLUIDO", Err)

        Case 46332
            Call Rotina_Erro(vbOKOnly, "ERRO_DEBITO_REC_SALDO_NEGATIVO", Err)

        Case 56595
            Call Rotina_Erro(vbOKOnly, "ERRO_DEBITO_REC_SALDO_MAIOR_ORIGINAL", Err)
        
        Case 61299, 61300 'Tratado na rotina chamada
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148259)

    End Select

    Call Comando_Fechar(lComandoSel)
    Call Comando_Fechar(lComandoMod)

    Exit Function

End Function

'Private Function MovCCI_Saque_CancBaixaReceb1(objMovContaCorrente As ClassMovContaCorrente) As Long
'
'Dim lErro As Long, lNumMovto As Long, dtData As Date, lSeq As Long, objContasCorrentesInternas As New ClassContasCorrentesInternas, iFilialEmpresa As Integer
'Dim lComando As Long, lComando1 As Long
'
'On Error GoTo Erro_MovCCI_Saque_CancBaixaReceb1
'
'    lComando = 0
'    lComando1 = 0
'
'    lComando = Comando_Abrir()
'    If lComando = 0 Then Error 46337
'
'    lComando1 = Comando_Abrir()
'    If lComando1 = 0 Then Error 46338
'
'    'Pega o numero do proximo movCci
'    lErro = CF("MovCCI_Automatico",lNumMovto)
'    If lErro <> SUCESSO Then Error 46339
'
'    objMovContaCorrente.lNumMovto = lNumMovto
'
'    'le dados da cta corrente para obter a filialempresa correspondente a ela
'    lErro = CF("ContaCorrenteInt_Le",objMovContaCorrente.iCodConta, objContasCorrentesInternas)
'    If lErro <> SUCESSO Then Error 46340
'
'    iFilialEmpresa = objContasCorrentesInternas.iFilialEmpresa
'
'    'obtem o Sequencial do movto na cta
'    lErro = CF("CtaCorrente_Sequencial_Automatico",objMovContaCorrente.iCodConta, lSeq)
'    If lErro <> SUCESSO Then Error 46341
'
'    objMovContaCorrente.lSequencial = lSeq
'    objMovContaCorrente.lNumero = lSeq 'Saque em dinheiro
'
'    'Insere o Saque na Tabela MovimentosContaCorrente
'    lErro = Comando_Executar(lComando1, "INSERT INTO MovimentosContaCorrente (NumMovto, FilialEmpresa, CodConta, Sequencial, Tipo, Excluido, TipoMeioPagto, DataMovimento, Valor, Historico, NumRefExterna, NumRefInterna) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)", lNumMovto, _
'        iFilialEmpresa, objMovContaCorrente.iCodConta, objMovContaCorrente.lSequencial, MOVCCI_CANC_RECEBTO, MOVCONTACORRENTE_NAO_EXCLUIDO, objMovContaCorrente.iTipoMeioPagto, objMovContaCorrente.dtDataMovimento, objMovContaCorrente.dValor, objMovContaCorrente.sHistorico, objMovContaCorrente.sNumRefExterna, objMovContaCorrente.lNumRefInterna)
'    If lErro <> AD_SQL_SUCESSO Then Error 46342
'
'    dtData = objMovContaCorrente.dtDataMovimento
'
'    'Atualiza os dados em CCIMovDia
'    lErro = CF("CCIMovDia_Grava",objMovContaCorrente.iCodConta, dtData, -objMovContaCorrente.dValor)
'    If lErro <> SUCESSO Then Error 46343
'
'    'Atualiza os dados em CCIMov
'    lErro = CF("CCIMov_Grava",objMovContaCorrente.iCodConta, Year(dtData), Month(dtData), -objMovContaCorrente.dValor)
'    If lErro <> SUCESSO Then Error 46344
'
'    Call Comando_Fechar(lComando)
'    Call Comando_Fechar(lComando1)
'
'    MovCCI_Saque_CancBaixaReceb1 = SUCESSO
'
'    Exit Function
'
'Erro_MovCCI_Saque_CancBaixaReceb1:
'
'    MovCCI_Saque_CancBaixaReceb1 = Err
'
'    Select Case Err
'
'        Case 46339, 46340, 46341, 46343, 46344
'
'        Case 46337, 46338
'            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
'
'        Case 46342
'            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MOVIMENTOSCONTACORRENTE", Err, objMovContaCorrente.iCodConta)
'
'        Case Else
'            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148260)
'
'    End Select
'
'    Call Comando_Fechar(lComando)
'    Call Comando_Fechar(lComando1)
'
'    Exit Function
'
'End Function
'
'Function BaixaRecCancelar_Grava(iMotivo As Integer, lNumIntParc As Long, iSequencial As Integer, objMovCCI As ClassMovContaCorrente, objAntecipReceb As ClassAntecipReceb, objDebitoReceber As ClassDebitoRecCli) As Long
''Grava o cancelamento da Baixa
'
'Dim lErro As Long
'Dim lTransacao As Long
'
'On Error GoTo Erro_BaixaRecCancelar_Grava
'
'    lTransacao = Transacao_Abrir()
'    If lTransacao = 0 Then Error 46264
'
'    If iMotivo = MOTIVO_RECEBIMENTO Then
'
'        lErro = BaixaParcRec_Recebimento_Cancelar(objMovCCI, lNumIntParc, iSequencial)
'        If lErro <> SUCESSO Then Error 46265
'
'    ElseIf iMotivo = MOTIVO_RECEBTO_ANTECIPADO Then
'
'        lErro = BaixaParcRec_RecebtoAntecipado_Cancelar(objAntecipReceb, lNumIntParc, iSequencial)
'        If lErro <> SUCESSO Then Error 46266
'
'    ElseIf iMotivo = MOTIVO_DEBITO_CLIENTE Then
'
'        lErro = BaixaParcRec_DebRecCli_Cancelar(objDebitoReceber, lNumIntParc, iSequencial)
'        If lErro <> SUCESSO Then Error 46267
'
'    ElseIf iMotivo = MOTIVO_PERDA Then
'
'        lErro = BaixaParcRec_Perda_Cancelar(lNumIntParc, iSequencial)
'        If lErro <> SUCESSO Then Error 46267
'
'    End If
'
'    lErro = Transacao_Commit()
'    If lErro <> AD_SQL_SUCESSO Then Error 46268
'
'    BaixaRecCancelar_Grava = SUCESSO
'
'    Exit Function
'
'Erro_BaixaRecCancelar_Grava:
'
'    BaixaRecCancelar_Grava = Err
'
'    Select Case Err
'
'        Case 46264
'            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
'
'        Case 46265, 46266, 46267
'
'        Case 46268
'            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
'
'        Case Else
'            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148261)
'
'    End Select
'
'    Call Transacao_Rollback
'
'    Exit Function
'
'End Function
'
'Private Function BaixaParcRec_RecebtoAntecipado_Cancelar(objAntecipRec As ClassAntecipReceb, lNumIntParc As Long, iSequencial As Integer) As Long
''cancela a baixa de parcela a receber que havia sido efetuada pela utilizacao de um adiantamento do cliente
'
'Dim lErro As Long, dValorPago As Double, objBaixaParcReceber As New ClassBaixaParcRec
'Dim lNumIntBaixa As Long, lNumIntDocBaixaParc As Long
'
'On Error GoTo Erro_BaixaParcRec_RecebtoAntecipado_Cancelar
'
'    'Exclui a baixa da parcela
'    objBaixaParcReceber.lNumIntParcela = lNumIntParc
'    objBaixaParcReceber.iSequencial = iSequencial
'    dValorPago = objBaixaParcReceber.dValorBaixado + objBaixaParcReceber.dValorJuros + objBaixaParcReceber.dValorMulta - objBaixaParcReceber.dValorDesconto
'
'    lErro = BaixaParcRec_Exclui(lNumIntParc, iSequencial, dValorPago, lNumIntBaixa, lNumIntDocBaixaParc)
'    If lErro <> SUCESSO Then Error 46269
'
'    'Exclui a baixa como um todo
'    lErro = BaixaRec_Exclui(lNumIntBaixa)
'    If lErro <> SUCESSO And lErro <> 56606 Then Error 46270
'
'    'Altera o saldo do pagto antecipado
'    lErro = RecebimentoAntecipado_AlterarSaldo(objAntecipRec, dValorPago)
'    If lErro <> SUCESSO Then Error 46271
'
'    BaixaParcRec_RecebtoAntecipado_Cancelar = SUCESSO
'
'    Exit Function
'
'Erro_BaixaParcRec_RecebtoAntecipado_Cancelar:
'
'    BaixaParcRec_RecebtoAntecipado_Cancelar = Err
'
'    Select Case Err
'
'        Case 46269, 46270, 46271
'
'        Case Else
'            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148262)
'
'    End Select
'
'    Exit Function
'
'End Function

Private Function ParcelaRec_CancelarBaixa(ByVal lNumIntParc As Long, ByVal dValorBaixado As Double, Optional ByVal iTipoCancelamento As Integer) As Long
'desfaz o efeito de uma baixa sobre uma parcela

Dim lErro As Long

On Error GoTo Erro_ParcelaRec_CancelarBaixa

    lErro = ParcelaRec_CancelarBaixaTitNaoBaixado(lNumIntParc, dValorBaixado, iTipoCancelamento)
    If lErro <> SUCESSO And lErro <> 46277 Then Error 46272

    If lErro <> SUCESSO Then
        lErro = ParcelaRec_CancelarBaixaTitBaixado(lNumIntParc, dValorBaixado, iTipoCancelamento)
        If lErro <> SUCESSO Then Error 46273
    End If

    ParcelaRec_CancelarBaixa = SUCESSO

    Exit Function

Erro_ParcelaRec_CancelarBaixa:

    ParcelaRec_CancelarBaixa = Err

    Select Case Err

        Case 46272, 46273

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148263)

    End Select

    Exit Function

End Function

'Private Function BaixaParcRec_DebRecCli_Cancelar(objDebitoReceber As ClassDebitoRecCli, lNumIntParc As Long, iSequencial As Integer) As Long
''cancela a baixa de parcela a receber que havia sido efetuada pela utilizacao de um debito com o cliente
'
'Dim lErro As Long, dValorPago As Double, objBaixaParcReceber As New ClassBaixaParcRec
'Dim lNumIntBaixa As Long, lNumIntDocBaixaParc As Long
'
'On Error GoTo Erro_BaixaParcRec_DebRecCli_Cancelar
'
'    'exclui a baixa da parcela
'    objBaixaParcReceber.lNumIntParcela = lNumIntParc
'    objBaixaParcReceber.iSequencial = iSequencial
'
'    dValorPago = objBaixaParcReceber.dValorBaixado + objBaixaParcReceber.dValorJuros + objBaixaParcReceber.dValorMulta - objBaixaParcReceber.dValorDesconto
'    lErro = BaixaParcRec_Exclui(lNumIntParc, iSequencial, dValorPago, lNumIntBaixa, lNumIntDocBaixaParc)
'    If lErro <> SUCESSO Then Error 46323
'
'    'Exclui a baixa como um todo
'    lErro = BaixaRec_Exclui(lNumIntBaixa)
'    If lErro <> SUCESSO And lErro <> 56606 Then Error 46324
'
'    'Altera o saldo do Débito a Receber
'    lErro = CF("DebitoRecCli_AlterarSaldo",objDebitoReceber, dValorPago)
'    If lErro <> SUCESSO Then Error 46325
'
'    BaixaParcRec_DebRecCli_Cancelar = SUCESSO
'
'    Exit Function
'
'Erro_BaixaParcRec_DebRecCli_Cancelar:
'
'    BaixaParcRec_DebRecCli_Cancelar = Err
'
'    Select Case Err
'
'        Case 46323, 46324, 46325
'
'        Case Else
'            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148264)
'
'    End Select
'
'    Exit Function
'
'End Function
'
'Private Function BaixaParcRec_Recebimento_Cancelar(objMovCCI As ClassMovContaCorrente, lNumIntParc As Long, iSequencial As Integer) As Long
''cancela a baixa de parcela a receber que havia sido efetuada por pagamento do cliente
'
'Dim lErro As Long, dValorPago As Double
'Dim lNumIntBaixa As Long, lNumIntDocBaixaParc As Long
'
'On Error GoTo Erro_BaixaParcRec_Recebimento_Cancelar
'
'    'Exclui a baixa da parcela
'    lErro = BaixaParcRec_Exclui(lNumIntParc, iSequencial, dValorPago, lNumIntBaixa, lNumIntDocBaixaParc)
'    If lErro <> SUCESSO Then Error 46334
'
'    'Exclui a baixa como um todo
'    lErro = BaixaRec_Exclui(lNumIntBaixa)
'    If lErro <> SUCESSO And lErro <> 56606 Then Error 56781
'
'    lErro = MovCCI_Saque_CancBaixaReceb(objMovCCI, dValorPago, lNumIntDocBaixaParc)
'    If lErro <> SUCESSO Then Error 46335
'
'    BaixaParcRec_Recebimento_Cancelar = SUCESSO
'
'    Exit Function
'
'Erro_BaixaParcRec_Recebimento_Cancelar:
'
'    BaixaParcRec_Recebimento_Cancelar = Err
'
'    Select Case Err
'
'        Case 46334, 46335, 56781
'
'        Case Else
'            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148265)
'
'    End Select
'
'    Exit Function
'
'End Function
'
'Private Function MovCCI_Saque_CancBaixaReceb(objMovContaCorrente As ClassMovContaCorrente, dValor As Double, lNumIntDocBaixaParc As Long) As Long
''inclui o Saque correspondente ao cancelamento da baixa de um titulo que havia sido pago pelo cliente
'
'Dim lErro As Long, objMovCCIBordero As New ClassMovContaCorrente
'
'On Error GoTo Erro_MovCCI_Saque_CancBaixaReceb
'
'    'inclui o Saque correspondente ao valor Recebido
'    objMovContaCorrente.iTipo = MOVCCI_CANC_RECEBTO
'    objMovContaCorrente.iExcluido = NAO_EXCLUIDO
'    objMovContaCorrente.iTipoMeioPagto = DINHEIRO
'    objMovContaCorrente.lNumero = 0
'    objMovContaCorrente.dValor = dValor
'    objMovContaCorrente.sHistorico = "Cancelamento de Baixa de Recebimento"
'    objMovContaCorrente.iConciliado = NAO_CONCILIADO
'    objMovContaCorrente.iFavorecido = 0
'    objMovContaCorrente.lNumRefInterna = lNumIntDocBaixaParc
'    objMovContaCorrente.sNumRefExterna = ""
'
'    lErro = MovCCI_Saque_CancBaixaReceb1(objMovContaCorrente)
'    If lErro <> SUCESSO Then Error 46336
'
'    MovCCI_Saque_CancBaixaReceb = SUCESSO
'
'    Exit Function
'
'Erro_MovCCI_Saque_CancBaixaReceb:
'
'    MovCCI_Saque_CancBaixaReceb = Err
'
'    Select Case Err
'
'        Case 46336
'
'        Case Else
'            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148266)
'
'    End Select
'
'    Exit Function
'
'End Function
'
'Private Function BaixaParcRec_Perda_Cancelar(lNumIntParc As Long, iSequencial As Integer) As Long
''cancela a baixa de parcela a receber que havia sido motivada por "perda" (o cliente nao pagou nem utilizou credito,...)
'
'Dim lErro As Long
'Dim dValorPago As Double
'Dim lNumIntBaixa As Long, lNumIntDocBaixaParc As Long
'
'On Error GoTo Erro_BaixaParcRec_Perda_Cancelar
'
'    'exclui a baixa da parcela
'    lErro = BaixaParcRec_Exclui(lNumIntParc, iSequencial, dValorPago, lNumIntBaixa, lNumIntDocBaixaParc)
'    If lErro <> SUCESSO Then Error 46226
'
'    'Exclui a baixa como um todo
'    lErro = BaixaRec_Exclui(lNumIntBaixa)
'    If lErro <> SUCESSO And lErro <> 56606 Then Error 56782
'
'    BaixaParcRec_Perda_Cancelar = SUCESSO
'
'    Exit Function
'
'Erro_BaixaParcRec_Perda_Cancelar:
'
'    BaixaParcRec_Perda_Cancelar = Err
'
'    Select Case Err
'
'        Case 46226, 56782
'
'        Case Else
'            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148267)
'
'    End Select
'
'    Exit Function
'
'End Function

Function BaixaRecDig_Grava(ByVal objBaixaRecDig As ClassBaixaRecDig) As Long
'grava a baixa de parcelas a receber entrada "em lote" (na tela BaixaRecDig)

Dim lErro As Long
Dim lTransacao As Long, objContabAutomatica As ClassContabAutomatica
Dim objBaixaReceber As New ClassBaixaReceber
Dim colBaixaParcRec As colBaixaParcRec, objMovCCI As ClassMovContaCorrente

On Error GoTo Erro_BaixaRecDig_Grava

    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 46502
    
    Set colBaixaParcRec = objBaixaRecDig.colBaixaParcRec
    Set objMovCCI = objBaixaRecDig.objMovCCI
    
    'Grava o Pagamento no BD
    lErro = CF("MovCCI_Grava_PagRec", objMovCCI)
    If lErro <> SUCESSO Then Error 56637
            
    objBaixaReceber.dtData = objMovCCI.dtDataBaixa 'vem preenchida da tela
    objBaixaReceber.dtDataContabil = objMovCCI.dtDataContabil
    
    If (gcolModulo.Ativo(MODULO_CONTABILIDADE) = MODULO_ATIVO) Then
    
        Set objContabAutomatica = New ClassContabAutomatica
    
        lErro = objContabAutomatica.Inicializa_Contab(objBaixaRecDig, MODULO_CONTASARECEBER, "BCR", objBaixaReceber.dtDataContabil, DATA_NULA)
        If lErro <> SUCESSO Then Error 32251
        
    End If
    
    lErro = CF("BaixaReceber_Grava_Recebimento", objBaixaReceber, colBaixaParcRec, objMovCCI, Nothing, 0, 0, objContabAutomatica)
    If lErro <> SUCESSO Then Error 46503
    
    If Not (objContabAutomatica Is Nothing) Then
    
        lErro = objContabAutomatica.Finaliza_Contab()
        If lErro <> SUCESSO Then Error 32252
        
    End If
    
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 46504
    
    BaixaRecDig_Grava = SUCESSO
    
    Exit Function
    
Erro_BaixaRecDig_Grava:

    BaixaRecDig_Grava = Err
    
    Select Case Err
    
        Case 46502
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
            
        Case 46503, 56637, 32251, 32252
        
        Case 46504
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, 148268)

    End Select

    Call Transacao_Rollback

    Exit Function
    
End Function

Private Function OcorrRemParcRec_DesfazContabilizacao(ByVal lNumIntOcorrRemParcRec As Long) As Long
'desfaz a contabilizacao (exclui lancamentos pendentes ou estorna lancamentos atualizados)

Dim lErro As Long, objContabil As ClassContabil, objTela As Object

On Error GoTo Erro_OcorrRemParcRec_DesfazContabilizacao

    If gcolModulo.Ativo(MODULO_CONTABILIDADE) = MODULO_ATIVO Then
        
        Set objContabil = New ClassContabil
        
        lErro = objContabil.Contabil_DesfazContabilizacao1(GRUPOTRANSEXC_OCORRREMPARCREC, lNumIntOcorrRemParcRec, gdtDataAtual)
        If lErro <> SUCESSO Then Error 32231
    
    End If
    
    OcorrRemParcRec_DesfazContabilizacao = SUCESSO
     
    Exit Function
    
Erro_OcorrRemParcRec_DesfazContabilizacao:

    OcorrRemParcRec_DesfazContabilizacao = Err
     
    Select Case Err
           
        Case 32231
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148269)
     
    End Select
     
    Exit Function

End Function

Function BorderoCobranca_Cancelar(ByVal objBorderoCobranca As ClassBorderoCobranca) As Long
'marca o bordero de cobranca como cancelado retornando as parcelas p/"em carteira" e desmarcando as instrucoes avulsas como enviadas pelo bordero.

Dim lErro As Long, iStatus As Integer
Dim alComando(0 To 6) As Long
Dim lTransacao As Long
Dim lNumIntParcela As Long, lNumIntOcorrRemParcRec As Long
Dim iIndice As Integer, dValorParcela As Double
Dim lNumBordero As Long
Dim objCarteiraCobrador As New ClassCarteiraCobrador, objCarteiraEmpresa As New ClassCarteiraCobrador
Dim lQuantidadeAtual As Long, dSaldoAtual As Double, iQuantidadeParcelas As Integer
Dim dTotalParcelas As Double, sFaixaNossoNumeroProx As String
Dim iProxSeqOcorr As Integer, iCodOcorrencia As Integer, iSequencial As Integer
Dim iCobradorBordero As Integer, iCartCobrBodero As Integer, iCobradorParc As Integer, iCartCobrParc As Integer, bTrazParcCarteira As Boolean, iCobradorOcorr As Integer

On Error GoTo Erro_BorderoCobranca_Cancelar

    iQuantidadeParcelas = 0
    dTotalParcelas = 0

    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 46387
    
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 46388
    Next
    
    'seleciona e bloqueia o bordero de cobranca
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Cobrador, CarteiraCobranca, NumBordero, Status FROM BorderosCobranca WHERE NumBordero = ? ", 0, iCobradorBordero, iCartCobrBodero, lNumBordero, iStatus, objBorderoCobranca.lNumBordero)
    If lErro <> AD_SQL_SUCESSO Then Error 46397
    
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 46398
    If lErro <> AD_SQL_SUCESSO Then Error 46399
    
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then Error 46400
    
    If iStatus = STATUS_EXCLUIDO Then Error 41648
    
'    'verifica se alguma parcela já foi baixada
'    lErro = Comando_Executar(alComando(1), "SELECT OcorrenciasRemParcRec.NumIntParc FROM OcorrenciasRemParcRec,ParcelasRecBaixadas WHERE NumBordero = ? AND OcorrenciasRemParcRec.NumIntParc = ParcelasRecBaixadas.NumIntDoc ORDER BY NumSeqOcorr ", lNumIntParcela, objBorderoCobranca.lNumBordero)
'    If lErro <> AD_SQL_SUCESSO Then Error 46389
'
'    lErro = Comando_BuscarPrimeiro(alComando(1))
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 46390
'    If lErro = AD_SQL_SUCESSO Then Error 46410
    
    'obtem as ocorrencias que foram incluidas no bordero e as geradas por ele pela transferencia de parcelas em carteira na empresa p/uma carteira de um cobrador.
    lErro = Comando_ExecutarPos(alComando(1), "SELECT NumIntDoc, NumIntParc, NumSeqOcorr, CodOcorrencia FROM OcorrenciasRemParcRec WHERE NumBordero = ? ORDER BY NumIntParc, NumSeqOcorr DESC", 0, lNumIntOcorrRemParcRec, lNumIntParcela, iSequencial, iCodOcorrencia, objBorderoCobranca.lNumBordero)
    If lErro <> AD_SQL_SUCESSO Then Error 46411
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 46412
    If lErro = AD_SQL_SEM_DADOS Then Error 46391
    
    Do While lErro = AD_SQL_SUCESSO
    
        'se a ocorrencia é a de envio de título para o cobrador
        If iCodOcorrencia = COBRANCA_OCORR_INC_TITULO Then
        
            'obter dados da parcela
            lErro = Comando_ExecutarPos(alComando(2), "SELECT Cobrador, CarteiraCobranca, Valor,ProxSeqOcorr FROM ParcelasRec WHERE NumIntDoc = ? ", 0, iCobradorParc, iCartCobrParc, dValorParcela, iProxSeqOcorr, lNumIntParcela)
            If lErro <> AD_SQL_SUCESSO Then Error 46392
        
            lErro = Comando_BuscarPrimeiro(alComando(2))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 46393
            If lErro = AD_SQL_SUCESSO Then
        
                bTrazParcCarteira = True
                
                'verifica se a parcela deve mesmo ser transferida da carteira p/onde foi mandada pelo bordero p/CARTEIRA_CARTEIRA do COBRADOR_PROPRIA_EMPRESA
                If iProxSeqOcorr - 1 <> iSequencial Then
                
                    'se a parcela continua no cobrador/carteira do bordero
                    If iCobradorBordero = iCobradorParc And iCartCobrBodero = iCartCobrParc Then
                    
                        'verifica se foi transferida por outro bordero de cobranca
                        lErro = Comando_Executar(alComando(6), "SELECT Cobrador FROM OcorrenciasRemParcRec WHERE NumIntParc = ? AND CodOcorrencia = ? AND NumSeqOcorr > ?", iCobradorOcorr, lNumIntParcela, COBRANCA_OCORR_INC_TITULO, iSequencial)
                        If lErro <> AD_SQL_SUCESSO Then Error 32258
                        
                        lErro = Comando_BuscarPrimeiro(alComando(6))
                        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 32259
                        
                        If lErro = AD_SQL_SUCESSO Then bTrazParcCarteira = False
                    
                    Else
                    
                        bTrazParcCarteira = False
                    
                    End If
                
                End If
                            
                If bTrazParcCarteira Then
                
                    iQuantidadeParcelas = iQuantidadeParcelas + 1
                    dTotalParcelas = dTotalParcelas + dValorParcela
                
                    'atualiza a parcela indicando que voltou a estar em carteira
                    lErro = Comando_ExecutarPos(alComando(3), "UPDATE ParcelasRec SET Cobrador = ?, CarteiraCobranca = ?, NumTitCobrador = ?, IdImpressaoBoleto = ?, DataImpressaoBoleto = ? ", alComando(2), COBRADOR_PROPRIA_EMPRESA, CARTEIRA_CARTEIRA, "", 0, DATA_NULA)
                    If lErro <> AD_SQL_SUCESSO Then Error 46395
            
                End If
            
            End If
            
            lErro = OcorrRemParcRec_DesfazContabilizacao(lNumIntOcorrRemParcRec)
            If lErro <> SUCESSO Then Error 56534
        
        Else
        
            'atualizar o numero do bordero da ocorrencia com zero para que estas ocorrencias sejam enviadas no proximo bordero do cobrador
            lErro = Comando_ExecutarPos(alComando(5), "UPDATE OcorrenciasRemParcRec SET NumBordero = 0", alComando(1))
            If lErro <> AD_SQL_SUCESSO Then Error 41592
            
        End If
        
        'obter proxima ocorrencia
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 46396
    
    Loop
    
    If iQuantidadeParcelas <> 0 Or dTotalParcelas <> 0 Then
    
        sFaixaNossoNumeroProx = String(STRING_NOSSO_NUMERO, 0)
        
        lErro = Comando_ExecutarPos(alComando(1), "SELECT QuantidadeAtual, SaldoAtual,FaixaNossoNumeroProx FROM CarteirasCobrador WHERE Cobrador = ? AND CodCarteiraCobranca = ?", 0, lQuantidadeAtual, dSaldoAtual, sFaixaNossoNumeroProx, objBorderoCobranca.iCobrador, objBorderoCobranca.iCodCarteiraCobranca)
        If lErro <> AD_SQL_SUCESSO Then Error 46401
        
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 46402
        If lErro = AD_SQL_SEM_DADOS Then Error 46403
        
        lErro = Comando_LockExclusive(alComando(1))
        If lErro <> AD_SQL_SUCESSO Then Error 46405
        
        objCarteiraCobrador.dSaldoAtual = dSaldoAtual - dTotalParcelas
        objCarteiraCobrador.lQuantidadeAtual = lQuantidadeAtual - iQuantidadeParcelas
        objCarteiraCobrador.sFaixaNossoNumeroProx = sFaixaNossoNumeroProx
        
        lErro = CarteiraCobrador_AtualizarBorderoCobranca(objCarteiraCobrador, alComando(1))
        If lErro <> SUCESSO Then Error 46404
        
        'aumentar a qtde e valor dos titulos "em carteira" na propria empresa
        objCarteiraEmpresa.iCobrador = COBRADOR_PROPRIA_EMPRESA
        objCarteiraEmpresa.iCodCarteiraCobranca = CARTEIRA_CARTEIRA
        lErro = CF("CarteiraCobrador_AtualizaSaldo", objCarteiraEmpresa, iQuantidadeParcelas, dTotalParcelas)
        If lErro <> SUCESSO Then Error 41647
    
    End If
    
    lErro = Comando_ExecutarPos(alComando(4), "UPDATE BorderosCobranca SET Status = ?, DataCancelamento = ?, DataContabilCancelamento = ?", alComando(0), STATUS_EXCLUIDO, objBorderoCobranca.dtDataCancelamento, objBorderoCobranca.dtDataContabilCancelamento)
    If lErro <> AD_SQL_SUCESSO Then Error 46406
    
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 46407

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
        
    BorderoCobranca_Cancelar = SUCESSO
    
    Exit Function
    
Erro_BorderoCobranca_Cancelar:

    BorderoCobranca_Cancelar = Err
    
    Select Case Err
    
        Case 46387
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
        
        Case 46388
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
            
        Case 46389, 46390, 46396, 46411, 46412, 32258, 32259
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_OCORRENCIASREMPARCREC", Err)
            
        Case 46391
            Call Rotina_Erro(vbOKOnly, "ERRO_BORDERO_COBRANCA_SEM_OCORRENCIAS", Err, objBorderoCobranca.lNumBordero)
        
        Case 46392, 46393
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_REC", Err)
        
        Case 46394
            Call Rotina_Erro(vbOKOnly, "ERRO_PARCELA_RECEBER_NAO_CADASTRADA1", Err, lNumIntParcela)
        
        Case 41647, 46395, 46404, 56534
        
        Case 46397, 46398
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BORDERO_COBRANCA", Err)
        
        Case 46399
            Call Rotina_Erro(vbOKOnly, "ERRO_BORDERO_COBRANCA_NAO_CADASTRADO", Err, objBorderoCobranca.lNumBordero)
            
        Case 46400
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_BORDERO_COBRANCA", Err, objBorderoCobranca.lNumBordero)
        
        Case 46401, 46402
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CARTEIRASCOBRADOR", Err)
        
        Case 46403
            Call Rotina_Erro(vbOKOnly, "ERRO_CARTEIRA_COBRADOR_INEXISTENTE", Err)
        
        Case 46405
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CARTEIRASCOBRADOR", Err)
        
        Case 46406
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_BORDERO_COBRANCA", Err, objBorderoCobranca.lNumBordero)
        
        Case 46407
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
        
        Case 46410
            Call Rotina_Erro(vbOKOnly, "ERRO_PARCELA_RECEBER_BAIXADA", Err, lNumIntParcela)
        
        Case 46414
            Call Rotina_Erro(vbOKOnly, "ERRO_OCORRENCIA_DIFERENTE_PARCELA", Err)
        
        Case 41592
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_OCORRCOBR", Err)
        
        Case 41648
            Call Rotina_Erro(vbOKOnly, "ERRO_BORDERO_COBRANCA_EXCLUIDO", Err, lNumBordero)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148270)
            
    End Select
        
    Call Transacao_Rollback
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
        
    Exit Function
        
End Function

Private Function TituloRec_MoverOutrasParc(ByVal lNumIntTitulo As Long, ByVal lComandoSel As Long, ByVal lComandoDel As Long, ByVal lComandoIns As Long) As Long
'transfere as parcelas vinculadas a um titulo a Receber de ParcelasRecBaixadas para ParcelasRec
'TEM QUE SER CHAMADA DENTRO DE TRANSACAO

Dim lErro As Long
Dim tParcelaReceber As typeParcelaReceber
Dim objParcelaReceber As New ClassParcelaReceber

On Error GoTo Erro_TituloRec_MoverOutrasParc

    tParcelaReceber.sNumTitCobrador = String(STRING_NOSSO_NUMERO, 0)
    tParcelaReceber.lNumIntTitulo = lNumIntTitulo 'fixo
    tParcelaReceber.dSaldo = 0
    tParcelaReceber.sAgenciaCheque = String(STRING_AGENCIA, 0)
    tParcelaReceber.sAprovacaoCartao = String(STRING_APROVACAO_CARTAO, 0)
    tParcelaReceber.sContaCorrenteCheque = String(STRING_CONTA_CORRENTE, 0)
    tParcelaReceber.sNumeroCartao = String(STRING_NUMERO_CARTAO, 0)

    lErro = Comando_ExecutarPos(lComandoSel, "SELECT NumIntDoc, NumParcela, Status, DataVencimento, DataVencimentoReal, Valor, Cobrador, CarteiraCobranca, NumTitCobrador, ProxSeqBaixa, ProxSeqOcorr, Desconto1Codigo, Desconto1Ate, Desconto1Valor, Desconto2Codigo, Desconto2Ate, Desconto2Valor, Desconto3Codigo, Desconto3Ate, Desconto3Valor, Aceite, TipoPagto, CodConta, DataCredito, DataEmissaoCheque, BancoCheque, AgenciaCheque, ContaCorrenteCheque, NumeroCheque, DataDepositoCheque, AdmMeioPagto, Parcelamento, NumeroCartao, ValidadeCartao, AprovacaoCartao, DataTransacaoCartao   FROM ParcelasRecBaixadas WHERE NumIntTitulo = ?", 0, _
    tParcelaReceber.lNumIntDoc, tParcelaReceber.iNumParcela, tParcelaReceber.iStatus, tParcelaReceber.dtDataVencimento, tParcelaReceber.dtDataVencimentoReal, tParcelaReceber.dValor, tParcelaReceber.iCobrador, tParcelaReceber.iCarteiraCobranca, tParcelaReceber.sNumTitCobrador, tParcelaReceber.iProxSeqBaixa, tParcelaReceber.iProxSeqOcorr, tParcelaReceber.iDesconto1Codigo, tParcelaReceber.dtDesconto1Ate, tParcelaReceber.dDesconto1Valor, _
        tParcelaReceber.iDesconto2Codigo, tParcelaReceber.dtDesconto2Ate, tParcelaReceber.dDesconto2Valor, tParcelaReceber.iDesconto3Codigo, tParcelaReceber.dtDesconto3Ate, tParcelaReceber.dDesconto3Valor, tParcelaReceber.iAceite, _
        tParcelaReceber.iTipoPagto, tParcelaReceber.iCodConta, tParcelaReceber.dtDataCredito, tParcelaReceber.dtDataEmissaoCheque, tParcelaReceber.iBancoCheque, tParcelaReceber.sAgenciaCheque, tParcelaReceber.sContaCorrenteCheque, tParcelaReceber.lNumeroCheque, tParcelaReceber.dtDataDepositoCheque, tParcelaReceber.iAdmMeioPagto, tParcelaReceber.iParcelamento, tParcelaReceber.sNumeroCartao, tParcelaReceber.dtValidadeCartao, tParcelaReceber.sAprovacaoCartao, tParcelaReceber.dtDataTransacaoCartao, lNumIntTitulo)
    If lErro <> AD_SQL_SUCESSO Then Error 46308

    lErro = Comando_BuscarProximo(lComandoSel)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 46309

    If lErro = AD_SQL_SEM_DADOS Then Error 46310

    Do While lErro = AD_SQL_SUCESSO

        'verificar se a parcela ainda nao foi baixada ou excluida
        If tParcelaReceber.iStatus <> STATUS_BAIXADO And tParcelaReceber.iStatus <> STATUS_EXCLUIDO Then Error 46314

        Call ParcelaRec_MoverCamposObj(objParcelaReceber, tParcelaReceber)

        'Excluir a parcela da tabela ParcelasRecBaixadas
        lErro = ParcelaRecBaixada_Excluir(objParcelaReceber, lComandoSel, lComandoDel)
        If lErro <> SUCESSO Then Error 46311
        
        'muda o status das parcelas que nao foram canceladas mas que fora para ParcelasRec junto com a que foi
        objParcelaReceber.iStatus = STATUS_BAIXADO
        
        'incluir a parcela na tabela ParcelasRec
        lErro = CF("ParcelasRec_Inserir", objParcelaReceber, lComandoIns)
        If lErro <> SUCESSO Then Error 46312

        lErro = Comando_BuscarProximo(lComandoSel)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 46313

    Loop

    TituloRec_MoverOutrasParc = SUCESSO

    Exit Function

Erro_TituloRec_MoverOutrasParc:

    TituloRec_MoverOutrasParc = Err

    Select Case Err

        Case 46311, 46312

        Case 46314 'a parcela deveria estar baixada ou excluida
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_REC_BAIXADAS", Err)

        Case 46308, 46309, 46313, 46310
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_REC_BAIXADAS", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148271)

    End Select

    Exit Function

End Function

Function ParcelaRecBaixada_LeMod(ByVal objParcelaReceber As ClassParcelaReceber, ByVal lComando As Long) As Long
'faz a leitura de um registro da tabela ParcelasRecBaixadas p/objParcelaReceber c/ExecutarPos
'objParcelaReceber.lNumIntDoc entra preenchido
'TEM QUE SER CHAMADO EM TRANSACAO

Dim lErro As Long
Dim tParcelaReceber As typeParcelaReceber

On Error GoTo Erro_ParcelaRecBaixada_LeMod

    tParcelaReceber.sNumTitCobrador = String(STRING_NOSSO_NUMERO, 0)
    tParcelaReceber.sAgenciaCheque = String(STRING_AGENCIA, 0)
    tParcelaReceber.sAprovacaoCartao = String(STRING_APROVACAO_CARTAO, 0)
    tParcelaReceber.sContaCorrenteCheque = String(STRING_CONTA_CORRENTE, 0)
    tParcelaReceber.sNumeroCartao = String(STRING_NUMERO_CARTAO, 0)

    lErro = Comando_ExecutarPos(lComando, "SELECT NumParcela, Status, DataVencimento, DataVencimentoReal, Valor, Cobrador, CarteiraCobranca, NumTitCobrador, ProxSeqBaixa, ProxSeqOcorr, Desconto1Codigo, Desconto1Ate, Desconto1Valor, Desconto2Codigo, Desconto2Ate, Desconto2Valor, Desconto3Codigo, Desconto3Ate, Desconto3Valor, Aceite, NumIntTitulo, TipoPagto, CodConta, DataCredito, DataEmissaoCheque, BancoCheque, AgenciaCheque, ContaCorrenteCheque, NumeroCheque, DataDepositoCheque, AdmMeioPagto, Parcelamento, NumeroCartao, ValidadeCartao, AprovacaoCartao, DataTransacaoCartao FROM ParcelasRecBaixadas WHERE NumIntDoc = ?", 0, _
        tParcelaReceber.iNumParcela, tParcelaReceber.iStatus, tParcelaReceber.dtDataVencimento, tParcelaReceber.dtDataVencimentoReal, tParcelaReceber.dValor, tParcelaReceber.iCobrador, tParcelaReceber.iCarteiraCobranca, tParcelaReceber.sNumTitCobrador, tParcelaReceber.iProxSeqBaixa, tParcelaReceber.iProxSeqOcorr, tParcelaReceber.iDesconto1Codigo, tParcelaReceber.dtDesconto1Ate, _
        tParcelaReceber.dDesconto1Valor, tParcelaReceber.iDesconto2Codigo, tParcelaReceber.dtDesconto2Ate, tParcelaReceber.dDesconto2Valor, tParcelaReceber.iDesconto3Codigo, tParcelaReceber.dtDesconto3Ate, tParcelaReceber.dDesconto3Valor, tParcelaReceber.iAceite, tParcelaReceber.lNumIntTitulo, _
        tParcelaReceber.iTipoPagto, tParcelaReceber.iCodConta, tParcelaReceber.dtDataCredito, tParcelaReceber.dtDataEmissaoCheque, tParcelaReceber.iBancoCheque, tParcelaReceber.sAgenciaCheque, tParcelaReceber.sContaCorrenteCheque, tParcelaReceber.lNumeroCheque, tParcelaReceber.dtDataDepositoCheque, tParcelaReceber.iAdmMeioPagto, tParcelaReceber.iParcelamento, tParcelaReceber.sNumeroCartao, tParcelaReceber.dtValidadeCartao, tParcelaReceber.sAprovacaoCartao, tParcelaReceber.dtDataTransacaoCartao, objParcelaReceber.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then Error 46299

    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 46300

    If lErro <> AD_SQL_SUCESSO Then Error 46301

    tParcelaReceber.lNumIntDoc = objParcelaReceber.lNumIntDoc
    tParcelaReceber.dSaldo = 0
    Call ParcelaRec_MoverCamposObj(objParcelaReceber, tParcelaReceber)

    ParcelaRecBaixada_LeMod = SUCESSO

    Exit Function

Erro_ParcelaRecBaixada_LeMod:

    ParcelaRecBaixada_LeMod = Err

    Select Case Err

        Case 46299, 46300
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_REC_BAIXADAS", Err)

        Case 46301
            Call Rotina_Erro(vbOKOnly, "ERRO_PARCELA_RECEBER_BAIXADA_INEXISTENTE", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148272)

    End Select

    Exit Function

End Function

Function TituloRecBaixado_LeMod(ByVal objTituloReceber As ClassTituloReceber, ByVal lComando As Long) As Long
'faz a leitura de um registro da tabela TitulosReceberBaixados p/objTituloReceber c/ExecutarPos
'objTituloReceber.lNumIntDoc entra preenchido
'TEM QUE SER CHAMADO EM TRANSACAO

Dim lErro As Long
Dim tTituloReceber As typeTituloReceber

On Error GoTo Erro_TituloRecBaixado_LeMod

    tTituloReceber.sObservacao = String(STRING_TITULO_OBSERVACAO, 0)
    tTituloReceber.sSiglaDocumento = String(STRING_SIGLA_DOCUMENTO, 0)
    tTituloReceber.sCcl = String(STRING_CCL, 0)
    tTituloReceber.sNatureza = String(STRING_NATMOVCTA_CODIGO, 0)

    lErro = Comando_ExecutarPos(lComando, "SELECT FilialEmpresa, Cliente, Filial, SiglaDocumento, NumTitulo, DataEmissao, Status, Saldo, NumParcelas, Valor, ValorIRRF, ValorISS, ISSRetido, ValorINSS, INSSRetido, PercJurosDiarios, PercMulta, Observacao, CondicaoPagto, DataRegistro, PISRetido, COFINSRetido, CSLLRetido, Moeda, Ccl, Natureza, CpoGenerico1, ReajustePeriodicidade, ReajusteBase, ReajustadoAte FROM TitulosRecBaixados WHERE NumIntDoc = ?", _
        0, tTituloReceber.iFilialEmpresa, tTituloReceber.lCliente, tTituloReceber.iFilial, tTituloReceber.sSiglaDocumento, tTituloReceber.lNumTitulo, tTituloReceber.dtDataEmissao, tTituloReceber.iStatus, tTituloReceber.dSaldo, tTituloReceber.iNumParcelas, tTituloReceber.dValor, tTituloReceber.dValorIRRF, tTituloReceber.dValorISS, tTituloReceber.dISSRetido, tTituloReceber.dValorINSS, tTituloReceber.iINSSRetido, tTituloReceber.dPercJurosDiario, tTituloReceber.dPercMulta, tTituloReceber.sObservacao, tTituloReceber.iCondicaoPagto, tTituloReceber.dtDataRegistro, tTituloReceber.dPISRetido, tTituloReceber.dCOFINSRetido, _
        tTituloReceber.dCSLLRetido, tTituloReceber.iMoeda, tTituloReceber.sCcl, tTituloReceber.sNatureza, tTituloReceber.lCpoGenerico1, tTituloReceber.iReajustePeriodicidade, tTituloReceber.dtReajusteBase, tTituloReceber.dtReajustadoAte, objTituloReceber.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then Error 46302

    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 46303

    If lErro <> AD_SQL_SUCESSO Then Error 46304

    tTituloReceber.lNumIntDoc = objTituloReceber.lNumIntDoc
    Call TituloRec_MoverCamposObj(objTituloReceber, tTituloReceber)

    TituloRecBaixado_LeMod = SUCESSO

    Exit Function

Erro_TituloRecBaixado_LeMod:

    TituloRecBaixado_LeMod = Err

    Select Case Err

        Case 46302, 46303
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TITULOS_REC_BAIXADOS", Err)

        Case 46304
            Call Rotina_Erro(vbOKOnly, "ERRO_TITULO_RECEBER_BAIXADO_INEXISTENTE", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148273)

    End Select

    Exit Function

End Function

Function BorderoPag_CriarArqCNAB(ByVal objBorderoPagEmiss As ClassBorderoPagEmissao) As Long
'cria o arquivo de remessa para pagtos atraves de banco
'??? ainda nao completada
Dim lErro As Long, lCNABPagRem As Long
Dim objGeracaoArqCNABPag As New ClassGeracaoArqCNABPag
Dim objBorderoPagto As New ClassBorderoPagto
Dim sNomeArqParam As String

On Error GoTo Erro_BorderoPag_CriarArqCNAB

    With objBorderoPagEmiss
        objBorderoPagto.dtDataEmissao = .dtEmissao
        objBorderoPagto.dtDataEnvio = DATA_NULA
        objBorderoPagto.iCodConta = .iCta
        objBorderoPagto.iExcluido = 0
        objBorderoPagto.iNumArqRemessa = 0
        objBorderoPagto.iTipoDeCobranca = .iTipoCobranca
        objBorderoPagto.iTitOutroBanco = .iLiqTitOutroBco
        objBorderoPagto.lNumero = .lNumero
        objBorderoPagto.lNumIntBordero = .lNumeroInt
        objBorderoPagto.sNomeArq = ""
        objGeracaoArqCNABPag.lQuantTitulos = .iQtdeParcelasSelecionadas
    End With
    
    Set objGeracaoArqCNABPag.objBorderoPagto = objBorderoPagto
    
''    lErro = Sistema_Preparar_Batch(sNomeArqParam)
''    If lErro <> SUCESSO Then Error 62287
''
''    lErro = Sistema_Abrir_Batch(sNomeArqParam)
''    If lErro <> SUCESSO Then Error 11111
''
''    Set gcolModulo = New AdmColModulo
''
''    lErro = CF("Modulos_Le_Empresa_Filial", glEmpresa, giFilialEmpresa, gcolModulo)
''    If lErro <> SUCESSO Then Error 22222

    lErro = CF("BorderosPagto_Criar_ArquivoCNAB", objGeracaoArqCNABPag)
    If lErro <> SUCESSO Then Error 33333
       
    BorderoPag_CriarArqCNAB = SUCESSO
    
    Exit Function
    
Erro_BorderoPag_CriarArqCNAB:

    BorderoPag_CriarArqCNAB = Err
    
    Select Case Err

        Case 7748 To 7752
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148274)

    End Select

    Exit Function

End Function

Private Function BorderoPag_CriarArqCNAB2(ByVal objBorderoPagto As ClassBorderoPagto, lCNABPagRem As Long) As Long
'inclui registros correspodentes a titulos nao baixados
'??? ainda nao completada
Dim lErro As Long, lComando As Long
Dim iSeqBaixaParc As Integer, dValorBaixado As Double, sSiglaDocumento As String, dtDataEmissao As Date, lNumTitulo As Long, dtDataVencimento As Date, lNumIntParcela As Long, sNossoNumero As String, sRazaoSocial As String
Dim sCgc As String, iBanco As Integer, sAgencia As String, sContaCorrente As String, sEndereco As String, sCidade As String, sSiglaEstado As String, sCEP As String
Dim sPagtoId As String
On Error GoTo Erro_BorderoPag_CriarArqCNAB2

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 7744
        
    'inicializa os buffers com zeros
    Call BorderoPag_CriarArqCNAB5(sSiglaDocumento, sNossoNumero, sRazaoSocial, sCgc, sAgencia, sContaCorrente, sEndereco, sCidade, sSiglaEstado, sCEP)
     
    lErro = Comando_Executar(lComando, _
        "SELECT BaixasParcPag.Sequencial, BaixasParcPag.ValorBaixado, " & _
        "TitulosPag.SiglaDocumento, TitulosPag.DataEmissao, TitulosPag.NumTitulo, ParcelasPag.DataVencimento, ParcelasPag.NumIntDoc, ParcelasPag.NossoNumero, Fornecedores.RazaoSocial, FiliaisFornecedores.CGC, FiliaisFornecedores.Banco, FiliaisFornecedores.Agencia, FiliaisFornecedores.ContaCorrente, Enderecos.Endereco, Enderecos.Cidade, Enderecos.SiglaEstado, Enderecos.CEP FROM BorderosPagto, MovimentosContaCorrente, BaixasPag, BaixasParcPag, ParcelasPag, TitulosPag, Fornecedores, FiliaisFornecedores, Enderecos WHERE MovimentosContaCorrente.Tipo = ? AND MovimentosContaCorrente.NumRefInterna = ? AND MovimentosContaCorrente.NumMovto = BaixasPag.NumMovCta AND BaixasPag.NumIntBaixa = BaixasParcPag.NumIntBaixa AND BaixasParcPag.NumIntParcela = ParcelasPag.NumIntDoc AND ParcelasPag.NumIntTitulo = TitulosPag.NumIntDoc AND TitulosPag.Fornecedor = Fornecedores.Codigo AND TitulosPag.Fornecedor = FiliaisFornecedores.CodFornecedor " & _
        "AND TitulosPag.Filial = FiliaisFornecedores.CodFilial AND FiliaisFornecedores.Endereco = Enderecos.Codigo", _
        iSeqBaixaParc, dValorBaixado, sSiglaDocumento, dtDataEmissao, lNumTitulo, dtDataVencimento, lNumIntParcela, sNossoNumero, sRazaoSocial, _
        sCgc, iBanco, sAgencia, sContaCorrente, sEndereco, sCidade, sSiglaEstado, sCEP, MOVCCI_PAGTO_TITULO_POR_BORDERO, objBorderoPagto.lNumIntBordero)
    If lErro <> AD_SQL_SUCESSO Then Error 7753

    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7754
    
    Do While lErro <> AD_SQL_SEM_DADOS
        
        sPagtoId = CStr(lNumIntParcela) & "-" & CStr(iSeqBaixaParc)
        
        'incluir registro no arquivo
''        lErro = CNAB_PagRem_IncluirReg(lCNABPagRem, dValorBaixado, sSiglaDocumento, dtDataVencimento, dtDataEmissao, sPagtoId, lNumTitulo, sNossoNumero, _
''            sEndereco, sCidade, sSiglaEstado, sCEP, sCGC, sRazaoSocial, iBanco, sAgencia, sContaCorrente)
''        If lErro <> SUCESSO Then Error 7756
        
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7755
    
    Loop
    
    lErro = Comando_Fechar(lComando)
    
    BorderoPag_CriarArqCNAB2 = SUCESSO
    
    Exit Function
    
Erro_BorderoPag_CriarArqCNAB2:

    BorderoPag_CriarArqCNAB2 = Err
    
    Select Case Err

        Case 7756
        
        Case 7753, 7754, 7755
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PAGTO_BORDERO", Err)
        
        Case 7744
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148275)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Private Sub BorderoPag_CriarArqCNAB5(sSiglaDocumento As String, sNossoNumero As String, sRazaoSocial As String, sCgc As String, sAgencia As String, sContaCorrente As String, sEndereco As String, sCidade As String, sSiglaEstado As String, sCEP As String)
'??? ainda nao completada

    sSiglaDocumento = String(STRING_SIGLA_DOCUMENTO, 0)
    sNossoNumero = String(STRING_NOSSO_NUMERO, 0)
    sRazaoSocial = String(STRING_FORNECEDOR_RAZAO_SOC, 0)
    sCgc = String(STRING_CGC, 0)
    sAgencia = String(STRING_AGENCIA, 0)
    sContaCorrente = String(STRING_CONTA_CORRENTE, 0)
    sEndereco = String(STRING_ENDERECO, 0)
    sCidade = String(STRING_CIDADE, 0)
    sSiglaEstado = String(STRING_ESTADO, 0)
    sCEP = String(STRING_CEP, 0)

End Sub

Private Function BorderoPag_CriarArqCNAB1(ByVal objBorderoPagto As ClassBorderoPagto, lCNABPagRem As Long) As Long
'passar dados gerais da empresa e da cta corrente
'??? ainda nao completada
Dim lErro As Long
Dim objContaCorrenteInt As New ClassContasCorrentesInternas
On Error GoTo Erro_BorderoPag_CriarArqCNAB1

    'passar dados da cta corrente da empresa
    lErro = CF("ContaCorrenteInt_Le", objBorderoPagto.iCodConta, objContaCorrenteInt)
    If lErro <> SUCESSO Then Error 7745
    
''    'abre o arquivo CNAB
''    lErro = CNAB_PagRem_Abrir(lCNABPagRem, objBorderoPagto.sNomeArq, objContaCorrenteInt.iCodBanco, objBorderoPagto.iNumArqRemessa, objBorderoPagto.dtDataEmissao, objBorderoPagto.iTipoDeCobranca, objBorderoPagto.iTitOutroBanco)
''    If lErro <> SUCESSO Then Error 7746
''
''    'passar dados da cta corrente pagadora
''    lErro = CNAB_PagRem_DefCtaEmpresa(lCNABPagRem, objContaCorrenteInt.sAgencia, objContaCorrenteInt.sNumConta, objContaCorrenteInt.sDVAgConta)
''    If lErro <> SUCESSO Then Error 7747
    
    BorderoPag_CriarArqCNAB1 = SUCESSO
    
    Exit Function
    
Erro_BorderoPag_CriarArqCNAB1:

    BorderoPag_CriarArqCNAB1 = Err
    
    Select Case Err

        Case 7745, 7746, 7747

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148276)

    End Select

    Exit Function

End Function

Private Function ParcelaRec_PodeIncluirBordCobr(ByVal objParcelaRec As ClassParcelaReceber, ByVal objInfoParcRec As ClassInfoParcRec) As Long
Dim lErro As Long
On Error GoTo Erro_ParcelaRec_PodeIncluirBordCobr

    If objParcelaRec.iStatus <> STATUS_ABERTO Then Error 7542

    If objParcelaRec.iCobrador <> COBRADOR_PROPRIA_EMPRESA Or objParcelaRec.iCarteiraCobranca <> CARTEIRA_CARTEIRA Then Error 7543

    If objParcelaRec.dtDataVencimento <> objInfoParcRec.dtVencimento Then Error 7544

    If objParcelaRec.dSaldo <> objInfoParcRec.dValor Then Error 7545

    ParcelaRec_PodeIncluirBordCobr = SUCESSO

    Exit Function

Erro_ParcelaRec_PodeIncluirBordCobr:

    ParcelaRec_PodeIncluirBordCobr = Err

    Select Case Err

        Case 7542 'a parcela tem que estar aberta
            Call Rotina_Erro(vbOKOnly, "ERRO_PARCELA_NAO_ABERTA", Err)

        Case 7543 'o cobrador tem que estar em aberto
            Call Rotina_Erro(vbOKOnly, "ERRO_COBRADOR_JA_DEFINIDO", Err)

        Case 7544 'a data de vencimento foi alterada após a selecao das parcelas
            Call Rotina_Erro(vbOKOnly, "ERRO_BORD_COBR_VENCTO_ALTERADO", Err)

        Case 7545 'o valor a ser cobrado foi alterado após a selecao das parcelas
            Call Rotina_Erro(vbOKOnly, "ERRO_BORD_COBR_VALOR_ALTERADO", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148277)

    End Select

    Exit Function

End Function

Private Function FluxoAnalitico_Le_Pagtos(ByVal objFluxo As ClassFluxo, alErro() As Long, alComando() As Long, tFluxoAux As typeFluxoAux) As Long
'Lê as tabelas de pagamentos associados ao fluxo de caixa

Dim lErro As Long
Dim iExiste As Integer

On Error GoTo Erro_FluxoAnalitico_Le_Pagtos

    tFluxoAux.tCreditoPagar.sSiglaDocumento = String(STRING_SIGLA_DOCUMENTO, 0)
    tFluxoAux.sNomeReduzido_NFsPag = String(STRING_FORNECEDOR_NOME_REDUZIDO, 0)
    tFluxoAux.sDescricaoTipo_NFsPag = String(STRING_TIPO_FORNECEDOR_DESCRICAO, 0)

    tFluxoAux.sNomeReduzido_CreditoPagar = String(STRING_FORNECEDOR_NOME_REDUZIDO, 0)
    tFluxoAux.sDescricaoTipo_CreditoPagar = String(STRING_TIPO_FORNECEDOR_DESCRICAO, 0)

'    If giTipoVersao = VERSAO_FULL Then

        'seleciona os creditos a pagar
        If giFilialEmpresa = EMPRESA_TODA Then
    
            lErro = CF("FilialEmpresa_Real", iExiste)
            If lErro <> SUCESSO Then gError 195396
    
            If iExiste = 0 Then
    
                'Pesquisa todos os creditos a pagar no ambito empresa
                alErro(1) = Comando_Executar(alComando(1), "SELECT FilialEmpresa, Fornecedor, Filial, SiglaDocumento, NumTitulo, Saldo, Fornecedores.Tipo, Fornecedores.NomeReduzido, TiposDeFornecedor.Descricao FROM FluxoCredAntecip, Fornecedores, TiposDeFornecedor WHERE FluxoId = ? AND Saldo > 0 AND TipoReg = ? AND FluxoCredAntecip.Fornecedor = Fornecedores.Codigo AND Fornecedores.Tipo = TiposDeFornecedor.Codigo ORDER BY Fornecedor, Filial", tFluxoAux.tCreditoPagar.iFilialEmpresa, tFluxoAux.tCreditoPagar.lFornecedor, tFluxoAux.tCreditoPagar.iFilial, tFluxoAux.tCreditoPagar.sSiglaDocumento, tFluxoAux.tCreditoPagar.lNumTitulo, tFluxoAux.tCreditoPagar.dSaldo, tFluxoAux.iTipoForn_CreditoPagar, tFluxoAux.sNomeReduzido_CreditoPagar, tFluxoAux.sDescricaoTipo_CreditoPagar, objFluxo.lFluxoId, FLUXOANALITICO_TIPOREG_PAGTO)
                If alErro(1) <> AD_SQL_SUCESSO Then gError 10966
    
            Else
            
                alErro(1) = Comando_Executar(alComando(1), "SELECT FilialEmpresa, Fornecedor, Filial, SiglaDocumento, NumTitulo, Saldo, Fornecedores.Tipo, Fornecedores.NomeReduzido, TiposDeFornecedor.Descricao FROM FluxoCredAntecip, Fornecedores, TiposDeFornecedor WHERE FluxoId = ? AND FilialEmpresa > ? AND Saldo > 0 and TipoReg = ? AND FluxoCredAntecip.Fornecedor = Fornecedores.Codigo AND Fornecedores.Tipo = TiposDeFornecedor.Codigo ORDER BY Fornecedor, Filial", tFluxoAux.tCreditoPagar.iFilialEmpresa, tFluxoAux.tCreditoPagar.lFornecedor, tFluxoAux.tCreditoPagar.iFilial, tFluxoAux.tCreditoPagar.sSiglaDocumento, tFluxoAux.tCreditoPagar.lNumTitulo, tFluxoAux.tCreditoPagar.dSaldo, tFluxoAux.iTipoForn_CreditoPagar, tFluxoAux.sNomeReduzido_CreditoPagar, tFluxoAux.sDescricaoTipo_CreditoPagar, objFluxo.lFluxoId, 50, FLUXOANALITICO_TIPOREG_PAGTO)
                If alErro(1) <> AD_SQL_SUCESSO Then gError 195397
            
            End If
    
    
        Else
    
            'Pesquisa todos os creditos a pagar no ambito da filial
            alErro(1) = Comando_Executar(alComando(1), "SELECT FilialEmpresa, Fornecedor, Filial, SiglaDocumento, NumTitulo, Saldo, Fornecedores.Tipo, Fornecedores.NomeReduzido, TiposDeFornecedor.Descricao FROM FluxoCredAntecip, Fornecedores, TiposDeFornecedor WHERE FluxoId = ? AND FilialEmpresa = ? AND Saldo > 0 and TipoReg = ? AND FluxoCredAntecip.Fornecedor = Fornecedores.Codigo AND Fornecedores.Tipo = TiposDeFornecedor.Codigo ORDER BY Fornecedor, Filial", tFluxoAux.tCreditoPagar.iFilialEmpresa, tFluxoAux.tCreditoPagar.lFornecedor, tFluxoAux.tCreditoPagar.iFilial, tFluxoAux.tCreditoPagar.sSiglaDocumento, tFluxoAux.tCreditoPagar.lNumTitulo, tFluxoAux.tCreditoPagar.dSaldo, tFluxoAux.iTipoForn_CreditoPagar, tFluxoAux.sNomeReduzido_CreditoPagar, tFluxoAux.sDescricaoTipo_CreditoPagar, objFluxo.lFluxoId, giFilialEmpresa, FLUXOANALITICO_TIPOREG_PAGTO)
            If alErro(1) <> AD_SQL_SUCESSO Then gError 10967
    
        End If

'    ElseIf giTipoVersao = VERSAO_LIGHT Then
'
'        'seleciona os creditos a pagar
'        If giFilialEmpresa = EMPRESA_TODA Then
'
'            'Pesquisa todos os creditos a pagar no ambito empresa
'            alErro(1) = Comando_Executar(alComando(1), "SELECT FilialEmpresa, Fornecedor, Filial, SiglaDocumento, NumTitulo, Saldo, Fornecedores.NomeReduzido FROM FluxoCredAntecip, Fornecedores WHERE FluxoId = ? AND Saldo > 0 AND TipoReg = ? AND FluxoCredAntecip.Fornecedor = Fornecedores.Codigo ORDER BY Fornecedor, Filial", tFluxoAux.tCreditoPagar.iFilialEmpresa, tFluxoAux.tCreditoPagar.lFornecedor, tFluxoAux.tCreditoPagar.iFilial, tFluxoAux.tCreditoPagar.sSiglaDocumento, tFluxoAux.tCreditoPagar.lNumTitulo, tFluxoAux.tCreditoPagar.dSaldo, tFluxoAux.sNomeReduzido_CreditoPagar, objFluxo.lFluxoId, FLUXOANALITICO_TIPOREG_PAGTO)
'            If alErro(1) <> AD_SQL_SUCESSO Then gError 10966
'
'        Else
'
'            'Pesquisa todos os creditos a pagar no ambito da filial
'            alErro(1) = Comando_Executar(alComando(1), "SELECT FilialEmpresa, Fornecedor, Filial, SiglaDocumento, NumTitulo, Saldo, Fornecedores.NomeReduzido FROM FluxoCredAntecip, Fornecedores WHERE FluxoId = ? AND FilialEmpresa = ? AND Saldo > 0 and TipoReg = ? AND FluxoCredAntecip.Fornecedor = Fornecedores.Codigo ORDER BY Fornecedor, Filial", tFluxoAux.tCreditoPagar.iFilialEmpresa, tFluxoAux.tCreditoPagar.lFornecedor, tFluxoAux.tCreditoPagar.iFilial, tFluxoAux.tCreditoPagar.sSiglaDocumento, tFluxoAux.tCreditoPagar.lNumTitulo, tFluxoAux.tCreditoPagar.dSaldo, tFluxoAux.sNomeReduzido_CreditoPagar, objFluxo.lFluxoId, giFilialEmpresa, FLUXOANALITICO_TIPOREG_PAGTO)
'            If alErro(1) <> AD_SQL_SUCESSO Then gError 10967
'
'        End If
'
'    End If

    tFluxoAux.sNomeReduzido_NFsPag = String(STRING_FORNECEDOR_NOME_REDUZIDO, 0)
    tFluxoAux.sDescricaoTipo_NFsPag = String(STRING_TIPO_FORNECEDOR_DESCRICAO, 0)

    tFluxoAux.sNomeReduzido_CreditoPagar = String(STRING_FORNECEDOR_NOME_REDUZIDO, 0)
    tFluxoAux.sDescricaoTipo_CreditoPagar = String(STRING_TIPO_FORNECEDOR_DESCRICAO, 0)


'    If giTipoVersao = VERSAO_FULL Then

        'seleciona as notas fiscais a pagar
        If giFilialEmpresa = EMPRESA_TODA Then
    
            If iExiste = 0 Then
    
                'Pesquisa as Notas Fiscais a Pagar com vencimento no periodo em questão no ambito empresa
                alErro(2) = Comando_Executar(alComando(2), "SELECT FilialEmpresa, Fornecedor, Filial, NumNotaFiscal, DataVencimento, ValorTotal, Fornecedores.Tipo, Fornecedores.NomeReduzido, TiposDeFornecedor.Descricao, NFsPag.NumIntDoc FROM NFsPag, Fornecedores, TiposDeFornecedor WHERE Status = ? AND DataVencimento >= ? AND DataVencimento <= ? AND NumIntTitPag = 0 AND NFsPag.Fornecedor = Fornecedores.Codigo AND Fornecedores.Tipo = TiposDeFornecedor.Codigo ORDER BY Fornecedor, Filial, DataVencimento", tFluxoAux.tNFsPag.iFilialEmpresa, tFluxoAux.tNFsPag.lFornecedor, tFluxoAux.tNFsPag.iFilial, tFluxoAux.tNFsPag.lNumNotaFiscal, tFluxoAux.tNFsPag.dtDataVencimento, tFluxoAux.tNFsPag.dValorTotal, tFluxoAux.iTipoForn_NFsPag, tFluxoAux.sNomeReduzido_NFsPag, tFluxoAux.sDescricaoTipo_NFsPag, tFluxoAux.tNFsPag.lNumIntDoc, STATUS_LANCADO, objFluxo.dtDataBase - 5, objFluxo.dtDataFinal + 7)
                If alErro(2) <> AD_SQL_SUCESSO Then gError 10968
                
            Else
            
                'Pesquisa as Notas Fiscais a Pagar com vencimento no periodo em questão no ambito filial
                alErro(2) = Comando_Executar(alComando(2), "SELECT FilialEmpresa, Fornecedor, Filial, NumNotaFiscal, DataVencimento, ValorTotal, Fornecedores.Tipo, Fornecedores.NomeReduzido, TiposDeFornecedor.Descricao, NFsPag.NumIntDoc FROM NFsPag, Fornecedores, TiposDeFornecedor WHERE Status = ? AND FilialEmpresa > ? AND DataVencimento >= ? AND DataVencimento <= ? AND NumIntTitPag = 0 AND NFsPag.Fornecedor = Fornecedores.Codigo AND Fornecedores.Tipo = TiposDeFornecedor.Codigo ORDER BY Fornecedor, Filial, DataVencimento", tFluxoAux.tNFsPag.iFilialEmpresa, tFluxoAux.tNFsPag.lFornecedor, tFluxoAux.tNFsPag.iFilial, tFluxoAux.tNFsPag.lNumNotaFiscal, tFluxoAux.tNFsPag.dtDataVencimento, tFluxoAux.tNFsPag.dValorTotal, tFluxoAux.iTipoForn_NFsPag, tFluxoAux.sNomeReduzido_NFsPag, tFluxoAux.sDescricaoTipo_NFsPag, tFluxoAux.tNFsPag.lNumIntDoc, STATUS_LANCADO, 50, objFluxo.dtDataBase - 5, objFluxo.dtDataFinal + 7)
                If alErro(2) <> AD_SQL_SUCESSO Then gError 195398
                
            End If
    
        Else
    
            'Pesquisa as Notas Fiscais a Pagar com vencimento no periodo em questão no ambito filial
            alErro(2) = Comando_Executar(alComando(2), "SELECT FilialEmpresa, Fornecedor, Filial, NumNotaFiscal, DataVencimento, ValorTotal, Fornecedores.Tipo, Fornecedores.NomeReduzido, TiposDeFornecedor.Descricao, NFsPag.NumIntDoc FROM NFsPag, Fornecedores, TiposDeFornecedor WHERE Status = ? AND FilialEmpresa = ? AND DataVencimento >= ? AND DataVencimento <= ? AND NumIntTitPag = 0 AND NFsPag.Fornecedor = Fornecedores.Codigo AND Fornecedores.Tipo = TiposDeFornecedor.Codigo ORDER BY Fornecedor, Filial, DataVencimento", tFluxoAux.tNFsPag.iFilialEmpresa, tFluxoAux.tNFsPag.lFornecedor, tFluxoAux.tNFsPag.iFilial, tFluxoAux.tNFsPag.lNumNotaFiscal, tFluxoAux.tNFsPag.dtDataVencimento, tFluxoAux.tNFsPag.dValorTotal, tFluxoAux.iTipoForn_NFsPag, tFluxoAux.sNomeReduzido_NFsPag, tFluxoAux.sDescricaoTipo_NFsPag, tFluxoAux.tNFsPag.lNumIntDoc, STATUS_LANCADO, giFilialEmpresa, objFluxo.dtDataBase - 5, objFluxo.dtDataFinal + 7)
            If alErro(2) <> AD_SQL_SUCESSO Then gError 10969
    
        End If

'    ElseIf giTipoVersao = VERSAO_LIGHT Then
'
'        'seleciona as notas fiscais a pagar
'        If giFilialEmpresa = EMPRESA_TODA Then
'
'            'Pesquisa as Notas Fiscais a Pagar com vencimento no periodo em questão no ambito empresa
'            alErro(2) = Comando_Executar(alComando(2), "SELECT FilialEmpresa, Fornecedor, Filial, NumNotaFiscal, DataVencimento, ValorTotal, Fornecedores.NomeReduzido, NFsPag.NumIntDoc FROM NFsPag, Fornecedores WHERE Status = ? AND DataVencimento >= ? AND DataVencimento <= ? AND NumIntTitPag = 0 AND NFsPag.Fornecedor = Fornecedores.Codigo ORDER BY Fornecedor, Filial, DataVencimento", tFluxoAux.tNFsPag.iFilialEmpresa, tFluxoAux.tNFsPag.lFornecedor, tFluxoAux.tNFsPag.iFilial, tFluxoAux.tNFsPag.lNumNotaFiscal, tFluxoAux.tNFsPag.dtDataVencimento, tFluxoAux.tNFsPag.dValorTotal, tFluxoAux.sNomeReduzido_NFsPag, tFluxoAux.tNFsPag.lNumIntDoc, STATUS_LANCADO, objFluxo.dtDataBase - 5, objFluxo.dtDataFinal + 7)
'            If alErro(2) <> AD_SQL_SUCESSO Then gError 10968
'
'        Else
'
'            'Pesquisa as Notas Fiscais a Pagar com vencimento no periodo em questão no ambito filial
'            alErro(2) = Comando_Executar(alComando(2), "SELECT FilialEmpresa, Fornecedor, Filial, NumNotaFiscal, DataVencimento, ValorTotal, Fornecedores.NomeReduzido, NFsPag.NumIntDoc FROM NFsPag, Fornecedores WHERE Status = ? AND FilialEmpresa = ? AND DataVencimento >= ? AND DataVencimento <= ? AND NumIntTitPag = 0 AND NFsPag.Fornecedor = Fornecedores.Codigo ORDER BY Fornecedor, Filial, DataVencimento", tFluxoAux.tNFsPag.iFilialEmpresa, tFluxoAux.tNFsPag.lFornecedor, tFluxoAux.tNFsPag.iFilial, tFluxoAux.tNFsPag.lNumNotaFiscal, tFluxoAux.tNFsPag.dtDataVencimento, tFluxoAux.tNFsPag.dValorTotal, tFluxoAux.sNomeReduzido_NFsPag, tFluxoAux.tNFsPag.lNumIntDoc, STATUS_LANCADO, giFilialEmpresa, objFluxo.dtDataBase - 5, objFluxo.dtDataFinal + 7)
'            If alErro(2) <> AD_SQL_SUCESSO Then gError 10969
'
'        End If
'
'    End If

    tFluxoAux.sNomeReduzido_TitPag = String(STRING_FORNECEDOR_NOME_REDUZIDO, 0)
    tFluxoAux.tTituloPagar.sSiglaDocumento = String(STRING_TITULO_SIGLADOCUMENTO, 0)
    tFluxoAux.tTituloPagar.sHistorico = String(STRING_NFSPAG_HISTORICO, 0)
    tFluxoAux.sDescricaoTipo_TitPag = String(STRING_TIPO_FORNECEDOR_DESCRICAO, 0)

    tFluxoAux.sNomeReduzido_CreditoPagar = String(STRING_FORNECEDOR_NOME_REDUZIDO, 0)
    tFluxoAux.sDescricaoTipo_CreditoPagar = String(STRING_TIPO_FORNECEDOR_DESCRICAO, 0)

    'If giTipoVersao = VERSAO_FULL Then

        'seleciona as parcelas a pagar
        If giFilialEmpresa = EMPRESA_TODA Then
    
            'Pesquisa todas as parcelas a pagar com vencimento no periodo em questão, com saldo, aberto no ambito empresa
    
            If iExiste = 0 Then
    
                alErro(3) = Comando_Executar(alComando(3), "SELECT ParcelasPag.Saldo, DataVencimento, Valor, NumParcela, NumTitulo, Fornecedor, Filial, FilialEmpresa, SiglaDocumento, Fornecedores.Tipo, Fornecedores.NomeReduzido, TiposDeFornecedor.Descricao, ParcelasPag.NumIntDoc, TitulosPag.Historico FROM ParcelasPag, TitulosPag, Fornecedores, TiposDeFornecedor WHERE ParcelasPag.Status = ? AND ParcelasPag.DataVencimento >=? AND ParcelasPag.DataVencimento <= ? AND ParcelasPag.Saldo > 0 AND ParcelasPag.NumIntTitulo = TitulosPag.NumIntDoc AND TitulosPag.Fornecedor = Fornecedores.Codigo AND Fornecedores.Tipo = TiposDeFornecedor.Codigo ORDER BY Fornecedor, Filial, DataVencimento", _
                tFluxoAux.tParcelaPagar.dSaldo, tFluxoAux.tParcelaPagar.dtDataVencimento, tFluxoAux.tParcelaPagar.dValor, tFluxoAux.tParcelaPagar.iNumParcela, tFluxoAux.tTituloPagar.lNumTitulo, tFluxoAux.tTituloPagar.lFornecedor, tFluxoAux.tTituloPagar.iFilial, tFluxoAux.tTituloPagar.iFilialEmpresa, tFluxoAux.tTituloPagar.sSiglaDocumento, tFluxoAux.iTipoForn_TitPag, tFluxoAux.sNomeReduzido_TitPag, tFluxoAux.sDescricaoTipo_TitPag, tFluxoAux.tParcelaPagar.lNumIntDoc, tFluxoAux.tTituloPagar.sHistorico, STATUS_ABERTO, objFluxo.dtDataBase - 5, objFluxo.dtDataFinal + 7)
                If alErro(3) <> AD_SQL_SUCESSO Then gError 10970
                
            Else
            
                'Pesquisa todas as parcelas a pagar com vencimento no periodo em questão, com saldo, aberto no ambito filial
                alErro(3) = Comando_Executar(alComando(3), "SELECT ParcelasPag.Saldo, DataVencimento, Valor, NumParcela, NumTitulo, Fornecedor, Filial, SiglaDocumento, Fornecedores.Tipo, Fornecedores.NomeReduzido, TiposDeFornecedor.Descricao, ParcelasPag.NumIntDoc, TitulosPag.Historico FROM TitulosPag, ParcelasPag, Fornecedores, TiposDeFornecedor WHERE FilialEmpresa > ? AND ParcelasPag.Status = ? AND ParcelasPag.DataVencimento >=? AND ParcelasPag.DataVencimento <= ? AND ParcelasPag.Saldo > 0 AND ParcelasPag.NumIntTitulo = TitulosPag.NumIntDoc AND TitulosPag.Fornecedor = Fornecedores.Codigo AND Fornecedores.Tipo = TiposDeFornecedor.Codigo ORDER BY Fornecedor, Filial, DataVencimento", _
                tFluxoAux.tParcelaPagar.dSaldo, tFluxoAux.tParcelaPagar.dtDataVencimento, tFluxoAux.tParcelaPagar.dValor, tFluxoAux.tParcelaPagar.iNumParcela, tFluxoAux.tTituloPagar.lNumTitulo, tFluxoAux.tTituloPagar.lFornecedor, tFluxoAux.tTituloPagar.iFilial, tFluxoAux.tTituloPagar.sSiglaDocumento, tFluxoAux.iTipoForn_TitPag, tFluxoAux.sNomeReduzido_TitPag, tFluxoAux.sDescricaoTipo_TitPag, tFluxoAux.tParcelaPagar.lNumIntDoc, tFluxoAux.tTituloPagar.sHistorico, 50, STATUS_ABERTO, objFluxo.dtDataBase - 5, objFluxo.dtDataFinal + 7)
                If alErro(3) <> AD_SQL_SUCESSO Then gError 195399
                
            End If
    
        Else
    
            'Pesquisa todas as parcelas a pagar com vencimento no periodo em questão, com saldo, aberto no ambito filial
            alErro(3) = Comando_Executar(alComando(3), "SELECT ParcelasPag.Saldo, DataVencimento, Valor, NumParcela, NumTitulo, Fornecedor, Filial, SiglaDocumento, Fornecedores.Tipo, Fornecedores.NomeReduzido, TiposDeFornecedor.Descricao, ParcelasPag.NumIntDoc, TitulosPag.Historico FROM TitulosPag, ParcelasPag, Fornecedores, TiposDeFornecedor WHERE FilialEmpresa = ? AND ParcelasPag.Status = ? AND ParcelasPag.DataVencimento >=? AND ParcelasPag.DataVencimento <= ? AND ParcelasPag.Saldo > 0 AND ParcelasPag.NumIntTitulo = TitulosPag.NumIntDoc AND TitulosPag.Fornecedor = Fornecedores.Codigo AND Fornecedores.Tipo = TiposDeFornecedor.Codigo ORDER BY Fornecedor, Filial, DataVencimento", _
            tFluxoAux.tParcelaPagar.dSaldo, tFluxoAux.tParcelaPagar.dtDataVencimento, tFluxoAux.tParcelaPagar.dValor, tFluxoAux.tParcelaPagar.iNumParcela, tFluxoAux.tTituloPagar.lNumTitulo, tFluxoAux.tTituloPagar.lFornecedor, tFluxoAux.tTituloPagar.iFilial, tFluxoAux.tTituloPagar.sSiglaDocumento, tFluxoAux.iTipoForn_TitPag, tFluxoAux.sNomeReduzido_TitPag, tFluxoAux.sDescricaoTipo_TitPag, tFluxoAux.tParcelaPagar.lNumIntDoc, tFluxoAux.tTituloPagar.sHistorico, giFilialEmpresa, STATUS_ABERTO, objFluxo.dtDataBase - 5, objFluxo.dtDataFinal + 7)
            If alErro(3) <> AD_SQL_SUCESSO Then gError 10971
    
        End If

'    ElseIf giTipoVersao = VERSAO_LIGHT Then
'
'        'seleciona as parcelas a pagar
'        If giFilialEmpresa = EMPRESA_TODA Then
'
'            'Pesquisa todas as parcelas a pagar com vencimento no periodo em questão, com saldo, aberto no ambito empresa
'
'            alErro(3) = Comando_Executar(alComando(3), "SELECT ParcelasPag.Saldo, DataVencimento, Valor, NumParcela, NumTitulo, Fornecedor, Filial, FilialEmpresa, SiglaDocumento, Fornecedores.NomeReduzido, ParcelasPag.NumIntDoc FROM ParcelasPag, TitulosPag, Fornecedores WHERE ParcelasPag.Status = ? AND ParcelasPag.DataVencimento >=? AND ParcelasPag.DataVencimento <= ? AND ParcelasPag.Saldo > 0 AND ParcelasPag.NumIntTitulo = TitulosPag.NumIntDoc AND TitulosPag.Fornecedor = Fornecedores.Codigo ORDER BY Fornecedor, Filial, DataVencimento", _
'            tFluxoAux.tParcelaPagar.dSaldo, tFluxoAux.tParcelaPagar.dtDataVencimento, tFluxoAux.tParcelaPagar.dValor, tFluxoAux.tParcelaPagar.iNumParcela, tFluxoAux.tTituloPagar.lNumTitulo, tFluxoAux.tTituloPagar.lFornecedor, tFluxoAux.tTituloPagar.iFilial, tFluxoAux.tTituloPagar.iFilialEmpresa, tFluxoAux.tTituloPagar.sSiglaDocumento, tFluxoAux.sNomeReduzido_TitPag, tFluxoAux.tParcelaPagar.lNumIntDoc, STATUS_ABERTO, objFluxo.dtDataBase - 5, objFluxo.dtDataFinal + 7)
'            If alErro(3) <> AD_SQL_SUCESSO Then gError 10970
'
'        Else
'
'            'Pesquisa todas as parcelas a pagar com vencimento no periodo em questão, com saldo, aberto no ambito filial
'            alErro(3) = Comando_Executar(alComando(3), "SELECT ParcelasPag.Saldo, DataVencimento, Valor, NumParcela, NumTitulo, Fornecedor, Filial, SiglaDocumento, Fornecedores.NomeReduzido, ParcelasPag.NumIntDoc FROM TitulosPag, ParcelasPag, Fornecedores WHERE FilialEmpresa = ? AND ParcelasPag.Status = ? AND ParcelasPag.DataVencimento >=? AND ParcelasPag.DataVencimento <= ? AND ParcelasPag.Saldo > 0 AND ParcelasPag.NumIntTitulo = TitulosPag.NumIntDoc AND TitulosPag.Fornecedor = Fornecedores.Codigo ORDER BY Fornecedor, Filial, DataVencimento", _
'            tFluxoAux.tParcelaPagar.dSaldo, tFluxoAux.tParcelaPagar.dtDataVencimento, tFluxoAux.tParcelaPagar.dValor, tFluxoAux.tParcelaPagar.iNumParcela, tFluxoAux.tTituloPagar.lNumTitulo, tFluxoAux.tTituloPagar.lFornecedor, tFluxoAux.tTituloPagar.iFilial, tFluxoAux.tTituloPagar.sSiglaDocumento, tFluxoAux.sNomeReduzido_TitPag, tFluxoAux.tParcelaPagar.lNumIntDoc, giFilialEmpresa, STATUS_ABERTO, objFluxo.dtDataBase - 5, objFluxo.dtDataFinal + 7)
'            If alErro(3) <> AD_SQL_SUCESSO Then gError 10971
'
'        End If
'
'    End If

    alErro(1) = Comando_BuscarPrimeiro(alComando(1))
    If alErro(1) <> AD_SQL_SUCESSO And alErro(1) <> AD_SQL_SEM_DADOS Then gError 10972

    alErro(2) = Fluxo_Comando_BuscarProximo(alComando(2), tFluxoAux.tNFsPag.dtDataVencimento, objFluxo, 0)
    If alErro(2) <> AD_SQL_SUCESSO And alErro(2) <> AD_SQL_SEM_DADOS Then gError 10973

    alErro(3) = Fluxo_Comando_BuscarProximo(alComando(3), tFluxoAux.tParcelaPagar.dtDataVencimento, objFluxo, 0)
    If alErro(3) <> AD_SQL_SUCESSO And alErro(3) <> AD_SQL_SEM_DADOS Then gError 10974

    lErro = FluxoAnalitico_Le_Contratos_Forn(objFluxo, alErro(4), alComando(10), tFluxoAux)
    If lErro <> SUCESSO Then gError 133317

    lErro = FluxoAnalitico_Le_PC(objFluxo, alErro(5), alComando(11), tFluxoAux)
    If lErro <> SUCESSO Then gError 188615
    
    FluxoAnalitico_Le_Pagtos = SUCESSO

    Exit Function

Erro_FluxoAnalitico_Le_Pagtos:

    FluxoAnalitico_Le_Pagtos = gErr

    Select Case gErr

        Case 10966, 10967, 10972, 195397
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CREDITO_PAG_FORN", gErr)

        Case 10968, 10969, 10973, 195398
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFSPAG", gErr)

        Case 10970, 10971, 10974, 195399
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_PAG1", gErr)
            
        Case 133317, 188615, 195396

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148278)

    End Select

    Exit Function

End Function

Private Function FluxoAnalitico_Le_Recebtos(ByVal objFluxo As ClassFluxo, alErro() As Long, alComando() As Long, tFluxoAux1 As typeFluxoAux) As Long
'le as tabelas de recebimentos associados ao fluxo de caixa

Dim lErro As Long
Dim iExiste As Integer

On Error GoTo Erro_FluxoAnalitico_Le_Recebtos

    tFluxoAux1.tDebitosRecCli.sSiglaDocumento = String(STRING_SIGLA_DOCUMENTO, 0)
    tFluxoAux1.sNomeReduzido_NFsRec = String(STRING_CLIENTE_NOME_REDUZIDO, 0)
    tFluxoAux1.sDescricaoTipo_NFsRec = String(STRING_TIPO_CLIENTE_DESCRICAO, 0)

    tFluxoAux1.sNomeReduzido_DebitosRecCli = String(STRING_CLIENTE_NOME_REDUZIDO, 0)
    tFluxoAux1.sDescricaoTipo_DebitosRecCli = String(STRING_TIPO_CLIENTE_DESCRICAO, 0)

'    If giTipoVersao = VERSAO_FULL Then

        'seleciona os debitos a receber
        If giFilialEmpresa = EMPRESA_TODA Then
    
            lErro = CF("FilialEmpresa_Real", iExiste)
            If lErro <> SUCESSO Then gError 195400
    
            If iExiste = 0 Then
    
                'Pesquisa todos os debitos a receber no ambito empresa
                alErro(1) = Comando_Executar(alComando(1), "SELECT FilialEmpresa, Fornecedor, Filial, SiglaDocumento, NumTitulo, Saldo, Clientes.Tipo, Clientes.NomeReduzido, TiposDeCliente.Descricao FROM FluxoCredAntecip, Clientes, TiposDeCliente  WHERE FluxoId = ? AND TipoReg = ? AND Saldo > 0 AND FluxoCredAntecip.Fornecedor = Clientes.Codigo AND Clientes.Tipo = TiposDeCliente.Codigo ORDER BY Fornecedor, Filial", tFluxoAux1.tDebitosRecCli.iFilialEmpresa, tFluxoAux1.tDebitosRecCli.lCliente, tFluxoAux1.tDebitosRecCli.iFilial, tFluxoAux1.tDebitosRecCli.sSiglaDocumento, tFluxoAux1.tDebitosRecCli.lNumTitulo, tFluxoAux1.tDebitosRecCli.dSaldo, tFluxoAux1.iTipoForn_DebitosRecCli, tFluxoAux1.sNomeReduzido_DebitosRecCli, tFluxoAux1.sDescricaoTipo_DebitosRecCli, objFluxo.lFluxoId, FLUXOANALITICO_TIPOREG_RECEBTO)
                If alErro(1) <> AD_SQL_SUCESSO Then gError 20026
    
            Else
    
                'Pesquisa todos os debitos a receber no ambito da filial
                alErro(1) = Comando_Executar(alComando(1), "SELECT FilialEmpresa, Fornecedor, Filial, SiglaDocumento, NumTitulo, Saldo, Clientes.Tipo, Clientes.NomeReduzido, TiposDeCliente.Descricao FROM FluxoCredAntecip, Clientes, TiposDeCliente  WHERE FluxoId = ? AND FilialEmpresa > ? AND TipoReg = ? AND Saldo > 0 AND FluxoCredAntecip.Fornecedor = Clientes.Codigo AND Clientes.Tipo = TiposDeCliente.Codigo ORDER BY Fornecedor, Filial", tFluxoAux1.tDebitosRecCli.iFilialEmpresa, tFluxoAux1.tDebitosRecCli.lCliente, tFluxoAux1.tDebitosRecCli.iFilial, tFluxoAux1.tDebitosRecCli.sSiglaDocumento, tFluxoAux1.tDebitosRecCli.lNumTitulo, tFluxoAux1.tDebitosRecCli.dSaldo, tFluxoAux1.iTipoForn_DebitosRecCli, tFluxoAux1.sNomeReduzido_DebitosRecCli, tFluxoAux1.sDescricaoTipo_DebitosRecCli, objFluxo.lFluxoId, 50, FLUXOANALITICO_TIPOREG_RECEBTO)
                If alErro(1) <> AD_SQL_SUCESSO Then gError 195401
    
    
            End If
        Else
    
            'Pesquisa todos os debitos a receber no ambito da filial
            alErro(1) = Comando_Executar(alComando(1), "SELECT FilialEmpresa, Fornecedor, Filial, SiglaDocumento, NumTitulo, Saldo, Clientes.Tipo, Clientes.NomeReduzido, TiposDeCliente.Descricao FROM FluxoCredAntecip, Clientes, TiposDeCliente  WHERE FluxoId = ? AND FilialEmpresa = ? AND TipoReg = ? AND Saldo > 0 AND FluxoCredAntecip.Fornecedor = Clientes.Codigo AND Clientes.Tipo = TiposDeCliente.Codigo ORDER BY Fornecedor, Filial", tFluxoAux1.tDebitosRecCli.iFilialEmpresa, tFluxoAux1.tDebitosRecCli.lCliente, tFluxoAux1.tDebitosRecCli.iFilial, tFluxoAux1.tDebitosRecCli.sSiglaDocumento, tFluxoAux1.tDebitosRecCli.lNumTitulo, tFluxoAux1.tDebitosRecCli.dSaldo, tFluxoAux1.iTipoForn_DebitosRecCli, tFluxoAux1.sNomeReduzido_DebitosRecCli, tFluxoAux1.sDescricaoTipo_DebitosRecCli, objFluxo.lFluxoId, giFilialEmpresa, FLUXOANALITICO_TIPOREG_RECEBTO)
            If alErro(1) <> AD_SQL_SUCESSO Then gError 20018
    
        End If

'    ElseIf giTipoVersao = VERSAO_LIGHT Then
'
'        'seleciona os debitos a receber
'        If giFilialEmpresa = EMPRESA_TODA Then
'
'            'Pesquisa todos os debitos a receber no ambito empresa
'            alErro(1) = Comando_Executar(alComando(1), "SELECT FilialEmpresa, Fornecedor, Filial, SiglaDocumento, NumTitulo, Saldo, Clientes.NomeReduzido, FROM FluxoCredAntecip, Clientes  WHERE FluxoId = ? AND TipoReg = ? AND Saldo > 0 AND FluxoCredAntecip.Fornecedor = Clientes.Codigo ORDER BY Fornecedor, Filial", tFluxoAux1.tDebitosRecCli.iFilialEmpresa, tFluxoAux1.tDebitosRecCli.lCliente, tFluxoAux1.tDebitosRecCli.iFilial, tFluxoAux1.tDebitosRecCli.sSiglaDocumento, tFluxoAux1.tDebitosRecCli.lNumTitulo, tFluxoAux1.tDebitosRecCli.dSaldo, tFluxoAux1.sNomeReduzido_DebitosRecCli, objFluxo.lFluxoId, FLUXOANALITICO_TIPOREG_RECEBTO)
'            If alErro(1) <> AD_SQL_SUCESSO Then gError 20026
'
'        Else
'
'            'Pesquisa todos os debitos a receber no ambito da filial
'            alErro(1) = Comando_Executar(alComando(1), "SELECT FilialEmpresa, Fornecedor, Filial, SiglaDocumento, NumTitulo, Saldo, Clientes.NomeReduzido FROM FluxoCredAntecip, Clientes  WHERE FluxoId = ? AND FilialEmpresa = ? AND TipoReg = ? AND Saldo > 0 AND FluxoCredAntecip.Fornecedor = Clientes.Codigo ORDER BY Fornecedor, Filial", tFluxoAux1.tDebitosRecCli.iFilialEmpresa, tFluxoAux1.tDebitosRecCli.lCliente, tFluxoAux1.tDebitosRecCli.iFilial, tFluxoAux1.tDebitosRecCli.sSiglaDocumento, tFluxoAux1.tDebitosRecCli.lNumTitulo, tFluxoAux1.tDebitosRecCli.dSaldo, tFluxoAux1.sNomeReduzido_DebitosRecCli, objFluxo.lFluxoId, giFilialEmpresa, FLUXOANALITICO_TIPOREG_RECEBTO)
'            If alErro(1) <> AD_SQL_SUCESSO Then gError 20018
'
'        End If
'
'    End If

    tFluxoAux1.sNomeReduzido_NFsRec = String(STRING_CLIENTE_NOME_REDUZIDO, 0)
    tFluxoAux1.sDescricaoTipo_NFsRec = String(STRING_TIPO_CLIENTE_DESCRICAO, 0)
    
    tFluxoAux1.sNomeReduzido_DebitosRecCli = String(STRING_CLIENTE_NOME_REDUZIDO, 0)
    tFluxoAux1.sDescricaoTipo_DebitosRecCli = String(STRING_TIPO_CLIENTE_DESCRICAO, 0)

'    If giTipoVersao = VERSAO_FULL Then

        'seleciona as Notas Fiscais a Receber
        If giFilialEmpresa = EMPRESA_TODA Then
    
            If iExiste = 0 Then
    
                'Pesquisa as Notas Fiscais a Receber com vencimento no periodo em questão no ambito empresa
                alErro(2) = Comando_Executar(alComando(2), "SELECT FilialEmpresa, Cliente, FilialCli, NumNotaFiscal, DataVencimento, ValorTotal, Clientes.Tipo, Clientes.NomeReduzido, TiposDeCliente.Descricao, NFiscal.NumIntDoc FROM NFiscal, Clientes, TiposDeCliente, TiposDocInfo WHERE Status = ? AND DataVencimento >= ? AND DataVencimento <= ? AND NFiscal.TipoNFiscal = TiposDocInfo.Codigo AND TiposDocInfo.Faturavel = 1 AND NumIntDocCPR = 0 AND NFiscal.Cliente = Clientes.Codigo AND Clientes.Tipo = TiposDeCliente.Codigo ORDER BY Cliente, FilialCli, DataVencimento", tFluxoAux1.tNFiscal.iFilialEmpresa, tFluxoAux1.tNFiscal.lCliente, tFluxoAux1.tNFiscal.iFilialCli, tFluxoAux1.tNFiscal.lNumNotaFiscal, tFluxoAux1.tNFiscal.dtDataVencimento, tFluxoAux1.tNFiscal.dValorTotal, tFluxoAux1.iTipoForn_NFsRec, tFluxoAux1.sNomeReduzido_NFsRec, tFluxoAux1.sDescricaoTipo_NFsRec, tFluxoAux1.tNFiscal.lNumIntDoc, STATUS_LANCADO, objFluxo.dtDataBase - 5, objFluxo.dtDataFinal + 7)
                If alErro(2) <> AD_SQL_SUCESSO Then gError 20019
                
            Else
            
                'Pesquisa as Notas Fiscais a Receber com vencimento no periodo em questão no ambito filial
                alErro(2) = Comando_Executar(alComando(2), "SELECT FilialEmpresa, Cliente, FilialCli, NumNotaFiscal, DataVencimento, ValorTotal, Clientes.Tipo, Clientes.NomeReduzido, TiposDeCliente.Descricao, NFiscal.NumIntDoc FROM NFiscal, Clientes, TiposDeCliente, TiposDocInfo WHERE Status = ? AND FilialEmpresa > ? AND DataVencimento >= ? AND DataVencimento <= ? AND NFiscal.TipoNFiscal = TiposDocInfo.Codigo AND TiposDocInfo.Faturavel = 1 AND NumIntDocCPR = 0 AND NFiscal.Cliente = Clientes.Codigo AND Clientes.Tipo = TiposDeCliente.Codigo ORDER BY Cliente, FilialCli, DataVencimento", tFluxoAux1.tNFiscal.iFilialEmpresa, tFluxoAux1.tNFiscal.lCliente, tFluxoAux1.tNFiscal.iFilialCli, tFluxoAux1.tNFiscal.lNumNotaFiscal, tFluxoAux1.tNFiscal.dtDataVencimento, tFluxoAux1.tNFiscal.dValorTotal, tFluxoAux1.iTipoForn_NFsRec, tFluxoAux1.sNomeReduzido_NFsRec, tFluxoAux1.sDescricaoTipo_NFsRec, tFluxoAux1.tNFiscal.lNumIntDoc, STATUS_LANCADO, 50, objFluxo.dtDataBase - 5, objFluxo.dtDataFinal + 7)
                If alErro(2) <> AD_SQL_SUCESSO Then gError 195402
            
            End If
    
        Else
    
            'Pesquisa as Notas Fiscais a Receber com vencimento no periodo em questão no ambito filial
            alErro(2) = Comando_Executar(alComando(2), "SELECT FilialEmpresa, Cliente, FilialCli, NumNotaFiscal, DataVencimento, ValorTotal, Clientes.Tipo, Clientes.NomeReduzido, TiposDeCliente.Descricao, NFiscal.NumIntDoc FROM NFiscal, Clientes, TiposDeCliente, TiposDocInfo WHERE Status = ? AND FilialEmpresa = ? AND DataVencimento >= ? AND DataVencimento <= ? AND NFiscal.TipoNFiscal = TiposDocInfo.Codigo AND TiposDocInfo.Faturavel = 1 AND NumIntDocCPR = 0 AND NFiscal.Cliente = Clientes.Codigo AND Clientes.Tipo = TiposDeCliente.Codigo ORDER BY Cliente, FilialCli, DataVencimento", tFluxoAux1.tNFiscal.iFilialEmpresa, tFluxoAux1.tNFiscal.lCliente, tFluxoAux1.tNFiscal.iFilialCli, tFluxoAux1.tNFiscal.lNumNotaFiscal, tFluxoAux1.tNFiscal.dtDataVencimento, tFluxoAux1.tNFiscal.dValorTotal, tFluxoAux1.iTipoForn_NFsRec, tFluxoAux1.sNomeReduzido_NFsRec, tFluxoAux1.sDescricaoTipo_NFsRec, tFluxoAux1.tNFiscal.lNumIntDoc, STATUS_LANCADO, giFilialEmpresa, objFluxo.dtDataBase - 5, objFluxo.dtDataFinal + 7)
            If alErro(2) <> AD_SQL_SUCESSO Then gError 20020
    
        End If

'    ElseIf giTipoVersao = VERSAO_LIGHT Then
'
'        'seleciona as Notas Fiscais a Receber
'        If giFilialEmpresa = EMPRESA_TODA Then
'
'            'Pesquisa as Notas Fiscais a Receber com vencimento no periodo em questão no ambito empresa
'            alErro(2) = Comando_Executar(alComando(2), "SELECT FilialEmpresa, Cliente, FilialCli, NumNotaFiscal, DataVencimento, ValorTotal, Clientes.NomeReduzido, NFiscal.NumIntDoc FROM NFiscal, Clientes, TiposDocInfo WHERE Status = ? AND DataVencimento >= ? AND DataVencimento <= ? AND NFiscal.TipoNFiscal = TiposDocInfo.Codigo AND TiposDocInfo.Faturavel = 1 AND NumIntDocCPR = 0 AND NFiscal.Cliente = Clientes.Codigo ORDER BY Cliente, FilialCli, DataVencimento", tFluxoAux1.tNFiscal.iFilialEmpresa, tFluxoAux1.tNFiscal.lCliente, tFluxoAux1.tNFiscal.iFilialCli, tFluxoAux1.tNFiscal.lNumNotaFiscal, tFluxoAux1.tNFiscal.dtDataVencimento, tFluxoAux1.tNFiscal.dValorTotal, tFluxoAux1.sNomeReduzido_NFsRec, tFluxoAux1.tNFiscal.lNumIntDoc, STATUS_LANCADO, objFluxo.dtDataBase, objFluxo.dtDataFinal + 7)
'            If alErro(2) <> AD_SQL_SUCESSO Then gError 20019
'
'        Else
'
'            'Pesquisa as Notas Fiscais a Receber com vencimento no periodo em questão no ambito filial
'            alErro(2) = Comando_Executar(alComando(2), "SELECT FilialEmpresa, Cliente, FilialCli, NumNotaFiscal, DataVencimento, ValorTotal, Clientes.NomeReduzido, NFiscal.NumIntDoc FROM NFiscal, Clientes, TiposDocInfo WHERE Status = ? AND FilialEmpresa = ? AND DataVencimento >= ? AND DataVencimento <= ? AND NFiscal.TipoNFiscal = TiposDocInfo.Codigo AND TiposDocInfo.Faturavel = 1 AND NumIntDocCPR = 0 AND NFiscal.Cliente = Clientes.Codigo ORDER BY Cliente, FilialCli, DataVencimento", tFluxoAux1.tNFiscal.iFilialEmpresa, tFluxoAux1.tNFiscal.lCliente, tFluxoAux1.tNFiscal.iFilialCli, tFluxoAux1.tNFiscal.lNumNotaFiscal, tFluxoAux1.tNFiscal.dtDataVencimento, tFluxoAux1.tNFiscal.dValorTotal, tFluxoAux1.sNomeReduzido_NFsRec, tFluxoAux1.tNFiscal.lNumIntDoc, STATUS_LANCADO, giFilialEmpresa, objFluxo.dtDataBase, objFluxo.dtDataFinal + 7)
'            If alErro(2) <> AD_SQL_SUCESSO Then gError 195403
'
'        End If
'
'    End If

    tFluxoAux1.sNomeReduzido_TitRec = String(STRING_CLIENTE_NOME_REDUZIDO, 0)
    tFluxoAux1.sDescricaoTipo_TitRec = String(STRING_TIPO_CLIENTE_DESCRICAO, 0)
    tFluxoAux1.tTituloReceber.sSiglaDocumento = String(STRING_SIGLA_DOCUMENTO, 0)

    tFluxoAux1.sNomeReduzido_DebitosRecCli = String(STRING_CLIENTE_NOME_REDUZIDO, 0)
    tFluxoAux1.sDescricaoTipo_DebitosRecCli = String(STRING_TIPO_CLIENTE_DESCRICAO, 0)


'    If giTipoVersao = VERSAO_FULL Then

        'seleciona as parcelas a receber
        If giFilialEmpresa = EMPRESA_TODA Then
    
            If iExiste = 0 Then
    
                'Pesquisa todas as parcelas a receber com vencimento no periodo em questão, com saldo, nao descontada, aberto no ambito empresa
                alErro(3) = Comando_Executar(alComando(3), "SELECT ParcelasRec.Saldo, DataVencimento, CarteirasCobrador.DiasDeRetencao, ParcelasRec.Valor, NumParcela, NumTitulo, Cliente, Filial, FilialEmpresa, Clientes.Tipo, Clientes.NomeReduzido, TiposDeCliente.Descricao , SiglaDocumento, ParcelasRec.NumIntDoc FROM ParcelasRec, TitulosRec, Clientes, TiposDeCliente, CarteirasCobrador WHERE ParcelasRec.CarteiraCobranca <> ? AND ParcelasRec.Status = ? AND ParcelasRec.DataVencimento >=? AND ParcelasRec.DataVencimento <= ? AND ParcelasRec.Saldo > 0 AND ParcelasRec.NumIntTitulo = TitulosRec.NumIntDoc AND TitulosRec.Cliente = Clientes.Codigo AND Clientes.Tipo = TiposDeCliente.Codigo AND ParcelasRec.Cobrador = CarteirasCobrador.Cobrador AND ParcelasRec.CarteiraCobranca = CarteirasCobrador.CodCarteiraCobranca ORDER BY Cliente, Filial, DataVencimento", _
                    tFluxoAux1.tParcelaReceber.dSaldo, tFluxoAux1.tParcelaReceber.dtDataVencimento, tFluxoAux1.iDiasRetencao, tFluxoAux1.tParcelaReceber.dValor, tFluxoAux1.tParcelaReceber.iNumParcela, tFluxoAux1.tTituloReceber.lNumTitulo, tFluxoAux1.tTituloReceber.lCliente, tFluxoAux1.tTituloReceber.iFilial, tFluxoAux1.tTituloReceber.iFilialEmpresa, tFluxoAux1.iTipoForn_TitRec, tFluxoAux1.sNomeReduzido_TitRec, tFluxoAux1.sDescricaoTipo_TitRec, tFluxoAux1.tTituloReceber.sSiglaDocumento, tFluxoAux1.tParcelaReceber.lNumIntDoc, CARTEIRA_DESCONTADA, STATUS_ABERTO, objFluxo.dtDataBase - 5, objFluxo.dtDataFinal + 10)
                If alErro(3) <> AD_SQL_SUCESSO Then gError 20021
                
            Else
            
                'Pesquisa todas as parcelas a receber com vencimento no periodo em questão, com saldo, nao descontada, aberto no ambito filial
                alErro(3) = Comando_Executar(alComando(3), "SELECT ParcelasRec.Saldo, DataVencimento, CarteirasCobrador.DiasDeRetencao, ParcelasRec.Valor, NumParcela, NumTitulo, Cliente, Filial, Clientes.Tipo, Clientes.NomeReduzido, TiposDeCliente.Descricao, SiglaDocumento, ParcelasRec.NumIntDoc FROM TitulosRec, ParcelasRec, Clientes, TiposDeCliente, CarteirasCobrador WHERE FilialEmpresa > ? AND ParcelasRec.CarteiraCobranca <> ? AND ParcelasRec.Status = ? AND ParcelasRec.DataVencimento >=? AND ParcelasRec.DataVencimento <= ? AND ParcelasRec.Saldo > 0 AND ParcelasRec.NumIntTitulo = TitulosRec.NumIntDoc AND TitulosRec.Cliente = Clientes.Codigo AND Clientes.Tipo = TiposDeCliente.Codigo AND ParcelasRec.Cobrador = CarteirasCobrador.Cobrador AND ParcelasRec.CarteiraCobranca = CarteirasCobrador.CodCarteiraCobranca ORDER BY Cliente, Filial, DataVencimento", _
                    tFluxoAux1.tParcelaReceber.dSaldo, tFluxoAux1.tParcelaReceber.dtDataVencimento, tFluxoAux1.iDiasRetencao, tFluxoAux1.tParcelaReceber.dValor, tFluxoAux1.tParcelaReceber.iNumParcela, tFluxoAux1.tTituloReceber.lNumTitulo, tFluxoAux1.tTituloReceber.lCliente, tFluxoAux1.tTituloReceber.iFilial, tFluxoAux1.iTipoForn_TitRec, tFluxoAux1.sNomeReduzido_TitRec, tFluxoAux1.sDescricaoTipo_TitRec, tFluxoAux1.tTituloReceber.sSiglaDocumento, tFluxoAux1.tParcelaReceber.lNumIntDoc, 50, CARTEIRA_DESCONTADA, STATUS_ABERTO, objFluxo.dtDataBase - 5, objFluxo.dtDataFinal + 10)
                If alErro(3) <> AD_SQL_SUCESSO Then gError 195403
            
            
            End If
    
        Else
    
            'Pesquisa todas as parcelas a receber com vencimento no periodo em questão, com saldo, nao descontada, aberto no ambito filial
            alErro(3) = Comando_Executar(alComando(3), "SELECT ParcelasRec.Saldo, DataVencimento, CarteirasCobrador.DiasDeRetencao, ParcelasRec.Valor, NumParcela, NumTitulo, Cliente, Filial, Clientes.Tipo, Clientes.NomeReduzido, TiposDeCliente.Descricao, SiglaDocumento, ParcelasRec.NumIntDoc FROM TitulosRec, ParcelasRec, Clientes, TiposDeCliente, CarteirasCobrador WHERE FilialEmpresa = ? AND ParcelasRec.CarteiraCobranca <> ? AND ParcelasRec.Status = ? AND ParcelasRec.DataVencimento >=? AND ParcelasRec.DataVencimento <= ? AND ParcelasRec.Saldo > 0 AND ParcelasRec.NumIntTitulo = TitulosRec.NumIntDoc AND TitulosRec.Cliente = Clientes.Codigo AND Clientes.Tipo = TiposDeCliente.Codigo AND ParcelasRec.Cobrador = CarteirasCobrador.Cobrador AND ParcelasRec.CarteiraCobranca = CarteirasCobrador.CodCarteiraCobranca ORDER BY Cliente, Filial, DataVencimento", _
                tFluxoAux1.tParcelaReceber.dSaldo, tFluxoAux1.tParcelaReceber.dtDataVencimento, tFluxoAux1.iDiasRetencao, tFluxoAux1.tParcelaReceber.dValor, tFluxoAux1.tParcelaReceber.iNumParcela, tFluxoAux1.tTituloReceber.lNumTitulo, tFluxoAux1.tTituloReceber.lCliente, tFluxoAux1.tTituloReceber.iFilial, tFluxoAux1.iTipoForn_TitRec, tFluxoAux1.sNomeReduzido_TitRec, tFluxoAux1.sDescricaoTipo_TitRec, tFluxoAux1.tTituloReceber.sSiglaDocumento, tFluxoAux1.tParcelaReceber.lNumIntDoc, giFilialEmpresa, CARTEIRA_DESCONTADA, STATUS_ABERTO, objFluxo.dtDataBase - 5, objFluxo.dtDataFinal + 10)
            If alErro(3) <> AD_SQL_SUCESSO Then gError 20022
    
        End If

'    ElseIf giTipoVersao = VERSAO_LIGHT Then
'
'        'seleciona as parcelas a receber
'        If giFilialEmpresa = EMPRESA_TODA Then
'
'            'Pesquisa todas as parcelas a receber com vencimento no periodo em questão, com saldo, nao descontada, aberto no ambito empresa
'            alErro(3) = Comando_Executar(alComando(3), "SELECT ParcelasRec.Saldo, DataVencimento, CarteirasCobrador.DiasDeRetencao, ParcelasRec.Valor, NumParcela, NumTitulo, Cliente, Filial, FilialEmpresa, Clientes.NomeReduzido, SiglaDocumento, ParcelasRec.NumIntDoc FROM ParcelasRec, TitulosRec, Clientes, CarteirasCobrador WHERE ParcelasRec.CarteiraCobranca <> ? AND ParcelasRec.Status = ? AND ParcelasRec.DataVencimento >=? AND ParcelasRec.DataVencimento <= ? AND ParcelasRec.Saldo > 0 AND ParcelasRec.NumIntTitulo = TitulosRec.NumIntDoc AND TitulosRec.Cliente = Clientes.Codigo AND ParcelasRec.Cobrador = CarteirasCobrador.Cobrador AND ParcelasRec.CarteiraCobranca = CarteirasCobrador.CodCarteiraCobranca ORDER BY Cliente, Filial, DataVencimento", _
'                tFluxoAux1.tParcelaReceber.dSaldo, tFluxoAux1.tParcelaReceber.dtDataVencimento, tFluxoAux1.iDiasRetencao, tFluxoAux1.tParcelaReceber.dValor, tFluxoAux1.tParcelaReceber.iNumParcela, tFluxoAux1.tTituloReceber.lNumTitulo, tFluxoAux1.tTituloReceber.lCliente, tFluxoAux1.tTituloReceber.iFilial, tFluxoAux1.tTituloReceber.iFilialEmpresa, tFluxoAux1.sNomeReduzido_TitRec, tFluxoAux1.tTituloReceber.sSiglaDocumento, tFluxoAux1.tParcelaReceber.lNumIntDoc, CARTEIRA_DESCONTADA, STATUS_ABERTO, objFluxo.dtDataBase, objFluxo.dtDataFinal + 10)
'            If alErro(3) <> AD_SQL_SUCESSO Then gError 20021
'
'        Else
'
'            'Pesquisa todas as parcelas a receber com vencimento no periodo em questão, com saldo, nao descontada, aberto no ambito filial
'            alErro(3) = Comando_Executar(alComando(3), "SELECT ParcelasRec.Saldo, DataVencimento, CarteirasCobrador.DiasDeRetencao, ParcelasRec.Valor, NumParcela, NumTitulo, Cliente, Filial, Clientes.NomeReduzido, SiglaDocumento, ParcelasRec.NumIntDoc FROM TitulosRec, ParcelasRec, Clientes, CarteirasCobrador WHERE FilialEmpresa = ? AND ParcelasRec.CarteiraCobranca <> ? AND ParcelasRec.Status = ? AND ParcelasRec.DataVencimento >=? AND ParcelasRec.DataVencimento <= ? AND ParcelasRec.Saldo > 0 AND ParcelasRec.NumIntTitulo = TitulosRec.NumIntDoc AND TitulosRec.Cliente = Clientes.Codigo AND ParcelasRec.Cobrador = CarteirasCobrador.Cobrador AND ParcelasRec.CarteiraCobranca = CarteirasCobrador.CodCarteiraCobranca ORDER BY Cliente, Filial, DataVencimento", _
'                tFluxoAux1.tParcelaReceber.dSaldo, tFluxoAux1.tParcelaReceber.dtDataVencimento, tFluxoAux1.iDiasRetencao, tFluxoAux1.tParcelaReceber.dValor, tFluxoAux1.tParcelaReceber.iNumParcela, tFluxoAux1.tTituloReceber.lNumTitulo, tFluxoAux1.tTituloReceber.lCliente, tFluxoAux1.tTituloReceber.iFilial, tFluxoAux1.sNomeReduzido_TitRec, tFluxoAux1.tTituloReceber.sSiglaDocumento, tFluxoAux1.tParcelaReceber.lNumIntDoc, giFilialEmpresa, CARTEIRA_DESCONTADA, STATUS_ABERTO, objFluxo.dtDataBase, objFluxo.dtDataFinal + 10)
'            If alErro(3) <> AD_SQL_SUCESSO Then gError 20022
'
'        End If
'
'    End If
    
    alErro(1) = Comando_BuscarPrimeiro(alComando(1))
    If alErro(1) <> AD_SQL_SUCESSO And alErro(1) <> AD_SQL_SEM_DADOS Then gError 20023

    alErro(2) = Fluxo_Comando_BuscarProximo(alComando(2), tFluxoAux1.tNFiscal.dtDataVencimento, objFluxo, 0)
    If alErro(2) <> AD_SQL_SUCESSO And alErro(2) <> AD_SQL_SEM_DADOS Then gError 20024

    alErro(3) = Fluxo_Comando_BuscarProximo(alComando(3), tFluxoAux1.tParcelaReceber.dtDataVencimento, objFluxo, tFluxoAux1.iDiasRetencao)
    If alErro(3) <> AD_SQL_SUCESSO And alErro(3) <> AD_SQL_SEM_DADOS Then gError 20025

    lErro = FluxoAnalitico_Le_Contratos_Cli(objFluxo, alErro(4), alComando(10), tFluxoAux1)
    If lErro <> SUCESSO Then gError 133306

    lErro = FluxoAnalitico_Le_PV(objFluxo, alErro(5), alComando(11), tFluxoAux1)
    If lErro <> SUCESSO Then gError 188571

    FluxoAnalitico_Le_Recebtos = SUCESSO

    Exit Function

Erro_FluxoAnalitico_Le_Recebtos:

    FluxoAnalitico_Le_Recebtos = gErr

    Select Case gErr

        Case 20018, 20023, 20026, 195401
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_DEBITOSRECCLI", gErr)

        Case 20019, 20020, 20024, 195402
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NOTAS_FISCAIS_REC", gErr)

        Case 20021, 20022, 20025, 195403
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_REC1", gErr)

        Case 133306, 188571, 195400

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148279)

    End Select

    Exit Function

End Function

Private Function Banco_Le_ParcelasPag(ByVal iCodBanco As Integer, lNumIntDoc As Long) As Long
'Verifica se existe alguma ParcelaPag associada ao Banco

Dim lErro As Long
Dim lComando As Long

On Error GoTo Erro_Banco_Le_ParcelasPag

    'Inicializa comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 28621

    'Pesquisa o Banco na tabela de ParcelasPag
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc FROM ParcelasPag WHERE BancoCobrador = ?", lNumIntDoc, iCodBanco)
    If lErro <> AD_SQL_SUCESSO Then Error 28622

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 28623
    
    'Se não encontrou Banco associado à ParcelaPag --> Erro
    If lErro = AD_SQL_SEM_DADOS Then Error 28624
    
    'Libera comando
    Call Comando_Fechar(lComando)
        
    Banco_Le_ParcelasPag = SUCESSO
    
    Exit Function
    
Erro_Banco_Le_ParcelasPag:

    Banco_Le_ParcelasPag = Err
    
    Select Case Err
        
        Case 28621
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
            
        Case 28622, 28623
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCPAG_BANCO", Err, iCodBanco)
            
        Case 28624
                    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148280)
            
    End Select
    
    'Libera comando
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Private Function Banco_Le_ParcelasPagBaixadas(ByVal iCodBanco As Integer, lNumIntDoc As Long) As Long
'Verifica se existe alguma ParcelaPagBaixada associada ao Banco

Dim lErro As Long
Dim lComando As Long

On Error GoTo Erro_Banco_Le_ParcelasPagBaixadas

    'Inicializa comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 28606

    'Pesquisa o Banco na tabela de ParcelasPagBaixadas
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc FROM ParcelasPagBaixadas WHERE BancoCobrador = ?", lNumIntDoc, iCodBanco)
    If lErro <> AD_SQL_SUCESSO Then Error 28607

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 28608
    
    'Se não encontrou Banco associado à ParcelaPagBaixada --> Erro
    If lErro = AD_SQL_SEM_DADOS Then Error 28609
    
    'Libera comando
    Call Comando_Fechar(lComando)
        
    Banco_Le_ParcelasPagBaixadas = SUCESSO
    
    Exit Function
    
Erro_Banco_Le_ParcelasPagBaixadas:

    Banco_Le_ParcelasPagBaixadas = Err
    
    Select Case Err
        
        Case 28606
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
            
        Case 28607, 28608
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCPAGBAIXADAS_BANCO", Err, iCodBanco)
            
        Case 28609
                    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148281)
            
    End Select
    
    'Libera comando
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Private Function Banco_Le_Cobrador(ByVal iCodBanco As Integer, iCobrador As Integer) As Long
'Verifica se existe algum Cobrador associado ao Banco

Dim lErro As Long
Dim lComando As Long

On Error GoTo Erro_Banco_Le_Cobrador

    'Inicializa comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 19154

    'Pesquisa o Banco na tabela de Cobradores
    lErro = Comando_Executar(lComando, "SELECT Codigo FROM Cobradores WHERE CodBanco = ?", iCobrador, iCodBanco)
    If lErro <> AD_SQL_SUCESSO Then Error 19155

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 19156
    
    'Se não encontrou Banco associado ao Cobrador --> Erro
    If lErro = AD_SQL_SEM_DADOS Then Error 19157
    
    'Libera comando
    Call Comando_Fechar(lComando)
        
    Banco_Le_Cobrador = SUCESSO
    
    Exit Function
    
Erro_Banco_Le_Cobrador:

    Banco_Le_Cobrador = Err
    
    Select Case Err
        
        Case 19154
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
            
        Case 19155, 19156
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_COBRADORES_BANCO", Err, iCodBanco)
            
        Case 19157
                    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148282)
            
    End Select
    
    'Libera comando
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function BaixaParcRec_LiberaComissoes(ByVal objBaixaParcRec As ClassBaixaParcRec, ByVal dtDataBaixa As Date, ByVal lComandoSelCom As Long, ByVal lComandoModCom As Long) As Long
'registra nas comissoes associadas a parcelas de titulos a receber a baixa das mesmas
'isto troca o status das comissoes de pendente p/lancado e informa a data de geracao ( a da baixa )

Dim lErro As Long, iStatus As Integer

On Error GoTo Erro_BaixaParcRec_LiberaComissoes
        
    'Ler as comissões existentes no bd
    lErro = Comando_ExecutarPos(lComandoSelCom, "SELECT Status FROM Comissoes WHERE TipoTitulo = ? AND NumIntDoc = ? AND Status = ? ORDER BY NumIntDoc", 0, iStatus, TIPO_PARCELA, objBaixaParcRec.lNumIntParcela, STATUS_PENDENTE)
    If lErro <> AD_SQL_SUCESSO Then Error 41604

    lErro = Comando_BuscarPrimeiro(lComandoSelCom)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 41605

    Do While lErro = AD_SQL_SUCESSO

'        'Verifica se a comissão esta pendente
'        If iStatus <> STATUS_PENDENTE Then Error 41606

        'atualiza o status p/lancado e a data de geracao pela da baixa
        lErro = Comando_ExecutarPos(lComandoModCom, "UPDATE Comissoes SET Status = ?, DataGeracao = ?", lComandoSelCom, STATUS_LIBERADO, dtDataBaixa)
        If lErro <> AD_SQL_SUCESSO Then Error 41607
        
        'pega o próximo registro
        lErro = Comando_BuscarProximo(lComandoSelCom)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 41608

    Loop

    BaixaParcRec_LiberaComissoes = SUCESSO
    
    Exit Function
    
Erro_BaixaParcRec_LiberaComissoes:

    BaixaParcRec_LiberaComissoes = Err

    Select Case Err
        
        Case 41604, 41605, 41608
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_COMISSOES2", Err)
        
        Case 41606
            Call Rotina_Erro(vbOKOnly, "ERRO_LIBERACAO_COMISSAO_STATUS", Err)
        
        Case 41607
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_COMISSOES2", Err)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148283)
            
    End Select
    
    Exit Function
    
End Function

Private Function ParcelaRec_ValBaixaPorPerda(ByVal lNumIntParc As Long, dValBaixaPerda As Double) As Long
'Obtem o valor baixado por motivo PERDA

Dim lErro As Long, lComando As Long

On Error GoTo Erro_ParcelaRec_ValBaixaPorPerda

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 41601
    
    dValBaixaPerda = 0
    
    lErro = Comando_Executar(lComando, "SELECT SUM(ValorBaixado) FROM BaixasParcRec, BaixasRec WHERE BaixasParcRec.NumIntParcela = ? AND BaixasParcRec.Status <> ? AND BaixasParcRec.NumIntBaixa = BaixasRec.NumIntBaixa AND BaixasRec.Status <> ? AND BaixasRec.Motivo = ?", dValBaixaPerda, lNumIntParc, STATUS_EXCLUIDO, STATUS_EXCLUIDO, MOTIVO_PERDA)
    If lErro <> AD_SQL_SUCESSO Then Error 41602
    
    lErro = Comando_BuscarProximo(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 41603
    
    Call Comando_Fechar(lComando)
    
    ParcelaRec_ValBaixaPorPerda = SUCESSO
     
    Exit Function
    
Erro_ParcelaRec_ValBaixaPorPerda:

    ParcelaRec_ValBaixaPorPerda = Err
     
    Select Case Err
          
        Case 41601
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 41602, 41603
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_VALBAIXAPERDA", Err)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148284)
     
    End Select
     
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function ContaCorrenteInt_Lock(ByVal iCodCCI As Integer, ByVal lComando As Long) As Long
'le e faz lock shared em conta corrente interna

Dim lErro As Long, iCodigo As Integer

On Error GoTo Erro_ContaCorrenteInt_Lock

    lErro = Comando_ExecutarLockado(lComando, "SELECT Codigo FROM ContasCorrentesInternas WHERE Codigo = ?", iCodigo, iCodCCI)
    If lErro <> AD_SQL_SUCESSO Then Error 41634
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 41635
    
    'Verifica se a conta foi encontrada
    If lErro = AD_SQL_SEM_DADOS Then Error 41636

    lErro = Comando_LockShared(lComando)
    If lErro <> AD_SQL_SUCESSO Then Error 41637
    
    ContaCorrenteInt_Lock = SUCESSO
     
    Exit Function
    
Erro_ContaCorrenteInt_Lock:

    ContaCorrenteInt_Lock = Err
     
    Select Case Err
          
        Case 41634, 41635
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONTASCORRENTESINTERNAS", Err)
        
        Case 41636 'vai ser tratado na rotina chamadora
        
        Case 41637
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CONTASCORRENTESINTERNAS", Err, iCodCCI)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148285)
     
    End Select
     
    Exit Function

End Function

Function CarteiraDeCobranca_Lock(ByVal iCodigo As Integer, ByVal lComando As Long) As Long
'le e faz lock shared em (tipo de) carteira de cobrança

Dim lErro As Long, iValidaPara As Integer

On Error GoTo Erro_CarteiraDeCobranca_Lock

    'Seleciona a carteira com o Código passado
    lErro = Comando_ExecutarLockado(lComando, "SELECT ValidaPara FROM CarteirasCobranca WHERE Codigo = ?", iValidaPara, iCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 41640

    'Posiciona na primeira Carteira
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 41641

    'Se não encontrou Carteira com o Código em questão
    If lErro = AD_SQL_SEM_DADOS Then Error 41642

    lErro = Comando_LockShared(lComando)
    If lErro <> AD_SQL_SUCESSO Then Error 41643
    
    CarteiraDeCobranca_Lock = SUCESSO
     
    Exit Function
    
Erro_CarteiraDeCobranca_Lock:

    CarteiraDeCobranca_Lock = Err
     
    Select Case Err
          
        Case 41640, 41641
        
        Case 41642 'vai ser tratado na rotina chamadora
        
        Case 41643
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CARTEIRASCOBRANCA", Err, iCodigo)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148286)
     
    End Select
     
    Exit Function

End Function

Private Function TESConfig_Grava_Trans(ByVal objTESConfig As ClassTESConfig, alComando() As Long) As Long
'grava registro em tesconfig. Apenas altera o conteudo, se nao existir insere o registro.
'TEM QUE SER CHAMADA EM TRANSACAO

Dim lErro As Long
Dim tTESConfig As typeTESConfig

On Error GoTo Erro_TESConfig_Grava_Trans

    'inicializar buffer
    tTESConfig.sConteudo = String(STRING_TESCONFIG_CONTEUDO, 0)
    'ler registo
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Conteudo FROM TESConfig WHERE Codigo = ? AND FilialEmpresa = ?", 0, tTESConfig.sConteudo, objTESConfig.sCodigo, objTESConfig.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then Error 44676
    
    'Lê o primeiro registro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 44677
    
    'Se não encontrou o registro ==> insere o registro
    If lErro = AD_SQL_SEM_DADOS Then
        lErro = Comando_Executar(alComando(3), "INSERT INTO TESConfig (Codigo, FilialEmpresa, Tipo, Conteudo) VALUES (?,?,?,?)", objTESConfig.sCodigo, objTESConfig.iFilialEmpresa, objTESConfig.iTipo, objTESConfig.sConteudo)
        If lErro <> AD_SQL_SUCESSO Then Error 44678
        
    Else
        'se o conteudo foi modificado
        If objTESConfig.sConteudo <> tTESConfig.sConteudo Then
            lErro = Comando_ExecutarPos(alComando(2), "UPDATE TESConfig SET Conteudo = ?", alComando(1), objTESConfig.sConteudo)
            If lErro <> AD_SQL_SUCESSO Then Error 44679
        End If
    
    End If
    
    Exit Function
    
Erro_TESConfig_Grava_Trans:

    TESConfig_Grava_Trans = Err
     
    Select Case Err
     
        Case 44676, 44677
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TESCONFIG2", Err, objTESConfig.sCodigo, objTESConfig.iFilialEmpresa)
     
        Case 44678
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_TESCONFIG", Err, objTESConfig.sCodigo, objTESConfig.iFilialEmpresa)
        
        Case 44679
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_TESCONFIG", Err, objTESConfig.sCodigo, objTESConfig.iFilialEmpresa)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148287)
     
    End Select
     
    Exit Function

End Function

Function TESConfig_Grava_Configs(ByVal colConfigs As ColTESConfig) As Long
'grava na tabela TESConfig uma colecao de registros de configuracao

Dim lErro As Long, iIndice As Integer
Dim lTransacao As Long

On Error GoTo Erro_TESConfig_Grava_Configs
    
    'abrir transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 44681
    
    lErro = CF("TESConfig_Grava_Configs_Trans", colConfigs)
    If lErro <> SUCESSO Then Error 44692
        
     'fechar transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 44683
    
    TESConfig_Grava_Configs = SUCESSO
    
    Exit Function
    
Erro_TESConfig_Grava_Configs:
    
    TESConfig_Grava_Configs = Err
    
    Select Case Err
    
        Case 44681
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
    
        Case 44692
        
        Case 44683
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148288)
            
    End Select
    
    Call Transacao_Rollback
    
    Exit Function
    
End Function

Function CR_Instalacao_Filial(ByVal iFilialEmpresa As Integer) As Long
'faz as inicializacoes necessarias à criacao de uma nova filial especificas do modulo

Dim lErro As Long, lComando As Long

On Error GoTo Erro_CR_Instalacao_Filial

    'a matriz já vem pré-inicializada
    If iFilialEmpresa <> FILIAL_MATRIZ Then
        
        lComando = Comando_Abrir()
        If lComando = 0 Then Error 41916
    
        lErro = Comando_Executar(lComando, "INSERT INTO Feriados (FilialEmpresa,Data,Descricao) SELECT ?, Data, Descricao FROM Feriados WHERE FilialEmpresa = ?", iFilialEmpresa, FILIAL_MATRIZ)
        If lErro <> AD_SQL_SUCESSO Then Error 41917
        
        Call Comando_Fechar(lComando)
    
    End If
    
    CR_Instalacao_Filial = SUCESSO
     
    Exit Function
    
Erro_CR_Instalacao_Filial:

    CR_Instalacao_Filial = Err
     
    Select Case Err
          
        Case 41916
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 41917
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FERIADOS_FILIAIS", Err, iFilialEmpresa)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148289)
     
    End Select
     
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Private Function ParcelaRec_CancelaLiberacaoComissoes(ByVal objParcelaRec As ClassParcelaReceber, ByVal lComandoSelCom As Long, ByVal lComandoModCom As Long) As Long
'registra nas comissoes associadas a parcela de titulos a receber que a baixa das mesma foi cancelada
'isto troca o status das comissoes de lancado p/pendente p/lancado e limpa a data de geracao

Dim lErro As Long, iStatus As Integer

On Error GoTo Erro_ParcelaRec_CancelaLiberacaoComissoes
        
    'Ler as comissões existentes no bd
    lErro = Comando_ExecutarPos(lComandoSelCom, "SELECT Status FROM Comissoes WHERE TipoTitulo = ? AND NumIntDoc = ? ORDER BY NumIntDoc", 0, iStatus, TIPO_PARCELA, objParcelaRec.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then Error 56629

    lErro = Comando_BuscarPrimeiro(lComandoSelCom)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 56630

    Do While lErro = AD_SQL_SUCESSO

        If iStatus = STATUS_BAIXADO Then Error 59219
        
        'Verifica se a comissão está liberada
        If iStatus = STATUS_LIBERADO Then

            'atualiza o status p/pendente e a data de geracao data nula
            lErro = Comando_ExecutarPos(lComandoModCom, "UPDATE Comissoes SET Status = ?, DataGeracao = ?", lComandoSelCom, STATUS_PENDENTE, DATA_NULA)
            If lErro <> AD_SQL_SUCESSO Then Error 56632
        
        End If
        
        'pega o próximo registro
        lErro = Comando_BuscarProximo(lComandoSelCom)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 56631

    Loop

    ParcelaRec_CancelaLiberacaoComissoes = SUCESSO
    
    Exit Function
    
Erro_ParcelaRec_CancelaLiberacaoComissoes:

    ParcelaRec_CancelaLiberacaoComissoes = Err

    Select Case Err
        
        Case 56629, 56630, 56631
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_COMISSOES2", Err)
        
        Case 56632
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_COMISSOES2", Err)
        
        Case 59219
            Call Rotina_Erro(vbOKOnly, "ERRO_COMISSAO_BAIXADA_CANC_BAIXA", Err)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148290)
            
    End Select
    
    Exit Function
    
End Function

Private Function NotasFiscaisPag_CancelarBaixa(ByVal lNumIntTitulo As Long, ByVal lComandoSel As Long, ByVal lComandoDel As Long, ByVal lComandoIns As Long) As Long
'transfere as notas fiscais vinculadas a um titulo a pagar de NFsPagBaixadas para NFsPag
'TEM QUE SER CHAMADA DENTRO DE TRANSACAO

Dim lErro As Long
Dim tNFsPag As typeNFsPag
Dim iIndice As Integer

On Error GoTo Erro_NotasFiscaisPag_CancelarBaixa

    tNFsPag.sHistorico = String(STRING_NFSPAG_HISTORICO, 0)

    'obtem notas fiscais baixadas associadas ao titulo (fatura)
    lErro = Comando_ExecutarPos(lComandoSel, "SELECT NumIntDoc, FilialEmpresa, Fornecedor, Filial, NumNotaFiscal, DataEmissao, Status, DataVencimento, ValorTotal, ValorSeguro, ValorFrete, OutrasDespesas, ValorProdutos, ValorIRRF, ValorICMS, ValorICMSSubst, CreditoICMS, ValorIPI, CreditoIPI, PISRetido, COFINSRetido, CSLLRetido, TaxaMoeda, Historico, ISSRetido, INSSRetido, ValorINSS FROM NFsPagBaixadas WHERE NumIntTitPag = ?", 0, tNFsPag.lNumIntDoc, tNFsPag.iFilialEmpresa, tNFsPag.lFornecedor, tNFsPag.iFilial, tNFsPag.lNumNotaFiscal, tNFsPag.dtDataEmissao, tNFsPag.iStatus, tNFsPag.dtDataVencimento, tNFsPag.dValorTotal, tNFsPag.dValorSeguro, tNFsPag.dValorFrete, tNFsPag.dOutrasDespesas, tNFsPag.dValorProdutos, tNFsPag.dValorIRRF, tNFsPag.dValorICMS, tNFsPag.dValorICMSSubst, tNFsPag.iCreditoICMS, tNFsPag.dValorIPI, tNFsPag.iCreditoIPI, tNFsPag.dPISRetido, tNFsPag.dCOFINSRetido, tNFsPag.dCSLLRetido, tNFsPag.dTaxaMoeda, tNFsPag.sHistorico, tNFsPag.dISSRetido, tNFsPag.iINSSRetido, tNFsPag.dValorINSS, lNumIntTitulo)
    If lErro <> AD_SQL_SUCESSO Then Error 56745

    lErro = Comando_BuscarProximo(lComandoSel)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 56746

    If lErro = AD_SQL_SEM_DADOS Then Error 56747
        
    Do While lErro = AD_SQL_SUCESSO

        'Excluir a NF da tabela NFsPag
        lErro = Comando_ExecutarPos(lComandoDel, "DELETE FROM NFsPagBaixadas", lComandoSel)
        If lErro <> AD_SQL_SUCESSO Then Error 56748

        lErro = Comando_Executar(lComandoIns, "INSERT INTO NFsPag (NumIntDoc,FilialEmpresa,Fornecedor,Filial,NumNotaFiscal,DataEmissao,Status, NumIntTitPag, DataVencimento,ValorTotal,ValorSeguro, ValorFrete, OutrasDespesas, ValorProdutos, ValorIRRF, ValorICMS, ValorICMSSUbst, CreditoICMS, ValorIPI, CreditoIPI, PISRetido, COFINSRetido, CSLLRetido, TaxaMoeda, Historico, ISSRetido, INSSRetido, ValorINSS) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
            tNFsPag.lNumIntDoc, tNFsPag.iFilialEmpresa, tNFsPag.lFornecedor, tNFsPag.iFilial, tNFsPag.lNumNotaFiscal, tNFsPag.dtDataEmissao, STATUS_LANCADO, lNumIntTitulo, tNFsPag.dtDataVencimento, tNFsPag.dValorTotal, tNFsPag.dValorSeguro, tNFsPag.dValorFrete, tNFsPag.dOutrasDespesas, tNFsPag.dValorProdutos, tNFsPag.dValorIRRF, tNFsPag.dValorICMS, tNFsPag.dValorICMSSubst, tNFsPag.iCreditoICMS, tNFsPag.dValorIPI, tNFsPag.iCreditoIPI, tNFsPag.dPISRetido, tNFsPag.dCOFINSRetido, tNFsPag.dCSLLRetido, tNFsPag.dTaxaMoeda, tNFsPag.sHistorico, tNFsPag.dISSRetido, tNFsPag.iINSSRetido, tNFsPag.dValorINSS)
        If lErro <> AD_SQL_SUCESSO Then Error 56749
        
        'Atualiza o Status da NFiscal caso tenha vinculo com Nota Fiscal
        lErro = NFiscal_Altera_Status(tNFsPag.lNumIntDoc, CPR_NF_PAGAR, STATUS_LANCADO)
        If lErro <> SUCESSO Then Error 61292

        lErro = Comando_BuscarProximo(lComandoSel)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 56750

    Loop

    NotasFiscaisPag_CancelarBaixa = SUCESSO

    Exit Function

Erro_NotasFiscaisPag_CancelarBaixa:

    NotasFiscaisPag_CancelarBaixa = Err

    Select Case Err

        Case 56745, 56746, 56747, 56750
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NOTAS_FISCAIS_EXT_BAIXADAS", Err)

        Case 56748
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_NOTAS_FISCAIS_EXT_BAIXADAS", Err)

        Case 56749
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_NOTAS_FISCAIS_EXT", Err)
        
        Case 61292 'Tratado na rotina chamada
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148291)

    End Select

    Exit Function

End Function

Private Function MovCCI_Atualiza_Acumuladores(ByVal iCodConta As Integer, ByVal dtDataNova As Date, ByVal dValorNovo As Double, ByVal dtDataAntiga As Date, ByVal dValorAntigo As Double) As Long
'atualiza as tabelas CCIMov e CCIMovDia no caso de alteracao de data ou valor de movto de conta corrente
'pode ser chamada na inclusao, alteracao ou exclusao de movimentos
'as datas antiga ou nova devem estar c/DATA_NULA p/inclusao ou exclusao e as duas <> DATA_NULA p/alteracao

Dim lErro As Long

On Error GoTo Erro_MovCCI_Atualiza_Acumuladores

    If dtDataAntiga <> dtDataNova Or dValorAntigo <> dValorNovo Then
    
        'atualiza CCIMovDia
    
        If dtDataAntiga <> DATA_NULA Then
        
            lErro = CF("CCIMovDia_Exclui", iCodConta, dtDataAntiga, dValorAntigo)
            If lErro <> SUCESSO Then Error 56850
            
        End If
        
        If dtDataNova <> DATA_NULA Then
        
            lErro = CF("CCIMovDia_Grava", iCodConta, dtDataNova, dValorNovo)
            If lErro <> SUCESSO Then Error 56851
            
        End If
    
        'atualiza CCIMov
    
        If dtDataAntiga <> DATA_NULA Then
        
            lErro = CF("CCIMov_Exclui", iCodConta, Year(dtDataAntiga), Month(dtDataAntiga), dValorAntigo)
            If lErro <> SUCESSO Then Error 56852
            
        End If
        
        If dtDataNova <> DATA_NULA Then
        
            lErro = CF("CCIMov_Grava", iCodConta, Year(dtDataNova), Month(dtDataNova), dValorNovo)
            If lErro <> SUCESSO Then Error 56853
            
        End If
    
    End If
    
    MovCCI_Atualiza_Acumuladores = SUCESSO
     
    Exit Function
    
Erro_MovCCI_Atualiza_Acumuladores:

    MovCCI_Atualiza_Acumuladores = Err
     
    Select Case Err
          
        Case 56850 To 56853
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148292)
     
    End Select
     
    Exit Function

End Function

Function ExtrBcoDet_Inclui(ByVal objExtrBcoDet As ClassExtrBcoDet, ByVal lComando1 As Long, ByVal lComando2 As Long) As Long
'' PARA USO ESPECIFICO DENTRO DA CARGA DE LCTOS EM ARQUIVO CNAB

Dim lErro As Long
Dim iCodContaTmp As Integer

On Error GoTo Erro_ExtrBcoDet_Inclui

    'verifica se já existe pelos atributos pois o mesmo lcto pode aparecer em mais de um extrato (ex. extratos cumulativos)
    lErro = Comando_Executar(lComando1, "SELECT CodConta FROM LctosExtratoBancario WHERE CodConta = ? AND Data = ? AND Valor = ? AND Categoria = ? AND CodLctoBco = ? AND Historico = ? AND Documento = ? AND (NumExtrato <> ? OR (NumExtrato = ? AND SeqLcto = ?))", iCodContaTmp, objExtrBcoDet.iCodConta, objExtrBcoDet.dtData, objExtrBcoDet.dValor, objExtrBcoDet.iCategoria, objExtrBcoDet.sCodLctoBco, objExtrBcoDet.sHistorico, objExtrBcoDet.sDocumento, objExtrBcoDet.iNumExtrato, objExtrBcoDet.iNumExtrato, objExtrBcoDet.lSeqLcto)
    If lErro <> AD_SQL_SUCESSO Then Error 7138

    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7139

    'se já foi incluido anteriormente nao precisa fazer nada

    'se nao encontrou
    If lErro = AD_SQL_SEM_DADOS Then
        'inclui
        lErro = Comando_Executar(lComando2, "INSERT INTO LctosExtratoBancario (CodConta, NumExtrato, SeqLcto, Data, Valor, Categoria, CodLctoBco, Historico, Documento, IncideCPMF, Conciliado) VALUES (?,?,?,?,?,?,?,?,?,?,?)", _
            objExtrBcoDet.iCodConta, objExtrBcoDet.iNumExtrato, objExtrBcoDet.lSeqLcto, objExtrBcoDet.dtData, objExtrBcoDet.dValor, objExtrBcoDet.iCategoria, objExtrBcoDet.sCodLctoBco, objExtrBcoDet.sHistorico, objExtrBcoDet.sDocumento, objExtrBcoDet.sIncideCPMF, objExtrBcoDet.iConciliado)
        If lErro <> AD_SQL_SUCESSO Then Error 7140
    End If

    ExtrBcoDet_Inclui = SUCESSO

    Exit Function

Erro_ExtrBcoDet_Inclui:

    ExtrBcoDet_Inclui = Err

    Select Case Err

        Case 7138, 7139
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_LCTO_EXTRATO_BCO", Err)

        Case 7140
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_LCTO_EXTRATO_BCO", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148293)

    End Select

    Exit Function

End Function

Function ExtrBcoCab_Grava(ByVal objExtrBcoCab As ClassExtrBcoCab) As Long

Dim lErro As Long
Dim lComando1 As Long, lComando2 As Long
Dim lTransacao As Long
Dim iCodContaTmp As Integer
Dim iNumExtratoTmp As Integer

On Error GoTo Erro_ExtrBcoCab_Grava

    lTransacao = 0
    lComando1 = 0

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 7132

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then Error 7131

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 7130

    'verifica se já existe
    lErro = Comando_ExecutarPos(lComando1, "SELECT CodConta, NumExtrato FROM ExtratosBancarios WHERE CodConta = ? AND NumExtrato = ?", 0, iCodContaTmp, iNumExtratoTmp, objExtrBcoCab.iCodConta, objExtrBcoCab.iNumExtrato)
    If lErro <> AD_SQL_SUCESSO Then Error 7133

    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7134

    'se encontrou
    If lErro <> AD_SQL_SEM_DADOS Then
        'altera
        lErro = Comando_ExecutarPos(lComando2, "UPDATE ExtratosBancarios SET DataGravacao = ?, Conciliado = ?, NomeArquivo = ?, DataSaldoInicial = ?, SaldoInicial = ?, DataSaldoFinal = ?, SaldoFinal = ?", lComando1, objExtrBcoCab.dtDataGravacao, objExtrBcoCab.iConciliado, objExtrBcoCab.sNomeArquivo, objExtrBcoCab.dtDataSaldoInicial, objExtrBcoCab.dSaldoInicial, objExtrBcoCab.dtDataSaldoFinal, objExtrBcoCab.dSaldoFinal)
        If lErro <> AD_SQL_SUCESSO Then Error 7135
    Else
        'inclui
        lErro = Comando_Executar(lComando2, "INSERT INTO ExtratosBancarios (CodConta, NumExtrato, DataGravacao, Conciliado, NomeArquivo, DataSaldoInicial, SaldoInicial, DataSaldoFinal, SaldoFinal) VALUES (?,?,?,?,?,?,?,?,?)", objExtrBcoCab.iCodConta, objExtrBcoCab.iNumExtrato, objExtrBcoCab.dtDataGravacao, objExtrBcoCab.iConciliado, objExtrBcoCab.sNomeArquivo, objExtrBcoCab.dtDataSaldoInicial, objExtrBcoCab.dSaldoInicial, objExtrBcoCab.dtDataSaldoFinal, objExtrBcoCab.dSaldoFinal)
        If lErro <> AD_SQL_SUCESSO Then Error 7136
    End If

    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 7137

    lErro = Comando_Fechar(lComando1)
    lErro = Comando_Fechar(lComando2)

    ExtrBcoCab_Grava = SUCESSO

    Exit Function

Erro_ExtrBcoCab_Grava:

    ExtrBcoCab_Grava = Err

    Select Case Err
        Case 7130
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)

        Case 7131, 7132
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 7137
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case 7133, 7134
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_EXTRATO_BCO", Err)

        Case 7135
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_EXTRATO_BCO", Err)

        Case 7136
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_EXTRATO_BCO", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148294)

    End Select

    Call Transacao_Rollback
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)

    Exit Function

End Function

Function ExtrBcoCab_Grava_Batch(ByVal objExtrBcoCab As ClassExtrBcoCab, ByVal lComando1 As Long, ByVal lComando2 As Long) As Long
'' para uso na importacao de extrato em arquivo CNAB

Dim lErro As Long
Dim iCodContaTmp As Integer
Dim iNumExtratoTmp As Integer

On Error GoTo Erro_ExtrBcoCab_Grava_Batch

    'verifica se já existe
    lErro = Comando_ExecutarPos(lComando1, "SELECT CodConta, NumExtrato FROM ExtratosBancarios WHERE CodConta = ? AND NumExtrato = ?", 0, iCodContaTmp, iNumExtratoTmp, objExtrBcoCab.iCodConta, objExtrBcoCab.iNumExtrato)
    If lErro <> AD_SQL_SUCESSO Then Error 7133

    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 7134

    'se encontrou
    If lErro <> AD_SQL_SEM_DADOS Then
        'altera
        lErro = Comando_ExecutarPos(lComando2, "UPDATE ExtratosBancarios SET DataGravacao = ?, Conciliado = ?, NomeArquivo = ?, DataSaldoInicial = ?, SaldoInicial = ?, DataSaldoFinal = ?, SaldoFinal = ?", lComando1, objExtrBcoCab.dtDataGravacao, objExtrBcoCab.iConciliado, objExtrBcoCab.sNomeArquivo, objExtrBcoCab.dtDataSaldoInicial, objExtrBcoCab.dSaldoInicial, objExtrBcoCab.dtDataSaldoFinal, objExtrBcoCab.dSaldoFinal)
        If lErro <> AD_SQL_SUCESSO Then Error 7135
    Else
        'inclui
        lErro = Comando_Executar(lComando2, "INSERT INTO ExtratosBancarios (CodConta, NumExtrato, DataGravacao, Conciliado, NomeArquivo, DataSaldoInicial, SaldoInicial, DataSaldoFinal, SaldoFinal, SeqArquivo, DataImport, HoraImport, Banco) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", objExtrBcoCab.iCodConta, objExtrBcoCab.iNumExtrato, objExtrBcoCab.dtDataGravacao, objExtrBcoCab.iConciliado, objExtrBcoCab.sNomeArquivo, objExtrBcoCab.dtDataSaldoInicial, objExtrBcoCab.dSaldoInicial, objExtrBcoCab.dtDataSaldoFinal, objExtrBcoCab.dSaldoFinal, objExtrBcoCab.lSeqArquivo, objExtrBcoCab.dtDataImport, objExtrBcoCab.dHoraImport, objExtrBcoCab.iBanco)
        If lErro <> AD_SQL_SUCESSO Then Error 7136
    End If

    ExtrBcoCab_Grava_Batch = SUCESSO

    Exit Function

Erro_ExtrBcoCab_Grava_Batch:

    ExtrBcoCab_Grava_Batch = Err

    Select Case Err
        Case 7133, 7134
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_EXTRATO_BCO", Err)

        Case 7135
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_EXTRATO_BCO", Err)

        Case 7136
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_EXTRATO_BCO", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148295)

    End Select

    Exit Function

End Function

Private Function Evolucao_BaixasParcRec(ByVal objEvolucao As Object, iNumProc As Integer) As Long
'permite que a tela que mostra a evolucao da atualizacao seja atualizada e testa se o usuario interrompeu a atualizacao

Dim lErro As Long
Dim iCancela As Integer

On Error GoTo Erro_Evolucao_BaixasParcRec

    lErro = objEvolucao.Mostra_Evolucao(iCancela, iNumProc)
    If lErro <> SUCESSO Then Error 59179
    
    If iCancela = CANCELA_BATCH Then Error 59180

    Evolucao_BaixasParcRec = SUCESSO
    
    Exit Function
    
Erro_Evolucao_BaixasParcRec:

    Evolucao_BaixasParcRec = Err
    
    Select Case Err
        
        Case 59179, 59180
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148296)
    
    End Select

    Exit Function
    
End Function

Function Banco_Automatico(iCodigo As Integer) As Long
'Retorna o número do proximo Banco disponivel

Dim lCodigo As Long, lErro As Long

On Error GoTo Erro_Banco_Automatico

    lErro = CF("Config_ObterAutomatico", "CPRConfig", NUM_PROX_BANCO, "Bancos", "CodBanco", lCodigo)
    If lErro <> SUCESSO Then Error 57699
    
    iCodigo = lCodigo
    
    Banco_Automatico = SUCESSO

    Exit Function

Erro_Banco_Automatico:

    Banco_Automatico = Err

    Select Case Err

        Case 57699
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148297)

    End Select
    
    Exit Function
    
End Function

Function Conta_Automatica(iCodigo As Integer) As Long
'Retorna o número da proxima Conta Corrente Interna disponível

Dim lCodigo As Long, lErro As Long

On Error GoTo Erro_Conta_Automatica

    lErro = CF("Config_ObterAutomatico", "CPRConfig", NUM_PROX_CONTA, "ContasCorrentesInternas", "Codigo", lCodigo)
    If lErro <> SUCESSO Then Error 57699
    
    iCodigo = lCodigo
    
    Conta_Automatica = SUCESSO

    Exit Function

Erro_Conta_Automatica:

    Conta_Automatica = Err

    Select Case Err

        Case 57699
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148298)

    End Select
    
    Exit Function
    
End Function

Private Function DebitoRecCli_ValidaAlteracaoComissoes(ByVal objDebitoRecCli As ClassDebitoRecCli, ByVal colInfoComissao As colInfoComissao) As Long
'verifica se a nova colecao de comissoes é compativel com as comissoes que estavam gravadas anteriormente
'retornará erro se tentar excluir ou alterar comissao de vendedor que esteja baixada

Dim lErro As Long, lComando As Long, iCodVendedor As Integer, dValorComissao As Double
Dim iOK As Integer, iIndice As Integer

On Error GoTo Erro_DebitoRecCli_ValidaAlteracaoComissoes

    'Abre os comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 59212
    
    'Lê as comissões baixadas com os dados passados
    lErro = Comando_Executar(lComando, "SELECT CodVendedor, Valor FROM Comissoes WHERE TipoTitulo = ? AND NumIntDoc = ? AND Status = ?", iCodVendedor, dValorComissao, TIPO_DEBITO, objDebitoRecCli.lNumIntDoc, STATUS_BAIXADO)
    If lErro <> AD_SQL_SUCESSO Then Error 59213

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 59214

    'Loop de verificacao
    Do While lErro = AD_SQL_SUCESSO

        'verifica se a comissao do vendedor continua na colecao e com o mesmo valor
        
        iOK = 0
        
        For iIndice = 1 To colInfoComissao.Count
        
            If colInfoComissao(iIndice).iCodVendedor = iCodVendedor And colInfoComissao(iIndice).dValor = -dValorComissao Then
            
                iOK = 1
                Exit For
                
            End If
            
        Next
        
        If iOK = 0 Then Error 59215
        
        'busca o próximo registro
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 59216
        
    Loop
    
    Call Comando_Fechar(lComando)
    
    DebitoRecCli_ValidaAlteracaoComissoes = SUCESSO
     
    Exit Function
    
Erro_DebitoRecCli_ValidaAlteracaoComissoes:

    DebitoRecCli_ValidaAlteracaoComissoes = Err
     
    Select Case Err
          
        Case 59212
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 59213, 59214, 59216
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_COMISSOES", Err, objDebitoRecCli.lNumIntDoc)
        
        Case 59215
            Call Rotina_Erro(vbOKOnly, "ERRO_COMISSOES_BAIXADA_ALT_DEBITOS", Err, iCodVendedor)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148299)
     
    End Select
     
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Private Function AntecipPag_TestaRepeticao(ByVal objAntecipPag As ClassAntecipPag) As Long
'Faz uma verificação "fraca" (não por chave primária) para dificultar a inclusão pelo usuário de adiantamentos mais de uma vez,
'ou por estar registrando em duplicidade ou por achar que está alterando um adiantamento anterior.

Dim lErro As Long, lComando As Long, dValor As Double
Dim vbMsgRes As VbMsgBoxResult

On Error GoTo Erro_AntecipPag_TestaRepeticao

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 59231
    
    'Lê os adiantamentos nesta data
    lErro = Comando_Executar(lComando, "SELECT SUM(Valor) FROM PagtosAntecipados, MovimentosContaCorrente WHERE PagtosAntecipados.NumMovto = MovimentosContaCorrente.NumMovto AND PagtosAntecipados.Fornecedor = ? AND PagtosAntecipados.Filial_Fornecedor = ? AND MovimentosContaCorrente.Excluido = 0 AND MovimentosContaCorrente.DataMovimento = ? AND MovimentosContaCorrente.FilialEmpresa = ?", _
        dValor, objAntecipPag.lFornecedor, objAntecipPag.iFilial, objAntecipPag.dtData, giFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then Error 59232

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 59233

    If dValor <> 0 Then
    
        vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_INCLUSAO_ANTECIPPAG_ADICIONAL", Format(dValor, "Currency"))
        If vbMsgRes = vbNo Then Error 59234

    End If
    
    Call Comando_Fechar(lComando)
    
    AntecipPag_TestaRepeticao = SUCESSO
     
    Exit Function
    
Erro_AntecipPag_TestaRepeticao:

    AntecipPag_TestaRepeticao = Err
     
    Select Case Err
          
        Case 59231
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 59232, 59233
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ANTECPAG_DATA", Err, objAntecipPag.dtData)
        
        Case 59234 'desistiu
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148300)
     
    End Select
     
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Private Function AntecipRec_TestaRepeticao(ByVal objAntecipRec As ClassAntecipReceb) As Long
'Faz uma verificação "fraca" (não por chave primária) para dificultar a inclusão pelo usuário de adiantamentos mais de uma vez,
'ou por estar registrando em duplicidade ou por achar que está alterando um adiantamento anterior.

Dim lErro As Long, lComando As Long, dValor As Double
Dim vbMsgRes As VbMsgBoxResult

On Error GoTo Erro_AntecipRec_TestaRepeticao

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 59236
    
    'Lê os adiantamentos nesta data
    lErro = Comando_Executar(lComando, "SELECT SUM(Valor) FROM RecebAntecipados, MovimentosContaCorrente WHERE RecebAntecipados.NumMovto = MovimentosContaCorrente.NumMovto AND RecebAntecipados.Cliente = ? AND RecebAntecipados.Filial_Cliente = ? AND MovimentosContaCorrente.Excluido = 0 AND MovimentosContaCorrente.DataMovimento = ? AND MovimentosContaCorrente.FilialEmpresa = ?", _
        dValor, objAntecipRec.lCliente, objAntecipRec.iFilial, objAntecipRec.dtData, giFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then Error 59237

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 59238

    If dValor <> 0 Then
    
        vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_INCLUSAO_ANTECIPREC_ADICIONAL", Format(dValor, "Currency"))
        If vbMsgRes = vbNo Then Error 59239

    End If
    
    Call Comando_Fechar(lComando)
    
    AntecipRec_TestaRepeticao = SUCESSO
     
    Exit Function
    
Erro_AntecipRec_TestaRepeticao:

    AntecipRec_TestaRepeticao = Err
     
    Select Case Err
          
        Case 59236
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 59237, 59238
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ANTECREC_DATA", Err, objAntecipRec.dtData)
        
        Case 59239 'desistiu
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148301)
     
    End Select
     
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

'??? ATENCAO: criar chama funcoes apontando p/crfatgrava e APAGAR daqui
Function CreditoPagar_Testa_Repeticao(ByVal objCreditoPagar As ClassCreditoPagar) As Long
'Pede confirmacao do usuario se tentar inserir novo registro que possivelmente tenha sido entrado antes
'Chamada para tentar evitar entradas em duplicidade
'Obs.: estou desconsiderando a sigla do docto e a filial da empresa

Dim lErro As Long, lComando As Long, dtDataEmissao As Date
Dim vbMsgRes As VbMsgBoxResult

On Error GoTo Erro_CreditoPagar_Testa_Repeticao

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 59241
    
    'Verifica se Data Emissão está preenchida
    If objCreditoPagar.dtDataEmissao <> DATA_NULA Then
        
        'Tenta lerCrédito a Pagar de mesmo forn e numero com data emissão dentro da Faixa ou DATA_NULA
        lErro = Comando_Executar(lComando, "SELECT DataEmissao FROM CreditosPagForn WHERE Fornecedor = ? AND Filial = ? AND NumTitulo = ? AND (( DataEmissao > ? AND DataEmissao < ? ) OR DataEmissao = ? ) AND Status <> ?", _
            dtDataEmissao, objCreditoPagar.lFornecedor, objCreditoPagar.iFilial, objCreditoPagar.lNumTitulo, (objCreditoPagar.dtDataEmissao - PERIODO_EMISSAO), (objCreditoPagar.dtDataEmissao + PERIODO_EMISSAO), DATA_NULA, STATUS_EXCLUIDO)
        
    Else
        
        'Tenta lerCrédito a Pagar de mesmo forn e numero independente de data emissão
        lErro = Comando_Executar(lComando, "SELECT DataEmissao FROM CreditosPagForn WHERE Fornecedor = ? AND Filial = ? AND NumTitulo = ? AND Status <> ?", _
            dtDataEmissao, objCreditoPagar.lFornecedor, objCreditoPagar.iFilial, objCreditoPagar.lNumTitulo, STATUS_EXCLUIDO)
    
    End If
    
    If lErro <> AD_SQL_SUCESSO Then Error 59242
    
    'Lê o crédito a pagar, se estiver no BD
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 59243
    
    'Achou o Crédito Pagar no BD
    If lErro = AD_SQL_SUCESSO Then
    
        'Se a data de emissão não está preenchida
        If dtDataEmissao = DATA_NULA Then
            'Não passa a data como parâmetro para a mensagem de erro
            vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_CREDITO_PAGAR_NUMERO_REPETIDO", objCreditoPagar.lNumTitulo, objCreditoPagar.lFornecedor, objCreditoPagar.iFilial, objCreditoPagar.sSiglaDocumento, "")
            If vbMsgRes = vbNo Then Error 59244
        'Senão
        Else
            'A data será será passada como parâmetro
            vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_CREDITO_PAGAR_NUMERO_REPETIDO", objCreditoPagar.lNumTitulo, objCreditoPagar.lFornecedor, objCreditoPagar.iFilial, objCreditoPagar.sSiglaDocumento, dtDataEmissao)
            If vbMsgRes = vbNo Then Error 59244
        End If
        
    End If
            
    Call Comando_Fechar(lComando)
    
    CreditoPagar_Testa_Repeticao = SUCESSO
     
    Exit Function
    
Erro_CreditoPagar_Testa_Repeticao:

    CreditoPagar_Testa_Repeticao = Err
     
    Select Case Err
          
        Case 59241
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 59242, 59243
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CREDITOSPAGFORN", Err, objCreditoPagar.lFornecedor, objCreditoPagar.iFilial, objCreditoPagar.sSiglaDocumento, objCreditoPagar.lNumTitulo, objCreditoPagar.dtDataEmissao)
        
        Case 59244 'desistiu
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148302)
     
    End Select
     
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

'??? ATENCAO: criar chama funcoes apontando p/crfatgrava e APAGAR daqui
Function DebitoRecCli_Testa_Repeticao(ByVal objDebitoRecCli As ClassDebitoRecCli) As Long
'Pede confirmacao do usuario se tentar inserir novo registro que possivelmente tenha sido entrado antes
'Chamada para tentar evitar entradas em duplicidade
'Obs.: estou desconsiderando a sigla do docto e a filial da empresa

Dim lErro As Long, lComando As Long, dtDataEmissao As Date
Dim vbMsgRes As VbMsgBoxResult

On Error GoTo Erro_DebitoRecCli_Testa_Repeticao

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 59246
    
    'Verifica se Data Emissão está preenchida
    If objDebitoRecCli.dtDataEmissao <> DATA_NULA Then
        
        'Tenta docto de mesmo cliente e numero com data emissão dentro da Faixa ou DATA_NULA
        lErro = Comando_Executar(lComando, "SELECT DataEmissao FROM DebitosRecCli WHERE Cliente = ? AND Filial = ? AND NumTitulo = ? AND (( DataEmissao > ? AND DataEmissao < ? ) OR DataEmissao = ? ) AND Status <> ?", _
            dtDataEmissao, objDebitoRecCli.lCliente, objDebitoRecCli.iFilial, objDebitoRecCli.lNumTitulo, (objDebitoRecCli.dtDataEmissao - PERIODO_EMISSAO), (objDebitoRecCli.dtDataEmissao + PERIODO_EMISSAO), DATA_NULA, STATUS_EXCLUIDO)
        
    Else
        
        'Tenta ler docto de mesmo cliente e numero independente de data emissão
        lErro = Comando_Executar(lComando, "SELECT DataEmissao FROM DebitosRecCli WHERE Cliente = ? AND Filial = ? AND NumTitulo = ? AND Status <> ?", _
            dtDataEmissao, objDebitoRecCli.lCliente, objDebitoRecCli.iFilial, objDebitoRecCli.lNumTitulo, STATUS_EXCLUIDO)
    
    End If
    
    If lErro <> AD_SQL_SUCESSO Then Error 59247
    
    'Lê o docto, se estiver no BD
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 59248
    
    'Achou o docto no BD
    If lErro = AD_SQL_SUCESSO Then
    
        'Se a data de emissão não está preenchida
        If dtDataEmissao = DATA_NULA Then
            'Não passa a data como parâmetro para a mensagem de erro
            vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_DEBITORECCLI_JA_EXISTENTE", objDebitoRecCli.lCliente, objDebitoRecCli.iFilial, objDebitoRecCli.sSiglaDocumento, objDebitoRecCli.lNumTitulo, "")
            If vbMsgRes = vbNo Then Error 59249
        'Senão
        Else
            'A data será passada como parâmetro
            vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_DEBITORECCLI_JA_EXISTENTE", objDebitoRecCli.lCliente, objDebitoRecCli.iFilial, objDebitoRecCli.sSiglaDocumento, objDebitoRecCli.lNumTitulo, dtDataEmissao)
            If vbMsgRes = vbNo Then Error 59249
        End If
        
    End If
            
    Call Comando_Fechar(lComando)
    
    DebitoRecCli_Testa_Repeticao = SUCESSO
     
    Exit Function
    
Erro_DebitoRecCli_Testa_Repeticao:

    DebitoRecCli_Testa_Repeticao = Err
     
    Select Case Err
          
        Case 59246
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 59247, 59248
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_DEBITOSRECCLI", Err)
        
        Case 59249 'desistiu
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148303)
     
    End Select
     
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function TitulosRec_AtualizaBoletos_Impressao(ByVal colInfoParcRec As Collection, lIdBoleto As Long, Optional ByVal sProxNossoNumero As String = "", Optional ByVal iBanco As Integer = 0) As Long
'Esta Função Atualiza a Data e o Id das parcelas para o Relatório
'Parametros: Passo a Coleção de Parcelas e me retorna o Id para ser passado para o Relatório
'Se sProxNossoNumero for passado tb atualiza o campo NumTitCobrador

Dim alComando(0 To 6) As Long
Dim lErro As Long, iDesativada As Integer, iCobrador As Integer, iCodCarteiraCobranca As Integer
Dim lTransacao As Long
Dim objInfoParcRec As ClassInfoParcRec
Dim iNumParcela As Integer
Dim lCodigo As Long, sNumTitCobrador As String
Dim iIndice As Integer, iTamNossoNumero As Integer, sFormatoNossoNum As String

On Error GoTo Erro_TitulosRec_AtualizaBoletos_Impressao

    'Abre os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 61348
    Next

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 61349
        
    'Gera o Próximo Id de Boletos para controle Impressao
    lErro = CF("IdBoleto_Automatico", lCodigo)
    If lErro <> SUCESSO Then gError 61353
    
    lErro = CF("Banco_ObtemTamNossoNumero", iBanco, iTamNossoNumero)
    If lErro <> SUCESSO Then gError 61353
    
    If iBanco = 104 And iTamNossoNumero = 15 And Len(Trim(sProxNossoNumero)) = 10 Then iTamNossoNumero = 10
    
    sFormatoNossoNum = FormataCpoNum(0, iTamNossoNumero)
    
    For Each objInfoParcRec In colInfoParcRec
        
        If objInfoParcRec.iMarcada = SELECIONAR_CHECADO Then
            
            sNumTitCobrador = String(STRING_NUMTITCOBRADOR, 0)
            lErro = Comando_ExecutarPos(alComando(0), "SELECT NumParcela, NumTitCobrador FROM ParcelasRec WHERE NumIntDoc = ?", 0, iNumParcela, sNumTitCobrador, objInfoParcRec.lNumIntParc)
            If lErro <> AD_SQL_SUCESSO Then gError 61350

            'Tenta ler a Parcela
            lErro = Comando_BuscarPrimeiro(alComando(0))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 61351

            If lErro = AD_SQL_SEM_DADOS Then gError 61351
            
            'Tenta ler a Parcela
            lErro = Comando_LockExclusive(alComando(0))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 61352
            
            If Len(Trim(sProxNossoNumero)) <> 0 Then
                sNumTitCobrador = Format(sProxNossoNumero, sFormatoNossoNum)
                sProxNossoNumero = Format(Val(sProxNossoNumero) + 1, sFormatoNossoNum)
                iCobrador = objInfoParcRec.iCobrador
                iCodCarteiraCobranca = objInfoParcRec.iCarteiraCobrador
            End If
            
            'Atualiza a tabela de ParcelasRec o Id e data que foi gerado o Boleto
            lErro = Comando_ExecutarPos(alComando(1), "UPDATE ParcelasRec SET IdImpressaoBoleto = ?,  DataImpressaoBoleto = ?, NumTitCobrador = ?", alComando(0), lCodigo, gdtDataHoje, sNumTitCobrador)
            If lErro <> AD_SQL_SUCESSO Then gError 61354
                
        End If
    
    Next
    
    If Len(Trim(sProxNossoNumero)) <> 0 Then
    
        lErro = Comando_ExecutarPos(alComando(3), "SELECT Desativada FROM CarteirasCobrador WHERE Cobrador = ?", 0, iDesativada, iCobrador)
        If lErro <> AD_SQL_SUCESSO Then gError 130034
        
        lErro = Comando_BuscarProximo(alComando(3))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 130035
        If lErro <> AD_SQL_SUCESSO Then gError 130036
        
        Do While lErro = AD_SQL_SUCESSO
            
            lErro = Comando_LockExclusive(alComando(3))
            If lErro <> AD_SQL_SUCESSO Then gError 130037
            
            lErro = Comando_ExecutarPos(alComando(4), "UPDATE CarteirasCobrador SET FaixaNossoNumeroProx = ? ", alComando(3), sProxNossoNumero)
            If lErro <> AD_SQL_SUCESSO Then gError 130038
        
            lErro = Comando_BuscarProximo(alComando(3))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 130035
        
        Loop
        
    End If
    
    lIdBoleto = lCodigo
    
    'Confirma a Transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 61355

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next

    TitulosRec_AtualizaBoletos_Impressao = SUCESSO

    Exit Function
    
Erro_TitulosRec_AtualizaBoletos_Impressao:

    TitulosRec_AtualizaBoletos_Impressao = gErr

    Select Case gErr

        Case 130034, 130035, 130036
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CARTCOBR_BOLETO", gErr)
        
        Case 130037
            Call Rotina_Erro(vbOKOnly, "ERRO_BLOQUEIO_CARTCOBR_BOLETO", gErr)
        
        Case 130038
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_CARTCOBR_BOLETO", gErr)
        
        Case 61348
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 61349
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 61350, 61352
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_REC", gErr)

        Case 61351
            Call Rotina_Erro(vbOKOnly, "ERRO_PARCELA_REC_INEXISTENTE", gErr)
        
        Case 61353 'Tratado na rotina chamada
        
        Case 61354
            Call Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_PARCELAS_REC", gErr)

        Case 61355
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148304)

    End Select

    Call Transacao_Rollback

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function IdBoleto_Automatico(lCodigo As Long) As Long
'retorna o número do proximo Id para Boletos

    IdBoleto_Automatico = CF("Config_ObterNumInt", "CRConfig", "NUM_PROX_ID_BOLETO", lCodigo)

End Function

Function BancosInfo_Diretorio_Atualiza(ByVal sDiretorio As String) As Long

Dim lErro As Long
Dim lTransacao As Long
Dim lComando As Long
Dim lComando1 As Long
Dim iCodigo As Integer
Dim sTexto As String

On Error GoTo Erro_BancosInfo_Diretorio_Atualiza

    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 62073

    lComando = Comando_Abrir()
    If lComando = 0 Then Error 62074
    
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 62075

    lErro = Comando_ExecutarPos(lComando, "SELECT InfoCodigo FROM BancosInfo WHERE CodBanco = 0 AND InfoCodigo = 1", 0, iCodigo)
    If lErro <> AD_SQL_SUCESSO Then Error 62076
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 62077
    If lErro = AD_SQL_SEM_DADOS Then
        sTexto = "Diretório de geração de arquivos"
        
        lErro = Comando_Executar(lComando1, "INSERT INTO BancosInfo(CodBanco,InfoCodigo,InfoTexto,InfoDescricao,InfoNivel) VALUES (0,1,?,?,0)", sTexto, sDiretorio)
        If lErro <> AD_SQL_SUCESSO Then Error 62078
    Else
        lErro = Comando_ExecutarPos(lComando1, "UPDATE BancosInfo SET InfoDescricao = ?", lComando, sDiretorio)
        If lErro <> AD_SQL_SUCESSO Then Error 62079
    End If
    
    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then Error 62080
    
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    
    BancosInfo_Diretorio_Atualiza = SUCESSO
    
    Exit Function
    
Erro_BancosInfo_Diretorio_Atualiza:
    
    BancosInfo_Diretorio_Atualiza = Err

    Select Case Err
    
        Case 62073
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
            
        Case 62074, 62075
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 62076, 62077
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BANCOSINFO1", Err)
            
        Case 62078
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_BANCOSINFO", Err)
        
        Case 62079
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_BANCOSINFO", Err)
        
        Case 62080
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148305)
            
    End Select
    
    Call Transacao_Rollback
    
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    
    Exit Function

End Function


Function BorderoCobranca_LeMod(ByVal lComando As Long, ByVal objBorderoCobranca As ClassBorderoCobranca) As Long
'le dados de um bordero de cobranca para alterações
Dim lErro As Long
Dim iCobrador As Integer

On Error GoTo Erro_BorderoCobranca_LeMod

    'Lê o Bordero passado
    lErro = Comando_ExecutarPos(lComando, "SELECT Cobrador FROM BorderosCobranca WHERE NumBordero = ? ", 0, iCobrador, objBorderoCobranca.lNumBordero)
    If lErro <> AD_SQL_SUCESSO Then Error 51659
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 46365
    If lErro = AD_SQL_SEM_DADOS Then Error 51660 'não encontrou
    
    'faz o lock exclusivo no cobrador
    lErro = Comando_LockExclusive(lComando)
    If lErro <> AD_SQL_SUCESSO Then Error 51661
    
    BorderoCobranca_LeMod = SUCESSO
    
    Exit Function
    
Erro_BorderoCobranca_LeMod:

    BorderoCobranca_LeMod = Err
    
    Select Case Err
    
        Case 51659, 46365
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BORDERO_COBRANCA", Err)
            
        Case 51660
        
        Case 51658
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 51661
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_BORDERO_COBRANCA", Err, objBorderoCobranca.lNumBordero)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148306)
            
    End Select

    Exit Function

End Function

Function BorderoCobranca_Atualiza_Processo(ByVal lComando As Long, ByVal lComando1 As Long, ByVal objBorderoCobranca As ClassBorderoCobranca) As Long
'Atualiza o campo Status do borderô de cobrança
'e armazena o nome do arquivo gerado

Dim lErro As Long

On Error GoTo Erro_BorderoCobranca_Atualiza_Processo
    
    'Atera o Status do BOrdero de cobrança
    lErro = Comando_ExecutarPos(lComando1, "UPDATE BorderosCobranca SET Processado = ? , NomeArquivo = ?", lComando, objBorderoCobranca.iProcessado, objBorderoCobranca.sNomeArquivo)
    If lErro <> SUCESSO Then Error 51664
    
    BorderoCobranca_Atualiza_Processo = SUCESSO
    
    Exit Function
    
Erro_BorderoCobranca_Atualiza_Processo:

    Select Case Err
    
        Case 51664
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_BORDERO_COBRANCA", Err, objBorderoCobranca.lNumBordero)
    
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148307)

    End Select

    Exit Function

End Function

Function CarteiraCobrador_AtualizaNossoNumero(ByVal objCarteiraCobrador As ClassCarteiraCobrador, ByVal lComando As Long, ByVal lComando1 As Long) As Long
'Atualiza o campo do próximo "NossoNumero" disponível

Dim lErro As Long

On Error GoTo Erro_CarteiraCobrador_AtualizaNossoNumero

    lErro = Comando_ExecutarPos(lComando1, "UPDATE CarteirasCobrador SET FaixaNossoNumeroProx = ? ", lComando, objCarteiraCobrador.sFaixaNossoNumeroProx)
    If lErro <> AD_SQL_SUCESSO Then Error 51672
    
    CarteiraCobrador_AtualizaNossoNumero = SUCESSO
        
    Exit Function

Erro_CarteiraCobrador_AtualizaNossoNumero:

    CarteiraCobrador_AtualizaNossoNumero = Err
    
    Select Case Err
    
        Case 51672
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_CARTEIRAS_COBRADOR", Err)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148308)
            
    End Select

    Exit Function

End Function

Function BorderoPagto_Lock(ByVal lComando, ByVal lNumIntBordero As Long) As Long
'Faz o Lock exclusivo no ordero de pagamento

Dim lErro As Long
Dim lNumero As Long

On Error GoTo Erro_BorderoPagto_Lock

    'Seleciona o bordero passado por parâmetro
    lErro = Comando_ExecutarPos(lComando, "SELECT  Numero FROM BorderosPagto WHERE NumIntBordero = ? ", 0, lNumero, lNumIntBordero)
    If lErro <> AD_SQL_SUCESSO Then Error 51738
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 51739
    If lErro <> AD_SQL_SUCESSO Then Error 51740 'Não encontrou
    
    'Faz o lock exclusive
    lErro = Comando_LockExclusive(lComando)
    If lErro <> AD_SQL_SUCESSO Then Error 51741
    
    BorderoPagto_Lock = SUCESSO
    
    Exit Function
    
Erro_BorderoPagto_Lock:

    BorderoPagto_Lock = Err
    
    Select Case Err
    
        Case 51738, 51739
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BORDERO_PAGTO", Err)
            
        Case 51740
            lErro = Rotina_Erro(vbOKOnly, "ERRO_BORDERO_PAGTO_INEXISTENTE1", Err)
        
        Case 51741
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_BORDERO_PAGTO", Err)
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148309)
    
    End Select
            
    Exit Function
    
End Function

Function BorderoRetCobr_Grava(ByVal objBorderoRetCobr As ClassBorderoRetCobr) As Long
'ATENÇÃO: Essa função deve ser chamada dentro de uma transação

Dim lErro As Long
Dim alComando(0 To 3) As Long
Dim iIndice As Integer, objBorderoRetCobrCart As ClassBorderoRetCobrCart
Dim lNumIntBordero As Long
Dim objOcorrRetParcRec As ClassOcorrRetParcRec
Dim objContabAutomatica As ClassContabAutomatica
Dim objContabilAutomatico As New ClassContabAutomatica
Dim objParcelaRec As New ClassParcelaReceber
Dim lTransacao As Long
Dim colSaida As New Collection, colCampos As New Collection

On Error GoTo Erro_BorderoRetCobr_Grava

    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 51702
    Next
    
    'Abre a transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 51685
    
    'Gera o número interno do próximo bordero de retorno
    lErro = CF("Config_ObterNumInt", "CPRConfig", "NUM_PROX_BORDERO_RET_COBR", lNumIntBordero)
    If lErro <> SUCESSO Then Error 51703
    
    objBorderoRetCobr.lNumIntBordero = lNumIntBordero
    
    'Inclui no BD o bordero de retorno
    lErro = Comando_Executar(alComando(0), "INSERT INTO BorderosRetCobr(NumIntBordero,Cobrador,NumBorderoRet,NomeArq,DataRecepcao) VALUES (?,?,?,?,?)", objBorderoRetCobr.lNumIntBordero, objBorderoRetCobr.iCobrador, objBorderoRetCobr.lNumBorderoRet, objBorderoRetCobr.sNomeArq, objBorderoRetCobr.dtDataRecepcao)
    If lErro <> AD_SQL_SUCESSO Then Error 51701

    'Ordena pela data do crédito para processar na ordem em que os fatos ocorreram
    colCampos.Add "dtDataCredito"
    Call Ordena_Colecao(objBorderoRetCobr.colBorderoRetCobrCart, colSaida, colCampos)

    For Each objBorderoRetCobrCart In colSaida 'objBorderoRetCobr.colBorderoRetCobrCart
    
        lErro = BorderoRetCobrCart_Grava(objBorderoRetCobrCart, objBorderoRetCobr, alComando)
        If lErro <> SUCESSO Then Error 32261
        
    Next
    
    lErro = BorderoRetCobr_Trata_Arq(objBorderoRetCobr.sNomeArq)
    If lErro <> SUCESSO Then Error 32261
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 51690
    
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
        
    BorderoRetCobr_Grava = SUCESSO
    
    Exit Function
    
Erro_BorderoRetCobr_Grava:

    BorderoRetCobr_Grava = Err
     
    Select Case Err
    
        Case 51685
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
        
        Case 51690
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
            
        Case 51701
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_BORDERO_COBRANCA_RETORNO", Err)
            
        Case 51702
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
            
        Case 51703, 51704, 51705, 51714, 32261
        
        Case 51706
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_OCORR_REM_PARC_RET", Err)
        
        Case 51715
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_PARCELASREC", Err, objParcelaRec.lNumIntDoc)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148310)
        
    End Select
    
    Call Transacao_Rollback

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function
    
End Function

Function Processa_ParcelaRec(ByVal lComando As Long, ByVal lComando1 As Long, ByVal objParcelaRec As ClassParcelaReceber, ByVal objOcorrRemParcRec As ClassOcorrRemParcRec, ByVal objBorderoRetCobr As ClassBorderoRetCobr, ByVal dValorPrincipal As Double, ByVal dtDataVencimento As Date, ByVal dtDataCredito As Date, ByVal iCodOcorrencia As Integer, ByVal sNossoNumero As String) As Long
'Faz o processamento da parcela a receber

Dim lErro As Long
Dim dValorDesconto As Double
Dim dValorBaixado As Double
Dim dValorMulta As Double
Dim dValorJuros As Double
Dim iDiferenca As Integer
Dim objOcorrRetParcRec As New ClassOcorrRetParcRec

On Error GoTo Erro_Processa_ParcelaRec

    'Recolhe alguns dados do registro de detalhe
    If dtDataCredito <> DATA_NULA Then
        iDiferenca = dtDataVencimento - dtDataCredito
    Else
        dtDataCredito = dtDataVencimento
    End If
    
    'Se a parcela foi paga até o vencimento
    If iDiferenca >= 0 Then
        'Calcula-se o valor do desconto da parcela
        lErro = CF("Calcula_Desconto_Parcela", objParcelaRec, dValorDesconto, dtDataCredito)
        If lErro <> SUCESSO Then Error 51691
    'Senão
    Else
        'Calcula-se o valor dos juros da parcela
        lErro = CF("Calcula_Multa_Juros_Parcela", objParcelaRec, dtDataCredito, dValorMulta, dValorJuros)
        If lErro <> SUCESSO Then Error 51692
        
    End If
    
    'Acumula-se os valores creditados para o criação do movimento de conta corrente
    If objParcelaRec.iCarteiraCobranca <> CARTEIRA_DESCONTADA Then
        objBorderoRetCobr.objMovCCI.dValor = Round(objBorderoRetCobr.objMovCCI.dValor + dValorPrincipal, 2)
    End If
    
    dValorBaixado = Round(dValorPrincipal + dValorDesconto - dValorJuros, 2)
           
    'Gera uma baixaparcrec p\ a parcela a receber em questão
    objBorderoRetCobr.colBaixaParcRec.Add 0, 0, objOcorrRemParcRec.lNumIntParc, 0, STATUS_LANCADO, 0, dValorJuros, dValorDesconto, dValorBaixado, dValorPrincipal, objOcorrRemParcRec.iCobrador
    
''    'guarda a informacao que será util p/gerar a contabilizacao
''    objBorderoRetCobrCart.colInfoParcRec.Add objInfoParcRec
    
    'Gera um ocorrenciaRetParcrec de acordo com os dados retornados
    objOcorrRetParcRec.dtDataComplementar = DATA_NULA
    objOcorrRetParcRec.lNumIntParc = objOcorrRemParcRec.lNumIntParc
    objOcorrRetParcRec.lNumSeqOcorr = 0
    objOcorrRetParcRec.sNumTitCobrador = sNossoNumero
    objOcorrRetParcRec.iCodOcorrencia1 = iCodOcorrencia
    objOcorrRetParcRec.dtDataComplementar = DATA_NULA
        
    'Adiciona a ocorrência na coleção
    objBorderoRetCobr.colOcorrRetParcRec.Add objOcorrRetParcRec
        
    Processa_ParcelaRec = SUCESSO
    
    Exit Function

Erro_Processa_ParcelaRec:

    Processa_ParcelaRec = Err
    
    Select Case Err
    
        Case 51691, 51692
                
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148311)
            
    End Select

    Exit Function

End Function

Public Function MovCCI_Grava_PagRec(ByVal objMovContaCorrente As ClassMovContaCorrente) As Long
'Grava pagamento ou recebimento no BD
'ATENÇÃO: Chamada DENTRO de uma Transação

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(3) As Long
Dim dtDataSaldoInicial As Date
Dim iInativo As Integer
Dim iFilialEmpresa As Integer

On Error GoTo Erro_MovCCI_Grava_PagRec

    'Abre os comandos
    For iIndice = 0 To 2
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 6796
    Next
    
    'Lê a ContaCorrente passada como parâmetro
    lErro = Comando_ExecutarLockado(alComando(0), "SELECT FilialEmpresa, DataSaldoInicial FROM ContasCorrentesInternas WHERE Codigo = ?", iFilialEmpresa, dtDataSaldoInicial, objMovContaCorrente.iCodConta)
    If lErro <> AD_SQL_SUCESSO Then Error 6797

    'Verifica se está cadastrada
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 6798
    
    If lErro = AD_SQL_SEM_DADOS Then Error 6799

    'Faz lock na ContaCorrente
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then Error 6800

    'Verifica se data do movto é maior ou igual à data saldo inicial associada à ContaCorrente
    If objMovContaCorrente.dtDataMovimento < dtDataSaldoInicial Then Error 6801
    
    'Preenche objMovContaCorrente.iFilialEmpresa com a Filial Empresa da Conta Corrente
    objMovContaCorrente.iFilialEmpresa = iFilialEmpresa

    'Lê o tipo de pagamento
    lErro = Comando_ExecutarLockado(alComando(1), "SELECT Inativo FROM TipoMeioPagto WHERE Tipo = ? ", iInativo, objMovContaCorrente.iTipoMeioPagto)
    If lErro <> AD_SQL_SUCESSO Then Error 6802

    'Pesquisa o tipo de pagamento
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 6803
    
    If lErro = AD_SQL_SEM_DADOS Then Error 6804
    
    'Faz lock no Tipo de Pagamento
    lErro = Comando_LockShared(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then Error 6805
    
    'Verifica se está ativo
    If iInativo = Inativo Then Error 6806

    'Se portador foi preenchido verifica se está ativo
    If objMovContaCorrente.iPortador <> 0 Then
    
        'Lê o Portador
        lErro = Comando_ExecutarLockado(alComando(2), "SELECT Inativo FROM Portador WHERE Codigo = ? ", iInativo, objMovContaCorrente.iPortador)
        If lErro <> AD_SQL_SUCESSO Then Error 6807
    
        'Pesquisa o Portador
        lErro = Comando_BuscarPrimeiro(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 6808
        
        If lErro = AD_SQL_SEM_DADOS Then Error 6809
        
        'Faz lock no Portador
        lErro = Comando_LockShared(alComando(2))
        If lErro <> AD_SQL_SUCESSO Then Error 6810
        
        'Verifica se está ativo
        If iInativo = Inativo Then Error 6811
        
    End If
     
    'Grava Movimento no BD
    lErro = CF("MovCCI_Grava_PagRec_BD", objMovContaCorrente)
    If lErro <> SUCESSO Then Error 6812
    
    'Fecha os comandos
    For iIndice = 0 To 2
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    MovCCI_Grava_PagRec = SUCESSO

    Exit Function

Erro_MovCCI_Grava_PagRec:

    MovCCI_Grava_PagRec = Err

    Select Case Err

        Case 6796
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 6797, 6798
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONTASCORRENTESINTERNAS1", Err, objMovContaCorrente.iCodConta)
            
        Case 6799
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTACORRENTE_INEXISTENTE", Err, objMovContaCorrente.iCodConta)

        Case 6800
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CONTASCORRENTESINTERNAS", Err, objMovContaCorrente.iCodConta)

        Case 6801
            Call Rotina_Erro(vbOKOnly, "ERRO_DATAMOVIMENTO_MENOR", Err, objMovContaCorrente.dtDataMovimento, dtDataSaldoInicial, objMovContaCorrente.iCodConta)

        Case 6802, 6803
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOMEIOPAGTO1", Err, objMovContaCorrente.iTipoMeioPagto)

        Case 6804
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPOMEIOPAGTO_INEXISTENTE", Err, objMovContaCorrente.iTipoMeioPagto)

        Case 6805
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_TIPOMEIOPAGTO", Err, objMovContaCorrente.iTipoMeioPagto)
        
        Case 6806
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPOMEIOPAGTO_INATIVO", Err, objMovContaCorrente.iTipoMeioPagto)
        
        Case 6807, 6808
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PORTADOR", Err, objMovContaCorrente.iPortador)

        Case 6809
            Call Rotina_Erro(vbOKOnly, "ERRO_PORTADOR_NAO_CADASTRADO1", Err, objMovContaCorrente.iPortador)

        Case 6810
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_PORTADOR", Err, objMovContaCorrente.iPortador)
        
        Case 6811
            Call Rotina_Erro(vbOKOnly, "ERRO_PORTADOR_INATIVO", Err, objMovContaCorrente.iPortador)
            
        Case 6812  'já tratado na rotina chamada
           
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148312)

    End Select

    For iIndice = 0 To 2
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function MovCCI_Grava_PagRec_BD(ByVal objMovContaCorrente As ClassMovContaCorrente) As Long
'Grava Pagamento ou recebimento no BD. Chamada por MovCCI_Grava_PagRec
'Atenção: Chamada DENTRO DE TRANSAÇÃO
    
Dim lErro As Long
Dim lComando As Long
Dim lNumMovto As Long
Dim lSequencial As Long
Dim dtData As Date, dValor As Double

On Error GoTo Erro_MovCCI_Grava_PagRec_BD
    
    'Abre os comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 6787
        
    'Se MovContaCorrente tem nº de MeioPagto preenchido (por enquanto só cheque),
    'verifica se existe Movimento não excluído já registrado
    If objMovContaCorrente.iTipo <> MOVCCI_EXTRATO_CARTAO_CRED And objMovContaCorrente.iTipo <> MOVCCI_CRED_RET_COBRANCA And objMovContaCorrente.iTipo <> MOVCCI_DEB_RET_COBRANCA And objMovContaCorrente.iTipo <> MOVCCI_RECEBIMENTO_TITULO And objMovContaCorrente.iTipo <> MOVCCI_BORDERO_CHEQUE_PRE And objMovContaCorrente.iTipo <> MOVCCI_BORDERO_CHEQUE_LOJA And objMovContaCorrente.iTipo <> MOVCCI_DEP_DESCONTO_CHEQUE And objMovContaCorrente.iTipo <> MOVCCI_SAQ_DESCONTO_CHEQUE And objMovContaCorrente.iTipo <> MOVCCI_DEP_DEVOLUCAO_CHEQUE And objMovContaCorrente.iTipo <> MOVCCI_SAQ_DEVOLUCAO_CHEQUE And objMovContaCorrente.lNumero > 0 Then
    
        lErro = Comando_Executar(lComando, "SELECT NumMovto FROM MovimentosContaCorrente WHERE CodConta = ? AND TipoMeioPagto = ? AND Numero = ? AND Excluido = ? AND Tipo NOT IN (?,?,?,?,?)", lNumMovto, objMovContaCorrente.iCodConta, objMovContaCorrente.iTipoMeioPagto, objMovContaCorrente.lNumero, NAO_EXCLUIDO, MOVCCI_CRED_RET_COBRANCA, MOVCCI_EXTRATO_CARTAO_CRED, MOVCCI_DEB_RET_COBRANCA, MOVCCI_RECEBIMENTO_TITULO, MOVCCI_BORDERO_CHEQUE_PRE)
        If lErro <> SUCESSO Then Error 6788
        
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 6789
        
        If lErro = AD_SQL_SUCESSO Then Error 6790
    
    End If
    
    'Pega o número do proximo movCCI
    lErro = CF("MovCCI_Automatico", lNumMovto)
    If lErro <> SUCESSO Then Error 6791
    objMovContaCorrente.lNumMovto = lNumMovto
    
    'Pega o próximo número sequencial de movimento da ContaCorrente
    lErro = CF("CtaCorrente_Sequencial_Automatico", objMovContaCorrente.iCodConta, lSequencial)
    If lErro <> SUCESSO Then Error 6792
    objMovContaCorrente.lSequencial = lSequencial

    'Insere o movimento na Tabela MovimentosContaCorrente
    lErro = Comando_Executar(lComando, "INSERT INTO MovimentosContaCorrente (NumMovto, FilialEmpresa, CodConta, Sequencial, Tipo, Excluido, TipoMeioPagto, Numero, DataMovimento, Valor, Historico, Portador, Conciliado, Favorecido, NumRefExterna, NumRefInterna) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", objMovContaCorrente.lNumMovto, objMovContaCorrente.iFilialEmpresa, objMovContaCorrente.iCodConta, objMovContaCorrente.lSequencial, objMovContaCorrente.iTipo, NAO_EXCLUIDO, _
        objMovContaCorrente.iTipoMeioPagto, objMovContaCorrente.lNumero, objMovContaCorrente.dtDataMovimento, objMovContaCorrente.dValor, objMovContaCorrente.sHistorico, objMovContaCorrente.iPortador, objMovContaCorrente.iConciliado, objMovContaCorrente.iFavorecido, objMovContaCorrente.sNumRefExterna, objMovContaCorrente.lNumRefInterna)
    If lErro <> AD_SQL_SUCESSO Then Error 6793
    
    'obtem valor para atualizar acumuladores por dia e mes
    Select Case objMovContaCorrente.iTipo
    
        Case MOVCCI_RECEBIMENTO_TITULO, MOVCCI_CREDITO_RETORNO_COBRANCA, MOVCCI_RECEB_ANTECIPADO, MOVCCI_CANC_PAGTO, MOVCCI_BORDERO_CHEQUE_PRE, MOVCCI_BORDERO_CHEQUE_LOJA, MOVCCI_CRED_RET_COBRANCA, MOVCCI_EXTRATO_CARTAO_CRED, MOVCCI_DEP_DESCONTO_CHEQUE, MOVCCI_DEP_DEVOLUCAO_CHEQUE, MOVCCI_DEP_DIN_LOJA, MOVCCI_CHEQUE_SANGRIA_LOJA, MOVCCI_CHEQUE_SANGRIA_LOJA, MOVCCI_CHEQUEPRE_BACKOFFICE, MOVCCI_DEVOLUCAO_CHEQUES_TERCEIROS
            dValor = objMovContaCorrente.dValor
        
        Case MOVCCI_PAGTO_TITULO_POR_CHEQUE, MOVCCI_PAGTO_TITULO_POR_BORDERO, MOVCCI_PAGTO_TITULO_POR_DINHEIRO, MOVCCI_PAGTO_ANTECIPADO, MOVCCI_CANC_RECEBTO, MOVCCI_DEB_RET_COBRANCA, MOVCCI_SAQ_DESCONTO_CHEQUE, MOVCCI_SAQ_DEVOLUCAO_CHEQUE, MOVCCI_BORDERO_CHEQUE_PRE_SAQ, MOVCCI_ENVIO_CHEQUES_TERCEIROS
            dValor = -objMovContaCorrente.dValor
    
        Case Else
            Error 56754
            
    End Select
    
    'Atualiza os dados em CCIMovDia
    dtData = objMovContaCorrente.dtDataMovimento
    lErro = CF("CCIMovDia_Grava", objMovContaCorrente.iCodConta, dtData, dValor)
    If lErro <> SUCESSO Then Error 6794
    
    'Atualiza os dados em CCIMov
    lErro = CF("CCIMov_Grava", objMovContaCorrente.iCodConta, Year(dtData), Month(dtData), dValor)
    If lErro <> SUCESSO Then Error 6795

    'Fecha os comandos
    Call Comando_Fechar(lComando)
    
    MovCCI_Grava_PagRec_BD = SUCESSO

    Exit Function

Erro_MovCCI_Grava_PagRec_BD:

    MovCCI_Grava_PagRec_BD = Err

    Select Case Err

        Case 6787
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 6788, 6789
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCONTACORRENTE", Err)
        
        Case 6790
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPOMEIOPAGTO_JA_UTILIZADO", Err, objMovContaCorrente.iCodConta, objMovContaCorrente.iTipoMeioPagto, objMovContaCorrente.lNumero)

        Case 6793
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MOVIMENTOSCONTACORRENTE", Err, objMovContaCorrente.iCodConta)
           
        Case 6791, 6792, 6794, 6795  'Erros tratados nas rotinas chamadas

        Case 56754
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MOVIMENTOSCONTACORRENTE", Err, objMovContaCorrente.iCodConta)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 148313)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function ConciliacaoBancaria_Automatica_Grava(ByVal iCodConta As Integer, ByVal iNumExtrato As Integer, ByVal iData As Integer, ByVal iValor As Integer, ByVal iHistorico As Integer) As Long
'FAz a conciliação automática doslançamentos para o extrato passado.

Dim lErro As Long
Dim lTransacao As Long
Dim alComando(0 To 6) As Long
Dim iIndice As Integer, iConciliado As Integer
Dim tLanctoExtrato As typeLctoExtratoCNAB
Dim lSequencial As Long, iTipo As Integer
Dim sSelect As String, iCredito As Integer
Dim colFiltro As Collection

On Error GoTo Erro_ConciliacaoBancaria_Automatica_Grava
    'ABre a transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 62314
    
    'ABre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 62315
    Next
    
    'Busca o extrato no BD
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Conciliado FROM ExtratosBancarios WHERE CodConta = ? AND NumExtrato = ? ", 0, iConciliado, iCodConta, iNumExtrato)
    If lErro <> AD_SQL_SUCESSO Then Error 62316

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 62317
    If lErro <> AD_SQL_SUCESSO Then Error 62318 'Não encontrou

    With tLanctoExtrato
        .sHistorico = String(STRING_LANCTOCNAB_HISTORICO, 0)
        
        'Lê os lançamentos não conciliados do extrato
        lErro = Comando_ExecutarPos(alComando(1), "SELECT SeqLcto,Data,Valor,Historico FROM LctosExtratoBancario WHERE CodConta = ? AND NumExtrato = ? AND Conciliado = ? ", 0, .lSeqLcto, .dtData, .dValor, .sHistorico, iCodConta, iNumExtrato, NAO_CONCILIADO)
        If lErro <> AD_SQL_SUCESSO Then Error 62319

        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SEM_DADOS And lErro <> AD_SQL_SUCESSO Then Error 62320
        
        'Monta o Select para os Movimentos de Conta Corrente de acordo com os critérios escolhidos
        sSelect = "SELECT Sequencial,Tipo FROM MovimentosContaCorrente WHERE CodConta = ? AND Excluido <> ? AND Conciliado = ?"
        If iData = MARCADO Then sSelect = sSelect & " AND DataMovimento = ? "
        If iValor = MARCADO Then sSelect = sSelect & " AND Valor = ? "
        If iHistorico = MARCADO Then sSelect = sSelect & " AND Historico = ? "
        
        'Para cada lançamento encontrado
        Do While lErro <> AD_SQL_SEM_DADOS
            'Inclui os critérios escolhidos p\ seleção
            Set colFiltro = Nothing: Set colFiltro = New Collection
            If iData = MARCADO Then colFiltro.Add .dtData
            If iValor = MARCADO Then colFiltro.Add Abs(.dValor)
            If iHistorico = MARCADO Then colFiltro.Add .sHistorico
            
            'Executa o Select de acordo com os critérios escolhidos
            If colFiltro.Count = 0 Then
                lErro = Comando_ExecutarPos(alComando(2), sSelect, 0, lSequencial, iTipo, iCodConta, MOVCONTACORRENTE_EXCLUIDO, NAO_CONCILIADO)
            ElseIf colFiltro.Count = 1 Then
                lErro = Comando_ExecutarPos(alComando(2), sSelect, 0, lSequencial, iTipo, iCodConta, MOVCONTACORRENTE_EXCLUIDO, NAO_CONCILIADO, colFiltro(1))
            ElseIf colFiltro.Count = 2 Then
                lErro = Comando_ExecutarPos(alComando(2), sSelect, 0, lSequencial, iTipo, iCodConta, MOVCONTACORRENTE_EXCLUIDO, NAO_CONCILIADO, colFiltro(1), colFiltro(2))
            ElseIf colFiltro.Count = 3 Then
                lErro = Comando_ExecutarPos(alComando(2), sSelect, 0, lSequencial, iTipo, iCodConta, MOVCONTACORRENTE_EXCLUIDO, NAO_CONCILIADO, colFiltro(1), colFiltro(2), colFiltro(3))
            End If
            If lErro <> AD_SQL_SUCESSO Then Error 62321

            lErro = Comando_BuscarPrimeiro(alComando(2))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 62322
            
            'Para cada Movimento de Conta Corrente Encontrado
            Do While lErro = AD_SQL_SUCESSO
                lErro = Comando_Executar(alComando(6), "SELECT Credito FROM TiposMovtoCtaCorrente WHERE Codigo = ?", iCredito, iTipo)
                If lErro <> AD_SQL_SUCESSO Then Error 62323
                
                lErro = Comando_BuscarPrimeiro(alComando(6))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 62324
                If lErro <> AD_SQL_SUCESSO Then Error 62325
                
                'Verifica se o tipo de movimento equivale ao tipo de lançamento
                If (iCredito = TIPOMOVCCI_CREDITA And .dValor > 0) Or iCredito = TIPOMOVCCI_DEBITA And .dValor < 0 Then
                    
                    'Concilia o Movimento CCI com o Lancto do Extrato
                    lErro = Comando_ExecutarPos(alComando(3), "UPDATE MovimentosContaCorrente SET Conciliado = ?", alComando(2), CONCILIADO_AUTOMATICO)
                    If lErro <> AD_SQL_SUCESSO Then Error 62326
            
                    lErro = Comando_ExecutarPos(alComando(4), "UPDATE LctosExtratoBancario SET Conciliado = ?", alComando(1), CONCILIADO_AUTOMATICO)
                    If lErro <> AD_SQL_SUCESSO Then Error 62327
                    
                    lErro = Comando_Executar(alComando(5), "INSERT INTO ConciliacaoBancaria (CodConta,SequencialMovto,NumExtrato,SeqExtrBco,Tipo) VALUES (?,?,?,?,?) ", iCodConta, lSequencial, iNumExtrato, .lSeqLcto, CONCILIADO_AUTOMATICO)
                    If lErro <> AD_SQL_SUCESSO Then Error 62328

                    Exit Do
                End If
                
                lErro = Comando_BuscarProximo(alComando(2))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 62329
            Loop
            
            lErro = Comando_BuscarProximo(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 62330

        Loop

    End With
    
    'Marca o extrato como conciliado
    lErro = Comando_ExecutarPos(alComando(6), "UPDATE ExtratosBancarios SET Conciliado =?", alComando(0), EXTRATO_CONCILIADO)
    If lErro <> AD_SQL_SUCESSO Then Error 62331

    'Confirmaa Transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 62332

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    ConciliacaoBancaria_Automatica_Grava = SUCESSO

    Exit Function

Erro_ConciliacaoBancaria_Automatica_Grava:

    ConciliacaoBancaria_Automatica_Grava = Err
    
    Select Case Err
    
        Case 62314
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
            
        Case 62315
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
            
        Case 62316, 62317
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_EXTRATO_BCO", Err)
            
        Case 62318
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXTRATO_NAO_ENCONTRADO", Err, iNumExtrato)
        
        Case 62319, 62320, 62330
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_LCTO_EXTRATO_BCO", Err)
        
        Case 62321, 62322, 62329
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCONTACORRENTE", Err)
        
        Case 62323, 62324
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOSMOVIMENTO", Err)
        
        Case 62325
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TIPOMOVCCI_NAO_CADASTRADO", Err, iTipo)
            
        Case 62326
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_MOVIMENTOSCONTACORRENTE1", Err, iCodConta, lSequencial)
        
        Case 62327
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_LCTOSEXTRATOBANCARIO", Err, iCodConta, iNumExtrato, tLanctoExtrato.lSeqLcto)
            
        Case 62328
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CONCILIACAOBANCARIA", Err, iCodConta, lSequencial, iNumExtrato, tLanctoExtrato.lSeqLcto)
        
        Case 62331
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_EXTRATO_BCO", Err)
        
        Case 62332
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148314)
            
    End Select

    Call Transacao_Rollback
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function
    
End Function

Function DebitoRecCli_Exclui_EmTransacao(ByVal objDebitoRecCli As ClassDebitoRecCli, ByVal objContabil As ClassContabil) As Long
'Exclui Débito à Receber Cliente do BD

Dim lErro As Long
Dim lComando1 As Long
Dim lComando2 As Long
Dim lComando3 As Long
Dim lNumIntDoc As Long, lNumIntNF As Long
Dim lNumIntBaixa As Long
Dim iTipoTitulo As Integer
Dim objNFiscal As New ClassNFiscal

On Error GoTo Erro_DebitoRecCli_Exclui_EmTransacao

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 17920

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then gError 17921

    lComando3 = Comando_Abrir()
    If lComando3 = 0 Then gError 17922

    'Pesquisa débito no BD
    lErro = Comando_ExecutarPos(lComando1, "SELECT NumIntDoc FROM DebitosRecCli WHERE NumIntDoc = ?", 0, lNumIntDoc, objDebitoRecCli.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 17924

    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 17925

    'Se não encontrou = > erro
    If lErro = AD_SQL_SEM_DADOS Then gError 17926

    'Lock do débito
    lErro = Comando_LockExclusive(lComando1)
    If lErro <> AD_SQL_SUCESSO Then gError 17927

    'se for docto correspondente a NFiscal nao pode ser excluido aqui se a nf nao estiver cancelada
    lErro = CF("DocumentoCPR_OrigemNFiscal", objDebitoRecCli.sSiglaDocumento, lNumIntDoc, lNumIntNF)
    If lErro <> SUCESSO And lErro <> 41542 Then gError 41544
    If lErro = SUCESSO Then
    
        objNFiscal.lNumIntDoc = lNumIntNF

        lErro = CF("NFiscal_Le", objNFiscal)
        If lErro <> SUCESSO And lErro <> 31442 Then gError 59454
        If lErro <> SUCESSO Then gError 59455
        
        If objDebitoRecCli.iExclusao = 0 And objNFiscal.iStatus <> STATUS_CANCELADO Then gError 41545

    End If
    
    'Lê baixas associadas a este titulo
    lErro = Comando_ExecutarPos(lComando2, "SELECT NumIntBaixa FROM BaixasRec WHERE NumIntDoc = ? AND Status <> ?", 0, lNumIntBaixa, lNumIntDoc, STATUS_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 17928

    lErro = Comando_BuscarPrimeiro(lComando2)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 17929

    If lErro = AD_SQL_SUCESSO Then gError 17930

    'Exclui Comissoes (desde que não estejam baixadas)
    iTipoTitulo = TIPO_DEBITO
    lErro = CF("Comissoes_Exclui", iTipoTitulo, lNumIntDoc, 0)
    If lErro <> SUCESSO Then gError 17932

    If objDebitoRecCli.iExclusao = 1 Then

        'Exclui o débito da tabela de DebitosRecCli
        lErro = Comando_ExecutarPos(lComando3, "DELETE FROM DebitosRecCli", lComando1)
        If lErro <> AD_SQL_SUCESSO Then gError 83955
    
    Else
    
        'Exclui o débito da tabela de DebitosRecCli
        lErro = Comando_ExecutarPos(lComando3, "UPDATE DebitosRecCli SET Status = ?", lComando1, STATUS_EXCLUIDO)
        If lErro <> AD_SQL_SUCESSO Then gError 17933
    
    End If
    
    lErro = CF("Trata_Exclusao_Do_Destino", objDebitoRecCli)
    If lErro <> SUCESSO Then gError 192056
    
    If objDebitoRecCli.iExclusao = 1 Then
    
        'Exclui os lançamentos contábeis (se houverem) associados ao título em questão
        lErro = objContabil.Contabil_Exclui(lNumIntDoc, CONTABIL_EXCLUI_EFETIVO)
        If lErro <> SUCESSO Then gError 20532
    
    Else
    
        'Exclui os lançamentos contábeis (se houverem) associados ao título em questão
        lErro = objContabil.Contabil_Exclui(lNumIntDoc)
        If lErro <> SUCESSO Then gError 20532

    End If

    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)

    DebitoRecCli_Exclui_EmTransacao = SUCESSO

    Exit Function

Erro_DebitoRecCli_Exclui_EmTransacao:

    DebitoRecCli_Exclui_EmTransacao = gErr

    Select Case gErr

        Case 17920, 17921, 17922
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 17923
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 17924, 1925
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_DEBITOSRECCLI2", gErr, objDebitoRecCli.lCliente, objDebitoRecCli.iFilial, objDebitoRecCli.lNumTitulo)

        Case 17926
            Call Rotina_Erro(vbOKOnly, "ERRO_DEBITORECCLI_NAO_ENCONTRADO1", gErr, objDebitoRecCli.lCliente, objDebitoRecCli.iFilial, objDebitoRecCli.sSiglaDocumento, objDebitoRecCli.lNumTitulo)

        Case 17927
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_DEBITOSRECCLI", gErr, objDebitoRecCli.lCliente, objDebitoRecCli.iFilial, objDebitoRecCli.sSiglaDocumento, objDebitoRecCli.lNumTitulo)

        Case 17928, 17929
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BAIXASREC1", gErr, lNumIntDoc)

        Case 17930
            Call Rotina_Erro(vbOKOnly, "ERRO_NAO_E_PERMITIDO_EXCLUSAO_DEBRECCLI_VINCULADO_BAIXA", gErr, lNumIntDoc)

        Case 17932, 20532, 41544, 59454, 59455, 192056 'Tratados nas rotinas chamadas

        Case 17933, 83955
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_DEBITOSRECCLI", gErr, lNumIntDoc)

        Case 17934
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case 41545
            Call Rotina_Erro(vbOKOnly, "ERRO_DEBITOREC_VINCULADO_NFISCAL", gErr, lNumIntDoc)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148315)

    End Select

    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)

    Exit Function

End Function


Function CobradorInfo_Exclui(ByVal iCodCobrador As Integer) As Long
'Exclui do BD as informações bancárias de cobrança eletrônica p\ o cobrador passado

Dim lComando As Long
Dim lErro As Long
Dim iCodInformacao As Integer
Dim lComando1 As Long

On Error GoTo Erro_CobradorInfo_Exclui

    'Abre os comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 51476

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 51477

    'Buscar as informações dos cobradores no BD
    lErro = Comando_ExecutarPos(lComando, "SELECT CodInformacao FROM CobradorInfo WHERE CodCobrador = ?", 0, iCodInformacao, iCodCobrador)
    If lErro <> AD_SQL_SUCESSO Then Error 51478

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 51479

    'Enquanto encontrar
    Do While lErro = AD_SQL_SUCESSO

        'Apagar a inforação do BD
        lErro = Comando_ExecutarPos(lComando1, "DELETE FROM CobradorInfo", lComando)
        If lErro <> AD_SQL_SUCESSO Then Error 51480

        'Buscar a próximaa informação
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 51481

    Loop

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    CobradorInfo_Exclui = SUCESSO

    Exit Function

Erro_CobradorInfo_Exclui:

    CobradorInfo_Exclui = Err

    Select Case Err

        Case 51476, 51477
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 51478, 51479, 51481
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_COBRADORINFO", Err, iCodCobrador)

        Case 51480
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_COBRADORINFO", Err, iCodCobrador)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, 148316)

    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

'Function CobradorInfo_Exclui(iCodCobrador As Integer) As Long
''Exclui do BD as informações bancárias de cobrança eletrônica p\ o cobrador passado
'
'Dim lComando As Long
'Dim lErro As Long
'Dim iCodInformacao As Integer
'Dim lComando1 As Long
'
'On Error GoTo Erro_CobradorInfo_Exclui
'
'    'Abre os comandos
'    lComando = Comando_Abrir()
'    If lComando = 0 Then Error 51476
'
'    lComando1 = Comando_Abrir()
'    If lComando1 = 0 Then Error 51477
'
'    'Buscar as informações dos cobradores no BD
'    lErro = Comando_ExecutarPos(lComando, "SELECT CodInformacao FROM CobradorInfo WHERE CodCobrador = ?", 0, iCodInformacao, iCodCobrador)
'    If lErro <> AD_SQL_SUCESSO Then Error 51478
'
'    lErro = Comando_BuscarPrimeiro(lComando)
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 51479
'
'    'Enquanto encontrar
'    Do While lErro = AD_SQL_SUCESSO
'
'        'Apagar a inforação do BD
'        lErro = Comando_ExecutarPos(lComando1, "DELETE FROM CobradorInfo", lComando)
'        If lErro <> AD_SQL_SUCESSO Then Error 51480
'
'        'Buscar a próximaa informação
'        lErro = Comando_BuscarProximo(lComando)
'        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 51481
'
'    Loop
'
'    Call Comando_Fechar(lComando)
'    Call Comando_Fechar(lComando1)
'
'    CobradorInfo_Exclui = SUCESSO
'
'    Exit Function
'
'Erro_CobradorInfo_Exclui:
'
'    CobradorInfo_Exclui = Err
'
'    Select Case Err
'
'        Case 51476, 51477
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
'
'        Case 51478, 51479, 51481
'''''            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_COBRADORINFO", Err, iCodCobrador)
'
'        Case 51480
'''''            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_COBRADORINFO", Err, iCodCobrador)
'
'        Case Else
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, 148317)
'
'    End Select
'
'    Call Comando_Fechar(lComando)
'    Call Comando_Fechar(lComando1)
'
'    Exit Function
'
'End Function
'

Function CobradorInfo_Inclui(ByVal objCNABCobradorInfo As ClassCNABInfo) As Long
'Inclui as informações do corador

Dim lErro As Long
Dim objInformacao As AdmCodigoNome
Dim lComando As Long

On Error GoTo Erro_CobradorInfo_Inclui

    'ABrir comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 51482

    'Para cada informação do cobrador preenchida
    For Each objInformacao In objCNABCobradorInfo.colInformacoes
        'Insere a informação no BD
        lErro = Comando_Executar(lComando, "INSERT INTO CobradorInfo (CodCobrador,CodInformacao,ValorInformacao) VALUES (?,?,?)", objCNABCobradorInfo.iCodCobrador, objInformacao.iCodigo, objInformacao.sNome)
        If lErro <> AD_SQL_SUCESSO Then Error 51483
    Next

    'fecha o comando
    Call Comando_Fechar(lComando)

    CobradorInfo_Inclui = SUCESSO

    Exit Function

Erro_CobradorInfo_Inclui:

    CobradorInfo_Inclui = Err

    Select Case Err

        Case 51482
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 51483
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_COBRADORINFO", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148318)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function CarteiraCobradorInfo_Exclui(ByVal iCodCobrador As Integer, ByVal iCodCarteira As Integer) As Long
'Exclui as informações da carteira cobrador passada

Dim lComando As Long
Dim lErro As Long
Dim iCodInformacao As Integer
Dim lComando1 As Long

On Error GoTo Erro_CarteiraCobradorInfo_Exclui

    'Abre comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 51484

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 51486

    'Busca as informações da carteira cobrador no BD
    lErro = Comando_ExecutarPos(lComando, "SELECT CodInformacao FROM CarteiraCobradorInfo WHERE CodCobrador = ? AND Codcarteira = ?", 0, iCodInformacao, iCodCobrador, iCodCarteira)
    If lErro <> AD_SQL_SUCESSO Then Error 51494

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 51003

    'Enquanto encontrar
    Do While lErro = AD_SQL_SUCESSO
        'Exclui o registro do BD
        lErro = Comando_ExecutarPos(lComando1, "DELETE FROM CarteiraCobradorInfo", lComando)
        If lErro <> AD_SQL_SUCESSO Then Error 51004

        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 51005

    Loop

    'Fechar comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    CarteiraCobradorInfo_Exclui = SUCESSO

    Exit Function

Erro_CarteiraCobradorInfo_Exclui:

    CarteiraCobradorInfo_Exclui = Err

    Select Case Err

        Case 51484, 51486
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 51494, 51003, 51005
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CARTEIRACOBRADORINFO", Err, iCodCobrador, iCodCarteira)

        Case 51004
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CARTEIRACOBRADORINFO", Err, iCodCobrador, iCodCarteira)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, 148319)

    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function
'
'Function CarteiraCobradorInfo_Exclui(iCodCobrador As Integer, iCodCarteira As Integer) As Long
''Exclui as informações da carteira cobrador passada
'
'Dim lComando As Long
'Dim lErro As Long
'Dim iCodInformacao As Integer
'Dim lComando1 As Long
'
'On Error GoTo Erro_CarteiraCobradorInfo_Exclui
'
'    'Abre comandos
'    lComando = Comando_Abrir()
'    If lComando = 0 Then Error 51484
'
'    lComando1 = Comando_Abrir()
'    If lComando1 = 0 Then Error 51486
'
'    'Busca as informações da carteira cobrador no BD
'    lErro = Comando_ExecutarPos(lComando, "SELECT CodInformacao FROM CarteiraCobradorInfo WHERE CodCobrador = ? AND Codcarteira = ?", 0, iCodInformacao, iCodCobrador, iCodCarteira)
'    If lErro <> AD_SQL_SUCESSO Then Error 51494
'
'    lErro = Comando_BuscarPrimeiro(lComando)
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 51003
'
'    'Enquanto encontrar
'    Do While lErro = AD_SQL_SUCESSO
'        'Exclui o registro do BD
'        lErro = Comando_ExecutarPos(lComando1, "DELETE FROM CarteiraCobradorInfo", lComando)
'        If lErro <> AD_SQL_SUCESSO Then Error 51004
'
'        lErro = Comando_BuscarProximo(lComando)
'        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 51005
'
'    Loop
'
'    'Fechar comandos
'    Call Comando_Fechar(lComando)
'    Call Comando_Fechar(lComando1)
'
'    CarteiraCobradorInfo_Exclui = SUCESSO
'
'    Exit Function
'
'Erro_CarteiraCobradorInfo_Exclui:
'
'    CarteiraCobradorInfo_Exclui = Err
'
'    Select Case Err
'
'        Case 51484, 51486
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
'
'        Case 51494, 51003, 51005
'''''            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CARTEIRACOBRADORINFO", Err, iCodCobrador, iCodCarteira)
'
'        Case 51004
'''''            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CARTEIRACOBRADORINFO", Err, iCodCobrador, iCodCarteira)
'
'        Case Else
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, 148320)
'
'    End Select
'
'    Call Comando_Fechar(lComando)
'    Call Comando_Fechar(lComando1)
'
'    Exit Function
'
'End Function
'

Function CarteiraCobradorInfo_Inclui(ByVal objCNABCarteiraCobradorInfo As ClassCNABInfo) As Long

Dim objInformacao As AdmCodigoNome
Dim lComando As Long
Dim lErro As Long

On Error GoTo Erro_CarteiraCobradorInfo_Inclui

    'Abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then Error 51024

    'Para cada informação preenchida na coleção
    For Each objInformacao In objCNABCarteiraCobradorInfo.colInformacoes
        'Insere a informação no BD
        lErro = Comando_Executar(lComando, "INSERT INTO CarteiraCobradorInfo (CodCobrador,CodCarteira,CodInformacao,ValorInformacao) VALUES (?,?,?,?)", objCNABCarteiraCobradorInfo.iCodCobrador, objCNABCarteiraCobradorInfo.iCarteiraCobrador, objInformacao.iCodigo, objInformacao.sNome)
        If lErro <> AD_SQL_SUCESSO Then Error 51025
    Next

    'Fechar comando
    Call Comando_Fechar(lComando)

    CarteiraCobradorInfo_Inclui = SUCESSO

    Exit Function

Erro_CarteiraCobradorInfo_Inclui:

    CarteiraCobradorInfo_Inclui = Err

    Select Case Err

        Case 51024
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 51025
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CARTEIRASCOBRADORINFO", Err, objCNABCarteiraCobradorInfo.iCodCobrador, objCNABCarteiraCobradorInfo.iCarteiraCobrador)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148321)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function TiposDeLanctoCnab_Grava(ByVal colLancamentos As Collection) As Long

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim objCodDescricao As AdmCodigoNome

On Error GoTo Erro_TiposDeLanctoCnab_Grava

    lComando = Comando_Abrir
    If lComando = 0 Then Error 62041

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then Error 62042

    lErro = Comando_Executar(lComando, "DELETE FROM TiposDeLctoCnab")
    If lErro <> SUCESSO Then Error 62043

    For Each objCodDescricao In colLancamentos

        lErro = Comando_Executar(lComando1, "INSERT INTO TiposDeLctoCnab (Codigo, Descricao) VALUES (?,?)", objCodDescricao.iCodigo, objCodDescricao.sNome)
        If lErro <> AD_SQL_SUCESSO Then Error 62044

    Next

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    TiposDeLanctoCnab_Grava = SUCESSO

    Exit Function

Erro_TiposDeLanctoCnab_Grava:

    TiposDeLanctoCnab_Grava = Err

    Select Case Err

        Case 62041, 62042
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 62043
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_TIPOSDELANCTOCNAB", Err)

        Case 62044
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_TIPOSDELANCTOCNAB", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148322)

    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Function BancosInfo_Grava(ByVal objCNABCobradorInfo As ClassCNABInfo, ByVal colCarteiraInfo As Collection, Optional ByVal colLancamentos As Collection) As Long
'Guar as informaçõe bancária do cobrador e suas carteiras

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_BancosInfo_Grava

    'Abre a transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 62000

    'Grava as informaçõe sdo cobrador
    lErro = CF("CobradorInfo_Grava", objCNABCobradorInfo)
    If lErro <> SUCESSO Then Error 62001

    'Grava as informações da carteira do cobrador
    lErro = CF("CarteirasCobradorInfo_Grava", colCarteiraInfo)
    If lErro <> SUCESSO Then Error 62002

    If Not (colLancamentos Is Nothing) Then

        lErro = CF("TiposDeLanctoCnab_Grava", colLancamentos)
        If lErro <> SUCESSO Then Error 62035

    End If

    'Faz commit na transacao
    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then Error 62003

    BancosInfo_Grava = SUCESSO

    Exit Function

Erro_BancosInfo_Grava:

    BancosInfo_Grava = Err

    Select Case Err

        Case 62000
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 62001, 62002, 62035

        Case 62003
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148323)

    End Select

    'Faz rollback na transacao.
    Call Transacao_Rollback

    Exit Function

End Function

Function CarteirasCobradorInfo_Grava(ByVal colCarteiraInfo As Collection) As Long

Dim lErro As Long
Dim objCNABCarteiraInfo As ClassCNABInfo

On Error GoTo Erro_CarteirasCobradorInfo_Grava

    'Para cada carteira de cobrador
    For Each objCNABCarteiraInfo In colCarteiraInfo
        'Excului as informações das carteiras de cobradores
        lErro = CarteiraCobradorInfo_Exclui(objCNABCarteiraInfo.iCodCobrador, objCNABCarteiraInfo.iCarteiraCobrador)
        If lErro <> SUCESSO Then Error 51474

        'Se alguma informação estiver preenchida
        If objCNABCarteiraInfo.colInformacoes.Count > 0 Then

            'Grava a informação no BD
            lErro = CF("CarteiraCobradorInfo_Inclui", objCNABCarteiraInfo)
            If lErro <> SUCESSO Then Error 51475
        End If
    Next

    CarteirasCobradorInfo_Grava = SUCESSO

    Exit Function

Erro_CarteirasCobradorInfo_Grava:

    CarteirasCobradorInfo_Grava = Err

    Select Case Err

        Case 51474, 51475

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148324)

    End Select

    Exit Function

End Function

Function CobradorInfo_Grava(ByVal objCNABCobradorInfo As ClassCNABInfo) As Long

Dim lErro As Long

On Error GoTo Erro_CobradorInfo_Grava

    'Exclui do BD os dados do cobrador
    lErro = CobradorInfo_Exclui(objCNABCobradorInfo.iCodCobrador)
    If lErro <> SUCESSO Then Error 51472

    'Se alguma informação estiver preenchida
    If objCNABCobradorInfo.colInformacoes.Count > 0 Then
        'Grava a informação no BD
        lErro = CF("CobradorInfo_Inclui", objCNABCobradorInfo)
        If lErro <> SUCESSO Then Error 51473
    End If

    CobradorInfo_Grava = SUCESSO

    Exit Function

Erro_CobradorInfo_Grava:

    CobradorInfo_Grava = Err

    Select Case Err

        Case 51472, 51473

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148325)

    End Select

    Exit Function

End Function

Function Fornecedor_Exclui(ByVal objFornecedor As ClassFornecedor) As Long
'Exclui o Fornecedor e suas filiais

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_Fornecedor_Exclui

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 70355

    lErro = CF("Fornecedor_Exclui_EmTrans", objFornecedor)
    If lErro <> SUCESSO Then gError 70360

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 70371

    Fornecedor_Exclui = SUCESSO

    Exit Function

Erro_Fornecedor_Exclui:

    Fornecedor_Exclui = gErr

    Select Case gErr
        
        Case 70355
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 70360

        Case 70371
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148326)

    End Select

    Call Transacao_Rollback

    Exit Function

End Function

Function Fornecedor_Exclui_EmTrans(ByVal objFornecedor As ClassFornecedor) As Long
'Exclui o Fornecedor e suas filiais

Dim lErro As Long
Dim lComando1 As Long
Dim lComando2 As Long
Dim lComando3 As Long
Dim lComando4 As Long
Dim lEndereco As Long
Dim lCodigo As Long
Dim objFilialFornecedor As New ClassFilialFornecedor

On Error GoTo Erro_Fornecedor_Exclui_EmTrans

    'Inicializa comandos
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 70351

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then gError 70352

    lComando3 = Comando_Abrir()
    If lComando3 = 0 Then gError 70353

    lComando4 = Comando_Abrir()
    If lComando4 = 0 Then gError 70354

    'Seleciona o Fornecedor a ser excluido
    lErro = Comando_ExecutarPos(lComando1, "SELECT Codigo FROM Fornecedores WHERE Codigo =?", 0, lCodigo, objFornecedor.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 70356

    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 70357

    If lErro = AD_SQL_SEM_DADOS Then gError 70358

    'Lock do Fornecedor
    lErro = Comando_LockExclusive(lComando1)
    If lErro <> AD_SQL_SUCESSO Then gError 70359

    'Lock das Filiais
    lErro = CF("FiliaisFornecedores_Lock", objFornecedor.lCodigo)
    If lErro <> SUCESSO Then gError 70360
    
    'Verifica se Fornecedor está relacionado a outros objetos
    lErro = CF("Fornecedor_Objetos_Relacionados_Testa", objFornecedor)
    If lErro <> SUCESSO Then gError 70365

    'Exclui registros de MvDiaForn ligados a Fornecedor
    lErro = CF("MvDiaForn_Exclui_Fornecedor", objFornecedor)
    If lErro <> SUCESSO Then gError 70363
    
    'Exclui os registros de MvPerForn relacionados ao Fornecedor.
    lErro = CF("MvPerForn_Exclui_Fornecedor", objFornecedor)
    If lErro <> SUCESSO Then gError 70364
    
    'Seleciona as Filiais do Fornecedor a serem excluídas
    lErro = Comando_ExecutarPos(lComando3, "SELECT CodFornecedor, Endereco FROM FiliaisFornecedores WHERE CodFornecedor =?", 0, lCodigo, lEndereco, objFornecedor.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 70366

    lErro = Comando_BuscarPrimeiro(lComando3)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 70367

    If lErro = AD_SQL_SEM_DADOS Then gError 70368

    Do While lErro = AD_SQL_SUCESSO

        'Deleta cada Filial do respectivo Fornecedor
        lErro = Comando_ExecutarPos(lComando4, "DELETE FROM FiliaisFornecedores", lComando3)
        If lErro <> AD_SQL_SUCESSO Then gError 70369

        'Exclui Endereco da Filial.
        lErro = CF("Endereco_Exclui", lEndereco)
        If lErro <> SUCESSO Then gError 70362
        
        lErro = Comando_BuscarProximo(lComando3)

    Loop

    'Deleta o Fornecedor em questão
    lErro = Comando_ExecutarPos(lComando2, "DELETE FROM Fornecedores", lComando1)
    If lErro <> AD_SQL_SUCESSO Then gError 70370

    objFilialFornecedor.iCodFilial = FILIAL_MATRIZ
    objFilialFornecedor.lCodFornecedor = objFornecedor.lCodigo

    '****** Janaina ******
    lErro = FilialFornecedor_Exclui_Categorias(objFilialFornecedor)
    If lErro <> SUCESSO Then gError 91191
    '*********************

    'Libera comandos
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)
    Call Comando_Fechar(lComando4)

    Fornecedor_Exclui_EmTrans = SUCESSO

    Exit Function

Erro_Fornecedor_Exclui_EmTrans:

    Fornecedor_Exclui_EmTrans = gErr

    Select Case gErr

        Case 70351, 70352, 70353, 70354
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 70356, 70357
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FORNECEDORES", gErr)

        Case 70358
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECEDOR_NAO_CADASTRADO", gErr, objFornecedor.lCodigo)

        Case 70359
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_FORNECEDORES", gErr, objFornecedor.lCodigo)

        Case 70360, 70361, 70362, 70363, 70364, 70365

        Case 70366, 70367
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIAISFORNECEDORES", gErr)

        Case 70368
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECEDOR_SEM_FILIAL", gErr, objFornecedor.lCodigo)

        Case 70369
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_FILIAISFORNECEDORES", gErr, objFornecedor.lCodigo)

        Case 70370
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_FORNECEDOR", gErr, objFornecedor.lCodigo)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148326)

    End Select
    
    'Libera comandos
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)
    Call Comando_Fechar(lComando4)

    Exit Function

End Function

Private Function FilialFornecedor_Exclui_Categorias(ByVal objFilialFornecedor As ClassFilialFornecedor) As Long
'Exclui as Categorias da Filial do Fornecedor cujo código da filial e do Fornecedor foi passado como parâmetro.

'**** Janaina ******

Dim lErro As Long
Dim alComando(0 To 2) As Long
Dim iIndice As Integer
Dim iFilial As Integer

On Error GoTo Erro_FilialFornecedor_Exclui_Categorias

    'Abre o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 91207
    Next

    'Seleciona as Categorias da Filial do Cliente a serem excluídas
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Filial FROM FilialFornecedorCategorias WHERE Fornecedor =? AND Filial = ?", 0, iFilial, objFilialFornecedor.lCodFornecedor, objFilialFornecedor.iCodFilial)
    If lErro <> AD_SQL_SUCESSO Then gError 91203

    'Tenta ler
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 91204

    'Exclui as Filiais do Fornecedor
    Do While lErro = AD_SQL_SUCESSO

        'Exclui a Filial
        lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM FilialFornecedorCategorias", alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 91205

        'Traz a próxima Categoria da Filial do Cliente
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 91206

    Loop
    
    'Fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    FilialFornecedor_Exclui_Categorias = SUCESSO

    Exit Function

Erro_FilialFornecedor_Exclui_Categorias:

    FilialFornecedor_Exclui_Categorias = gErr

    Select Case gErr

        Case 91207
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 91203, 91204, 91206
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIALFORNECEDORCATEGORIAS3", gErr, objFilialFornecedor.lCodFornecedor, objFilialFornecedor.iCodFilial)

        Case 91205
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_FILIALFORNECEDORCATEGORIAS1", gErr, objFilialFornecedor.lCodFornecedor, objFilialFornecedor.iCodFilial)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148327)

    End Select

    'Fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Fornecedor_Objetos_Relacionados_Testa(ByVal objFornecedor As ClassFornecedor) As Long
'Lê os objetos relacionados com Fornecedor

Dim lErro As Long
Dim lCodigo As Long
Dim lNumNotaFiscal As Long
Dim objFornecedorProdutoFF As New ClassFornecedorProdutoFF
Dim objProdutoFilial As New ClassProdutoFilial


On Error GoTo Erro_Fornecedor_Objetos_Relacionados_Testa

    lErro = NFiscal_Le_Fornecedor_Uma(objFornecedor, lCodigo, lNumNotaFiscal)
    If lErro <> SUCESSO And lErro <> 33753 Then gError 33754

    'Fornecedor está relacionado com Nota Fiscal --> erro
    If lErro = SUCESSO Then gError 33755

    lErro = NFPag_Le_Fornecedor_Uma(objFornecedor, lCodigo, lNumNotaFiscal)
    If lErro <> SUCESSO And lErro <> 33765 Then gError 33766

    'Fornecedor está relacionado com Nota Fiscal à Pagar --> erro
    If lErro = SUCESSO Then gError 33767

    lErro = NFPagBaixada_Le_Fornecedor_Uma(objFornecedor, lCodigo, lNumNotaFiscal)
    If lErro <> SUCESSO And lErro <> 33777 Then gError 33778

    'Fornecedor está relacionado com Nota Fiscal à Pagar Baixada --> erro
    If lErro = SUCESSO Then gError 33779

    lErro = TituloPagar_Le_Fornecedor_Um(objFornecedor, lCodigo)
    If lErro <> SUCESSO And lErro <> 33783 Then gError 33784

    'Fornecedor está relacionado com Título à Pagar --> erro
    If lErro = SUCESSO Then gError 33785

    lErro = TituloPagarBaixado_Le_Fornecedor_Um(objFornecedor, lCodigo)
    If lErro <> SUCESSO And lErro <> 33795 Then gError 33796

    'Fornecedor está relacionado com Título à Pagar Baixado --> erro
    If lErro = SUCESSO Then gError 33797

    lErro = CreditoPagForn_Le_Fornecedor_Um(objFornecedor, lCodigo)
    If lErro <> SUCESSO And lErro <> 33800 Then gError 33801

    'Fornecedor está relacionado com Créditos à Pagar Fornecedor --> erro
    If lErro = SUCESSO Then gError 33802

    lErro = PagtoAntecipado_Le_Fornecedor_Um(objFornecedor, lCodigo)
    If lErro <> SUCESSO And lErro <> 33806 Then gError 33807

    'Fornecedor está relacionado com Pagamento Antecipado --> erro
    If lErro = SUCESSO Then gError 33808

    lErro = FornecedorProdutoFF_Le_Fornecedor_Um(objFornecedor, objFornecedorProdutoFF)
    If lErro <> SUCESSO And lErro <> 70391 Then gError 33813

    'Fornecedor está relacionado com Fornecedor Produto--> erro
    If lErro = SUCESSO Then gError 33814

    lErro = ProdutoFilial_Le_Fornecedor_Um(objFornecedor, objProdutoFilial)
    If lErro <> SUCESSO And lErro <> 33818 Then gError 33819

    'Fornecedor está relacionado com Produto Filial --> erro
    If lErro = SUCESSO Then gError 33820

    lErro = PedidoCompraTodos_Le_Fornecedor_Um(objFornecedor, lCodigo)
    If lErro <> SUCESSO And lErro <> 72407 Then gError 72402
    
    'Fornecedor está relacionado com Pedido de Compra --> erro
    If lErro = SUCESSO Then gError 72403
    
    lErro = RequisicaoCompraTodas_Le_Fornecedor_Um(objFornecedor, lCodigo)
    If lErro <> SUCESSO And lErro <> 72408 Then gError 72409
    
    'Fornecedor está relacionado com Requisicao de Compra --> erro
    If lErro = SUCESSO Then gError 72410
    
    lErro = ItensReqCompraTodas_Le_Fornecedor_Um(objFornecedor)
    If lErro <> SUCESSO And lErro <> 72411 Then gError 72412
    
    'Fornecedor está relacionado com Item de Requisicao de Compra --> erro
    If lErro = SUCESSO Then gError 72413
    
    lErro = RequisicaoModelo_Le_Fornecedor_Um(objFornecedor, lCodigo)
    If lErro <> SUCESSO And lErro <> 72414 Then gError 72415
    
    'Fornecedor está relacionado com Requisicao Modelo --> erro
    If lErro = SUCESSO Then gError 72416
    
    lErro = ItensReqModelo_Le_Fornecedor_Um(objFornecedor)
    If lErro <> SUCESSO And lErro <> 72417 Then gError 72418
    
    'Fornecedor está relacionado com Item de Requisicao Modelo --> erro
    If lErro = SUCESSO Then gError 72419
    
    lErro = CotacaoTodas_Le_Fornecedor_Um(objFornecedor, lCodigo)
    If lErro <> SUCESSO And lErro <> 72420 Then gError 72421
    
    'Fornecedor está relacionado com Cotacao --> erro
    If lErro = SUCESSO Then gError 72422
    
    lErro = CotacaoProdutoTodas_Le_Fornecedor_Um(objFornecedor)
    If lErro <> SUCESSO And lErro <> 72426 Then gError 72427
    
    'Fornecedor está relacionado com CotacaoProduto
    If lErro = SUCESSO Then gError 72428
    
    lErro = PedidoCotacaoTodos_Le_Fornecedor_Um(objFornecedor, lCodigo)
    If lErro <> SUCESSO And lErro <> 72429 Then gError 72430
    
    'Fornecedor está relacionado com Pedido de Cotacao
    If lErro = SUCESSO Then gError 72431
    
    lErro = ConcorrenciaTodas_Le_Fornecedor_Um(objFornecedor, lCodigo)
    If lErro <> SUCESSO And lErro <> 72432 Then gError 72433
    
    'Fornecedor está relacionado com Concorrencia
    If lErro = SUCESSO Then gError 72434
    
    lErro = ItensConcorrenciaTodas_Le_Fornecedor_Um(objFornecedor)
    If lErro <> SUCESSO And lErro <> 72435 Then gError 72436
    
    'Fornecedor está relacionado com Itens de Concorrencia
    If lErro = SUCESSO Then gError 72437
    
''''    lErro = ContratoFornecimento_Le_Fornecedor_Um(objFornecedor, lCodigo)
''''    If lErro <> SUCESSO And lErro <> 72438 Then gError 72439
''''
''''    'Fornecedor está relacionado com ContratoFornecimento
''''    If lErro = SUCESSO Then gError 72440
    
    Fornecedor_Objetos_Relacionados_Testa = SUCESSO

    Exit Function

Erro_Fornecedor_Objetos_Relacionados_Testa:

    Fornecedor_Objetos_Relacionados_Testa = gErr

    Select Case gErr

        Case 33754, 33766, 33778, 33784, 33796, 33801, 33807, 33813
        
        Case 72402, 72409, 72412, 72415, 72418, 72421, 72430, 72433, 72436, 72439
        
        Case 33755
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECEDOR_REL_NFISCAL", gErr, objFornecedor.lCodigo, lNumNotaFiscal)

        Case 33767
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECEDOR_REL_NFISCALPAG", gErr, objFornecedor.lCodigo, lNumNotaFiscal)

        Case 33779
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECEDOR_REL_NFISCALPAGBAIXADA", gErr, objFornecedor.lCodigo, lNumNotaFiscal)

        Case 33785
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECEDOR_REL_TIT_PAGAR", gErr, objFornecedor.lCodigo, lCodigo)

        Case 33797
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECEDOR_REL_TIT_PAGAR_BAIXADO", gErr, objFornecedor.lCodigo, lCodigo)

        Case 33802
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECEDOR_REL_CREDITO_PAGAR_FORN", gErr, objFornecedor.lCodigo, lCodigo)

        Case 33808
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECEDOR_REL_PAGTO_ANTECIPADO", gErr, objFornecedor.lCodigo, lCodigo)

        Case 33814
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECEDOR_REL_FORNECEDOR_PRODUTO", gErr, objFornecedor.lCodigo, objFornecedorProdutoFF.sProduto)

        Case 33820
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECEDOR_REL_PRODUTO_FILIAL", gErr, objFornecedor.lCodigo, objProdutoFilial.sProduto)

        Case 72403
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECEDOR_REL_PEDIDOCOMPRA", gErr, objFornecedor.lCodigo, lCodigo)
            
        Case 72410
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECEDOR_REL_REQCOMPRA", gErr, objFornecedor.lCodigo, lCodigo)
            
        Case 72413
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECEDOR_REL_ITEMREQCOMPRA", gErr, objFornecedor.lCodigo)
                
        Case 72416
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECEDOR_REL_REQMODELO", gErr, objFornecedor.lCodigo, lCodigo)
        
        Case 72419
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECEDOR_REL_ITENSREQMODELO", gErr, objFornecedor.lCodigo)
            
        Case 72422
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECEDOR_REL_COTACAO", gErr, objFornecedor.lCodigo, lCodigo)
            
        Case 72428
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECEDOR_REL_COTACAOPRODUTO", gErr, objFornecedor.lCodigo)
            
        Case 72431
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECEDOR_REL_PEDIDOCOTACAO", gErr, objFornecedor.lCodigo, lCodigo)
            
        Case 72434
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECEDOR_REL_CONCORRENCIA", gErr, objFornecedor.lCodigo, lCodigo)
            
        Case 72437
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECEDOR_REL_ITEMCONCORRENCIA", gErr, objFornecedor.lCodigo)
            
        Case 72440
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECEDOR_REL_CONTRATOFORNECIMENTO", gErr, objFornecedor.lCodigo, lCodigo)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148328)

    End Select

    Exit Function

End Function

Private Function FornecedorProdutoFF_Le_Fornecedor_Um(ByVal objFornecedor As ClassFornecedor, ByVal objFornecedorProdutoFF As ClassFornecedorProdutoFF) As Long
'Retorna sucesso se achar algum Fornecedor relacionado com Fornecedor Filial Produto.

Dim lErro As Long
Dim lComando As Long
Dim sCodigo As String

On Error GoTo Erro_FornecedorProdutoFF_Le_Fornecedor_Um

    sCodigo = String(STRING_PRODUTO, 0)

    'Inicializa comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 70388

    'Lê o Fornecedor na tabela FornecedorProdutoFF
    lErro = Comando_Executar(lComando, "SELECT Produto FROM FornecedorProdutoFF WHERE Fornecedor = ?", sCodigo, objFornecedor.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 70389

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 70390
    
    objFornecedorProdutoFF.sProduto = sCodigo

    'Não achou o Fornecedor
    If lErro = AD_SQL_SEM_DADOS Then gError 70391

    Call Comando_Fechar(lComando)

    FornecedorProdutoFF_Le_Fornecedor_Um = SUCESSO

    Exit Function

Erro_FornecedorProdutoFF_Le_Fornecedor_Um:

    FornecedorProdutoFF_Le_Fornecedor_Um = gErr

    Select Case gErr

        Case 70388
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 70389, 70390
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FORNECEDORPRODUTOFF1", gErr)

        Case 70391
            'Erro tratado na rotina chamada

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148329)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function


Private Function PedidoCompraTodos_Le_Fornecedor_Um(ByVal objFornecedor As ClassFornecedor, lCodigo As Long) As Long
'Retorna sucesso se achar algum Fornecedor relacionado com algum Pedido de Compra, baixado ou não.

Dim lErro As Long
Dim lComando As Long

On Error GoTo Erro_PedidoCompraTodos_Le_Fornecedor_Um


    'Inicializa comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 72404

    'Lê o Fornecedor na tabela PedidoCompraTodos
    lErro = Comando_Executar(lComando, "SELECT Codigo FROM PedidoCompraTodos WHERE Fornecedor = ?", lCodigo, objFornecedor.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 72405

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 72406
    
    'Não achou o Fornecedor
    If lErro = AD_SQL_SEM_DADOS Then gError 72407

    Call Comando_Fechar(lComando)

    PedidoCompraTodos_Le_Fornecedor_Um = SUCESSO

Exit Function

Erro_PedidoCompraTodos_Le_Fornecedor_Um:

    PedidoCompraTodos_Le_Fornecedor_Um = gErr

    Select Case gErr

        Case 72404
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 72405, 72406
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PEDIDOCOMPRA", gErr, objFornecedor.lCodigo)

        Case 72407
            'Erro tratado na rotina chamada

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148330)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function


Private Function RequisicaoCompraTodas_Le_Fornecedor_Um(ByVal objFornecedor As ClassFornecedor, lCodigo As Long) As Long
'Retorna sucesso se achar algum Fornecedor relacionado com alguma Requisicao de Compra, baixada ou não.

Dim lErro As Long
Dim lComando As Long

On Error GoTo Erro_RequisicaoCompraTodas_Le_Fornecedor_Um

    'Inicializa comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 72444

    'Lê o Fornecedor na tabela RequisicaoCompraTodas
    lErro = Comando_Executar(lComando, "SELECT Codigo FROM RequisicaoCompraTodas WHERE FornCliDestino = ?", lCodigo, objFornecedor.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 72445

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 72446
    
    'Não achou o Fornecedor
    If lErro = AD_SQL_SEM_DADOS Then gError 72408

    Call Comando_Fechar(lComando)

    RequisicaoCompraTodas_Le_Fornecedor_Um = SUCESSO

Exit Function

Erro_RequisicaoCompraTodas_Le_Fornecedor_Um:

    RequisicaoCompraTodas_Le_Fornecedor_Um = gErr

    Select Case gErr

        Case 72444
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 72445, 72446
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_REQUISICAOCOMPRA", gErr)

        Case 72408
            'Erro tratado na rotina chamada

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148331)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Private Function ItensReqCompraTodas_Le_Fornecedor_Um(ByVal objFornecedor As ClassFornecedor) As Long
'Retorna sucesso se achar algum Fornecedor relacionado com algum Item de Requisicao de Compra, baixado ou não.

Dim lErro As Long
Dim lComando As Long
Dim lNumIntDoc As Long

On Error GoTo Erro_ItensReqCompraTodas_Le_Fornecedor_Um

    'Inicializa comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 72447

    'Lê o Fornecedor na tabela ItensReqCompraTodas
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc FROM ItensReqCompraTodos WHERE Fornecedor = ?", lNumIntDoc, objFornecedor.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 72448

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 72449
    
    'Não achou o Fornecedor
    If lErro = AD_SQL_SEM_DADOS Then gError 72411

    Call Comando_Fechar(lComando)

    ItensReqCompraTodas_Le_Fornecedor_Um = SUCESSO

Exit Function

Erro_ItensReqCompraTodas_Le_Fornecedor_Um:

    ItensReqCompraTodas_Le_Fornecedor_Um = gErr

    Select Case gErr

        Case 72409, 72411
            'Erro tratado na rotina chamada

        Case 72447
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 72448, 72449
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSREQCOMPRA", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148332)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Private Function RequisicaoModelo_Le_Fornecedor_Um(ByVal objFornecedor As ClassFornecedor, lCodigo As Long) As Long
'Retorna sucesso se achar algum Fornecedor relacionado com alguma  Requisicao Modelo.

Dim lErro As Long
Dim lComando As Long

On Error GoTo Erro_RequisicaoModelo_Le_Fornecedor_Um

    'Inicializa comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 72451

    'Lê o Fornecedor na tabela RequisicaoModelo
    lErro = Comando_Executar(lComando, "SELECT Codigo FROM RequisicaoModelo WHERE FornCliDestino = ?", lCodigo, objFornecedor.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 72452

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 72453
    
    'Não achou o Fornecedor
    If lErro = AD_SQL_SEM_DADOS Then gError 72414

    Call Comando_Fechar(lComando)

    RequisicaoModelo_Le_Fornecedor_Um = SUCESSO

Exit Function

Erro_RequisicaoModelo_Le_Fornecedor_Um:

    RequisicaoModelo_Le_Fornecedor_Um = gErr

    Select Case gErr

        Case 72414
            'Erro tratado na rotina chamada

        Case 72451
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 72452, 72453
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSREQCOMPRA", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148333)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Private Function ItensReqModelo_Le_Fornecedor_Um(ByVal objFornecedor As ClassFornecedor) As Long
'Retorna sucesso se achar algum Fornecedor relacionado com algum Item de Requisicao Modelo.

Dim lErro As Long
Dim lComando As Long
Dim lNumIntDoc As Long

On Error GoTo Erro_ItensReqModelo_Le_Fornecedor_Um

    'Inicializa comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 72454

    'Lê o Fornecedor na tabela ItensReqModelo
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc FROM ItensReqModelo WHERE Fornecedor = ?", lNumIntDoc, objFornecedor.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 72455

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 72456
    
    'Não achou o Fornecedor
    If lErro = AD_SQL_SEM_DADOS Then gError 72417

    Call Comando_Fechar(lComando)

    ItensReqModelo_Le_Fornecedor_Um = SUCESSO

Exit Function

Erro_ItensReqModelo_Le_Fornecedor_Um:

    ItensReqModelo_Le_Fornecedor_Um = gErr

    Select Case gErr

        Case 72417
            'Erro tratado na rotina chamada

        Case 72454
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 72455, 72456
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSREQMODELO2", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148334)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function


Private Function CotacaoTodas_Le_Fornecedor_Um(ByVal objFornecedor As ClassFornecedor, lCodigo As Long) As Long
'Retorna sucesso se achar algum Fornecedor relacionado com Cotacao, baixada ou não.

Dim lErro As Long
Dim lComando As Long

On Error GoTo Erro_CotacaoTodas_Le_Fornecedor_Um

    'Inicializa comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 72457

    'Lê o Fornecedor na tabela CotacaoTodas
    lErro = Comando_Executar(lComando, "SELECT Codigo FROM CotacaoTodas WHERE FornCliDestino = ?", lCodigo, objFornecedor.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 72458

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 72459
    
    'Não achou o Fornecedor
    If lErro = AD_SQL_SEM_DADOS Then gError 72420

    Call Comando_Fechar(lComando)

    CotacaoTodas_Le_Fornecedor_Um = SUCESSO

Exit Function

Erro_CotacaoTodas_Le_Fornecedor_Um:

    CotacaoTodas_Le_Fornecedor_Um = gErr

    Select Case gErr

        Case 72420
            'Erro tratado na rotina chamada

        Case 72457
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 72458, 72459
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_COTACAOTODAS", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148335)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Private Function CotacaoProdutoTodas_Le_Fornecedor_Um(ByVal objFornecedor As ClassFornecedor) As Long
'Retorna sucesso se achar algum Fornecedor relacionado com CotacaoProduto, baixada ou não.

Dim lErro As Long
Dim lComando As Long
Dim lNumIntDoc As Long

On Error GoTo Erro_CotacaoProdutoTodas_Le_Fornecedor_Um

    'Inicializa comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 72460

    'Lê o Fornecedor na tabela CotacaoProdutoTodas
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc FROM CotacaoProdutoTodas WHERE Fornecedor = ?", lNumIntDoc, objFornecedor.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 72461

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 72462
    
    'Não achou o Fornecedor
    If lErro = AD_SQL_SEM_DADOS Then gError 72426

    Call Comando_Fechar(lComando)

    CotacaoProdutoTodas_Le_Fornecedor_Um = SUCESSO

Exit Function

Erro_CotacaoProdutoTodas_Le_Fornecedor_Um:

    CotacaoProdutoTodas_Le_Fornecedor_Um = gErr

    Select Case gErr

        Case 72426
            'Erro tratado na rotina chamada

        Case 72460
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 72461, 72462
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_COTACAOPRODUTOTODAS", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148336)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Private Function PedidoCotacaoTodos_Le_Fornecedor_Um(ByVal objFornecedor As ClassFornecedor, lCodigo As Long) As Long
'Retorna sucesso se achar algum Fornecedor relacionado com Pedido deCotacao, baixado ou não.

Dim lErro As Long
Dim lComando As Long

On Error GoTo Erro_PedidoCotacaoTodos_Le_Fornecedor_Um

    'Inicializa comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 72463

    'Lê o Fornecedor na tabela PedidoCotacaoTodos
    lErro = Comando_Executar(lComando, "SELECT Codigo FROM PedidoCotacaoTodos WHERE Fornecedor = ?", lCodigo, objFornecedor.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 72464

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 72465
    
    'Não achou o Fornecedor
    If lErro = AD_SQL_SEM_DADOS Then gError 72429

    Call Comando_Fechar(lComando)

    PedidoCotacaoTodos_Le_Fornecedor_Um = SUCESSO

Exit Function

Erro_PedidoCotacaoTodos_Le_Fornecedor_Um:

    PedidoCotacaoTodos_Le_Fornecedor_Um = gErr

    Select Case gErr

        Case 72429
            'Erro tratado na rotina chamada

        Case 72463
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 72464, 72465
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PEDIDOCOTACAOTODOS", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148337)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function


Private Function ConcorrenciaTodas_Le_Fornecedor_Um(ByVal objFornecedor As ClassFornecedor, lCodigo As Long) As Long
'Retorna sucesso se achar algum Fornecedor relacionado com Concorrencia

Dim lErro As Long
Dim lComando As Long

On Error GoTo Erro_ConcorrenciaTodas_Le_Fornecedor_Um

    'Inicializa comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 72466

    'Lê o Fornecedor na tabela ConcorrenciaTodas
    lErro = Comando_Executar(lComando, "SELECT Codigo FROM ConcorrenciaTodas WHERE FornCliDestino = ?", lCodigo, objFornecedor.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 72467

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 72468
    
    'Não achou o Fornecedor
    If lErro = AD_SQL_SEM_DADOS Then gError 72432

    Call Comando_Fechar(lComando)

    ConcorrenciaTodas_Le_Fornecedor_Um = SUCESSO

Exit Function

Erro_ConcorrenciaTodas_Le_Fornecedor_Um:

    ConcorrenciaTodas_Le_Fornecedor_Um = gErr

    Select Case gErr

        Case 72432
            'Erro tratado na rotina chamada

        Case 72466
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 72467, 72468
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONCORRENCIATODAS", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148338)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Private Function ItensConcorrenciaTodas_Le_Fornecedor_Um(ByVal objFornecedor As ClassFornecedor) As Long
'Retorna sucesso se achar algum Fornecedor relacionado com Itens de Concorrencia, baixados ou não

Dim lErro As Long
Dim lComando As Long
Dim lNumIntDoc As Long

On Error GoTo Erro_ItensConcorrenciaTodas_Le_Fornecedor_Um

    'Inicializa comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 72469

    'Lê o Fornecedor na tabela ItensConcorrenciaTodas
    lErro = Comando_Executar(lComando, "SELECT NumIntDoc FROM ItensConcorrenciaTodos WHERE Fornecedor = ?", lNumIntDoc, objFornecedor.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 72470

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 72471
    
    'Não achou o Fornecedor
    If lErro = AD_SQL_SEM_DADOS Then gError 72435

    Call Comando_Fechar(lComando)

    ItensConcorrenciaTodas_Le_Fornecedor_Um = SUCESSO

Exit Function

Erro_ItensConcorrenciaTodas_Le_Fornecedor_Um:

    ItensConcorrenciaTodas_Le_Fornecedor_Um = gErr

    Select Case gErr

        Case 72435
            'Erro tratado na rotina chamada

        Case 72469
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 72470, 72471
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSCONCORRENCIATODOS", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148339)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

''Private Function ContratoFornecimento_Le_Fornecedor_Um(objFornecedor As ClassFornecedor, lCodigo As Long) As Long
'''Retorna sucesso se achar algum Fornecedor relacionado com ContratoFornecimento
''
''Dim lErro As Long
''Dim lComando As Long
''
''On Error GoTo Erro_ContratoFornecimento_Le_Fornecedor_Um
''
''    'Inicializa comando
''    lComando = Comando_Abrir()
''    If lComando = 0 Then gError 72472
''
''    'Lê o Fornecedor na tabela ContratoFornecimento
''    lErro = Comando_Executar(lComando, "SELECT Codigo FROM ContratoFornecimento WHERE Fornecedor = ?", lCodigo, objFornecedor.lCodigo)
''    If lErro <> AD_SQL_SUCESSO Then gError 72473
''
''    lErro = Comando_BuscarPrimeiro(lComando)
''    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 72474
''
''    'Não achou o Fornecedor
''    If lErro = AD_SQL_SEM_DADOS Then gError 72438
''
''    Call Comando_Fechar(lComando)
''
''    ContratoFornecimento_Le_Fornecedor_Um = SUCESSO
''
''Exit Function
''
''Erro_ContratoFornecimento_Le_Fornecedor_Um:
''
''    ContratoFornecimento_Le_Fornecedor_Um = gErr
''
''    Select Case gErr
''
''        Case 72438
''            'Erro tratado na rotina chamada
''
''        Case 72472
''            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
''
''        Case 72473, 72474
''            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONTRATOFORNECIMENTO", gErr)
''
''        Case Else
''            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148340)
''
''    End Select
''
''    Call Comando_Fechar(lComando)
''
''    Exit Function
''
''End Function



Function FiliaisFornecedores_Exclui(ByVal objFilialFornecedor As ClassFilialFornecedor) As Long
'Exclui a Filial Fornecedor e seu Endereço

Dim lErro As Long
Dim colNotasFiscais As New Collection
Dim ColTitulosPagar As New Collection
Dim colCreditos As New Collection
Dim colRecAntec As New Collection
Dim lComando1 As Long
Dim lComando2 As Long
Dim lTransacao As Long
Dim lCodigo As Long

On Error GoTo Erro_FiliaisFornecedores_Exclui

    'Inicializa comandos
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 19005

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then gError 19006

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 19007

    'Seleciona a Filial Fornecedor para ser lockada e excluída
    lErro = Comando_ExecutarPos(lComando1, "SELECT CodFornecedor FROM FiliaisFornecedores WHERE CodFornecedor =? AND CodFilial = ?", 0, lCodigo, objFilialFornecedor.lCodFornecedor, objFilialFornecedor.iCodFilial)
    If lErro <> AD_SQL_SUCESSO Then gError 19008

    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 19009

    If lErro = AD_SQL_SEM_DADOS Then gError 19010

    'Lock da FilialFornecedor
    lErro = Comando_LockExclusive(lComando1)
    If lErro <> AD_SQL_SUCESSO Then gError 19011
    
    lErro = CF("FilialFornecedor_Objetos_Relacionados_Testa", objFilialFornecedor)
    If lErro <> SUCESSO Then gError 33849
   
    'Exclui os registros de MvDiaForn relacionados a FilialFornecedor
    lErro = CF("MvDiaForn_Exclui_FilialFornecedor", objFilialFornecedor)
    If lErro <> SUCESSO Then gError 33922
    
    'Exclui os registros de MvPerForn relacionados a FilialFornecedor
    lErro = CF("MvPerForn_Exclui_FilialFornecedor", objFilialFornecedor)
    If lErro <> SUCESSO Then gError 33930
    
    'Exclui a Filial Fornecedor
    lErro = Comando_ExecutarPos(lComando2, "DELETE FROM FiliaisFornecedores", lComando1)
    If lErro <> AD_SQL_SUCESSO Then gError 19019

    'Exclui o Endereço
    lErro = CF("Endereco_Exclui", objFilialFornecedor.lEndereco)
    If lErro <> SUCESSO Then gError 19018
    
    '****** Janaina ******
    lErro = FilialFornecedor_Exclui_Categorias(objFilialFornecedor)
    If lErro <> SUCESSO Then gError 91271
    '*********************
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 19020

    'Libera comandos
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)

    FiliaisFornecedores_Exclui = SUCESSO

    Exit Function

Erro_FiliaisFornecedores_Exclui:

    FiliaisFornecedores_Exclui = gErr

    Select Case gErr

        Case 19005, 19006
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 19007
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
        
        Case 19008, 19009
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIAISFORNECEDORES", gErr)
        
        Case 19010
            Call Rotina_Erro(vbOKOnly, "ERRO_FILIAL_FORNECEDOR_INEXISTENTE", gErr)

        Case 19011
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_FILIAISFORNECEDORES", gErr, objFilialFornecedor.lCodFornecedor)

        Case 19012, 19014, 19016, 19018, 33849, 33922, 33930, 91271
        
        Case 19013
            Call Rotina_Erro(vbOKOnly, "ERRO_FILIALFORNECEDOR_REL_NFE", gErr)

        Case 19015
            Call Rotina_Erro(vbOKOnly, "ERRO_FILIALFORNECEDOR_REL_TIT_PAGAR", gErr)

        Case 19017
            Call Rotina_Erro(vbOKOnly, "ERRO_FILIALFORNECEDOR_REL_CREDITOS", gErr)

        Case 19019
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_FILIAISFORNECEDORES", gErr, objFilialFornecedor.lCodFornecedor)

        Case 19020
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148341)

    End Select

    Call Transacao_Rollback
    
    'Libera comandos
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)

    Exit Function

End Function

Private Function PedidoCompras_Le_AntecipPag(ByVal objAntecipPag As ClassAntecipPag) As Long
'Lê os Pagamentos Antecipados para o Pedido de Compras passado como parametro

Dim lErro As Long
Dim alComando(4) As Long
Dim objPedidoCompra As New ClassPedidoCompras
Dim dTotalAntecipado  As Double
Dim iIndice As Integer
Dim tAntecipPag As typeAntecipPag

On Error GoTo Erro_PedidoCompras_Le_AntecipPag

    For iIndice = LBound(alComando) To UBound(alComando)

        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 74872

    Next
    
    objPedidoCompra.lCodigo = objAntecipPag.lNumPedCompra
    objPedidoCompra.iFilialEmpresa = objAntecipPag.iFilialPedCompra
    
    'Le e locka o Pedido de Compra cujo código foi informado
    lErro = CF("PedidoCompra_LeLock", objPedidoCompra)
    If lErro <> SUCESSO And lErro <> 56259 Then gError 74873
    
    'Se não encontrou o Pedido de Compra informado ==> erro
    If lErro = 56259 Then gError 74874

    lErro = Comando_Executar(alComando(0), "SELECT NumIntPag,Excluido,NumMovto,SaldoNaoApropriado,Fornecedor,Filial_Fornecedor,FilialPedCompra,NumPedCompra FROM PagtosAntecipados WHERE NumPedCompra=? AND Excluido = 0", tAntecipPag.lNumIntPag, tAntecipPag.iExcluido, tAntecipPag.lNumMovto, tAntecipPag.dSaldoNaoApropriado, tAntecipPag.lFornecedor, tAntecipPag.iFilial, tAntecipPag.iFilialPedCompra, tAntecipPag.lNumPedCompra, objPedidoCompra.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 74875
    
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 74876
    
    Do While lErro = AD_SQL_SUCESSO
    
        objAntecipPag.dSaldoNaoApropriado = tAntecipPag.dSaldoNaoApropriado
        
        'Soma todos os adiantamentos para o Pedido de Compra informado
        dTotalAntecipado = objAntecipPag.dSaldoNaoApropriado + dTotalAntecipado
                
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 74877
        
        
    Loop
    
    dTotalAntecipado = dTotalAntecipado + objAntecipPag.dValor
    
    'Verifica se o valor total dos adiantamentos ultrapassa
    'o valor total do Pedido de Compras informado
    If dTotalAntecipado > objPedidoCompra.dValorTotal Then gError 74878
    
    'Fechar Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    PedidoCompras_Le_AntecipPag = SUCESSO
    
    Exit Function
    
Erro_PedidoCompras_Le_AntecipPag:

    PedidoCompras_Le_AntecipPag = gErr
    
    Select Case gErr
    
        Case 74872
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 74873
            'Erro tratado na rotina chamada
            
        Case 74874
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PEDIDOCOMPRA_NAO_CADASTRADO", gErr, objAntecipPag.lNumPedCompra)
            
        Case 74875, 74876, 74877
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PAGTOSANTECIPADOS1", gErr, objAntecipPag.lFornecedor)
            
        Case 74878
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PAGTOSANTECIPADOS_SUPERIOR_VALOR_PEDCOMPRAS", gErr)
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148342)
    
    End Select
        
    Exit Function
        
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
End Function

Function TituloPagar_Verifica_Adiantamento(ByVal lFornecedor As Long, ByVal iFilial As Integer) As Long
'Verifica se existe adiantamento ou Crédito para o Fornecedor do Titulo à pagar passado

Dim lErro As Long
Dim lComando As Long
Dim lCodForn As Long
Dim vbMsgRes As VbMsgBoxResult

On Error GoTo Erro_TituloPagar_Verifica_Adiantamento

    'Abertura de comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 75475
    
    'Se alguma Filial está selecionada
    If giFilialEmpresa <> EMPRESA_TODA Then

        'Lê o Adiantamento relacionado ao Fornecedor e Filial da Filial Empresa passada
        lErro = Comando_Executar(lComando, "SELECT PagtosAntecipados.Fornecedor FROM PagtosAntecipados, MovimentosContaCorrente WHERE MovimentosContaCorrente.NumMovto = PagtosAntecipados.NumMovto AND PagtosAntecipados.Fornecedor = ? AND PagtosAntecipados.Filial_Fornecedor = ? AND PagtosAntecipados.Excluido <> ? AND PagtosAntecipados.SaldoNaoApropriado > ? AND MovimentosContaCorrente.FilialEmpresa = ?", _
            lCodForn, lFornecedor, iFilial, EXCLUIDO, 0, giFilialEmpresa)
        If lErro <> AD_SQL_SUCESSO Then gError 75476

    'Se Empresa Toda está selecionada
    Else

        'Lê o Adiantamento relacionado ao Fornecedor e Filial
        lErro = Comando_Executar(lComando, "SELECT PagtosAntecipados.Fornecedor FROM PagtosAntecipados, MovimentosContaCorrente WHERE MovimentosContaCorrente.NumMovto = PagtosAntecipados.NumMovto AND PagtosAntecipados.Fornecedor = ? AND PagtosAntecipados.Filial_Fornecedor = ? AND PagtosAntecipados.Excluido <> ? AND PagtosAntecipados.SaldoNaoApropriado > ?", _
            lCodForn, lFornecedor, iFilial, EXCLUIDO, 0)
        If lErro <> AD_SQL_SUCESSO Then gError 75490

    End If
                
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 75477
    
    'Se encontrou o vínculo
    If lErro = AD_SQL_SUCESSO Then
        
        'Pergunta se deseja prosseguir na gravação do Titulo a pagar
        vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_TITULOS_PAGAR_VINCULADO_ADIANTAMENTO", lFornecedor, iFilial)
        If vbMsgRes = vbNo Then gError 75479
            
    End If

    'Se alguma Filial está selecionada
    If giFilialEmpresa <> EMPRESA_TODA Then

        'Verifica se existe Crédito vinculado ao Fornecedor e a Filial da FilialEmpresa passada
        lErro = Comando_Executar(lComando, "SELECT Fornecedor FROM CreditosPagForn WHERE Fornecedor = ? AND Filial = ? AND Status = ? AND FilialEmpresa = ? ORDER BY DataEmissao", _
            lCodForn, lFornecedor, iFilial, STATUS_LANCADO, giFilialEmpresa)
        If lErro <> AD_SQL_SUCESSO Then gError 75491

    'Se Empresa Toda está selecionada
    Else

        'Verifica se existe Crédito vinculado ao Fornecedor e a Filial
        lErro = Comando_Executar(lComando, "SELECT Fornecedor FROM CreditosPagForn WHERE Fornecedor = ? AND Filial = ? AND Status = ?", lCodForn, lFornecedor, iFilial, STATUS_LANCADO)
        If lErro <> AD_SQL_SUCESSO Then gError 75482

    End If
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 75483
    
    'Se encontrou vínculo
    If lErro = AD_SQL_SUCESSO Then
        
        'Pergunta se deseja prosseguir na inserção do Titulo a pagar
        vbMsgRes = Rotina_Aviso(vbYesNo, "AVISO_TITULOS_PAGAR_VINCULADO_CREDITO", lFornecedor, iFilial)
        If vbMsgRes = vbNo Then gError 75484
            
    End If
    
    'Fechamento dos comandos
    Call Comando_Fechar(lComando)
    
    TituloPagar_Verifica_Adiantamento = SUCESSO
    
    Exit Function
    
Erro_TituloPagar_Verifica_Adiantamento:
    
    TituloPagar_Verifica_Adiantamento = gErr
    
    Select Case gErr
    
        Case 75475
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 75476, 75477, 75490
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TITULOSPAG1", gErr, lFornecedor)
            
        Case 75479, 75484
            
        Case 75482, 75483, 75491
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CREDITOSPAGFORN2", gErr, lFornecedor)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148343)
    
    End Select
    
    'Fechamento dos comandos
    Call Comando_Fechar(lComando)
    
    Exit Function
    
End Function

Function Importa_Fornecedores() As Long
'Importa os dados da tabela ImportForn
'???se o fornecedor nao tem filial=1 troca a primeira filial encontrada para filial1
Dim lErro As Long
Dim tImportForn As typeImportForn
Dim lComando As Long
Dim lTransacao As Long
Dim objFilialForn As New ClassFilialFornecedor
Dim objFornecedor As New ClassFornecedor
Dim objEndereco As New ClassEndereco
Dim bPrimeiraFilial As Boolean

On Error GoTo Erro_Importa_Fornecedores

    bPrimeiraFilial = False
    
    'Abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 76357
    
    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 76358
    
    tImportForn.sBairro = String(STRING_BAIRRO, 0)
    tImportForn.sCEP = String(STRING_CEP, 0)
    tImportForn.sCidade = String(25, 0)
    tImportForn.sContato = String(STRING_CONTATO, 0)
    tImportForn.sEmail = String(STRING_EMAIL, 0)
    tImportForn.sEndereco = String(STRING_ENDERECO, 0)
    tImportForn.sFax = String(25, 0)
    tImportForn.sFilialAgencia = String(STRING_AGENCIA, 0)
    tImportForn.sFilialCGC = String(STRING_CGC, 0)
    tImportForn.sFilialContaContabil = String(STRING_CONTA, 0)
    tImportForn.sFilialContaCorrente = String(STRING_CONTA_CORRENTE, 0)
    tImportForn.sFilialInscEstadual = String(STRING_INSCR_EST, 0)
    tImportForn.sFilialInscMunicipal = String(STRING_INSCR_MUN, 0)
    tImportForn.sFilialNome = String(STRING_FILIAL_FORNECEDOR_NOME, 0)
    tImportForn.sFilialObservacao1 = String(STRING_FILIAL_FORNECEDOR_OBS, 0)
    tImportForn.sNomeReduzido = String(STRING_FORNECEDOR_NOME_REDUZIDO, 0)
    tImportForn.sObservacao = String(STRING_FORNECEDOR_OBS, 0)
    tImportForn.sRazaoSocial = String(STRING_FORNECEDOR_RAZAO_SOC, 0)
    tImportForn.sSiglaEstado = String(STRING_ESTADO_SIGLA, 0)
    tImportForn.sTelefone1 = String(25, 0)
    tImportForn.sTelefone2 = String(25, 0)
    
    'Lê os registros da tabela ImportForn
    lErro = Comando_Executar(lComando, "SELECT Codigo,RazaoSocial,NomeReduzido,Tipo,Observacao,CondicaoPagto,Desconto,ProxCodFilial,FilialCod," _
    & "FilialNome,FilialCGC,FilialInscricaoEstadual,FilialInscricaoMunicipal,FilialContaContabil,FilialBanco,FilialAgencia,FilialContaCorrente,FilialObservacao1,FilialTipoFrete,Endereco,Bairro,Cidade," _
    & "SiglaEstado,CodigoPais,CEP,Telefone1,Telefone2,Email,Fax,Contato FROM ImportForn ORDER BY Codigo,FilialCod", tImportForn.lCodigo, tImportForn.sRazaoSocial, tImportForn.sNomeReduzido, tImportForn.iTipo, tImportForn.sObservacao, _
    tImportForn.iCondicaoPagto, tImportForn.dDesconto, tImportForn.iProxCodFilial, tImportForn.iFilialCod, tImportForn.sFilialNome, tImportForn.sFilialCGC, tImportForn.sFilialInscEstadual, tImportForn.sFilialInscMunicipal, _
    tImportForn.sFilialContaContabil, tImportForn.iFilialBanco, tImportForn.sFilialAgencia, tImportForn.sFilialContaCorrente, tImportForn.sFilialObservacao1, tImportForn.iFilialTipoFrete, tImportForn.sEndereco, tImportForn.sBairro, _
    tImportForn.sCidade, tImportForn.sSiglaEstado, tImportForn.iCodigoPais, tImportForn.sCEP, tImportForn.sTelefone1, tImportForn.sTelefone2, tImportForn.sEmail, tImportForn.sFax, tImportForn.sContato)
    If lErro <> AD_SQL_SUCESSO Then gError 76359
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 76360
    
    Do While lErro = AD_SQL_SUCESSO
        
        bPrimeiraFilial = False
        
        'Verifica se mudou o fornecedor
        If tImportForn.lCodigo <> objFilialForn.lCodFornecedor Then
            bPrimeiraFilial = True
        End If
        
        objFilialForn.lCodFornecedor = tImportForn.lCodigo
        objFilialForn.iCodFilial = tImportForn.iFilialCod
        
        'Verifica se já existe a Filial do Fornecedor lido na tabela FiliaisFornecedores
        lErro = CF("FilialFornecedor_Le", objFilialForn)
        If lErro <> SUCESSO And lErro <> 12929 Then gError 76361
    
        'Se não existe a filial na tabela FiliaisFornecedores
        If lErro = 12929 Then
            
            Call ImportForn_Preenche_Endereco(tImportForn, objEndereco)
            
            'Se o a primeira filial do Fornecedor lido não é a matriz
            If bPrimeiraFilial = True And objFilialForn.iCodFilial <> FILIAL_MATRIZ Then
                'muda o codigo da filial
                objFilialForn.iCodFilial = FILIAL_MATRIZ
            End If
            
            If objFilialForn.iCodFilial = FILIAL_MATRIZ Then
            
                'Preenche objFornecedor a partir de tImportForn
                lErro = Fornecedor_PreencheObjetos(tImportForn, objFornecedor)
                If lErro <> SUCESSO Then gError 76362
                
                'Grava o Fornecedor
                lErro = Fornecedor_Grava_EmTrans(objFornecedor, objEndereco)
                If lErro <> SUCESSO Then gError 76363

            Else
        
                'Preenche objFilialForn a partir de tImportForn
                lErro = FilialFornecedor_PreencheObjetos(tImportForn, objFilialForn)
                If lErro <> SUCESSO Then gError 76367
                
                'Grava a Filial Fornecedor
                lErro = FiliaisFornecedores_Grava_EmTrans(objFilialForn, objEndereco)
                If lErro <> SUCESSO Then gError 76368
            
            End If
        
        End If
       
        'Busca o proximo registro de ImportForn
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 76369
        
    Loop
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 76370
    
    Call Comando_Fechar(lComando)

    Importa_Fornecedores = SUCESSO
    
    Exit Function
    
Erro_Importa_Fornecedores:

    Importa_Fornecedores = gErr
    
    Select Case gErr
    
        Case 76357
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 76358
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 76359, 76360, 76369
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_IMPORTFORN", gErr)
        
        Case 76361, 76362, 76363, 76367, 76368
            'Erros tratados nas rotinas chamadas
            
        Case 76370
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT_TRANSACAO", gErr)
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148344)
            
    End Select
    
    Call Transacao_Rollback
    
    Call Comando_Fechar(lComando)
    
    Exit Function
    
End Function

Function Fornecedor_PreencheObjetos(tImportForn As typeImportForn, ByVal objFornecedor As ClassFornecedor) As Long
'Preenche objFornecedor e colEndereco a partir dos dados existentes em tImportForn

Dim lErro As Long

On Error GoTo Erro_Fornecedor_PreencheObjetos

    objFornecedor.dDesconto = tImportForn.dDesconto
    objFornecedor.iBanco = tImportForn.iFilialBanco
    objFornecedor.iCondicaoPagto = tImportForn.iCondicaoPagto
    objFornecedor.iProxCodFilial = tImportForn.iProxCodFilial
    '??todo fornecedor está recebendo Tipo=1
    objFornecedor.iTipo = 1
    objFornecedor.lCodigo = tImportForn.lCodigo
    objFornecedor.sAgencia = tImportForn.sFilialAgencia
    objFornecedor.sContaContabil = tImportForn.sFilialContaContabil
    objFornecedor.sContaCorrente = tImportForn.sFilialContaCorrente
    objFornecedor.sInscricaoEstadual = tImportForn.sFilialInscEstadual
    objFornecedor.sInscricaoMunicipal = tImportForn.sFilialInscMunicipal
    objFornecedor.sNomeReduzido = tImportForn.sNomeReduzido
    objFornecedor.sObservacao = tImportForn.sObservacao
    objFornecedor.sObservacao2 = tImportForn.sFilialObservacao1
    objFornecedor.sRazaoSocial = tImportForn.sRazaoSocial
    
    If Len(Trim(tImportForn.sFilialCGC)) > 11 And Len(Trim(tImportForn.sFilialCGC)) <> 14 Then
        objFornecedor.sCgc = Format(Trim(tImportForn.sFilialCGC), "00000000000000")
    Else
        If Len(Trim(tImportForn.sFilialCGC)) > 8 And Len(Trim(tImportForn.sFilialCGC)) <> 11 Then
            objFornecedor.sCgc = Format(Trim(tImportForn.sFilialCGC), "00000000000")
        Else
            objFornecedor.sCgc = tImportForn.sFilialCGC
        End If
    End If
        
''    Select Case Len(Trim(tImportForn.sFilialCGC))
''
''    Case STRING_CPF 'CPF
''
''        'Critica CPF
''        lErro = Cpf_Critica(tImportForn.sFilialCGC)
''        If lErro <> SUCESSO Then gError 76364
''
''        objFornecedor.sCgc = tImportForn.sFilialCGC
''
''    Case STRING_CGC 'CGC
''
''        'Critica CGC
''        lErro = Cgc_Critica(tImportForn.sFilialCGC)
''        If lErro <> SUCESSO Then gError 76365
''
''        objFornecedor.sCgc = tImportForn.sFilialCGC
''
''    Case Else
''
''        objFornecedor.sCgc = ""
''
''    End Select

    Fornecedor_PreencheObjetos = SUCESSO
    
    Exit Function
    
Erro_Fornecedor_PreencheObjetos:

    Fornecedor_PreencheObjetos = gErr
    
    Select Case gErr
    
        Case 76364, 76365
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148345)
            
    End Select
    
    Exit Function
    
End Function

Sub ImportForn_Preenche_Endereco(tImportForn As typeImportForn, objEndereco As ClassEndereco)
'Preenche objEndereco
    
    Set objEndereco = New ClassEndereco
    
    objEndereco.iCodigoPais = tImportForn.iCodigoPais
    objEndereco.sBairro = tImportForn.sBairro
    objEndereco.sCEP = tImportForn.sCEP
    
    'Verifica se o tamanho da string Cidade lida é maior que o permitido
    If Len(Trim(tImportForn.sCidade)) > 15 Then
        objEndereco.sCidade = "***"
    Else
        objEndereco.sCidade = tImportForn.sCidade
    End If

    objEndereco.sContato = tImportForn.sContato
    objEndereco.sEmail = tImportForn.sEmail
    objEndereco.sEndereco = tImportForn.sEndereco
    objEndereco.sSiglaEstado = tImportForn.sSiglaEstado
    
    'Verifica se o tamanho da string Telefone lida é maior que o permitido
    If Len(Trim(tImportForn.sTelefone1)) > 18 Then
        objEndereco.sTelefone1 = "***"
    Else
        objEndereco.sTelefone1 = tImportForn.sTelefone1
    End If
    
    If Len(Trim(tImportForn.sTelefone2)) > 18 Then
        objEndereco.sTelefone2 = "***"
    Else
        objEndereco.sTelefone2 = tImportForn.sTelefone2
    End If
    
    If Len(Trim(tImportForn.sFax)) > 18 Then
        objEndereco.sFax = "***"
    Else
        objEndereco.sFax = tImportForn.sFax
    End If
    
End Sub

Function FilialFornecedor_PreencheObjetos(tImportForn As typeImportForn, objFilialForn As ClassFilialFornecedor) As Long
'Preenche objFilialForn a partir dos dados existentes em tImportForn

Dim lErro As Long

On Error GoTo Erro_FilialFornecedor_PreencheObjetos

    objFilialForn.iBanco = tImportForn.iFilialBanco
    objFilialForn.iCodFilial = tImportForn.iFilialCod
    objFilialForn.iTipoFrete = tImportForn.iFilialTipoFrete
    objFilialForn.lCodFornecedor = tImportForn.lCodigo
    objFilialForn.sAgencia = tImportForn.sFilialAgencia
    objFilialForn.sContaContabil = tImportForn.sFilialContaContabil
    objFilialForn.sContaCorrente = tImportForn.sFilialContaCorrente
    objFilialForn.sContato = tImportForn.sContato
    objFilialForn.sInscricaoEstadual = tImportForn.sFilialInscEstadual
    objFilialForn.sInscricaoMunicipal = tImportForn.sFilialInscMunicipal
    objFilialForn.sNome = tImportForn.sFilialNome
    objFilialForn.sObservacao = tImportForn.sFilialObservacao1
    
    If Len(Trim(tImportForn.sFilialCGC)) > 11 And Len(Trim(tImportForn.sFilialCGC)) <> 14 Then
        objFilialForn.sCgc = Format(Trim(tImportForn.sFilialCGC), "00000000000000")
    Else
        If Len(Trim(tImportForn.sFilialCGC)) > 8 And Len(Trim(tImportForn.sFilialCGC)) <> 11 Then
            objFilialForn.sCgc = Format(Trim(tImportForn.sFilialCGC), "00000000000")
        Else
            objFilialForn.sCgc = tImportForn.sFilialCGC
        End If
    End If
        
''    Select Case Len(Trim(tImportForn.sFilialCGC))
''
''    Case STRING_CPF 'CPF
''
''        'Critica CPF
''        lErro = Cpf_Critica(tImportForn.sFilialCGC)
''        If lErro <> SUCESSO Then gError 76371
''
''        objFilialForn.sCgc = tImportForn.sFilialCGC
''
''    Case STRING_CGC 'CGC
''
''        'Critica CGC
''        lErro = Cgc_Critica(tImportForn.sFilialCGC)
''        If lErro <> SUCESSO Then gError 76372
''
''        objFilialForn.sCgc = tImportForn.sFilialCGC
''
''    Case Else
''
''        objFilialForn.sCgc = ""
''
''    End Select

    FilialFornecedor_PreencheObjetos = SUCESSO
    
    Exit Function
    
Erro_FilialFornecedor_PreencheObjetos:

    FilialFornecedor_PreencheObjetos = gErr
    
    Select Case gErr
    
        Case 76371, 76372
            'Erros tratados nas rotinas chamadas
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148346)
            
    End Select
    
    Exit Function
    
End Function

Function BorderoRetCobrCart_Grava(ByVal objBorderoRetCobrCart As ClassBorderoRetCobrCart, ByVal objBorderoRetCobr As ClassBorderoRetCobr, alComando() As Long) As Long
'ATENÇÃO: Essa função deve ser chamada dentro de uma transação

Dim lErro As Long
Dim iIndice As Integer
Dim lNumIntBordero As Long
Dim objOcorrRetParcRec As ClassOcorrRetParcRec
Dim objContabAutomatica As ClassContabAutomatica
Dim objContabilAutomatico As New ClassContabAutomatica
Dim objParcelaRec As New ClassParcelaReceber, objBorderoRetCobrCtb As ClassBorderoRetCobrCtb

On Error GoTo Erro_BorderoRetCobrCart_Grava

    If objBorderoRetCobrCart.objMovCCI.dValor <> 0 Or objBorderoRetCobrCart.colOcorrRetParcRec.Count <> 0 Then
    
        'Grava o movimento de conta corrente
        objBorderoRetCobrCart.objMovCCI.lNumRefInterna = objBorderoRetCobr.lNumIntBordero
        lErro = CF("MovCCI_Grava_PagRec", objBorderoRetCobrCart.objMovCCI)
        If lErro <> SUCESSO Then Error 51704
        
        If (gcolModulo.Ativo(MODULO_CONTABILIDADE) = MODULO_ATIVO) Then
        
            Set objContabAutomatica = New ClassContabAutomatica
            Set objBorderoRetCobrCtb = New ClassBorderoRetCobrCtb
            Set objBorderoRetCobrCtb.objBorderoRetCobrCart = objBorderoRetCobrCart
            
            lErro = objContabAutomatica.Inicializa_Contab(objBorderoRetCobrCtb, MODULO_CONTASARECEBER, "BCR", objBorderoRetCobrCart.objMovCCI.dtDataContabil, DATA_NULA)
            If lErro <> SUCESSO Then Error 32253
            
        End If
                
        If objBorderoRetCobrCart.colOcorrRetParcRec.Count <> 0 Then
        
            If objBorderoRetCobrCart.colBaixaParcRec.Count > 0 Then
                objBorderoRetCobrCart.objBaixaReceber.lNumMovCta = objBorderoRetCobrCart.objMovCCI.lNumMovto
                objBorderoRetCobrCart.objBaixaReceber.dtData = objBorderoRetCobrCart.objMovCCI.dtDataBaixa
                objBorderoRetCobrCart.objBaixaReceber.dtDataContabil = objBorderoRetCobrCart.objMovCCI.dtDataContabil
            End If
            
            'Para cada ocorrência do bordero de retorno
            For Each objOcorrRetParcRec In objBorderoRetCobrCart.colOcorrRetParcRec
            
                'Armazena o Numero interno do bordero
                objOcorrRetParcRec.lNumIntBorderoRet = objBorderoRetCobr.lNumIntBordero
                
                objParcelaRec.lNumIntDoc = objOcorrRetParcRec.lNumIntParc
                'Lê a parcela a receber ligada a ocorrência
                lErro = CF("ParcelaRec_LeMod", objParcelaRec, alComando(2))
                If lErro <> SUCESSO Then Error 51714
                'Pega o próximo sequencial de ocorrencia
                objOcorrRetParcRec.lNumSeqOcorr = objParcelaRec.iProxSeqOcorr
                                
                'Insere a ocorrencia
                lErro = Comando_Executar(alComando(1), "INSERT INTO OcorrenciasRetParcRec (NumIntParc,NumSeqOcorr,NumIntBorderoRet,CodMovimento,CodOcorrencia1,CodOcorrencia2,CodOcorrencia3,CodOcorrencia4,CodOcorrencia5,CodOcorrencia6,CodComplementar,DataComplementar,ValorComplementar,NumTitCobrador,NumIntRetCobrErros) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", objOcorrRetParcRec.lNumIntParc, objOcorrRetParcRec.lNumSeqOcorr, objOcorrRetParcRec.lNumIntBorderoRet, objOcorrRetParcRec.iCodMovimento, objOcorrRetParcRec.iCodOcorrencia1, objOcorrRetParcRec.iCodOcorrencia2, objOcorrRetParcRec.iCodOcorrencia3, objOcorrRetParcRec.iCodOcorrencia4, objOcorrRetParcRec.iCodOcorrencia5, objOcorrRetParcRec.iCodOcorrencia6, objOcorrRetParcRec.iCodComplementar, objOcorrRetParcRec.dtDataComplementar, objOcorrRetParcRec.dValorComplementar, objOcorrRetParcRec.sNumTitCobrador, objOcorrRetParcRec.lNumIntRetCobrErros)
                If lErro <> SUCESSO Then Error 51706
                    
                'Atualiza o próximo sequencial e ocorrencia da parcela
                lErro = Comando_ExecutarPos(alComando(3), "UPDATE ParcelasRec SET ProxSeqOcorr = ProxSeqOcorr + 1, NumTitCobrador = ?", alComando(2), objOcorrRetParcRec.sNumTitCobrador)
                If lErro <> AD_SQL_SUCESSO Then Error 51715
                
            Next
            
            If objBorderoRetCobrCart.colBaixaParcRec.Count > 0 Then
                'Grava a Baixa a receber
                lErro = CF("BaixaReceber_Grava_Recebimento", objBorderoRetCobrCart.objBaixaReceber, objBorderoRetCobrCart.colBaixaParcRec, objBorderoRetCobrCart.objMovCCI, Nothing, 0, 0, objContabAutomatica)
                If lErro <> SUCESSO Then Error 51705
            End If
            
        End If
        
        If Not (objContabAutomatica Is Nothing) Then
        
            'se houve cobranca de juros ou tarifas
            If objBorderoRetCobrCart.dValorCustas <> 0 Or objBorderoRetCobrCart.dValorTarifas <> 0 Then
            
                lErro = objBorderoRetCobrCtb.GeraContabilizacao_Outras(objContabAutomatica)
                If lErro <> SUCESSO Then Error 51705
                
            End If
            
            lErro = objContabAutomatica.Finaliza_Contab()
            If lErro <> SUCESSO Then Error 32254
            
        End If
    
    End If
    
    BorderoRetCobrCart_Grava = SUCESSO
    
    Exit Function
    
Erro_BorderoRetCobrCart_Grava:

    BorderoRetCobrCart_Grava = Err
     
    Select Case Err
    
        Case 51701
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_BORDERO_COBRANCA_RETORNO", Err)
            
        Case 51703, 51704, 51705, 51714, 32253, 32354
        
        Case 51706
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_OCORR_REM_PARC_RET", Err)
        
        Case 51715
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_PARCELASREC", Err, objParcelaRec.lNumIntDoc)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148347)
        
    End Select
    
    Exit Function
    
End Function

Public Function PreparaImpressao_Cheque(lNumImpressao As Long, ByVal objInfoChequePag As ClassInfoChequePag) As Long

Dim lErro As Long
Dim lTransacao As Long
Dim lComando As Long

On Error GoTo Erro_PreparaImpressao_Cheque

    'Inicia a transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 80406

    'Abre Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 80407

    'obtem sequencial que identifica "geracao" de impressao
    lErro = CF("CPRConfig_ObterNumInt", "NUM_PROX_GERACAO_CHEQUES", lNumImpressao)
    If lErro <> SUCESSO Then gError 80408

    'limpa a tabela
    lErro = Comando_Executar(lComando, "DELETE FROM GeracaoDeCheques WHERE CodGeracao = ?", lNumImpressao)
    If lErro <> AD_SQL_SUCESSO Then gError 80409

    'Insere o novo registro a tabela
    lErro = Comando_Executar(lComando, "INSERT INTO GeracaoDeCheques (CodGeracao, SeqCheque, Favorecido, Valor, NumCheque) VALUES (?,?,?,?,?)", lNumImpressao, 1, objInfoChequePag.sFavorecido, objInfoChequePag.dValor, objInfoChequePag.lNumRealCheque)
    If lErro <> AD_SQL_SUCESSO Then gError 80410

    'Confirma transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 80411

    'Fecha Comando
    lErro = Comando_Fechar(lComando)

    PreparaImpressao_Cheque = SUCESSO
    
    Exit Function

Erro_PreparaImpressao_Cheque:

    PreparaImpressao_Cheque = gErr

    Select Case gErr

        Case 80406
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 80407
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 80408 'Tratado na rotina chamadora
            
        Case 80409
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_GERACAO_CHEQUES", gErr)

        Case 80410
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_GERACAO_CHEQUES", gErr)

        Case 80411
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
                
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148348)

    End Select

    Exit Function

End Function

Private Function Fluxo_Grava_NumIntDoc_Baixas(ByVal objFluxo As ClassFluxo) As Long
'guarda no objFluxo os maiores numeros internos de BaixasPag, BaixasRec, MovCtaCorrente existentes no momento da criação do fluxo, para evitar sua utilização no momento da atualização dos dados reais.

Dim alComando(1 To 3) As Long
Dim lErro As Long
Dim iIndice As Integer
Dim lNumMovto As Long
Dim lNumIntBaixaPag As Long
Dim lNumIntBaixaRec As Long

On Error GoTo Erro_Fluxo_Grava_NumIntDoc_Baixas

    For iIndice = LBound(alComando) To UBound(alComando)

        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 83787

    Next

    lErro = Comando_Executar(alComando(1), "SELECT NumMovto FROM MovimentosContaCorrente ORDER BY NumMovto DESC", lNumMovto)
    If lErro <> AD_SQL_SUCESSO Then gError 83788
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 83789
    
    lErro = Comando_Executar(alComando(2), "SELECT NumIntBaixa FROM BaixasPag ORDER BY NumIntBaixa DESC", lNumIntBaixaPag)
    If lErro <> AD_SQL_SUCESSO Then gError 83790
    
    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 83791
    
    lErro = Comando_Executar(alComando(3), "SELECT NumIntBaixa FROM BaixasRec ORDER BY NumIntBaixa DESC", lNumIntBaixaRec)
    If lErro <> AD_SQL_SUCESSO Then gError 83792
    
    lErro = Comando_BuscarPrimeiro(alComando(3))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 83793
    
    objFluxo.lNumMovCta = lNumMovto
    objFluxo.lNumIntBaixaPag = lNumIntBaixaPag
    objFluxo.lNumIntBaixaRec = lNumIntBaixaRec
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Fluxo_Grava_NumIntDoc_Baixas = SUCESSO
    
    Exit Function

Erro_Fluxo_Grava_NumIntDoc_Baixas:

    Fluxo_Grava_NumIntDoc_Baixas = gErr

    Select Case gErr
    
        Case 83787
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 83788, 83789
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCONTACORRENTE", gErr)

        Case 83790, 83791
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BAIXAPAG", gErr)

        Case 83792, 83793
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BAIXAREC", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148349)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

'Maristela(Inicio) - Esta função já está em ClassCRFATSelect, como foi pedido
Function Banco_Lock(ByVal lComando As Long, ByVal iCodBanco As Integer) As Long
'le o banco e faz lock shared

Dim lErro As Long, iBco As Integer

On Error GoTo Erro_Banco_Lock

    lErro = Comando_ExecutarLockado(lComando, "SELECT CodBanco FROM Bancos WHERE CodBanco = ? ", iBco, iCodBanco)
    If lErro <> AD_SQL_SUCESSO Then Error 19382

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 19383

    If lErro = AD_SQL_SEM_DADOS Then Error 19384
    
    lErro = Comando_LockShared(lComando)
    If lErro <> AD_SQL_SUCESSO Then Error 19385
    
    Banco_Lock = SUCESSO
    
    Exit Function
    
Erro_Banco_Lock:

    Banco_Lock = Err
    
    Select Case Err
        
        Case 19382, 19383
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BANCOS", Err, iCodBanco)
          
        Case 19384
            'Erro será tratado na rotina chamadora
            
        Case 19385
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_BANCOS", Err, iCodBanco)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148350)
    
    End Select
    
    Exit Function

End Function
'Maristela(Fim) - Esta função já está em ClassCRFATSelect, como foi pedido

'Function FluxoContabil_Le() As Long
'
'
'    lComandoSQL = "SELECT DISTINCT NFiscal.NumIntDocCPR, TiposDocInfo.TipoDocCPR, ParcelasPag.DataVencimentoReal, Lancamentos.Conta, ParcelasPag.Valor, Lancamentos.Status FROM ParcelasPag, TitulosPag, NFiscal, TiposDocInfo, TransacaoCTB, Lancamentos  " & _
'    "WHERE TitulosPag.NumIntDoc = NFiscal.NumIntDocCPR And NFiscal.ClasseDocCPR = ? And NFiscal.TipoNFiscal = TiposDocInfo.Codigo And TiposDocInfo.NomeTelaNFiscal = TransacaoCTB.Transacao AND TransacaoCTB.OrigemLcto = ? AND NFiscal.NumIntDoc = Lancamentos.NumIntDoc And TransacaoCTB.Codigo = Lancamentos.Transacao " & _
'    "AND TitulosPag.NumIntDoc = ParcelasPag.NumIntTitulo AND TitulosPag.Status <> ? AND ParcelasPag.Status <> ?"
'    CPR_TITULO_PAGAR , TRANSACAOCTBORIGEM_NFISCAL, STATUS_EXCLUIDO, STATUS_BAIXADO
'
'
'
'End Function

Function BaixaPagCancelar_Grava_EmTrans(ByVal objBorderoPagto As ClassBorderoPagto, ByVal objAntecipPag As ClassAntecipPag, ByVal objCreditoPagar As ClassCreditoPagar, ByVal lNumIntParc As Long, ByVal iSequencial As Integer, ByVal iMotivo As Integer, ByVal objContabil As ClassContabil) As Long

Dim dValorLivroAuxiliar As Double
Dim lErro As Long
Dim lNumIntDocBaixaParcPag As Long
Dim lFornecedor As Long
Dim iFilialForn As Integer
Dim alComando(1 To 2) As Long
Dim iIndice As Integer
Dim colLancamentos As New Collection
Dim objLancamento As ClassLancamento_Detalhe
Dim iSubTipoContabil As Integer
Dim lNumIntBaixa As Long

On Error GoTo Erro_BaixaPagCancelar_Grava_EmTrans

    'Abertura comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 95350
    Next

    If iMotivo = MOTIVO_PAGAMENTO Then

        lErro = BaixaParcPag_Bordero_Cancelar(objBorderoPagto, lNumIntParc, iSequencial, lNumIntDocBaixaParcPag)
        If lErro <> SUCESSO Then gError 95351
        
    ElseIf iMotivo = MOTIVO_PAGTO_ANTECIPADO Then

        lErro = BaixaParcPag_PagtoAntecipado_Cancelar(objAntecipPag, lNumIntParc, iSequencial, lNumIntDocBaixaParcPag)
        If lErro <> SUCESSO Then gError 95352

    ElseIf iMotivo = MOTIVO_CREDITO_FORNECEDOR Then

        lErro = BaixaParcPag_CredPagForn_Cancelar(objCreditoPagar, lNumIntParc, iSequencial, lNumIntDocBaixaParcPag)
        If lErro <> SUCESSO Then gError 95353

    '###########################################################
    'Inserido por Wagner 21/06/2006
    ElseIf iMotivo = MOTIVO_CHEQUE_DE_TERCEIROS Then

        'Só vai cancelar a Baixa da Parcela sem mexer no Cheque ou na Parcela a Receber
        lErro = BaixaParcPag_ChequePre_Cancelar(lNumIntParc, iSequencial, lNumIntDocBaixaParcPag)
        If lErro <> SUCESSO Then gError 180272
    '###########################################################

    End If

    lErro = Comando_Executar(alComando(1), "SELECT TitulosPagBaixados.Fornecedor, TitulosPagBaixados.Filial, BaixasParcPag.Valorbaixado, BaixasParcPag.NumIntBaixa from BaixasParcPag, ParcelasPagBaixadas, TitulosPagBaixados where BaixasParcPag.NumIntParcela = ParcelasPagBaixadas.NumIntDoc and ParcelasPagBaixadas.NumIntTitulo = TitulosPagBaixados.NumIntDoc and BaixasParcPag.NumIntDoc = ?", lFornecedor, iFilialForn, dValorLivroAuxiliar, lNumIntBaixa, lNumIntDocBaixaParcPag)
    If lErro <> AD_SQL_SUCESSO Then gError 95354

    lErro = Comando_BuscarProximo(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 95355

    If lErro <> AD_SQL_SUCESSO Then

        lErro = Comando_Executar(alComando(2), "SELECT TitulosPag.Fornecedor, TitulosPag.Filial, BaixasParcPag.Valorbaixado, BaixasParcPag.NumIntBaixa from BaixasParcPag, ParcelasPag, TitulosPag where BaixasParcPag.NumIntParcela = ParcelasPag.NumIntDoc and ParcelasPag.NumIntTitulo = TitulosPag.NumIntDoc and BaixasParcPag.NumIntDoc = ?", lFornecedor, iFilialForn, dValorLivroAuxiliar, lNumIntBaixa, lNumIntDocBaixaParcPag)
        If lErro <> AD_SQL_SUCESSO Then gError 95356

        lErro = Comando_BuscarProximo(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 95357

        If lErro <> AD_SQL_SUCESSO Then gError 95358

    End If

    'se estiver
    If Not (objContabil Is Nothing) Then

        'Grava os dados contábeis (contabilidade)
        lErro = objContabil.Contabil_Gravar_Registro(lNumIntDocBaixaParcPag, lFornecedor, iFilialForn, DATA_NULA, , 0, , dValorLivroAuxiliar)
        If lErro <> SUCESSO Then gError 92660

    Else
    
        'le os lançamentos relativos ao documento passado como parametro inclusive os com status <> 0 e coloca-os em colLancamentos
        'le os lancamentos relativos as origens de lançamento (OrigemLcto) = 2(BaixasPag) ou 3(BaixasParcPag)
        lErro = CF("Lancamento_Le_Doc5", giFilialEmpresa, lNumIntDocBaixaParcPag, lNumIntBaixa, colLancamentos)
        If lErro <> SUCESSO And lErro <> 92674 Then gError 92682
    
        'se não encontrou os lançamentos contabilizados
        If lErro <> SUCESSO Then
        
            lErro = CF("LanPendente_Le_Doc4", giFilialEmpresa, lNumIntDocBaixaParcPag, lNumIntBaixa, colLancamentos)
            If lErro <> SUCESSO And lErro <> 92679 Then gError 92682
            
        End If
        
        If lErro = SUCESSO Then
    
            iSubTipoContabil = 0
    
            Set objLancamento = colLancamentos.Item(1)
            
            If objLancamento.iTransacao = TRANSACAOCTB_BAIXAPAG Then
                
                If iMotivo = MOTIVO_PAGAMENTO Then
                    iSubTipoContabil = 1
                    
                ElseIf iMotivo = MOTIVO_PAGTO_ANTECIPADO Then
                    iSubTipoContabil = 2

                ElseIf iMotivo = MOTIVO_CREDITO_FORNECEDOR Then
                    iSubTipoContabil = 3
                
                '###############################################
                'Inserido por Wagner 21/06/2006
                ElseIf iMotivo = MOTIVO_CHEQUE_DE_TERCEIROS Then
                    iSubTipoContabil = 4
                '###############################################
                    
                End If
            
            End If
            
            '
            lErro = BaixaParcPag_Cancela_Contabilidade(objLancamento.lNumIntDoc, objLancamento.iTransacao, iSubTipoContabil, objLancamento.sOrigem)
            If lErro <> SUCESSO Then gError 92685
    
        End If
    
    End If

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    BaixaPagCancelar_Grava_EmTrans = SUCESSO

    Exit Function

Erro_BaixaPagCancelar_Grava_EmTrans:

    BaixaPagCancelar_Grava_EmTrans = gErr

    Select Case gErr

        Case 92660, 92682, 92685, 95351, 95352, 95353, 95359, 180272

        Case 95350
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 95354 To 95358
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TITULOS_PAGAR", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148351)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function BaixaPagtosCancelar_Grava(ByVal colParcSel As Collection, ByVal objTela As Object) As Long

Dim lTransacao As Long
Dim lErro As Long
Dim iIndice As Integer
Dim objBorderoPagto As ClassBorderoPagto
Dim objAntecipPag As ClassAntecipPag
Dim objCreditoPagar As ClassCreditoPagar
Dim objMovCCI As ClassMovContaCorrente

On Error GoTo Erro_BaixaPagtosCancelar_Grava
    
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 95330
    
    'Chama a funcao para cancelar a baixa em transacao 'colParcSel.Count' vezes
    For iIndice = 1 To colParcSel.Count
    
        'Inicializa os objs.
        Set objBorderoPagto = New ClassBorderoPagto
        Set objAntecipPag = New ClassAntecipPag
        Set objCreditoPagar = New ClassCreditoPagar
        Set objMovCCI = New ClassMovContaCorrente
        
        If colParcSel.Item(iIndice).iMotivo = MOTIVO_PAGAMENTO Then
        
            objMovCCI.lNumMovto = colParcSel.Item(iIndice).lNumMovCta

            'Lê o Movimento
            lErro = CF("MovContaCorrente_Le", objMovCCI)
            If lErro <> SUCESSO And lErro <> 11893 Then gError 95316
        
            'Se não encontrou Movimento --> erro
            If lErro = 11893 Then gError 95317

            objBorderoPagto.dtDataEmissao = objMovCCI.dtDataMovimento
            objBorderoPagto.iCodConta = objMovCCI.iCodConta
            objBorderoPagto.lNumero = objMovCCI.lNumero
            
        ElseIf colParcSel.Item(iIndice).iMotivo = MOTIVO_PAGTO_ANTECIPADO Then
        
            'Atribuicao devido a busca futura
            objAntecipPag.lNumMovto = colParcSel.Item(iIndice).lNumMovCta

            'Le o NumIntPag
            lErro = CF("AntecipPag_Le_NumMovto", objAntecipPag)
            If lErro <> AD_SQL_SUCESSO And lErro <> 42845 Then gError 95327
            
            'Se nao achou => erro
            If lErro = 42845 Then gError 95328
                
        ElseIf colParcSel.Item(iIndice).iMotivo = MOTIVO_CREDITO_FORNECEDOR Then
        
            objCreditoPagar.lNumIntDoc = colParcSel.Item(iIndice).lNumIntDoc
            
        End If
            
        'Chamada da funcao BaixaPagCancelar_Grava_EmTrans
        lErro = CF("BaixaPagCancelar_Grava_EmTrans", objBorderoPagto, objAntecipPag, objCreditoPagar, colParcSel.Item(iIndice).lNumIntParc, colParcSel.Item(iIndice).iSequencial, colParcSel.Item(iIndice).iMotivo, Nothing)
        If lErro <> SUCESSO Then gError 95361
     
        'Finaliza os objs.
        Set objBorderoPagto = Nothing
        Set objAntecipPag = Nothing
        Set objCreditoPagar = Nothing
        Set objMovCCI = Nothing
        
    Next
    
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 95340

    lErro = CF("WorkFlow_Trata_Transacao", "CP", objTela, gsUsuario, colParcSel)
    If lErro <> SUCESSO Then gError 193796

    BaixaPagtosCancelar_Grava = SUCESSO

    Exit Function

Erro_BaixaPagtosCancelar_Grava:

    BaixaPagtosCancelar_Grava = gErr
    
    Select Case gErr
    
        Case 95361, 193796
        
        Case 95330
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 95340
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148352)
            
    End Select

    Call Transacao_Rollback
    
    Exit Function

End Function

Function BaixaPagCancelar_Grava(ByVal objBorderoPagto As ClassBorderoPagto, ByVal objAntecipPag As ClassAntecipPag, ByVal objCreditoPagar As ClassCreditoPagar, ByVal lNumIntParc As Long, ByVal iSequencial As Integer, ByVal iMotivo As Integer, ByVal objContabil As ClassContabil) As Long
'cancela uma baixa de parcelas a pagar (baixadas ou nao)
'??? o prototype nao está dos mais felizes: passa um caminhao de parametros inuteis

Dim lTransacao As Long
Dim lErro As Long

On Error GoTo Erro_BaixaPagCancelar_Grava

    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 95366

    'Chama a funcao para gravacao em transacao
    lErro = CF("BaixaPagCancelar_Grava_EmTrans", objBorderoPagto, objAntecipPag, objCreditoPagar, lNumIntParc, iSequencial, iMotivo, objContabil)
    If lErro <> SUCESSO Then gError 95360

    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 95367
    
    lErro = CF("WorkFlow_Trata_Transacao", "CP", objBorderoPagto.objTela, gsUsuario)
    If lErro <> SUCESSO Then gError 193795
    
    BaixaPagCancelar_Grava = SUCESSO
    
    Exit Function

Erro_BaixaPagCancelar_Grava:

    BaixaPagCancelar_Grava = gErr
    
    Select Case gErr
    
        Case 95360, 193795
        
        Case 95366
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
        
        Case 95367
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148353)
            
    End Select

    Call Transacao_Rollback

    Exit Function

End Function

Private Function BaixaParcPag_Cancela_Contabilidade(ByVal lNumIntDoc As Long, ByVal iTransacao As Integer, ByVal iSubTipoContabil As Integer, ByVal sOrigem As String) As Long
'Gera lançamentos de estorno para a contabilização da baixa de parcela a pagar ou se ainda não foi contabilizado Exclui

Dim lErro As Long
Dim objContabil As New ClassContabil
Dim objTelaAux As Object

On Error GoTo Erro_BaixaParcPag_Cancela_Contabilidade

    If Len(Trim(sOrigem)) = 0 Then sOrigem = MODULO_CONTASAPAGAR
    
    lErro = objContabil.Contabil_Inicializa_Contabilidade1(objTelaAux, sOrigem, "", iSubTipoContabil, iTransacao)
    If lErro <> SUCESSO Then gError 92683
    
    lErro = objContabil.Contabil_Exclui(lNumIntDoc)
    If lErro <> SUCESSO Then gError 92684
    
    BaixaParcPag_Cancela_Contabilidade = SUCESSO
    
    Exit Function
    
Erro_BaixaParcPag_Cancela_Contabilidade:

    BaixaParcPag_Cancela_Contabilidade = gErr
    
    Select Case gErr
        
        Case 92683, 92684
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148354)

    End Select
    
    Exit Function

End Function

Function BorderoPag_SalvarSelecao(ByVal colInfoParcPag As Collection) As Long
'Exclui os dados da tabela e Salva o número, novo status, Juros, Multa e desconto de cada parcela do Grid.

'Alterado por leo em 09/11/01
'Agora a fução receberá como parâmetro uma Coleção colInfoParcPag e está incluindo no BD
'os novos campos Multa, Juros e Desconto.

'Função transferida p/ cá por Leo em 14/11/01

Dim lErro As Long
Dim lTransacao As Long
Dim lComando As Long
Dim lNumIntDoc As Long
Dim iStatus As Integer
Dim objInfoParcPag As ClassInfoParcPag

On Error GoTo Erro_BorderoPag_SalvarSelecao

     'Inicia a transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 90419
    
    'Inicializar comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 90420
    
    'Limpa a tabela BorderoPagSelecao
    lErro = Comando_Executar(lComando, "DELETE FROM BorderoPagSelecao")
    If lErro <> AD_SQL_SUCESSO Then gError 90421
           
    For Each objInfoParcPag In colInfoParcPag
           
        'Insere o número de cada parcela, status, Juros, Multa e desconto.
        lErro = Comando_Executar(lComando, "INSERT INTO BorderoPagSelecao (NumIntDoc, Status, ValorMulta, ValorJuros, ValorDesconto) VALUES (?,?,?,?,?)", _
        objInfoParcPag.lNumIntParc, objInfoParcPag.iSeqCheque, objInfoParcPag.dValorMulta, objInfoParcPag.dValorJuros, objInfoParcPag.dValorDesconto)
        If lErro <> AD_SQL_SUCESSO Then Error 90422
    
    Next
    
    'Confirma transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 90423

    'Fechamento comando
    Call Comando_Fechar(lComando)

    BorderoPag_SalvarSelecao = SUCESSO

    Exit Function

Erro_BorderoPag_SalvarSelecao:

    BorderoPag_SalvarSelecao = gErr

    Select Case gErr

        Case 90419
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 90420
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 90421
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_BORDEROPAGSELECAO", gErr)

        Case 90422
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_BORDEROPAGSELECAO", gErr)

        Case 90423
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148355)

    End Select
    
    'Desfaz transação
    Call Transacao_Rollback
    
    'Fechamento comando
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Private Function CCIMovDia_Testa_Integridade(ByVal colLog As Collection, iComErro As Integer) As Long

Dim lErro As Long
Dim lComando As Long
Dim sSQL As String
Dim iConta As Integer, dtData As Date
Dim dDebT As Double, dDebR As Double
Dim dCredT As Double, dCredR As Double

On Error GoTo Erro_CCIMovDia_Testa_Integridade
    
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 211236
    
    iComErro = DESMARCADO

    sSQL = ""
    sSQL = sSQL & "SELECT C.CodConta, T.Data, T.Deb AS DEB_T,D.DEB AS DEB_R, T.Cred AS CRED_T, C.CRED AS CRED_R "
    sSQL = sSQL & "FROM CCIMovDia AS T LEFT OUTER JOIN "
    sSQL = sSQL & "(SELECT CodConta,DataMovimento, Sum(Valor) AS CRED FROM MovimentosContaCorrente, TiposMovtoCtaCorrente "
    sSQL = sSQL & "WHERE MovimentosContaCorrente.Tipo = TiposMovtoCtaCorrente.Codigo And "
    sSQL = sSQL & "TiposMovtoCtaCorrente.CREDITO = 1 And MovimentosContaCorrente.EXCLUIDO <> 1 "
    sSQL = sSQL & "GROUP BY CodConta, DataMovimento) AS C "
    sSQL = sSQL & "ON T.CodContaCorrenteInterna = C.CodConta AND T.Data = C.DataMovimento LEFT OUTER JOIN "
    sSQL = sSQL & "(SELECT CodConta,DataMovimento, Sum(Valor) AS DEB FROM MovimentosContaCorrente, TiposMovtoCtaCorrente "
    sSQL = sSQL & "WHERE MovimentosContaCorrente.Tipo = TiposMovtoCtaCorrente.Codigo And "
    sSQL = sSQL & "TiposMovtoCtaCorrente.CREDITO = 0 And MovimentosContaCorrente.EXCLUIDO <> 1 "
    sSQL = sSQL & "GROUP BY CodConta, DataMovimento) AS D "
    sSQL = sSQL & "ON T.CodContaCorrenteInterna = D.CodConta AND T.Data = D.DataMovimento "
    sSQL = sSQL & "WHERE (Abs(T.DEB - D.DEB) > 0.01 Or Abs(T.CRED - C.CRED) > 0.01) "
    
    'Seleciona a conta de Origem
    lErro = Comando_Executar(lComando, sSQL, iConta, dtData, dDebT, dDebR, dCredT, dCredR)
    If lErro <> SUCESSO Then gError 211237

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211238
    
    If lErro <> AD_SQL_SEM_DADOS Then
        iComErro = MARCADO
        colLog.Add "Existem erros de integridade em CCIMovDia "
        colLog.Add ""
    Else
        colLog.Add "A tabela CCIMovDia está integra"
    End If
    
    Do While lErro <> AD_SQL_SEM_DADOS
    
        colLog.Add "Conta: " & CStr(iConta)
        colLog.Add "Data: " & Format(dtData, "dd/mm/yyyy")
        colLog.Add "DebT: " & Format(dDebT, "STANDARD")
        colLog.Add "DebR: " & Format(dDebR, "STANDARD")
        colLog.Add "CredT: " & Format(dCredT, "STANDARD")
        colLog.Add "CredR: " & Format(dCredR, "STANDARD")
        colLog.Add "Dif.Deb: " & Format(dDebT - dDebR, "STANDARD")
        colLog.Add "Dif.Cred " & Format(dCredT - dCredR, "STANDARD")
        colLog.Add ""
    
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 211239
    
    Loop
    
    CCIMovDia_Testa_Integridade = SUCESSO
    
    Exit Function
    
Erro_CCIMovDia_Testa_Integridade:

    CCIMovDia_Testa_Integridade = gErr
    
    Select Case gErr

        Case 211236
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 211237 To 211239
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCONTACORRENTE", gErr)
                
        Case ERRO_SEM_MENSAGEM
               
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 211240)
            
    End Select
         
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Private Sub MovCCI_Grava_LogAux(ByVal colLog As Collection)

Dim asReg() As String
Dim iIndice As Integer
Dim vValor As Variant

On Error GoTo Erro_MovCCI_Grava_LogAux

    ReDim asReg(1 To colLog.Count)

    For Each vValor In colLog
        iIndice = iIndice + 1
        asReg(iIndice) = vValor
    Next

    Call Grava_Log(asReg())
    
    Exit Sub
    
Erro_MovCCI_Grava_LogAux:
    
    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 211243)
            
    End Select
    
    Exit Sub

End Sub


Function MovCCI_Exclui_Transferencia(ByVal objTransferencia As ClassTransferencia, ByVal objContabil As ClassContabil) As Long
'Exclui uma transferencia

Dim lErro As Long
Dim lTransacao As Long
Dim lComando As Long
Dim lComando1 As Long
Dim lComando2 As Long
Dim lComando3 As Long
Dim lNumMovtoOrigem As Long
Dim lNumMovtoDestino As Long
Dim dtDataMovimento1 As Date, dtDataMovimento2 As Date, dValor1 As Double, dValor2 As Double
Dim colLog As New Collection
Dim lNumMovtoDestAux As Long
Dim lNumMovtoTransfOrigAux As Long
Dim iTestaInt As Integer, iConciliado As Integer
Dim sConteudo As String, iComErro As Integer

On Error GoTo Erro_MovCCI_Exclui_Transferencia
               
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 90483
    
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 90484
    
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 90485
    
    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then gError 90485
    
    lComando3 = Comando_Abrir()
    If lComando3 = 0 Then gError 90485
  
    lErro = CF("Config_Le", "CRFATConfig", "TESTA_INTEGRIDADE_CCIMOVDIA", EMPRESA_TODA, sConteudo)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    iTestaInt = StrParaInt(sConteudo)
    
    If iTestaInt = MARCADO Then
    
        colLog.Add "FUNÇÃO: MovCCI_Exclui_Transferencia"
        colLog.Add ""
        colLog.Add "DADOS VINDOS DA TELA"
        colLog.Add "===================="
        colLog.Add ""
    
        colLog.Add "CodContaOrigem: " & CStr(objTransferencia.iCodContaOrigem)
        colLog.Add "SeqOrigem: " & CStr(objTransferencia.lSeqOrigem)
        colLog.Add "CodContaDestino: " & CStr(objTransferencia.iCodContaDestino)
        colLog.Add "SeqDestino: " & CStr(objTransferencia.lSeqDestino)
        colLog.Add "Data: " & Format(objTransferencia.dtData, "dd/mm/yyyy")
        colLog.Add "Valor: " & Format(objTransferencia.dValor, "STANDARD")
        
        colLog.Add ""
        colLog.Add "DADOS INICIAIS DE VALIDAÇÃO DE INTEGRIDADE"
        colLog.Add "=========================================="
        colLog.Add ""
        
        lErro = CCIMovDia_Testa_Integridade(colLog, iComErro)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        
        If iComErro = MARCADO Then gError 211241
        
    End If
    
    'Seleciona a conta de Origem
    lErro = Comando_ExecutarPos(lComando, "SELECT NumMovto, NumMovtoTransf, DataMovimento, Valor, Conciliado FROM MovimentosContaCorrente WHERE CodConta = ? AND Sequencial = ? AND Tipo = ?", 0, lNumMovtoOrigem, lNumMovtoTransfOrigAux, dtDataMovimento1, dValor1, iConciliado, objTransferencia.iCodContaOrigem, objTransferencia.lSeqOrigem, MOVCCI_SAIDA_TRANSFERENCIA)
    If lErro <> SUCESSO Then gError 90486

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 90487
    If lErro = AD_SQL_SEM_DADOS Then gError 90505

    'Verifica se esta conciliado
    If iConciliado <> 0 Then gError 18007

    If iTestaInt = MARCADO Then
    
        colLog.Add ""
        colLog.Add "DADOS VINDOS DO BD - CONTA ORIGEM - SAÍDA"
        colLog.Add "========================================="
        colLog.Add ""
        
        colLog.Add "NumMovto: " & CStr(lNumMovtoOrigem)
        colLog.Add "NumMovtoTransf: " & CStr(lNumMovtoTransfOrigAux)
        colLog.Add "Data: " & Format(dtDataMovimento1, "dd/mm/yyyy")
        colLog.Add "Valor: " & Format(dValor1, "STANDARD")
    End If

    'Limpa a conta de Origem
    lErro = Comando_ExecutarPos(lComando1, "DELETE FROM MovimentosContaCorrente", lComando)
    If lErro <> SUCESSO Then gError 90488

    'Seleciona a conta de destino
    lErro = Comando_ExecutarPos(lComando2, "SELECT NumMovto, NumMovtoTransf, DataMovimento, Valor, Conciliado FROM MovimentosContaCorrente WHERE CodConta = ? AND Sequencial = ? AND Tipo = ?", 0, lNumMovtoDestAux, lNumMovtoDestino, dtDataMovimento2, dValor2, iConciliado, objTransferencia.iCodContaDestino, objTransferencia.lSeqDestino, MOVCCI_ENTRADA_TRANSFERENCIA)
    If lErro <> SUCESSO Then gError 90489

    lErro = Comando_BuscarPrimeiro(lComando2)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 90490
    If lErro = AD_SQL_SEM_DADOS Then gError 90506
    
    'Verifica se esta conciliado
    If iConciliado <> 0 Then gError 18008
    
    If iTestaInt = MARCADO Then
        
        colLog.Add ""
        colLog.Add "DADOS VINDOS DO BD - CONTA DESTINO - ENTRADA"
        colLog.Add "============================================"
        colLog.Add ""
        
        colLog.Add "NumMovto: " & CStr(lNumMovtoDestAux)
        colLog.Add "NumMovtoTransf: " & CStr(lNumMovtoDestino)
        colLog.Add "Data: " & Format(dtDataMovimento2, "dd/mm/yyyy")
        colLog.Add "Valor: " & Format(dValor2, "STANDARD")
    End If

    'Limpa a conta de Destino
    lErro = Comando_ExecutarPos(lComando3, "DELETE FROM MovimentosContaCorrente", lComando2)
    If lErro <> SUCESSO Then gError 90491

    'Verifica se realmente existe a Transferencia
    If lNumMovtoOrigem <> lNumMovtoDestino Or dtDataMovimento1 <> dtDataMovimento2 Or dtDataMovimento1 <> objTransferencia.dtData Then gError 90492
    
    'Atualiza o movimento nas tabelas CCIMov e CCIMovDia
    lErro = CF("CCIMovDia_Exclui", objTransferencia.iCodContaOrigem, dtDataMovimento1, -Abs(dValor1))
    If lErro <> SUCESSO Then gError 90493
    
    lErro = CF("CCIMov_Exclui", objTransferencia.iCodContaOrigem, Year(dtDataMovimento1), Month(dtDataMovimento1), -Abs(dValor1))
    If lErro <> SUCESSO Then gError 90494
    
    lErro = CF("CCIMovDia_Exclui", objTransferencia.iCodContaDestino, dtDataMovimento1, Abs(dValor1))
    If lErro <> SUCESSO Then gError 90495
    
    lErro = CF("CCIMov_Exclui", objTransferencia.iCodContaDestino, Year(dtDataMovimento1), Month(dtDataMovimento1), Abs(dValor1))
    If lErro <> SUCESSO Then gError 90496
    
    'Exclui os lançamentos contábeis (se houverem)
    lErro = objContabil.Contabil_Exclui(lNumMovtoOrigem, CONTABIL_EXCLUI_EFETIVO)
    If lErro <> SUCESSO Then gError 90497
    
    If iTestaInt = MARCADO Then
    
        colLog.Add ""
        colLog.Add "DADOS FINAIS DE VALIDAÇÃO DE INTEGRIDADE"
        colLog.Add "========================================"
        colLog.Add ""
        
        lErro = CCIMovDia_Testa_Integridade(colLog, iComErro)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        
        If iComErro = MARCADO Then gError 211242
    
    End If
    
    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then gError 90498
    
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)
       
    MovCCI_Exclui_Transferencia = SUCESSO
    
    Exit Function
    
Erro_MovCCI_Exclui_Transferencia:

    MovCCI_Exclui_Transferencia = gErr
    
    Select Case gErr
            
        Case 90483
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 90484, 90485
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 90486, 90487, 90489, 90490
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCONTACORRENTE", gErr)
                
        Case 90488, 90491
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_MOVIMENTOSCONTACORRENTE", gErr)
        
        Case 90492, 90505, 90506
            Call Rotina_Erro(vbOKOnly, "ERRO_TRANSFERENCIA_INEXISTENTE", gErr, objTransferencia.iCodContaOrigem, objTransferencia.iCodContaDestino)
        
        Case 90493 To 90497
        
        Case 90498
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case 211241
            Call Rotina_Erro(vbOKOnly, "ERRO_CCIMOVDIA_NAO_INTEGRA1", gErr)
            
        Case 211242
            Call Rotina_Erro(vbOKOnly, "ERRO_CCIMOVDIA_NAO_INTEGRA2", gErr)
            
        Case 18007
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVCONTACORRENTE_CONCILIADO", gErr, objTransferencia.iCodContaOrigem, objTransferencia.lSeqOrigem)
        
        Case 18008
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVCONTACORRENTE_CONCILIADO", gErr, objTransferencia.iCodContaDestino, objTransferencia.lSeqDestino)
        
        Case ERRO_SEM_MENSAGEM
               
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148356)
            
    End Select
        
    Call Transacao_Rollback
         
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)
    
    If iTestaInt = MARCADO Then Call MovCCI_Grava_LogAux(colLog)
    
    Exit Function
    
End Function

Sub BaixasPag_GeraAuxCtb(ByVal objPagEmissao As Object, ByVal objBaixaPagar As ClassBaixaPagar, ByVal colBaixaParcPagar As colBaixaParcPagar)
'atualiza em objPagEmissao informacoes p/contabilizacao

Dim lErro As Long, dValorBaixado As Double, dValorMulta As Double, dValorJuros As Double, dValorDesconto As Double, adValorDiferenca() As Double
Dim objBaixaParcPagar As ClassBaixaParcPagar, iIndice As Integer

On Error GoTo Erro_BaixasPag_GeraAuxCtb

    ReDim Preserve adValorDiferenca(1)
    
    For Each objBaixaParcPagar In colBaixaParcPagar
    
        dValorBaixado = Round(dValorBaixado + objBaixaParcPagar.dValorBaixado, 2)
        dValorMulta = Round(dValorMulta + objBaixaParcPagar.dValorMulta, 2)
        dValorJuros = Round(dValorJuros + objBaixaParcPagar.dValorJuros, 2)
        dValorDesconto = Round(dValorDesconto + objBaixaParcPagar.dValorDesconto, 2)
        
        If objBaixaParcPagar.iMotivoDiferenca <> 0 Then
        
            If objBaixaParcPagar.iMotivoDiferenca > UBound(adValorDiferenca) Then ReDim Preserve adValorDiferenca(objBaixaParcPagar.iMotivoDiferenca + 1)
            adValorDiferenca(objBaixaParcPagar.iMotivoDiferenca) = Round(adValorDiferenca(objBaixaParcPagar.iMotivoDiferenca) + objBaixaParcPagar.dValorDiferenca, 2)

        End If
        
    Next

    objPagEmissao.dValorBaixado = dValorBaixado
    objPagEmissao.dValorMulta = dValorMulta
    objPagEmissao.dValorJuros = dValorJuros
    objPagEmissao.dValorDesconto = dValorDesconto
    
    For iIndice = LBound(adValorDiferenca) To UBound(adValorDiferenca)
    
        objPagEmissao.adValorDiferenca(iIndice) = adValorDiferenca(iIndice)
        
    Next
    
    Set objPagEmissao.objColBaixaParcPagar = colBaixaParcPagar
    
    Exit Sub
     
Erro_BaixasPag_GeraAuxCtb:

    Select Case gErr
          
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148357)
     
    End Select
     
    Exit Sub

End Sub

Public Function BaixaAntecipDebCli_Grava_Adiantamentos(ByVal objBaixaAntecipDebCliente As ClassBaixaAntecipDebCliente, ByVal objContabil As ClassContabil) As Long
'Atualiza o saldo dos adiantamentos que estão sendo baixados, grava a baixa e os seus itens e grava o movimento de conta corrente

Dim lErro As Long
Dim lTransacao As Long
Dim iIndice As Integer
Dim objInfoBaixaAntecipDebCli As ClassInfoBaixaAntecipDebCli
Dim objRecebAntecipado As ClassAntecipReceb
Dim dValorAtualizar As Double

On Error GoTo Erro_BaixaAntecipDebCli_Grava_Adiantamentos
    
    'Abre a transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 94731
    
    'Para cada adiantamento na coleção
    For Each objInfoBaixaAntecipDebCli In objBaixaAntecipDebCliente.colAntecipDebCliente
    
        'Instancia um novo objRecebAntecipado que será usado para atualizar o saldo do adiantamento
        Set objRecebAntecipado = New ClassAntecipReceb
        
        With objRecebAntecipado
            
            'Guarda no objRecebAntecipado os dados necessários para atualização
            .lNumIntRec = objInfoBaixaAntecipDebCli.lNumIntDocumento
            .dSaldoNaoApropriado = objInfoBaixaAntecipDebCli.dSaldoNaoApropriado
            dValorAtualizar = -objInfoBaixaAntecipDebCli.dSaldoNaoApropriado
        
        End With
        
        'Atualiza o saldo do adiantamento
        lErro = CF("RecebAntecipado_Atualiza_Saldo", objRecebAntecipado, dValorAtualizar)
        If lErro <> SUCESSO Then gError 94732
        
    Next
    
    'Grava a baixa do adiantamento e os itens da baixa
    lErro = CF("BaixaRecebAntecipados_Grava", objBaixaAntecipDebCliente)
    If lErro <> SUCESSO Then gError 94733
    
    'Grava o movimento de conta corrente referente a baixa
    lErro = CF("MovCCI_Grava_BaixaRecebAntecipado", objBaixaAntecipDebCliente)
    If lErro <> SUCESSO Then gError 94743
    
    'Grava os dados contábeis (contabilidade)
    lErro = objContabil.Contabil_Gravar_Registro(objBaixaAntecipDebCliente.lNumMovtoCCI, objBaixaAntecipDebCliente.lCliente, objBaixaAntecipDebCliente.iFilialCliente, DATA_NULA, , 0)
    If lErro <> SUCESSO Then gError 92795
    
    Call Transacao_Commit
    
    BaixaAntecipDebCli_Grava_Adiantamentos = SUCESSO
    
    Exit Function
    
Erro_BaixaAntecipDebCli_Grava_Adiantamentos:
    
    BaixaAntecipDebCli_Grava_Adiantamentos = gErr
    
    Select Case gErr
    
        Case 92795, 94732, 94733, 94743
        
        Case 94731
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148358)
    
    End Select
    
    Call Transacao_Rollback
    
    Exit Function
    
End Function

Public Function RecebAntecipado_Atualiza_Saldo(ByVal objRecebAntecipado As ClassAntecipReceb, ByVal dValorAtualizar As Double) As Long
'Soma ao saldo do adiantamento o valor passado em dValorAtualizar.
'O adiantamento deve ser identificado através do NumIntRec passado dentro do objRecebAntecipado
'Além do NumIntRec deve passado o SaldoNaoApropriado que foi lido no momento em que se carregou o Adiantamento para comparar com o valor atual
'ATENÇÃO: ESSA FUNÇÃO DEVE SER CHAMADA EM TRANSAÇÃO!!!!

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(2) As Long
Dim tAntecipRec As typeAntecipRec

On Error GoTo Erro_RecebAntecipado_Atualiza_Saldo

    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 94718
    Next
        
    'Lê o Número interno e o saldo não apropriado atual
    lErro = Comando_ExecutarPos(alComando(0), "SELECT NumIntRec, SaldoNaoApropriado FROM RecebAntecipados WHERE NumIntRec = ?", 0, tAntecipRec.lNumIntRec, tAntecipRec.dSaldoNaoApropriado, objRecebAntecipado.lNumIntRec)
    If lErro <> AD_SQL_SUCESSO Then gError 94719
    
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 94720
    
    'Se não encontrou adiantamento com o NumIntRec passado como parâmetro => erro
    If lErro = AD_SQL_SEM_DADOS Then gError 94722
    
    'Faz o lock desse adiantamento
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 94723
    
    'Se o valor atual do adiantamento é diferente do valor que foi lido no momento em que se decidiu alterar o saldo dele => erro
    'Por exemplo, se o adiantamento foi exibido na tela com um saldo de R$ 1.000,00 e até o momento da gravação esse valor se alterou para R$ 900,00
    'O sistema indicará erro
    If Abs(tAntecipRec.dSaldoNaoApropriado - objRecebAntecipado.dSaldoNaoApropriado) > DELTA_VALORMONETARIO Then gError 94721
    
    'Atualiza o saldo do adiantamento somando o valor que foi passado em dValorAtualizar
    'Para reduzir o saldo é necessário passar um valor NEGATIVO!
    lErro = Comando_ExecutarPos(alComando(1), "UPDATE RecebAntecipados SET SaldoNaoApropriado = SaldoNaoApropriado + ?", alComando(0), dValorAtualizar)
    If lErro <> AD_SQL_SUCESSO Then gError 94724
    
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    RecebAntecipado_Atualiza_Saldo = SUCESSO
    
    Exit Function
    
Erro_RecebAntecipado_Atualiza_Saldo:

    RecebAntecipado_Atualiza_Saldo = gErr
    
    Select Case gErr
    
        Case 94718
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 94719, 94720
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RECEB_ANTEC", gErr)
            
        Case 94721
            Call Rotina_Erro(vbOKOnly, "ERRO_RECEBANTECIPADO_SALDO_DIFERENTE", gErr, objRecebAntecipado.lNumIntRec)
            
        Case 94722  'Sem dados
        
        Case 94723
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_ANTECIPREC", gErr)
        
         Case 94724
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_ANTECIPRECEB1", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148359)
        
    End Select
    
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function
   
End Function

Public Function BaixaRecebAntecipados_Grava(ByVal objBaixaAntecipDebCli As ClassBaixaAntecipDebCliente) As Long
'Insere um registro de baixa de adiantamento na tabela BaixaRecebAntecipados
'e chama função que faz a inserção dos itens da baixa na tabela BaixaRecebAntecipadosItem
'ESSA FUNÇÃO DEVE SER CHAMADA EM TRANSAÇÃO

Dim lComando As Long
Dim lErro As Long
Dim objInfoBaixaAntecipDebCli As ClassInfoBaixaAntecipDebCli
Dim lNumIntBaixa As Long

On Error GoTo Erro_BaixaRecebAntecipados_Grava

    'Abre Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 94725
    
    'Obtém o NumIntDoc do registro que será inserido em BaixaRecebAntecipados
    lErro = CF("Config_ObterAutomatico_EmTrans", "CPRConfig", "NUM_PROX_BAIXARECEBANTECIPADO", "BaixaRecebAntecipados", "NumIntDoc", lNumIntBaixa)
    If lErro <> SUCESSO Then gError 94726
    
    objBaixaAntecipDebCli.lNumIntBaixa = lNumIntBaixa
    
    'Insere o registro em BaixaRecebAntecipados
    lErro = Comando_Executar(lComando, "INSERT INTO BaixaRecebAntecipados(NumIntDoc, Data, Historico, Valor, Status) VALUES(?,?,?,?,?)", objBaixaAntecipDebCli.lNumIntBaixa, objBaixaAntecipDebCli.dtDataBaixa, objBaixaAntecipDebCli.sHistoricoBaixa, objBaixaAntecipDebCli.dValorBaixa, STATUS_LANCADO)
    If lErro <> AD_SQL_SUCESSO Then gError 94727
    
    'Para cada Adiantamento que está sendo baixado => inclui um item em BaixaRecebAntecipados
    For Each objInfoBaixaAntecipDebCli In objBaixaAntecipDebCli.colAntecipDebCliente
        
        'Guarda no obj o NumIntDoc da baixa que gerou esse item
        objInfoBaixaAntecipDebCli.lNumIntBaixa = objBaixaAntecipDebCli.lNumIntBaixa
    
        'Grava o item de baixa
        lErro = CF("BaixaRecebAntecipadosItem_Grava", objInfoBaixaAntecipDebCli)
        If lErro <> SUCESSO Then gError 94728
    
    Next
    
    Call Comando_Fechar(lComando)
    
    BaixaRecebAntecipados_Grava = SUCESSO
    
    Exit Function
    
Erro_BaixaRecebAntecipados_Grava:

    BaixaRecebAntecipados_Grava = gErr
    
    Select Case gErr
    
        Case 94725
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 94727
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_BAIXARECEBANTECIPADOS", gErr)
        
        Case 94726, 94728
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148360)
    
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function
    
End Function

Public Function BaixaRecebAntecipadosItem_Grava(ByVal objInfoBaixaAntecipDebCli As ClassInfoBaixaAntecipDebCli) As Long
'Insere um item que está baixando um adiantamento a cliente na tabela BaixaRecebAntecipadosItem
'ESSA FUNÇÃO DEVE SER CHAMADA DENTRO DE TRANSAÇÃO

Dim lComando As Long
Dim lErro As Long

On Error GoTo Erro_BaixaRecebAntecipadosItem_Grava

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 94729
    
    lErro = Comando_Executar(lComando, "INSERT INTO BaixaRecebAntecipadosItem(NumIntBaixa, NumIntDocOrigem, Valor, Status) VALUES (?,?,?,?)", objInfoBaixaAntecipDebCli.lNumIntBaixa, objInfoBaixaAntecipDebCli.lNumIntDocumento, objInfoBaixaAntecipDebCli.dValor, STATUS_LANCADO)
    If lErro <> AD_SQL_SUCESSO Then gError 94730
    
    Call Comando_Fechar(lComando)
    
    BaixaRecebAntecipadosItem_Grava = SUCESSO
    
    Exit Function
    
Erro_BaixaRecebAntecipadosItem_Grava:

    BaixaRecebAntecipadosItem_Grava = gErr
    
    Select Case gErr
    
        Case 94729
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 94730
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_BAIXARECEBANTECIPADOSITEM", gErr, objInfoBaixaAntecipDebCli.lNumIntBaixa, objInfoBaixaAntecipDebCli.lNumIntDocumento)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148361)
    
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function
    
End Function

Public Function MovCCI_Grava_BaixaRecebAntecipado(ByVal objBaixaAntecipDebCliente As ClassBaixaAntecipDebCliente) As Long
'Insere o movimento de baixa de um recebimento antecipado passado como parâmetro em Movimentos de Conta Corrente
'IMPORTANTE: Esta função tem que ser chamada dentro de Transação

Dim alComando(2) As Long
Dim dtDataSaldoInicial As Date
Dim lErro As Long
Dim dtData As Date
Dim iIndice As Integer
Dim lNumMovto As Long
Dim lSeq As Long

On Error GoTo Erro_MovCCI_Grava_BaixaRecebAntecipado

    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 94732
    Next

    'Lê a Conta corrente passada como parâmetro na tabela ContasCorrentesInternas
    lErro = Comando_ExecutarPos(alComando(0), "SELECT DataSaldoInicial FROM ContasCorrentesInternas WHERE Codigo = ?", 0, dtDataSaldoInicial, objBaixaAntecipDebCliente.iCtaCorrenteBaixa)
    If lErro <> AD_SQL_SUCESSO Then gError 94733

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 94734

    'Se a Conta não está cadastrada
    If lErro = AD_SQL_SEM_DADOS Then gError 94735

    'Loca a Conta
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 94736

    'Verifica se a data do Recebimento antecipado é maior que a data do saldo inicial associada à Conta
    If objBaixaAntecipDebCliente.dtDataBaixa < dtDataSaldoInicial Then gError 94737

    'Pega o numero do proximo movCci
    lErro = CF("MovCCI_Automatico", lNumMovto)
    If lErro <> SUCESSO Then gError 94738

    objBaixaAntecipDebCliente.lNumMovtoCCI = lNumMovto

    'obtem o Sequencial do movto na cta
    lErro = CF("CtaCorrente_Sequencial_Automatico", objBaixaAntecipDebCliente.iCtaCorrenteBaixa, lSeq)
    If lErro <> SUCESSO Then gError 94739

    'Insere o Saque na Tabela MovimentosContaCorrente
    lErro = Comando_Executar(alComando(1), "INSERT INTO MovimentosContaCorrente (NumMovto, FilialEmpresa, CodConta, Sequencial, Tipo, Excluido, TipoMeioPagto, DataMovimento, Valor, Historico, NumRefExterna, NumRefInterna) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)", _
    lNumMovto, giFilialEmpresa, objBaixaAntecipDebCliente.iCtaCorrenteBaixa, lSeq, MOVCCI_BAIXA_RECEBANTECIPADO, NAO_EXCLUIDO, DINHEIRO, objBaixaAntecipDebCliente.dtDataBaixa, objBaixaAntecipDebCliente.dValorBaixa, objBaixaAntecipDebCliente.sHistoricoBaixa, "", objBaixaAntecipDebCliente.lNumIntBaixa)
    If lErro <> AD_SQL_SUCESSO Then gError 94740

    dtData = objBaixaAntecipDebCliente.dtDataBaixa

    'Atualiza os dados em CCIMovDia
    lErro = CF("CCIMovDia_Grava", objBaixaAntecipDebCliente.iCtaCorrenteBaixa, dtData, -objBaixaAntecipDebCliente.dValorBaixa)
    If lErro <> SUCESSO Then gError 94741

    'Atualiza os dados em CCIMov
    lErro = CF("CCIMov_Grava", objBaixaAntecipDebCliente.iCtaCorrenteBaixa, Year(dtData), Month(dtData), -objBaixaAntecipDebCliente.dValorBaixa)
    If lErro <> SUCESSO Then gError 94742
        
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    MovCCI_Grava_BaixaRecebAntecipado = SUCESSO

    Exit Function

Erro_MovCCI_Grava_BaixaRecebAntecipado:

    MovCCI_Grava_BaixaRecebAntecipado = gErr

    Select Case gErr

        Case 94732
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 94733, 94734
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONTASCORRENTESINTERNAS1", gErr, objBaixaAntecipDebCliente.iCtaCorrenteBaixa)

        Case 94735
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTACORRENTE_INEXISTENTE", gErr, objBaixaAntecipDebCliente.iCtaCorrenteBaixa)

        Case 94736
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CONTASCORRENTESINTERNAS", gErr, objBaixaAntecipDebCliente.iCtaCorrenteBaixa)

        Case 94737
            Call Rotina_Erro(vbOKOnly, "ERRO_DATAMOVIMENTO_MENOR", gErr, objBaixaAntecipDebCliente.dtDataBaixa, dtDataSaldoInicial, objBaixaAntecipDebCliente.iCtaCorrenteBaixa)
        
        Case 94738, 94739, 94741, 94742
        
        Case 94740
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MOVIMENTOSCONTACORRENTE", gErr, objBaixaAntecipDebCliente.dtDataBaixa, dtDataSaldoInicial, objBaixaAntecipDebCliente.iCtaCorrenteBaixa)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148362)

    End Select

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function BaixaAntecipDebCli_Grava_Debitos(ByVal objBaixaAntecipDebCliente As ClassBaixaAntecipDebCliente, ByVal objContabil As ClassContabil) As Long
'Atualiza o saldo dos débitos que estão sendo baixados, grava a baixa e os seus itens e grava o movimento de conta corrente

Dim lErro As Long
Dim lTransacao As Long
Dim iIndice As Integer
Dim objInfoBaixaAntecipDebCli As ClassInfoBaixaAntecipDebCli
Dim objDebitosCli As ClassDebitoRecCli
Dim dValorAtualizar As Double

On Error GoTo Erro_BaixaAntecipDebCli_Grava_Debitos
    
    'Abre a transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 94756
    
    'Para cada débito na coleção
    For Each objInfoBaixaAntecipDebCli In objBaixaAntecipDebCliente.colAntecipDebCliente
    
        'Instancia um novo objDebitosCli que será usado para atualizar o saldo do débito
        Set objDebitosCli = New ClassDebitoRecCli
        
        With objDebitosCli
            
            'Guarda no objDebitosCli os dados necessários para atualização
            .lNumIntDoc = objInfoBaixaAntecipDebCli.lNumIntDocumento
            .dSaldo = objInfoBaixaAntecipDebCli.dSaldoNaoApropriado
            dValorAtualizar = -objInfoBaixaAntecipDebCli.dSaldoNaoApropriado
        
        End With
        
        'Atualiza o saldo do débito
        lErro = CF("DebitoRecCli_AlterarSaldo", objDebitosCli, dValorAtualizar)
        If lErro <> SUCESSO Then gError 94757
        
    Next
    
    'Grava a baixa do débito e os itens da baixa
    lErro = BaixaDebitosRecCli_Grava(objBaixaAntecipDebCliente)
    If lErro <> SUCESSO Then gError 94758
    
    'Grava o movimento de conta corrente referente a baixa
    lErro = MovCCI_Grava_BaixaDebitosRecCli(objBaixaAntecipDebCliente)
    If lErro <> SUCESSO Then gError 94759
    
    'Grava os dados contábeis (contabilidade)
    lErro = objContabil.Contabil_Gravar_Registro(objBaixaAntecipDebCliente.lNumMovtoCCI, objBaixaAntecipDebCliente.lCliente, objBaixaAntecipDebCliente.iFilialCliente, DATA_NULA, , 0)
    If lErro <> SUCESSO Then gError 92796
    
    Call Transacao_Commit
    
    BaixaAntecipDebCli_Grava_Debitos = SUCESSO
    
    Exit Function
    
Erro_BaixaAntecipDebCli_Grava_Debitos:
    
    BaixaAntecipDebCli_Grava_Debitos = gErr
    
    Select Case gErr
    
        Case 92796, 94757 To 94759
        
        Case 94756
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148363)
    
    End Select
    
    Call Transacao_Rollback
    
    Exit Function
    
End Function

Public Function BaixaDebitosRecCli_Grava(ByVal objBaixaAntecipDebCli As ClassBaixaAntecipDebCliente) As Long
'Insere um registro de baixa de débito na tabela BaixaDebitosRecCli
'e chama função que faz a inserção dos itens da baixa na tabela BaixaRecebAntecipadosItem
'ESSA FUNÇÃO DEVE SER CHAMADA EM TRANSAÇÃO

Dim lComando As Long
Dim lErro As Long
Dim objInfoBaixaAntecipDebCli As ClassInfoBaixaAntecipDebCli
Dim lNumIntBaixa As Long

On Error GoTo Erro_BaixaDebitosRecCli_Grava

    'Abre Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 94752
    
    'Obtém o NumIntDoc do registro que será inserido em BaixaRecebAntecipados
    lErro = CF("Config_ObterAutomatico_EmTrans", "CPRConfig", "NUM_PROX_BAIXADEBITOSRECCLI", "BaixaDebitosRecCli", "NumIntDoc", lNumIntBaixa)
    If lErro <> SUCESSO Then gError 94753
    
    objBaixaAntecipDebCli.lNumIntBaixa = lNumIntBaixa
    
    'Insere o registro em BaixaRecebAntecipados
    lErro = Comando_Executar(lComando, "INSERT INTO BaixaDebitosRecCli(NumIntDoc, Data, Historico, Valor, Status) VALUES(?,?,?,?,?)", objBaixaAntecipDebCli.lNumIntBaixa, objBaixaAntecipDebCli.dtDataBaixa, objBaixaAntecipDebCli.sHistoricoBaixa, objBaixaAntecipDebCli.dValorBaixa, STATUS_LANCADO)
    If lErro <> AD_SQL_SUCESSO Then gError 94754
    
    'Para cada débito que está sendo baixado => inclui um item em BaixaRecebAntecipadosItem
    For Each objInfoBaixaAntecipDebCli In objBaixaAntecipDebCli.colAntecipDebCliente
        
        'Guarda no obj o NumIntDoc da baixa que gerou esse item
        objInfoBaixaAntecipDebCli.lNumIntBaixa = objBaixaAntecipDebCli.lNumIntBaixa
    
        'Grava o item de baixa
        lErro = BaixaDebitosRecCliItem_Grava(objInfoBaixaAntecipDebCli)
        If lErro <> SUCESSO Then gError 94755
    
    Next
    
    Call Comando_Fechar(lComando)
    
    BaixaDebitosRecCli_Grava = SUCESSO
    
    Exit Function
    
Erro_BaixaDebitosRecCli_Grava:

    BaixaDebitosRecCli_Grava = gErr
    
    Select Case gErr
    
        Case 94752
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 94754
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_BAIXADEBITOSRECCLIITEM", gErr)
        
        Case 94753, 94755
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148364)
    
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function
    
End Function

Public Function BaixaDebitosRecCliItem_Grava(ByVal objInfoBaixaAntecipDebCli As ClassInfoBaixaAntecipDebCli) As Long
'Insere um item que está baixando um débito com cliente na tabela BaixaDebitosRecCliItem
'ESSA FUNÇÃO DEVE SER CHAMADA DENTRO DE TRANSAÇÃO

Dim lComando As Long
Dim lErro As Long

On Error GoTo Erro_BaixaDebitosRecCliItem_Grava

    'Abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 94750
    
    'Insere o item de baixa de débito / devolução na tabela BaixaDebitosRecCliItem
    lErro = Comando_Executar(lComando, "INSERT INTO BaixaDebitosRecCliItem(NumIntBaixa, NumIntDocOrigem, Valor, Status) VALUES (?,?,?,?)", objInfoBaixaAntecipDebCli.lNumIntBaixa, objInfoBaixaAntecipDebCli.lNumIntDocumento, objInfoBaixaAntecipDebCli.dValor, STATUS_LANCADO)
    If lErro <> AD_SQL_SUCESSO Then gError 94751
    
    Call Comando_Fechar(lComando)
    
    BaixaDebitosRecCliItem_Grava = SUCESSO
    
    Exit Function
    
Erro_BaixaDebitosRecCliItem_Grava:

    BaixaDebitosRecCliItem_Grava = gErr
    
    Select Case gErr
    
        Case 94750
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 94751
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_BAIXADEBITOSRECCLIITEM", gErr, objInfoBaixaAntecipDebCli.lNumIntBaixa, objInfoBaixaAntecipDebCli.lNumIntDocumento)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148365)
    
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function
    
End Function

Public Function MovCCI_Grava_BaixaDebitosRecCli(ByVal objBaixaAntecipDebCliente As ClassBaixaAntecipDebCliente) As Long
'Insere o movimento de baixa de um débito com cliente passado como parâmetro em Movimentos de Conta Corrente
'IMPORTANTE: Esta função tem que ser chamada dentro de Transação

Dim alComando(2) As Long
Dim dtDataSaldoInicial As Date
Dim lErro As Long
Dim dtData As Date
Dim iIndice As Integer
Dim lNumMovto As Long
Dim lSeq As Long

On Error GoTo Erro_MovCCI_Grava_BaixaDebitosRecCli

    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 94762
    Next

    'Lê a Conta corrente passada como parâmetro na tabela ContasCorrentesInternas
    lErro = Comando_ExecutarPos(alComando(0), "SELECT DataSaldoInicial FROM ContasCorrentesInternas WHERE Codigo = ?", 0, dtDataSaldoInicial, objBaixaAntecipDebCliente.iCtaCorrenteBaixa)
    If lErro <> AD_SQL_SUCESSO Then gError 94763

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 94764

    'Se a Conta não está cadastrada
    If lErro = AD_SQL_SEM_DADOS Then gError 94765

    'Loca a Conta
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 94766

    'Verifica se a data do débito com cliente é maior que a data do saldo inicial associada à Conta
    If objBaixaAntecipDebCliente.dtDataBaixa < dtDataSaldoInicial Then gError 94767

    'Pega o numero do proximo movCci
    lErro = CF("MovCCI_Automatico", lNumMovto)
    If lErro <> SUCESSO Then gError 94768

    objBaixaAntecipDebCliente.lNumMovtoCCI = lNumMovto

    'obtem o Sequencial do movto na cta
    lErro = CF("CtaCorrente_Sequencial_Automatico", objBaixaAntecipDebCliente.iCtaCorrenteBaixa, lSeq)
    If lErro <> SUCESSO Then gError 94769

    'Insere o Saque na Tabela MovimentosContaCorrente
    lErro = Comando_Executar(alComando(1), "INSERT INTO MovimentosContaCorrente (NumMovto, FilialEmpresa, CodConta, Sequencial, Tipo, Excluido, TipoMeioPagto, DataMovimento, Valor, Historico, NumRefExterna, NumRefInterna) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)", _
    lNumMovto, giFilialEmpresa, objBaixaAntecipDebCliente.iCtaCorrenteBaixa, lSeq, MOVCCI_BAIXA_DEBITOSRECCLI, NAO_EXCLUIDO, DINHEIRO, objBaixaAntecipDebCliente.dtDataBaixa, objBaixaAntecipDebCliente.dValorBaixa, objBaixaAntecipDebCliente.sHistoricoBaixa, "", objBaixaAntecipDebCliente.lNumIntBaixa)
    If lErro <> AD_SQL_SUCESSO Then gError 94770

    dtData = objBaixaAntecipDebCliente.dtDataBaixa

    'Atualiza os dados em CCIMovDia
    lErro = CF("CCIMovDia_Grava", objBaixaAntecipDebCliente.iCtaCorrenteBaixa, dtData, -objBaixaAntecipDebCliente.dValorBaixa)
    If lErro <> SUCESSO Then gError 94771

    'Atualiza os dados em CCIMov
    lErro = CF("CCIMov_Grava", objBaixaAntecipDebCliente.iCtaCorrenteBaixa, Year(dtData), Month(dtData), -objBaixaAntecipDebCliente.dValorBaixa)
    If lErro <> SUCESSO Then gError 94772
        
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    MovCCI_Grava_BaixaDebitosRecCli = SUCESSO

    Exit Function

Erro_MovCCI_Grava_BaixaDebitosRecCli:

    MovCCI_Grava_BaixaDebitosRecCli = gErr

    Select Case gErr

        Case 94762
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 94763, 94764
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONTASCORRENTESINTERNAS1", gErr, objBaixaAntecipDebCliente.iCtaCorrenteBaixa)

        Case 94765
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTACORRENTE_INEXISTENTE", gErr, objBaixaAntecipDebCliente.iCtaCorrenteBaixa)

        Case 94766
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CONTASCORRENTESINTERNAS", gErr, objBaixaAntecipDebCliente.iCtaCorrenteBaixa)

        Case 94767
            Call Rotina_Erro(vbOKOnly, "ERRO_DATAMOVIMENTO_MENOR", gErr, objBaixaAntecipDebCliente.dtDataBaixa, dtDataSaldoInicial, objBaixaAntecipDebCliente.iCtaCorrenteBaixa)
        
        Case 94768, 94769, 94771, 94772
        
        Case 94770
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MOVIMENTOSCONTACORRENTE", gErr, objBaixaAntecipDebCliente.dtDataBaixa, dtDataSaldoInicial, objBaixaAntecipDebCliente.iCtaCorrenteBaixa)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148366)

    End Select

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function BaixaPagAntecipados_Grava(ByVal objBaixaAntecipCredForn As ClassBaixaAntecipCredForn) As Long
'Insere um registro de baixa de adiantamento na tabela BaixaPagAntecipados
'e chama função que faz a inserção dos itens da baixa na tabela BaixaPagAntecipadosItem
'ESSA FUNÇÃO DEVE SER CHAMADA EM TRANSAÇÃO

Dim lComando As Long
Dim lErro As Long
Dim objInfoBaixaAntecipCredForn As ClassInfoBaixaAntecipCreForn
Dim lNumIntBaixa As Long

On Error GoTo Erro_BaixaPagAntecipados_Grava

    'Abre Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 92735
    
    'Obtém o NumIntDoc do registro que será inserido em BaixaPagAntecipados
    lErro = CF("Config_ObterAutomatico_EmTrans", "CPRConfig", "NUM_PROX_BAIXAPAGANTECIPADO", "BaixaPagAntecipados", "NumIntDoc", lNumIntBaixa)
    If lErro <> SUCESSO Then gError 92736
    
    objBaixaAntecipCredForn.lNumIntBaixa = lNumIntBaixa
    
    'Insere o registro em BaixaPagAntecipados
    lErro = Comando_Executar(lComando, "INSERT INTO BaixaPagAntecipados(NumIntDoc, Data, Historico, Valor, Status) VALUES(?,?,?,?,?)", objBaixaAntecipCredForn.lNumIntBaixa, objBaixaAntecipCredForn.dtDataBaixa, objBaixaAntecipCredForn.sHistoricoBaixa, objBaixaAntecipCredForn.dValorBaixa, STATUS_LANCADO)
    If lErro <> AD_SQL_SUCESSO Then gError 92737
    
    'Para cada Adiantamento que está sendo baixado => inclui um item em BaixaPagAntecipados
    For Each objInfoBaixaAntecipCredForn In objBaixaAntecipCredForn.colAntecipCredFornecedor
        
        'Guarda no obj o NumIntDoc da baixa que gerou esse item
        objInfoBaixaAntecipCredForn.lNumIntBaixa = objBaixaAntecipCredForn.lNumIntBaixa
    
        'Grava o item de baixa
        lErro = BaixaPagAntecipadosItem_Grava(objInfoBaixaAntecipCredForn)
        If lErro <> SUCESSO Then gError 92738
    
    Next
    
    Call Comando_Fechar(lComando)
    
    BaixaPagAntecipados_Grava = SUCESSO
    
    Exit Function
    
Erro_BaixaPagAntecipados_Grava:

    BaixaPagAntecipados_Grava = gErr
    
    Select Case gErr
    
        Case 92735
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 92736, 92738
        
        Case 92737
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_BAIXAPAGANTECIPADOS", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148367)
    
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function
    
End Function

Private Function BaixaPagAntecipadosItem_Grava(ByVal objInfoBaixaAntecipCredForn As ClassInfoBaixaAntecipCreForn) As Long
'Insere um item que está baixando um adiantamento a cliente na tabela BaixaPagAntecipadosItem
'ESSA FUNÇÃO DEVE SER CHAMADA DENTRO DE TRANSAÇÃO

Dim lComando As Long
Dim lErro As Long

On Error GoTo Erro_BaixaPagAntecipadosItem_Grava

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 92739
    
    'correcao por tulio em 25/07/02
    'a tabela sendo referenciada nesse insert era BaixaRecebAntecipados
    lErro = Comando_Executar(lComando, "INSERT INTO BaixaPagAntecipadosItem (NumIntBaixa, NumIntDocOrigem, Valor, Status) VALUES (?,?,?,?)", objInfoBaixaAntecipCredForn.lNumIntBaixa, objInfoBaixaAntecipCredForn.lNumIntDocumento, objInfoBaixaAntecipCredForn.dSaldoNaoApropriado, STATUS_LANCADO)
    If lErro <> AD_SQL_SUCESSO Then gError 92740
    
    Call Comando_Fechar(lComando)
    
    BaixaPagAntecipadosItem_Grava = SUCESSO
    
    Exit Function
    
Erro_BaixaPagAntecipadosItem_Grava:

    BaixaPagAntecipadosItem_Grava = gErr
    
    Select Case gErr
    
        Case 92739
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 92740
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_BAIXAPAGANTECIPADOSITEM", gErr, objInfoBaixaAntecipCredForn.lNumIntBaixa, objInfoBaixaAntecipCredForn.lNumIntDocumento)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148368)
    
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function
    
End Function

Private Function MovCCI_Grava_BaixaPagAntecipado(ByVal objBaixaAntecipCredForn As ClassBaixaAntecipCredForn) As Long
'Insere o movimento de baixa de um pagamento antecipado passado como parâmetro em Movimentos de Conta Corrente
'IMPORTANTE: Esta função tem que ser chamada dentro de Transação

Dim alComando(2) As Long
Dim dtDataSaldoInicial As Date
Dim lErro As Long
Dim dtData As Date
Dim iIndice As Integer
Dim lNumMovto As Long
Dim lSeq As Long

On Error GoTo Erro_MovCCI_Grava_BaixaPagAntecipado

    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 92741
    Next

    'Lê a Conta corrente passada como parâmetro na tabela ContasCorrentesInternas
    lErro = Comando_ExecutarPos(alComando(0), "SELECT DataSaldoInicial FROM ContasCorrentesInternas WHERE Codigo = ?", 0, dtDataSaldoInicial, objBaixaAntecipCredForn.iCtaCorrenteBaixa)
    If lErro <> AD_SQL_SUCESSO Then gError 92742

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 92743

    'Se a Conta não está cadastrada
    If lErro = AD_SQL_SEM_DADOS Then gError 92744

    'Loca a Conta
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 92745

    'Verifica se a data do Pagamento antecipado é maior que a data do saldo inicial associada à Conta
    If objBaixaAntecipCredForn.dtDataBaixa < dtDataSaldoInicial Then gError 92746

    'Pega o numero do proximo movCci
    lErro = CF("MovCCI_Automatico", lNumMovto)
    If lErro <> SUCESSO Then gError 92747

    objBaixaAntecipCredForn.lNumMovtoCCI = lNumMovto

    'obtem o Sequencial do movto na cta
    lErro = CF("CtaCorrente_Sequencial_Automatico", objBaixaAntecipCredForn.iCtaCorrenteBaixa, lSeq)
    If lErro <> SUCESSO Then gError 92748

    'Insere o Deposito na Tabela MovimentosContaCorrente
    lErro = Comando_Executar(alComando(1), "INSERT INTO MovimentosContaCorrente (NumMovto, FilialEmpresa, CodConta, Sequencial, Tipo, Excluido, TipoMeioPagto, DataMovimento, Valor, Historico, NumRefExterna, NumRefInterna) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)", _
    lNumMovto, giFilialEmpresa, objBaixaAntecipCredForn.iCtaCorrenteBaixa, lSeq, MOVCCI_BAIXA_PAGANTECIPADO, NAO_EXCLUIDO, DINHEIRO, objBaixaAntecipCredForn.dtDataBaixa, objBaixaAntecipCredForn.dValorBaixa, objBaixaAntecipCredForn.sHistoricoBaixa, "", objBaixaAntecipCredForn.lNumIntBaixa)
    If lErro <> AD_SQL_SUCESSO Then gError 92749

    dtData = objBaixaAntecipCredForn.dtDataBaixa

    'Atualiza os dados em CCIMovDia
    lErro = CF("CCIMovDia_Grava", objBaixaAntecipCredForn.iCtaCorrenteBaixa, dtData, objBaixaAntecipCredForn.dValorBaixa)
    If lErro <> SUCESSO Then gError 92750

    'Atualiza os dados em CCIMov
    lErro = CF("CCIMov_Grava", objBaixaAntecipCredForn.iCtaCorrenteBaixa, Year(dtData), Month(dtData), objBaixaAntecipCredForn.dValorBaixa)
    If lErro <> SUCESSO Then gError 92751
        
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    MovCCI_Grava_BaixaPagAntecipado = SUCESSO

    Exit Function

Erro_MovCCI_Grava_BaixaPagAntecipado:

    MovCCI_Grava_BaixaPagAntecipado = gErr

    Select Case gErr

        Case 92741
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 92742, 94743
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONTASCORRENTESINTERNAS1", gErr, objBaixaAntecipCredForn.iCtaCorrenteBaixa)

        Case 92744
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTACORRENTE_INEXISTENTE", gErr, objBaixaAntecipCredForn.iCtaCorrenteBaixa)

        Case 92745
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CONTASCORRENTESINTERNAS", gErr, objBaixaAntecipCredForn.iCtaCorrenteBaixa)

        Case 92746
            Call Rotina_Erro(vbOKOnly, "ERRO_DATAMOVIMENTO_MENOR", gErr, objBaixaAntecipCredForn.dtDataBaixa, dtDataSaldoInicial, objBaixaAntecipCredForn.iCtaCorrenteBaixa)
        
        Case 92747, 92748, 92750, 92751
        
        Case 92749
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MOVIMENTOSCONTACORRENTE", gErr, objBaixaAntecipCredForn.dtDataBaixa, dtDataSaldoInicial, objBaixaAntecipCredForn.iCtaCorrenteBaixa)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148369)

    End Select

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function BaixaAntecipCredForn_Grava_Creditos(ByVal objBaixaAntecipCredForn As ClassBaixaAntecipCredForn, ByVal objContabil As ClassContabil) As Long
'Atualiza o saldo dos créditos que estão sendo baixados, grava a baixa e os seus itens e grava o movimento de conta corrente

Dim lErro As Long
Dim lTransacao As Long
Dim iIndice As Integer
Dim objInfoBaixaAntecipCredForn As ClassInfoBaixaAntecipCreForn
Dim objCreditoPagar As ClassCreditoPagar
Dim dValorAtualizar As Double

On Error GoTo Erro_BaixaAntecipCredForn_Grava_Creditos
    
    'Abre a transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 92752
    
    'Para cada crédito na coleção
    For Each objInfoBaixaAntecipCredForn In objBaixaAntecipCredForn.colAntecipCredFornecedor
    
        'Instancia um novo objCreditoPagar que será usado para atualizar o saldo do crédito
        Set objCreditoPagar = New ClassCreditoPagar
        
        With objCreditoPagar
            
            'Guarda no objCreditoPagar os dados necessários para atualização
            .lNumIntDoc = objInfoBaixaAntecipCredForn.lNumIntDocumento
            .dSaldo = objInfoBaixaAntecipCredForn.dSaldoNaoApropriado
            dValorAtualizar = -objInfoBaixaAntecipCredForn.dSaldoNaoApropriado
        
        End With
        
        'Atualiza o saldo do crédito
        lErro = CreditoPagar_AlterarSaldo(objCreditoPagar, dValorAtualizar)
        If lErro <> SUCESSO Then gError 92753
        
    Next
    
    'Grava a baixa do crédito e os itens da baixa
    lErro = BaixaCreditosPagForn_Grava(objBaixaAntecipCredForn)
    If lErro <> SUCESSO Then gError 92754
    
    'Grava o movimento de conta corrente referente a baixa
    lErro = MovCCI_Grava_BaixaCreditosPagForn(objBaixaAntecipCredForn)
    If lErro <> SUCESSO Then gError 92755
    
    'Grava os dados contábeis (contabilidade)
    lErro = objContabil.Contabil_Gravar_Registro(objBaixaAntecipCredForn.lNumMovtoCCI, objBaixaAntecipCredForn.lFornecedor, objBaixaAntecipCredForn.iFilialFornecedor, DATA_NULA, , 0)
    If lErro <> SUCESSO Then gError 92794
    
    Call Transacao_Commit
    
    BaixaAntecipCredForn_Grava_Creditos = SUCESSO
    
    Exit Function
    
Erro_BaixaAntecipCredForn_Grava_Creditos:
    
    BaixaAntecipCredForn_Grava_Creditos = gErr
    
    Select Case gErr
    
        Case 92752
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 92753 To 92755, 92794
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148370)
    
    End Select
    
    Call Transacao_Rollback
    
    Exit Function
    
End Function

Private Function BaixaCreditosPagForn_Grava(ByVal objBaixaAntecipCredForn As ClassBaixaAntecipCredForn) As Long
'Insere um registro de baixa de crédito na tabela BaixaCreditosPagForn
'e chama função que faz a inserção dos itens da baixa na tabela BaixaRecebAntecipadosItem
'ESSA FUNÇÃO DEVE SER CHAMADA EM TRANSAÇÃO

Dim lComando As Long
Dim lErro As Long
Dim objInfoBaixaAntecipCredForn As ClassInfoBaixaAntecipCreForn
Dim lNumIntBaixa As Long

On Error GoTo Erro_BaixaCreditosPagForn_Grava

    'Abre Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 92756
    
    'Obtém o NumIntDoc do registro que será inserido em BaixaCreditosPagForn
    lErro = CF("Config_ObterAutomatico_EmTrans", "CPRConfig", "NUM_PROX_BAIXACREDITOSPAGFORN", "BaixaCreditosPagForn", "NumIntDoc", lNumIntBaixa)
    If lErro <> SUCESSO Then gError 92757
    
    objBaixaAntecipCredForn.lNumIntBaixa = lNumIntBaixa
    
    'Insere o registro em BaixaRecebAntecipados
    lErro = Comando_Executar(lComando, "INSERT INTO BaixaCreditosPagForn(NumIntDoc, Data, Historico, Valor, Status) VALUES(?,?,?,?,?)", objBaixaAntecipCredForn.lNumIntBaixa, objBaixaAntecipCredForn.dtDataBaixa, objBaixaAntecipCredForn.sHistoricoBaixa, objBaixaAntecipCredForn.dValorBaixa, STATUS_LANCADO)
    If lErro <> AD_SQL_SUCESSO Then gError 92758
    
    'Para cada crédito que está sendo baixado => inclui um item em BaixaCreditosPagFornItem
    For Each objInfoBaixaAntecipCredForn In objBaixaAntecipCredForn.colAntecipCredFornecedor
        
        'Guarda no obj o NumIntDoc da baixa que gerou esse item
        objInfoBaixaAntecipCredForn.lNumIntBaixa = objBaixaAntecipCredForn.lNumIntBaixa
    
        'Grava o item de baixa
        lErro = BaixaCreditosPagFornItem_Grava(objInfoBaixaAntecipCredForn)
        If lErro <> SUCESSO Then gError 92759
    
    Next
    
    Call Comando_Fechar(lComando)
    
    BaixaCreditosPagForn_Grava = SUCESSO
    
    Exit Function
    
Erro_BaixaCreditosPagForn_Grava:

    BaixaCreditosPagForn_Grava = gErr
    
    Select Case gErr
    
        Case 92756
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 92757, 92759
        
        Case 92758
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_BAIXADEBITOSRECCLIITEM", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148371)
    
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function
    
End Function

Private Function BaixaCreditosPagFornItem_Grava(ByVal objInfoBaixaAntecipCredForn As ClassInfoBaixaAntecipCreForn) As Long
'Insere um item que está baixando um crébito do Fornecedor na tabela BaixaCreditosPagFornItem
'ESSA FUNÇÃO DEVE SER CHAMADA DENTRO DE TRANSAÇÃO

Dim lComando As Long
Dim lErro As Long

On Error GoTo Erro_BaixaCreditosPagFornItem_Grava

    'Abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 92760
    
    'Insere o item de baixa de débito / devolução na tabela BaixaCreditosPagFornItem
    lErro = Comando_Executar(lComando, "INSERT INTO BaixaCreditosPagFornItem(NumIntBaixa, NumIntDocOrigem, Valor, Status) VALUES (?,?,?,?)", objInfoBaixaAntecipCredForn.lNumIntBaixa, objInfoBaixaAntecipCredForn.lNumIntDocumento, objInfoBaixaAntecipCredForn.dValor, STATUS_LANCADO)
    If lErro <> AD_SQL_SUCESSO Then gError 92761
    
    Call Comando_Fechar(lComando)
    
    BaixaCreditosPagFornItem_Grava = SUCESSO
    
    Exit Function
    
Erro_BaixaCreditosPagFornItem_Grava:

    BaixaCreditosPagFornItem_Grava = gErr
    
    Select Case gErr
    
        Case 92760
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 92761
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_BAIXACREDITOSPAGFORNITEM", gErr, objInfoBaixaAntecipCredForn.lNumIntBaixa, objInfoBaixaAntecipCredForn.lNumIntDocumento)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148372)
    
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function
    
End Function

Private Function MovCCI_Grava_BaixaCreditosPagForn(ByVal objBaixaAntecipCredForn As ClassBaixaAntecipCredForn) As Long
'Insere o movimento de baixa de um crédito do fornecedor passado como parâmetro em Movimentos de Conta Corrente
'IMPORTANTE: Esta função tem que ser chamada dentro de Transação

Dim alComando(2) As Long
Dim dtDataSaldoInicial As Date
Dim lErro As Long
Dim dtData As Date
Dim iIndice As Integer
Dim lNumMovto As Long
Dim lSeq As Long

On Error GoTo Erro_MovCCI_Grava_BaixaCreditosPagForn

    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 92762
    Next

    'Lê a Conta corrente passada como parâmetro na tabela ContasCorrentesInternas
    lErro = Comando_ExecutarPos(alComando(0), "SELECT DataSaldoInicial FROM ContasCorrentesInternas WHERE Codigo = ?", 0, dtDataSaldoInicial, objBaixaAntecipCredForn.iCtaCorrenteBaixa)
    If lErro <> AD_SQL_SUCESSO Then gError 92763

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 92764

    'Se a Conta não está cadastrada
    If lErro = AD_SQL_SEM_DADOS Then gError 92765

    'Loca a Conta
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 92766

    'Verifica se a data da baixa do crédito do fornecedor é menor que a data do saldo inicial associada à Conta, se for ==> erro
    If objBaixaAntecipCredForn.dtDataBaixa < dtDataSaldoInicial Then gError 92767

    'Pega o numero do proximo movCci
    lErro = CF("MovCCI_Automatico", lNumMovto)
    If lErro <> SUCESSO Then gError 92768

    objBaixaAntecipCredForn.lNumMovtoCCI = lNumMovto

    'obtem o Sequencial do movto na cta
    lErro = CF("CtaCorrente_Sequencial_Automatico", objBaixaAntecipCredForn.iCtaCorrenteBaixa, lSeq)
    If lErro <> SUCESSO Then gError 92769

    'Insere o Deposito na Tabela MovimentosContaCorrente
    lErro = Comando_Executar(alComando(1), "INSERT INTO MovimentosContaCorrente (NumMovto, FilialEmpresa, CodConta, Sequencial, Tipo, Excluido, TipoMeioPagto, DataMovimento, Valor, Historico, NumRefExterna, NumRefInterna) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)", _
    lNumMovto, giFilialEmpresa, objBaixaAntecipCredForn.iCtaCorrenteBaixa, lSeq, MOVCCI_BAIXA_CREDITOSPAGFORN, NAO_EXCLUIDO, DINHEIRO, objBaixaAntecipCredForn.dtDataBaixa, objBaixaAntecipCredForn.dValorBaixa, objBaixaAntecipCredForn.sHistoricoBaixa, "", objBaixaAntecipCredForn.lNumIntBaixa)
    If lErro <> AD_SQL_SUCESSO Then gError 92770

    dtData = objBaixaAntecipCredForn.dtDataBaixa

    'Atualiza os dados em CCIMovDia
    lErro = CF("CCIMovDia_Grava", objBaixaAntecipCredForn.iCtaCorrenteBaixa, dtData, objBaixaAntecipCredForn.dValorBaixa)
    If lErro <> SUCESSO Then gError 92771

    'Atualiza os dados em CCIMov
    lErro = CF("CCIMov_Grava", objBaixaAntecipCredForn.iCtaCorrenteBaixa, Year(dtData), Month(dtData), objBaixaAntecipCredForn.dValorBaixa)
    If lErro <> SUCESSO Then gError 92772
        
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    MovCCI_Grava_BaixaCreditosPagForn = SUCESSO

    Exit Function

Erro_MovCCI_Grava_BaixaCreditosPagForn:

    MovCCI_Grava_BaixaCreditosPagForn = gErr

    Select Case gErr

        Case 92762
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 92763, 92764
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONTASCORRENTESINTERNAS1", gErr, objBaixaAntecipCredForn.iCtaCorrenteBaixa)

        Case 92765
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTACORRENTE_INEXISTENTE", gErr, objBaixaAntecipCredForn.iCtaCorrenteBaixa)

        Case 92766
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CONTASCORRENTESINTERNAS", gErr, objBaixaAntecipCredForn.iCtaCorrenteBaixa)

        Case 92767
            Call Rotina_Erro(vbOKOnly, "ERRO_DATAMOVIMENTO_MENOR", gErr, objBaixaAntecipCredForn.dtDataBaixa, dtDataSaldoInicial, objBaixaAntecipCredForn.iCtaCorrenteBaixa)
        
        Case 92768, 92769, 92771, 92772
        
        Case 92770
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MOVIMENTOSCONTACORRENTE", gErr, objBaixaAntecipCredForn.dtDataBaixa, dtDataSaldoInicial, objBaixaAntecipCredForn.iCtaCorrenteBaixa)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148373)

    End Select

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function BaixaAntecipCredForn_Grava_Adiantamentos(ByVal objBaixaAntecipCredForn As ClassBaixaAntecipCredForn, ByVal objContabil As ClassContabil) As Long
'Atualiza o saldo dos adiantamentos que estão sendo baixados, grava a baixa e os seus itens e grava o movimento de conta corrente

Dim lErro As Long
Dim lTransacao As Long
Dim iIndice As Integer
Dim objInfoBaixaAntecipCredForn As ClassInfoBaixaAntecipCreForn
Dim objPagAntecipado As ClassAntecipPag

On Error GoTo Erro_BaixaAntecipCredForn_Grava_Adiantamentos
    
    'Abre a transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 92724
    
    'Para cada adiantamento na coleção
    For Each objInfoBaixaAntecipCredForn In objBaixaAntecipCredForn.colAntecipCredFornecedor
    
        'Instancia um novo objPagAntecipado que será usado para atualizar o saldo do adiantamento
        Set objPagAntecipado = New ClassAntecipPag
        
        With objPagAntecipado
            
            'Guarda no objRecebAntecipado os dados necessários para atualização
            .lNumIntPag = objInfoBaixaAntecipCredForn.lNumIntDocumento
            .dSaldoNaoApropriado = objInfoBaixaAntecipCredForn.dSaldoNaoApropriado
        
        End With
        
        'Atualiza o saldo do adiantamento
        lErro = PagAntecipado_Atualiza_Saldo(objPagAntecipado)
        If lErro <> SUCESSO Then gError 92725
        
    Next
    
    'Grava a baixa do adiantamento e os itens da baixa
    lErro = BaixaPagAntecipados_Grava(objBaixaAntecipCredForn)
    If lErro <> SUCESSO Then gError 92726
    
    'Grava o movimento de conta corrente referente a baixa
    lErro = MovCCI_Grava_BaixaPagAntecipado(objBaixaAntecipCredForn)
    If lErro <> SUCESSO Then gError 92727
    
    'Grava os dados contábeis (contabilidade)
    lErro = objContabil.Contabil_Gravar_Registro(objBaixaAntecipCredForn.lNumMovtoCCI, objBaixaAntecipCredForn.lFornecedor, objBaixaAntecipCredForn.iFilialFornecedor, DATA_NULA, , 0)
    If lErro <> SUCESSO Then gError 92793
    
    Call Transacao_Commit
    
    BaixaAntecipCredForn_Grava_Adiantamentos = SUCESSO
    
    Exit Function
    
Erro_BaixaAntecipCredForn_Grava_Adiantamentos:
    
    BaixaAntecipCredForn_Grava_Adiantamentos = gErr
    
    Select Case gErr
    
        Case 92724
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 92725, 92726, 92727, 92793
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148374)
    
    End Select
    
    Call Transacao_Rollback
    
    Exit Function
    
End Function

Private Function PagAntecipado_Atualiza_Saldo(ByVal objPagAntecipado As ClassAntecipPag) As Long
'O adiantamento deve ser identificado através do NumIntPag passado dentro do objPagAntecipado
'Além do NumIntPag deve passado o SaldoNaoApropriado que foi lido no momento em que se carregou o Adiantamento para comparar com o valor atual
'ATENÇÃO: ESSA FUNÇÃO DEVE SER CHAMADA EM TRANSAÇÃO!!!!

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(2) As Long
Dim tAntecipPag As typeAntecipPag

On Error GoTo Erro_PagAntecipado_Atualiza_Saldo

    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 92728
    Next
        
    'Lê o Número interno e o saldo não apropriado atual
    lErro = Comando_ExecutarPos(alComando(0), "SELECT NumIntPag, SaldoNaoApropriado FROM PagtosAntecipados WHERE NumIntPag = ?", 0, tAntecipPag.lNumIntPag, tAntecipPag.dSaldoNaoApropriado, objPagAntecipado.lNumIntPag)
    If lErro <> AD_SQL_SUCESSO Then gError 92729
    
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 92730
    
    'Se não encontrou adiantamento com o NumIntPag passado como parâmetro => erro
    If lErro = AD_SQL_SEM_DADOS Then gError 92731
    
    'Faz o lock desse adiantamento
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 92732
    
    'Se o valor atual do adiantamento é diferente do valor que foi lido no momento em que se decidiu alterar o saldo dele => erro
    'Por exemplo, se o adiantamento foi exibido na tela com um saldo de R$ 1.000,00 e até o momento da gravação esse valor se alterou para R$ 900,00
    'O sistema indicará erro
    If Abs(tAntecipPag.dSaldoNaoApropriado - objPagAntecipado.dSaldoNaoApropriado) > DELTA_VALORMONETARIO Then gError 92733
    
    'Atualiza o saldo do adiantamento somando o valor que foi passado em dValorAtualizar
    lErro = Comando_ExecutarPos(alComando(1), "UPDATE PagtosAntecipados SET SaldoNaoApropriado = SaldoNaoApropriado + ?", alComando(0), -objPagAntecipado.dSaldoNaoApropriado)
    If lErro <> AD_SQL_SUCESSO Then gError 92734
    
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    PagAntecipado_Atualiza_Saldo = SUCESSO
    
    Exit Function
    
Erro_PagAntecipado_Atualiza_Saldo:

    PagAntecipado_Atualiza_Saldo = gErr
    
    Select Case gErr
    
        Case 92728
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 92729, 92730
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PAGTOANTECIPADO", gErr, objPagAntecipado.lNumIntPag)
            
        Case 92731
            
        Case 92732
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_PAGTOSANTECIPADOS", gErr, objPagAntecipado.lNumIntPag)
        
        Case 92733
            Call Rotina_Erro(vbOKOnly, "ERRO_PAGTOANTECIPADO_SALDO_DIFERENTE", gErr, objPagAntecipado.lNumIntPag)
            
         Case 92734
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_ANTECIPPAG", gErr, objPagAntecipado.lNumIntPag)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148375)
        
    End Select
    
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function
   
End Function

Function RelCliSaldo_Prepara(ByVal iFilialEmpresa As Integer, lNumIntRel As Long, ByVal lCliInic As Long, ByVal lCliFinal As Long, ByVal dtDataSaldo As Date) As Long
'Insere registros na tabela RelCliSaldo com os saldos anteriores dos clientes que serao necessarios p/execucao de relatorio

Dim lErro As Long, dtData As Date
Dim lTransacao As Long, alComando(0 To 1) As Long, iIndice As Integer, lCliAnterior As Long, dSaldo As Double
Dim iTipoLcto As Integer, lCliente As Long, dValorTotal As Double, dValorIRRF As Double, dValorINSS As Double, iINSSRetido As Integer, dBaixasParcRec_ValorBaixado As Double, iBaixasParcRec_Status As Integer, dtBaixasParcRec_DataCancelamento As Date
Dim dPISRetido As Double, dISSRetido As Double, dCOFINSRetido As Double, dCSLLRetido As Double

On Error GoTo Erro_RelCliSaldo_Prepara

    dtData = dtDataSaldo - 1

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 81801
    Next

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 81802

    'obtem numintrel
    lErro = CF("Config_ObterNumInt", "CRConfig", "NUM_PROX_REL_CLI_SALDO", lNumIntRel)
    If lErro <> SUCESSO Then gError 81803
    
    If iFilialEmpresa = EMPRESA_TODA Or gobjCTB.giContabCentralizada <> 0 Then
        If lCliInic <> 0 Or lCliFinal <> 0 Then
            lErro = Comando_Executar(alComando(0), "SELECT TipoLcto, Cliente, Valor, ValorIRRF, ValorINSS, INSSRetido, BaixasParcRec_ValorBaixado, BaixasParcRec_Status, BaixasParcRec_DataCancelamento, PISRetido, ISSRetido, COFINSRetido, CSLLRetido FROM PosCRDataLctos WHERE Cliente >= ? AND Cliente <= ? AND ((TipoLcto IN (1,3) AND DataEmissao<=? AND (DataBaixa = ? OR DataBaixa > ?)) OR (TipoLcto IN (2,4) AND DataEmissao<=? AND (DataBaixa = ? OR DataBaixa > ?) AND DataContabilBaixa <= ? AND (BaixasParcRec_DataCancelamento = ? OR BaixasParcRec_DataCancelamento > ? ))) ORDER BY Cliente", _
                iTipoLcto, lCliente, dValorTotal, dValorIRRF, dValorINSS, iINSSRetido, dBaixasParcRec_ValorBaixado, iBaixasParcRec_Status, dtBaixasParcRec_DataCancelamento, dPISRetido, dISSRetido, dCOFINSRetido, dCSLLRetido, lCliInic, lCliFinal, dtData, DATA_NULA, dtData, dtData, DATA_NULA, dtData, dtData, DATA_NULA, dtData)
        Else
            lErro = Comando_Executar(alComando(0), "SELECT TipoLcto, Cliente, Valor, ValorIRRF, ValorINSS, INSSRetido, BaixasParcRec_ValorBaixado, BaixasParcRec_Status, BaixasParcRec_DataCancelamento, PISRetido, ISSRetido, COFINSRetido, CSLLRetido FROM PosCRDataLctos WHERE (TipoLcto IN (1,3) AND DataEmissao<=? AND (DataBaixa = ? OR DataBaixa > ?)) OR (TipoLcto IN (2,4) AND DataEmissao<=? AND (DataBaixa = ? OR DataBaixa > ?) AND DataContabilBaixa <= ? AND (BaixasParcRec_DataCancelamento = ? OR BaixasParcRec_DataCancelamento > ? )) ORDER BY Cliente", _
                iTipoLcto, lCliente, dValorTotal, dValorIRRF, dValorINSS, iINSSRetido, dBaixasParcRec_ValorBaixado, iBaixasParcRec_Status, dtBaixasParcRec_DataCancelamento, dPISRetido, dISSRetido, dCOFINSRetido, dCSLLRetido, dtData, DATA_NULA, dtData, dtData, DATA_NULA, dtData, dtData, DATA_NULA, dtData)
        End If
    Else
        If lCliInic <> 0 Or lCliFinal <> 0 Then
            lErro = Comando_Executar(alComando(0), "SELECT TipoLcto, Cliente, Valor, ValorIRRF, ValorINSS, INSSRetido, BaixasParcRec_ValorBaixado, BaixasParcRec_Status, BaixasParcRec_DataCancelamento, PISRetido, ISSRetido, COFINSRetido, CSLLRetido FROM PosCRDataLctos WHERE Cliente >= ? AND Cliente <= ? AND ((TipoLcto IN (1,3) AND DocFilEmp = ? AND DataEmissao<=? AND (DataBaixa = ? OR DataBaixa > ?)) OR (TipoLcto IN (2,4) AND DataEmissao<=? AND (DataBaixa = ? OR DataBaixa > ?) AND DataContabilBaixa <= ? AND (BaixasParcRec_DataCancelamento = ? OR BaixasParcRec_DataCancelamento > ? ))) ORDER BY Cliente", _
                iTipoLcto, lCliente, dValorTotal, dValorIRRF, dValorINSS, iINSSRetido, dBaixasParcRec_ValorBaixado, iBaixasParcRec_Status, dtBaixasParcRec_DataCancelamento, dPISRetido, dISSRetido, dCOFINSRetido, dCSLLRetido, lCliInic, lCliFinal, iFilialEmpresa, dtData, DATA_NULA, dtData, dtData, DATA_NULA, dtData, dtData, DATA_NULA, dtData)
        Else
            lErro = Comando_Executar(alComando(0), "SELECT TipoLcto, Cliente, Valor, ValorIRRF, ValorINSS, INSSRetido, BaixasParcRec_ValorBaixado, BaixasParcRec_Status, BaixasParcRec_DataCancelamento, PISRetido, ISSRetido, COFINSRetido, CSLLRetido FROM PosCRDataLctos WHERE (TipoLcto IN (1,3) AND DocFilEmp = ? AND DataEmissao<=? AND (DataBaixa = ? OR DataBaixa > ?)) OR (TipoLcto IN (2,4) AND DataEmissao<=? AND (DataBaixa = ? OR DataBaixa > ?) AND DataContabilBaixa <= ? AND (BaixasParcRec_DataCancelamento = ? OR BaixasParcRec_DataCancelamento > ? )) ORDER BY Cliente", _
                iTipoLcto, lCliente, dValorTotal, dValorIRRF, dValorINSS, iINSSRetido, dBaixasParcRec_ValorBaixado, iBaixasParcRec_Status, dtBaixasParcRec_DataCancelamento, dPISRetido, dISSRetido, dCOFINSRetido, dCSLLRetido, iFilialEmpresa, dtData, DATA_NULA, dtData, dtData, DATA_NULA, dtData, dtData, DATA_NULA, dtData)
        End If
    End If
    If lErro <> AD_SQL_SUCESSO Then gError 81804
        
    lErro = Comando_BuscarProximo(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 81805
    
    lCliAnterior = -1
    
    Do While lErro = AD_SQL_SUCESSO
    
        If lCliAnterior = -1 Then lCliAnterior = lCliente
        
        'se trocou de Cliente
        If lCliAnterior <> lCliente Then
    
            'insere registro em RelCliSaldo
            lErro = Comando_Executar(alComando(1), "INSERT INTO RelCliSaldo ( NumIntRel, Cliente, Saldo ) VALUES (?,?,?)", lNumIntRel, lCliAnterior, dSaldo)
            If lErro <> AD_SQL_SUCESSO Then gError 81807
            
            lCliAnterior = lCliente
            dSaldo = 0
        
        End If
        
        Select Case iTipoLcto
        
            Case 1, 3 'titulos
                dSaldo = Round(dSaldo + dValorTotal - (dValorIRRF + dPISRetido + dISSRetido + dCOFINSRetido + dCSLLRetido) - IIf(iINSSRetido <> 0, dValorINSS, 0), 2)
            
            Case Else 'baixas
                dSaldo = Round(dSaldo - dBaixasParcRec_ValorBaixado, 2)
                
        End Select
        
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 81806
    
    Loop
    
    If lCliAnterior <> -1 Then
            
        'insere registro em RelCliSaldo
        lErro = Comando_Executar(alComando(1), "INSERT INTO RelCliSaldo ( NumIntRel, Cliente, Saldo ) VALUES (?,?,?)", lNumIntRel, lCliAnterior, dSaldo)
        If lErro <> AD_SQL_SUCESSO Then gError 81808
            
    End If
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 81809
    
    For iIndice = LBound(alComando) To UBound(alComando)
         Call Comando_Fechar(alComando(iIndice))
    Next
   
    RelCliSaldo_Prepara = SUCESSO
     
    Exit Function
    
Erro_RelCliSaldo_Prepara:

    RelCliSaldo_Prepara = gErr
     
    Select Case gErr
          
        Case 81803
        
        Case 81801
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
 
        Case 81802
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 81804, 81805, 81806
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_POSCRDATALCTOS", gErr)
        
        Case 81807, 81808
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_RELCLISALDO", gErr)
        
        Case 81809
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148376)
     
    End Select
     
    Call Transacao_Rollback
    
    For iIndice = LBound(alComando) To UBound(alComando)
         Call Comando_Fechar(alComando(iIndice))
    Next
   
    Exit Function

End Function

Private Function BaixaParcRec_Cancelar(ByVal objInfoBaixaRecCancelar As ClassInfoBaixaRecCancelar, Optional ByVal iTipoCancelamento As Integer) As Long
'Atualiza com os dados do cancelamento BaixasParcRec identificada por lNumIntParc e iSequencial

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(2) As Long
Dim lNumIntDoc As Long
Dim iStatus As Integer
Dim dValorBaixado As Double
Dim dtDataCancelamento As Date

On Error GoTo Erro_BaixaParcRec_Cancelar

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 94582
    Next
    
    lErro = Comando_ExecutarPos(alComando(0), "SELECT NumIntDoc, Status, ValorBaixado FROM BaixasParcRec WHERE NumIntParcela = ? AND Sequencial = ?", 0, lNumIntDoc, iStatus, dValorBaixado, objInfoBaixaRecCancelar.lNumIntParcela, objInfoBaixaRecCancelar.iSequencial)
    If lErro <> AD_SQL_SUCESSO Then gError 94583

    lErro = Comando_BuscarProximo(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 94584

    If lErro <> AD_SQL_SUCESSO Then gError 94585

    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 94586

    If iStatus <> STATUS_LANCADO Then gError 94587
    
    lErro = CF("BaixaParcRec_Cancelar_Customizado", lNumIntDoc)
    If lErro <> SUCESSO Then gError 196394

    'Se o cancelamento não está zerando a baixa => significa que a baixa ainda não está excluída
    'e portanto deve permanecer com status lançado e sem data de cancelamento
    If Abs(dValorBaixado - objInfoBaixaRecCancelar.dValorBaixadoCanc) > DELTA_VALORMONETARIO Then
    
        iStatus = STATUS_LANCADO
        dtDataCancelamento = DATA_NULA
    
    'Mas se o cancelamento estiver zerando o valor baixado => significa que a baixa já foi toda cancelada
    'e portanto deve ser considerada como excluída e deve ter data de cancelamento preenchida
    Else
    
        iStatus = STATUS_EXCLUIDO
        dtDataCancelamento = objInfoBaixaRecCancelar.dtDataCancelamento
        
    End If
    
    lErro = ParcelaRec_CancelarBaixa(objInfoBaixaRecCancelar.lNumIntParcela, objInfoBaixaRecCancelar.dValorBaixadoCanc, iTipoCancelamento)
    If lErro <> SUCESSO Then gError 94588

    lErro = Comando_ExecutarPos(alComando(1), "UPDATE BaixasParcRec SET Status = ?, ValorMulta = ValorMulta - ?, ValorJuros = ValorJuros - ?, ValorDesconto = ValorDesconto - ?, ValorBaixado = ValorBaixado - ?, ValorRecebido = ValorRecebido - ?, DataCancelamento = ?, DataRegCancelamento = ?, HoraRegCancelamento = ? ", alComando(0), iStatus, objInfoBaixaRecCancelar.dValorMultaCanc, objInfoBaixaRecCancelar.dValorJurosCanc, objInfoBaixaRecCancelar.dValorDescontoCanc, objInfoBaixaRecCancelar.dValorBaixadoCanc, objInfoBaixaRecCancelar.dValorTotalCanc, dtDataCancelamento, gdtDataHoje, CDbl(Time))
    If lErro <> AD_SQL_SUCESSO Then gError 94589

    'desfaz a contabilizacao (exclui lancamentos pendentes ou estorna lancamentos atualizados)
'    lErro = BaixaParcRec_DesfazContabilizacao(lNumIntDoc)
'    If lErro <> SUCESSO Then Error 32225
        
    lErro = Comando_Unlock(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 94590

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    BaixaParcRec_Cancelar = SUCESSO

    Exit Function

Erro_BaixaParcRec_Cancelar:

    BaixaParcRec_Cancelar = gErr

    Select Case gErr

        Case 94587
            Call Rotina_Erro(vbOKOnly, "ERRO_BAIXAPARCREC_EXCLUIDA", gErr, "Título: " & CStr(objInfoBaixaRecCancelar.lNumDocumento) & " Parcela: " & CStr(objInfoBaixaRecCancelar.iNumParcela) & " Sequencial: " & CStr(objInfoBaixaRecCancelar.iSequencial))

        Case 94585
            Call Rotina_Erro(vbOKOnly, "ERRO_BAIXAPARCREC_INEXISTENTE", gErr)

        Case 94588, 196394

        Case 94582
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 94583, 94584
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BAIXAPARCREC", gErr)

        Case 94586
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_BAIXAPARCREC", gErr)

        Case 94589
            Call Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_BAIXAPARCREC", gErr)

        Case 22487
            Call Rotina_Erro(vbOKOnly, "ERRO_UNLOCK_BAIXAPARCREC", gErr)


        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148377)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function BaixaParcRecCanc_Grava(ByVal objBaixaRecCancelar As ClassBaixaRecCancelar) As Long
'Insere um registro de cancelamento de recebimento na tabela BaixasParcRecCanc
'e chama função que faz a inserção dos itens do cancelamento na tabela BaixasParcRecCancItem
'ESSA FUNÇÃO DEVE SER CHAMADA EM TRANSAÇÃO

Dim lComando As Long
Dim lErro As Long, lNumIntDoc As Long

Dim objInfoBaixaRecCancelar As New ClassInfoBaixaRecCancelar

On Error GoTo Erro_BaixaParcRecCanc_Grava

    'Abre Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 94591
    
    'Obtém o NumIntDoc do registro que será inserido em BaixaParcRecCanc
    lErro = CF("Config_ObterNumInt", "CPRConfig", "NUM_PROX_BAIXAPARCRECCANC", lNumIntDoc)
    If lErro <> SUCESSO Then gError 94592
    
    objBaixaRecCancelar.lNumIntBaixaParcRecCanc = lNumIntDoc
    
    'Insere o registro em BaixaParcRecCanc
    lErro = Comando_Executar(lComando, "INSERT INTO BaixasParcRecCanc(NumIntDoc, DataCancelamento, Historico) VALUES(?,?,?)", objBaixaRecCancelar.lNumIntBaixaParcRecCanc, objBaixaRecCancelar.dtDataCancelamento, objBaixaRecCancelar.sHistoricoCancelamento)
    If lErro <> AD_SQL_SUCESSO Then gError 94593
    
    'Para cada BaixaParcRec que está sendo cancelada => inclui um item em BaixaParcRecCancItem
    For Each objInfoBaixaRecCancelar In objBaixaRecCancelar.colInfoBaixaRecCancelar
        
        If objInfoBaixaRecCancelar.iItemSelecionado = MARCADO Then
        
            'Guarda no obj o NumIntDoc do cancelamento que gerou esse item
            objInfoBaixaRecCancelar.lNumIntCancelamento = objBaixaRecCancelar.lNumIntBaixaParcRecCanc
    
            lErro = BaixaParcRecCancItem_Grava(objInfoBaixaRecCancelar)
            If lErro <> SUCESSO Then gError 94594
    
        End If
    
    Next
    
    Call Comando_Fechar(lComando)
    
    BaixaParcRecCanc_Grava = SUCESSO
    
    Exit Function
    
Erro_BaixaParcRecCanc_Grava:

    BaixaParcRecCanc_Grava = gErr
    
    Select Case gErr
    
        Case 94591
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 94593
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_BAIXASPARCRECCANC", gErr)
        
        Case 94592, 94594
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148378)
    
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function
    
End Function

Function BaixaParcRecCancItem_Grava(ByVal objInfoBaixaRecCancelar As ClassInfoBaixaRecCancelar) As Long
'Insere um item que está cancelando uma BaixasParcRec na tabela BaixasParcRecCancItem
'ESSA FUNÇÃO DEVE SER CHAMADA DENTRO DE TRANSAÇÃO

Dim lComando As Long
Dim lErro As Long

On Error GoTo Erro_BaixaParcRecCancItem_Grava

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 94595
    
    With objInfoBaixaRecCancelar
    
        lErro = Comando_Executar(lComando, "INSERT INTO BaixasParcRecCancItem(NumIntCancelamento, NumIntBaixaParcRec, TotalCancelado, ValorBaixadoCancelado, JurosCancelado, MultaCancelada, DescontoCancelado) VALUES (?,?,?,?,?,?,?)", .lNumIntCancelamento, .lNumIntBaixaParcRec, .dValorTotalCanc, .dValorBaixadoCanc, .dValorJurosCanc, .dValorMultaCanc, .dValorDescontoCanc)
        If lErro <> AD_SQL_SUCESSO Then gError 94596
    
    End With
    
    Call Comando_Fechar(lComando)
    
    BaixaParcRecCancItem_Grava = SUCESSO
    
    Exit Function
    
Erro_BaixaParcRecCancItem_Grava:

    BaixaParcRecCancItem_Grava = gErr
    
    Select Case gErr
    
        Case 94595
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 94596
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_BAIXASPARCRECCANCITEM", gErr, objInfoBaixaRecCancelar.lNumIntCancelamento, objInfoBaixaRecCancelar.lNumIntBaixaParcRec)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148379)
    
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function
    
End Function

Private Function MovCCI_BaixaRecCancelar(ByVal objBaixaRecCancelar As ClassBaixaRecCancelar) As Long
'inclui o Saque correspondente ao cancelamento da baixa de um titulo que havia sido pago pelo cliente

Dim lErro As Long, objInfoBaixaRecCancelar As ClassInfoBaixaRecCancelar
Dim objMovContaCorrente As New ClassMovContaCorrente

On Error GoTo Erro_MovCCI_BaixaRecCancelar

    'inclui o Saque correspondente ao valor Recebido
        
    'obtem a conta corrente onde será efetuado o saque
    For Each objInfoBaixaRecCancelar In objBaixaRecCancelar.colInfoBaixaRecCancelar
    
        If objInfoBaixaRecCancelar.iItemSelecionado = MARCADO Then
        
            objMovContaCorrente.iCodConta = objInfoBaixaRecCancelar.iCodConta
            Exit For
        
        End If
                    
    Next
    
    With objMovContaCorrente
        .dtDataMovimento = objBaixaRecCancelar.dtDataCancelamento
        .iTipo = MOVCCI_RECEBTO_CANCELA
        .iExcluido = NAO_EXCLUIDO
        .iTipoMeioPagto = DINHEIRO
        .lNumero = 0
        .dValor = objBaixaRecCancelar.dValorBaixasCancelar
        .sHistorico = objBaixaRecCancelar.sHistoricoCancelamento
        .iConciliado = NAO_CONCILIADO
        .iFavorecido = 0
        .lNumRefInterna = objBaixaRecCancelar.lNumIntBaixaParcRecCanc
        .sNumRefExterna = ""
    End With

    lErro = MovCCI_BaixaRecCancelar1(objMovContaCorrente)
    If lErro <> SUCESSO Then gError 46336

    MovCCI_BaixaRecCancelar = SUCESSO

    Exit Function

Erro_MovCCI_BaixaRecCancelar:

    MovCCI_BaixaRecCancelar = gErr

    Select Case gErr

        Case 46336

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148380)

    End Select

    Exit Function

End Function

Private Function MovCCI_BaixaRecCancelar1(ByVal objMovContaCorrente As ClassMovContaCorrente) As Long

Dim lErro As Long
Dim lNumMovto As Long
Dim dtData As Date
Dim lSeq As Long
Dim objContasCorrentesInternas As New ClassContasCorrentesInternas
Dim iFilialEmpresa As Integer
Dim lComando As Long

On Error GoTo Erro_MovCCI_BaixaRecCancelar1

    'Abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 94597

    'Pega o numero do proximo movCci
    lErro = CF("MovCCI_Automatico", lNumMovto)
    If lErro <> SUCESSO Then gError 94598

    objMovContaCorrente.lNumMovto = lNumMovto

    'le dados da cta corrente para obter a filialempresa correspondente a ela
    lErro = CF("ContaCorrenteInt_Le", objMovContaCorrente.iCodConta, objContasCorrentesInternas)
    If lErro <> SUCESSO Then gError 46340

    iFilialEmpresa = objContasCorrentesInternas.iFilialEmpresa

    'obtem o Sequencial do movto na cta
    lErro = CF("CtaCorrente_Sequencial_Automatico", objMovContaCorrente.iCodConta, lSeq)
    If lErro <> SUCESSO Then gError 46341

    objMovContaCorrente.lSequencial = lSeq
    objMovContaCorrente.lNumero = lSeq 'Saque em dinheiro

    'Insere o Saque na Tabela MovimentosContaCorrente
    lErro = Comando_Executar(lComando, "INSERT INTO MovimentosContaCorrente (NumMovto, FilialEmpresa, CodConta, Sequencial, Tipo, Excluido, TipoMeioPagto, DataMovimento, Valor, Historico, NumRefExterna, NumRefInterna) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)", lNumMovto, _
        iFilialEmpresa, objMovContaCorrente.iCodConta, objMovContaCorrente.lSequencial, objMovContaCorrente.iTipo, MOVCONTACORRENTE_NAO_EXCLUIDO, objMovContaCorrente.iTipoMeioPagto, objMovContaCorrente.dtDataMovimento, objMovContaCorrente.dValor, objMovContaCorrente.sHistorico, objMovContaCorrente.sNumRefExterna, objMovContaCorrente.lNumRefInterna)
    If lErro <> AD_SQL_SUCESSO Then gError 46342

    'dtData = objMovContaCorrente.dtDataMovimento

    'Atualiza os dados em CCIMovDia
    lErro = CF("CCIMovDia_Grava", objMovContaCorrente.iCodConta, objMovContaCorrente.dtDataMovimento, -objMovContaCorrente.dValor)
    If lErro <> SUCESSO Then gError 46343

    'Atualiza os dados em CCIMov
    lErro = CF("CCIMov_Grava", objMovContaCorrente.iCodConta, Year(objMovContaCorrente.dtDataMovimento), Month(objMovContaCorrente.dtDataMovimento), -objMovContaCorrente.dValor)
    If lErro <> SUCESSO Then gError 46344

    Call Comando_Fechar(lComando)
    
    MovCCI_BaixaRecCancelar1 = SUCESSO

    Exit Function

Erro_MovCCI_BaixaRecCancelar1:

    MovCCI_BaixaRecCancelar1 = gErr

    Select Case gErr

        Case 94598, 46340, 46341, 46343, 46344

        Case 94597
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 46342
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MOVIMENTOSCONTACORRENTE", gErr, objMovContaCorrente.iCodConta)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148381)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Public Function BaixaRecCancelar_Grava(ByVal objBaixaRecCancelar As ClassBaixaRecCancelar, ByVal objContabil As ClassContabil) As Long

Dim lErro As Long
Dim lTransacao As Long, lCliente As Long, iFilialCliente As Integer

On Error GoTo Erro_BaixaRecCancelar_Grava

    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 81828
    
    Select Case objBaixaRecCancelar.iTipoCancelamento

        Case TIPOCANCELAMENTO_BAIXABAIXA
            lErro = BaixaRecCancelar_BaixaBaixa_Grava(objBaixaRecCancelar)
            If lErro <> SUCESSO Then gError 81829
        
            lCliente = objBaixaRecCancelar.lCliente
            iFilialCliente = objBaixaRecCancelar.iFilialCliente
        
            'Grava os dados contábeis (contabilidade)
            lErro = objContabil.Contabil_Gravar_Registro(objBaixaRecCancelar.lNumIntBaixaParcRecCanc, lCliente, iFilialCliente, DATA_NULA, , 0, , 0)
            If lErro <> SUCESSO Then gError 92854
        
        Case TIPOCANCELAMENTO_MOVCCI
            lErro = BaixaRecCancelar_Movimento_Cancelar(objBaixaRecCancelar)
            If lErro <> SUCESSO Then gError 81830

            'Grava os dados contábeis (contabilidade)
            lErro = objContabil.Contabil_Gravar_Registro(objBaixaRecCancelar.lNumIntBaixaParcRecCanc, 0, 0, DATA_NULA, , 0, , 0)
            If lErro <> SUCESSO Then gError 92854
    
    End Select
    
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 81831
    
    BaixaRecCancelar_Grava = SUCESSO
     
    Exit Function
    
Erro_BaixaRecCancelar_Grava:

    BaixaRecCancelar_Grava = gErr
     
    Select Case gErr
          
        Case 81829, 81830, 92854
        
        Case 81828
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
        
        Case 81831
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148382)
     
    End Select
     
    Call Transacao_Rollback
    
    Exit Function

End Function

Private Function BaixaRecCancelar_BaixaBaixa_Grava(ByVal objBaixaRecCancelar As ClassBaixaRecCancelar) As Long

Dim lErro As Long, objInfoBaixaRecCancelar As ClassInfoBaixaRecCancelar
Dim iLinha As Integer
Dim objChequePre As ClassChequePre
Dim objTituloRec As ClassTituloReceber
Dim objParcelasRec As ClassParcelaReceber
Dim objMovContaCorrente As ClassMovContaCorrente

On Error GoTo Erro_BaixaRecCancelar_BaixaBaixa_Grava

    iLinha = 0
    For Each objInfoBaixaRecCancelar In objBaixaRecCancelar.colInfoBaixaRecCancelar
    
        iLinha = iLinha + 1
        If objInfoBaixaRecCancelar.iItemSelecionado = MARCADO Then
        
            '#######################################################################
            'Inserido por Wagner 17/08/2006
            Set objMovContaCorrente = New ClassMovContaCorrente
            
            objMovContaCorrente.lNumMovto = objInfoBaixaRecCancelar.lNumMovCta
            
            If objMovContaCorrente.lNumMovto <> 0 Then
            
                lErro = CF("MovContaCorrente_Le", objMovContaCorrente)
                If lErro <> SUCESSO And lErro <> 11893 Then gError 189035
            
            End If
            
            'Se não for uma devolução de cheque ou uma exclusão de borderô
            'verifica se trata de um cancelamento de baixa que tenha cheques envolvidos
            'e, se tiver, avisa para utilizar a tela de devolução de cheques
            If (objBaixaRecCancelar.iTipoCancelamento <> TIPOCONCELAMENTO_DEVCHQ And objBaixaRecCancelar.iTipoCancelamento <> TIPOCANCELAMENTO_EXC_BORD_CHEQUE) And (objMovContaCorrente.iTipo = MOVCCI_BORDERO_CHEQUE_PRE Or objInfoBaixaRecCancelar.iMotivoBaixa = MOTIVO_CHEQUE_ENVIADO_PARA_TERCEIROS) Then
            
                'Não permite o cancelamento de baixa de parcelas relacionadas a cheques pré
                Set objChequePre = New ClassChequePre
                Set objTituloRec = New ClassTituloReceber
                Set objParcelasRec = New ClassParcelaReceber
            
                lErro = CF("ParcelasReceber_Le_ChequePre2", objInfoBaixaRecCancelar.lNumIntParcela, objChequePre, objParcelasRec, objTituloRec)
                If lErro <> SUCESSO And lErro <> ERRO_LEITURA_SEM_DADOS Then gError 181891
                
                'Se encontrou um ChequePre associado a parcela
                If lErro = SUCESSO Then
                
                    If objChequePre.iLocalizacao = CHEQUEPRE_LOCALIZACAO_BANCO Then gError 181892
                
                End If
                
            End If
            '#######################################################################
        
            lErro = BaixaParcRec_Cancelar(objInfoBaixaRecCancelar, objBaixaRecCancelar.iTipoCancelamento)
            If lErro <> SUCESSO Then gError 81835
    
            lErro = BaixaRec_Exclui(objInfoBaixaRecCancelar.lNumIntBaixa)
            If lErro <> SUCESSO And lErro <> 56606 Then gError 81836

        End If

    Next
    
    lErro = BaixaParcRecCanc_Grava(objBaixaRecCancelar)
    If lErro <> SUCESSO Then gError 81834

    Select Case objBaixaRecCancelar.iTipoBaixas
    
        Case MOTIVO_RECEBIMENTO

            lErro = BaixaParcRec_Recebimento_Cancelar(objBaixaRecCancelar)
            If lErro <> SUCESSO Then gError 81832

        Case MOTIVO_RECEBTO_ANTECIPADO

            lErro = BaixaParcRec_RecebtoAntecipado_Cancelar(objBaixaRecCancelar)
            If lErro <> SUCESSO Then gError 81833

        Case MOTIVO_DEBITO_CLIENTE

            lErro = BaixaParcRec_DebRecCli_Cancelar(objBaixaRecCancelar)
            If lErro <> SUCESSO Then gError 81834

        Case MOTIVO_PERDA

            'nao faz mais nada
            
        Case MOTIVO_CARTAO_DEBITO_CREDITO

            'exclui o titulo a receber da administradora
            lErro = BaixaParcRec_Cartao_Excluir(objBaixaRecCancelar)
            If lErro <> SUCESSO Then gError 183172
            
        Case Else

    End Select
    
    BaixaRecCancelar_BaixaBaixa_Grava = SUCESSO
     
    Exit Function
    
Erro_BaixaRecCancelar_BaixaBaixa_Grava:

    BaixaRecCancelar_BaixaBaixa_Grava = gErr
     
    Select Case gErr
          
        Case 81832 To 81836
        
        Case 181891, 183172, 189035
        
        Case 181892
            Call Rotina_Erro(vbOKOnly, "ERRO_PARCREC_RELAC_CHEQUEPRE", gErr, objParcelasRec.iNumParcela, objTituloRec.iFilialEmpresa, objTituloRec.lCliente, objTituloRec.iFilial, objTituloRec.sSiglaDocumento, objTituloRec.lNumTitulo, objChequePre.lSequencialBack)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148383)
     
    End Select
     
    Exit Function

End Function

Public Function BaixaRecCancelar_Movimento_Cancelar(ByVal objBaixaRecCancelar As ClassBaixaRecCancelar) As Long

Dim lErro As Long, objInfoBaixaRecCancelar As ClassInfoBaixaRecCancelar, objAux As Object
Dim colParcelasMovCCI As New Collection, objInfoBaixaRecCancelar2 As ClassInfoBaixaRecCancelar

On Error GoTo Erro_BaixaRecCancelar_Movimento_Cancelar

    For Each objInfoBaixaRecCancelar In objBaixaRecCancelar.colInfoBaixaRecCancelar
    
        If objInfoBaixaRecCancelar.iItemSelecionado = MARCADO Then
        
            lErro = CF("BaixaRecCancelar_Le_ParcelasMovCCI", objInfoBaixaRecCancelar.lNumMovCta, colParcelasMovCCI)
            If lErro <> SUCESSO And lErro <> 94834 Then gError 81855
    
            For Each objInfoBaixaRecCancelar2 In colParcelasMovCCI
                
                objInfoBaixaRecCancelar2.iCodConta = objInfoBaixaRecCancelar.iCodConta
                objInfoBaixaRecCancelar2.iItemSelecionado = MARCADO
                objInfoBaixaRecCancelar2.dtDataCancelamento = objBaixaRecCancelar.dtDataCancelamento
            
            Next
            
            objBaixaRecCancelar.iTipoBaixas = MOTIVO_RECEBIMENTO
        
            Set objAux = objBaixaRecCancelar.colInfoBaixaRecCancelar
            Set objBaixaRecCancelar.colInfoBaixaRecCancelar = colParcelasMovCCI
            lErro = BaixaRecCancelar_BaixaBaixa_Grava(objBaixaRecCancelar)
            Set objBaixaRecCancelar.colInfoBaixaRecCancelar = objAux
            If lErro <> SUCESSO Then gError 81854
        
            Exit For
            
        End If

    Next
    
    BaixaRecCancelar_Movimento_Cancelar = SUCESSO
     
    Exit Function
    
Erro_BaixaRecCancelar_Movimento_Cancelar:

    BaixaRecCancelar_Movimento_Cancelar = gErr
     
    Select Case gErr
          
        Case 81854, 81855
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148384)
     
    End Select
     
    Exit Function

End Function

Private Function BaixaParcRec_Recebimento_Cancelar(ByVal objBaixaRecCancelar As ClassBaixaRecCancelar) As Long

Dim lErro As Long, objInfoBaixaRecCancelar As ClassInfoBaixaRecCancelar

On Error GoTo Erro_BaixaParcRec_Recebimento_Cancelar

    If objBaixaRecCancelar.iTipoCancelamento <> TIPOCONCELAMENTO_DEVCHQ And objBaixaRecCancelar.iTipoCancelamento <> TIPOCANCELAMENTO_EXC_BORD_CHEQUE Then

        lErro = MovCCI_BaixaRecCancelar(objBaixaRecCancelar)
        If lErro <> SUCESSO Then gError 81840
    
    End If
    
    BaixaParcRec_Recebimento_Cancelar = SUCESSO
     
    Exit Function
    
Erro_BaixaParcRec_Recebimento_Cancelar:

    BaixaParcRec_Recebimento_Cancelar = gErr
     
    Select Case gErr
          
        Case 81840
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148385)
     
    End Select
     
    Exit Function

End Function

Private Function BaixaParcRec_RecebtoAntecipado_Cancelar(ByVal objBaixaRecCancelar As ClassBaixaRecCancelar) As Long

Dim lErro As Long, objAntecipRec As ClassAntecipReceb, objInfoBaixaRecCancelar As ClassInfoBaixaRecCancelar

On Error GoTo Erro_BaixaParcRec_RecebtoAntecipado_Cancelar

    For Each objInfoBaixaRecCancelar In objBaixaRecCancelar.colInfoBaixaRecCancelar
    
        If objInfoBaixaRecCancelar.iItemSelecionado = MARCADO Then
        
            Set objAntecipRec = New ClassAntecipReceb
            objAntecipRec.lNumIntRec = objInfoBaixaRecCancelar.lNumIntRecAntecip
    
            lErro = RecebimentoAntecipado_AlterarSaldo(objAntecipRec, objInfoBaixaRecCancelar.dValorTotalCanc)
            If lErro <> SUCESSO Then gError 81838

        End If

    Next
    
    BaixaParcRec_RecebtoAntecipado_Cancelar = SUCESSO
     
    Exit Function
    
Erro_BaixaParcRec_RecebtoAntecipado_Cancelar:

    BaixaParcRec_RecebtoAntecipado_Cancelar = gErr
     
    Select Case gErr
          
        Case 81838
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148386)
     
    End Select
     
    Exit Function

End Function

Private Function BaixaParcRec_DebRecCli_Cancelar(ByVal objBaixaRecCancelar As ClassBaixaRecCancelar) As Long

Dim lErro As Long
Dim objDebitoReceber As ClassDebitoRecCli, objInfoBaixaRecCancelar As ClassInfoBaixaRecCancelar

On Error GoTo Erro_BaixaParcRec_DebRecCli_Cancelar

    For Each objInfoBaixaRecCancelar In objBaixaRecCancelar.colInfoBaixaRecCancelar
    
        If objInfoBaixaRecCancelar.iItemSelecionado = MARCADO Then
        
            Set objDebitoReceber = New ClassDebitoRecCli
            objDebitoReceber.lNumIntDoc = objInfoBaixaRecCancelar.lNumIntDebRecCli
        
            'Altera o saldo do Débito a Receber
            lErro = CF("DebitoRecCli_AlterarSaldo", objDebitoReceber, objInfoBaixaRecCancelar.dValorTotalCanc)
            If lErro <> SUCESSO Then gError 81839
    
        End If
    
    Next
    
    BaixaParcRec_DebRecCli_Cancelar = SUCESSO
     
    Exit Function
    
Erro_BaixaParcRec_DebRecCli_Cancelar:

    BaixaParcRec_DebRecCli_Cancelar = gErr
     
    Select Case gErr
          
        Case 81839
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148387)
     
    End Select
     
    Exit Function

End Function

Public Function FornecedorHistorico_Grava(objFornecedorHistorico As ClassFornecedorHistorico) As Long
'Grava o Historico do Fornecedor a partir dos dados passados no objFornecedorHistorico

Dim lErro As Long
Dim iSituacao As Integer
Dim lComando As Long
Dim sInsert As String
Dim lNumIntDoc As Long

On Error GoTo Erro_FornecedorHistorico_Grava

    'Abre o Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 97572
    
    'Inicializa a Situacao
    iSituacao = -1
        
    'Verifica se é um novo registro ou uma alteracao dos campos da FornecedorHistorico
    lErro = FornecedorHistorico_Verifica_Alteracao(objFornecedorHistorico, iSituacao)
    If lErro <> SUCESSO Then gError 97560
    
    'Se foi alterado algum campo válido (vide FornecedorHistorico) ou é um novo reg. => GRAVA
    If ((iSituacao = REGISTRO_INEXISTENTE) Or (iSituacao = REGISTRO_ALTERADO)) Then
    
        'Faz a Gravacao na Tabela de FornecedorHistorico
        lErro = FornecedorHistorico_Grava1(objFornecedorHistorico)
        If lErro <> SUCESSO Then gError 97589
            
    End If

    'Fecha o comando
    Call Comando_Fechar(lComando)
    
    FornecedorHistorico_Grava = SUCESSO
    
    Exit Function

Erro_FornecedorHistorico_Grava:

    FornecedorHistorico_Grava = gErr
    
    Select Case gErr
    
        Case 97560, 97573, 97589
        
        Case 97572
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
       
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148388)
    
    End Select
    
    'Fecha o comando
    Call Comando_Fechar(lComando)

End Function

Public Function FornecedorHistorico_Verifica_Alteracao(objFornecedorHistorico As ClassFornecedorHistorico, iSituacao As Integer) As Long
'Verifica se está sendo feita alguma alteracao nos campos presentes da tabela FornecedorHistorico

Dim lErro As Long
Dim lComando As Long
Dim sSelect As String
Dim tFornecedorHistorico As typeFornecedorHistorico

On Error GoTo Erro_FornecedorHistorico_Verifica_Alteracao

    'Abre o Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 97562

    'Carrega sSelect com a Expressão SQL
    sSelect = "SELECT Fornecedores.Codigo, FiliaisFornecedores.CGC, FiliaisFornecedores.InscricaoEstadual, FiliaisFornecedores.InscricaoMunicipal, Fornecedores.RazaoSocial, Enderecos.Endereco, Enderecos.Bairro, Enderecos.Cidade, Enderecos.SiglaEstado, Paises.Nome, Enderecos.CEP, FiliaisFornecedores.InscricaoSuframa FROM Fornecedores, FiliaisFornecedores, Enderecos, Paises WHERE Fornecedores.Codigo = FiliaisFornecedores.CodFornecedor AND FiliaisFornecedores.Endereco = Enderecos.Codigo AND Enderecos.CodigoPais = Paises.Codigo AND Fornecedores.Codigo=? AND FiliaisFornecedores.CodFilial=?"
    
    With tFornecedorHistorico
        
        'Inicializa as Strings do Type
        .sBairro = String(STRING_BAIRRO, 0)
        .sCEP = String(STRING_CEP, 0)
        .sCgc = String(STRING_CGC, 0)
        .sCidade = String(STRING_CIDADE, 0)
        .sEndereco = String(STRING_ENDERECO, 0)
        .sInscricaoEstadual = String(STRING_INSCR_EST, 0)
        .sInscricaoMunicipal = String(STRING_INSCR_MUN, 0)
        .sInscricaoSuframa = String(STRING_INSCR_SUF, 0)
        .sPais = String(STRING_PAISES_NOME, 0)
        .sRazaoSocial = String(STRING_FORNECEDOR_RAZAO_SOC, 0)
        .sUF = String(STRING_ESTADO_SIGLA, 0)
    
        'Executa o Comando SQL
        lErro = Comando_Executar(lComando, sSelect, .lCodigo, .sCgc, .sInscricaoEstadual, .sInscricaoMunicipal, .sRazaoSocial, .sEndereco, .sBairro, .sCidade, .sUF, .sPais, .sCEP, .sInscricaoSuframa, objFornecedorHistorico.lCodigo, objFornecedorHistorico.iFilialForn)
        If lErro <> AD_SQL_SUCESSO Then gError 97563
    
        'Busca o Primeiro Registro
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 97564
    
        'Se existe o registro => Verificar se houve alteracao considerável
        If lErro <> AD_SQL_SEM_DADOS Then
        
            'Verifica se houve alguma alteracao nos dados já existentes
            Call FornecedorHistorico_Verifica_Alteracao1(objFornecedorHistorico, tFornecedorHistorico, iSituacao)
               
        ElseIf lErro = AD_SQL_SEM_DADOS Then
            
            iSituacao = REGISTRO_INEXISTENTE
            
        End If
        
    End With
    
    'Fecha o Comando
    Call Comando_Fechar(lComando)
    
    FornecedorHistorico_Verifica_Alteracao = SUCESSO
    
    Exit Function

Erro_FornecedorHistorico_Verifica_Alteracao:

    FornecedorHistorico_Verifica_Alteracao = gErr
    
    Select Case gErr
    
        Case 97563, 97564
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FORNECEDORHISTORICO", gErr)
        
        Case 97562
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148389)
            
    End Select
    
    'Fecha o Comando
    Call Comando_Fechar(lComando)

End Function

Private Sub FornecedorHistorico_Verifica_Alteracao1(objFornecedorHistorico As ClassFornecedorHistorico, tFornecedorHistorico As typeFornecedorHistorico, iSituacao As Integer)
'Verifica se houve alguma alteracao nos dados já existentes

On Error GoTo Erro_FornecedorHistorico_Verifica_Alteracao1

    'Se houver alguma alteração => iSituacao = REGISTRO_ALTERADO
    With objFornecedorHistorico
    
        If .sCgc <> tFornecedorHistorico.sCgc Then gError 97571
        If .sInscricaoEstadual <> tFornecedorHistorico.sInscricaoEstadual Then gError 97571
        If .sInscricaoMunicipal <> tFornecedorHistorico.sInscricaoMunicipal Then gError 97571
        If .sRazaoSocial <> tFornecedorHistorico.sRazaoSocial Then gError 97571
        If .sEndereco <> tFornecedorHistorico.sEndereco Then gError 97571
        If .sBairro <> tFornecedorHistorico.sBairro Then gError 97571
        If .sCidade <> tFornecedorHistorico.sCidade Then gError 97571
        If .sUF <> tFornecedorHistorico.sUF Then gError 97571
        If .sPais <> tFornecedorHistorico.sPais Then gError 97571
        If .sCEP <> tFornecedorHistorico.sCEP Then gError 97571
        If .sInscricaoSuframa <> tFornecedorHistorico.sInscricaoSuframa Then gError 97571
        
        iSituacao = REGISTRO_INALTERADO
            
    End With
    
    Exit Sub

Erro_FornecedorHistorico_Verifica_Alteracao1:

    Select Case gErr
        
        Case 97571
            iSituacao = REGISTRO_ALTERADO
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148390)
            
    End Select
    
    Exit Sub

End Sub

Function FornecedorHistorico_Grava1(objFornecedorHistorico As ClassFornecedorHistorico) As Long

Dim lErro As Long
Dim lNumIntDoc As Long
Dim lComando As Long
Dim sInsert As String

On Error GoTo Erro_FornecedorHistorico_Grava1
    
    'Abre o Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 97590
    
    'Busca o Novo Codigo para insercao
    lErro = CF("Config_ObterAutomatico_EmTrans", "CPRConfig", "NUM_PROX_FORNECEDORHISTORICO", "FornecedorHistorico", "NumIntDoc", lNumIntDoc)
    If lErro <> SUCESSO Then gError 97573
    
    With objFornecedorHistorico
    
        .lNumIntDoc = lNumIntDoc
        
        'Guarda a expressão SQL
        sInsert = "INSERT INTO FornecedorHistorico (NumIntDoc, DataAtualizacao, Codigo, Filial, CPF_CGC, InscricaoEstadual, InscricaoMunicipal, RazaoSocial, Endereco, Bairro, Cidade, UF, Pais, CEP,InscricaoSuframa) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"
                
        'Grava historico na tabela de FornecedorHistorico
        lErro = Comando_Executar(lComando, sInsert, .lNumIntDoc, .dtDataAtualizacao, .lCodigo, .iFilialForn, .sCgc, left(.sInscricaoEstadual, 18), left(.sInscricaoMunicipal, 18), left(.sRazaoSocial, 40), left(.sEndereco, 40), left(.sBairro, 12), left(.sCidade, 15), .sUF, .sPais, .sCEP, .sInscricaoSuframa)
        If lErro <> AD_SQL_SUCESSO Then gError 97574
        
    End With
    
    'Fecha o Comando
    Call Comando_Fechar(lComando)

    FornecedorHistorico_Grava1 = SUCESSO
    
    Exit Function

Erro_FornecedorHistorico_Grava1:

    FornecedorHistorico_Grava1 = gErr
    
    Select Case gErr
    
        Case 97573
        
        Case 97574
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FORNECEDORHISTORICO", gErr)
            
        Case 97590
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148391)
    
    End Select

    'Fecha o Comando
    Call Comando_Fechar(lComando)

End Function

Public Function FornecedorHistorico_Grava_Retroativos(ByVal dtDataAtualizacao As Date) As Long
'Grava o historico de fornecedores já existentes no banco de dados
'dtDataAtualizacao (input): passa a data que será inserida na tabela FornecedorHistorico como data de gravação

'ATENÇÃO: NÃO RETIRE O COMENTÁRIO ABAIXO
'Para chamar esta funcao pelo immediate ...
'call callbyname(createobject("RotinasCPR.ClassCPRGrava"),"FornecedorHistorico_Grava_Retroativos",VbMethod,cdate("01/01/02"))

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_FornecedorHistorico_Grava_Retroativos

    'Abre a Transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 84892
        
    'Chama a função que faz a gravação
    lErro = CF("FornecedorHistorico_Grava_Retroativos_EmTrans", dtDataAtualizacao)
    If lErro <> SUCESSO Then gError 84893
    
    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then gError 84894
    
    FornecedorHistorico_Grava_Retroativos = SUCESSO
    
    Exit Function
    
Erro_FornecedorHistorico_Grava_Retroativos:

    FornecedorHistorico_Grava_Retroativos = gErr

    Select Case gErr
        
        Case 94893
        
        Case 94892
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 94894
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148392)
    
    End Select

    'Faz o rollback da transação
    Call Transacao_Rollback

End Function

Public Function FornecedorHistorico_Grava_Retroativos_EmTrans(ByVal dtDataAtualizacao As Date) As Long
'Grava o historico de fornecedores já existentes no banco de dados
'dtDataAtualizacao (input): passa a data que será inserida na tabela FornecedorHistorico como data de gravação
'ATENÇÃO: ESTA FUNÇÃO DEVE SER CHAMADA EM TRANSAÇÃO !!

Dim lErro As Long
Dim lComando As Long
Dim sSelect As String
Dim tFornecedorHistorico As typeFornecedorHistorico
Dim objFornecedorHistorico As New ClassFornecedorHistorico

On Error GoTo Erro_FornecedorHistorico_Grava_Retroativos_EmTrans

    'Abre o Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 97593
    
    'Carrega sSelect com a Expressão SQL
    sSelect = "SELECT Fornecedores.Codigo, FiliaisFornecedores.CodFilial , FiliaisFornecedores.CGC, FiliaisFornecedores.InscricaoEstadual, FiliaisFornecedores.InscricaoMunicipal, Fornecedores.RazaoSocial, Enderecos.Endereco, Enderecos.Bairro, Enderecos.Cidade, Enderecos.SiglaEstado, Paises.Nome, Enderecos.CEP, FiliaisFornecedores.InscricaoSuframa FROM Fornecedores, FiliaisFornecedores, Enderecos, Paises WHERE Fornecedores.Codigo = FiliaisFornecedores.CodFornecedor AND FiliaisFornecedores.Endereco = Enderecos.Codigo AND Enderecos.CodigoPais = Paises.Codigo"
    
    With tFornecedorHistorico
        
        'Inicializa as Strings do Type
        .sBairro = String(STRING_BAIRRO, 0)
        .sCEP = String(STRING_CEP, 0)
        .sCgc = String(STRING_CGC, 0)
        .sCidade = String(STRING_CIDADE, 0)
        .sEndereco = String(STRING_ENDERECO, 0)
        .sInscricaoEstadual = String(STRING_INSCR_EST, 0)
        .sInscricaoMunicipal = String(STRING_INSCR_MUN, 0)
        .sInscricaoSuframa = String(STRING_INSCR_SUF, 0)
        .sPais = String(STRING_PAISES_NOME, 0)
        .sRazaoSocial = String(STRING_FORNECEDOR_RAZAO_SOC, 0)
        .sUF = String(STRING_ESTADO_SIGLA, 0)
    
        'Executa o Comando SQL
        lErro = Comando_Executar(lComando, sSelect, .lCodigo, .iFilialForn, .sCgc, .sInscricaoEstadual, .sInscricaoMunicipal, .sRazaoSocial, .sEndereco, .sBairro, .sCidade, .sUF, .sPais, .sCEP, .sInscricaoSuframa)
        If lErro <> AD_SQL_SUCESSO Then gError 97591
    
    End With
        
        'Busca o Primeiro Registro
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 97592
    
        'Enquanto tem fornecedor => grava o registro
        Do While lErro <> AD_SQL_SEM_DADOS
                                        
            'Atualiza os dados para futura gravacao de histórico
            With objFornecedorHistorico
        
                .dtDataAtualizacao = dtDataAtualizacao
                .iFilialForn = tFornecedorHistorico.iFilialForn
                .lCodigo = tFornecedorHistorico.lCodigo
                .sBairro = tFornecedorHistorico.sBairro
                .sCEP = tFornecedorHistorico.sCEP
                .sCgc = tFornecedorHistorico.sCgc
                .sCidade = tFornecedorHistorico.sCidade
                .sEndereco = tFornecedorHistorico.sEndereco
                .sInscricaoEstadual = tFornecedorHistorico.sInscricaoEstadual
                .sInscricaoMunicipal = tFornecedorHistorico.sInscricaoMunicipal
                .sInscricaoSuframa = tFornecedorHistorico.sInscricaoSuframa
                .sUF = tFornecedorHistorico.sUF
                .sRazaoSocial = tFornecedorHistorico.sRazaoSocial
                .sPais = tFornecedorHistorico.sPais
                
            End With
        
            'FAZ A GRAVACAO DO HISTORICO
            lErro = FornecedorHistorico_Grava1(objFornecedorHistorico)
            If lErro <> SUCESSO Then gError 97595
        
            'Busca o Próximo Registro
            lErro = Comando_BuscarProximo(lComando)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 97596
            
    Loop
    
    'Fecha o Comando
    Call Comando_Fechar(lComando)
    
    FornecedorHistorico_Grava_Retroativos_EmTrans = SUCESSO
    
    Exit Function
    
Erro_FornecedorHistorico_Grava_Retroativos_EmTrans:

    FornecedorHistorico_Grava_Retroativos_EmTrans = gErr

    Select Case gErr
        
        Case 97593
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 97591, 97592, 97596
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FORNECEDORHISTORICO", gErr)
            
        Case 97595
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148393)
    
    End Select

    'Fecha o Comando
    Call Comando_Fechar(lComando)

End Function

Private Sub CP_Testa_Integridade()
'??? codigo provisorio, nao tirar daqui

Dim lErro As Long, alComando(1 To 20) As Long, iIndice As Integer
Dim lQtdeParcPag As Long, dValParcPag As Double
Dim lQtdeTitPag As Long, dValTitPag As Double
Dim lQtdeParcPagBaixados As Long, dValParcPagBaixados As Double
Dim lQtdeTitPagBaixados As Long, dValTitPagBaixados As Double
Dim sTexto As String
'Inserido por Raphael - - - -
Dim lNumIntBaixa As Long, lNumIntTitulo As Long
Dim dBaixaParcPag As Double, dTotalPag As Double
Dim iQuantidade As Integer, dSaldoBaixaParcPag2 As Double
Dim lTotTitPag As Long, lTotTitPagBaixa As Long
Dim lTotParcPag As Long, dBaixaParcPagCreditos2 As Double
Dim lTotCred As Long, lTotCredBaixa As Long
Dim dSaldoBaixaParcPag As Double
Dim dValorParcPag As Double, dSaldoParcPag As Double
Dim dValorParcPagBaixados As Double, dBaixaParcPagCreditos As Double
Dim dValorBaixadoParcPagBaixadas As Double, dValorBaixadoParcPag As Double
Dim dBaixaParcPagAntecip As Double, dBaixaParcPagAntecip2 As Double

On Error GoTo Erro_CP_Testa_Integridade

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 12345
    Next
    
    'obtem saldo e qtde de parcelas de titulos nao baixados
    lErro = Comando_Executar(alComando(1), "SELECT COUNT(NumIntDoc), SUM(Saldo) FROM ParcelasPag WHERE Status <> 5", lQtdeParcPag, dValParcPag)
    If lErro <> AD_SQL_SUCESSO Then Error 12345
    
    lErro = Comando_BuscarProximo(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then Error 12345
        
    'obtem saldo e qtde de titulos nao baixados
    lErro = Comando_Executar(alComando(1), "SELECT COUNT(NumIntDoc), SUM(Saldo) FROM TitulosPag WHERE Status <> 5", lQtdeTitPag, dValTitPag)
    If lErro <> AD_SQL_SUCESSO Then Error 12345
    
    lErro = Comando_BuscarProximo(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then Error 12345
    
    'obtem qtde e valor de parcelas de titulos baixados
    lErro = Comando_Executar(alComando(1), "SELECT COUNT(NumIntDoc), SUM(Valor) FROM ParcelasPagBaixadas WHERE Status <> 5", lQtdeParcPagBaixados, dValParcPagBaixados)
    If lErro <> AD_SQL_SUCESSO Then Error 12345
    
    lErro = Comando_BuscarProximo(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then Error 12345
        
    'obtem qtde e valor de titulos baixados
    lErro = Comando_Executar(alComando(1), "SELECT COUNT(NumIntDoc), SUM(ValorTotal-(ValorIRRF+ PISRetido+ ISSRetido+ COFINSRetido+ CSLLRetido)-(ValorINSS*INSSRetido)) FROM TitulosPagBaixados WHERE Status <> 5", lQtdeTitPagBaixados, dValTitPagBaixados)
    If lErro <> AD_SQL_SUCESSO Then Error 12345
    
    lErro = Comando_BuscarProximo(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then Error 12345
    
    'verificar se doctos de + alto nivel excluidos se ligam a doctos de nivel mais baixo nao excluidos:
        'ex.: baixapag excluida ligada a baixaparcpag nao excluida
        'ex.: titulopag excluido ligado a parcelas pag nao excluidas
    
    'baixapag excluida ligada a baixaparcpag nao excluida
    lErro = Comando_Executar(alComando(1), "SELECT BaixasPag.NumIntBaixa FROM BaixasParcPag, BaixasPag WHERE BaixasPag.NumIntBaixa = BaixasParcPag.NumIntBaixa AND BaixasPag.Status = 5 AND BaixasParcPag.Status <> 5", lNumIntBaixa)
    If lErro <> AD_SQL_SUCESSO Then Error 999
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    
    If lErro = AD_SQL_SUCESSO Then MsgBox ("BaixaPag Excluida ligada a BaixaParcPag nao excluida com Numero Interno: " & CStr(lNumIntBaixa))
    
    'titulopag excluido ligado a parcelas pag nao excluidas
    lErro = Comando_Executar(alComando(1), "SELECT ParcelasPag.NumIntTitulo FROM TitulosPag, ParcelasPag WHERE TitulosPag.NumIntDoc = ParcelasPag.NumIntTitulo AND TitulosPag.Status = 5 AND ParcelasPag.Status <> 5", lNumIntTitulo)
    If lErro <> AD_SQL_SUCESSO Then Error 999
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    
    If lErro = AD_SQL_SUCESSO Then MsgBox ("TituloPag excluido ligado a Parcelas Pag não excluidas: " & CStr(lNumIntTitulo))
    
    'comparar valor de creditos utilizado em baixas nas tabelas BaixasParcPag e na propria tabela de CreditosPagForn
    
    'obter valor de creditos utilizado em baixas atraves de BaixasParcPag
    lErro = Comando_Executar(alComando(1), "SELECT SUM(BaixasParcPag.ValorBaixado - BaixasParcPag.ValorDesconto + BaixasParcPag.ValorMulta + BaixasParcPag.ValorJuros) From CreditosPagForn, BaixasPag, BaixasParcPag WHERE BaixasParcPag.Status <> 5 AND CreditosPagForn.NumIntDoc = BaixasPag.NumIntDoc AND BaixasPag.NumIntBaixa = BaixasParcPag.NumIntBaixa", dBaixaParcPagCreditos)
    If lErro <> AD_SQL_SUCESSO Then Error 999

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    
    'obter valor de creditos utilizado em baixas diretamente da tabela de CreditosPagForn
    lErro = Comando_Executar(alComando(1), "SELECT SUM(ValorTotal - (ValorIRRF+ PISRetido+ ISSRetido+ COFINSRetido+ CSLLRetido) - Saldo) From CreditosPagForn WHERE Status <> 5", dBaixaParcPagCreditos2)
    If lErro <> AD_SQL_SUCESSO Then Error 999

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    
    If Abs(dBaixaParcPagCreditos - dBaixaParcPagCreditos2) >= 0.01 Then MsgBox ("Erros nas baixas em CreditosPagForn")
            
    'comparar valor de adiantamentos utilizado em baixas nas tabelas BaixasParcPag e na propria tabela de PagtosAntecipados
    
    'obter valor de adiantamentos utilizado em baixas atraves de BaixasParcPag
    lErro = Comando_Executar(alComando(1), "SELECT SUM(BaixasParcPag.ValorBaixado - BaixasParcPag.ValorDesconto + BaixasParcPag.ValorMulta + BaixasParcPag.ValorJuros) From PagtosAntecipados, MovimentosContaCorrente, BaixasPag, BaixasParcPag WHERE BaixasParcPag.Status <> 5 AND MovimentosContaCorrente.Excluido = 0 AND PagtosAntecipados.NumMovto = MovimentosContaCorrente.NumMovto AND MovimentosContaCorrente.NumMovto = BaixasPag.NumMovCta AND BaixasPag.NumIntBaixa = BaixasParcPag.NumIntBaixa", dBaixaParcPagAntecip)
    If lErro <> AD_SQL_SUCESSO Then Error 999

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    
    'obter valor de adiantamentos utilizado em baixas diretamente das tabelas de PagtosAntecipados e MovimentosContaCorrente
    lErro = Comando_Executar(alComando(1), "SELECT SUM(Valor - PagtosAntecipados.SaldoNaoApropriado) From PagtosAntecipados, MovimentosContaCorrente WHERE PagtosAntecipados.NumMovto = MovimentosContaCorrente.NumMovto AND MovimentosContaCorrente.Excluido <> 1", dBaixaParcPagAntecip2)
    If lErro <> AD_SQL_SUCESSO Then Error 999

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    
    If Abs(dBaixaParcPagAntecip - dBaixaParcPagAntecip2) >= 0.01 Then MsgBox ("Erros nas baixas em PagtosAntecipados")
            
    'ver se doctos baixados tem saldo zero ( e doctos com saldo zero nao baixados ): titulos, parcelas, debitos,...
    
    'procura Titulos a Pagar com saldo zero com status <> baixado
    lErro = Comando_Executar(alComando(1), "SELECT COUNT(NumIntDoc) FROM TitulosPag WHERE Saldo = 0 AND Status <> 2", lTotTitPag)
    If lErro <> AD_SQL_SUCESSO Then Error 999
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    
    If lTotTitPag <> 0 Then MsgBox ("Existem " & CStr(lTotTitPag) & " TitulosPag não Baixados com o Saldo Zerado")
    
    'procura Titulos a Receber Baixados com saldo <> zero
    lErro = Comando_Executar(alComando(1), "SELECT COUNT(NumIntDoc) FROM TitulosPagBaixados WHERE Saldo <> 0", lTotTitPagBaixa)
    If lErro <> AD_SQL_SUCESSO Then Error 999
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    
    If lTotTitPagBaixa <> 0 Then MsgBox ("Existem " & CStr(lTotTitPagBaixa) & " Titulos Pag Baixados com o Saldo Não Zerado")
    
    'procura Parcelas a Pagar com saldo zero com status <> baixado
    lErro = Comando_Executar(alComando(1), "SELECT COUNT(ParcelasPag.NumIntDoc) FROM ParcelasPag WHERE ParcelasPag.Saldo = 0 AND ParcelasPag.Status <> 2", lTotParcPag)
    If lErro <> AD_SQL_SUCESSO Then Error 999
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    
    If lTotParcPag <> 0 Then MsgBox ("Existem " & CStr(lTotParcPag) & " Parcelas Pag não Baixadas com o Saldo Zerado")
    
    'Procura em CreditosPagForn - Se o Saldo for ZERO e o Status for <> Baixado
    lErro = Comando_Executar(alComando(1), "SELECT COUNT(NumIntDoc) FROM CreditosPagForn WHERE Saldo = 0 AND Status <> 2", lTotCred)
    If lErro <> AD_SQL_SUCESSO Then Error 999
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    
    If lTotCred <> 0 Then MsgBox ("Existem " & CStr(lTotCred) & " Credito não Baixados na tabela CreditosPagForn com o Saldo Zerado")
    
    'Procura em CreditosPagForn - Se o Saldo for <> ZERO e o Status for Baixado
    lErro = Comando_Executar(alComando(1), "SELECT COUNT(NumIntDoc) FROM CreditosPagForn WHERE Saldo <> 0 AND Status = 2", lTotCredBaixa)
    If lErro <> AD_SQL_SUCESSO Then Error 999
        
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    
    If lTotCredBaixa <> 0 Then MsgBox ("Existem " & CStr(lTotCredBaixa) & "  Creditos Baixados na tabela CreditosPagForn com o Saldo não Zerado")
        
    'comparar saldo de baixas nao excluidas com as parcelas a que se ligam
    
    'obtem total baixado em BaixasParcPag de parcelas de titulos nao baixados
    lErro = Comando_Executar(alComando(1), "SELECT SUM(BaixasParcPag.ValorBaixado) FROM ParcelasPag, BaixasParcPag WHERE BaixasParcPag.Status <> 5 AND BaixasParcPag.NumIntParcela=ParcelasPag.NumIntDoc", dSaldoBaixaParcPag)
    If lErro <> AD_SQL_SUCESSO Then Error 999
        
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
        
    'obtem total baixado em ParcelasPag
    lErro = Comando_Executar(alComando(1), "SELECT SUM(Valor - Saldo) FROM ParcelasPag WHERE Status <> 5", dValorBaixadoParcPag)
    If lErro <> AD_SQL_SUCESSO Then Error 999
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    
    If Abs(dSaldoBaixaParcPag - dValorBaixadoParcPag) >= 0.01 Then MsgBox ("inconsistencia em valor baixado de parcelas de titulos nao baixados")
    
    'obtem total baixado em BaixasParcPag de parcelas de titulos baixados
    lErro = Comando_Executar(alComando(1), "SELECT SUM(BaixasParcPag.ValorBaixado) FROM ParcelasPagBaixadas, BaixasParcPag WHERE BaixasParcPag.Status <> 5 AND BaixasParcPag.NumIntParcela=ParcelasPagBaixadas.NumIntDoc", dSaldoBaixaParcPag2)
    If lErro <> AD_SQL_SUCESSO Then Error 999
        
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
        
    'obtem total baixado em ParcelasPagBaixadas
    lErro = Comando_Executar(alComando(1), "SELECT SUM(Valor) FROM ParcelasPagBaixadas WHERE Status <> 5", dValorBaixadoParcPagBaixadas)
    If lErro <> AD_SQL_SUCESSO Then Error 999
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    
    If Abs(dSaldoBaixaParcPag2 - dValorBaixadoParcPagBaixadas) >= 0.01 Then MsgBox ("inconsistencia em valor baixado de parcelas de titulos baixados")
            
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    sTexto = " lQtdeParcPag = " & CStr(lQtdeParcPag)
    sTexto = sTexto & Chr$(13) & Chr$(10)
    sTexto = sTexto & " dValParcPag = " & CStr(dValParcPag)
    sTexto = sTexto & Chr$(13) & Chr$(10)
    sTexto = sTexto & " lQtdeTitPag = " & CStr(lQtdeTitPag)
    sTexto = sTexto & Chr$(13) & Chr$(10)
    sTexto = sTexto & " dValTitPag = " & CStr(dValTitPag)
    sTexto = sTexto & Chr$(13) & Chr$(10)
    sTexto = sTexto & " lQtdeParcPagBaixadas = " & CStr(lQtdeParcPagBaixados)
    sTexto = sTexto & Chr$(13) & Chr$(10)
    sTexto = sTexto & " dValParcPagBaixadas = " & CStr(dValParcPagBaixados)
    sTexto = sTexto & Chr$(13) & Chr$(10)
    sTexto = sTexto & " lQtdeTitPagBaixadas = " & CStr(lQtdeTitPagBaixados)
    sTexto = sTexto & Chr$(13) & Chr$(10)
    sTexto = sTexto & " dValTitPag = " & CStr(dValTitPagBaixados)
        
    MsgBox (sTexto)
    
    Exit Sub
     
Erro_CP_Testa_Integridade:

    Select Case Err
          
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148394)
     
    End Select
     
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Sub

End Sub

Private Sub CR_Testa_Integridade()

Dim lErro As Long, alComando(1 To 20) As Long, iIndice As Integer
Dim lQtdeParcRec As Long, dValParcRec As Double
Dim lQtdeTitRec As Long, dValTitRec As Double
Dim lQtdeParcRecBaixados As Long, dValParcRecBaixados As Double
Dim lQtdeTitRecBaixados As Long, dValTitRecBaixados As Double
Dim sTexto As String, dSaldoBaixaParcRec2 As Double
Dim iCobrador As Integer, iCodCarteiraCobranca As Integer, dQuantidadeAtual As Double, dSaldoAtual As Double
Dim lQtdeParcRecCartCobr As Long, dValParcRecCartCobr As Double
Dim lQtdeParcRecCartCobrBD As Long, dValParcRecCartCobrBD As Double
'Inserido por Raphael - - - -
Dim lNumIntBaixa As Long, lNumIntTitulo As Long
Dim dBaixaParcRec As Double, dTotalRec As Double
Dim iQuantidade As Integer
Dim lTotTitRec As Long, lTotTitRecBaixa As Long, dValorBaixadoParcRecBaixados As Double
Dim lTotParcRec As Long, dValorBaixadoParcRec As Double
Dim lTotDebit As Long, lTotDebitBaixa As Long
Dim dSaldoBaixaParcRec As Double, dBaixaParcRecDebitos As Double, dBaixaParcRecDebitos2 As Double
Dim dValorParcRec As Double, dSaldoParcRec As Double
Dim dValorParcRecBaixados As Double
Dim dBaixaParcRecAntecip As Double, dBaixaParcRecAntecip2 As Double
Dim lTransacao As Long

On Error GoTo Erro_CR_Testa_Integridade

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 12345
    Next
    
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then Error 12345
    
    'obtem saldo e qtde de parcelas
    lErro = Comando_Executar(alComando(1), "SELECT COUNT(NumIntDoc), SUM(Saldo) FROM ParcelasRec WHERE Status <> 5", lQtdeParcRec, dValParcRec)
    If lErro <> AD_SQL_SUCESSO Then Error 12345
    
    lErro = Comando_BuscarProximo(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then Error 12345
    
    'obtem saldo e qtde de titulos
    lErro = Comando_Executar(alComando(1), "SELECT COUNT(NumIntDoc), SUM(Saldo) FROM TitulosRec WHERE Status <> 5", lQtdeTitRec, dValTitRec)
    If lErro <> AD_SQL_SUCESSO Then Error 12345
    
    lErro = Comando_BuscarProximo(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then Error 12345
    
    'obtem valor e qtde de parcelas de titulos baixados
    lErro = Comando_Executar(alComando(1), "SELECT COUNT(NumIntDoc), SUM(Valor) FROM ParcelasRecBaixadas WHERE Status <> 5", lQtdeParcRecBaixados, dValParcRecBaixados)
    If lErro <> AD_SQL_SUCESSO Then Error 12345
    
    lErro = Comando_BuscarProximo(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then Error 12345
    
    'obtem valor liquido e qtde de titulos baixados
    lErro = Comando_Executar(alComando(1), "SELECT COUNT(NumIntDoc), SUM(Valor-(ValorIRRF+ PISRetido+ ISSRetido+ COFINSRetido+ CSLLRetido)-(ValorINSS*INSSRetido)) FROM TitulosRecBaixados WHERE Status <> 5", lQtdeTitRecBaixados, dValTitRecBaixados)
    If lErro <> AD_SQL_SUCESSO Then Error 12345
    
    lErro = Comando_BuscarProximo(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then Error 12345
    
    'calcular saldos (qtde e valor) das carteiras de cobranca vs saldos das parcelas
    lErro = Comando_Executar(alComando(1), "SELECT Cobrador, CodCarteiraCobranca, QuantidadeAtual, SaldoAtual FROM CarteirasCobrador", iCobrador, iCodCarteiraCobranca, lQtdeParcRecCartCobrBD, dValParcRecCartCobrBD)
    If lErro <> AD_SQL_SUCESSO Then Error 12345
    
    lErro = Comando_BuscarProximo(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then Error 12345
        
    Do While lErro = AD_SQL_SUCESSO
    
        'obter o saldo e qtde nas parcelasrec
        lErro = Comando_Executar(alComando(2), "SELECT COUNT(NumIntDoc), SUM(Saldo) FROM ParcelasRec WHERE Status = 4 AND Cobrador = ? AND CarteiraCobranca = ?", lQtdeParcRecCartCobr, dValParcRecCartCobr, iCobrador, iCodCarteiraCobranca)
        If lErro <> AD_SQL_SUCESSO Then Error 12345
        
        lErro = Comando_BuscarProximo(alComando(2))
        If lErro <> AD_SQL_SUCESSO Then Error 12345
    
        If lQtdeParcRecCartCobrBD <> lQtdeParcRecCartCobr Or Abs(dValParcRecCartCobrBD - dValParcRecCartCobr) > 0.01 Then
        
            MsgBox ("Cobrador = " & CStr(iCobrador) & " CarteiraCobranca = " & CStr(iCodCarteiraCobranca) & " qtde = " & CStr(lQtdeParcRecCartCobrBD) & " / " & CStr(lQtdeParcRecCartCobr) & " valor = " & CStr(dValParcRecCartCobrBD) & " / " & CStr(dValParcRecCartCobr))
            
            lErro = Comando_Executar(alComando(20), "UPDATE CarteirasCobrador SET QuantidadeAtual = ?, SaldoAtual = ? WHERE Cobrador = ? AND CodCarteiraCobranca = ?", lQtdeParcRecCartCobr, dValParcRecCartCobr, iCobrador, iCodCarteiraCobranca)
            If lErro <> SUCESSO Then Error 12345
            
        End If
        
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 12345
    
    Loop
    
    'verificar se doctos de + alto nivel excluidos se ligam a doctos de nivel mais baixo nao excluidos:
        'ex.: baixarec excluida ligada a baixaparcrec nao excluida
        'ex.: titulorec excluido ligado a parcelas rec nao excluidas
    
    'baixarec excluida ligada a baixaparcrec nao excluida
    lErro = Comando_Executar(alComando(1), "SELECT BaixasParcRec.NumIntBaixa FROM BaixasParcRec, BaixasRec WHERE BaixasRec.NumIntBaixa = BaixasParcRec.NumIntBaixa AND BaixasRec.Status = 5 AND BaixasParcRec.Status <> 5", lNumIntBaixa)
    If lErro <> AD_SQL_SUCESSO Then Error 999
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    
    If lErro = AD_SQL_SUCESSO Then MsgBox ("BaixaRec Excluida ligada a BaixaParcRec nao excluida com Numero Interno: " & CStr(lNumIntBaixa))
    
    'titulorec excluido ligado a parcelas rec nao excluidas
    lErro = Comando_Executar(alComando(1), "SELECT ParcelasRec.NumIntTitulo FROM TitulosRec, ParcelasRec WHERE TitulosRec.NumIntDoc = ParcelasRec.NumIntTitulo AND TitulosRec.Status = 5 AND ParcelasRec.Status <> 5", lNumIntTitulo)
    If lErro <> AD_SQL_SUCESSO Then Error 999
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    
    If lErro = AD_SQL_SUCESSO Then MsgBox ("TituloPag excluido ligado a Parcelas Pag não excluidas: " & CStr(lNumIntTitulo))
        
    'comparar valor original de debitos menos saldo com valor das baixas associadas a eles
    
    'obter valor de debitos utilizado em baixas atraves de BaixasParcRec
    lErro = Comando_Executar(alComando(1), "SELECT SUM(BaixasParcRec.ValorRecebido) From DebitosRecCli, BaixasRec, BaixasParcRec WHERE BaixasParcRec.Status <> 5 AND DebitosRecCli.NumIntDoc = BaixasRec.NumIntDoc AND BaixasRec.NumIntBaixa = BaixasParcRec.NumIntBaixa", dBaixaParcRecDebitos)
    If lErro <> AD_SQL_SUCESSO Then Error 999

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    
    'obter valor de debitos utilizado em baixas diretamente da tabela de DebitosRecCli
    lErro = Comando_Executar(alComando(1), "SELECT SUM(ValorTotal - (ValorIRRF+ PISRetido+ COFINSRetido+ CSLLRetido) - Saldo) From DebitosRecCli WHERE Status <> 5", dBaixaParcRecDebitos2)
    If lErro <> AD_SQL_SUCESSO Then Error 999

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    
    If Abs(dBaixaParcRecDebitos - dBaixaParcRecDebitos2) >= 0.01 Then MsgBox ("Erros nas baixas em DebitosRecCli")
            
    'comparar valor de adiantamentos utilizado em baixas nas tabelas BaixasParcRec e na propria tabela de RecebAntecipados
    
    'obter valor de adiantamentos utilizado em baixas atraves de BaixasParcRec
    lErro = Comando_Executar(alComando(1), "SELECT SUM(BaixasParcRec.ValorBaixado - BaixasParcRec.ValorDesconto + BaixasParcRec.ValorMulta + BaixasParcRec.ValorJuros) From RecebAntecipados, MovimentosContaCorrente, BaixasRec, BaixasParcRec WHERE BaixasParcRec.Status <> 5 AND MovimentosContaCorrente.Excluido = 0 AND RecebAntecipados.NumMovto = MovimentosContaCorrente.NumMovto AND MovimentosContaCorrente.NumMovto = BaixasRec.NumMovCta AND BaixasRec.NumIntBaixa = BaixasParcRec.NumIntBaixa", dBaixaParcRecAntecip)
    If lErro <> AD_SQL_SUCESSO Then Error 999

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    
    'obter valor de adiantamentos utilizado em baixas diretamente das tabelas de RecebAntecipados e MovimentosContaCorrente
    lErro = Comando_Executar(alComando(1), "SELECT SUM(Valor - RecebAntecipados.SaldoNaoApropriado) From RecebAntecipados, MovimentosContaCorrente WHERE RecebAntecipados.NumMovto = MovimentosContaCorrente.NumMovto AND MovimentosContaCorrente.Excluido <> 1", dBaixaParcRecAntecip2)
    If lErro <> AD_SQL_SUCESSO Then Error 999

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    
    If Abs(dBaixaParcRecAntecip - dBaixaParcRecAntecip2) >= 0.01 Then MsgBox ("Erros nas baixas em RecebAntecipados")
            
    'ver se doctos baixados tem saldo zero ( e doctos com saldo zero nao baixados ): titulos, parcelas, debitos,...
    
    'procura Titulos a Receber com saldo zero com status <> baixado
    lErro = Comando_Executar(alComando(1), "SELECT COUNT(TitulosRec.NumIntDoc) FROM TitulosRec WHERE TitulosRec.Saldo = 0 AND TitulosRec.Status <> 2", lTotTitRec)
    If lErro <> AD_SQL_SUCESSO Then Error 999
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    
    If lTotTitRec <> 0 Then MsgBox ("Existem " & CStr(lTotTitRec) & " TitulosRec não Baixados com o Saldo Zerado")
    
    'procura Titulos a Receber Baixados com saldo <> zero
    lErro = Comando_Executar(alComando(1), "SELECT COUNT(TitulosRecBaixados.Saldo) FROM TitulosRecBaixados WHERE TitulosRecBaixados.Saldo <> 0", lTotTitRecBaixa)
    If lErro <> AD_SQL_SUCESSO Then Error 999
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    
    If lTotTitRecBaixa <> 0 Then MsgBox ("Existem " & CStr(lTotTitRecBaixa) & " Titulos Rec Baixados com o Saldo Não Zerado")
    
    'procura Parcelas a Receber com saldo zero com status <> baixado
    lErro = Comando_Executar(alComando(1), "SELECT COUNT(ParcelasRec.NumIntDoc) FROM ParcelasRec WHERE ParcelasRec.Saldo = 0 AND ParcelasRec.Status <> 2", lTotParcRec)
    If lErro <> AD_SQL_SUCESSO Then Error 999
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    
    If lTotParcRec <> 0 Then MsgBox ("Existem " & CStr(lTotParcRec) & " Parcelas Rec não Baixadas com o Saldo Zerado")
    
    'procura em DebitosRecCli - Se o Saldo for ZERO e o Status for <> Baixado
    lErro = Comando_Executar(alComando(1), "SELECT COUNT(DebitosRecCli.NumIntDoc) FROM DebitosRecCli WHERE DebitosRecCli.Saldo = 0 AND DebitosRecCli.Status <> 2", lTotDebit)
    If lErro <> AD_SQL_SUCESSO Then Error 999
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    
    If lTotDebit <> 0 Then MsgBox ("Existem " & CStr(lTotDebit) & " Debitos não Baixados na tabela DebitosRecCli com o Saldo Zerado")
    
    'procura em DebitosRecCli - Se o Saldo for <> ZERO e o Status for Baixado
    lErro = Comando_Executar(alComando(1), "SELECT COUNT(DebitosRecCli.NumIntDoc) FROM DebitosRecCli WHERE DebitosRecCli.Saldo <> 0 AND DebitosRecCli.Status = 2", lTotDebitBaixa)
    If lErro <> AD_SQL_SUCESSO Then Error 999
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    
    If lTotDebitBaixa <> 0 Then MsgBox ("Existem " & CStr(lTotDebitBaixa) & "  Debitos Baixados na tabela DebitosRecCli com o Saldo não Zerado")
    
    'comparar saldo de baixas nao excluidas com as parcelas a que se ligam
    
    'obtem total baixado em BaixasParcRec de parcelas de titulos nao baixados
    lErro = Comando_Executar(alComando(1), "SELECT SUM(BaixasParcRec.ValorBaixado) FROM ParcelasRec, BaixasParcRec WHERE BaixasParcRec.Status <> 5 AND BaixasParcRec.NumIntParcela=ParcelasRec.NumIntDoc", dSaldoBaixaParcRec)
    If lErro <> AD_SQL_SUCESSO Then Error 999
        
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
        
    'obtem total baixado em ParcelasRec
    lErro = Comando_Executar(alComando(1), "SELECT SUM(Valor - Saldo) FROM ParcelasRec WHERE Status <> 5", dValorBaixadoParcRec)
    If lErro <> AD_SQL_SUCESSO Then Error 999
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    
    If Abs(dSaldoBaixaParcRec - dValorBaixadoParcRec) >= 0.01 Then MsgBox ("inconsistencia em valores baixados de titulos nao baixados")
        
    'obtem total baixado em BaixasParcRec de parcelas de titulos baixados
    lErro = Comando_Executar(alComando(1), "SELECT SUM(BaixasParcRec.ValorBaixado) FROM ParcelasRecBaixadas, BaixasParcRec WHERE BaixasParcRec.Status <> 5 AND BaixasParcRec.NumIntParcela=ParcelasRecBaixadas.NumIntDoc", dSaldoBaixaParcRec2)
    If lErro <> AD_SQL_SUCESSO Then Error 999
        
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
        
    'obtem total baixado em ParcelasRecBaixados
    lErro = Comando_Executar(alComando(1), "SELECT SUM(Valor) FROM ParcelasRecBaixadas WHERE Status <> 5", dValorBaixadoParcRecBaixados)
    If lErro <> AD_SQL_SUCESSO Then Error 999
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
    
    If Abs(dSaldoBaixaParcRec2 - dValorBaixadoParcRecBaixados) >= 0.01 Then MsgBox ("inconsistencia em valores baixados de titulos baixados")
        
    lErro = Transacao_Commit
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    sTexto = "lQtdeParcRec = " & CStr(lQtdeParcRec)
    sTexto = sTexto & Chr$(13) & Chr$(10)
    sTexto = sTexto & "dValParcRec = " & CStr(dValParcRec)
    sTexto = sTexto & Chr$(13) & Chr$(10)
    sTexto = sTexto & "lQtdeTitRec = " & CStr(lQtdeTitRec)
    sTexto = sTexto & Chr$(13) & Chr$(10)
    sTexto = sTexto & " dValTitRec = " & CStr(dValTitRec)
    sTexto = sTexto & Chr$(13) & Chr$(10)
    sTexto = sTexto & "lQtdeParcRecBaixadas = " & CStr(lQtdeParcRecBaixados)
    sTexto = sTexto & Chr$(13) & Chr$(10)
    sTexto = sTexto & "dValParcRecBaixadas = " & CStr(dValParcRecBaixados)
    sTexto = sTexto & Chr$(13) & Chr$(10)
    sTexto = sTexto & "lQtdeTitRecBaixadas = " & CStr(lQtdeTitRecBaixados)
    sTexto = sTexto & Chr$(13) & Chr$(10)
    sTexto = sTexto & " dValTitRecBaixadas = " & CStr(dValTitRecBaixados)
        
    MsgBox (sTexto)
    
    Exit Sub
     
Erro_CR_Testa_Integridade:

    Select Case Err
          
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148395)
     
    End Select
     
    Call Transacao_Rollback
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Sub

End Sub

Private Sub TES_Testa_Integridade()

Dim lErro  As Long
Dim dTotalCredCCI As Double
Dim dTotalCredMovCtaCorrente As Double
Dim dTotalCredCCIMovDia As Double
Dim dTotalDebCCI As Double
Dim dTotalDebMovCtaCorrente As Double
Dim dTotalDebCCIMovDia As Double
Dim alComando(1 To 6) As Long
Dim iIndice As Integer

On Error GoTo Erro_TES_Testa_Integridade
        
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then Error 12345
    Next
    
    'Creditos
    
    'Lê a soma de todos os Creditos na Tabela CCIMov
    lErro = Comando_Executar(alComando(1), "SELECT Sum(Cred01+Cred02+Cred03+Cred04+Cred05+Cred06+Cred07+Cred08+Cred09+Cred10+Cred11+Cred12) FROM CCIMov", dTotalCredCCI)
    If lErro <> AD_SQL_SUCESSO Then Error 999
        
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
            
    'Lê a soma de todos os Creditos na Tabela MovimentosContaCorrente
    lErro = Comando_Executar(alComando(2), "SELECT Sum(Valor) FROM MovimentosContaCorrente, TiposMovtoCtaCorrente WHERE MovimentosContaCorrente.Tipo = TiposMovtoCtaCorrente.Codigo And TiposMovtoCtaCorrente.Credito = 1 And MovimentosContaCorrente.Excluido <> 1", dTotalCredMovCtaCorrente)
    If lErro <> AD_SQL_SUCESSO Then Error 999
        
    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
                
    'Lê a soma de todos os Creditos na Tabela CCIMovDia
    lErro = Comando_Executar(alComando(3), "SELECT SUM(Cred) FROM CCIMovDia", dTotalCredCCIMovDia)
    If lErro <> AD_SQL_SUCESSO Then Error 999
        
    lErro = Comando_BuscarPrimeiro(alComando(3))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
                
    If Abs(dTotalCredCCI - dTotalCredMovCtaCorrente) >= 0.01 Then MsgBox ("Erro Movimento Crédito")
    If Abs(dTotalCredCCIMovDia - dTotalCredMovCtaCorrente) >= 0.01 Then MsgBox ("Erro Movimento Crédito")
        
    'Débitos
    
    'Lê a soma de todos os Débitos na Tabela CCIMov
    lErro = Comando_Executar(alComando(4), "SELECT SUM(Deb01+Deb02+Deb03+Deb04+Deb05+Deb06+Deb07+Deb08+Deb09+Deb10+Deb11+Deb12) FROM CCIMov", dTotalDebCCI)
    If lErro <> AD_SQL_SUCESSO Then Error 999
        
    lErro = Comando_BuscarPrimeiro(alComando(4))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
            
    'Lê a soma de todos os Débito na Tabela MovimentosContaCorrente
    lErro = Comando_Executar(alComando(5), "SELECT Sum(Valor) FROM MovimentosContaCorrente, TiposMovtoCtaCorrente WHERE MovimentosContaCorrente.Tipo = TiposMovtoCtaCorrente.Codigo And TiposMovtoCtaCorrente.Credito = 0 And Excluido <> 1", dTotalDebMovCtaCorrente)
    If lErro <> AD_SQL_SUCESSO Then Error 999
        
    lErro = Comando_BuscarPrimeiro(alComando(5))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
                
    'Lê a soma de todos os Débitos na Tabela CCIMovDia
    lErro = Comando_Executar(alComando(6), "SELECT SUM(Deb) FROM CCIMovDia;", dTotalDebCCIMovDia)
    If lErro <> AD_SQL_SUCESSO Then Error 999
        
    lErro = Comando_BuscarPrimeiro(alComando(6))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then Error 999
                
    If Abs(dTotalDebCCI - dTotalDebMovCtaCorrente) >= 0.01 Then MsgBox ("Erro Movimento Débito")
    If Abs(dTotalDebCCIMovDia - dTotalDebMovCtaCorrente) >= 0.01 Then MsgBox ("Erro Movimento Débito")
        
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Sub
     
Erro_TES_Testa_Integridade:

    Select Case Err
          
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148396)
     
    End Select
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

End Sub

'*** Função refeita por Luiz Nogueira em 24/05/02 ***
'A função passou a fazer apenas a abertura de transação e chamar uma função
'EmTrans que fica responsável pela gravação
'*****************************************************
Public Function ComissoesAvulsas_Grava(ByVal objComissoesAvulsas As ClassComissoesAvulsas) As Long
'Grava Comissão Avulsa nas tabelas de Comissões Avulsas e Comissões
'objComissoesAvulsas RECEBE(Input) os dados que serão gravados no BD

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_ComissoesAvulsas_Grava

    'Inicia Transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 87648
    
    'Chama a função que se encarrega da gravação da comissão avulsa
    lErro = ComissoesAvulsas_Grava_EmTrans(objComissoesAvulsas)
    If lErro <> SUCESSO Then gError 102077
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 87657
    
    ComissoesAvulsas_Grava = SUCESSO
    
    Exit Function
    
Erro_ComissoesAvulsas_Grava:

    ComissoesAvulsas_Grava = gErr
    
    Select Case gErr
    
        Case 102077
        
        Case 87648
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 87657
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148397)
            
    End Select
    
    'Desfaz Transação
    Call Transacao_Rollback
    
    Exit Function

End Function

'*** Função criada por Luiz Nogueira em 21/05/02 ***
'MOTIVO: permitir inserir registros na tabela de comissões avulsas,
'sendo chamada a partir de uma função que já esteja em transação
Public Function ComissoesAvulsas_Grava_EmTrans(ByVal objComissoesAvulsas As ClassComissoesAvulsas, Optional ByVal dtBaixa As Date = DATA_NULA) As Long
'Grava Comissão Avulsa nas tabelas de Comissões Avulsas e Comissões
'ATENÇÃO: ESSA FUNÇÃO DEVE SER CHAMADA EM TRANSAÇÃO !!!
'dtDataBaixa eh parametro de INPUT e foi colocado para que as comissoes avulsas sejam inseridas
'na tabela de comissoes com data da baixa ja

Dim lErro As Long
Dim alComando(1 To 4) As Long
Dim iIndice As Integer
Dim lNumIntDoc As Long
Dim lNumIntCom As Long
Dim dtDataBaixa As Date

On Error GoTo Erro_ComissoesAvulsas_Grava_EmTrans

    'Abre Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 87647
    Next
    
    'Faz leitura na tabela ComissoesAvulsas passando as chaves secundárias
    lErro = Comando_ExecutarPos(alComando(1), "SELECT NumIntDoc FROM ComissoesAvulsas WHERE Vendedor = ? AND Data = ? AND Referencia = ?", 0, lNumIntDoc, objComissoesAvulsas.iVendedor, objComissoesAvulsas.dtData, objComissoesAvulsas.sReferencia)
    If lErro <> AD_SQL_SUCESSO Then gError 87649
    
    'Busca o primeiro registro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 87650
    
    'Se for sem dados ---> insere
    If lErro = AD_SQL_SEM_DADOS Then
        
        'Gera próximo número interno para Comissões Avulsas
        lErro = CF("Config_ObterNumInt", "CPRConfig", "NUM_PROX_COMISSAO_AVULSA", lNumIntDoc)
        If lErro <> SUCESSO Then gError 87651
        
        'Atribui o Código ao obj
        objComissoesAvulsas.lNumIntDoc = lNumIntDoc

        'Insere os dados na tabela de ComissoesAvulsas
        lErro = Comando_Executar(alComando(1), "INSERT INTO ComissoesAvulsas (NumIntDoc, Vendedor, Data, Referencia, CodigoMotivo, BaseCalculo, Aliquota, ValorComissao) VALUES (?,?,?,?,?,?,?,?)" _
        , objComissoesAvulsas.lNumIntDoc, objComissoesAvulsas.iVendedor, objComissoesAvulsas.dtData, objComissoesAvulsas.sReferencia, objComissoesAvulsas.iCodigoMotivo, objComissoesAvulsas.dBaseCalculo, objComissoesAvulsas.dAliquota, objComissoesAvulsas.dValorComissao)
        If lErro <> AD_SQL_SUCESSO Then gError 87652
        
        'Gera o próximo código para a tabela de Comissões
        lErro = CF("Comissao_Automatico1", alComando(2), alComando(3), lNumIntCom)
        If lErro <> SUCESSO Then gError 87653

        'Insere a Comissão Avulsa na tabela de Comissoes
        lErro = Comando_Executar(alComando(4), "INSERT INTO Comissoes (NumIntCom, FilialEmpresa, Status, TipoTitulo, NumIntDoc, CodVendedor, DataGeracao, Percentual, ValorBase, Valor,DataBaixa) VALUES (?,?,?,?,?,?,?,?,?,?,?)", lNumIntCom, giFilialEmpresa, STATUS_LIBERADO, TIPO_COMISSAO_AVULSA, objComissoesAvulsas.lNumIntDoc _
        , objComissoesAvulsas.iVendedor, objComissoesAvulsas.dtData, objComissoesAvulsas.dAliquota, objComissoesAvulsas.dBaseCalculo, objComissoesAvulsas.dValorComissao, dtBaixa)
        If lErro <> AD_SQL_SUCESSO Then gError 87654

    'Se Encontrou ---> atualiza
    Else
    
        'Lock na Tabela de ComissoesAvulsas
        lErro = Comando_LockExclusive(alComando(1))
        If lErro <> AD_SQL_SUCESSO Then gError 87665
        
        'Faz leitura do registro na tabela de comissões
        lErro = Comando_ExecutarPos(alComando(2), "SELECT DataBaixa FROM Comissoes WHERE NumIntDoc = ? AND TipoTitulo = ?", 0, dtDataBaixa, lNumIntDoc, TIPO_COMISSAO_AVULSA)
        If lErro <> AD_SQL_SUCESSO Then gError 87674
        
        'Seleciona o registro
        lErro = Comando_BuscarPrimeiro(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 87675
            
        'Se a Comissão já estiver baixada então dispara erro
        If dtDataBaixa <> DATA_NULA Then gError 87676
                        
        'Atualiza os dados na tabela de ComissoesAvulsas
        lErro = Comando_ExecutarPos(alComando(3), "UPDATE ComissoesAvulsas SET CodigoMotivo = ?, BaseCalculo = ?, Aliquota = ?, ValorComissao = ?", alComando(1) _
        , objComissoesAvulsas.iCodigoMotivo, objComissoesAvulsas.dBaseCalculo, objComissoesAvulsas.dAliquota, objComissoesAvulsas.dValorComissao)
        If lErro <> AD_SQL_SUCESSO Then gError 87655
                
        'Atualiza os dados na tabela de Comissoes
        lErro = Comando_ExecutarPos(alComando(4), "UPDATE Comissoes SET Percentual = ?, ValorBase = ?, Valor = ?, DataBaixa = ?", alComando(2), objComissoesAvulsas.dAliquota, objComissoesAvulsas.dBaseCalculo, objComissoesAvulsas.dValorComissao, dtBaixa)
        If lErro <> AD_SQL_SUCESSO Then gError 87656
        
        
    End If
        
    'Fecha Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    ComissoesAvulsas_Grava_EmTrans = SUCESSO
    
    Exit Function
    
Erro_ComissoesAvulsas_Grava_EmTrans:

    ComissoesAvulsas_Grava_EmTrans = gErr
    
    Select Case gErr
    
        Case 87647
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 87648
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 87649, 87650
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_COMISSOESAVULSAS", gErr)
    
        Case 87651, 87563
            'Tratado na Rotina chamada

        Case 87652
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_COMISSOESAVULSAS", gErr)
        
        Case 87654
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_COMISSOES", gErr)
            
        Case 87655
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO _COMISSOESAVULSAS", gErr)

        Case 87656
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO _COMISSOES", gErr)

        Case 87657
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case 87666
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_COMISSOESAVULSAS", gErr)
            
        Case 87674, 87675
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_COMISSOES3", gErr)
            
        Case 87676
            Call Rotina_Erro(vbOKOnly, "ERRO_COMISSAO_BAIXADA_ATUALIZA", gErr)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148398)
            
    End Select
    
    'Fecha Comandos ---> saída por erro
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

'*** Função criada por Tulio Jorge em 21/05/02 ***
'MOTIVO: permitir excluir registros na tabela de comissões avulsas,
'a partir do numintdoc do registro, mesmo que a comissão esteja baixada
Public Function ComissoesAvulsas_Exclui_NumIntDoc(ByVal objComissoesAvulsas As ClassComissoesAvulsas) As Long
'Exclui uma ComissaoAvulsa a partir do NumIntDoc passado como parâmetro
'Exclui a comissao da tabela de comissoes também
'objComissoesAvulsas RECEBE(Input) o NumIntDoc da comissão avulsa que será excluída
'OBS.: ESSA FUNCAO EXCLUI COMISSOES MESMO Q ESTEJAM BAIXADAS
'DEVE SER CHAMADA DENTRO DE TRANSACAO

Dim lErro As Long
Dim lNumIntDoc As Long
Dim dtDataBaixa As Date
Dim alComando(1 To 4) As Long
Dim iIndice As Integer

On Error GoTo Erro_ComissoesAvulsas_Exclui_NumIntDoc

    'Abre Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 102078
    Next
        
    'Lê tabela de Comissões Avulsas
    lErro = Comando_ExecutarPos(alComando(1), "SELECT NumIntDoc FROM ComissoesAvulsas WHERE NumIntDoc = ?", _
    0, lNumIntDoc, objComissoesAvulsas.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 102079

    'Seleciona a comissão
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 102080

    'Se não Encontrou erro
    If lErro = AD_SQL_SEM_DADOS Then gError 102081
    
    'Lock na tabela de ComissoesAvulsas
    lErro = Comando_LockExclusive(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 102082

    'Verifica se a comissão está gravada na tabela de comissões
    lErro = Comando_ExecutarPos(alComando(2), "SELECT DataBaixa FROM Comissoes WHERE NumIntDoc = ? AND TipoTitulo = ?", 0, dtDataBaixa, lNumIntDoc, TIPO_COMISSAO_AVULSA)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 102083
    
    'Busca o registro
    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 102084
        
    'Se não Encontrou => erro
    If lErro = AD_SQL_SEM_DADOS Then gError 102085
    
    'Exclui a comissão na tabela de comissões avulsas
    lErro = Comando_ExecutarPos(alComando(3), "DELETE FROM ComissoesAvulsas", alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 102086

    'Exclui a comissão na tabela de comissões
    lErro = Comando_ExecutarPos(alComando(4), "DELETE FROM Comissoes", alComando(2))
    If lErro <> AD_SQL_SUCESSO Then gError 102087

    'Fecha Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
        
    ComissoesAvulsas_Exclui_NumIntDoc = SUCESSO
    
    Exit Function

Erro_ComissoesAvulsas_Exclui_NumIntDoc:

    ComissoesAvulsas_Exclui_NumIntDoc = gErr
    
    Select Case gErr
    
        Case 102078
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 102079, 102080
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_COMISSOESAVULSAS", gErr)

        Case 102081
            Call Rotina_Erro(vbOKOnly, "ERRO_COMISSAOAVULSA_INEXISTENTE", gErr, lNumIntDoc)
            
        Case 102085
            Call Rotina_Erro(vbOKOnly, "ERRO_COMISSAO_NAO_EXISTENTE", gErr, lNumIntDoc)
        
        Case 102086
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_COMISSOESAVULSAS", gErr)
                
        Case 102082
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_COMISSOESAVULSAS", gErr)
        
        Case 102083, 102084
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_COMISSOES", gErr)
        
        Case 102087
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_COMISSOES", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148399)
            
    End Select
    
    'Fecha Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Function DevolucaoCheque_Grava(ByVal objDevCheque As ClassDevCheque, ByVal objContabil As ClassContabil) As Long

Dim lErro As Long
Dim lTransacao As Long
Dim lNumIntCheque As Long
Dim lComando1 As Long
Dim lCodigo As Long
Dim lSeq As Long
Dim lNumIntDoc As Long

On Error GoTo Erro_DevolucaoCheque_Grava

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 109898

    'Entra em transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 109899
    
    'verifica se existe DevolucaoCheque
    lErro = Comando_Executar(lComando1, "SELECT Codigo, SequencialBack, DevolucaoCheque.NumIntDoc FROM DevolucaoCheque, ChequeBordero, ChequePre WHERE Codigo = ? AND DevolucaoCheque.FilialEmpresa = ? AND NumIntChqBord=ChequeBordero.NumIntDoc AND ChequePre.NumIntCheque=ChequeBordero.NumIntCheque", lCodigo, lSeq, lNumIntDoc, objDevCheque.lCodigo, objDevCheque.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 109900

    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109901

    'se já existia..
    If lErro = AD_SQL_SUCESSO Then
        'se alterou o cheque --> erro.
        If lSeq <> objDevCheque.lSeqChq Then gError 112053
        objDevCheque.lNumIntDoc = lNumIntDoc
        
        'exclui antes de inserir
        lErro = CF("DevolucaoCheque_Exclui_EmTrans", objDevCheque, objContabil)
        If lErro <> SUCESSO Then gError 109903
    End If
    
    lErro = CF("DevolucaoCheque_Inserir", objDevCheque, objContabil)
    If lErro <> SUCESSO Then gError 109904
            
    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 109902
        
    Call Comando_Fechar(lComando1)
           
    DevolucaoCheque_Grava = SUCESSO
    
    Exit Function
    
Erro_DevolucaoCheque_Grava:

    DevolucaoCheque_Grava = gErr

    Select Case gErr
    
        Case 109898
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 109899
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
        
        Case 109900, 109901
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUEPRE", gErr, lNumIntCheque)

        Case 109903, 109904

        Case 109902
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case 112053
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUI_DEVCHEQUE_ANTES", gErr)
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148400)

    End Select
    
    Call Comando_Fechar(lComando1)
    
    Call Transacao_Rollback
    
    Exit Function

End Function

Function DevolucaoCheque_Inserir(ByVal objDevCheque As ClassDevCheque, ByVal objContabil As ClassContabil) As Long

Dim lErro As Long
Dim lTransacao As Long
Dim lComando2 As Long
Dim lComando As Long
Dim lNumIntDoc As Long
Dim objChequePre As New ClassChequePre
Dim iIndice As Integer

On Error GoTo Erro_DevolucaoCheque_Inserir

    'Abertura comandos
    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then gError 109905
    
    'Gera número automático.
    lErro = CF("Config_ObterAutomatico_EmTrans", "CPRConfig", "NUM_PROX_DEVCHEQUE", "DevolucaoCheque", "NumIntDoc", lNumIntDoc)
    If lErro <> SUCESSO Then gError 109906
    
    objDevCheque.lNumIntDoc = lNumIntDoc
    objChequePre.iFilialEmpresa = giFilialEmpresa
    objChequePre.lSequencialBack = objDevCheque.lSeqChq
    
    lErro = CF("ChequePre_Le2_Lock", objChequePre)
    If lErro <> SUCESSO And lErro <> 109867 Then gError 109907
    
    'se naum existe cheque
    If lErro = 109867 Then gError 109909
    
    If objChequePre.iLocalizacao <> CHEQUEPRE_LOCALIZACAO_EM_TERCEIROS Then
    
        'Verififica se o Cheque está no banco e nao foi enviado para lá pelo loja caixa central
        lErro = CF("ChequeRel_BordDevolvido", objChequePre)
        If lErro <> SUCESSO And lErro <> 109871 Then gError 109911
    
        'se nao há correspondencia entre as tabelas da seleção acima
        If lErro = 109871 Then gError 109912
        
        objDevCheque.lNumIntChqBord = objChequePre.lNumIntChequeBord
    
    End If
    
    If objChequePre.iLocalizacao <> CHEQUEPRE_LOCALIZACAO_EM_TERCEIROS Then
        If objChequePre.iTipoBordero = BORDERO_DESCONTO Then
            lErro = CF("Cancelar_Baixa_Cheque_Desc", objDevCheque, objChequePre)
            If lErro <> AD_SQL_SUCESSO Then gError 109914
        Else
            lErro = CF("Cancelar_Baixa_Cheque_Pre", objDevCheque, objChequePre)
            If lErro <> AD_SQL_SUCESSO Then gError 109915
        End If
    Else
        '######################################################################
        'Inserido por Wagner 21/06/2006
        lErro = Cancelar_Baixa_Cheque_Pre_EmTerceiros(objDevCheque, objChequePre)
        If lErro <> AD_SQL_SUCESSO Then gError 180271
        '######################################################################
    End If
    
    'Insere o movimento na Tabela DevolucaoCheque
    lErro = Comando_Executar(lComando2, "INSERT INTO DevolucaoCheque ( FilialEmpresa, Codigo, Data, Fornecedor, Filial, DataVencimento, ValorCredito, NumIntChqBord, NumIntBaixasParcRecCanc, NumIntDoc, NumIntTituloPag, NumIntCheque) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)", objDevCheque.iFilialEmpresa, objDevCheque.lCodigo, objDevCheque.dtData, objDevCheque.lFornecedor, objDevCheque.iFilial, objDevCheque.dtDataVencimento, objDevCheque.dValorCredito, objDevCheque.lNumIntChqBord, objDevCheque.lNumIntBaixasParcRecCanc, objDevCheque.lNumIntDoc, objDevCheque.lNumIntTituloPag, objChequePre.lNumIntCheque)
    If lErro <> AD_SQL_SUCESSO Then gError 109913

    'atualiza a localizacao do cheque passado como parametro
    lErro = ChequePre_Altera_Localizacao(objChequePre, CHEQUEPRE_LOCALIZACAO_BACKOFFICE)
    If lErro <> SUCESSO Then gError 110115

    If objChequePre.iLocalizacao <> CHEQUEPRE_LOCALIZACAO_EM_TERCEIROS Then
        'prepara e insere o movto de caixa central correspondente a devolucao de cheque
        lErro = Movcx_Grava_DevolucaoCheque(objDevCheque, objChequePre)
        If lErro <> SUCESSO Then gError 126207
    End If
    
    lErro = objContabil.Contabil_Gravar_Registro(lNumIntDoc, 0, 0, DATA_NULA)
    If lErro <> AD_SQL_SUCESSO Then gError 109916
    
    Call Comando_Fechar(lComando2)
    
    DevolucaoCheque_Inserir = SUCESSO
    
    Exit Function
    
Erro_DevolucaoCheque_Inserir:

    DevolucaoCheque_Inserir = gErr

    Select Case gErr

        Case 109905
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 109906, 109911, 109914, 109915, 109916, 109907, 110115, 126207, 180271
        
        Case 109909
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CHEQUE_INEXISTENTE", gErr, objChequePre.lSequencialBack)
        
        Case 109912
            lErro = Rotina_Erro(vbOKOnly, "ERRO_NAO_VINCULADO_BORDERO", gErr, objChequePre.lNumIntCheque)
        
        Case 109913
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_DEVCHEQUE", gErr, objChequePre.lNumIntCheque)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148401)

    End Select

    Call Comando_Fechar(lComando2)
    
    Exit Function

End Function

Private Function Movcx_Grava_DevolucaoCheque(ByVal objDevCheque As ClassDevCheque, objChequePre As ClassChequePre) As Long
'prepara e insere o movto de caixa central correspondente a devolucao de cheque

Dim objMovimentoCaixa As New ClassMovimentoCaixa
Dim lNumMovto As Long
Dim lSequencial As Long
Dim objCCMovDia As New ClassCCMovDia
Dim alComando(1 To 1) As Long
Dim iIndice As Integer
Dim lErro As Long
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim objTipoMeioPagtoLojaFilial As New ClassTMPLojaFilial

On Error GoTo Erro_Movcx_Grava_DevolucaoCheque

    If objChequePre.lSequencialLoja <> 0 And giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL_BACKOFFICE Then

        'abre os comandos
        For iIndice = LBound(alComando) To UBound(alComando)
            alComando(iIndice) = Comando_Abrir
            If alComando(iIndice) = 0 Then gError 126199
        Next
    
        'preenche o movimento de caixa com os dados do borderocheque
        Call Mover_Dados_DevCheque_MovCaixa(objDevCheque, objMovimentoCaixa, objChequePre)
    
        'pegar o proximo numero de movimento disponivel na tabela.
        lErro = CF("Config_ObterNumInt", "LojaConfig", "NUM_PROX_MOVCAIXACENTRAL", lNumMovto, 1, objDevCheque.iFilialEmpresa)
        If lErro <> SUCESSO Then gError 126200
        
        'preencher o movimentocaixa com número de movimento novo gerado
        objMovimentoCaixa.lNumMovto = lNumMovto
        
        'cria um
        lErro = CF("Caixa_Sequencial_Automatico", objMovimentoCaixa.iCaixa, objMovimentoCaixa.iFilialEmpresa, lSequencial)
        If lErro <> SUCESSO Then gError 126201
        
        objMovimentoCaixa.lSequencial = lSequencial
    
        'executa a inserção na tabela de movimentos de caixa
        lErro = Comando_Executar(alComando(1), "INSERT INTO MovimentosCaixa(FilialEmpresa,NumMovto,Caixa,Sequencial,Tipo,AdmMeioPagto,Parcelamento,TipoCartao,Numero,DataMovimento,Valor,Historico,Favorecido,CupomFiscal,NumRefInterna,MovtoTransf,MovtoEstorno,Gerente,CodConta,Hora) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
        objMovimentoCaixa.iFilialEmpresa, objMovimentoCaixa.lNumMovto, objMovimentoCaixa.iCaixa, objMovimentoCaixa.lSequencial, objMovimentoCaixa.iTipo, objMovimentoCaixa.iAdmMeioPagto, objMovimentoCaixa.iParcelamento, objMovimentoCaixa.iTipoCartao, objMovimentoCaixa.lNumero, objMovimentoCaixa.dtDataMovimento, objMovimentoCaixa.dValor, objMovimentoCaixa.sHistorico, objMovimentoCaixa.sFavorecido, objMovimentoCaixa.lCupomFiscal, objMovimentoCaixa.lNumRefInterna, objMovimentoCaixa.lMovtoTransf, objMovimentoCaixa.lMovtoEstorno, objMovimentoCaixa.iGerente, objMovimentoCaixa.iCodConta, objMovimentoCaixa.dHora)
        If lErro <> SUCESSO Then gError 126206
    
        'preenche o ccmovdia com os dados do borderocheque
        Call Mover_Dados_DevCheque_CCMovDia(objDevCheque, objCCMovDia, objChequePre)
    
        'adiciona ao acumulado deb/cred diário
        lErro = CF("CCMovDia_Grava", objCCMovDia)
        If lErro <> SUCESSO Then gError 126202
    
        'adiciona ao acumulado déb/créd mensal
        lErro = CF("CCMov_Grava", objCCMovDia)
        If lErro <> SUCESSO Then gError 126203
    
        If objChequePre.iNaoEspecificado = CHEQUE_NAO_ESPECIFICADO Then
    
            'Valor dos Cheques não Especificados
            objTipoMeioPagtoLojaFilial.dSaldo = objChequePre.dValor
            objTipoMeioPagtoLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_CHEQUE
            objTipoMeioPagtoLojaFilial.iFilialEmpresa = objMovimentoCaixa.iFilialEmpresa
    
            'Função que Serve para atualizar Saldo dos cheques nao especificados
            lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTipoMeioPagtoLojaFilial)
            If lErro <> SUCESSO Then gError 126204
    
        Else
    
            'Mover Valor dos Cheques Especificados para admMeioPagtoCondPagto.Saldo
            objAdmMeioPagtoCondPagto.dSaldo = objChequePre.dValor
    
            'Vincula-se ao Meio_Pagamento_Cheque para o AdmMeioPagtoCondPagto.iAdmMeioPagto
            objAdmMeioPagtoCondPagto.iAdmMeioPagto = MEIO_PAGAMENTO_CHEQUE
    
            'Vincula-se ao Pagamento_Avista para o AdmMeioPagtoCondPagto.parcelamento
            objAdmMeioPagtoCondPagto.iParcelamento = PARCELAMENTO_AVISTA
    
            'Vincula-se FilialEmpresa a o Meio de Pagamento
            objAdmMeioPagtoCondPagto.iFilialEmpresa = objMovimentoCaixa.iFilialEmpresa
    
            'Função para Alteração de Saldo
            lErro = CF("AdmMeioPagtoCondPagto_Altera_Saldo", objAdmMeioPagtoCondPagto)
            If lErro <> SUCESSO Then gError 126205
    
        End If
    
        'fecha os comandos
        For iIndice = LBound(alComando) To UBound(alComando)
            Call Comando_Fechar(alComando(iIndice))
        Next

    End If

    Movcx_Grava_DevolucaoCheque = SUCESSO

    Exit Function

Erro_Movcx_Grava_DevolucaoCheque:

    Movcx_Grava_DevolucaoCheque = gErr

    Select Case gErr

        Case 126199
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 126200 To 126205

        Case 126206
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_INSERCAO", gErr, objMovimentoCaixa.iCaixa, objMovimentoCaixa.lSequencial)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148402)

    End Select

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Sub Mover_Dados_DevCheque_MovCaixa(objDevCheque As ClassDevCheque, objMovimentoCaixa As ClassMovimentoCaixa, ByVal objChequePre As ClassChequePre)

On Error GoTo Erro_Mover_Dados_DevCheque_MovCaixa

    'preenche o movimentocaixa com os dados do borderô
    objMovimentoCaixa.dHora = CDbl(Time)
    objMovimentoCaixa.dtDataMovimento = objDevCheque.dtData
    objMovimentoCaixa.dValor = objChequePre.dValor
    objMovimentoCaixa.iAdmMeioPagto = MEIO_PAGAMENTO_CHEQUE
    objMovimentoCaixa.iCaixa = CODIGO_CAIXA_CENTRAL
    objMovimentoCaixa.iCodConta = objDevCheque.iContaCorrente
    objMovimentoCaixa.iFilialEmpresa = objDevCheque.iFilialEmpresa
    objMovimentoCaixa.iParcelamento = PARCELAMENTO_AVISTA
    objMovimentoCaixa.iTipo = MOVIMENTOCAIXA_BORDERO_DEVOL_CHEQUE
    objMovimentoCaixa.lNumRefInterna = objDevCheque.lCodigo
    
    Exit Sub

Erro_Mover_Dados_DevCheque_MovCaixa:

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148403)

    End Select

    Exit Sub

End Sub

Private Sub Mover_Dados_DevCheque_CCMovDia(objDevCheque As ClassDevCheque, objCCMovDia As ClassCCMovDia, objChequePre As ClassChequePre)

On Error GoTo Erro_Mover_Dados_DevCheque_CCMovDia

    'preenche um movdia com os dados de um borderocheque
    objCCMovDia.dCred = objChequePre.dValor
    objCCMovDia.dtData = objDevCheque.dtData
    objCCMovDia.iCodCaixa = CODIGO_CAIXA_CENTRAL
    objCCMovDia.iFilialEmpresa = objDevCheque.iFilialEmpresa
    objCCMovDia.iParcelamento = PARCELAMENTO_AVISTA
    objCCMovDia.iAdmMeioPagto = MEIO_PAGAMENTO_CHEQUE
    objCCMovDia.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_CHEQUE

    Exit Sub

Erro_Mover_Dados_DevCheque_CCMovDia:

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148404)

    End Select

    Exit Sub

End Sub

Function Cancelar_Baixa_Cheque_Pre(ByVal objDevCheque As ClassDevCheque, ByVal objCheque As ClassChequePre) As Long

Dim lErro As Long
Dim alComando(1 To 2) As Long
Dim iIndice As Integer
Dim lNumMovto As Long
Dim iCod As Integer
Dim lNumIntDoc As Long

On Error GoTo Erro_Cancelar_Baixa_Cheque_Pre

    'Abertura comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 109914
    Next
    
    'Pega o CodNossaConta da tabela BorderosChequesPre
    lErro = Comando_Executar(alComando(1), "SELECT CodNossaConta FROM BorderosChequesPre WHERE NumBordero = ?", iCod, objCheque.lNumBordero)
    If lErro <> AD_SQL_SUCESSO Then gError 109915

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109916
    
    'se naum existe registro na tabeal referente a este bordero --> erro.
    If lErro = AD_SQL_SEM_DADOS Then gError 109917
        
    objDevCheque.iContaCorrente = iCod
    
    'atualizar a conta Corrrente
    lErro = CF("DevChq_Atualizar_CCI_Saq", objDevCheque, objCheque)
    If lErro <> SUCESSO Then gError 109918
    
    'atualizar a conta Corrrente
    lErro = CF("DevChq_Atualizar_CCI_Dep", objDevCheque, objCheque)
    If lErro <> SUCESSO Then gError 109919
    
    If objCheque.lSequencialLoja = 0 Then
        'recolhe os dados e cancela  as baixas das parcelas associadas ao cheque
        lErro = CF("BaixaRecCancelar_Efetua", lNumIntDoc, objCheque, MOVCCI_BORDERO_CHEQUE_PRE, DEVCHEQUE_HISTORICO_CANCELAMENTO)
        If lErro <> SUCESSO Then gError 109935
    End If
    
    objDevCheque.lNumIntBaixasParcRecCanc = lNumIntDoc
    
    'Libera comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Cancelar_Baixa_Cheque_Pre = SUCESSO
    
    Exit Function
    
Erro_Cancelar_Baixa_Cheque_Pre:

    Cancelar_Baixa_Cheque_Pre = gErr

    Select Case gErr

        Case 109914
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 109915, 109916
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BORDEROSCHEQUESPRE", gErr, objCheque.lNumBordero)
        
        Case 109917
            lErro = Rotina_Erro(vbOKOnly, "ERRO_BORDEROSCHEQUESPRE_NAO_EXISTENTE", gErr, objCheque.lNumBordero)
        
        Case 109918, 109919, 109935
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148405)

    End Select

    'Libera comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Function Cancelar_Baixa_Cheque_Desc(ByVal objDevCheque As ClassDevCheque, ByVal objCheque As ClassChequePre) As Long

Dim lErro As Long
Dim alComando(1 To 2) As Long
Dim iIndice As Integer
Dim lNumMovto As Long
Dim objTituloPagar As New ClassTituloPagar
Dim colParcelas As New colParcelaPagar
Dim iCod As Integer
Dim lNumIntDoc As Long

 On Error GoTo Erro_Cancelar_Baixa_Cheque_Desc

    'Abertura comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 109924
    Next
    
    'ver se os campols estão preenchidos
    If objDevCheque.lFornecedor = 0 Then gError 109925
    If objDevCheque.iFilial = 0 Then gError 109926
    If objDevCheque.dValorCredito = 0 Then gError 109927
    If objDevCheque.dtDataVencimento = DATA_NULA Then gError 109928
    
    'Pega a ContaCorrente da tabela BorderoDescChq
    lErro = Comando_Executar(alComando(1), "SELECT ContaCorrente FROM BorderoDescChq WHERE FilialEmpresa = ? AND NumBordero = ?", iCod, objCheque.iFilialEmpresa, objCheque.lNumBordero)
    If lErro <> AD_SQL_SUCESSO Then gError 109929

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109930
    
    'se naum existe registro na tabeal referente a este bordero --> erro.
    If lErro = AD_SQL_SEM_DADOS Then gError 109931
        
    objDevCheque.iContaCorrente = iCod

    'atualizar a conta Corrrente
    lErro = CF("DevChq_Atualizar_CCI_Saq", objDevCheque, objCheque)
    If lErro <> SUCESSO Then gError 109932
    
    'atualizar a conta Corrrente
    lErro = CF("DevChq_Atualizar_CCI_Dep", objDevCheque, objCheque)
    If lErro <> SUCESSO Then gError 109933
    
    If objCheque.lSequencialLoja = 0 Then
        'recolhe os dados e desfaz as baixas das parcelas associadas ao cheque
        lErro = CF("BaixaRecCancelar_Efetua", lNumIntDoc, objCheque, MOVCCI_DEP_DESCONTO_CHEQUE, DEVCHEQUE_HISTORICO_CANCELAMENTO)
        If lErro <> SUCESSO Then gError 109934
    End If
    
    lErro = CF("Move_Tela_TituloPagar", objDevCheque, objTituloPagar, colParcelas)
    If lErro <> SUCESSO Then gError 109936
    
    lErro = CF("TituloPagar_Gravar_DevCheque", objTituloPagar, colParcelas)
    If lErro <> SUCESSO Then gError 109937
    
    objDevCheque.lNumIntTituloPag = objTituloPagar.lNumIntDoc
    objDevCheque.lNumIntBaixasParcRecCanc = lNumIntDoc
    
    'Libera comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Cancelar_Baixa_Cheque_Desc = SUCESSO
    
    Exit Function
    
Erro_Cancelar_Baixa_Cheque_Desc:

    Cancelar_Baixa_Cheque_Desc = gErr

    Select Case gErr

        Case 109924
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 109925
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECEDOR_NAO_PREENCHIDO", gErr)
            
        Case 109926
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FILIAL_FORNECEDOR_NAO_PREENCHIDA", gErr)
            
        Case 109927
            lErro = Rotina_Erro(vbOKOnly, "ERRO_VALORRECEBIDO_NAO_PREENCHIDO", gErr)
            
        Case 109928
            lErro = Rotina_Erro(vbOKOnly, "ERRO_DATAVENCIMENTO_NAO_PREENCHIDO", gErr)
            
        Case 109929, 109930
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BORDERODESCCHEQUE", gErr, objCheque.lNumBordero)
        
        Case 109931
            lErro = Rotina_Erro(vbOKOnly, "ERRO_BORDERODESCCHEQUE_NAO_EXISTENTE", gErr, objCheque.lNumBordero)
        
        Case 109932, 109933, 109934, 109936, 109937
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148406)

    End Select

    'Libera comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Function BaixaRecCancelar_Efetua(lNumIntBaixaCancItem As Long, ByVal objCheque As ClassChequePre, ByVal iTipo As Integer, ByVal sHistoricoCancelamento As String) As Long

Dim lErro As Long
Dim objBaixaRecCancelar As New ClassBaixaRecCancelar
Dim objInfoBaixaRecCancelar As New ClassInfoBaixaRecCancelar
Dim tInfoBaixaRecCancelar As typeInfoBaixaRecCancelar
Dim alComando(1 To 1) As Long
Dim iIndice As Integer, lNumIntParcRec As Long

On Error GoTo Erro_BaixaRecCancelar_Efetua

    'Abertura comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 126253
    Next

    With tInfoBaixaRecCancelar

        If objCheque.iLocalizacao <> CHEQUEPRE_LOCALIZACAO_EM_TERCEIROS Then
            'descobrir as baixas do cheque
'            lErro = Comando_Executar(alComando(1), "SELECT BaixasParcRec.NumIntDoc, CodConta, BaixasParcRec.NumIntBaixa, BaixasParcRec.Sequencial, BaixasParcRec.NumIntParcela, BaixasParcRec.ValorBaixado, BaixasParcRec.ValorDesconto, BaixasParcRec.ValorJuros, BaixasParcRec.ValorMulta, BaixasParcRec.ValorRecebido FROM MovimentosContaCorrente, BaixasRec, BaixasParcRec, ChequeParcelaRec WHERE Tipo = ? AND NumRefInterna = ? AND NumMovto=NumMovCta AND BaixasRec.NumIntBaixa=BaixasParcRec.NumIntBaixa AND ChequeParcelaRec.NumIntCheque = ? AND BaixasParcRec.NumIntParcela=ChequeParcelaRec.NumIntParcela AND ValorRecebido <= ? AND BaixasParcRec.Status <> ?", .lNumIntBaixaParcRec, .iCodConta, .lNumIntBaixa, .iSequencial, .lNumIntParcela, .dValorBaixadoCanc, .dValorDescontoCanc, .dValorJurosCanc, .dValorMultaCanc, .dValorBaixado, iTipo, objCheque.lNumBordero, objCheque.lNumIntCheque, objCheque.dValor, STATUS_EXCLUIDO)
             lErro = Comando_Executar(alComando(1), "SELECT BaixasParcRec.NumIntDoc, CodConta, BaixasParcRec.NumIntBaixa, BaixasParcRec.Sequencial, BaixasParcRec.NumIntParcela, BaixasParcRec.ValorBaixado, BaixasParcRec.ValorDesconto, BaixasParcRec.ValorJuros, BaixasParcRec.ValorMulta, BaixasParcRec.ValorRecebido FROM MovimentosContaCorrente, BaixasRec, BaixasParcRec, ChequeParcelaRec WHERE Tipo = ? AND NumRefInterna = ? AND NumMovto=NumMovCta AND BaixasRec.NumIntBaixa=BaixasParcRec.NumIntBaixa AND ChequeParcelaRec.NumIntCheque = ? AND BaixasParcRec.NumIntParcela=ChequeParcelaRec.NumIntParcela AND ChequeParcelaRec.ValorRecebto = BaixasParcRec.ValorRecebido  AND BaixasParcRec.Status <> ? ORDER BY BaixasParcRec.NumIntParcela", .lNumIntBaixaParcRec, .iCodConta, .lNumIntBaixa, .iSequencial, .lNumIntParcela, .dValorBaixadoCanc, .dValorDescontoCanc, .dValorJurosCanc, .dValorMultaCanc, .dValorBaixado, iTipo, objCheque.lNumBordero, objCheque.lNumIntCheque, STATUS_EXCLUIDO)
        
        '####################################################
        'Inserido por Wagner 21/06/2006
        'Cheque enviado para Terceiros não gera Bordero e nem movimentação de conta corrente
        Else
            lErro = Comando_Executar(alComando(1), "SELECT BaixasParcRec.NumIntDoc, 0, BaixasParcRec.NumIntBaixa, BaixasParcRec.Sequencial, BaixasParcRec.NumIntParcela, BaixasParcRec.ValorBaixado, BaixasParcRec.ValorDesconto, BaixasParcRec.ValorJuros, BaixasParcRec.ValorMulta, BaixasParcRec.ValorRecebido FROM BaixasRec, BaixasParcRec WHERE BaixasRec.NumIntBaixa=BaixasParcRec.NumIntBaixa AND BaixasRec.NumIntCheque = ? AND BaixasRec.FilialEmpresaCheque = ? AND BaixasParcRec.Status <> ?", .lNumIntBaixaParcRec, .iCodConta, .lNumIntBaixa, .iSequencial, .lNumIntParcela, .dValorBaixadoCanc, .dValorDescontoCanc, .dValorJurosCanc, .dValorMultaCanc, .dValorBaixado, objCheque.lNumIntCheque, objCheque.iFilialEmpresa, STATUS_EXCLUIDO)
        '####################################################
        End If
        
        If lErro <> AD_SQL_SUCESSO Then gError 109920
    
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109921
        
        'movimento naum existe
        If lErro = AD_SQL_SEM_DADOS Then gError 109922
            
        Do While lErro = AD_SQL_SUCESSO
            
            lNumIntParcRec = .lNumIntParcela
            
            Set objInfoBaixaRecCancelar = New ClassInfoBaixaRecCancelar
            
            objInfoBaixaRecCancelar.dValorDescontoCanc = .dValorDescontoCanc
            objInfoBaixaRecCancelar.dValorJurosCanc = .dValorJurosCanc
            objInfoBaixaRecCancelar.dValorMultaCanc = .dValorMultaCanc
            objInfoBaixaRecCancelar.dValorBaixadoCanc = .dValorBaixadoCanc
            objInfoBaixaRecCancelar.dValorTotalCanc = .dValorBaixado
            objInfoBaixaRecCancelar.dtDataCancelamento = gdtDataAtual
            objInfoBaixaRecCancelar.lNumIntParcela = .lNumIntParcela
            objInfoBaixaRecCancelar.iSequencial = .iSequencial
            objInfoBaixaRecCancelar.iItemSelecionado = MARCADO
            objInfoBaixaRecCancelar.lNumIntBaixa = .lNumIntBaixa
        
            objInfoBaixaRecCancelar.lNumIntBaixaParcRec = .lNumIntBaixaParcRec
            objInfoBaixaRecCancelar.iCodConta = .iCodConta
            
            If iTipo = MOVCCI_DEP_DEVOLUCAO_CHEQUE Or iTipo = MOVCCI_BORDERO_CHEQUE_PRE Then objBaixaRecCancelar.iTipoCancelamento = TIPOCONCELAMENTO_DEVCHQ
            
            If iTipo = MOVCCI_DEP_DESCONTO_CHEQUE Then objBaixaRecCancelar.iTipoCancelamento = TIPOCANCELAMENTO_EXC_BORD_CHEQUE
            
            If objCheque.iLocalizacao <> CHEQUEPRE_LOCALIZACAO_EM_TERCEIROS Then
                objBaixaRecCancelar.iTipoBaixas = MOTIVO_RECEBIMENTO
            Else
                objBaixaRecCancelar.iTipoBaixas = MOTIVO_CHEQUE_DE_TERCEIROS
                objBaixaRecCancelar.iTipoCancelamento = TIPOCONCELAMENTO_DEVCHQ
            End If
            objBaixaRecCancelar.dtDataCancelamento = gdtDataAtual
            objBaixaRecCancelar.sHistoricoCancelamento = sHistoricoCancelamento & objCheque.lSequencialBack
            
            objBaixaRecCancelar.colInfoBaixaRecCancelar.Add objInfoBaixaRecCancelar
                    
            'Com não tem uma ligação direta entre ChequeParcRec e BaixasParcRec cancela só o primeiro porque é um para um
            'Deu erro ao ter Cheques de mesmo valor no mesmo borderô e mesma parcela, aí o primeiro excluiu tudo e o segundo deu erro por falta de dados
            'Alterado por Wagner 17/02/2009
            If iTipo = MOVCCI_DEP_DESCONTO_CHEQUE Then Exit Do
                    
            lErro = Comando_BuscarProximo(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112045
            
            Do While lNumIntParcRec = .lNumIntParcela And lErro = AD_SQL_SUCESSO
            'O vinculo com o cheque é fraco e o select pode trazer baixas de outros cheques do mesmo boleto
            'quando vários cheques tem o mesmo valor vinculado a mesma parcela, por conta disso
            'e levando em conta que um cheque pode baixar uma mesma parcela apenas uma vez
            'esse código visa deixar cancelar apenas uma baixa por parcela\cheque
            'O ideal é que BaixasParceRec apontasse para o cheque que originou a baixa

                lErro = Comando_BuscarProximo(alComando(1))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112045

            Loop
                
        Loop
        
        'atualizar a conta Corrrente
        lErro = BaixaRecCancelar_BaixaBaixa_Grava(objBaixaRecCancelar)
        If lErro <> SUCESSO Then gError 109923
               
        lNumIntBaixaCancItem = objBaixaRecCancelar.lNumIntBaixaParcRecCanc
    
    End With
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    BaixaRecCancelar_Efetua = SUCESSO
    
    Exit Function
    
Erro_BaixaRecCancelar_Efetua:

    BaixaRecCancelar_Efetua = gErr

    Select Case gErr
        
        Case 109920, 109921, 112045
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BAIXASPARCREC", gErr)
        
        Case 109922
            Call Rotina_Erro(vbOKOnly, "ERRO_BAIXASPARCREC_NAO_EXISTENTE", gErr)
        
        Case 109923
        
        Case 126253
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148407)

    End Select
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Function DevChq_Atualizar_CCI_Dep(ByVal objDevCheque As ClassDevCheque, ByVal objCheque As ClassChequePre) As Long

Dim lErro As Long
Dim objMovContaCorrente As New ClassMovContaCorrente
Dim lComando As Long
Dim iCodigo As Long

On Error GoTo Erro_DevChq_Atualizar_CCI_Dep

    'Abertura comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 109943

    'descobrir a cci associado ao chequepre
    lErro = Comando_ExecutarPos(lComando, "SELECT Codigo FROM ContasCorrentesInternas WHERE ChequePre = ? AND FilialEmpresa = ?", 0, iCodigo, CONTA_CHEQUE_PRE, objCheque.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 109938

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109939

    'cci naum existe
    If lErro = AD_SQL_SEM_DADOS Then gError 109940

    'locka a Conta Corrente
    lErro = Comando_LockExclusive(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109941

    objMovContaCorrente.dtDataMovimento = objDevCheque.dtData
    objMovContaCorrente.dValor = objCheque.dValor
    objMovContaCorrente.iFilialEmpresa = objCheque.iFilialEmpresa
    objMovContaCorrente.iPortador = 0
    objMovContaCorrente.iCodConta = iCodigo
    objMovContaCorrente.iTipo = MOVCCI_DEP_DEVOLUCAO_CHEQUE
    objMovContaCorrente.iTipoMeioPagto = TIPOMEIOPAGTO_CHEQUE
    objMovContaCorrente.lNumRefInterna = objDevCheque.lNumIntDoc
    objMovContaCorrente.sHistorico = "Depósito por Devolução de Cheque."
    objMovContaCorrente.iConciliado = NAO_CONCILIADO
    objMovContaCorrente.iExcluido = MOVCONTACORRENTE_NAO_EXCLUIDO

    'Grava a CCI
    lErro = CF("MovCCI_Grava_PagRec", objMovContaCorrente)
    If lErro <> SUCESSO Then gError 109942

    Call Comando_Fechar(lComando)

    DevChq_Atualizar_CCI_Dep = SUCESSO

    Exit Function

Erro_DevChq_Atualizar_CCI_Dep:

    DevChq_Atualizar_CCI_Dep = gErr

    Select Case gErr

        Case 109938, 109939
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONTASCORRENTESINTERNAS", gErr)

        Case 109940
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CONTASCORRENTESINTERNAS_NAOENCONTRADA", gErr, 1)

        Case 109941
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_CONTASCORRENTESINTERNAS", gErr, 1)

        Case 109942

        Case 109943
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148408)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function DevChq_Atualizar_CCI_Saq(ByVal objDevCheque As ClassDevCheque, ByVal objCheque As ClassChequePre) As Long

Dim lErro As Long
Dim objMovContaCorrente As New ClassMovContaCorrente
Dim lComando As Long
Dim iFilial As Integer

On Error GoTo Erro_DevChq_Atualizar_CCI_Saq

    'Abertura comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 109949
    
    'descobrir a cci associado ao chequepre
    lErro = Comando_ExecutarPos(lComando, "SELECT FilialEmpresa FROM ContasCorrentesInternas WHERE Codigo = ?", 0, iFilial, objDevCheque.iContaCorrente)
    If lErro <> AD_SQL_SUCESSO Then gError 109944

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109945
    
    'cci naum existe
    If lErro = AD_SQL_SEM_DADOS Then gError 109946
    
    'locka a Conta Corrente
    lErro = Comando_LockExclusive(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109947
    
    objMovContaCorrente.dtDataMovimento = objDevCheque.dtData
    objMovContaCorrente.dValor = objCheque.dValor
    objMovContaCorrente.iFilialEmpresa = iFilial
    objMovContaCorrente.iPortador = 0
    objMovContaCorrente.iCodConta = objDevCheque.iContaCorrente
    objMovContaCorrente.iTipo = MOVCCI_SAQ_DEVOLUCAO_CHEQUE
    objMovContaCorrente.iTipoMeioPagto = TIPOMEIOPAGTO_CHEQUE
    objMovContaCorrente.lNumRefInterna = objDevCheque.lNumIntDoc
    objMovContaCorrente.sHistorico = "Saque por Devolução de Cheque."
    objMovContaCorrente.iConciliado = NAO_CONCILIADO
    objMovContaCorrente.iExcluido = MOVCONTACORRENTE_NAO_EXCLUIDO
    
    'Grava a CCI
    lErro = CF("MovCCI_Grava_PagRec", objMovContaCorrente)
    If lErro <> SUCESSO Then gError 109948
    
    Call Comando_Fechar(lComando)
    
    DevChq_Atualizar_CCI_Saq = SUCESSO
    
    Exit Function
    
Erro_DevChq_Atualizar_CCI_Saq:

    DevChq_Atualizar_CCI_Saq = gErr

    Select Case gErr
        
        Case 109944, 109945
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONTASCORRENTESINTERNAS", gErr)
        
        Case 109946
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CONTASCORRENTESINTERNAS_NAOENCONTRADA", gErr, objDevCheque.iContaCorrente)
        
        Case 109947
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_CONTASCORRENTESINTERNAS", gErr, objDevCheque.iContaCorrente)
        
        Case 109948
                
        Case 109949
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148409)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function TituloPagar_Gravar_DevCheque(ByVal objTituloPagar As ClassTituloPagar, ByVal colParcelas As colParcelaPagar) As Long

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim lNumIntDoc As Long
Dim objFilialFornecedor As New ClassFilialFornecedor
Dim lNumIntDocTit As Long
Dim objParcelaPag As ClassParcelaPagar

On Error GoTo Erro_TituloPagar_Gravar_DevCheque

    'Abertura comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 109953
    
    'Abertura comandos
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 109965
    
    'Verifica se já exsite título
    lErro = Comando_ExecutarPos(lComando, "SELECT NumIntDoc FROM TitulosPag WHERE Fornecedor = ? AND Filial = ? AND NumTitulo = ? AND DataEmissao = ? AND SiglaDocumento = ? AND Status <> ?", 0, lNumIntDoc, objTituloPagar.lFornecedor, objTituloPagar.iFilial, objTituloPagar.lNumTitulo, objTituloPagar.dtDataEmissao, objTituloPagar.sSiglaDocumento, EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then gError 109954

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109955
    
    'se estiver cadastrado --> erro.
    If lErro = AD_SQL_SUCESSO Then gError 109956
    
    objFilialFornecedor.lCodFornecedor = objTituloPagar.lFornecedor
    objFilialFornecedor.iCodFilial = objTituloPagar.iFilial
    
    'locka a filial do fornecedor
    lErro = CF("FilialFornecedor_Lock1", objFilialFornecedor)
    If lErro <> AD_SQL_SUCESSO And lErro <> 18900 Then gError 109957
    
    'não existe filial
    If lErro = 18900 Then gError 109958
    
    'gera o numintdoc
    lErro = CF("TituloPagar_Automatico", lNumIntDocTit)
    If lErro <> AD_SQL_SUCESSO And lErro <> 18900 Then gError 109959
    
    objTituloPagar.lNumIntDoc = lNumIntDocTit
    objTituloPagar.dtDataRegistro = gdtDataHoje
    objTituloPagar.dSaldo = objTituloPagar.dValorTotal
    
    With objTituloPagar
    
    'Insere o título
    lErro = Comando_Executar(lComando1, "INSERT INTO TitulosPag (NumIntDoc, FilialEmpresa, Fornecedor, Filial, SiglaDocumento, NumTitulo, DataEmissao, Status, Saldo, NumParcelas, ValorTotal, ValorSeguro, ValorFrete, OutrasDespesas, ValorProdutos, ValorICMS, ValorICMSSubst, CreditoICMS, ValorIPI, CreditoIPI, ValorIRRF, ValorINSS, INSSRetido, Observacao, FilialPedCompra, NumPedCompra, DataRegistro, CondicaoPagto, PISRetido, ISSRetido, COFINSRetido, CSLLRetido, TaxaMoeda) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", .lNumIntDoc, .iFilialEmpresa, .lFornecedor, .iFilial, .sSiglaDocumento, .lNumTitulo, .dtDataEmissao, .iStatus, .dSaldo, .iNumParcelas, .dValorTotal, .dValorSeguro, .dValorFrete, .dOutrasDespesas, .dValorProdutos, .dValorICMS, .dValorICMSSubst, .iCreditoICMS, .dValorIPI, .iCreditoIPI, .dValorIRRF, .dValorINSS, .iINSSRetido, .sObservacao, .iFilialPedCompra, .lNumPedCompra, .dtDataRegistro, .iCondicaoPagto, _
        .dPISRetido, .dISSRetido, .dCOFINSRetido, .dCSLLRetido, .dTaxaMoeda)
    If lErro <> AD_SQL_SUCESSO Then gError 109960
    
    End With
    
    For Each objParcelaPag In colParcelas
        
        objParcelaPag.lNumIntTitulo = objTituloPagar.lNumIntDoc
            
    Next
    
    lErro = CF("ParcelasPagar_Grava", colParcelas)
    If lErro <> SUCESSO Then gError 109961

    Call Comando_Fechar(lComando)
    
    TituloPagar_Gravar_DevCheque = SUCESSO
    
    Exit Function
    
Erro_TituloPagar_Gravar_DevCheque:

    TituloPagar_Gravar_DevCheque = gErr

    Select Case gErr
        
        Case 109953, 109965
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 109954, 109955
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TITULOSPAG", gErr, lNumIntDoc)
        
        Case 109956
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TITULOSPAG_NAO_EXISTENTE", gErr, lNumIntDoc)
        
        Case 109958
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FILIALFORNECEDOR_NAO_CADASTRADA", gErr, objFilialFornecedor.iCodFilial, objFilialFornecedor.lCodFornecedor)
        
        Case 109957, 109959, 109961
               
        Case 109960
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_TITULO_PAGAR1", gErr, objTituloPagar.lNumTitulo)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148410)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function DevolucaoCheque_Exclui(ByVal objDevCheque As ClassDevCheque, ByVal objContabil As ClassContabil) As Long

Dim lTransacao As Long
Dim lErro As Long

On Error GoTo Erro_DevolucaoCheque_Exclui
    
    'Entra em transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 109973
    
    lErro = CF("DevolucaoCheque_Exclui_EmTrans", objDevCheque, objContabil)
    If lErro <> SUCESSO Then gError 112052
       
    'Confirma transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 109986
    
    DevolucaoCheque_Exclui = SUCESSO
    
    Exit Function
    
Erro_DevolucaoCheque_Exclui:

    DevolucaoCheque_Exclui = gErr

    Select Case gErr
        
        Case 109973
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
        
        Case 109986
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case 112052
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148411)

    End Select

    Call Transacao_Rollback
        
    Exit Function
    
End Function

Function DevolucaoCheque_Exclui_EmTrans(ByVal objDevCheque As ClassDevCheque, ByVal objContabil As ClassContabil) As Long

Dim lErro As Long
Dim alComando(1 To 4) As Long
Dim lNumMovto As Long
Dim iIndice As Integer
Dim objMovCCI As New ClassMovContaCorrente
Dim objTituloPagar As New ClassTituloPagar
Dim objChequePre As New ClassChequePre
Dim objChequeBordero As New ClassChequeBordero
Dim bChequeEmTerceiros As Boolean

On Error GoTo Erro_DevolucaoCheque_Exclui_EmTrans
    
    'Abertura comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 109972
    Next
    
    lErro = CF("DevCheque_Lock", objDevCheque, alComando(3))
    If lErro <> SUCESSO And lErro <> 109991 Then gError 109974
    
    'se naum existe cheque devolvido com este código --> erro.
    If lErro = 109991 Then gError 109975
    
    'Se a devolução for relativa a um bordero
    If objDevCheque.lNumIntChqBord <> 0 Then
    
        objChequeBordero.iFilialEmpresa = objDevCheque.iFilialEmpresa
        objChequeBordero.lNumIntDoc = objDevCheque.lNumIntChqBord
            
        'Le o ChequeBordero
        lErro = CF("ChequeBordero_Le", objChequeBordero)
        If lErro <> SUCESSO And lErro <> 126258 Then gError 126259
        
        'se nao encontrou o chequebordero ==> erro
        If lErro <> SUCESSO Then gError 126260
        
        objChequePre.iFilialEmpresa = objChequeBordero.iFilialEmpresa
        objChequePre.lNumIntCheque = objChequeBordero.lNumIntCheque
        
        bChequeEmTerceiros = False
        
    Else
    'Devolução de Cheque em terceiros
    
        objChequePre.iFilialEmpresa = objDevCheque.iFilialEmpresa
        objChequePre.lNumIntCheque = objDevCheque.lNumIntCheque
        
        bChequeEmTerceiros = True
    
    End If
    
    'Loca o ChequePre associado a objChequeBordero . Devolve os dados em objChequePre
    lErro = CF("ChequePre_Lock", objChequePre)
    If lErro <> SUCESSO And lErro <> 126264 Then gError 126266
    
    'se nao encontrou o cheque  ==> erro
    If lErro <> SUCESSO Then gError 126267
    
    'se o cheque nao estiver no backoffice ==> erro
    If objChequePre.iLocalizacao <> CHEQUEPRE_LOCALIZACAO_BACKOFFICE Then gError 126261
    
    If Not bChequeEmTerceiros Then
    
        'verifica se existem registros relativos ao cheque em questao com numintdoc maior que o passado como parametro
        lErro = CF("ChequeBordero_Le_Maior", objChequeBordero)
        If lErro <> SUCESSO And lErro <> 126271 Then gError 126272
        
        'se existirem chequebordero posterior ao da devolucao ==>
        'o cheque já foi enviado por outro bordero posteriormente ==>
        'a devolucao não pode ser excluida
        If lErro <> SUCESSO Then gError 126273
    
        'descobrir o movimento de cci associado a devolução de cheque
        lErro = Comando_Executar(alComando(1), "SELECT NumMovto FROM MovimentosContaCorrente WHERE Tipo = ? AND NumRefInterna = ?", lNumMovto, MOVCCI_SAQ_DEVOLUCAO_CHEQUE, objDevCheque.lNumIntDoc)
    
    Else
    
        'descobrir o movimento de cci associado a devolução de cheque
        lErro = Comando_Executar(alComando(1), "SELECT NumMovto FROM MovimentosContaCorrente WHERE Tipo = ? AND NumRefInterna = ?", lNumMovto, MOVCCI_DEVOLUCAO_CHEQUES_TERCEIROS, objDevCheque.lNumIntDoc)
    
    End If
    
    If lErro <> AD_SQL_SUCESSO Then gError 109976

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109977
    
    'movimento naum existe
    If lErro = AD_SQL_SEM_DADOS Then gError 109987
       
    objMovCCI.lNumMovto = lNumMovto
    
    lErro = CF("MovCCI_Exclui_EmTransacao_1", objMovCCI)
    If lErro <> SUCESSO Then gError 109978
    
    If Not bChequeEmTerceiros Then
    
        'descobrir o movimento de cci associado a devolução de cheque
        lErro = Comando_Executar(alComando(2), "SELECT NumMovto FROM MovimentosContaCorrente WHERE Tipo = ? AND NumRefInterna = ?", lNumMovto, MOVCCI_DEP_DEVOLUCAO_CHEQUE, objDevCheque.lNumIntDoc)
        If lErro <> AD_SQL_SUCESSO Then gError 126168
    
        lErro = Comando_BuscarPrimeiro(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126169
        
        'movimento naum existe
        If lErro = AD_SQL_SEM_DADOS Then gError 126170
           
        objMovCCI.lNumMovto = lNumMovto
        
        lErro = CF("MovCCI_Exclui_EmTransacao_1", objMovCCI)
        If lErro <> SUCESSO Then gError 126171
  
    End If
  
    'verifica se tem alguma parcela relacionada
    If objDevCheque.lNumIntBaixasParcRecCanc <> 0 Then
        lErro = CF("BaixaParcRec_Cancelar_Exclui", objDevCheque.lNumIntBaixasParcRecCanc)
        If lErro <> SUCESSO Then gError 109983
    End If
    
    'verifica se tem algum título relacionado
    If objDevCheque.lNumIntTituloPag <> 0 Then
    
        objTituloPagar.lNumIntDoc = objDevCheque.lNumIntTituloPag
        objTituloPagar.sSiglaDocumento = TIPODOC_DEV_CHQ
        objTituloPagar.iExclusao = 1
        
        lErro = CF("TituloPagar_Exclui_EmTransacao", objTituloPagar, Nothing)
        If lErro <> SUCESSO Then gError 109984
    End If
    
    If bChequeEmTerceiros Then
        'Tem que excluir a parcela a pagar
        lErro = BaixaParcPag_ChequePre_Cancelar_Exclui(objDevCheque, objChequePre)
        If lErro <> SUCESSO Then gError 109983
    End If
    
    lErro = objContabil.Contabil_Exclui(objDevCheque.lNumIntDoc, CONTABIL_EXCLUI_EFETIVO)
    If lErro <> SUCESSO Then gError 109985
        
    'deletar a devolucao
    lErro = Comando_ExecutarPos(alComando(4), "Delete From DevolucaoCheque", alComando(3))
    If lErro <> AD_SQL_SUCESSO Then gError 109979
    
    If Not bChequeEmTerceiros Then
        'atualiza a localizacao do cheque passado como parametro
        lErro = ChequePre_Altera_Localizacao(objChequePre, CHEQUEPRE_LOCALIZACAO_BANCO)
    Else
        'atualiza a localizacao do cheque passado como parametro
        lErro = ChequePre_Altera_Localizacao(objChequePre, CHEQUEPRE_LOCALIZACAO_EM_TERCEIROS)
    End If
    If lErro <> SUCESSO Then gError 110116
        
    'exclui os movimentos de caixa correspondentes a devolucao de cheque
    lErro = Movcx_Exclui_DevCheque(objDevCheque, objChequePre)
    If lErro <> SUCESSO Then gError 126222
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    DevolucaoCheque_Exclui_EmTrans = SUCESSO
    
    Exit Function
    
Erro_DevolucaoCheque_Exclui_EmTrans:

    DevolucaoCheque_Exclui_EmTrans = gErr

    Select Case gErr

        Case 109972
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 109974, 109978, 109982 To 109985, 110116, 126171, 126222, 126259, 126266
        
        Case 109975
            Call Rotina_Erro(vbOKOnly, "ERRO_NAO_EXISTE_DEVCHEQUE", gErr, objDevCheque.lNumIntDoc)
        
        Case 109976, 109977, 126168, 126169
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCONTACORRENTE", gErr)

        Case 109987, 126170
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCONTACORRENTE_NAO_EXISTE", gErr)
        
        Case 126260
            Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEBORDERO_NAO_ENCONTRADO1", gErr, objChequeBordero.iFilialEmpresa, objChequeBordero.lNumIntDoc)
        
        Case 126261
            Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPRE_NAOENCONTRADO_BACKOFFICE", gErr, objChequePre.lSequencialBack)
        
        Case 126267
            Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPRE_NAO_CADASTRADO", gErr, objChequePre.lNumIntCheque)
        
        Case 126273
            Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEBORDERO_POSTERIOR", gErr)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148412)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
        
    Exit Function

End Function

Private Function Movcx_Exclui_DevCheque(ByVal objDevCheque As ClassDevCheque, ByVal objChequePre As ClassChequePre) As Long
'exclui os movimentos de caixa correspondentes a devolucao de cheque

Dim lErro As Long
Dim alComando(1 To 2) As Long
Dim iIndice As Integer
Dim objCCMovDia As New ClassCCMovDia
Dim objTipoMeioPagtoLojaFilial As New ClassTMPLojaFilial
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim tMovCx As typeMovimentoCaixa
Dim objMovCx As New ClassMovimentoCaixa

On Error GoTo Erro_Movcx_Exclui_DevCheque

    If objChequePre.lSequencialLoja <> 0 And giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL_BACKOFFICE Then

        For iIndice = LBound(alComando) To UBound(alComando)
            alComando(iIndice) = Comando_Abrir()
            If alComando(iIndice) = 0 Then gError 126208
        Next
    
        If objChequePre.lNumIntCheque = 0 Then
            'selecionar os registros da tabela de MovimentosCaixa referente a saida de dinheiro do caixa que está sendo excluida
            lErro = Comando_ExecutarPos(alComando(1), "SELECT NumMovto, Tipo, AdmMeioPagto, Parcelamento, DataMovimento, Valor, NumIntDocLog, QuantLog FROM MovimentosCaixa WHERE FilialEmpresa = ? AND Tipo = ? AND NumRefInterna = ?", 0, tMovCx.lNumMovto, tMovCx.iTipo, tMovCx.iAdmMeioPagto, tMovCx.iParcelamento, tMovCx.dtDataMovimento, tMovCx.dValor, tMovCx.lNumIntDocLog, tMovCx.iQuantLog, objDevCheque.iFilialEmpresa, MOVIMENTOCAIXA_BORDERO_DEVOL_CHEQUE, objDevCheque.lCodigo)
        Else
            'selecionar os registros da tabela de MovimentosCaixa referente a saida de dinheiro do caixa que está sendo excluida
            lErro = Comando_ExecutarPos(alComando(1), "SELECT NumMovto, Tipo, AdmMeioPagto, Parcelamento, DataMovimento, Valor, NumIntDocLog, QuantLog FROM MovimentosCaixa WHERE FilialEmpresa = ? AND Tipo = ? AND NumRefInterna = ?", 0, tMovCx.lNumMovto, tMovCx.iTipo, tMovCx.iAdmMeioPagto, tMovCx.iParcelamento, tMovCx.dtDataMovimento, tMovCx.dValor, tMovCx.lNumIntDocLog, tMovCx.iQuantLog, objDevCheque.iFilialEmpresa, MOVIMENTOCAIXA_DEVOLUCAO_CHEQUES_TERCEIROS, objDevCheque.lNumIntCheque)
        End If
        If lErro <> AD_SQL_SUCESSO Then gError 126209
    
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126210
    
        If lErro = AD_SQL_SEM_DADOS Then gError 126211
        
        objMovCx.iFilialEmpresa = objDevCheque.iFilialEmpresa
        objMovCx.iTipo = tMovCx.iTipo
        objMovCx.iAdmMeioPagto = tMovCx.iAdmMeioPagto
        objMovCx.iParcelamento = tMovCx.iParcelamento
        objMovCx.dtDataMovimento = tMovCx.dtDataMovimento
        objMovCx.dValor = tMovCx.dValor
        objMovCx.lNumMovto = tMovCx.lNumMovto
        
        'preenche um objccmovdia com os dados do movimento de saque do caixa
        lErro = CF("Mover_Dados_Saque_CCMovDia", objMovCx, objCCMovDia)
        If lErro <> SUCESSO Then gError 126212
    
        objCCMovDia.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_CHEQUE
    
        'subtrai o mesmo no consolidado diário
        lErro = CF("CCMovDia_Exclui", objCCMovDia)
        If lErro <> SUCESSO Then gError 126213
    
        'subtrai o mesmo no consolidado anual no mês em questão
        lErro = CF("CCMov_Exclui", objCCMovDia)
        If lErro <> SUCESSO Then gError 126214
    
        lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM MovimentosCaixa", alComando(1))
        If lErro <> AD_SQL_SUCESSO Then gError 126215
    
        If objChequePre.iNaoEspecificado = CHEQUE_NAO_ESPECIFICADO Then
    
            objTipoMeioPagtoLojaFilial.dSaldo = -objChequePre.dValor
            objTipoMeioPagtoLojaFilial.iFilialEmpresa = objMovCx.iFilialEmpresa
    
            'mover Meio_pagamento_Dineiro para objtipomeiopagtoloja.itipo
            objTipoMeioPagtoLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_CHEQUE
    
            'altera o saldo atual na tabela de tipomeiopagtoloja
            lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTipoMeioPagtoLojaFilial)
            If lErro <> SUCESSO Then gError 126216
    
        Else
    
            'Mover Valor dos Cheques Especificados para admMeioPagtoCondPagto.Saldo
            objAdmMeioPagtoCondPagto.dSaldo = -objChequePre.dValor
    
            'Vincula-se ao Meio_Pagamento_Cheque para o AdmMeioPagtoCondPagto.iAdmMeioPagto
            objAdmMeioPagtoCondPagto.iAdmMeioPagto = MEIO_PAGAMENTO_CHEQUE
    
            'Vincula-se ao Pagamento_Avista para o AdmMeioPagtoCondPagto.parcelamento
            objAdmMeioPagtoCondPagto.iParcelamento = PARCELAMENTO_AVISTA
    
            'Vincula-se FilialEmpresa a o Meio de Pagamento
            objAdmMeioPagtoCondPagto.iFilialEmpresa = objMovCx.iFilialEmpresa
    
            'Função para Alteração de Saldo
            lErro = CF("AdmMeioPagtoCondPagto_Altera_Saldo", objAdmMeioPagtoCondPagto)
            If lErro <> SUCESSO Then gError 126217
    
        End If
    
        For iIndice = LBound(alComando) To UBound(alComando)
            Call Comando_Fechar(alComando(iIndice))
        Next

    End If

    Movcx_Exclui_DevCheque = SUCESSO

    Exit Function

Erro_Movcx_Exclui_DevCheque:

    Movcx_Exclui_DevCheque = gErr

    Select Case gErr

        Case 126208
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 126209, 126210
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVCAIXA1", gErr, objDevCheque.iFilialEmpresa, MOVIMENTOCAIXA_BORDERO_DEVOL_CHEQUE, objDevCheque.lCodigo)

        Case 126211
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOCAIXA_NAO_CADASTRADO1", gErr)

        Case 126212 To 126214, 126216 To 126217

        Case 126215
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_MOVIMENTOSCAIXA", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148413)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function


Function MovCCI_Exclui_EmTransacao_1(ByVal objMovCCI As ClassMovContaCorrente) As Long
'Le os cheques devolvidos

Dim alComando(1 To 3) As Long
Dim lErro As Long
Dim tCCi As typeMovContaCorrente
Dim iCredito As Integer
Dim iIndice As Integer

On Error GoTo Erro_MovCCI_Exclui_EmTransacao_1

    'Abertura comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 109993
    Next
    
    With tCCi
    
    'ler o movimento de cci associado a devolução de cheque
    lErro = Comando_ExecutarPos(alComando(1), "SELECT CodConta, DataMovimento, Valor, Tipo, Excluido FROM MovimentosContaCorrente WHERE NumMovto = ?", 0, .iCodConta, .dtDataMovimento, .dValor, .iTipo, .iExcluido, objMovCCI.lNumMovto)
    If lErro <> AD_SQL_SUCESSO Then gError 109994

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109995
    
    'movimento naum existe
    If lErro = AD_SQL_SEM_DADOS Then gError 109996
     
    'faz lock
    lErro = Comando_LockExclusive(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109997
    
    'se já tiver sido excluído --> erro.
    If .iExcluido = MOVCONTACORRENTE_EXCLUIDO Then gError 109998
      
    'deleta o movimento de cci
    lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM MovimentosContaCorrente", alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 109999
    
    'ler o TiposMovtoCtaCorrente com o tipo de CCI
    lErro = Comando_ExecutarPos(alComando(3), "SELECT Credito FROM TiposMovtoCtaCorrente WHERE Codigo = ?", 0, iCredito, .iTipo)
    If lErro <> AD_SQL_SUCESSO Then gError 112004

    lErro = Comando_BuscarPrimeiro(alComando(3))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112002
    
    'naum existe --> erro.
    If lErro = AD_SQL_SEM_DADOS Then gError 112003
    
    'se for de débito --> coloca valor negativo
    If iCredito <> CREDITO Then .dValor = -.dValor
        
    lErro = CF("CCIMovDia_Exclui", .iCodConta, .dtDataMovimento, .dValor)
    If lErro <> SUCESSO Then gError 112005
    
    lErro = CF("CCIMov_Exclui", .iCodConta, Year(.dtDataMovimento), Month(.dtDataMovimento), .dValor)
    If lErro <> SUCESSO Then gError 112006
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
        
    End With
    
    MovCCI_Exclui_EmTransacao_1 = SUCESSO

    Exit Function

Erro_MovCCI_Exclui_EmTransacao_1:

    MovCCI_Exclui_EmTransacao_1 = gErr

    Select Case gErr

        Case 109993
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 109994, 109995
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCONTACORRENTE", gErr)

        Case 109996
            lErro = Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCONTACORRENTE_NAO_EXISTE", gErr)
        
        Case 109997
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_MOVIMENTOSCONTACORRENTE", gErr)
        
        Case 109999
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_MOVIMENTOSCONTACORRENTE", gErr)
        
        Case 109998
            lErro = Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCONTACORRENTE_JA_EXCLUIDO", gErr)
        
        Case 112002, 112004
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCONTACORRENTE", gErr)

        Case 112003
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TIPOSMOVTOCTACORRENTE_NAO_EXISTE", gErr)
        
        Case 112005, 112006
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148414)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function BaixaParcRec_Cancelar_Exclui(ByVal lNumIntBaixa As Long) As Long
'cancelar as parcelas recebidas

Dim alComando(1 To 19) As Long
Dim lErro As Long
Dim tBaixasParcRecCanc As typeBaixaParcPag
Dim dTotal As Double
Dim lNumIntDoc As Long
Dim dSaldo As Double
Dim iStatus As Integer
Dim dNovoSaldo As Double
Dim lNumIntTitulo As Long
Dim tTitulosRec As typeTituloReceber
Dim tParcelasRec As typeParcelaReceber
Dim objCarteiraCobrador As New ClassCarteiraCobrador
Dim objBaixaParcRec As New ClassBaixaParcRec
Dim objBaixaReceber As New ClassBaixaReceber
Dim iNumParcela As Integer
Dim dtData As Date
Dim iIndice As Integer
Dim lNumIntBaixasRec As Long

On Error GoTo Erro_BaixaParcRec_Cancelar_Exclui

    'Abertura comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 112007
    Next
    
    With tBaixasParcRecCanc
    
        'ler a tabela baixasParcReccancitem
        lErro = Comando_ExecutarPos(alComando(1), "SELECT TotalCancelado, ValorBaixadoCancelado, JurosCancelado, MultaCancelada, DescontoCancelado, NumIntBaixaParcRec FROM BaixasParcRecCancItem WHERE NumIntCancelamento = ?", 0, dTotal, .dValorBaixado, .dValorJuros, .dValorMulta, .dValorDesconto, .lNumIntBaixa, lNumIntBaixa)
        If lErro <> AD_SQL_SUCESSO Then gError 112008
    
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112009
        
        'naum existe
        If lErro = AD_SQL_SEM_DADOS Then gError 112010
     
    End With
    
    'enquanto achar baixas
    Do While lErro = AD_SQL_SUCESSO
        
        'ler a tabela baixasParcRec
        lErro = Comando_ExecutarPos(alComando(2), "SELECT NumIntParcela, NumIntBaixa FROM BaixasParcRec WHERE NumIntDoc = ?", 0, lNumIntDoc, lNumIntBaixasRec, tBaixasParcRecCanc.lNumIntBaixa)
        If lErro <> AD_SQL_SUCESSO Then gError 112011
        
        lErro = Comando_BuscarPrimeiro(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112012
         
        'naum existe
        If lErro = AD_SQL_SEM_DADOS Then gError 112013
         
        objBaixaParcRec.lNumIntParcela = lNumIntDoc
        
        'faz lock de baixasparcrec
        lErro = Comando_LockExclusive(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112014
              
        With tBaixasParcRecCanc
        
            'alterar o baixasparcrec
            lErro = Comando_ExecutarPos(alComando(3), "UPDATE BaixasParcRec SET Status=?, DataCancelamento=?, ValorMulta=ValorMulta + ?, ValorJuros=ValorJuros + ?, ValorDesconto = ValorDesconto + ?, ValorBaixado = ValorBaixado + ?, ValorRecebido = ValorRecebido + ? , DataRegCancelamento = ?, HoraRegCancelamento = ?", alComando(2), STATUS_LANCADO, DATA_NULA, .dValorMulta, .dValorJuros, .dValorDesconto, .dValorBaixado, dTotal, DATA_NULA, 0)
            If lErro <> AD_SQL_SUCESSO Then gError 112015
                    
            iNumParcela = 0
            
            'ler a tabela ParcelasRec
            lErro = Comando_ExecutarPos(alComando(4), "SELECT NumIntTitulo, Saldo, Status FROM ParcelasRec WHERE NumIntDoc = ?", 0, lNumIntTitulo, dSaldo, iStatus, lNumIntDoc)
            If lErro <> AD_SQL_SUCESSO Then gError 112016
            
            lErro = Comando_BuscarPrimeiro(alComando(4))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112017
        
        End With
        
        'se encontrar...
        If lErro = AD_SQL_SUCESSO Then
            
            With tBaixasParcRecCanc
            
                'calcula o novo saldo
                dNovoSaldo = dSaldo - .dValorBaixado
                'se o novo saldo for zero --> status_baixado
                If dNovoSaldo < DELTA_VALORMONETARIO Then iStatus = STATUS_BAIXADO
                iNumParcela = -1
                    
                'ler a tabela BaixasRec para pegar a data
                lErro = Comando_ExecutarPos(alComando(17), "SELECT Data FROM BaixasRec WHERE NumIntBaixa = ?", 0, dtData, lNumIntBaixasRec)
                If lErro <> AD_SQL_SUCESSO Then gError 112039
                
                lErro = Comando_BuscarPrimeiro(alComando(17))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112040
                    
                'se naum existe
                If lErro = AD_SQL_SEM_DADOS Then gError 112041
                
                objBaixaReceber.dtData = dtData
                
                If dNovoSaldo < DELTA_VALORMONETARIO Then
                    lErro = BaixaParcRec_LiberaComissoes(objBaixaParcRec, objBaixaReceber.dtData, alComando(16), alComando(19))
                    If lErro <> SUCESSO Then gError 112018
                End If
                
                'alterar o parcelascrec
                lErro = Comando_ExecutarPos(alComando(5), "UPDATE ParcelasRec SET Status=?, Saldo=?", alComando(4), iStatus, dNovoSaldo)
                If lErro <> AD_SQL_SUCESSO Then gError 112019
        
            End With
            
            With tTitulosRec
            
                .sSiglaDocumento = String(STRING_SIGLA_DOCUMENTO, 0)
                .sObservacao = String(STRING_CREDITOSPAGFORN_OBSERVACAO, 0)
                .sCcl = String(STRING_CCL, 0)
                .sNatureza = String(STRING_NATMOVCTA_CODIGO, 0)
                
                'ler a tabela TitulosRec
                lErro = Comando_ExecutarPos(alComando(6), "SELECT NumIntDoc, FilialEmpresa, Cliente, Filial, SiglaDocumento, NumTitulo, DataEmissao, Status, Saldo, NumParcelas, Valor, ValorIRRF, ValorISS, ISSRetido, ValorINSS, INSSRetido, PercJurosDiarios, PercMulta, Observacao, CondicaoPagto, DataRegistro, Especie, PISRetido, ISSRetido, COFINSRetido, CSLLRetido, Moeda, Ccl, Natureza, CpoGenerico1, ReajustePeriodicidade, ReajusteBase, ReajustadoAte FROM TitulosRec WHERE NumIntDoc = ?", 0, .lNumIntDoc, .iFilialEmpresa, .lCliente, .iFilial, .sSiglaDocumento, .lNumTitulo, .dtDataEmissao, .iStatus, .dSaldo, .iNumParcelas, .dValor, .dValorIRRF, .dValorISS, .dISSRetido, .dValorINSS, .iINSSRetido, .dPercJurosDiario, .dPercMulta, .sObservacao, .iCondicaoPagto, .dtDataRegistro, .iEspecie, .dPISRetido, .dISSRetido, .dCOFINSRetido, .dCSLLRetido, .iMoeda, .sCcl, .sNatureza, .lCpoGenerico1, .iReajustePeriodicidade, .dtReajusteBase, .dtReajustadoAte, lNumIntTitulo)
                If lErro <> AD_SQL_SUCESSO Then gError 112020
                
                lErro = Comando_BuscarPrimeiro(alComando(6))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112021
                
                'naum existe
                If lErro = AD_SQL_SEM_DADOS Then gError 112022
            
                'calcula o novo saldo
                dNovoSaldo = .dSaldo - tBaixasParcRecCanc.dValorBaixado
            
            End With
            
            'se o novo saldo for maior q zero --> atualiza
            If dNovoSaldo > DELTA_VALORMONETARIO Then
                'alterar o Titulosrec
                lErro = Comando_ExecutarPos(alComando(7), "UPDATE TitulosRec SET Saldo=?", alComando(6), dNovoSaldo)
                If lErro <> AD_SQL_SUCESSO Then gError 112023
            Else
            
                With tTitulosRec
                
                    .dSaldo = 0
                    'insere o registro da tabela TitulosRec em TitulosRecbaixado
                    lErro = Comando_Executar(alComando(8), "INSERT INTO TitulosRecBaixados (NumIntDoc, FilialEmpresa, Cliente, Filial, SiglaDocumento, NumTitulo, DataEmissao, Status, Saldo, NumParcelas, Valor, ValorIRRF, ValorISS, ValorINSS, INSSRetido, PercJurosDiarios, PercMulta, Observacao, CondicaoPagto, DataRegistro, Especie, PISRetido, ISSRetido, COFINSRetido, CSLLRetido, Moeda, Ccl, Natureza, CpoGenerico1, ReajustePeriodicidade, ReajusteBase, ReajustadoAte) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ", .lNumIntDoc, .iFilialEmpresa, .lCliente, .iFilial, .sSiglaDocumento, .lNumTitulo, .dtDataEmissao, .iStatus, .dSaldo, .iNumParcelas, .dValor, .dValorIRRF, .dValorISS, .dValorINSS, .iINSSRetido, .dPercJurosDiario, .dPercMulta, .sObservacao, .iCondicaoPagto, .dtDataRegistro, .iEspecie, .dPISRetido, .dISSRetido, .dCOFINSRetido, .dCSLLRetido, .iMoeda, .sCcl, .sNatureza, .lCpoGenerico1, .iReajustePeriodicidade, .dtReajusteBase, .dtReajustadoAte)
                    If lErro <> AD_SQL_SUCESSO Then gError 112024
                        
                End With
                
                lErro = Comando_ExecutarPos(alComando(9), "DELETE FROM TitulosRec", alComando(6))
                If lErro <> AD_SQL_SUCESSO Then gError 112025
                        
                With tParcelasRec
                
                    .sNumTitCobrador = String(STRING_USUARIO_NOMEREDUZIDO, 0)
                    
                    'ler a tabela ParcelasRec
                    lErro = Comando_ExecutarPos(alComando(10), "SELECT NumIntDoc, NumIntTitulo, NumParcela, Status, DataVencimento, DataVencimentoReal, Valor, Cobrador, CarteiraCobranca, NumTitCobrador, ProxSeqBaixa, ProxSeqOcorr, Desconto1Codigo, Desconto1Ate, Desconto1Valor, Desconto2Codigo, Desconto2Ate, Desconto2Valor, Desconto3Codigo, Desconto3Ate, Desconto3Valor, Aceite FROM ParcelasRec WHERE NumIntTitulo = ?", 0, .lNumIntDoc, .lNumIntTitulo, .iNumParcela, .iStatus, .dtDataVencimento, .dtDataVencimentoReal, .dValor, .iCobrador, .iCarteiraCobranca, .sNumTitCobrador, .iProxSeqBaixa, .iProxSeqOcorr, .iDesconto1Codigo, .dtDesconto1Ate, .dDesconto1Valor, .iDesconto2Codigo, .dtDesconto2Ate, .dDesconto2Valor, .iDesconto3Codigo, .dtDesconto3Ate, .dDesconto3Valor, .iAceite, lNumIntTitulo)
                    If lErro <> AD_SQL_SUCESSO Then gError 112026
                    
                    lErro = Comando_BuscarPrimeiro(alComando(10))
                    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112027
                            
                    'naum existe
                    If lErro = AD_SQL_SEM_DADOS Then gError 112028
                    
                    'enquanto existir parcelas
                    Do While lErro = AD_SQL_SUCESSO
                        'insere o registro da tabela parcelasRec em parcelasRecbaixado
                        lErro = Comando_Executar(alComando(11), "INSERT INTO ParcelasRecBaixadas (NumIntDoc, NumIntTitulo, NumParcela, Status, DataVencimento, DataVencimentoReal, Valor, Cobrador, CarteiraCobranca, NumTitCobrador, ProxSeqBaixa, ProxSeqOcorr, Desconto1Codigo, Desconto1Ate, Desconto1Valor, Desconto2Codigo, Desconto2Ate, Desconto2Valor, Desconto3Codigo, Desconto3Ate, Desconto3Valor, Aceite)VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", .lNumIntDoc, .lNumIntTitulo, .iNumParcela, .iStatus, .dtDataVencimento, .dtDataVencimentoReal, .dValor, .iCobrador, .iCarteiraCobranca, .sNumTitCobrador, .iProxSeqBaixa, .iProxSeqOcorr, .iDesconto1Codigo, .dtDesconto1Ate, .dDesconto1Valor, .iDesconto2Codigo, .dtDesconto2Ate, .dDesconto2Valor, .iDesconto3Codigo, .dtDesconto3Ate, .dDesconto3Valor, .iAceite)
                        If lErro <> AD_SQL_SUCESSO Then gError 112029
                        
                        lErro = Comando_ExecutarPos(alComando(12), "DELETE FROM ParcelasRec", alComando(10))
                        If lErro <> AD_SQL_SUCESSO Then gError 112030
                    
                        lErro = Comando_BuscarProximo(alComando(10))
                        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112031
                    Loop
                
                End With
                
                'atualiza saldo carteira
                objCarteiraCobrador.iCobrador = COBRADOR_PROPRIA_EMPRESA
                objCarteiraCobrador.iCodCarteiraCobranca = CARTEIRA_CARTEIRA
        
                lErro = CF("CarteiraCobrador_AtualizaSaldo", objCarteiraCobrador, iNumParcela, -tBaixasParcRecCanc.dValorBaixado)
                If lErro <> SUCESSO Then gError 112032
                
            End If
        End If
        
        'deleta o baixaparcreccancitem
        lErro = Comando_ExecutarPos(alComando(13), "DELETE FROM BaixasParcRecCancItem", alComando(1))
        If lErro <> AD_SQL_SUCESSO Then gError 112033
                
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112034
    
    Loop
    
    'alterar o baixassrec
    lErro = Comando_ExecutarPos(alComando(18), "UPDATE BaixasRec SET Status=?", alComando(17), STATUS_LANCADO)
    If lErro <> AD_SQL_SUCESSO Then gError 112023
    
    'ler a tabela baixasParcReccanc
    lErro = Comando_ExecutarPos(alComando(14), "SELECT NumIntDoc FROM BaixasParcRecCanc WHERE NumIntDoc = ?", 0, lNumIntDoc, lNumIntBaixa)
    If lErro <> AD_SQL_SUCESSO Then gError 112035
    
    lErro = Comando_BuscarPrimeiro(alComando(14))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112036
        
    'naum existe
    If lErro = AD_SQL_SEM_DADOS Then gError 112037
    
    'deleta esta baixa
    lErro = Comando_ExecutarPos(alComando(15), "DELETE FROM BaixasParcRecCanc", alComando(14))
    If lErro <> AD_SQL_SUCESSO Then gError 112038
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
        
    BaixaParcRec_Cancelar_Exclui = SUCESSO

    Exit Function

Erro_BaixaParcRec_Cancelar_Exclui:

    BaixaParcRec_Cancelar_Exclui = gErr

    Select Case gErr

        Case 112007
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 112008, 112009, 112034
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BAIXASPARCRECCANCITEM", gErr)

        Case 112010
            lErro = Rotina_Erro(vbOKOnly, "ERRO_BAIXASPARCRECCANCITEM_NAO_EXISTE", gErr)
        
        Case 112011, 112012, 112014
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BAIXASPARCREC", gErr)

        Case 112013
            lErro = Rotina_Erro(vbOKOnly, "ERRO_BAIXASPARCREC_NAO_EXISTENTE", gErr)
        
        Case 112015
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_BAIXASPARCREC", gErr)
        
        Case 112016, 112017, 112026, 112027, 112031
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELASREC", gErr)

        Case 112018, 112032
        
        Case 112019
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_PARCELASREC", gErr)
        
        Case 112020, 112021
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TITULOSREC1", gErr, lNumIntTitulo)
    
        Case 112022
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TITULOSREC_NAO_EXISTENTE", gErr, lNumIntTitulo)
        
        Case 112023
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_TITULOSREC", gErr, lNumIntTitulo)
        
        Case 112024
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_TITULOSRECBAIXADOS", gErr)
        
        Case 112025
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_TITULOSREC", gErr)
        
        Case 112028
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PARCELASREC_NAO_EXISTENTE", gErr)
        
        Case 112029
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_PARCELASRECBAIXADOS", gErr)
        
        Case 112030
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_PARCELASREC1", gErr)
        
        Case 112033
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_BAIXASPARCRECCANCITEM", gErr)
        
        Case 112035, 112036
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BAIXASPARCRECCANC", gErr)

        Case 112037
            lErro = Rotina_Erro(vbOKOnly, "ERRO_BAIXASPARCRECCANC_NAO_EXISTE", gErr)
        
        Case 112038
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_BAIXASPARCRECCANC", gErr)
                
        Case 112039, 112040
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BAIXASREC1", gErr, lNumIntBaixa)

        Case 112041
            lErro = Rotina_Erro(vbOKOnly, "ERRO_BAIXASREC_NAO_EXISTE", gErr, lNumIntBaixa)
                
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148415)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

'tulio110203
Public Function RelLctosCPAux_Prepara(lNumIntRel As Long, ByVal dtDataIni As Date, ByVal dtDataFim As Date) As Long
'Insere registros na tabela RelLctosCPAux
'lNumIntRel eh parametro de OUTPUT que vai retornar o numero interno do relatorio em questao
'dtDataIni e dtDataFim, parametros de INPUT, sao as datas que limitam o relatorio

Dim lErro As Long, dtData As Date, bEmTrans As Boolean
Dim lTransacao As Long
Dim alComando(0 To 1) As Long
Dim sQueryBase As String
Dim sQueryComplemento As String
Dim iIndice As Integer, iFilialEmp As Integer

On Error GoTo Erro_RelLctosCPAux_Prepara

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 111773
    Next

    bEmTrans = IIf(GL_lTransacao <> 0, True, False)
    
    If Not bEmTrans Then
        'Inicia a Transacao
        lTransacao = Transacao_Abrir()
        If lTransacao = 0 Then gError 111774
    End If
    
    'obtem numintrel
    'tulio110203
    lErro = CF("Config_ObterNumInt", "CPConfig", "NUMINTREL_RELLCTOSCPAUX", lNumIntRel)
    If lErro <> SUCESSO Then gError 111771
    
    'Deleta, por segurança, os registros com o NumInt obtido anteriormente
    lErro = Comando_Executar(alComando(0), "DELETE FROM RelLctosCPAux WHERE NumIntRel = ?", lNumIntRel)
    If lErro <> AD_SQL_SUCESSO Then gError 111775
        
    'Insere os registros em RelLctosCPAux
    sQueryBase = "INSERT INTO RelLctosCPAux (NumIntRel,FilialEmpresa,Data,Origem,Exercicio,PeriodoLan,Doc,Lote,Status,NumIntDoc,Transacao) SELECT ?,FilialEmpresa,Data,Origem,Exercicio,PeriodoLan,Doc,Lote,Status,NumIntDoc,Transacao FROM "
    
    If giFilialEmpresa = EMPRESA_TODA Or gobjCTB.giContabCentralizada <> 0 Then
        sQueryComplemento = "Lancamentos WHERE Seq = 1 AND Aglutinado <> 2 AND Origem NOT IN ('CES','CFT','FAT','TES','CR','BCR') AND Data BETWEEN ? AND ?"
        
        lErro = Comando_Executar(alComando(0), sQueryBase & sQueryComplemento, lNumIntRel, dtDataIni, dtDataFim)
    Else
        sQueryComplemento = "Lancamentos WHERE FilialEmpresa = ? AND Seq = 1 AND Aglutinado <> 2 AND Origem NOT IN ('CES','CFT','FAT','TES','CR','BCR') AND Data BETWEEN ? AND ?"
        
        lErro = Comando_Executar(alComando(0), sQueryBase & sQueryComplemento, lNumIntRel, giFilialEmpresa, dtDataIni, dtDataFim)
    End If
    If lErro <> AD_SQL_SUCESSO Then gError 111777
    
    If giFilialEmpresa = EMPRESA_TODA Or gobjCTB.giContabCentralizada <> 0 Then
        sQueryComplemento = "LanPendente WHERE Seq = 1 AND Origem NOT IN ('CES','CFT','FAT','TES','CR','BCR') AND Data BETWEEN ? AND ?"
        
        lErro = Comando_Executar(alComando(0), sQueryBase & sQueryComplemento, lNumIntRel, dtDataIni, dtDataFim)
    Else
        sQueryComplemento = "LanPendente WHERE FilialEmpresa = ? AND Seq = 1 AND Origem NOT IN ('CES','CFT','FAT','TES','CR','BCR') AND Data BETWEEN ? AND ?"
        
        lErro = Comando_Executar(alComando(0), sQueryBase & sQueryComplemento, lNumIntRel, giFilialEmpresa, dtDataIni, dtDataFim)
    End If
    If lErro <> AD_SQL_SUCESSO Then gError 111778
    
    If Not bEmTrans Then
        'Confirma a transação
        lErro = Transacao_Commit()
        If lErro <> AD_SQL_SUCESSO Then gError 111776
    End If
    
    For iIndice = LBound(alComando) To UBound(alComando)
         Call Comando_Fechar(alComando(iIndice))
    Next
   
    RelLctosCPAux_Prepara = SUCESSO
     
    Exit Function
    
Erro_RelLctosCPAux_Prepara:

    RelLctosCPAux_Prepara = gErr
     
    Select Case gErr
          
        Case 111771
        
        Case 111773
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
 
        Case 111774
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 111775
            '??? cad. esse erro
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_RELLCTOSCPAUX", gErr, lNumIntRel)

        Case 111776
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT_TRANSACAO", gErr)

        Case 111777, 111778
            '??? cad. esse erro
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_RELLCTOSCPAUX", gErr, lNumIntRel)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148416)
     
    End Select
     
    If Not bEmTrans Then Call Transacao_Rollback
    
    For iIndice = LBound(alComando) To UBound(alComando)
         Call Comando_Fechar(alComando(iIndice))
    Next
   
    Exit Function

End Function

Function ParcelasPagBaixadas_Modificar_DetPag(ByVal objParcelaPagar As ClassParcelaPagar) As Long
'Função que Altera a Parcela de um Titulo já baixado fazendo uso do Numero Interno da Parcela

Dim lErro As Long, lTransacao As Long
Dim iStatus As Integer
Dim alComando(1) As Long
Dim iIndice As Integer

On Error GoTo Erro_ParcelasPagBaixadas_Modificar_DetPag

    'Inicializa comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 113479
    Next

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 113480

    lErro = Comando_ExecutarPos(alComando(0), "SELECT Status FROM ParcelasPagBaixadas WHERE NumIntDoc = ?", 0, iStatus, objParcelaPagar.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 113481

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 113482

    'Não achou a parcela --> erro
    If lErro = AD_SQL_SEM_DADOS Then gError 113483
    
    lErro = Comando_ExecutarPos(alComando(1), "UPDATE ParcelasPagBaixadas SET DataVencimento = ?, DataVencimentoReal = ?, TipoCobranca = ?, Portador = ?, BancoCobrador = ? , CodigoDeBarras = ?", alComando(0), objParcelaPagar.dtDataVencimento, objParcelaPagar.dtDataVencimentoReal, objParcelaPagar.iTipoCobranca, objParcelaPagar.iPortador, objParcelaPagar.iBancoCobrador, objParcelaPagar.sCodigoDeBarras)
    If lErro <> AD_SQL_SUCESSO Then gError 113484
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 113485

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    ParcelasPagBaixadas_Modificar_DetPag = SUCESSO

    Exit Function

Erro_ParcelasPagBaixadas_Modificar_DetPag:

    ParcelasPagBaixadas_Modificar_DetPag = gErr

    Select Case gErr

        Case 113479
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 113480
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 113481, 113482
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_PAG_BAIXADA", gErr)

        Case 113483
            Call Rotina_Erro(vbOKOnly, "ERRO_PARCELA_PAGAR_NAO_CADASTRADA", gErr, objParcelaPagar.iNumParcela)

        Case 113484
            Call Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_PARCELAS_BAIXADAS", Err)

        Case 113485
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148417)

    End Select

    Call Transacao_Rollback
    
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Function ChequePre_Altera_Localizacao(objChequePre As ClassChequePre, iLocalizacao As Integer) As Long
'atualiza a localizacao do cheque passado como parametro (FilialEmpresa, NumIntCheque)

Dim lErro As Long
Dim alComando(1 To 2) As Long
Dim iIndice As Integer
Dim sAgencia As String
Dim sContaCorrente As String
Dim iBanco As Integer
Dim lNumero As Long
Dim tChequePre As typeChequePre

On Error GoTo Erro_ChequePre_Altera_Localizacao

    'Inicializa comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 110114
    Next

    sAgencia = String(STRING_AGENCIA, 0)
    sContaCorrente = String(STRING_CONTA_CORRENTE, 0)

    lErro = Comando_ExecutarPos(alComando(1), "SELECT SequencialLoja, NaoEspecificado, Valor  FROM ChequePre WHERE NumIntCheque = ? AND FilialEmpresa =?", 0, tChequePre.lSequencialLoja, tChequePre.iNaoEspecificado, tChequePre.dValor, objChequePre.lNumIntCheque, objChequePre.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 110115
    
    lErro = Comando_BuscarProximo(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 110116
    
    If lErro <> AD_SQL_SUCESSO Then gError 110117
 
    lErro = Comando_LockExclusive(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 110118
 
    objChequePre.lSequencialLoja = tChequePre.lSequencialLoja
    objChequePre.iNaoEspecificado = tChequePre.iNaoEspecificado
    objChequePre.dValor = tChequePre.dValor
 
    lErro = Comando_ExecutarPos(alComando(2), "UPDATE ChequePre SET Localizacao = ?", alComando(1), iLocalizacao)
    If lErro <> AD_SQL_SUCESSO Then gError 110119

    ChequePre_Altera_Localizacao = SUCESSO
    
    Exit Function
    
Erro_ChequePre_Altera_Localizacao:

    ChequePre_Altera_Localizacao = gErr
    
    Select Case gErr
    
        Case 110114
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
    
        Case 110115, 110116
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUEPRE", gErr, objChequePre.lNumIntCheque)
        
        Case 110117
            Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPRE_INEXISTENTE", gErr, objChequePre.lNumIntCheque)
        
        Case 110118
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CHEQUEPRE", gErr)
                
        Case 110119
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_CHEQUESPRE2", gErr, iBanco, sAgencia, sContaCorrente, lNumero)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148418)
 
    End Select
    
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Function RelForSaldo_Prepara(ByVal iFilialEmpresa As Integer, lNumIntRel As Long, ByVal lFornInic As Long, ByVal lFornFinal As Long, ByVal dtDataSaldo As Date) As Long
'dtDataSaldo eh a data inicial do relatorio (ex. 01/01/2002)

Dim lErro As Long, dtData As Date, dtDataJaCalculada As Date
Dim lTransacao As Long, alComando(0 To 7) As Long, iIndice As Integer, lFornAnterior As Long, dSaldo As Double
Dim iTipoLcto As Integer, lFornecedor As Long, dValorTotal As Double, dValorIRRF As Double, dValorINSS As Double, iINSSRetido As Integer, dBaixasParcPag_ValorBaixado As Double, iBaixasParcPag_Status As Integer, dtBaixasParcPag_DataCancelamento As Date
Dim dtDataSaldoIni As Date, lNumIntRelAux As Long
Dim dSaldoIni As Double
Dim lForn As Long
Dim iTipoReg As Integer
Dim iStatus As Integer
Dim dValorTitulo As Double
Dim dValorBaixa As Double, bAchou As Boolean
Dim objSaldo As AdmlCodigoNome, iFilialEmp As Integer
Dim colSaldos As New Collection

On Error GoTo Erro_RelForSaldo_Prepara

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 81792
    Next

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 81793

    dtData = dtDataSaldo - 1
    dtDataJaCalculada = DATA_NULA

    iFilialEmp = IIf(iFilialEmpresa = EMPRESA_TODA Or gobjCTB.giContabCentralizada <> 0, EMPRESA_TODA, iFilialEmpresa)
    
    'deleta o saldo de datas posteriores
    lErro = Comando_Executar(alComando(3), "DELETE FROM RelForSaldoIni WHERE FilialEmpresa = ? AND Data >= ?", iFilialEmp, dtDataSaldo)
    If lErro <> AD_SQL_SUCESSO Then gError 111741
    
    'pesquisar em relforsaldoini registros da filial em questao
    lErro = Comando_Executar(alComando(2), "SELECT Data, Saldo, Fornecedor FROM RelForSaldoIni WHERE FilialEmpresa = ? AND Data < ? ORDER BY Data DESC", _
        dtDataSaldoIni, dSaldoIni, lForn, iFilialEmp, dtDataSaldo)
    If lErro <> SUCESSO Then gError 111739
    
    'busca o primeiro saldo
    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 111740

    'enquanto existirem saldos
    Do While lErro <> AD_SQL_SEM_DADOS
        
        If dtDataJaCalculada = DATA_NULA Then
            dtDataJaCalculada = dtDataSaldoIni
        End If
            
        If dtDataSaldoIni < dtDataJaCalculada Then
            Exit Do
        End If
        
        'instancia o objeto
        Set objSaldo = New AdmlCodigoNome
        
        'guarda o saldo no obj...
        objSaldo.sNome = CStr(dSaldoIni)
        
        'guarda o fonecedor
        objSaldo.lCodigo = lForn
        
        'adiciona o obj na colecao onde a chave eh "X" concatenado com o codigo do fornecedor
        colSaldos.Add objSaldo, "X" & CStr(lForn)
        
        'busca o proximo
        lErro = Comando_BuscarProximo(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 111742
    
    Loop
        
    lErro = CF("RelLctosCPAux_Prepara", lNumIntRelAux, dtDataJaCalculada, dtData)
    If lErro <> SUCESSO Then gError 111741
    
    'obtem numintrel
    lErro = CF("Config_ObterNumInt", "CPConfig", "NUM_PROX_REL_FOR_SALDO", lNumIntRel)
    If lErro <> SUCESSO Then gError 81794
        
    'se achou registro
    If dtDataJaCalculada <> DATA_NULA Then
        
        lErro = Comando_Executar(alComando(4), "SELECT Fornecedor, TipoReg, StatusLcto, SUM(-BaixasParcPag_ValorBaixado) as ValorBaixa, SUM(ValorTotal - (ValorIRRF+PISRetido+ISSRetido+COFINSRetido+CSLLRetido) - ( INSSRetido * ValorINSS )) as ValorTitulo FROM RelLctosCP WHERE NumIntRel = ? AND Data >= ? AND Data < ? GROUP BY Fornecedor, TipoReg, StatusLcto", _
                                lForn, iTipoReg, iStatus, dValorBaixa, dValorTitulo, lNumIntRelAux, dtDataJaCalculada, dtDataSaldo)
        
    'senao
    Else
    
        'select analogo ao anterior, mas sem data >= ?
        lErro = Comando_Executar(alComando(4), "SELECT Fornecedor, TipoReg, StatusLcto, SUM( -  BaixasParcPag_ValorBaixado) as ValorBaixa, SUM(ValorTotal - (ValorIRRF+PISRetido+ISSRetido+COFINSRetido+CSLLRetido) - ( INSSRetido * ValorINSS )) as ValorTitulo FROM RelLctosCP WHERE NumIntRel = ? AND Data < ? GROUP BY Fornecedor, TipoReg, StatusLcto", _
                                lForn, iTipoReg, iStatus, dValorBaixa, dValorTitulo, lNumIntRelAux, dtDataSaldo)
    
    End If
        
    If lErro <> AD_SQL_SUCESSO Then gError 111743
        
    'busca o registro do select obtido anteriormente
    lErro = Comando_BuscarPrimeiro(alComando(4))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 111744
    
    Do While lErro <> AD_SQL_SEM_DADOS
    
        bAchou = False
        For Each objSaldo In colSaldos
            If objSaldo.lCodigo = lForn Then
                bAchou = True
                Exit For
            End If
        Next
        
        If bAchou = False Then
        
            'instancia o objeto
            Set objSaldo = New AdmlCodigoNome
            
            'guarda o saldo no obj...
            objSaldo.sNome = CStr(0)
            
            'guarda o fonecedor
            objSaldo.lCodigo = lForn
            
            'adiciona o obj na colecao onde a chave eh "X" concatenado com o codigo do fornecedor
            colSaldos.Add objSaldo, "X" & CStr(lForn)
            
        End If
        
        'atualiza os saldos de acordo com o tiporeg e o statuslcto
        If iTipoReg < 9 And iStatus <> 2 Then
            objSaldo.sNome = CStr(StrParaDbl(objSaldo.sNome) + dValorTitulo)
        ElseIf iTipoReg >= 9 And iStatus = 2 Then
            objSaldo.sNome = CStr(StrParaDbl(objSaldo.sNome) - dValorBaixa)
        ElseIf iTipoReg >= 9 And iStatus <> 2 Then
            objSaldo.sNome = CStr(StrParaDbl(objSaldo.sNome) + dValorBaixa)
        ElseIf iTipoReg < 9 And iStatus = 2 Then
            objSaldo.sNome = CStr(StrParaDbl(objSaldo.sNome) - dValorTitulo)
        End If
        
        lErro = Comando_BuscarProximo(alComando(4))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 111744
    
    Loop

    lErro = Comando_Executar(alComando(7), "DELETE FROM RelLCtosCPAux WHERE NumIntRel = ?", lNumIntRelAux)
    If lErro <> AD_SQL_SUCESSO Then gError 111741
    
    For Each objSaldo In colSaldos
    
        'percorrer a colecao inserindo valores em relforsaldoini
        lErro = Comando_Executar(alComando(5), "INSERT INTO RelForSaldoIni (FilialEmpresa, Data, Fornecedor, Saldo) VALUES (?,?,?,?)", iFilialEmp, dtDataSaldo, objSaldo.lCodigo, StrParaDbl(objSaldo.sNome))
        If lErro <> AD_SQL_SUCESSO Then gError 111745
        
        'percorrer a colecao inserindo valores em relforsaldo
        If StrParaDbl(objSaldo.sNome) <> 0 Then
            lErro = Comando_Executar(alComando(6), "INSERT INTO RelForSaldo (NumIntRel, Fornecedor, Saldo) VALUES (?,?,?)", lNumIntRel, objSaldo.lCodigo, StrParaDbl(objSaldo.sNome))
            If lErro <> AD_SQL_SUCESSO Then gError 111746
        End If
        
    Next
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 81800
    
    For iIndice = LBound(alComando) To UBound(alComando)
         Call Comando_Fechar(alComando(iIndice))
    Next
   
    RelForSaldo_Prepara = SUCESSO
     
    Exit Function
    
Erro_RelForSaldo_Prepara:

    RelForSaldo_Prepara = gErr
     
    Select Case gErr
          
        Case 106616
            Call Rotina_Erro(vbOKOnly, "ERRO_INPAL_DATA_INICIAL_INVALIDA", gErr)
        
        Case 81794
        
        Case 81792
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
 
        Case 81793
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 81795, 81796, 81797
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_POSCPDATALCTOS", gErr)
        
        Case 81798, 81799
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_RELFORSALDO", gErr)
        
        Case 81800
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case 111739, 111740, 111742
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RELFORSALDOINI", gErr)
            
        Case 111741
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_RELFORSALDOINI", gErr)

        Case 111743, 111744
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RELLCTOSCP", gErr)

        Case 111745
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_RELFORSALDOINI", gErr)

        Case 111746
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_RELFORSALDO", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148419)
     
    End Select
     
    Call Transacao_Rollback
    
    For iIndice = LBound(alComando) To UBound(alComando)
         Call Comando_Fechar(alComando(iIndice))
    Next
   
    Exit Function

End Function

Function Cidade_Lock_Nome(ByVal sCidade As String, ByVal lComando As Long) As Long

Dim lErro As Long
Dim iCodigo As Integer

On Error GoTo Erro_Cidade_Lock_Nome
    
    If Len(Trim(sCidade)) <> 0 Then
    
        'pesquisa Codigo da Cidade no BD
        lErro = Comando_ExecutarLockado(lComando, "SELECT Codigo FROM Cidades WHERE Descricao = ?", iCodigo, sCidade)
        If lErro <> AD_SQL_SUCESSO Then gError 124096
    
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 124097
    
        If lErro = AD_SQL_SEM_DADOS Then gError 124098
        
        lErro = Comando_LockShared(lComando)
        If lErro <> AD_SQL_SUCESSO Then gError 124099
            
    End If
    
    Cidade_Lock_Nome = SUCESSO

    Exit Function

Erro_Cidade_Lock_Nome:

    Cidade_Lock_Nome = gErr

    Select Case gErr

        Case 124096
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CIDADE2", gErr, sCidade)

        Case 124098
            Call Rotina_Erro(vbOKOnly, "ERRO_CIDADE_NAO_CADASTRADA2", gErr, sCidade)

        Case 124099
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CIDADE", gErr, sCidade)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148420)

    End Select

    Exit Function

End Function

Function ChequePre_MovCCI_Grava(ByVal objChequePre As ClassChequePre) As Long
'prepara e insere o movto de cta corrente correspondente ao chequepre

Dim lErro As Long
Dim objContasCorrentesInternas As New ClassContasCorrentesInternas
Dim objMovContaCorrente As New ClassMovContaCorrente
Dim objCCI As New ClassContasCorrentesInternas
Dim iCodNossaConta As Integer

On Error GoTo Erro_ChequePre_MovCCI_Grava

    objCCI.iFilialEmpresa = objChequePre.iFilialEmpresa

    'Retorna o codigo da conta de cheque pre da filial passada como parametro.
    lErro = CF("CCI_Le_ContaChequePre", objCCI)
    If lErro <> SUCESSO And lErro <> 126131 Then gError 126224

    If lErro <> SUCESSO Then gError 126225

    'Incluir o deposito do bordero na conta
    objMovContaCorrente.dtDataMovimento = objChequePre.dtDataEmissao
    objMovContaCorrente.dValor = objChequePre.dValor
    objMovContaCorrente.iCodConta = objCCI.iCodigo
    objMovContaCorrente.iFilialEmpresa = objChequePre.iFilialEmpresa
    objMovContaCorrente.iPortador = 0
    objMovContaCorrente.iTipo = MOVCCI_CHEQUEPRE_BACKOFFICE
    objMovContaCorrente.iTipoMeioPagto = Cheque
    objMovContaCorrente.lNumRefInterna = objChequePre.lNumIntCheque
    objMovContaCorrente.sHistorico = "Depósito de Cheque Pré Backoffice"
    objMovContaCorrente.sNumRefExterna = ""

    objMovContaCorrente.iConciliado = NAO_CONCILIADO
    objMovContaCorrente.iExcluido = MOVCONTACORRENTE_NAO_EXCLUIDO

    'Grava o Pagamento no BD
    lErro = CF("MovCCI_Grava_PagRec", objMovContaCorrente)
    If lErro <> SUCESSO Then gError 126226
        
    ChequePre_MovCCI_Grava = SUCESSO
     
    Exit Function
    
Erro_ChequePre_MovCCI_Grava:

    ChequePre_MovCCI_Grava = gErr
     
    Select Case gErr
          
        Case 126224, 126226
        
        Case 126225
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTACHEQUEPRE_INEXISTENTE", gErr, objChequePre.iFilialEmpresa)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148421)
     
    End Select
     
    Exit Function

End Function

Function ChequePre_MovCCI_Exclui(ByVal objChequePre As ClassChequePre) As Long
'exclui o movto de cta corrente correspondente ao Cheque Pre

Dim objMovCCI As New ClassMovContaCorrente
Dim lErro As Long
Dim lNumMovto As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer

On Error GoTo Erro_ChequePre_MovCCI_Exclui

    'abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 126227
    Next

    'descobrir o movimento de cci associado a devolução de cheque
    lErro = Comando_Executar(alComando(1), "SELECT NumMovto FROM MovimentosContaCorrente WHERE Tipo = ? AND NumRefInterna = ?", lNumMovto, MOVCCI_CHEQUEPRE_BACKOFFICE, objChequePre.lNumIntCheque)
    If lErro <> AD_SQL_SUCESSO Then gError 126228

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126229
    
    'se o movimento existir
    If lErro = AD_SQL_SUCESSO Then
       
        objMovCCI.lNumMovto = lNumMovto
    
        lErro = CF("MovCCI_Exclui_EmTransacao_1", objMovCCI)
        If lErro <> SUCESSO Then gError 126231

    End If

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    ChequePre_MovCCI_Exclui = SUCESSO
     
    Exit Function
    
Erro_ChequePre_MovCCI_Exclui:

    ChequePre_MovCCI_Exclui = gErr
     
    Select Case gErr
          
        Case 126227
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
          
        Case 126228, 126229
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCONTACORRENTE", gErr)
        
        Case 126231
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148422)
     
    End Select
     
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
     
    Exit Function

End Function

'Incluída em 03/03/04 por Luiz Nogueira. A Rotina já existia na tela de categorias de fornecedores e foi apenas transferida.
Public Function CategoriaFornecedor_Grava(ByVal objCategoriaFornecedor As ClassCategoriaFornecedor, ByVal colItensCategoria As Collection) As Long
'Inclui ou altera uma categoria de fornecedores e seus valores
'tabelas: CategoriaFornecedor e CategoriaFornecedorItem

Dim lErro As Long, iIndice As Integer, colItensCategoriaCopia As New Collection
Dim sCategoriaDescricao As String, sCategoriaItem As String, sCategoriaItemDescricao As String
Dim objCategoriaFornecedorItem As New ClassCategoriaFornItem
Dim lTransacao As Long, alComando(1 To 6) As Long

On Error GoTo Erro_CategoriaFornecedor_Grava

    'Cria uma cópia "de trabalho" da coleção passada como parâmetro
    For Each objCategoriaFornecedorItem In colItensCategoria
        colItensCategoriaCopia.Add objCategoriaFornecedorItem
    Next

    'Abertura comandos
    For iIndice = LBound(alComando) To UBound(alComando)

        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 90553

    Next

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 90554

    sCategoriaDescricao = String(STRING_CATEGORIAFORNECEDOR_DESCRICAO, 0)

    'Pesquisa no BD a categoria em questão
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Descricao FROM CategoriaFornecedor WHERE Categoria = ?", 0, sCategoriaDescricao, objCategoriaFornecedor.sCategoria)
    If lErro <> AD_SQL_SUCESSO Then gError 90555

    'Lê a categoria, se estiver no BD
    lErro = Comando_BuscarProximo(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 90556

    'Se a categoria existir
    If lErro = AD_SQL_SUCESSO Then

        'Se a descrição da categoria for diferente
        If sCategoriaDescricao <> objCategoriaFornecedor.sDescricao Then

             'Alterar a descrição da categoria
            lErro = Comando_ExecutarPos(alComando(2), "UPDATE CategoriaFornecedor SET Descricao = ?", alComando(1), objCategoriaFornecedor.sDescricao)
            If lErro <> AD_SQL_SUCESSO Then gError 90557

        End If

        sCategoriaItem = String(STRING_CATEGORIAFORNECEDORITEM_ITEM, 0)
        sCategoriaItemDescricao = String(STRING_CATEGORIAFORNECEDORITEM_DESCRICAO, 0)

        'Percorrer todos os itens atuais da categoria no BD
        lErro = Comando_ExecutarPos(alComando(3), "SELECT Item, Descricao FROM CategoriaFornecedorItem WHERE Categoria = ?", 0, sCategoriaItem, sCategoriaItemDescricao, objCategoriaFornecedor.sCategoria)
        If lErro <> AD_SQL_SUCESSO Then gError 90558

        'Lê o item da categoria, se estiver no BD
        lErro = Comando_BuscarProximo(alComando(3))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 90559

        Do While lErro <> AD_SQL_SEM_DADOS

            'Procura o item na coleção correspondente ao grid
            iIndice = CategoriaFornecedor_Grava_ItemNaColecao(colItensCategoriaCopia, sCategoriaItem)

            'Se (ainda) existir no grid uma linha com a mesma chave
            If iIndice <> 0 Then

                Set objCategoriaFornecedorItem = colItensCategoriaCopia.Item(iIndice)

                'Se a descrição do grid for <> da que estiver no BD
                If UCase(objCategoriaFornecedorItem.sDescricao) <> UCase(sCategoriaItemDescricao) Then

                    'Alterar a descrição do item
                    lErro = Comando_ExecutarPos(alComando(4), "UPDATE CategoriaFornecedorItem SET Descricao = ?", alComando(3), objCategoriaFornecedorItem.sDescricao)
                    If lErro <> AD_SQL_SUCESSO Then gError 90560

                End If

                'Excluir o item da coleção
                colItensCategoriaCopia.Remove (iIndice)

            Else

                lErro = CF("CategoriaFornecedorItem_NaoUtilizado", objCategoriaFornecedor.sCategoria, sCategoriaItem)
                If lErro Then gError 90561

                'Excluir o item do BD
                lErro = Comando_ExecutarPos(alComando(5), "DELETE FROM CategoriaFornecedorItem", alComando(3))
                If lErro <> AD_SQL_SUCESSO Then gError 90562

            End If

            'Lê o item da categoria, se estiver no BD
            lErro = Comando_BuscarProximo(alComando(3))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 90563

        Loop

    Else
        'A Categoria não existe

        'Criá-la (inclui-la em CategoriaFornecedor)
        lErro = Comando_Executar(alComando(6), "INSERT INTO CategoriaFornecedor (Categoria,Descricao) VALUES(?,?)", objCategoriaFornecedor.sCategoria, objCategoriaFornecedor.sDescricao)
        If lErro <> AD_SQL_SUCESSO Then gError 90564

    End If

    'Grava os itens que ainda não faziam parte da categoria
    lErro = CategoriaFornecedor_Grava_NovosItens(objCategoriaFornecedor, colItensCategoriaCopia)
    If lErro <> SUCESSO Then gError 90565

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 90566

    'Libera comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    CategoriaFornecedor_Grava = SUCESSO

    Exit Function

Erro_CategoriaFornecedor_Grava:

    CategoriaFornecedor_Grava = gErr

    Select Case gErr

        Case 90553
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 90554
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 90555, 90556, 90563
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CATEGORIAFORNECEDOR1", gErr, objCategoriaFornecedor.sCategoria)

        Case 90557
            Call Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_CATEGORIAFORNECEDOR", gErr, objCategoriaFornecedor.sCategoria)

        Case 90558, 90559
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CATEGORIAFORNECEDORITEM", gErr, objCategoriaFornecedor.sCategoria)

        Case 90560
            Call Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_CATEGORIAFORNECEDORITEM", gErr, objCategoriaFornecedor.sCategoria)

        Case 90561, 90565

        Case 90562
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CATEGORIAFORNECEDORITEM", gErr, objCategoriaFornecedor.sCategoria)

        Case 90564
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CATEGORIAFORNECEDOR", gErr, objCategoriaFornecedor.sCategoria)

        Case 90566
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148423)

    End Select

    Call Transacao_Rollback

    'Libera comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

'Incluída em 03/03/04 por Luiz Nogueira. A Rotina já existia na tela de categorias de fornecedores e foi apenas transferida.
Private Function CategoriaFornecedor_Grava_ItemNaColecao(colItensCategoria As Collection, sItem As String) As Long
'Retorna o índice do item na coleção ou zero se não achá-lo (na coleção)

Dim iIndice As Integer
Dim objCategoriaItem As New ClassCategoriaFornItem

    'Pesquisa o item na coleção
    For iIndice = 1 To colItensCategoria.Count

        Set objCategoriaItem = colItensCategoria.Item(iIndice)

        'Se achou o item na coleção
        If UCase(objCategoriaItem.sItem) = UCase(sItem) Then

            CategoriaFornecedor_Grava_ItemNaColecao = iIndice

            Exit Function

        End If

    Next

    CategoriaFornecedor_Grava_ItemNaColecao = SUCESSO

End Function

'Incluída em 03/03/04 por Luiz Nogueira. A Rotina já existia na tela de categorias de fornecedores e foi apenas transferida.
Private Function CategoriaFornecedor_Grava_NovosItens(objCategoriaFornecedor As ClassCategoriaFornecedor, colItensCategoria As Collection) As Long
'Percorrer os itens na colecao incluindo-os no BD

Dim lErro As Long, lComando As Long
Dim objCategoriaItem As New ClassCategoriaFornItem

On Error GoTo Erro_CategoriaFornecedor_Grava_NovosItens

    'Abertura comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 90571

    'Percorrer a coleção
    For Each objCategoriaItem In colItensCategoria

        lErro = Comando_Executar(lComando, "INSERT INTO CategoriaFornecedorItem (Categoria, Item, Descricao) VALUES(?,?,?)", objCategoriaItem.sCategoria, objCategoriaItem.sItem, objCategoriaItem.sDescricao)
        If lErro <> AD_SQL_SUCESSO Then gError 90572

    Next

    'Fechamento comando
    Call Comando_Fechar(lComando)

    CategoriaFornecedor_Grava_NovosItens = SUCESSO

    Exit Function

Erro_CategoriaFornecedor_Grava_NovosItens:

    CategoriaFornecedor_Grava_NovosItens = gErr

    Select Case gErr

        Case 90571
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 90572
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CATEGORIAFORNECEDORITEM", gErr, objCategoriaItem.sCategoria)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148424)

    End Select

    'Fechamento comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

'Incluída em 03/03/04 por Luiz Nogueira. A Rotina já existia na tela de categorias de fornecedores e foi apenas transferida.
Public Function CategoriaFornecedor_Exclui(ByVal objCategoriaFornecedor As ClassCategoriaFornecedor) As Long
'Excluir a tabela com todos os seus itens se não for usada

Dim lErro As Long
Dim sCategoriaDescricao As String
Dim lTransacao As Long
Dim lComandoSel As Long
Dim lComandoDel As Long
Dim lComando As Long
Dim iTipo As Integer

On Error GoTo Erro_CategoriaFornecedor_Exclui

    'Abertura comandos
    lComandoSel = Comando_Abrir()
    If lComandoSel = 0 Then gError 90573

    lComandoDel = Comando_Abrir()
    If lComandoDel = 0 Then gError 90574

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 90575

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 90576

    sCategoriaDescricao = String(STRING_CATEGORIAFORNECEDOR_DESCRICAO, 0)

    'Pesquisa no BD a Categoria
    lErro = Comando_ExecutarPos(lComandoSel, "SELECT Descricao FROM CategoriaFornecedor WHERE Categoria = ?", 0, sCategoriaDescricao, objCategoriaFornecedor.sCategoria)
    If lErro <> AD_SQL_SUCESSO Then gError 90577

    'Verifica se Categoria existe
    lErro = Comando_BuscarProximo(lComandoSel)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 90578

    'Não encontrou a Categoria ==> erro
    If lErro = AD_SQL_SEM_DADOS Then gError 90579

    '"Lock" na Categoria
    lErro = Comando_LockExclusive(lComandoSel)
    If lErro <> AD_SQL_SUCESSO Then gError 90580

    'Testa uso, nas tabelas que têm relacionamentos com CategoriaFornecedor .
    lErro = CF("CategoriaFornecedor_NaoUtilizado", objCategoriaFornecedor.sCategoria)
    If lErro <> SUCESSO Then gError 90581

    'Exclui os itens da categoria
    lErro = CategoriaFornecedor_ExcluiItens(objCategoriaFornecedor)
    If lErro <> SUCESSO Then gError 90582

    'Exclui a própria categoria
    lErro = Comando_ExecutarPos(lComandoDel, "DELETE FROM CategoriaFornecedor", lComandoSel)
    If lErro <> AD_SQL_SUCESSO Then gError 90583

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 90584

    'Libera comandos
    Call Comando_Fechar(lComandoSel)
    Call Comando_Fechar(lComandoDel)

    CategoriaFornecedor_Exclui = SUCESSO

    Exit Function

Erro_CategoriaFornecedor_Exclui:

    CategoriaFornecedor_Exclui = gErr

    Select Case gErr

        Case 90581

        Case 90573, 90574, 90575
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 90576
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 90577, 90578
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CATEGORIAFORNECEDOR1", gErr, objCategoriaFornecedor.sCategoria)

        Case 90579
            Call Rotina_Erro(vbOKOnly, "ERRO_CATEGORIAFORNECEDOR_NAO_CADASTRADA", gErr, objCategoriaFornecedor.sCategoria)

        Case 90580
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CATEGORIAFORNECEDOR", gErr, objCategoriaFornecedor.sCategoria)

        Case 90582

        Case 90583
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CATEGORIAFORNECEDOR", gErr, objCategoriaFornecedor.sCategoria)

        Case 90584
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148425)

    End Select

    Call Transacao_Rollback

    'Libera comandos
    Call Comando_Fechar(lComandoSel)
    Call Comando_Fechar(lComandoDel)

    Exit Function

End Function

'Incluída em 03/03/04 por Luiz Nogueira. A Rotina já existia na tela de categorias de fornecedores e foi apenas transferida.
Private Function CategoriaFornecedor_ExcluiItens(objCategoriaFornecedor As ClassCategoriaFornecedor) As Long
'Exclui os itens de uma categoria

Dim lErro As Long, lComandoSel As Long, lComandoDel As Long
Dim sCategoriaItem As String, sCategoriaItemDescricao As String

On Error GoTo Erro_CategoriaFornecedor_ExcluiItens

    'Abertura comandos
    lComandoSel = Comando_Abrir()
    If lComandoSel = 0 Then gError 90602

    lComandoDel = Comando_Abrir()
    If lComandoDel = 0 Then gError 90603

    sCategoriaItem = String(STRING_CATEGORIAFORNECEDORITEM_ITEM, 0)
    sCategoriaItemDescricao = String(STRING_CATEGORIAFORNECEDORITEM_DESCRICAO, 0)

    'Percorrer todos os itens da categoria no BD
    lErro = Comando_ExecutarPos(lComandoSel, "SELECT Item, Descricao FROM CategoriaFornecedorItem WHERE Categoria = ?", 0, sCategoriaItem, sCategoriaItemDescricao, objCategoriaFornecedor.sCategoria)
    If lErro <> AD_SQL_SUCESSO Then gError 90604

    'Lê o item da categoria, se estiver no BD
    lErro = Comando_BuscarProximo(lComandoSel)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 90605

    Do While lErro <> AD_SQL_SEM_DADOS

        'Excluir o item do BD
        lErro = Comando_ExecutarPos(lComandoDel, "DELETE FROM CategoriaFornecedorItem", lComandoSel)
        If lErro <> AD_SQL_SUCESSO Then gError 90606

        'Lê o item da categoria, se estiver no BD
        lErro = Comando_BuscarProximo(lComandoSel)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 90607

    Loop

    'Libera comandos
    Call Comando_Fechar(lComandoSel)
    Call Comando_Fechar(lComandoDel)

    CategoriaFornecedor_ExcluiItens = SUCESSO

    Exit Function

Erro_CategoriaFornecedor_ExcluiItens:

    CategoriaFornecedor_ExcluiItens = gErr

    Select Case gErr

        Case 90602, 90603
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 90604, 90605, 90607
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CATEGORIAFORNECEDORITEM", gErr, objCategoriaFornecedor.sCategoria)

        Case 90606
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CATEGORIAFORNECEDORITEM", gErr, objCategoriaFornecedor.sCategoria)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148426)

    End Select

    'Libera comandos
    Call Comando_Fechar(lComandoSel)
    Call Comando_Fechar(lComandoDel)

    Exit Function

End Function

Private Function DebitoRecCli_Insere_ChequePre(ByVal objChequePre As ClassChequePre, ByVal dValorRecebido As Double, ByVal dtDataEmissao As Date) As Long
'Insere Debito a Receber Cliente no BD consequente da sobra de um cheque pre que nao chegou a ser totalmente consumido pelas parcelas a receber.

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim lTransacao As Long
Dim lNumIntDoc As Long
Dim lNumProxDebitoRecCli As Long
Dim iIndice As Integer
Dim objDebitoRecCli As New ClassDebitoRecCli

On Error GoTo Erro_DebitoRecCli_Insere_ChequePre


    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 126276
    Next

    objDebitoRecCli.lCliente = objChequePre.lCliente
    objDebitoRecCli.iFilial = objChequePre.iFilial
    objDebitoRecCli.iFilialEmpresa = objChequePre.iFilialEmpresa
    objDebitoRecCli.sSiglaDocumento = SIGLA_CREDITO_CHEQUE_PRE
    objDebitoRecCli.dtDataEmissao = dtDataEmissao
    objDebitoRecCli.dValorTotal = Round(dValorRecebido, 2)
    objDebitoRecCli.dSaldo = objDebitoRecCli.dValorTotal
    objDebitoRecCli.dValorProdutos = objDebitoRecCli.dValorTotal
    
    lErro = CF("FilialCliente_Lock", objDebitoRecCli.lCliente, objDebitoRecCli.iFilial)
    If lErro <> SUCESSO Then gError 126277

    lErro = CF("Config_ObterAutomatico_EmTrans", "CPRConfig", "NUM_PROX_DEBITO_RECEBER", "DebitosRecCli", "NumTitulo", lNumIntDoc)
    If lErro <> SUCESSO Then gError 126278

    objDebitoRecCli.dSaldo = Round(objDebitoRecCli.dValorTotal - (objDebitoRecCli.dValorIRRF + objDebitoRecCli.dPISRetido + objDebitoRecCli.dCOFINSRetido + objDebitoRecCli.dCSLLRetido), 2)
    objDebitoRecCli.lNumIntDoc = lNumIntDoc
    objDebitoRecCli.lNumTitulo = lNumIntDoc

    'Insere novo registro na tabela DebitosRecCli
    lErro = Comando_Executar(alComando(1), "INSERT INTO DebitosRecCli (NumIntDoc, FilialEmpresa, Cliente, Filial, SiglaDocumento, NumTitulo, Status, DataEmissao, ValorTotal, Saldo, ValorSeguro, ValorFrete, OutrasDespesas, ValorProdutos, ValorICMS, ValorICMSSubst, ValorIPI, ValorIRRF, Observacao, PISRetido, COFINSRetido, CSLLRetido) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
        objDebitoRecCli.lNumIntDoc, objDebitoRecCli.iFilialEmpresa, objDebitoRecCli.lCliente, objDebitoRecCli.iFilial, objDebitoRecCli.sSiglaDocumento, objDebitoRecCli.lNumTitulo, STATUS_LANCADO, objDebitoRecCli.dtDataEmissao, objDebitoRecCli.dValorTotal, objDebitoRecCli.dSaldo, objDebitoRecCli.dValorSeguro, objDebitoRecCli.dValorFrete, objDebitoRecCli.dOutrasDespesas, objDebitoRecCli.dValorProdutos, objDebitoRecCli.dValorICMS, objDebitoRecCli.dValorICMSSubst, objDebitoRecCli.dValorIPI, objDebitoRecCli.dValorIRRF, objDebitoRecCli.sObservacao, objDebitoRecCli.dPISRetido, objDebitoRecCli.dCOFINSRetido, objDebitoRecCli.dCSLLRetido)
    If lErro <> AD_SQL_SUCESSO Then gError 126279

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    DebitoRecCli_Insere_ChequePre = SUCESSO

    Exit Function

Erro_DebitoRecCli_Insere_ChequePre:

    DebitoRecCli_Insere_ChequePre = gErr

    Select Case gErr

        Case 126275
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 126276
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 126277, 126278

        Case 126279
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_DEBITOSRECCLI", gErr, lNumIntDoc)

        Case 126280
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148427)

    End Select

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function


'##############################################
'Inserido por Wagner
Public Function Geracao_NomeArquivo_CobrancaEletronica(ByVal objCobrador As ClassCobrador, ByVal sDiretorio As String, sNomeArquivo As String, lSequencialArquivo As Long, Optional ByVal iCarteira As Integer = CARTEIRA_SIMPLES)

Dim lErro As Long
Dim lSequencialArq As Long
Dim sNomeAux As String
Dim bGerou As Boolean

On Error GoTo Erro_Geracao_NomeArquivo_CobrancaEletronica

    bGerou = False
    lSequencialArq = 0
    
    If gobjCRFAT.iCNABCEFNomeIniComE = MARCADO And objCobrador.iCodBanco = 104 Then
    
        sNomeAux = "E" & Format(gdtDataHoje, "DD") & FormataCpoNum(objCobrador.lCNABProxSeqArqCobr, 5) & ".REM"
    
    Else
    
        Do While Not bGerou
    
            lSequencialArq = lSequencialArq + 1
            'Gera o nome do arquivo\
            sNomeAux = IIf(iCarteira <> CARTEIRA_DESCONTADA, "CB", "DS") & Format(gdtDataHoje, "DDMM") & FormataCpoNum(lSequencialArq, 2) & ".REM"
    
            If Len(Trim(Dir(sDiretorio & "\" & sNomeAux))) = 0 Then bGerou = True
    
        Loop
        
    End If

    lSequencialArquivo = lSequencialArq
    
    sNomeArquivo = sDiretorio & "\" & sNomeAux

    Geracao_NomeArquivo_CobrancaEletronica = SUCESSO

    Exit Function

Erro_Geracao_NomeArquivo_CobrancaEletronica:

    Geracao_NomeArquivo_CobrancaEletronica = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148428)

    End Select

    Exit Function
    
End Function
'##############################################

'#############################################################################
'Inserido por Wagner
Public Function RelClienteEmAtraso_Prepara(ByVal iFilialEmpresa As Integer, lNumIntRel As Long, ByVal colCliente As Collection) As Long
'Insere registros na tabela RelClienteEmAtraso

Dim lErro As Long
Dim lTransacao As Long
Dim lComando As Long
Dim iIndice As Integer
Dim objCliente As ClassCliente

On Error GoTo Erro_RelClienteEmAtraso_Prepara

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 131984

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 131985

    'obtem numintrel
    lErro = CF("Config_ObterNumInt", "CRConfig", "NUM_PROX_REL_CLI_ATRASO", lNumIntRel)
    If lErro <> SUCESSO Then gError 131986
    
    For Each objCliente In colCliente
    
        'insere registro em RelClienteEmAtraso
        lErro = Comando_Executar(lComando, "INSERT INTO RelClientesEmAtraso ( NumIntRel, Cliente ) VALUES (?,?)", lNumIntRel, objCliente.lCodigo)
        If lErro <> AD_SQL_SUCESSO Then gError 131987

    Next
        
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 131988
    
    Call Comando_Fechar(lComando)
   
    RelClienteEmAtraso_Prepara = SUCESSO
     
    Exit Function
    
Erro_RelClienteEmAtraso_Prepara:

    RelClienteEmAtraso_Prepara = gErr
     
    Select Case gErr

        Case 131984
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
 
        Case 131985
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 131986
        
        Case 131987
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_RELCLIENTEEMTRASO", gErr)
        
        Case 131988
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148429)
     
    End Select
     
    Call Transacao_Rollback
    
    Call Comando_Fechar(lComando)
   
    Exit Function

End Function
'###############################################################################

'###############################################################################
'Inserido por Wagner
Function TitulosPag_Automatico(lNumTitulo As Long, ByVal sFiltro As String) As Long
'Gera o próximo Número de um TituloPag

Dim lErro As Long

On Error GoTo Erro_TitulosPag_Automatico

    lErro = CF("Config_ObterAutomatico2", "TitulosPag_Todos", "NumTitulo", lNumTitulo, sFiltro)
    If lErro <> SUCESSO Then gError 132156

    TitulosPag_Automatico = SUCESSO

    Exit Function

Erro_TitulosPag_Automatico:

    TitulosPag_Automatico = gErr

    Select Case gErr

        Case 132156

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148430)

    End Select

    Exit Function

End Function

Function NFiscalPag_Automatico(lNumNFiscal As Long, ByVal sFiltro As String) As Long
'Gera o próximo Número de uma NFPag

Dim lErro As Long

On Error GoTo Erro_NFiscalPag_Automatico

    lErro = CF("Config_ObterAutomatico2", "NFsPag_Todas", "NumNotaFiscal", lNumNFiscal, sFiltro)
    If lErro <> SUCESSO Then gError 132157

    NFiscalPag_Automatico = SUCESSO

    Exit Function

Erro_NFiscalPag_Automatico:

    NFiscalPag_Automatico = gErr

    Select Case gErr

        Case 132157

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148431)

    End Select

    Exit Function

End Function
'###############################################################################

Private Function Preenche_AgenciaCodCedente(sAgenciaCodCedente As String, ByVal objCCI As ClassContasCorrentesInternas, ByVal sNumerosCodBarra As String, ByVal sCodigoBarra As String, ByVal objCarteiraCobrador As ClassCarteiraCobrador) As Long

Dim lErro As Long, sCodCedente As String, sDVAgCta As String

On Error GoTo Erro_Preenche_AgenciaCodCedente

    'Montar o campo Agencia/Código do Cedente (Código do Cedente é o Número da Conta de Cobrança)
    sAgenciaCodCedente = Trim(objCCI.sAgencia)
    
    If Len(objCCI.sDVAgencia) > 0 And objCCI.iCodBanco <> 409 Then
       
       sAgenciaCodCedente = sAgenciaCodCedente & "-" & objCCI.sDVAgencia
    
    End If
    
    Select Case objCCI.iCodBanco
    
        Case 104
            'codigo cedente
            lErro = CF("CarteiraCobradorInfo_ObtemValor", objCarteiraCobrador.iCobrador, objCarteiraCobrador.iCodCarteiraCobranca, 7, sCodCedente)
            If lErro <> SUCESSO Then gError 130411
    
            If Len(sCodCedente) = 16 Then
                sAgenciaCodCedente = left(sCodCedente, 4) & "." & Mid(sCodCedente, 5, 3) & "." & Mid(sCodCedente, 8, 8) & "-" & right(sCodCedente, 1)
            Else
                Call Calcula_DV11(sCodCedente, 9, sDVAgCta)
                sAgenciaCodCedente = Trim(objCCI.sAgencia) & "/" & sCodCedente & "-" & sDVAgCta
            End If
            
        Case 356
    
            sAgenciaCodCedente = sAgenciaCodCedente & "/" & Trim(objCCI.sNumConta)
            sAgenciaCodCedente = sAgenciaCodCedente & "-" & Mid(sNumerosCodBarra, 20, 1)
    
        Case 33
    
            sAgenciaCodCedente = sAgenciaCodCedente & "/" & Mid(sCodigoBarra, 21, 7)
        
        Case 399
            If objCarteiraCobrador.iComRegistro <> 0 Then
                sAgenciaCodCedente = sAgenciaCodCedente & "/" & Trim(objCCI.sNumConta) & FormataCpoNum(objCCI.sDVNumConta, 1)
            Else
                lErro = CF("CarteiraCobradorInfo_ObtemValor", objCarteiraCobrador.iCobrador, objCarteiraCobrador.iCodCarteiraCobranca, 7, sCodCedente)
                If lErro <> SUCESSO Then gError 130411
                sAgenciaCodCedente = sCodCedente
            End If
            
        Case 745
            lErro = CF("CarteiraCobradorInfo_ObtemValor", objCarteiraCobrador.iCobrador, objCarteiraCobrador.iCodCarteiraCobranca, 7, sCodCedente)
            If lErro <> SUCESSO Then gError 130411
            
            sAgenciaCodCedente = Trim(objCCI.sAgencia) & "/" & sCodCedente
        
        Case 41
            'codigo cedente
            lErro = CF("CarteiraCobradorInfo_ObtemValor", objCarteiraCobrador.iCobrador, objCarteiraCobrador.iCodCarteiraCobranca, 33, sCodCedente)
            If lErro <> SUCESSO Then gError 130411
    
            sAgenciaCodCedente = sCodCedente
            
        Case Else
    
            sAgenciaCodCedente = sAgenciaCodCedente & "/" & Trim(objCCI.sNumConta)
            If Len(objCCI.sDVNumConta) > 0 Then
               
               sAgenciaCodCedente = sAgenciaCodCedente & "-" & objCCI.sDVNumConta
            
            Else
                
                If Len(objCCI.sDVAgConta) > 0 Then
                   
                   sAgenciaCodCedente = sAgenciaCodCedente & "-" & objCCI.sDVAgConta
                
                End If
            
            End If
    
    End Select
    
    Preenche_AgenciaCodCedente = SUCESSO
     
    Exit Function
    
Erro_Preenche_AgenciaCodCedente:

    Preenche_AgenciaCodCedente = gErr
     
    Select Case gErr
          
        Case 130411
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148432)
     
    End Select
     
    Exit Function

End Function

Public Function ImpressaoBoletos_Prepara(ByVal colInfoParcRec As Collection, ByVal lIdBoleto As Long, ByVal objCobrador As ClassCobrador, Optional ByVal bSemValorVcto As Boolean = False) As Long
'Preenche tabela RelBoleto para a Impressão de Boletos conforme lay out do Banco (impressora laser ou jato de tinta)

Dim lErro As Long, lTransacao As Long, lComando As Long, sNossoNumeroComDV As String
Dim objCCI As ClassContasCorrentesInternas, iMoedaReal As Integer, sDVNossoNumero As String
Dim objInfoParcRec As ClassInfoParcRec, objTituloReceber As ClassTituloReceber
Dim objParcelaReceber As ClassParcelaReceber, iNumCarteiraCobrador As Integer
Dim sAgenciaCodCedente As String, sDocNumero As String, sSimbolo As String
Dim lQuantidade As Long, sCampoLivre As String, sCodigoBarra As String
Dim sDVCodBarras As String, sNumerosCodBarra As String, objCliente As ClassCliente
Dim sInstrucoes As String, objEndereco As ClassEndereco, iSequencial As Integer
Dim sComando_SQL As String, objCarteiraCobrador As New ClassCarteiraCobrador
Dim objFilialCliente As ClassFilialCliente, objFilialEmpresa As New AdmFiliais, sCarteira As String
Dim sSacadorAvalista As String, sSacadorAvalistaCNPJ As String
Dim sCedente As String, sCedenteCNPJ As String
Dim colCobradorInfo As New Collection, objCodigoTexto As AdmCodigoNome

On Error GoTo Erro_ImpressaoBoletos_Prepara
    
    'Abrir Transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 134217

    'Abrir Comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 134218
    
    objFilialEmpresa.lCodEmpresa = glEmpresa
    objFilialEmpresa.iCodFilial = giFilialEmpresa
    lErro = CF("FilialEmpresa_Le", objFilialEmpresa)
    If lErro <> SUCESSO Then gError 134219
    
    'Obter conta corrente do cobrador
    Set objCCI = New ClassContasCorrentesInternas
    
    objCCI.iCodigo = objCobrador.iCodCCI
    
    lErro = CF("ContaCorrenteInt_Le", objCobrador.iCodCCI, objCCI)
    If lErro <> SUCESSO And lErro <> 11807 Then gError 134219
    
    If lErro = 11807 Then gError 134220
    
    sSimbolo = "R$"
    
    'Inicializar outras variáveis Padrão
    iMoedaReal = 9
    lQuantidade = 0
    
    sCedente = gsNomeEmpresa
    sCedenteCNPJ = objFilialEmpresa.sCgc
    sSacadorAvalista = ""
    sSacadorAvalistaCNPJ = ""
    
    If objCCI.iCodBanco = 33 Then
    
        lErro = CF("CobradorInfo_Le", objCobrador.iCodigo, colCobradorInfo)
        If lErro <> SUCESSO Then gError 134224
    
        For Each objCodigoTexto In colCobradorInfo
        
            If objCodigoTexto.iCodigo = 18 And Len(Trim(objCodigoTexto.sNome)) <> 0 Then
                sSacadorAvalista = sCedente
                sCedente = left(Trim(objCodigoTexto.sNome), 50)
            End If
            
            If objCodigoTexto.iCodigo = 19 And Len(Trim(objCodigoTexto.sNome)) <> 0 Then
                sSacadorAvalistaCNPJ = sCedenteCNPJ
                sCedenteCNPJ = left(Trim(objCodigoTexto.sNome), 14)
            End If
            
        Next
    
    End If
    
    'Para cada objInforparcRec marcado -> gravar boleto
    For Each objInfoParcRec In colInfoParcRec
            
        If objInfoParcRec.iMarcada = SELECIONAR_CHECADO Then

            'Ler dados relacionados à Parcela e ao Título conforme coleção
            Set objTituloReceber = New ClassTituloReceber
            Set objParcelaReceber = New ClassParcelaReceber
            
            objParcelaReceber.lNumIntDoc = objInfoParcRec.lNumIntParc
    
            lErro = CF("ParcelaReceber_Le", objParcelaReceber)
            If lErro <> SUCESSO And lErro <> 19147 Then gError ERRO_SEM_MENSAGEM
             
            'Se não encontrou ---> Procura em Baixadas
            If lErro = 19147 Then
                
                'Procura em Baixadas
                lErro = CF("ParcelaReceber_Baixada_Le", objParcelaReceber)
                If lErro <> SUCESSO And lErro <> 58559 Then gError ERRO_SEM_MENSAGEM
                
            End If
            
            objTituloReceber.lNumIntDoc = objParcelaReceber.lNumIntTitulo
            
            'Lê o Número do Título
            lErro = CF("TituloReceber_Le", objTituloReceber)
            If lErro <> SUCESSO And lErro <> 26061 Then gError ERRO_SEM_MENSAGEM
            
            'Se não encontrou ---> Procura em Baixados
            If lErro = 26061 Then
                
                lErro = CF("TituloReceberBaixado_Le", objTituloReceber)
                If lErro <> SUCESSO And lErro <> 56570 Then gError ERRO_SEM_MENSAGEM
            
            End If
            
            'COMENTADO POIS, EM CASO DE REPETICÃO DE NÚMERO/SIGLA/FILIAL, TRAZIA OS DADOS ERRADOS EM ALGUNS CASOS
'            objTituloReceber.iFilialEmpresa = objInfoParcRec.iFilialEmpresa
'            objTituloReceber.sSiglaDocumento = objInfoParcRec.sSiglaDocumento
'            objTituloReceber.lNumTitulo = objInfoParcRec.lNumTitulo
            
'            objParcelaReceber.iNumParcela = objInfoParcRec.iNumParcela
'
'            lErro = CF("ParcelasRec_Le_Todas_NumTitulo", objTituloReceber, objParcelaReceber)
'            If lErro <> SUCESSO Then gError 134222
'
            'Alterado por Wagner 19/02/2009
            'Considera o valor que veio da tela
            objParcelaReceber.dSaldo = objInfoParcRec.dValor
'
'            lErro = CF("TituloReceber_Le_Numero_Sigla", objTituloReceber)
'            If lErro <> SUCESSO Then gError 134223

            

            
            objCarteiraCobrador.iCobrador = objParcelaReceber.iCobrador
            objCarteiraCobrador.iCodCarteiraCobranca = objParcelaReceber.iCarteiraCobranca
            lErro = CF("CarteiraCobrador_Le", objCarteiraCobrador)
            If lErro <> SUCESSO And lErro <> 23551 Then gError 134223
            If lErro <> SUCESSO Then gError 134223 '??? trocar
            
            iNumCarteiraCobrador = objCarteiraCobrador.iNumCarteiraNoBanco
            
            Select Case objCCI.iCodBanco
            
                Case 399 'HSBC (a parcela fica num campo especifico)
                    sDocNumero = CStr(objInfoParcRec.lNumTitulo)
                
                Case Else
                    'Montar Número do Documento / Número da Parcela
                    sDocNumero = objInfoParcRec.lNumTitulo & "/" & objInfoParcRec.iNumParcela
                        
            End Select
            
            'Preencher o Campo Livre (varia de banco para banco)
            sCampoLivre = String(25, "0")
            
            lErro = Preenche_CampoLivre_Boleto(objCCI, objParcelaReceber, sCampoLivre, objCarteiraCobrador, bSemValorVcto)
            If lErro <> SUCESSO Then gError 134224
            
            'Calcular o Código de Barras
            sCodigoBarra = ""
            
            lErro = Calcula_CodigoBarras(objCCI.iCodBanco, iMoedaReal, objParcelaReceber.dSaldo, objParcelaReceber.dtDataVencimento, sCampoLivre, sCodigoBarra, bSemValorVcto)
            If lErro <> SUCESSO Then gError 134225
            
            'Calcular os Números da Linha Digitável
            sNumerosCodBarra = ""
            
            lErro = Calcula_NumerosCodBarras(sCodigoBarra, sNumerosCodBarra)
            If lErro <> SUCESSO Then gError 134226

            'Obter dados do cliente
            Set objCliente = New ClassCliente
           
            objCliente.lCodigo = objTituloReceber.lCliente
            
            lErro = CF("Cliente_Le", objCliente)
            If lErro <> SUCESSO Then gError 134227
            
            Set objFilialCliente = New ClassFilialCliente
            objFilialCliente.lCodCliente = objTituloReceber.lCliente
            objFilialCliente.iCodFilial = objTituloReceber.iFilial
            
            lErro = CF("FilialCliente_Le", objFilialCliente)
            If lErro <> SUCESSO Then gError 134227
            
            'Obter Instruções do Boleto
            sInstrucoes = ""
            
            lErro = CF("Preenche_Instrucoes_Boleto", objTituloReceber, objParcelaReceber, sSimbolo, sInstrucoes)
            If lErro <> SUCESSO Then gError 134228

            'Obter endereço do endereço de cobrança,
            'se estiver em branco, trazer o endereço principal
            Set objEndereco = New ClassEndereco
            
            lErro = CF("EnderecoCobranca_Le_Cliente", objTituloReceber.lCliente, objTituloReceber.iFilial, objEndereco)
            If lErro <> SUCESSO Then gError 134229
            
            lErro = NossoNumero_ObtemDV(objCCI, objParcelaReceber.sNumTitCobrador, iNumCarteiraCobrador, sCampoLivre, objParcelaReceber, sDVNossoNumero)
            If lErro <> SUCESSO Then gError 134229
            
'            If objCCI.iCodBanco <> 1 Or Len(Trim(objParcelaReceber.sNumTitCobrador)) <> 17 Then
            If (objCCI.iCodBanco = 1 And Len(Trim(objParcelaReceber.sNumTitCobrador)) = 12) Then
            'BB de 12 posições já tem o DV do nosso número
                sNossoNumeroComDV = objParcelaReceber.sNumTitCobrador
            Else
                sNossoNumeroComDV = objParcelaReceber.sNumTitCobrador & sDVNossoNumero
            End If
'            Else
'                sNossoNumeroComDV = objParcelaReceber.sNumTitCobrador 'vide e-mail da kgf de 11/06/12 para nao colocar dv qdo o nosso numero tiver 17 posicoes
'            End If
            
            Call Preenche_AgenciaCodCedente(sAgenciaCodCedente, objCCI, sNumerosCodBarra, sCodigoBarra, objCarteiraCobrador)
            
            sCarteira = CStr(iNumCarteiraCobrador)
            If objCCI.iCodBanco = 104 Then
            
                If objCarteiraCobrador.iComRegistro Then
                    sCarteira = "RG"
                Else
                    sCarteira = "SR"
                End If
                        
                sNossoNumeroComDV = IIf(objCarteiraCobrador.iComRegistro, "1", "2") & "4/" & objParcelaReceber.sNumTitCobrador & "-" & sDVNossoNumero
                       
            End If
            
            'Gravar na Tabela RelBoleto
            sComando_SQL = "INSERT INTO RelBoleto(IdImpressaoBoleto, Seq, NumIntParc, "
            sComando_SQL = sComando_SQL & "Vencimento, Cedente, AgenciaCodCedente, "
            sComando_SQL = sComando_SQL & "NossoNumero, DocData, DocNumero, DocEspecie, "
            sComando_SQL = sComando_SQL & "DocAceite, DataProc, Carteira, "
            sComando_SQL = sComando_SQL & "EspecieMoeda, Quantidade, Valor, Instrucoes, "
            sComando_SQL = sComando_SQL & "CodigoBarra, NumerosCodBarra, "
            sComando_SQL = sComando_SQL & "SacadoNome, SacadoEndereco, SacadoBairro, "
            sComando_SQL = sComando_SQL & "SacadoCEP, SacadoCidade, SacadoUF, SacadoCNPJ, CedenteCNPJ, Parcela, NumParcelas, SacadorAvalista, SacadorAvalistaCNPJ, FilialEmpresa, FillEmpCodEnd) "
            sComando_SQL = sComando_SQL & "VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"
            
            lErro = Comando_Executar(lComando, sComando_SQL, _
                    lIdBoleto, iSequencial, objInfoParcRec.lNumIntParc, _
                    objParcelaReceber.dtDataVencimento, left(sCedente, 50), _
                    sAgenciaCodCedente, sNossoNumeroComDV, _
                    objTituloReceber.dtDataEmissao, sDocNumero, "DM", _
                    IIf(objParcelaReceber.iAceite = 0, "N", "S"), _
                    gdtDataAtual, sCarteira, _
                    sSimbolo, lQuantidade, objParcelaReceber.dSaldo, _
                    sInstrucoes, sCodigoBarra, sNumerosCodBarra, _
                    left(objCliente.sRazaoSocial, 50), left(objEndereco.sEndereco, 50), left(objEndereco.sBairro, 30), _
                    objEndereco.sCEP, left(objEndereco.sCidade, 30), objEndereco.sSiglaEstado, objFilialCliente.sCgc, sCedenteCNPJ, objParcelaReceber.iNumParcela, objTituloReceber.iNumParcelas, left(sSacadorAvalista, 50), sSacadorAvalistaCNPJ, objFilialEmpresa.iCodFilial, objFilialEmpresa.objEndereco.lCodigo)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 134230
            
            'Incrementar sequencial
            iSequencial = iSequencial + 1
        
        End If
        
    Next
    
    'Encerrar Comando
    Call Comando_Fechar(lComando)
    
    'Encerrar Transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then Error 134231


    
    ImpressaoBoletos_Prepara = SUCESSO

    Exit Function

Erro_ImpressaoBoletos_Prepara:

    ImpressaoBoletos_Prepara = gErr

    Select Case gErr
    
        Case 134217
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 134218
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 134219, 134221 To 134229
            'erro tratado nas rotinas chamadas
        
        Case 134220
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTACORRENTE_COBRADOR_NAO_ENCONTRADA", gErr, objCobrador.iCodigo)

        Case 134230
            Call Rotina_Erro(vbOKOnly, "ERRO_GRAVACAO_RELATORIO", gErr)

        Case 134231
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case ERRO_SEM_MENSAGEM

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148433)

    End Select
    
    Call Transacao_Rollback

    'Encerrar Comando
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Private Function Calcula_CodigoBarras(ByVal sBanco As String, ByVal sMoeda As String, ByVal dValor As Double, ByVal dtVencimento As Date, ByVal sLivre As String, sCodigoBarra As String, ByVal bSemValorVcto As Boolean) As Long
'Calcula o Código de Barras para geração de Boleto Bancário - Alterado por Jorge Specian - 08/03/2005

Dim lErro As Long
Dim sCodigoSequencia As String
Dim dtDataBase As Date
Dim iFator As Integer
Dim iDac As Integer

On Error GoTo Erro_Calcula_CodigoBarras
    
    If bSemValorVcto Then
    
        iFator = 0
        If dValor < 2 Then
            dValor = 0
        Else
            dValor = Arredonda_Moeda(dValor * 100, 0)
        End If
    
    Else
    
        'Database para calculo do fator
        dtDataBase = CDate("7/10/1997")
        iFator = DateDiff("d", dtDataBase, Format(dtVencimento, "dd/mm/yyyy"))
        dValor = Arredonda_Moeda(dValor * 100, 0)
    
    End If
    sBanco = Format(sBanco, "000")
    sLivre = Format(sLivre, "0000000000000000000000000")
    
    'Sequencia sem o DV
    sCodigoSequencia = sBanco & sMoeda & Format(iFator, "0000") & Format(dValor, "0000000000") & sLivre
    
    'Calculo do DV
    lErro = Calcula_DV_CodBarras(sCodigoSequencia, iDac)
    If lErro <> SUCESSO Then gError 134232
    
    'Monta a sequencia para o codigo de barras com o DV
    sCodigoBarra = left(sCodigoSequencia, 4) & iDac & right(sCodigoSequencia, 39)

    Calcula_CodigoBarras = SUCESSO

    Exit Function
    
Erro_Calcula_CodigoBarras:

    Calcula_CodigoBarras = gErr
    
    Select Case gErr

        Case 134232
            'erro tratado na rotina chamada
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148434)

    End Select
    
    Exit Function
    
End Function

Private Function Calcula_DV_CodBarras(ByVal sSequencia As String, iDac As Integer) As Long
'Calcula o Dígito Verificador do Código de Barras do Boleto Bancário - Alterado por Jorge Specian - 08/03/2005
'Cálculo através do módulo 11, com base de cálculo igual a 9

Dim lErro As Long
Dim iContador As Integer
Dim iNumero As Integer
Dim iTotalNumero As Integer
Dim iMultiplicador As Integer
Dim iResto As Integer
Dim iResultado As Integer
Dim sCaracter As String

On Error GoTo Erro_Calcula_DV_CodBarras

    iMultiplicador = 2
    
    For iContador = 1 To 43
       sCaracter = Mid(right(sSequencia, iContador), 1, 1)
       If iMultiplicador > 9 Then
              iMultiplicador = 2
             iNumero = 0
       End If
       iNumero = sCaracter * iMultiplicador
       iTotalNumero = iTotalNumero + iNumero
       iMultiplicador = iMultiplicador + 1
    Next
    
    iResto = iTotalNumero Mod 11
    
    iResultado = 11 - iResto
    
    If iResultado = 10 Or iResultado = 11 Then
        iDac = 1
    Else
        iDac = iResultado
    End If

    Calcula_DV_CodBarras = SUCESSO

    Exit Function

Erro_Calcula_DV_CodBarras:

    Calcula_DV_CodBarras = gErr
    
    Select Case gErr
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148435)
    
    End Select
    
    Exit Function

End Function

Function Calcula_NumerosCodBarras(ByVal sSequencia As String, sNumerosCodBarra As String) As Long
'Calcula os Números da Linha Digitável de um Boleto Bancário - Alterado por Jorge Specian - 08/03/2005

Dim lErro As Long
Dim sSeq1 As String
Dim sSeq2 As String
Dim sSeq3 As String
Dim sDVCodBarras As String
Dim sFatorVenc As String
Dim sValor As String
Dim iDv1 As Integer
Dim iDv2 As Integer
Dim iDv3 As Integer

On Error GoTo Erro_Calcula_NumerosCodBarras
        
    'Separa as sequencias
    sSeq1 = left(sSequencia, 4) & Mid(sSequencia, 20, 5)
    sDVCodBarras = Mid(sSequencia, 5, 1)
    sFatorVenc = Mid(sSequencia, 6, 4)
    sValor = Mid(sSequencia, 10, 10)
    sSeq2 = Mid(sSequencia, 25, 10)
    sSeq3 = right(sSequencia, 10)
    
    'Calcula os DVs
    lErro = Calcula_DV10(sSeq1, iDv1)
    If lErro <> SUCESSO Then gError 134233
    
    lErro = Calcula_DV10(sSeq2, iDv2)
    If lErro <> SUCESSO Then gError 134234
    
    lErro = Calcula_DV10(sSeq3, iDv3)
    If lErro <> SUCESSO Then gError 134235
    
    'Formata as sequencias
    sSeq1 = left(sSeq1 & iDv1, 5) & "." & right(sSeq1 & iDv1, 5)
    sSeq2 = left(sSeq2 & iDv2, 5) & "." & right(sSeq2 & iDv2, 6)
    sSeq3 = left(sSeq3 & iDv3, 5) & "." & right(sSeq3 & iDv3, 6)
    
    'Concatena as sequencias
    sNumerosCodBarra = sSeq1 & " " & sSeq2 & " " & sSeq3 & " " & sDVCodBarras & " " & sFatorVenc & sValor

    Calcula_NumerosCodBarras = SUCESSO

    Exit Function
    
Erro_Calcula_NumerosCodBarras:

    Calcula_NumerosCodBarras = gErr
    
    Select Case gErr
    
        Case 134233, 134234, 134235
            'erro tratado na rotina chamada

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148436)

    End Select
    
    Exit Function
    
End Function

Function Calcula_DV10(ByVal sSequencia As String, iDigito As Integer) As Long
'Calcula o Digito Verificador no Módulo 10 para Linha Digitável de um Boleto Bancário
'Alterado por Jorge Specian - 09/03/2005

Dim lErro As Long
Dim iContador As Integer
Dim iNumero As Integer
Dim iTotalNumero As Integer
Dim iMultiplicador As Integer
Dim DezenaSuperior As Integer

On Error GoTo Erro_Calcula_DV10

    'Se nao for um valor numerico -> erro
    If Not IsNumeric(sSequencia) Then gError 134236
        
    'Inicia o multiplicador
    iMultiplicador = 2
    
    'Pega cada caracter do numero a partir da direita
    For iContador = Len(sSequencia) To 1 Step -1
        
        'Extrai o caracter e multiplica pelo multiplicador
        iNumero = Val(Mid(sSequencia, iContador, 1)) * iMultiplicador
        
        'Se o resultado for maior que nove soma os algarismos do resultado
        If iNumero > 9 Then
            
            iNumero = Val(left(iNumero, 1)) + Val(right(iNumero, 1))
        
        End If
        
        'Soma o resultado para totalização
        iTotalNumero = iTotalNumero + iNumero
        
        'Se o multiplicador for igual a 2 atribuir valor 1 se for 1 atribui 2
        iMultiplicador = IIf(iMultiplicador = 2, 1, 2)
        
    Next

    If iTotalNumero < 10 Then
        DezenaSuperior = 10
    Else
        DezenaSuperior = 10 * (Val(left(CStr(iTotalNumero), 1)) + 1)
    End If
    
    iDigito = DezenaSuperior - iTotalNumero

    'verifica as exceções ( 10 -> DV=0 )
    If iDigito = 10 Then iDigito = 0
    
    Calcula_DV10 = SUCESSO

    Exit Function

Erro_Calcula_DV10:

    Calcula_DV10 = gErr
    
    Select Case gErr
        
        Case 134236
            Call Rotina_Erro(vbOKOnly, "ERRO_SEQUENCIA_NAO_NUMERICO", gErr, sSequencia)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148437)
    
    End Select
    
    Exit Function

End Function


Private Function Preenche_CampoLivre_Boleto(ByVal objCCI As ClassContasCorrentesInternas, ByVal objParcelaReceber As ClassParcelaReceber, sCampoLivre As String, ByVal objCarteiraCobrador As ClassCarteiraCobrador, ByVal bSemValorVcto As Boolean) As Long
'Preenche o Campo Livre para compor o Código de Barras e a Linha Digitável de um Boleto Bancário
'Este campo pode variar de Banco para Banco - Jorge Specian - 09/03/2005


Dim lErro As Long

On Error GoTo Erro_Preenche_CampoLivre_Boleto

    Select Case objCCI.iCodBanco
    
        Case 1   'Banco do Brasil
            lErro = Preenche_Boleto_BB(objCCI, objParcelaReceber, sCampoLivre, objCarteiraCobrador, bSemValorVcto)
            If lErro <> SUCESSO Then gError 134237
            
        Case 104 'Caixa Econômica Federal
            lErro = Preenche_Boleto_CEF(objCCI, objParcelaReceber, sCampoLivre, objCarteiraCobrador, bSemValorVcto)
            If lErro <> SUCESSO Then gError 134238
        
        Case 237 'BRADESCO
            lErro = Preenche_Boleto_BRADESCO(objCCI, objParcelaReceber, sCampoLivre, objCarteiraCobrador, bSemValorVcto)
            If lErro <> SUCESSO Then gError 134239
        
        Case 275 'Banco Real
'            lErro = Preenche_Boleto_REAL(objCCI, objParcelaReceber, sCampoLivre, iNumCarteiraCobrador)
            If lErro <> SUCESSO Then gError 134240
        
        Case 341 'Banco Itaú
            lErro = Preenche_Boleto_ITAU(objCCI, objParcelaReceber, sCampoLivre, objCarteiraCobrador, bSemValorVcto)
            If lErro <> SUCESSO Then gError 134241
        
        Case 356 'Real ABN Amro
            lErro = Preenche_Boleto_356(objCCI, objParcelaReceber, sCampoLivre, objCarteiraCobrador, bSemValorVcto)
            If lErro <> SUCESSO Then gError 134242
        
        Case 399 'HSBC
            lErro = Preenche_Boleto_HSBC(objCCI, objParcelaReceber, sCampoLivre, objCarteiraCobrador, bSemValorVcto)
            If lErro <> SUCESSO Then gError 134242
        
        Case 409 'UNIBANCO
            lErro = Preenche_Boleto_Unibanco(objCCI, objParcelaReceber, sCampoLivre, objCarteiraCobrador, bSemValorVcto)
            If lErro <> SUCESSO Then gError 134243
        
        Case 745 'CITIBANK
            lErro = Preenche_Boleto_Citibank(objCCI, objParcelaReceber, sCampoLivre, objCarteiraCobrador, bSemValorVcto)
            If lErro <> SUCESSO Then gError 134243
        
        Case 8, 33, 353 'Santander
            lErro = Preenche_Boleto_Santander(objCCI, objParcelaReceber, sCampoLivre, objCarteiraCobrador, bSemValorVcto)
            If lErro <> SUCESSO Then gError 134243
        
        Case 41 'Banrisul
            lErro = Preenche_Boleto_Banrisul(objCCI, objParcelaReceber, sCampoLivre, objCarteiraCobrador, bSemValorVcto)
            If lErro <> SUCESSO Then gError 134243
            
        Case 453, 749
            lErro = Preenche_Boleto_Rural(objCCI, objParcelaReceber, sCampoLivre, objCarteiraCobrador, bSemValorVcto)
            If lErro <> SUCESSO Then gError 134243
            
        Case 422
            lErro = Preenche_Boleto_Safra(objCCI, objParcelaReceber, sCampoLivre, objCarteiraCobrador, bSemValorVcto)
            If lErro <> SUCESSO Then gError 134243
            
        Case 748
            lErro = Preenche_Boleto_SiCred(objCCI, objParcelaReceber, sCampoLivre, objCarteiraCobrador, bSemValorVcto)
            If lErro <> SUCESSO Then gError 134243
            
        Case 85
            lErro = Preenche_Boleto_Cecred(objCCI, objParcelaReceber, sCampoLivre, objCarteiraCobrador, bSemValorVcto)
            If lErro <> SUCESSO Then gError 134243
            
        Case Else
'            lErro = Preenche_Boleto_Generico(objCCI, objParcelaReceber, sCampoLivre, iNumCarteiraCobrador)
            If lErro <> SUCESSO Then gError 134244
    
    End Select
    
    Preenche_CampoLivre_Boleto = SUCESSO

    Exit Function

Erro_Preenche_CampoLivre_Boleto:

    Preenche_CampoLivre_Boleto = gErr
    
    Select Case gErr
        
        Case 134237 To 134244
            'erros tratados nas rotinas chamadas
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148438)
    
    End Select
    
    Exit Function

End Function

Public Function Preenche_Boleto_ITAU(ByVal objCCI As ClassContasCorrentesInternas, ByVal objParcelaReceber As ClassParcelaReceber, sCampoLivre As String, ByVal objCarteiraCobrador As ClassCarteiraCobrador, ByVal bSemValorVcto As Boolean) As Long
'Preenche o Campo Livre para compor o Código de Barras e a Linha Digitável de um Boleto Bancário
'Esta função devolve o Campo Livre específico para o Banco ITAU - Jorge Specian - 09/03/2005

Dim lErro As Long
Dim sCarteira As String
Dim sNossoNumero As String
Dim sAgencia As String
Dim sConta As String
Dim sZeros As String
Dim sSeq_CalculoDV As String
Dim iDV_1 As Integer
Dim iDV_2 As Integer
Dim iTamanho_NossoNumero As Integer
Dim iTamanho_Agencia As Integer
Dim iTamanho_Conta As Integer

On Error GoTo Erro_Preenche_Boleto_ITAU

    'Inicializa variáveis com tamanho dos campos
    iTamanho_NossoNumero = 8
    iTamanho_Agencia = 4
    iTamanho_Conta = 5

    'Valida e formata valores do Campo Livre
    sCarteira = Format(objCarteiraCobrador.iNumCarteiraNoBanco, "000")
    
    If Not IsNumeric(Trim(objParcelaReceber.sNumTitCobrador)) Or Len(Trim(objParcelaReceber.sNumTitCobrador)) > iTamanho_NossoNumero Then gError 134245
    sNossoNumero = Format(left(Trim(objParcelaReceber.sNumTitCobrador), iTamanho_NossoNumero), "00000000")
    
    If Not IsNumeric(Trim(objCCI.sAgencia)) Or Len(Trim(objCCI.sAgencia)) > iTamanho_Agencia Then gError 134246
    sAgencia = Format(left(Trim(objCCI.sAgencia), iTamanho_Agencia), "0000")

    If Not IsNumeric(Trim(objCCI.sNumConta)) Or Len(Trim(objCCI.sNumConta)) > iTamanho_Conta Then gError 134247
    sConta = Format(left(Trim(objCCI.sNumConta), iTamanho_Conta), "00000")
    
    'Calcula DV (AGÊNCIA/CONTA (sem DAC) / CARTEIRA/NOSSO NÚMERO)
    Select Case objCarteiraCobrador.iNumCarteiraNoBanco
    
       Case 126, 131, 146, 150, 168
          
          'excessão
          sSeq_CalculoDV = sCarteira & sNossoNumero
          
       Case Else
       
          sSeq_CalculoDV = sAgencia & sConta & sCarteira & sNossoNumero
    
    End Select
    
    lErro = Calcula_DV10(sSeq_CalculoDV, iDV_1)
    If lErro <> SUCESSO Then gError 134248
    
    iDV_2 = Val(objCCI.sDVNumConta)
    
    sZeros = String(3, "0")
    
    'Concatena a sequencia
    sCampoLivre = sCarteira & sNossoNumero & iDV_1 & sAgencia & sConta & iDV_2 & sZeros

    Preenche_Boleto_ITAU = SUCESSO

    Exit Function

Erro_Preenche_Boleto_ITAU:

    Preenche_Boleto_ITAU = gErr
    
    Select Case gErr
        
        Case 134245
            Call Rotina_Erro(vbOKOnly, "ERRO_NOSSONUMERO_NAO_NUMERICO", gErr, iTamanho_NossoNumero)
        
        Case 134246
            Call Rotina_Erro(vbOKOnly, "ERRO_AGENCIA_NAO_NUMERICO", gErr, iTamanho_Agencia)
        
        Case 134247
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTA_NAO_NUMERICO", gErr, iTamanho_Conta)
        
        Case 134248
            'erro tratado na rotina chamada
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148439)
    
    End Select
    
    Exit Function

End Function

Private Function Preenche_Boleto_BRADESCO(ByVal objCCI As ClassContasCorrentesInternas, ByVal objParcelaReceber As ClassParcelaReceber, sCampoLivre As String, ByVal objCarteiraCobrador As ClassCarteiraCobrador, ByVal bSemValorVcto As Boolean) As Long
'Preenche o Campo Livre para compor o Código de Barras e a Linha Digitável de um Boleto Bancário
'Esta função devolve o Campo Livre específico para o Banco BRADESCO - Jorge Specian - 09/03/2005

Dim lErro As Long
Dim sCarteira As String
Dim sNossoNumero As String
Dim sAgencia As String
Dim sConta As String
Dim sZeros As String
Dim iTamanho_NossoNumero As Integer
Dim iTamanho_Agencia As Integer
Dim iTamanho_Conta As Integer

On Error GoTo Erro_Preenche_Boleto_BRADESCO

    'Inicializa variáveis com tamanho dos campos
    iTamanho_NossoNumero = 11
    iTamanho_Agencia = 4
    iTamanho_Conta = 7

    'Valida e formata valores do Campo Livre
    sCarteira = Format(objCarteiraCobrador.iNumCarteiraNoBanco, "00")
    
    If Not IsNumeric(Trim(objParcelaReceber.sNumTitCobrador)) Or Len(Trim(objParcelaReceber.sNumTitCobrador)) > iTamanho_NossoNumero Then gError 134249
    sNossoNumero = Format(left(Trim(objParcelaReceber.sNumTitCobrador), iTamanho_NossoNumero), "00000000000")
    
    If Not IsNumeric(Trim(objCCI.sAgencia)) Or Len(Trim(objCCI.sAgencia)) > iTamanho_Agencia Then gError 134250
    sAgencia = Format(left(Trim(objCCI.sAgencia), iTamanho_Agencia), "0000")

    If Not IsNumeric(Trim(objCCI.sNumConta)) Or Len(Trim(objCCI.sNumConta)) > iTamanho_Conta Then gError 134251
    sConta = Format(left(Trim(objCCI.sNumConta), iTamanho_Conta), "0000000")
        
    sZeros = String(1, "0")
    
    'Concatena a sequencia
    sCampoLivre = sAgencia & sCarteira & sNossoNumero & sConta & sZeros

    Preenche_Boleto_BRADESCO = SUCESSO

    Exit Function

Erro_Preenche_Boleto_BRADESCO:

    Preenche_Boleto_BRADESCO = gErr
    
    Select Case gErr
        
        Case 134249
            Call Rotina_Erro(vbOKOnly, "ERRO_NOSSONUMERO_NAO_NUMERICO", gErr, iTamanho_NossoNumero)
        
        Case 134250
            Call Rotina_Erro(vbOKOnly, "ERRO_AGENCIA_NAO_NUMERICO", gErr, iTamanho_Agencia)
        
        Case 134251
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTA_NAO_NUMERICO", gErr, iTamanho_Conta)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148440)
    
    End Select
    
    Exit Function

End Function

Public Function Preenche_Instrucoes_Boleto(ByVal objTituloReceber As ClassTituloReceber, ByVal objParcelaReceber As ClassParcelaReceber, ByVal sSimbolo As String, sInstrucoes As String) As Long
'Montar o campo Instruções do Boleto com base em Juros e Multa e, Descontos
'Jorge Specian - 10/03/2005

Dim lErro As Long
Dim sInstrucao_MultaJuros As String
Dim colCodigoDescricao As New AdmColCodigoNome
Dim objCodDescricao As AdmCodigoNome
Dim sInstrucao_Desconto1 As String
Dim sInstrucao_Desconto2 As String
Dim sInstrucao_Desconto3 As String

On Error GoTo Erro_Preenche_Instrucoes_Boleto
   
    'Verificar em objTituloReceber se há valor > 0 em PercMulta
    If objTituloReceber.dPercMulta > 0 Then
      
        'Se houver -> Montar instrução com valor da Multa
        sInstrucao_MultaJuros = "Após o vencimento multa de " & sSimbolo & Format(objParcelaReceber.dSaldo * objTituloReceber.dPercMulta, "Standard")
        
    End If
    
    'Verificar em objTituloReceber se há valor > 0 em PercJurosDiarios
    If objTituloReceber.dPercJurosDiario > 0 Then
      
        'Se houver -> Montar instrução com valor do Juros
        If Len(sInstrucao_MultaJuros) = 0 Then
            
            sInstrucao_MultaJuros = sInstrucao_MultaJuros & "Após o vencimento "
            
        Else
            
            sInstrucao_MultaJuros = sInstrucao_MultaJuros & " e "
            
        End If
        
        sInstrucao_MultaJuros = sInstrucao_MultaJuros & "juros de " & sSimbolo & Format((objParcelaReceber.dSaldo * objTituloReceber.dPercJurosDiario), "Standard") & " ao dia"
       
    End If
    
    If Len(Trim(sInstrucao_MultaJuros)) <> 0 Then
        If Len(sInstrucao_MultaJuros) < TAMANHO_CADA_INSTRUCAO_BOLETO * 2 Then
            sInstrucao_MultaJuros = FormataCpoTexto(sInstrucao_MultaJuros, TAMANHO_CADA_INSTRUCAO_BOLETO * 2)
        End If
    End If
    
    'Lê o código e a descrição de todos os Tipos de Desconto
    lErro = CF("Cod_Nomes_Le", "TiposDeDesconto", "Codigo", "Descricao", STRING_TIPOSDEDESCONTO_DESCRICAO, colCodigoDescricao)
    If lErro <> SUCESSO Then Error 134252
    
    'Compara com os Descontos cadastrados em objParcelaReceber
    For Each objCodDescricao In colCodigoDescricao
        
        'Verifica se o Codigo da coleção é o Desconto1Codigo
        If objCodDescricao.iCodigo = objParcelaReceber.iDesconto1Codigo Then
            
            'Caso Positivo -> vamos montar a sInstrucao_Desconto1
            sInstrucao_Desconto1 = "Até " & objParcelaReceber.dtDesconto1Ate & " descontar "
            
            If objCodDescricao.iCodigo = VALOR_FIXO Or objCodDescricao.iCodigo = VALOR_ANT_DIA Or objCodDescricao.iCodigo = VALOR_ANT_DIA_UTIL Then
                
                sInstrucao_Desconto1 = sInstrucao_Desconto1 & sSimbolo & Format(objParcelaReceber.dDesconto1Valor, "Standard")
            
            ElseIf objCodDescricao.iCodigo = Percentual Or objCodDescricao.iCodigo = PERC_ANT_DIA Or objCodDescricao.iCodigo = PERC_ANT_DIA_UTIL Then
                
                sInstrucao_Desconto1 = sInstrucao_Desconto1 & Format(objParcelaReceber.dDesconto1Valor, "Percent")
            
            End If
            
            'Não tem como colocar essa descrição e ficar em 50 caracteres, para cortar é melhor nem colocar até porque fica redundante
            'exemplo: Até 01/01/2016 descontar 10,00% (Percentual até a data informada)
            'sInstrucao_Desconto1 = sInstrucao_Desconto1 & " (" & objCodDescricao.sNome & ")"
            
            'Limitar cada instrução, conforme TAMANHO_CADA_INSTRUCAO_BOLETO
            sInstrucao_Desconto1 = FormataCpoTexto(sInstrucao_Desconto1, TAMANHO_CADA_INSTRUCAO_BOLETO)
            
        End If

        'Verifica se o Codigo da coleção é o Desconto2Codigo
        If objCodDescricao.iCodigo = objParcelaReceber.iDesconto2Codigo Then
            
            'Caso Positivo -> vamos montar a sInstrucao_Desconto2
            sInstrucao_Desconto2 = "Até " & objParcelaReceber.dtDesconto2Ate & " descontar "
            
            If objCodDescricao.iCodigo = VALOR_FIXO Or objCodDescricao.iCodigo = VALOR_ANT_DIA Or objCodDescricao.iCodigo = VALOR_ANT_DIA_UTIL Then
                
                sInstrucao_Desconto2 = sInstrucao_Desconto2 & sSimbolo & Format(objParcelaReceber.dDesconto2Valor, "Standard")
            
            ElseIf objCodDescricao.iCodigo = Percentual Or objCodDescricao.iCodigo = PERC_ANT_DIA Or objCodDescricao.iCodigo = PERC_ANT_DIA_UTIL Then
                
                sInstrucao_Desconto2 = sInstrucao_Desconto2 & Format(objParcelaReceber.dDesconto2Valor, "Percent")
            
            End If
            
            'Não tem como colocar essa descrição e ficar em 50 caracteres, para cortar é melhor nem colocar até porque fica redundante
            'exemplo: Até 01/01/2016 descontar 10,00% (Percentual até a data informada)
            'sInstrucao_Desconto2 = sInstrucao_Desconto2 & " (" & objCodDescricao.sNome & ")"
            
            'Limitar cada instrução, conforme TAMANHO_CADA_INSTRUCAO_BOLETO
            sInstrucao_Desconto2 = FormataCpoTexto(sInstrucao_Desconto2, TAMANHO_CADA_INSTRUCAO_BOLETO)
            
        End If

        'Verifica se o Codigo da coleção é o Desconto3Codigo
        If objCodDescricao.iCodigo = objParcelaReceber.iDesconto3Codigo Then
        
            'Caso Positivo -> vamos montar a sInstrucao_Desconto3
            sInstrucao_Desconto3 = "Até " & objParcelaReceber.dtDesconto3Ate & " descontar "
            
            If objCodDescricao.iCodigo = VALOR_FIXO Or objCodDescricao.iCodigo = VALOR_ANT_DIA Or objCodDescricao.iCodigo = VALOR_ANT_DIA_UTIL Then
                
                sInstrucao_Desconto3 = sInstrucao_Desconto3 & sSimbolo & Format(objParcelaReceber.dDesconto3Valor, "Standard")
            
            ElseIf objCodDescricao.iCodigo = Percentual Or objCodDescricao.iCodigo = PERC_ANT_DIA Or objCodDescricao.iCodigo = PERC_ANT_DIA_UTIL Then
                
                sInstrucao_Desconto3 = sInstrucao_Desconto3 & Format(objParcelaReceber.dDesconto3Valor, "Percent")
            
            End If

            'Não tem como colocar essa descrição e ficar em 50 caracteres, para cortar é melhor nem colocar até porque fica redundante
            'exemplo: Até 01/01/2016 descontar 10,00% (Percentual até a data informada)
            'sInstrucao_Desconto3 = sInstrucao_Desconto1 & " (" & objCodDescricao.sNome & ")"
            
            'Limitar cada instrução, conforme TAMANHO_CADA_INSTRUCAO_BOLETO
            sInstrucao_Desconto3 = FormataCpoTexto(sInstrucao_Desconto3, TAMANHO_CADA_INSTRUCAO_BOLETO)
            
        End If

    Next
    
    'Montar o campo todo, concatenando as instruções
    sInstrucoes = sInstrucao_MultaJuros & sInstrucao_Desconto1 & sInstrucao_Desconto2 & sInstrucao_Desconto3
    
    'Limitar o campo instrução, conforme TAMANHO_CAMPO_INSTRUCOES
    sInstrucoes = left(sInstrucoes, TAMANHO_CAMPO_INSTRUCOES)

    Preenche_Instrucoes_Boleto = SUCESSO

    Exit Function

Erro_Preenche_Instrucoes_Boleto:

    Preenche_Instrucoes_Boleto = gErr
    
    Select Case gErr
        
        Case 134252
            'erros tratados nas rotinas chamadas
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148441)
    
    End Select
    
    Exit Function

End Function

Function Calcula_DV11(ByVal sSequencia As String, ByVal iBase As Integer, sDigito As String, Optional ByVal bAceitaP As Boolean = False) As Long
'Calcula o Dígito Verificador do Nosso Numero - Alterado por Jorge Specian - 15/03/2005
'Cálculo através do módulo 11

Dim lErro As Long
Dim iContador As Integer
Dim iNumero As Integer
Dim iTotalNumero As Integer
Dim iMultiplicador As Integer
Dim iResto As Integer
Dim iResultado As Integer
Dim sCaracter As String

On Error GoTo Erro_Calcula_DV11

    iMultiplicador = 2
    
    For iContador = 1 To Len(sSequencia)
        sCaracter = Mid(right(sSequencia, iContador), 1, 1)
        If iMultiplicador > iBase Then
            iMultiplicador = 2
        End If
        iNumero = sCaracter * iMultiplicador
        iTotalNumero = iTotalNumero + iNumero
        iMultiplicador = iMultiplicador + 1
    Next
    
    iResto = iTotalNumero Mod 11
    
    iResultado = 11 - iResto
    
    If iResultado = 10 Then
        If bAceitaP Then
            sDigito = "P"
        Else
            sDigito = "0"   'zero
        End If
    ElseIf iResultado = 11 Then
        sDigito = "0"   'zero
    Else
        sDigito = CStr(iResultado)
    End If

    Calcula_DV11 = SUCESSO

    Exit Function

Erro_Calcula_DV11:

    Calcula_DV11 = gErr
    
    Select Case gErr
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148442)
    
    End Select
    
    Exit Function

End Function

Private Function NossoNumero_ObtemDV(ByVal objCCI As ClassContasCorrentesInternas, ByVal sNossoNumero As String, ByVal iNumCarteiraCobrador As Integer, ByVal sCampoLivre As String, ByVal objParcelaReceber As ClassParcelaReceber, sDVNossoNumero As String) As Long

Dim lErro As Long

On Error GoTo Erro_NossoNumero_ObtemDV

    Select Case objCCI.iCodBanco
        Case 1   'Banco do Brasil
            lErro = NossoNumero_ObtemDV_BB(objCCI, sNossoNumero, iNumCarteiraCobrador, sCampoLivre, objParcelaReceber, sDVNossoNumero)
            If lErro <> SUCESSO Then gError 130011
            
        Case 104 'Caixa Econômica Federal
            lErro = NossoNumero_ObtemDV_CEF(objCCI, sNossoNumero, iNumCarteiraCobrador, sCampoLivre, objParcelaReceber, sDVNossoNumero)
            If lErro <> SUCESSO Then gError 130012
        
        Case 237 'BRADESCO
            lErro = NossoNumero_ObtemDV_BRADESCO(objCCI, sNossoNumero, iNumCarteiraCobrador, sCampoLivre, objParcelaReceber, sDVNossoNumero)
            If lErro <> SUCESSO Then gError 130013
        
        Case 275 'Banco Real
'            lErro = NossoNumero_ObtemDV_REAL(objCCI, sNossoNumero, iNumCarteiraCobrador, sCampoLivre, sDVNossoNumero)
            If lErro <> SUCESSO Then gError 130014
        
        Case 341 'Banco Itaú
            lErro = NossoNumero_ObtemDV_ITAU(objCCI, sNossoNumero, iNumCarteiraCobrador, sCampoLivre, objParcelaReceber, sDVNossoNumero)
            If lErro <> SUCESSO Then gError 130015
        
        Case 356 'Banco Real ABN Amro
            lErro = NossoNumero_ObtemDV_356(objCCI, sNossoNumero, iNumCarteiraCobrador, sCampoLivre, objParcelaReceber, sDVNossoNumero)
            If lErro <> SUCESSO Then gError 130015
        
        Case 399 'HSBC
            lErro = NossoNumero_ObtemDV_HSBC(objCCI, sNossoNumero, iNumCarteiraCobrador, sCampoLivre, objParcelaReceber, sDVNossoNumero)
            If lErro <> SUCESSO Then gError 130016
        
        Case 409 'UNIBANCO
            lErro = NossoNumero_ObtemDV_Unibanco(objCCI, sNossoNumero, iNumCarteiraCobrador, sCampoLivre, objParcelaReceber, sDVNossoNumero)
            If lErro <> SUCESSO Then gError 130017
    
        Case 745 'CITIBANK
            lErro = NossoNumero_ObtemDV_Citibank(objCCI, sNossoNumero, iNumCarteiraCobrador, sCampoLivre, objParcelaReceber, sDVNossoNumero)
            If lErro <> SUCESSO Then gError 130015
        
        Case 8, 33, 353 'Santander
            lErro = NossoNumero_ObtemDV_Santander(objCCI, sNossoNumero, iNumCarteiraCobrador, sCampoLivre, objParcelaReceber, sDVNossoNumero)
            If lErro <> SUCESSO Then gError 204933
        
        Case 422 'Safra
            lErro = NossoNumero_ObtemDV_Safra(objCCI, sNossoNumero, iNumCarteiraCobrador, sCampoLivre, objParcelaReceber, sDVNossoNumero)
            If lErro <> SUCESSO Then gError 130011
        
        Case 41 'Banrisul
            lErro = NossoNumero_ObtemDV_Banrisul(objParcelaReceber, sDVNossoNumero)
            If lErro <> SUCESSO Then gError 130011
            
        Case 453, 749
            lErro = NossoNumero_ObtemDV_Rural(sNossoNumero, sDVNossoNumero)
            If lErro <> SUCESSO Then gError 130011
        
        Case 748 'Sicred
            lErro = NossoNumero_ObtemDV_SiCred(objCCI, sNossoNumero, iNumCarteiraCobrador, sCampoLivre, objParcelaReceber, sDVNossoNumero)
            If lErro <> SUCESSO Then gError 130011
        
        Case 85 'Cecred
            sDVNossoNumero = ""
        
        Case Else
            gError 130018
            
    End Select
    
    NossoNumero_ObtemDV = SUCESSO
     
    Exit Function
    
Erro_NossoNumero_ObtemDV:

    NossoNumero_ObtemDV = gErr
     
    Select Case gErr
          
        Case 130011 To 130017, 204933
        
        Case 130018
            Call Rotina_Erro(vbOKOnly, "ERRO_CALCULO_DV_NOSSONUMERO", gErr)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148443)
     
    End Select
     
    Exit Function

End Function

Private Function NossoNumero_ObtemDV_BRADESCO(ByVal objCCI As ClassContasCorrentesInternas, ByVal sNossoNumero As String, ByVal iNumCarteiraCobrador As Integer, ByVal sCampoLivre As String, ByVal objParcelaReceber As ClassParcelaReceber, sDVNossoNumero As String) As Long

Dim lErro As Long, sSequencia As String

On Error GoTo Erro_NossoNumero_ObtemDV_BRADESCO

    sSequencia = FormataCpoNum(iNumCarteiraCobrador, 2) & FormataCpoNum(sNossoNumero, 11)
    lErro = Calcula_DV11(sSequencia, 7, sDVNossoNumero, True)
    If lErro <> SUCESSO Then gError 130019
    
    NossoNumero_ObtemDV_BRADESCO = SUCESSO
     
    Exit Function
    
Erro_NossoNumero_ObtemDV_BRADESCO:

    NossoNumero_ObtemDV_BRADESCO = gErr
     
    Select Case gErr
          
        Case 130019
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148444)
     
    End Select
     
    Exit Function

End Function

Private Function NossoNumero_ObtemDV_ITAU(ByVal objCCI As ClassContasCorrentesInternas, ByVal sNossoNumero As String, ByVal iNumCarteiraCobrador As Integer, ByVal sCampoLivre As String, ByVal objParcelaReceber As ClassParcelaReceber, sDVNossoNumero As String) As Long

Dim lErro As Long

On Error GoTo Erro_NossoNumero_ObtemDV_ITAU

    sDVNossoNumero = Mid(sCampoLivre, 12, 1)
    
    NossoNumero_ObtemDV_ITAU = SUCESSO
     
    Exit Function
    
Erro_NossoNumero_ObtemDV_ITAU:

    NossoNumero_ObtemDV_ITAU = gErr
     
    Select Case gErr
          
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148445)
     
    End Select
     
    Exit Function

End Function

Function Banco_ObtemTamNossoNumero(ByVal iBanco As Integer, iTamNossoNumero As Integer) As Long
'nao inclui o DV

    '??? com variacao de acordo com o banco
    Select Case iBanco
    
        Case 1
            iTamNossoNumero = 10 '11
        
        Case 104
            iTamNossoNumero = 15 'com a versao 050 passa de 10 para 15
        
        Case 237
            iTamNossoNumero = 11
    
        Case 341
            iTamNossoNumero = 8
            
        Case 356
            iTamNossoNumero = 7
        
        Case 409
            iTamNossoNumero = 10
        
        Case 399
            iTamNossoNumero = 10 'se for registrada
        
        Case 745
            iTamNossoNumero = 11
            
        Case 8, 33, 353 'santander
            iTamNossoNumero = 12
            
        Case 453, 749
            iTamNossoNumero = 7
            
        Case 748
            iTamNossoNumero = 5
        
        Case 85
            iTamNossoNumero = 9
        
        Case Else
            iTamNossoNumero = 8
    
    End Select
    
End Function

Function NatMovCta_Grava(ByVal objNatMovCta As ClassNatMovCta) As Long
'Atualiza o BD com os dados contidos em objNatMovCta,
'realizando alteração se o código do obj já existir no banco, ou inclusão, caso contrário

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(1 To 3) As Long
Dim lTransacao As Long
Dim sCodigo As String
    
On Error GoTo Erro_NatMovCta_Grava

    'Abre transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 122768
    
    'Abre comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 122769
    Next

    sCodigo = String(STRING_NATMOVCTA_CODIGO, 0)
    
    'Procura na tabela NatMovCta o Codigo armazenado em objNatMovCta
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Codigo FROM NatMovCta WHERE Codigo= ?", 0, sCodigo, objNatMovCta.sCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 122770

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 122771
    
    'Se não encontrou insere novo no BD
    If lErro <> AD_SQL_SUCESSO Then
        
         lErro = Comando_Executar(alComando(3), "INSERT INTO NatMovCta (Codigo, Descricao, Tipo, FluxoCaixa, Grupo) VALUES (?, ?, ?, ?, ?)", objNatMovCta.sCodigo, objNatMovCta.sDescricao, objNatMovCta.iTipo, objNatMovCta.iFluxoCaixa, objNatMovCta.lGrupo)
         If lErro <> AD_SQL_SUCESSO Then gError 122772
        
    'Se encontrou
    Else
        
        'Atualiza o registro na tabela NatMovCta com os dados de objNatMovCta
        lErro = Comando_ExecutarPos(alComando(2), "UPDATE NatMovCta SET Descricao=?, Tipo=?, FluxoCaixa=?, Grupo=?", alComando(1), objNatMovCta.sDescricao, objNatMovCta.iTipo, objNatMovCta.iFluxoCaixa, objNatMovCta.lGrupo)
        If lErro <> AD_SQL_SUCESSO Then gError 122773
 
    End If
                        
    'Fecha transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 122774

    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    NatMovCta_Grava = SUCESSO

    Exit Function

Erro_NatMovCta_Grava:

    NatMovCta_Grava = gErr

    Select Case gErr

        Case 122768
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 122769
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
                    
        Case 122770, 122771
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NATMOVCTA", gErr, objNatMovCta.sCodigo)
        
        Case 122772
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_NATMOVCTA", gErr, objNatMovCta.sCodigo)
            
        Case 122773
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_NATMOVCTA", gErr, objNatMovCta.sCodigo)
            
        Case 122774
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148446)

    End Select

    'Fechar comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Call Transacao_Rollback

    Exit Function
    
End Function

Function NatMovCta_Exclui(ByVal sCodigo As String) As Long
'Exclui o do BD (tabela NatMovCta)

Dim lErro As Long
Dim lErro1 As Long
Dim lTransacao As Long
Dim alComando(1 To 2) As Long
Dim iIndice As Integer
Dim sCod1 As String
Dim iNivel As Integer
Dim iNivel1 As Integer

On Error GoTo Erro_NatMovCta_Exclui

    'Abre transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 122775
    
    'Abre comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 122776
    Next
    
    sCod1 = String(STRING_NATMOVCTA_CODIGO, 0)
    
    'pesquisa o codigo e seus filhos visando sua exclusão
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Codigo FROM NatMovCta WHERE Codigo >= ? ORDER BY Codigo", 0, sCod1, sCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 122777
        
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 122778
     
    If lErro = AD_SQL_SEM_DADOS Then gError 122779
      
    If lErro = AD_SQL_SUCESSO Then
        
        lErro1 = Mascara_Item_ObterNivel(SEGMENTO_NATMOVCTA, sCodigo, iNivel)
        If lErro1 <> SUCESSO Then gError 122816
        
        iNivel1 = iNivel + 1
            
    End If
        
    'exclui os registros ("pai" e, se houver, "filhos")
    Do While lErro = AD_SQL_SUCESSO And iNivel < iNivel1
        
        'lock do registro e seus filhos
        lErro = Comando_LockExclusive(alComando(1))
        If lErro <> AD_SQL_SUCESSO Then gError 122817
             
        'exclui o registro
        lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM NatMovCta", alComando(1))
        If lErro <> AD_SQL_SUCESSO Then gError 122818
        
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 122819
        
        If lErro = AD_SQL_SUCESSO Then
            lErro1 = Mascara_Item_ObterNivel(SEGMENTO_NATMOVCTA, sCod1, iNivel1)
            If lErro1 <> SUCESSO Then gError 122820
        End If
        
    Loop
    
    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    'Fecha transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 122782

    NatMovCta_Exclui = SUCESSO
       
    Exit Function
    
Erro_NatMovCta_Exclui:

    NatMovCta_Exclui = gErr

    Select Case gErr
    
        Case 122775
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
    
        Case 122776
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 122777, 122778, 122819
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NATMOVCTA2", gErr)
        
        Case 122779
            Call Rotina_Erro(vbOKOnly, "ERRO_NATMOVCTA_NAO_CADASTRADO", gErr, sCodigo)
        
        Case 122816, 122820
            Call Rotina_Erro(vbOKOnly, "ERRO_MASCARA_ITEM_OBTERNIVEL", gErr)
        
        Case 122817
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_NATMOVCTA2", gErr)
        
        Case 122818
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_NATMOVCTA2", gErr)
              
        Case 122780
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_NATMOVCTA", gErr, sCodigo)
                
        Case 122782
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
                
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148447)
    
    End Select
        
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Call Transacao_Rollback
    
    Exit Function
    
End Function

'#########################################################
'Inserido por Wagner
Function Segmento_Grava_NatMovCta(ByVal colSegmentos As Collection) As Long
'grava os registros da colecao na tabela Segmento

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_Segmento_Grava_NatMovCta

    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 136647

    lErro = CF("Segmento_Grava_NatMovCta_Trans", colSegmentos)
    If lErro <> SUCESSO Then gError 136648
     
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 136649
     
    Segmento_Grava_NatMovCta = SUCESSO
    
    Exit Function

Erro_Segmento_Grava_NatMovCta:

    Segmento_Grava_NatMovCta = gErr

    Select Case gErr

        Case 136647
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 136648

        Case 136649
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT_TRANSACAO", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148448)

    End Select
    
    Call Transacao_Rollback

    Exit Function

End Function

Function Segmento_Grava_NatMovCta_Trans(ByVal colSegmentos As Collection) As Long
'grava os registros da colecao na tabela Segmento de NatMovCta
'IMPORTANTE: TEM QUE SER CHAMADO EM TRANSACAO

Dim lErro As Long
Dim iPossui_NatMovCta As Integer
Dim iExercicio As Integer
Dim iIndice As Integer
Dim lComando As Long
Dim lComando2 As Long
Dim lComando3 As Long
Dim tSegmento As typeSegmento
Dim sCodigo As String
Dim sCodigo2 As String
Dim objSegmento As New ClassSegmento
Dim iCcl As Integer

On Error GoTo Erro_Segmento_Grava_NatMovCta_Trans

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 136650
    
    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then gError 136651
    
    lComando3 = Comando_Abrir()
    If lComando3 = 0 Then gError 136652
  
    sCodigo = String(STRING_SEGMENTO_CODIGO, 0)
    sCodigo2 = String(STRING_SEGMENTO_CODIGO, 0)
    tSegmento.sDelimitador = String(STRING_SEGMENTO_DELIMITADOR, 0)
    
    'pega um objeto da colSegmentos para saber qual o formato( = campo codigo na tabela Segmento)
    For Each objSegmento In colSegmentos
        'guarda o formato em sCodigo para depois fazer o Select na tabela Segmentos
        sCodigo = objSegmento.sCodigo
        Exit For
    Next
       
    If objSegmento.sCodigo <> SEGMENTO_NATMOVCTA Then gError 136653
       
    'verifica existencia de pelo menos um produto cadastrado
    lErro = CF("NatMovCta_ExisteNatMovCta", iPossui_NatMovCta)
    If lErro <> SUCESSO Then gError 136654

    If iPossui_NatMovCta = POSSUI_NATMOVCTA Then
    'so faz modificacao no delimitador e no preenchimento da tabela Segmento
        
         lErro = Comando_ExecutarPos(lComando, "SELECT Codigo, Nivel, Delimitador, Preenchimento FROM Segmento WHERE Codigo = ? ORDER BY Nivel", 0, sCodigo2, tSegmento.iNivel, tSegmento.sDelimitador, tSegmento.iPreenchimento, sCodigo)
         If lErro <> AD_SQL_SUCESSO Then gError 136655
     
         'percorre cada registro em colSegmentos para fazer a modificacao nos delimitadores e no preenchimento
         For Each objSegmento In colSegmentos
                     
            lErro = Comando_BuscarProximo(lComando)
            If lErro <> AD_SQL_SUCESSO Then gError 136656
            
            lErro = Comando_ExecutarPos(lComando2, "UPDATE Segmento SET Codigo =? , Nivel =? , Delimitador =? , Preenchimento =? ", lComando, sCodigo, objSegmento.iNivel, objSegmento.sDelimitador, objSegmento.iPreenchimento)
            If lErro <> AD_SQL_SUCESSO Then gError 136657
            
         Next
    
    Else
        'apaga toda tabela Segmento e insere os dados novos em Segmento
        
        'prepara o lock na tabela Configuracao
        lErro = Comando_ExecutarPos(lComando3, "SELECT UsoCcl FROM Configuracao", 0, iCcl)
        If lErro <> AD_SQL_SUCESSO Then gError 136658
    
        lErro = Comando_BuscarPrimeiro(lComando3)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 136659
    
        'Lock da Configuracao
        lErro = Comando_LockExclusive(lComando3)
        If lErro <> AD_SQL_SUCESSO Then gError 136660
    
        'Seleciona registros na tabela de Segmento
        lErro = Comando_ExecutarPos(lComando, "SELECT Codigo, Nivel FROM Segmento WHERE Codigo = ?", 0, sCodigo2, tSegmento.iNivel, sCodigo)
        If lErro <> AD_SQL_SUCESSO Then gError 136661
        
        'le o primeiro segmento
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 136662
        
        'verifica se ainda existe registro a ser deletado
        Do While lErro <> AD_SQL_SEM_DADOS
           
            'exclui o segmento
            lErro = Comando_ExecutarPos(lComando2, "DELETE FROM Segmento", lComando)
            If lErro <> AD_SQL_SUCESSO Then gError 136663
        
            'le o proximo segmento
            lErro = Comando_BuscarProximo(lComando)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 136664
        
        Loop
        
        For Each objSegmento In colSegmentos
           
           lErro = Comando_Executar(lComando2, "INSERT INTO Segmento (Codigo,Nivel,Tipo,Tamanho,Delimitador,Preenchimento) VALUES (?,?,?,?,?,?)", sCodigo, objSegmento.iNivel, objSegmento.iTipo, objSegmento.iTamanho, objSegmento.sDelimitador, objSegmento.iPreenchimento)
           If lErro <> AD_SQL_SUCESSO Then gError 136665
           
        Next
        
    End If
    
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)
     
    Segmento_Grava_NatMovCta_Trans = SUCESSO
    
    Exit Function

Erro_Segmento_Grava_NatMovCta_Trans:

    Segmento_Grava_NatMovCta_Trans = gErr

    Select Case gErr

        Case 136650, 136651, 136652
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 136653
            Call Rotina_Erro(vbOKOnly, "ERRO_SEGMENTO_NATMOVCTA_INVALIDO", gErr, sCodigo)

        Case 136654

        Case 136655, 136656, 136661, 136662, 136664
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SEGMENTO1", gErr, sCodigo)
             
        Case 136657
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_SEGMENTO", gErr, sCodigo, tSegmento.iNivel)
             
        Case 136658, 136659
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONFIGURACAO", gErr)
        
        Case 136660
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CONFIGURACAO", gErr)

        Case 136663
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_SEGMENTO", gErr, sCodigo, tSegmento.iNivel)

        Case 136665
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_SEGMENTO", gErr, sCodigo, objSegmento.iNivel)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148449)

    End Select
    
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)

    Exit Function

End Function
'###################################################################

Public Function ReajusteTitRecs_Processa(ByVal objProcReajusteTitRec As ClassProcReajTitRec) As Long
'??? depois colocar como batch

Dim lErro As Long, iIndice As Integer
Dim alComando(1 To 13) As Long
Dim lTransacao As Long, lNumIntTitulo As Long, bPularTitulo As Boolean, lTipoCritica As Long
Dim lNumIntDocProc As Long, lNumTitulos As Long, dSaldoAnteriorTit As Double, dValorReajusteTit As Double
Dim dIndiceReajuste As Double, objProcReajTitRecTit As ClassProcReajTitRecTit
Dim sCcl As String, iPeriodicidade As Integer, iMoeda As Integer, dtReajustadoAte As Date, dtReajusteBase As Date, dtReajusteBaseAjustada As Date
Dim sCclAnterior As String, iPeriodicidadeAnterior As Integer, iMoedaAnterior As Integer, dtReajustadoAteAnterior As Date, dtReajusteBaseAjustadaAnterior As Date
Dim objProcReajTitRecCcl As ClassProcReajTitRecCcl
Dim objContabAutomatica As ClassContabAutomatica, objReajTitRecCtb As ClassReajTitRecCtb

On Error GoTo Erro_ReajusteTitRecs_Processa

    'abre comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 130155
    Next
    
    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 130156
    
    'obtem identificador para o processamento
    lErro = CF("Config_ObterNumInt", "CPRConfig", "NUM_PROX_PROCREAJUSTE_TITREC", lNumIntDocProc)
    If lErro <> SUCESSO Then gError 130157

    objProcReajusteTitRec.lNumIntDoc = lNumIntDocProc
    
    'buscar titulos abertos que poderao ser reajustados para obter um contador
    lErro = Comando_Executar(alComando(1), "SELECT COUNT(*) FROM TitulosRec WHERE FilialEmpresa = ? AND status <> ? AND ReajustePeriodicidade <> 0 AND (ReajustadoAte < ? OR ReajustadoAte = ?)", lNumTitulos, objProcReajusteTitRec.iFilialEmpresa, STATUS_EXCLUIDO, objProcReajusteTitRec.dtAtualizadoAte, DATA_NULA)
    If lErro <> AD_SQL_SUCESSO Then gError 130158

    lErro = Comando_BuscarProximo(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 130159
    If lErro = AD_SQL_SEM_DADOS Then gError 130160

    '??? ainda nao estou usando esta qtde mas deve ser colocada na barra de progresso
    
    'buscar titulos abertos que serao reajustados para processa-los
    sCcl = String(STRING_CCL, 0)
    lErro = Comando_ExecutarPos(alComando(2), "SELECT NumIntDoc, Ccl, Moeda, ReajustePeriodicidade, ReajustadoAte, Saldo, ReajusteBase FROM TitulosRec WHERE FilialEmpresa = ? AND status <> ? AND ReajustePeriodicidade <> 0 AND (ReajustadoAte < ? OR ReajustadoAte = ?) ORDER BY Ccl, Moeda, ReajustePeriodicidade, ReajustadoAte, ReajusteBase", 0, _
        lNumIntTitulo, sCcl, iMoeda, iPeriodicidade, dtReajustadoAte, dSaldoAnteriorTit, dtReajusteBase, _
        objProcReajusteTitRec.iFilialEmpresa, STATUS_EXCLUIDO, objProcReajusteTitRec.dtAtualizadoAte, DATA_NULA)
    If lErro <> AD_SQL_SUCESSO Then gError 130161

    'buscar proximo
    lErro = Comando_BuscarProximo(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 130162
    
    If lErro <> AD_SQL_SEM_DADOS Then
    
        iPeriodicidadeAnterior = 0
        iMoedaAnterior = 0
        dtReajustadoAteAnterior = DATA_NULA
        dtReajusteBaseAjustadaAnterior = DATA_NULA
        
        'inicializa acumulador de correcao do ccl com zero
        Set objProcReajTitRecCcl = New ClassProcReajTitRecCcl
        With objProcReajTitRecCcl
            .lNumIntDocProc = lNumIntDocProc
            .sCcl = sCcl
        End With
        objProcReajusteTitRec.colCcl.Add objProcReajTitRecCcl
        
        sCclAnterior = sCcl
                
        'enquanto houverem titulos
        Do While lErro <> AD_SQL_SEM_DADOS
        
            'lock do titulo
            lErro = Comando_LockExclusive(alComando(2))
            If lErro <> AD_SQL_SUCESSO Then gError 130164
    
            Set objProcReajTitRecTit = New ClassProcReajTitRecTit
            
            With objProcReajTitRecTit
                .lNumIntDocProc = lNumIntDocProc
                .lNumIntTitulo = lNumIntTitulo
                .dSaldoAnterior = dSaldoAnteriorTit
            End With
            
            'se trocou de ccl
            If sCcl <> sCclAnterior Then
            
                'guarda dados de ccl
                lErro = ReajusteTitRecs_Processa4(objProcReajusteTitRec, objProcReajTitRecCcl, alComando())
                If lErro <> SUCESSO Then gError 130167
                
                'inicializa acumulador de correcao do ccl com zero
                Set objProcReajTitRecCcl = New ClassProcReajTitRecCcl
                With objProcReajTitRecCcl
                    .lNumIntDocProc = lNumIntDocProc
                    .sCcl = sCcl
                End With
                objProcReajusteTitRec.colCcl.Add objProcReajTitRecCcl
                
                sCclAnterior = sCcl
                
            End If
            
            If dtReajustadoAte = DATA_NULA Then
                dtReajusteBaseAjustada = StrParaDate("01/" & Month(dtReajusteBase) & "/" & Year(dtReajusteBase))
            Else
                dtReajusteBaseAjustada = DATA_NULA
            End If
            
            'se moeda ou periodicidade mudaram entao obter indice
            If iMoeda <> iMoedaAnterior Or iPeriodicidade <> iPeriodicidadeAnterior Or dtReajustadoAte <> dtReajustadoAteAnterior Or dtReajusteBaseAjustada <> dtReajusteBaseAjustadaAnterior Then
            
                lErro = ReajusteTitRecs_ObterIndice(iMoeda, iPeriodicidade, objProcReajusteTitRec.dtAtualizadoAte, dIndiceReajuste, dtReajustadoAte, dtReajusteBaseAjustada, lTipoCritica, alComando)
                If lErro <> SUCESSO Then gError 130165
                
                If lTipoCritica = 0 Then
                    bPularTitulo = False
                Else
                    bPularTitulo = True
                End If
                
                'guarda indice de reajuste
                lErro = ReajusteTitRecs_Processa5(objProcReajusteTitRec, iMoeda, iPeriodicidade, dIndiceReajuste, alComando())
                If lErro <> SUCESSO Then gError 130190
                
                iMoedaAnterior = iMoeda
                iPeriodicidadeAnterior = iPeriodicidade
                dtReajustadoAteAnterior = dtReajustadoAte
                dtReajusteBaseAjustadaAnterior = dtReajusteBaseAjustada
                
            End If
            
            objProcReajTitRecTit.lTipoCritica = lTipoCritica
            
            If bPularTitulo = False Then
            
                'processar as parcelas acumulando correcao do titulo
                lErro = ReajusteTitRecs_Processa3(objProcReajusteTitRec, objProcReajTitRecTit, dIndiceReajuste, alComando())
                If lErro <> SUCESSO Then gError 130166
                    
                'acumula correcao do ccl
                objProcReajTitRecCcl.dValorReajuste = Arredonda_Moeda(objProcReajTitRecCcl.dValorReajuste + objProcReajTitRecTit.dValorReajuste)
                    
            End If
            
            'grava resultado a nivel de titulo
            lErro = ReajusteTitRecs_Processa2(objProcReajusteTitRec, objProcReajTitRecTit, alComando())
            If lErro <> SUCESSO Then gError 130167
            
            'buscar proximo
            lErro = Comando_BuscarProximo(alComando(2))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 130163
        
        Loop
    
        'guarda dados do ultimo ccl
        lErro = ReajusteTitRecs_Processa4(objProcReajusteTitRec, objProcReajTitRecCcl, alComando())
        If lErro <> SUCESSO Then gError 130187
    
        'Inicializa a contabilizacao
        If (gcolModulo.Ativo(MODULO_CONTABILIDADE) = MODULO_ATIVO) Then
        
            Set objContabAutomatica = New ClassContabAutomatica
            Set objReajTitRecCtb = New ClassReajTitRecCtb
            Set objReajTitRecCtb.objProcReajusteTitRec = objProcReajusteTitRec
            
            lErro = objContabAutomatica.Inicializa_Contab(objReajTitRecCtb, MODULO_CONTASARECEBER, "BCR", objProcReajusteTitRec.dtAtualizadoAte, DATA_NULA)
            If lErro <> SUCESSO Then gError 131096
            
            'gera a contabilizacao
            lErro = objContabAutomatica.GeraContabilizacao()
            If lErro <> SUCESSO Then gError 131098
        
            'finaliza a contabilizacao
            lErro = objContabAutomatica.Finaliza_Contab()
            If lErro <> SUCESSO Then gError 131097
    
        End If
        
    End If
    
    'grava dados gerais do processamento
    lErro = Comando_Executar(alComando(9), "INSERT INTO ProcReajusteTitRec (NumIntDoc, FilialEmpresa, DataProc, HoraProc, Usuario, AtualizadoAte) VALUES (?,?,?,?,?,?)", _
        objProcReajusteTitRec.lNumIntDoc, objProcReajusteTitRec.iFilialEmpresa, objProcReajusteTitRec.dtDataProc, objProcReajusteTitRec.dHoraProc, objProcReajusteTitRec.sUsuario, objProcReajusteTitRec.dtAtualizadoAte)
    If lErro <> AD_SQL_SUCESSO Then gError 130188
        
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 130168
    
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    ReajusteTitRecs_Processa = SUCESSO
     
    Exit Function
    
Erro_ReajusteTitRecs_Processa:

    ReajusteTitRecs_Processa = gErr
     
    Select Case gErr
          
        Case 130164
            Call Rotina_Erro(vbOKOnly, "ERRO_BLOQUEIO_TITREC_REAJUSTE", gErr)
        
        Case 130157, 130165, 130166, 130167, 130187, 130190, 131096, 131097, 131098
        
        Case 130188
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_PROCREAJUSTETITREC", gErr)
        
        Case 130158, 130159, 130160, 130161, 130162, 130163
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TITREC_REAJUSTE", gErr)
        
        Case 130156
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 130155
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 130168
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148450)
     
    End Select
     
    Call Transacao_Rollback
    
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Private Function ReajusteTitRecs_ObterIndice(ByVal iMoeda As Integer, ByVal iPeriodicidade As Integer, ByVal dtReajusteAte As Date, dIndiceReajuste As Double, ByVal dtReajustadoAte As Date, ByVal dtReajusteBaseAjustada As Date, lTipoCritica As Long, alComando() As Long, Optional ByVal iDecimais As Integer = -1) As Long
'obtem o indice de reajuste (de titulos a receber)

Dim lErro As Long, dtDataBase As Date, iValoresEmPercentual As Integer, dtDataIndice As Date, dtProxReajuste As Date
Dim dValorFinal As Double, dValorInicial As Double, iMeses As Integer, iMes As Integer, dValorMes As Double

On Error GoTo Erro_ReajusteTitRecs_ObterIndice

    If iDecimais = -1 Then iDecimais = 4
        
    lTipoCritica = 0
    
    Select Case iPeriodicidade
    
        Case PERIODICIDADE_CPR_MENSAL
            iMeses = 1
            
        Case PERIODICIDADE_CPR_BIMESTRAL
            iMeses = 2
        
        Case PERIODICIDADE_CPR_TRIMESTRAL
            iMeses = 3
        
        Case PERIODICIDADE_CPR_SEMESTRAL
            iMeses = 6
        
        Case PERIODICIDADE_CPR_ANUAL
            iMeses = 12
        
        Case Else
            gError 130170
            
    End Select
    
    dtDataBase = DateAdd("m", -iMeses, dtReajusteAte)
    
    'se ainda nao comecou a reajustar
    If dtReajustadoAte = DATA_NULA Then
        dtProxReajuste = DateAdd("m", iMeses, dtReajusteBaseAjustada)
        If dtProxReajuste > dtReajusteAte Then lTipoCritica = PROCREAJTITREC_CRITICA_NAO_REAJUSTA
    Else
        If dtReajustadoAte < dtDataBase Then lTipoCritica = PROCREAJTITREC_CRITICA_REAJUSTE_ATRASADO
    End If
    
    'verifica se os dados da tabela de CotacoesMoeda estao em percentuais ou nao (valores relativos a um indice base ou cotacao de uma moeda)
    lErro = Comando_Executar(alComando(12), "SELECT ValoresEmPercentual FROM Moedas WHERE Codigo = ?", iValoresEmPercentual, iMoeda)
    If lErro <> AD_SQL_SUCESSO Then gError 130193
    
    lErro = Comando_BuscarProximo(alComando(12))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 130194
    If lErro <> AD_SQL_SUCESSO Then gError 130195
    
    If iValoresEmPercentual = 0 Then
    
        lErro = Comando_Executar(alComando(13), "SELECT Valor FROM CotacoesMoeda WHERE Moeda = ? AND Data = ?", dValorFinal, iMoeda, dtReajusteAte)
        If lErro <> AD_SQL_SUCESSO Then gError 130171
    
        lErro = Comando_BuscarProximo(alComando(13))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 130172
        If lErro = AD_SQL_SEM_DADOS Then gError 130175
        
        lErro = Comando_Executar(alComando(13), "SELECT Valor FROM CotacoesMoeda WHERE Moeda = ? AND Data = ?", dValorInicial, iMoeda, dtDataBase)
        If lErro <> AD_SQL_SUCESSO Then gError 130173
    
        lErro = Comando_BuscarProximo(alComando(13))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 130174
        If lErro = AD_SQL_SEM_DADOS Then gError 130176
        
        If dValorInicial <> 0 And dValorFinal <> 0 Then
        
            dIndiceReajuste = Round(dValorFinal / dValorInicial, iDecimais)
        
        Else
        
            gError 130177
        
        End If
    
    Else
    
        iMes = iMeses - 1
        
        dtDataIndice = DateAdd("m", -1, dtReajusteAte)
        dIndiceReajuste = 1
        
        Do While iMes >= 0
        
            lErro = Comando_Executar(alComando(13), "SELECT Valor FROM CotacoesMoeda WHERE Moeda = ? AND Data = ?", dValorMes, iMoeda, dtDataIndice)
            If lErro <> AD_SQL_SUCESSO Then gError 130171
        
            lErro = Comando_BuscarProximo(alComando(13))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 130172
            If lErro = AD_SQL_SEM_DADOS Then gError 130175
            
            dIndiceReajuste = Round(dIndiceReajuste * (1 + (dValorMes / 100)), 4)
            
            iMes = iMes - 1
            
            dtDataIndice = DateAdd("m", -1, dtDataIndice)
        
        Loop
            
    End If
    
    ReajusteTitRecs_ObterIndice = SUCESSO
     
    Exit Function
    
Erro_ReajusteTitRecs_ObterIndice:

    ReajusteTitRecs_ObterIndice = gErr
     
    Select Case gErr
          
        Case 130193, 130194
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOEDA_REAJUSTE", gErr)
        
        Case 130195
            Call Rotina_Erro(vbOKOnly, "ERRO_MOEDA_REAJUSTE_INVALIDA", gErr)
        
        Case 130178 'a data do reajuste anterior nao bate com a periodicidade
        
        Case 130177
            Call Rotina_Erro(vbOKOnly, "ERRO_REAJUSTE_INDICE_ZERADO", gErr)
        
        Case 130175, 130176
            Call Rotina_Erro(vbOKOnly, "ERRO_REAJUSTE_SEM_INDICE", gErr)
        
        Case 130171, 130172, 130173, 130174
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOEDA_REAJUSTE", gErr)
        
        Case 130170
            Call Rotina_Erro(vbOKOnly, "ERRO_PERIODICIDADE_INVALIDA", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148451)
     
    End Select
     
    Exit Function

End Function

Private Function ReajusteTitRecs_Processa2(ByVal objProcReajusteTitRec As ClassProcReajTitRec, objProcReajTitRecTit As ClassProcReajTitRecTit, alComando() As Long) As Long
'faz gravacoes a nivel de titulo

Dim lErro As Long, dSaldoReajustado As Double

On Error GoTo Erro_ReajusteTitRecs_Processa2

    lErro = Comando_Executar(alComando(3), "INSERT INTO ProcReajusteTitRecTit (NumIntDocProc, NumIntTitulo, SaldoAnterior, ValorReajuste) VALUES (?,?,?,?)", _
        objProcReajusteTitRec.lNumIntDoc, objProcReajTitRecTit.lNumIntTitulo, objProcReajTitRecTit.dSaldoAnterior, objProcReajTitRecTit.dValorReajuste)
    If lErro <> AD_SQL_SUCESSO Then gError 130179
        
    dSaldoReajustado = Arredonda_Moeda(objProcReajTitRecTit.dSaldoAnterior + objProcReajTitRecTit.dValorReajuste)
    
    lErro = Comando_ExecutarPos(alComando(5), "UPDATE TitulosRec SET Saldo = ?, ReajustadoAte = ?", alComando(2), dSaldoReajustado, objProcReajusteTitRec.dtAtualizadoAte)
    If lErro <> AD_SQL_SUCESSO Then gError 130181
        
    ReajusteTitRecs_Processa2 = SUCESSO
 
    Exit Function
    
Erro_ReajusteTitRecs_Processa2:

    ReajusteTitRecs_Processa2 = gErr
     
    Select Case gErr
          
        Case 130179
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_PROCREAJUSTETITRECTIT", gErr)
        
        Case 130181
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_PROCREAJUSTETITRECTIT", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148452)
     
    End Select
     
    Exit Function

End Function

Private Function ReajusteTitRecs_Processa3(ByVal objProcReajusteTitRec As ClassProcReajTitRec, objProcReajTitRecTit As ClassProcReajTitRecTit, ByVal dIndiceReajuste As Double, alComando() As Long) As Long
'processa parcelas

Dim lErro As Long, dValorReajusteTit As Double, dSaldoAnteriorParc As Double, dSaldoReajustadoParc As Double, lNumIntParc As Long, dValorReajusteParc As Double

On Error GoTo Erro_ReajusteTitRecs_Processa3

    'obter as parcelas que serao reajustadas
    lErro = Comando_ExecutarPos(alComando(6), "SELECT NumIntDoc, Saldo FROM ParcelasRec WHERE NumIntTitulo = ? AND STATUS <> ? AND STATUS <> ?", 0, _
        lNumIntParc, dSaldoAnteriorParc, objProcReajTitRecTit.lNumIntTitulo, STATUS_EXCLUIDO, STATUS_BAIXADO)
    If lErro <> AD_SQL_SUCESSO Then gError 130182
        
    lErro = Comando_BuscarProximo(alComando(6))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 130183
    
    Do While lErro <> AD_SQL_SEM_DADOS
    
        dSaldoReajustadoParc = Arredonda_Moeda(dSaldoAnteriorParc * dIndiceReajuste)
        dValorReajusteParc = Arredonda_Moeda(dSaldoReajustadoParc - dSaldoAnteriorParc)
        dValorReajusteTit = Arredonda_Moeda(dValorReajusteTit + dValorReajusteParc)
        
        lErro = Comando_ExecutarPos(alComando(7), "UPDATE ParcelasRec SET Saldo = ?, Valor = Valor + ?", alComando(6), dSaldoReajustadoParc, dValorReajusteParc)
        If lErro <> AD_SQL_SUCESSO Then gError 180185
    
        lErro = Comando_Executar(alComando(8), "INSERT INTO ProcReajusteTitrecParc (NumIntDocProc, NumIntParc, SaldoAnterior, ValorReajuste) VALUES (?,?,?,?)", _
            objProcReajusteTitRec.lNumIntDoc, lNumIntParc, dSaldoAnteriorParc, dValorReajusteParc)
        If lErro <> AD_SQL_SUCESSO Then gError 180186
        
        lErro = Comando_BuscarProximo(alComando(6))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 130184
    
    Loop
    
    'guarda o valor do reajuste do titulo
    objProcReajTitRecTit.dValorReajuste = dValorReajusteTit
    
    ReajusteTitRecs_Processa3 = SUCESSO
     
    Exit Function
    
Erro_ReajusteTitRecs_Processa3:

    ReajusteTitRecs_Processa3 = gErr
     
    Select Case gErr
          
        Case 130182, 130183, 130184
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARC_PROCREAJUSTETITREC", gErr)
        
        Case 180185
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_PARC_PROCREAJUSTETITREC", gErr)
        
        Case 180186
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_PROCREAJUSTETITRECPARC", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148453)
     
    End Select
     
    Exit Function

End Function

Private Function ReajusteTitRecs_Processa4(ByVal objProcReajusteTitRec As ClassProcReajTitRec, ByVal objProcReajTitRecCcl As ClassProcReajTitRecCcl, alComando() As Long) As Long
'guarda valor acumulado do ccl

Dim lErro As Long

On Error GoTo Erro_ReajusteTitRecs_Processa4

    lErro = Comando_Executar(alComando(4), "INSERT INTO ProcReajusteTitRecCcl (NumIntDocProc, Ccl, ValorReajuste) VALUES (?,?,?)", objProcReajTitRecCcl.lNumIntDocProc, objProcReajTitRecCcl.sCcl, objProcReajTitRecCcl.dValorReajuste)
    If lErro <> AD_SQL_SUCESSO Then gError 130180
    
    ReajusteTitRecs_Processa4 = SUCESSO
     
    Exit Function
    
Erro_ReajusteTitRecs_Processa4:

    ReajusteTitRecs_Processa4 = gErr
     
    Select Case gErr
          
        Case 130180
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_PROCREAJUSTETITRECCCL", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148454)
     
    End Select
     
    Exit Function

End Function

Private Function ReajusteTitRecs_Processa5(ByVal objProcReajusteTitRec As ClassProcReajTitRec, ByVal iMoeda As Integer, ByVal iPeriodicidade As Integer, ByVal dIndiceReajuste As Double, alComando() As Long) As Long
'guarda indice de reajuste

Dim lErro As Long, dIndice As Double

On Error GoTo Erro_ReajusteTitRecs_Processa5

    lErro = Comando_Executar(alComando(10), "SELECT Indice FROM ProcReajusteTitrecIndice WHERE NumIntDocProc = ? AND Moeda = ? AND Periodicidade = ?", dIndice, objProcReajusteTitRec.lNumIntDoc, iMoeda, iPeriodicidade)
    If lErro <> AD_SQL_SUCESSO Then gError 130191
    
    lErro = Comando_BuscarProximo(alComando(10))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 130192
    If lErro <> AD_SQL_SUCESSO Then
    
        lErro = Comando_Executar(alComando(11), "INSERT INTO ProcReajusteTitrecIndice (NumIntDocProc, Moeda, Periodicidade, Indice) VALUES (?,?,?,?)", _
            objProcReajusteTitRec.lNumIntDoc, iMoeda, iPeriodicidade, dIndiceReajuste)
        If lErro <> AD_SQL_SUCESSO Then gError 130189

    End If
    
    ReajusteTitRecs_Processa5 = SUCESSO
     
    Exit Function
    
Erro_ReajusteTitRecs_Processa5:

    ReajusteTitRecs_Processa5 = gErr
     
    Select Case gErr
          
        Case 130191, 130192
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PROCREAJUSTETITRECINDICE", gErr)
        
        Case 130189
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_PROCREAJUSTETITRECINDICE", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148455)
     
    End Select
     
    Exit Function

End Function

Private Function FluxoAnalitico_Le_Contratos_Cli(ByVal objFluxo As ClassFluxo, lErroRet As Long, lComando As Long, tFluxoAux1 As typeFluxoAux) As Long
'le os lancamentos oriundos de contratos a receber

Dim lErro As Long

On Error GoTo Erro_FluxoAnalitico_Le_Contratos_Cli

    'gera uma tabela auxiliar FluxoContratoRec contendo os registros que serao processados pelo fluxo de caixa
    lErro = FluxoContratoRec_Grava(objFluxo)
    If lErro <> SUCESSO Then gError 188262

    tFluxoAux1.tContrato.sCodigo = String(STRING_CONTRATO_CODIGO, 0)
    tFluxoAux1.sNomeReduzidoCliForn = String(STRING_CLIENTE_NOME_REDUZIDO, 0)
    tFluxoAux1.sDescricaoTipoCliForn = String(STRING_TIPO_CLIENTE_DESCRICAO, 0)

    If giFilialEmpresa = EMPRESA_TODA Then

        'Pesquisa todas as parcelas a receber com vencimento no periodo em questão, com saldo, nao descontada, aberto no ambito empresa
        lErro = Comando_Executar(lComando, "SELECT Contratos.Codigo, Contratos.Cliente, Contratos.FilCli, Clientes.Tipo, Clientes.NomeReduzido, TiposDeCliente.Descricao, ItensDeContrato.Seq, FluxoContratoRec.NumIntItensContrato, FluxoContratoRec.NumParcela, FluxoContratoRec.Data, FluxoContratoRec.Valor, FluxoContratoRec.DataReferencia FROM FluxoContratoRec, Contratos, ItensDeContrato, Clientes, TiposDeCliente WHERE FluxoContratoRec.NumIntItensContrato = ItensDeContrato.NumIntDoc AND Contratos.NumIntDoc = ItensDeContrato.NumIntContrato AND Contratos.Cliente = Clientes.Codigo AND Clientes.Tipo = TiposDeCliente.Codigo AND FluxoContratoRec.FluxoId = ? ORDER BY Contratos.Cliente, Contratos.FilCli, FluxoContratoRec.Data", _
            tFluxoAux1.tContrato.sCodigo, tFluxoAux1.tContrato.lCliente, tFluxoAux1.tContrato.iFilCli, tFluxoAux1.iTipoCliForn_Ctr, tFluxoAux1.sNomeReduzidoCliForn, tFluxoAux1.sDescricaoTipoCliForn, tFluxoAux1.tItemContrato.iSeq, tFluxoAux1.tItemContrato.lNumIntDoc, tFluxoAux1.tItemContrato.iParcelaExt, tFluxoAux1.tItemContrato.dtDataVenctoReal, tFluxoAux1.tItemContrato.dSaldo, tFluxoAux1.tItemContrato.dtDataProxCobranca, objFluxo.lFluxoId)
        If lErro <> AD_SQL_SUCESSO Then gError 188259
        
    Else

        'Pesquisa todas as parcelas a receber com vencimento no periodo em questão, com saldo, nao descontada, aberto no ambito empresa
        lErro = Comando_Executar(lComando, "SELECT Contratos.Codigo, Contratos.Cliente, Contratos.FilCli, Clientes.Tipo, Clientes.NomeReduzido, TiposDeCliente.Descricao, ItensDeContrato.Seq, FluxoContratoRec.NumIntItensContrato, FluxoContratoRec.NumParcela, FluxoContratoRec.Data, FluxoContratoRec.Valor, FluxoContratoRec.DataReferencia FROM FluxoContratoRec, Contratos, ItensDeContrato, Clientes, TiposDeCliente WHERE FluxoContratoRec.NumIntItensContrato = ItensDeContrato.NumIntDoc AND Contratos.NumIntDoc = ItensDeContrato.NumIntContrato AND Contratos.Cliente = Clientes.Codigo AND Clientes.Tipo = TiposDeCliente.Codigo AND FluxoContratoRec.FluxoId = ? AND Contratos.FilialEmpresa = ? ORDER BY Contratos.Cliente, Contratos.FilCli, FluxoContratoRec.Data", _
            tFluxoAux1.tContrato.sCodigo, tFluxoAux1.tContrato.lCliente, tFluxoAux1.tContrato.iFilCli, tFluxoAux1.iTipoCliForn_Ctr, tFluxoAux1.sNomeReduzidoCliForn, tFluxoAux1.sDescricaoTipoCliForn, tFluxoAux1.tItemContrato.iSeq, tFluxoAux1.tItemContrato.lNumIntDoc, tFluxoAux1.tItemContrato.iParcelaExt, tFluxoAux1.tItemContrato.dtDataVenctoReal, tFluxoAux1.tItemContrato.dSaldo, tFluxoAux1.tItemContrato.dtDataProxCobranca, objFluxo.lFluxoId, giFilialEmpresa)
        If lErro <> AD_SQL_SUCESSO Then gError 188591

    End If

    lErroRet = Fluxo_Comando_BuscarProximo(lComando, tFluxoAux1.tItemContrato.dtDataVenctoReal, objFluxo, 0)
    If lErroRet <> AD_SQL_SUCESSO And lErroRet <> AD_SQL_SEM_DADOS Then gError 188260

    FluxoAnalitico_Le_Contratos_Cli = SUCESSO

    Exit Function

Erro_FluxoAnalitico_Le_Contratos_Cli:

    FluxoAnalitico_Le_Contratos_Cli = gErr

    Select Case gErr

        Case 188259
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FLUXOCONTRATOREC", gErr)

        Case 188260, 188262, 188591

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 188261)

    End Select

    Exit Function

End Function

Private Function FluxoAnalitico_Le_Contratos_Forn(ByVal objFluxo As ClassFluxo, lErroRet As Long, lComando As Long, tFluxoAux1 As typeFluxoAux) As Long
'le os lancamentos oriundos de contratos a pagar

Dim lErro As Long

On Error GoTo Erro_FluxoAnalitico_Le_Contratos_Forn

    'gera uma tabela auxiliar FluxoContratoPag contendo os registros que serao processados pelo fluxo de caixa
    lErro = FluxoContratoPag_Grava(objFluxo)
    If lErro <> SUCESSO Then gError 188280

    tFluxoAux1.tContrato.sCodigo = String(STRING_CONTRATO_CODIGO, 0)
    tFluxoAux1.sNomeReduzidoCliForn = String(STRING_CLIENTE_NOME_REDUZIDO, 0)
    tFluxoAux1.sDescricaoTipoCliForn = String(STRING_TIPO_CLIENTE_DESCRICAO, 0)

    'Pesquisa todas as parcelas a receber com vencimento no periodo em questão, com saldo, nao descontada, aberto no ambito empresa
    lErro = Comando_Executar(lComando, "SELECT Contratos.Codigo, Contratos.Fornecedor, Contratos.FilialFornecedor, Fornecedores.Tipo, Fornecedores.NomeReduzido, TiposDeFornecedor.Descricao, ItensDeContrato.Seq, FluxoContratoPag.NumIntItensContrato, FluxoContratoPag.NumParcela, FluxoContratoPag.Data, FluxoContratoPag.Valor, FluxoContratoPag.DataReferencia FROM FluxoContratoPag, Contratos, ItensDeContrato, Fornecedores, TiposDeFornecedor WHERE FluxoContratoPag.NumIntItensContrato = ItensDeContrato.NumIntDoc AND Contratos.NumIntDoc = ItensDeContrato.NumIntContrato AND Contratos.Fornecedor = Fornecedores.Codigo AND Fornecedores.Tipo = TiposDeFornecedor.Codigo AND FluxoContratoPag.FluxoId = ? ORDER BY Contratos.Fornecedor, Contratos.FilialFornecedor, FluxoContratoPag.Data", _
        tFluxoAux1.tContrato.sCodigo, tFluxoAux1.tContrato.lFornecedor, tFluxoAux1.tContrato.iFilialFornecedor, tFluxoAux1.iTipoCliForn_Ctr, tFluxoAux1.sNomeReduzidoCliForn, tFluxoAux1.sDescricaoTipoCliForn, tFluxoAux1.tItemContrato.iSeq, tFluxoAux1.tItemContrato.lNumIntDoc, tFluxoAux1.tItemContrato.iParcelaExt, tFluxoAux1.tItemContrato.dtDataVenctoReal, tFluxoAux1.tItemContrato.dSaldo, tFluxoAux1.tItemContrato.dtDataProxCobranca, objFluxo.lFluxoId)
    If lErro <> AD_SQL_SUCESSO Then gError 188281

    lErroRet = Fluxo_Comando_BuscarProximo(lComando, tFluxoAux1.tItemContrato.dtDataVenctoReal, objFluxo, 0)
    If lErroRet <> AD_SQL_SUCESSO And lErroRet <> AD_SQL_SEM_DADOS Then gError 188282

    FluxoAnalitico_Le_Contratos_Forn = SUCESSO

    Exit Function

Erro_FluxoAnalitico_Le_Contratos_Forn:

    FluxoAnalitico_Le_Contratos_Forn = gErr

    Select Case gErr

        Case 188280, 188282

        Case 188281
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FLUXOCONTRATOPAG", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 188283)

    End Select

    Exit Function

End Function



'Private Function FluxoAnalitico_Le_Contratos_Cli(ByVal objFluxo As ClassFluxo, lErroRet As Long, lComando As Long, tFluxoAux1 As typeFluxoAux) As Long
''le as tabelas de recebimentos associados ao fluxo de caixa
'
'Dim dtRefFim As Date, lErro As Long
'Dim dtDataProxCobranca As Date
'Dim dtDataCobrancaAnt As Date
'Dim dtDataVenctoReal As Date
'
'On Error GoTo Erro_FluxoAnalitico_Le_Contratos_Cli
'
'    tFluxoAux1.tContrato.sCodigo = String(STRING_CONTRATO_CODIGO, 0)
'    tFluxoAux1.sNomeReduzidoCliForn = String(STRING_CLIENTE_NOME_REDUZIDO, 0)
'    tFluxoAux1.sDescricaoTipoCliForn = String(STRING_TIPO_CLIENTE_DESCRICAO, 0)
'
'    'seleciona as parcelas a receber
'    If giFilialEmpresa = EMPRESA_TODA Then
'
'        'Pesquisa todas as parcelas a receber com vencimento no periodo em questão, com saldo, nao descontada, aberto no ambito empresa
'        lErro = Comando_Executar(lComando, "SELECT Contratos.Codigo, Contratos.Cliente, Contratos.FilCli, Contratos.DataIniContrato, Contratos.DataFimContrato, Clientes.Tipo, Clientes.NomeReduzido, TiposDeCliente.Descricao, ItensDeContrato.DataProxCobranca, ItensDeContrato.Periodicidade, ItensDeContrato.CondPagto, ItensDeContrato.DataRefIni, ItensDeContrato.Quantidade, ItensDeContrato.Valor, ItensDeContrato.Seq, ItensDeContrato.NumIntDoc FROM Contratos, ItensDeContrato, Clientes, TiposDeCliente WHERE Contratos.Ativo  = ? AND Contratos.DataIniContrato <=? AND Contratos.DataFimContrato >= ? AND Contratos.NumIntDoc = ItensDeContrato.NumIntContrato AND Contratos.Cliente = Clientes.Codigo AND Clientes.Tipo = TiposDeCliente.Codigo AND Contratos.Tipo = ? AND ItensDeContrato.DataProxCobranca <=? ORDER BY Contratos.Cliente, Contratos.FilCli, ItensDeContrato.DataProxCobranca", _
'            tFluxoAux1.tContrato.sCodigo, tFluxoAux1.tContrato.lCliente, tFluxoAux1.tContrato.iFilCli, tFluxoAux1.tContrato.dtDataIniContrato, tFluxoAux1.tContrato.dtDataFimContrato, tFluxoAux1.iTipoCliForn_Ctr, tFluxoAux1.sNomeReduzidoCliForn, tFluxoAux1.sDescricaoTipoCliForn, tFluxoAux1.tItemContrato.dtDataProxCobranca, tFluxoAux1.tItemContrato.iPeriodicidade, tFluxoAux1.tItemContrato.iCondPagto, tFluxoAux1.tItemContrato.dtDataRefIni, tFluxoAux1.tItemContrato.dQuantidade, tFluxoAux1.tItemContrato.dValor, tFluxoAux1.tItemContrato.iSeq, tFluxoAux1.tItemContrato.lNumIntDoc, CONTRATO_ATIVO, objFluxo.dtDataFinal + 10, objFluxo.dtDataBase, CONTRATOS_RECEBER, objFluxo.dtDataFinal)
'        If lErro <> AD_SQL_SUCESSO Then gError 133283
'
'    Else
'
'        lErro = Comando_Executar(lComando, "SELECT Contratos.Codigo, Contratos.Cliente, Contratos.FilCli, Contratos.DataIniContrato, Contratos.DataFimContrato, Clientes.Tipo, Clientes.NomeReduzido, TiposDeCliente.Descricao, ItensDeContrato.DataProxCobranca, ItensDeContrato.Periodicidade, ItensDeContrato.CondPagto, ItensDeContrato.DataRefIni, ItensDeContrato.Quantidade, ItensDeContrato.Valor, ItensDeContrato.Seq, ItensDeContrato.NumIntDoc FROM Contratos, ItensDeContrato, Clientes, TiposDeCliente WHERE FilialEmpresa = ? AND Contratos.Ativo  = ? AND Contratos.DataIniContrato <=? AND Contratos.DataFimContrato >= ? AND Contratos.NumIntDoc = ItensDeContrato.NumIntContrato AND Contratos.Cliente = Clientes.Codigo AND Clientes.Tipo = TiposDeCliente.Codigo AND Contratos.Tipo = ? AND ItensDeContrato.DataProxCobranca <=? ORDER BY Contratos.Cliente, Contratos.FilCli, ItensDeContrato.DataProxCobranca", _
'            tFluxoAux1.tContrato.sCodigo, tFluxoAux1.tContrato.lCliente, tFluxoAux1.tContrato.iFilCli, tFluxoAux1.tContrato.dtDataIniContrato, tFluxoAux1.tContrato.dtDataFimContrato, tFluxoAux1.iTipoCliForn_Ctr, tFluxoAux1.sNomeReduzidoCliForn, tFluxoAux1.sDescricaoTipoCliForn, tFluxoAux1.tItemContrato.dtDataProxCobranca, tFluxoAux1.tItemContrato.iPeriodicidade, tFluxoAux1.tItemContrato.iCondPagto, tFluxoAux1.tItemContrato.dtDataRefIni, tFluxoAux1.tItemContrato.dQuantidade, tFluxoAux1.tItemContrato.dValor, tFluxoAux1.tItemContrato.iSeq, tFluxoAux1.tItemContrato.lNumIntDoc, giFilialEmpresa, CONTRATO_ATIVO, objFluxo.dtDataFinal + 10, objFluxo.dtDataBase, CONTRATOS_RECEBER, objFluxo.dtDataFinal)
'        If lErro <> AD_SQL_SUCESSO Then gError 133284
'
'    End If
'
'    lErro = Comando_BuscarPrimeiro(lComando)
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 133285
'
'    If lErro = AD_SQL_SUCESSO Then
'
'        tFluxoAux1.tItemContrato.objCondPagto.iCodigo = tFluxoAux1.tItemContrato.iCondPagto
'        tFluxoAux1.tItemContrato.iParcela = 1
'        tFluxoAux1.tItemContrato.objCondPagto.dValorTotal = tFluxoAux1.tItemContrato.dQuantidade * tFluxoAux1.tItemContrato.dValor
'        tFluxoAux1.tItemContrato.objCondPagto.dtDataRef = tFluxoAux1.tItemContrato.dtDataProxCobranca
'
'        lErro = CF("CondicaoPagto_Le", tFluxoAux1.tItemContrato.objCondPagto)
'        If lErro <> SUCESSO And lErro <> 19205 Then gError 133349
'        If lErro <> SUCESSO Then gError 133350
'
'        'Calcula Datas de Vencimento das Parcelas
'        lErro = CF("CondicaoPagto_CalculaParcelas", tFluxoAux1.tItemContrato.objCondPagto)
'        If lErro <> SUCESSO Then gError 133345
'
'        tFluxoAux1.tItemContrato.dtDataProxCobranca = tFluxoAux1.tItemContrato.objCondPagto.colParcelas(1).dtVencimento
'        tFluxoAux1.tItemContrato.dSaldo = tFluxoAux1.tItemContrato.objCondPagto.colParcelas(1).dValor
'
'        lErro = CF("DataVencto_Real", tFluxoAux1.tItemContrato.dtDataProxCobranca, tFluxoAux1.tItemContrato.dtDataVenctoReal)
'        If lErro <> SUCESSO Then gError 133310
'
'    tFluxoAux1.tItemContrato.dtDataRefIni = DATA_MAX
'
'    lErro = FluxoAnalitico_Le_Contratos(objFluxo, lErroRet, lComando, tFluxoAux1)
'    If lErro <> SUCESSO Then gError 133286
'
''    End If
'
'    FluxoAnalitico_Le_Contratos_Cli = SUCESSO
'
'    Exit Function
'
'Erro_FluxoAnalitico_Le_Contratos_Cli:
'
'    FluxoAnalitico_Le_Contratos_Cli = gErr
'
'    Select Case gErr
'
'        Case 133283 To 133285
'            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSDECONTRATO", gErr)
'
'        Case 133286, 133310, 133345, 133349
'
'        Case 133350
'            Call Rotina_Erro(vbOKOnly, "ERRO_CONDICAO_PAGTO_NAO_CADASTRADA", gErr, tFluxoAux1.tItemContrato.objCondPagto.iCodigo)
'
'        Case Else
'            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148456)
'
'    End Select
'
'    Exit Function
'
'End Function

'Private Function FluxoAnalitico_Le_Contratos_Forn(ByVal objFluxo As ClassFluxo, lErroRet As Long, lComando As Long, tFluxoAux1 As typeFluxoAux) As Long
''le as tabelas de recebimentos associados ao fluxo de caixa
'
'Dim dtRefFim As Date, lErro As Long
'Dim dtDataCobrancaAnt As Date
'Dim dtDataVenctoReal As Date
'
'On Error GoTo Erro_FluxoAnalitico_Le_Contratos_Forn
'
'    tFluxoAux1.tContrato.sCodigo = String(STRING_CONTRATO_CODIGO, 0)
'    tFluxoAux1.sNomeReduzidoCliForn = String(STRING_FORNECEDOR_NOME_REDUZIDO, 0)
'    tFluxoAux1.sDescricaoTipoCliForn = String(STRING_TIPO_FORNECEDOR_DESCRICAO, 0)
'
'    'seleciona as parcelas a receber
'    If giFilialEmpresa = EMPRESA_TODA Then
'
'        'Pesquisa todas as parcelas a receber com vencimento no periodo em questão, com saldo, nao descontada, aberto no ambito empresa
'        lErro = Comando_Executar(lComando, "SELECT Contratos.Codigo, Contratos.Fornecedor, Contratos.FilialFornecedor, Contratos.DataIniContrato, Contratos.DataFimContrato, Fornecedores.Tipo, Fornecedores.NomeReduzido, TiposDeFornecedor.Descricao, ItensDeContrato.DataProxCobranca, ItensDeContrato.Periodicidade, ItensDeContrato.CondPagto, ItensDeContrato.DataRefIni, ItensDeContrato.Quantidade, ItensDeContrato.Valor, ItensDeContrato.Seq, ItensDeContrato.NumIntDoc FROM Contratos, ItensDeContrato, Fornecedores, TiposDeFornecedor WHERE Contratos.Ativo  = ? AND Contratos.DataIniContrato <=? AND Contratos.DataFimContrato >= ? AND Contratos.NumIntDoc = ItensDeContrato.NumIntContrato AND Contratos.Fornecedor = Fornecedores.Codigo AND Fornecedores.Tipo = TiposDeFornecedor.Codigo AND Contratos.Tipo = ? AND ItensDeContrato.DataProxCobranca <=? ORDER BY Contratos.Fornecedor, Contratos.FilialFornecedor, ItensDeContrato.DataProxCobranca", _
'            tFluxoAux1.tContrato.sCodigo, tFluxoAux1.tContrato.lFornecedor, tFluxoAux1.tContrato.iFilialFornecedor, tFluxoAux1.tContrato.dtDataIniContrato, tFluxoAux1.tContrato.dtDataFimContrato, tFluxoAux1.iTipoCliForn_Ctr, tFluxoAux1.sNomeReduzidoCliForn, tFluxoAux1.sDescricaoTipoCliForn, tFluxoAux1.tItemContrato.dtDataProxCobranca, tFluxoAux1.tItemContrato.iPeriodicidade, tFluxoAux1.tItemContrato.iCondPagto, tFluxoAux1.tItemContrato.dtDataRefIni, tFluxoAux1.tItemContrato.dQuantidade, tFluxoAux1.tItemContrato.dValor, tFluxoAux1.tItemContrato.iSeq, tFluxoAux1.tItemContrato.lNumIntDoc, CONTRATO_ATIVO, objFluxo.dtDataFinal + 10, objFluxo.dtDataBase, CONTRATOS_PAGAR, objFluxo.dtDataFinal)
'        If lErro <> AD_SQL_SUCESSO Then gError 133334
'
'    Else
'
'        lErro = Comando_Executar(lComando, "SELECT Contratos.Codigo, Contratos.Fornecedor, Contratos.FilialFornecedor, Contratos.DataIniContrato, Contratos.DataFimContrato, Fornecedores.Tipo, Fornecedores.NomeReduzido, TiposDeFornecedor.Descricao, ItensDeContrato.DataProxCobranca, ItensDeContrato.Periodicidade, ItensDeContrato.CondPagto, ItensDeContrato.DataRefIni, ItensDeContrato.Quantidade, ItensDeContrato.Valor, ItensDeContrato.Seq, ItensDeContrato.NumIntDoc FROM Contratos, ItensDeContrato, Fornecedores, TiposDeFornecedor WHERE FilialEmpresa = ? AND Contratos.Ativo  = ? AND Contratos.DataIniContrato <=? AND Contratos.DataFimContrato >= ? AND Contratos.NumIntDoc = ItensDeContrato.NumIntContrato AND Contratos.Fornecedor = Fornecedores.Codigo AND Fornecedores.Tipo = TiposDeFornecedor.Codigo AND Contratos.Tipo = ? AND ItensDeContrato.DataProxCobranca <=? ORDER BY Contratos.Fornecedor, Contratos.FilialFornecedor, ItensDeContrato.DataProxCobranca", _
'            tFluxoAux1.tContrato.sCodigo, tFluxoAux1.tContrato.lFornecedor, tFluxoAux1.tContrato.iFilialFornecedor, tFluxoAux1.tContrato.dtDataIniContrato, tFluxoAux1.tContrato.dtDataFimContrato, tFluxoAux1.iTipoCliForn_Ctr, tFluxoAux1.sNomeReduzidoCliForn, tFluxoAux1.sDescricaoTipoCliForn, tFluxoAux1.tItemContrato.dtDataProxCobranca, tFluxoAux1.tItemContrato.iPeriodicidade, tFluxoAux1.tItemContrato.iCondPagto, tFluxoAux1.tItemContrato.dtDataRefIni, tFluxoAux1.tItemContrato.dQuantidade, tFluxoAux1.tItemContrato.dValor, tFluxoAux1.tItemContrato.iSeq, tFluxoAux1.tItemContrato.lNumIntDoc, giFilialEmpresa, CONTRATO_ATIVO, objFluxo.dtDataFinal + 10, objFluxo.dtDataBase, CONTRATOS_PAGAR, objFluxo.dtDataFinal)
'        If lErro <> AD_SQL_SUCESSO Then gError 133335
'
'    End If
'
''    lErro = Comando_BuscarPrimeiro(lComando)
''    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 133336
''
''    If lErro = AD_SQL_SUCESSO Then
''
''        tFluxoAux1.tItemContrato.objCondPagto.iCodigo = tFluxoAux1.tItemContrato.iCondPagto
''        tFluxoAux1.tItemContrato.iParcela = 1
''        tFluxoAux1.tItemContrato.objCondPagto.dValorTotal = tFluxoAux1.tItemContrato.dQuantidade * tFluxoAux1.tItemContrato.dValor
''        tFluxoAux1.tItemContrato.objCondPagto.dtDataRef = tFluxoAux1.tItemContrato.dtDataProxCobranca
''
''        lErro = CF("CondicaoPagto_Le", tFluxoAux1.tItemContrato.objCondPagto)
''        If lErro <> SUCESSO And lErro <> 19205 Then gError 133347
''        If lErro <> SUCESSO Then gError 133348
''
''        'Calcula Datas de Vencimento das Parcelas
''        lErro = CF("CondicaoPagto_CalculaParcelas", tFluxoAux1.tItemContrato.objCondPagto)
''        If lErro <> SUCESSO Then gError 133346
''
''        tFluxoAux1.tItemContrato.dtDataProxCobranca = tFluxoAux1.tItemContrato.objCondPagto.colParcelas(1).dtVencimento
''        tFluxoAux1.tItemContrato.dSaldo = tFluxoAux1.tItemContrato.objCondPagto.colParcelas(1).dValor
''
''        lErro = CF("DataVencto_Real", tFluxoAux1.tItemContrato.dtDataProxCobranca, tFluxoAux1.tItemContrato.dtDataVenctoReal)
''        If lErro <> SUCESSO Then gError 133337
'
'    tFluxoAux1.tItemContrato.dtDataRefIni = DATA_MAX
'
'    lErro = FluxoAnalitico_Le_Contratos(objFluxo, lErroRet, lComando, tFluxoAux1)
'    If lErro <> SUCESSO Then gError 133338
'
''    End If
'
'    FluxoAnalitico_Le_Contratos_Forn = SUCESSO
'
'    Exit Function
'
'Erro_FluxoAnalitico_Le_Contratos_Forn:
'
'    FluxoAnalitico_Le_Contratos_Forn = gErr
'
'    Select Case gErr
'
'        Case 133334 To 133336
'            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSDECONTRATO", gErr)
'
'        Case 133337, 133338, 133346, 133347
'
'        Case 133348
'            Call Rotina_Erro(vbOKOnly, "ERRO_CONDICAO_PAGTO_NAO_CADASTRADA", gErr, tFluxoAux1.tItemContrato.objCondPagto.iCodigo)
'
'        Case Else
'            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148457)
'
'    End Select
'
'    Exit Function
'
'End Function

'Private Function FluxoAnalitico_Le_Contratos(ByVal objFluxo As ClassFluxo, lErro As Long, lComando As Long, tFluxoAux1 As typeFluxoAux) As Long
'
'Dim dtDataProxCobranca As Date
'Dim dtRefFim As Date
'Dim dtDataVenctoReal As Date
'Dim lErro1 As Long
'Dim objCondicaoPagto As New ClassCondicaoPagto
'
'On Error GoTo Erro_FluxoAnalitico_Le_Contratos
'
'    'se ainda tiverem itens de contrato
'    Do While lErro = AD_SQL_SUCESSO
'
'        'se a data de referencia for menor ou igual a data de fim do contrato ==> processa o registro
'        'caso contrario ==> ler o proximo item de contrato
'        If tFluxoAux1.tItemContrato.dtDataRefIni <= tFluxoAux1.tContrato.dtDataFimContrato Then
'
'            'se a data da proxima cobranca for menor do que a data base
'            If tFluxoAux1.tItemContrato.dtDataVenctoReal < objFluxo.dtDataBase Then
'
'                If tFluxoAux1.tItemContrato.objCondPagto.colParcelas.Count > tFluxoAux1.tItemContrato.iParcela Then
'
'                    tFluxoAux1.tItemContrato.iParcela = tFluxoAux1.tItemContrato.iParcela + 1
'                    tFluxoAux1.tItemContrato.iParcelaExt = tFluxoAux1.tItemContrato.iParcelaExt + 1
'                    tFluxoAux1.tItemContrato.dtDataVencto = tFluxoAux1.tItemContrato.objCondPagto.colParcelas(tFluxoAux1.tItemContrato.iParcela).dtVencimento
'                    tFluxoAux1.tItemContrato.dSaldo = tFluxoAux1.tItemContrato.objCondPagto.colParcelas(tFluxoAux1.tItemContrato.iParcela).dValor
'
'                    lErro1 = CF("DataVencto_Real", tFluxoAux1.tItemContrato.dtDataVencto, tFluxoAux1.tItemContrato.dtDataVenctoReal)
'                    If lErro1 <> SUCESSO Then gError 133355
'
'                Else
'
'                    lErro1 = CF("Contrato_ProxCobranca", tFluxoAux1.tItemContrato.iPeriodicidade, tFluxoAux1.tItemContrato.dtDataProxCobranca, tFluxoAux1.tItemContrato.dtDataRefIni, dtDataProxCobranca, dtRefFim)
'                    If lErro1 <> SUCESSO Then gError 133282
'
'                    tFluxoAux1.tItemContrato.iParcela = 1
'                    tFluxoAux1.tItemContrato.iParcelaExt = tFluxoAux1.tItemContrato.iParcelaExt + 1
'                    tFluxoAux1.tItemContrato.objCondPagto.dtDataRef = dtDataProxCobranca
'                    tFluxoAux1.tItemContrato.dtDataProxCobranca = dtDataProxCobranca
'
'                    'Calcula Datas de Vencimento das Parcelas
'                    lErro1 = CF("CondicaoPagto_CalculaParcelas", tFluxoAux1.tItemContrato.objCondPagto)
'                    If lErro1 <> SUCESSO Then gError 133341
'
'                    tFluxoAux1.tItemContrato.dtDataVencto = tFluxoAux1.tItemContrato.objCondPagto.colParcelas(1).dtVencimento
'                    tFluxoAux1.tItemContrato.dSaldo = tFluxoAux1.tItemContrato.objCondPagto.colParcelas(1).dValor
'
'                    lErro1 = CF("DataVencto_Real", tFluxoAux1.tItemContrato.dtDataVencto, tFluxoAux1.tItemContrato.dtDataVenctoReal)
'                    If lErro1 <> SUCESSO Then gError 133311
'
'                    tFluxoAux1.tItemContrato.dtDataRefIni = DateAdd("d", 1, dtRefFim)
'
'                End If
'
'            'se a data da proxima cobranca for maior que a data final do fluxo ==> leia o proximo item de contrato
'            ElseIf tFluxoAux1.tItemContrato.dtDataVenctoReal > objFluxo.dtDataFinal Then
'
'                lErro = Comando_BuscarProximo(lComando)
'                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 133287
'
'                If lErro = AD_SQL_SUCESSO Then
'
'                    tFluxoAux1.tItemContrato.objCondPagto.iCodigo = tFluxoAux1.tItemContrato.iCondPagto
'                    tFluxoAux1.tItemContrato.iParcela = 1
'                    tFluxoAux1.tItemContrato.iParcelaExt = 1
'                    tFluxoAux1.tItemContrato.objCondPagto.dValorTotal = tFluxoAux1.tItemContrato.dQuantidade * tFluxoAux1.tItemContrato.dValor
'                    tFluxoAux1.tItemContrato.objCondPagto.dtDataRef = tFluxoAux1.tItemContrato.dtDataProxCobranca
'
'                    lErro1 = CF("CondicaoPagto_Le", tFluxoAux1.tItemContrato.objCondPagto)
'                    If lErro1 <> SUCESSO And lErro1 <> 19205 Then gError 133351
'                    If lErro1 <> SUCESSO Then gError 133352
'
'                    'Calcula Datas de Vencimento das Parcelas
'                    lErro1 = CF("CondicaoPagto_CalculaParcelas", tFluxoAux1.tItemContrato.objCondPagto)
'                    If lErro1 <> SUCESSO Then gError 133342
'
'                    tFluxoAux1.tItemContrato.dtDataVencto = tFluxoAux1.tItemContrato.objCondPagto.colParcelas(1).dtVencimento
'                    tFluxoAux1.tItemContrato.dSaldo = tFluxoAux1.tItemContrato.objCondPagto.colParcelas(1).dValor
'
'                    lErro1 = CF("DataVencto_Real", tFluxoAux1.tItemContrato.dtDataVencto, tFluxoAux1.tItemContrato.dtDataVenctoReal)
'                    If lErro1 <> SUCESSO Then gError 133343
'
'                End If
'
'            Else
'
'                Exit Do
'
'            End If
'
'        Else
'
'            lErro = Comando_BuscarProximo(lComando)
'            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 133288
'
'            If lErro = AD_SQL_SUCESSO Then
'
'                tFluxoAux1.tItemContrato.objCondPagto.iCodigo = tFluxoAux1.tItemContrato.iCondPagto
'                tFluxoAux1.tItemContrato.iParcela = 1
'                tFluxoAux1.tItemContrato.iParcelaExt = 1
'                tFluxoAux1.tItemContrato.objCondPagto.dValorTotal = tFluxoAux1.tItemContrato.dQuantidade * tFluxoAux1.tItemContrato.dValor
'                tFluxoAux1.tItemContrato.objCondPagto.dtDataRef = tFluxoAux1.tItemContrato.dtDataProxCobranca
'
'                lErro1 = CF("CondicaoPagto_Le", tFluxoAux1.tItemContrato.objCondPagto)
'                If lErro1 <> SUCESSO And lErro <> 19205 Then gError 133353
'                If lErro1 <> SUCESSO Then gError 133354
'
'                'Calcula Datas de Vencimento das Parcelas
'                lErro1 = CF("CondicaoPagto_CalculaParcelas", tFluxoAux1.tItemContrato.objCondPagto)
'                If lErro1 <> SUCESSO Then gError 133344
'
'                tFluxoAux1.tItemContrato.dtDataVencto = tFluxoAux1.tItemContrato.objCondPagto.colParcelas(1).dtVencimento
'                tFluxoAux1.tItemContrato.dSaldo = tFluxoAux1.tItemContrato.objCondPagto.colParcelas(1).dValor
'
'                lErro1 = CF("DataVencto_Real", tFluxoAux1.tItemContrato.dtDataVencto, tFluxoAux1.tItemContrato.dtDataVenctoReal)
'                If lErro1 <> SUCESSO Then gError 133346
'
'            End If
'
'        End If
'
'    Loop
'
'    FluxoAnalitico_Le_Contratos = SUCESSO
'
'    Exit Function
'
'Erro_FluxoAnalitico_Le_Contratos:
'
'    FluxoAnalitico_Le_Contratos = gErr
'
'    Select Case gErr
'
'        Case 133282, 133311, 133339, 133340 To 133344, 133346, 133351, 133353, 133355
'
'        Case 133287, 133288
'            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSDECONTRATO", gErr)
'
'        Case 133352, 133354
'            Call Rotina_Erro(vbOKOnly, "ERRO_CONDICAO_PAGTO_NAO_CADASTRADA", gErr, tFluxoAux1.tItemContrato.objCondPagto.iCodigo)
'
'        Case Else
'            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148458)
'
'    End Select
'
'    Exit Function
'
'End Function

Private Function FluxoAnalitico_Grava_Recebtos_6(ByVal objFluxo As ClassFluxo, alErro() As Long, alComando() As Long, tFluxoAux1 As typeFluxoAux) As Long
'processa os registros de recebimento de todas as tabelas
'IMPORTANTE: TEM QUE SER CHAMADA DENTRO DE TRANSACAO

Dim lErro As Long
Dim tDebitosRecCli1 As typeDebitosRecCli
Dim tNFiscal1 As typeNFiscal
Dim tParcelaReceber1 As typeParcelaReceber
Dim dValor As Double
Dim dtDataProxCobranca As Date
Dim dtRefFim As Date
Dim dtDataVenctoReal As Date
Dim tItemContrato As typeItensDeContrato
Dim tFluxoPV As typeFluxoPV

On Error GoTo Erro_FluxoAnalitico_Grava_Recebtos_6

    tNFiscal1.dValorTotal = tFluxoAux1.tNFiscal.dValorTotal
    tParcelaReceber1.dSaldo = tFluxoAux1.tParcelaReceber.dSaldo
    tItemContrato.dSaldo = tFluxoAux1.tItemContrato.dSaldo
    tFluxoPV.dValor = tFluxoAux1.tFluxoPV.dValor
    

    Do While alErro(2) = AD_SQL_SUCESSO Or alErro(3) = AD_SQL_SUCESSO Or alErro(4) = AD_SQL_SUCESSO Or alErro(5) = AD_SQL_SUCESSO

        If alErro(1) = AD_SQL_SUCESSO And alErro(2) = AD_SQL_SUCESSO Then

            If tFluxoAux1.tDebitosRecCli.lCliente = tFluxoAux1.tNFiscal.lCliente And tFluxoAux1.tDebitosRecCli.iFilial = tFluxoAux1.tNFiscal.iFilialCli Then
    
                If alErro(3) = AD_SQL_SUCESSO And tFluxoAux1.tDebitosRecCli.lCliente = tFluxoAux1.tTituloReceber.lCliente And tFluxoAux1.tDebitosRecCli.iFilial = tFluxoAux1.tTituloReceber.iFilial And tFluxoAux1.tNFiscal.dtDataVencimento > tFluxoAux1.tParcelaReceber.dtDataVencimento Then GoTo Label_MenorData
                If alErro(4) = AD_SQL_SUCESSO And tFluxoAux1.tDebitosRecCli.lCliente = tFluxoAux1.tContrato.lCliente And tFluxoAux1.tDebitosRecCli.iFilial = tFluxoAux1.tContrato.iFilCli And tFluxoAux1.tNFiscal.dtDataVencimento > tFluxoAux1.tItemContrato.dtDataVenctoReal Then GoTo Label_MenorData_Contrato
                If alErro(5) = AD_SQL_SUCESSO And tFluxoAux1.tDebitosRecCli.lCliente = tFluxoAux1.tFluxoPV.lCliente And tFluxoAux1.tDebitosRecCli.iFilial = tFluxoAux1.tFluxoPV.iFilCli And tFluxoAux1.tNFiscal.dtDataVencimento > tFluxoAux1.tFluxoPV.dtDataVenctoReal Then GoTo Label_Menor_Data_PV
                
                If tNFiscal1.dValorTotal <= tFluxoAux1.tDebitosRecCli.dSaldo Then
    
                    tFluxoAux1.tDebitosRecCli.dSaldo = tFluxoAux1.tDebitosRecCli.dSaldo - tNFiscal1.dValorTotal
    
                    lErro = Comando_Executar(alComando(4), "INSERT INTO FluxoAnalitico (FluxoId, TipoReg, Fornecedor, Filial, SiglaDocumento, NumTitulo, NumParcela, Data, Valor, TipoFornecedor, NomeReduzido, Descricao, NumIntDoc) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", objFluxo.lFluxoId, FLUXOANALITICO_TIPOREG_RECEBTO, tFluxoAux1.tNFiscal.lCliente, tFluxoAux1.tNFiscal.iFilialCli, TIPODOC_NF_A_RECEBER, CStr(tFluxoAux1.tNFiscal.lNumNotaFiscal), 0, tFluxoAux1.tNFiscal.dtDataVencimento, tFluxoAux1.tNFiscal.dValorTotal, tFluxoAux1.iTipoForn_NFsRec, left(tFluxoAux1.sNomeReduzido_NFsRec, 20), tFluxoAux1.sDescricaoTipo_NFsRec, tFluxoAux1.tNFiscal.lNumIntDoc)
                    If lErro <> AD_SQL_SUCESSO Then gError 20027
    
                    tDebitosRecCli1 = tFluxoAux1.tDebitosRecCli
                    tDebitosRecCli1.dSaldo = tNFiscal1.dValorTotal
                    tDebitosRecCli1.dtDataEmissao = tFluxoAux1.tNFiscal.dtDataVencimento
    
                    'atualiza/insere os recebimentos antecipados
                    lErro = FluxoAnalitico_Atualizar_Rec(alComando(5), alComando(9), alComando(4), objFluxo, tDebitosRecCli1, tFluxoAux1)
                    If lErro <> SUCESSO Then gError 20695
    
                    alErro(2) = Fluxo_Comando_BuscarProximo(alComando(2), tFluxoAux1.tNFiscal.dtDataVencimento, objFluxo, 0)
                    If alErro(2) <> AD_SQL_SUCESSO And alErro(2) <> AD_SQL_SEM_DADOS Then gError 20029
    
                    tNFiscal1.dValorTotal = tFluxoAux1.tNFiscal.dValorTotal
    
                    GoTo Label_FluxoAnalitico_Grava_Recebtos_6
    
                Else
    
                    tFluxoAux1.tDebitosRecCli.dtDataEmissao = tFluxoAux1.tNFiscal.dtDataVencimento
                    tNFiscal1.dValorTotal = tNFiscal1.dValorTotal - tFluxoAux1.tDebitosRecCli.dSaldo
    
                    'atualiza/insere os recebimentos antecipados
                    lErro = FluxoAnalitico_Atualizar_Rec(alComando(5), alComando(9), alComando(4), objFluxo, tFluxoAux1.tDebitosRecCli, tFluxoAux1)
                    If lErro <> SUCESSO Then gError 20696
    
                    alErro(1) = Comando_BuscarProximo(alComando(1))
                    If alErro(1) <> AD_SQL_SUCESSO And alErro(1) <> AD_SQL_SEM_DADOS Then gError 20031
    
                    GoTo Label_FluxoAnalitico_Grava_Recebtos_6
    
                End If
    
            End If

        End If

Label_MenorData:

        If alErro(1) = AD_SQL_SUCESSO And alErro(3) = AD_SQL_SUCESSO Then

            If tFluxoAux1.tDebitosRecCli.lCliente = tFluxoAux1.tTituloReceber.lCliente And tFluxoAux1.tDebitosRecCli.iFilial = tFluxoAux1.tTituloReceber.iFilial Then

                If alErro(4) = AD_SQL_SUCESSO And tFluxoAux1.tDebitosRecCli.lCliente = tFluxoAux1.tContrato.lCliente And tFluxoAux1.tDebitosRecCli.iFilial = tFluxoAux1.tContrato.iFilCli And tFluxoAux1.tParcelaReceber.dtDataVencimento > tFluxoAux1.tItemContrato.dtDataVenctoReal Then GoTo Label_MenorData_Contrato
                If alErro(5) = AD_SQL_SUCESSO And tFluxoAux1.tDebitosRecCli.lCliente = tFluxoAux1.tFluxoPV.lCliente And tFluxoAux1.tDebitosRecCli.iFilial = tFluxoAux1.tFluxoPV.iFilCli And tFluxoAux1.tParcelaReceber.dtDataVencimento > tFluxoAux1.tFluxoPV.dtDataVenctoReal Then GoTo Label_Menor_Data_PV

                If tParcelaReceber1.dSaldo <= tFluxoAux1.tDebitosRecCli.dSaldo Then
    
                    tFluxoAux1.tDebitosRecCli.dSaldo = tFluxoAux1.tDebitosRecCli.dSaldo - tParcelaReceber1.dSaldo
    
                    lErro = Comando_Executar(alComando(4), "INSERT INTO FluxoAnalitico (FluxoId, TipoReg, Fornecedor, Filial, SiglaDocumento, NumTitulo, NumParcela, Data, Valor, TipoFornecedor, NomeReduzido, Descricao, NumIntDoc) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", objFluxo.lFluxoId, FLUXOANALITICO_TIPOREG_RECEBTO, tFluxoAux1.tTituloReceber.lCliente, tFluxoAux1.tTituloReceber.iFilial, tFluxoAux1.tTituloReceber.sSiglaDocumento, CStr(tFluxoAux1.tTituloReceber.lNumTitulo), tFluxoAux1.tParcelaReceber.iNumParcela, tFluxoAux1.tParcelaReceber.dtDataVencimento, tFluxoAux1.tParcelaReceber.dSaldo, tFluxoAux1.iTipoForn_TitRec, left(tFluxoAux1.sNomeReduzido_TitRec, 20), tFluxoAux1.sDescricaoTipo_TitRec, tFluxoAux1.tParcelaReceber.lNumIntDoc)
                    If lErro <> AD_SQL_SUCESSO Then gError 20032
    
                    tDebitosRecCli1 = tFluxoAux1.tDebitosRecCli
                    tDebitosRecCli1.dSaldo = tParcelaReceber1.dSaldo
                    tDebitosRecCli1.dtDataEmissao = tFluxoAux1.tParcelaReceber.dtDataVencimento
    
                    'atualiza/insere os recebimentos antecipados
                    lErro = FluxoAnalitico_Atualizar_Rec(alComando(5), alComando(9), alComando(4), objFluxo, tDebitosRecCli1, tFluxoAux1)
                    If lErro <> SUCESSO Then gError 20697
    
                    alErro(3) = Fluxo_Comando_BuscarProximo(alComando(3), tFluxoAux1.tParcelaReceber.dtDataVencimento, objFluxo, tFluxoAux1.iDiasRetencao)
                    If alErro(3) <> AD_SQL_SUCESSO And alErro(3) <> AD_SQL_SEM_DADOS Then gError 20034
    
                    tParcelaReceber1.dSaldo = tFluxoAux1.tParcelaReceber.dSaldo
    
                    GoTo Label_FluxoAnalitico_Grava_Recebtos_6
    
                Else
    
                    tFluxoAux1.tDebitosRecCli.dtDataEmissao = tFluxoAux1.tParcelaReceber.dtDataVencimento
                    tParcelaReceber1.dSaldo = tParcelaReceber1.dSaldo - tFluxoAux1.tDebitosRecCli.dSaldo
    
                    'atualiza/insere os recebimentos antecipados
                    lErro = FluxoAnalitico_Atualizar_Rec(alComando(5), alComando(9), alComando(4), objFluxo, tFluxoAux1.tDebitosRecCli, tFluxoAux1)
                    If lErro <> SUCESSO Then gError 20698
    
                    alErro(1) = Comando_BuscarProximo(alComando(1))
                    If alErro(1) <> AD_SQL_SUCESSO And alErro(1) <> AD_SQL_SEM_DADOS Then gError 20036
    
                    GoTo Label_FluxoAnalitico_Grava_Recebtos_6
    
                End If
    
            End If

        End If

Label_MenorData_Contrato:

        If alErro(1) = AD_SQL_SUCESSO And alErro(4) = AD_SQL_SUCESSO Then

            If tFluxoAux1.tDebitosRecCli.lCliente = tFluxoAux1.tContrato.lCliente And tFluxoAux1.tDebitosRecCli.iFilial = tFluxoAux1.tContrato.iFilCli Then
    
                If alErro(5) = AD_SQL_SUCESSO And tFluxoAux1.tDebitosRecCli.lCliente = tFluxoAux1.tFluxoPV.lCliente And tFluxoAux1.tDebitosRecCli.iFilial = tFluxoAux1.tFluxoPV.iFilCli And tFluxoAux1.tItemContrato.dtDataVenctoReal > tFluxoAux1.tFluxoPV.dtDataVenctoReal Then GoTo Label_Menor_Data_PV
    
                If tItemContrato.dSaldo <= tFluxoAux1.tDebitosRecCli.dSaldo Then
    
                    tFluxoAux1.tDebitosRecCli.dSaldo = tFluxoAux1.tDebitosRecCli.dSaldo - tItemContrato.dSaldo
    
                    lErro = Comando_Executar(alComando(4), "INSERT INTO FluxoAnalitico (FluxoId, TipoReg, Fornecedor, Filial, SiglaDocumento, NumTitulo, Item, NumParcela, Data, Valor, TipoFornecedor, NomeReduzido, Descricao, NumIntDoc, DataReferencia) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", objFluxo.lFluxoId, FLUXOANALITICO_TIPOREG_RECEBTO, tFluxoAux1.tContrato.lCliente, tFluxoAux1.tContrato.iFilCli, TIPODOC_CONTRATO_REC, tFluxoAux1.tContrato.sCodigo, tFluxoAux1.tItemContrato.iSeq, tFluxoAux1.tItemContrato.iParcelaExt, tFluxoAux1.tItemContrato.dtDataVenctoReal, tFluxoAux1.tItemContrato.dSaldo, tFluxoAux1.iTipoCliForn_Ctr, left(tFluxoAux1.sNomeReduzidoCliForn, 20), tFluxoAux1.sDescricaoTipoCliForn, tFluxoAux1.tItemContrato.lNumIntDoc, tFluxoAux1.tItemContrato.dtDataProxCobranca)
                    If lErro <> AD_SQL_SUCESSO Then gError 188576
    
                    tDebitosRecCli1 = tFluxoAux1.tDebitosRecCli
                    tDebitosRecCli1.dSaldo = tItemContrato.dSaldo
                    tDebitosRecCli1.dtDataEmissao = tFluxoAux1.tItemContrato.dtDataVenctoReal
    
                    'atualiza/insere os recebimentos antecipados
                    lErro = FluxoAnalitico_Atualizar_Rec(alComando(5), alComando(9), alComando(4), objFluxo, tDebitosRecCli1, tFluxoAux1)
                    If lErro <> SUCESSO Then gError 188577
    
                    tFluxoAux1.tItemContrato.dtDataVenctoReal = DATA_NULA
    
    
                    alErro(4) = Fluxo_Comando_BuscarProximo(alComando(10), tFluxoAux1.tItemContrato.dtDataVenctoReal, objFluxo, 0)
                    If alErro(4) <> AD_SQL_SUCESSO And alErro(4) <> AD_SQL_SEM_DADOS Then gError 133307
    
                    tItemContrato.dSaldo = tFluxoAux1.tItemContrato.dSaldo
    
                    GoTo Label_FluxoAnalitico_Grava_Recebtos_6
    
                Else
    
                    tFluxoAux1.tDebitosRecCli.dtDataEmissao = tFluxoAux1.tItemContrato.dtDataVenctoReal
                    tItemContrato.dSaldo = tItemContrato.dSaldo - tFluxoAux1.tDebitosRecCli.dSaldo
    
                    'atualiza/insere os recebimentos antecipados
                    lErro = FluxoAnalitico_Atualizar_Rec(alComando(5), alComando(9), alComando(4), objFluxo, tFluxoAux1.tDebitosRecCli, tFluxoAux1)
                    If lErro <> SUCESSO Then gError 188578
    
                    alErro(1) = Comando_BuscarProximo(alComando(1))
                    If alErro(1) <> AD_SQL_SUCESSO And alErro(1) <> AD_SQL_SEM_DADOS Then gError 188579
    
                    GoTo Label_FluxoAnalitico_Grava_Recebtos_6
    
                End If
    
            End If

        End If

Label_Menor_Data_PV:

        If alErro(1) = AD_SQL_SUCESSO And alErro(5) = AD_SQL_SUCESSO Then

            If tFluxoAux1.tDebitosRecCli.lCliente = tFluxoAux1.tFluxoPV.lCliente And tFluxoAux1.tDebitosRecCli.iFilial = tFluxoAux1.tFluxoPV.iFilCli Then
    
                If tFluxoPV.dValor <= tFluxoAux1.tDebitosRecCli.dSaldo Then
    
                    tFluxoAux1.tDebitosRecCli.dSaldo = tFluxoAux1.tDebitosRecCli.dSaldo - tFluxoPV.dValor
    
                    lErro = Comando_Executar(alComando(4), "INSERT INTO FluxoAnalitico (FluxoId, TipoReg, Fornecedor, Filial, SiglaDocumento, NumTitulo, NumParcela, Data, Valor, TipoFornecedor, NomeReduzido, Descricao, FilialEmpresa) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", objFluxo.lFluxoId, FLUXOANALITICO_TIPOREG_RECEBTO, tFluxoAux1.tFluxoPV.lCliente, tFluxoAux1.tFluxoPV.iFilCli, TIPODOC_PV, CStr(tFluxoAux1.tFluxoPV.lPedido), tFluxoAux1.tFluxoPV.iNumParcela, tFluxoAux1.tFluxoPV.dtDataVenctoReal, tFluxoAux1.tFluxoPV.dValor, tFluxoAux1.iTipoCliPV, left(tFluxoAux1.sNomeReduzidoCliPV, 20), tFluxoAux1.sDescricaoTipoCliPV, tFluxoAux1.tFluxoPV.iFilialEmpresa)
                    If lErro <> AD_SQL_SUCESSO Then gError 188580
    
                    tDebitosRecCli1 = tFluxoAux1.tDebitosRecCli
                    tDebitosRecCli1.dSaldo = tFluxoPV.dValor
                    tDebitosRecCli1.dtDataEmissao = tFluxoAux1.tFluxoPV.dtDataVenctoReal
    
                    'atualiza/insere os recebimentos antecipados
                    lErro = FluxoAnalitico_Atualizar_Rec(alComando(5), alComando(9), alComando(4), objFluxo, tDebitosRecCli1, tFluxoAux1)
                    If lErro <> SUCESSO Then gError 188581
    
                    tFluxoAux1.tFluxoPV.dtDataVenctoReal = DATA_NULA
    
                    alErro(5) = Fluxo_Comando_BuscarProximo(alComando(11), tFluxoAux1.tFluxoPV.dtDataVenctoReal, objFluxo, 0)
                    If alErro(5) <> AD_SQL_SUCESSO And alErro(5) <> AD_SQL_SEM_DADOS Then gError 188582
    
                    tFluxoPV.dValor = tFluxoAux1.tFluxoPV.dValor
    
                    GoTo Label_FluxoAnalitico_Grava_Recebtos_6
    
                Else
    
                    tFluxoAux1.tDebitosRecCli.dtDataEmissao = tFluxoAux1.tFluxoPV.dtDataVenctoReal
                    tFluxoPV.dValor = tFluxoPV.dValor - tFluxoAux1.tDebitosRecCli.dSaldo
    
                    'atualiza/insere os recebimentos antecipados
                    lErro = FluxoAnalitico_Atualizar_Rec(alComando(5), alComando(9), alComando(4), objFluxo, tFluxoAux1.tDebitosRecCli, tFluxoAux1)
                    If lErro <> SUCESSO Then gError 188583
    
                    alErro(1) = Comando_BuscarProximo(alComando(1))
                    If alErro(1) <> AD_SQL_SUCESSO And alErro(1) <> AD_SQL_SEM_DADOS Then gError 188584
    
                    GoTo Label_FluxoAnalitico_Grava_Recebtos_6
    
                End If
    
            End If

        End If

        If alErro(1) = AD_SQL_SUCESSO And _
           (alErro(2) <> AD_SQL_SUCESSO Or (tFluxoAux1.tDebitosRecCli.lCliente < tFluxoAux1.tNFiscal.lCliente Or (tFluxoAux1.tDebitosRecCli.lCliente = tFluxoAux1.tNFiscal.lCliente And tFluxoAux1.tDebitosRecCli.iFilial < tFluxoAux1.tNFiscal.iFilialCli))) And _
           (alErro(3) <> AD_SQL_SUCESSO Or (tFluxoAux1.tDebitosRecCli.lCliente < tFluxoAux1.tTituloReceber.lCliente Or (tFluxoAux1.tDebitosRecCli.lCliente = tFluxoAux1.tTituloReceber.lCliente And tFluxoAux1.tDebitosRecCli.iFilial < tFluxoAux1.tTituloReceber.iFilial))) And _
           (alErro(4) <> AD_SQL_SUCESSO Or (tFluxoAux1.tDebitosRecCli.lCliente < tFluxoAux1.tContrato.lCliente Or (tFluxoAux1.tDebitosRecCli.lCliente = tFluxoAux1.tContrato.lCliente And tFluxoAux1.tDebitosRecCli.iFilial < tFluxoAux1.tContrato.iFilCli))) And _
           (alErro(5) <> AD_SQL_SUCESSO Or (tFluxoAux1.tDebitosRecCli.lCliente < tFluxoAux1.tFluxoPV.lCliente Or (tFluxoAux1.tDebitosRecCli.lCliente = tFluxoAux1.tFluxoPV.lCliente And tFluxoAux1.tDebitosRecCli.iFilial < tFluxoAux1.tFluxoPV.iFilCli))) Then

            alErro(1) = Comando_BuscarProximo(alComando(1))
            If alErro(1) <> AD_SQL_SUCESSO And alErro(1) <> AD_SQL_SEM_DADOS Then gError 20037

        Else

            If alErro(2) = AD_SQL_SUCESSO Then
            
                If alErro(1) <> AD_SQL_SUCESSO Or (tFluxoAux1.tDebitosRecCli.lCliente > tFluxoAux1.tNFiscal.lCliente Or (tFluxoAux1.tDebitosRecCli.lCliente = tFluxoAux1.tNFiscal.lCliente And tFluxoAux1.tDebitosRecCli.iFilial > tFluxoAux1.tNFiscal.iFilialCli)) Then
    
                    lErro = Comando_Executar(alComando(4), "INSERT INTO FluxoAnalitico (FluxoId, TipoReg, Fornecedor, Filial, SiglaDocumento, NumTitulo, NumParcela, Data, Valor, TipoFornecedor, NomeReduzido, Descricao, NumIntDoc) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", objFluxo.lFluxoId, FLUXOANALITICO_TIPOREG_RECEBTO, tFluxoAux1.tNFiscal.lCliente, tFluxoAux1.tNFiscal.iFilialCli, TIPODOC_NF_A_RECEBER, CStr(tFluxoAux1.tNFiscal.lNumNotaFiscal), 0, tFluxoAux1.tNFiscal.dtDataVencimento, tFluxoAux1.tNFiscal.dValorTotal, tFluxoAux1.iTipoForn_NFsRec, left(tFluxoAux1.sNomeReduzido_NFsRec, 20), tFluxoAux1.sDescricaoTipo_NFsRec, tFluxoAux1.tNFiscal.lNumIntDoc)
                    If lErro <> AD_SQL_SUCESSO Then gError 20038
    
                    alErro(2) = Fluxo_Comando_BuscarProximo(alComando(2), tFluxoAux1.tNFiscal.dtDataVencimento, objFluxo, 0)
                    If alErro(2) <> AD_SQL_SUCESSO And alErro(2) <> AD_SQL_SEM_DADOS Then gError 20039
    
                    tNFiscal1.dValorTotal = tFluxoAux1.tNFiscal.dValorTotal
    
                End If
                
            End If

            If alErro(3) = AD_SQL_SUCESSO Then
    
                If alErro(1) <> AD_SQL_SUCESSO Or (tFluxoAux1.tDebitosRecCli.lCliente > tFluxoAux1.tTituloReceber.lCliente Or (tFluxoAux1.tDebitosRecCli.lCliente = tFluxoAux1.tTituloReceber.lCliente And tFluxoAux1.tDebitosRecCli.iFilial > tFluxoAux1.tTituloReceber.iFilial)) Then
    
                    lErro = Comando_Executar(alComando(4), "INSERT INTO FluxoAnalitico (FluxoId, TipoReg, Fornecedor, Filial, SiglaDocumento, NumTitulo, NumParcela, Data, Valor, TipoFornecedor, NomeReduzido, Descricao, NumIntDoc) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", objFluxo.lFluxoId, FLUXOANALITICO_TIPOREG_RECEBTO, tFluxoAux1.tTituloReceber.lCliente, tFluxoAux1.tTituloReceber.iFilial, tFluxoAux1.tTituloReceber.sSiglaDocumento, CStr(tFluxoAux1.tTituloReceber.lNumTitulo), tFluxoAux1.tParcelaReceber.iNumParcela, tFluxoAux1.tParcelaReceber.dtDataVencimento, tFluxoAux1.tParcelaReceber.dSaldo, tFluxoAux1.iTipoForn_TitRec, left(tFluxoAux1.sNomeReduzido_TitRec, 20), tFluxoAux1.sDescricaoTipo_TitRec, tFluxoAux1.tParcelaReceber.lNumIntDoc)
                    If lErro <> AD_SQL_SUCESSO Then gError 20040
    
                    alErro(3) = Fluxo_Comando_BuscarProximo(alComando(3), tFluxoAux1.tParcelaReceber.dtDataVencimento, objFluxo, tFluxoAux1.iDiasRetencao)
                    If alErro(3) <> AD_SQL_SUCESSO And alErro(3) <> AD_SQL_SEM_DADOS Then gError 20041
    
                    tParcelaReceber1.dSaldo = tFluxoAux1.tParcelaReceber.dSaldo
    
                End If
    
            End If

            If alErro(4) = AD_SQL_SUCESSO Then

                If alErro(1) <> AD_SQL_SUCESSO Or (tFluxoAux1.tDebitosRecCli.lCliente > tFluxoAux1.tContrato.lCliente Or (tFluxoAux1.tDebitosRecCli.lCliente = tFluxoAux1.tContrato.lCliente And tFluxoAux1.tDebitosRecCli.iFilial > tFluxoAux1.tContrato.iFilCli)) Then
    
                    lErro = Comando_Executar(alComando(4), "INSERT INTO FluxoAnalitico (FluxoId, TipoReg, Fornecedor, Filial, SiglaDocumento, NumTitulo, Item, NumParcela, Data, Valor, TipoFornecedor, NomeReduzido, Descricao, NumIntDoc, DataReferencia) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", objFluxo.lFluxoId, FLUXOANALITICO_TIPOREG_RECEBTO, tFluxoAux1.tContrato.lCliente, tFluxoAux1.tContrato.iFilCli, TIPODOC_CONTRATO_REC, tFluxoAux1.tContrato.sCodigo, tFluxoAux1.tItemContrato.iSeq, tFluxoAux1.tItemContrato.iParcelaExt, tFluxoAux1.tItemContrato.dtDataVenctoReal, tFluxoAux1.tItemContrato.dSaldo, tFluxoAux1.iTipoCliForn_Ctr, left(tFluxoAux1.sNomeReduzidoCliForn, 20), tFluxoAux1.sDescricaoTipoCliForn, tFluxoAux1.tItemContrato.lNumIntDoc, tFluxoAux1.tItemContrato.dtDataProxCobranca)
                    If lErro <> AD_SQL_SUCESSO Then gError 133313
    
                    tFluxoAux1.tItemContrato.dtDataVenctoReal = DATA_NULA
    
                    alErro(4) = Fluxo_Comando_BuscarProximo(alComando(10), tFluxoAux1.tItemContrato.dtDataVenctoReal, objFluxo, 0)
                    If alErro(4) <> AD_SQL_SUCESSO And alErro(4) <> AD_SQL_SEM_DADOS Then gError 133316
    
                End If
            
            End If

            If alErro(5) = AD_SQL_SUCESSO Then

                If alErro(1) <> AD_SQL_SUCESSO Or (tFluxoAux1.tDebitosRecCli.lCliente > tFluxoAux1.tFluxoPV.lCliente Or (tFluxoAux1.tDebitosRecCli.lCliente = tFluxoAux1.tFluxoPV.lCliente And tFluxoAux1.tDebitosRecCli.iFilial > tFluxoAux1.tFluxoPV.iFilCli)) Then
    
                    lErro = Comando_Executar(alComando(4), "INSERT INTO FluxoAnalitico (FluxoId, TipoReg, Fornecedor, Filial, SiglaDocumento, NumTitulo, NumParcela, Data, Valor, TipoFornecedor, NomeReduzido, Descricao, FilialEmpresa) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", objFluxo.lFluxoId, FLUXOANALITICO_TIPOREG_RECEBTO, tFluxoAux1.tFluxoPV.lCliente, tFluxoAux1.tFluxoPV.iFilCli, TIPODOC_PV, CStr(tFluxoAux1.tFluxoPV.lPedido), tFluxoAux1.tFluxoPV.iNumParcela, tFluxoAux1.tFluxoPV.dtDataVenctoReal, tFluxoAux1.tFluxoPV.dValor, tFluxoAux1.iTipoCliPV, left(tFluxoAux1.sNomeReduzidoCliPV, 20), tFluxoAux1.sDescricaoTipoCliPV, tFluxoAux1.tFluxoPV.iFilialEmpresa)
                    If lErro <> AD_SQL_SUCESSO Then gError 188585
    
                    tFluxoAux1.tFluxoPV.dtDataVenctoReal = DATA_NULA
    
                    alErro(5) = Fluxo_Comando_BuscarProximo(alComando(11), tFluxoAux1.tFluxoPV.dtDataVenctoReal, objFluxo, 0)
                    If alErro(5) <> AD_SQL_SUCESSO And alErro(5) <> AD_SQL_SEM_DADOS Then gError 188586
    
                End If
            
            End If


        End If

Label_FluxoAnalitico_Grava_Recebtos_6:
    Loop

    FluxoAnalitico_Grava_Recebtos_6 = SUCESSO

    Exit Function

Erro_FluxoAnalitico_Grava_Recebtos_6:

    FluxoAnalitico_Grava_Recebtos_6 = gErr

    Select Case gErr

        Case 20027, 20032, 20038, 20040, 133313, 188576, 188577, 188580, 188585
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FLUXOANALITICO", gErr)

        Case 20031, 20036, 20037
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_DEBITOSRECCLI", gErr)

        Case 20029, 20039
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NOTAS_FISCAIS_REC", gErr)

        Case 20034, 20041
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_REC1", gErr)

        Case 20695, 20696, 20697, 20698, 133308, 133312, 133314 To 133316, 188577, 188578, 188579, 188581 To 188584, 188586

        Case 133307
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FluxoContratoPag", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148459)

    End Select

    Exit Function

End Function

Private Function FluxoAnalitico_Grava_Pagtos_6(ByVal objFluxo As ClassFluxo, alErro() As Long, alComando() As Long, tFluxoAux As typeFluxoAux) As Long
'processa os registros de pagamento de todas as tabelas
'IMPORTANTE: TEM QUE SER CHAMADA DENTRO DE TRANSACAO

Dim lErro As Long
Dim tCreditoPagar1 As typeCreditoPagar
Dim dValorPagarRestante As Double
Dim tNFsPag1 As typeNFsPag
Dim tParcelaPagar1 As typeParcelaPagar
Dim dValor As Double
Dim dtRefFim As Date
Dim dtDataVenctoReal As Date
Dim tItemContrato As typeItensDeContrato
Dim tFluxoPC As typeFluxoPC

On Error GoTo Erro_FluxoAnalitico_Grava_Pagtos_6

    tNFsPag1.dValorTotal = tFluxoAux.tNFsPag.dValorTotal
    tParcelaPagar1.dSaldo = tFluxoAux.tParcelaPagar.dSaldo
    tItemContrato.dSaldo = tFluxoAux.tItemContrato.dSaldo
    tFluxoPC.dValor = tFluxoAux.tFluxoPC.dValor

    Do While alErro(2) = AD_SQL_SUCESSO Or alErro(3) = AD_SQL_SUCESSO Or alErro(4) = AD_SQL_SUCESSO

        If alErro(1) = AD_SQL_SUCESSO And alErro(2) = AD_SQL_SUCESSO Then

            If tFluxoAux.tCreditoPagar.lFornecedor = tFluxoAux.tNFsPag.lFornecedor And tFluxoAux.tCreditoPagar.iFilial = tFluxoAux.tNFsPag.iFilial Then

                If alErro(3) = AD_SQL_SUCESSO And tFluxoAux.tCreditoPagar.lFornecedor = tFluxoAux.tTituloPagar.lFornecedor And tFluxoAux.tCreditoPagar.iFilial = tFluxoAux.tTituloPagar.iFilial And tFluxoAux.tNFsPag.dtDataVencimento > tFluxoAux.tParcelaPagar.dtDataVencimento Then GoTo Label_MenorData
                If alErro(4) = AD_SQL_SUCESSO And tFluxoAux.tCreditoPagar.lFornecedor = tFluxoAux.tContrato.lFornecedor And tFluxoAux.tCreditoPagar.iFilial = tFluxoAux.tContrato.iFilialFornecedor And tFluxoAux.tNFsPag.dtDataVencimento > tFluxoAux.tItemContrato.dtDataVenctoReal Then GoTo Label_MenorData_Contrato_Pag
                If alErro(5) = AD_SQL_SUCESSO And tFluxoAux.tCreditoPagar.lFornecedor = tFluxoAux.tFluxoPC.lFornecedor And tFluxoAux.tCreditoPagar.iFilial = tFluxoAux.tFluxoPC.iFilial And tFluxoAux.tNFsPag.dtDataVencimento > tFluxoAux.tFluxoPC.dtDataVenctoReal Then GoTo Label_MenorData_PC
    
                If tNFsPag1.dValorTotal <= tFluxoAux.tCreditoPagar.dSaldo Then
    
                    tFluxoAux.tCreditoPagar.dSaldo = tFluxoAux.tCreditoPagar.dSaldo - tNFsPag1.dValorTotal
    
                    lErro = Comando_Executar(alComando(4), "INSERT INTO FluxoAnalitico (FluxoId, TipoReg, Fornecedor, Filial, SiglaDocumento, NumTitulo, NumParcela, Data, Valor, TipoFornecedor, NomeReduzido, Descricao, NumIntDoc) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", objFluxo.lFluxoId, FLUXOANALITICO_TIPOREG_PAGTO, tFluxoAux.tNFsPag.lFornecedor, tFluxoAux.tNFsPag.iFilial, TIPODOC_NF_A_PAGAR, CStr(tFluxoAux.tNFsPag.lNumNotaFiscal), 0, tFluxoAux.tNFsPag.dtDataVencimento, -tFluxoAux.tNFsPag.dValorTotal, tFluxoAux.iTipoForn_NFsPag, left(tFluxoAux.sNomeReduzido_NFsPag, 20), tFluxoAux.sDescricaoTipo_NFsPag, tFluxoAux.tNFsPag.lNumIntDoc)
                    If lErro <> AD_SQL_SUCESSO Then gError 10975
    
                    tCreditoPagar1 = tFluxoAux.tCreditoPagar
                    tCreditoPagar1.dSaldo = tNFsPag1.dValorTotal
                    tCreditoPagar1.dtDataEmissao = tFluxoAux.tNFsPag.dtDataVencimento
    
                    'insere ou atualiza o registro de credito a pagar
                    lErro = FluxoAnalitico_Atualizar_Credito(alComando(5), alComando(9), alComando(4), objFluxo, tCreditoPagar1, tFluxoAux)
                    If lErro <> SUCESSO Then gError 20687
    
                    alErro(2) = Fluxo_Comando_BuscarProximo(alComando(2), tFluxoAux.tNFsPag.dtDataVencimento, objFluxo, 0)
                    If alErro(2) <> AD_SQL_SUCESSO And alErro(2) <> AD_SQL_SEM_DADOS Then gError 10977
    
                    tNFsPag1.dValorTotal = tFluxoAux.tNFsPag.dValorTotal
    
                    GoTo Label_FluxoAnalitico_Grava_Pagtos_6
    
                Else
    
                    tFluxoAux.tCreditoPagar.dtDataEmissao = tFluxoAux.tNFsPag.dtDataVencimento
    
                    tNFsPag1.dValorTotal = tNFsPag1.dValorTotal - tFluxoAux.tCreditoPagar.dSaldo
    
                    'insere ou atualiza o registro de credito a pagar
                    lErro = FluxoAnalitico_Atualizar_Credito(alComando(5), alComando(9), alComando(4), objFluxo, tFluxoAux.tCreditoPagar, tFluxoAux)
                    If lErro <> SUCESSO Then gError 20688
    
                    alErro(1) = Comando_BuscarProximo(alComando(1))
                    If alErro(1) <> AD_SQL_SUCESSO And alErro(1) <> AD_SQL_SEM_DADOS Then gError 10979
    
                    GoTo Label_FluxoAnalitico_Grava_Pagtos_6
    
                End If
    
            End If

        End If

Label_MenorData:
    
        If alErro(1) = AD_SQL_SUCESSO And alErro(3) = AD_SQL_SUCESSO Then

            If tFluxoAux.tCreditoPagar.lFornecedor = tFluxoAux.tTituloPagar.lFornecedor And tFluxoAux.tCreditoPagar.iFilial = tFluxoAux.tTituloPagar.iFilial Then
    
                If alErro(4) = AD_SQL_SUCESSO And tFluxoAux.tCreditoPagar.lFornecedor = tFluxoAux.tContrato.lFornecedor And tFluxoAux.tCreditoPagar.iFilial = tFluxoAux.tContrato.iFilialFornecedor And tFluxoAux.tParcelaPagar.dtDataVencimento > tFluxoAux.tItemContrato.dtDataVenctoReal Then GoTo Label_MenorData_Contrato_Pag
                If alErro(5) = AD_SQL_SUCESSO And tFluxoAux.tCreditoPagar.lFornecedor = tFluxoAux.tFluxoPC.lFornecedor And tFluxoAux.tCreditoPagar.iFilial = tFluxoAux.tFluxoPC.iFilial And tFluxoAux.tParcelaPagar.dtDataVencimento > tFluxoAux.tFluxoPC.dtDataVenctoReal Then GoTo Label_MenorData_PC
    
                If tParcelaPagar1.dSaldo <= tFluxoAux.tCreditoPagar.dSaldo Then
    
                    tFluxoAux.tCreditoPagar.dSaldo = tFluxoAux.tCreditoPagar.dSaldo - tParcelaPagar1.dSaldo
    
                    lErro = Comando_Executar(alComando(6), "INSERT INTO FluxoAnalitico (FluxoId, TipoReg, Fornecedor, Filial, SiglaDocumento, NumTitulo, NumParcela, Data, Valor, TipoFornecedor, NomeReduzido, Descricao, NumIntDoc, Historico) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)", objFluxo.lFluxoId, FLUXOANALITICO_TIPOREG_PAGTO, tFluxoAux.tTituloPagar.lFornecedor, tFluxoAux.tTituloPagar.iFilial, tFluxoAux.tTituloPagar.sSiglaDocumento, CStr(tFluxoAux.tTituloPagar.lNumTitulo), tFluxoAux.tParcelaPagar.iNumParcela, tFluxoAux.tParcelaPagar.dtDataVencimento, -tFluxoAux.tParcelaPagar.dSaldo, tFluxoAux.iTipoForn_TitPag, left(tFluxoAux.sNomeReduzido_TitPag, 20), tFluxoAux.sDescricaoTipo_TitPag, tFluxoAux.tParcelaPagar.lNumIntDoc, tFluxoAux.tTituloPagar.sHistorico)
                    If lErro <> AD_SQL_SUCESSO Then gError 10980
    
                    tCreditoPagar1 = tFluxoAux.tCreditoPagar
                    tCreditoPagar1.dSaldo = tParcelaPagar1.dSaldo
                    tCreditoPagar1.dtDataEmissao = tFluxoAux.tParcelaPagar.dtDataVencimento
    
                    'insere ou atualiza o registro de credito a pagar
                    lErro = FluxoAnalitico_Atualizar_Credito(alComando(5), alComando(9), alComando(4), objFluxo, tCreditoPagar1, tFluxoAux)
                    If lErro <> SUCESSO Then gError 20689
    
                    alErro(3) = Fluxo_Comando_BuscarProximo(alComando(3), tFluxoAux.tParcelaPagar.dtDataVencimento, objFluxo, 0)
                    If alErro(3) <> AD_SQL_SUCESSO And alErro(3) <> AD_SQL_SEM_DADOS Then gError 10982
    
                    tParcelaPagar1.dSaldo = tFluxoAux.tParcelaPagar.dSaldo
    
                    GoTo Label_FluxoAnalitico_Grava_Pagtos_6
    
                Else
    
                    tFluxoAux.tCreditoPagar.dtDataEmissao = tFluxoAux.tParcelaPagar.dtDataVencimento
                    tParcelaPagar1.dSaldo = tParcelaPagar1.dSaldo - tFluxoAux.tCreditoPagar.dSaldo
    
                    'insere ou atualiza o registro de credito a pagar
                    lErro = FluxoAnalitico_Atualizar_Credito(alComando(5), alComando(9), alComando(4), objFluxo, tFluxoAux.tCreditoPagar, tFluxoAux)
                    If lErro <> SUCESSO Then gError 20690
    
                    alErro(1) = Comando_BuscarProximo(alComando(1))
                    If alErro(1) <> AD_SQL_SUCESSO And alErro(1) <> AD_SQL_SEM_DADOS Then gError 10984
    
                    GoTo Label_FluxoAnalitico_Grava_Pagtos_6
    
                End If
    
            End If

        End If

Label_MenorData_Contrato_Pag:

        If alErro(1) = AD_SQL_SUCESSO And alErro(4) = AD_SQL_SUCESSO Then

            If tFluxoAux.tCreditoPagar.lFornecedor = tFluxoAux.tContrato.lFornecedor And tFluxoAux.tCreditoPagar.iFilial = tFluxoAux.tContrato.iFilialFornecedor Then
    
                If alErro(5) = AD_SQL_SUCESSO And tFluxoAux.tCreditoPagar.lFornecedor = tFluxoAux.tFluxoPC.lFornecedor And tFluxoAux.tCreditoPagar.iFilial = tFluxoAux.tFluxoPC.iFilial And tFluxoAux.tItemContrato.dtDataVenctoReal > tFluxoAux.tFluxoPC.dtDataVenctoReal Then GoTo Label_MenorData_PC
    
                If tItemContrato.dSaldo <= tFluxoAux.tCreditoPagar.dSaldo Then
    
                    tFluxoAux.tCreditoPagar.dSaldo = tFluxoAux.tCreditoPagar.dSaldo - tItemContrato.dSaldo
    
                    lErro = Comando_Executar(alComando(4), "INSERT INTO FluxoAnalitico (FluxoId, TipoReg, Fornecedor, Filial, SiglaDocumento, NumTitulo, Item, NumParcela, Data, Valor, TipoFornecedor, NomeReduzido, Descricao, NumIntDoc, DataReferencia) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", objFluxo.lFluxoId, FLUXOANALITICO_TIPOREG_PAGTO, tFluxoAux.tContrato.lFornecedor, tFluxoAux.tContrato.iFilialFornecedor, TIPODOC_CONTRATO_PAG, tFluxoAux.tContrato.sCodigo, tFluxoAux.tItemContrato.iSeq, tFluxoAux.tItemContrato.iParcelaExt, tFluxoAux.tItemContrato.dtDataVenctoReal, -tFluxoAux.tItemContrato.dSaldo, tFluxoAux.iTipoCliForn_Ctr, left(tFluxoAux.sNomeReduzidoCliForn, 20), tFluxoAux.sDescricaoTipoCliForn, tFluxoAux.tItemContrato.lNumIntDoc, tFluxoAux.tItemContrato.dtDataProxCobranca)
                    If lErro <> AD_SQL_SUCESSO Then gError 133318
    
                    tCreditoPagar1 = tFluxoAux.tCreditoPagar
                    tCreditoPagar1.dSaldo = tItemContrato.dSaldo
                    tCreditoPagar1.dtDataEmissao = tFluxoAux.tItemContrato.dtDataVenctoReal
    
                    'atualiza/insere os recebimentos antecipados
                    lErro = FluxoAnalitico_Atualizar_Credito(alComando(5), alComando(9), alComando(4), objFluxo, tCreditoPagar1, tFluxoAux)
                    If lErro <> SUCESSO Then gError 133319
    
                    tFluxoAux.tItemContrato.dtDataVenctoReal = DATA_NULA
    
                    alErro(4) = Fluxo_Comando_BuscarProximo(alComando(10), tFluxoAux.tItemContrato.dtDataVenctoReal, objFluxo, 0)
                    If alErro(4) <> AD_SQL_SUCESSO And alErro(4) <> AD_SQL_SEM_DADOS Then gError 133322
    
                    tItemContrato.dValor = tFluxoAux.tItemContrato.dValor
    
                    GoTo Label_FluxoAnalitico_Grava_Pagtos_6
    
                Else
    
                    tFluxoAux.tCreditoPagar.dtDataEmissao = tFluxoAux.tItemContrato.dtDataVenctoReal
                    tItemContrato.dSaldo = tItemContrato.dSaldo - tFluxoAux.tCreditoPagar.dSaldo
    
                    'atualiza/insere os recebimentos antecipados
                    lErro = FluxoAnalitico_Atualizar_Credito(alComando(5), alComando(9), alComando(4), objFluxo, tFluxoAux.tCreditoPagar, tFluxoAux)
                    If lErro <> SUCESSO Then gError 133323
    
                    alErro(1) = Comando_BuscarProximo(alComando(1))
                    If alErro(1) <> AD_SQL_SUCESSO And alErro(1) <> AD_SQL_SEM_DADOS Then gError 133324
    
                    GoTo Label_FluxoAnalitico_Grava_Pagtos_6
    
                End If
    
            End If

        End If

Label_MenorData_PC:

        If alErro(1) = AD_SQL_SUCESSO And alErro(5) = AD_SQL_SUCESSO Then

            If tFluxoAux.tCreditoPagar.lFornecedor = tFluxoAux.tFluxoPC.lFornecedor And tFluxoAux.tCreditoPagar.iFilial = tFluxoAux.tFluxoPC.iFilial Then
    
                If tFluxoPC.dValor <= tFluxoAux.tCreditoPagar.dSaldo Then
    
                    tFluxoAux.tCreditoPagar.dSaldo = tFluxoAux.tCreditoPagar.dSaldo - tFluxoPC.dValor
    
                    lErro = Comando_Executar(alComando(4), "INSERT INTO FluxoAnalitico (FluxoId, TipoReg, Fornecedor, Filial, SiglaDocumento, NumTitulo, Item, NumParcela, Data, Valor, TipoFornecedor, NomeReduzido, Descricao, FilialEmpresa) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)", objFluxo.lFluxoId, FLUXOANALITICO_TIPOREG_PAGTO, tFluxoAux.tFluxoPC.lFornecedor, tFluxoAux.tFluxoPC.iFilial, TIPODOC_PC, CStr(tFluxoAux.tFluxoPC.lPedido), 0, tFluxoAux.tFluxoPC.iNumParcela, tFluxoAux.tFluxoPC.dtDataVenctoReal, -tFluxoAux.tFluxoPC.dValor, tFluxoAux.iTipoFornPC, left(tFluxoAux.sNomeReduzidoFornPC, 20), tFluxoAux.sDescricaoTipoFornPC, tFluxoAux.tFluxoPC.iFilialEmpresa)
                    If lErro <> AD_SQL_SUCESSO Then gError 133318
    
                    tCreditoPagar1 = tFluxoAux.tCreditoPagar
                    tCreditoPagar1.dSaldo = tFluxoPC.dValor
                    tCreditoPagar1.dtDataEmissao = tFluxoAux.tFluxoPC.dtDataVenctoReal
    
                    'atualiza/insere os recebimentos antecipados
                    lErro = FluxoAnalitico_Atualizar_Credito(alComando(5), alComando(9), alComando(4), objFluxo, tCreditoPagar1, tFluxoAux)
                    If lErro <> SUCESSO Then gError 133319
    
                    tFluxoAux.tFluxoPC.dtDataVenctoReal = DATA_NULA
    
    
                    alErro(5) = Fluxo_Comando_BuscarProximo(alComando(11), tFluxoAux.tFluxoPC.dtDataVenctoReal, objFluxo, 0)
                    If alErro(5) <> AD_SQL_SUCESSO And alErro(5) <> AD_SQL_SEM_DADOS Then gError 133322
    
                    tFluxoPC.dValor = tFluxoAux.tFluxoPC.dValor
    
                    GoTo Label_FluxoAnalitico_Grava_Pagtos_6
    
                Else
    
                    tFluxoAux.tCreditoPagar.dtDataEmissao = tFluxoAux.tFluxoPC.dtDataVenctoReal
'                    tItemContrato.dSaldo = tItemContrato.dSaldo - tFluxoAux.tCreditoPagar.dSaldo
                    tFluxoPC.dValor = tFluxoPC.dValor - tFluxoAux.tCreditoPagar.dSaldo
    
                    'atualiza/insere os recebimentos antecipados
                    lErro = FluxoAnalitico_Atualizar_Credito(alComando(5), alComando(9), alComando(4), objFluxo, tFluxoAux.tCreditoPagar, tFluxoAux)
                    If lErro <> SUCESSO Then gError 133323
    
                    alErro(1) = Comando_BuscarProximo(alComando(1))
                    If alErro(1) <> AD_SQL_SUCESSO And alErro(1) <> AD_SQL_SEM_DADOS Then gError 133324
    
                    GoTo Label_FluxoAnalitico_Grava_Pagtos_6
    
                End If
    
            End If

        End If

        If alErro(1) = AD_SQL_SUCESSO And _
           (alErro(2) <> AD_SQL_SUCESSO Or (tFluxoAux.tCreditoPagar.lFornecedor < tFluxoAux.tNFsPag.lFornecedor Or (tFluxoAux.tCreditoPagar.lFornecedor = tFluxoAux.tNFsPag.lFornecedor And tFluxoAux.tCreditoPagar.iFilial < tFluxoAux.tNFsPag.iFilial))) And _
           (alErro(3) <> AD_SQL_SUCESSO Or (tFluxoAux.tCreditoPagar.lFornecedor < tFluxoAux.tTituloPagar.lFornecedor Or (tFluxoAux.tCreditoPagar.lFornecedor = tFluxoAux.tTituloPagar.lFornecedor And tFluxoAux.tCreditoPagar.iFilial < tFluxoAux.tTituloPagar.iFilial))) And _
           (alErro(4) <> AD_SQL_SUCESSO Or (tFluxoAux.tCreditoPagar.lFornecedor < tFluxoAux.tContrato.lFornecedor Or (tFluxoAux.tCreditoPagar.lFornecedor = tFluxoAux.tContrato.lFornecedor And tFluxoAux.tCreditoPagar.iFilial < tFluxoAux.tContrato.iFilialFornecedor))) And _
           (alErro(5) <> AD_SQL_SUCESSO Or (tFluxoAux.tCreditoPagar.lFornecedor < tFluxoAux.tFluxoPC.lFornecedor Or (tFluxoAux.tCreditoPagar.lFornecedor = tFluxoAux.tFluxoPC.lFornecedor And tFluxoAux.tCreditoPagar.iFilial < tFluxoAux.tFluxoPC.iFilial))) Then

            alErro(1) = Comando_BuscarProximo(alComando(1))
            If alErro(1) <> AD_SQL_SUCESSO And alErro(1) <> AD_SQL_SEM_DADOS Then gError 133325

        Else
            
            If alErro(2) = AD_SQL_SUCESSO Then
            
                If alErro(1) <> AD_SQL_SUCESSO Or (tFluxoAux.tCreditoPagar.lFornecedor > tFluxoAux.tNFsPag.lFornecedor Or (tFluxoAux.tCreditoPagar.lFornecedor = tFluxoAux.tNFsPag.lFornecedor And tFluxoAux.tCreditoPagar.iFilial > tFluxoAux.tNFsPag.iFilial)) Then
    
                    lErro = Comando_Executar(alComando(4), "INSERT INTO FluxoAnalitico (FluxoId, TipoReg, Fornecedor, Filial, SiglaDocumento, NumTitulo, NumParcela, Data, Valor, TipoFornecedor, NomeReduzido, Descricao, NumIntDoc) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", objFluxo.lFluxoId, FLUXOANALITICO_TIPOREG_PAGTO, tFluxoAux.tNFsPag.lFornecedor, tFluxoAux.tNFsPag.iFilial, TIPODOC_NF_A_PAGAR, CStr(tFluxoAux.tNFsPag.lNumNotaFiscal), 0, tFluxoAux.tNFsPag.dtDataVencimento, -tFluxoAux.tNFsPag.dValorTotal, tFluxoAux.iTipoForn_NFsPag, left(tFluxoAux.sNomeReduzido_NFsPag, 20), tFluxoAux.sDescricaoTipo_NFsPag, tFluxoAux.tNFsPag.lNumIntDoc)
                    If lErro <> AD_SQL_SUCESSO Then gError 133326
    
                    alErro(2) = Fluxo_Comando_BuscarProximo(alComando(2), tFluxoAux.tNFsPag.dtDataVencimento, objFluxo, 0)
                    If alErro(2) <> AD_SQL_SUCESSO And alErro(2) <> AD_SQL_SEM_DADOS Then gError 133327
    
                    tNFsPag1.dValorTotal = tFluxoAux.tNFsPag.dValorTotal
    
                End If
                
            End If
            
            If alErro(3) = AD_SQL_SUCESSO Then
            
                If alErro(1) <> AD_SQL_SUCESSO Or (tFluxoAux.tCreditoPagar.lFornecedor > tFluxoAux.tTituloPagar.lFornecedor Or (tFluxoAux.tCreditoPagar.lFornecedor = tFluxoAux.tTituloPagar.lFornecedor And tFluxoAux.tCreditoPagar.iFilial > tFluxoAux.tTituloPagar.iFilial)) Then
                
                    lErro = Comando_Executar(alComando(4), "INSERT INTO FluxoAnalitico (FluxoId, TipoReg, Fornecedor, Filial, SiglaDocumento, NumTitulo, NumParcela, Data, Valor, TipoFornecedor, NomeReduzido, Descricao, NumIntDoc, Historico) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)", objFluxo.lFluxoId, FLUXOANALITICO_TIPOREG_PAGTO, tFluxoAux.tTituloPagar.lFornecedor, tFluxoAux.tTituloPagar.iFilial, tFluxoAux.tTituloPagar.sSiglaDocumento, CStr(tFluxoAux.tTituloPagar.lNumTitulo), tFluxoAux.tParcelaPagar.iNumParcela, tFluxoAux.tParcelaPagar.dtDataVencimento, -tFluxoAux.tParcelaPagar.dSaldo, tFluxoAux.iTipoForn_TitPag, left(tFluxoAux.sNomeReduzido_TitPag, 20), tFluxoAux.sDescricaoTipo_TitPag, tFluxoAux.tParcelaPagar.lNumIntDoc, tFluxoAux.tTituloPagar.sHistorico)
                    If lErro <> AD_SQL_SUCESSO Then gError 133328
    
                    alErro(3) = Fluxo_Comando_BuscarProximo(alComando(3), tFluxoAux.tParcelaPagar.dtDataVencimento, objFluxo, 0)
                    If alErro(3) <> AD_SQL_SUCESSO And alErro(3) <> AD_SQL_SEM_DADOS Then gError 133329
    
                    tParcelaPagar1.dSaldo = tFluxoAux.tParcelaPagar.dSaldo

                End If

            End If

            If alErro(4) = AD_SQL_SUCESSO Then

                If alErro(1) <> AD_SQL_SUCESSO Or (tFluxoAux.tCreditoPagar.lFornecedor > tFluxoAux.tContrato.lFornecedor Or (tFluxoAux.tCreditoPagar.lFornecedor = tFluxoAux.tContrato.lFornecedor And tFluxoAux.tCreditoPagar.iFilial > tFluxoAux.tContrato.iFilialFornecedor)) Then
    
                    lErro = Comando_Executar(alComando(4), "INSERT INTO FluxoAnalitico (FluxoId, TipoReg, Fornecedor, Filial, SiglaDocumento, NumTitulo, Item, NumParcela, Data, Valor, TipoFornecedor, NomeReduzido, Descricao, NumIntDoc, DataReferencia) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", objFluxo.lFluxoId, FLUXOANALITICO_TIPOREG_PAGTO, tFluxoAux.tContrato.lFornecedor, tFluxoAux.tContrato.iFilialFornecedor, TIPODOC_CONTRATO_PAG, tFluxoAux.tContrato.sCodigo, tFluxoAux.tItemContrato.iSeq, tFluxoAux.tItemContrato.iParcelaExt, tFluxoAux.tItemContrato.dtDataVenctoReal, -tFluxoAux.tItemContrato.dSaldo, tFluxoAux.iTipoCliForn_Ctr, left(tFluxoAux.sNomeReduzidoCliForn, 20), tFluxoAux.sDescricaoTipoCliForn, tFluxoAux.tItemContrato.lNumIntDoc, tFluxoAux.tItemContrato.dtDataProxCobranca)
                    If lErro <> AD_SQL_SUCESSO Then gError 133330
    
                    tFluxoAux.tItemContrato.dtDataVenctoReal = DATA_NULA
    
                    alErro(4) = Fluxo_Comando_BuscarProximo(alComando(10), tFluxoAux.tItemContrato.dtDataVenctoReal, objFluxo, 0)
                    If alErro(4) <> AD_SQL_SUCESSO And alErro(4) <> AD_SQL_SEM_DADOS Then gError 133322
                    
                    tItemContrato.dValor = tFluxoAux.tItemContrato.dValor
    
                End If

            End If

            If alErro(5) = AD_SQL_SUCESSO Then

                If alErro(1) <> AD_SQL_SUCESSO Or (tFluxoAux.tCreditoPagar.lFornecedor > tFluxoAux.tFluxoPC.lFornecedor Or (tFluxoAux.tCreditoPagar.lFornecedor = tFluxoAux.tFluxoPC.lFornecedor And tFluxoAux.tCreditoPagar.iFilial > tFluxoAux.tFluxoPC.iFilial)) Then
    
                    lErro = Comando_Executar(alComando(4), "INSERT INTO FluxoAnalitico (FluxoId, TipoReg, Fornecedor, Filial, SiglaDocumento, NumTitulo, Item, NumParcela, Data, Valor, TipoFornecedor, NomeReduzido, Descricao, FilialEmpresa) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)", objFluxo.lFluxoId, FLUXOANALITICO_TIPOREG_PAGTO, tFluxoAux.tFluxoPC.lFornecedor, tFluxoAux.tFluxoPC.iFilial, TIPODOC_PC, CStr(tFluxoAux.tFluxoPC.lPedido), 0, tFluxoAux.tFluxoPC.iNumParcela, tFluxoAux.tFluxoPC.dtDataVenctoReal, -tFluxoAux.tFluxoPC.dValor, tFluxoAux.iTipoFornPC, left(tFluxoAux.sNomeReduzidoFornPC, 20), tFluxoAux.sDescricaoTipoFornPC, tFluxoAux.tFluxoPC.iFilialEmpresa)
                    If lErro <> AD_SQL_SUCESSO Then gError 133330
    
                    tFluxoAux.tFluxoPC.dtDataVenctoReal = DATA_NULA
    
                    alErro(5) = Fluxo_Comando_BuscarProximo(alComando(11), tFluxoAux.tFluxoPC.dtDataVenctoReal, objFluxo, 0)
                    If alErro(5) <> AD_SQL_SUCESSO And alErro(5) <> AD_SQL_SEM_DADOS Then gError 133322
                    
                    tFluxoPC.dValor = tFluxoAux.tFluxoPC.dValor
    
                End If

            End If

        End If
        
Label_FluxoAnalitico_Grava_Pagtos_6:
    Loop

    FluxoAnalitico_Grava_Pagtos_6 = SUCESSO

    Exit Function

Erro_FluxoAnalitico_Grava_Pagtos_6:

    FluxoAnalitico_Grava_Pagtos_6 = gErr

    Select Case gErr

        Case 10975, 10980, 10986, 10988, 133318, 133326, 133328, 133330
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FLUXOANALITICO", gErr)

        Case 10977, 10987, 133327
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFSPAG", gErr)

        Case 10979, 10984, 10985, 133324, 133325
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CREDITO_PAG_FORN", gErr)

        Case 10982, 10989, 133329
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_PAG1", gErr)

        Case 20687, 20688, 20689, 20690, 133319 To 133323, 133331 To 133333

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148460)

    End Select

    Exit Function

End Function

Function Preenche_Boleto_356(ByVal objCCI As ClassContasCorrentesInternas, ByVal objParcelaReceber As ClassParcelaReceber, sCampoLivre As String, ByVal objCarteiraCobrador As ClassCarteiraCobrador, ByVal bSemValorVcto As Boolean) As Long
'Preenche o Campo Livre para compor o Código de Barras e a Linha Digitável de um Boleto Bancário
'Esta função devolve o Campo Livre específico para o Banco 356 - Jorge Specian - 09/03/2005

Dim lErro As Long
Dim sNossoNumero As String
Dim sAgencia As String
Dim sConta As String, iDigitao As Integer
Dim iTamanho_NossoNumero As Integer
Dim iTamanho_Agencia As Integer
Dim iTamanho_Conta As Integer

On Error GoTo Erro_Preenche_Boleto_356

    'Inicializa variáveis com tamanho dos campos
    iTamanho_NossoNumero = 13
    iTamanho_Agencia = 4
    iTamanho_Conta = 7

    'Valida e formata valores do Campo Livre
    
    If Not IsNumeric(Trim(objParcelaReceber.sNumTitCobrador)) Or Len(Trim(objParcelaReceber.sNumTitCobrador)) > iTamanho_NossoNumero Then gError 134249
    sNossoNumero = Format(left(Trim(objParcelaReceber.sNumTitCobrador), iTamanho_NossoNumero), "0000000000000")
    
    If Not IsNumeric(Trim(objCCI.sAgencia)) Or Len(Trim(objCCI.sAgencia)) > iTamanho_Agencia Then gError 134250
    sAgencia = Format(left(Trim(objCCI.sAgencia), iTamanho_Agencia), "0000")

    If Not IsNumeric(Trim(objCCI.sNumConta)) Or Len(Trim(objCCI.sNumConta)) > iTamanho_Conta Then gError 134251
    sConta = Format(left(Trim(objCCI.sNumConta), iTamanho_Conta), "0000000")
        
    Call Calcula_DV10(sNossoNumero & sAgencia & sConta, iDigitao)
    
    'Concatena a sequencia
    sCampoLivre = sAgencia & sConta & CStr(iDigitao) & sNossoNumero

    Preenche_Boleto_356 = SUCESSO

    Exit Function

Erro_Preenche_Boleto_356:

    Preenche_Boleto_356 = gErr
    
    Select Case gErr
        
        Case 134249
            Call Rotina_Erro(vbOKOnly, "ERRO_NOSSONUMERO_NAO_NUMERICO", gErr, iTamanho_NossoNumero)
        
        Case 134250
            Call Rotina_Erro(vbOKOnly, "ERRO_AGENCIA_NAO_NUMERICO", gErr, iTamanho_Agencia)
        
        Case 134251
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTA_NAO_NUMERICO", gErr, iTamanho_Conta)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148461)
    
    End Select
    
    Exit Function

End Function

Private Function NossoNumero_ObtemDV_356(ByVal objCCI As ClassContasCorrentesInternas, ByVal sNossoNumero As String, ByVal iNumCarteiraCobrador As Integer, ByVal sCampoLivre As String, ByVal objParcelaReceber As ClassParcelaReceber, sDVNossoNumero As String) As Long

Dim lErro As Long

On Error GoTo Erro_NossoNumero_ObtemDV_356

    sDVNossoNumero = ""
    
    NossoNumero_ObtemDV_356 = SUCESSO
     
    Exit Function
    
Erro_NossoNumero_ObtemDV_356:

    NossoNumero_ObtemDV_356 = gErr
     
    Select Case gErr
          
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148462)
     
    End Select
     
    Exit Function

End Function

Private Function Preenche_Boleto_BB(ByVal objCCI As ClassContasCorrentesInternas, ByVal objParcelaReceber As ClassParcelaReceber, sCampoLivre As String, ByVal objCarteiraCobrador As ClassCarteiraCobrador, ByVal bSemValorVcto As Boolean) As Long
'Preenche o Campo Livre para compor o Código de Barras e a Linha Digitável de um Boleto Bancário
'Esta função devolve o Campo Livre específico para o Banco BB - Jorge Specian - 09/03/2005

Dim lErro As Long
Dim sNossoNumero As String
Dim sAgencia As String, sCarteira As String
Dim sConta As String, iDigitao As Integer
Dim iTamanho_NossoNumero As Integer
Dim iTamanho_Agencia As Integer
Dim iTamanho_Conta As Integer, sConvenio As String
Dim sAux As String, iTamConvenio As Integer, sDVNossoNumero As String

On Error GoTo Erro_Preenche_Boleto_BB

    'Inicializa variáveis com tamanho dos campos
    iTamanho_NossoNumero = 17
    iTamanho_Agencia = 4
    iTamanho_Conta = 8

    'Valida e formata valores do Campo Livre
    
    If Not IsNumeric(Trim(objParcelaReceber.sNumTitCobrador)) Or Len(Trim(objParcelaReceber.sNumTitCobrador)) > iTamanho_NossoNumero Then gError 134249
    sNossoNumero = Format(left(Trim(objParcelaReceber.sNumTitCobrador), iTamanho_NossoNumero), "00000000000")
    
    If Not IsNumeric(Trim(objCCI.sAgencia)) Or Len(Trim(objCCI.sAgencia)) > iTamanho_Agencia Then gError 134250
    sAgencia = Format(left(Trim(objCCI.sAgencia), iTamanho_Agencia), "0000")

    If Not IsNumeric(Trim(objCCI.sNumConta)) Or Len(Trim(objCCI.sNumConta)) > iTamanho_Conta Then gError 134251
    sConta = Format(left(Trim(objCCI.sNumConta), iTamanho_Conta), "00000000")
        
    sCarteira = Format(objCarteiraCobrador.iNumCarteiraNoBanco, "00")
    
    sConvenio = String(255, 0)
    lErro = CF("CarteiraCobradorInfo_ObtemValor", objCarteiraCobrador.iCobrador, objCarteiraCobrador.iCodCarteiraCobranca, 7, sConvenio)
    If lErro <> SUCESSO Then gError 184861
    
    'sConvenio = left(sConvenio, 9)
    
    iTamConvenio = 7
    If Len(Trim(sConvenio)) = 18 Then
        sAux = Mid(sConvenio, 1, 9)
    Else
        sAux = left(sConvenio, 7)
    End If
    Select Case StrParaDbl(sAux)
        Case Is < 10000
            iTamConvenio = 4
        Case 10000 To 999999
            iTamConvenio = 6
        Case Else
            iTamConvenio = 7
    End Select
    sConvenio = FormataCpoNum(StrParaDbl(sAux), iTamConvenio)
    
    'If StrParaLong(sConvenio) > 1000000 Then
    If iTamConvenio = 7 Then
    
        'objParcelaReceber.sNumTitCobrador já vai vir certo CCCCCCCNNNNNNNNNN, mas vou deixar o código atual
    
        If Len(objParcelaReceber.sNumTitCobrador) < 12 Then objParcelaReceber.sNumTitCobrador = right(sConvenio, 7) & right(sNossoNumero, 10)
        
        'Concatena a sequencia
        sCampoLivre = "000000" & right(sConvenio, 7) & right(sNossoNumero, 10) & sCarteira
    
    Else
    
        'Concatena a sequencia
        'sCampoLivre = sNossoNumero & sAgencia & sConta & sCarteira
        
        If Len(objParcelaReceber.sNumTitCobrador) = 12 Then
            sNossoNumero = left(objParcelaReceber.sNumTitCobrador, 11) '-> remove o DV
        Else
            sNossoNumero = objParcelaReceber.sNumTitCobrador
        End If
        
        sCampoLivre = sNossoNumero & sAgencia & sConta & sCarteira

    End If

    Preenche_Boleto_BB = SUCESSO

    Exit Function

Erro_Preenche_Boleto_BB:

    Preenche_Boleto_BB = gErr
    
    Select Case gErr
        
        Case 134249
            Call Rotina_Erro(vbOKOnly, "ERRO_NOSSONUMERO_NAO_NUMERICO", gErr, iTamanho_NossoNumero)
        
        Case 134250
            Call Rotina_Erro(vbOKOnly, "ERRO_AGENCIA_NAO_NUMERICO", gErr, iTamanho_Agencia)
        
        Case 134251
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTA_NAO_NUMERICO", gErr, iTamanho_Conta)
        
        Case 184861
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148463)
    
    End Select
    
    Exit Function

End Function

Private Function NossoNumero_ObtemDV_BB(ByVal objCCI As ClassContasCorrentesInternas, ByVal sNossoNumero As String, ByVal iNumCarteiraCobrador As Integer, ByVal sCampoLivre As String, ByVal objParcelaReceber As ClassParcelaReceber, sDVNossoNumero As String) As Long

Dim lErro As Long, sSequencia As String

On Error GoTo Erro_NossoNumero_ObtemDV_BB

    If Len(sNossoNumero) < 12 Then
        sSequencia = FormataCpoNum(sNossoNumero, 11)
    Else
        sSequencia = sNossoNumero
    End If
    
    lErro = Calcula_DV11(sSequencia, 9, sDVNossoNumero, True)
    If lErro <> SUCESSO Then gError 130019
        
    ' MÉTODOLOGIA
    'a) O módulo 11 é utilizado para montagem dos campos nosso-número, código do cedente e
    'prefixo da agência, que serão impressos nos respectivos campos do bloqueto de cobrança;
    'b) Cada algarismo que compõe o nosso-número é multiplicado pelo respectivo multiplicador
    '(peso).
    'I - os multiplicadores (pesos) variam de 9 a 2, da direita para a esquerda;
    'II - o primeiro dígito da direita para a esquerda deverá ser multiplicado por 9, o
    'segundo por 8 e assim sucessivamente;
    'c) Os resultados das multiplicacoes são somados;
    'd) O total da soma é dívido por onze;
    'I - se o resto for menor que 10 (dez) o DV será igual ao resto;
'-->'II - se o resto for igual a 10 /dez/ o DV sera igual a X;
    'III - se o resto for igual a 0 /zero/ o DV sera igual a 0;
    'IV - no exemplo acima o digito verificador sera igual a 3;
    
    If sDVNossoNumero = "P" Then sDVNossoNumero = "X"
    
    NossoNumero_ObtemDV_BB = SUCESSO
     
    Exit Function
    
Erro_NossoNumero_ObtemDV_BB:

    NossoNumero_ObtemDV_BB = gErr
     
    Select Case gErr
          
        Case 130019
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148464)
     
    End Select
     
    Exit Function

End Function

Private Function NossoNumero_ObtemDV_Safra(ByVal objCCI As ClassContasCorrentesInternas, ByVal sNossoNumero As String, ByVal iNumCarteiraCobrador As Integer, ByVal sCampoLivre As String, ByVal objParcelaReceber As ClassParcelaReceber, sDVNossoNumero As String) As Long

Dim lErro As Long, sSequencia As String

On Error GoTo Erro_NossoNumero_ObtemDV_Safra

    sSequencia = sNossoNumero
    
    If Len(Trim(sNossoNumero)) > 8 Then
        sDVNossoNumero = "" 'Já está com o DV
    Else

        lErro = Calcula_DV11_Safra(sSequencia, 9, sDVNossoNumero)
        If lErro <> SUCESSO Then gError 130019
        
    End If
    
    NossoNumero_ObtemDV_Safra = SUCESSO
     
    Exit Function
    
Erro_NossoNumero_ObtemDV_Safra:

    NossoNumero_ObtemDV_Safra = gErr
     
    Select Case gErr
          
        Case 130019
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148464)
     
    End Select
     
    Exit Function

End Function

Private Function Preenche_Boleto_CEF(ByVal objCCI As ClassContasCorrentesInternas, ByVal objParcelaReceber As ClassParcelaReceber, sCampoLivre As String, ByVal objCarteiraCobrador As ClassCarteiraCobrador, ByVal bSemValorVcto As Boolean) As Long
'Preenche o Campo Livre para compor o Código de Barras e a Linha Digitável de um Boleto Bancário
'Esta função devolve o Campo Livre específico para o Banco CEF - Jorge Specian - 09/03/2005

Dim lErro As Long
Dim sNossoNumero As String, sCodCedente As String, sDVCedente As String, sDVCampoLivre As String

On Error GoTo Erro_Preenche_Boleto_CEF

    'Valida e formata valores do Campo Livre
    
    'codigo cedente
    lErro = CF("CarteiraCobradorInfo_ObtemValor", objCarteiraCobrador.iCobrador, objCarteiraCobrador.iCodCarteiraCobranca, 7, sCodCedente)
    If lErro <> SUCESSO Then gError 130410
    
    If Len(Trim(sCodCedente)) = 16 Then
    
        '10 digitos do nosso numero sem dv
        If Not IsNumeric(Trim(objParcelaReceber.sNumTitCobrador)) Then gError 134249
        sNossoNumero = Format(right(Trim(objParcelaReceber.sNumTitCobrador), 10), "0000000000")
    
        'Concatena a sequencia
        sCampoLivre = sNossoNumero & left(sCodCedente, 15)

    Else
    
        lErro = Calcula_DV11(sCodCedente, 9, sDVCedente, False)
        If lErro <> SUCESSO Then gError 130019
        
        '10 digitos do nosso numero sem dv
        If Not IsNumeric(Trim(objParcelaReceber.sNumTitCobrador)) Then gError 134249
        sNossoNumero = Format(right(Trim(objParcelaReceber.sNumTitCobrador), 15), "000000000000000")
    
        sCampoLivre = sCodCedente & sDVCedente & Mid(sNossoNumero, 1, 3) & IIf(objCarteiraCobrador.iComRegistro, "1", "2") & Mid(sNossoNumero, 4, 3) & "4" & Mid(sNossoNumero, 7, 9)
    
        lErro = Calcula_DV11(sCampoLivre, 9, sDVCampoLivre, False)
        If lErro <> SUCESSO Then gError 130019
        
        sCampoLivre = sCampoLivre & sDVCampoLivre
    
    End If

    Preenche_Boleto_CEF = SUCESSO

    Exit Function

Erro_Preenche_Boleto_CEF:

    Preenche_Boleto_CEF = gErr
    
    Select Case gErr
        
        Case 134249
            Call Rotina_Erro(vbOKOnly, "ERRO_NOSSONUMERO_NAO_NUMERICO", gErr)
        
        Case 130410
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148465)
    
    End Select
    
    Exit Function

End Function

Private Function NossoNumero_ObtemDV_CEF(ByVal objCCI As ClassContasCorrentesInternas, ByVal sNossoNumero As String, ByVal iNumCarteiraCobrador As Integer, ByVal sCampoLivre As String, ByVal objParcelaReceber As ClassParcelaReceber, sDVNossoNumero As String) As Long

Dim lErro As Long, sSequencia As String

On Error GoTo Erro_NossoNumero_ObtemDV_CEF

    If Len(Trim(sNossoNumero)) > 10 Then
    
        sSequencia = Mid(sCampoLivre, 11, 1) & Mid(sCampoLivre, 15, 1) & Mid(sCampoLivre, 8, 3) & Mid(sCampoLivre, 12, 3) & Mid(sCampoLivre, 16, 9)
        lErro = Calcula_DV11(sSequencia, 9, sDVNossoNumero)
        If lErro <> SUCESSO Then gError 130019
    
    Else
    
        sSequencia = FormataCpoNum(right(sNossoNumero, 10), 10)
        lErro = Calcula_DV11(sSequencia, 9, sDVNossoNumero)
        If lErro <> SUCESSO Then gError 130019
    
    End If
    
    NossoNumero_ObtemDV_CEF = SUCESSO
     
    Exit Function
    
Erro_NossoNumero_ObtemDV_CEF:

    NossoNumero_ObtemDV_CEF = gErr
     
    Select Case gErr
          
        Case 130019
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148466)
     
    End Select
     
    Exit Function

End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'GRAVAÇÃO
Public Function TiposDifParcRec_Grava(ByVal objTiposDifParcRec As ClassTiposDifParcRec) As Long

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_TiposDifParcRec_Grava

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 177667

    lErro = CF("TiposDifParcRec_Grava_EmTrans", objTiposDifParcRec)
    If lErro <> SUCESSO Then gError 177668

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 177669

    TiposDifParcRec_Grava = SUCESSO

    Exit Function

Erro_TiposDifParcRec_Grava:

    TiposDifParcRec_Grava = gErr

    Select Case gErr

        Case 177667
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 177668

        Case 177669
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 143936)

    End Select

    'Desfaz Transação
    Call Transacao_Rollback

    Exit Function

End Function

Public Function TiposDifParcRec_Grava_EmTrans(ByVal objTiposDifParcRec As ClassTiposDifParcRec) As Long

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim iAux As Integer

On Error GoTo Erro_TiposDifParcRec_Grava_EmTrans

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 177670
    Next

    'Le a tabelaTiposDifParcRec
    lErro = Comando_ExecutarPos(alComando(0), "SELECT 1 FROM TiposDifParcRec WHERE Codigo= ? ", _
                0, iAux, objTiposDifParcRec.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 177671

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 177672

    'Se existir => UPDATE, senão => INSERT
    If lErro = AD_SQL_SUCESSO Then

        'Trava registro contra alterações/Leituras
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> SUCESSO Then gError 177673

        lErro = Comando_ExecutarPos(alComando(1), "UPDATE TiposDifParcRec SET Descricao= ? , ContaContabilCR= ? , ContaContabilRecDesp= ? ", alComando(0), _
                objTiposDifParcRec.sDescricao, objTiposDifParcRec.sContaContabilCR, objTiposDifParcRec.sContaContabilRecDesp)
        If lErro <> AD_SQL_SUCESSO Then gError 177674

    Else


        lErro = Comando_Executar(alComando(1), "INSERT INTO TiposDifParcRec( Codigo, Descricao, ContaContabilCR, ContaContabilRecDesp) VALUES (?,?,?,?)", _
                objTiposDifParcRec.iCodigo, objTiposDifParcRec.sDescricao, objTiposDifParcRec.sContaContabilCR, objTiposDifParcRec.sContaContabilRecDesp)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 177675

    End If

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    TiposDifParcRec_Grava_EmTrans = SUCESSO

    Exit Function

Erro_TiposDifParcRec_Grava_EmTrans:

    TiposDifParcRec_Grava_EmTrans = gErr

    Select Case gErr

        Case 177670
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 177671, 177672
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOSDIFPARCREC", gErr)

        Case 177673
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_TIPOSDIFPARCREC", gErr)

        Case 177674
            Call Rotina_Erro(vbOKOnly, "ERRO_UPDATE_TIPOSDIFPARCREC", gErr)

        Case 177675
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_TIPOSDIFPARCREC", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 143937)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'EXCLUSÃO
Public Function TiposDifParcRec_Exclui(ByVal objTiposDifParcRec As ClassTiposDifParcRec) As Long

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_TiposDifParcRec_Exclui

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 177658

    lErro = CF("TiposDifParcRec_Exclui_EmTrans", objTiposDifParcRec)
    If lErro <> SUCESSO Then gError 177659

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 177660

    TiposDifParcRec_Exclui = SUCESSO

    Exit Function

Erro_TiposDifParcRec_Exclui:

    TiposDifParcRec_Exclui = gErr

    Select Case gErr

        Case 177658
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 177659

        Case 177660
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 143933)

    End Select

    'Desfaz Transação
    Call Transacao_Rollback

    Exit Function

End Function

Public Function TiposDifParcRec_Exclui_EmTrans(ByVal objTiposDifParcRec As ClassTiposDifParcRec) As Long

Dim lErro As Long
Dim alComando(0 To 2) As Long
Dim iIndice As Integer
Dim iAux As Integer
Dim lBanco As Long
Dim iCodigoMovto As Integer
Dim iCodigoDetalhe As Integer

On Error GoTo Erro_TiposDifParcRec_Exclui_EmTrans

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 177661
    Next

    'Le a TiposDetRetCobr
    lErro = Comando_Executar(alComando(0), "SELECT Banco, CodigoMovto, CodigoDetalhe FROM TiposDetRetCobr WHERE CodTipoDiferenca = ? ", _
                lBanco, iCodigoMovto, iCodigoDetalhe, objTiposDifParcRec.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 177740

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 177741

    'Se existir referência => ERRO
    If lErro <> AD_SQL_SEM_DADOS Then gError 177742

    'Le a tabelaTiposDifParcRec
    lErro = Comando_ExecutarPos(alComando(0), "SELECT 1 FROM TiposDifParcRec WHERE Codigo= ? ", _
                0, iAux, objTiposDifParcRec.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 177662

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 177663

    'Se não existir => ERRO
    If lErro = AD_SQL_SEM_DADOS Then gError 177664

    'Trava registro contra alterações/Leituras
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> SUCESSO Then gError 177665

    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM TiposDifParcRec", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 177666

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    TiposDifParcRec_Exclui_EmTrans = SUCESSO

    Exit Function

Erro_TiposDifParcRec_Exclui_EmTrans:

    TiposDifParcRec_Exclui_EmTrans = gErr

    Select Case gErr

        Case 177661
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 177662, 177663
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOSDIFPARCREC", gErr)

        Case 177664
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPOSDIFPARCREC_NAO_CADASTRADO", gErr, objTiposDifParcRec.iCodigo)

        Case 177665
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_TIPOSDIFPARCREC", gErr)

        Case 177666
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_TIPOSDIFPARCREC", gErr)
            
        Case 177740, 177741
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOSDETRETCOBR", gErr)
        
        Case 177742
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPODIFPARCREC_VINC_TIPOSDETRETCOBR", gErr, lBanco, iCodigoMovto, iCodigoDetalhe)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 143934)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'GRAVAÇÃO
Public Function TiposDetRetCobr_Grava(ByVal colTiposDetRetCobr As Collection) As Long

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_TiposDetRetCobr_Grava

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 177614

    lErro = CF("TiposDetRetCobr_Grava_EmTrans", colTiposDetRetCobr)
    If lErro <> SUCESSO Then gError 177615

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 177616

    TiposDetRetCobr_Grava = SUCESSO

    Exit Function

Erro_TiposDetRetCobr_Grava:

    TiposDetRetCobr_Grava = gErr

    Select Case gErr

        Case 177614
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 177615

        Case 177616
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 143936)

    End Select

    'Desfaz Transação
    Call Transacao_Rollback

    Exit Function

End Function

Public Function TiposDetRetCobr_Grava_EmTrans(ByVal colTiposDetRetCobr As Collection) As Long

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim iAux As Integer
Dim objTiposDetRetCobr As ClassTiposDetRetCobr

On Error GoTo Erro_TiposDetRetCobr_Grava_EmTrans

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 177617
    Next
    
    For Each objTiposDetRetCobr In colTiposDetRetCobr

        'Le a tabelaTiposDetRetCobr
        lErro = Comando_ExecutarPos(alComando(0), "SELECT 1 FROM TiposDetRetCobr WHERE Banco= ?  AND CodigoMovto= ? AND CodigoDetalhe = ?", _
                    0, iAux, objTiposDetRetCobr.lBanco, objTiposDetRetCobr.iCodigoMovto, objTiposDetRetCobr.iCodigoDetalhe)
        If lErro <> AD_SQL_SUCESSO Then gError 177618
    
        'Busca Primeiro
        lErro = Comando_BuscarPrimeiro(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 177619
    
        'Se existir => UPDATE
        If lErro = AD_SQL_SUCESSO Then
    
            'Trava registro contra alterações/Leituras
            lErro = Comando_LockExclusive(alComando(0))
            If lErro <> SUCESSO Then gError 177620
    
            lErro = Comando_ExecutarPos(alComando(1), "UPDATE TiposDetRetCobr SET AcaoManual= ? , CodTipoDiferenca= ? ", alComando(0), _
                    objTiposDetRetCobr.iAcaoManual, objTiposDetRetCobr.iCodTipoDiferenca)
            If lErro <> AD_SQL_SUCESSO Then gError 177621
    
        End If
        
    Next

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    TiposDetRetCobr_Grava_EmTrans = SUCESSO

    Exit Function

Erro_TiposDetRetCobr_Grava_EmTrans:

    TiposDetRetCobr_Grava_EmTrans = gErr

    Select Case gErr

        Case 177617
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 177618, 177619
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOSDETRETCOBR", gErr)

        Case 177620
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_TIPOSDETRETCOBR", gErr)

        Case 177621
            Call Rotina_Erro(vbOKOnly, "ERRO_UPDATE_TIPOSDETRETCOBR", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 143937)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function TiposDifParcRec_Automatico(iCodigo As Integer)
'Lê o próximo número de Bordero de pagamento disponível na tabela CPRConfig
    
Dim lErro As Long
Dim lCodigo As Long

On Error GoTo Erro_TiposDifParcRec_Automatico

    'Pega o próximo número de Bordero de Pagamento
    lErro = CF("Config_ObterAutomatico", "CPRConfig", "NUM_PROX_TIPOSDIFPARCREC", "TiposDifParcRec", "Codigo", lCodigo)
    If lErro <> SUCESSO Then gError 177691
    
    If lCodigo > NUM_MAX_TIPOSDIFPARCREC Then gError 177789
    
    iCodigo = CInt(lCodigo)
    
    TiposDifParcRec_Automatico = SUCESSO

    Exit Function

Erro_TiposDifParcRec_Automatico:

    TiposDifParcRec_Automatico = gErr

    Select Case gErr

        Case 177691
        
        Case 177789
             Call Rotina_Erro(vbOKOnly, "ERRO_NUM_MAX_TIPOSDIFPARCREC", gErr, NUM_MAX_TIPOSDIFPARCREC)
        
        Case Else
             Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 177692)

    End Select
    
    Exit Function

End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'GRAVAÇÃO
Public Function ParcelasRecDif_Grava(ByVal objParcelasRecDif As ClassParcelasRecDif) As Long

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(0 To 7) As Long
Dim lTransacao As Long

On Error GoTo Erro_ParcelasRecDif_Grava

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 177790

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 177794
    Next
    
    lErro = CF("ParcelasRecDif_Grava_EmTrans", objParcelasRecDif, alComando)
    If lErro <> SUCESSO Then gError 177791

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 177792

    ParcelasRecDif_Grava = SUCESSO

    Exit Function

Erro_ParcelasRecDif_Grava:

    ParcelasRecDif_Grava = gErr

    Select Case gErr

        Case 177790
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 177791

        Case 177792
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case 177794
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 177793)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    'Desfaz Transação
    Call Transacao_Rollback

    Exit Function

End Function

Public Function ParcelasRecDif_Grava_EmTrans(ByVal objParcelasRecDif As ClassParcelasRecDif, alComando() As Long) As Long

Dim lErro As Long
Dim dValorDiferencaAnt As Double
Dim lNumIntDoc As Long
Dim lProxSeq As Long
Dim sFiltro As String

On Error GoTo Erro_ParcelasRecDif_Grava_EmTrans
    
    'Le a tabelaParcelasRecDif
    lErro = Comando_ExecutarPos(alComando(0), "SELECT ValorDiferenca FROM ParcelasRecDif WHERE NumIntParc= ?  AND Seq= ? ", _
                0, dValorDiferencaAnt, objParcelasRecDif.lNumIntParc, objParcelasRecDif.iSeq)
    If lErro <> AD_SQL_SUCESSO Then gError 177796

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 177797

    'Se existir => UPDATE, senão => INSERT
    If lErro = AD_SQL_SUCESSO Then

        'Trava registro contra alterações/Leituras
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> SUCESSO Then gError 177798

        lErro = Comando_ExecutarPos(alComando(1), "UPDATE ParcelasRecDif SET CodTipoDif= ? , ValorDiferenca= ? , Observacao= ? , " & _
                "NumSeqOcorr= ? ", alComando(0), _
                objParcelasRecDif.iCodTipoDif, objParcelasRecDif.dValorDiferenca, objParcelasRecDif.sObservacao, _
                objParcelasRecDif.iNumSeqOcorr)
        If lErro <> AD_SQL_SUCESSO Then gError 177799
        
        objParcelasRecDif.dValorDiferenca = objParcelasRecDif.dValorDiferenca - dValorDiferencaAnt

    Else

        'Obter NumIntDoc
        lErro = CF("Config_ObterNumInt", "CPRConfig", "NUM_INT_PROX_PARCELASRECDIF", lNumIntDoc)
        If lErro <> SUCESSO Then gError 177800
        
        sFiltro = "NumIntParc= " & CStr(objParcelasRecDif.lNumIntParc)

        lErro = CF("Config_ObterAutomatico2", "ParcelasRecDif", "Seq", lProxSeq, sFiltro)
        If lErro <> SUCESSO Then gError 177801

        objParcelasRecDif.lNumIntDoc = lNumIntDoc
        objParcelasRecDif.iSeq = lProxSeq

        lErro = Comando_Executar(alComando(1), "INSERT INTO ParcelasRecDif( NumIntDoc, NumIntParc, Seq, DataRegistro, " & _
                "CodTipoDif, ValorDiferenca, Observacao, NumSeqOcorr) VALUES (?,?,?,?,?,?,?,?)", _
                objParcelasRecDif.lNumIntDoc, objParcelasRecDif.lNumIntParc, objParcelasRecDif.iSeq, objParcelasRecDif.dtDataRegistro, _
                objParcelasRecDif.iCodTipoDif, objParcelasRecDif.dValorDiferenca, objParcelasRecDif.sObservacao, objParcelasRecDif.iNumSeqOcorr)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 177802

    End If
    
    lErro = ParcelasRecDif_Grava2(objParcelasRecDif, alComando)
    If lErro <> SUCESSO Then gError 177817

    ParcelasRecDif_Grava_EmTrans = SUCESSO

    Exit Function

Erro_ParcelasRecDif_Grava_EmTrans:

    ParcelasRecDif_Grava_EmTrans = gErr

    Select Case gErr
        
        Case 177796, 177797
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELASRECDIF", gErr)

        Case 177798
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_PARCELASRECDIF", gErr)

        Case 177799
            Call Rotina_Erro(vbOKOnly, "ERRO_UPDATE_PARCELASRECDIF", gErr)
            
        Case 177800, 177801, 177817

        Case 177802
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_PARCELASRECDIF", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 177803)

    End Select

    Exit Function

End Function

Private Function ParcelasRecDif_Grava2(ByVal objParcelasRecDif As ClassParcelasRecDif, alComando() As Long) As Long
'processa parcelas e Títulos

Dim lErro As Long
Dim lNumIntTitulo As Long
Dim dSaldo As Double
Dim iAux As Integer
Dim iStatus As Integer

On Error GoTo Erro_ParcelasRecDif_Grava2

    'Le a Parcela
    lErro = Comando_ExecutarPos(alComando(4), "SELECT NumIntTitulo, Saldo, Status FROM ParcelasRec WHERE NumIntDoc = ?", 0, lNumIntTitulo, dSaldo, iStatus, objParcelasRecDif.lNumIntParc)
    If lErro <> AD_SQL_SUCESSO Then gError 177806
        
    lErro = Comando_BuscarPrimeiro(alComando(4))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 177807
    
    If lErro = AD_SQL_SEM_DADOS Then
    
        'Le a Parcela
        lErro = Comando_ExecutarPos(alComando(4), "SELECT NumIntTitulo, 0, Status FROM ParcelasRecBaixadas WHERE NumIntDoc = ?", 0, lNumIntTitulo, dSaldo, iStatus, objParcelasRecDif.lNumIntParc)
        If lErro <> AD_SQL_SUCESSO Then gError 177806
            
        lErro = Comando_BuscarPrimeiro(alComando(4))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 177807
    
    End If
    
    If lErro = AD_SQL_SEM_DADOS Then gError 177808
    
    If iStatus = STATUS_BAIXADO Then gError 177924
    
    If iStatus = STATUS_EXCLUIDO Then gError 177925
    
    If dSaldo + objParcelasRecDif.dValorDiferenca <= 0 Then gError 177809
        
    lErro = Comando_ExecutarPos(alComando(5), "UPDATE ParcelasRec SET Saldo =  Saldo + ?, Valor = Valor + ?", alComando(4), objParcelasRecDif.dValorDiferenca, objParcelasRecDif.dValorDiferenca)
    If lErro <> AD_SQL_SUCESSO Then gError 177810
    
    'Le o Titulo
    lErro = Comando_ExecutarPos(alComando(6), "SELECT Saldo FROM TitulosRec WHERE NumIntDoc = ?", 0, dSaldo, lNumIntTitulo)
    If lErro <> AD_SQL_SUCESSO Then gError 177811
    
    lErro = Comando_BuscarPrimeiro(alComando(6))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 177812
    
    If lErro = AD_SQL_SEM_DADOS Then gError 177813
    
    If dSaldo + objParcelasRecDif.dValorDiferenca <= 0 Then gError 177814
    
    lErro = Comando_ExecutarPos(alComando(7), "UPDATE TitulosRec SET Saldo = Saldo + ?, Valor = Valor + ?", alComando(6), objParcelasRecDif.dValorDiferenca, objParcelasRecDif.dValorDiferenca)
    If lErro <> AD_SQL_SUCESSO Then gError 177815
    
    ParcelasRecDif_Grava2 = SUCESSO
     
    Exit Function
    
Erro_ParcelasRecDif_Grava2:

    ParcelasRecDif_Grava2 = gErr
     
    Select Case gErr
          
        Case 177806, 177807
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_REC", gErr)
            
        Case 177808
            Call Rotina_Erro(vbOKOnly, "ERRO_PARCELA_REC_INEXISTENTE", gErr)
 
        Case 177809
            Call Rotina_Erro(vbOKOnly, "ERRO_PARCELA_SALDO_NEGATIVO", gErr, objParcelasRecDif.lNumIntParc)
 
        Case 177810
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_PARCELASREC", gErr)
 
        Case 177811, 177812
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TITULOS_REC", gErr)
            
        Case 177813
            Call Rotina_Erro(vbOKOnly, "ERRO_TITULOSREC_NAO_EXISTENTE", gErr, lNumIntTitulo)
 
        Case 177814
            Call Rotina_Erro(vbOKOnly, "ERRO_TITULO_SALDO_NEGATIVO", gErr, lNumIntTitulo)
 
        Case 177815
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_TITULOSREC", gErr, lNumIntTitulo)
            
        Case 177924, 177925
            Call Rotina_Erro(vbOKOnly, "ERRO_PARCELA_RECEBER_BAIXADA", gErr, objParcelasRecDif.lNumIntParc)
 
       Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 177816)
     
    End Select
     
    Exit Function

End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'EXCLUSÃO
Public Function ParcelasRecDif_Exclui(ByVal objParcelasRecDif As ClassParcelasRecDif) As Long

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_ParcelasRecDif_Exclui

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 177910

    lErro = CF("ParcelasRecDif_Exclui_EmTrans", objParcelasRecDif)
    If lErro <> SUCESSO Then gError 177911

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 177912

    ParcelasRecDif_Exclui = SUCESSO

    Exit Function

Erro_ParcelasRecDif_Exclui:

    ParcelasRecDif_Exclui = gErr

    Select Case gErr

        Case 177910
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 177911

        Case 177912
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 177913)

    End Select

    'Desfaz Transação
    Call Transacao_Rollback

    Exit Function

End Function

Public Function ParcelasRecDif_Exclui_EmTrans(ByVal objParcelasRecDif As ClassParcelasRecDif) As Long

Dim lErro As Long
Dim alComando(0 To 7) As Long
Dim iIndice As Integer
Dim dValorDiferenca As Double

On Error GoTo Erro_ParcelasRecDif_Exclui_EmTrans

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 177914
    Next

    'Le a tabelaParcelasRecDif
    lErro = Comando_ExecutarPos(alComando(0), "SELECT ValorDiferenca FROM ParcelasRecDif WHERE NumIntParc= ?  AND Seq= ? ", _
                0, dValorDiferenca, objParcelasRecDif.lNumIntParc, objParcelasRecDif.iSeq)
    If lErro <> AD_SQL_SUCESSO Then gError 177915

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 177916

    'Se não existir => ERRO
    If lErro = AD_SQL_SEM_DADOS Then gError 177917

    'Trava registro contra alterações/Leituras
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> SUCESSO Then gError 177918

    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM ParcelasRecDif", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 177919
    
    objParcelasRecDif.dValorDiferenca = -dValorDiferenca
    
    lErro = ParcelasRecDif_Grava2(objParcelasRecDif, alComando)
    If lErro <> SUCESSO Then gError 177920

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    ParcelasRecDif_Exclui_EmTrans = SUCESSO

    Exit Function

Erro_ParcelasRecDif_Exclui_EmTrans:

    ParcelasRecDif_Exclui_EmTrans = gErr

    Select Case gErr

        Case 177914
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 177915, 177916
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELASRECDIF", gErr)

        Case 177917
            Call Rotina_Erro(vbOKOnly, "ERRO_PARCELASRECDIF_NAO_CADASTRADO", gErr, objParcelasRecDif.lNumIntParc, objParcelasRecDif.iSeq)

        Case 177918
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_PARCELASRECDIF", gErr)

        Case 177919
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_PARCELASRECDIF", gErr)
            
        Case 177920
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 177921)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function BorderoRetCobr_Grava2(ByVal objBorderoRetCobr As ClassBorderoRetCobr) As Long
'gerar diferencas de valor na parcela, se necessario
'??? falta a parte de contabilizacao desta diferenca

Dim lErro As Long, objDetRetCobr As ClassDetRetCobr

On Error GoTo Erro_BorderoRetCobr_Grava2

    For Each objDetRetCobr In objBorderoRetCobr.colRetCobrErros
    
        If objDetRetCobr.dValorTarifa <> 0 And objDetRetCobr.lNumIntParc <> 0 And objDetRetCobr.iCodOcorrencia1 <> 0 Then
        
            lErro = BorderoRetCobr_Grava3(objBorderoRetCobr, objDetRetCobr)
            If lErro <> SUCESSO Then gError 130523
            
        End If
    
    Next
    
    BorderoRetCobr_Grava2 = SUCESSO
     
    Exit Function
    
Erro_BorderoRetCobr_Grava2:

    BorderoRetCobr_Grava2 = gErr
     
    Select Case gErr
          
        Case 130523
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 130524)
     
    End Select
     
    Exit Function

End Function

Private Function BorderoRetCobr_Grava3(ByVal objBorderoRetCobr As ClassBorderoRetCobr, ByVal objDetRetCobr As ClassDetRetCobr) As Long
'gerar uma diferenca de valor na parcela, se necessario
'??? falta a parte de contabilizacao desta diferenca

Dim lErro As Long, iIndice As Integer, iCodTipoDif As Integer, iAcao As Integer, iAcaoManual As Integer
Dim alComando(0 To 7) As Long
Dim lComando As Long, objParcelasRecDif As New ClassParcelasRecDif

On Error GoTo Erro_BorderoRetCobr_Grava3

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 130527
    Next
    
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 130528
    
    lErro = Comando_Executar(lComando, "SELECT CodTipoDiferenca FROM TiposDetRetCobr WHERE Banco = ? AND CodigoMovto = ? AND (AcaoManual = ? OR (AcaoManual = ? AND Acao = ?)) AND CodigoDetalhe IN (?,?,?,?,?)", _
        iCodTipoDif, objBorderoRetCobr.iBanco, objDetRetCobr.iCodOcorrencia, TIPODIF_ACAO_SOMA, TIPODIF_ACAO_AUTOMATICA, TIPODIF_ACAO_SOMA, objDetRetCobr.iCodOcorrencia1, objDetRetCobr.iCodOcorrencia2, objDetRetCobr.iCodOcorrencia3, objDetRetCobr.iCodOcorrencia4, objDetRetCobr.iCodOcorrencia5)
                        
    With objParcelasRecDif
        .dtDataRegistro = gdtDataHoje
        .dValorDiferenca = objDetRetCobr.dValorTarifa
        .iCodTipoDif = iCodTipoDif
        .iNumSeqOcorr = objDetRetCobr.lNumSequencial
        .iSeq = 0
        .lNumIntDoc = 0
        .lNumIntParc = objDetRetCobr.lNumIntParc
        .sObservacao = "retorno do bordero " & CStr(objBorderoRetCobr.lNumBorderoRet) & ", registro: " & CStr(objDetRetCobr.lNumSequencial)
    End With
    
    lErro = CF("ParcelasRecDif_Grava_EmTrans", objParcelasRecDif, alComando)
    If lErro <> SUCESSO Then gError 130526

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Call Comando_Fechar(lComando)
    
    BorderoRetCobr_Grava3 = SUCESSO
     
    Exit Function
    
Erro_BorderoRetCobr_Grava3:

    BorderoRetCobr_Grava3 = gErr
     
    Select Case gErr
          
        Case 130526
        
        Case 130527, 130528
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 130525)
     
    End Select
     
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

'#################################################################################
'Inserido por Wagner 06/06/2006
Function BaixaPagar_Grava_ChequePre(ByVal colBaixaParcPagar As colBaixaParcPagar, ByVal colChequePre As Collection, ByVal dtDataBaixa As Date, ByVal objFornecedor As ClassFornecedor, ByVal iFilialForn As Integer, ByVal objContabilGeral As ClassContabil, ByVal dtDataContabil As Date) As Long
'Faz a Baixa das Parcelas a Receber e a Pagar e do Cheque Pré

Dim lErro As Long
Dim lTransacao As Long
Dim alComando(1 To 2) As Long
Dim objBaixaPagar As ClassBaixaPagar
Dim objBaixaReceber As ClassBaixaReceber
Dim objChequePre As ClassChequePre
Dim objContabil As ClassContabil
Dim colBaixaParcRec As New colBaixaParcRec
Dim colBaixaParcPagAux As colBaixaParcPagar
Dim colcolBaixaParcPag As New Collection
Dim colBaixaParcPagAux2 As New colBaixaParcPagar
Dim colInfoParcRec As New Collection
Dim dSaldoCheque As Double
Dim iIndice As Integer
Dim iMarcador As Integer
Dim iMarcadorAux As Integer
Dim dValorBaixado As Double
Dim objInfoParcRec As New ClassInfoParcRec
Dim tChequePre As typeChequePre
Dim objTituloPag As ClassTituloPagar
Dim objParcelaPag As ClassParcelaPagar
Dim vbResult As VbMsgBoxResult
Dim bExibirErrosData As Boolean
Dim objBaixaAgrupada As New ClassBaixasAgrupadas
Dim dValorLivroAux As Double, dValorMulta As Double, dValorJuros As Double, dValorDesconto As Double, dValorAux As Double

On Error GoTo Erro_BaixaPagar_Grava_ChequePre
   
    'Copia dados para outra coleção, para não mexer na coleção original
    For iIndice = 1 To colBaixaParcPagar.Count
        colBaixaParcPagAux2.Add 0, 0, colBaixaParcPagar.Item(iIndice).lNumIntParcela, 0, colBaixaParcPagar.Item(iIndice).dValorMulta, colBaixaParcPagar.Item(iIndice).dValorJuros, colBaixaParcPagar.Item(iIndice).dValorDesconto, colBaixaParcPagar.Item(iIndice).dValorBaixado, colBaixaParcPagar.Item(iIndice).iStatus
    Next
    
    iMarcador = 1
    bExibirErrosData = True
    dValorLivroAux = 0
    
    'praca cada cheque monta a coleção de parcelas
    For Each objChequePre In colChequePre
    
         'Posiciona o Marcador na primeira parcela que ainda não foi usada integralmente
        iMarcadorAux = iMarcador
        
        'Pega o Valor inicial do Cheque
        dSaldoCheque = objChequePre.dValor
        
        Set colBaixaParcPagAux = New colBaixaParcPagar
        
        'Para cada Parcela
        For iIndice = iMarcador To colBaixaParcPagAux2.Count
        
            colBaixaParcPagAux2.Item(iIndice).dValorDiferenca = colBaixaParcPagAux2.Item(iIndice).dValorBaixado + colBaixaParcPagAux2.Item(iIndice).dValorJuros + colBaixaParcPagAux2.Item(iIndice).dValorMulta - colBaixaParcPagAux2.Item(iIndice).dValorDesconto
            
            'Se o valor a ser pago da parcela é maior que o saldo restante do cheque
            If colBaixaParcPagAux2.Item(iIndice).dValorDiferenca > dSaldoCheque Then
                'Baixa o Saldo do Cheque
                dValorAux = dSaldoCheque
                'Reduz o que foi baixado do valor restante da parcela
                colBaixaParcPagAux2.Item(iIndice).dValorDiferenca = colBaixaParcPagAux2.Item(iIndice).dValorDiferenca - dValorAux
                'Considera o cheque utilizado
                dSaldoCheque = 0
                
                '******** 'Finalizando o cheque
                dValorAux = dValorAux + colBaixaParcPagAux2.Item(iIndice).dValorDesconto
                dValorDesconto = colBaixaParcPagAux2.Item(iIndice).dValorDesconto
                colBaixaParcPagAux2.Item(iIndice).dValorDesconto = 0
                
                'Se o valor restante é maior que a multa -> zera a multa e tira do saldo
                If dValorAux > colBaixaParcPagAux2.Item(iIndice).dValorMulta Then
                    dValorAux = dValorAux - colBaixaParcPagAux2.Item(iIndice).dValorMulta
                    dValorMulta = colBaixaParcPagAux2.Item(iIndice).dValorMulta
                    colBaixaParcPagAux2.Item(iIndice).dValorMulta = 0
                Else
                    dValorMulta = dValorAux
                    colBaixaParcPagAux2.Item(iIndice).dValorMulta = colBaixaParcPagAux2.Item(iIndice).dValorMulta - dValorMulta
                    dValorAux = 0
                End If
                
                'Se o valor restante é maior que a juros -> zera a juros e tira do saldo
                If dValorAux > colBaixaParcPagAux2.Item(iIndice).dValorJuros Then
                    dValorAux = dValorAux - colBaixaParcPagAux2.Item(iIndice).dValorJuros
                    dValorJuros = colBaixaParcPagAux2.Item(iIndice).dValorJuros
                    colBaixaParcPagAux2.Item(iIndice).dValorJuros = 0
                Else
                    dValorJuros = dValorAux
                    colBaixaParcPagAux2.Item(iIndice).dValorJuros = colBaixaParcPagAux2.Item(iIndice).dValorJuros - dValorJuros
                    dValorAux = 0
                End If
                
                'Se o valor restante é maior que a baixado -> zera a baixado e tira do saldo
                If dValorAux > colBaixaParcPagAux2.Item(iIndice).dValorBaixado Then
                    dValorAux = dValorAux - colBaixaParcPagAux2.Item(iIndice).dValorBaixado
                    dValorBaixado = colBaixaParcPagAux2.Item(iIndice).dValorBaixado
                    colBaixaParcPagAux2.Item(iIndice).dValorBaixado = 0
                Else
                    dValorBaixado = dValorAux
                    colBaixaParcPagAux2.Item(iIndice).dValorBaixado = colBaixaParcPagAux2.Item(iIndice).dValorBaixado - dValorBaixado
                    dValorAux = 0
                End If

            Else
            'Se o valor a ser baixado da parcela é menor ou igual que o saldo restante do cheque
                'Baixa o valor da Parcela
                dValorAux = colBaixaParcPagAux2.Item(iIndice).dValorDiferenca
                'Reduz o que foi baixado do que ainda vai se baixar nesse cheque
                dSaldoCheque = dSaldoCheque - colBaixaParcPagAux2.Item(iIndice).dValorDiferenca
                'A Parcela fica sem valor a ser baixado
                colBaixaParcPagAux2.Item(iIndice).dValorDiferenca = 0
                'Coloca o Marcador para apontar para a próxima parcela
                iMarcadorAux = iMarcadorAux + 1
                
                '******** 'Finalizando a parcela
                dValorBaixado = colBaixaParcPagAux2.Item(iIndice).dValorBaixado
                dValorJuros = colBaixaParcPagAux2.Item(iIndice).dValorJuros
                dValorDesconto = colBaixaParcPagAux2.Item(iIndice).dValorDesconto
                dValorMulta = colBaixaParcPagAux2.Item(iIndice).dValorMulta
                
            End If
            
            Set objParcelaPag = New ClassParcelaPagar
            
            objParcelaPag.lNumIntDoc = colBaixaParcPagAux2.Item(iIndice).lNumIntParcela
            
            lErro = CF("ParcelaPagar_Le", objParcelaPag)
            If lErro <> SUCESSO And lErro <> 60479 Then gError 180358
            
            If objParcelaPag.dtDataVencimentoReal < objChequePre.dtDataDeposito And bExibirErrosData Then
                
                Set objTituloPag = New ClassTituloPagar
                
                objTituloPag.lNumIntDoc = objParcelaPag.lNumIntTitulo
            
                lErro = CF("TituloPagar_Le", objTituloPag)
                If lErro <> SUCESSO And lErro <> 18372 Then gError 180359
            
                vbResult = Rotina_Aviso(vbYesNoCancel, "AVISO_DATADEPOSITO_MAIOR_DATAVENCIMENTO", objParcelaPag.iNumParcela, objTituloPag.lNumTitulo, objChequePre.iBanco, objChequePre.sAgencia, objChequePre.sContaCorrente, objChequePre.lNumero, objParcelaPag.dtDataVencimentoReal, objChequePre.dtDataDeposito)
                If vbResult = vbCancel Then gError 180360
                If vbResult = vbNo Then bExibirErrosData = False
            End If
            
            dValorLivroAux = dValorLivroAux + Round(dValorBaixado, 2)
            
            'Adiciona a baixa da Parcela
            colBaixaParcPagAux.Add 0, 0, colBaixaParcPagAux2.Item(iIndice).lNumIntParcela, 0, dValorMulta, dValorJuros, dValorDesconto, dValorBaixado, colBaixaParcPagAux2.Item(iIndice).iStatus
        
            'Se o Cheque já foi todo usado sai do Loop
            If dSaldoCheque < DELTA_VALORMONETARIO Then Exit For
        
        Next
        
        If dSaldoCheque > DELTA_VALORMONETARIO Then
            gError 180299
        End If
        
        iMarcador = iMarcadorAux
        
        colcolBaixaParcPag.Add colBaixaParcPagAux
        
    Next
        
    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 180250
    
    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 180251
    Next
    
    objBaixaAgrupada.sUsuario = gsUsuario
    objBaixaAgrupada.dtDataBaixa = gdtDataAtual
    
    lErro = BaixasAgrupadas_Grava_EmTrans(objBaixaAgrupada)
    If lErro <> SUCESSO Then gError 181256
    
    iMarcador = 1
    iIndice = 0

    'Para cada Cheque
    For Each objChequePre In colChequePre
    
        iIndice = iIndice + 1
            
        Set objBaixaPagar = New ClassBaixaPagar
        Set objBaixaReceber = New ClassBaixaReceber
        
        'Le o Cheque
        lErro = Comando_ExecutarPos(alComando(1), "SELECT FilialEmpresa, Cliente, Filial, Localizacao, Valor, SequencialLoja, NaoEspecificado FROM ChequePre WHERE NumIntCheque = ? AND FilialEmpresa =?", 0, tChequePre.iFilialEmpresa, tChequePre.lCliente, tChequePre.iFilial, tChequePre.iLocalizacao, tChequePre.dValor, tChequePre.lSequencialLoja, tChequePre.iNaoEspecificado, objChequePre.lNumIntCheque, giFilialEmpresa)
        If lErro <> AD_SQL_SUCESSO Then gError 180252
        
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 180253
        
        'Se não achou = > Erro
        If lErro <> AD_SQL_SUCESSO Then gError 180254
        
        objChequePre.iFilialEmpresa = tChequePre.iFilialEmpresa
     
        'Faz o Lock
        lErro = Comando_LockExclusive(alComando(1))
        If lErro <> AD_SQL_SUCESSO Then gError 180255
    
        'Se o valor do Cheque tiver sido alterado => Erro
        If tChequePre.dValor <> objChequePre.dValor Then gError 180256
        
        'Se o Cheque não estiver mais no BackOffice => Erro
        If tChequePre.iLocalizacao <> CHEQUEPRE_LOCALIZACAO_BACKOFFICE Then gError 180257
        
        'Altera a localização do Cheque
        lErro = Comando_ExecutarPos(alComando(2), "UPDATE ChequePre SET Localizacao = ?", alComando(1), CHEQUEPRE_LOCALIZACAO_EM_TERCEIROS)
        If lErro <> AD_SQL_SUCESSO Then gError 180258
                
        'Se não for oriundo do Loja
        If tChequePre.lSequencialLoja = 0 Then

            'Inicializa a Baixa a Receber
            objBaixaReceber.iStatus = STATUS_LANCADO
            objBaixaReceber.iMotivo = MOTIVO_CHEQUE_ENVIADO_PARA_TERCEIROS
            objBaixaReceber.dtData = dtDataBaixa
            objBaixaReceber.dtDataContabil = gdtDataAtual
            objBaixaReceber.dtDataRegistro = gdtDataHoje
            objBaixaReceber.sHistorico = left("Rep. Chq BCO:" & objChequePre.iBanco & ",AG:" & objChequePre.sAgencia & ",CTA:" & objChequePre.sContaCorrente & ",N:" & objChequePre.lNumero & " p/ forn.:" & objFornecedor.lCodigo & ".", STRING_MOV_HISTORICO)
            objBaixaReceber.lNumIntCheque = objChequePre.lNumIntCheque
            objBaixaReceber.iFilialEmpresaCheque = objChequePre.iFilialEmpresa
            objBaixaReceber.lNumIntDocBaixaAgrupada = objBaixaAgrupada.lNumIntDoc

            Set colBaixaParcRec = New colBaixaParcRec
            Set colInfoParcRec = New Collection

            'Le as Parcelas a Receber associadas ao cheque
            lErro = CF("ParcelasReceber_Le_ChequePre", objChequePre, colInfoParcRec)
            If lErro <> SUCESSO Then gError 180259
            
            For Each objInfoParcRec In colInfoParcRec
                colBaixaParcRec.Add 0, 0, objInfoParcRec.lNumIntParc, 0, STATUS_LANCADO, objInfoParcRec.dValorMulta, objInfoParcRec.dValorJuros, objInfoParcRec.dValorDesconto, Arredonda_Moeda(objInfoParcRec.dValorReceber - objInfoParcRec.dValorJuros - objInfoParcRec.dValorMulta + objInfoParcRec.dValorDesconto, 2), objInfoParcRec.dValorReceber, objInfoParcRec.iCobrador
            Next
            
            'Baixa as parcelas a receber
            lErro = BaixaReceber_Grava(objBaixaReceber, colBaixaParcRec, objContabil, objChequePre.lCliente, objChequePre.iFilial)
            If lErro <> SUCESSO Then gError 180260
        
        Else
        
            'Faz a movimentação em MovimentosCaixa
            lErro = MovCX_Grava_Cheque_EmTerceiros(objChequePre, dtDataBaixa, MOVIMENTOCAIXA_ENVIO_CHEQUES_TERCEIROS, objChequePre.lNumIntCheque)
            If lErro <> SUCESSO Then gError 180269
                                    
        End If

        'Faz a movimentação na conta interna de ChequePre
        lErro = MovCC_Grava_Cheque_EmTerceiros(objChequePre, dtDataBaixa, MOVCCI_ENVIO_CHEQUES_TERCEIROS, HIST_MOVCCI_ENVIO_CHEQUES_TERCEIROS, objChequePre.lNumIntCheque)
        If lErro <> SUCESSO Then gError 180270

        Set colBaixaParcPagAux = colcolBaixaParcPag.Item(iIndice)
           
        'Inicializa BaixaPagar
        objBaixaPagar.iStatus = STATUS_LANCADO
        objBaixaPagar.iMotivo = MOTIVO_CHEQUE_DE_TERCEIROS
        objBaixaPagar.dtData = dtDataBaixa
        objBaixaPagar.dtDataContabil = gdtDataAtual
        objBaixaPagar.dtDataRegistro = gdtDataHoje
        objBaixaPagar.lNumIntCheque = objChequePre.lNumIntCheque
        objBaixaPagar.iFilialEmpresaCheque = objChequePre.iFilialEmpresa
        objBaixaPagar.sHistorico = left("Pgto c\ Chq BCO:" & objChequePre.iBanco & ",AG:" & objChequePre.sAgencia & ",CTA:" & objChequePre.sContaCorrente & ",N:" & objChequePre.lNumero & ".", STRING_MOV_HISTORICO)
        objBaixaPagar.lNumIntDocBaixaAgrupada = objBaixaAgrupada.lNumIntDoc
    
        'Grava BaixaPagar e BaixasPagarParcela associadas
        lErro = CF("BaixaPagar_Grava", objBaixaPagar, colBaixaParcPagAux, objContabil, objFornecedor.lCodigo, iFilialForn)
        If lErro <> SUCESSO Then gError 180261
        
    Next

    If Not (objContabilGeral Is Nothing) Then
        'Grava os dados contábeis (contabilidade)
        lErro = objContabilGeral.Contabil_Gravar_Registro(objBaixaAgrupada.lNumIntDoc, objFornecedor.lCodigo, iFilialForn, DATA_NULA, , 0, , -dValorLivroAux)
        If lErro <> SUCESSO Then gError 181257
    End If

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    'Confirma a Transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 180262

    BaixaPagar_Grava_ChequePre = SUCESSO

    Exit Function

Erro_BaixaPagar_Grava_ChequePre:

    BaixaPagar_Grava_ChequePre = gErr

    Select Case gErr

        Case 180250
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 180251
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 180252, 180253
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUEPRE3", gErr)
            
        Case 180254
            Call Rotina_Erro(vbOKOnly, "ERRO_NAO_EXISTE_CHEQUE", gErr, objChequePre.lNumero)
        
        Case 180255
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CHEQUEPRE", gErr)
        
        Case 180256
            Call Rotina_Erro(vbOKOnly, "ERRO_VALOR_CHEQUEPRE_ALTERADO", gErr)

        Case 180257
            Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPRE_NAO_BACKOFFICE", gErr, objChequePre.lNumero, objChequePre.dValor)

        Case 180258
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_CHEQUESPRE2", gErr, objChequePre.iBanco, objChequePre.sAgencia, objChequePre.sContaCorrente, objChequePre.lNumero)

        Case 180259 To 180261, 180269, 180270, 180358, 180359, 180360, 181256, 181257

        Case 180262
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case 180299
            Call Rotina_Erro(vbOKOnly, "ERRO_VALORBAIXA_DIFERE_VALORCHEQUE", gErr, objChequePre.lNumero, Format(dSaldoCheque, "STANDARD"))

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 180263)

    End Select
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Call Transacao_Rollback

    Exit Function

End Function

Private Function MovCX_Grava_Cheque_EmTerceiros(ByVal objChequePre As ClassChequePre, ByVal dtDataMovto As Date, ByVal iTipo As Integer, ByVal lNumRefInterna As Long) As Long
'prepara e insere o movto de caixa central correspondente a saida dos cheques do loja

Dim objMovimentoCaixa As New ClassMovimentoCaixa
Dim lNumMovto As Long
Dim lSequencial As Long
Dim objCCMovDia As New ClassCCMovDia
Dim alComando(1 To 1) As Long
Dim iIndice As Integer
Dim lErro As Long
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim objTipoMeioPagtoLojaFilial As New ClassTMPLojaFilial

On Error GoTo Erro_MovCX_Grava_Cheque_EmTerceiros

    If objChequePre.dValor <> 0 And giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL_BACKOFFICE Then

        'abre os comandos
        For iIndice = LBound(alComando) To UBound(alComando)
            alComando(iIndice) = Comando_Abrir
            If alComando(iIndice) = 0 Then gError 180300
        Next
    
        'preenche o movimentocaixa com os dados do borderô
        objMovimentoCaixa.dHora = CDbl(Time)
        objMovimentoCaixa.dtDataMovimento = dtDataMovto
        objMovimentoCaixa.dValor = objChequePre.dValor
        objMovimentoCaixa.iAdmMeioPagto = MEIO_PAGAMENTO_CHEQUE
        objMovimentoCaixa.iCaixa = CODIGO_CAIXA_CENTRAL
        objMovimentoCaixa.iCodConta = 0
        objMovimentoCaixa.iFilialEmpresa = objChequePre.iFilialEmpresa
        objMovimentoCaixa.iParcelamento = PARCELAMENTO_AVISTA
        objMovimentoCaixa.iTipo = iTipo
        objMovimentoCaixa.lNumRefInterna = lNumRefInterna
    
        'pegar o proximo numero de movimento disponivel na tabela.
        lErro = CF("Config_ObterNumInt", "LojaConfig", "NUM_PROX_MOVCAIXACENTRAL", lNumMovto, 1, objChequePre.iFilialEmpresa)
        If lErro <> SUCESSO Then gError 180301
        
        'preencher o movimentocaixa com número de movimento novo gerado
        objMovimentoCaixa.lNumMovto = lNumMovto
        
        'cria um
        lErro = CF("Caixa_Sequencial_Automatico", objMovimentoCaixa.iCaixa, objMovimentoCaixa.iFilialEmpresa, lSequencial)
        If lErro <> SUCESSO Then gError 180302
        
        objMovimentoCaixa.lSequencial = lSequencial
    
        'executa a inserção na tabela de movimentos de caixa
        lErro = Comando_Executar(alComando(1), "INSERT INTO MovimentosCaixa(FilialEmpresa,NumMovto,Caixa,Sequencial,Tipo,AdmMeioPagto,Parcelamento,TipoCartao,Numero,DataMovimento,Valor,Historico,Favorecido,CupomFiscal,NumRefInterna,MovtoTransf,MovtoEstorno,Gerente,CodConta,Hora) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
        objMovimentoCaixa.iFilialEmpresa, objMovimentoCaixa.lNumMovto, objMovimentoCaixa.iCaixa, objMovimentoCaixa.lSequencial, objMovimentoCaixa.iTipo, objMovimentoCaixa.iAdmMeioPagto, objMovimentoCaixa.iParcelamento, objMovimentoCaixa.iTipoCartao, objMovimentoCaixa.lNumero, objMovimentoCaixa.dtDataMovimento, objMovimentoCaixa.dValor, objMovimentoCaixa.sHistorico, objMovimentoCaixa.sFavorecido, objMovimentoCaixa.lCupomFiscal, objMovimentoCaixa.lNumRefInterna, objMovimentoCaixa.lMovtoTransf, objMovimentoCaixa.lMovtoEstorno, objMovimentoCaixa.iGerente, objMovimentoCaixa.iCodConta, objMovimentoCaixa.dHora)
        If lErro <> SUCESSO Then gError 180303
    
        'preenche um movdia com os dados de um borderocheque
        objCCMovDia.dDeb = objChequePre.dValor
        objCCMovDia.dtData = dtDataMovto
        objCCMovDia.iCodCaixa = CODIGO_CAIXA_CENTRAL
        objCCMovDia.iFilialEmpresa = objChequePre.iFilialEmpresa
        objCCMovDia.iParcelamento = PARCELAMENTO_AVISTA
        objCCMovDia.iAdmMeioPagto = MEIO_PAGAMENTO_CHEQUE
        objCCMovDia.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_CHEQUE
    
        'adiciona ao acumulado deb/cred diário
        lErro = CF("CCMovDia_Grava", objCCMovDia)
        If lErro <> SUCESSO Then gError 180304
    
        'adiciona ao acumulado déb/créd mensal
        lErro = CF("CCMov_Grava", objCCMovDia)
        If lErro <> SUCESSO Then gError 180305
   
        'Mover Valor dos Cheques Especificados para admMeioPagtoCondPagto.Saldo
        objAdmMeioPagtoCondPagto.dSaldo = objChequePre.dValor

        'Vincula-se ao Meio_Pagamento_Cheque para o AdmMeioPagtoCondPagto.iAdmMeioPagto
        objAdmMeioPagtoCondPagto.iAdmMeioPagto = MEIO_PAGAMENTO_CHEQUE

        'Vincula-se ao Pagamento_Avista para o AdmMeioPagtoCondPagto.parcelamento
        objAdmMeioPagtoCondPagto.iParcelamento = PARCELAMENTO_AVISTA

        'Vincula-se FilialEmpresa a o Meio de Pagamento
        objAdmMeioPagtoCondPagto.iFilialEmpresa = objMovimentoCaixa.iFilialEmpresa

        'Função para Alteração de Saldo
        lErro = CF("AdmMeioPagtoCondPagto_Altera_Saldo", objAdmMeioPagtoCondPagto)
        If lErro <> SUCESSO Then gError 180306
    
        'fecha os comandos
        For iIndice = LBound(alComando) To UBound(alComando)
            Call Comando_Fechar(alComando(iIndice))
        Next

    End If

    MovCX_Grava_Cheque_EmTerceiros = SUCESSO

    Exit Function

Erro_MovCX_Grava_Cheque_EmTerceiros:

    MovCX_Grava_Cheque_EmTerceiros = gErr

    Select Case gErr

        Case 180300
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 180301, 180302, 180304, 180305, 180306

        Case 180303
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_INSERCAO", gErr, objMovimentoCaixa.iCaixa, objMovimentoCaixa.lSequencial)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 180307)

    End Select

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function MovCC_Grava_Cheque_EmTerceiros(ByVal objChequePre As ClassChequePre, ByVal dtDataMovto As Date, ByVal iTipo As Integer, ByVal sHistorico As String, ByVal lNumRefInterna As Long) As Long
'prepara e insere o movto de cta corrente correspondente a saida dos cheques de loja da conta cheque pre

Dim lErro As Long
Dim objMovContaCorrente As New ClassMovContaCorrente
Dim objCCI As New ClassContasCorrentesInternas

On Error GoTo Erro_MovCC_Grava_Cheque_EmTerceiros

    If objChequePre.dValor <> 0 Then

        objCCI.iFilialEmpresa = objChequePre.iFilialEmpresa
    
        'Retorna o codigo da conta de cheque pre da filial passada como parametro.
        lErro = CF("CCI_Le_ContaChequePre", objCCI)
        If lErro <> SUCESSO And lErro <> 126131 Then gError 180264
    
        If lErro <> SUCESSO Then gError 180265
        
        'Incluir o deposito do bordero na conta
        objMovContaCorrente.dtDataMovimento = dtDataMovto
        objMovContaCorrente.dValor = objChequePre.dValor
        objMovContaCorrente.iCodConta = objCCI.iCodigo
        objMovContaCorrente.iFilialEmpresa = objChequePre.iFilialEmpresa
        objMovContaCorrente.iPortador = 0
        objMovContaCorrente.iTipo = iTipo
        objMovContaCorrente.iTipoMeioPagto = Cheque
        objMovContaCorrente.lNumRefInterna = lNumRefInterna
        objMovContaCorrente.sHistorico = sHistorico
        objMovContaCorrente.sNumRefExterna = ""
    
        objMovContaCorrente.iConciliado = NAO_CONCILIADO
        objMovContaCorrente.iExcluido = MOVCONTACORRENTE_NAO_EXCLUIDO
    
        'Grava o Pagamento no BD
        lErro = CF("MovCCI_Grava_PagRec", objMovContaCorrente)
        If lErro <> SUCESSO Then gError 180266
        
    End If
        
    MovCC_Grava_Cheque_EmTerceiros = SUCESSO
     
    Exit Function
    
Erro_MovCC_Grava_Cheque_EmTerceiros:

    MovCC_Grava_Cheque_EmTerceiros = gErr
     
    Select Case gErr
          
        Case 180264, 180266
        
        Case 180265
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTACHEQUEPRE_INEXISTENTE", gErr, iFilialEmpresa)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 180267)
     
    End Select
     
    Exit Function

End Function

Function Cancelar_Baixa_Cheque_Pre_EmTerceiros(ByVal objDevCheque As ClassDevCheque, ByVal objChequePre As ClassChequePre) As Long

Dim lErro As Long
Dim alComando(1 To 2) As Long
Dim iIndice As Integer
Dim lNumIntDoc As Long

On Error GoTo Erro_Cancelar_Baixa_Cheque_Pre_EmTerceiros

    'Abertura comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 180290
    Next
           
    If objChequePre.lSequencialLoja = 0 Then
    
        'recolhe os dados e cancela  as baixas das parcelas associadas ao cheque
        lErro = CF("BaixaRecCancelar_Efetua", lNumIntDoc, objChequePre, MOVCCI_DEVOLUCAO_CHEQUES_TERCEIROS, DEVCHEQUE_HISTORICO_CANCELAMENTO)
        If lErro <> SUCESSO Then gError 180292
        
    Else
    
        'Faz a movimentação em MovimentosCaixa
        lErro = MovCX_Grava_Cheque_EmTerceiros(objChequePre, objDevCheque.dtData, MOVIMENTOCAIXA_DEVOLUCAO_CHEQUES_TERCEIROS, objDevCheque.lNumIntDoc)
        If lErro <> SUCESSO Then gError 180293
               
    End If
    
    'Faz a movimentação na conta interna de ChequePre
    lErro = MovCC_Grava_Cheque_EmTerceiros(objChequePre, objDevCheque.dtData, MOVCCI_DEVOLUCAO_CHEQUES_TERCEIROS, HIST_MOVCCI_DEVOLUCAO_CHEQUES_TERCEIROS, objDevCheque.lNumIntDoc)
    If lErro <> SUCESSO Then gError 180291

    lErro = BaixasPagar_ChequePre_Exclui(objDevCheque, objChequePre)
    If lErro <> SUCESSO Then gError 180294
    
    objDevCheque.lNumIntBaixasParcRecCanc = lNumIntDoc
    
    'Libera comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Cancelar_Baixa_Cheque_Pre_EmTerceiros = SUCESSO
    
    Exit Function
    
Erro_Cancelar_Baixa_Cheque_Pre_EmTerceiros:

    Cancelar_Baixa_Cheque_Pre_EmTerceiros = gErr

    Select Case gErr

        Case 180290
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 180291 To 180294
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 180295)

    End Select

    'Libera comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Function BaixaParcPag_ChequePre_Cancelar(ByVal lNumIntParc As Long, ByVal iSequencial As Integer, lNumIntDocBaixaParcPag As Long) As Long
'cancela uma baixa que havia sido efetuada abatendo-se um chequepre dado a um fornecedor

Dim lErro As Long
Dim dValorPago As Double
Dim lNumIntBaixa As Long

On Error GoTo Erro_BaixaParcPag_ChequePre_Cancelar

'    lErro = BaixaParcPag_Exclui(lNumIntParc, iSequencial, dValorPago, lNumIntBaixa, lNumIntDocBaixaParcPag)
'    If lErro <> SUCESSO Then gError 180275
'
'    'exclui a baixa como um todo
'    lErro = BaixaPag_Exclui(lNumIntBaixa)
'    If lErro <> SUCESSO And lErro <> 56610 Then gError 180276

    gError 180357

    BaixaParcPag_ChequePre_Cancelar = SUCESSO

    Exit Function

Erro_BaixaParcPag_ChequePre_Cancelar:

    BaixaParcPag_ChequePre_Cancelar = gErr

    Select Case gErr

        Case 180275, 180276
        
        Case 180357
            Call Rotina_Erro(vbOKOnly, "ERRO_BAIXAPAGVINC_A_CHEQUEPRE", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 180277)

    End Select

    Exit Function

End Function

Private Function BaixasPagar_ChequePre_Exclui(ByVal objDevCheque As ClassDevCheque, ByVal objChequePre As ClassChequePre) As Long
'Exclui as baixas associadas a um Cheque

Dim lErro As Long, lNumIntBaixa As Long
Dim lComandoSel As Long, lComandoMod As Long, objContabil As ClassContabil, iStatus As Integer

On Error GoTo Erro_BaixasPagar_ChequePre_Exclui

    lComandoSel = Comando_Abrir()
    If lComandoSel = 0 Then gError 180278

    lComandoMod = Comando_Abrir()
    If lComandoMod = 0 Then gError 180279

    lErro = Comando_ExecutarPos(lComandoSel, "SELECT Status, NumIntBaixa FROM BaixasPag WHERE NumIntCheque= ? AND FilialEmpresaCheque = ? AND Status <> ?", 0, iStatus, lNumIntBaixa, objChequePre.lNumIntCheque, objChequePre.iFilialEmpresa, STATUS_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then gError 180280

    lErro = Comando_BuscarProximo(lComandoSel)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 180281

    If lErro = AD_SQL_SEM_DADOS Then gError 180282
    
    Do While lErro <> AD_SQL_SEM_DADOS
        
'        'Se a baixa tiver sido cancelada => Erro
'        If iStatus = STATUS_EXCLUIDO Then gError 180283
        
        lErro = Comando_LockExclusive(lComandoSel)
        If lErro <> AD_SQL_SUCESSO Then gError 180284

        'excluir as BaixasParcPag associadas
        lErro = BaixasParcPag_Exclui(lNumIntBaixa)
        If lErro <> SUCESSO Then gError 180285

        lErro = Comando_ExecutarPos(lComandoMod, "UPDATE BaixasPag SET Status = ?, NumIntDevCheque = ?", lComandoSel, STATUS_EXCLUIDO, objDevCheque.lNumIntDoc)
        If lErro <> AD_SQL_SUCESSO Then gError 180286

        If gcolModulo.Ativo(MODULO_CONTABILIDADE) = MODULO_ATIVO Then
        
            Set objContabil = New ClassContabil
            
            lErro = objContabil.Contabil_DesfazContabilizacao1(GRUPOTRANSEXC_BAIXAPAG, lNumIntBaixa, gdtDataAtual)
            If lErro <> SUCESSO Then gError 180287
            
        End If
    
        lErro = Comando_BuscarProximo(lComandoSel)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 180288

    Loop

    Call Comando_Fechar(lComandoSel)
    Call Comando_Fechar(lComandoMod)

    BaixasPagar_ChequePre_Exclui = SUCESSO

    Exit Function

Erro_BaixasPagar_ChequePre_Exclui:

    BaixasPagar_ChequePre_Exclui = gErr

    Select Case gErr
            
        Case 180278, 180279
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 180282
            Call Rotina_Erro(vbOKOnly, "ERRO_BAIXAPAG_INEXISTENTE_PAG_ASSOCIADO", gErr)
        
        Case 180283
            Call Rotina_Erro(vbOKOnly, "ERRO_BAIXACANC_ASSOCIADA_PAG", gErr)
        
        Case 180280, 180281, 180288
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BAIXAPAG", gErr)
        
        Case 180284
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_BAIXAPAG", gErr)
        
        Case 180285
        
        Case 180286
            Call Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_BAIXAPAG", gErr)
        
        Case 180287
            Call Rotina_Erro(vbOKOnly, "ERRO_UNLOCK_BAIXAPAG", gErr)
                    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 180289)

    End Select

    Call Comando_Fechar(lComandoSel)
    Call Comando_Fechar(lComandoMod)

    Exit Function

End Function

Function BaixaParcPag_ChequePre_Cancelar_Exclui(ByVal objDevCheque As ClassDevCheque, ByVal objChequePre As ClassChequePre) As Long
'cancelar as parcelas

Dim lErro As Long
Dim alComando(1 To 19) As Long
Dim iIndice As Integer
Dim lNumIntDocParc As Long
Dim dtData As Date
Dim lNumIntBaixasPag As Long
Dim dValorBaixado As Double
Dim objTituloPagar As New ClassTituloPagar
Dim objParcelaPagar As New ClassParcelaPagar

On Error GoTo Erro_BaixaParcPag_ChequePre_Cancelar_Exclui

    'Abertura comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 180308
    Next
    
    'ler a tabela BaixasPag
    lErro = Comando_ExecutarPos(alComando(1), "SELECT NumIntBaixa, Data FROM BaixasPag WHERE NumIntDevCheque = ? AND Status = ?", 0, lNumIntBaixasPag, dtData, objDevCheque.lNumIntDoc, STATUS_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then gError 180309

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 180310
    
    If lErro <> SUCESSO Then gError 180311
           
    'ler a tabela baixasParcRec
    lErro = Comando_ExecutarPos(alComando(2), "SELECT NumIntParcela, ValorBaixado FROM BaixasParcPag WHERE NumIntBaixa = ?", 0, lNumIntDocParc, dValorBaixado, lNumIntBaixasPag)
    If lErro <> AD_SQL_SUCESSO Then gError 180312
    
    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 180313
           
    'enquanto achar baixas
    Do While lErro = AD_SQL_SUCESSO
        
        'faz lock de baixasparcrec
        lErro = Comando_LockExclusive(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 180314
        
        'alterar o baixasparcrec
        lErro = Comando_ExecutarPos(alComando(3), "UPDATE BaixasParcPag SET Status=?, DataCancelamento=?", alComando(2), STATUS_LANCADO, DATA_NULA)
        If lErro <> AD_SQL_SUCESSO Then gError 180315
        
        'ler a parcela
        objParcelaPagar.lNumIntDoc = lNumIntDocParc
        
        lErro = CF("ParcelaPagar_LeMod", objParcelaPagar, alComando(5))
        If lErro <> SUCESSO Then gError 180316
        
        'fazer o lock exclusivo
        lErro = Comando_LockExclusive(alComando(5))
        If lErro <> AD_SQL_SUCESSO Then gError 180317

        'verificar se a parcela esta em condicoes de ser baixada
        If objParcelaPagar.iStatus <> STATUS_ABERTO Then gError 180318

        objParcelaPagar.dSaldo = objParcelaPagar.dSaldo - dValorBaixado
        
        If objParcelaPagar.dSaldo < -DELTA_VALORMONETARIO Then gError 180334
        
        If objParcelaPagar.dSaldo < DELTA_VALORMONETARIO Then objParcelaPagar.dSaldo = 0
        
        If objParcelaPagar.dSaldo = 0 Then objParcelaPagar.iStatus = STATUS_BAIXADO

        'Selecionar titulo
        objTituloPagar.lNumIntDoc = objParcelaPagar.lNumIntTitulo
        
        lErro = CF("TitulosPagar_LeMod", objTituloPagar, alComando(6))
        If lErro <> SUCESSO Then gError 180319
        
        'fazer o lock exclusivo no titulo
        lErro = Comando_LockExclusive(alComando(6))
        If lErro <> AD_SQL_SUCESSO Then gError 180320

        objTituloPagar.dSaldo = objTituloPagar.dSaldo - dValorBaixado
        
        If objTituloPagar.dSaldo < DELTA_VALORMONETARIO Then objTituloPagar.dSaldo = 0
        
        'Se o saldo do titulo ( apos a baixa da parcela ) for zero
        If objTituloPagar.dSaldo = 0 Then
            
            objTituloPagar.iStatus = STATUS_BAIXADO
            
            'incluir titulo na tabela TitulosPagBaixados
            lErro = CF("TitulosPagBaixados_Inserir", objTituloPagar, alComando(18))
            If lErro <> SUCESSO Then gError 180321

            'se o titulo pode possuir NFs associadas
            If objTituloPagar.sSiglaDocumento = TIPODOC_FATURA_A_PAGAR Then
                'transferir as notas fiscais p/nfs baixadas
                lErro = CF("NotasFiscaisPag_Baixar", objTituloPagar.lNumIntDoc, alComando(15), alComando(16), alComando(17))
                If lErro <> SUCESSO Then gError 180322
            End If

            'se o titulo tem outras parcelas (baixadas anteriormente)
            If objTituloPagar.iNumParcelas <> 1 Then
                'Transferir as outras parcelas p/parcelas baixadas (verificando se estao mesmo baixadas)
                lErro = CF("ParcelasPag_BaixarOutras", objTituloPagar.lNumIntDoc, objParcelaPagar.lNumIntDoc, alComando(12), alComando(13), alComando(14))
                If lErro <> SUCESSO Then gError 180323
            End If

            'transferir a parcela que está sendo baixada agora

            'fazer o delete da tabela ParcelasPag
            lErro = CF("ParcelaPag_Excluir", objParcelaPagar, alComando(5), alComando(11))
            If lErro <> SUCESSO Then gError 180324

            'fazer o insert em ParcelasPagBaixadas
            lErro = CF("ParcelasPagBaixadas_Inserir", objParcelaPagar, alComando(10))
            If lErro <> SUCESSO Then gError 180325
            
            objTituloPagar.iStatus = STATUS_BAIXADO

            'excluir titulo da tabela TitulosPag
            lErro = CF("TitulosPag_Excluir", objTituloPagar, alComando(6), alComando(9))
            If lErro <> SUCESSO Then gError 180326

        Else
            'Atualizar ParcelasPag: ProxSeqBaixa , Saldo e Status (a parcela pode ter sido baixada apesar do titulo nao)
            lErro = CF("ParcelaPag_Modificar_BaixaParcial", objParcelaPagar, alComando(8), alComando(5))
            If lErro <> SUCESSO Then gError 180327
            
            'Atualizar TitulosPag (saldo)
            lErro = CF("TitulosPag_Modificar_BaixaParcial", objTituloPagar, alComando(7), alComando(6))
            If lErro <> SUCESSO Then gError 180328
        End If

        'Desfazer lock exclusivo do titulo
        lErro = Comando_Unlock(alComando(6))
        If lErro <> AD_SQL_SUCESSO Then gError 180329

        'Desfazer lock exclusivo da parcela
        lErro = Comando_Unlock(alComando(5))
        If lErro <> AD_SQL_SUCESSO Then gError 180330
                
        lErro = Comando_BuscarProximo(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 180331
    
    Loop
    
    'alterar o baixassrec
    lErro = Comando_ExecutarPos(alComando(4), "UPDATE BaixasPag SET Status=?, NumIntDevCheque = ?", alComando(1), STATUS_LANCADO, 0)
    If lErro <> AD_SQL_SUCESSO Then gError 180332
        
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
        
    BaixaParcPag_ChequePre_Cancelar_Exclui = SUCESSO

    Exit Function

Erro_BaixaParcPag_ChequePre_Cancelar_Exclui:

    BaixaParcPag_ChequePre_Cancelar_Exclui = gErr

    Select Case gErr

        Case 180308
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 180309, 180310 'LEITURA BAIXA PAG
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BAIXAPAG", gErr)
        
      Case 180311 'BAIXA PAG SEM DADOS
            Call Rotina_Erro(vbOKOnly, "ERRO_BAIXAPAG_INEXISTENTE", gErr)
        
        Case 180312, 180313, 180331 'LEITURA BAIXA PARC PAG
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BAIXAPARCPAG", gErr)
        
        Case 180314 'LOCK BAIXA PARC PAG
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_BAIXAPARCPAG", gErr)
        
        Case 180315 'UPDATE BAIXA PARC PAG
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_BAIXA_PARC_PAG", gErr)
        
        Case 180316, 180319, 180321 To 180328
        
        Case 180317 'LOCK PARCELA PAG
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_PARCELAS_PAGAR", gErr)
            
        Case 180318 'PARCELA JÁ BAIXADA
            Call Rotina_Erro(vbOKOnly, "ERRO_PARCELA_PAGAR_NAO_ABERTA", gErr)
            
        Case 180320 'LOCK TITULO PAGAR
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_TITULOSPAG", gErr)
            
        Case 180329 'UNLOCK PARCELA PAG
            Call Rotina_Erro(vbOKOnly, "ERRO_UNLOCK_PARCELAS_PAGAR", gErr)
            
        Case 180330 'UNLOCK PARCELA PAG
            Call Rotina_Erro(vbOKOnly, "ERRO_UNLOCK_TITULOS_PAGAR", gErr)
            
        Case 180334 'PARCELA NÃO PODE SER BAIXADA COM O VALORBAIXADO
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_DEVOLUCAO_CHEQUE", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 180333)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function
'########################################################################################

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'EXCLUSÃO
Public Function BaixasAgrupadas_Exclui(ByVal objBaixasAgrupadas As ClassBaixasAgrupadas) As Long

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_BaixasAgrupadas_Exclui

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 181241

    lErro = CF("BaixasAgrupadas_Exclui_EmTrans", objBaixasAgrupadas)
    If lErro <> SUCESSO Then gError 181242

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 181243

    BaixasAgrupadas_Exclui = SUCESSO

    Exit Function

Erro_BaixasAgrupadas_Exclui:

    BaixasAgrupadas_Exclui = gErr

    Select Case gErr

        Case 181241
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 181242

        Case 181243
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 181244)

    End Select

    'Desfaz Transação
    Call Transacao_Rollback

    Exit Function

End Function

Public Function BaixasAgrupadas_Exclui_EmTrans(ByVal objBaixasAgrupadas As ClassBaixasAgrupadas) As Long

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim iAux As Integer

On Error GoTo Erro_BaixasAgrupadas_Exclui_EmTrans

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 181235
    Next

    'Le a tabelaBaixasAgrupadas
    lErro = Comando_ExecutarPos(alComando(0), "SELECT 1 FROM BaixasAgrupadas WHERE NumIntDoc= ? ", _
                0, iAux, objBaixasAgrupadas.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 181236

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 181237

    'Se não existir => ERRO
    If lErro = AD_SQL_SEM_DADOS Then gError 181238

    'Trava registro contra alterações/Leituras
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> SUCESSO Then gError 181239

    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM BaixasAgrupadas", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 181240

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    BaixasAgrupadas_Exclui_EmTrans = SUCESSO

    Exit Function

Erro_BaixasAgrupadas_Exclui_EmTrans:

    BaixasAgrupadas_Exclui_EmTrans = gErr

    Select Case gErr

        Case 181235
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 181236, 181237
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BAIXASAGRUPADAS", gErr)

        Case 181238
            Call Rotina_Erro(vbOKOnly, "ERRO_BAIXASAGRUPADAS_NAO_CADASTRADO", gErr, objBaixasAgrupadas.lNumIntDoc)

        Case 181239
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_BAIXASAGRUPADAS", gErr)

        Case 181240
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_BAIXASAGRUPADAS", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 181241)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'GRAVAÇÃO
Public Function BaixasAgrupadas_Grava(ByVal objBaixasAgrupadas As ClassBaixasAgrupadas) As Long

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_BaixasAgrupadas_Grava

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 181245

    lErro = CF("BaixasAgrupadas_Grava_EmTrans", objBaixasAgrupadas)
    If lErro <> SUCESSO Then gError 181246

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 181247

    BaixasAgrupadas_Grava = SUCESSO

    Exit Function

Erro_BaixasAgrupadas_Grava:

    BaixasAgrupadas_Grava = gErr

    Select Case gErr

        Case 181245
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 181246

        Case 181247
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 181248)

    End Select

    'Desfaz Transação
    Call Transacao_Rollback

    Exit Function

End Function

Public Function BaixasAgrupadas_Grava_EmTrans(ByVal objBaixasAgrupadas As ClassBaixasAgrupadas) As Long

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim iAux As Integer
Dim lNumIntDoc As Long

On Error GoTo Erro_BaixasAgrupadas_Grava_EmTrans

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 181248
    Next

    'Le a tabelaBaixasAgrupadas
    lErro = Comando_ExecutarPos(alComando(0), "SELECT 1 FROM BaixasAgrupadas WHERE NumIntDoc= ? ", _
                0, iAux, objBaixasAgrupadas.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 181249

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 181250

    'Se existir => UPDATE, senão => INSERT
    If lErro = AD_SQL_SUCESSO Then

        'Trava registro contra alterações/Leituras
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> SUCESSO Then gError 181251

        lErro = Comando_ExecutarPos(alComando(1), "UPDATE BaixasAgrupadas SET DataBaixa= ? , Usuario= ? ", alComando(0), _
                objBaixasAgrupadas.dtDataBaixa, objBaixasAgrupadas.sUsuario)
        If lErro <> AD_SQL_SUCESSO Then gError 181252

    Else

        'Obter NumIntDoc
        lErro = CF("Config_ObterNumInt", "CPRConfig", "NUM_INT_PROX_BAIXASAGRUPADAS", lNumIntDoc)
        If lErro <> SUCESSO Then gError 181253

        objBaixasAgrupadas.lNumIntDoc = lNumIntDoc

        lErro = Comando_Executar(alComando(1), "INSERT INTO BaixasAgrupadas( NumIntDoc, DataBaixa, Usuario) VALUES (?,?,?)", _
                objBaixasAgrupadas.lNumIntDoc, objBaixasAgrupadas.dtDataBaixa, objBaixasAgrupadas.sUsuario)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 181254

    End If

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    BaixasAgrupadas_Grava_EmTrans = SUCESSO

    Exit Function

Erro_BaixasAgrupadas_Grava_EmTrans:

    BaixasAgrupadas_Grava_EmTrans = gErr

    Select Case gErr

        Case 181248
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 181249, 181250
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BAIXASAGRUPADAS", gErr)

        Case 181251
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_BAIXASAGRUPADAS", gErr)

        Case 181252
            Call Rotina_Erro(vbOKOnly, "ERRO_UPDATE_BAIXASAGRUPADAS", gErr)

        Case 181253

        Case 181254
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_BAIXASAGRUPADAS", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 181255)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

'#############################################################
'Inserido por Wagner 25/08/2006
Public Function BorderoChequesPre_Exclui(ByVal objBorderoChqPre As ClassBorderoChequePre) As Long

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_BorderoChequesPre_Exclui

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 181975

    lErro = BorderoChequesPre_Exclui_EmTrans(objBorderoChqPre)
    If lErro <> SUCESSO Then gError 181976

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 181977

    BorderoChequesPre_Exclui = SUCESSO

    Exit Function

Erro_BorderoChequesPre_Exclui:

    BorderoChequesPre_Exclui = gErr

    Select Case gErr

        Case 181975
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 181976

        Case 181977
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 181978)

    End Select

    'Desfaz Transação
    Call Transacao_Rollback

    Exit Function

End Function

Public Function BorderoChequesPre_Exclui_EmTrans(ByVal objBorderoChqPre As ClassBorderoChequePre) As Long

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim iCodNossaConta As Integer
Dim objBorderoDescChq As New ClassBorderoDescChq
Dim dValorChequeLojaEsp As Double
Dim dValorChequeLojaNEsp As Double
Dim objMovConta As New ClassMovContaCorrente
Dim objContabil As ClassContabil
Dim colBaixasRec As New Collection
Dim colBaixasParcRec As New Collection
Dim objBaixaRec As ClassBaixaReceber
Dim objBaixaParcRec As ClassBaixaParcRec

On Error GoTo Erro_BorderoChequesPre_Exclui_EmTrans

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 181987
    Next

    'Le as Baixas a receber vinculadas ao bordero para depois poder efetuar a exclusão da contabilidade
    lErro = CF("BorderoChequesPre_Le_Baixas", objBorderoChqPre, colBaixasRec, colBaixasParcRec)
    If lErro <> SUCESSO Then gError 182006
    
    'selecionar o registro Bordero de Cheque Pre
    lErro = Comando_ExecutarPos(alComando(0), "SELECT CodNossaConta FROM BorderosChequesPre WHERE NumBordero = ? ", 0, iCodNossaConta, objBorderoChqPre.lNumBordero)
    If lErro <> AD_SQL_SUCESSO Then gError 181988
    
    'busca o primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 181989
    
    'se não encontrar-> erro
    If lErro = AD_SQL_SEM_DADOS Then gError 181990
    
    'Loca o registro
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 181991
    
    objBorderoChqPre.iCodNossaConta = iCodNossaConta
    
    'exclui
    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM BorderosChequesPre", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 181992
    
    'Preenche o Bordero de Desconto só para utilizar as funções que já existiam no sistema
    objBorderoDescChq.lNumBordero = objBorderoChqPre.lNumBordero
    objBorderoDescChq.iFilialEmpresa = objBorderoChqPre.iFilialEmpresa
    objBorderoDescChq.iContaCorrente = objBorderoChqPre.iCodNossaConta
        
    'Exclui os registros em ChequeBordero, atualiza a localizacao dos cheques do BANCO para BACKOFFICE e
    'cancela as Baixas das Parcelas
    lErro = ChequeBordero_Exclui_BorderoDescChq(objBorderoDescChq, dValorChequeLojaEsp, dValorChequeLojaNEsp, BORDERO_CHEQUEPRE)
    If lErro <> SUCESSO Then gError 181993
    
    'Exlui os movimentos de conta corrente ligados ao bordero de cheque
    'PS-> Usa o alComando Indice 2 e 3
    lErro = MovCCI_Exclui_BorderoDescChq(objBorderoDescChq, BORDERO_CHEQUEPRE)
    If lErro <> SUCESSO Then gError 181994

    'Exclui os movimentos de caixa correspondentes a saida por bordero cheque pré do loja
    lErro = Movcx_Exclui_BorderoDescChq(objBorderoDescChq, dValorChequeLojaEsp, dValorChequeLojaNEsp, BORDERO_CHEQUEPRE)
    If lErro <> SUCESSO Then gError 181995
    
    'se o módulo de contabilidade estiver ativo
    If gcolModulo.Ativo(MODULO_CONTABILIDADE) = MODULO_ATIVO Then
    
        For Each objBaixaRec In colBaixasRec
        
            Set objContabil = New ClassContabil
    
            'Exclui a contabilização
            lErro = objContabil.Contabil_Inicializa_Contabilidade1(Me, MODULO_CONTASARECEBER, "BorderoChequePreRes")
            If lErro <> SUCESSO Then gError 181996
    
            lErro = objContabil.Contabil_Exclui(objBaixaRec.lNumIntBaixa, CONTABIL_EXCLUI_EFETIVO, , MODULO_BATCHCONTASARECEBER)
            If lErro <> SUCESSO Then gError 181997
            
        Next
        
        For Each objBaixaParcRec In colBaixasParcRec
        
            Set objContabil = New ClassContabil
    
            'Exclui a contabilização
            lErro = objContabil.Contabil_Inicializa_Contabilidade1(Me, MODULO_CONTASARECEBER, "BorderoChequePreFilDep")
            If lErro <> SUCESSO Then gError 181996
    
            lErro = objContabil.Contabil_Exclui(objBaixaParcRec.lNumIntDoc, CONTABIL_EXCLUI_EFETIVO)
            If lErro <> SUCESSO Then gError 181997
            
            Set objContabil = New ClassContabil
    
            'Exclui a contabilização
            lErro = objContabil.Contabil_Inicializa_Contabilidade1(Me, MODULO_CONTASARECEBER, "BorderoChequePreFilNaoDep")
            If lErro <> SUCESSO Then gError 181996
    
            lErro = objContabil.Contabil_Exclui(objBaixaParcRec.lNumIntDoc, CONTABIL_EXCLUI_EFETIVO)
            If lErro <> SUCESSO Then gError 181997
            
            Set objContabil = New ClassContabil
    
            'Exclui a contabilização
            lErro = objContabil.Contabil_Inicializa_Contabilidade1(Me, MODULO_CONTASARECEBER, "BorderoChequePre")
            If lErro <> SUCESSO Then gError 181996
    
            lErro = objContabil.Contabil_Exclui(objBaixaParcRec.lNumIntDoc, CONTABIL_EXCLUI_EFETIVO)
            If lErro <> SUCESSO Then gError 181997
            
        Next
        
    End If

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    BorderoChequesPre_Exclui_EmTrans = SUCESSO

    Exit Function

Erro_BorderoChequesPre_Exclui_EmTrans:

    BorderoChequesPre_Exclui_EmTrans = gErr

    Select Case gErr

        Case 181987
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 181988, 181989
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BORDEROCHEQUE", gErr)
        
        Case 181990
            Call Rotina_Erro(vbOKOnly, "ERRO_BORDEROCHEQUE_NAOENCONTRADO", gErr, objBorderoChqPre.iFilialEmpresa, objBorderoChqPre.lNumBordero)
        
        Case 181991
            Call Rotina_Erro(vbOKOnly, "ERRO_BORDEROCHEQUE_LOCK", gErr, objBorderoChqPre.iFilialEmpresa, objBorderoChqPre.lNumBordero)
        
        Case 181992
            Call Rotina_Erro(vbOKOnly, "ERRO_BORDEROCHEQUE_EXCLUSAO", gErr, objBorderoChqPre.iFilialEmpresa, objBorderoChqPre.lNumBordero)
        
        Case 181993 To 181997, 182006

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 181998)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function Preenche_Boleto_Unibanco(ByVal objCCI As ClassContasCorrentesInternas, ByVal objParcelaReceber As ClassParcelaReceber, sCampoLivre As String, ByVal objCarteiraCobrador As ClassCarteiraCobrador, ByVal bSemValorVcto As Boolean) As Long
'Preenche o Campo Livre para compor o Código de Barras e a Linha Digitável de um Boleto Bancário
'Esta função devolve o Campo Livre específico para o Banco BB - Jorge Specian - 09/03/2005

Dim lErro As Long
Dim sNossoNumero As String
Dim sAgencia As String, sDVAgencia As String
Dim sDVNossoNumero As String, sSuperDV As String
Dim iTamanho_NossoNumero As Integer
Dim iTamanho_Agencia As Integer

On Error GoTo Erro_Preenche_Boleto_Unibanco

    'Inicializa variáveis com tamanho dos campos
    iTamanho_NossoNumero = 10
    iTamanho_Agencia = 4

    'Valida e formata valores do Campo Livre
    
    If Not IsNumeric(Trim(objParcelaReceber.sNumTitCobrador)) Or Len(Trim(objParcelaReceber.sNumTitCobrador)) > iTamanho_NossoNumero Then gError 130775
    sNossoNumero = Format(left(Trim(objParcelaReceber.sNumTitCobrador), iTamanho_NossoNumero), "0000000000")
    
    If Not IsNumeric(Trim(objCCI.sAgencia)) Or Len(Trim(objCCI.sAgencia)) > iTamanho_Agencia Then gError 130776
    sAgencia = Format(left(Trim(objCCI.sAgencia), iTamanho_Agencia), "0000")
    
    If Not IsNumeric(Trim(objCCI.sDVAgencia)) Or Len(Trim(objCCI.sDVAgencia)) <> 1 Then gError 130778
    sDVAgencia = objCCI.sDVAgencia

    lErro = Calcula_DV11(sNossoNumero, 9, sDVNossoNumero)
    If lErro <> SUCESSO Then gError 130773
    
    lErro = Calcula_DV11("1" & sNossoNumero & sDVNossoNumero, 9, sSuperDV)
    If lErro <> SUCESSO Then gError 130774
    
    'Concatena a sequencia
    sCampoLivre = "04" & Format(objParcelaReceber.dtDataVencimento, "yymmdd") & sAgencia & sDVAgencia & sNossoNumero & sDVNossoNumero & sSuperDV

    Preenche_Boleto_Unibanco = SUCESSO

    Exit Function

Erro_Preenche_Boleto_Unibanco:

    Preenche_Boleto_Unibanco = gErr
    
    Select Case gErr
        
        Case 130773, 130774
        
        Case 130775
            Call Rotina_Erro(vbOKOnly, "ERRO_NOSSONUMERO_NAO_NUMERICO", gErr, iTamanho_NossoNumero)
        
        Case 130776
            Call Rotina_Erro(vbOKOnly, "ERRO_AGENCIA_NAO_NUMERICO", gErr, iTamanho_Agencia)
        
        Case 130778
            Call Rotina_Erro(vbOKOnly, "ERRO_DV_AGENCIA_NAO_NUMERICO", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 130777)
    
    End Select
    
    Exit Function

End Function

Private Function NossoNumero_ObtemDV_Unibanco(ByVal objCCI As ClassContasCorrentesInternas, ByVal sNossoNumero As String, ByVal iNumCarteiraCobrador As Integer, ByVal sCampoLivre As String, ByVal objParcelaReceber As ClassParcelaReceber, sDVNossoNumero As String) As Long

Dim lErro As Long, sSequencia As String

On Error GoTo Erro_NossoNumero_ObtemDV_Unibanco

    sSequencia = FormataCpoNum(right(sNossoNumero, 10), 10)
    lErro = Calcula_DV11(sSequencia, 9, sDVNossoNumero)
    If lErro <> SUCESSO Then gError 130779
    
    NossoNumero_ObtemDV_Unibanco = SUCESSO
     
    Exit Function
    
Erro_NossoNumero_ObtemDV_Unibanco:

    NossoNumero_ObtemDV_Unibanco = gErr
     
    Select Case gErr
          
        Case 130779
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 130780)
     
    End Select
     
    Exit Function

End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'GRAVAÇÃO
Public Function FilialContatoData_Grava(ByVal colFilialContatoData As Collection) As Long

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_FilialContatoData_Grava

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 182137

    lErro = CF("FilialContatoData_Grava_EmTrans", colFilialContatoData)
    If lErro <> SUCESSO Then gError 182138

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 182139

    FilialContatoData_Grava = SUCESSO

    Exit Function

Erro_FilialContatoData_Grava:

    FilialContatoData_Grava = gErr

    Select Case gErr

        Case 182137
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 182138

        Case 182139
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 182147)

    End Select

    'Desfaz Transação
    Call Transacao_Rollback

    Exit Function

End Function

Public Function FilialContatoData_Grava_EmTrans(ByVal colFilialContatoData As Collection) As Long

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim iAux As Integer
Dim objFilialContatoData As ClassFilialContatoData

On Error GoTo Erro_FilialContatoData_Grava_EmTrans

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 182140
    Next
    
    For Each objFilialContatoData In colFilialContatoData

        'Le a tabelaFilialContatoData
        lErro = Comando_ExecutarPos(alComando(0), "SELECT 1 FROM FilialContatoData WHERE Cliente= ?  AND Filial= ?  AND Data= ? ", _
                    0, iAux, objFilialContatoData.lCliente, objFilialContatoData.iFilial, objFilialContatoData.dtData)
        If lErro <> AD_SQL_SUCESSO Then gError 182141
    
        'Busca Primeiro
        lErro = Comando_BuscarPrimeiro(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 182142
    
        'Se existir => UPDATE, senão => INSERT
        If lErro = AD_SQL_SUCESSO Then
    
            'Trava registro contra alterações/Leituras
            lErro = Comando_LockExclusive(alComando(0))
            If lErro <> SUCESSO Then gError 182143
    
            lErro = Comando_ExecutarPos(alComando(1), "UPDATE FilialContatoData SET Ligar= ? , LigacaoEfetuada= ? , Historico= ?, CodUsuario = ? ", alComando(0), _
                    objFilialContatoData.iLigar, objFilialContatoData.iLigacaoEfetuada, objFilialContatoData.sHistorico, objFilialContatoData.sCodUsuario)
            If lErro <> AD_SQL_SUCESSO Then gError 182144
    
        Else
    
    
            lErro = Comando_Executar(alComando(1), "INSERT INTO FilialContatoData( Cliente, Filial, Data, Ligar, " & _
                    "LigacaoEfetuada, Historico, CodUsuario) VALUES (?,?,?,?,?,?,?)", _
                    objFilialContatoData.lCliente, objFilialContatoData.iFilial, objFilialContatoData.dtData, objFilialContatoData.iLigar, _
                    objFilialContatoData.iLigacaoEfetuada, objFilialContatoData.sHistorico, objFilialContatoData.sCodUsuario)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 182145
    
        End If
        
    Next

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    FilialContatoData_Grava_EmTrans = SUCESSO

    Exit Function

Erro_FilialContatoData_Grava_EmTrans:

    FilialContatoData_Grava_EmTrans = gErr

    Select Case gErr

        Case 182140
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 182141, 182142
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIALCONTATODATA", gErr)

        Case 182143
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_FILIALCONTATODATA", gErr)

        Case 182144
            Call Rotina_Erro(vbOKOnly, "ERRO_UPDATE_FILIALCONTATODATA", gErr)

        Case 182145
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FILIALCONTATODATA", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 182146)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function TituloReceber_TipoPagto(objTituloReceber As ClassTituloReceber, colParcelas As ColParcelaReceber)

Dim lErro As Long
Dim objParcRec As ClassParcelaReceber
Dim colBaixaParcReceber As colBaixaParcRec
Dim objContaCorrenteInt As New ClassContasCorrentesInternas
Dim objContabil As ClassContabil
Dim objMovCtaCorrente As ClassMovContaCorrente
Dim objChequePre As New ClassChequePre
Dim objInfoParcRec As New ClassInfoParcRec
Dim colInfoParcRec As New Collection
Dim colComissaoEmissao As New ColComissao
Dim colcolComissao As New colcolComissao
Dim objAdmMeioPagto As New ClassAdmMeioPagto
Dim objRede As New ClassRede
Dim objBaixaReceber As New ClassBaixaReceber
Dim colComissaoFantasma As ColComissao
Dim dtDataVencimento1 As Date
Dim dValor As Double
Dim lNumTitOriginal As Long
Dim objTitRecCartao As ClassTituloReceber
Dim colParcelasCartao As ColParcelaReceber
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim objAdmMeioPagtoParcela As ClassAdmMeioPagtoParcelas
Dim lNumAuto As Long
Dim objParcelaRecCartao As ClassParcelaReceber
Dim dtDataVencimentoReal As Date
Dim iIndice As Integer
    
On Error GoTo Erro_TituloReceber_TipoPagto
            
    For Each objParcRec In colParcelas
            
        If objParcRec.iTipoPagto = TIPOPAGTO_DEPOSITO Then
        
            Set colBaixaParcReceber = New colBaixaParcRec
            
            Call colBaixaParcReceber.Add(0, 0, objParcRec.lNumIntDoc, 0, STATUS_LANCADO, 0, 0, 0, objParcRec.dValor, objParcRec.dValor, COBRADOR_PROPRIA_EMPRESA)
        
            Set objMovCtaCorrente = New ClassMovContaCorrente
        
           'Extrai da tela o código da Conta Corrente
            objContaCorrenteInt.iCodigo = objParcRec.iCodConta
        
            'Lê os dados da Conta Corrente
            lErro = CF("ContaCorrenteInt_Le", objContaCorrenteInt.iCodigo, objContaCorrenteInt)
            If lErro <> SUCESSO And lErro <> 11807 Then gError 183017
            
            'Se não achou a Conta Corrente --> erro
            If lErro <> SUCESSO Then gError 183018
        
            'Armazena os dados do recebimento em ObjMovCtaCorrente
            objMovCtaCorrente.iFilialEmpresa = objContaCorrenteInt.iFilialEmpresa
            objMovCtaCorrente.iCodConta = objContaCorrenteInt.iCodigo
            objMovCtaCorrente.iTipo = MOVCCI_RECEBIMENTO_TITULO
            objMovCtaCorrente.iExcluido = NAO_EXCLUIDO
            objMovCtaCorrente.iTipoMeioPagto = RECEBIMENTO_EM_DINHEIRO
            objMovCtaCorrente.dtDataMovimento = objParcRec.dtDataCredito
            objMovCtaCorrente.dtDataBaixa = gdtDataAtual
            objMovCtaCorrente.dValor = objParcRec.dValor
            objMovCtaCorrente.iConciliado = NAO_CONCILIADO
            objMovCtaCorrente.dtDataContabil = gdtDataAtual
            
            'Chama BaixaReceber_Grava_Recebimento dentro de transação
            lErro = CF("BaixaRec_Grava_Recebimento_Trans", colBaixaParcReceber, objMovCtaCorrente, objContabil, objTituloReceber.lCliente, objTituloReceber.iFilial)
            If lErro <> SUCESSO Then gError 183019
 
        ElseIf objParcRec.iTipoPagto = TIPOPAGTO_CHEQUE Then
        
            objChequePre.iFilialEmpresa = objTituloReceber.iFilialEmpresa
        
            objChequePre.lCliente = objTituloReceber.lCliente
            objChequePre.iFilial = objTituloReceber.iFilial
            objChequePre.iBanco = objParcRec.iBancoCheque
            objChequePre.sAgencia = objParcRec.sAgenciaCheque
            objChequePre.sContaCorrente = objParcRec.sContaCorrenteCheque
            objChequePre.lNumero = objParcRec.lNumeroCheque
            objChequePre.dtDataDeposito = objParcRec.dtDataDepositoCheque
            objChequePre.dtDataEmissao = objParcRec.dtDataEmissaoCheque
            objChequePre.dValor = objParcRec.dValor
            
            objInfoParcRec.lNumIntParc = objParcRec.lNumIntDoc
            objInfoParcRec.dValorReceber = objParcRec.dValor
        
            colInfoParcRec.Add objInfoParcRec
            
            'Rotina encarregada de gravar o cheque pre
            lErro = CF("ChequePre_Grava_Trans", objChequePre, colInfoParcRec)
            If lErro <> SUCESSO Then gError 183028
            
        ElseIf objParcRec.iTipoPagto = TIPOPAGTO_CARTAO Then
            
            'geracao do titulo a receber referente a parcela paga por cartao
            Set objTitRecCartao = New ClassTituloReceber
            Set colParcelasCartao = New ColParcelaReceber
            
            Set objAdmMeioPagto = New ClassAdmMeioPagto
            Set objAdmMeioPagtoCondPagto = New ClassAdmMeioPagtoCondPagto
            
            objAdmMeioPagto.iCodigo = objParcRec.iAdmMeioPagto
            objAdmMeioPagto.iFilialEmpresa = objTituloReceber.iFilialEmpresa
            
            lErro = CF("AdmMeioPagto_Le", objAdmMeioPagto)
            If lErro <> SUCESSO And lErro <> 104017 Then gError 183032
            
            If lErro <> SUCESSO Then gError 183034
            
            objRede.iCodigo = objAdmMeioPagto.iRede
            
            lErro = CF("Rede_Le", objRede)
            If lErro <> SUCESSO And lErro <> 104244 Then gError 183033
            
            If lErro <> SUCESSO Then gError 183035
            
            Set colComissaoFantasma = New ColComissao
            Set colcolComissao = New colcolComissao
        
            'preenche os atributos chave de uma admmeiopagtocondpagto
            objAdmMeioPagtoCondPagto.iFilialEmpresa = objTituloReceber.iFilialEmpresa
            objAdmMeioPagtoCondPagto.iAdmMeioPagto = objParcRec.iAdmMeioPagto
            objAdmMeioPagtoCondPagto.iParcelamento = objParcRec.iParcelamento
        
            'lê uma determinada admmeiopagtocondpagto
            lErro = CF("AdmMeioPagtoCondPagto_Le_Parcelamento", objAdmMeioPagtoCondPagto)
            If lErro <> SUCESSO And lErro <> 107297 Then gError 183049
            
            If lErro = 107297 Then gError 183050
        
            'lê as parcelas de uma admmeiopagtocondpagto
            lErro = CF("AdmMeioPagtoParcelas_Le", objAdmMeioPagtoCondPagto)
            If lErro <> SUCESSO Then gError 183051
        
            'se a coleção retornar vazia-> erro
            If objAdmMeioPagtoCondPagto.colParcelas.Count = 0 Then gError 183052
        
            'gera um número para o título a receber
            lErro = CF("Config_ObterNumInt", "CPRConfig", "NUM_PROX_NUMTITULO_CARTAO", lNumAuto, objAdmMeioPagtoCondPagto.colParcelas.Count, objTituloReceber.iFilialEmpresa)
            If lErro <> SUCESSO Then gError 183053
        
            objTitRecCartao.lNumTitulo = lNumAuto
            objTitRecCartao.sSiglaDocumento = TIPODOC_CARTAO_CRED_DEB
            objTitRecCartao.dtDataEmissao = objParcRec.dtDataTransacaoCartao
            dValor = objParcRec.dValor * (1 - objAdmMeioPagtoCondPagto.dTaxa - objAdmMeioPagtoCondPagto.dDesconto)
            objTitRecCartao.iNumParcelas = objAdmMeioPagtoCondPagto.iParcelasRecebto
            objTitRecCartao.iStatus = STATUS_LANCADO
            objTitRecCartao.dtDataRegistro = gdtDataHoje
            objTitRecCartao.lCliente = objRede.lCliente
            objTitRecCartao.iFilial = objRede.iFilialCli
            objTitRecCartao.iFilialEmpresa = objTituloReceber.iFilialEmpresa
            objTitRecCartao.iMoeda = MOEDA_REAL
            objTitRecCartao.dtReajusteBase = DATA_NULA
            objTitRecCartao.dtReajustadoAte = DATA_NULA
        
            dtDataVencimento1 = objParcRec.dtDataTransacaoCartao
        
            'varre a coleção de parcelas "modelo do admmeiopagtocondpagto
            For Each objAdmMeioPagtoParcela In objAdmMeioPagtoCondPagto.colParcelas
                
                'cria uma coleção de comissão fantasmas para a parcela em questão
                colcolComissao.Add colComissaoFantasma
        
                'cria uma nova parcela a receber
                Set objParcelaRecCartao = New ClassParcelaReceber
                
                'o valor da parcela é o valor total multiplicado pelo percentual da parcela
                objParcelaRecCartao.dValor = dValor * objAdmMeioPagtoParcela.dPercRecebimento
                objParcelaRecCartao.iNumParcela = objAdmMeioPagtoParcela.iParcela
                
                
                'se os juros forem pagos pela loja ==> desconta os juros da parcela
                If objAdmMeioPagtoCondPagto.iJurosParcelamento = JUROS_LOJA Then
                    objParcelaRecCartao.dValor = objParcelaRecCartao.dValor * (1 - objAdmMeioPagtoCondPagto.dJuros) ^ (objParcelaRecCartao.iNumParcela - 1)
                End If
                
                dtDataVencimento1 = dtDataVencimento1 + objAdmMeioPagtoParcela.iIntervaloRecebimento
                objParcelaRecCartao.dtDataVencimento = dtDataVencimento1
        
                'calcula seu vencimento real
                lErro = CF("DataVencto_Real", dtDataVencimento1, dtDataVencimentoReal)
                If lErro <> SUCESSO Then gError 183054
        
                objParcelaRecCartao.dtDataVencimentoReal = dtDataVencimentoReal
                objParcelaRecCartao.iStatus = STATUS_ABERTO
                objParcelaRecCartao.iCobrador = COBRADOR_PROPRIA_EMPRESA
                objParcelaRecCartao.iCarteiraCobranca = CARTEIRA_CARTEIRA
                
                'adiciona à coleção de parcelas a receber
                With objParcelaRecCartao
                '#################################################
                'ALTERADO POR WAGNER
                    colParcelasCartao.Add 0, 0, .iNumParcela, .iStatus, .dtDataVencimento, .dtDataVencimentoReal, .dSaldo, .dValor, .iProxSeqBaixa, .iCarteiraCobranca, .iCobrador, .sNumTitCobrador, 0, 0, 0, 0, 0, 0, .iDesconto1Codigo, DATA_NULA, .dDesconto1Valor, .iDesconto2Codigo, DATA_NULA, .dDesconto2Valor, .iDesconto3Codigo, DATA_NULA, .dDesconto3Valor, .lNumIntCheque, .iAceite, .iDescontada, .iProxSeqOcorr, .iPrevisao, .sObservacao, .dValor
                '#################################################
                End With
        
                objTitRecCartao.dValor = objTitRecCartao.dValor + objParcelaRecCartao.dValor
        
            Next
        
            objTitRecCartao.dSaldo = Round(objTitRecCartao.dValor, 2)
        
            dValor = 0
        
            For iIndice = 1 To colParcelasCartao.Count
                
                Set objParcelaRecCartao = colParcelasCartao.Item(iIndice)
                
                If iIndice = colParcelasCartao.Count Then
                    objParcelaRecCartao.dValor = objTitRecCartao.dSaldo - dValor
                Else
                
                    objParcelaRecCartao.dValor = Round(objParcelaRecCartao.dValor, 2)
                    dValor = dValor + objParcelaRecCartao.dValor
                End If
            
                objParcelaRecCartao.dSaldo = objParcelaRecCartao.dValor
            
            Next
        
            objTitRecCartao.dSaldo = objTitRecCartao.dValor
        
            lErro = CF("TituloReceber_Insere", objTitRecCartao, colParcelasCartao, colComissaoEmissao, colcolComissao)
            If lErro <> SUCESSO Then gError 183055
            
            'baixa da parcela do titulo a receber que esta sendo pago por cartao
            Set colBaixaParcReceber = New colBaixaParcRec
            
            Call colBaixaParcReceber.Add(0, 0, objParcRec.lNumIntDoc, 0, STATUS_LANCADO, 0, 0, 0, objParcRec.dValor, objParcRec.dValor, COBRADOR_PROPRIA_EMPRESA)
                    
            'Inicializa BaixaReceber
            objBaixaReceber.iStatus = STATUS_LANCADO
            objBaixaReceber.iMotivo = MOTIVO_CARTAO_DEBITO_CREDITO
            objBaixaReceber.dtDataRegistro = gdtDataHoje
            objBaixaReceber.sHistorico = "recebto via cartao associado ao titulo " & CStr(objTitRecCartao.lNumTitulo)
            objBaixaReceber.lNumIntDoc = objTitRecCartao.lNumIntDoc
            objBaixaReceber.dtData = gdtDataHoje
            
            'Grava BaixaReceber e BaixasRecParcela associadas
            lErro = BaixaReceber_Grava(objBaixaReceber, colBaixaParcReceber, objContabil, objTituloReceber.lCliente, objTituloReceber.iFilial)
            If lErro <> SUCESSO Then gError 183056
            
        End If
 
    Next
 
    TituloReceber_TipoPagto = SUCESSO
 
    Exit Function

Erro_TituloReceber_TipoPagto:

    TituloReceber_TipoPagto = gErr

    Select Case gErr
            
        Case 107346, 183017, 183019, 183028, 183049, 183051, 183053 To 183056

        Case 183018
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTACORRENTE_INEXISTENTE", gErr, objContaCorrenteInt.iCodigo)

        Case 183034
            Call Rotina_Erro(vbOKOnly, "ERRO_ADMMEIOPAGTO_NAO_CADASTRADO", gErr, objAdmMeioPagto.iCodigo)
        
        Case 183035
            Call Rotina_Erro(vbOKOnly, "ERRO_REDE_NAO_ENCONTRADA", gErr, objRede.iCodigo)

        Case 183050
            Call Rotina_Erro(vbOKOnly, "ERRO_ADMMEIOPAGTOCONDPAGTO_INEXISTENTE1", gErr, objAdmMeioPagtoCondPagto.iFilialEmpresa, objAdmMeioPagtoCondPagto.iAdmMeioPagto, objAdmMeioPagtoCondPagto.iParcelamento)

        Case 183052
            Call Rotina_Erro(vbOKOnly, "ERRO_ADMMEIOPAGTOPARCELAS_NAOENCONTRADA", gErr, objAdmMeioPagtoCondPagto.iFilialEmpresa, objAdmMeioPagtoCondPagto.iAdmMeioPagto, objAdmMeioPagtoCondPagto.iParcelamento)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 183020)

    End Select

End Function


Function BaixaRec_Grava_Recebimento_Trans(ByVal colBaixaParcReceber As colBaixaParcRec, ByVal objMovCtaCorrente As ClassMovContaCorrente, ByVal objContabil As ClassContabil, ByVal lCliente As Long, ByVal iFilialCli As Integer) As Long
'faz uma baixa de titulo a receber "avulsa" correspondente a um recebimento em cheque ou dinheiro

Dim lTransacao As Long
Dim lErro As Long
Dim objBaixaReceber As New ClassBaixaReceber

On Error GoTo Erro_BaixaRec_Grava_Recebimento_Trans

    'Grava o Pagamento no BD
    lErro = CF("MovCCI_Grava_PagRec", objMovCtaCorrente)
    If lErro <> SUCESSO Then Error 56636
        
    objBaixaReceber.dtData = objMovCtaCorrente.dtDataBaixa 'vem preenchida da tela
    objBaixaReceber.dtDataContabil = objMovCtaCorrente.dtDataContabil
    
    'Insere BaixaReceber e BaixasParRec correspondentes no BD
    lErro = CF("BaixaReceber_Grava_Recebimento", objBaixaReceber, colBaixaParcReceber, objMovCtaCorrente, objContabil, lCliente, iFilialCli)
    If lErro <> SUCESSO Then Error 29157
        
    BaixaRec_Grava_Recebimento_Trans = SUCESSO

    Exit Function

Erro_BaixaRec_Grava_Recebimento_Trans:

    BaixaRec_Grava_Recebimento_Trans = Err

    Select Case Err

        Case 29156
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", Err)
            
        Case 29157, 56636
        
        Case 29158
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", Err)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 148247)

    End Select
    
    Exit Function
            
End Function

Function BaixaRec_Grava_Perda_Trans(ByVal colBaixaParcReceber As colBaixaParcRec, ByVal dtDataBaixa As Date, ByVal objContabil As ClassContabil, ByVal sHistorico As String, ByVal dtDataContabil As Date, ByVal lCliente As Long, ByVal iFilialCli As Integer) As Long
'Insere BaixaReceber e BaixasParcelaReceber correspondentes no BD.

Dim colBaixaParcRec As New colBaixaParcRec
Dim objBaixaReceber As New ClassBaixaReceber
Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_BaixaRec_Grava_Perda_Trans

    Set colBaixaParcRec = colBaixaParcReceber
    
    'Inicializa BaixaReceber
    objBaixaReceber.iStatus = STATUS_LANCADO
    objBaixaReceber.iMotivo = MOTIVO_PERDA
    objBaixaReceber.dtData = dtDataBaixa
    objBaixaReceber.dtDataContabil = IIf(dtDataContabil = DATA_NULA, gdtDataAtual, dtDataContabil)
    objBaixaReceber.dtDataRegistro = gdtDataHoje
    objBaixaReceber.sHistorico = sHistorico
    
    'Grava BaixaReceber e BaixasReceberParcela associadas
    lErro = BaixaReceber_Grava(objBaixaReceber, colBaixaParcRec, objContabil, lCliente, iFilialCli)
    If lErro <> SUCESSO Then Error 29178

    Set colBaixaParcReceber = colBaixaParcRec
    
    BaixaRec_Grava_Perda_Trans = SUCESSO

    Exit Function

Erro_BaixaRec_Grava_Perda_Trans:

    BaixaRec_Grava_Perda_Trans = Err

    Select Case Err

        Case 29178

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 183133)

    End Select
    
    Exit Function

End Function

Private Function BaixaParcRec_Cartao_Excluir(ByVal objBaixaRecCancelar As ClassBaixaRecCancelar) As Long
'exclui os titulos para a administradora associados a baixa que esta sendo cancelada

Dim lErro As Long
Dim objInfoBaixaRecCancelar As ClassInfoBaixaRecCancelar

On Error GoTo Erro_BaixaParcRec_Cartao_Excluir

    For Each objInfoBaixaRecCancelar In objBaixaRecCancelar.colInfoBaixaRecCancelar
    
        If objInfoBaixaRecCancelar.iItemSelecionado = MARCADO Then
        
            'Desfaz os documentos associados
            lErro = CF("CPR_Exclui", CPR_TITULO_RECEBER, objInfoBaixaRecCancelar.lNumIntDebRecCli, 1)
            If lErro <> SUCESSO Then gError 183170
            
        End If
    
    Next
    
    BaixaParcRec_Cartao_Excluir = SUCESSO
     
    Exit Function
    
Erro_BaixaParcRec_Cartao_Excluir:

    BaixaParcRec_Cartao_Excluir = gErr
     
    Select Case gErr
          
        Case 183170
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 183171)
     
    End Select
     
    Exit Function

End Function

Public Function RelRecibo_Prepara(ByVal lNumIntBaixa As Long, Optional ByVal lClienteForcado As Long, Optional ByVal sRazaoClienteForcado As String, Optional ByVal dValorForcado As Double, Optional ByVal sFaturasForcado As String) As Long
'Monta a tabela temporária para o relatório de recibos
 
Dim lErro As Long
Dim lTransacao As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim lNumIntRel As Long
Dim objRelatorio As New AdmRelatorio
Dim lNumRecibo As Long
Dim lNumTitulo As Long
Dim lNumTituloAnt As Long
Dim dtDataBaixa As Date
Dim dValorRecebido As Double
Dim dValorRecebidoTotal As Double
Dim sRazaoCliente As String
Dim lCliente As Long
Dim lClienteAnt As Long
Dim sFaturas As String
Dim sRazaoClienteAnt As String
Dim dtDataBaixaAnt As Date
Dim lErro1 As Long
Dim bForca As Boolean

On Error GoTo Erro_RelRecibo_Prepara
 
    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 182855
 
    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 182856
    Next
 
    'Obter NumIntRel
    lErro = CF("Config_ObterNumInt", "CRConfig", "NUM_PROX_REL_RECEBIMENTO", lNumIntRel)
    If lErro <> SUCESSO Then gError 182857
        
    sRazaoCliente = String(STRING_CLIENTE_RAZAO_SOCIAL, 0)
    
    'Pega os dados da tabela DebitosRecCli
    lErro = Comando_Executar(alComando(1), "SELECT TR.NumTitulo, BR.Data, BPR.ValorRecebido, C.RazaoSocial, C.Codigo FROM BaixasRec AS BR, BaixasParcRec AS BPR, ParcelasRecTodas AS PR, TitulosRecTodos AS TR, Clientes AS C WHERE DataCancelamento = ? AND PR.NumIntDoc = BPR.NumIntParcela AND PR.NumIntTitulo = TR.NumIntDoc AND C.Codigo = TR.Cliente AND BR.NumIntBaixa = BPR.NumIntBaixa AND BR.NumIntBaixa = ? ORDER BY C.Codigo, TR.NumTitulo ", _
        lNumTitulo, dtDataBaixa, dValorRecebido, sRazaoCliente, lCliente, DATA_NULA, lNumIntBaixa)
    If lErro <> AD_SQL_SUCESSO Then gError 182858
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 182859
    
    If lNumIntBaixa = 0 Then
        bForca = True
    Else
        bForca = False
    End If
    
    Do While lErro <> AD_SQL_SEM_DADOS Or bForca
        
        lNumTituloAnt = lNumTitulo
        lClienteAnt = lCliente
        sRazaoClienteAnt = sRazaoCliente
        dtDataBaixaAnt = dtDataBaixa
        
        dValorRecebidoTotal = dValorRecebidoTotal + dValorRecebido
    
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 182860
    
        If sFaturas = "" Then
            sFaturas = CStr(lNumTituloAnt)
        Else
            If lErro = AD_SQL_SEM_DADOS Or lClienteAnt <> lCliente Then
                sFaturas = sFaturas & " e " & CStr(lNumTituloAnt)
            Else
                sFaturas = sFaturas & ", " & CStr(lNumTituloAnt)
            End If
        End If
        
        'Se acabou a leitura ou trocou de cliente => Insere na tabela
        If lErro = AD_SQL_SEM_DADOS Or lClienteAnt <> lCliente Or bForca Then
        
            lErro1 = CF("NFiscalSaidaNum_Automatico_EmTrans", "99", lNumRecibo)
            If lErro1 <> SUCESSO Then gError 182861
            
            If bForca Then
                bForca = False
            
                lClienteAnt = lClienteForcado
                sRazaoClienteAnt = sRazaoClienteForcado
                sFaturas = sFaturasForcado
                dtDataBaixaAnt = gdtDataAtual
                dValorRecebidoTotal = dValorForcado
            End If
        
            lErro1 = Comando_Executar(alComando(0), "INSERT INTO RelRecibo (NumIntRel,NumRecibo,Cliente,NomeCliente,ValorBaixado,Faturas,DataBaixa, FilialEmpresa, DataRegistro, Usuario) VALUES (?,?,?,?,?,?,?,?,?,?) ", _
            lNumIntRel, lNumRecibo, lClienteAnt, sRazaoClienteAnt, dValorRecebidoTotal, sFaturas, dtDataBaixaAnt, giFilialEmpresa, gdtDataAtual, gsUsuario)
            If lErro1 <> SUCESSO Then gError 182862
            
            sFaturas = ""
            dValorRecebidoTotal = 0
    
        End If
    
    Loop
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 182863
 
    lErro = objRelatorio.ExecutarDireto("Recibo", "", 0, "", "NNUMINTREL", CStr(lNumIntRel))
    If lErro <> SUCESSO Then gError 182864
 
    RelRecibo_Prepara = SUCESSO
 
    Exit Function
 
Erro_RelRecibo_Prepara:
 
    RelRecibo_Prepara = gErr
 
    Select Case gErr
 
        Case 182855
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
 
        Case 182856
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
 
        Case 182857, 182861, 182864
        
        Case 182858, 182859, 182860
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BAIXASREC", gErr)
 
        Case 182862
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_RELRECIBO", gErr)
        
        Case 182863
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
 
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 182865)
 
    End Select
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Call Transacao_Rollback
 
    Exit Function
 
End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'GRAVAÇÃO
Public Function CobrancaEmailPadrao_Grava(ByVal objCobrancaEmailPadrao As ClassCobrancaEmailPadrao) As Long

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_CobrancaEmailPadrao_Grava

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 185954

    lErro = CF("CobrancaEmailPadrao_Grava_EmTrans", objCobrancaEmailPadrao)
    If lErro <> SUCESSO Then gError 185955

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 185956

    CobrancaEmailPadrao_Grava = SUCESSO

    Exit Function

Erro_CobrancaEmailPadrao_Grava:

    CobrancaEmailPadrao_Grava = gErr

    Select Case gErr

        Case 185954
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 185955

        Case 185956
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 185967)

    End Select

    'Desfaz Transação
    Call Transacao_Rollback

    Exit Function

End Function

Public Function CobrancaEmailPadrao_Grava_EmTrans(ByVal objCobrancaEmailPadrao As ClassCobrancaEmailPadrao) As Long

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim iAux As Integer
Dim lNumIntDoc As Long

On Error GoTo Erro_CobrancaEmailPadrao_Grava_EmTrans

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 185958
    Next

    'Le a tabelaCobrancaEmailPadrao
    lErro = Comando_ExecutarPos(alComando(0), "SELECT NumIntDoc FROM CobrancaEmailPadrao WHERE Codigo= ? ", _
                0, lNumIntDoc, objCobrancaEmailPadrao.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 185959

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 185960

    'Se existir => UPDATE, senão => INSERT
    If lErro = AD_SQL_SUCESSO Then

        'Trava registro contra alterações/Leituras
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> SUCESSO Then gError 185961

        lErro = Comando_ExecutarPos(alComando(1), "UPDATE CobrancaEmailPadrao SET AtrasoDe= ? , AtrasoAte= ? , CC= ? , Assunto= ? , " & _
                "Mensagem= ?, Descricao = ?, Modelo = ?, Anexo = ?, Tipo = ?, De= ?, NomeExibicao = ?, UsuarioExclusivo = ?, ConfirmacaoLeitura = ?, EmailResp = ? ", alComando(0), _
                objCobrancaEmailPadrao.iAtrasoDe, objCobrancaEmailPadrao.iAtrasoAte, objCobrancaEmailPadrao.sCC, objCobrancaEmailPadrao.sAssunto, _
                objCobrancaEmailPadrao.sMensagem, objCobrancaEmailPadrao.sDescricao, objCobrancaEmailPadrao.sModelo, objCobrancaEmailPadrao.sAnexo, objCobrancaEmailPadrao.iTipo, objCobrancaEmailPadrao.sDe, objCobrancaEmailPadrao.sNomeExibicao, objCobrancaEmailPadrao.sUsuarioExclusivo, objCobrancaEmailPadrao.iConfirmacaoLeitura, objCobrancaEmailPadrao.sEmailResp)
        If lErro <> AD_SQL_SUCESSO Then gError 185962

    Else

        'Obter NumIntDoc
        lErro = CF("Config_ObterNumInt", "CRConfig", "NUM_INT_PROX_COBREMAILPADRAO", lNumIntDoc)
        If lErro <> SUCESSO Then gError 185957

        objCobrancaEmailPadrao.lNumIntDoc = lNumIntDoc

        lErro = Comando_Executar(alComando(1), "INSERT INTO CobrancaEmailPadrao( NumIntDoc,Codigo, Descricao, AtrasoDe, AtrasoAte, CC, " & _
                "Assunto, Mensagem, Modelo, Anexo, Tipo, De, NomeExibicao,UsuarioExclusivo,ConfirmacaoLeitura,EmailResp ) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                objCobrancaEmailPadrao.lNumIntDoc, objCobrancaEmailPadrao.lCodigo, objCobrancaEmailPadrao.sDescricao, objCobrancaEmailPadrao.iAtrasoDe, objCobrancaEmailPadrao.iAtrasoAte, objCobrancaEmailPadrao.sCC, _
                objCobrancaEmailPadrao.sAssunto, objCobrancaEmailPadrao.sMensagem, objCobrancaEmailPadrao.sModelo, objCobrancaEmailPadrao.sAnexo, objCobrancaEmailPadrao.iTipo, objCobrancaEmailPadrao.sDe, objCobrancaEmailPadrao.sNomeExibicao, objCobrancaEmailPadrao.sUsuarioExclusivo, objCobrancaEmailPadrao.iConfirmacaoLeitura, objCobrancaEmailPadrao.sEmailResp)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 185963

    End If

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    CobrancaEmailPadrao_Grava_EmTrans = SUCESSO

    Exit Function

Erro_CobrancaEmailPadrao_Grava_EmTrans:

    CobrancaEmailPadrao_Grava_EmTrans = gErr

    Select Case gErr

        Case 185957

        Case 185958
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 185959, 185960
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_COBRANCAEMAILPADRAO", gErr)

        Case 185961
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_COBRANCAEMAILPADRAO", gErr)

        Case 185962
            Call Rotina_Erro(vbOKOnly, "ERRO_UPDATE_COBRANCAEMAILPADRAO", gErr)

        Case 185963
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_COBRANCAEMAILPADRAO", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 185966)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'EXCLUSÃO
Public Function CobrancaEmailPadrao_Exclui(ByVal objCobrancaEmailPadrao As ClassCobrancaEmailPadrao) As Long

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_CobrancaEmailPadrao_Exclui

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 185945

    lErro = CF("CobrancaEmailPadrao_Exclui_EmTrans", objCobrancaEmailPadrao)
    If lErro <> SUCESSO Then gError 185946

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 185947

    CobrancaEmailPadrao_Exclui = SUCESSO

    Exit Function

Erro_CobrancaEmailPadrao_Exclui:

    CobrancaEmailPadrao_Exclui = gErr

    Select Case gErr

        Case 185945
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 185946

        Case 185947
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 185965)

    End Select

    'Desfaz Transação
    Call Transacao_Rollback

    Exit Function

End Function

Public Function CobrancaEmailPadrao_Exclui_EmTrans(ByVal objCobrancaEmailPadrao As ClassCobrancaEmailPadrao) As Long

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim lNumIntDoc As Long

On Error GoTo Erro_CobrancaEmailPadrao_Exclui_EmTrans

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 185948
    Next

    'Le a tabelaCobrancaEmailPadrao
    lErro = Comando_ExecutarPos(alComando(0), "SELECT NumIntDoc FROM CobrancaEmailPadrao WHERE Codigo= ? ", _
                0, lNumIntDoc, objCobrancaEmailPadrao.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 185949

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 185950

    'Se não existir => ERRO
    If lErro = AD_SQL_SEM_DADOS Then gError 185951

    'Trava registro contra alterações/Leituras
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> SUCESSO Then gError 185952

    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM CobrancaEmailPadrao", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 185953

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    CobrancaEmailPadrao_Exclui_EmTrans = SUCESSO

    Exit Function

Erro_CobrancaEmailPadrao_Exclui_EmTrans:

    CobrancaEmailPadrao_Exclui_EmTrans = gErr

    Select Case gErr

        Case 185948
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 185949, 185950
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_COBRANCAEMAILPADRAO", gErr)

        Case 185951
            Call Rotina_Erro(vbOKOnly, "ERRO_COBRANCAEMAILPADRAO_NAO_CADASTRADO", gErr, objCobrancaEmailPadrao.lNumIntDoc)

        Case 185952
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_COBRANCAEMAILPADRAO", gErr)

        Case 185953
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_COBRANCAEMAILPADRAO", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 185964)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function CobrancaEmailPadrao_Automatico(lCodigo) As Long
'retorna o número da proxima CobrancaEmailPadrao

Dim lErro As Long
Dim lNumProx As Long

On Error GoTo Erro_CobrancaEmailPadrao_Automatico

    'Gera número automático.
    lErro = CF("Config_ObterAutomatico", "CRConfig", "NUM_PROX_COBREMAILPADRAO", "CobrancaEmailPadrao", "Codigo", lNumProx)
    If lErro <> SUCESSO Then gError 185932
    
    lCodigo = lNumProx
    
    CobrancaEmailPadrao_Automatico = SUCESSO

    Exit Function

Erro_CobrancaEmailPadrao_Automatico:

    CobrancaEmailPadrao_Automatico = gErr

    Select Case gErr

        Case 185932

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 185933)

    End Select
   
    Exit Function

End Function

Function CobrancaEmailPadrao_Calcula_Regras(ByVal objTela As Object, ByVal objCobranca As ClassCobrancaEmailPadrao) As Long
'Calcula as regras

Dim lErro As Long
Dim iIndice As Integer
Dim objPadraoContabItem As ClassPadraoContabItem
Dim colPadraoContabItem As ClassColPadraoContabItem
Dim colMnemonicos As New Collection
Dim colLancamentos As ClassColLancamentos
Dim colSubRegras As New Collection
Dim sSubRegras As String
Dim iSubRegra As Integer
Dim sRegra As String
Dim sRegraValor As String

On Error GoTo Erro_CobrancaEmailPadrao_Calcula_Regras
    
    'leitura dos mnemonicos no BD
    lErro = CF("MnemonicoCobrEmail_Le", colMnemonicos)
    If lErro <> SUCESSO Then gError 187162
    
    For iIndice = 1 To 4
    
        Set colSubRegras = New Collection
            
        Select Case iIndice
            Case 1
                sRegra = objCobranca.sCC
            Case 2
                sRegra = objCobranca.sAssunto
            Case 3
                sRegra = objCobranca.sMensagem
            Case 4
                sRegra = objCobranca.sAnexo
        End Select
        
        lErro = CF("Regra_Retorna_SubRegras", sRegra, colSubRegras)
        If lErro <> SUCESSO Then gError 187162
        
        sRegraValor = ""
        For iSubRegra = 1 To colSubRegras.Count
    
            Set colPadraoContabItem = New ClassColPadraoContabItem
            Set objPadraoContabItem = New ClassPadraoContabItem
            Set colLancamentos = New ClassColLancamentos
            
            objPadraoContabItem.sHistorico = colSubRegras.Item(iSubRegra)
    
            colPadraoContabItem.Add objPadraoContabItem
    
            lErro = CF("Executa_Regras_CobrEmail", objTela, colPadraoContabItem, colLancamentos, colMnemonicos)
            If lErro <> SUCESSO Then gError 187163
        
            If colLancamentos.Count >= 1 Then
                sRegraValor = sRegraValor & colLancamentos.Item(1).sHistorico
            End If
                
        Next
    
        Select Case iIndice
            Case 1
                objCobranca.sCCValor = sRegraValor
            Case 2
                objCobranca.sAssuntoValor = sRegraValor
            Case 3
                objCobranca.sMensagemValor = sRegraValor
            Case 4
                objCobranca.sAnexoValor = sRegraValor
        End Select
    Next
    
    CobrancaEmailPadrao_Calcula_Regras = SUCESSO

    Exit Function

Erro_CobrancaEmailPadrao_Calcula_Regras:

    CobrancaEmailPadrao_Calcula_Regras = gErr

    Select Case gErr
    
        Case 187162, 187163

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 185933)

    End Select
   
    Exit Function

End Function

Public Function Regra_Retorna_SubRegras(ByVal sRegra As String, ByVal colSubRegras As Collection) As Long

Dim lErro As Long
Dim iPOS As Integer
Dim iPosAnt As Integer
Dim sSubRegra As String
Dim bForca As Boolean

On Error GoTo Erro_Regra_Retorna_SubRegras

    iPOS = 0
    iPosAnt = iPOS
    iPOS = InStr(1, sRegra, "|")
    
    If iPOS = 0 Then
        colSubRegras.Add sRegra
    End If
            
    bForca = False
    Do While iPOS <> 0 Or bForca
        sSubRegra = ""
        If Not bForca Then
            sSubRegra = Mid(sRegra, iPosAnt + 1, iPOS - iPosAnt - 1)
        Else
            sSubRegra = Mid(sRegra, iPosAnt + 1, Len(sRegra) - iPosAnt)
        End If
        If iPosAnt = 0 Then
            sSubRegra = sSubRegra + """"
        Else
            If Not bForca Then
                sSubRegra = """" + sSubRegra + """"
            Else
                sSubRegra = """" + sSubRegra
            End If
        End If
        iPosAnt = iPOS
        iPOS = InStr(iPOS + 1, sRegra, "|")
    
        colSubRegras.Add sSubRegra
                
        If bForca Then Exit Do
        
        If iPOS = 0 Then
            bForca = True
        End If
    
    Loop

    Regra_Retorna_SubRegras = SUCESSO
    
    Exit Function
    
Erro_Regra_Retorna_SubRegras:

    Regra_Retorna_SubRegras = gErr
    
    Select Case gErr
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 187076)
        
    End Select

    Exit Function

End Function

Private Function FluxoContratoRec_Grava(ByVal objFluxo As ClassFluxo) As Long
'le as tabelas de recebimentos associados ao fluxo de caixa

Dim dtRefFim As Date, lErro As Long
Dim dtDataProxCobranca As Date
Dim dtDataVenctoReal As Date
Dim iIndice As Integer
Dim lNumIntNF As Long
Dim dQuantidade As Double
Dim dPrecoUnitario As Double
Dim dValorDesconto As Double
Dim iItem As Integer
Dim objParcela As ClassCondicaoPagtoParc
Dim tFluxoAux1 As typeFluxoAux
Dim alComando(1 To 5) As Long
Dim iNovaParcela As Integer
Dim dValor As Double
Dim objFluxoContratoItemNFRec As ClassFluxoContratoItemNFRec
Dim colFluxoContratoItemNFRec As Collection
Dim iExiste As Integer
Dim iDiasTolerancia As Integer
Dim dtDataCobrU As Date, dtDataRefI As Date, dtDataCobrP As Date, dtDataRefF As Date

On Error GoTo Erro_FluxoContratoRec_Grava

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 188242
    Next

    tFluxoAux1.tContrato.sCodigo = String(STRING_CONTRATO_CODIGO, 0)
    tFluxoAux1.sNomeReduzidoCliForn = String(STRING_CLIENTE_NOME_REDUZIDO, 0)
    tFluxoAux1.sDescricaoTipoCliForn = String(STRING_TIPO_CLIENTE_DESCRICAO, 0)

    'seleciona os contratos/itens de contrato dentro do prazo do fluxo
    If objFluxo.iFilialEmpresa = EMPRESA_TODA Then

        lErro = CF("FilialEmpresa_Real", iExiste)
        If lErro <> SUCESSO Then gError 195394

        If iExiste = 0 Then

            'Pesquisa todas as parcelas a receber com vencimento no periodo em questão, com saldo, nao descontada, aberto no ambito empresa
            lErro = Comando_Executar(alComando(1), "SELECT Contratos.DataIniContrato, Contratos.DataFimContrato, ItensDeContrato.DataIniCobranca, ItensDeContrato.Periodicidade, ItensDeContrato.CondPagto, ItensDeContrato.Quantidade, ItensDeContrato.Valor, ItensDeContrato.NumIntDoc, ItensDeContrato.QtdeParcelas, ItensDeContrato.UltParcCobrada FROM Contratos, ItensDeContrato WHERE Contratos.Ativo  = ? AND Contratos.DataIniContrato <=? AND (Contratos.DataFimContrato >= ? OR Contratos.DataFimContrato = ?) AND Contratos.NumIntDoc = ItensDeContrato.NumIntContrato AND Contratos.Tipo = ?", _
                tFluxoAux1.tContrato.dtDataIniContrato, tFluxoAux1.tContrato.dtDataFimContrato, tFluxoAux1.tItemContrato.dtDataIniCobranca, tFluxoAux1.tItemContrato.iPeriodicidade, tFluxoAux1.tItemContrato.iCondPagto, tFluxoAux1.tItemContrato.dQuantidade, tFluxoAux1.tItemContrato.dValor, tFluxoAux1.tItemContrato.lNumIntDoc, tFluxoAux1.tItemContrato.iQtdeParcelas, tFluxoAux1.tItemContrato.iUltParcCobrada, CONTRATO_ATIVO, objFluxo.dtDataFinal + 10, objFluxo.dtDataBase, DATA_NULA, CONTRATOS_RECEBER)
            If lErro <> AD_SQL_SUCESSO Then gError 188243
            
        Else
    
            lErro = Comando_Executar(alComando(1), "SELECT Contratos.DataIniContrato, Contratos.DataFimContrato, ItensDeContrato.DataIniCobranca, ItensDeContrato.Periodicidade, ItensDeContrato.CondPagto, ItensDeContrato.Quantidade, ItensDeContrato.Valor, ItensDeContrato.NumIntDoc, ItensDeContrato.QtdeParcelas, ItensDeContrato.UltParcCobrada FROM Contratos, ItensDeContrato WHERE FilialEmpresa > ? AND Contratos.Ativo  = ? AND Contratos.DataIniContrato <=? AND (Contratos.DataFimContrato >= ? OR Contratos.DataFimContrato = ?) AND Contratos.NumIntDoc = ItensDeContrato.NumIntContrato AND Contratos.Tipo = ?", _
                tFluxoAux1.tContrato.dtDataIniContrato, tFluxoAux1.tContrato.dtDataFimContrato, tFluxoAux1.tItemContrato.dtDataIniCobranca, tFluxoAux1.tItemContrato.iPeriodicidade, tFluxoAux1.tItemContrato.iCondPagto, tFluxoAux1.tItemContrato.dQuantidade, tFluxoAux1.tItemContrato.dValor, tFluxoAux1.tItemContrato.lNumIntDoc, tFluxoAux1.tItemContrato.iQtdeParcelas, tFluxoAux1.tItemContrato.iUltParcCobrada, 50, CONTRATO_ATIVO, objFluxo.dtDataFinal + 10, objFluxo.dtDataBase, DATA_NULA, CONTRATOS_RECEBER)
            If lErro <> AD_SQL_SUCESSO Then gError 195395
    
        End If
    
    Else

        lErro = Comando_Executar(alComando(1), "SELECT Contratos.DataIniContrato, Contratos.DataFimContrato, ItensDeContrato.DataIniCobranca, ItensDeContrato.Periodicidade, ItensDeContrato.CondPagto, ItensDeContrato.Quantidade, ItensDeContrato.Valor, ItensDeContrato.NumIntDoc, ItensDeContrato.QtdeParcelas, ItensDeContrato.UltParcCobrada FROM Contratos, ItensDeContrato WHERE FilialEmpresa = ? AND Contratos.Ativo  = ? AND Contratos.DataIniContrato <=? AND (Contratos.DataFimContrato >= ? OR Contratos.DataFimContrato = ?) AND Contratos.NumIntDoc = ItensDeContrato.NumIntContrato AND Contratos.Tipo = ?", _
            tFluxoAux1.tContrato.dtDataIniContrato, tFluxoAux1.tContrato.dtDataFimContrato, tFluxoAux1.tItemContrato.dtDataIniCobranca, tFluxoAux1.tItemContrato.iPeriodicidade, tFluxoAux1.tItemContrato.iCondPagto, tFluxoAux1.tItemContrato.dQuantidade, tFluxoAux1.tItemContrato.dValor, tFluxoAux1.tItemContrato.lNumIntDoc, tFluxoAux1.tItemContrato.iQtdeParcelas, tFluxoAux1.tItemContrato.iUltParcCobrada, objFluxo.iFilialEmpresa, CONTRATO_ATIVO, objFluxo.dtDataFinal + 10, objFluxo.dtDataBase, DATA_NULA, CONTRATOS_RECEBER)
        If lErro <> AD_SQL_SUCESSO Then gError 188244

    End If
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 188245
    
    Do While lErro = AD_SQL_SUCESSO

        iNovaParcela = 0

        tFluxoAux1.tItemContrato.dtDataProxCobranca = tFluxoAux1.tItemContrato.dtDataIniCobranca
        tFluxoAux1.tItemContrato.iUltParcCobrada = 0
    
        Do While tFluxoAux1.tItemContrato.dtDataProxCobranca < objFluxo.dtDataBase And tFluxoAux1.tItemContrato.iPeriodicidade <> PERIODICIDADE_LIVRE And tFluxoAux1.tItemContrato.iPeriodicidade <> 0
    
            tFluxoAux1.tItemContrato.iUltParcCobrada = tFluxoAux1.tItemContrato.iUltParcCobrada + 1 'Pula as que serão cobradas antes da data base
    
            lErro = CF("Contrato_ProxCobranca", tFluxoAux1.tItemContrato.iPeriodicidade, tFluxoAux1.tItemContrato.dtDataProxCobranca, tFluxoAux1.tItemContrato.dtDataProxCobranca, tFluxoAux1.tItemContrato.dtDataProxCobranca, dtRefFim)
            If lErro <> SUCESSO Then gError 188448
    
        Loop

        If tFluxoAux1.tContrato.dtDataFimContrato <> DATA_NULA Then

            If tFluxoAux1.tItemContrato.dtDataProxCobranca <= tFluxoAux1.tContrato.dtDataFimContrato And tFluxoAux1.tItemContrato.dtDataProxCobranca <= objFluxo.dtDataFinal And tFluxoAux1.tItemContrato.dtDataProxCobranca >= objFluxo.dtDataBase And (tFluxoAux1.tItemContrato.iUltParcCobrada < tFluxoAux1.tItemContrato.iQtdeParcelas Or tFluxoAux1.tItemContrato.iQtdeParcelas = 0) Then
                iNovaParcela = 1
            End If

        Else
        
            If tFluxoAux1.tItemContrato.dtDataProxCobranca <= objFluxo.dtDataFinal And tFluxoAux1.tItemContrato.dtDataProxCobranca >= objFluxo.dtDataBase And (tFluxoAux1.tItemContrato.iUltParcCobrada < tFluxoAux1.tItemContrato.iQtdeParcelas Or tFluxoAux1.tItemContrato.iQtdeParcelas = 0) Then
                iNovaParcela = 1
            End If
        
        End If
        
        'Só serve para pegar o intervalo entre as cobranças e calcular um período de tolerância da data de cobrança
        dtDataCobrU = Date
        dtDataRefI = dtDataCobrU
        lErro = CF("Contrato_ProxCobranca", tFluxoAux1.tItemContrato.iPeriodicidade, dtDataCobrU, dtDataRefI, dtDataCobrP, dtDataRefF)
        If lErro <> SUCESSO Then gError 188447
        iDiasTolerancia = CInt(Abs(DateDiff("d", dtDataCobrU, dtDataCobrP)) / 3)

        Do While iNovaParcela = 1
        
            tFluxoAux1.tItemContrato.iUltParcCobrada = tFluxoAux1.tItemContrato.iUltParcCobrada + 1 'Acrescenta como cobrada

            Set colFluxoContratoItemNFRec = New Collection

            iNovaParcela = 0

            'SEM MEDIÇÃO
            'seleciona as notas fiscais que estao relacionadas ao item de contrato em questao
            lErro = Comando_Executar(alComando(3), "SELECT INF.NumIntNF, INF.Quantidade, INF.PrecoUnitario, INF.ValorDesconto, INF.Item FROM ItensDeContratoCobranca AS ICC, ItensNFiscal AS INF, NFiscal AS NF WHERE NF.NumIntDoc = INF.NumIntNF AND NF.Status NOT IN (5,7) AND ICC.NumIntItensContrato = ? AND ICC.DataUltCobranca BETWEEN ? AND ? AND ICC.NumIntItemNFiscal = INF.NumIntDoc ", _
            lNumIntNF, dQuantidade, dPrecoUnitario, dValorDesconto, iItem, tFluxoAux1.tItemContrato.lNumIntDoc, DateAdd("d", tFluxoAux1.tItemContrato.dtDataProxCobranca, -iDiasTolerancia), DateAdd("d", tFluxoAux1.tItemContrato.dtDataProxCobranca, iDiasTolerancia))
            If lErro <> AD_SQL_SUCESSO Then gError 188247
    
            lErro = Comando_BuscarPrimeiro(alComando(3))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 188248
    
            dValor = 0
    
            Do While lErro = AD_SQL_SUCESSO
            
                dValor = dValor + (dPrecoUnitario * dQuantidade) - dValorDesconto
            
                Set objFluxoContratoItemNFRec = New ClassFluxoContratoItemNFRec
            
                objFluxoContratoItemNFRec.lNumIntNF = lNumIntNF
                objFluxoContratoItemNFRec.iItemNF = iItem
                objFluxoContratoItemNFRec.dValor = -((dPrecoUnitario * dQuantidade) - dValorDesconto)
            
                colFluxoContratoItemNFRec.Add objFluxoContratoItemNFRec
            
                lErro = Comando_BuscarProximo(alComando(3))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 188250
            
            Loop
            
            'COM MEDIÇÃO
            'seleciona as notas fiscais que estao relacionadas ao item de medição de contrato em questao
            lErro = Comando_Executar(alComando(5), "SELECT INF.NumIntNF, INF.Quantidade, INF.PrecoUnitario, INF.ValorDesconto, INF.Item FROM ItensNFiscal AS INF, NFiscal AS NF WHERE NF.NumIntDoc = INF.NumIntNF AND NF.Status NOT IN (5,7) AND EXISTS(SELECT * FROM ItensDeMedicaoCobranca AS ICC WHERE ICC.NumIntItemNFiscal = INF.NumIntDoc AND ICC.NumIntItensContrato = ? AND ICC.DataUltCobranca BETWEEN ? AND ?) ", _
            lNumIntNF, dQuantidade, dPrecoUnitario, dValorDesconto, iItem, tFluxoAux1.tItemContrato.lNumIntDoc, DateAdd("d", tFluxoAux1.tItemContrato.dtDataProxCobranca, -iDiasTolerancia), DateAdd("d", tFluxoAux1.tItemContrato.dtDataProxCobranca, iDiasTolerancia))
            If lErro <> AD_SQL_SUCESSO Then gError 188268
    
            lErro = Comando_BuscarPrimeiro(alComando(5))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 188269
    
            Do While lErro = AD_SQL_SUCESSO
            
                dValor = dValor + (dPrecoUnitario * dQuantidade) - dValorDesconto
            
                Set objFluxoContratoItemNFRec = New ClassFluxoContratoItemNFRec
            
                objFluxoContratoItemNFRec.lNumIntNF = lNumIntNF
                objFluxoContratoItemNFRec.iItemNF = iItem
                objFluxoContratoItemNFRec.dValor = -((dPrecoUnitario * dQuantidade) - dValorDesconto)
            
                colFluxoContratoItemNFRec.Add objFluxoContratoItemNFRec
            
                lErro = Comando_BuscarProximo(alComando(5))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 188271
            
            Loop
        
            If dValor = 0 Then
'            If (tFluxoAux1.tItemContrato.dQuantidade * tFluxoAux1.tItemContrato.dValor) - dValor > DELTA_VALORMONETARIO Then
            
                'insere o item de contrato sem descontar os pagamentos os faturamentos que foram feitos
                lErro = Comando_Executar(alComando(2), "INSERT INTO FluxoContratoItemNF (FluxoId, NumIntItensContrato, Data, NumIntNF, Item, Valor) VALUES  (?,?,?,?,?,?)", _
                objFluxo.lFluxoId, tFluxoAux1.tItemContrato.lNumIntDoc, tFluxoAux1.tItemContrato.dtDataProxCobranca, 0, 0, tFluxoAux1.tItemContrato.dQuantidade * tFluxoAux1.tItemContrato.dValor)
                If lErro <> AD_SQL_SUCESSO Then gError 188246
        
            
                For Each objFluxoContratoItemNFRec In colFluxoContratoItemNFRec
    
                    'insere as notas fiscais relativa aos faturamentos dos contratos que ja ocorreram
                    lErro = Comando_Executar(alComando(2), "INSERT INTO FluxoContratoItemNF (FluxoId, NumIntItensContrato, Data, NumIntNF, Item, Valor) VALUES  (?,?,?,?,?,?)", _
                    objFluxo.lFluxoId, tFluxoAux1.tItemContrato.lNumIntDoc, tFluxoAux1.tItemContrato.dtDataProxCobranca, objFluxoContratoItemNFRec.lNumIntNF, objFluxoContratoItemNFRec.iItemNF, objFluxoContratoItemNFRec.dValor)
                    If lErro <> AD_SQL_SUCESSO Then gError 188249
    
                Next
            
            
                tFluxoAux1.tItemContrato.objCondPagto.iCodigo = tFluxoAux1.tItemContrato.iCondPagto
                tFluxoAux1.tItemContrato.iParcela = 1
                tFluxoAux1.tItemContrato.objCondPagto.dValorTotal = tFluxoAux1.tItemContrato.dQuantidade * tFluxoAux1.tItemContrato.dValor
                tFluxoAux1.tItemContrato.objCondPagto.dtDataRef = tFluxoAux1.tItemContrato.dtDataProxCobranca
    
                lErro = CF("CondicaoPagto_Le", tFluxoAux1.tItemContrato.objCondPagto)
                If lErro <> SUCESSO And lErro <> 19205 Then gError 188251
                If lErro <> SUCESSO Then gError 188252
    
                'Calcula Datas de Vencimento das Parcelas
                lErro = CF("CondicaoPagto_CalculaParcelas", tFluxoAux1.tItemContrato.objCondPagto)
                If lErro <> SUCESSO Then gError 188253
    
                For Each objParcela In tFluxoAux1.tItemContrato.objCondPagto.colParcelas
    
                    lErro = CF("DataVencto_Real", objParcela.dtVencimento, dtDataVenctoReal)
                    If lErro <> SUCESSO Then gError 188254
                    
                    If dValor <= objParcela.dValor Then
                        objParcela.dValor = objParcela.dValor - dValor
                        dValor = 0
                    Else
                        dValor = dValor - objParcela.dValor
                        objParcela.dValor = 0
                    End If
                    
                    If dtDataVenctoReal >= objFluxo.dtDataBase And dtDataVenctoReal <= objFluxo.dtDataFinal And objParcela.dValor > DELTA_VALORMONETARIO Then
                    
                        lErro = Comando_Executar(alComando(4), "INSERT INTO FluxoContratoRec (FluxoId, NumIntItensContrato, NumParcela, Data, Valor, DataReferencia) VALUES  (?,?,?,?,?,?)", _
                        objFluxo.lFluxoId, tFluxoAux1.tItemContrato.lNumIntDoc, objParcela.iSeq, dtDataVenctoReal, objParcela.dValor, tFluxoAux1.tItemContrato.dtDataProxCobranca)
                        If lErro <> AD_SQL_SUCESSO Then gError 188255
    
                    End If
    
                Next
    
            End If

            dtDataProxCobranca = tFluxoAux1.tItemContrato.dtDataProxCobranca

            lErro = CF("Contrato_ProxCobranca", tFluxoAux1.tItemContrato.iPeriodicidade, tFluxoAux1.tItemContrato.dtDataProxCobranca, tFluxoAux1.tItemContrato.dtDataProxCobranca, tFluxoAux1.tItemContrato.dtDataProxCobranca, dtRefFim)
            If lErro <> SUCESSO Then gError 188256

            If dtDataProxCobranca <> tFluxoAux1.tItemContrato.dtDataProxCobranca Then

                If tFluxoAux1.tContrato.dtDataFimContrato <> DATA_NULA Then
    
                    If tFluxoAux1.tItemContrato.dtDataProxCobranca <= tFluxoAux1.tContrato.dtDataFimContrato And tFluxoAux1.tItemContrato.dtDataProxCobranca <= objFluxo.dtDataFinal And (tFluxoAux1.tItemContrato.iUltParcCobrada < tFluxoAux1.tItemContrato.iQtdeParcelas Or tFluxoAux1.tItemContrato.iQtdeParcelas = 0) Then
                        iNovaParcela = 1
                    End If
    
                Else
                
                    If tFluxoAux1.tItemContrato.dtDataProxCobranca <= objFluxo.dtDataFinal And (tFluxoAux1.tItemContrato.iUltParcCobrada < tFluxoAux1.tItemContrato.iQtdeParcelas Or tFluxoAux1.tItemContrato.iQtdeParcelas = 0) Then
                        iNovaParcela = 1
                    End If
                
                End If

            End If

        Loop

        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 188257

    Loop

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    FluxoContratoRec_Grava = SUCESSO

    Exit Function

Erro_FluxoContratoRec_Grava:

    FluxoContratoRec_Grava = gErr

    Select Case gErr

        Case 188242
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 188243, 188244, 188245, 188257, 195395
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSDECONTRATO", gErr)

        Case 188246, 188249
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FLUXOCONTRATOITEMNF", gErr)
        
        Case 188247, 188248, 188250
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITEMCONTRATOCOBRANCA1", gErr, tFluxoAux1.tItemContrato.lNumIntDoc, tFluxoAux1.tItemContrato.dtDataProxCobranca)

        Case 188251, 188253, 188254, 188256, 188488, 195394

        Case 188252
            Call Rotina_Erro(vbOKOnly, "ERRO_CONDICAO_PAGTO_NAO_CADASTRADA", gErr, tFluxoAux1.tItemContrato.objCondPagto.iCodigo)
        
        Case 188255
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FLUXOCONTRATOREC", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 188258)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function FluxoContratoPag_Grava(ByVal objFluxo As ClassFluxo) As Long
'le as tabelas de recebimentos associados ao fluxo de caixa

Dim dtRefFim As Date, lErro As Long
Dim dtDataProxCobranca As Date
Dim dtDataVenctoReal As Date
Dim iIndice As Integer
Dim lNumIntNF As Long
Dim dQuantidade As Double
Dim dPrecoUnitario As Double
Dim dValorDesconto As Double
Dim iItem As Integer
Dim objParcela As ClassCondicaoPagtoParc
Dim tFluxoAux1 As typeFluxoAux
Dim alComando(1 To 5) As Long
Dim iNovaParcela As Integer
Dim dValor As Double
Dim objFluxoContratoItemNFPag As ClassFluxoContratoItemNFPag
Dim colFluxoContratoItemNFPag As Collection
Dim iExiste As Integer
Dim iDiasTolerancia As Integer
Dim dtDataCobrU As Date, dtDataRefI As Date, dtDataCobrP As Date, dtDataRefF As Date

On Error GoTo Erro_FluxoContratoPag_Grava

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 188263
    Next

    tFluxoAux1.tContrato.sCodigo = String(STRING_CONTRATO_CODIGO, 0)
    tFluxoAux1.sNomeReduzidoCliForn = String(STRING_CLIENTE_NOME_REDUZIDO, 0)
    tFluxoAux1.sDescricaoTipoCliForn = String(STRING_TIPO_CLIENTE_DESCRICAO, 0)

    'seleciona os contratos/itens de contrato dentro do prazo do fluxo
    If objFluxo.iFilialEmpresa = EMPRESA_TODA Then

        lErro = CF("FilialEmpresa_Real", iExiste)
        If lErro <> SUCESSO Then gError 195392

        If iExiste = 0 Then

            'Pesquisa todas as parcelas a receber com vencimento no periodo em questão, com saldo, nao descontada, aberto no ambito empresa
            lErro = Comando_Executar(alComando(1), "SELECT Contratos.DataIniContrato, Contratos.DataFimContrato, ItensDeContrato.DataIniCobranca, ItensDeContrato.Periodicidade, ItensDeContrato.CondPagto, ItensDeContrato.Quantidade, ItensDeContrato.Valor, ItensDeContrato.NumIntDoc, ItensDeContrato.QtdeParcelas, ItensDeContrato.UltParcCobrada FROM Contratos, ItensDeContrato WHERE Contratos.Ativo  = ? AND Contratos.DataIniContrato <=? AND (Contratos.DataFimContrato >= ? OR Contratos.DataFimContrato = ?) AND Contratos.NumIntDoc = ItensDeContrato.NumIntContrato AND Contratos.Tipo = ?", _
                tFluxoAux1.tContrato.dtDataIniContrato, tFluxoAux1.tContrato.dtDataFimContrato, tFluxoAux1.tItemContrato.dtDataIniCobranca, tFluxoAux1.tItemContrato.iPeriodicidade, tFluxoAux1.tItemContrato.iCondPagto, tFluxoAux1.tItemContrato.dQuantidade, tFluxoAux1.tItemContrato.dValor, tFluxoAux1.tItemContrato.lNumIntDoc, tFluxoAux1.tItemContrato.iQtdeParcelas, tFluxoAux1.tItemContrato.iUltParcCobrada, CONTRATO_ATIVO, objFluxo.dtDataFinal + 10, objFluxo.dtDataBase, DATA_NULA, CONTRATOS_PAGAR)
            If lErro <> AD_SQL_SUCESSO Then gError 188264
    
        Else
        
            lErro = Comando_Executar(alComando(1), "SELECT Contratos.DataIniContrato, Contratos.DataFimContrato, ItensDeContrato.DataIniCobranca, ItensDeContrato.Periodicidade, ItensDeContrato.CondPagto, ItensDeContrato.Quantidade, ItensDeContrato.Valor, ItensDeContrato.NumIntDoc, ItensDeContrato.QtdeParcelas, ItensDeContrato.UltParcCobrada FROM Contratos, ItensDeContrato WHERE FilialEmpresa > ? AND Contratos.Ativo  = ? AND Contratos.DataIniContrato <=? AND (Contratos.DataFimContrato >= ? OR Contratos.DataFimContrato = ?) AND Contratos.NumIntDoc = ItensDeContrato.NumIntContrato AND Contratos.Tipo = ?", _
                tFluxoAux1.tContrato.dtDataIniContrato, tFluxoAux1.tContrato.dtDataFimContrato, tFluxoAux1.tItemContrato.dtDataIniCobranca, tFluxoAux1.tItemContrato.iPeriodicidade, tFluxoAux1.tItemContrato.iCondPagto, tFluxoAux1.tItemContrato.dQuantidade, tFluxoAux1.tItemContrato.dValor, tFluxoAux1.tItemContrato.lNumIntDoc, tFluxoAux1.tItemContrato.iQtdeParcelas, tFluxoAux1.tItemContrato.iUltParcCobrada, 50, CONTRATO_ATIVO, objFluxo.dtDataFinal + 10, objFluxo.dtDataBase, DATA_NULA, CONTRATOS_PAGAR)
            If lErro <> AD_SQL_SUCESSO Then gError 195393
        
        End If
    
    Else

        lErro = Comando_Executar(alComando(1), "SELECT Contratos.DataIniContrato, Contratos.DataFimContrato, ItensDeContrato.DataIniCobranca, ItensDeContrato.Periodicidade, ItensDeContrato.CondPagto, ItensDeContrato.Quantidade, ItensDeContrato.Valor, ItensDeContrato.NumIntDoc, ItensDeContrato.QtdeParcelas, ItensDeContrato.UltParcCobrada FROM Contratos, ItensDeContrato WHERE FilialEmpresa = ? AND Contratos.Ativo  = ? AND Contratos.DataIniContrato <=? AND (Contratos.DataFimContrato >= ? OR Contratos.DataFimContrato = ?) AND Contratos.NumIntDoc = ItensDeContrato.NumIntContrato AND Contratos.Tipo = ?", _
            tFluxoAux1.tContrato.dtDataIniContrato, tFluxoAux1.tContrato.dtDataFimContrato, tFluxoAux1.tItemContrato.dtDataIniCobranca, tFluxoAux1.tItemContrato.iPeriodicidade, tFluxoAux1.tItemContrato.iCondPagto, tFluxoAux1.tItemContrato.dQuantidade, tFluxoAux1.tItemContrato.dValor, tFluxoAux1.tItemContrato.lNumIntDoc, tFluxoAux1.tItemContrato.iQtdeParcelas, tFluxoAux1.tItemContrato.iUltParcCobrada, objFluxo.iFilialEmpresa, CONTRATO_ATIVO, objFluxo.dtDataFinal + 10, objFluxo.dtDataBase, DATA_NULA, CONTRATOS_PAGAR)
        If lErro <> AD_SQL_SUCESSO Then gError 188265

    End If
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 188266

    Do While lErro = AD_SQL_SUCESSO

        iNovaParcela = 0

        tFluxoAux1.tItemContrato.dtDataProxCobranca = tFluxoAux1.tItemContrato.dtDataIniCobranca
        tFluxoAux1.tItemContrato.iUltParcCobrada = 0
    
        Do While tFluxoAux1.tItemContrato.dtDataProxCobranca < objFluxo.dtDataBase And tFluxoAux1.tItemContrato.iPeriodicidade <> PERIODICIDADE_LIVRE And tFluxoAux1.tItemContrato.iPeriodicidade <> 0
    
            tFluxoAux1.tItemContrato.iUltParcCobrada = tFluxoAux1.tItemContrato.iUltParcCobrada + 1 'Pula as que serão cobradas antes da data base
    
            lErro = CF("Contrato_ProxCobranca", tFluxoAux1.tItemContrato.iPeriodicidade, tFluxoAux1.tItemContrato.dtDataProxCobranca, tFluxoAux1.tItemContrato.dtDataProxCobranca, tFluxoAux1.tItemContrato.dtDataProxCobranca, dtRefFim)
            If lErro <> SUCESSO Then gError 188447
    
        Loop

        If tFluxoAux1.tContrato.dtDataFimContrato <> DATA_NULA Then

            If tFluxoAux1.tItemContrato.dtDataProxCobranca <= tFluxoAux1.tContrato.dtDataFimContrato And tFluxoAux1.tItemContrato.dtDataProxCobranca <= objFluxo.dtDataFinal And tFluxoAux1.tItemContrato.dtDataProxCobranca >= objFluxo.dtDataBase And (tFluxoAux1.tItemContrato.iUltParcCobrada < tFluxoAux1.tItemContrato.iQtdeParcelas Or tFluxoAux1.tItemContrato.iQtdeParcelas = 0) Then
                iNovaParcela = 1
            End If

        Else
        
            If tFluxoAux1.tItemContrato.dtDataProxCobranca <= objFluxo.dtDataFinal And tFluxoAux1.tItemContrato.dtDataProxCobranca >= objFluxo.dtDataBase And (tFluxoAux1.tItemContrato.iUltParcCobrada < tFluxoAux1.tItemContrato.iQtdeParcelas Or tFluxoAux1.tItemContrato.iQtdeParcelas = 0) Then
                iNovaParcela = 1
            End If
        
        End If
        
        'Só serve para pegar o intervalo entre as cobranças e calcular um período de tolerância da data de cobrança
        dtDataCobrU = Date
        dtDataRefI = dtDataCobrU
        lErro = CF("Contrato_ProxCobranca", tFluxoAux1.tItemContrato.iPeriodicidade, dtDataCobrU, dtDataRefI, dtDataCobrP, dtDataRefF)
        If lErro <> SUCESSO Then gError 188447
        iDiasTolerancia = CInt(Abs(DateDiff("d", dtDataCobrU, dtDataCobrP)) / 3)

        Do While iNovaParcela = 1

            tFluxoAux1.tItemContrato.iUltParcCobrada = tFluxoAux1.tItemContrato.iUltParcCobrada + 1 'Pula as que serão cobradas antes da data base

            Set colFluxoContratoItemNFPag = New Collection

            iNovaParcela = 0

            'SEM MEDIÇÃO
            'seleciona as notas fiscais que estao relacionadas ao item de contrato em questao
            lErro = Comando_Executar(alComando(3), "SELECT INF.NumIntNF, INF.Quantidade, INF.PrecoUnitario, INF.ValorDesconto, INF.Item FROM ItensDeContratoCobranca AS ICC, ItensNFiscal AS INF, NFiscal AS NF WHERE NF.NumIntDoc = INF.NumIntNF AND NF.Status NOT IN (5,7) AND ICC.NumIntItensContrato = ? AND ICC.DataUltCobranca BETWEEN ? AND ? AND ICC.NumIntItemNFiscal = INF.NumIntDoc ", _
            lNumIntNF, dQuantidade, dPrecoUnitario, dValorDesconto, iItem, tFluxoAux1.tItemContrato.lNumIntDoc, DateAdd("d", tFluxoAux1.tItemContrato.dtDataProxCobranca, -iDiasTolerancia), DateAdd("d", tFluxoAux1.tItemContrato.dtDataProxCobranca, iDiasTolerancia))
            If lErro <> AD_SQL_SUCESSO Then gError 188268
    
            lErro = Comando_BuscarPrimeiro(alComando(3))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 188269
    
            dValor = 0
    
            Do While lErro = AD_SQL_SUCESSO
            
                dValor = dValor + (dPrecoUnitario * dQuantidade) - dValorDesconto
            
                Set objFluxoContratoItemNFPag = New ClassFluxoContratoItemNFPag
            
                objFluxoContratoItemNFPag.lNumIntNF = lNumIntNF
                objFluxoContratoItemNFPag.iItemNF = iItem
                objFluxoContratoItemNFPag.dValor = -((dPrecoUnitario * dQuantidade) - dValorDesconto)
            
                colFluxoContratoItemNFPag.Add objFluxoContratoItemNFPag
            
                lErro = Comando_BuscarProximo(alComando(3))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 188271
            
            Loop
            
            'COM MEDIÇÃO
            'seleciona as notas fiscais que estao relacionadas ao item de medição de contrato em questao
            lErro = Comando_Executar(alComando(5), "SELECT INF.NumIntNF, INF.Quantidade, INF.PrecoUnitario, INF.ValorDesconto, INF.Item FROM ItensNFiscal AS INF, NFiscal AS NF WHERE NF.NumIntDoc = INF.NumIntNF AND NF.Status NOT IN (5,7) AND EXISTS(SELECT * FROM ItensDeMedicaoCobranca AS ICC WHERE ICC.NumIntItemNFiscal = INF.NumIntDoc AND ICC.NumIntItensContrato = ? AND ICC.DataUltCobranca BETWEEN ? AND ?) ", _
            lNumIntNF, dQuantidade, dPrecoUnitario, dValorDesconto, iItem, tFluxoAux1.tItemContrato.lNumIntDoc, DateAdd("d", tFluxoAux1.tItemContrato.dtDataProxCobranca, -iDiasTolerancia), DateAdd("d", tFluxoAux1.tItemContrato.dtDataProxCobranca, iDiasTolerancia))
            If lErro <> AD_SQL_SUCESSO Then gError 188268
    
            lErro = Comando_BuscarPrimeiro(alComando(5))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 188269
    
            Do While lErro = AD_SQL_SUCESSO
            
                dValor = dValor + (dPrecoUnitario * dQuantidade) - dValorDesconto
            
                Set objFluxoContratoItemNFPag = New ClassFluxoContratoItemNFPag
            
                objFluxoContratoItemNFPag.lNumIntNF = lNumIntNF
                objFluxoContratoItemNFPag.iItemNF = iItem
                objFluxoContratoItemNFPag.dValor = -((dPrecoUnitario * dQuantidade) - dValorDesconto)
            
                colFluxoContratoItemNFPag.Add objFluxoContratoItemNFPag
            
                lErro = Comando_BuscarProximo(alComando(5))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 188271
            
            Loop
        
            If dValor = 0 Then
'            If (tFluxoAux1.tItemContrato.dQuantidade * tFluxoAux1.tItemContrato.dValor) - dValor > 0 Then
            
                'insere o item de contrato sem descontar os pagamentos os faturamentos que foram feitos
                lErro = Comando_Executar(alComando(2), "INSERT INTO FluxoContratoItemNF (FluxoId, NumIntItensContrato, Data, NumIntNF, Item, Valor) VALUES  (?,?,?,?,?,?)", _
                objFluxo.lFluxoId, tFluxoAux1.tItemContrato.lNumIntDoc, tFluxoAux1.tItemContrato.dtDataProxCobranca, 0, 0, tFluxoAux1.tItemContrato.dQuantidade * tFluxoAux1.tItemContrato.dValor)
                If lErro <> AD_SQL_SUCESSO Then gError 188267
    
                For Each objFluxoContratoItemNFPag In colFluxoContratoItemNFPag
    
                    'insere as notas fiscais relativa aos faturamentos dos contratos que ja ocorreram
                    lErro = Comando_Executar(alComando(2), "INSERT INTO FluxoContratoItemNF (FluxoId, NumIntItensContrato, Data, NumIntNF, Item, Valor) VALUES  (?,?,?,?,?,?)", _
                    objFluxo.lFluxoId, tFluxoAux1.tItemContrato.lNumIntDoc, tFluxoAux1.tItemContrato.dtDataProxCobranca, objFluxoContratoItemNFPag.lNumIntNF, objFluxoContratoItemNFPag.iItemNF, objFluxoContratoItemNFPag.dValor)
                    If lErro <> AD_SQL_SUCESSO Then gError 188270
            
                Next
            
                tFluxoAux1.tItemContrato.objCondPagto.iCodigo = tFluxoAux1.tItemContrato.iCondPagto
                tFluxoAux1.tItemContrato.iParcela = 1
                tFluxoAux1.tItemContrato.objCondPagto.dValorTotal = tFluxoAux1.tItemContrato.dQuantidade * tFluxoAux1.tItemContrato.dValor
                tFluxoAux1.tItemContrato.objCondPagto.dtDataRef = tFluxoAux1.tItemContrato.dtDataProxCobranca
    
                lErro = CF("CondicaoPagto_Le", tFluxoAux1.tItemContrato.objCondPagto)
                If lErro <> SUCESSO And lErro <> 19205 Then gError 188272
                If lErro <> SUCESSO Then gError 188273
    
                'Calcula Datas de Vencimento das Parcelas
                lErro = CF("CondicaoPagto_CalculaParcelas", tFluxoAux1.tItemContrato.objCondPagto)
                If lErro <> SUCESSO Then gError 188274
    
                For Each objParcela In tFluxoAux1.tItemContrato.objCondPagto.colParcelas
    
                    lErro = CF("DataVencto_Real", objParcela.dtVencimento, dtDataVenctoReal)
                    If lErro <> SUCESSO Then gError 188275
                    
                    If dValor <= objParcela.dValor Then
                        objParcela.dValor = objParcela.dValor - dValor
                        dValor = 0
                    Else
                        dValor = dValor - objParcela.dValor
                        objParcela.dValor = 0
                    End If
                    
                    If dtDataVenctoReal >= objFluxo.dtDataBase And dtDataVenctoReal <= objFluxo.dtDataFinal And objParcela.dValor > DELTA_VALORMONETARIO Then
                    
                        lErro = Comando_Executar(alComando(4), "INSERT INTO FluxoContratoPag (FluxoId, NumIntItensContrato, NumParcela, Data, Valor, DataReferencia) VALUES  (?,?,?,?,?,?)", _
                        objFluxo.lFluxoId, tFluxoAux1.tItemContrato.lNumIntDoc, objParcela.iSeq, dtDataVenctoReal, objParcela.dValor, tFluxoAux1.tItemContrato.dtDataProxCobranca)
                        If lErro <> AD_SQL_SUCESSO Then gError 188276
    
                    End If
    
                Next
    
            End If

            dtDataProxCobranca = tFluxoAux1.tItemContrato.dtDataProxCobranca

            'retorna a data da proxima cobranca do item do contrato
            lErro = CF("Contrato_ProxCobranca", tFluxoAux1.tItemContrato.iPeriodicidade, tFluxoAux1.tItemContrato.dtDataProxCobranca, tFluxoAux1.tItemContrato.dtDataProxCobranca, tFluxoAux1.tItemContrato.dtDataProxCobranca, dtRefFim)
            If lErro <> SUCESSO Then gError 188277

            If dtDataProxCobranca <> tFluxoAux1.tItemContrato.dtDataProxCobranca Then

                If tFluxoAux1.tContrato.dtDataFimContrato <> DATA_NULA Then
    
                    'se a data estiver dentro do prazo do contrato e do prazo do fluxo
                    If tFluxoAux1.tItemContrato.dtDataProxCobranca <= tFluxoAux1.tContrato.dtDataFimContrato And tFluxoAux1.tItemContrato.dtDataProxCobranca <= objFluxo.dtDataFinal And (tFluxoAux1.tItemContrato.iUltParcCobrada < tFluxoAux1.tItemContrato.iQtdeParcelas Or tFluxoAux1.tItemContrato.iQtdeParcelas = 0) Then
                        iNovaParcela = 1
                    End If
    
                Else
                
                    'se a data estiver dentro do prazo do contrato e do prazo do fluxo
                    If tFluxoAux1.tItemContrato.dtDataProxCobranca <= objFluxo.dtDataFinal And (tFluxoAux1.tItemContrato.iUltParcCobrada < tFluxoAux1.tItemContrato.iQtdeParcelas Or tFluxoAux1.tItemContrato.iQtdeParcelas = 0) Then
                        iNovaParcela = 1
                    End If
                
                End If

            End If
            
        Loop

        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 188278

    Loop

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    FluxoContratoPag_Grava = SUCESSO

    Exit Function

Erro_FluxoContratoPag_Grava:

    FluxoContratoPag_Grava = gErr

    Select Case gErr

        Case 188263
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 188264, 188265, 188266, 188278, 195393
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSDECONTRATO", gErr)

        Case 188267, 188270
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FLUXOCONTRATOITEMNF", gErr)
        
        Case 188268, 188269, 188271
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITEMCONTRATOCOBRANCA1", gErr, tFluxoAux1.tItemContrato.lNumIntDoc, tFluxoAux1.tItemContrato.dtDataProxCobranca)

        Case 188272, 188274, 188275, 188277, 188447, 195392

        Case 188273
            Call Rotina_Erro(vbOKOnly, "ERRO_CONDICAO_PAGTO_NAO_CADASTRADA", gErr, tFluxoAux1.tItemContrato.objCondPagto.iCodigo)
        
        Case 188276
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FLUXOCONTRATOPAG", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 188279)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function


Private Function FluxoPedVenda_Grava(ByVal objFluxo As ClassFluxo) As Long
'grava os recebimentos oriundos dos pedidos de venda

Dim lErro As Long, lErro1 As Long
Dim alComando(1 To 2) As Long
Dim dtRefFim As Date
Dim tPedidoVenda As typePedidoVenda
Dim objTela As Object
Dim objParcela As New ClassParcelaReceber
Dim dtDataVenctoReal As Date
Dim iIndice As Integer
Dim iExiste As Integer

On Error GoTo Erro_FluxoPedVenda_Grava

    If gobjTES.iFluxoIncluiPedidos = FLUXO_INCLUI_PEDIDOS Then

        'Abertura de Comando
        For iIndice = LBound(alComando) To UBound(alComando)
            alComando(iIndice) = Comando_Abrir()
            If alComando(iIndice) = 0 Then gError 188562
        Next
    
        'chama a tela passada como parametro criando uma nova instancia sem mostra-la
        lErro = Chama_Tela_Nova_Instancia1("NFiscalFaturaPedido", objTela)
        If lErro <> SUCESSO Then gError 188566
    
    
        'seleciona os contratos/itens de contrato dentro do prazo do fluxo
        If objFluxo.iFilialEmpresa = EMPRESA_TODA Then
        
            lErro = CF("FilialEmpresa_Real", iExiste)
            If lErro <> SUCESSO Then gError 195388
        
            If iExiste = 0 Then
        
                lErro = Comando_Executar(alComando(1), "SELECT Codigo, FilialEmpresa, DataRefFluxo FROM PedidosDeVenda ", tPedidoVenda.lCodigo, tPedidoVenda.iFilialEmpresa, tPedidoVenda.dtDataRefFluxo)
                If lErro <> AD_SQL_SUCESSO Then gError 188563
                
            Else
            
                lErro = Comando_Executar(alComando(1), "SELECT Codigo, FilialEmpresa, DataRefFluxo FROM PedidosDeVenda WHERE FilialEmpresa > ?", tPedidoVenda.lCodigo, tPedidoVenda.iFilialEmpresa, tPedidoVenda.dtDataRefFluxo, 50)
                If lErro <> AD_SQL_SUCESSO Then gError 195389
            
            End If
            
        Else
        
            lErro = Comando_Executar(alComando(1), "SELECT Codigo, FilialEmpresa, DataRefFluxo FROM PedidosDeVenda WHERE FilialEmpresa = ?", tPedidoVenda.lCodigo, tPedidoVenda.iFilialEmpresa, tPedidoVenda.dtDataRefFluxo, objFluxo.iFilialEmpresa)
            If lErro <> AD_SQL_SUCESSO Then gError 188564
    
        End If
    
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 188565
    
        If objFluxo.iFilialEmpresa = EMPRESA_TODA Then
            giFilialEmpresa = tPedidoVenda.iFilialEmpresa
        End If
    
        lErro1 = objTela.objCT.CargaPosFormLoad
        If lErro1 <> SUCESSO Then gError 188590
                
        Do While lErro = AD_SQL_SUCESSO
    
            If objFluxo.iFilialEmpresa = EMPRESA_TODA Then giFilialEmpresa = tPedidoVenda.iFilialEmpresa
    
            objTela.objCT.Pedido.Text = CStr(tPedidoVenda.lCodigo)
            objTela.objCT.FilialPedido.Text = CStr(tPedidoVenda.iFilialEmpresa)
    
            lErro = objTela.objCT.Traz_Pedido_Fluxo
            If lErro <> SUCESSO Then gError 188589
            
            objFluxo.objTela.objProgressBar.Value = objFluxo.objTela.objProgressBar.Value + 1
            
            DoEvents
            
            If objFluxo.objTela.giStop = 1 Then gError 188626
            
            If tPedidoVenda.dtDataRefFluxo <> DATA_NULA Then
                objTela.objCT.DataReferencia.PromptInclude = False
                objTela.objCT.DataReferencia.Text = Format(tPedidoVenda.dtDataRefFluxo, "dd/mm/yy")
                objTela.objCT.DataReferencia.PromptInclude = True
                objTela.objCT.DataEmissao.PromptInclude = False
                objTela.objCT.DataEmissao.Text = Format(tPedidoVenda.dtDataRefFluxo, "dd/mm/yy")
                objTela.objCT.DataEmissao.PromptInclude = True
                objTela.objCT.dataEntrega.PromptInclude = False
                objTela.objCT.dataEntrega.Text = Format(tPedidoVenda.dtDataRefFluxo, "dd/mm/yy")
                objTela.objCT.dataEntrega.PromptInclude = True
                Call objTela.objCT.Cobranca_Automatica
            End If
            
            'Para cada parcela do grid
            For iIndice = 1 To objTela.objCT.objGridParcelas.iLinhasExistentes
            
                objParcela.iNumParcela = iIndice
        
                'recolhe os dados da parcela
                objParcela.dtDataVencimento = StrParaDate(objTela.objCT.GridParcelas.TextMatrix(iIndice, objTela.objCT.iGrid_Vencimento_Col))
                objParcela.dValor = StrParaDbl(objTela.objCT.GridParcelas.TextMatrix(iIndice, objTela.objCT.iGrid_ValorParcela_Col))
            
                lErro = CF("DataVencto_Real", objParcela.dtDataVencimento, dtDataVenctoReal)
                If lErro <> SUCESSO Then gError 188567
            
                If dtDataVenctoReal >= objFluxo.dtDataBase And dtDataVenctoReal <= objFluxo.dtDataFinal And objParcela.dValor > DELTA_VALORMONETARIO Then
                
                    lErro = Comando_Executar(alComando(2), "INSERT INTO FluxoPV (FluxoId, FilialEmpresa, Pedido, NumParcela, Data, Valor) VALUES  (?,?,?,?,?,?)", _
                    objFluxo.lFluxoId, tPedidoVenda.iFilialEmpresa, tPedidoVenda.lCodigo, objParcela.iNumParcela, dtDataVenctoReal, objParcela.dValor)
                    If lErro <> AD_SQL_SUCESSO Then gError 188568
    
                End If
    
            Next
    
            lErro = Comando_BuscarProximo(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 188569
    
        Loop
    
        Unload objTela.Parent
    
        For iIndice = LBound(alComando) To UBound(alComando)
            Call Comando_Fechar(alComando(iIndice))
        Next

    End If

    If objFluxo.iFilialEmpresa = EMPRESA_TODA Then giFilialEmpresa = EMPRESA_TODA

    FluxoPedVenda_Grava = SUCESSO

    Exit Function

Erro_FluxoPedVenda_Grava:

    FluxoPedVenda_Grava = gErr

    If objFluxo.iFilialEmpresa = EMPRESA_TODA Then giFilialEmpresa = EMPRESA_TODA

    Select Case gErr

        Case 188562
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 188563, 188564, 188565, 188569, 195389
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PEDIDODEVENDA", gErr)

        Case 188566, 188567, 188589, 188590, 195388

        Case 188568
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FLUXOPV", gErr)
        
        Case 188626
            Call Rotina_Erro(vbOKOnly, "ERRO_FLUXO_INTERROMPIDO", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 188570)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function FluxoAnalitico_Le_PV(ByVal objFluxo As ClassFluxo, lErroRet As Long, lComando As Long, tFluxoAux1 As typeFluxoAux) As Long
'le os lancamentos oriundos de pedido de vendas

Dim lErro As Long

On Error GoTo Erro_FluxoAnalitico_Le_PV

    'gera uma tabela auxiliar FluxoContratoRec contendo os registros que serao processados pelo fluxo de caixa
    lErro = FluxoPedVenda_Grava(objFluxo)
    If lErro <> SUCESSO Then gError 188572

    tFluxoAux1.sNomeReduzidoCliPV = String(STRING_CLIENTE_NOME_REDUZIDO, 0)
    tFluxoAux1.sDescricaoTipoCliPV = String(STRING_TIPO_CLIENTE_DESCRICAO, 0)

    If giFilialEmpresa = EMPRESA_TODA Then

        'Pesquisa todas as parcelas a receber com vencimento no periodo em questão, com saldo, nao descontada, aberto no ambito empresa
        lErro = Comando_Executar(lComando, "SELECT FluxoPV.Pedido, PedidosDeVenda.Cliente, PedidosDeVenda.Filial, Clientes.Tipo, Clientes.NomeReduzido, TiposDeCliente.Descricao, FluxoPV.NumParcela, FluxoPV.Data, FluxoPV.Valor, FluxoPV.FilialEmpresa FROM FluxoPV, PedidosDeVenda, Clientes, TiposDeCliente WHERE FluxoPV.Pedido = PedidosDeVenda.Codigo AND  FluxoPV.FilialEmpresa = PedidosDeVenda.FilialEmpresa AND PedidosDeVenda.Cliente = Clientes.Codigo AND Clientes.Tipo = TiposDeCliente.Codigo AND FluxoPV.FluxoId = ? ORDER BY PedidosDeVenda.Cliente, PedidosDeVenda.Filial, FluxoPV.Data", _
            tFluxoAux1.tFluxoPV.lPedido, tFluxoAux1.tFluxoPV.lCliente, tFluxoAux1.tFluxoPV.iFilCli, tFluxoAux1.iTipoCliPV, tFluxoAux1.sNomeReduzidoCliPV, tFluxoAux1.sDescricaoTipoCliPV, tFluxoAux1.tFluxoPV.iNumParcela, tFluxoAux1.tFluxoPV.dtDataVenctoReal, tFluxoAux1.tFluxoPV.dValor, tFluxoAux1.tFluxoPV.iFilialEmpresa, objFluxo.lFluxoId)
        If lErro <> AD_SQL_SUCESSO Then gError 188573

    Else
    
        'Pesquisa todas as parcelas a receber com vencimento no periodo em questão, com saldo, nao descontada, aberto no ambito empresa
        lErro = Comando_Executar(lComando, "SELECT FluxoPV.Pedido, PedidosDeVenda.Cliente, PedidosDeVenda.Filial, Clientes.Tipo, Clientes.NomeReduzido, TiposDeCliente.Descricao, FluxoPV.NumParcela, FluxoPV.Data, FluxoPV.Valor, FluxoPV.FilialEmpresa FROM FluxoPV, PedidosDeVenda, Clientes, TiposDeCliente WHERE FluxoPV.Pedido = PedidosDeVenda.Codigo AND  FluxoPV.FilialEmpresa = PedidosDeVenda.FilialEmpresa AND PedidosDeVenda.Cliente = Clientes.Codigo AND Clientes.Tipo = TiposDeCliente.Codigo AND FluxoPV.FluxoId = ? AND FluxoPV.FilialEmpresa = ? ORDER BY PedidosDeVenda.Cliente, PedidosDeVenda.Filial, FluxoPV.Data", _
            tFluxoAux1.tFluxoPV.lPedido, tFluxoAux1.tFluxoPV.lCliente, tFluxoAux1.tFluxoPV.iFilCli, tFluxoAux1.iTipoCliPV, tFluxoAux1.sNomeReduzidoCliPV, tFluxoAux1.sDescricaoTipoCliPV, tFluxoAux1.tFluxoPV.iNumParcela, tFluxoAux1.tFluxoPV.dtDataVenctoReal, tFluxoAux1.tFluxoPV.dValor, tFluxoAux1.tFluxoPV.iFilialEmpresa, objFluxo.lFluxoId, giFilialEmpresa)
        If lErro <> AD_SQL_SUCESSO Then gError 188592
    
    End If

    lErroRet = Fluxo_Comando_BuscarProximo(lComando, tFluxoAux1.tFluxoPV.dtDataVenctoReal, objFluxo, 0)
    If lErroRet <> AD_SQL_SUCESSO And lErroRet <> AD_SQL_SEM_DADOS Then gError 188574

    FluxoAnalitico_Le_PV = SUCESSO

    Exit Function

Erro_FluxoAnalitico_Le_PV:

    FluxoAnalitico_Le_PV = gErr

    Select Case gErr

        Case 188572, 188574

        Case 188573, 188592
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FLUXOPV", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 188575)

    End Select

    Exit Function

End Function

Private Function FluxoPedCompra_Grava(ByVal objFluxo As ClassFluxo) As Long
'grava os pagamentos oriundos dos pedidos de compra

Dim lErro As Long
Dim alComando(1 To 2) As Long
Dim dtRefFim As Date
Dim tPedidoCompra As typePedidoCompras
Dim objTela As Object
Dim objParcelaPag As New ClassParcelaPagar
Dim dtDataVenctoReal As Date
Dim iIndice As Integer
Dim bCancel As Boolean
Dim objPedidoCompra As New ClassPedidoCompras
Dim iExiste As Integer

On Error GoTo Erro_FluxoPedCompra_Grava

    If gobjTES.iFluxoIncluiPedidos = FLUXO_INCLUI_PEDIDOS Then

        'Abertura de Comando
        For iIndice = LBound(alComando) To UBound(alComando)
            alComando(iIndice) = Comando_Abrir()
            If alComando(iIndice) = 0 Then gError 188601
        Next
    
        'chama a tela passada como parametro criando uma nova instancia sem mostra-la
        lErro = Chama_Tela_Nova_Instancia1("NFiscalFatEntradaCom", objTela)
        If lErro <> SUCESSO Then gError 188602
    
        'seleciona os pedidos de compra
        If objFluxo.iFilialEmpresa = EMPRESA_TODA Then
        
            lErro = CF("FilialEmpresa_Real", iExiste)
            If lErro <> SUCESSO Then gError 195390
        
            If iExiste = 0 Then
        
                lErro = Comando_Executar(alComando(1), "SELECT Codigo, FilialEmpresa, Fornecedor, Filial, DataRefFluxo FROM PedidoCompra ", tPedidoCompra.lCodigo, tPedidoCompra.iFilialEmpresa, tPedidoCompra.lFornecedor, tPedidoCompra.iFilial, tPedidoCompra.dtDataRefFluxo)
                If lErro <> AD_SQL_SUCESSO Then gError 188604
    
            Else
            
                lErro = Comando_Executar(alComando(1), "SELECT Codigo, FilialEmpresa, Fornecedor, Filial, DataRefFluxo FROM PedidoCompra WHERE FilialEmpresa > ?", tPedidoCompra.lCodigo, tPedidoCompra.iFilialEmpresa, tPedidoCompra.lFornecedor, tPedidoCompra.iFilial, tPedidoCompra.dtDataRefFluxo, 50)
                If lErro <> AD_SQL_SUCESSO Then gError 195391
            
            End If
    
        Else
        
            lErro = Comando_Executar(alComando(1), "SELECT Codigo, FilialEmpresa, Fornecedor, Filial, DataRefFluxo FROM PedidoCompra WHERE FilialEmpresa = ?", tPedidoCompra.lCodigo, tPedidoCompra.iFilialEmpresa, tPedidoCompra.lFornecedor, tPedidoCompra.iFilial, tPedidoCompra.dtDataRefFluxo, objFluxo.iFilialEmpresa)
            If lErro <> AD_SQL_SUCESSO Then gError 188605
    
        End If
    
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 188606
    
        If objFluxo.iFilialEmpresa = EMPRESA_TODA Then
            giFilialEmpresa = tPedidoCompra.iFilialEmpresa
            objTela.objCT.gbCarregandoTela = True
            objTela.objCT.FilialCompra.Text = tPedidoCompra.iFilialEmpresa
            objTela.objCT.gbCarregandoTela = False
        End If
    
        lErro = objTela.objCT.CargaPosFormLoad
        If lErro <> SUCESSO Then gError 188603
    
        Do While lErro = AD_SQL_SUCESSO
    
            If objFluxo.iFilialEmpresa = EMPRESA_TODA Then
                giFilialEmpresa = tPedidoCompra.iFilialEmpresa
                objTela.objCT.gbCarregandoTela = True
                objTela.objCT.FilialCompra.Text = tPedidoCompra.iFilialEmpresa
                objTela.objCT.gbCarregandoTela = False
            End If
                
            objPedidoCompra.iFilialEmpresa = tPedidoCompra.iFilialEmpresa
            objPedidoCompra.lCodigo = tPedidoCompra.lCodigo
            
            lErro = CF("PedidoCompra_Le_Numero", objPedidoCompra)
            If lErro <> SUCESSO And lErro <> 56142 Then gError 188616
            
            If lErro = SUCESSO Then
                
                Call objTela.objCT.Limpa_Tela_NFiscalFatCom
                
                Set objTela.objCT.gcolPedidoCompra = New Collection
                objTela.objCT.gcolPedidoCompra.Add objPedidoCompra
                
                objTela.objCT.Fornecedor.Text = CStr(tPedidoCompra.lFornecedor)
                objTela.objCT.Filial.Text = CStr(tPedidoCompra.iFilial)
                Call objTela.objCT.gobjTribTab.FilialFornecedor_Alterada(tPedidoCompra.lFornecedor, tPedidoCompra.iFilial)
               
               objTela.objCT.PedidosCompra.AddItem tPedidoCompra.lCodigo
                          
                objTela.objCT.PedidosCompra.Selected(0) = True
        
                objFluxo.objTela.objProgressBar.Value = objFluxo.objTela.objProgressBar.Value + 1
                
                DoEvents
                
                If objFluxo.objTela.giStop = 1 Then gError 188627
            
                objTela.objCT.total.Text = StrParaDbl(objTela.objCT.SubTotal.Caption) + StrParaDbl(objTela.objCT.ICMSSubstValor1.Caption) + StrParaDbl(objTela.objCT.IPIValor1.Caption) + StrParaDbl(objTela.objCT.ValorFrete.Text) + StrParaDbl(objTela.objCT.ValorSeguro.Text) + StrParaDbl(objTela.objCT.ValorDespesas.Text)
        
                If tPedidoCompra.dtDataRefFluxo <> DATA_NULA Then
                    objTela.objCT.DataEmissao.PromptInclude = False
                    objTela.objCT.DataEmissao.Text = Format(tPedidoCompra.dtDataRefFluxo, "dd/mm/yy")
                    objTela.objCT.DataEmissao.PromptInclude = True
                    objTela.objCT.DataEntrada.PromptInclude = False
                    objTela.objCT.DataEntrada.Text = Format(tPedidoCompra.dtDataRefFluxo, "dd/mm/yy")
                    objTela.objCT.DataEntrada.PromptInclude = True
                    Call objTela.objCT.Cobranca_Automatica
                Else
                    objTela.objCT.DataEmissao.PromptInclude = False
                    objTela.objCT.DataEmissao.Text = Format(gdtDataAtual, "dd/mm/yy")
                    objTela.objCT.DataEmissao.PromptInclude = True
                    Call objTela.objCT.Cobranca_Automatica
                End If
                
                'Para cada parcela do grid
                For iIndice = 1 To objTela.objCT.objGridParcelas.iLinhasExistentes
                
                    objParcelaPag.iNumParcela = iIndice
            
                    'recolhe os dados da parcela
                    objParcelaPag.dtDataVencimentoReal = StrParaDate(objTela.objCT.GridParcelas.TextMatrix(iIndice, objTela.objCT.iGrid_VenctoReal_Col))
                    objParcelaPag.dValor = StrParaDbl(objTela.objCT.GridParcelas.TextMatrix(iIndice, objTela.objCT.iGrid_Valor_Col))
                
                    If objParcelaPag.dtDataVencimentoReal >= objFluxo.dtDataBase And objParcelaPag.dtDataVencimentoReal <= objFluxo.dtDataFinal And objParcelaPag.dValor > DELTA_VALORMONETARIO Then
                    
                        lErro = Comando_Executar(alComando(2), "INSERT INTO FluxoPC (FluxoId, FilialEmpresa, Pedido, NumParcela, Data, Valor) VALUES  (?,?,?,?,?,?)", _
                        objFluxo.lFluxoId, tPedidoCompra.iFilialEmpresa, tPedidoCompra.lCodigo, objParcelaPag.iNumParcela, objParcelaPag.dtDataVencimentoReal, objParcelaPag.dValor)
                        If lErro <> AD_SQL_SUCESSO Then gError 188607
        
                    End If
        
                Next
    
            End If
    
            lErro = Comando_BuscarProximo(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 188608
    
        Loop
    
        Unload objTela.Parent
    
        For iIndice = LBound(alComando) To UBound(alComando)
            Call Comando_Fechar(alComando(iIndice))
        Next

    End If

    If objFluxo.iFilialEmpresa = EMPRESA_TODA Then giFilialEmpresa = EMPRESA_TODA

    FluxoPedCompra_Grava = SUCESSO

    Exit Function

Erro_FluxoPedCompra_Grava:

    FluxoPedCompra_Grava = gErr

    If objFluxo.iFilialEmpresa = EMPRESA_TODA Then giFilialEmpresa = EMPRESA_TODA

    Select Case gErr

        Case 188601
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 188602, 188603, 195390

        Case 188604, 188605, 188606, 188608, 195391
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PEDIDOCOMPRA", gErr)

        Case 188607
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FLUXOPC", gErr)
        
        Case 188627
            Call Rotina_Erro(vbOKOnly, "ERRO_FLUXO_INTERROMPIDO", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 188609)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function FluxoAnalitico_Le_PC(ByVal objFluxo As ClassFluxo, lErroRet As Long, lComando As Long, tFluxoAux1 As typeFluxoAux) As Long
'le os lancamentos oriundos de pedido de compra

Dim lErro As Long

On Error GoTo Erro_FluxoAnalitico_Le_PC

    'gera uma tabela auxiliar FluxoContratoRec contendo os registros que serao processados pelo fluxo de caixa
    lErro = FluxoPedCompra_Grava(objFluxo)
    If lErro <> SUCESSO Then gError 188610

    tFluxoAux1.sNomeReduzidoFornPC = String(STRING_FORNECEDOR_NOME_REDUZIDO, 0)
    tFluxoAux1.sDescricaoTipoFornPC = String(STRING_TIPO_FORNECEDOR_DESCRICAO, 0)

    If giFilialEmpresa = EMPRESA_TODA Then

        'Pesquisa todas as parcelas a receber com vencimento no periodo em questão, com saldo, nao descontada, aberto no ambito empresa
        lErro = Comando_Executar(lComando, "SELECT FluxoPC.Pedido, PedidoCompra.Fornecedor, PedidoCompra.Filial, Fornecedores.Tipo, Fornecedores.NomeReduzido, TiposDeFornecedor.Descricao, FluxoPC.NumParcela, FluxoPC.Data, FluxoPC.Valor, FluxoPC.FilialEmpresa FROM FluxoPC, PedidoCompra, Fornecedores, TiposDeFornecedor WHERE FluxoPC.Pedido = PedidoCompra.Codigo AND  FluxoPC.FilialEmpresa = PedidoCompra.FilialEmpresa AND PedidoCompra.Fornecedor = Fornecedores.Codigo AND Fornecedores.Tipo = TiposDeFornecedor.Codigo AND FluxoPC.FluxoId = ? ORDER BY PedidoCompra.Fornecedor, PedidoCompra.Filial, FluxoPC.Data", _
            tFluxoAux1.tFluxoPC.lPedido, tFluxoAux1.tFluxoPC.lFornecedor, tFluxoAux1.tFluxoPC.iFilial, tFluxoAux1.iTipoFornPC, tFluxoAux1.sNomeReduzidoFornPC, tFluxoAux1.sDescricaoTipoFornPC, tFluxoAux1.tFluxoPC.iNumParcela, tFluxoAux1.tFluxoPC.dtDataVenctoReal, tFluxoAux1.tFluxoPC.dValor, tFluxoAux1.tFluxoPC.iFilialEmpresa, objFluxo.lFluxoId)
        If lErro <> AD_SQL_SUCESSO Then gError 188611

    Else
    
        'Pesquisa todas as parcelas a receber com vencimento no periodo em questão, com saldo, nao descontada, aberto no ambito empresa
        lErro = Comando_Executar(lComando, "SELECT FluxoPC.Pedido, PedidoCompra.Fornecedor, PedidoCompra.Filial, Fornecedores.Tipo, Fornecedores.NomeReduzido, TiposDeFornecedor.Descricao, FluxoPC.NumParcela, FluxoPC.Data, FluxoPC.Valor, FluxoPC.FilialEmpresa FROM FluxoPC, PedidoCompra, Fornecedores, TiposDeFornecedor WHERE FluxoPC.Pedido = PedidoCompra.Codigo AND  FluxoPC.FilialEmpresa = PedidoCompra.FilialEmpresa AND PedidoCompra.Fornecedor = Fornecedores.Codigo AND Fornecedores.Tipo = TiposDeFornecedor.Codigo AND FluxoPC.FluxoId = ? AND FluxoPC.FilialEmpresa = ? ORDER BY PedidoCompra.Fornecedor, PedidoCompra.Filial, FluxoPC.Data", _
            tFluxoAux1.tFluxoPC.lPedido, tFluxoAux1.tFluxoPC.lFornecedor, tFluxoAux1.tFluxoPC.iFilial, tFluxoAux1.iTipoFornPC, tFluxoAux1.sNomeReduzidoFornPC, tFluxoAux1.sDescricaoTipoFornPC, tFluxoAux1.tFluxoPC.iNumParcela, tFluxoAux1.tFluxoPC.dtDataVenctoReal, tFluxoAux1.tFluxoPC.dValor, tFluxoAux1.tFluxoPC.iFilialEmpresa, objFluxo.lFluxoId, giFilialEmpresa)
        If lErro <> AD_SQL_SUCESSO Then gError 188612
    
    End If

    lErroRet = Fluxo_Comando_BuscarProximo(lComando, tFluxoAux1.tFluxoPC.dtDataVenctoReal, objFluxo, 0)
    If lErroRet <> AD_SQL_SUCESSO And lErroRet <> AD_SQL_SEM_DADOS Then gError 188613

    FluxoAnalitico_Le_PC = SUCESSO

    Exit Function

Erro_FluxoAnalitico_Le_PC:

    FluxoAnalitico_Le_PC = gErr

    Select Case gErr

        Case 188610, 188613

        Case 188611, 188612
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FLUXOPC", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 188614)

    End Select

    Exit Function

End Function

Function Acompanha_Fluxo(ByVal objFluxo As ClassFluxo) As Long
'chama a tela de acompanhamento de fluxo se necessario
'IMPORTANTE: TEM QUE SER CHAMADA DENTRO DE TRANSACAO

Dim lErro As Long
Dim objTela As Object
Dim lTotalPC As Long
Dim lTotalPV As Long
Dim alComando(1 To 2) As Long
Dim iIndice As Integer

On Error GoTo Erro_Acompanha_Fluxo

    If gobjTES.iFluxoIncluiPedidos = FLUXO_INCLUI_PEDIDOS Then

        'Abertura de Comando
        For iIndice = LBound(alComando) To UBound(alComando)
            alComando(iIndice) = Comando_Abrir()
            If alComando(iIndice) = 0 Then gError 188618
        Next

        Call Chama_Tela("AcompanhamentoFluxo", objFluxo)
        
        
        If objFluxo.iFilialEmpresa = EMPRESA_TODA Then
        
            lErro = Comando_Executar(alComando(1), "SELECT Count(*) FROM PedidoCompra ", lTotalPC)
            If lErro <> AD_SQL_SUCESSO Then gError 188619
    
        Else
        
            lErro = Comando_Executar(alComando(1), "SELECT Count(*) FROM PedidoCompra WHERE FilialEmpresa = ?", lTotalPC, objFluxo.iFilialEmpresa)
            If lErro <> AD_SQL_SUCESSO Then gError 188620
        
        End If
        
        
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 188621


        'seleciona os contratos/itens de contrato dentro do prazo do fluxo
        If objFluxo.iFilialEmpresa = EMPRESA_TODA Then
        
            lErro = Comando_Executar(alComando(2), "SELECT Count(*) FROM PedidosDeVenda ", lTotalPV)
            If lErro <> AD_SQL_SUCESSO Then gError 188622
    
        Else
        
            lErro = Comando_Executar(alComando(2), "SELECT Count(*) FROM PedidosDeVenda WHERE FilialEmpresa = ?", lTotalPV, objFluxo.iFilialEmpresa)
            If lErro <> AD_SQL_SUCESSO Then gError 188623
    
        End If

        lErro = Comando_BuscarPrimeiro(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 188624

        

        If lTotalPV + lTotalPC > 0 Then objFluxo.objTela.objProgressBar.Max = lTotalPV + lTotalPC
        objFluxo.objTela.objProgressBar.Min = 0
        objFluxo.objTela.objProgressBar.Value = 0

        For iIndice = LBound(alComando) To UBound(alComando)
            Call Comando_Fechar(alComando(iIndice))
        Next

    End If

    Acompanha_Fluxo = SUCESSO

    Exit Function

Erro_Acompanha_Fluxo:

    Acompanha_Fluxo = gErr

    Select Case gErr

        Case 188618
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 188619 To 188621
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PEDIDOCOMPRA", gErr)

        Case 188622 To 188624
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PEDIDODEVENDA", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 188625)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function Preenche_Boleto_HSBC(ByVal objCCI As ClassContasCorrentesInternas, ByVal objParcelaReceber As ClassParcelaReceber, sCampoLivre As String, ByVal objCarteiraCobrador As ClassCarteiraCobrador, ByVal bSemValorVcto As Boolean) As Long
'Preenche o Campo Livre para compor o Código de Barras e a Linha Digitável de um Boleto Bancário
'Esta função devolve o Campo Livre específico para o Banco BB - Jorge Specian - 09/03/2005

Dim lErro As Long
Dim sNossoNumero As String
Dim sAgencia As String
Dim sDVNossoNumero As String
Dim iTamanho_NossoNumero As Integer
Dim iTamanho_Agencia As Integer
Dim sConta As String
Dim iTamanho_Conta As Integer
Dim dtDataBase As Date
Dim iFator As Integer, sCodCedente As String

On Error GoTo Erro_Preenche_Boleto_HSBC

    'Inicializa variáveis com tamanho dos campos
    iTamanho_NossoNumero = 10 'sem o DV
    iTamanho_Agencia = 4
    iTamanho_Conta = 6

    'Valida e formata valores do Campo Livre
    
    If Not IsNumeric(Trim(objParcelaReceber.sNumTitCobrador)) Or Len(Trim(objParcelaReceber.sNumTitCobrador)) > iTamanho_NossoNumero Then gError 184253
    sNossoNumero = Format(left(Trim(objParcelaReceber.sNumTitCobrador), iTamanho_NossoNumero), "0000000000")
    
    If Not IsNumeric(Trim(objCCI.sAgencia)) Or Len(Trim(objCCI.sAgencia)) > iTamanho_Agencia Then gError 184254
    sAgencia = Format(left(Trim(objCCI.sAgencia), iTamanho_Agencia), "0000")
    
    If Not IsNumeric(Trim(objCCI.sNumConta)) Or Len(Trim(objCCI.sNumConta)) > iTamanho_Conta Then gError 184255
    sConta = Format(left(Trim(objCCI.sNumConta), iTamanho_Conta), "000000")
    
    'para cobranca REGISTRADA
    If objCarteiraCobrador.iComRegistro <> 0 Then
    
        lErro = Calcula_DV11(sNossoNumero, 7, sDVNossoNumero)
        If lErro <> SUCESSO Then gError 184256
        
        'Concatena a sequencia
        sCampoLivre = sNossoNumero & sDVNossoNumero & sAgencia & sConta & FormataCpoNum(objCCI.sDVNumConta, 1) & "001"

    Else 'para cobrança NAO REGISTRADA
            
        'codigo cedente
        lErro = CF("CarteiraCobradorInfo_ObtemValor", objCarteiraCobrador.iCobrador, objCarteiraCobrador.iCodCarteiraCobranca, 7, sCodCedente)
        If lErro <> SUCESSO Then gError 130411
        
        'Database para calculo do fator
        dtDataBase = CDate("31/12/" & CStr(Year(objParcelaReceber.dtDataVencimento) - 1))
        iFator = DateDiff("d", dtDataBase, objParcelaReceber.dtDataVencimento)
        
        'Concatena a sequencia
        sCampoLivre = sCodCedente & "000" & sNossoNumero & FormataCpoNum(iFator, 3) & right(CStr(Year(objParcelaReceber.dtDataVencimento)), 1) & "2"
        
    End If
    
    Preenche_Boleto_HSBC = SUCESSO

    Exit Function

Erro_Preenche_Boleto_HSBC:

    Preenche_Boleto_HSBC = gErr
    
    Select Case gErr
        
        Case 184256, 130411
        
        Case 184253
            Call Rotina_Erro(vbOKOnly, "ERRO_NOSSONUMERO_NAO_NUMERICO", gErr, iTamanho_NossoNumero)
        
        Case 184254
            Call Rotina_Erro(vbOKOnly, "ERRO_AGENCIA_NAO_NUMERICO", gErr, iTamanho_Agencia)
        
        Case 184255
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTA_NAO_NUMERICO", gErr, iTamanho_Conta)
                
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 184252)
    
    End Select
    
    Exit Function

End Function

Private Function NossoNumero_ObtemDV_HSBC(ByVal objCCI As ClassContasCorrentesInternas, ByVal sNossoNumero As String, ByVal iNumCarteiraCobrador As Integer, ByVal sCampoLivre As String, ByVal objParcelaReceber As ClassParcelaReceber, sDVNossoNumero As String) As Long

Dim lErro As Long, sSequencia As String, dVal1 As Double, dVal2 As Double, dVal3 As Double
Dim sDVNossoNumero1 As String, sDVNossoNumero2 As String

On Error GoTo Erro_NossoNumero_ObtemDV_HSBC

    'se for cobrança REGISTRADA
    If right(sCampoLivre, 1) = "1" Then
    
        sSequencia = FormataCpoNum(right(sNossoNumero, 10), 10)
        lErro = Calcula_DV11(sSequencia, 7, sDVNossoNumero)
        If lErro <> SUCESSO Then gError 184250
    
    Else     'se for cobrança NAO REGISTRADA

        sSequencia = FormataCpoNum(right(sNossoNumero, 10), 10)
        lErro = Calcula_DV11_HSBC_NaoReg(sSequencia, 9, sDVNossoNumero1)
        If lErro <> SUCESSO Then gError 184250
    
        dVal1 = StrParaDbl(sNossoNumero & sDVNossoNumero1 & "4")
        dVal2 = StrParaDbl(Mid(sCampoLivre, 1, 7)) 'codigo do cedente
        dVal3 = StrParaDbl(Format(objParcelaReceber.dtDataVencimento, "ddmmyy"))
    
        sSequencia = FormataCpoNum(dVal1 + dVal2 + dVal3, 11)
        lErro = Calcula_DV11_HSBC_NaoReg(sSequencia, 9, sDVNossoNumero2)
        If lErro <> SUCESSO Then gError 184250
    
        sDVNossoNumero = sDVNossoNumero1 & "4" & sDVNossoNumero2
        
    End If
        
    NossoNumero_ObtemDV_HSBC = SUCESSO
     
    Exit Function
    
Erro_NossoNumero_ObtemDV_HSBC:

    NossoNumero_ObtemDV_HSBC = gErr
     
    Select Case gErr
          
        Case 184250
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 184251)
     
    End Select
     
    Exit Function

End Function

Public Function RelFluxoCaixa_Prepara(ByVal objFluxo As ClassFluxo, lNumIntRel As Long) As Long
'Insere registros na tabela RelCliSaldo com os saldos anteriores dos clientes que serao necessarios p/execucao de relatorio

Dim lErro As Long
Dim lTransacao As Long
Dim alComando(1 To 4) As Long
Dim iIndice As Integer
Dim tRelFluxo As typeRelFluxoCaixa
Dim iDiasRetencao As Integer
Dim iCancel As Integer


On Error GoTo Erro_RelFluxoCaixa_Prepara

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 188726
    Next

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 188727

    'obtem numintrel
    lErro = CF("Config_ObterNumInt", "CPRConfig", "NUM_PROX_REL_FLUXOCX", tRelFluxo.lNumIntRel)
    If lErro <> SUCESSO Then gError 188728
    
    If objFluxo.dtDataFinal = DATA_NULA Then
    
        objFluxo.dtDataFinal = DateAdd("yyyy", 1, objFluxo.dtDataBase)
    
    End If
    
    'seleciona as Notas Fiscais a Receber
    If objFluxo.iFilialEmpresa = EMPRESA_TODA Then

        'Pesquisa as Notas Fiscais a Receber com vencimento no periodo em questão no ambito empresa
        lErro = Comando_Executar(alComando(1), "SELECT DataVencimento, SUM(ValorTotal) FROM NFiscal, TiposDocInfo WHERE Status = ? AND DataVencimento >= ? AND DataVencimento <= ? AND NFiscal.TipoNFiscal = TiposDocInfo.Codigo AND TiposDocInfo.Faturavel = 1 AND NumIntDocCPR = 0 GROUP BY DataVencimento ", _
        tRelFluxo.dtData, tRelFluxo.dEntrada, STATUS_LANCADO, objFluxo.dtDataBase, objFluxo.dtDataFinal + 7)
        If lErro <> AD_SQL_SUCESSO Then gError 188729

    Else

        'Pesquisa as Notas Fiscais a Receber com vencimento no periodo em questão no ambito empresa
        lErro = Comando_Executar(alComando(1), "SELECT DataVencimento, SUM(ValorTotal) FROM NFiscal, TiposDocInfo WHERE FilialEmpresa = ? AND Status = ? AND DataVencimento >= ? AND DataVencimento <= ? AND NFiscal.TipoNFiscal = TiposDocInfo.Codigo AND TiposDocInfo.Faturavel = 1 AND NumIntDocCPR = 0 GROUP BY DataVencimento ", _
        tRelFluxo.dtData, tRelFluxo.dEntrada, objFluxo.iFilialEmpresa, STATUS_LANCADO, objFluxo.dtDataBase, objFluxo.dtDataFinal + 7)
        If lErro <> AD_SQL_SUCESSO Then gError 188730

    End If
    
    lErro = Fluxo_Comando_BuscarProximo(alComando(1), tRelFluxo.dtData, objFluxo, 0)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 188731

    Do While lErro = AD_SQL_SUCESSO
    
        lErro = RelFluxoCaixa_Grava(tRelFluxo)
        If lErro <> SUCESSO Then gError 188732
        
        lErro = Fluxo_Comando_BuscarProximo(alComando(1), tRelFluxo.dtData, objFluxo, 0)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 188733
        
    Loop
    
    tRelFluxo.dtData = DATA_NULA
    tRelFluxo.dEntrada = 0
    tRelFluxo.dSaida = 0
    
    If objFluxo.iFilialEmpresa = EMPRESA_TODA Then

        'Pesquisa todas as parcelas a receber com vencimento no periodo em questão, com saldo, nao descontada, aberto no ambito empresa
        lErro = Comando_Executar(alComando(2), "SELECT DataVencimento, ParcelasRec.Saldo, CarteirasCobrador.DiasDeRetencao FROM ParcelasRec, CarteirasCobrador WHERE ParcelasRec.CarteiraCobranca <> ? AND ParcelasRec.Status = ? AND ParcelasRec.DataVencimento >=? AND ParcelasRec.DataVencimento <= ? AND ParcelasRec.Saldo > 0 AND ParcelasRec.Cobrador = CarteirasCobrador.Cobrador AND ParcelasRec.CarteiraCobranca = CarteirasCobrador.CodCarteiraCobranca ", _
            tRelFluxo.dtData, tRelFluxo.dEntrada, iDiasRetencao, CARTEIRA_DESCONTADA, STATUS_ABERTO, objFluxo.dtDataBase, objFluxo.dtDataFinal + 10)
        If lErro <> AD_SQL_SUCESSO Then gError 188734

    Else

        'Pesquisa todas as parcelas a receber com vencimento no periodo em questão, com saldo, nao descontada, aberto no ambito empresa
        lErro = Comando_Executar(alComando(2), "SELECT DataVencimento, ParcelasRec.Saldo, CarteirasCobrador.DiasDeRetencao FROM ParcelasRec, TitulosRec, CarteirasCobrador WHERE FilialEmpresa = ? AND ParcelasRec.CarteiraCobranca <> ? AND ParcelasRec.Status = ? AND ParcelasRec.DataVencimento >=? AND ParcelasRec.DataVencimento <= ? AND ParcelasRec.Saldo > 0 AND ParcelasRec.NumIntTitulo = TitulosRec.NumIntDoc AND ParcelasRec.Cobrador = CarteirasCobrador.Cobrador AND ParcelasRec.CarteiraCobranca = CarteirasCobrador.CodCarteiraCobranca ", _
            tRelFluxo.dtData, tRelFluxo.dEntrada, iDiasRetencao, objFluxo.iFilialEmpresa, CARTEIRA_DESCONTADA, STATUS_ABERTO, objFluxo.dtDataBase, objFluxo.dtDataFinal + 10)
        If lErro <> AD_SQL_SUCESSO Then gError 188735

    End If
    
    lErro = Fluxo_Comando_BuscarProximo(alComando(2), tRelFluxo.dtData, objFluxo, iDiasRetencao)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 188736
    
    Do While lErro = AD_SQL_SUCESSO
    
        lErro = RelFluxoCaixa_Grava(tRelFluxo)
        If lErro <> SUCESSO Then gError 188737
        
        lErro = Fluxo_Comando_BuscarProximo(alComando(2), tRelFluxo.dtData, objFluxo, iDiasRetencao)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 188738
        
    Loop
    
    tRelFluxo.dtData = DATA_NULA
    tRelFluxo.dEntrada = 0
    tRelFluxo.dSaida = 0
    
    'seleciona as notas fiscais a pagar
    If objFluxo.iFilialEmpresa = EMPRESA_TODA Then
    
        'Pesquisa as Notas Fiscais a Pagar com vencimento no periodo em questão no ambito empresa
        lErro = Comando_Executar(alComando(3), "SELECT DataVencimento, SUM(ValorTotal) FROM NFsPag WHERE Status = ? AND DataVencimento >= ? AND DataVencimento <= ? AND NumIntTitPag = 0 GROUP BY DataVencimento", tRelFluxo.dtData, tRelFluxo.dSaida, STATUS_LANCADO, objFluxo.dtDataBase, objFluxo.dtDataFinal + 7)
        If lErro <> AD_SQL_SUCESSO Then gError 188739
    
    Else
    
        'Pesquisa as Notas Fiscais a Pagar com vencimento no periodo em questão no ambito empresa
        lErro = Comando_Executar(alComando(3), "SELECT DataVencimento, SUM(ValorTotal) FROM NFsPag WHERE FilialEmpresa = ? AND Status = ? AND DataVencimento >= ? AND DataVencimento <= ? AND NumIntTitPag = 0 GROUP BY DataVencimento", tRelFluxo.dtData, tRelFluxo.dSaida, objFluxo.iFilialEmpresa, STATUS_LANCADO, objFluxo.dtDataBase, objFluxo.dtDataFinal + 7)
        If lErro <> AD_SQL_SUCESSO Then gError 188740
    
    End If

    lErro = Fluxo_Comando_BuscarProximo(alComando(3), tRelFluxo.dtData, objFluxo, 0)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 188741
    
    Do While lErro = AD_SQL_SUCESSO
    
        lErro = RelFluxoCaixa_Grava(tRelFluxo)
        If lErro <> SUCESSO Then gError 188742
        
        lErro = Fluxo_Comando_BuscarProximo(alComando(3), tRelFluxo.dtData, objFluxo, 0)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 188743
        
    Loop

    tRelFluxo.dtData = DATA_NULA
    tRelFluxo.dEntrada = 0
    tRelFluxo.dSaida = 0

    'seleciona as parcelas a pagar
    If objFluxo.iFilialEmpresa = EMPRESA_TODA Then

        'Pesquisa todas as parcelas a pagar com vencimento no periodo em questão, com saldo, aberto no ambito empresa

        lErro = Comando_Executar(alComando(4), "SELECT DataVencimento, SUM(ParcelasPag.Saldo) FROM ParcelasPag WHERE ParcelasPag.Status = ? AND ParcelasPag.DataVencimento >=? AND ParcelasPag.DataVencimento <= ? AND ParcelasPag.Saldo > 0 GROUP BY DataVencimento", _
        tRelFluxo.dtData, tRelFluxo.dSaida, STATUS_ABERTO, objFluxo.dtDataBase, objFluxo.dtDataFinal + 7)
        If lErro <> AD_SQL_SUCESSO Then gError 188744

    Else

        lErro = Comando_Executar(alComando(4), "SELECT DataVencimento, SUM(ParcelasPag.Saldo) FROM TitulosPag, ParcelasPag WHERE FilialEmpresa = ? AND ParcelasPag.Status = ? AND ParcelasPag.DataVencimento >=? AND ParcelasPag.DataVencimento <= ? AND ParcelasPag.Saldo > 0 AND ParcelasPag.NumIntTitulo = TitulosPag.NumIntDoc GROUP BY DataVencimento", _
        tRelFluxo.dtData, tRelFluxo.dSaida, objFluxo.iFilialEmpresa, STATUS_ABERTO, objFluxo.dtDataBase, objFluxo.dtDataFinal + 7)
        If lErro <> AD_SQL_SUCESSO Then gError 188745

    End If

    lErro = Fluxo_Comando_BuscarProximo(alComando(4), tRelFluxo.dtData, objFluxo, 0)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 188746
    
    Do While lErro = AD_SQL_SUCESSO
    
        lErro = RelFluxoCaixa_Grava(tRelFluxo)
        If lErro <> SUCESSO Then gError 188747
        
        lErro = Fluxo_Comando_BuscarProximo(alComando(4), tRelFluxo.dtData, objFluxo, 0)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 188748
        
    Loop
    
    tRelFluxo.dtData = DATA_NULA
    tRelFluxo.dEntrada = 0
    tRelFluxo.dSaida = 0
    
    lErro = RelFluxoCaixa_ContratoRec(objFluxo, tRelFluxo.lNumIntRel)
    If lErro <> SUCESSO Then gError 188749
    
    lErro = RelFluxoCaixa_ContratoPag(objFluxo, tRelFluxo.lNumIntRel)
    If lErro <> SUCESSO Then gError 188750
    
    lErro = Acompanha_Fluxo(objFluxo)
    If lErro <> SUCESSO Then gError 188751

    lErro = RelFluxoCaixa_PedCompra(objFluxo, tRelFluxo.lNumIntRel)
    If lErro <> SUCESSO Then gError 188752
    
    lErro = RelFluxoCaixa_PedVenda(objFluxo, tRelFluxo.lNumIntRel)
    If lErro <> SUCESSO Then gError 188753
    
    If Not objFluxo.objTela Is Nothing Then objFluxo.objTela.Form_Unload (iCancel)
    
    lErro = RelFluxoCaixa_SaldosIniciais(objFluxo, tRelFluxo.lNumIntRel)
    If lErro <> SUCESSO Then gError 188754
    
    lErro = RelFluxoCaixa_Resgates(objFluxo, tRelFluxo.lNumIntRel)
    If lErro <> SUCESSO Then gError 188755
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 188756
    
    For iIndice = LBound(alComando) To UBound(alComando)
         Call Comando_Fechar(alComando(iIndice))
    Next
   
    lNumIntRel = tRelFluxo.lNumIntRel
   
    RelFluxoCaixa_Prepara = SUCESSO
     
    Exit Function
    
Erro_RelFluxoCaixa_Prepara:

    RelFluxoCaixa_Prepara = gErr
     
    If Not objFluxo.objTela Is Nothing Then objFluxo.objTela.Form_Unload (iCancel)
     
    Select Case gErr
          
        Case 188726
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
 
        Case 188727
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 188728, 188731 To 188733, 188736 To 188738, 188741 To 188743, 188746 To 188755

        Case 188729, 188730
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NOTAS_FISCAIS_REC", gErr)

        Case 188734, 188735
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_REC1", gErr)

        Case 188739, 188740
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_NFSPAG", gErr)

        Case 188744, 188745
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_PAG1", gErr)

        Case 188756
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 188757)
     
    End Select
     
    Call Transacao_Rollback
    
    For iIndice = LBound(alComando) To UBound(alComando)
         Call Comando_Fechar(alComando(iIndice))
    Next
   
    Exit Function

End Function


Private Function RelFluxoCaixa_Grava(tRelFluxo As typeRelFluxoCaixa) As Long

Dim lErro As Long
Dim alComando(1 To 3) As Long
Dim iIndice As Integer
Dim lNumIntRel As Long

On Error GoTo Erro_RelFluxoCaixa_Grava

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 188640
    Next

    lErro = Comando_ExecutarPos(alComando(1), "SELECT NumIntRel FROM RelFluxoCaixa WHERE NumIntRel = ? AND Data = ?", 0, _
        lNumIntRel, tRelFluxo.lNumIntRel, tRelFluxo.dtData)
    If lErro <> AD_SQL_SUCESSO Then gError 188641
        
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 188642
    
    If lErro = AD_SQL_SUCESSO Then
    
            'insere registro em RelCliSaldo
            lErro = Comando_ExecutarPos(alComando(2), "UPDATE RelFluxoCaixa SET Entrada = Entrada + ?, Saida = Saida + ?", alComando(1), tRelFluxo.dEntrada, tRelFluxo.dSaida)
            If lErro <> AD_SQL_SUCESSO Then gError 188643
            
    Else
    
            'insere registro em RelCliSaldo
            lErro = Comando_Executar(alComando(3), "INSERT INTO RelFluxoCaixa ( NumIntRel, Data, SaldoInicial, Entrada, Saida ) VALUES (?,?,?,?,?)", tRelFluxo.lNumIntRel, tRelFluxo.dtData, tRelFluxo.dSaldoInicial, tRelFluxo.dEntrada, tRelFluxo.dSaida)
            If lErro <> AD_SQL_SUCESSO Then gError 188644
    
    End If

    For iIndice = LBound(alComando) To UBound(alComando)
         Call Comando_Fechar(alComando(iIndice))
    Next
   
    RelFluxoCaixa_Grava = SUCESSO
     
    Exit Function
    
Erro_RelFluxoCaixa_Grava:

    RelFluxoCaixa_Grava = gErr
     
    Select Case gErr
          
        Case 188640
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
 
        Case 188641, 188642
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RELFLUXOCAIXA", gErr)
        
        Case 188643
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_RELFLUXOCAIXA", gErr)
        
        Case 188644
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_RELFLUXOCAIXA", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 188645)
     
    End Select
     
    For iIndice = LBound(alComando) To UBound(alComando)
         Call Comando_Fechar(alComando(iIndice))
    Next

End Function

Private Function RelFluxoCaixa_ContratoRec(ByVal objFluxo As ClassFluxo, ByVal lNumIntRel As Long) As Long

Dim lErro As Long
Dim lTransacao As Long, alComando(1 To 2) As Long, iIndice As Integer
Dim tRelFluxo As typeRelFluxoCaixa
Dim tFluxoAux1 As typeFluxoAux
Dim iNovaParcela As Integer
Dim dtRefFim As Date
Dim dtDataProxCobranca As Date
Dim dtDataVenctoReal As Date
Dim iItem As Integer
Dim objParcela As ClassCondicaoPagtoParc
Dim dValor As Double
Dim lNumIntNF As Long
Dim dQuantidade As Double
Dim dPrecoUnitario As Double
Dim dValorDesconto As Double

On Error GoTo Erro_RelFluxoCaixa_ContratoRec

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 188646
    Next

    tRelFluxo.lNumIntRel = lNumIntRel

    'seleciona os contratos/itens de contrato dentro do prazo do fluxo
    If objFluxo.iFilialEmpresa = EMPRESA_TODA Then

        'Pesquisa todas as parcelas a receber com vencimento no periodo em questão, com saldo, nao descontada, aberto no ambito empresa
        lErro = Comando_Executar(alComando(1), "SELECT Contratos.DataIniContrato, Contratos.DataFimContrato, ItensDeContrato.DataIniCobranca, ItensDeContrato.Periodicidade, ItensDeContrato.CondPagto, ItensDeContrato.Quantidade, ItensDeContrato.Valor FROM Contratos, ItensDeContrato WHERE Contratos.Ativo  = ? AND Contratos.DataIniContrato <=? AND (Contratos.DataFimContrato >= ? OR Contratos.DataFimContrato = ?) AND Contratos.NumIntDoc = ItensDeContrato.NumIntContrato AND Contratos.Tipo = ?", _
            tFluxoAux1.tContrato.dtDataIniContrato, tFluxoAux1.tContrato.dtDataFimContrato, tFluxoAux1.tItemContrato.dtDataIniCobranca, tFluxoAux1.tItemContrato.iPeriodicidade, tFluxoAux1.tItemContrato.iCondPagto, tFluxoAux1.tItemContrato.dQuantidade, tFluxoAux1.tItemContrato.dValor, CONTRATO_ATIVO, objFluxo.dtDataFinal + 10, objFluxo.dtDataBase, DATA_NULA, CONTRATOS_RECEBER)
        If lErro <> AD_SQL_SUCESSO Then gError 188647
    
    Else

        lErro = Comando_Executar(alComando(1), "SELECT Contratos.DataIniContrato, Contratos.DataFimContrato, ItensDeContrato.DataIniCobranca, ItensDeContrato.Periodicidade, ItensDeContrato.CondPagto, ItensDeContrato.Quantidade, ItensDeContrato.Valor FROM Contratos, ItensDeContrato WHERE FilialEmpresa = ? AND Contratos.Ativo  = ? AND Contratos.DataIniContrato <=? AND (Contratos.DataFimContrato >= ? OR Contratos.DataFimContrato = ?) AND Contratos.NumIntDoc = ItensDeContrato.NumIntContrato AND Contratos.Tipo = ?", _
            tFluxoAux1.tContrato.dtDataIniContrato, tFluxoAux1.tContrato.dtDataFimContrato, tFluxoAux1.tItemContrato.dtDataIniCobranca, tFluxoAux1.tItemContrato.iPeriodicidade, tFluxoAux1.tItemContrato.iCondPagto, tFluxoAux1.tItemContrato.dQuantidade, tFluxoAux1.tItemContrato.dValor, objFluxo.iFilialEmpresa, CONTRATO_ATIVO, objFluxo.dtDataFinal + 10, objFluxo.dtDataBase, DATA_NULA, CONTRATOS_RECEBER)
        If lErro <> AD_SQL_SUCESSO Then gError 188648

    End If
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 188649

    Do While lErro = AD_SQL_SUCESSO

        iNovaParcela = 0

        tFluxoAux1.tItemContrato.dtDataProxCobranca = tFluxoAux1.tItemContrato.dtDataIniCobranca
    
        Do While tFluxoAux1.tItemContrato.dtDataProxCobranca < objFluxo.dtDataBase And tFluxoAux1.tItemContrato.iPeriodicidade <> PERIODICIDADE_LIVRE And tFluxoAux1.tItemContrato.iPeriodicidade <> 0
    
            lErro = CF("Contrato_ProxCobranca", tFluxoAux1.tItemContrato.iPeriodicidade, tFluxoAux1.tItemContrato.dtDataProxCobranca, tFluxoAux1.tItemContrato.dtDataProxCobranca, tFluxoAux1.tItemContrato.dtDataProxCobranca, dtRefFim)
            If lErro <> SUCESSO Then gError 188650
    
        Loop

        If tFluxoAux1.tContrato.dtDataFimContrato <> DATA_NULA Then

            If tFluxoAux1.tItemContrato.dtDataProxCobranca <= tFluxoAux1.tContrato.dtDataFimContrato And tFluxoAux1.tItemContrato.dtDataProxCobranca <= objFluxo.dtDataFinal And tFluxoAux1.tItemContrato.dtDataProxCobranca >= objFluxo.dtDataBase Then
                iNovaParcela = 1
            End If

        Else

            If tFluxoAux1.tItemContrato.dtDataProxCobranca <= objFluxo.dtDataFinal And tFluxoAux1.tItemContrato.dtDataProxCobranca >= objFluxo.dtDataBase Then
                iNovaParcela = 1
            End If

        End If

        Do While iNovaParcela = 1

            iNovaParcela = 0

            'seleciona as notas fiscais que estao relacionadas ao item de contrato em questao
            lErro = Comando_Executar(alComando(2), "SELECT INF.NumIntNF, INF.Quantidade, INF.PrecoUnitario, INF.ValorDesconto, INF.Item FROM ItensDeContratoCobranca AS ICC, ItensNFiscal AS INF WHERE ICC.NumIntItensContrato = ? AND ICC.DataUltCobranca = ? AND ICC.NumIntItemNFiscal = INF.NumIntDoc ", _
            lNumIntNF, dQuantidade, dPrecoUnitario, dValorDesconto, iItem, tFluxoAux1.tItemContrato.lNumIntDoc, tFluxoAux1.tItemContrato.dtDataProxCobranca)
            If lErro <> AD_SQL_SUCESSO Then gError 188651
    
            lErro = Comando_BuscarPrimeiro(alComando(2))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 188652
    
            dValor = 0
    
            Do While lErro = AD_SQL_SUCESSO
            
                dValor = dValor + (dPrecoUnitario * dQuantidade) - dValorDesconto
            
                lErro = Comando_BuscarProximo(alComando(2))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 188653
            
            Loop
        
            If (tFluxoAux1.tItemContrato.dQuantidade * tFluxoAux1.tItemContrato.dValor) - dValor > DELTA_VALORMONETARIO Then
            
            
                tFluxoAux1.tItemContrato.objCondPagto.iCodigo = tFluxoAux1.tItemContrato.iCondPagto
                tFluxoAux1.tItemContrato.iParcela = 1
                tFluxoAux1.tItemContrato.objCondPagto.dValorTotal = tFluxoAux1.tItemContrato.dQuantidade * tFluxoAux1.tItemContrato.dValor
                tFluxoAux1.tItemContrato.objCondPagto.dtDataRef = tFluxoAux1.tItemContrato.dtDataProxCobranca
    
                lErro = CF("CondicaoPagto_Le", tFluxoAux1.tItemContrato.objCondPagto)
                If lErro <> SUCESSO And lErro <> 19205 Then gError 188654
                
                If lErro <> SUCESSO Then gError 188655
    
                'Calcula Datas de Vencimento das Parcelas
                lErro = CF("CondicaoPagto_CalculaParcelas", tFluxoAux1.tItemContrato.objCondPagto)
                If lErro <> SUCESSO Then gError 188656
    
                For Each objParcela In tFluxoAux1.tItemContrato.objCondPagto.colParcelas
    
                    lErro = CF("DataVencto_Real", objParcela.dtVencimento, dtDataVenctoReal)
                    If lErro <> SUCESSO Then gError 188657
                    
                    If dValor <= objParcela.dValor Then
                        objParcela.dValor = objParcela.dValor - dValor
                        dValor = 0
                    Else
                        dValor = dValor - objParcela.dValor
                        objParcela.dValor = 0
                    End If
                    
                    If dtDataVenctoReal >= objFluxo.dtDataBase And dtDataVenctoReal <= objFluxo.dtDataFinal And objParcela.dValor > DELTA_VALORMONETARIO Then
                    
                        tRelFluxo.dtData = dtDataVenctoReal
                        tRelFluxo.dEntrada = objParcela.dValor
                    
                        lErro = RelFluxoCaixa_Grava(tRelFluxo)
                        If lErro <> SUCESSO Then gError 188658
                    
                    End If
    
                Next
    
            End If

            dtDataProxCobranca = tFluxoAux1.tItemContrato.dtDataProxCobranca

            lErro = CF("Contrato_ProxCobranca", tFluxoAux1.tItemContrato.iPeriodicidade, tFluxoAux1.tItemContrato.dtDataProxCobranca, tFluxoAux1.tItemContrato.dtDataProxCobranca, tFluxoAux1.tItemContrato.dtDataProxCobranca, dtRefFim)
            If lErro <> SUCESSO Then gError 188659

            If dtDataProxCobranca <> tFluxoAux1.tItemContrato.dtDataProxCobranca Then
            
                If tFluxoAux1.tContrato.dtDataFimContrato <> DATA_NULA Then
    
                    If tFluxoAux1.tItemContrato.dtDataProxCobranca <= tFluxoAux1.tContrato.dtDataFimContrato And tFluxoAux1.tItemContrato.dtDataProxCobranca <= objFluxo.dtDataFinal Then
                        iNovaParcela = 1
                    End If
                    
                Else
                
                    If tFluxoAux1.tItemContrato.dtDataProxCobranca <= objFluxo.dtDataFinal Then
                        iNovaParcela = 1
                    End If
                
                End If

            End If
        Loop

        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 188660

    Loop

    For iIndice = LBound(alComando) To UBound(alComando)
         Call Comando_Fechar(alComando(iIndice))
    Next

    RelFluxoCaixa_ContratoRec = SUCESSO
    
    Exit Function
    
Erro_RelFluxoCaixa_ContratoRec:

    RelFluxoCaixa_ContratoRec = gErr
     
    Select Case gErr
          
        Case 188646
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
 
        Case 188647, 188648, 188649, 188660
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSDECONTRATO", gErr)

        Case 188650, 188654, 188656 To 188659

        Case 188651 To 188653
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITEMCONTRATOCOBRANCA1", gErr, tFluxoAux1.tItemContrato.lNumIntDoc, tFluxoAux1.tItemContrato.dtDataProxCobranca)

        Case 188655
            Call Rotina_Erro(vbOKOnly, "ERRO_CONDICAO_PAGTO_NAO_CADASTRADA", gErr, tFluxoAux1.tItemContrato.objCondPagto.iCodigo)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 188661)
            
    End Select
     
    For iIndice = LBound(alComando) To UBound(alComando)
         Call Comando_Fechar(alComando(iIndice))
    Next

End Function
    
Private Function RelFluxoCaixa_ContratoPag(ByVal objFluxo As ClassFluxo, ByVal lNumIntRel As Long) As Long

Dim tRelFluxo As typeRelFluxoCaixa
Dim dtRefFim As Date, lErro As Long
Dim dtDataProxCobranca As Date
Dim dtDataVenctoReal As Date
Dim iIndice As Integer
Dim lNumIntNF As Long
Dim dQuantidade As Double
Dim dPrecoUnitario As Double
Dim dValorDesconto As Double
Dim iItem As Integer
Dim objParcela As ClassCondicaoPagtoParc
Dim tFluxoAux1 As typeFluxoAux
Dim alComando(1 To 2) As Long
Dim iNovaParcela As Integer
Dim dValor As Double

On Error GoTo Erro_RelFluxoCaixa_ContratoPag

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 188674
    Next

    tRelFluxo.lNumIntRel = lNumIntRel

    'seleciona os contratos/itens de contrato dentro do prazo do fluxo
    If objFluxo.iFilialEmpresa = EMPRESA_TODA Then

        'Pesquisa todas as parcelas a receber com vencimento no periodo em questão, com saldo, nao descontada, aberto no ambito empresa
        lErro = Comando_Executar(alComando(1), "SELECT Contratos.DataIniContrato, Contratos.DataFimContrato, ItensDeContrato.DataIniCobranca, ItensDeContrato.Periodicidade, ItensDeContrato.CondPagto, ItensDeContrato.Quantidade, ItensDeContrato.Valor, ItensDeContrato.NumIntDoc FROM Contratos, ItensDeContrato WHERE Contratos.Ativo  = ? AND Contratos.DataIniContrato <=? AND (Contratos.DataFimContrato >= ? OR Contratos.DataFimContrato = ?) AND Contratos.NumIntDoc = ItensDeContrato.NumIntContrato AND Contratos.Tipo = ?", _
            tFluxoAux1.tContrato.dtDataIniContrato, tFluxoAux1.tContrato.dtDataFimContrato, tFluxoAux1.tItemContrato.dtDataIniCobranca, tFluxoAux1.tItemContrato.iPeriodicidade, tFluxoAux1.tItemContrato.iCondPagto, tFluxoAux1.tItemContrato.dQuantidade, tFluxoAux1.tItemContrato.dValor, tFluxoAux1.tItemContrato.lNumIntDoc, CONTRATO_ATIVO, objFluxo.dtDataFinal + 10, objFluxo.dtDataBase, DATA_NULA, CONTRATOS_PAGAR)
        If lErro <> AD_SQL_SUCESSO Then gError 188675
    
    Else

        lErro = Comando_Executar(alComando(1), "SELECT Contratos.DataIniContrato, Contratos.DataFimContrato, ItensDeContrato.DataIniCobranca, ItensDeContrato.Periodicidade, ItensDeContrato.CondPagto, ItensDeContrato.Quantidade, ItensDeContrato.Valor, ItensDeContrato.NumIntDoc FROM Contratos, ItensDeContrato WHERE FilialEmpresa = ? AND Contratos.Ativo  = ? AND Contratos.DataIniContrato <=? AND (Contratos.DataFimContrato >= ? OR Contratos.DataFimContrato = ?) AND Contratos.NumIntDoc = ItensDeContrato.NumIntContrato AND Contratos.Tipo = ?", _
            tFluxoAux1.tContrato.dtDataIniContrato, tFluxoAux1.tContrato.dtDataFimContrato, tFluxoAux1.tItemContrato.dtDataIniCobranca, tFluxoAux1.tItemContrato.iPeriodicidade, tFluxoAux1.tItemContrato.iCondPagto, tFluxoAux1.tItemContrato.dQuantidade, tFluxoAux1.tItemContrato.dValor, tFluxoAux1.tItemContrato.lNumIntDoc, objFluxo.iFilialEmpresa, CONTRATO_ATIVO, objFluxo.dtDataFinal + 10, objFluxo.dtDataBase, DATA_NULA, CONTRATOS_PAGAR)
        If lErro <> AD_SQL_SUCESSO Then gError 188676

    End If
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 188677

    Do While lErro = AD_SQL_SUCESSO

        iNovaParcela = 0

        tFluxoAux1.tItemContrato.dtDataProxCobranca = tFluxoAux1.tItemContrato.dtDataIniCobranca
    
        Do While tFluxoAux1.tItemContrato.dtDataProxCobranca < objFluxo.dtDataBase And tFluxoAux1.tItemContrato.iPeriodicidade <> PERIODICIDADE_LIVRE And tFluxoAux1.tItemContrato.iPeriodicidade <> 0
    
            lErro = CF("Contrato_ProxCobranca", tFluxoAux1.tItemContrato.iPeriodicidade, tFluxoAux1.tItemContrato.dtDataProxCobranca, tFluxoAux1.tItemContrato.dtDataProxCobranca, tFluxoAux1.tItemContrato.dtDataProxCobranca, dtRefFim)
            If lErro <> SUCESSO Then gError 188678
    
        Loop

        If tFluxoAux1.tContrato.dtDataFimContrato <> DATA_NULA Then

            If tFluxoAux1.tItemContrato.dtDataProxCobranca <= tFluxoAux1.tContrato.dtDataFimContrato And tFluxoAux1.tItemContrato.dtDataProxCobranca <= objFluxo.dtDataFinal And tFluxoAux1.tItemContrato.dtDataProxCobranca >= objFluxo.dtDataBase Then
                iNovaParcela = 1
            End If

        Else
            
            If tFluxoAux1.tItemContrato.dtDataProxCobranca <= objFluxo.dtDataFinal And tFluxoAux1.tItemContrato.dtDataProxCobranca >= objFluxo.dtDataBase Then
                iNovaParcela = 1
            End If
            
        End If

        Do While iNovaParcela = 1

            iNovaParcela = 0

            'seleciona as notas fiscais que estao relacionadas ao item de contrato em questao
            lErro = Comando_Executar(alComando(2), "SELECT INF.NumIntNF, INF.Quantidade, INF.PrecoUnitario, INF.ValorDesconto, INF.Item FROM ItensDeContratoCobranca AS ICC, ItensNFiscal AS INF WHERE ICC.NumIntItensContrato = ? AND ICC.DataUltCobranca = ? AND ICC.NumIntItemNFiscal = INF.NumIntDoc ", _
            lNumIntNF, dQuantidade, dPrecoUnitario, dValorDesconto, iItem, tFluxoAux1.tItemContrato.lNumIntDoc, tFluxoAux1.tItemContrato.dtDataProxCobranca)
            If lErro <> AD_SQL_SUCESSO Then gError 188679
    
            lErro = Comando_BuscarPrimeiro(alComando(2))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 188680
    
            dValor = 0
    
            Do While lErro = AD_SQL_SUCESSO
            
                dValor = dValor + (dPrecoUnitario * dQuantidade) - dValorDesconto
            
                lErro = Comando_BuscarProximo(alComando(2))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 188681
            
            Loop
        
            If (tFluxoAux1.tItemContrato.dQuantidade * tFluxoAux1.tItemContrato.dValor) - dValor > DELTA_VALORMONETARIO Then
            
                tFluxoAux1.tItemContrato.objCondPagto.iCodigo = tFluxoAux1.tItemContrato.iCondPagto
                tFluxoAux1.tItemContrato.iParcela = 1
                tFluxoAux1.tItemContrato.objCondPagto.dValorTotal = tFluxoAux1.tItemContrato.dQuantidade * tFluxoAux1.tItemContrato.dValor
                tFluxoAux1.tItemContrato.objCondPagto.dtDataRef = tFluxoAux1.tItemContrato.dtDataProxCobranca
    
                lErro = CF("CondicaoPagto_Le", tFluxoAux1.tItemContrato.objCondPagto)
                If lErro <> SUCESSO And lErro <> 19205 Then gError 188682
                
                If lErro <> SUCESSO Then gError 188683
    
                'Calcula Datas de Vencimento das Parcelas
                lErro = CF("CondicaoPagto_CalculaParcelas", tFluxoAux1.tItemContrato.objCondPagto)
                If lErro <> SUCESSO Then gError 188684
    
                For Each objParcela In tFluxoAux1.tItemContrato.objCondPagto.colParcelas
    
                    lErro = CF("DataVencto_Real", objParcela.dtVencimento, dtDataVenctoReal)
                    If lErro <> SUCESSO Then gError 188685
                    
                    If dValor <= objParcela.dValor Then
                        objParcela.dValor = objParcela.dValor - dValor
                        dValor = 0
                    Else
                        dValor = dValor - objParcela.dValor
                        objParcela.dValor = 0
                    End If
                    
                    If dtDataVenctoReal >= objFluxo.dtDataBase And dtDataVenctoReal <= objFluxo.dtDataFinal And objParcela.dValor > DELTA_VALORMONETARIO Then
                    
                        tRelFluxo.dtData = dtDataVenctoReal
                        tRelFluxo.dSaida = objParcela.dValor
                    
                        lErro = RelFluxoCaixa_Grava(tRelFluxo)
                        If lErro <> SUCESSO Then gError 188686
                    
                    End If
    
                Next
    
            End If

            dtDataProxCobranca = tFluxoAux1.tItemContrato.dtDataProxCobranca

            'retorna a data da proxima cobranca do item do contrato
            lErro = CF("Contrato_ProxCobranca", tFluxoAux1.tItemContrato.iPeriodicidade, tFluxoAux1.tItemContrato.dtDataProxCobranca, tFluxoAux1.tItemContrato.dtDataProxCobranca, tFluxoAux1.tItemContrato.dtDataProxCobranca, dtRefFim)
            If lErro <> SUCESSO Then gError 188687

            If dtDataProxCobranca <> tFluxoAux1.tItemContrato.dtDataProxCobranca Then

                If tFluxoAux1.tContrato.dtDataFimContrato <> DATA_NULA Then
    
                    'se a data estiver dentro do prazo do contrato e do prazo do fluxo
                    If tFluxoAux1.tItemContrato.dtDataProxCobranca <= tFluxoAux1.tContrato.dtDataFimContrato And tFluxoAux1.tItemContrato.dtDataProxCobranca <= objFluxo.dtDataFinal Then
                        iNovaParcela = 1
                    End If
                    
                Else
    
                    'se a data estiver dentro do prazo do contrato e do prazo do fluxo
                    If tFluxoAux1.tItemContrato.dtDataProxCobranca <= objFluxo.dtDataFinal Then
                        iNovaParcela = 1
                    End If
                    
                End If

            End If

        Loop

        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 188688

    Loop

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    RelFluxoCaixa_ContratoPag = SUCESSO

    Exit Function

Erro_RelFluxoCaixa_ContratoPag:

    RelFluxoCaixa_ContratoPag = gErr

    Select Case gErr

        Case 188674
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 188674, 188675, 188676, 188688
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSDECONTRATO", gErr)

        Case 188678, 188682, 188684 To 188687

        Case 188679 To 188681
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITEMCONTRATOCOBRANCA1", gErr, tFluxoAux1.tItemContrato.lNumIntDoc, tFluxoAux1.tItemContrato.dtDataProxCobranca)

        Case 188683
            Call Rotina_Erro(vbOKOnly, "ERRO_CONDICAO_PAGTO_NAO_CADASTRADA", gErr, tFluxoAux1.tItemContrato.objCondPagto.iCodigo)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 188689)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function
    
Private Function RelFluxoCaixa_PedVenda(ByVal objFluxo As ClassFluxo, ByVal lNumIntRel As Long) As Long
'grava os recebimentos oriundos dos pedidos de venda

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim dtRefFim As Date
Dim tPedidoVenda As typePedidoVenda
Dim objTela As Object
Dim objParcela As New ClassParcelaReceber
Dim dtDataVenctoReal As Date
Dim iIndice As Integer
Dim tRelFluxo As typeRelFluxoCaixa

On Error GoTo Erro_RelFluxoCaixa_PedVenda

    If gobjTES.iFluxoIncluiPedidos = FLUXO_INCLUI_PEDIDOS Then

        tRelFluxo.lNumIntRel = lNumIntRel

        'Abertura de Comando
        For iIndice = LBound(alComando) To UBound(alComando)
            alComando(iIndice) = Comando_Abrir()
            If alComando(iIndice) = 0 Then gError 188662
        Next
    
        'chama a tela passada como parametro criando uma nova instancia sem mostra-la
        lErro = Chama_Tela_Nova_Instancia1("NFiscalFaturaPedido", objTela)
        If lErro <> SUCESSO Then gError 188663
    
        'seleciona os contratos/itens de contrato dentro do prazo do fluxo
        If objFluxo.iFilialEmpresa = EMPRESA_TODA Then
        
            lErro = Comando_Executar(alComando(1), "SELECT Codigo, FilialEmpresa, DataRefFluxo FROM PedidosDeVenda P WHERE EXISTS ( SELECT * FROM ParcelasPedidoDeVenda PPV WHERE PPV.FilialEmpresa = P.FilialEmpresa AND PPV.PedidodeVenda = P.Codigo )", tPedidoVenda.lCodigo, tPedidoVenda.iFilialEmpresa, tPedidoVenda.dtDataRefFluxo)
            If lErro <> AD_SQL_SUCESSO Then gError 188665
    
        Else
        
            lErro = Comando_Executar(alComando(1), "SELECT Codigo, FilialEmpresa, DataRefFluxo FROM PedidosDeVenda P WHERE FilialEmpresa = ? AND EXISTS ( SELECT * FROM ParcelasPedidoDeVenda PPV WHERE PPV.FilialEmpresa = P.FilialEmpresa AND PPV.PedidodeVenda = P.Codigo )", tPedidoVenda.lCodigo, tPedidoVenda.iFilialEmpresa, tPedidoVenda.dtDataRefFluxo, objFluxo.iFilialEmpresa)
            If lErro <> AD_SQL_SUCESSO Then gError 188666
    
        End If
    
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 188667
    
    
        If objFluxo.iFilialEmpresa = EMPRESA_TODA Then
            giFilialEmpresa = tPedidoVenda.iFilialEmpresa
        End If
    
        lErro = objTela.objCT.CargaPosFormLoad
        If lErro <> SUCESSO Then gError 188664
    
        Do While lErro = AD_SQL_SUCESSO
    
            If objFluxo.iFilialEmpresa = EMPRESA_TODA Then giFilialEmpresa = tPedidoVenda.iFilialEmpresa
    
            objTela.objCT.Pedido.Text = CStr(tPedidoVenda.lCodigo)
            objTela.objCT.FilialPedido.Text = CStr(tPedidoVenda.iFilialEmpresa)
    
            lErro = objTela.objCT.Traz_Pedido_Fluxo
            If lErro <> SUCESSO Then gError 188668
            
            objFluxo.objTela.objProgressBar.Value = objFluxo.objTela.objProgressBar.Value + 1
            
            DoEvents
            
            If objFluxo.objTela.giStop = 1 Then gError 188669
            
            If tPedidoVenda.dtDataRefFluxo <> DATA_NULA Then
                objTela.objCT.DataReferencia.PromptInclude = False
                objTela.objCT.DataReferencia.Text = Format(tPedidoVenda.dtDataRefFluxo, "dd/mm/yy")
                objTela.objCT.DataReferencia.PromptInclude = True
                objTela.objCT.DataEmissao.PromptInclude = False
                objTela.objCT.DataEmissao.Text = Format(tPedidoVenda.dtDataRefFluxo, "dd/mm/yy")
                objTela.objCT.DataEmissao.PromptInclude = True
                objTela.objCT.dataEntrega.PromptInclude = False
                objTela.objCT.dataEntrega.Text = Format(tPedidoVenda.dtDataRefFluxo, "dd/mm/yy")
                objTela.objCT.dataEntrega.PromptInclude = True
                Call objTela.objCT.Cobranca_Automatica
            End If
            
            'Para cada parcela do grid
            For iIndice = 1 To objTela.objCT.objGridParcelas.iLinhasExistentes
            
                objParcela.iNumParcela = iIndice
        
                'recolhe os dados da parcela
                objParcela.dtDataVencimento = StrParaDate(objTela.objCT.GridParcelas.TextMatrix(iIndice, objTela.objCT.iGrid_Vencimento_Col))
                objParcela.dValor = StrParaDbl(objTela.objCT.GridParcelas.TextMatrix(iIndice, objTela.objCT.iGrid_ValorParcela_Col))
            
                lErro = CF("DataVencto_Real", objParcela.dtDataVencimento, dtDataVenctoReal)
                If lErro <> SUCESSO Then gError 188670
            
                If dtDataVenctoReal >= objFluxo.dtDataBase And dtDataVenctoReal <= objFluxo.dtDataFinal And objParcela.dValor > DELTA_VALORMONETARIO Then
                
                    tRelFluxo.dtData = dtDataVenctoReal
                    tRelFluxo.dEntrada = objParcela.dValor
                
                    lErro = RelFluxoCaixa_Grava(tRelFluxo)
                    If lErro <> SUCESSO Then gError 188671
    
                End If
    
            Next
    
            lErro = Comando_BuscarProximo(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 188672
    
        Loop
    
        Unload objTela.Parent
    
        For iIndice = LBound(alComando) To UBound(alComando)
            Call Comando_Fechar(alComando(iIndice))
        Next

    End If

    If objFluxo.iFilialEmpresa = EMPRESA_TODA Then giFilialEmpresa = EMPRESA_TODA

    RelFluxoCaixa_PedVenda = SUCESSO

    Exit Function

Erro_RelFluxoCaixa_PedVenda:

    RelFluxoCaixa_PedVenda = gErr

    If objFluxo.iFilialEmpresa = EMPRESA_TODA Then giFilialEmpresa = EMPRESA_TODA

    Select Case gErr

        Case 188662
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 188663, 188664, 188668, 188670, 188671

        Case 188665, 188666, 188667, 188672
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PEDIDODEVENDA", gErr)

        Case 188669
            Call Rotina_Erro(vbOKOnly, "ERRO_FLUXO_INTERROMPIDO", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 188673)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function RelFluxoCaixa_PedCompra(ByVal objFluxo As ClassFluxo, ByVal lNumIntRel As Long) As Long
'grava os pagamentos oriundos dos pedidos de compra

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim dtRefFim As Date
Dim tPedidoCompra As typePedidoCompras
Dim objTela As Object
Dim objParcelaPag As New ClassParcelaPagar
Dim dtDataVenctoReal As Date
Dim iIndice As Integer
Dim bCancel As Boolean
Dim objPedidoCompra As New ClassPedidoCompras
Dim tRelFluxo As typeRelFluxoCaixa

On Error GoTo Erro_RelFluxoCaixa_PedCompra

    If gobjTES.iFluxoIncluiPedidos = FLUXO_INCLUI_PEDIDOS Then

        tRelFluxo.lNumIntRel = lNumIntRel

        'Abertura de Comando
        For iIndice = LBound(alComando) To UBound(alComando)
            alComando(iIndice) = Comando_Abrir()
            If alComando(iIndice) = 0 Then gError 188690
        Next
    
        'chama a tela passada como parametro criando uma nova instancia sem mostra-la
        lErro = Chama_Tela_Nova_Instancia1("NFiscalFatEntradaCom", objTela)
        If lErro <> SUCESSO Then gError 188691
    
        'seleciona os pedidos de compra
        If objFluxo.iFilialEmpresa = EMPRESA_TODA Then
        
            lErro = Comando_Executar(alComando(1), "SELECT Codigo, FilialEmpresa, Fornecedor, Filial, DataRefFluxo FROM PedidoCompra ", tPedidoCompra.lCodigo, tPedidoCompra.iFilialEmpresa, tPedidoCompra.lFornecedor, tPedidoCompra.iFilial, tPedidoCompra.dtDataRefFluxo)
            If lErro <> AD_SQL_SUCESSO Then gError 188693
    
        Else
        
            lErro = Comando_Executar(alComando(1), "SELECT Codigo, FilialEmpresa, Fornecedor, Filial, DataRefFluxo FROM PedidoCompra WHERE FilialEmpresa = ?", tPedidoCompra.lCodigo, tPedidoCompra.iFilialEmpresa, tPedidoCompra.lFornecedor, tPedidoCompra.iFilial, tPedidoCompra.dtDataRefFluxo, objFluxo.iFilialEmpresa)
            If lErro <> AD_SQL_SUCESSO Then gError 188694
    
        End If
    
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 188695
    
        If objFluxo.iFilialEmpresa = EMPRESA_TODA Then
            giFilialEmpresa = tPedidoCompra.iFilialEmpresa
            objTela.objCT.gbCarregandoTela = True
            objTela.objCT.FilialCompra.Text = tPedidoCompra.iFilialEmpresa
            objTela.objCT.gbCarregandoTela = False
        End If
    
        lErro = objTela.objCT.CargaPosFormLoad
        If lErro <> SUCESSO Then gError 188692
    
        Do While lErro = AD_SQL_SUCESSO
    
            If objFluxo.iFilialEmpresa = EMPRESA_TODA Then
                giFilialEmpresa = tPedidoCompra.iFilialEmpresa
                objTela.objCT.gbCarregandoTela = True
                objTela.objCT.FilialCompra.Text = tPedidoCompra.iFilialEmpresa
                objTela.objCT.gbCarregandoTela = False
            End If
                
            objPedidoCompra.iFilialEmpresa = tPedidoCompra.iFilialEmpresa
            objPedidoCompra.lCodigo = tPedidoCompra.lCodigo
            
            lErro = CF("PedidoCompra_Le_Numero", objPedidoCompra)
            If lErro <> SUCESSO And lErro <> 56142 Then gError 188696
            
            If lErro = SUCESSO Then
                
                Call objTela.objCT.Limpa_Tela_NFiscalFatCom
                
                Set objTela.objCT.gcolPedidoCompra = New Collection
                objTela.objCT.gcolPedidoCompra.Add objPedidoCompra
                
                objTela.objCT.Fornecedor.Text = CStr(tPedidoCompra.lFornecedor)
                objTela.objCT.Filial.Text = CStr(tPedidoCompra.iFilial)
                Call objTela.objCT.gobjTribTab.FilialFornecedor_Alterada(tPedidoCompra.lFornecedor, tPedidoCompra.iFilial)
               
               objTela.objCT.PedidosCompra.AddItem tPedidoCompra.lCodigo
                          
                objTela.objCT.PedidosCompra.Selected(0) = True
        
                objFluxo.objTela.objProgressBar.Value = objFluxo.objTela.objProgressBar.Value + 1
                
                DoEvents
                
                If objFluxo.objTela.giStop = 1 Then gError 188697
            
                objTela.objCT.total.Text = StrParaDbl(objTela.objCT.SubTotal.Caption) + StrParaDbl(objTela.objCT.ICMSSubstValor1.Caption) + StrParaDbl(objTela.objCT.IPIValor1.Caption) + StrParaDbl(objTela.objCT.ValorFrete.Text) + StrParaDbl(objTela.objCT.ValorSeguro.Text) + StrParaDbl(objTela.objCT.ValorDespesas.Text)
        
        
                If tPedidoCompra.dtDataRefFluxo <> DATA_NULA Then
                    objTela.objCT.DataEmissao.PromptInclude = False
                    objTela.objCT.DataEmissao.Text = Format(tPedidoCompra.dtDataRefFluxo, "dd/mm/yy")
                    objTela.objCT.DataEmissao.PromptInclude = True
                    objTela.objCT.DataEntrada.PromptInclude = False
                    objTela.objCT.DataEntrada.Text = Format(tPedidoCompra.dtDataRefFluxo, "dd/mm/yy")
                    objTela.objCT.DataEntrada.PromptInclude = True
                    Call objTela.objCT.Cobranca_Automatica
                Else
                    objTela.objCT.DataEmissao.PromptInclude = False
                    objTela.objCT.DataEmissao.Text = Format(gdtDataAtual, "dd/mm/yy")
                    objTela.objCT.DataEmissao.PromptInclude = True
                    Call objTela.objCT.Cobranca_Automatica
                End If
                
                'Para cada parcela do grid
                For iIndice = 1 To objTela.objCT.objGridParcelas.iLinhasExistentes
                
                    objParcelaPag.iNumParcela = iIndice
            
                    'recolhe os dados da parcela
                    objParcelaPag.dtDataVencimentoReal = StrParaDate(objTela.objCT.GridParcelas.TextMatrix(iIndice, objTela.objCT.iGrid_VenctoReal_Col))
                    objParcelaPag.dValor = StrParaDbl(objTela.objCT.GridParcelas.TextMatrix(iIndice, objTela.objCT.iGrid_Valor_Col))
                
                    If objParcelaPag.dtDataVencimentoReal >= objFluxo.dtDataBase And objParcelaPag.dtDataVencimentoReal <= objFluxo.dtDataFinal And objParcelaPag.dValor > DELTA_VALORMONETARIO Then
                    
                        tRelFluxo.dtData = objParcelaPag.dtDataVencimentoReal
                        tRelFluxo.dSaida = objParcelaPag.dValor
                        
                        lErro = RelFluxoCaixa_Grava(tRelFluxo)
                        If lErro <> SUCESSO Then gError 188698
        
                    End If
        
                Next
    
            End If
    
            lErro = Comando_BuscarProximo(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 188699
    
        Loop
    
        Unload objTela.Parent
        
        For iIndice = LBound(alComando) To UBound(alComando)
            Call Comando_Fechar(alComando(iIndice))
        Next

    End If

    If objFluxo.iFilialEmpresa = EMPRESA_TODA Then giFilialEmpresa = EMPRESA_TODA

    RelFluxoCaixa_PedCompra = SUCESSO

    Exit Function

Erro_RelFluxoCaixa_PedCompra:

    RelFluxoCaixa_PedCompra = gErr

    If objFluxo.iFilialEmpresa = EMPRESA_TODA Then giFilialEmpresa = EMPRESA_TODA

    Select Case gErr

        Case 188690
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 188691, 188692, 188696, 188698

        Case 188693 To 188695, 188699
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PEDIDOCOMPRA", gErr)

        Case 188697
            Call Rotina_Erro(vbOKOnly, "ERRO_FLUXO_INTERROMPIDO", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 188700)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function RelFluxoCaixa_SaldosIniciais(ByVal objFluxo As ClassFluxo, ByVal lNumIntRel As Long) As Long
'grava os saldos inciais das contas correntes
'IMPORTANTE: TEM QUE SER CHAMADA DENTRO DE TRANSACAO

Dim lErro As Long
Dim iAno As Integer
Dim iAnoCCIMov As Integer
Dim iMes As Integer
Dim dtDataInicial As Date
Dim alComando(1 To 5) As Long
Dim iIndice As Integer
Dim dCred(1 To 12) As Double
Dim dDeb(1 To 12) As Double
Dim dDeb1 As Double
Dim dCred1 As Double
Dim dSaldoInicial As Double
Dim tCCi As typeContaCorrenteInt
Dim tRelFluxo As typeRelFluxoCaixa

On Error GoTo Erro_RelFluxoCaixa_SaldosIniciais

    For iIndice = LBound(alComando) To UBound(alComando)

        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 188706

    Next

    tRelFluxo.lNumIntRel = lNumIntRel

    iAno = Year(objFluxo.dtDataBase)
    iMes = Month(objFluxo.dtDataBase)
    dtDataInicial = CDate("01" & "/" & CStr(iMes) & "/" & CStr(iAno))

    tCCi.sNomeReduzido = String(STRING_NOME_REDUZIDO, 0)

    'seleciona os saldos iniciais das contas correntes
    If objFluxo.iFilialEmpresa = EMPRESA_TODA Then

        'Pesquisa os saldos iniciais das contas
        lErro = Comando_Executar(alComando(5), "SELECT FilialEmpresa, Codigo, NomeReduzido, SaldoInicial FROM ContasCorrentesInternas WHERE DataSaldoInicial <= ?", tCCi.iFilialEmpresa, tCCi.iCodigo, tCCi.sNomeReduzido, dSaldoInicial, objFluxo.dtDataBase)
        If lErro <> AD_SQL_SUCESSO Then gError 188707

    Else

        lErro = Comando_Executar(alComando(5), "SELECT Codigo, NomeReduzido, SaldoInicial FROM ContasCorrentesInternas WHERE FilialEmpresa = ? AND DataSaldoInicial <= ?", tCCi.iCodigo, tCCi.sNomeReduzido, dSaldoInicial, objFluxo.iFilialEmpresa, objFluxo.dtDataBase)
        If lErro <> AD_SQL_SUCESSO Then gError 188708

    End If

    lErro = Comando_BuscarPrimeiro(alComando(5))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 188709

    Do While lErro = AD_SQL_SUCESSO

        'Complementa a Pesquisa dos saldos iniciais das contas
        lErro = Comando_Executar(alComando(1), "SELECT Ano, Deb01, Cred01, Deb02, Cred02, Deb03, Cred03, Deb04, Cred04, Deb05, Cred05, Deb06, Cred06, Deb07, Cred07, Deb08, Cred08, Deb09, Cred09, Deb10, Cred10, Deb11, Cred11, Deb12, Cred12 FROM CCIMov WHERE CodContaCorrenteInterna = ? AND Ano <= ?", iAnoCCIMov, dDeb(1), dCred(1), dDeb(2), dCred(2), dDeb(3), dCred(3), dDeb(4), dCred(4), dDeb(5), dCred(5), dDeb(6), dCred(6), dDeb(7), dCred(7), dDeb(8), dCred(8), dDeb(9), dCred(9), dDeb(10), dCred(10), dDeb(11), dCred(11), dDeb(12), dCred(12), tCCi.iCodigo, iAno)
        If lErro <> AD_SQL_SUCESSO Then gError 188710
        
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 188711
        
        Do While lErro = AD_SQL_SUCESSO
        
                    
            If iAno = iAnoCCIMov Then
            
                'calcula o valor do saldo inicial
                For iIndice = 1 To iMes - 1
                    dSaldoInicial = dSaldoInicial + dCred(iIndice) - dDeb(iIndice)
                Next
                
            Else
            
                'calcula o valor do saldo inicial
                For iIndice = 1 To 12
                    dSaldoInicial = dSaldoInicial + dCred(iIndice) - dDeb(iIndice)
                Next
            
            End If
            
            lErro = Comando_BuscarProximo(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 188712
        
        Loop
            
        'pesquisar em CCIMovDia as movimentações entre o primeiro dia do mes e a database
        lErro = Comando_Executar(alComando(2), "SELECT Deb, Cred FROM CCIMovDia WHERE CodContaCorrenteInterna = ? AND Data >= ? AND Data <= ?", dDeb1, dCred1, tCCi.iCodigo, dtDataInicial, objFluxo.dtDataBase)
        If lErro <> AD_SQL_SUCESSO Then gError 188713
    
        lErro = Comando_BuscarPrimeiro(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 188714
    
        Do While lErro = AD_SQL_SUCESSO
    
            dSaldoInicial = dSaldoInicial + dCred1 - dDeb1
    
            lErro = Comando_BuscarProximo(alComando(2))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 188715
    
        Loop
    
        tRelFluxo.dSaldoInicial = tRelFluxo.dSaldoInicial + dSaldoInicial
    
        lErro = Comando_BuscarProximo(alComando(5))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 188716

    Loop

    lErro = RelFluxoCaixa_Grava1(tRelFluxo)
    If lErro <> SUCESSO Then gError 188717

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    RelFluxoCaixa_SaldosIniciais = SUCESSO

    Exit Function

Erro_RelFluxoCaixa_SaldosIniciais:

    RelFluxoCaixa_SaldosIniciais = gErr

    Select Case gErr

        Case 188706
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)



        Case 188707, 188708, 188716
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CCI_CCIMOV", gErr)

        Case 188710, 188711, 188712
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONTASCORRENTESINTERNAS", gErr)
            
        Case 188713, 188714, 188715
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CCIMOVDIA1", gErr)

        Case 188717


        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 188718)

    End Select


    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function RelFluxoCaixa_Grava1(tRelFluxo As typeRelFluxoCaixa) As Long

Dim lErro As Long
Dim alComando(1 To 3) As Long
Dim iIndice As Integer
Dim lNumIntRel As Long

On Error GoTo Erro_RelFluxoCaixa_Grava1

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 188701
    Next

    lErro = Comando_ExecutarPos(alComando(1), "SELECT NumIntRel FROM RelFluxoCaixa WHERE NumIntRel = ? ORDER BY Data ", 0, _
        lNumIntRel, tRelFluxo.lNumIntRel)
    If lErro <> AD_SQL_SUCESSO Then gError 188702
        
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 188703
    
    If lErro = AD_SQL_SUCESSO Then
    
            'insere registro em RelCliSaldo
            lErro = Comando_ExecutarPos(alComando(2), "UPDATE RelFluxoCaixa SET SaldoInicial = ?", alComando(1), tRelFluxo.dSaldoInicial)
            If lErro <> AD_SQL_SUCESSO Then gError 188704
            
    End If

    For iIndice = LBound(alComando) To UBound(alComando)
         Call Comando_Fechar(alComando(iIndice))
    Next
   
    RelFluxoCaixa_Grava1 = SUCESSO
     
    Exit Function
    
Erro_RelFluxoCaixa_Grava1:

    RelFluxoCaixa_Grava1 = gErr
     
    Select Case gErr
          
        Case 188701
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)


 
        Case 188702, 188703
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RELFLUXOCAIXA", gErr)
        
        Case 188704
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_RELFLUXOCAIXA", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 188705)
     
    End Select
     
    For iIndice = LBound(alComando) To UBound(alComando)
         Call Comando_Fechar(alComando(iIndice))
    Next

End Function

Function RelFluxoCaixa_Resgates(ByVal objFluxo As ClassFluxo, ByVal lNumIntRel As Long) As Long
'grava as previsoes de resgate
'IMPORTANTE: TEM QUE SER CHAMADA DENTRO DE TRANSACAO

Dim lErro As Long
Dim alComando(1 To 4) As Long
Dim iIndice As Integer
Dim tAplicacao As typeAplicacao
Dim dtData As Date
Dim iTipoAplicacao As Integer
Dim dValor As Double
Dim iAchou As Integer
Dim tRelFluxo As typeRelFluxoCaixa

On Error GoTo Erro_RelFluxoCaixa_Resgates

    For iIndice = LBound(alComando) To UBound(alComando)

        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 188719

    Next

    tRelFluxo.lNumIntRel = lNumIntRel

    'seleciona as previsoes de resgate das aplicacoes
    If objFluxo.iFilialEmpresa = EMPRESA_TODA Then

        'Pesquisa todas as previsoes de resgate no ambito empresa
        lErro = Comando_Executar(alComando(1), "SELECT FilialEmpresa, Codigo, DataResgatePrevista, ValorResgatePrevisto, TipoAplicacao, SaldoAplicado FROM Aplicacoes WHERE Status = ? AND DataResgatePrevista >= ? AND DataResgatePrevista <= ? ORDER BY TipoAplicacao, DataResgatePrevista", tAplicacao.iFilialEmpresa, tAplicacao.lCodigo, tAplicacao.dtDataResgatePrevista, tAplicacao.dValorResgatePrevisto, tAplicacao.iTipoAplicacao, tAplicacao.dSaldoAplicado, APLICACAO_ATIVA, objFluxo.dtDataBase, objFluxo.dtDataFinal + 7)
        If lErro <> AD_SQL_SUCESSO Then gError 188720

    Else

        lErro = Comando_Executar(alComando(1), "SELECT Codigo, DataResgatePrevista, ValorResgatePrevisto, TipoAplicacao, SaldoAplicado FROM Aplicacoes WHERE FilialEmpresa = ? AND Status = ? AND DataResgatePrevista >= ? AND DataResgatePrevista <= ? ORDER BY TipoAplicacao, DataResgatePrevista", tAplicacao.lCodigo, tAplicacao.dtDataResgatePrevista, tAplicacao.dValorResgatePrevisto, tAplicacao.iTipoAplicacao, tAplicacao.dSaldoAplicado, objFluxo.iFilialEmpresa, APLICACAO_ATIVA, objFluxo.dtDataBase, objFluxo.dtDataFinal + 7)
        If lErro <> AD_SQL_SUCESSO Then gError 188721

    End If

    lErro = Fluxo_Comando_BuscarProximo(alComando(1), tAplicacao.dtDataResgatePrevista, objFluxo, 0)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 188722

    Do While lErro = AD_SQL_SUCESSO

        If tAplicacao.dtDataResgatePrevista >= objFluxo.dtDataBase And tAplicacao.dtDataResgatePrevista <= objFluxo.dtDataFinal And tAplicacao.dValorResgatePrevisto > DELTA_VALORMONETARIO Then
        
            tRelFluxo.dtData = tAplicacao.dtDataResgatePrevista
            tRelFluxo.dSaida = tAplicacao.dValorResgatePrevisto
            
            lErro = RelFluxoCaixa_Grava(tRelFluxo)
            If lErro <> SUCESSO Then gError 188723

        End If

        lErro = Fluxo_Comando_BuscarProximo(alComando(1), tAplicacao.dtDataResgatePrevista, objFluxo, 0)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 188724

    Loop



    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    RelFluxoCaixa_Resgates = SUCESSO

    Exit Function

Erro_RelFluxoCaixa_Resgates:

    RelFluxoCaixa_Resgates = gErr

    Select Case gErr

        Case 188719
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 188720, 188721
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_APLICACOES1", gErr)

        Case 188722, 188723, 188724

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 188725)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function BaixasParcelaRec_Grava_Customizado(ByVal objTituloRec As ClassTituloReceber, ByVal objParcelaRec As ClassParcelaReceber, ByVal objBaixaParcRec As ClassBaixaParcRec) As Long
    BaixasParcelaRec_Grava_Customizado = SUCESSO
End Function

Public Function BaixasParcelaPagar_Grava_Customizado(ByVal objTituloPagar As ClassTituloPagar, ByVal objParcelaPagar As ClassParcelaPagar, ByVal objBaixaParcPagar As ClassBaixaParcPagar) As Long
    BaixasParcelaPagar_Grava_Customizado = SUCESSO
End Function

Public Function RelFlCxAn_Prepara(ByVal iFilialEmpresa As Integer, ByVal dtDataIni As Date, ByVal dtDataFim As Date, lNumIntRel As Long) As Long
'Insere registros na tabela RelFlCxAn


Dim lErro As Long
Dim lTransacao As Long
Dim alComando(1 To 11) As Long
Dim iIndice As Integer
Dim tCCi As typeContaCorrenteInt
Dim dCred(1 To 12) As Double
Dim dDeb(1 To 12) As Double
Dim iAno As Integer
Dim iMes As Integer
Dim dtDataInicial As Date
Dim iAnoCCIMov As Integer
Dim dDeb1 As Double
Dim dCred1 As Double
Dim dSaldoInicial As Double
Dim dSaldoInicial1 As Double
Dim dtDataVenctoReal As Date
Dim iDiasRetencao As Integer
Dim dtData As Date
Dim tRelFlCxAn As typeRelFlCxAn
Dim dSaldoData As Double
Dim dSaldoAcumulado As Double

On Error GoTo Erro_RelFlCxAn_Prepara

    If dtDataIni < gdtDataAtual Then gError 195404

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 195405
    Next

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 195406

    'obtem numintrel
    lErro = CF("Config_ObterNumInt", "CPRConfig", "NUM_PROX_REL_FLCXAN", lNumIntRel)
    If lErro <> SUCESSO Then gError 195407
    
    iAno = Year(gdtDataAtual)
    iMes = Month(gdtDataAtual)
    dtDataInicial = CDate("01" & "/" & CStr(iMes) & "/" & CStr(iAno))

    tCCi.sNomeReduzido = String(STRING_NOME_REDUZIDO, 0)

    lErro = Comando_Executar(alComando(1), "SELECT Codigo, NomeReduzido, SaldoInicial FROM ContasCorrentesInternas WHERE FilialEmpresa = ? AND DataSaldoInicial <= ?", tCCi.iCodigo, tCCi.sNomeReduzido, dSaldoInicial1, iFilialEmpresa, gdtDataAtual)
    If lErro <> AD_SQL_SUCESSO Then gError 195408

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 195409

    Do While lErro = AD_SQL_SUCESSO

        dSaldoInicial = dSaldoInicial + dSaldoInicial1

        'Complementa a Pesquisa dos saldos iniciais das contas
        lErro = Comando_Executar(alComando(2), "SELECT Ano, Deb01, Cred01, Deb02, Cred02, Deb03, Cred03, Deb04, Cred04, Deb05, Cred05, Deb06, Cred06, Deb07, Cred07, Deb08, Cred08, Deb09, Cred09, Deb10, Cred10, Deb11, Cred11, Deb12, Cred12 FROM CCIMov WHERE CodContaCorrenteInterna = ? AND Ano <= ?", iAnoCCIMov, dDeb(1), dCred(1), dDeb(2), dCred(2), dDeb(3), dCred(3), dDeb(4), dCred(4), dDeb(5), dCred(5), dDeb(6), dCred(6), dDeb(7), dCred(7), dDeb(8), dCred(8), dDeb(9), dCred(9), dDeb(10), dCred(10), dDeb(11), dCred(11), dDeb(12), dCred(12), tCCi.iCodigo, iAno)
        If lErro <> AD_SQL_SUCESSO Then gError 195410
        
        lErro = Comando_BuscarPrimeiro(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 195411
        
        Do While lErro = AD_SQL_SUCESSO
        
            If iAno = iAnoCCIMov Then
            
                'calcula o valor do saldo inicial
                For iIndice = 1 To iMes - 1
                    dSaldoInicial = dSaldoInicial + dCred(iIndice) - dDeb(iIndice)
                Next
                
            Else
            
                'calcula o valor do saldo inicial
                For iIndice = 1 To 12
                    dSaldoInicial = dSaldoInicial + dCred(iIndice) - dDeb(iIndice)
                Next
            
            End If
            
            lErro = Comando_BuscarProximo(alComando(2))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 195412
        
        Loop
            
        'pesquisar em CCIMovDia as movimentações entre o primeiro dia do mes e a database
        lErro = Comando_Executar(alComando(3), "SELECT Deb, Cred FROM CCIMovDia WHERE CodContaCorrenteInterna = ? AND Data >= ? AND Data <= ?", dDeb1, dCred1, tCCi.iCodigo, dtDataInicial, gdtDataAtual)
        If lErro <> AD_SQL_SUCESSO Then gError 195413
    
        lErro = Comando_BuscarPrimeiro(alComando(3))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 195414
    
        Do While lErro = AD_SQL_SUCESSO
    
            dSaldoInicial = dSaldoInicial + dCred1 - dDeb1
    
            lErro = Comando_BuscarProximo(alComando(3))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 195415
    
        Loop
    
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 195416

    Loop
    
    lErro = Comando_Executar(alComando(4), "SELECT SUM(ParcelasPag.Saldo) From TitulosPag, ParcelasPag " & _
            "WHERE TitulosPag.NumIntDoc = ParcelasPag.NumIntTitulo AND TitulosPag.Status <> 5 AND " & _
            "ParcelasPag.Status <> 2 AND DataVencimentoReal >=? AND DataVencimentoReal < ?", dDeb1, gdtDataAtual, dtDataIni)
    If lErro <> AD_SQL_SUCESSO Then gError 195417
    
    lErro = Comando_BuscarPrimeiro(alComando(4))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 195418
    
    dSaldoInicial = dSaldoInicial - dDeb1
    
    
    lErro = Comando_Executar(alComando(5), "SELECT ParcelasRec.Saldo, DataVencimentoReal, DiasDeRetencao From TitulosRec, ParcelasRec, CarteirasCobrador " & _
            "WHERE TitulosRec.NumIntDoc = ParcelasRec.NumIntTitulo AND TitulosRec.Status <> 5 AND " & _
            "ParcelasRec.Status <> 2 AND ParcelasRec.Cobrador = CarteirasCobrador.Cobrador AND " & _
            "ParcelasRec.CarteiraCobranca = CarteirasCobrador.CodCarteiraCobranca AND " & _
            "DataVencimentoReal >=? AND DataVencimentoReal < ?", dCred1, dtData, iDiasRetencao, gdtDataAtual - 7, dtDataIni)
    If lErro <> AD_SQL_SUCESSO Then gError 195419
    
    lErro = Comando_BuscarPrimeiro(alComando(5))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 195420
    
    Do While lErro = AD_SQL_SUCESSO
    
        dtData = DateAdd("d", iDiasRetencao, dtData)
    
        lErro = CF("DataVencto_Real", dtData, dtDataVenctoReal)
        If lErro <> SUCESSO Then gError 195421
    
        If dtDataVenctoReal >= gdtDataAtual And dtDataVenctoReal < dtDataIni Then
    
            dSaldoInicial = dSaldoInicial + dCred1
    
        End If
    
        lErro = Comando_BuscarProximo(alComando(5))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 195422
    
    Loop
    
    tRelFlCxAn.sNomeReduzido = String(STRING_CLIENTE_NOME_REDUZIDO, 0)
    
    lErro = Comando_Executar(alComando(6), "SELECT ParcelasPag.Saldo, Fornecedores.NomeReduzido, TitulosPag.NumTitulo, ParcelasPag.DataVencimento, ParcelasPag.DataVencimentoReal, " & _
                      "ParcelasPag.Status, TitulosPag.NumParcelas, ParcelasPag.NumParcela From TitulosPag, ParcelasPag, Fornecedores " & _
            "WHERE TitulosPag.Fornecedor = Fornecedores.Codigo AND TitulosPag.NumIntDoc = ParcelasPag.NumIntTitulo AND TitulosPag.Status <> 5 AND " & _
            "ParcelasPag.Status <> 2 AND DataVencimentoReal >=? AND DataVencimentoReal <= ?", _
            tRelFlCxAn.dSaida, tRelFlCxAn.sNomeReduzido, tRelFlCxAn.lNumTitulo, tRelFlCxAn.dtDataVencto, tRelFlCxAn.dtDataVenctoReal, _
            tRelFlCxAn.iStatus, tRelFlCxAn.iNumParcelas, tRelFlCxAn.iNumParcela, dtDataIni, dtDataFim)
    If lErro <> AD_SQL_SUCESSO Then gError 195423
    
    lErro = Comando_BuscarPrimeiro(alComando(6))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 195424
    
    Do While lErro = AD_SQL_SUCESSO
    
        lErro = Comando_Executar(alComando(7), "INSERT INTO RelFlCxAn (NumIntRel, DataVenctoReal, SaldoInicial, Saida, DataVencto, Status, NumTitulo, NumParcelas, NumParcela, NomeReduzido) " & _
                                               " VALUES (?,?,?,?,?,?,?,?,?,?)", lNumIntRel, tRelFlCxAn.dtDataVenctoReal, dSaldoInicial, tRelFlCxAn.dSaida, tRelFlCxAn.dtDataVencto, tRelFlCxAn.iStatus, _
                                               tRelFlCxAn.lNumTitulo, tRelFlCxAn.iNumParcelas, tRelFlCxAn.iNumParcela, tRelFlCxAn.sNomeReduzido)
        If lErro <> AD_SQL_SUCESSO Then gError 195425
    
        lErro = Comando_BuscarProximo(alComando(6))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 195426
    
    Loop
    
    tRelFlCxAn.sNomeReduzido = String(STRING_CLIENTE_NOME_REDUZIDO, 0)
    
    lErro = Comando_Executar(alComando(8), "SELECT ParcelasRec.Saldo, Clientes.NomeReduzido, TitulosRec.NumTitulo, ParcelasRec.DataVencimento, ParcelasRec.DataVencimentoReal, " & _
                      "ParcelasRec.Status, TitulosRec.NumParcelas, ParcelasRec.NumParcela, DiasDeRetencao From TitulosRec, ParcelasRec, Clientes, CarteirasCobrador " & _
            "WHERE TitulosRec.Cliente = Clientes.Codigo AND TitulosRec.NumIntDoc = ParcelasRec.NumIntTitulo AND TitulosRec.Status <> 5 AND " & _
            "ParcelasRec.Status <> 2 AND DataVencimentoReal >=? AND DataVencimentoReal <= ? AND ParcelasRec.Cobrador = CarteirasCobrador.Cobrador AND " & _
            "ParcelasRec.CarteiraCobranca = CarteirasCobrador.CodCarteiraCobranca", _
            tRelFlCxAn.dEntrada, tRelFlCxAn.sNomeReduzido, tRelFlCxAn.lNumTitulo, tRelFlCxAn.dtDataVencto, tRelFlCxAn.dtDataVenctoReal, _
            tRelFlCxAn.iStatus, tRelFlCxAn.iNumParcelas, tRelFlCxAn.iNumParcela, iDiasRetencao, dtDataIni - 7, dtDataFim)
    If lErro <> AD_SQL_SUCESSO Then gError 195427
    
    lErro = Comando_BuscarPrimeiro(alComando(8))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 195428
    
    Do While lErro = AD_SQL_SUCESSO
    
        dtData = DateAdd("d", iDiasRetencao, tRelFlCxAn.dtDataVenctoReal)
    
        lErro = CF("DataVencto_Real", dtData, dtDataVenctoReal)
        If lErro <> SUCESSO Then gError 195429
    
        If dtDataVenctoReal >= dtDataIni And dtDataVenctoReal <= dtDataFim Then
    
            lErro = Comando_Executar(alComando(9), "INSERT INTO RelFlCxAn (NumIntRel, DataVenctoReal, SaldoInicial, Entrada, DataVencto, Status, NumTitulo, NumParcelas, NumParcela, NomeReduzido) " & _
                                                   " VALUES (?,?,?,?,?,?,?,?,?,?)", lNumIntRel, dtDataVenctoReal, dSaldoInicial, tRelFlCxAn.dEntrada, tRelFlCxAn.dtDataVencto, tRelFlCxAn.iStatus, _
                                                   tRelFlCxAn.lNumTitulo, tRelFlCxAn.iNumParcelas, tRelFlCxAn.iNumParcela, tRelFlCxAn.sNomeReduzido)
            If lErro <> AD_SQL_SUCESSO Then gError 195430
    
        End If
    
        lErro = Comando_BuscarProximo(alComando(8))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 195431
    
    Loop
    
    lErro = Comando_Executar(alComando(10), "SELECT SUM(Entrada-Saida), DataVenctoReal FROM RelFlCxAn WHERE NumIntRel = ? GROUP BY DataVenctoReal ORDER BY DataVenctoReal ", _
                            dSaldoData, dtDataVenctoReal, lNumIntRel)
    If lErro <> AD_SQL_SUCESSO Then gError 195476
    
    lErro = Comando_BuscarPrimeiro(alComando(10))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 195477
    
    dSaldoAcumulado = dSaldoInicial
    
    Do While lErro = AD_SQL_SUCESSO
    
        dSaldoAcumulado = dSaldoAcumulado + dSaldoData

        lErro = Comando_Executar(alComando(11), "UPDATE RelFlCxAn SET Acumulado = ? WHERE NumIntRel = ? AND DataVenctoReal = ?", dSaldoAcumulado, lNumIntRel, dtDataVenctoReal)
        If lErro <> AD_SQL_SUCESSO Then gError 195478
    
        lErro = Comando_BuscarProximo(alComando(10))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 195479
    
    Loop
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 195432
    
    For iIndice = LBound(alComando) To UBound(alComando)
         Call Comando_Fechar(alComando(iIndice))
    Next
   
    RelFlCxAn_Prepara = SUCESSO
     
    Exit Function
    
Erro_RelFlCxAn_Prepara:

    RelFlCxAn_Prepara = gErr
     
    Select Case gErr
          
        Case 195404
            Call Rotina_Erro(vbOKOnly, "ERRO_DATAINICIAL_MENOR_DATAATUAL", gErr)
          
        Case 195405
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
 
        Case 195406
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 195407, 195421, 195429

        Case 195408, 195409, 195416
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONTASCORRENTESINTERNAS", gErr)

        Case 195410 To 195412
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CCI_CCIMOV", gErr)

        Case 195413 To 195415
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CCIMOVDIA1", gErr)

        Case 195417, 195418, 195423, 195424, 195426
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_PAG1", gErr)

        Case 195419, 195420, 195422, 195427, 195428, 195431
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_REC1", gErr)

        Case 195425, 195430
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_RELFLCXAN", gErr)

        Case 195432
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case 195476, 195477, 195479
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RELFLCXAN", gErr)

        Case 195478
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_RELFLCXAN", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 195433)
     
    End Select
     
    Call Transacao_Rollback
    
    For iIndice = LBound(alComando) To UBound(alComando)
         Call Comando_Fechar(alComando(iIndice))
    Next
   
    Exit Function

End Function

Function RegiaoVenda_Grava_Customizacao(ByVal objRegiaoVenda As ClassRegiaoVenda) As Long
'customizacoes da rotina de gravacao de regiaovenda

    RegiaoVenda_Grava_Customizacao = SUCESSO

End Function

Function RegiaoVenda_Exclui_Customizado(ByVal objRegiaoVenda As ClassRegiaoVenda) As Long
'customizacoes da rotina de exclusao de regiaovenda

    RegiaoVenda_Exclui_Customizado = SUCESSO

End Function

Function BaixaParcRec_Cancelar_Customizado(ByVal lNumIntDocBaixaParcRec As Long) As Long
    BaixaParcRec_Cancelar_Customizado = SUCESSO
End Function

Private Function Calcula_DV11_HSBC_NaoReg(ByVal sSequencia As String, ByVal iBase As Integer, sDigito As String) As Long
'Calcula o Dígito Verificador do Nosso Numero - Alterado por Jorge Specian - 15/03/2005
'Cálculo através do módulo 11
'OS PESOS SAO APLICADOS DIMINUINDO DA DIREITA PARA A ESQ EM VEZ DE AUMENTAR
Dim lErro As Long
Dim iContador As Integer
Dim iNumero As Integer
Dim iTotalNumero As Integer
Dim iMultiplicador As Integer
Dim iResto As Integer
Dim sCaracter As String

On Error GoTo Erro_Calcula_DV11_HSBC_NaoReg

    iMultiplicador = iBase
    
    For iContador = 1 To Len(sSequencia)
        sCaracter = Mid(right(sSequencia, iContador), 1, 1)
        If iMultiplicador < 2 Then
            iMultiplicador = iBase
        End If
        iNumero = sCaracter * iMultiplicador
        iTotalNumero = iTotalNumero + iNumero
        iMultiplicador = iMultiplicador - 1
    Next
    
    iResto = iTotalNumero Mod 11
    
    If iResto = 10 Then
        sDigito = "0"
    Else
        sDigito = CStr(iResto)
    End If

    Calcula_DV11_HSBC_NaoReg = SUCESSO

    Exit Function

Erro_Calcula_DV11_HSBC_NaoReg:

    Calcula_DV11_HSBC_NaoReg = gErr
    
    Select Case gErr
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148442)
    
    End Select
    
    Exit Function

End Function

Function Fluxo_Grava_EmTrans(ByVal objFluxo As ClassFluxo) As Long
'grava o fluxo de caixa

Dim lErro As Long

On Error GoTo Erro_Fluxo_Grava_EmTrans

    lErro = CF("Fluxo_Grava_Fluxo", objFluxo)
    If lErro <> SUCESSO Then gError 197840

    lErro = CF("FluxoAnalitico_Grava", objFluxo)
    If lErro <> SUCESSO Then gError 197841

    Fluxo_Grava_EmTrans = SUCESSO

    Exit Function

Erro_Fluxo_Grava_EmTrans:

    Fluxo_Grava_EmTrans = gErr

    Select Case gErr

        Case 197840, 197841

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 197842)

    End Select

    Exit Function

End Function

Function Fluxo_Exclui_EmTrans(ByVal objFluxo As ClassFluxo) As Long
'Exclui o fluxo passado como parametro

Dim lErro As Long
Dim alComando(1 To 7) As Long
Dim iIndice As Integer
Dim lFluxoId As Long

On Error GoTo Erro_Fluxo_Exclui_EmTrans

    For iIndice = LBound(alComando) To UBound(alComando)

        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 197843

    Next

    'Verifica se o fluxo esta cadastrado
    lErro = Comando_ExecutarPos(alComando(1), "SELECT FluxoId FROM Fluxo WHERE FluxoId = ? AND FilialEmpresa = ?", 0, lFluxoId, objFluxo.lFluxoId, giFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 197858

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 197859

    'se o fluxo nao esta cadastrado erro
    If lErro = AD_SQL_SEM_DADOS Then gError 197860

    lErro = Comando_LockExclusive(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 197861
    
    lErro = CF("FluxoAnalitico_Exclui", objFluxo)
    If lErro <> SUCESSO Then gError 197844

    lErro = Comando_Executar(alComando(3), "DELETE FROM FluxoPV WHERE FluxoID = ?", lFluxoId)
    If lErro <> AD_SQL_SUCESSO Then gError 197845

    lErro = Comando_Executar(alComando(4), "DELETE FROM FluxoPC WHERE FluxoID = ?", lFluxoId)
    If lErro <> AD_SQL_SUCESSO Then gError 197846

    lErro = Comando_Executar(alComando(5), "DELETE FROM FluxoContratoItemNF WHERE FluxoID = ?", lFluxoId)
    If lErro <> AD_SQL_SUCESSO Then gError 197847

    lErro = Comando_Executar(alComando(6), "DELETE FROM FluxoContratoRec WHERE FluxoID = ?", lFluxoId)
    If lErro <> AD_SQL_SUCESSO Then gError 197848

    lErro = Comando_Executar(alComando(7), "DELETE FROM FluxoContratoPag WHERE FluxoID = ?", lFluxoId)
    If lErro <> AD_SQL_SUCESSO Then gError 197849

    'Exclui o fluxo
    lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM Fluxo", alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 197850

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Fluxo_Exclui_EmTrans = SUCESSO

    Exit Function

Erro_Fluxo_Exclui_EmTrans:

    Fluxo_Exclui_EmTrans = gErr

    Select Case gErr

        Case 197843
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 197844 To 197850, 197858 To 197861

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 197851)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Preenche_Boleto_Citibank(ByVal objCCI As ClassContasCorrentesInternas, ByVal objParcelaReceber As ClassParcelaReceber, sCampoLivre As String, ByVal objCarteiraCobrador As ClassCarteiraCobrador, ByVal bSemValorVcto As Boolean) As Long
'Preenche o Campo Livre para compor o Código de Barras e a Linha Digitável de um Boleto Bancário
'Esta função devolve o Campo Livre específico para o Banco 745

Dim lErro As Long, sCodCedente As String
Dim sNossoNumero As String, sDVNossoNumero As String
Dim iTamanho_NossoNumero As Integer

On Error GoTo Erro_Preenche_Boleto_Citibank

    'Inicializa variáveis com tamanho dos campos
    iTamanho_NossoNumero = 11

    'Valida e formata valores do Campo Livre
    
    If Not IsNumeric(Trim(objParcelaReceber.sNumTitCobrador)) Or Len(Trim(objParcelaReceber.sNumTitCobrador)) > iTamanho_NossoNumero Then gError 134249
    sNossoNumero = Format(left(Trim(objParcelaReceber.sNumTitCobrador), iTamanho_NossoNumero), "00000000000")
    
    lErro = Calcula_DV11(sNossoNumero, 9, sDVNossoNumero)
    If lErro <> SUCESSO Then gError 130019
    
    lErro = CF("CarteiraCobradorInfo_ObtemValor", objCarteiraCobrador.iCobrador, objCarteiraCobrador.iCodCarteiraCobranca, 7, sCodCedente)
    If lErro <> SUCESSO Then gError 130411
    
    'Concatena a sequencia
    sCampoLivre = "3" & FormataCpoNum(objCarteiraCobrador.iNumCarteiraNoBanco, 3) & Mid(sCodCedente, 2) & sNossoNumero & sDVNossoNumero

    Preenche_Boleto_Citibank = SUCESSO

    Exit Function

Erro_Preenche_Boleto_Citibank:

    Preenche_Boleto_Citibank = gErr
    
    Select Case gErr
        
        Case 134249
            Call Rotina_Erro(vbOKOnly, "ERRO_NOSSONUMERO_NAO_NUMERICO", gErr, iTamanho_NossoNumero)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148461)
    
    End Select
    
    Exit Function

End Function

Private Function NossoNumero_ObtemDV_Citibank(ByVal objCCI As ClassContasCorrentesInternas, ByVal sNossoNumero As String, ByVal iNumCarteiraCobrador As Integer, ByVal sCampoLivre As String, ByVal objParcelaReceber As ClassParcelaReceber, sDVNossoNumero As String) As Long

Dim lErro As Long, sSequencia As String

On Error GoTo Erro_NossoNumero_ObtemDV_Citibank

    sSequencia = FormataCpoNum(sNossoNumero, 11)
    lErro = Calcula_DV11(sSequencia, 9, sDVNossoNumero)
    If lErro <> SUCESSO Then gError 130019
    
    NossoNumero_ObtemDV_Citibank = SUCESSO
     
    Exit Function
    
Erro_NossoNumero_ObtemDV_Citibank:

    NossoNumero_ObtemDV_Citibank = gErr
     
    Select Case gErr
          
        Case 130019
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148464)
     
    End Select
     
    Exit Function

End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'GRAVAÇÃO
Public Function ChequePrePag_Grava(ByVal colChequePrePag As Collection) As Long

Dim lErro As Long
Dim lTransacao As Long
Dim objChequePrePag As ClassChequePrePag

On Error GoTo Erro_ChequePrePag_Grava

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 198860

    For Each objChequePrePag In colChequePrePag

        lErro = CF("ChequePrePag_Grava_EmTrans", objChequePrePag)
        If lErro <> SUCESSO Then gError 198862
        
    Next
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 198863

    ChequePrePag_Grava = SUCESSO

    Exit Function

Erro_ChequePrePag_Grava:

    ChequePrePag_Grava = gErr

    Select Case gErr

        Case 198860
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 198862

        Case 198863
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 198864)

    End Select
    
    'Desfaz Transação
    Call Transacao_Rollback

    Exit Function

End Function

Public Function ChequePrePag_Grava_EmTrans(ByVal objChequePrePag As ClassChequePrePag) As Long

Dim lErro As Long, iIndice As Integer, iTipoCobrBD As Integer
Dim lNumIntDoc As Long
Dim objChequePrePagParc As ClassChequePrePagParc
Dim lNumIntDocAux As Long, alComando(0 To 4) As Long

On Error GoTo Erro_ChequePrePag_Grava_EmTrans

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 198861
    Next
    
    lErro = Comando_Executar(alComando(2), "SELECT NumIntDoc FROM ChequePrePag WHERE Numero= ? AND ContaCorrente = ? AND DataEmissao = ?", lNumIntDocAux, objChequePrePag.lNumero, objChequePrePag.iContaCorrente, objChequePrePag.dtDataEmissao)
    If lErro <> AD_SQL_SUCESSO Then gError 198885
    
    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 198886
    
    If lErro = AD_SQL_SUCESSO Then gError 198887

    'Obter NumIntDoc
    lErro = CF("Config_ObterNumInt", "CPRConfig", "NUM_INT_PROX_CHEQUEPREPAG", lNumIntDoc)
    If lErro <> SUCESSO Then gError 198865

    objChequePrePag.lNumIntDoc = lNumIntDoc

    lErro = Comando_Executar(alComando(0), "INSERT INTO ChequePrePag( NumIntDoc, FilialEmpresa, ContaCorrente, Numero, " & _
            "DataEmissao, DataBomPara, DataDeposito, Valor, Status, " & _
            "Observacao, Favorecido, Fornecedor, Filial) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", _
            objChequePrePag.lNumIntDoc, objChequePrePag.iFilialEmpresa, objChequePrePag.iContaCorrente, objChequePrePag.lNumero, _
            objChequePrePag.dtDataEmissao, objChequePrePag.dtDataBomPara, objChequePrePag.dtDataDeposito, objChequePrePag.dValor, objChequePrePag.iStatus, _
            objChequePrePag.sObservacao, objChequePrePag.sFavorecido, objChequePrePag.lFornecedor, objChequePrePag.iFilial)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 198866

    For Each objChequePrePagParc In objChequePrePag.colParcelas
    
        objChequePrePagParc.lNumIntCheque = lNumIntDoc
    
        lErro = Comando_Executar(alComando(1), "INSERT INTO ChequePrePagParc( NumIntCheque, NumIntParcela, ValorPago, ValorBaixado, " & _
                "Juros, Multa, Desconto) VALUES (?,?,?,?,?,?,?)", _
                objChequePrePagParc.lNumIntCheque, objChequePrePagParc.lNumIntParcela, objChequePrePagParc.dValorPago, objChequePrePagParc.dValorBaixado, _
                objChequePrePagParc.dValorJuros, objChequePrePagParc.dValorMulta, objChequePrePagParc.dValorDesconto)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 198867

        lErro = Comando_ExecutarPos(alComando(3), "SELECT TipoCobranca FROM ParcelasPag WHERE NumIntDoc = ?", 0, iTipoCobrBD, objChequePrePagParc.lNumIntParcela)
        If lErro <> AD_SQL_SUCESSO Then gError 184864
    
        lErro = Comando_BuscarProximo(alComando(3))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 184865
        
        If lErro <> AD_SQL_SUCESSO Then gError 184866
    
        'fazer o lock exclusivo
        lErro = Comando_LockExclusive(alComando(3))
        If lErro <> AD_SQL_SUCESSO Then gError 184867

        lErro = Comando_ExecutarPos(alComando(4), "UPDATE ParcelasPag SET TipoCobranca = ?", alComando(3), TIPO_COBRANCA_CHEQUE_PRE)
        If lErro <> AD_SQL_SUCESSO Then gError 184868
    
    Next

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    ChequePrePag_Grava_EmTrans = SUCESSO

    Exit Function

Erro_ChequePrePag_Grava_EmTrans:

    ChequePrePag_Grava_EmTrans = gErr

    Select Case gErr

        Case 198865

        Case 198861
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 198866
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CHEQUEPREPAG", gErr)

        Case 198867, 184864, 184865, 184866, 184867, 184868
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CHEQUEPREPAGPARC", gErr)
            
        Case 198885, 198886
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUEPREPAG", gErr)
        
        Case 198887
            Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPREPAG_JA_CADASTRADO", gErr, objChequePrePag.lNumero, objChequePrePag.iContaCorrente, objChequePrePag.dtDataEmissao)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 198868)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'EXCLUSÃO
Public Function ChequePrePag_Exclui(ByVal objChequePrePag As ClassChequePrePag) As Long

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_ChequePrePag_Exclui

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 198869

    lErro = CF("ChequePrePag_Exclui_EmTrans", objChequePrePag)
    If lErro <> SUCESSO Then gError 198870

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 198871

    ChequePrePag_Exclui = SUCESSO

    Exit Function

Erro_ChequePrePag_Exclui:

    ChequePrePag_Exclui = gErr

    Select Case gErr

        Case 198869
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 198870

        Case 198871
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 198872)

    End Select

    'Desfaz Transação
    Call Transacao_Rollback

    Exit Function

End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'EXCLUSÃO
Public Function ChequePrePag_Cancela(ByVal objChequePrePagAux As ClassChequePrePagAux) As Long

Dim lErro As Long
Dim lTransacao As Long
Dim objChequePrePag As ClassChequePrePag
Dim iIndice As Integer

On Error GoTo Erro_ChequePrePag_Cancela

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 198869

    iIndice = 0
    For Each objChequePrePag In objChequePrePagAux.colCheques
        iIndice = iIndice + 1
        objChequePrePagAux.iChequeAtual = iIndice
        objChequePrePag.iIndiceChequeProc = iIndice
        lErro = CF("ChequePrePag_Exclui_EmTrans", objChequePrePag)
        If lErro <> SUCESSO Then gError 198870
    Next

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 198871

    ChequePrePag_Cancela = SUCESSO

    Exit Function

Erro_ChequePrePag_Cancela:

    ChequePrePag_Cancela = gErr

    Select Case gErr

        Case 198869
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 198870

        Case 198871
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 198872)

    End Select

    'Desfaz Transação
    Call Transacao_Rollback

    Exit Function

End Function

Public Function ChequePrePag_Exclui_EmTrans(ByVal objChequePrePag As ClassChequePrePag) As Long

Dim lErro As Long
Dim alComando(0 To 5) As Long
Dim iIndice As Integer
Dim lNumIntDocAux As Long
Dim lNumIntDocParcela As Long
Dim iTipoCobrBD As Integer
Dim objContabil As ClassContabil

On Error GoTo Erro_ChequePrePag_Exclui_EmTrans

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 198873
    Next

    'Le a tabelaChequePrePag
    If objChequePrePag.lNumIntDoc <> 0 Then
        lErro = Comando_ExecutarPos(alComando(0), "SELECT NumIntDoc FROM ChequePrePag WHERE NumIntDoc= ? ", _
                    0, lNumIntDocAux, objChequePrePag.lNumIntDoc)
    Else
        lErro = Comando_ExecutarPos(alComando(0), "SELECT NumIntDoc FROM ChequePrePag WHERE Numero= ? AND ContaCorrente = ? AND DataEmissao = ?", _
                    0, lNumIntDocAux, objChequePrePag.lNumero, objChequePrePag.iContaCorrente, objChequePrePag.dtDataEmissao)
    End If
    If lErro <> AD_SQL_SUCESSO Then gError 198874
    
    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 198875

    'Se não existir => ERRO
    If lErro = AD_SQL_SEM_DADOS Then gError 198876

    'Trava registro contra alterações/Leituras
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> SUCESSO Then gError 198877

    objChequePrePag.lNumIntDoc = lNumIntDocAux

    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM ChequePrePag", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 198878
    
    lErro = Comando_ExecutarPos(alComando(2), "SELECT NumIntParcela FROM ChequePrePagParc WHERE NumIntCheque= ? ", _
                0, lNumIntDocParcela, objChequePrePag.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 198879
    
    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 198880

    Do While lErro <> AD_SQL_SEM_DADOS
    
        'Trava registro contra alterações/Leituras
        lErro = Comando_LockExclusive(alComando(2))
        If lErro <> SUCESSO Then gError 198881
           
        lErro = Comando_ExecutarPos(alComando(5), "SELECT TipoCobranca FROM ParcelasPag WHERE NumIntDoc = ?", 0, iTipoCobrBD, lNumIntDocParcela)
        If lErro <> AD_SQL_SUCESSO Then gError 184864
    
        lErro = Comando_BuscarProximo(alComando(5))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 184865
        
        If lErro <> AD_SQL_SUCESSO Then gError 184866
    
        'fazer o lock exclusivo
        lErro = Comando_LockExclusive(alComando(5))
        If lErro <> AD_SQL_SUCESSO Then gError 184867

        lErro = Comando_ExecutarPos(alComando(4), "UPDATE ParcelasPag SET TipoCobranca = ?", alComando(5), TIPO_COBRANCA_CARTEIRA)
        If lErro <> AD_SQL_SUCESSO Then gError 184868
        
        lErro = Comando_ExecutarPos(alComando(3), "DELETE FROM ChequePrePagParc", alComando(2))
        If lErro <> AD_SQL_SUCESSO Then gError 198882
    
        'Busca próximo
        lErro = Comando_BuscarProximo(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 198883
    
    Loop
    
    If gcolModulo.Ativo(MODULO_CONTABILIDADE) = MODULO_ATIVO Then
    
        Set objContabil = New ClassContabil
        Call objContabil.Contabil_Inicializa_Contabilidade4(79, MODULO_BATCHCONTASAPAGAR)
         
        If Not (objContabil Is Nothing) Then
                 
            'Exclui os lançamentos contábeis (se houverem) associados ao doc em questao
            lErro = objContabil.Contabil_Exclui(objChequePrePag.lNumIntDoc, CONTABIL_EXCLUI_EFETIVO, , , , objChequePrePag.iFilialEmpresa)
            If lErro <> SUCESSO Then gError 200159
    
            Set objContabil = Nothing
        End If
        
    End If

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    ChequePrePag_Exclui_EmTrans = SUCESSO

    Exit Function

Erro_ChequePrePag_Exclui_EmTrans:

    ChequePrePag_Exclui_EmTrans = gErr

    Select Case gErr

        Case 198873
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 198874, 198875
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUEPREPAG", gErr)

        Case 198876
            Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPREPAG_NAO_CADASTRADO", gErr, objChequePrePag.lNumero, objChequePrePag.iContaCorrente, objChequePrePag.dtDataEmissao)

        Case 198877
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_CHEQUEPREPAG", gErr)

        Case 198878, 184864, 184865, 184866, 184867, 184868
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CHEQUEPREPAG", gErr)

        Case 198879, 198880, 198883
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUEPREPAG", gErr)

        Case 198881
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_CHEQUEPREPAGPARC", gErr)

        Case 198882
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CHEQUEPREPAGPARC", gErr)
            
        Case 200159

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 198884)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function ChequePrePag_Compensa(ByVal objChequePrePagAux As ClassChequePrePagAux) As Long

Dim lErro As Long
Dim lTransacao As Long
Dim objChequePrePag As ClassChequePrePag
Dim alComando(0 To 3) As Long
Dim iIndice As Integer

On Error GoTo Erro_ChequePrePag_Compensa

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 198965

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 198966
    Next
    
    iIndice = 0
    For Each objChequePrePag In objChequePrePagAux.colCheques
        iIndice = iIndice + 1
        objChequePrePagAux.iChequeAtual = iIndice
        objChequePrePag.iIndiceChequeProc = iIndice
        lErro = ChequesPrePag_AtualizarBD(alComando, objChequePrePag)
        If lErro <> SUCESSO Then gError 198967
    Next
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 198968

    ChequePrePag_Compensa = SUCESSO

    Exit Function

Erro_ChequePrePag_Compensa:

    ChequePrePag_Compensa = gErr

    Select Case gErr

        Case 198965
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 198966
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 198967

        Case 198968
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 198969)

    End Select
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    'Desfaz Transação
    Call Transacao_Rollback

    Exit Function

End Function

Private Function ChequesPrePag_AtualizarBD(alComando() As Long, ByVal objChequesPag As ClassChequePrePag) As Long
'atualiza o bd para refletir a compensacao do cheque pre-datado

Dim lErro As Long
Dim objMovContaCorrente As New ClassMovContaCorrente
Dim lNumIntBaixa As Long
Dim objColBaixaParcPagar As colBaixaParcPagar
Dim objContabAutomatica As ClassContabAutomatica
Dim objChequeParc As ClassChequePrePagParc
Dim objParcPag As New ClassParcelaPagar
Dim lNumIntDocAux As Long

On Error GoTo Erro_ChequesPrePag_AtualizarBD
    
    If (gcolModulo.Ativo(MODULO_CONTABILIDADE) = MODULO_ATIVO) Then
    
        Set objContabAutomatica = New ClassContabAutomatica
    
        lErro = objContabAutomatica.Inicializa_Contab(objChequesPag, MODULO_CONTASAPAGAR, "BCP", objChequesPag.dtDataDeposito, DATA_NULA)
        If lErro <> SUCESSO Then gError 198970
        
    End If
    
    objParcPag.lNumIntDoc = objChequesPag.colParcelas(1).lNumIntParcela
    
    lErro = CF("ParcelaPagar_Le", objParcPag)
    If lErro <> SUCESSO And lErro <> 60479 Then gError 198971
    
    'montar objMovContaCorrente
    objMovContaCorrente.dtDataContabil = objChequesPag.dtDataDeposito
    objMovContaCorrente.dtDataMovimento = objChequesPag.dtDataDeposito
    objMovContaCorrente.dValor = objChequesPag.dValor
    objMovContaCorrente.iCodConta = objChequesPag.iContaCorrente
    objMovContaCorrente.iConciliado = NAO_CONCILIADO
    objMovContaCorrente.iExcluido = 0
    objMovContaCorrente.iFavorecido = 0
    objMovContaCorrente.iFilialEmpresa = objChequesPag.iFilialEmpresa
    objMovContaCorrente.iPortador = objParcPag.iPortador
    objMovContaCorrente.iTipo = MOVCCI_PAGTO_TITULO_POR_CHEQUE
    objMovContaCorrente.iTipoMeioPagto = Cheque
    objMovContaCorrente.lNumero = objChequesPag.lNumero
    objMovContaCorrente.lNumMovto = 0
    objMovContaCorrente.lNumRefInterna = 0
    objMovContaCorrente.lSequencial = 0
    objMovContaCorrente.sHistorico = objChequesPag.sObservacao
    objMovContaCorrente.sNumRefExterna = ""
    
    Set objColBaixaParcPagar = New colBaixaParcPagar
    
    'percorrer a colecao de parcelas a pagar
    For Each objChequeParc In objChequesPag.colParcelas
        
        'criar objeto com info p/baixa e coloca-lo numa colecao
        objColBaixaParcPagar.Add 0, 0, objChequeParc.lNumIntParcela, 0, _
            objChequeParc.dValorMulta, objChequeParc.dValorJuros, objChequeParc.dValorDesconto, _
            objChequeParc.dValorBaixado, STATUS_LANCADO

    Next

    lErro = CF("BaixaPagar_Grava_Pagamento1", objChequesPag, objColBaixaParcPagar, objMovContaCorrente, objContabAutomatica)
    If lErro <> SUCESSO And lErro <> 26427 Then gError 198972
    
    If lErro = 26427 Then gError 198973
    
    lErro = Comando_ExecutarPos(alComando(0), "SELECT NumIntDoc FROM ChequePrePag WHERE NumIntDoc= ? ", _
                    0, lNumIntDocAux, objChequesPag.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 198974

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 198975

    'Se não existir => ERRO
    If lErro = AD_SQL_SEM_DADOS Then gError 198976

    'Trava registro contra alterações/Leituras
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> SUCESSO Then gError 198977

    lErro = Comando_ExecutarPos(alComando(1), "UPDATE ChequePrePag SET Status = ? , DataDeposito = ?, NumMovto = ? ", alComando(0), STATUS_BAIXADO, objChequesPag.dtDataDeposito, objMovContaCorrente.lNumMovto)
    If lErro <> AD_SQL_SUCESSO Then gError 198978
    
    If (gcolModulo.Ativo(MODULO_CONTABILIDADE) = MODULO_ATIVO) Then
    
        lErro = objContabAutomatica.Finaliza_Contab
        If lErro <> SUCESSO Then gError 198979
        
    End If
    
    ChequesPrePag_AtualizarBD = SUCESSO
    
    Exit Function
    
Erro_ChequesPrePag_AtualizarBD:

    ChequesPrePag_AtualizarBD = Err

    Select Case gErr
    
        Case 198970 To 198973, 198979

        Case 198974, 198975
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUEPREPAG", gErr)

        Case 198976
            Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPREPAG_NAO_CADASTRADO", gErr)

        Case 198977
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_CHEQUEPREPAG", gErr)

        Case 198978
            Call Rotina_Erro(vbOKOnly, "ERRO_UPDATE_CHEQUEPREPAG", gErr)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 198980)

    End Select

    Exit Function

End Function

Function ChequesPagAvulso_GravarChequePre(ByVal objChequesPagAvulso As ClassChequesPagAvulso) As Long

Dim lErro As Long, objChequePrePag As New ClassChequePrePag
Dim objChequeParc As ClassChequePrePagParc
Dim objInfoParcPag As ClassInfoParcPag

On Error GoTo Erro_ChequesPagAvulso_GravarChequePre

    With objChequePrePag
        
        .lNumIntDoc = 0
        .iFilialEmpresa = objChequesPagAvulso.iFilialEmpresaCta
        .iContaCorrente = objChequesPagAvulso.iCta
        .lNumero = objChequesPagAvulso.lNumCheque
        .dtDataEmissao = objChequesPagAvulso.dtEmissao
        .dtDataBomPara = objChequesPagAvulso.dtBomPara
        .dtDataDeposito = DATA_NULA
        .dValor = objChequesPagAvulso.objInfoChequePag.dValor
        .iStatus = STATUS_PENDENTE
        .sObservacao = objChequesPagAvulso.objInfoChequePag.sObservacao
        .sFavorecido = objChequesPagAvulso.objInfoChequePag.sFavorecido
    
    End With
    
    For Each objInfoParcPag In objChequesPagAvulso.colInfoParcPag
            
        If objInfoParcPag.iSeqCheque <> 0 Then
        
            If objChequePrePag.lFornecedor = 0 Then
                objChequePrePag.lFornecedor = objInfoParcPag.lFornecedor
                objChequePrePag.iFilial = objInfoParcPag.iFilialForn
            Else
            
                If objChequePrePag.lFornecedor <> objInfoParcPag.lFornecedor Or objChequePrePag.iFilial <> objInfoParcPag.iFilialForn Then gError 184862
                
            End If
            
            Set objChequeParc = New ClassChequePrePagParc
            
            With objChequeParc
            
                .lNumIntParcela = objInfoParcPag.lNumIntParc
                .dValorPago = Arredonda_Moeda(objInfoParcPag.dValor + objInfoParcPag.dValorJuros + objInfoParcPag.dValorMulta - objInfoParcPag.dValorDesconto)
                .dValorBaixado = objInfoParcPag.dValor
                .dValorJuros = objInfoParcPag.dValorJuros
                .dValorMulta = objInfoParcPag.dValorMulta
                .dValorDesconto = objInfoParcPag.dValorDesconto
                
            End With
            
            objChequePrePag.colParcelas.Add objChequeParc
    
        End If
        
    Next
    
    lErro = CF("ChequePrePag_Grava_EmTrans", objChequePrePag)
    If lErro <> SUCESSO Then gError 184863
    
    objChequesPagAvulso.lNumIntDocChequePre = objChequePrePag.lNumIntDoc
    
    ChequesPagAvulso_GravarChequePre = SUCESSO
    
    Exit Function
    
Erro_ChequesPagAvulso_GravarChequePre:

    ChequesPagAvulso_GravarChequePre = gErr

    Select Case gErr

        Case 184863
        
        Case 184862
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECEDORES_DIF_NO_CHEQUE", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 184861)

    End Select
    
    Exit Function

End Function

Function ChequePrePag_Reabre(ByVal lNumMovto As Long) As Long

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim lNumIntDocAux As Long

On Error GoTo Erro_ChequePrePag_Reabre
    
     'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 200160
    Next
    
    lErro = Comando_ExecutarPos(alComando(0), "SELECT NumIntDoc FROM ChequePrePag WHERE NumMovto= ? ", _
                    0, lNumIntDocAux, lNumMovto)
    If lErro <> AD_SQL_SUCESSO Then gError 200161

    'Busca Primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 200162

    If lErro <> AD_SQL_SEM_DADOS Then

        'Trava registro contra alterações/Leituras
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> SUCESSO Then gError 200163
    
        lErro = Comando_ExecutarPos(alComando(1), "UPDATE ChequePrePag SET Status = ? , DataDeposito = ?, NumMovto = ? ", alComando(0), STATUS_PENDENTE, DATA_NULA, 0)
        If lErro <> AD_SQL_SUCESSO Then gError 200164
    
    End If

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    ChequePrePag_Reabre = SUCESSO
    
    Exit Function
    
Erro_ChequePrePag_Reabre:

    ChequePrePag_Reabre = gErr

    Select Case gErr
    
        Case 200160
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 200161, 200162
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUEPREPAG", gErr)

        Case 200163
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCKEXCLUSIVE_CHEQUEPREPAG", gErr)

        Case 200164
            Call Rotina_Erro(vbOKOnly, "ERRO_UPDATE_CHEQUEPREPAG", gErr)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 200165)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function
    
End Function

Public Function BorderoPagto_Valida_GeracaoArq(ByVal lNumIntBordero As Long) As Long

Dim lErro As Long
Dim objDetPag As ClassDetArqCNABPag
Dim objArq As New ClassArqCNABPag
Dim sDadosTitulo As String
Dim sCgc As String
Dim objBorderoPagto As New ClassBorderoPagto
Dim objCCI As New ClassContasCorrentesInternas
Dim bAcertoBanco As Boolean, vbMsgBox As VbMsgBoxResult, bErroBanco As Boolean

On Error GoTo Erro_BorderoPagto_Valida_GeracaoArq

    objArq.lNumIntBordero = lNumIntBordero
    
    lErro = CF("ArqCNABPag_Carregar_DetPag", objArq)
    If lErro <> SUCESSO Then gError 198685
    
    bAcertoBanco = False
    bErroBanco = False
    objBorderoPagto.lNumIntBordero = lNumIntBordero
    
    lErro = CF("BorderoPagto_Le", objBorderoPagto)
    If lErro <> SUCESSO And lErro <> 62432 Then gError 198685

    'Lê a conta corrente do bordero de pagamento
    lErro = CF("ContaCorrenteInt_Le", objBorderoPagto.iCodConta, objCCI)
    If lErro <> SUCESSO And lErro <> 11807 Then gError 198685

    For Each objDetPag In objArq.colDetArqCNABPag
    
        sDadosTitulo = "Título: " & CStr(objDetPag.lNumTitulo) & ", Parcela: " & CStr(objDetPag.iNumParcela) & " e Fornecedor: " & CStr(objDetPag.lFornecedor)
    
        If objDetPag.iTipoCobranca <> TIPO_COBRANCA_BANCARIA Then
        
            If (Len(Trim(objDetPag.sAgenciaFavorecido)) = 0 Or Len(Trim(objDetPag.sContaFavorecido)) = 0 Or objDetPag.iBancoFavorecido = 0) Then gError 198686
                
            Call Formata_String_Numero(objDetPag.sCGCFavorecido, sCgc)
               
            If Len(Trim(sCgc)) = 0 Then gError 198697
            
            vbMsgBox = vbYes
            'Se não acertou o banco ainda
            If Not bAcertoBanco Then
                'Se não é o mesmo banco não pode ser depósito
                'Se é o mesmo banco não pode ser doc
                If objCCI.iCodBanco <> objDetPag.iBancoFavorecido Then
                    If objDetPag.iTipoCobranca = TIPO_COBRANCA_DEP_CONTA Then
                        vbMsgBox = Rotina_Aviso(vbYesNo, "AVISO_BANCO_DIF_DEPOSITO", sDadosTitulo, CStr(objCCI.iCodBanco))
                        bErroBanco = True
                    End If
                Else
                    If objDetPag.iTipoCobranca = TIPO_COBRANCA_DOC Then
                        vbMsgBox = Rotina_Aviso(vbYesNo, "AVISO_BANCO_IGUAL_DOC", sDadosTitulo, CStr(objCCI.iCodBanco))
                        bErroBanco = True
                    End If
                End If
            End If
            'Se deu erro e não quis o acerto sai por erro e não continua a gerar o arquivo
            If vbMsgBox = vbNo Then gError 198685
            
            'Se deu erro e quer que acerte chama a função de acerto e indica que já
            'acertou para não precisar validar os demais
            If vbMsgBox = vbYes And bErroBanco Then
                bAcertoBanco = True
                lErro = BorderoPagto_Valida_GeracaoArq_Acerta(objBorderoPagto, objArq, objCCI)
                If lErro <> SUCESSO Then gError 198685
            End If
            
        Else
            
            If Len(Trim(objDetPag.sCodigoDeBarras)) = 0 Then gError 198689
        
            lErro = CB_Valida(objDetPag.sCodigoDeBarras, CB_VALIDACAO_TIPO_BATCH, sDadosTitulo)
            If lErro <> SUCESSO Then gError 198687
        
        End If
    
    Next
    
    BorderoPagto_Valida_GeracaoArq = SUCESSO

    Exit Function

Erro_BorderoPagto_Valida_GeracaoArq:

    BorderoPagto_Valida_GeracaoArq = gErr
    
    Select Case gErr
    
        Case 198685, 198687
        
        Case 198686
            Call Rotina_Erro(vbOKOnly, "ERRO_FILIALFORN_SEM_INFO_CTA", gErr, objDetPag.lFornecedor, objDetPag.iFilialForn)
       
       Case 198689
            Call Rotina_Erro(vbOKOnly, "ERRO_CODIGOBARRAS_NAO_PREENCHIDO_BATCH", gErr, sDadosTitulo)
            
        Case 198697
            Call Rotina_Erro(vbOKOnly, "ERRO_FILIALFORN_SEM_CGC", gErr, objDetPag.lFornecedor, objDetPag.iFilialForn)
       
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 198688)
    
    End Select
    
    Exit Function

End Function

Public Function BorderoPagto_Valida_GeracaoArq_Acerta(ByVal objBorderoPagto As ClassBorderoPagto, ByVal objArq As ClassArqCNABPag, ByVal objCCI As ClassContasCorrentesInternas) As Long

Dim lErro As Long
Dim lTransacao As Long
Dim alComando(1 To 3) As Long
Dim lComando As Long
Dim iIndice As Integer
Dim objDetPag As ClassDetArqCNABPag
Dim iTipoPagto As Integer
Dim lNumIntDocAux As Long
Dim sTabela As String

On Error GoTo Erro_BorderoPagto_Valida_GeracaoArq_Acerta

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 205018

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 205019
    Next
    
    For Each objDetPag In objArq.colDetArqCNABPag

        iTipoPagto = -1
        If objDetPag.iTipoCobranca <> TIPO_COBRANCA_BANCARIA Then

            If objCCI.iCodBanco <> objDetPag.iBancoFavorecido Then
                If objDetPag.iTipoCobranca = TIPO_COBRANCA_DEP_CONTA Then
                    iTipoPagto = TIPO_COBRANCA_DOC
                End If
            Else
                If objDetPag.iTipoCobranca = TIPO_COBRANCA_DOC Then
                    iTipoPagto = TIPO_COBRANCA_DEP_CONTA
                End If
            End If

        End If
        If iTipoPagto <> -1 Then
        
            lComando = alComando(1)
            sTabela = "ParcelasPag"
            lErro = Comando_ExecutarPos(alComando(1), "SELECT NumIntDoc FROM ParcelasPag WHERE NumIntDoc = ? ", 0, lNumIntDocAux, objDetPag.lNumIntParcela)
            If lErro <> AD_SQL_SUCESSO Then gError 205023
            
            lErro = Comando_BuscarPrimeiro(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205024
            
            If lErro <> AD_SQL_SUCESSO Then
                lComando = alComando(2)
                sTabela = "ParcelasPagBaixadas"
                lErro = Comando_ExecutarPos(alComando(2), "SELECT NumIntDoc FROM ParcelasPagBaixadas WHERE NumIntDoc = ? ", 0, lNumIntDocAux, objDetPag.lNumIntParcela)
                If lErro <> AD_SQL_SUCESSO Then gError 205025
                
                lErro = Comando_BuscarPrimeiro(alComando(2))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205026
            End If
            
            If lErro <> AD_SQL_SUCESSO Then gError 205027

            lErro = Comando_ExecutarPos(alComando(3), "UPDATE " & sTabela & " SET TipoCobranca = ? ", lComando, iTipoPagto)
            If lErro <> AD_SQL_SUCESSO Then gError 205020
        End If

    Next
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 205021

    BorderoPagto_Valida_GeracaoArq_Acerta = SUCESSO

    Exit Function

Erro_BorderoPagto_Valida_GeracaoArq_Acerta:

    BorderoPagto_Valida_GeracaoArq_Acerta = gErr
    
    Select Case gErr
 
        Case 205018
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 205019
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 205020
            Call Rotina_Erro(vbOKOnly, "ERRO_UPDATE_PARCELASREC", gErr)

        Case 205021
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case 205023, 205024
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_REC", gErr)
            
        Case 205025, 205026
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PARCELAS_REC_BAIXADAS", gErr)
            
        Case 205027
            Call Rotina_Erro(vbOKOnly, "ERRO_PARCELA_RECEBER_NAO_CADASTRADA1", gErr, objDetPag.lNumIntParcela)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 205022)
    
    End Select
    
    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    'Desfaz Transação
    Call Transacao_Rollback
    
    Exit Function
    
End Function

Private Function MovCCI_Deposito_CancBaixaAdiantPag(ByVal lNumIntBaixa As Long, ByVal dValor As Double, lNumMovto As Long) As Long
'inclui o deposito correspondente ao cancelamento da baixa de adiatamento de fornecedor

Dim lErro As Long, objMovContaCorrente As New ClassMovContaCorrente
Dim alComando(1 To 1) As Long
Dim iIndice As Integer
Dim iCodConta As Integer, dtData As Date

On Error GoTo Erro_MovCCI_Deposito_CancBaixaAdiantPag

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 199634
    Next

    lErro = Comando_Executar(alComando(1), "SELECT NumMovto, Valor, CodConta,DataMovimento FROM MovimentosContaCorrente WHERE Tipo = ? AND NumRefInterna = ?", lNumMovto, dValor, iCodConta, dtData, MOVCCI_BAIXA_PAGANTECIPADO, lNumIntBaixa)
    If lErro <> AD_SQL_SUCESSO Then gError 199635

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 199636
    
    If lErro <> AD_SQL_SUCESSO Then gError 199637

    'inclui o deposito correspondente ao valor pago
    objMovContaCorrente.dtDataMovimento = dtData 'gdtDataAtual
    objMovContaCorrente.dValor = dValor
    objMovContaCorrente.iCodConta = iCodConta
    objMovContaCorrente.iConciliado = NAO_CONCILIADO
    objMovContaCorrente.iExcluido = NAO_EXCLUIDO
    objMovContaCorrente.iFavorecido = 0
    'objMovContaCorrente.iFilialEmpresa = 0 'vai ser obtida
    objMovContaCorrente.iPortador = 0
    objMovContaCorrente.iTipo = MOVCCI_CANC_BAIXA_PAGTO_ANTECIPADO
    objMovContaCorrente.iTipoMeioPagto = DINHEIRO
    objMovContaCorrente.lNumero = 0 'vai ser o numero do Sequencial ?
    'objMovContaCorrente.lNumMovto = 0 'vai ser obtido
    objMovContaCorrente.lNumRefInterna = lNumIntBaixa
    'objMovContaCorrente.lSequencial = 0 'vai ser obtido
    objMovContaCorrente.sHistorico = "Cancelamento de baixa de adiantamento de forn."
    objMovContaCorrente.sNumRefExterna = ""

    lErro = MovCCI_Deposito_CancBaixaAdiantPag1(objMovContaCorrente)
    If lErro <> SUCESSO Then gError 199638

    For iIndice = LBound(alComando) To UBound(alComando)
         Call Comando_Fechar(alComando(iIndice))
    Next

    MovCCI_Deposito_CancBaixaAdiantPag = SUCESSO

    Exit Function

Erro_MovCCI_Deposito_CancBaixaAdiantPag:

    MovCCI_Deposito_CancBaixaAdiantPag = gErr

    Select Case gErr

        Case 199634
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 199635, 199636
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCONTACORRENTE", gErr)

        Case 199637
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCONTACORRENTE_INEXISTENTE", gErr)

        Case 199638

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 199639)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
         Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function MovCCI_Deposito_CancBaixaAdiantPag1(ByVal objMovContaCorrente As ClassMovContaCorrente) As Long

Dim lErro As Long, lNumMovto As Long, dtData As Date, lSeq As Long, objContasCorrentesInternas As New ClassContasCorrentesInternas, iFilialEmpresa As Integer
Dim lComando As Long, lComando1 As Long

On Error GoTo Erro_MovCCI_Deposito_CancBaixaAdiantPag1

    lComando = 0
    lComando1 = 0

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 199640

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 199641

    'Pega o numero do proximo movCci
    lErro = CF("MovCCI_Automatico", lNumMovto)
    If lErro <> SUCESSO Then gError 199642

    objMovContaCorrente.lNumMovto = lNumMovto

    'le dados da cta corrente para obter a filialempresa correspondente a ela
    lErro = CF("ContaCorrenteInt_Le", objMovContaCorrente.iCodConta, objContasCorrentesInternas)
    If lErro <> SUCESSO Then gError 199643

    objMovContaCorrente.iFilialEmpresa = objContasCorrentesInternas.iFilialEmpresa

    'obtem o Sequencial do movto na cta
    lErro = CF("CtaCorrente_Sequencial_Automatico", objMovContaCorrente.iCodConta, lSeq)
    If lErro <> SUCESSO Then gError 199644

    objMovContaCorrente.lSequencial = lSeq
    objMovContaCorrente.lNumero = lSeq 'deposito em dinheiro

    'Insere o Deposito na Tabela MovimentosContaCorrente
    lErro = Comando_Executar(lComando1, "INSERT INTO MovimentosContaCorrente (NumMovto, FilialEmpresa, CodConta, Sequencial, Tipo, Excluido, TipoMeioPagto, DataMovimento, Valor, Historico, NumRefExterna, NumRefInterna) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)", lNumMovto, objMovContaCorrente.iFilialEmpresa, _
        objMovContaCorrente.iCodConta, objMovContaCorrente.lSequencial, objMovContaCorrente.iTipo, objMovContaCorrente.iExcluido, objMovContaCorrente.iTipoMeioPagto, objMovContaCorrente.dtDataMovimento, objMovContaCorrente.dValor, objMovContaCorrente.sHistorico, objMovContaCorrente.sNumRefExterna, objMovContaCorrente.lNumRefInterna)
    If lErro <> AD_SQL_SUCESSO Then gError 199645

    dtData = objMovContaCorrente.dtDataMovimento

    'Atualiza os dados em CCIMovDia
    lErro = CF("CCIMovDia_Grava", objMovContaCorrente.iCodConta, dtData, -objMovContaCorrente.dValor)
    If lErro <> SUCESSO Then gError 199646

    'Atualiza os dados em CCIMov
    lErro = CF("CCIMov_Grava", objMovContaCorrente.iCodConta, Year(dtData), Month(dtData), -objMovContaCorrente.dValor)
    If lErro <> SUCESSO Then gError 199647

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    MovCCI_Deposito_CancBaixaAdiantPag1 = SUCESSO

    Exit Function

Erro_MovCCI_Deposito_CancBaixaAdiantPag1:

    MovCCI_Deposito_CancBaixaAdiantPag1 = gErr

    Select Case gErr

        Case 199640, 199641
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 199642 To 199644, 199646, 199647

        Case 199645
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MOVIMENTOSCONTACORRENTE", gErr, objMovContaCorrente.iCodConta)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 199648)

    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Function BaixaPagtoAntecCancelar_Grava(ByVal lNumIntBaixa As Long) As Long
'cancela uma baixa que havia sido efetuada abatendo-se um adiantamento dado a um fornecedor

Dim lErro As Long
Dim objContabil As New ClassContabil
Dim dValor As Double
Dim alComando(1 To 4) As Long
Dim objAntecipPag As New ClassAntecipPag
Dim dValorPago As Double
Dim lNumMovto As Long
Dim iIndice As Integer
Dim lNumIntDocOrigem As Long
Dim lTransacao As Long

On Error GoTo Erro_BaixaPagtoAntecCancelar_Grava

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 199668

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 199620
    Next

    lErro = Comando_Executar(alComando(4), "SELECT Valor FROM BaixaPagAntecipados WHERE NumIntDoc = ?", dValor, lNumIntBaixa)
    If lErro <> AD_SQL_SUCESSO Then gError 199621
    
    lErro = Comando_BuscarPrimeiro(alComando(4))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 199622
    
    If lErro <> AD_SQL_SUCESSO Then gError 199623

    'Insere o registro em BaixaPagAntecipados
    lErro = Comando_Executar(alComando(2), "DELETE FROM BaixaPagAntecipados WHERE NumIntDoc = ?", lNumIntBaixa)
    If lErro <> AD_SQL_SUCESSO Then gError 199624
    
    lErro = Comando_Executar(alComando(1), "SELECT Valor, NumIntDocOrigem FROM BaixaPagAntecipadosItem WHERE NumIntBaixa = ?", dValorPago, lNumIntDocOrigem, lNumIntBaixa)
    If lErro <> AD_SQL_SUCESSO Then gError 199625
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 199626
    
    Do While lErro = AD_SQL_SUCESSO
    
        objAntecipPag.lNumIntPag = lNumIntDocOrigem
    
        'altera o saldo do pagto antecipado
        lErro = PagtoAntecipado_AlterarSaldo(objAntecipPag, dValorPago)
        If lErro <> SUCESSO Then gError 199627
        
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 199628

    Loop

    lErro = Comando_Executar(alComando(3), "DELETE FROM BaixaPagAntecipadosItem WHERE NumIntBaixa = ?", lNumIntBaixa)
    If lErro <> AD_SQL_SUCESSO Then gError 199629
    
    lErro = MovCCI_Deposito_CancBaixaAdiantPag(lNumIntBaixa, dValor, lNumMovto)
    If lErro <> SUCESSO Then gError 199630

    'se o módulo de contabilidade estiver ativo
    If gcolModulo.Ativo(MODULO_CONTABILIDADE) = MODULO_ATIVO Then
    
        lErro = objContabil.Contabil_Inicializa_Contabilidade1(Me, MODULO_CONTASAPAGAR, "BaixaAntecipCredFornecedor")
        If lErro <> SUCESSO Then gError 199631

        lErro = objContabil.Contabil_Exclui(lNumMovto, CONTABIL_EXCLUI_EFETIVO)
        If lErro <> SUCESSO Then gError 199632
        
    End If

    For iIndice = LBound(alComando) To UBound(alComando)
         Call Comando_Fechar(alComando(iIndice))
    Next

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 199669

    BaixaPagtoAntecCancelar_Grava = SUCESSO

    Exit Function

Erro_BaixaPagtoAntecCancelar_Grava:

    BaixaPagtoAntecCancelar_Grava = gErr

    Select Case gErr

        Case 199620
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 199621, 199622
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BAIXAPAGANTECIPADOS", gErr)

        Case 199623
            Call Rotina_Erro(vbOKOnly, "ERRO_BAIXAPAGANTECIPADOS_NAO_CADASTRADO", gErr, lNumIntBaixa)

        Case 199624
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_BAIXAPAGANTECIPADOS", gErr)

        Case 199625, 199626, 199628
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BAIXAPAGANTECIPADOSITEM", gErr)

        Case 199627, 199630 To 199632

        Case 199629
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_BAIXAPAGANTECIPADOSITEM", gErr)

        Case 199668
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 199669
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 199633)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
         Call Comando_Fechar(alComando(iIndice))
    Next

    Call Transacao_Rollback

    Exit Function

End Function

Function BorderoDescChq_Le_Baixas(ByVal objBorderoDescChq As ClassBorderoDescChq, ByVal colBaixasRec As Collection, ByVal colBaixasParcRec As Collection) As Long

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer
Dim lNumIntBaixa As Long
Dim lNumIntBaixaAnt As Long
Dim lNumIntBaixaParc As Long
Dim objCheque As ClassChequePre
Dim objBaixaRec As ClassBaixaReceber
Dim objBaixaParcRec As ClassBaixaParcRec

On Error GoTo Erro_BorderoDescChq_Le_Baixas

    'Abertura comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 182000
    Next
    
    For iIndice = objBorderoDescChq.colChequePre.Count To 1 Step -1
        objBorderoDescChq.colChequePre.Remove iIndice
    Next
    
'    'lê os cheques vinculados ao borderoChequePre em questão
'    lErro = CF("BorderoDescChq_Le_ChequesPre", objBorderoDescChq.lNumBordero, objBorderoDescChq.colChequePre, BORDERO_DESCONTO)
'    If lErro <> SUCESSO And lErro <> 109333 Then gError 182007
'
'    For Each objCheque In objBorderoDescChq.colChequePre

        'lErro = Comando_Executar(alComando(1), "SELECT B.NumIntBaixa, BP.NumIntDoc FROM MovimentosContaCorrente AS M, BaixasRec AS B, BaixasParcRec AS BP, ChequeParcelaRec AS C WHERE M.Tipo = ? AND M.NumRefInterna = ? AND M.NumMovto=B.NumMovCta AND B.NumIntBaixa=BP.NumIntBaixa AND C.NumIntCheque = ? AND BP.NumIntParcela=C.NumIntParcela AND BP.Status <> ? ORDER BY B.NumIntBaixa, BP.NumIntDoc", lNumIntBaixa, lNumIntBaixaParc, MOVCCI_DEP_DESCONTO_CHEQUE, objBorderoDescChq.lNumBordero, objCheque.lNumIntCheque, STATUS_EXCLUIDO)
        lErro = Comando_Executar(alComando(1), "SELECT B.NumIntBaixa, BP.NumIntDoc FROM MovimentosContaCorrente AS M, BaixasRec AS B, BaixasParcRec AS BP WHERE M.Tipo = ? AND M.NumRefInterna = ? AND M.NumMovto=B.NumMovCta AND B.NumIntBaixa=BP.NumIntBaixa AND BP.Status <> ? ORDER BY B.NumIntBaixa, BP.NumIntDoc", lNumIntBaixa, lNumIntBaixaParc, MOVCCI_DEP_DESCONTO_CHEQUE, objBorderoDescChq.lNumBordero, STATUS_EXCLUIDO)
        If lErro <> AD_SQL_SUCESSO Then gError 182001
        
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 182002
            
        Do While lErro = AD_SQL_SUCESSO
            
            If lNumIntBaixaAnt <> lNumIntBaixa Then
            
                Set objBaixaRec = New ClassBaixaReceber
                
                objBaixaRec.lNumIntBaixa = lNumIntBaixa
                
                colBaixasRec.Add objBaixaRec
                
                lNumIntBaixaAnt = lNumIntBaixa
                
            End If
            
            Set objBaixaParcRec = New ClassBaixaParcRec
            
            objBaixaParcRec.lNumIntDoc = lNumIntBaixaParc
            
            colBaixasParcRec.Add objBaixaParcRec
                        
            lErro = Comando_BuscarProximo(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 182003
                
        Loop
        
'    Next
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    BorderoDescChq_Le_Baixas = SUCESSO
    
    Exit Function
    
Erro_BorderoDescChq_Le_Baixas:

    BorderoDescChq_Le_Baixas = gErr

    Select Case gErr
        
        Case 182000
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 182001, 182002, 182003
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BAIXASPARCREC", gErr)
            
        Case 182007
               
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 182004)

    End Select
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Function BaixaRecCancelar_Efetua_BordDescChq(ByVal objBorderoDescChq As ClassBorderoDescChq, ByVal sHistoricoCancelamento As String) As Long

Dim lErro As Long
Dim objBaixaRecCancelar As New ClassBaixaRecCancelar
Dim objInfoBaixaRecCancelar As New ClassInfoBaixaRecCancelar
Dim tInfoBaixaRecCancelar As typeInfoBaixaRecCancelar
Dim alComando(1 To 1) As Long
Dim iIndice As Integer

On Error GoTo Erro_BaixaRecCancelar_Efetua_BordDescChq

    'Abertura comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 126253
    Next

    With tInfoBaixaRecCancelar

        lErro = Comando_Executar(alComando(1), "SELECT BP.NumIntDoc, M.CodConta, BP.NumIntBaixa, BP.Sequencial, BP.NumIntParcela, BP.ValorBaixado, BP.ValorDesconto, BP.ValorJuros, BP.ValorMulta, BP.ValorRecebido FROM MovimentosContaCorrente AS M, BaixasRec AS B, BaixasParcRec AS BP WHERE M.Tipo = ? AND M.NumRefInterna = ? AND M.NumMovto=B.NumMovCta AND B.NumIntBaixa=BP.NumIntBaixa AND BP.Status <> ? ORDER BY B.NumIntBaixa, BP.NumIntDoc", .lNumIntBaixaParcRec, .iCodConta, .lNumIntBaixa, .iSequencial, .lNumIntParcela, .dValorBaixadoCanc, .dValorDescontoCanc, .dValorJurosCanc, .dValorMultaCanc, .dValorBaixado, MOVCCI_DEP_DESCONTO_CHEQUE, objBorderoDescChq.lNumBordero, STATUS_EXCLUIDO)
        If lErro <> AD_SQL_SUCESSO Then gError 109920
    
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109921
        
        'movimento naum existe
        If lErro = AD_SQL_SEM_DADOS Then gError 109922
        
        Do While lErro = AD_SQL_SUCESSO
            
            Set objInfoBaixaRecCancelar = New ClassInfoBaixaRecCancelar
            
            objInfoBaixaRecCancelar.dValorDescontoCanc = .dValorDescontoCanc
            objInfoBaixaRecCancelar.dValorJurosCanc = .dValorJurosCanc
            objInfoBaixaRecCancelar.dValorMultaCanc = .dValorMultaCanc
            objInfoBaixaRecCancelar.dValorBaixadoCanc = .dValorBaixadoCanc
            objInfoBaixaRecCancelar.dValorTotalCanc = .dValorBaixado
            objInfoBaixaRecCancelar.dtDataCancelamento = gdtDataAtual
            objInfoBaixaRecCancelar.lNumIntParcela = .lNumIntParcela
            objInfoBaixaRecCancelar.iSequencial = .iSequencial
            objInfoBaixaRecCancelar.iItemSelecionado = MARCADO
            objInfoBaixaRecCancelar.lNumIntBaixa = .lNumIntBaixa
            objInfoBaixaRecCancelar.lNumIntBaixaParcRec = .lNumIntBaixaParcRec
            objInfoBaixaRecCancelar.iCodConta = .iCodConta
            objBaixaRecCancelar.iTipoCancelamento = TIPOCONCELAMENTO_DEVCHQ
            objBaixaRecCancelar.iTipoBaixas = MOTIVO_RECEBIMENTO
            objBaixaRecCancelar.dtDataCancelamento = gdtDataAtual
            objBaixaRecCancelar.sHistoricoCancelamento = sHistoricoCancelamento '& objCheque.lSequencialBack
            
            objBaixaRecCancelar.colInfoBaixaRecCancelar.Add objInfoBaixaRecCancelar
                                        
            lErro = Comando_BuscarProximo(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112045
                
        Loop
        
        'atualizar a conta Corrrente
        lErro = BaixaRecCancelar_BaixaBaixa_Grava(objBaixaRecCancelar)
        If lErro <> SUCESSO Then gError 109923
                   
    End With
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    BaixaRecCancelar_Efetua_BordDescChq = SUCESSO
    
    Exit Function
    
Erro_BaixaRecCancelar_Efetua_BordDescChq:

    BaixaRecCancelar_Efetua_BordDescChq = gErr

    Select Case gErr
        
        Case 109920, 109921, 112045
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BAIXASPARCREC", gErr)
        
        Case 109922
            Call Rotina_Erro(vbOKOnly, "ERRO_BAIXASPARCREC_NAO_EXISTENTE", gErr)
        
        Case 109923
        
        Case 126253
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148407)

    End Select
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Function RetPagto_Importa(ByVal sNomeDir As String, ByVal sNomeArq As String) As Long

Dim lErro As Long
Dim alComando(0 To 2) As Long
Dim iIndice As Integer
Dim lTransacao As Long
Dim iTipoReg As Integer
Dim sRegistro As String
Dim sTipoOper As String
Dim objDet As ClassRetPagtoDet
Dim objArq As ClassRetPagto
Dim iSeq As Integer
Dim sFinalidade As String
Dim iLinha As Integer
Dim lNumIntDoc As Long
Dim objRelatorio As New AdmRelatorio

On Error GoTo Erro_RetPagto_Importa

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 205506

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 205507
    Next

    'Abre o arquivo de retorno
    Open sNomeDir & sNomeArq For Input As #2
    
    'Até chegar ao fim do arquivo
    iLinha = 0
    Do While Not EOF(2)
    
        iLinha = iLinha + 1
    
        'Busca o próximo registro do arquivo (na 1a vez vai ser o de header)
        Line Input #2, sRegistro
        
        If Len(Trim(sRegistro)) = 0 Then Exit Do
        If Len(sRegistro) <> 240 Then gError 205508
        
        iTipoReg = Mid(sRegistro, 8, 1)
        
        Select Case iTipoReg
        
            Case 0 'Header Arquivo
            
                Set objArq = New ClassRetPagto
            
                objArq.dHoraGeracao = CDbl(CDate(Mid(sRegistro, 152, 2) & ":" & Mid(sRegistro, 154, 2) & ":" & Mid(sRegistro, 156, 2)))
                objArq.dHoraImport = CDbl(Time)
                objArq.dtDataGeracao = CDate(Mid(sRegistro, 144, 2) & "/" & Mid(sRegistro, 146, 2) & "/" & Mid(sRegistro, 148, 4))
                objArq.dtDataImport = Date
                objArq.iBanco = StrParaInt(Mid(sRegistro, 1, 3))
                objArq.lSeqArquivo = StrParaLong(Mid(sRegistro, 158, 6))
                objArq.sAgencia = Format(Trim(Mid(sRegistro, 53, 6)), "#####-#")
                objArq.sConta = Format(Trim(Mid(sRegistro, 59, 13)), "############-#")
                objArq.sNomeArq = sNomeArq
                objArq.sNomeBanco = Trim(Mid(sRegistro, 103, 30))
                objArq.sNomeEmpresa = Trim(Mid(sRegistro, 73, 30))
                
                'Le a tabelaRetPagto
                lErro = Comando_Executar(alComando(0), "SELECT NumIntDoc FROM RetPagto WHERE DataGeracao= ? AND SeqArquivo = ? AND NomeEmpresa = ?", _
                            lNumIntDoc, objArq.dtDataGeracao, objArq.lSeqArquivo, objArq.sNomeEmpresa)
                If lErro <> AD_SQL_SUCESSO Then gError 205509
            
                'Busca Primeiro
                lErro = Comando_BuscarPrimeiro(alComando(0))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205510
            
                'Se existir => UPDATE, senão => INSERT
                If lErro = AD_SQL_SUCESSO Then gError 205511
            
                'Obter NumIntDoc
                lErro = CF("Config_ObterNumInt", "CPRConfig", "NUM_INT_PROX_RETPAGTO", lNumIntDoc)
                If lErro <> SUCESSO Then gError 205512
            
                objArq.lNumIntDoc = lNumIntDoc
            
                lErro = Comando_Executar(alComando(1), "INSERT INTO RetPagto( NumIntDoc, NomeArq, DataImport, HoraImport, " & _
                        "Banco, Agencia, Conta, DataGeracao, HoraGeracao, " & _
                        "SeqArquivo, NomeEmpresa, NomeBanco) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)", _
                        objArq.lNumIntDoc, objArq.sNomeArq, objArq.dtDataImport, objArq.dHoraImport, _
                        objArq.iBanco, objArq.sAgencia, objArq.sConta, objArq.dtDataGeracao, objArq.dHoraGeracao, _
                        objArq.lSeqArquivo, objArq.sNomeEmpresa, objArq.sNomeBanco)
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205513
                
            Case 1 'Header Lote
            
                sFinalidade = Trim(Mid(sRegistro, 12, 2))
            
            Case 3 ' Detalhe
            
                sTipoOper = Mid(sRegistro, 14, 1)
                
                If objArq Is Nothing Then gError 205514
                
                Set objDet = New ClassRetPagtoDet
                
                Select Case sTipoOper
                
                    Case "A"
                    
                        iSeq = iSeq + 1
                        objDet.dtDataPagto = CDate(Mid(sRegistro, 94, 2) & "/" & Mid(sRegistro, 96, 2) & "/" & Mid(sRegistro, 98, 4))
                        objDet.dtDataReal = CDate(Mid(sRegistro, 155, 2) & "/" & Mid(sRegistro, 157, 2) & "/" & Mid(sRegistro, 159, 4))
                        objDet.dValorPagto = StrParaLong(Mid(sRegistro, 120, 15)) / 100
                        objDet.dValorReal = StrParaLong(Mid(sRegistro, 163, 15)) / 100
                        objDet.iBanco = StrParaInt(Mid(sRegistro, 21, 3))
                        objDet.iCodInstMov = StrParaInt(Mid(sRegistro, 17, 2))
                        objDet.iLote = StrParaInt(Mid(sRegistro, 4, 4))
                        objDet.iSeq = iSeq
                        objDet.iSeqLote = StrParaInt(Mid(sRegistro, 9, 5))
                        objDet.iTipo = 1
                        objDet.iTipoMov = StrParaInt(Mid(sRegistro, 15, 1))
                        objDet.lNumIntDocRet = objArq.lNumIntDoc
                        objDet.sAgencia = Format(Trim(Mid(sRegistro, 24, 6)), "#####-#")
                        objDet.sCodigoBarras = ""
                        objDet.sCodOCR1 = Trim(Mid(sRegistro, 231, 2))
                        objDet.sCodOCR2 = Trim(Mid(sRegistro, 233, 2))
                        objDet.sCodOCR3 = Trim(Mid(sRegistro, 235, 2))
                        objDet.sCodOCR4 = Trim(Mid(sRegistro, 237, 2))
                        objDet.sCodOCR5 = Trim(Mid(sRegistro, 239, 2))
                        objDet.sConta = Format(Trim(Mid(sRegistro, 30, 13)), "############-#")
                        objDet.sFinalidade = sFinalidade
                        objDet.sNomeFavorecido = Trim(Mid(sRegistro, 44, 30))
                        objDet.sNossoNumero = Trim(Mid(sRegistro, 135, 20))
                        objDet.sSeuNumero = Trim(Mid(sRegistro, 74, 20))
                    
                    Case "J"
                    
                        iSeq = iSeq + 1
                        objDet.dtDataPagto = CDate(Mid(sRegistro, 92, 2) & "/" & Mid(sRegistro, 94, 2) & "/" & Mid(sRegistro, 96, 4))
                        objDet.dtDataReal = CDate(Mid(sRegistro, 145, 2) & "/" & Mid(sRegistro, 147, 2) & "/" & Mid(sRegistro, 149, 4))
                        objDet.dValorPagto = StrParaLong(Mid(sRegistro, 100, 15)) / 100
                        objDet.dValorReal = StrParaLong(Mid(sRegistro, 153, 15)) / 100
                        objDet.iBanco = 0
                        objDet.iCodInstMov = StrParaInt(Mid(sRegistro, 17, 2))
                        objDet.iLote = StrParaInt(Mid(sRegistro, 4, 4))
                        objDet.iSeq = iSeq
                        objDet.iSeqLote = StrParaInt(Mid(sRegistro, 9, 5))
                        objDet.iTipo = 2
                        objDet.iTipoMov = StrParaInt(Mid(sRegistro, 15, 1))
                        objDet.lNumIntDocRet = objArq.lNumIntDoc
                        objDet.sAgencia = ""
                        objDet.sCodigoBarras = Trim(Mid(sRegistro, 18, 44))
                        objDet.sCodOCR1 = Trim(Mid(sRegistro, 231, 2))
                        objDet.sCodOCR2 = Trim(Mid(sRegistro, 233, 2))
                        objDet.sCodOCR3 = Trim(Mid(sRegistro, 235, 2))
                        objDet.sCodOCR4 = Trim(Mid(sRegistro, 237, 2))
                        objDet.sCodOCR5 = Trim(Mid(sRegistro, 239, 2))
                        objDet.sConta = ""
                        objDet.sFinalidade = sFinalidade
                        objDet.sNomeFavorecido = Trim(Mid(sRegistro, 62, 30))
                        objDet.sNossoNumero = Trim(Mid(sRegistro, 203, 20))
                        objDet.sSeuNumero = Trim(Mid(sRegistro, 183, 20))
                        
                    Case Else
                        'NÃO TRATA POR ENQUANTO
                    
                End Select
                
                If objDet.iTipo <> 0 Then
                
                    lErro = Comando_Executar(alComando(2), "INSERT INTO RetPagtoDet( NumIntDocRet, Seq, Lote, SeqLote, " & _
                            "TipoMov, CodInstMov, Banco, Agencia, Conta, " & _
                            "NomeFavorecido, SeuNumero, NossoNumero, DataPagto, ValorPagto, " & _
                            "DataReal, ValorReal, Finalidade, CodOCR1, CodOCR2, " & _
                            "CodOCR3, CodOCR4, CodOCR5, Tipo, CodigoBarras) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                            objDet.lNumIntDocRet, objDet.iSeq, objDet.iLote, objDet.iSeqLote, _
                            objDet.iTipoMov, objDet.iCodInstMov, objDet.iBanco, objDet.sAgencia, objDet.sConta, _
                            objDet.sNomeFavorecido, objDet.sSeuNumero, objDet.sNossoNumero, objDet.dtDataPagto, objDet.dValorPagto, _
                            objDet.dtDataReal, objDet.dValorReal, objDet.sFinalidade, objDet.sCodOCR1, objDet.sCodOCR2, _
                            objDet.sCodOCR3, objDet.sCodOCR4, objDet.sCodOCR5, objDet.iTipo, objDet.sCodigoBarras)
                    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205515
                
                End If
            
            Case Else
                'NÃO TRATA POR ENQUANTO
        
        End Select
        
    Loop

    Close #2

    For iIndice = LBound(alComando) To UBound(alComando)
         Call Comando_Fechar(alComando(iIndice))
    Next

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 205516
    
    lErro = objRelatorio.ExecutarDireto("Retorno de Pagamentos", "NumIntDoc = " & Forprint_ConvLong(lNumIntDoc), 1)
    If lErro <> SUCESSO Then gError 205528

    RetPagto_Importa = SUCESSO

    Exit Function

Erro_RetPagto_Importa:

    RetPagto_Importa = gErr

    Select Case gErr

        Case 205506
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 205507
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 205508
            Call Rotina_Erro(vbOKOnly, "ERRO_RETPAGTO_LAYOUT_ERRADO", gErr, Len(Trim(sRegistro)), iLinha)

        Case 205509, 205510
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_RETPAGTO", gErr)

        Case 205511
            Call Rotina_Erro(vbOKOnly, "ERRO_RETPAGTO_JA_IMPORTADO", gErr, objArq.lSeqArquivo, objArq.dtDataGeracao, objArq.sNomeEmpresa)
        
        Case 205512, 205528
        
        Case 205513, 205515
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_RETPAGTO", gErr)
            
        Case 205514
            Call Rotina_Erro(vbOKOnly, "ERRO_RETPAGTO_LAYOUT_ERRADO2", gErr)

        Case 205516
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 205517)

    End Select

    Close #2

    For iIndice = LBound(alComando) To UBound(alComando)
         Call Comando_Fechar(alComando(iIndice))
    Next

    Call Transacao_Rollback

    Exit Function

End Function

Function Boleto_Gera_Arquivo(sBoleto As String, ByVal objTitRec As ClassTituloReceber, ByVal objParcRec As ClassParcelaReceber, Optional ByVal bForcaGeracaoArq As Boolean = False) As Long

Dim lErro As Long
Dim objRelatorio As New AdmRelatorio
Dim lIdBoleto As Long, sProxNossoNumero As String
Dim objCobrador As New ClassCobrador, sBuffer As String
Dim objBanco As New ClassBanco, sArqFig1 As String, sArqFig2 As String
Dim objCarteiraCobrador As New ClassCarteiraCobrador
Dim objInfoParcRec As New ClassInfoParcRec
Dim colInfoParcRec As New Collection
Dim sArq As String

On Error GoTo Erro_Boleto_Gera_Arquivo

    sBoleto = gobjCRFAT.sDirBoletoGer & "BOLETO_" & Format(glEmpresa, "00") & Format(giFilialEmpresa, "00") & "_" & Format(objTitRec.lNumTitulo, "000000000") & Format(objParcRec.iNumParcela, "00") & "_" & Format(objParcRec.dtDataVencimento, "YYYYMMDD") & gsExtensaoGerRelExp

    sArq = Dir$(sBoleto)
    
'    If (sArq = "" Or bForcaGeracaoArq) And objParcRec.iCobrador > 1 And objParcRec.iCarteiraCobranca <> 0 Then
'
'        objInfoParcRec.dSaldoParcela = objParcRec.dSaldo
'        objInfoParcRec.dtDataVencimentoReal = objParcRec.dtDataVencimentoReal
'        objInfoParcRec.dtVencimento = objParcRec.dtDataVencimento
'        objInfoParcRec.dValor = objParcRec.dValor
'        objInfoParcRec.iCarteiraCobrador = objParcRec.iCarteiraCobranca
'        objInfoParcRec.iCobrador = objParcRec.iCobrador
'        objInfoParcRec.iFilialCliente = objTitRec.iFilial
'        objInfoParcRec.iFilialEmpresa = objTitRec.iFilialEmpresa
'        objInfoParcRec.iMarcada = MARCADO
'        objInfoParcRec.iNumParcela = objParcRec.iNumParcela
'        objInfoParcRec.lCliente = objTitRec.lCliente
'        objInfoParcRec.lNumIntParc = objParcRec.lNumIntDoc
'        objInfoParcRec.lNumTitulo = objTitRec.lNumTitulo
'        objInfoParcRec.sSiglaDocumento = objTitRec.sSiglaDocumento
'
'        colInfoParcRec.Add objInfoParcRec
'
'        objCobrador.iCodigo = objParcRec.iCobrador
'
'        'Verifica qual é o Banco através do cobrador
'        lErro = CF("Cobrador_Le", objCobrador)
'        If lErro <> SUCESSO And lErro <> 19294 Then gError ERRO_SEM_MENSAGEM
'
'        If lErro = 19294 Then gError 206418
'
'        If (objCobrador.iCodBanco <> 0) Then
'
'            objBanco.iCodBanco = objCobrador.iCodBanco
'
'            'Lê o Banco para saber qual é o boleto
'            lErro = CF("Banco_Le", objBanco)
'            If lErro <> SUCESSO And lErro <> 16091 Then gError ERRO_SEM_MENSAGEM
'
'            'Se não encontrou o Banco
'            If lErro = 16091 Then gError 206419
'
'            If objParcRec.sNumTitCobrador = "" Then
'
'                objCarteiraCobrador.iCobrador = objParcRec.iCobrador
'                objCarteiraCobrador.iCodCarteiraCobranca = objParcRec.iCarteiraCobranca
'                lErro = CF("CarteiraCobrador_Le", objCarteiraCobrador)
'                If lErro <> SUCESSO And lErro <> 23551 Then gError ERRO_SEM_MENSAGEM
'                If lErro <> SUCESSO Then gError 206420
'
'                sProxNossoNumero = objCarteiraCobrador.sFaixaNossoNumeroProx
'
'            End If
'
'            'Faz a parte do BD com relação ao relatorio
'            lErro = CF("TitulosRec_AtualizaBoletos_Impressao", colInfoParcRec, lIdBoleto, sProxNossoNumero, objBanco.iCodBanco)
'            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
'
'            lErro = CF("ImpressaoBoletos_Prepara", colInfoParcRec, lIdBoleto, objCobrador, vbUnchecked)
'            If lErro <> SUCESSO Then gError 61429
'
'            sBuffer = String(128, 0)
'            Call GetPrivateProfileString("Forprint", "DirTsks", "c:\sge\relat\", sBuffer, 128, "ADM100.INI")
'            sBuffer = StringZ(sBuffer)
'            If right(sBuffer, 1) <> "\" Then sBuffer = sBuffer & "\"
'
'            sArqFig1 = sBuffer & "bl" & CStr(objCobrador.iCodBanco) & "a.bmp"
'            sArqFig2 = sBuffer & "bl" & CStr(objCobrador.iCodBanco) & "b.bmp"
'
'        End If
'
'        objRelatorio.bConfiguraImpressora = False
'
'        If Len(Trim(objBanco.sLayoutBoleto)) > 0 Then
'
'            'Dispara o relatorio determinado pelo Banco
'            lErro = objRelatorio.ExecutarDireto("Emissão de Boletos", "", 2, objBanco.sLayoutBoleto, "NIDBOLETO", CStr(lIdBoleto), "AARQFIG1", sArqFig1, "AARQFIG2", sArqFig2, "TTO_EMAIL", "", "TSUBJECT", "", "TALIASATTACH", "", "TMAILARQ", sBoleto)
'            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
'
'    '        lErro = objRelatorio.ExecutarDireto("Emissão de Boletos", "", 0, objBanco.sLayoutBoleto, "NIDBOLETO", CStr(lIdBoleto), "AARQFIG1", sArqFig1, "AARQFIG2", sArqFig2)
'    '        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
'
'        Else 'Senão Imprime o default
'
'            'Dispara o relatorio default
'            lErro = objRelatorio.ExecutarDireto("Emissão de Boletos", "", 2, objRelatorio.sNomeTsk, "NIDBOLETO", CStr(lIdBoleto), "TTO_EMAIL", "", "TSUBJECT", "", "TALIASATTACH", "", "TMAILARQ", sBoleto)
'            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
'
'        End If
'
'    End If

    Boleto_Gera_Arquivo = SUCESSO

    Exit Function

Erro_Boleto_Gera_Arquivo:

    Boleto_Gera_Arquivo = gErr

    Select Case gErr
    
        Case ERRO_SEM_MENSAGEM
        
        Case 206418
            Call Rotina_Erro(vbOKOnly, "ERRO_COBRADOR_NAO_CADASTRADO", gErr, objCobrador.iCodigo)
        
        Case 206419
            Call Rotina_Erro(vbOKOnly, "ERRO_BANCO_NAO_CADASTRADO", gErr, objBanco.iCodBanco)
        
        Case 206420
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CARTCOBR_BORDERO", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 206421)

    End Select

    Exit Function

End Function

Private Function NossoNumero_ObtemDV_Santander(ByVal objCCI As ClassContasCorrentesInternas, ByVal sNossoNumero As String, ByVal iNumCarteiraCobrador As Integer, ByVal sCampoLivre As String, ByVal objParcelaReceber As ClassParcelaReceber, sDVNossoNumero As String) As Long

Dim lErro As Long, sSequencia As String

On Error GoTo Erro_NossoNumero_ObtemDV_Santander

    sSequencia = FormataCpoNum(sNossoNumero, 12)
    lErro = Calcula_DV11(sSequencia, 9, sDVNossoNumero)
    If lErro <> SUCESSO Then gError 204931
    
    NossoNumero_ObtemDV_Santander = SUCESSO
     
    Exit Function
    
Erro_NossoNumero_ObtemDV_Santander:

    NossoNumero_ObtemDV_Santander = gErr
     
    Select Case gErr
          
        Case 204931
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 204932)
     
    End Select
     
    Exit Function

End Function

Private Function Preenche_Boleto_Santander(ByVal objCCI As ClassContasCorrentesInternas, ByVal objParcelaReceber As ClassParcelaReceber, sCampoLivre As String, ByVal objCarteiraCobrador As ClassCarteiraCobrador, ByVal bSemValorVcto As Boolean) As Long
'Preenche o Campo Livre para compor o Código de Barras e a Linha Digitável de um Boleto Bancário
'Esta função devolve o Campo Livre específico para o Banco 356 - Jorge Specian - 09/03/2005

Dim lErro As Long
Dim sNossoNumero As String
Dim sDV As String, sCodCedente As String
Dim iTamanho_NossoNumero As Integer

On Error GoTo Erro_Preenche_Boleto_Santander

    'Inicializa variáveis com tamanho dos campos
    iTamanho_NossoNumero = 12 'sem o dv

    'Valida e formata valores do Campo Livre
    
    If Not IsNumeric(Trim(objParcelaReceber.sNumTitCobrador)) Or Len(Trim(objParcelaReceber.sNumTitCobrador)) > iTamanho_NossoNumero Then gError 134249
    sNossoNumero = Format(left(Trim(objParcelaReceber.sNumTitCobrador), iTamanho_NossoNumero), "000000000000")
    
    'codigo cedente
    lErro = CF("CarteiraCobradorInfo_ObtemValor", objCarteiraCobrador.iCobrador, CARTEIRA_SIMPLES, 7, sCodCedente)
    If lErro <> SUCESSO Then gError 130411
    sCodCedente = Format(right(Trim(sCodCedente), 7), "0000000")
    
    lErro = Calcula_DV11(sNossoNumero, 9, sDV)
    If lErro <> SUCESSO Then gError 130773
    
    'Concatena a sequencia
    sCampoLivre = "9" & sCodCedente & sNossoNumero & sDV & "0" & IIf(objCarteiraCobrador.iComRegistro = MARCADO, "101", "102")

    Preenche_Boleto_Santander = SUCESSO

    Exit Function

Erro_Preenche_Boleto_Santander:

    Preenche_Boleto_Santander = gErr
    
    Select Case gErr
        
        Case 134249
            Call Rotina_Erro(vbOKOnly, "ERRO_NOSSONUMERO_NAO_NUMERICO", gErr, iTamanho_NossoNumero)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148461)
    
    End Select
    
    Exit Function

End Function

'ROTINAS CRIADAS AUTOMATICAMENTE PELA TELA BROWSECRIA
'GRAVAÇÃO
Public Function EmailsEnviados_Grava(ByVal objEmail As ClassEnvioDeEmail) As Long

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_EmailsEnviados_Grava

    'Abertura de transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 206824

    lErro = CF("EmailsEnviados_Grava_EmTrans", objEmail)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 206825

    EmailsEnviados_Grava = SUCESSO

    Exit Function

Erro_EmailsEnviados_Grava:

    EmailsEnviados_Grava = gErr

    Select Case gErr
    
        Case ERRO_SEM_MENSAGEM

        Case 206824
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 206825
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 206826)

    End Select

    'Desfaz Transação
    Call Transacao_Rollback

    Exit Function

End Function

Public Function EmailsEnviados_Grava_EmTrans(ByVal objEmail As ClassEnvioDeEmail) As Long

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer

On Error GoTo Erro_EmailsEnviados_Grava_EmTrans

    'Abertura de Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 206827
    Next

    lErro = Comando_Executar(alComando(1), "INSERT INTO EmailsEnviados( TipoDoc, NumIntDoc, Data, Hora, " & _
            "Usuario, De, Para, Assunto, NumIntDocModelo) VALUES (?,?,?,?,?,?,?,?,?)", _
            objEmail.iTipoDoc, objEmail.lNumIntDoc, Date, CDbl(Time), _
            gsUsuario, objEmail.sDe, objEmail.sEmail, objEmail.sAssunto, objEmail.lNumIntDocModelo)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 206828

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    EmailsEnviados_Grava_EmTrans = SUCESSO

    Exit Function

Erro_EmailsEnviados_Grava_EmTrans:

    EmailsEnviados_Grava_EmTrans = gErr

    Select Case gErr

        Case 206827
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 206828
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_EMAILSENVIADOS", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 206829)

    End Select

    'Fecha Comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function NossoNumero_ObtemDV_Banrisul(ByVal objParcelaRec As ClassParcelaReceber, sDVNossoNumero As String) As Long

Dim lErro As Long, iTotalNumero As Integer
Dim iContador As Integer, iNumero As Integer
Dim sDV1 As String, sDV2 As String
Dim sCaracter As String, iMultiplicador As Integer

On Error GoTo Erro_NossoNumero_ObtemDV_Banrisul

    iTotalNumero = 0
    For iContador = 1 To Len(objParcelaRec.sNumTitCobrador)
        sCaracter = Mid(right(objParcelaRec.sNumTitCobrador, iContador), 1, 1)
        If iContador Mod 2 = 1 Then
            iMultiplicador = 2
        Else
            iMultiplicador = 1
        End If
        iNumero = sCaracter * iMultiplicador
        If iNumero > 9 Then iNumero = iNumero - 9
        iTotalNumero = iTotalNumero + iNumero
    Next

    sDV1 = 10 - (iTotalNumero Mod 10)
    If sDV1 = "10" Then sDV1 = "0" 'b) quando o somatório for menor que ''10'', o ''resto'' da divisão por ''10'' será o próprio somatório.

    lErro = Calcula_DV11(objParcelaRec.sNumTitCobrador & sDV1, 7, sDV2)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    sDVNossoNumero = sDV1 & sDV2
    
    NossoNumero_ObtemDV_Banrisul = SUCESSO
     
    Exit Function
    
Erro_NossoNumero_ObtemDV_Banrisul:

    NossoNumero_ObtemDV_Banrisul = gErr
     
    Select Case gErr
          
        Case ERRO_SEM_MENSAGEM
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148464)
     
    End Select
     
    Exit Function

End Function

Private Function Preenche_Boleto_Banrisul(ByVal objCCI As ClassContasCorrentesInternas, ByVal objParcelaReceber As ClassParcelaReceber, sCampoLivre As String, ByVal objCarteiraCobrador As ClassCarteiraCobrador, ByVal bSemValorVcto As Boolean) As Long

Dim lErro As Long
Dim sNossoNumero As String, sDuploDigito As String
Dim sAgencia As String, sCedente As String
Dim iTamanho_NossoNumero As Integer
Dim iTamanho_Agencia As Integer
Dim iTamanho_Cedente As Integer
Dim objParcRecAux As New ClassParcelaReceber

On Error GoTo Erro_Preenche_Boleto_Banrisul

    '6.2 CAMPO LIVRE - Sistema BDL
    'Posições 20 a 20 Produto:
    '"1" Cobrança Normal, Fichário emitido pelo BANRISUL.
    '"2" Cobrança Direta, Fichário emitido pelo CLIENTE.
    'Posição 21 a 21 Constante "1"
    'Posição 22 a 25 Código da Agência, com quatro dígitos, sem o Número de Controle.
    'Posição 26 a 32 Código do Cedente sem Número de Controle.
    'Posição 33 a 40 Nosso Número sem Número de Controle.
    'Posição 41 a 42 Constante "40".
    'Posição 43 a 44 Duplo Dígito referente às posições 20 a 42 (módulos 10 e 11).

    'Inicializa variáveis com tamanho dos campos
    iTamanho_NossoNumero = 8
    iTamanho_Agencia = 4
    iTamanho_Cedente = 7

    'Valida e formata valores do Campo Livre
    sNossoNumero = Format(left(Trim(objParcelaReceber.sNumTitCobrador), iTamanho_NossoNumero), "00000000")
    
    If Not IsNumeric(Trim(objCCI.sAgencia)) Or Len(Trim(objCCI.sAgencia)) > iTamanho_Agencia Then gError 211135
    sAgencia = Format(left(Trim(objCCI.sAgencia), iTamanho_Agencia), "0000")
       
    sCedente = String(255, 0)
    lErro = CF("CarteiraCobradorInfo_ObtemValor", objCarteiraCobrador.iCobrador, objCarteiraCobrador.iCodCarteiraCobranca, 7, sCedente)
    If lErro <> SUCESSO Then gError 184861
    
    sCedente = left(sCedente, 11) '- tira os dvs
    sCedente = right(sCedente, iTamanho_Cedente)
    
    objParcRecAux.sNumTitCobrador = "21" & sAgencia & sCedente & sNossoNumero & "40"
    
    lErro = NossoNumero_ObtemDV_Banrisul(objParcRecAux, sDuploDigito)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    'Concatena a sequencia
    sCampoLivre = objParcRecAux.sNumTitCobrador & sDuploDigito

    Preenche_Boleto_Banrisul = SUCESSO

    Exit Function

Erro_Preenche_Boleto_Banrisul:

    Preenche_Boleto_Banrisul = gErr
    
    Select Case gErr
        
        Case 211135
            Call Rotina_Erro(vbOKOnly, "ERRO_AGENCIA_NAO_NUMERICO", gErr, iTamanho_Agencia)
        
        Case ERRO_SEM_MENSAGEM
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 211136)
    
    End Select
    
    Exit Function
    
End Function

Public Function ExtratoCNAB_Importar(ByVal iFilialEmpresa As Integer, ByVal iBanco As Integer, ByVal sNomeArq As String) As Long

Dim lErro As Long
Dim alComando(0 To 5) As Long
Dim iIndice As Integer, iLinha As Integer
Dim lTransacao As Long, objExtrBcoCab As New ClassExtrBcoCab
Dim iTipoReg As Integer, sRegistro As String, sAgencia As String, sConta As String
Dim bPulaLote As Boolean, iCodConta As Integer
Dim objExtrBcoDet As New ClassExtrBcoDet, dtDataImportacao As Date

On Error GoTo Erro_ExtratoCNAB_Importar

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 205506

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 205507
    Next

    'Abre o arquivo de retorno
    Open sNomeArq For Input As #2
    
    'Até chegar ao fim do arquivo
    iLinha = 0
    Do While Not EOF(2)
    
        iLinha = iLinha + 1
    
        'Busca o próximo registro do arquivo (na 1a vez vai ser o de header)
        Line Input #2, sRegistro
        
        If Len(Trim(sRegistro)) = 0 Then Exit Do
        If Len(sRegistro) <> 240 Then gError 205508
        
        iTipoReg = Mid(sRegistro, 8, 1)
        
        Select Case iTipoReg
        
            Case 0 'Header Arquivo
                                                
                If iBanco <> StrParaInt(Mid(sRegistro, 1, 3)) Then gError 205508
                objExtrBcoCab.iBanco = iBanco
                objExtrBcoCab.dHoraGeracao = CDbl(CDate(Mid(sRegistro, 152, 2) & ":" & Mid(sRegistro, 154, 2) & ":" & Mid(sRegistro, 156, 2)))
                objExtrBcoCab.dHoraImport = CDbl(Time)
                objExtrBcoCab.dtDataGravacao = CDate(Mid(sRegistro, 144, 2) & "/" & Mid(sRegistro, 146, 2) & "/" & Mid(sRegistro, 148, 4))
                objExtrBcoCab.dtDataImport = Date
                objExtrBcoCab.sNomeArquivo = sNomeArq
                objExtrBcoCab.lSeqArquivo = StrParaLong(Mid(sRegistro, 158, 6))
                
                lErro = Comando_Executar(alComando(4), "SELECT DataImport FROM ExtratosBancarios WHERE Banco = ? AND SeqArquivo = ?", dtDataImportacao, iBanco, objExtrBcoCab.lSeqArquivo)
                If lErro <> AD_SQL_SUCESSO Then gError 205509
                
                lErro = Comando_BuscarProximo(alComando(4))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 205510
                
                If lErro = AD_SQL_SUCESSO Then gError 205511
                
            Case 1 'Header Lote
                If Mid(sRegistro, 9, 1) <> "E" Then
                    bPulaLote = True
                Else
                
                    bPulaLote = False
                    
                    sAgencia = Mid(sRegistro, 54, 4)
                    sConta = Mid(sRegistro, 66, 5)
                    
                    lErro = CF("CtaCorrente_Procura", iBanco, sAgencia, sConta, iCodConta, iFilialEmpresa)
                    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
                    
                    If iCodConta = 0 Then
                    
                        lErro = CF("CtaCorrente_Procura", iBanco, sAgencia, sConta, iCodConta, 0)
                        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
                    
                        If iCodConta = 0 Then
                        
                            bPulaLote = True
                            
                        End If
                        
                    End If
                    
                    If Not bPulaLote Then
                    
                        objExtrBcoCab.dtDataSaldoInicial = CDate(Mid(sRegistro, 143, 2) & "/" & Mid(sRegistro, 145, 2) & "/" & Mid(sRegistro, 147, 4))
                        objExtrBcoCab.dSaldoInicial = ExtrCnab_ConvValMoeda(Mid(sRegistro, 151, 18), Mid(sRegistro, 169, 1), 2)
                        objExtrBcoCab.iCodConta = iCodConta
                        objExtrBcoCab.iNumExtrato = StrParaLong(Mid(sRegistro, 174, 5))
                            
                    End If
                            
                End If
            
            
            Case 3 'Detalhe
                If Not bPulaLote Then
                
                    objExtrBcoDet.iCodConta = objExtrBcoCab.iCodConta
                    objExtrBcoDet.iNumExtrato = objExtrBcoCab.iNumExtrato
                
                    objExtrBcoDet.lSeqLcto = CLng(Mid(sRegistro, 9, 5))
                    objExtrBcoDet.iCategoria = CInt(Mid(sRegistro, 170, 3))
                    objExtrBcoDet.sCodLctoBco = Mid(sRegistro, 173, 4)
                    objExtrBcoDet.sHistorico = Mid(sRegistro, 177, 25)
                    objExtrBcoDet.sDocumento = Mid(sRegistro, 235, 6)
                    objExtrBcoDet.dtData = CDate(Mid(sRegistro, 143, 2) & "/" & Mid(sRegistro, 145, 2) & "/" & Mid(sRegistro, 147, 4))
                    objExtrBcoDet.dValor = ExtrCnab_ConvValMoeda(Mid(sRegistro, 151, 18), Mid(sRegistro, 169, 1), 2)
                    objExtrBcoDet.sIncideCPMF = IIf(Mid(sRegistro, 134, 1) = "N", "S", "N")
                
                    'incluir o lcto se este ainda nao tiver sido registrado
                    lErro = CF("ExtrBcoDet_Inclui", objExtrBcoDet, alComando(2), alComando(3))
                    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

                End If
            
            Case 5 'Trailer Lote
                If Not bPulaLote Then
                
                    objExtrBcoCab.dtDataSaldoFinal = CDate(Mid(sRegistro, 143, 2) & "/" & Mid(sRegistro, 145, 2) & "/" & Mid(sRegistro, 147, 4))
                    objExtrBcoCab.dSaldoFinal = ExtrCnab_ConvValMoeda(Mid(sRegistro, 151, 18), Mid(sRegistro, 169, 1), 2)
                
                    'incluir registro do extrato
                    lErro = CF("ExtrBcoCab_Grava_Batch", objExtrBcoCab, alComando(0), alComando(1))
                    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
                
                End If
            
            Case Else
                'NÃO TRATA POR ENQUANTO
        
        End Select
        
    Loop

    Close #2

    For iIndice = LBound(alComando) To UBound(alComando)
         Call Comando_Fechar(alComando(iIndice))
    Next

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 205516
    
    ExtratoCNAB_Importar = SUCESSO
    
    Exit Function
    
Erro_ExtratoCNAB_Importar:

    ExtratoCNAB_Importar = gErr

    Select Case gErr

        Case 205506
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 205507
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 205508
            Call Rotina_Erro(vbOKOnly, "ERRO_CONCILIACAO_LAYOUT_ERRADO", gErr, Len(Trim(sRegistro)), iLinha)

        Case 205509, 205510
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONCILIACAO", gErr)

        Case 205511
            Call Rotina_Erro(vbOKOnly, "ERRO_CONCILIACAO_JA_IMPORTADO", gErr, objExtrBcoCab.lSeqArquivo, objExtrBcoCab.iBanco, dtDataImportacao)
        
        Case 205512, 205528, ERRO_SEM_MENSAGEM
        
        Case 205513, 205515
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CONCILIACAO", gErr)
            
        Case 205514
            Call Rotina_Erro(vbOKOnly, "ERRO_CONCILIACAO_LAYOUT_ERRADO2", gErr)

        Case 205516
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 201475)

    End Select
    
    Close #2

    For iIndice = LBound(alComando) To UBound(alComando)
         Call Comando_Fechar(alComando(iIndice))
    Next

    Call Transacao_Rollback
    
    Exit Function

End Function

Private Function ExtrCnab_ConvValMoeda(sVal As String, sSinal As String, iNumDecImplicitas As Integer) As Double

Dim dValorConvertido As Double

    dValorConvertido = CDbl(sVal)
    If sSinal = "D" Then dValorConvertido = -dValorConvertido
    If iNumDecImplicitas > 1 Then dValorConvertido = dValorConvertido / (10 ^ iNumDecImplicitas)
    
    ExtrCnab_ConvValMoeda = dValorConvertido
    
End Function

Public Function Preenche_Boleto_Rural(ByVal objCCI As ClassContasCorrentesInternas, ByVal objParcelaReceber As ClassParcelaReceber, sCampoLivre As String, ByVal objCarteiraCobrador As ClassCarteiraCobrador, ByVal bSemValorVcto As Boolean) As Long
'Preenche o Campo Livre para compor o Código de Barras e a Linha Digitável de um Boleto Bancário
'Esta função devolve o Campo Livre específico para o Banco BB - Jorge Specian - 09/03/2005

Dim lErro As Long
Dim sNossoNumero As String
Dim sAgencia As String
Dim sDVNossoNumero As String
Dim iTamanho_NossoNumero As Integer
Dim iTamanho_Agencia As Integer
Dim sConta As String
Dim iTamanho_Conta As Integer
Dim dtDataBase As Date
Dim iFator As Integer, sCodCedente As String
Dim sCodRedCli As String
Dim sSeuNumero As String
Dim objTitRec As New ClassTituloReceber

On Error GoTo Erro_Preenche_Boleto_Rural

    objTitRec.lNumIntDoc = objParcelaReceber.lNumIntTitulo

    lErro = CF("TituloReceber_Le", objTitRec)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    '2.2.1 - COBRANÇA COM REGISTRO
    '
    'POSIÇÃO TAMANHO CONTEÚDO
    '20 a 20 01  Tipo de Cobrança - 0
    '21 a 23 03  Agência Cedente
    '24 a 32 09  Conta do Cedente
    '33 a 33 01  Dígito da Conta do Cedente
    '34 a 40 07  Nosso Número
    '41 a 41 01  Dígito do Nosso Número
    '42 a 44     03  Zeros
    '
    'Obs.: Quando se tratar de cobrança caucionada ou vinculada, a conta do cedente e o dígito da conta do cedente (posições de 24 a 33 do campo livre) deverão ser substituídos pelo número do contrato.
    '
    '2.2.2 - COBRANÇA SEM REGISTRO
    '
    'POSIÇÃO TAMANHO CONTEÚDO
    '20 a 20 01  Tipo de Cobrança - 9
    '21 a 23 03  Agência Cedente
    '24 a 26 03  Código Reduzido do Cliente
    '27 a 41 15  Seu Número
    '42 a 44 03  Zeros
    '
    'Obs.: O código reduzido deverá ser solicitado ao gerente da agência.

    'Inicializa variáveis com tamanho dos campos
    iTamanho_NossoNumero = 7 'sem o DV
    iTamanho_Agencia = 3
    iTamanho_Conta = 9

    'Valida e formata valores do Campo Livre
    
    If Not IsNumeric(Trim(objParcelaReceber.sNumTitCobrador)) Or Len(Trim(objParcelaReceber.sNumTitCobrador)) > iTamanho_NossoNumero Then gError 184253
    sNossoNumero = Format(left(Trim(objParcelaReceber.sNumTitCobrador), iTamanho_NossoNumero), "0000000")
    
    If Not IsNumeric(Trim(objCCI.sAgencia)) Or Len(Trim(objCCI.sAgencia)) > iTamanho_Agencia Then gError 184254
    sAgencia = Format(left(Trim(objCCI.sAgencia), iTamanho_Agencia), "000")
    
    If Not IsNumeric(Trim(objCCI.sNumConta)) Or Len(Trim(objCCI.sNumConta)) > iTamanho_Conta Then gError 184255
    sConta = Format(left(Trim(objCCI.sNumConta), iTamanho_Conta), "000000000")
    
    sSeuNumero = FormataCpoTexto(objTitRec.lNumTitulo & SEPARADOR & objParcelaReceber.iNumParcela, 15)
    
    lErro = CF("CarteiraCobradorInfo_ObtemValor", objCarteiraCobrador.iCobrador, objCarteiraCobrador.iCodCarteiraCobranca, 34, sCodRedCli)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    'para cobranca REGISTRADA
    If objCarteiraCobrador.iComRegistro <> 0 Then
    
        lErro = Calcula_DV11(sNossoNumero, 9, sDVNossoNumero)
        If lErro <> SUCESSO Then gError 184256
        
        'Concatena a sequencia
        sCampoLivre = "0" & sAgencia & sConta & FormataCpoNum(objCCI.sDVNumConta, 1) & sNossoNumero & sDVNossoNumero & "000"

    Else 'para cobrança NAO REGISTRADA
            
        'codigo cedente
        lErro = CF("CarteiraCobradorInfo_ObtemValor", objCarteiraCobrador.iCobrador, objCarteiraCobrador.iCodCarteiraCobranca, 7, sCodCedente)
        If lErro <> SUCESSO Then gError 130411
        
        'Concatena a sequencia
        sCampoLivre = "9" & sAgencia & sCodRedCli & sSeuNumero & "000"
        
    End If
    
    Preenche_Boleto_Rural = SUCESSO

    Exit Function

Erro_Preenche_Boleto_Rural:

    Preenche_Boleto_Rural = gErr
    
    Select Case gErr
        
        Case 184256, 130411
        
        Case 184253
            Call Rotina_Erro(vbOKOnly, "ERRO_NOSSONUMERO_NAO_NUMERICO", gErr, iTamanho_NossoNumero)
        
        Case 184254
            Call Rotina_Erro(vbOKOnly, "ERRO_AGENCIA_NAO_NUMERICO", gErr, iTamanho_Agencia)
        
        Case 184255
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTA_NAO_NUMERICO", gErr, iTamanho_Conta)
                
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 184252)
    
    End Select
    
    Exit Function

End Function

Private Function NossoNumero_ObtemDV_Rural(ByVal sNossoNumero As String, sDVNossoNumero As String) As Long

Dim lErro As Long, sSequencia As String

On Error GoTo Erro_NossoNumero_ObtemDV_Rural

    sSequencia = sNossoNumero
    
    lErro = Calcula_DV11(sSequencia, 9, sDVNossoNumero)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    NossoNumero_ObtemDV_Rural = SUCESSO
     
    Exit Function
    
Erro_NossoNumero_ObtemDV_Rural:

    NossoNumero_ObtemDV_Rural = gErr
     
    Select Case gErr
          
        Case ERRO_SEM_MENSAGEM
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148464)
     
    End Select
     
    Exit Function

End Function

Public Function PagSusPenso_Libera() As Long
'apenas para ver se usuario pode liberar pagto suspenso

    PagSusPenso_Libera = SUCESSO
    
End Function

Public Function LiberaPagto_Grava(ByVal colInfoParcPag As Collection) As Long
Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim lTransacao As Long
Dim objInfoParcPag As ClassInfoParcPag, iStatus As Integer

On Error GoTo Erro_LiberaPagto_Grava

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 201531

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 201532
    Next
    
    For Each objInfoParcPag In colInfoParcPag
    
        lErro = Comando_ExecutarPos(alComando(0), "SELECT Status FROM ParcelasPag WHERE NumIntDoc = ?", 0, iStatus, objInfoParcPag.lNumIntParc)
        If lErro <> AD_SQL_SUCESSO Then gError 201533
    
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 201534
        If lErro <> AD_SQL_SUCESSO Then gError 201535
        
        If iStatus <> STATUS_SUSPENSO Then gError 201536
        
        lErro = Comando_ExecutarPos(alComando(1), "UPDATE ParcelasPag SET Status = ?, CodUsuarioLib = ?, DataLib = ?", alComando(0), STATUS_ABERTO, gsUsuario, gdtDataHoje)
        If lErro <> AD_SQL_SUCESSO Then gError 201537
    
    Next
    
    For iIndice = LBound(alComando) To UBound(alComando)
         Call Comando_Fechar(alComando(iIndice))
    Next

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 201538
    
    LiberaPagto_Grava = SUCESSO
    
    Exit Function
    
Erro_LiberaPagto_Grava:

    LiberaPagto_Grava = gErr

    Select Case gErr

        Case 201531
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 201532
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 201538
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 201530)

    End Select
    
    For iIndice = LBound(alComando) To UBound(alComando)
         Call Comando_Fechar(alComando(iIndice))
    Next

    Call Transacao_Rollback
    
    Exit Function

End Function

Function Preenche_Boleto_Safra(ByVal objCCI As ClassContasCorrentesInternas, ByVal objParcelaReceber As ClassParcelaReceber, sCampoLivre As String, ByVal objCarteiraCobrador As ClassCarteiraCobrador, ByVal bSemValorVcto As Boolean) As Long
'Preenche o Campo Livre para compor o Código de Barras e a Linha Digitável de um Boleto Bancário
'Esta função devolve o Campo Livre específico para o Banco 356 - Jorge Specian - 09/03/2005

Dim lErro As Long
Dim sNossoNumero As String
Dim sAgencia As String
Dim sConta As String, sDVNossoNumero As String
Dim iTamanho_NossoNumero As Integer
Dim iTamanho_Agencia As Integer
Dim iTamanho_Conta As Integer

On Error GoTo Erro_Preenche_Boleto_Safra

    'Inicializa variáveis com tamanho dos campos
    iTamanho_NossoNumero = 9
    iTamanho_Agencia = 5
    iTamanho_Conta = 9

    'Valida e formata valores do Campo Livre
    
    If Not IsNumeric(Trim(objParcelaReceber.sNumTitCobrador)) Or Len(Trim(objParcelaReceber.sNumTitCobrador)) > iTamanho_NossoNumero Then gError 134249
    
    If Len(Trim(objParcelaReceber.sNumTitCobrador)) = 8 Then
    
        sNossoNumero = Trim(objParcelaReceber.sNumTitCobrador)
        Call Calcula_DV11_Safra(sNossoNumero, 9, sDVNossoNumero)
        
        sNossoNumero = sNossoNumero & sDVNossoNumero
        
    Else
        sNossoNumero = Trim(objParcelaReceber.sNumTitCobrador)
    End If
    sNossoNumero = Format(left(Trim(sNossoNumero), iTamanho_NossoNumero), "000000000")
    
    If Not IsNumeric(Trim(objCCI.sAgencia)) Or Len(Trim(objCCI.sAgencia)) > iTamanho_Agencia Then gError 134250
    sAgencia = Format(left(Trim(objCCI.sAgencia & objCCI.sDVAgencia), iTamanho_Agencia), "00000")

    If Not IsNumeric(Trim(objCCI.sNumConta)) Or Len(Trim(objCCI.sNumConta)) > iTamanho_Conta Then gError 134251
    sConta = Format(left(Trim(objCCI.sNumConta & objCCI.sDVNumConta), iTamanho_Conta), "000000000")
    
    'Concatena a sequencia
    sCampoLivre = "7" & sAgencia & sConta & sNossoNumero & "2"

    Preenche_Boleto_Safra = SUCESSO

    Exit Function

Erro_Preenche_Boleto_Safra:

    Preenche_Boleto_Safra = gErr
    
    Select Case gErr
        
        Case 134249
            Call Rotina_Erro(vbOKOnly, "ERRO_NOSSONUMERO_NAO_NUMERICO", gErr, iTamanho_NossoNumero)
        
        Case 134250
            Call Rotina_Erro(vbOKOnly, "ERRO_AGENCIA_NAO_NUMERICO", gErr, iTamanho_Agencia)
        
        Case 134251
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTA_NAO_NUMERICO", gErr, iTamanho_Conta)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148461)
    
    End Select
    
    Exit Function

End Function

Function Calcula_DV11_Safra(ByVal sSequencia As String, ByVal iBase As Integer, sDigito As String) As Long
'Calcula o Dígito Verificador do Nosso Numero - Alterado por Jorge Specian - 15/03/2005
'Cálculo através do módulo 11

Dim lErro As Long
Dim iContador As Integer
Dim iNumero As Integer
Dim iTotalNumero As Integer
Dim iMultiplicador As Integer
Dim iResto As Integer
Dim iResultado As Integer
Dim sCaracter As String

On Error GoTo Erro_Calcula_DV11_Safra

    iMultiplicador = 2
    
    For iContador = 1 To Len(sSequencia)
        sCaracter = Mid(right(sSequencia, iContador), 1, 1)
        If iMultiplicador > iBase Then
            iMultiplicador = 2
        End If
        iNumero = sCaracter * iMultiplicador
        iTotalNumero = iTotalNumero + iNumero
        iMultiplicador = iMultiplicador + 1
    Next
    
    iResto = iTotalNumero Mod 11
    
    iResultado = 11 - iResto
    
    If iResto = 0 Then
        sDigito = "1"
    ElseIf iResto = 1 Then
        sDigito = "0"
    Else
        sDigito = CStr(iResultado)
    End If

    Calcula_DV11_Safra = SUCESSO

    Exit Function

Erro_Calcula_DV11_Safra:

    Calcula_DV11_Safra = gErr
    
    Select Case gErr
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148442)
    
    End Select
    
    Exit Function

End Function

Function Preenche_Boleto_SiCred(ByVal objCCI As ClassContasCorrentesInternas, ByVal objParcelaReceber As ClassParcelaReceber, sCampoLivre As String, ByVal objCarteiraCobrador As ClassCarteiraCobrador, ByVal bSemValorVcto As Boolean) As Long
'Preenche o Campo Livre para compor o Código de Barras e a Linha Digitável de um Boleto Bancário

Dim lErro As Long
Dim sNossoNumero As String
Dim sDVNossoNumero As String, sDVLivre As String
Dim iTamanho_NossoNumero As Integer
Dim sCodCedente As String, sCart As String

On Error GoTo Erro_Preenche_Boleto_SiCred

    'Inicializa variáveis com tamanho dos campos
    iTamanho_NossoNumero = 9

    'CEDENTE
    'O campo agência/código beneficiário deve ter o formato AAAA.PP.CCCCC onde:
    'AAAA = Número da agência:
    'PP = Posto do beneficiário:
    'CCCCC = Código do beneficiário
    'Ex: 0165.02.00623
    
    'NOSSO NÚMERO
    'O campo Nosso Número deve ser apresentado no formato AA/BXXXXX-D, onde:
    'AA = Ano atual
    'B = Byte que pode ser de 2 a 9. Somente será 1 se forem boletos pré-impressos.
    'XXXXX = número sequencial
    'D = dígito verificador calculado
    
    If Not IsNumeric(Trim(objParcelaReceber.sNumTitCobrador)) Or Len(Trim(objParcelaReceber.sNumTitCobrador)) > iTamanho_NossoNumero Then gError 134249
    
    'codigo cedente
    lErro = CF("CarteiraCobradorInfo_ObtemValor", objCarteiraCobrador.iCobrador, objCarteiraCobrador.iCodCarteiraCobranca, 7, sCodCedente)
    If lErro <> SUCESSO Then gError 130410
    sCodCedente = Replace(sCodCedente, ".", "")
    'códigos da cooperativa de crédito/agência beneficiária (aaaa), posto beneficiário (pp), do beneficiário (ccccc)
    
    If Len(Trim(objParcelaReceber.sNumTitCobrador)) = 5 Then 'Somente sequencial
    
        sNossoNumero = Format(Now, "YY") & "2" & Trim(objParcelaReceber.sNumTitCobrador)
        lErro = Calcula_DV11_SiCred(sCodCedente & sNossoNumero, 9, sDVNossoNumero)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        
        sNossoNumero = sNossoNumero & sDVNossoNumero
        
    ElseIf Len(Trim(objParcelaReceber.sNumTitCobrador)) = 6 Then 'Sem o ano
        
        sNossoNumero = Format(Now, "YY") & Trim(objParcelaReceber.sNumTitCobrador)
        lErro = Calcula_DV11_SiCred(sCodCedente & sNossoNumero, 9, sDVNossoNumero)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        
        sNossoNumero = sNossoNumero & sDVNossoNumero
        
    ElseIf Len(Trim(objParcelaReceber.sNumTitCobrador)) = 8 Then 'Sem o DV
        
        sNossoNumero = Trim(objParcelaReceber.sNumTitCobrador)
        lErro = Calcula_DV11_SiCred(sCodCedente & sNossoNumero, 9, sDVNossoNumero)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        
        sNossoNumero = sNossoNumero & sDVNossoNumero
    
    Else
        sNossoNumero = Trim(objParcelaReceber.sNumTitCobrador)
    End If
    sNossoNumero = Format(left(Trim(sNossoNumero), iTamanho_NossoNumero), "000000000")
       
    Select Case objCarteiraCobrador.iCodCarteiraCobranca
    
        Case CARTEIRA_DESCONTADA
            sCart = "3"
    
        Case CARTEIRA_CAUCIONADA
            sCart = "2"
    
        Case Else
            sCart = "1"
        
    End Select
    
    'Concatena a sequencia
    sCampoLivre = IIf(objCarteiraCobrador.iComRegistro = MARCADO, "1", "3") & sCart & sNossoNumero & sCodCedente & "10"

    sDVLivre = ""
    lErro = Calcula_DV11_SiCred(sCampoLivre, 9, sDVLivre)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
    sCampoLivre = sCampoLivre & sDVLivre

    Preenche_Boleto_SiCred = SUCESSO

    Exit Function

Erro_Preenche_Boleto_SiCred:

    Preenche_Boleto_SiCred = gErr
    
    Select Case gErr
        
        Case 134249
            Call Rotina_Erro(vbOKOnly, "ERRO_NOSSONUMERO_NAO_NUMERICO", gErr, iTamanho_NossoNumero)
        
        Case ERRO_SEM_MENSAGEM
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148461)
    
    End Select
    
    Exit Function

End Function

Function Calcula_DV11_SiCred(ByVal sSequencia As String, ByVal iBase As Integer, sDigito As String) As Long
'Calcula o Dígito Verificador do Nosso Numero
'Cálculo através do módulo 11

Dim lErro As Long
Dim iContador As Integer
Dim iNumero As Integer
Dim iTotalNumero As Integer
Dim iMultiplicador As Integer
Dim iResto As Integer
Dim iResultado As Integer
Dim sCaracter As String

On Error GoTo Erro_Calcula_DV11_SiCred

    iMultiplicador = 2
    iTotalNumero = 0
    For iContador = Len(sSequencia) To 1 Step -1
        sCaracter = Mid(sSequencia, iContador, 1)
        If iMultiplicador > iBase Then
            iMultiplicador = 2
        End If
        iNumero = sCaracter * iMultiplicador
        iTotalNumero = iTotalNumero + iNumero
        iMultiplicador = iMultiplicador + 1
    Next
    
    iResto = iTotalNumero Mod 11
    
    iResultado = 11 - iResto
    
    If iResultado > 9 Then
        sDigito = "0"
    Else
        sDigito = CStr(iResultado)
    End If
    
    If Len(sSequencia) = 24 Then 'Campo Livre
        If sDigito = "0" Then
            sDigito = "1"
        End If
    End If

    Calcula_DV11_SiCred = SUCESSO

    Exit Function

Erro_Calcula_DV11_SiCred:

    Calcula_DV11_SiCred = gErr
    
    Select Case gErr
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148442)
    
    End Select
    
    Exit Function

End Function

Private Function NossoNumero_ObtemDV_SiCred(ByVal objCCI As ClassContasCorrentesInternas, ByVal sNossoNumero As String, ByVal iNumCarteiraCobrador As Integer, ByVal sCampoLivre As String, ByVal objParcelaReceber As ClassParcelaReceber, sDVNossoNumero As String) As Long

Dim lErro As Long
Dim sCodCedente As String

On Error GoTo Erro_NossoNumero_ObtemDV_Sicred

    lErro = CF("CarteiraCobradorInfo_ObtemValor", objParcelaReceber.iCobrador, objParcelaReceber.iCarteiraCobranca, 7, sCodCedente)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    sCodCedente = Replace(sCodCedente, ".", "")
    
    If Len(Trim(sNossoNumero)) = 5 Then
        lErro = Calcula_DV11_SiCred(sCodCedente & Format(objParcelaReceber.dtDataVencimento, "YY") & "2" & sNossoNumero, 9, sDVNossoNumero)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    ElseIf Len(Trim(sNossoNumero)) = 6 Then
        lErro = Calcula_DV11_SiCred(sCodCedente & Format(objParcelaReceber.dtDataVencimento, "YY") & sNossoNumero, 9, sDVNossoNumero)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    ElseIf Len(Trim(sNossoNumero)) = 8 Then
        lErro = Calcula_DV11_SiCred(sCodCedente & sNossoNumero, 9, sDVNossoNumero)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    Else
        sDVNossoNumero = "" 'Já está com o DV
    End If
    
    NossoNumero_ObtemDV_SiCred = SUCESSO
     
    Exit Function
    
Erro_NossoNumero_ObtemDV_Sicred:

    NossoNumero_ObtemDV_SiCred = gErr
     
    Select Case gErr
          
        Case ERRO_SEM_MENSAGEM
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148464)
     
    End Select
     
    Exit Function

End Function

Private Function BorderoRetCobr_Trata_Arq(ByVal sNomeCompletoArq As String) As Long

Dim lErro As Long
Dim sArq As String
Dim sDir As String
Dim sDirProc As String
Dim iPOS As Integer

On Error GoTo Erro_BorderoRetCobr_Trata_Arq

    For iPOS = Len(sNomeCompletoArq) To 1 Step -1
        If Mid(sNomeCompletoArq, iPOS, 1) = "/" Or Mid(sNomeCompletoArq, iPOS, 1) = "\" Then Exit For
    Next
    sDir = Mid(sNomeCompletoArq, 1, iPOS)
    sArq = Mid(sNomeCompletoArq, iPOS + 1)
    sDirProc = sDir & "proc\"
    
    If Len(Trim(Dir(sDirProc, vbDirectory))) = 0 Then MkDir sDirProc
    
    If Len(Trim(Dir(sDirProc & sArq))) <> 0 Then Kill sDirProc & sArq
    
    Name sNomeCompletoArq As sDirProc & sArq
    
    BorderoRetCobr_Trata_Arq = SUCESSO
     
    Exit Function
    
Erro_BorderoRetCobr_Trata_Arq:

    BorderoRetCobr_Trata_Arq = gErr
     
    Select Case gErr
          
        Case ERRO_SEM_MENSAGEM
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 148464)
     
    End Select
     
    Exit Function
End Function

Function Preenche_Boleto_Cecred(ByVal objCCI As ClassContasCorrentesInternas, ByVal objParcelaReceber As ClassParcelaReceber, sCampoLivre As String, ByVal objCarteiraCobrador As ClassCarteiraCobrador, ByVal bSemValorVcto As Boolean) As Long
'Preenche o Campo Livre para compor o Código de Barras e a Linha Digitável de um Boleto Bancário
'Esta função devolve o Campo Livre específico para o Banco 356 - Jorge Specian - 09/03/2005

Dim lErro As Long
Dim sNossoNumero As String
Dim sAgencia As String
Dim sConta As String, sDVNossoNumero As String
Dim iTamanho_NossoNumero As Integer
Dim iTamanho_Agencia As Integer
Dim iTamanho_Conta As Integer
Dim sCodCedente As String, sDV As String
Dim sCarteira As String

On Error GoTo Erro_Preenche_Boleto_Cecred

    'Inicializa variáveis com tamanho dos campos
    iTamanho_NossoNumero = 9
    iTamanho_Conta = 8

    'Valida e formata valores do Campo Livre
    
    'If Not IsNumeric(Trim(objParcelaReceber.sNumTitCobrador)) Or Len(Trim(objParcelaReceber.sNumTitCobrador)) > iTamanho_NossoNumero Then gError 134249
    'sNossoNumero = Format(left(Trim(objParcelaReceber.sNumTitCobrador), iTamanho_NossoNumero), "000000000")
    
    If Len(Trim(objParcelaReceber.sNumTitCobrador)) <> iTamanho_NossoNumero + iTamanho_Conta Then gError 134249
    sNossoNumero = objParcelaReceber.sNumTitCobrador
    
'    If Not IsNumeric(Trim(objCCI.sAgencia)) Or Len(Trim(objCCI.sAgencia)) > iTamanho_Agencia Then gError 184254
'    sAgencia = Format(left(Trim(objCCI.sAgencia), iTamanho_Agencia), "000")
    
    If Not IsNumeric(Trim(objCCI.sNumConta)) Or Len(Trim(objCCI.sNumConta)) > iTamanho_Conta Then gError 184255
    sConta = Format(left(Trim(objCCI.sNumConta), iTamanho_Conta), "000000000")
    
    'codigo cedente
    lErro = CF("CarteiraCobradorInfo_ObtemValor", objCarteiraCobrador.iCobrador, objCarteiraCobrador.iCodCarteiraCobranca, 7, sCodCedente)
    If lErro <> SUCESSO Then gError 130411
    
    sCodCedente = Format(right(Trim(sCodCedente), 6), "000000")
    
    sCarteira = Format(objCarteiraCobrador.iNumCarteiraNoBanco, "00")
    
    'Concatena a sequencia
    'sCampoLivre = sCodCedente & sConta & sNossoNumero & sCarteira
    sCampoLivre = sCodCedente & sNossoNumero & sCarteira  'A conta já está embutida no nosso número

    Preenche_Boleto_Cecred = SUCESSO

    Exit Function

Erro_Preenche_Boleto_Cecred:

    Preenche_Boleto_Cecred = gErr
    
    Select Case gErr
        
        Case 134249
            Call Rotina_Erro(vbOKOnly, "ERRO_NOSSONUMERO_NAO_NUMERICO", gErr, iTamanho_NossoNumero)
        
        Case 134250
            Call Rotina_Erro(vbOKOnly, "ERRO_AGENCIA_NAO_NUMERICO", gErr, iTamanho_Agencia)
        
        Case 134251
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTA_NAO_NUMERICO", gErr, iTamanho_Conta)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 148461)
    
    End Select
    
    Exit Function

End Function
