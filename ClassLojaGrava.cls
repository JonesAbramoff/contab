VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
  Persistable = 0  'NotPersistable
  DataBindingBehavior = 0  'vbNone
  DataSourceBehavior  = 0  'vbNone
  MTSTransactionMode  = 0  'NotAnMTSObject
END
Attribute VB_Name = "ClassLojaGrava"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Option Explicit

Function RecebimentoCarne_Exclui(ByVal objBaixasCarne As ClassBaixasCarne, ByVal colCarneAtualizados As Collection) As Long
'Exclui o RecebimentoCarne

Dim lErro As Long
Dim lMovto As Long
Dim iTipo As Integer
Dim bAchou As Boolean
Dim iStatus As Integer
Dim lTransacao As Long
Dim lNumIntDoc As Long
Dim iIndice As Integer
Dim dtDataBaixa As Date
Dim lNumIntDoc2 As Long
Dim lNumIntParc As Long
Dim lSequencial As Long
Dim lNumIntCarne As Long
Dim objLog As New ClassLog
Dim lNumBorderoLoja As Long
Dim lSequencialLoja As Long
Dim alComando(0 To 11) As Long

On Error GoTo Erro_RecebimentoCarne_Exclui

   'Abre os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 109745
    Next
 
    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 109746
    
    'Seleciona BaixasCarne
    lErro = Comando_ExecutarPos(alComando(0), "SELECT NumIntBaixa, DataBaixa FROM BaixasCarne WHERE FilialEmpresa = ? AND Codigo = ? ", 0, lNumIntDoc, dtDataBaixa, objBaixasCarne.iFilialEmpresa, objBaixasCarne.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 109747

    'Tenta ler
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109748
    
    'Se não encontrou
    
    If lErro = AD_SQL_SEM_DADOS Then gError 109749

    'Lock de BaixasCarne
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 109750
    
    objBaixasCarne.lNumIntDoc = lNumIntDoc
    objBaixasCarne.dtDataBaixa = dtDataBaixa
    
    'Seleciona todos os movimentos de caixa vinculados à baixa
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Tipo, NumMovto FROM MovimentosCaixa WHERE FilialEmpresa = ? AND NumRefInterna = ? AND (Tipo = ? or Tipo = ? or Tipo = ? or Tipo = ? or Tipo = ? or Tipo =? or Tipo =?)", 0, iTipo, lMovto, objBaixasCarne.iFilialEmpresa, objBaixasCarne.lNumIntDoc, MOVIMENTOCAIXA_RECEB_CARNE_CARTAODEBITO, MOVIMENTOCAIXA_RECEB_CARNE_CHEQUE, MOVIMENTOCAIXA_RECEB_CARNE_DINHEIRO, MOVIMENTOCAIXA_RECEB_CARNE_OUTROS, MOVIMENTOCAIXA_CARNE_TROCO_CONTRAVALE, MOVIMENTOCAIXA_CARNE_TROCO_DINHEIRO, MOVIMENTOCAIXA_CARNE_TROCO_TICKET)
    If lErro <> AD_SQL_SUCESSO Then gError 109751

    'Tenta ler
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109752
    
    'Se não encontrou
    If lErro = AD_SQL_SEM_DADOS Then gError 109753

    'Enquanto tiver Movimentos de caixa
    Do While lErro = AD_SQL_SUCESSO
        
        'Lock de MovimentoCaixa
        lErro = Comando_LockExclusive(alComando(1))
        If lErro <> AD_SQL_SUCESSO Then gError 109754
        
        'se o recebimento envolver um cartao de debito, nao pode excluir pois o pagamento nao pode ser excluido.
        If iTipo = MOVIMENTOCAIXA_RECEB_CARNE_CARTAODEBITO Then gError 110082
        
        'Se for de cheque
        If iTipo = MOVIMENTOCAIXA_RECEB_CARNE_CHEQUE Then
            
            'Seleciona o cheque ( se achou não está viculado a bordero)
            lErro = Comando_ExecutarPos(alComando(2), "SELECT NumBorderoLoja, SequencialLoja FROM ChequePre WHERE NumMovtoCaixa = ? AND FilialEmpresa = ?", 0, lNumBorderoLoja, lSequencialLoja, lMovto, objBaixasCarne.iFilialEmpresa)
            If lErro <> AD_SQL_SUCESSO Then gError 109755
        
            'Tenta ler
            lErro = Comando_BuscarPrimeiro(alComando(2))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109756
            
            'Se não encontrou --> erro
            If lErro = AD_SQL_SEM_DADOS Then gError 109757
            
            'se o numero de bordero estiver preenchido ==> o cheque foi usado num bordero ==> nao pode ser excluido
            If lNumBorderoLoja <> 0 Then gError 110083
            
            'Exclui o cheque
            lErro = Comando_ExecutarPos(alComando(3), "DELETE FROM ChequePre", alComando(2))
            If lErro <> AD_SQL_SUCESSO Then gError 109758
    
        End If
        
        'Exclui o movimento de caixa
        lErro = Comando_ExecutarPos(alComando(4), "DELETE FROM MovimentosCaixa", alComando(1))
        If lErro <> AD_SQL_SUCESSO Then gError 109779
    
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109759
        
    Loop
        
    'Seleciona todas as parcelas relacionas a baixa em BaixasParcCarne
    lErro = Comando_ExecutarPos(alComando(5), "SELECT NumIntParcelaCarne FROM BaixasParcCarne WHERE FilialEmpresa = ? AND NumIntBaixa = ? ", 0, lNumIntParc, objBaixasCarne.iFilialEmpresa, objBaixasCarne.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 109760

    'Tenta ler
    lErro = Comando_BuscarPrimeiro(alComando(5))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109761
    
    'Se não encontrou
    If lErro = AD_SQL_SEM_DADOS Then gError 109762

    'Enquanto tiver parcelas
    Do While lErro = AD_SQL_SUCESSO
        
        'Lock de baixa
        lErro = Comando_LockExclusive(alComando(5))
        If lErro <> AD_SQL_SUCESSO Then gError 109763
              
        'Seleciona a parcela q está relacionada a baixa
        lErro = Comando_ExecutarPos(alComando(6), "SELECT NumIntCarne, Status FROM CarneParcelas WHERE NumIntDoc = ? AND FilialEmpresa = ?", 0, lNumIntCarne, iStatus, lNumIntParc, objBaixasCarne.iFilialEmpresa)
        If lErro <> AD_SQL_SUCESSO Then gError 109764
    
        'Tenta ler
        lErro = Comando_BuscarPrimeiro(alComando(6))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109765
        
        'Se não encontrou --> erro.
        If lErro = AD_SQL_SEM_DADOS Then gError 109766
        
        'SE a parcela não está baixada --> erro.
        If iStatus <> STATUS_BAIXADO Then gError 109767
        
        'Lock de parcela
        lErro = Comando_LockExclusive(alComando(6))
        If lErro <> AD_SQL_SUCESSO Then gError 109768
        
        'Atualiza a parcela --> status lançado.
        lErro = Comando_ExecutarPos(alComando(7), "UPDATE CarneParcelas SET Status=?", alComando(6), STATUS_LANCADO)
        If lErro <> AD_SQL_SUCESSO Then gError 109769
        
        bAchou = False
        
        'Para cada carne --> verifica se já foi atualizado
        For iIndice = 1 To colCarneAtualizados.Count
            'se já existe -->sai
            If lNumIntCarne = colCarneAtualizados.Item(iIndice) Then
                bAchou = True
                Exit For
            End If
        Next
        
        'Se não existe na col --> carne ainda não atualizado.
        If Not (bAchou) Then
            
            'Seleciona o carnet para ser atualizado
            lErro = Comando_ExecutarPos(alComando(8), "SELECT NumIntDoc FROM Carne WHERE NumIntDoc = ? AND FilialEmpresa = ?", 0, lNumIntDoc2, lNumIntCarne, objBaixasCarne.iFilialEmpresa)
            If lErro <> AD_SQL_SUCESSO Then gError 109770
                        
            'Tenta ler
            lErro = Comando_BuscarPrimeiro(alComando(8))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109771
        
            'Se não encontrou --> erro.
            If lErro = AD_SQL_SEM_DADOS Then gError 109772
                    
            'Lock do carnet
            lErro = Comando_LockExclusive(alComando(8))
            If lErro <> AD_SQL_SUCESSO Then gError 109773
            
            'Atualiza o carnet --> status lançado.
            lErro = Comando_ExecutarPos(alComando(9), "UPDATE Carne SET Status=?", alComando(8), STATUS_LANCADO)
            If lErro <> AD_SQL_SUCESSO Then gError 109774
            
            'Coloca na col de Atualizados
            colCarneAtualizados.Add lNumIntCarne
            
         End If
         
        'Exclui a parcela
        lErro = Comando_ExecutarPos(alComando(10), "DELETE FROM BaixasParcCarne", alComando(5))
        If lErro <> AD_SQL_SUCESSO Then gError 109775
        
        'Busca próxima parcela a ser cancelada
        lErro = Comando_BuscarProximo(alComando(5))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109776
    
    Loop
    
    'Exclui a baixa
    lErro = Comando_ExecutarPos(alComando(11), "DELETE FROM BaixasCarne", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 109777
                
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
        objLog.iOperacao = EXCLUSAO_RECEBIMENTOCARNE
                
        'Função que recebe os dados de baixa de carne e coloca em colRegistro para preparar a gravacao do log
        Call Mover_Dados_BaixasCarne_Log(objBaixasCarne, objLog)
                
        'grava o log
        lErro = CF("Log_Grava", objLog, objLog.colRegistro)
        If lErro <> SUCESSO Then gError 110084
    End If
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 109778

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    RecebimentoCarne_Exclui = SUCESSO

    Exit Function

Erro_RecebimentoCarne_Exclui:

    RecebimentoCarne_Exclui = gErr

    Select Case gErr
        
        Case 109745
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 109746
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 109747, 109748
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BAIXASCARNE", gErr, objBaixasCarne.lCodigo)

        Case 109749
            Call Rotina_Erro(vbOKOnly, "ERRO_BAIXASCARNE_NAO_CADASTRADA", gErr, objBaixasCarne.lCodigo)

        Case 109750
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_BAIXASCARNE", gErr, objBaixasCarne.lCodigo)

        Case 109751, 109752, 109759
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOS_CAIXA", gErr)

        Case 109753
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOCAIXA_NAO_CADASTRADO1", gErr)
        
        Case 109754
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_MOVIMENTOSCAIXA1", gErr)

        Case 109755, 109756
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUE", gErr)
        
        Case 109757
            Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUE_INEXISTENTE1", gErr)
        
        Case 109758
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CHEQUE1", gErr)
        
        Case 109779
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_MOVIMENTOSCAIXA", gErr)
        
        Case 109760, 109761, 109776
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BAIXASPARCCARNE", gErr)
        
        Case 109762
            Call Rotina_Erro(vbOKOnly, "ERRO_BAIXASPARCCARNE_NAO_CADASTRADA", gErr)
        
        Case 109763
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_BAIXASPARCCARNE", gErr)
        
        Case 109764, 109765
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CARNEPARC", gErr)
        
        Case 109766
            Call Rotina_Erro(vbOKOnly, "ERRO_CARNEPARC_NAO_EXISTENTES", gErr)
        
        Case 109767
            Call Rotina_Erro(vbOKOnly, "ERRO_CARNEPARC_NAO_BAIXADO", gErr)
        
        Case 109768
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CARNEPARC", gErr)
        
        Case 109769
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_CARNEPARC", gErr)
        
        Case 109770, 109771
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CARNE", gErr)
        
        Case 109772
            Call Rotina_Erro(vbOKOnly, "ERRO_CARNE_NAO_EXISTENTE", gErr)
        
        Case 109773
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CARNE", gErr)
        
        Case 109774
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_CARNE", gErr)
        
        Case 109775
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_BAIXASPARCCARNE", gErr)
        
        Case 109777
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_BAIXASCARNE", gErr)
        
        Case 109778
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case 110082
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_RECEBCARNE_CARTAODEBITO", gErr)
        
        Case 110083
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_RECEBCARNE_CHEQUEEMBORDERO", gErr, lSequencial, lNumBorderoLoja)
        
        Case 110084
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150912)

    End Select

    Call Transacao_Rollback

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Verifica_Status(colCarne As Collection) As Long

Dim lErro As Long
Dim alComando(1 To 2) As Long
Dim iIndice As Integer
Dim sCarne As String
Dim iStatus As Integer

On Error GoTo Erro_Verifica_Status

    'Abertura dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 109651
    Next
    
    'Para cada carnet da col
    For iIndice = 1 To colCarne.Count
           
        sCarne = colCarne.Item(iIndice)
        'verifica se o carnet ainda tem alguma parcela a ser baixada
        lErro = Comando_ExecutarPos(alComando(1), "SELECT Status FROM Carne WHERE FilialEmpresa = ? AND CodBarrasCarne = ? AND Not Exists(SELECT Status FROM CarneParcelas WHERE CarneParcelas.NumIntCarne=Carne.NumIntDoc AND Carne.FilialEmpresa=CarneParcelas.FilialEmpresa AND CarneParcelas.Status <> ?)", 0, iStatus, giFilialEmpresa, sCarne, STATUS_BAIXADO)
        If lErro <> SUCESSO Then gError 109652
        
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109653
        
        'Se Todas as parcelas já foram baixadas...
        If lErro = AD_SQL_SUCESSO Then
            
            'Faz "lock" no Carne
            lErro = Comando_LockExclusive(alComando(1))
            If lErro <> SUCESSO Then gError 109654
            
            'Atualiza o statius do carnet para baixado
            lErro = Comando_ExecutarPos(alComando(2), "UPDATE Carne SET Status=?", alComando(1), STATUS_BAIXADO)
            If lErro <> AD_SQL_SUCESSO Then gError 109655
            
        End If
        
    Next
    'Fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Verifica_Status = SUCESSO

    Exit Function

Erro_Verifica_Status:

    Verifica_Status = gErr

    Select Case gErr

        Case 109651
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 109652, 109653
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CARNE", gErr)
        
        Case 109654
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_CARNE", gErr)

        Case 109655
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_CARNE", gErr)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 150913)

    End Select
    
    'Fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function
    
End Function

''**************************************
''   INICIO CODIGO GRAVACAO DOS DADOS DAS TABELAS DO BO PARA O CC
''****************************************
'Public Function Rotina_Gravacao_Back_CC() As Long
'
'Dim lErro As Long
'Dim lTransacao As Long
'
'On Error GoTo Erro_Rotina_Gravacao_Back_CC
'
'    'abro a transação
'    lTransacao = Transacao_Abrir()
'    If lTransacao = 0 Then gError 113795
'
'    'Faço as leituras e gravação de clientes
'    lErro = BackCC_Gera_Arquivo()
'    If lErro <> SUCESSO Then gError 113797
'
'    'fecha a transação
'    lErro = Transacao_Commit()
'    If lErro <> AD_SQL_SUCESSO Then gError 113796
'
'    Rotina_Gravacao_Back_CC = SUCESSO
'
'    Exit Function
'
'Erro_Rotina_Gravacao_Back_CC:
'
'    Rotina_Gravacao_Back_CC = gErr
'
'    Select Case gErr
'
'        Case 113797
'
'        Case 113795
'            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
'
'        Case 113796
'            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
'
'        Case Else
'            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150914)
'
'    End Select
'
'    Call Transacao_Rollback
'
'    Exit Function
'
'End Function
'
'Public Function BackCC_Gera_Arquivo() As Long
''??? colocar os outros parâmetros
'Dim lErro As Long
'Dim sArquivo As String
'
'On Error GoTo Erro_BackCC_Gera_Arquivo
'
'    'crio o nome do arquivo
'    sArquivo = "BO_" & CStr(glEmpresa) & "_" & CStr(giFilialEmpresa) & ".boc"
'
'    'crio o arquivo
'    Open sArquivo For Output Lock Write As #1
'
'    'coloco o nome do arquivo no cabeçalho
'    Print #1, sArquivo
'
'    lErro = BackCC_Gera_Arquivo_Clientes(sArquivo)
'    If lErro <> SUCESSO Then gError 113799
'
'    lErro = BackCC_Gera_Arquivo_Enderecos(sArquivo)
'    If lErro <> SUCESSO Then gError 113805
'
'    '???fazer as outras leituras
'
'    'fecho o arquivo
'    Close #1
'
'    BackCC_Gera_Arquivo = SUCESSO
'
'    Exit Function
'
'Erro_BackCC_Gera_Arquivo:
'
'    BackCC_Gera_Arquivo = gErr
'
'    Select Case gErr
'
'        Case 113799, 113805
'
'        Case Else
'            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150915)
'
'    End Select
'
'    Exit Function
'
'End Function
'
'Public Function BackCC_Gera_Arquivo_Clientes(sArquivo As String) As Long
'
'Dim lErro As Long
'Dim alComando(0 To 1) As Long
'Dim tCliente As typeCliente
'Dim iIndice As Integer
'Dim objCliente As New ClassCliente
'Dim sRegistro As String
'
'On Error GoTo Erro_BackCC_Gera_Arquivo_Clientes
'
'    'abre o comando
'    For iIndice = LBound(alComando) To UBound(alComando)
'
'        alComando(iIndice) = Comando_Abrir()
'        If alComando(iIndice) = 0 Then gError 113801
'
'    Next
'
'    'inicializo as strings
'    tCliente.sRazaoSocial = String(STRING_CLIENTE_RAZAO_SOCIAL, 0)
'    tCliente.sNomeReduzido = String(STRING_CLIENTE_NOME_REDUZIDO, 0)
'    tCliente.sObservacao = String(STRING_CLIENTE_OBSERVACAO, 0)
'
'    'executo o select
'    lErro = Comando_ExecutarPos(alComando(0), "SELECT Codigo, RazaoSocial, NomeReduzido, Tipo, Observacao, LimiteCredito, Transferido, Ativo " & _
'                                              "FROM Clientes", 0, _
'                                              tCliente.lCodigo, tCliente.sRazaoSocial, tCliente.sNomeReduzido, tCliente.iTipo, tCliente.sObservacao, tCliente.dLimiteCredito, tCliente.iTransferido, tCliente.iAtivo)
'    If lErro <> AD_SQL_SUCESSO Then gError 113802
'
'    'seleciono o primeiro
'    lErro = Comando_BuscarPrimeiro(alComando(0))
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 113803
'
'    Do While lErro <> AD_SQL_SEM_DADOS
'
'        'locko o registro
'        lErro = Comando_LockExclusive(alComando(0))
'        If lErro <> AD_SQL_SUCESSO Then gError 113806
'
'        'preenche o obj
'        objCliente.lCodigo = tCliente.lCodigo
'        objCliente.sRazaoSocial = tCliente.sRazaoSocial
'        objCliente.sNomeReduzido = tCliente.sNomeReduzido
'        objCliente.iTipo = tCliente.iTipo
'        objCliente.sObservacao = tCliente.sObservacao
'        objCliente.dLimiteCredito = tCliente.dLimiteCredito
'        objCliente.iTransferido = tCliente.iTransferido
'        objCliente.iAtivo = tCliente.iAtivo
'
'        'faço o update
'        lErro = Comando_ExecutarPos(alComando(1), "UPDATE Clientes SET Transferido = ?", alComando(0), STATUS_TRANSFERIDO)
'        If lErro <> AD_SQL_SUCESSO Then gError 113807
'
'        'gera o registro
'        lErro = BackCC_Monta_Log_Clientes(objCliente, sRegistro)
'        If lErro <> SUCESSO Then gError 113808
'
'        'grava no arquivo o registro
'        Print #1, sRegistro
'
'        'busco o próximo
'        lErro = Comando_BuscarProximo(alComando(0))
'        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 113804
'
'    Loop
'
'    'fecho o comando
'    For iIndice = LBound(alComando) To UBound(alComando)
'        Call Comando_Fechar(alComando(iIndice))
'    Next
'
'    BackCC_Gera_Arquivo_Clientes = SUCESSO
'
'    Exit Function
'
'Erro_BackCC_Gera_Arquivo_Clientes:
'
'    BackCC_Gera_Arquivo_Clientes = gErr
'
'    Select Case gErr
'
'        Case 113808
'
'        Case 113801
'            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
'
'        Case 113802 To 13804
'            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CLIENTES", gErr)
'
'        Case 113806
'            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CLIENTES", gErr, tCliente.lCodigo)
'
'        Case 113807
'            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_CLIENTES", gErr, tCliente.lCodigo)
'
'        Case Else
'            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150916)
'
'    End Select
'
'    'fecho o comando
'    For iIndice = LBound(alComando) To UBound(alComando)
'        Call Comando_Fechar(alComando(iIndice))
'    Next
'
'    Exit Function
'
'End Function
'
'Public Function BackCC_Monta_Log_Clientes(ByVal objCliente As ClassCliente, sRegistro As String) As Long
''essa função simplesmente gera um sRegistro com os dados de objCliente Concatenados
'
'On Error GoTo Erro_BackCC_Monta_Log_Clientes
'
'    sRegistro = CStr(TIPOREGISTROECF_CLIENTE) & CStr(vbKeyControl) & _
'                CStr(objCliente.lCodigo) & CStr(vbKeyEscape) & _
'                objCliente.sRazaoSocial & CStr(vbKeyEscape) & _
'                objCliente.sNomeReduzido & CStr(vbKeyEscape) & _
'                CStr(objCliente.iTipo) & CStr(vbKeyEscape) & _
'                objCliente.sObservacao & CStr(vbKeyEscape) & _
'                CStr(objCliente.dLimiteCredito) & CStr(vbKeyEscape) & _
'                CStr(objCliente.iTransferido) & CStr(vbKeyEscape) & _
'                CStr(objCliente.iAtivo) & CStr(vbKeyEnd)
'
'    BackCC_Monta_Log_Clientes = SUCESSO
'
'    Exit Function
'
'Erro_BackCC_Monta_Log_Clientes:
'
'    BackCC_Monta_Log_Clientes = gErr
'
'    Select Case gErr
'
'        Case Else
'            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150917)
'
'    End Select
'
'    Exit Function
'
'End Function
'
'Public Function BackCC_Gera_Arquivo_Enderecos(sArquivo As String) As Long
'
'Dim lErro As Long
'Dim alComando(0 To 1) As Long
'Dim objEndereco As New ClassEndereco
'Dim tEndereco As typeEndereco
'Dim iIndice As Integer
'
'On Error GoTo Erro_BackCC_Gera_Arquivo_Enderecos
'
'    'abre o comando
'    For iIndice = LBound(alComando) To UBound(alComando)
'
'        alComando(iIndice) = Comando_Abrir()
'        If alComando(iIndice) = 0 Then gError 113809
'
'    Next
'
'    'fecha o comando
'    For iIndice = LBound(alComando) To UBound(alComando)
'        Call Comando_Fechar(alComando(iIndice))
'    Next
'
'    BackCC_Gera_Arquivo_Enderecos = SUCESSO
'
'    Exit Function
'
'Erro_BackCC_Gera_Arquivo_Enderecos:
'
'    BackCC_Gera_Arquivo_Enderecos = gErr
'
'    Select Case gErr
'
'        Case 113809
'            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
'
'        Case Else
'            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150918)
'
'    End Select
'
'    'fecha o comando
'    For iIndice = LBound(alComando) To UBound(alComando)
'        Call Comando_Fechar(alComando(iIndice))
'    Next
'
'    Exit Function
'
'End Function
'
''**************************************
''   FIM CODIGO GRAVACAO DOS DADOS DAS TABELAS DO BO PARA O CC
''****************************************
Public Function ClienteLoja_Automatico(lCodigo As Long) As Long
'retorna o número do proximo Cliente disponivel em função da coluna CodigoLoja da Tabela Cliente

Dim lErro As Long

On Error GoTo Erro_ClienteLoja_Automatico

    lErro = CF("Config_ObterNumInt_Trans", "LojaConfig", "NUM_PROX_CLIENTELOJA", lCodigo)
    If lErro <> SUCESSO Then gError 113770

    ClienteLoja_Automatico = SUCESSO
    
    Exit Function
    
Erro_ClienteLoja_Automatico:
    
    ClienteLoja_Automatico = gErr
    
    Select Case gErr
    
        Case 113770
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150919)
    
    End Select
    
    Exit Function


End Function

Function FilialClienteLoja_Automatico(ByVal lCodCliente As Long, iCodigo As Integer) As Long

Dim lTransacao As Long
Dim lErro As Long

On Error GoTo Erro_FilialClienteLoja_Automatico

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 115017

    lErro = CF("FilialClienteLoja_Automatico_EmTrans", lCodCliente, iCodigo)
    If lErro <> SUCESSO Then gError 115018

    'confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 115019

    FilialClienteLoja_Automatico = SUCESSO
    
    Exit Function

Erro_FilialClienteLoja_Automatico:

    FilialClienteLoja_Automatico = gErr

    Select Case gErr

    Case 115017
        Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

    Case 115018

    Case 115019
        Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
    
    Case Else
        Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150920)

    End Select

    Call Transacao_Rollback
    
    Exit Function

End Function

Function FilialClienteLoja_Automatico_EmTrans(ByVal lCodCliente As Long, iCodigo As Integer) As Long
'retorna o número da proxima Filial Cliente disponivel em iCodigo em relacao ao numero de cliente passado em lCodigo

Dim lComando1 As Long
Dim lComando2 As Long
Dim lComando3 As Long
Dim lErro As Long
Dim iCodigo_Automatico As Integer
Dim iCodFilial As Integer

On Error GoTo Erro_FilialClienteLoja_Automatico_EmTrans

    lComando1 = 0
    lComando2 = 0
    lComando3 = 0

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 112638

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then gError 112639

    lComando3 = Comando_Abrir()
    If lComando3 = 0 Then gError 112640

    'Seleciona o Proximo Codigo da Filial , do respectivo Cliente
    lErro = Comando_ExecutarPos(lComando1, "SELECT ProxCodFilial FROM Clientes WHERE CodigoLoja = ?", 0, iCodigo_Automatico, lCodCliente)
    If lErro <> AD_SQL_SUCESSO Then gError 112641

    'le o registro com o número da próxima Filial
    lErro = Comando_BuscarPrimeiro(lComando1)
    If lErro <> AD_SQL_SUCESSO Then gError 112642

    'loca o registro que guarda o numero da Filial Cliente gerado automaticamente
    lErro = Comando_LockExclusive(lComando1)
    If lErro <> AD_SQL_SUCESSO Then gError 112643

    'verifica se este número ainda não foi utilizado
    'Pesquisa as numerações de Filiais maiores ou iguais a numeração gerada automaticamente
    lErro = Comando_Executar(lComando2, "SELECT CodFilial FROM FiliaisClientes WHERE CodClienteLoja = ? AND CodFilialLoja >= ? ORDER BY CodFilialLoja", iCodFilial, lCodCliente, iCodigo_Automatico)
    If lErro <> AD_SQL_SUCESSO Then gError 112644

    'le o primeiro codigo >= ao codigo automatico
    lErro = Comando_BuscarPrimeiro(lComando2)

    If iCodigo_Automatico = 0 Then iCodigo_Automatico = 1

    'pesquisa o proximo número de codigo disponível
    Do While lErro <> AD_SQL_SEM_DADOS
        

        If iCodFilial > iCodigo_Automatico Then Exit Do

        If iCodFilial = iCodigo_Automatico Then
            iCodigo_Automatico = iCodigo_Automatico + 1
        End If

        lErro = Comando_BuscarProximo(lComando2)

    Loop

    'Valor de retorno da funcao
    iCodigo = iCodigo_Automatico

    iCodigo_Automatico = iCodigo_Automatico + 1

    'atualiza o numero do cliente gerado automaticamente
    lErro = Comando_ExecutarPos(lComando3, "UPDATE Clientes SET ProxCodFilial = ?", lComando1, iCodigo_Automatico)
    If lErro <> AD_SQL_SUCESSO Then gError 112645

    lErro = Comando_Fechar(lComando1)
    lErro = Comando_Fechar(lComando2)
    lErro = Comando_Fechar(lComando3)

    FilialClienteLoja_Automatico_EmTrans = SUCESSO

    Exit Function

Erro_FilialClienteLoja_Automatico_EmTrans:

    FilialClienteLoja_Automatico_EmTrans = gErr

    Select Case Err

    Case 112638 To 112640
        Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

    Case 112641, 112642, 112644
        Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CLIENTES", gErr)

    Case 112643
        Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CLIENTES", gErr)

    Case 112645
        Call Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_CLIENTE", gErr, lCodCliente)

    Case Else
        Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150921)

    End Select

    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando3)

    Exit Function

End Function

Public Function TransfCentral_Grava(ByVal objTransfCaixa As ClassTransfCaixa, ByVal objChequeDe As ClassChequePre, ByVal objChequePara As ClassChequePre) As Long
'Essa funcao grava/altera dados da transferencia...
'no caso da alteracao, ela exclui o registro antigo e inclui um novo
'objTransfCaixa eh parametro de INPUT e traz os dados da transf a serem gravados
'objChequeDe e Para sao parametros de INPUT que trazem os dados do cheque
'envolvidos numa transferencia

Dim lErro As Long
Dim lTransacao As Long
Dim lComando As Long
Dim objCaixa As New ClassCaixa
Dim objTransfCaixaAux As New ClassTransfCaixa

On Error GoTo Erro_TransfCentral_Grava

    'Abre a Transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 111535
    
    'abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 111534
    
    'pega o codigo e filial do caixa central para locka-lo
    objCaixa.iCodigo = CODIGO_CAIXA_CENTRAL
    objCaixa.iFilialEmpresa = objTransfCaixa.iFilialEmpresa
    
    'fazer o lock do caixa central
    lErro = CF("Caixa_Lock", objCaixa)
    If lErro <> SUCESSO And lErro <> 103776 Then gError 111536
    
    If lErro = 103776 Then gError 111537
    
    'se a transf for menor do q a data inicial da caixa
    If objCaixa.dtDataInicial > objTransfCaixa.objMovCaixaDe.dtDataMovimento Then gError 111559
    
    objTransfCaixaAux.iFilialEmpresa = objTransfCaixa.iFilialEmpresa
    objTransfCaixaAux.lCodigo = objTransfCaixa.lCodigo
    
    'tenta ler a transferencia
    lErro = CF("TransferenciaLoja_Le", objTransfCaixaAux)
    If lErro <> SUCESSO And lErro <> 105235 Then gError 111539
    
    'se  tiver sido cadastrada, exclui primeiro para depois reincluí-la
    If lErro = SUCESSO Then
    
        lErro = CF("TransfCentral_Exclui_EmTrans", objTransfCaixaAux)
        If lErro <> SUCESSO Then gError 111541
    
    End If
    
    'inclui a transferência
    lErro = TransfCentral_Inclui(objTransfCaixa, objChequeDe, objChequePara)
    If lErro <> SUCESSO Then gError 111542
    
    'Confirma Transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 111543
    
    Call Comando_Fechar(lComando)
    
    TransfCentral_Grava = SUCESSO
    
    Exit Function

Erro_TransfCentral_Grava:

    TransfCentral_Grava = gErr

    Select Case gErr
        
        Case 111534
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 111535
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
        
        Case 111536, 111539, 111540, 111541, 111542
        
        Case 111537
            Call Rotina_Erro(vbOKOnly, "ERRO_CAIXACENTRAL_NAO_EXISTENTE", gErr)
        
        Case 111543
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case 111559
            Call Rotina_Erro(vbOKOnly, "ERRO_DATATRANSF_MENOR_DATAINICAIXA", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150922)
        
    End Select

    Call Transacao_Rollback
    
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Public Function TransfCentral_Inclui(objTransfCaixa As ClassTransfCaixa, objChequeDe As ClassChequePre, objChequePara As ClassChequePre) As Long
'Gera os sequenciais, toma as providencias para acertar os saldos e grava o log
'objTransfCaixa eh parametro de INPUT que traz os dados da transf
'objChequeDe e Para sao parametros de INPUT que trazem os cheques
'associados as transfs

Dim lNumMovto As Long
Dim lSeq As Long
Dim objLog As New ClassLog
Dim lErro As Long
Dim alComando(1 To 3) As Long
Dim iIndice As Integer

On Error GoTo Erro_TransfCentral_Inclui

     For iIndice = LBound(alComando) To UBound(alComando)
         alComando(iIndice) = Comando_Abrir()
         If alComando(iIndice) = 0 Then gError 105106
     Next
    
    'pegar o proximo numero de movimento disponivel na tabela.
    lErro = CF("Config_ObterNumInt", "LojaConfig", "NUM_PROX_MOVCAIXACENTRAL", lNumMovto, 2, objTransfCaixa.iFilialEmpresa)
    If lErro <> SUCESSO Then gError 111599
    
    objTransfCaixa.objMovCaixaDe.lNumMovto = lNumMovto
    objTransfCaixa.objMovCaixaPara.lMovtoTransf = lNumMovto
    objTransfCaixa.lNumMovtoCxDe = lNumMovto
    
    objTransfCaixa.objMovCaixaPara.lNumMovto = lNumMovto + 1
    objTransfCaixa.objMovCaixaDe.lMovtoTransf = lNumMovto + 1
    objTransfCaixa.lNumMovtoCxPara = lNumMovto + 1
    
    'chama funcao para obter seq
    lErro = CF("Caixa_Sequencial_EmTrans", CODIGO_CAIXA_CENTRAL, objTransfCaixa.iFilialEmpresa, lSeq)
    If lErro <> SUCESSO Then gError 111602
    
    objTransfCaixa.objMovCaixaDe.lSequencial = lSeq
    
    lErro = CF("Caixa_Sequencial_EmTrans", CODIGO_CAIXA_CENTRAL, objTransfCaixa.iFilialEmpresa, lSeq)
    If lErro <> SUCESSO Then gError 111603
    
    objTransfCaixa.objMovCaixaPara.lSequencial = lSeq
    
    'chama funcao para tratar a gravacao de origem
    lErro = TransfCentral_GravaDe(objTransfCaixa, objChequeDe)
    If lErro <> SUCESSO Then gError 111604
    
    'chama funcao para tratar a gravacao de destino
    lErro = TransfCentral_GravaPara(objTransfCaixa, objChequePara)
    If lErro <> SUCESSO Then gError 111605

   If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then

       objLog.iOperacao = INCLUSAO_TRANSFERENCIA_CENTRAL
    
       Call Mover_Dados_TransfCentral_Log(objTransfCaixa, objChequeDe, objChequePara, objLog)
       
        'grava o log
        lErro = CF("Log_Grava", objLog)
        If lErro <> SUCESSO Then gError 105101
       
    End If
    
    objTransfCaixa.objMovCaixaDe.iQuantLog = objLog.iQuantLog
    objTransfCaixa.objMovCaixaDe.lNumIntDocLog = objLog.lNumIntDoc
    objTransfCaixa.objMovCaixaPara.iQuantLog = objLog.iQuantLog
    objTransfCaixa.objMovCaixaPara.lNumIntDocLog = objLog.lNumIntDoc
    
    'inserir na tabela de movto caixa de
    lErro = Comando_Executar(alComando(1), "INSERT INTO MovimentosCaixa " & _
                                           "(FilialEmpresa, NumMovto, Caixa, Operador, Sequencial, Tipo, AdmMeioPagto, Parcelamento, TipoCartao, Numero, DataMovimento, Valor, Historico, Favorecido, CupomFiscal, NumRefInterna, MovtoTransf, MovtoEstorno, Gerente, CodConta, Hora, Transferencia, NumIntExt, NumIntDocLog, QuantLog) " & _
                                           "VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, " & _
                                           "?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", _
                                           objTransfCaixa.objMovCaixaDe.iFilialEmpresa, objTransfCaixa.objMovCaixaDe.lNumMovto, objTransfCaixa.objMovCaixaDe.iCaixa, objTransfCaixa.objMovCaixaDe.iCodOperador, objTransfCaixa.objMovCaixaDe.lSequencial, objTransfCaixa.objMovCaixaDe.iTipo, objTransfCaixa.objMovCaixaDe.iAdmMeioPagto, objTransfCaixa.objMovCaixaDe.iParcelamento, objTransfCaixa.objMovCaixaDe.iTipoCartao, objTransfCaixa.objMovCaixaDe.lNumero, objTransfCaixa.objMovCaixaDe.dtDataMovimento, objTransfCaixa.objMovCaixaDe.dValor, objTransfCaixa.objMovCaixaDe.sHistorico, _
                                           objTransfCaixa.objMovCaixaDe.sFavorecido, objTransfCaixa.objMovCaixaDe.lCupomFiscal, objTransfCaixa.objMovCaixaDe.lNumRefInterna, objTransfCaixa.objMovCaixaDe.lMovtoTransf, objTransfCaixa.objMovCaixaDe.lMovtoEstorno, objTransfCaixa.objMovCaixaDe.iGerente, objTransfCaixa.objMovCaixaDe.iCodConta, objTransfCaixa.objMovCaixaDe.dHora, objTransfCaixa.objMovCaixaDe.lTransferencia, objTransfCaixa.objMovCaixaDe.lNumIntExt, objTransfCaixa.objMovCaixaDe.lNumIntDocLog, objTransfCaixa.objMovCaixaDe.iQuantLog)
    If lErro <> SUCESSO Then gError 113705
    
    'inserir na tabela de movto caixa para
    lErro = Comando_Executar(alComando(2), "INSERT INTO MovimentosCaixa " & _
                                           "(FilialEmpresa, NumMovto, Caixa, Operador, Sequencial, Tipo, AdmMeioPagto, Parcelamento, TipoCartao, Numero, DataMovimento, Valor, Historico, Favorecido, CupomFiscal, NumRefInterna, MovtoTransf, MovtoEstorno, Gerente, CodConta, Hora, Transferencia, NumIntExt, NumIntDocLog, QuantLog) " & _
                                           "VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, " & _
                                           "?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", _
                                           objTransfCaixa.objMovCaixaPara.iFilialEmpresa, objTransfCaixa.objMovCaixaPara.lNumMovto, objTransfCaixa.objMovCaixaPara.iCaixa, objTransfCaixa.objMovCaixaPara.iCodOperador, objTransfCaixa.objMovCaixaPara.lSequencial, objTransfCaixa.objMovCaixaPara.iTipo, objTransfCaixa.objMovCaixaPara.iAdmMeioPagto, objTransfCaixa.objMovCaixaPara.iParcelamento, objTransfCaixa.objMovCaixaPara.iTipoCartao, objTransfCaixa.objMovCaixaPara.lNumero, objTransfCaixa.objMovCaixaPara.dtDataMovimento, objTransfCaixa.objMovCaixaPara.dValor, objTransfCaixa.objMovCaixaPara.sHistorico, _
                                           objTransfCaixa.objMovCaixaPara.sFavorecido, objTransfCaixa.objMovCaixaPara.lCupomFiscal, objTransfCaixa.objMovCaixaPara.lNumRefInterna, objTransfCaixa.objMovCaixaPara.lMovtoTransf, objTransfCaixa.objMovCaixaPara.lMovtoEstorno, objTransfCaixa.objMovCaixaPara.iGerente, objTransfCaixa.objMovCaixaPara.iCodConta, objTransfCaixa.objMovCaixaPara.dHora, objTransfCaixa.objMovCaixaPara.lTransferencia, objTransfCaixa.objMovCaixaPara.lNumIntExt, objTransfCaixa.objMovCaixaPara.lNumIntDocLog, objTransfCaixa.objMovCaixaPara.iQuantLog)
    If lErro <> SUCESSO Then gError 113713

    'inserir na tabela transferencialoja
    lErro = Comando_Executar(alComando(3), "INSERT INTO TransferenciaLoja " & _
                                           "(FilialEmpresa, Codigo, NumMovtoCxDe, NumMovtoCxPara) VALUES ( ?, ?, ?, ?)", _
                                           objTransfCaixa.iFilialEmpresa, objTransfCaixa.lCodigo, objTransfCaixa.lNumMovtoCxDe, objTransfCaixa.lNumMovtoCxPara)
    If lErro <> SUCESSO Then gError 105107


    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

   TransfCentral_Inclui = SUCESSO

   Exit Function

Erro_TransfCentral_Inclui:

    TransfCentral_Inclui = gErr
    
    Select Case gErr
    
        Case 105101, 111599, 111600, 111602, 111603, 111604, 111605
         
        Case 105106
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
         
        Case 105107
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_TRANSFERENCIALOJA", gErr, objTransfCaixa.iFilialEmpresa, objTransfCaixa.lCodigo)
    
        Case 113705
            Call Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_MOVIMENTOSCAIXA", gErr, objTransfCaixa.objMovCaixaDe.lNumMovto)
    
        Case 113713
            Call Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_MOVIMENTOSCAIXA", gErr, objTransfCaixa.objMovCaixaPara.lNumMovto)
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150923)
    
    End Select

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

   Exit Function

End Function

Private Function TransfCentral_GravaDe(ByVal objTransfCaixa As ClassTransfCaixa, ByVal objChequeDe As ClassChequePre) As Long
'deve ser chamada em TRANS!!!
'objTransfCaixa eh parametro de Input que traz os dados da transferencia
'objChequeDe eh parametro de input q traz os dados do cheque caso o tipo meio pagto de origem seja cheque

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim objTipoMovtoCaixa As New ClassTipoMovtoCaixa
Dim objTMPLojaFilial As New ClassTMPLojaFilial
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim objBorderoCheque As New ClassBorderoCheque
Dim iIndice As Integer
Dim lNumIntCheque As Long
Dim objCCMovDia As New ClassCCMovDia
Dim objCupomFiscal As New ClassCupomFiscal
Dim objCarne As New ClassCarne
Dim objBaixaCarne As New ClassBaixasCarne

On Error GoTo Erro_TransfCentral_GravaDe

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 111607
    Next

    'preencho codigo de um tipomovtocaixa
    objTipoMovtoCaixa.iCodigo = objTransfCaixa.objMovCaixaDe.iTipo

    'leio o tmplojafilial desse movto caixa
    lErro = CF("TiposMovtoCaixa_Le_Codigo", objTipoMovtoCaixa)
    If lErro <> SUCESSO Then gError 113685

    'guardo os dados para alterar qq coisa que seja não especificada
    objTMPLojaFilial.iTipo = objTipoMovtoCaixa.iTMPLoja
    objTMPLojaFilial.iFilialEmpresa = objTransfCaixa.objMovCaixaDe.iFilialEmpresa
    objTMPLojaFilial.dSaldo = -objTransfCaixa.objMovCaixaDe.dValor

    'guardo os dados para alterar qq coisa que seja especificada
    objAdmMeioPagtoCondPagto.iFilialEmpresa = objTransfCaixa.objMovCaixaDe.iFilialEmpresa
    objAdmMeioPagtoCondPagto.iAdmMeioPagto = objTransfCaixa.objMovCaixaDe.iAdmMeioPagto
    objAdmMeioPagtoCondPagto.iParcelamento = objTransfCaixa.objMovCaixaDe.iParcelamento
    objAdmMeioPagtoCondPagto.dSaldo = -objTransfCaixa.objMovCaixaDe.dValor

    Select Case objTipoMovtoCaixa.iTMPLoja

        Case TIPOMEIOPAGTOLOJA_DINHEIRO

            'altera o saldo em dinheiro
            lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTMPLojaFilial, FAZ_TESTE_SALDO)
            If lErro <> SUCESSO Then gError 113686

        Case TIPOMEIOPAGTOLOJA_CHEQUE

            'locka o cheque
            lErro = CF("Cheque_Lock", objChequeDe)
            If lErro <> 104352 And lErro <> SUCESSO Then gError 113687

            'se o cheque não for encontrado-> erro
            If lErro = 104352 Then gError 113688

            If objChequeDe.iStatus = STATUS_EXCLUIDO Then gError 105314

            'se estiver operando no caixa central e o cheque nao estiver lá ==> erro
            If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL And objChequeDe.iLocalizacao <> CHEQUEPRE_LOCALIZACAO_LOJA Then gError 105091

            'se estiver operando no caixa central+backoffice ou no backoffice  e o cheque nao estiver lá ==> erro
            If giLocalOperacao <> LOCALOPERACAO_CAIXA_CENTRAL And objChequeDe.iLocalizacao <> CHEQUEPRE_LOCALIZACAO_BACKOFFICE Then gError 105092

            'lock do cupom fiscal, se ele estiver preenchido
            If objChequeDe.lCupomFiscal <> 0 Then
            
                'preencho um cupom fiscal
                objCupomFiscal.lNumero = objChequeDe.lCupomFiscal
                objCupomFiscal.iFilialEmpresa = objChequeDe.iFilialEmpresa
                objCupomFiscal.iECF = objChequeDe.iECF
                
                'locka o cupom fiscal
                lErro = CF("CupomFiscal_Lock", objCupomFiscal)
                If lErro <> SUCESSO And lErro <> 104375 Then gError 105274
                
                'se não encontrar-> erro
                If lErro = 104375 Then gError 105275
            
                objTransfCaixa.objMovCaixaDe.lCupomFiscal = objCupomFiscal.lNumIntDoc
            
            Else
            
                objCarne.sCodBarrasCarne = objChequeDe.sCarne
                objCarne.iFilialEmpresa = objChequeDe.iFilialEmpresa
            
                'le uma das baixas associada ao carne em questao
                lErro = CF("BaixasCarne_Le_CodBarras", objCarne, objBaixaCarne)
                If lErro <> SUCESSO And lErro <> 105293 Then gError 105303
                
                'se não encontrar-> erro
                If lErro = SUCESSO Then
            
                    'loca a baixa de carne retornada
                    lErro = CF("BaixasCarne_Lock", objBaixaCarne)
                    If lErro <> SUCESSO And lErro <> 105297 Then gError 105305
                
                    'se não encontrar-> erro
                    If lErro = 105297 Then gError 105306
            
                End If
            
            End If

            'se o cheque for especificado
            If objChequeDe.iNaoEspecificado = CHEQUE_ESPECIFICADO Then

                'altera na de especificados
                lErro = CF("AdmMeioPagtoCondPagto_Altera_Saldo", objAdmMeioPagtoCondPagto, FAZ_TESTE_SALDO)
                If lErro <> SUCESSO Then gError 113689

            'caso contrário
            Else

                'altera na de não-especificados
                lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTMPLojaFilial, FAZ_TESTE_SALDO)
                If lErro <> SUCESSO Then gError 113690

            End If

            'exclui o cheque
            lErro = CF("Cheque_Exclui_EmTrans", objChequeDe)
            If lErro <> SUCESSO Then gError 113697

        Case TIPOMEIOPAGTOLOJA_CARTAO_CREDITO, TIPOMEIOPAGTOLOJA_CARTAO_DEBITO, TIPOMEIOPAGTOLOJA_VALE_TICKET, TIPOMEIOPAGTOLOJA_OUTROS, TIPOMEIOPAGTOLOJA_VALE_REFEICAO, TIPOMEIOPAGTOLOJA_VALE_PRESENTE, TIPOMEIOPAGTOLOJA_VALE_COMBUSTIVEL
            
            'se for especificado
            If objTransfCaixa.objMovCaixaDe.iAdmMeioPagto <> 0 Then
            
                'altero na tabela de especificados
                lErro = CF("AdmMeioPagtoCondPagto_Altera_Saldo", objAdmMeioPagtoCondPagto, FAZ_TESTE_SALDO)
                If lErro <> SUCESSO Then gError 113703
                
            Else
            
                'caso contrário, altero na de não especificados
                lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTMPLojaFilial, FAZ_TESTE_SALDO)
                If lErro <> SUCESSO Then gError 113704
            
            End If
    
    End Select
    
    'preenche um objccmovdia com os dados do movimento de saque do caixa
    lErro = CF("Mover_Dados_Saque_CCMovDia", objTransfCaixa.objMovCaixaDe, objCCMovDia)
    If lErro <> SUCESSO Then gError 105093

    objCCMovDia.iTipoMeioPagto = objTipoMovtoCaixa.iTMPLoja

    'adiciona o mesmo no consolidado diário
    lErro = CF("CCMovDia_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 105094

    'adiciona o mesmo no consolidado anual no mês em questão
    lErro = CF("CCMov_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 105095
    
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    TransfCentral_GravaDe = SUCESSO
    
    Exit Function

Erro_TransfCentral_GravaDe:
    
    TransfCentral_GravaDe = gErr
    
    Select Case gErr
    
        Case 105091
            Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPRE_NAOENCONTRADO_CAIXACENTRAL", gErr, objChequeDe.lSequencialLoja, objChequeDe.iFilialEmpresaLoja)
            
        Case 105092
            Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPRE_NAOENCONTRADO_BACKOFFICE", gErr, objChequeDe.lSequencialBack)
            
        Case 105093 To 105095
            
        Case 105274, 105303, 105305, 113685 To 113691, 113697, 113703, 113704
        
        Case 105275
            Call Rotina_Erro(vbOKOnly, "ERRO_CUPOM_FISCAL_NAO_CADASTRADO", gErr, objCupomFiscal.lNumero)
            
        Case 105304
            Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUE_NAO_CUPOM_CARNE", gErr, objChequeDe.lSequencial)
        
        Case 105306
            Call Rotina_Erro(vbOKOnly, "ERRO_BAIXASCARNE_NAO_CADASTRADO1", gErr, objBaixaCarne.iFilialEmpresa, objBaixaCarne.lNumIntDoc)
            
        Case 105314
            Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUE_EXCLUIDO", gErr, objChequeDe.lSequencial)
            
        Case 111607
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 113688, 113693
            Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPRE_NAO_CADASTRADO", gErr, objChequeDe.lNumIntCheque)
            
        Case 113691, 113692
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUESPRE_DISP", gErr)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150924)
    
    End Select
    
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

''subiu em 10/10/02, tulio... vindo da tela TransfCentral
'Private Function Trata_GravacaoDe_Din(objTransfCaixa As ClassTransfCaixa) As Long
'
''deve ser chamada em TRANS!!!
'
''Essa funcao acerta os totais consolidados considerando que o
''tipomeiopagto eh dinheiro e q o movimento q o envolve seja de origem
'
''ObjTransfCaixa eh parametro de INPUT
'
'
'Dim objTipoMeioPagtoLoja As New ClassTMPLojaFilial
'Dim lErro As Long
'
'On Error GoTo Erro_Trata_GravacaoDe_Din
'
'   'move o saldo q vai ser retirado do tipo em questao
'   objTipoMeioPagtoLoja.dSaldo = -objTransfCaixa.objMovCaixaDe.dValor
'
'   'move o tipo do meio de pagamento
'   objTipoMeioPagtoLoja.iTipo = TIPOMEIOPAGTOLOJA_DINHEIRO
'
'   'move a filial para o obj
'   objTipoMeioPagtoLoja.iFilialEmpresa = giFilialEmpresa
'
'   lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTipoMeioPagtoLoja)
'   If lErro <> SUCESSO Then gError 111557
'
'   Trata_GravacaoDe_Din = SUCESSO
'
'   Exit Function
'
'Erro_Trata_GravacaoDe_Din:
'
'   Trata_GravacaoDe_Din = gErr
'
'   Select Case gErr
'
'      Case 111557
'
'      Case Else
'         Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150925)
'
'   End Select
'
'   Exit Function
'
'End Function
'
''subiu em 10/10/02, tulio... vindo da tela TransfCentral
'Private Function Trata_GravacaoDe_Chq(objTransfCaixa As ClassTransfCaixa, objChequeDe As ClassChequePre, Optional iExclusao As Integer) As Long
'
''deve ser chamada em TRANS!!!
'
''Essa funcao acerta os totais consolidados considerando que o
''tipomeiopagto eh cheque e q o movimento q o envolve seja de origem
'
''ObjTransfCaixa eh parametro de INPUT
''ObjCheque eh parametro de INPUT
'
''O parametro opcional de INPUT iExclusao informa se esta funcao esta sendo chamada com o
''na operacao de gravacao ou na de exclusao para poder setar o status do cheque
''como ativo ou inativo respectivamente
'
'Dim objTipoMeioPagtoLoja As New ClassTMPLojaFilial
'Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
'Dim objBorderoCheque As New ClassBorderoCheque
'Dim sFuncaoAlteraSaldo As String
'Dim sAdmMeioPagto As String
'Dim objGenerico As Object
'Dim lErro As Long
'
'On Error GoTo Erro_Trata_GravacaoDe_Chq
'
'   'se numero do bordero diferente de 0
'   If objChequeDe.lNumBorderoLoja <> 0 Then
'
'      'passa a chave do bordero
'      objBorderoCheque.lNumBordero = objChequeDe.lNumBorderoLoja
'      objBorderoCheque.iFilialEmpresa = giFilialEmpresa
'
'      'le o bordero cheque para verificar se ele existe
'      lErro = CF("BorderoCheque_Le", objBorderoCheque)
'      If lErro <> SUCESSO And lErro <> 104385 Then gError 111566
'
'      'se existe => erro
'      If lErro = SUCESSO Then gError 111567
'
'   End If
'
'   'se o cheque for nao especificado
'   If objChequeDe.iNaoEspecificado = CHEQUE_NAO_ESPECIFICADO Then
'
'      Set objGenerico = objTipoMeioPagtoLoja
'      sAdmMeioPagto = "iTipo"
'      sFuncaoAlteraSaldo = "TipoMeioPagtoLojaFilial_AlteraSaldo"
'      objTipoMeioPagtoLoja.iFilialEmpresa = giFilialEmpresa
'
'   Else
'
'      objAdmMeioPagtoCondPagto.iParcelamento = PARCELAMENTO_AVISTA
'      Set objGenerico = objAdmMeioPagtoCondPagto
'      sAdmMeioPagto = "iAdmMeioPagto"
'      sFuncaoAlteraSaldo = "AdmMeioPagtoCondPagto_AlteraSaldo"
'      objAdmMeioPagtoCondPagto.iFilialEmpresa = giFilialEmpresa
'
'   End If
'
'   'move o saldo q vai ser retirado do tipo em questao
'   objGenerico.dSaldo = -objTransfCaixa.objMovCaixaDe.dValor
'
'   'move o tipo do meio de pagamento
'   Call CallByName(objGenerico, sAdmMeioPagto, VbLet, TIPOMEIOPAGTOLOJA_CHEQUE)
'
'   'chamar a funcao de atualizar o saldo
'   lErro = CF(sFuncaoAlteraSaldo, objGenerico)
'   If lErro <> SUCESSO Then gError 111570
'
'   'se for exclusao
'   If iExclusao = EXCLUSAO Then
'
'      'se o cheque ja tiver sido excluido, erro
'      If objChequeDe.iStatus = STATUS_EXCLUIDO Then gError 111569
'
'      objChequeDe.iStatus = STATUS_EXCLUIDO
'
'   Else
'
'      'se o cheque nao tiver excluido, erro
'      If objChequeDe.iStatus <> STATUS_EXCLUIDO Then gError 111568
'
'      objChequeDe.iStatus = STATUS_ATIVO
'
'   End If
'
'   lErro = Cheque_Altera_Status(objChequeDe.lSequencialLoja, giFilialEmpresa, objChequeDe.iStatus)
'   If lErro <> SUCESSO Then gError 111576
'
'   objTransfCaixa.objMovCaixaDe.lNumRefInterna = objChequeDe.lNumIntCheque
'
'   Trata_GravacaoDe_Chq = SUCESSO
'
'   Exit Function
'
'Erro_Trata_GravacaoDe_Chq:
'
'   Trata_GravacaoDe_Chq = gErr
'
'   Select Case gErr
'
'      Case 111570, 111576
'
'      Case 111565
'         Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPRE_NAO_CADASTRADO", gErr, objChequeDe.lSequencialLoja)
'
'      Case 111567
'         Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPRE_VINCULADO_BORDERO", objChequeDe.lSequencialLoja, objBorderoCheque.lNumBordero)
'
'      Case 111568
'         Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPRE_DUPLICADO", gErr, objChequeDe.lSequencialLoja)
'
'      Case 111569
'         Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPRE_INEXISTENTE", gErr, objChequeDe.lSequencialLoja)
'
'      Case Else
'         Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150926)
'
'   End Select
'
'   Exit Function
'
'End Function
'
''subiu em 10/10/02, tulio... vindo da tela TransfCentral
'Public Function Trata_GravacaoDe_CrtTktOut(objTransfCaixa As ClassTransfCaixa, iMeioPagto As Integer) As Long
'
''deve ser chamada em TRANS!!!
'
''Essa funcao acerta os totais consolidados considerando que o
''tipomeiopagto eh Cartao, Vale/Ticket ou Outros e q o movimento q o envolve seja de origem
'
''ObjTransfCaixa eh parametro de INPUT
'
''O parametro de INPUT iMeioPagto informa o
''AdmMeioPagto envolvido
'
'
'Dim objTipoMeioPagtoLoja As New ClassTMPLojaFilial
'Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
'Dim lErro As Long
'
'On Error GoTo Erro_Trata_GravacaoDe_CrtTktOut
'
'   'se admmeiopagto estiver preenchido
'   If objTransfCaixa.objMovCaixaDe.iAdmMeioPagto <> 0 Then
'
'      'move o saldo
'      objAdmMeioPagtoCondPagto.dSaldo = -objTransfCaixa.objMovCaixaDe.dValor
'
'      'move o amp
'      objAdmMeioPagtoCondPagto.iAdmMeioPagto = objTransfCaixa.objMovCaixaDe.iAdmMeioPagto
'
'      'move o parcelamento
'      objAdmMeioPagtoCondPagto.iParcelamento = objTransfCaixa.objMovCaixaDe.iParcelamento
'
'      objAdmMeioPagtoCondPagto.iFilialEmpresa = giFilialEmpresa
'
'      'atualiza o saldo
'      lErro = CF("AdmMeioPagtoCondPagto_Altera_Saldo", objAdmMeioPagtoCondPagto)
'      If lErro <> SUCESSO Then gError 111577
'
'   Else
'
'      'move o saldo
'      objTipoMeioPagtoLoja.dSaldo = -objTransfCaixa.objMovCaixaDe.dValor
'
'      'move o tipo do meio de pagamento
'      objTipoMeioPagtoLoja.iTipo = iMeioPagto
'
'      objTipoMeioPagtoLoja.iFilialEmpresa = giFilialEmpresa
'
'      'atualiza o saldo...
'      lErro = CF("TipoMeioPagto_Altera_Saldo", objTipoMeioPagtoLoja)
'      If lErro <> SUCESSO Then gError 111578
'
'
'   End If
'
'   Trata_GravacaoDe_CrtTktOut = SUCESSO
'
'   Exit Function
'
'Erro_Trata_GravacaoDe_CrtTktOut:
'
'   Trata_GravacaoDe_CrtTktOut = gErr
'
'   Select Case gErr
'
'      Case 111577, 111578
'
'      Case Else
'         Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150927)
'
'   End Select
'
'   Exit Function
'
'End Function

Private Function TransfCentral_GravaPara(ByVal objTransfCaixa As ClassTransfCaixa, ByVal objChequePara As ClassChequePre) As Long
'Deve ser chamada em TRANS!!!
'objTransfCaixa eh parametro de Input que traz os dados da transferencia
'objChequePara eh parametro de input q traz os dados do cheque caso o tipo meio pagto de origem seja cheque

Dim lErro As Long
Dim objMovimentoCaixa As ClassMovimentoCaixa
Dim sComando As String
Dim alComando(0 To 0) As Long
Dim iIndice As Integer
Dim objTipoMovtoCaixa As New ClassTipoMovtoCaixa
Dim objTMPLojaFilial As New ClassTMPLojaFilial
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim objCupomFiscal As New ClassCupomFiscal
Dim lCodigo As Long
Dim objCCMovDia As New ClassCCMovDia
Dim lSeqLojaNovo As Long
Dim lSeqBackNovo As Long
Dim objCarne As New ClassCarne
Dim objBaixaCarne As New ClassBaixasCarne

On Error GoTo Erro_TransfCentral_GravaPara

    'abro os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 111610
    
    Next
    
    'verifico o tipo movtocaixa
    objTipoMovtoCaixa.iCodigo = objTransfCaixa.objMovCaixaPara.iTipo
    
    lErro = CF("TiposMovtoCaixa_Le_Codigo", objTipoMovtoCaixa)
    If lErro <> SUCESSO Then gError 113706
    
    'guardo os dados para alterar qq coisa que seja não especificada
    objTMPLojaFilial.iTipo = objTipoMovtoCaixa.iTMPLoja
    objTMPLojaFilial.iFilialEmpresa = objTransfCaixa.objMovCaixaPara.iFilialEmpresa
    objTMPLojaFilial.dSaldo = objTransfCaixa.objMovCaixaPara.dValor

    'guardo os dados para alterar qq coisa que seja especificada
    objAdmMeioPagtoCondPagto.iFilialEmpresa = objTransfCaixa.objMovCaixaPara.iFilialEmpresa
    objAdmMeioPagtoCondPagto.iAdmMeioPagto = objTransfCaixa.objMovCaixaPara.iAdmMeioPagto
    objAdmMeioPagtoCondPagto.iParcelamento = objTransfCaixa.objMovCaixaPara.iParcelamento
    objAdmMeioPagtoCondPagto.dSaldo = objTransfCaixa.objMovCaixaPara.dValor
    
    'verifica qual eh o tipo de Destino
    Select Case objTipoMovtoCaixa.iTMPLoja
    
        Case TIPOMEIOPAGTOLOJA_DINHEIRO
        
            'altero na tabela TipoMeioPagtoLojaFilial o saldo em dinheiro
            lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTMPLojaFilial)
            If lErro <> SUCESSO Then gError 113707
        
        
        Case TIPOMEIOPAGTOLOJA_CHEQUE
        
            'locko o cupom fiscal, se ele estiver preenchido
            If objChequePara.lCupomFiscal <> 0 Then
            
                'preencho um cupom fiscal
                objCupomFiscal.lNumero = objChequePara.lCupomFiscal
                objCupomFiscal.iFilialEmpresa = objChequePara.iFilialEmpresa
                objCupomFiscal.iECF = objChequePara.iECF
                
                'locka o cupom fiscal
                lErro = CF("CupomFiscal_Lock", objCupomFiscal)
                If lErro <> SUCESSO And lErro <> 104375 Then gError 113757
                
                'se não encontrar-> erro
                If lErro = 104375 Then gError 113758
            
                objChequePara.iCaixa = objCupomFiscal.iCodCaixa
                objTransfCaixa.objMovCaixaPara.lCupomFiscal = objCupomFiscal.lNumIntDoc
            
            ElseIf Len(objChequePara.sCarne) > 0 Then
            
                objCarne.sCodBarrasCarne = objChequePara.sCarne
                objCarne.iFilialEmpresa = objChequePara.iFilialEmpresa
            
                'le uma das baixas associada ao carne em questao
                lErro = CF("BaixasCarne_Le_CodBarras", objCarne, objBaixaCarne)
                If lErro <> SUCESSO And lErro <> 105293 Then gError 105299
                
                'se não encontrar-> erro
                If lErro = 105293 Then gError 105300
            
                'loca a baixa de carne retornada
                lErro = CF("BaixasCarne_Lock", objBaixaCarne)
                If lErro <> SUCESSO And lErro <> 105297 Then gError 105301
            
                'se não encontrar-> erro
                If lErro = 105297 Then gError 105302
            
            End If
            
            'se o cheque for especificado
            If objChequePara.iNaoEspecificado = CHEQUE_ESPECIFICADO Then
            
                'soma o saldo na tabela admmeiopagtocondpagto
                lErro = CF("AdmMeioPagtoCondPagto_Altera_Saldo", objAdmMeioPagtoCondPagto)
                If lErro <> SUCESSO Then gError 113708
            
            Else
            
                'se for não especificado, somo o saldo na tabela tipomeiopagtolojafilial
                lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTMPLojaFilial)
                If lErro <> SUCESSO Then gError 113709
            
            End If
            
            'preencho o número de movto do cheque
            objChequePara.lNumMovtoCaixa = objTransfCaixa.objMovCaixaPara.lNumMovto
            objChequePara.dtDataEmissao = objTransfCaixa.objMovCaixaPara.dtDataMovimento
            
            'Chama a rotina que gera o sequencial
            lErro = CF("Config_ObterNumInt", "LojaConfig", "COD_PROX_CHEQUE_LOJA", lSeqLojaNovo, 1, objChequePara.iFilialEmpresaLoja)
            If lErro <> SUCESSO Then gError 105099
    
            'preencho o sequencialLoja com o novo código gerado
            objChequePara.lSequencialLoja = lSeqLojaNovo
    
            'se nao estiver trabalhando no caixa central ==> tem que descobrir
            If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL_BACKOFFICE Then
    
                'Chama a rotina que gera o sequencial
                lErro = CF("Config_ObterNumInt", "CPRConfig", "COD_PROX_CHEQUE_BACKOFFICE", lSeqBackNovo, 1)
                If lErro <> SUCESSO Then gError 105100
    
                'preencho o sequencialLoja com o novo código gerado
                objChequePara.lSequencialBack = lSeqBackNovo
                objTransfCaixa.objMovCaixaPara.lNumRefInterna = lSeqBackNovo
        
                objChequePara.iLocalizacao = CHEQUEPRE_LOCALIZACAO_BACKOFFICE
        
            ElseIf giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
            
                objChequePara.iLocalizacao = CHEQUEPRE_LOCALIZACAO_LOJA
                objTransfCaixa.objMovCaixaPara.lNumRefInterna = lSeqLojaNovo
        
            End If
            
            'insiro o mesmo na tabela de cheques
            lErro = CF("Cheque_Insere", objChequePara)
            If lErro <> SUCESSO Then gError 113712
        
        Case TIPOMEIOPAGTOLOJA_CARTAO_CREDITO, TIPOMEIOPAGTOLOJA_CARTAO_DEBITO, TIPOMEIOPAGTOLOJA_VALE_TICKET, TIPOMEIOPAGTOLOJA_OUTROS, TIPOMEIOPAGTOLOJA_VALE_REFEICAO, TIPOMEIOPAGTOLOJA_VALE_PRESENTE, TIPOMEIOPAGTOLOJA_VALE_COMBUSTIVEL
        
            'se a administradora foi especificada
            If objTransfCaixa.objMovCaixaPara.iAdmMeioPagto <> 0 Then
            
                'altero saldo na tabela admmeiopagtocondpagto
                lErro = CF("AdmMeioPagtoCondPagto_Altera_Saldo", objAdmMeioPagtoCondPagto)
                If lErro <> SUCESSO Then gError 113710
            
            Else
            
                'altero saldo na tabela tipomeiopagtolojafilial
                lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTMPLojaFilial)
                If lErro <> SUCESSO Then gError 113711
            
            End If
        
    End Select
    
    'preenche um objccmovdia com os dados do movimento de saque do caixa
    lErro = Mover_Dados_Deposito_CCMovDia(objTransfCaixa.objMovCaixaPara, objCCMovDia)
    If lErro <> SUCESSO Then gError 105096

    objCCMovDia.iTipoMeioPagto = objTipoMovtoCaixa.iTMPLoja
    
    'adiciona o mesmo no consolidado diário
    lErro = CF("CCMovDia_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 105097

    'adiciona o mesmo no consolidado anual no mês em questão
    lErro = CF("CCMov_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 105098
    
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    TransfCentral_GravaPara = SUCESSO
    
    Exit Function

Erro_TransfCentral_GravaPara:
    
    TransfCentral_GravaPara = gErr
    
    Select Case gErr
    
        Case 105096 To 105100, 105299, 105301
        
        Case 105300
            Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUE_NAO_CUPOM_CARNE", gErr, objChequePara.lSequencial)
        
        Case 105302
            Call Rotina_Erro(vbOKOnly, "ERRO_BAIXASCARNE_NAO_CADASTRADO1", gErr, objBaixaCarne.iFilialEmpresa, objBaixaCarne.lNumIntDoc)

        Case 111610
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 113706 To 113712, 113757
        
        Case 113758
            Call Rotina_Erro(vbOKOnly, "ERRO_CUPOM_FISCAL_NAO_CADASTRADO", gErr, objCupomFiscal.lNumero)
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150928)
    
    End Select
    
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function
    
End Function

'subiu em 10/10/02, tulio... vindo da tela TransfCentral

'Private Function Trata_GravacaoPara_Din(objTransfCaixa As ClassTransfCaixa) As Long
'
''deve ser chamada em TRANS!!!
'
''Essa funcao acerta os totais consolidados considerando que o
''tipomeiopagto eh dinheiro e q o movimento q o envolve seja de destino
'
''ObjTransfCaixa eh parametro de INPUT
'
'
'Dim objTipoMeioPagtoLoja As New ClassTMPLojaFilial
'Dim lErro As Long
'
'On Error GoTo Erro_Trata_GravacaoPara_Din
'
'   'move o saldo q vai ser retirado do tipo em questao
'   objTipoMeioPagtoLoja.dSaldo = objTransfCaixa.objMovCaixaPara.dValor
'
'   'move o tipo do meio de pagamento
'   objTipoMeioPagtoLoja.iTipo = TIPOMEIOPAGTOLOJA_DINHEIRO
'
'   'move a filial para o obj
'   objTipoMeioPagtoLoja.iFilialEmpresa = giFilialEmpresa
'
'   lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTipoMeioPagtoLoja)
'   If lErro <> SUCESSO Then gError 111588
'
'   Trata_GravacaoPara_Din = SUCESSO
'
'   Exit Function
'
'Erro_Trata_GravacaoPara_Din:
'
'   Trata_GravacaoPara_Din = gErr
'
'   Select Case gErr
'
'      Case 111588
'
'      Case Else
'         Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150929)
'
'   End Select
'
'   Exit Function
'
'End Function
'
''subiu em 10/10/02, tulio... vindo da tela TransfCentral
'
'Private Function Trata_GravacaoPara_Chq(objTransfCaixa As ClassTransfCaixa, objChequePara As ClassChequePre, Optional iExclusao As Integer) As Long
'
''deve ser chamada em TRANS!!!
'
''Essa funcao acerta os totais consolidados considerando que o
''tipomeiopagto eh cheque e q o movimento q o envolve seja de destino
'
''ObjTransfCaixa eh parametro de INPUT
''ObjChequePara eh parametro de INPUT
'
''O parametro opcional de INPUT iExclusao informa se esta funcao esta sendo chamada com o
''na operacao de gravacao ou na de exclusao para poder setar o status do cheque
''como ativo ou inativo respectivamente
'
'
'Dim objTipoMeioPagtoLoja As New ClassTMPLojaFilial
'Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
'Dim objBorderoCheque As New ClassBorderoCheque
'Dim lErro As Long
'Dim lCodChq As Long
'
'On Error GoTo Erro_Trata_GravacaoPara_Chq
'
'   'se banco estiver preenchido
'   If objChequePara.iBanco <> 0 Then
'
'      objTipoMeioPagtoLoja.dSaldo = objTransfCaixa.objMovCaixaPara.dValor
'
'      objTipoMeioPagtoLoja.iTipo = TIPOMEIOPAGTOLOJA_CHEQUE
'
'      objTipoMeioPagtoLoja.iFilialEmpresa = giFilialEmpresa
'
'      'atualiza o saldo...
'      lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTipoMeioPagtoLoja)
'      If lErro <> SUCESSO Then gError 111590
'
'      objChequePara.iNaoEspecificado = CHEQUE_NAO_ESPECIFICADO
'
'   Else
'
'      objAdmMeioPagtoCondPagto.dSaldo = objTransfCaixa.objMovCaixaPara.dValor
'
'      objAdmMeioPagtoCondPagto.iAdmMeioPagto = TIPOMEIOPAGTOLOJA_CHEQUE
'
'      objAdmMeioPagtoCondPagto.iParcelamento = PARCELAMENTO_AVISTA
'
'      objAdmMeioPagtoCondPagto.iFilialEmpresa = giFilialEmpresa
'
'      'atualiza o saldo...
'      lErro = CF("AdmMeioPagtoCondPagto_Altera_Saldo", objAdmMeioPagtoCondPagto)
'      If lErro <> SUCESSO Then gError 111591
'
'      objChequePara.iNaoEspecificado = CHEQUE_NAO_ESPECIFICADO
'
'   End If
'
'   'se for exclusao
'   If iExclusao = EXCLUSAO Then
'
'      objChequePara.iStatus = STATUS_EXCLUIDO
'
'      'excluir o cheque utilizando numrefinterna
'      lErro = Cheque_Altera_Status(objTransfCaixa.objMovCaixaPara.lNumRefInterna, giFilialEmpresa, objChequePara.iStatus)
'      If lErro <> SUCESSO Then gError 111576
'
'
'   Else
'
'      '????? duvida sobre o campo nummovto e sequencial... qual usar?
'      objChequePara.lNumMovtoCaixa = objTransfCaixa.objMovCaixaPara.lNumMovto
'
'      lErro = Cheque_Codigo_Automatico(lCodChq)
'      If lErro <> SUCESSO Then gError 111612
'
'      objChequePara.lSequencial = lCodChq
'      objChequePara.iFilialEmpresa = giFilialEmpresa
'
'
'      lErro = CF("Cheque_Insere", objChequePara)
'      If lErro <> SUCESSO Then gError 111592
'
'      objTransfCaixa.objMovCaixaPara.lNumRefInterna = objChequePara.lSequencial
'
'   End If
'
'   Trata_GravacaoPara_Chq = SUCESSO
'
'   Exit Function
'
'Erro_Trata_GravacaoPara_Chq:
'
'   Trata_GravacaoPara_Chq = gErr
'
'   Select Case gErr
'
'      Case 111590, 111591, 111592, 111612
'
'      Case Else
'         Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150930)
'
'   End Select
'
'   Exit Function
'
'End Function
'
''subiu em 10/10/02, tulio... vindo da tela TransfCentral
'
'Private Function Trata_GravacaoPara_CrtTktOut(objTransfCaixa As ClassTransfCaixa, iMeioPagto As Integer) As Long
'
''deve ser chamada em TRANS!!!
'
''Essa funcao acerta os totais consolidados considerando que o
''tipomeiopagto eh Cartao, Vale/Ticket ou Outros e q o movimento q o envolve seja de destino
'
''ObjTransfCaixa eh parametro de INPUT
'
''O parametro de INPUT iMeioPagto informa o
''AdmMeioPagto envolvido
'
'
'Dim objTipoMeioPagtoLoja As New ClassTMPLojaFilial
'Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
'Dim lErro As Long
'
'On Error GoTo Erro_Trata_GravacaoPara_CrtTktOut
'
'   'se admmeiopagto estiver preenchido
'   If objTransfCaixa.objMovCaixaDe.iAdmMeioPagto <> 0 Then
'
'      'move o saldo
'      objAdmMeioPagtoCondPagto.dSaldo = objTransfCaixa.objMovCaixaPara.dValor
'
'      'move o amp
'      objAdmMeioPagtoCondPagto.iAdmMeioPagto = objTransfCaixa.objMovCaixaPara.iAdmMeioPagto
'
'      'move o parcelamento
'      objAdmMeioPagtoCondPagto.iParcelamento = objTransfCaixa.objMovCaixaPara.iParcelamento
'
'      objAdmMeioPagtoCondPagto.iFilialEmpresa = giFilialEmpresa
'
'      'atualiza o saldo
'      lErro = CF("AdmMeioPagtoCondPagto_Altera_Saldo", objAdmMeioPagtoCondPagto)
'      If lErro <> SUCESSO Then gError 111588
'
'   Else
'
'      'move o saldo
'      objTipoMeioPagtoLoja.dSaldo = objTransfCaixa.objMovCaixaDe.dValor
'
'      'move o tipo do meio de pagamento
'      objTipoMeioPagtoLoja.iTipo = iMeioPagto
'
'      objTipoMeioPagtoLoja.iFilialEmpresa = giFilialEmpresa
'
'      'atualiza o saldo...
'      lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTipoMeioPagtoLoja)
'      If lErro <> SUCESSO Then gError 111589
'
'   End If
'
'   Trata_GravacaoPara_CrtTktOut = SUCESSO
'
'   Exit Function
'
'Erro_Trata_GravacaoPara_CrtTktOut:
'
'   Trata_GravacaoPara_CrtTktOut = gErr
'
'   Select Case gErr
'
'      Case 111588, 111589
'
'      Case Else
'         Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150931)
'
'   End Select
'
'   Exit Function
'
'End Function

'subiu em 11/10/02, tulio... vindo da tela TransfCentral

'Public Function DeTipoMovtoParaTMP(ByVal iMovto As Integer) As Integer
''essa funcao recebe o tipo do movimento e retorna o tipo de
''meio de pagamento a ele associado...
'
''iMovto eh parametro de input
'
''para verificar o tipo de retorno, ver no seu sge a tabela "TipoMeioPagtoLoja"
'
'   Select Case iMovto
'
'      Case MOVIMENTOCAIXA_ENTRADA_TRANSF_DINHEIRO, MOVIMENTOCAIXA_SAIDA_TRANSF_DINHEIRO
'         DeTipoMovtoParaTMP = TIPOMEIOPAGTOLOJA_DINHEIRO
'
'      Case MOVIMENTOCAIXA_ENTRADA_TRANSF_CHEQUE, MOVIMENTOCAIXA_SAIDA_TRANSF_CHEQUE
'         DeTipoMovtoParaTMP = TIPOMEIOPAGTOLOJA_CHEQUE
'
'      Case MOVIMENTOCAIXA_ENTRADA_TRANSF_VALETICKET, MOVIMENTOCAIXA_SAIDA_TRANSF_VALETICKET
'         DeTipoMovtoParaTMP = TIPOMEIOPAGTOLOJA_VALE_TICKET
'
'      Case MOVIMENTOCAIXA_ENTRADA_TRANSF_CARTAO_CREDITO, MOVIMENTOCAIXA_SAIDA_TRANSF_CARTAO_CREDITO
'         DeTipoMovtoParaTMP = TIPOMEIOPAGTOLOJA_CARTAO_CREDITO
'
'      Case MOVIMENTOCAIXA_ENTRADA_TRANSF_CARTAO_DEBITO, MOVIMENTOCAIXA_SAIDA_TRANSF_CARTAO_DEBITO
'         DeTipoMovtoParaTMP = TIPOMEIOPAGTOLOJA_CARTAO_DEBITO
'
'      Case MOVIMENTOCAIXA_ENTRADA_TRANSF_OUTROS, MOVIMENTOCAIXA_SAIDA_TRANSF_OUTROS
'         DeTipoMovtoParaTMP = TIPOMEIOPAGTOLOJA_OUTROS
'
'      Case Else
'         DeTipoMovtoParaTMP = -1
'
'   End Select
'
'   Exit Function
'
'End Function

'subiu em 11/10/02, tulio... vindo da tela TransfCentral

'Public Sub TransfCaixa_Gera_Log(ByVal sLog As String, ByVal objTransfCaixa As ClassTransfCaixa, ByVal objCheque As ClassChequePre, ByVal bEhInclusao As Boolean)
'
''gera uma string de log na variavel sLog
''essa string eh referente a transferencia de caixa
'
''sLog eh parametro de OUTPUT q retorna a string q representa a transferencia
'
''objTransfCaixa e objCheque sao parametros de INPUT q trazem os dados usados
''para gerar o log
'
''bEhInclusao eh parametro de INPUT q eh necessario para identificar o tipo de operacao
''(inclusao de transferencia ou exclusao de transferencia)...
'
'    'move as infs dos movimentos
'    sLog = IIf(bEhInclusao, TIPOREGISTROECF_TRANSFCAIXA_INCLUSAO, TIPOREGISTROECF_TRANSFCAIXA_EXCLUSAO) & Chr(vbKeyControl)
'
'    Call Bota_Na_String(sLog, CStr(objTransfCaixa.objMovCaixaDe.dHora))
'    Call Bota_Na_String(sLog, CStr(objTransfCaixa.objMovCaixaDe.dtDataMovimento))
'    Call Bota_Na_String(sLog, CStr(objTransfCaixa.objMovCaixaDe.dValor))
'    Call Bota_Na_String(sLog, CStr(objTransfCaixa.objMovCaixaDe.iAdmMeioPagto))
'    Call Bota_Na_String(sLog, CStr(objTransfCaixa.objMovCaixaDe.iCaixa))
'    Call Bota_Na_String(sLog, CStr(objTransfCaixa.objMovCaixaDe.iCodConta))
'    Call Bota_Na_String(sLog, CStr(objTransfCaixa.objMovCaixaDe.iCodOperador))
'    Call Bota_Na_String(sLog, CStr(objTransfCaixa.objMovCaixaDe.iExcluiu))
'    Call Bota_Na_String(sLog, CStr(objTransfCaixa.objMovCaixaDe.iFilialEmpresa))
'    Call Bota_Na_String(sLog, CStr(objTransfCaixa.objMovCaixaDe.iGerente))
'    Call Bota_Na_String(sLog, CStr(objTransfCaixa.objMovCaixaDe.iParcelamento))
'    Call Bota_Na_String(sLog, CStr(objTransfCaixa.objMovCaixaDe.iTipo))
'    Call Bota_Na_String(sLog, CStr(objTransfCaixa.objMovCaixaDe.iTipoCartao))
'    Call Bota_Na_String(sLog, CStr(objTransfCaixa.objMovCaixaDe.lCupomFiscal))
'    Call Bota_Na_String(sLog, CStr(objTransfCaixa.objMovCaixaDe.lMovtoEstorno))
'    Call Bota_Na_String(sLog, CStr(objTransfCaixa.objMovCaixaDe.lMovtoTransf))
'    Call Bota_Na_String(sLog, CStr(objTransfCaixa.objMovCaixaDe.lNumero))
'    Call Bota_Na_String(sLog, CStr(objTransfCaixa.objMovCaixaDe.lNumMovto))
'    Call Bota_Na_String(sLog, CStr(objTransfCaixa.objMovCaixaDe.lNumRefInterna))
'    Call Bota_Na_String(sLog, CStr(objTransfCaixa.objMovCaixaDe.lSequencial))
'    Call Bota_Na_String(sLog, CStr(objTransfCaixa.objMovCaixaDe.lSequencialConta))
'    Call Bota_Na_String(sLog, CStr(objTransfCaixa.objMovCaixaDe.lTransferencia))
'    Call Bota_Na_String(sLog, CStr(objTransfCaixa.objMovCaixaDe.sFavorecido))
'    Call Bota_Na_String(sLog, CStr(objTransfCaixa.objMovCaixaDe.sHistorico))
'    Call Bota_Na_String(sLog, CStr(objTransfCaixa.objMovCaixaPara.dHora))
'    Call Bota_Na_String(sLog, CStr(objTransfCaixa.objMovCaixaPara.dtDataMovimento))
'    Call Bota_Na_String(sLog, CStr(objTransfCaixa.objMovCaixaPara.dValor))
'    Call Bota_Na_String(sLog, CStr(objTransfCaixa.objMovCaixaPara.iAdmMeioPagto))
'    Call Bota_Na_String(sLog, CStr(objTransfCaixa.objMovCaixaPara.iCaixa))
'    Call Bota_Na_String(sLog, CStr(objTransfCaixa.objMovCaixaPara.iCodConta))
'    Call Bota_Na_String(sLog, CStr(objTransfCaixa.objMovCaixaPara.iCodOperador))
'    Call Bota_Na_String(sLog, CStr(objTransfCaixa.objMovCaixaPara.iExcluiu))
'    Call Bota_Na_String(sLog, CStr(objTransfCaixa.objMovCaixaPara.iFilialEmpresa))
'    Call Bota_Na_String(sLog, CStr(objTransfCaixa.objMovCaixaPara.iGerente))
'    Call Bota_Na_String(sLog, CStr(objTransfCaixa.objMovCaixaPara.iParcelamento))
'    Call Bota_Na_String(sLog, CStr(objTransfCaixa.objMovCaixaPara.iTipo))
'    Call Bota_Na_String(sLog, CStr(objTransfCaixa.objMovCaixaPara.iTipoCartao))
'    Call Bota_Na_String(sLog, CStr(objTransfCaixa.objMovCaixaPara.lCupomFiscal))
'    Call Bota_Na_String(sLog, CStr(objTransfCaixa.objMovCaixaPara.lMovtoEstorno))
'    Call Bota_Na_String(sLog, CStr(objTransfCaixa.objMovCaixaPara.lMovtoTransf))
'    Call Bota_Na_String(sLog, CStr(objTransfCaixa.objMovCaixaPara.lNumero))
'    Call Bota_Na_String(sLog, CStr(objTransfCaixa.objMovCaixaPara.lNumMovto))
'    Call Bota_Na_String(sLog, CStr(objTransfCaixa.objMovCaixaPara.lNumRefInterna))
'    Call Bota_Na_String(sLog, CStr(objTransfCaixa.objMovCaixaPara.lSequencial))
'    Call Bota_Na_String(sLog, CStr(objTransfCaixa.objMovCaixaPara.lSequencialConta))
'    Call Bota_Na_String(sLog, CStr(objTransfCaixa.objMovCaixaPara.lTransferencia))
'    Call Bota_Na_String(sLog, CStr(objTransfCaixa.objMovCaixaPara.sFavorecido))
'    Call Bota_Na_String(sLog, CStr(objTransfCaixa.objMovCaixaPara.sHistorico))
'
'    'move as infs do cheque se tiver cheque
'    sLog = sLog + IIf(objCheque.lNumIntCheque > 0, CStr(objCheque.dtDataDeposito) & Chr(vbKeyEscape) & CStr(objCheque.dValor) & Chr(vbKeyEscape) & CStr(objCheque.iAprovado) & Chr(vbKeyEscape) & CStr(objCheque.iBanco) & Chr(vbKeyEscape) & CStr(objCheque.iChequeSel) & Chr(vbKeyEscape) & CStr(objCheque.iECF) & Chr(vbKeyEscape) & CStr(objCheque.iFilial) & Chr(vbKeyEscape) & CStr(objCheque.iFilialEmpresa) & Chr(vbKeyEscape) & CStr(objCheque.iFilialEmpresaLoja) & Chr(vbKeyEscape) & CStr(objCheque.iNaoEspecificado) & Chr(vbKeyEscape) & CStr(objCheque.iStatus) & Chr(vbKeyEscape) & CStr(objCheque.lCliente) & Chr(vbKeyEscape) & CStr(objCheque.lCupomFiscal) & Chr(vbKeyEscape) & CStr(objCheque.lNumBordero) & Chr(vbKeyEscape) & CStr(objCheque.lNumBorderoLoja) & Chr(vbKeyEscape) & CStr(objCheque.lNumero) & Chr(vbKeyEscape) & CStr(objCheque.lNumIntCheque) & Chr(vbKeyEscape) & CStr(objCheque.lNumMovtoCaixa) & Chr(vbKeyEscape) & CStr(objCheque.lNumMovtoSangria) _
'                  & Chr(vbKeyEscape) & CStr(objCheque.lSequencial) & Chr(vbKeyEscape) & CStr(objCheque.lSequencialBack) & Chr(vbKeyEscape) & CStr(objCheque.lSequencialLoja) & Chr(vbKeyEscape) & CStr(objCheque.sAgencia) & Chr(vbKeyEscape) & CStr(objCheque.sContaCorrente) & Chr(vbKeyEscape) & CStr(objCheque.sCPFCGC) & Chr(vbKeyEnd), Chr(vbKeyEnd))
'
'End Sub
'
''subiu em 11/10/02, tulio... vindo da tela TransfCentral
'
'Private Sub Bota_Na_String(sLog As String, sNova As String)
'
''sLog eh parametro de Input e Output q traz os dados do log e retorna
''os dados do log acrescido do conteudo da variavel sNova
'
''sNova eh parametro de input q traz uma nova string a ser incorporada
''no log...
'
'   sLog = sLog & sNova & Chr(vbKeyEscape)
'
'End Sub

Public Function TransfCentral_Exclui_EmTrans(ByVal objTransfCaixa As ClassTransfCaixa) As Long

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(1 To 2) As Long
Dim tTransfCaixa As typeTransfCaixa

On Error GoTo Erro_TransfCentral_Exclui_EmTrans

    'abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 113720
    Next
    
    'le a TransferenciaLoja
    lErro = Comando_ExecutarPos(alComando(1), "SELECT DataBackoffice, NumMovtoCxDe, NumMovtoCxPara FROM TransferenciaLoja " & _
                                              "WHERE FilialEmpresa = ? AND Codigo = ?", 0, _
                                              tTransfCaixa.dtDataBackoffice, tTransfCaixa.lNumMovtoCxDe, tTransfCaixa.lNumMovtoCxPara, objTransfCaixa.iFilialEmpresa, objTransfCaixa.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 105102
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 105103
    
    If lErro = AD_SQL_SEM_DADOS Then gError 105105
    
    'se estiver no caixa central
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
        If tTransfCaixa.dtDataBackoffice <> DATA_NULA Then gError 126008
    End If
    
    'lock da transferencia
    lErro = Comando_LockExclusive(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 105227
    
    objTransfCaixa.lNumMovtoCxDe = tTransfCaixa.lNumMovtoCxDe
    objTransfCaixa.lNumMovtoCxPara = tTransfCaixa.lNumMovtoCxPara
    objTransfCaixa.dtDataBackoffice = tTransfCaixa.dtDataBackoffice
    
    'exclui a origem de uma transferencia
    lErro = TransfCentral_Exclui_De(objTransfCaixa)
    If lErro <> SUCESSO Then gError 105249
    
    'exclui o destino de uma transferencia
    lErro = TransfCentral_Exclui_Para(objTransfCaixa)
    If lErro <> SUCESSO Then gError 105247
   
    lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM TransferenciaLoja", alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 105104
    
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    TransfCentral_Exclui_EmTrans = SUCESSO
    
    Exit Function
    
Erro_TransfCentral_Exclui_EmTrans:
    
    TransfCentral_Exclui_EmTrans = gErr
    
    Select Case gErr
    
        Case 105102, 105103
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TRANSFERENCIALOJA", gErr, objTransfCaixa.iFilialEmpresa, objTransfCaixa.lCodigo)
    
        Case 105104
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_TRANSFERENCIALOJA", gErr, objTransfCaixa.iFilialEmpresa, objTransfCaixa.lCodigo)
    
        Case 105105
            Call Rotina_Erro(vbOKOnly, "ERRO_TRANSFERENCIALOJA_NAOCADASTRADA", gErr, objTransfCaixa.iFilialEmpresa, objTransfCaixa.lCodigo)
    
        Case 105227
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_TRANSFERENCIALOJA", gErr, objTransfCaixa.iFilialEmpresa, objTransfCaixa.lCodigo)
        
        Case 105247, 105249
        
        Case 126008
            Call Rotina_Erro(vbOKOnly, "ERRO_TRANSFERENCIALOJA_DATABACKOFFICE", gErr, objTransfCaixa.iFilialEmpresa, objTransfCaixa.lCodigo)
            
        
    End Select
    
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Private Function TransfCentral_Exclui_De(objTransfCaixa As ClassTransfCaixa) As Long
'exclui a origem de uma transferencia

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(0 To 3) As Long
Dim tCheque As typeChequePre
Dim objTipoMovtoCaixa As New ClassTipoMovtoCaixa
Dim tMovCx As typeMovimentoCaixa
Dim lSequencial As Long
Dim iFilialEmpresa As Integer
Dim objCCMovDia As New ClassCCMovDia

On Error GoTo Erro_TransfCentral_Exclui_De

    'abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 105248
    Next

    'ler o movimento de caixa referente a origem ("DE") da transferencia
    lErro = Comando_ExecutarPos(alComando(0), "SELECT NumRefInterna, Tipo, AdmMeioPagto, Parcelamento, Valor, DataMovimento, Caixa, FilialEmpresa, NumIntDocLog, QuantLog " & _
                                              "FROM MovimentosCaixa " & _
                                              "WHERE NumMovto = ? " & _
                                              "AND FilialEmpresa = ? ", 0, _
                                              tMovCx.lNumRefInterna, tMovCx.iTipo, tMovCx.iAdmMeioPagto, tMovCx.iParcelamento, tMovCx.dValor, tMovCx.dtDataMovimento, tMovCx.iCaixa, tMovCx.iFilialEmpresa, tMovCx.lNumIntDocLog, tMovCx.iQuantLog, _
                                              objTransfCaixa.lNumMovtoCxDe, _
                                              objTransfCaixa.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 113721
    
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 113722
    
    'se não encontrar, erro
    If lErro = AD_SQL_SEM_DADOS Then gError 113723
    
    'locko o movtoCaixa
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 113724
    
    'preencho um codigo de movtocaixa
    objTipoMovtoCaixa.iCodigo = tMovCx.iTipo
    
    'leio-o na memória
    lErro = CF("TiposMovtoCaixa_Le_Codigo", objTipoMovtoCaixa)
    If lErro <> SUCESSO Then gError 113732
    
    'se o tipo "DE" for um cheque, o mesmo precisa ser "desexcluído"
    If objTipoMovtoCaixa.iTMPLoja = TIPOMEIOPAGTOLOJA_CHEQUE Then
        
        If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
        
            'seleciono o cheque na tabela de cheques
            lErro = Comando_ExecutarPos(alComando(1), "SELECT FilialEmpresaLoja, SequencialLoja, NaoEspecificado, Localizacao " & _
                                                      "FROM ChequePre " & _
                                                      "WHERE SequencialLoja = ? " & _
                                                      "AND FilialEmpresaLoja = ?", 0, _
                                                      iFilialEmpresa, lSequencial, tCheque.iNaoEspecificado, tCheque.iLocalizacao, _
                                                      tMovCx.lNumRefInterna, objTransfCaixa.iFilialEmpresa)
            If lErro <> AD_SQL_SUCESSO Then gError 113725
                        
        Else
        
            'seleciono o cheque na tabela de cheques
            lErro = Comando_ExecutarPos(alComando(1), "SELECT FilialEmpresaLoja, SequencialBack, NaoEspecificado, Localizacao " & _
                                                      "FROM ChequePre " & _
                                                      "WHERE SequencialBack = ? ", 0, _
                                                      iFilialEmpresa, lSequencial, tCheque.iNaoEspecificado, tCheque.iLocalizacao, _
                                                      tMovCx.lNumRefInterna)
            If lErro <> AD_SQL_SUCESSO Then gError 105111
                        
        End If
                        
        'busco o primeiro
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 113726
        
        'se não encontrar->erro
        If lErro = AD_SQL_SEM_DADOS Then gError 113727
        
        'locko o cara
        lErro = Comando_LockExclusive(alComando(1))
        If lErro <> AD_SQL_SUCESSO Then gError 113728
        
        'atualizo o seu status para ativo
        lErro = Comando_ExecutarPos(alComando(2), "UPDATE ChequePre SET Status = ?", alComando(1), STATUS_ATIVO)
        If lErro <> AD_SQL_SUCESSO Then gError 113729
    
    End If
    
    'excluir o movimento "de"
    lErro = Comando_ExecutarPos(alComando(3), "DELETE FROM MovimentosCaixa", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 113730
    
    objTransfCaixa.objMovCaixaDe.iAdmMeioPagto = tMovCx.iAdmMeioPagto
    objTransfCaixa.objMovCaixaDe.iParcelamento = tMovCx.iParcelamento
    objTransfCaixa.objMovCaixaDe.dValor = tMovCx.dValor
    objTransfCaixa.objMovCaixaDe.dtDataMovimento = tMovCx.dtDataMovimento
    objTransfCaixa.objMovCaixaDe.iCaixa = tMovCx.iCaixa
    objTransfCaixa.objMovCaixaDe.iFilialEmpresa = tMovCx.iFilialEmpresa
    
    'preenche um objccmovdia com os dados do movimento de saque do caixa
    lErro = CF("Mover_Dados_Saque_CCMovDia", objTransfCaixa.objMovCaixaDe, objCCMovDia)
    If lErro <> SUCESSO Then gError 105242

    'Acerta os saldos em TipoMeioPagtoLoja ou AdmMeioPagtoCondPagto.
    lErro = TransfCentral_Exclui_EmTrans1(objTransfCaixa, tMovCx.dValor, tMovCx, tCheque, objTipoMovtoCaixa, objCCMovDia)
    If lErro <> SUCESSO Then gError 105236

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    TransfCentral_Exclui_De = SUCESSO
    
    Exit Function
    
Erro_TransfCentral_Exclui_De:

    TransfCentral_Exclui_De = gErr

    Select Case gErr
        
        Case 105111, 113725, 113726
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUEPRE_LOJA", gErr, lSequencial, iFilialEmpresa)
        
        Case 105248
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 113721, 113722
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCAIXA", gErr)
        
        Case 113723
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_TRANSFERENCIA_NAO_ENCONTRADO", gErr, objTransfCaixa.lCodigo)
            
        Case 113724
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_MOVIMENTOSCAIXA_TRANSFERENCIA", gErr, objTransfCaixa.lCodigo)
        
        Case 113727
            Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPRE_NAOENCONTRADO", gErr, iFilialEmpresa, lSequencial)
            
        Case 113728
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CHEQUEPRE1", gErr, lSequencial, iFilialEmpresa)
            
        Case 113729
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_CHEQUE2", gErr, iFilialEmpresa, lSequencial)
            
        Case 113730
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_MOVIMENTOSCAIXA_TRANSFERENCIA", gErr, objTransfCaixa.objMovCaixaDe.lTransferencia)
    
        Case 105236, 105242, 113732
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 150932)
        
    End Select
    
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Private Function TransfCentral_Exclui_Para(objTransfCaixa As ClassTransfCaixa) As Long
'exclui o destino de uma transferencia

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(1 To 4) As Long
Dim tCheque As typeChequePre
Dim objTipoMovtoCaixa As New ClassTipoMovtoCaixa
Dim tMovCx As typeMovimentoCaixa
Dim lSequencial As Long
Dim iFilialEmpresa As Integer
Dim objCCMovDia As New ClassCCMovDia
Dim objLog As New ClassLog

On Error GoTo Erro_TransfCentral_Exclui_Para

    'abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 105246
    Next

    'ler o movimento de caixa referente ao destino ("PARA") da transferencia
    lErro = Comando_ExecutarPos(alComando(1), "SELECT NumRefInterna, Tipo, AdmMeioPagto, Parcelamento, Valor, DataMovimento, Caixa, FilialEmpresa, NumIntDocLog, QuantLog " & _
                                              "FROM MovimentosCaixa " & _
                                              "WHERE NumMovto = ? " & _
                                              "AND FilialEmpresa = ? ", 0, _
                                              tMovCx.lNumRefInterna, tMovCx.iTipo, tMovCx.iAdmMeioPagto, tMovCx.iParcelamento, tMovCx.dValor, tMovCx.dtDataMovimento, tMovCx.iCaixa, tMovCx.iFilialEmpresa, tMovCx.lNumIntDocLog, tMovCx.iQuantLog, _
                                              objTransfCaixa.lNumMovtoCxPara, _
                                              objTransfCaixa.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 105238
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 105239
    
    'se não encontrar, erro
    If lErro = AD_SQL_SEM_DADOS Then gError 105240
    
    'locko o movtoCaixa
    lErro = Comando_LockExclusive(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 105241
    
    'preencho um codigo de movtocaixa
    objTipoMovtoCaixa.iCodigo = tMovCx.iTipo
    
    'leio-o na memória
    lErro = CF("TiposMovtoCaixa_Le_Codigo", objTipoMovtoCaixa)
    If lErro <> SUCESSO Then gError 113733
    
    'se o tipo "PARA" for um cheque, o mesmo precisa ser excluído
    If objTipoMovtoCaixa.iTMPLoja = TIPOMEIOPAGTOLOJA_CHEQUE Then
    
        If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
    
            'seleciono o cheque na tabela de cheques
            lErro = Comando_ExecutarPos(alComando(2), "SELECT FilialEmpresaLoja, SequencialLoja, NumIntCheque, NaoEspecificado, Localizacao, Status " & _
                                                      "FROM ChequePre " & _
                                                      "WHERE SequencialLoja = ? " & _
                                                      "AND FilialEmpresaLoja = ?", 0, _
                                                      iFilialEmpresa, lSequencial, tCheque.lNumIntCheque, tCheque.iNaoEspecificado, tCheque.iLocalizacao, tCheque.iStatus, _
                                                      tMovCx.lNumRefInterna, objTransfCaixa.iFilialEmpresa)
            If lErro <> AD_SQL_SUCESSO Then gError 113734
        
        Else
        
            'seleciono o cheque na tabela de cheques
            lErro = Comando_ExecutarPos(alComando(2), "SELECT FilialEmpresaLoja, SequencialBack, NumIntCheque, NaoEspecificado, Localizacao, Status " & _
                                                      "FROM ChequePre " & _
                                                      "WHERE SequencialBack = ? ", 0, _
                                                      iFilialEmpresa, lSequencial, tCheque.lNumIntCheque, tCheque.iNaoEspecificado, tCheque.iLocalizacao, tCheque.iStatus, _
                                                      tMovCx.lNumRefInterna)
            If lErro <> AD_SQL_SUCESSO Then gError 105112
        
        End If
        
        'busco o primeiro
        lErro = Comando_BuscarPrimeiro(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 113735
        
        'se não encontrar->erro
        If lErro = AD_SQL_SEM_DADOS Then gError 113736
        
        'se o cheque estiver excluido ==> erro
        If tCheque.iStatus = STATUS_EXCLUIDO Then gError 126075
        
        'locko o cara
        lErro = Comando_LockExclusive(alComando(2))
        If lErro <> AD_SQL_SUCESSO Then gError 113737
        
        If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
        
            'se o cheque nao estiver no caixa central ==> erro
            If tCheque.iLocalizacao <> CHEQUEPRE_LOCALIZACAO_LOJA Then gError 105110
            
            tCheque.lSequencialLoja = lSequencial
        
        Else
        
            'se o cheque nao estiver no backoffice ==> erro
            If tCheque.iLocalizacao <> CHEQUEPRE_LOCALIZACAO_BACKOFFICE Then gError 105113
            
            tCheque.lSequencialBack = lSequencial
        
        End If
        
        'atualizo o seu status para excluido
        lErro = Comando_ExecutarPos(alComando(3), "DELETE FROM ChequePre", alComando(2))
        If lErro <> AD_SQL_SUCESSO Then gError 113738
    
    End If
    
    'excluo o movimento "Para"
    lErro = Comando_ExecutarPos(alComando(4), "DELETE FROM MovimentosCaixa", alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 113739
    
    objTransfCaixa.objMovCaixaPara.iAdmMeioPagto = tMovCx.iAdmMeioPagto
    objTransfCaixa.objMovCaixaPara.iParcelamento = tMovCx.iParcelamento
    objTransfCaixa.objMovCaixaPara.dValor = tMovCx.dValor
    objTransfCaixa.objMovCaixaPara.dtDataMovimento = tMovCx.dtDataMovimento
    objTransfCaixa.objMovCaixaPara.iCaixa = tMovCx.iCaixa
    objTransfCaixa.objMovCaixaPara.iFilialEmpresa = tMovCx.iFilialEmpresa
    
    Set objCCMovDia = New ClassCCMovDia
    
    'preenche um objccmovdia com os dados do movimento de saque do caixa
    lErro = Mover_Dados_Deposito_CCMovDia(objTransfCaixa.objMovCaixaPara, objCCMovDia)
    If lErro <> SUCESSO Then gError 105245

    'Acerta os saldos em TipoMeioPagtoLoja ou AdmMeioPagtoCondPagto.
    lErro = TransfCentral_Exclui_EmTrans1(objTransfCaixa, -tMovCx.dValor, tMovCx, tCheque, objTipoMovtoCaixa, objCCMovDia)
    If lErro <> SUCESSO Then gError 105236

    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
    
        'se a transferencia já está no backoffice ==> erro
        If objTransfCaixa.dtDataBackoffice <> DATA_NULA Then gError 105108
    
        objLog.lNumIntDoc = tMovCx.lNumIntDocLog
        objLog.iQuantLog = tMovCx.iQuantLog
    
        'grava o log
        lErro = CF("Log_Exclui", objLog)
        If lErro <> SUCESSO Then gError 105109
    
    End If

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    TransfCentral_Exclui_Para = SUCESSO
    
    Exit Function
    
Erro_TransfCentral_Exclui_Para:

    TransfCentral_Exclui_Para = gErr

    Select Case gErr
    
        Case 105108
            Call Rotina_Erro(vbOKOnly, "ERRO_TRANSFERENCIALOJA_DATABACKOFFICE", gErr, objTransfCaixa.iFilialEmpresa, objTransfCaixa.lCodigo)
    
        Case 105109, 105236, 105245, 113733
    
        Case 105110
            Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPRE_NAOENCONTRADO_CAIXACENTRAL", gErr, lSequencial, iFilialEmpresa)
        
        Case 105112, 113734, 113735
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUEPRE_LOJA", gErr, lSequencial, iFilialEmpresa)
    
        Case 105113
            Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPRE_NAOENCONTRADO_BACKOFFICE", gErr, lSequencial)
        
        Case 105238, 105239
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCAIXA", gErr)
    
        Case 105240
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_TRANSFERENCIA_NAO_ENCONTRADO", gErr, objTransfCaixa.lCodigo)
    
        Case 105241
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_MOVIMENTOSCAIXA_TRANSFERENCIA", gErr, objTransfCaixa.lCodigo)
    
        Case 105246
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
    
        Case 113736
            Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPRE_NAOENCONTRADO", gErr, iFilialEmpresa, lSequencial)
            
        Case 113737
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CHEQUEPRE1", gErr, lSequencial, iFilialEmpresa)
        
        Case 113738
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CHEQUESPRE2", gErr, iFilialEmpresa, tCheque.lSequencialLoja, tCheque.lSequencialBack)
            
        Case 113739
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_MOVIMENTOSCAIXA_TRANSFERENCIA", gErr, objTransfCaixa.objMovCaixaDe.lTransferencia)
        
        Case 126075
            Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUE_EXCLUIDO", gErr, lSequencial)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 150933)
        
    End Select
    
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Private Function TransfCentral_Exclui_EmTrans1(objTransfCaixa As ClassTransfCaixa, ByVal dValor As Double, tMovCx As typeMovimentoCaixa, tCheque As typeChequePre, objTipoMovtoCaixa As ClassTipoMovtoCaixa, objCCMovDia As ClassCCMovDia) As Long
'continuacao da funcao TransfCentral_Exclui_EmTrans.
'Acerta os saldos em TipoMeioPagtoLoja ou AdmMeioPagtoCondPagto.

Dim lErro As Long
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim objTMPLojaFilial As New ClassTMPLojaFilial

On Error GoTo Erro_TransfCentral_Exclui_EmTrans1

    Select Case objTipoMovtoCaixa.iTMPLoja
    
        Case TIPOMEIOPAGTOLOJA_DINHEIRO
            objTMPLojaFilial.iFilialEmpresa = objTransfCaixa.iFilialEmpresa
            objTMPLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_DINHEIRO
            objTMPLojaFilial.dSaldo = dValor
            
            lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTMPLojaFilial, FAZ_TESTE_SALDO)
            If lErro <> SUCESSO Then gError 113752
            
        Case TIPOMEIOPAGTOLOJA_CARTAO_CREDITO, _
             TIPOMEIOPAGTOLOJA_CARTAO_DEBITO, _
             TIPOMEIOPAGTOLOJA_VALE_TICKET, _
             TIPOMEIOPAGTOLOJA_VALE_REFEICAO, TIPOMEIOPAGTOLOJA_VALE_PRESENTE, TIPOMEIOPAGTOLOJA_VALE_COMBUSTIVEL, _
             TIPOMEIOPAGTOLOJA_OUTROS
             
            'se for especificado
            If tMovCx.iAdmMeioPagto <> 0 Then
            
                'preencho um admmeiopagtocondpagto
                objAdmMeioPagtoCondPagto.iAdmMeioPagto = tMovCx.iAdmMeioPagto
                objAdmMeioPagtoCondPagto.iFilialEmpresa = objTransfCaixa.iFilialEmpresa
                objAdmMeioPagtoCondPagto.iParcelamento = tMovCx.iParcelamento
                objAdmMeioPagtoCondPagto.dSaldo = dValor
                
                'e altero o saldo na tabela admmeiopagtocondpagto
                lErro = CF("AdmMeioPagtoCondPagto_Altera_Saldo", objAdmMeioPagtoCondPagto, FAZ_TESTE_SALDO)
                If lErro <> SUCESSO Then gError 113753
            
            Else
            
                'preencho um tmplojafilial
                objTMPLojaFilial.iFilialEmpresa = objTransfCaixa.iFilialEmpresa
                objTMPLojaFilial.iTipo = objTipoMovtoCaixa.iTMPLoja
                objTMPLojaFilial.dSaldo = dValor
                
                'e altero o saldo na tabela de tipomeiopagtoloja
                lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTMPLojaFilial, FAZ_TESTE_SALDO)
                If lErro <> SUCESSO Then gError 113754
            
            End If
            
        Case TIPOMEIOPAGTOLOJA_CHEQUE
        
            'se o cheque for especificado
            If tCheque.iNaoEspecificado = CHEQUE_ESPECIFICADO Then
            
                'preencho um admmeiopagtocondpagto
                objAdmMeioPagtoCondPagto.iAdmMeioPagto = MEIO_PAGAMENTO_CHEQUE
                objAdmMeioPagtoCondPagto.iParcelamento = PARCELAMENTO_AVISTA
                objAdmMeioPagtoCondPagto.iFilialEmpresa = objTransfCaixa.iFilialEmpresa
                objAdmMeioPagtoCondPagto.dSaldo = dValor
                
                'e altero o saldo na tabela admmeiopagtocondpagto
                lErro = CF("AdmMeioPagtoCondPagto_Altera_Saldo", objAdmMeioPagtoCondPagto, FAZ_TESTE_SALDO)
                If lErro <> SUCESSO Then gError 113755
            
            Else
            
                'preencho um tmplojafilial
                objTMPLojaFilial.iFilialEmpresa = objTransfCaixa.iFilialEmpresa
                objTMPLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_CHEQUE
                objTMPLojaFilial.dSaldo = dValor
                
                'e altero o saldo na tabela de tipomeiopagtoloja
                lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTMPLojaFilial, FAZ_TESTE_SALDO)
                If lErro <> SUCESSO Then gError 113756
            
            End If
    
    End Select
    
    objCCMovDia.iTipoMeioPagto = objTipoMovtoCaixa.iTMPLoja
    
    lErro = CF("CCMovDia_Exclui", objCCMovDia)
    If lErro <> SUCESSO Then gError 105243

    lErro = CF("CCMov_Exclui", objCCMovDia)
    If lErro <> SUCESSO Then gError 105244
    
    TransfCentral_Exclui_EmTrans1 = SUCESSO
    
    Exit Function

Erro_TransfCentral_Exclui_EmTrans1:
    
    TransfCentral_Exclui_EmTrans1 = gErr
    
    Select Case gErr
    
        Case 105243, 105244, 113752 To 113756
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 150934)
        
    End Select
    
    Exit Function

End Function

Public Function TransfCentral_Exclui(ByVal objTransfCaixa As ClassTransfCaixa) As Long
'objTransfCaixa eh parametro de INPUT que traz o movimento

Dim lTransacao As Long
Dim lErro As Long
Dim objCaixa As New ClassCaixa

On Error GoTo Erro_TransfCentral_Exclui
    
    'abre transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 113718
    
    'preencho os atributos para lockar o caixa
    objCaixa.iCodigo = CODIGO_CAIXA_CENTRAL
    objCaixa.iFilialEmpresa = objTransfCaixa.iFilialEmpresa
    
    'locka o caixa
    lErro = CF("Caixa_Lock", objCaixa)
    If lErro <> SUCESSO And lErro <> 103776 Then gError 113744
    
    If lErro = 103776 Then gError 113745
    
    'chamo a função para exclusão em trans
    lErro = CF("TransfCentral_Exclui_EmTrans", objTransfCaixa)
    If lErro <> SUCESSO Then gError 113751
    
    'commita a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 113719
    
    TransfCentral_Exclui = SUCESSO
    
    Exit Function
    
Erro_TransfCentral_Exclui:

    TransfCentral_Exclui = gErr
    
    Select Case gErr
    
        Case 113751, 113744
        
        Case 113745
            Call Rotina_Erro(vbOKOnly, "ERRO_CAIXA_NAO_CADASTRADO", gErr, objCaixa.iCodigo)
        
        Case 113718
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
    
        Case 113719
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150935)
    
    End Select
    
    Call Transacao_Rollback
    
    Exit Function
 
'Dim objTransfCaixa1 As New ClassTransfCaixa
'Dim objChequePara1 As New ClassChequePre
'Dim objChequeDe1 As New ClassChequePre
'Dim objLog As New ClassLog
'Dim objTipoMovtoCaixa As New ClassTipoMovtoCaixa
'   'coloca os movimentos cruzados
'   Set objTransfExc.objMovCaixaDe = objTransfCaixa.objMovCaixaPara
'   Set objTransfExc.objMovCaixaPara = objTransfCaixa.objMovCaixaDe
'
'    'preenche o atributo para buscar o tipoMovtoCaixa
'    objTipoMovtoCaixa.iCodigo = objTransfExc.objMovCaixaDe.iTipo
'
'    'busca o tipomovtocaixa
'    lErro = CF("TiposMovtoCaixa_Le_Codigo", objTipoMovtoCaixa)
'    If lErro <> SUCESSO Then gError 113681
'
'    Select Case objTipoMovtoCaixa.iTMPLoja
'
'        'se tipomovto origem for cheque
'        Case TIPOMEIOPAGTOLOJA_CHEQUE
'
'      objChequePara1.lSequencial = objTransfExc.objMovCaixaPara.lNumRefInterna
'      objChequePara1.iFilialEmpresaLoja = giFilialEmpresa
'
'      'colocar os dds do cheque em objChequePara1
'      lErro = CF("Cheque_Le", objChequePara1)
'      If lErro <> SUCESSO And lErro <> 104346 Then gError 111616
'
'      If lErro <> SUCESSO Then gError 111617
'
'    End Select
'
'   'se tipomovto destino for cheque
'   If DeTipoMovtoParaTMP(objTransfExc.objMovCaixaDe.iTipo) = TIPOMEIOPAGTOLOJA_CHEQUE Then
'
'      objChequeDe1.lNumIntCheque = objTransfExc.objMovCaixaDe.lNumRefInterna
'
'      'colocar os dds do cheque em objChequePara1
'      lErro = CF("Cheque_Le", objChequeDe1)
'      If lErro <> SUCESSO And lErro <> 104346 Then gError 111618
'
'      If lErro <> SUCESSO Then gError 111619
'
'   End If
'
'   lErro = TransfCentral_GravaDe(objTransfExc, objChequeDe1, EXCLUSAO)
'   If lErro <> SUCESSO Then gError 111614
'
'   lErro = TransfCentral_GravaPara(objTransfExc, objChequePara1, EXCLUSAO)
'   If lErro <> SUCESSO Then gError 111615
'
'   'objLog.iOperacao = EXCLUSAO_TRANSFERENCIA
'
'   Call TransfCaixa_Gera_Log(objLog.sLog, objTransfCaixa, objChequeDe1, False)
'
''   Call Mover_Dados_TransfCentral_Log1(objTransfExc, objChequeDe1, objChequePara1, objLog)

'   TransfCentral_Exclui = SUCESSO
'
'   Exit Function
'
'Erro_TransfCentral_Exclui:
'
'   TransfCentral_Exclui = gErr
'
'   Select Case gErr
'
'       Case 111614, 111615, 111616, 111618, 113681
'
'       Case 111617
'         Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPRE_NAO_CADASTRADO", gErr, objChequePara1.lNumIntCheque)
'
'       Case 111619
'         Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPRE_NAO_CADASTRADO", gErr, objChequeDe1.lNumIntCheque)
'
'       Case Else
'         Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150936)
'
'   End Select
'
'   Exit Function

End Function

Public Function Cheque_Codigo_Automatico(lCodigo As Long) As Long
'Gera o proximo codigo.Deve ser chamada dentro de transação

Dim lErro As Long

On Error GoTo Erro_Cheque_Codigo_Automatico

    'Chama a rotina que gera o sequencial para Loja
    lErro = CF("Config_ObterAutomatico_EmTrans", "LojaConfig", "COD_PROX_CHEQUE_LOJA", "Cheque", "Sequencial", lCodigo, "FilialEmpresaLoja")
    If lErro <> SUCESSO Then gError 104329

    Cheque_Codigo_Automatico = SUCESSO

    Exit Function

Erro_Cheque_Codigo_Automatico:

    Cheque_Codigo_Automatico = gErr

    Select Case gErr

        Case 104329, 104462

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 150937)

    End Select

End Function

Private Sub Mover_Dados_BorderoOutros_AdmMeioPagtoCondPagto1(ByVal objBorderoOutros As ClassBorderoOutros, ByVal objAdmMeioPagtoCondPagto As ClassAdmMeioPagtoCondPagto)
'transfere os dados de um borderooutros para um admmeiopagtocondpagto

On Error GoTo Erro_Mover_Dados_BorderoOutros_AdmMeioPagtoCondPagto1

    objAdmMeioPagtoCondPagto.iAdmMeioPagto = objBorderoOutros.iAdmMeioPagto
    objAdmMeioPagtoCondPagto.iFilialEmpresa = objBorderoOutros.iFilialEmpresa
    objAdmMeioPagtoCondPagto.iParcelamento = objBorderoOutros.iParcelamento
    objAdmMeioPagtoCondPagto.dSaldo = -objBorderoOutros.dValor

    Exit Sub

Erro_Mover_Dados_BorderoOutros_AdmMeioPagtoCondPagto1:

    Select Case gErr
        
        Case Else

            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150938)

    End Select

    Exit Sub

End Sub

Private Sub Mover_Dados_BorderoOutros_CCMovDia(ByVal objBorderoOutros As ClassBorderoOutros, ByVal objCCMovDia As ClassCCMovDia)
'transfere os dados de um borderooutros para um ccmovdia

On Error GoTo Erro_Mover_Dados_BorderoOutros_CCMovDia

    objCCMovDia.dDeb = objBorderoOutros.dValor + objBorderoOutros.dValorN
    objCCMovDia.dtData = objBorderoOutros.dtDataEnvio
    objCCMovDia.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_OUTROS
    objCCMovDia.iAdmMeioPagto = objBorderoOutros.iAdmMeioPagto
    objCCMovDia.iCodCaixa = CODIGO_CAIXA_CENTRAL
    objCCMovDia.iFilialEmpresa = objBorderoOutros.iFilialEmpresa
    objCCMovDia.iParcelamento = objBorderoOutros.iParcelamento

    Exit Sub

Erro_Mover_Dados_BorderoOutros_CCMovDia:

    Select Case gErr
        
        Case Else

            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150939)

    End Select
    
    Exit Sub

End Sub

Private Sub Mover_Dados_BorderoOutros_MovCaixa(ByVal objBorderoOutros As ClassBorderoOutros, ByVal objMovimentoCaixa As ClassMovimentoCaixa)
'preenche um movcaixa através de um objborderooutros

On Error GoTo Erro_Mover_Dados_BorderoOutros_MovCaixa

    objMovimentoCaixa.dtDataMovimento = objBorderoOutros.dtDataEnvio
    objMovimentoCaixa.dValor = objBorderoOutros.dValor + objBorderoOutros.dValorN
    objMovimentoCaixa.iAdmMeioPagto = objBorderoOutros.iAdmMeioPagto
    objMovimentoCaixa.iCaixa = CODIGO_CAIXA_CENTRAL
    objMovimentoCaixa.iFilialEmpresa = objBorderoOutros.iFilialEmpresa
    objMovimentoCaixa.iParcelamento = objBorderoOutros.iParcelamento
    objMovimentoCaixa.iTipo = MOVIMENTOCAIXA_BORDERO_OUTROS
    objMovimentoCaixa.lNumRefInterna = objBorderoOutros.lNumBordero
    objMovimentoCaixa.dHora = CDbl(Time)

    Exit Sub

Erro_Mover_Dados_BorderoOutros_MovCaixa:
    
    Select Case gErr
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150940)

    End Select

    Exit Sub
    
End Sub

Public Function BorderoOutros_Insere(ByVal objBorderoOutros As ClassBorderoOutros) As Long
'função que insere um borderooutros e gera o título a receber se for o caso

Dim lErro As Long
Dim objMovimentoCaixa As New ClassMovimentoCaixa
Dim lSequencial As Long
Dim objLog As New ClassLog
Dim lNumMovto As Long
Dim lComando As Long

On Error GoTo Erro_BorderoOutros_Insere

    'Abre comando
    lComando = Comando_Abrir
    If lComando = 0 Then gError 113767

    'preenche o movimento de caixa
    Call Mover_Dados_BorderoOutros_MovCaixa(objBorderoOutros, objMovimentoCaixa)
    
    'pegar o proximo numero de movimento disponivel na tabela.
    lErro = CF("Config_ObterNumInt", "LojaConfig", "NUM_PROX_MOVCAIXACENTRAL", lNumMovto, 1, objBorderoOutros.iFilialEmpresa)
    If lErro <> SUCESSO Then gError 110090
    
    'se o sequencial ainda estiver zerado
    If objMovimentoCaixa.lSequencial = 0 Then
        
        'cria um
        lErro = CF("Caixa_Sequencial_Automatico", objMovimentoCaixa.iCaixa, objMovimentoCaixa.iFilialEmpresa, lSequencial)
        If lErro <> SUCESSO Then gError 110091
        
        objMovimentoCaixa.lSequencial = lSequencial
    
    End If
        
    'preencher o movimentocaixa com número de movimento novo gerado
    objMovimentoCaixa.lNumMovto = lNumMovto
    
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
    
        'prenche um Log
        Call Mover_Dados_BorderoOutros_Log(objBorderoOutros, objMovimentoCaixa, objLog)
        
        objLog.iOperacao = INCLUSAO_BORDEROOUTROS
        
        'grava o log
        lErro = CF("Log_Grava", objLog)
        If lErro <> SUCESSO Then gError 110092
    
    End If
    
    'executa a inserção na tabela de movimentos de caixa
    lErro = Comando_Executar(lComando, "INSERT INTO MovimentosCaixa(FilialEmpresa,NumMovto,Caixa,Sequencial,Tipo,AdmMeioPagto,Parcelamento,TipoCartao,Numero,DataMovimento,Valor,Historico,Favorecido,CupomFiscal,NumRefInterna,MovtoTransf,MovtoEstorno,Gerente,CodConta,Hora, NumIntDocLog, QuantLog) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
    objMovimentoCaixa.iFilialEmpresa, objMovimentoCaixa.lNumMovto, objMovimentoCaixa.iCaixa, objMovimentoCaixa.lSequencial, objMovimentoCaixa.iTipo, objMovimentoCaixa.iAdmMeioPagto, objMovimentoCaixa.iParcelamento, objMovimentoCaixa.iTipoCartao, objMovimentoCaixa.lNumero, objMovimentoCaixa.dtDataMovimento, objMovimentoCaixa.dValor, objMovimentoCaixa.sHistorico, objMovimentoCaixa.sFavorecido, objMovimentoCaixa.lCupomFiscal, objMovimentoCaixa.lNumRefInterna, objMovimentoCaixa.lMovtoTransf, objMovimentoCaixa.lMovtoEstorno, objMovimentoCaixa.iGerente, objMovimentoCaixa.iCodConta, objMovimentoCaixa.dHora, objLog.lNumIntDoc, objLog.iQuantLog)
    If lErro <> SUCESSO Then gError 110093
    
    'se estiver em BO +CC
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL_BACKOFFICE Then
    
        'gera o título a receber associado ao borderô
        lErro = CF("TituloReceber_Gera_BorderoOutros", objBorderoOutros)
        If lErro <> SUCESSO Then gError 108122
    
    End If
    
    objBorderoOutros.lNumMovtoCx = objMovimentoCaixa.lNumMovto
    
    'insere o borderô pp dito
    lErro = CF("BorderoOutros_Inserir", objBorderoOutros)
    If lErro <> SUCESSO Then gError 108123
    
    BorderoOutros_Insere = SUCESSO

    Call Comando_Fechar(lComando)

    Exit Function

Erro_BorderoOutros_Insere:

    BorderoOutros_Insere = gErr
    
    Select Case gErr
    
        Case 108121 To 108123, 110090 To 110092
    
        Case 110093
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_INSERCAO", gErr, STRING_CAIXA_CENTRAL, objMovimentoCaixa.lSequencial)
    
        Case 113767
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150941)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Public Function TituloReceber_Gera_BorderoOutros(ByVal objBorderoOutros As ClassBorderoOutros) As Long
'Função que gera um título a receber através de um borderooutros

Dim lErro As Long
Dim colComissaoFantasma As New colComissao
Dim colcolComissao As New colcolComissao
Dim objCliente As New ClassCliente
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim dtDataVencimento1 As Date
Dim dtDataVencimentoReal As Date
Dim objParcelaRec As ClassParcelaReceber
Dim objAdmMeioPagtoParcela  As ClassAdmMeioPagtoParcelas
Dim objTituloReceber As New ClassTituloReceber
Dim colParcelas As New ColParcelaReceber
Dim colComissaoEmissao As New colComissao
Dim lNumAuto As Long
Dim objAdmMeioPagto As New ClassAdmMeioPagto
Dim objRede As New ClassRede
Dim dValor As Double

On Error GoTo Erro_TituloReceber_Gera_BorderoOutros

    objAdmMeioPagto.iCodigo = objBorderoOutros.iAdmMeioPagto
    objAdmMeioPagto.iFilialEmpresa = objBorderoOutros.iFilialEmpresa
    
    'Lê a admmeiopagto
    lErro = CF("AdmMeioPagto_Le", objAdmMeioPagto)
    If lErro <> SUCESSO And lErro <> 104017 Then gError 110082

    If lErro = 104017 Then gError 110083

    objRede.iCodigo = objAdmMeioPagto.iRede

    'Le a rede associada ao item do bordero
    lErro = CF("Rede_Le", objRede)
    If lErro <> SUCESSO And lErro <> 104244 Then gError 110084
    
    'se a rede nao estiver cadastrada ==> erro
    If lErro <> SUCESSO Then gError 110085
    
    'preenche os atributos chave de uma admmeiopagtocondpagto
    objAdmMeioPagtoCondPagto.iFilialEmpresa = objBorderoOutros.iFilialEmpresa
    objAdmMeioPagtoCondPagto.iAdmMeioPagto = objBorderoOutros.iAdmMeioPagto
    objAdmMeioPagtoCondPagto.iParcelamento = objBorderoOutros.iParcelamento
    
    'lê uma determinada admmeiopagtocondpagto
    lErro = CF("AdmMeioPagtoCondPagto_Le_Parcelamento", objAdmMeioPagtoCondPagto)
    If lErro <> SUCESSO And lErro <> 107297 Then gError 108126
    
    If lErro = 107297 Then gError 108127

    'lê as parcelas de uma admmeiopagtocondpagto
    lErro = CF("AdmMeioPagtoParcelas_Le", objAdmMeioPagtoCondPagto)
    If lErro <> SUCESSO Then gError 108128

    'se a coleção retornar vazia-> erro
    If objAdmMeioPagtoCondPagto.colParcelas.Count = 0 Then gError 108129
    
    'gera um novo número de título a receber
    lErro = CF("Config_ObterNumInt", "CPRConfig", "NUM_PROX_NUMTITULOLOJA", lNumAuto, objAdmMeioPagtoCondPagto.colParcelas.Count, objBorderoOutros.iFilialEmpresa)
    If lErro <> SUCESSO Then gError 108131
    
    'preenche o título a receber
    objTituloReceber.lNumTitulo = lNumAuto
    objTituloReceber.sSiglaDocumento = TIPODOC_LOJA
    objTituloReceber.dtDataEmissao = objBorderoOutros.dtDataEnvio
    dValor = (objBorderoOutros.dValor + objBorderoOutros.dValorN) * (1 - objAdmMeioPagtoCondPagto.dTaxa - objAdmMeioPagtoCondPagto.dDesconto)
    objTituloReceber.iNumParcelas = objAdmMeioPagtoCondPagto.iParcelasRecebto
    objTituloReceber.iStatus = STATUS_LANCADO
    objTituloReceber.dtDataRegistro = Date
    objTituloReceber.lCliente = objRede.lCliente
    objTituloReceber.iFilial = objRede.iFilialCli
    objTituloReceber.iFilialEmpresa = objBorderoOutros.iFilialEmpresa

    dtDataVencimento1 = objBorderoOutros.dtDataEnvio

    'varre a coleção de parcelas "modelo do admmeiopagtocondpagto
    For Each objAdmMeioPagtoParcela In objAdmMeioPagtoCondPagto.colParcelas
        
        'cria uma coleção de comissão fantasmas para a parcela em questão
        colcolComissao.Add colComissaoFantasma

        'cria uma nova parcela a receber
        Set objParcelaRec = New ClassParcelaReceber
        
        'o valor da parcela é o valor total multiplicado pelo percentual da parcela
        objParcelaRec.dValor = dValor * objAdmMeioPagtoParcela.dPercRecebimento
        objParcelaRec.iNumParcela = objAdmMeioPagtoParcela.iParcela
        
        'se os juros forem pagos pela loja ==> desconta os juros da parcela
        If objAdmMeioPagtoCondPagto.iJurosParcelamento = JUROS_LOJA Then
            objParcelaRec.dValor = objParcelaRec.dValor * (1 - objAdmMeioPagtoCondPagto.dJuros) ^ (objParcelaRec.iNumParcela - 1)
        End If
        
        dtDataVencimento1 = dtDataVencimento1 + objAdmMeioPagtoParcela.iIntervaloRecebimento
        objParcelaRec.dtDataVencimento = dtDataVencimento1

        'calcula seu vencimento real
        lErro = CF("DataVencto_Real", dtDataVencimento1, dtDataVencimentoReal)
        If lErro <> SUCESSO Then gError 108130

        objParcelaRec.dtDataVencimentoReal = dtDataVencimentoReal
        objParcelaRec.iStatus = STATUS_ABERTO
        objParcelaRec.iCobrador = COBRADOR_PROPRIA_EMPRESA
        objParcelaRec.iCarteiraCobranca = CARTEIRA_CARTEIRA
        
        'adiciona à coleção de parcelas a receber
        With objParcelaRec
        '#################################################
        'ALTERADO POR WAGNER
            colParcelas.Add .lNumIntDoc, objTituloReceber.lNumTitulo, .iNumParcela, .iStatus, .dtDataVencimento, .dtDataVencimentoReal, .dSaldo, .dValor, .iProxSeqBaixa, .iCarteiraCobranca, .iCobrador, .sNumTitCobrador, objBorderoOutros.lNumBordero, 0, 0, 0, 0, 0, .iDesconto1Codigo, DATA_NULA, .dDesconto1Valor, .iDesconto2Codigo, DATA_NULA, .dDesconto2Valor, .iDesconto3Codigo, DATA_NULA, .dDesconto3Valor, .lNumIntCheque, .iAceite, .iDescontada, .iProxSeqOcorr, .iPrevisao, .sObservacao, .dValor
        '#################################################
        End With

        objTituloReceber.dValor = objTituloReceber.dValor + objParcelaRec.dValor

    Next
    
    objTituloReceber.dSaldo = objTituloReceber.dValor
    
    'insere o titulo a receber
    lErro = CF("TituloReceber_Insere", objTituloReceber, colParcelas, colComissaoEmissao, colcolComissao)
    If lErro <> SUCESSO Then gError 108132
    
    'preenche o numero do CPR
    objBorderoOutros.lNumIntDocCPR = objTituloReceber.lNumIntDoc
    
    TituloReceber_Gera_BorderoOutros = SUCESSO
    
    Exit Function

Erro_TituloReceber_Gera_BorderoOutros:

    TituloReceber_Gera_BorderoOutros = gErr
    
    Select Case gErr
    
        Case 108128, 108130, 108132, 110082, 110084
        
        Case 108127
            Call Rotina_Erro(vbOKOnly, "ERRO_ADMMEIOPAGTOCONDPAGTO_INEXISTENTE1", gErr, objAdmMeioPagtoCondPagto.iFilialEmpresa, objAdmMeioPagtoCondPagto.iAdmMeioPagto, objAdmMeioPagtoCondPagto.iParcelamento)
        
        Case 108129
            Call Rotina_Erro(vbOKOnly, "ERRO_ADMMEIOPAGTOPARCELA_NAOENCONTRADA", gErr, objAdmMeioPagtoCondPagto.iFilialEmpresa, objAdmMeioPagtoCondPagto.iAdmMeioPagto, objAdmMeioPagtoCondPagto.iParcelamento)
            
        Case 108131
            
        Case 110083
            Call Rotina_Erro(vbOKOnly, "ERRO_ADMMEIOPAGTO_NAO_CADASTRADO", gErr, objAdmMeioPagto.iCodigo)
            
        Case 110085
            Call Rotina_Erro(vbOKOnly, "ERRO_REDE_NAO_ENCONTRADA", gErr, objRede.iCodigo)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150942)

    End Select

    Exit Function

End Function

Private Sub Mover_Dados_BorderoOutros_Log(ByVal objBorderoOutros As ClassBorderoOutros, ByVal objMovimentoCaixa As ClassMovimentoCaixa, ByVal objLog As ClassLog)
'preenche um log com os dados

On Error GoTo Erro_Mover_Dados_BorderoOutros_Log

    objLog.sLog = CStr(objBorderoOutros.iFilialEmpresa) & Chr(vbKeyEscape) & _
                  CStr(objBorderoOutros.lNumBordero) & Chr(vbKeyEscape) & _
                  CStr(objBorderoOutros.iAdmMeioPagto) & Chr(vbKeyEscape) & _
                  CStr(objBorderoOutros.iParcelamento) & Chr(vbKeyEscape) & _
                  CStr(objBorderoOutros.dtDataEnvio) & Chr(vbKeyEscape) & _
                  CStr(objBorderoOutros.dtDataImpressao) & Chr(vbKeyEscape) & _
                  CStr(objBorderoOutros.dtDataBackoffice) & Chr(vbKeyEscape) & _
                  CStr(objBorderoOutros.dValor) & Chr(vbKeyEscape) & _
                  CStr(objBorderoOutros.dValorN) & Chr(vbKeyEscape) & _
                  CStr(objMovimentoCaixa.lNumMovto) & Chr(vbKeyEscape) & _
                  CStr(objMovimentoCaixa.iCaixa) & Chr(vbKeyEscape) & _
                  CStr(objMovimentoCaixa.lSequencial) & Chr(vbKeyEscape) & _
                  CStr(objMovimentoCaixa.iTipo) & Chr(vbKeyEscape) & _
                  CStr(objMovimentoCaixa.dHora) & Chr(vbKeyEscape)

    objLog.sLog = objLog.sLog & Chr(vbKeyEnd)

    Exit Sub

Erro_Mover_Dados_BorderoOutros_Log:
    
    Select Case gErr
        
        Case Else

            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150943)

    End Select

    Exit Sub

End Sub

Private Sub Mover_Dados_BorderoOutros_AdmMeioPagtoCondPagto(tBorderoOutros As typeBorderoOutros, ByVal objAdmMeioPagtoCondPagto As ClassAdmMeioPagtoCondPagto)
'transfere os dados de um borderooutros para um admmeiopagtocondpagto

On Error GoTo Erro_Mover_Dados_BorderoOutros_AdmMeioPagtoCondPagto

    objAdmMeioPagtoCondPagto.iAdmMeioPagto = tBorderoOutros.iAdmMeioPagto
    objAdmMeioPagtoCondPagto.iFilialEmpresa = tBorderoOutros.iFilialEmpresa
    objAdmMeioPagtoCondPagto.iParcelamento = tBorderoOutros.iParcelamento
    objAdmMeioPagtoCondPagto.dSaldo = tBorderoOutros.dValor

    Exit Sub

Erro_Mover_Dados_BorderoOutros_AdmMeioPagtoCondPagto:

    Select Case gErr
        
        Case Else

            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150944)

    End Select

    Exit Sub

End Sub

Private Sub Mover_Dados_BorderoOutros_CCMovDia1(tBorderoOutros As typeBorderoOutros, ByVal objCCMovDia As ClassCCMovDia)
'preenche um ccmovdia com os dados de um borderooutros

On Error GoTo Erro_Mover_Dados_BorderoOutros_CCMovDia1

    objCCMovDia.dDeb = tBorderoOutros.dValor + tBorderoOutros.dValorN
    objCCMovDia.dtData = tBorderoOutros.dtDataEnvio
    objCCMovDia.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_OUTROS
    objCCMovDia.iAdmMeioPagto = tBorderoOutros.iAdmMeioPagto
    objCCMovDia.iCodCaixa = CODIGO_CAIXA_CENTRAL
    objCCMovDia.iFilialEmpresa = tBorderoOutros.iFilialEmpresa
    objCCMovDia.iParcelamento = tBorderoOutros.iParcelamento
    
    Exit Sub

Erro_Mover_Dados_BorderoOutros_CCMovDia1:

    Select Case gErr
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150945)

    End Select

    Exit Sub

End Sub

Public Function BorderoOutros_Inserir(ByVal objBorderoOutros As ClassBorderoOutros) As Long
'função que simplesmente faz um insert de um borderooutros na tabela de borderooutros
'deve ser chamada dentro de transação

Dim lErro As Long
Dim lComando As Long

On Error GoTo Erro_BorderoOutros_Inserir

    'abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 108133
    
    'insere o bordero
    lErro = Comando_Executar(lComando, "INSERT INTO BorderoOutros " & _
                                       "(FilialEmpresa,NumBordero,AdmMeioPagto,Parcelamento,DataEnvio,DataImpressao,DataBackoffice,Valor,NumIntDocCPR, NumMovtoCx, ExibeTela, ValorN) " & _
                                       "VALUES (?,?,?,?,?,?,?,?,?,?,?,?)", _
                                       objBorderoOutros.iFilialEmpresa, objBorderoOutros.lNumBordero, objBorderoOutros.iAdmMeioPagto, objBorderoOutros.iParcelamento, objBorderoOutros.dtDataEnvio, objBorderoOutros.dtDataImpressao, objBorderoOutros.dtDataBackoffice, objBorderoOutros.dValor + objBorderoOutros.dValorN, objBorderoOutros.lNumIntDocCPR, objBorderoOutros.lNumMovtoCx, objBorderoOutros.iExibeTela, objBorderoOutros.dValorN)
    If lErro <> AD_SQL_SUCESSO Then gError 108134

    'fecha o comando
    Call Comando_Fechar(lComando)
    
    BorderoOutros_Inserir = SUCESSO
    
    Exit Function

Erro_BorderoOutros_Inserir:

    BorderoOutros_Inserir = gErr
    
    Select Case gErr
    
        Case 108133
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 108134
            Call Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_BORDEROOUTROS", gErr, objBorderoOutros.iFilialEmpresa, objBorderoOutros.lNumBordero)
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150946)

    End Select

    'fecha o comando
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Public Function BorderoOutros_Exclui(ByVal objBorderoOutros As ClassBorderoOutros) As Long
'Função que recebe um objBorderooutros com filialempresa e numbordero preenchidos e o exclui do bd

Dim lTransacao As Long
Dim alComando(0 To 4) As Long
Dim iIndice As Integer
Dim lErro As Long
Dim dSaldo As Double
Dim dValor As Double
Dim iStatus As Integer
Dim lNumMovto As Long
Dim tBorderoOutros As typeBorderoOutros
Dim objCCMovDia As New ClassCCMovDia
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim objLog As New ClassLog
Dim objTituloReceber As New ClassTituloReceber
Dim objContabil As New ClassContabil
Dim tMovCx As typeMovimentoCaixa
Dim objMovimentoCaixa As New ClassMovimentoCaixa

On Error GoTo Erro_BorderoOutros_Exclui
    
    'abre a transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 108136
    
    'exclui o Titulo a receber associado
    lErro = CF("BorderoOutros_Exclui_EmTrans", objBorderoOutros)
    If lErro <> SUCESSO Then gError 214764
    
    'confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 108156
    
    BorderoOutros_Exclui = SUCESSO

    Exit Function

Erro_BorderoOutros_Exclui:

    BorderoOutros_Exclui = gErr
    
    Select Case gErr
    
        Case 108136
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 108156
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case 214764
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 214765)

    End Select
    
    'cancela a transaçao
    Call Transacao_Rollback

    Exit Function

End Function

Private Function BorderoOutros_Altera(ByVal objBorderoOutros As ClassBorderoOutros, lComando As Long, tBorderoOutros As typeBorderoOutros) As Long
'Função que recebe um objborderooutros novo, um tborderooutros velho e efetua as alterações pertinentes no BD. Deve ser chamada dentro de transação
'é private pq recebe um type como parâmetro.

Dim lErro As Long
Dim tTituloReceber As typeTituloReceber
Dim objTituloReceber As New ClassTituloReceber
Dim objContabil As New ClassContabil
Dim alComando(0 To 3) As Long
Dim lNumMovto As Long
Dim objCCMovDia As New ClassCCMovDia
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim iIndice As Integer
Dim objLog As New ClassLog
Dim tMovimentoCaixa As typeMovimentoCaixa
Dim objMovimentoCaixa As New ClassMovimentoCaixa

On Error GoTo Erro_BorderoOutros_Altera

    'abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 108158
    Next
    
    'locka o borderooutros
    lErro = Comando_LockExclusive(lComando)
    If lErro <> SUCESSO Then gError 108159
    
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL_BACKOFFICE Then
    
        'seleciona o titulo receber associado
        lErro = Comando_Executar(alComando(0), "SELECT Status, Saldo, Valor " & _
                                               "FROM TitulosRecTodos " & _
                                               "WHERE NumIntDoc=? " & _
                                               "AND FilialEmpresa=? ", _
                                               tTituloReceber.iStatus, tTituloReceber.dSaldo, tTituloReceber.dValor, _
                                               tBorderoOutros.lNumIntDocCPR, _
                                               objBorderoOutros.iFilialEmpresa)
        If lErro <> AD_SQL_SUCESSO Then gError 108160
        
        'busca o primeiro
        lErro = Comando_BuscarPrimeiro(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 108161
        
        'se não encontrar-> erro
        If lErro = AD_SQL_SEM_DADOS Then gError 108162
        
        'se o título já estiver baixado-> erro
        If tTituloReceber.iStatus = STATUS_BAIXADO Then gError 108163
        
        'se o título estiver parcialmente pago-> erro
        If Abs(tTituloReceber.dSaldo - tTituloReceber.dValor) > 0.0001 Then gError 108164
                
        'preenche os dados para exclusão de um titulo a receber
        objTituloReceber.lNumIntDoc = tBorderoOutros.lNumIntDocCPR
        objTituloReceber.sSiglaDocumento = TIPODOC_LOJA
        objTituloReceber.iExclusao = 1
        
        lErro = CF("TituloReceber_Exclui_EmTransacao", objTituloReceber, objContabil)
        If lErro <> SUCESSO Then gError 108165
                
        'gera um título a receber através do borderô
        lErro = CF("TituloReceber_Gera_BorderoOutros", objBorderoOutros)
        If lErro <> SUCESSO Then gError 108166
        
    End If
    
    'seleciona o movimento de caixa relacionado ao borderooutros
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Tipo, Sequencial, Caixa, NumIntDocLog, QuantLog " & _
                                              "FROM MovimentosCaixa " & _
                                              "WHERE FilialEmpresa=? " & _
                                              "AND NumMovto=?", 0, _
                                              tMovimentoCaixa.iTipo, tMovimentoCaixa.lSequencial, tMovimentoCaixa.iCaixa, tMovimentoCaixa.lNumIntDocLog, tMovimentoCaixa.iQuantLog, _
                                              objBorderoOutros.iFilialEmpresa, tBorderoOutros.lNumMovtoCx)
    If lErro <> AD_SQL_SUCESSO Then gError 108167
    
    'busca o primeiro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 108168
    
    'se não encontrar-> erro
    If lErro = AD_SQL_SEM_DADOS Then gError 108169
    
    'locka o movimento de caixa
    lErro = Comando_LockExclusive(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 108170
        
    'se estiver operando no caixa central, a alteracao vai excluir os dados do log e será uma inclusao no backoffice.
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
    
        objLog.lNumIntDoc = tMovimentoCaixa.lNumIntDocLog
        objLog.iQuantLog = tMovimentoCaixa.iQuantLog
    
        'grava o log
        lErro = CF("Log_Exclui", objLog)
        If lErro <> SUCESSO Then gError 110086
    
        objLog.iOperacao = INCLUSAO_BORDEROOUTROS
        
        objMovimentoCaixa.iCaixa = tMovimentoCaixa.iCaixa
        objMovimentoCaixa.lSequencial = tMovimentoCaixa.lSequencial
        objMovimentoCaixa.iTipo = tMovimentoCaixa.iTipo
        objMovimentoCaixa.dValor = objBorderoOutros.dValor + objBorderoOutros.dValorN
        objMovimentoCaixa.dHora = CDbl(Time)
        objMovimentoCaixa.dtDataMovimento = objBorderoOutros.dtDataEnvio
        objMovimentoCaixa.lNumMovto = tBorderoOutros.lNumMovtoCx
        
        'preenche um objLog com os dados da tela
        Call Mover_Dados_BorderoOutros_Log(objBorderoOutros, objMovimentoCaixa, objLog)
        
        'grava o log
        lErro = CF("Log_Grava", objLog)
        If lErro <> SUCESSO Then gError 110087
        
    End If
        
    'atualiza os dados do movimento de caixa
    lErro = Comando_ExecutarPos(alComando(2), "UPDATE MovimentosCaixa " & _
                                              "SET AdmMeioPagto=? , Parcelamento=? , Valor=? , DataMovimento=?, Hora=?,  NumIntDocLog = ?, QuantLog = ?", alComando(1), _
                                              objBorderoOutros.iAdmMeioPagto, objBorderoOutros.iParcelamento, objBorderoOutros.dValor + objBorderoOutros.dValorN, objBorderoOutros.dtDataEnvio, CDbl(Time), objLog.lNumIntDoc, objLog.iQuantLog)
    If lErro <> AD_SQL_SUCESSO Then gError 108171
    
    'preencho um ccmovdia com os dados do borderooutros
    Call Mover_Dados_BorderoOutros_CCMovDia1(tBorderoOutros, objCCMovDia)
    
    'subtrai do acumulado diário
    lErro = CF("CCMovDia_Exclui", objCCMovDia)
    If lErro <> SUCESSO Then gError 108172
    
    'subtrai do acumulado mensal
    lErro = CF("CCMov_Exclui", objCCMovDia)
    If lErro <> SUCESSO Then gError 108173
    
    'preenche um admmeiopagtocondpagto
    Call Mover_Dados_BorderoOutros_AdmMeioPagtoCondPagto(tBorderoOutros, objAdmMeioPagtoCondPagto)
    
    'adiciona ao acumulado por parcelamento
    lErro = CF("AdmMeioPagtoCondPagto_Altera_Saldo", objAdmMeioPagtoCondPagto)
    If lErro <> SUCESSO Then gError 108174
    
    'altera os campos do borderooutros
    lErro = Comando_ExecutarPos(alComando(3), "UPDATE BorderoOutros " & _
                                              "SET AdmMeioPagto=?,Parcelamento=?,DataEnvio=?,Valor=?,NumIntDocCPR=?, ValorN = ValorN + ?", lComando, _
                                              objBorderoOutros.iAdmMeioPagto, objBorderoOutros.iParcelamento, objBorderoOutros.dtDataEnvio, objBorderoOutros.dValor + objBorderoOutros.dValorN, objBorderoOutros.lNumIntDocCPR, objBorderoOutros.dValorN)
    If lErro <> AD_SQL_SUCESSO Then gError 108175
    
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
    
        Call Comando_Fechar(alComando(iIndice))
    
    Next
    
    BorderoOutros_Altera = SUCESSO
    
    Exit Function

Erro_BorderoOutros_Altera:

    BorderoOutros_Altera = gErr
    
    Select Case gErr
    
        Case 108158
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 108159
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_BORDEROOUTROS", gErr, objBorderoOutros.iFilialEmpresa, objBorderoOutros.lNumBordero)
            
        Case 108160, 108161
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TITULOSRECTODOS_BORDEROVT", gErr, tBorderoOutros.lNumIntDocCPR, objBorderoOutros.iFilialEmpresa, objBorderoOutros.lNumBordero)
        
        Case 108162
            Call Rotina_Erro(vbOKOnly, "ERRO_TITULOSRECTODOS_BORDEROVT_NAOENCONTRADO", gErr, tBorderoOutros.lNumIntDocCPR, objBorderoOutros.iFilialEmpresa, objBorderoOutros.lNumBordero)
            
        Case 108163
            Call Rotina_Erro(vbOKOnly, "ERRO_TITULOSRECTODOS_BORDEROVT_BAIXADO", gErr, tBorderoOutros.lNumIntDocCPR, objBorderoOutros.iFilialEmpresa, objBorderoOutros.lNumBordero)
            
        Case 108164
            Call Rotina_Erro(vbOKOnly, "ERRO_TITULOSRECTODOS_BORDEROVT_PARCPAGO", gErr, tBorderoOutros.lNumIntDocCPR, objBorderoOutros.iFilialEmpresa, objBorderoOutros.lNumBordero)

        Case 108165, 108166, 108172 To 108174
        
        Case 108167, 108168
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVTOCAIXA_BORDEROOUTROS", gErr, objBorderoOutros.iFilialEmpresa, objBorderoOutros.lNumBordero)
        
        Case 108169
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVTOCAIXA_BORDEROOUTROS_NAOENCONTRADO", gErr, objBorderoOutros.iFilialEmpresa, objBorderoOutros.lNumBordero)
            
        Case 108170
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_MOVTOCAIXA_BORDEROOUTROS", gErr, objBorderoOutros.iFilialEmpresa, objBorderoOutros.lNumBordero)
            
        Case 108171
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_MOVTOCAIXA_BORDEROOUTROSO", gErr, objBorderoOutros.iFilialEmpresa, objBorderoOutros.lNumBordero)
        
        Case 108175
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_BORDEROOUTROS", gErr, objBorderoOutros.iFilialEmpresa, objBorderoOutros.lNumBordero)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150948)

    End Select
    
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
    
        Call Comando_Fechar(alComando(iIndice))
    
    Next
    
    Exit Function

End Function

Public Function BorderoOutros_Grava(ByVal objBorderoOutros As ClassBorderoOutros) As Long
'função que recebe um borderooutros totalmente preenchido e o grava no BD.

Dim lErro As Long
Dim lComando As Long
Dim lTransacao As Long
Dim iIndice As Integer
Dim tBorderoOutros As typeBorderoOutros
Dim objCCMovDia As New ClassCCMovDia
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim objTMPLojaFilial As ClassTMPLojaFilial
Dim objLog As New ClassLog

On Error GoTo Erro_BorderoOutros_Grava

    'abre os comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 108108
    
    'abre a transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 108109
    
    lErro = Comando_ExecutarPos(lComando, "SELECT FilialEmpresa,NumBordero,AdmMeioPagto,Parcelamento,DataEnvio,DataImpressao,DataBackoffice,Valor,NumIntDocCPR, NumMovtoCx " & _
                                          "FROM BorderoOutros " & _
                                          "WHERE FilialEmpresa=? " & _
                                          "AND NumBordero=? ", 0, _
                                          tBorderoOutros.iFilialEmpresa, tBorderoOutros.lNumBordero, tBorderoOutros.iAdmMeioPagto, tBorderoOutros.iParcelamento, tBorderoOutros.dtDataEnvio, tBorderoOutros.dtDataImpressao, tBorderoOutros.dtDataBackoffice, tBorderoOutros.dValor, tBorderoOutros.lNumIntDocCPR, tBorderoOutros.lNumMovtoCx, _
                                          objBorderoOutros.iFilialEmpresa, objBorderoOutros.lNumBordero)
    If lErro <> AD_SQL_SUCESSO Then gError 108110
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 108111
    
    'se encontrou-> alteração
    If lErro = AD_SQL_SUCESSO Then
    
        If giLocalOperacao <> LOCALOPERACAO_CAIXA_CENTRAL And giLocalOperacao <> LOCALOPERACAO_CAIXA_CENTRAL_BACKOFFICE Then gError 110079
    
        'se estiver no caixa central
        If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
        
            'a data backoffice não pode estar preenchida
            If tBorderoOutros.dtDataBackoffice <> DATA_NULA Then gError 108112
        
        End If
        
        'chama a função de alteração
        lErro = BorderoOutros_Altera(objBorderoOutros, lComando, tBorderoOutros)
        If lErro <> SUCESSO Then gError 108113
        
    'se não encontrou-> inclusão
    Else
    
        'chama a função de inserção
        lErro = CF("BorderoOutros_Insere", objBorderoOutros)
        If lErro <> SUCESSO Then gError 108114
        
    End If
    
    'preenche um ccmovdia
    Call Mover_Dados_BorderoOutros_CCMovDia(objBorderoOutros, objCCMovDia)
    
    'adiciona no acumulado diário
    lErro = CF("CCMovDia_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 108115
    
    'adiciona no acumulado mensal
    lErro = CF("CCMov_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 108116
        
    'preenche um admmeiopagtocondpagto
    Call Mover_Dados_BorderoOutros_AdmMeioPagtoCondPagto1(objBorderoOutros, objAdmMeioPagtoCondPagto)
    
    'altera o seu saldo
    lErro = CF("AdmMeioPagtoCondPagto_Altera_Saldo", objAdmMeioPagtoCondPagto, FAZ_TESTE_SALDO)
    If lErro <> SUCESSO Then gError 108117
    
    'se o valor não especificado for diferente de 0
    If objBorderoOutros.dValorN <> 0 Then
    
        'instancia um tmplojafilial
        Set objTMPLojaFilial = New ClassTMPLojaFilial
        
        'preenche seus dados
        objTMPLojaFilial.dSaldo = -objBorderoOutros.dValorN
        objTMPLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_OUTROS
        objTMPLojaFilial.iFilialEmpresa = objBorderoOutros.iFilialEmpresa
        
        'altera seu saldo
        lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTMPLojaFilial, FAZ_TESTE_SALDO)
        If lErro <> SUCESSO Then gError 108118
    
    End If
    
    'confirma a transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 108120
    
    'fecha o comando
    Call Comando_Fechar(lComando)
    
    BorderoOutros_Grava = SUCESSO
    
    Exit Function

Erro_BorderoOutros_Grava:

    BorderoOutros_Grava = gErr
    
    Select Case gErr
    
        Case 108108
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 108109
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 108110, 108111
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BORDEROOUTROS", gErr, objBorderoOutros.iFilialEmpresa, objBorderoOutros.lNumBordero)
            
        Case 108120
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case 108112
            Call Rotina_Erro(vbOKOnly, "ERRO_BORDEROOUTROS_BACKOFFICE", gErr, objBorderoOutros.iFilialEmpresa, objBorderoOutros.lNumBordero, tBorderoOutros.dtDataBackoffice)
            
        Case 108113 To 108119
        
        Case 110079
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_BORDERO", gErr, objBorderoOutros.iFilialEmpresa, objBorderoOutros.lNumBordero)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150949)

    End Select

    'cancela a transacao
    Call Transacao_Rollback
    
    'fecha os comandos
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Private Sub Mover_Dados_BorderoValeTicket_AdmMeioPagtoCondPagto1(ByVal objBorderoValeTicket As ClassBorderoValeTicket, ByVal objAdmMeioPagtoCondPagto As ClassAdmMeioPagtoCondPagto)
'transfere os dados de um borderovaleticket para um admmeiopagtocondpagto

On Error GoTo Erro_Mover_Dados_BorderoValeTicket_AdmMeioPagtoCondPagto1

    objAdmMeioPagtoCondPagto.iAdmMeioPagto = objBorderoValeTicket.iAdmMeioPagto
    objAdmMeioPagtoCondPagto.iFilialEmpresa = objBorderoValeTicket.iFilialEmpresa
    objAdmMeioPagtoCondPagto.iParcelamento = objBorderoValeTicket.iParcelamento
    objAdmMeioPagtoCondPagto.dSaldo = -objBorderoValeTicket.dValor

    Exit Sub

Erro_Mover_Dados_BorderoValeTicket_AdmMeioPagtoCondPagto1:

    Select Case gErr
        
        Case Else

            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150950)

    End Select

    Exit Sub

End Sub

Private Sub Mover_Dados_BorderoValeTicket_CCMovDia(ByVal objBorderoValeTicket As ClassBorderoValeTicket, ByVal objCCMovDia As ClassCCMovDia)
'transfere os dados de um borderovaleticket para um ccmovdia

On Error GoTo Erro_Mover_Dados_BorderoValeTicket_CCMovDia

    objCCMovDia.dDeb = objBorderoValeTicket.dValor + objBorderoValeTicket.dValorN
    objCCMovDia.dtData = objBorderoValeTicket.dtDataEnvio
    objCCMovDia.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_VALE_TICKET
    objCCMovDia.iAdmMeioPagto = objBorderoValeTicket.iAdmMeioPagto
    objCCMovDia.iCodCaixa = CODIGO_CAIXA_CENTRAL
    objCCMovDia.iFilialEmpresa = objBorderoValeTicket.iFilialEmpresa
    objCCMovDia.iParcelamento = objBorderoValeTicket.iParcelamento

    Exit Sub

Erro_Mover_Dados_BorderoValeTicket_CCMovDia:

    Select Case gErr
        
        Case Else

            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150951)

    End Select
    
    Exit Sub

End Sub

Private Sub Mover_Dados_BorderoValeTicket_MovCaixa(ByVal objBorderoValeTicket As ClassBorderoValeTicket, ByVal objMovimentoCaixa As ClassMovimentoCaixa)
'preenche um movcaixa através de um objborderovaleticket

On Error GoTo Erro_Mover_Dados_BorderoValeTicket_MovCaixa

    objMovimentoCaixa.dtDataMovimento = objBorderoValeTicket.dtDataEnvio
    objMovimentoCaixa.dValor = objBorderoValeTicket.dValor + objBorderoValeTicket.dValorN
    objMovimentoCaixa.iAdmMeioPagto = objBorderoValeTicket.iAdmMeioPagto
    objMovimentoCaixa.iCaixa = CODIGO_CAIXA_CENTRAL
    objMovimentoCaixa.iFilialEmpresa = objBorderoValeTicket.iFilialEmpresa
    objMovimentoCaixa.iParcelamento = objBorderoValeTicket.iParcelamento
    objMovimentoCaixa.iTipo = MOVIMENTOCAIXA_BORDERO_VALETICKET
    objMovimentoCaixa.lNumRefInterna = objBorderoValeTicket.lNumBordero
    objMovimentoCaixa.dHora = CDbl(Time)

    Exit Sub

Erro_Mover_Dados_BorderoValeTicket_MovCaixa:
    
    Select Case gErr
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150952)

    End Select

    Exit Sub
    
End Sub

Public Function BorderoValeTicket_Insere(ByVal objBorderoValeTicket As ClassBorderoValeTicket) As Long
'função que insere um borderoValeticket e gera o título a receber se for o caso

Dim lErro As Long
Dim objMovimentoCaixa As New ClassMovimentoCaixa
Dim lSequencial As Long
Dim objLog As New ClassLog
Dim lNumMovto As Long
Dim lComando As Long

On Error GoTo Erro_BorderoValeTicket_Insere

    'Abre comando
    lComando = Comando_Abrir
    If lComando = 0 Then gError 113766

    'preenche o movimento de caixa
    Call Mover_Dados_BorderoValeTicket_MovCaixa(objBorderoValeTicket, objMovimentoCaixa)
    
    'pegar o proximo numero de movimento disponivel na tabela.
    lErro = CF("Config_ObterNumInt", "LojaConfig", "NUM_PROX_MOVCAIXACENTRAL", lNumMovto, 1, objBorderoValeTicket.iFilialEmpresa)
    If lErro <> SUCESSO Then gError 110088
    
    'se o sequencial ainda estiver zerado
    If objMovimentoCaixa.lSequencial = 0 Then
        
        'cria um
        lErro = CF("Caixa_Sequencial_Automatico", objMovimentoCaixa.iCaixa, objMovimentoCaixa.iFilialEmpresa, lSequencial)
        If lErro <> SUCESSO Then gError 110089
        
        objMovimentoCaixa.lSequencial = lSequencial
    
    End If
        
    'preencher o movimentocaixa com número de movimento novo gerado
    objMovimentoCaixa.lNumMovto = lNumMovto
    
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
    
        'prenche um Log
        Call Mover_Dados_BorderoValeTicket_Log(objBorderoValeTicket, objMovimentoCaixa, objLog)
        
        objLog.iOperacao = INCLUSAO_BORDEROVALETICKET
        'grava o log
        lErro = CF("Log_Grava", objLog)
        If lErro <> SUCESSO Then gError 110070
    
    End If
    
    'executa a inserção na tabela de movimentos de caixa
    lErro = Comando_Executar(lComando, "INSERT INTO MovimentosCaixa(FilialEmpresa,NumMovto,Caixa,Sequencial,Tipo,AdmMeioPagto,Parcelamento,TipoCartao,Numero,DataMovimento,Valor,Historico,Favorecido,CupomFiscal,NumRefInterna,MovtoTransf,MovtoEstorno,Gerente,CodConta,Hora, NumIntDocLog, QuantLog) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
    objMovimentoCaixa.iFilialEmpresa, objMovimentoCaixa.lNumMovto, objMovimentoCaixa.iCaixa, objMovimentoCaixa.lSequencial, objMovimentoCaixa.iTipo, objMovimentoCaixa.iAdmMeioPagto, objMovimentoCaixa.iParcelamento, objMovimentoCaixa.iTipoCartao, objMovimentoCaixa.lNumero, objMovimentoCaixa.dtDataMovimento, objMovimentoCaixa.dValor, objMovimentoCaixa.sHistorico, objMovimentoCaixa.sFavorecido, objMovimentoCaixa.lCupomFiscal, objMovimentoCaixa.lNumRefInterna, objMovimentoCaixa.lMovtoTransf, objMovimentoCaixa.lMovtoEstorno, objMovimentoCaixa.iGerente, objMovimentoCaixa.iCodConta, objMovimentoCaixa.dHora, objLog.lNumIntDoc, objLog.iQuantLog)
    If lErro <> SUCESSO Then gError 110069
    
    'se estiver em BO +CC
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL_BACKOFFICE Then
    
        'gera o título a receber associado ao borderô
        lErro = CF("TituloReceber_Gera_BorderoValeTicket", objBorderoValeTicket)
        If lErro <> SUCESSO Then gError 107468
    
    End If
    
    objBorderoValeTicket.lNumMovtoCx = objMovimentoCaixa.lNumMovto
    
    'insere o borderô pp dito
    lErro = CF("BorderoValeTicket_Inserir", objBorderoValeTicket)
    If lErro <> SUCESSO Then gError 107469
    
    BorderoValeTicket_Insere = SUCESSO

    Call Comando_Fechar(lComando)

    Exit Function

Erro_BorderoValeTicket_Insere:

    BorderoValeTicket_Insere = gErr
    
    Select Case gErr
    
        Case 107464, 107468, 107469, 110070, 110088, 110089
    
        Case 110069
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_INSERCAO", gErr, STRING_CAIXA_CENTRAL, objMovimentoCaixa.lSequencial)
    
        Case 113766
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150953)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Public Function TituloReceber_Gera_BorderoValeTicket(ByVal objBorderoValeTicket As ClassBorderoValeTicket) As Long
'Função que gera um título a receber através de um borderovaleticket

Dim lErro As Long
Dim colComissaoFantasma As New colComissao
Dim colcolComissao As New colcolComissao
Dim objCliente As New ClassCliente
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim dtDataVencimento1 As Date
Dim dtDataVencimentoReal As Date
Dim objParcelaRec As ClassParcelaReceber
Dim objAdmMeioPagtoParcela  As ClassAdmMeioPagtoParcelas
Dim objTituloReceber As New ClassTituloReceber
Dim colParcelas As New ColParcelaReceber
Dim colComissaoEmissao As New colComissao
Dim lNumAuto As Long
Dim objAdmMeioPagto As New ClassAdmMeioPagto
Dim objRede As New ClassRede
Dim dValor As Double

On Error GoTo Erro_TituloReceber_Gera_BorderoValeTicket

    objAdmMeioPagto.iCodigo = objBorderoValeTicket.iAdmMeioPagto
    objAdmMeioPagto.iFilialEmpresa = objBorderoValeTicket.iFilialEmpresa
    
    'Lê a admmeiopagto
    lErro = CF("AdmMeioPagto_Le", objAdmMeioPagto)
    If lErro <> SUCESSO And lErro <> 104017 Then gError 110073

    If lErro = 104017 Then gError 110074

    objRede.iCodigo = objAdmMeioPagto.iRede

    'Le a rede associada ao item do bordero
    lErro = CF("Rede_Le", objRede)
    If lErro <> SUCESSO And lErro <> 104244 Then gError 110075
    
    'se a rede nao estiver cadastrada ==> erro
    If lErro <> SUCESSO Then gError 110076
    
    'preenche os atributos chave de uma admmeiopagtocondpagto
    objAdmMeioPagtoCondPagto.iFilialEmpresa = objBorderoValeTicket.iFilialEmpresa
    objAdmMeioPagtoCondPagto.iAdmMeioPagto = objBorderoValeTicket.iAdmMeioPagto
    objAdmMeioPagtoCondPagto.iParcelamento = objBorderoValeTicket.iParcelamento
    
    'lê uma determinada admmeiopagtocondpagto
    lErro = CF("AdmMeioPagtoCondPagto_Le_Parcelamento", objAdmMeioPagtoCondPagto)
    If lErro <> SUCESSO And lErro <> 107297 Then gError 107473
    
    If lErro = 107297 Then gError 107474

    'lê as parcelas de uma admmeiopagtocondpagto
    lErro = CF("AdmMeioPagtoParcelas_Le", objAdmMeioPagtoCondPagto)
    If lErro <> SUCESSO Then gError 107449

    'se a coleção retornar vazia-> erro
    If objAdmMeioPagtoCondPagto.colParcelas.Count = 0 Then gError 107450
    
    'gera um novo número de título a receber
    lErro = CF("Config_ObterNumInt", "CPRConfig", "NUM_PROX_NUMTITULOLOJA", lNumAuto, objAdmMeioPagtoCondPagto.colParcelas.Count, objBorderoValeTicket.iFilialEmpresa)
    If lErro <> SUCESSO Then gError 107472
    
    'preenche o título a receber
    objTituloReceber.lNumTitulo = lNumAuto
    objTituloReceber.sSiglaDocumento = TIPODOC_LOJA
    objTituloReceber.dtDataEmissao = objBorderoValeTicket.dtDataEnvio
    dValor = (objBorderoValeTicket.dValor + objBorderoValeTicket.dValorN) * (1 - objAdmMeioPagtoCondPagto.dTaxa - objAdmMeioPagtoCondPagto.dDesconto)
    objTituloReceber.iNumParcelas = objAdmMeioPagtoCondPagto.iParcelasRecebto
    objTituloReceber.iStatus = STATUS_LANCADO
    objTituloReceber.dtDataRegistro = Date
    objTituloReceber.lCliente = objRede.lCliente
    objTituloReceber.iFilial = objRede.iFilialCli
    objTituloReceber.iFilialEmpresa = objBorderoValeTicket.iFilialEmpresa

    dtDataVencimento1 = objBorderoValeTicket.dtDataEnvio

    'varre a coleção de parcelas "modelo do admmeiopagtocondpagto
    For Each objAdmMeioPagtoParcela In objAdmMeioPagtoCondPagto.colParcelas
        
        'cria uma coleção de comissão fantasmas para a parcela em questão
        colcolComissao.Add colComissaoFantasma

        'cria uma nova parcela a receber
        Set objParcelaRec = New ClassParcelaReceber
        
        'o valor da parcela é o valor total multiplicado pelo percentual da parcela
        objParcelaRec.dValor = dValor * objAdmMeioPagtoParcela.dPercRecebimento
        
        'se os juros forem pagos pela loja ==> desconta os juros da parcela
        If objAdmMeioPagtoCondPagto.iJurosParcelamento = JUROS_LOJA Then
            objParcelaRec.dValor = objParcelaRec.dValor * (1 - objAdmMeioPagtoCondPagto.dJuros) ^ (objParcelaRec.iNumParcela - 1)
        End If
        
        'preenche seus atributos
        objParcelaRec.iNumParcela = objAdmMeioPagtoParcela.iParcela
        dtDataVencimento1 = dtDataVencimento1 + objAdmMeioPagtoParcela.iIntervaloRecebimento
        objParcelaRec.dtDataVencimento = dtDataVencimento1

        'calcula seu vencimento real
        lErro = CF("DataVencto_Real", dtDataVencimento1, dtDataVencimentoReal)
        If lErro <> SUCESSO Then gError 107451

        objParcelaRec.dtDataVencimentoReal = dtDataVencimentoReal
        objParcelaRec.iStatus = STATUS_ABERTO
        objParcelaRec.iCobrador = COBRADOR_PROPRIA_EMPRESA
        objParcelaRec.iCarteiraCobranca = CARTEIRA_CARTEIRA
        
        'adiciona à coleção de parcelas a receber
        With objParcelaRec
        '#################################################
        'ALTERADO POR WAGNER
            colParcelas.Add .lNumIntDoc, objTituloReceber.lNumTitulo, .iNumParcela, .iStatus, .dtDataVencimento, .dtDataVencimentoReal, .dSaldo, .dValor, .iProxSeqBaixa, .iCarteiraCobranca, .iCobrador, .sNumTitCobrador, objBorderoValeTicket.lNumBordero, 0, 0, 0, 0, 0, .iDesconto1Codigo, DATA_NULA, .dDesconto1Valor, .iDesconto2Codigo, DATA_NULA, .dDesconto2Valor, .iDesconto3Codigo, DATA_NULA, .dDesconto3Valor, .lNumIntCheque, .iAceite, .iDescontada, .iProxSeqOcorr, .iPrevisao, .sObservacao, .dValor
        '#################################################
        End With

        objTituloReceber.dValor = objTituloReceber.dValor + objParcelaRec.dValor

    Next
    
    objTituloReceber.dSaldo = objTituloReceber.dValor
    
    'insere o titulo a receber
    lErro = CF("TituloReceber_Insere", objTituloReceber, colParcelas, colComissaoEmissao, colcolComissao)
    If lErro <> SUCESSO Then gError 107452
    
    'preenche o numero do CPR
    objBorderoValeTicket.lNumIntDocCPR = objTituloReceber.lNumIntDoc
    
    TituloReceber_Gera_BorderoValeTicket = SUCESSO
    
    Exit Function

Erro_TituloReceber_Gera_BorderoValeTicket:

    TituloReceber_Gera_BorderoValeTicket = gErr
    
    Select Case gErr
    
        Case 107447, 107449, 107451, 107452, 110073, 110075, 107472
        
        Case 107450
            Call Rotina_Erro(vbOKOnly, "ERRO_ADMMEIOPAGTOPARCELAS_NAOENCONTRADA", gErr, objAdmMeioPagtoCondPagto.iFilialEmpresa, objAdmMeioPagtoCondPagto.iAdmMeioPagto, objAdmMeioPagtoCondPagto.iParcelamento)
            
        Case 107474
            Call Rotina_Erro(vbOKOnly, "ERRO_ADMMEIOPAGTOCONDPAGTO_INEXISTENTE1", gErr, objAdmMeioPagtoCondPagto.iFilialEmpresa, objAdmMeioPagtoCondPagto.iAdmMeioPagto, objAdmMeioPagtoCondPagto.iParcelamento)

        Case 110074
            Call Rotina_Erro(vbOKOnly, "ERRO_ADMMEIOPAGTO_NAO_CADASTRADO", gErr, objAdmMeioPagto.iCodigo)
            
        Case 110076
            Call Rotina_Erro(vbOKOnly, "ERRO_REDE_NAO_ENCONTRADA", gErr, objRede.iCodigo)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150954)

    End Select

    Exit Function

End Function

Private Sub Mover_Dados_BorderoValeTicket_Log(ByVal objBorderoValeTicket As ClassBorderoValeTicket, ByVal objMovimentoCaixa As ClassMovimentoCaixa, ByVal objLog As ClassLog)
'preenche um log com os dados

On Error GoTo Erro_Mover_Dados_BorderoValeTicket_Log

    objLog.sLog = CStr(objBorderoValeTicket.iFilialEmpresa) & Chr(vbKeyEscape) & _
                  CStr(objBorderoValeTicket.lNumBordero) & Chr(vbKeyEscape) & _
                  CStr(objBorderoValeTicket.iAdmMeioPagto) & Chr(vbKeyEscape) & _
                  CStr(objBorderoValeTicket.iParcelamento) & Chr(vbKeyEscape) & _
                  CStr(objBorderoValeTicket.dtDataEnvio) & Chr(vbKeyEscape) & _
                  CStr(objBorderoValeTicket.dtDataImpressao) & Chr(vbKeyEscape) & _
                  CStr(objBorderoValeTicket.dtDataBackoffice) & Chr(vbKeyEscape) & _
                  CStr(objBorderoValeTicket.dValor) & Chr(vbKeyEscape) & _
                  CStr(objBorderoValeTicket.dValorN) & Chr(vbKeyEscape) & _
                  CStr(objMovimentoCaixa.lNumMovto) & Chr(vbKeyEscape) & _
                  CStr(objMovimentoCaixa.iCaixa) & Chr(vbKeyEscape) & _
                  CStr(objMovimentoCaixa.lSequencial) & Chr(vbKeyEscape) & _
                  CStr(objMovimentoCaixa.iTipo) & Chr(vbKeyEscape) & _
                  CStr(objMovimentoCaixa.dHora) & Chr(vbKeyEscape)

    objLog.sLog = objLog.sLog & Chr(vbKeyEnd)

    Exit Sub

Erro_Mover_Dados_BorderoValeTicket_Log:
    
    Select Case gErr
        
        Case Else

            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150955)

    End Select

    Exit Sub

End Sub

Private Sub Mover_Dados_BorderoValeTicket_AdmMeioPagtoCondPagto(tBorderoValeTicket As typeBorderoValeTicket, ByVal objAdmMeioPagtoCondPagto As ClassAdmMeioPagtoCondPagto)
'transfere os dados de um borderovaleticket para um admmeiopagtocondpagto

On Error GoTo Erro_Mover_Dados_BorderoValeTicket_AdmMeioPagtoCondPagto

    objAdmMeioPagtoCondPagto.iAdmMeioPagto = tBorderoValeTicket.iAdmMeioPagto
    objAdmMeioPagtoCondPagto.iFilialEmpresa = tBorderoValeTicket.iFilialEmpresa
    objAdmMeioPagtoCondPagto.iParcelamento = tBorderoValeTicket.iParcelamento
    objAdmMeioPagtoCondPagto.dSaldo = tBorderoValeTicket.dValor

    Exit Sub

Erro_Mover_Dados_BorderoValeTicket_AdmMeioPagtoCondPagto:

    Select Case gErr
        
        Case Else

            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150956)

    End Select

    Exit Sub

End Sub

Private Sub Mover_Dados_BorderoValeTicket_CCMovDia1(tBorderoValeTicket As typeBorderoValeTicket, ByVal objCCMovDia As ClassCCMovDia)
'preenche um ccmovdia com os dados de um borderovaleticket

On Error GoTo Erro_Mover_Dados_BorderoValeTicket_CCMovDia1

    objCCMovDia.dDeb = tBorderoValeTicket.dValor + tBorderoValeTicket.dValorN
    objCCMovDia.dtData = tBorderoValeTicket.dtDataEnvio
    objCCMovDia.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_VALE_TICKET
    objCCMovDia.iAdmMeioPagto = tBorderoValeTicket.iAdmMeioPagto
    objCCMovDia.iCodCaixa = CODIGO_CAIXA_CENTRAL
    objCCMovDia.iFilialEmpresa = tBorderoValeTicket.iFilialEmpresa
    objCCMovDia.iParcelamento = tBorderoValeTicket.iParcelamento
    
    Exit Sub

Erro_Mover_Dados_BorderoValeTicket_CCMovDia1:

    Select Case gErr
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150957)

    End Select

    Exit Sub

End Sub

Public Function BorderoValeTicket_Inserir(ByVal objBorderoValeTicket As ClassBorderoValeTicket) As Long
'função que simplesmente faz um insert de um borderovaleticket na tabela de borderovaleticket
'deve ser chamada dentro de transação

Dim lErro As Long
Dim lComando As Long

On Error GoTo Erro_BorderoValeTicket_Inserir

    'abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 107466
    
    'insere o bordero
    lErro = Comando_Executar(lComando, "INSERT INTO BorderoValeTicket " & _
                                       "(FilialEmpresa,NumBordero,AdmMeioPagto,Parcelamento,DataEnvio,DataImpressao,DataBackoffice,Valor,NumIntDocCPR, NumMovtoCx, ExibeTela, ValorN) " & _
                                       "VALUES (?,?,?,?,?,?,?,?,?,?,?,?)", _
                                       objBorderoValeTicket.iFilialEmpresa, objBorderoValeTicket.lNumBordero, objBorderoValeTicket.iAdmMeioPagto, objBorderoValeTicket.iParcelamento, objBorderoValeTicket.dtDataEnvio, objBorderoValeTicket.dtDataImpressao, objBorderoValeTicket.dtDataBackoffice, objBorderoValeTicket.dValor + objBorderoValeTicket.dValorN, objBorderoValeTicket.lNumIntDocCPR, objBorderoValeTicket.lNumMovtoCx, objBorderoValeTicket.iExibeTela, objBorderoValeTicket.dValorN)
    If lErro <> AD_SQL_SUCESSO Then gError 107467

    'fecha o comando
    Call Comando_Fechar(lComando)
    
    BorderoValeTicket_Inserir = SUCESSO
    
    Exit Function

Erro_BorderoValeTicket_Inserir:

    BorderoValeTicket_Inserir = gErr
    
    Select Case gErr
    
        Case 107466
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 107467
            Call Rotina_Erro(vbOKOnly, "ERRO_INLUSAO_BORDEROVALETICKET", gErr, objBorderoValeTicket.iFilialEmpresa, objBorderoValeTicket.lNumBordero)
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150958)

    End Select

    'fecha o comando
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Public Function BorderoValeTicket_Exclui(ByVal objBorderoValeTicket As ClassBorderoValeTicket) As Long
'Função que recebe um objBorderoValeticket com filialempresa e numbordero preenchidos e o exclui do bd

Dim lTransacao As Long
Dim alComando(0 To 5) As Long
Dim iIndice As Integer
Dim lErro As Long
Dim dSaldo As Long
Dim dValor As Long
Dim iStatus As Integer
Dim lNumMovto As Long
Dim tBorderoValeTicket As typeBorderoValeTicket
Dim objCCMovDia As New ClassCCMovDia
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim objLog As New ClassLog
Dim objTituloReceber As New ClassTituloReceber
Dim objContabil As New ClassContabil
Dim tMovCx As typeMovimentoCaixa
Dim objMovimentoCaixa As New ClassMovimentoCaixa
Dim lNumTitulo As Long

On Error GoTo Erro_BorderoValeTicket_Exclui
    
    'abre a transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 107484
    
    lErro = CF("BorderoValeTicket_Exclui_EmTrans", objBorderoValeTicket)
    If lErro <> SUCESSO Then gError 214744
    
    'confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 107485
    

    BorderoValeTicket_Exclui = SUCESSO

    Exit Function

Erro_BorderoValeTicket_Exclui:

    BorderoValeTicket_Exclui = gErr
    
    Select Case gErr
    
        Case 107484
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 107485
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case 214744
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 214745)

    End Select
    
    'cancela a transaçao
    Call Transacao_Rollback

    Exit Function

End Function

Private Function BorderoValeTicket_Altera(ByVal objBorderoValeTicket As ClassBorderoValeTicket, lComando As Long, tBorderoValeTicket As typeBorderoValeTicket) As Long
'Função que recebe um objborderovaleticket novo, um tborderovaleticket velho e efetua as alterações pertinentes no BD. Deve ser chamada dentro de transação
'é private pq recebe um type como parâmetro.

Dim lErro As Long
Dim tTituloReceber As typeTituloReceber
Dim objTituloReceber As New ClassTituloReceber
Dim objContabil As New ClassContabil
Dim alComando(0 To 3) As Long
Dim lNumMovto As Long
Dim objCCMovDia As New ClassCCMovDia
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim iIndice As Integer
Dim objLog As New ClassLog
Dim tMovimentoCaixa As typeMovimentoCaixa
Dim objMovimentoCaixa As New ClassMovimentoCaixa

On Error GoTo Erro_BorderoValeTicket_Altera

    'abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 107463
    Next
    
    'locka o borderovaleticket
    lErro = Comando_LockExclusive(lComando)
    If lErro <> SUCESSO Then gError 107440
    
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL_BACKOFFICE Then
    
        'seleciona o titulo receber associado
        lErro = Comando_Executar(alComando(0), "SELECT Status, Saldo, Valor " & _
                                               "FROM TitulosRecTodos " & _
                                               "WHERE NumIntDoc=? " & _
                                               "AND FilialEmpresa=? ", _
                                               tTituloReceber.iStatus, tTituloReceber.dSaldo, tTituloReceber.dValor, _
                                               tBorderoValeTicket.lNumIntDocCPR, _
                                               objBorderoValeTicket.iFilialEmpresa)
        If lErro <> AD_SQL_SUCESSO Then gError 107441
        
        'busca o primeiro
        lErro = Comando_BuscarPrimeiro(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 107442
        
        'se não encontrar-> erro
        If lErro = AD_SQL_SEM_DADOS Then gError 107443
        
        'se o título já estiver baixado-> erro
        If tTituloReceber.iStatus = STATUS_BAIXADO Then gError 107444
        
        'se o título estiver parcialmente pago-> erro
        If Abs(tTituloReceber.dSaldo - tTituloReceber.dValor) > 0.0001 Then gError 107445
                
        'preenche os dados para exclusão de um titulo a receber
        objTituloReceber.lNumIntDoc = tBorderoValeTicket.lNumIntDocCPR
        objTituloReceber.sSiglaDocumento = TIPODOC_LOJA
        objTituloReceber.iExclusao = 1
        
        lErro = CF("TituloReceber_Exclui_EmTransacao", objTituloReceber, objContabil)
        If lErro <> SUCESSO Then gError 107446
                
        'gera um título a receber através do borderô
        lErro = CF("TituloReceber_Gera_BorderoValeTicket", objBorderoValeTicket)
        If lErro <> SUCESSO Then gError 107453
        
    End If
    
    'seleciona o movimento de caixa relacionado ao borderovaleticket
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Tipo, Sequencial, Caixa, NumIntDocLog, QuantLog " & _
                                              "FROM MovimentosCaixa " & _
                                              "WHERE FilialEmpresa=? " & _
                                              "AND NumMovto=?", 0, _
                                              tMovimentoCaixa.iTipo, tMovimentoCaixa.lSequencial, tMovimentoCaixa.iCaixa, tMovimentoCaixa.lNumIntDocLog, tMovimentoCaixa.iQuantLog, _
                                              objBorderoValeTicket.iFilialEmpresa, _
                                              tBorderoValeTicket.lNumMovtoCx)
    If lErro <> AD_SQL_SUCESSO Then gError 107454
    
    'busca o primeiro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 107455
    
    'se não encontrar-> erro
    If lErro = AD_SQL_SEM_DADOS Then gError 107456
    
    'locka o movimento de caixa
    lErro = Comando_LockExclusive(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 107457
        
    'se estiver operando no caixa central, a alteracao vai excluir os dados do log e será uma inclusao no backoffice.
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
    
        objLog.lNumIntDoc = tMovimentoCaixa.lNumIntDocLog
        objLog.iQuantLog = tMovimentoCaixa.iQuantLog
    
        'grava o log
        lErro = CF("Log_Exclui", objLog)
        If lErro <> SUCESSO Then gError 110071
    
        objLog.iOperacao = INCLUSAO_BORDEROVALETICKET
        
        objMovimentoCaixa.iCaixa = tMovimentoCaixa.iCaixa
        objMovimentoCaixa.lSequencial = tMovimentoCaixa.lSequencial
        objMovimentoCaixa.iTipo = tMovimentoCaixa.iTipo
        objMovimentoCaixa.dValor = objBorderoValeTicket.dValor + objBorderoValeTicket.dValorN
        objMovimentoCaixa.dHora = CDbl(Time)
        objMovimentoCaixa.dtDataMovimento = objBorderoValeTicket.dtDataEnvio
        objMovimentoCaixa.lNumMovto = tBorderoValeTicket.lNumMovtoCx
        
        'preenche um objLog com os dados da tela
        Call Mover_Dados_BorderoValeTicket_Log(objBorderoValeTicket, objMovimentoCaixa, objLog)
        
        'grava o log
        lErro = CF("Log_Grava", objLog)
        If lErro <> SUCESSO Then gError 110072
        
    End If
        
    'atualiza os dados do movimento de caixa
    lErro = Comando_ExecutarPos(alComando(2), "UPDATE MovimentosCaixa " & _
                                              "SET AdmMeioPagto=? , Parcelamento=? , Valor=? , DataMovimento=?, Hora=?, NumIntDocLog = ?, QuantLog = ?", alComando(1), _
                                              objBorderoValeTicket.iAdmMeioPagto, objBorderoValeTicket.iParcelamento, objBorderoValeTicket.dValor + objBorderoValeTicket.dValorN, objBorderoValeTicket.dtDataEnvio, CDbl(Time), objLog.lNumIntDoc, objLog.iQuantLog)
    If lErro <> AD_SQL_SUCESSO Then gError 107458
    
    'preencho um ccmovdia com os dados do borderovaleticket
    Call Mover_Dados_BorderoValeTicket_CCMovDia1(tBorderoValeTicket, objCCMovDia)
    
    'subtrai do acumulado diário
    lErro = CF("CCMovDia_Exclui", objCCMovDia)
    If lErro <> SUCESSO Then gError 107459
    
    'subtrai do acumulado mensal
    lErro = CF("CCMov_Exclui", objCCMovDia)
    If lErro <> SUCESSO Then gError 107460
    
    'preenche um admmeiopagtocondpagto
    Call Mover_Dados_BorderoValeTicket_AdmMeioPagtoCondPagto(tBorderoValeTicket, objAdmMeioPagtoCondPagto)
    
    'adiciona ao acumulado por parcelamento
    lErro = CF("AdmMeioPagtoCondPagto_Altera_Saldo", objAdmMeioPagtoCondPagto)
    If lErro <> SUCESSO Then gError 107461
    
    'altera os campos do borderovaleticket
    lErro = Comando_ExecutarPos(alComando(3), "UPDATE BorderoValeTicket " & _
                                              "SET AdmMeioPagto=?,Parcelamento=?,DataEnvio=?,Valor=?,NumIntDocCPR=?, ValorN = ValorN + ?", lComando, _
                                              objBorderoValeTicket.iAdmMeioPagto, objBorderoValeTicket.iParcelamento, objBorderoValeTicket.dtDataEnvio, objBorderoValeTicket.dValor + objBorderoValeTicket.dValorN, objBorderoValeTicket.lNumIntDocCPR, objBorderoValeTicket.dValorN)
    If lErro <> AD_SQL_SUCESSO Then gError 107462
    
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
    
        Call Comando_Fechar(alComando(iIndice))
    
    Next
    
    BorderoValeTicket_Altera = SUCESSO
    
    Exit Function

Erro_BorderoValeTicket_Altera:

    BorderoValeTicket_Altera = gErr
    
    Select Case gErr
    
        Case 107463
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 107440
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_BORDEROVALETICKET", gErr, objBorderoValeTicket.iFilialEmpresa, objBorderoValeTicket.lNumBordero)
            
        Case 107441, 107442
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TITULOSRECTODOS_BORDEROVT", gErr, tBorderoValeTicket.lNumIntDocCPR, objBorderoValeTicket.iFilialEmpresa, objBorderoValeTicket.lNumBordero)
        
        Case 107443
            Call Rotina_Erro(vbOKOnly, "ERRO_TITULOSRECTODOS_BORDEROVT_NAOENCONTRADO", gErr, tBorderoValeTicket.lNumIntDocCPR, objBorderoValeTicket.iFilialEmpresa, objBorderoValeTicket.lNumBordero)
            
        Case 107444
            Call Rotina_Erro(vbOKOnly, "ERRO_TITULOSRECTODOS_BORDEROVT_BAIXADO", gErr, tBorderoValeTicket.lNumIntDocCPR, objBorderoValeTicket.iFilialEmpresa, objBorderoValeTicket.lNumBordero)
            
        Case 107445
            Call Rotina_Erro(vbOKOnly, "ERRO_TITULOSRECTODOS_BORDEROVT_PARCPAGO", gErr, tBorderoValeTicket.lNumIntDocCPR, objBorderoValeTicket.iFilialEmpresa, objBorderoValeTicket.lNumBordero)

        Case 107446, 107453, 107459 To 107461, 110071 To 110072
        
        Case 107454, 107455
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVTOCAIXA_BORDEROVALETICKET", gErr, objBorderoValeTicket.iFilialEmpresa, objBorderoValeTicket.lNumBordero)
        
        Case 107456
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVTOCAIXA_BORDEROVALETICKET_NAOENCONTRADO", gErr, objBorderoValeTicket.iFilialEmpresa, objBorderoValeTicket.lNumBordero)
            
        Case 107457
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_MOVTOCAIXA_BORDEROVALETICKET", gErr, objBorderoValeTicket.iFilialEmpresa, objBorderoValeTicket.lNumBordero)
            
        Case 107458
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_MOVTOCAIXA_BORDEROVALETICKET", gErr, objBorderoValeTicket.iFilialEmpresa, objBorderoValeTicket.lNumBordero)
        
        Case 107462
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_BORDEROVALETICKET", gErr, objBorderoValeTicket.iFilialEmpresa, objBorderoValeTicket.lNumBordero)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150960)

    End Select
    
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
    
        Call Comando_Fechar(alComando(iIndice))
    
    Next
    
    Exit Function

End Function

Public Function BorderoValeTicket_Grava(ByVal objBorderoValeTicket As ClassBorderoValeTicket) As Long
'função que recebe um borderovaleticket totalmente preenchido e o grava no BD.

Dim lErro As Long
Dim lComando As Long
Dim lTransacao As Long
Dim iIndice As Integer
Dim tBorderoValeTicket As typeBorderoValeTicket
Dim objCCMovDia As New ClassCCMovDia
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim objTMPLojaFilial As ClassTMPLojaFilial
Dim objAdmMeioPagto As New ClassAdmMeioPagto

On Error GoTo Erro_BorderoValeTicket_Grava

    'abre os comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 107427
    
    'abre a transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 107428
    
    objAdmMeioPagto.iCodigo = objBorderoValeTicket.iAdmMeioPagto
    objAdmMeioPagto.iFilialEmpresa = objBorderoValeTicket.iFilialEmpresa
    
    'Lê em colCodPagtoLoja as Codiçoes de Pagamento relacionados a Admnistradora
    lErro = CF("AdmMeioPagtoCondPagto_Le", objAdmMeioPagto)
    If lErro <> SUCESSO And lErro <> 104086 Then gError 110091
    
    'se nao encontrou ==> erro
    If lErro = 104086 Then gError 110092
    
    lErro = Comando_ExecutarPos(lComando, "SELECT FilialEmpresa,NumBordero,AdmMeioPagto,Parcelamento,DataEnvio,DataImpressao,DataBackoffice,Valor,NumIntDocCPR,NumMovtoCx " & _
                                          "FROM BorderoValeTicket " & _
                                          "WHERE FilialEmpresa=? " & _
                                          "AND NumBordero=? ", 0, _
                                          tBorderoValeTicket.iFilialEmpresa, tBorderoValeTicket.lNumBordero, tBorderoValeTicket.iAdmMeioPagto, tBorderoValeTicket.iParcelamento, tBorderoValeTicket.dtDataEnvio, tBorderoValeTicket.dtDataImpressao, tBorderoValeTicket.dtDataBackoffice, tBorderoValeTicket.dValor, tBorderoValeTicket.lNumIntDocCPR, tBorderoValeTicket.lNumMovtoCx, _
                                          objBorderoValeTicket.iFilialEmpresa, objBorderoValeTicket.lNumBordero)
    If lErro <> AD_SQL_SUCESSO Then gError 107429
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 107431
    
    'se encontrou-> alteração
    If lErro = AD_SQL_SUCESSO Then
    
        If giLocalOperacao <> LOCALOPERACAO_CAIXA_CENTRAL And giLocalOperacao <> LOCALOPERACAO_CAIXA_CENTRAL_BACKOFFICE Then gError 110080
    
        'se estiver no caixa central
        If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
        
            'a data backoffice não pode estar preenchida
            If tBorderoValeTicket.dtDataBackoffice <> DATA_NULA Then gError 107432
        
        End If
        
        'chama a função de alteração
        lErro = BorderoValeTicket_Altera(objBorderoValeTicket, lComando, tBorderoValeTicket)
        If lErro <> SUCESSO Then gError 107433
        
    'se não encontrou-> inclusão
    Else
    
        'chama a função de inserção
        lErro = CF("BorderoValeTicket_Insere", objBorderoValeTicket)
        If lErro <> SUCESSO Then gError 107434
        
    End If
    
    'preenche um ccmovdia
    Call Mover_Dados_BorderoValeTicket_CCMovDia(objBorderoValeTicket, objCCMovDia)
    
    'adiciona no acumulado diário
    lErro = CF("CCMovDia_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 107435
    
    'adiciona no acumulado mensal
    lErro = CF("CCMov_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 107436
        
    'preenche um admmeiopagtocondpagto
    Call Mover_Dados_BorderoValeTicket_AdmMeioPagtoCondPagto1(objBorderoValeTicket, objAdmMeioPagtoCondPagto)
    
    'altera o seu saldo
    lErro = CF("AdmMeioPagtoCondPagto_Altera_Saldo", objAdmMeioPagtoCondPagto, FAZ_TESTE_SALDO)
    If lErro <> SUCESSO Then gError 107437
    
    'se o valor não especificado for diferente de 0
    If objBorderoValeTicket.dValorN <> 0 Then
    
        'instancia um tmplojafilial
        Set objTMPLojaFilial = New ClassTMPLojaFilial
        
        'preenche seus dados
        objTMPLojaFilial.dSaldo = -objBorderoValeTicket.dValorN
        objTMPLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_VALE_TICKET
        objTMPLojaFilial.iFilialEmpresa = objBorderoValeTicket.iFilialEmpresa
        
        'altera seu saldo
        lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTMPLojaFilial, FAZ_TESTE_SALDO)
        If lErro <> SUCESSO Then gError 107438
    
    End If
    
    'confirma a transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 107430
    
    'fecha o comando
    Call Comando_Fechar(lComando)
    
    BorderoValeTicket_Grava = SUCESSO
    
    Exit Function

Erro_BorderoValeTicket_Grava:

    BorderoValeTicket_Grava = gErr
    
    Select Case gErr
    
        Case 107427
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 107428
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 107429, 107431
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BORDEROVALETICKET", gErr, objBorderoValeTicket.iFilialEmpresa, objBorderoValeTicket.lNumBordero)
            
        Case 107430
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case 107432
            Call Rotina_Erro(vbOKOnly, "ERRO_BORDEROVALETICKET_BACKOFFICE", gErr, objBorderoValeTicket.iFilialEmpresa, objBorderoValeTicket.lNumBordero, tBorderoValeTicket.dtDataBackoffice)
            
        Case 107433 To 107439, 110091
        
        Case 110080
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_BORDERO", gErr, objBorderoValeTicket.iFilialEmpresa, objBorderoValeTicket.lNumBordero)
        
        Case 110092
            Call Rotina_Erro(vbOKOnly, "ERRO_ADMMEIOPAGTOCONDPAGTO_INEXISTENTE", gErr, objBorderoValeTicket.iAdmMeioPagto)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150961)

    End Select

    'cancela a transacao
    Call Transacao_Rollback
    
    'fecha os comandos
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Private Sub Mover_Dados_BorderoBoleto_AdmMeioPagtoCondPagto(objBorderoBoleto As ClassBorderoBoleto, tBorderoBoletoItem As typeBorderoBoletoItem, objAdmMeioPagtoCondPagto As ClassAdmMeioPagtoCondPagto)

On Error GoTo Erro_Mover_Dados_BorderoBoleto_AdmMeioPagtoCondPagto

    'preenche os dados de uma admmeiopagtocondpagto com os de um item do borderoboleto
    objAdmMeioPagtoCondPagto.dSaldo = tBorderoBoletoItem.dValor
    objAdmMeioPagtoCondPagto.iAdmMeioPagto = tBorderoBoletoItem.iAdmMeioPagto
    objAdmMeioPagtoCondPagto.iFilialEmpresa = objBorderoBoleto.iFilialEmpresa
    objAdmMeioPagtoCondPagto.iParcelamento = tBorderoBoletoItem.iParcelamento

    Exit Sub

Erro_Mover_Dados_BorderoBoleto_AdmMeioPagtoCondPagto:

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150962)

    End Select

    Exit Sub

End Sub

Private Sub Mover_Dados_BorderoBoleto_CCMovDia1(objBorderoBoleto As ClassBorderoBoleto, tBorderoBoletoItem As typeBorderoBoletoItem, objCCMovDia As ClassCCMovDia)

Dim objAdmMeioPagto As New ClassAdmMeioPagto
Dim lErro As Long

On Error GoTo Erro_Mover_Dados_BorderoBoleto_CCMovDia1

    'preenche os dados de um objCCMovDia com os dados extraídos do BorderoBoleto e de um de seus items
    objCCMovDia.dDeb = tBorderoBoletoItem.dValor
    objCCMovDia.dtData = objBorderoBoleto.dtDataEnvio
    objCCMovDia.iAdmMeioPagto = tBorderoBoletoItem.iAdmMeioPagto
    objCCMovDia.iCodCaixa = CODIGO_CAIXA_CENTRAL
    objCCMovDia.iFilialEmpresa = objBorderoBoleto.iFilialEmpresa
    objCCMovDia.iParcelamento = tBorderoBoletoItem.iParcelamento
    
    objAdmMeioPagto.iCodigo = tBorderoBoletoItem.iAdmMeioPagto
    objAdmMeioPagto.iFilialEmpresa = objBorderoBoleto.iFilialEmpresa
    
    'Lê a admmeiopagto
    lErro = CF("AdmMeioPagto_Le", objAdmMeioPagto)
    If lErro <> SUCESSO And lErro <> 104017 Then gError 214766

    objCCMovDia.iTipoMeioPagto = objAdmMeioPagto.iTipoMeioPagto

    Exit Sub

Erro_Mover_Dados_BorderoBoleto_CCMovDia1:

    Select Case gErr

        Case 214766

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150963)

    End Select

    Exit Sub

End Sub

Private Sub Mover_Dados_BorderoBoleto_AdmMeioPagtoCondPagto1(objBorderoBoleto As ClassBorderoBoleto, objBorderoBoletoItem As ClassBorderoBoletoItem, objAdmMeioPagtoCondPagto As ClassAdmMeioPagtoCondPagto)

On Error GoTo Erro_Mover_Dados_BorderoBoleto_AdmMeioPagtoCondPagto1

    'preenche os dados de uma admmeiopagtocondpagto com os de um item do borderoboleto
    objAdmMeioPagtoCondPagto.dSaldo = -objBorderoBoletoItem.dValor
    objAdmMeioPagtoCondPagto.iAdmMeioPagto = objBorderoBoletoItem.iAdmMeioPagto
    objAdmMeioPagtoCondPagto.iFilialEmpresa = objBorderoBoletoItem.iFilialEmpresa
    objAdmMeioPagtoCondPagto.iParcelamento = objBorderoBoletoItem.iParcelamento

    Exit Sub

Erro_Mover_Dados_BorderoBoleto_AdmMeioPagtoCondPagto1:

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150964)

    End Select

    Exit Sub

End Sub

Private Sub Mover_Dados_BorderoBoleto_CCMovDia(objBorderoBoleto As ClassBorderoBoleto, objBorderoBoletoItem As ClassBorderoBoletoItem, objCCMovDia As ClassCCMovDia)

On Error GoTo Erro_Mover_Dados_BorderoBoleto_CCMovDia

    'preenche os dados de um objCCMovDia com os dados extraídos do BorderoBoleto e de um de seus items
    objCCMovDia.dDeb = objBorderoBoletoItem.dValor + objBorderoBoletoItem.dValorN
    objCCMovDia.dtData = objBorderoBoleto.dtDataEnvio
    objCCMovDia.iAdmMeioPagto = objBorderoBoletoItem.iAdmMeioPagto
    objCCMovDia.iCodCaixa = CODIGO_CAIXA_CENTRAL
    objCCMovDia.iFilialEmpresa = objBorderoBoletoItem.iFilialEmpresa
    objCCMovDia.iParcelamento = objBorderoBoletoItem.iParcelamento

    Exit Sub

Erro_Mover_Dados_BorderoBoleto_CCMovDia:

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150965)

    End Select

    Exit Sub

End Sub

Private Function Mover_Dados_BorderoBoleto_MovCaixa(objBorderoBoleto As ClassBorderoBoleto, objBorderoBoletoItem As ClassBorderoBoletoItem) As Long

Dim objAdmMeioPagto As New ClassAdmMeioPagto
Dim lErro As Long

On Error GoTo Erro_Mover_Dados_BorderoBoleto_MovCaixa

    'preenche os dados de um movimentocaixa com os de um borderoboleto
    objBorderoBoletoItem.objMovCx.dHora = CDbl(Time)
    objBorderoBoletoItem.objMovCx.dtDataMovimento = objBorderoBoleto.dtDataEnvio
    objBorderoBoletoItem.objMovCx.dValor = objBorderoBoletoItem.dValor + objBorderoBoletoItem.dValorN
    objBorderoBoletoItem.objMovCx.iAdmMeioPagto = objBorderoBoletoItem.iAdmMeioPagto
    objBorderoBoletoItem.objMovCx.iCaixa = CODIGO_CAIXA_CENTRAL
    objBorderoBoletoItem.objMovCx.iFilialEmpresa = objBorderoBoletoItem.iFilialEmpresa
    objBorderoBoletoItem.objMovCx.iParcelamento = objBorderoBoletoItem.iParcelamento
    
    objAdmMeioPagto.iCodigo = objBorderoBoletoItem.objMovCx.iAdmMeioPagto
    objAdmMeioPagto.iFilialEmpresa = objBorderoBoletoItem.objMovCx.iFilialEmpresa
    
    'Lê a admmeiopagto
    lErro = CF("AdmMeioPagto_Le", objAdmMeioPagto)
    If lErro <> SUCESSO And lErro <> 104017 Then gError 126077

    If objAdmMeioPagto.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_CARTAO_CREDITO Then objBorderoBoletoItem.objMovCx.iTipo = MOVIMENTOCAIXA_BORDERO_BOLETO_CC

    If objAdmMeioPagto.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_CARTAO_DEBITO Then objBorderoBoletoItem.objMovCx.iTipo = MOVIMENTOCAIXA_BORDERO_BOLETO_CD
    
    If objAdmMeioPagto.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_VALE_TICKET Or objAdmMeioPagto.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_VALE_REFEICAO Or objAdmMeioPagto.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_VALE_PRESENTE Or objAdmMeioPagto.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_VALE_COMBUSTIVEL Then objBorderoBoletoItem.objMovCx.iTipo = MOVIMENTOCAIXA_BORDERO_VALETICKET
    
    objBorderoBoletoItem.objMovCx.iTipoCartao = objBorderoBoleto.iExibeTela
    objBorderoBoletoItem.objMovCx.lNumRefInterna = objBorderoBoletoItem.lNumIntDoc
    
    Mover_Dados_BorderoBoleto_MovCaixa = SUCESSO
    
    Exit Function

Erro_Mover_Dados_BorderoBoleto_MovCaixa:

    Mover_Dados_BorderoBoleto_MovCaixa = gErr
    
    Select Case gErr

        Case 126077

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150966)

    End Select

    Exit Function

End Function

Private Sub Mover_Dados_BorderoBoleto_Log(objBorderoBoleto As ClassBorderoBoleto, objLog As ClassLog)

Dim objBorderoBoletoItem As ClassBorderoBoletoItem

On Error GoTo Erro_Mover_Dados_BorderoBoleto_Log

    'preenche o logo com os dados do borderoboleto
    objLog.sLog = CStr(objBorderoBoleto.iFilialEmpresa) & Chr(vbKeyEscape) & _
                  CStr(objBorderoBoleto.lNumBordero) & Chr(vbKeyEscape) & _
                  objBorderoBoleto.sNumero & Chr(vbKeyEscape) & _
                  CStr(objBorderoBoleto.dtDataImpressao) & Chr(vbKeyEscape) & _
                  CStr(objBorderoBoleto.dtDataEnvio) & Chr(vbKeyEscape) & _
                  CStr(objBorderoBoleto.dtDataBackoffice) & Chr(vbKeyEscape) & _
                  CStr(objBorderoBoleto.iExibeTela) & Chr(vbKeyEscape) & _
                  CStr(objBorderoBoleto.dValorEnviarNCC) & Chr(vbKeyEscape) & _
                  CStr(objBorderoBoleto.dValorEnviarNCD) & Chr(vbKeyEscape) & _
                  CStr(objBorderoBoleto.iCodigoRede) & Chr(vbKeyEscape)
                  
    'varre a coleção de itens do borderoboleto
    For Each objBorderoBoletoItem In objBorderoBoleto.colBorderoBoletoItem

        'adiciona ao log
        objLog.sLog = objLog.sLog & Chr(vbKeyControl) & _
                      CStr(objBorderoBoletoItem.lNumIntDoc) & Chr(vbKeyEscape) & _
                      CStr(objBorderoBoletoItem.iAdmMeioPagto) & Chr(vbKeyEscape) & _
                      CStr(objBorderoBoletoItem.dValor + objBorderoBoletoItem.dValorN) & Chr(vbKeyEscape) & _
                      CStr(objBorderoBoletoItem.iParcelamento) & Chr(vbKeyEscape) & _
                      CStr(objBorderoBoletoItem.objMovCx.lNumMovto) & Chr(vbKeyEscape) & _
                      CStr(objBorderoBoletoItem.objMovCx.iCaixa) & Chr(vbKeyEscape) & _
                      CStr(objBorderoBoletoItem.objMovCx.lSequencial) & Chr(vbKeyEscape) & _
                      CStr(objBorderoBoletoItem.objMovCx.iTipo) & Chr(vbKeyEscape) & _
                      CStr(objBorderoBoletoItem.objMovCx.dHora) & Chr(vbKeyEscape)

    Next
    
    'finaliza o log
    objLog.sLog = objLog.sLog & Chr(vbKeyEnd)

    Exit Sub

Erro_Mover_Dados_BorderoBoleto_Log:

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150967)

    End Select

    Exit Sub

End Sub

Public Function BorderoBoleto_Inserir(ByVal objBorderoBoleto As ClassBorderoBoleto) As Long
'Função que recebe um objBorderoBoleto Preenchido e insere o mesmo no BD
'Deve ser chamada dentro de transação

Dim lComando As Long
Dim lErro As Long

On Error GoTo Erro_BorderoBoleto_Inserir

    'abre o comando
    lComando = Comando_Abrir
    If lComando = 0 Then gError 107259

    'insere na tabela
    lErro = Comando_Executar(lComando, "INSERT INTO BorderoBoleto " & _
                                       "(FilialEmpresa,NumBordero,Numero,DataImpressao,DataEnvio,DataBackoffice,ExibeTela, ValorNCC, ValorNCD) " & _
                                       "VALUES (?,?,?,?,?,?,?,?,?)", _
                                       objBorderoBoleto.iFilialEmpresa, objBorderoBoleto.lNumBordero, objBorderoBoleto.sNumero, objBorderoBoleto.dtDataImpressao, objBorderoBoleto.dtDataEnvio, objBorderoBoleto.dtDataBackoffice, objBorderoBoleto.iExibeTela, objBorderoBoleto.dValorEnviarNCC, objBorderoBoleto.dValorEnviarNCD)
    If lErro <> AD_SQL_SUCESSO Then gError 107260

    'fecha os comandos
    Call Comando_Fechar(lComando)

    BorderoBoleto_Inserir = SUCESSO

    Exit Function

Erro_BorderoBoleto_Inserir:

    BorderoBoleto_Inserir = gErr

    Select Case gErr

        Case 107259
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 107260
            Call Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_BORDEROBOLETO", gErr, objBorderoBoleto.iFilialEmpresa, objBorderoBoleto.lNumBordero)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150968)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Public Function BorderoBoleto_Exclui(ByVal objBorderoBoleto As ClassBorderoBoleto) As Long
'Função que recebe um borderoBoleto com sua filial e número preenchidos e deleta

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim lTransacao As Long
Dim dtDataBackoffice As Date
Dim objLog As New ClassLog
Dim dtDataEnvio As Date
Dim iIndice As Integer

On Error GoTo Erro_BorderoBoleto_Exclui

    'abre a transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 107377
    
    lErro = CF("BorderoBoleto_Exclui_EmTrans", objBorderoBoleto)
    If lErro <> SUCESSO Then gError 214740
    
    'confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 107378
    
    BorderoBoleto_Exclui = SUCESSO
    
    Exit Function

Erro_BorderoBoleto_Exclui:
    
    BorderoBoleto_Exclui = gErr
    
    Select Case gErr
    
        Case 107377
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 107378
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case 214740
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 214741)

    End Select
    
    'cancela a transação
    Call Transacao_Rollback
    
   
    Exit Function

End Function

Public Function BorderoBoleto_Insere(ByVal objBorderoBoleto As ClassBorderoBoleto) As Long
'função que recebe um borderoBoleto e o chama as funções de inclusão no BD

Dim lErro As Long

On Error GoTo Erro_BorderoBoleto_Insere
    
    'inserir o bordero propriamente dito
    lErro = CF("BorderoBoleto_Inserir", objBorderoBoleto)
    If lErro <> SUCESSO Then gError 107282
    
    'inserir os itens do borderoboleto
    lErro = CF("BorderoBoletoItens_Inclui", objBorderoBoleto)
    If lErro <> SUCESSO Then gError 107356

    BorderoBoleto_Insere = SUCESSO

    Exit Function

Erro_BorderoBoleto_Insere:

    BorderoBoleto_Insere = gErr

    Select Case gErr

        Case 107282, 107356

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150970)

    End Select

    Exit Function

End Function

Public Function BorderoBoletoItens_Inclui(ByVal objBorderoBoleto As ClassBorderoBoleto, Optional ByVal iCargaLog As Integer = 0) As Long
'iCargaLog se setado indica que esta funcao está sendo chamada a partir da carga do log no backoffice

Dim lErro As Long
Dim alComando(1 To 3) As Long
Dim iIndice As Integer
Dim objBorderoBoletoItem As ClassBorderoBoletoItem
Dim lNumAuto As Long
Dim objCliente As New ClassCliente
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim objAdmMeioPagtoParcela As ClassAdmMeioPagtoParcelas
Dim objMovimentoCaixa As New ClassMovimentoCaixa
Dim objCCMovDia As New ClassCCMovDia
Dim lSequencial As Long
Dim objRede As New ClassRede
Dim lNumMovto As Long
Dim objLog As New ClassLog
Dim iTipoMeioPagto As Integer

On Error GoTo Erro_BorderoBoletoItens_Inclui

    'abre o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 107339
    Next

    If iCargaLog <> CARGA_LOG_BACKOFFICE Then

        'pegar o proximo numero de movimento disponivel na tabela.
        lErro = CF("Config_ObterNumInt", "LojaConfig", "NUM_PROX_MOVCAIXACENTRAL", lNumMovto, objBorderoBoleto.colBorderoBoletoItem.Count, objBorderoBoleto.iFilialEmpresa)
        If lErro <> SUCESSO Then gError 103839
        
        'gera um número interno para o borderoboletoitem
        lErro = CF("Config_ObterNumInt", "LojaConfig", "NUM_PROX_BORDEROBOLETOITEM", lNumAuto, objBorderoBoleto.colBorderoBoletoItem.Count, objBorderoBoleto.iFilialEmpresa)
        If lErro <> SUCESSO Then gError 107341
    
        'varre a coleção de itens de boorderô de Boleto
        For Each objBorderoBoletoItem In objBorderoBoleto.colBorderoBoletoItem
    
            'preenche o número interno do obj
            objBorderoBoletoItem.lNumIntDoc = lNumAuto
            objBorderoBoletoItem.objMovCx.lNumMovto = lNumMovto
            
            lErro = Mover_Dados_BorderoBoleto_MovCaixa(objBorderoBoleto, objBorderoBoletoItem)
            If lErro <> SUCESSO Then gError 126078
        
            lErro = CF("Caixa_Sequencial_Automatico", objBorderoBoletoItem.objMovCx.iCaixa, objBorderoBoletoItem.objMovCx.iFilialEmpresa, lSequencial)
            If lErro <> SUCESSO Then gError 107465
            
            objBorderoBoletoItem.objMovCx.lSequencial = lSequencial
    
            lNumAuto = lNumAuto + 1
            lNumMovto = lNumMovto + 1
    
        Next

        If giLocalOperacao <> LOCALOPERACAO_CAIXA_CENTRAL_BACKOFFICE Then

            objLog.iOperacao = INCLUSAO_BORDEROBOLETO
        
            'preenche o log
            Call Mover_Dados_BorderoBoleto_Log(objBorderoBoleto, objLog)
            
            lErro = CF("Log_Grava", objLog)
            If lErro <> SUCESSO Then gError 107355

        End If

    End If

    'se estiver em backoffice+caixacentral
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL_BACKOFFICE Or iCargaLog = CARGA_LOG_BACKOFFICE Then
    
        objRede.iCodigo = objBorderoBoleto.iCodigoRede

        'Le a rede associada ao item do bordero
        lErro = CF("Rede_Le", objRede)
        If lErro <> SUCESSO And lErro <> 104244 Then gError 110049
        
        'se a rede nao estiver cadastrada ==> erro
        If lErro <> SUCESSO Then gError 110050
    
    End If

    'varre a coleção de itens de boorderô de Boleto
    For Each objBorderoBoletoItem In objBorderoBoleto.colBorderoBoletoItem

        'executa a inserção na tabela de movimentos de caixa
        lErro = Comando_Executar(alComando(1), "INSERT INTO MovimentosCaixa(FilialEmpresa,NumMovto,Caixa,Sequencial,Tipo,AdmMeioPagto,Parcelamento,TipoCartao,Numero,DataMovimento,Valor,Historico,Favorecido,CupomFiscal,NumRefInterna,MovtoTransf,MovtoEstorno,Gerente,CodConta,Hora, NumIntDocLog, QuantLog) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
        objBorderoBoletoItem.objMovCx.iFilialEmpresa, objBorderoBoletoItem.objMovCx.lNumMovto, objBorderoBoletoItem.objMovCx.iCaixa, objBorderoBoletoItem.objMovCx.lSequencial, objBorderoBoletoItem.objMovCx.iTipo, objBorderoBoletoItem.objMovCx.iAdmMeioPagto, objBorderoBoletoItem.objMovCx.iParcelamento, objBorderoBoletoItem.objMovCx.iTipoCartao, objBorderoBoletoItem.objMovCx.lNumero, objBorderoBoletoItem.objMovCx.dtDataMovimento, objBorderoBoletoItem.objMovCx.dValor, objBorderoBoletoItem.objMovCx.sHistorico, objBorderoBoletoItem.objMovCx.sFavorecido, objBorderoBoletoItem.objMovCx.lCupomFiscal, objBorderoBoletoItem.objMovCx.lNumRefInterna, objBorderoBoletoItem.objMovCx.lMovtoTransf, objBorderoBoletoItem.objMovCx.lMovtoEstorno, objBorderoBoletoItem.objMovCx.iGerente, objBorderoBoletoItem.objMovCx.iCodConta, objBorderoBoletoItem.objMovCx.dHora, objLog.lNumIntDoc, objLog.iQuantLog)
        If lErro <> SUCESSO Then gError 110052
        
        'preenche um ccmovdia
        Call Mover_Dados_BorderoBoleto_CCMovDia(objBorderoBoleto, objBorderoBoletoItem, objCCMovDia)

        'seleciona registro na tabela de TiposMovtocaixa
        lErro = Comando_ExecutarPos(alComando(2), "SELECT TipoMeioPagto FROM TiposMovtoCaixa WHERE Codigo=?", 0, iTipoMeioPagto, objBorderoBoletoItem.objMovCx.iTipo)
        If lErro <> AD_SQL_SUCESSO Then gError 105228
    
        lErro = Comando_BuscarPrimeiro(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 105229
        
        objCCMovDia.iTipoMeioPagto = iTipoMeioPagto

        'altera o acumulado diário
        lErro = CF("CCMovDia_Grava", objCCMovDia)
        If lErro <> SUCESSO Then gError 107350

        'altera o acumulado mensal
        lErro = CF("CCMov_Grava", objCCMovDia)
        If lErro <> SUCESSO Then gError 107351

        'preenche uma admmeiopagtocondpagto
        Call Mover_Dados_BorderoBoleto_AdmMeioPagtoCondPagto1(objBorderoBoleto, objBorderoBoletoItem, objAdmMeioPagtoCondPagto)

        'altera o seu saldo
        lErro = CF("AdmMeioPagtoCondPagto_Altera_Saldo", objAdmMeioPagtoCondPagto)
        If lErro <> SUCESSO Then gError 107352

        'se estiver em backoffice+caixacentral
        If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL_BACKOFFICE Or iCargaLog = CARGA_LOG_BACKOFFICE Then

            'gera o titulo a receber associado ao bordero de boleto
            lErro = BorderoBoleto_TituloRec_Gera(objBorderoBoleto, objBorderoBoletoItem, objRede)
            If lErro <> SUCESSO Then gError 105783

        End If
        
        'insere o borderoboletoitem na tabela de borderoboletoitem
        lErro = Comando_Executar(alComando(3), "INSERT INTO BorderoBoletoItem " & _
                                           "(FilialEmpresa,NumIntDoc,AdmMeioPagto,Valor,Parcelamento,NumBordero,NumIntDocCPR, NumMovtoCx) " & _
                                           "VALUES (?,?,?,?,?,?,?,?) ", _
                                           objBorderoBoletoItem.iFilialEmpresa, objBorderoBoletoItem.lNumIntDoc, objBorderoBoletoItem.iAdmMeioPagto, objBorderoBoletoItem.dValor + objBorderoBoletoItem.dValorN, objBorderoBoletoItem.iParcelamento, objBorderoBoletoItem.lNumBordero, objBorderoBoletoItem.lNumIntDocCPR, objBorderoBoletoItem.objMovCx.lNumMovto)
        If lErro <> AD_SQL_SUCESSO Then gError 107342

    Next

    'fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    BorderoBoletoItens_Inclui = SUCESSO

    Exit Function

Erro_BorderoBoletoItens_Inclui:

    BorderoBoletoItens_Inclui = gErr

    Select Case gErr

        Case 105228, 105229
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOSMOVTOCAIXA1", gErr, objBorderoBoletoItem.objMovCx.iTipo)

        Case 105783, 107341, 107349 To 107352, 107355, 107357, 110049, 126078

        Case 107339
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 107342
            Call Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_BORDEROBOLETOITEM_BORDEROBOLETO", gErr, objBorderoBoletoItem.lNumIntDoc, objBorderoBoleto.iFilialEmpresa, objBorderoBoleto.lNumBordero)

        Case 110050
            Call Rotina_Erro(vbOKOnly, "ERRO_REDE_NAO_ENCONTRADA", gErr, objRede.iCodigo)

        Case 110051, 110052
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_INSERCAO", gErr, STRING_CAIXA_CENTRAL, objMovimentoCaixa.lSequencial)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150971)

    End Select

    'fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function BorderoBoleto_TituloRec_Gera(objBorderoBoleto As ClassBorderoBoleto, objBorderoBoletoItem As ClassBorderoBoletoItem, objRede As ClassRede) As Long
'gera o titulo a receber associado ao bordero de boleto

Dim lErro As Long
Dim colComissaoEmissao As New colComissao
Dim colcolComissao As New colcolComissao
Dim colComissaoFantasma As colComissao
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim objTituloReceber As New ClassTituloReceber
Dim colParcelas As New ColParcelaReceber
Dim objParcelaRec As ClassParcelaReceber
Dim lNumAuto As Long
Dim dtDataVencimento1 As Date
Dim dtDataVencimentoReal As Date
Dim dValor As Double
Dim iIndice As Integer
Dim objAdmMeioPagtoParcela As ClassAdmMeioPagtoParcelas

On Error GoTo Erro_BorderoBoleto_TituloRec_Gera

    Set colComissaoFantasma = New colComissao
    Set colcolComissao = New colcolComissao

    'preenche os atributos chave de uma admmeiopagtocondpagto
    objAdmMeioPagtoCondPagto.iFilialEmpresa = objBorderoBoletoItem.iFilialEmpresa
    objAdmMeioPagtoCondPagto.iAdmMeioPagto = objBorderoBoletoItem.iAdmMeioPagto
    objAdmMeioPagtoCondPagto.iParcelamento = objBorderoBoletoItem.iParcelamento

    'lê uma determinada admmeiopagtocondpagto
    lErro = CF("AdmMeioPagtoCondPagto_Le_Parcelamento", objAdmMeioPagtoCondPagto)
    If lErro <> SUCESSO And lErro <> 107297 Then gError 107343
    
    If lErro = 107297 Then gError 107374

    'lê as parcelas de uma admmeiopagtocondpagto
    lErro = CF("AdmMeioPagtoParcelas_Le", objAdmMeioPagtoCondPagto)
    If lErro <> SUCESSO Then gError 107344

    'se a coleção retornar vazia-> erro
    If objAdmMeioPagtoCondPagto.colParcelas.Count = 0 Then gError 107345

    'gera um número para o título a receber
    lErro = CF("Config_ObterNumInt", "CPRConfig", "NUM_PROX_NUMTITULOLOJA", lNumAuto, objAdmMeioPagtoCondPagto.colParcelas.Count, objBorderoBoleto.iFilialEmpresa)
    If lErro <> SUCESSO Then gError 107346

    objTituloReceber.lNumTitulo = lNumAuto
    objTituloReceber.sSiglaDocumento = TIPODOC_LOJA
    objTituloReceber.dtDataEmissao = objBorderoBoleto.dtDataEnvio
    dValor = (objBorderoBoletoItem.dValor + objBorderoBoletoItem.dValorN) * (1 - objAdmMeioPagtoCondPagto.dTaxa - objAdmMeioPagtoCondPagto.dDesconto)
    objTituloReceber.iNumParcelas = objAdmMeioPagtoCondPagto.iParcelasRecebto
    objTituloReceber.iStatus = STATUS_LANCADO
    objTituloReceber.dtDataRegistro = Date
    objTituloReceber.lCliente = objRede.lCliente
    objTituloReceber.iFilial = objRede.iFilialCli
    objTituloReceber.iFilialEmpresa = objBorderoBoleto.iFilialEmpresa


    'se se tratar de cartao de debito pre-datado a data pre estara preenchida, caso contrario conterá DATA_NULA e deverá ser usada a data de envio como data base
    If objBorderoBoletoItem.dtDataPreDatado = DATA_NULA Then
        dtDataVencimento1 = objBorderoBoleto.dtDataEnvio
    Else
        dtDataVencimento1 = objBorderoBoletoItem.dtDataPreDatado
    End If

    'varre a coleção de parcelas "modelo do admmeiopagtocondpagto
    For Each objAdmMeioPagtoParcela In objAdmMeioPagtoCondPagto.colParcelas
        
        'cria uma coleção de comissão fantasmas para a parcela em questão
        colcolComissao.Add colComissaoFantasma

        'cria uma nova parcela a receber
        Set objParcelaRec = New ClassParcelaReceber
        
        'o valor da parcela é o valor total multiplicado pelo percentual da parcela
        objParcelaRec.dValor = dValor * objAdmMeioPagtoParcela.dPercRecebimento
        
        'se os juros forem pagos pela loja ==> desconta os juros da parcela
        If objAdmMeioPagtoCondPagto.iJurosParcelamento = JUROS_LOJA Then
            objParcelaRec.dValor = objParcelaRec.dValor * (1 - objAdmMeioPagtoCondPagto.dJuros) ^ (objParcelaRec.iNumParcela - 1)
        End If
        
        objParcelaRec.iNumParcela = objAdmMeioPagtoParcela.iParcela
        dtDataVencimento1 = dtDataVencimento1 + objAdmMeioPagtoParcela.iIntervaloRecebimento
        objParcelaRec.dtDataVencimento = dtDataVencimento1

        'calcula seu vencimento real
        lErro = CF("DataVencto_Real", dtDataVencimento1, dtDataVencimentoReal)
        If lErro <> SUCESSO Then gError 107347

        objParcelaRec.dtDataVencimentoReal = dtDataVencimentoReal
        objParcelaRec.iStatus = STATUS_ABERTO
        objParcelaRec.iCobrador = COBRADOR_PROPRIA_EMPRESA
        objParcelaRec.iCarteiraCobranca = CARTEIRA_CARTEIRA
        
        'adiciona à coleção de parcelas a receber
        With objParcelaRec
        '#################################################
        'ALTERADO POR WAGNER
            colParcelas.Add .lNumIntDoc, objTituloReceber.lNumTitulo, .iNumParcela, .iStatus, .dtDataVencimento, .dtDataVencimentoReal, .dSaldo, .dValor, .iProxSeqBaixa, .iCarteiraCobranca, .iCobrador, .sNumTitCobrador, objBorderoBoleto.lNumBordero, 0, 0, 0, 0, 0, .iDesconto1Codigo, DATA_NULA, .dDesconto1Valor, .iDesconto2Codigo, DATA_NULA, .dDesconto2Valor, .iDesconto3Codigo, DATA_NULA, .dDesconto3Valor, .lNumIntCheque, .iAceite, .iDescontada, .iProxSeqOcorr, .iPrevisao, .sObservacao, .dValor
        '#################################################
        End With

        objTituloReceber.dValor = objTituloReceber.dValor + objParcelaRec.dValor

    Next

    objTituloReceber.dSaldo = Round(objTituloReceber.dValor, 2)

    dValor = 0

    For iIndice = 1 To colParcelas.Count
        
        Set objParcelaRec = colParcelas.Item(iIndice)
        
        If iIndice = colParcelas.Count Then
            objParcelaRec.dValor = objTituloReceber.dSaldo - dValor
        Else
        
            objParcelaRec.dValor = Round(objParcelaRec.dValor, 2)
            dValor = dValor + objParcelaRec.dValor
        End If
    
        objParcelaRec.dSaldo = objParcelaRec.dValor
    
    Next

    objTituloReceber.dSaldo = objTituloReceber.dValor

    lErro = CF("TituloReceber_Insere", objTituloReceber, colParcelas, colComissaoEmissao, colcolComissao)
    If lErro <> SUCESSO Then gError 107348
    
    objBorderoBoletoItem.lNumIntDocCPR = objTituloReceber.lNumIntDoc

    BorderoBoleto_TituloRec_Gera = SUCESSO

    Exit Function

Erro_BorderoBoleto_TituloRec_Gera:

    BorderoBoleto_TituloRec_Gera = gErr

    Select Case gErr

        Case 107343, 107344, 107346 To 107352

        Case 107345
            Call Rotina_Erro(vbOKOnly, "ERRO_ADMMEIOPAGTOPARCELAS_NAOENCONTRADA", gErr, objAdmMeioPagtoCondPagto.iFilialEmpresa, objAdmMeioPagtoCondPagto.iAdmMeioPagto, objAdmMeioPagtoCondPagto.iParcelamento)
            
        Case 107374
            Call Rotina_Erro(vbOKOnly, "ERRO_ADMMEIOPAGTOCONDPAGTO_INEXISTENTE1", gErr, objAdmMeioPagtoCondPagto.iFilialEmpresa, objAdmMeioPagtoCondPagto.iAdmMeioPagto, objAdmMeioPagtoCondPagto.iParcelamento)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150972)

    End Select

    Exit Function

End Function

Public Function BorderoBoletoItens_Exclui(ByVal objBorderoBoleto As ClassBorderoBoleto) As Long

Dim lErro As Long
Dim alComando(0 To 5) As Long
Dim tBorderoBoletoItem As typeBorderoBoletoItem
Dim objCCMovDia As New ClassCCMovDia
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim iIndice As Integer
Dim tMovimentoCaixa As typeMovimentoCaixa
Dim objLog As New ClassLog
Dim objBorderoBoletoItem As New ClassBorderoBoletoItem

On Error GoTo Erro_BorderoBoletoItens_Exclui

    'abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)

        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 107335

    Next

    lErro = Comando_ExecutarPos(alComando(0), "SELECT NumIntDoc, NumIntDocCPR, AdmMeioPagto, Parcelamento,Valor, NumMovtoCx " & _
                                              "FROM BorderoBoletoItem " & _
                                              "WHERE NumBordero=? " & _
                                              "AND FilialEmpresa=? ", 0, _
                                              tBorderoBoletoItem.lNumIntDoc, tBorderoBoletoItem.lNumIntDocCPR, tBorderoBoletoItem.iAdmMeioPagto, tBorderoBoletoItem.iParcelamento, tBorderoBoletoItem.dValor, tBorderoBoletoItem.lNumMovtoCx, _
                                              objBorderoBoleto.lNumBordero, _
                                              objBorderoBoleto.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 107318

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 107319

    If lErro = AD_SQL_SEM_DADOS Then gError 107320

    Do While lErro <> AD_SQL_SEM_DADOS

        'se estiver no Caixa Central em COnjunto com o Backoffice
        If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL_BACKOFFICE Then

            objBorderoBoletoItem.lNumIntDocCPR = tBorderoBoletoItem.lNumIntDocCPR
            objBorderoBoletoItem.iFilialEmpresa = objBorderoBoleto.iFilialEmpresa

            'Exclui o titulo associado a borderoboletoItem
            lErro = BorderoBoleto_TituloRec_Exclui(objBorderoBoletoItem)
            If lErro <> SUCESSO And lErro <> 107325 And lErro <> 107326 Then gError 105787

            If lErro = 107325 Then gError 105819

            If lErro = 107326 Then gError 105820

        End If

        'Seleciona o Movimento de Caixa Correspondente
        lErro = Comando_ExecutarPos(alComando(2), "SELECT NumIntDocLog, QuantLog FROM MovimentosCaixa " & _
                                                  "WHERE FilialEmpresa=? " & _
                                                  "AND NumMovto=?", 0, _
                                                  tMovimentoCaixa.lNumIntDocLog, tMovimentoCaixa.iQuantLog, _
                                                  objBorderoBoleto.iFilialEmpresa, _
                                                  tBorderoBoletoItem.lNumMovtoCx)
        If lErro <> AD_SQL_SUCESSO Then gError 107328

        'busca o primeiro
        lErro = Comando_BuscarPrimeiro(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 107329

        'se não encontrar-> erro
        If lErro = AD_SQL_SEM_DADOS Then gError 107330

        'deleta o movimento de caixa correspondente
        lErro = Comando_ExecutarPos(alComando(3), "DELETE FROM MovimentosCaixa", alComando(2))
        If lErro <> AD_SQL_SUCESSO Then gError 107331

        'preenche o CCMovDIa com os dados de um item de borderoboleto
        Call Mover_Dados_BorderoBoleto_CCMovDia1(objBorderoBoleto, tBorderoBoletoItem, objCCMovDia)

        'subtrai do acumulado diário
        lErro = CF("CCMovDia_Exclui", objCCMovDia)
        If lErro <> SUCESSO Then gError 107332

        'subtrai do acumulado mensal
        lErro = CF("CCMov_Exclui", objCCMovDia)
        If lErro <> SUCESSO Then gError 107333

        Call Mover_Dados_BorderoBoleto_AdmMeioPagtoCondPagto(objBorderoBoleto, tBorderoBoletoItem, objAdmMeioPagtoCondPagto)

        'acerta o saldo na tabela admmeiopagtocondpagto
        lErro = CF("AdmMeioPagtoCondPagto_Altera_Saldo", objAdmMeioPagtoCondPagto)
        If lErro <> SUCESSO Then gError 107334

        'deleta o borderoboletoitem
        lErro = Comando_ExecutarPos(alComando(4), "DELETE FROM BorderoBoletoItem", alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 214742
        
        'verifica se existe um borderoboletoitem com as caracteristicas do movimendo de caixa (mesma data, admmeiopagto, exibetela=1, parcelamento,databackoffice nula)
        lErro = Comando_Executar(alComando(5), "DELETE FROM BorderoBoletoItemMovCx  WHERE FilialEmpresa=? AND NumIntDocBordItem = ?", _
        objBorderoBoleto.iFilialEmpresa, tBorderoBoletoItem.lNumIntDoc)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 214743
        
        'busca o próximo
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SEM_DADOS And lErro <> AD_SQL_SUCESSO Then gError 107321

    Loop

    'se estiver operando no caixa central
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
    
        objLog.lNumIntDoc = tMovimentoCaixa.lNumIntDocLog
        objLog.iQuantLog = tMovimentoCaixa.iQuantLog
    
        'grava o log
        lErro = CF("Log_Exclui", objLog)
        If lErro <> SUCESSO Then gError 110066
    
    'se estiver operando no backoffice ==> transferir o log para excluir o bordero do backoffice
    ElseIf giLocalOperacao = LOCALOPERACAO_BACKOFFICE Then
    
        'preenche o log
        Call Mover_Dados_BorderoBoleto_Log(objBorderoBoleto, objLog)
    
        objLog.iOperacao = EXCLUSAO_BORDEROBOLETO
        
        'grava o log
        lErro = CF("Log_Grava", objLog)
        If lErro <> SUCESSO Then gError 110067

    End If


    BorderoBoletoItens_Exclui = SUCESSO

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)

        Call Comando_Fechar(alComando(iIndice))

    Next

    Exit Function

Erro_BorderoBoletoItens_Exclui:

    BorderoBoletoItens_Exclui = gErr

    Select Case gErr

        Case 105787, 107332 To 107334, 110066 To 110067

        Case 105819
            Call Rotina_Erro(vbOKOnly, "ERRO_TITULOSRECTODOS_BORDEROBOLETOITEM_BAIXADO", gErr, tBorderoBoletoItem.lNumIntDocCPR)

        Case 105820
            Call Rotina_Erro(vbOKOnly, "ERRO_TITULOSRECTODOS_BORDEROBOLETO_PARCPAGO", gErr, tBorderoBoletoItem.lNumIntDocCPR)

        Case 107335
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 107318, 107319, 107321
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BORDEROBOLETOITEM_BORDEROBOLETO", gErr, objBorderoBoleto.iFilialEmpresa, objBorderoBoleto.lNumBordero)

        Case 107320
            Call Rotina_Erro(vbOKOnly, "ERRO_BORDEROBOLETOITEM_BORDEROBOLETO_NAOENCONTRADO", gErr, objBorderoBoleto.iFilialEmpresa, objBorderoBoleto.lNumBordero)

        Case 107328, 107329
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCAIXA_BORDEROBOLETOITEM", gErr, tBorderoBoletoItem.lNumIntDoc, objBorderoBoleto.iFilialEmpresa, objBorderoBoleto.lNumBordero)

        Case 107330
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_BORDEROBOLETO_NAOENCONTRADO", gErr, tBorderoBoletoItem.lNumIntDoc, objBorderoBoleto.iFilialEmpresa, objBorderoBoleto.lNumBordero)

        Case 107331
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_MOVIMENTOSCAIXA_BORDEROBOLETO", gErr, tBorderoBoletoItem.lNumIntDoc, objBorderoBoleto.iFilialEmpresa, objBorderoBoleto.lNumBordero)

        Case 214742
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_BORDEROBOLETOITEM", gErr)

        Case 214743
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_BORDEROBOLETOITEMMOVCX", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150973)

    End Select

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)

        Call Comando_Fechar(alComando(iIndice))

    Next

    Exit Function

End Function

Function BorderoBoleto_TituloRec_Exclui(objBorderoBoletoItem As ClassBorderoBoletoItem) As Long
'Exclui o titulo associado a borderoboletoItem

Dim lErro As Long
Dim objContabil As New ClassContabil
Dim objTituloReceber As New ClassTituloReceber
Dim iStatus As Integer
Dim dSaldo As Double
Dim dValor As Double
Dim alComando(1 To 1) As Long
Dim iIndice As Integer

On Error GoTo Erro_BorderoBoleto_TituloRec_Exclui

    For iIndice = LBound(alComando) To UBound(alComando)

        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 107353

    Next

    'busca o Tit a Receber associado
    lErro = Comando_Executar(alComando(1), "SELECT Status, Saldo, Valor " & _
                                           "FROM TitulosRec " & _
                                           "WHERE NumIntDoc=? " & _
                                           "AND FilialEmpresa=? ", _
                                           iStatus, dSaldo, dValor, _
                                           objBorderoBoletoItem.lNumIntDocCPR, _
                                           objBorderoBoletoItem.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 107322

    'busca o primeiro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 107323

    'se não encontrar-> erro
    If lErro = AD_SQL_SEM_DADOS Then gError 107324

    'se já estiver baixado-> erro
    If iStatus = STATUS_BAIXADO Then gError 107325

    'se já estiver parcialmente pago-> erro
    If Abs(dValor - dSaldo) > 0.0001 Then gError 107326

    objTituloReceber.lNumIntDoc = objBorderoBoletoItem.lNumIntDocCPR
    objTituloReceber.sSiglaDocumento = TIPODOC_LOJA
    objTituloReceber.iExclusao = 1

    'exclui o Titulo a receber associado
    lErro = CF("TituloReceber_Exclui_EmTransacao", objTituloReceber, objContabil)
    If lErro <> SUCESSO Then gError 107327

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    BorderoBoleto_TituloRec_Exclui = SUCESSO
    
    Exit Function
    
Erro_BorderoBoleto_TituloRec_Exclui:

    BorderoBoleto_TituloRec_Exclui = gErr
    
    Select Case gErr

        Case 107322, 107323
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TITULOSRECTODOS_BORDEROBOLETOITEM", gErr, objBorderoBoletoItem.lNumIntDocCPR)

        Case 107324
            Call Rotina_Erro(vbOKOnly, "ERRO_TITULOSRECTODOS_BORDEROBOLETO_NAOENCONTRADO", gErr, objBorderoBoletoItem.lNumIntDocCPR)

        Case 107325

        Case 107326

        Case 107327

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150974)

    End Select

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)

        Call Comando_Fechar(alComando(iIndice))

    Next

    Exit Function
    

End Function

Public Function BorderoBoleto_Altera(ByVal objBorderoBoleto As ClassBorderoBoleto) As Long
'função que recebe um borderoboleto e altera seus dados no BD. deve ser chamada dentro de transação

Dim alComando(0 To 1) As Long
Dim lErro As Long
Dim iIndice As Integer
Dim lNumBordero As Long

On Error GoTo Erro_BorderoBoleto_Altera

    For iIndice = LBound(alComando) To UBound(alComando)

        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 107353

    Next

    'busca o borderoboleto na tabela
    lErro = Comando_ExecutarPos(alComando(0), "SELECT NumBordero " & _
                                              "FROM BorderoBoleto " & _
                                              "WHERE FilialEmpresa=? " & _
                                              "AND NumBordero=? ", 0, _
                                              lNumBordero, _
                                              objBorderoBoleto.iFilialEmpresa, _
                                              objBorderoBoleto.lNumBordero)
    If lErro <> AD_SQL_SUCESSO Then gError 107336

    'busca o primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 107337

    'se não encontrar-> erro
    If lErro = AD_SQL_SEM_DADOS Then gError 107338

    'atualiza
    
    lErro = Comando_ExecutarPos(alComando(1), "UPDATE BorderoBoleto " & _
                                              "SET dataEnvio=?, ValorNCD = ValorNCD + ?, ValorNCC = ValorNCC + ?", alComando(0), _
                                              objBorderoBoleto.dtDataEnvio, objBorderoBoleto.dValorEnviarNCD, objBorderoBoleto.dValorEnviarNCC)
    If lErro <> AD_SQL_SUCESSO Then gError 107315

    lErro = CF("BorderoBoletoItens_Exclui", objBorderoBoleto)
    If lErro <> SUCESSO Then gError 107316

    lErro = CF("BorderoBoletoItens_Inclui", objBorderoBoleto)
    If lErro <> SUCESSO Then gError 107317

    
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)

        Call Comando_Fechar(alComando(iIndice))

    Next

    BorderoBoleto_Altera = SUCESSO

    Exit Function

Erro_BorderoBoleto_Altera:

    BorderoBoleto_Altera = gErr

    Select Case gErr

        Case 107353
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 107336, 107337
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BORDEROBOLETO", gErr, objBorderoBoleto.iFilialEmpresa, objBorderoBoleto.lNumBordero)

        Case 107338
            Call Rotina_Erro(vbOKOnly, "ERRO_BORDEROBOLETO_NAOENCONTRADO", gErr, objBorderoBoleto.iFilialEmpresa, objBorderoBoleto.lNumBordero)

        Case 107315
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_BORDEROBOLETO", gErr, objBorderoBoleto.iFilialEmpresa, objBorderoBoleto.lNumBordero)

        Case 107316, 107317

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150975)

    End Select

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)

        Call Comando_Fechar(alComando(iIndice))

    Next

    Exit Function

End Function

Public Function BorderoBoleto_Grava(ByVal objBorderoBoleto As ClassBorderoBoleto) As Long
'Função que recebe um borderoboleto preenchido e o grava no BD

Dim lTransacao As Long
Dim lComando As Long
Dim lErro As Long
Dim dtDataBackoffice As Date
Dim objTMPLojaFilial As New ClassTMPLojaFilial
Dim objLog As New ClassLog

On Error GoTo Erro_BorderoBoleto_Grava

    'abre a transação
    lTransacao = Transacao_Abrir
    If lTransacao = 0 Then gError 107241

    lComando = Comando_Abrir
    If lComando = 0 Then gError 107240

    'verifica se existe um borderoboleto já
    lErro = Comando_ExecutarPos(lComando, "SELECT DataBackoffice " & _
                                          "FROM BorderoBoleto " & _
                                          "WHERE FilialEmpresa=? " & _
                                          "AND NumBordero=?", 0, _
                                          dtDataBackoffice, _
                                          objBorderoBoleto.iFilialEmpresa, _
                                          objBorderoBoleto.lNumBordero)
    If lErro <> AD_SQL_SUCESSO Then gError 107272

    'busca o primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 107273

    'se existir-> alteração
    If lErro = AD_SQL_SUCESSO Then

        If giLocalOperacao <> LOCALOPERACAO_CAIXA_CENTRAL And giLocalOperacao <> LOCALOPERACAO_CAIXA_CENTRAL_BACKOFFICE Then gError 110078

        'se estiver no caixa central
        If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then

            'e a data backoffice estiver preenchida-> erro
            If dtDataBackoffice <> DATA_NULA Then gError 107281

        End If

        'locka o borderoboleto
        lErro = Comando_LockExclusive(lComando)
        If lErro <> AD_SQL_SUCESSO Then gError 107274

        'altera o borderoboleto
        lErro = CF("BorderoBoleto_Altera", objBorderoBoleto)
        If lErro <> SUCESSO Then gError 107275

    'se não encontrou-> inserção
    Else

        'insere o borderoboleto
        lErro = CF("BorderoBoleto_Insere", objBorderoBoleto)
        If lErro <> SUCESSO Then gError 107276

    End If

    'se o valor não especificado for diferente de 0
    If objBorderoBoleto.dValorEnviarNCC <> 0 Then

        'preenche os dados de um objtmplojafilial
        objTMPLojaFilial.dSaldo = -(objBorderoBoleto.dValorEnviarNCC)
        objTMPLojaFilial.iFilialEmpresa = objBorderoBoleto.iFilialEmpresa
        objTMPLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_CARTAO_CREDITO

        'altera o saldo na tabela de tipomeiopagtolojafilial
        lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTMPLojaFilial)
        If lErro <> SUCESSO Then gError 107279
        
    End If
        
    'se o valor não especificado for diferente de 0
    If objBorderoBoleto.dValorEnviarNCD <> 0 Then
        
        'preenche os dados de um objtmplojafilial
        objTMPLojaFilial.dSaldo = -(objBorderoBoleto.dValorEnviarNCD)
        objTMPLojaFilial.iFilialEmpresa = objBorderoBoleto.iFilialEmpresa
        objTMPLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_CARTAO_DEBITO

        'altera o saldo na tabela de tipomeiopagtolojafilial
        lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTMPLojaFilial)
        If lErro <> SUCESSO Then gError 108229

    End If

    'confirma a operação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 107242

    'fecha os comandos
    Call Comando_Fechar(lComando)

    BorderoBoleto_Grava = SUCESSO

    Exit Function

Erro_BorderoBoleto_Grava:

    BorderoBoleto_Grava = gErr

    Select Case gErr

        Case 107240
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 107241
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 107242
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case 107272, 107273
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BORDEROBOLETO", gErr, objBorderoBoleto.iFilialEmpresa, objBorderoBoleto.lNumBordero)

        Case 107274
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_BORDEROBOLETO", gErr, objBorderoBoleto.iFilialEmpresa, objBorderoBoleto.lNumBordero)

        Case 107275, 107276, 107279, 108229

        Case 107281
            Call Rotina_Erro(vbOKOnly, "ERRO_BORDEROBOLETO_BACKOFFICE", gErr, objBorderoBoleto.iFilialEmpresa, objBorderoBoleto.lNumBordero, dtDataBackoffice)

        Case 110078
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_BORDERO", gErr, objBorderoBoleto.iFilialEmpresa, objBorderoBoleto.lNumBordero)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150976)

    End Select

    'fecha os comandos
    Call Comando_Fechar(lComando)

    Call Transacao_Rollback

    Exit Function

End Function

Private Sub Mover_Dados_BorderoCheque_MovCaixa(objBorderoCheque As ClassBorderoCheque, objMovimentoCaixa As ClassMovimentoCaixa)

On Error GoTo Erro_Mover_Dados_BorderoCheque_MovCaixa

    'preenche o movimentocaixa com os dados do borderô
    objMovimentoCaixa.dHora = CDbl(Time)
    objMovimentoCaixa.dtDataMovimento = objBorderoCheque.dtDataEnvio
    objMovimentoCaixa.dValor = objBorderoCheque.dValorEspec + objBorderoCheque.dValorNEspec
    objMovimentoCaixa.iAdmMeioPagto = MEIO_PAGAMENTO_CHEQUE
    objMovimentoCaixa.iCaixa = CODIGO_CAIXA_CENTRAL
    objMovimentoCaixa.iCodConta = objBorderoCheque.iCodNossaConta
    objMovimentoCaixa.iFilialEmpresa = objBorderoCheque.iFilialEmpresa
    objMovimentoCaixa.iParcelamento = PARCELAMENTO_AVISTA
    objMovimentoCaixa.iTipo = MOVIMENTOCAIXA_BORDERO_CHEQUE
    objMovimentoCaixa.lNumRefInterna = objBorderoCheque.lNumBordero
    
    Exit Sub

Erro_Mover_Dados_BorderoCheque_MovCaixa:

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150977)

    End Select

    Exit Sub

End Sub

Private Sub Mover_Dados_BorderoCheque_Log(objBorderoCheque As ClassBorderoCheque, objMovimentoCaixa As ClassMovimentoCaixa, objLog As ClassLog)

Dim objChequePre As ClassChequePre

On Error GoTo Erro_Mover_Dados_BorderoCheque_Log

    'preenche o objlog com os dados do bordero
    objLog.sLog = CStr(objBorderoCheque.iFilialEmpresa) & Chr(vbKeyEscape) & _
                  CStr(objBorderoCheque.lNumBordero) & Chr(vbKeyEscape) & _
                  CStr(objBorderoCheque.iCodNossaConta) & Chr(vbKeyEscape) & _
                  CStr(objBorderoCheque.dtDataImpressao) & Chr(vbKeyEscape) & _
                  CStr(objBorderoCheque.dtDataEnvio) & Chr(vbKeyEscape) & _
                  CStr(objBorderoCheque.dtDataBackoffice) & Chr(vbKeyEscape) & _
                  CStr(objMovimentoCaixa.lNumMovto) & Chr(vbKeyEscape) & _
                  CStr(objMovimentoCaixa.iCaixa) & Chr(vbKeyEscape) & _
                  CStr(objMovimentoCaixa.lSequencial) & Chr(vbKeyEscape) & _
                  CStr(objMovimentoCaixa.iTipo) & Chr(vbKeyEscape) & _
                  CStr(objMovimentoCaixa.dValor) & Chr(vbKeyEscape) & _
                  CStr(objMovimentoCaixa.dHora) & Chr(vbKeyEscape)

    'preenche o objlog com os dados de cada cheque da coleção
    For Each objChequePre In objBorderoCheque.colCheque

        If Len(objLog.sLog) + Len(CStr(objChequePre.lSequencialLoja)) + 1 > MAX_TAM_STRING Then
            
            objLog.colRegistro.Add objLog.sLog
            objLog.sLog = ""
            
        End If

        objLog.sLog = objLog.sLog & CStr(objChequePre.lSequencialLoja) & Chr(vbKeyEscape)

    Next

    'preenche o objlog com os dados de cada cheque da coleção
    For Each objChequePre In objBorderoCheque.colChequeN

        If Len(objLog.sLog) + Len(CStr(objChequePre.lSequencialLoja)) + 1 > MAX_TAM_STRING Then
            
            objLog.colRegistro.Add objLog.sLog
            objLog.sLog = ""
            
        End If

        objLog.sLog = objLog.sLog & CStr(objChequePre.lSequencialLoja) & Chr(vbKeyEscape)

    Next
    
    objLog.sLog = objLog.sLog & Chr(vbKeyEnd)

    Exit Sub

Erro_Mover_Dados_BorderoCheque_Log:

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150978)

    End Select

    Exit Sub

End Sub

Private Sub Mover_Dados_BorderoCheque_CCMovDia(objBorderoCheque As ClassBorderoCheque, objCCMovDia As ClassCCMovDia)

On Error GoTo Erro_Mover_Dados_BorderoCheque_CCMovDia

    'preenche um movdia com os dados de um borderocheque
    objCCMovDia.dDeb = objBorderoCheque.dValorEspec + objBorderoCheque.dValorNEspec
    objCCMovDia.dtData = objBorderoCheque.dtDataEnvio
    objCCMovDia.iCodCaixa = CODIGO_CAIXA_CENTRAL
    objCCMovDia.iFilialEmpresa = objBorderoCheque.iFilialEmpresa
    objCCMovDia.iParcelamento = PARCELAMENTO_AVISTA
    objCCMovDia.iAdmMeioPagto = MEIO_PAGAMENTO_CHEQUE
    objCCMovDia.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_CHEQUE

    Exit Sub

Erro_Mover_Dados_BorderoCheque_CCMovDia:

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150979)

    End Select

    Exit Sub

End Sub

Private Sub Mover_Dados_BorderoCheque_CCMovDia1(tMovimentoCaixa As typeMovimentoCaixa, objCCMovDia As ClassCCMovDia)

On Error GoTo Erro_Mover_Dados_BorderoCheque_CCMovDia1

    'preenche os dados de um ccmovdia com os dados do bordero
    objCCMovDia.dDeb = tMovimentoCaixa.dValor
    objCCMovDia.dtData = tMovimentoCaixa.dtDataMovimento
    objCCMovDia.iCodCaixa = CODIGO_CAIXA_CENTRAL
    objCCMovDia.iFilialEmpresa = tMovimentoCaixa.iFilialEmpresa
    objCCMovDia.iParcelamento = PARCELAMENTO_AVISTA
    objCCMovDia.iAdmMeioPagto = MEIO_PAGAMENTO_CHEQUE
    objCCMovDia.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_CHEQUE

    Exit Sub

Erro_Mover_Dados_BorderoCheque_CCMovDia1:

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150980)

    End Select

    Exit Sub

End Sub

Public Function BorderoCheque_Exclui(ByVal objBorderoCheque As ClassBorderoCheque) As Long
'Função que recebe um borderocheque e o exclui da tabela de borderocheque.
'desvincula os cheques do borderô excluído.
'atualiza as tabelas ccmovdia,admmeiopagtocondpagtofilial,ccmov e tipomeipagtolojafilial.

Dim lTransacao As Long
Dim alComando(0 To 3) As Long
Dim lErro As Long
Dim iIndice As Integer
Dim tBorderoCheque As typeBorderoCheque
Dim objBorderoCheque1 As New ClassBorderoCheque
Dim objMovimentoCaixa As ClassMovimentoCaixa
Dim tMovimentoCaixa As typeMovimentoCaixa
Dim objCCMovDia As New ClassCCMovDia
Dim objLog As New ClassLog
Dim objTMPLojaFilial As New ClassTMPLojaFilial
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto

On Error GoTo Erro_BorderoCheque_Exclui

    'abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)

        alComando(iIndice) = Comando_Abrir
        If alComando(iIndice) = 0 Then gError 107086

    Next

    'abre a transação
    lTransacao = Transacao_Abrir
    If lTransacao = 0 Then gError 107087

    'localiza o bordero
    lErro = Comando_ExecutarPos(alComando(0), "SELECT NumBordero,FilialEmpresa, CodNossaConta,DataImpressao,DataEnvio,DataBackoffice, NumMovtoCx FROM BorderoCheque WHERE FilialEmpresa=? AND NumBordero=?", 0, tBorderoCheque.lNumBordero, tBorderoCheque.iFilialEmpresa, tBorderoCheque.iCodNossaConta, tBorderoCheque.dtDataImpressao, tBorderoCheque.dtDataEnvio, tBorderoCheque.dtDataBackoffice, tBorderoCheque.lNumMovtoCx, objBorderoCheque.iFilialEmpresa, objBorderoCheque.lNumBordero)
    If lErro <> AD_SQL_SUCESSO Then gError 107088

    'busca o primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 107089

    'se não encontrar->erro
    If lErro = AD_SQL_SEM_DADOS Then gError 107090

    'locka o borderô
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 107091

    

    'se estiver operando no caixa central
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then

        'e a data de backoffice estiver preenchida -> erro
        If tBorderoCheque.dtDataBackoffice <> DATA_NULA Then gError 107092

    End If

    'se estiver operando no backoffice
    If giLocalOperacao = LOCALOPERACAO_BACKOFFICE Then

        'se for um bordero de cheque bancario emitido pelo caixa central ==> nao pode excluir/alterar pelo backoffice.
        If tBorderoCheque.iCodNossaConta <> 0 Then gError 110060

    End If

    'preenche um bordero cheque auxiliar com os campos chave do bordero passado como parâmetro
    objBorderoCheque1.iFilialEmpresa = objBorderoCheque.iFilialEmpresa
    objBorderoCheque1.lNumBordero = tBorderoCheque.lNumBordero

    'desmarca os cheques que pertencem akele borderô e carrega o objborderocheque com o total desmarcado
    lErro = CF("Cheque_Desmarcar_Bordero", objBorderoCheque, objBorderoCheque1)
    If lErro <> SUCESSO Then gError 107111

    'localiza o movimento caixa referente ao borderô cheque.
    lErro = Comando_ExecutarPos(alComando(1), "SELECT FilialEmpresa, NumMovto,Valor,DataMovimento, NumIntDocLog, QuantLog FROM MovimentosCaixa WHERE FilialEmpresa =? AND NumMovto=?", 0, tMovimentoCaixa.iFilialEmpresa, tMovimentoCaixa.lNumMovto, tMovimentoCaixa.dValor, tMovimentoCaixa.dtDataMovimento, tMovimentoCaixa.lNumIntDocLog, tMovimentoCaixa.iQuantLog, objBorderoCheque.iFilialEmpresa, tBorderoCheque.lNumMovtoCx)
    If lErro <> AD_SQL_SUCESSO Then gError 107093

    'busca o primeiro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 107094

    'se não encontrar->erro
    If lErro = AD_SQL_SEM_DADOS Then gError 107095

    'locka o movimento de caixa
    lErro = Comando_LockExclusive(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 107096

    'deleta o movimento de caixa
    lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM MovimentosCaixa", alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 107097

    'preenche um movdia com os dados do bordero
    Call Mover_Dados_BorderoCheque_CCMovDia1(tMovimentoCaixa, objCCMovDia)

    'atualiza a tabela que acumula diário
    lErro = CF("CCMovDia_Exclui", objCCMovDia)
    If lErro <> SUCESSO Then gError 107098

    'atualiza a tabela que acumula mensal
    lErro = CF("CCMov_Exclui", objCCMovDia)
    If lErro <> SUCESSO Then gError 107099

    objTMPLojaFilial.iFilialEmpresa = objBorderoCheque.iFilialEmpresa
    objTMPLojaFilial.dSaldo = objBorderoCheque1.dValorNEspec - objBorderoCheque.dValorNEspec
    objTMPLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_CHEQUE

    'altera o saldo na tabela tipomeiopagtolojafilial
    lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTMPLojaFilial)
    If lErro <> SUCESSO Then gError 107100

    objAdmMeioPagtoCondPagto.iFilialEmpresa = objBorderoCheque.iFilialEmpresa
    objAdmMeioPagtoCondPagto.iParcelamento = PARCELAMENTO_AVISTA
    objAdmMeioPagtoCondPagto.iAdmMeioPagto = MEIO_PAGAMENTO_CHEQUE
    objAdmMeioPagtoCondPagto.dSaldo = objBorderoCheque1.dValorEspec - objBorderoCheque.dValorEspec

    'altera o saldo na tabela admmeiopagtocondpagto
    lErro = CF("AdmMeioPagtoCondPagto_Altera_Saldo", objAdmMeioPagtoCondPagto)
    If lErro <> SUCESSO Then gError 107101

    'deleta o borderocheque da tabela de borderocheques
    lErro = Comando_ExecutarPos(alComando(3), "DELETE FROM BorderoCheque", alComando(0))
    If lErro <> SUCESSO Then gError 107132

    'se estiver operando no caixa central
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
    
        objLog.lNumIntDoc = tMovimentoCaixa.lNumIntDocLog
        objLog.iQuantLog = tMovimentoCaixa.iQuantLog
    
        'grava o log
        lErro = CF("Log_Exclui", objLog)
        If lErro <> SUCESSO Then gError 110053
    
    'se estiver operando no backoffice ==> transferir o log para excluir o bordero do backoffice
    ElseIf giLocalOperacao = LOCALOPERACAO_BACKOFFICE Then
    
        'preenche um objlog com a operação
        Call Mover_Dados_BorderoCheque_Log(objBorderoCheque, objMovimentoCaixa, objLog)
    
        objLog.iOperacao = EXCLUSAO_BORDEROCHEQUE
        
        'grava o log
        lErro = CF("Log_Grava", objLog)
        If lErro <> SUCESSO Then gError 107102

    End If

    If giLocalOperacao = LOCALOPERACAO_BACKOFFICE Or giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL_BACKOFFICE Then

        'exclui o movto de cta corrente correspondente ao deposito do bordero como um todo
        lErro = CF("BorderoCheque_MovCCI_Exclui", objBorderoCheque)
        If lErro <> SUCESSO Then gError 126027
            
    End If

    For iIndice = LBound(alComando) To UBound(alComando)

        Call Comando_Fechar(alComando(iIndice))

    Next

    lErro = Transacao_Commit
    If lErro <> AD_SQL_SUCESSO Then gError 107103

    BorderoCheque_Exclui = SUCESSO

    Exit Function

Erro_BorderoCheque_Exclui:

    BorderoCheque_Exclui = gErr

    Select Case gErr

        Case 107086
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 107087
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 107088, 107089
            Call Rotina_Erro(vbOKOnly, "ERRO_BORDEROCHEQUE_LEITURA", gErr, objBorderoCheque.iFilialEmpresa, objBorderoCheque.lNumBordero)

        Case 107090
            Call Rotina_Erro(vbOKOnly, "ERRO_BORDEROCHEQUE_NAOENCONTRADO", gErr, objBorderoCheque.iFilialEmpresa, objBorderoCheque.lNumBordero)

        Case 107091
            Call Rotina_Erro(vbOKOnly, "ERRO_BORDEROCHEQUE_LOCK", gErr, objBorderoCheque.iFilialEmpresa, objBorderoCheque.lNumBordero)

        Case 107092
            Call Rotina_Erro(vbOKOnly, "ERRO_BORDEROCHEQUE_BACKOFFICE", gErr, objBorderoCheque.iFilialEmpresa, objBorderoCheque.lNumBordero, tBorderoCheque.dtDataBackoffice)

        Case 107111, 107098 To 107102, 126027

        Case 107093, 107094
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_LEITURA1", gErr, objBorderoCheque.iFilialEmpresa, tBorderoCheque.lNumMovtoCx)

        Case 107095
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_NÃO_ENCONTRADO1", gErr, objBorderoCheque.iFilialEmpresa, tBorderoCheque.lNumMovtoCx)

        Case 107096
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_LOCK1", gErr, objBorderoCheque.iFilialEmpresa, tBorderoCheque.lNumMovtoCx)

        Case 107097
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_EXCLUSAO1", gErr, objBorderoCheque.iFilialEmpresa, tBorderoCheque.lNumMovtoCx)

        Case 107132
            Call Rotina_Erro(vbOKOnly, "ERRO_BORDEROCHEQUE_EXCLUSAO", gErr, objBorderoCheque.iFilialEmpresa, objBorderoCheque.lNumBordero)

        Case 107103
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case 110060
            Call Rotina_Erro(vbOKOnly, "ERRO_BORDEROCHEQUE_BANCARIO", gErr, objBorderoCheque.iFilialEmpresa, objBorderoCheque.lNumBordero)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150981)

    End Select

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)

        Call Comando_Fechar(alComando(iIndice))

    Next

    Call Transacao_Rollback

    Exit Function

End Function

Public Function BorderoCheque_Grava(ByVal objBorderoCheque As ClassBorderoCheque) As Long
'função que recebe um bordero cheque preenchido e o grava no banco de dados

Dim lTransacao As Long
Dim alComando(0 To 4) As Long
Dim lErro As Long
Dim iIndice As Integer
Dim tBorderoCheque As typeBorderoCheque
Dim objBorderoCheque1 As New ClassBorderoCheque
Dim objMovimentoCaixa As New ClassMovimentoCaixa
Dim tMovimentoCaixa As typeMovimentoCaixa
Dim objCCMovDia As New ClassCCMovDia
Dim objLog As New ClassLog
Dim objTMPLojaFilial As New ClassTMPLojaFilial
Dim lSequencial As Long
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim lNumMovto As Long
Dim objCCI As New ClassContasCorrentesInternas

On Error GoTo Erro_BorderoCheque_Grava

    'abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir
        If alComando(iIndice) = 0 Then gError 107031
    Next

    'abre a transação
    lTransacao = Transacao_Abrir
    If lTransacao = 0 Then gError 107032

    'tenta selecionar o bordero na tabela borderocheque
    lErro = Comando_ExecutarPos(alComando(0), "SELECT NumBordero,FilialEmpresa, CodNossaConta,DataImpressao,DataEnvio,DataBackoffice, NumMovtoCx FROM BorderoCheque WHERE FilialEmpresa=? AND NumBordero=?", 0, tBorderoCheque.lNumBordero, tBorderoCheque.iFilialEmpresa, tBorderoCheque.iCodNossaConta, tBorderoCheque.dtDataImpressao, tBorderoCheque.dtDataEnvio, tBorderoCheque.dtDataBackoffice, tBorderoCheque.lNumMovtoCx, objBorderoCheque.iFilialEmpresa, objBorderoCheque.lNumBordero)
    If lErro <> AD_SQL_SUCESSO Then gError 107060

    'busca primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 107061

    'se o encontrou -> alteração
    If lErro = AD_SQL_SUCESSO Then

        If giLocalOperacao <> LOCALOPERACAO_CAIXA_CENTRAL And giLocalOperacao <> LOCALOPERACAO_CAIXA_CENTRAL_BACKOFFICE And tBorderoCheque.iCodNossaConta <> 0 Then gError 110081

        'locka o bordero encontrado
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 107062

        'se estiver operando no caixa central
        If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then

            '...e a data de backoffice na tabela borderocheque estiver preenchida-> erro
            If tBorderoCheque.dtDataBackoffice <> DATA_NULA Then gError 107063

        End If

        'carrega um objborderocheque1 auxiliar
        objBorderoCheque1.iFilialEmpresa = objBorderoCheque.iFilialEmpresa
        objBorderoCheque1.lNumBordero = tBorderoCheque.lNumBordero

        'zera o numborderoloja de todos os cheques que estiverem nas coleções do objborderocheque
        lErro = CF("Cheque_Desmarcar_Bordero", objBorderoCheque, objBorderoCheque1)
        If lErro <> SUCESSO Then gError 107110

        objMovimentoCaixa.lNumMovto = tBorderoCheque.lNumMovtoCx

        'tenta localizar o movimento de caixa referente ao bordero cheque
        lErro = Comando_ExecutarPos(alComando(1), "SELECT FilialEmpresa, Caixa, Tipo, Sequencial, DataMovimento, Valor, Hora, NumIntDocLog, QuantLog FROM MovimentosCaixa WHERE FilialEmpresa = ? AND NumMovto = ?", 0, tMovimentoCaixa.iFilialEmpresa, tMovimentoCaixa.iCaixa, tMovimentoCaixa.iTipo, tMovimentoCaixa.lSequencial, tMovimentoCaixa.dtDataMovimento, tMovimentoCaixa.dValor, tMovimentoCaixa.dHora, tMovimentoCaixa.lNumIntDocLog, tMovimentoCaixa.iQuantLog, objBorderoCheque.iFilialEmpresa, objMovimentoCaixa.lNumMovto)
        If lErro <> AD_SQL_SUCESSO Then gError 107064

        'busca o primeiro
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 107065

        'se não encontrar->erro
        If lErro = AD_SQL_SEM_DADOS Then gError 107066

        'locka o movimento de caixa
        lErro = Comando_LockExclusive(alComando(1))
        If lErro <> AD_SQL_SUCESSO Then gError 107067

        objMovimentoCaixa.iCaixa = tMovimentoCaixa.iCaixa
        objMovimentoCaixa.lSequencial = tMovimentoCaixa.lSequencial
        objMovimentoCaixa.iTipo = tMovimentoCaixa.iTipo
        objMovimentoCaixa.dValor = objBorderoCheque.dValorEspec + objBorderoCheque.dValorNEspec
        objMovimentoCaixa.dHora = CDbl(Time)
        objMovimentoCaixa.dtDataMovimento = objBorderoCheque.dtDataEnvio
        
        'se estiver operando no backoffice, a alteracao é real pois vai alterar os dados no caixa central
        If giLocalOperacao = LOCALOPERACAO_BACKOFFICE Then
        
            If tMovimentoCaixa.lNumIntDocLog <> 0 Then
            
                objLog.lNumIntDoc = tMovimentoCaixa.lNumIntDocLog
                objLog.iQuantLog = tMovimentoCaixa.iQuantLog
            
                'grava o log
                lErro = CF("Log_Exclui", objLog)
                If lErro <> SUCESSO Then gError 110063
        
            End If
        
            objLog.iOperacao = ALTERACAO_BORDEROCHEQUE
            
        'se estiver operando no caixa central, a alteracao vai excluir os dados do log e será uma inclusao no backoffice.
        ElseIf giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
        
            objLog.lNumIntDoc = tMovimentoCaixa.lNumIntDocLog
            objLog.iQuantLog = tMovimentoCaixa.iQuantLog
        
            'grava o log
            lErro = CF("Log_Exclui", objLog)
            If lErro <> SUCESSO Then gError 110061
        
            objLog.iOperacao = INCLUSAO_BORDEROCHEQUE
            
        End If
        
        If giLocalOperacao <> LOCALOPERACAO_CAIXA_CENTRAL_BACKOFFICE Then
        
            'preenche um objLog com os dados da tela
            Call Mover_Dados_BorderoCheque_Log(objBorderoCheque, objMovimentoCaixa, objLog)
            
            'grava o log
            lErro = CF("Log_Grava", objLog)
            If lErro <> SUCESSO Then gError 107078
        
        End If
        
        If giLocalOperacao = LOCALOPERACAO_BACKOFFICE Or giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL_BACKOFFICE Then

            'exclui o movto de cta corrente correspondente ao deposito do bordero como um todo
            lErro = CF("BorderoCheque_MovCCI_Exclui", objBorderoCheque)
            If lErro <> SUCESSO Then gError 126028

            'prepara e insere o movto de cta corrente correspondente ao deposito do bordero como um todo
            lErro = CF("BorderoCheque_MovCCI_Grava", objBorderoCheque)
            If lErro <> SUCESSO Then gError 126029

        End If
        
        
        'atualiza o seu valor e data de movimento
        lErro = Comando_ExecutarPos(alComando(2), "UPDATE MovimentosCaixa set Valor=?, DataMovimento=?, Hora = ?, NumIntDocLog = ?, QuantLog = ? ", alComando(1), objMovimentoCaixa.dValor, objMovimentoCaixa.dtDataMovimento, objMovimentoCaixa.dHora, objLog.lNumIntDoc, objLog.iQuantLog)
        If lErro <> AD_SQL_SUCESSO Then gError 107068

        'atuazlia a conta e a data de envio do borderocheque
        lErro = Comando_ExecutarPos(alComando(3), "UPDATE BorderoCheque set CodNossaConta=? ,DataEnvio=?", alComando(0), objBorderoCheque.iCodNossaConta, objBorderoCheque.dtDataEnvio)
        If lErro <> AD_SQL_SUCESSO Then gError 107069
        
        'preenche o ccmovdia
        Call Mover_Dados_BorderoCheque_CCMovDia1(tMovimentoCaixa, objCCMovDia)

        'subtrai do acumulado cred/deb diário
        lErro = CF("CCMovDia_Exclui", objCCMovDia)
        If lErro <> SUCESSO Then gError 107071

        'subtrai do acumulado cred/deb mensal
        lErro = CF("CCMov_Exclui", objCCMovDia)
        If lErro <> SUCESSO Then gError 107030


    Else

        'se estiver operando no back office --> erro (back office não pode criar borderô)
        If giLocalOperacao = LOCALOPERACAO_BACKOFFICE Then gError 107072

        objLog.iOperacao = INCLUSAO_BORDEROCHEQUE

        'preenche o movimento de caixa com os dados do borderocheque
        Call Mover_Dados_BorderoCheque_MovCaixa(objBorderoCheque, objMovimentoCaixa)

        'pegar o proximo numero de movimento disponivel na tabela.
        lErro = CF("Config_ObterNumInt", "LojaConfig", "NUM_PROX_MOVCAIXACENTRAL", lNumMovto, 1, objBorderoCheque.iFilialEmpresa)
        If lErro <> SUCESSO Then gError 103839
        
        'preencher o movimentocaixa com número de movimento novo gerado
        objMovimentoCaixa.lNumMovto = lNumMovto
        objBorderoCheque.lNumMovtoCx = lNumMovto
        
        'cria um
        lErro = CF("Caixa_Sequencial_Automatico", objMovimentoCaixa.iCaixa, objMovimentoCaixa.iFilialEmpresa, lSequencial)
        If lErro <> SUCESSO Then gError 107465
        
        objMovimentoCaixa.lSequencial = lSequencial

        If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then

            'preenche um objLog com os dados da tela
            Call Mover_Dados_BorderoCheque_Log(objBorderoCheque, objMovimentoCaixa, objLog)
            
            'grava o log
            lErro = CF("Log_Grava", objLog)
            If lErro <> SUCESSO Then gError 110064

        Else
        
            'prepara e insere o movto de cta corrente correspondente ao deposito do bordero como um todo
            lErro = CF("BorderoCheque_MovCCI_Grava", objBorderoCheque)
            If lErro <> SUCESSO Then gError 126021
        
        End If
    
        'executa a inserção na tabela de movimentos de caixa
        lErro = Comando_Executar(alComando(4), "INSERT INTO MovimentosCaixa(FilialEmpresa,NumMovto,Caixa,Sequencial,Tipo,AdmMeioPagto,Parcelamento,TipoCartao,Numero,DataMovimento,Valor,Historico,Favorecido,CupomFiscal,NumRefInterna,MovtoTransf,MovtoEstorno,Gerente,CodConta,Hora, NumIntDocLog, QuantLog) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
        objMovimentoCaixa.iFilialEmpresa, objMovimentoCaixa.lNumMovto, objMovimentoCaixa.iCaixa, objMovimentoCaixa.lSequencial, objMovimentoCaixa.iTipo, objMovimentoCaixa.iAdmMeioPagto, objMovimentoCaixa.iParcelamento, objMovimentoCaixa.iTipoCartao, objMovimentoCaixa.lNumero, objMovimentoCaixa.dtDataMovimento, objMovimentoCaixa.dValor, objMovimentoCaixa.sHistorico, objMovimentoCaixa.sFavorecido, objMovimentoCaixa.lCupomFiscal, objMovimentoCaixa.lNumRefInterna, objMovimentoCaixa.lMovtoTransf, objMovimentoCaixa.lMovtoEstorno, objMovimentoCaixa.iGerente, objMovimentoCaixa.iCodConta, objMovimentoCaixa.dHora, objLog.lNumIntDoc, objLog.iQuantLog)
        If lErro <> SUCESSO Then gError 110065
    
        'insere o borderô novo na tabela de borderocheque
        lErro = CF("BorderoCheque_Inserir", objBorderoCheque)
        If lErro <> SUCESSO Then gError 107074

    End If

    'preenche o ccmovdia com os dados do borderocheque
    Call Mover_Dados_BorderoCheque_CCMovDia(objBorderoCheque, objCCMovDia)

    'adiciona ao acumulado deb/cred diário
    lErro = CF("CCMovDia_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 107075

    'adiciona ao acumulado déb/créd mensal
    lErro = CF("CCMov_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 107131

    'vincula os cheques que estão marcados no grid ao borderocheque
    lErro = CF("Cheque_Marcar_Bordero", objBorderoCheque)
    If lErro <> SUCESSO Then gError 107133

    objTMPLojaFilial.iFilialEmpresa = objBorderoCheque.iFilialEmpresa
    objTMPLojaFilial.dSaldo = objBorderoCheque1.dValorNEspec - objBorderoCheque.dValorNEspec
    objTMPLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_CHEQUE

    'altera o saldo na tabela tipomeiopagtolojafilial
    lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTMPLojaFilial)
    If lErro <> SUCESSO Then gError 107134

    objAdmMeioPagtoCondPagto.iFilialEmpresa = objBorderoCheque.iFilialEmpresa
    objAdmMeioPagtoCondPagto.iAdmMeioPagto = MEIO_PAGAMENTO_CHEQUE
    objAdmMeioPagtoCondPagto.iParcelamento = PARCELAMENTO_AVISTA
    objAdmMeioPagtoCondPagto.dSaldo = objBorderoCheque1.dValorEspec - objBorderoCheque.dValorEspec

    'altera o saldo na tabela admmeiopagtocondpagto
    lErro = CF("AdmMeioPagtoCondPagto_Altera_Saldo", objAdmMeioPagtoCondPagto)
    If lErro <> SUCESSO Then gError 107135

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 107033

    BorderoCheque_Grava = SUCESSO

    Exit Function

Erro_BorderoCheque_Grava:

    BorderoCheque_Grava = gErr

    Select Case gErr

        Case 107031
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 107032
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 107060, 107061
            Call Rotina_Erro(vbOKOnly, "ERRO_BORDEROCHEQUE_LEITURA", gErr, objBorderoCheque.iFilialEmpresa, objBorderoCheque.lNumBordero)

        Case 107062
            Call Rotina_Erro(vbOKOnly, "ERRO_BORDEROCHEQUE_LOCK", gErr, objBorderoCheque.iFilialEmpresa, objBorderoCheque.lNumBordero)

        Case 107063
            Call Rotina_Erro(vbOKOnly, "ERRO_BORDEROCHEQUE_BACKOFFICE", gErr, objBorderoCheque.iFilialEmpresa, objBorderoCheque.lNumBordero, tBorderoCheque.dtDataBackoffice)

        Case 107030, 107071, 107074 To 107075, 107110, 107129, 107131, 107078, 107134, 107135, 110061 To 110064, 126021, 126028, 126029

        Case 107033
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case 107064, 107065
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_BORDEROCHEQUE_LEITURA", gErr, objMovimentoCaixa.iFilialEmpresa, objMovimentoCaixa.lNumRefInterna)

        Case 107066
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_BORDEROCHEQUE_NAOENCONTRADO", gErr, objMovimentoCaixa.iFilialEmpresa, objMovimentoCaixa.lNumRefInterna)

        Case 107067
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_BORDEROCHEQUE_LOCK", gErr, objMovimentoCaixa.iFilialEmpresa, objMovimentoCaixa.lNumRefInterna)

        Case 107068
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_BORDEROCHEQUE_ALTERACAO", gErr, objMovimentoCaixa.iFilialEmpresa, objMovimentoCaixa.lNumRefInterna)

        Case 107069
            Call Rotina_Erro(vbOKOnly, "ERRO_BORDEROCHEQUE_ALTERACAO", gErr, objBorderoCheque.iFilialEmpresa, objBorderoCheque.lNumBordero)

        Case 107072
            Call Rotina_Erro(vbOKOnly, "ERRO_BORDEROCHEQUE_CRIACAO_BACKOFFICE", gErr)

        Case 110065
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_INSERCAO", gErr, objMovimentoCaixa.iCaixa, objMovimentoCaixa.lSequencial)

        Case 110081
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_BORDERO", gErr, objBorderoCheque.iFilialEmpresa, objBorderoCheque.lNumBordero)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150982)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Call Transacao_Rollback

    Exit Function

End Function

Public Function Cheque_Desmarcar_Bordero(ByVal objBorderoCheque As ClassBorderoCheque, ByVal objBorderoCheque1 As ClassBorderoCheque) As Long
'Função que busca todos os cheques vinculados a um borderô.
'para cada cheque da seleção na tabela, zera o seu numbnorderoloja desde que seu numbordero não esteja ainda preenchido
'deve ser chamada dentro de transação
 
Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim tChequePre As typeChequePre
Dim objChequePre As ClassChequePre
Dim sTextoFormatado As String
Dim objChequeBordero As New ClassChequeBordero
Dim colCheque As Collection
 
On Error GoTo Erro_Cheque_Desmarcar_Bordero
 
    'abrir comandos
    For iIndice = LBound(alComando) To UBound(alComando)
 
        alComando(iIndice) = Comando_Abrir
        If alComando(iIndice) = 0 Then gError 107034
 
    Next
    
    tChequePre.sAgencia = String(STRING_AGENCIA, 0)
    tChequePre.sContaCorrente = String(STRING_CONTA_CORRENTE, 0)
    tChequePre.sCPFCGC = String(STRING_CGC, 0)
    
    'seleciona os cheques vinculados ao bordero
    lErro = Comando_ExecutarPos(alComando(0), "SELECT FilialEmpresaLoja,SequencialLoja,NaoEspecificado,NumBordero,Valor,Banco,Agencia,ContaCorrente,Numero,CPFCGC,DataDeposito, NumIntCheque FROM ChequePre WHERE (NumBorderoLoja=? Or NumBorderoLojaBanco=?) AND FilialEmpresaLoja=?", 0, _
    tChequePre.iFilialEmpresaLoja, tChequePre.lSequencialLoja, tChequePre.iNaoEspecificado, tChequePre.lNumBordero, tChequePre.dValor, tChequePre.iBanco, tChequePre.sAgencia, tChequePre.sContaCorrente, tChequePre.lNumero, tChequePre.sCPFCGC, tChequePre.dtDataDeposito, tChequePre.lNumIntCheque, objBorderoCheque.lNumBordero, objBorderoCheque.lNumBordero, objBorderoCheque.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 107117
 
    'busca o primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 107118
 
    'se não encontrar->erro
    If lErro = AD_SQL_SEM_DADOS Then gError 107119
 
    Do While lErro <> AD_SQL_SEM_DADOS
 
        iIndice = 0
 
        If tChequePre.iNaoEspecificado = CHEQUE_ESPECIFICADO Then
            Set colCheque = objBorderoCheque.colCheque
        Else
            Set colCheque = objBorderoCheque.colChequeN
        End If
        
        'busca o cheque selecionado na coleção
        For Each objChequePre In colCheque
    
            'se o cheque for encontrado, significa que ele está marcado no grid
            If objChequePre.iFilialEmpresaLoja = tChequePre.iFilialEmpresaLoja And objChequePre.lSequencialLoja = tChequePre.lSequencialLoja Then Exit For
    
            iIndice = iIndice + 1
    
        Next
        
        'se indice=count da coleção significa que o cheque da tabela não está na coleção global. Logo é um candidato a ser desmarcado
        If iIndice = objBorderoCheque.colCheque.Count Then
    
            'se ele estiver vinculado a um borderô bancario-> erro
            'esta flag só estará setada quando tratar-se de um bordero bancario emitido pelo caixa central
            'no backoffice nao será possivel setar este campo. Neste caso, ChequeBordero é preenchido
            If tChequePre.lNumBordero <> 0 Then gError 107120
    
            'se estiver no backoffice ==> tem que verificar se já existe registro na tabele ChequeBordero, se tiver nao pode desmarcar o cheque
            If giLocalOperacao = LOCALOPERACAO_BACKOFFICE Then
                                
                objChequeBordero.lNumIntCheque = tChequePre.lNumIntCheque
                                
                'Le a associacao de cheque com bordero
                lErro = CF("ChequeBordero_Le_NumIntCheque", objChequeBordero)
                If lErro <> SUCESSO And lErro <> 110057 Then gError 110058
                                
                If lErro = SUCESSO Then gError 110059
                
            End If
    
        End If
 
        'atualiza o borderoloja do cheque para 0 (isso é desmarcar o cheque)
        lErro = Comando_ExecutarPos(alComando(1), "UPDATE ChequePre SET NumBorderoLoja=?, NumBorderoLojaBanco=?, Localizacao=?", alComando(0), 0, 0, CHEQUEPRE_LOCALIZACAO_LOJA)
        If lErro <> AD_SQL_SUCESSO Then gError 107121
 
        'acumula o cheque especificado no totalizador de cheques especificados auxiliar
        If tChequePre.iNaoEspecificado = CHEQUE_ESPECIFICADO Then objBorderoCheque1.dValorEspec = objBorderoCheque1.dValorEspec + tChequePre.dValor
 
        'acumula o cheque não especificado no totalizador de cheques não especificados auxiliar
        If tChequePre.iNaoEspecificado = CHEQUE_NAO_ESPECIFICADO Then objBorderoCheque1.dValorNEspec = objBorderoCheque1.dValorNEspec + tChequePre.dValor
 
        'busca o próximo
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 107122
 
    Loop
 
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
 
    Cheque_Desmarcar_Bordero = SUCESSO
 
    Exit Function
 
Erro_Cheque_Desmarcar_Bordero:
 
    Cheque_Desmarcar_Bordero = gErr
 
    Select Case gErr
 
        Case 107034
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
 
        Case 107117, 107118, 107122
            Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPRE_BORDEROCHEQUE_LEITURA", gErr, objBorderoCheque.iFilialEmpresa, objBorderoCheque.lNumBordero)
 
        Case 107119
            Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPRE_BORDEROCHEQUE_NAOENCONTRADO", gErr, objBorderoCheque.iFilialEmpresa, objBorderoCheque.lNumBordero)
 
        Case 107120
            If tChequePre.iNaoEspecificado = CHEQUE_ESPECIFICADO Then
                Call Formata_CNPJ_CPF(sTextoFormatado, tChequePre.sCPFCGC)
                Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPRE_JAVINCULADO_BORDEROCHEQUEPRE", gErr, tChequePre.iBanco, tChequePre.sAgencia, tChequePre.sContaCorrente, tChequePre.lNumero, tChequePre.dtDataDeposito, Format(tChequePre.dValor, "STANDARD"), sTextoFormatado, tChequePre.iFilialEmpresaLoja, tChequePre.lNumBordero)
            Else
                Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPREN_JAVINCULADO_BORDEROCHEQUEPRE", gErr, tChequePre.dtDataDeposito, Format(tChequePre.dValor, "STANDARD"), tChequePre.iFilialEmpresaLoja, tChequePre.lNumBordero)
            End If
            
        Case 107121
            If tChequePre.iNaoEspecificado = CHEQUE_ESPECIFICADO Then
                
                Call Formata_CNPJ_CPF(sTextoFormatado, tChequePre.sCPFCGC)
                Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPRE_ALTERACAO", gErr, tChequePre.iBanco, tChequePre.sAgencia, tChequePre.sContaCorrente, tChequePre.lNumero, tChequePre.dtDataDeposito, Format(tChequePre.dValor, "STANDARD"), sTextoFormatado)
            
            Else
                Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPREN_ALTERACAO", gErr, tChequePre.dtDataDeposito, Format(tChequePre.dValor, "STANDARD"))
            
            End If
            
        Case 110058
            
        Case 110059
            If tChequePre.iNaoEspecificado = CHEQUE_ESPECIFICADO Then
                Call Formata_CNPJ_CPF(sTextoFormatado, tChequePre.sCPFCGC)
                Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPRE_JAVINCULADO_CHEQUEBORDERO", gErr, tChequePre.iBanco, tChequePre.sAgencia, tChequePre.sContaCorrente, tChequePre.lNumero, tChequePre.dtDataDeposito, Format(tChequePre.dValor, "STANDARD"), sTextoFormatado, tChequePre.iFilialEmpresaLoja, objChequeBordero.lNumBordero, objChequeBordero.iTipoBordero)
            Else
                Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPREN_JAVINCULADO_CHEQUEBORDERO", gErr, tChequePre.dtDataDeposito, Format(tChequePre.dValor, "STANDARD"), tChequePre.iFilialEmpresaLoja, objChequeBordero.lNumBordero, objChequeBordero.iTipoBordero)
            End If
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150983)
 
    End Select
 
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
 
    Exit Function
 
End Function
  
Public Function Cheque_Marcar_Bordero(ByVal objBorderoCheque As ClassBorderoCheque) As Long
'Função que recebe um borderocheque e para cada cheque de sua coleção, o localiza na
'tabela de chequepre e preenche o seu atributo numborderoloja com o número de bordero
'deve ser chamada dentro de transação
 
Dim lErro As Long
Dim alComando(0 To 3) As Long
Dim iIndice As Integer
Dim tChequePre As typeChequePre
Dim objChequePre As ClassChequePre
Dim sTextoFormatado As String
 
On Error GoTo Erro_Cheque_Marcar_Bordero
 
    'abrir comandos
    For iIndice = LBound(alComando) To UBound(alComando)
 
        alComando(iIndice) = Comando_Abrir
        If alComando(iIndice) = 0 Then gError 107112
 
    Next
 
    For Each objChequePre In objBorderoCheque.colCheque
 
        'tenta selecionar o cheque da coleção
        lErro = Comando_ExecutarPos(alComando(0), "SELECT NumBorderoLoja, NumBorderoLojaBanco FROM ChequePre WHERE FilialEmpresaLoja=? AND SequencialLoja=?", 0, tChequePre.lNumBorderoLoja, tChequePre.lNumBorderoLojaBanco, objChequePre.iFilialEmpresaLoja, objChequePre.lSequencialLoja)
        If lErro <> AD_SQL_SUCESSO Then gError 107113
 
        'busca o primeiro
        lErro = Comando_BuscarPrimeiro(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 107114
 
        'se retornar consulta vazia -> erro
        If lErro = AD_SQL_SEM_DADOS Then gError 107115
 
        'se o cheque já possuir um número de borderoloja diferente do que estamos colocando e diferente de 0 -> erro
        If tChequePre.lNumBorderoLoja <> 0 And tChequePre.lNumBorderoLoja <> objBorderoCheque.lNumBordero Then gError 107123
 
        'se o cheque já possuir um número de borderoloja diferente do que estamos colocando e diferente de 0 -> erro
        If tChequePre.lNumBorderoLojaBanco <> 0 And tChequePre.lNumBorderoLojaBanco <> objBorderoCheque.lNumBordero Then gError 117500
 
        If objBorderoCheque.iCodNossaConta <> 0 Then
 
            'atualiza o número do borderô do cheque para o borderô novo
            lErro = Comando_ExecutarPos(alComando(1), "UPDATE ChequePre SET NumBorderoLojaBanco =?, Localizacao=?", alComando(0), objBorderoCheque.lNumBordero, CHEQUEPRE_LOCALIZACAO_BANCO)
            If lErro <> AD_SQL_SUCESSO Then gError 117502
 
        Else
 
            'atualiza o número do borderô do cheque para o borderô novo
            lErro = Comando_ExecutarPos(alComando(1), "UPDATE ChequePre SET NumBorderoLoja =?, Localizacao=?", alComando(0), objBorderoCheque.lNumBordero, CHEQUEPRE_LOCALIZACAO_BACKOFFICE)
            If lErro <> AD_SQL_SUCESSO Then gError 107116
 
        End If
 
    Next
 
    For Each objChequePre In objBorderoCheque.colChequeN
 
        'tenta selecionar o cheque da coleção
        lErro = Comando_ExecutarPos(alComando(2), "SELECT NumBorderoLoja, NumBorderoLojaBanco FROM ChequePre WHERE FilialEmpresaLoja=? AND SequencialLoja=?", 0, tChequePre.lNumBorderoLoja, tChequePre.lNumBorderoLojaBanco, objChequePre.iFilialEmpresaLoja, objChequePre.lSequencialLoja)
        If lErro <> AD_SQL_SUCESSO Then gError 107124
 
        'busca o primeiro
        lErro = Comando_BuscarPrimeiro(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 107125
 
        'se retornar consulta vazia -> erro
        If lErro = AD_SQL_SEM_DADOS Then gError 107126
 
        'se o cheque já possuir um número de borderoloja diferente do que estamos colocando e diferente de 0 -> erro
        If tChequePre.lNumBorderoLoja <> 0 And tChequePre.lNumBorderoLoja <> objBorderoCheque.lNumBordero Then gError 107127
 
        'se o cheque já possuir um número de borderoloja diferente do que estamos colocando e diferente de 0 -> erro
        If tChequePre.lNumBorderoLojaBanco <> 0 And tChequePre.lNumBorderoLojaBanco <> objBorderoCheque.lNumBordero Then gError 117501
 
        If objBorderoCheque.iCodNossaConta <> 0 Then
 
            'atualiza o número do borderô do cheque para o borderô novo
            lErro = Comando_ExecutarPos(alComando(3), "UPDATE ChequePre SET NumBorderoLojaBanco=?, Localizacao=?", alComando(2), objBorderoCheque.lNumBordero, CHEQUEPRE_LOCALIZACAO_BANCO)
            If lErro <> AD_SQL_SUCESSO Then gError 117503
 
        Else
 
            'atualiza o número do borderô do cheque para o borderô novo
            lErro = Comando_ExecutarPos(alComando(3), "UPDATE ChequePre SET NumBorderoLoja=?, Localizacao=?", alComando(2), objBorderoCheque.lNumBordero, CHEQUEPRE_LOCALIZACAO_BACKOFFICE)
            If lErro <> AD_SQL_SUCESSO Then gError 107128
 
        End If
        
    Next
 
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
 
    Cheque_Marcar_Bordero = SUCESSO
 
    Exit Function
 
Erro_Cheque_Marcar_Bordero:
 
    Cheque_Marcar_Bordero = gErr
 
    Select Case gErr
 
        Case 107112
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
 
        Case 107113, 107114, 107124, 107125
            
            If objChequePre.iNaoEspecificado = CHEQUE_ESPECIFICADO Then
            
                Call Formata_CNPJ_CPF(sTextoFormatado, objChequePre.sCPFCGC)
                Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPRE_LEITURA", gErr, objChequePre.iBanco, objChequePre.sAgencia, objChequePre.sContaCorrente, objChequePre.lNumero, objChequePre.dtDataDeposito, Format(objChequePre.dValor, "STANDARD"), sTextoFormatado)
                
            Else
                
                Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPREN_LEITURA", gErr, objChequePre.dtDataDeposito, Format(objChequePre.dValor, "STANDARD"))
            
            End If
 
        Case 107115, 107126
            If objChequePre.iNaoEspecificado = CHEQUE_ESPECIFICADO Then
            
                Call Formata_CNPJ_CPF(sTextoFormatado, objChequePre.sCPFCGC)
                Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPRE_NAOENCONTRADO", gErr, objChequePre.iBanco, objChequePre.sAgencia, objChequePre.sContaCorrente, objChequePre.lNumero, objChequePre.dtDataDeposito, Format(objChequePre.dValor, "STANDARD"), sTextoFormatado)
                
            Else
                
                Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPREN_NAOENCONTRADO", gErr, objChequePre.dtDataDeposito, Format(objChequePre.dValor, "STANDARD"))
            
            End If
 
        Case 107116, 107128, 117502, 117503
            
            If objChequePre.iNaoEspecificado = CHEQUE_ESPECIFICADO Then
            
                Call Formata_CNPJ_CPF(sTextoFormatado, objChequePre.sCPFCGC)
                Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPRE_ALTERACAO", gErr, objChequePre.iBanco, objChequePre.sAgencia, objChequePre.sContaCorrente, objChequePre.lNumero, objChequePre.dtDataDeposito, Format(objChequePre.dValor, "STANDARD"), sTextoFormatado)
                
            Else
                
                Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPREN_ALTERACAO", gErr, objChequePre.dtDataDeposito, Format(objChequePre.dValor, "STANDARD"))
            
            End If
 
        Case 107123, 107127
            If objChequePre.iNaoEspecificado = CHEQUE_ESPECIFICADO Then
            
                Call Formata_CNPJ_CPF(sTextoFormatado, objChequePre.sCPFCGC)
                Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPRE_JAVINCULADO_BORDEROCHEQUE", gErr, objChequePre.iBanco, objChequePre.sAgencia, objChequePre.sContaCorrente, objChequePre.lNumero, objChequePre.dtDataDeposito, Format(objChequePre.dValor, "STANDARD"), sTextoFormatado, tChequePre.lNumBorderoLoja)
                
            Else
                
                Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPREN_JAVINCULADO_BORDEROCHEQUE", gErr, objChequePre.dtDataDeposito, Format(objChequePre.dValor, "STANDARD"), tChequePre.lNumBorderoLoja)
            
            End If
 
        Case 117500, 117501
            If objChequePre.iNaoEspecificado = CHEQUE_ESPECIFICADO Then
            
                Call Formata_CNPJ_CPF(sTextoFormatado, objChequePre.sCPFCGC)
                Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPRE_JAVINCULADO_BORDEROCHEQUE", gErr, objChequePre.iBanco, objChequePre.sAgencia, objChequePre.sContaCorrente, objChequePre.lNumero, objChequePre.dtDataDeposito, Format(objChequePre.dValor, "STANDARD"), sTextoFormatado, tChequePre.lNumBorderoLojaBanco)
                
            Else
                
                Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPREN_JAVINCULADO_BORDEROCHEQUE", gErr, objChequePre.dtDataDeposito, Format(objChequePre.dValor, "STANDARD"), tChequePre.lNumBorderoLojaBanco)
            
            End If
 

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150984)
 
    End Select
 
    Exit Function
 
End Function

Public Function BorderoCheque_Inserir(ByVal objBorderoCheque As ClassBorderoCheque) As Long
'Função que recebe um borderocheque e o insere na tabela de borderocheque
' deve ser chamada dentro de transação

Dim lComando As Long
Dim lErro  As Long

On Error GoTo Erro_BorderoCheque_Inserir

    'abre o comando
    lComando = Comando_Abrir
    If lComando = 0 Then gError 107050

    'insere o borderocheque na tabela de borderocheque
    lErro = Comando_Executar(lComando, "INSERT INTO BorderoCheque (FilialEmpresa,NumBordero,CodNossaConta,DataImpressao,DataEnvio,DataBackoffice, NumMovtoCx) VALUES (?,?,?,?,?,?,?)", _
    objBorderoCheque.iFilialEmpresa, objBorderoCheque.lNumBordero, objBorderoCheque.iCodNossaConta, objBorderoCheque.dtDataImpressao, objBorderoCheque.dtDataEnvio, objBorderoCheque.dtDataBackoffice, objBorderoCheque.lNumMovtoCx)
    If lErro <> AD_SQL_SUCESSO Then gError 107051

    'fecha o comando
    Call Comando_Fechar(lComando)

    BorderoCheque_Inserir = SUCESSO

    Exit Function

Erro_BorderoCheque_Inserir:

    BorderoCheque_Inserir = gErr

    Select Case gErr

        Case 107050
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 107051
            Call Rotina_Erro(vbOKOnly, "ERRO_BORDEROCHEQUE_INCLUSAO", gErr, objBorderoCheque.iFilialEmpresa, objBorderoCheque.lNumBordero)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150985)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

End Function

Private Function Mover_Dados_DepositoBancario_CCMovDia1(tMovimentoCaixa As typeMovimentoCaixa, objCCMovDia As ClassCCMovDia) As Long
'Função que recebe um tMovimentoCaixa com todos os dados preenchidos e preenche o objCCmovDia para sua atualalização

On Error GoTo Erro_Mover_Dados_DepositoBancario_CCMovDia1

    'preenche os dados do objccmovdia com os dados do movimento de caixa passado por parâmetro
    objCCMovDia.dDeb = tMovimentoCaixa.dValor
    objCCMovDia.dtData = tMovimentoCaixa.dtDataMovimento
    objCCMovDia.iCodCaixa = tMovimentoCaixa.iCaixa
    objCCMovDia.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_DINHEIRO
    objCCMovDia.iAdmMeioPagto = MEIO_PAGAMENTO_DINHEIRO
    objCCMovDia.iFilialEmpresa = tMovimentoCaixa.iFilialEmpresa
    objCCMovDia.iParcelamento = PARCELAMENTO_AVISTA

    Mover_Dados_DepositoBancario_CCMovDia1 = SUCESSO

    Exit Function

Erro_Mover_Dados_DepositoBancario_CCMovDia1:

    Mover_Dados_DepositoBancario_CCMovDia1 = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150986)

    End Select

    Exit Function

End Function

Private Function Mover_Dados_DepositoBancario_CCMovDia(objMovimentoCaixa As ClassMovimentoCaixa, objCCMovDia As ClassCCMovDia) As Long
'Função que recebe um objMovimentoCaixa com todos os dados preenchidos e preenche o objCCmovDia para sua atualalização
    
On Error GoTo Erro_Mover_Dados_DepositoBancario_CCMovDia

    'preenche os dados do objCCMovDia com os dados do movimento de caixa passado por parâmetro
    objCCMovDia.dDeb = objMovimentoCaixa.dValor
    objCCMovDia.dtData = objMovimentoCaixa.dtDataMovimento
    objCCMovDia.iCodCaixa = objMovimentoCaixa.iCaixa
    objCCMovDia.iAdmMeioPagto = objMovimentoCaixa.iAdmMeioPagto
    objCCMovDia.iFilialEmpresa = objMovimentoCaixa.iFilialEmpresa
    objCCMovDia.iParcelamento = objMovimentoCaixa.iParcelamento
    objCCMovDia.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_DINHEIRO

    Mover_Dados_DepositoBancario_CCMovDia = SUCESSO

    Exit Function

Erro_Mover_Dados_DepositoBancario_CCMovDia:

    Mover_Dados_DepositoBancario_CCMovDia = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150987)

    End Select

    Exit Function

End Function

Private Sub Mover_Dados_DepositoBancario_Log(objMovimentoCaixa As ClassMovimentoCaixa, objLog As ClassLog)
'Função que recebe um objMovimentoCaixa com todos os dados preenchidos e preenche a strin de um
'objLog para prepará-lo para a gravação

On Error GoTo Erro_Mover_Dados_DepositoBancario_Log

    'preenche os dados do log com cada atributo do objMovimentoCaixa separado por vbkeyscape
    With objMovimentoCaixa
        objLog.sLog = CStr(.iFilialEmpresa) & Chr(vbKeyEscape) & _
                      CStr(.lNumMovto) & Chr(vbKeyEscape) & _
                      CStr(.iCaixa) & Chr(vbKeyEscape) & _
                      CStr(.lSequencial) & Chr(vbKeyEscape) & _
                      CStr(.iTipo) & Chr(vbKeyEscape) & _
                      CStr(.iAdmMeioPagto) & Chr(vbKeyEscape) & _
                      CStr(.iParcelamento) & Chr(vbKeyEscape) & _
                      CStr(.dtDataMovimento) & Chr(vbKeyEscape) & _
                      CStr(.dValor) & Chr(vbKeyEscape) & _
                      .sHistorico & Chr(vbKeyEscape) & _
                      CStr(.iCodConta) & Chr(vbKeyEscape) & _
                      CStr(.dHora) & Chr(vbKeyEscape) & _
                      Chr(vbKeyEnd)
    End With

    Exit Sub

Erro_Mover_Dados_DepositoBancario_Log:

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150988)

    End Select

    Exit Sub

End Sub

Public Function Movimentos_Caixa_Grava_DepositoBancario(objMovimentoCaixa As ClassMovimentoCaixa) As Long
'Função que recebe um objMovimentoCaixa preenchido e grava o mesmo na tabela de movimentos de caixa

Dim lTransacao As Long
Dim lErro As Long
Dim iIndice As Integer
Dim objLog As New ClassLog
Dim objCaixa As New ClassCaixa
Dim objContaCorrenteInterna As New ClassContasCorrentesInternas
Dim objTipoMeioPagtoLojaFilial As New ClassTMPLojaFilial
Dim objCCMovDia As New ClassCCMovDia
Dim tMovimentoCaixa As typeMovimentoCaixa
Dim iTipo As Integer
Dim iFilialEmpresa As Integer
Dim alComando(0 To 1) As Long
Dim objMovContaCorrente As New ClassMovContaCorrente
Dim lNumMovto As Long
Dim lSeq As Long
Dim objTipoMeioPagtoLoja As New ClassTMPLojaFilial

On Error GoTo Erro_Movimentos_Caixa_Grava_DepositoBancario

    'abre a transacao
    lTransacao = Transacao_Abrir
    If lTransacao = 0 Then gError 103907
    
    For iIndice = LBound(alComando) To UBound(alComando)
    
        alComando(iIndice) = Comando_Abrir
        If alComando(iIndice) = 0 Then gError 103908
    
    Next
    
    'preenche os campos chave para buscar o caixa para posterior lock
    objCaixa.iCodigo = objMovimentoCaixa.iCaixa
    objCaixa.iFilialEmpresa = objMovimentoCaixa.iFilialEmpresa
    
    'faz um lock no caixa
    lErro = CF("Caixa_Lock", objCaixa)
    If lErro <> SUCESSO And lErro <> 103776 Then gError 103909
    
    If lErro = 103776 Then gError 103910
    
    'preenche os campos chave para buscar a conta corrente para posterior lock
    objContaCorrenteInterna.iCodigo = objMovimentoCaixa.iCodConta
    objContaCorrenteInterna.iFilialEmpresa = objMovimentoCaixa.iFilialEmpresa
    
    'faz um lock na conta corrente selecionada
    lErro = CF("ContasCorrentesInternas_Lock", objContaCorrenteInterna)
    If lErro <> SUCESSO And lErro <> 103900 Then gError 103902
    
    If lErro = 103900 Then gError 103903
    
    'verifica se a data é menor que a data inicial do caixa central na tabela caixa. Se for-> erro
    If objMovimentoCaixa.dtDataMovimento < objCaixa.dtDataInicial Then gError 103911
    
    'preenche o tipo meio pagamento comm pagamento dinheiro
    objTipoMeioPagtoLoja.iTipo = MEIO_PAGAMENTO_DINHEIRO
    objTipoMeioPagtoLoja.iFilialEmpresa = objMovimentoCaixa.iFilialEmpresa
    
    'le o saldo atualizado da tabela
    lErro = CF("TipoMeioPagtoLojaFilial_Le", objTipoMeioPagtoLoja)
    If lErro <> SUCESSO Then gError 117556
    
    'inicializa as strings
    tMovimentoCaixa.sHistorico = String(STRING_MOVIMENTOCAIXA_HISTORICO, 0)
    tMovimentoCaixa.sFavorecido = String(STRING_MOVIMENTOCAIXA_FAVORECIDO, 0)
    
    'verifica se já existe movimento cadastrado para o caixa
    'faz o select na tabela
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Caixa, Sequencial,FilialEmpresa, NumMovto , Tipo , AdmMeioPagto , Parcelamento, TipoCartao, Numero, DataMovimento, Valor, Historico, Favorecido,CupomFiscal,NumRefInterna,MovtoTransf,MovtoEstorno,Gerente,CodConta FROM MovimentosCaixa WHERE FilialEmpresa = ? AND Caixa = ? AND Sequencial = ?", 0, _
    tMovimentoCaixa.iCaixa, tMovimentoCaixa.lSequencial, tMovimentoCaixa.iFilialEmpresa, tMovimentoCaixa.lNumMovto, tMovimentoCaixa.iTipo, tMovimentoCaixa.iAdmMeioPagto, tMovimentoCaixa.iParcelamento, tMovimentoCaixa.iTipoCartao, tMovimentoCaixa.lNumero, tMovimentoCaixa.dtDataMovimento, tMovimentoCaixa.dValor, tMovimentoCaixa.sHistorico, tMovimentoCaixa.sFavorecido, tMovimentoCaixa.lCupomFiscal, tMovimentoCaixa.lNumRefInterna, tMovimentoCaixa.lMovtoTransf, tMovimentoCaixa.lMovtoEstorno, tMovimentoCaixa.iGerente, tMovimentoCaixa.iCodConta, objMovimentoCaixa.iFilialEmpresa, objMovimentoCaixa.iCaixa, objMovimentoCaixa.lSequencial)
    If lErro <> SUCESSO Then gError 103912

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 103913

    'se o movimento estiver cadastrado
    If lErro = SUCESSO Then
    
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> SUCESSO Then gError 107052

        'se o movimento não for de deposito--> erro
        If tMovimentoCaixa.iTipo <> MOVIMENTO_CAIXA_DEPOSITO_BANCARIO Then gError 103914
        
        'carrega um movimento diário para atualização de tabela consolidado diário
        'com os dados da tabela de movimento caixa
        lErro = Mover_Dados_DepositoBancario_CCMovDia1(tMovimentoCaixa, objCCMovDia)
        If lErro <> SUCESSO Then gError 103915

        'subtrai o movimento em questão do consolidado diário (trata-se de uma atualização de um movimento)
        lErro = CF("CCMovDia_Exclui", objCCMovDia)
        If lErro <> SUCESSO Then gError 103916

        'subtrai o movimento em questão do consolidado anual no mês atual
        lErro = CF("CCMov_Exclui", objCCMovDia)
        If lErro <> SUCESSO Then gError 103917

        'Alterar os dados da Tabela MovimentosCaixa
        lErro = Comando_ExecutarPos(alComando(1), "UPDATE MovimentosCaixa SET DataMovimento = ?, Valor =? , Favorecido = ? , Historico = ?, CodConta=?", alComando(0), objMovimentoCaixa.dtDataMovimento, objMovimentoCaixa.dValor, objMovimentoCaixa.sFavorecido, objMovimentoCaixa.sHistorico, objMovimentoCaixa.iCodConta)
        If lErro <> SUCESSO Then gError 103918

        'carrega um tipomeiopagtoloja com o movimento excluído para posterior alteração do saldo na tabela de tipomeiopagtoloja
        objTipoMeioPagtoLojaFilial.dSaldo = tMovimentoCaixa.dValor
        objTipoMeioPagtoLojaFilial.iFilialEmpresa = tMovimentoCaixa.iFilialEmpresa
        
        If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL_BACKOFFICE Then
        
            'mover os dados de movimento de caixa para movimento de conta corrente
            lErro = CF("Back_Mover_Dados_Movcc_Movcx", objMovimentoCaixa, objMovContaCorrente, TIPOMEIOPAGTOLOJA_DINHEIRO, MOVCCI_DEP_DIN_LOJA, 0, DINHEIRO)
            If lErro <> SUCESSO Then gError 117553
        
            objMovContaCorrente.lNumMovto = tMovimentoCaixa.lNumRefInterna
        
            'insere o movimento de conta corrente referente ao deposito bancario no caixa central
            lErro = CF("Back_MovCCI_Altera_Deposito", objMovContaCorrente)
            If lErro <> SUCESSO Then gError 117554
        
        End If
        
        'diz o tipo da operação a ser logada
        objLog.iOperacao = ALTERACAO_DEPOSITO_BANCARIO

    'caso o movimento ainda não exista
    Else
    
        'pegar o proximo numero de movimento disponivel na tabela.
        lErro = CF("Config_ObterNumInt", "LojaConfig", "NUM_PROX_MOVCAIXACENTRAL", lNumMovto, 1, objMovimentoCaixa.iFilialEmpresa)
        If lErro <> SUCESSO Then gError 103839
        
        'preencher o movimentocaixa com número de movimento novo gerado
        objMovimentoCaixa.lNumMovto = lNumMovto
    
        If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL_BACKOFFICE Then
            
            lErro = CF("CtaCorrente_Sequencial_Automatico", objMovimentoCaixa.iCodConta, lSeq)
            If lErro <> SUCESSO Then gError 117549
        
            'mover os dados de movimento de caixa para movimento de conta corrente
            lErro = CF("Back_Mover_Dados_Movcc_Movcx", objMovimentoCaixa, objMovContaCorrente, TIPOMEIOPAGTOLOJA_DINHEIRO, MOVCCI_DEP_DIN_LOJA, lSeq, DINHEIRO)
            If lErro <> SUCESSO Then gError 117550
        
            'insere o movimento de conta corrente referente ao deposito bancario no caixa central
            lErro = CF("Back_MovCCI_Insere_Deposito", objMovContaCorrente)
            If lErro <> SUCESSO Then gError 117551
        
            objMovimentoCaixa.lNumRefInterna = objMovContaCorrente.lNumMovto
    
        End If
    
        'executa a inserção na tabela de movimentos de caixa
        lErro = Comando_Executar(alComando(0), "INSERT INTO MovimentosCaixa(FilialEmpresa,NumMovto,Caixa,Sequencial,Tipo,AdmMeioPagto,Parcelamento,TipoCartao,Numero,DataMovimento,Valor,Historico,Favorecido,CupomFiscal,NumRefInterna,MovtoTransf,MovtoEstorno,Gerente,CodConta,Hora) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
        objMovimentoCaixa.iFilialEmpresa, objMovimentoCaixa.lNumMovto, objMovimentoCaixa.iCaixa, objMovimentoCaixa.lSequencial, objMovimentoCaixa.iTipo, objMovimentoCaixa.iAdmMeioPagto, objMovimentoCaixa.iParcelamento, objMovimentoCaixa.iTipoCartao, objMovimentoCaixa.lNumero, objMovimentoCaixa.dtDataMovimento, objMovimentoCaixa.dValor, objMovimentoCaixa.sHistorico, objMovimentoCaixa.sFavorecido, objMovimentoCaixa.lCupomFiscal, objMovimentoCaixa.lNumRefInterna, objMovimentoCaixa.lMovtoTransf, objMovimentoCaixa.lMovtoEstorno, objMovimentoCaixa.iGerente, objMovimentoCaixa.iCodConta, objMovimentoCaixa.dHora)
        If lErro <> SUCESSO Then gError 117552
    
        'diz o tipo de operação a ser logada
        objLog.iOperacao = INCLUSAO_DEPOSITO_BANCARIO

    End If

    'preenche um objccmovdia com os dados do movimento de caixa
    lErro = Mover_Dados_DepositoBancario_CCMovDia(objMovimentoCaixa, objCCMovDia)
    If lErro <> SUCESSO Then gError 103920

    'adiciona o mesmo no consolidado diário
    lErro = CF("CCMovDia_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 103921

    'adiciona o mesmo no consolidado anual no mês em questão
    lErro = CF("CCMov_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 103922

    'subtrair o valor do movimento de caixa novo em objtipomeiopagtoloja.saldo
    objTipoMeioPagtoLojaFilial.dSaldo = objTipoMeioPagtoLojaFilial.dSaldo - objMovimentoCaixa.dValor

    'se nao tiver saldo em caixa ==> erro
    If objTipoMeioPagtoLoja.dSaldo + objTipoMeioPagtoLojaFilial.dSaldo < 0 Then gError 117557

    'mover Meio_pagamento_Dineiro para objtipomeiopagtoloja.itipo
    objTipoMeioPagtoLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_DINHEIRO
    objTipoMeioPagtoLojaFilial.iFilialEmpresa = objMovimentoCaixa.iFilialEmpresa

    'altera o saldo atual na tabela de tipomeiopagtoloja
    lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTipoMeioPagtoLojaFilial)
    If lErro <> SUCESSO Then gError 103923
    
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
        'preenche o objLog com o movimento do caixa
        Call Mover_Dados_DepositoBancario_Log(objMovimentoCaixa, objLog)
        
        'grava o log
        lErro = CF("Log_Grava", objLog)
        If lErro <> SUCESSO Then gError 103924
    End If
    
    'fecha transação e comandos
    For iIndice = LBound(alComando) To UBound(alComando)
    
        Call Comando_Fechar(alComando(iIndice))
    
    Next

    lErro = Transacao_Commit()
    If lErro <> SUCESSO Then gError 103925

    Movimentos_Caixa_Grava_DepositoBancario = SUCESSO
    
    Exit Function

Erro_Movimentos_Caixa_Grava_DepositoBancario:

    Movimentos_Caixa_Grava_DepositoBancario = gErr

    Select Case gErr
    
        Case 103902
        
        Case 103903
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTASCORRENTESINTERNAS_NAOENCONTRADA", objContaCorrenteInterna.iCodigo)

        Case 103907
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 103908
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 103909, 103920 To 103924, 103915 To 103917, 117549 To 117551, 117553 To 117554

        Case 103910
            Call Rotina_Erro(vbOKOnly, "ERRO_CAIXA_NAOENCONTRADO", gErr, STRING_CAIXA_CENTRAL)

        Case 103911
            Call Rotina_Erro(vbOKOnly, "ERRO_DATAMOVIMENTOCAIXA_MAIOR_DATAINICIALCAIXA", gErr, objCaixa.dtDataInicial)
        
        Case 103912, 103913
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_LEITURA", gErr)

        Case 103914
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPO_MOVIMENTO_NAO_DEPOSITO_BANCARIO", gErr, STRING_CAIXA_CENTRAL, objMovimentoCaixa.lSequencial)
            
        Case 103918
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_ALTERACAO", gErr, STRING_CAIXA_CENTRAL, objMovimentoCaixa.lSequencial)

        Case 103925
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case 107052
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_LOCK", gErr, , STRING_CAIXA_CENTRAL, objMovimentoCaixa.lSequencial)
            
        Case 117552
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_INSERCAO", gErr, STRING_CAIXA_CENTRAL, objMovimentoCaixa.lSequencial)
            
        Case 117556
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPOMEIOPAGTOLOJAFILIAL_NAO_CADASTRADO", gErr, objTipoMeioPagtoLojaFilial.iTipo, objTipoMeioPagtoLojaFilial.iFilialEmpresa)
            
        Case 117557
            Call Rotina_Erro(vbOKOnly, "ERRO_NAO_HA_SALDO_DISPONIVEL", gErr)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150989)
            
    End Select

    'fecha transação e comandos
    For iIndice = LBound(alComando) To UBound(alComando)
    
        Call Comando_Fechar(alComando(iIndice))
    
    Next

    Call Transacao_Rollback

    Exit Function

End Function

Public Function MovimentosCaixa_Inserir(ByVal objMovimentoCaixa As ClassMovimentoCaixa) As Long

Dim lErro As Long
Dim lNumMovto As Long
Dim sComando As String
Dim lComando As Long
Dim lSequencial As Long

On Error GoTo Erro_MovimentosCaixa_Inserir

    'Abre comando
    lComando = Comando_Abrir
    If lComando = 0 Then gError 103861

    'pegar o proximo numero de movimento disponivel na tabela.
    lErro = CF("Config_ObterNumInt", "LojaConfig", "NUM_PROX_MOVCAIXACENTRAL", lNumMovto, 1, objMovimentoCaixa.iFilialEmpresa)
    If lErro <> SUCESSO Then gError 103839
    
    'se o sequencial ainda estiver zerado
    If objMovimentoCaixa.lSequencial = 0 Then
        
        'cria um
        lErro = CF("Caixa_Sequencial_Automatico", objMovimentoCaixa.iCaixa, objMovimentoCaixa.iFilialEmpresa, lSequencial)
        If lErro <> SUCESSO Then gError 107465
        
        objMovimentoCaixa.lSequencial = lSequencial
    
    End If
        
    'preencher o movimentocaixa com número de movimento novo gerado
    objMovimentoCaixa.lNumMovto = lNumMovto
    
    'cria o statement
    sComando = "INSERT INTO MovimentosCaixa(FilialEmpresa,NumMovto,Caixa,Sequencial,Tipo,AdmMeioPagto,Parcelamento,TipoCartao,Numero,DataMovimento,Valor,Historico,Favorecido,CupomFiscal,NumRefInterna,MovtoTransf,MovtoEstorno,Gerente,CodConta,Hora) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"
    
    'executa a inserção na tabela de movimentos de caixa
    lErro = Comando_Executar(lComando, sComando, _
    objMovimentoCaixa.iFilialEmpresa, objMovimentoCaixa.lNumMovto, objMovimentoCaixa.iCaixa, objMovimentoCaixa.lSequencial, objMovimentoCaixa.iTipo, objMovimentoCaixa.iAdmMeioPagto, objMovimentoCaixa.iParcelamento, objMovimentoCaixa.iTipoCartao, objMovimentoCaixa.lNumero, objMovimentoCaixa.dtDataMovimento, objMovimentoCaixa.dValor, objMovimentoCaixa.sHistorico, objMovimentoCaixa.sFavorecido, objMovimentoCaixa.lCupomFiscal, objMovimentoCaixa.lNumRefInterna, objMovimentoCaixa.lMovtoTransf, objMovimentoCaixa.lMovtoEstorno, objMovimentoCaixa.iGerente, objMovimentoCaixa.iCodConta, objMovimentoCaixa.dHora)
    If lErro <> SUCESSO Then gError 103840
    
    Call Comando_Fechar(lComando)
    
    MovimentosCaixa_Inserir = SUCESSO
    
    Exit Function
    
Erro_MovimentosCaixa_Inserir:
    
    MovimentosCaixa_Inserir = gErr

    Select Case gErr
    
        Case 103861
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 103839

        Case 103840
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_INSERCAO", gErr, STRING_CAIXA_CENTRAL, objMovimentoCaixa.lSequencial)
            
        Case 107465
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150990)
            
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Private Sub Mover_Dados_Deposito_Log(objMovimentoCaixa As ClassMovimentoCaixa, objLog As ClassLog)
'Função que recebe um objMovimentoCaixa com todos os dados preenchidos e preenche a strin de um
'objLog para prepará-lo para a gravação

On Error GoTo Erro_Mover_Dados_Deposito_Log

    'preenche os dados do log com cada atributo do objMovimentoCaixa separado por vbkeyscape
    With objMovimentoCaixa
        objLog.sLog = CStr(.iFilialEmpresa) & Chr(vbKeyEscape) & _
                      CStr(.lNumMovto) & Chr(vbKeyEscape) & _
                      CStr(.iCaixa) & Chr(vbKeyEscape) & _
                      CStr(.lSequencial) & Chr(vbKeyEscape) & _
                      CStr(.iTipo) & Chr(vbKeyEscape) & _
                      CStr(.iAdmMeioPagto) & Chr(vbKeyEscape) & _
                      CStr(.iParcelamento) & Chr(vbKeyEscape) & _
                      CStr(.dtDataMovimento) & Chr(vbKeyEscape) & _
                      CStr(.dValor) & Chr(vbKeyEscape) & _
                      .sHistorico & Chr(vbKeyEscape) & _
                      CStr(.iCodConta) & Chr(vbKeyEscape) & _
                      CStr(.dHora) & Chr(vbKeyEscape) & _
                      Chr(vbKeyEnd)

    End With

    Exit Sub

Erro_Mover_Dados_Deposito_Log:

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150991)

    End Select

    Exit Sub

End Sub


Private Function Mover_Dados_Deposito_CCMovDia(objMovimentoCaixa As ClassMovimentoCaixa, objCCMovDia As ClassCCMovDia) As Long
'Função que recebe um objMovimentoCaixa com todos os dados preenchidos e preenche o objCCmovDia para sua atualalização
    
On Error GoTo Erro_Mover_Dados_Deposito_CCMovDia

    'preenche os dados do objCCMovDia com os dados do movimento de caixa passado por parâmetro
    objCCMovDia.dCred = objMovimentoCaixa.dValor
    objCCMovDia.dtData = objMovimentoCaixa.dtDataMovimento
    objCCMovDia.iCodCaixa = objMovimentoCaixa.iCaixa
    objCCMovDia.iAdmMeioPagto = objMovimentoCaixa.iAdmMeioPagto
    objCCMovDia.iFilialEmpresa = objMovimentoCaixa.iFilialEmpresa
    objCCMovDia.iParcelamento = objMovimentoCaixa.iParcelamento

    Mover_Dados_Deposito_CCMovDia = SUCESSO

    Exit Function

Erro_Mover_Dados_Deposito_CCMovDia:

    Mover_Dados_Deposito_CCMovDia = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150992)

    End Select

    Exit Function

End Function

Private Function Mover_Dados_Deposito_CCMovDia1(tMovimentoCaixa As typeMovimentoCaixa, objCCMovDia As ClassCCMovDia) As Long
'Função que recebe um tMovimentoCaixa com todos os dados preenchidos e preenche o objCCmovDia para sua atualalização

On Error GoTo Erro_Mover_Dados_Deposito_CCMovDia1

    'preenche os dados do objccmovdia com os dados do movimento de caixa passado por parâmetro
    objCCMovDia.dCred = tMovimentoCaixa.dValor
    objCCMovDia.dtData = tMovimentoCaixa.dtDataMovimento
    objCCMovDia.iCodCaixa = tMovimentoCaixa.iCaixa
    objCCMovDia.iAdmMeioPagto = MEIO_PAGAMENTO_DINHEIRO
    objCCMovDia.iFilialEmpresa = tMovimentoCaixa.iFilialEmpresa
    objCCMovDia.iParcelamento = PARCELAMENTO_AVISTA
    objCCMovDia.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_DINHEIRO

    Mover_Dados_Deposito_CCMovDia1 = SUCESSO

    Exit Function

Erro_Mover_Dados_Deposito_CCMovDia1:

    Mover_Dados_Deposito_CCMovDia1 = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150993)

    End Select

    Exit Function

End Function

Public Function Movimentos_Caixa_Grava_DepositoCaixa(objMovimentoCaixa As ClassMovimentoCaixa) As Long
'Função que recebe um objMovimentoCaixa preenchido e grava o mesmo na tabela de movimentos de caixa

Dim lTransacao As Long
Dim lErro As Long
Dim iIndice As Integer
Dim objLog As New ClassLog
Dim objCaixa As New ClassCaixa
Dim objTipoMeioPagtoLojaFilial As New ClassTMPLojaFilial
Dim objCCMovDia As New ClassCCMovDia
Dim tMovimentoCaixa As typeMovimentoCaixa
Dim iTipo As Integer
Dim iFilialEmpresa As Integer
Dim alComando(0 To 1) As Long

On Error GoTo Erro_Movimentos_Caixa_Grava_DepositoCaixa

    'abre a transacao
    lTransacao = Transacao_Abrir
    If lTransacao = 0 Then gError 103827
    
    For iIndice = LBound(alComando) To UBound(alComando)
    
        alComando(iIndice) = Comando_Abrir
        If alComando(iIndice) = 0 Then gError 103828
    
    Next
    
    'preenche os campos chave para buscar o caixa para posterior lock
    objCaixa.iCodigo = objMovimentoCaixa.iCaixa
    objCaixa.iFilialEmpresa = objMovimentoCaixa.iFilialEmpresa
    
    'faz um lock no caixa
    lErro = CF("Caixa_Lock", objCaixa)
    If lErro <> SUCESSO And lErro <> 103776 Then gError 103829
    
    If lErro = 103776 Then gError 103830

    'verifica se a data é menor que a data inicial do caixa central na tabela caixa. Se for-> erro
    If objMovimentoCaixa.dtDataMovimento < objCaixa.dtDataInicial Then gError 103831
    
    'inicializa as strings
    tMovimentoCaixa.sHistorico = String(STRING_MOVIMENTOCAIXA_HISTORICO, 0)
    tMovimentoCaixa.sFavorecido = String(STRING_MOVIMENTOCAIXA_FAVORECIDO, 0)
    
    'verifica se já existe movimento cadastrado para o caixa
    'faz o select na tabela
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Caixa, Sequencial,FilialEmpresa, NumMovto , Tipo , AdmMeioPagto , Parcelamento, TipoCartao, Numero, DataMovimento, Valor, Historico, Favorecido,CupomFiscal,NumRefInterna,MovtoTransf,MovtoEstorno,Gerente FROM MovimentosCaixa WHERE Caixa = ? AND Sequencial = ?", 0, _
    tMovimentoCaixa.iCaixa, tMovimentoCaixa.lSequencial, tMovimentoCaixa.iFilialEmpresa, tMovimentoCaixa.lNumMovto, tMovimentoCaixa.iTipo, tMovimentoCaixa.iAdmMeioPagto, tMovimentoCaixa.iParcelamento, tMovimentoCaixa.iTipoCartao, tMovimentoCaixa.lNumero, tMovimentoCaixa.dtDataMovimento, tMovimentoCaixa.dValor, tMovimentoCaixa.sHistorico, tMovimentoCaixa.sFavorecido, tMovimentoCaixa.lCupomFiscal, tMovimentoCaixa.lNumRefInterna, tMovimentoCaixa.lMovtoTransf, tMovimentoCaixa.lMovtoEstorno, tMovimentoCaixa.iGerente, objMovimentoCaixa.iCaixa, objMovimentoCaixa.lSequencial)
    If lErro <> SUCESSO Then gError 103832

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 103833

    'se o movimento estiver cadastrado
    If lErro = SUCESSO Then
    
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> SUCESSO Then gError 107053

        'se o movimento não for de deposito--> erro
        If tMovimentoCaixa.iTipo <> MOVIMENTO_CAIXA_DEPOSITO_DINHEIRO Then gError 103834
        
        'carrega um movimento diário para atualização de tabela consolidado diário
        'com os dados da tabela de movimento caixa
        lErro = Mover_Dados_Deposito_CCMovDia1(tMovimentoCaixa, objCCMovDia)
        If lErro <> SUCESSO Then gError 103835

        'subtrai o movimento em questão do consolidado diário (trata-se de uma atualização de um movimento)
        lErro = CF("CCMovDia_Exclui", objCCMovDia)
        If lErro <> SUCESSO Then gError 103836

        'subtrai o movimento em questão do consolidado anual no mês atual
        lErro = CF("CCMov_Exclui", objCCMovDia)
        If lErro <> SUCESSO Then gError 103837

        'Alterar os dados da Tabela MovimentosCaixa
        lErro = Comando_ExecutarPos(alComando(1), "UPDATE MovimentosCaixa SET DataMovimento = ?, Valor =? , Favorecido = ? , Historico = ?", alComando(0), objMovimentoCaixa.dtDataMovimento, objMovimentoCaixa.dValor, objMovimentoCaixa.sFavorecido, objMovimentoCaixa.sHistorico)
        If lErro <> SUCESSO Then gError 103838

        'carrega um tipomeiopagtoloja com o movimento excluído para posterior alteração do saldo na tabela de tipomeiopagtoloja
        objTipoMeioPagtoLojaFilial.dSaldo = -tMovimentoCaixa.dValor

        'diz o tipo da operação a ser logada
        objLog.iOperacao = ALTERACAO_DEPOSITO_CAIXA_CENTRAL

    'caso o movimento ainda não exista
    Else
    
        lErro = MovimentosCaixa_Inserir(objMovimentoCaixa)
        If lErro <> SUCESSO Then gError 103857

        'diz o tipo de operação a ser logada
        objLog.iOperacao = INCLUSAO_DEPOSITO_CAIXA_CENTRAL

    End If

    'preenche um objccmovdia com os dados do movimento de caixa
    lErro = Mover_Dados_Deposito_CCMovDia(objMovimentoCaixa, objCCMovDia)
    If lErro <> SUCESSO Then gError 103841

    objCCMovDia.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_DINHEIRO

    'adiciona o mesmo no consolidado diário
    lErro = CF("CCMovDia_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 103842

    'adiciona o mesmo no consolidado anual no mês em questão
    lErro = CF("CCMov_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 103843

    'subtrair o valor do movimento de caixa novo em objtipomeiopagtoloja.saldo
    objTipoMeioPagtoLojaFilial.dSaldo = objTipoMeioPagtoLojaFilial.dSaldo + objMovimentoCaixa.dValor

    objTipoMeioPagtoLojaFilial.iFilialEmpresa = tMovimentoCaixa.iFilialEmpresa
    
    'mover Meio_pagamento_Dineiro para objtipomeiopagtoloja.itipo
    objTipoMeioPagtoLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_DINHEIRO
    objTipoMeioPagtoLojaFilial.iFilialEmpresa = objMovimentoCaixa.iFilialEmpresa

    'altera o saldo atual na tabela de tipomeiopagtoloja
    lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTipoMeioPagtoLojaFilial)
    If lErro <> SUCESSO Then gError 103844
    
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
        'preenche o objLog com o movimento do caixa
        Call Mover_Dados_Deposito_Log(objMovimentoCaixa, objLog)
        
        'grava o log
        lErro = CF("Log_Grava", objLog)
        If lErro <> SUCESSO Then gError 103845
    End If
    
    'fecha transação e comandos
    For iIndice = LBound(alComando) To UBound(alComando)
    
        Call Comando_Fechar(alComando(iIndice))
    
    Next

    lErro = Transacao_Commit
    If lErro <> SUCESSO Then gError 103846

    Movimentos_Caixa_Grava_DepositoCaixa = SUCESSO
    
    Exit Function

Erro_Movimentos_Caixa_Grava_DepositoCaixa:

    Movimentos_Caixa_Grava_DepositoCaixa = gErr

    Select Case gErr

        Case 103827
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 103828
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 103829, 103841 To 103845, 103857, 103835 To 103837, 117560

        Case 103830
            Call Rotina_Erro(vbOKOnly, "ERRO_CAIXA_NAOENCONTRADO", gErr, STRING_CAIXA_CENTRAL)

        Case 103831
            Call Rotina_Erro(vbOKOnly, "ERRO_DATAMOVIMENTOCAIXA_MAIOR_DATAINICIALCAIXA", gErr, objCaixa.dtDataInicial)
        
        Case 103832, 103833
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_LEITURA", gErr)

        Case 103834
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPO_MOVIMENTO_NAO_DEPOSITO_DINHEIRO", gErr, STRING_CAIXA_CENTRAL, objMovimentoCaixa.lSequencial)
            
        Case 103838
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_ALTERACAO", gErr, STRING_CAIXA_CENTRAL, objMovimentoCaixa.lSequencial)

        Case 103846
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case 107053
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_LOCK", gErr, STRING_CAIXA_CENTRAL, objMovimentoCaixa.lSequencial)
            
        Case 117561
            Call Rotina_Erro(vbOKOnly, "ERRO_NAO_HA_SALDO_DISPONIVEL", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150994)
            
    End Select

    'fecha transação e comandos
    For iIndice = LBound(alComando) To UBound(alComando)
    
        Call Comando_Fechar(alComando(iIndice))
    
    Next

    Call Transacao_Rollback

    Exit Function

End Function


Private Sub Mover_Dados_Saque_Log(objMovimentoCaixa As ClassMovimentoCaixa, objLog As ClassLog)
'Função que recebe um objMovimentoCaixa com todos os dados preenchidos e preenche a strin de um
'objLog para prepará-lo para a gravação

On Error GoTo Erro_Mover_Dados_Saque_Log

    'preenche os dados do log com cada atributo do objMovimentoCaixa separado por vbkeyscape
    With objMovimentoCaixa
        objLog.sLog = CStr(.iFilialEmpresa) & Chr(vbKeyEscape) & _
                      CStr(.lNumMovto) & Chr(vbKeyEscape) & _
                      CStr(.iCaixa) & Chr(vbKeyEscape) & _
                      CStr(.lSequencial) & Chr(vbKeyEscape) & _
                      CStr(.iTipo) & Chr(vbKeyEscape) & _
                      CStr(.iAdmMeioPagto) & Chr(vbKeyEscape) & _
                      CStr(.iParcelamento) & Chr(vbKeyEscape) & _
                      CStr(.dtDataMovimento) & Chr(vbKeyEscape) & _
                      CStr(.dValor) & Chr(vbKeyEscape) & _
                      .sHistorico & Chr(vbKeyEscape) & _
                      .sFavorecido & Chr(vbKeyEscape) & _
                      CStr(.dHora) & Chr(vbKeyEscape) & _
                      Chr(vbKeyEnd)

    End With

    Exit Sub

Erro_Mover_Dados_Saque_Log:

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150995)

    End Select

    Exit Sub

End Sub

Function Mover_Dados_Saque_CCMovDia(ByVal objMovimentoCaixa As ClassMovimentoCaixa, objCCMovDia As ClassCCMovDia) As Long
'Função que recebe um objMovimentoCaixa com todos os dados preenchidos e preenche o objCCmovDia para sua atualalização
    
On Error GoTo Erro_Mover_Dados_Saque_CCMovDia

    'preenche os dados do objCCMovDia com os dados do movimento de caixa passado por parâmetro
    objCCMovDia.dDeb = objMovimentoCaixa.dValor
    objCCMovDia.dtData = objMovimentoCaixa.dtDataMovimento
    objCCMovDia.iCodCaixa = objMovimentoCaixa.iCaixa
    objCCMovDia.iAdmMeioPagto = objMovimentoCaixa.iAdmMeioPagto
    objCCMovDia.iFilialEmpresa = objMovimentoCaixa.iFilialEmpresa
    objCCMovDia.iParcelamento = objMovimentoCaixa.iParcelamento

    Mover_Dados_Saque_CCMovDia = SUCESSO

    Exit Function

Erro_Mover_Dados_Saque_CCMovDia:

    Mover_Dados_Saque_CCMovDia = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150996)

    End Select

    Exit Function

End Function

Private Function Mover_Dados_Saque_CCMovDia1(tMovimentoCaixa As typeMovimentoCaixa, objCCMovDia As ClassCCMovDia) As Long
'Função que recebe um tMovimentoCaixa com todos os dados preenchidos e preenche o objCCmovDia para sua atualalização

On Error GoTo Erro_Mover_Dados_Saque_CCMovDia1

    'preenche os dados do objccmovdia com os dados do movimento de caixa passado por parâmetro
    objCCMovDia.dDeb = tMovimentoCaixa.dValor
    objCCMovDia.dtData = tMovimentoCaixa.dtDataMovimento
    objCCMovDia.iCodCaixa = tMovimentoCaixa.iCaixa
    objCCMovDia.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_DINHEIRO
    objCCMovDia.iAdmMeioPagto = MEIO_PAGAMENTO_DINHEIRO
    objCCMovDia.iFilialEmpresa = tMovimentoCaixa.iFilialEmpresa
    objCCMovDia.iParcelamento = PARCELAMENTO_AVISTA

    Mover_Dados_Saque_CCMovDia1 = SUCESSO

    Exit Function

Erro_Mover_Dados_Saque_CCMovDia1:

    Mover_Dados_Saque_CCMovDia1 = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150997)

    End Select

    Exit Function

End Function

Public Function CCMov_Grava(ByVal objCCMovDia As ClassCCMovDia) As Long
'Função que recebe um obj de movimento consolidado diário e atualiza( soma ) o anual no mes em questão
'Deve ser chamada dentro de transação

Dim lErro As Long
Dim alComando(2) As Long
Dim iIndice As Integer
Dim iCodCaixa As Integer
Dim dCredito As Double
Dim dDebito As Double
Dim dSomaCreditos As Double
Dim dSomaDebitos As Double
Dim iAno As Integer
Dim sMes As String
Dim objCCMovAntigo As New ClassCCMov
Dim dSaldoInicial As Double
Dim sComando As String

On Error GoTo Erro_CCMov_Grava

    For iIndice = LBound(alComando) To UBound(alComando)

        'Executa a abertura dos Comandos
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 103718

    Next

    'extrai o ano da data a ser pesquisada
    iAno = Year(objCCMovDia.dtData)
    sMes = Format(Month(objCCMovDia.dtData), "00")

    'busca o movimento a ser alterado
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Cred" & sMes & ", Deb" & sMes & " FROM CCMov WHERE CodCaixa = ? AND FilialEmpresa = ? AND Ano = ? AND TipoMeioPagto = ? AND AdmMeioPagto = ? AND Parcelamento = ?", 0, _
    dCredito, dDebito, objCCMovDia.iCodCaixa, objCCMovDia.iFilialEmpresa, iAno, objCCMovDia.iTipoMeioPagto, objCCMovDia.iAdmMeioPagto, objCCMovDia.iParcelamento)
    If lErro <> AD_SQL_SUCESSO Then gError 103719

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 103720

    'Se nao existir inserir
    If lErro = AD_SQL_SEM_DADOS Then
        'preenche o objCCMovAntigo com dados para a busca de um movimento do ano anterior
        With objCCMovAntigo

            .iAdmMeioPagto = objCCMovDia.iAdmMeioPagto
            .iAno = iAno - 1
            .iCodCaixa = objCCMovDia.iCodCaixa
            .iParcelamento = objCCMovDia.iParcelamento
            .iFilialEmpresa = objCCMovDia.iFilialEmpresa
            .iTipoMeioPagto = objCCMovDia.iTipoMeioPagto

        End With

        'busca o objCCMovAntigo
        lErro = CF("CCMov_Le", objCCMovAntigo)
        If lErro <> SUCESSO And lErro <> 103733 Then gError 103734

        'se encontrou
        If lErro = SUCESSO Then

            'calcula saldo inicial com base no ano anterior
            With objCCMovAntigo
                dSomaCreditos = .dCred01 + .dCred02 + .dCred03 + .dCred04 + .dCred05 + .dCred06 + .dCred07 + .dCred08 + .dCred09 + .dCred10 + .dCred11 + .dCred12
                dSomaDebitos = .dDeb01 + .dDeb02 + .dDeb03 + .dDeb04 + .dDeb05 + .dDeb06 + .dDeb07 + .dDeb08 + .dDeb09 + .dDeb10 + .dDeb11 + .dDeb12
                dSaldoInicial = .dSaldoInicial + dSomaCreditos - dSomaDebitos
            End With

        Else

            'se não encontrou movimento anterior, o saldo inicial é zerado
            dSaldoInicial = 0

        End If

        'insere na tabela de movimento
        sComando = "INSERT INTO CCMov (CodCaixa,FilialEmpresa,Ano, TipoMeioPagto, AdmMeioPagto,Parcelamento,SaldoInicial,Cred" & sMes & ",Deb" & sMes & ") VALUES(?,?,?,?,?,?,?,?,?)"
        lErro = Comando_Executar(alComando(2), sComando, objCCMovDia.iCodCaixa, objCCMovDia.iFilialEmpresa, iAno, objCCMovDia.iTipoMeioPagto, objCCMovDia.iAdmMeioPagto, objCCMovDia.iParcelamento, dSaldoInicial, objCCMovDia.dCred, objCCMovDia.dDeb)
        If lErro <> AD_SQL_SUCESSO Then gError 103723

    Else

        'calcula os novos creditos e debitos
        dCredito = dCredito + objCCMovDia.dCred
        dDebito = dDebito + objCCMovDia.dDeb

        'atualiza a tabela com o débito e o crédito consolidados atualizados
        lErro = Comando_ExecutarPos(alComando(1), "UPDATE CCMov SET Cred" & sMes & " = ?, Deb" & sMes & " = ?", alComando(0), dCredito, dDebito)
        If lErro <> AD_SQL_SUCESSO Then gError 103722

    End If

    For iIndice = LBound(alComando) To UBound(alComando)

        'Executa o fechamenro dos Comandos
        Call Comando_Fechar(alComando(iIndice))

    Next

    CCMov_Grava = SUCESSO

    Exit Function

Erro_CCMov_Grava:

    CCMov_Grava = gErr

    Select Case gErr

        Case 103718
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 103719, 103720
            Call Rotina_Erro(vbOKOnly, "ERRO_CCMOV_LEITURA", gErr)

        Case 103722
            Call Rotina_Erro(vbOKOnly, "ERRO_CCMOV_ALTERACAO", gErr, objCCMovDia.iCodCaixa, objCCMovDia.iFilialEmpresa, iAno)

        Case 103723
            Call Rotina_Erro(vbOKOnly, "ERRO_CCMOV_INCLUSAO", gErr, objCCMovDia.iCodCaixa, objCCMovDia.iFilialEmpresa, iAno)
        
        Case 103734

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150998)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)

        'Executa o fechamenro dos Comandos
        Call Comando_Fechar(alComando(iIndice))

    Next

    Exit Function

End Function

Public Function CCMovDia_Grava(ByVal objCCMovDia As ClassCCMovDia) As Long
'Função que recebe um objCCMovDia preenchido e atualiza( soma ) o consolidado diário da tabela de movimento diário
'Deve ser chamada dentro de transação

Dim lErro As Long

Dim alComando(2) As Long
Dim iIndice As Integer
Dim iCodCaixa As Integer
Dim dCredito As Double
Dim dDebito As Double

On Error GoTo Erro_CCMovDia_Grava

    For iIndice = LBound(alComando) To UBound(alComando)

        'Executa a abertura dos Comandos
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 103713

    Next

    'busca o movimento a ser alterado
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Cred, Deb FROM CCMovDia WHERE CodCaixa = ? AND FilialEmpresa = ? AND Data = ? AND TipoMeioPagto = ? AND AdmMeioPagto = ? AND Parcelamento = ?", 0, _
    dCredito, dDebito, objCCMovDia.iCodCaixa, objCCMovDia.iFilialEmpresa, objCCMovDia.dtData, objCCMovDia.iTipoMeioPagto, objCCMovDia.iAdmMeioPagto, objCCMovDia.iParcelamento)
    If lErro <> AD_SQL_SUCESSO Then gError 103714

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 103715

    'se não existir, insere
    If lErro = AD_SQL_SEM_DADOS Then

        lErro = Comando_Executar(alComando(2), "INSERT INTO CCMovDia (CodCaixa, FilialEmpresa, Data, TipoMeioPagto, AdmMeioPagto, Parcelamento, Cred, Deb) VALUES (?,?,?,?,?,?,?,?)", objCCMovDia.iCodCaixa, objCCMovDia.iFilialEmpresa, objCCMovDia.dtData, objCCMovDia.iTipoMeioPagto, objCCMovDia.iAdmMeioPagto, objCCMovDia.iParcelamento, objCCMovDia.dCred, objCCMovDia.dDeb)
        If lErro <> AD_SQL_SUCESSO Then gError 103716

    Else


        'calcula os novos creditos e debitos
        dCredito = dCredito + objCCMovDia.dCred
        dDebito = dDebito + objCCMovDia.dDeb

        'atualiza o saldo da tabela com os novos valores calculados
        lErro = Comando_ExecutarPos(alComando(1), "UPDATE CCMovDia SET Cred = ?, Deb = ?", alComando(0), dCredito, dDebito)
        If lErro <> AD_SQL_SUCESSO Then gError 103717

    End If

    For iIndice = LBound(alComando) To UBound(alComando)

        'Executa o fechamenro dos Comandos
        Call Comando_Fechar(alComando(iIndice))

    Next

    CCMovDia_Grava = SUCESSO

    Exit Function

Erro_CCMovDia_Grava:

    CCMovDia_Grava = gErr

    Select Case gErr

        Case 103713
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 103714, 103715
            Call Rotina_Erro(vbOKOnly, "ERRO_CCMOVDIA_LEITURA", gErr)

        Case 103716
            Call Rotina_Erro(vbOKOnly, "ERRO_CCMOVDIA_INCLUSAO", gErr, objCCMovDia.iCodCaixa, objCCMovDia.iFilialEmpresa, objCCMovDia.dtData)

        Case 103717
            Call Rotina_Erro(vbOKOnly, "ERRO_CCMOVDIA_ALTERACAO", gErr, objCCMovDia.iCodCaixa, objCCMovDia.iFilialEmpresa, objCCMovDia.dtData)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150999)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)

        'Executa o fechamenro dos Comandos
        Call Comando_Fechar(alComando(iIndice))

    Next

    Exit Function

End Function

Public Function CCMov_Exclui(ByVal objCCMovDia As ClassCCMovDia) As Long
'Funcao que recebe um objCCMovDia e atualiza (subtrai) a tabela de consolidado anual
'deve ser chamada dentro de transação

Dim lErro As Long
Dim alComando(1) As Long
Dim iIndice As Integer
Dim iCodCaixa As Integer
Dim dCredito As Double
Dim dDebito As Double
Dim iAno As Integer
Dim sMes As String

On Error GoTo Erro_CCMov_Exclui

    For iIndice = LBound(alComando) To UBound(alComando)

        'Executa a abertura dos Comandos
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 103708

    Next

    'extrai o ano da data a ser pesquisada
    iAno = Year(objCCMovDia.dtData)
    sMes = Format(Month(objCCMovDia.dtData), "00")

    'busca o movimento a ser alterado
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Cred" & sMes & ", Deb" & sMes & " FROM CCMov WHERE CodCaixa = ? AND FilialEmpresa = ? AND Ano = ? AND TipoMeioPagto = ? AND AdmMeioPagto = ? AND Parcelamento = ?", 0, _
    dCredito, dDebito, objCCMovDia.iCodCaixa, objCCMovDia.iFilialEmpresa, iAno, objCCMovDia.iTipoMeioPagto, objCCMovDia.iAdmMeioPagto, objCCMovDia.iParcelamento)
    If lErro <> AD_SQL_SUCESSO Then gError 103709

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 103710

    If lErro = AD_SQL_SEM_DADOS Then gError 103711

    'calcula os novos creditos e debitos
    dCredito = dCredito - objCCMovDia.dCred
    dDebito = dDebito - objCCMovDia.dDeb

    'atualiza a tabela de movimento anual nas colunas do mês em questão
    lErro = Comando_ExecutarPos(alComando(1), "UPDATE CCMov SET Cred" & sMes & " = ?, Deb" & sMes & " = ?", alComando(0), dCredito, dDebito)
    If lErro <> AD_SQL_SUCESSO Then gError 103712

    For iIndice = LBound(alComando) To UBound(alComando)

        'Executa o fechamenro dos Comandos
        Call Comando_Fechar(alComando(iIndice))

    Next

    CCMov_Exclui = SUCESSO

    Exit Function

Erro_CCMov_Exclui:

    CCMov_Exclui = gErr

    Select Case gErr

        Case 103708
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 103709, 103710
            Call Rotina_Erro(vbOKOnly, "ERRO_CCMOV_LEITURA", gErr)

        Case 103711
            Call Rotina_Erro(vbOKOnly, "ERRO_CCMOV_NAOENCONTRADO", gErr, objCCMovDia.iCodCaixa, objCCMovDia.iFilialEmpresa, iAno)

        Case 103712
            Call Rotina_Erro(vbOKOnly, "ERRO_CCMOV_ALTERACAO", gErr, objCCMovDia.iCodCaixa, objCCMovDia.iFilialEmpresa, iAno)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151000)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)

        'Executa o fechamenro dos Comandos
        Call Comando_Fechar(alComando(iIndice))

    Next

    Exit Function

End Function

Public Function CCMovDia_Exclui(ByVal objCCMovDia As ClassCCMovDia) As Long
'Função que recebe um Movimento Diário consolidado preenchido e atualiza(soma) a tabela de CCMovDia
'deve ser chamada dentro de transação

Dim lErro As Long

Dim alComando(1) As Long
Dim iIndice As Integer
Dim iCodCaixa As Integer
Dim dCredito As Double
Dim dDebito As Double

On Error GoTo Erro_CCMovDia_Exclui

    For iIndice = LBound(alComando) To UBound(alComando)

        'Executa a abertura dos Comandos
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 103703

    Next

    'busca o movimento a ser alterado
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Cred, Deb FROM CCMovDia WHERE CodCaixa = ? AND FilialEmpresa = ? AND Data = ? AND TipoMeioPagto = ? AND AdmMeioPagto = ? AND Parcelamento = ?", 0, _
    dCredito, dDebito, objCCMovDia.iCodCaixa, objCCMovDia.iFilialEmpresa, objCCMovDia.dtData, objCCMovDia.iTipoMeioPagto, objCCMovDia.iAdmMeioPagto, objCCMovDia.iParcelamento)
    If lErro <> AD_SQL_SUCESSO Then gError 103704

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 103705

    If lErro = AD_SQL_SEM_DADOS Then gError 103706

    'calcula os novos creditos e debitos
    dCredito = dCredito - objCCMovDia.dCred
    dDebito = dDebito - objCCMovDia.dDeb

    lErro = Comando_ExecutarPos(alComando(1), "UPDATE CCMovDia SET Cred = ?, Deb = ?", alComando(0), dCredito, dDebito)
    If lErro <> AD_SQL_SUCESSO Then gError 103707

    For iIndice = LBound(alComando) To UBound(alComando)

        'Executa o fechamenro dos Comandos
        Call Comando_Fechar(alComando(iIndice))

    Next

    CCMovDia_Exclui = SUCESSO

    Exit Function

Erro_CCMovDia_Exclui:

    CCMovDia_Exclui = gErr

    Select Case gErr
    
        Case 103703
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 103704, 103705
            Call Rotina_Erro(vbOKOnly, "ERRO_CCMOVDIA_LEITURA", gErr)

        Case 103706
            Call Rotina_Erro(vbOKOnly, "ERRO_CCMOVDIA_NAOENCONTRADO", gErr, objCCMovDia.iCodCaixa, objCCMovDia.iFilialEmpresa, objCCMovDia.dtData)

        Case 103707
            Call Rotina_Erro(vbOKOnly, "ERRO_CCMOVDIA_ALTERACAO", gErr, objCCMovDia.iCodCaixa, objCCMovDia.iFilialEmpresa, objCCMovDia.dtData)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151001)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)

        'Executa o fechamenro dos Comandos
        Call Comando_Fechar(alComando(iIndice))

    Next

    Exit Function

End Function

Public Function TipoMeioPagtoLojaFilial_AlteraSaldo(ByVal objTipoMeioPagtoLojaFilial As ClassTMPLojaFilial, Optional ByVal iTesteSaldo As Integer = 0) As Long
'Função que recebe um objtipomeiopagto com o valor a ser atualizado na tabela de objtipomeiopagto e atualiza lá o seu saldo
'Precisa ser chamada dentro de transação

Dim lErro As Long
Dim alComando(1) As Long
Dim iTipo As Integer
Dim iIndice As Integer
Dim dSaldo As Double

On Error GoTo Erro_TipoMeioPagtoLojaFilial_AlteraSaldo

    'abre comando
    For iIndice = LBound(alComando) To UBound(alComando)

        alComando(iIndice) = Comando_Abrir
        If alComando(iIndice) = 0 Then gError 103696

    Next

    'seleciona a tupla que contém o tipo de meio de pagamento de dinheiro
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Tipo,Saldo FROM TipoMeioPagtoLojaFilial WHERE Tipo = ? AND FilialEmpresa = ? ", 0, iTipo, dSaldo, objTipoMeioPagtoLojaFilial.iTipo, objTipoMeioPagtoLojaFilial.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 103697

    'busca o primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 103698

    If iTesteSaldo = FAZ_TESTE_SALDO Then
        If dSaldo + objTipoMeioPagtoLojaFilial.dSaldo < 0 Then gError 105337
    End If

    If lErro = AD_SQL_SEM_DADOS Then
        lErro = Comando_Executar(alComando(1), "INSERT INTO TipoMeioPagtoLojaFilial (FilialEmpresa, Tipo, Saldo) VALUES (?, ?, ?)", objTipoMeioPagtoLojaFilial.iFilialEmpresa, objTipoMeioPagtoLojaFilial.iTipo, objTipoMeioPagtoLojaFilial.dSaldo)
        If lErro <> AD_SQL_SUCESSO Then gError 103699
    Else
    
        'aualiza o saldo atual com o valor anterior mais o novo
        lErro = Comando_ExecutarPos(alComando(1), "UPDATE TipoMeiopagtoLojaFilial SET Saldo = Saldo + ?", alComando(0), objTipoMeioPagtoLojaFilial.dSaldo)
        If lErro <> AD_SQL_SUCESSO Then gError 103700
    End If
    
    For iIndice = LBound(alComando) To UBound(alComando)

        Call Comando_Fechar(alComando(iIndice))

    Next

    TipoMeioPagtoLojaFilial_AlteraSaldo = SUCESSO

    Exit Function

Erro_TipoMeioPagtoLojaFilial_AlteraSaldo:

    TipoMeioPagtoLojaFilial_AlteraSaldo = gErr

    Select Case gErr
        
        Case 103696
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 103697, 103698
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPOMEIOPAGTOLOJA_LEITURA", gErr)

        Case 103699
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_TIPOMEIOPAGTOFILIAL", gErr, objTipoMeioPagtoLojaFilial.iTipo, objTipoMeioPagtoLojaFilial.iFilialEmpresa)

        Case 103700
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_TIPOMEIOPAGTOLOJAFILIAL", gErr, objTipoMeioPagtoLojaFilial.iTipo, objTipoMeioPagtoLojaFilial.iFilialEmpresa)

        Case 105337
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPOMEIOPAGTOLOJA_SALDO_SEMSALDO", gErr, objTipoMeioPagtoLojaFilial.iTipo, dSaldo)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151002)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)

        Call Comando_Fechar(alComando(iIndice))

    Next

    Exit Function

End Function

Public Function Movimentos_Caixa_Grava_Saque(objMovimentoCaixa As ClassMovimentoCaixa) As Long
'Função que recebe um objMovimentoCaixa preenchido e grava o mesmo na tabela de movimentos de caixa

Dim lTransacao As Long
Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim objLog As New ClassLog
Dim objCaixa As New ClassCaixa
Dim objTipoMeioPagtoLojaFilial As New ClassTMPLojaFilial
Dim objCCMovDia As New ClassCCMovDia
Dim tMovimentoCaixa As typeMovimentoCaixa
Dim iTipo As Integer
Dim iFilialEmpresa As Integer
Dim objTipoMeioPagtoLoja As New ClassTMPLojaFilial

On Error GoTo Erro_Movimentos_Caixa_Grava_Saque

    'abre a transacao
    lTransacao = Transacao_Abrir
    If lTransacao = 0 Then gError 103680
    
    For iIndice = LBound(alComando) To UBound(alComando)
    
        alComando(iIndice) = Comando_Abrir
        If alComando(iIndice) = 0 Then gError 103681
    
    Next
    
    'preenche os campos chave para buscar o caixa para posterior lock
    objCaixa.iCodigo = objMovimentoCaixa.iCaixa
    objCaixa.iFilialEmpresa = objMovimentoCaixa.iFilialEmpresa
    
    'faz um lock no caixa
    lErro = CF("Caixa_Lock", objCaixa)
    If lErro <> SUCESSO And lErro <> 103776 Then gError 103682
    If lErro = 103776 Then gError 103778

    'verifica se a data é menor que a data inicial do caixa central na tabela caixa. Se for-> erro
    If StrParaDate(objMovimentoCaixa.dtDataMovimento) < objCaixa.dtDataInicial Then gError 103679
    
    'preenche o tipo meio pagamento comm pagamento dinheiro
    objTipoMeioPagtoLoja.iTipo = MEIO_PAGAMENTO_DINHEIRO
    objTipoMeioPagtoLoja.iFilialEmpresa = objMovimentoCaixa.iFilialEmpresa
    
    'le o saldo atualizado da tabela
    lErro = CF("TipoMeioPagtoLojaFilial_Le", objTipoMeioPagtoLoja)
    If lErro <> SUCESSO Then gError 117558
    
    'inicializa as strings
    tMovimentoCaixa.sHistorico = String(STRING_MOVIMENTOCAIXA_HISTORICO, 0)
    tMovimentoCaixa.sFavorecido = String(STRING_MOVIMENTOCAIXA_FAVORECIDO, 0)
    
    'verifica se já existe movimento cadastrado para o caixa
    'faz o select na tabela
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Caixa, Sequencial,FilialEmpresa, NumMovto, Tipo , AdmMeioPagto , Parcelamento, TipoCartao, Numero, DataMovimento, Valor, Historico, Favorecido,CupomFiscal,NumRefInterna,MovtoTransf,MovtoEstorno,Gerente FROM MovimentosCaixa WHERE Caixa = ? AND Sequencial = ?", 0, _
    tMovimentoCaixa.iCaixa, tMovimentoCaixa.lSequencial, tMovimentoCaixa.iFilialEmpresa, tMovimentoCaixa.lNumMovto, tMovimentoCaixa.iTipo, tMovimentoCaixa.iAdmMeioPagto, tMovimentoCaixa.iParcelamento, tMovimentoCaixa.iTipoCartao, tMovimentoCaixa.lNumero, tMovimentoCaixa.dtDataMovimento, tMovimentoCaixa.dValor, tMovimentoCaixa.sHistorico, tMovimentoCaixa.sFavorecido, tMovimentoCaixa.lCupomFiscal, tMovimentoCaixa.lNumRefInterna, tMovimentoCaixa.lMovtoTransf, tMovimentoCaixa.lMovtoEstorno, tMovimentoCaixa.iGerente, objMovimentoCaixa.iCaixa, objMovimentoCaixa.lSequencial)
    If lErro <> SUCESSO Then gError 103684

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 103685

    'se o movimento estiver cadastrado
    If lErro = SUCESSO Then
    
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> SUCESSO Then gError 107054

        'se o movimento não for de saque--> erro
        If tMovimentoCaixa.iTipo <> MOVIMENTO_CAIXA_SAQUE Then gError 103686

        'carrega um movimento diário para atualização de tabela consolidado diário
        'com os dados da tabela de movimento caixa
        lErro = Mover_Dados_Saque_CCMovDia1(tMovimentoCaixa, objCCMovDia)
        If lErro <> SUCESSO Then gError 103687

        'subtrai o movimento em questão do consolidado diário (trata-se de uma atualização de um movimento)
        lErro = CF("CCMovDia_Exclui", objCCMovDia)
        If lErro <> SUCESSO Then gError 103688

        'subtrai o movimento em questão do consolidado anual no mês atual
        lErro = CF("CCMov_Exclui", objCCMovDia)
        If lErro <> SUCESSO Then gError 103689

        'Alterar os dados da Tabela MovimentosCaixa
        lErro = Comando_ExecutarPos(alComando(1), "UPDATE MovimentosCaixa SET DataMovimento = ?, Valor =? , Favorecido = ? , Historico = ?", alComando(0), objMovimentoCaixa.dtDataMovimento, objMovimentoCaixa.dValor, objMovimentoCaixa.sFavorecido, objMovimentoCaixa.sHistorico)
        If lErro <> SUCESSO Then gError 103690

        'carrega um tipomeiopagtoloja com o movimento excluído para posterior alteração do saldo na tabela de tipomeiopagtoloja
        objTipoMeioPagtoLojaFilial.dSaldo = tMovimentoCaixa.dValor

        'diz o tipo da operação a ser logada
        objLog.iOperacao = ALTERACAO_SAQUE_CAIXA_CENTRAL

    'caso o movimento ainda não exista
    Else

        lErro = MovimentosCaixa_Inserir(objMovimentoCaixa)
        If lErro <> SUCESSO Then gError 103860
        
        'diz o tipo de operação a ser logada
        objLog.iOperacao = INCLUSAO_SAQUE_CAIXA_CENTRAL

    End If

    'preenche um objccmovdia com os dados do movimento de caixa
    lErro = CF("Mover_Dados_Saque_CCMovDia", objMovimentoCaixa, objCCMovDia)
    If lErro <> SUCESSO Then gError 103692

    objCCMovDia.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_DINHEIRO
    
    'adiciona o mesmo no consolidado diário
    lErro = CF("CCMovDia_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 103693

    'adiciona o mesmo no consolidado anual no mês em questão
    lErro = CF("CCMov_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 103694

    'subtrair o valor do movimento de caixa novo em objtipomeiopagtoloja.saldo
    objTipoMeioPagtoLojaFilial.dSaldo = objTipoMeioPagtoLojaFilial.dSaldo - objMovimentoCaixa.dValor

    If objTipoMeioPagtoLoja.dSaldo + objTipoMeioPagtoLojaFilial.dSaldo < 0 Then gError 117559

    'mover Meio_pagamento_Dineiro para objtipomeiopagtoloja.itipo
    objTipoMeioPagtoLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_DINHEIRO
    objTipoMeioPagtoLojaFilial.iFilialEmpresa = objMovimentoCaixa.iFilialEmpresa

    'altera o saldo atual na tabela de tipomeiopagtoloja
    lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTipoMeioPagtoLojaFilial)
    If lErro <> SUCESSO Then gError 103695
    
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
    
        'preenche o objLog com o movimento do caixa
        Call Mover_Dados_Saque_Log(objMovimentoCaixa, objLog)
        
        'grava o log
        lErro = CF("Log_Grava", objLog)
        If lErro <> SUCESSO Then gError 103697
    End If
    
    For iIndice = LBound(alComando) To UBound(alComando)
    
        Call Comando_Fechar(alComando(iIndice))
    
    Next

    lErro = Transacao_Commit
    If lErro <> SUCESSO Then gError 103698

    Movimentos_Caixa_Grava_Saque = SUCESSO
    
    Exit Function

Erro_Movimentos_Caixa_Grava_Saque:

    Movimentos_Caixa_Grava_Saque = gErr

    Select Case gErr
    
        Case 103679
            Call Rotina_Erro(vbOKOnly, "ERRO_DATAMOVIMENTOCAIXA_MAIOR_DATAINICIALCAIXA", gErr, objCaixa.dtDataInicial)
        
        Case 103680
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 103681
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 103682, 103692 To 103695, 103697, 103860, 103687 To 103689, 117558
        
        Case 103690
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_ALTERACAO", gErr, STRING_CAIXA_CENTRAL, objMovimentoCaixa.lSequencial)

        Case 103684, 103685
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_LEITURA", gErr)

        Case 103686
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPO_MOVIMENTO_NAO_SAQUE", gErr, STRING_CAIXA_CENTRAL, objMovimentoCaixa.lSequencial)
        
        Case 103698
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case 103778
            Call Rotina_Erro(vbOKOnly, "ERRO_CAIXA_NAOENCONTRADO", gErr, STRING_CAIXA_CENTRAL)
            
        Case 107054
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_LOCK", gErr, STRING_CAIXA_CENTRAL, objMovimentoCaixa.lSequencial)

        Case 117559
            Call Rotina_Erro(vbOKOnly, "ERRO_NAO_HA_SALDO_DISPONIVEL", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151003)
            
    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
    
        Call Comando_Fechar(alComando(iIndice))
    
    Next

    Call Transacao_Rollback

    Exit Function

End Function

Public Function MovimentosCaixa_Exclui_EmTrans(ByVal objMovimentoCaixa As ClassMovimentoCaixa, ByVal objLog As ClassLog, ByVal objCCMovDia As ClassCCMovDia) As Long

Dim alComando(1) As Long
Dim iIndice As Integer
Dim iCaixa As Integer
Dim lSequencial As Long
Dim objTipoMeioPagtoLojaFilial As New ClassTMPLojaFilial
Dim lErro As Long
Dim objMovContaCorrente As New ClassMovContaCorrente
Dim lNumRefInterna As Long
Dim iTipoMovcx As Integer

On Error GoTo Erro_MovimentosCaixa_Exclui_EmTrans

    For iIndice = LBound(alComando) To UBound(alComando)

        alComando(iIndice) = Comando_Abrir
        If alComando(iIndice) = 0 Then gError 103746

    Next

    'seleciona na tabela de movimentos de caixa se existe o movimento com sequencial passado por parâmetro
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Tipo, NumRefInterna, Sequencial , Caixa FROM MovimentosCaixa WHERE Sequencial = ? AND Caixa = ?", 0, _
    iTipoMovcx, lNumRefInterna, lSequencial, iCaixa, objMovimentoCaixa.lSequencial, objMovimentoCaixa.iCaixa)
    If lErro <> AD_SQL_SUCESSO Then gError 103747

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 103748

    'se não existir, erro
    If lErro = AD_SQL_SEM_DADOS Then gError 103749

    'locka o movimento a ser excluído
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 103750

    'deleta da tabela de movimentos de caixa
    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM MovimentosCaixa", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 103751

    'chama a função que subtrai o débito excluído do consolidado diário de débitos
    lErro = CF("CCMovDia_Exclui", objCCMovDia)
    If lErro <> SUCESSO Then gError 103752

    'chama a função que subtrai o débito excluído do consolidado mensal de débitos
    lErro = CF("CCMov_Exclui", objCCMovDia)
    If lErro <> SUCESSO Then gError 103753

    'carrega o tipomeiopagtoloja com o valor a ser subtraído do campo saldo e o meio de pagamento dinheiro
    objTipoMeioPagtoLojaFilial.dSaldo = objMovimentoCaixa.dValor
    objTipoMeioPagtoLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_DINHEIRO
    objTipoMeioPagtoLojaFilial.iFilialEmpresa = objMovimentoCaixa.iFilialEmpresa
    
    'chama a função que altera o saldo da loja na tabela de tipomeiopagtoloja
    lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTipoMeioPagtoLojaFilial)
    If lErro <> SUCESSO Then gError 103754
    
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
    
        'grava o log
        lErro = CF("Log_Grava", objLog)
        If lErro <> SUCESSO Then gError 103755
        
    End If
    
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL_BACKOFFICE And iTipoMovcx = MOVIMENTO_CAIXA_DEPOSITO_BANCARIO Then
    
        objMovContaCorrente.lNumMovto = lNumRefInterna
        objMovContaCorrente.iTipo = MOVCCI_DEP_DIN_LOJA
    
        lErro = CF("Back_MovCCI_Exclui_Deposito", objMovContaCorrente)
        If lErro <> SUCESSO Then gError 117555
    
    End If
    
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    MovimentosCaixa_Exclui_EmTrans = SUCESSO
    
    Exit Function
    
Erro_MovimentosCaixa_Exclui_EmTrans:
    
    MovimentosCaixa_Exclui_EmTrans = gErr
    
    Select Case gErr

        Case 103746
             Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 103747, 103748
             Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_LEITURA", gErr, STRING_CAIXA_CENTRAL, objMovimentoCaixa.lSequencial)

        Case 103749
             Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_NAOENCONTRADO", gErr, STRING_CAIXA_CENTRAL, objMovimentoCaixa.lSequencial)

        Case 103750
             Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_LOCK", gErr, STRING_CAIXA_CENTRAL, objMovimentoCaixa.lSequencial)

        Case 103751
             Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_EXCLUSAO", gErr, STRING_CAIXA_CENTRAL, objMovimentoCaixa.lSequencial)

        Case 103752 To 103755, 117555, 117562

        Case 117563
            Call Rotina_Erro(vbOKOnly, "ERRO_NAO_HA_SALDO_DISPONIVEL", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151004)
            
    End Select
            
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Public Function MovimentosCaixa_Exclui(ByVal objMovimentoCaixa As ClassMovimentoCaixa, ByVal objLog As ClassLog, ByVal objCCMovDia As ClassCCMovDia) As Long
'exclui um Movimento de Caixa e atualiza o consolidado diário e o mensal, fazendo a subtração do atual no anterior, gravando no log

Dim lTransacao As Long
Dim lErro As Long

On Error GoTo Erro_MovimentosCaixa_Exclui

    'abre a transação e os comandos
    lTransacao = Transacao_Abrir
    If lTransacao = 0 Then gError 103745
    
    'chama a função que exclui um movimento de caixa em transação
    lErro = CF("MovimentosCaixa_Exclui_EmTrans", objMovimentoCaixa, objLog, objCCMovDia)
    If lErro <> SUCESSO Then gError 113717

    'confirma a operação
    lErro = Transacao_Commit
    If lErro <> AD_SQL_SUCESSO Then gError 103756

    MovimentosCaixa_Exclui = SUCESSO

    Exit Function

Erro_MovimentosCaixa_Exclui:

    MovimentosCaixa_Exclui = gErr

    Select Case gErr

        Case 103745
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 103756
             Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr, STRING_CAIXA_CENTRAL, objMovimentoCaixa.lSequencial)
             
        Case 113717

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151005)

    End Select

    Call Transacao_Rollback

    Exit Function

End Function

Public Function Caixa_Sequencial_Transacao(ByVal iCaixa As Integer, ByVal iFilialEmpresa As Integer, lSequencial As Long) As Long
'Abre a transacao para que seja gerado o sequencial automatico

Dim lErro As Long
Dim lTransacao As Long
Dim lSequencial1 As Long

On Error GoTo Erro_Caixa_Sequencial_Transacao

    'abre uma transacao
    lTransacao = Transacao_Abrir
    If lTransacao = 0 Then gError 103760
    
    'chama a funcao que gerará o próximo seqüencial para o caixa
    lErro = Caixa_Sequencial_Automatico(iCaixa, iFilialEmpresa, lSequencial)
    If lErro <> SUCESSO Then gError 103761
    
    'confirma a transacao
    lErro = Transacao_Commit
    If lErro <> AD_SQL_SUCESSO Then gError 103762
    
    Caixa_Sequencial_Transacao = SUCESSO
    
    Exit Function

Erro_Caixa_Sequencial_Transacao:

    Caixa_Sequencial_Transacao = gErr
    
    Select Case gErr

        Case 103760
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 103761

        Case 103762
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151006)

    End Select

    Call Transacao_Rollback

    Exit Function
    
End Function

Public Function Caixa_Sequencial_EmTrans(ByVal iCaixa As Integer, ByVal iFilialEmpresa As Integer, lSequencial As Long) As Long
'gera o seq automatico dentro de trans

Dim lErro As Long

On Error GoTo Erro_Caixa_Sequencial_EmTrans

    'chama a funcao que gerará o próximo seqüencial para o caixa
    lErro = Caixa_Sequencial_Automatico(iCaixa, iFilialEmpresa, lSequencial)
    If lErro <> SUCESSO Then gError 111601
    
    Caixa_Sequencial_EmTrans = SUCESSO
    
    Exit Function

Erro_Caixa_Sequencial_EmTrans:

    Caixa_Sequencial_EmTrans = gErr
    
    Select Case gErr

        Case 111601

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151007)

    End Select

    Call Transacao_Rollback

    Exit Function
    
End Function

Public Function Caixa_Sequencial_Automatico(ByVal iCaixa As Integer, ByVal iFilialEmpresa As Integer, lSequencial As Long) As Long
'Função que recebe um determinado caixa de uma determinada filial e retorna o próximo número do sequencial de operações deste caixa
'Deve ser chamada dentro de transação

Dim lErro As Long
Dim alComando(2) As Long
Dim lSequencial1 As Long
Dim iIndice As Integer

On Error GoTo Erro_Caixa_Sequencial_Automatico

    'Abre Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
    
        alComando(iIndice) = Comando_Abrir
        If alComando(iIndice) = 0 Then gError 103763
    
    Next
    
    'seleciona na tabela de caixas o proximo sequencial disponivel para o caixa em questao
    lErro = Comando_ExecutarPos(alComando(0), "SELECT ProxSeqMov FROM Caixa WHERE Codigo = ? and FilialEmpresa = ?", 0, lSequencial, iCaixa, iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 103764
    
    'busca o primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 103765
    
    'locka o sequencial
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 103766
    
    'pesquisa se já foi usado em outro movimento no caixa em questao
    lErro = Comando_Executar(alComando(1), "SELECT Sequencial FROM MovimentosCaixa where Caixa = ? and Sequencial >= ? ORDER BY Sequencial", lSequencial1, iCaixa, lSequencial)
    If lErro <> AD_SQL_SUCESSO Then gError 103767
    
    'busca o primeiro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 103768
    
    'enquanto não termina a seleção da tabela, incrementa o lSequencial até encontrar um maior
    'que o espaço de dados englobado pelo select anterior
    Do While lErro <> AD_SQL_SEM_DADOS

        'se o sequencial da tabela for maior que o sequencial buscado, pára o loop
        If lSequencial1 > lSequencial Then

            Exit Do

        Else

            'caso contrário, incrementa o sequencial a ser utilizado
            lSequencial = lSequencial + 1

            'e busca o proximo sequencial da tabela
            lErro = Comando_BuscarProximo(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 103770

        End If

    Loop
    
    'atualiza a tabela de caixa com o sequencial que serviu para a situação
    lErro = Comando_ExecutarPos(alComando(2), "UPDATE Caixa SET ProxSeqMov = ?", alComando(0), lSequencial + 1)
    If lErro <> AD_SQL_SUCESSO Then gError 103771
    
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
    
        Call Comando_Fechar(alComando(iIndice))
        
    Next
    
    Caixa_Sequencial_Automatico = SUCESSO
    
    Exit Function
    
Erro_Caixa_Sequencial_Automatico:
    
    Caixa_Sequencial_Automatico = gErr
    
    Select Case gErr
    
        Case 103763
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
    
        Case 103764, 103765
            Call Rotina_Erro(vbOKOnly, "ERRO_CAIXA_LEITURA", gErr)
            
        Case 103766
            Call Rotina_Erro(vbOKOnly, "ERRO_CAIXA_LOCK", gErr, iCaixa, iFilialEmpresa)
            
        Case 103767, 103768, 103770
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_LEITURA", gErr)
            
        Case 103771
            Call Rotina_Erro(vbOKOnly, "ERRO_CAIXA_ALTERACAO", gErr, iCaixa, iFilialEmpresa)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151008)

    End Select
    
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
    
        Call Comando_Fechar(alComando(iIndice))
        
    Next
    
    Exit Function

End Function

Function Gerente_Grava(ByVal objGerente As ClassGerente) As Long
'Grava o Gerente objGerente

Dim lErro As Long
Dim lTransacao As Long
Dim lComando As Long
Dim lComando2 As Long
Dim sCodUsuario As String
Dim sNomeReduzido As String

On Error GoTo Erro_Gerente_Grava

    'Abre a transação e comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 81109

    'abre comando para que seja consultado o dicdados
    lComando2 = Comando_AbrirExt(GL_lConexaoDic)
    If lComando2 = 0 Then gError 81111

    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 81112
    
    sCodUsuario = String(STRING_USUARIO_CODIGO, 0)
    sNomeReduzido = String(STRING_USUARIO_NOMEREDUZIDO, 0)

    'Seleciona o Gerente com o código passado
    lErro = Comando_ExecutarPos(lComando, "SELECT CodUsuario FROM Gerente WHERE Codigo= ?", 0, sCodUsuario, objGerente.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 81113

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 81114

    'Se nao encontrar
    If lErro <> AD_SQL_SUCESSO Then

        'Seleciona o usuario
        lErro = Comando_ExecutarLockado(lComando2, "SELECT CodUsuario,NomeReduzido FROM Usuarios WHERE CodUsuario=? ", sCodUsuario, sNomeReduzido, objGerente.sCodUsuario)
        If lErro <> AD_SQL_SUCESSO Then gError 81115

        lErro = Comando_BuscarPrimeiro(lComando2)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 81116
         
        objGerente.sNomeReduzido = sNomeReduzido

        lErro = Comando_LockShared(lComando2)
        If lErro <> AD_SQL_SUCESSO Then gError 81117

        lErro = Comando_Executar(lComando, "INSERT INTO Gerente (Codigo, CodUsuario, FilialEmpresa) VALUES (?, ?, ?)", objGerente.iCodigo, objGerente.sCodUsuario, objGerente.iFilialEmpresa)
        If lErro <> AD_SQL_SUCESSO Then gError 81118

    Else

        'Se encontrar

        'Verifica se o usuario foi alterado
        If sCodUsuario <> objGerente.sCodUsuario Then gError 81119

    End If

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 81110

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)

    Gerente_Grava = SUCESSO

    Exit Function

Erro_Gerente_Grava:

    Gerente_Grava = gErr

    Select Case gErr

        Case 81110
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case 81111, 81109 'Erro Abertura de comando
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 81112 'Erro abertura Transacao
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 81113, 81114 'Erro de leitura na tabela Gerente.
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_GERENTE", gErr, objGerente.iCodigo)

        Case 81115, 81116 'Erro de leitura na tabela Usuarios.
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_USUARIOS_DIC", gErr)

        Case 81117 'Erro na tentativa de fazer 'lock' na tabela Usuarios.
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_USUARIOS_DIC", gErr)

        Case 81118 'Erro na tentiva de inserir um registro na tabela gerente.
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_GERENTE", gErr)

        Case 81119
            lErro = Rotina_Erro(vbOKOnly, "ERRO_USUARIO_GERENTE_NAO_ALTERAVEL", gErr, objGerente.iCodigo)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151009)

    End Select

    Call Transacao_Rollback
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)

    Exit Function

End Function

Function Gerente_Exclui(ByVal objGerente As ClassGerente) As Long
'Exclui o Gerente da tabela

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim lTransacao As Long
Dim iCodigo As Integer
Dim iIndice As Integer

On Error GoTo Erro_Gerente_Exclui

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 81126
    Next

    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 81127

    'Seleciona o Gerente no bd
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Codigo FROM Gerente WHERE CodUsuario = ?", 0, iCodigo, objGerente.sCodUsuario)
    If lErro <> AD_SQL_SUCESSO Then gError 81128

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 81129

    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> SUCESSO Then gError 81130

    'Verifica se o Gerente possui relacionamentos com outras tabelas
    lErro = CF("Gerente_Existe_Relacionamento", objGerente)
    If lErro <> SUCESSO Then gError 81132

    'Exclui a Gerente do BD
    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM Gerente", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 81131

   'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 81133

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Gerente_Exclui = SUCESSO

    Exit Function

Erro_Gerente_Exclui:

    Gerente_Exclui = gErr

    Select Case gErr

        Case 81126
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 81127
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 81128, 81129
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_GERENTE1", gErr, objGerente.sCodUsuario)

        Case 81130
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_GERENTE", gErr)

        Case 81131
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_GERENTE", gErr, objGerente.sCodUsuario)

        Case 81132

        Case 81133
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151010)

    End Select

    Call Transacao_Rollback
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Caixa_Grava(ByVal objCaixa As ClassCaixa) As Long
'Atualiza ou insere um novo registro na tabela Caixa

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim lTransacao As Long
Dim sNome As String
Dim objPos As ClassPOS
Dim objLog As New ClassLog

On Error GoTo Erro_Caixa_Grava
    
    'Inicia os comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 79435

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 79436

    'inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 79437
    
    'Verifica se as condições necessárias para se gravar um caixa foram atendidas
    lErro = CF("Caixa_Valida_Gravacao", objCaixa)
    If lErro <> SUCESSO Then gError 79489
    
    'Inicializa a variável que receberá o NomeReduzido
    sNome = String(STRING_CAIXA_NOME_REDUZIDO, 0)
    
    'Alterado por cyntia para incluir FilialEmpresa como parâmetro
    'Verifica se já existe Caixa cadastrado com o código utilizado
    lErro = Comando_ExecutarPos(lComando, "SELECT NomeReduzido FROM Caixa WHERE Codigo = ? AND FilialEmpresa=?", 0, sNome, objCaixa.iCodigo, objCaixa.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 79441

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 79442

    'Se não encontrou
    If lErro = AD_SQL_SEM_DADOS Then
    
        'Então, insere um novo registro na tabela Caixa
        lErro = Comando_Executar(lComando1, "INSERT INTO Caixa (Codigo, FilialEmpresa, NomeReduzido, Descricao, Status, DataInicial, ProxSeqMov, POS, TEF, Teclado, Ativo, BoletoManual,DataLog, SoOrcamento) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)", objCaixa.iCodigo, objCaixa.iFilialEmpresa, objCaixa.sNomeReduzido, objCaixa.sDescricao, objCaixa.iStatus, objCaixa.dtDataInicial, objCaixa.lProxSeqMov, objCaixa.iPos, objCaixa.iTEF, objCaixa.iTeclado, objCaixa.iAtivo, objCaixa.iBoletoManual, DATA_NULA, objCaixa.iOrcamentoECF)
        If lErro <> AD_SQL_SUCESSO Then gError 79443

        'Passa p/ o objLog o tipo de operação a ser realizada.
        objLog.iOperacao = INCLUSAO_CAIXA
    
    'Se encontrou
    Else
'
        'Faz o lock do Caixa
        lErro = Comando_LockExclusive(lComando)
        If lErro <> AD_SQL_SUCESSO Then gError 79480
        
        'E altera o registro na tabela Caixa
        lErro = Comando_ExecutarPos(lComando1, "UPDATE Caixa SET NomeReduzido = ? , Descricao = ? , Status = ?, DataInicial = ? , ProxSeqMov = ? , POS = ? , TEF = ?, Teclado = ?, Ativo = ?, BoletoManual = ?, SoOrcamento = ?", lComando, objCaixa.sNomeReduzido, objCaixa.sDescricao, objCaixa.iStatus, objCaixa.dtDataInicial, objCaixa.lProxSeqMov, objCaixa.iPos, objCaixa.iTEF, objCaixa.iTeclado, objCaixa.iAtivo, objCaixa.iBoletoManual, objCaixa.iOrcamentoECF)
        If lErro <> AD_SQL_SUCESSO Then gError 79444

        'Passa p/ o objLog o tipo de operação a ser realizada.
        objLog.iOperacao = ALTERACAO_CAIXA

    End If
    
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
        'Monta a String de log que deverá ser gravada.
        Call Caixa_Carrega_Log(objLog, objCaixa)
        
        'Monta Registro Para a Tabela de Log
        lErro = CF("Log_Grava", objLog)
        If lErro <> SUCESSO Then gError 103047
    End If
    
    'Confirma a Transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 79445

    'Fecha os comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Caixa_Grava = SUCESSO

    Exit Function

Erro_Caixa_Grava:

    Caixa_Grava = gErr

    Select Case gErr

        Case 79489, 79511, 79518
                
        Case 79434 To 79436
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 79437
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 79439, 79441, 79442
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CAIXAS", gErr, objCaixa.iCodigo)

        Case 79443
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CAIXA", gErr, objCaixa.iCodigo, objCaixa.sNomeReduzido)

        Case 79444
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_CAIXA", gErr, objCaixa.iCodigo, objCaixa.sNomeReduzido)
        
        Case 79480
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CAIXA", gErr, objCaixa.iCodigo)

        Case 79445
             Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case 79596
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_CAIXA_OUTRA_FILIAL", gErr, objCaixa.iCodigo, sNome, objCaixa.iFilialEmpresa)
        
        Case 103047
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151011)

    End Select

    Call Transacao_Rollback
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Sub Caixa_Carrega_Log(ByVal objLog As ClassLog, ByVal objCaixa As ClassCaixa)
'Cria a String de Log em objLog. O campo Operacao no objLog está sendo preenchido na função chamadora.

    'Carrega a String concatenando todos os campos do obj separados por vbKeyEscape
    objLog.sLog = CStr(objCaixa.dtDataInicial) & Chr(vbKeyEscape) & CStr(objCaixa.iCodigo) & Chr(vbKeyEscape) & CStr(objCaixa.iFilialEmpresa) & Chr(vbKeyEscape) & CStr(objCaixa.iStatus) & Chr(vbKeyEscape) & CStr(objCaixa.iTEF) & Chr(vbKeyEscape) & CStr(objCaixa.lProxSeqMov) & Chr(vbKeyEscape) & CStr(objCaixa.sDescricao) & Chr(vbKeyEscape) & CStr(objCaixa.sNomeReduzido) & Chr(vbKeyEscape) & CStr(objCaixa.iPos) & Chr(vbKeyEscape) & CStr(objCaixa.iTeclado) & Chr(vbKeyEscape) & CStr(objCaixa.iAtivo) & Chr(vbKeyEscape) & CStr(objCaixa.iBoletoManual) & Chr(vbKeyEscape) & CStr(objCaixa.iOrcamentoECF) & Chr(vbKeyEscape)

    'Coloca ao final da String o indicador de "Fim de String (vbKeyEnd)"
    objLog.sLog = objLog.sLog & Chr(vbKeyEnd)

End Sub

Sub Caixa_Carrega_Log1(ByVal objLog As ClassLog, ByVal objCaixa As ClassCaixa)
'Cria a String de Log em objLog. O campo Operacao no objLog está sendo preenchido na função chamadora.

    'Carrega a String concatenando todos os campos do obj separados por vbKeyEscape
    objLog.sLog = CStr(objCaixa.iCodigo) & Chr(vbKeyEscape) & CStr(objCaixa.iFilialEmpresa) & Chr(vbKeyEscape)

    'Coloca ao final da String o indicador de "Fim de String (vbKeyEnd)"
    objLog.sLog = objLog.sLog & Chr(vbKeyEnd)

End Sub

Sub ImpressoraECF_Carrega_Log(ByVal objLog As ClassLog, ByVal objImpressoraECF As ClassImpressoraECF)
'Cria a String de Log em objLog. O campo Operacao no objLog está sendo preenchido na função chamadora.

    'Carrega a String concatenando todos os campos do obj separados por vbKeyEscape
    objLog.sLog = CStr(objImpressoraECF.iFilialEmpresa) & Chr(vbKeyEscape) & CStr(objImpressoraECF.iCodigo) & Chr(vbKeyEscape) & CStr(objImpressoraECF.iCodModelo) & Chr(vbKeyEscape) & CStr(objImpressoraECF.sNumSerie) & Chr(vbKeyEscape)

    'Coloca ao final da String o indicador de "Fim de String (vbKeyEnd)"
    objLog.sLog = objLog.sLog & Chr(vbKeyEnd)

End Sub



'Function Caixa_Grava1(ByVal objCaixa As ClassCaixa) As Long
''Verifica se o usuário está tentando gravar um novo Caixa Central. Caso verdadeiro _
'transforma o Caixa do BD que está configurado com Central em Caixa Comum
'
''??? Esta função provavelmente não está sendo usada..
'
'Dim iIndice As Integer
'Dim iCodigoAux As Integer
'Dim lErro As Long
'Dim alComando(0 To 1) As Long
'Dim sNomeReduzido As String
'
'On Error GoTo Erro_Caixa_Grava1
'
'    'Inicia os Comandos
'    For iIndice = LBound(alComando) To UBound(alComando)
'        alComando(iIndice) = Comando_Abrir()
'        If alComando(iIndice) = 0 Then gError 79512
'    Next
'
'    'Se está tentando gravar um caixa central
'''''    If objCaixa.iTipoCaixa = CAIXA_CENTRAL Then
'
'        'Inicializa a string que receberá o Nome Reduzido
'        sNomeReduzido = String(STRING_CAIXA_NOME_REDUZIDO, 0)
'
'        'Alterado por cyntia para incluir FilialEmpresa como parâmetro
'        'Verifica se já existe outro caixa na filial configurado como central
'        lErro = Comando_ExecutarPos(alComando(0), "SELECT Codigo, NomeReduzido FROM Caixa WHERE Codigo <> ? AND FilialEmpresa = ? AND TipoCaixa = ?", 0, iCodigoAux, sNomeReduzido, objCaixa.iCodigo, objCaixa.iFilialEmpresa, CAIXA_CENTRAL)
'        If lErro <> AD_SQL_SUCESSO Then gError 79490
'
'        lErro = Comando_BuscarPrimeiro(alComando(0))
'        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 79491
'
'        'Se encontrou
'        If lErro <> AD_SQL_SEM_DADOS Then
'
'            'Faz o lock da tabela Caixa
'            lErro = Comando_LockExclusive(alComando(0))
'            If lErro <> AD_SQL_SUCESSO Then gError 79509
'
'            'Altera o Caixa Central para Caixa Comum e apaga a conta contábil
'            lErro = Comando_ExecutarPos(alComando(1), "UPDATE Caixa SET TipoCaixa = ?, ContaContabil = ''", alComando(0), CAIXA_COMUM)
'            If lErro <> AD_SQL_SUCESSO Then gError 79510
'
'        End If
'
' ''''   End If
'
'    'Fecha os comandos
'    For iIndice = LBound(alComando) To UBound(alComando)
'        Call Comando_Fechar(alComando(iIndice))
'    Next
'
'    Caixa_Grava1 = SUCESSO
'
'    Exit Function
'
'Erro_Caixa_Grava1:
'
'    Caixa_Grava1 = gErr
'
'    Select Case gErr
'
'        Case 79490, 79491
'            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CAIXAS", gErr, objCaixa.iCodigo)
'
'        Case 79509
'            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CAIXA", gErr)
'
'        Case 79510
'            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_CAIXA", gErr, iCodigoAux, sNomeReduzido)
'
'        Case 79512
'            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
'
'        Case 79513
'            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
'
'        Case 79514
'             Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
'
'        Case Else
'            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151012)
'
'    End Select
'
'    'Fecha os comandos
'    For iIndice = LBound(alComando) To UBound(alComando)
'        Call Comando_Fechar(alComando(iIndice))
'    Next
'
'    Exit Function
'
'End Function

Function Caixa_Exclui(ByVal objCaixa As ClassCaixa) As Long
'Exclui o Caixa

Dim iCodigo As Long
Dim iIndice As Integer
Dim lErro As Long
Dim lTransacao As Long
Dim alComando(0 To 4) As Long
Dim objLog As New ClassLog
Dim dtDataLog As Date

On Error GoTo Erro_Caixa_Exclui

   'Abre os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 79471
    Next

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 79472
    
    'Alterado por cyntia para incluir FilialEmpresa como parâmetro
    'Seleciona o Caixa a ser excluída
    lErro = Comando_ExecutarPos(alComando(0), "SELECT DataLog, Codigo FROM Caixa WHERE Codigo =? AND FilialEmpresa=?", 0, dtDataLog, iCodigo, objCaixa.iCodigo, objCaixa.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 79473

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 79474
    
    'Se não encontrou => erro
    If lErro = AD_SQL_SEM_DADOS Then gError 79475
    
    'se os dados já foram transferidos para o log ==> erro
    If dtDataLog <> DATA_NULA Then gError 118119

    'Faz o lock do Caixa
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 79476

    'Verifica se o caixa não está vinculado à outras tabelas
    lErro = CF("Caixa_Valida_Exclusao", objCaixa, alComando)
    If lErro <> SUCESSO Then gError 79477
        
    'Exclui o Caixa
    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM Caixa", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 79478
    
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
        'Passa p/ o objLog o tipo de operação a ser realizada.
        objLog.iOperacao = EXCLUSAO_CAIXA
    
        'Monta a String de log que deverá ser gravada.
        Call Caixa_Carrega_Log1(objLog, objCaixa)
        
        'Monta Registro Para a Tabela de Log
        lErro = CF("Log_Grava", objLog)
        If lErro <> SUCESSO Then gError 103048
    End If
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 79479

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Caixa_Exclui = SUCESSO

    Exit Function

Erro_Caixa_Exclui:

    Caixa_Exclui = gErr

    Select Case gErr

        Case 79477, 103048
        
        Case 79471
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 79472
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 79473, 79474
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CAIXAS", gErr, objCaixa.iCodigo)

        Case 79476
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_CAIXA", gErr, objCaixa.iCodigo)

        Case 79478
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CAIXA", gErr, objCaixa.iCodigo, objCaixa.sNomeReduzido)

        Case 79479
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case 79475
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CAIXA_NAO_CADASTRADO", gErr, objCaixa.iCodigo)
        
        Case 79597
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CAIXA_OUTRA_FILIAL", gErr, objCaixa.iCodigo, objCaixa.sNomeReduzido, objCaixa.iFilialEmpresa)
            
        Case 118119
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CAIXA_DATALOG", gErr, iCodigo)
    
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151013)

    End Select

    Call Transacao_Rollback
    
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Caixa_Valida_Exclusao(ByVal objCaixa As ClassCaixa, alComando() As Long) As Long
'Verifica se o Caixa a ser excluído está vinculado a alguma outra tabela

Dim lErro As Long
Dim iCodigo As Long

On Error GoTo Erro_Caixa_Valida_Exclusao

''''    'Verifica se o Caixa que está sendo excluído é do tipo Central
''''    If objCaixa.lTipoCaixa = CAIXA_CENTRAL Then
''''
''''        'Verifica no BD se existem outros caixas além do Caixa Central
''''        lErro = Comando_Executar(alComando, "SELECT Codigo FROM Caixa WHERE Codigo <> ? AND FilialEmpresa = ?", iCodigo, objCaixa.iCodigo, objCaixa.iFilialEmpresa)
''''        If lErro <> AD_SQL_SUCESSO Then gError 79515
''''
''''        lErro = Comando_BuscarPrimeiro(alComando)
''''        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 79516
''''
''''        'Se encontrou => erro
''''        If lErro <> AD_SQL_SEM_DADOS Then gError 79517
''''
''''    End If
            
    'Verifica se o Caixa está relacionado com algum Movimento de Caixa
    lErro = Comando_Executar(alComando(2), "SELECT Caixa FROM MovimentosCaixa WHERE Caixa =? AND FilialEmpresa= ? ", iCodigo, objCaixa.iCodigo, objCaixa.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 79461

    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 79462
    
    'Se o caixa está relacionado com algum movimento de caixa=> erro
    If lErro <> AD_SQL_SEM_DADOS Then gError 79463
   
    'Verifica se o Caixa está relacionado com alguma ECF
    lErro = Comando_Executar(alComando(3), "SELECT Caixa FROM ECF WHERE Caixa =? AND FilialEmpresa = ? ", iCodigo, objCaixa.iCodigo, objCaixa.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 79464

    lErro = Comando_BuscarPrimeiro(alComando(3))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 79465
    
    'Se o caixa está relacionado com alguma ECF => erro
    If lErro <> AD_SQL_SEM_DADOS Then gError 79466
    
    Caixa_Valida_Exclusao = SUCESSO
    
    Exit Function
    
Erro_Caixa_Valida_Exclusao:

    Caixa_Valida_Exclusao = gErr
    
    Select Case gErr
    
''''        Case 79515, 79516
''''            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CAIXAS", gErr, objCaixa.iCodigo)
        
''''        Case 79517
''''            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CAIXA_CENTRAL", gErr, objCaixa.iCodigo, objCaixa.sNomeReduzido)
            
        Case 79461, 79462
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOS_CAIXA", gErr)
            
        Case 79463
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CAIXA_VINCULADO_MOVIMENTOCAIXA", gErr, objCaixa.iCodigo, objCaixa.sNomeReduzido)
        
        Case 79464, 79465
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ECF", gErr)
        
        Case 79466
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CAIXA_VINCULADO_ECF", gErr, objCaixa.iCodigo, objCaixa.sNomeReduzido)
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151014)

    End Select

    Exit Function

End Function

Function Caixa_Valida_Gravacao(ByVal objCaixa As ClassCaixa) As Long
'Verifica se o Nome Reduzido não está repetido, se a data de inicialização é válida e se o caixa pode ser central

Dim iIndice As Integer
Dim iCodigo As Integer
Dim iCodigoAux As Integer
Dim dtDataInicial As Date
Dim alComando(1 To 3) As Long
Dim lErro As Long
Dim sNomeReduzido As String
Dim sNome As String
Dim objMovimentosCaixa As New ClassMovimentoCaixa

On Error GoTo Erro_Caixa_Valida_Gravacao

   'Abre os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 79471
    Next
''''
''''    'Se o o caixa que está sendo gravado é do tipo Comum
''''    If objCaixa.lTipoCaixa = CAIXA_COMUM Then
''''
''''        'Alterado por para incluir FilialEmpresa como parâmetro
''''        'Verifica se já existe algum Caixa cadastrado
''''        lErro = Comando_Executar(alComando(1), "SELECT Codigo FROM Caixa WHERE FilialEmpresa = ?", iCodigo, objCaixa.iFilialEmpresa)
''''        If lErro <> AD_SQL_SUCESSO Then gError 79503
''''
''''        lErro = Comando_BuscarPrimeiro(alComando(1))
''''        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 79504
''''
''''        'Se não encontrou => erro
''''        If lErro = AD_SQL_SEM_DADOS Then gError 79505
''''
''''        'Lê o código do Caixa Central no BD
''''        lErro = Comando_Executar(alComando(2), "SELECT Codigo FROM Caixa WHERE TipoCaixa = ? AND FilialEmpresa = ?", iCodigo, CAIXA_CENTRAL, objCaixa.iFilialEmpresa)
''''        If lErro <> AD_SQL_SUCESSO Then gError 79506
''''
''''        lErro = Comando_BuscarPrimeiro(alComando(2))
''''        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 79507
''''
''''        'Se o Caixa que está sendo gravado como Caixa comum é o Caixa Central => erro
''''        If objCaixa.iCodigo = iCodigo Then gError 79508
''''
''''    End If
''''

    'Verifica se já existe algum movimento de caixa para o caixa que está sendo cadastrado
    'e se existir retorna o código e a data do primeiro movimento
    lErro = CF("MovCaixa_Le_PrimeiroMovimentoCaixa", objCaixa, objMovimentosCaixa)
    If lErro <> SUCESSO And lErro <> 79495 Then gError 79458

    'Se existe Movimento para o caixa e a data de inicialização é maior que a data do primeiro movimento=>erro
    If lErro = SUCESSO Then

        If objCaixa.dtDataInicial > objMovimentosCaixa.dtDataMovimento Then gError 79459

    End If
    
    'Inicializa as string's que receberão o Nome Reduzido e a Descrição do Caixa
    sNomeReduzido = String(STRING_CAIXA_NOME_REDUZIDO, 0)
    sNome = String(STRING_CAIXA_DESCRICAO, 0)
    
    'Verifica se já existe outro Caixa com o Nome Reduzido utilizado na tela
    lErro = Comando_Executar(alComando(3), "SELECT  Codigo, Descricao FROM Caixa WHERE Codigo <> ? AND NomeReduzido = ? AND FilialEmpresa=?", iCodigo, sNome, objCaixa.iCodigo, objCaixa.sNomeReduzido, objCaixa.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 79438

    lErro = Comando_BuscarPrimeiro(alComando(3))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 79439

    'Se encontrou o nome reduzido em outro caixa => erro
    If lErro <> AD_SQL_SEM_DADOS Then gError 79440

    Caixa_Valida_Gravacao = SUCESSO
    
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function
    
Erro_Caixa_Valida_Gravacao:

    Caixa_Valida_Gravacao = gErr
    
    Select Case gErr
    
        Case 79458
        
        Case 79493, 79494
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 79438, 79439 '''', 79503, 79504, 79506, 79507
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CAIXAS", gErr, objCaixa.iCodigo)
            
        Case 79440
            Call Rotina_Erro(vbOKOnly, "ERRO_NOME_REDUZIDO_CAIXA_REPETIDO", gErr, iCodigo, objCaixa.sNomeReduzido)
        
        Case 79459
            Call Rotina_Erro(vbOKOnly, "ERRO_DATAINICIALCAIXA_MAIOR_DATAMOVIMENTOCAIXA", gErr, objCaixa.dtDataInicial, objMovimentosCaixa.dtDataMovimento)
        
''''        Case 79505
''''            Call Rotina_Erro(vbOKOnly, "ERRO_PRIMEIRO_CAIXA_DEVE_SER_CENTRAL", gErr)
        
''''        Case 79508
''''            Call Rotina_Erro(vbOKOnly, "ERRO_CAIXA_CENTRAL_NAO_PODE_SER_ALTERADO", gErr, objCaixa.iCodigo, objCaixa.sNomeReduzido, objCaixa.iFilialEmpresa)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151015)

    End Select
    
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

'''Function ECF_Grava(ByVal objECF As ClassECF) As Long
''''Atualiza ou insere um novo registro na tabela ECF
'''
'''Dim iIndice As Long
'''Dim iCodigo As Integer
'''Dim iFilialEmpresaECF As Integer
'''Dim lErro As Long
'''Dim alComando(2) As Long
'''Dim lTransacao As Long
'''
'''On Error GoTo Erro_ECF_Grava
'''
'''    lTransacao = 0
'''
'''    'Inicia os comandos
'''    For iIndice = LBound(alComando) To UBound(alComando)
'''        alComando(iIndice) = Comando_Abrir()
'''        If alComando(iIndice) = 0 Then gError 79560
'''    Next
'''
'''    'inicia a Transacao
'''    lTransacao = Transacao_Abrir()
'''    If lTransacao = 0 Then gError 79561
'''
'''    'Faz os lock's compartilhados necessários para a gravação
'''    lErro = CF("ECF_Lock_Gravacao", objECF)
'''    If lErro <> SUCESSO Then gError 79562
'''
'''    'Verifica se já existe ECF cadastrado com o código utilizado
'''    lErro = Comando_ExecutarPos(alComando(0), "SELECT Codigo, FilialEmpresa  FROM ECF WHERE Codigo = ? ", 0, iCodigo, iFilialEmpresaECF, objECF.iCodigo)
'''    If lErro <> AD_SQL_SUCESSO Then gError 79563
'''
'''    lErro = Comando_BuscarPrimeiro(alComando(0))
'''    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 79564
'''
'''    'Se não encontrou
'''    If lErro = AD_SQL_SEM_DADOS Then
'''
'''        'Então, insere um novo registro na tabela ECF
'''        lErro = Comando_Executar(alComando(1), "INSERT INTO ECF (Codigo, FilialEmpresa, Fabricante, Caixa, ReinicioOperacao, ImpressoraCheque, LeitoraCodigoBarras, POS, TipoTEF, HorarioVerao, AtualizacaoECF) VALUES (?,?,?,?,?,?,?,?,?,?,?)", objECF.iCodigo, objECF.iFilialEmpresa, objECF.iFabricante, objECF.iCaixa, objECF.iReinicioOperacao, objECF.iImpressoraCheque, objECF.iLeitoraCodigoBarras, objECF.sPOS, objECF.iTipoTEF, objECF.iHorarioVerao, objECF.iAtualizacaoECF)
'''        If lErro <> AD_SQL_SUCESSO Then gError 79565
'''
'''    'Se encontrou
'''    Else
'''
'''        'Se a Filial do ECF encontrado é diferente à Filial Ativa => erro
'''        If iFilialEmpresaECF <> giFilialEmpresa Then gError 79598
'''
'''        'Faz o lock do ECF
'''        lErro = Comando_LockExclusive(alComando(0))
'''        If lErro <> AD_SQL_SUCESSO Then gError 79566
'''
'''        'E altera o registro na tabela ECF
'''        lErro = Comando_ExecutarPos(alComando(1), "UPDATE ECF SET Fabricante = ? , Caixa = ? , ImpressoraCheque = ? , LeitoraCodigoBarras = ?, TipoTEF = ?, POS= ?", alComando(0), objECF.iFabricante, objECF.iCaixa, objECF.iImpressoraCheque, objECF.iLeitoraCodigoBarras, objECF.iTipoTEF, objECF.sPOS)
'''        If lErro <> AD_SQL_SUCESSO Then gError 79567
'''
'''    End If
'''
'''    'Confirma a Transacao
'''    lErro = Transacao_Commit()
'''    If lErro <> AD_SQL_SUCESSO Then gError 79568
'''
'''    'Fecha os comandos
'''    For iIndice = LBound(alComando) To UBound(alComando)
'''        Call Comando_Fechar(alComando(iIndice))
'''    Next
'''
'''    ECF_Grava = SUCESSO
'''
'''    Exit Function
'''
'''Erro_ECF_Grava:
'''
'''    ECF_Grava = gErr
'''
'''    'Identação
'''        Select Case gErr
'''
'''            Case 79562
'''
'''            Case 79560
'''                Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
'''
'''            Case 79561
'''                Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
'''
'''            Case 79563, 79564
'''                Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ECF", gErr, objECF.iCodigo)
'''
'''            Case 79565
'''                Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_ECF", gErr, objECF.iCodigo)
'''
'''            Case 79598
'''                Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_ECF_OUTRA_FILIAL", gErr, objECF.iCodigo, iFilialEmpresaECF)
'''
'''            Case 79566
'''                Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_ECF", gErr)
'''
'''            Case 79567
'''                Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_ECF", gErr, objECF.iCodigo)
'''
'''            Case 79568
'''                 Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
'''
'''            Case Else
'''                Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151016)
'''
'''    End Select
'''
'''    'Desfaz as alterações feitas durante a transação
'''    Call Transacao_Rollback
'''
'''    'Fecha os comandos
'''    For iIndice = LBound(alComando) To UBound(alComando)
'''        Call Comando_Fechar(alComando(iIndice))
'''    Next
'''
'''    Exit Function
'''
'''End Function

'''''Function ECF_Lock_Gravacao(ByVal objECF As ClassECF) As Long
'''''Faz o lock compartilhado dos registros vinculados que serão utilizados na gravação do ECF
'''''
'''''Dim iCodigo As Integer
'''''Dim iIndice As Integer
'''''Dim lErro As Long
'''''Dim sPOS As String
'''''Dim alComando(1 To 3) As Long
'''''
'''''On Error GoTo Erro_ECF_Lock_Gravacao
'''''
'''''    Abre os comandos
'''''    For iIndice = LBound(alComando) To UBound(alComando)
'''''        alComando(iIndice) = Comando_Abrir()
'''''        If alComando(iIndice) = 0 Then gError 79547
'''''    Next
'''''
'''''    Procura no BD o Fabricante que está sendo utilizado na gravação da ECF
'''''    lErro = Comando_ExecutarPos(alComando(1), "SELECT Codigo FROM FabricanteECF WHERE Codigo = ?", 0, iCodigo, objECF.iFabricante)
'''''    If lErro <> AD_SQL_SUCESSO Then gError 79548
'''''
'''''    lErro = Comando_BuscarPrimeiro(alComando(1))
'''''    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 79549
'''''
'''''    Se não encontrou => erro
'''''    If lErro = AD_SQL_SEM_DADOS Then gError 79550
'''''
'''''    Faz Lock compartilhado desse Fabricante
'''''    lErro = Comando_LockShared(alComando(1))
'''''    If lErro <> AD_SQL_SUCESSO Then gError 79551
'''''
'''''    Procura no BD o Caixa que está sendo utilizado na gravação da ECF
'''''    lErro = Comando_ExecutarPos(alComando(2), "SELECT Codigo FROM Caixa WHERE Codigo = ? AND FilialEmpresa = ?", 0, iCodigo, objECF.iCaixa, giFilialEmpresa)
'''''    If lErro <> AD_SQL_SUCESSO Then gError 79552
'''''
'''''    lErro = Comando_BuscarPrimeiro(alComando(2))
'''''    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 79553
'''''
'''''    Se não encontrou => erro
'''''    If lErro = AD_SQL_SEM_DADOS Then gError 79554
'''''
'''''    Faz Lock compartilhado desse Caixa
'''''    lErro = Comando_LockShared(alComando(2))
'''''    If lErro <> AD_SQL_SUCESSO Then gError 79555
'''''
'''''    Se foi preenchido o POS
'''''    If Len(Trim(objECF.sPOS)) > 0 Then
'''''
'''''        Inicializa a string que irá receber o código do POS
'''''        sPOS = String(STRING_POS_CODIGO, 0)
'''''
'''''        Procura no BD o POS que está sendo utilizado na gravação da ECF
'''''        lErro = Comando_ExecutarPos(alComando(3), "SELECT Codigo FROM POS WHERE Codigo = ? ", 0, sPOS, objECF.sPOS)
'''''        If lErro <> AD_SQL_SUCESSO Then gError 79556
'''''
'''''        lErro = Comando_BuscarPrimeiro(alComando(3))
'''''        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 79557
'''''
'''''        Se não encontrou => erro
'''''        If lErro = AD_SQL_SEM_DADOS Then gError 79558
'''''
'''''        Faz Lock compartilhado desse POS
'''''        lErro = Comando_LockShared(alComando(3))
'''''        If lErro <> AD_SQL_SUCESSO Then gError 79559
'''''
'''''    End If
'''''
'''''    Fecha os comandos
'''''    For iIndice = LBound(alComando) To UBound(alComando)
'''''        Call Comando_Fechar(alComando(iIndice))
'''''    Next
'''''
'''''    ECF_Lock_Gravacao = SUCESSO
'''''
'''''    Exit Function
'''''
'''''
'''''Erro_ECF_Lock_Gravacao:
'''''
'''''    ECF_Lock_Gravacao = gErr
'''''
'''''    Select Case gErr
'''''
'''''        Case 79547
'''''            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
'''''
'''''        Case 79548, 79549
'''''            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FABRICANTEECF", gErr, objECF.iFabricante)
'''''
'''''        Case 79550
'''''            Call Rotina_Erro(vbOKOnly, "ERRO_FABRICANTE_ECF_NAO_CADASTRADO", gErr, objECF.iFabricante)
'''''
'''''        Case 79551
'''''            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_FABRICANTEECF", gErr)
'''''
'''''        Case 79552, 79553
'''''            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CAIXAS", gErr, objECF.iCaixa)
'''''
'''''        Case 79554
'''''            Call Rotina_Erro(vbOKOnly, "ERRO_CAIXA_NAO_CADASTRADO", gErr, objECF.iCaixa)
'''''
'''''        Case 79555
'''''            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CAIXA", gErr)
'''''
'''''        Case 79556, 79557
'''''            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_POS", gErr, objECF.sPOS)
'''''
'''''        Case 79558
'''''            Call Rotina_Erro(vbOKOnly, "ERRO_POS_NAO_CADASTRADO", gErr, objECF.sPOS)
'''''
'''''        Case 79559
'''''            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_POS", gErr)
'''''
'''''        Case Else
'''''            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151017)
'''''
'''''    End Select
'''''
'''''    Fecha os comandos
'''''    For iIndice = LBound(alComando) To UBound(alComando)
'''''        Call Comando_Fechar(alComando(iIndice))
'''''    Next
'''''
'''''    Exit Function
'''''
'''''End Function

''''Function ECF_Exclui(ByVal objECF As ClassECF) As Long
''''Exclui o ECF
''''
''''Dim iCodigo As Long
''''Dim iIndice As Integer
''''Dim lErro As Long
''''Dim lTransacao As Long
''''Dim alComando(0 To 1) As Long
''''
''''On Error GoTo Erro_ECF_Exclui
''''
''''   Abre os  comandos
''''    For iIndice = LBound(alComando) To UBound(alComando)
''''        alComando(iIndice) = Comando_Abrir()
''''        If alComando(iIndice) = 0 Then gError 79602
''''    Next
''''
''''    Inicia a Transacao
''''    lTransacao = Transacao_Abrir()
''''    If lTransacao = 0 Then gError 79603
''''
''''    Busca no BD o ECF a ser excluído
''''    lErro = Comando_ExecutarPos(alComando(0), "SELECT Codigo FROM ECF WHERE Codigo =?", 0, iCodigo, objECF.iCodigo)
''''    If lErro <> AD_SQL_SUCESSO Then gError 79604
''''
''''    lErro = Comando_BuscarPrimeiro(alComando(0))
''''    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 79605
''''
''''    Se não encontrou => erro
''''    If lErro = AD_SQL_SEM_DADOS Then gError 79606
''''
''''    Se o ECF selecionado pertence a outra filial => erro
''''    If objECF.iFilialEmpresa <> giFilialEmpresa Then gError 79607
''''
''''    Faz o lock do ECF
''''    lErro = Comando_LockExclusive(alComando(0))
''''    If lErro <> AD_SQL_SUCESSO Then gError 79608
''''
''''    Verifica se o ECF não está vinculado à outras tabelas
''''    lErro = CF("ECF_Valida_Exclusao", objECF, alComando(1))
''''    If lErro <> SUCESSO Then gError 79615
''''
''''    Exclui o ECF
''''    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM ECF", alComando(0))
''''    If lErro <> AD_SQL_SUCESSO Then gError 79616
''''
''''    Confirma a transação
''''    lErro = Transacao_Commit()
''''    If lErro <> AD_SQL_SUCESSO Then gError 79617
''''
''''    Fecha os comandos
''''    For iIndice = LBound(alComando) To UBound(alComando)
''''        Call Comando_Fechar(alComando(iIndice))
''''    Next
''''
''''    ECF_Exclui = SUCESSO
''''
''''    Exit Function
''''
''''Erro_ECF_Exclui:
''''
''''    ECF_Exclui = gErr
''''
''''    Select Case gErr
''''
''''        Case 79615
''''
''''        Case 79602
''''            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
''''
''''        Case 79603
''''            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
''''
''''        Case 79604, 79605
''''            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ECF", gErr, objECF.iCodigo)
''''
''''        Case 79606
''''            Call Rotina_Erro(vbOKOnly, "ERRO_ECF_NAO_CADASTRADO", gErr, objECF.iCodigo)
''''
''''        Case 79607
''''        ????? Nesse caso seria melhor uma msg assim *** Ok - Luiz
''''            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_ECF_OUTRA_FILIAL", gErr, objECF.iCodigo, objECF.iFilialEmpresa)
''''
''''        Case 79608
''''            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_ECF", gErr, objECF.iCodigo)
''''
''''        Case 79616
''''            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_ECF", gErr, objECF.iCodigo)
''''
''''        Case 79617
''''            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
''''
''''        Case Else
''''            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151018)
''''
''''    End Select
''''
''''    Call Transacao_Rollback
''''
''''    Fecha os comandos
''''    For iIndice = LBound(alComando) To UBound(alComando)
''''        Call Comando_Fechar(alComando(iIndice))
''''    Next
''''
''''    Exit Function
''''
''''End Function
''''
''''Function ECF_Valida_Exclusao(ByVal objECF As ClassECF, ByVal lComando As Long) As Long
''''Verifica se o ECF a ser excluído está vinculado a alguma outra tabela
''''
''''Dim lErro As Long
''''Dim iCodigo As Long
''''
''''On Error GoTo Erro_ECF_Valida_Exclusao
''''
''''    Verifica se o ECF está relacionado com algum registro da tabela ValeTicket
''''    lErro = Comando_Executar(lComando, "SELECT ECF FROM ValeTicket WHERE ECF =? AND FilialEmpresa= ? ", iCodigo, objECF.iCodigo, giFilialEmpresa)
''''    If lErro <> AD_SQL_SUCESSO Then gError 79609
''''
''''    lErro = Comando_BuscarPrimeiro(lComando)
''''    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 79610
''''
''''    Se o ECF está relacionado com algum ValeTicket=> erro
''''    If lErro <> AD_SQL_SEM_DADOS Then gError 79611
''''
''''    Verifica se o ECF está relacionado com algum registro da tabela Boleto
''''    lErro = Comando_Executar(lComando, "SELECT ECF FROM Boleto WHERE ECF =? AND FilialEmpresa = ? ", iCodigo, objECF.iCodigo, giFilialEmpresa)
''''    If lErro <> AD_SQL_SUCESSO Then gError 79612
''''
''''    lErro = Comando_BuscarPrimeiro(lComando)
''''    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 79613
''''
''''    Se o ECF está relacionado com algum Boleto => erro
''''    If lErro <> AD_SQL_SEM_DADOS Then gError 79614
''''
''''    Verifica se o ECF está relacionado com algum registro da tabela CupomFiscal
''''    lErro = Comando_Executar(lComando, "SELECT ECF FROM CupomFiscal WHERE ECF = ? AND FilialEmpresa = ? ", iCodigo, objECF.iCodigo, giFilialEmpresa)
''''    If lErro <> AD_SQL_SUCESSO Then gError 79623
''''
''''    lErro = Comando_BuscarPrimeiro(lComando)
''''    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 79624
''''
''''    Se o ECF está relacionado com algum Cupom Fiscal => erro
''''    If lErro <> AD_SQL_SEM_DADOS Then gError 79625
''''
''''    Verifica se o ECF está relacionado com algum registro da tabela Cheque
''''    lErro = Comando_Executar(lComando, "SELECT ECF FROM Cheque WHERE ECF = ? AND FilialEmpresa = ? ", iCodigo, objECF.iCodigo, giFilialEmpresa)
''''    If lErro <> AD_SQL_SUCESSO Then gError 79626
''''
''''    lErro = Comando_BuscarPrimeiro(lComando)
''''    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 79627
''''
''''    Se o ECF está relacionado com algum Cheque => erro
''''    If lErro <> AD_SQL_SEM_DADOS Then gError 79628
''''
''''    ECF_Valida_Exclusao = SUCESSO
''''
''''    Exit Function
''''
''''Erro_ECF_Valida_Exclusao:
''''
''''    ECF_Valida_Exclusao = gErr
''''
''''    Select Case gErr
''''
''''        Case 79609, 79610
''''            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_VALETICKET", gErr)
''''
''''        Case 79611
''''            Call Rotina_Erro(vbOKOnly, "ERRO_ECF_VINCULADO_VALETICKET", gErr, objECF.iCodigo)
''''
''''        Case 79612, 79613
''''            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BOLETO", gErr)
''''
''''        Case 79614
''''            Call Rotina_Erro(vbOKOnly, "ERRO_ECF_VINCULADO_BOLETO", gErr, objECF.iCodigo)
''''
''''        Case 79623, 79624
''''            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CUPOMFISCAL", gErr)
''''
''''        Case 79625
''''            Call Rotina_Erro(vbOKOnly, "ERRO_ECF_VINCULADO_CUPOMFISCAL", gErr, objECF.iCodigo)
''''
''''        Case 79626, 79627
''''            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUE", gErr)
''''
''''        Case 79628
''''            Call Rotina_Erro(vbOKOnly, "ERRO_ECF_VINCULADO_CHEQUE", gErr, objECF.iCodigo)
''''
''''        Case Else
''''            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151019)
''''
''''    End Select
''''
''''    Exit Function
''''
''''End Function


Function ECF_Grava(ByVal objECF As ClassECF) As Long
'Atualiza ou insere um novo registro na tabela ECF

Dim iIndice As Long
Dim iCodigo As Integer
Dim lErro As Long
Dim alComando(0 To 3) As Long
Dim lTransacao As Long
Dim iTipoLog As Integer
Dim objLog As New ClassLog
Dim iImpressoraECF As Integer
Dim iCaixa As Integer
Dim dtDataLog As Date

On Error GoTo Erro_ECF_Grava
    
    'Inicia os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 79560
    Next
    
    'inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 79561

    If objECF.iAtivo = ECF_ATIVO Then

        'Verifica se já existe o Caixa com outro ECF Ativo
        lErro = Comando_ExecutarPos(alComando(2), "SELECT Codigo FROM ECF WHERE Caixa = ? AND FilialEmpresa = ? AND Codigo <> ? AND Ativo = ?", 0, iCodigo, objECF.iCaixa, objECF.iFilialEmpresa, objECF.iCodigo, ECF_ATIVO)
        If lErro <> AD_SQL_SUCESSO Then gError 111060
    
        lErro = Comando_BuscarPrimeiro(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 111061
        
        'Nao pode existir + de um ecf ativo para cada caixa
        If lErro = AD_SQL_SUCESSO Then gError 111062
    
        'Verifica se já existe a impressora ativa em outro Caixa
        lErro = Comando_ExecutarPos(alComando(3), "SELECT Codigo FROM ECF WHERE ImpressoraECF = ? AND FilialEmpresa = ? AND Codigo <> ? AND Ativo = ?", 0, iCodigo, objECF.iImpressoraECF, objECF.iFilialEmpresa, objECF.iCodigo, ECF_ATIVO)
        If lErro <> AD_SQL_SUCESSO Then gError 110094
    
        lErro = Comando_BuscarPrimeiro(alComando(3))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 110095
        
        'Nao pode existir um mesmo ecf ativo em + de um caixa
        If lErro = AD_SQL_SUCESSO Then gError 110096
    
    End If
    
    'Faz os lock's compartilhados necessários para a gravação
    lErro = CF("ECF_Lock_Gravacao", objECF)
    If lErro <> SUCESSO Then gError 79562
    
    'Verifica se já existe ECF cadastrado com o código/caixa utilizado
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Caixa, ImpressoraECF, DataLog FROM ECF WHERE Codigo = ? AND FilialEmpresa = ?", 0, iCaixa, iImpressoraECF, dtDataLog, objECF.iCodigo, objECF.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 79563

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 79564
        
    'Se não encontrou
    If lErro = AD_SQL_SEM_DADOS Then
        
        'Variável que identifica que houve inserção
        iTipoLog = INCLUSAO_ECF_CAIXA_CENTRAL
        
        'Então, insere um novo registro na tabela ECF
        lErro = Comando_Executar(alComando(1), "INSERT INTO ECF (Codigo, FilialEmpresa, Caixa, ImpressoraECF, ImpressoraCheque, HorarioVerao, Ativo, DataLog ) VALUES (?,?,?,?,?,?,?,?)", objECF.iCodigo, objECF.iFilialEmpresa, objECF.iCaixa, objECF.iImpressoraECF, objECF.iImpressoraCheque, objECF.iHorarioVerao, objECF.iAtivo, DATA_NULA)
        If lErro <> AD_SQL_SUCESSO Then gError 79565

    'Se encontrou
    Else
    
        'se é uma alteracao, nao pode trocar o Caixa ou a Impressora
        If dtDataLog <> DATA_NULA And (objECF.iCaixa <> iCaixa Or objECF.iImpressoraECF <> iImpressoraECF) Then gError 110093
    
        'Faz o lock do ECF
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 79566
        
        'Variável que identifica que houve Alteracao
        iTipoLog = ALTERACAO_ECF_CAIXA_CENTRAL
        
        'E altera o registro na tabela ECF
        lErro = Comando_ExecutarPos(alComando(1), "UPDATE ECF SET Caixa = ?, ImpressoraECF = ?, ImpressoraCheque = ? , HorarioVerao = ?, Ativo = ? ", alComando(0), objECF.iCaixa, objECF.iImpressoraECF, objECF.iImpressoraCheque, objECF.iHorarioVerao, objECF.iAtivo)
        If lErro <> AD_SQL_SUCESSO Then gError 79567

    End If
    
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
        'Chama a Função que monta Log, e Prepara para a Gravação
        Call ECF_Carrega_Log(objLog, objECF, iTipoLog)
        
        'Função que Grava Log na Tabela
        lErro = CF("Log_Grava", objLog)
        If lErro <> SUCESSO Then gError 104278
    End If
    
    'Confirma a Transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 79568

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    ECF_Grava = SUCESSO

    Exit Function

Erro_ECF_Grava:

    ECF_Grava = gErr


    Select Case gErr

        Case 79562, 104278
        
        Case 79560
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 79561
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 79563, 79564
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ECF", gErr, objECF.iCodigo)

        Case 79565
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_ECF", gErr, objECF.iCodigo)
        
        Case 79598
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_ECF_OUTRA_FILIAL", gErr, objECF.iCodigo, objECF.iFilialEmpresa)

        Case 79566
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_ECF", gErr)

        Case 79567
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_ECF", gErr, objECF.iCodigo)
        
        Case 79568
             Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case 110093
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_ECF_TROCA_CAIXA_IMP", gErr)

        Case 110094, 110095, 111060, 111061
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ECF1", gErr)

        Case 110096
            Call Rotina_Erro(vbOKOnly, "ERRO_ECF_ATIVO_OUTRO_CAIXA", gErr, iCodigo)

        Case 111062
            Call Rotina_Erro(vbOKOnly, "ERRO_CAIXA_ATIVO_OUTRO_CODIGO", gErr, iCodigo)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151020)
    
    End Select

    'Desfaz as alterações feitas durante a transação
    Call Transacao_Rollback
    
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Sub ECF_Carrega_Log(objLog As ClassLog, objECF As ClassECF, iTipoLog)

    'Função para Carregar o objLog
    objLog.sLog = CStr(objECF.iCodigo) & Chr(vbKeyEscape) & CStr(objECF.iFilialEmpresa) & Chr(vbKeyEscape) & CStr(objECF.iCaixa) & Chr(vbKeyEscape) & CStr(objECF.iImpressoraECF) & Chr(vbKeyEscape) & CStr(objECF.iImpressoraCheque) & Chr(vbKeyEscape) & CStr(objECF.iHorarioVerao) & Chr(vbKeyEscape) & CStr(objECF.iAtivo) & Chr(vbKeyEscape)

    objLog.iOperacao = iTipoLog

    Exit Sub

End Sub

Sub ECF_Carrega_Log1(objLog As ClassLog, objECF As ClassECF, iTipoLog)

    'Função para Carregar o objLog
    objLog.sLog = CStr(objECF.iCodigo) & Chr(vbKeyEscape) & CStr(objECF.iFilialEmpresa) & Chr(vbKeyEscape)

    objLog.iOperacao = iTipoLog

    Exit Sub

End Sub

Function ECF_Lock_Gravacao(ByVal objECF As ClassECF) As Long
'Faz o lock compartilhado dos registros vinculados que serão utilizados na gravação do ECF

Dim iCodigo As Integer
Dim iIndice As Integer
Dim lErro As Long
Dim sPOS As String
Dim alComando(1 To 3) As Long

On Error GoTo Erro_ECF_Lock_Gravacao

    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 79547
    Next
    
    'Procura no BD o Impressora que está sendo utilizado na gravação da ECF
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Codigo FROM ImpressoraECF WHERE FilialEmpresa = ? AND Codigo = ?", 0, iCodigo, objECF.iFilialEmpresa, objECF.iImpressoraECF)
    If lErro <> AD_SQL_SUCESSO Then gError 79548
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 79549
    
    'Se não encontrou => erro
    If lErro = AD_SQL_SEM_DADOS Then gError 79550
    
    'Faz Lock compartilhado desse ImpressoraCEF
    lErro = Comando_LockExclusive(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 79551
    
    'Procura no BD o Caixa que está sendo utilizado na gravação da ECF
    lErro = Comando_ExecutarPos(alComando(2), "SELECT Codigo FROM Caixa WHERE FilialEmpresa = ? AND Codigo = ?", 0, iCodigo, objECF.iFilialEmpresa, objECF.iCaixa)
    If lErro <> AD_SQL_SUCESSO Then gError 79552
    
    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 79553
    
    'Se não encontrou => erro
    If lErro = AD_SQL_SEM_DADOS Then gError 79554
    
    'Faz Lock compartilhado desse Caixa
    lErro = Comando_LockExclusive(alComando(2))
    If lErro <> AD_SQL_SUCESSO Then gError 79555
    
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    ECF_Lock_Gravacao = SUCESSO
    
    Exit Function

Erro_ECF_Lock_Gravacao:

    ECF_Lock_Gravacao = gErr
    
    Select Case gErr
    
        Case 79547
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 79548, 79549
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_IMPRESSORAECF", gErr, objECF.iImpressoraECF)
        
        Case 79550
            Call Rotina_Erro(vbOKOnly, "ERRO_IMPRESSORA_ECF_NAO_CADASTRADO", gErr, objECF.iImpressoraECF)
        
        Case 79551
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_IMPRESSORAECF", gErr, objECF.iImpressoraECF)
        
        Case 79552, 79553
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CAIXAS", gErr, objECF.iCaixa)
        
        Case 79554
            Call Rotina_Erro(vbOKOnly, "ERRO_CAIXA_NAO_CADASTRADO", gErr, objECF.iCaixa)
        
        Case 79555
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CAIXA", gErr)
        
       Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151021)
        
    End Select
    
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Function ECF_Exclui(ByVal objECF As ClassECF) As Long
'Exclui o ECF

Dim iIndice As Integer
Dim lErro As Long
Dim lTransacao As Long
Dim alComando(0 To 1) As Long
Dim dtDataLog As Date
Dim objLog As New ClassLog

On Error GoTo Erro_ECF_Exclui

   'Abre os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 79602
    Next

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 79603

    'Busca no BD o ECF a ser excluído
    lErro = Comando_ExecutarPos(alComando(0), "SELECT DataLog FROM ECF WHERE FilialEmpresa = ? AND Codigo = ?", 0, dtDataLog, objECF.iFilialEmpresa, objECF.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 79604

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 79605
    
    'Se não encontrou => erro
    If lErro = AD_SQL_SEM_DADOS Then gError 79606

    'Faz o lock do ECF
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 79608

    If dtDataLog <> DATA_NULA Then gError 117574
        
    'Exclui o ECF
    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM ECF", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 79616
    
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
    
        'Monta a String de log que deverá ser gravada.
        Call ECF_Carrega_Log1(objLog, objECF, EXCLUSAO_ECF_CAIXA_CENTRAL)
        
        'Monta Registro Para a Tabela de Log
        lErro = CF("Log_Grava", objLog)
        If lErro <> SUCESSO Then gError 118137
    End If
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 79617

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    ECF_Exclui = SUCESSO

    Exit Function

Erro_ECF_Exclui:

    ECF_Exclui = gErr

    Select Case gErr

        Case 79615, 104280, 118137
            'Erro Tratado Dentro da Função Chamada
        Case 79602
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 79603
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 79604, 79605
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ECF", gErr, objECF.iCodigo)

        Case 79606
            Call Rotina_Erro(vbOKOnly, "ERRO_ECF_NAO_CADASTRADO", gErr, objECF.iCodigo)
        
        Case 79608
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_ECF", gErr, objECF.iCodigo)

        Case 79616
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_ECF", gErr, objECF.iCodigo)

        Case 79617
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case 110101
            Call Rotina_Erro(vbOKOnly, "ERRO_ECF_DATALOG", gErr, objECF.iCodigo)
        
        Case 117574
            Call Rotina_Erro(vbOKOnly, "ERRO_ECF_EXCLUSAO_LOG", gErr, objECF.iCodigo)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151022)

    End Select

    Call Transacao_Rollback
    
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function ECF_Valida_Exclusao(ByVal objECF As ClassECF) As Long
'Verifica se o ECF a ser excluído está vinculado a alguma outra tabela

Dim lErro As Long

Dim alComando(0 To 3) As Long
Dim iIndice As Integer
Dim dtDataLog As Date

On Error GoTo Erro_ECF_Valida_Exclusao

    'Abre os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 79602
    Next
    
    'Verifica se o ECF já foi enviado para o arquivo de log
    lErro = Comando_Executar(alComando(1), "SELECT DataLog FROM ECF WHERE Codigo =? AND FilialEmpresa= ? ", dtDataLog, objECF.iCodigo, objECF.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 79609

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 79610

    'se a data do log indica que o registro já foi enviado para os caixas ==> nao pode + excluir
    If dtDataLog <> DATA_NULA Then gError 110097

   'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    ECF_Valida_Exclusao = SUCESSO
    
    Exit Function
    
Erro_ECF_Valida_Exclusao:

    ECF_Valida_Exclusao = gErr
    
    Select Case gErr
        
        Case 79609, 79610
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ECF", gErr, objECF.iCodigo)

        Case 110097
            Call Rotina_Erro(vbOKOnly, "ERRO_ECF_EXCLUSAO_LOG", gErr, objECF.iCodigo)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151023)

    End Select

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function AliquotaICMS_Grava(ByVal objLoja As ClassLoja) As Long
'Transmite os dados presentes no objAliquotaICMS para o BD

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim objAliquotaICMS As ClassAliquotaICMS

On Error GoTo Erro_AliquotaICMS_Grava

    'Abre comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 80096

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 80104
    
    'Exclui os dados das Aliquotas na Tabela AliquotasICMS
    lErro = Comando_Executar(lComando, "DELETE FROM AliquotasICMS WHERE FilialEmpresa = ?", giFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 80102
    
    'Grava os dados das Aliquotas na Tabela AliquotasICMS
    For Each objAliquotaICMS In objLoja.colAliquotaICMS
    
        lErro = Comando_Executar(lComando1, "INSERT INTO AliquotasICMS (FilialEmpresa, Sigla, Aliquota, ISS) VALUES(?, ?, ?, ?)", objAliquotaICMS.iFilialEmpresa, objAliquotaICMS.sSigla, objAliquotaICMS.dAliquota, objAliquotaICMS.iISS)
        If lErro <> AD_SQL_SUCESSO Then gError 80098

    Next

    'Fecha comandos
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando)

    AliquotaICMS_Grava = SUCESSO
    
    Exit Function
    
Erro_AliquotaICMS_Grava:
    
    AliquotaICMS_Grava = gErr
    
    Select Case gErr
    
        Case 80096, 80104
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 80098
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_ALIQUOTASICMS", gErr)
            
        Case 80102
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_ALIQUOTASICMS", gErr)
                
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151024)
            
    End Select
        
    'Fecha Comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
                
    Exit Function
        
End Function

Function ConfiguraLoja_GravarTrans(ByVal objLoja As ClassLoja, ByVal colLojaConfig As colLojaConfig) As Long
'Efetua a gravação dos dados com a transação já aberta em função _
 anterior

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(0 To 4) As Long
Dim sConteudo As String
Dim objLojaConfig As ClassLojaConfig
Dim sDescricao As String
Dim iTipo As Integer
Dim sConteudoInicial As String

On Error GoTo Erro_ConfiguraLoja_GravarTrans

    'Abre os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 80055
    Next
    
    For Each objLojaConfig In colLojaConfig

        sConteudo = String(STRING_CONTEUDO, 0)

        'Seleciona na tabela de LojaConfig o codigo passado como parametro
        lErro = Comando_ExecutarPos(alComando(0), "SELECT Conteudo FROM LojaConfig WHERE Codigo = ? AND FilialEmpresa =? ", 0, sConteudo, objLojaConfig.sCodigo, objLojaConfig.iFilialEmpresa)
        If lErro <> AD_SQL_SUCESSO Then gError 80056

        lErro = Comando_BuscarPrimeiro(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 80057

        'Nao encontrou o registro
        If lErro = AD_SQL_SEM_DADOS Then
        
            sDescricao = String(STRING_CONFIG_DESCRICAO, 0)
            sConteudoInicial = String(STRING_CONTEUDO, 0)
            
            lErro = Comando_Executar(alComando(3), "SELECT Descricao, Tipo, ConteudoInicial FROM LojaConfig WHERE FilialEmpresa = ? AND Codigo = ?", _
                sDescricao, iTipo, sConteudoInicial, 1, objLojaConfig.sCodigo)
            If lErro <> AD_SQL_SUCESSO Then gError 130400
    
            lErro = Comando_BuscarPrimeiro(alComando(3))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 130401
            If lErro <> AD_SQL_SUCESSO Then gError 80059
            
            lErro = Comando_Executar(alComando(4), "INSERT INTO LojaConfig (FilialEmpresa, Codigo, Descricao, Tipo, Conteudo, ConteudoInicial) VALUES (?,?,?,?,?,?)", _
                objLojaConfig.iFilialEmpresa, objLojaConfig.sCodigo, sDescricao, iTipo, objLojaConfig.sConteudo, sConteudoInicial)
            If lErro <> AD_SQL_SUCESSO Then gError 130402

        'É uma alteracao => atualiza o campo Conteudo da tabela LojaConfig
        Else
                
            'Altera a tabela preço nas tabelas ProdutoFilial e Produtos
            If objLojaConfig.sCodigo = "TABELA_PRECO_LOJA" Then
                If objLoja.iTabelaPreco > 0 Then
                    If StrParaInt(sConteudo) <> objLoja.iTabelaPreco Then
                        lErro = CF("TabelaPreco_Altera_Padrao", objLoja)
                        If lErro <> SUCESSO Then gError 80112
                    End If
                End If
            End If
        
            'Atualiza a tabela LojaConfig
            lErro = Comando_ExecutarPos(alComando(1), "UPDATE LojaConfig SET Conteudo = ? ", alComando(0), objLojaConfig.sConteudo)
            If lErro <> AD_SQL_SUCESSO Then gError 80058

        End If
        
    Next
    
    'Chamada a Função responsável pela gravação das Aliquotas na Tabela AliquotasICMS
    lErro = CF("AliquotaICMS_Grava", objLoja)
    If lErro <> SUCESSO Then gError 80105

    'Fecha os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Comando_Fechar (alComando(iIndice))
    Next

    ConfiguraLoja_GravarTrans = SUCESSO

    Exit Function

Erro_ConfiguraLoja_GravarTrans:

    ConfiguraLoja_GravarTrans = gErr

    Select Case gErr

        Case 80055
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 80056, 80057, 130400, 130401
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_LOJACONFIG", gErr, objLojaConfig.sCodigo)

        Case 80058, 130402
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_LOJACONFIG", gErr, objLojaConfig.sCodigo)

        Case 80059
            lErro = Rotina_Erro(vbOKOnly, "ERRO_REGISTRO_LOJA_CONFIG_NAO_ENCONTRADO", gErr, objLojaConfig.sCodigo)

        Case 80076, 80105, 80112

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151025)

    End Select
    
    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function TabelaPreco_Altera_Padrao(ByVal objLojaConfig As ClassLoja) As Long
'Altera a tabela padrão no BD de acordo com a tela de configuração

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim lComando2 As Long
Dim sProduto As String
Dim iTabela As Integer

On Error GoTo Erro_TabelaPreco_Altera_Padrao

    'Abre os comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 80108
    
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 80114
    
    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then gError 80115
    
    'Inicializa a string
    sProduto = String(STRING_PRODUTO, 0)

    lErro = Comando_Executar(lComando, "SELECT ProdutosFilial.Produto FROM TabelasDePrecoItens, ProdutosFilial, Produtos WHERE ProdutosFilial.Produto = Produtos.Codigo AND TabelasDePrecoItens.CodProduto = Produtos.Codigo AND ProdutosFilial.FilialEmpresa = ? AND Produtos.Faturamento = ? AND TabelasDePrecoItens.FilialEmpresa = ? AND TabelasDePrecoItens.CodTabela = ?", sProduto, giFilialEmpresa, PRODUTO_VENDAVEL, giFilialEmpresa, objLojaConfig.iTabelaPreco)
    If lErro <> AD_SQL_SUCESSO Then gError 80109

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 80110
    
    'Executa a alteração da tabela padrão
    Do While lErro = AD_SQL_SUCESSO
    
        lErro = Comando_ExecutarPos(lComando1, "SELECT TabelaPreco FROM ProdutosFilial WHERE ProdutosFilial.Produto = ? AND ProdutosFilial.FilialEmpresa = ? ", 0, iTabela, sProduto, giFilialEmpresa)
        If lErro <> AD_SQL_SUCESSO Then gError 80116
        
        lErro = Comando_BuscarPrimeiro(lComando1)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 80110
        If lErro = AD_SQL_SEM_DADOS Then gError 80118
        
        lErro = Comando_ExecutarPos(lComando2, "UPDATE ProdutosFilial SET TabelaPreco = ?", lComando1, objLojaConfig.iTabelaPreco)
        If lErro <> AD_SQL_SUCESSO Then gError 80111
        
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 80117
        
    Loop
    
    'Fecha comandos
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando)
    
    TabelaPreco_Altera_Padrao = SUCESSO
    
    Exit Function

Erro_TabelaPreco_Altera_Padrao:

    TabelaPreco_Altera_Padrao = gErr

    Select Case gErr
    
        Case 80108, 80114, 80115
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 80109, 80110, 80116, 80117
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOSFILIAL", gErr)

        Case 80111
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_PRODUTOSFILIAL1", gErr, objLojaConfig.iTabelaPreco)

        Case 80118
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTOSFILIAL_INEXISTENTE", gErr, sProduto, giFilialEmpresa)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151026)
    
    End Select
    
    'Fecha comandos
    Call Comando_Fechar(lComando2)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando)
        
    Exit Function
    
End Function

Function POS_Grava(ByVal objPos As ClassPOS) As Long
'Atualiza ou insere um novo registro na tabela POS

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim lTransacao As Long
Dim iFilialEmpresa As Integer

On Error GoTo Erro_POS_Grava

    lComando = 0
    lComando1 = 0
    lTransacao = 0

    'Inicia os comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 80703

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 80704

    'inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 80705
    
    'Verifica se já existe POS cadastrado com o código utilizado
    lErro = Comando_ExecutarPos(lComando, "SELECT FilialEmpresa FROM POS WHERE Codigo = ?", 0, iFilialEmpresa, objPos.sCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 80706

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 80707

    'Se não encontrou
    If lErro = AD_SQL_SEM_DADOS Then

        'Então, insere um novo registro na tabela POS
        lErro = Comando_Executar(lComando1, "INSERT INTO POS (Codigo, FilialEmpresa, Rede) VALUES (?,?,?)", objPos.sCodigo, objPos.iFilialEmpresa, objPos.iRede)
        If lErro <> AD_SQL_SUCESSO Then gError 80708

    'Se encontrou
    Else

        'Faz o lock do POS
        lErro = Comando_LockExclusive(lComando)
        If lErro <> AD_SQL_SUCESSO Then gError 80709
        
        'se já existe este codigo para outra filial
        If iFilialEmpresa <> giFilialEmpresa Then gError 80732
        
        'E altera o registro na tabela POS
        lErro = Comando_ExecutarPos(lComando1, "UPDATE POS SET Rede = ? ", lComando, objPos.iRede)
        If lErro <> AD_SQL_SUCESSO Then gError 80710

    End If

    'Confirma a Transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 80711

    'Fecha os comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    POS_Grava = SUCESSO

    Exit Function

Erro_POS_Grava:

    POS_Grava = gErr

        Select Case gErr

        Case 80703, 80704
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 80705
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 80706, 80707
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_POS", gErr, objPos.sCodigo)

        Case 80708
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_POS", gErr, objPos.sCodigo)

        Case 80710
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_POS", gErr, objPos.sCodigo)

        Case 80709
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_POS", gErr, objPos.sCodigo)

        Case 80711
             Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case 80732
            Call Rotina_Erro(vbOKOnly, "ERRO_POS_OUTRA_FILIALEMPRESA", gErr, objPos.sCodigo, iFilialEmpresa)
                        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151027)

    End Select

    Call Transacao_Rollback
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Function POS_Exclui(ByVal objPos As ClassPOS) As Long
'Exclui o POS

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim lTransacao As Long
Dim iIndice As Integer
Dim sCodigo As String

On Error GoTo Erro_POS_Exclui

   'Abre os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 80723
    Next

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 80724
    
    'Inicializando código
    sCodigo = String(STRING_POS_CODIGO, 0)
   
    'Seleciona POS
    lErro = Comando_ExecutarPos(alComando(0), "SELECT FilialEmpresa FROM POS WHERE Codigo = ?", 0, iFilialEmpresa, objPos.sCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 80725

    'Tenta ler
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 80726
    If lErro = AD_SQL_SEM_DADOS Then gError 80727

    'Lock do POS
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 80728

    lErro = CF("POS_Valida_Exclusao", objPos, alComando(1))
    If lErro <> SUCESSO Then gError 80729

     'Exclui o POS
    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM POS", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 80730

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 80731

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    POS_Exclui = SUCESSO

    Exit Function

Erro_POS_Exclui:

    POS_Exclui = gErr

    Select Case gErr

        Case 80723
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 80724
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 80725, 80726
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_POS", gErr, objPos.sCodigo)

        Case 80727
            Call Rotina_Erro(vbOKOnly, "ERRO_POS_NAO_CADASTRADO", gErr, objPos.sCodigo)

        Case 80728
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_POS", gErr, objPos.sCodigo)

        Case 80729
            
        Case 80730
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_POS", gErr, objPos.sCodigo)

        Case 80731
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151028)

    End Select

    Call Transacao_Rollback

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function POS_Valida_Exclusao(ByVal objPos As ClassPOS, ByVal lComando As Long) As Long
'Verifica se POS ser excluído está vinculado a alguma outra tabela

Dim lErro As Long
Dim lCodigo As Long
Dim sPOS As String

On Error GoTo Erro_POS_Valida_Exclusao
    
    'inicializa POS
    sPOS = String(STRING_POS_CODIGO, 0)

    'verifica se POS esta relacionado com ECF
    lErro = Comando_Executar(lComando, "SELECT POS FROM Caixa WHERE POS = ? ", sPOS, objPos.sCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 80717

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 80718

    'POS está relacionado com ECF
    If lErro = AD_SQL_SUCESSO Then gError 80719
    
    'inicializa POS
    sPOS = String(STRING_POS_CODIGO, 0)

    'verifica se POS esta relacionado com Boleto
    lErro = Comando_Executar(lComando, "SELECT POS FROM Boleto WHERE POS = ?", sPOS, objPos.sCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 80720

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 80721

    'POS está relacionado com Boleto
    If lErro = AD_SQL_SUCESSO Then gError 80722
    
    POS_Valida_Exclusao = SUCESSO

    Exit Function

Erro_POS_Valida_Exclusao:

    POS_Valida_Exclusao = gErr

    Select Case gErr

        Case 80717, 80718
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CAIXA", gErr, objPos.sCodigo)

        Case 80719
            Call Rotina_Erro(vbOKOnly, "ERRO_POS_VINCULADO_CAIXA", gErr, objPos.sCodigo)

        Case 80720, 80721
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BOLETO", gErr)

        Case 80722
            Call Rotina_Erro(vbOKOnly, "ERRO_POS_VINCULADO_BOLETO", gErr, objPos.sCodigo)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151029)

    End Select

    Exit Function

End Function

Function AdmMeioPagto_Grava(ByVal objAdmMeioPagto As ClassAdmMeioPagto) As Long
'Grava a Administradora

Dim lErro As Long
Dim lErro1 As Long
Dim alComando(0 To 4) As Long
Dim lTransacao As Long
Dim iIndice As Integer
Dim lEndereco As Long
Dim iCodigo As Integer
Dim objLog As New ClassLog
Dim objTipoMeioPagtoLoja As New ClassTMPLoja
Dim objAdmMeioPagtoBD As New ClassAdmMeioPagto
Dim objAdmMeioPagtoCondPagtoBD As ClassAdmMeioPagtoCondPagto
Dim objAdmMeioPagtoCondPagto As ClassAdmMeioPagtoCondPagto
Dim dtDataLog As Date
Dim objRede As New ClassRede

On Error GoTo Erro_AdmMeioPagto_Grava

    'Abertura dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 104107
    Next
    
    'Abre a Transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 104108
    
    objTipoMeioPagtoLoja.iTipo = objAdmMeioPagto.iTipoMeioPagto
    
    'Lê os dados de meio de pagamento apartir do código.
    lErro = CF("TipoMeioPagtoLoja_Le", objTipoMeioPagtoLoja)
    If lErro <> SUCESSO And lErro <> 80573 Then gError 110088

    'se o tipo de meio de pagamento nao estiver cadastrado ==> erro
    If lErro <> SUCESSO Then gError 110089
     
    'se o tipo de meio pagto exigir a especificacao de rede e a rede nao for especificada ==> erro
    If objTipoMeioPagtoLoja.iExigeRede = TIPOMEIOPAGTOLOJA_EXIGE_REDE And objAdmMeioPagto.iRede = 0 Then gError 110090
    
'    'Seleciona no Bd a Forma de Pagamento com o nome que se Esta tentando Gravar
'    lErro = Comando_Executar(alComando(4), "SELECT codigo FROM AdmMeioPagto WHERE FilialEmpresa = ? AND Nome = ? AND Codigo <> ?", iCodigo, objAdmMeioPagto.iFilialEmpresa, objAdmMeioPagto.sNome, objAdmMeioPagto.iCodigo)
'    If lErro <> SUCESSO Then gError 104173
'
'    lErro = Comando_BuscarPrimeiro(alComando(4))
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 104174
'    'Se Encontrou Gera Erro
'    If lErro <> AD_SQL_SEM_DADOS Then gError 104175
    
    objRede.iAtivo = -1
    
    'Faz "lock" nas tabelas relacionadas a AdmMeioPagto
    lErro = CF("AdmMeioPagto_Lock_Gravacao", objAdmMeioPagto, objRede)
    If lErro <> SUCESSO Then gError 104109

    'se a rede estiver inativo e a administradora estiver ativa ==> erro
    If objRede.iAtivo = REDE_INATIVO And objAdmMeioPagto.iAtivo = ADMMEIOPAGTO_ATIVO Then gError 126451

    'Tenta ler a Administradora passada por objAdmMeioPagto
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Codigo , Endereco, DataLog FROM AdmMeioPagto WHERE Codigo = ? AND FilialEmpresa = ? ", 0, iCodigo, lEndereco, dtDataLog, objAdmMeioPagto.iCodigo, objAdmMeioPagto.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 104110

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 104111

    If objAdmMeioPagto.lEndereco = ENVIO_ENDERECO Then

        If lEndereco = 0 Then
            lErro1 = CF("Endereco_Automatico", lEndereco)
            If lErro1 <> SUCESSO Then gError 104112
        End If
        
        'Carrega os dados em objAdmMeioPagto
        objAdmMeioPagto.objEndereco.lCodigo = lEndereco
        objAdmMeioPagto.lEndereco = lEndereco
    
        lErro1 = CF("Endereco_Grava", objAdmMeioPagto.objEndereco)
        If lErro1 <> SUCESSO Then gError 104113
    
    End If

    'Se não encontrou, INSERÇÃO
    If lErro = AD_SQL_SEM_DADOS Then
    
        objAdmMeioPagto.iTipoLog = INCLUSAO_ADMMEIOPAGTO_CAIXA_CENTRAL
        objLog.iOperacao = INCLUSAO_ADMMEIOPAGTO_CAIXA_CENTRAL
        
        'Grava a nova Administradora no BD
        lErro = Comando_Executar(alComando(1), "INSERT INTO AdmMeioPagto (Codigo, FilialEmpresa , Nome, Rede , TaxaVista, TaxaParcelado,  TipoMeioPagto, DefasagemPagtoVista, ContaCorrenteInterna,  GeraTituloRec , Endereco, CodBanco, Agencia, Ativo, ProxCodParcelamento, DataLog) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", objAdmMeioPagto.iCodigo, objAdmMeioPagto.iFilialEmpresa, objAdmMeioPagto.sNome, objAdmMeioPagto.iRede, objAdmMeioPagto.dTaxaVista, objAdmMeioPagto.dTaxaParcelado, objAdmMeioPagto.iTipoMeioPagto, objAdmMeioPagto.iDefasagemPagtoVista, objAdmMeioPagto.iContaCorrenteInterna, objAdmMeioPagto.iGeraTituloRec, objAdmMeioPagto.lEndereco, objAdmMeioPagto.iCodBanco, objAdmMeioPagto.sAgencia, objAdmMeioPagto.iAtivo, PARCELAMENTO_AVISTA + 1, DATA_NULA)
        If lErro <> AD_SQL_SUCESSO Then gError 104114

        'Grava informações da Administradora no BD
        lErro = CF("AdmMeioPagtoCondPagto_Grava", objAdmMeioPagto)
        If lErro <> SUCESSO Then gError 104115

        If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
            
            Call AdmMeioPagto_Carrega_Log(objLog, objAdmMeioPagto)
            
            'Monta Registro Para a Tabela de Log
            lErro = CF("Log_Grava", objLog)
            If lErro <> SUCESSO Then gError 126051
            
        End If
        
    'Encontrou, ALTERAÇÃO
    Else
        
        objLog.iOperacao = ALTERACAO_ADMMEIOPAGTO_CAIXA_CENTRAL
        
        'Faz LockExclusive na Administradora
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 104116
        
        'Log de Alteração
        objAdmMeioPagto.iTipoLog = ALTERACAO_ADMMEIOPAGTO_CAIXA_CENTRAL
        
        objAdmMeioPagtoBD.iCodigo = objAdmMeioPagto.iCodigo
        objAdmMeioPagtoBD.iFilialEmpresa = objAdmMeioPagto.iFilialEmpresa
        
        'Ler para Comparar a minha Coleção da Tela com o Banco de Dados
        lErro = CF("AdmMeioPagtoCondPagto_Le", objAdmMeioPagtoBD)
        If lErro <> SUCESSO Then gError 104181
        
        For iIndice = objAdmMeioPagtoBD.colCondPagtoLoja.Count To 1 Step -1
            
            Set objAdmMeioPagtoCondPagtoBD = objAdmMeioPagtoBD.colCondPagtoLoja(iIndice)
            
            For Each objAdmMeioPagtoCondPagto In objAdmMeioPagto.colCondPagtoLoja
            
                If objAdmMeioPagtoCondPagto.iAdmMeioPagto = objAdmMeioPagtoCondPagtoBD.iAdmMeioPagto And objAdmMeioPagtoCondPagto.iFilialEmpresa = objAdmMeioPagtoCondPagtoBD.iFilialEmpresa And objAdmMeioPagtoCondPagto.iParcelamento = objAdmMeioPagtoCondPagtoBD.iParcelamento Then
            
                    objAdmMeioPagtoBD.colCondPagtoLoja.Remove (iIndice)
                    
                    Exit For
                    
                End If
            
            Next
        
        Next
        
        lErro = CF("AdmMeioPagtoCondPagto_Exclui", objAdmMeioPagtoBD)
        If lErro <> SUCESSO Then gError 104118

        'Após a exclusão,grava novas informações da Administradora no BD
        lErro = CF("AdmMeioPagtoCondPagto_Grava", objAdmMeioPagto)
        If lErro <> SUCESSO Then gError 104115
        
        If dtDataLog <> DATA_NULA Then
            lErro = Comando_ExecutarPos(alComando(3), "UPDATE AdmMeioPagto SET Ativo = ?", alComando(0), objAdmMeioPagto.iAtivo)
        Else
            'Atualiza os Dados da Administradora
            If objAdmMeioPagto.iCodigo = MEIO_PAGAMENTO_CARNE Then
                lErro = Comando_ExecutarPos(alComando(3), "UPDATE AdmMeioPagto SET Rede = ? , TaxaVista = ?, TaxaParcelado = ? ,  DefasagemPagtoVista = ?, ContaCorrenteInterna = ?,  GeraTituloRec = ? , Endereco = ? , CodBanco = ?, Agencia = ? , Ativo = ?", alComando(0), objAdmMeioPagto.iRede, objAdmMeioPagto.dTaxaVista, objAdmMeioPagto.dTaxaParcelado, objAdmMeioPagto.iDefasagemPagtoVista, objAdmMeioPagto.iContaCorrenteInterna, objAdmMeioPagto.iGeraTituloRec, objAdmMeioPagto.lEndereco, objAdmMeioPagto.iCodBanco, objAdmMeioPagto.sAgencia, objAdmMeioPagto.iAtivo)
            Else
                lErro = Comando_ExecutarPos(alComando(3), "UPDATE AdmMeioPagto SET Nome = ? , Rede = ? , TaxaVista = ?, TaxaParcelado = ? ,  TipoMeioPagto= ?, DefasagemPagtoVista = ?, ContaCorrenteInterna = ?,  GeraTituloRec = ? , Endereco = ? , CodBanco = ?, Agencia = ? , Ativo = ?", alComando(0), objAdmMeioPagto.sNome, objAdmMeioPagto.iRede, objAdmMeioPagto.dTaxaVista, objAdmMeioPagto.dTaxaParcelado, objAdmMeioPagto.iTipoMeioPagto, objAdmMeioPagto.iDefasagemPagtoVista, objAdmMeioPagto.iContaCorrenteInterna, objAdmMeioPagto.iGeraTituloRec, objAdmMeioPagto.lEndereco, objAdmMeioPagto.iCodBanco, objAdmMeioPagto.sAgencia, objAdmMeioPagto.iAtivo)
            End If
        End If
            
        If lErro <> AD_SQL_SUCESSO Then gError 104117

        If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
            
            Call AdmMeioPagto_Carrega_Log(objLog, objAdmMeioPagto)
            
            'Monta Registro Para a Tabela de Log
            lErro = CF("Log_Grava", objLog)
            If lErro <> SUCESSO Then gError 104127
            
        End If

    End If
    
    'Confirma Transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 104119

    'Fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    AdmMeioPagto_Grava = SUCESSO

    Exit Function

Erro_AdmMeioPagto_Grava:

    AdmMeioPagto_Grava = gErr

    Select Case gErr

        Case 104107
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 104108
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 104175
            lErro = Rotina_Erro(vbOKOnly, "ERRO_NOME_ADMMEIOPAGTO_EXISTENTE", gErr)

        Case 104109, 104112, 104113, 104115, 104118, 104174, 104127, 110088, 126051, 126052

        Case 104110, 104111
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ADMMEIOPAGTO", gErr, objAdmMeioPagto.iCodigo)

        Case 104114
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_ADMMEIOPAGTO", gErr, objAdmMeioPagto.iCodigo)

        Case 104116
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_ADMMEIOPAGTO", gErr, objAdmMeioPagto.iCodigo)

        Case 104117
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_ADMINISTRADORA", gErr, objAdmMeioPagto.iCodigo)

        Case 104119
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case 104176
            lErro = Rotina_Erro(vbOKOnly, "ERRO_SOMA_PERCENTUAL_ERRADA", gErr, objAdmMeioPagto.iCodigo)

        Case 110089
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TIPOMEIOPAGTOLOJA_NAOENCONTRADO", gErr, objAdmMeioPagto.iTipoMeioPagto)

        Case 110090
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TIPOMEIOPAGTOLOJA_EXIGE_REDE", gErr, objAdmMeioPagto.iTipoMeioPagto)

        Case 117572
            Call Rotina_Erro(vbOKOnly, "ERRO_ADMMEIOPAGTOCONDPAGTO_DATALOG", gErr, objAdmMeioPagtoCondPagtoBD.iAdmMeioPagto, objAdmMeioPagtoCondPagtoBD.iParcelamento)

        Case 126451
            Call Rotina_Erro(vbOKOnly, "ERRO_REDE_INATIVA_ADMMEIOPAGTO_ATIVO", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151030)

    End Select

    Call Transacao_Rollback

    'Fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function AdmMeioPagto_Lock_Gravacao(ByVal objAdmMeioPagto As ClassAdmMeioPagto, objRede As ClassRede) As Long

Dim lErro As Long
Dim lComando As Long

On Error GoTo Erro_AdmMeioPagto_Lock_Gravacao

    'Abertura do comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 104098

    'Se a conta tiver sido preenchida
    If objAdmMeioPagto.iContaCorrenteInterna <> 0 Then

        'Faz "lock" na conta relacionada a AdmMeioPagto
        lErro = CF("ContaCorrenteInt_Lock", objAdmMeioPagto.iContaCorrenteInterna, lComando)
        If lErro <> SUCESSO And lErro <> 41636 Then gError 104099
        If lErro = 41636 Then gError 104101

    End If

    'Se o banco tiver sido preenchido
    If objAdmMeioPagto.iCodBanco <> 0 Then

        'Faz "lock" no banco relacionado a AdmMeioPagto
        lErro = CF("Banco_Lock", lComando, objAdmMeioPagto.iCodBanco)
        If lErro <> SUCESSO And lErro <> 19384 Then gError 104100
        
        If lErro = 19384 Then gError 104102

    End If

    If objAdmMeioPagto.iRede <> 0 Then
    
        objRede.iCodigo = objAdmMeioPagto.iRede
        objRede.iFilialEmpresa = objAdmMeioPagto.iFilialEmpresa
    
        'Faz lock na Tabela de Redes
        lErro = Rede_Lock(objRede)
        If lErro <> SUCESSO And lErro <> 104104 Then gError 104103
        
        'Se não encontrou a Rede no Bd
        If lErro = 104104 Then gError 104135
        
    End If

    Call Comando_Fechar(lComando)

    AdmMeioPagto_Lock_Gravacao = SUCESSO

    Exit Function

Erro_AdmMeioPagto_Lock_Gravacao:

    AdmMeioPagto_Lock_Gravacao = gErr

    Select Case gErr

        Case 104098
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 104099, 104100, 104103

        Case 104101
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CONTACORRENTEINTERNA_NAO_CADASTRADA", gErr, objAdmMeioPagto.iContaCorrenteInterna)

        Case 104102
            lErro = Rotina_Erro(vbOKOnly, "ERRO_BANCO_NAO_CADASTRADO", gErr, objAdmMeioPagto.iCodBanco)

        Case 104135
            lErro = Rotina_Erro(vbOKOnly, "ERRO_REDE_NAO_CADASTRADA", gErr, objAdmMeioPagto.iCodBanco)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151031)

     End Select

    Call Comando_Fechar(lComando)

     Exit Function

End Function

Function Rede_Lock(ByVal objRede As ClassRede) As Long
'le o Rede e faz lock shared

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(1 To 1) As Long
Dim tRede As typeRede

On Error GoTo Erro_Rede_Lock

    'Abertura dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 126450
    Next

    tRede.sNome = String(STRING_REDE_NOME, 0)

    lErro = Comando_ExecutarLockado(alComando(1), "SELECT Nome, Ativo FROM Redes WHERE Codigo = ? AND FilialEmpresa = ? ", tRede.sNome, tRede.iAtivo, objRede.iCodigo, objRede.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 104105

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 104106

    If lErro = AD_SQL_SEM_DADOS Then gError 104104
    
    lErro = Comando_LockShared(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 104107
    
    objRede.sNome = tRede.sNome
    objRede.iAtivo = tRede.iAtivo
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Rede_Lock = SUCESSO
    
    Exit Function
    
Erro_Rede_Lock:

    Rede_Lock = gErr
    
    Select Case gErr
        
        Case 104104
        
        Case 104105, 104106
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_REDES", gErr, objRede.iCodigo)
          
        Case 104107
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_REDE", gErr, objRede.iCodigo)
            
        Case 126450
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151032)
    
    End Select
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Function AdmMeioPagtoCondPagto_Exclui(ByVal objAdmMeioPagto As ClassAdmMeioPagto) As Long
'Exclui os Itens da AdmMeioPagtoCondPagto

Dim lErro As Long
Dim alComando(0 To 2) As Long
Dim iIndice As Integer
Dim iAdmMeioPagto As Integer
Dim iParcelamento As Integer
Dim iParcelamento2 As Integer
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim dtDataLog As Date

On Error GoTo Erro_AdmMeioPagtoCondPagto_Exclui

    'Abertura dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 104126
    Next
    
    For Each objAdmMeioPagtoCondPagto In objAdmMeioPagto.colCondPagtoLoja
    
        'Lê AdmMeioPagtoCondPagto usando como parâmetro o Código da Administradora
        lErro = Comando_ExecutarPos(alComando(0), "SELECT AdmMeioPagto , Parcelamento, DataLog FROM AdmMeioPagtoCondPagto WHERE AdmMeioPagto = ? AND FilialEmpresa = ? AND Parcelamento = ? ", 0, iAdmMeioPagto, iParcelamento, dtDataLog, objAdmMeioPagtoCondPagto.iAdmMeioPagto, objAdmMeioPagtoCondPagto.iFilialEmpresa, objAdmMeioPagtoCondPagto.iParcelamento)
        If lErro <> AD_SQL_SUCESSO Then gError 104120

        lErro = Comando_BuscarPrimeiro(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 104121
    
        Do While lErro = AD_SQL_SUCESSO

            'se o registro já foi enviado pro log ==> nao pode excluir
            If dtDataLog <> DATA_NULA Then gError 110102

            'Faz "LockExclusive" de AdmMeioPagtoCondPagto
            lErro = Comando_LockExclusive(alComando(0))
            If lErro <> AD_SQL_SUCESSO Then gError 104122

            'Exclui cada Parcelamento Ligado as AdmMeioPagtoCondPagto
            lErro = CF("AdmMeioPagtoParcelas_Exclui", objAdmMeioPagtoCondPagto)
            If lErro <> SUCESSO Then gError 104129
        
            'Exclui o AdmMeioPagtoCondPagto do banco de dados
            lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM AdmMeioPagtoCondPagto", alComando(0))
            If lErro <> AD_SQL_SUCESSO Then gError 104123
    
            'Busca próximo AdmMeioPagtoCondPagto
            lErro = Comando_BuscarProximo(alComando(0))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 104124

        Loop

    Next

    'Fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    AdmMeioPagtoCondPagto_Exclui = SUCESSO

    Exit Function

Erro_AdmMeioPagtoCondPagto_Exclui:

    AdmMeioPagtoCondPagto_Exclui = gErr

    Select Case gErr

        Case 104129
            'Erro tratado dentro da Função Chamadora
        
        Case 104126
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 104120, 104121, 104124
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ADMMEIOPAGTOCONDPAGTO", gErr)

        Case 104122
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_ADMMEIOPAGTOCONDPAGTO", gErr)

        Case 104123
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_ADMMEIOPAGTOCONDPAGTO", gErr)
        
        Case 104182, 104183
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LETURA_MOVIMENTOS_CAIXA", gErr)
            
        Case 104184
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PARCELAMENTO_VINCULADO_CAIXA", gErr, objAdmMeioPagtoCondPagto.sNomeParcelamento)
            
        Case 110102
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ADMMEIOPAGTOCONDPAGTO_DATALOG", gErr, iAdmMeioPagto, iParcelamento)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151033)

    End Select

    'Fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function AdmMeioPagtoParcelas_Exclui(ByVal objAdmMeioPagtoCondPagto As ClassAdmMeioPagtoCondPagto) As Long
'Exclui os Itens da Parcela Viculado A AdmMeioPagtoCondPagto

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim iCondPagto As Integer
Dim iFilialEmpresa As Integer
Dim iParcelamento As Integer

Dim objAdmMeioPagtoParcelas As New ClassAdmMeioPagtoParcelas

On Error GoTo Erro_AdmMeioPagtoParcelas_Exclui

    'Abertura dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 104133
    Next
    
    'Lê  e Seleciona os Parcelamntos Vinculados a AdmMeioPagtoCondPagto
    lErro = Comando_ExecutarPos(alComando(0), "SELECT AdmMeioPagto, FilialEmpresa , Parcelamento FROM AdmMeioPagtoParcelas WHERE AdmMeiopagto = ? AND FilialEmpresa =? AND Parcelamento = ? ", 0, iCondPagto, iFilialEmpresa, iParcelamento, objAdmMeioPagtoCondPagto.iAdmMeioPagto, objAdmMeioPagtoCondPagto.iFilialEmpresa, objAdmMeioPagtoCondPagto.iParcelamento)
    If lErro <> AD_SQL_SUCESSO Then gError 104131

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 104130
        
    Do While lErro = AD_SQL_SUCESSO

        'Faz "LockExclusive" de AdmMeioPagtoParcelas
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 104132

        'Exclui o AdmMeioPagtoCondPagto do banco de dados
        lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM AdmMeioPagtoParcelas", alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 104134

        'Busca próximo AdmMeioPagtoCondPagto
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 104135

    Loop

    'Fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    AdmMeioPagtoParcelas_Exclui = SUCESSO

    Exit Function

Erro_AdmMeioPagtoParcelas_Exclui:

    AdmMeioPagtoParcelas_Exclui = gErr

    Select Case gErr

        Case 104133
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 104130, 104131, 104135
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ADMMEIOPAGTOPARCELAS", gErr)

        Case 104132
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_ADMMEIOPAGTOPARCELAS", gErr)

        Case 104134
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_ADMMEIOPAGTOPARCELAS", gErr, objAdmMeioPagtoCondPagto.iParcelamento)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151034)

    End Select

    'Fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function AdmMeioPagtoCondPagto_Grava(ByVal objAdmMeioPagto As ClassAdmMeioPagto, Optional ByVal iCargaLog As Integer = 0) As Long
'Insere os Itens da Administradora no BD

Dim lErro As Long
Dim alComando(0 To 2) As Long
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim iIndice As Integer
Dim iParcelamento As Integer
Dim dtDataLog As Date

On Error GoTo Erro_AdmMeioPagtoCondPagto_Grava

    'Abertura dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 104133
    Next
    
    If objAdmMeioPagto.colCondPagtoLoja.Count = 0 Then gError 104204
    
    For Each objAdmMeioPagtoCondPagto In objAdmMeioPagto.colCondPagtoLoja

        'Atribuições de Chave Primária
        objAdmMeioPagtoCondPagto.iAdmMeioPagto = objAdmMeioPagto.iCodigo
        objAdmMeioPagtoCondPagto.iFilialEmpresa = objAdmMeioPagto.iFilialEmpresa
        
        'Lê e Seleciona os Parcelamntos Vinculados a AdmMeioPagtoCondPagto
        lErro = Comando_ExecutarPos(alComando(0), "SELECT Parcelamento, DataLog FROM AdmMeioPagtoCondPagto WHERE AdmMeiopagto = ? AND FilialEmpresa =? AND Parcelamento = ? ", 0, iParcelamento, dtDataLog, objAdmMeioPagtoCondPagto.iAdmMeioPagto, objAdmMeioPagtoCondPagto.iFilialEmpresa, objAdmMeioPagtoCondPagto.iParcelamento)
        If lErro <> AD_SQL_SUCESSO Then gError 104187

        lErro = Comando_BuscarPrimeiro(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 104188

        If lErro = AD_SQL_SEM_DADOS Then


            If iCargaLog <> CARGA_LOG_BACKOFFICE Then

                If UCase(objAdmMeioPagtoCondPagto.sNomeParcelamento) = "A VISTA" Or _
                   UCase(objAdmMeioPagtoCondPagto.sNomeParcelamento) = "À VISTA" Or _
                   UCase(objAdmMeioPagtoCondPagto.sNomeParcelamento) = "ÀVISTA" Or _
                   UCase(objAdmMeioPagtoCondPagto.sNomeParcelamento) = "AVISTA" Then
                   objAdmMeioPagtoCondPagto.iParcelamento = PARCELAMENTO_AVISTA
                Else

                    'Gera código automático de Parcelamento
                    lErro = CF("AdmMeioPagtoParcelamento_Automatico", objAdmMeioPagto.iCodigo, iParcelamento, objAdmMeioPagto.iFilialEmpresa)
                    If lErro <> SUCESSO Then Error 115030
                    
                    'Atribuições de código interno do parcelamento
                    objAdmMeioPagtoCondPagto.iParcelamento = iParcelamento

                End If

            End If

            'Grava AdmMeioPagtoCondPagto na Tabela
            lErro = Comando_Executar(alComando(1), "INSERT INTO AdmMeioPagtoCondPagto (AdmMeioPagto, FilialEmpresa, Parcelamento, NomeParcelamento, NumParcelas, ParcelasRecebto, Taxa , ValorMinimo , Desconto , JurosParcelamento , Juros, Ativo, DataLog, PreDatado)   VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", objAdmMeioPagto.iCodigo, objAdmMeioPagto.iFilialEmpresa, objAdmMeioPagtoCondPagto.iParcelamento, objAdmMeioPagtoCondPagto.sNomeParcelamento, objAdmMeioPagtoCondPagto.iNumParcelas, objAdmMeioPagtoCondPagto.iParcelasRecebto, objAdmMeioPagtoCondPagto.dTaxa, objAdmMeioPagtoCondPagto.dValorMinimo, objAdmMeioPagtoCondPagto.dDesconto, objAdmMeioPagtoCondPagto.iJurosParcelamento, objAdmMeioPagtoCondPagto.dJuros, objAdmMeioPagtoCondPagto.iAtivo, DATA_NULA, objAdmMeioPagtoCondPagto.iPreDatado)
            If lErro <> AD_SQL_SUCESSO Then gError 104142
            
            lErro = CF("AdmMeioPagtoParcelas_Inclui", objAdmMeioPagtoCondPagto, iCargaLog)
            If lErro <> SUCESSO Then gError 104143
        
        Else
        
            If dtDataLog = DATA_NULA Then
        
                'Atualiza os Dados da Administradora
                lErro = Comando_ExecutarPos(alComando(2), "UPDATE AdmMeioPagtoCondPagto SET NomeParcelamento = ? , NumParcelas= ?, ParcelasRecebto = ?, Taxa = ?,  ValorMinimo = ? , Desconto = ? , JurosParcelamento = ?, Juros = ?, Ativo = ?, PreDatado = ? ", alComando(0), objAdmMeioPagtoCondPagto.sNomeParcelamento, objAdmMeioPagtoCondPagto.iNumParcelas, objAdmMeioPagtoCondPagto.iParcelasRecebto, objAdmMeioPagtoCondPagto.dTaxa, objAdmMeioPagtoCondPagto.dValorMinimo, objAdmMeioPagtoCondPagto.dDesconto, objAdmMeioPagtoCondPagto.iJurosParcelamento, objAdmMeioPagtoCondPagto.dJuros, objAdmMeioPagtoCondPagto.iAtivo, objAdmMeioPagtoCondPagto.iPreDatado)
                If lErro <> AD_SQL_SUCESSO Then gError 104189
    
                lErro = CF("AdmMeioPagtoParcelas_Exclui", objAdmMeioPagtoCondPagto)
                If lErro <> SUCESSO Then gError 104190
                
                lErro = CF("AdmMeioPagtoParcelas_Inclui", objAdmMeioPagtoCondPagto, iCargaLog)
                If lErro <> SUCESSO Then gError 104191
            
            Else
            
                'Atualiza os Dados da Administradora
                lErro = Comando_ExecutarPos(alComando(2), "UPDATE AdmMeioPagtoCondPagto SET Ativo = ?, ValorMinimo = ? ", alComando(0), objAdmMeioPagtoCondPagto.iAtivo, objAdmMeioPagtoCondPagto.dValorMinimo)
                If lErro <> AD_SQL_SUCESSO Then gError 126055
            
            End If
            
            
        End If
           
    Next
    
    'Fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    AdmMeioPagtoCondPagto_Grava = SUCESSO

    Exit Function

Erro_AdmMeioPagtoCondPagto_Grava:

    AdmMeioPagtoCondPagto_Grava = gErr

    Select Case gErr
        
        Case 104090, 104091, 104143
        
        Case 104140
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 104142
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_ADMMEIOPAGTOCONDPAGTO", gErr)
        
        Case 104187
            lErro = Rotina_Erro(vbOKOnly, "ERRO_SELECAO_ADMMEIOPAGTOCONDPAGTO", gErr)
        
        Case 104189, 126055
            lErro = Rotina_Erro(vbOKOnly, "ERRO_UPDATE_ADMMEIOPAGTOCONDPAGTO", gErr)

        Case 104204
            Call Rotina_Erro(vbOKOnly, "ERRO_SEM_ADMMEIOPAGTOCONDPAGTO", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151035)

    End Select

    'Fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Function AdmMeioPagtoParcelas_Inclui(ByVal objAdmMeioPagtoCondPagto As ClassAdmMeioPagtoCondPagto, Optional ByVal iCargaLog As Integer = 0) As Long
'Insere os Itens da Administradora no BD

Dim lErro As Long
Dim lComando As Long
Dim objAdmMeioPagtoParcelas As New ClassAdmMeioPagtoParcelas
Dim iIndice As Integer

On Error GoTo Erro_AdmMeioPagtoParcelas_Inclui

    'Abertura dos Comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 104138
   
    iIndice = 0

    For Each objAdmMeioPagtoParcelas In objAdmMeioPagtoCondPagto.colParcelas
        
        If iCargaLog <> CARGA_LOG_BACKOFFICE Then
        
            iIndice = iIndice + 1
            
            'Atribui o código interno do parcelamento
            objAdmMeioPagtoParcelas.iParcelamento = objAdmMeioPagtoCondPagto.iParcelamento
            
            
            objAdmMeioPagtoParcelas.iParcela = iIndice
        
        End If
        
        'Grava AdmMeioPagtoCondPagto na Tabela
        lErro = Comando_Executar(lComando, "INSERT INTO AdmMeioPagtoParcelas (AdmMeioPagto, FilialEmpresa, Parcelamento, Parcela ,PercRecebimento,IntervaloRecebto) VALUES (?, ?, ?, ?, ?, ?)", objAdmMeioPagtoCondPagto.iAdmMeioPagto, objAdmMeioPagtoCondPagto.iFilialEmpresa, objAdmMeioPagtoParcelas.iParcelamento, objAdmMeioPagtoParcelas.iParcela, objAdmMeioPagtoParcelas.dPercRecebimento, objAdmMeioPagtoParcelas.iIntervaloRecebimento)
        If lErro <> AD_SQL_SUCESSO Then gError 104136
    
    Next
        
   'Fecha o comando
    Call Comando_Fechar(lComando)

    AdmMeioPagtoParcelas_Inclui = SUCESSO

    Exit Function

Erro_AdmMeioPagtoParcelas_Inclui:

    AdmMeioPagtoParcelas_Inclui = gErr

    Select Case gErr

        Case 104138
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 104139
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_ADMMEIOPAGTOCONDPAGTO", gErr)

        Case 104136
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_PARCELAS", gErr)
        
        Case 104178
            lErro = Rotina_Erro(vbOKOnly, "ERRO_SEM_PARCELAS", gErr, objAdmMeioPagtoCondPagto.iParcelamento)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151036)

    End Select

   'Fecha o comando
    Call Comando_Fechar(lComando)
    

    Exit Function

End Function

Function AdmMeioPagto_Exclui(ByVal objAdmMeioPagto As ClassAdmMeioPagto) As Long
'Exclui o AdmMeioPagto

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim lTransacao As Long
Dim lTotal As Long
Dim iIndice As Integer
Dim lEndereco As Long
Dim iCodigo As Integer
Dim objLog As New ClassLog
Dim dtDataLog As Date

On Error GoTo Erro_AdmMeioPagto_Exclui

   'Abre os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 104147
    Next

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 104157
    
    'Seleciona AdmMeioPagto
    
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Codigo , FilialEmpresa , Endereco, DataLog FROM AdmMeioPagto WHERE Codigo = ? AND FilialEmpresa =? ", 0, iCodigo, iFilialEmpresa, lEndereco, dtDataLog, objAdmMeioPagto.iCodigo, objAdmMeioPagto.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 104148

    'Tenta ler
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 104149
    
    If lErro = AD_SQL_SEM_DADOS Then gError 104150

    'se os dados já foram transferidos para o log ==> erro
    If dtDataLog <> DATA_NULA Then gError 110103

    'Lock do AdmMeioPagto
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 104151

    lErro = AdmMeioPagto_Valida_Exclusao(objAdmMeioPagto, alComando(1))
    If lErro <> SUCESSO Then gError 104152

    lErro = CF("AdmMeioPagtoCondPagto_Exclui", objAdmMeioPagto)
    If lErro <> SUCESSO Then gError 104153
    
    'Verifica se a variavel lEndereco contem informações
    If lEndereco > 0 Then
        lErro = CF("Endereco_Exclui", lEndereco)
        If lErro <> SUCESSO Then gError 104154
    End If

    'Exclui o AdmMeioPagto
    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM AdmMeioPagto", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 104155
    
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
    
        'Passa p/ o objLog o tipo de operação a ser realizada.
        objLog.iOperacao = EXCLUSAO_ADMMEIOPAGTO_CAIXA_CENTRAL
    
        'Monta a String de log que deverá ser gravada.
        Call AdmMeioPagto_Carrega_Log1(objLog, objAdmMeioPagto)
        
        'Monta Registro Para a Tabela de Log
        lErro = CF("Log_Grava", objLog)
        If lErro <> SUCESSO Then gError 118118
    End If
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 104156

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    AdmMeioPagto_Exclui = SUCESSO

    Exit Function

Erro_AdmMeioPagto_Exclui:

    AdmMeioPagto_Exclui = gErr

    Select Case gErr
        
        Case 104152, 104127, 118118
        'Erro tratado dentro da Função Chamadora
        
        Case 104147
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 104157
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 104148, 104149
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ADMMEIOPAGTO", gErr, objAdmMeioPagto.iCodigo)

        Case 104151
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_ADMMEIOPAGTO", gErr, objAdmMeioPagto.iCodigo)

        Case 104155
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_ADMMEIOPAGTO", gErr, objAdmMeioPagto.iCodigo)

        Case 104156
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case 104150
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ADMMEIOPAGTO_NAO_CADASTRADO", gErr, objAdmMeioPagto.iCodigo)

        Case 104154, 104153

        Case 110103
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ADMMEIOPAGTO_DATALOG", gErr, objAdmMeioPagto.iCodigo)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151037)

    End Select

    Call Transacao_Rollback

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function AdmMeioPagto_Valida_Exclusao(ByVal objAdmMeioPagto As ClassAdmMeioPagto, lComando As Long) As Long
'Verifica se AdmMeioPagto a ser excluído está vinculado a alguma outra tabela

Dim lErro As Long
Dim lCodigo As Long
Dim iAdmMeioPagto As Integer

On Error GoTo Erro_AdmMeioPagto_Valida_Exclusao
    
    'Verifica se AdmMeioPagto esta relacionado com Bordero Vale Ticket
    lErro = Comando_Executar(lComando, "SELECT AdmMeioPagto FROM BorderoValeTicket WHERE AdmMeioPagto = ? AND FilialEmpresa = ? ", iAdmMeioPagto, objAdmMeioPagto.iCodigo, objAdmMeioPagto.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 104164

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 104165

    'AdmMeioPagto está relacionada com BorderoValeTicket
    If lErro = AD_SQL_SUCESSO Then gError 104166
   
    'Verifica se AdmMeioPagto esta relacionado com Bordero Boleto
    lErro = Comando_Executar(lComando, "SELECT AdmMeioPagto FROM BorderoBoleto, BorderoBoletoItem WHERE BorderoBoleto.NumBordero = BorderoBoletoItem.NumIntDoc AND AdmMeioPagto = ? AND BorderoBoletoItem.FilialEmpresa = ? AND BorderoBoletoItem.FilialEmpresa = BorderoBoleto.FilialEmpresa ", iAdmMeioPagto, objAdmMeioPagto.iCodigo, objAdmMeioPagto.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 104167

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 104168

    'AdmMeioPagto está relacionada com BorderoBoleto
    If lErro = AD_SQL_SUCESSO Then gError 104169

    'verifica se AdmMeioPagto esta relacionado com FechamentoBoletos
    lErro = Comando_Executar(lComando, "SELECT AdmMeioPagto FROM MovimentosCaixa WHERE AdmMeioPagto = ? AND FilialEmpresa = ? ", iAdmMeioPagto, objAdmMeioPagto.iCodigo, objAdmMeioPagto.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 104170
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 104171

    'AdmMeioPagto está relacionada com FechamentoBoletos
    If lErro = AD_SQL_SUCESSO Then gError 104172
    
    'verifica se AdmMeioPagto esta relacionado com BorderoOutros
    lErro = Comando_Executar(lComando, "SELECT AdmMeioPagto FROM BorderoOutros WHERE AdmMeioPagto = ? AND FilialEmpresa = ? ", iAdmMeioPagto, objAdmMeioPagto.iCodigo, objAdmMeioPagto.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 111070
    
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 111071

    'AdmMeioPagto está relacionada com BorderoOutros
    If lErro = AD_SQL_SUCESSO Then gError 111072
    
    AdmMeioPagto_Valida_Exclusao = SUCESSO

    Exit Function

Erro_AdmMeioPagto_Valida_Exclusao:

    AdmMeioPagto_Valida_Exclusao = gErr

    Select Case gErr

        Case 104158, 104159
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_VALETICKET", gErr)

        Case 104160
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ADMMEIOPAGTO_VINCULADO_VALETICKET", gErr, objAdmMeioPagto.iCodigo)

        Case 104161, 104162
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BOLETO", gErr)

        Case 104163
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ADMMEIOPAGTO_VINCULADO_BOLETO", gErr, objAdmMeioPagto.iCodigo)

        Case 104164, 104165
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BORDEROVALETICKET", gErr)

        Case 104166
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ADMMEIOPAGTO_VINCULADO_BORDEROVALETICKET", gErr, objAdmMeioPagto.iCodigo)

        Case 104168, 104167
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BORDEROBOLETO", gErr)

        Case 104169
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ADMMEIOPAGTO_VINCULADO_BORDEROBOLETO", gErr, objAdmMeioPagto.iCodigo)

        Case 104171, 104170
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOS_CAIXA", gErr)

        Case 104172
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ADMMEIOPAGTO_VINCULADO_MOVIMENTOS_CAIXA", gErr, objAdmMeioPagto.iCodigo)

        Case 111070, 111071
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BOEDERO_OUTROS", gErr)

        Case 111072
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ADMMEIOPAGTO_VINCULADO_BORDERO_OUTROS", gErr, objAdmMeioPagto.iCodigo)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151038)

    End Select

    Exit Function

End Function

Private Sub AdmMeioPagto_Carrega_Log(ByVal objLog As ClassLog, ByVal objAdmMeioPagto As ClassAdmMeioPagto)

Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim objAdmMeioPagtoParcelas As New ClassAdmMeioPagtoParcelas


    'Função para Carregar o objLog
    objLog.sLog = CStr(objAdmMeioPagto.iCodigo) & Chr(vbKeyEscape) & CStr(objAdmMeioPagto.iFilialEmpresa) & Chr(vbKeyEscape) & objAdmMeioPagto.sNome & Chr(vbKeyEscape) & CStr(objAdmMeioPagto.iRede) & Chr(vbKeyEscape) & CStr(objAdmMeioPagto.dTaxaVista) & Chr(vbKeyEscape) & CStr(objAdmMeioPagto.dTaxaParcelado) & Chr(vbKeyEscape) & CStr(objAdmMeioPagto.iTipoMeioPagto) & Chr(vbKeyEscape) & CStr(objAdmMeioPagto.iDefasagemPagtoVista) & Chr(vbKeyEscape) & CStr(objAdmMeioPagto.iContaCorrenteInterna) & Chr(vbKeyEscape) & CStr(objAdmMeioPagto.iGeraTituloRec) & Chr(vbKeyEscape) & CStr(objAdmMeioPagto.lEndereco) & Chr(vbKeyEscape) & CStr(objAdmMeioPagto.iCodBanco) & Chr(vbKeyEscape) & CStr(objAdmMeioPagto.sAgencia) & Chr(vbKeyEscape) & CStr(objAdmMeioPagto.iAtivo) & Chr(vbKeyEscape)

    'Guarda os Campos relacionados a Endereços no Arquivo de Log
    If objAdmMeioPagto.lEndereco > 0 Then
    
        objLog.sLog = objLog.sLog & CStr(objAdmMeioPagto.objEndereco.sEndereco) & Chr(vbKeyEscape) & CStr(objAdmMeioPagto.objEndereco.sBairro) & Chr(vbKeyEscape) & CStr(objAdmMeioPagto.objEndereco.sCidade) & Chr(vbKeyEscape) & CStr(objAdmMeioPagto.objEndereco.sSiglaEstado) & Chr(vbKeyEscape) & CStr(objAdmMeioPagto.objEndereco.iCodigoPais) & Chr(vbKeyEscape) & CStr(objAdmMeioPagto.objEndereco.sCEP) & Chr(vbKeyEscape) & CStr(objAdmMeioPagto.objEndereco.sTelefone1) & Chr(vbKeyEscape) & CStr(objAdmMeioPagto.objEndereco.sTelefone2) & Chr(vbKeyEscape) & CStr(objAdmMeioPagto.objEndereco.sEmail) & Chr(vbKeyEscape) & CStr(objAdmMeioPagto.objEndereco.sFax) & Chr(vbKeyEscape) & CStr(objAdmMeioPagto.objEndereco.sContato) & Chr(vbKeyEscape)

    End If
    
    
    For Each objAdmMeioPagtoCondPagto In objAdmMeioPagto.colCondPagtoLoja
        
        'Função para Carregar o objLog
        objLog.sLog = objLog.sLog & Chr(vbKeyControl) & CStr(objAdmMeioPagtoCondPagto.iParcelamento) & Chr(vbKeyEscape) & CStr(objAdmMeioPagtoCondPagto.sNomeParcelamento) & Chr(vbKeyEscape) & CStr(objAdmMeioPagtoCondPagto.iNumParcelas) & Chr(vbKeyEscape) & CStr(objAdmMeioPagtoCondPagto.iParcelasRecebto) & Chr(vbKeyEscape) & CStr(objAdmMeioPagtoCondPagto.dTaxa) & Chr(vbKeyEscape) & CStr(objAdmMeioPagtoCondPagto.dValorMinimo) & Chr(vbKeyEscape) & CStr(objAdmMeioPagtoCondPagto.dDesconto) & Chr(vbKeyEscape) & CStr(objAdmMeioPagtoCondPagto.iJurosParcelamento) & Chr(vbKeyEscape) & CStr(objAdmMeioPagtoCondPagto.dJuros) & Chr(vbKeyEscape) & CStr(objAdmMeioPagtoCondPagto.iAtivo) & Chr(vbKeyEscape)
        
        For Each objAdmMeioPagtoParcelas In objAdmMeioPagtoCondPagto.colParcelas
        
            'Função para Carregar o objLog
            objLog.sLog = objLog.sLog & Chr(vbKeyShift) & CStr(objAdmMeioPagtoParcelas.iParcela) & Chr(vbKeyEscape) & CStr(objAdmMeioPagtoParcelas.dPercRecebimento) & Chr(vbKeyEscape) & CStr(objAdmMeioPagtoParcelas.iIntervaloRecebimento) & Chr(vbKeyEscape)
                    
        Next
        
    
    Next
    
    objLog.sLog = objLog.sLog & Chr(vbKeyEnd)

    objLog.iOperacao = objAdmMeioPagto.iTipoLog

    Exit Sub

End Sub

Private Sub AdmMeioPagto_Carrega_Log1(ByVal objLog As ClassLog, ByVal objAdmMeioPagto As ClassAdmMeioPagto)

Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim objAdmMeioPagtoParcelas As New ClassAdmMeioPagtoParcelas

    'Função para Carregar o objLog
    objLog.sLog = CStr(objAdmMeioPagto.iCodigo) & Chr(vbKeyEscape) & CStr(objAdmMeioPagto.iFilialEmpresa) & Chr(vbKeyEscape)

    objLog.sLog = objLog.sLog & Chr(vbKeyEnd) '

    Exit Sub

End Sub

'Tela Rede
Function Rede_Grava(ByVal objRede As ClassRede) As Long
'Efetua a gravação dos dados de objRede no Banco de Dados

Dim lErro As Long
Dim alComando(0 To 5) As Long
Dim lTransacao As Long
Dim iCodigo As Integer
Dim sNome As String
Dim iIndice As Integer
Dim objLog As New ClassLog
Dim iTipoLog As Integer
Dim lCodCliente As Long
Dim iFilialCli As Integer
Dim vbMsgRes As VbMsgBoxResult
Dim iAtivo As Integer
Dim sNomeAdm As String

On Error GoTo Erro_Rede_Grava

    'Abre os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 104229
    Next
    
    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 104230
    
    'Seleciona na Tabela FiliaisClientes a fim de locar
    lErro = Comando_ExecutarPos(alComando(3), "SELECT CodCliente, CodFilial FROM FiliaisClientes WHERE CodCliente=? And CodFilial=?", 0, lCodCliente, iFilialCli, objRede.lCliente, objRede.iFilialCli)
    If lErro <> AD_SQL_SUCESSO Then gError 110099
    
    lErro = Comando_BuscarPrimeiro(alComando(3))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 110100
    
    'se estiver no caixa central e nao encontrou os dados no codigo do cliente vindo do backoffice ==>
    'erro, pois só aceita clientes cadastrados no backoffice para nao permitir que cada loja cadastre clientes diferentes para as redes.
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
        
        If lErro = AD_SQL_SEM_DADOS Then gError 117617
    
    Else
    
        'Verifica se a filial do cliente está cadastrado, se nao estiver ==> erro
        If lErro = AD_SQL_SEM_DADOS Then gError 110101

    End If

    'Faz um Lock no Registro Encontrado
    lErro = Comando_LockExclusive(alComando(3))
    If lErro <> SUCESSO Then gError 110102
    
    'Seleciona na Tabela Rede para saber se já existe com o Nome passado como Filtro no Bd
    lErro = Comando_ExecutarPos(alComando(2), "SELECT Codigo FROM Redes WHERE Nome=? AND FilialEmpresa =? AND Codigo <> ?", 0, iCodigo, objRede.sNome, objRede.iFilialEmpresa, objRede.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 104262

    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 104263
    
    'Verifica se o nome que está tentando ser gravado já existe se exitir Erro
    If lErro = AD_SQL_SUCESSO Then gError 104237
    
    'Inicializar o Buffer
    sNome = String(STRING_REDE_NOME, 0)
    
    'Seleciona na tabela Rede a Rede passada
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Nome, Ativo FROM Redes WHERE Codigo = ? AND FilialEmpresa =? ", 0, sNome, iAtivo, objRede.iCodigo, objRede.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 104232

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 104233
    
    'Se Encontro algum Registro
    If lErro = AD_SQL_SUCESSO Then
        
        'Faz um Lock no Registro Encontrado
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> SUCESSO Then gError 104234
        
        'Flag que indica que é uma Alteração na Tabela de Log
        iTipoLog = ALTERACAO_REDE_CAIXA_CENTRAL
        

        If objRede.iCodigo = REDE_VISANET Or objRede.iCodigo = REDE_REDECARD Or objRede.iCodigo = REDE_TECBAN Then
            'Atualiza os Dados da Rede
            lErro = Comando_ExecutarPos(alComando(1), "UPDATE Redes SET  Cliente = ?, FilialCli = ?, Ativo = ?, Bandeira = ?, Estabelecimento = ?, CodConta = ?, DirImportacaoExtrato = ?", alComando(0), objRede.lCliente, objRede.iFilialCli, objRede.iAtivo, objRede.iBandeira, objRede.sEstabelecimento, objRede.iCodConta, objRede.sDirImportacaoExtrato)
        Else
            'Atualiza os Dados da Rede
            lErro = Comando_ExecutarPos(alComando(1), "UPDATE Redes SET  Nome = ?, Cliente = ?, FilialCli = ?, Ativo = ?, Bandeira = ?, Estabelecimento = ?, CodConta = ?, DirImportacaoExtrato = ?", alComando(0), objRede.sNome, objRede.lCliente, objRede.iFilialCli, objRede.iAtivo, objRede.iBandeira, objRede.sEstabelecimento, objRede.iCodConta, objRede.sDirImportacaoExtrato)
        End If
        If lErro <> AD_SQL_SUCESSO Then gError 104238
               
        'se está trocando a rede de ativo para inativo ==> troca para inativo as administradoras ligadas a rede.
        If objRede.iAtivo = REDE_INATIVO And iAtivo = REDE_ATIVO Then
               
            sNomeAdm = String(STRING_ADMMEIOPAGTO_NOME, 0)
               
            'Seleciona na tabela AdmMeioPagto se Existe Rede
            lErro = Comando_ExecutarPos(alComando(4), "SELECT Nome  FROM AdmMeioPagto WHERE Rede = ? AND FilialEmpresa =? ", 0, sNomeAdm, objRede.iCodigo, objRede.iFilialEmpresa)
            If lErro <> AD_SQL_SUCESSO Then gError 126446
        
            lErro = Comando_BuscarPrimeiro(alComando(4))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126447
               
            Do While lErro = AD_SQL_SUCESSO
                               
                'Coloca a administradora como inativa
                lErro = Comando_ExecutarPos(alComando(5), "UPDATE AdmMeioPagto SET  Ativo = ?", alComando(4), ADMMEIOPAGTO_INATIVO)
                If lErro <> AD_SQL_SUCESSO Then gError 126449
               
                lErro = Comando_BuscarProximo(alComando(4))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126448
               
            Loop
               
        End If
               
    Else
        
        'Flag que indica que é uma Inclusão na Tabela de Log
        iTipoLog = INCLUSAO_REDE_CAIXA_CENTRAL
        
        'Insere nova Rede no Bd
        lErro = Comando_Executar(alComando(1), "INSERT INTO Redes (Codigo, FilialEmpresa, Nome, Cliente, FilialCli, Ativo, DataLog, Bandeira, Estabelecimento, CodConta,DirImportacaoExtrato) VALUES (?, ?, ?, ?, ?, ?, ?,?,?,?,?)", objRede.iCodigo, objRede.iFilialEmpresa, objRede.sNome, objRede.lCliente, objRede.iFilialCli, objRede.iAtivo, DATA_NULA, objRede.iBandeira, objRede.sEstabelecimento, objRede.iCodConta, objRede.sDirImportacaoExtrato)
        If lErro <> AD_SQL_SUCESSO Then gError 104239
            
    End If
        
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
        
        'Chama a Função que monta Log, e Prepara para a Gravação
        Call Rede_Carrega_Log(objLog, objRede, iTipoLog)
        
        'Função que Grava Log na Tabela
        lErro = CF("Log_Grava", objLog)
        If lErro <> SUCESSO Then gError 104266
    End If
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 104231
        
    'Fecha os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Comando_Fechar (alComando(iIndice))
    Next

    Rede_Grava = SUCESSO

    Exit Function

Erro_Rede_Grava:

    Rede_Grava = gErr

    Select Case gErr
    
        Case 104229
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 104130
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
                
        Case 104231
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case 104232, 104233
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_REDE", gErr, objRede.iCodigo)
        
        Case 104262, 104263
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_REDE1", gErr)
        
        Case 104234
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_REDE", gErr, objRede.iCodigo)

        Case 104237
            lErro = Rotina_Erro(vbOKOnly, "ERRO_JA_EXISTE_REDE_COM_MESMO_NOME", gErr, iCodigo)

        Case 104238
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_REDE", gErr, objRede.iCodigo)

        Case 104239
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERSAO_REDE", gErr)
            
        Case 104266
            'Erro Tradado dentro da Função Chamadora

        Case 110099, 110100, 117615, 117616
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIAISCLIENTES", gErr, objRede.lCliente, objRede.iFilialCli)
        
        Case 110101
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FILIALCLIENTE_NAO_CADASTRADA", gErr, objRede.lCliente, objRede.iFilialCli)

        Case 117617
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FILIALCLIENTE_NAO_CADASTRADA_REDE", gErr, objRede.lCliente, objRede.iFilialCli)

        Case 110102
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_FILIAISCLIENTES", gErr, objRede.lCliente, objRede.iFilialCli)

        Case 126446 To 126448
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ADMMEOPAGTO1", gErr)

        Case 126449
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_ADMMEIOPAGTO", gErr, sNomeAdm)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151039)

    End Select
    
    Call Transacao_Rollback

    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function


Function Rede_Exclui(ByVal objRede As ClassRede) As Long
'Função que Vai Exclui do Bd a Rede passada por parâmetro

Dim lErro As Long
Dim alComando(0 To 2) As Long
Dim lTransacao As Long
Dim iCodigo As Integer

Dim sNome As String
Dim iRede As Integer
Dim iIndice As Integer
Dim objLog As New ClassLog
Dim iTipoLog As Integer
Dim dtDataLog As Date

On Error GoTo Erro_Rede_Exclui

    'Abre os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 104255
    Next
    
    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 104256
    
    'Inicializar o Buffer
    sNome = String(STRING_REDE_NOME, 0)
    
    'Seleciona na tabela Rede a Rede passada
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Codigo , Nome, DataLog FROM Redes WHERE Codigo = ? AND FilialEmpresa =? ", 0, iCodigo, sNome, dtDataLog, objRede.iCodigo, objRede.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 104257

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 104258
    
    'Se não Existir no bd a Rede sai por Erro
    If lErro = AD_SQL_SEM_DADOS Then gError 104249
    
    'Faz um Lock no Registro Encontrado
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> SUCESSO Then gError 104259
        
    'se o registro já foi transferido para o log ==> nao pode exclui-lo
    If dtDataLog <> DATA_NULA Then gError 110103
        
    'Seleciona na tabela AdmMeioPagto se Existe Rede
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Rede  FROM AdmMeioPagto WHERE Rede = ? AND FilialEmpresa =? ", 0, iRede, objRede.iCodigo, objRede.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 104251

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 104252
        
    'Se a Rede esta Sendo usada em AdmMeioPagto sai por Erro
    If lErro = AD_SQL_SUCESSO Then gError 104253
        
    'Exclui Rede no banco de dados
    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM Redes", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 104254
        
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
    
        'Monta a String de log que deverá ser gravada.
        Call Rede_Carrega_Log1(objLog, objRede, EXCLUSAO_REDE_CAIXA_CENTRAL)
        
        'Monta Registro Para a Tabela de Log
        lErro = CF("Log_Grava", objLog)
        If lErro <> SUCESSO Then gError 118136
    End If
        
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 104260
        
    'Fecha os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Comando_Fechar (alComando(iIndice))
    Next

    Rede_Exclui = SUCESSO

    Exit Function

Erro_Rede_Exclui:
    
    Rede_Exclui = gErr
    
    Select Case gErr
            
        Case 104249
            Call Rotina_Erro(vbOKOnly, "ERRO_REDE_NAO_ENCONTRADA", gErr, objRede.iCodigo)

        Case 104251, 104252
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ADMMEOPAGTO1", gErr)

        Case 104253
            Call Rotina_Erro(vbOKOnly, "ERRO_REDE_USADA_ADMMEIOPAGTO", gErr, objRede.iCodigo)

        Case 104254
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_REDE", gErr)
        
        Case 104255
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 104256
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
        
        Case 104257, 104258
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_REDE", gErr, objRede.iCodigo)
        
        Case 104259
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_REDE", gErr, objRede.iCodigo)
                
        Case 104260
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case 104267, 118136
            'Erro Tradado Dentro da Função Chamadora
        
        Case 110103
            Call Rotina_Erro(vbOKOnly, "ERRO_ECF_EXCLUSAO_LOG", gErr, objRede.iCodigo)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151040)

    End Select
    
    Call Transacao_Rollback

  
    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Sub Rede_Carrega_Log(objLog As ClassLog, objRede As ClassRede, iTipoLog)

    'Função para Carregar o objLog
    objLog.sLog = CStr(objRede.iCodigo) & Chr(vbKeyEscape) & CStr(objRede.iFilialEmpresa) & Chr(vbKeyEscape) & objRede.sNome & Chr(vbKeyEscape) & CStr(objRede.lCliente) & Chr(vbKeyEscape) & CStr(objRede.iFilialCli) & Chr(vbKeyEscape) & CStr(objRede.iAtivo) & Chr(vbKeyEscape)

    objLog.iOperacao = iTipoLog

    Exit Sub

End Sub

Sub Rede_Carrega_Log1(objLog As ClassLog, objRede As ClassRede, iTipoLog)

    'Função para Carregar o objLog
    objLog.sLog = CStr(objRede.iCodigo) & Chr(vbKeyEscape) & CStr(objRede.iFilialEmpresa) & Chr(vbKeyEscape)

    objLog.iOperacao = iTipoLog

    Exit Sub

End Sub

Function Operador_Grava(ByVal objOperador As ClassOperador) As Long
'Grava o Operador objOperador

Dim lErro As Long
Dim lTransacao As Long
Dim alComando(0 To 3) As Long
Dim sNome As String
Dim iDesconto As Integer
Dim iLimiteDesconto As Integer
Dim iIndice As Integer
Dim iTipoLog As Integer
Dim objLog As New ClassLog

On Error GoTo Erro_Operador_Grava

    'Abre os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 104295
    Next

    'Abertura de Transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 81040

    'inicializa o Buffer
    sNome = String(STRING_OPERADOR_NOME, 0)
    
    'Seleciona na Tabela Operador para saber se já existe com o Nome passado como Filtro no Bd
    lErro = Comando_ExecutarPos(alComando(2), "SELECT Nome FROM Operador WHERE Nome=? AND FilialEmpresa =? AND Codigo <> ?", 0, sNome, objOperador.sNome, objOperador.iFilialEmpresa, objOperador.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 104301

    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 104302

    'Verifica se o nome que está tentando ser gravado já existe se exitir Erro
    If lErro = AD_SQL_SUCESSO Then gError 104303

    'Só faz o IF se existir vendedor Selecionado na Combo Vendedores
    If objOperador.iCodigoVendedor <> 0 Then

        'Seleciona na tabela de Vendedores
        lErro = Comando_ExecutarPos(alComando(0), "SELECT Codigo FROM Vendedores WHERE Codigo = ? And Exists(SELECT Vendedor FROM VendedorLoja WHERE FilialEmpresa = ? AND VendedorLoja.Vendedor = Vendedores.Codigo)", 0, iCodigo, objOperador.iCodigoVendedor, objOperador.iFilialEmpresa)
        If lErro <> AD_SQL_SUCESSO Then gError 104296

        lErro = Comando_BuscarPrimeiro(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 104297
    
        If lErro <> AD_SQL_SUCESSO Then gError 104316
            
        'Faz um Lock no Registro Encontrado
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> SUCESSO Then gError 104298
    
    End If
    
    'Seleciona na Tabela de Operador pela Chave Primária
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Nome FROM Operador WHERE Codigo =? AND FilialEmpresa =? ", 0, sNome, objOperador.iCodigo, objOperador.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 104299

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 104300
    
    'Verifica se já Existe o Operador
    If lErro = AD_SQL_SEM_DADOS Then
    
        'Insere nova Rede no Bd
        lErro = Comando_Executar(alComando(1), "INSERT INTO Operador (Codigo, FilialEmpresa, Nome, Senha , Desconto , LimiteDesconto , CodVendedor , Gerente, Ativo, DataLog) VALUES (?, ?, ?, ?, ? , ?, ?, ?, ?, ?)", objOperador.iCodigo, objOperador.iFilialEmpresa, objOperador.sNome, objOperador.sSenha, objOperador.iDesconto, objOperador.iLimiteDesconto, objOperador.iCodigoVendedor, objOperador.iGerente, objOperador.iAtivo, DATA_NULA)
        If lErro <> AD_SQL_SUCESSO Then gError 104304
            
        'Variável que funciona como Flag para a gravação de Log no BD
         iTipoLog = INCLUSAO_OPERADOR_CAIXA_CENTRAL
            
    Else
    
        lErro = Comando_LockExclusive(alComando(1))
        If lErro <> SUCESSO Then gError 104305
    
        'Atualiza os Dados da Rede
        lErro = Comando_ExecutarPos(alComando(3), "UPDATE Operador SET  Nome = ?, Senha = ? ,Desconto = ? , LimiteDesconto = ? , CodVendedor = ? , Gerente = ?, Ativo = ? ", alComando(1), objOperador.sNome, objOperador.sSenha, objOperador.iDesconto, objOperador.iLimiteDesconto, objOperador.iCodigoVendedor, objOperador.iGerente, objOperador.iAtivo)
        If lErro <> AD_SQL_SUCESSO Then gError 104306
        
        'Variável que funciona como Flag para a gravação de Log no BD
         iTipoLog = ALTERACAO_OPERADOR_CAIXA_CENTRAL

    End If
        
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
        'Chama a Função que monta Log, e Prepara para a Gravação
        Call Operador_Carrega_Log(objLog, objOperador, iTipoLog)
        
        'Função que Grava Log na Tabela
        lErro = CF("Log_Grava", objLog)
        If lErro <> SUCESSO Then gError 104313
    End If

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 104307
        
    'Fecha os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Comando_Fechar (alComando(iIndice))
    Next

    Operador_Grava = SUCESSO

    Exit Function

Erro_Operador_Grava:

    Operador_Grava = gErr

    Select Case gErr
    
        Case 104313
            'Erro Tratado dentro da Função Chamada
        
        Case 81040
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 104295
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 104296, 104297
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_VENDEDOR", gErr, objOperador.iCodigoVendedor)
        
        Case 104298
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_VENDEDOR", gErr)
        
        Case 104299, 1042300
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_OPERADOR", gErr, objOperador.iCodigo)
        
        Case 104301, 104302
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_OPERADOR2", gErr)
        
        Case 104303
            lErro = Rotina_Erro(vbOKOnly, "ERRO_OPERADOR_NOME_EXISTENTE", gErr)
        
        Case 104234
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_OPERADOR", gErr, objOperador.iCodigo)

        Case 104235
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_OPERADOR", gErr)

        Case 104306
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_OPERADOR", gErr, objOperador.iCodigo)

        Case 104307
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case 104316
            lErro = Rotina_Erro(vbOKOnly, "ERRO_VENDEDOR_NAO_CADASTRADO", gErr, objOperador.iCodigoVendedor)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151041)

    End Select
    
    Call Transacao_Rollback

    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Sub Operador_Carrega_Log(objLog As ClassLog, objOperador As ClassOperador, iTipoLog)

    'Função para Carregar o objLog
    objLog.sLog = CStr(objOperador.iCodigo) & Chr(vbKeyEscape) & CStr(objOperador.iFilialEmpresa) & Chr(vbKeyEscape) & objOperador.sNome & Chr(vbKeyEscape) & objOperador.sSenha & Chr(vbKeyEscape) & CStr(objOperador.iCodigoVendedor) & Chr(vbKeyEscape) & CStr(objOperador.iDesconto) & Chr(vbKeyEscape) & CStr(objOperador.iLimiteDesconto) & Chr(vbKeyEscape) & CStr(objOperador.iGerente) & Chr(vbKeyEscape) & CStr(objOperador.iAtivo) & Chr(vbKeyEscape)

    objLog.iOperacao = iTipoLog

    Exit Sub

End Sub

Sub Operador_Carrega_Log1(objLog As ClassLog, objOperador As ClassOperador, iTipoLog)

    'Função para Carregar o objLog
    objLog.sLog = CStr(objOperador.iCodigo) & Chr(vbKeyEscape) & CStr(objOperador.iFilialEmpresa) & Chr(vbKeyEscape)

    objLog.iOperacao = iTipoLog

    Exit Sub

End Sub

Function Operador_Exclui(ByVal objOperador As ClassOperador) As Long
'Exclui o Operador da tabela

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim lTransacao As Long
Dim iCodigo As Integer
Dim iIndice As Integer
Dim sNome As String
Dim iNumInt As Integer
Dim iTipoLog As Integer
Dim objLog As New ClassLog
Dim dtDataLog As Date

On Error GoTo Erro_Operador_Exclui

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 81059
    Next

    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 81060
    
    'Seleciona o Operador no bd
    lErro = Comando_ExecutarPos(alComando(0), "SELECT DataLog FROM Operador WHERE Codigo = ? AND FilialEmpresa = ? ", 0, dtDataLog, objOperador.iCodigo, objOperador.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 81061

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 81062

    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> SUCESSO Then gError 81063

    'se o operador já foi colocado no log de transferencia pro caixa/backoffice.
    If dtDataLog <> DATA_NULA Then gError 110098

    'Exclui a Operador do BD
    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM Operador", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 81065

    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
    
        'Monta a String de log que deverá ser gravada.
        Call Operador_Carrega_Log1(objLog, objOperador, EXCLUSAO_OPERADOR_CAIXA_CENTRAL)
        
        'Monta Registro Para a Tabela de Log
        lErro = CF("Log_Grava", objLog)
        If lErro <> SUCESSO Then gError 118138
    End If
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 81066

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Operador_Exclui = SUCESSO

    Exit Function

Erro_Operador_Exclui:

    Operador_Exclui = gErr

    Select Case gErr

        Case 104314, 118138
            'Erro Tratado Dentro da Função Chamada
            
        Case 81059
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 81060
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 81061, 81062
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_OPERADOR1", gErr, objOperador.iCodigo)

        Case 81063
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_OPERADOR", gErr)

        Case 81065
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_OPERADOR", gErr, objOperador.iCodigo)

        Case 81066
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case 110098
            lErro = Rotina_Erro(vbOKOnly, "ERRO_OPERADOR_DATALOG", gErr, objOperador.iCodigo)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151042)

    End Select

    Call Transacao_Rollback
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Teclado_Exclui(ByVal objTeclado As ClassTeclado) As Long
'Função que Vai Exclui do Bd o teclado passada por parâmetro

Dim lErro As Long
Dim alComando(0 To 3) As Long
Dim lTransacao As Long
Dim iCodigo As Integer
Dim sDescricao As String
Dim iIndice As Integer
Dim objLog As New ClassLog
Dim iTeclado As Integer

On Error GoTo Erro_teclado_Exclui

    'Abre os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 99460
    Next
    
    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 99461
    
    'Inicializar o Buffer
    sDescricao = String(STRING_TECLADO_DESCRICAO, 0)
    
    'Seleciona na tabela teclado passada
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Codigo , Descricao FROM teclado WHERE Codigo = ? AND FilialEmpresa =? ", 0, iCodigo, sDescricao, objTeclado.iCodigo, objTeclado.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 99462

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 99463
    
    'Se não Existir no bd a teclado sai por Erro
    If lErro = AD_SQL_SEM_DADOS Then gError 99464
    
    'Faz um Lock no Registro Encontrado
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> SUCESSO Then gError 99465
        
    'Seleciona na tabela TecladoProduto se Existe teclado
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Teclado FROM Tecladoproduto WHERE Teclado = ? AND FilialEmpresa =?", 0, iTeclado, objTeclado.iCodigo, objTeclado.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 99466

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 99467

    'Se a teclado esta Sendo usado por um Tecladoproduto sai por Erro
    If lErro = AD_SQL_SUCESSO Then gError 99468
    
    'Seleciona na tabela Caixa se Existe teclado
    lErro = Comando_ExecutarPos(alComando(3), "SELECT Codigo FROM Caixa WHERE Teclado = ? AND FilialEmpresa =?", 0, iCodigo, objTeclado.iCodigo, objTeclado.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 112770

    lErro = Comando_BuscarPrimeiro(alComando(3))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112771

    'Se a teclado esta Sendo usado por um caixa sai por Erro
    If lErro = AD_SQL_SUCESSO Then gError 112772

    'Exclui teclado no banco de dados
    lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM teclado", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 99469
        
    'Log de Exclusão
    objLog.iOperacao = EXCLUSAO_TECLADO_CAIXA_CENTRAL
            
    Call Teclado_Carrega_Log(objLog, objTeclado)
    
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
        'Monta Registro Para a Tabela de Log
        lErro = CF("Log_Grava", objLog)
        If lErro <> SUCESSO Then gError 99577
    End If
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 99470
        
    'Fecha os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Comando_Fechar (alComando(iIndice))
    Next

    Teclado_Exclui = SUCESSO

    Exit Function

Erro_teclado_Exclui:
    
    Teclado_Exclui = gErr
    
    Select Case gErr
            
        Case 99460
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 99461
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
        
        Case 99462, 99463, 99466, 99467
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TECLADO", gErr, objTeclado.iCodigo)
                
        Case 99464
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TECLADO_NAO_ENCONTRADO", gErr, objTeclado.iCodigo)
        
        Case 99465
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_TECLADO", gErr, objTeclado.iCodigo)
        
        Case 99468
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TECLADO_USADO_TECLADOPRODUTO", gErr, objTeclado.iCodigo)

        Case 99469
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_TECLADO", gErr, objTeclado.iCodigo)
                        
        Case 99470
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case 99577
        
        Case 112770, 112771
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CAIXAS", gErr, iCodigo)
                
        Case 112772
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TECLADO_VINCULADO_CAIXA", gErr, iCodigo)
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151043)

    End Select
    
    Call Transacao_Rollback
  
    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Teclado_Grava(ByVal objTeclado As ClassTeclado) As Long
'Efetua a gravação dos dados de objTeclado no Banco de Dados

Dim lErro As Long
Dim alComando(0 To 2) As Long
Dim lTransacao As Long
Dim iCodigo As Integer
Dim sDescricao As String
Dim iIndice As Integer
Dim objLog As New ClassLog

On Error GoTo Erro_Teclado_Grava

    'Abre os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 99471
    Next
    
    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 99472
    
    'Inicializar o Buffer
    sDescricao = String(STRING_TECLADO_DESCRICAO, 0)
    
    'Seleciona na Tabela Teclado para saber se já existe com o Nome passado como Filtro no Bd
    lErro = Comando_Executar(alComando(0), "SELECT Descricao FROM Teclado WHERE Descricao=? AND FilialEmpresa =? AND Codigo <> ?", sDescricao, objTeclado.sDescricao, objTeclado.iFilialEmpresa, objTeclado.iCodigo)
   
    If lErro <> AD_SQL_SUCESSO Then gError 99473

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 99474
    
    'Verifica se o nome que está tentando ser gravado já existe se exitir Erro
    If lErro = AD_SQL_SUCESSO Then gError 99475
    
    'Seleciona na tabela Teclado o Teclado passado
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Codigo FROM Teclado WHERE Codigo = ? AND FilialEmpresa =? ", 0, iCodigo, objTeclado.iCodigo, objTeclado.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 99476

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 99477
    
    'Se Encontro algum Registro
    If lErro = AD_SQL_SUCESSO Then
        
        'Log de Alteração
        objLog.iOperacao = ALTERACAO_TECLADO_CAIXA_CENTRAL
    
        'Faz um Lock no Registro Encontrado
        lErro = Comando_LockExclusive(alComando(1))
        If lErro <> SUCESSO Then gError 99478
        
        'Atualiza os Dados da Teclado
        lErro = Comando_ExecutarPos(alComando(2), "UPDATE Teclado SET  Descricao = ? ", alComando(1), objTeclado.sDescricao)
        If lErro <> AD_SQL_SUCESSO Then gError 99479
               
    Else
        
        'Log de Inclusão
        objLog.iOperacao = INCLUSAO_TECLADO_CAIXA_CENTRAL
        
        'Insere nova Teclado no Bd
        lErro = Comando_Executar(alComando(1), "INSERT INTO Teclado (Codigo, FilialEmpresa, Descricao) VALUES (?, ?, ?)", objTeclado.iCodigo, objTeclado.iFilialEmpresa, objTeclado.sDescricao)
        If lErro <> AD_SQL_SUCESSO Then gError 99480
            
    End If
            
    Call Teclado_Carrega_Log(objLog, objTeclado)
    
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
        'Monta Registro Para a Tabela de Log
        lErro = CF("Log_Grava", objLog)
        If lErro <> SUCESSO Then gError 99578
    End If
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 99481
        
    'Fecha os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Comando_Fechar (alComando(iIndice))
    Next

    Teclado_Grava = SUCESSO

    Exit Function

Erro_Teclado_Grava:

    Teclado_Grava = gErr

    Select Case gErr
    
        Case 99471
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 99472
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 99473, 99474, 99476, 99477
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TECLADO", gErr, objTeclado.iCodigo)
        
        Case 99475
            lErro = Rotina_Erro(vbOKOnly, "ERRO_JA_EXISTE_TECLADO_DESCRICAO", gErr, objTeclado.sDescricao)
        
        Case 99478
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_TECLADO", gErr, objTeclado.iCodigo)

        Case 99479
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_TECLADO", gErr, objTeclado.iCodigo)
                    
        Case 99480
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_TECLADO", gErr, objTeclado.iCodigo)
    
        Case 99481
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case 99578
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151044)

    End Select
    
    Call Transacao_Rollback

    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Sub Teclado_Carrega_Log(objLog As ClassLog, objTeclado As ClassTeclado)

    'Função para Carregar o objLog
    objLog.sLog = CStr(objTeclado.iCodigo) & Chr(vbKeyEscape) & CStr(objTeclado.iFilialEmpresa) & Chr(vbKeyEscape) & objTeclado.sDescricao & Chr(vbKeyEnd)

End Sub

Function TecladoProduto_Exclui(ByVal objTecladoProduto As ClassTecladoProduto) As Long
'Função que Vai Exclui do Bd o TecladoProduto passada por parâmetro

Dim lErro As Long
Dim alComando(0 To 3) As Long
Dim lTransacao As Long
Dim iIndice As Integer
Dim iTeclado As Integer
Dim objLog As New ClassLog

On Error GoTo Erro_TecladoProduto_Exclui

    'Abre os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 99531
    Next
    
    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 99532
    
    'Seleciona na tabela TecladoProduto passada
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Teclado FROM TecladoProduto WHERE Codigo = ? AND FilialEmpresa =? ", 0, iTeclado, objTecladoProduto.iCodigo, objTecladoProduto.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 99533

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 99534
    
    'Se não Existir no bd a TecladoProduto sai por Erro
    If lErro = AD_SQL_SEM_DADOS Then gError 99535
    
    'Faz um Lock no Registro Encontrado
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> SUCESSO Then gError 99536
        
    'Exclui TecladoProduto no banco de dados
    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM TecladoProduto", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 99537
        
    objTecladoProduto.iTeclado = iTeclado
    
    'Exclui todos os itens relacionados a este teclado
    lErro = CF("TecladoProdutoItem_Exclui", objTecladoProduto)
    If lErro <> SUCESSO Then gError 99559
    
    'Log de Inclusão
    objLog.iOperacao = EXCLUSAO_TECLADO_CONFIGURACAO_CAIXA_CENTRAL
        
    Call TecladoProduto_Carrega_Log(objLog, objTecladoProduto)
    
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
        'Monta Registro Para a Tabela de Log
        lErro = CF("Log_Grava", objLog)
        If lErro <> SUCESSO Then gError 99579
    End If
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 99542
        
    'Fecha os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Comando_Fechar (alComando(iIndice))
    Next

    TecladoProduto_Exclui = SUCESSO

    Exit Function

Erro_TecladoProduto_Exclui:
    
    TecladoProduto_Exclui = gErr
    
    Select Case gErr
            
        Case 99531
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 99532
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
        
        Case 99533, 99534
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TECLADOPRODUTO", gErr, objTecladoProduto.iCodigo)
                
        Case 99535
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TECLADOPRODUTO_NAO_ENCONTRADO", gErr, objTecladoProduto.iCodigo)
        
        Case 99536
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_TECLADOPRODUTO", gErr, objTecladoProduto.iCodigo)
        
        Case 99537
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_TECLADOPRODUTO", gErr, objTecladoProduto.iCodigo)
                        
        Case 99538, 99539, 99541
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TECLADOPRODUTO", gErr, iTeclado)
        
        Case 99540
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_TECLADOPRODUTO", gErr, iTeclado)
        
        Case 99542
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
            
        Case 99559, 99579
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151045)

    End Select
    
    Call Transacao_Rollback
  
    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function TecladoProduto_Grava(ByVal objTecladoProduto As ClassTecladoProduto) As Long
'Efetua a gravação dos dados de objTecladoProduto no Banco de Dados

Dim lErro As Long
Dim alComando(0 To 6) As Long
Dim lTransacao As Long
Dim iPadrao As Integer
Dim sDescricao As String
Dim iIndice As Integer
Dim objTecladoProdutoItens As New ClassTecladoProdutoItem
Dim vbMsgRes As VbMsgBoxResult
Dim iCodigo As Integer
Dim objProduto As New ClassProduto
Dim objLog As New ClassLog
Dim iTeclado As Integer
Dim iAux As Integer

On Error GoTo Erro_TecladoProduto_Grava

    'Abre os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 99543
    Next
    
    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 99544
    
    'Inicializar o Buffer
    sDescricao = String(STRING_TECLADOPRODUTO_DESCRICAO, 0)
    
    'Seleciona na Tabela TecladoProduto para saber se já existe com o Nome passado como Filtro no Bd
    lErro = Comando_Executar(alComando(0), "SELECT Descricao FROM TecladoProduto WHERE Descricao=? AND FilialEmpresa =? AND Codigo <> ?", sDescricao, objTecladoProduto.sDescricao, objTecladoProduto.iFilialEmpresa, objTecladoProduto.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 99545

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 99546
    
    'Verifica se o nome que está tentando ser gravado já existe se exitir Erro
    If lErro = AD_SQL_SUCESSO Then gError 99547
    
    'Faz lock de todos os produtos encontrados na col passada
    For Each objTecladoProdutoItens In objTecladoProduto.colTecladoProdutoItem
        
        If Len(Trim(objTecladoProdutoItens.sProduto)) > 0 Then
            
            'Passa o código do produto para a classe
            objProduto.sCodigo = objTecladoProdutoItens.sProduto
            
            lErro = CF("Produto_Lock_shared", alComando(1), objProduto)
            If lErro <> SUCESSO Then gError 99548
            
        End If
        
    Next
            
    'Verifica na tabela se existe algum teclado padrão
    lErro = Comando_ExecutarPos(alComando(4), "SELECT Codigo FROM TecladoProduto WHERE Padrao = ? AND FilialEmpresa =? AND Teclado=? ", 0, iCodigo, TECLADO_PADRAO, objTecladoProduto.iFilialEmpresa, objTecladoProduto.iTeclado)
    If lErro <> AD_SQL_SUCESSO Then gError 99554

    lErro = Comando_BuscarPrimeiro(alComando(4))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 99555
    
    'Se não existe nenhum teclado padrão
    If lErro = AD_SQL_SEM_DADOS Then
        'O teclado a ser gravado deve ser o padrão
        If objTecladoProduto.iPadrao <> TECLADO_PADRAO Then
            'Envia aviso informando que o teclado é agora o padrão
            vbMsgRes = Rotina_Aviso(vbOK, "AVISO_TECLADO_PADRAO", objTecladoProduto.iCodigo)
            objTecladoProduto.iPadrao = TECLADO_PADRAO
        End If
    End If
    
    'Se já existe teclado padrão
    If lErro = AD_SQL_SUCESSO Then
        'O teclado a ser gravado deve ser o padrão
        If objTecladoProduto.iPadrao = TECLADO_PADRAO Then
            'Atualiza os Dados da TecladoProduto que era padrão para ser agora simples
            lErro = Comando_ExecutarPos(alComando(5), "UPDATE TecladoProduto SET  Padrao = ?", alComando(4), TECLADO_COMUM)
            If lErro <> AD_SQL_SUCESSO Then gError 99556
        End If
    End If
        
    'Seleciona na tabela TecladoProduto o TecladoProduto passado
    lErro = Comando_ExecutarPos(alComando(2), "SELECT Padrao, Teclado FROM TecladoProduto WHERE Codigo = ? AND FilialEmpresa =? ", 0, iPadrao, iTeclado, objTecladoProduto.iCodigo, objTecladoProduto.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 99549

    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 99550
    
    'Se Encontro algum Registro
    If lErro = AD_SQL_SUCESSO Then
        
        'Log de Alteração
        objLog.iOperacao = ALTERACAO_TECLADO_CONFIGURACAO_CAIXA_CENTRAL
    
        'Verifica se o Teclado estava marcado no BD como padrão
        If iPadrao = TECLADO_PADRAO Then
            If objTecladoProduto.iPadrao <> TECLADO_PADRAO Or objTecladoProduto.iTeclado <> iTeclado Then
                'Verifica se exite outro tecladoproduto para esta marca de teclado
                iAux = objTecladoProduto.iTeclado
                objTecladoProduto.iTeclado = iTeclado
                lErro = CF("Teclado_Verifica", objTecladoProduto)
                If lErro <> SUCESSO And lErro <> 109820 Then gError 109821
                objTecladoProduto.iTeclado = iAux
                'Se existe --> não pode ser excluído
                If lErro = 109820 Then gError 99551
            End If
        End If
        
        'Faz um Lock no Registro Encontrado
        lErro = Comando_LockExclusive(alComando(2))
        If lErro <> SUCESSO Then gError 99552
        
        'Atualiza os Dados da TecladoProduto
        lErro = Comando_ExecutarPos(alComando(3), "UPDATE TecladoProduto SET  Teclado = ? , Descricao = ?, Padrao = ?", alComando(2), objTecladoProduto.iTeclado, objTecladoProduto.sDescricao, objTecladoProduto.iPadrao)
        If lErro <> AD_SQL_SUCESSO Then gError 99553
        
        'Exclui todos os itens relacionados a este teclado
        lErro = TecladoProdutoItem_Exclui(objTecladoProduto)
        If lErro <> SUCESSO Then gError 99560
        
        'Inclui todos os itens relacionados a este teclado
        lErro = TecladoProdutoItem_Inclui(objTecladoProduto)
        If lErro <> SUCESSO Then gError 99561
        
    Else
           
        'Log de Inclusão
        objLog.iOperacao = INCLUSAO_TECLADO_CONFIGURACAO_CAIXA_CENTRAL
    
        'Insere nova TecladoProduto no Bd
        lErro = Comando_Executar(alComando(6), "INSERT INTO TecladoProduto (Codigo, FilialEmpresa, Descricao, Teclado, Padrao) VALUES (?,?,?,?,?)", objTecladoProduto.iCodigo, objTecladoProduto.iFilialEmpresa, objTecladoProduto.sDescricao, objTecladoProduto.iTeclado, objTecladoProduto.iPadrao)
        If lErro <> AD_SQL_SUCESSO Then gError 99557
        
        'Inclui todos os itens relacionados a este teclado
        lErro = TecladoProdutoItem_Inclui(objTecladoProduto)
        If lErro <> SUCESSO Then gError 99562
        
    End If
    
    Call TecladoProduto_Carrega_Log(objLog, objTecladoProduto)
    
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
        'Monta Registro Para a Tabela de Log
        lErro = CF("Log_Grava", objLog)
        If lErro <> SUCESSO Then gError 99580
    End If
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 99558
        
    'Fecha os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Comando_Fechar (alComando(iIndice))
    Next

    TecladoProduto_Grava = SUCESSO

    Exit Function

Erro_TecladoProduto_Grava:

    TecladoProduto_Grava = gErr

    Select Case gErr
    
        Case 99543
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 99544
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
            
        Case 99545, 99546, 99549, 99550
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TECLADOPRODUTO", gErr, objTecladoProduto.iCodigo)
        
        Case 99547
            lErro = Rotina_Erro(vbOKOnly, "ERRO_JA_EXISTE_TECLADOPRODUTO_DESCRICAO", gErr, objTecladoProduto.sDescricao)
        
        Case 99548, 99560, 99561, 99562, 99580
        
        Case 99551
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TECLADO_PADRAO1", gErr, objTecladoProduto.iCodigo)
            
        Case 99552
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_TECLADOPRODUTO", gErr, objTecladoProduto.iCodigo)

        Case 99553
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_TECLADOPRODUTO", gErr, objTecladoProduto.iCodigo)
                    
        Case 99554, 99555
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TECLADOPRODUTO", gErr, iCodigo)
                    
        Case 99556
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_TECLADOPRODUTO", gErr, iCodigo)
        
        Case 99557
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_TECLADOPRODUTO", gErr, objTecladoProduto.iCodigo)
    
        Case 99558
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151046)

    End Select
    
    Call Transacao_Rollback

    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Sub TecladoProduto_Carrega_Log(ByVal objLog As ClassLog, ByVal objTecladoProduto As ClassTecladoProduto)

Dim objTecladoProdutoItens As New ClassTecladoProdutoItem

    'Função para Carregar o objLog
    objLog.sLog = CStr(objTecladoProduto.iCodigo) & Chr(vbKeyEscape) & CStr(objTecladoProduto.iFilialEmpresa) & Chr(vbKeyEscape) & objTecladoProduto.iPadrao & Chr(vbKeyEscape) & CStr(objTecladoProduto.iTeclado) & Chr(vbKeyEscape) & CStr(objTecladoProduto.sDescricao)
    
    For Each objTecladoProdutoItens In objTecladoProduto.colTecladoProdutoItem
        'Função para Carregar o objLog
        objLog.sLog = objLog.sLog & Chr(vbKeyControl) & CStr(objTecladoProdutoItens.iTecla) & Chr(vbKeyEscape) & CStr(objTecladoProdutoItens.lColor) & Chr(vbKeyEscape) & CStr(objTecladoProdutoItens.sProduto) & Chr(vbKeyEscape) & CStr(objTecladoProdutoItens.sTitulo)
    Next
    
    objLog.sLog = objLog.sLog & Chr(vbKeyEnd)

End Sub

Function TecladoProdutoItem_Exclui(ByVal objTecladoProduto As ClassTecladoProduto) As Long

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim iTeclado As Integer

On Error GoTo Erro_TecladoProdutoItem_Exclui

    'Abre os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 99563
    Next
    
    'Seleciona na tabela TecladoProdutoItens os itens deste teclado passado
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Teclado FROM TecladoProdutoItem WHERE Teclado = ? AND FilialEmpresa =? ", 0, iTeclado, objTecladoProduto.iCodigo, objTecladoProduto.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 99564

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 99565
        
    Do While lErro = AD_SQL_SUCESSO

        'Exclui os itens
        lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM TecladoProdutoItem", alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 99566

        'busca a proxima relacao...
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 99567

    Loop
       
    'Fecha os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Comando_Fechar (alComando(iIndice))
    Next

    TecladoProdutoItem_Exclui = SUCESSO
    
    Exit Function
    
Erro_TecladoProdutoItem_Exclui:
    
    TecladoProdutoItem_Exclui = gErr
    
    Select Case gErr
    
        Case 99563
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
          
        Case 99564, 99565
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TECLADOPRODUTO", gErr, objTecladoProduto.iCodigo)
       
        Case 99567
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_TECLADOPRODUTO", gErr, objTecladoProduto.iCodigo)
    
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151047)

    End Select
    
    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function TecladoProdutoItem_Inclui(ByVal objTecladoProduto As ClassTecladoProduto) As Long

Dim lErro As Long
Dim alComando(1 To 3) As Long
Dim objTecladoProdutoItens As New ClassTecladoProdutoItem
Dim iIndice As Integer

On Error GoTo Erro_TecladoProdutoItem_Inclui

    'Abre os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 99568
    Next
    
    'Faz lock de todos os produtos encontrados na col passada
    For Each objTecladoProdutoItens In objTecladoProduto.colTecladoProdutoItem
                
        'Insere nova TecladoProduto no Bd
        lErro = Comando_Executar(alComando(1), "INSERT INTO TecladoProdutoItem (Teclado, FilialEmpresa, Produto, Titulo, Cor, Tecla, ArvoreKey) VALUES (?,?,?,?,?,?,?)", objTecladoProduto.iCodigo, objTecladoProduto.iFilialEmpresa, objTecladoProdutoItens.sProduto, objTecladoProdutoItens.sTitulo, objTecladoProdutoItens.lColor, objTecladoProdutoItens.iTecla, objTecladoProdutoItens.sArvoreKey)
        If lErro <> AD_SQL_SUCESSO Then gError 99569
    
    Next
       
    'Fecha os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Comando_Fechar (alComando(iIndice))
    Next

    TecladoProdutoItem_Inclui = SUCESSO
    
    Exit Function
    
Erro_TecladoProdutoItem_Inclui:
    
    TecladoProdutoItem_Inclui = gErr
    
    Select Case gErr
    
        Case 99568
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 99569
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_TECLADOPRODUTO", gErr, objTecladoProduto.iCodigo)
    
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151048)

    End Select
    
    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Cheque_Altera_Valor(ByVal objCheque As ClassChequePre) As Long
'Função que Altera o Valor do Cheque

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim tCheque As typeChequePre
Dim iIndice As Integer
Dim iChequeNaoEsp As Integer
Dim lCodigoMsgErro As Long

On Error GoTo Erro_Cheque_Altera_Valor

    'Inicia a Abertura de o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 104386
    Next

    'Verifica se Esta Trabalhando no Backoffice
    If giLocalOperacao = LOCALOPERACAO_BACKOFFICE Then
     
        'Devido a Menssagem de Erro, Serve para as duas situações tanto no backoffice, quanto no Caixa Central
        lCodigoMsgErro = objCheque.lSequencialBack
    
        'Procura o Cheque no BD a partir do código e a FilialEmpresaLoja
        lErro = Comando_ExecutarPos(alComando(0), "SELECT Valor  FROM ChequePre  WHERE ChequePre.NumIntCheque = ?  ", 0, _
        tCheque.dValor, objCheque.lNumIntCheque)
        If lErro <> AD_SQL_SUCESSO Then gError 104481
        
        
        
    ElseIf giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then

        'Devido a Menssagem de Erro, Serve para as duas situações tanto no backoffice, quanto no Caixa Central
        lCodigoMsgErro = objCheque.lSequencialBack
        
        'Procura o Cheque no BD a partir do código e a FilialEmpresaLoja
        lErro = Comando_ExecutarPos(alComando(0), "SELECT Valor  FROM chequePre  WHERE ChequePre.SequencialLoja = ? AND ChequePre.FilialEmpresaLoja = ? ", 0, _
        tCheque.dValor, objCheque.lSequencialLoja, objCheque.iFilialEmpresaLoja)
        If lErro <> AD_SQL_SUCESSO Then gError 104387
    
        
    
    End If
    
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 104490

    'Se não encontrou o Cheque => erro
    If lErro = AD_SQL_SEM_DADOS Then gError 104491
    
    'Se Encountrou o Registro então altera o Valor
    lErro = Comando_ExecutarPos(alComando(1), "UPDATE ChequePre SET Valor = ? ", alComando(0), objCheque.dValor)
    If lErro <> AD_SQL_SUCESSO Then gError 104492
    
    
    'Fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Cheque_Altera_Valor = SUCESSO

    Exit Function

Erro_Cheque_Altera_Valor:

    Cheque_Altera_Valor = gErr

    Select Case gErr

        Case 104386
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 104387, 104481, 104490
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUE", gErr)

        Case 104491
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CHEQUE_INEXISTENTE", gErr)
    
        Case 104492
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_VALOR_CHEQUE", gErr, lCodigoMsgErro)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151049)

    End Select

     'Fecha o comando
   
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Function Cheque_Altera_Dados(ByVal objCheque As ClassChequePre) As Long
'Função que Altera o Valor do Cheque

Dim lErro As Long
Dim alComando(0 To 2) As Long
Dim tCheque As typeChequePre
Dim iIndice As Integer
Dim iECF As Integer
Dim iCupomFiscal As Integer
Dim iChequeNaoEsp As Integer
Dim lCodigoMsgErro  As Long

On Error GoTo Erro_Cheque_Altera_Dados

    'Inicia a Abertura de o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 104390
    Next

      'se a Alteração do Cheque for no Caixa  usar objCheque.sequencial para inserir no registro SequencialBack
    If giLocalOperacao = LOCALOPERACAO_BACKOFFICE Then

        'Devido a Menssagem de Erro, Serve para as duas situações tanto no backoffice, quanto no Caixa Central
        lCodigoMsgErro = objCheque.lSequencialBack
        
        'Procura o Cheque no BD a partir do código e a FilialEmpresaLoja
        lErro = Comando_ExecutarPos(alComando(0), "SELECT DataDeposito , Numero , NaoEspecificado , SequencialBack FROM ChequePre WHERE NumIntCheque = ? ", 0, _
        tCheque.dtDataDeposito, tCheque.lNumero, iChequeNaoEsp, tCheque.lSequencialBack, objCheque.lNumIntCheque)
        If lErro <> AD_SQL_SUCESSO Then gError 104391

        lErro = Comando_BuscarPrimeiro(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 104392

        'Se não encontrou o Cheque => erro
        If lErro = AD_SQL_SEM_DADOS Then gError 104393
        
        
    Else
       
        
        'Devido a Menssagem de Erro, Serve para as duas situações tanto no backoffice, quanto no Caixa Central
        lCodigoMsgErro = objCheque.lSequencialLoja
        
        'Procura o Cheque no BD a partir do código e a FilialEmpresaLoja
        lErro = Comando_ExecutarPos(alComando(0), "SELECT DataDeposito , Numero, NaoEspecificado FROM ChequePre WHERE SequencialLoja = ? AND FilialEmpresaLoja = ? ", 0, _
        tCheque.dtDataDeposito, tCheque.lNumero, iChequeNaoEsp, objCheque.lSequencialLoja, objCheque.iFilialEmpresaLoja)
        If lErro <> AD_SQL_SUCESSO Then gError 104466

        lErro = Comando_BuscarPrimeiro(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 104467
    
        'Se não encontrou o Cheque => erro
        If lErro = AD_SQL_SEM_DADOS Then gError 104468
        
        
   
    End If

    'Não pode ser alterado o valor do Cheque não especificado
    If iChequeNaoEsp = CHEQUE_NAO_ESPECIFICADO Then gError 104483

    'Faz LockExclusive no Cheque
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 104469

    'Se Encountrou o Registro então altera o Valor
    lErro = Comando_ExecutarPos(alComando(1), "UPDATE ChequePre SET Banco = ?, Agencia = ? , ContaCorrente = ? , Numero =? ,DataDeposito = ? ,  Valor = ?  , CPFCGC = ? ", _
    alComando(0), objCheque.iBanco, objCheque.sAgencia, objCheque.sContaCorrente, objCheque.lNumero, objCheque.dtDataDeposito, objCheque.dValor, objCheque.sCPFCGC)
    If lErro <> AD_SQL_SUCESSO Then gError 104394

    'Fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Cheque_Altera_Dados = SUCESSO

    Exit Function

Erro_Cheque_Altera_Dados:

    Cheque_Altera_Dados = gErr

    Select Case gErr

        Case 104390
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 104391, 104392, 104466, 104467
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUE1", gErr, lCodigoMsgErro)

        Case 104393, 104468
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CHEQUE_INEXISTENTE", gErr, lCodigoMsgErro)
    
        Case 104394, 104489
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_CHEQUE", gErr, lCodigoMsgErro)

        Case 104469, 104488
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_CHEQUE", gErr, lCodigoMsgErro)
        
        Case 104483, 104487
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CHEQUE_NAOESP_ALTERADO", gErr, lCodigoMsgErro)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151050)

    End Select

    'Fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Function AdmMeioPagtoCondPagto_Altera_Saldo(ByVal objAdmMeioPagtoCondPagto As ClassAdmMeioPagtoCondPagto, Optional ByVal iTesteSaldo As Integer = 0) As Long
'Função que Altera o saldo na tabela de AdmMeioPagtoCondPagto

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim sNomeParcelamento As String
Dim dSaldo As Double
Dim iIndice As Integer

On Error GoTo Erro_AdmMeioPagtoCondPagto_Altera_Saldo

    'Inicia a Abertura de o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 104395
    Next

    'inicializa o Buffer
    sNomeParcelamento = String(STRING_NOME_PARCELAMENTO, 0)

    'Procura o nome do Parcelamento da Adminidtradora no BD a partir do código e a FilialEmpresaLoja
    lErro = Comando_ExecutarPos(alComando(0), "SELECT NomeParcelamento,Saldo FROM AdmMeioPagtoCondPagto  WHERE AdmMeioPagto = ? AND Parcelamento = ? AND FilialEmpresa = ? ", 0, _
    sNomeParcelamento, dSaldo, objAdmMeioPagtoCondPagto.iAdmMeioPagto, objAdmMeioPagtoCondPagto.iParcelamento, objAdmMeioPagtoCondPagto.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 104396

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 104397

    'Se não encontrou o Parcelamento => erro
    If lErro = AD_SQL_SEM_DADOS Then gError 104398
    
    If iTesteSaldo = FAZ_TESTE_SALDO Then
        If (dSaldo + objAdmMeioPagtoCondPagto.dSaldo) < 0 Then gError 107137
    End If

    'Se Encountrou o Registro então altera o Saldo
    lErro = Comando_ExecutarPos(alComando(1), "UPDATE AdmMeioPagtoCondPagto SET Saldo = Saldo + ? ", alComando(0), objAdmMeioPagtoCondPagto.dSaldo)
    If lErro <> AD_SQL_SUCESSO Then gError 104399
    
    'Fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    AdmMeioPagtoCondPagto_Altera_Saldo = SUCESSO

    Exit Function

Erro_AdmMeioPagtoCondPagto_Altera_Saldo:

    AdmMeioPagtoCondPagto_Altera_Saldo = gErr

    Select Case gErr
    
        Case 107137
            Call Rotina_Erro(vbOKOnly, "ERRO_ADMMEIOPAGTOCONDPAGTO_SEMSALDO", gErr, objAdmMeioPagtoCondPagto.iParcelamento, objAdmMeioPagtoCondPagto.iAdmMeioPagto, dSaldo)

        Case 104395
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 104396, 104397
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ADMMEIOPAGTOCONDPAGTO", gErr, objAdmMeioPagtoCondPagto.iAdmMeioPagto)

        Case 104398
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ADMMEIOPAGTOCONDPAGTO_INEXISTENTE", gErr, objAdmMeioPagtoCondPagto.iParcelamento)
    
        Case 104399
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_SALDO_MEIOPAGTO", gErr, objAdmMeioPagtoCondPagto.iAdmMeioPagto)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151051)

    End Select

    'Fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

'Function Cheque_Grava(ByVal objCheque As ClassChequePre) As Long
''Grava o Cheque no Banco de Dados
'
'Dim lErro As Long
'Dim iIndice As Integer
'Dim lTransacao As Long
'Dim objLog As New ClassLog
'Dim objCupomFiscal  As New ClassCupomFiscal
'Dim objMovimentosCaixa As New ClassMovimentoCaixa
'Dim objChequeNaoEsp As New ClassChequePre
'Dim objCheque1 As New ClassChequePre
'Dim objBorderoCheque As New ClassBorderoCheque
'Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
'Dim lValorNaoEsp As Long
'Dim objCarne As New ClassCarne
'
'On Error GoTo Erro_Cheque_Grava
'
'    'Abre a Transação
'    lTransacao = Transacao_Abrir()
'    If lTransacao = 0 Then gError 104416
'
'    If objCheque.lCupomFiscal <> 0 Then
'
'        'Mover ECF para e Cupom Fiscal e FilialEmpresa Loja para dentro do objCupomFiscal
'        objCupomFiscal.iECF = objCheque.iECF
'        objCupomFiscal.lNumero = objCheque.lCupomFiscal
'        objCupomFiscal.iFilialEmpresa = objCheque.iFilialEmpresaLoja
'
'        '????? Se esriver com cupom preenchido chama a função abaixo
'
'        'Chamar a Função que faz Lock na Tabela de CupomFiscal com os Parâmetros passados
'        lErro = CF("CupomFiscal_Lock", objCupomFiscal)
'        If lErro <> SUCESSO And lErro <> 104375 Then gError 104400
'
'        'Se não Encontrar Erro
'        If lErro = 104375 Then gError 104401
'
'        'Mover o Numero do CupomFiscal e Filial para objMovimentosCaixa
'        objMovimentosCaixa.lCupomFiscal = objCupomFiscal.lNumIntDoc
'        objMovimentosCaixa.iFilialEmpresa = objCheque.iFilialEmpresaLoja
'        objMovimentosCaixa.iTipo = MOVIMENTOCAIXA_RECEBIMENTO_CHEQUE
'
'        'Chama a função que faz lock na tabela de MovimentosCaixa
'        lErro = CF("MovimentosCaixaCupom_Lock", objMovimentosCaixa)
'        If lErro <> SUCESSO And lErro <> 104378 Then gError 104402
'
'        'Se não Encontrar então Erro
'        If lErro = 104378 Then gError 104403
'
'    Else
'
'        objCarne.sCodBarrasCarne = objCheque.sCarne
'        objCarne.dtDataReferencia = objCheque.dtDataDeposito
'
'        'Chamar a Função que pega numintbaixa do carnet
'        lErro = CF("BaixasCarne_Le", objCarne)
'        If lErro <> SUCESSO And lErro <> 109849 Then gError 109850
'
'        'carnet não existente
'        If lErro = 109849 Then gError 109851
'
'        objMovimentosCaixa.lNumRefInterna = objCarne.lNumIntDoc
'        objMovimentosCaixa.iFilialEmpresa = objCheque.iFilialEmpresaLoja
'        objMovimentosCaixa.iTipo = MOVIMENTOCAIXA_RECEB_CARNE_CHEQUE
'
'        'Chama a função que faz lock na tabela de MovimentosCaixa
'        lErro = CF("MovimentosCaixaCarne_Lock", objMovimentosCaixa)
'        If lErro <> SUCESSO And lErro <> 109857 Then gError 109852
'
'        'Se não Encontrar então Erro
'        If lErro = 109857 Then gError 109853
'
'    End If
'
'    'Mover o Numero do movimento de caixa para objCheque e filial
'    objChequeNaoEsp.lNumMovtoCaixa = objMovimentosCaixa.lNumMovto
'    objChequeNaoEsp.iFilialEmpresaLoja = objMovimentosCaixa.iFilialEmpresa
'
'    'Função que Lê os Cheque não especificados no Banco de dados
'    lErro = CF("Cheque_Le_Nao_Especificado", objChequeNaoEsp)
'    If lErro <> SUCESSO And lErro <> 104366 Then gError 104404
'
'    'Verificação para Lockar o cheque
'    If giLocalOperacao = LOCALOPERACAO_BACKOFFICE Then
'
'       'Mover para o objCheque1 Seguencial e  giFilialEmpresa
'       objCheque1.lSequencialBack = objCheque.lSequencialBack
'       objCheque1.iFilialEmpresaLoja = giFilialEmpresa
'
'    ElseIf giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
'
'        'Mover para o objCheque1 Seguencial e  giFilialEmpresa
'        objCheque1.lSequencialLoja = objCheque.lSequencial
'        objCheque1.iFilialEmpresaLoja = giFilialEmpresa
'
'    End If
'
'    'Função que Faz lock na Tabela de Cheque com os Parâmetros passados
'    lErro = CF("Cheque_Lock", objCheque1)
'    If lErro <> SUCESSO And lErro <> 104352 Then gError 104405
'
'    'Se estiver cadastrado
'    If lErro = SUCESSO Then
'
'        'Se estiver associado a um bordero ==> erro
'        If objCheque1.lNumBorderoLoja <> 0 Then gError 104408
'
'        'Verifica se o Cheque está Vinculado ao movimento de Caixa Referido
'        If objCheque1.lNumMovtoCaixa <> objMovimentosCaixa.lNumMovto Then gError 104409
'
'        'Guarda o Valor do Cheque que esta Cadastrado no Banco de Dados
'        lValorNaoEsp = objCheque1.dValor
'
'        'Se estiver Trabalhando no Backoffice então colocar e objcheque o numero interno do Cheque cadastrado no Banco de Dados
'        If giLocalOperacao = LOCALOPERACAO_BACKOFFICE Then objCheque.lNumIntCheque = objCheque1.lNumIntCheque
'
'        'Função que Faz UpDate no Cheque passado como parâmetro, com o valor do Cheque esta na Tela
'        lErro = CF("Cheque_Altera_Dados", objCheque)
'        If lErro <> SUCESSO Then gError 104410
'
'        'Flag para de mosntrar que Houve uma Alteração em Cheque
'        objLog.iOperacao = ALTERACAO_CHEQUE
'
'    Else
'
'
'        'Relaciona o Movimento de Caixa ao objCheque
'        objCheque.lNumMovtoCaixa = objMovimentosCaixa.lNumMovto
'
'        'Cheque Foi Especificado na Loja, Flag que Determina que Cheque foi Especificado
'        objCheque.iNaoEspecificado = CHEQUE_ESPECIFICADO
'
'        'Chamar a Função que Insere o novo Cheque no banco de Dados
'        lErro = CF("Cheque_Insere", objCheque)
'        If lErro <> SUCESSO Then gError 104411
'
'        'Flag para de mosntrar que Houve uma Insersão na Tabela Cheque
'        objLog.iOperacao = INCLUSAO_CHEQUE
'
'    End If
'    'Recebe dos Cheque não especificados
'    lValorNaoEsp = lValorNaoEsp + objChequeNaoEsp.dValor
'
'    'Verifica se o valor do cheque é maior que o valor do Cheque não especificado
'    If objCheque.dValor > lValorNaoEsp Then gError 104412
'
'    'Atualiza o Valor do Cheque não Especificado
'    lValorNaoEsp = lValorNaoEsp - objCheque.dValor
'
'    'Função que Grava Cheque não especificados
'    lErro = CF("Cheque_Grava_NaoEspecif", objChequeNaoEsp, objMovimentosCaixa, lValorNaoEsp)
'    If lErro <> SUCESSO Then gError 104413
'
'    'Função que Prepara para a Gravação do Log
'    lErro = CF("Mover_Dados_Cheque_Log", objCheque, objLog)
'    If lErro <> SUCESSO Then gError 99777
'
'    'Função de Gravação de Log
'    lErro = CF("Log_Grava", objLog)
'    If lErro <> SUCESSO Then gError 104417
'
'    'se o valor do cheque foi alterado
'    If objCheque.dValor - objCheque1.dValor <> 0 Then
'
'        'Mover Valor dos Saldo para admMeioPagtoCondPagto.Saldo
'        objAdmMeioPagtoCondPagto.dSaldo = objCheque.dValor - objCheque1.dValor
'
'        'Vincula-se ao Meio_Pagamento_Cheque para o AdmMeioPagtoCondPagto.iAdmMeioPagto
'        objAdmMeioPagtoCondPagto.iAdmMeioPagto = MEIO_PAGAMENTO_CHEQUE
'
'        'Vincula-se ao Pagamento_Avista para o AdmMeioPagtoCondPagto.parcelamento
'        objAdmMeioPagtoCondPagto.iParcelamento = PARCELAMENTO_AVISTA
'
'        'Vincula-se FilialEmpresa a o Meio de Pagamento
'        objAdmMeioPagtoCondPagto.iFilialEmpresa = giFilialEmpresa
'
'        'Função para Alteração de Saldo
'        lErro = CF("AdmMeioPagtoCondPagto_Altera_Saldo", objAdmMeioPagtoCondPagto)
'        If lErro <> SUCESSO And lErro <> 104398 Then gError 104414
'
'    End If
'
'    'Confirma Transação
'    lErro = Transacao_Commit()
'    If lErro <> AD_SQL_SUCESSO Then gError 104418
'
'    Cheque_Grava = SUCESSO
'
'    Exit Function
'
'Erro_Cheque_Grava:
'
'    Cheque_Grava = gErr
'
'    Select Case gErr
'
'        Case 104400, 109845, 109850, 109852
'
'        Case 104401
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_CUPOM_FISCAL_NAO_CADASTRADO", gErr, objCupomFiscal.lNumero)
'
'        Case 104402
'
'        Case 104403, 109853
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOCAIXA_NAO_CADASTRADO", gErr, objMovimentosCaixa.lNumMovto)
'
'        Case 104404, 104405, 104407
'
'        Case 104408
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_CHEQUE_VINCULADO_BORDERO", gErr, objCheque.lNumBorderoLoja)
'
'        Case 104409
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_MVTOCAIXA_NAO_PODE_SER_ALTERADO", gErr, objCheque1.lNumMovtoCaixa, objMovimentosCaixa.lNumMovto)
'
'        Case 104410, 104411
'
'        Case 104412
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_CHEQUE_VALOR_MAIOR_NAOESPECIFICADO", gErr, objCheque.dValor, lValorNaoEsp)
'
'        Case 104413, 104417, 104414, 99777
'
'        Case 104415
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
'
'        Case 104416
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
'
'        Case 104418
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
'
'        Case 109851
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_CARNE_NAO_BAIXADO", gErr)
'
'        Case Else
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151052)
'
'    End Select
'
'    Call Transacao_Rollback
'
'    Exit Function
'
'End Function

Function Cheque_Grava_NaoEspecif(ByVal objChequeNaoEsp As ClassChequePre, objMovimentosCaixa As ClassMovimentoCaixa, ByVal lValorNaoEsp As Long) As Long
 'Grava o Cheque não Especificados no Banco de Dados

Dim lErro As Long
Dim dValor As Double
Dim objLog As ClassLog
Dim objTipoMeioPagtoLojaFilial As New ClassTMPLojaFilial
Dim lCodigo As Long
Dim alComando(2) As Long
Dim iIndice As Integer

On Error GoTo Erro_Cheque_Grava_NaoEspecif
    
    'Inicia a Abertura de o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 107906
    Next
    
    'Mover para dValor o Valor do Cheque Não Epecificado
    dValor = objChequeNaoEsp.dValor
    
    'Mover para objChequeNãoEpecificado o lValorNaoEsp
    objChequeNaoEsp.dValor = lValorNaoEsp
    
    'não Existe mais Cheque não Especificado, foi Zerado o Valor
    If objChequeNaoEsp.dValor = 0 Then
        
        'Verificação se esta Trabalhando no Caixa Central ou no Backoffice
        If giLocalOperacao = LOCALOPERACAO_BACKOFFICE Then
            
            'Procura o Cheque no BD a partir do Numero Interno do Cheque
            lErro = Comando_ExecutarPos(alComando(0), "SELECT Valor  FROM ChequePre  WHERE ChequePre.NumIntCheque = ?  ", 0, _
            dValor, objChequeNaoEsp.lNumIntCheque)
            If lErro <> AD_SQL_SUCESSO Then gError 107907
                
            
        ElseIf giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
    
            'Procura o Cheque no BD a partir do código e a FilialEmpresaLoja
            lErro = Comando_ExecutarPos(alComando(0), "SELECT Valor  FROM ChequePre  WHERE ChequePre.SequencialLoja = ?  and ChequePre.FilialEmpresaLoja = ? ", 0, _
            dValor, objChequeNaoEsp.lSequencialLoja, objChequeNaoEsp.iFilialEmpresaLoja)
            If lErro <> AD_SQL_SUCESSO Then gError 107908
            
        End If
        
            
        lErro = Comando_BuscarPrimeiro(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 107985
         
        If lErro = AD_SQL_SEM_DADOS Then gError 107986
         
         
        'Faz lock
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> SUCESSO Then gError 107984
        
        'Se Encountrou alterao Campo Status para Excluido, o Cheque não podeser mais Excluido no Bd
        lErro = Comando_ExecutarPos(alComando(1), "UPDATE ChequePre SET ChequePre.Status = ?", alComando(0), STATUS_EXCLUIDO)
        If lErro <> AD_SQL_SUCESSO Then gError 107909
        
        
'        'Função que Exclui Cheque não Especificado, pois não existe mais
'        lErro = CF("ChequeNaoEsp_Exclui", objChequeNaoEsp)
'        If lErro <> SUCESSO Then gError 104421
'
    Else
        
        'se nao tem cheque nao especificado ==> tem que cria-lo
        If objChequeNaoEsp.lSequencialLoja = 0 And objChequeNaoEsp.lSequencialBack = 0 Then
            
            'Função que Gera Seguencial para o Cheque Não Especificado
            lErro = Cheque_Codigo_Automatico_Nao_Esp(lCodigo)
            If lErro <> SUCESSO Then gError 104462
            
            If giLocalOperacao = LOCALOPERACAO_BACKOFFICE Then
            
                'Mover o Codigo para o objCheque.SeguencialBack
                objChequeNaoEsp.lSequencialBack = lCodigo
            
            
            Else
            
                'Mover o Codigo para o objCheque.SeguencialLoja
                objChequeNaoEsp.lSequencial = lCodigo
            
            End If
            
            'Mover a data do Movimento de caixa para o objChequeNaoEsp
            objChequeNaoEsp.dtDataDeposito = objMovimentosCaixa.dtDataMovimento
    
            'Mover o Numero do  Movimento de caixa para o objChequeNaoEsp
            objChequeNaoEsp.lNumMovtoCaixa = objMovimentosCaixa.lNumMovto
    
            'Mover para objChequeNãoEpecificado o Cheque_Nao_Especificado
            objChequeNaoEsp.iNaoEspecificado = CHEQUE_NAO_ESPECIFICADO
        
            'Mover para objChequeNaoEsp a Filial Empresa Vinculado ao Movimento de Caixa
            objChequeNaoEsp.iFilialEmpresaLoja = objMovimentosCaixa.iFilialEmpresa
        
            'Criar Um Cheque não Especificado no Banco de Dados
            lErro = CF("Cheque_Insere", objChequeNaoEsp)
            If lErro <> SUCESSO Then gError 104423
            
        Else
        
            'Função que Altera o Valor do Cheque não Especificado no Banco de Dados
            lErro = CF("Cheque_Altera_Valor", objChequeNaoEsp)
            If lErro <> SUCESSO Then gError 104424
            
       End If
       
        'Mover Recebe o Valor Antigo, antes da Atualização no Banco de Dados
        objChequeNaoEsp.dValor = dValor
        
        'Valor do Cheque não Especificado Novo menos o Valor Antigo que Foi Lido no banco de dados antes da Atualização
        objTipoMeioPagtoLojaFilial.dSaldo = lValorNaoEsp - dValor
        objTipoMeioPagtoLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_CHEQUE
        objTipoMeioPagtoLojaFilial.iFilialEmpresa = objMovimentosCaixa.iFilialEmpresa
        
        'Função que Serve para atualizar Saldo
        lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTipoMeioPagtoLojaFilial)
        If lErro <> SUCESSO Then gError 104425
       
    End If
    
    'Fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Cheque_Grava_NaoEspecif = SUCESSO

    Exit Function

Erro_Cheque_Grava_NaoEspecif:

    Cheque_Grava_NaoEspecif = gErr

    Select Case gErr

        Case 107906
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 107907, 107908
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUE", gErr)
            
        Case 107909
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_CHEQUE1", gErr)
            
        Case 104422, 104423, 104424, 104425
        
        Case 107984
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_CHEQUEPRE", gErr)
        
        Case 107985
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUE ", gErr)
        
        Case 107986
        
        Case Else
        
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151053)

    End Select

    'Fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function Cheque_Exclui_EmTrans(ByVal objCheque As ClassChequePre) As Long
'Função que exclui um cheque.
'DEVE SER CHAMADA EM TRANS!

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim objMovimentosCaixa As New ClassMovimentoCaixa
Dim objChequeNaoEsp As New ClassChequePre
Dim lValorNaoEsp As Long
Dim iIndice As Integer
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim objLog As New ClassLog
Dim lCodigoMsgErro As Long
Dim tCheque As typeChequePre

On Error GoTo Erro_Cheque_Exclui_EmTrans

    'Inicia a Abertura de o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 104449
    Next

    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL_BACKOFFICE Or giLocalOperacao = LOCALOPERACAO_BACKOFFICE Then

        'Select para verificar se o Cheque realmente Existe se Existir fazer lock
        lErro = Comando_ExecutarPos(alComando(0), "SELECT Numero,  NumMovtoCaixa , Valor , NaoEspecificado, Localizacao FROM ChequePre WHERE  SequencialBack = ? AND Status <> ?", 0, tCheque.lNumero, tCheque.lNumMovtoCaixa, tCheque.dValor, tCheque.iNaoEspecificado, tCheque.iLocalizacao, objCheque.lSequencialBack, STATUS_EXCLUIDO)
        If lErro <> SUCESSO Then gError 104438

        lErro = Comando_BuscarPrimeiro(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 104439
    
        'Devido a Menssagem de Erro, Serve para as duas situações tanto no backoffice, quanto no Caixa Central
        lCodigoMsgErro = objCheque.lSequencialBack

    
    ElseIf giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then

        'Select para verificar se o Cheque realmente Existe se Existir fazer lock
        lErro = Comando_ExecutarPos(alComando(0), "SELECT Numero , NumMovtoCaixa , Valor , NaoEspecificado, Localizacao FROM ChequePre WHERE SequencialLoja = ? AND FilialEmpresaLoja = ? AND Status <> ?", 0, tCheque.lNumero, tCheque.lNumMovtoCaixa, tCheque.dValor, tCheque.iNaoEspecificado, tCheque.iLocalizacao, objCheque.lSequencialLoja, objCheque.iFilialEmpresaLoja, STATUS_EXCLUIDO)
        If lErro <> SUCESSO Then gError 104493
        
        lErro = Comando_BuscarPrimeiro(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 104494
        
        'Devido a Menssagem de Erro, Serve para as duas situações tanto no backoffice, quanto no Caixa Central
        lCodigoMsgErro = objCheque.lSequencialLoja

    End If
    
    'Se não Encontrar
    If lErro = AD_SQL_SEM_DADOS Then gError 104460
    
    'Faz Lock
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> SUCESSO Then gError 104441
    
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL And tCheque.iLocalizacao <> CHEQUEPRE_LOCALIZACAO_LOJA Then gError 105114
    
    If giLocalOperacao <> LOCALOPERACAO_CAIXA_CENTRAL And tCheque.iLocalizacao <> CHEQUEPRE_LOCALIZACAO_BACKOFFICE Then gError 105115
    
    'Se Encountrou alterao Campo Status para Excluido
    lErro = Comando_ExecutarPos(alComando(1), "UPDATE ChequePre SET Status = ? ", alComando(0), STATUS_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then gError 104442

    'Fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Cheque_Exclui_EmTrans = SUCESSO
    
    Exit Function
    
Erro_Cheque_Exclui_EmTrans:

    Cheque_Exclui_EmTrans = gErr
    
    Select Case gErr
        
        Case 104438, 104439, 104493, 104494
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUE1", gErr, lCodigoMsgErro)

        Case 104441
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_CHEQUE", gErr, lCodigoMsgErro)

        Case 104442
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CHEQUE", gErr, lCodigoMsgErro)

        Case 104443
            
        Case 104444
            lErro = Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOCAIXA_NAO_CADASTRADO", gErr, objMovimentosCaixa.lNumMovto)

        Case 104445, 104446, 104448, 99778
        
        Case 104449
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 104460
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CHEQUE_INEXISTENTE", gErr, lCodigoMsgErro)
            
        Case 104482
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CHEQUE_NAOESP_EXCLUSAO", gErr, lCodigoMsgErro)
    
        Case 105114
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPRE_NAOENCONTRADO_CAIXACENTRAL", gErr, objCheque.lSequencialLoja, objCheque.iFilialEmpresaLoja)
            
        Case 105115
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPRE_NAOENCONTRADO_BACKOFFICE", gErr, objCheque.lSequencialBack)
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151054)
    
    End Select
    
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Function Cheque_Exclui(ByVal objCheque As ClassChequePre) As Long
'Função que Exclui Cheque no Banco de dados

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_Cheque_Exclui
    
    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 104437
    
    'chama a função que exclui em transação
    lErro = CF("Cheque_Exclui_EmTrans", objCheque)
    If lErro <> SUCESSO Then gError 113695

     'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 104451
    
    Cheque_Exclui = SUCESSO

    Exit Function

Erro_Cheque_Exclui:

    Cheque_Exclui = gErr

    Select Case gErr
    
        Case 113695
        
        Case 104437
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 104451
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151055)

    End Select

    Call Transacao_Rollback

    Exit Function

End Function

Function Cheque_Insere(ByVal objCheque As ClassChequePre) As Long
'Função que Realiza a Gravação do Cheque no Banco de Dados
Dim lErro As Long
Dim lComando As Long
Dim lCodigo As Long
Dim lCodigoMsgErro As Long

On Error GoTo Erro_Cheque_Insere

    'Abre a transação e comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 104454
    
    'Chama a rotina que gera o sequencial
    lErro = CF("Config_ObterNumInt", "CPRConfig", "NUM_PROX_CHEQUE_PRE", lCodigo)
    If lErro <> SUCESSO Then gError 104455

    objCheque.lNumIntCheque = lCodigo
        
    'se a inclusão do Cheque for no Caixa  usar objCheque.sequencial para inserir no registro SequencialBack
    If giLocalOperacao <> LOCALOPERACAO_CAIXA_CENTRAL Then

        'Devido a Menssagem de Erro, Serve para as duas situações tanto no backoffice, quanto no Caixa Central
        lCodigoMsgErro = objCheque.lSequencialBack

       
    Else
        
        'Devido a Menssagem de Erro, Serve para as duas situações tanto no backoffice, quanto no Caixa Central
        lCodigoMsgErro = objCheque.lSequencialLoja

    End If
    
    lErro = Comando_Executar(lComando, "INSERT INTO ChequePre(NumIntCheque, Cliente, Filial, Banco , Agencia , ContaCorrente ,  Numero,  DataDeposito , Valor , NumBordero , CPFCGC , NumMovtoCaixa , Aprovado , NaoEspecificado , NumBorderoLoja ,  FilialEmpresa , SequencialLoja , SequencialBack , FilialEmpresaLoja, NumMovtoSangria , Status, Caixa, SequencialCaixa, Localizacao, DataEmissao ) VALUES ( ? ,?, ? ,? ,? ,? ,? ,? ,? ,? ,? ,? ,? ,? ,? ,? ,? ,? ,? ,? ,?,?,?,?,?)", _
    objCheque.lNumIntCheque, objCheque.lCliente, objCheque.iFilial, objCheque.iBanco, objCheque.sAgencia, objCheque.sContaCorrente, objCheque.lNumero, objCheque.dtDataDeposito, objCheque.dValor, objCheque.lNumBordero, objCheque.sCPFCGC, objCheque.lNumMovtoCaixa, objCheque.iAprovado, objCheque.iNaoEspecificado, objCheque.lNumBorderoLoja, objCheque.iFilialEmpresa, objCheque.lSequencialLoja, objCheque.lSequencialBack, objCheque.iFilialEmpresaLoja, objCheque.lNumMovtoSangria, objCheque.iStatus, objCheque.iCaixa, objCheque.lSequencialCaixa, objCheque.iLocalizacao, objCheque.dtDataEmissao)
    If lErro <> AD_SQL_SUCESSO Then gError 104485
        
    'Fechar Comando
    Call Comando_Fechar(lComando)
    
    Cheque_Insere = SUCESSO

    Exit Function

Erro_Cheque_Insere:

    Cheque_Insere = gErr

    Select Case gErr

        Case 104454
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 104455

        Case 104456
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CHEQUE_BACK", gErr, lCodigoMsgErro)

        Case 104461, 104485
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CHEQUE", gErr, lCodigoMsgErro)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151056)

    End Select

    'Fechar Comando
    Call Comando_Fechar(lComando)
    

    Exit Function

End Function

Function ChequeNaoEsp_Exclui(ByVal objCheque As ClassChequePre) As Long
'Função que Exclui Cheque no Banco de dados

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim objMovimentosCaixa As New ClassMovimentoCaixa
Dim objChequeNaoEsp As New ClassChequePre
Dim lMovimentoCaixa As Long
Dim lNumero As Long
Dim lValorNaoEsp As Long
Dim iIndice As Integer
Dim dValor As Double
Dim lCodigoMsgErro As Long

On Error GoTo Erro_ChequeNaoEsp_Exclui
    
    'Inicia a Abertura de o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 104470
    Next
    
    
    If giLocalOperacao = LOCALOPERACAO_BACKOFFICE Then

        'Select para verificar se o Cheque realmente Existe se Existir fazer lock
        lErro = Comando_ExecutarPos(alComando(0), "SELECT Numero, NumMovtoCaixa,  Valor FROM ChequePre WHERE SequencialBack = ? ", 0, lNumero, lMovimentoCaixa, dValor, objCheque.lSequencialBack)
        If lErro <> SUCESSO Then gError 104471

        'Devido a Menssagem de Erro, Serve para as duas situações tanto no backoffice, quanto no Caixa Central
        lCodigoMsgErro = objCheque.lSequencialBack


    ElseIf giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then

        'Select para verificar se o Cheque realmente Existe se Existir fazer lock
        lErro = Comando_ExecutarPos(alComando(0), "SELECT Numero , NumMovtoCaixa , Valor FROM ChequePre WHERE SequencialLoja = ? AND FilialEmpresaLoja = ?", 0, lNumero, lMovimentoCaixa, dValor, objCheque.lSequencialLoja, objCheque.iFilialEmpresaLoja)
        If lErro <> SUCESSO Then gError 104472
    
        'Devido a Menssagem de Erro, Serve para as duas situações tanto no backoffice, quanto no Caixa Central
        lCodigoMsgErro = objCheque.lSequencialLoja

    End If
    
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 104473
    
    'Se não Encontrar
    If lErro = AD_SQL_SEM_DADOS Then gError 104474
    
    'Faz Lock
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> SUCESSO Then gError 104475
    
    'Excluir o Cheque do Banco de Dados
    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM ChequePre", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 104476
    
    'Mover para movimento de Caixa o Resultado do Select
    objCheque.lNumMovtoCaixa = lMovimentoCaixa
    objCheque.lNumero = lNumero
    
    'Mover para objMovimentosCaixa o numero do movimento caixa e a FilialEmpresa
    objMovimentosCaixa.lNumMovto = objCheque.lNumMovtoCaixa
    objMovimentosCaixa.iFilialEmpresa = objCheque.iFilialEmpresaLoja
    
    'Função que Faz Lock no Movimento de Caixa
    lErro = CF("MovimentosCaixa_Lock1", objMovimentosCaixa)
    If lErro <> SUCESSO And lErro <> 104434 Then gError 104477
    
    'Se não Encontrar Erro
    If lErro = 104434 Then gError 104478
    
    'Fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

     
    ChequeNaoEsp_Exclui = SUCESSO

    Exit Function

Erro_ChequeNaoEsp_Exclui:

    ChequeNaoEsp_Exclui = gErr

    Select Case gErr
        
        Case 104470
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 104471, 104472, 104473
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUE1", gErr, lCodigoMsgErro)

        Case 104474
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CHEQUE_INEXISTENTE", gErr, lCodigoMsgErro)

        Case 104475
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_CHEQUE", gErr, lCodigoMsgErro)

        Case 104476
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CHEQUE", gErr, lCodigoMsgErro)

        Case 104477
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_MOVIMENTOSCAIXA", gErr, objMovimentosCaixa.lNumMovto)

        Case 104478
            lErro = Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOCAIXA_NAO_CADASTRADO", gErr, objMovimentosCaixa.lNumMovto)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151057)

    End Select

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Mover_Dados_Cheque_Log(ByVal objCheque As ClassChequePre, objLog As ClassLog) As Long
'Função que carrega o objLog para a Gravação do Log Criando uma String

    'Carrega a String concatenando todos os campos do obj separados por Caracter Zero
    objLog.sLog = CStr(objCheque.dtDataDeposito) & Chr(vbKeyEscape) & CStr(objCheque.dValor) & Chr(vbKeyEscape) & CStr(objCheque.iAprovado) & Chr(vbKeyEscape) & CStr(objCheque.iBanco) & Chr(vbKeyEscape) & CStr(objCheque.iChequeSel) & Chr(vbKeyEscape) & CStr(objCheque.iECF) & Chr(vbKeyEscape) & CStr(objCheque.iFilial) & Chr(vbKeyEscape) & CStr(objCheque.iFilialEmpresa) & Chr(vbKeyEscape) & CStr(objCheque.iFilialEmpresaLoja) & Chr(vbKeyEscape) & CStr(objCheque.iNaoEspecificado) & Chr(vbKeyEscape) & CStr(objCheque.lCliente) & Chr(vbKeyEscape) & CStr(objCheque.lCupomFiscal) & _
    Chr(vbKeyEscape) & CStr(objCheque.lNumBordero) & Chr(vbKeyEscape) & CStr(objCheque.lNumBorderoLoja) & Chr(vbKeyEscape) & CStr(objCheque.lNumero) & Chr(vbKeyEscape) & CStr(objCheque.lNumIntCheque) & Chr(vbKeyEscape) & CStr(objCheque.lNumMovtoCaixa) & Chr(vbKeyEscape) & CStr(objCheque.lSequencial) & Chr(vbKeyEscape) & CStr(objCheque.lSequencialBack) & Chr(vbKeyEscape) & CStr(objCheque.lSequencialLoja) & Chr(vbKeyEscape) & CStr(objCheque.sAgencia) & Chr(vbKeyEscape) & CStr(objCheque.sContaCorrente) & Chr(vbKeyEscape) & CStr(objCheque.sCPFCGC)

    'Coloca ao final da String o indicador de "Fim de String (vbKeyEnd)"
    objLog.sLog = objLog.sLog & Chr(vbKeyEnd)
    
    Mover_Dados_Cheque_Log = SUCESSO
    
End Function

Function Cheque_Codigo_Automatico_Nao_Esp(lCodigo As Long) As Long
'Gera o proximo codigo da Tabela de Requisitante

Dim lErro As Long

On Error GoTo Erro_Cheque_Codigo_Automatico_Nao_Esp

    If giLocalOperacao = LOCALOPERACAO_BACKOFFICE Then

        'Chama a rotina que gera o sequencial Para Back
        lErro = CF("Config_ObterAutomatico_EmTrans", "CPRConfig", "COD_PROX_CHEQUE_BACKOFFICE", "ChequePre", "SequencialBack", lCodigo)
        If lErro <> SUCESSO Then gError 104479


    Else

        'Chama a rotina que gera o sequencial para Loja
        lErro = CF("Config_ObterAutomatico_EmTrans", "LojaConfig", "COD_PROX_CHEQUE_LOJA", "Cheque", "Sequencial", lCodigo, "FilialEmpresaLoja")
        If lErro <> SUCESSO Then gError 104480
        
    End If

    Cheque_Codigo_Automatico_Nao_Esp = SUCESSO

    Exit Function

Erro_Cheque_Codigo_Automatico_Nao_Esp:

    Cheque_Codigo_Automatico_Nao_Esp = gErr

    Select Case gErr

        Case 104479, 104480

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151058)

    End Select

    Exit Function

End Function
'''
'''Function Troca_Grava(ByVal objTroca As ClassTroca) As Long
''''Efetua a gravação dos dados de objTroca no Banco de Dados
'''
'''Dim lErro As Long
'''Dim lComando As Long
'''Dim lTransacao As Long
'''Dim iCodigo As Integer
'''Dim iIndice As Integer
'''Dim objLog As New ClassLog
'''
'''On Error GoTo Erro_Troca_Grava
'''
'''    lComando = Comando_Abrir()
'''    If lComando = 0 Then gError 99761
'''
'''    'Seleciona na Tabela Troca para saber se já existe com o Nome passado como Filtro no Bd
'''    lErro = Comando_Executar(lComando, "INSERT INTO Troca (NumIntDoc, FilialEmpresa, Produto, Quantidade, Valor, NumMovtoCaixa) VALUES(?,?,?,?,?,?)", objTroca.lNumIntDoc, objTroca.iFilialEmpresa, objTroca.sProduto, objTroca.dQuantidade, objTroca.dValor, objTroca.lNumMovtoCaixa)
'''    If lErro <> SUCESSO Then gError 99763
'''
'''    'Log de Inclusão
'''    objLog.iOperacao = INCLUSAO_TROCA
'''
'''    Call Troca_Carrega_Log(objLog, objTroca)
'''
'''    'Monta Registro Para a Tabela de Log
'''    lErro = CF("Log_Grava", objLog)
'''    If lErro <> SUCESSO Then gError 99764
'''
'''    'Fecha os  comandos
'''    Comando_Fechar (lComando)
'''
'''    Troca_Grava = SUCESSO
'''
'''    Exit Function
'''
'''Erro_Troca_Grava:
'''
'''    Troca_Grava = gErr
'''
'''    Select Case gErr
'''
'''        Case 99761
'''            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
'''
'''        Case 99762
'''            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
'''
'''        Case 99763
'''            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_TROCA", gErr)
'''
'''        Case 99765
'''            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
'''
'''        Case 99674
'''
'''        Case Else
'''            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151059)
'''
'''    End Select
'''
'''    Call Comando_Fechar(lComando)
'''
'''    Exit Function
'''
'''End Function
'''
'''Sub Troca_Carrega_Log(objLog As ClassLog, objTroca As ClassTroca)
'''
'''    'Função para Carregar o objLog
'''    objLog.sLog = CStr(objTroca.dQuantidade) & Chr(vbKeyEscape) & CStr(objTroca.dValor) & Chr(vbKeyEscape) & objTroca.iFilialEmpresa & CStr(objTroca.lNumIntDoc) & Chr(vbKeyEscape) & CStr(objTroca.lNumMovtoCaixa) & Chr(vbKeyEscape) & objTroca.sProduto & Chr(vbKeyEnd)
'''
'''End Sub
'''
'''Function Carne_Grava(ByVal objCarne As ClassCarne) As Long
''''Efetua a Gravação dos dados de objCarne no Banco de Dados
'''
'''Dim lErro As Long
'''Dim alComando(1 To 2) As Long
'''Dim lTransacao As Long
'''Dim iCodigo As Integer
'''Dim iIndice As Integer
'''Dim objLog As New ClassLog
'''Dim objCarneParc As ClassCarneParcelas
'''
'''On Error GoTo Erro_Carne_Grava
'''
'''    For iIndice = LBound(alComando) To UBound(alComando)
'''        alComando(iIndice) = Comando_Abrir()
'''        If alComando(iIndice) = 0 Then gError 99766
'''    Next
'''
'''    'inserção
'''    'Seleciona na Tabela Carne para saber se já existe com o Nome passado como Filtro no Bd
'''    lErro = Comando_Executar(alComando(1), "INSERT INTO Carne (NumIntDoc, FilialEmpresa, Status, DataReferencia, CupomFiscal, Cliente, Autorizacao, CodBarrasCarne) VALUES(?,?,?,?,?,?,?,?)", objCarne.lNumIntDoc, objCarne.iFilialEmpresa, objCarne.iStatus, objCarne.dtDataReferencia, objCarne.lCupomFiscal, objCarne.lCliente, objCarne.sAutorizacao, objCarne.sCodBarrasCarne)
'''    If lErro <> SUCESSO Then gError 99768
'''
'''    For Each objCarneParc In objCarne.colParcelas
'''        'Insere os itens
'''        lErro = Comando_Executar(alComando(2), "INSERT INTO CarneParcelas (NumIntDoc, FilialEmpresa, NumIntCarne, Parcela, DataVencimento, Valor, Status) VALUES(?,?,?,?,?,?,?)", objCarneParc.lNumIntDoc, objCarneParc.iFilialEmpresa, objCarneParc.lNumIntCarne, objCarneParc.iParcela, objCarneParc.dtDataVencimento, objCarneParc.dValor, objCarneParc.iStatus)
'''        If lErro <> SUCESSO Then gError 99769
'''    Next
'''
'''    'Log de Inclusão
'''    objLog.iOperacao = INCLUSAO_CARNE
'''
'''    Call Carne_Carrega_Log(objLog, objCarne)
'''
'''    'Monta Registro Para a Tabela de Log
'''    lErro = CF("Log_Grava", objLog)
'''    If lErro <> SUCESSO Then gError 99770
'''
'''    'Fecha os  comandos
'''    For iIndice = LBound(alComando) To UBound(alComando)
'''         Call Comando_Fechar(alComando(iIndice))
'''    Next
'''
'''    Carne_Grava = SUCESSO
'''
'''    Exit Function
'''
'''Erro_Carne_Grava:
'''
'''    Carne_Grava = gErr
'''
'''    Select Case gErr
'''
'''        Case 99766
'''            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
'''
'''        Case 99767
'''            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
'''
'''        Case 99768, 99769
'''            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CARNE", gErr)
'''
'''        Case 99771
'''            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
'''
'''        Case 99670
'''
'''        Case Else
'''            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151060)
'''
'''    End Select
'''
'''    'Fecha os  comandos
'''    For iIndice = LBound(alComando) To UBound(alComando)
'''         Call Comando_Fechar(alComando(iIndice))
'''    Next
'''
'''    Exit Function
'''
'''End Function
'''
'''Sub Carne_Carrega_Log(ByVal objLog As ClassLog, ByVal objCarne As ClassCarne)
'''
'''Dim objCarneParc As New ClassCarneParcelas
'''
'''    'Função para Carregar o objLog
'''    objLog.sLog = CStr(objCarne.dtDataReferencia) & Chr(vbKeyEscape) & CStr(objCarne.iFilialEmpresa) & Chr(vbKeyEscape) & objCarne.iStatus & Chr(vbKeyEscape) & CStr(objCarne.lCupomFiscal) & Chr(vbKeyEscape) & CStr(objCarne.lNumIntDoc) & Chr(vbKeyEscape) & CStr(objCarne.lCliente) & Chr(vbKeyEscape) & CStr(objCarne.sAutorizacao) & Chr(vbKeyEscape) & CStr(objCarne.sCodBarrasCarne)
'''
'''    For Each objCarneParc In objCarne.colParcelas
'''        'Função para Carregar o objLog
'''        objLog.sLog = objLog.sLog & Chr(vbKeyControl) & CStr(objCarneParc.dtDataVencimento) & Chr(vbKeyEscape) & CStr(objCarneParc.dValor) & Chr(vbKeyEscape) & CStr(objCarneParc.iFilialEmpresa) & Chr(vbKeyEscape) & CStr(objCarneParc.iParcela) & Chr(vbKeyEscape) & CStr(objCarneParc.iStatus) & Chr(vbKeyEscape) & CStr(objCarneParc.lNumIntCarne) & Chr(vbKeyEscape) & CStr(objCarneParc.lNumIntDoc)
'''    Next
'''
'''    objLog.sLog = objLog.sLog & Chr(vbKeyEnd)
'''
'''End Sub
'''
'''Function CupomFiscal_Grava(ByVal objCupomFiscal As ClassCupomFiscal) As Long
''''Efetua a Gravação dos dados de objCupomFiscal no Banco de Dados
'''
'''Dim lErro As Long
'''Dim alComando(1 To 2) As Long
'''Dim lTransacao As Long
'''Dim iCodigo As Integer
'''Dim iIndice As Integer
'''Dim objLog As New ClassLog
'''Dim objItens As ClassItemCupomFiscal
'''
'''On Error GoTo Erro_CupomFiscal_Grava
'''
'''    For iIndice = LBound(alComando) To UBound(alComando)
'''        alComando(iIndice) = Comando_Abrir()
'''        If alComando(iIndice) = 0 Then gError 99772
'''    Next
'''
'''    'inserção
'''    lErro = Comando_Executar(alComando(1), "INSERT INTO CupomFiscal(FilialEmpresa, NumIntDoc , Status, ECF, DataEmissao, HoraEmissao, Numero, CPFCGC, NumOrcamento, ValorTotal, ValorProdutos, ValorDesconto, ValorAcrescimo, TabelaPreco, NaturezaOp, GerenteCancel, MotivoCancel, Vendedor) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", objCupomFiscal.iFilialEmpresa, objCupomFiscal.lNumIntDoc, objCupomFiscal.iStatus, objCupomFiscal.iECF, objCupomFiscal.dtDataEmissao, objCupomFiscal.dHoraEmissao, objCupomFiscal.lNumero, objCupomFiscal.sCPFCGC, objCupomFiscal.lNumOrcamento, objCupomFiscal.dValorTotal, objCupomFiscal.dValorProdutos, objCupomFiscal.dValorDesconto, objCupomFiscal.dValorAcrescimo, objCupomFiscal.iTabelaPreco, objCupomFiscal.sNaturezaOp, objCupomFiscal.lGerenteCancel, objCupomFiscal.sMotivoCancel, objCupomFiscal.iVendedor)
'''    If lErro <> SUCESSO Then gError 99774
'''
'''    For Each objItens In objCupomFiscal.colItens
'''        'Insere os itens
'''        lErro = Comando_Executar(alComando(2), "INSERT INTO ItensCupomFiscal (NumIntDoc, FilialEmpresa, NumIntCupom, Item, Status, Produto, UnidadeMed, Quantidade, PrecoUnitario, PercDesc, ValorDesconto, AliquotaICMS)VALUES(?,?,?,?,?,?,?,?,?,?,?,?)", objItens.lNumIntDoc, giFilialEmpresa, objItens.lNumIntCupom, objItens.iItem, objItens.iStatus, objItens.sProduto, objItens.sUnidadeMed, objItens.dQuantidade, objItens.dPrecoUnitario, objItens.dPercDesc, objItens.dValorDesconto, objItens.dAliquotaICMS)
'''        If lErro <> SUCESSO Then gError 99775
'''    Next
'''
'''    'Log de Inclusão
'''    objLog.iOperacao = INCLUSAO_CUPOMFISCAL
'''
'''    Call CupomFiscal_Carrega_Log(objLog, objCupomFiscal)
'''
'''    'Monta Registro Para a Tabela de Log
'''    lErro = CF("Log_Grava", objLog)
'''    If lErro <> SUCESSO Then gError 99795
'''
'''    'Fecha os  comandos
'''    For iIndice = LBound(alComando) To UBound(alComando)
'''         Call Comando_Fechar(alComando(iIndice))
'''    Next
'''
'''    CupomFiscal_Grava = SUCESSO
'''
'''    Exit Function
'''
'''Erro_CupomFiscal_Grava:
'''
'''    CupomFiscal_Grava = gErr
'''
'''    Select Case gErr
'''
'''        Case 99772
'''            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
'''
'''        Case 99773
'''            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
'''
'''        Case 99774, 99775
'''            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CUPOMFISCAL", gErr)
'''
'''        Case 99796
'''            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
'''
'''        Case 99795
'''
'''        Case Else
'''            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151061)
'''
'''    End Select
'''
'''    'Fecha os  comandos
'''    For iIndice = LBound(alComando) To UBound(alComando)
'''         Call Comando_Fechar(alComando(iIndice))
'''    Next
'''
'''    Exit Function
'''
'''End Function
'''
'''Sub CupomFiscal_Carrega_Log(ByVal objLog As ClassLog, ByVal objCupomFiscal As ClassCupomFiscal)
'''
'''Dim objItens As New ClassItemCupomFiscal
'''
'''    'Função para Carregar o objLog
'''    objLog.sLog = CStr(objCupomFiscal.dtDataEmissao) & Chr(vbKeyEscape) & CStr(objCupomFiscal.dHoraEmissao) & Chr(vbKeyEscape) & objCupomFiscal.dValorAcrescimo & Chr(vbKeyEscape) & CStr(objCupomFiscal.dValorDesconto) & Chr(vbKeyEscape) & CStr(objCupomFiscal.dValorProdutos) & Chr(vbKeyEscape) & CStr(objCupomFiscal.dValorTotal) & Chr(vbKeyEscape) & CStr(objCupomFiscal.dValorTroco) & Chr(vbKeyEscape) & CStr(objCupomFiscal.iECF) & Chr(vbKeyEscape) & objCupomFiscal.iFilialEmpresa & Chr(vbKeyEscape) & CStr(objCupomFiscal.iStatus) & Chr(vbKeyEscape) & CStr(objCupomFiscal.iTabelaPreco) & Chr(vbKeyEscape) & CStr(objCupomFiscal.lGerenteCancel) & Chr(vbKeyEscape) & objCupomFiscal.lNumero & Chr(vbKeyEscape) & CStr(objCupomFiscal.lNumIntDoc) & Chr(vbKeyEscape)
'''    objLog.sLog = objLog.sLog & CStr(objCupomFiscal.lNumOrcamento) & Chr(vbKeyEscape) & CStr(objCupomFiscal.iVendedor) & Chr(vbKeyEscape) & CStr(objCupomFiscal.sCPFCGC) & Chr(vbKeyEscape) & objCupomFiscal.sMotivoCancel & Chr(vbKeyEscape) & CStr(objCupomFiscal.sNaturezaOp)
'''
'''    For Each objItens In objCupomFiscal.colItens
'''        'Função para Carregar o objLog
'''        objLog.sLog = objLog.sLog & Chr(vbKeyControl) & CStr(objItens.dAliquotaICMS) & Chr(vbKeyEscape) & CStr(objItens.dPercDesc) & Chr(vbKeyEscape) & CStr(objItens.dPrecoUnitario) & Chr(vbKeyEscape) & CStr(objItens.dQuantidade) & Chr(vbKeyEscape) & CStr(objItens.dValorDesconto) & Chr(vbKeyEscape) & CStr(objItens.icancel) & Chr(vbKeyEscape) & CStr(objItens.iStatus) & Chr(vbKeyEscape) & CStr(objItens.lNumIntCupom) & Chr(vbKeyEscape) & CStr(objItens.lNumIntDoc) & Chr(vbKeyEscape) & CStr(objItens.sProduto) & Chr(vbKeyEscape) & CStr(objItens.sUnidadeMed) & Chr(vbKeyEscape) & CStr(objItens.iItem)
'''    Next
'''
'''    objLog.sLog = objLog.sLog & Chr(vbKeyEnd)
'''
'''End Sub
'''
'''Function OrcamentoLoja_Grava(ByVal objOrcamento As ClassOrcamentoLoja) As Long
''''Efetua a Gravação dos dados de objOrcamento no Banco de Dados
'''
'''Dim lErro As Long
'''Dim alComando(1 To 2) As Long
'''Dim lTransacao As Long
'''Dim iCodigo As Integer
'''Dim iIndice As Integer
'''Dim objLog As New ClassLog
'''Dim objItens As ClassItemOrcamentoLoja
'''
'''On Error GoTo Erro_OrcamentoLoja_Grava
'''
'''    For iIndice = LBound(alComando) To UBound(alComando)
'''        alComando(iIndice) = Comando_Abrir()
'''        If alComando(iIndice) = 0 Then gError 99797
'''    Next
'''
'''    'inserção
'''    lErro = Comando_Executar(alComando(1), "INSERT INTO OrcamentoLoja(FilialEmpresa, NumIntDoc , Status, ECF, DataEmissao, HoraEmissao, Numero, CPFCGC, NumOrcamento, ValorTotal, ValorProdutos, ValorDesconto, ValorAcrescimo, TabelaPreco, NaturezaOp, GerenteCancel, MotivoCancel, Vendedor, Duracao) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", objOrcamento.iFilialEmpresa, objOrcamento.lNumIntDoc, objOrcamento.iStatus, objOrcamento.iECF, objOrcamento.dtDataEmissao, objOrcamento.dHoraEmissao, objOrcamento.lNumero, objOrcamento.sCPFCGC, objOrcamento.lNumOrcamento, objOrcamento.dValorTotal, objOrcamento.dValorProdutos, objOrcamento.dValorDesconto, objOrcamento.dValorAcrescimo, objOrcamento.iTabelaPreco, objOrcamento.sNaturezaOp, objOrcamento.lGerenteCancel, objOrcamento.sMotivoCancel, objOrcamento.iVendedor, objOrcamento.lDuracao)
'''    If lErro <> SUCESSO Then gError 99799
'''
'''    For Each objItens In objOrcamento.colItens
'''        'Insere os itens
'''        lErro = Comando_Executar(alComando(2), "INSERT INTO ItensOrcamentoLoja (NumIntDoc, FilialEmpresa, NumIntOrcamento, Item, Status, Produto, UnidadeMed, Quantidade, PrecoUnitario, PercDesc, ValorDesconto, AliquotaICMS)VALUES(?,?,?,?,?,?,?,?,?,?,?,?)", objItens.lNumIntDoc, giFilialEmpresa, objItens.lNumIntOrcamento, objItens.iItem, objItens.iStatus, objItens.sProduto, objItens.sUnidadeMed, objItens.dQuantidade, objItens.dPrecoUnitario, objItens.dPercDesc, objItens.dValorDesconto, objItens.dAliquotaICMS)
'''        If lErro <> SUCESSO Then gError 99800
'''    Next
'''
'''    'Log de Inclusão
'''    objLog.iOperacao = INCLUSAO_ORCAMENTO
'''
'''    Call Orcamento_Carrega_Log(objLog, objOrcamento)
'''
'''    'Monta Registro Para a Tabela de Log
'''    lErro = CF("Log_Grava", objLog)
'''    If lErro <> SUCESSO Then gError 99801
'''
'''    'Fecha os  comandos
'''    For iIndice = LBound(alComando) To UBound(alComando)
'''         Call Comando_Fechar(alComando(iIndice))
'''    Next
'''
'''    OrcamentoLoja_Grava = SUCESSO
'''
'''    Exit Function
'''
'''Erro_OrcamentoLoja_Grava:
'''
'''    OrcamentoLoja_Grava = gErr
'''
'''    Select Case gErr
'''
'''        Case 99772
'''            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
'''
'''        Case 99774, 99775
'''            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CUPOMFISCAL", gErr)
'''
'''        Case 99795
'''
'''        Case Else
'''            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151062)
'''
'''    End Select
'''
'''    'Fecha os  comandos
'''    For iIndice = LBound(alComando) To UBound(alComando)
'''         Call Comando_Fechar(alComando(iIndice))
'''    Next
'''
'''    Exit Function
'''
'''End Function
'''
'''Sub Orcamento_Carrega_Log(ByVal objLog As ClassLog, ByVal objOrcamento As ClassOrcamentoLoja)
'''
'''Dim objItens As New ClassItemOrcamentoLoja
'''
'''    'Função para Carregar o objLog
'''    objLog.sLog = CStr(objOrcamento.dtDataEmissao) & Chr(vbKeyEscape) & CStr(objOrcamento.dHoraEmissao) & Chr(vbKeyEscape) & objOrcamento.dValorAcrescimo & Chr(vbKeyEscape) & CStr(objOrcamento.dValorDesconto) & Chr(vbKeyEscape) & CStr(objOrcamento.dValorProdutos) & Chr(vbKeyEscape) & CStr(objOrcamento.dValorTotal) & Chr(vbKeyEscape) & CStr(objOrcamento.dValorTroco) & Chr(vbKeyEscape) & CStr(objOrcamento.iECF) & Chr(vbKeyEscape) & objOrcamento.iFilialEmpresa & Chr(vbKeyEscape) & CStr(objOrcamento.iStatus) & Chr(vbKeyEscape) & CStr(objOrcamento.iTabelaPreco) & Chr(vbKeyEscape) & CStr(objOrcamento.lGerenteCancel) & Chr(vbKeyEscape) & objOrcamento.lNumero & Chr(vbKeyEscape) & CStr(objOrcamento.lNumIntDoc) & Chr(vbKeyEscape)
'''    objLog.sLog = objLog.sLog & CStr(objOrcamento.lNumOrcamento) & Chr(vbKeyEscape) & CStr(objOrcamento.iVendedor) & Chr(vbKeyEscape) & CStr(objOrcamento.sCPFCGC) & Chr(vbKeyEscape) & objOrcamento.sMotivoCancel & Chr(vbKeyEscape) & CStr(objOrcamento.sNaturezaOp) & Chr(vbKeyEscape) & Chr(vbKeyEscape) & CStr(objOrcamento.lDuracao)
'''
'''    For Each objItens In objOrcamento.colItens
'''        'Função para Carregar o objLog
'''        objLog.sLog = objLog.sLog & Chr(vbKeyControl) & CStr(objItens.dAliquotaICMS) & Chr(vbKeyEscape) & CStr(objItens.dPercDesc) & Chr(vbKeyEscape) & CStr(objItens.dPrecoUnitario) & Chr(vbKeyEscape) & CStr(objItens.dQuantidade) & Chr(vbKeyEscape) & CStr(objItens.dValorDesconto) & Chr(vbKeyEscape) & CStr(objItens.icancel) & Chr(vbKeyEscape) & CStr(objItens.iStatus) & Chr(vbKeyEscape) & CStr(objItens.lNumIntOrcamento) & Chr(vbKeyEscape) & CStr(objItens.lNumIntDoc) & Chr(vbKeyEscape) & CStr(objItens.sProduto) & Chr(vbKeyEscape) & CStr(objItens.sUnidadeMed) & Chr(vbKeyEscape) & CStr(objItens.iItem)
'''    Next
'''
'''    objLog.sLog = objLog.sLog & Chr(vbKeyEnd)
'''
'''End Sub

Function CancelaRecebimentoCarne_Grava(ByVal colMovimentosCaixa As Collection) As Long

Dim lErro As Long
Dim lTransacao As Long
Dim objMovimentosCaixa As ClassMovimentoCaixa
Dim objCarneParcelas As ClassRecebimentoCarneParc

On Error GoTo Erro_CancelaRecebimentoCarne_Grava

    'Abre a Transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 109519
    
    For Each objMovimentosCaixa In colMovimentosCaixa
            
        Set objCarneParcelas = New ClassRecebimentoCarneParc
        
        objCarneParcelas.lParcelaNumIntDoc = objMovimentosCaixa.lNumRefInterna
        objCarneParcelas.iStatus = STATUS_LANCADO
        
        'Atualiza a parcela de Carnê vinculada a este movimento
        lErro = CF("CarneParcelas_Atualiza_EmTrans", objCarneParcelas)
        If lErro <> SUCESSO Then gError 109520
        
        'Grava este movimento de caixa
        lErro = CF("MovimentosCaixa_Inserir", objMovimentosCaixa)
        If lErro <> SUCESSO Then gError 109521
        
    Next
    
    'Confirma Transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 109522

    CancelaRecebimentoCarne_Grava = SUCESSO
    
    Exit Function
    
Erro_CancelaRecebimentoCarne_Grava:
    
    CancelaRecebimentoCarne_Grava = gErr
    
    Select Case gErr
                             
        Case 104107
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 109519
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
        
        Case 109520, 109521

        Case 109522
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151063)

    End Select

    Call Transacao_Rollback

    Exit Function
    
End Function

Function CarneParcelas_Atualiza_EmTrans(ByVal objCarneParcelas As ClassRecebimentoCarneParc) As Long

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim objMovimentosCaixa As ClassMovimentoCaixa
Dim iStatus As Integer
Dim lNumCarne As Long
Dim objCarne As New ClassRecebimentoCarne
Dim iIndice As Integer

On Error GoTo Erro_CarneParcelas_Atualiza_EmTrans

    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 109523
    Next
    
    'seleciona o registro com o numintdoc passado
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Status, NumIntCarne FROM CarneParcelas WHERE NumIntDoc = ? AND FilialEmpresa = ? ", 0, iStatus, lNumCarne, objCarneParcelas.lParcelaNumIntDoc, giFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 109524

    'busca o primeiro na seleção
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109525

    'se não encontrar--> erro
    If lErro = AD_SQL_SEM_DADOS Then gError 109526
    
    'Se a parcela aimda não foi baixada-->erro.
    If iStatus <> STATUS_BAIXADO Then gError 109527
    
    'Faz lock
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> SUCESSO Then gError 109528
    
    'Atualiza a parcela
    lErro = Comando_ExecutarPos(alComando(1), "UPDATE CarneParcelas SET Status=?", alComando(0), objCarneParcelas.iStatus)
    If lErro <> AD_SQL_SUCESSO Then gError 109529
            
    objCarne.lNumIntDoc = lNumCarne
    objCarne.iStatus = STATUS_LANCADO
    
    'Atualiza o carne
    lErro = CF("Carne_Atualiza_EmTrans", objCarne)
    If lErro <> SUCESSO Then gError 109530
    
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    CarneParcelas_Atualiza_EmTrans = SUCESSO
    
    Exit Function
    
Erro_CarneParcelas_Atualiza_EmTrans:
    
    CarneParcelas_Atualiza_EmTrans = gErr
    
    Select Case gErr
                             
        Case 109523
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 109524, 109525
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CARNEPARC", gErr)
            
        Case 109526
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CARNEPARC_NAO_EXISTENTES", gErr)
            
        Case 109527
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PARCELA_NAO_BAIXA", gErr, objCarneParcelas.lParcelaNumIntDoc)
            
        Case 109528
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_CARNEPARC", gErr)
            
        Case 109529
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_CARNEPARC", gErr)
            
        Case 109530
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151064)

    End Select

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function
    
End Function

Function Carne_Atualiza_EmTrans(ByVal objCarne As ClassRecebimentoCarne) As Long

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim lNumCarne As Long
Dim iIndice As Integer

On Error GoTo Erro_Carne_Atualiza_EmTrans

    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 109531
    Next
    
    'seleciona o registro com o numintdoc passado
    lErro = Comando_ExecutarPos(alComando(0), "SELECT NumIntDoc FROM Carne WHERE NumIntDoc = ? AND FilialEmpresa = ? ", 0, lNumCarne, objCarne.lNumIntDoc, giFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 109532

    'busca o primeiro na seleção
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109533

    'se não encontrar--> erro
    If lErro = AD_SQL_SEM_DADOS Then gError 109534
    
    'Faz lock
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> SUCESSO Then gError 109535
    
    'Atualiza a parcela
    lErro = Comando_ExecutarPos(alComando(1), "UPDATE Carne SET Status=?", alComando(0), objCarne.iStatus)
    If lErro <> AD_SQL_SUCESSO Then gError 109536
    
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Carne_Atualiza_EmTrans = SUCESSO
    
    Exit Function
    
Erro_Carne_Atualiza_EmTrans:
    
    Carne_Atualiza_EmTrans = gErr
    
    Select Case gErr
                             
        Case 109531
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 109532, 109533
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CARNE", gErr)
            
        Case 109534
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CARNE_NAO_EXISTENTE", gErr)
            
        Case 109535
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_CARNE", gErr)
            
        Case 109536
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_CARNE", gErr)
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151065)

    End Select

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function
    
End Function

Function RecebimentoCarne_Grava(ByVal colCarneParcelasImpressao As Collection, ByVal objVenda As ClassVenda) As Long
'Grava um carnet

Dim lErro As Long
Dim alComando(0 To 3) As Long
Dim lTransacao As Long
Dim iIndice2 As Integer
Dim iIndice As Integer
Dim iStatus As Integer
Dim objCarneParcelasImpressao As New ClassCarneParcelasImpressao
Dim lNumIntDoc As Long
Dim lNumIntParc As Long
Dim objMovimento As New ClassMovimentoCaixa
Dim iIndiceMovCaixa As Integer
Dim aiNumIntMovCaixa() As Integer
Dim objBaixasParcCarne As ClassBaixasParcCarne
Dim objChequePre As ClassChequePre
Dim colCarne As New Collection
Dim bAchou As Boolean
Dim iNumMovCaixa As Integer
Dim objLog As New ClassLog
Dim lNumIntBaixa As Long
Dim lNum As Long
Dim objBaixasCarne As New ClassBaixasCarne
Dim lSequencialBack As Long

On Error GoTo Erro_RecebimentoCarne_Grava

    'Abertura dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 109635
    Next
    
    'Abre a Transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 109636
    
    objBaixasCarne.iFilialEmpresa = objVenda.objCupomFiscal.iFilialEmpresa
    
    'Insere no Bd
    lErro = CF("BaixasCarne_Grava", objBaixasCarne)
    If lErro <> SUCESSO Then gError 109688
        
    'Função que recebe os dados de baixa de carne e coloca em colRegistro para preparar a gravacao do log
    Call Mover_Dados_BaixasCarne_Log(objBaixasCarne, objLog)
        
    'Para cada parcela a ter seu recebimento gravado
    For Each objCarneParcelasImpressao In colCarneParcelasImpressao
    
        Set objBaixasParcCarne = objCarneParcelasImpressao.objBaixasParcCarne
        
        'Seleciona no Bd o carnet
        lErro = Comando_ExecutarPos(alComando(1), "SELECT Status, NumIntDoc FROM Carne WHERE FilialEmpresa = ? AND CodBarrasCarne = ?", 0, iStatus, lNumIntDoc, objBaixasCarne.iFilialEmpresa, objCarneParcelasImpressao.sCodCarne)
        If lErro <> SUCESSO Then gError 109637
        
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109638
        
        'Se não Encontrou Gera Erro
        If lErro = AD_SQL_SEM_DADOS Then gError 109639
        
        'Se já foi baixado --> Erro.
        If iStatus = STATUS_BAIXADO Then gError 109640
        
        'Faz "lock" no Carne
        lErro = Comando_LockExclusive(alComando(1))
        If lErro <> SUCESSO Then gError 109641

        'Tenta ler a parcela do carnet
        lErro = Comando_ExecutarPos(alComando(2), "SELECT Status, NumIntDoc FROM CarneParcelas WHERE NumIntCarne = ? AND FilialEmpresa = ? AND Parcela = ?", 0, iStatus, lNumIntParc, lNumIntDoc, objBaixasCarne.iFilialEmpresa, objCarneParcelasImpressao.iParcelaNumero)
        If lErro <> AD_SQL_SUCESSO Then gError 109642
    
        lErro = Comando_BuscarPrimeiro(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109643
    
        'Se não Encontrou Gera Erro
        If lErro = AD_SQL_SEM_DADOS Then gError 109644
        
        'Se já foi baixado --> Erro.
        If iStatus = STATUS_BAIXADO Then gError 109645
        
        'Faz "lock" da parcela
        lErro = Comando_LockExclusive(alComando(2))
        If lErro <> SUCESSO Then gError 109646
                
        objBaixasParcCarne.iFilialEmpresa = objBaixasCarne.iFilialEmpresa
        objBaixasParcCarne.lNumIntBaixa = objBaixasCarne.lNumIntDoc
        objBaixasParcCarne.lNumIntParcelaCarne = lNumIntParc
        
        'Insere no Bd
        lErro = CF("BaixasParcCarne_Grava", objBaixasParcCarne)
        If lErro <> SUCESSO Then gError 109647
        
        'Atualiza o status
        lErro = Comando_ExecutarPos(alComando(3), "UPDATE CarneParcelas SET Status=?", alComando(2), STATUS_BAIXADO)
        If lErro <> AD_SQL_SUCESSO Then gError 109648
        
        bAchou = False
        
        'Para cada carne
        For iIndice = 1 To colCarne.Count
            'se já existe -->sai
            If objCarneParcelasImpressao.sCodCarne = colCarne.Item(iIndice) Then
                bAchou = True
                Exit For
            End If
        Next
        
        'Se não existe na col --> add.
        If Not (bAchou) Then colCarne.Add objCarneParcelasImpressao.sCodCarne
        
        Call Mover_Dados_BaixasParcCarne_Log(objBaixasParcCarne, objLog)
        
    Next
                
    'Grava todos os movimentos de caixa
    For iIndice = 1 To objVenda.colMovimentosCaixa.Count
        
        Set objMovimento = objVenda.colMovimentosCaixa.Item(iIndice)
        
        lNum = objMovimento.lNumRefInterna
        objMovimento.lNumRefInterna = objBaixasCarne.lNumIntDoc
        objMovimento.iFilialEmpresa = objBaixasCarne.iFilialEmpresa
        objMovimento.iCaixa = CODIGO_CAIXA_CENTRAL
    
        'Grava os movimentos de caixa
        lErro = CF("MovimentosCaixa_Inserir", objMovimento)
        If lErro <> SUCESSO Then gError 105982
        
        If objMovimento.iTipo = MOVIMENTOCAIXA_RECEB_CARNE_DINHEIRO Then
        
            lErro = Recebimento_Carne_Dinheiro(objMovimento)
            If lErro <> SUCESSO Then gError 133809
        
        End If
        
        'Se for movimento de cheque
        If objMovimento.iTipo = MOVIMENTOCAIXA_RECEB_CARNE_CHEQUE Then
            
            For iIndice2 = 1 To objVenda.colCheques.Count
            
                'se for o movimento de cheque correnspondente
                If lNum = iIndice2 Then
                
                    Set objChequePre = objVenda.colCheques.Item(iIndice2)
                    
                    objChequePre.lNumMovtoCaixa = objMovimento.lNumMovto
                    objChequePre.dtDataEmissao = objMovimento.dtDataMovimento
                    
                    'Chama a rotina que gera o sequencial
                    lErro = CF("Config_ObterNumInt", "LojaConfig", "COD_PROX_CHEQUE_LOJA", lNumIntDoc, 1, objChequePre.iFilialEmpresa)
                    If lErro <> SUCESSO Then gError 109681
            
                    objChequePre.lSequencialLoja = lNumIntDoc
                    
                    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL_BACKOFFICE Then
                    
                        'Chama a rotina que gera o sequencial
                        lErro = CF("Config_ObterNumInt", "CPRConfig", "COD_PROX_CHEQUE_BACKOFFICE", lSequencialBack, 1)
                        If lErro <> SUCESSO Then gError 105273
                        
                        objChequePre.lSequencialBack = lSequencialBack
                        
                    End If
                    
                    'Insere o cheque no bd
                    lErro = CF("Cheque_Insere", objChequePre)
                    If lErro <> SUCESSO Then gError 109649
                    
                    Exit For
                    
                End If
            
            Next
        
            'guarda as infos de movimento de caixa relativos ao deposito do cheque no caixa central
            lErro = MovimentosCaixa_Gravar_MovcxChq1(objMovimento, objVenda.colCheques, objMovimento.iCaixa)
            If lErro <> SUCESSO Then gError 133815
        
        End If
    
    Next
        
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
        
        Call Mover_Separator_Log(objLog)
            
        If objVenda.colCheques.Count > 0 Then Call Mover_Dados_Cheque_Log1(objVenda.colCheques, objLog)
            
        Call Mover_Separator_Log(objLog)
        
        'preenche o objLog com os dados da venda
        Call Mover_Dados_Movcx_Log1(objVenda.colMovimentosCaixa, objLog)
      
        objLog.iOperacao = INCLUSAO_RECEBIMENTOCARNE
        
        'grava o log
        lErro = CF("Log_Grava", objLog, objLog.colRegistro)
        If lErro <> SUCESSO Then gError 110078
        
    End If
    
    lErro = CF("Verifica_Status", colCarne)
    If lErro <> SUCESSO Then gError 110080
    
    'Confirma Transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 109650

    'Fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    RecebimentoCarne_Grava = SUCESSO

    Exit Function

Erro_RecebimentoCarne_Grava:

    RecebimentoCarne_Grava = gErr

    Select Case gErr

        Case 105273, 105982, 109647, 109649, 109681 To 109684, 109688, 110078, 110080, 133809, 133815

        Case 109635
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 109636
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 109637, 109638
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CARNE", gErr)
        
        Case 109639
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CARNE_NAO_EXISTENTE", gErr)
        
        Case 109640
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CARNE_JA_BAIXADO", gErr, objCarneParcelasImpressao.sCodCarne)
        
        Case 109641
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_CARNE", gErr)

        Case 109642, 109643
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CARNEPARC", gErr)
        
        Case 109644
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CARNEPARC_NAO_EXISTENTES", gErr)
        
        Case 109645
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PARCCARNE_JA_BAIXADO", gErr, objCarneParcelasImpressao.iParcelaNumero, objCarneParcelasImpressao.sCodCarne)
        
        Case 109646
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_CARNEPARC", gErr)

        Case 109648
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_CARNEPARC", gErr)
        
        Case 109650
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151066)

    End Select

    Call Transacao_Rollback

    'Fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Sub Mover_Dados_BaixasCarne_Log(ByVal objBaixasCarne As ClassBaixasCarne, ByVal objLog As ClassLog)
'Função que recebe os dados de baixa de carne e coloca em colRegistro para preparar a gravacao do log

Dim sLog As String

On Error GoTo Erro_Mover_Dados_BaixasCarne_Log

    If objLog.colRegistro.Count > 0 Then
        sLog = objLog.colRegistro.Item(objLog.colRegistro.Count)
    Else
        sLog = ""
    End If

    'preenche os dados do log com cada atributo do objBaixasCarne separado por vbkeyscape
    With objBaixasCarne
        objLog.sLog = CStr(.iFilialEmpresa) & Chr(vbKeyEscape) & _
                      CStr(.lNumIntDoc) & Chr(vbKeyEscape) & _
                      CStr(.dtDataBaixa) & Chr(vbKeyEscape) & _
                      CStr(.lCodigo) & Chr(vbKeyEscape)
    End With

    Call Mover_Dados_Log(sLog, objLog)

    Exit Sub

Erro_Mover_Dados_BaixasCarne_Log:

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151067)

    End Select

    Exit Sub

End Sub

Private Sub Mover_Dados_BaixasParcCarne_Log(ByVal objBaixasParcCarne As ClassBaixasParcCarne, ByVal objLog As ClassLog)
'Função que recebe os dados de baixa parc carne e coloca em colRegistro para preparar a gravacao do log

Dim sLog As String

On Error GoTo Erro_Mover_Dados_BaixasParcCarne_Log

    If objLog.colRegistro.Count > 0 Then
        sLog = objLog.colRegistro.Item(objLog.colRegistro.Count)
    Else
        sLog = ""
    End If

    'preenche os dados do log com cada atributo do objBaixasCarne separado por vbkeyscape
    With objBaixasParcCarne
        objLog.sLog = Chr(vbKeyControl) & CStr(.lNumIntDoc) & Chr(vbKeyEscape) & _
                      CStr(.lNumIntParcelaCarne) & Chr(vbKeyEscape) & _
                      CStr(.dValorBaixado) & Chr(vbKeyEscape) & _
                      CStr(.dValorDesconto) & Chr(vbKeyEscape) & _
                      CStr(.dValorJuros) & Chr(vbKeyEscape) & _
                      CStr(.dValorMulta) & Chr(vbKeyEscape)
    End With

    Call Mover_Dados_Log(sLog, objLog)

    Exit Sub

Erro_Mover_Dados_BaixasParcCarne_Log:

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151068)

    End Select

    Exit Sub

End Sub

Function BaixasParcCarne_Grava(ByVal objBaixasParcCarne As ClassBaixasParcCarne) As Long

Dim lErro As Long
Dim lComando As Long
Dim lNumIntDoc As Long

On Error GoTo Erro_BaixasParcCarne_Grava

    'Abertura dos Comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 109674
        
    'gerar numintbaixa
    lErro = CF("Config_ObterNumInt", "LojaConfig", "NUM_PROX_BAIXAPARC_CARNE", lNumIntDoc, 1, objBaixasParcCarne.iFilialEmpresa)
    If lErro <> SUCESSO Then gError 109679
            
    objBaixasParcCarne.lNumIntDoc = lNumIntDoc
            
    'insere na tabela
    lErro = Comando_Executar(lComando, "INSERT INTO BaixasParcCarne " & _
                                       "(FilialEmpresa, NumIntDoc, NumIntBaixa, NumIntParcelaCarne, ValorBaixado, ValorDesconto, ValorMulta, ValorJuros) " & _
                                       "VALUES (?,?,?,?,?,?,?,?)", _
                                       objBaixasParcCarne.iFilialEmpresa, objBaixasParcCarne.lNumIntDoc, objBaixasParcCarne.lNumIntBaixa, objBaixasParcCarne.lNumIntParcelaCarne, objBaixasParcCarne.dValorBaixado, objBaixasParcCarne.dValorDesconto, objBaixasParcCarne.dValorMulta, objBaixasParcCarne.dValorJuros)
    If lErro <> AD_SQL_SUCESSO Then gError 109675

    'fecha os comandos
    Call Comando_Fechar(lComando)

    BaixasParcCarne_Grava = SUCESSO

    Exit Function

Erro_BaixasParcCarne_Grava:

    BaixasParcCarne_Grava = gErr

    Select Case gErr

        Case 109674
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 109675
            Call Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_BAIXASPARCCARNE", gErr)
        
        Case 109679
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151069)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function

    
End Function

Function BaixasCarne_Grava(objBaixasCarne As ClassBaixasCarne) As Long

Dim lErro As Long
Dim lComando As Long
Dim lNumIntDoc As Long
Dim lCodigo As Long

On Error GoTo Erro_BaixasCarne_Grava

    'Abertura dos Comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 109685
        
    'gerar numintbaixa
    lErro = CF("Config_ObterNumInt", "LojaConfig", "NUM_PROX_BAIXA_CARNE", lNumIntDoc, 1, objBaixasCarne.iFilialEmpresa)
    If lErro <> SUCESSO Then gError 109686
    
    'gerar Código
    lErro = CF("Config_ObterNumInt", "LojaConfig", "NUM_PROX_COD_BAIXA_CARNE", lCodigo, 1, objBaixasCarne.iFilialEmpresa)
    If lErro <> SUCESSO Then gError 109686
    
    objBaixasCarne.lCodigo = lCodigo
    objBaixasCarne.lNumIntDoc = lNumIntDoc
    objBaixasCarne.dtDataBaixa = gdtDataAtual
    
    'insere na tabela
    lErro = Comando_Executar(lComando, "INSERT INTO BaixasCarne " & _
                                       "(FilialEmpresa, NumIntBaixa, DataBaixa, Codigo) " & _
                                       "VALUES (?,?,?,?)", _
                                       objBaixasCarne.iFilialEmpresa, objBaixasCarne.lNumIntDoc, objBaixasCarne.dtDataBaixa, objBaixasCarne.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 109687
    
    'fecha os comandos
    Call Comando_Fechar(lComando)

    BaixasCarne_Grava = SUCESSO

    Exit Function

Erro_BaixasCarne_Grava:

    BaixasCarne_Grava = gErr

    Select Case gErr

        Case 109685
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 109687
            Call Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_BAIXASCARNE", gErr)
        
        Case 109686
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151070)

    End Select

    Call Comando_Fechar(lComando)

    Exit Function
    
End Function

'subiu em 10/10/02, tulio... vindo da tela TransfCentral
Public Function TransfCaixa_Exclusao(ByVal objTransfCaixa As ClassTransfCaixa) As Long
'Funcao que preparadora para a exclusao de uma transferencia

'objTransfCaixa eh parametro de INPUT que traz os dados do caixa a ser
'excluido



Dim lErro As Long
Dim lTransacao As Long
Dim objCaixa As New ClassCaixa

On Error GoTo Erro_TransfCaixa_Exclusao

   'Abre a Transação
   lTransacao = Transacao_Abrir()
   If lTransacao = 0 Then gError 111594

   'pega o codigo do caixa central para locka-lo
   objCaixa.iCodigo = CODIGO_CAIXA_CENTRAL
   objCaixa.iFilialEmpresa = objTransfCaixa.iFilialEmpresa

   'fazer o lock do caixa central
   lErro = CF("Caixa_Lock", objCaixa)
   If lErro <> SUCESSO And lErro <> 103776 Then gError 111595

   If lErro = 103776 Then gError 111596

   'se a transf for menor do q a data inicial da caixa
   If objCaixa.dtDataInicial > objTransfCaixa.objMovCaixaDe.dtDataMovimento Then gError 111597

   lErro = TransfCentral_Exclui(objTransfCaixa)
   If lErro <> SUCESSO Then gError 111598

   lErro = Transacao_Commit
   If lErro <> SUCESSO Then gError 126356

   TransfCaixa_Exclusao = SUCESSO

   Exit Function

Erro_TransfCaixa_Exclusao:

   TransfCaixa_Exclusao = gErr

    Select Case gErr

      Case 111594
         Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

      Case 111595, 111596, 111597, 111598

        Case 126356
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
      Case Else
         Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151071)

   End Select

   Call Transacao_Rollback

   Exit Function

End Function


'subiu em 10/10/02, tulio... vindo da tela TransfCentral
Private Function Cheque_Altera_Status(ByVal lNumInt, ByVal iFilialEmpresa, ByVal iStatusNovo) As Long
'Função que Altera o status na tabela de cheque

'deve ser chamada em TRANS!!!

'lNumInt eh o SequencialLoja correspondente (Parametro de INPUT), item de chave primaria no
'Caixa Central

'iFilialEmpresa eh a filial em questao q tbm faz parte da chave... (Parametro de INPUT)

'iStatusNovo eh o status para qual vc quer q o cheque mude (Parametro de INPUT tambem..)

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim dSaldo As Double
Dim iIndice As Integer
Dim iStatusAntigo As Integer

On Error GoTo Erro_Cheque_Altera_Status

    'Inicia a Abertura do comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 111571
    Next


    'Procura o nome do Parcelamento da Adminitradora no BD a partir do código e a FilialEmpresaLoja
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Status FROM ChequePre WHERE lSequencialLoja = ? AND FilialEmpresa = ? ", 0, _
    iStatusAntigo, lNumInt, iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 111572

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 111573

    'Se não encontrou o Parcelamento => erro
    If lErro = AD_SQL_SEM_DADOS Then gError 111574

    'Se Encontrou o Registro então altera o Saldo
    lErro = Comando_ExecutarPos(alComando(1), "UPDATE ChequePre SET Status = ? ", alComando(0), iStatusNovo)
    If lErro <> AD_SQL_SUCESSO Then gError 111575

    'Fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Cheque_Altera_Status = SUCESSO

    Exit Function

Erro_Cheque_Altera_Status:

    Cheque_Altera_Status = gErr

    Select Case gErr

        Case 111571
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 111572, 111573
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUEPRE", gErr, lNumInt, iFilialEmpresa)

        Case 111574
            Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPRE_INEXISTENTE", gErr, lNumInt, iFilialEmpresa)

        Case 111575
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_STATUS_CHEQUEPRE", gErr, lNumInt, iFilialEmpresa)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151072)

    End Select

    'Fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function LojaConfig_Grava_Configs_Trans(ByVal colConfigs As colLojaConfig) As Long
'Grava na tabela LojaConfig uma coleção de registros de configuração

Dim lErro As Long
Dim objLojaConfig As ClassLojaConfig

On Error GoTo Erro_LojaConfig_Grava_Configs_Trans

   'Para cada elemento da coleção
    For Each objLojaConfig In colConfigs
        
        lErro = LojaConfig_Grava_EmTrans(objLojaConfig)
        If lErro <> SUCESSO Then gError 109361

    Next

    LojaConfig_Grava_Configs_Trans = SUCESSO

    Exit Function

Erro_LojaConfig_Grava_Configs_Trans:

    LojaConfig_Grava_Configs_Trans = gErr

    Select Case gErr

        Case 109360
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 109361

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151073)

    End Select

    Exit Function

End Function

Function LojaConfig_Grava_EmTrans(ByVal objLojaConfig As ClassLojaConfig) As Long
'grava registro em LojaConfig. Apenas altera o conteudo, se nao existir insere o registro.
'TEM QUE SER CHAMADA EM TRANSACAO

Dim lErro As Long
Dim tLojaConfig As typeLojaConfig
Dim alComando(1 To 2) As Long
Dim iIndice As Integer

On Error GoTo Erro_LojaConfig_Grava_EmTrans

    'Abrir comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 109360
    Next

    'inicializar buffer
    tLojaConfig.sConteudo = String(STRING_LOJACONFIG_CONTEUDO, 0)

    'ler registo
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Conteudo FROM LojaConfig WHERE Codigo = ? AND FilialEmpresa = ?", 0, tLojaConfig.sConteudo, objLojaConfig.sCodigo, objLojaConfig.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 109362

    'Lê o primeiro registro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109363

    'Se não encontrou o registro ==> insere o registro
    If lErro = AD_SQL_SEM_DADOS Then
        lErro = Comando_Executar(alComando(2), "INSERT INTO LojaConfig (Codigo, FilialEmpresa, Tipo, Conteudo) VALUES (?,?,?,?)", objLojaConfig.sCodigo, objLojaConfig.iFilialEmpresa, objLojaConfig.iTipo, objLojaConfig.sConteudo)
        If lErro <> AD_SQL_SUCESSO Then gError 109364

    Else
        'se o conteudo foi modificado
        If objLojaConfig.sConteudo <> tLojaConfig.sConteudo Then
            lErro = Comando_ExecutarPos(alComando(2), "UPDATE LojaConfig SET Conteudo = ?", alComando(1), objLojaConfig.sConteudo)
            If lErro <> AD_SQL_SUCESSO Then gError 109365
        End If

    End If

   'Fechar comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    LojaConfig_Grava_EmTrans = SUCESSO

    Exit Function

Erro_LojaConfig_Grava_EmTrans:

    LojaConfig_Grava_EmTrans = gErr

    Select Case gErr

        Case 109362, 109363
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_LOJACONFIG2", gErr, objLojaConfig.sCodigo)

        Case 109364
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_LOJACONFIG2", gErr, objLojaConfig.sCodigo)

        Case 109365
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_LOJACONFIG2", gErr, objLojaConfig.sCodigo)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151074)

    End Select

   'Fechar comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function ProdutosRanking_Grava(ByVal colProdutosRanking As Collection, lNumIntRel) As Long
'Função que Grava no Banco de dados os Produtos com o seu Respectivo Ranking

Dim lErro As Long
Dim alComando As Long
Dim objProdutosRanking As ClassProdutosRanking
Dim lComando As Long
Dim lTransacao As Long

On Error GoTo Erro_ProdutosRanking_Grava

    'abre a transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 113124
    
    'Abertura dos Comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 113094
    
    'Obtem o Próximo Numero Interno do Relatório
    lErro = CF("Config_ObterNumInt", "LojaConfig", "NUM_PROX_REL_PRODRANKING", lNumIntRel, 1, giFilialEmpresa)
    If lErro <> SUCESSO Then gError 113092

    For Each objProdutosRanking In colProdutosRanking

        lErro = Comando_Executar(lComando, "INSERT INTO ProdutosRanking ( NumIntRel ,  Ranking , Produto , NomeReduzido ,ItemCategoria , Quantidade , Valor , QuantProdPerc , ValorProdPerc ) VALUES ( ? , ? , ? , ?, ?, ?, ?, ?, ?)", lNumIntRel, objProdutosRanking.lRanking, objProdutosRanking.sProduto, objProdutosRanking.sNomeReduzido, objProdutosRanking.sItemCategoria, objProdutosRanking.dQuantidade, objProdutosRanking.dValor, objProdutosRanking.dQuantPercParticip, objProdutosRanking.dVlrPercParticip)
        If lErro <> AD_SQL_SUCESSO Then gError 113095

    Next

    'Fecha o comando
    Call Comando_Fechar(lComando)

    'confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 113125

    ProdutosRanking_Grava = SUCESSO

    Exit Function

Erro_ProdutosRanking_Grava:

    ProdutosRanking_Grava = gErr

    Select Case gErr
        
        Case 113092

        Case 113094
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 113095
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_PRODUTOS_RANKING", gErr)
            
        Case 113124
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
        
        Case 113125
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151075)

    End Select

    'cancela a transaçao
    Call Transacao_Rollback

    'Fecha o comando
    Call Comando_Fechar(lComando)

    Exit Function

End Function

Function FiliaisClientesLoja_Grava_EmTrans(ByVal objFilialCliente As ClassFilialCliente, ByVal colEndereco As Collection) As Long
'Grava a Filial Cliente e seus 3 tipos de Enderecos

Dim lErro As Long
Dim iIndice As Integer
Dim lCodigo As Long
Dim lCodEndereco As Long
Dim tFilialCliente As typeFilialCliente
Dim objEndereco As ClassEndereco
Dim lEndereco(1 To 3) As Long
Dim colCategoriaItemCopia As New Collection
Dim objFilialCliCategoria As ClassFilialCliCategoria
Dim objClienteHistorico As New ClassClienteHistorico
Dim objPais As New ClassPais
Dim objCliente As New ClassCliente
Dim alComando(0 To 7) As Long
Dim lEndereco1 As Long
Dim sFilial As String
Dim iInt  As Integer
Dim lCodigoCliente As Long
Dim sNomeReduzido As String
Dim sNomeReduzido1 As String
Dim sNomeReduzido2 As String
Dim bAchou As Boolean
Dim lComando As Long

On Error GoTo Erro_FiliaisClientesLoja_Grava_EmTrans

    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 113772
    Next

    tFilialCliente.sNome = String(STRING_FILIAL_CLIENTE_NOME, 0)
    tFilialCliente.sCgc = String(STRING_CGC, 0)
    tFilialCliente.sRG = String(STRING_RG, 0)
    tFilialCliente.sInscricaoEstadual = String(STRING_INSCR_EST, 0)
    tFilialCliente.sInscricaoMunicipal = String(STRING_INSCR_MUN, 0)
    tFilialCliente.sInscricaoSuframa = String(STRING_INSCR_SUF, 0)
    tFilialCliente.sObservacao = String(STRING_CLIENTE_OBSERVACAO, 0)
    tFilialCliente.sContaContabil = String(STRING_CONTA, 0)
    
    'Cria uma cópia "de trabalho" da coleção passada como parâmetro
    For Each objFilialCliCategoria In objFilialCliente.colCategoriaItem
        colCategoriaItemCopia.Add objFilialCliCategoria
    Next
    
    'Faz os locks nas tabelas ligadas ao cadastramento de uma nova Filial Cliente
    lErro = CF("FiliaisClientes_Le_Tabelas_Lock", objFilialCliente)
    If lErro <> SUCESSO Then gError 12630
    
    sNomeReduzido = objFilialCliente.sNome
    sNomeReduzido1 = objFilialCliente.sNome

    lErro = AD_SQL_SUCESSO
    
    bAchou = False
    
    Do While lErro = AD_SQL_SUCESSO

        'Procura por um outro Nome já cadastrado
        lErro = Comando_ExecutarPos(alComando(0), "SELECT CodCliente FROM FiliaisClientes WHERE CodClienteLoja = ? AND CodFilialLoja <> ? AND Nome = ? ", 0, lCodigo, objFilialCliente.lCodClienteLoja, objFilialCliente.iCodFilialLoja, sNomeReduzido)
        
        If lErro <> AD_SQL_SUCESSO Then gError 112766
    
        'Tenta ler
        lErro = Comando_BuscarPrimeiro(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112767
    
        'se já existe um cliente com este nome reduzido ==> tenta acoplar a filial
        If lErro = AD_SQL_SUCESSO Then
            
            bAchou = True
            
            If Len(sNomeReduzido) + Len(CStr(giFilialEmpresa)) + 1 > STRING_FILIAL_CLIENTE_NOME Then
            
                'guarda o nome do cliente antes de colocar os sufixos
                sNomeReduzido2 = sNomeReduzido1
                
                'se o tamanho do nome que restar for menor que 1 caracter ==> erro
                If Len(sNomeReduzido1) - (Len(sNomeReduzido) + Len(CStr(giFilialEmpresa)) + 1 - STRING_FILIAL_CLIENTE_NOME) < 1 Then gError 118738
                
                'guarda o nome do cliente sem os sufixos
                sNomeReduzido1 = left(sNomeReduzido1, Len(sNomeReduzido1) - (Len(sNomeReduzido) + Len(CStr(giFilialEmpresa)) + 1 - STRING_FILIAL_CLIENTE_NOME))
                
                'guarda o nome com os sufixos
                sNomeReduzido = sNomeReduzido1 & right(sNomeReduzido, Len(sNomeReduzido) - Len(sNomeReduzido2))
                
            End If
        
            sNomeReduzido = sNomeReduzido & "_" & CStr(giFilialEmpresa)
        
        End If
        
    Loop
    
    If bAchou Then
        'Atualiza a tabela de Clientes
        lErro = Comando_ExecutarPos(alComando(1), "UPDATE FiliaisClientes SET Nome = ?", alComando(0), sNomeReduzido)
        If lErro <> AD_SQL_SUCESSO Then gError 112768
    End If
    
    'Atualiza os dados para futura gravacao de histórico
    With objClienteHistorico
    
        .dtDataAtualizacao = Date
        .iFilialCliente = objFilialCliente.iCodFilial
        .lCodigo = objFilialCliente.lCodCliente
        .sBairro = colEndereco.Item(1).sBairro
        .sCEP = colEndereco.Item(1).sCEP
        .sCgc = objFilialCliente.sCgc
        .sCidade = colEndereco.Item(1).sCidade
        .sEndereco = colEndereco.Item(1).sEndereco
        .sInscricaoEstadual = objFilialCliente.sInscricaoEstadual
        .sInscricaoMunicipal = objFilialCliente.sInscricaoMunicipal
        .sUF = colEndereco.Item(1).sSiglaEstado
        
        objCliente.lCodigoLoja = objFilialCliente.lCodClienteLoja
        objCliente.lCodigo = objFilialCliente.lCodCliente
        objCliente.iFilialEmpresaLoja = giFilialEmpresa
        
        lErro = CF("Cliente_Le_Loja", objCliente)
        If lErro <> SUCESSO And lErro <> 112606 Then gError 97620
        
        'Verifica se Cliente nao esta cadastrado
        If lErro = 112606 Then gError 97621
        
        .sRazaoSocial = objCliente.sRazaoSocial
        
        'Le o nome do Pais com o codigo no obj
        objPais.iCodigo = colEndereco.Item(1).iCodigoPais
        lErro = CF("Paises_Le", objPais)
        If lErro <> SUCESSO And lErro <> 47876 Then gError 97622
    
        'Pais não está cadastrado - --- -> Erro
        If lErro = 47876 Then gError 97623
        
        .sPais = objPais.sNome
        
    End With
    
    'FAZ A GRAVACAO DO HISTORICO
    lErro = CF("ClienteHistorico_Grava", objClienteHistorico)
    If lErro <> SUCESSO Then gError 97624
    
    'Pega os dados da tabela Filiais Clientes
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Endereco FROM FiliaisClientes WHERE CodClienteLoja = ? AND CodFilialLoja = ? AND FilialEmpresaLoja=?", 0, lEndereco1, objFilialCliente.lCodClienteLoja, objFilialCliente.iCodFilialLoja, giFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 112610

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112611
  
    If lErro = AD_SQL_SEM_DADOS Then
        
        'Pega os dados da tabela Filiais Clientes
        lErro = Comando_ExecutarPos(alComando(2), "SELECT Endereco FROM FiliaisClientes WHERE CodCliente = ? AND CodFilial = ?", 0, lEndereco1, objFilialCliente.lCodCliente, objFilialCliente.iCodFilial)
        If lErro <> AD_SQL_SUCESSO Then gError 112612
    
        lErro = Comando_BuscarPrimeiro(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112613
        
        lComando = alComando(2)
    Else
        lComando = alComando(1)
    End If
    
    'Filial Cliente não está cadastrada - GRAVACAO
    If lErro = AD_SQL_SEM_DADOS Then
        
        lErro = CF("Endereco_Automatico", lCodEndereco)
        If lErro <> SUCESSO Then gError 12616
    
        colEndereco.Item(1).lCodigo = lCodEndereco
        lEndereco(1) = lCodEndereco
        
        lErro = CF("Endereco_Grava", colEndereco.Item(1))
        If lErro <> SUCESSO Then gError 12617

        'Insere a FilialCliente na tabela FiliaisClientes
        lErro = Comando_Executar(alComando(3), "INSERT INTO FiliaisClientes (CodCliente,CodFilial,Nome,CGC,Endereco,RG,CodClienteLoja,CodFilialLoja,FilialEmpresaLoja, Ativo ) VALUES (?,?,?,?,?,?,?,?,?,?)", _
        objFilialCliente.lCodCliente, objFilialCliente.iCodFilial, objFilialCliente.sNome, objFilialCliente.sCgc, lEndereco(1), objFilialCliente.sRG, objFilialCliente.lCodClienteLoja, objFilialCliente.iCodFilialLoja, giFilialEmpresa, objFilialCliente.iAtivo)
        If lErro <> AD_SQL_SUCESSO Then gError 12631

        'Insere as categorias da filial do cliente em FilialClientesCategorias
        lErro = CF("FilialCliente_Insere_Categorias", objFilialCliente, colCategoriaItemCopia)
        If lErro <> SUCESSO Then gError 33101

    Else 'FilialCliente já existe - MODIFICAÇÃO

        'Grava os Três Enderecos de Filiais
        colEndereco.Item(1).lCodigo = tFilialCliente.lEndereco

        lErro = CF("Endereco_Grava", colEndereco.Item(1))
        If lErro <> SUCESSO Then gError 12887
        
        'Atualiza a tabela de FiliaisClientes
        lErro = Comando_ExecutarPos(alComando(4), "UPDATE FiliaisClientes SET Nome = ?, CGC = ?, Endereco = ?, RG=?, CodCliente = ?, CodFilial = ?, Ativo = ?", lComando, _
            objFilialCliente.sNome, objFilialCliente.sCgc, tFilialCliente.lEndereco, objFilialCliente.sRG, objFilialCliente.lCodCliente, objFilialCliente.iCodFilial, objFilialCliente.iAtivo)
        If lErro <> AD_SQL_SUCESSO Then gError 12632

'        'Atualiza as categorias da filial do cliente
'        lErro = CF("FilialCliente_Atualiza_Categorias", objFilialCliente, colCategoriaItemCopia)
'        If lErro <> SUCESSO Then gError 33102

    End If
    
    'se ativo uma filial--> ativo o cliente desta filial
    If objFilialCliente.iAtivo = CLIENTE_ATIVO Then
        'Seleciona o Clientes no BD q está desativado e ativa
        lCodigoCliente = objFilialCliente.lCodClienteLoja
        lErro = Comando_ExecutarPos(alComando(5), "SELECT Ativo FROM Clientes WHERE CodigoLoja = ? AND Ativo <> ?", 0, iAtivo, objFilialCliente.lCodClienteLoja, CLIENTE_ATIVO)
        If lErro <> AD_SQL_SUCESSO Then gError 112756

        lErro = Comando_BuscarPrimeiro(alComando(5))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112757
        
        If lErro = AD_SQL_SUCESSO Then
            'Atualiza a tabela de Clientes
            lErro = Comando_ExecutarPos(alComando(6), "UPDATE Clientes SET Ativo = ?", alComando(5), objFilialCliente.iAtivo)
            If lErro <> AD_SQL_SUCESSO Then gError 112758
        End If
    Else
        'tenta achar outra filial q esteja ativa--> se não achar, desativa o cliente
        lErro = Comando_Executar(alComando(5), "SELECT Ativo FROM FiliaisClientes WHERE CodClienteLoja = ? AND Ativo = ?", iAtivo, objFilialCliente.lCodClienteLoja, CLIENTE_ATIVO)
        If lErro <> AD_SQL_SUCESSO Then gError 112759

        lErro = Comando_BuscarPrimeiro(alComando(5))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112760
        
        If lErro = AD_SQL_SEM_DADOS Then
            'Seleciona o Clientes no BD
            lCodigoCliente = objFilialCliente.lCodClienteLoja
            lErro = Comando_ExecutarPos(alComando(6), "SELECT Ativo FROM Clientes WHERE CodigoLoja = ? AND Ativo = ?", 0, iAtivo, objFilialCliente.lCodClienteLoja, CLIENTE_ATIVO)
            If lErro <> AD_SQL_SUCESSO Then gError 112761
    
            lErro = Comando_BuscarPrimeiro(alComando(6))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112762
            
            If lErro = AD_SQL_SUCESSO Then
                'Atualiza a tabela de Clientes
                lErro = Comando_ExecutarPos(alComando(7), "UPDATE Clientes SET Ativo = ?", alComando(6), objFilialCliente.iAtivo)
                If lErro <> AD_SQL_SUCESSO Then gError 112763
            End If
        End If
    End If
    
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next

    FiliaisClientesLoja_Grava_EmTrans = SUCESSO

    Exit Function

Erro_FiliaisClientesLoja_Grava_EmTrans:

    FiliaisClientesLoja_Grava_EmTrans = Err

    Select Case Err

        Case 113772
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)

        Case 12625, 12626, 12628, 12629, 112610, 112611, 112612, 112613, 112759, 112760, 112766, 112767
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIAISCLIENTES", Err)

        Case 12627
            Call Rotina_Erro(vbOKOnly, "ERRO_FILIALCLIENTE_NOME_DUPLICADO", Err, objFilialCliente.sNome)

        Case 12630, 12616, 12617, 12887, 33101, 33102

        Case 12631
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FILIAISCLIENTES", Err)

        Case 12632, 113790, 112768
            Call Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_FILIAISCLIENTES", Err)
            
        Case 97622, 97620, 97624
        
        Case 97623
            Call Rotina_Erro(vbOKOnly, "ERRO_PAIS_NAO_CADASTRADO", gErr, objPais.iCodigo)
            
        Case 97621
            Call Rotina_Erro(vbOKOnly, "ERRO_CLIENTE_NAO_CADASTRADO", gErr, objFilialCliente.lCodCliente)
        
        Case 112756, 112757, 112761, 12762
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CLIENTES", gErr)
                    
        Case 112758, 112763
            Call Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_CLIENTE", gErr, lCodigoCliente)
            
        Case 118738
            Call Rotina_Erro(vbOKOnly, "ERRO_NOMEREDUZIDO_INVALIDO", gErr)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error, 151076)

    End Select

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function ClienteLoja_Grava_EmTrans(ByVal objCliente As ClassCliente, ByVal colEndereco As Collection) As Long
'Grava o Cliente passado como parâmetro

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(0 To 10) As Long
Dim lCodigo As Long
Dim lCodEndereco As Long
Dim tCliente As typeCliente
Dim tFilialCliente As typeFilialCliente
Dim colCategoriaItemCopia As New Collection
Dim objFilialCliCategoria As ClassFilialCliCategoria
Dim objFilialCliente As New ClassFilialCliente
Dim objClienteHistorico As New ClassClienteHistorico
Dim objPais As New ClassPais
Dim objEndereco As New ClassEndereco
Dim objLog As New ClassLog
Dim lCodigoLoja As Long
Dim lCodigoCliente As Long
Dim sFilial As String
Dim iInt As Integer
Dim sNomeReduzido As String
Dim sNomeReduzido2 As String
Dim sNomeReduzido1 As String
Dim bAchou As Boolean

On Error GoTo Erro_ClienteLoja_Grava_EmTrans

    'Abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 113772
    Next
    
    'Inicializa os atributos STRING dos types Cliente e FilialCliente
    tCliente.sRazaoSocial = String(STRING_CLIENTE_RAZAO_SOCIAL, 0)
    tCliente.sNomeReduzido = String(STRING_CLIENTE_NOME_REDUZIDO, 0)
    tCliente.sObservacao = String(STRING_CLIENTE_OBSERVACAO, 0)
    tFilialCliente.sNome = String(STRING_FILIAL_CLIENTE_NOME, 0)
    tFilialCliente.sCgc = String(STRING_CGC, 0)
    tFilialCliente.sRG = String(STRING_RG, 0)
    tFilialCliente.sInscricaoEstadual = String(STRING_INSCR_EST, 0)
    tFilialCliente.sInscricaoMunicipal = String(STRING_INSCR_MUN, 0)
    tFilialCliente.sInscricaoSuframa = String(STRING_INSCR_SUF, 0)
    tFilialCliente.sObservacao = String(STRING_CLIENTE_OBSERVACAO, 0)
    tFilialCliente.sContaContabil = String(STRING_CONTA, 0)
    
    lCodigoCliente = objCliente.lCodigoLoja
    
'    'Cria uma cópia "de trabalho" da coleção passada como parâmetro
'    For Each objFilialCliCategoria In objCliente.colCategoriaItem
'        colCategoriaItemCopia.Add objFilialCliCategoria
'    Next
    
    sNomeReduzido = objCliente.sNomeReduzido
    sNomeReduzido1 = objCliente.sNomeReduzido

    lErro = AD_SQL_SUCESSO
    
    bAchou = False
    
    Do While lErro = AD_SQL_SUCESSO

        'Procura por um outro Cliente com o mesmo Nome Reduzido e codigo diferente
        lErro = Comando_ExecutarPos(alComando(0), "SELECT CodigoLoja FROM Clientes WHERE Codigo <> ? AND NomeReduzido = ? ", 0, lCodigoLoja, objCliente.lCodigo, sNomeReduzido)
        If lErro <> AD_SQL_SUCESSO Then gError 113771
        
        'Tenta ler o código deste Cliente
        lErro = Comando_BuscarPrimeiro(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 113774
            
        'se já existe um cliente com este nome reduzido ==> tenta acoplar a filial
        If lErro = AD_SQL_SUCESSO Then
                        
            bAchou = True
            
            If Len(sNomeReduzido) + Len(CStr(giFilialEmpresa)) + 1 > STRING_CLIENTE_NOME_REDUZIDO Then
            
                'guarda o nome do cliente antes de colocar os sufixos
                sNomeReduzido2 = sNomeReduzido1
                                
                'se o tamanho do nome que restar for menor que 1 caracter ==> erro
                If Len(sNomeReduzido1) - (Len(CStr(giFilialEmpresa)) + 1) < 1 Then gError 118700
                
                'guarda o nome do cliente sem os sufixos
                sNomeReduzido1 = left(sNomeReduzido1, Len(sNomeReduzido1) - (Len(CStr(giFilialEmpresa)) + 1))
                
                'guarda o nome com os sufixos
                sNomeReduzido = sNomeReduzido1 & right(sNomeReduzido, Len(sNomeReduzido) - Len(sNomeReduzido2))
                
            End If
        
            sNomeReduzido = sNomeReduzido & "_" & CStr(giFilialEmpresa)
        
        End If
        
    Loop
    
    objCliente.sNomeReduzido = sNomeReduzido
    
'    'Atualiza os dados para futura gravacao de histórico
'    With objClienteHistorico
'
'        .dtDataAtualizacao = Date
'        .iFilialCliente = FILIAL_MATRIZ
'        .lCodigo = objCliente.lCodigoLoja
'        .sCgc = objCliente.sCgc
'        .sInscricaoEstadual = objCliente.sInscricaoEstadual
'        .sInscricaoMunicipal = objCliente.sInscricaoMunicipal
'        .sRazaoSocial = objCliente.sRazaoSocial
'        .sEndereco = colEndereco.Item(1).sEndereco
'        .sBairro = colEndereco.Item(1).sBairro
'        .sCEP = colEndereco.Item(1).sCEP
'        .sCidade = colEndereco.Item(1).sCidade
'        .sUF = colEndereco.Item(1).sSiglaEstado
'
'        'Le o nome do Pais com o codigo no obj
'        objPais.iCodigo = colEndereco.Item(1).iCodigoPais
'        lErro = CF("Paises_Le", objPais)
'        If lErro <> SUCESSO And lErro <> 47876 Then gError 113776
'
'        'Pais não está cadastrado - --- -> Erro
'        If lErro = 47876 Then gError 113777
'
'        .sPais = objPais.sNome
'
'    End With
    
'    'FAZ A GRAVACAO DO HISTORICO
'    lErro = CF("ClienteHistorico_Grava", objClienteHistorico)
'    If lErro <> SUCESSO Then gError 113778
    
    'Faz "locks" nas tabelas dos objetos relacionados ao Cliente
    lErro = CF("Clientes_Le_Tabelas_Lock", objCliente)
    If lErro <> SUCESSO Then gError 113779
    
    'faço o select com codigoloja e FilialEmpresaloja
    lErro = Comando_ExecutarPos(alComando(6), "SELECT Ativo FROM Clientes WHERE CodigoLoja = ? AND FilialEmpresaLoja=?", 0, iAtivo, objCliente.lCodigoLoja, giFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 112602
    
    lErro = Comando_BuscarPrimeiro(alComando(6))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112603
    
    'Cliente não está cadastrado - GRAVACAO
    If lErro = AD_SQL_SEM_DADOS Then
        
        lErro = CF("Endereco_Automatico", lCodEndereco)
        If lErro <> SUCESSO Then gError 113782
    
        colEndereco.Item(1).lCodigo = lCodEndereco
        
        lErro = CF("Endereco_Grava", colEndereco.Item(1))
        If lErro <> SUCESSO Then gError 113783
     
        'Preenche ponteiros de endereço de objCliente
        objCliente.lEndereco = colEndereco.Item(1).lCodigo
        
        lErro = Comando_Executar(alComando(3), "INSERT INTO Clientes (Codigo,CodigoLoja,RazaoSocial,NomeReduzido,Tipo, FilialEmpresaLoja, Ativo) VALUES (?,?,?,?,?,?,?)", _
        objCliente.lCodigo, objCliente.lCodigoLoja, objCliente.sRazaoSocial, objCliente.sNomeReduzido, objCliente.iTipo, giFilialEmpresa, objCliente.iAtivo)
        If lErro <> AD_SQL_SUCESSO Then gError 113784
        
        'Insere o Cliente na tabela FiliaisClientes
        lErro = Comando_Executar(alComando(4), "INSERT INTO FiliaisClientes (CodCliente, CodFilial, Nome, CGC, Endereco, RG,CodFilialLoja, CodClienteLoja,FilialEmpresaLoja, Ativo) VALUES (?,?,?,?,?,?,?,?,?,?)", _
                                     objCliente.lCodigo, FILIAL_MATRIZ, MATRIZ, objCliente.sCgc, objCliente.lEndereco, objCliente.sRG, FILIAL_MATRIZ, objCliente.lCodigoLoja, giFilialEmpresa, objCliente.iAtivoFilial)
        
        If lErro <> AD_SQL_SUCESSO Then gError 113785

'        objFilialCliente.lCodCliente = objCliente.lCodigoLoja
'
'        objFilialCliente.iCodFilial = FILIAL_MATRIZ
'
'        lErro = CF("FilialCliente_Insere_Categorias", objFilialCliente, colCategoriaItemCopia)
'        If lErro <> SUCESSO Then gError 113786

    Else 'Cliente já existe - MODIFICACAO
        
        'se o campo ativo do BD vai ser desativado -->desativa todas as filiais
        If iAtivo <> objCliente.iAtivo And objCliente.iAtivo = DESMARCADO Then
            'Seleciona as filiais Clientes no BD por codigo(menos a matriz)
            lErro = Comando_ExecutarPos(alComando(9), "SELECT Ativo FROM FiliaisClientes WHERE CodClienteLoja = ? AND CodFilialLoja <> ? AND Ativo = ?", 0, iAtivo, objCliente.lCodigoLoja, FILIAL_MATRIZ, CLIENTE_ATIVO)
            If lErro <> AD_SQL_SUCESSO Then gError 112752
    
            lErro = Comando_BuscarPrimeiro(alComando(9))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112753
            
            Do While lErro = AD_SQL_SUCESSO
                'Atualiza a tabela de FiliaisClientes como desativado
                lErro = Comando_ExecutarPos(alComando(10), "UPDATE FiliaisClientes SET Ativo = ?", alComando(9), DESMARCADO)
                If lErro <> AD_SQL_SUCESSO Then gError 112754
                                
                lErro = Comando_BuscarProximo(alComando(9))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112755
            Loop
        End If
        
        'Seleciona a tabela de Filiais Clientes (para modificar a Matriz e pegar os Codigos de Enderecos em tFilial.lEndereco)
        lErro = Comando_ExecutarPos(alComando(5), "SELECT CGC, Endereco, RG FROM  FiliaisClientes WHERE CodClienteLoja = ? AND CodFilialLoja = ? AND FilialEmpresaLoja = ?", 0, _
        tFilialCliente.sCgc, tFilialCliente.lEndereco, tFilialCliente.sRG, objCliente.lCodigoLoja, FILIAL_MATRIZ, giFilialEmpresa)
        If lErro <> AD_SQL_SUCESSO Then gError 113787

        'Verifica se filial cliente existe
        lErro = Comando_BuscarPrimeiro(alComando(5))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 113788

        colEndereco.Item(1).lCodigo = tFilialCliente.lEndereco
        
        lErro = CF("Endereco_Grava", colEndereco.Item(1))
        If lErro <> SUCESSO Then gError 113789

        'Atualiza a tabela de Clientes
        lErro = Comando_ExecutarPos(alComando(7), "UPDATE Clientes SET Codigo = ?, RazaoSocial = ?, NomeReduzido = ?, Ativo=?", alComando(6), _
            objCliente.lCodigo, objCliente.sRazaoSocial, objCliente.sNomeReduzido, objCliente.iAtivo)
        If lErro <> AD_SQL_SUCESSO Then gError 112611

        'Atualiza a tabela de FiliaisClientes
        lErro = Comando_ExecutarPos(alComando(8), "UPDATE FiliaisClientes SET CGC = ?, Endereco = ?, RG=?, Ativo=?", alComando(5), _
            objCliente.sCgc, tFilialCliente.lEndereco, objCliente.sRG, objCliente.iAtivoFilial)
        If lErro <> AD_SQL_SUCESSO Then gError 113791

'        objFilialCliente.lCodCliente = objCliente.lCodigoLoja
'        objFilialCliente.iCodFilial = FILIAL_MATRIZ
'
'        lErro = CF("FilialCliente_Atualiza_Categorias", objFilialCliente, colCategoriaItemCopia)
'        If lErro <> SUCESSO Then gError 113792

    End If
        
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        lErro = Comando_Fechar(alComando(iIndice))
    Next

    ClienteLoja_Grava_EmTrans = SUCESSO

    Exit Function

Erro_ClienteLoja_Grava_EmTrans:

    ClienteLoja_Grava_EmTrans = gErr

    Select Case gErr

        Case 113772
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 113771, 113773, 113774, 113780, 113781, 113794, 112602, 112603, 112604, 112605
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CLIENTES", gErr)

        Case 113779, 113782, 113783, 113789, 113786, 113792, 113793

        Case 113784
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CLIENTES", gErr, lCodigoCliente)
        
        Case 113785
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FILIAISCLIENTES", gErr)

        Case 113790, 112611
            Call Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_CLIENTE", gErr, lCodigoCliente)

        Case 113787
            Call Rotina_Erro(vbOKOnly, "ERRO_CLIENTE_SEM_FILIAL", gErr, lCodigoCliente)

        Case 113788, 112752, 112753, 112755
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIAISCLIENTES", gErr)

        Case 113791, 112754
            Call Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_FILIAISCLIENTES", gErr)
            
        Case 113776, 113778
        
        Case 113777
            Call Rotina_Erro(vbOKOnly, "ERRO_PAIS_NAO_CADASTRADO", gErr, objPais.iCodigo)
                    
        Case 118700
            Call Rotina_Erro(vbOKOnly, "ERRO_NOMEREDUZIDO_INVALIDO", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151077)

    End Select

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

'**************************************
'   INICIO CODIGO TRANSF. P O CAIXA CENTRAL DE ARQUIVO DOS CAIXAS
'****************************************

Function Rotina_Carga_ECF_Caixa_Central_Old(sArquivo As String, ByVal objBarraProgresso As Object, Optional ByVal iBatch As Integer = 0) As Long
'Faz a carga dos dados dos caixas. Le o arquivo passado como parametro e carrega o bd do caixa central.

'Pendencias: Colocar a funcao num batch e colocar chamada

Dim sNomeArq As String
Dim sRegistro As String
Dim iRegistro As Integer
Dim colRegistro As New Collection
Dim colRegistroTemp As New Collection
Dim bAchouAbert As Boolean
Dim sSeqAbert As String
Dim sSeqFech As String
Dim bAchou As Boolean
Dim sTipo As String
Dim lTransacao As Long
Dim iPos As Integer
Dim iIndice As Integer
Dim lErro As Long
Dim dtDataInicio As Date
Dim dHoraInicio As Double
Dim lComando As Long
Dim iCaixa As Integer
Dim lSeq As Long
Dim iUnder1 As Integer
Dim iUnder2 As Integer
Dim iUnder3 As Integer
Dim iIndiceReg As Integer
Dim iPonto As Integer
Dim lRegistroAtual As Long
Dim lNumRegistros As Long
Dim iFilialEmpresa As Integer
Dim lVersao As Long

On Error GoTo Erro_Rotina_Carga_ECF_Caixa_Central_Old
    
    'pesquisa a existencia do arquivo
    sNomeArq = Dir(sArquivo)

    'se o arquivo não foi encontrado ==> erro
    If Len(sNomeArq) = 0 Then gError 110001
    
    dtDataInicio = Date
    dHoraInicio = CDbl(Time)
    
    Open sArquivo For Input Lock Write As #1

    'Abre a Transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 110012
        
    bAchouAbert = False
    bAchou = False
    iIndiceReg = 1
    
    If LOF(1) = 0 Then gError 133842
    
    lNumRegistros = LOF(1) + 1
    
    objBarraProgresso.Value = 0
    
    Do While Not EOF(1)

        Line Input #1, sRegistro
        
        If EOF(1) Then Exit Do
        
        lRegistroAtual = Seek(1)
        
        objBarraProgresso.Value = CInt((lRegistroAtual / lNumRegistros) * 100)
        
        If sRegistro <> "" Then
        
            If iIndiceReg = 1 Then
                If sRegistro <> sNomeArq Then gError 112727
                
            ElseIf iIndiceReg = 2 Then
            
                lVersao = StrParaLong(sRegistro)
                
                If lVersao <> 301 Then gError 133823
                
            Else
            
                'Procura o Primeiro Control para saber o tipo do registro
                iPos = InStr(1, sRegistro, Chr(vbKeyControl))
                'Recolhe o tipo
                sTipo = Mid(sRegistro, 1, iPos - 1)
                
                Select Case sTipo
                
                    'verifica se é de abertura
                    Case TIPOREGISTROECF_ABRESEQ
                        'se encontrei um sequencial aberto antes do encerramento do anterior-->desprezo o anterior
                        If bAchouAbert Then Set colRegistroTemp = New Collection
                        'Recolhe o sequencial
                        sSeqAbert = Mid(sRegistro, iPos + 1, Len(sRegistro) - iPos)
                        bAchouAbert = True
                                        
                    'verifica se é de fechamento
                    Case TIPOREGISTROECF_ENCERRASEQ
                        'Recolhe o sequencial
                        sSeqFech = Mid(sRegistro, iPos + 1, Len(sRegistro) - iPos)
                        If sSeqAbert = sSeqFech Then bAchou = True
                                        
                    Case Else
                        colRegistroTemp.Add sRegistro
                                        
                End Select
                
                If bAchou Then
                    For iIndice = 1 To colRegistroTemp.Count
                        
                        sRegistro = colRegistroTemp.Item(iIndice)
                        
                        iRegistro = iRegistro + 1
                        
                        colRegistro.Add sRegistro
        
                        If Mid(sRegistro, Len(sRegistro), 1) = Chr(vbKeyEnd) Then
                
                            lErro = CF("Registro_ECF_CC", colRegistro, sArquivo, iRegistro)
                            If lErro <> SUCESSO Then gError 110002
                
                            Set colRegistro = New Collection
                            iRegistro = 0
                        End If
                    Next
                    Set colRegistroTemp = New Collection
                    bAchouAbert = False
                    bAchou = False
                End If
            End If
        End If
        iIndiceReg = iIndiceReg + 1
    
    Loop
    
    If LOF(1) <> StrParaLong(sRegistro) Then gError 133843
    
    'inclui o registro de controle
    
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 112728
    
    iUnder1 = InStr(1, sNomeArq, "_")
    
    iUnder2 = InStr(iUnder1 + 1, sNomeArq, "_")
    
    iFilialEmpresa = StrParaInt(Mid(sNomeArq, iUnder1 + 1, iUnder2 - (iUnder1 + 1)))
    
    iUnder3 = InStr(iUnder2 + 1, sNomeArq, "_")
    
    iCaixa = StrParaInt(Mid(sNomeArq, iUnder2 + 1, iUnder3 - (iUnder2 + 1)))
    
    iPonto = InStr(iUnder3 + 1, sNomeArq, ".")
        
    lSeq = StrParaLong(Mid(sNomeArq, iUnder3 + 1, iPonto - (iUnder3 + 1)))
    
    'insere novo registro na tabela de Controle
    lErro = Comando_Executar(lComando, "INSERT INTO ControleLogCaixaCC(FilialEmpresa, Caixa, Sequencial, DataInicio, HoraInicio, DataFim, HoraFim) VALUES (?,?,?,?,?,?,?)", iFilialEmpresa, iCaixa, lSeq, dtDataInicio, dHoraInicio, Date, CDbl(Time))
    If lErro <> AD_SQL_SUCESSO Then gError 112729

    Call Comando_Fechar(lComando)
    
    'confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 110013

    'Fecha o Arquivo
    Close #1

    'avisa que a gravacao foi  concluida
    If iBatch <> TRANSMISSAO_ARQ_BATCH Then Call Rotina_Aviso(vbOKOnly, "AVISO_LEITURA_CONCLUIDA_COM_SUCESSO")

    objBarraProgresso.Value = 0

    Rotina_Carga_ECF_Caixa_Central_Old = SUCESSO

    Exit Function

Erro_Rotina_Carga_ECF_Caixa_Central_Old:

    Rotina_Carga_ECF_Caixa_Central_Old = gErr
    
    objBarraProgresso.Value = 0
    
    Close #1
    
    Select Case gErr

        Case 110001
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ARQUIVO_INEXISTENTE", gErr, sArquivo)

        Case 110002
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_DADOS_CAIXA", gErr, sArquivo)

        Case 110012
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 110013
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case 112727
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ARQ_INVALIDO", gErr)
            
        Case 112728
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 112729
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CONTROLELOGCAIXACC", gErr)
            
        Case 133823
            Call Rotina_Erro(vbOKOnly, "ERRO_VERSAO_ARQUIVO_MAIOR_PROGRAMA", gErr, sArquivo, lVersao, VERSAO_ECF)

        Case 133842
            Call Rotina_Erro(vbOKOnly, "ERRO_ARQUIVO_VAZIO", gErr, sArquivo)

        Case 133843
            Call Rotina_Erro(vbOKOnly, "ERRO_NUMERO_REGISTROS_INCONSISTENTE", gErr, sArquivo, LOF(1))

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151078)

    End Select
    
    'Fecha o Arquivo
    Close #1
    
    Call Comando_Fechar(lComando)
    
    'cancela a transacao
    Call Transacao_Rollback

    Exit Function

End Function

Function Registro_ECF_CC(ByVal colRegistro As Collection, ByVal sArquivo As String, ByVal iRegistro As Integer) As Long
'Descobre o tipo de registro e chama o tratador adequado. sArquivo contem o nome do arquivo em que sRegistro foi lido.
'iRegistro é o numero do registro.

Dim lErro As Long
Dim iPosKeyControl As Integer
Dim iTipoRegistro As Integer
Dim sRegistro As String
Dim iPosKeyEscape As Integer
Dim iPosKeyEnd As Integer
Dim iECF As Integer
Dim lCOO As Long
Dim lORC As Long
Dim iPosKeyLButton As Integer
Dim lNumMovto As Long
Dim sMsg As String
Dim iSeq As Integer
Dim vMsg As Variant
Dim sArq As String
Dim lNumMovto1 As Long
Dim iFilialEmpresa As Integer 'do nome do arquivo

On Error GoTo Erro_Registro_ECF_CC

    lErro = Verifica_Nome_Arquivo2(Dir(sArquivo), iFilialEmpresa)
    If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

    sRegistro = colRegistro.Item(1)
    
    iPosKeyLButton = InStr(sRegistro, Chr(vbKeyLButton))

    If iPosKeyLButton <> 0 Then

        lNumMovto = CLng(left(sRegistro, iPosKeyLButton - 1))

    End If
    
    iPosKeyControl = InStr(sRegistro, Chr(vbKeyControl))

    'se nao encontrar o tipo do registro no arquivo
    If iPosKeyControl = 0 Then gError 110003

    
    iTipoRegistro = CInt(Mid(sRegistro, iPosKeyLButton + 1, iPosKeyControl - (iPosKeyLButton + 1)))

    iRegistro = 1
    
    iSeq = 0

    sArq = Dir(sArquivo)

    For Each vMsg In colRegistro
        
        sMsg = vMsg
        
        iSeq = iSeq + 1
        
                       
        iPosKeyLButton = InStr(sMsg, Chr(vbKeyLButton))

        If iPosKeyLButton <> 0 Then

            lNumMovto1 = CLng(left(sMsg, iPosKeyLButton - 1))

        End If
                       
        lErro = Insere_ImportMovCaixa(lNumMovto1, sArq, sMsg, iSeq, iTipoRegistro)
        If lErro <> SUCESSO And lErro <> 210916 Then gError 210919
    
        'se ja tiver sido inserido esse numero de movimento ==> pula esse registro
        If lErro <> SUCESSO Then Exit For
    
    
    Next

    If lErro = SUCESSO Then


        Select Case iTipoRegistro
    
            Case TIPOREGISTROECF_VENDAS
                lErro = CF("Registro_ECF_Vendas", colRegistro, sArq, iRegistro)
                If lErro <> SUCESSO Then gError 110004
    
            Case TIPOREGISTROECF_MOVIMENTOCAIXA_DINHEIRO
                lErro = CF("Registro_ECF_MovcxDin", colRegistro, sArq, iRegistro)
                If lErro <> SUCESSO Then gError 110041
    
            Case TIPOREGISTROECF_MOVIMENTOCAIXA_CHEQUES
                lErro = CF("Registro_ECF_MovcxChq", colRegistro, sArq, iRegistro)
                If lErro <> SUCESSO Then gError 110042
    
            Case TIPOREGISTROECF_MOVIMENTOCAIXA_BOLETO
                lErro = CF("Registro_ECF_MovcxBol", colRegistro, sArq, iRegistro)
                If lErro <> SUCESSO Then gError 110046
    
            Case TIPOREGISTROECF_MOVIMENTOCAIXA_TICKETS
                lErro = CF("Registro_ECF_MovcxTkt", colRegistro, sArq, iRegistro)
                If lErro <> SUCESSO Then gError 110047
    
            Case TIPOREGISTROECF_MOVIMENTOCAIXA_OUTROS
                lErro = CF("Registro_ECF_MovcxOut", colRegistro, sArq, iRegistro)
                If lErro <> SUCESSO Then gError 112091
    
            Case TIPOREGISTROECF_MOVIMENTOCAIXA
                lErro = CF("Registro_ECF_Movcx", colRegistro, sArq, iRegistro)
                If lErro <> SUCESSO Then gError 112092
                
            Case TIPOREGISTROECF_FECHAMENTOCAIXA
                lErro = CF("Registro_ECF_FechamentoCaixa", colRegistro, sArq, iRegistro)
                If lErro <> SUCESSO Then gError 105671
                
            Case TIPOREGISTROECF_EXCLUSAOCUPOM
            
                iPosKeyEscape = InStr(sRegistro, Chr(vbKeyEscape))
                lCOO = CLng(Mid(sRegistro, iPosKeyControl + 1, iPosKeyEscape - (iPosKeyControl + 1)))
                iPosKeyEnd = InStr(sRegistro, Chr(vbKeyEnd))
                iECF = CInt(Mid(sRegistro, iPosKeyEscape + 1, iPosKeyEnd - (iPosKeyEscape + 1)))
                lORC = 0
                lErro = CF("Venda_Excluir_CC", lCOO, lORC, iECF, iFilialEmpresa)
                If lErro <> SUCESSO Then gError 112428
                
            Case TIPOREGISTROECF_EXCLUSAOORCAMENTO
                iPosKeyEscape = InStr(sRegistro, Chr(vbKeyEscape))
                lORC = CLng(Mid(sRegistro, iPosKeyControl + 1, iPosKeyEscape - (iPosKeyControl + 1)))
                iPosKeyEnd = InStr(sRegistro, Chr(vbKeyEnd))
                iECF = CInt(Mid(sRegistro, iPosKeyEscape + 1, iPosKeyEnd - (iPosKeyEscape + 1)))
                lCOO = 0
                lErro = CF("Venda_Excluir_CC", lCOO, lORC, iECF, iFilialEmpresa)
                If lErro <> SUCESSO Then gError 112429
                    
            Case TIPOREGISTROECF_TRANSFCAIXA_INCLUSAO
                lErro = CF("Registro_ECF_TransfCaixa", colRegistro, sArq, iRegistro)
                If lErro <> SUCESSO Then gError 105509
                    
            Case TIPOREGISTROECF_TRANSFCAIXA_EXCLUSAO
                lErro = CF("Registro_ECF_TransfCaixa_Exclusao", colRegistro, sArq, iRegistro)
                If lErro <> SUCESSO Then gError 105510
                    
            Case TIPOREGISTROECF_ARQUIVO
                'nao faz nada
                
            Case TIPOREGISTROECF_PAFECF_SINTEGRA
                lErro = CF("Registro_ECF_Sintegra", colRegistro, sArq, iRegistro)
                If lErro <> SUCESSO Then gError 210119
            
            Case TIPOREGISTROECF_PAFECF_SPEDFISCAL
                lErro = CF("Registro_ECF_SpedFiscal", colRegistro, sArq, iRegistro)
                If lErro <> SUCESSO Then gError 210126
            
            Case Else
                gError 110005
    
        End Select

    End If

    Registro_ECF_CC = SUCESSO

    Exit Function

Erro_Registro_ECF_CC:

    Registro_ECF_CC = gErr

    Call Rotina_Erro(vbOKOnly, "ERRO_REGISTRO_CCC", gErr, lNumMovto, sArquivo)

    Select Case gErr

        Case 105509, 105510, 105971, 110004, 110041, 110042, 110046, 110047, 112091, 112092, 112428, 112429, 210119, 210126, ERRO_SEM_MENSAGEM

        Case 110003
            Call Rotina_Erro(vbOKOnly, "ERRO_AUSENCIA_TIPO_REGISTRO", gErr, iRegistro, sArquivo)

        Case 110005
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPOREGISTRO_NAO_TRATAVEL", gErr, iTipoRegistro, iRegistro, sArquivo)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151079)

    End Select

    Exit Function

End Function

Function Registro_ECF_Vendas(ByVal colRegistro As Collection, ByVal sArquivo As String, ByVal iRegistro As Integer) As Long
'Trata o registro de vendas e coloca os dados no bd do caixa central. sArquivo contem o nome do arquivo em que sRegistro foi lido.
'iRegistro é o numero do registro.

Dim iPosAtual As Integer
Dim iPosFimAtual As Integer
Dim objVenda As New ClassVenda
Dim sRegistro As String
Dim iRegistroCol As Integer
Dim lErro As Long
Dim objMvcx As New ClassMovimentoCaixa
Dim bAchou As Boolean
Dim iPosKeyLButton As Integer
Dim lNumMovto As Long

On Error GoTo Erro_Registro_ECF_Vendas

    sRegistro = colRegistro(1)

    iPosKeyLButton = InStr(sRegistro, Chr(vbKeyLButton))

    If iPosKeyLButton <> 0 Then

        lNumMovto = CLng(left(sRegistro, iPosKeyLButton - 1))

    End If


    iPosAtual = InStr(sRegistro, Chr(vbKeyControl))
    iPosAtual = iPosAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeySeparator))

    objVenda.iTipo = StrParaInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    objVenda.objCupomFiscal.iTipo = objVenda.iTipo
    
    iRegistroCol = 1
   
    'guarda as infos de carne se houverem
    lErro = CF("Vendas_Carne", iPosAtual, iPosFimAtual, colRegistro, iRegistroCol, objVenda.objCarne)
    If lErro <> SUCESSO Then gError 110006

    objVenda.objCupomFiscal.iTipo = objVenda.iTipo

    'guarda as infos de cupom
    lErro = CF("Vendas_Cupom", iPosAtual, iPosFimAtual, colRegistro, iRegistroCol, objVenda.objCupomFiscal)
    If lErro <> SUCESSO Then gError 110007

    'guarda as infos de movimento de caixa
    lErro = CF("Vendas_Movcx", iPosAtual, iPosFimAtual, colRegistro, iRegistroCol, objVenda.colMovimentosCaixa)
    If lErro <> SUCESSO Then gError 110008
    
    'guarda as infos de cheque se houverem
    lErro = CF("Vendas_Cheque", iPosAtual, iPosFimAtual, colRegistro, iRegistroCol, objVenda.colCheques)
    If lErro <> SUCESSO Then gError 110009

    'guarda as infos de troca se houverem
    lErro = CF("Vendas_Troca", iPosAtual, iPosFimAtual, colRegistro, iRegistroCol, objVenda.colTroca)
    If lErro <> SUCESSO Then gError 110010
    
    bAchou = False
    
'    For Each objMvcx In objVenda.colMovimentosCaixa
'        lErro = Verifica_Existencia_Sequencial(objMvcx.lSequencial, objMvcx.iCaixa, objMvcx.iFilialEmpresa)
'        If lErro <> SUCESSO And lErro <> 112627 Then gError 112634
'
'        If lErro = 112627 Then
'            bAchou = True
'            Exit For
'        End If
'    Next
        
    If Not (bAchou) Then
        lErro = CF("Venda_Gravar_CC", objVenda, sArquivo, lNumMovto)
        If lErro <> SUCESSO Then gError 110011
    End If
    
    Registro_ECF_Vendas = SUCESSO

    Exit Function

Erro_Registro_ECF_Vendas:

    Registro_ECF_Vendas = gErr

    Select Case gErr

        Case 110006, 110007, 110008, 110009, 110010, 110011, 112634

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151080)

    End Select

    Exit Function

End Function

Function Venda_Gravar_CC(ByVal objVenda As ClassVenda, ByVal sArquivo As String, ByVal lNumMovto As Long) As Long
'grava os dados da venda no caixa central
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lErro As Long
Dim lTransacao As Long
Dim colRegistro As New Collection
Dim objLog As New ClassLog
Dim objMovCx As ClassMovimentoCaixa
Dim objMovEstoque As New ClassMovEstoque
Dim lCodigo As Long
Dim alComando(1 To 4) As Long
Dim alComando1(1 To NUM_MAX_LCOMANDO_MOVESTOQUE) As Long
Dim iIndice As Integer
Dim objItens As ClassItemCupomFiscal
Dim lNumIntNF As Long

On Error GoTo Erro_Venda_Gravar_CC

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 126167
    Next

    For iIndice = LBound(alComando1) To UBound(alComando1)
        alComando1(iIndice) = Comando_Abrir()
        If alComando1(iIndice) = 0 Then gError 126168
    Next
    
    'se for uma nfe criada no ECF
    If Len(objVenda.objCupomFiscal.sNFeArqXml) > 0 Then
    
        'grava na retaguarda a nfe gerada no paf obtendo os dados do xml
        lErro = CF("NFe_PAF_ImportarXml", objVenda, lNumIntNF)
        If lErro <> SUCESSO Then gError 214159
    
    End If

    'gravar os dados do cupom
    lErro = CF("CupomFiscal_Gravar_Venda", objVenda.objCupomFiscal, objLog, objMovEstoque, sArquivo, lNumMovto)
    If lErro <> SUCESSO Then gError 110015

    'gerar os NumMovto dos movimentos de caixa que serao utilizados nos cheques e trocas
    lErro = CF("MovimentosCaixa_Gera_NumMovto", objVenda.colMovimentosCaixa)
    If lErro <> SUCESSO Then gError 110016




    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then Call CF("Mover_Separator_Log", objLog)

    'gravar os dados de carne caso existam
    lErro = CF("Carne_Gravar_Venda", objVenda.objCarne, objVenda.objCupomFiscal.lNumIntDoc, objLog)
    If lErro <> SUCESSO Then gError 110014

    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then Call CF("Mover_Separator_Log", objLog)

    'gravar os dados de cheque caso existam
    lErro = CF("Cheque_Gravar_Venda", objVenda.colCheques, objVenda.colMovimentosCaixa, objLog, sArquivo, lNumMovto)
    If lErro <> SUCESSO Then gError 110017

    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then Call CF("Mover_Separator_Log", objLog)

    'gravar os dados de troca caso existam
    lErro = CF("Troca_Gravar_Venda", objVenda.colTroca, objVenda.colMovimentosCaixa, objLog, objVenda.objCupomFiscal, objMovEstoque, sArquivo, lNumMovto)
    If lErro <> SUCESSO Then gError 110018
    
    For Each objMovCx In objVenda.colMovimentosCaixa
        objMovCx.lCupomFiscal = objVenda.objCupomFiscal.lNumIntDoc
    Next
    
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
    
        Call CF("Mover_Separator_Log", objLog)
        
        'preenche o objLog com os dados da venda
        Call CF("Mover_Dados_Movcx_Log", objVenda.colMovimentosCaixa, objLog)
    
        objLog.iOperacao = INCLUSAO_CUPOM_FISCAL
    
        'grava o log
        lErro = CF("Log_Grava", objLog, objLog.colRegistro)
        If lErro <> SUCESSO Then gError 112093
        
    End If
    
    'gravar os movimentos de caixa
    lErro = CF("MovimentosCaixa_Gravar_Venda", objVenda.colMovimentosCaixa, objVenda.colCheques, objVenda.colTroca, objLog, objVenda.objCupomFiscal, sArquivo, lNumMovto)
    If lErro <> SUCESSO Then gError 112094
    
    'se nao for uma nfe criada no ECF. No caso das NFe oriundas de ECF a movimentacao do estoque se fará pelo cadastro da nota fiscal geral a partir do xml (codigo mais acima nesta rotina).
    If Len(objVenda.objCupomFiscal.sNFeArqXml) = 0 Then
    
    
        If objMovEstoque.colItens.Count > 0 Then
            
            'Obtém o Código do Movimento
            lErro = CF("MovEstoque_Automatico_EmTransacao1", alComando(1), alComando(2), alComando(3), objMovEstoque.iFilialEmpresa, lCodigo)
            If lErro <> SUCESSO Then gError 118195
            
            objMovEstoque.lCodigo = lCodigo
            
            lErro = CF("EstoqueInicial_Gera_Zerado", objMovEstoque)
            If lErro <> SUCESSO Then gError 118196
            
            'Grava os Movimentos de Estoque relacionados ao Cupom Fiscal
            lErro = CF("MovEstoque_Grava1", alComando1(), objMovEstoque)
            If lErro <> SUCESSO Then gError 118196
        
            For Each objItens In objVenda.objCupomFiscal.colItens
            
                'se o item tiver movimento de estoque associado, descobre o numintdoc do mesmo e coloca em objItens
                If objItens.lNumIntMovEst <> 0 Then
                    
                    objItens.lNumIntMovEst = objMovEstoque.colItens(objItens.lNumIntMovEst).lNumIntDoc
                
                    'insere novo registro na tabela de ItensCupomFiscal
                    lErro = Comando_Executar(alComando(4), "UPDATE ItensCupomFiscal SET NumIntMovEst = ? WHERE FilialEmpresa = ? AND NumIntDoc = ?", objItens.lNumIntMovEst, objVenda.objCupomFiscal.iFilialEmpresa, objItens.lNumIntDoc)
                    If lErro <> AD_SQL_SUCESSO Then gError 204645
    
                End If
    
            Next
        
        End If


    End If

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    For iIndice = LBound(alComando1) To UBound(alComando1)
        Call Comando_Fechar(alComando1(iIndice))
    Next

    Venda_Gravar_CC = SUCESSO

    Exit Function

Erro_Venda_Gravar_CC:

    Venda_Gravar_CC = gErr

    Select Case gErr

        Case 110014, 110015, 110016, 110017, 110018, 112093, 112094, 118196

        Case 126167, 126168
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 204645
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERCAO_ITENSCUPOMFISCAL", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151081)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    For iIndice = LBound(alComando1) To UBound(alComando1)
        Call Comando_Fechar(alComando1(iIndice))
    Next

    Exit Function

End Function

Function CupomFiscal_Gravar_Venda(ByVal objCupomFiscal As ClassCupomFiscal, ByVal objLog As ClassLog, ByVal objMovEstoque As ClassMovEstoque, ByVal sArquivo As String, ByVal lNumMovto As Long) As Long
'gravar os dados de cupom fiscal
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lNumAuto As Long
Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer
Dim iFilialCli As Integer
Dim objCliente As New ClassCliente
Dim colComissoes As New Collection

On Error GoTo Erro_CupomFiscal_Gravar_Venda

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 112095
    Next

    'gera um novo número interno de cupom fiscal
    lErro = CF("Config_ObterNumInt", "LojaConfig", "NUM_PROX_CUPOMFISCAL", lNumAuto, 1, objCupomFiscal.iFilialEmpresa)
    If lErro <> SUCESSO Then gError 112096

    objCupomFiscal.lNumIntDoc = lNumAuto

    'insere novo registro na tabela de CupomFiscal
    lErro = Comando_Executar(alComando(1), "INSERT INTO CupomFiscal(FilialEmpresa, NumIntDoc, Status, ECF, DataEmissao, HoraEmissao, Numero, CPFCGC, NumOrcamento, ValorTotal, ValorProdutos, ValorDesconto, ValorAcrescimo, TabelaPreco, NaturezaOp, GerenteCancel, MotivoCancel, Vendedor, Duracao, Tipo, Caixa, COOCupomOrigDAV, TipoECF, MarcaECF, ModeloECF, NumSerieECF, CCF, NumeroDAV, CPFCGC1, Endereco, SequencialECF, SequencialECFOrigDAV, NomeCliente, Arquivo, NumMovtoArq, DAVImpresso, DataReducao, NFeChaveAcesso, NFeArqXML, NumNotaFiscal, Serie, DataEmissaoNF, Destinatario) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
        objCupomFiscal.iFilialEmpresa, objCupomFiscal.lNumIntDoc, objCupomFiscal.iStatus, objCupomFiscal.iECF, objCupomFiscal.dtDataEmissao, objCupomFiscal.dHoraEmissao, objCupomFiscal.lNumero, objCupomFiscal.sCPFCGC, objCupomFiscal.lNumOrcamento, objCupomFiscal.dValorTotal, objCupomFiscal.dValorProdutos, objCupomFiscal.dValorDesconto, objCupomFiscal.dValorAcrescimo, objCupomFiscal.iTabelaPreco, objCupomFiscal.sNaturezaOp, _
        objCupomFiscal.lGerenteCancel, objCupomFiscal.sMotivoCancel, objCupomFiscal.iVendedor, objCupomFiscal.lDuracao, objCupomFiscal.iTipo, objCupomFiscal.iCodCaixa, objCupomFiscal.lCOOCupomOrigDAV, objCupomFiscal.sTipoECF, objCupomFiscal.sMarcaECF, objCupomFiscal.sModeloECF, objCupomFiscal.sNumSerieECF, objCupomFiscal.lCCF, objCupomFiscal.lNumeroDAV, objCupomFiscal.sCPFCGC1, left(objCupomFiscal.sEndereco, 100), objCupomFiscal.iSequencialECF, objCupomFiscal.iSequencialECFOrigDAV, objCupomFiscal.sNomeCliente, sArquivo, lNumMovto, objCupomFiscal.iDAVImpresso, objCupomFiscal.dtDataReducao, right(objCupomFiscal.sNFeChaveAcesso, 44), objCupomFiscal.sNFeArqXml, objCupomFiscal.objNF.lNumNotaFiscal, objCupomFiscal.objNF.sSerie, objCupomFiscal.objNF.dtDataEmissao, objCupomFiscal.objNF.sDestino)
    If lErro <> AD_SQL_SUCESSO Then gError 112097

    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then

        Call Mover_Dados_CupomFiscal_Log(objCupomFiscal, objLog)
        
        
    Else
    
        'se foi especificado um vendedor para esta venda
        If objCupomFiscal.iVendedor <> 0 Then
    
            'se foi especificado um cliente
            If Len(Trim(objCupomFiscal.sCPFCGC)) <> 0 Then
        
                objCliente.sCgc = objCupomFiscal.sCPFCGC
        
                'Faz a Leitura na Tabela de cliente
                lErro = CF("Cliente_Le_CGC", objCliente, iFilialCli)
                If lErro <> SUCESSO And lErro <> 6710 Then gError 126286
                
                'Se não encontrou  - - -> Erro
'                If lErro = 6710 Then gError 126287
    
            End If

        End If

    End If

    lErro = CF("ItensCF_Gravar_Venda", objCupomFiscal, objLog, objCliente, iFilialCli, colComissoes, objMovEstoque)
    If lErro <> SUCESSO Then gError 112098

    'grava as comissoes associadas ao cupom
    lErro = Comissoes_Gravar_Loja(objCupomFiscal, colComissoes)
    If lErro <> SUCESSO Then gError 126289

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    CupomFiscal_Gravar_Venda = SUCESSO

    Exit Function

Erro_CupomFiscal_Gravar_Venda:

    CupomFiscal_Gravar_Venda = gErr

    Select Case gErr

        Case 112095
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 112096, 112098, 126285, 126286, 126289
        
        Case 112097
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CUPOMFISCAL", gErr, objCupomFiscal.iFilialEmpresa, objCupomFiscal.iECF, objCupomFiscal.lNumero)

        Case 126287
            Call Rotina_Erro(vbOKOnly, "ERRO_CLIENTE_NAO_CADASTRADO3", gErr, objCupomFiscal.sCPFCGC)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151082)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function Comissoes_Gravar_Loja(ByVal objCupomFiscal As ClassCupomFiscal, ByVal colComissoes As Collection) As Long
'grava os registros de comissao para o vendedor que fez a venda

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(1 To 3) As Long
Dim objComissoesCF As ClassComissoesCF
Dim lNumIntCom As Long
Dim dValorBase As Double
Dim dValorComissao As Double
Dim dPercentual As Double

On Error GoTo Erro_Comissoes_Gravar_Loja

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 126290
    Next
    
    For Each objComissoesCF In colComissoes
    
        'insere novo registro na tabela de CupomFiscal
        lErro = Comando_Executar(alComando(1), "INSERT INTO ComissoesCupomFiscal(FilialEmpresa, NumIntDoc, CodVendedor, ValorBase, ValorComissao) VALUES (?,?,?,?,?)", objCupomFiscal.iFilialEmpresa, objCupomFiscal.lNumIntDoc, objComissoesCF.iCodVendedor, objComissoesCF.dValorBase, objComissoesCF.dValorComissao)
        If lErro <> AD_SQL_SUCESSO Then gError 126292
    
        'Insere a comissao no BD
        lErro = Comando_ExecutarPos(alComando(2), "SELECT NumIntCom, ValorBase, Valor FROM Comissoes WHERE FilialEmpresa = ? AND TipoTitulo = ? AND CodVendedor =? AND DataGeracao = ? ", 0, lNumIntCom, dValorBase, dValorComissao, objCupomFiscal.iFilialEmpresa, TIPO_COMISSAO_LOJA, objComissoesCF.iCodVendedor, objCupomFiscal.dtDataEmissao)
        If lErro <> AD_SQL_SUCESSO Then gError 126293
        
        lErro = Comando_BuscarPrimeiro(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126294
    
        If lErro = AD_SQL_SUCESSO Then
    
            lErro = Comando_LockExclusive(alComando(2))
            If lErro <> AD_SQL_SUCESSO Then gError 126295
    
            dValorBase = dValorBase + objComissoesCF.dValorBase
            dValorComissao = dValorComissao + objComissoesCF.dValorComissao
            If dValorBase <> 0 Then
                dPercentual = dValorComissao / dValorBase
            Else
                dPercentual = 0
            End If
            
            lErro = Comando_ExecutarPos(alComando(3), "UPDATE Comissoes SET ValorBase = ?, Valor = ?, Percentual = ?", alComando(2), dValorBase, dValorComissao, dPercentual)
            If lErro <> AD_SQL_SUCESSO Then gError 126296
                    
        Else
        
            
            'Gera o próximo número interno para a nova Comissão
            lErro = CF("Comissao_Automatico", lNumIntCom, 1)
            If lErro <> SUCESSO Then gError 126291
    
            'Insere a comissao no BD
            lErro = Comando_Executar(alComando(3), "INSERT INTO Comissoes (NumIntCom, FilialEmpresa, Status, TipoTitulo, NumIntDoc, CodVendedor, DataGeracao, DataBaixa, Percentual, ValorBase, Valor) VALUES (?,?,?,?,?,?,?,?,?,?,?)", lNumIntCom, objCupomFiscal.iFilialEmpresa, STATUS_LIBERADO, TIPO_COMISSAO_LOJA, 0, objComissoesCF.iCodVendedor, objCupomFiscal.dtDataEmissao, DATA_NULA, IIf(objComissoesCF.dValorBase <> 0, objComissoesCF.dValorComissao / objComissoesCF.dValorBase, 0), objComissoesCF.dValorBase, objComissoesCF.dValorComissao)
            If lErro <> AD_SQL_SUCESSO Then gError 126297

        End If
            
    Next
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Comissoes_Gravar_Loja = SUCESSO
    
    Exit Function

Erro_Comissoes_Gravar_Loja:

    Comissoes_Gravar_Loja = gErr
    
    Select Case gErr

        Case 126290
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 126291

        Case 126292
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_COMISSOESCUPOMFISCAL", gErr)

        Case 126293, 126294
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_COMISSOES4", gErr, objCupomFiscal.iFilialEmpresa, TIPO_COMISSAO_LOJA, objComissoesCF.iCodVendedor, objCupomFiscal.dtDataEmissao)

        Case 126295
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_COMISSOES1", gErr, objCupomFiscal.iFilialEmpresa, TIPO_COMISSAO_LOJA, objComissoesCF.iCodVendedor, objCupomFiscal.dtDataEmissao)

        Case 126296
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_COMISSOES", gErr, objCupomFiscal.iFilialEmpresa, TIPO_COMISSAO_LOJA, objComissoesCF.iCodVendedor, objCupomFiscal.dtDataEmissao)

        Case 126297
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_COMISSOES1", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151083)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function Comissoes_Gera_Loja(ByVal objCupomFiscal As ClassCupomFiscal, ByVal objItens As ClassItemCupomFiscal, ByVal objCliente As ClassCliente, ByVal iFilialCli As Integer, ByVal colComissoes As Collection) As Long
'gera os registros de comissao para o vendedor que fez a venda

Dim lErro As Long
Dim objTelaComissoes As Object 'New ComissoesCalcula
Dim objChamaTela As Object 'New ComissoesCalcula
Dim colComissoes1 As New Collection
Dim objComissoesCF As ClassComissoesCF
Dim objComissoesPV1 As ClassComissaoPedVendas
Dim iAchou As Integer

On Error GoTo Erro_Comissoes_Gera_Loja

    If objCupomFiscal.iVendedor <> 0 Then
    
        'lErro = Chama_Tela_Nova_Instancia1("ComissoesCalcula", objTelaComissoes)
        'If lErro <> SUCESSO Then gError 126287
        
        Set objChamaTela = CreateObject("TelasLoja.ClassLojaTela")
        
        lErro = objChamaTela.ComissoesCalcula_Cria(objTelaComissoes)
        If lErro <> SUCESSO Then gError 126287

        lErro = objTelaComissoes.Trata_Parametros(objCupomFiscal.iFilialEmpresa, objCliente.sNomeReduzido, iFilialCli, objItens.sProduto, objItens.dQuantidade, objItens.sUnidadeMed, objItens.dPrecoUnitario, colComissoes1, objItens.dValorDesconto, objItens.dPercDesc, objCupomFiscal.iVendedor, MODULO_LOJA)
        If lErro <> SUCESSO Then gError 126288
        
        For Each objComissoesPV1 In colComissoes1
        
            iAchou = 0
        
            For Each objComissoesCF In colComissoes
                If objComissoesCF.iCodVendedor = objComissoesPV1.iCodVendedor Then
                    objComissoesCF.dValorComissao = objComissoesCF.dValorComissao + objComissoesPV1.dValor
                    objComissoesCF.dValorBase = objComissoesCF.dValorBase + objComissoesPV1.dValorBase
                    iAchou = 1
                    Exit For
                End If
            Next
            
            If iAchou = 0 Then
                Set objComissoesCF = New ClassComissoesCF
                objComissoesCF.iCodVendedor = objComissoesPV1.iCodVendedor
                objComissoesCF.dValorComissao = objComissoesPV1.dValor
                objComissoesCF.dValorBase = objComissoesPV1.dValorBase
                colComissoes.Add objComissoesCF
            End If
        Next
        
        Call objTelaComissoes.Fecha_Tela
    
    End If
    
    Comissoes_Gera_Loja = SUCESSO
    
    Exit Function

Erro_Comissoes_Gera_Loja:

    Comissoes_Gera_Loja = gErr
    
    Select Case gErr

        Case 126287, 126288

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151084)

    End Select

    Exit Function

End Function

Private Sub Mover_Dados_CupomFiscal_Log(ByVal objCupomFiscal As ClassCupomFiscal, ByVal objLog As ClassLog)
'Função que recebe os dados de um cupom e coloca em colRegistro para preparar a gravacao do log

Dim sLog As String

On Error GoTo Erro_Mover_Dados_CupomFiscal_Log

    If objLog.colRegistro.Count > 0 Then
        sLog = objLog.colRegistro.Item(objLog.colRegistro.Count)
    Else
        sLog = ""
    End If

    'preenche os dados do log com cada atributo do objMovimentoCaixa separado por vbkeyscape
    With objCupomFiscal
        objLog.sLog = CStr(.iFilialEmpresa) & Chr(vbKeyEscape) & _
                      CStr(.lNumIntDoc) & Chr(vbKeyEscape) & _
                      CStr(.iStatus) & Chr(vbKeyEscape) & _
                      CStr(.iECF) & Chr(vbKeyEscape) & _
                      CStr(.dtDataEmissao) & Chr(vbKeyEscape) & _
                      CStr(.dHoraEmissao) & Chr(vbKeyEscape) & _
                      CStr(.lNumero) & Chr(vbKeyEscape) & _
                      CStr(.sCPFCGC) & Chr(vbKeyEscape) & _
                      CStr(.lNumOrcamento) & Chr(vbKeyEscape) & _
                      CStr(.dValorTotal) & Chr(vbKeyEscape) & _
                      CStr(.dValorProdutos) & Chr(vbKeyEscape) & _
                      CStr(.dValorDesconto) & Chr(vbKeyEscape) & _
                      CStr(.dValorAcrescimo) & Chr(vbKeyEscape) & _
                      CStr(.iTabelaPreco) & Chr(vbKeyEscape) & _
                      CStr(.sNaturezaOp) & Chr(vbKeyEscape) & _
                      CStr(.lGerenteCancel) & Chr(vbKeyEscape) & _
                      CStr(.sMotivoCancel) & Chr(vbKeyEscape) & _
                      CStr(.iVendedor) & Chr(vbKeyEscape) & _
                      CStr(.lDuracao) & Chr(vbKeyEscape) & _
                      CStr(.iTipo) & Chr(vbKeyEscape) & _
                      CStr(.iCodCaixa) & Chr(vbKeyEscape) & _
                      CStr(.lCOOCupomOrigDAV) & Chr(vbKeyEscape) & .sTipoECF & Chr(vbKeyEscape) & _
                      .sMarcaECF & Chr(vbKeyEscape) & .sModeloECF & Chr(vbKeyEscape) & .sNumSerieECF & Chr(vbKeyEscape) & CStr(.lCCF) & Chr(vbKeyEscape) & CStr(.lNumeroDAV) & Chr(vbKeyEscape) & .sCPFCGC1 & Chr(vbKeyEscape) & .sEndereco & Chr(vbKeyEscape) & CStr(.iSequencialECF) & Chr(vbKeyEscape) & CStr(.iSequencialECFOrigDAV) & Chr(vbKeyEscape)

    End With

    Call Mover_Dados_Log(sLog, objLog)

    Exit Sub

Erro_Mover_Dados_CupomFiscal_Log:

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151085)

    End Select

    Exit Sub

End Sub

Sub Mover_Separator_Log(ByVal objLog As ClassLog)
'Acrescenta um separator ao log

Dim sLog As String

On Error GoTo Erro_Mover_Separator_Log

    If objLog.colRegistro.Count > 0 Then
        sLog = objLog.colRegistro.Item(objLog.colRegistro.Count)
    Else
        sLog = ""
    End If
    
    objLog.sLog = Chr(vbKeySeparator)
    Call CF("Mover_Dados_Log", sLog, objLog)
    
    Exit Sub

Erro_Mover_Separator_Log:

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151086)

    End Select

    Exit Sub

End Sub

Function Carne_Gravar_Venda(ByVal objCarne As ClassCarne, ByVal lNumIntDocCupomFiscal As Long, ByVal objLog As ClassLog) As Long
'gravar os dados de carne caso existam, também é passado como parametro o numero identificador o NumIntDoc do Cupom Fiscal
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lNumAuto As Long
Dim objCarneParc As ClassCarneParcelas
Dim lErro As Long
Dim alComando(1 To 2) As Long
Dim iIndice As Integer

On Error GoTo Erro_Carne_Gravar_Venda

    'passar para o codigo que está na maquina da Cyntia
    If objCarne.sCodBarrasCarne <> "" Then

        For iIndice = LBound(alComando) To UBound(alComando)
            alComando(iIndice) = Comando_Abrir()
            If alComando(iIndice) = 0 Then gError 112099
        Next
    
        'gera um novo número interno de carne
        lErro = CF("Config_ObterNumInt", "LojaConfig", "NUM_PROX_CARNE", lNumAuto, 1, objCarne.iFilialEmpresa)
        If lErro <> SUCESSO Then gError 112100
    
        objCarne.lNumIntDoc = lNumAuto
    
        objCarne.lCupomFiscal = lNumIntDocCupomFiscal
    
        'insere novo registro na tabela de Carne
        lErro = Comando_Executar(alComando(1), "INSERT INTO Carne(NumIntDoc, FilialEmpresa, Status, DataReferencia, CupomFiscal, Cliente, Autorizacao, CodBarrasCarne) VALUES (?,?,?,?,?,?,?,?)", objCarne.lNumIntDoc, objCarne.iFilialEmpresa, objCarne.iStatus, objCarne.dtDataReferencia, objCarne.lCupomFiscal, objCarne.lCliente, objCarne.sAutorizacao, objCarne.sCodBarrasCarne)
        If lErro <> AD_SQL_SUCESSO Then gError 112101
    
        If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
    
            Call Mover_Dados_Carne_Log(objCarne, objLog)
        
        End If
        
        'reserva um conjunto de numeros internos de parcela de carne
        lErro = CF("Config_ObterNumInt", "LojaConfig", "NUM_PROX_CARNEPARC", lNumAuto, objCarne.colParcelas.Count, objCarne.iFilialEmpresa)
        If lErro <> SUCESSO Then gError 112102
    
        For Each objCarneParc In objCarne.colParcelas
    
            objCarneParc.lNumIntDoc = lNumAuto
            objCarneParc.iFilialEmpresa = objCarne.iFilialEmpresa
            objCarneParc.lNumIntCarne = objCarne.lNumIntDoc
            objCarneParc.dValor = objCarneParc.dValor
    
            'insere novo registro na tabela CarneParcelas
            lErro = Comando_Executar(alComando(1), "INSERT INTO CarneParcelas(NumIntDoc, FilialEmpresa, NumIntCarne, Parcela, DataVencimento, Valor,  Status) VALUES (?,?,?,?,?,?,?)", objCarneParc.lNumIntDoc, objCarneParc.iFilialEmpresa, objCarneParc.lNumIntCarne, objCarneParc.iParcela, objCarneParc.dtDataVencimento, objCarneParc.dValor, objCarneParc.iStatus)
            If lErro <> AD_SQL_SUCESSO Then gError 112103
    
            lNumAuto = lNumAuto + 1
    
        Next
    
        If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
    
            Call Mover_Dados_CarneParc_Log(objCarne, objLog)
    
        End If
        
        For iIndice = LBound(alComando) To UBound(alComando)
            Call Comando_Fechar(alComando(iIndice))
        Next

    End If

    Carne_Gravar_Venda = SUCESSO

    Exit Function

Erro_Carne_Gravar_Venda:

    Carne_Gravar_Venda = gErr

    Select Case gErr

        Case 112099
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 112100, 112102

        Case 112101
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CARNE1", gErr, objCarne.sCodBarrasCarne)

        Case 112103
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CARNEPARC1", gErr, objCarneParc.iParcela, objCarne.sCodBarrasCarne)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151087)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Sub Mover_Dados_Carne_Log(ByVal objCarne As ClassCarne, ByVal objLog As ClassLog)
'Função que recebe os dados de um cupom e coloca em colRegistro para preparar a gravacao do log

Dim sLog As String

On Error GoTo Erro_Mover_Dados_Carne_Log

    If objLog.colRegistro.Count > 0 Then
        sLog = objLog.colRegistro.Item(objLog.colRegistro.Count)
    Else
        sLog = ""
    End If

    'preenche os dados do log com cada atributo do objMovimentoCaixa separado por vbkeyscape
    With objCarne
        objLog.sLog = CStr(.lNumIntDoc) & Chr(vbKeyEscape) & _
                      CStr(.iFilialEmpresa) & Chr(vbKeyEscape) & _
                      CStr(.iStatus) & Chr(vbKeyEscape) & _
                      CStr(.dtDataReferencia) & Chr(vbKeyEscape) & _
                      CStr(.lCupomFiscal) & Chr(vbKeyEscape) & _
                      CStr(.lCliente) & Chr(vbKeyEscape) & _
                      CStr(.sAutorizacao) & Chr(vbKeyEscape) & _
                      CStr(.sCodBarrasCarne) & Chr(vbKeyEscape)
    End With
    
    Call Mover_Dados_Log(sLog, objLog)

    Exit Sub

Erro_Mover_Dados_Carne_Log:

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151088)

    End Select

    Exit Sub

End Sub

Private Sub Mover_Dados_CarneParc_Log(ByVal objCarne As ClassCarne, ByVal objLog As ClassLog)
'Função que recebe os dados de um cupom e coloca em colRegistro para preparar a gravacao do log

Dim sLog As String
Dim objCarneParc As ClassCarneParcelas

On Error GoTo Erro_Mover_Dados_CarneParc_Log

    If objLog.colRegistro.Count > 0 Then
        sLog = objLog.colRegistro.Item(objLog.colRegistro.Count)
    Else
        sLog = ""
    End If

    For Each objCarneParc In objCarne.colParcelas

        'preenche os dados do og com cada atributo do objCarneParc separado por vbkeyscape
        With objCarneParc
            objLog.sLog = Chr(vbKeyShift) & CStr(.lNumIntDoc) & Chr(vbKeyEscape) & _
                          CStr(.iFilialEmpresa) & Chr(vbKeyEscape) & _
                          CStr(.lNumIntCarne) & Chr(vbKeyEscape) & _
                          CStr(.iParcela) & Chr(vbKeyEscape) & _
                          CStr(.dtDataVencimento) & Chr(vbKeyEscape) & _
                          CStr(.dValor) & Chr(vbKeyEscape) & _
                          CStr(.iStatus) & Chr(vbKeyEscape)
        End With

        Call Mover_Dados_Log(sLog, objLog)

    Next
    
    Exit Sub

Erro_Mover_Dados_CarneParc_Log:

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151089)

    End Select

    Exit Sub

End Sub

Function MovimentosCaixa_Gera_NumMovto(ByVal colMovCx As Collection) As Long
'gera os numeros dos movimentos de caixa.

Dim lNumAuto As Long
Dim lErro As Long
Dim objMovCx As ClassMovimentoCaixa

On Error GoTo Erro_MovimentosCaixa_Gera_NumMovto

    If colMovCx.Count > 0 Then

        'reserva um conjunto de numeros internos de movimento de caixa
        lErro = CF("Config_ObterNumInt", "LojaConfig", "NUM_PROX_MOVCAIXACENTRAL", lNumAuto, colMovCx.Count, colMovCx.Item(1).iFilialEmpresa)
        If lErro <> SUCESSO Then gError 112104
    
        For Each objMovCx In colMovCx
    
            objMovCx.lNumMovto = lNumAuto
    
            lNumAuto = lNumAuto + 1
    
        Next

    End If

    MovimentosCaixa_Gera_NumMovto = SUCESSO

    Exit Function

Erro_MovimentosCaixa_Gera_NumMovto:

    MovimentosCaixa_Gera_NumMovto = gErr

    Select Case gErr

        Case 112104

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151090)

    End Select

    Exit Function

End Function

Function MovimentosCaixa_Gravar_Venda(ByVal colMovCx As Collection, ByVal colCheque As Collection, ByVal colTroca As Collection, ByVal objLog As ClassLog, ByVal objCupomFiscal As ClassCupomFiscal, ByVal sArquivo As String, ByVal lNumMovto As Long) As Long
'gravar os movimentos de caixa contidos na colecao.
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lErro As Long
Dim alComando(1 To 8) As Long
Dim iIndice As Integer
Dim objMovCx As ClassMovimentoCaixa
Dim objCheque As ClassChequePre
Dim objTroca As ClassTroca
Dim objCCMovDia As New ClassCCMovDia
Dim iTipoMeioPagto As Integer
Dim iFilialEmpresa As Integer
Dim sMes As String
Dim iAno As Integer

On Error GoTo Erro_MovimentosCaixa_Gravar_Venda

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 112105
    Next

    For Each objMovCx In colMovCx
        
        Set objCCMovDia = New ClassCCMovDia
        
        objMovCx.lNumIntDocLog = objLog.lNumIntDoc
        objMovCx.iQuantLog = objLog.iQuantLog

        'coloca o sequencial do loja como referencia do movimento, se for o caso
        For Each objCheque In colCheque

            If objCheque.lNumMovtoCaixa = objMovCx.lNumMovto Then
                If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL_BACKOFFICE Then
                    objMovCx.lNumRefInterna = objCheque.lSequencialBack
                Else
                    objMovCx.lNumRefInterna = objCheque.lSequencialLoja
                End If
                Exit For
            End If

        Next

        'coloca o NumMovto da troca como referencia do movimento, se for o caso
        For Each objTroca In colTroca

            If objTroca.lNumMovtoCaixa = objMovCx.lNumMovto Then
                objMovCx.lNumRefInterna = objTroca.lNumMovtoCaixa
                Exit For
            End If

        Next

        'insere novo registro na tabela de MovimentosCaixa
        lErro = Comando_Executar(alComando(1), "INSERT INTO MovimentosCaixa(FilialEmpresa, NumMovto, Caixa, Operador, Sequencial, Tipo, AdmMeioPagto, Parcelamento, TipoCartao, Numero, DataMovimento, Valor, Historico, Favorecido, CupomFiscal, NumRefInterna, MovtoTransf, MovtoEstorno, Gerente, CodConta, Hora, Transferencia, NumIntExt, NumIntDocLog, QuantLog, Arquivo, NumMovtoArq, DataPreDatado, Autorizacao) " & _
        "VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", objMovCx.iFilialEmpresa, objMovCx.lNumMovto, objMovCx.iCaixa, objMovCx.iCodOperador, objMovCx.lSequencial, objMovCx.iTipo, objMovCx.iAdmMeioPagto, objMovCx.iParcelamento, objMovCx.iTipoCartao, objMovCx.lNumero, objMovCx.dtDataMovimento, objMovCx.dValor, objMovCx.sHistorico, objMovCx.sFavorecido, objMovCx.lCupomFiscal, objMovCx.lNumRefInterna, objMovCx.lMovtoTransf, objMovCx.lMovtoEstorno, objMovCx.iGerente, objMovCx.iCodConta, objMovCx.dHora, objMovCx.lTransferencia, objMovCx.lNumIntExt, objMovCx.lNumIntDocLog, objMovCx.iQuantLog, sArquivo, lNumMovto, _
        objMovCx.dtDataPreDatado, objMovCx.sAutorizacao)
        If lErro <> AD_SQL_SUCESSO Then gError 112106
        
        If objCupomFiscal.iTipo = OPTION_CF Or objCupomFiscal.iStatus = STATUS_BAIXADO Then
        
            'se for troco ==> trata como um saque para fins de estatistica
            If objMovCx.iTipo = MOVIMENTOCAIXA_TROCO_DINHEIRO Or _
            objMovCx.iTipo = MOVIMENTOCAIXA_TROCO_CONTRAVALE Or _
            objMovCx.iTipo = MOVIMENTOCAIXA_TROCO_VALE Then
    
                'preenche um objccmovdia com os dados do movimento de deposito no caixa central
                lErro = CF("Mover_Dados_Saque_CCMovDia", objMovCx, objCCMovDia)
                If lErro <> SUCESSO Then gError 112107
    
                'torna negativo o valor para que as tabelas estatisticas sejam atualizadas corretamente
                objMovCx.dValor = -objMovCx.dValor
    
            Else
    
                'preenche um objccmovdia com os dados do movimento de deposito no caixa central
                lErro = Mover_Dados_Deposito_CCMovDia(objMovCx, objCCMovDia)
                If lErro <> SUCESSO Then gError 112108
    
            End If
            
            'seleciona registro na tabela de TiposMovtocaixa
            lErro = Comando_ExecutarPos(alComando(8), "SELECT TipoMeioPagto FROM TiposMovtoCaixa WHERE Codigo=?", 0, iTipoMeioPagto, objMovCx.iTipo)
            If lErro <> AD_SQL_SUCESSO Then gError 112508
        
            lErro = Comando_BuscarPrimeiro(alComando(8))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112509
            
            objCCMovDia.iTipoMeioPagto = iTipoMeioPagto
            
            'adiciona o mesmo no consolidado diário
            lErro = CF("CCMovDia_Grava", objCCMovDia)
            If lErro <> SUCESSO Then gError 112109
    
            'adiciona o mesmo no consolidado anual no mês em questão
            lErro = CF("CCMov_Grava", objCCMovDia)
            If lErro <> SUCESSO Then gError 112110
    
            lErro = Comando_ExecutarPos(alComando(2), "SELECT FilialEmpresa FROM SldDiaMeioPagtoCx WHERE FilialEmpresa = ? AND Caixa = ? AND TipoMeioPagto = ? AND AdmMeioPagto = ? AND Parcelamento = ? AND Data = ?", 0, iFilialEmpresa, objMovCx.iFilialEmpresa, objMovCx.iCaixa, objCCMovDia.iTipoMeioPagto, objMovCx.iAdmMeioPagto, objMovCx.iParcelamento, objMovCx.dtDataMovimento)
            If lErro <> AD_SQL_SUCESSO Then gError 112111
    
            lErro = Comando_BuscarPrimeiro(alComando(2))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112112
    
            If lErro = AD_SQL_SUCESSO Then
    
                lErro = Comando_ExecutarPos(alComando(3), "UPDATE SldDiaMeioPagtoCx SET ValorFaturado = ValorFaturado + ?", alComando(2), objMovCx.dValor)
                If lErro <> AD_SQL_SUCESSO Then gError 112113
    
            Else
    
                lErro = Comando_Executar(alComando(4), "INSERT INTO SldDiaMeioPagtoCx (FilialEmpresa, Caixa, TipoMeioPagto, AdmMeioPagto, Parcelamento, Data, ValorFaturado) VALUES (?,?,?,?,?,?,?)", objMovCx.iFilialEmpresa, objMovCx.iCaixa, objCCMovDia.iTipoMeioPagto, objMovCx.iAdmMeioPagto, objMovCx.iParcelamento, objMovCx.dtDataMovimento, objMovCx.dValor)
                If lErro <> AD_SQL_SUCESSO Then gError 112114
    
            End If
    
            lErro = Comando_ExecutarPos(alComando(5), "SELECT FilialEmpresa FROM SldMesMeioPagtoCx WHERE FilialEmpresa = ? AND Caixa = ? AND TipoMeioPagto = ? AND AdmMeioPagto = ? AND Parcelamento = ? AND Ano = ?", 0, iFilialEmpresa, objMovCx.iFilialEmpresa, objMovCx.iCaixa, objCCMovDia.iTipoMeioPagto, objMovCx.iAdmMeioPagto, objMovCx.iParcelamento, Year(objMovCx.dtDataMovimento))
            If lErro <> AD_SQL_SUCESSO Then gError 112115
    
            lErro = Comando_BuscarPrimeiro(alComando(5))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112116
    
            sMes = CStr(Month(objMovCx.dtDataMovimento))
            iAno = CStr(Year(objMovCx.dtDataMovimento))
    
            If lErro = AD_SQL_SUCESSO Then
    
                lErro = Comando_ExecutarPos(alComando(6), "UPDATE SldMesMeioPagtoCx SET ValorFaturado" & sMes & " = ValorFaturado" & sMes & " + ?", alComando(5), objMovCx.dValor)
                If lErro <> AD_SQL_SUCESSO Then gError 112117
    
            Else
    
                lErro = Comando_Executar(alComando(7), "INSERT INTO SldMesMeioPagtoCx (FilialEmpresa, Caixa, TipoMeioPagto, AdmMeioPagto, Parcelamento, Ano, ValorFaturado" & sMes & ") VALUES (?,?,?,?,?,?,?) ", objMovCx.iFilialEmpresa, objMovCx.iCaixa, objCCMovDia.iTipoMeioPagto, objMovCx.iAdmMeioPagto, objMovCx.iParcelamento, Year(objMovCx.dtDataMovimento), objMovCx.dValor)
                If lErro <> AD_SQL_SUCESSO Then gError 112118
    
            End If
            
            'gera a sangria de boleto para gerar o titulo a receber do movimento de caixa se for cartao de credito ou debito
            lErro = CF("MovimentosCaixa_Gravar_MovcxBol_New", objMovCx)
            If lErro <> SUCESSO Then gError 214638
            
        End If
    Next

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    MovimentosCaixa_Gravar_Venda = SUCESSO

    Exit Function

Erro_MovimentosCaixa_Gravar_Venda:

    MovimentosCaixa_Gravar_Venda = gErr

    Select Case gErr

        Case 112105
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 112106
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MOVCAIXA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa, objMovCx.lSequencial)

        Case 112107 To 112110, 214638
        
        Case 112111, 112112
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDDIAMEIOPAGTOCX", gErr)
        
        Case 112113
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_SLDDIAMEIOPAGTOCX", gErr)
        
        Case 112114
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_SLDDIAMEIOPAGTOCX", gErr)
        
        Case 112115, 112116
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESMEIOPAGTOCX", gErr)

        Case 112117
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_SLDMESMEIOPAGTOCX", gErr)
        
        Case 112118
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_SLDMESMEIOPAGTOCX", gErr)
        
        Case 112508, 112509
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOSMOVTOCAIXA1", gErr, objMovCx.iTipo)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151091)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Sub Mover_Dados_Movcx_Log1(ByVal colMovCx As Collection, ByVal objLog As ClassLog)
'Função que recebe os dados de movimentos de caixa e coloca em objLog

Dim vSequencialLoja As Variant
Dim sLog As String
Dim objTroca As ClassTroca
Dim objMovCx As New ClassMovimentoCaixa

On Error GoTo Erro_Mover_Dados_Movcx_Log1
    
    If objLog.colRegistro.Count > 0 Then
        sLog = objLog.colRegistro.Item(objLog.colRegistro.Count)
    Else
        sLog = ""
    End If

    For Each objMovCx In colMovCx
        'preenche sLog com cada atributo do objCheque separado por vbkeyscape
        With objMovCx
            objLog.sLog = CStr(.iFilialEmpresa) & Chr(vbKeyEscape) & _
                          CStr(.lNumMovto) & Chr(vbKeyEscape) & _
                          CStr(.iCaixa) & Chr(vbKeyEscape) & _
                          CStr(.iCodOperador) & Chr(vbKeyEscape) & _
                          CStr(.lSequencial) & Chr(vbKeyEscape) & _
                          CStr(.iTipo) & Chr(vbKeyEscape) & _
                          CStr(.dtDataMovimento) & Chr(vbKeyEscape) & _
                          CStr(.iGerente) & Chr(vbKeyEscape) & _
                          CStr(.dHora) & Chr(vbKeyEscape) & _
                          CStr(.lNumRefInterna) & Chr(vbKeyEscape)
    
        End With
    
         objLog.sLog = objLog.sLog & Chr(vbKeyControl)
        Call Mover_Dados_Log(sLog, objLog)
    Next
    
    objLog.sLog = Chr(vbKeyEnd)
    Call Mover_Dados_Log(sLog, objLog)
    
    Exit Sub

Erro_Mover_Dados_Movcx_Log1:

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151092)

    End Select

    Exit Sub

End Sub

Sub Mover_Dados_Movcx_Log(ByVal colMovCx As Collection, ByVal objLog As ClassLog)
'Função que recebe os dados dos movimentos de caixa e coloca em objLog

Dim vSequencialLoja As Variant
Dim sLog As String
Dim objTroca As ClassTroca
Dim objMovCx As ClassMovimentoCaixa

On Error GoTo Erro_Mover_Dados_Movcx_Log

    If objLog.colRegistro.Count > 0 Then
        sLog = objLog.colRegistro.Item(objLog.colRegistro.Count)
    Else
        sLog = ""
    End If

    For Each objMovCx In colMovCx

        'preenche sLog com cada atributo do objCheque separado por vbkeyscape
        With objMovCx
            objLog.sLog = Chr(vbKeyControl) & _
                          CStr(.iFilialEmpresa) & Chr(vbKeyEscape) & _
                          CStr(.lNumMovto) & Chr(vbKeyEscape) & _
                          CStr(.iCaixa) & Chr(vbKeyEscape) & _
                          CStr(.iCodOperador) & Chr(vbKeyEscape) & _
                          CStr(.lSequencial) & Chr(vbKeyEscape) & _
                          CStr(.iTipo) & Chr(vbKeyEscape) & _
                          CStr(.iAdmMeioPagto) & Chr(vbKeyEscape) & _
                          CStr(.iParcelamento) & Chr(vbKeyEscape) & _
                          CStr(.iTipoCartao) & Chr(vbKeyEscape) & _
                          CStr(.lNumero) & Chr(vbKeyEscape) & _
                          CStr(.dtDataMovimento) & Chr(vbKeyEscape) & _
                          CStr(.dValor) & Chr(vbKeyEscape) & _
                          CStr(.sHistorico) & Chr(vbKeyEscape) & _
                          CStr(.sFavorecido) & Chr(vbKeyEscape) & _
                          CStr(.lCupomFiscal) & Chr(vbKeyEscape) & _
                          CStr(.lNumRefInterna) & Chr(vbKeyEscape) & _
                          CStr(.lMovtoTransf) & Chr(vbKeyEscape) & _
                          CStr(.lMovtoEstorno) & Chr(vbKeyEscape) & _
                          CStr(.iGerente) & Chr(vbKeyEscape) & _
                          CStr(.iCodConta) & Chr(vbKeyEscape) & _
                          CStr(.dHora) & Chr(vbKeyEscape) & _
                          CStr(.lTransferencia) & Chr(vbKeyEscape) & _
                          CStr(.lNumIntExt) & Chr(vbKeyEscape)
        End With

        Call CF("Mover_Dados_Log", sLog, objLog)

    Next
    
    objLog.sLog = Chr(vbKeyEnd)
    Call CF("Mover_Dados_Log", sLog, objLog)
    
    Exit Sub

Erro_Mover_Dados_Movcx_Log:

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151093)

    End Select

    Exit Sub

End Sub

Private Sub Mover_Dados_Movcx_Fechamento_Log(ByVal objLog As ClassLog, ByVal objMovCx As ClassMovimentoCaixa, ByVal objLojaArqFisMestre As ClassLojaArqFisMestre, ByVal colLojaArqFisAnalitico As Collection)
'Função que recebe os dados dos movimentos de caixa e coloca em objLog

Dim vSequencialLoja As Variant
Dim sLog As String
Dim objTroca As ClassTroca
Dim sReg As String
Dim lErro As Long
Dim iPosKeyControl As Integer
Dim iPosKeyEscape As Integer
Dim iPosKeyEnd As Integer
Dim sReg1 As String
Dim iTipo As Integer
Dim objLojaArqFisAnalitico As ClassLojaArqFisAnalitico

On Error GoTo Erro_Mover_Dados_Movcx_Fechamento_Log

    If objLog.colRegistro.Count > 0 Then
        sLog = objLog.colRegistro.Item(objLog.colRegistro.Count)
    Else
        sLog = ""
    End If
    
    
    'preenche sLog com cada atributo do objCheque separado por vbkeyscape
    With objMovCx
        objLog.sLog = CStr(.iFilialEmpresa) & Chr(vbKeyEscape) & _
                      CStr(.lNumMovto) & Chr(vbKeyEscape) & _
                      CStr(.iCaixa) & Chr(vbKeyEscape) & _
                      CStr(.iCodOperador) & Chr(vbKeyEscape) & _
                      CStr(.lSequencial) & Chr(vbKeyEscape) & _
                      CStr(.iTipo) & Chr(vbKeyEscape) & _
                      CStr(.dtDataMovimento) & Chr(vbKeyEscape) & _
                      CStr(.iGerente) & Chr(vbKeyEscape) & _
                      CStr(.dHora) & Chr(vbKeyEscape) & _
                      CStr(.lNumRefInterna) & Chr(vbKeyEscape)

    End With
    
    With objLojaArqFisMestre
        objLog.sLog = objLog.sLog & _
                      CStr(.iCodECF) & Chr(vbKeyEscape) & _
                      .sNumSerieECF & Chr(vbKeyEscape) & _
                      CStr(.dGrandeTotal) & Chr(vbKeyEscape) & _
                      CStr(.lCOOIni) & Chr(vbKeyEscape) & _
                      CStr(.lCOOFim) & Chr(vbKeyEscape) & _
                      CStr(.lCRO) & Chr(vbKeyEscape) & _
                      CStr(.lCRZ) & Chr(vbKeyEscape) & _
                      CStr(.dVendaBruta) & Chr(vbKeyEscape) & _
                      CStr(.dtData) & Chr(vbKeyEscape) & _
                      CStr(.iNumEquip) & Chr(vbKeyEscape)
    End With
    
    For Each objLojaArqFisAnalitico In colLojaArqFisAnalitico
    
        objLog.sLog = objLog.sLog & _
            objLojaArqFisAnalitico.sSituacaoTrib & Chr(vbKeyEscape) & _
            CStr(objLojaArqFisAnalitico.dTotalizador) & Chr(vbKeyEscape)
    
    Next
    
    
    objLog.sLog = objLog.sLog & Chr(vbKeyEnd)
    Call Mover_Dados_Log(sLog, objLog)
    
    Exit Sub

Erro_Mover_Dados_Movcx_Fechamento_Log:

    Select Case gErr
        
        Case 112511 To 112513
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151094)

    End Select

    Exit Sub

End Sub

'Function ItensCF_Gravar_Venda(ByVal objCupomFiscal As ClassCupomFiscal, objLog As ClassLog) As Long
''gravar os itens do cupom fiscal contidos na colecao.
''IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO
'
'Dim lNumAuto As Long
'Dim lErro As Long
'Dim alComando(1 To 14) As Long
'Dim iIndice As Integer
'Dim objItens As ClassItemCupomFiscal
'Dim iItem As Integer
'Dim iFilialEmpresa As Integer
'Dim objProduto As New ClassProduto
'Dim dFator As Double
'Dim iNumVendas As Integer
'Dim sMes As String
'Dim dQuantVenda As Double
'Dim lCodigo As Long
'Dim objMovEstoque As ClassMovEstoque
'Dim dQuantEstoque As Double
'Dim colInsumos As Collection
'Dim colRastroMovto As Collection
'Dim sNomeReduzidoAlmox As String
'Dim iAlmoxarifadoPadrao As Integer
'Dim alComando1(1 To NUM_MAX_LCOMANDO_MOVESTOQUE) As Long
'Dim objItemMovEstoque As ClassItemMovEstoque
'
'On Error GoTo Erro_ItensCF_Gravar_Venda
'
'    For iIndice = LBound(alComando) To UBound(alComando)
'        alComando(iIndice) = Comando_Abrir()
'        If alComando(iIndice) = 0 Then gError 112119
'    Next
'
'    For iIndice = LBound(alComando1) To UBound(alComando1)
'        alComando1(iIndice) = Comando_Abrir()
'        If alComando1(iIndice) = 0 Then gError 118194
'    Next
'
'    'gera um novo número interno de itens de cupom fiscal
'    lErro = CF("Config_ObterNumInt", "LojaConfig", "NUM_PROX_ITEM_CUPOMFISCAL", lNumAuto, objCupomFiscal.colItens.Count, giFilialEmpresa)
'    If lErro <> SUCESSO Then gError 112120
'
'    iItem = 1
'
'    Set objMovEstoque = New ClassMovEstoque
'
'    objMovEstoque.dtData = Date
'    objMovEstoque.dtHora = CDbl(Time)
'    objMovEstoque.iFilialEmpresa = giFilialEmpresa
'    objMovEstoque.iTipoMov = MOV_EST_CUPOM_FISCAL
'    objMovEstoque.sDocOrigem = "CF"
'
'    For Each objItens In objCupomFiscal.colItens
'
'        objItens.lNumIntDoc = lNumAuto
'        objItens.iItem = iItem
'
'        iNumVendas = 1
'
'        For iIndice = 1 To iItem - 1
'            If objCupomFiscal.colItens.Item(iIndice).sProduto = objItens.sProduto Then
'                iNumVendas = 0
'                Exit For
'
'            End If
'        Next
'
'        'insere novo registro na tabela de ItensCupomFiscal
'        lErro = Comando_Executar(alComando(1), "INSERT INTO ItensCupomFiscal(FilialEmpresa, NumIntDoc, NumIntCupom, Item, Status, Produto, UnidadeMed, Quantidade, PrecoUnitario, PercDesc, ValorDesconto, AliquotaICMS) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)", giFilialEmpresa, objItens.lNumIntDoc, objCupomFiscal.lNumIntDoc, objItens.iItem, objItens.iStatus, objItens.sProduto, objItens.sUnidadeMed, objItens.dQuantidade, objItens.dPrecoUnitario, objItens.dPercDesc, objItens.dValorDesconto, objItens.dAliquotaICMS)
'        If lErro <> AD_SQL_SUCESSO Then gError 112121
'
'        objProduto.sNomeReduzido = objItens.sProduto
'
'        'Lê na tabela de Produto a UM de venda
'        lErro = CF("Produto_Le_NomeReduzido", objProduto)
'        If lErro <> SUCESSO And lErro <> 28030 Then gError 112122
'
'        'Se não encontrar o produto ==> Erro
'        If lErro = 28030 Then gError 112123
'
'        'Obtém fator de conversão para unidade de medida de Venda
'        lErro = CF("UM_Conversao", objProduto.iClasseUM, objItens.sUnidadeMed, objProduto.sSiglaUMVenda, dFator)
'        If lErro <> SUCESSO Then gError 112124
'
'        dQuantVenda = objItens.dQuantidade * dFator
'
'        'Obtém fator de conversão para unidade de medida de Venda
'        lErro = CF("UM_Conversao", objProduto.iClasseUM, objItens.sUnidadeMed, objProduto.sSiglaUMEstoque, dFator)
'        If lErro <> SUCESSO Then gError 112124
'
'        dQuantEstoque = objItens.dQuantidade * dFator
'
'        If objCupomFiscal.lNumOrcamento = 0 Or objCupomFiscal.iStatus = STATUS_BAIXADO Then
'
'            If objProduto.iControleEstoque <> PRODUTO_CONTROLE_SEM_ESTOQUE Then
'                Set colInsumos = New Collection
'                Set colRastroMovto = New Collection
'
'                lErro = CF("AlmoxarifadoPadrao_Le_CodNomeRed", objMovEstoque.iFilialEmpresa, objProduto.sCodigo, sNomeReduzidoAlmox, iAlmoxarifadoPadrao)
'                If lErro <> SUCESSO Then gError 118759
'
'                Set objItemMovEstoque = objMovEstoque.colItens.Add(0, 0, 0, 0, objProduto.sCodigo, objProduto.sDescricao, objProduto.sSiglaUMEstoque, dQuantEstoque, iAlmoxarifadoPadrao, sNomeReduzidoAlmox, 0, "", 0, "", "", "", "", 0, colRastroMovto, colInsumos, DATA_NULA)
'
'                objItemMovEstoque.iClasseUM = objProduto.iClasseUM
'                objItemMovEstoque.iControleEstoque = objProduto.iControleEstoque
'                objItemMovEstoque.sSiglaUMEst = objProduto.sSiglaUMEstoque
'            End If
'
'            lErro = Comando_ExecutarPos(alComando(2), "SELECT FilialEmpresa FROM SldDiaFatCx WHERE FilialEmpresa = ? AND Caixa = ? AND Data = ? AND Produto = ?", 0, iFilialEmpresa, objCupomFiscal.iFilialEmpresa, objCupomFiscal.iCodCaixa, objCupomFiscal.dtDataEmissao, objProduto.sCodigo)
'            If lErro <> AD_SQL_SUCESSO Then gError 112125
'
'            lErro = Comando_BuscarPrimeiro(alComando(2))
'            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112126
'
'            If lErro = AD_SQL_SUCESSO Then
'
'                lErro = Comando_ExecutarPos(alComando(3), "UPDATE SldDiaFatCx SET ValorFaturado = ValorFaturado + ?, QuantFaturada = QuantFaturada + ?, NumVendas = NumVendas + ?", alComando(2), (objItens.dPrecoUnitario * objItens.dQuantidade) - objItens.dValorDesconto, dQuantVenda, iNumVendas)
'                If lErro <> AD_SQL_SUCESSO Then gError 112127
'
'            Else
'
'                lErro = Comando_Executar(alComando(4), "INSERT INTO SldDiaFatCx (FilialEmpresa, Caixa, Data, Produto, ValorFaturado, QuantFaturada, NumVendas) VALUES (?,?,?,?,?,?,?)", objCupomFiscal.iFilialEmpresa, objCupomFiscal.iCodCaixa, objCupomFiscal.dtDataEmissao, objProduto.sCodigo, (objItens.dPrecoUnitario * objItens.dQuantidade) - objItens.dValorDesconto, dQuantVenda, iNumVendas)
'                If lErro <> AD_SQL_SUCESSO Then gError 112128
'
'            End If
'
'            sMes = Month(objCupomFiscal.dtDataEmissao)
'
'            lErro = Comando_ExecutarPos(alComando(5), "SELECT FilialEmpresa FROM SldMesFatCx WHERE FilialEmpresa = ? AND Caixa = ? AND Ano = ? AND Produto = ?", 0, iFilialEmpresa, objCupomFiscal.iFilialEmpresa, objCupomFiscal.iCodCaixa, Year(objCupomFiscal.dtDataEmissao), objProduto.sCodigo)
'            If lErro <> AD_SQL_SUCESSO Then gError 112129
'
'            lErro = Comando_BuscarPrimeiro(alComando(5))
'            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112130
'
'            If lErro = AD_SQL_SUCESSO Then
'
'                lErro = Comando_ExecutarPos(alComando(6), "UPDATE SldMesFatCx SET ValorFaturado" & sMes & " = ValorFaturado" & sMes & " + ?, QuantFaturada" & sMes & " = QuantFaturada" & sMes & " + ?, NumVendas" & sMes & " = NumVendas" & sMes & " + ?", alComando(5), (objItens.dPrecoUnitario * objItens.dQuantidade) - objItens.dValorDesconto, dQuantVenda, iNumVendas)
'                If lErro <> AD_SQL_SUCESSO Then gError 112132
'
'            Else
'
'                lErro = Comando_Executar(alComando(6), "INSERT INTO SldMesFatCx (FilialEmpresa, Caixa, Ano, Produto, ValorFaturado" & sMes & " , QuantFaturada" & sMes & ", NumVendas" & sMes & ") VALUES (?,?,?,?,?,?,?)", objCupomFiscal.iFilialEmpresa, objCupomFiscal.iCodCaixa, Year(objCupomFiscal.dtDataEmissao), objProduto.sCodigo, (objItens.dPrecoUnitario * objItens.dQuantidade) - objItens.dValorDesconto, dQuantVenda, iNumVendas)
'                If lErro <> AD_SQL_SUCESSO Then gError 112131
'
'            End If
'
'            lErro = Comando_ExecutarPos(alComando(7), "SELECT FilialEmpresa FROM SldDiaFat WHERE FilialEmpresa = ? AND Data = ? AND Produto = ?", 0, iFilialEmpresa, objCupomFiscal.iFilialEmpresa, objCupomFiscal.dtDataEmissao, objProduto.sCodigo)
'            If lErro <> AD_SQL_SUCESSO Then gError 112133
'
'            lErro = Comando_BuscarPrimeiro(alComando(7))
'            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112134
'
'            If lErro = AD_SQL_SUCESSO Then
'
'                lErro = Comando_ExecutarPos(alComando(8), "UPDATE SldDiaFat SET ValorFaturado = ValorFaturado + ?, QuantFaturada = QuantFaturada + ?", alComando(7), (objItens.dPrecoUnitario * objItens.dQuantidade) - objItens.dValorDesconto, dQuantVenda)
'                If lErro <> AD_SQL_SUCESSO Then gError 112135
'
'            Else
'
'                lErro = Comando_Executar(alComando(9), "INSERT INTO SldDiaFat (FilialEmpresa, Data, Produto, ValorFaturado, QuantFaturada) VALUES (?,?,?,?,?)", objCupomFiscal.iFilialEmpresa, objCupomFiscal.dtDataEmissao, objProduto.sCodigo, (objItens.dPrecoUnitario * objItens.dQuantidade) - objItens.dValorDesconto, dQuantVenda)
'                If lErro <> AD_SQL_SUCESSO Then gError 112136
'
'            End If
'
'            lErro = Comando_ExecutarPos(alComando(10), "SELECT FilialEmpresa FROM SldMesFat WHERE FilialEmpresa = ? AND  Ano = ? AND Produto = ?", 0, iFilialEmpresa, objCupomFiscal.iFilialEmpresa, Year(objCupomFiscal.dtDataEmissao), objProduto.sCodigo)
'            If lErro <> AD_SQL_SUCESSO Then gError 112137
'
'            lErro = Comando_BuscarPrimeiro(alComando(10))
'            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112138
'
'            If lErro = AD_SQL_SUCESSO Then
'
'                lErro = Comando_ExecutarPos(alComando(11), "UPDATE SldMesFat SET ValorFaturado" & sMes & " = ValorFaturado" & sMes & " + ?, QuantFaturada" & sMes & " = QuantFaturada" & sMes & " + ?", alComando(10), (objItens.dPrecoUnitario * objItens.dQuantidade) - objItens.dValorDesconto, dQuantVenda)
'                If lErro <> AD_SQL_SUCESSO Then gError 112140
'
'            Else
'
'                lErro = Comando_Executar(alComando(11), "INSERT INTO SldMesFat (FilialEmpresa, Ano, Produto, ValorFaturado" & sMes & " , QuantFaturada" & sMes & ") VALUES (?,?,?,?,?)", objCupomFiscal.iFilialEmpresa, Year(objCupomFiscal.dtDataEmissao), objProduto.sCodigo, (objItens.dPrecoUnitario * objItens.dQuantidade) - objItens.dValorDesconto, dQuantVenda)
'                If lErro <> AD_SQL_SUCESSO Then gError 112139
'
'            End If
'
'        End If
'        lNumAuto = lNumAuto + 1
'        iItem = iItem + 1
'    Next
'
'    If objMovEstoque.colItens.Count > 0 Then
'        'Obtém o Código do Movimento
'        lErro = CF("MovEstoque_Automatico_EmTransacao1", alComando(12), alComando(13), alComando(14), giFilialEmpresa, lCodigo)
'        If lErro <> SUCESSO Then gError 118195
'
'        objMovEstoque.lCodigo = lCodigo
'
'        'Grava os Movimentos de Estoque relacionados a Nota Fiscal
'        lErro = CF("MovEstoque_Grava1", alComando1(), objMovEstoque)
'        If lErro <> SUCESSO Then gError 118196
'
'    End If
'
'    Call Mover_Dados_ItensCF_Log(objCupomFiscal, objLog)
'
'    For iIndice = LBound(alComando) To UBound(alComando)
'        Call Comando_Fechar(alComando(iIndice))
'    Next
'
'    ItensCF_Gravar_Venda = SUCESSO
'
'    Exit Function
'
'Erro_ItensCF_Gravar_Venda:
'
'    ItensCF_Gravar_Venda = gErr
'
'    Select Case gErr
'
'        Case 112119, 118194
'            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
'
'        Case 112120, 112122, 112124, 11819, 118759, 118196
'
'        Case 112121
'            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_ITEMCF", gErr, objCupomFiscal.iFilialEmpresa, objCupomFiscal.iECF, objCupomFiscal.lNumero, objItens.iItem)
'
'        Case 112123
'            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_NAO_CADASTRADO", gErr, objProduto.sCodigo)
'
'        Case 112125, 112126
'            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDDIAFATCX", gErr)
'
'        Case 112127
'            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_SLDDIAFATCX", gErr)
'
'        Case 112128
'            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_SLDDIAFATCX", gErr)
'
'        Case 112129, 112130
'            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESFATCX", gErr)
'
'        Case 112131
'            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_SLDMESFATCX", gErr)
'
'        Case 112132
'            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_SLDMESFATCX", gErr)
'
'        Case 112133, 112134
'            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDDIAFAT", gErr, objCupomFiscal.iFilialEmpresa, objItens.sProduto, objCupomFiscal.dtDataEmissao)
'
'        Case 112135
'            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_SLDDIAFAT", gErr)
'
'        Case 112136
'            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_SLDDIAFAT", gErr, objCupomFiscal.iFilialEmpresa, objItens.sProduto, objCupomFiscal.dtDataEmissao)
'
'        Case 112137, 112138
'            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESFAT", gErr, objCupomFiscal.iFilialEmpresa, objItens.sProduto, objCupomFiscal.dtDataEmissao)
'
'        Case 112139
'            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_SLDMESFAT", gErr)
'
'        Case 112140
'            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_SLDMESFAT", gErr)
'
'        Case Else
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151095)
'
'    End Select
'
'    For iIndice = LBound(alComando) To UBound(alComando)
'        Call Comando_Fechar(alComando(iIndice))
'    Next
'
'    Exit Function
'
'End Function
Private Sub Mover_Dados_ItensCF_Log(ByVal objCupomFiscal As ClassCupomFiscal, ByVal objLog As ClassLog)
'Função que recebe os dados de um cupom e coloca em colRegistro para preparar a gravacao do log

Dim vSequencialLoja As Variant
Dim sLog As String
Dim objItens As ClassItemCupomFiscal

On Error GoTo Erro_Mover_Dados_ItensCF_Log

    If objLog.colRegistro.Count > 0 Then
        sLog = objLog.colRegistro.Item(objLog.colRegistro.Count)
    Else
        sLog = ""
    End If

    For Each objItens In objCupomFiscal.colItens

        'preenche os dados do og com cada atributo do objMovimentoCaixa separado por vbkeyscape
        With objItens
            objLog.sLog = Chr(vbKeyShift) & CStr(.iFilialEmpresa) & Chr(vbKeyEscape) & _
                          CStr(.lNumIntDoc) & Chr(vbKeyEscape) & _
                          CStr(objCupomFiscal.lNumIntDoc) & Chr(vbKeyEscape) & _
                          CStr(.iItem) & Chr(vbKeyEscape) & _
                          CStr(.iStatus) & Chr(vbKeyEscape) & _
                          CStr(.sProduto) & Chr(vbKeyEscape) & _
                          CStr(.sUnidadeMed) & Chr(vbKeyEscape) & _
                          CStr(.dQuantidade) & Chr(vbKeyEscape) & _
                          CStr(.dPrecoUnitario) & Chr(vbKeyEscape) & _
                          CStr(.dPercDesc) & Chr(vbKeyEscape) & _
                          CStr(.dValorDesconto) & Chr(vbKeyEscape) & _
                          CStr(.dAliquotaICMS) & Chr(vbKeyEscape) & _
                          CStr(.sSituacaoTrib) & Chr(vbKeyEscape)
        End With

        Call Mover_Dados_Log(sLog, objLog)

    Next
    
    Exit Sub

Erro_Mover_Dados_ItensCF_Log:

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151096)

    End Select

    Exit Sub

End Sub

Sub Mover_Dados_Log(sLog As String, ByVal objLog As ClassLog)

On Error GoTo Erro_Mover_Dados_Log

    'se o que já estava no log + o que está sendo adicionado excede o tamanho maximo de string
    If Len(sLog) + Len(objLog.sLog) > MAX_TAM_STRING Or objLog.colRegistro.Count = 0 Then
        'adicionar um novo registro em colRegistro
        sLog = objLog.sLog
        objLog.colRegistro.Add sLog
    Else
        'concatena com o que já existe e coloca na colecao
        sLog = sLog & objLog.sLog
        objLog.colRegistro.Remove (objLog.colRegistro.Count)
        objLog.colRegistro.Add sLog
    End If

    Exit Sub

Erro_Mover_Dados_Log:

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151097)

    End Select

    Exit Sub

End Sub

Function Cheque_Gravar_Venda(ByVal colCheque As Collection, ByVal colMovimentosCaixa As Collection, ByVal objLog As ClassLog, ByVal sArquivo As String, ByVal lNumMovto As Long) As Long
 
'gravar os cheques associados ao cupom fiscal contidos na colecao.
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lSequencialLoja As Long
Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer
Dim objMovCx As ClassMovimentoCaixa
Dim objCheque As ClassChequePre
Dim lSequencialBack As Long
Dim lNumIntCheque As Long
 
On Error GoTo Erro_Cheque_Gravar_Venda
 
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 112149
    Next
 
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL_BACKOFFICE Then
 
        'gera um novo número interno de itens de cupom fiscal
        lErro = CF("Config_ObterNumInt", "CPRConfig", "COD_PROX_CHEQUE_BACKOFFICE", lSequencialBack, colCheque.Count)
        If lErro <> SUCESSO Then gError 112777
    
    End If
 
    'Gera o número automático
    lErro = CF("Config_ObterNumInt", "CPRConfig", "NUM_PROX_CHEQUE_PRE", lNumIntCheque, colCheque.Count)
    If lErro <> SUCESSO Then gError 112778
 
    If colMovimentosCaixa.Count > 0 Then
 
        'gera um novo número interno de itens de cupom fiscal
        lErro = CF("Config_ObterNumInt", "LojaConfig", "COD_PROX_CHEQUE_LOJA", lSequencialLoja, colCheque.Count, colMovimentosCaixa(1).iFilialEmpresa)
        If lErro <> SUCESSO Then gError 112150
         
    End If
         
    iIndice = 0
 
    For Each objCheque In colCheque
 
        iIndice = iIndice + 1
 
        For Each objMovCx In colMovimentosCaixa
 
            If objMovCx.iTipo = MOVIMENTOCAIXA_RECEB_CHEQUE And objMovCx.lNumRefInterna = objCheque.lSequencialCaixa Then
                objCheque.lNumMovtoCaixa = objMovCx.lNumMovto
                objCheque.iCaixa = objMovCx.iCaixa
                objCheque.dtDataEmissao = objMovCx.dtDataMovimento
                Exit For
            End If
 
        Next
 
        If objCheque.lNumMovtoCaixa = 0 Then gError 112151
 
        objCheque.lSequencialLoja = lSequencialLoja
 
        If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL_BACKOFFICE Then
 
            objCheque.lSequencialBack = lSequencialBack
            objCheque.lNumIntCheque = lNumIntCheque
 
            'insere novo registro na tabela de ChequesPre
            lErro = Comando_Executar(alComando(1), "INSERT INTO ChequePre(FilialEmpresa, NumIntCheque, Banco, Agencia, ContaCorrente, Numero, DataDeposito, Valor, CPFCGC, NumMovtoCaixa, Aprovado, NaoEspecificado, SequencialLoja, FilialEmpresaLoja, Caixa, SequencialCaixa, SequencialBack, Localizacao, DataEmissao, Arquivo, NumMovtoArq) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", objCheque.iFilialEmpresaLoja, objCheque.lNumIntCheque, objCheque.iBanco, objCheque.sAgencia, objCheque.sContaCorrente, objCheque.lNumero, objCheque.dtDataDeposito, objCheque.dValor, objCheque.sCPFCGC, objCheque.lNumMovtoCaixa, objCheque.iAprovado, objCheque.iNaoEspecificado, objCheque.lSequencialLoja, objCheque.iFilialEmpresaLoja, objCheque.iCaixa, objCheque.lSequencialCaixa, objCheque.lSequencialBack, CHEQUEPRE_LOCALIZACAO_CAIXA, objCheque.dtDataEmissao, sArquivo, lNumMovto)
            If lErro <> AD_SQL_SUCESSO Then gError 112779
 
        Else
 
            objCheque.lNumIntCheque = lNumIntCheque
 
            'insere novo registro na tabela de ChequesPre
            lErro = Comando_Executar(alComando(1), "INSERT INTO ChequePre(FilialEmpresa, NumIntCheque, Banco, Agencia, ContaCorrente, Numero, DataDeposito, Valor, CPFCGC, NumMovtoCaixa, Aprovado, NaoEspecificado, SequencialLoja, FilialEmpresaLoja, Caixa, SequencialCaixa, Localizacao, DataEmissao, Arquivo, NumMovtoArq) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", objCheque.iFilialEmpresaLoja, objCheque.lNumIntCheque, objCheque.iBanco, objCheque.sAgencia, objCheque.sContaCorrente, objCheque.lNumero, objCheque.dtDataDeposito, objCheque.dValor, objCheque.sCPFCGC, objCheque.lNumMovtoCaixa, objCheque.iAprovado, objCheque.iNaoEspecificado, objCheque.lSequencialLoja, objCheque.iFilialEmpresaLoja, objCheque.iCaixa, objCheque.lSequencialCaixa, CHEQUEPRE_LOCALIZACAO_CAIXA, objCheque.dtDataEmissao, sArquivo, lNumMovto)
            If lErro <> AD_SQL_SUCESSO Then gError 112152
 
        End If
 
        lSequencialLoja = lSequencialLoja + 1
        lNumIntCheque = lNumIntCheque + 1
 
        If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL_BACKOFFICE Then
 
            lSequencialBack = lSequencialBack + 1
 
        End If
 
    Next
    
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
        
        Call Mover_Dados_Cheque_Log1(colCheque, objLog)
    
    End If
 
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
 
    Cheque_Gravar_Venda = SUCESSO
 
    Exit Function
 
Erro_Cheque_Gravar_Venda:
 
    Cheque_Gravar_Venda = gErr
 
    Select Case gErr
 
        Case 112149
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
 
        Case 112150, 112777, 112778
        
        Case 112151
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVCAIXATROCA_NAO_ENCONTRADO", gErr)
 
        Case 112152, 112779
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CHEQUE", gErr, objCheque.lNumero)
 
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151098)
 
    End Select
 
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
 
    Exit Function
 
End Function

Private Sub Mover_Dados_Cheque_Log1(ByVal colCheque As Collection, ByVal objLog As ClassLog)
'Função que recebe os dados dos cheques e coloca em objLog

Dim vSequencialLoja As Variant
Dim sLog As String
Dim objCheque As ClassChequePre

On Error GoTo Erro_Mover_Dados_Cheque_Log1

    If objLog.colRegistro.Count > 0 Then
        sLog = objLog.colRegistro.Item(objLog.colRegistro.Count)
    Else
        sLog = ""
    End If

    For Each objCheque In colCheque

        'preenche sLog com cada atributo do objCheque separado por vbkeyscape
        With objCheque
            objLog.sLog = Chr(vbKeyControl) & CStr(.iBanco) & Chr(vbKeyEscape) & _
                          CStr(.sAgencia) & Chr(vbKeyEscape) & _
                          CStr(.sContaCorrente) & Chr(vbKeyEscape) & _
                          CStr(.lNumero) & Chr(vbKeyEscape) & _
                          CStr(.dtDataDeposito) & Chr(vbKeyEscape) & _
                          CStr(.dValor) & Chr(vbKeyEscape) & _
                          CStr(.sCPFCGC) & Chr(vbKeyEscape) & _
                          CStr(.lNumMovtoCaixa) & Chr(vbKeyEscape) & _
                          CStr(.iAprovado) & Chr(vbKeyEscape) & _
                          CStr(.iNaoEspecificado) & Chr(vbKeyEscape) & _
                          CStr(.lSequencialLoja) & Chr(vbKeyEscape) & _
                          CStr(.iCaixa) & Chr(vbKeyEscape) & _
                          CStr(.lSequencialCaixa) & Chr(vbKeyEscape) & _
                          CStr(.dtDataEmissao) & Chr(vbKeyEscape)
        End With

        Call Mover_Dados_Log(sLog, objLog)

    Next

    Exit Sub

Erro_Mover_Dados_Cheque_Log1:

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151099)

    End Select

    Exit Sub

End Sub

Function Troca_Gravar_Venda(ByVal colTroca As Collection, ByVal colMovimentosCaixa As Collection, objLog As ClassLog, ByVal objCupomFiscal As ClassCupomFiscal, ByVal objMovEstoque As ClassMovEstoque, ByVal sArquivo As String, ByVal lNumMovto As Long) As Long
'gravar os dados de troca associados ao cupom fiscal.

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer
Dim objTroca As ClassTroca
Dim lNumAuto As Long
Dim objMovCx As ClassMovimentoCaixa
Dim objProduto As New ClassProduto
Dim dQuantVenda As Double
Dim lCodigo As Long
Dim dQuantEstoque As Double
Dim colInsumos As Collection
Dim colRastroMovto As Collection
Dim sNomeReduzidoAlmox As String
Dim iAlmoxarifadoPadrao As Integer
Dim objItemMovEstoque As ClassItemMovEstoque
Dim dFator As Double
Dim colItensRomaneioGrade As New Collection
Dim objItensRomaneio As ClassItemRomaneioGrade
Dim objProduto1 As New ClassProduto
Dim objKitVenda As New ClassKitVenda

On Error GoTo Erro_Troca_Gravar_Venda

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 112153
    Next

    
    

    If colTroca.Count > 0 Then
        'gera um novo número interno de troca
        lErro = CF("Config_ObterNumInt", "LojaConfig", "NUM_PROX_TROCA", lNumAuto, colTroca.Count, objMovEstoque.iFilialEmpresa)
        If lErro <> SUCESSO Then gError 112154
    End If

    iIndice = 0

    For Each objTroca In colTroca

        iIndice = iIndice + 1

        objTroca.lNumIntDoc = lNumAuto

        For Each objMovCx In colMovimentosCaixa

            If objMovCx.iTipo = MOVIMENTOCAIXA_RECEB_TROCA And objMovCx.lNumRefInterna = iIndice Then
                
                objTroca.lNumMovtoCaixa = objMovCx.lNumMovto
                objTroca.iFilialEmpresa = objMovCx.iFilialEmpresa
                Exit For
            
            End If

        Next

        If objTroca.lNumMovtoCaixa = 0 Then gError 112155

        'insere novo registro na tabela de Troca
        lErro = Comando_Executar(alComando(1), "INSERT INTO Troca(NumIntDoc, FilialEmpresa, Produto, Quantidade, Valor, NumMovtoCaixa, Arquivo, NumMovtoArq) VALUES (?,?,?,?,?,?,?,?)", objTroca.lNumIntDoc, objTroca.iFilialEmpresa, objTroca.sCodProduto, objTroca.dQuantidade, objTroca.dValor, objTroca.lNumMovtoCaixa, sArquivo, lNumMovto)
        If lErro <> AD_SQL_SUCESSO Then gError 112156

        lNumAuto = lNumAuto + 1

        'insere os dados de troca no estoque
        objProduto.sCodigo = objTroca.sCodProduto

        'Lê na tabela de Produto a UM de venda
        lErro = CF("Produto_Le", objProduto)
        If lErro <> SUCESSO And lErro <> 28030 Then gError 126501

        'Se não encontrar o produto ==> Erro
        If lErro = 28030 Then gError 126502

        'Obtém fator de conversão para unidade de medida de Venda
        lErro = CF("UM_Conversao", objProduto.iClasseUM, objTroca.sUnidadeMed, objProduto.sSiglaUMVenda, dFator)
        If lErro <> SUCESSO Then gError 126503

        dQuantVenda = objTroca.dQuantidade * dFator
        
        'Obtém fator de conversão para unidade de medida de Venda
        lErro = CF("UM_Conversao", objProduto.iClasseUM, objTroca.sUnidadeMed, objProduto.sSiglaUMEstoque, dFator)
        If lErro <> SUCESSO Then gError 126504

        dQuantEstoque = objTroca.dQuantidade * dFator
        
        If objCupomFiscal.iTipo = OPTION_CF Or objCupomFiscal.iStatus = STATUS_BAIXADO Then
        
            'se estiver operando caixa central + backoffice ==> atualiza o estoque, caso contrario o backoffice vai atualizar
            If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL_BACKOFFICE Then
        
                If objProduto.iControleEstoque <> PRODUTO_CONTROLE_SEM_ESTOQUE Then
                    
                    Set colInsumos = New Collection
                    Set colRastroMovto = New Collection
                    
                    iAlmoxarifadoPadrao = 0
                    sNomeReduzidoAlmox = ""
                
                    lErro = CF("AlmoxarifadoPadrao_Le_CodNomeRed", objMovEstoque.iFilialEmpresa, objProduto.sCodigo, sNomeReduzidoAlmox, iAlmoxarifadoPadrao)
                    If lErro <> SUCESSO And lErro <> 118756 Then gError 126505
            
                    Set objItemMovEstoque = objMovEstoque.colItens.Add(0, MOV_EST_TROCA_VENDA_CUPOM_FISCAL, 0, 0, objProduto.sCodigo, objProduto.sDescricao, objProduto.sSiglaUMEstoque, dQuantEstoque, iAlmoxarifadoPadrao, sNomeReduzidoAlmox, objCupomFiscal.lNumIntDoc, "", 0, "", "", "", "", 0, colRastroMovto, colInsumos, DATA_NULA)
            
                    objItemMovEstoque.iClasseUM = objProduto.iClasseUM
                    objItemMovEstoque.iControleEstoque = objProduto.iControleEstoque
                    objItemMovEstoque.sSiglaUMEst = objProduto.sSiglaUMEstoque
                    objItemMovEstoque.iTipoNumIntDocOrigem = MOVEST_TIPONUMINTDOCORIGEM_CUPOMFISCAL
                    
                ElseIf objProduto.iKitVendaComp = MARCADO Then
                    
                    lErro = CF("ProdutoKitVenda_Le_Romaneio", objProduto, colItensRomaneioGrade)
                    If lErro <> SUCESSO Then gError 180035
                    
                    objKitVenda.sProduto = objProduto.sCodigo
                    objKitVenda.sUM = objTroca.sUnidadeMed
                    objKitVenda.dQuantidade = objTroca.dQuantidade
                    
                    lErro = CF("ProdutoKitVenda_Atualiza_Romaneio", objProduto, objKitVenda, colItensRomaneioGrade)
                    If lErro <> SUCESSO Then gError 180036
                    
                    For Each objItensRomaneio In colItensRomaneioGrade
                
                        objProduto1.sCodigo = objItensRomaneio.sProduto
                
                        'Lê na tabela de Produto a UM de venda
                        lErro = CF("Produto_Le", objProduto1)
                        If lErro <> SUCESSO And lErro <> 28030 Then gError 112122
                
                        If lErro <> SUCESSO Then gError 42765 'Não encontrou
                
                        If objProduto1.iControleEstoque <> PRODUTO_CONTROLE_SEM_ESTOQUE Then
                            Set colInsumos = New Collection
                            Set colRastroMovto = New Collection
                        
                            iAlmoxarifadoPadrao = 0
                            sNomeReduzidoAlmox = ""
                        
                            lErro = CF("AlmoxarifadoPadrao_Le_CodNomeRed", objMovEstoque.iFilialEmpresa, objProduto1.sCodigo, sNomeReduzidoAlmox, iAlmoxarifadoPadrao)
                            If lErro <> SUCESSO And lErro <> 118756 Then gError 118759
                
                            Set objItemMovEstoque = objMovEstoque.colItens.Add(0, MOV_EST_TROCA_VENDA_CUPOM_FISCAL, 0, 0, objProduto1.sCodigo, objProduto1.sDescricao, objProduto1.sSiglaUMEstoque, objItensRomaneio.dQuantidade, iAlmoxarifadoPadrao, sNomeReduzidoAlmox, objCupomFiscal.lNumIntDoc, "", 0, "", "", "", "", 0, colRastroMovto, colInsumos, DATA_NULA)
                
                            objItemMovEstoque.iClasseUM = objProduto1.iClasseUM
                            objItemMovEstoque.iControleEstoque = objProduto1.iControleEstoque
                            objItemMovEstoque.sSiglaUMEst = objProduto1.sSiglaUMEstoque
                            objItemMovEstoque.iTipoNumIntDocOrigem = MOVEST_TIPONUMINTDOCORIGEM_CUPOMFISCAL
                        
                        End If
                            
                    Next
                    
                End If
       
            End If

        End If

    Next

    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then

        Call Mover_Dados_Troca_Log(colTroca, objLog)

    End If

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Troca_Gravar_Venda = SUCESSO

    Exit Function

Erro_Troca_Gravar_Venda:

    Troca_Gravar_Venda = gErr

    Select Case gErr

        Case 112153
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 112154, 126501, 126503, 126504, 126505
        
        Case 112155
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVCAIXATROCA_NAO_ENCONTRADO", gErr)

        Case 112156
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_TROCA", gErr)
    
        Case 126502
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_NAO_CADASTRADO", gErr, objProduto.sCodigo)
    
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151100)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Sub Mover_Dados_Troca_Log(ByVal colTroca As Collection, ByVal objLog As ClassLog)
'Função que recebe os dados dos cheques e coloca em objLog

Dim vSequencialLoja As Variant
Dim sLog As String
Dim objTroca As ClassTroca

On Error GoTo Erro_Mover_Dados_Troca_Log

    If objLog.colRegistro.Count > 0 Then
        sLog = objLog.colRegistro.Item(objLog.colRegistro.Count)
    Else
        sLog = ""
    End If

    For Each objTroca In colTroca

        'preenche sLog com cada atributo do objCheque separado por vbkeyscape
        With objTroca
            objLog.sLog = Chr(vbKeyControl) & CStr(.lNumIntDoc) & Chr(vbKeyEscape) & _
                          CStr(.iFilialEmpresa) & Chr(vbKeyEscape) & _
                          CStr(.sCodProduto) & Chr(vbKeyEscape) & _
                          CStr(.dQuantidade) & Chr(vbKeyEscape) & _
                          CStr(.dValor) & Chr(vbKeyEscape) & _
                          CStr(.lNumMovtoCaixa) & Chr(vbKeyEscape) & _
                          CStr(.sUnidadeMed) & Chr(vbKeyEscape)
        End With

        Call Mover_Dados_Log(sLog, objLog)

    Next

    Exit Sub

Erro_Mover_Dados_Troca_Log:

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151101)

    End Select

    Exit Sub

End Sub

Function Vendas_Carne(iPosAtual As Integer, iPosFimAtual As Integer, ByVal colRegistro As Collection, ByVal iRegistroCol As Integer, ByVal objCarne As ClassCarne) As Long
'guarda as infos de carne se houverem

Dim objCarneParc As ClassCarneParcelas
Dim lErro As Long
Dim sRegistro As String
Dim iIndice As Integer

On Error GoTo Erro_Vendas_Carne
        
    sRegistro = colRegistro.Item(iRegistroCol)
'
    'pula o primeiro separator
    iPosAtual = iPosFimAtual + 1
    
    iPosFimAtual = iPosFimAtual + 1
    
    'se o proximo caracter nao for um separator ==> gravar carne
    If Mid(sRegistro, iPosAtual, 1) <> Chr(vbKeySeparator) Then

        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objCarne.dtDataReferencia = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objCarne.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objCarne.iStatus = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objCarne.lCliente = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objCarne.sAutorizacao = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)
    
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objCarne.sCodBarrasCarne = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)
    
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
        iPosAtual = iPosFimAtual
    
        'Se o proximo caracter apos o vbKeyShift nao for vbKeyControl ou vbKeySeparator ==> tem pagamento de carne envolvido
        If Mid(sRegistro, iPosAtual + 1, 1) <> Chr(vbKeyControl) Then
    
            For iIndice = iRegistroCol To colRegistro.Count
    
                sRegistro = colRegistro.Item(iIndice)
    
                Do While Mid(sRegistro, iPosAtual, 1) = Chr(vbKeyShift)
    
                    Set objCarneParc = New ClassCarneParcelas
    
                    objCarne.colParcelas.Add objCarneParc
    
                    iPosAtual = iPosFimAtual + 1
                    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                    objCarneParc.dtDataVencimento = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
                    iPosAtual = iPosFimAtual + 1
                    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                    objCarneParc.dValor = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
                    iPosAtual = iPosFimAtual + 1
                    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                    objCarneParc.iParcela = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
                    iPosAtual = iPosFimAtual + 1
                    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                    objCarneParc.iStatus = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
                    iPosAtual = iPosFimAtual + 2
                    iPosFimAtual = iPosFimAtual + 2
                    
                Loop
    
                'se saiu antes de terminar o registro ==> as infos do carne terminaram
                If iPosAtual <= Len(sRegistro) Then Exit For
    
                iPosAtual = 1
                iPosFimAtual = 1
    
            Next
    
            iRegistroCol = iIndice
    
        End If

    End If

    'pula o vbKeySeparator
    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = iPosFimAtual + 1

    Vendas_Carne = SUCESSO

    Exit Function

Erro_Vendas_Carne:

    Vendas_Carne = gErr

    Select Case gErr

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151102)

    End Select

    Exit Function

End Function


Function Vendas_Cupom(iPosAtual As Integer, iPosFimAtual As Integer, ByVal colRegistro As Collection, iRegistroCol As Integer, ByVal objCupomFiscal As ClassCupomFiscal) As Long
'guarda as infos de cupom

Dim sRegistro As String
Dim lErro As Long
Dim iIndiceFinal As Integer
Dim iPosKeyShift As Integer

On Error GoTo Erro_Vendas_Cupom
    
    sRegistro = colRegistro.Item(iRegistroCol)
        
    iIndiceFinal = colRegistro.Count
        
    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCupomFiscal.dtDataEmissao = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCupomFiscal.dHoraEmissao = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCupomFiscal.dValorAcrescimo = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCupomFiscal.dValorDesconto = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCupomFiscal.dValorProdutos = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCupomFiscal.dValorTotal = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCupomFiscal.iECF = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCupomFiscal.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCupomFiscal.iStatus = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCupomFiscal.iTabelaPreco = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCupomFiscal.lGerenteCancel = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCupomFiscal.lNumero = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCupomFiscal.lNumOrcamento = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCupomFiscal.iVendedor = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCupomFiscal.lCliente = StrParaLong(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCupomFiscal.sCPFCGC = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCupomFiscal.sNomeCliente = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCupomFiscal.sMotivoCancel = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCupomFiscal.sNaturezaOp = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)
    
    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCupomFiscal.lDuracao = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    
    If iPosFimAtual = 0 Then
        
        If iRegistroCol + 1 <= iIndiceFinal Then
                    
            iRegistroCol = iRegistroCol + 1
            sRegistro = colRegistro.Item(iRegistroCol)
            iPosAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyLButton)) + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                    
        End If
            
    End If
    
    
    If iPosFimAtual <> 0 Then
    
        objCupomFiscal.iCodCaixa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objCupomFiscal.lCOOCupomOrigDAV = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objCupomFiscal.sTipoECF = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)
    
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objCupomFiscal.sMarcaECF = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)
    
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objCupomFiscal.sModeloECF = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)
    
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objCupomFiscal.sNumSerieECF = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)
    
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objCupomFiscal.lCCF = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objCupomFiscal.lNumeroDAV = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objCupomFiscal.sCPFCGC1 = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)
    
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objCupomFiscal.sEndereco = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)
    
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objCupomFiscal.iSequencialECF = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objCupomFiscal.iSequencialECFOrigDAV = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objCupomFiscal.iDAVImpresso = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objCupomFiscal.dtDataReducao = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    
        If iPosFimAtual = 0 Then
        
            If iRegistroCol + 1 <= iIndiceFinal Then
                    
                    iRegistroCol = iRegistroCol + 1
                    sRegistro = colRegistro.Item(iRegistroCol)
                    iPosAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyLButton)) + 1
                    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                    
            End If
            
        End If
    
    
        iPosKeyShift = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
        If iPosKeyShift = 0 Then iPosKeyShift = 501
                    
    
        If iPosFimAtual <> 0 And iPosFimAtual < iPosKeyShift Then
        
            objCupomFiscal.sNFeChaveAcesso = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)
    
            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objCupomFiscal.sNFeArqXml = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)
        
            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        
            If iPosFimAtual = 0 Then
            
                If iRegistroCol + 1 <= iIndiceFinal Then
                        
                        iRegistroCol = iRegistroCol + 1
                        sRegistro = colRegistro.Item(iRegistroCol)
                        iPosAtual = 1
                        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                        
                End If

            End If

            iPosKeyShift = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
            If iPosKeyShift = 0 Then iPosKeyShift = 501
        
            If iPosFimAtual <> 0 And iPosFimAtual < iPosKeyShift Then
            
                objCupomFiscal.objNF.sSerie = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)
        
                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objCupomFiscal.objNF.lNumNotaFiscal = StrParaLong(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objCupomFiscal.objNF.dtDataEmissao = StrParaDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objCupomFiscal.objNF.sDestino = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)
        
            End If
        
        End If

        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
        iPosAtual = iPosFimAtual


    End If




    'guarda as infos dos itens do cupom
    lErro = CF("Vendas_ItensCF", iPosAtual, iPosFimAtual, colRegistro, iRegistroCol, objCupomFiscal)
    If lErro <> SUCESSO Then gError 112157

    Vendas_Cupom = SUCESSO

    Exit Function

Erro_Vendas_Cupom:

    Vendas_Cupom = gErr

    Select Case gErr
        
        Case 112157
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151103)

    End Select

    Exit Function

End Function

Function Vendas_ItensCF(iPosAtual As Integer, iPosFimAtual As Integer, ByVal colRegistro As Collection, iRegistroCol As Integer, ByVal objCupomFiscal As ClassCupomFiscal) As Long
'guarda as infos dos itens do cupom

Dim objItens As ClassItemCupomFiscal
Dim lErro As Long
Dim sRegistro As String
Dim iIndiceFinal As Integer
Dim iPosKeyControl As Integer
Dim iPosKeySeparator As Integer
Dim iPosKeyShift As Integer
Dim iPosFimAtual1 As Integer

On Error GoTo Erro_Vendas_ItensCF
  
    iIndiceFinal = colRegistro.Count
  
    sRegistro = colRegistro.Item(iRegistroCol)

    If iPosFimAtual = 0 Then
    
        If iRegistroCol + 1 <= iIndiceFinal Then
                
                iRegistroCol = iRegistroCol + 1
                sRegistro = colRegistro.Item(iRegistroCol)
                iPosAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyLButton))
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
                iPosAtual = iPosFimAtual
                
        End If
        
    End If

    'Se o proximo caracter apos o vbKeyShift nao for vbKeyControl ou vbKeySeparator ==> tem itens de cupom envolvidos
    If Mid(sRegistro, iPosAtual + 1, 1) <> Chr(vbKeyControl) And Mid(sRegistro, iPosAtual + 1, 1) <> Chr(vbKeySeparator) Then

'        For iIndice = iRegistroCol To colRegistro.Count

        Do While iRegistroCol <= iIndiceFinal


            Do While Mid(sRegistro, iPosAtual, 1) = Chr(vbKeyShift)

                Set objItens = New ClassItemCupomFiscal

                objCupomFiscal.colItens.Add objItens

                objItens.iFilialEmpresa = objCupomFiscal.iFilialEmpresa

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objItens.dAliquotaICMS = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objItens.dPercDesc = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objItens.dPrecoUnitario = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objItens.dQuantidade = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objItens.dValorDesconto = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objItens.iStatus = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objItens.sProduto = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objItens.sUnidadeMed = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)
                
                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objItens.sSituacaoTrib = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)
                
                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objItens.iCodCaixa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                
                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objItens.iItem = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                              
                iPosFimAtual1 = InStr(iPosFimAtual + 1, sRegistro, Chr(vbKeyEscape))
                
                                
                If iPosFimAtual1 = 0 Then
                    
                        If iRegistroCol + 1 <= iIndiceFinal Then
                                
                                iRegistroCol = iRegistroCol + 1
                                sRegistro = colRegistro.Item(iRegistroCol)
                                iPosAtual = 1
                                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyLButton))
                                iPosFimAtual1 = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                                
                        End If
                        
                End If

                iPosKeyShift = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
                If iPosKeyShift = 0 Then iPosKeyShift = 501
                
                iPosKeyControl = InStr(iPosAtual, sRegistro, Chr(vbKeyControl))
                If iPosKeyControl = 0 Then iPosKeyControl = 501
                
                iPosKeySeparator = InStr(iPosAtual, sRegistro, Chr(vbKeySeparator))
                If iPosKeySeparator = 0 Then iPosKeySeparator = 501
                
                If iPosFimAtual1 <> 0 And iPosFimAtual1 < iPosKeyControl And iPosFimAtual1 < iPosKeySeparator And iPosFimAtual1 < iPosKeyShift Then
                
                    iPosAtual = iPosFimAtual + 1
                    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                    objItens.objTributacaoDocItem.dQuantidade = StrParaDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                    
                    iPosAtual = iPosFimAtual + 1
                    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                    objItens.objTributacaoDocItem.dPrecoUnitario = StrParaDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                    
                    iPosAtual = iPosFimAtual + 1
                    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                    objItens.objTributacaoDocItem.sNaturezaOp = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)
                    
                    iPosAtual = iPosFimAtual + 1
                    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                    objItens.objTributacaoDocItem.iTipoTributacao = StrParaInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                    
                    iPosAtual = iPosFimAtual + 1
                    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                    objItens.objTributacaoDocItem.iICMSTipo = StrParaInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                    
                    iPosAtual = iPosFimAtual + 1
                    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                    objItens.objTributacaoDocItem.dICMSBase = StrParaDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                    
                    iPosAtual = iPosFimAtual + 1
                    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                    objItens.objTributacaoDocItem.dICMSPercRedBase = StrParaDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                    
                    iPosAtual = iPosFimAtual + 1
                    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                    objItens.objTributacaoDocItem.dICMSAliquota = StrParaDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                    
                    iPosAtual = iPosFimAtual + 1
                    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                    objItens.objTributacaoDocItem.dICMSValor = StrParaDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                    
                    iPosAtual = iPosFimAtual + 1
                    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                    objItens.objTributacaoDocItem.iPISTipo = StrParaInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                    
                    iPosAtual = iPosFimAtual + 1
                    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                    objItens.objTributacaoDocItem.iPISTipoCalculo = StrParaInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                    
                    iPosAtual = iPosFimAtual + 1
                    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                    objItens.objTributacaoDocItem.dPISBase = StrParaDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                    
                    iPosAtual = iPosFimAtual + 1
                    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                    objItens.objTributacaoDocItem.dPISAliquota = StrParaDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                
                    iPosAtual = iPosFimAtual + 1
                    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                    objItens.objTributacaoDocItem.dPISAliquotaValor = StrParaDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                
                    iPosAtual = iPosFimAtual + 1
                    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                    objItens.objTributacaoDocItem.dPISQtde = StrParaDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                
                    iPosAtual = iPosFimAtual + 1
                    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                    objItens.objTributacaoDocItem.dPISValor = StrParaDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                
                    iPosAtual = iPosFimAtual + 1
                    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                    objItens.objTributacaoDocItem.iPISSTTipoCalculo = StrParaInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                    
                    iPosAtual = iPosFimAtual + 1
                    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                    objItens.objTributacaoDocItem.dPISSTBase = StrParaDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                    
                    iPosAtual = iPosFimAtual + 1
                    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                    objItens.objTributacaoDocItem.dPISSTAliquota = StrParaDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                
                    iPosAtual = iPosFimAtual + 1
                    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                    objItens.objTributacaoDocItem.dPISSTAliquotaValor = StrParaDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                
                    iPosAtual = iPosFimAtual + 1
                    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                    objItens.objTributacaoDocItem.dPISSTQtde = StrParaDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                
                    iPosAtual = iPosFimAtual + 1
                    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                    objItens.objTributacaoDocItem.dPISSTValor = StrParaDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                
                
                    iPosAtual = iPosFimAtual + 1
                    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                    objItens.objTributacaoDocItem.iCOFINSTipo = StrParaInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                    
                    iPosAtual = iPosFimAtual + 1
                    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                    objItens.objTributacaoDocItem.iCOFINSTipoCalculo = StrParaInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                    
                    iPosAtual = iPosFimAtual + 1
                    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                    objItens.objTributacaoDocItem.dCOFINSBase = StrParaDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                    
                    iPosAtual = iPosFimAtual + 1
                    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                    objItens.objTributacaoDocItem.dCOFINSAliquota = StrParaDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                
                    iPosAtual = iPosFimAtual + 1
                    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                    objItens.objTributacaoDocItem.dCOFINSAliquotaValor = StrParaDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                
                    iPosAtual = iPosFimAtual + 1
                    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                    objItens.objTributacaoDocItem.dCOFINSQtde = StrParaDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                
                    iPosAtual = iPosFimAtual + 1
                    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                    objItens.objTributacaoDocItem.dCOFINSValor = StrParaDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                
                    iPosAtual = iPosFimAtual + 1
                    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                    objItens.objTributacaoDocItem.iCOFINSSTTipoCalculo = StrParaInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                    
                    iPosFimAtual1 = InStr(iPosFimAtual + 1, sRegistro, Chr(vbKeyEscape))
                    
                    If iPosFimAtual1 = 0 Then
                        
                            If iRegistroCol + 1 <= iIndiceFinal Then
                                    
                                    iRegistroCol = iRegistroCol + 1
                                    sRegistro = colRegistro.Item(iRegistroCol)
                                    iPosAtual = 1
                                    iPosFimAtual1 = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                                    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyLButton))

                                    
                            End If
                            
                    End If
                    
                    
                    If iPosFimAtual1 <> 0 Then
                    
                        iPosAtual = iPosFimAtual + 1
                        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                        objItens.objTributacaoDocItem.dCOFINSSTBase = StrParaDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                        
                        iPosAtual = iPosFimAtual + 1
                        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                        objItens.objTributacaoDocItem.dCOFINSSTAliquota = StrParaDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                    
                        iPosAtual = iPosFimAtual + 1
                        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                        objItens.objTributacaoDocItem.dCOFINSSTAliquotaValor = StrParaDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                    
                        iPosAtual = iPosFimAtual + 1
                        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                        objItens.objTributacaoDocItem.dCOFINSSTQtde = StrParaDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                    
                        iPosAtual = iPosFimAtual + 1
                        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                        objItens.objTributacaoDocItem.dCOFINSSTValor = StrParaDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                    
                    
                        iPosAtual = iPosFimAtual + 1
                        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                        objItens.objTributacaoDocItem.sCST = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)
                    
                        iPosAtual = iPosFimAtual + 1
                        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                        objItens.objTributacaoDocItem.sISSQN = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)
                    
                        iPosAtual = iPosFimAtual + 1
                        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                        objItens.objTributacaoDocItem.dISSBase = StrParaDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                    
                        iPosAtual = iPosFimAtual + 1
                        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                        objItens.objTributacaoDocItem.dISSAliquota = StrParaDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                    
                        iPosAtual = iPosFimAtual + 1
                        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                        objItens.objTributacaoDocItem.sISSCidadeIBGE = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)
                    
                        iPosAtual = iPosFimAtual + 1
                        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                        objItens.objTributacaoDocItem.dISSValor = StrParaDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                    
                        iPosAtual = iPosFimAtual + 1
                        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                        objItens.objTributacaoDocItem.iICMSBaseModalidade = StrParaInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                    
                        iPosAtual = iPosFimAtual + 1
                        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                        objItens.objTributacaoDocItem.iOrigemMercadoria = StrParaInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                    
                        iPosAtual = iPosFimAtual + 1
                        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                        objItens.objTributacaoDocItem.sGenero = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)
                    
                        iPosAtual = iPosFimAtual + 1
                        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                        objItens.objTributacaoDocItem.dQtdTrib = StrParaDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                    
                        iPosAtual = iPosFimAtual + 1
                        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                        objItens.objTributacaoDocItem.sUMTrib = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)
                    
                        iPosAtual = iPosFimAtual + 1
                        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                        objItens.objTributacaoDocItem.dValorUnitTrib = StrParaDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                    
                        iPosAtual = iPosFimAtual + 1
                        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                        objItens.objTributacaoDocItem.sISSCST = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)
                    
                        iPosAtual = iPosFimAtual + 1
                        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                        objItens.objTributacaoDocItem.dICMSValorIsento = StrParaInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                    
                        iPosAtual = iPosFimAtual + 1
                        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                        objItens.objTributacaoDocItem.iICMSMotivo = StrParaInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                    
                        iPosAtual = iPosFimAtual + 1
                        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                        objItens.objTributacaoDocItem.iICMSSimplesTipo = StrParaInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                    
                        iPosAtual = iPosFimAtual + 1
                        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                        objItens.objTributacaoDocItem.iISSTipo = StrParaInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                    
                        iPosAtual = iPosFimAtual + 1
                        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                        objItens.objTributacaoDocItem.iRegimeTributario = StrParaInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                    
                        iPosAtual = iPosFimAtual + 1
                        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                        objItens.objTributacaoDocItem.sCSOSN = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)
                        
                        
                        iPosAtual = iPosFimAtual + 1
                        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                        objItens.objTributacaoDocItem.dTotTrib = StrParaDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                    
                        iPosAtual = iPosFimAtual + 1
                        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                        objItens.objTributacaoDocItem.iTotTribTipo = StrParaInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                        
                    Else
                    
 '                       iPosFimAtual = iPosAtual
                        
                    End If
                    
                    
                Else
            
'                    iPosFimAtual = iPosAtual
                    
                End If
                
                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = iPosFimAtual + 1
                
            Loop

            'se nao esta no final do registro significa que nao encontrou mais itens e pode sair do loop de itens e procurar os movimentos de caixa
            If iPosAtual <= Len(sRegistro) Then Exit Do

            'se esta no final do registro ==> pega o proximo e pula os caracteres iniciais

            iRegistroCol = iRegistroCol + 1
            sRegistro = colRegistro.Item(iRegistroCol)

            iPosAtual = InStr(1, sRegistro, Chr(vbKeyLButton)) + 1
            iPosFimAtual = InStr(1, sRegistro, Chr(vbKeyLButton)) + 1


        Loop
'        Next

    Else
    
        iPosAtual = iPosAtual + 1

    End If

    Vendas_ItensCF = SUCESSO

    Exit Function

Erro_Vendas_ItensCF:

    Vendas_ItensCF = gErr

    Select Case gErr

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151104)

    End Select

    Exit Function

End Function

Function Vendas_Movcx(iPosAtual As Integer, iPosFimAtual As Integer, ByVal colRegistro As Collection, iRegistroCol As Integer, ByVal colMovCx As Collection) As Long
'guarda as infos de movimento de caixa

Dim lErro As Long
Dim objMovCx As ClassMovimentoCaixa
Dim sRegistro As String
Dim iIndice As Integer
Dim iPosAux As Integer
Dim iPosAux1 As Integer

On Error GoTo Erro_Vendas_Movcx

    sRegistro = colRegistro.Item(iRegistroCol)

    'Se o proximo caracter for o vbKeyControl ==> tem movimentos de caixa envolvidos
    If Mid(sRegistro, iPosAtual, 1) = Chr(vbKeyControl) Then

        'For iIndice = iRegistroCol To colRegistro.Count
        Do While iRegistroCol <= colRegistro.Count
        
'            sRegistro = colRegistro.Item(iIndice)

            Do While Mid(sRegistro, iPosAtual, 1) = Chr(vbKeyControl)
                
                Set objMovCx = New ClassMovimentoCaixa
                
                colMovCx.Add objMovCx
                
                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objMovCx.dHora = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objMovCx.dtDataMovimento = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objMovCx.dValor = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objMovCx.iAdmMeioPagto = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objMovCx.iCaixa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objMovCx.iCodConta = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objMovCx.iCodOperador = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objMovCx.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objMovCx.iGerente = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objMovCx.iParcelamento = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objMovCx.iTipo = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objMovCx.iTipoCartao = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objMovCx.lCupomFiscal = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objMovCx.lNumero = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objMovCx.lNumRefInterna = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objMovCx.lSequencial = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objMovCx.sFavorecido = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objMovCx.sHistorico = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)


                iPosAux = InStr(iPosFimAtual + 1, sRegistro, Chr(vbKeySeparator))
                iPosAux1 = InStr(iPosFimAtual + 1, sRegistro, Chr(vbKeyEscape))
                
                If (iPosAux1 <> 0 And iPosAux1 < iPosAux) Or (iPosAux1 <> 0 And iPosAux = 0) Then
               
                    iPosAtual = iPosFimAtual + 1
                    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                    objMovCx.dtDataPreDatado = StrParaDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
                    iPosAux = InStr(iPosFimAtual + 1, sRegistro, Chr(vbKeySeparator))
                    iPosAux1 = InStr(iPosFimAtual + 1, sRegistro, Chr(vbKeyEscape))
                    
                    If (iPosAux1 <> 0 And iPosAux1 < iPosAux) Or (iPosAux1 <> 0 And iPosAux = 0) Then
                    
                        iPosAtual = iPosFimAtual + 1
                        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                        objMovCx.sAutorizacao = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)
                        
                    End If

                End If

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = iPosFimAtual + 1
                
            Loop

            If iPosAtual <= Len(sRegistro) Then Exit Do

'            iPosAtual = 1
'            iPosFimAtual = 1

            iRegistroCol = iRegistroCol + 1
            sRegistro = colRegistro.Item(iRegistroCol)

            iPosAtual = InStr(1, sRegistro, Chr(vbKeyLButton)) + 1
            iPosFimAtual = InStr(1, sRegistro, Chr(vbKeyLButton)) + 1


        Loop

'        iRegistroCol = iIndice

    End If

    'pula o vbKeySeparator
    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = iPosFimAtual + 1

    Vendas_Movcx = SUCESSO

    Exit Function

Erro_Vendas_Movcx:

    Vendas_Movcx = gErr

    Select Case gErr

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151105)

    End Select

    Exit Function

End Function

Function Vendas_Cheque(iPosAtual As Integer, iPosFimAtual As Integer, ByVal colRegistro As Collection, iRegistroCol As Integer, ByVal colCheque As Collection) As Long
'guarda as infos de movimento de cheque

Dim lErro As Long
Dim objCheque As ClassChequePre
Dim sRegistro As String

On Error GoTo Erro_Vendas_Cheque

    sRegistro = colRegistro.Item(iRegistroCol)

    'Se o proximo caracter for o vbKeyControl ==> tem movimentos de caixa envolvidos
    If Mid(sRegistro, iPosAtual, 1) = Chr(vbKeyControl) Then

        Do While iRegistroCol <= colRegistro.Count


            Do While Mid(sRegistro, iPosAtual, 1) = Chr(vbKeyControl)
    
                Set objCheque = New ClassChequePre
    
                colCheque.Add objCheque
    
                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objCheque.dtDataDeposito = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objCheque.dValor = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objCheque.iAprovado = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objCheque.iBanco = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objCheque.iFilialEmpresaLoja = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objCheque.iNaoEspecificado = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objCheque.lNumero = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objCheque.sAgencia = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)
    
                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objCheque.sContaCorrente = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)
    
                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objCheque.sCPFCGC = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)
    
                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objCheque.lSequencialCaixa = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = iPosFimAtual + 1
    
            Loop

            If iPosAtual <= Len(sRegistro) Then Exit Do
    
            iRegistroCol = iRegistroCol + 1
            sRegistro = colRegistro.Item(iRegistroCol)
    
            iPosAtual = InStr(1, sRegistro, Chr(vbKeyLButton)) + 1
            iPosFimAtual = InStr(1, sRegistro, Chr(vbKeyLButton)) + 1
    
        Loop

    End If

    'pula o vbKeySeparator
    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = iPosFimAtual + 1

    Vendas_Cheque = SUCESSO

    Exit Function

Erro_Vendas_Cheque:

    Vendas_Cheque = gErr

    Select Case gErr

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151106)

    End Select

    Exit Function

End Function

Function Vendas_Troca(iPosAtual As Integer, iPosFimAtual As Integer, ByVal colRegistro As Collection, iRegistroCol As Integer, ByVal colTroca As Collection) As Long
'guarda as infos de troca se houverem

Dim lErro As Long
Dim objTroca As ClassTroca
Dim iIndice As Integer
Dim sRegistro As String

On Error GoTo Erro_Vendas_Troca
    
    sRegistro = colRegistro.Item(iRegistroCol)

    'Se o proximo caracter for o vbKeyControl ==> tem movimentos de caixa envolvidos
    If Mid(sRegistro, iPosAtual, 1) = Chr(vbKeyControl) Then

        Do While iRegistroCol <= colRegistro.Count
        
            Do While Mid(sRegistro, iPosAtual, 1) = Chr(vbKeyControl)
    
                Set objTroca = New ClassTroca
    
                colTroca.Add objTroca
                            
                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objTroca.dQuantidade = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objTroca.dValor = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objTroca.sProduto = CStr(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objTroca.sCodProduto = CStr(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objTroca.sUnidadeMed = CStr(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = iPosFimAtual + 1
            Loop
    
            If iPosAtual <= Len(sRegistro) Then Exit Do
    
            iRegistroCol = iRegistroCol + 1
            sRegistro = colRegistro.Item(iRegistroCol)
    
            iPosAtual = InStr(1, sRegistro, Chr(vbKeyLButton)) + 1
            iPosFimAtual = InStr(1, sRegistro, Chr(vbKeyLButton)) + 1
    
        Loop

    End If

    Vendas_Troca = SUCESSO

    Exit Function

Erro_Vendas_Troca:

    Vendas_Troca = gErr

    Select Case gErr

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151107)

    End Select

    Exit Function

End Function

Function Registro_ECF_MovcxDin(ByVal colRegistro As Collection, ByVal sArquivo As String, ByVal iRegistro As Integer) As Long
'Trata o registro de movimentacao de dinheiro e coloca os dados no bd do caixa central. sArquivo contem o nome do arquivo em que sRegistro foi lido.
'iRegistro é o numero do registro.

Dim objMovCx As New ClassMovimentoCaixa
Dim lErro As Long
Dim iPosKeyLButton As Integer

On Error GoTo Erro_Registro_ECF_MovcxDin

    'guarda as infos de movimento de caixa
    lErro = CF("MovcxDin_Movcx", colRegistro, objMovCx)
    If lErro <> SUCESSO Then gError 112158
    
    iPosKeyLButton = InStr(colRegistro.Item(1), Chr(vbKeyLButton))

    If iPosKeyLButton <> 0 Then

        objMovCx.lNumMovtoArq = CLng(left(colRegistro.Item(1), iPosKeyLButton - 1))

    End If

    
    objMovCx.sArquivo = sArquivo
    
    lErro = Verifica_Existencia_Sequencial(objMovCx.lSequencial, objMovCx.iCaixa, objMovCx.iFilialEmpresa)
    If lErro <> SUCESSO And lErro <> 112627 Then gError 112628
    
    If lErro <> 112627 Then
    
        If objMovCx.iTipo = MOVIMENTOCAIXA_SANGRIA_DINHEIRO Then
    
            lErro = CF("MovimentosCaixa_Gravar_MovcxDin_Sang", objMovCx)
            If lErro <> SUCESSO Then gError 112159
        
        ElseIf objMovCx.iTipo = MOVIMENTOCAIXA_SUPRIMENTO_DINHEIRO Then
    
            lErro = CF("MovimentosCaixa_Gravar_MovcxDin_Sup", objMovCx)
            If lErro <> SUCESSO Then gError 112159
    
        ElseIf objMovCx.iTipo = MOVIMENTOCAIXA_EXCLUSAO_SANGRIA_DINHEIRO Then
    
            lErro = CF("MovimentosCaixa_Excluir_MovcxDin_Sang", objMovCx)
            If lErro <> SUCESSO Then gError 112533
        
        ElseIf objMovCx.iTipo = MOVIMENTOCAIXA_EXCLUSAO_SUPRIMENTO_DINHEIRO Then
    
            lErro = CF("MovimentosCaixa_Excluir_MovcxDin_Sup", objMovCx)
            If lErro <> SUCESSO Then gError 118018
        End If
        
    End If

    Registro_ECF_MovcxDin = SUCESSO

    Exit Function

Erro_Registro_ECF_MovcxDin:

    Registro_ECF_MovcxDin = gErr

    Select Case gErr

        Case 112158 To 112160, 112533, 112628, 118018


        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151108)

    End Select

    Exit Function

End Function

Function MovcxDin_Movcx(ByVal colRegistro As Collection, ByVal objMovCx As ClassMovimentoCaixa) As Long
'guarda as infos de movimento de caixa

Dim lErro As Long
Dim iPosAtual As Integer
Dim iPosFimAtual As Integer
Dim sRegistro As String

On Error GoTo Erro_MovcxDin_Movcx
 
    sRegistro = colRegistro(1)
 
    iPosFimAtual = InStr(sRegistro, Chr(vbKeyControl))
 
    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iTipo = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dHora = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dtDataMovimento = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iGerente = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iCodOperador = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.lSequencial = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dValor = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iAdmMeioPagto = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iParcelamento = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iCaixa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.lNumMovto = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
    MovcxDin_Movcx = SUCESSO

    Exit Function

Erro_MovcxDin_Movcx:

    MovcxDin_Movcx = gErr

    Select Case gErr

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151109)

    End Select

    Exit Function

End Function

Function MovimentosCaixa_Gravar_MovcxDin_Sang(ByVal objMovCx As ClassMovimentoCaixa) As Long
'gravar o movimento de caixa
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer
Dim objCCMovDia As New ClassCCMovDia
Dim objTipoMeioPagtoLojaFilial As New ClassTMPLojaFilial
Dim objLog As New ClassLog
Dim iTipo As Integer
Dim iCaixa As Integer
Dim lNumAuto As Long
Dim lSeq As Long


On Error GoTo Erro_MovimentosCaixa_Gravar_MovcxDin_Sang

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 110032
    Next

    'reserva um conjunto de numeros internos de movimento de caixa
    lErro = CF("Config_ObterNumInt", "LojaConfig", "NUM_PROX_MOVCAIXACENTRAL", lNumAuto, 2, objMovCx.iFilialEmpresa)
    If lErro <> SUCESSO Then gError 110033
    
    objMovCx.lNumRefInterna = objMovCx.lNumMovto
    objMovCx.lNumMovto = lNumAuto

    'preenche o objLog com o movimento do caixa
    Call Mover_Dados_MovcxDin_Log(objMovCx, objLog)
    
    'diz o tipo de operação a ser logada
    objLog.iOperacao = SANGRIA_DINHEIRO
    
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
        'grava o log
        lErro = CF("Log_Grava", objLog, objLog.colRegistro)
        If lErro <> SUCESSO Then gError 110043
    End If
    
    objMovCx.lNumIntDocLog = objLog.lNumIntDoc
    objMovCx.iQuantLog = objLog.iQuantLog
    
    'insere novo registro na tabela de MovimentosCaixa referente a saida de dinheiro do caixa
    lErro = Comando_Executar(alComando(1), "INSERT INTO MovimentosCaixa(FilialEmpresa, NumMovto, Caixa, Operador, Sequencial, Tipo, AdmMeioPagto, Parcelamento, DataMovimento, Valor, Gerente, Hora, NumIntDocLog, QuantLog, NumRefInterna, Arquivo, NumMovtoArq ) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", objMovCx.iFilialEmpresa, objMovCx.lNumMovto, objMovCx.iCaixa, objMovCx.iCodOperador, objMovCx.lSequencial, objMovCx.iTipo, objMovCx.iAdmMeioPagto, objMovCx.iParcelamento, objMovCx.dtDataMovimento, objMovCx.dValor, objMovCx.iGerente, objMovCx.dHora, objMovCx.lNumIntDocLog, objMovCx.iQuantLog, objMovCx.lNumRefInterna, objMovCx.sArquivo, objMovCx.lNumMovtoArq)
    If lErro <> AD_SQL_SUCESSO Then gError 110034
    
    'preenche um objccmovdia com os dados do movimento de saque do caixa
    lErro = CF("Mover_Dados_Saque_CCMovDia", objMovCx, objCCMovDia)
    If lErro <> SUCESSO Then gError 110035

    objCCMovDia.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_DINHEIRO

    'adiciona o mesmo no consolidado diário
    lErro = CF("CCMovDia_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 110036

    'adiciona o mesmo no consolidado anual no mês em questão
    lErro = CF("CCMov_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 110037

    objMovCx.lNumRefInterna = objMovCx.lNumMovto
    objMovCx.iCaixa = CODIGO_CAIXA_CENTRAL
    objMovCx.lNumMovto = lNumAuto + 1
    objMovCx.iTipo = MOVIMENTOCAIXA_ENT_SANGRIA_DINHEIRO

    lErro = CF("Caixa_Sequencial_EmTrans", CODIGO_CAIXA_CENTRAL, objMovCx.iFilialEmpresa, lSeq)
    If lErro <> SUCESSO Then gError 111603

    objMovCx.lSequencial = lSeq

    'insere novo registro na tabela de MovimentosCaixa referente a entrada de dinheiro no caixa central
    lErro = Comando_Executar(alComando(1), "INSERT INTO MovimentosCaixa(FilialEmpresa, NumMovto, Caixa, Operador, Sequencial, Tipo, AdmMeioPagto, Parcelamento, DataMovimento, Valor, Gerente, Hora, NumIntDocLog, QuantLog, NumRefInterna, Arquivo, NumMovtoArq ) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", objMovCx.iFilialEmpresa, objMovCx.lNumMovto, objMovCx.iCaixa, objMovCx.iCodOperador, objMovCx.lSequencial, objMovCx.iTipo, objMovCx.iAdmMeioPagto, objMovCx.iParcelamento, objMovCx.dtDataMovimento, objMovCx.dValor, objMovCx.iGerente, objMovCx.dHora, objMovCx.lNumIntDocLog, objMovCx.iQuantLog, objMovCx.lNumRefInterna, objMovCx.sArquivo, objMovCx.lNumMovtoArq)
    If lErro <> AD_SQL_SUCESSO Then gError 110038

    Set objCCMovDia = New ClassCCMovDia
    
    'preenche um objccmovdia com os dados do movimento de deposito no caixa central
    lErro = Mover_Dados_Deposito_CCMovDia(objMovCx, objCCMovDia)
    If lErro <> SUCESSO Then gError 110039

    objCCMovDia.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_DINHEIRO

    'adiciona o mesmo no consolidado diário
    lErro = CF("CCMovDia_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 110040

    'adiciona o mesmo no consolidado anual no mês em questão
    lErro = CF("CCMov_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 110041

    objTipoMeioPagtoLojaFilial.dSaldo = objMovCx.dValor
    objTipoMeioPagtoLojaFilial.iFilialEmpresa = objMovCx.iFilialEmpresa

    'mover Meio_pagamento_Dineiro para objtipomeiopagtoloja.itipo
    objTipoMeioPagtoLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_DINHEIRO

    'altera o saldo atual na tabela de tipomeiopagtoloja
    lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTipoMeioPagtoLojaFilial)
    If lErro <> SUCESSO Then gError 110042

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    MovimentosCaixa_Gravar_MovcxDin_Sang = SUCESSO

    Exit Function

Erro_MovimentosCaixa_Gravar_MovcxDin_Sang:

    MovimentosCaixa_Gravar_MovcxDin_Sang = gErr

    Select Case gErr

        Case 110032
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 110033, 111603

        Case 110034, 110038
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MOVCAIXA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa, objMovCx.lSequencial)

        Case 110035, 110036, 110037, 110039, 110040, 110041, 110042, 110043

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151110)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function MovimentosCaixa_Excluir_MovcxDin_Sang(ByVal objMovCx As ClassMovimentoCaixa) As Long
'excluir o movimento de caixa
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lErro As Long
Dim alComando(1 To 4) As Long
Dim iIndice As Integer
Dim objCCMovDia As New ClassCCMovDia
Dim objTipoMeioPagtoLojaFilial As New ClassTMPLojaFilial
Dim objLog As New ClassLog
Dim lCodigoCaixa As Long
Dim tMovCx As typeMovimentoCaixa

On Error GoTo Erro_MovimentosCaixa_Excluir_MovcxDin_Sang

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 112161
    Next

    'selecionar os registros da tabela de MovimentosCaixa referente a saida de dinheiro do caixa que está sendo excluida
    lErro = Comando_ExecutarPos(alComando(1), "SELECT NumMovto, Tipo, AdmMeioPagto, Parcelamento, DataMovimento, Valor, NumIntDocLog, QuantLog  FROM MovimentosCaixa WHERE FilialEmpresa = ? AND Caixa = ? AND NumRefInterna = ? AND Tipo = ? AND Valor = ?", 0, tMovCx.lNumMovto, tMovCx.iTipo, tMovCx.iAdmMeioPagto, tMovCx.iParcelamento, tMovCx.dtDataMovimento, tMovCx.dValor, tMovCx.lNumIntDocLog, tMovCx.iQuantLog, objMovCx.iFilialEmpresa, objMovCx.iCaixa, objMovCx.lNumMovto, MOVIMENTOCAIXA_SANGRIA_DINHEIRO, objMovCx.dValor)
    If lErro <> AD_SQL_SUCESSO Then gError 112162

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112179

    If lErro = AD_SQL_SEM_DADOS Then gError 112163

    objMovCx.iTipo = tMovCx.iTipo
    objMovCx.iAdmMeioPagto = tMovCx.iAdmMeioPagto
    objMovCx.iParcelamento = tMovCx.iParcelamento
    objMovCx.dtDataMovimento = tMovCx.dtDataMovimento
    objMovCx.dValor = tMovCx.dValor
    objMovCx.lNumMovto = tMovCx.lNumMovto

    If objMovCx.iTipo <> MOVIMENTOCAIXA_SANGRIA_DINHEIRO Then gError 112164

    'preenche um objccmovdia com os dados do movimento de saque do caixa
    lErro = CF("Mover_Dados_Saque_CCMovDia", objMovCx, objCCMovDia)
    If lErro <> SUCESSO Then gError 112165

    objCCMovDia.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_DINHEIRO

    'subtrai o mesmo no consolidado diário
    lErro = CF("CCMovDia_Exclui", objCCMovDia)
    If lErro <> SUCESSO Then gError 112166

    'subtrai o mesmo no consolidado anual no mês em questão
    lErro = CF("CCMov_Exclui", objCCMovDia)
    If lErro <> SUCESSO Then gError 112167

    lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM MovimentosCaixa", alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 112168

    objMovCx.iCaixa = CODIGO_CAIXA_CENTRAL

    'selecionar os registros da tabela de MovimentosCaixa referente a saida de dinheiro do caixa que está sendo excluida
    lErro = Comando_ExecutarPos(alComando(3), "SELECT Tipo, AdmMeioPagto, Parcelamento, DataMovimento, Valor  FROM MovimentosCaixa WHERE FilialEmpresa = ? AND Caixa = ? AND Tipo = ? AND Valor =? AND NumRefInterna = ? ", 0, tMovCx.iTipo, tMovCx.iAdmMeioPagto, tMovCx.iParcelamento, tMovCx.dtDataMovimento, tMovCx.dValor, objMovCx.iFilialEmpresa, objMovCx.iCaixa, MOVIMENTOCAIXA_ENT_SANGRIA_DINHEIRO, objMovCx.dValor, objMovCx.lNumMovto)
    If lErro <> AD_SQL_SUCESSO Then gError 112169

    lErro = Comando_BuscarPrimeiro(alComando(3))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112170

    If lErro = AD_SQL_SEM_DADOS Then gError 112171

    objMovCx.iTipo = tMovCx.iTipo
    objMovCx.iAdmMeioPagto = tMovCx.iAdmMeioPagto
    objMovCx.iParcelamento = tMovCx.iParcelamento
    objMovCx.dtDataMovimento = tMovCx.dtDataMovimento
    objMovCx.dValor = tMovCx.dValor

    If objMovCx.iTipo <> MOVIMENTOCAIXA_ENT_SANGRIA_DINHEIRO Then gError 112172
    
    Set objCCMovDia = New ClassCCMovDia
        
    'preenche um objccmovdia com os dados do movimento de deposito no caixa central
    lErro = Mover_Dados_Deposito_CCMovDia(objMovCx, objCCMovDia)
    If lErro <> SUCESSO Then gError 112173

    objCCMovDia.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_DINHEIRO

    'subtrai o mesmo no consolidado diário
    lErro = CF("CCMovDia_Exclui", objCCMovDia)
    If lErro <> SUCESSO Then gError 112174

    'subtrai o mesmo no consolidado anual no mês em questão
    lErro = CF("CCMov_Exclui", objCCMovDia)
    If lErro <> SUCESSO Then gError 112175

    lErro = Comando_ExecutarPos(alComando(4), "DELETE FROM MovimentosCaixa", alComando(3))
    If lErro <> AD_SQL_SUCESSO Then gError 112176

    objTipoMeioPagtoLojaFilial.dSaldo = -objMovCx.dValor
    objTipoMeioPagtoLojaFilial.iFilialEmpresa = objMovCx.iFilialEmpresa

    'mover Meio_pagamento_Dineiro para objtipomeiopagtoloja.itipo
    objTipoMeioPagtoLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_DINHEIRO

    'altera o saldo atual na tabela de tipomeiopagtoloja
    lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTipoMeioPagtoLojaFilial)
    If lErro <> SUCESSO Then gError 112177

    objLog.lNumIntDoc = tMovCx.lNumIntDocLog
    objLog.iQuantLog = tMovCx.iQuantLog
    
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
        'grava o log
        lErro = CF("Log_Exclui", objLog)
        If lErro <> SUCESSO Then gError 112178
    End If
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    MovimentosCaixa_Excluir_MovcxDin_Sang = SUCESSO

    Exit Function

Erro_MovimentosCaixa_Excluir_MovcxDin_Sang:

    MovimentosCaixa_Excluir_MovcxDin_Sang = gErr

    Select Case gErr

        Case 112161
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 112162, 112179, 112169, 112170
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVCAIXA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa, objMovCx.lSequencial)

        Case 112163, 112171
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOCAIXA_NAO_CADASTRADO1", gErr)

        Case 112164, 112172
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPO_MOVCAIXA_ERRADO", gErr, objMovCx.iTipo, MOVIMENTOCAIXA_SANGRIA_DINHEIRO)

        Case 112165 To 112168, 112173, 112174, 112175, 112177, 112178

        Case 112172
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPO_MOVCAIXA_ERRADO", gErr, objMovCx.iTipo, MOVIMENTOCAIXA_ENT_SANGRIA_DINHEIRO)
        
        Case 112176
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_MOVIMENTOSCAIXA", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151111)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function MovimentosCaixa_Gravar_MovcxDin_Sup(ByVal objMovCx As ClassMovimentoCaixa) As Long
'gravar o movimento de caixa
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer
Dim objCCMovDia As New ClassCCMovDia
Dim objTipoMeioPagtoLojaFilial As New ClassTMPLojaFilial
Dim objLog As New ClassLog
Dim iTipo As Integer
Dim iCaixa As Integer
Dim lNumAuto As Long
''''Dim objTipoMeioPagtoLojaFilial new ClassTMPLojaFilial

On Error GoTo Erro_MovimentosCaixa_Gravar_MovcxDin_Sup

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 112524
    Next

    'reserva um conjunto de numeros internos de movimento de caixa
    lErro = CF("Config_ObterNumInt", "LojaConfig", "NUM_PROX_MOVCAIXACENTRAL", lNumAuto, 2, objMovCx.iFilialEmpresa)
    If lErro <> SUCESSO Then gError 112525
    
    objMovCx.lNumRefInterna = objMovCx.lNumMovto
    objMovCx.lNumMovto = lNumAuto

    'preenche o objLog com o movimento do caixa
    Call Mover_Dados_MovcxDin_Log(objMovCx, objLog)
    
    'diz o tipo de operação a ser logada
    objLog.iOperacao = SUPRIMENTO_DINHEIRO
    
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
        'grava o log
        lErro = CF("Log_Grava", objLog, objLog.colRegistro)
        If lErro <> SUCESSO Then gError 112526
    End If
    
    objMovCx.lNumIntDocLog = objLog.lNumIntDoc
    objMovCx.iQuantLog = objLog.iQuantLog

    'insere novo registro na tabela de MovimentosCaixa referente a saida de dinheiro do caixa
    lErro = Comando_Executar(alComando(1), "INSERT INTO MovimentosCaixa(FilialEmpresa, NumMovto, Caixa, Operador, Sequencial, Tipo, AdmMeioPagto, Parcelamento, DataMovimento, Valor, Gerente, Hora, NumIntDocLog, QuantLog, NumRefInterna, Arquivo, NumMovtoArq ) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", objMovCx.iFilialEmpresa, objMovCx.lNumMovto, objMovCx.iCaixa, objMovCx.iCodOperador, objMovCx.lSequencial, objMovCx.iTipo, objMovCx.iAdmMeioPagto, objMovCx.iParcelamento, objMovCx.dtDataMovimento, objMovCx.dValor, objMovCx.iGerente, objMovCx.dHora, objMovCx.lNumIntDocLog, objMovCx.iQuantLog, objMovCx.lNumRefInterna, objMovCx.sArquivo, objMovCx.lNumMovtoArq)
    If lErro <> AD_SQL_SUCESSO Then gError 112527

    'preenche um objccmovdia com os dados do movimento de saque do caixa
    lErro = Mover_Dados_Deposito_CCMovDia(objMovCx, objCCMovDia)
    If lErro <> SUCESSO Then gError 112528

    objCCMovDia.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_DINHEIRO

    'adiciona o mesmo no consolidado diário
    lErro = CF("CCMovDia_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 112529

    'adiciona o mesmo no consolidado anual no mês em questão
    lErro = CF("CCMov_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 112530
        
    objTipoMeioPagtoLojaFilial.dSaldo = -objMovCx.dValor
    objTipoMeioPagtoLojaFilial.iFilialEmpresa = objMovCx.iFilialEmpresa

    'mover Meio_pagamento_Dineiro para objtipomeiopagtoloja.itipo
    objTipoMeioPagtoLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_DINHEIRO

    'altera o saldo atual na tabela de tipomeiopagtoloja
    lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTipoMeioPagtoLojaFilial)
    If lErro <> SUCESSO Then gError 118233
    
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    MovimentosCaixa_Gravar_MovcxDin_Sup = SUCESSO

    Exit Function

Erro_MovimentosCaixa_Gravar_MovcxDin_Sup:

    MovimentosCaixa_Gravar_MovcxDin_Sup = gErr

    Select Case gErr

        Case 112524
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 112525, 112526, 112528 To 112530

        Case 112527
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MOVCAIXA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa, objMovCx.lSequencial)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151112)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function MovimentosCaixa_Excluir_MovcxDin_Sup(ByVal objMovCx As ClassMovimentoCaixa) As Long
'excluir o movimento de caixa
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lErro As Long
Dim alComando(1 To 2) As Long
Dim iIndice As Integer
Dim objCCMovDia As New ClassCCMovDia
Dim objTipoMeioPagtoLojaFilial As New ClassTMPLojaFilial
Dim objLog As New ClassLog
Dim lCodigoCaixa As Long
Dim tMovCx As typeMovimentoCaixa

On Error GoTo Erro_MovimentosCaixa_Excluir_MovcxDin_Sup

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 112513
    Next

    'selecionar os registros da tabela de MovimentosCaixa referente a saida de dinheiro do caixa que está sendo excluida
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Tipo, AdmMeioPagto, Parcelamento, DataMovimento, NumIntDocLog, QuantLog  FROM MovimentosCaixa WHERE FilialEmpresa = ? AND Caixa = ? AND NumRefInterna = ? AND Tipo = ? AND Valor = ?", 0, tMovCx.iTipo, tMovCx.iAdmMeioPagto, tMovCx.iParcelamento, tMovCx.dtDataMovimento, tMovCx.lNumIntDocLog, tMovCx.iQuantLog, objMovCx.iFilialEmpresa, objMovCx.iCaixa, objMovCx.lNumMovto, MOVIMENTOCAIXA_SUPRIMENTO_DINHEIRO, objMovCx.dValor)
    If lErro <> AD_SQL_SUCESSO Then gError 112514

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112515

    If lErro = AD_SQL_SEM_DADOS Then gError 112516

    objMovCx.iTipo = tMovCx.iTipo
    objMovCx.iAdmMeioPagto = tMovCx.iAdmMeioPagto
    objMovCx.iParcelamento = tMovCx.iParcelamento
    objMovCx.dtDataMovimento = tMovCx.dtDataMovimento

    'preenche um objccmovdia com os dados do movimento de saque do caixa
    lErro = Mover_Dados_Deposito_CCMovDia(objMovCx, objCCMovDia)
    If lErro <> SUCESSO Then gError 112518

    objCCMovDia.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_DINHEIRO
    
    'subtrai o mesmo no consolidado diário
    lErro = CF("CCMovDia_Exclui", objCCMovDia)
    If lErro <> SUCESSO Then gError 112519

    'subtrai o mesmo no consolidado anual no mês em questão
    lErro = CF("CCMov_Exclui", objCCMovDia)
    If lErro <> SUCESSO Then gError 112520

    lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM MovimentosCaixa", alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 112521

    objLog.lNumIntDoc = tMovCx.lNumIntDocLog
    objLog.iQuantLog = tMovCx.iQuantLog
    
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
        'grava o log
        lErro = CF("Log_Exclui", objLog)
        If lErro <> SUCESSO Then gError 118017
    End If


'    'preenche o objLog com o movimento do caixa
'    Call Mover_Dados_MovcxDin_Log(objMovCx, objLog)
'
'    'diz o tipo de operação a ser logada
'    objLog.iOperacao = EXCLUSAO_SUPRIMENTO_DINHEIRO
'
'    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
'        'grava o log
'        lErro = CF("Log_Grava", objLog, objLog.colRegistro)
'        If lErro <> SUCESSO Then gError 118017
'    End If

    objTipoMeioPagtoLojaFilial.dSaldo = objMovCx.dValor
    objTipoMeioPagtoLojaFilial.iFilialEmpresa = objMovCx.iFilialEmpresa

    'mover Meio_pagamento_Dineiro para objtipomeiopagtoloja.itipo
    objTipoMeioPagtoLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_DINHEIRO

    'altera o saldo atual na tabela de tipomeiopagtoloja
    lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTipoMeioPagtoLojaFilial)
    If lErro <> SUCESSO Then gError 118233


    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    MovimentosCaixa_Excluir_MovcxDin_Sup = SUCESSO

    Exit Function

Erro_MovimentosCaixa_Excluir_MovcxDin_Sup:

    MovimentosCaixa_Excluir_MovcxDin_Sup = gErr

    Select Case gErr

        Case 112513
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 112514, 112515
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVCAIXA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa, objMovCx.lSequencial)

        Case 112516
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOCAIXA_NAO_CADASTRADO1", gErr)

        Case 112517
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPO_MOVCAIXA_ERRADO", gErr, objMovCx.iTipo, MOVIMENTOCAIXA_SANGRIA_DINHEIRO)

        Case 112518, 112519, 112520, 112523, 118017

        Case 112521
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_MOVIMENTOSCAIXA", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151113)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Sub Mover_Dados_MovcxDin_Log(objMovimentoCaixa As ClassMovimentoCaixa, objLog As ClassLog)
'Função que recebe um objMovimentoCaixa com todos os dados preenchidos e coloca em objLog

On Error GoTo Erro_Mover_Dados_MovcxDin_Log

    'preenche os dados do log com cada atributo do objMovimentoCaixa separado por vbkeyscape
    With objMovimentoCaixa
        objLog.sLog = CStr(.iFilialEmpresa) & Chr(vbKeyEscape) & _
                      CStr(.lNumMovto) & Chr(vbKeyEscape) & _
                      CStr(.iCaixa) & Chr(vbKeyEscape) & _
                      CStr(.iCodOperador) & Chr(vbKeyEscape) & _
                      CStr(.lSequencial) & Chr(vbKeyEscape) & _
                      CStr(.iTipo) & Chr(vbKeyEscape) & _
                      CStr(.iAdmMeioPagto) & Chr(vbKeyEscape) & _
                      CStr(.iParcelamento) & Chr(vbKeyEscape) & _
                      CStr(.dtDataMovimento) & Chr(vbKeyEscape) & _
                      CStr(.dValor) & Chr(vbKeyEscape) & _
                      CStr(.iGerente) & Chr(vbKeyEscape) & _
                      CStr(.dHora) & Chr(vbKeyEscape) & _
                      CStr(.lNumRefInterna) & Chr(vbKeyEscape) & _
                      Chr(vbKeyEnd)

    End With

    Exit Sub

Erro_Mover_Dados_MovcxDin_Log:

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151114)

    End Select

    Exit Sub

End Sub

Function Log_Exclui(ByVal objLog As ClassLog) As Long
'exclui os registros na tabela log referente a NumIntLog e NumIntLogs consecutivos até NumIntLog + QuantLog

Dim lErro As Long
Dim alComando(1 To 2) As Long
Dim iIndice As Integer
Dim lNumIntDoc As Long
Dim iLog As Integer

On Error GoTo Erro_Log_Exclui

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 112187
    Next

    lErro = Comando_ExecutarPos(alComando(1), "SELECT NumIntDoc FROM Log WHERE NumIntDoc >= ? ORDER BY NumIntDoc", 0, lNumIntDoc, objLog.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 112188

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112189

    iLog = 1

    Do While lErro = AD_SQL_SUCESSO And iLog <= objLog.iQuantLog

        lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM Log", alComando(1))
        If lErro <> AD_SQL_SUCESSO Then gError 112190

        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112191

        iLog = iLog + 1

    Loop

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Log_Exclui = SUCESSO

    Exit Function

Erro_Log_Exclui:

    Log_Exclui = gErr

    Select Case gErr

        Case 112187
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 112188, 112189, 112191
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_LOG", gErr)

        Case 112190
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_LOG", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151115)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Registro_ECF_MovcxChq(ByVal colRegistro As Collection, ByVal sArquivo As String, ByVal iRegistro As Integer) As Long
'Trata o registro de movimentacao de cheques e coloca os dados no bd do caixa central. sArquivo contem o nome do arquivo em que sRegistro foi lido.
'iRegistro é o numero do registro.

Dim iPosAtual As Integer
Dim iPosFimAtual As Integer
Dim objMovCx As New ClassMovimentoCaixa
Dim colCheque As New Collection
Dim sRegistro As String
Dim lErro As Long
Dim iPosKeyLButton As Integer


On Error GoTo Erro_Registro_ECF_MovcxChq

    sRegistro = colRegistro(1)


    iPosKeyLButton = InStr(sRegistro, Chr(vbKeyLButton))

    If iPosKeyLButton <> 0 Then

        objMovCx.lNumMovtoArq = CLng(left(sRegistro, iPosKeyLButton - 1))

    End If

    
    objMovCx.sArquivo = sArquivo


    iPosFimAtual = InStr(sRegistro, Chr(vbKeyControl))

    'guarda as infos de movimento de caixa
    lErro = CF("MovcxChq_Movcx", iPosAtual, iPosFimAtual, sRegistro, objMovCx)
    If lErro <> SUCESSO Then gError 112192
    
    lErro = Verifica_Existencia_Sequencial(objMovCx.lSequencial, objMovCx.iCaixa, objMovCx.iFilialEmpresa)
    If lErro <> SUCESSO And lErro <> 112627 Then gError 112630
    
    If lErro <> 112627 Then
    
        If objMovCx.iTipo = MOVIMENTOCAIXA_SANGRIA_CHEQUE Or objMovCx.iTipo = MOVIMENTOCAIXA_EXCLUSAO_SANGRIA_CHEQUE Then
    
            'guarda as infos de cheque
            lErro = CF("MovcxChq_Cheque", iPosAtual, iPosFimAtual, colRegistro, colCheque, objMovCx)
            If lErro <> SUCESSO Then gError 112193
        
        End If
        
        If objMovCx.iTipo = MOVIMENTOCAIXA_SANGRIA_CHEQUE Then
    
            'guarda as infos de movimento de caixa relativos a sangria de cheque
            lErro = CF("MovimentosCaixa_Gravar_MovcxChq", objMovCx, colCheque)
            If lErro <> SUCESSO Then gError 112194
    
        ElseIf objMovCx.iTipo = MOVIMENTOCAIXA_EXCLUSAO_SANGRIA_CHEQUE Then
    
            'guarda as infos de movimento de caixa relativos a exclusao de sangria de cheque
            lErro = CF("MovimentosCaixa_Excluir_MovcxChq", objMovCx)
            If lErro <> SUCESSO Then gError 112195
    
        End If
    End If
    
    Registro_ECF_MovcxChq = SUCESSO

    Exit Function

Erro_Registro_ECF_MovcxChq:

    Registro_ECF_MovcxChq = gErr

    Select Case gErr

        Case 112192 To 112195, 112630

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151116)

    End Select

    Exit Function

End Function

Function MovcxChq_Movcx(iPosAtual As Integer, iPosFimAtual As Integer, ByVal sRegistro As String, ByVal objMovCx As ClassMovimentoCaixa) As Long
'guarda as infos de movimento de caixa relativos a sangria de cheque

Dim lErro As Long

On Error GoTo Erro_MovcxChq_Movcx

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iTipo = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dHora = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dtDataMovimento = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iGerente = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iCodOperador = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.lSequencial = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dValor = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iAdmMeioPagto = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iParcelamento = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iCaixa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.lNumMovto = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
    MovcxChq_Movcx = SUCESSO

    Exit Function

Erro_MovcxChq_Movcx:

    MovcxChq_Movcx = gErr

    Select Case gErr

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151117)

    End Select

    Exit Function

End Function

Function MovcxChq_Cheque(iPosAtual As Integer, iPosFimAtual As Integer, ByVal colRegistro As Collection, ByVal colCheque As Collection, ByVal objMovCx As ClassMovimentoCaixa) As Long
'guarda as infos de troca se houverem

Dim lErro As Long
Dim vRegistro As Variant
Dim alComando(1 To 1) As Long
Dim lSequencialCaixa As Long
Dim lSequencialLoja As Long
Dim iIndice As Integer

On Error GoTo Erro_MovcxChq_Cheque

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 126033
    Next

    For Each vRegistro In colRegistro

        Do While Mid(vRegistro, iPosFimAtual + 1, 1) <> Chr(vbKeyEnd) And iPosFimAtual + 1 <= Len(vRegistro)

            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, vRegistro, Chr(vbKeyShift))
            lSequencialCaixa = CLng(Mid(vRegistro, iPosAtual, iPosFimAtual - iPosAtual))

            lErro = Comando_Executar(alComando(1), "SELECT SequencialLoja From ChequePre WHERE FilialEmpresaLoja = ? AND Caixa = ? AND SequencialCaixa = ?", lSequencialLoja, objMovCx.iFilialEmpresa, objMovCx.iCaixa, lSequencialCaixa)
            If lErro <> AD_SQL_SUCESSO Then gError 126030

            lErro = Comando_BuscarPrimeiro(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126031
                
            If lErro = AD_SQL_SEM_DADOS Then gError 126032
            
            colCheque.Add lSequencialLoja

        Loop

        iPosFimAtual = 0

    Next

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    MovcxChq_Cheque = SUCESSO

    Exit Function

Erro_MovcxChq_Cheque:

    MovcxChq_Cheque = gErr

    Select Case gErr

        Case 126030, 126031
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUE", gErr)

        Case 126032
            Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPRE_NAOENCONTRADO_CAIXA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa, lSequencialLoja)

        Case 126033
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151118)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function MovimentosCaixa_Gravar_MovcxChq(ByVal objMovCx As ClassMovimentoCaixa, ByVal colCheque As Collection) As Long
'gravar os movimentos de caixa contidos na colecao.
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer
Dim objCCMovDia As New ClassCCMovDia
Dim objTipoMeioPagtoLojaFilial As New ClassTMPLojaFilial
Dim dValorEspecif As Double
Dim dValorNaoEspecif As Double
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim objLog As New ClassLog
Dim lNumAuto As Long
Dim lSeq As Long
Dim iCaixa As Integer

On Error GoTo Erro_MovimentosCaixa_Gravar_MovcxChq

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 112196
    Next

    'reserva um conjunto de numeros internos de movimento de caixa
    lErro = CF("Config_ObterNumInt", "LojaConfig", "NUM_PROX_MOVCAIXACENTRAL", lNumAuto, 2, objMovCx.iFilialEmpresa)
    If lErro <> SUCESSO Then gError 112197
    
    objMovCx.lNumRefInterna = objMovCx.lNumMovto
    objMovCx.lNumMovto = lNumAuto

    'diz o tipo de operação a ser logada
    objLog.iOperacao = SANGRIA_CHEQUE

    'preenche o objLog com o movimento do caixa
    Call Mover_Dados_MovcxChq_Log(objMovCx, colCheque, objLog)
    
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
        'grava o log
        lErro = CF("Log_Grava", objLog, objLog.colRegistro)
        If lErro <> SUCESSO Then gError 112198
    End If
    
    objMovCx.lNumIntDocLog = objLog.lNumIntDoc
    objMovCx.iQuantLog = objLog.iQuantLog
    iCaixa = objMovCx.iCaixa

    'insere novo registro na tabela de MovimentosCaixa referente a saida de cheques do caixa
    lErro = Comando_Executar(alComando(1), "INSERT INTO MovimentosCaixa(FilialEmpresa, NumMovto, Caixa, Operador, Sequencial, Tipo, AdmMeioPagto, Parcelamento, DataMovimento, Valor, Gerente, Hora, NumIntDocLog, QuantLog, NumRefInterna, Arquivo, NumMovtoArq ) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", objMovCx.iFilialEmpresa, objMovCx.lNumMovto, objMovCx.iCaixa, objMovCx.iCodOperador, objMovCx.lSequencial, objMovCx.iTipo, objMovCx.iAdmMeioPagto, objMovCx.iParcelamento, objMovCx.dtDataMovimento, objMovCx.dValor, objMovCx.iGerente, objMovCx.dHora, objMovCx.lNumIntDocLog, objMovCx.iQuantLog, objMovCx.lNumRefInterna, objMovCx.sArquivo, objMovCx.lNumMovtoArq)
    If lErro <> AD_SQL_SUCESSO Then gError 112199
    
    Set objCCMovDia = New ClassCCMovDia
    
    'preenche um objccmovdia com os dados do movimento de saque do caixa
    lErro = CF("Mover_Dados_Saque_CCMovDia", objMovCx, objCCMovDia)
    If lErro <> SUCESSO Then gError 112200

    objCCMovDia.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_CHEQUE

    'adiciona o mesmo no consolidado diário
    lErro = CF("CCMovDia_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 112201

    'adiciona o mesmo no consolidado anual no mês em questão
    lErro = CF("CCMov_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 112202
    
    objMovCx.lNumRefInterna = objMovCx.lNumMovto
    objMovCx.iCaixa = CODIGO_CAIXA_CENTRAL
    objMovCx.lNumMovto = lNumAuto + 1
    objMovCx.iTipo = MOVIMENTOCAIXA_ENT_SANGRIA_CHEQUE

    lErro = CF("Caixa_Sequencial_EmTrans", CODIGO_CAIXA_CENTRAL, objMovCx.iFilialEmpresa, lSeq)
    If lErro <> SUCESSO Then gError 111603

    objMovCx.lSequencial = lSeq
    
    'insere novo registro na tabela de MovimentosCaixa referente a entrada de cheques no caixa central
    lErro = Comando_Executar(alComando(1), "INSERT INTO MovimentosCaixa(FilialEmpresa, NumMovto, Caixa, Operador, Sequencial, Tipo, AdmMeioPagto, Parcelamento, DataMovimento, Valor, Gerente, Hora, NumIntDocLog, QuantLog, NumRefInterna, Arquivo, NumMovtoArq ) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", objMovCx.iFilialEmpresa, objMovCx.lNumMovto, objMovCx.iCaixa, objMovCx.iCodOperador, objMovCx.lSequencial, objMovCx.iTipo, objMovCx.iAdmMeioPagto, objMovCx.iParcelamento, objMovCx.dtDataMovimento, objMovCx.dValor, objMovCx.iGerente, objMovCx.dHora, objMovCx.lNumIntDocLog, objMovCx.iQuantLog, objMovCx.lNumRefInterna, objMovCx.sArquivo, objMovCx.lNumMovtoArq)
    If lErro <> AD_SQL_SUCESSO Then gError 112203
    
    'guarda as infos de movimento de caixa relativos a sangria de cheque
    lErro = MovimentosCaixa_Gravar_MovcxChq1(objMovCx, colCheque, iCaixa)
    If lErro <> SUCESSO Then gError 133814

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    MovimentosCaixa_Gravar_MovcxChq = SUCESSO

    Exit Function

Erro_MovimentosCaixa_Gravar_MovcxChq:

    MovimentosCaixa_Gravar_MovcxChq = gErr

    Select Case gErr

        Case 111603, 112197, 112198, 112200 To 112202, 133814

        Case 112196
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 112199, 112203
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MOVCAIXA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa, objMovCx.lSequencial)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151119)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function MovimentosCaixa_Gravar_MovcxChq1(ByVal objMovCx As ClassMovimentoCaixa, ByVal colCheque As Collection, ByVal iCaixa As Integer) As Long
'gravar os movimentos de caixa contidos na colecao.
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lErro As Long
Dim iIndice As Integer
Dim objCCMovDia As New ClassCCMovDia
Dim objTipoMeioPagtoLojaFilial As New ClassTMPLojaFilial
Dim dValorEspecif As Double
Dim dValorNaoEspecif As Double
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim objLog As New ClassLog
Dim lNumAuto As Long
Dim lSeq As Long

On Error GoTo Erro_MovimentosCaixa_Gravar_MovcxChq1

    Set objCCMovDia = New ClassCCMovDia
    
    'preenche um objccmovdia com os dados do movimento de deposito no caixa central
    lErro = Mover_Dados_Deposito_CCMovDia(objMovCx, objCCMovDia)
    If lErro <> SUCESSO Then gError 112204

    objCCMovDia.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_CHEQUE

    'adiciona o mesmo no consolidado diário
    lErro = CF("CCMovDia_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 112205

    'adiciona o mesmo no consolidado anual no mês em questão
    lErro = CF("CCMov_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 112206

    'gravar os nummovcaixasangria nos cheque associados a sangria.
    lErro = CF("Cheque_Gravar_MovcxChq", colCheque, objMovCx.iFilialEmpresa, objMovCx.lNumRefInterna, dValorNaoEspecif, dValorEspecif, iCaixa)
    If lErro <> SUCESSO Then gError 112207

    If dValorNaoEspecif <> 0 Then

        'Valor dos Cheques não Especificados
        objTipoMeioPagtoLojaFilial.dSaldo = dValorNaoEspecif
        objTipoMeioPagtoLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_CHEQUE
        objTipoMeioPagtoLojaFilial.iFilialEmpresa = objMovCx.iFilialEmpresa

        'Função que Serve para atualizar Saldo dos cheques nao especificados
        lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTipoMeioPagtoLojaFilial)
        If lErro <> SUCESSO Then gError 112208

    End If

    If dValorEspecif <> 0 Then

        'Mover Valor dos Cheques Especificados para admMeioPagtoCondPagto.Saldo
        objAdmMeioPagtoCondPagto.dSaldo = dValorEspecif

        'Vincula-se ao Meio_Pagamento_Cheque para o AdmMeioPagtoCondPagto.iAdmMeioPagto
        objAdmMeioPagtoCondPagto.iAdmMeioPagto = MEIO_PAGAMENTO_CHEQUE

        'Vincula-se ao Pagamento_Avista para o AdmMeioPagtoCondPagto.parcelamento
        objAdmMeioPagtoCondPagto.iParcelamento = PARCELAMENTO_AVISTA

        'Vincula-se FilialEmpresa a o Meio de Pagamento
        objAdmMeioPagtoCondPagto.iFilialEmpresa = objMovCx.iFilialEmpresa

        'Função para Alteração de Saldo
        lErro = CF("AdmMeioPagtoCondPagto_Altera_Saldo", objAdmMeioPagtoCondPagto)
        If lErro <> SUCESSO Then gError 112209

    End If

    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL_BACKOFFICE Then
    
        'prepara e insere o movto de cta corrente correspondente ao movimendo de caixa (sangria)
        lErro = CF("MovimentosCaixa_MovCCI_Grava", objMovCx)
        If lErro <> SUCESSO Then gError 126139
    
    End If

    MovimentosCaixa_Gravar_MovcxChq1 = SUCESSO

    Exit Function

Erro_MovimentosCaixa_Gravar_MovcxChq1:

    MovimentosCaixa_Gravar_MovcxChq1 = gErr

    Select Case gErr

        Case 112204 To 112209, 126139

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151120)

    End Select

    Exit Function

End Function


Function Cheque_Gravar_MovcxChq(ByVal colCheque As Collection, ByVal iFilialEmpresa As Integer, ByVal lNumMovtoSangria As Long, dValorNaoEspecif As Double, dValorEspecif As Double, ByVal iCaixa As Long) As Long
'gravar os nummovcaixasangria nos cheques associados a sangria e devolve o total dos cheques NaoEspecificados e Especificados sangrados.
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim vSequencialLoja As Variant
Dim dValor As Double
Dim iNaoEspecificado As Integer
Dim iIndice As Integer
Dim alComando(1 To 2) As Long
Dim lErro As Long

On Error GoTo Erro_Cheque_Gravar_MovcxChq

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 112210
    Next

    For Each vSequencialLoja In colCheque

        'seleciona o cheque em questao
        lErro = Comando_ExecutarPos(alComando(1), "SELECT Valor, NaoEspecificado FROM ChequePre WHERE FilialEmpresaLoja = ? AND Caixa = ? AND SequencialLoja = ?", 0, dValor, iNaoEspecificado, iFilialEmpresa, iCaixa, vSequencialLoja)
        If lErro <> AD_SQL_SUCESSO Then gError 112211

        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112212
                
        If lErro = AD_SQL_SEM_DADOS Then gError 118254

        If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL_BACKOFFICE Then

            'seleciona o cheque em questao
            lErro = Comando_ExecutarPos(alComando(2), "UPDATE ChequePre SET NumMovtoSangria = ?, Localizacao=?", alComando(1), lNumMovtoSangria, CHEQUEPRE_LOCALIZACAO_BACKOFFICE)
            If lErro <> AD_SQL_SUCESSO Then gError 112213

        Else

            'seleciona o cheque em questao
            lErro = Comando_ExecutarPos(alComando(2), "UPDATE ChequePre SET NumMovtoSangria = ?, Localizacao=?", alComando(1), lNumMovtoSangria, CHEQUEPRE_LOCALIZACAO_LOJA)
            If lErro <> AD_SQL_SUCESSO Then gError 126179

        End If

        If iNaoEspecificado = CHEQUE_ESPECIFICADO Then

            dValorEspecif = dValorEspecif + dValor

        Else

            dValorNaoEspecif = dValorNaoEspecif + dValor

        End If

    Next

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Cheque_Gravar_MovcxChq = SUCESSO

    Exit Function

Erro_Cheque_Gravar_MovcxChq:

    Cheque_Gravar_MovcxChq = gErr

    Select Case gErr

        Case 112210
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 112211, 112212
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUE", gErr)

        Case 112213, 126179
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_CHEQUEPRE", gErr)
        
        Case 118254
            Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPRE_NAOENCONTRADO", gErr, iFilialEmpresa, vSequencialLoja)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151121)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Sub Mover_Dados_MovcxChq_Log(objMovimentoCaixa As ClassMovimentoCaixa, colCheque As Collection, objLog As ClassLog)
'Função que recebe um objMovimentoCaixa com todos os dados preenchidos e preenche a strin de um
'objLog para prepará-lo para a gravação

Dim vSequencialLoja As Variant
Dim sLog As String

On Error GoTo Erro_Mover_Dados_MovcxChq_Log

    'preenche os dados do log com cada atributo do objMovimentoCaixa separado por vbkeyscape
    With objMovimentoCaixa
        objLog.sLog = CStr(.iFilialEmpresa) & Chr(vbKeyEscape) & _
                      CStr(.lNumMovto) & Chr(vbKeyEscape) & _
                      CStr(.iCaixa) & Chr(vbKeyEscape) & _
                      CStr(.iCodOperador) & Chr(vbKeyEscape) & _
                      CStr(.lSequencial) & Chr(vbKeyEscape) & _
                      CStr(.iTipo) & Chr(vbKeyEscape) & _
                      CStr(.iAdmMeioPagto) & Chr(vbKeyEscape) & _
                      CStr(.iParcelamento) & Chr(vbKeyEscape) & _
                      CStr(.dtDataMovimento) & Chr(vbKeyEscape) & _
                      CStr(.dValor) & Chr(vbKeyEscape) & _
                      CStr(.iGerente) & Chr(vbKeyEscape) & _
                      CStr(.dHora) & Chr(vbKeyEscape) & _
                      CStr(.lNumRefInterna) & Chr(vbKeyEscape)
                      
    End With

    For Each vSequencialLoja In colCheque

        If Len(objLog.sLog) + Len(vSequencialLoja) + 1 > MAX_TAM_STRING Then

            objLog.colRegistro.Add objLog.sLog
            objLog.sLog = ""

        End If

        objLog.sLog = objLog.sLog & CStr(vSequencialLoja) & Chr(vbKeyShift)

    Next

    objLog.sLog = objLog.sLog & Chr(vbKeyEnd)

    If objLog.colRegistro.Count > 0 Then
        objLog.colRegistro.Add objLog.sLog
    End If

    Exit Sub

Erro_Mover_Dados_MovcxChq_Log:

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151122)

    End Select

    Exit Sub

End Sub

Function MovimentosCaixa_Excluir_MovcxChq(ByVal objMovCx As ClassMovimentoCaixa) As Long
'excluir o movimento de caixa
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lErro As Long
Dim alComando(1 To 2) As Long
Dim iIndice As Integer
Dim objCCMovDia As New ClassCCMovDia
Dim objTipoMeioPagtoLojaFilial As New ClassTMPLojaFilial
Dim dValorEspecif As Double
Dim dValorNaoEspecif As Double
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim objLog As New ClassLog
Dim tMovCx As typeMovimentoCaixa

On Error GoTo Erro_MovimentosCaixa_Excluir_MovcxChq

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 112214
    Next

    'selecionar os registros da tabela de MovimentosCaixa referente a saida de dinheiro do caixa que está sendo excluida
    lErro = Comando_ExecutarPos(alComando(1), "SELECT NumMovto, Tipo, AdmMeioPagto, Parcelamento, DataMovimento, Valor, NumIntDocLog, QuantLog FROM MovimentosCaixa WHERE FilialEmpresa = ? AND Caixa = ? AND Tipo = ? AND NumRefInterna = ?", 0, tMovCx.lNumMovto, tMovCx.iTipo, tMovCx.iAdmMeioPagto, tMovCx.iParcelamento, tMovCx.dtDataMovimento, tMovCx.dValor, tMovCx.lNumIntDocLog, tMovCx.iQuantLog, objMovCx.iFilialEmpresa, objMovCx.iCaixa, MOVIMENTOCAIXA_SANGRIA_CHEQUE, objMovCx.lNumMovto)
    If lErro <> AD_SQL_SUCESSO Then gError 112215

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112216

    If lErro = AD_SQL_SEM_DADOS Then gError 112217

    objMovCx.iTipo = tMovCx.iTipo
    objMovCx.iAdmMeioPagto = tMovCx.iAdmMeioPagto
    objMovCx.iParcelamento = tMovCx.iParcelamento
    objMovCx.dtDataMovimento = tMovCx.dtDataMovimento
    objMovCx.dValor = tMovCx.dValor
    objMovCx.lNumMovto = tMovCx.lNumMovto
    
    If objMovCx.iTipo <> MOVIMENTOCAIXA_SANGRIA_CHEQUE Then gError 112218

    'preenche um objccmovdia com os dados do movimento de saque do caixa
    lErro = CF("Mover_Dados_Saque_CCMovDia", objMovCx, objCCMovDia)
    If lErro <> SUCESSO Then gError 112219

    objCCMovDia.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_CHEQUE

    'subtrai o mesmo no consolidado diário
    lErro = CF("CCMovDia_Exclui", objCCMovDia)
    If lErro <> SUCESSO Then gError 112220

    'subtrai o mesmo no consolidado anual no mês em questão
    lErro = CF("CCMov_Exclui", objCCMovDia)
    If lErro <> SUCESSO Then gError 112221

    lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM MovimentosCaixa", alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 112222

    objMovCx.iCaixa = CODIGO_CAIXA_CENTRAL

    'selecionar os registros da tabela de MovimentosCaixa referente a saida de cheque do caixa que está sendo excluida
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Tipo, AdmMeioPagto, Parcelamento, DataMovimento, Valor, NumMovto, NumRefInterna FROM MovimentosCaixa WHERE FilialEmpresa = ? AND Caixa = ? AND Tipo = ? And AdmMeioPagto = ? AND Parcelamento = ? And NumRefInterna = ?", 0, tMovCx.iTipo, tMovCx.iAdmMeioPagto, tMovCx.iParcelamento, tMovCx.dtDataMovimento, tMovCx.dValor, tMovCx.lNumMovto, tMovCx.lNumRefInterna, objMovCx.iFilialEmpresa, objMovCx.iCaixa, MOVIMENTOCAIXA_ENT_SANGRIA_CHEQUE, objMovCx.iAdmMeioPagto, objMovCx.iParcelamento, objMovCx.lNumMovto)
    If lErro <> AD_SQL_SUCESSO Then gError 112233

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112224

    If lErro = AD_SQL_SEM_DADOS Then gError 112225

    objMovCx.iTipo = tMovCx.iTipo
    objMovCx.iAdmMeioPagto = tMovCx.iAdmMeioPagto
    objMovCx.iParcelamento = tMovCx.iParcelamento
    objMovCx.dtDataMovimento = tMovCx.dtDataMovimento
    objMovCx.dValor = tMovCx.dValor
    objMovCx.lNumMovto = tMovCx.lNumMovto

    If objMovCx.iTipo <> MOVIMENTOCAIXA_ENT_SANGRIA_CHEQUE Then gError 112226
    
    Set objCCMovDia = New ClassCCMovDia
    
    'preenche um objccmovdia com os dados do movimento de deposito no caixa central
    lErro = Mover_Dados_Deposito_CCMovDia(objMovCx, objCCMovDia)
    If lErro <> SUCESSO Then gError 112227

    objCCMovDia.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_CHEQUE

    'subtrai o mesmo no consolidado diário
    lErro = CF("CCMovDia_Exclui", objCCMovDia)
    If lErro <> SUCESSO Then gError 112228

    'subtrai o mesmo no consolidado anual no mês em questão
    lErro = CF("CCMov_Exclui", objCCMovDia)
    If lErro <> SUCESSO Then gError 112229

    lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM MovimentosCaixa", alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 112230

    'limpar os nummovcaixasangria nos cheque associados a sangria.
    lErro = CF("Cheque_Excluir_MovcxChq", objMovCx.iFilialEmpresa, tMovCx.lNumRefInterna, dValorNaoEspecif, dValorEspecif)
    If lErro <> SUCESSO Then gError 112231

    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL_BACKOFFICE Then

        'exclui o movto de cta corrente correspondente ao movimento de caixa especificado
        lErro = MovimentosCaixa_MovCCI_Exclui(objMovCx, MOVCCI_CHEQUE_SANGRIA_LOJA)
        If lErro <> SUCESSO Then gError 126156

    End If

    If dValorNaoEspecif <> 0 Then

        objTipoMeioPagtoLojaFilial.dSaldo = -dValorNaoEspecif
        objTipoMeioPagtoLojaFilial.iFilialEmpresa = objMovCx.iFilialEmpresa

        'mover Meio_pagamento_Dineiro para objtipomeiopagtoloja.itipo
        objTipoMeioPagtoLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_CHEQUE

        'altera o saldo atual na tabela de tipomeiopagtoloja
        lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTipoMeioPagtoLojaFilial)
        If lErro <> SUCESSO Then gError 112232

    End If

    If dValorEspecif <> 0 Then

        'Mover Valor dos Cheques Especificados para admMeioPagtoCondPagto.Saldo
        objAdmMeioPagtoCondPagto.dSaldo = -dValorEspecif

        'Vincula-se ao Meio_Pagamento_Cheque para o AdmMeioPagtoCondPagto.iAdmMeioPagto
        objAdmMeioPagtoCondPagto.iAdmMeioPagto = MEIO_PAGAMENTO_CHEQUE

        'Vincula-se ao Pagamento_Avista para o AdmMeioPagtoCondPagto.parcelamento
        objAdmMeioPagtoCondPagto.iParcelamento = PARCELAMENTO_AVISTA

        'Vincula-se FilialEmpresa a o Meio de Pagamento
        objAdmMeioPagtoCondPagto.iFilialEmpresa = objMovCx.iFilialEmpresa

        'Função para Alteração de Saldo
        lErro = CF("AdmMeioPagtoCondPagto_Altera_Saldo", objAdmMeioPagtoCondPagto)
        If lErro <> SUCESSO Then gError 112233

    End If

    objLog.lNumIntDoc = tMovCx.lNumIntDocLog
    objLog.iQuantLog = tMovCx.iQuantLog
    
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
        'grava o log
        lErro = CF("Log_Exclui", objLog)
        If lErro <> SUCESSO Then gError 112234
    End If
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    MovimentosCaixa_Excluir_MovcxChq = SUCESSO

    Exit Function

Erro_MovimentosCaixa_Excluir_MovcxChq:

    MovimentosCaixa_Excluir_MovcxChq = gErr

    Select Case gErr

        Case 112214
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 112215, 112216, 112223, 112224
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVCAIXA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa, objMovCx.lSequencial)

        Case 112217, 112225
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOCAIXA_NAO_CADASTRADO1", gErr)

        Case 112218
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPO_MOVCAIXA_ERRADO", gErr, objMovCx.iTipo, MOVIMENTOCAIXA_SANGRIA_CHEQUE)

        Case 112219 To 112221, 112227 To 112229, 112231 To 112234, 126156

        Case 112222, 112230
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_MOVIMENTOSCAIXA", gErr)

        Case 112226
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPO_MOVCAIXA_ERRADO", gErr, objMovCx.iTipo, MOVIMENTOCAIXA_ENT_SANGRIA_CHEQUE)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151123)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Cheque_Excluir_MovcxChq(ByVal iFilialEmpresa As Integer, ByVal lNumMovtoSangria As Long, dValorNaoEspecif As Double, dValorEspecif As Double) As Long
'limpar os nummovcaixasangria nos cheques associados a sangria e devolve o total dos cheques NaoEspecificados e Especificados sangrados.
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim dValor As Double
Dim iNaoEspecificado As Integer
Dim iIndice As Integer
Dim alComando(1 To 2) As Long
Dim lErro As Long

On Error GoTo Erro_Cheque_Excluir_MovcxChq

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 112235
    Next

    'seleciona o cheque em questao
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Valor, NaoEspecificado FROM ChequePre WHERE FilialEmpresa = ? AND NumMovtoSangria = ?", 0, dValor, iNaoEspecificado, iFilialEmpresa, lNumMovtoSangria)
    If lErro <> AD_SQL_SUCESSO Then gError 112236

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112237

    Do While lErro = AD_SQL_SUCESSO

        'seleciona o cheque em questao
        lErro = Comando_ExecutarPos(alComando(2), "UPDATE ChequePre SET NumMovtoSangria = 0, Localizacao = 3", alComando(1))
        If lErro <> AD_SQL_SUCESSO Then gError 112238

        If iNaoEspecificado = CHEQUE_ESPECIFICADO Then

            dValorEspecif = dValorEspecif + dValor

        Else

            dValorNaoEspecif = dValorNaoEspecif + dValor

        End If

        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112239

    Loop

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Cheque_Excluir_MovcxChq = SUCESSO

    Exit Function

Erro_Cheque_Excluir_MovcxChq:

    Cheque_Excluir_MovcxChq = gErr

    Select Case gErr

        Case 112235
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 112236, 112237, 112239
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUEPRE_LOJA1", gErr, iFilialEmpresa, lNumMovtoSangria)

        Case 112238
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_CHEQUEPRE1", gErr, iFilialEmpresa, lNumMovtoSangria)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151124)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Registro_ECF_MovcxBol(ByVal colRegistro As Collection, ByVal sArquivo As String, ByVal iRegistro As Integer) As Long
'Trata o registro de movimentacao de boletos e coloca os dados no bd do caixa central. sArquivo contem o nome do arquivo em que sRegistro foi lido.
'iRegistro é o numero do registro.

Dim objMovCx As New ClassMovimentoCaixa
Dim lErro As Long
Dim iPosKeyLButton As Integer
Dim sRegistro As String

On Error GoTo Erro_Registro_ECF_MovcxBol

    sRegistro = colRegistro(1)

    iPosKeyLButton = InStr(sRegistro, Chr(vbKeyLButton))

    If iPosKeyLButton <> 0 Then

        objMovCx.lNumMovtoArq = CLng(left(sRegistro, iPosKeyLButton - 1))

    End If

    
    objMovCx.sArquivo = sArquivo

    'guarda as infos de movimento de caixa
    lErro = CF("MovcxBol_Movcx", colRegistro, objMovCx)
    If lErro <> SUCESSO Then gError 112240
    
    lErro = Verifica_Existencia_Sequencial(objMovCx.lSequencial, objMovCx.iCaixa, objMovCx.iFilialEmpresa)
    If lErro <> SUCESSO And lErro <> 112627 Then gError 112629
    
    If lErro <> 112627 Then
    
        If objMovCx.iTipo = MOVIMENTOCAIXA_SANGRIA_BOLETO_CD Or objMovCx.iTipo = MOVIMENTOCAIXA_SANGRIA_BOLETO_CC Then
    
            'guarda as infos de movimento de caixa relativos a sangria de boleto
            lErro = CF("MovimentosCaixa_Gravar_MovcxBol", objMovCx)
            If lErro <> SUCESSO Then gError 112241
    
        ElseIf objMovCx.iTipo = MOVIMENTOCAIXA_EXCLUSAO_SANGRIA_B0LETO Then
    
            'guarda as infos de movimento de caixa relativos a exclusao da sangria de boleto
            lErro = CF("MovimentosCaixa_Excluir_MovcxBol", objMovCx)
            If lErro <> SUCESSO Then gError 112242
    
        End If
    
    End If
    
    Registro_ECF_MovcxBol = SUCESSO

    Exit Function

Erro_Registro_ECF_MovcxBol:

    Registro_ECF_MovcxBol = gErr

    Select Case gErr

        Case 112240 To 112242, 112629

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151125)

    End Select

    Exit Function

End Function

Function MovcxBol_Movcx(ByVal colRegistro As Collection, ByVal objMovCx As ClassMovimentoCaixa) As Long
'guarda as infos de movimento de caixa relativos a sangria de boleto

Dim lErro As Long
Dim sRegistro As String
Dim iPosAtual As Integer
Dim iPosFimAtual As Integer

On Error GoTo Erro_MovcxBol_Movcx
   
    iPosFimAtual = InStr(colRegistro(1), Chr(vbKeyControl))
    sRegistro = colRegistro(1)
   
    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iTipo = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dHora = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dtDataMovimento = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iGerente = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iCodOperador = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.lSequencial = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dValor = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iAdmMeioPagto = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iParcelamento = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iCaixa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iTipoCartao = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.lNumMovto = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.lNumRefInterna = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    If iPosFimAtual <> 0 Then
        objMovCx.dtDataPreDatado = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    End If

    MovcxBol_Movcx = SUCESSO

    Exit Function

Erro_MovcxBol_Movcx:

    MovcxBol_Movcx = gErr

    Select Case gErr

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151126)

    End Select

    Exit Function

End Function

Function MovimentosCaixa_Gravar_MovcxBol(ByVal objMovCx As ClassMovimentoCaixa) As Long
'gravar o movimento de caixa
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lErro As Long
Dim alComando(1 To 2) As Long
Dim iIndice As Integer
Dim objCCMovDia As New ClassCCMovDia
Dim objTipoMeioPagtoLojaFilial As New ClassTMPLojaFilial
Dim dValorEspecif As Double
Dim dValorNaoEspecif As Double
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim objLog As New ClassLog
Dim lNumAuto As Long
Dim iTipoMeioPagto As Integer
Dim lSeq As Long

On Error GoTo Erro_MovimentosCaixa_Gravar_MovcxBol

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 112243
    Next

    'reserva um conjunto de numeros internos de movimento de caixa
    lErro = CF("Config_ObterNumInt", "LojaConfig", "NUM_PROX_MOVCAIXACENTRAL", lNumAuto, 2, objMovCx.iFilialEmpresa)
    If lErro <> SUCESSO Then gError 112244
    
    objMovCx.lNumRefInterna = objMovCx.lNumMovto
    objMovCx.lNumMovto = lNumAuto

    'diz o tipo de operação a ser logada
    objLog.iOperacao = SANGRIA_BOLETO

    'preenche o objLog com o movimento do caixa
    Call Mover_Dados_MovcxBol_Log(objMovCx, objLog)
    
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
        'grava o log
        lErro = CF("Log_Grava", objLog, objLog.colRegistro)
        If lErro <> SUCESSO Then gError 112245
    End If
    
    objMovCx.lNumIntDocLog = objLog.lNumIntDoc
    objMovCx.iQuantLog = objLog.iQuantLog

    'insere novo registro na tabela de MovimentosCaixa referente a saida de boleto do caixa
    lErro = Comando_Executar(alComando(1), "INSERT INTO MovimentosCaixa(FilialEmpresa, NumMovto, Caixa, Operador, Sequencial, Tipo, AdmMeioPagto, Parcelamento, TipoCartao, DataMovimento, Valor, Gerente, Hora, NumIntDocLog, QuantLog, NumRefInterna, Arquivo, NumMovtoArq ) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", objMovCx.iFilialEmpresa, objMovCx.lNumMovto, objMovCx.iCaixa, objMovCx.iCodOperador, objMovCx.lSequencial, objMovCx.iTipo, objMovCx.iAdmMeioPagto, objMovCx.iParcelamento, objMovCx.iTipoCartao, objMovCx.dtDataMovimento, objMovCx.dValor, objMovCx.iGerente, objMovCx.dHora, objMovCx.lNumIntDocLog, objMovCx.iQuantLog, objMovCx.lNumRefInterna, objMovCx.sArquivo, objMovCx.lNumMovtoArq)
    If lErro <> AD_SQL_SUCESSO Then gError 112246
        
    'preenche um objccmovdia com os dados do movimento de saque do caixa
    lErro = CF("Mover_Dados_Saque_CCMovDia", objMovCx, objCCMovDia)
    If lErro <> SUCESSO Then gError 112247

    'seleciona registro na tabela de TiposMovtocaixa
    lErro = Comando_ExecutarPos(alComando(2), "SELECT TipoMeioPagto FROM TiposMovtoCaixa WHERE Codigo=?", 0, iTipoMeioPagto, objMovCx.iTipo)
    If lErro <> AD_SQL_SUCESSO Then gError 105230

    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 105231
    
    objCCMovDia.iTipoMeioPagto = iTipoMeioPagto
    
    'adiciona o mesmo no consolidado diário
    lErro = CF("CCMovDia_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 112248

    'adiciona o mesmo no consolidado anual no mês em questão
    lErro = CF("CCMov_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 112249

    objMovCx.lNumRefInterna = objMovCx.lNumMovto
    objMovCx.iCaixa = CODIGO_CAIXA_CENTRAL
    objMovCx.lNumMovto = lNumAuto + 1

    lErro = CF("Caixa_Sequencial_EmTrans", CODIGO_CAIXA_CENTRAL, objMovCx.iFilialEmpresa, lSeq)
    If lErro <> SUCESSO Then gError 111603
    
    objMovCx.lSequencial = lSeq
    
    'insere novo registro na tabela de MovimentosCaixa referente a entrada de boleto no caixa central
    lErro = Comando_Executar(alComando(1), "INSERT INTO MovimentosCaixa(FilialEmpresa, NumMovto, Caixa, Operador, Sequencial, Tipo, AdmMeioPagto, Parcelamento, TipoCartao, DataMovimento, Valor, Gerente, Hora, NumIntDocLog, QuantLog, NumRefInterna, Arquivo, NumMovtoArq ) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", objMovCx.iFilialEmpresa, objMovCx.lNumMovto, objMovCx.iCaixa, objMovCx.iCodOperador, objMovCx.lSequencial, MOVIMENTOCAIXA_ENT_SANGRIA_BOLETO, objMovCx.iAdmMeioPagto, objMovCx.iParcelamento, objMovCx.iTipoCartao, objMovCx.dtDataMovimento, objMovCx.dValor, objMovCx.iGerente, objMovCx.dHora, objMovCx.lNumIntDocLog, objMovCx.iQuantLog, objMovCx.lNumRefInterna, objMovCx.sArquivo, objMovCx.lNumMovtoArq)
    If lErro <> AD_SQL_SUCESSO Then gError 112250
    
    Set objCCMovDia = New ClassCCMovDia
    
    'preenche um objccmovdia com os dados do movimento de deposito no caixa central
    lErro = Mover_Dados_Deposito_CCMovDia(objMovCx, objCCMovDia)
    If lErro <> SUCESSO Then gError 112251

    objCCMovDia.iTipoMeioPagto = iTipoMeioPagto

    'adiciona o mesmo no consolidado diário
    lErro = CF("CCMovDia_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 112252

    'adiciona o mesmo no consolidado anual no mês em questão
    lErro = CF("CCMov_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 112253

    objTipoMeioPagtoLojaFilial.dSaldo = objMovCx.dValor
    objTipoMeioPagtoLojaFilial.iFilialEmpresa = objMovCx.iFilialEmpresa

    'se for um movimento nao especificado
    If objMovCx.iAdmMeioPagto = 0 Then

        'Valor dos boletos não Especificados
        objTipoMeioPagtoLojaFilial.dSaldo = objMovCx.dValor
        objTipoMeioPagtoLojaFilial.iFilialEmpresa = objMovCx.iFilialEmpresa

        If objMovCx.iTipo = MOVIMENTOCAIXA_SANGRIA_BOLETO_CD Then
            objTipoMeioPagtoLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_CARTAO_DEBITO
        ElseIf objMovCx.iTipo = MOVIMENTOCAIXA_SANGRIA_BOLETO_CC Then
            objTipoMeioPagtoLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_CARTAO_CREDITO
        End If

        'Função que Serve para atualizar Saldo dos boletos nao especificados
        lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTipoMeioPagtoLojaFilial)
        If lErro <> SUCESSO Then gError 112254

    Else

        'Mover Valor do boleto Especificado para admMeioPagtoCondPagto.Saldo
        objAdmMeioPagtoCondPagto.dSaldo = objMovCx.dValor
        objAdmMeioPagtoCondPagto.iAdmMeioPagto = objMovCx.iAdmMeioPagto
        objAdmMeioPagtoCondPagto.iParcelamento = objMovCx.iParcelamento
        objAdmMeioPagtoCondPagto.iFilialEmpresa = objMovCx.iFilialEmpresa

        'Função para Alteração de Saldo
        lErro = CF("AdmMeioPagtoCondPagto_Altera_Saldo", objAdmMeioPagtoCondPagto)
        If lErro <> SUCESSO Then gError 112255

    End If

    'cria/atualiza o borderoautomatico para os movimentos de sangria de POS detalhado e TEF
    lErro = BorderoAutomatico_POSTEF(objMovCx)
    If lErro <> SUCESSO Then gError 105456

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    MovimentosCaixa_Gravar_MovcxBol = SUCESSO

    Exit Function

Erro_MovimentosCaixa_Gravar_MovcxBol:

    MovimentosCaixa_Gravar_MovcxBol = gErr

    Select Case gErr

        Case 105230, 105231
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOSMOVTOCAIXA1", gErr, objMovCx.iTipo)

        Case 112243
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 105456, 112244, 112245, 112247 To 112249, 112251 To 112255, 111603

        Case 112246, 112250
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MOVCAIXA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa, objMovCx.lSequencial)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151127)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function BorderoAutomatico_POSTEF(objMovCx As ClassMovimentoCaixa) As Long
'cria ou atualiza o bordero automatico que o sistema gera para cada dia para os movimentos TEF e POS detalhado de cartao de credito/debito

Dim lErro As Long
Dim alComando(1 To 8) As Long
Dim tBorderoBoletoItem As typeBorderoBoletoItem
Dim objBorderoBoleto As New ClassBorderoBoleto
Dim objBorderoBoletoItem As New ClassBorderoBoletoItem
Dim dValor As Double
Dim iIndice As Integer
Dim lNumIntDocLog As Long
Dim iQuantLog As Integer
Dim iRede As Integer
Dim tBorderoBoleto As typeBorderoBoleto

On Error GoTo Erro_BorderoAutomatico_POSTEF

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 105457
    Next

    'se se tratar de sangria de tef ou pos especificado ==>
    'gera bordero de boleto automaticamente
    If objMovCx.iTipoCartao = TIPO_TEF Or (objMovCx.iTipoCartao = TIPO_POS And objMovCx.iAdmMeioPagto <> 0) Then
        
        'verifica a rede do movimento de caixa em questao
        lErro = Comando_Executar(alComando(8), "SELECT Rede FROM AdmMeioPagto WHERE FilialEmpresa=? AND Codigo=?", iRede, objMovCx.iFilialEmpresa, objMovCx.iAdmMeioPagto)
        If lErro <> AD_SQL_SUCESSO Then gError 105459

        'busca a rede
        lErro = Comando_BuscarPrimeiro(alComando(8))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 105460
        
        If lErro = AD_SQL_SEM_DADOS Then gError 105461
        
        objBorderoBoleto.iCodigoRede = iRede
        
        'verifica se existe um borderoboletoitem com as caracteristicas do movimendo de caixa (mesma data, admmeiopagto, exibetela=1, parcelamento,databackoffice nula)
        lErro = Comando_Executar(alComando(1), "SELECT BorderoBoleto.NumBordero, BorderoBoleto.DataEnvio, BorderoBoletoItem.NumIntDoc, BorderoBoletoItem.NumMovtoCx, BorderoBoletoItem.NumIntDocCPR " & _
        "FROM BorderoBoleto, BorderoBoletoItem WHERE BorderoBoleto.FilialEmpresa=? AND BorderoBoleto.FilialEmpresa = BorderoBoletoItem.FilialEmpresa AND " & _
        " BorderoBoleto.NumBordero = BorderoBoletoItem.NumBordero AND BorderoBoleto.DataEnvio=? AND BorderoBoleto.ExibeTela = 1 AND BorderoBoletoItem.AdmMeioPagto = ? AND BorderoBoletoItem.Parcelamento = ? AND BorderoBoleto.DataBackoffice = ?  AND BorderoBoletoItem.DataPreDatado=?", _
        tBorderoBoletoItem.lNumBordero, tBorderoBoleto.dtDataEnvio, tBorderoBoletoItem.lNumIntDoc, tBorderoBoletoItem.lNumMovtoCx, tBorderoBoletoItem.lNumIntDocCPR, objMovCx.iFilialEmpresa, objMovCx.dtDataMovimento, objMovCx.iAdmMeioPagto, objMovCx.iParcelamento, DATA_NULA, objMovCx.dtDataPreDatado)
        If lErro <> AD_SQL_SUCESSO Then gError 105431
    
        'busca o primeiro
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 105432
        
        'se encontrou um item de bordero com as caracteristicas desejadas ==> atualiza-o bem como seu movcx associado
        If lErro = SUCESSO Then
        
            objBorderoBoletoItem.lNumIntDoc = tBorderoBoletoItem.lNumIntDoc
            objBorderoBoletoItem.objMovCx.lNumMovto = tBorderoBoletoItem.lNumMovtoCx
            objBorderoBoleto.dtDataEnvio = tBorderoBoleto.dtDataEnvio
            objBorderoBoleto.iFilialEmpresa = objMovCx.iFilialEmpresa
            objBorderoBoleto.lNumBordero = tBorderoBoletoItem.lNumBordero
        
            'os erros 105821 e 105821 se referem a pagamento dos titulos a receber que iriam ser alterados
            lErro = BorderoBoletoItem_Atualiza(objMovCx, objBorderoBoletoItem, objBorderoBoleto)
            If lErro <> SUCESSO And lErro <> 105821 And lErro <> 105822 Then gError 105473
        
            'se nao conseguiu atualizar o bordero pois já tinha titulo baixado ou parcialmente baixado ==> insere um novo bordero
            If lErro <> SUCESSO Then
            
                'inserir o bordero propriamente dito
                lErro = BorderoBoleto_Inserir0(objMovCx, objBorderoBoleto, tBorderoBoletoItem.lNumBordero)
                If lErro <> SUCESSO Then gError 105826
            
                'insere borderoboletoitem, o movimento de caixa associado e gera titulos a receber se estiver operando no caixa central+backoffice
                lErro = BorderoBoletoItem_Insere(objMovCx, tBorderoBoletoItem.lNumBordero, objBorderoBoleto, objBorderoBoletoItem, iRede)
                If lErro <> SUCESSO Then gError 105828
            
            End If
        
        Else


            'verifica se existe um borderoboleto com as caracteristicas do movimento de caixa (mesma data, exibetela=1, databackoffice nula, mesma rede)
            lErro = Comando_Executar(alComando(1), "SELECT BorderoBoleto.NumBordero " & _
            "FROM BorderoBoleto, BorderoBoletoItem, AdmMeioPagto WHERE BorderoBoleto.FilialEmpresa=? AND BorderoBoleto.DataEnvio=? AND BorderoBoleto.ExibeTela = 1 AND BorderoBoleto.DataBackoffice = ? " & _
            " AND BorderoBoleto.FilialEmpresa = BorderoBoletoItem.FilialEmpresa AND BorderoBoleto.NumBordero = BorderoBoletoItem.NumBordero AND " & _
            "BorderoBoletoItem.FilialEmpresa = AdmMeioPagto.FilialEmpresa AND BorderoBoletoItem.AdmMeioPagto = AdmMeioPagto.Codigo AND AdmMeioPagto.Rede = ?", _
            tBorderoBoletoItem.lNumBordero, objMovCx.iFilialEmpresa, objMovCx.dtDataMovimento, DATA_NULA, iRede)
            If lErro <> AD_SQL_SUCESSO Then gError 105443
        
            'busca o primeiro
            lErro = Comando_BuscarPrimeiro(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 105444

            If lErro = AD_SQL_SEM_DADOS Then
            
                'inserir o bordero propriamente dito
                lErro = BorderoBoleto_Inserir0(objMovCx, objBorderoBoleto, tBorderoBoletoItem.lNumBordero)
                If lErro <> SUCESSO Then gError 105825
            
            Else
            
                objBorderoBoleto.iFilialEmpresa = objMovCx.iFilialEmpresa
                objBorderoBoleto.lNumBordero = tBorderoBoletoItem.lNumBordero
            
                'descobre o lNumIntDocLog associado ao BorderoBoleto que está sendo alterado
                lErro = Comando_Executar(alComando(7), "SELECT MovimentosCaixa.NumIntDocLog, MovimentosCaixa.QuantLog " & _
                "FROM BorderoBoleto, BorderoBoletoItem, MovimentosCaixa WHERE BorderoBoleto.FilialEmpresa=? AND BorderoBoleto.NumBordero =? " & _
                " AND BorderoBoleto.FilialEmpresa = BorderoBoletoItem.FilialEmpresa AND BorderoBoleto.NumBordero = BorderoBoletoItem.NumBordero " & _
                " AND BorderoBoletoItem.FilialEmpresa = MovimentosCaixa.FilialEmpresa AND BorderoBoletoItem.NumMovtoCx = MovimentosCaixa.NumMovto ", _
                lNumIntDocLog, iQuantLog, objBorderoBoleto.iFilialEmpresa, objBorderoBoleto.lNumBordero)
                If lErro <> AD_SQL_SUCESSO Then gError 105795
            
                'busca o primeiro
                lErro = Comando_BuscarPrimeiro(alComando(7))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 105796
            
            End If

            'insere borderoboletoitem, o movimento de caixa associado e gera titulos a receber se estiver operando no caixa central+backoffice
            lErro = BorderoBoletoItem_Insere(objMovCx, tBorderoBoletoItem.lNumBordero, objBorderoBoleto, objBorderoBoletoItem, iRede)
            If lErro <> SUCESSO Then gError 105828

        End If

        lErro = BorderoAutomatico_POSTEF1(objMovCx, objBorderoBoleto, objBorderoBoletoItem, lNumIntDocLog, iQuantLog)
        If lErro <> AD_SQL_SUCESSO Then gError 105823

    End If

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    BorderoAutomatico_POSTEF = SUCESSO
    
    Exit Function

Erro_BorderoAutomatico_POSTEF:

    BorderoAutomatico_POSTEF = gErr

    Select Case gErr

        Case 105431, 105432, 105443, 105444, 105795, 105796
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BORDEROBOLETO", gErr)

        Case 105433, 105434
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOS_CAIXA1", gErr, tBorderoBoletoItem.lNumMovtoCx)

        Case 105435
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVCAIXA_NAO_CADASTRADA1", gErr, objMovCx.iFilialEmpresa, tBorderoBoletoItem.lNumMovtoCx)

        Case 105436
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_MOVIMENTOSCAIXA2", gErr, objMovCx.iFilialEmpresa, tBorderoBoletoItem.lNumMovtoCx)

        Case 105437
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_MOVCAIXA", gErr, objMovCx.iFilialEmpresa, tBorderoBoletoItem.lNumMovtoCx)

        Case 105438, 105439
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BORDEROBOLETOITEM", gErr, objMovCx.iFilialEmpresa, tBorderoBoletoItem.lNumIntDoc)

        Case 105440
            Call Rotina_Erro(vbOKOnly, "ERRO_BORDEROBOLETOITEM_NAO_CADASTRADO", gErr, objMovCx.iFilialEmpresa, tBorderoBoletoItem.lNumIntDoc)

        Case 105441
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_BORDEROBOLETOITEM", gErr, objMovCx.iFilialEmpresa, tBorderoBoletoItem.lNumIntDoc)

        Case 105442
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_BORDEROBOLETOITEM", gErr, objMovCx.iFilialEmpresa, tBorderoBoletoItem.lNumIntDoc)

        Case 105823, 105825, 105826, 105828

        Case 105457
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 105459, 105460
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ADMMEIOPAGTO2", gErr, objMovCx.iFilialEmpresa, objMovCx.iAdmMeioPagto)

        Case 105461
            Call Rotina_Erro(vbOKOnly, "ERRO_ADMMEIOPAGTO_NAO_CADASTRADO", gErr, objMovCx.iFilialEmpresa, objMovCx.iAdmMeioPagto)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151128)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function BorderoBoletoItem_Insere(objMovCx As ClassMovimentoCaixa, lNumBordero As Long, objBorderoBoleto As ClassBorderoBoleto, objBorderoBoletoItem As ClassBorderoBoletoItem, iRede As Integer) As Long
'insere borderoboletoitem, o movimento de caixa associado e gera titulos a receber se estiver operando no caixa central+backoffice


Dim lErro As Long
Dim lNumMovto As Long
Dim lSeq As Long
Dim lNumAuto As Long
Dim alComando(1 To 2) As Long
Dim objRede As New ClassRede
Dim iIndice As Integer
Dim objAdmMeioPagto As New ClassAdmMeioPagto

On Error GoTo Erro_BorderoBoletoItem_Insere

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 105827
    Next

    'pegar o proximo numero de movimento disponivel na tabela.
    lErro = CF("Config_ObterNumInt", "LojaConfig", "NUM_PROX_MOVCAIXACENTRAL", lNumMovto, 1, objMovCx.iFilialEmpresa)
    If lErro <> SUCESSO Then gError 105447

    objAdmMeioPagto.iCodigo = objMovCx.iAdmMeioPagto
    objAdmMeioPagto.iFilialEmpresa = objMovCx.iFilialEmpresa
    
    'Lê a admmeiopagto
    lErro = CF("AdmMeioPagto_Le", objAdmMeioPagto)
    If lErro <> SUCESSO And lErro <> 104017 Then gError 126076

    If objAdmMeioPagto.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_CARTAO_CREDITO Then objMovCx.iTipo = MOVIMENTOCAIXA_BORDERO_BOLETO_CC

    If objAdmMeioPagto.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_CARTAO_DEBITO Then objMovCx.iTipo = MOVIMENTOCAIXA_BORDERO_BOLETO_CD

    If objAdmMeioPagto.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_VALE_TICKET Or objAdmMeioPagto.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_VALE_REFEICAO Or objAdmMeioPagto.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_VALE_PRESENTE Or objAdmMeioPagto.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_VALE_COMBUSTIVEL Then objBorderoBoletoItem.objMovCx.iTipo = MOVIMENTOCAIXA_BORDERO_VALETICKET

    objMovCx.lNumMovto = lNumMovto

    lErro = CF("Caixa_Sequencial_EmTrans", CODIGO_CAIXA_CENTRAL, objMovCx.iFilialEmpresa, lSeq)
    If lErro <> SUCESSO Then gError 105829
    
    objMovCx.lSequencial = lSeq

    'executa a inserção na tabela de movimentos de caixa
    lErro = Comando_Executar(alComando(1), "INSERT INTO MovimentosCaixa(FilialEmpresa,NumMovto,Caixa,Sequencial,Tipo,AdmMeioPagto,Parcelamento,TipoCartao,Numero,DataMovimento,Valor,Historico,Favorecido,CupomFiscal,NumRefInterna,MovtoTransf,MovtoEstorno,Gerente,CodConta,Hora, NumIntDocLog, QuantLog, DataPreDatado) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
    objMovCx.iFilialEmpresa, objMovCx.lNumMovto, objMovCx.iCaixa, objMovCx.lSequencial, objMovCx.iTipo, objMovCx.iAdmMeioPagto, objMovCx.iParcelamento, objMovCx.iTipoCartao, objMovCx.lNumero, objMovCx.dtDataMovimento, objMovCx.dValor, objMovCx.sHistorico, objMovCx.sFavorecido, objMovCx.lCupomFiscal, objMovCx.lNumRefInterna, objMovCx.lMovtoTransf, objMovCx.lMovtoEstorno, objMovCx.iGerente, objMovCx.iCodConta, objMovCx.dHora, 0, 0, objMovCx.dtDataPreDatado)
    If lErro <> SUCESSO Then gError 105448

    'gera um número interno para o borderoboletoitem
    lErro = CF("Config_ObterNumInt", "LojaConfig", "NUM_PROX_BORDEROBOLETOITEM", lNumAuto, 1, objMovCx.iFilialEmpresa)
    If lErro <> SUCESSO Then gError 105449

    objBorderoBoleto.dtDataEnvio = objMovCx.dtDataMovimento
    objBorderoBoletoItem.dValor = objMovCx.dValor
    objBorderoBoletoItem.iFilialEmpresa = objMovCx.iFilialEmpresa
    objBorderoBoletoItem.iAdmMeioPagto = objMovCx.iAdmMeioPagto
    objBorderoBoletoItem.iParcelamento = objMovCx.iParcelamento
    objBorderoBoletoItem.lNumIntDoc = lNumAuto
    objBorderoBoletoItem.lNumBordero = lNumBordero
    objBorderoBoletoItem.dtDataPreDatado = objMovCx.dtDataPreDatado

    'se estiver em backoffice+caixacentral ==> gera o titulo a receber associado ao bordero
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL_BACKOFFICE Then

        objRede.iCodigo = iRede

        'Le a rede associada ao item do bordero
        lErro = CF("Rede_Le", objRede)
        If lErro <> SUCESSO And lErro <> 104244 Then gError 105786
        
        'se a rede nao estiver cadastrada ==> erro
        If lErro <> SUCESSO Then gError 105785

        'gera o titulo a receber associado ao bordero de boleto
        lErro = BorderoBoleto_TituloRec_Gera(objBorderoBoleto, objBorderoBoletoItem, objRede)
        If lErro <> SUCESSO Then gError 105784

    End If

    'insere o borderoboletoitem na tabela de borderoboletoitem
    lErro = Comando_Executar(alComando(2), "INSERT INTO BorderoBoletoItem " & _
                                       "(FilialEmpresa,NumIntDoc,AdmMeioPagto,Valor,Parcelamento,NumBordero,NumIntDocCPR, NumMovtoCx, DataPreDatado) " & _
                                       "VALUES (?,?,?,?,?,?,?,?,?) ", _
                                       objBorderoBoletoItem.iFilialEmpresa, objBorderoBoletoItem.lNumIntDoc, objBorderoBoletoItem.iAdmMeioPagto, objBorderoBoletoItem.dValor, objBorderoBoletoItem.iParcelamento, objBorderoBoletoItem.lNumBordero, objBorderoBoletoItem.lNumIntDocCPR, lNumMovto, objBorderoBoletoItem.dtDataPreDatado)
    If lErro <> AD_SQL_SUCESSO Then gError 105450

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    BorderoBoletoItem_Insere = SUCESSO
    
    Exit Function
    
Erro_BorderoBoletoItem_Insere:

    BorderoBoletoItem_Insere = gErr
    
    Select Case gErr

        Case 105447, 105449, 105784, 105786, 105829, 126076

        Case 105448
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MOVCAIXA1", gErr)

        Case 105450
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_BORDEROBOLETOITEM", gErr)

        Case 105785
            Call Rotina_Erro(vbOKOnly, "ERRO_REDE_NAO_ENCONTRADA", gErr, objRede.iCodigo)

        Case 105827
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151129)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function BorderoBoleto_Inserir0(objMovCx As ClassMovimentoCaixa, objBorderoBoleto As ClassBorderoBoleto, lNumBordero As Long) As Long
'insere o bordero boleto

Dim lErro As Long

On Error GoTo Erro_BorderoBoleto_Inserir0

    objBorderoBoleto.dtDataEnvio = objMovCx.dtDataMovimento
    objBorderoBoleto.dValorEnviar = objMovCx.dValor
    objBorderoBoleto.iFilialEmpresa = objMovCx.iFilialEmpresa
    objBorderoBoleto.iExibeTela = BORDERO_BOLETO_NAO_EXIBE_TELA
    objBorderoBoleto.dtDataBackoffice = DATA_NULA
    objBorderoBoleto.dtDataImpressao = DATA_NULA

    'gera um número automático para o borderoboleto
    lErro = CF("Config_ObterAutomatico_EmTrans", "LojaConfig", "COD_PROX_BORDEROBOLETO", "BorderoBoleto", "NumBordero", lNumBordero)
    If lErro <> SUCESSO Then gError 105445

    objBorderoBoleto.lNumBordero = lNumBordero

    'inserir o bordero propriamente dito
    lErro = CF("BorderoBoleto_Inserir", objBorderoBoleto)
    If lErro <> SUCESSO Then gError 105446

    BorderoBoleto_Inserir0 = SUCESSO
    
    Exit Function

Erro_BorderoBoleto_Inserir0:

    BorderoBoleto_Inserir0 = gErr

    Select Case gErr

        Case 105445, 105446

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151130)

    End Select

    Exit Function

End Function

Private Function BorderoAutomatico_POSTEF1(objMovCx As ClassMovimentoCaixa, objBorderoBoleto As ClassBorderoBoleto, objBorderoBoletoItem As ClassBorderoBoletoItem, lNumIntDocLog As Long, iQuantLog As Integer) As Long

Dim lErro As Long
Dim objCCMovDia As New ClassCCMovDia
Dim alComando(1 To 1) As Long
Dim iIndice As Integer
Dim iTipoMeioPagto As Integer
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto

On Error GoTo Erro_BorderoAutomatico_POSTEF1

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 105824
    Next

    objBorderoBoletoItem.dValor = objMovCx.dValor

    'preenche um ccmovdia
    Call Mover_Dados_BorderoBoleto_CCMovDia(objBorderoBoleto, objBorderoBoletoItem, objCCMovDia)

    'seleciona registro na tabela de TiposMovtocaixa
    lErro = Comando_ExecutarPos(alComando(1), "SELECT TipoMeioPagto FROM TiposMovtoCaixa WHERE Codigo=?", 0, iTipoMeioPagto, objMovCx.iTipo)
    If lErro <> AD_SQL_SUCESSO Then gError 105451

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 105452
    
    objCCMovDia.iTipoMeioPagto = iTipoMeioPagto

    'altera o acumulado diário
    lErro = CF("CCMovDia_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 105453

    'altera o acumulado mensal
    lErro = CF("CCMov_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 105454

'    'preenche uma admmeiopagtocondpagto
'    Call Mover_Dados_BorderoBoleto_AdmMeioPagtoCondPagto1(objBorderoBoleto, objBorderoBoletoItem, objAdmMeioPagtoCondPagto)
'
'    'altera o seu saldo
'    lErro = CF("AdmMeioPagtoCondPagto_Altera_Saldo", objAdmMeioPagtoCondPagto)
'    If lErro <> SUCESSO Then gError 105455

    'atualiza o log referente ao BorderoBoleto que acabou de ser alterado
    lErro = Log_Atualiza_BorderoBoleto(objBorderoBoleto, lNumIntDocLog, iQuantLog)
    If lErro <> SUCESSO Then gError 105458

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    BorderoAutomatico_POSTEF1 = SUCESSO
    
    Exit Function

Erro_BorderoAutomatico_POSTEF1:

    BorderoAutomatico_POSTEF1 = gErr

    Select Case gErr

        Case 105451, 105452
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOSMOVTOCAIXA1", gErr, objMovCx.iTipo)

        Case 105453, 105454, 105455, 105458

        Case 105824
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151131)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function BorderoBoletoItem_Atualiza(objMovCx As ClassMovimentoCaixa, objBorderoBoletoItem As ClassBorderoBoletoItem, objBorderoBoleto As ClassBorderoBoleto) As Long

Dim lErro As Long
Dim lNumIntDocLog As Long
Dim iQuantLog As Integer
Dim alComando(1 To 5) As Long
Dim iIndice As Integer
Dim dValor As Double
Dim lNumIntDocCPR As Long
Dim iRede As Integer
Dim objRede As New ClassRede
Dim iAdmMeioPagto As Integer
Dim iParcelamento As Integer

On Error GoTo Erro_BorderoBoletoItem_Atualiza

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 105474
    Next

    'le o movimento caixa associado
    lErro = Comando_ExecutarPos(alComando(1), "SELECT NumIntDocLog, QuantLog FROM MovimentosCaixa WHERE FilialEmpresa = ? AND NumMovto = ?", 0, _
    lNumIntDocLog, iQuantLog, objMovCx.iFilialEmpresa, objBorderoBoletoItem.objMovCx.lNumMovto)
    If lErro <> AD_SQL_SUCESSO Then gError 105433
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 105434
    
    'se não estiver cadastrado ==> erro
    If lErro <> AD_SQL_SUCESSO Then gError 105435
        
    lErro = Comando_LockExclusive(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 105436
        
    'le o bordero boleto item associado
    lErro = Comando_ExecutarPos(alComando(3), "SELECT AdmMeioPagto, Parcelamento, Valor, NumIntDocCPR FROM BorderoBoletoItem WHERE FilialEmpresa = ? AND NumIntDoc = ?", 0, _
    iAdmMeioPagto, iParcelamento, dValor, lNumIntDocCPR, objMovCx.iFilialEmpresa, objBorderoBoletoItem.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 105438
    
    lErro = Comando_BuscarPrimeiro(alComando(3))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 105439
    
    'se não estiver cadastrado ==> erro
    If lErro <> AD_SQL_SUCESSO Then gError 105440
        
    lErro = Comando_LockExclusive(alComando(3))
    If lErro <> AD_SQL_SUCESSO Then gError 105441
        
    objBorderoBoletoItem.iAdmMeioPagto = iAdmMeioPagto
    objBorderoBoletoItem.iParcelamento = iParcelamento
    objBorderoBoletoItem.dValor = dValor + objMovCx.dValor
    objBorderoBoletoItem.dtDataPreDatado = objMovCx.dtDataPreDatado
        
    'se estiver no Caixa Central em COnjunto com o Backoffice
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL_BACKOFFICE Then

        objBorderoBoletoItem.lNumIntDocCPR = lNumIntDocCPR
        objBorderoBoletoItem.iFilialEmpresa = objMovCx.iFilialEmpresa
    
        'Exclui o titulo associado a borderoboletoItem
        lErro = BorderoBoleto_TituloRec_Exclui(objBorderoBoletoItem)
        If lErro <> SUCESSO And lErro <> 107325 And lErro <> 107326 Then gError 105788

        If lErro = 107325 Then gError 105821
        
        If lErro = 107326 Then gError 105822

        'verifica a rede do movimento de caixa em questao
        lErro = Comando_Executar(alComando(5), "SELECT Rede FROM AdmMeioPagto WHERE FilialEmpresa=? AND Codigo=?", iRede, objMovCx.iFilialEmpresa, objMovCx.iAdmMeioPagto)
        If lErro <> AD_SQL_SUCESSO Then gError 105790

        'busca a rede
        lErro = Comando_BuscarPrimeiro(alComando(5))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 105791
        
        If lErro = AD_SQL_SEM_DADOS Then gError 105792

        objRede.iCodigo = iRede

        'Le a rede associada ao item do bordero
        lErro = CF("Rede_Le", objRede)
        If lErro <> SUCESSO And lErro <> 104244 Then gError 105793
        
        'se a rede nao estiver cadastrada ==> erro
        If lErro <> SUCESSO Then gError 105794

        'gera o titulo a receber associado ao bordero de boleto
        lErro = BorderoBoleto_TituloRec_Gera(objBorderoBoleto, objBorderoBoletoItem, objRede)
        If lErro <> SUCESSO Then gError 105789

    End If

    lErro = Comando_ExecutarPos(alComando(2), "UPDATE MovimentosCaixa SET Valor = Valor + ?", alComando(1), objMovCx.dValor)
    If lErro <> AD_SQL_SUCESSO Then gError 105437
    
    lErro = Comando_ExecutarPos(alComando(4), "UPDATE BorderoBoletoItem SET Valor = Valor + ?, NumINtDocCPR = ?", alComando(3), objMovCx.dValor, objBorderoBoletoItem.lNumIntDocCPR)
    If lErro <> AD_SQL_SUCESSO Then gError 105442

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    BorderoBoletoItem_Atualiza = SUCESSO
    
    Exit Function
    
Erro_BorderoBoletoItem_Atualiza:

    BorderoBoletoItem_Atualiza = gErr

    Select Case gErr

        Case 105474
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 105433, 105434
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOS_CAIXA1", gErr, objBorderoBoletoItem.objMovCx.lNumMovto)

        Case 105435
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVCAIXA_NAO_CADASTRADA1", gErr, objMovCx.iFilialEmpresa, objBorderoBoletoItem.objMovCx.lNumMovto)

        Case 105436
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_MOVIMENTOSCAIXA2", gErr, objMovCx.iFilialEmpresa, objBorderoBoletoItem.objMovCx.lNumMovto)

        Case 105437
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_MOVCAIXA", gErr, objMovCx.iFilialEmpresa, objBorderoBoletoItem.objMovCx.lNumMovto)

        Case 105438, 105439
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BORDEROBOLETOITEM", gErr, objMovCx.iFilialEmpresa, objBorderoBoletoItem.lNumIntDoc)

        Case 105440
            Call Rotina_Erro(vbOKOnly, "ERRO_BORDEROBOLETOITEM_NAO_CADASTRADO", gErr, objMovCx.iFilialEmpresa, objBorderoBoletoItem.lNumIntDoc)

        Case 105441
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_BORDEROBOLETOITEM", gErr, objMovCx.iFilialEmpresa, objBorderoBoletoItem.lNumIntDoc)

        Case 105442
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_BORDEROBOLETOITEM", gErr, objMovCx.iFilialEmpresa, objBorderoBoletoItem.lNumIntDoc)

        Case 105788, 105789, 105793, 105821, 105822

        Case 105790, 105791
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ADMMEIOPAGTO2", gErr, objMovCx.iFilialEmpresa, objMovCx.iAdmMeioPagto)

        Case 105792
            Call Rotina_Erro(vbOKOnly, "ERRO_ADMMEIOPAGTO_NAO_CADASTRADO", gErr, objMovCx.iFilialEmpresa, objMovCx.iAdmMeioPagto)

        Case 105794
            Call Rotina_Erro(vbOKOnly, "ERRO_REDE_NAO_ENCONTRADA", gErr, objRede.iCodigo)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151132)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function Log_Atualiza_BorderoBoleto(objBorderoBoleto As ClassBorderoBoleto, lNumIntDocLog As Long, iQuantLog As Integer) As Long
'atualiza o log associado ao BorderoBoleto em questao, excluindo o bordero antigo e incluindo um novo

Dim lErro As Long
Dim iIndice As Integer
Dim objLog As New ClassLog
Dim alComando(1 To 3) As Long
Dim objBorderoBoleto1 As New ClassBorderoBoleto
Dim tBorderoBoleto As typeBorderoBoleto
Dim tBorderoBoletoItem As typeBorderoBoletoItem
Dim tMovCx As typeMovimentoCaixa
Dim objBorderoBoletoItem As ClassBorderoBoletoItem
Dim objMovCx As ClassMovimentoCaixa
Dim lNumMovto As Long

On Error GoTo Erro_Log_Atualiza_BorderoBoleto

    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then

        For iIndice = LBound(alComando) To UBound(alComando)
            alComando(iIndice) = Comando_Abrir()
            If alComando(iIndice) = 0 Then gError 105463
        Next
    
        If lNumIntDocLog <> 0 Then
        
            objLog.lNumIntDoc = lNumIntDocLog
            objLog.iQuantLog = iQuantLog
    
            'exclui o log
            lErro = CF("Log_Exclui", objLog)
            If lErro <> SUCESSO Then gError 105462
    
        End If
    
        tBorderoBoleto.sNumero = String(STRING_BORDEROBOLETO_NUMERO, 0)
    
        'le as informacoes do bordero para atualizar o log
        lErro = Comando_Executar(alComando(1), "SELECT BorderoBoleto.Numero, BorderoBoleto.DataImpressao, BorderoBoleto.DataEnvio,  BorderoBoleto.DataBackoffice, BorderoBoleto.ExibeTela, " & _
        " BorderoBoletoItem.NumIntDoc, BorderoBoletoItem.AdmMeioPagto, BorderoBoletoItem.Valor, BorderoBoletoItem.Parcelamento, MovimentosCaixa.NumMovto, MovimentosCaixa.Caixa, MovimentosCaixa.Sequencial, " & _
        " MovimentosCaixa.Tipo, MovimentosCaixa.Hora " & _
        "FROM BorderoBoleto, BorderoBoletoItem, MovimentosCaixa WHERE BorderoBoleto.FilialEmpresa=? AND BorderoBoleto.NumBordero = ? And BorderoBoleto.FilialEmpresa = BorderoBoletoItem.FilialEmpresa AND " & _
        " BorderoBoleto.NumBordero = BorderoBoletoItem.NumBordero AND BorderoBoletoItem.FilialEmpresa = MovimentosCaixa.FilialEmpresa AND BorderoBoletoItem.NumMovtoCx = MovimentosCaixa.NumMovto", _
        tBorderoBoleto.sNumero, tBorderoBoleto.dtDataImpressao, tBorderoBoleto.dtDataEnvio, tBorderoBoleto.dtDataBackoffice, tBorderoBoleto.iExibeTela, _
        tBorderoBoletoItem.lNumIntDoc, tBorderoBoletoItem.iAdmMeioPagto, tBorderoBoletoItem.dValor, tBorderoBoletoItem.iParcelamento, tMovCx.lNumMovto, tMovCx.iCaixa, tMovCx.lSequencial, tMovCx.iTipo, tMovCx.dHora, _
        objBorderoBoleto.iFilialEmpresa, objBorderoBoleto.lNumBordero)
        If lErro <> AD_SQL_SUCESSO Then gError 105464
    
        'busca o primeiro
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 105465
    
        objBorderoBoleto1.iFilialEmpresa = objBorderoBoleto.iFilialEmpresa
        objBorderoBoleto1.lNumBordero = objBorderoBoleto.lNumBordero
        objBorderoBoleto1.sNumero = tBorderoBoleto.sNumero
        objBorderoBoleto1.dtDataImpressao = tBorderoBoleto.dtDataImpressao
        objBorderoBoleto1.dtDataEnvio = tBorderoBoleto.dtDataEnvio
        objBorderoBoleto1.dtDataBackoffice = tBorderoBoleto.dtDataBackoffice
        objBorderoBoleto1.iExibeTela = tBorderoBoleto.iExibeTela
    
        Do While lErro = AD_SQL_SUCESSO
    
            Set objBorderoBoletoItem = New ClassBorderoBoletoItem
            
            objBorderoBoletoItem.lNumIntDoc = tBorderoBoletoItem.lNumIntDoc
            objBorderoBoletoItem.iAdmMeioPagto = tBorderoBoletoItem.iAdmMeioPagto
            objBorderoBoletoItem.dValor = tBorderoBoletoItem.dValor
            objBorderoBoletoItem.iParcelamento = tBorderoBoletoItem.iParcelamento
            
            objBorderoBoleto.colBorderoBoletoItem.Add objBorderoBoletoItem
            
            Set objMovCx = New ClassMovimentoCaixa
            
            objMovCx.lNumMovto = tMovCx.lNumMovto
            objMovCx.iCaixa = tMovCx.iCaixa
            objMovCx.lSequencial = tMovCx.lSequencial
            objMovCx.iTipo = tMovCx.iTipo
            objMovCx.dHora = tMovCx.dHora
            
            Set objBorderoBoletoItem.objMovCx = objMovCx
    
            'busca o primeiro
            lErro = Comando_BuscarProximo(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 105466
    
        Loop
    
        objLog.iOperacao = INCLUSAO_BORDEROBOLETO
    
        'preenche o log
        Call Mover_Dados_BorderoBoleto_Log(objBorderoBoleto, objLog)
        
        lErro = CF("Log_Grava", objLog)
        If lErro <> SUCESSO Then gError 105467
    
        For Each objBorderoBoletoItem In objBorderoBoleto.colBorderoBoletoItem
    
            'le o movimento caixa associado
            lErro = Comando_ExecutarPos(alComando(2), "SELECT NumMovto FROM MovimentosCaixa WHERE FilialEmpresa = ? AND NumMovto = ?", 0, _
            lNumMovto, objBorderoBoleto.iFilialEmpresa, objBorderoBoletoItem.objMovCx.lNumMovto)
            If lErro <> AD_SQL_SUCESSO Then gError 105468
            
            lErro = Comando_BuscarPrimeiro(alComando(2))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 105469
            
            'se não estiver cadastrado ==> erro
            If lErro <> AD_SQL_SUCESSO Then gError 105470
                
            lErro = Comando_LockExclusive(alComando(2))
            If lErro <> AD_SQL_SUCESSO Then gError 105471
                
            lErro = Comando_ExecutarPos(alComando(3), "UPDATE MovimentosCaixa SET NumIntDocLog = ?, QuantLog = ?", alComando(2), objLog.lNumIntDoc, objLog.iQuantLog)
            If lErro <> AD_SQL_SUCESSO Then gError 105472
    
        Next
    
        For iIndice = LBound(alComando) To UBound(alComando)
            Call Comando_Fechar(alComando(iIndice))
        Next

    End If

    Log_Atualiza_BorderoBoleto = SUCESSO
    
    Exit Function

Erro_Log_Atualiza_BorderoBoleto:

    Log_Atualiza_BorderoBoleto = gErr

    Select Case gErr

        Case 105462, 105467

        Case 105463
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 105464, 105465, 105466
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BORDEROBOLETO", gErr)
        
        Case 105468, 105469
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCAIXA1", gErr, objBorderoBoletoItem.objMovCx.iFilialEmpresa, objBorderoBoletoItem.objMovCx.lNumMovto)
        
        Case 105470
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVCAIXA_NAO_CADASTRADA1", gErr, objBorderoBoletoItem.objMovCx.iFilialEmpresa, objBorderoBoletoItem.objMovCx.lNumMovto)

        Case 105471
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_MOVIMENTOSCAIXA2", gErr, objBorderoBoletoItem.objMovCx.iFilialEmpresa, objBorderoBoletoItem.objMovCx.lNumMovto)

        Case 105472
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_MOVCAIXA", gErr, objBorderoBoletoItem.objMovCx.iFilialEmpresa, objBorderoBoletoItem.objMovCx.lNumMovto)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151133)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Sub Mover_Dados_MovcxBol_Log(objMovimentoCaixa As ClassMovimentoCaixa, objLog As ClassLog)
'Função que recebe um objMovimentoCaixa com todos os dados preenchidos e preenche a string de um
'objLog para prepará-lo para a gravação

Dim vSequencialLoja As Variant
Dim sLog As String

On Error GoTo Erro_Mover_Dados_MovcxBol_Log

    'preenche os dados do log com cada atributo do objMovimentoCaixa separado por vbkeyscape
    With objMovimentoCaixa
        objLog.sLog = CStr(.iFilialEmpresa) & Chr(vbKeyEscape) & _
                      CStr(.lNumMovto) & Chr(vbKeyEscape) & _
                      CStr(.iCaixa) & Chr(vbKeyEscape) & _
                      CStr(.iCodOperador) & Chr(vbKeyEscape) & _
                      CStr(.lSequencial) & Chr(vbKeyEscape) & _
                      CStr(.iTipo) & Chr(vbKeyEscape) & _
                      CStr(.iAdmMeioPagto) & Chr(vbKeyEscape) & _
                      CStr(.iParcelamento) & Chr(vbKeyEscape) & _
                      CStr(.dtDataMovimento) & Chr(vbKeyEscape) & _
                      CStr(.dValor) & Chr(vbKeyEscape) & _
                      CStr(.iGerente) & Chr(vbKeyEscape) & _
                      CStr(.dHora) & Chr(vbKeyEscape) & _
                      CStr(.iTipoCartao) & Chr(vbKeyEscape) & _
                      CStr(.lNumRefInterna) & Chr(vbKeyEscape)
    End With

    objLog.sLog = objLog.sLog & Chr(vbKeyEnd)

    If objLog.colRegistro.Count > 0 Then
        objLog.colRegistro.Add objLog.sLog
    End If

    Exit Sub

Erro_Mover_Dados_MovcxBol_Log:

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151134)

    End Select

    Exit Sub

End Sub

Function MovimentosCaixa_Excluir_MovcxBol(ByVal objMovCx As ClassMovimentoCaixa) As Long
'excluir o movimentos de caixa
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lErro As Long
Dim alComando(1 To 3) As Long
Dim iIndice As Integer
Dim objCCMovDia As New ClassCCMovDia
Dim objTipoMeioPagtoLojaFilial As New ClassTMPLojaFilial
Dim dValorEspecif As Double
Dim dValorNaoEspecif As Double
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim objLog As New ClassLog
Dim tMovCx As typeMovimentoCaixa
Dim iTipo As Integer
Dim iTipoMeioPagto As Integer

On Error GoTo Erro_MovimentosCaixa_Excluir_MovcxBol

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 112256
    Next

    'selecionar os registros da tabela de MovimentosCaixa referente a saida de boleto do caixa que está sendo excluida
    lErro = Comando_ExecutarPos(alComando(1), "SELECT NumMovto, Tipo, AdmMeioPagto, Parcelamento, DataMovimento, Valor, NumIntDocLog, QuantLog FROM MovimentosCaixa WHERE FilialEmpresa = ? AND Caixa = ? AND (Tipo = ? or Tipo = ?) AND AdmMeioPagto = ? AND Parcelamento = ? AND TipoCartao = ? AND NumRefInterna = ?", 0, tMovCx.lNumMovto, tMovCx.iTipo, tMovCx.iAdmMeioPagto, tMovCx.iParcelamento, tMovCx.dtDataMovimento, tMovCx.dValor, tMovCx.lNumIntDocLog, tMovCx.iQuantLog, objMovCx.iFilialEmpresa, objMovCx.iCaixa, MOVIMENTOCAIXA_SANGRIA_BOLETO_CC, MOVIMENTOCAIXA_SANGRIA_BOLETO_CD, objMovCx.iAdmMeioPagto, objMovCx.iParcelamento, objMovCx.iTipoCartao, objMovCx.lNumMovto)
    If lErro <> AD_SQL_SUCESSO Then gError 112257

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112258

    If lErro = AD_SQL_SEM_DADOS Then gError 112259
    
    iTipo = tMovCx.iTipo
    objMovCx.iTipo = tMovCx.iTipo
    objMovCx.iAdmMeioPagto = tMovCx.iAdmMeioPagto
    objMovCx.iParcelamento = tMovCx.iParcelamento
    objMovCx.dtDataMovimento = tMovCx.dtDataMovimento
    objMovCx.dValor = tMovCx.dValor
    objMovCx.lNumMovto = tMovCx.lNumMovto

    'preenche um objccmovdia com os dados do movimento de saque do caixa
    lErro = CF("Mover_Dados_Saque_CCMovDia", objMovCx, objCCMovDia)
    If lErro <> SUCESSO Then gError 112260

    'seleciona registro na tabela de TiposMovtocaixa
    lErro = Comando_ExecutarPos(alComando(3), "SELECT TipoMeioPagto FROM TiposMovtoCaixa WHERE Codigo=?", 0, iTipoMeioPagto, objMovCx.iTipo)
    If lErro <> AD_SQL_SUCESSO Then gError 105768

    lErro = Comando_BuscarPrimeiro(alComando(3))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 105769
    
    objCCMovDia.iTipoMeioPagto = iTipoMeioPagto

    'subtrai o mesmo no consolidado diário
    lErro = CF("CCMovDia_Exclui", objCCMovDia)
    If lErro <> SUCESSO Then gError 112261

    'subtrai o mesmo no consolidado anual no mês em questão
    lErro = CF("CCMov_Exclui", objCCMovDia)
    If lErro <> SUCESSO Then gError 112262

    lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM MovimentosCaixa", alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 112263

    objMovCx.iCaixa = CODIGO_CAIXA_CENTRAL

    'selecionar os registros da tabela de MovimentosCaixa referente a entrada de dinheiro no caixa central que está sendo excluida
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Tipo, AdmMeioPagto, Parcelamento, DataMovimento, Valor, NumMovto FROM MovimentosCaixa WHERE FilialEmpresa = ? AND Caixa = ? AND Tipo = ? AND AdmMeioPagto = ? AND Parcelamento = ? AND TipoCartao = ? AND NumRefInterna=?", 0, tMovCx.iTipo, tMovCx.iAdmMeioPagto, tMovCx.iParcelamento, tMovCx.dtDataMovimento, tMovCx.dValor, tMovCx.lNumMovto, objMovCx.iFilialEmpresa, objMovCx.iCaixa, MOVIMENTOCAIXA_ENT_SANGRIA_BOLETO, objMovCx.iAdmMeioPagto, objMovCx.iParcelamento, objMovCx.iTipoCartao, objMovCx.lNumMovto)
    If lErro <> AD_SQL_SUCESSO Then gError 112264

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112265

    If lErro = AD_SQL_SEM_DADOS Then gError 112266

    objMovCx.iTipo = tMovCx.iTipo
    objMovCx.iAdmMeioPagto = tMovCx.iAdmMeioPagto
    objMovCx.iParcelamento = tMovCx.iParcelamento
    objMovCx.dtDataMovimento = tMovCx.dtDataMovimento
    objMovCx.dValor = tMovCx.dValor
    objMovCx.lNumMovto = tMovCx.lNumMovto
    
    Set objCCMovDia = New ClassCCMovDia
    
    'preenche um objccmovdia com os dados do movimento de deposito no caixa central
    lErro = Mover_Dados_Deposito_CCMovDia(objMovCx, objCCMovDia)
    If lErro <> SUCESSO Then gError 112267

    objCCMovDia.iTipoMeioPagto = iTipoMeioPagto

    'subtrai o mesmo no consolidado diário
    lErro = CF("CCMovDia_Exclui", objCCMovDia)
    If lErro <> SUCESSO Then gError 112268

    'subtrai o mesmo no consolidado anual no mês em questão
    lErro = CF("CCMov_Exclui", objCCMovDia)
    If lErro <> SUCESSO Then gError 112269

    lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM MovimentosCaixa", alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 112270

    'se for um movimento nao especificado
    If objMovCx.iAdmMeioPagto = 0 Then

        objTipoMeioPagtoLojaFilial.dSaldo = -objMovCx.dValor
        objTipoMeioPagtoLojaFilial.iFilialEmpresa = objMovCx.iFilialEmpresa

        If iTipo = MOVIMENTOCAIXA_SANGRIA_BOLETO_CC Then
            objTipoMeioPagtoLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_CARTAO_CREDITO
        ElseIf iTipo = MOVIMENTOCAIXA_SANGRIA_BOLETO_CD Then
            objTipoMeioPagtoLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_CARTAO_DEBITO
        End If

        'altera o saldo atual na tabela de tipomeiopagtoloja
        lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTipoMeioPagtoLojaFilial)
        If lErro <> SUCESSO Then gError 112271

    Else

        objAdmMeioPagtoCondPagto.dSaldo = -objMovCx.dValor
        objAdmMeioPagtoCondPagto.iAdmMeioPagto = objMovCx.iAdmMeioPagto
        objAdmMeioPagtoCondPagto.iParcelamento = objMovCx.iParcelamento
        objAdmMeioPagtoCondPagto.iFilialEmpresa = objMovCx.iFilialEmpresa

        'Função para Alteração de Saldo
        lErro = CF("AdmMeioPagtoCondPagto_Altera_Saldo", objAdmMeioPagtoCondPagto)
        If lErro <> SUCESSO Then gError 112272

    End If

    objLog.lNumIntDoc = tMovCx.lNumIntDocLog
    objLog.iQuantLog = tMovCx.iQuantLog
    
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
        'grava o log
        lErro = CF("Log_Exclui", objLog)
        If lErro <> SUCESSO Then gError 112273
    End If
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    MovimentosCaixa_Excluir_MovcxBol = SUCESSO

    Exit Function

Erro_MovimentosCaixa_Excluir_MovcxBol:

    MovimentosCaixa_Excluir_MovcxBol = gErr

    Select Case gErr

        Case 105768, 105769
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOSMOVTOCAIXA1", gErr, objMovCx.iTipo)

        Case 112256
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 112257, 112258, 112264, 112265
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVCAIXA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa, objMovCx.lSequencial)

        Case 112259, 112260
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOCAIXA_NAO_CADASTRADO1", gErr)

        Case 112260 To 112262, 112267 To 112269, 112271 To 112273

        Case 112263, 112270
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_MOVIMENTOSCAIXA", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151135)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Registro_ECF_MovcxTkt(ByVal colRegistro As Collection, ByVal sArquivo As String, ByVal iRegistro As Integer) As Long
'Trata o registro de movimentacao de ticket e coloca os dados no bd do caixa central. sArquivo contem o nome do arquivo em que sRegistro foi lido.
'iRegistro é o numero do registro.

Dim objMovCx As New ClassMovimentoCaixa
Dim lErro As Long
Dim iPosKeyLButton As Integer
Dim sRegistro As String


On Error GoTo Erro_Registro_ECF_MovcxTkt

    sRegistro = colRegistro(1)

    iPosKeyLButton = InStr(sRegistro, Chr(vbKeyLButton))

    If iPosKeyLButton <> 0 Then

        objMovCx.lNumMovtoArq = CLng(left(sRegistro, iPosKeyLButton - 1))

    End If

    objMovCx.sArquivo = sArquivo

    'guarda as infos de movimento de caixa
    lErro = CF("MovcxTkt_Movcx", colRegistro, objMovCx)
    If lErro <> SUCESSO Then gError 112274
    
    lErro = Verifica_Existencia_Sequencial(objMovCx.lSequencial, objMovCx.iCaixa, objMovCx.iFilialEmpresa)
    If lErro <> SUCESSO And lErro <> 112627 Then gError 112632
    
    If lErro <> 112627 Then
    
        If objMovCx.iTipo = MOVIMENTOCAIXA_SANGRIA_TICKET Then
    
            'guarda as infos de movimento de caixa relativos a sangria de ticket
            lErro = CF("MovimentosCaixa_Gravar_MovcxTkt", objMovCx)
            If lErro <> SUCESSO Then gError 112275
    
        ElseIf objMovCx.iTipo = MOVIMENTOCAIXA_EXCLUSAO_SANGRIA_TICKET Then
    
            'guarda as infos de movimento de caixa relativos a exclusao da sangria de ticket
            lErro = CF("MovimentosCaixa_Excluir_MovcxTkt", objMovCx)
            If lErro <> SUCESSO Then gError 112276
    
        End If
    End If
    
    Registro_ECF_MovcxTkt = SUCESSO

    Exit Function

Erro_Registro_ECF_MovcxTkt:

    Registro_ECF_MovcxTkt = gErr

    Select Case gErr

        Case 112274 To 112276, 112632

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151136)

    End Select

    Exit Function

End Function

Function MovcxTkt_Movcx(ByVal colRegistro As Collection, ByVal objMovCx As ClassMovimentoCaixa) As Long
'guarda as infos de movimento de caixa relativos a sangria de ticket

Dim lErro As Long
Dim sRegistro As String
Dim iPosAtual As Integer
Dim iPosFimAtual As Integer

On Error GoTo Erro_MovcxTkt_Movcx

    sRegistro = colRegistro(1)

    iPosFimAtual = InStr(sRegistro, Chr(vbKeyControl))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iTipo = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dHora = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dtDataMovimento = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iGerente = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iCodOperador = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.lSequencial = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dValor = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iAdmMeioPagto = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iParcelamento = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iCaixa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.lNumMovto = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
    MovcxTkt_Movcx = SUCESSO

    Exit Function

Erro_MovcxTkt_Movcx:

    MovcxTkt_Movcx = gErr

    Select Case gErr

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151137)

    End Select

    Exit Function

End Function

Function MovimentosCaixa_Gravar_MovcxTkt(ByVal objMovCx As ClassMovimentoCaixa) As Long
'gravar o movimento de caixa
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer
Dim objCCMovDia As New ClassCCMovDia
Dim objTipoMeioPagtoLojaFilial As New ClassTMPLojaFilial
Dim dValorEspecif As Double
Dim dValorNaoEspecif As Double
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim objLog As New ClassLog
Dim lNumAuto As Long
Dim lSeq As Long

On Error GoTo Erro_MovimentosCaixa_Gravar_MovcxTkt

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 112277
    Next

    'reserva um conjunto de numeros internos de movimento de caixa
    lErro = CF("Config_ObterNumInt", "LojaConfig", "NUM_PROX_MOVCAIXACENTRAL", lNumAuto, 2, objMovCx.iFilialEmpresa)
    If lErro <> SUCESSO Then gError 112278
    
    objMovCx.lNumRefInterna = objMovCx.lNumMovto
    objMovCx.lNumMovto = lNumAuto

    'diz o tipo de operação a ser logada
    objLog.iOperacao = SANGRIA_TICKET

    'preenche o objLog com o movimento do caixa
    Call Mover_Dados_MovcxTkt_Log(objMovCx, objLog)
    
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
        'grava o log
        lErro = CF("Log_Grava", objLog, objLog.colRegistro)
        If lErro <> SUCESSO Then gError 112279
    End If
    
    objMovCx.lNumIntDocLog = objLog.lNumIntDoc
    objMovCx.iQuantLog = objLog.iQuantLog

    'insere novo registro na tabela de MovimentosCaixa referente a saida de ticket do caixa
    lErro = Comando_Executar(alComando(1), "INSERT INTO MovimentosCaixa(FilialEmpresa, NumMovto, Caixa, Operador, Sequencial, Tipo, AdmMeioPagto, Parcelamento, DataMovimento, Valor, Gerente, Hora, NumIntDocLog, QuantLog, NumRefInterna, Arquivo, NumMovtoArq ) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", objMovCx.iFilialEmpresa, objMovCx.lNumMovto, objMovCx.iCaixa, objMovCx.iCodOperador, objMovCx.lSequencial, objMovCx.iTipo, objMovCx.iAdmMeioPagto, objMovCx.iParcelamento, objMovCx.dtDataMovimento, objMovCx.dValor, objMovCx.iGerente, objMovCx.dHora, objMovCx.lNumIntDocLog, objMovCx.iQuantLog, objMovCx.lNumRefInterna, objMovCx.sArquivo, objMovCx.lNumMovtoArq)
    If lErro <> AD_SQL_SUCESSO Then gError 112280

    Set objCCMovDia = New ClassCCMovDia
        
    'preenche um objccmovdia com os dados do movimento de saque do caixa
    lErro = CF("Mover_Dados_Saque_CCMovDia", objMovCx, objCCMovDia)
    If lErro <> SUCESSO Then gError 112281

    objCCMovDia.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_VALE_TICKET

    'adiciona o mesmo no consolidado diário
    lErro = CF("CCMovDia_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 112282

    'adiciona o mesmo no consolidado anual no mês em questão
    lErro = CF("CCMov_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 112283

    objMovCx.lNumRefInterna = objMovCx.lNumMovto
    objMovCx.iCaixa = CODIGO_CAIXA_CENTRAL
    objMovCx.lNumMovto = lNumAuto + 1
    objMovCx.iTipo = MOVIMENTOCAIXA_ENT_SANGRIA_TICKET

    lErro = CF("Caixa_Sequencial_EmTrans", CODIGO_CAIXA_CENTRAL, objMovCx.iFilialEmpresa, lSeq)
    If lErro <> SUCESSO Then gError 111603

    objMovCx.lSequencial = lSeq

    'insere novo registro na tabela de MovimentosCaixa referente a entrada de ticket no caixa central
    lErro = Comando_Executar(alComando(1), "INSERT INTO MovimentosCaixa(FilialEmpresa, NumMovto, Caixa, Operador, Sequencial, Tipo, AdmMeioPagto, Parcelamento, DataMovimento, Valor, Gerente, Hora, NumIntDocLog, QuantLog, NumRefInterna, Arquivo, NumMovtoArq ) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", objMovCx.iFilialEmpresa, objMovCx.lNumMovto, objMovCx.iCaixa, objMovCx.iCodOperador, objMovCx.lSequencial, objMovCx.iTipo, objMovCx.iAdmMeioPagto, objMovCx.iParcelamento, objMovCx.dtDataMovimento, objMovCx.dValor, objMovCx.iGerente, objMovCx.dHora, objMovCx.lNumIntDocLog, objMovCx.iQuantLog, objMovCx.lNumRefInterna, objMovCx.sArquivo, objMovCx.lNumMovtoArq)
    If lErro <> AD_SQL_SUCESSO Then gError 112284

    Set objCCMovDia = New ClassCCMovDia
    
    'preenche um objccmovdia com os dados do movimento de deposito no caixa central
    lErro = Mover_Dados_Deposito_CCMovDia(objMovCx, objCCMovDia)
    If lErro <> SUCESSO Then gError 112285

    objCCMovDia.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_VALE_TICKET

    'adiciona o mesmo no consolidado diário
    lErro = CF("CCMovDia_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 112286

    'adiciona o mesmo no consolidado anual no mês em questão
    lErro = CF("CCMov_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 112287

    'se for um movimento nao especificado
    If objMovCx.iAdmMeioPagto = 0 Then

        'Valor dos Tickets não Especificados
        objTipoMeioPagtoLojaFilial.dSaldo = objMovCx.dValor
        objTipoMeioPagtoLojaFilial.iFilialEmpresa = objMovCx.iFilialEmpresa
        objTipoMeioPagtoLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_VALE_TICKET

        'Função que Serve para atualizar Saldo dos tickets nao especificados
        lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTipoMeioPagtoLojaFilial)
        If lErro <> SUCESSO Then gError 112288

    Else

        'Mover Valor do Ticket Especificado para admMeioPagtoCondPagto.Saldo
        objAdmMeioPagtoCondPagto.dSaldo = objMovCx.dValor
        objAdmMeioPagtoCondPagto.iAdmMeioPagto = objMovCx.iAdmMeioPagto
        objAdmMeioPagtoCondPagto.iParcelamento = objMovCx.iParcelamento
        objAdmMeioPagtoCondPagto.iFilialEmpresa = objMovCx.iFilialEmpresa

        'Função para Alteração de Saldo
        lErro = CF("AdmMeioPagtoCondPagto_Altera_Saldo", objAdmMeioPagtoCondPagto)
        If lErro <> SUCESSO Then gError 112289

    End If

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    MovimentosCaixa_Gravar_MovcxTkt = SUCESSO

    Exit Function

Erro_MovimentosCaixa_Gravar_MovcxTkt:

    MovimentosCaixa_Gravar_MovcxTkt = gErr

    Select Case gErr

        Case 112277
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 112128, 112129, 112281 To 112289, 111603

        Case 112280
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MOVCAIXA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa, objMovCx.lSequencial)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151138)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Sub Mover_Dados_MovcxTkt_Log(objMovimentoCaixa As ClassMovimentoCaixa, objLog As ClassLog)
'Função que recebe um objMovimentoCaixa com todos os dados preenchidos e preenche a string de um
'objLog para prepará-lo para a gravação

Dim sLog As String

On Error GoTo Erro_Mover_Dados_MovcxTkt_Log

    'preenche os dados do log com cada atributo do objMovimentoCaixa separado por vbkeyscape
    With objMovimentoCaixa
        objLog.sLog = CStr(.iFilialEmpresa) & Chr(vbKeyEscape) & _
                      CStr(.lNumMovto) & Chr(vbKeyEscape) & _
                      CStr(.iCaixa) & Chr(vbKeyEscape) & _
                      CStr(.iCodOperador) & Chr(vbKeyEscape) & _
                      CStr(.lSequencial) & Chr(vbKeyEscape) & _
                      CStr(.iTipo) & Chr(vbKeyEscape) & _
                      CStr(.iAdmMeioPagto) & Chr(vbKeyEscape) & _
                      CStr(.iParcelamento) & Chr(vbKeyEscape) & _
                      CStr(.dtDataMovimento) & Chr(vbKeyEscape) & _
                      CStr(.dValor) & Chr(vbKeyEscape) & _
                      CStr(.iGerente) & Chr(vbKeyEscape) & _
                      CStr(.dHora) & Chr(vbKeyEscape) & _
                      CStr(.lNumRefInterna) & Chr(vbKeyEscape)
    End With

    objLog.sLog = objLog.sLog & Chr(vbKeyEnd)

    If objLog.colRegistro.Count > 0 Then
        objLog.colRegistro.Add objLog.sLog
    End If

    Exit Sub

Erro_Mover_Dados_MovcxTkt_Log:

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151139)

    End Select

    Exit Sub

End Sub

Function MovimentosCaixa_Excluir_MovcxTkt(ByVal objMovCx As ClassMovimentoCaixa) As Long
'excluir o movimentos de caixa
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lErro As Long
Dim alComando(1 To 2) As Long
Dim iIndice As Integer
Dim objCCMovDia As New ClassCCMovDia
Dim objTipoMeioPagtoLojaFilial As New ClassTMPLojaFilial
Dim dValorEspecif As Double
Dim dValorNaoEspecif As Double
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim objLog As New ClassLog
Dim tMovCx As typeMovimentoCaixa

On Error GoTo Erro_MovimentosCaixa_Excluir_MovcxTkt

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 112290
    Next

    'selecionar os registros da tabela de MovimentosCaixa referente a saida de ticket do caixa que está sendo excluida
    lErro = Comando_ExecutarPos(alComando(1), "SELECT NumMovto, Tipo, AdmMeioPagto, Parcelamento, DataMovimento, Valor, NumIntDocLog, QuantLog FROM MovimentosCaixa WHERE FilialEmpresa = ? AND Caixa = ? AND Tipo = ? AND AdmMeioPagto = ? AND Parcelamento = ? AND NumRefInterna = ?", 0, tMovCx.lNumMovto, tMovCx.iTipo, tMovCx.iAdmMeioPagto, tMovCx.iParcelamento, tMovCx.dtDataMovimento, tMovCx.dValor, tMovCx.lNumIntDocLog, tMovCx.iQuantLog, objMovCx.iFilialEmpresa, objMovCx.iCaixa, MOVIMENTOCAIXA_SANGRIA_TICKET, objMovCx.iAdmMeioPagto, objMovCx.iParcelamento, objMovCx.lNumMovto)
    If lErro <> AD_SQL_SUCESSO Then gError 112291

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112292

    If lErro = AD_SQL_SEM_DADOS Then gError 112293

    objMovCx.iTipo = tMovCx.iTipo
    objMovCx.iAdmMeioPagto = tMovCx.iAdmMeioPagto
    objMovCx.iParcelamento = tMovCx.iParcelamento
    objMovCx.dtDataMovimento = tMovCx.dtDataMovimento
    objMovCx.dValor = tMovCx.dValor
    objMovCx.lNumMovto = tMovCx.lNumMovto

    'preenche um objccmovdia com os dados do movimento de saque do caixa
    lErro = CF("Mover_Dados_Saque_CCMovDia", objMovCx, objCCMovDia)
    If lErro <> SUCESSO Then gError 112294

    objCCMovDia.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_VALE_TICKET

    'subtrai o mesmo no consolidado diário
    lErro = CF("CCMovDia_Exclui", objCCMovDia)
    If lErro <> SUCESSO Then gError 112295

    'subtrai o mesmo no consolidado anual no mês em questão
    lErro = CF("CCMov_Exclui", objCCMovDia)
    If lErro <> SUCESSO Then gError 112296

    lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM MovimentosCaixa", alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 112297

    objMovCx.iCaixa = CODIGO_CAIXA_CENTRAL

    'selecionar os registros da tabela de MovimentosCaixa referente a entrada de ticket no caixa central que está sendo excluida
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Tipo, AdmMeioPagto, Parcelamento, DataMovimento, Valor, NumMovto FROM MovimentosCaixa WHERE FilialEmpresa = ? AND Caixa = ? AND Tipo = ? AND AdmMeioPagto = ? AND Parcelamento = ? AND NumRefInterna = ?", 0, tMovCx.iTipo, tMovCx.iAdmMeioPagto, tMovCx.iParcelamento, tMovCx.dtDataMovimento, tMovCx.dValor, tMovCx.lNumMovto, objMovCx.iFilialEmpresa, objMovCx.iCaixa, MOVIMENTOCAIXA_ENT_SANGRIA_TICKET, objMovCx.iAdmMeioPagto, objMovCx.iParcelamento, objMovCx.lNumMovto)
    If lErro <> AD_SQL_SUCESSO Then gError 112298

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112299

    If lErro = AD_SQL_SEM_DADOS Then gError 112300

    objMovCx.iTipo = tMovCx.iTipo
    objMovCx.iAdmMeioPagto = tMovCx.iAdmMeioPagto
    objMovCx.iParcelamento = tMovCx.iParcelamento
    objMovCx.dtDataMovimento = tMovCx.dtDataMovimento
    objMovCx.dValor = tMovCx.dValor
    objMovCx.lNumMovto = tMovCx.lNumMovto
    
    Set objCCMovDia = New ClassCCMovDia
    
    'preenche um objccmovdia com os dados do movimento de deposito no caixa central
    lErro = Mover_Dados_Deposito_CCMovDia(objMovCx, objCCMovDia)
    If lErro <> SUCESSO Then gError 112301

    objCCMovDia.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_VALE_TICKET

    'subtrai o mesmo no consolidado diário
    lErro = CF("CCMovDia_Exclui", objCCMovDia)
    If lErro <> SUCESSO Then gError 112302

    'subtrai o mesmo no consolidado anual no mês em questão
    lErro = CF("CCMov_Exclui", objCCMovDia)
    If lErro <> SUCESSO Then gError 112303

    lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM MovimentosCaixa", alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 112304

    'se for um movimento nao especificado
    If objMovCx.iAdmMeioPagto = 0 Then

        objTipoMeioPagtoLojaFilial.dSaldo = -objMovCx.dValor
        objTipoMeioPagtoLojaFilial.iFilialEmpresa = objMovCx.iFilialEmpresa
        objTipoMeioPagtoLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_VALE_TICKET

        'altera o saldo atual na tabela de tipomeiopagtoloja
        lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTipoMeioPagtoLojaFilial)
        If lErro <> SUCESSO Then gError 112305

    Else

        objAdmMeioPagtoCondPagto.dSaldo = -objMovCx.dValor
        objAdmMeioPagtoCondPagto.iAdmMeioPagto = objMovCx.iAdmMeioPagto
        objAdmMeioPagtoCondPagto.iParcelamento = objMovCx.iParcelamento
        objAdmMeioPagtoCondPagto.iFilialEmpresa = objMovCx.iFilialEmpresa

        'Função para Alteração de Saldo
        lErro = CF("AdmMeioPagtoCondPagto_Altera_Saldo", objAdmMeioPagtoCondPagto)
        If lErro <> SUCESSO Then gError 112306

    End If

    objLog.lNumIntDoc = tMovCx.lNumIntDocLog
    objLog.iQuantLog = tMovCx.iQuantLog
    
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
        'grava o log
        lErro = CF("Log_Exclui", objLog)
        If lErro <> SUCESSO Then gError 112307
    End If
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    MovimentosCaixa_Excluir_MovcxTkt = SUCESSO

    Exit Function

Erro_MovimentosCaixa_Excluir_MovcxTkt:

    MovimentosCaixa_Excluir_MovcxTkt = gErr

    Select Case gErr

        Case 112290
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 112291, 112292, 112298, 112299
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVCAIXA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa, objMovCx.lSequencial)

        Case 112293, 112300
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOCAIXA_NAO_CADASTRADO1", gErr)

        Case 112294 To 112296, 112301 To 112303, 112305 To 112307

        Case 112297, 112304
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_MOVCAIXA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa, objMovCx.lSequencial)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151140)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Registro_ECF_MovcxOut(ByVal colRegistro As Collection, ByVal sArquivo As String, ByVal iRegistro As Integer) As Long
'Trata o registro de movimentacao de outros e coloca os dados no bd do caixa central. sArquivo contem o nome do arquivo em que sRegistro foi lido.
'iRegistro é o numero do registro.

Dim objMovCx As New ClassMovimentoCaixa
Dim lErro As Long
Dim iPosKeyLButton As Integer
Dim sRegistro As String

On Error GoTo Erro_Registro_ECF_MovcxOut

    sRegistro = colRegistro(1)

    iPosKeyLButton = InStr(sRegistro, Chr(vbKeyLButton))

    If iPosKeyLButton <> 0 Then

        objMovCx.lNumMovtoArq = CLng(left(sRegistro, iPosKeyLButton - 1))

    End If

    objMovCx.sArquivo = sArquivo


    'guarda as infos de movimento de caixa
    lErro = CF("MovcxOut_Movcx", colRegistro, objMovCx)
    If lErro <> SUCESSO Then gError 112308
    
    lErro = Verifica_Existencia_Sequencial(objMovCx.lSequencial, objMovCx.iCaixa, objMovCx.iFilialEmpresa)
    If lErro <> SUCESSO And lErro <> 112627 Then gError 112631
    
    If lErro <> 112627 Then
    
        If objMovCx.iTipo = MOVIMENTOCAIXA_SANGRIA_OUTROS Then
    
            'guarda as infos de movimento de caixa relativos a sangria outros
            lErro = CF("MovimentosCaixa_Gravar_MovcxOut", objMovCx)
            If lErro <> SUCESSO Then gError 112309
    
        ElseIf objMovCx.iTipo = MOVIMENTOCAIXA_EXCLUSAO_SANGRIA_OUTROS Then
    
            'guarda as infos de movimento de caixa relativos a exclusao da sangria outros
            lErro = CF("MovimentosCaixa_Excluir_MovcxOut", objMovCx)
            If lErro <> SUCESSO Then gError 112310
    
        End If
    End If
    
    Registro_ECF_MovcxOut = SUCESSO

    Exit Function

Erro_Registro_ECF_MovcxOut:

    Registro_ECF_MovcxOut = gErr

    Select Case gErr

        Case 112308 To 112310, 112631

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151141)

    End Select

    Exit Function

End Function

Function MovcxOut_Movcx(ByVal colRegistro As Collection, ByVal objMovCx As ClassMovimentoCaixa) As Long
'guarda as infos de movimento de caixa relativos a sangria outros

Dim lErro As Long
Dim iPosAtual As Integer
Dim iPosFimAtual As Integer
Dim sRegistro As String


On Error GoTo Erro_MovcxOut_Movcx

    sRegistro = colRegistro(1)

    iPosFimAtual = InStr(sRegistro, Chr(vbKeyControl))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iTipo = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dHora = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dtDataMovimento = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iGerente = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iCodOperador = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.lSequencial = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dValor = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iAdmMeioPagto = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iParcelamento = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iCaixa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.lNumMovto = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
    MovcxOut_Movcx = SUCESSO

    Exit Function

Erro_MovcxOut_Movcx:

    MovcxOut_Movcx = gErr

    Select Case gErr

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151142)

    End Select

    Exit Function

End Function

Function MovimentosCaixa_Gravar_MovcxOut(ByVal objMovCx As ClassMovimentoCaixa) As Long
'gravar o movimento de caixa
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer
Dim objCCMovDia As New ClassCCMovDia
Dim objTipoMeioPagtoLojaFilial As New ClassTMPLojaFilial
Dim dValorEspecif As Double
Dim dValorNaoEspecif As Double
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim objLog As New ClassLog
Dim lNumAuto As Long
Dim lSeq As Long

On Error GoTo Erro_MovimentosCaixa_Gravar_MovcxOut

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 112311
    Next

    'reserva um conjunto de numeros internos de movimento de caixa
    lErro = CF("Config_ObterNumInt", "LojaConfig", "NUM_PROX_MOVCAIXACENTRAL", lNumAuto, 2, objMovCx.iFilialEmpresa)
    If lErro <> SUCESSO Then gError 112312
    
    objMovCx.lNumRefInterna = objMovCx.lNumMovto
    objMovCx.lNumMovto = lNumAuto

    'diz o tipo de operação a ser logada
    objLog.iOperacao = SANGRIA_OUTROS

    'preenche o objLog com o movimento do caixa
    Call Mover_Dados_MovcxOut_Log(objMovCx, objLog)
    
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
        'grava o log
        lErro = CF("Log_Grava", objLog, objLog.colRegistro)
        If lErro <> SUCESSO Then gError 112313
    End If
    
    objMovCx.lNumIntDocLog = objLog.lNumIntDoc
    objMovCx.iQuantLog = objLog.iQuantLog

    'insere novo registro na tabela de MovimentosCaixa referente a saida outros do caixa
    lErro = Comando_Executar(alComando(1), "INSERT INTO MovimentosCaixa(FilialEmpresa, NumMovto, Caixa, Operador, Sequencial, Tipo, AdmMeioPagto, Parcelamento, DataMovimento, Valor, Gerente, Hora, NumIntDocLog, QuantLog, NumRefInterna, Arquivo, NumMovtoArq ) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", objMovCx.iFilialEmpresa, objMovCx.lNumMovto, objMovCx.iCaixa, objMovCx.iCodOperador, objMovCx.lSequencial, objMovCx.iTipo, objMovCx.iAdmMeioPagto, objMovCx.iParcelamento, objMovCx.dtDataMovimento, objMovCx.dValor, objMovCx.iGerente, objMovCx.dHora, objMovCx.lNumIntDocLog, objMovCx.iQuantLog, objMovCx.lNumRefInterna, objMovCx.sArquivo, objMovCx.lNumMovtoArq)
    If lErro <> AD_SQL_SUCESSO Then gError 112314
    
    Set objCCMovDia = New ClassCCMovDia
    
    'preenche um objccmovdia com os dados do movimento de saque do caixa
    lErro = CF("Mover_Dados_Saque_CCMovDia", objMovCx, objCCMovDia)
    If lErro <> SUCESSO Then gError 112315

    objCCMovDia.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_OUTROS

    'adiciona o mesmo no consolidado diário
    lErro = CF("CCMovDia_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 112316

    'adiciona o mesmo no consolidado anual no mês em questão
    lErro = CF("CCMov_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 112317

    objMovCx.lNumRefInterna = objMovCx.lNumMovto
    objMovCx.iCaixa = CODIGO_CAIXA_CENTRAL
    objMovCx.lNumMovto = lNumAuto + 1
    objMovCx.iTipo = MOVIMENTOCAIXA_ENT_SANGRIA_OUTROS
    
    lErro = CF("Caixa_Sequencial_EmTrans", CODIGO_CAIXA_CENTRAL, objMovCx.iFilialEmpresa, lSeq)
    If lErro <> SUCESSO Then gError 111603
    
    objMovCx.lSequencial = lSeq

    'insere novo registro na tabela de MovimentosCaixa referente a entrada outros no caixa central
    lErro = Comando_Executar(alComando(1), "INSERT INTO MovimentosCaixa(FilialEmpresa, NumMovto, Caixa, Operador, Sequencial, Tipo, AdmMeioPagto, Parcelamento, DataMovimento, Valor, Gerente, Hora, NumIntDocLog, QuantLog, NumRefInterna, Arquivo, NumMovtoArq ) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", objMovCx.iFilialEmpresa, objMovCx.lNumMovto, objMovCx.iCaixa, objMovCx.iCodOperador, objMovCx.lSequencial, objMovCx.iTipo, objMovCx.iAdmMeioPagto, objMovCx.iParcelamento, objMovCx.dtDataMovimento, objMovCx.dValor, objMovCx.iGerente, objMovCx.dHora, objMovCx.lNumIntDocLog, objMovCx.iQuantLog, objMovCx.lNumRefInterna, objMovCx.sArquivo, objMovCx.lNumMovtoArq)
    If lErro <> AD_SQL_SUCESSO Then gError 112318
    
    Set objCCMovDia = New ClassCCMovDia
    
    'preenche um objccmovdia com os dados do movimento de deposito no caixa central
    lErro = Mover_Dados_Deposito_CCMovDia(objMovCx, objCCMovDia)
    If lErro <> SUCESSO Then gError 112319

    objCCMovDia.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_OUTROS

    'adiciona o mesmo no consolidado diário
    lErro = CF("CCMovDia_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 112320

    'adiciona o mesmo no consolidado anual no mês em questão
    lErro = CF("CCMov_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 112321

    'se for um movimento nao especificado
    If objMovCx.iAdmMeioPagto = 0 Then

        'Valor Outros não Especificados
        objTipoMeioPagtoLojaFilial.dSaldo = objMovCx.dValor
        objTipoMeioPagtoLojaFilial.iFilialEmpresa = objMovCx.iFilialEmpresa
        objTipoMeioPagtoLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_OUTROS

        'Função que Serve para atualizar Saldo de Outros nao especificados
        lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTipoMeioPagtoLojaFilial)
        If lErro <> SUCESSO Then gError 112322

    Else

        'Mover Valor de Outros Especificado para admMeioPagtoCondPagto.Saldo
        objAdmMeioPagtoCondPagto.dSaldo = objMovCx.dValor
        objAdmMeioPagtoCondPagto.iAdmMeioPagto = objMovCx.iAdmMeioPagto
        objAdmMeioPagtoCondPagto.iParcelamento = objMovCx.iParcelamento
        objAdmMeioPagtoCondPagto.iFilialEmpresa = objMovCx.iFilialEmpresa

        'Função para Alteração de Saldo
        lErro = CF("AdmMeioPagtoCondPagto_Altera_Saldo", objAdmMeioPagtoCondPagto)
        If lErro <> SUCESSO Then gError 112323

    End If

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    MovimentosCaixa_Gravar_MovcxOut = SUCESSO

    Exit Function

Erro_MovimentosCaixa_Gravar_MovcxOut:

    MovimentosCaixa_Gravar_MovcxOut = gErr

    Select Case gErr

        Case 112311
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 112312, 112313, 112315 To 112317, 112319 To 112323, 111603

        Case 112314, 112318
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MOVCAIXA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa, objMovCx.lSequencial)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151143)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Sub Mover_Dados_MovcxOut_Log(objMovimentoCaixa As ClassMovimentoCaixa, objLog As ClassLog)
'Função que recebe um objMovimentoCaixa com todos os dados preenchidos e preenche a string de um
'objLog para prepará-lo para a gravação

Dim sLog As String

On Error GoTo Erro_Mover_Dados_MovcxOut_Log

    'preenche os dados do log com cada atributo do objMovimentoCaixa separado por vbkeyscape
    With objMovimentoCaixa
        objLog.sLog = CStr(.iFilialEmpresa) & Chr(vbKeyEscape) & _
                      CStr(.lNumMovto) & Chr(vbKeyEscape) & _
                      CStr(.iCaixa) & Chr(vbKeyEscape) & _
                      CStr(.iCodOperador) & Chr(vbKeyEscape) & _
                      CStr(.lSequencial) & Chr(vbKeyEscape) & _
                      CStr(.iTipo) & Chr(vbKeyEscape) & _
                      CStr(.iAdmMeioPagto) & Chr(vbKeyEscape) & _
                      CStr(.iParcelamento) & Chr(vbKeyEscape) & _
                      CStr(.dtDataMovimento) & Chr(vbKeyEscape) & _
                      CStr(.dValor) & Chr(vbKeyEscape) & _
                      CStr(.iGerente) & Chr(vbKeyEscape) & _
                      CStr(.dHora) & Chr(vbKeyEscape) & _
                      CStr(.lNumRefInterna) & Chr(vbKeyEscape)
    End With

    objLog.sLog = objLog.sLog & Chr(vbKeyEnd)

    If objLog.colRegistro.Count > 0 Then
        objLog.colRegistro.Add objLog.sLog
    End If

    Exit Sub

Erro_Mover_Dados_MovcxOut_Log:

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151144)

    End Select

    Exit Sub

End Sub

Function MovimentosCaixa_Excluir_MovcxOut(ByVal objMovCx As ClassMovimentoCaixa) As Long
'excluir o movimentos de caixa
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lErro As Long
Dim alComando(1 To 2) As Long
Dim iIndice As Integer
Dim objCCMovDia As New ClassCCMovDia
Dim objTipoMeioPagtoLojaFilial As New ClassTMPLojaFilial
Dim dValorEspecif As Double
Dim dValorNaoEspecif As Double
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim objLog As New ClassLog
Dim tMovCx As typeMovimentoCaixa

On Error GoTo Erro_MovimentosCaixa_Excluir_MovcxOut

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 112324
    Next

    'selecionar os registros da tabela de MovimentosCaixa referente a saida de ticket do caixa que está sendo excluida
    lErro = Comando_ExecutarPos(alComando(1), "SELECT NumMovto, Tipo, AdmMeioPagto, Parcelamento, DataMovimento, Valor, NumIntDocLog, QuantLog FROM MovimentosCaixa WHERE FilialEmpresa = ? AND Caixa = ? AND Tipo = ? AND AdmMeioPagto = ? AND Parcelamento = ? AND NumRefInterna = ?", 0, tMovCx.lNumMovto, tMovCx.iTipo, tMovCx.iAdmMeioPagto, tMovCx.iParcelamento, tMovCx.dtDataMovimento, tMovCx.dValor, tMovCx.lNumIntDocLog, tMovCx.iQuantLog, objMovCx.iFilialEmpresa, objMovCx.iCaixa, MOVIMENTOCAIXA_SANGRIA_OUTROS, objMovCx.iAdmMeioPagto, objMovCx.iParcelamento, objMovCx.lNumMovto)
    If lErro <> AD_SQL_SUCESSO Then gError 112325

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112326

    If lErro = AD_SQL_SEM_DADOS Then gError 112327

    objMovCx.iTipo = tMovCx.iTipo
    objMovCx.iAdmMeioPagto = tMovCx.iAdmMeioPagto
    objMovCx.iParcelamento = tMovCx.iParcelamento
    objMovCx.dtDataMovimento = tMovCx.dtDataMovimento
    objMovCx.dValor = tMovCx.dValor
    objMovCx.lNumMovto = tMovCx.lNumMovto

    'preenche um objccmovdia com os dados do movimento de saque do caixa
    lErro = CF("Mover_Dados_Saque_CCMovDia", objMovCx, objCCMovDia)
    If lErro <> SUCESSO Then gError 112328

    objCCMovDia.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_OUTROS

    'subtrai o mesmo no consolidado diário
    lErro = CF("CCMovDia_Exclui", objCCMovDia)
    If lErro <> SUCESSO Then gError 112329

    'subtrai o mesmo no consolidado anual no mês em questão
    lErro = CF("CCMov_Exclui", objCCMovDia)
    If lErro <> SUCESSO Then gError 112330

    lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM MovimentosCaixa", alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 112331

    objMovCx.iCaixa = CODIGO_CAIXA_CENTRAL

    'selecionar os registros da tabela de MovimentosCaixa referente a entrada de ticket no caixa central que está sendo excluida
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Tipo, AdmMeioPagto, Parcelamento, DataMovimento, Valor, NumMovto FROM MovimentosCaixa WHERE FilialEmpresa = ? AND Caixa = ? AND Tipo = ? AND AdmMeioPagto = ? AND Parcelamento = ? AND NumRefInterna = ?", 0, tMovCx.iTipo, tMovCx.iAdmMeioPagto, tMovCx.iParcelamento, tMovCx.dtDataMovimento, tMovCx.dValor, tMovCx.lNumMovto, objMovCx.iFilialEmpresa, objMovCx.iCaixa, MOVIMENTOCAIXA_ENT_SANGRIA_OUTROS, objMovCx.iAdmMeioPagto, objMovCx.iParcelamento, objMovCx.lNumMovto)
    If lErro <> AD_SQL_SUCESSO Then gError 112332

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112333

    If lErro = AD_SQL_SEM_DADOS Then gError 112334
    
    objMovCx.iTipo = tMovCx.iTipo
    objMovCx.iAdmMeioPagto = tMovCx.iAdmMeioPagto
    objMovCx.iParcelamento = tMovCx.iParcelamento
    objMovCx.dtDataMovimento = tMovCx.dtDataMovimento
    objMovCx.dValor = tMovCx.dValor
    objMovCx.lNumMovto = tMovCx.lNumMovto
    
    Set objCCMovDia = New ClassCCMovDia
    
    'preenche um objccmovdia com os dados do movimento de deposito no caixa central
    lErro = Mover_Dados_Deposito_CCMovDia(objMovCx, objCCMovDia)
    If lErro <> SUCESSO Then gError 112335

    objCCMovDia.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_OUTROS

    'subtrai o mesmo no consolidado diário
    lErro = CF("CCMovDia_Exclui", objCCMovDia)
    If lErro <> SUCESSO Then gError 112336

    'subtrai o mesmo no consolidado anual no mês em questão
    lErro = CF("CCMov_Exclui", objCCMovDia)
    If lErro <> SUCESSO Then gError 112337

    lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM MovimentosCaixa", alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 112338

    'se for um movimento nao especificado
    If objMovCx.iAdmMeioPagto = 0 Then

        objTipoMeioPagtoLojaFilial.dSaldo = -objMovCx.dValor
        objTipoMeioPagtoLojaFilial.iFilialEmpresa = objMovCx.iFilialEmpresa
        objTipoMeioPagtoLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_OUTROS

        'altera o saldo atual na tabela de tipomeiopagtoloja
        lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTipoMeioPagtoLojaFilial)
        If lErro <> SUCESSO Then gError 112339

    Else

        objAdmMeioPagtoCondPagto.dSaldo = -objMovCx.dValor
        objAdmMeioPagtoCondPagto.iAdmMeioPagto = objMovCx.iAdmMeioPagto
        objAdmMeioPagtoCondPagto.iParcelamento = objMovCx.iParcelamento
        objAdmMeioPagtoCondPagto.iFilialEmpresa = objMovCx.iFilialEmpresa

        'Função para Alteração de Saldo
        lErro = CF("AdmMeioPagtoCondPagto_Altera_Saldo", objAdmMeioPagtoCondPagto)
        If lErro <> SUCESSO Then gError 112340

    End If

    objLog.lNumIntDoc = tMovCx.lNumIntDocLog
    objLog.iQuantLog = tMovCx.iQuantLog
    
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
        'grava o log
        lErro = CF("Log_Exclui", objLog)
        If lErro <> SUCESSO Then gError 112341
    End If
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    MovimentosCaixa_Excluir_MovcxOut = SUCESSO

    Exit Function

Erro_MovimentosCaixa_Excluir_MovcxOut:

    MovimentosCaixa_Excluir_MovcxOut = gErr

    Select Case gErr

        Case 112324
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 112325, 112326, 112332, 112333
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVCAIXA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa, objMovCx.lSequencial)

        Case 112327, 112334
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVCAIXA_NAO_CADASTRADA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa)

        Case 112328, 112329, 112330, 112335 To 112337, 112339 To 112341

        Case 112331, 112338
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_MOVCAIXA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa, objMovCx.lSequencial)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151145)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Registro_ECF_Movcx(ByVal colRegistro As Collection, ByVal sArquivo As String, ByVal iRegistro As Integer) As Long
'Trata o registro de movimentacao de caixa e coloca os dados no bd do caixa central. sArquivo contem o nome do arquivo em que sRegistro foi lido.
'iRegistro é o numero do registro.

Dim iPosAtual As Integer
Dim iPosFimAtual As Integer
Dim objMovCx As New ClassMovimentoCaixa
Dim lErro As Long
Dim iPosKeyLButton As Integer
Dim sRegistro As String

On Error GoTo Erro_Registro_ECF_Movcx

    sRegistro = colRegistro(1)

    iPosKeyLButton = InStr(sRegistro, Chr(vbKeyLButton))

    If iPosKeyLButton <> 0 Then

        objMovCx.lNumMovtoArq = CLng(left(sRegistro, iPosKeyLButton - 1))

    End If
    
    objMovCx.sArquivo = sArquivo

    'guarda as infos de movimento de caixa
    lErro = CF("Movcx_Movcx", colRegistro, objMovCx)
    If lErro <> SUCESSO Then gError 112342
    
    lErro = Verifica_Existencia_Sequencial(objMovCx.lSequencial, objMovCx.iCaixa, objMovCx.iFilialEmpresa)
    If lErro <> SUCESSO And lErro <> 112627 Then gError 112633
    
    If lErro <> 112627 Then
    
        Select Case objMovCx.iTipo
    
            Case MOVIMENTO_CAIXA_ABERTURA
    
                'guarda as infos de movimento de caixa relativos a abertura de caixa
                lErro = CF("MovimentosCaixa_Gravar_AbtCx", objMovCx)
                If lErro <> SUCESSO Then gError 112343
    
            Case MOVIMENTO_CAIXA_LEITURA_X, MOVIMENTO_CAIXA_REDUCAO_Z, MOVIMENTO_CAIXA_LEITURA_MEMORIA_FISCAL
    
                'guarda as infos de movimento de caixa
                lErro = CF("MovimentosCaixa_Gravar_Movcx", objMovCx)
                If lErro <> SUCESSO Then gError 112345
    
            Case MOVIMENTO_CAIXA_SESSAO_ABERTURA
    
                'guarda as infos de movimento de caixa relativos à abertura de sessao
                lErro = CF("MovimentosCaixa_Gravar_AbtSessao", objMovCx)
                If lErro <> SUCESSO Then gError 112346
    
            Case MOVIMENTO_CAIXA_SESSAO_SUSPENSAO
    
                'guarda as infos de movimento de caixa relativos à suspensao de sessao
                lErro = CF("MovimentosCaixa_Gravar_SuspSessao", objMovCx)
                If lErro <> SUCESSO Then gError 112347
    
            Case MOVIMENTO_CAIXA_SESSAO_FECHAMENTO
    
                'guarda as infos de movimento de caixa relativos à abertura de sessao
                lErro = CF("MovimentosCaixa_Gravar_FchSessao", objMovCx)
                If lErro <> SUCESSO Then gError 112348
    
        End Select
    
    End If
    
    Registro_ECF_Movcx = SUCESSO

    Exit Function

Erro_Registro_ECF_Movcx:

    Registro_ECF_Movcx = gErr

    Select Case gErr

        Case 112342 To 112348, 112633

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151146)

    End Select

    Exit Function

End Function

Private Function Movcx_FechamentoCaixa(ByVal colRegistro As Collection, ByVal objMovCx As ClassMovimentoCaixa, ByVal objLojaArqFisMestre As ClassLojaArqFisMestre, ByVal colLojaArqFisAnalitico As Collection, ByVal objUltimaReducao As ClassUltimaReducao) As Long
'guarda as infos do fechamento de caixa

Dim lErro As Long
Dim objLojaArqFisAnalitico As ClassLojaArqFisAnalitico
Dim objAliquota As ClassAliquotaICMS
Dim iPosAtual As Integer
Dim iPosFimAtual As Integer
Dim sRegistro As String
Dim iRegistroCol As Integer
Dim iIndice As Integer

On Error GoTo Erro_Movcx_FechamentoCaixa

    sRegistro = colRegistro(1)
    iRegistroCol = 1

    iPosFimAtual = InStr(sRegistro, Chr(vbKeyControl))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iTipo = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dHora = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dtDataMovimento = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iGerente = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iCodOperador = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.lSequencial = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iCaixa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objLojaArqFisMestre.iCodECF = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objLojaArqFisMestre.sNumSerieECF = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objLojaArqFisMestre.dGrandeTotal = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objLojaArqFisMestre.lCOOIni = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objLojaArqFisMestre.lCOOFim = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objLojaArqFisMestre.lCRO = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objLojaArqFisMestre.lCRZ = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objLojaArqFisMestre.dVendaBruta = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objLojaArqFisMestre.dtData = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objLojaArqFisMestre.iNumEquip = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
    objLojaArqFisMestre.iFilialEmpresa = objMovCx.iFilialEmpresa
    
    iPosAtual = iPosFimAtual + 1
    
    If iPosAtual > Len(sRegistro) Then
        iRegistroCol = iRegistroCol + 1
        iPosAtual = 1
    End If
    
    For iIndice = iRegistroCol To colRegistro.Count

        sRegistro = colRegistro.Item(iIndice)
    
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    
        Do While iPosAtual <= Len(sRegistro) And iPosFimAtual <> 0
   
            Set objLojaArqFisAnalitico = New ClassLojaArqFisAnalitico
        
            objLojaArqFisAnalitico.sSituacaoTrib = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)
            
            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            
            objLojaArqFisAnalitico.dTotalizador = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        
            colLojaArqFisAnalitico.Add objLojaArqFisAnalitico
        
        Loop
    
        If iPosAtual <= Len(sRegistro) Then
            iRegistroCol = iIndice
            Exit For
        Else
            iPosAtual = 1
        End If
            
    
    Next
    
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
    
    If iPosFimAtual <> 0 Then
    
        objUltimaReducao.dAcrescimoICMS = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
        objUltimaReducao.dAcrescimoISS = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
        objUltimaReducao.dAcrescimoNaoFiscal = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
        objUltimaReducao.dCancelamentoICMS = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
        objUltimaReducao.dCancelamentoISS = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
        objUltimaReducao.dCancelamentoNaoFiscal = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
        objUltimaReducao.dDescontoICMS = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
        objUltimaReducao.dDescontoISS = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
        objUltimaReducao.dDescontoNaoFiscal = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
        objUltimaReducao.dIsentoICMS = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
        objUltimaReducao.dIsentoISS = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
        objUltimaReducao.dNaoIncideICMS = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
        objUltimaReducao.dNaoIncideISS = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
        objUltimaReducao.dSubstTribICMS = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
        objUltimaReducao.dSubstTribISS = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
        objUltimaReducao.dTotalNaoFiscal = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
        objUltimaReducao.dtDataReducao = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
        objUltimaReducao.dVendaBruta = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
        objUltimaReducao.sIncidenciaDescontoISS = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)
        
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
        objUltimaReducao.sHoraReducao = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)
        
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
        objUltimaReducao.dtDataMovimento = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
        objUltimaReducao.lCOOReducaoZ = StrParaLong(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
        
        iPosAtual = iPosFimAtual + 1
        
        If iPosAtual > Len(sRegistro) Then
            iRegistroCol = iRegistroCol + 1
            iPosAtual = 1
        End If
        
        For iIndice = iRegistroCol To colRegistro.Count

            sRegistro = colRegistro.Item(iIndice)
    
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
    
            Do While iPosAtual <= Len(sRegistro) And iPosFimAtual <> 0
        
                Set objAliquota = New ClassAliquotaICMS
            
                'formato 18,00 ou 12,00
                objAliquota.dAliquota = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                
                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
                
                objAliquota.iISS = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                
                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
            
                objAliquota.dValorTotalizadoLoja = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                
                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
            
                objUltimaReducao.colAliquotas.Add objAliquota
            
            Loop
            
        Next
    
    End If
    
    Movcx_FechamentoCaixa = SUCESSO

    Exit Function

Erro_Movcx_FechamentoCaixa:

    Movcx_FechamentoCaixa = gErr

    Select Case gErr

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151147)

    End Select

    Exit Function

End Function

Function Registro_ECF_FechamentoCaixa(ByVal colRegistro As Collection, ByVal sArquivo As String, ByVal iRegistro As Integer) As Long
'Trata o registro de fechamento de caixa e coloca os dados no bd do caixa central. sArquivo contem o nome do arquivo em que sRegistro foi lido.
'iRegistro é o numero do registro.

Dim objMovCx As New ClassMovimentoCaixa
Dim lErro As Long
Dim objLojaArqFisMestre As New ClassLojaArqFisMestre
Dim colLojaArqFisAnalitico As New Collection
Dim objUltimaReducao As New ClassUltimaReducao
Dim iPosKeyLButton As Integer
Dim sRegistro As String

On Error GoTo Erro_Registro_ECF_FechamentoCaixa

    sRegistro = colRegistro(1)

    iPosKeyLButton = InStr(sRegistro, Chr(vbKeyLButton))

    If iPosKeyLButton <> 0 Then

        objMovCx.lNumMovtoArq = CLng(left(sRegistro, iPosKeyLButton - 1))

    End If
    
    objMovCx.sArquivo = sArquivo

    'guarda as infos de movimento de caixa
    lErro = Movcx_FechamentoCaixa(colRegistro, objMovCx, objLojaArqFisMestre, colLojaArqFisAnalitico, objUltimaReducao)
    If lErro <> SUCESSO Then gError 105964
    
    lErro = Verifica_Existencia_Sequencial(objMovCx.lSequencial, objMovCx.iCaixa, objMovCx.iFilialEmpresa)
    If lErro <> SUCESSO And lErro <> 112627 Then gError 105965
    
    If lErro <> 112627 Then
    
        'guarda as infos de movimento de caixa relativos ao fechamento de caixa
        lErro = CF("MovimentosCaixa_Gravar_FchCx", objMovCx, objLojaArqFisMestre, colLojaArqFisAnalitico, objUltimaReducao)
        If lErro <> SUCESSO Then gError 105966
    
    End If
    
    Registro_ECF_FechamentoCaixa = SUCESSO

    Exit Function

Erro_Registro_ECF_FechamentoCaixa:

    Registro_ECF_FechamentoCaixa = gErr

    Select Case gErr

        Case 112343 To 112348, 112633

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151148)

    End Select

    Exit Function

End Function


Function Movcx_Movcx(ByVal colRegistro As Collection, ByVal objMovCx As ClassMovimentoCaixa) As Long
'guarda as infos de movimento de caixa relativos a operacoes de caixa (abertura/fechamento/etc)

Dim iPosAtual As Integer
Dim iPosFimAtual As Integer
Dim lErro As Long
Dim vRegistro As Variant
Dim sRegistro As String

On Error GoTo Erro_Movcx_Movcx

'    For Each vRegistro In colRegistro
'
'        sRegistro = vRegistro
'
'        Do While Mid(sRegistro, iPosFimAtual + 1, 1) <> Chr(vbKeyEnd) And iPosFimAtual + 1 <= Len(sRegistro)
'
'            iPosAtual = iPosFimAtual + 1
'            iPosFimAtual = InStr(iPosAtual, vRegistro, Chr(vbKeyShift))
'            lSequencialCaixa = CLng(Mid(vRegistro, iPosAtual, iPosFimAtual - iPosAtual))
'
'            lErro = Comando_Executar(alComando(1), "SELECT SequencialLoja From ChequePre WHERE FilialEmpresaLoja = ? AND Caixa = ? AND SequencialCaixa = ?", lSequencialLoja, objMovCx.iFilialEmpresa, objMovCx.iCaixa, lSequencialCaixa)
'            If lErro <> AD_SQL_SUCESSO Then gError 126030
'
'            lErro = Comando_BuscarPrimeiro(alComando(1))
'            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126031
'
'            If lErro = AD_SQL_SEM_DADOS Then gError 126032
'
'            colCheque.Add lSequencialLoja
'
'        Loop
'
'        iPosFimAtual = 0
'
'    Next


    sRegistro = colRegistro(1)

    iPosFimAtual = InStr(sRegistro, Chr(vbKeyControl))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iTipo = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dHora = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dtDataMovimento = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iGerente = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iCodOperador = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.lSequencial = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iCaixa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))



    Movcx_Movcx = SUCESSO

    Exit Function

Erro_Movcx_Movcx:

    Movcx_Movcx = gErr

    Select Case gErr

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151149)

    End Select

    Exit Function

End Function

Function MovimentosCaixa_Gravar_AbtCx(ByVal objMovCx As ClassMovimentoCaixa) As Long
'gravar o movimento de caixa
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lErro As Long
Dim alComando(1 To 3) As Long
Dim iIndice As Integer
Dim objLog As New ClassLog
Dim colMovCx As New Collection
Dim lNumAuto As Long
Dim lCodCaixa As Long

On Error GoTo Erro_MovimentosCaixa_Gravar_AbtCx

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 112349
    Next

    'reserva um conjunto de numeros internos de movimento de caixa
    lErro = CF("Config_ObterNumInt", "LojaConfig", "NUM_PROX_MOVCAIXACENTRAL", lNumAuto, 1, objMovCx.iFilialEmpresa)
    If lErro <> SUCESSO Then gError 112350

    objMovCx.lNumMovto = lNumAuto

    'diz o tipo de operação a ser logada
    objLog.iOperacao = ABERTURA_CAIXA
    
    colMovCx.Add objMovCx
    
    'preenche o objLog com o movimento do caixa
    Call Mover_Dados_Movcx_Log1(colMovCx, objLog)
    
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
        'grava o log
        lErro = CF("Log_Grava", objLog, objLog.colRegistro)
        If lErro <> SUCESSO Then gError 112351
    End If
    
    objMovCx.lNumIntDocLog = objLog.lNumIntDoc
    objMovCx.iQuantLog = objLog.iQuantLog

    'insere novo registro na tabela de MovimentosCaixa referente a saida outros do caixa
    lErro = Comando_Executar(alComando(1), "INSERT INTO MovimentosCaixa(FilialEmpresa, NumMovto, Caixa, Operador, Sequencial, Tipo, DataMovimento, Gerente, Hora, NumIntDocLog, QuantLog, Arquivo, NumMovtoArq ) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", objMovCx.iFilialEmpresa, objMovCx.lNumMovto, objMovCx.iCaixa, objMovCx.iCodOperador, objMovCx.lSequencial, objMovCx.iTipo, objMovCx.dtDataMovimento, objMovCx.iGerente, objMovCx.dHora, objMovCx.lNumIntDocLog, objMovCx.iQuantLog, objMovCx.sArquivo, objMovCx.lNumMovtoArq)
    If lErro <> AD_SQL_SUCESSO Then gError 112352

    'selecionar os registros da tabela de MovimentosCaixa referente a saida de ticket do caixa que está sendo excluida
    lErro = Comando_ExecutarPos(alComando(2), "SELECT Codigo FROM Caixa WHERE FilialEmpresa = ? AND Codigo = ?", 0, lCodCaixa, objMovCx.iFilialEmpresa, objMovCx.iCaixa)
    If lErro <> AD_SQL_SUCESSO Then gError 112353

    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112354

    If lErro = AD_SQL_SEM_DADOS Then gError 112355

    lErro = Comando_ExecutarPos(alComando(3), "UPDATE Caixa SET Status = ?", alComando(2), STATUS_CAIXA_ABERTO)
    If lErro <> AD_SQL_SUCESSO Then gError 112356

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    MovimentosCaixa_Gravar_AbtCx = SUCESSO

    Exit Function

Erro_MovimentosCaixa_Gravar_AbtCx:

    MovimentosCaixa_Gravar_AbtCx = gErr

    Select Case gErr

        Case 112349
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 112350, 112351

        Case 112352
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MOVCAIXA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa, objMovCx.lSequencial)

        Case 112353, 112354
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CAIXA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa)

        Case 112355
            Call Rotina_Erro(vbOKOnly, "ERRO_CAIXA_NAO_CADASTRADO1", gErr, objMovCx.iCaixa, objMovCx.iFilialEmpresa)

        Case 112356
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_CAIXA", gErr, objMovCx.iCaixa, objMovCx.iFilialEmpresa)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151150)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function MovimentosCaixa_Gravar_FchCx(ByVal objMovCx As ClassMovimentoCaixa, ByVal objLojaArqFisMestre As ClassLojaArqFisMestre, ByVal colLojaArqFisAnalitico As Collection, ByVal objUltimaReducao As ClassUltimaReducao) As Long
'gravar o movimento de caixa
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lErro As Long
Dim alComando(1 To 9) As Long
Dim iIndice As Integer
Dim objLog As New ClassLog
Dim colMovCx As New Collection
Dim lNumAuto As Long
Dim lCodCaixa As Long
Dim lCOOIni As Long
Dim objLojaArqFisAnalitico As ClassLojaArqFisAnalitico
Dim iModeloImpECF As Integer
Dim objAliquota As ClassAliquotaICMS

On Error GoTo Erro_MovimentosCaixa_Gravar_FchCx

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 112357
    Next

    'reserva um conjunto de numeros internos de movimento de caixa
    lErro = CF("Config_ObterNumInt", "LojaConfig", "NUM_PROX_MOVCAIXACENTRAL", lNumAuto, 1, objMovCx.iFilialEmpresa)
    If lErro <> SUCESSO Then gError 112358

    objMovCx.lNumMovto = lNumAuto

    'diz o tipo de operação a ser logada
    objLog.iOperacao = FECHAMENTO_CAIXA
    
    colMovCx.Add objMovCx
    
    'preenche o objLog com o movimento do caixa
    Call Mover_Dados_Movcx_Fechamento_Log(objLog, objMovCx, objLojaArqFisMestre, colLojaArqFisAnalitico)
    
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
        'grava o log
        lErro = CF("Log_Grava", objLog, objLog.colRegistro)
        If lErro <> SUCESSO Then gError 112359
    End If
    
    objMovCx.lNumIntDocLog = objLog.lNumIntDoc
    objMovCx.iQuantLog = objLog.iQuantLog

    'insere novo registro na tabela de MovimentosCaixa referente a saida outros do caixa
    lErro = Comando_Executar(alComando(1), "INSERT INTO MovimentosCaixa(FilialEmpresa, NumMovto, Caixa, Operador, Sequencial, Tipo, DataMovimento, Gerente, Hora, NumIntDocLog, QuantLog, Arquivo, NumMovtoArq ) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", objMovCx.iFilialEmpresa, objMovCx.lNumMovto, objMovCx.iCaixa, objMovCx.iCodOperador, objMovCx.lSequencial, objMovCx.iTipo, objMovCx.dtDataMovimento, objMovCx.iGerente, objMovCx.dHora, objMovCx.lNumIntDocLog, objMovCx.iQuantLog, objMovCx.sArquivo, objMovCx.lNumMovtoArq)
    If lErro <> AD_SQL_SUCESSO Then gError 112360

    'selecionar a Caixa
    lErro = Comando_ExecutarPos(alComando(2), "SELECT Codigo FROM Caixa WHERE FilialEmpresa = ? AND Codigo = ?", 0, lCodCaixa, objMovCx.iFilialEmpresa, objMovCx.iCaixa)
    If lErro <> AD_SQL_SUCESSO Then gError 112361

    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112362

    If lErro = AD_SQL_SEM_DADOS Then gError 112363

    lErro = Comando_ExecutarPos(alComando(3), "UPDATE Caixa SET Status = ?", alComando(2), STATUS_CAIXA_FECHADO)
    If lErro <> AD_SQL_SUCESSO Then gError 112364

    'selecionar a Caixa
    lErro = Comando_Executar(alComando(7), "SELECT CodModelo FROM ImpressoraECF, ECF WHERE ECF.FilialEmpresa = ImpressoraECF.FilialEmpresa AND ECF.ImpressoraECF = ImpressoraECF.Codigo AND ECF.FilialEmpresa = ? And ECF.Caixa = ? AND ECF.Ativo = 1", _
    iModeloImpECF, objMovCx.iFilialEmpresa, objMovCx.iCaixa)
    If lErro <> AD_SQL_SUCESSO Then gError 133795

    lErro = Comando_BuscarPrimeiro(alComando(7))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 133796

    If iModeloImpECF <> 4 And Not AFRAC_ImpressoraCFe(iModeloImpECF) Then

        'insere novo registro em LojaArqFisMestre
        lErro = Comando_Executar(alComando(5), "INSERT INTO LojaArqFisMestre (CodECF, FilialEmpresa, Data, NumSerieECF, COOIni, COOFim, CRZ, GrandeTotal, CRO, VendaBruta, NumEquip, Arquivo, NumMovtoArq ) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", objLojaArqFisMestre.iCodECF, objLojaArqFisMestre.iFilialEmpresa, objLojaArqFisMestre.dtData, objLojaArqFisMestre.sNumSerieECF, objLojaArqFisMestre.lCOOIni, objLojaArqFisMestre.lCOOFim, objLojaArqFisMestre.lCRZ, objLojaArqFisMestre.dGrandeTotal, objLojaArqFisMestre.lCRO, objLojaArqFisMestre.dVendaBruta, objLojaArqFisMestre.iNumEquip, objMovCx.sArquivo, objMovCx.lNumMovtoArq)
        If lErro <> AD_SQL_SUCESSO Then gError 105969
    
        For Each objLojaArqFisAnalitico In colLojaArqFisAnalitico
        
            If objLojaArqFisAnalitico.sSituacaoTrib <> "0000" Then
        
                'insere novo registro em LojaArqFisAnalitico para cada aliquota
                lErro = Comando_Executar(alComando(6), "INSERT INTO LojaArqFisAnalitico (CodECF, FilialEmpresa, Data, SituacaoTrib, Totalizador, Arquivo, NumMovtoArq ) VALUES (?,?,?,?,?,?,?)", objLojaArqFisMestre.iCodECF, objLojaArqFisMestre.iFilialEmpresa, objLojaArqFisMestre.dtData, objLojaArqFisAnalitico.sSituacaoTrib, objLojaArqFisAnalitico.dTotalizador, objMovCx.sArquivo, objMovCx.lNumMovtoArq)
                If lErro <> AD_SQL_SUCESSO Then gError 133667
        
            End If
        
        Next

        
            'insere novo registro em LojaReducao
            lErro = Comando_Executar(alComando(8), "INSERT INTO LojaReducao (CodECF, FilialEmpresa, DataMovimento,  AcrescimoICMS, AcrescimoISS, AcrescimoNaoFiscal, CancelamentoICMS, CancelamentoISS, CancelamentoNaoFiscal, DescontoICMS, DescontoISS, DescontoNaoFiscal, IsentoICMS, IsentoISS, NaoIncideICMS, NaoIncideISS, SubstTribICMS, SubstTribISS, TotalNaoFiscal, VendaBruta, IncideDescontoISS, HoraReducao, DataReducao, Arquivo, NumMovtoArq, COOReducaoZ) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
            objLojaArqFisMestre.iCodECF, objLojaArqFisMestre.iFilialEmpresa, objUltimaReducao.dtDataMovimento, objUltimaReducao.dAcrescimoICMS, objUltimaReducao.dAcrescimoISS, objUltimaReducao.dAcrescimoNaoFiscal, objUltimaReducao.dCancelamentoICMS, objUltimaReducao.dCancelamentoISS, objUltimaReducao.dCancelamentoNaoFiscal, objUltimaReducao.dDescontoICMS, objUltimaReducao.dDescontoISS, objUltimaReducao.dDescontoNaoFiscal, objUltimaReducao.dIsentoICMS, objUltimaReducao.dIsentoISS, objUltimaReducao.dNaoIncideICMS, _
            objUltimaReducao.dNaoIncideISS, objUltimaReducao.dSubstTribICMS, objUltimaReducao.dSubstTribISS, objUltimaReducao.dTotalNaoFiscal, objUltimaReducao.dVendaBruta, objUltimaReducao.sIncidenciaDescontoISS, CDbl(CDate(left(objUltimaReducao.sHoraReducao, 2) & ":" & Mid(objUltimaReducao.sHoraReducao, 3, 2) & ":" & right(objUltimaReducao.sHoraReducao, 2))), objUltimaReducao.dtDataReducao, objMovCx.sArquivo, objMovCx.lNumMovtoArq, objUltimaReducao.lCOOReducaoZ)
            If lErro <> AD_SQL_SUCESSO Then gError 203284
    
            For Each objAliquota In objUltimaReducao.colAliquotas
            
                'insere novo registro em LojaReducaoAliquota para cada aliquota
                lErro = Comando_Executar(alComando(9), "INSERT INTO LojaReducaoAliquota (CodECF, FilialEmpresa, Data, Aliquota, ISS, Totalizador, Arquivo, NumMovtoArq ) VALUES (?,?,?,?,?,?,?,?)", objLojaArqFisMestre.iCodECF, objLojaArqFisMestre.iFilialEmpresa, objLojaArqFisMestre.dtData, objAliquota.dAliquota, objAliquota.iISS, objAliquota.dValorTotalizadoLoja, objMovCx.sArquivo, objMovCx.lNumMovtoArq)
                If lErro <> AD_SQL_SUCESSO Then gError 203285
            
            Next



        
        
    End If

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    MovimentosCaixa_Gravar_FchCx = SUCESSO

    Exit Function

Erro_MovimentosCaixa_Gravar_FchCx:

    MovimentosCaixa_Gravar_FchCx = gErr

    Select Case gErr

        Case 105967, 105968
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_LOJAARQFISMESTRE", gErr, objLojaArqFisMestre.iFilialEmpresa, objLojaArqFisMestre.iCodECF, objLojaArqFisMestre.dtData)

        Case 105969
            Call Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_LOJAARQFISMESTRE", gErr, objLojaArqFisMestre.iFilialEmpresa, objLojaArqFisMestre.iCodECF, objLojaArqFisMestre.dtData)

        Case 105970
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_LOJAARQFISMESTRE", gErr, objLojaArqFisMestre.iFilialEmpresa, objLojaArqFisMestre.iCodECF, objLojaArqFisMestre.dtData)

        Case 112357
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 112358, 112359

        Case 112360
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MOVCAIXA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa, objMovCx.lSequencial)

        Case 112361, 112362
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CAIXA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa)

        Case 112363
            Call Rotina_Erro(vbOKOnly, "ERRO_CAIXA_NAO_CADASTRADO1", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa)

        Case 112364
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_CAIXA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa)

        Case 133667
            Call Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_LOJAARQFISANALITICO", gErr, objLojaArqFisMestre.iFilialEmpresa, objLojaArqFisMestre.iCodECF, objLojaArqFisMestre.dtData, objLojaArqFisAnalitico.sSituacaoTrib)

        Case 133795, 133796
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ECF1", gErr)

        Case 203284, 203285
            Call Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_LOJAREDUCAO", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151151)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function MovimentosCaixa_Gravar_Movcx(ByVal objMovCx As ClassMovimentoCaixa) As Long
'gravar o movimento de caixa
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer
Dim objLog As New ClassLog
Dim colMovCx As New Collection
Dim lNumAuto As Long

On Error GoTo Erro_MovimentosCaixa_Gravar_Movcx

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 112365
    Next

    'reserva um conjunto de numeros internos de movimento de caixa
    lErro = CF("Config_ObterNumInt", "LojaConfig", "NUM_PROX_MOVCAIXACENTRAL", lNumAuto, 1, objMovCx.iFilialEmpresa)
    If lErro <> SUCESSO Then gError 112366

    objMovCx.lNumMovto = lNumAuto

    Select Case objMovCx.iTipo

        Case MOVIMENTO_CAIXA_LEITURA_X
            objLog.iOperacao = LEITURA_X

        Case MOVIMENTO_CAIXA_REDUCAO_Z
            objLog.iOperacao = REDUCAO_Z

        Case MOVIMENTO_CAIXA_LEITURA_MEMORIA_FISCAL
            objLog.iOperacao = LEITURA_MEMORIA_FISCAL

    End Select

    colMovCx.Add objMovCx
    
    'preenche o objLog com o movimento do caixa
    Call Mover_Dados_Movcx_Log1(colMovCx, objLog)
    
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
        'grava o log
        lErro = CF("Log_Grava", objLog, objLog.colRegistro)
        If lErro <> SUCESSO Then gError 112367
    End If
    
    objMovCx.lNumIntDocLog = objLog.lNumIntDoc
    objMovCx.iQuantLog = objLog.iQuantLog

    'insere novo registro na tabela de MovimentosCaixa referente a saida outros do caixa
    lErro = Comando_Executar(alComando(1), "INSERT INTO MovimentosCaixa(FilialEmpresa, NumMovto, Caixa, Operador, Sequencial, Tipo, DataMovimento, Gerente, Hora, NumIntDocLog, QuantLog, Arquivo, NumMovtoArq ) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", objMovCx.iFilialEmpresa, objMovCx.lNumMovto, objMovCx.iCaixa, objMovCx.iCodOperador, objMovCx.lSequencial, objMovCx.iTipo, objMovCx.dtDataMovimento, objMovCx.iGerente, objMovCx.dHora, objMovCx.lNumIntDocLog, objMovCx.iQuantLog, objMovCx.sArquivo, objMovCx.lNumMovtoArq)
    If lErro <> AD_SQL_SUCESSO Then gError 112368

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    MovimentosCaixa_Gravar_Movcx = SUCESSO

    Exit Function

Erro_MovimentosCaixa_Gravar_Movcx:

    MovimentosCaixa_Gravar_Movcx = gErr

    Select Case gErr

        Case 112365
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 112366, 112367

        Case 112368
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MOVCAIXA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa, objMovCx.lSequencial)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151152)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function MovimentosCaixa_Gravar_AbtSessao(ByVal objMovCx As ClassMovimentoCaixa) As Long
'gravar o movimento de caixa referente a abertura de sessao
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

'*** Ver como gravar o campo abertura e se é necessario.
Dim colMovCx As New Collection
Dim lErro As Long
Dim alComando(1 To 3) As Long
Dim iIndice As Integer
Dim objLog As New ClassLog
Dim lNumAuto As Long
Dim iCodCaixa As Integer

On Error GoTo Erro_MovimentosCaixa_Gravar_AbtSessao

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 112369
    Next

    'reserva um conjunto de numeros internos de movimento de caixa
    lErro = CF("Config_ObterNumInt", "LojaConfig", "NUM_PROX_MOVCAIXACENTRAL", lNumAuto, 1, objMovCx.iFilialEmpresa)
    If lErro <> SUCESSO Then gError 112370

    objMovCx.lNumMovto = lNumAuto

    'diz o tipo de operação a ser logada
    objLog.iOperacao = ABERTURA_SESSAO
    
    colMovCx.Add objMovCx
    
    'preenche o objLog com o movimento do caixa
    Call Mover_Dados_Movcx_Log1(colMovCx, objLog)
    
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
        'grava o log
        lErro = CF("Log_Grava", objLog, objLog.colRegistro)
        If lErro <> SUCESSO Then gError 112371
    End If
    
    objMovCx.lNumIntDocLog = objLog.lNumIntDoc
    objMovCx.iQuantLog = objLog.iQuantLog

    'insere novo registro na tabela de MovimentosCaixa
    lErro = Comando_Executar(alComando(1), "INSERT INTO MovimentosCaixa(FilialEmpresa, NumMovto, Caixa, Operador, Sequencial, Tipo, DataMovimento, Gerente, Hora, NumIntDocLog, QuantLog, Arquivo, NumMovtoArq ) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", objMovCx.iFilialEmpresa, objMovCx.lNumMovto, objMovCx.iCaixa, objMovCx.iCodOperador, objMovCx.lSequencial, objMovCx.iTipo, objMovCx.dtDataMovimento, objMovCx.iGerente, objMovCx.dHora, objMovCx.lNumIntDocLog, objMovCx.iQuantLog, objMovCx.sArquivo, objMovCx.lNumMovtoArq)
    If lErro <> AD_SQL_SUCESSO Then gError 112372

    'insere novo registro na tabela de Sessao
    lErro = Comando_ExecutarPos(alComando(2), "SELECT Codigo FROM Caixa WHERE FilialEmpresa = ? AND Codigo = ?", 0, iCodCaixa, objMovCx.iFilialEmpresa, objMovCx.iCaixa)
    If lErro <> AD_SQL_SUCESSO Then gError 133529

    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 133530
    
    If lErro = AD_SQL_SEM_DADOS Then gError 133531
    
    'insere novo registro na tabela de MovimentosCaixa
    lErro = Comando_ExecutarPos(alComando(3), "UPDATE Caixa SET UltimoOperador = ?, SessaoStatus = ?", alComando(2), objMovCx.iCodOperador, SESSAO_ABERTA)
    If lErro <> AD_SQL_SUCESSO Then gError 133532

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    MovimentosCaixa_Gravar_AbtSessao = SUCESSO

    Exit Function

Erro_MovimentosCaixa_Gravar_AbtSessao:

    MovimentosCaixa_Gravar_AbtSessao = gErr

    Select Case gErr

        Case 112369
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 112370, 112371, 112373

        Case 112372
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MOVCAIXA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa, objMovCx.lSequencial)

        Case 133529, 133530
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CAIXA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa)

        Case 133531
            Call Rotina_Erro(vbOKOnly, "ERRO_CAIXA_NAO_CADASTRADO", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa)

        Case 133532
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_CAIXA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151153)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function MovimentosCaixa_Gravar_SuspSessao(ByVal objMovCx As ClassMovimentoCaixa) As Long
'gravar o movimento de caixa referente a suspensao de sessao
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

'???*** Ver como gravar o campo abertura e se é necessario.
Dim colMovCx As New Collection
Dim lErro As Long
Dim alComando(1 To 3) As Long
Dim iIndice As Integer
Dim objLog As New ClassLog
Dim lNumAuto As Long
Dim lNumInt As Long
Dim iCodCaixa As Integer
 
On Error GoTo Erro_MovimentosCaixa_Gravar_SuspSessao

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 112375
    Next

    'reserva um conjunto de numeros internos de movimento de caixa
    lErro = CF("Config_ObterNumInt", "LojaConfig", "NUM_PROX_MOVCAIXACENTRAL", lNumAuto, 1, objMovCx.iFilialEmpresa)
    If lErro <> SUCESSO Then gError 112376

    objMovCx.lNumMovto = lNumAuto

    'diz o tipo de operação a ser logada
    objLog.iOperacao = SUSPENSAO_SESSAO
    
    colMovCx.Add objMovCx
    
    'preenche o objLog com o movimento do caixa
    Call Mover_Dados_Movcx_Log1(colMovCx, objLog)
    
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
        'grava o log
        lErro = CF("Log_Grava", objLog, objLog.colRegistro)
        If lErro <> SUCESSO Then gError 112377
    End If
    
    objMovCx.lNumIntDocLog = objLog.lNumIntDoc
    objMovCx.iQuantLog = objLog.iQuantLog

    'insere novo registro na tabela de MovimentosCaixa referente a saida outros do caixa
    lErro = Comando_Executar(alComando(1), "INSERT INTO MovimentosCaixa(FilialEmpresa, NumMovto, Caixa, Operador, Sequencial, Tipo, DataMovimento, Gerente, Hora, NumIntDocLog, QuantLog, Arquivo, NumMovtoArq ) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", objMovCx.iFilialEmpresa, objMovCx.lNumMovto, objMovCx.iCaixa, objMovCx.iCodOperador, objMovCx.lSequencial, objMovCx.iTipo, objMovCx.dtDataMovimento, objMovCx.iGerente, objMovCx.dHora, objMovCx.lNumIntDocLog, objMovCx.iQuantLog, objMovCx.sArquivo, objMovCx.lNumMovtoArq)
    If lErro <> AD_SQL_SUCESSO Then gError 112378

    'insere novo registro na tabela de Sessao
    lErro = Comando_ExecutarPos(alComando(2), "SELECT Codigo FROM Caixa WHERE FilialEmpresa = ? AND Codigo = ?", 0, iCodCaixa, objMovCx.iFilialEmpresa, objMovCx.iCaixa)
    If lErro <> AD_SQL_SUCESSO Then gError 133533

    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 133534
    
    If lErro = AD_SQL_SEM_DADOS Then gError 133535
    
    'insere novo registro na tabela de MovimentosCaixa
    lErro = Comando_ExecutarPos(alComando(3), "UPDATE Caixa SET SessaoStatus = ?", alComando(2), SESSAO_SUSPENSA)
    If lErro <> AD_SQL_SUCESSO Then gError 133536

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    MovimentosCaixa_Gravar_SuspSessao = SUCESSO

    Exit Function

Erro_MovimentosCaixa_Gravar_SuspSessao:

    MovimentosCaixa_Gravar_SuspSessao = gErr

    Select Case gErr

        Case 112375
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 112376, 112377

        Case 112378
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MOVCAIXA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa, objMovCx.lSequencial)

        Case 133533, 133534
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CAIXA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa)

        Case 133535
            Call Rotina_Erro(vbOKOnly, "ERRO_CAIXA_NAO_CADASTRADO", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa)

        Case 133536
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_CAIXA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151154)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function MovimentosCaixa_Gravar_FchSessao(ByVal objMovCx As ClassMovimentoCaixa) As Long
'gravar o movimento de caixa referente a fechamento de sessao
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim colMovCx As New Collection
Dim lErro As Long
Dim alComando(1 To 3) As Long
Dim iIndice As Integer
Dim objLog As New ClassLog
Dim lNumAuto As Long
Dim lNumInt As Long
Dim iCodCaixa As Integer

On Error GoTo Erro_MovimentosCaixa_Gravar_FchSessao

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 112384
    Next

    'reserva um conjunto de numeros internos de movimento de caixa
    lErro = CF("Config_ObterNumInt", "LojaConfig", "NUM_PROX_MOVCAIXACENTRAL", lNumAuto, 1, objMovCx.iFilialEmpresa)
    If lErro <> SUCESSO Then gError 112385

    objMovCx.lNumMovto = lNumAuto

    'diz o tipo de operação a ser logada
    objLog.iOperacao = FECHAMENTO_SESSAO
    
    colMovCx.Add objMovCx
    
    'preenche o objLog com o movimento do caixa
    Call Mover_Dados_Movcx_Log1(colMovCx, objLog)
    
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
        'grava o log
        lErro = CF("Log_Grava", objLog, objLog.colRegistro)
        If lErro <> SUCESSO Then gError 112386
    End If
    
    objMovCx.lNumIntDocLog = objLog.lNumIntDoc
    objMovCx.iQuantLog = objLog.iQuantLog

    'insere novo registro na tabela de MovimentosCaixa referente a saida outros do caixa
    lErro = Comando_Executar(alComando(1), "INSERT INTO MovimentosCaixa(FilialEmpresa, NumMovto, Caixa, Operador, Sequencial, Tipo, DataMovimento, Gerente, Hora, NumIntDocLog, QuantLog, Arquivo, NumMovtoArq ) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", objMovCx.iFilialEmpresa, objMovCx.lNumMovto, objMovCx.iCaixa, objMovCx.iCodOperador, objMovCx.lSequencial, objMovCx.iTipo, objMovCx.dtDataMovimento, objMovCx.iGerente, objMovCx.dHora, objMovCx.lNumIntDocLog, objMovCx.iQuantLog, objMovCx.sArquivo, objMovCx.lNumMovtoArq)
    If lErro <> AD_SQL_SUCESSO Then gError 112387

    'insere novo registro na tabela de Sessao
    lErro = Comando_ExecutarPos(alComando(2), "SELECT Codigo FROM Caixa WHERE FilialEmpresa = ? AND Codigo = ?", 0, iCodCaixa, objMovCx.iFilialEmpresa, objMovCx.iCaixa)
    If lErro <> AD_SQL_SUCESSO Then gError 133537

    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 133538
    
    If lErro = AD_SQL_SEM_DADOS Then gError 133539
    
    'insere novo registro na tabela de MovimentosCaixa
    lErro = Comando_ExecutarPos(alComando(3), "UPDATE Caixa SET SessaoStatus = ?", alComando(2), SESSAO_ENCERRADA)
    If lErro <> AD_SQL_SUCESSO Then gError 133540

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    MovimentosCaixa_Gravar_FchSessao = SUCESSO

    Exit Function

Erro_MovimentosCaixa_Gravar_FchSessao:

    MovimentosCaixa_Gravar_FchSessao = gErr

    Select Case gErr

        Case 112384
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 112385, 112386

        Case 112387
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MOVCAIXA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa, objMovCx.lSequencial)

        Case 133537, 133538
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CAIXA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa)

        Case 133539
            Call Rotina_Erro(vbOKOnly, "ERRO_CAIXA_NAO_CADASTRADO", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa)

        Case 133540
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_CAIXA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151155)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

'*************Funções de tranferência do caixa para caixa central


'Rotinas Utilizada na Tela de Produto Desconto (Sergio Ricardo)

Function Produto_GravaDesc(ByVal objProduto As ClassProduto, objProdFilial As ClassProdutoFilial) As Long
'Altera o Desconto do produto Recebido por parâmetro

Dim lErro As Long
Dim alComando(1) As Long
Dim dDescontoItem As Double
Dim iIndice As Integer
Dim lTransacao As Long

On Error GoTo Erro_Produto_GravaDesc

    'abre a transacao
    lTransacao = Transacao_Abrir
    If lTransacao = 0 Then gError 113339

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 113331
    Next

    'Selecionar o produto por código
    lErro = Comando_ExecutarPos(alComando(0), "SELECT DescontoItem FROM ProdutosFilial WHERE Produto = ? and FilialEmpresa = ? ", 0, dDescontoItem, objProduto.sCodigo, giFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 113332

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 113333

    'Se encontrar (alteração)
    If lErro = SUCESSO Then

        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> SUCESSO Then gError 113334

        'Atualiza o Desconto
        lErro = Comando_ExecutarPos(alComando(1), "UPDATE ProdutosFilial SET DescontoItem = ?, DescontoValor=?", alComando(0), objProdFilial.dDescontoItem, objProdFilial.dDescontoValor)
        If lErro <> AD_SQL_SUCESSO Then gError 113335

    End If

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    lErro = Transacao_Commit
    If lErro <> SUCESSO Then gError 113340

    Produto_GravaDesc = SUCESSO

    Exit Function

Erro_Produto_GravaDesc:

    Produto_GravaDesc = gErr

    Select Case gErr

        Case 113331
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 113332, 113333
            lErro = Rotina_Erro(vbOKOnly, "ERRO_PRODUTOSFILIAL_INEXISTENTE", gErr, objProduto.sCodigo, giFilialEmpresa)

        Case 113334
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_PRODUTOSFILIAL", gErr)

        Case 113335
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_PRODUTOSFILIAL", gErr, giFilialEmpresa, objProduto.sCodigo)

        Case 113339
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 113340
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151156)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Call Transacao_Rollback

    Exit Function

End Function

Function Venda_Excluir_CC(ByVal lCOO As Long, ByVal lORC As Long, ByVal iECF As Integer, ByVal iFilialEmpresa As Integer) As Long
'grava os dados da venda no caixa central
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lErro As Long
Dim lTransacao As Long
Dim iFilial As Integer
Dim lNumIntCupom As Long
Dim objCupomFiscal As New ClassCupomFiscal
Dim iStatus As Integer
Dim objLog As New ClassLog

On Error GoTo Erro_Venda_Excluir_CC

    iFilial = iFilialEmpresa

    'exclui os dados do cupom
    lErro = CF("CupomFiscal_Excluir_Venda", lCOO, lORC, iECF, iFilial, lNumIntCupom, iStatus)
    If lErro <> SUCESSO Then gError 112427

    'exclui os dados de carne caso existam
    lErro = Carne_Excluir_Venda(iFilial, lNumIntCupom)
    If lErro <> SUCESSO Then gError 112430
    
    objCupomFiscal.lNumOrcamento = lORC
    objCupomFiscal.iStatus = iStatus
    If lCOO <> 0 Then objCupomFiscal.iTipo = OPTION_CF
    
    'exclui os movimentos de caixa
    lErro = CF("MovimentosCaixa_Excluir_Venda", iFilial, lNumIntCupom, objCupomFiscal)
    If lErro <> SUCESSO Then gError 112431
    
    objLog.sLog = CStr(iFilial) & Chr(vbKeyEscape) & CStr(lCOO) & Chr(vbKeyEscape) & CStr(lORC) & Chr(vbKeyEscape) & CStr(iECF) & Chr(vbKeyEscape) & CStr(iStatus) & Chr(vbKeyEscape) & CStr(lNumIntCupom) & Chr(vbKeyEscape) & Chr(vbKeyEnd)
                      
    objLog.iOperacao = EXCLUSAO_CUPOM_FISCAL
    
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
        'grava o log
        lErro = CF("Log_Grava", objLog, objLog.colRegistro)
        If lErro <> SUCESSO Then gError 118092
    End If
    
    Venda_Excluir_CC = SUCESSO

    Exit Function

Erro_Venda_Excluir_CC:

    Venda_Excluir_CC = gErr

    Select Case gErr

        Case 112427, 112430 To 112431, 118092

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151157)

    End Select

    Exit Function

End Function

Function CupomFiscal_Excluir_Venda(ByVal lCOO As Long, ByVal lORC As Long, ByVal iECF As Integer, iFilial As Integer, lNumIntCupom As Long, iStatus As Integer) As Long
'excuir os dados de cupom fiscal
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lNumAuto As Long
Dim lErro As Long
Dim alComando(1 To 15) As Long
Dim iIndice As Integer
Dim objProduto As New ClassProduto
Dim sUnidade As String
Dim dQuant As Double
Dim dtData As Date
Dim dFator As Double
Dim dQuantVenda As Double
Dim iCaixa As Integer
Dim dPrecoUnitario As Double
Dim dValorDesconto As Double
Dim colItens As New Collection
Dim sProduto As String
Dim iNumVendas As Integer
Dim sMes As String
Dim iFilialEmpresa As Integer
Dim objCupomFiscal As New ClassCupomFiscal
Dim lNumIntMovEst As Long, dtDataCancelamento As Date
Dim lNumIntMovEst1 As Long, sNFeChaveAcesso As String, objNFiscal As New ClassNFiscal, lNumIntNF As Long, itpAmb As Integer

On Error GoTo Erro_CupomFiscal_Excluir_Venda

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 112433
    Next
    
    If lCOO <> 0 Then
        'busca registro na tabela de CupomFiscal
        sNFeChaveAcesso = String(STRING_NFE_CHNFE, 0)
        lErro = Comando_ExecutarPos(alComando(1), "SELECT NumIntDoc, DataEmissao, Caixa, Status, NFeChaveAcesso FROM CupomFiscal WHERE FilialEmpresa = ? AND ECF = ? AND Numero = ? AND Status <> ?", 0, lNumIntCupom, dtData, iCaixa, iStatus, sNFeChaveAcesso, iFilial, iECF, lCOO, STATUS_CANCELADO)
        If lErro <> AD_SQL_SUCESSO Then gError 112434
    Else
        'busca registro na tabela de CupomFiscal
        'Se tiver o tipo 2 e o 3 no mesmo ECF vai tentar cancelar 1o o 3 (orçamento) e depois o 2 (venda sem nota) além de ter incluído o filtro por ECF para evitar cancelar o cara errado pois se tiver
        'em outro caixa pode nem ter sido importado o tipo 3 ainda
        'no caso da Sushirão, se o ECF = 2 só poderia cancelar o Cupom tipo = 3
        lErro = Comando_ExecutarPos(alComando(1), "SELECT NumIntDoc, DataEmissao, Caixa, Status FROM CupomFiscal WHERE FilialEmpresa = ? AND ECF = ? AND NumOrcamento = ? AND (Tipo = 2 Or Tipo = 3) AND Status <> ? ORDER BY Tipo DESC", 0, lNumIntCupom, dtData, iCaixa, iStatus, iFilial, iECF, lORC, STATUS_CANCELADO)
        If lErro <> AD_SQL_SUCESSO Then gError 112434
    End If
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112458

    If lErro = AD_SQL_SEM_DADOS Then gError 112459

    sProduto = String(STRING_PRODUTO, 0)
    sUnidade = String(STRING_PRODUTO_SIGLAUMVENDA, 0)

    'busca registro na tabela de ItensCupomFiscal
    lErro = Comando_ExecutarPos(alComando(2), "SELECT Produto, UnidadeMed, Quantidade, PrecoUnitario, ValorDesconto, NumIntMovEst FROM ItensCupomFiscal WHERE FilialEmpresa=? AND NumIntCupom=?", 0, sProduto, sUnidade, dQuant, dPrecoUnitario, dValorDesconto, lNumIntMovEst, iFilial, lNumIntCupom)
    If lErro <> AD_SQL_SUCESSO Then gError 112435

    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112460

 '   If lErro = AD_SQL_SEM_DADOS Then gError 112461

    lNumIntMovEst1 = lNumIntMovEst

    Do While lErro <> AD_SQL_SEM_DADOS

        iNumVendas = 1
        
        objProduto.sCodigo = sProduto
        
        For iIndice = 1 To colItens.Count
            sProduto = colItens.Item(iIndice)
            If sProduto = objProduto.sCodigo Then
                iNumVendas = 0
                Exit For
            End If
        Next

        colItens.Add objProduto.sCodigo

        'Lê na tabela de Produto a UM de venda
        lErro = CF("Produto_Le", objProduto)
        If lErro <> SUCESSO And lErro <> 28030 Then gError 112436

        'Se não encontrar o produto ==> Erro
        If lErro = 28030 Then gError 112437

        'Obtém fator de conversão para unidade de medida de Venda
        lErro = CF("UM_Conversao", objProduto.iClasseUM, sUnidade, objProduto.sSiglaUMVenda, dFator)
        If lErro <> SUCESSO Then gError 112438

        dQuantVenda = dQuant * dFator
        
        If lCOO <> 0 Or iStatus = STATUS_BAIXADO Then
        
            lErro = Comando_ExecutarPos(alComando(3), "SELECT FilialEmpresa FROM SldDiaFatCx WHERE FilialEmpresa = ? AND Caixa = ? AND Data = ? AND Produto = ?", 0, iFilialEmpresa, iFilial, iCaixa, dtData, objProduto.sCodigo)
            If lErro <> AD_SQL_SUCESSO Then gError 112439
    
            lErro = Comando_BuscarPrimeiro(alComando(3))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112440
    
            If lErro = AD_SQL_SEM_DADOS Then gError 112441
    
            lErro = Comando_ExecutarPos(alComando(4), "UPDATE SldDiaFatCx SET ValorFaturado = ValorFaturado - ?, QuantFaturada = QuantFaturada - ?, NumVendas = NumVendas - ?", alComando(3), (dPrecoUnitario * dQuant) - dValorDesconto, dQuantVenda, iNumVendas)
            If lErro <> AD_SQL_SUCESSO Then gError 112442
    
            lErro = Comando_ExecutarPos(alComando(5), "SELECT FilialEmpresa FROM SldMesFatCx WHERE FilialEmpresa = ? AND Caixa = ? AND Ano = ? AND Produto = ?", 0, iFilialEmpresa, iFilial, iCaixa, Year(dtData), objProduto.sCodigo)
            If lErro <> AD_SQL_SUCESSO Then gError 112443
    
            lErro = Comando_BuscarPrimeiro(alComando(5))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112444
    
            If lErro = AD_SQL_SEM_DADOS Then gError 112445
            
            sMes = Month(dtData)
            
            lErro = Comando_ExecutarPos(alComando(6), "UPDATE SldMesFatCx SET ValorFaturado" & sMes & " = ValorFaturado" & sMes & " - ?, QuantFaturada" & sMes & " = QuantFaturada" & sMes & " - ?, NumVendas" & sMes & " = NumVendas" & sMes & " - ?", alComando(5), (dPrecoUnitario * dQuant) - dValorDesconto, dQuantVenda, iNumVendas)
            If lErro <> AD_SQL_SUCESSO Then gError 112446
    
            'se nao for cancelamento de nfce ou sat
            If Len(Trim(sNFeChaveAcesso)) = 0 Then
            
                lErro = Comando_ExecutarPos(alComando(7), "SELECT FilialEmpresa FROM SldDiaFat WHERE FilialEmpresa = ? AND Data = ? AND Produto = ?", 0, iFilialEmpresa, iFilial, dtData, objProduto.sCodigo)
                If lErro <> AD_SQL_SUCESSO Then gError 112447
        
                lErro = Comando_BuscarPrimeiro(alComando(7))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112448
        
                If lErro = AD_SQL_SEM_DADOS Then gError 112449
        
                lErro = Comando_ExecutarPos(alComando(8), "UPDATE SldDiaFat SET ValorFaturado = ValorFaturado - ?, QuantFaturada = QuantFaturada - ?", alComando(7), (dPrecoUnitario * dQuant) - dValorDesconto, dQuantVenda)
                If lErro <> AD_SQL_SUCESSO Then gError 112450
        
                lErro = Comando_ExecutarPos(alComando(9), "SELECT FilialEmpresa FROM SldMesFat WHERE FilialEmpresa = ? AND  Ano = ? AND Produto = ?", 0, iFilialEmpresa, iFilial, Year(dtData), objProduto.sCodigo)
                If lErro <> AD_SQL_SUCESSO Then gError 112451
        
                lErro = Comando_BuscarPrimeiro(alComando(9))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112452
        
                If lErro = AD_SQL_SEM_DADOS Then gError 112453
        
                lErro = Comando_ExecutarPos(alComando(10), "UPDATE SldMesFat SET ValorFaturado" & sMes & " = ValorFaturado" & sMes & " - ?, QuantFaturada" & sMes & " = QuantFaturada" & sMes & " - ?", alComando(9), (dPrecoUnitario * dQuant) - dValorDesconto, dQuantVenda)
                If lErro <> AD_SQL_SUCESSO Then gError 112454
            
            End If
            
        End If
        
        'excluir registro na tabela de itensCupomFiscal
'        lErro = Comando_ExecutarPos(alComando(11), "DELETE FROM ItensCupomFiscal", alComando(2))
'        If lErro <> AD_SQL_SUCESSO Then gError 112455

        'alterado de exclusao fisica para logica para deixar registrado todos os cancelamentos
        lErro = Comando_ExecutarPos(alComando(11), "UPDATE ItensCupomFiscal SET Status = ?", alComando(2), STATUS_CANCELADO)
        If lErro <> AD_SQL_SUCESSO Then gError 112455

        lErro = Comando_BuscarProximo(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112456
    
    Loop

    'excluir registro na tabela de CupomFiscal
'    'excluir registro na tabela de CupomFiscal
'    lErro = Comando_ExecutarPos(alComando(12), "DELETE FROM CupomFiscal", alComando(1))
'    If lErro <> AD_SQL_SUCESSO Then gError 112457

    'alterado de exclusao fisica para logica para deixar registrado todos os cancelamentos
    lErro = Comando_ExecutarPos(alComando(12), "UPDATE CupomFiscal SET Status = ?", alComando(1), STATUS_CANCELADO)
    If lErro <> AD_SQL_SUCESSO Then gError 112457

    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL_BACKOFFICE Then
    
        If (lCOO <> 0 Or iStatus = STATUS_BAIXADO) And Len(Trim(sNFeChaveAcesso)) = 0 Then
    
            lErro = MovEstoque_Exclui_CupomFiscal(lNumIntCupom, iFilial)
            If lErro <> SUCESSO Then gError 105978
    
        End If
    
    End If
    
    'cancelamento de nfce ou sat
    If Len(Trim(sNFeChaveAcesso)) <> 0 Then
        
        lErro = Comando_Executar(alComando(14), "SELECT tpAmb, NumIntNF FROM NFeFedProtNFe WHERE chNFe = ?", itpAmb, lNumIntNF, sNFeChaveAcesso)
        If lErro <> AD_SQL_SUCESSO Then gError 112455

        lErro = Comando_BuscarProximo(alComando(14))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112456
        
        If lErro = AD_SQL_SUCESSO Then
        
            objNFiscal.lNumIntDoc = lNumIntNF
            
            lErro = CF("NFiscal_Le", objNFiscal)
            If lErro <> SUCESSO And lErro <> 31442 Then gError 35727
        
            If lErro = SUCESSO Then
            
                lErro = CF("NFiscalItens_Le", objNFiscal)
                If lErro <> SUCESSO Then gError 35727
            
                dtDataCancelamento = dtData '??? deveria vir no arquivo
        
                lErro = CF("NotaFiscalSaida_Cancelar_EmTrans", objNFiscal, dtDataCancelamento)
                If lErro <> SUCESSO Then gError 126973
    
                lErro = Comando_Executar(alComando(15), "INSERT INTO NFeFedRetCancNFe (versao,tpAmb,verAplic,cStat,xMotivo,cUF,chNFe,Data,nProt,NumIntNF,Hora,FilialEmpresa) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)", _
                    "", itpAmb, "", "135", "", "", sNFeChaveAcesso, dtDataCancelamento, "", lNumIntNF, CDbl(Time), objNFiscal.iFilialEmpresa)
                If lErro <> AD_SQL_SUCESSO Then gError 112455
                    
            End If
    
        End If
    
    End If
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    CupomFiscal_Excluir_Venda = SUCESSO

    Exit Function

Erro_CupomFiscal_Excluir_Venda:

    CupomFiscal_Excluir_Venda = gErr

    Select Case gErr

        Case 105978, 112436, 112438

        Case 112433
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 112434, 112458
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CUPOMFISCAL", gErr)

        Case 112435, 112460, 112456
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSCUPOMFISCAL", gErr)

        Case 112461
            Call Rotina_Erro(vbOKOnly, "ERRO_ITENSCUPOMFISCAL_NAO_CADASTRADO", gErr, lNumIntCupom)

        Case 112437
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_NAO_CADASTRADO", gErr, objProduto.sCodigo)

        Case 112439, 112440
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDDIAFATCX", gErr)

        Case 112441
            Call Rotina_Erro(vbOKOnly, "ERRO_SLDDIAFATCX_NAO_ENCONTRADO", gErr)

        Case 112442
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_SLDDIAFATCX", gErr)

        Case 112443, 112444
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESFATCX", gErr)

        Case 112445
            Call Rotina_Erro(vbOKOnly, "ERRO_SLDMESFATCX_NAO_ENCONTRADO", gErr)

        Case 112446
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_SLDMESFATCX", gErr)

        Case 112447, 112448
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDDIAFAT", gErr, iFilial, sProduto, dtData)

        Case 112449
            Call Rotina_Erro(vbOKOnly, "ERRO_SLDDIAFAT_NAO_ENCONTRADO", gErr)

        Case 112450
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_SLDDIAFAT", gErr)

        Case 112451, 112452
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESFAT", gErr, objCupomFiscal.iFilialEmpresa, objProduto.sCodigo, objCupomFiscal.dtDataEmissao)

        Case 112453
            Call Rotina_Erro(vbOKOnly, "ERRO_SLDMESFAT_NAO_ENCONTRADO", gErr)

        Case 112454
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_SLDMESFAT", gErr)

        Case 112455
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_ITENSCUPOMFISCAL", gErr)
        
        Case 112457
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CUPOMFISCAL", gErr, lNumIntCupom)

        Case 112459
            If lCOO <> 0 Then
                Call Rotina_Erro(vbOKOnly, "ERRO_CUPOMFISCAL_NAO_CADASTRADO_ARQ_COO", gErr, iECF, lCOO)
            Else
                Call Rotina_Erro(vbOKOnly, "ERRO_CUPOMFISCAL_NAO_CADASTRADO_ARQ_ORC", gErr, iECF, lORC)
            End If
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151158)

    End Select
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function MovEstoque_Exclui_CupomFiscal(ByVal lNumIntCupom As Long, ByVal iFilialEmpresa) As Long
'lNumIntMovEst é o numintdoc de um dos movimentos que serão excluidos, na realidade serão excluidos todos os movimentos com o mesmo codigo

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer
Dim lCodigo As Long
Dim objMovEstoque As New ClassMovEstoque

On Error GoTo Erro_MovEstoque_Exclui_CupomFiscal

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 105980
    Next

    lErro = Comando_ExecutarPos(alComando(1), "SELECT Codigo FROM MovimentoEstoque WHERE TipoNumIntDocOrigem = ? AND NumIntDocOrigem = ? AND FilialEmpresa = ?", 0, lCodigo, MOVEST_TIPONUMINTDOCORIGEM_CUPOMFISCAL, lNumIntCupom, iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 105975

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 105976

    If lErro = SUCESSO Then

        objMovEstoque.lCodigo = lCodigo
        objMovEstoque.iFilialEmpresa = iFilialEmpresa
        
        'Lê os movimento dos itens de nota fiscal
        lErro = CF("MovEstoqueItens_Le_Desc1", objMovEstoque)
        If lErro <> SUCESSO And lErro <> 89050 Then gError 105981
    
        objMovEstoque.iOperacao = EXCLUSAO_MOVIMENTO
    
        'Exclui os Movimentos de Estoque relacionados a Nota Fiscal
        lErro = CF("MovEstoque_Grava", objMovEstoque)
        If lErro <> SUCESSO Then gError 105979

    End If

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    MovEstoque_Exclui_CupomFiscal = SUCESSO

    Exit Function

Erro_MovEstoque_Exclui_CupomFiscal:

    MovEstoque_Exclui_CupomFiscal = gErr

    Select Case gErr
    
        Case 105975, 105976
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOESTOQUE", gErr)
    
        Case 105977
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVESTOQUE_NAO_CADASTRADO1", gErr)
    
        Case 105979, 105981
    
        Case 105980
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151159)
    
    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Carne_Excluir_Venda(ByVal iFilial As Integer, ByVal lNumIntDocCupomFiscal As Long) As Long
'excluir os dados de carne caso existam, também é passado como parametro o numero identificador o NumIntDoc do Cupom Fiscal
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lNumAuto As Long
Dim lErro As Long
Dim alComando(1 To 4) As Long
Dim iIndice As Integer
Dim lNumIntDoc As Long
Dim lNumIntParc As Long

On Error GoTo Erro_Carne_Excluir_Venda
    
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 112461
    Next

    'seleciona registro na tabela de Carne
    lErro = Comando_ExecutarPos(alComando(1), "SELECT NumIntDoc FROM Carne WHERE FilialEmpresa=? AND CupomFiscal=?", 0, lNumIntDoc, iFilial, lNumIntDocCupomFiscal)
    If lErro <> AD_SQL_SUCESSO Then gError 112462

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112463
    
    If lErro = AD_SQL_SUCESSO Then
    
        'busca registro na tabela de parcelas de carne
        lErro = Comando_ExecutarPos(alComando(2), "SELECT NumIntDoc FROM CarneParcelas WHERE FilialEmpresa=? AND NumIntCarne=?", 0, lNumIntParc, iFilial, lNumIntDoc)
        If lErro <> AD_SQL_SUCESSO Then gError 112464
    
        lErro = Comando_BuscarPrimeiro(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112465
    
        If lErro = AD_SQL_SEM_DADOS Then gError 112466

        Do While lErro <> AD_SQL_SEM_DADOS
        
            'excluir registro na tabela de carneparcelas
            lErro = Comando_ExecutarPos(alComando(3), "DELETE FROM CarneParcelas", alComando(2))
            If lErro <> AD_SQL_SUCESSO Then gError 112467
    
            lErro = Comando_BuscarProximo(alComando(2))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112468
            
        Loop
        
        'excluir registro na tabela de carne
        lErro = Comando_ExecutarPos(alComando(4), "DELETE FROM Carne", alComando(1))
        If lErro <> AD_SQL_SUCESSO Then gError 112469

    End If
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Carne_Excluir_Venda = SUCESSO

    Exit Function

Erro_Carne_Excluir_Venda:

    Carne_Excluir_Venda = gErr

    Select Case gErr

        Case 112461
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 112462, 112463
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CARNE", gErr)

        Case 112464, 112465, 112468
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CARNEPARC", gErr)
        
        Case 112466
            Call Rotina_Erro(vbOKOnly, "ERRO_CARNEPARC_NAO_EXISTENTES", gErr)
        
        Case 112467
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CARNEPARC", gErr)

        Case 112469
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CARNE", gErr)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151160)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function MovimentosCaixa_Excluir_Venda(ByVal iFilial As Integer, ByVal lNumIntCupom As Long, ByVal objCupomFiscal As ClassCupomFiscal) As Long
'Excluir os movimentos de caixa
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim iTipo As Integer
Dim lErro As Long
Dim alComando(1 To 13) As Long
Dim iIndice As Integer
Dim objMovCx As ClassMovimentoCaixa
Dim objCCMovDia As New ClassCCMovDia
Dim iTipoMeioPagto As Integer
Dim iFilialEmpresa As Integer
Dim sMes As String
Dim iAno As Integer
Dim lNumMovto As Long
Dim lNumIntDocLog As Long
Dim lNumIntDoc As Long
Dim iQuantLog As Integer
Dim dValor As Double
Dim dtDataMovimento As Date
Dim iParcelamento As Integer
Dim iAdmMeioPagto As Integer
Dim iCaixa As Integer
Dim lNumIntCheque As Long
Dim iTipoCartao As Integer

On Error GoTo Erro_MovimentosCaixa_Excluir_Venda

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 112470
    Next

    'seleciona registro na tabela de movimentos
    lErro = Comando_ExecutarPos(alComando(1), "SELECT NumMovto, NumIntDocLog, QuantLog, Tipo, Valor, DataMovimento, AdmMeioPagto, Parcelamento, Caixa, TipoCartao FROM MovimentosCaixa WHERE FilialEmpresa=? AND CupomFiscal=?", 0, lNumMovto, lNumIntDocLog, iQuantLog, iTipo, dValor, dtDataMovimento, iAdmMeioPagto, iParcelamento, iCaixa, iTipoCartao, iFilial, lNumIntCupom)
    If lErro <> AD_SQL_SUCESSO Then gError 112471

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112472
    
    Do While lErro <> AD_SQL_SEM_DADOS
    
        'seleciona registro na tabela de cheques
        lErro = Comando_ExecutarPos(alComando(2), "SELECT FilialEmpresa, NumIntCheque FROM ChequePre WHERE FilialEmpresa=? AND NumMovtoCaixa=?", 0, iFilialEmpresa, lNumIntCheque, iFilial, lNumMovto)
        If lErro <> AD_SQL_SUCESSO Then gError 112473
    
        lErro = Comando_BuscarPrimeiro(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112474
        
        If lErro = AD_SQL_SUCESSO Then
            
            'excluir registro na tabela de cheque
            lErro = Comando_Executar(alComando(3), "DELETE FROM ChequePre WHERE FilialEmpresa = ? AND NumIntCheque = ?", iFilialEmpresa, lNumIntCheque)
            If lErro <> AD_SQL_SUCESSO Then gError 112475
    
        End If
        
        'seleciona registro na tabela de troca
        lErro = Comando_ExecutarPos(alComando(4), "SELECT FilialEmpresa FROM Troca WHERE FilialEmpresa=? AND NumMovtoCaixa=?", 0, iFilialEmpresa, iFilial, lNumMovto)
        If lErro <> AD_SQL_SUCESSO Then gError 112477
    
        lErro = Comando_BuscarPrimeiro(alComando(4))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112478
        
        If lErro = AD_SQL_SUCESSO Then
                        
            'excluir registro na tabela de troca
            lErro = Comando_ExecutarPos(alComando(5), "DELETE FROM Troca", alComando(4))
            If lErro <> AD_SQL_SUCESSO Then gError 112479
    
        End If
        
        If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
        
            'seleciona registro na tabela de Log
            lErro = Comando_ExecutarPos(alComando(6), "SELECT NumIntDoc FROM Log WHERE NumIntDoc=?", 0, lNumIntDoc, lNumIntDocLog)
            If lErro <> AD_SQL_SUCESSO Then gError 112481
        
            lErro = Comando_BuscarPrimeiro(alComando(6))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112482
            
            If lErro <> AD_SQL_SEM_DADOS Then
                
                For iIndice = 1 To iQuantLog
                
                    'excluir registro na tabela de log
                    lErro = Comando_ExecutarPos(alComando(7), "DELETE FROM Log", alComando(6))
                    If lErro <> AD_SQL_SUCESSO Then gError 112483
            
                    lErro = Comando_BuscarProximo(alComando(6))
                    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112484
                    
                Next
                
            End If
            
        End If
            
        If objCupomFiscal.iTipo = OPTION_CF Or objCupomFiscal.iStatus = STATUS_BAIXADO Then
        
            Set objMovCx = New ClassMovimentoCaixa
            
            objMovCx.dValor = dValor
            objMovCx.dtDataMovimento = dtDataMovimento
            objMovCx.iCaixa = iCaixa
            objMovCx.iAdmMeioPagto = iAdmMeioPagto
            objMovCx.iFilialEmpresa = iFilial
            objMovCx.iParcelamento = iParcelamento
            objMovCx.lNumMovto = lNumMovto
            objMovCx.iTipo = iTipo
            objMovCx.iTipoCartao = iTipoCartao
                
            'seleciona registro na tabela de TiposMovtocaixa
            lErro = Comando_ExecutarPos(alComando(9), "SELECT TipoMeioPagto FROM TiposMovtoCaixa WHERE Codigo=?", 0, iTipoMeioPagto, iTipo)
            If lErro <> AD_SQL_SUCESSO Then gError 112493
        
            lErro = Comando_BuscarPrimeiro(alComando(9))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112494
                
            Set objCCMovDia = New ClassCCMovDia
            
            objCCMovDia.iTipoMeioPagto = iTipoMeioPagto
            
            'se for troco ==> trata como um saque para fins de estatistica
            If iTipo = MOVIMENTOCAIXA_TROCO_DINHEIRO Or _
            iTipo = MOVIMENTOCAIXA_TROCO_CONTRAVALE Or _
            iTipo = MOVIMENTOCAIXA_TROCO_VALE Then
                'preenche um objccmovdia com os dados do movimento de deposito no caixa central
                lErro = CF("Mover_Dados_Saque_CCMovDia", objMovCx, objCCMovDia)
                If lErro <> SUCESSO Then gError 112487
                
                'torna negativo o valor para que as tabelas estatisticas sejam atualizadas corretamente
                objMovCx.dValor = -objMovCx.dValor
                
            Else
                'preenche um objccmovdia com os dados do movimento de deposito no caixa central
                lErro = Mover_Dados_Deposito_CCMovDia(objMovCx, objCCMovDia)
                If lErro <> SUCESSO Then gError 112488
            End If
        
              'adiciona o mesmo no consolidado diário
            lErro = CF("CCMovDia_Exclui", objCCMovDia)
            If lErro <> SUCESSO Then gError 112489
        
            'adiciona o mesmo no consolidado anual no mês em questão
            lErro = CF("CCMov_Exclui", objCCMovDia)
            If lErro <> SUCESSO Then gError 112490
        
            lErro = Comando_ExecutarPos(alComando(10), "SELECT FilialEmpresa FROM SldDiaMeioPagtoCx WHERE FilialEmpresa = ? AND Caixa = ? AND TipoMeioPagto = ? AND AdmMeioPagto = ? AND Parcelamento = ? AND Data = ?", 0, iFilialEmpresa, objMovCx.iFilialEmpresa, objMovCx.iCaixa, objCCMovDia.iTipoMeioPagto, objMovCx.iAdmMeioPagto, objMovCx.iParcelamento, objMovCx.dtDataMovimento)
            If lErro <> AD_SQL_SUCESSO Then gError 112491
        
            lErro = Comando_BuscarPrimeiro(alComando(10))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112492
        
            If lErro = AD_SQL_SEM_DADOS Then gError 112495
        
            lErro = Comando_ExecutarPos(alComando(11), "UPDATE SldDiaMeioPagtoCx SET ValorFaturado = ValorFaturado - ?", alComando(10), objMovCx.dValor)
            If lErro <> AD_SQL_SUCESSO Then gError 112496
            
            lErro = Comando_ExecutarPos(alComando(12), "SELECT FilialEmpresa FROM SldMesMeioPagtoCx WHERE FilialEmpresa = ? AND Caixa = ? AND TipoMeioPagto = ? AND AdmMeioPagto = ? AND Parcelamento = ? AND Ano = ?", 0, iFilialEmpresa, objMovCx.iFilialEmpresa, objMovCx.iCaixa, objCCMovDia.iTipoMeioPagto, objMovCx.iAdmMeioPagto, objMovCx.iParcelamento, Year(objMovCx.dtDataMovimento))
            If lErro <> AD_SQL_SUCESSO Then gError 112497
        
            lErro = Comando_BuscarPrimeiro(alComando(12))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112498
        
            sMes = CStr(Month(objMovCx.dtDataMovimento))
            iAno = CStr(Year(objMovCx.dtDataMovimento))
        
            If lErro = AD_SQL_SEM_DADOS Then gError 112499
        
            lErro = Comando_ExecutarPos(alComando(13), "UPDATE SldMesMeioPagtoCx SET ValorFaturado" & sMes & " = ValorFaturado" & sMes & " - ?", alComando(12), objMovCx.dValor)
            If lErro <> AD_SQL_SUCESSO Then gError 112500
            
            
            objMovCx.dValor = -objMovCx.dValor

            'exclui o boleto e titulo a receber associado se for pos ou tef
            lErro = CF("MovimentosCaixa_Excluir_MovcxBol_New", objMovCx)
            If lErro <> SUCESSO Then gError 214638
            
            
        End If
        
        'excluir registro na tabela de movimentos
        lErro = Comando_ExecutarPos(alComando(8), "DELETE FROM MovimentosCaixa", alComando(1))
        If lErro <> AD_SQL_SUCESSO Then gError 112485

        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112486
        
    Loop

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    MovimentosCaixa_Excluir_Venda = SUCESSO

    Exit Function

Erro_MovimentosCaixa_Excluir_Venda:

    MovimentosCaixa_Excluir_Venda = gErr

    Select Case gErr

        Case 112470
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 112471, 112472, 112486
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOS_CAIXA", gErr)
        
        Case 112473, 112474, 112476
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUE", gErr)
        
        Case 112475
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CHEQUE1", gErr)
        
        Case 112477, 112478, 112480
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TROCA", gErr)
        
        Case 112479
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_TROCA", gErr)
        
        Case 112481, 112482, 112484
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_LOG", gErr)
        
        Case 112483
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_LOG", gErr)
        
        Case 112485
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_MOVIMENTOSCAIXA", gErr)
        
        Case 112487 To 112490, 214643
        
        Case 112491, 112492
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDDIAMEIOPAGTOCX", gErr)
        
        Case 112493, 112494
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOMEIOPAGTO", gErr)
        
        Case 112495
            Call Rotina_Erro(vbOKOnly, "ERRO_SLDDIAMEIOPAGTOCX_NAO_CADASTRADO", gErr)

        Case 112496
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_SLDDIAMEIOPAGTOCX", gErr)

        Case 112498, 112498
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESMEIOPAGTOCX", gErr)
        
        Case 112499
            Call Rotina_Erro(vbOKOnly, "ERRO_SLDMESMEIOPAGTOCX_NAO_CADASTRADO", gErr)

        Case 112500
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_SLDDIAMEIOPAGTOCX", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151161)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function Verifica_Existencia_Sequencial(ByVal lSequencial As Long, ByVal iCodCaixa As Integer, ByVal iFilialEmpresa As Integer) As Long

Dim lComando As Long
Dim lErro As Long
Dim iFilial As Integer

On Error GoTo Erro_Verifica_Existencia_Sequencial

'    lComando = Comando_Abrir()
'    If lComando = 0 Then gError 112624
'
'    'seleciona registro na tabela de movimentos
'    lErro = Comando_Executar(lComando, "SELECT FilialEmpresa FROM MovimentosCaixa WHERE FilialEmpresa=? AND Sequencial=? AND Caixa=? ", iFilial, iFilialEmpresa, lSequencial, iCodCaixa)
'    If lErro <> AD_SQL_SUCESSO Then gError 112625
'
'    lErro = Comando_BuscarPrimeiro(lComando)
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112626
'
'    If lErro = AD_SQL_SUCESSO Then gError 112627
'
'    Call Comando_Fechar(lComando)

    Verifica_Existencia_Sequencial = SUCESSO

    Exit Function

Erro_Verifica_Existencia_Sequencial:

    Verifica_Existencia_Sequencial = gErr

    Select Case gErr

        Case 112624
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 112625, 112626
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOS_CAIXA", gErr)
        
        Case 112627
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151162)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function ImpressoraECF_Grava(ByVal objImpressoraECF As ClassImpressoraECF) As Long
'Atualiza ou insere um novo registro na tabela ImpressoraECF

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim lComando2 As Long
Dim lTransacao As Long
Dim iCodModelo As Integer
Dim iCodigo As Integer
Dim objLog As New ClassLog

On Error GoTo Erro_ImpressoraECF_Grava

    'Inicia os comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 103472

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 103473

    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then gError 103474

    'inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 103475

    'Verifica se o ModeloECF existe
    lErro = Comando_ExecutarPos(lComando2, "SELECT Codigo FROM ModeloECF WHERE Codigo = ?", 0, iCodigo, objImpressoraECF.iCodModelo)
    If lErro <> AD_SQL_SUCESSO Then gError 103476

    lErro = Comando_BuscarPrimeiro(lComando2)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 103477

    If lErro <> AD_SQL_SUCESSO Then gError 103478

    'Faz o lock do ModeloECF
    lErro = Comando_LockShared(lComando2)
    If lErro <> AD_SQL_SUCESSO Then gError 103479

    'Verifica se já existe ImpressoraECF cadastrado com o código utilizado
    lErro = Comando_ExecutarPos(lComando, "SELECT CodModelo FROM ImpressoraECF WHERE Codigo = ? AND FilialEmpresa = ?", 0, iCodModelo, objImpressoraECF.iCodigo, objImpressoraECF.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 103480

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 103481

    'Se não encontrou
    If lErro = AD_SQL_SEM_DADOS Then
        
        'Passa p/ o objLog o tipo de operação a ser realizada.
        objLog.iOperacao = INCLUSAO_IMPRESSORAECF
    
        'Então, insere um novo registro na tabela POS
        lErro = Comando_Executar(lComando1, "INSERT INTO ImpressoraECF(FilialEmpresa, Codigo, CodModelo, NumSerie) VALUES (?,?,?,?)", _
        objImpressoraECF.iFilialEmpresa, objImpressoraECF.iCodigo, objImpressoraECF.iCodModelo, objImpressoraECF.sNumSerie)
        If lErro <> AD_SQL_SUCESSO Then gError 103482

    'Se encontrou
    Else

        'Faz o lock
        lErro = Comando_LockExclusive(lComando)
        If lErro <> AD_SQL_SUCESSO Then gError 103483
            
        'Passa p/ o objLog o tipo de operação a ser realizada.
        objLog.iOperacao = ALTERACAO_IMPRESSORAECF
        
        'E altera o registro na tabela
        lErro = Comando_ExecutarPos(lComando1, "UPDATE ImpressoraECF SET CodModelo = ?, NumSerie = ?", _
        lComando, objImpressoraECF.iCodModelo, objImpressoraECF.sNumSerie)

        If lErro <> AD_SQL_SUCESSO Then gError 103484

    End If
    
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
        'Monta a String de log que deverá ser gravada.
        Call ImpressoraECF_Carrega_Log(objLog, objImpressoraECF)
        
        'Monta Registro Para a Tabela de Log
        lErro = CF("Log_Grava", objLog)
        If lErro <> SUCESSO Then gError 118128
    End If
    
    'Confirma a Transacao
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 103485

    'Fecha os comandos
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)

    ImpressoraECF_Grava = SUCESSO

    Exit Function

Erro_ImpressoraECF_Grava:

    ImpressoraECF_Grava = gErr

        Select Case gErr

            Case 103472, 103473, 103474
                Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

            Case 103475
                Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

            Case 103476, 103477
                Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MODELOECF", gErr)

            Case 103478
                Call Rotina_Erro(vbOKOnly, "ERRO_MODELO_ECF_NAO_CADASTRADO", gErr)
            
            Case 103479
                Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_MODELO", gErr)

            Case 103480, 103481
                Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_IMPRESSORACF", gErr)

            Case 103482
                Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_IMPRESSORA", gErr)
                
            Case 103483
                Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_IMPRESSORA", gErr)
                
            Case 103484
                Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_IMPRESSORA", gErr)
                
            Case 103485
                 Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
              
            Case 118128
            
            Case Else
                Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151163)

    End Select

    Call Transacao_Rollback
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    Call Comando_Fechar(lComando2)

    Exit Function

End Function

Function ImpressoraECF_Exclui(ByVal objImpressoraECF As ClassImpressoraECF) As Long
'Exclui o ImpressoraECF

Dim iIndice As Integer
Dim lErro As Long
Dim lTransacao As Long
Dim alComando(0 To 2) As Long
Dim iCodigo As Integer
Dim objLog As New ClassLog

On Error GoTo Erro_ImpressoraECF_Exclui

   'Abre os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 112785
    Next

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 112786

    'Busca no BD o ImpressoraECF a ser excluído
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Codigo FROM ImpressoraECF WHERE FilialEmpresa = ? AND Codigo = ?", 0, iCodigo, objImpressoraECF.iFilialEmpresa, objImpressoraECF.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 112787

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112788
    
    'Se não encontrou => erro
    If lErro = AD_SQL_SEM_DADOS Then gError 112789

    'Faz o lock do ImpressoraECF
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 112790
        
    'Busca no BD se a ImpressoraECF está relacionada ao ECF
    lErro = Comando_Executar(alComando(2), "SELECT Codigo FROM ECF WHERE FilialEmpresa = ? AND ImpressoraECF = ?", iCodigo, objImpressoraECF.iFilialEmpresa, objImpressoraECF.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 112793

    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112794
    
    'Se encontrou => erro
    If lErro = AD_SQL_SUCESSO Then gError 112795
    
    'Exclui o ImpressoraECF
    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM ImpressoraECF", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 112791
    
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
        
        objLog.iOperacao = EXCLUSAO_IMPRESSORAECF
        
        'Monta a String de log que deverá ser gravada.
        Call ImpressoraECF_Carrega_Log(objLog, objImpressoraECF)
        
        'Monta Registro Para a Tabela de Log
        lErro = CF("Log_Grava", objLog)
        If lErro <> SUCESSO Then gError 118129
    End If
    
    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 112792

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    ImpressoraECF_Exclui = SUCESSO

    Exit Function

Erro_ImpressoraECF_Exclui:

    ImpressoraECF_Exclui = gErr

    Select Case gErr

        Case 112785
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 112786
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 112787, 112788
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_IMPRESSORAECF", gErr, objImpressoraECF.iCodigo)

        Case 112789
            Call Rotina_Erro(vbOKOnly, "ERRO_IMPRESSORA_NAO_CADASTRADA", gErr, objImpressoraECF.iCodigo)
        
        Case 112790
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_IMPRESSORA", gErr)

        Case 112791
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_IMPRESSORAECF", gErr, objImpressoraECF.iCodigo)

        Case 112792
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case 112793, 112794
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ECF1", gErr)

        Case 112795
            Call Rotina_Erro(vbOKOnly, "ERRO_IMPRESSORA_RELACIONADA_ECF", gErr, objImpressoraECF.iCodigo)
        
        Case 118129
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151164)

    End Select

    Call Transacao_Rollback
    
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

'**************************************
'   INICIO CODIGO TRANSF. DO CAIXA CENTRAL PARA BACKOFFICE
'****************************************

'**************************************
'   INICIO CODIGO GRAVACAO DOS DADOS DO ARQUIVO DO CAIXA CENTRAL QUE SERAO TRANSFERIDOS PARA O BACKOFFICE
'****************************************

Function Rotina_Gravacao_CC_Back(colNomeArq As Collection, ByVal lNumIntDocFinal As Long, ByVal objBarraProgresso As Object, ByVal iTrans As Integer, Optional ByVal iFilialEmpresa As Integer = 0, Optional ByVal colSeq As Collection) As Long
'gera o arquivo que será transferido para o backoffice a partir dos dados da tabela log.

Dim alComando(1 To 3) As Long
Dim lNumIntDoc As Long
Dim lErro As Long
Dim lTransacao As Long
Dim lSequencial As Long
Dim iIndice As Integer
Dim sDirDadosCC As String
Dim sNomeArq As String
Dim objLojaConfig As New ClassLojaConfig
Dim iFilialEmpresa1 As Integer
Dim lNumIntDocInicial As Long

On Error GoTo Erro_Rotina_Gravacao_CC_Back

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 118022
    Next
    
    objLojaConfig.iFilialEmpresa = EMPRESA_TODA
    objLojaConfig.sCodigo = DIRETORIO_TELA_EXIBIRARQUIVOSCCBACK
    
    lErro = CF("LojaConfig_Le1", objLojaConfig)
    If lErro <> SUCESSO And lErro <> 126361 Then gError 133622
    
    'se nao encontrou o registro q armazena o ultimo diretorio acessado para esta tela
    If lErro = 126361 Then objLojaConfig.sConteudo = CurDir
    
    sDirDadosCC = objLojaConfig.sConteudo
    
    'se o diretorio nao for terminado por \  ===> acrescentar
    If right(sDirDadosCC, 1) <> "\" Then sDirDadosCC = sDirDadosCC & "\"
    
    'Abre a Transação
    'esta transacao é fechada toda vez que entra na Rotina_Gravacao_CC_Back2 e aberta uma nova
    'isto é feito para liberar os registros locados
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 118031

    If iFilialEmpresa = 0 Then

        'selecionar o registro com os dados da filial e faz o lock para impedir a geracao simultanea do arquivo de log por 2 estacoes
        lErro = Comando_ExecutarLockado(alComando(1), "SELECT FilialEmpresa FROM FiliaisEmpresa", iFilialEmpresa1)
        If lErro <> AD_SQL_SUCESSO Then gError 118023

    Else
    
        'selecionar o registro com os dados da filial e faz o lock para impedir a geracao simultanea do arquivo de log por 2 estacoes
        lErro = Comando_ExecutarLockado(alComando(1), "SELECT FilialEmpresa FROM FiliaisEmpresa WHERE FilialEmpresa = ?", iFilialEmpresa1, iFilialEmpresa)
        If lErro <> AD_SQL_SUCESSO Then gError 133647

    End If

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118024

    Do While lErro = AD_SQL_SUCESSO

        lErro = Comando_LockExclusive(alComando(1))
        If lErro <> AD_SQL_SUCESSO Then gError 118026
    
        If iTrans = 0 Then
        
            lErro = CF("ControleLogCCBack_Le_Limites", iFilialEmpresa1, lNumIntDocInicial, lNumIntDocFinal)
            If lErro <> SUCESSO And lErro <> 118910 Then gError 118904
        
            If lErro = SUCESSO Then
        
                'selecionar o ultimo registro que contem info sobre os dados do log que foram enviados para o backfoffice
                lErro = Comando_Executar(alComando(2), "SELECT Sequencial, NumIntDocFinal FROM ControleLogCCBack WHERE FilialEmpresa = ? ORDER BY FilialEmpresa, Sequencial DESC", lSequencial, lNumIntDoc, iFilialEmpresa1)
                If lErro <> AD_SQL_SUCESSO Then gError 118027
                
                lErro = Comando_BuscarPrimeiro(alComando(2))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118028
                
                If lErro = AD_SQL_SEM_DADOS Then
                    lNumIntDoc = 0
                    lSequencial = 0
                End If
            
                lErro = Rotina_Gravacao_CC_Back1(iFilialEmpresa1, sNomeArq, lNumIntDoc, lNumIntDocFinal, lSequencial, lTransacao, objBarraProgresso, sDirDadosCC)
                If lErro <> SUCESSO Then gError 118029
                
                colNomeArq.Add sNomeArq
            
            End If
            
        Else
            
            For iIndice = 1 To colSeq.Count
                
                lSequencial = colSeq.Item(iIndice)
                
                'selecionar o ultimo registro que contem info sobre os dados do log que foram enviados para o backfoffice
                lErro = Comando_Executar(alComando(3), "SELECT NumIntDocInicial, NumIntDocFinal FROM ControleLogCCBack WHERE FilialEmpresa = ? AND Sequencial = ?", lNumIntDoc, lNumIntDocFinal, iFilialEmpresa1, lSequencial)
                If lErro <> AD_SQL_SUCESSO Then gError 118913
                
                lErro = Comando_BuscarPrimeiro(alComando(3))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118914
                
                lNumIntDoc = lNumIntDoc - 1
                
                sNomeArq = ""
                
                lErro = Rotina_Gravacao_CC_Back1(iFilialEmpresa1, sNomeArq, lNumIntDoc, lNumIntDocFinal, lSequencial, lTransacao, objBarraProgresso, sDirDadosCC, iTrans)
                If lErro <> SUCESSO Then gError 118915
                    
                colNomeArq.Add sNomeArq
                    
                lErro = Transacao_Commit()
                If lErro <> AD_SQL_SUCESSO Then gError 119005
                
                lTransacao = Transacao_Abrir()
                If lTransacao = 0 Then gError 119006
    
             Next
        
        End If
    
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 133646
    
    Loop
    
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 118040
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    'confirma a transação
    Rotina_Gravacao_CC_Back = SUCESSO

    Exit Function

Erro_Rotina_Gravacao_CC_Back:

    Rotina_Gravacao_CC_Back = gErr

    Select Case gErr

        Case 118022
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 118023, 118024, 133646, 133647
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIAIS", gErr)

        Case 118025
            Call Rotina_Erro(vbOKOnly, "ERRO_FILIAL_NAO_ENCONTRADA2", gErr, iFilialEmpresa1)

        Case 118026
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_FILIALEMPRESA", gErr, iFilialEmpresa1)

        Case 118027, 118028, 118913, 118914
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONTROLELOGCCBACK", gErr)

        Case 118029, 118915, 133622

        Case 118030
            Call Rotina_Erro(vbOKOnly, "ERRO_UNLOCK_FILIALEMPRESA", gErr)

        Case 118031, 119006
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
        
        Case 118040, 119005
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151165)

    End Select
    
    'cancela a transacao
    Call Transacao_Rollback

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function Rotina_Gravacao_CC_Back1(ByVal iFilialEmpresa As Integer, sNomeArq As String, ByVal lNumIntDoc As Long, ByVal lNumIntDocFim As Long, ByVal lSequencial As Long, ByVal lTransacao As Long, ByVal objBarraProgresso As Object, ByVal sDirDadosCC As String, Optional iTrans As Integer) As Long
'gera o arquivo que será transferido para o backoffice a partir dos dados da tabela log.

'???TEM QUE GRAVAR ALGO NO ARQUIVO, PROVAVELMENTE NO FINAL, PARA TRATAR ARQUIVO CORROMPIDO. VER CHECKSUM.

Dim alComando(1 To 3) As Long
Dim lErro As Long
Dim tLog As typeLog
Dim iIndice As Integer
Dim iContinuacao As Integer
Dim lNumIntDocInicial As Long
Dim lNumIntDocFinal As Long
Dim objLog As New ClassLog
Dim lComando As Long
Dim iFilialEmpresa1 As Integer
Dim sNomeTemp As String
Dim sRet As String
Dim lNumRegistros As Long
Dim lRegistroAtual As Long

On Error GoTo Erro_Rotina_Gravacao_CC_Back1
    
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 118032
    Next
    
    'Abre o comando
    lComando = Comando_AbrirExt(GL_lConexaoRel)
    If lComando = 0 Then gError 119007
    
    tLog.sLog1 = String(STRING_LOG, 0)
    tLog.sLog2 = String(STRING_LOG, 0)
    tLog.sLog3 = String(STRING_LOG, 0)
    tLog.sLog4 = String(STRING_LOG, 0)

    objBarraProgresso.Value = 0

    'selecionar o registro da tabela de log que serão transferidos
    lErro = Comando_Executar(lComando, "SELECT Count(*) FROM Log WHERE NumIntDoc > ? And NumIntDoc <= ?", lNumRegistros, lNumIntDoc, lNumIntDocFim)
    If lErro <> AD_SQL_SUCESSO Then gError 126009

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO Then gError 126010

    'selecionar o registro da tabela de log que serão transferidos
    lErro = Comando_ExecutarPos(lComando, "SELECT NumIntDoc, Operacao, Log1, Log2, Log3, Log4, Data, Hora, Continuacao FROM Log WHERE NumIntDoc > ? And NumIntDoc <= ? ORDER BY NumIntDoc", 0, tLog.lNumIntDoc, tLog.iOperacao, tLog.sLog1, tLog.sLog2, tLog.sLog3, tLog.sLog4, tLog.dtData, tLog.dHora, tLog.iContinuacao, lNumIntDoc, lNumIntDocFim)
    If lErro <> AD_SQL_SUCESSO Then gError 118033

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118034
    
    'se nao encontrar nenhum registro no log que precise ser transferido ==> erro. Isto servirá para indicar o que aconteceu como resultado de cada execucao, mesmo quando nao gerar arquivo.
    If lErro = AD_SQL_SEM_DADOS Then gError 118035

    lNumIntDocInicial = tLog.lNumIntDoc
    
    If iTrans = 1 Then
        'monta o nome do arquivo de transferencia = CC_codEmpresa_FilialEmpresa_Sequencial.ccb
        sNomeArq = sDirDadosCC & "CC_" & CStr(glEmpresa) & "_" & CStr(iFilialEmpresa) & "_" & CStr(lSequencial) & ".ccb"
                    
        'verifica se o arquivo existe.
        sRet = Dir(sNomeArq, vbNormal)
        
        'se já existir ==> remove
        If sRet <> "" Then Kill (sNomeArq)
    Else
        'monta o nome do arquivo de transferencia = CC_codEmpresa_FilialEmpresa_Sequencial.ccb
        sNomeArq = sDirDadosCC & "CC_" & CStr(glEmpresa) & "_" & CStr(iFilialEmpresa) & "_" & CStr(lSequencial + 1) & ".ccb"
    End If
    
    Open sNomeArq For Append As #1

    'Insere o titulo do arquivo como primeiro registro para permitir verificar na leitura se está processando o log na sequencia certa.
    Print #1, sNomeArq

    Print #1, CStr(VERSAO_ECF)

    Do While lErro = AD_SQL_SUCESSO
        
        lErro = Comando_LockExclusive(lComando)
        
        If lErro <> AD_SQL_SUCESSO Then gError 118036

        If iContinuacao = 0 Then
            objLog.lNumIntDoc = tLog.lNumIntDoc
            objLog.iOperacao = tLog.iOperacao
            objLog.sLog = tLog.sLog1 + tLog.sLog2 + tLog.sLog3 + tLog.sLog4
            objLog.dtData = tLog.dtData
            objLog.dHora = tLog.dHora
        Else
            objLog.sLog = objLog.sLog + tLog.sLog1 + tLog.sLog2 + tLog.sLog3 + tLog.sLog4
        End If

        If iContinuacao = tLog.iContinuacao Then

            lErro = Rotina_Gravacao_CC_Back2(objLog, lTransacao)
            If lErro <> SUCESSO And lErro <> 118053 Then gError 118037
            'Arquivo já transmitido
            
            iContinuacao = -1

        End If
        
        lNumIntDocFinal = tLog.lNumIntDoc
        
        If iTrans <> 1 Then
            lErro = Comando_ExecutarPos(alComando(2), "SELECT FilialEmpresa FROM ControleLogCCBack WHERE FilialEmpresa = ? AND Sequencial= ?", 0, iFilialEmpresa1, iFilialEmpresa, lSequencial + 1)
            If lErro <> AD_SQL_SUCESSO Then gError 119007
        
            lErro = Comando_BuscarProximo(alComando(2))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 119008
            
            If lErro = AD_SQL_SEM_DADOS Then
                lErro = Comando_Executar(alComando(3), "INSERT INTO ControleLogCCBack (FilialEmpresa, Sequencial, NumIntDocInicial, NumIntDocFinal, Data, Hora) VALUES (?,?,?,?,?,?)", iFilialEmpresa, lSequencial + 1, lNumIntDocInicial, lNumIntDocFinal, gdtDataAtual, CDbl(Time))
                If lErro <> AD_SQL_SUCESSO Then gError 119009
            Else
                lErro = Comando_ExecutarPos(alComando(3), "UPDATE ControleLogCCBack SET NumIntDocFinal =?", alComando(2), lNumIntDocFinal)
                If lErro <> AD_SQL_SUCESSO Then gError 119010
            End If
        End If
        
        lRegistroAtual = lRegistroAtual + 1
        
        objBarraProgresso.Value = CInt((lRegistroAtual / lNumRegistros) * 100)
        
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118038

        iContinuacao = iContinuacao + 1

    Loop
    
    'Fecha o Arquivo
    Close #1
     
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Call Comando_Fechar(lComando)
    
    Rotina_Gravacao_CC_Back1 = SUCESSO

    Exit Function

Erro_Rotina_Gravacao_CC_Back1:
    
    Rotina_Gravacao_CC_Back1 = gErr
    
    Close #1

    Select Case gErr

        Case 118032, 119007
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 118033, 118034, 118038, 126009, 126010
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_LOG", gErr)

        Case 118035
            Call Rotina_Erro(vbOKOnly, "ERRO_LOG_NAO_EXISTENTE", gErr)

        Case 118036
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_LOG", gErr)

        Case 118037
        
        Case 118054
            lErro = Rotina_Erro(vbOKOnly, "ERRO_REGISTRO_JA_TRANSMITIDO", gErr, objLog.lNumIntDoc)
            
        Case 119007, 119008
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONTROLELOGCCBACK", gErr)
            
        Case 119009
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CONTROLELOGCCBACK", gErr)
        
        Case 119010
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_CONTROLELOGCCBACK", gErr)
        
        Case 119013
            Call Rotina_Erro(vbOKOnly, "ERRO_ARQUIVO_NAO_RETRANSMITIDO", gErr)
                
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151166)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Private Function Rotina_Gravacao_CC_Back2(ByVal objLog As ClassLog, lTransacao As Long) As Long
'grava registro no arquivo que será transferido para o backoffice a partir dos dados da tabela log.
'grava, onde for necessario, a indicacao no bd do caixa central que a info foi transferida. (DataBackOffice)

Dim lErro As Long
Dim sLog As String

On Error GoTo Erro_Rotina_Gravacao_CC_Back2

    Select Case objLog.iOperacao

        Case INCLUSAO_BORDEROBOLETO

            lErro = CCBack_BorderoBoleto(objLog)
            If lErro <> SUCESSO And lErro <> 118051 Then gError 118041

        Case INCLUSAO_BORDEROCHEQUE

            lErro = CCBack_BorderoCheque(objLog)
            If lErro <> SUCESSO And lErro <> 118059 Then gError 118042

        Case INCLUSAO_BORDEROOUTROS

            lErro = CCBack_BorderoOutros(objLog)
            If lErro <> SUCESSO And lErro <> 118065 Then gError 118043

        Case INCLUSAO_BORDEROVALETICKET

            lErro = CCBack_BorderoValeTicket(objLog)
            If lErro <> SUCESSO And lErro <> 118071 Then gError 118044
        
        Case INCLUSAO_CLIENTE

            lErro = CCBack_Cliente(objLog)
            If lErro <> SUCESSO And lErro <> 118146 Then gError 118140
        
        Case INCLUSAO_FILIALCLIENTE

            lErro = CCBack_FilialCliente(objLog)
            If lErro <> SUCESSO And lErro <> 118152 Then gError 118141

        Case INCLUSAO_TRANSFERENCIA_CENTRAL

            lErro = CCBack_TransfCentral(objLog)
            If lErro <> SUCESSO Then gError 105604

    End Select

    sLog = CStr(objLog.iOperacao) & Chr(vbKeyEscape) & objLog.sLog

    'Insere registro no Arquivo
    Print #1, sLog

    'fecha e abre a transacao. Desta forma libera os registros que estavam locados
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 118045

    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 118046

    Rotina_Gravacao_CC_Back2 = SUCESSO

    Exit Function

Erro_Rotina_Gravacao_CC_Back2:

    Rotina_Gravacao_CC_Back2 = gErr

    Select Case gErr

        Case 105604, 118041 To 118044, 118053, 118140, 118141

        Case 118045
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case 118046
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151167)

    End Select

    Exit Function

End Function

Private Function CCBack_FilialCliente(ByVal objLog As ClassLog) As Long
'grava em FilialCliente a DataBackoffice

Dim lErro As Long
Dim sRegistro As String
Dim iPosAtual As Integer
Dim iPosFimAtual As Integer
Dim lCodigoCliente As Long
Dim iCodigoFilial As Integer
Dim iTransferido As Integer
Dim lCodigoClienteLoja As Long
Dim iCodigoFilialLoja As Integer
Dim iIndice As Integer
Dim alComando(1 To 2) As Long
Dim dtDataBackoffice As Date

On Error GoTo Erro_CCBack_FilialCliente

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 118148
    Next

    sRegistro = objLog.sLog

    iPosAtual = 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    lCodigoCliente = StrParaLong(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    iCodigoFilial = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    lCodigoClienteLoja = StrParaLong(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    iCodigoFilialLoja = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
    If lCodigoClienteLoja <> 0 Then
        'seleciona o FilialCliente em questao
        lErro = Comando_ExecutarPos(alComando(1), "SELECT Transferido FROM FiliaisClientes WHERE CodClienteLoja=? AND CodFilialLoja=?", 0, iTransferido, lCodigoClienteLoja, iCodigoFilialLoja)
    Else
        'seleciona o FilialCliente em questao
        lErro = Comando_ExecutarPos(alComando(1), "SELECT Transferido FROM FiliaisClientes WHERE CodCliente=? AND CodFilial=?", 0, iTransferido, lCodigoCliente, iCodigoFilial)
    End If
    
    If lErro <> AD_SQL_SUCESSO Then gError 118149

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118150

    'se nao existir-> erro
    If lErro = AD_SQL_SEM_DADOS Then gError 118151

    'Altera o FilialCliente
    lErro = Comando_ExecutarPos(alComando(2), "UPDATE FiliaisClientes SET Transferido = ?", alComando(1), TRANSFERIDO)
    If lErro <> AD_SQL_SUCESSO Then gError 118153

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    CCBack_FilialCliente = SUCESSO

    Exit Function

Erro_CCBack_FilialCliente:

    CCBack_FilialCliente = gErr

    Select Case gErr

        Case 118148
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 118149, 118150
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIAISCLIENTES2", gErr)

        Case 118151
            Call Rotina_Erro(vbOKOnly, "ERRO_FILIALCLIENTE_NAO_EXISTENTE", gErr)

        Case 118152

        Case 118153
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_FILIALCLIENTE", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151168)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function CCBack_Cliente(ByVal objLog As ClassLog) As Long
'grava em Cliente a DataBackoffice

Dim lErro As Long
Dim sRegistro As String
Dim iPosAtual As Integer
Dim iPosFimAtual As Integer
Dim lCodigoLoja As Long
Dim lCodigo As Long
Dim iTransferido As Integer
Dim iIndice As Integer
Dim alComando(1 To 2) As Long
Dim dtDataBackoffice As Date

On Error GoTo Erro_CCBack_Cliente

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 118142
    Next

    sRegistro = objLog.sLog

    iPosAtual = 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    lCodigo = StrParaLong(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    lCodigoLoja = StrParaLong(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
    If lCodigoLoja <> 0 Then
        'seleciona o Cliente em questao
        lErro = Comando_ExecutarPos(alComando(1), "SELECT Transferido FROM Clientes WHERE CodigoLoja=?", 0, iTransferido, lCodigoLoja)
    ElseIf lCodigo <> 0 Then
        'seleciona o Cliente em questao
        lErro = Comando_ExecutarPos(alComando(1), "SELECT Transferido FROM Clientes WHERE Codigo=?", 0, iTransferido, lCodigoLoja)
    End If
    If lErro <> AD_SQL_SUCESSO Then gError 118143
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118144

    'se nao existir-> erro
    If lErro = AD_SQL_SEM_DADOS Then gError 118145

    'Altera o cliente
    lErro = Comando_ExecutarPos(alComando(2), "UPDATE Clientes SET Transferido = ?", alComando(1), TRANSFERIDO)
    If lErro <> AD_SQL_SUCESSO Then gError 118147

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    CCBack_Cliente = SUCESSO

    Exit Function

Erro_CCBack_Cliente:

    CCBack_Cliente = gErr

    Select Case gErr

        Case 118142
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 118143, 118144
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CLIENTES", gErr)

        Case 118145
            Call Rotina_Erro(vbOKOnly, "ERRO_CLIENTE_NAO_CADASTRADO_2", gErr)

        Case 118146

        Case 118147
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_CLIENTES", gErr, lCodigoLoja)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151169)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function CCBack_BorderoBoleto(ByVal objLog As ClassLog) As Long
'grava em BorderoBoleto a DataBackoffice

Dim lErro As Long
Dim sRegistro As String
Dim iPosAtual As Integer
Dim iPosFimAtual As Integer
Dim iFilialEmpresa As Integer
Dim lNumBordero As Long
Dim iIndice As Integer
Dim alComando(1 To 2) As Long
Dim dtDataBackoffice As Date

On Error GoTo Erro_CCBack_BorderoBoleto

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 118047
    Next

    sRegistro = objLog.sLog

    iPosAtual = 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    lNumBordero = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    'seleciona o bordero em questao
    lErro = Comando_ExecutarPos(alComando(1), "SELECT DataBackoffice FROM BorderoBoleto WHERE FilialEmpresa=? AND NumBordero=?", 0, dtDataBackoffice, iFilialEmpresa, lNumBordero)
    If lErro <> AD_SQL_SUCESSO Then gError 118048

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118049

    'se nao existir-> erro
    If lErro = AD_SQL_SEM_DADOS Then gError 118050

    'seleciona o bordero em questao
    lErro = Comando_ExecutarPos(alComando(2), "UPDATE BorderoBoleto SET DataBackoffice = ?", alComando(1), gdtDataAtual)
    If lErro <> AD_SQL_SUCESSO Then gError 118052

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    CCBack_BorderoBoleto = SUCESSO

    Exit Function

Erro_CCBack_BorderoBoleto:

    CCBack_BorderoBoleto = gErr

    Select Case gErr

        Case 118047
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 118048, 118049
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BORDEROBOLETO", gErr)

        Case 118050
            Call Rotina_Erro(vbOKOnly, "ERRO_BORDEROBOLETO_NAOENCONTRADO", gErr, iFilialEmpresa, lNumBordero)

        Case 118051

        Case 118052
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_BORDEROBOLETO", gErr, iFilialEmpresa, lNumBordero)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151170)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function CCBack_BorderoCheque(ByVal objLog As ClassLog) As Long
'grava em BorderoCheque a DataBackoffice

Dim lErro As Long
Dim sRegistro As String
Dim iPosAtual As Integer
Dim iPosFimAtual As Integer
Dim iFilialEmpresa As Integer
Dim lNumBordero As Long
Dim iIndice As Integer
Dim alComando(1 To 2) As Long
Dim dtDataBackoffice As Date

On Error GoTo Erro_CCBack_BorderoCheque

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 118055
    Next

    sRegistro = objLog.sLog

    iPosAtual = 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    lNumBordero = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    'seleciona o bordero em questao
    lErro = Comando_ExecutarPos(alComando(1), "SELECT DataBackoffice FROM BorderoCheque WHERE FilialEmpresa=? AND NumBordero=?", 0, dtDataBackoffice, iFilialEmpresa, lNumBordero)
    If lErro <> AD_SQL_SUCESSO Then gError 118056

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118057

    'se nao existir-> erro
    If lErro = AD_SQL_SEM_DADOS Then gError 118058

    'seleciona o bordero em questao
    lErro = Comando_ExecutarPos(alComando(2), "UPDATE BorderoCheque SET DataBackoffice = ?", alComando(1), gdtDataAtual)
    If lErro <> AD_SQL_SUCESSO Then gError 118060

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    CCBack_BorderoCheque = SUCESSO

    Exit Function

Erro_CCBack_BorderoCheque:

    CCBack_BorderoCheque = gErr

    Select Case gErr

        Case 118055
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 118056, 118057
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BORDEROCHEQUE", gErr, lNumBordero)

        Case 118058
            Call Rotina_Erro(vbOKOnly, "ERRO_BORDEROCHEQUE_NAOENCONTRADO", gErr, iFilialEmpresa, lNumBordero)

        Case 118059

        Case 118060
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_BORDEROCHEQUE", gErr, iFilialEmpresa, lNumBordero)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151171)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function CCBack_BorderoOutros(ByVal objLog As ClassLog) As Long
'grava em BorderoOutros a DataBackoffice

Dim lErro As Long
Dim sRegistro As String
Dim iPosAtual As Integer
Dim iPosFimAtual As Integer
Dim iFilialEmpresa As Integer
Dim lNumBordero As Long
Dim iIndice As Integer
Dim alComando(1 To 2) As Long
Dim dtDataBackoffice As Date

On Error GoTo Erro_CCBack_BorderoOutros

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 118061
    Next

    sRegistro = objLog.sLog

    iPosAtual = 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    lNumBordero = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    'seleciona o bordero em questao
    lErro = Comando_ExecutarPos(alComando(1), "SELECT DataBackoffice FROM BorderoOutros WHERE FilialEmpresa=? AND NumBordero=?", 0, dtDataBackoffice, iFilialEmpresa, lNumBordero)
    If lErro <> AD_SQL_SUCESSO Then gError 118062

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118063

    'se nao existir-> erro
    If lErro = AD_SQL_SEM_DADOS Then gError 118064

    'seleciona o bordero em questao
    lErro = Comando_ExecutarPos(alComando(2), "UPDATE BorderoOutros SET DataBackoffice = ?", alComando(1), gdtDataAtual)
    If lErro <> AD_SQL_SUCESSO Then gError 118066

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    CCBack_BorderoOutros = SUCESSO

    Exit Function

Erro_CCBack_BorderoOutros:

    CCBack_BorderoOutros = gErr

    Select Case gErr

        Case 118061
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 118062, 118063
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BORDEROOUTROS", gErr, iFilialEmpresa, lNumBordero)

        Case 118064
            Call Rotina_Erro(vbOKOnly, "ERRO_BORDEROOUTROS_NAOENCONTRADO", gErr, iFilialEmpresa, lNumBordero)

        Case 118065

        Case 118066
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_BORDEROOUTROS", gErr, iFilialEmpresa, lNumBordero)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151172)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function CCBack_BorderoValeTicket(ByVal objLog As ClassLog) As Long
'grava em BorderoValeTicket a DataBackoffice

Dim lErro As Long
Dim sRegistro As String
Dim iPosAtual As Integer
Dim iPosFimAtual As Integer
Dim iFilialEmpresa As Integer
Dim lNumBordero As Long
Dim iIndice As Integer
Dim alComando(1 To 2) As Long
Dim dtDataBackoffice As Date

On Error GoTo Erro_CCBack_BorderoValeTicket

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 118067
    Next

    sRegistro = objLog.sLog

    iPosAtual = 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    lNumBordero = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    'seleciona o bordero em questao
    lErro = Comando_ExecutarPos(alComando(1), "SELECT DataBackoffice FROM BorderoValeTicket WHERE FilialEmpresa=? AND NumBordero=?", 0, dtDataBackoffice, iFilialEmpresa, lNumBordero)
    If lErro <> AD_SQL_SUCESSO Then gError 118068

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118069

    'se nao existir-> erro
    If lErro = AD_SQL_SEM_DADOS Then gError 118070

    'seleciona o bordero em questao
    lErro = Comando_ExecutarPos(alComando(2), "UPDATE BorderoValeTicket SET DataBackoffice = ?", alComando(1), gdtDataAtual)
    If lErro <> AD_SQL_SUCESSO Then gError 118072

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    CCBack_BorderoValeTicket = SUCESSO

    Exit Function

Erro_CCBack_BorderoValeTicket:

    CCBack_BorderoValeTicket = gErr

    Select Case gErr

        Case 118067
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 118068, 118069
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BORDEROVALETICKET", gErr, iFilialEmpresa, lNumBordero)

        Case 118070
            Call Rotina_Erro(vbOKOnly, "ERRO_BORDEROVALETICKET_NAOENCONTRADO", gErr, iFilialEmpresa, lNumBordero)

        Case 118071

        Case 118072
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_BORDEROVALETICKET", gErr, iFilialEmpresa, lNumBordero)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151173)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

'**************************************
'   INICIO CODIGO CARGA DOS DADOS DO ARQUIVO DO CAIXA CENTRAL PARA BACKOFFICE
'****************************************

Function Rotina_Carga_CC_Back(ByVal sArquivo As String, ByVal objBarraProgresso As Object) As Long
'Faz a carga dos dados do caixa central no backoffice. Le o arquivo passado como parametro e carrega o bd do backoffice.

'Pendencias: Colocar a funcao num batch e colocar chamada

Dim sNomeArq As String
Dim sNomeArq1 As String
Dim sRegistro As String
Dim lRegistro As Long
Dim colRegistro As New Collection
Dim iIndice As Integer
Dim alComando(1 To 5) As Long
Dim lErro As Long
Dim lTransacao As Long
Dim lSequencial As Long
Dim colCCBack As New Collection
Dim lNumCupons As Long
Dim lRegistroFinal As Long
Dim lRegistroFinalAux As Long
Dim lRegistroFinalArq As Long
Dim objMATConfig As New ClassMATConfig
Dim lNumIntMovEst As Long
Dim lRegistroAtual As Long
Dim lNumRegistros As Long
Dim iFilialEmpresa As Integer
Dim iUnder1 As Integer
Dim iUnder2 As Integer
Dim iUnder3 As Integer
Dim lEmpresa As Long
Dim lVersao As Long

On Error GoTo Erro_Rotina_Carga_CC_Back

    'Abre a Transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 118082

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 118073
    Next

    'posiciona no _ do CC_
    iUnder1 = InStr(1, sArquivo, "_")
    If iUnder1 = 0 Then gError 133650
    
    'posiciona no _ depois da empresa
    iUnder2 = InStr(iUnder1 + 1, sArquivo, "_")
    If iUnder2 = 0 Then gError 133650
    
    lEmpresa = StrParaLong(left(sArquivo, iUnder2 - 1))
    
    If lEmpresa <> glEmpresa Then gError 133651
    
    'posiciona no _ depois da filial
    iUnder3 = InStr(iUnder2 + 1, sArquivo, "_")
    If iUnder3 = 0 Then gError 133652
    
    iFilialEmpresa = StrParaInt(Mid(sArquivo, iUnder2 + 1, iUnder3 - (iUnder2 + 1)))

    lRegistroFinalArq = 0

    'selecionar o ultimo registro que contem info sobre os dados do log que foram enviados para o backfoffice
    lErro = Comando_ExecutarLockado(alComando(2), "SELECT Sequencial, RegistroFinal, RegistroFinalArq FROM ControleLogBack WHERE FilialEmpresa = ? ORDER BY Sequencial DESC", lSequencial, lRegistroFinal, lRegistroFinalArq, iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 118078

    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118079

    'se nao tem registro ainda cadastrado ==> proximo sequencial = 1 e ultimo registro processado = 0 (lRegistroFinal)
    If lErro = AD_SQL_SEM_DADOS Then
        lRegistroFinal = 0
        lSequencial = 1
    'se o ultimo registro cadastrado tem lRegistroFinalArq preenchido ==> um novo arquivo com novo sequencial deve ser lido
    ElseIf lRegistroFinalArq <> 0 Then
        lRegistroFinal = 0
        lSequencial = lSequencial + 1
    End If

    'monta o nome do arquivo de transferencia = CC_codEmpresa_FilialEmpresa_Sequencial.ccb
    sNomeArq = "CC_" & CStr(glEmpresa) & "_" & CStr(iFilialEmpresa) & "_" & CStr(lSequencial) & ".ccb"

    'pesquisa a existencia do arquivo
    sNomeArq1 = Dir(sArquivo)

    'se o arquivo não foi encontrado ==> erro
    If Len(sNomeArq1) = 0 Then gError 118080

    Open sArquivo For Input Lock Write As #1

    Line Input #1, sRegistro

    lRegistro = 1

    If sRegistro <> sNomeArq Then gError 118081

    Line Input #1, sRegistro

    lRegistro = 2

    lVersao = StrParaLong(sRegistro)

    If lVersao > VERSAO_ECF Then gError 133825

    objMATConfig.iFilialEmpresa = EMPRESA_TODA
    objMATConfig.sCodigo = NUM_PROX_ITEM_MOV_ESTOQUE

    lErro = CF("MATConfig_Le_Lock", objMATConfig, alComando(5))
    If lErro <> SUCESSO Then gError 118084

    lNumIntMovEst = CLng(objMATConfig.sConteudo)

    lNumRegistros = LOF(1) + 1

    objBarraProgresso.Value = 0

    Do While Not EOF(1)

        Line Input #1, sRegistro
        
        lRegistroAtual = Seek(1)
        
        objBarraProgresso.Value = CInt((lRegistroAtual / lNumRegistros) * 100)
        
        If sRegistro <> "" Then
            lRegistro = lRegistro + 1
    
            'se o registro atual for maior que o ultimo processado ==> processa-o
            If lRegistro > lRegistroFinal Then
    
                colRegistro.Add sRegistro
    
                lErro = CF("Registro_CC_Back", colRegistro, sArquivo, lRegistro, colCCBack, lNumCupons, lSequencial, lNumIntMovEst)
                If lErro <> SUCESSO Then gError 118083

                Set colRegistro = New Collection
    
            End If
        End If
    Loop

    'gravar os registros associados a estoque, tributacao e contabilidade relativos as infos que estavam armazenadas em colCCBack
    lErro = CF("Back_Est_Trib_Ctb_Gravar", iFilialEmpresa, colCCBack, lRegistro, lSequencial)
    If lErro <> SUCESSO Then gError 118085

    'selecionar o registro que contem info sobre os dados do log que foram enviados para o backfoffice
    lErro = Comando_ExecutarPos(alComando(3), "SELECT RegistroFinal FROM ControleLogBack WHERE FilialEmpresa = ? AND Sequencial = ?", 0, lRegistroFinalAux, iFilialEmpresa, lSequencial)
    If lErro <> AD_SQL_SUCESSO Then gError 118086

    lErro = Comando_BuscarPrimeiro(alComando(3))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118087

    'se o registro referente ao sequencial em questao ainda nao estiver cadastrado ==> tem que inserir um novo registro em ControleLogBack
    'e gravar RegistroFinalArq para indicar que já terminou de processar todos os registro do sequencial em questao.
    If lErro = AD_SQL_SEM_DADOS Then
        lErro = Comando_Executar(alComando(4), "INSERT INTO ControleLogBack (FilialEmpresa, Sequencial, RegistroFinal, Data, Hora, RegistroFinalArq) VALUES (?,?,?,?,?,?)", iFilialEmpresa, lSequencial, lRegistro, gdtDataAtual, CDbl(Time), lRegistro)
        If lErro <> AD_SQL_SUCESSO Then gError 118088
    Else
        lErro = Comando_ExecutarPos(alComando(5), "UPDATE ControleLogBack SET RegistroFinal=?, Data=?, Hora=?, RegistroFinalArq=?", alComando(3), lRegistro, gdtDataAtual, CDbl(Time), lRegistro)
        If lErro <> AD_SQL_SUCESSO Then gError 118089
    End If

    lErro = Comando_BuscarProximo(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 133649

    'confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 118090

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    'Fecha o Arquivo
    Close #1

    objBarraProgresso.Value = 0

    Rotina_Carga_CC_Back = SUCESSO

    Exit Function

Erro_Rotina_Carga_CC_Back:

    Rotina_Carga_CC_Back = gErr

    Select Case gErr

        Case 118073
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 118074, 118075, 133648, 133649
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIAIS", gErr)

        Case 118076
            Call Rotina_Erro(vbOKOnly, "ERRO_FILIAL_NAO_ENCONTRADA2", gErr, iFilialEmpresa)

        Case 118077
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_FILIALEMPRESA", gErr, iFilialEmpresa)

        Case 118078, 118079
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONTROLELOGBACK", gErr)

        Case 118080
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ARQUIVO_INEXISTENTE", gErr, sArquivo)
            
        Case 118081

        Case 118082
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 118083, 118084, 118085, 133650, 133651, 133652

        Case 118086, 118087
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONTROLELOGBACK", gErr)

        Case 118088
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CONTROLELOGBACK", gErr)

        Case 118089
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_CONTROLELOGBACK", gErr)

        Case 118090
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case 133825
            Call Rotina_Erro(vbOKOnly, "ERRO_VERSAO_ARQUIVO_MAIOR_PROGRAMA", gErr, lVersao, VERSAO_ECF)
            
        Case 210897

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151174)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    'cancela a transacao
    Call Transacao_Rollback

    'Fecha o Arquivo
    Close #1

    Exit Function

End Function

Function Registro_CC_Back(ByVal colRegistro As Collection, ByVal sArquivo As String, ByVal lRegistro As Long, colCCBack As Collection, lNumCupons As Long, ByVal lSequencial As Long, ByVal lNumIntMovEst As Long) As Long
'Descobre o tipo de registro e chama o tratador adequado. sArquivo contem o nome do arquivo em que sRegistro foi lido.
'lRegistro é o numero do registro.


Dim lErro As Long
Dim iPosKeyEscape As Integer
Dim iOperacao As Integer
Dim sRegistro As String

On Error GoTo Erro_Registro_CC_Back

    sRegistro = colRegistro.Item(1)

    iPosKeyEscape = InStr(sRegistro, Chr(vbKeyEscape))

    'se nao encontrar o tipo do registro no arquivo
    If iPosKeyEscape = 0 Then gError 118093

    iOperacao = CInt(left(sRegistro, iPosKeyEscape - 1))

    Select Case iOperacao
        'mario
        Case INCLUSAO_CUPOM_FISCAL
            lErro = CF("Registro_Back_Vendas", colRegistro, sArquivo, lRegistro, colCCBack, lNumCupons, lSequencial, lNumIntMovEst)
            If lErro <> SUCESSO Then gError 118094

        'mario
        Case EXCLUSAO_CUPOM_FISCAL
            lErro = CF("Registro_Back_Vendas_Excluir", colRegistro, sArquivo, lRegistro, colCCBack, lNumCupons, lSequencial, lNumIntMovEst)
            If lErro <> SUCESSO Then gError 118117

        'mario
        Case SANGRIA_DINHEIRO
            lErro = CF("Registro_Back_MovcxDin", colRegistro, sArquivo, lRegistro)
            If lErro <> SUCESSO Then gError 118095

        'mario
        Case SANGRIA_CHEQUE
            lErro = CF("Registro_Back_MovcxChq", colRegistro, sArquivo, lRegistro)
            If lErro <> SUCESSO Then gError 118096

        'mario
        Case SANGRIA_BOLETO
            lErro = CF("Registro_Back_MovcxBol", colRegistro, sArquivo, lRegistro)
            If lErro <> SUCESSO Then gError 118097

        'mario
        Case SANGRIA_TICKET
            lErro = CF("Registro_Back_MovcxTkt", colRegistro, sArquivo, lRegistro)
            If lErro <> SUCESSO Then gError 118098

        'mario
        Case SANGRIA_OUTROS
            lErro = CF("Registro_Back_MovcxOut", colRegistro, sArquivo, lRegistro)
            If lErro <> SUCESSO Then gError 118099
            
        'mario
        Case SUPRIMENTO_DINHEIRO
            lErro = CF("Registro_Back_MovcxDin_Sup", colRegistro, sArquivo, lRegistro, iOperacao)
            If lErro <> SUCESSO Then gError 118812
            
        'mario
        Case ABERTURA_CAIXA, FECHAMENTO_CAIXA, ABERTURA_SESSAO, FECHAMENTO_SESSAO, SUSPENSAO_SESSAO, LEITURA_X, REDUCAO_Z, LEITURA_MEMORIA_FISCAL
            lErro = CF("Registro_Back_Movcx", colRegistro, sArquivo, lRegistro, iOperacao)
            If lErro <> SUCESSO Then gError 118100

        'mario
        Case INCLUSAO_SAQUE_CAIXA_CENTRAL, ALTERACAO_SAQUE_CAIXA_CENTRAL, EXCLUSAO_SAQUE_CAIXA_CENTRAL
            lErro = CF("Registro_Back_SaqueCC", colRegistro, sArquivo, lRegistro, iOperacao)
            If lErro <> SUCESSO Then gError 118101
        
        'mario
        Case INCLUSAO_DEPOSITO_CAIXA_CENTRAL, ALTERACAO_DEPOSITO_CAIXA_CENTRAL, EXCLUSAO_DEPOSITO_CAIXA_CENTRAL
            lErro = CF("Registro_Back_DepositoCC", colRegistro, sArquivo, lRegistro, iOperacao)
            If lErro <> SUCESSO Then gError 118102

        'mario
        Case INCLUSAO_DEPOSITO_BANCARIO, ALTERACAO_DEPOSITO_BANCARIO, EXCLUSAO_DEPOSITO_BANCARIO
            lErro = CF("Registro_Back_Deposito_Banco", colRegistro, sArquivo, lRegistro, iOperacao)
            If lErro <> SUCESSO Then gError 118103

        'mario
        Case INCLUSAO_BORDEROBOLETO
            lErro = CF("Registro_Back_Bordero_Boleto", colRegistro, sArquivo, lRegistro, iOperacao)
            If lErro <> SUCESSO Then gError 118104

        'mario
        Case INCLUSAO_BORDEROCHEQUE
            lErro = CF("Registro_Back_Bordero_Cheque", colRegistro, sArquivo, lRegistro, iOperacao)
            If lErro <> SUCESSO Then gError 118105

        'mario
        Case INCLUSAO_BORDEROVALETICKET
            lErro = CF("Registro_Back_Bordero_ValeTicket", colRegistro, sArquivo, lRegistro, iOperacao)
            If lErro <> SUCESSO Then gError 118106

        'mario
        Case INCLUSAO_BORDEROOUTROS
            lErro = CF("Registro_Back_Bordero_Outros", colRegistro, sArquivo, lRegistro, iOperacao)
            If lErro <> SUCESSO Then gError 118107

        Case INCLUSAO_RECEBIMENTOCARNE
            lErro = CF("Registro_Back_Recebimento_Carne", colRegistro, sArquivo, lRegistro)
            If lErro <> SUCESSO Then gError 118108

        Case EXCLUSAO_RECEBIMENTOCARNE
            lErro = CF("Registro_Back_ExcRecebimento_Carne", colRegistro, sArquivo, lRegistro, iOperacao)
            If lErro <> SUCESSO Then gError 118109

        'mario
        Case INCLUSAO_ADMMEIOPAGTO_CAIXA_CENTRAL, ALTERACAO_ADMMEIOPAGTO_CAIXA_CENTRAL, EXCLUSAO_ADMMEIOPAGTO_CAIXA_CENTRAL
            lErro = CF("Registro_Back_AdmMeioPagto", colRegistro, sArquivo, lRegistro, iOperacao)
            If lErro <> SUCESSO Then gError 118110

        'mario
        Case INCLUSAO_CAIXA, ALTERACAO_CAIXA, EXCLUSAO_CAIXA
            lErro = CF("Registro_Back_Caixa", colRegistro, sArquivo, lRegistro, iOperacao)
            If lErro <> SUCESSO Then gError 118111
            
        'mario
        Case INCLUSAO_ECF_CAIXA_CENTRAL, ALTERACAO_ECF_CAIXA_CENTRAL, EXCLUSAO_ECF_CAIXA_CENTRAL
            lErro = CF("Registro_Back_ECF", colRegistro, sArquivo, lRegistro, iOperacao)
            If lErro <> SUCESSO Then gError 118112

        'mario
        Case INCLUSAO_IMPRESSORAECF, ALTERACAO_IMPRESSORAECF, EXCLUSAO_IMPRESSORAECF
            lErro = CF("Registro_Back_ImpressoraECF", colRegistro, sArquivo, lRegistro, iOperacao)
            If lErro <> SUCESSO Then gError 117575

        'mario
        Case INCLUSAO_OPERADOR_CAIXA_CENTRAL, ALTERACAO_OPERADOR_CAIXA_CENTRAL, EXCLUSAO_OPERADOR_CAIXA_CENTRAL
            lErro = CF("Registro_Back_Operador", colRegistro, sArquivo, lRegistro, iOperacao)
            If lErro <> SUCESSO Then gError 118113

        'mario
        Case INCLUSAO_REDE_CAIXA_CENTRAL, ALTERACAO_REDE_CAIXA_CENTRAL, EXCLUSAO_REDE_CAIXA_CENTRAL
            lErro = CF("Registro_Back_Rede", colRegistro, sArquivo, lRegistro, iOperacao)
            If lErro <> SUCESSO Then gError 118114
        
        'mario
        Case INCLUSAO_CLIENTE, ALTERACAO_CLIENTE
            lErro = CF("Registro_Back_Cliente", colRegistro, sArquivo, lRegistro, iOperacao)
            If lErro <> SUCESSO Then gError 118115
        
        'mario
        Case INCLUSAO_FILIALCLIENTE, ALTERACAO_FILIALCLIENTE
            lErro = CF("Registro_Back_FilialCliente", colRegistro, sArquivo, lRegistro, iOperacao)
            If lErro <> SUCESSO Then gError 118123

        'mario
        Case INCLUSAO_TRANSFERENCIA_CAIXA
            lErro = CF("Registro_Back_TransfCaixa", colRegistro, sArquivo, lRegistro)
            If lErro <> SUCESSO Then gError 105555

        Case INCLUSAO_TRANSFERENCIA_CENTRAL
            lErro = CF("Registro_Back_TransfCentral", colRegistro, sArquivo, lRegistro)
            If lErro <> SUCESSO Then gError 105595

        'mario
        Case ESPECIFICACAO_CHEQUE
            lErro = CF("Registro_Back_EspecifCheque", colRegistro, sArquivo, lRegistro)
            If lErro <> SUCESSO Then gError 126051

        Case Else
            gError 118116

    End Select

    Registro_CC_Back = SUCESSO

    Exit Function

Erro_Registro_CC_Back:

    Registro_CC_Back = gErr

    Select Case gErr

        Case 105555, 105595, 118094 To 118115, 118117, 118123, 118812, 126051

        Case 118093
            Call Rotina_Erro(vbOKOnly, "ERRO_AUSENCIA_TIPO_REGISTRO", gErr, lRegistro, sArquivo)

        Case 118116
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPOREGISTRO_NAO_TRATAVEL", gErr, iOperacao, lRegistro, sArquivo)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151175)

    End Select

    Exit Function

End Function

Function Registro_Back_Vendas(ByVal colRegistro As Collection, ByVal sArquivo As String, ByVal lRegistro As Long, ByVal colCCBack As Collection, ByVal lNumCupons As Long, ByVal lSequencial As Long, ByVal lNumIntMovEst As Long) As Long
'Trata o registro de vendas e coloca os dados no bd do backoffice. sArquivo contem o nome do arquivo em que sRegistro foi lido.
'lRegistro é o numero do registro.

Dim iPosAtual As Integer
Dim iPosFimAtual As Integer
Dim objVenda As New ClassVenda
Dim sRegistro As String
Dim iRegistroCol As Integer
Dim lErro As Long
Dim objMovCx As New ClassMovimentoCaixa
Dim bAchou As Boolean

On Error GoTo Erro_Registro_Back_Vendas
    
    sRegistro = colRegistro.Item(1)

    iPosFimAtual = InStr(sRegistro, Chr(vbKeyEscape))
    iRegistroCol = 1
    
    'le as infos de cupom
    lErro = CF("Back_Vendas_Cupom", iPosAtual, iPosFimAtual, colRegistro, iRegistroCol, objVenda.objCupomFiscal)
    If lErro <> SUCESSO Then gError 118130

    'le as infos de carne se houverem
    lErro = CF("Back_Vendas_Carne", iPosAtual, iPosFimAtual, colRegistro, iRegistroCol, objVenda.objCarne)
    If lErro <> SUCESSO Then gError 118131
        
    'le as infos de cheque se houverem
    lErro = CF("Back_Vendas_Cheque", iPosAtual, iPosFimAtual, colRegistro, iRegistroCol, objVenda.colCheques, objVenda.objCupomFiscal.iFilialEmpresa)
    If lErro <> SUCESSO Then gError 118132

    'le as infos de troca se houverem
    lErro = CF("Back_Vendas_Troca", iPosAtual, iPosFimAtual, colRegistro, iRegistroCol, objVenda.colTroca)
    If lErro <> SUCESSO Then gError 118133
    
    'le as infos de movimento de caixa
    lErro = CF("Back_Vendas_Movcx", iPosAtual, iPosFimAtual, colRegistro, iRegistroCol, objVenda.colMovimentosCaixa)
    If lErro <> SUCESSO Then gError 118134
    
    For Each objMovCx In objVenda.colMovimentosCaixa
    
        objMovCx.iCaixa = objVenda.objCupomFiscal.iCodCaixa
    
        lErro = Verifica_Existencia_Sequencial(objMovCx.lSequencial, objMovCx.iCaixa, objMovCx.iFilialEmpresa)
        If lErro <> SUCESSO And lErro <> 112627 Then gError 118932
        
        If lErro = 112627 Then
            bAchou = True
            Exit For
        End If
    Next
    
    If Not (bAchou) Then
        lErro = CF("Back_Venda_Gravar", objVenda, colCCBack, lNumCupons, lRegistro, lSequencial, lNumIntMovEst)
        If lErro <> SUCESSO Then gError 118135
    End If
    
    Registro_Back_Vendas = SUCESSO

    Exit Function

Erro_Registro_Back_Vendas:

    Registro_Back_Vendas = gErr

    Select Case gErr

        Case 118130 To 118135, 118932

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151176)

    End Select

    Exit Function

End Function

Function Back_Vendas_Cupom(iPosAtual As Integer, iPosFimAtual As Integer, ByVal colRegistro As Collection, iRegistroCol As Integer, ByVal objCupomFiscal As ClassCupomFiscal) As Long
'le as infos de cupom

Dim sRegistro As String
Dim lErro As Long

On Error GoTo Erro_Back_Vendas_Cupom

    sRegistro = colRegistro.Item(iRegistroCol)

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCupomFiscal.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCupomFiscal.lNumIntDoc = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCupomFiscal.iStatus = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCupomFiscal.iECF = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCupomFiscal.dtDataEmissao = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCupomFiscal.dHoraEmissao = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCupomFiscal.lNumero = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCupomFiscal.sCPFCGC = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCupomFiscal.lNumOrcamento = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCupomFiscal.dValorTotal = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCupomFiscal.dValorProdutos = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCupomFiscal.dValorDesconto = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCupomFiscal.dValorAcrescimo = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCupomFiscal.iTabelaPreco = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCupomFiscal.sNaturezaOp = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCupomFiscal.lGerenteCancel = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCupomFiscal.sMotivoCancel = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCupomFiscal.iVendedor = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCupomFiscal.lDuracao = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCupomFiscal.iTipo = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCupomFiscal.iCodCaixa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCupomFiscal.lCOOCupomOrigDAV = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCupomFiscal.sTipoECF = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCupomFiscal.sMarcaECF = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCupomFiscal.sModeloECF = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCupomFiscal.sNumSerieECF = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCupomFiscal.lCCF = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCupomFiscal.lNumeroDAV = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCupomFiscal.sCPFCGC1 = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCupomFiscal.sEndereco = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCupomFiscal.iSequencialECF = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    'passa a apontar para o proximo caracter depois do vbKeyEscape
    iPosAtual = iPosFimAtual + 1
    
    iPosFimAtual = iPosAtual

    'guarda as infos dos itens do cupom
    lErro = CF("Back_Vendas_ItensCF", iPosAtual, iPosFimAtual, colRegistro, iRegistroCol, objCupomFiscal)
    If lErro <> SUCESSO Then gError 118139

    Back_Vendas_Cupom = SUCESSO

    Exit Function

Erro_Back_Vendas_Cupom:

    Back_Vendas_Cupom = gErr

    Select Case gErr
        
        Case 118139
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151177)

    End Select

    Exit Function

End Function

Function Back_Vendas_ItensCF(iPosAtual As Integer, iPosFimAtual As Integer, ByVal colRegistro As Collection, iRegistroCol As Integer, ByVal objCupomFiscal As ClassCupomFiscal) As Long
'le as infos dos itens do cupom

Dim objItens As ClassItemCupomFiscal
Dim lErro As Long
Dim iIndice As Integer
Dim sRegistro As String

On Error GoTo Erro_Back_Vendas_ItensCF

    For iIndice = iRegistroCol To colRegistro.Count

        sRegistro = colRegistro.Item(iIndice)

        Do While Mid(sRegistro, iPosAtual, 1) = Chr(vbKeyShift)
            
            Set objItens = New ClassItemCupomFiscal

            objCupomFiscal.colItens.Add objItens

            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objItens.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objItens.lNumIntDoc = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objItens.lNumIntCupom = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objItens.iItem = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objItens.iStatus = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objItens.sProduto = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)

            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objItens.sUnidadeMed = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)

            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objItens.dQuantidade = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objItens.dPrecoUnitario = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objItens.dPercDesc = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objItens.dValorDesconto = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objItens.dAliquotaICMS = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
            
            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objItens.sSituacaoTrib = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)
            
            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = iPosAtual

        Loop

        If iPosAtual <= Len(sRegistro) Then Exit For

        iPosAtual = 1

    Next

    iPosFimAtual = iPosAtual

    iRegistroCol = iIndice
    
    Back_Vendas_ItensCF = SUCESSO

    Exit Function

Erro_Back_Vendas_ItensCF:

    Back_Vendas_ItensCF = gErr

    Select Case gErr

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151178)

    End Select

    Exit Function

End Function

Function Back_Vendas_Carne(iPosAtual As Integer, iPosFimAtual As Integer, ByVal colRegistro As Collection, iRegistroCol As Integer, ByVal objCarne As ClassCarne) As Long
'le as infos de carne se houverem

Dim objCarneParc As ClassCarneParcelas
Dim lErro As Long
Dim sRegistro As String
Dim iIndice As Integer

On Error GoTo Erro_Back_Vendas_Carne

    sRegistro = colRegistro.Item(iRegistroCol)

    'pula o primeiro separator
    iPosAtual = iPosFimAtual + 1

    'se o proximo caracter nao for um separator ==> le carne
    If Mid(sRegistro, iPosAtual, 1) <> Chr(vbKeySeparator) Then

        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objCarne.lNumIntDoc = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objCarne.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objCarne.iStatus = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objCarne.dtDataReferencia = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objCarne.lCupomFiscal = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objCarne.lCliente = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objCarne.sAutorizacao = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)

        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objCarne.sCodBarrasCarne = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)

        'pula o vbKeyEscape
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = iPosAtual
        
        For iIndice = iRegistroCol To colRegistro.Count

            sRegistro = colRegistro.Item(iIndice)

            Do While Mid(sRegistro, iPosAtual, 1) = Chr(vbKeyShift)

                Set objCarneParc = New ClassCarneParcelas

                objCarne.colParcelas.Add objCarneParc

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objCarneParc.lNumIntDoc = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objCarneParc.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objCarneParc.lNumIntCarne = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objCarneParc.iParcela = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objCarneParc.dtDataVencimento = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objCarneParc.dValor = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objCarneParc.iStatus = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                'pula o vbKeyEscape
                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = iPosAtual

            Loop

            'se saiu antes de terminar o registro ==> as infos do carne terminaram
            If iPosAtual <= Len(sRegistro) Then Exit For

            iPosAtual = 1
            iPosFimAtual = iPosAtual

        Next

        iRegistroCol = iIndice

    End If

    iPosFimAtual = iPosAtual

    Back_Vendas_Carne = SUCESSO

    Exit Function

Erro_Back_Vendas_Carne:

    Back_Vendas_Carne = gErr

    Select Case gErr

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151179)

    End Select

    Exit Function

End Function

Function Back_Vendas_Cheque(iPosAtual As Integer, iPosFimAtual As Integer, ByVal colRegistro As Collection, iRegistroCol As Integer, ByVal colCheque As Collection, ByVal iFilialEmpresa As Integer) As Long
'le as infos de movimento de cheque

Dim lErro As Long
Dim objCheque As ClassChequePre
Dim iIndice As Integer
Dim sRegistro As String

On Error GoTo Erro_Back_Vendas_Cheque

    sRegistro = colRegistro.Item(iRegistroCol)

    'pula o separator
    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = iPosAtual

    'se o proximo caracter nao for um separator ==> le cheque
    If Mid(sRegistro, iPosAtual, 1) <> Chr(vbKeySeparator) Then

        For iIndice = iRegistroCol To colRegistro.Count

            sRegistro = colRegistro.Item(iIndice)

            Do While Mid(sRegistro, iPosAtual, 1) = Chr(vbKeyControl)

                Set objCheque = New ClassChequePre

                colCheque.Add objCheque

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objCheque.iBanco = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objCheque.sAgencia = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objCheque.sContaCorrente = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objCheque.lNumero = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objCheque.dtDataDeposito = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objCheque.dValor = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objCheque.sCPFCGC = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objCheque.lNumMovtoCaixa = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objCheque.iAprovado = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objCheque.iNaoEspecificado = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objCheque.lSequencialLoja = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objCheque.iCaixa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objCheque.lSequencialCaixa = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objCheque.dtDataEmissao = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                objCheque.iFilialEmpresaLoja = iFilialEmpresa

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = iPosAtual

            Loop

            If iPosAtual <= Len(sRegistro) Then Exit For

            iPosAtual = 1
            iPosFimAtual = iPosAtual

        Next

        iRegistroCol = iIndice

    End If

    Back_Vendas_Cheque = SUCESSO

    Exit Function

Erro_Back_Vendas_Cheque:

    Back_Vendas_Cheque = gErr

    Select Case gErr

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151180)

    End Select

    Exit Function

End Function

Function Back_Vendas_Troca(iPosAtual As Integer, iPosFimAtual As Integer, ByVal colRegistro As Collection, iRegistroCol As Integer, ByVal colTroca As Collection) As Long
'le as infos de troca se houverem

Dim lErro As Long
Dim objTroca As ClassTroca
Dim iIndice As Integer
Dim sRegistro As String

On Error GoTo Erro_Back_Vendas_Troca

    sRegistro = colRegistro.Item(iRegistroCol)

    'pula o separator
    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = iPosAtual

    'se o proximo caracter nao for um separator ==> ler troca
    If Mid(sRegistro, iPosAtual, 1) <> Chr(vbKeySeparator) Then

        For iIndice = iRegistroCol To colRegistro.Count

            sRegistro = colRegistro.Item(iIndice)

            Do While Mid(sRegistro, iPosAtual, 1) = Chr(vbKeyControl)

                Set objTroca = New ClassTroca

                colTroca.Add objTroca

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objTroca.lNumIntDoc = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objTroca.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objTroca.sCodProduto = CStr(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objTroca.dQuantidade = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objTroca.dValor = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objTroca.lNumMovtoCaixa = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objTroca.sUnidadeMed = CStr(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                'pula o vbKeyEscape
                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = iPosAtual

            Loop

            If iPosAtual <= Len(sRegistro) Then Exit For

            iPosAtual = 1
            iPosFimAtual = iPosAtual

        Next

        iRegistroCol = iIndice

    End If

    Back_Vendas_Troca = SUCESSO

    Exit Function

Erro_Back_Vendas_Troca:

    Back_Vendas_Troca = gErr

    Select Case gErr

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151181)

    End Select

    Exit Function

End Function

Function Back_Vendas_Movcx(iPosAtual As Integer, iPosFimAtual As Integer, ByVal colRegistro As Collection, iRegistroCol As Integer, ByVal colMovCx As Collection) As Long
'guarda as infos de movimento de caixa

Dim lErro As Long
Dim objMovCx As ClassMovimentoCaixa
Dim sRegistro As String
Dim iIndice As Integer

On Error GoTo Erro_Back_Vendas_Movcx

    sRegistro = colRegistro.Item(iRegistroCol)

    'pula o separator
    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = iPosAtual
    
    For iIndice = iRegistroCol To colRegistro.Count

        sRegistro = colRegistro.Item(iIndice)

        Do While Mid(sRegistro, iPosAtual, 1) = Chr(vbKeyControl)
        
            Set objMovCx = New ClassMovimentoCaixa

            colMovCx.Add objMovCx

            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objMovCx.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objMovCx.lNumMovto = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
            
            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objMovCx.iCaixa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objMovCx.iCodOperador = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objMovCx.lSequencial = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objMovCx.iTipo = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objMovCx.iAdmMeioPagto = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objMovCx.iParcelamento = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objMovCx.iTipoCartao = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objMovCx.lNumero = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objMovCx.dtDataMovimento = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objMovCx.dValor = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objMovCx.sHistorico = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)

            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objMovCx.sFavorecido = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)

            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objMovCx.lCupomFiscal = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objMovCx.lNumRefInterna = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objMovCx.lMovtoTransf = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objMovCx.lMovtoEstorno = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objMovCx.iGerente = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objMovCx.iCodConta = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objMovCx.dHora = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objMovCx.lTransferencia = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objMovCx.lNumIntExt = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = iPosAtual

        Loop

        If iPosAtual <= Len(sRegistro) Then Exit For

        iPosAtual = 1
        iPosFimAtual = iPosAtual

    Next

    iRegistroCol = iIndice

    Back_Vendas_Movcx = SUCESSO

    Exit Function

Erro_Back_Vendas_Movcx:

    Back_Vendas_Movcx = gErr

    Select Case gErr

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151182)

    End Select

    Exit Function

End Function

Function Back_Venda_Gravar(ByVal objVenda As ClassVenda, ByVal colCCBack As Collection, lNumCupons As Long, ByVal lRegistro As Long, ByVal lSequencial As Long, lNumIntMovEst As Long) As Long
'grava os dados da venda no caixa central
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lErro As Long
Dim lTransacao As Long
Dim colRegistro As New Collection
Dim objLog As New ClassLog

On Error GoTo Erro_Back_Venda_Gravar

    'gravar os dados de carne caso existam
    lErro = CF("Back_Carne_Gravar_Venda", objVenda.objCarne)
    If lErro <> SUCESSO Then gError 118155

    'gravar os dados de cheque caso existam
    lErro = CF("Back_Cheque_Gravar_Venda", objVenda.colCheques)
    If lErro <> SUCESSO Then gError 118156

    'gravar os dados de troca caso existam
    lErro = CF("Back_Troca_Gravar_Venda", objVenda.colTroca, colCCBack, lNumIntMovEst)
    If lErro <> SUCESSO Then gError 118157

    'gravar os movimentos de caixa
    lErro = CF("Back_Movcx_Gravar_Venda", objVenda.colMovimentosCaixa, objVenda.objCupomFiscal.lNumIntDoc, objVenda.colCheques)
    If lErro <> SUCESSO Then gError 118158
    
    'gravar os dados do cupom
    lErro = CF("Back_Cupom_Gravar_Venda", objVenda.objCupomFiscal, colCCBack, lNumCupons, lRegistro, lSequencial, lNumIntMovEst)
    If lErro <> SUCESSO Then gError 118154

    Back_Venda_Gravar = SUCESSO

    Exit Function

Erro_Back_Venda_Gravar:

    Back_Venda_Gravar = gErr

    Select Case gErr

        Case 118154 To 118158

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151183)

    End Select

    Exit Function

End Function

Function Back_Cupom_Gravar_Venda(ByVal objCupomFiscal As ClassCupomFiscal, ByVal colCCBack As Collection, lNumCupons As Long, ByVal lRegistro As Long, ByVal lSequencial As Long, lNumIntMovEst As Long) As Long
'gravar os dados de cupom fiscal
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lNumAuto As Long
Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer
Dim iFilialCli As Integer
Dim objCliente As New ClassCliente
Dim colComissoes As New Collection

On Error GoTo Erro_Back_Cupom_Gravar_Venda

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 118159
    Next

    lNumCupons = lNumCupons + 1

    'insere novo registro na tabela de CupomFiscal
    lErro = Comando_Executar(alComando(1), "INSERT INTO CupomFiscal(FilialEmpresa, NumIntDoc, Status, ECF, DataEmissao, HoraEmissao, Numero, CPFCGC, NumOrcamento, ValorTotal, ValorProdutos, ValorDesconto, ValorAcrescimo, TabelaPreco, NaturezaOp, GerenteCancel, MotivoCancel, Vendedor, Duracao, Tipo, Caixa, COOCupomOrigDAV, TipoECF, MarcaECF, ModeloECF, NumSerieECF, CCF, NumeroDAV, CPFCGC1, Endereco, SequencialECF, SequencialECFOrigDAV) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
    objCupomFiscal.iFilialEmpresa, objCupomFiscal.lNumIntDoc, objCupomFiscal.iStatus, objCupomFiscal.iECF, objCupomFiscal.dtDataEmissao, objCupomFiscal.dHoraEmissao, objCupomFiscal.lNumero, objCupomFiscal.sCPFCGC, objCupomFiscal.lNumOrcamento, objCupomFiscal.dValorTotal, objCupomFiscal.dValorProdutos, objCupomFiscal.dValorDesconto, objCupomFiscal.dValorAcrescimo, objCupomFiscal.iTabelaPreco, objCupomFiscal.sNaturezaOp, _
    objCupomFiscal.lGerenteCancel, objCupomFiscal.sMotivoCancel, objCupomFiscal.iVendedor, objCupomFiscal.lDuracao, objCupomFiscal.iTipo, objCupomFiscal.iCodCaixa, objCupomFiscal.lCOOCupomOrigDAV, objCupomFiscal.sTipoECF, objCupomFiscal.sMarcaECF, objCupomFiscal.sModeloECF, objCupomFiscal.sNumSerieECF, objCupomFiscal.lCCF, objCupomFiscal.lNumeroDAV, objCupomFiscal.sCPFCGC1, objCupomFiscal.sEndereco, objCupomFiscal.iSequencialECF, objCupomFiscal.iSequencialECFOrigDAV)
    If lErro <> AD_SQL_SUCESSO Then gError 118160

    'se foi especificado um vendedor para esta venda
    If objCupomFiscal.iVendedor <> 0 Then

        'se foi especificado um cliente
        If Len(Trim(objCupomFiscal.sCPFCGC)) <> 0 Then
    
            objCliente.sCgc = objCupomFiscal.sCPFCGC
    
            'Faz a Leitura na Tabela de cliente
            lErro = CF("Cliente_Le_CGC", objCliente, iFilialCli)
            If lErro <> SUCESSO And lErro <> 6710 Then gError 126298
            
            'Se não encontrou  - - -> Erro
            If lErro = 6710 Then gError 126299

        End If

    End If

    lErro = CF("Back_ItensCF_Gravar_Venda", objCupomFiscal, colCCBack, lNumIntMovEst, objCliente, iFilialCli, colComissoes)
    If lErro <> SUCESSO Then gError 118161

    'grava as comissoes associadas ao cupom
    lErro = CF("Comissoes_Gravar_Loja", objCupomFiscal, colComissoes)
    If lErro <> SUCESSO Then gError 126301

    'se o numero de cupons ou o numero de produtos em transacao for maior que o maximo permitido ==> grava os dados de estoque, tributacao e contabilidade.
    If lNumCupons > NUM_MAX_CUPONS_EM_TRANS Or colCCBack.Count > NUM_MAX_PRODUTOS_EM_TRANS Then

        lErro = CF("Back_Est_Trib_Ctb_Gravar", colCCBack, lRegistro, lSequencial, lNumIntMovEst)
        If lErro <> SUCESSO Then gError 118162

        lNumCupons = 0
        Set colCCBack = New Collection

    End If

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Back_Cupom_Gravar_Venda = SUCESSO

    Exit Function

Erro_Back_Cupom_Gravar_Venda:

    Back_Cupom_Gravar_Venda = gErr

    Select Case gErr

        Case 118159
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 118161, 118162, 126298, 126301

        Case 118160
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CUPOMFISCAL1", gErr, objCupomFiscal.iFilialEmpresa, objCupomFiscal.iECF, objCupomFiscal.lNumero)

        Case 126299
            Call Rotina_Erro(vbOKOnly, "ERRO_CLIENTE_NAO_CADASTRADO3", gErr, objCupomFiscal.sCPFCGC)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151184)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Back_ItensCF_Gravar_Venda(ByVal objCupomFiscal As ClassCupomFiscal, ByVal colCCBack As Collection, lNumIntMovEst As Long, ByVal objCliente As ClassCliente, ByVal iFilialCli As Integer, ByVal colComissoes As Collection) As Long
'gravar os itens do cupom fiscal contidos na colecao.
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lNumAuto As Long
Dim lErro As Long
Dim alComando(1 To 13) As Long
Dim iIndice As Integer
Dim objItens As ClassItemCupomFiscal
Dim iItem As Integer
Dim iFilialEmpresa As Integer
Dim objProduto As New ClassProduto
Dim dFator As Double
Dim iNumVendas As Integer
Dim sMes As String
Dim objCCBack As ClassCCBack
Dim iAchou As Integer
Dim dQuantVenda As Double

On Error GoTo Erro_Back_ItensCF_Gravar_Venda

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 118163
    Next

    iItem = 1
    
    'gera um novo número interno de itens de cupom fiscal
    lErro = CF("Config_ObterNumInt", "LojaConfig", "NUM_PROX_ITEM_CUPOMFISCAL", lNumAuto, objCupomFiscal.colItens.Count, objCupomFiscal.iFilialEmpresa)
    If lErro <> SUCESSO Then gError 119021

    For Each objItens In objCupomFiscal.colItens

        objProduto.sCodigo = objItens.sProduto

        'Lê na tabela de Produto a UM de venda
        lErro = CF("Produto_Le", objProduto)
        If lErro <> SUCESSO And lErro <> 28030 Then gError 118164

        'Se não encontrar o produto ==> Erro
        If lErro = 28030 Then gError 118165

        'Obtém fator de conversão para unidade de medida de Estoque
        lErro = CF("UM_Conversao", objProduto.iClasseUM, objItens.sUnidadeMed, objProduto.sSiglaUMEstoque, dFator)
        If lErro <> SUCESSO Then gError 118166

        iAchou = 0

        'pesquisa em colCCBack se já há um produto igual na colecao para acumular os valores
        For Each objCCBack In colCCBack

            If objCCBack.sProduto = objItens.sProduto Then
                iAchou = 1
                Exit For
            End If

        Next

        'se achou o produto ==> acumula as quantidades.
        If iAchou = 1 Then

            objCCBack.dQuantEst = objCCBack.dQuantEst + (objItens.dQuantidade * dFator)
            objCCBack.dValor = objCCBack.dValor + ((objItens.dPrecoUnitario * objItens.dQuantidade) - objItens.dValorDesconto)

        Else

            Set objCCBack = New ClassCCBack

            objCCBack.sProduto = objItens.sProduto
            objCCBack.sDescProd = objProduto.sDescricao
            objCCBack.dQuantEst = objItens.dQuantidade * dFator
            objCCBack.dValor = (objItens.dPrecoUnitario * objItens.dQuantidade) - objItens.dValorDesconto
            objCCBack.lNumIntMovEst = lNumIntMovEst
            objCCBack.sUnidadeMed = objProduto.sSiglaUMEstoque
            objCCBack.iClasseUM = objProduto.iClasseUM
            objCCBack.sUMEstoque = objProduto.sSiglaUMEstoque
            objCCBack.iControleEstoque = objProduto.iControleEstoque

            colCCBack.Add objCCBack

            lNumIntMovEst = lNumIntMovEst + 1

        End If

        objItens.lNumIntDoc = lNumAuto
        objItens.iItem = iItem

        iNumVendas = 1

        For iIndice = 1 To iItem - 1
            If objCupomFiscal.colItens.Item(iIndice).sProduto = objItens.sProduto Then
                iNumVendas = 0
                Exit For
            End If
        Next

        'insere novo registro na tabela de ItensCupomFiscal
        lErro = Comando_Executar(alComando(1), "INSERT INTO ItensCupomFiscal(FilialEmpresa, NumIntDoc, NumIntCupom, Item, Status, Produto, UnidadeMed, Quantidade, PrecoUnitario, PercDesc, ValorDesconto, AliquotaICMS, NumIntMovEst, SituacaoTrib) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)", objItens.iFilialEmpresa, objItens.lNumIntDoc, objCupomFiscal.lNumIntDoc, objItens.iItem, objItens.iStatus, objItens.sProduto, objItens.sUnidadeMed, objItens.dQuantidade, objItens.dPrecoUnitario, objItens.dPercDesc, objItens.dValorDesconto, objItens.dAliquotaICMS, objCCBack.lNumIntMovEst, objItens.sSituacaoTrib)
        If lErro <> AD_SQL_SUCESSO Then gError 118167

        'Obtém fator de conversão para unidade de medida de Venda
        lErro = CF("UM_Conversao", objProduto.iClasseUM, objItens.sUnidadeMed, objProduto.sSiglaUMVenda, dFator)
        If lErro <> SUCESSO Then gError 118168

        dQuantVenda = objItens.dQuantidade * dFator
        
        If objCupomFiscal.iTipo = OPTION_CF Or objCupomFiscal.iStatus = STATUS_BAIXADO Then
        
            'grava a comissao se o vendedor foi especificado
            lErro = Comissoes_Gera_Loja(objCupomFiscal, objItens, objCliente, iFilialCli, colComissoes)
            If lErro <> AD_SQL_SUCESSO Then gError 126300
        
            lErro = Comando_ExecutarPos(alComando(2), "SELECT FilialEmpresa FROM SldDiaFatCx WHERE FilialEmpresa = ? AND Caixa = ? AND Data = ? AND Produto = ?", 0, iFilialEmpresa, objCupomFiscal.iFilialEmpresa, objCupomFiscal.iCodCaixa, objCupomFiscal.dtDataEmissao, objItens.sProduto)
            If lErro <> AD_SQL_SUCESSO Then gError 118169
    
            lErro = Comando_BuscarPrimeiro(alComando(2))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118170
    
            If lErro = AD_SQL_SUCESSO Then
    
                lErro = Comando_ExecutarPos(alComando(3), "UPDATE SldDiaFatCx SET ValorFaturado = ValorFaturado + ?, QuantFaturada = QuantFaturada + ?, NumVendas = NumVendas + ?", alComando(2), (objItens.dPrecoUnitario * objItens.dQuantidade) - objItens.dValorDesconto, dQuantVenda, iNumVendas)
                If lErro <> AD_SQL_SUCESSO Then gError 118171
    
            Else
    
                lErro = Comando_Executar(alComando(4), "INSERT INTO SldDiaFatCx (FilialEmpresa, Caixa, Data, Produto, ValorFaturado, QuantFaturada, NumVendas) VALUES (?,?,?,?,?,?,?)", objCupomFiscal.iFilialEmpresa, objCupomFiscal.iCodCaixa, objCupomFiscal.dtDataEmissao, objItens.sProduto, (objItens.dPrecoUnitario * objItens.dQuantidade) - objItens.dValorDesconto, dQuantVenda, iNumVendas)
                If lErro <> AD_SQL_SUCESSO Then gError 118172
    
            End If
    
            sMes = Month(objCupomFiscal.dtDataEmissao)
    
            lErro = Comando_ExecutarPos(alComando(5), "SELECT FilialEmpresa FROM SldMesFatCx WHERE FilialEmpresa = ? AND Caixa = ? AND Ano = ? AND Produto = ?", 0, iFilialEmpresa, objCupomFiscal.iFilialEmpresa, objCupomFiscal.iCodCaixa, Year(objCupomFiscal.dtDataEmissao), objItens.sProduto)
            If lErro <> AD_SQL_SUCESSO Then gError 118173
    
            lErro = Comando_BuscarPrimeiro(alComando(5))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118174
    
            If lErro = AD_SQL_SUCESSO Then
    
                lErro = Comando_ExecutarPos(alComando(6), "UPDATE SldMesFatCx SET ValorFaturado" & sMes & " = ValorFaturado" & sMes & " + ?, QuantFaturada" & sMes & " = QuantFaturada" & sMes & " + ?, NumVendas" & sMes & " = NumVendas" & sMes & " + ?", alComando(5), (objItens.dPrecoUnitario * objItens.dQuantidade) - objItens.dValorDesconto, dQuantVenda, iNumVendas)
                If lErro <> AD_SQL_SUCESSO Then gError 118175
    
            Else
    
                lErro = Comando_Executar(alComando(7), "INSERT INTO SldMesFatCx (FilialEmpresa, Caixa, Ano, Produto, ValorFaturado" & sMes & ", QuantFaturada" & sMes & ", NumVendas" & sMes & ") VALUES (?,?,?,?,?,?,?)", objCupomFiscal.iFilialEmpresa, objCupomFiscal.iCodCaixa, Year(objCupomFiscal.dtDataEmissao), objItens.sProduto, (objItens.dPrecoUnitario * objItens.dQuantidade) - objItens.dValorDesconto, dQuantVenda, iNumVendas)
                If lErro <> AD_SQL_SUCESSO Then gError 118176
    
            End If
    
            'se nao for nfce, sat cfe,...
            If Len(objCupomFiscal.sNFeArqXml) = 0 Then
            
                lErro = Comando_ExecutarPos(alComando(8), "SELECT FilialEmpresa FROM SldDiaFat WHERE FilialEmpresa = ? AND Data = ? AND Produto = ?", 0, iFilialEmpresa, objCupomFiscal.iFilialEmpresa, objCupomFiscal.dtDataEmissao, objItens.sProduto)
                If lErro <> AD_SQL_SUCESSO Then gError 118177
        
                lErro = Comando_BuscarPrimeiro(alComando(8))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118178
        
                If lErro = AD_SQL_SUCESSO Then
        
                    lErro = Comando_ExecutarPos(alComando(9), "UPDATE SldDiaFat SET ValorFaturado = ValorFaturado + ?, QuantFaturada = QuantFaturada + ?, TotalDescontos = TotalDescontos + ?", alComando(8), (objItens.dPrecoUnitario * objItens.dQuantidade) - objItens.dValorDesconto, dQuantVenda, objItens.dValorDesconto)
                    If lErro <> AD_SQL_SUCESSO Then gError 118179
        
                Else
        
                    lErro = Comando_Executar(alComando(10), "INSERT INTO SldDiaFat (FilialEmpresa, Data, Produto, ValorFaturado, QuantFaturada, TotalDescontos) VALUES (?,?,?,?,?,?)", objCupomFiscal.iFilialEmpresa, objCupomFiscal.dtDataEmissao, objItens.sProduto, (objItens.dPrecoUnitario * objItens.dQuantidade) - objItens.dValorDesconto, dQuantVenda, objItens.dValorDesconto)
                    If lErro <> AD_SQL_SUCESSO Then gError 118180
        
                End If
        
                lErro = Comando_ExecutarPos(alComando(11), "SELECT FilialEmpresa FROM SldMesFat WHERE FilialEmpresa = ? AND Ano = ? AND Produto = ?", 0, iFilialEmpresa, objCupomFiscal.iFilialEmpresa, Year(objCupomFiscal.dtDataEmissao), objItens.sProduto)
                If lErro <> AD_SQL_SUCESSO Then gError 118181
        
                lErro = Comando_BuscarPrimeiro(alComando(11))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118182
        
                If lErro = AD_SQL_SUCESSO Then
        
                    lErro = Comando_ExecutarPos(alComando(12), "UPDATE SldMesFat SET ValorFaturado" & sMes & " = ValorFaturado" & sMes & " + ?, QuantFaturada" & sMes & " = QuantFaturada" & sMes & " + ?, TotalDescontos" & sMes & " = TotalDescontos" & sMes & " + ?", alComando(11), (objItens.dPrecoUnitario * objItens.dQuantidade) - objItens.dValorDesconto, dQuantVenda, objItens.dValorDesconto)
                    If lErro <> AD_SQL_SUCESSO Then gError 118183
        
                Else
        
                    lErro = Comando_Executar(alComando(12), "INSERT INTO SldMesFat (FilialEmpresa, Ano, Produto, ValorFaturado" & sMes & ", QuantFaturada" & sMes & ", TotalDescontos" & sMes & ") VALUES (?,?,?,?,?,?)", objCupomFiscal.iFilialEmpresa, Year(objCupomFiscal.dtDataEmissao), objItens.sProduto, (objItens.dPrecoUnitario * objItens.dQuantidade) - objItens.dValorDesconto, dQuantVenda, objItens.dValorDesconto)
                    If lErro <> AD_SQL_SUCESSO Then gError 118184
        
                End If
                    
            End If
        
        End If
        
        lNumAuto = lNumAuto + 1
        iItem = iItem + 1
        
    Next
        
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Back_ItensCF_Gravar_Venda = SUCESSO

    Exit Function

Erro_Back_ItensCF_Gravar_Venda:

    Back_ItensCF_Gravar_Venda = gErr

    Select Case gErr

        Case 118163
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 118164, 118166, 118168, 119021, 126300
    
        Case 118165
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_NAO_CADASTRADO", gErr, objProduto.sCodigo)
        
        Case 118167
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_ITEMCF", gErr, objCupomFiscal.iFilialEmpresa, objCupomFiscal.iECF, objCupomFiscal.lNumero, objItens.iItem)
        
        Case 118169, 118170
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDDIAFATCX", gErr)
        
        Case 118171
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_SLDDIAFATCX", gErr)
        
        Case 118172
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_SLDDIAFATCX", gErr)
        
        Case 118173, 118174
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESFATCX", gErr)
        
        Case 118176
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_SLDMESFATCX", gErr)
        
        Case 118175
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_SLDMESFATCX", gErr)
        
        Case 118177, 118178
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDDIAFAT", gErr, objCupomFiscal.iFilialEmpresa, objItens.sProduto, objCupomFiscal.dtDataEmissao)
        
        Case 118179
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_SLDDIAFAT", gErr)
        
        Case 118180
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_SLDDIAFAT", gErr, objCupomFiscal.iFilialEmpresa, objItens.sProduto, objCupomFiscal.dtDataEmissao)
        
        Case 118181, 118182
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESFAT", gErr, objCupomFiscal.iFilialEmpresa, objItens.sProduto, objCupomFiscal.dtDataEmissao)
        
        Case 118184
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_SLDMESFAT", gErr, Year(objCupomFiscal.dtDataEmissao), objCupomFiscal.iFilialEmpresa, objItens.sProduto)
        
        Case 118183
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_SLDMESFAT", gErr)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151185)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Back_Est_Trib_Ctb_Gravar(ByVal iFilialEmpresa As Integer, ByVal colCCBack As Collection, ByVal lRegistro As Long, ByVal lSequencial As Long, Optional lNumIntMovEst As Long = 0) As Long
'lRegistro indica o ultimo registro do arquivo de log que foi carregado
'iSequencial faz parte do identificador do arquivo de log que está sendo carregado

Dim lErro As Long
Dim iIndice As Integer
Dim lRegistroFinalAux
Dim lTransacao As Long
Dim alComando(1 To 4) As Long
Dim objCCBack As ClassCCBack
Dim objMATConfig As New ClassMATConfig

On Error GoTo Erro_Back_Est_Trib_Ctb_Gravar

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 118185
    Next

    'gera os movimentos de estoque dos cupons
    lErro = Back_MovEstoque_Gera(colCCBack, iFilialEmpresa)
    If lErro <> SUCESSO Then gError 118186

    'selecionar o registro que contem info sobre os dados do log que foram enviados para o backfoffice
    lErro = Comando_ExecutarPos(alComando(1), "SELECT RegistroFinal FROM ControleLogBack WHERE FilialEmpresa = ? AND Sequencial = ?", lRegistroFinalAux, iFilialEmpresa, lSequencial)
    If lErro <> AD_SQL_SUCESSO Then gError 118187

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118188

    'se nao tiver registro cadastrado com este sequencial ==> tem que inserir um novo registro em ControleLogBack
    If lErro = AD_SQL_SEM_DADOS Then
        lErro = Comando_Executar(alComando(2), "INSERT INTO ControleLogBack (FilialEmpresa, Sequencial, RegistroFinal, Data, Hora) VALUES (?,?,?,?,?)", iFilialEmpresa, lSequencial, lRegistro, gdtDataAtual, CDbl(Time))
        If lErro <> AD_SQL_SUCESSO Then gError 118189
    Else
        'senao tem que atualizar o valor do RegistroFinal
        lErro = Comando_ExecutarPos(alComando(3), "UPDATE ControleLogBack SET RegistroFinal=?, Data=?, Hora=?", alComando(1), lRegistro, gdtDataAtual, CDbl(Time))
        If lErro <> AD_SQL_SUCESSO Then gError 118190
    End If

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    'confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 118191

    'Abre a Transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 118192

    If lNumIntMovEst <> 0 Then

        objMATConfig.iFilialEmpresa = EMPRESA_TODA
        objMATConfig.sCodigo = NUM_PROX_ITEM_MOV_ESTOQUE

        lErro = CF("MATConfig_Le_Lock", objMATConfig, alComando(4))
        If lErro <> SUCESSO Then gError 118193

        lNumIntMovEst = CLng(objMATConfig.sConteudo)

    End If

    Back_Est_Trib_Ctb_Gravar = SUCESSO

    Exit Function

Erro_Back_Est_Trib_Ctb_Gravar:

    Back_Est_Trib_Ctb_Gravar = gErr

    Select Case gErr
        
        Case 118185
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 118186, 118193
        
        Case 118187, 118188
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONTROLELOGBACK", gErr)
                
        Case 118189
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CONTROLELOGBACK", gErr)

        Case 118190
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_CONTROLELOGBACK", gErr)
        
        Case 118191
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case 118192
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151186)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function Back_MovEstoque_Gera(ByVal colCCBack As Collection, ByVal iFilialEmpresa As Integer) As Long
'gera os movimentos de estoque dos cupons

Dim lErro As Long, iIndice As Integer
Dim objMovEstoque As ClassMovEstoque
Dim lCodigo As Long, dFator As Double
Dim objItemMovEstoque As ClassItemMovEstoque
Dim colInsumos As Collection
Dim colRastroMovto As Collection
Dim alComando(1 To 3) As Long
Dim alComando1(1 To NUM_MAX_LCOMANDO_MOVESTOQUE) As Long
Dim objCCBack As New ClassCCBack
Dim sNomeReduzidoAlmox As String
Dim iAlmoxarifadoPadrao As Integer

On Error GoTo Erro_Back_MovEstoque_Gera

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 118193
    Next

    For iIndice = LBound(alComando1) To UBound(alComando1)
        alComando1(iIndice) = Comando_Abrir()
        If alComando1(iIndice) = 0 Then gError 118194
    Next

    Set objMovEstoque = New ClassMovEstoque

    'Obtém o Código do Movimento
    lErro = CF("MovEstoque_Automatico_EmTransacao1", alComando(1), alComando(2), alComando(3), iFilialEmpresa, lCodigo)
    If lErro <> SUCESSO Then gError 118195

    objMovEstoque.dtData = Date
    objMovEstoque.dtHora = CDbl(Time)
    objMovEstoque.iFilialEmpresa = iFilialEmpresa
    objMovEstoque.iTipoMov = MOV_EST_CUPOM_FISCAL
    objMovEstoque.lCodigo = lCodigo
    objMovEstoque.sDocOrigem = "CF"
    
    'Adiciona itens ao Movimento
    For Each objCCBack In colCCBack

        Set colInsumos = New Collection
        Set colRastroMovto = New Collection

        iAlmoxarifadoPadrao = 0
        sNomeReduzidoAlmox = ""

        lErro = CF("AlmoxarifadoPadrao_Le_CodNomeRed", objMovEstoque.iFilialEmpresa, objCCBack.sProduto, sNomeReduzidoAlmox, iAlmoxarifadoPadrao)
        If lErro <> SUCESSO And lErro <> 118756 Then gError 118759

        Set objItemMovEstoque = objMovEstoque.colItens.Add(0, 0, 0, 0, objCCBack.sProduto, objCCBack.sDescProd, objCCBack.sUnidadeMed, objCCBack.dQuantEst, iAlmoxarifadoPadrao, sNomeReduzidoAlmox, 0, "", 0, "", "", "", "", 0, colRastroMovto, colInsumos, DATA_NULA)

        objItemMovEstoque.iClasseUM = objCCBack.iClasseUM
        objItemMovEstoque.iControleEstoque = objCCBack.iControleEstoque
        objItemMovEstoque.sSiglaUMEst = objCCBack.sUMEstoque

    Next
    
    lErro = CF("EstoqueInicial_Gera_Zerado", objMovEstoque)
    If lErro <> SUCESSO Then gError 118196

    'Grava os Movimentos de Estoque relacionados a Nota Fiscal
    lErro = CF("MovEstoque_Grava1", alComando1(), objMovEstoque)
    If lErro <> SUCESSO Then gError 118196

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    For iIndice = LBound(alComando1) To UBound(alComando1)
        Call Comando_Fechar(alComando1(iIndice))
    Next

    Back_MovEstoque_Gera = SUCESSO

    Exit Function

Erro_Back_MovEstoque_Gera:

    Back_MovEstoque_Gera = gErr

    Select Case gErr
        
        Case 118193, 118194
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 118195, 118196, 118759
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151187)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    For iIndice = LBound(alComando1) To UBound(alComando1)
        Call Comando_Fechar(alComando1(iIndice))
    Next

    Exit Function

End Function

Function Back_Carne_Gravar_Venda(ByVal objCarne As ClassCarne) As Long
'gravar os dados de carne caso existam, também é passado como parametro o numero identificador o NumIntDoc do Cupom Fiscal
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lNumAuto As Long
Dim objCarneParc As ClassCarneParcelas
Dim lErro As Long
Dim alComando(1 To 2) As Long
Dim iIndice As Integer

On Error GoTo Erro_Back_Carne_Gravar_Venda

    'se o carne está preenchido
    If objCarne.sCodBarrasCarne <> "" Then

        For iIndice = LBound(alComando) To UBound(alComando)
            alComando(iIndice) = Comando_Abrir()
            If alComando(iIndice) = 0 Then gError 118197
        Next

        'insere novo registro na tabela de Carne
        lErro = Comando_Executar(alComando(1), "INSERT INTO Carne(NumIntDoc, FilialEmpresa, Status, DataReferencia, CupomFiscal, Cliente, Autorizacao, CodBarrasCarne) VALUES (?,?,?,?,?,?,?,?)", objCarne.lNumIntDoc, objCarne.iFilialEmpresa, objCarne.iStatus, objCarne.dtDataReferencia, objCarne.lCupomFiscal, objCarne.lCliente, objCarne.sAutorizacao, objCarne.sCodBarrasCarne)
        If lErro <> AD_SQL_SUCESSO Then gError 118198

        For Each objCarneParc In objCarne.colParcelas

            'insere novo registro na tabela CarneParcelas
            lErro = Comando_Executar(alComando(1), "INSERT INTO CarneParcelas(NumIntDoc, FilialEmpresa, NumIntCarne, Parcela, DataVencimento, Valor, Status) VALUES (?,?,?,?,?,?,?)", objCarneParc.lNumIntDoc, objCarneParc.iFilialEmpresa, objCarneParc.lNumIntCarne, objCarneParc.iParcela, objCarneParc.dtDataVencimento, objCarneParc.dValor, objCarneParc.iStatus)
            If lErro <> AD_SQL_SUCESSO Then gError 118199

        Next

        For iIndice = LBound(alComando) To UBound(alComando)
            Call Comando_Fechar(alComando(iIndice))
        Next

    End If

    Back_Carne_Gravar_Venda = SUCESSO

    Exit Function

Erro_Back_Carne_Gravar_Venda:

    Back_Carne_Gravar_Venda = gErr

    Select Case gErr

        Case 118197
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 118198
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CARNE1", gErr, objCarne.sCodBarrasCarne)

        Case 118199
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CARNEPARCELAS1", gErr, objCarneParc.iParcela, objCarne.sCodBarrasCarne)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151188)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Back_Cheque_Gravar_Venda(ByVal colCheque As Collection) As Long
'gravar os cheques associados ao cupom fiscal contidos na colecao.
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lSequencialBack As Long
Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim objCheque As ClassChequePre
Dim iIndice As Integer
Dim lNumIntCheque As Long

On Error GoTo Erro_Back_Cheque_Gravar_Venda

    If colCheque.Count > 0 Then

        For iIndice = LBound(alComando) To UBound(alComando)
            alComando(iIndice) = Comando_Abrir()
            If alComando(iIndice) = 0 Then gError 118200
        Next

        'gera um novo número interno de itens de cupom fiscal
        lErro = CF("Config_ObterNumInt", "CPRConfig", "COD_PROX_CHEQUE_BACKOFFICE", lSequencialBack, colCheque.Count)
        If lErro <> SUCESSO Then gError 118201

        'Gera o número automático
        lErro = CF("Config_ObterNumInt", "CPRConfig", "NUM_PROX_CHEQUE_PRE", lNumIntCheque, colCheque.Count)
        If lErro <> SUCESSO Then gError 118202

        For Each objCheque In colCheque

            objCheque.lSequencialBack = lSequencialBack
            objCheque.lNumIntCheque = lNumIntCheque

            'insere novo registro na tabela de ChequesPre
            lErro = Comando_Executar(alComando(1), "INSERT INTO ChequePre(FilialEmpresa, NumIntCheque, Banco, Agencia, ContaCorrente, Numero, DataDeposito, Valor, CPFCGC, NumMovtoCaixa, Aprovado, NaoEspecificado, SequencialLoja, FilialEmpresaLoja, Caixa, SequencialCaixa, SequencialBack, Localizacao, DataEmissao) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", objCheque.iFilialEmpresaLoja, objCheque.lNumIntCheque, objCheque.iBanco, objCheque.sAgencia, objCheque.sContaCorrente, objCheque.lNumero, objCheque.dtDataDeposito, objCheque.dValor, objCheque.sCPFCGC, objCheque.lNumMovtoCaixa, objCheque.iAprovado, objCheque.iNaoEspecificado, objCheque.lSequencialLoja, objCheque.iFilialEmpresaLoja, objCheque.iCaixa, objCheque.lSequencialCaixa, objCheque.lSequencialBack, CHEQUEPRE_LOCALIZACAO_CAIXA, objCheque.dtDataEmissao)
            If lErro <> AD_SQL_SUCESSO Then gError 118203

            lSequencialBack = lSequencialBack + 1
            lNumIntCheque = lNumIntCheque + 1

        Next

        For iIndice = LBound(alComando) To UBound(alComando)
            Call Comando_Fechar(alComando(iIndice))
        Next

    End If

    Back_Cheque_Gravar_Venda = SUCESSO

    Exit Function

Erro_Back_Cheque_Gravar_Venda:

    Back_Cheque_Gravar_Venda = gErr

    Select Case gErr

        Case 118200
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 118201, 118202

        Case 118203
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CHEQUE", gErr, objCheque.lNumIntCheque)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151189)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Back_Troca_Gravar_Venda(ByVal colTroca As Collection, ByVal colCCBack As Collection, lNumIntMovEst As Long) As Long
'gravar os dados de troca associados ao cupom fiscal.

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim objTroca As ClassTroca
Dim iIndice As Integer
Dim objCCBack As ClassCCBack
Dim iAchou As Integer
Dim objProduto As New ClassProduto
Dim dFator As Double

On Error GoTo Erro_Back_Troca_Gravar_Venda

    If colTroca.Count > 0 Then

        For iIndice = LBound(alComando) To UBound(alComando)
            alComando(iIndice) = Comando_Abrir()
            If alComando(iIndice) = 0 Then gError 118204
        Next

        For Each objTroca In colTroca

            'insere novo registro na tabela de Troca
            lErro = Comando_Executar(alComando(1), "INSERT INTO Troca(NumIntDoc, FilialEmpresa, Produto, Quantidade, Valor, NumMovtoCaixa) VALUES (?,?,?,?,?,?)", objTroca.lNumIntDoc, objTroca.iFilialEmpresa, objTroca.sCodProduto, objTroca.dQuantidade, objTroca.dValor, objTroca.lNumMovtoCaixa)
            If lErro <> AD_SQL_SUCESSO Then gError 118205

            objProduto.sCodigo = objTroca.sCodProduto
    
            'Lê na tabela de Produto a UM de venda
            lErro = CF("Produto_Le", objProduto)
            If lErro <> SUCESSO And lErro <> 28030 Then gError 126506
    
            'Se não encontrar o produto ==> Erro
            If lErro = 28030 Then gError 126507
    
            'Obtém fator de conversão para unidade de medida de Estoque
            lErro = CF("UM_Conversao", objProduto.iClasseUM, objTroca.sUnidadeMed, objProduto.sSiglaUMEstoque, dFator)
            If lErro <> SUCESSO Then gError 126508
    
            iAchou = 0

            'pesquisa em colCCBack se já há um produto igual na colecao para acumular os valores
            For Each objCCBack In colCCBack
    
                If objCCBack.sProduto = objTroca.sCodProduto Then
                    iAchou = 1
                    Exit For
                End If
    
            Next
    
            'se achou o produto ==> acumula as quantidades.
            If iAchou = 1 Then
    
                objCCBack.dQuantEst = objCCBack.dQuantEst - (objTroca.dQuantidade * dFator)
    
            Else
    
                Set objCCBack = New ClassCCBack
    
                objCCBack.sProduto = objTroca.sCodProduto
                objCCBack.sDescProd = objProduto.sDescricao
                objCCBack.dQuantEst = objTroca.dQuantidade * dFator
                objCCBack.lNumIntMovEst = lNumIntMovEst
                objCCBack.sUnidadeMed = objProduto.sSiglaUMEstoque
                objCCBack.iClasseUM = objProduto.iClasseUM
                objCCBack.sUMEstoque = objProduto.sSiglaUMEstoque
                objCCBack.iControleEstoque = objProduto.iControleEstoque
    
                colCCBack.Add objCCBack
    
                lNumIntMovEst = lNumIntMovEst + 1
    
            End If

        Next

        For iIndice = LBound(alComando) To UBound(alComando)
            Call Comando_Fechar(alComando(iIndice))
        Next

    End If

    Back_Troca_Gravar_Venda = SUCESSO

    Exit Function

Erro_Back_Troca_Gravar_Venda:

    Back_Troca_Gravar_Venda = gErr

    Select Case gErr

        Case 118204
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 118205
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_TROCA", gErr)

        Case 126506, 126508

        Case 126507
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_NAO_CADASTRADO", gErr, objProduto.sCodigo)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151190)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Back_Movcx_Gravar_Venda(ByVal colMovCx As Collection, ByVal lNumIntDoc As Long, ByVal colCheque As Collection) As Long
'gravar os movimentos de caixa contidos na colecao.
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lErro As Long
Dim alComando(1 To 8) As Long
Dim iIndice As Integer
Dim objMovCx As ClassMovimentoCaixa
Dim objCheque As ClassChequePre
Dim objTroca As ClassTroca
Dim objCCMovDia As New ClassCCMovDia
Dim iTipoMeioPagto As Integer
Dim iFilialEmpresa As Integer
Dim sMes As String
Dim iAno As Integer

On Error GoTo Erro_Back_Movcx_Gravar_Venda

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 118206
    Next

    For Each objMovCx In colMovCx
        
        Set objCCMovDia = New ClassCCMovDia
        
        'coloca o sequencial do loja como referencia do movimento, se for o caso
        For Each objCheque In colCheque

            If objCheque.lNumMovtoCaixa = objMovCx.lNumMovto Then
                objMovCx.lNumRefInterna = objCheque.lSequencialBack
                Exit For
            End If

        Next

        'insere novo registro na tabela de MovimentosCaixa
        lErro = Comando_Executar(alComando(1), "INSERT INTO MovimentosCaixa(FilialEmpresa, NumMovto, Caixa, Operador, Sequencial, Tipo, AdmMeioPagto, Parcelamento, TipoCartao, Numero, DataMovimento, Valor, Historico, Favorecido, CupomFiscal, NumRefInterna, MovtoTransf, MovtoEstorno, Gerente, CodConta, Hora, Transferencia, NumIntExt) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", objMovCx.iFilialEmpresa, objMovCx.lNumMovto, objMovCx.iCaixa, objMovCx.iCodOperador, objMovCx.lSequencial, objMovCx.iTipo, objMovCx.iAdmMeioPagto, objMovCx.iParcelamento, objMovCx.iTipoCartao, objMovCx.lNumero, objMovCx.dtDataMovimento, objMovCx.dValor, objMovCx.sHistorico, objMovCx.sFavorecido, objMovCx.lCupomFiscal, objMovCx.lNumRefInterna, objMovCx.lMovtoTransf, objMovCx.lMovtoEstorno, objMovCx.iGerente, objMovCx.iCodConta, objMovCx.dHora, objMovCx.lTransferencia, objMovCx.lNumIntExt)
        If lErro <> AD_SQL_SUCESSO Then gError 118207

        'se for troco ==> trata como um saque para fins de estatistica
        If objMovCx.iTipo = MOVIMENTOCAIXA_TROCO_DINHEIRO Or _
        objMovCx.iTipo = MOVIMENTOCAIXA_TROCO_CONTRAVALE Or _
        objMovCx.iTipo = MOVIMENTOCAIXA_TROCO_VALE Then

            'preenche um objccmovdia com os dados do movimento de deposito no caixa central
            lErro = CF("Mover_Dados_Saque_CCMovDia", objMovCx, objCCMovDia)
            If lErro <> SUCESSO Then gError 118208

            'torna negativo o valor para que as tabelas estatisticas sejam atualizadas corretamente
            objMovCx.dValor = -objMovCx.dValor

        Else

            'preenche um objccmovdia com os dados do movimento de deposito no caixa central
            lErro = Mover_Dados_Deposito_CCMovDia(objMovCx, objCCMovDia)
            If lErro <> SUCESSO Then gError 118209

        End If
        
        'seleciona registro na tabela de TiposMovtocaixa
        lErro = Comando_ExecutarPos(alComando(8), "SELECT TipoMeioPagto FROM TiposMovtoCaixa WHERE Codigo=?", 0, iTipoMeioPagto, objMovCx.iTipo)
        If lErro <> AD_SQL_SUCESSO Then gError 118220
    
        lErro = Comando_BuscarPrimeiro(alComando(8))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118221
        
        objCCMovDia.iTipoMeioPagto = iTipoMeioPagto
            
        'adiciona o mesmo no consolidado diário
        lErro = CF("CCMovDia_Grava", objCCMovDia)
        If lErro <> SUCESSO Then gError 118210

        'adiciona o mesmo no consolidado anual no mês em questão
        lErro = CF("CCMov_Grava", objCCMovDia)
        If lErro <> SUCESSO Then gError 118211

        lErro = Comando_ExecutarPos(alComando(2), "SELECT FilialEmpresa FROM SldDiaMeioPagtoCx WHERE FilialEmpresa = ? AND Caixa = ? AND TipoMeioPagto = ? AND AdmMeioPagto = ? AND Parcelamento = ? AND Data = ?", 0, iFilialEmpresa, objMovCx.iFilialEmpresa, objMovCx.iCaixa, objCCMovDia.iTipoMeioPagto, objMovCx.iAdmMeioPagto, objMovCx.iParcelamento, objMovCx.dtDataMovimento)
        If lErro <> AD_SQL_SUCESSO Then gError 118212

        lErro = Comando_BuscarPrimeiro(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118213

        If lErro = AD_SQL_SUCESSO Then

            lErro = Comando_ExecutarPos(alComando(3), "UPDATE SldDiaMeioPagtoCx SET ValorFaturado = ValorFaturado + ?", alComando(2), objMovCx.dValor)
            If lErro <> AD_SQL_SUCESSO Then gError 118214

        Else

            lErro = Comando_Executar(alComando(4), "INSERT INTO SldDiaMeioPagtoCx (FilialEmpresa, Caixa, TipoMeioPagto, AdmMeioPagto, Parcelamento, Data, ValorFaturado) VALUES (?,?,?,?,?,?,?)", objMovCx.iFilialEmpresa, objMovCx.iCaixa, objCCMovDia.iTipoMeioPagto, objMovCx.iAdmMeioPagto, objMovCx.iParcelamento, objMovCx.dtDataMovimento, objMovCx.dValor)
            If lErro <> AD_SQL_SUCESSO Then gError 118215

        End If

        lErro = Comando_ExecutarPos(alComando(5), "SELECT FilialEmpresa FROM SldMesMeioPagtoCx WHERE FilialEmpresa = ? AND Caixa = ? AND TipoMeioPagto = ? AND AdmMeioPagto = ? AND Parcelamento = ? AND Ano = ?", 0, iFilialEmpresa, objMovCx.iFilialEmpresa, objMovCx.iCaixa, objCCMovDia.iTipoMeioPagto, objMovCx.iAdmMeioPagto, objMovCx.iParcelamento, Year(objMovCx.dtDataMovimento))
        If lErro <> AD_SQL_SUCESSO Then gError 118216

        lErro = Comando_BuscarPrimeiro(alComando(5))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118217

        sMes = CStr(Month(objMovCx.dtDataMovimento))
        iAno = CStr(Year(objMovCx.dtDataMovimento))

        If lErro = AD_SQL_SUCESSO Then

            lErro = Comando_ExecutarPos(alComando(6), "UPDATE SldMesMeioPagtoCx SET ValorFaturado" & sMes & " = ValorFaturado" & sMes & " + ?", alComando(5), objMovCx.dValor)
            If lErro <> AD_SQL_SUCESSO Then gError 118218

        Else

            lErro = Comando_Executar(alComando(7), "INSERT INTO SldMesMeioPagtoCx (FilialEmpresa, Caixa, TipoMeioPagto, AdmMeioPagto, Parcelamento, Ano, ValorFaturado" & sMes & ") VALUES (?,?,?,?,?,?,?) ", objMovCx.iFilialEmpresa, objMovCx.iCaixa, objCCMovDia.iTipoMeioPagto, objMovCx.iAdmMeioPagto, objMovCx.iParcelamento, Year(objMovCx.dtDataMovimento), objMovCx.dValor)
            If lErro <> AD_SQL_SUCESSO Then gError 118219

        End If

    Next

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Back_Movcx_Gravar_Venda = SUCESSO

    Exit Function

Erro_Back_Movcx_Gravar_Venda:

    Back_Movcx_Gravar_Venda = gErr

    Select Case gErr

        Case 118206
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 118217
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MOVCAIXA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa, objMovCx.lSequencial)

        Case 118208 To 118211
        
        Case 118212, 118213
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDDIAMEIOPAGTOCX", gErr)
        
        Case 118214
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_SLDDIAMEIOPAGTOCX", gErr)
        
        Case 118215
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_SLDDIAMEIOPAGTOCX", gErr)
        
        Case 118216, 118217
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESMEIOPAGTOCX", gErr)

        Case 118218
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_SLDMESMEIOPAGTOCX", gErr)
        
        Case 118219
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_SLDMESMEIOPAGTOCX", gErr)
                        
        Case 118220, 118221
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOMEIOPAGTO", gErr)
                
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151191)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Registro_Back_Vendas_Excluir(ByVal colRegistro As Collection, sArquivo As String, lRegistro As Long) As Long

Dim iPosAtual As Integer
Dim iPosFimAtual As Integer
Dim objMovCx As New ClassMovimentoCaixa
Dim lErro As Long
Dim iFilial As Integer
Dim lCOO As Long
Dim lORC As Long
Dim iECF As Integer
Dim iStatus As Integer
Dim lNumIntCupom As Long
Dim sRegistro As String

On Error GoTo Erro_Registro_Back_Vendas_Excluir
    
    sRegistro = colRegistro.Item(1)
    
    iPosFimAtual = InStr(sRegistro, Chr(vbKeyEscape))
    
    'le as infos de cupom
    lErro = CF("Back_Exclui_Vendas", iPosAtual, iPosFimAtual, sRegistro, iFilial, lCOO, lORC, iECF, iStatus, lNumIntCupom)
    If lErro <> SUCESSO Then gError 118858
    
    lErro = CF("Back_Venda_Excluir", sRegistro, iFilial, lCOO, lORC, iECF, iStatus, lNumIntCupom)
    If lErro <> SUCESSO Then gError 118859
    
    Registro_Back_Vendas_Excluir = SUCESSO

    Exit Function

Erro_Registro_Back_Vendas_Excluir:

    Registro_Back_Vendas_Excluir = gErr

    Select Case gErr

        Case 118858, 118859

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151192)

    End Select

    Exit Function

End Function

Function Back_Exclui_Vendas(iPosAtual As Integer, iPosFimAtual As Integer, sRegistro As String, iFilial As Integer, lCOO As Long, lORC As Long, iECF As Integer, iStatus As Integer, lNumIntCupom As Long) As Long
'guarda as infos de movimento de caixa

Dim lErro As Long

On Error GoTo Erro_Back_Exclui_Vendas

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    iFilial = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    lCOO = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    lORC = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    iECF = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    iStatus = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    lNumIntCupom = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    Back_Exclui_Vendas = SUCESSO

    Exit Function

Erro_Back_Exclui_Vendas:

    Back_Exclui_Vendas = gErr

    Select Case gErr

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151193)

    End Select

    Exit Function

End Function

Function Back_Venda_Excluir(ByVal sRegistro As String, ByVal iFilial As Integer, ByVal lCOO As Long, ByVal lORC As Long, ByVal iECF As Integer, ByVal iStatus As Integer, ByVal lNumIntCupom As Long) As Long
'exclui os dados da venda do backoffice
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lErro As Long
Dim lTransacao As Long
Dim objCupomFiscal As New ClassCupomFiscal
Dim objLog As New ClassLog
Dim lCodigo As Long

On Error GoTo Erro_Back_Venda_Excluir

    'exclui os dados do cupom
    lErro = CF("CupomFiscal_Excluir_Venda", lCOO, lORC, iECF, iFilial, lNumIntCupom, iStatus)
    If lErro <> SUCESSO And lErro <> 118869 Then gError 118860

    If lErro = SUCESSO Then
        'exclui os dados de carne caso existam
        lErro = Carne_Excluir_Venda(iFilial, lNumIntCupom)
        If lErro <> SUCESSO Then gError 118861
        
        objCupomFiscal.lNumOrcamento = lORC
        objCupomFiscal.iStatus = iStatus
        If lCOO <> 0 Then objCupomFiscal.iTipo = OPTION_CF
        
        'exclui os movimentos de caixa
        lErro = CF("MovimentosCaixa_Excluir_Venda", iFilial, lNumIntCupom, objCupomFiscal)
        If lErro <> SUCESSO Then gError 118862
                
    End If
        
    Back_Venda_Excluir = SUCESSO

    Exit Function

Erro_Back_Venda_Excluir:

    Back_Venda_Excluir = gErr

    Select Case gErr

        Case 118860, 118861, 118862, 118863

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151194)

    End Select

    Exit Function

End Function

'Function Back_CupomFiscal_Excluir_Venda(ByVal lCOO As Long, ByVal lORC As Long, ByVal iECF As Integer, iFilial As Integer, lNumIntCupom As Long, iStatus As Integer) As Long
''excuir os dados de cupom fiscal
''IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO
'
'Dim lNumAuto As Long
'Dim lErro As Long
'Dim alComando(1 To 12) As Long
'Dim iIndice As Integer
'Dim objProduto As New ClassProduto
'Dim sUnidade As String
'Dim dQuant As Double
'Dim dtData As Date
'Dim dFator As Double
'Dim dQuantVenda As Double
'Dim iCaixa As Integer
'Dim dPrecoUnitario As Double
'Dim dValorDesconto As Double
'Dim colItens As New Collection
'Dim sProduto As String
'Dim iNumVendas As Integer
'Dim sMes As String
'Dim iFilialEmpresa As Integer
'Dim sProduto As String
'Dim objCupomFiscal As New ClassCupomFiscal
'Dim iAchou As Integer
'Dim objCCBack As New ClassCCBack
'Dim lNumIntMovEst As Long
'Dim lNumIntMovEst1 As Long
'
'On Error GoTo Erro_Back_CupomFiscal_Excluir_Venda
'
'    For iIndice = LBound(alComando) To UBound(alComando)
'        alComando(iIndice) = Comando_Abrir()
'        If alComando(iIndice) = 0 Then gError 118864
'    Next
'
'    If lCOO > 0 Then
'        'busca registro na tabela de CupomFiscal
'        lErro = Comando_ExecutarPos(alComando(1), "SELECT FilialEmpresa, NumIntDoc, DataEmissao, Caixa, Status FROM CupomFiscal WHERE ECF=? AND Numero=? ", 0, iFilial, lNumIntCupom, dtData, iCaixa, iStatus, iECF, lCOO)
'        If lErro <> AD_SQL_SUCESSO Then gError 118865
'    Else
'        'busca registro na tabela de CupomFiscal
'        lErro = Comando_ExecutarPos(alComando(1), "SELECT FilialEmpresa, NumIntDoc, DataEmissao, Caixa, Status FROM CupomFiscal WHERE ECF=? AND NumOrcamento=? ", 0, iFilial, lNumIntCupom, dtData, iCaixa, iStatus, iECF, lORC)
'        If lErro <> AD_SQL_SUCESSO Then gError 118866
'    End If
'
'    lErro = Comando_BuscarPrimeiro(alComando(1))
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118867
'
'    If lErro = AD_SQL_SEM_DADOS Then gError 118869
'
'    sReduzido = String(STRING_PRODUTO, 0)
'    sUnidade = String(STRING_PRODUTO_SIGLAUMVENDA, 0)
'
'    'busca registro na tabela de ItensCupomFiscal
'    lErro = Comando_ExecutarPos(alComando(2), "SELECT Produto, UnidadeMed, Quantidade, PrecoUnitario, ValorDesconto, NumIntMovEst FROM ItensCupomFiscal WHERE FilialEmpresa=? AND NumIntCupom=?", 0, sProduto, sUnidade, dQuant, dPrecoUnitario, dValorDesconto, lNumIntMovEst, iFilial, lNumIntCupom)
'    If lErro <> AD_SQL_SUCESSO Then gError 118870
'
'    lErro = Comando_BuscarPrimeiro(alComando(2))
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118871
'
'    If lErro = AD_SQL_SEM_DADOS Then gError 118872
'
'    lNumIntMovEst1 = lNumIntMovEst
'
'    Do While lErro <> AD_SQL_SEM_DADOS
'
'        iNumVendas = 1
'
'        objProduto.sCodigo = sProduto
'
'        For iIndice = 1 To colItens.Count
'            sProduto = colItens.Item(iIndice)
'            If sProduto = objProduto.sCodigo Then
'                iNumVendas = 0
'                Exit For
'            End If
'        Next
'
'        colItens.Add objProduto.sCodigo
'
'        'Lê na tabela de Produto a UM de venda
'        lErro = CF("Produto_Le", objProduto)
'        If lErro <> SUCESSO And lErro <> 28030 Then gError 118873
'
'        'Se não encontrar o produto ==> Erro
'        If lErro = 28030 Then gError 118874
'
'        iAchou = 0
'
''        'pesquisa em colCCBack se já há um produto igual na colecao para acumular os valores
''        For Each objCCBack In colCCBack
''
''            If objCCBack.sProduto = objProduto.sCodigo Then
''                iAchou = 1
''                Exit For
''            End If
''
''        Next
''
''        'se achou o produto ==> acumula as quantidades.
''        If iAchou = 0 Then
''
''            Set objCCBack = New ClassCCBack
''
''            objCCBack.sProduto = objProduto.sCodigo
''
''            colCCBack.Add objCCBack
''
''        End If
'
'        'Obtém fator de conversão para unidade de medida de Venda
'        lErro = CF("UM_Conversao", objProduto.iClasseUM, sUnidade, objProduto.sSiglaUMVenda, dFator)
'        If lErro <> SUCESSO Then gError 118875
'
'        dQuantVenda = dQuant * dFator
'
'        If lORC = 0 Or iStatus = STATUS_BAIXADO Then
'
'            lErro = Comando_ExecutarPos(alComando(3), "SELECT FilialEmpresa FROM SldDiaFatCx WHERE FilialEmpresa = ? AND Caixa = ? AND Data = ? AND Produto = ?", 0, iFilialEmpresa, iFilial, iCaixa, dtData, objProduto.sCodigo)
'            If lErro <> AD_SQL_SUCESSO Then gError 118876
'
'            lErro = Comando_BuscarPrimeiro(alComando(3))
'            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118877
'
'            If lErro = AD_SQL_SEM_DADOS Then gError 118878
'
'            lErro = Comando_ExecutarPos(alComando(4), "UPDATE SldDiaFatCx SET ValorFaturado = ValorFaturado - ?, QuantFaturada = QuantFaturada - ?, NumVendas = NumVendas - ?", alComando(3), (dPrecoUnitario * dQuant) - dValorDesconto, dQuantVenda, iNumVendas)
'            If lErro <> AD_SQL_SUCESSO Then gError 118879
'
'            lErro = Comando_ExecutarPos(alComando(5), "SELECT FilialEmpresa FROM SldMesFatCx WHERE FilialEmpresa = ? AND Caixa = ? AND Ano = ? AND Produto = ?", 0, iFilialEmpresa, iFilial, iCaixa, Year(dtData), objProduto.sCodigo)
'            If lErro <> AD_SQL_SUCESSO Then gError 118880
'
'            lErro = Comando_BuscarPrimeiro(alComando(5))
'            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118881
'
'            If lErro = AD_SQL_SEM_DADOS Then gError 118882
'
'            sMes = Month(dtData)
'
'            lErro = Comando_ExecutarPos(alComando(6), "UPDATE SldMesFatCx SET ValorFaturado" & sMes & " = ValorFaturado" & sMes & " - ?, QuantFaturada" & sMes & " = QuantFaturada" & sMes & " - ?, NumVendas" & sMes & " = NumVendas" & sMes & " - ?", alComando(5), (dPrecoUnitario * dQuant) - dValorDesconto, dQuantVenda, iNumVendas)
'            If lErro <> AD_SQL_SUCESSO Then gError 118883
'
'            lErro = Comando_ExecutarPos(alComando(7), "SELECT FilialEmpresa FROM SldDiaFat WHERE FilialEmpresa = ? AND Data = ? AND Produto = ?", 0, iFilialEmpresa, objCupomFiscal.iFilialEmpresa, dtData, objProduto.sCodigo)
'            If lErro <> AD_SQL_SUCESSO Then gError 118884
'
'            lErro = Comando_BuscarPrimeiro(alComando(7))
'            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118885
'
'            If lErro = AD_SQL_SEM_DADOS Then gError 118886
'
'            lErro = Comando_ExecutarPos(alComando(8), "UPDATE SldDiaFat SET ValorFaturado = ValorFaturado - ?, QuantFaturada = QuantFaturada - ?", alComando(7), (dPrecoUnitario * dQuant) - dValorDesconto, dQuantVenda)
'            If lErro <> AD_SQL_SUCESSO Then gError 118887
'
'            lErro = Comando_ExecutarPos(alComando(9), "SELECT FilialEmpresa FROM SldMesFat WHERE FilialEmpresa = ? AND  Ano = ? AND Produto = ?", 0, iFilialEmpresa, iFilial, Year(dtData), objProduto.sCodigo)
'            If lErro <> AD_SQL_SUCESSO Then gError 118888
'
'            lErro = Comando_BuscarPrimeiro(alComando(9))
'            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118889
'
'            If lErro = AD_SQL_SEM_DADOS Then gError 118890
'
'            lErro = Comando_ExecutarPos(alComando(10), "UPDATE SldMesFat SET ValorFaturado" & sMes & " = ValorFaturado" & sMes & " - ?, QuantFaturada" & sMes & " = QuantFaturada" & sMes & " - ?", alComando(9), (dPrecoUnitario * dQuant) - dValorDesconto, dQuantVenda)
'            If lErro <> AD_SQL_SUCESSO Then gError 118891
'
'        End If
'
'        'excluir registro na tabela de itensCupomFiscal
'        lErro = Comando_ExecutarPos(alComando(11), "DELETE FROM ItensCupomFiscal", alComando(2))
'        If lErro <> AD_SQL_SUCESSO Then gError 118892
'
'        lErro = Comando_BuscarProximo(alComando(2))
'        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118893
'
'    Loop
'
'    'excluir registro na tabela de CupomFiscal
'    lErro = Comando_ExecutarPos(alComando(12), "DELETE FROM CupomFiscal", alComando(1))
'    If lErro <> AD_SQL_SUCESSO Then gError 118894
'
'    lErro = MovEstoque_Exclui_CupomFiscal(lNumIntMovEst1)
'    If lErro <> SUCESSO Then gError 105980
'
'    For iIndice = LBound(alComando) To UBound(alComando)
'        Call Comando_Fechar(alComando(iIndice))
'    Next
'
'    Back_CupomFiscal_Excluir_Venda = SUCESSO
'
'    Exit Function
'
'Erro_Back_CupomFiscal_Excluir_Venda:
'
'    Back_CupomFiscal_Excluir_Venda = gErr
'
'    Select Case gErr
'
'        Case 105980, 118873, 118875
'
'        Case 118864
'            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
'
'        Case 118865, 118866, 118867
'            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CUPOMFISCAL", gErr)
'
'        Case 118869
'
'        Case 118870, 118871, 118893
'            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ITENSCUPOMFISCAL", gErr)
'
'        Case 118872
'            Call Rotina_Erro(vbOKOnly, "ERRO_ITENSCUPOMFISCAL_NAO_CADASTRADO", gErr, lNumIntCupom)
'
'        Case 118874
'            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_NAO_CADASTRADO", gErr, objProduto.sCodigo)
'
'        Case 118876, 118877
'            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDDIAFATCX", gErr)
'
'        Case 118878
'            Call Rotina_Erro(vbOKOnly, "ERRO_SLDDIAFATCX_NAO_ENCONTRADO", gErr)
'
'        Case 118879
'            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_SLDDIAFATCX", gErr)
'
'        Case 118880, 118881
'            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESFATCX", gErr)
'
'        Case 118882
'            Call Rotina_Erro(vbOKOnly, "ERRO_SLDMESFATCX_NAO_ENCONTRADO", gErr)
'
'        Case 118883
'            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_SLDMESFATCX", gErr)
'
'        Case 118884, 118885
'            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDDIAFAT", gErr, iFilial, sProduto, dtData)
'
'        Case 118886
'            Call Rotina_Erro(vbOKOnly, "ERRO_SLDDIAFAT_NAO_ENCONTRADO", gErr)
'
'        Case 118887
'            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_SLDDIAFAT", gErr)
'
'        Case 118888, 118889
'            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESFAT", gErr, objCupomFiscal.iFilialEmpresa, objProduto.sCodigo, objCupomFiscal.dtDataEmissao)
'
'        Case 118890
'            Call Rotina_Erro(vbOKOnly, "ERRO_SLDMESFAT_NAO_ENCONTRADO", gErr)
'
'        Case 118891
'            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_SLDMESFAT", gErr)
'
'        Case 118892
'            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_ITENSCUPOMFISCAL", gErr)
'
'        Case 118894
'            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CUPOMFISCAL", gErr, lNumIntCupom)
'
'        Case Else
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151195)
'
'    End Select
'
'    For iIndice = LBound(alComando) To UBound(alComando)
'        Call Comando_Fechar(alComando(iIndice))
'    Next
'
'    Exit Function
'
'End Function

'Private Function Back_MovEstoque_Exclui(ByVal colCCBack As Collection) As Long
''Exclui os movimentos de estoque dos cupons
'
'Dim lErro As Long, iIndice As Integer
'Dim objMovEstoque As ClassMovEstoque
'Dim lCodigo As Long, dFator As Double
'Dim objItemMovEstoque As ClassItemMovEstoque
'Dim colInsumos As Collection
'Dim colRastroMovto As Collection
'Dim alComando(1 To 3) As Long
'Dim alComando1(1 To NUM_MAX_LCOMANDO_MOVESTOQUE) As Long
'Dim objCCBack As New ClassCCBack
'Dim sNomeReduzidoAlmox As String
'Dim iAlmoxarifadoPadrao As Integer
'
'On Error GoTo Erro_Back_MovEstoque_Exclui
'
'    For iIndice = LBound(alComando) To UBound(alComando)
'        alComando(iIndice) = Comando_Abrir()
'        If alComando(iIndice) = 0 Then gError 118895
'    Next
'
'    For iIndice = LBound(alComando1) To UBound(alComando1)
'        alComando1(iIndice) = Comando_Abrir()
'        If alComando1(iIndice) = 0 Then gError 118896
'    Next
'
'    Set objMovEstoque = New ClassMovEstoque
'
'    'Obtém o Código do Movimento
'    lErro = CF("MovEstoque_Automatico_EmTransacao1", alComando(1), alComando(2), alComando(3), giFilialEmpresa, lCodigo)
'    If lErro <> SUCESSO Then gError 118897
'
'    objMovEstoque.dtData = Date
'    objMovEstoque.dtHora = CDbl(Time)
'    objMovEstoque.iFilialEmpresa = giFilialEmpresa
'    objMovEstoque.iTipoMov = MOV_EST_EXCLUSAO_CUPOM_FISCAL
'    objMovEstoque.lCodigo = lCodigo
'    objMovEstoque.sDocOrigem = "CF"
'
'    'Adiciona itens ao Movimento
'    For Each objCCBack In colCCBack
'
'        Set colInsumos = New Collection
'        Set colRastroMovto = New Collection
'
'        lErro = CF("AlmoxarifadoPadrao_Le_CodNomeRed", objMovEstoque.iFilialEmpresa, objCCBack.sProduto, sNomeReduzidoAlmox, iAlmoxarifadoPadrao)
'        If lErro <> SUCESSO Then gError 118898
'
'        Set objItemMovEstoque = objMovEstoque.colItens.Add(0, 0, 0, 0, objCCBack.sProduto, objCCBack.sDescProd, objCCBack.sUnidadeMed, objCCBack.dQuantEst, iAlmoxarifadoPadrao, sNomeReduzidoAlmox, 0, "", 0, "", "", "", "", 0, colRastroMovto, colInsumos, DATA_NULA)
'
'        objItemMovEstoque.iClasseUM = objCCBack.iClasseUM
'        objItemMovEstoque.iControleEstoque = objCCBack.iControleEstoque
'        objItemMovEstoque.sSiglaUMEst = objCCBack.sUMEstoque
'
'    Next
'
'    'Grava os Movimentos de Estoque relacionados a Nota Fiscal
'    lErro = CF("MovEstoque_Grava1", alComando1(), objMovEstoque)
'    If lErro <> SUCESSO Then gError 118899
'
'    For iIndice = LBound(alComando) To UBound(alComando)
'        Call Comando_Fechar(alComando(iIndice))
'    Next
'
'    For iIndice = LBound(alComando1) To UBound(alComando1)
'        Call Comando_Fechar(alComando1(iIndice))
'    Next
'
'    Back_MovEstoque_Exclui = SUCESSO
'
'    Exit Function
'
'Erro_Back_MovEstoque_Exclui:
'
'    Back_MovEstoque_Exclui = gErr
'
'    Select Case gErr
'
'        Case 118895, 118896
'            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
'
'        Case 118897, 118898, 118899
'
'        Case Else
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151196)
'
'    End Select
'
'    For iIndice = LBound(alComando) To UBound(alComando)
'        Call Comando_Fechar(alComando(iIndice))
'    Next
'
'    For iIndice = LBound(alComando1) To UBound(alComando1)
'        Call Comando_Fechar(alComando1(iIndice))
'    Next
'
'    Exit Function
'
'End Function

Function Registro_Back_MovcxDin_Sup(ByVal colRegistro As Collection, sArquivo As String, lRegistro As Long, iOperacao As Integer) As Long
'Trata o registro de movimentacao de dinheiro e coloca os dados no bd do backoffice. sArquivo contem o nome do arquivo em que sRegistro foi lido.
'lRegistro é o numero do registro.

Dim iPosAtual As Integer
Dim iPosFimAtual As Integer
Dim objMovCx As New ClassMovimentoCaixa
Dim lErro As Long
Dim sRegistro As String

On Error GoTo Erro_Registro_Back_MovcxDin_Sup
    
    sRegistro = colRegistro.Item(1)
    
    iPosFimAtual = InStr(sRegistro, Chr(vbKeyEscape))

    'guarda as infos de movimento de caixa
    lErro = CF("Back_MovcxDin_Sup_Movcx", iPosAtual, iPosFimAtual, sRegistro, objMovCx)
    If lErro <> SUCESSO Then gError 118841
    
    lErro = Verifica_Existencia_Sequencial(objMovCx.lSequencial, objMovCx.iCaixa, objMovCx.iFilialEmpresa)
    If lErro <> SUCESSO And lErro <> 112627 Then gError 118939
    
    If lErro <> 112627 Then
    
        Select Case iOperacao
    
            Case SUPRIMENTO_DINHEIRO
    
                lErro = CF("Back_Movcx_Gravar_MovcxDin_Sup", objMovCx)
                If lErro <> SUCESSO Then gError 118842
            
'            Case EXCLUSAO_SUPRIMENTO_DINHEIRO
'
'                lErro = CF("Back_Movcx_Excluir_MovcxDin_Sup", objMovCx)
'                If lErro <> SUCESSO Then gError 118843
            
        End Select
            
    End If
    
    Registro_Back_MovcxDin_Sup = SUCESSO

    Exit Function

Erro_Registro_Back_MovcxDin_Sup:

    Registro_Back_MovcxDin_Sup = gErr

    Select Case gErr

        Case 118841, 118842, 118843, 118939

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151197)

    End Select

    Exit Function

End Function

Function Back_MovcxDin_Sup_Movcx(iPosAtual As Integer, iPosFimAtual As Integer, sRegistro As String, ByVal objMovCx As ClassMovimentoCaixa) As Long
'guarda as infos de movimento de caixa

Dim lErro As Long

On Error GoTo Erro_Back_MovcxDin_Sup_Movcx

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.lNumMovto = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iCaixa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iCodOperador = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.lSequencial = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iTipo = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iAdmMeioPagto = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iParcelamento = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dtDataMovimento = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dValor = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iGerente = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dHora = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.lNumRefInterna = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    Back_MovcxDin_Sup_Movcx = SUCESSO

    Exit Function

Erro_Back_MovcxDin_Sup_Movcx:

    Back_MovcxDin_Sup_Movcx = gErr

    Select Case gErr

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151198)

    End Select

    Exit Function

End Function

Function Back_Movcx_Gravar_MovcxDin_Sup(ByVal objMovCx As ClassMovimentoCaixa) As Long
'gravar o movimento de caixa
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer
Dim objCCMovDia As New ClassCCMovDia
Dim objTipoMeioPagtoLojaFilial As New ClassTMPLojaFilial
Dim objLog As New ClassLog
Dim iTipo As Integer
Dim iCaixa As Integer
Dim lNumAuto As Long

On Error GoTo Erro_Back_Movcx_Gravar_MovcxDin_Sup

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 118844
    Next

    'insere novo registro na tabela de MovimentosCaixa referente a saida de dinheiro do caixa
    lErro = Comando_Executar(alComando(1), "INSERT INTO MovimentosCaixa(FilialEmpresa, NumMovto, Caixa, Operador, Sequencial, Tipo, AdmMeioPagto, Parcelamento, DataMovimento, Valor, Gerente, Hora, NumRefInterna) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", objMovCx.iFilialEmpresa, objMovCx.lNumMovto, objMovCx.iCaixa, objMovCx.iCodOperador, objMovCx.lSequencial, objMovCx.iTipo, objMovCx.iAdmMeioPagto, objMovCx.iParcelamento, objMovCx.dtDataMovimento, objMovCx.dValor, objMovCx.iGerente, objMovCx.dHora, objMovCx.lNumRefInterna)
    If lErro <> AD_SQL_SUCESSO Then gError 118845
    
    'preenche um objccmovdia com os dados do movimento de deposito no caixa central
    lErro = Mover_Dados_Deposito_CCMovDia(objMovCx, objCCMovDia)
    If lErro <> SUCESSO Then gError 118846

    objCCMovDia.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_DINHEIRO

    'adiciona o mesmo no consolidado diário
    lErro = CF("CCMovDia_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 118847

    'adiciona o mesmo no consolidado anual no mês em questão
    lErro = CF("CCMov_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 118848

    objTipoMeioPagtoLojaFilial.dSaldo = -objMovCx.dValor
    objTipoMeioPagtoLojaFilial.iFilialEmpresa = objMovCx.iFilialEmpresa

    'mover Meio_pagamento_Dineiro para objtipomeiopagtoloja.itipo
    objTipoMeioPagtoLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_DINHEIRO

    'altera o saldo atual na tabela de tipomeiopagtoloja
    lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTipoMeioPagtoLojaFilial)
    If lErro <> SUCESSO Then gError 118233

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Back_Movcx_Gravar_MovcxDin_Sup = SUCESSO

    Exit Function

Erro_Back_Movcx_Gravar_MovcxDin_Sup:

    Back_Movcx_Gravar_MovcxDin_Sup = gErr

    Select Case gErr

        Case 118844
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 118846 To 118848

        Case 118845
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MOVCAIXA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa, objMovCx.lSequencial)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151199)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

'Function Back_Movcx_Excluir_MovcxDin_Sup(ByVal objMovCx As ClassMovimentoCaixa) As Long
''Excluir o movimento de caixa
''IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO
'
'Dim lErro As Long
'Dim alComando(1 To 2) As Long
'Dim iIndice As Integer
'Dim objCCMovDia As New ClassCCMovDia
'Dim objTipoMeioPagtoLojaFilial As New ClassTMPLojaFilial
'Dim objLog As New ClassLog
'Dim iTipo As Integer
'Dim iCaixa As Integer
'Dim lNumAuto As Long
'Dim tMovCx As typeMovimentoCaixa
'
'On Error GoTo Erro_Back_Movcx_Excluir_MovcxDin_Sup
'
'    For iIndice = LBound(alComando) To UBound(alComando)
'        alComando(iIndice) = Comando_Abrir()
'        If alComando(iIndice) = 0 Then gError 118849
'    Next
'
'    'selecionar os registros da tabela de MovimentosCaixa referente a saida de dinheiro do caixa que está sendo excluida
'    lErro = Comando_ExecutarPos(alComando(1), "SELECT Tipo, AdmMeioPagto, Parcelamento, DataMovimento, NumIntDocLog, QuantLog  FROM MovimentosCaixa WHERE FilialEmpresa = ? AND Caixa = ? AND NumRefInterna = ? AND Tipo = ?  AND Valor = ?", 0, tMovCx.iTipo, tMovCx.iAdmMeioPagto, tMovCx.iParcelamento, tMovCx.dtDataMovimento, tMovCx.lNumIntDocLog, tMovCx.iQuantLog, objMovCx.iFilialEmpresa, objMovCx.iCaixa, objMovCx.lNumMovto, MOVIMENTOCAIXA_SUPRIMENTO_DINHEIRO, objMovCx.dValor)
'    If lErro <> AD_SQL_SUCESSO Then gError 118850
'
'    lErro = Comando_BuscarPrimeiro(alComando(1))
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118851
'
'    If lErro = AD_SQL_SEM_DADOS Then gError 118852
'
'    objMovCx.iTipo = tMovCx.iTipo
'    objMovCx.iAdmMeioPagto = tMovCx.iAdmMeioPagto
'    objMovCx.iParcelamento = tMovCx.iParcelamento
'    objMovCx.dtDataMovimento = tMovCx.dtDataMovimento
'
'    'preenche um objccmovdia com os dados do movimento de saque do caixa
'    lErro = Mover_Dados_Deposito_CCMovDia(objMovCx, objCCMovDia)
'    If lErro <> SUCESSO Then gError 118854
'
'    'subtrai o mesmo no consolidado diário
'    lErro = CF("CCMovDia_Exclui", objCCMovDia)
'    If lErro <> SUCESSO Then gError 118855
'
'    'subtrai o mesmo no consolidado anual no mês em questão
'    lErro = CF("CCMov_Exclui", objCCMovDia)
'    If lErro <> SUCESSO Then gError 118856
'
'    lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM MovimentosCaixa", alComando(1))
'    If lErro <> AD_SQL_SUCESSO Then gError 118857
'
'    For iIndice = LBound(alComando) To UBound(alComando)
'        Call Comando_Fechar(alComando(iIndice))
'    Next
'
'    Back_Movcx_Excluir_MovcxDin_Sup = SUCESSO
'
'    Exit Function
'
'Erro_Back_Movcx_Excluir_MovcxDin_Sup:
'
'    Back_Movcx_Excluir_MovcxDin_Sup = gErr
'
'    Select Case gErr
'
'        Case 118849
'            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
'
'        Case 118850, 118851
'            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVCAIXA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa, objMovCx.lSequencial)
'
'        Case 118852
'            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOCAIXA_NAO_CADASTRADO1", gErr)
'
'        Case 118854 To 118856
'
'        Case 118857
'            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_MOVIMENTOSCAIXA", gErr)
'
'        Case Else
'            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151200)
'
'    End Select
'
'    For iIndice = LBound(alComando) To UBound(alComando)
'        Call Comando_Fechar(alComando(iIndice))
'    Next
'
'    Exit Function
'
'End Function

Function Registro_Back_MovcxDin(ByVal colRegistro As Collection, sArquivo As String, lRegistro As Long) As Long
'Trata o registro de movimentacao de dinheiro e coloca os dados no bd do backoffice. sArquivo contem o nome do arquivo em que sRegistro foi lido.
'lRegistro é o numero do registro.

Dim iPosAtual As Integer
Dim iPosFimAtual As Integer
Dim objMovCx As New ClassMovimentoCaixa
Dim lErro As Long
Dim sRegistro As String

On Error GoTo Erro_Registro_Back_MovcxDin
    
    sRegistro = colRegistro.Item(1)
    
    iPosFimAtual = InStr(sRegistro, Chr(vbKeyEscape))

    'guarda as infos de movimento de caixa
    lErro = CF("Back_MovcxDin_Movcx", iPosAtual, iPosFimAtual, sRegistro, objMovCx)
    If lErro <> SUCESSO Then gError 118222
    
    lErro = Verifica_Existencia_Sequencial(objMovCx.lSequencial, objMovCx.iCaixa, objMovCx.iFilialEmpresa)
    If lErro <> SUCESSO And lErro <> 112627 Then gError 118934
    
    If lErro <> 112627 Then
        lErro = CF("Back_Movcx_Gravar_MovcxDin", objMovCx)
        If lErro <> SUCESSO Then gError 118223
    End If
    
    Registro_Back_MovcxDin = SUCESSO

    Exit Function

Erro_Registro_Back_MovcxDin:

    Registro_Back_MovcxDin = gErr

    Select Case gErr

        Case 118222, 118223, 118934

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151201)

    End Select

    Exit Function

End Function

Function Back_MovcxDin_Movcx(iPosAtual As Integer, iPosFimAtual As Integer, sRegistro As String, ByVal objMovCx As ClassMovimentoCaixa) As Long
'guarda as infos de movimento de caixa

Dim lErro As Long

On Error GoTo Erro_Back_MovcxDin_Movcx

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.lNumMovto = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iCaixa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iCodOperador = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.lSequencial = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iTipo = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iAdmMeioPagto = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iParcelamento = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dtDataMovimento = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dValor = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iGerente = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dHora = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.lNumRefInterna = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    Back_MovcxDin_Movcx = SUCESSO

    Exit Function

Erro_Back_MovcxDin_Movcx:

    Back_MovcxDin_Movcx = gErr

    Select Case gErr

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151202)

    End Select

    Exit Function

End Function

Function Back_Movcx_Gravar_MovcxDin(ByVal objMovCx As ClassMovimentoCaixa) As Long
'gravar o movimento de caixa
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer
Dim objCCMovDia As New ClassCCMovDia
Dim objTipoMeioPagtoLojaFilial As New ClassTMPLojaFilial
Dim objLog As New ClassLog
Dim iTipo As Integer
Dim iCaixa As Integer
Dim lNumAuto As Long
Dim lSeq As Long

On Error GoTo Erro_Back_Movcx_Gravar_MovcxDin

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 118224
    Next

    'insere novo registro na tabela de MovimentosCaixa referente a saida de dinheiro do caixa
    lErro = Comando_Executar(alComando(1), "INSERT INTO MovimentosCaixa(FilialEmpresa, NumMovto, Caixa, Operador, Sequencial, Tipo, AdmMeioPagto, Parcelamento, DataMovimento, Valor, Gerente, Hora, NumRefInterna) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", objMovCx.iFilialEmpresa, objMovCx.lNumMovto, objMovCx.iCaixa, objMovCx.iCodOperador, objMovCx.lSequencial, objMovCx.iTipo, objMovCx.iAdmMeioPagto, objMovCx.iParcelamento, objMovCx.dtDataMovimento, objMovCx.dValor, objMovCx.iGerente, objMovCx.dHora, objMovCx.lNumRefInterna)
    If lErro <> AD_SQL_SUCESSO Then gError 118225

    'preenche um objccmovdia com os dados do movimento de saque do caixa
    lErro = CF("Mover_Dados_Saque_CCMovDia", objMovCx, objCCMovDia)
    If lErro <> SUCESSO Then gError 118226

    objCCMovDia.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_DINHEIRO

    'adiciona o mesmo no consolidado diário
    lErro = CF("CCMovDia_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 118227

    'adiciona o mesmo no consolidado anual no mês em questão
    lErro = CF("CCMov_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 118228

    objMovCx.lNumRefInterna = objMovCx.lNumMovto
    objMovCx.iCaixa = CODIGO_CAIXA_CENTRAL
    objMovCx.lNumMovto = objMovCx.lNumMovto + 1
    objMovCx.iTipo = MOVIMENTOCAIXA_ENT_SANGRIA_DINHEIRO

    lErro = CF("Caixa_Sequencial_EmTrans", CODIGO_CAIXA_CENTRAL, objMovCx.iFilialEmpresa, lSeq)
    If lErro <> SUCESSO Then gError 126034

    objMovCx.lSequencial = lSeq

    'insere novo registro na tabela de MovimentosCaixa referente a entrada de dinheiro no caixa central
    lErro = Comando_Executar(alComando(1), "INSERT INTO MovimentosCaixa(FilialEmpresa, NumMovto, Caixa, Operador, Sequencial, Tipo, AdmMeioPagto, Parcelamento, DataMovimento, Valor, Gerente, Hora, NumRefInterna) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", objMovCx.iFilialEmpresa, objMovCx.lNumMovto, objMovCx.iCaixa, objMovCx.iCodOperador, objMovCx.lSequencial, objMovCx.iTipo, objMovCx.iAdmMeioPagto, objMovCx.iParcelamento, objMovCx.dtDataMovimento, objMovCx.dValor, objMovCx.iGerente, objMovCx.dHora, objMovCx.lNumRefInterna)
    If lErro <> AD_SQL_SUCESSO Then gError 118229
    
    Set objCCMovDia = New ClassCCMovDia
    
    'preenche um objccmovdia com os dados do movimento de deposito no caixa central
    lErro = Mover_Dados_Deposito_CCMovDia(objMovCx, objCCMovDia)
    If lErro <> SUCESSO Then gError 118230

    objCCMovDia.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_DINHEIRO

    'adiciona o mesmo no consolidado diário
    lErro = CF("CCMovDia_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 118231

    'adiciona o mesmo no consolidado anual no mês em questão
    lErro = CF("CCMov_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 118232

    objTipoMeioPagtoLojaFilial.dSaldo = objMovCx.dValor
    objTipoMeioPagtoLojaFilial.iFilialEmpresa = objMovCx.iFilialEmpresa

    'mover Meio_pagamento_Dineiro para objtipomeiopagtoloja.itipo
    objTipoMeioPagtoLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_DINHEIRO

    'altera o saldo atual na tabela de tipomeiopagtoloja
    lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTipoMeioPagtoLojaFilial)
    If lErro <> SUCESSO Then gError 118233

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Back_Movcx_Gravar_MovcxDin = SUCESSO

    Exit Function

Erro_Back_Movcx_Gravar_MovcxDin:

    Back_Movcx_Gravar_MovcxDin = gErr

    Select Case gErr

        Case 118224
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 118226, 118227, 118228, 118230 To 118233, 126034

        Case 118225, 118229
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MOVCAIXA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa, objMovCx.lSequencial)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151203)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Registro_Back_MovcxChq(ByVal colRegistro As Collection, sArquivo As String, lRegistro As Long) As Long
'Trata o registro de movimentacao de cheques e coloca os dados no bd do backoffice. sArquivo contem o nome do arquivo em que sRegistro foi lido.
'iRegistro é o numero do registro.

Dim iPosAtual As Integer
Dim iPosFimAtual As Integer
Dim objMovCx As New ClassMovimentoCaixa
Dim colCheque As New Collection
Dim sRegistro As String
Dim lErro As Long

On Error GoTo Erro_Registro_Back_MovcxChq

    sRegistro = colRegistro.Item(1)

    iPosFimAtual = InStr(sRegistro, Chr(vbKeyEscape))

    'guarda as infos de movimento de caixa
    lErro = CF("Back_MovcxChq_Movcx", iPosAtual, iPosFimAtual, sRegistro, objMovCx)
    If lErro <> SUCESSO Then gError 118234
    
    lErro = Verifica_Existencia_Sequencial(objMovCx.lSequencial, objMovCx.iCaixa, objMovCx.iFilialEmpresa)
    If lErro <> SUCESSO And lErro <> 112627 Then gError 118934
    
    If lErro <> 112627 Then
        'guarda as infos de cheque
        lErro = CF("Back_MovcxChq_Cheque", iPosAtual, iPosFimAtual, colRegistro, colCheque)
        If lErro <> SUCESSO Then gError 118235
    
        'guarda as infos de movimento de caixa relativos a sangria de cheque
        lErro = CF("Back_Movcx_Gravar_MovcxChq", objMovCx, colCheque)
        If lErro <> SUCESSO Then gError 118236
    End If
    
    Registro_Back_MovcxChq = SUCESSO

    Exit Function

Erro_Registro_Back_MovcxChq:

    Registro_Back_MovcxChq = gErr

    Select Case gErr

        Case 118234 To 118236, 118934

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151204)

    End Select

    Exit Function

End Function

Function Back_MovcxChq_Movcx(iPosAtual As Integer, iPosFimAtual As Integer, sRegistro As String, ByVal objMovCx As ClassMovimentoCaixa) As Long
'guarda as infos de movimento de caixa relativos a sangria de cheque

Dim lErro As Long

On Error GoTo Erro_Back_MovcxChq_Movcx


    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.lNumMovto = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iCaixa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iCodOperador = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))


    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.lSequencial = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iTipo = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iAdmMeioPagto = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iParcelamento = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dtDataMovimento = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dValor = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iGerente = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dHora = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.lNumRefInterna = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    Back_MovcxChq_Movcx = SUCESSO

    Exit Function

Erro_Back_MovcxChq_Movcx:

    Back_MovcxChq_Movcx = gErr

    Select Case gErr

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151205)

    End Select

    Exit Function

End Function

Function Back_MovcxChq_Cheque(iPosAtual As Integer, iPosFimAtual As Integer, colRegistro As Collection, colCheque As Collection) As Long
'guarda as infos de troca se houverem

Dim lErro As Long
Dim vRegistro As Variant

On Error GoTo Erro_Back_MovcxChq_Cheque

    For Each vRegistro In colRegistro

        Do While Mid(vRegistro, iPosFimAtual + 1, 1) <> Chr(vbKeyEnd) And iPosFimAtual + 1 <= Len(vRegistro)

            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, vRegistro, Chr(vbKeyShift))
            colCheque.Add CLng(Mid(vRegistro, iPosAtual, iPosFimAtual - iPosAtual))

        Loop

        iPosFimAtual = 0

    Next

    Back_MovcxChq_Cheque = SUCESSO

    Exit Function

Erro_Back_MovcxChq_Cheque:

    Back_MovcxChq_Cheque = gErr

    Select Case gErr

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151206)

    End Select

    Exit Function

End Function

Function Back_Movcx_Gravar_MovcxChq(ByVal objMovCx As ClassMovimentoCaixa, colCheque As Collection) As Long
'gravar os movimentos de caixa contidos na colecao.
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer
Dim objCCMovDia As New ClassCCMovDia
Dim objTipoMeioPagtoLojaFilial As New ClassTMPLojaFilial
Dim dValorEspecif As Double
Dim dValorNaoEspecif As Double
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim objLog As New ClassLog
Dim lSeq As Long

On Error GoTo Erro_Back_Movcx_Gravar_MovcxChq

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 118237
    Next

    'insere novo registro na tabela de MovimentosCaixa referente a saida de cheques do caixa
    lErro = Comando_Executar(alComando(1), "INSERT INTO MovimentosCaixa(FilialEmpresa, NumMovto, Caixa, Operador, Sequencial, Tipo, AdmMeioPagto, Parcelamento, DataMovimento, Valor, Gerente, Hora, NumRefInterna) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", objMovCx.iFilialEmpresa, objMovCx.lNumMovto, objMovCx.iCaixa, objMovCx.iCodOperador, objMovCx.lSequencial, objMovCx.iTipo, objMovCx.iAdmMeioPagto, objMovCx.iParcelamento, objMovCx.dtDataMovimento, objMovCx.dValor, objMovCx.iGerente, objMovCx.dHora, objMovCx.lNumRefInterna)
    If lErro <> AD_SQL_SUCESSO Then gError 118238

    'preenche um objccmovdia com os dados do movimento de saque do caixa
    lErro = CF("Mover_Dados_Saque_CCMovDia", objMovCx, objCCMovDia)
    If lErro <> SUCESSO Then gError 118239

    objCCMovDia.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_CHEQUE

    'adiciona o mesmo no consolidado diário
    lErro = CF("CCMovDia_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 118240

    'adiciona o mesmo no consolidado anual no mês em questão
    lErro = CF("CCMov_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 118241

    objMovCx.lNumRefInterna = objMovCx.lNumMovto
    objMovCx.iCaixa = CODIGO_CAIXA_CENTRAL
    objMovCx.lNumMovto = objMovCx.lNumMovto + 1
    objMovCx.iTipo = MOVIMENTOCAIXA_ENT_SANGRIA_CHEQUE

    lErro = CF("Caixa_Sequencial_EmTrans", CODIGO_CAIXA_CENTRAL, objMovCx.iFilialEmpresa, lSeq)
    If lErro <> SUCESSO Then gError 126036

    objMovCx.lSequencial = lSeq

    'insere novo registro na tabela de MovimentosCaixa referente a entrada de cheques no caixa central
    lErro = Comando_Executar(alComando(1), "INSERT INTO MovimentosCaixa(FilialEmpresa, NumMovto, Caixa, Operador, Sequencial, Tipo, AdmMeioPagto, Parcelamento, DataMovimento, Valor, Gerente, Hora, NumRefInterna) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", objMovCx.iFilialEmpresa, objMovCx.lNumMovto, objMovCx.iCaixa, objMovCx.iCodOperador, objMovCx.lSequencial, objMovCx.iTipo, objMovCx.iAdmMeioPagto, objMovCx.iParcelamento, objMovCx.dtDataMovimento, objMovCx.dValor, objMovCx.iGerente, objMovCx.dHora, objMovCx.lNumRefInterna)
    If lErro <> AD_SQL_SUCESSO Then gError 118242
    
    Set objCCMovDia = New ClassCCMovDia
    
    'preenche um objccmovdia com os dados do movimento de deposito no caixa central
    lErro = Mover_Dados_Deposito_CCMovDia(objMovCx, objCCMovDia)
    If lErro <> SUCESSO Then gError 118243

    objCCMovDia.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_CHEQUE

    'adiciona o mesmo no consolidado diário
    lErro = CF("CCMovDia_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 118244

    'adiciona o mesmo no consolidado anual no mês em questão
    lErro = CF("CCMov_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 118245

    'gravar os nummovcaixasangria nos cheque associados a sangria.
    lErro = CF("Back_Cheque_Gravar_MovcxChq", colCheque, objMovCx.iFilialEmpresa, objMovCx.lNumRefInterna, dValorNaoEspecif, dValorEspecif)
    If lErro <> SUCESSO Then gError 118246

    objTipoMeioPagtoLojaFilial.dSaldo = objMovCx.dValor
    objTipoMeioPagtoLojaFilial.iFilialEmpresa = objMovCx.iFilialEmpresa

    If dValorNaoEspecif <> 0 Then

        'Valor dos Cheques não Especificados
        objTipoMeioPagtoLojaFilial.dSaldo = dValorNaoEspecif
        objTipoMeioPagtoLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_CHEQUE
        objTipoMeioPagtoLojaFilial.iFilialEmpresa = objMovCx.iFilialEmpresa

        'Função que Serve para atualizar Saldo dos cheques nao especificados
        lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTipoMeioPagtoLojaFilial)
        If lErro <> SUCESSO Then gError 118247

    End If

    If dValorEspecif <> 0 Then

        'Mover Valor dos Cheques Especificados para admMeioPagtoCondPagto.Saldo
        objAdmMeioPagtoCondPagto.dSaldo = dValorEspecif

        'Vincula-se ao Meio_Pagamento_Cheque para o AdmMeioPagtoCondPagto.iAdmMeioPagto
        objAdmMeioPagtoCondPagto.iAdmMeioPagto = MEIO_PAGAMENTO_CHEQUE

        'Vincula-se ao Pagamento_Avista para o AdmMeioPagtoCondPagto.parcelamento
        objAdmMeioPagtoCondPagto.iParcelamento = PARCELAMENTO_AVISTA

        'Vincula-se FilialEmpresa a o Meio de Pagamento
        objAdmMeioPagtoCondPagto.iFilialEmpresa = objMovCx.iFilialEmpresa

        'Função para Alteração de Saldo
        lErro = CF("AdmMeioPagtoCondPagto_Altera_Saldo", objAdmMeioPagtoCondPagto)
        If lErro <> SUCESSO Then gError 118248

    End If

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Back_Movcx_Gravar_MovcxChq = SUCESSO

    Exit Function

Erro_Back_Movcx_Gravar_MovcxChq:

    Back_Movcx_Gravar_MovcxChq = gErr

    Select Case gErr

        Case 118237
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 118239 To 118241, 118243 To 118248, 126036

        Case 118238, 118242
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MOVCAIXA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa, objMovCx.lSequencial)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151207)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Back_Cheque_Gravar_MovcxChq(ByVal colCheque As Collection, ByVal iFilialEmpresa As Integer, ByVal lNumMovtoSangria As Long, dValorNaoEspecif As Double, dValorEspecif As Double) As Long
'gravar os nummovcaixasangria nos cheques associados a sangria e devolve o total dos cheques NaoEspecificados e Especificados sangrados.
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim vSequencialLoja As Variant
Dim dValor As Double
Dim iNaoEspecificado As Integer
Dim iIndice As Integer
Dim alComando(1 To 2) As Long
Dim lErro As Long

On Error GoTo Erro_Back_Cheque_Gravar_MovcxChq

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 118249
    Next

    For Each vSequencialLoja In colCheque

        'seleciona o cheque em questao
        lErro = Comando_ExecutarPos(alComando(1), "SELECT Valor, NaoEspecificado FROM ChequePre WHERE FilialEmpresaLoja = ? AND SequencialLoja = ?", 0, dValor, iNaoEspecificado, iFilialEmpresa, vSequencialLoja)
        If lErro <> AD_SQL_SUCESSO Then gError 118250

        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118251

        If lErro = AD_SQL_SEM_DADOS Then gError 118252

        'seleciona o cheque em questao
        lErro = Comando_ExecutarPos(alComando(2), "UPDATE ChequePre SET NumMovtoSangria = ?, Localizacao=?", alComando(1), lNumMovtoSangria, CHEQUEPRE_LOCALIZACAO_LOJA)
        If lErro <> AD_SQL_SUCESSO Then gError 118253

        If iNaoEspecificado = CHEQUE_ESPECIFICADO Then

            dValorEspecif = dValorEspecif + dValor

        Else

            dValorNaoEspecif = dValorNaoEspecif + dValor

        End If

    Next

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Back_Cheque_Gravar_MovcxChq = SUCESSO

    Exit Function

Erro_Back_Cheque_Gravar_MovcxChq:

    Back_Cheque_Gravar_MovcxChq = gErr

    Select Case gErr

        Case 118249
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 112250, 118251
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUEPRE_LOJA", gErr, vSequencialLoja, iFilialEmpresa)

        Case 118252
            Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPRE_NAOENCONTRADO", gErr, iFilialEmpresa, vSequencialLoja)
        
        Case 118253
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_CHEQUEPRE", gErr)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151208)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Registro_Back_MovcxBol(ByVal colRegistro As Collection, sArquivo As String, lRegistro As Long) As Long
'Trata o registro de movimentacao de boletos e coloca os dados no bd do backoffice. sArquivo contem o nome do arquivo em que sRegistro foi lido.
'iRegistro é o numero do registro.

Dim iPosAtual As Integer
Dim iPosFimAtual As Integer
Dim objMovCx As New ClassMovimentoCaixa
Dim lErro As Long
Dim sRegistro As String

On Error GoTo Erro_Registro_Back_MovcxBol
    
    sRegistro = colRegistro.Item(1)
    
    iPosFimAtual = InStr(sRegistro, Chr(vbKeyEscape))

    'guarda as infos de movimento de caixa
    lErro = CF("Back_MovcxBol_Movcx", iPosAtual, iPosFimAtual, sRegistro, objMovCx)
    If lErro <> SUCESSO Then gError 118254
    
    lErro = Verifica_Existencia_Sequencial(objMovCx.lSequencial, objMovCx.iCaixa, objMovCx.iFilialEmpresa)
    If lErro <> SUCESSO And lErro <> 112627 Then gError 118935
    
    If lErro <> 112627 Then
        'guarda as infos de movimento de caixa relativos a sangria de boleto
        lErro = CF("Back_Movcx_Gravar_MovcxBol", objMovCx)
        If lErro <> SUCESSO Then gError 118255
    End If
    
    Registro_Back_MovcxBol = SUCESSO

    Exit Function

Erro_Registro_Back_MovcxBol:

    Registro_Back_MovcxBol = gErr

    Select Case gErr

        Case 118254, 118255, 118935

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151209)

    End Select

    Exit Function

End Function

Function Back_MovcxBol_Movcx(iPosAtual As Integer, iPosFimAtual As Integer, sRegistro As String, ByVal objMovCx As ClassMovimentoCaixa) As Long
'guarda as infos de movimento de caixa relativos a sangria de boleto

Dim lErro As Long

On Error GoTo Erro_Back_MovcxBol_Movcx

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.lNumMovto = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iCaixa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iCodOperador = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.lSequencial = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iTipo = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iAdmMeioPagto = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iParcelamento = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dtDataMovimento = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dValor = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iGerente = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dHora = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iTipoCartao = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.lNumRefInterna = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    Back_MovcxBol_Movcx = SUCESSO

    Exit Function

Erro_Back_MovcxBol_Movcx:

    Back_MovcxBol_Movcx = gErr

    Select Case gErr

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151210)

    End Select

    Exit Function

End Function

Function Back_Movcx_Gravar_MovcxBol(ByVal objMovCx As ClassMovimentoCaixa) As Long
'gravar o movimento de caixa
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lErro As Long
Dim alComando(1 To 2) As Long
Dim iIndice As Integer
Dim objCCMovDia As New ClassCCMovDia
Dim objTipoMeioPagtoLojaFilial As New ClassTMPLojaFilial
Dim dValorEspecif As Double
Dim dValorNaoEspecif As Double
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim objLog As New ClassLog
Dim iTipoMeioPagto As Integer
Dim lSeq As Long

On Error GoTo Erro_Back_Movcx_Gravar_MovcxBol

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 118256
    Next

    'insere novo registro na tabela de MovimentosCaixa referente a saida de boleto do caixa
    lErro = Comando_Executar(alComando(1), "INSERT INTO MovimentosCaixa(FilialEmpresa, NumMovto, Caixa, Operador, Sequencial, Tipo, AdmMeioPagto, Parcelamento, TipoCartao, DataMovimento, Valor, Gerente, Hora, NumRefInterna) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)", objMovCx.iFilialEmpresa, objMovCx.lNumMovto, objMovCx.iCaixa, objMovCx.iCodOperador, objMovCx.lSequencial, objMovCx.iTipo, objMovCx.iAdmMeioPagto, objMovCx.iParcelamento, objMovCx.iTipoCartao, objMovCx.dtDataMovimento, objMovCx.dValor, objMovCx.iGerente, objMovCx.dHora, objMovCx.lNumRefInterna)
    If lErro <> AD_SQL_SUCESSO Then gError 118257

    'preenche um objccmovdia com os dados do movimento de saque do caixa
    lErro = CF("Mover_Dados_Saque_CCMovDia", objMovCx, objCCMovDia)
    If lErro <> SUCESSO Then gError 118258

    'seleciona registro na tabela de TiposMovtocaixa
    lErro = Comando_Executar(alComando(2), "SELECT TipoMeioPagto FROM TiposMovtoCaixa WHERE Codigo=?", iTipoMeioPagto, objMovCx.iTipo)
    If lErro <> AD_SQL_SUCESSO Then gError 115227

    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO Then gError 115228
    
    objCCMovDia.iTipoMeioPagto = iTipoMeioPagto

    'adiciona o mesmo no consolidado diário
    lErro = CF("CCMovDia_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 118259

    'adiciona o mesmo no consolidado anual no mês em questão
    lErro = CF("CCMov_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 118260

    objMovCx.lNumRefInterna = objMovCx.lNumMovto
    objMovCx.iCaixa = CODIGO_CAIXA_CENTRAL
    objMovCx.lNumMovto = objMovCx.lNumMovto + 1
    
    lErro = CF("Caixa_Sequencial_EmTrans", CODIGO_CAIXA_CENTRAL, objMovCx.iFilialEmpresa, lSeq)
    If lErro <> SUCESSO Then gError 126035

    objMovCx.lSequencial = lSeq
    
    'insere novo registro na tabela de MovimentosCaixa referente a entrada de boleto no caixa central
    lErro = Comando_Executar(alComando(1), "INSERT INTO MovimentosCaixa(FilialEmpresa, NumMovto, Caixa, Operador, Sequencial, Tipo, AdmMeioPagto, Parcelamento, TipoCartao, DataMovimento, Valor, Gerente, Hora, NumRefInterna) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)", objMovCx.iFilialEmpresa, objMovCx.lNumMovto, objMovCx.iCaixa, objMovCx.iCodOperador, objMovCx.lSequencial, MOVIMENTOCAIXA_ENT_SANGRIA_BOLETO, objMovCx.iAdmMeioPagto, objMovCx.iParcelamento, objMovCx.iTipoCartao, objMovCx.dtDataMovimento, objMovCx.dValor, objMovCx.iGerente, objMovCx.dHora, objMovCx.lNumRefInterna)
    If lErro <> AD_SQL_SUCESSO Then gError 118261
    
    Set objCCMovDia = New ClassCCMovDia
    
    'preenche um objccmovdia com os dados do movimento de deposito no caixa central
    lErro = Mover_Dados_Deposito_CCMovDia(objMovCx, objCCMovDia)
    If lErro <> SUCESSO Then gError 118262

    objCCMovDia.iTipoMeioPagto = iTipoMeioPagto

    'adiciona o mesmo no consolidado diário
    lErro = CF("CCMovDia_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 118263

    'adiciona o mesmo no consolidado anual no mês em questão
    lErro = CF("CCMov_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 118264

    objTipoMeioPagtoLojaFilial.dSaldo = objMovCx.dValor
    objTipoMeioPagtoLojaFilial.iFilialEmpresa = objMovCx.iFilialEmpresa

    'se for um movimento nao especificado
    If objMovCx.iAdmMeioPagto = 0 Then

        'Valor dos boletos não Especificados
        objTipoMeioPagtoLojaFilial.dSaldo = objMovCx.dValor
        objTipoMeioPagtoLojaFilial.iFilialEmpresa = objMovCx.iFilialEmpresa

        If objMovCx.iTipo = MOVIMENTOCAIXA_SANGRIA_BOLETO_CD Then
            objTipoMeioPagtoLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_CARTAO_DEBITO
        ElseIf objMovCx.iTipo = MOVIMENTOCAIXA_SANGRIA_BOLETO_CC Then
            objTipoMeioPagtoLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_CARTAO_CREDITO
        End If

        'Função que Serve para atualizar Saldo dos boletos nao especificados
        lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTipoMeioPagtoLojaFilial)
        If lErro <> SUCESSO Then gError 1118265

    Else

        'Mover Valor do boleto Especificado para admMeioPagtoCondPagto.Saldo
        objAdmMeioPagtoCondPagto.dSaldo = objMovCx.dValor
        objAdmMeioPagtoCondPagto.iAdmMeioPagto = objMovCx.iAdmMeioPagto
        objAdmMeioPagtoCondPagto.iParcelamento = objMovCx.iParcelamento
        objAdmMeioPagtoCondPagto.iFilialEmpresa = objMovCx.iFilialEmpresa

        'Função para Alteração de Saldo
        lErro = CF("AdmMeioPagtoCondPagto_Altera_Saldo", objAdmMeioPagtoCondPagto)
        If lErro <> SUCESSO Then gError 118266

    End If

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Back_Movcx_Gravar_MovcxBol = SUCESSO

    Exit Function

Erro_Back_Movcx_Gravar_MovcxBol:

    Back_Movcx_Gravar_MovcxBol = gErr

    Select Case gErr

        Case 115227, 115228
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOSMOVTOCAIXA1", gErr, objMovCx.iTipo)

        Case 118256
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 118258 To 118260, 118262 To 118266, 126035

        Case 118257, 118261
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MOVCAIXA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa, objMovCx.lSequencial)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151211)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Registro_Back_MovcxTkt(ByVal colRegistro As Collection, sArquivo As String, lRegistro As Long) As Long
'Trata o registro de movimentacao de ticket e coloca os dados no bd do backoffice. sArquivo contem o nome do arquivo em que sRegistro foi lido.
'iRegistro é o numero do registro.

Dim iPosAtual As Integer
Dim iPosFimAtual As Integer
Dim objMovCx As New ClassMovimentoCaixa
Dim lErro As Long
Dim sRegistro As String

On Error GoTo Erro_Registro_Back_MovcxTkt
    
    sRegistro = colRegistro.Item(1)
    
    iPosFimAtual = InStr(sRegistro, Chr(vbKeyEscape))

    'guarda as infos de movimento de caixa
    lErro = CF("Back_MovcxTkt_Movcx", iPosAtual, iPosFimAtual, sRegistro, objMovCx)
    If lErro <> SUCESSO Then gError 118267
    
    lErro = Verifica_Existencia_Sequencial(objMovCx.lSequencial, objMovCx.iCaixa, objMovCx.iFilialEmpresa)
    If lErro <> SUCESSO And lErro <> 112627 Then gError 118936
    
    If lErro <> 112627 Then
        'guarda as infos de movimento de caixa relativos a sangria de ticket
        lErro = CF("Back_Movcx_Gravar_MovcxTkt", objMovCx)
        If lErro <> SUCESSO Then gError 118268
    End If
    
    Registro_Back_MovcxTkt = SUCESSO

    Exit Function

Erro_Registro_Back_MovcxTkt:

    Registro_Back_MovcxTkt = gErr

    Select Case gErr

        Case 118267, 118268, 118936

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151212)

    End Select

    Exit Function

End Function

Function Back_MovcxTkt_Movcx(iPosAtual As Integer, iPosFimAtual As Integer, sRegistro As String, ByVal objMovCx As ClassMovimentoCaixa) As Long
'guarda as infos de movimento de caixa relativos a sangria de ticket

Dim lErro As Long

On Error GoTo Erro_Back_MovcxTkt_Movcx

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.lNumMovto = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iCaixa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iCodOperador = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.lSequencial = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iTipo = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iAdmMeioPagto = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iParcelamento = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dtDataMovimento = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dValor = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iGerente = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dHora = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.lNumRefInterna = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    Back_MovcxTkt_Movcx = SUCESSO

    Exit Function

Erro_Back_MovcxTkt_Movcx:

    Back_MovcxTkt_Movcx = gErr

    Select Case gErr

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151213)

    End Select

    Exit Function

End Function

Function Back_Movcx_Gravar_MovcxTkt(ByVal objMovCx As ClassMovimentoCaixa) As Long
'gravar o movimento de caixa
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer
Dim objCCMovDia As New ClassCCMovDia
Dim objTipoMeioPagtoLojaFilial As New ClassTMPLojaFilial
Dim dValorEspecif As Double
Dim dValorNaoEspecif As Double
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim objLog As New ClassLog
Dim lSeq As Long

On Error GoTo Erro_Back_Movcx_Gravar_MovcxTkt

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 118269
    Next


    'insere novo registro na tabela de MovimentosCaixa referente a saida de ticket do caixa
    lErro = Comando_Executar(alComando(1), "INSERT INTO MovimentosCaixa(FilialEmpresa, NumMovto, Caixa, Operador, Sequencial, Tipo, AdmMeioPagto, Parcelamento, DataMovimento, Valor, Gerente, Hora, NumRefInterna) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", objMovCx.iFilialEmpresa, objMovCx.lNumMovto, objMovCx.iCaixa, objMovCx.iCodOperador, objMovCx.lSequencial, objMovCx.iTipo, objMovCx.iAdmMeioPagto, objMovCx.iParcelamento, objMovCx.dtDataMovimento, objMovCx.dValor, objMovCx.iGerente, objMovCx.dHora, objMovCx.lNumRefInterna)
    If lErro <> AD_SQL_SUCESSO Then gError 118270

    'preenche um objccmovdia com os dados do movimento de saque do caixa
    lErro = CF("Mover_Dados_Saque_CCMovDia", objMovCx, objCCMovDia)
    If lErro <> SUCESSO Then gError 118271

    objCCMovDia.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_VALE_TICKET

    'adiciona o mesmo no consolidado diário
    lErro = CF("CCMovDia_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 118272

    'adiciona o mesmo no consolidado anual no mês em questão
    lErro = CF("CCMov_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 118273

    objMovCx.lNumRefInterna = objMovCx.lNumMovto
    objMovCx.iCaixa = CODIGO_CAIXA_CENTRAL
    objMovCx.lNumMovto = objMovCx.lNumMovto + 1
    objMovCx.iTipo = MOVIMENTOCAIXA_ENT_SANGRIA_TICKET

    lErro = CF("Caixa_Sequencial_EmTrans", CODIGO_CAIXA_CENTRAL, objMovCx.iFilialEmpresa, lSeq)
    If lErro <> SUCESSO Then gError 126038

    objMovCx.lSequencial = lSeq

    'insere novo registro na tabela de MovimentosCaixa referente a entrada de ticket no caixa central
    lErro = Comando_Executar(alComando(1), "INSERT INTO MovimentosCaixa(FilialEmpresa, NumMovto, Caixa, Operador, Sequencial, Tipo, AdmMeioPagto, Parcelamento, DataMovimento, Valor, Gerente, Hora, NumRefInterna) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", objMovCx.iFilialEmpresa, objMovCx.lNumMovto, objMovCx.iCaixa, objMovCx.iCodOperador, objMovCx.lSequencial, objMovCx.iTipo, objMovCx.iAdmMeioPagto, objMovCx.iParcelamento, objMovCx.dtDataMovimento, objMovCx.dValor, objMovCx.iGerente, objMovCx.dHora, objMovCx.lNumRefInterna)
    If lErro <> AD_SQL_SUCESSO Then gError 118274
    
    Set objCCMovDia = New ClassCCMovDia
    
    'preenche um objccmovdia com os dados do movimento de deposito no caixa central
    lErro = Mover_Dados_Deposito_CCMovDia(objMovCx, objCCMovDia)
    If lErro <> SUCESSO Then gError 118275

    objCCMovDia.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_VALE_TICKET

    'adiciona o mesmo no consolidado diário
    lErro = CF("CCMovDia_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 118276

    'adiciona o mesmo no consolidado anual no mês em questão
    lErro = CF("CCMov_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 118277

    'se for um movimento nao especificado
    If objMovCx.iAdmMeioPagto = 0 Then

        'Valor dos Tickets não Especificados
        objTipoMeioPagtoLojaFilial.dSaldo = objMovCx.dValor
        objTipoMeioPagtoLojaFilial.iFilialEmpresa = objMovCx.iFilialEmpresa
        objTipoMeioPagtoLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_VALE_TICKET

        'Função que Serve para atualizar Saldo dos tickets nao especificados
        lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTipoMeioPagtoLojaFilial)
        If lErro <> SUCESSO Then gError 118278

    Else

        'Mover Valor do Ticket Especificado para admMeioPagtoCondPagto.Saldo
        objAdmMeioPagtoCondPagto.dSaldo = objMovCx.dValor
        objAdmMeioPagtoCondPagto.iAdmMeioPagto = objMovCx.iAdmMeioPagto
        objAdmMeioPagtoCondPagto.iParcelamento = objMovCx.iParcelamento
        objAdmMeioPagtoCondPagto.iFilialEmpresa = objMovCx.iFilialEmpresa

        'Função para Alteração de Saldo
        lErro = CF("AdmMeioPagtoCondPagto_Altera_Saldo", objAdmMeioPagtoCondPagto)
        If lErro <> SUCESSO Then gError 118279

    End If

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Back_Movcx_Gravar_MovcxTkt = SUCESSO

    Exit Function

Erro_Back_Movcx_Gravar_MovcxTkt:

    Back_Movcx_Gravar_MovcxTkt = gErr

    Select Case gErr

        Case 118269
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 118271 To 118273, 118275, 118279, 126038

        Case 118270, 118274
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MOVCAIXA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa, objMovCx.lSequencial)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151214)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Registro_Back_Movcx(ByVal colRegistro As Collection, ByVal sArquivo As String, ByVal lRegistro As Long, ByVal iOperacao As Integer) As Long
'Trata o registro de movimentacao de caixa e coloca os dados no bd do backoffice. sArquivo contem o nome do arquivo em que sRegistro foi lido.
'iRegistro é o numero do registro.

Dim iPosAtual As Integer
Dim iPosFimAtual As Integer
Dim objMovCx As New ClassMovimentoCaixa
Dim lErro As Long
Dim sRegistro As String
Dim objLojaArqFisMestre As New ClassLojaArqFisMestre
Dim colLojaArqFisAnalitico As New Collection
Dim objUltimaReducao As New ClassUltimaReducao

On Error GoTo Erro_Registro_Back_Movcx
    
    sRegistro = colRegistro.Item(1)
    
    iPosFimAtual = InStr(sRegistro, Chr(vbKeyEscape))

    'guarda as infos de movimento de caixa
    lErro = CF("Back_Movcx_Movcx", iPosAtual, iPosFimAtual, sRegistro, objMovCx, iOperacao, objLojaArqFisMestre, colLojaArqFisAnalitico, objUltimaReducao)
    If lErro <> SUCESSO Then gError 118280
    
    lErro = Verifica_Existencia_Sequencial(objMovCx.lSequencial, objMovCx.iCaixa, objMovCx.iFilialEmpresa)
    If lErro <> SUCESSO And lErro <> 112627 Then gError 118937
    
    If lErro <> 112627 Then
    
        Select Case iOperacao
    
            Case ABERTURA_CAIXA
    
                'guarda as infos de movimento de caixa relativos a abertura de caixa
                lErro = CF("Back_Movcx_Gravar_AbtCx", objMovCx)
                If lErro <> SUCESSO Then gError 118281
    
            Case FECHAMENTO_CAIXA
    
                'guarda as infos de movimento de caixa relativos ao fechamento de caixa
                lErro = CF("Back_Movcx_Gravar_FchCx", objMovCx, objLojaArqFisMestre, colLojaArqFisAnalitico, objUltimaReducao)
                If lErro <> SUCESSO Then gError 118282
    
            Case LEITURA_X, REDUCAO_Z, LEITURA_MEMORIA_FISCAL
    
                'guarda as infos de movimento de caixa
                lErro = CF("Back_Movcx_Gravar_Movcx", objMovCx)
                If lErro <> SUCESSO Then gError 118283
                
            Case ABERTURA_SESSAO
    
                'guarda as infos de movimento de caixa relativos à abertura de sessao
                lErro = CF("Back_Movcx_Gravar_AbtSessao", objMovCx)
                If lErro <> SUCESSO Then gError 118284
    
            Case SUSPENSAO_SESSAO
    
                'guarda as infos de movimento de caixa relativos à suspensao de sessao
                lErro = CF("Back_Movcx_Gravar_SuspSessao", objMovCx)
                If lErro <> SUCESSO Then gError 118285
    
            Case FECHAMENTO_SESSAO
    
                'guarda as infos de movimento de caixa relativos à abertura de sessao
                lErro = CF("Back_Movcx_Gravar_FchSessao", objMovCx)
                If lErro <> SUCESSO Then gError 118286
    
        End Select
    End If
    
    Registro_Back_Movcx = SUCESSO

    Exit Function

Erro_Registro_Back_Movcx:

    Registro_Back_Movcx = gErr

    Select Case gErr

        Case 118280 To 118286, 118937

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151215)

    End Select

    Exit Function

End Function

Function Back_Movcx_Movcx(iPosAtual As Integer, iPosFimAtual As Integer, sRegistro As String, ByVal objMovCx As ClassMovimentoCaixa, ByVal iOperacao As Integer, ByVal objLojaArqFisMestre As ClassLojaArqFisMestre, ByVal colLojaArqFisAnalitico As Collection, ByVal objUltimaReducao As ClassUltimaReducao) As Long
'guarda as infos de movimento de caixa relativos a operacoes de caixa (abertura/fechamento/etc)

Dim lErro As Long
Dim objLojaArqFisAnalitico As ClassLojaArqFisAnalitico
Dim objAliquota As ClassAliquotaICMS

On Error GoTo Erro_Back_Movcx_Movcx

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.lNumMovto = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iCaixa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iCodOperador = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.lSequencial = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iTipo = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dtDataMovimento = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iGerente = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dHora = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.lNumRefInterna = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    If iOperacao = FECHAMENTO_CAIXA Then

        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objLojaArqFisMestre.iCodECF = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objLojaArqFisMestre.sNumSerieECF = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)
        
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objLojaArqFisMestre.lCOOFim = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objLojaArqFisMestre.lCOOIni = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objLojaArqFisMestre.dGrandeTotal = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objLojaArqFisMestre.lCRZ = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objLojaArqFisMestre.lCRO = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objLojaArqFisMestre.dVendaBruta = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objLojaArqFisMestre.dtData = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objLojaArqFisMestre.iNumEquip = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
        objLojaArqFisMestre.iFilialEmpresa = objMovCx.iFilialEmpresa
        
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        
        Do While iPosFimAtual <> 0
        
            Set objLojaArqFisAnalitico = New ClassLojaArqFisAnalitico
        
            objLojaArqFisAnalitico.sSituacaoTrib = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)
            
            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            
            objLojaArqFisAnalitico.dTotalizador = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        
            colLojaArqFisAnalitico.Add objLojaArqFisAnalitico
        
        Loop
        
        
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
        objUltimaReducao.dAcrescimoICMS = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
        
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
        objUltimaReducao.dAcrescimoISS = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
        
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
        objUltimaReducao.dAcrescimoNaoFiscal = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
        objUltimaReducao.dCancelamentoICMS = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
        objUltimaReducao.dCancelamentoISS = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
        objUltimaReducao.dCancelamentoNaoFiscal = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
        objUltimaReducao.dDescontoICMS = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
        objUltimaReducao.dDescontoISS = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
        objUltimaReducao.dDescontoNaoFiscal = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
        objUltimaReducao.dIsentoICMS = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
        objUltimaReducao.dIsentoISS = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
        objUltimaReducao.dNaoIncideICMS = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
        objUltimaReducao.dNaoIncideISS = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
        objUltimaReducao.dSubstTribICMS = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
        objUltimaReducao.dSubstTribISS = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
        objUltimaReducao.dTotalNaoFiscal = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
        objUltimaReducao.dtDataReducao = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
        objUltimaReducao.dVendaBruta = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
        objUltimaReducao.sIncidenciaDescontoISS = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)
        
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
        objUltimaReducao.sHoraReducao = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)
        
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
        objUltimaReducao.dtDataMovimento = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
        
        Do While iPosFimAtual <> 0
        
            Set objAliquota = New ClassAliquotaICMS
        
            'formato 18,00 ou 12,00
            objAliquota.dAliquota = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
            
            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
            
            objAliquota.iISS = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
            
            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
        
            objAliquota.dValorTotalizadoLoja = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
            
            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyShift))
        
            objUltimaReducao.colAliquotas.Add objAliquota
        
        Loop
        
    End If

    Back_Movcx_Movcx = SUCESSO

    Exit Function

Erro_Back_Movcx_Movcx:

    Back_Movcx_Movcx = gErr

    Select Case gErr

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151216)

    End Select

    Exit Function

End Function

Function Back_Movcx_Gravar_AbtCx(ByVal objMovCx As ClassMovimentoCaixa) As Long
'gravar o movimento de caixa
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lErro As Long
Dim alComando(1 To 3) As Long
Dim iIndice As Integer
Dim objLog As New ClassLog
Dim lCodCaixa As Long

On Error GoTo Erro_Back_Movcx_Gravar_AbtCx

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 118287
    Next

    'insere novo registro na tabela de MovimentosCaixa referente a saida outros do caixa
    lErro = Comando_Executar(alComando(1), "INSERT INTO MovimentosCaixa(FilialEmpresa, NumMovto, Caixa, Operador, Sequencial, Tipo, DataMovimento, Gerente, Hora) VALUES (?,?,?,?,?,?,?,?,?)", objMovCx.iFilialEmpresa, objMovCx.lNumMovto, objMovCx.iCaixa, objMovCx.iCodOperador, objMovCx.lSequencial, objMovCx.iTipo, objMovCx.dtDataMovimento, objMovCx.iGerente, objMovCx.dHora)
    If lErro <> AD_SQL_SUCESSO Then gError 118288

    'selecionar os registros da tabela de MovimentosCaixa referente a saida de ticket do caixa que está sendo excluida
    lErro = Comando_ExecutarPos(alComando(2), "SELECT Codigo FROM Caixa WHERE FilialEmpresa = ? AND Codigo = ?", 0, lCodCaixa, objMovCx.iFilialEmpresa, objMovCx.iCaixa)
    If lErro <> AD_SQL_SUCESSO Then gError 118289

    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118290

    If lErro = AD_SQL_SEM_DADOS Then gError 118291

    lErro = Comando_ExecutarPos(alComando(3), "UPDATE Caixa SET Status = ?", alComando(2), STATUS_CAIXA_ABERTO)
    If lErro <> AD_SQL_SUCESSO Then gError 118292

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Back_Movcx_Gravar_AbtCx = SUCESSO

    Exit Function

Erro_Back_Movcx_Gravar_AbtCx:

    Back_Movcx_Gravar_AbtCx = gErr

    Select Case gErr

        Case 118287
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 118288
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MOVCAIXA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa, objMovCx.lSequencial)

        Case 118289, 118290
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CAIXA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa)

        Case 118291
            Call Rotina_Erro(vbOKOnly, "ERRO_CAIXA_NAO_CADASTRADO", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa)

        Case 118292
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_CAIXA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151217)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Back_Movcx_Gravar_FchCx(ByVal objMovCx As ClassMovimentoCaixa, ByVal objLojaArqFisMestre As ClassLojaArqFisMestre, ByVal colLojaArqFisAnalitico As Collection, ByVal objUltimaReducao As ClassUltimaReducao) As Long
'gravar o movimento de caixa
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lErro As Long
Dim alComando(1 To 9) As Long
Dim iIndice As Integer
Dim objLog As New ClassLog
Dim lCodCaixa As Long
Dim lCOOIni As Long
Dim objLojaArqFisAnalitico As ClassLojaArqFisAnalitico
Dim objAliquota As ClassAliquotaICMS

On Error GoTo Erro_Back_Movcx_Gravar_FchCx

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 118293
    Next

    'insere novo registro na tabela de MovimentosCaixa referente ao fechamento do caixa
    lErro = Comando_Executar(alComando(1), "INSERT INTO MovimentosCaixa(FilialEmpresa, NumMovto, Caixa, Operador, Sequencial, Tipo, DataMovimento, Gerente, Hora) VALUES (?,?,?,?,?,?,?,?,?)", objMovCx.iFilialEmpresa, objMovCx.lNumMovto, objMovCx.iCaixa, objMovCx.iCodOperador, objMovCx.lSequencial, objMovCx.iTipo, objMovCx.dtDataMovimento, objMovCx.iGerente, objMovCx.dHora)
    If lErro <> AD_SQL_SUCESSO Then gError 118294

    'selecionar o registro da tabela de Caixa
    lErro = Comando_ExecutarPos(alComando(2), "SELECT Codigo FROM Caixa WHERE FilialEmpresa = ? AND Codigo = ?", 0, lCodCaixa, objMovCx.iFilialEmpresa, objMovCx.iCaixa)
    If lErro <> AD_SQL_SUCESSO Then gError 118295

    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118296

    If lErro = AD_SQL_SEM_DADOS Then gError 118297
    
    'atualizar o status do caixa para fechado
    lErro = Comando_ExecutarPos(alComando(3), "UPDATE Caixa SET Status = ?", alComando(2), STATUS_CAIXA_FECHADO)
    If lErro <> AD_SQL_SUCESSO Then gError 118298

    'insere novo registro na tabela de MovimentosCaixa referente a saida outros do caixa
    lErro = Comando_Executar(alComando(5), "INSERT INTO LojaArqFisMestre (CodECF, FilialEmpresa, Data, NumSerieECF, COOIni, COOFim, CRZ, GrandeTotal, CRO, VendaBruta, NumEquip ) VALUES (?,?,?,?,?,?,?,?,?,?,?)", objLojaArqFisMestre.iCodECF, objLojaArqFisMestre.iFilialEmpresa, objLojaArqFisMestre.dtData, objLojaArqFisMestre.sNumSerieECF, objLojaArqFisMestre.lCOOIni, objLojaArqFisMestre.lCOOFim, objLojaArqFisMestre.lCRZ, objLojaArqFisMestre.dGrandeTotal, objLojaArqFisMestre.lCRO, objLojaArqFisMestre.dVendaBruta, objLojaArqFisMestre.iNumEquip)
    If lErro <> AD_SQL_SUCESSO Then gError 105974

    For Each objLojaArqFisAnalitico In colLojaArqFisAnalitico
    
        'insere novo registro em LojaArqFisAnalitico para cada aliquota
        lErro = Comando_Executar(alComando(6), "INSERT INTO LojaArqFisAnalitico (CodECF, FilialEmpresa, Data, SituacaoTrib, Totalizador ) VALUES (?,?,?,?,?)", objLojaArqFisMestre.iCodECF, objLojaArqFisMestre.iFilialEmpresa, objLojaArqFisMestre.dtData, objLojaArqFisAnalitico.sSituacaoTrib, objLojaArqFisAnalitico.dTotalizador)
        If lErro <> AD_SQL_SUCESSO Then gError 133668
    
    Next

    'insere novo registro em LojaReducao
    lErro = Comando_Executar(alComando(8), "INSERT INTO LojaReducao (CodECF, FilialEmpresa, DataMovimento,  AcrescimoICMS, AcrescimoISS, AcrescimoNaoFiscal, CancelamentoICMS, CancelamentoISS, CancelamentoNaoFiscal, DescontoICMS, DescontoISS, DescontoNaoFiscal, IsentoICMS, IsentoISS, NaoIncideICMS, NaoIncideISS, SubstTribICMS, SubstTribISS, TotalNaoFiscal, VendaBruta, IncideDescontoISS, HoraReducao, DataReducao) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
    objLojaArqFisMestre.iCodECF, objLojaArqFisMestre.iFilialEmpresa, objUltimaReducao.dtDataMovimento, objUltimaReducao.dAcrescimoICMS, objUltimaReducao.dAcrescimoISS, objUltimaReducao.dAcrescimoNaoFiscal, objUltimaReducao.dCancelamentoICMS, objUltimaReducao.dCancelamentoISS, objUltimaReducao.dCancelamentoNaoFiscal, objUltimaReducao.dDescontoICMS, objUltimaReducao.dDescontoISS, objUltimaReducao.dDescontoNaoFiscal, objUltimaReducao.dIsentoICMS, objUltimaReducao.dIsentoISS, objUltimaReducao.dNaoIncideICMS, _
    objUltimaReducao.dNaoIncideISS, objUltimaReducao.dSubstTribICMS, objUltimaReducao.dSubstTribISS, objUltimaReducao.dTotalNaoFiscal, objUltimaReducao.dVendaBruta, objUltimaReducao.sIncidenciaDescontoISS, CDbl(objUltimaReducao.sHoraReducao), objUltimaReducao.dtDataReducao)
    If lErro <> AD_SQL_SUCESSO Then gError 204524

    For Each objAliquota In objUltimaReducao.colAliquotas
    
        'insere novo registro em LojaReducaoAliquota para cada aliquota
        lErro = Comando_Executar(alComando(9), "INSERT INTO LojaReducaoAliquota (CodECF, FilialEmpresa, Data, Aliquota, ISS, Totalizador ) VALUES (?,?,?,?,?,?)", objLojaArqFisMestre.iCodECF, objLojaArqFisMestre.iFilialEmpresa, objLojaArqFisMestre.dtData, objAliquota.dAliquota, objAliquota.iISS, objAliquota.dValorTotalizadoLoja)
        If lErro <> AD_SQL_SUCESSO Then gError 204525
    
    Next


    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Back_Movcx_Gravar_FchCx = SUCESSO

    Exit Function

Erro_Back_Movcx_Gravar_FchCx:

    Back_Movcx_Gravar_FchCx = gErr

    Select Case gErr

        Case 105972, 105973
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_LOJAARQFISMESTRE", gErr, objLojaArqFisMestre.iFilialEmpresa, objLojaArqFisMestre.iCodECF, objLojaArqFisMestre.dtData)

        Case 105973
            Call Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_LOJAARQFISMESTRE", gErr, objLojaArqFisMestre.iFilialEmpresa, objLojaArqFisMestre.iCodECF, objLojaArqFisMestre.dtData)

        Case 105974
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_LOJAARQFISMESTRE", gErr, objLojaArqFisMestre.iFilialEmpresa, objLojaArqFisMestre.iCodECF, objLojaArqFisMestre.dtData)

        Case 118293
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 118294
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MOVCAIXA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa, objMovCx.lSequencial)

        Case 118295, 118296
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CAIXA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa)

        Case 118297
            Call Rotina_Erro(vbOKOnly, "ERRO_CAIXA_NAO_CADASTRADO", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa)

        Case 118298
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_CAIXA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa)

        Case 133668
            Call Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_LOJAARQFISANALITICO", gErr, objLojaArqFisMestre.iFilialEmpresa, objLojaArqFisMestre.iCodECF, objLojaArqFisMestre.dtData, objLojaArqFisAnalitico.sSituacaoTrib)

        Case 204524, 204525
            Call Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_LOJAREDUCAO", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151218)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Back_Movcx_Gravar_Movcx(ByVal objMovCx As ClassMovimentoCaixa) As Long
'gravar o movimento de caixa
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer
Dim objLog As New ClassLog

On Error GoTo Erro_Back_Movcx_Gravar_Movcx

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 118299
    Next

    'insere novo registro na tabela de MovimentosCaixa referente a saida outros do caixa
    lErro = Comando_Executar(alComando(1), "INSERT INTO MovimentosCaixa(FilialEmpresa, NumMovto, Caixa, Operador, Sequencial, Tipo, DataMovimento, Gerente, Hora) VALUES (?,?,?,?,?,?,?,?,?)", objMovCx.iFilialEmpresa, objMovCx.lNumMovto, objMovCx.iCaixa, objMovCx.iCodOperador, objMovCx.lSequencial, objMovCx.iTipo, objMovCx.dtDataMovimento, objMovCx.iGerente, objMovCx.dHora)
    If lErro <> AD_SQL_SUCESSO Then gError 118300

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Back_Movcx_Gravar_Movcx = SUCESSO

    Exit Function

Erro_Back_Movcx_Gravar_Movcx:

    Back_Movcx_Gravar_Movcx = gErr

    Select Case gErr

        Case 118299
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 118300
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MOVCAIXA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa, objMovCx.lSequencial)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151219)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Back_Movcx_Gravar_AbtSessao(ByVal objMovCx As ClassMovimentoCaixa) As Long
'gravar o movimento de caixa referente a abertura de sessao
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lErro As Long
Dim alComando(1 To 3) As Long
Dim iIndice As Integer
Dim objLog As New ClassLog
Dim lNumAuto As Long
Dim iCodCaixa As Integer

On Error GoTo Erro_Back_Movcx_Gravar_AbtSessao

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 118301
    Next

    'insere novo registro na tabela de MovimentosCaixa referente a saida outros do caixa
    lErro = Comando_Executar(alComando(1), "INSERT INTO MovimentosCaixa(FilialEmpresa, NumMovto, Caixa, Operador, Sequencial, Tipo, DataMovimento, Gerente, Hora) VALUES (?,?,?,?,?,?,?,?,?)", objMovCx.iFilialEmpresa, objMovCx.lNumMovto, objMovCx.iCaixa, objMovCx.iCodOperador, objMovCx.lSequencial, objMovCx.iTipo, objMovCx.dtDataMovimento, objMovCx.iGerente, objMovCx.dHora)
    If lErro <> AD_SQL_SUCESSO Then gError 118302
    
    'insere novo registro na tabela de Sessao
    lErro = Comando_ExecutarPos(alComando(2), "SELECT Codigo FROM Caixa WHERE FilialEmpresa = ? AND Codigo = ?", 0, iCodCaixa, objMovCx.iFilialEmpresa, objMovCx.iCaixa)
    If lErro <> AD_SQL_SUCESSO Then gError 133541

    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 133542
    
    If lErro = AD_SQL_SEM_DADOS Then gError 133543
    
    'insere novo registro na tabela de MovimentosCaixa
    lErro = Comando_ExecutarPos(alComando(3), "UPDATE Caixa SET UltimoOperador = ?, SessaoStatus = ?", alComando(2), objMovCx.iCodOperador, SESSAO_ABERTA)
    If lErro <> AD_SQL_SUCESSO Then gError 133544

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Back_Movcx_Gravar_AbtSessao = SUCESSO

    Exit Function

Erro_Back_Movcx_Gravar_AbtSessao:

    Back_Movcx_Gravar_AbtSessao = gErr

    Select Case gErr

        Case 118301
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 118302
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MOVCAIXA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa, objMovCx.lSequencial)

        Case 118304
        
        Case 133541, 133542
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CAIXA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa)

        Case 133543
            Call Rotina_Erro(vbOKOnly, "ERRO_CAIXA_NAO_CADASTRADO", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa)

        Case 133544
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_CAIXA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151220)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Back_Movcx_Gravar_SuspSessao(ByVal objMovCx As ClassMovimentoCaixa) As Long
'gravar o movimento de caixa referente a suspensao de sessao
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lErro As Long
Dim alComando(1 To 3) As Long
Dim iIndice As Integer
Dim objLog As New ClassLog
Dim lNumInt As Long
Dim iCodCaixa As Integer

On Error GoTo Erro_Back_Movcx_Gravar_SuspSessao

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 118305
    Next

    'insere novo registro na tabela de MovimentosCaixa referente a saida outros do caixa
    lErro = Comando_Executar(alComando(1), "INSERT INTO MovimentosCaixa(FilialEmpresa, NumMovto, Caixa, Operador, Sequencial, Tipo, DataMovimento, Gerente, Hora) VALUES (?,?,?,?,?,?,?,?,?)", objMovCx.iFilialEmpresa, objMovCx.lNumMovto, objMovCx.iCaixa, objMovCx.iCodOperador, objMovCx.lSequencial, objMovCx.iTipo, objMovCx.dtDataMovimento, objMovCx.iGerente, objMovCx.dHora)
    If lErro <> AD_SQL_SUCESSO Then gError 118306

    'insere novo registro na tabela de Sessao
    lErro = Comando_ExecutarPos(alComando(2), "SELECT Codigo FROM Caixa WHERE FilialEmpresa = ? AND Codigo = ?", 0, iCodCaixa, objMovCx.iFilialEmpresa, objMovCx.iCaixa)
    If lErro <> AD_SQL_SUCESSO Then gError 133545

    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 133546
    
    If lErro = AD_SQL_SEM_DADOS Then gError 133547
    
    'insere novo registro na tabela de MovimentosCaixa
    lErro = Comando_ExecutarPos(alComando(3), "UPDATE Caixa SET SessaoStatus = ?", alComando(2), SESSAO_SUSPENSA)
    If lErro <> AD_SQL_SUCESSO Then gError 133548

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Back_Movcx_Gravar_SuspSessao = SUCESSO

    Exit Function

Erro_Back_Movcx_Gravar_SuspSessao:

    Back_Movcx_Gravar_SuspSessao = gErr

    Select Case gErr

        Case 118305
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 118306
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MOVCAIXA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa, objMovCx.lSequencial)

        Case 133545, 133546
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CAIXA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa)

        Case 133547
            Call Rotina_Erro(vbOKOnly, "ERRO_CAIXA_NAO_CADASTRADO", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa)

        Case 133548
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_CAIXA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151221)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Back_Movcx_Gravar_FchSessao(ByVal objMovCx As ClassMovimentoCaixa) As Long
'gravar o movimento de caixa referente a fechamento de sessao
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lErro As Long
Dim alComando(1 To 3) As Long
Dim iIndice As Integer
Dim objLog As New ClassLog
Dim lNumInt As Long
Dim iCodCaixa As Integer

On Error GoTo Erro_Back_Movcx_Gravar_FchSessao

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 118311
    Next

    'insere novo registro na tabela de MovimentosCaixa referente a saida outros do caixa
    lErro = Comando_Executar(alComando(1), "INSERT INTO MovimentosCaixa(FilialEmpresa, NumMovto, Caixa, Operador, Sequencial, Tipo, DataMovimento, Gerente, Hora) VALUES (?,?,?,?,?,?,?,?,?)", objMovCx.iFilialEmpresa, objMovCx.lNumMovto, objMovCx.iCaixa, objMovCx.iCodOperador, objMovCx.lSequencial, objMovCx.iTipo, objMovCx.dtDataMovimento, objMovCx.iGerente, objMovCx.dHora)
    If lErro <> AD_SQL_SUCESSO Then gError 118312

    'insere novo registro na tabela de Sessao
    lErro = Comando_ExecutarPos(alComando(2), "SELECT Codigo FROM Caixa WHERE FilialEmpresa = ? AND Codigo = ?", 0, iCodCaixa, objMovCx.iFilialEmpresa, objMovCx.iCaixa)
    If lErro <> AD_SQL_SUCESSO Then gError 133549

    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 133550
    
    If lErro = AD_SQL_SEM_DADOS Then gError 133551
    
    'insere novo registro na tabela de MovimentosCaixa
    lErro = Comando_ExecutarPos(alComando(3), "UPDATE Caixa SET SessaoStatus = ?", alComando(2), SESSAO_ENCERRADA)
    If lErro <> AD_SQL_SUCESSO Then gError 133552

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Back_Movcx_Gravar_FchSessao = SUCESSO

    Exit Function

Erro_Back_Movcx_Gravar_FchSessao:

    Back_Movcx_Gravar_FchSessao = gErr

    Select Case gErr

        Case 118311
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 118312
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MOVCAIXA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa, objMovCx.lSequencial)

        Case 133549, 133550
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CAIXA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa)

        Case 133551
            Call Rotina_Erro(vbOKOnly, "ERRO_CAIXA_NAO_CADASTRADO", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa)

        Case 133552
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_CAIXA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151222)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Registro_Back_MovcxOut(ByVal colRegistro As Collection, sArquivo As String, lRegistro As Long) As Long
'Trata o registro de movimentacao de outros e coloca os dados no bd do backoffice. sArquivo contem o nome do arquivo em que sRegistro foi lido.
'iRegistro é o numero do registro.

Dim iPosAtual As Integer
Dim iPosFimAtual As Integer
Dim objMovCx As New ClassMovimentoCaixa
Dim lErro As Long
Dim sRegistro As String

On Error GoTo Erro_Registro_Back_MovcxOut
    
    sRegistro = colRegistro.Item(1)
    
    iPosFimAtual = InStr(sRegistro, Chr(vbKeyEscape))

    'guarda as infos de movimento de caixa
    lErro = CF("Back_MovcxOut_Movcx", iPosAtual, iPosFimAtual, sRegistro, objMovCx)
    If lErro <> SUCESSO Then gError 118317
    
    lErro = Verifica_Existencia_Sequencial(objMovCx.lSequencial, objMovCx.iCaixa, objMovCx.iFilialEmpresa)
    If lErro <> SUCESSO And lErro <> 112627 Then gError 118938
    
    If lErro <> 112627 Then
        'guarda as infos de movimento de caixa relativos a sangria outros
        lErro = CF("Back_Movcx_Gravar_MovcxOut", objMovCx)
        If lErro <> SUCESSO Then gError 118318
    End If
    
    Registro_Back_MovcxOut = SUCESSO

    Exit Function

Erro_Registro_Back_MovcxOut:

    Registro_Back_MovcxOut = gErr

    Select Case gErr

        Case 118317, 118318, 118938

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151223)

    End Select

    Exit Function

End Function

Function Back_MovcxOut_Movcx(iPosAtual As Integer, iPosFimAtual As Integer, sRegistro As String, ByVal objMovCx As ClassMovimentoCaixa) As Long
'guarda as infos de movimento de caixa relativos a sangria outros

Dim lErro As Long

On Error GoTo Erro_Back_MovcxOut_Movcx


    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.lNumMovto = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iCaixa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iCodOperador = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.lSequencial = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iTipo = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iAdmMeioPagto = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iParcelamento = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dtDataMovimento = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dValor = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iGerente = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dHora = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.lNumRefInterna = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    Back_MovcxOut_Movcx = SUCESSO

    Exit Function

Erro_Back_MovcxOut_Movcx:

    Back_MovcxOut_Movcx = gErr

    Select Case gErr

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151224)

    End Select

    Exit Function

End Function

Function Back_Movcx_Gravar_MovcxOut(ByVal objMovCx As ClassMovimentoCaixa) As Long
'gravar o movimento de caixa
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer
Dim objCCMovDia As New ClassCCMovDia
Dim objTipoMeioPagtoLojaFilial As New ClassTMPLojaFilial
Dim dValorEspecif As Double
Dim dValorNaoEspecif As Double
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim objLog As New ClassLog
Dim lSeq As Long
    
On Error GoTo Erro_Back_Movcx_Gravar_MovcxOut

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 118319
    Next

    'insere novo registro na tabela de MovimentosCaixa referente a saida outros do caixa
    lErro = Comando_Executar(alComando(1), "INSERT INTO MovimentosCaixa(FilialEmpresa, NumMovto, Caixa, Operador, Sequencial, Tipo, AdmMeioPagto, Parcelamento, DataMovimento, Valor, Gerente, Hora, NumRefInterna) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", objMovCx.iFilialEmpresa, objMovCx.lNumMovto, objMovCx.iCaixa, objMovCx.iCodOperador, objMovCx.lSequencial, objMovCx.iTipo, objMovCx.iAdmMeioPagto, objMovCx.iParcelamento, objMovCx.dtDataMovimento, objMovCx.dValor, objMovCx.iGerente, objMovCx.dHora, objMovCx.lNumRefInterna)
    If lErro <> AD_SQL_SUCESSO Then gError 118320

    'preenche um objccmovdia com os dados do movimento de saque do caixa
    lErro = CF("Mover_Dados_Saque_CCMovDia", objMovCx, objCCMovDia)
    If lErro <> SUCESSO Then gError 118321

    objCCMovDia.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_OUTROS

    'adiciona o mesmo no consolidado diário
    lErro = CF("CCMovDia_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 118322

    'adiciona o mesmo no consolidado anual no mês em questão
    lErro = CF("CCMov_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 118323

    objMovCx.lNumRefInterna = objMovCx.lNumMovto
    objMovCx.iCaixa = CODIGO_CAIXA_CENTRAL
    objMovCx.lNumMovto = objMovCx.lNumMovto + 1
    objMovCx.iTipo = MOVIMENTOCAIXA_ENT_SANGRIA_OUTROS

    lErro = CF("Caixa_Sequencial_EmTrans", CODIGO_CAIXA_CENTRAL, objMovCx.iFilialEmpresa, lSeq)
    If lErro <> SUCESSO Then gError 126037

    objMovCx.lSequencial = lSeq

    'insere novo registro na tabela de MovimentosCaixa referente a entrada outros no caixa central
    lErro = Comando_Executar(alComando(1), "INSERT INTO MovimentosCaixa(FilialEmpresa, NumMovto, Caixa, Operador, Sequencial, Tipo, AdmMeioPagto, Parcelamento, DataMovimento, Valor, Gerente, Hora, NumRefInterna ) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", objMovCx.iFilialEmpresa, objMovCx.lNumMovto, objMovCx.iCaixa, objMovCx.iCodOperador, objMovCx.lSequencial, objMovCx.iTipo, objMovCx.iAdmMeioPagto, objMovCx.iParcelamento, objMovCx.dtDataMovimento, objMovCx.dValor, objMovCx.iGerente, objMovCx.dHora, objMovCx.lNumRefInterna)
    If lErro <> AD_SQL_SUCESSO Then gError 118324
    
    Set objCCMovDia = New ClassCCMovDia
    
    'preenche um objccmovdia com os dados do movimento de deposito no caixa central
    lErro = Mover_Dados_Deposito_CCMovDia(objMovCx, objCCMovDia)
    If lErro <> SUCESSO Then gError 118325

    objCCMovDia.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_OUTROS

    'adiciona o mesmo no consolidado diário
    lErro = CF("CCMovDia_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 118326

    'adiciona o mesmo no consolidado anual no mês em questão
    lErro = CF("CCMov_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 118327

    'se for um movimento nao especificado
    If objMovCx.iAdmMeioPagto = 0 Then

        'Valor Outros não Especificados
        objTipoMeioPagtoLojaFilial.dSaldo = objMovCx.dValor
        objTipoMeioPagtoLojaFilial.iFilialEmpresa = objMovCx.iFilialEmpresa
        objTipoMeioPagtoLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_OUTROS

        'Função que Serve para atualizar Saldo de Outros nao especificados
        lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTipoMeioPagtoLojaFilial)
        If lErro <> SUCESSO Then gError 118328

    Else

        'Mover Valor de Outros Especificado para admMeioPagtoCondPagto.Saldo
        objAdmMeioPagtoCondPagto.dSaldo = objMovCx.dValor
        objAdmMeioPagtoCondPagto.iAdmMeioPagto = objMovCx.iAdmMeioPagto
        objAdmMeioPagtoCondPagto.iParcelamento = objMovCx.iParcelamento
        objAdmMeioPagtoCondPagto.iFilialEmpresa = objMovCx.iFilialEmpresa

        'Função para Alteração de Saldo
        lErro = CF("AdmMeioPagtoCondPagto_Altera_Saldo", objAdmMeioPagtoCondPagto)
        If lErro <> SUCESSO Then gError 118329

    End If

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Back_Movcx_Gravar_MovcxOut = SUCESSO

    Exit Function

Erro_Back_Movcx_Gravar_MovcxOut:

    Back_Movcx_Gravar_MovcxOut = gErr

    Select Case gErr

        Case 118319
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 118321 To 118323, 118325 To 118329, 126037

        Case 118320, 118324
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MOVCAIXA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa, objMovCx.lSequencial)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151225)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Registro_Back_SaqueCC(ByVal colRegistro As Collection, sArquivo As String, lRegistro As Long, ByVal iOperacao As Integer) As Long
'Trata o registro de movimentacao de outros e coloca os dados no bd do caixa central. sArquivo contem o nome do arquivo em que sRegistro foi lido.
'iRegistro é o numero do registro.

Dim iPosAtual As Integer
Dim iPosFimAtual As Integer
Dim objMovCx As New ClassMovimentoCaixa
Dim lErro As Long
Dim sRegistro As String

On Error GoTo Erro_Registro_Back_SaqueCC
    
    sRegistro = colRegistro.Item(1)
    
    iPosFimAtual = InStr(sRegistro, Chr(vbKeyEscape))

    Select Case iOperacao

        Case INCLUSAO_SAQUE_CAIXA_CENTRAL

            'guarda as infos de movimento de caixa
            lErro = CF("Back_Movcx_Saque", iPosAtual, iPosFimAtual, sRegistro, objMovCx)
            If lErro <> SUCESSO Then gError 118330
                    
            lErro = Verifica_Existencia_Sequencial(objMovCx.lSequencial, objMovCx.iCaixa, objMovCx.iFilialEmpresa)
            If lErro <> SUCESSO And lErro <> 112627 Then gError 118940
    
            If lErro <> 112627 Then
                'insere as infos de movimento de caixa relativos a saque
                lErro = CF("Back_Movcx_Insere_Saque", objMovCx)
                If lErro <> SUCESSO Then gError 118331
            End If
            
        Case ALTERACAO_SAQUE_CAIXA_CENTRAL

            'guarda as infos de movimento de caixa
            lErro = CF("Back_Movcx_Saque", iPosAtual, iPosFimAtual, sRegistro, objMovCx)
            If lErro <> SUCESSO Then gError 118332
            
            lErro = Verifica_Existencia_Sequencial(objMovCx.lSequencial, objMovCx.iCaixa, objMovCx.iFilialEmpresa)
            If lErro <> SUCESSO And lErro <> 112627 Then gError 118941
    
            If lErro = 112627 Then
                'altera as infos de movimento de caixa relativos a saque
                lErro = CF("Back_Movcx_Altera_Saque", objMovCx)
                If lErro <> SUCESSO Then gError 118333
            End If

        Case EXCLUSAO_SAQUE_CAIXA_CENTRAL

            'guarda as infos de movimento de caixa
            lErro = CF("Back_Movcx_Saque_Exclui", iPosAtual, iPosFimAtual, sRegistro, objMovCx)
            If lErro <> SUCESSO Then gError 118334
            
            lErro = Verifica_Existencia_Sequencial(objMovCx.lSequencial, objMovCx.iCaixa, objMovCx.iFilialEmpresa)
            If lErro <> SUCESSO And lErro <> 112627 Then gError 118942
    
            If lErro = 112627 Then
                'exclui as infos de movimento de caixa relativos a saque
                lErro = CF("Back_Movcx_Exclui_Saque", objMovCx)
                If lErro <> SUCESSO Then gError 118335
            End If

    End Select

    Registro_Back_SaqueCC = SUCESSO

    Exit Function

Erro_Registro_Back_SaqueCC:

    Registro_Back_SaqueCC = gErr

    Select Case gErr

        Case 118330 To 118335, 118940 To 118942

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151226)

    End Select

    Exit Function

End Function

Function Back_Movcx_Saque(iPosAtual As Integer, iPosFimAtual As Integer, sRegistro As String, ByVal objMovCx As ClassMovimentoCaixa) As Long
'guarda as infos de movimento de caixa relativos a saque no caixa central

Dim lErro As Long

On Error GoTo Erro_Back_Movcx_Saque

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.lNumMovto = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iCaixa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.lSequencial = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iTipo = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iAdmMeioPagto = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iParcelamento = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dtDataMovimento = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dValor = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.sHistorico = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.sFavorecido = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dHora = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    Back_Movcx_Saque = SUCESSO

    Exit Function

Erro_Back_Movcx_Saque:

    Back_Movcx_Saque = gErr

    Select Case gErr

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151227)

    End Select

    Exit Function

End Function

Public Function Back_Movcx_Insere_Saque(objMovimentoCaixa As ClassMovimentoCaixa) As Long
'Função que recebe um objMovimentoCaixa preenchido e grava o mesmo na tabela de movimentos de caixa

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim objLog As New ClassLog
Dim objCaixa As New ClassCaixa
Dim objTipoMeioPagtoLojaFilial As New ClassTMPLojaFilial
Dim objCCMovDia As New ClassCCMovDia
Dim tMovimentoCaixa As typeMovimentoCaixa
Dim iTipo As Integer
Dim iFilialEmpresa As Integer

On Error GoTo Erro_Movcx_Insere_Saque

    For iIndice = LBound(alComando) To UBound(alComando)

        alComando(iIndice) = Comando_Abrir
        If alComando(iIndice) = 0 Then gError 118336

    Next

    'preenche os campos chave para buscar o caixa para posterior lock
    objCaixa.iCodigo = objMovimentoCaixa.iCaixa
    objCaixa.iFilialEmpresa = objMovimentoCaixa.iFilialEmpresa

    'faz um lock no caixa
    lErro = CF("Caixa_Lock", objCaixa)
    If lErro <> SUCESSO And lErro <> 103776 Then gError 118337

    If lErro = 103776 Then gError 118338

    'verifica se a data é menor que a data inicial do caixa central na tabela caixa. Se for-> erro
    If StrParaDate(objMovimentoCaixa.dtDataMovimento) < objCaixa.dtDataInicial Then gError 118344

    'executa a inserção na tabela de movimentos de caixa
    lErro = Comando_Executar(alComando(0), "INSERT INTO MovimentosCaixa(FilialEmpresa,NumMovto,Caixa,Sequencial,Tipo,AdmMeioPagto,Parcelamento,DataMovimento,Valor,Historico,Favorecido,Hora) VALUES(?,?,?,?,?,?,?,?,?,?,?,?)", _
    objMovimentoCaixa.iFilialEmpresa, objMovimentoCaixa.lNumMovto, objMovimentoCaixa.iCaixa, objMovimentoCaixa.lSequencial, objMovimentoCaixa.iTipo, objMovimentoCaixa.iAdmMeioPagto, objMovimentoCaixa.iParcelamento, objMovimentoCaixa.dtDataMovimento, objMovimentoCaixa.dValor, objMovimentoCaixa.sHistorico, objMovimentoCaixa.sFavorecido, objMovimentoCaixa.dHora)
    If lErro <> SUCESSO Then gError 118339

    'preenche um objccmovdia com os dados do movimento de caixa
    lErro = CF("Mover_Dados_Saque_CCMovDia", objMovimentoCaixa, objCCMovDia)
    If lErro <> SUCESSO Then gError 118340

    objCCMovDia.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_DINHEIRO

    'adiciona o mesmo no consolidado diário
    lErro = CF("CCMovDia_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 118341

    'adiciona o mesmo no consolidado anual no mês em questão
    lErro = CF("CCMov_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 118342

    'subtrair o valor do movimento de caixa novo em objtipomeiopagtoloja.saldo
    objTipoMeioPagtoLojaFilial.dSaldo = -objMovimentoCaixa.dValor

    'mover Meio_pagamento_Dineiro para objtipomeiopagtoloja.itipo
    objTipoMeioPagtoLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_DINHEIRO
    objTipoMeioPagtoLojaFilial.iFilialEmpresa = objMovimentoCaixa.iFilialEmpresa

    'altera o saldo atual na tabela de tipomeiopagtoloja
    lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTipoMeioPagtoLojaFilial)
    If lErro <> SUCESSO Then gError 118343

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Back_Movcx_Insere_Saque = SUCESSO

    Exit Function

Erro_Movcx_Insere_Saque:

    Back_Movcx_Insere_Saque = gErr

    Select Case gErr

        Case 118336
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 118337, 118340 To 118343
        
        Case 118338
            Call Rotina_Erro(vbOKOnly, "ERRO_CAIXA_NAOENCONTRADO", gErr, STRING_CAIXA_CENTRAL)

        Case 118344
            Call Rotina_Erro(vbOKOnly, "ERRO_DATAMOVIMENTOCAIXA_MAIOR_DATAINICIALCAIXA", gErr, objCaixa.dtDataInicial)
                
        Case 118339
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MOVCAIXA", gErr, objMovimentoCaixa.iFilialEmpresa, STRING_CAIXA_CENTRAL, objMovimentoCaixa.lSequencial)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151228)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)

        Call Comando_Fechar(alComando(iIndice))

    Next

    Exit Function

End Function

Public Function Back_Movcx_Altera_Saque(objMovimentoCaixa As ClassMovimentoCaixa) As Long
'Função que recebe um objMovimentoCaixa preenchido e grava o mesmo na tabela de movimentos de caixa

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim objLog As New ClassLog
Dim objCaixa As New ClassCaixa
Dim objTipoMeioPagtoLojaFilial As New ClassTMPLojaFilial
Dim objCCMovDia As New ClassCCMovDia
Dim tMovimentoCaixa As typeMovimentoCaixa
Dim iTipo As Integer
Dim iFilialEmpresa As Integer

On Error GoTo Erro_Back_Movcx_Altera_Saque

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir
        If alComando(iIndice) = 0 Then gError 118345
    Next

    'preenche os campos chave para buscar o caixa para posterior lock
    objCaixa.iCodigo = objMovimentoCaixa.iCaixa
    objCaixa.iFilialEmpresa = objMovimentoCaixa.iFilialEmpresa

    'faz um lock no caixa
    lErro = CF("Caixa_Lock", objCaixa)
    If lErro <> SUCESSO And lErro <> 103776 Then gError 118346
    If lErro = 103776 Then gError 118347

    'verifica se a data é menor que a data inicial do caixa central na tabela caixa. Se for-> erro
    If StrParaDate(objMovimentoCaixa.dtDataMovimento) < objCaixa.dtDataInicial Then gError 118348

    'inicializa as strings
    tMovimentoCaixa.sHistorico = String(STRING_MOVIMENTOCAIXA_HISTORICO, 0)
    tMovimentoCaixa.sFavorecido = String(STRING_MOVIMENTOCAIXA_FAVORECIDO, 0)

    'verifica se já existe movimento cadastrado para o caixa
    'faz o select na tabela
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Caixa, Sequencial,FilialEmpresa, NumMovto, Tipo , AdmMeioPagto , Parcelamento, TipoCartao, Numero, DataMovimento, Valor, Historico, Favorecido,CupomFiscal,NumRefInterna,MovtoTransf,MovtoEstorno,Gerente FROM MovimentosCaixa WHERE FilialEmpresa = ? AND Caixa = ? AND Sequencial = ?", 0, _
    tMovimentoCaixa.iCaixa, tMovimentoCaixa.lSequencial, tMovimentoCaixa.iFilialEmpresa, tMovimentoCaixa.lNumMovto, tMovimentoCaixa.iTipo, tMovimentoCaixa.iAdmMeioPagto, tMovimentoCaixa.iParcelamento, tMovimentoCaixa.iTipoCartao, tMovimentoCaixa.lNumero, tMovimentoCaixa.dtDataMovimento, tMovimentoCaixa.dValor, tMovimentoCaixa.sHistorico, tMovimentoCaixa.sFavorecido, tMovimentoCaixa.lCupomFiscal, tMovimentoCaixa.lNumRefInterna, tMovimentoCaixa.lMovtoTransf, tMovimentoCaixa.lMovtoEstorno, tMovimentoCaixa.iGerente, objMovimentoCaixa.iFilialEmpresa, objMovimentoCaixa.iCaixa, objMovimentoCaixa.lSequencial)
    If lErro <> SUCESSO Then gError 118349

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118350

    If lErro = AD_SQL_SEM_DADOS Then gError 118351

    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> SUCESSO Then gError 118352

    'se o movimento não for de saque--> erro
    If tMovimentoCaixa.iTipo <> MOVIMENTO_CAIXA_SAQUE Then gError 118353

    'carrega um movimento diário para atualização de tabela consolidado diário
    'com os dados da tabela de movimento caixa
    lErro = Mover_Dados_Saque_CCMovDia1(tMovimentoCaixa, objCCMovDia)
    If lErro <> SUCESSO Then gError 118354

    'subtrai o movimento em questão do consolidado diário (trata-se de uma atualização de um movimento)
    lErro = CF("CCMovDia_Exclui", objCCMovDia)
    If lErro <> SUCESSO Then gError 118355

    'subtrai o movimento em questão do consolidado anual no mês atual
    lErro = CF("CCMov_Exclui", objCCMovDia)
    If lErro <> SUCESSO Then gError 118356

    'Alterar os dados da Tabela MovimentosCaixa
    lErro = Comando_ExecutarPos(alComando(1), "UPDATE MovimentosCaixa SET DataMovimento = ?, Valor =? , Favorecido = ? , Historico = ?", alComando(0), objMovimentoCaixa.dtDataMovimento, objMovimentoCaixa.dValor, objMovimentoCaixa.sFavorecido, objMovimentoCaixa.sHistorico)
    If lErro <> SUCESSO Then gError 118357

    'carrega um tipomeiopagtoloja com o movimento excluído para posterior alteração do saldo na tabela de tipomeiopagtoloja
    objTipoMeioPagtoLojaFilial.dSaldo = tMovimentoCaixa.dValor
        
    Set objCCMovDia = New ClassCCMovDia
    
    'preenche um objccmovdia com os dados do movimento de caixa
    lErro = CF("Mover_Dados_Saque_CCMovDia", objMovimentoCaixa, objCCMovDia)
    If lErro <> SUCESSO Then gError 118358

    objCCMovDia.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_DINHEIRO

    'adiciona o mesmo no consolidado diário
    lErro = CF("CCMovDia_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 118359

    'adiciona o mesmo no consolidado anual no mês em questão
    lErro = CF("CCMov_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 118360

    'subtrair o valor do movimento de caixa novo em objtipomeiopagtoloja.saldo
    objTipoMeioPagtoLojaFilial.dSaldo = objTipoMeioPagtoLojaFilial.dSaldo - objMovimentoCaixa.dValor

    'mover Meio_pagamento_Dineiro para objtipomeiopagtoloja.itipo
    objTipoMeioPagtoLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_DINHEIRO
    objTipoMeioPagtoLojaFilial.iFilialEmpresa = objMovimentoCaixa.iFilialEmpresa

    'altera o saldo atual na tabela de tipomeiopagtoloja
    lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTipoMeioPagtoLojaFilial)
    If lErro <> SUCESSO Then gError 118361

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Back_Movcx_Altera_Saque = SUCESSO

    Exit Function

Erro_Back_Movcx_Altera_Saque:

    Back_Movcx_Altera_Saque = gErr

    Select Case gErr

        Case 118345
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 118346, 118354, 118355, 118356, 118358 To 118361
        
        Case 118347
            Call Rotina_Erro(vbOKOnly, "ERRO_CAIXA_NAOENCONTRADO", gErr, STRING_CAIXA_CENTRAL)
        
        Case 118348
            Call Rotina_Erro(vbOKOnly, "ERRO_DATAMOVIMENTOCAIXA_MAIOR_DATAINICIALCAIXA", gErr, objCaixa.dtDataInicial)
        
        Case 118349, 118350
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_LEITURA", gErr)
        
        Case 118351
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_NAOENCONTRADO", gErr, STRING_CAIXA_CENTRAL, objMovimentoCaixa.lSequencial)

        Case 118352
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_LOCK", gErr, STRING_CAIXA_CENTRAL)
        
        Case 118353
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPO_MOVIMENTO_NAO_SAQUE", gErr, STRING_CAIXA_CENTRAL, objMovimentoCaixa.lSequencial)
        
        Case 118357
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_ALTERACAO", gErr, STRING_CAIXA_CENTRAL, objMovimentoCaixa.lSequencial)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151229)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Back_Movcx_Saque_Exclui(iPosAtual As Integer, iPosFimAtual As Integer, sRegistro As String, ByVal objMovCx As ClassMovimentoCaixa) As Long
'guarda as infos de movimento de caixa relativos a sangria outros

Dim lErro As Long

On Error GoTo Erro_Back_Movcx_Saque_Exclui

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iCaixa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.lSequencial = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    Back_Movcx_Saque_Exclui = SUCESSO

    Exit Function

Erro_Back_Movcx_Saque_Exclui:

    Back_Movcx_Saque_Exclui = gErr

    Select Case gErr

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151230)

    End Select

    Exit Function

End Function

Public Function Back_Movcx_Exclui_Saque(ByVal objMovimentoCaixa As ClassMovimentoCaixa) As Long
'exclui um Movimento de Caixa e atualiza o consolidado diário e o mensal

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim objTipoMeioPagtoLojaFilial As New ClassTMPLojaFilial
Dim objCCMovDia As New ClassCCMovDia
Dim tMovimentoCaixa As typeMovimentoCaixa

On Error GoTo Erro_Back_Movcx_Exclui_Saque

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir
        If alComando(iIndice) = 0 Then gError 118362
    Next

    'seleciona na tabela de movimentos de caixa se existe o movimento com sequencial passado por parâmetro
    lErro = Comando_ExecutarPos(alComando(0), "SELECT DataMovimento, Valor FROM MovimentosCaixa WHERE FilialEmpresa = ? AND Sequencial = ? AND Caixa = ?", 0, _
    tMovimentoCaixa.dtDataMovimento, tMovimentoCaixa.dValor, objMovimentoCaixa.iFilialEmpresa, objMovimentoCaixa.lSequencial, objMovimentoCaixa.iCaixa)
    If lErro <> AD_SQL_SUCESSO Then gError 118363

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118364

    'se não existir, erro
    If lErro = AD_SQL_SEM_DADOS Then gError 118365

    'locka o movimento a ser excluído
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 118366

    'deleta da tabela de movimentos de caixa
    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM MovimentosCaixa", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 118367

    tMovimentoCaixa.iFilialEmpresa = objMovimentoCaixa.iFilialEmpresa
    tMovimentoCaixa.iCaixa = objMovimentoCaixa.iCaixa
    
    'carrega um movimento diário para atualização de tabela consolidado diário
    'com os dados da tabela de movimento caixa
    lErro = Mover_Dados_DepositoBancario_CCMovDia1(tMovimentoCaixa, objCCMovDia)
    If lErro <> SUCESSO Then gError 105992

    'chama a função que subtrai o débito excluído do consolidado diário de débitos
    lErro = CF("CCMovDia_Exclui", objCCMovDia)
    If lErro <> SUCESSO Then gError 118368

    'chama a função que subtrai o débito excluído do consolidado mensal de débitos
    lErro = CF("CCMov_Exclui", objCCMovDia)
    If lErro <> SUCESSO Then gError 118369

    'carrega o tipomeiopagtoloja com o valor a ser subtraído do campo saldo e o meio de pagamento dinheiro
    objTipoMeioPagtoLojaFilial.dSaldo = tMovimentoCaixa.dValor
    objTipoMeioPagtoLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_DINHEIRO
    objTipoMeioPagtoLojaFilial.iFilialEmpresa = objMovimentoCaixa.iFilialEmpresa

    'chama a função que altera o saldo da loja na tabela de tipomeiopagtoloja
    lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTipoMeioPagtoLojaFilial)
    If lErro <> SUCESSO Then gError 118370

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Back_Movcx_Exclui_Saque = SUCESSO

    Exit Function

Erro_Back_Movcx_Exclui_Saque:

    Back_Movcx_Exclui_Saque = gErr

    Select Case gErr

        Case 105992, 118368 To 118370

        Case 118362
             Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 118363, 118364
             Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_LEITURA", gErr)

        Case 118365
             Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_NAOENCONTRADO", gErr, STRING_CAIXA_CENTRAL, objMovimentoCaixa.lSequencial)

        Case 118366
             Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_LOCK", gErr, STRING_CAIXA_CENTRAL)

        Case 118367
             Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_EXCLUSAO", gErr, STRING_CAIXA_CENTRAL, objMovimentoCaixa.lSequencial)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151231)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Registro_Back_DepositoCC(ByVal colRegistro As Collection, sArquivo As String, lRegistro As Long, ByVal iOperacao As Integer) As Long
'Trata o registro de movimentacao de outros e coloca os dados no bd do caixa central. sArquivo contem o nome do arquivo em que sRegistro foi lido.
'iRegistro é o numero do registro.

Dim iPosAtual As Integer
Dim iPosFimAtual As Integer
Dim objMovCx As New ClassMovimentoCaixa
Dim lErro As Long
Dim sRegistro As String


On Error GoTo Erro_Registro_Back_DepositoCC
    
    sRegistro = colRegistro.Item(1)
    
    iPosFimAtual = InStr(sRegistro, Chr(vbKeyEscape))

    Select Case iOperacao

        Case INCLUSAO_DEPOSITO_CAIXA_CENTRAL

            'guarda as infos de movimento de caixa
            lErro = CF("Back_Movcx_DepositoCC", iPosAtual, iPosFimAtual, sRegistro, objMovCx)
            If lErro <> SUCESSO Then gError 118371
            
            lErro = Verifica_Existencia_Sequencial(objMovCx.lSequencial, objMovCx.iCaixa, objMovCx.iFilialEmpresa)
            If lErro <> SUCESSO And lErro <> 112627 Then gError 118943
    
            If lErro <> 112627 Then
                'insere as infos de movimento de caixa relativos a saque
                lErro = CF("Back_Movcx_Insere_DepositoCC", objMovCx)
                If lErro <> SUCESSO Then gError 118372
            End If
            
        Case ALTERACAO_DEPOSITO_CAIXA_CENTRAL

            'guarda as infos de movimento de caixa
            lErro = CF("Back_Movcx_DepositoCC", iPosAtual, iPosFimAtual, sRegistro, objMovCx)
            If lErro <> SUCESSO Then gError 118373

            lErro = Verifica_Existencia_Sequencial(objMovCx.lSequencial, objMovCx.iCaixa, objMovCx.iFilialEmpresa)
            If lErro <> SUCESSO And lErro <> 112627 Then gError 118944
    
            If lErro = 112627 Then
                'altera as infos de movimento de caixa relativos a saque
                lErro = CF("Back_Movcx_Altera_DepositoCC", objMovCx)
                If lErro <> SUCESSO Then gError 118374
            End If

        Case EXCLUSAO_DEPOSITO_CAIXA_CENTRAL

            'guarda as infos de movimento de caixa
            lErro = CF("Back_Movcx_DepositoCC_Exclui", iPosAtual, iPosFimAtual, sRegistro, objMovCx)
            If lErro <> SUCESSO Then gError 118375
            
            lErro = Verifica_Existencia_Sequencial(objMovCx.lSequencial, objMovCx.iCaixa, objMovCx.iFilialEmpresa)
            If lErro <> SUCESSO And lErro <> 112627 Then gError 118945
    
            If lErro = 112627 Then
                'exclui as infos de movimento de caixa relativos a saque
                lErro = CF("Back_Movcx_Exclui_DepositoCC", objMovCx)
                If lErro <> SUCESSO Then gError 118376
            End If

    End Select

    Registro_Back_DepositoCC = SUCESSO

    Exit Function

Erro_Registro_Back_DepositoCC:

    Registro_Back_DepositoCC = gErr

    Select Case gErr

        Case 118371 To 118376, 118943 To 118945

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151232)

    End Select

    Exit Function

End Function

Function Back_Movcx_DepositoCC(iPosAtual As Integer, iPosFimAtual As Integer, sRegistro As String, ByVal objMovCx As ClassMovimentoCaixa) As Long
'guarda as infos de movimento de caixa relativos a deposito no caixa central

Dim lErro As Long

On Error GoTo Erro_Back_Movcx_DepositoCC

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.lNumMovto = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iCaixa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.lSequencial = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iTipo = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iAdmMeioPagto = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iParcelamento = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dtDataMovimento = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dValor = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.sHistorico = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iCodConta = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dHora = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    Back_Movcx_DepositoCC = SUCESSO

    Exit Function

Erro_Back_Movcx_DepositoCC:

    Back_Movcx_DepositoCC = gErr

    Select Case gErr

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151233)

    End Select

    Exit Function

End Function

Public Function Back_Movcx_Insere_DepositoCC(objMovimentoCaixa As ClassMovimentoCaixa) As Long
'Função que recebe um objMovimentoCaixa preenchido e grava o mesmo na tabela de movimentos de caixa

Dim lErro As Long
Dim iIndice As Integer
Dim objLog As New ClassLog
Dim objCaixa As New ClassCaixa
Dim objTipoMeioPagtoLojaFilial As New ClassTMPLojaFilial
Dim objCCMovDia As New ClassCCMovDia
Dim tMovimentoCaixa As typeMovimentoCaixa
Dim iTipo As Integer
Dim iFilialEmpresa As Integer
Dim alComando(0 To 1) As Long

On Error GoTo Erro_Back_Movcx_Insere_DepositoCC

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir
        If alComando(iIndice) = 0 Then gError 118377
    Next

    'preenche os campos chave para buscar o caixa para posterior lock
    objCaixa.iCodigo = objMovimentoCaixa.iCaixa
    objCaixa.iFilialEmpresa = objMovimentoCaixa.iFilialEmpresa

    'faz um lock no caixa
    lErro = CF("Caixa_Lock", objCaixa)
    If lErro <> SUCESSO And lErro <> 103776 Then gError 118378

    If lErro = 103776 Then gError 118379

    'verifica se a data é menor que a data inicial do caixa central na tabela caixa. Se for-> erro
    If objMovimentoCaixa.dtDataMovimento < objCaixa.dtDataInicial Then gError 118380

    'executa a inserção na tabela de movimentos de caixa
    lErro = Comando_Executar(alComando(0), "INSERT INTO MovimentosCaixa(FilialEmpresa,NumMovto,Caixa,Sequencial,Tipo,AdmMeioPagto,Parcelamento,DataMovimento,Valor,Historico,Favorecido,Hora) VALUES(?,?,?,?,?,?,?,?,?,?,?,?)", _
    objMovimentoCaixa.iFilialEmpresa, objMovimentoCaixa.lNumMovto, objMovimentoCaixa.iCaixa, objMovimentoCaixa.lSequencial, objMovimentoCaixa.iTipo, objMovimentoCaixa.iAdmMeioPagto, objMovimentoCaixa.iParcelamento, objMovimentoCaixa.dtDataMovimento, objMovimentoCaixa.dValor, objMovimentoCaixa.sHistorico, objMovimentoCaixa.sFavorecido, objMovimentoCaixa.dHora)
    If lErro <> SUCESSO Then gError 118381

    'preenche um objccmovdia com os dados do movimento de caixa
    lErro = Mover_Dados_Deposito_CCMovDia(objMovimentoCaixa, objCCMovDia)
    If lErro <> SUCESSO Then gError 118382

    objCCMovDia.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_DINHEIRO

    'adiciona o mesmo no consolidado diário
    lErro = CF("CCMovDia_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 118383

    'adiciona o mesmo no consolidado anual no mês em questão
    lErro = CF("CCMov_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 118384

    'subtrair o valor do movimento de caixa novo em objtipomeiopagtoloja.saldo
    objTipoMeioPagtoLojaFilial.dSaldo = objMovimentoCaixa.dValor

    objTipoMeioPagtoLojaFilial.iFilialEmpresa = tMovimentoCaixa.iFilialEmpresa

    'mover Meio_pagamento_Dineiro para objtipomeiopagtoloja.itipo
    objTipoMeioPagtoLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_DINHEIRO
    objTipoMeioPagtoLojaFilial.iFilialEmpresa = objMovimentoCaixa.iFilialEmpresa

    'altera o saldo atual na tabela de tipomeiopagtoloja
    lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTipoMeioPagtoLojaFilial)
    If lErro <> SUCESSO Then gError 118385

    'fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Back_Movcx_Insere_DepositoCC = SUCESSO

    Exit Function

Erro_Back_Movcx_Insere_DepositoCC:

    Back_Movcx_Insere_DepositoCC = gErr

    Select Case gErr

        Case 118377
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 118378, 118382 To 118385

        Case 118379
            Call Rotina_Erro(vbOKOnly, "ERRO_CAIXA_NAOENCONTRADO", gErr, STRING_CAIXA_CENTRAL)

        Case 118380
            Call Rotina_Erro(vbOKOnly, "ERRO_DATAMOVIMENTOCAIXA_MAIOR_DATAINICIALCAIXA", gErr, objCaixa.dtDataInicial)
                
        Case 118381
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MOVCAIXA", gErr, objMovimentoCaixa.iFilialEmpresa, STRING_CAIXA_CENTRAL, objMovimentoCaixa.lSequencial)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151234)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function Back_Movcx_Altera_DepositoCC(objMovimentoCaixa As ClassMovimentoCaixa) As Long
'Função que recebe um objMovimentoCaixa preenchido e grava o mesmo na tabela de movimentos de caixa

Dim lErro As Long
Dim iIndice As Integer
Dim objLog As New ClassLog
Dim objCaixa As New ClassCaixa
Dim objTipoMeioPagtoLojaFilial As New ClassTMPLojaFilial
Dim objCCMovDia As New ClassCCMovDia
Dim tMovimentoCaixa As typeMovimentoCaixa
Dim iTipo As Integer
Dim iFilialEmpresa As Integer
Dim alComando(0 To 1) As Long

On Error GoTo Erro_Back_Movcx_Altera_DepositoCC

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir
        If alComando(iIndice) = 0 Then gError 118386
    Next

    'preenche os campos chave para buscar o caixa para posterior lock
    objCaixa.iCodigo = objMovimentoCaixa.iCaixa
    objCaixa.iFilialEmpresa = objMovimentoCaixa.iFilialEmpresa

    'faz um lock no caixa
    lErro = CF("Caixa_Lock", objCaixa)
    If lErro <> SUCESSO And lErro <> 103776 Then gError 118387

    If lErro = 103776 Then gError 118388

    'verifica se a data é menor que a data inicial do caixa central na tabela caixa. Se for-> erro
    If objMovimentoCaixa.dtDataMovimento < objCaixa.dtDataInicial Then gError 118389

    'inicializa as strings
    tMovimentoCaixa.sHistorico = String(STRING_MOVIMENTOCAIXA_HISTORICO, 0)
    tMovimentoCaixa.sFavorecido = String(STRING_MOVIMENTOCAIXA_FAVORECIDO, 0)

    'verifica se já existe movimento cadastrado para o caixa
    'faz o select na tabela
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Caixa, Sequencial,FilialEmpresa, NumMovto , Tipo , AdmMeioPagto , Parcelamento, TipoCartao, Numero, DataMovimento, Valor, Historico, Favorecido,CupomFiscal,NumRefInterna,MovtoTransf,MovtoEstorno,Gerente FROM MovimentosCaixa WHERE FilialEmpresa = ? AND Caixa = ? AND Sequencial = ?", 0, _
    tMovimentoCaixa.iCaixa, tMovimentoCaixa.lSequencial, tMovimentoCaixa.iFilialEmpresa, tMovimentoCaixa.lNumMovto, tMovimentoCaixa.iTipo, tMovimentoCaixa.iAdmMeioPagto, tMovimentoCaixa.iParcelamento, tMovimentoCaixa.iTipoCartao, tMovimentoCaixa.lNumero, tMovimentoCaixa.dtDataMovimento, tMovimentoCaixa.dValor, tMovimentoCaixa.sHistorico, tMovimentoCaixa.sFavorecido, tMovimentoCaixa.lCupomFiscal, tMovimentoCaixa.lNumRefInterna, tMovimentoCaixa.lMovtoTransf, tMovimentoCaixa.lMovtoEstorno, tMovimentoCaixa.iGerente, objMovimentoCaixa.iFilialEmpresa, objMovimentoCaixa.iCaixa, objMovimentoCaixa.lSequencial)
    If lErro <> SUCESSO Then gError 118390

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118391

    If lErro = AD_SQL_SEM_DADOS Then gError 118392

    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> SUCESSO Then gError 118393

    'se o movimento não for de deposito--> erro
    If tMovimentoCaixa.iTipo <> MOVIMENTO_CAIXA_DEPOSITO_DINHEIRO Then gError 118394

    'carrega um movimento diário para atualização de tabela consolidado diário
    'com os dados da tabela de movimento caixa
    lErro = Mover_Dados_Deposito_CCMovDia1(tMovimentoCaixa, objCCMovDia)
    If lErro <> SUCESSO Then gError 118395

    'subtrai o movimento em questão do consolidado diário (trata-se de uma atualização de um movimento)
    lErro = CF("CCMovDia_Exclui", objCCMovDia)
    If lErro <> SUCESSO Then gError 118396

    'subtrai o movimento em questão do consolidado anual no mês atual
    lErro = CF("CCMov_Exclui", objCCMovDia)
    If lErro <> SUCESSO Then gError 118397

    'Alterar os dados da Tabela MovimentosCaixa
    lErro = Comando_ExecutarPos(alComando(1), "UPDATE MovimentosCaixa SET DataMovimento = ?, Valor =? , Favorecido = ? , Historico = ?", alComando(0), objMovimentoCaixa.dtDataMovimento, objMovimentoCaixa.dValor, objMovimentoCaixa.sFavorecido, objMovimentoCaixa.sHistorico)
    If lErro <> SUCESSO Then gError 118398

    'carrega um tipomeiopagtoloja com o movimento excluído para posterior alteração do saldo na tabela de tipomeiopagtoloja
    objTipoMeioPagtoLojaFilial.dSaldo = -tMovimentoCaixa.dValor
    
    Set objCCMovDia = New ClassCCMovDia
    
    'preenche um objccmovdia com os dados do movimento de caixa
    lErro = Mover_Dados_Deposito_CCMovDia(objMovimentoCaixa, objCCMovDia)
    If lErro <> SUCESSO Then gError 118399

    objCCMovDia.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_DINHEIRO

    'adiciona o mesmo no consolidado diário
    lErro = CF("CCMovDia_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 118400

    'adiciona o mesmo no consolidado anual no mês em questão
    lErro = CF("CCMov_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 118401

    'subtrair o valor do movimento de caixa novo em objtipomeiopagtoloja.saldo
    objTipoMeioPagtoLojaFilial.dSaldo = objTipoMeioPagtoLojaFilial.dSaldo + objMovimentoCaixa.dValor

    objTipoMeioPagtoLojaFilial.iFilialEmpresa = tMovimentoCaixa.iFilialEmpresa

    'mover Meio_pagamento_Dineiro para objtipomeiopagtoloja.itipo
    objTipoMeioPagtoLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_DINHEIRO
    objTipoMeioPagtoLojaFilial.iFilialEmpresa = objMovimentoCaixa.iFilialEmpresa

    'altera o saldo atual na tabela de tipomeiopagtoloja
    lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTipoMeioPagtoLojaFilial)
    If lErro <> SUCESSO Then gError 118402

    'fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Back_Movcx_Altera_DepositoCC = SUCESSO

    Exit Function

Erro_Back_Movcx_Altera_DepositoCC:

    Back_Movcx_Altera_DepositoCC = gErr

    Select Case gErr

        Case 118386
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 118387, 118395, 118396, 118397, 118399 To 118402
        
        Case 118388
            Call Rotina_Erro(vbOKOnly, "ERRO_CAIXA_NAOENCONTRADO", gErr, STRING_CAIXA_CENTRAL)
        
        Case 118389
            Call Rotina_Erro(vbOKOnly, "ERRO_DATAMOVIMENTOCAIXA_MAIOR_DATAINICIALCAIXA", gErr, objCaixa.dtDataInicial)
        
        Case 118390, 118391
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_LEITURA", gErr)
        
        Case 118392
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_NAOENCONTRADO", gErr, STRING_CAIXA_CENTRAL, objMovimentoCaixa.lSequencial)

        Case 118393
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_LOCK", gErr, STRING_CAIXA_CENTRAL)
        
        Case 118394
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPO_MOVIMENTO_NAO_DEPOSITO_DINHEIRO", gErr, STRING_CAIXA_CENTRAL, objMovimentoCaixa.lSequencial)

        Case 118398
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_ALTERACAO", gErr, STRING_CAIXA_CENTRAL, objMovimentoCaixa.lSequencial)
                
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151235)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Back_Movcx_DepositoCC_Exclui(iPosAtual As Integer, iPosFimAtual As Integer, sRegistro As String, ByVal objMovCx As ClassMovimentoCaixa) As Long
'guarda as infos de movimento de caixa relativos a sangria outros

Dim lErro As Long

On Error GoTo Erro_Back_Movcx_DepositoCC_Exclui

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iCaixa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.lSequencial = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    Back_Movcx_DepositoCC_Exclui = SUCESSO

    Exit Function

Erro_Back_Movcx_DepositoCC_Exclui:

    Back_Movcx_DepositoCC_Exclui = gErr

    Select Case gErr

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151236)

    End Select

    Exit Function

End Function

Public Function Back_Movcx_Exclui_DepositoCC(ByVal objMovimentoCaixa As ClassMovimentoCaixa) As Long
'exclui um Movimento de Caixa e atualiza o consolidado diário e o mensal, fazendo a subtração do atual no anterior

Dim lErro As Long
Dim alComando(1) As Long
Dim lTransacao As Long
Dim iIndice As Integer
Dim objTipoMeioPagtoLojaFilial As New ClassTMPLojaFilial
Dim objCCMovDia As New ClassCCMovDia
Dim tMovimentoCaixa As typeMovimentoCaixa

On Error GoTo Erro_Back_Movcx_Exclui_DepositoCC

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir
        If alComando(iIndice) = 0 Then gError 118403
    Next

    'seleciona na tabela de movimentos de caixa se existe o movimento com sequencial passado por parâmetro
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Valor, DataMovimento FROM MovimentosCaixa WHERE FilialEmpresa = ? AND Sequencial = ? AND Caixa = ?", 0, _
    tMovimentoCaixa.dValor, tMovimentoCaixa.dtDataMovimento, objMovimentoCaixa.iFilialEmpresa, objMovimentoCaixa.lSequencial, objMovimentoCaixa.iCaixa)
    If lErro <> AD_SQL_SUCESSO Then gError 118404

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118405

    'se não existir, erro
    If lErro = AD_SQL_SEM_DADOS Then gError 118406

    'locka o movimento a ser excluído
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 118407

    'deleta da tabela de movimentos de caixa
    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM MovimentosCaixa", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 118408

    tMovimentoCaixa.iFilialEmpresa = objMovimentoCaixa.iFilialEmpresa
    tMovimentoCaixa.iCaixa = objMovimentoCaixa.iCaixa
    
    'carrega um movimento diário para atualização de tabela consolidado diário
    'com os dados da tabela de movimento caixa
    lErro = Mover_Dados_DepositoBancario_CCMovDia1(tMovimentoCaixa, objCCMovDia)
    If lErro <> SUCESSO Then gError 105991

    'chama a função que subtrai o débito excluído do consolidado diário de débitos
    lErro = CF("CCMovDia_Exclui", objCCMovDia)
    If lErro <> SUCESSO Then gError 118409

    'chama a função que subtrai o débito excluído do consolidado mensal de débitos
    lErro = CF("CCMov_Exclui", objCCMovDia)
    If lErro <> SUCESSO Then gError 118410

    'carrega o tipomeiopagtoloja com o valor a ser subtraído do campo saldo e o meio de pagamento dinheiro
    objTipoMeioPagtoLojaFilial.dSaldo = tMovimentoCaixa.dValor
    objTipoMeioPagtoLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_DINHEIRO
    objTipoMeioPagtoLojaFilial.iFilialEmpresa = objMovimentoCaixa.iFilialEmpresa

    'chama a função que altera o saldo da loja na tabela de tipomeiopagtoloja
    lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTipoMeioPagtoLojaFilial)
    If lErro <> SUCESSO Then gError 118411

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Back_Movcx_Exclui_DepositoCC = SUCESSO

    Exit Function

Erro_Back_Movcx_Exclui_DepositoCC:

    Back_Movcx_Exclui_DepositoCC = gErr

    Select Case gErr

        Case 105991, 118409, 118410, 118411
        
        Case 118403
             Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 118404, 118405
             Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_LEITURA", gErr)

        Case 118406
             Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_NAOENCONTRADO", gErr, STRING_CAIXA_CENTRAL, objMovimentoCaixa.lSequencial)

        Case 118407
             Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_LOCK", gErr, STRING_CAIXA_CENTRAL)

        Case 118408
             Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_EXCLUSAO", gErr, STRING_CAIXA_CENTRAL, objMovimentoCaixa.lSequencial)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151237)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Registro_Back_Deposito_Banco(ByVal colRegistro As Collection, sArquivo As String, lRegistro As Long, ByVal iOperacao As Integer) As Long
'Trata o registro de movimentacao de outros e coloca os dados no bd do caixa central. sArquivo contem o nome do arquivo em que sRegistro foi lido.
'iRegistro é o numero do registro.

Dim iPosAtual As Integer
Dim iPosFimAtual As Integer
Dim objMovCx As New ClassMovimentoCaixa
Dim lErro As Long
Dim sRegistro As String

On Error GoTo Erro_Registro_Back_Deposito_Banco
    
    sRegistro = colRegistro.Item(1)
    
    iPosFimAtual = InStr(sRegistro, Chr(vbKeyEscape))

    Select Case iOperacao

        Case INCLUSAO_DEPOSITO_BANCARIO

            'guarda as infos de movimento de caixa
            lErro = CF("Back_Movcx_Deposito_Banco", iPosAtual, iPosFimAtual, sRegistro, objMovCx)
            If lErro <> SUCESSO Then gError 118412
            
            lErro = Verifica_Existencia_Sequencial(objMovCx.lSequencial, objMovCx.iCaixa, objMovCx.iFilialEmpresa)
            If lErro <> SUCESSO And lErro <> 112627 Then gError 118946
    
            If lErro <> 112627 Then
                'insere as infos de movimento de caixa relativos a saque
                lErro = CF("Back_Movcx_Insere_Deposito_Banco", objMovCx)
                If lErro <> SUCESSO Then gError 118413
            End If
            
        Case ALTERACAO_DEPOSITO_BANCARIO

            'guarda as infos de movimento de caixa
            lErro = CF("Back_Movcx_Deposito_Banco", iPosAtual, iPosFimAtual, sRegistro, objMovCx)
            If lErro <> SUCESSO Then gError 118414

            lErro = Verifica_Existencia_Sequencial(objMovCx.lSequencial, objMovCx.iCaixa, objMovCx.iFilialEmpresa)
            If lErro <> SUCESSO And lErro <> 112627 Then gError 118947
    
            If lErro = 112627 Then
                'altera as infos de movimento de caixa relativos a saque
                lErro = CF("Back_Movcx_Altera_Deposito_Banco", objMovCx)
                If lErro <> SUCESSO Then gError 118415
            End If

        Case EXCLUSAO_DEPOSITO_BANCARIO

            'guarda as infos de movimento de caixa
            lErro = CF("Back_Movcx_Deposito_Banco_Exclui", iPosAtual, iPosFimAtual, sRegistro, objMovCx)
            If lErro <> SUCESSO Then gError 118416

            lErro = Verifica_Existencia_Sequencial(objMovCx.lSequencial, objMovCx.iCaixa, objMovCx.iFilialEmpresa)
            If lErro <> SUCESSO And lErro <> 112627 Then gError 118948
    
            If lErro = 112627 Then
                'exclui as infos de movimento de caixa relativos a saque
                lErro = CF("Back_Movcx_Exclui_Deposito_Banco", objMovCx)
                If lErro <> SUCESSO Then gError 118417
            End If

    End Select

    Registro_Back_Deposito_Banco = SUCESSO

    Exit Function

Erro_Registro_Back_Deposito_Banco:

    Registro_Back_Deposito_Banco = gErr

    Select Case gErr

        Case 118412 To 118417, 118946 To 118948

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151238)

    End Select

    Exit Function

End Function

Function Back_Movcx_Deposito_Banco(iPosAtual As Integer, iPosFimAtual As Integer, sRegistro As String, ByVal objMovCx As ClassMovimentoCaixa) As Long
'guarda as infos de movimento de caixa relativos a deposito no caixa central

Dim lErro As Long

On Error GoTo Erro_Back_Movcx_Deposito_Banco

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.lNumMovto = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iCaixa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.lSequencial = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iTipo = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iAdmMeioPagto = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iParcelamento = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dtDataMovimento = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dValor = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.sHistorico = CStr(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iCodConta = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dHora = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    Back_Movcx_Deposito_Banco = SUCESSO

    Exit Function

Erro_Back_Movcx_Deposito_Banco:

    Back_Movcx_Deposito_Banco = gErr

    Select Case gErr

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151239)

    End Select

    Exit Function

End Function

Public Function Back_Movcx_Insere_Deposito_Banco(objMovimentoCaixa As ClassMovimentoCaixa) As Long
'Função que recebe um objMovimentoCaixa preenchido e grava o mesmo na tabela de movimentos de caixa

Dim lErro As Long
Dim iIndice As Integer
Dim objLog As New ClassLog
Dim objCaixa As New ClassCaixa
Dim objContaCorrenteInterna As New ClassContasCorrentesInternas
Dim objTipoMeioPagtoLojaFilial As New ClassTMPLojaFilial
Dim objCCMovDia As New ClassCCMovDia
Dim tMovimentoCaixa As typeMovimentoCaixa
Dim iTipo As Integer
Dim iFilialEmpresa As Integer
Dim alComando(0 To 1) As Long
Dim objMovContaCorrente As New ClassMovContaCorrente
Dim lSeq As Long

On Error GoTo Erro_Back_Movcx_Insere_Deposito_Banco

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir
        If alComando(iIndice) = 0 Then gError 118418
    Next

    'preenche os campos chave para buscar o caixa para posterior lock
    objCaixa.iCodigo = objMovimentoCaixa.iCaixa
    objCaixa.iFilialEmpresa = objMovimentoCaixa.iFilialEmpresa

    'faz um lock no caixa
    lErro = CF("Caixa_Lock", objCaixa)
    If lErro <> SUCESSO And lErro <> 103776 Then gError 118419

    'se a caixa nao estiver cadastrada ==> erro
    If lErro = 103776 Then gError 118420

    'preenche os campos chave para buscar a conta corrente para posterior lock
    objContaCorrenteInterna.iCodigo = objMovimentoCaixa.iCodConta

    'faz um lock na conta corrente selecionada
    lErro = CF("ContasCorrentesInternas_Lock", objContaCorrenteInterna)
    If lErro <> SUCESSO And lErro <> 103900 Then gError 118421

    'se a conta nao estiver cadastrada ==> erro
    If lErro = 103900 Then gError 118422

    'verifica se a data é menor que a data inicial do caixa central na tabela caixa. Se for-> erro
    If objMovimentoCaixa.dtDataMovimento < objCaixa.dtDataInicial Then gError 118423

    'verifica se a data é menor que a data inicial da conta onde está sendo feito o deposito. Se for-> erro
    If objMovimentoCaixa.dtDataMovimento < objContaCorrenteInterna.dtDataInicial Then gError 118424

    'preenche um objccmovdia com os dados do movimento de caixa
    lErro = Mover_Dados_DepositoBancario_CCMovDia(objMovimentoCaixa, objCCMovDia)
    If lErro <> SUCESSO Then gError 118425

    objCCMovDia.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_DINHEIRO

    'adiciona o mesmo no consolidado diário
    lErro = CF("CCMovDia_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 118426

    'adiciona o mesmo no consolidado anual no mês em questão
    lErro = CF("CCMov_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 118427

    'subtrair o valor do movimento de caixa novo em objtipomeiopagtoloja.saldo
    objTipoMeioPagtoLojaFilial.dSaldo = -objMovimentoCaixa.dValor

    'mover Meio_pagamento_Dineiro para objtipomeiopagtoloja.itipo
    objTipoMeioPagtoLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_DINHEIRO
    objTipoMeioPagtoLojaFilial.iFilialEmpresa = objMovimentoCaixa.iFilialEmpresa

    'altera o saldo atual na tabela de tipomeiopagtoloja
    lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTipoMeioPagtoLojaFilial)
    If lErro <> SUCESSO Then gError 118428

    lErro = CF("CtaCorrente_Sequencial_Automatico", objMovimentoCaixa.iCodConta, lSeq)
    If lErro <> SUCESSO Then gError 118429

    'mover os dados de movimento de caixa para movimento de conta corrente
    lErro = CF("Back_Mover_Dados_Movcc_Movcx", objMovimentoCaixa, objMovContaCorrente, TIPOMEIOPAGTOLOJA_DINHEIRO, MOVCCI_DEP_DIN_LOJA, lSeq, DINHEIRO)
    If lErro <> SUCESSO Then gError 118430

    'insere o movimento de conta corrente referente ao deposito bancario no caixa central
    lErro = CF("Back_MovCCI_Insere_Deposito", objMovContaCorrente)
    If lErro <> SUCESSO Then gError 118431

    objMovimentoCaixa.lNumRefInterna = objMovContaCorrente.lNumMovto

    'executa a inserção na tabela de movimentos de caixa
    lErro = Comando_Executar(alComando(0), "INSERT INTO MovimentosCaixa(FilialEmpresa,NumMovto,Caixa,Sequencial,Tipo,AdmMeioPagto,Parcelamento,TipoCartao,Numero,DataMovimento,Valor,Historico,Favorecido,CupomFiscal,NumRefInterna,MovtoTransf,MovtoEstorno,Gerente,CodConta,Hora) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
    objMovimentoCaixa.iFilialEmpresa, objMovimentoCaixa.lNumMovto, objMovimentoCaixa.iCaixa, objMovimentoCaixa.lSequencial, objMovimentoCaixa.iTipo, objMovimentoCaixa.iAdmMeioPagto, objMovimentoCaixa.iParcelamento, objMovimentoCaixa.iTipoCartao, objMovimentoCaixa.lNumero, objMovimentoCaixa.dtDataMovimento, objMovimentoCaixa.dValor, objMovimentoCaixa.sHistorico, objMovimentoCaixa.sFavorecido, objMovimentoCaixa.lCupomFiscal, objMovimentoCaixa.lNumRefInterna, objMovimentoCaixa.lMovtoTransf, objMovimentoCaixa.lMovtoEstorno, objMovimentoCaixa.iGerente, objMovimentoCaixa.iCodConta, objMovimentoCaixa.dHora)
    If lErro <> SUCESSO Then gError 118432

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Back_Movcx_Insere_Deposito_Banco = SUCESSO

    Exit Function

Erro_Back_Movcx_Insere_Deposito_Banco:

    Back_Movcx_Insere_Deposito_Banco = gErr

    Select Case gErr

        Case 118418
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 118419, 118421, 118425 To 118431
        
        Case 118420
            Call Rotina_Erro(vbOKOnly, "ERRO_CAIXA_NAOENCONTRADO", gErr, STRING_CAIXA_CENTRAL)

        Case 118422
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTASCORRENTESINTERNAS_NAOENCONTRADA", objContaCorrenteInterna.iCodigo)
        
        Case 118423
            Call Rotina_Erro(vbOKOnly, "ERRO_DATAMOVIMENTOCAIXA_MAIOR_DATAINICIALCAIXA", gErr, objCaixa.dtDataInicial)
                
        Case 118424
            Call Rotina_Erro(vbOKOnly, "ERRO_DATAMOVIMENTOCAIXA_MAIOR_DATAINICIALCONTA", gErr, objContaCorrenteInterna.dtDataInicial)
        
        Case 118432
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_INSERCAO", gErr, STRING_CAIXA_CENTRAL, objMovimentoCaixa.lSequencial)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151240)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Back_Mover_Dados_Movcc_Movcx(objMovCx As ClassMovimentoCaixa, objMovContaCorrente As ClassMovContaCorrente, ByVal iTipoMeioPagtoLoja As Integer, ByVal iTipo As Integer, ByVal lSeq As Long, ByVal iTipoMeioPagto As Integer) As Long
'mover os dados de movimento de caixa para movimento de conta corrente

Dim lErro As Long

On Error GoTo Erro_Back_Mover_Dados_Movcc_Movcx

    'Move os dados da tela para objmovcontacorrente
    objMovContaCorrente.iCodConta = objMovCx.iCodConta
    objMovContaCorrente.lSequencial = lSeq
    objMovContaCorrente.dtDataMovimento = objMovCx.dtDataMovimento
    objMovContaCorrente.dValor = objMovCx.dValor
    objMovContaCorrente.iTipo = iTipo
    objMovContaCorrente.iTipoMeioPagto = iTipoMeioPagto
    objMovContaCorrente.iTipoMeioPagtoLoja = iTipoMeioPagtoLoja
    objMovContaCorrente.sHistorico = objMovCx.sHistorico
    objMovContaCorrente.iFilialEmpresa = objMovCx.iFilialEmpresa
    objMovContaCorrente.iExcluido = MOVCONTACORRENTE_NAO_EXCLUIDO
    objMovContaCorrente.iPortador = 0
    objMovContaCorrente.iConciliado = 0
    objMovContaCorrente.iFavorecido = 0
    objMovContaCorrente.lNumRefInterna = objMovCx.lNumMovto

    Back_Mover_Dados_Movcc_Movcx = SUCESSO

    Exit Function

Erro_Back_Mover_Dados_Movcc_Movcx:

    Back_Mover_Dados_Movcc_Movcx = gErr

    Select Case gErr

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", Err, Error$, 151241)

    End Select

    Exit Function

End Function

Function Back_MovCCI_Insere_Deposito(ByVal objMovContaCorrente As ClassMovContaCorrente) As Long
'insere o movimento de conta corrente referente ao deposito bancario no caixa central

'?????MARIO - FALTA A PARTE CONTABIL

Dim iIndice As Integer
Dim lNumMovto As Long
Dim alComando(0 To 0) As Long
Dim dtData As Date
Dim dtDataSaldoInicial As Date
Dim lErro As Long

On Error GoTo Erro_Back_MovCCI_Insere_Deposito

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir
        If alComando(iIndice) = 0 Then gError 118433
    Next

    'Pega o numero do proximo movCci
    lErro = CF("MovCCI_Automatico", lNumMovto)
    If lErro <> SUCESSO Then gError 118434

    objMovContaCorrente.lNumMovto = lNumMovto

    'Insere o Deposito na Tabela MovimentosContaCorrente
    lErro = Comando_Executar(alComando(0), "INSERT INTO MovimentosContaCorrente (NumMovto, CodConta, Sequencial, Tipo, Excluido, TipoMeioPagto, DataMovimento, Valor, Historico, NumRefExterna, FilialEmpresa, Portador, Conciliado, Favorecido, NumRefInterna) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", lNumMovto, _
    objMovContaCorrente.iCodConta, objMovContaCorrente.lSequencial, objMovContaCorrente.iTipo, objMovContaCorrente.iExcluido, objMovContaCorrente.iTipoMeioPagto, objMovContaCorrente.dtDataMovimento, objMovContaCorrente.dValor, objMovContaCorrente.sHistorico, objMovContaCorrente.sNumRefExterna, objMovContaCorrente.iFilialEmpresa, objMovContaCorrente.iPortador, objMovContaCorrente.iConciliado, objMovContaCorrente.iFavorecido, objMovContaCorrente.lNumRefInterna)
    If lErro <> AD_SQL_SUCESSO Then gError 118435

    dtData = objMovContaCorrente.dtDataMovimento

    'Atualiza os dados em CCIMovDia
    lErro = CF("CCIMovDia_Grava", objMovContaCorrente.iCodConta, dtData, objMovContaCorrente.dValor)
    If lErro <> SUCESSO Then gError 118436

    'Atualiza os dados em CCIMov
    lErro = CF("CCIMov_Grava", objMovContaCorrente.iCodConta, Year(dtData), Month(dtData), objMovContaCorrente.dValor)
    If lErro <> SUCESSO Then gError 118437

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Back_MovCCI_Insere_Deposito = SUCESSO

    Exit Function

Erro_Back_MovCCI_Insere_Deposito:

    Back_MovCCI_Insere_Deposito = gErr

    Select Case gErr
        
        Case 118433
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 118434, 118436, 118437
        
        Case 118435
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCONTACORRENTE", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151242)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function Back_Movcx_Altera_Deposito_Banco(objMovimentoCaixa As ClassMovimentoCaixa) As Long
'Função que recebe um objMovimentoCaixa preenchido e grava o mesmo na tabela de movimentos de caixa

Dim lErro As Long
Dim iIndice As Integer
Dim objLog As New ClassLog
Dim objCaixa As New ClassCaixa
Dim objContaCorrenteInterna As New ClassContasCorrentesInternas
Dim objTipoMeioPagtoLojaFilial As New ClassTMPLojaFilial
Dim objCCMovDia As New ClassCCMovDia
Dim tMovimentoCaixa As typeMovimentoCaixa
Dim iTipo As Integer
Dim iFilialEmpresa As Integer
Dim alComando(0 To 1) As Long
Dim objMovContaCorrente As New ClassMovContaCorrente

On Error GoTo Erro_Back_Movcx_Altera_Deposito_Banco

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir
        If alComando(iIndice) = 0 Then gError 118438
    Next

    'preenche os campos chave para buscar o caixa para posterior lock
    objCaixa.iCodigo = objMovimentoCaixa.iCaixa
    objCaixa.iFilialEmpresa = objMovimentoCaixa.iFilialEmpresa

    'faz um lock no caixa
    lErro = CF("Caixa_Lock", objCaixa)
    If lErro <> SUCESSO And lErro <> 103776 Then gError 118439

    If lErro = 103776 Then gError 118440

    'preenche os campos chave para buscar a conta corrente para posterior lock
    objContaCorrenteInterna.iCodigo = objMovimentoCaixa.iCodConta

    'faz um lock na conta corrente selecionada
    lErro = CF("ContasCorrentesInternas_Lock", objContaCorrenteInterna)
    If lErro <> SUCESSO And lErro <> 103900 Then gError 118441

    If lErro = 103900 Then gError 118442

    'verifica se a data é menor que a data inicial do caixa central na tabela caixa. Se for-> erro
    If objMovimentoCaixa.dtDataMovimento < objCaixa.dtDataInicial Then gError 118443

    'verifica se a data é menor que a data inicial da conta onde está sendo feito o deposito. Se for-> erro
    If objMovimentoCaixa.dtDataMovimento < objContaCorrenteInterna.dtDataInicial Then gError 118444

    'inicializa as strings
    tMovimentoCaixa.sHistorico = String(STRING_MOVIMENTOCAIXA_HISTORICO, 0)
    tMovimentoCaixa.sFavorecido = String(STRING_MOVIMENTOCAIXA_FAVORECIDO, 0)

    'verifica se já existe movimento cadastrado para o caixa
    'faz o select na tabela
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Caixa, Sequencial,FilialEmpresa, NumMovto , Tipo , AdmMeioPagto , Parcelamento, TipoCartao, Numero, DataMovimento, Valor, Historico, Favorecido,CupomFiscal,NumRefInterna,MovtoTransf,MovtoEstorno,Gerente,CodConta FROM MovimentosCaixa WHERE FilialEmpresa = ? AND Caixa = ? AND Sequencial = ?", 0, _
    tMovimentoCaixa.iCaixa, tMovimentoCaixa.lSequencial, tMovimentoCaixa.iFilialEmpresa, tMovimentoCaixa.lNumMovto, tMovimentoCaixa.iTipo, tMovimentoCaixa.iAdmMeioPagto, tMovimentoCaixa.iParcelamento, tMovimentoCaixa.iTipoCartao, tMovimentoCaixa.lNumero, tMovimentoCaixa.dtDataMovimento, tMovimentoCaixa.dValor, tMovimentoCaixa.sHistorico, tMovimentoCaixa.sFavorecido, tMovimentoCaixa.lCupomFiscal, tMovimentoCaixa.lNumRefInterna, tMovimentoCaixa.lMovtoTransf, tMovimentoCaixa.lMovtoEstorno, tMovimentoCaixa.iGerente, tMovimentoCaixa.iCodConta, objMovimentoCaixa.iFilialEmpresa, objMovimentoCaixa.iCaixa, objMovimentoCaixa.lSequencial)
    If lErro <> SUCESSO Then gError 118445

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118446

    If lErro = AD_SQL_SEM_DADOS Then gError 118447

    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> SUCESSO Then gError 118448

    'se o movimento não for de deposito--> erro
    If tMovimentoCaixa.iTipo <> MOVIMENTO_CAIXA_DEPOSITO_BANCARIO Then gError 118449

    'carrega um movimento diário para atualização de tabela consolidado diário
    'com os dados da tabela de movimento caixa
    lErro = Mover_Dados_DepositoBancario_CCMovDia1(tMovimentoCaixa, objCCMovDia)
    If lErro <> SUCESSO Then gError 118450

    'subtrai o movimento em questão do consolidado diário (trata-se de uma atualização de um movimento)
    lErro = CF("CCMovDia_Exclui", objCCMovDia)
    If lErro <> SUCESSO Then gError 118451

    'subtrai o movimento em questão do consolidado anual no mês atual
    lErro = CF("CCMov_Exclui", objCCMovDia)
    If lErro <> SUCESSO Then gError 118452

    'Alterar os dados da Tabela MovimentosCaixa
    lErro = Comando_ExecutarPos(alComando(1), "UPDATE MovimentosCaixa SET DataMovimento = ?, Valor =? , Favorecido = ? , Historico = ?, CodConta=?", alComando(0), objMovimentoCaixa.dtDataMovimento, objMovimentoCaixa.dValor, objMovimentoCaixa.sFavorecido, objMovimentoCaixa.sHistorico, objMovimentoCaixa.iCodConta)
    If lErro <> SUCESSO Then gError 118453

    'carrega um tipomeiopagtoloja com o movimento excluído para posterior alteração do saldo na tabela de tipomeiopagtoloja
    objTipoMeioPagtoLojaFilial.dSaldo = tMovimentoCaixa.dValor
    objTipoMeioPagtoLojaFilial.iFilialEmpresa = tMovimentoCaixa.iFilialEmpresa

    'preenche um objccmovdia com os dados do movimento de caixa
    lErro = Mover_Dados_DepositoBancario_CCMovDia(objMovimentoCaixa, objCCMovDia)
    If lErro <> SUCESSO Then gError 118454

    objCCMovDia.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_DINHEIRO

    'adiciona o mesmo no consolidado diário
    lErro = CF("CCMovDia_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 118455

    'adiciona o mesmo no consolidado anual no mês em questão
    lErro = CF("CCMov_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 118456

    'subtrair o valor do movimento de caixa novo em objtipomeiopagtoloja.saldo
    objTipoMeioPagtoLojaFilial.dSaldo = objTipoMeioPagtoLojaFilial.dSaldo - objMovimentoCaixa.dValor

    'mover Meio_pagamento_Dineiro para objtipomeiopagtoloja.itipo
    objTipoMeioPagtoLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_DINHEIRO
    objTipoMeioPagtoLojaFilial.iFilialEmpresa = objMovimentoCaixa.iFilialEmpresa

    'altera o saldo atual na tabela de tipomeiopagtoloja
    lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTipoMeioPagtoLojaFilial)
    If lErro <> SUCESSO Then gError 118457

    'mover os dados de movimento de caixa para movimento de conta corrente
    lErro = CF("Back_Mover_Dados_Movcc_Movcx", objMovimentoCaixa, objMovContaCorrente, TIPOMEIOPAGTOLOJA_DINHEIRO, MOVCCI_DEP_DIN_LOJA, 0, DINHEIRO)
    If lErro <> SUCESSO Then gError 118458

    objMovContaCorrente.lNumMovto = tMovimentoCaixa.lNumRefInterna

    'insere o movimento de conta corrente referente ao deposito bancario no caixa central
    lErro = CF("Back_MovCCI_Altera_Deposito", objMovContaCorrente)
    If lErro <> SUCESSO Then gError 118459

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Back_Movcx_Altera_Deposito_Banco = SUCESSO

    Exit Function

Erro_Back_Movcx_Altera_Deposito_Banco:

    Back_Movcx_Altera_Deposito_Banco = gErr

    Select Case gErr

        Case 118438
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 118439, 118441, 118450, 118451, 118452, 118454 To 118459
        
        Case 118440
            Call Rotina_Erro(vbOKOnly, "ERRO_CAIXA_NAOENCONTRADO", gErr, STRING_CAIXA_CENTRAL)

        Case 118442
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTASCORRENTESINTERNAS_NAOENCONTRADA", objContaCorrenteInterna.iCodigo)
        
        Case 118443
            Call Rotina_Erro(vbOKOnly, "ERRO_DATAMOVIMENTOCAIXA_MAIOR_DATAINICIALCAIXA", gErr, objCaixa.dtDataInicial)
                
        Case 118444
            Call Rotina_Erro(vbOKOnly, "ERRO_DATAMOVIMENTOCAIXA_MAIOR_DATAINICIALCONTA", gErr, objContaCorrenteInterna.dtDataInicial)
        
        Case 118445, 118446
             Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_LEITURA", gErr)

        Case 118447
             Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_NAOENCONTRADO", gErr, STRING_CAIXA_CENTRAL, objMovimentoCaixa.lSequencial)

        Case 118448
             Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_LOCK", gErr, STRING_CAIXA_CENTRAL)
             
        Case 118449
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPO_MOVIMENTO_NAO_DEPOSITO_BANCARIO", gErr, STRING_CAIXA_CENTRAL, objMovimentoCaixa.lSequencial)
        
        Case 118453
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_ALTERACAO", gErr, STRING_CAIXA_CENTRAL, objMovimentoCaixa.lSequencial)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151243)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Back_MovCCI_Altera_Deposito(ByVal objMovContaCorrente As ClassMovContaCorrente) As Long
'Função que é responsável pela atualizacao dos depositos em conta corrente da empresa no BD
'AVISO: Essa Rotina deve ser chamada dentro de uma transacao

Dim tMovContaCorrente As typeMovContaCorrente
Dim lErro As Long
Dim lNumMovto As Long
Dim dtData As Date
Dim lComando As Long
Dim lComando1 As Long
Dim vbMsgRes As VbMsgBoxResult

On Error GoTo Erro_Back_MovCCI_Altera_Deposito

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 118460

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 118461

    'Pesquisa o movimento pela nummovto do movimentocaixa
    lErro = Comando_ExecutarPos(lComando, "SELECT Excluido, Tipo, CodConta, TipoMeioPagto, dataMovimento, Valor, NumMovto, Conciliado FROM MovimentosContaCorrente WHERE NumMovto = ? ", 0, tMovContaCorrente.iExcluido, tMovContaCorrente.iTipo, tMovContaCorrente.iCodConta, tMovContaCorrente.iTipoMeioPagto, tMovContaCorrente.dtDataMovimento, tMovContaCorrente.dValor, tMovContaCorrente.lNumMovto, tMovContaCorrente.iConciliado, objMovContaCorrente.lNumMovto)
    If lErro <> AD_SQL_SUCESSO Then gError 118462

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118463

    If lErro = AD_SQL_SEM_DADOS Then gError 118464

    'Loca o movimento
    lErro = Comando_LockExclusive(lComando)
    If lErro <> AD_SQL_SUCESSO Then gError 118465

    objMovContaCorrente.lNumMovto = tMovContaCorrente.lNumMovto

    'Verifica se esta excluido e se é do tipo Deposito
    If tMovContaCorrente.iExcluido = MOVCONTACORRENTE_EXCLUIDO Then gError 118466

    If tMovContaCorrente.iTipo <> objMovContaCorrente.iTipo Then gError 118467

    'se estiver conciliado
    If tMovContaCorrente.iConciliado <> NAO_CONCILIADO Then

        'mantem os valores de data e valor que nao podem ser alterados apos conciliacao.
        objMovContaCorrente.dtDataMovimento = tMovContaCorrente.dtDataMovimento
        objMovContaCorrente.dValor = tMovContaCorrente.dValor

    End If

    'Atualiza a tabela
    lErro = Comando_ExecutarPos(lComando1, "UPDATE MovimentosContaCorrente SET Historico=?, Valor = ?, DataMovimento = ? ", lComando, _
    objMovContaCorrente.sHistorico, objMovContaCorrente.dValor, objMovContaCorrente.dtDataMovimento)
    If lErro <> AD_SQL_SUCESSO Then gError 118468

    dtData = tMovContaCorrente.dtDataMovimento

    'Exclui o movimento com os dados antigos da tabela CCIMOVDIA
    lErro = CF("CCIMovDia_Exclui", objMovContaCorrente.iCodConta, dtData, tMovContaCorrente.dValor)
    If lErro <> SUCESSO Then gError 118469

    'Exclui o movimento com os dados antigos da tabela CCIMOVD
    lErro = CF("CCIMov_Exclui", objMovContaCorrente.iCodConta, Year(dtData), Month(dtData), tMovContaCorrente.dValor)
    If lErro <> SUCESSO Then gError 118470

    dtData = objMovContaCorrente.dtDataMovimento

    'Insere o movimento nas tabelas CCIMOV e CCIMOVDIa com os dados ja atualizados
    lErro = CF("CCIMovDia_Grava", objMovContaCorrente.iCodConta, dtData, objMovContaCorrente.dValor)
    If lErro <> SUCESSO Then gError 118471

    lErro = CF("CCIMov_Grava", objMovContaCorrente.iCodConta, Year(dtData), Month(dtData), objMovContaCorrente.dValor)
    If lErro <> SUCESSO Then gError 118472

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Back_MovCCI_Altera_Deposito = SUCESSO

    Exit Function

Erro_Back_MovCCI_Altera_Deposito:

    Back_MovCCI_Altera_Deposito = gErr

    Select Case gErr
        
        Case 118460, 118461
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 118462, 118463
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCONTACORRENTE1", gErr, objMovContaCorrente.iCodConta, objMovContaCorrente.lSequencial)
        
        Case 118464
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCONTACORRENTE_NAO_EXISTE", gErr)
        
        Case 118465
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_MOVIMENTOSCONTACORRENTE1", gErr, objMovContaCorrente.iCodConta, objMovContaCorrente.lSequencial)

        Case 118466
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVCONTACORRENTE_EXCLUIDO", gErr, objMovContaCorrente.iCodConta, objMovContaCorrente.lSequencial)

        Case 118467
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPO_MOVIMENTO_NAO_DEPOSITO", gErr, objMovContaCorrente.lSequencial, objMovContaCorrente.iCodConta)

        Case 118468
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_MOVIMENTOSCONTACORRENTE", gErr)

        Case 118469 To 118472
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151244)

    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function


Function Back_Movcx_Deposito_Banco_Exclui(iPosAtual As Integer, iPosFimAtual As Integer, sRegistro As String, ByVal objMovCx As ClassMovimentoCaixa) As Long
'guarda as infos de movimento de caixa relativos a exclusao de um deposito do caixa central em uma conta

Dim lErro As Long

On Error GoTo Erro_Back_Movcx_Deposito_Banco_Exclui

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iCaixa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.lSequencial = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    Back_Movcx_Deposito_Banco_Exclui = SUCESSO

    Exit Function

Erro_Back_Movcx_Deposito_Banco_Exclui:

    Back_Movcx_Deposito_Banco_Exclui = gErr

    Select Case gErr

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151245)

    End Select

    Exit Function

End Function

Public Function Back_Movcx_Exclui_Deposito_Banco(ByVal objMovimentoCaixa As ClassMovimentoCaixa) As Long
'exclui um Movimento de Caixa e atualiza o consolidado diário e o mensal, fazendo a subtração do atual no anterior

Dim lErro As Long
Dim alComando(1) As Long
Dim lTransacao As Long
Dim iIndice As Integer
Dim iCaixa As Integer
Dim lSequencial As Long
Dim objTipoMeioPagtoLojaFilial As New ClassTMPLojaFilial
Dim lNumRefInterna As Long
Dim objCCMovDia As New ClassCCMovDia
Dim objMovContaCorrente As New ClassMovContaCorrente
Dim tMovimentoCaixa As typeMovimentoCaixa

On Error GoTo Erro_Back_Movcx_Exclui_Deposito_Banco

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir
        If alComando(iIndice) = 0 Then gError 118473
    Next

    'seleciona na tabela de movimentos de caixa se existe o movimento com sequencial passado por parâmetro
    lErro = Comando_ExecutarPos(alComando(0), "SELECT NumRefInterna, Valor, DataMovimento  FROM MovimentosCaixa WHERE FilialEmpresa = ? AND Caixa = ? AND Sequencial = ? ", 0, _
    lNumRefInterna, tMovimentoCaixa.dValor, tMovimentoCaixa.dtDataMovimento, objMovimentoCaixa.iFilialEmpresa, objMovimentoCaixa.iCaixa, objMovimentoCaixa.lSequencial)
    If lErro <> AD_SQL_SUCESSO Then gError 118474

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118475

    'se não existir, erro
    If lErro = AD_SQL_SEM_DADOS Then gError 118476

    'locka o movimento a ser excluído
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 118477

    'deleta da tabela de movimentos de caixa
    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM MovimentosCaixa", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 118478

    tMovimentoCaixa.iFilialEmpresa = objMovimentoCaixa.iFilialEmpresa
    tMovimentoCaixa.iCaixa = objMovimentoCaixa.iCaixa

    'carrega um movimento diário para atualização de tabela consolidado diário
    'com os dados da tabela de movimento caixa
    lErro = Mover_Dados_DepositoBancario_CCMovDia1(tMovimentoCaixa, objCCMovDia)
    If lErro <> SUCESSO Then gError 105990

    'chama a função que subtrai o débito excluído do consolidado diário de débitos
    lErro = CF("CCMovDia_Exclui", objCCMovDia)
    If lErro <> SUCESSO Then gError 118479

    'chama a função que subtrai o débito excluído do consolidado mensal de débitos
    lErro = CF("CCMov_Exclui", objCCMovDia)
    If lErro <> SUCESSO Then gError 118480

    'carrega o tipomeiopagtoloja com o valor a ser subtraído do campo saldo e o meio de pagamento dinheiro
    objTipoMeioPagtoLojaFilial.dSaldo = -tMovimentoCaixa.dValor
    objTipoMeioPagtoLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_DINHEIRO
    objTipoMeioPagtoLojaFilial.iFilialEmpresa = objMovimentoCaixa.iFilialEmpresa

    'chama a função que altera o saldo da loja na tabela de tipomeiopagtoloja
    lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTipoMeioPagtoLojaFilial)
    If lErro <> SUCESSO Then gError 118481

    objMovContaCorrente.lNumMovto = lNumRefInterna
    objMovContaCorrente.iTipo = MOVCCI_DEP_DIN_LOJA

    lErro = CF("Back_MovCCI_Exclui_Deposito", objMovContaCorrente)
    If lErro <> SUCESSO Then gError 118482

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Back_Movcx_Exclui_Deposito_Banco = SUCESSO

    Exit Function

Erro_Back_Movcx_Exclui_Deposito_Banco:

    Back_Movcx_Exclui_Deposito_Banco = gErr

    Select Case gErr

        Case 105990, 118479 To 118482

        Case 118473
             Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 118474, 118475
             Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_LEITURA", gErr, STRING_CAIXA_CENTRAL, objMovimentoCaixa.lSequencial)

        Case 118476
             Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_NAOENCONTRADO", gErr, STRING_CAIXA_CENTRAL, objMovimentoCaixa.lSequencial)

        Case 118477
             Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_LOCK", gErr, STRING_CAIXA_CENTRAL, objMovimentoCaixa.lSequencial)

        Case 118478
             Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_EXCLUSAO", gErr, STRING_CAIXA_CENTRAL, objMovimentoCaixa.lSequencial)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151246)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Back_MovCCI_Exclui_Deposito(ByVal objMovContaCorrente As ClassMovContaCorrente) As Long
'Exclui o movimento de deposito passado como parametro, dentro de uma transacao
'TEM QUE ESTAR DENTRO DE UMA TRANSACAO

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim tMovContaCorrente As typeMovContaCorrente
Dim dDeb As Double
Dim iAno As Integer
Dim iMes As Integer, dValor As Double

On Error GoTo Erro_Back_MovCCI_Exclui_Deposito

    lComando = 0
    lComando1 = 0

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 118483

    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 118484

    'Verifica se o movimento esta cadastrado
    lErro = Comando_ExecutarPos(lComando, "SELECT CodConta, Excluido, Tipo, Conciliado, Valor, DataMovimento FROM MovimentosContaCorrente WHERE NumMovto = ? ", 0, tMovContaCorrente.iCodConta, tMovContaCorrente.iExcluido, tMovContaCorrente.iTipo, tMovContaCorrente.iConciliado, tMovContaCorrente.dValor, tMovContaCorrente.dtDataMovimento, objMovContaCorrente.lNumMovto)
    If lErro <> AD_SQL_SUCESSO Then gError 118485

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118486

    'se o movimento nao esta cadastrado erro
    If lErro = AD_SQL_SEM_DADOS Then gError 118487

    lErro = Comando_LockExclusive(lComando)
    If lErro <> AD_SQL_SUCESSO Then gError 118488

    'verifica se o mov. ja foi excluido
    If tMovContaCorrente.iExcluido = MOVCONTACORRENTE_EXCLUIDO Then gError 118489

    'Verifica se o movimento se refere ao tipo certo
    If tMovContaCorrente.iTipo <> objMovContaCorrente.iTipo Then gError 118490

    'Verifica se esta conciliado
    If tMovContaCorrente.iConciliado <> 0 Then gError 118491

    'Exclui o Registro
    lErro = Comando_ExecutarPos(lComando1, "UPDATE MovimentosContaCorrente SET Excluido = ?", lComando, MOVCONTACORRENTE_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then gError 118492

    'obtem valor para atualizar acumuladores por dia e mes
    Select Case objMovContaCorrente.iTipo

        Case MOVCCI_DEP_DIN_LOJA
            dValor = tMovContaCorrente.dValor

        Case Else
            gError 118493

    End Select

    'Chama a rotina para Excluir o movimento conta da tabela CCIMovDia
    lErro = CF("CCIMovDia_Exclui", tMovContaCorrente.iCodConta, tMovContaCorrente.dtDataMovimento, tMovContaCorrente.dValor)
    If lErro <> SUCESSO Then gError 118494

    iAno = Year(tMovContaCorrente.dtDataMovimento)
    iMes = Month(tMovContaCorrente.dtDataMovimento)

    'Chama a rotina para Excluir o movimento conta da tabela CCIMov
    lErro = CF("CCIMov_Exclui", tMovContaCorrente.iCodConta, iAno, iMes, tMovContaCorrente.dValor)
    If lErro <> SUCESSO Then gError 118495

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Back_MovCCI_Exclui_Deposito = SUCESSO

    Exit Function

Erro_Back_MovCCI_Exclui_Deposito:

    Back_MovCCI_Exclui_Deposito = gErr

    Select Case gErr

        Case 118483, 118484
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 118485, 118486
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCONTACORRENTE1", gErr, objMovContaCorrente.iCodConta, objMovContaCorrente.lSequencial)

        Case 118487
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVCONTACORRENTE_INEXISTENTE", gErr, objMovContaCorrente.iCodConta, objMovContaCorrente.lSequencial)

        Case 118488
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_MOVIMENTOSCONTACORRENTE", gErr, objMovContaCorrente.iCodConta, objMovContaCorrente.lSequencial)

        Case 118489
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVCONTACORRENTE_EXCLUIDO", gErr)

        Case 118490
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPOMOV_DIFERENTE", gErr)

        Case 118491
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVCONTACORRENTE_CONCILIADO", gErr, objMovContaCorrente.iCodConta, objMovContaCorrente.lSequencial)

        Case 118492
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_MOVIMENTOSCONTACORRENTE", gErr)

        Case 118493
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPOMOV_DIFERENTE", gErr)
        
        Case 118494, 118495

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151247)

    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)

    Exit Function

End Function

Function Registro_Back_Bordero_Boleto(ByVal colRegistro As Collection, sArquivo As String, lRegistro As Long, ByVal iOperacao As Integer) As Long
'Trata o registro de bordero de boleto e coloca os dados no bd do backoffice. sArquivo contem o nome do arquivo em que sRegistro foi lido.
'iRegistro é o numero do registro.

Dim iPosAtual As Integer
Dim iPosFimAtual As Integer
Dim objBorderoBoleto As New ClassBorderoBoleto
Dim sRegistro As String
Dim lErro As Long

On Error GoTo Erro_Registro_Back_Bordero_Boleto

    sRegistro = colRegistro.Item(1)

    iPosFimAtual = InStr(sRegistro, Chr(vbKeyEscape))

    'guarda as infos de bordero
    lErro = CF("Back_Bordero_Boleto", iPosAtual, iPosFimAtual, sRegistro, objBorderoBoleto)
    If lErro <> SUCESSO Then gError 118496

    'guarda as infos dos boletos
    lErro = CF("Back_Bordero_Boleto_Col", iPosAtual, iPosFimAtual, colRegistro, objBorderoBoleto)
    If lErro <> SUCESSO Then gError 118497

    Select Case iOperacao

        Case INCLUSAO_BORDEROBOLETO

            'guarda as infos de bordero boleto
            lErro = CF("Back_Bordero_Boleto_Gravar", objBorderoBoleto)
            If lErro <> SUCESSO And lErro <> 118952 Then gError 118498

        Case Else
            gError 117566

    End Select

    Registro_Back_Bordero_Boleto = SUCESSO

    Exit Function

Erro_Registro_Back_Bordero_Boleto:

    Registro_Back_Bordero_Boleto = gErr

    Select Case gErr

        Case 117566
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPOMOV_DIFERENTE", gErr)
        
        Case 118496, 118497, 118498

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151248)

    End Select

    Exit Function

End Function

Function Back_Bordero_Boleto(iPosAtual As Integer, iPosFimAtual As Integer, sRegistro As String, ByVal objBorderoBoleto As ClassBorderoBoleto) As Long
'guarda as infos de movimento de caixa relativos a bordero boleto

Dim lErro As Long

On Error GoTo Erro_Back_Bordero_Boleto

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objBorderoBoleto.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objBorderoBoleto.lNumBordero = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objBorderoBoleto.sNumero = CStr(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objBorderoBoleto.dtDataImpressao = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objBorderoBoleto.dtDataEnvio = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objBorderoBoleto.dtDataBackoffice = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objBorderoBoleto.iExibeTela = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objBorderoBoleto.dValorEnviarNCC = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objBorderoBoleto.dValorEnviarNCD = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objBorderoBoleto.iCodigoRede = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    Back_Bordero_Boleto = SUCESSO

    Exit Function

Erro_Back_Bordero_Boleto:

    Back_Bordero_Boleto = gErr

    Select Case gErr

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151249)

    End Select

    Exit Function

End Function

Function Back_Bordero_Boleto_Col(iPosAtual As Integer, iPosFimAtual As Integer, colRegistro As Collection, ByVal objBorderoBoleto As ClassBorderoBoleto) As Long
'guarda as infos de boletos

Dim lErro As Long
Dim vRegistro As Variant
Dim objBorderoBoletoItem As ClassBorderoBoletoItem

On Error GoTo Erro_Back_Bordero_Boleto_Col

    'pula o vbKeyEscape
    iPosFimAtual = iPosFimAtual + 1

    For Each vRegistro In colRegistro

        Do While Mid(vRegistro, iPosFimAtual, 1) = Chr(vbKeyControl)

            Set objBorderoBoletoItem = New ClassBorderoBoletoItem

            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, vRegistro, Chr(vbKeyEscape))
            objBorderoBoletoItem.lNumIntDoc = CLng(Mid(vRegistro, iPosAtual, iPosFimAtual - iPosAtual))

            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, vRegistro, Chr(vbKeyEscape))
            objBorderoBoletoItem.iAdmMeioPagto = CInt(Mid(vRegistro, iPosAtual, iPosFimAtual - iPosAtual))

            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, vRegistro, Chr(vbKeyEscape))
            objBorderoBoletoItem.dValor = CDbl(Mid(vRegistro, iPosAtual, iPosFimAtual - iPosAtual))

            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, vRegistro, Chr(vbKeyEscape))
            objBorderoBoletoItem.iParcelamento = CInt(Mid(vRegistro, iPosAtual, iPosFimAtual - iPosAtual))

            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, vRegistro, Chr(vbKeyEscape))
            objBorderoBoletoItem.objMovCx.lNumMovto = CLng(Mid(vRegistro, iPosAtual, iPosFimAtual - iPosAtual))

            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, vRegistro, Chr(vbKeyEscape))
            objBorderoBoletoItem.objMovCx.iCaixa = CInt(Mid(vRegistro, iPosAtual, iPosFimAtual - iPosAtual))

            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, vRegistro, Chr(vbKeyEscape))
            objBorderoBoletoItem.objMovCx.lSequencial = CLng(Mid(vRegistro, iPosAtual, iPosFimAtual - iPosAtual))

            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, vRegistro, Chr(vbKeyEscape))
            objBorderoBoletoItem.objMovCx.iTipo = CInt(Mid(vRegistro, iPosAtual, iPosFimAtual - iPosAtual))

            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, vRegistro, Chr(vbKeyEscape))
            objBorderoBoletoItem.objMovCx.dHora = CDbl(Mid(vRegistro, iPosAtual, iPosFimAtual - iPosAtual))

            objBorderoBoletoItem.objMovCx.iFilialEmpresa = objBorderoBoleto.iFilialEmpresa
            objBorderoBoletoItem.iFilialEmpresa = objBorderoBoleto.iFilialEmpresa
            objBorderoBoletoItem.objMovCx.iAdmMeioPagto = objBorderoBoletoItem.iAdmMeioPagto
            objBorderoBoletoItem.objMovCx.iParcelamento = objBorderoBoletoItem.iParcelamento
            objBorderoBoletoItem.objMovCx.iTipoCartao = TIPO_MANUAL
            objBorderoBoletoItem.objMovCx.dtDataMovimento = objBorderoBoleto.dtDataEnvio
            objBorderoBoletoItem.objMovCx.dValor = objBorderoBoletoItem.dValor
            objBorderoBoletoItem.objMovCx.lNumRefInterna = objBorderoBoletoItem.lNumIntDoc
            objBorderoBoletoItem.lNumBordero = objBorderoBoleto.lNumBordero

            objBorderoBoleto.colBorderoBoletoItem.Add objBorderoBoletoItem

            'pula o vbKeyEscape
            iPosFimAtual = iPosFimAtual + 1

        Loop

    Next

    Back_Bordero_Boleto_Col = SUCESSO

    Exit Function

Erro_Back_Bordero_Boleto_Col:

    Back_Bordero_Boleto_Col = gErr

    Select Case gErr

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151250)

    End Select

    Exit Function

End Function

Function Back_Bordero_Boleto_Gravar(objBorderoBoleto As ClassBorderoBoleto) As Long
'grava as informacoes sobre o bordero de boleto

Dim lErro As Long
Dim objTMPLojaFilial As New ClassTMPLojaFilial
Dim lComando As Long
Dim dtDataBackoffice As Date

On Error GoTo Erro_Back_Bordero_Boleto_Gravar
    
    lComando = Comando_Abrir
    If lComando = 0 Then gError 118949

    'verifica se existe um borderoboleto já
    lErro = Comando_ExecutarPos(lComando, "SELECT DataBackoffice " & _
                                          "FROM BorderoBoleto " & _
                                          "WHERE FilialEmpresa=? " & _
                                          "AND NumBordero=?", 0, _
                                          dtDataBackoffice, _
                                          objBorderoBoleto.iFilialEmpresa, _
                                          objBorderoBoleto.lNumBordero)
    If lErro <> AD_SQL_SUCESSO Then gError 118950

    'busca o primeiro
    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118951
    
    If lErro = AD_SQL_SUCESSO Then gError 118952
    
    'inserir o bordero propriamente dito
    lErro = CF("BorderoBoleto_Inserir", objBorderoBoleto)
    If lErro <> SUCESSO Then gError 118499

    'inserir os itens do borderoboleto
    lErro = CF("BorderoBoletoItens_Inclui", objBorderoBoleto, CARGA_LOG_BACKOFFICE)
    If lErro <> SUCESSO Then gError 118500

    'se o valor não especificado for diferente de 0
    If objBorderoBoleto.dValorEnviarNCC <> 0 Then

        'preenche os dados de um objtmplojafilial
        objTMPLojaFilial.dSaldo = -(objBorderoBoleto.dValorEnviarNCC)
        objTMPLojaFilial.iFilialEmpresa = objBorderoBoleto.iFilialEmpresa
        objTMPLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_CARTAO_CREDITO

        'altera o saldo na tabela de tipomeiopagtolojafilial
        lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTMPLojaFilial)
        If lErro <> SUCESSO Then gError 118501

    End If

    'se o valor não especificado for diferente de 0
    If objBorderoBoleto.dValorEnviarNCD <> 0 Then

        'preenche os dados de um objtmplojafilial
        objTMPLojaFilial.dSaldo = -(objBorderoBoleto.dValorEnviarNCD)
        objTMPLojaFilial.iFilialEmpresa = objBorderoBoleto.iFilialEmpresa
        objTMPLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_CARTAO_DEBITO

        'altera o saldo na tabela de tipomeiopagtolojafilial
        lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTMPLojaFilial)
        If lErro <> SUCESSO Then gError 118502

    End If
    
    Call Comando_Fechar(lComando)
    
    Back_Bordero_Boleto_Gravar = SUCESSO

    Exit Function

Erro_Back_Bordero_Boleto_Gravar:

    Back_Bordero_Boleto_Gravar = gErr

    Select Case gErr
        
        Case 118499 To 118502
        
        Case 118949
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 118950, 118951
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BORDEROBOLETO", gErr, objBorderoBoleto.iFilialEmpresa, objBorderoBoleto.lNumBordero)

        Case 118952
            Call Rotina_Erro(vbOKOnly, "ERRO_BORDEROBOLETO_ENCONTRADO", gErr, objBorderoBoleto.iFilialEmpresa, objBorderoBoleto.lNumBordero)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151251)

    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

'Public Function Back_Bordero_Boleto_Excluir(ByVal objBorderoBoleto As ClassBorderoBoleto) As Long
''Função que recebe um borderoBoleto com sua filial e número preenchidos e deleta
'
''Pendencias: Inserir Back_Bordero_Boleto_Excluir no Dic. Acertar as msgs e num de erro.
'
'Dim lErro As Long
'Dim alComando(0 To 1) As Long
'Dim dtDataBackoffice As Date
'Dim objLog As New ClassLog
'Dim dtDataEnvio As Date
'Dim iIndice As Integer
'
'On Error GoTo Erro_Back_Bordero_Boleto_Excluir
'
'    'abre o comando
'    For iIndice = LBound(alComando) To UBound(alComando)
'        alComando(iIndice) = Comando_Abrir()
'        If alComando(iIndice) = 0 Then gError 107376
'    Next
'
'    'seleciona o borderoboleto
'    lErro = Comando_ExecutarPos(alComando(0), "SELECT DataBackOffice,DataEnvio" & _
'                                              "FROM BorderoBoleto " & _
'                                              "WHERE FilialEmpresa = ? " & _
'                                              "AND NumBordero = ? ", 0, _
'                                              dtDataBackoffice, dtDataEnvio, _
'                                              objBorderoBoleto.iFilialEmpresa, _
'                                              objBorderoBoleto.lNumBordero)
'    If lErro <> AD_SQL_SUCESSO Then gError 107379
'
'    'busca o primeiro
'    lErro = Comando_BuscarPrimeiro(alComando(0))
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 107380
'
'    'se não encontrar-> erro
'    If lErro = AD_SQL_SEM_DADOS Then gError 107381
'
'    'locka o registro
'    lErro = Comando_LockExclusive(alComando(0))
'    If lErro <> AD_SQL_SUCESSO Then gError 107384
'
'    'exclui os itens do borderoboleto
'    lErro = CF("BorderoBoletoItens_Exclui", objBorderoBoleto)
'    If lErro <> SUCESSO Then gError 107383
'
'    'deleta o BorderoBoleto
'    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM BorderoBoleto", alComando(0))
'    If lErro <> AD_SQL_SUCESSO Then gError 107385
'
'    'fecha o comando
'    For iIndice = LBound(alComando) To UBound(alComando)
'        Call Comando_Fechar(alComando(iIndice))
'    Next
'
'    Back_Bordero_Boleto_Excluir = SUCESSO
'
'    Exit Function
'
'Erro_Back_Bordero_Boleto_Excluir:
'
'    Back_Bordero_Boleto_Excluir = gErr
'
'    Select Case gErr
'
'        Case 107376
'            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
'
'        Case 107379, 107380
'            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BORDEROBOLETO", gErr, objBorderoBoleto.iFilialEmpresa, objBorderoBoleto.lNumBordero)
'
'        Case 107381
'            Call Rotina_Erro(vbOKOnly, "ERRO_BORDEROBOLETO_NAOENCONTRADO", gErr, objBorderoBoleto.iFilialEmpresa, objBorderoBoleto.lNumBordero)
'
'        Case 107382
'            Call Rotina_Erro(vbOKOnly, "ERRO_BORDEROBOLETO_BACKOFFICE", gErr, objBorderoBoleto.iFilialEmpresa, objBorderoBoleto.lNumBordero, dtDataBackoffice)
'
'        Case 107383, 107386
'
'        Case 107384
'            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_BORDEROBOLETO", gErr, objBorderoBoleto.iFilialEmpresa, objBorderoBoleto.lNumBordero)
'
'        Case 107385
'            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_BORDEROBOLETO", gErr, objBorderoBoleto.iFilialEmpresa, objBorderoBoleto.lNumBordero)
'
'        Case Else
'            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151252)
'
'    End Select
'
'    'cancela a transação
'    Call Transacao_Rollback
'
'    'fecha o comando
'    For iIndice = LBound(alComando) To UBound(alComando)
'        Call Comando_Fechar(alComando(iIndice))
'    Next
'
'    Exit Function
'
'End Function

Function Registro_Back_Bordero_Cheque(ByVal colRegistro As Collection, sArquivo As String, lRegistro As Long, ByVal iOperacao As Integer) As Long
'Trata o registro de bordero de cheque e coloca os dados no bd do backoffice. sArquivo contem o nome do arquivo em que sRegistro foi lido.
'iRegistro é o numero do registro.

Dim iPosAtual As Integer
Dim iPosFimAtual As Integer
Dim objBorderoCheque As New ClassBorderoCheque
Dim objMovCx As New ClassMovimentoCaixa
Dim sRegistro As String
Dim lErro As Long

On Error GoTo Erro_Registro_Back_Bordero_Cheque

    sRegistro = colRegistro.Item(1)

    iPosFimAtual = InStr(sRegistro, Chr(vbKeyEscape))

    'guarda as infos de bordero
    lErro = CF("Back_Bordero_Cheque", iPosAtual, iPosFimAtual, sRegistro, objBorderoCheque, objMovCx)
    If lErro <> SUCESSO Then gError 118503

    'guarda as infos dos cheques
    lErro = CF("Back_Bordero_Cheque_Col", iPosAtual, iPosFimAtual, colRegistro, objBorderoCheque)
    If lErro <> SUCESSO Then gError 118504

    Select Case iOperacao

        Case INCLUSAO_BORDEROCHEQUE
            'guarda as infos de bordero cheque
            lErro = CF("Back_Bordero_Cheque_Gravar", objBorderoCheque, objMovCx)
            If lErro <> SUCESSO And lErro <> 118955 Then gError 118505
        
        Case Else
            gError 117567
        
    End Select

    Registro_Back_Bordero_Cheque = SUCESSO

    Exit Function

Erro_Registro_Back_Bordero_Cheque:

    Registro_Back_Bordero_Cheque = gErr

    Select Case gErr

        Case 117567
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPOMOV_DIFERENTE", gErr)
            
        Case 118503, 118504, 118505

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151253)

    End Select

    Exit Function

End Function

Function Back_Bordero_Cheque(iPosAtual As Integer, iPosFimAtual As Integer, sRegistro As String, ByVal objBorderoCheque As ClassBorderoCheque, ByVal objMovCx As ClassMovimentoCaixa) As Long
'guarda as infos de movimento de caixa relativos a bordero cheque

Dim lErro As Long

On Error GoTo Erro_Back_Bordero_Cheque

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objBorderoCheque.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objBorderoCheque.lNumBordero = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objBorderoCheque.iCodNossaConta = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objBorderoCheque.dtDataImpressao = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objBorderoCheque.dtDataEnvio = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objBorderoCheque.dtDataBackoffice = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.lNumMovto = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iCaixa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.lSequencial = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iTipo = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dValor = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dHora = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    objMovCx.iFilialEmpresa = objBorderoCheque.iFilialEmpresa
    objMovCx.iAdmMeioPagto = MEIO_PAGAMENTO_CHEQUE
    objMovCx.iParcelamento = PARCELAMENTO_AVISTA
    objMovCx.dtDataMovimento = objBorderoCheque.dtDataEnvio
    objMovCx.lNumRefInterna = objBorderoCheque.lNumBordero
    'este valor foi colocado aqui devido a necessidade de gravar Movcci. Nao que se saiba que este valor é especificado.
    objBorderoCheque.dValorEspec = objMovCx.dValor

    Back_Bordero_Cheque = SUCESSO

    Exit Function

Erro_Back_Bordero_Cheque:

    Back_Bordero_Cheque = gErr

    Select Case gErr

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151254)

    End Select

    Exit Function

End Function

Function Back_Bordero_Cheque_Col(iPosAtual As Integer, iPosFimAtual As Integer, colRegistro As Collection, ByVal objBorderoCheque As ClassBorderoCheque) As Long
'guarda as infos de cheques

Dim lErro As Long
Dim vRegistro As Variant
Dim objChequePre As ClassChequePre

On Error GoTo Erro_Back_Bordero_Cheque_Col

    For Each vRegistro In colRegistro

        Do While Mid(vRegistro, iPosFimAtual + 1, 1) <> Chr(vbKeyEnd) And iPosFimAtual + 1 < Len(vRegistro)

            Set objChequePre = New ClassChequePre

            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, vRegistro, Chr(vbKeyEscape))
            objChequePre.lSequencialLoja = CLng(Mid(vRegistro, iPosAtual, iPosFimAtual - iPosAtual))

            objChequePre.iFilialEmpresaLoja = objBorderoCheque.iFilialEmpresa

            objBorderoCheque.colCheque.Add objChequePre

        Loop

    Next

    Back_Bordero_Cheque_Col = SUCESSO

    Exit Function

Erro_Back_Bordero_Cheque_Col:

    Back_Bordero_Cheque_Col = gErr

    Select Case gErr

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151255)

    End Select

    Exit Function

End Function

Function Back_Bordero_Cheque_Gravar(objBorderoCheque As ClassBorderoCheque, objMovimentoCaixa As ClassMovimentoCaixa) As Long
'grava as informacoes sobre o bordero de cheque

Dim lErro As Long
Dim iIndice As Integer
Dim objCCMovDia As New ClassCCMovDia
Dim alComando(0 To 1) As Long
Dim objTMPLojaFilial As New ClassTMPLojaFilial
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim lNumBordero As Long

On Error GoTo Erro_Back_Bordero_Cheque_Gravar

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir
        If alComando(iIndice) = 0 Then gError 118506
    Next
    
    'tenta selecionar o bordero na tabela borderocheque
    lErro = Comando_ExecutarPos(alComando(0), "SELECT NumBordero FROM BorderoCheque WHERE FilialEmpresa=? AND NumBordero=?", 0, lNumBordero, objBorderoCheque.iFilialEmpresa, objBorderoCheque.lNumBordero)
    If lErro <> AD_SQL_SUCESSO Then gError 118953

    'busca primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118954
    
    If lErro = AD_SQL_SUCESSO Then gError 118955
    
    'executa a inserção na tabela de movimentos de caixa
    lErro = Comando_Executar(alComando(1), "INSERT INTO MovimentosCaixa(FilialEmpresa,NumMovto,Caixa,Sequencial,Tipo,AdmMeioPagto,Parcelamento,TipoCartao,Numero,DataMovimento,Valor,Historico,Favorecido,CupomFiscal,NumRefInterna,MovtoTransf,MovtoEstorno,Gerente,CodConta,Hora) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
    objMovimentoCaixa.iFilialEmpresa, objMovimentoCaixa.lNumMovto, objMovimentoCaixa.iCaixa, objMovimentoCaixa.lSequencial, objMovimentoCaixa.iTipo, objMovimentoCaixa.iAdmMeioPagto, objMovimentoCaixa.iParcelamento, objMovimentoCaixa.iTipoCartao, objMovimentoCaixa.lNumero, objMovimentoCaixa.dtDataMovimento, objMovimentoCaixa.dValor, objMovimentoCaixa.sHistorico, objMovimentoCaixa.sFavorecido, objMovimentoCaixa.lCupomFiscal, objMovimentoCaixa.lNumRefInterna, objMovimentoCaixa.lMovtoTransf, objMovimentoCaixa.lMovtoEstorno, objMovimentoCaixa.iGerente, objMovimentoCaixa.iCodConta, objMovimentoCaixa.dHora)
    If lErro <> SUCESSO Then gError 118507

    objBorderoCheque.lNumMovtoCx = objMovimentoCaixa.lNumMovto

    'insere o borderô novo na tabela de borderocheque
    lErro = CF("BorderoCheque_Inserir", objBorderoCheque)
    If lErro <> SUCESSO Then gError 118508

    'prepara e insere o movto de cta corrente correspondente ao deposito do bordero como um todo
    lErro = CF("BorderoCheque_MovCCI_Grava", objBorderoCheque)
    If lErro <> SUCESSO Then gError 126020

    'preenche o ccmovdia com os dados do borderocheque
    Call Mover_Dados_BorderoCheque_CCMovDia(objBorderoCheque, objCCMovDia)

    'adiciona ao acumulado deb/cred diário
    lErro = CF("CCMovDia_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 118509

    'adiciona ao acumulado déb/créd mensal
    lErro = CF("CCMov_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 118510

    'vincula os cheques que estão marcados no grid ao borderocheque
    lErro = CF("Cheque_Marcar_Bordero", objBorderoCheque)
    If lErro <> SUCESSO Then gError 118511

    objTMPLojaFilial.iFilialEmpresa = objMovimentoCaixa.iFilialEmpresa
    objTMPLojaFilial.dSaldo = -objBorderoCheque.dValorNEspec
    objTMPLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_CHEQUE

    'altera o saldo na tabela tipomeiopagtolojafilial
    lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTMPLojaFilial)
    If lErro <> SUCESSO Then gError 118512

    objAdmMeioPagtoCondPagto.iFilialEmpresa = objMovimentoCaixa.iFilialEmpresa
    objAdmMeioPagtoCondPagto.iAdmMeioPagto = MEIO_PAGAMENTO_CHEQUE
    objAdmMeioPagtoCondPagto.iParcelamento = PARCELAMENTO_AVISTA
    objAdmMeioPagtoCondPagto.dSaldo = -objBorderoCheque.dValorEspec

    'altera o saldo na tabela admmeiopagtocondpagto
    lErro = CF("AdmMeioPagtoCondPagto_Altera_Saldo", objAdmMeioPagtoCondPagto)
    If lErro <> SUCESSO Then gError 118513

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Back_Bordero_Cheque_Gravar = SUCESSO

    Exit Function

Erro_Back_Bordero_Cheque_Gravar:

    Back_Bordero_Cheque_Gravar = gErr

    Select Case gErr
        
        Case 118506
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 118507
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MOVCAIXA", gErr, objMovimentoCaixa.iFilialEmpresa, objMovimentoCaixa.iCaixa, objMovimentoCaixa.lSequencial)

        Case 118508 To 118513, 126020
            
        Case 118953, 118954
            Call Rotina_Erro(vbOKOnly, "ERRO_BORDEROCHEQUE_LEITURA", gErr, objBorderoCheque.iFilialEmpresa, objBorderoCheque.lNumBordero)
        
        Case 118955
            Call Rotina_Erro(vbOKOnly, "ERRO_BORDEROCHEQUE_ENCONTRADO", gErr, objBorderoCheque.iFilialEmpresa, objBorderoCheque.lNumBordero)
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151256)

    End Select

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

'Function Back_Bordero_Cheque_Excluir(objBorderoCheque As ClassBorderoCheque) As Long
''exclui as informacoes sobre o bordero de cheque
'
''Pendencias: Inserir Back_Bordero_Cheque_Excluir no Dic. Acertar as msgs e num de erro.
'
'Dim lErro As Long
'Dim iIndice As Integer
'Dim objCCMovDia As New ClassCCMovDia
'Dim alComando(0 To 3) As Long
'Dim objTMPLojaFilial As New ClassTMPLojaFilial
'Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
'Dim tBorderoCheque As typeBorderoCheque
'Dim objBorderoCheque1 As New ClassBorderoCheque
'Dim tMovimentoCaixa As typeMovimentoCaixa
'
'On Error GoTo Erro_Back_Bordero_Cheque_Excluir
'
'    'localiza o bordero
'    lErro = Comando_ExecutarPos(alComando(0), "SELECT NumBordero,FilialEmpresa, CodNossaConta,DataImpressao,DataEnvio,DataBackoffice, NumMovtoCx FROM BorderoCheque WHERE FilialEmpresa=? AND NumBordero=?", 0, tBorderoCheque.lNumBordero, tBorderoCheque.iFilialEmpresa, tBorderoCheque.iCodNossaConta, tBorderoCheque.dtDataImpressao, tBorderoCheque.dtDataEnvio, tBorderoCheque.dtDataBackoffice, tBorderoCheque.lNumMovtoCx, objBorderoCheque.iFilialEmpresa, objBorderoCheque.lNumBordero)
'    If lErro <> AD_SQL_SUCESSO Then gError 107088
'
'    'busca o primeiro
'    lErro = Comando_BuscarPrimeiro(alComando(0))
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 107089
'
'    'se não encontrar->erro
'    If lErro = AD_SQL_SEM_DADOS Then gError 107090
'
'    'locka o borderô
'    lErro = Comando_LockExclusive(alComando(0))
'    If lErro <> AD_SQL_SUCESSO Then gError 107091
'
'    'preenche um bordero cheque auxiliar com os campos chave do bordero passado como parâmetro
'    objBorderoCheque1.iFilialEmpresa = giFilialEmpresa
'    objBorderoCheque1.lNumBordero = tBorderoCheque.lNumBordero
'
'    'desmarca os cheques que pertencem akele borderô e carrega o objborderocheque com o total desmarcado
'    lErro = CF("Cheque_Desmarcar_Bordero", objBorderoCheque, objBorderoCheque1)
'    If lErro <> SUCESSO Then gError 107111
'
'    'localiza o movimento caixa referente ao borderô cheque.
'    lErro = Comando_ExecutarPos(alComando(1), "SELECT FilialEmpresa, NumMovto,Valor,DataMovimento, NumIntDocLog, QuantLog FROM MovimentosCaixa WHERE FilialEmpresa =? AND NumMovto=?", 0, tMovimentoCaixa.iFilialEmpresa, tMovimentoCaixa.lNumMovto, tMovimentoCaixa.dValor, tMovimentoCaixa.dtDataMovimento, tMovimentoCaixa.lNumIntDocLog, tMovimentoCaixa.iQuantLog, objBorderoCheque.iFilialEmpresa, tBorderoCheque.lNumMovtoCx)
'    If lErro <> AD_SQL_SUCESSO Then gError 107093
'
'    'busca o primeiro
'    lErro = Comando_BuscarPrimeiro(alComando(1))
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 107094
'
'    'se não encontrar->erro
'    If lErro = AD_SQL_SEM_DADOS Then gError 107095
'
'    'locka o movimento de caixa
'    lErro = Comando_LockExclusive(alComando(1))
'    If lErro <> AD_SQL_SUCESSO Then gError 107096
'
'    'deleta o movimento de caixa
'    lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM MovimentosCaixa", alComando(1))
'    If lErro <> AD_SQL_SUCESSO Then gError 107097
'
'    'preenche um movdia com os dados do bordero
'    Call Mover_Dados_BorderoCheque_CCMovDia1(tMovimentoCaixa, objCCMovDia)
'
'    'atualiza a tabela que acumula diário
'    lErro = CF("CCMovDia_Exclui", objCCMovDia)
'    If lErro <> SUCESSO Then gError 107098
'
'    'atualiza a tabela que acumula mensal
'    lErro = CF("CCMov_Exclui", objCCMovDia)
'    If lErro <> SUCESSO Then gError 107099
'
'    objTMPLojaFilial.iFilialEmpresa = giFilialEmpresa
'    objTMPLojaFilial.dSaldo = objBorderoCheque1.dValorNEspec
'    objTMPLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_CHEQUE
'
'    'altera o saldo na tabela tipomeiopagtolojafilial
'    lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTMPLojaFilial)
'    If lErro <> SUCESSO Then gError 107100
'
'    objAdmMeioPagtoCondPagto.iFilialEmpresa = giFilialEmpresa
'    objAdmMeioPagtoCondPagto.iParcelamento = PARCELAMENTO_AVISTA
'    objAdmMeioPagtoCondPagto.iAdmMeioPagto = MEIO_PAGAMENTO_CHEQUE
'    objAdmMeioPagtoCondPagto.dSaldo = objBorderoCheque1.dValorEspec
'
'    'altera o saldo na tabela admmeiopagtocondpagto
'    lErro = CF("AdmMeioPagtoCondPagto_Altera_Saldo", objAdmMeioPagtoCondPagto)
'    If lErro <> SUCESSO Then gError 107101
'
'    'deleta o borderocheque da tabela de borderocheques
'    lErro = Comando_ExecutarPos(alComando(3), "DELETE FROM BorderoCheque", alComando(0))
'    If lErro <> SUCESSO Then gError 107132
'
'    Back_Bordero_Cheque_Excluir = SUCESSO
'
'    Exit Function
'
'Erro_Back_Bordero_Cheque_Excluir:
'
'    Back_Bordero_Cheque_Excluir = gErr
'
'    Select Case gErr
'
'        Case Else
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151257)
'
'    End Select
'
'    'fecha os comandos
'    For iIndice = LBound(alComando) To UBound(alComando)
'        Call Comando_Fechar(alComando(iIndice))
'    Next
'
'    Exit Function
'
'End Function
'
'Public Function Back_Bordero_Cheque_Alterar(ByVal objBorderoCheque As ClassBorderoCheque, objMovimentoCaixa As ClassMovimentoCaixa) As Long
''função que recebe um bordero cheque preenchido e altera os dados no bd
'
''Pendencias: Inserir Back_Bordero_Cheque_Alterar no Dic. Acertar as msgs e num de erro.
'
'Dim alComando(0 To 4) As Long
'Dim lErro As Long
'Dim iIndice As Integer
'Dim tBorderoCheque As typeBorderoCheque
'Dim objBorderoCheque1 As New ClassBorderoCheque
'Dim objMovimentoCaixa As New ClassMovimentoCaixa
'Dim tMovimentoCaixa As typeMovimentoCaixa
'Dim objCCMovDia As New ClassCCMovDia
'Dim objLog As New ClassLog
'Dim objTMPLojaFilial As New ClassTMPLojaFilial
'Dim lSequencial As Long
'Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
'Dim lNumMovto As Long
'
'On Error GoTo Erro_Back_Bordero_Cheque_Alterar
'
'    'abre os comandos
'    For iIndice = LBound(alComando) To UBound(alComando)
'        alComando(iIndice) = Comando_Abrir
'        If alComando(iIndice) = 0 Then gError 107031
'    Next
'
'    'tenta selecionar o bordero na tabela borderocheque
'    lErro = Comando_ExecutarPos(alComando(0), "SELECT NumBordero,FilialEmpresa, CodNossaConta,DataImpressao,DataEnvio,DataBackoffice, NumMovtoCx FROM BorderoCheque WHERE FilialEmpresa=? AND NumBordero=?", 0, tBorderoCheque.lNumBordero, tBorderoCheque.iFilialEmpresa, tBorderoCheque.iCodNossaConta, tBorderoCheque.dtDataImpressao, tBorderoCheque.dtDataEnvio, tBorderoCheque.dtDataBackoffice, tBorderoCheque.lNumMovtoCx, objBorderoCheque.iFilialEmpresa, objBorderoCheque.lNumBordero)
'    If lErro <> AD_SQL_SUCESSO Then gError 107060
'
'    'busca primeiro
'    lErro = Comando_BuscarPrimeiro(alComando(0))
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 107061
'
'    'se o encontrou -> alteração
'    If lErro = AD_SQL_SEM_DADOS Then gError 1
'
'    'locka o bordero encontrado
'    lErro = Comando_LockExclusive(alComando(0))
'    If lErro <> AD_SQL_SUCESSO Then gError 107062
'
'    'carrega um objborderocheque1 auxiliar
'    objBorderoCheque1.iFilialEmpresa = giFilialEmpresa
'    objBorderoCheque1.lNumBordero = tBorderoCheque.lNumBordero
'
'    'zera o numborderoloja de todos os cheques que estiverem nas coleções do objborderocheque
'    lErro = CF("Cheque_Desmarcar_Bordero", objBorderoCheque, objBorderoCheque1)
'    If lErro <> SUCESSO Then gError 107110
'
'    objMovimentoCaixa.lNumMovto = tBorderoCheque.lNumMovtoCx
'
'    'tenta localizar o movimento de caixa referente ao bordero cheque
'    lErro = Comando_ExecutarPos(alComando(1), "SELECT FilialEmpresa, NumMovto, Caixa, Tipo, Sequencial, DataMovimento, Valor, Hora, NumIntDocLog, QuantLog FROM MovimentosCaixa WHERE FilialEmpresa = ? AND NumMovtoCx = ?", 0, tMovimentoCaixa.iCaixa, tMovimentoCaixa.iTipo, tMovimentoCaixa.lSequencial, tMovimentoCaixa.dtDataMovimento, tMovimentoCaixa.dValor, tMovimentoCaixa.dHora, tMovimentoCaixa.lNumIntDocLog, tMovimentoCaixa.iQuantLog, objBorderoCheque.iFilialEmpresa, objMovimentoCaixa.lNumMovto)
'    If lErro <> AD_SQL_SUCESSO Then gError 107064
'
'    'busca o primeiro
'    lErro = Comando_BuscarPrimeiro(alComando(1))
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 107065
'
'    'se não encontrar->erro
'    If lErro = AD_SQL_SEM_DADOS Then gError 107066
'
'    'locka o movimento de caixa
'    lErro = Comando_LockExclusive(alComando(1))
'    If lErro <> AD_SQL_SUCESSO Then gError 107067
'
'    objMovimentoCaixa.iCaixa = tMovimentoCaixa.iCaixa
'    objMovimentoCaixa.lSequencial = tMovimentoCaixa.lSequencial
'    objMovimentoCaixa.iTipo = tMovimentoCaixa.iTipo
'    objMovimentoCaixa.dValor = objBorderoCheque.dValorEspec + objBorderoCheque.dValorNEspec
'    objMovimentoCaixa.dHora = CDbl(Time)
'    objMovimentoCaixa.dtDataMovimento = objBorderoCheque.dtDataEnvio
'
'    'atualiza o seu valor e data de movimento
'    lErro = Comando_ExecutarPos(alComando(2), "UPDATE MovimentosCaixa set Valor=?, DataMovimento=?, Hora = ? ", alComando(1), objMovimentoCaixa.dValor, objMovimentoCaixa.dtDataMovimento, objMovimentoCaixa.dHora)
'    If lErro <> AD_SQL_SUCESSO Then gError 107068
'
'    'atuazlia a conta e a data de envio do borderocheque
'    lErro = Comando_ExecutarPos(alComando(3), "UPDATE BorderoCheque set CodNossaConta=? ,DataEnvio=?", alComando(0), objBorderoCheque.iCodNossaConta, objBorderoCheque.dtDataEnvio)
'    If lErro <> AD_SQL_SUCESSO Then gError 107069
'
'    'preenche o ccmovdia
'    Call Mover_Dados_BorderoCheque_CCMovDia1(tMovimentoCaixa, objCCMovDia)
'
'    'subtrai do acumulado cred/deb diário
'    lErro = CF("CCMovDia_Exclui", objCCMovDia)
'    If lErro <> SUCESSO Then gError 107071
'
'    'subtrai do acumulado cred/deb mensal
'    lErro = CF("CCMov_Exclui", objCCMovDia)
'    If lErro <> SUCESSO Then gError 107030
'
'    'preenche o ccmovdia com os dados do borderocheque
'    Call Mover_Dados_BorderoCheque_CCMovDia(objBorderoCheque, objCCMovDia)
'
'    'adiciona ao acumulado deb/cred diário
'    lErro = CF("CCMovDia_Grava", objCCMovDia)
'    If lErro <> SUCESSO Then gError 107075
'
'    'adiciona ao acumulado déb/créd mensal
'    lErro = CF("CCMov_Grava", objCCMovDia)
'    If lErro <> SUCESSO Then gError 107131
'
'    'vincula os cheques que estão marcados no grid ao borderocheque
'    lErro = CF("Cheque_Marcar_Bordero", objBorderoCheque)
'    If lErro <> SUCESSO Then gError 107133
'
'    objTMPLojaFilial.iFilialEmpresa = giFilialEmpresa
'    objTMPLojaFilial.dSaldo = objBorderoCheque1.dValorNEspec - objBorderoCheque.dValorNEspec
'    objTMPLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_CHEQUE
'
'    'altera o saldo na tabela tipomeiopagtolojafilial
'    lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTMPLojaFilial)
'    If lErro <> SUCESSO Then gError 107134
'
'    objAdmMeioPagtoCondPagto.iFilialEmpresa = giFilialEmpresa
'    objAdmMeioPagtoCondPagto.iParcelamento = PARCELAMENTO_AVISTA
'    objAdmMeioPagtoCondPagto.iAdmMeioPagto = MEIO_PAGAMENTO_CHEQUE
'    objAdmMeioPagtoCondPagto.dSaldo = objBorderoCheque1.dValorEspec - objBorderoCheque.dValorEspec
'
'    'altera o saldo na tabela admmeiopagtocondpagto
'    lErro = CF("AdmMeioPagtoCondPagto_Altera_Saldo", objAdmMeioPagtoCondPagto)
'    If lErro <> SUCESSO Then gError 107135
'
'    'fecha os comandos
'    For iIndice = LBound(alComando) To UBound(alComando)
'        Call Comando_Fechar(alComando(iIndice))
'    Next
'
'    Back_Bordero_Cheque_Alterar = SUCESSO
'
'    Exit Function
'
'Erro_Back_Bordero_Cheque_Alterar:
'
'    Back_Bordero_Cheque_Alterar = gErr
'
'    Select Case gErr
'
'        Case 107031
'            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
'
'        Case 107032
'            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
'
'        Case 107060, 107061
'            Call Rotina_Erro(vbOKOnly, "ERRO_BORDEROCHEQUE_LEITURA", gErr, objBorderoCheque.iFilialEmpresa, objBorderoCheque.lNumBordero)
'
'        Case 107062
'            Call Rotina_Erro(vbOKOnly, "ERRO_BORDEROCHEQUE_LOCK", gErr, objBorderoCheque.iFilialEmpresa, objBorderoCheque.lNumBordero)
'
'        Case 107063
'            Call Rotina_Erro(vbOKOnly, "ERRO_BORDEROCHEQUE_BACKOFFICE", gErr, objBorderoCheque.iFilialEmpresa, objBorderoCheque.lNumBordero, tBorderoCheque.dtDataBackoffice)
'
'        Case 107030, 107071, 107074 To 107075, 107110, 107129, 107131, 107078, 107134, 107135, 110061 To 110064
'
'        Case 107033
'            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
'
'        Case 107064, 107065
'            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_BORDEROCHEQUE_LEITURA", gErr, objMovimentoCaixa.iFilialEmpresa, objMovimentoCaixa.lNumRefInterna)
'
'        Case 107066
'            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_BORDEROCHEQUE_NAOENCONTRADO", gErr, objMovimentoCaixa.iFilialEmpresa, objMovimentoCaixa.lNumRefInterna)
'
'        Case 107067
'            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_BORDEROCHEQUE_LOCK", gErr, objMovimentoCaixa.iFilialEmpresa, objMovimentoCaixa.lNumRefInterna)
'
'        Case 107068
'            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_BORDEROCHEQUE_ALTERACAO", gErr, objMovimentoCaixa.iFilialEmpresa, objMovimentoCaixa.lNumRefInterna)
'
'        Case 107069
'            Call Rotina_Erro(vbOKOnly, "ERRO_BORDEROCHEQUE_ALTERACAO", gErr, objBorderoCheque.iFilialEmpresa, objBorderoCheque.lNumBordero)
'
'        Case 107072
'            Call Rotina_Erro(vbOKOnly, "ERRO_BORDEROCHEQUE_CRIACAO_BACKOFFICE", gErr)
'
'        Case 110065
'            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_INSERCAO", gErr, objMovimentoCaixa.iCaixa, objMovimentoCaixa.lSequencial)
'
'        Case Else
'            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151258)
'
'    End Select
'
'    For iIndice = LBound(alComando) To UBound(alComando)
'        Call Comando_Fechar(alComando(iIndice))
'    Next
'
'    Exit Function
'
'End Function
'
Function Registro_Back_Bordero_ValeTicket(ByVal colRegistro As Collection, sArquivo As String, lRegistro As Long, ByVal iOperacao As Integer) As Long
'Trata o registro de bordero de vale ticket e coloca os dados no bd do backoffice. sArquivo contem o nome do arquivo em que sRegistro foi lido.
'iRegistro é o numero do registro.

Dim iPosAtual As Integer
Dim iPosFimAtual As Integer
Dim objBorderoValeTicket As New ClassBorderoValeTicket
Dim objMovCx As New ClassMovimentoCaixa
Dim sRegistro As String
Dim lErro As Long

On Error GoTo Erro_Registro_Back_Bordero_ValeTicket

    sRegistro = colRegistro.Item(1)

    iPosFimAtual = InStr(sRegistro, Chr(vbKeyEscape))

    'guarda as infos de bordero
    lErro = CF("Back_Bordero_ValeTicket", iPosAtual, iPosFimAtual, sRegistro, objBorderoValeTicket, objMovCx)
    If lErro <> SUCESSO Then gError 118514

    Select Case iOperacao

        Case INCLUSAO_BORDEROVALETICKET
            'guarda as infos de bordero vale ticket
            lErro = CF("Back_Bordero_ValeTicket_Gravar", objBorderoValeTicket, objMovCx)
            If lErro <> SUCESSO And lErro <> 118958 Then gError 118515
        
        Case Else
            gError 117568
            
    End Select

    Registro_Back_Bordero_ValeTicket = SUCESSO

    Exit Function

Erro_Registro_Back_Bordero_ValeTicket:

    Registro_Back_Bordero_ValeTicket = gErr

    Select Case gErr

        Case 117568
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPOMOV_DIFERENTE", gErr)

        Case 118514, 118515

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151259)

    End Select

    Exit Function

End Function

Function Back_Bordero_ValeTicket(iPosAtual As Integer, iPosFimAtual As Integer, sRegistro As String, ByVal objBorderoValeTicket As ClassBorderoValeTicket, ByVal objMovCx As ClassMovimentoCaixa) As Long
'guarda as infos de movimento de caixa relativos a bordero de vale ticket

Dim lErro As Long

On Error GoTo Erro_Back_Bordero_ValeTicket

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objBorderoValeTicket.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objBorderoValeTicket.lNumBordero = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objBorderoValeTicket.iAdmMeioPagto = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objBorderoValeTicket.iParcelamento = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objBorderoValeTicket.dtDataEnvio = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objBorderoValeTicket.dtDataImpressao = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objBorderoValeTicket.dtDataBackoffice = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objBorderoValeTicket.dValor = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objBorderoValeTicket.dValorN = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.lNumMovto = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iCaixa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.lSequencial = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iTipo = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dHora = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    objMovCx.iFilialEmpresa = objBorderoValeTicket.iFilialEmpresa
    objMovCx.iAdmMeioPagto = objBorderoValeTicket.iAdmMeioPagto
    objMovCx.iParcelamento = objBorderoValeTicket.iParcelamento
    objMovCx.dtDataMovimento = objBorderoValeTicket.dtDataEnvio
    objMovCx.lNumRefInterna = objBorderoValeTicket.lNumBordero
    objMovCx.dValor = objBorderoValeTicket.dValor + objBorderoValeTicket.dValorN

    Back_Bordero_ValeTicket = SUCESSO

    Exit Function

Erro_Back_Bordero_ValeTicket:

    Back_Bordero_ValeTicket = gErr

    Select Case gErr

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151260)

    End Select

    Exit Function

End Function

Function Back_Bordero_ValeTicket_Gravar(objBorderoValeTicket As ClassBorderoValeTicket, objMovimentoCaixa As ClassMovimentoCaixa) As Long
'grava as informacoes sobre o bordero de vale ticket

Dim lErro As Long
Dim iIndice As Integer
Dim objCCMovDia As New ClassCCMovDia
Dim alComando(0 To 1) As Long
Dim objTMPLojaFilial As New ClassTMPLojaFilial
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim iFilialEmpresa As Integer

On Error GoTo Erro_Back_Bordero_ValeTicket_Gravar

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir
        If alComando(iIndice) = 0 Then gError 118516
    Next
    
    lErro = Comando_ExecutarPos(alComando(0), "SELECT FilialEmpresa " & _
                                          "FROM BorderoValeTicket " & _
                                          "WHERE FilialEmpresa=? " & _
                                          "AND NumBordero=? ", 0, _
                                          iFilialEmpresa, objBorderoValeTicket.iFilialEmpresa, objBorderoValeTicket.lNumBordero)
    If lErro <> AD_SQL_SUCESSO Then gError 118956
    
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118957
        
    If lErro = AD_SQL_SUCESSO Then gError 118958
    
    'executa a inserção na tabela de movimentos de caixa
    lErro = Comando_Executar(alComando(1), "INSERT INTO MovimentosCaixa(FilialEmpresa,NumMovto,Caixa,Sequencial,Tipo,AdmMeioPagto,Parcelamento,TipoCartao,Numero,DataMovimento,Valor,Historico,Favorecido,CupomFiscal,NumRefInterna,MovtoTransf,MovtoEstorno,Gerente,CodConta,Hora) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
    objMovimentoCaixa.iFilialEmpresa, objMovimentoCaixa.lNumMovto, objMovimentoCaixa.iCaixa, objMovimentoCaixa.lSequencial, objMovimentoCaixa.iTipo, objMovimentoCaixa.iAdmMeioPagto, objMovimentoCaixa.iParcelamento, objMovimentoCaixa.iTipoCartao, objMovimentoCaixa.lNumero, objMovimentoCaixa.dtDataMovimento, objMovimentoCaixa.dValor, objMovimentoCaixa.sHistorico, objMovimentoCaixa.sFavorecido, objMovimentoCaixa.lCupomFiscal, objMovimentoCaixa.lNumRefInterna, objMovimentoCaixa.lMovtoTransf, objMovimentoCaixa.lMovtoEstorno, objMovimentoCaixa.iGerente, objMovimentoCaixa.iCodConta, objMovimentoCaixa.dHora)
    If lErro <> SUCESSO Then gError 118517

    objBorderoValeTicket.lNumMovtoCx = objMovimentoCaixa.lNumMovto

    'gera o título a receber associado ao borderô
    lErro = CF("TituloReceber_Gera_BorderoValeTicket", objBorderoValeTicket)
    If lErro <> SUCESSO Then gError 118518

    'insere o borderô pp dito
    lErro = CF("BorderoValeTicket_Inserir", objBorderoValeTicket)
    If lErro <> SUCESSO Then gError 118519

    'preenche um ccmovdia
    Call Mover_Dados_BorderoValeTicket_CCMovDia(objBorderoValeTicket, objCCMovDia)

    objCCMovDia.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_VALE_TICKET

    'adiciona no acumulado diário
    lErro = CF("CCMovDia_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 118520

    'adiciona no acumulado mensal
    lErro = CF("CCMov_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 118521

    'preenche um admmeiopagtocondpagto
    Call Mover_Dados_BorderoValeTicket_AdmMeioPagtoCondPagto1(objBorderoValeTicket, objAdmMeioPagtoCondPagto)

    'altera o seu saldo
    lErro = CF("AdmMeioPagtoCondPagto_Altera_Saldo", objAdmMeioPagtoCondPagto)
    If lErro <> SUCESSO Then gError 118522

    'se o valor não especificado for diferente de 0
    If objBorderoValeTicket.dValorN <> 0 Then

        'instancia um tmplojafilial
        Set objTMPLojaFilial = New ClassTMPLojaFilial

        'preenche seus dados
        objTMPLojaFilial.dSaldo = -objBorderoValeTicket.dValorN
        objTMPLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_VALE_TICKET
        objTMPLojaFilial.iFilialEmpresa = objBorderoValeTicket.iFilialEmpresa

        'altera seu saldo
        lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTMPLojaFilial)
        If lErro <> SUCESSO Then gError 118523

    End If

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Back_Bordero_ValeTicket_Gravar = SUCESSO

    Exit Function

Erro_Back_Bordero_ValeTicket_Gravar:

    Back_Bordero_ValeTicket_Gravar = gErr

    Select Case gErr
        
        Case 118516
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 118517
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MOVCAIXA", gErr, objMovimentoCaixa.iFilialEmpresa, objMovimentoCaixa.iCaixa, objMovimentoCaixa.lSequencial)

        Case 118518 To 118523
        
        Case 118956, 118957
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BORDEROVALETICKET", gErr, objBorderoValeTicket.iFilialEmpresa, objBorderoValeTicket.lNumBordero)
        
        Case 118958
            Call Rotina_Erro(vbOKOnly, "ERRO_BORDEROVALETICKET_ENCONTRADO", gErr, objBorderoValeTicket.iFilialEmpresa, objBorderoValeTicket.lNumBordero)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151261)

    End Select

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

'Function Back_Bordero_ValeTicket_Excluir(objBorderoValeTicket As ClassBorderoValeTicket) As Long
''exclui as informacoes sobre o bordero de ValeTicket
'
''Pendencias: Inserir Back_Bor
'Dim lErro As Long
'Dim iIndice As Integer
'Dim objCCMovDia As New ClassCCMovDia
'Dim alComando(0 To 3) As Long
'Dim objTMPLojaFilial As New ClassTMPLojaFilial
'Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
'Dim tBorderoValeTicket As typeBorderoValeTicket
'Dim tMovcx As typeMovimentoCaixa
'
'On Error GoTo Erro_Back_Bordero_ValeTicket_Excluir
'
'    'busca o bordero no bd
'    lErro = Comando_ExecutarPos(alComando(0), "SELECT DataBackoffice,NumIntDocCPR,FilialEmpresa,NumBordero,AdmMeioPagto,Parcelamento,DataEnvio,DataImpressao,Valor, NumMovtoCx " & _
'                                              "FROM BorderoValeTicket " & _
'                                              "WHERE FilialEmpresa=? " & _
'                                              "AND NumBordero=? ", 0, _
'                                              tBorderoValeTicket.dtDataBackoffice, tBorderoValeTicket.lNumIntDocCPR, tBorderoValeTicket.iFilialEmpresa, tBorderoValeTicket.lNumBordero, tBorderoValeTicket.iAdmMeioPagto, tBorderoValeTicket.iParcelamento, tBorderoValeTicket.dtDataEnvio, tBorderoValeTicket.dtDataImpressao, tBorderoValeTicket.dValor, tBorderoValeTicket.lNumMovtoCx, _
'                                              objBorderoValeTicket.iFilialEmpresa, _
'                                              objBorderoValeTicket.lNumBordero)
'    If lErro <> AD_SQL_SUCESSO Then gError 107486
'
'    'busca o primeiro
'    lErro = Comando_BuscarPrimeiro(alComando(0))
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 107487
'
'    'se não encontrar-> erro
'    If lErro = AD_SQL_SEM_DADOS Then gError 107488
'
'    'locka o borderô
'    lErro = Comando_LockExclusive(alComando(0))
'    If lErro <> AD_SQL_SUCESSO Then gError 1
'
'    'seleciona o movimento de caixa associado
'    lErro = Comando_ExecutarPos(alComando(2), "SELECT NumIntDocLog, QuantLog " & _
'                                              "FROM MovimentosCaixa " & _
'                                              "WHERE FilialEmpresa=? " & _
'                                              "AND NumMovto=?", 0, _
'                                              tMovcx.lNumIntDocLog, tMovcx.iQuantLog, _
'                                              objBorderoValeTicket.iFilialEmpresa, _
'                                              tBorderoValeTicket.lNumMovtoCx)
'    If lErro <> AD_SQL_SUCESSO Then gError 107496
'
'    'busca o primeiro
'    lErro = Comando_BuscarPrimeiro(alComando(2))
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 107497
'
'    'se não encontrar-> erro
'    If lErro = AD_SQL_SEM_DADOS Then gError 107498
'
'    'locka o movimento
'    lErro = Comando_LockExclusive(alComando(2))
'    If lErro <> AD_SQL_SUCESSO Then gError 107499
'
'    'deleta o movimento de caixa
'    lErro = Comando_ExecutarPos(alComando(3), "DELETE FROM MovimentosCaixa", alComando(2))
'    If lErro <> AD_SQL_SUCESSO Then gError 108000
'
'    'preenche um ccmovdia
'    Call Mover_Dados_BorderoValeTicket_CCMovDia1(tBorderoValeTicket, objCCMovDia)
'
'    'subtrai do acumulado diário
'    lErro = CF("CCMovDia_Exclui", objCCMovDia)
'    If lErro <> SUCESSO Then gError 108001
'
'    'subtrai do acumulado mensal
'    lErro = CF("CCMov_Exclui", objCCMovDia)
'    If lErro <> SUCESSO Then gError 108002
'
'    'preenche um admmeiopagtocondpagto
'    Call Mover_Dados_BorderoValeTicket_AdmMeioPagtoCondPagto(tBorderoValeTicket, objAdmMeioPagtoCondPagto)
'
'    'adiciona ao saldo do admmeiopagtocondpagto
'    lErro = CF("AdmMeioPagtoCondPagto_Altera_Saldo", objAdmMeioPagtoCondPagto)
'    If lErro <> SUCESSO Then gError 108003
'
'    'exclui o borderovaleticket
'    lErro = Comando_ExecutarPos(alComando(4), "DELETE FROM BorderoValeTicket", alComando(0))
'    If lErro <> SUCESSO Then gError 108004
'
'    Back_Bordero_ValeTicket_Excluir = SUCESSO
'
'    Exit Function
'
'Erro_Back_Bordero_ValeTicket_Excluir:
'
'    Back_Bordero_ValeTicket_Excluir = gErr
'
'    Select Case gErr
'
'        Case Else
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151262)
'
'    End Select
'
'    'fecha os comandos
'    For iIndice = LBound(alComando) To UBound(alComando)
'        Call Comando_Fechar(alComando(iIndice))
'    Next
'
'    Exit Function
'
'End Function

Function Registro_Back_Bordero_Outros(ByVal colRegistro As Collection, sArquivo As String, lRegistro As Long, ByVal iOperacao As Integer) As Long
'Trata o registro de bordero de outros e coloca os dados no bd do backoffice. sArquivo contem o nome do arquivo em que sRegistro foi lido.
'iRegistro é o numero do registro.

Dim iPosAtual As Integer
Dim iPosFimAtual As Integer
Dim objBorderoOutros As New ClassBorderoOutros
Dim objMovCx As New ClassMovimentoCaixa
Dim sRegistro As String
Dim lErro  As Long

On Error GoTo Erro_Registro_Back_Bordero_Outros

    sRegistro = colRegistro.Item(1)

    iPosFimAtual = InStr(sRegistro, Chr(vbKeyEscape))

    'guarda as infos de bordero
    lErro = CF("Back_Bordero_Outros", iPosAtual, iPosFimAtual, sRegistro, objBorderoOutros, objMovCx)
    If lErro <> SUCESSO Then gError 118524

    Select Case iOperacao

        Case INCLUSAO_BORDEROOUTROS
            'guarda as infos de bordero outros
            lErro = CF("Back_Bordero_Outros_Gravar", objBorderoOutros, objMovCx)
            If lErro <> SUCESSO And lErro <> 118961 Then gError 118525
        
        Case Else
            gError 117569
            
    End Select

    Registro_Back_Bordero_Outros = SUCESSO

    Exit Function

Erro_Registro_Back_Bordero_Outros:

    Registro_Back_Bordero_Outros = gErr

    Select Case gErr

        Case 117569
            Call Rotina_Erro(vbOKOnly, "ERRO_TIPOMOV_DIFERENTE", gErr)

        Case 118524, 118525

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151263)

    End Select

    Exit Function

End Function

Function Back_Bordero_Outros(iPosAtual As Integer, iPosFimAtual As Integer, sRegistro As String, ByVal objBorderoOutros As ClassBorderoOutros, ByVal objMovCx As ClassMovimentoCaixa) As Long
'guarda as infos de movimento de caixa relativos a bordero de outros

Dim lErro As Long
Dim objLog As New ClassLog

On Error GoTo Erro_Back_Bordero_Outros

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objBorderoOutros.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objBorderoOutros.lNumBordero = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objBorderoOutros.iAdmMeioPagto = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objBorderoOutros.iParcelamento = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objBorderoOutros.dtDataEnvio = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objBorderoOutros.dtDataImpressao = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objBorderoOutros.dtDataBackoffice = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objBorderoOutros.dValor = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objBorderoOutros.dValorN = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.lNumMovto = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iCaixa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.lSequencial = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iTipo = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dHora = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    objMovCx.iFilialEmpresa = objBorderoOutros.iFilialEmpresa
    objMovCx.iAdmMeioPagto = objBorderoOutros.iAdmMeioPagto
    objMovCx.iParcelamento = objBorderoOutros.iParcelamento
    objMovCx.dtDataMovimento = objBorderoOutros.dtDataEnvio
    objMovCx.lNumRefInterna = objBorderoOutros.lNumBordero
    objMovCx.dValor = objBorderoOutros.dValor + objBorderoOutros.dValorN

    Back_Bordero_Outros = SUCESSO

    Exit Function

Erro_Back_Bordero_Outros:

    Back_Bordero_Outros = gErr

    Select Case gErr

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151264)

    End Select

    Exit Function

End Function

Function Back_Bordero_Outros_Gravar(objBorderoOutros As ClassBorderoOutros, objMovimentoCaixa As ClassMovimentoCaixa) As Long
'grava as informacoes sobre o bordero de outros

Dim lErro As Long
Dim iIndice As Integer
Dim objCCMovDia As New ClassCCMovDia
Dim alComando(0 To 1) As Long
Dim objTMPLojaFilial As New ClassTMPLojaFilial
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim objLog As New ClassLog
Dim iFilialEmpresa As Integer

On Error GoTo Erro_Back_Bordero_Outros_Gravar

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir
        If alComando(iIndice) = 0 Then gError 118526
    Next
    
    lErro = Comando_ExecutarPos(alComando(0), "SELECT FilialEmpresa " & _
                                          "FROM BorderoOutros " & _
                                          "WHERE FilialEmpresa=? " & _
                                          "AND NumBordero=? ", 0, _
                                            iFilialEmpresa, objBorderoOutros.iFilialEmpresa, objBorderoOutros.lNumBordero)
    If lErro <> AD_SQL_SUCESSO Then gError 118959
    
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118960
    
    If lErro = AD_SQL_SUCESSO Then gError 118961
    
    'executa a inserção na tabela de movimentos de caixa
    lErro = Comando_Executar(alComando(1), "INSERT INTO MovimentosCaixa(FilialEmpresa,NumMovto,Caixa,Sequencial,Tipo,AdmMeioPagto,Parcelamento,TipoCartao,Numero,DataMovimento,Valor,Historico,Favorecido,CupomFiscal,NumRefInterna,MovtoTransf,MovtoEstorno,Gerente,CodConta,Hora, NumIntDocLog, QuantLog) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
    objMovimentoCaixa.iFilialEmpresa, objMovimentoCaixa.lNumMovto, objMovimentoCaixa.iCaixa, objMovimentoCaixa.lSequencial, objMovimentoCaixa.iTipo, objMovimentoCaixa.iAdmMeioPagto, objMovimentoCaixa.iParcelamento, objMovimentoCaixa.iTipoCartao, objMovimentoCaixa.lNumero, objMovimentoCaixa.dtDataMovimento, objMovimentoCaixa.dValor, objMovimentoCaixa.sHistorico, objMovimentoCaixa.sFavorecido, objMovimentoCaixa.lCupomFiscal, objMovimentoCaixa.lNumRefInterna, objMovimentoCaixa.lMovtoTransf, objMovimentoCaixa.lMovtoEstorno, objMovimentoCaixa.iGerente, objMovimentoCaixa.iCodConta, objMovimentoCaixa.dHora, objLog.lNumIntDoc, objLog.iQuantLog)
    If lErro <> SUCESSO Then gError 118527

    'gera o título a receber associado ao borderô
    lErro = CF("TituloReceber_Gera_BorderoOutros", objBorderoOutros)
    If lErro <> SUCESSO Then gError 118528

    objBorderoOutros.lNumMovtoCx = objMovimentoCaixa.lNumMovto

    'insere o borderô pp dito
    lErro = CF("BorderoOutros_Inserir", objBorderoOutros)
    If lErro <> SUCESSO Then gError 118529

    'preenche um ccmovdia
    Call Mover_Dados_BorderoOutros_CCMovDia(objBorderoOutros, objCCMovDia)

    objCCMovDia.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_OUTROS

    'adiciona no acumulado diário
    lErro = CF("CCMovDia_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 118530

    'adiciona no acumulado mensal
    lErro = CF("CCMov_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 118531

    'preenche um admmeiopagtocondpagto
    Call Mover_Dados_BorderoOutros_AdmMeioPagtoCondPagto1(objBorderoOutros, objAdmMeioPagtoCondPagto)

    'altera o seu saldo
    lErro = CF("AdmMeioPagtoCondPagto_Altera_Saldo", objAdmMeioPagtoCondPagto)
    If lErro <> SUCESSO Then gError 118532

    'se o valor não especificado for diferente de 0
    If objBorderoOutros.dValorN <> 0 Then

        'instancia um tmplojafilial
        Set objTMPLojaFilial = New ClassTMPLojaFilial

        'preenche seus dados
        objTMPLojaFilial.dSaldo = -objBorderoOutros.dValorN
        objTMPLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_OUTROS
        objTMPLojaFilial.iFilialEmpresa = objBorderoOutros.iFilialEmpresa

        'altera seu saldo
        lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTMPLojaFilial)
        If lErro <> SUCESSO Then gError 118533

    End If

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Back_Bordero_Outros_Gravar = SUCESSO

    Exit Function

Erro_Back_Bordero_Outros_Gravar:

    Back_Bordero_Outros_Gravar = gErr

    Select Case gErr
        
        Case 118526
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 118527
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MOVCAIXA", gErr, objMovimentoCaixa.iFilialEmpresa, objMovimentoCaixa.iCaixa, objMovimentoCaixa.lSequencial)

        Case 118528 To 118533
        
        Case 118959, 118960
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BORDEROOUTROS", gErr, objBorderoOutros.iFilialEmpresa, objBorderoOutros.lNumBordero)
        
        Case 118961
            Call Rotina_Erro(vbOKOnly, "ERRO_BORDEROOUTROS_ENCONTRADO", gErr, objBorderoOutros.iFilialEmpresa, objBorderoOutros.lNumBordero)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151265)

    End Select

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

'Function Back_Bordero_Outros_Excluir(objBorderoValeTicket As ClassBorderoValeTicket) As Long
''exclui as informacoes sobre o bordero de Outros
'
''Pendencias: Inserir Back_Bordero_Outros_Excluir no Dic. Acertar as msgs e num de erro.
'
'Dim lErro As Long
'Dim iIndice As Integer
'Dim objCCMovDia As New ClassCCMovDia
'Dim alComando(0 To 3) As Long
'Dim objTMPLojaFilial As New ClassTMPLojaFilial
'Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
'Dim tBorderoOutros As typeBorderoOutros
'Dim tMovcx As typeMovimentoCaixa
'
'On Error GoTo Erro_Back_Bordero_Outros_Excluir
'
'    'busca o bordero no bd
'    lErro = Comando_ExecutarPos(alComando(0), "SELECT DataBackoffice,NumIntDocCPR,FilialEmpresa,NumBordero,AdmMeioPagto,Parcelamento,DataEnvio,DataImpressao,Valor, NumMovtoCx  " & _
'                                              "FROM BorderoOutros " & _
'                                              "WHERE FilialEmpresa=? " & _
'                                              "AND NumBordero=? ", 0, _
'                                              tBorderoOutros.dtDataBackoffice, tBorderoOutros.lNumIntDocCPR, tBorderoOutros.iFilialEmpresa, tBorderoOutros.lNumBordero, tBorderoOutros.iAdmMeioPagto, tBorderoOutros.iParcelamento, tBorderoOutros.dtDataEnvio, tBorderoOutros.dtDataImpressao, tBorderoOutros.dValor, tBorderoOutros.lNumMovtoCx, _
'                                              objBorderoOutros.iFilialEmpresa, _
'                                              objBorderoOutros.lNumBordero)
'    If lErro <> AD_SQL_SUCESSO Then gError 108137
'
'    'busca o primeiro
'    lErro = Comando_BuscarPrimeiro(alComando(0))
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 108157
'
'    'se não encontrar-> erro
'    If lErro = AD_SQL_SEM_DADOS Then gError 108138
'
'    'locka o borderô
'    lErro = Comando_LockExclusive(alComando(0))
'    If lErro <> AD_SQL_SUCESSO Then gError 110092
'
'    'seleciona o movimento de caixa associado
'    lErro = Comando_ExecutarPos(alComando(2), "SELECT NumIntDocLog, QuantLog " & _
'                                              "FROM MovimentosCaixa " & _
'                                              "WHERE FilialEmpresa=? " & _
'                                              "AND NumMovto=? ", 0, _
'                                              tMovcx.lNumIntDocLog, tMovcx.iQuantLog, _
'                                               objBorderoOutros.iFilialEmpresa, tBorderoOutros.lNumMovtoCx)
'    If lErro <> AD_SQL_SUCESSO Then gError 108146
'
'    'busca o primeiro
'    lErro = Comando_BuscarPrimeiro(alComando(2))
'    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 108147
'
'    'se não encontrar-> erro
'    If lErro = AD_SQL_SEM_DADOS Then gError 108148
'
'    'locka o movimento
'    lErro = Comando_LockExclusive(alComando(2))
'    If lErro <> AD_SQL_SUCESSO Then gError 108149
'
'    'deleta o movimento de caixa
'    lErro = Comando_ExecutarPos(alComando(3), "DELETE FROM MovimentosCaixa", alComando(2))
'    If lErro <> AD_SQL_SUCESSO Then gError 108150
'
'    'preenche um ccmovdia
'    Call Mover_Dados_BorderoOutros_CCMovDia1(tBorderoOutros, objCCMovDia)
'
'    'subtrai do acumulado diário
'    lErro = CF("CCMovDia_Exclui", objCCMovDia)
'    If lErro <> SUCESSO Then gError 108151
'
'    'subtrai do acumulado mensal
'    lErro = CF("CCMov_Exclui", objCCMovDia)
'    If lErro <> SUCESSO Then gError 108152
'
'    'preenche um admmeiopagtocondpagto
'    Call Mover_Dados_BorderoOutros_AdmMeioPagtoCondPagto(tBorderoOutros, objAdmMeioPagtoCondPagto)
'
'    'adiciona ao saldo do admmeiopagtocondpagto
'    lErro = CF("AdmMeioPagtoCondPagto_Altera_Saldo", objAdmMeioPagtoCondPagto)
'    If lErro <> SUCESSO Then gError 108153
'
'    'exclui o borderooutros
'    lErro = Comando_ExecutarPos(alComando(4), "DELETE FROM BorderoOutros", alComando(0))
'    If lErro <> SUCESSO Then gError 108154
'
'    Back_Bordero_Outros_Excluir = SUCESSO
'
'    Exit Function
'
'Erro_Back_Bordero_Outros_Excluir:
'
'    Back_Bordero_Outros_Excluir = gErr
'
'    Select Case gErr
'
'        Case Else
'            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151266)
'
'    End Select
'
'    'fecha os comandos
'    For iIndice = LBound(alComando) To UBound(alComando)
'        Call Comando_Fechar(alComando(iIndice))
'    Next
'
'    Exit Function
'
'End Function

Function Registro_Back_Recebimento_Carne(ByVal colRegistro As Collection, sArquivo As String, ByVal lRegistro As Long) As Long
'Trata o registro de recebimento de carne e coloca os dados no bd do backoffice. sArquivo contem o nome do arquivo em que sRegistro foi lido.
'lRegistro é o numero do registro.

Dim iPosAtual As Integer
Dim iPosFimAtual As Integer
Dim sRegistro As String
Dim iRegistroCol As Integer
Dim objBaixasCarne As New ClassBaixasCarne
Dim colCheque As New Collection
Dim colMovCx As New Collection
Dim lErro As Long

On Error GoTo Erro_Registro_Back_Recebimento_Carne

    iPosFimAtual = InStr(sRegistro, Chr(vbKeyEscape))
    iRegistroCol = 1

    'le as infos de cupom
    lErro = CF("Back_RecCarne_BaixasCarne", iPosAtual, iPosFimAtual, colRegistro, iRegistroCol, objBaixasCarne)
    If lErro <> SUCESSO Then gError 118534

    'le as infos de carne se houverem
    lErro = CF("Back_RecCarne_BaixasParcCarne", iPosAtual, iPosFimAtual, colRegistro, iRegistroCol, objBaixasCarne)
    If lErro <> SUCESSO Then gError 118535

    'le as infos de cheque se houverem
    lErro = CF("Back_RecCarne_Cheque", iPosAtual, iPosFimAtual, colRegistro, iRegistroCol, colCheque)
    If lErro <> SUCESSO Then gError 118536

    'le as infos de movimento de caixa
    lErro = CF("Back_RecCarne_Movcx", iPosAtual, iPosFimAtual, colRegistro, iRegistroCol, colMovCx)
    If lErro <> SUCESSO Then gError 118537

    lErro = CF("Back_RecCarne_Gravar", objBaixasCarne, colCheque, colMovCx)
    If lErro <> SUCESSO And lErro <> 118964 Then gError 118538

    Registro_Back_Recebimento_Carne = SUCESSO

    Exit Function

Erro_Registro_Back_Recebimento_Carne:

    Registro_Back_Recebimento_Carne = gErr

    Select Case gErr

        Case 118534 To 118538

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151267)

    End Select

    Exit Function

End Function

Function Back_RecCarne_BaixasCarne(iPosAtual As Integer, iPosFimAtual As Integer, colRegistro As Collection, iRegistroCol As Integer, objBaixasCarne As ClassBaixasCarne) As Long
'le as infos de baixa carne

Dim sRegistro As String

On Error GoTo Erro_Back_RecCarne_BaixasCarne

    sRegistro = colRegistro.Item(iRegistroCol)

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objBaixasCarne.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objBaixasCarne.lNumIntDoc = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objBaixasCarne.dtDataBaixa = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objBaixasCarne.lCodigo = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    Back_RecCarne_BaixasCarne = SUCESSO

    Exit Function

Erro_Back_RecCarne_BaixasCarne:

    Back_RecCarne_BaixasCarne = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151268)

    End Select

    Exit Function

End Function

Function Back_RecCarne_BaixasParcCarne(iPosAtual As Integer, iPosFimAtual As Integer, colRegistro As Collection, iRegistroCol As Integer, objBaixasCarne As ClassBaixasCarne) As Long
'le as infos dos itens do cupom

Dim objBaixasParcCarne As ClassBaixasParcCarne
Dim lErro As Long
Dim iIndice As Integer
Dim sRegistro As String

On Error GoTo Erro_Back_RecCarne_BaixasParcCarne

    For iIndice = iRegistroCol To colRegistro.Count

        sRegistro = colRegistro.Item(iIndice)

        Do While Mid(sRegistro, iPosAtual, 1) = Chr(vbKeyControl)

            Set objBaixasParcCarne = New ClassBaixasParcCarne

            objBaixasCarne.colParcelas.Add objBaixasParcCarne

            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objBaixasParcCarne.lNumIntDoc = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objBaixasParcCarne.lNumIntParcelaCarne = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objBaixasParcCarne.dValorBaixado = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objBaixasParcCarne.dValorDesconto = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objBaixasParcCarne.dValorJuros = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objBaixasParcCarne.dValorMulta = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

            iPosAtual = iPosFimAtual + 1

        Loop

        If iPosAtual <= Len(sRegistro) Then Exit For

        iPosAtual = 1

    Next

    iRegistroCol = iIndice

    Back_RecCarne_BaixasParcCarne = SUCESSO

    Exit Function

Erro_Back_RecCarne_BaixasParcCarne:

    Back_RecCarne_BaixasParcCarne = gErr

    Select Case gErr

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151269)

    End Select

    Exit Function

End Function

Function Back_RecCarne_Cheque(iPosAtual As Integer, iPosFimAtual As Integer, colRegistro As Collection, iRegistroCol As Integer, colCheque As Collection) As Long
'le as infos de movimento de cheque

Dim lErro As Long
Dim objCheque As ClassChequePre
Dim iIndice As Integer
Dim sRegistro As String

On Error GoTo Erro_Back_RecCarne_Cheque

    sRegistro = colRegistro.Item(iRegistroCol)

    'pula o separator
    iPosAtual = iPosFimAtual + 1

    'se o proximo caracter nao for um separator ==> le cheque
    If Mid(sRegistro, iPosAtual, 1) <> Chr(vbKeySeparator) Then

        For iIndice = iRegistroCol To colRegistro.Count

            sRegistro = colRegistro.Item(iIndice)

            Do While Mid(sRegistro, iPosAtual, 1) = Chr(vbKeyControl)

                Set objCheque = New ClassChequePre

                colCheque.Add objCheque

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objCheque.iBanco = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objCheque.sAgencia = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objCheque.sContaCorrente = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objCheque.lNumero = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objCheque.dtDataDeposito = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objCheque.dValor = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objCheque.sCPFCGC = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objCheque.lNumMovtoCaixa = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objCheque.iAprovado = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objCheque.iNaoEspecificado = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objCheque.lSequencialLoja = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objCheque.iCaixa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objCheque.lSequencialCaixa = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objCheque.dtDataEmissao = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1

            Loop

            If iPosAtual <= Len(sRegistro) Then Exit For

            iPosAtual = 1

        Next

        iRegistroCol = iIndice

    End If

    iPosFimAtual = iPosAtual

    Back_RecCarne_Cheque = SUCESSO

    Exit Function

Erro_Back_RecCarne_Cheque:

    Back_RecCarne_Cheque = gErr

    Select Case gErr

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151270)

    End Select

    Exit Function

End Function

Function Back_RecCarne_Movcx(iPosAtual As Integer, iPosFimAtual As Integer, colRegistro As Collection, iRegistroCol As Integer, colMovCx As Collection) As Long
'guarda as infos de movimento de caixa referentes ao recebimento de carne

Dim lErro As Long
Dim objMovCx As ClassMovimentoCaixa
Dim sRegistro As String
Dim iIndice As Integer

On Error GoTo Erro_Back_RecCarne_Movcx

    sRegistro = colRegistro.Item(iRegistroCol)

    'pula o separator
    iPosAtual = iPosFimAtual + 1

    'Se o proximo caracter for o vbKeyControl ==> tem movimentos de caixa envolvidos
    If Mid(sRegistro, iPosAtual, 1) = Chr(vbKeyControl) Then

        For iIndice = iRegistroCol To colRegistro.Count

            sRegistro = colRegistro.Item(iIndice)

            Do While Mid(sRegistro, iPosAtual, 1) = Chr(vbKeyControl)

                Set objMovCx = New ClassMovimentoCaixa

                colMovCx.Add objMovCx

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objMovCx.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objMovCx.lNumMovto = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objMovCx.iCaixa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objMovCx.iCodOperador = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objMovCx.lSequencial = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objMovCx.iTipo = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objMovCx.iAdmMeioPagto = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objMovCx.iParcelamento = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objMovCx.iTipoCartao = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objMovCx.lNumero = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objMovCx.dtDataMovimento = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objMovCx.dValor = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objMovCx.sHistorico = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objMovCx.sFavorecido = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objMovCx.lCupomFiscal = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objMovCx.lNumRefInterna = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objMovCx.lMovtoTransf = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objMovCx.lMovtoEstorno = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objMovCx.iGerente = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objMovCx.iCodConta = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objMovCx.dHora = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objMovCx.lTransferencia = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objMovCx.lNumIntExt = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1

            Loop

            If iPosAtual <= Len(sRegistro) Then Exit For

            iPosAtual = 1

        Next

        iRegistroCol = iIndice

    End If

    iPosFimAtual = iPosAtual

    Back_RecCarne_Movcx = SUCESSO

    Exit Function

Erro_Back_RecCarne_Movcx:

    Back_RecCarne_Movcx = gErr

    Select Case gErr

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151271)

    End Select

    Exit Function

End Function

Function Back_RecCarne_Gravar(ByVal objBaixasCarne As ClassBaixasCarne, ByVal colCheque As Collection, ByVal colMovCx As Collection) As Long
'Grava um recebimento de carnet

Dim lErro As Long
Dim alComando(0 To 5) As Long
Dim iIndice As Integer
Dim objMovCx As ClassMovimentoCaixa
Dim objBaixasParcCarne As ClassBaixasParcCarne
Dim colCarne As New Collection
Dim bAchou As Boolean
Dim objLog As New ClassLog
Dim lNumIntCarne As Long
Dim vNumIntCarne As Variant
Dim iFilialEmpresa As Integer

On Error GoTo Erro_Back_RecCarne_Gravar

    'Abertura dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 118539
    Next
    
    'insere na tabela
    lErro = Comando_Executar(alComando(0), "SELECT FilialEmpresa FROM BaixasCarne " & _
                                       "WHERE FilialEmpresa = ?, NumIntBaixa = ? " & _
                                       iFilialEmpresa, objBaixasCarne.iFilialEmpresa, objBaixasCarne.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 118962
    
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SEM_DADOS And lErro <> AD_SQL_SUCESSO Then gError 118963
    
    If lErro = AD_SQL_SUCESSO Then gError 118964
    
    'insere na tabela
    lErro = Comando_Executar(alComando(1), "INSERT INTO BaixasCarne " & _
                                       "(FilialEmpresa, NumIntBaixa, DataBaixa, Codigo) " & _
                                       "VALUES (?,?,?,?)", _
                                       objBaixasCarne.iFilialEmpresa, objBaixasCarne.lNumIntDoc, objBaixasCarne.dtDataBaixa, objBaixasCarne.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 118540

    'Para cada parcela a ter seu recebimento gravado
    For Each objBaixasParcCarne In objBaixasCarne.colParcelas

        objBaixasParcCarne.iFilialEmpresa = objBaixasCarne.iFilialEmpresa

        'insere na tabela
        lErro = Comando_Executar(alComando(2), "INSERT INTO BaixasParcCarne " & _
                                           "(FilialEmpresa, NumIntDoc, NumIntBaixa, NumIntParcelaCarne, ValorBaixado, ValorDesconto, ValorMulta, ValorJuros) " & _
                                           "VALUES (?,?,?,?,?,?,?,?)", _
                                           objBaixasParcCarne.iFilialEmpresa, objBaixasParcCarne.lNumIntDoc, objBaixasParcCarne.lNumIntBaixa, objBaixasParcCarne.lNumIntParcelaCarne, objBaixasParcCarne.dValorBaixado, objBaixasParcCarne.dValorDesconto, objBaixasParcCarne.dValorMulta, objBaixasParcCarne.dValorJuros)
        If lErro <> AD_SQL_SUCESSO Then gError 118541

        'Tenta ler a parcela do carnet
        lErro = Comando_ExecutarPos(alComando(3), "SELECT NumIntCarne FROM CarneParcelas WHERE FilialEmpresa = ? And NumIntDoc = ?", 0, lNumIntCarne, objBaixasParcCarne.iFilialEmpresa, objBaixasParcCarne.lNumIntParcelaCarne)
        If lErro <> AD_SQL_SUCESSO Then gError 118542

        lErro = Comando_BuscarPrimeiro(alComando(3))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118543

        'Se não Encontrou Gera Erro
        If lErro = AD_SQL_SEM_DADOS Then gError 118544

        'Faz "lock" da parcela
        lErro = Comando_LockExclusive(alComando(3))
        If lErro <> SUCESSO Then gError 118545

        'Atualiza o status
        lErro = Comando_ExecutarPos(alComando(4), "UPDATE CarneParcelas SET Status=?", alComando(3), STATUS_BAIXADO)
        If lErro <> AD_SQL_SUCESSO Then gError 118546

        bAchou = False

        'Para cada carne
        For Each vNumIntCarne In colCarne
            'se já existe -->sai
            If vNumIntCarne = lNumIntCarne Then
                bAchou = True
                Exit For
            End If
        Next

        'Se não existe na col --> add.
        If Not (bAchou) Then colCarne.Add lNumIntCarne

    Next

    'Grava todos os movimentos de caixa
    For Each objMovCx In colMovCx

        'executa a inserção na tabela de movimentos de caixa
        lErro = Comando_Executar(alComando(5), "INSERT INTO MovimentosCaixa(FilialEmpresa,NumMovto,Caixa,Sequencial,Tipo,AdmMeioPagto,Parcelamento,TipoCartao,Numero,DataMovimento,Valor,Historico,Favorecido,CupomFiscal,NumRefInterna,MovtoTransf,MovtoEstorno,Gerente,CodConta,Hora) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
        objMovCx.iFilialEmpresa, objMovCx.lNumMovto, objMovCx.iCaixa, objMovCx.lSequencial, objMovCx.iTipo, objMovCx.iAdmMeioPagto, objMovCx.iParcelamento, objMovCx.iTipoCartao, objMovCx.lNumero, objMovCx.dtDataMovimento, objMovCx.dValor, objMovCx.sHistorico, objMovCx.sFavorecido, objMovCx.lCupomFiscal, objMovCx.lNumRefInterna, objMovCx.lMovtoTransf, objMovCx.lMovtoEstorno, objMovCx.iGerente, objMovCx.iCodConta, objMovCx.dHora)
        If lErro <> SUCESSO Then gError 118547

    Next

    'gravar os dados de cheque caso existam
    lErro = CF("Back_Cheque_Gravar_Venda", colCheque)
    If lErro <> SUCESSO Then gError 118548

    lErro = CF("Verifica_Status", colCarne)
    If lErro <> SUCESSO Then gError 118549

    'Fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Back_RecCarne_Gravar = SUCESSO

    Exit Function

Erro_Back_RecCarne_Gravar:

    Back_RecCarne_Gravar = gErr

    Select Case gErr

        Case 118539
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 118540
            Call Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_BAIXASCARNE", gErr)
        
        Case 118541
            Call Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_BAIXASPARCCARNE", gErr)
            
        Case 118542, 118543
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CARNEPARC", gErr)
        
        Case 118544
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CARNEPARC_NAO_EXISTENTES", gErr)

        Case 118545
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_CARNEPARC", gErr)
        
        Case 118546
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_CARNEPARC", gErr)
                    
        Case 118547
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MOVCAIXA", gErr, objMovCx.iFilialEmpresa, objMovCx.iCaixa, objMovCx.lSequencial)
            
        Case 118548, 118549
        
        Case 118962, 118963
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BAIXASCARNE", gErr, objBaixasCarne.lNumIntDoc)
        
        Case 118964
            Call Rotina_Erro(vbOKOnly, "ERRO_BAIXASCARNE_CADASTRADA", gErr, objBaixasCarne.lNumIntDoc)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151272)

    End Select

    Call Transacao_Rollback

    'Fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Registro_Back_ExcRecebimento_Carne(ByVal colRegistro As Collection, sArquivo As String, ByVal lRegistro As Long, colCCBack As Collection, lNumCupons As Long, ByVal lSequencial As Long, lNumIntMovEst As Long) As Long
'Trata o registro de exclusao de recebimento de carne e coloca os dados no bd do backoffice. sArquivo contem o nome do arquivo em que sRegistro foi lido.
'lRegistro é o numero do registro.

Dim iPosAtual As Integer
Dim iPosFimAtual As Integer
Dim sRegistro As String
Dim iRegistroCol As Integer
Dim objBaixasCarne As New ClassBaixasCarne
Dim colCheque As New Collection
Dim lErro As Long

On Error GoTo Erro_Registro_Back_ExcRecebimento_Carne

    iPosFimAtual = InStr(sRegistro, Chr(vbKeyEscape))
    iRegistroCol = 1

    'le as infos de cupom
    lErro = CF("Back_RecCarne_BaixasCarne", iPosAtual, iPosFimAtual, colRegistro, iRegistroCol, objBaixasCarne)
    If lErro <> SUCESSO Then gError 118550

    lErro = CF("Back_RecCarne_Excluir", objBaixasCarne)
    If lErro <> SUCESSO And lErro <> 118555 Then gError 118551

    Registro_Back_ExcRecebimento_Carne = SUCESSO

    Exit Function

Erro_Registro_Back_ExcRecebimento_Carne:

    Registro_Back_ExcRecebimento_Carne = gErr

    Select Case gErr
        
        Case 118550, 118551
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151273)

    End Select

    Exit Function

End Function

Function Back_RecCarne_Excluir(ByVal objBaixasCarne As ClassBaixasCarne) As Long
'Exclui o RecebimentoCarne

Dim lErro As Long
Dim alComando(0 To 11) As Long
Dim lTransacao As Long
Dim lNumIntDoc As Long
Dim lNumIntDoc2 As Long
Dim lNumIntParc As Long
Dim lNumIntCarne As Long
Dim iIndice As Integer
Dim iTipo As Integer
Dim lMovto As Long
Dim iStatus As Integer
Dim bAchou As Boolean
Dim lNumBorderoLoja As Long
Dim lSequencialLoja As Long
Dim dtDataBaixa As Date
Dim colCarneAtualizados As New Collection

On Error GoTo Erro_Back_RecCarne_Excluir

   'Abre os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 118552
    Next

    'Seleciona BaixasCarne
    lErro = Comando_ExecutarPos(alComando(0), "SELECT NumIntBaixa, DataBaixa FROM BaixasCarne WHERE FilialEmpresa = ? AND Codigo = ? ", 0, lNumIntDoc, dtDataBaixa, objBaixasCarne.iFilialEmpresa, objBaixasCarne.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 118553

    'Tenta ler
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118554

    'Se não encontrou
    If lErro = AD_SQL_SEM_DADOS Then gError 118555

    'Lock de BaixasCarne
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 118556

    objBaixasCarne.lNumIntDoc = lNumIntDoc
    objBaixasCarne.dtDataBaixa = dtDataBaixa

    'Seleciona todos os movimentos de caixa vinculados à baixa
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Tipo, NumMovto FROM MovimentosCaixa WHERE FilialEmpresa = ? AND NumRefInterna = ? AND (Tipo = ? or Tipo = ? or Tipo = ? or Tipo = ? or Tipo = ? or Tipo =? or Tipo =?)", 0, iTipo, lMovto, objBaixasCarne.iFilialEmpresa, objBaixasCarne.lNumIntDoc, MOVIMENTOCAIXA_RECEB_CARNE_CARTAODEBITO, MOVIMENTOCAIXA_RECEB_CARNE_CHEQUE, MOVIMENTOCAIXA_RECEB_CARNE_DINHEIRO, MOVIMENTOCAIXA_RECEB_CARNE_OUTROS, MOVIMENTOCAIXA_CARNE_TROCO_CONTRAVALE, MOVIMENTOCAIXA_CARNE_TROCO_DINHEIRO, MOVIMENTOCAIXA_CARNE_TROCO_TICKET)
    If lErro <> AD_SQL_SUCESSO Then gError 118557

    'Tenta ler
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118558

    'Se não encontrou
    If lErro = AD_SQL_SEM_DADOS Then gError 118559

    'Enquanto tiver Movimentos de caixa
    Do While lErro = AD_SQL_SUCESSO

        'Lock de MovimentoCaixa
        lErro = Comando_LockExclusive(alComando(1))
        If lErro <> AD_SQL_SUCESSO Then gError 118560

        'se o recebimento envolver um cartao de debito, nao pode excluir pois o pagamento nao pode ser excluido.
        If iTipo = MOVIMENTOCAIXA_RECEB_CARNE_CARTAODEBITO Then gError 118561

        'Se for de cheque
        If iTipo = MOVIMENTOCAIXA_RECEB_CARNE_CHEQUE Then

            'Seleciona o cheque ( se achou não está viculado a bordero)
            lErro = Comando_ExecutarPos(alComando(2), "SELECT NumBorderoLoja, SequencialLoja FROM ChequePre WHERE NumMovtoCaixa = ? AND FilialEmpresa = ?", 0, lNumBorderoLoja, lSequencialLoja, lMovto, objBaixasCarne.iFilialEmpresa)
            If lErro <> AD_SQL_SUCESSO Then gError 118562

            'Tenta ler
            lErro = Comando_BuscarPrimeiro(alComando(2))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118563

            'Se não encontrou --> erro
            If lErro = AD_SQL_SEM_DADOS Then gError 118564

            'se o numero de bordero estiver preenchido ==> o cheque foi usado num bordero ==> nao pode ser excluido
            If lNumBorderoLoja <> 0 Then gError 118565

            'Exclui o cheque
            lErro = Comando_ExecutarPos(alComando(3), "DELETE FROM ChequePre", alComando(2))
            If lErro <> AD_SQL_SUCESSO Then gError 118566

        End If

        'Exclui o movimento de caixa
        lErro = Comando_ExecutarPos(alComando(4), "DELETE FROM MovimentosCaixa", alComando(1))
        If lErro <> AD_SQL_SUCESSO Then gError 118567

        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118568

    Loop

    'Seleciona todas as parcelas relacionas a baixa em BaixasParcCarne
    lErro = Comando_ExecutarPos(alComando(5), "SELECT NumIntParcelaCarne FROM BaixasParcCarne WHERE FilialEmpresa = ? AND NumIntBaixa = ? ", 0, lNumIntParc, objBaixasCarne.iFilialEmpresa, objBaixasCarne.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 118569

    'Tenta ler
    lErro = Comando_BuscarPrimeiro(alComando(5))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118570

    'Se não encontrou
    If lErro = AD_SQL_SEM_DADOS Then gError 118571

    'Enquanto tiver parcelas
    Do While lErro = AD_SQL_SUCESSO

        'Lock de baixa
        lErro = Comando_LockExclusive(alComando(5))
        If lErro <> AD_SQL_SUCESSO Then gError 118572

        'Seleciona a parcela q está relacionada a baixa
        lErro = Comando_ExecutarPos(alComando(6), "SELECT NumIntCarne, Status FROM CarneParcelas WHERE NumIntDoc = ? AND FilialEmpresa = ?", 0, lNumIntCarne, iStatus, lNumIntParc, objBaixasCarne.iFilialEmpresa)
        If lErro <> AD_SQL_SUCESSO Then gError 118573

        'Tenta ler
        lErro = Comando_BuscarPrimeiro(alComando(6))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118574

        'Se não encontrou --> erro.
        If lErro = AD_SQL_SEM_DADOS Then gError 118575

        'Lock de parcela
        lErro = Comando_LockExclusive(alComando(6))
        If lErro <> AD_SQL_SUCESSO Then gError 118576

        'Atualiza a parcela --> status lançado.
        lErro = Comando_ExecutarPos(alComando(7), "UPDATE CarneParcelas SET Status=?, DataBaixa=?", alComando(6), STATUS_LANCADO, DATA_NULA)
        If lErro <> AD_SQL_SUCESSO Then gError 118577

        bAchou = False

        'Para cada carne --> verifica se já foi atualizado
        For iIndice = 1 To colCarneAtualizados.Count
            'se já existe -->sai
            If lNumIntCarne = colCarneAtualizados.Item(iIndice) Then
                bAchou = True
                Exit For
            End If
        Next

        'Se não existe na col --> carne ainda não atualizado.
        If Not (bAchou) Then

            'Seleciona o carne para ser atualizado
            lErro = Comando_ExecutarPos(alComando(8), "SELECT NumIntDoc FROM Carne WHERE NumIntDoc = ? AND FilialEmpresa = ?", 0, lNumIntDoc2, lNumIntCarne, objBaixasCarne.iFilialEmpresa)
            If lErro <> AD_SQL_SUCESSO Then gError 118578

            'Tenta ler
            lErro = Comando_BuscarPrimeiro(alComando(8))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118579

            'Se não encontrou --> erro.
            If lErro = AD_SQL_SEM_DADOS Then gError 118580

            'Lock do carnet
            lErro = Comando_LockExclusive(alComando(8))
            If lErro <> AD_SQL_SUCESSO Then gError 118581

            'Atualiza o carnet --> status lançado.
            lErro = Comando_ExecutarPos(alComando(9), "UPDATE Carne SET Status=?", alComando(8), STATUS_LANCADO)
            If lErro <> AD_SQL_SUCESSO Then gError 118582

            'Coloca na col de Atualizados
            colCarneAtualizados.Add lNumIntCarne

         End If

        'Exclui a parcela
        lErro = Comando_ExecutarPos(alComando(10), "DELETE FROM BaixasParcCarne", alComando(5))
        If lErro <> AD_SQL_SUCESSO Then gError 118583

        'Busca próxima parcela a ser cancelada
        lErro = Comando_BuscarProximo(alComando(5))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118584

    Loop

    'Exclui a baixa
    lErro = Comando_ExecutarPos(alComando(11), "DELETE FROM BaixasCarne", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 118585

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Back_RecCarne_Excluir = SUCESSO

    Exit Function

Erro_Back_RecCarne_Excluir:

    Back_RecCarne_Excluir = gErr

    Select Case gErr

        Case 118552
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 118553, 118554
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BAIXASCARNE", gErr, objBaixasCarne.lCodigo)

        Case 118555
            Call Rotina_Erro(vbOKOnly, "ERRO_BAIXASCARNE_NAO_CADASTRADA", gErr, objBaixasCarne.lCodigo)

        Case 118556
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_BAIXASCARNE", gErr, objBaixasCarne.lCodigo)

        Case 118557, 118558, 118568
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOS_CAIXA", gErr)

        Case 118559
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOCAIXA_NAO_CADASTRADO1", gErr)

        Case 118560
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_MOVIMENTOSCAIXA1", gErr)
        
        Case 118561
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_RECEBCARNE_CARTAODEBITO", gErr)

        Case 118562, 118563
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUE", gErr)

        Case 118564
            Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUE_INEXISTENTE1", gErr)
        
        Case 118565
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_RECEBCARNE_CHEQUEEMBORDERO", gErr, lSequencialLoja, lNumBorderoLoja)
        
        Case 118566
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CHEQUE1", gErr)

        Case 118567
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_MOVIMENTOSCAIXA", gErr)

        Case 118569, 118570, 118584
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BAIXASPARCCARNE", gErr)

        Case 118571
            Call Rotina_Erro(vbOKOnly, "ERRO_BAIXASPARCCARNE_NAO_CADASTRADA", gErr)

        Case 118572
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_BAIXASPARCCARNE", gErr)

        Case 118573, 118574
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CARNEPARC", gErr)

        Case 118575
            Call Rotina_Erro(vbOKOnly, "ERRO_CARNEPARC_NAO_EXISTENTES", gErr)

        Case 118576
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CARNEPARC", gErr)

        Case 118577
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_CARNEPARC", gErr)

        Case 118578, 118579
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CARNE", gErr)

        Case 118580
            Call Rotina_Erro(vbOKOnly, "ERRO_CARNE_NAO_EXISTENTE", gErr)

        Case 118581
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CARNE", gErr)

        Case 118582
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_CARNE", gErr)

        Case 118583
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_BAIXASPARCCARNE", gErr)

        Case 118585
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_BAIXASCARNE", gErr)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151274)

    End Select

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Registro_Back_AdmMeioPagto(ByVal colRegistro As Collection, sArquivo As String, lRegistro As Long, ByVal iOperacao As Integer) As Long
'Trata o registro de AdmMeioPagto e coloca os dados no bd do backoffice. sArquivo contem o nome do arquivo em que sRegistro foi lido.
'iRegistro é o numero do registro.

Dim iPosAtual As Integer
Dim iPosFimAtual As Integer
Dim sRegistro As String
Dim iRegistroCol As Integer
Dim objAdmMeioPagto As New ClassAdmMeioPagto
Dim lErro As Long

On Error GoTo Erro_Registro_Back_AdmMeioPagto

    sRegistro = colRegistro.Item(1)

    iPosFimAtual = InStr(sRegistro, Chr(vbKeyEscape))

    iRegistroCol = 1

    Select Case iOperacao

        Case INCLUSAO_ADMMEIOPAGTO_CAIXA_CENTRAL
            'guarda as infos de AdmMeioPagto
            lErro = CF("Back_AdmMeioPagto", iPosAtual, iPosFimAtual, colRegistro, iRegistroCol, objAdmMeioPagto)
            If lErro <> SUCESSO Then gError 118586
    
            'inclui as infos de admMeioPagto
            lErro = CF("Back_AdmMeioPagto_Incluir", objAdmMeioPagto)
            If lErro <> SUCESSO And lErro <> 118967 Then gError 118587

        Case ALTERACAO_ADMMEIOPAGTO_CAIXA_CENTRAL
            'guarda as infos de AdmMeioPagto
            lErro = CF("Back_AdmMeioPagto", iPosAtual, iPosFimAtual, colRegistro, iRegistroCol, objAdmMeioPagto)
            If lErro <> SUCESSO Then gError 118772
    
            'altera as infos de AdmMeioPagto.
            lErro = CF("Back_AdmMeioPagto_Alterar", objAdmMeioPagto)
            If lErro <> SUCESSO Then gError 118588
        
        Case EXCLUSAO_ADMMEIOPAGTO_CAIXA_CENTRAL
            'guarda as infos de AdmMeioPagto
            lErro = CF("Back_Exclui_AdmMeioPagto", iPosAtual, iPosFimAtual, colRegistro, iRegistroCol, objAdmMeioPagto)
            If lErro <> SUCESSO Then gError 118773
    
            'altera as infos de AdmMeioPagto.
            lErro = CF("Back_AdmMeioPagto_Exclui", objAdmMeioPagto)
            If lErro <> SUCESSO And lErro <> 118765 Then gError 118760

    End Select

    Registro_Back_AdmMeioPagto = SUCESSO

    Exit Function

Erro_Registro_Back_AdmMeioPagto:

    Registro_Back_AdmMeioPagto = gErr

    Select Case gErr

        Case 118586, 118587, 118588, 118760, 118772, 118773

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151275)

    End Select

    Exit Function

End Function

Function Back_AdmMeioPagto(iPosAtual As Integer, iPosFimAtual As Integer, colRegistro As Collection, iRegistroCol As Integer, objAdmMeioPagto As ClassAdmMeioPagto) As Long
'le as infos de admmeiopagto

Dim sRegistro As String
Dim lErro As Long

On Error GoTo Erro_Back_AdmMeioPagto
    
    sRegistro = colRegistro.Item(iRegistroCol)

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objAdmMeioPagto.iCodigo = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objAdmMeioPagto.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objAdmMeioPagto.sNome = CStr(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objAdmMeioPagto.iRede = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objAdmMeioPagto.dTaxaVista = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objAdmMeioPagto.dTaxaParcelado = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objAdmMeioPagto.iTipoMeioPagto = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objAdmMeioPagto.iDefasagemPagtoVista = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objAdmMeioPagto.iContaCorrenteInterna = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objAdmMeioPagto.iGeraTituloRec = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objAdmMeioPagto.lEndereco = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objAdmMeioPagto.iCodBanco = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objAdmMeioPagto.sAgencia = CStr(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objAdmMeioPagto.iAtivo = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    If objAdmMeioPagto.lEndereco > 0 Then

        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objAdmMeioPagto.objEndereco.sEndereco = CStr(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objAdmMeioPagto.objEndereco.sBairro = CStr(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objAdmMeioPagto.objEndereco.sCidade = CStr(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objAdmMeioPagto.objEndereco.sSiglaEstado = CStr(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objAdmMeioPagto.objEndereco.iCodigoPais = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objAdmMeioPagto.objEndereco.sCEP = CStr(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objAdmMeioPagto.objEndereco.sTelefone1 = CStr(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objAdmMeioPagto.objEndereco.sTelefone2 = CStr(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objAdmMeioPagto.objEndereco.sEmail = CStr(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objAdmMeioPagto.objEndereco.sFax = CStr(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objAdmMeioPagto.objEndereco.sContato = CStr(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    End If

    'pula o ultimo vbKeyEscape
    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = iPosAtual

    'guarda as infos de AdmMeioPagtoCondPagto
    lErro = CF("Back_AdmMeioPagto_CondPagto", iPosAtual, iPosFimAtual, colRegistro, iRegistroCol, objAdmMeioPagto)
    If lErro <> SUCESSO Then gError 118589

    Back_AdmMeioPagto = SUCESSO

    Exit Function

Erro_Back_AdmMeioPagto:

    Back_AdmMeioPagto = gErr

    Select Case gErr
        
        Case 118589
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151276)

    End Select

    Exit Function

End Function
   
Function Back_Exclui_AdmMeioPagto(iPosAtual As Integer, iPosFimAtual As Integer, colRegistro As Collection, iRegistroCol As Integer, objAdmMeioPagto As ClassAdmMeioPagto) As Long
'le as infos de admmeiopagto

Dim sRegistro As String
Dim lErro As Long

On Error GoTo Erro_Back_Exclui_AdmMeioPagto

    sRegistro = colRegistro.Item(iRegistroCol)

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objAdmMeioPagto.iCodigo = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objAdmMeioPagto.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
    Back_Exclui_AdmMeioPagto = SUCESSO

    Exit Function

Erro_Back_Exclui_AdmMeioPagto:

    Back_Exclui_AdmMeioPagto = gErr
        
    Select Case gErr
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151277)

    End Select

    Exit Function

End Function

Function Back_AdmMeioPagto_CondPagto(iPosAtual As Integer, iPosFimAtual As Integer, colRegistro As Collection, iRegistroCol As Integer, objAdmMeioPagto As ClassAdmMeioPagto) As Long
'guarda as infos de admmeiopagtocondpagto

Dim lErro As Long
Dim objAdmMeioPagtoCondPagto As ClassAdmMeioPagtoCondPagto
Dim sRegistro As String
Dim iIndice As Integer

On Error GoTo Erro_Back_AdmMeioPagto_CondPagto

    sRegistro = colRegistro.Item(iRegistroCol)

    'Se o proximo caracter for o vbKeyControl ==> tem condspagto envolvidos
    If Mid(sRegistro, iPosAtual, 1) = Chr(vbKeyControl) Then

        For iIndice = iRegistroCol To colRegistro.Count

            sRegistro = colRegistro.Item(iIndice)

            Do While Mid(sRegistro, iPosAtual, 1) = Chr(vbKeyControl)

                Set objAdmMeioPagtoCondPagto = New ClassAdmMeioPagtoCondPagto

                objAdmMeioPagto.colCondPagtoLoja.Add objAdmMeioPagtoCondPagto

                objAdmMeioPagtoCondPagto.iAdmMeioPagto = objAdmMeioPagto.iCodigo
                objAdmMeioPagtoCondPagto.iFilialEmpresa = objAdmMeioPagto.iFilialEmpresa

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objAdmMeioPagtoCondPagto.iParcelamento = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objAdmMeioPagtoCondPagto.sNomeParcelamento = CStr(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objAdmMeioPagtoCondPagto.iNumParcelas = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objAdmMeioPagtoCondPagto.iParcelasRecebto = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objAdmMeioPagtoCondPagto.dTaxa = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objAdmMeioPagtoCondPagto.dValorMinimo = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objAdmMeioPagtoCondPagto.dDesconto = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objAdmMeioPagtoCondPagto.iJurosParcelamento = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objAdmMeioPagtoCondPagto.dJuros = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objAdmMeioPagtoCondPagto.iAtivo = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                'pula o ultimo vbKeyEscape
                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = iPosAtual

                'guarda as infos de AdmMeioPagtoCondPagtoParcelas
                lErro = CF("Back_AdmMeioPagto_Parcelas", iPosAtual, iPosFimAtual, colRegistro, iRegistroCol, objAdmMeioPagtoCondPagto)
                If lErro <> SUCESSO Then gError 118590

            Loop

            If iPosAtual <= Len(sRegistro) Then Exit For

            iPosAtual = 1

        Next

        iRegistroCol = iIndice

    End If

    iPosFimAtual = iPosAtual

    Back_AdmMeioPagto_CondPagto = SUCESSO

    Exit Function

Erro_Back_AdmMeioPagto_CondPagto:

    Back_AdmMeioPagto_CondPagto = gErr

    Select Case gErr
        
        Case 118590
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151278)

    End Select

    Exit Function

End Function

Function Back_AdmMeioPagto_Parcelas(iPosAtual As Integer, iPosFimAtual As Integer, colRegistro As Collection, iRegistroCol As Integer, objAdmMeioPagtoCondPagto As ClassAdmMeioPagtoCondPagto) As Long
'guarda as infos de admmeiopagtoParcelas

Dim lErro As Long
Dim objAdmMeioPagtoParcelas As ClassAdmMeioPagtoParcelas
Dim sRegistro As String
Dim iIndice As Integer

On Error GoTo Erro_Back_AdmMeioPagto_Parcelas

    sRegistro = colRegistro.Item(iRegistroCol)

    'Se o proximo caracter for o vbKeyShift ==> tem parcelas envolvidas
    If Mid(sRegistro, iPosAtual, 1) = Chr(vbKeyShift) Then

        For iIndice = iRegistroCol To colRegistro.Count

            sRegistro = colRegistro.Item(iIndice)

            Do While Mid(sRegistro, iPosAtual, 1) = Chr(vbKeyShift)

                Set objAdmMeioPagtoParcelas = New ClassAdmMeioPagtoParcelas

                objAdmMeioPagtoCondPagto.colParcelas.Add objAdmMeioPagtoParcelas

                objAdmMeioPagtoParcelas.iAdmMeioPagto = objAdmMeioPagtoCondPagto.iAdmMeioPagto
                objAdmMeioPagtoParcelas.iFilialEmpresa = objAdmMeioPagtoCondPagto.iFilialEmpresa
                objAdmMeioPagtoParcelas.iParcelamento = objAdmMeioPagtoCondPagto.iParcelamento

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objAdmMeioPagtoParcelas.iParcela = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objAdmMeioPagtoParcelas.dPercRecebimento = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
                objAdmMeioPagtoParcelas.iIntervaloRecebimento = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

                'pula o ultimo vbKeyEscape
                iPosAtual = iPosFimAtual + 1
                iPosFimAtual = iPosAtual

            Loop

            If iPosAtual <= Len(sRegistro) Then Exit For

            iPosAtual = 1

        Next

        iRegistroCol = iIndice

    End If

    iPosFimAtual = iPosAtual

    Back_AdmMeioPagto_Parcelas = SUCESSO

    Exit Function

Erro_Back_AdmMeioPagto_Parcelas:

    Back_AdmMeioPagto_Parcelas = gErr

    Select Case gErr

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151279)

    End Select

    Exit Function

End Function

Function Back_AdmMeioPagto_Incluir(objAdmMeioPagto As ClassAdmMeioPagto) As Long
'inclui um admmeiopagto

Dim lErro As Long
Dim alComando(0 To 2) As Long
Dim iIndice As Integer
Dim lEndereco As Long
Dim objTipoMeioPagtoLoja As New ClassTMPLoja
Dim objRede As New ClassRede

On Error GoTo Erro_Back_AdmMeioPagto_Incluir

    'Abertura dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 118591
    Next
        
    'Tenta ler a Administradora passada por objAdmMeioPagto
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Codigo FROM AdmMeioPagto WHERE Codigo = ? AND FilialEmpresa = ? ", 0, iCodigo, objAdmMeioPagto.iCodigo, objAdmMeioPagto.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 118965

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118966
    
    If lErro = AD_SQL_SUCESSO Then gError 118967
        
    objTipoMeioPagtoLoja.iTipo = objAdmMeioPagto.iTipoMeioPagto
    
    'Lê os dados de meio de pagamento apartir do código.
    lErro = CF("TipoMeioPagtoLoja_Le", objTipoMeioPagtoLoja)
    If lErro <> SUCESSO And lErro <> 80573 Then gError 118813

    'se o tipo de meio de pagamento nao estiver cadastrado ==> erro
    If lErro <> SUCESSO Then gError 118814
    
    'se o tipo de meio pagto exigir a especificacao de rede e a rede nao for especificada ==> erro
    If objTipoMeioPagtoLoja.iExigeRede = TIPOMEIOPAGTOLOJA_EXIGE_REDE And objAdmMeioPagto.iRede = 0 Then gError 118815
    
    'Seleciona no Bd a Forma de Pagamento com o nome que se Esta tentando Gravar
    lErro = Comando_Executar(alComando(2), "SELECT codigo FROM AdmMeioPagto WHERE FilialEmpresa = ? AND Nome = ? AND Codigo <> ?", iCodigo, objAdmMeioPagto.iFilialEmpresa, objAdmMeioPagto.sNome, objAdmMeioPagto.iCodigo)
    If lErro <> SUCESSO Then gError 118816
    
    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118817
    'Se Encontrou Gera Erro
    If lErro <> AD_SQL_SEM_DADOS Then gError 118818
    
    'Faz "lock" nas tabelas relacionadas a AdmMeioPagto
    lErro = CF("AdmMeioPagto_Lock_Gravacao", objAdmMeioPagto, objRede)
    If lErro <> SUCESSO Then gError 118819

    If objAdmMeioPagto.lEndereco <> 0 Then

        lErro = CF("Endereco_Automatico", lEndereco)
        If lErro <> SUCESSO Then gError 118592

        'Carrega os dados em objAdmMeioPagto
        objAdmMeioPagto.objEndereco.lCodigo = lEndereco
        objAdmMeioPagto.lEndereco = lEndereco

        lErro = CF("Endereco_Grava", objAdmMeioPagto.objEndereco)
        If lErro <> SUCESSO Then gError 118593

    End If

    'Grava a nova Administradora no BD
    lErro = Comando_Executar(alComando(1), "INSERT INTO AdmMeioPagto (Codigo, FilialEmpresa , Nome, Rede , TaxaVista, TaxaParcelado,  TipoMeioPagto, DefasagemPagtoVista, ContaCorrenteInterna,  GeraTituloRec , Endereco, CodBanco, Agencia, Ativo) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)", objAdmMeioPagto.iCodigo, objAdmMeioPagto.iFilialEmpresa, objAdmMeioPagto.sNome, objAdmMeioPagto.iRede, objAdmMeioPagto.dTaxaVista, objAdmMeioPagto.dTaxaParcelado, objAdmMeioPagto.iTipoMeioPagto, objAdmMeioPagto.iDefasagemPagtoVista, objAdmMeioPagto.iContaCorrenteInterna, objAdmMeioPagto.iGeraTituloRec, objAdmMeioPagto.lEndereco, objAdmMeioPagto.iCodBanco, objAdmMeioPagto.sAgencia, objAdmMeioPagto.iAtivo)
    If lErro <> AD_SQL_SUCESSO Then gError 118594

    'Grava informações da Administradora no BD
    lErro = CF("AdmMeioPagtoCondPagto_Grava", objAdmMeioPagto, CARGA_LOG_BACKOFFICE)
    If lErro <> SUCESSO Then gError 118595

    'Fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Back_AdmMeioPagto_Incluir = SUCESSO

    Exit Function

Erro_Back_AdmMeioPagto_Incluir:

    Back_AdmMeioPagto_Incluir = gErr

    Select Case gErr

        Case 118591
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 118592, 118593, 118595, 118813, 118819
        
        Case 118594
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_ADMMEIOPAGTO", gErr, objAdmMeioPagto.iCodigo)
             
        Case 118814
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TIPOMEIOPAGTOLOJA_NAOENCONTRADO", gErr, objAdmMeioPagto.iTipoMeioPagto)
        
        Case 118815
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TIPOMEIOPAGTOLOJA_EXIGE_REDE", gErr, objAdmMeioPagto.iTipoMeioPagto)
        
        Case 118818
            lErro = Rotina_Erro(vbOKOnly, "ERRO_NOME_ADMMEIOPAGTO_EXISTENTE", gErr)

        Case 118816, 118817, 118965, 118966
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ADMMEIOPAGTO", gErr, objAdmMeioPagto.iCodigo)
                
        Case 118967
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ADMMEIOPAGTO_CADASTRADO", gErr, objAdmMeioPagto.iCodigo)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151280)

    End Select

    'Fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Back_AdmMeioPagto_Alterar(objAdmMeioPagto As ClassAdmMeioPagto) As Long
'altera um admmeiopagto

Dim lErro As Long
Dim alComando(0 To 3) As Long
Dim iIndice As Integer
Dim lEndereco As Long
Dim iCodigo As Integer
Dim objTipoMeioPagto As New ClassTMPLoja
Dim objAdmMeioPagtoBD As New ClassAdmMeioPagto
Dim objAdmMeioPagtoCondPagtoBD As ClassAdmMeioPagtoCondPagto
Dim objAdmMeioPagtoCondPagto As ClassAdmMeioPagtoCondPagto
Dim objRede As New ClassRede

On Error GoTo Erro_Back_AdmMeioPagto_Alterar

    'Abertura dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 118596
    Next
    
    objTipoMeioPagto.iTipo = objAdmMeioPagto.iTipoMeioPagto
    
    'Lê os dados de meio de pagamento apartir do código.
    lErro = CF("TipoMeioPagtoLoja_Le", objTipoMeioPagto)
    If lErro <> SUCESSO And lErro <> 80573 Then gError 118820

    'se o tipo de meio de pagamento nao estiver cadastrado ==> erro
    If lErro <> SUCESSO Then gError 118821
    
    'se o tipo de meio pagto exigir a especificacao de rede e a rede nao for especificada ==> erro
    If objTipoMeioPagto.iExigeRede = TIPOMEIOPAGTOLOJA_EXIGE_REDE And objAdmMeioPagto.iRede = 0 Then gError 118822
    
    'Seleciona no Bd a Forma de Pagamento com o nome que se Esta tentando Gravar
    lErro = Comando_Executar(alComando(2), "SELECT codigo FROM AdmMeioPagto WHERE FilialEmpresa = ? AND Nome = ? AND Codigo <> ?", iCodigo, objAdmMeioPagto.iFilialEmpresa, objAdmMeioPagto.sNome, objAdmMeioPagto.iCodigo)
    If lErro <> SUCESSO Then gError 118823
    
    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118824
    'Se Encontrou Gera Erro
    If lErro <> AD_SQL_SEM_DADOS Then gError 118825
    
    'Faz "lock" nas tabelas relacionadas a AdmMeioPagto
    lErro = CF("AdmMeioPagto_Lock_Gravacao", objAdmMeioPagto, objRede)
    If lErro <> SUCESSO Then gError 118826

    'Tenta ler a Administradora passada por objAdmMeioPagto
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Codigo , Endereco FROM AdmMeioPagto WHERE Codigo = ? AND FilialEmpresa = ? ", 0, iCodigo, lEndereco, objAdmMeioPagto.iCodigo, objAdmMeioPagto.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 118597

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118598
    
    If lErro = AD_SQL_SEM_DADOS Then gError 118766
    
    'verifica se a a administradora eh passivel de alteracao total...
    'a maioria das adms pre-cadastradas nao sao.
    If objAdmMeioPagto.iCodigo = MEIO_PAGAMENTO_DINHEIRO Or objAdmMeioPagto.iCodigo = MEIO_PAGAMENTO_CHEQUE Or objAdmMeioPagto.iCodigo = MEIO_PAGAMENTO_TROCA Or objAdmMeioPagto.iCodigo = MEIO_PAGAMENTO_CONTRAVALE Then
    
        lErro = CF("AdmMeioPagto_Grava_Ativo", objAdmMeioPagto)
        If lErro <> SUCESSO Then gError 120035
        
    Else
      
        'Verifica se o Código do meio de pagto é Carnê se for,
        If objAdmMeioPagto.iCodigo = MEIO_PAGAMENTO_CARNE Then
          
            'Verificar se o Tipo de pagto é igual ao tipo Carnê se não erro
            If objAdmMeioPagto.iTipoMeioPagto <> TIPOMEIOPAGTOLOJA_CARNE Then gError 120036
            
        End If
        
        
        If objAdmMeioPagto.lEndereco > 0 Then
    
            If lEndereco = 0 Then
                lErro = CF("Endereco_Automatico", lEndereco)
                If lErro <> SUCESSO Then gError 118599
    
            End If
    
            'Carrega os dados em objAdmMeioPagto
            objAdmMeioPagto.objEndereco.lCodigo = lEndereco
            objAdmMeioPagto.lEndereco = lEndereco
    
            lErro = CF("Endereco_Grava", objAdmMeioPagto.objEndereco)
            If lErro <> SUCESSO Then gError 118600
    
        End If
    
        'Faz LockExclusive na Administradora
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> AD_SQL_SUCESSO Then gError 118601
    
        objAdmMeioPagtoBD.iCodigo = objAdmMeioPagto.iCodigo
        objAdmMeioPagtoBD.iFilialEmpresa = objAdmMeioPagto.iFilialEmpresa
    
        'Ler para Comparar a minha Coleção da Tela com o Banco de Dados
        lErro = CF("AdmMeioPagtoCondPagto_Le", objAdmMeioPagtoBD)
        If lErro <> SUCESSO Then gError 104181
        
        For iIndice = objAdmMeioPagtoBD.colCondPagtoLoja.Count To 1 Step -1
            
            Set objAdmMeioPagtoCondPagtoBD = objAdmMeioPagtoBD.colCondPagtoLoja(iIndice)
            
            For Each objAdmMeioPagtoCondPagto In objAdmMeioPagto.colCondPagtoLoja
            
                If objAdmMeioPagtoCondPagto.iAdmMeioPagto = objAdmMeioPagtoCondPagtoBD.iAdmMeioPagto And objAdmMeioPagtoCondPagto.iFilialEmpresa = objAdmMeioPagtoCondPagtoBD.iFilialEmpresa And objAdmMeioPagtoCondPagto.iParcelamento = objAdmMeioPagtoCondPagtoBD.iParcelamento Then
            
                    objAdmMeioPagtoBD.colCondPagtoLoja.Remove (iIndice)
                    Exit For
                    
                End If
            
            Next
        
        Next
        
        lErro = CF("AdmMeioPagtoCondPagto_Exclui", objAdmMeioPagtoBD)
        If lErro <> SUCESSO Then gError 117573
    
        'Após a exclusão,grava novas informações da Administradora no BD
        lErro = CF("AdmMeioPagtoCondPagto_Grava", objAdmMeioPagto, CARGA_LOG_BACKOFFICE)
        If lErro <> SUCESSO Then gError 118602
    
        'Atualiza os Dados da Administradora
        If objAdmMeioPagto.iCodigo = MEIO_PAGAMENTO_CARNE Then
            lErro = Comando_ExecutarPos(alComando(3), "UPDATE AdmMeioPagto SET Rede = ? , TaxaVista = ?, TaxaParcelado = ? ,  DefasagemPagtoVista = ?, ContaCorrenteInterna = ?,  GeraTituloRec = ? , Endereco = ? , CodBanco = ?, Agencia = ? , Ativo = ?", alComando(0), objAdmMeioPagto.iRede, objAdmMeioPagto.dTaxaVista, objAdmMeioPagto.dTaxaParcelado, objAdmMeioPagto.iDefasagemPagtoVista, objAdmMeioPagto.iContaCorrenteInterna, objAdmMeioPagto.iGeraTituloRec, objAdmMeioPagto.lEndereco, objAdmMeioPagto.iCodBanco, objAdmMeioPagto.sAgencia, objAdmMeioPagto.iAtivo)
        Else
            lErro = Comando_ExecutarPos(alComando(3), "UPDATE AdmMeioPagto SET Nome = ? , Rede = ? , TaxaVista = ?, TaxaParcelado = ? ,  TipoMeioPagto= ?, DefasagemPagtoVista = ?, ContaCorrenteInterna = ?,  GeraTituloRec = ? , Endereco = ? , CodBanco = ?, Agencia = ? , Ativo = ?", alComando(0), objAdmMeioPagto.sNome, objAdmMeioPagto.iRede, objAdmMeioPagto.dTaxaVista, objAdmMeioPagto.dTaxaParcelado, objAdmMeioPagto.iTipoMeioPagto, objAdmMeioPagto.iDefasagemPagtoVista, objAdmMeioPagto.iContaCorrenteInterna, objAdmMeioPagto.iGeraTituloRec, objAdmMeioPagto.lEndereco, objAdmMeioPagto.iCodBanco, objAdmMeioPagto.sAgencia, objAdmMeioPagto.iAtivo)
        End If
        If lErro <> AD_SQL_SUCESSO Then gError 118603

    End If

    'Fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Back_AdmMeioPagto_Alterar = SUCESSO

    Exit Function

Erro_Back_AdmMeioPagto_Alterar:

    Back_AdmMeioPagto_Alterar = gErr

    Select Case gErr

        Case 117573, 118599, 118600, 118602, 118820, 118826, 120035
        
        Case 118596
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 118597, 118598, 118823, 118824
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ADMMEIOPAGTO", gErr, objAdmMeioPagto.iCodigo)
        
        Case 118601
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_ADMMEIOPAGTO", gErr, objAdmMeioPagto.iCodigo)

        Case 118603
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_ADMINISTRADORA", gErr, objAdmMeioPagto.iCodigo)
        
        Case 118766
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ADMMEIOPAGTO_NAO_CADASTRADO", gErr, objAdmMeioPagto.iCodigo)
                
        Case 118821
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TIPOMEIOPAGTOLOJA_NAOENCONTRADO", gErr, objAdmMeioPagto.iTipoMeioPagto)
        
        Case 118822
            lErro = Rotina_Erro(vbOKOnly, "ERRO_TIPOMEIOPAGTOLOJA_EXIGE_REDE", gErr, objAdmMeioPagto.iTipoMeioPagto)
        
        Case 118825
            lErro = Rotina_Erro(vbOKOnly, "ERRO_NOME_ADMMEIOPAGTO_EXISTENTE", gErr)
    
        Case 120036
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ADMMEIOPAGTO_ALTERACAO_TIPO_DIFERENTE", gErr, objAdmMeioPagto.iCodigo)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151281)

    End Select

    'Fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Back_AdmMeioPagto_Exclui(ByVal objAdmMeioPagto As ClassAdmMeioPagto) As Long
'Exclui o Back_AdmMeioPagto

Dim lErro As Long
Dim alComando(0 To 3) As Long
Dim lTransacao As Long
Dim lTotal As Long
Dim iIndice As Integer
Dim lEndereco As Long
Dim iCodigo As Integer
Dim objLog As New ClassLog
Dim dtDataLog As Date
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim iParcelamento As Integer

On Error GoTo Erro_Back_AdmMeioPagto_Exclui

   'Abre os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 118761
    Next
    
    'Tenta ler a Administradora passada por objAdmMeioPagto
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Codigo , Endereco FROM AdmMeioPagto WHERE Codigo = ? AND FilialEmpresa = ? ", 0, iCodigo, lEndereco, objAdmMeioPagto.iCodigo, objAdmMeioPagto.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 118762

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118763

    If lErro = AD_SQL_SEM_DADOS Then gError 118765

    'Lock do Back_AdmMeioPagto
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 118768

    lErro = AdmMeioPagto_Valida_Exclusao(objAdmMeioPagto, alComando(2))
    If lErro <> SUCESSO Then gError 118827

    'Atribuições de Chave Primária
    objAdmMeioPagtoCondPagto.iAdmMeioPagto = objAdmMeioPagto.iCodigo
    objAdmMeioPagtoCondPagto.iFilialEmpresa = objAdmMeioPagto.iFilialEmpresa
    
    'Lê e Seleciona os Parcelamntos Vinculados a AdmMeioPagtoCondPagto
    lErro = Comando_Executar(alComando(3), "SELECT Parcelamento FROM AdmMeioPagtoCondPagto WHERE AdmMeiopagto = ? AND FilialEmpresa =?", iParcelamento, objAdmMeioPagtoCondPagto.iAdmMeioPagto, objAdmMeioPagtoCondPagto.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 126011

    lErro = Comando_BuscarPrimeiro(alComando(3))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126012

    Do While lErro = AD_SQL_SUCESSO
    
        objAdmMeioPagtoCondPagto.iParcelamento = iParcelamento
    
        objAdmMeioPagto.colCondPagtoLoja.Add objAdmMeioPagtoCondPagto

        lErro = Comando_BuscarProximo(alComando(3))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126013

        Set objAdmMeioPagtoCondPagto = New ClassAdmMeioPagtoCondPagto

        'Atribuições de Chave Primária
        objAdmMeioPagtoCondPagto.iAdmMeioPagto = objAdmMeioPagto.iCodigo
        objAdmMeioPagtoCondPagto.iFilialEmpresa = objAdmMeioPagto.iFilialEmpresa

    Loop

    lErro = CF("AdmMeioPagtoCondPagto_Exclui", objAdmMeioPagto)
    If lErro <> SUCESSO Then gError 118769

    'Verifica se a variavel lEndereco contem informações
    If lEndereco > 0 Then
        lErro = CF("Endereco_Exclui", lEndereco)
        If lErro <> SUCESSO Then gError 118767
    End If
        
    'Exclui o Back_AdmMeioPagto
    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM AdmMeioPagto", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 118770
    
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Back_AdmMeioPagto_Exclui = SUCESSO

    Exit Function

Erro_Back_AdmMeioPagto_Exclui:

    Back_AdmMeioPagto_Exclui = gErr

    Select Case gErr
        
        Case 118761
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 118762, 118763
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ADMMEIOPAGTO", gErr, objAdmMeioPagto.iCodigo)
        
        Case 118765
            Call Rotina_Erro(vbOKOnly, "ERRO_ADMMEIOPAGTO_NAO_CADASTRADO", gErr, objAdmMeioPagto.iCodigo)
        
        Case 118767, 118769, 118827
        
        Case 118768
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_ADMMEIOPAGTO", gErr, objAdmMeioPagto.iCodigo)

        Case 118770
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_ADMMEIOPAGTO", gErr, objAdmMeioPagto.iCodigo)
                
        Case 126011 To 126013
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ADMMEIOPAGTOCONDPAGTO3", gErr, objAdmMeioPagto.iFilialEmpresa, objAdmMeioPagto.iCodigo)
                
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151282)

    End Select

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Registro_Back_Caixa(ByVal colRegistro As Collection, sArquivo As String, lRegistro As Long, ByVal iOperacao As Integer) As Long
'Trata o registro de Caixa e coloca os dados no bd do backoffice. sArquivo contem o nome do arquivo em que sRegistro foi lido.
'iRegistro é o numero do registro.

Dim iPosAtual As Integer
Dim iPosFimAtual As Integer
Dim sRegistro As String
Dim iRegistroCol As Integer
Dim objCaixa As New ClassCaixa
Dim lErro As Long

On Error GoTo Erro_Registro_Back_Caixa

    sRegistro = colRegistro.Item(1)

    iPosFimAtual = InStr(sRegistro, Chr(vbKeyEscape))
    
    Select Case iOperacao

        Case INCLUSAO_CAIXA
            'guarda as infos de Caixa
            lErro = CF("Back_Caixa", iPosAtual, iPosFimAtual, sRegistro, objCaixa)
            If lErro <> SUCESSO Then gError 118604

            'inclui as infos de Caixa
            lErro = CF("Back_Caixa_Incluir", objCaixa)
            If lErro <> SUCESSO And lErro <> 118970 Then gError 118605

        Case ALTERACAO_CAIXA
            'guarda as infos de Caixa
            lErro = CF("Back_Caixa", iPosAtual, iPosFimAtual, sRegistro, objCaixa)
            If lErro <> SUCESSO Then gError 118771

            'altera as infos de Caixa
            lErro = CF("Back_Caixa_Alterar", objCaixa)
            If lErro <> SUCESSO Then gError 118606
        
        Case EXCLUSAO_CAIXA
            'guarda as infos de Caixa
            lErro = CF("Back_Exclui_Caixa", iPosAtual, iPosFimAtual, sRegistro, objCaixa)
            If lErro <> SUCESSO Then gError 118773

            'altera as infos de Caixa
            lErro = CF("Back_Caixa_Excluir", objCaixa)
            If lErro <> SUCESSO And lErro <> 118778 Then gError 118774

    End Select

    Registro_Back_Caixa = SUCESSO

    Exit Function

Erro_Registro_Back_Caixa:

    Registro_Back_Caixa = gErr

    Select Case gErr

        Case 118604, 118605, 118606, 118773, 118774, 118771

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151283)

    End Select

    Exit Function

End Function

Function Back_Caixa(iPosAtual As Integer, iPosFimAtual As Integer, sRegistro As String, objCaixa As ClassCaixa) As Long
'le as infos de caixa

On Error GoTo Erro_Back_Caixa

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCaixa.dtDataInicial = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCaixa.iCodigo = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCaixa.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCaixa.iStatus = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCaixa.iTEF = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCaixa.lProxSeqMov = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCaixa.sDescricao = CStr(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCaixa.sNomeReduzido = CStr(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCaixa.iPos = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCaixa.iTeclado = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCaixa.iAtivo = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCaixa.iBoletoManual = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCaixa.iOrcamentoECF = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    Back_Caixa = SUCESSO

    Exit Function

Erro_Back_Caixa:

    Back_Caixa = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151284)

    End Select

    Exit Function

End Function

Function Back_Exclui_Caixa(iPosAtual As Integer, iPosFimAtual As Integer, sRegistro As String, objCaixa As ClassCaixa) As Long
'le as infos de caixa

On Error GoTo Erro_Back_Exclui_Caixa

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCaixa.iCodigo = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCaixa.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    Back_Exclui_Caixa = SUCESSO

    Exit Function

Erro_Back_Exclui_Caixa:

    Back_Exclui_Caixa = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151285)

    End Select

    Exit Function

End Function

Function Back_Caixa_Incluir(objCaixa As ClassCaixa) As Long
'inclui um caixa

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim objPos As ClassPOS
Dim iCodigo As Integer

On Error GoTo Erro_Back_Caixa_Incluir

    'Abertura dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 118607
    Next
    
    'Verifica se já existe Caixa cadastrado com o código utilizado
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Codigo FROM Caixa WHERE Codigo = ? AND FilialEmpresa=?", 0, iCodigo, objCaixa.iCodigo, objCaixa.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 118968

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118969

    'Se encontrou
    If lErro = AD_SQL_SUCESSO Then gError 118970

    'Verifica se as condições necessárias para se gravar um caixa foram atendidas
    lErro = CF("Caixa_Valida_Gravacao", objCaixa)
    If lErro <> SUCESSO Then gError 118608

    'Então, insere um novo registro na tabela Caixa
    lErro = Comando_Executar(alComando(1), "INSERT INTO Caixa (Codigo, FilialEmpresa, NomeReduzido, Descricao, Status, DataInicial, ProxSeqMov, Teclado, Ativo, TEF, POS, BoletoManual, SoOrcamento) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)", objCaixa.iCodigo, objCaixa.iFilialEmpresa, objCaixa.sNomeReduzido, objCaixa.sDescricao, objCaixa.iStatus, objCaixa.dtDataInicial, objCaixa.lProxSeqMov, objCaixa.iTeclado, objCaixa.iAtivo, objCaixa.iTEF, objCaixa.iPos, objCaixa.iBoletoManual, objCaixa.iOrcamentoECF)
    If lErro <> AD_SQL_SUCESSO Then gError 118609

    'Fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Back_Caixa_Incluir = SUCESSO

    Exit Function

Erro_Back_Caixa_Incluir:

    Back_Caixa_Incluir = gErr

    Select Case gErr

        Case 118607
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 118608
        
        Case 118609
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CAIXA", gErr, objCaixa.iCodigo, objCaixa.sNomeReduzido)
            
        Case 118968, 118969
            Call Rotina_Erro(vbOKOnly, "ERRO_CAIXA_LEITURA", gErr)
            
        Case 118970
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CAIXA_CADASTRADO", gErr, objCaixa.iCodigo)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151286)

    End Select

    'Fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Back_Caixa_Alterar(objCaixa As ClassCaixa) As Long
'altera um caixa

Dim lErro As Long
Dim alComando(1 To 2) As Long
Dim iIndice As Integer
Dim objPos As ClassPOS
Dim sNome As String

On Error GoTo Erro_Back_Caixa_Alterar

    'Abertura dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 118610
    Next

    'Verifica se as condições necessárias para se gravar um caixa foram atendidas
    lErro = CF("Caixa_Valida_Gravacao", objCaixa)
    If lErro <> SUCESSO Then gError 118611

    'Inicializa a variável que receberá o NomeReduzido
    sNome = String(STRING_CAIXA_NOME_REDUZIDO, 0)

    'Verifica se já existe Caixa cadastrado com o código utilizado
    lErro = Comando_ExecutarPos(alComando(1), "SELECT NomeReduzido FROM Caixa WHERE Codigo = ? AND FilialEmpresa=?", 0, sNome, objCaixa.iCodigo, objCaixa.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 118612

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118613

    'Se não encontrou
    If lErro = AD_SQL_SEM_DADOS Then gError 118614

    'Faz o lock do Caixa
    lErro = Comando_LockExclusive(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 118615

    'E altera o registro na tabela Caixa
    lErro = Comando_ExecutarPos(alComando(2), "UPDATE Caixa SET NomeReduzido = ? , Descricao = ? , Status = ?, DataInicial = ? , ProxSeqMov = ? , Teclado = ? , Ativo= ?, TEF = ?, POS=?, BoletoManual=?, SoOrcamento=?", alComando(1), objCaixa.sNomeReduzido, objCaixa.sDescricao, objCaixa.iStatus, objCaixa.dtDataInicial, objCaixa.lProxSeqMov, objCaixa.iTeclado, objCaixa.iAtivo, objCaixa.iTEF, objCaixa.iPos, objCaixa.iBoletoManual, objCaixa.iOrcamentoECF)
    If lErro <> AD_SQL_SUCESSO Then gError 118616

    'Fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Back_Caixa_Alterar = SUCESSO

    Exit Function

Erro_Back_Caixa_Alterar:

    Back_Caixa_Alterar = gErr

    Select Case gErr

        Case 118610
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 118611
        
        Case 118612, 118613
            Call Rotina_Erro(vbOKOnly, "ERRO_CAIXA_LEITURA", gErr)
            
        Case 118614
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CAIXA_NAO_CADASTRADO", gErr, objCaixa.iCodigo)
                
        Case 118615
            Call Rotina_Erro(vbOKOnly, "ERRO_CAIXA_LOCK", gErr, objCaixa.iCodigo, objCaixa.iFilialEmpresa)
            
        Case 118616
            Call Rotina_Erro(vbOKOnly, "ERRO_CAIXA_ALTERACAO", gErr, objCaixa.iCodigo, objCaixa.iFilialEmpresa)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151287)

    End Select

    'Fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Back_Caixa_Excluir(objCaixa As ClassCaixa) As Long
'Exclui um caixa

Dim lErro As Long
Dim alComando(1 To 4) As Long
Dim iIndice As Integer
Dim objPos As ClassPOS
Dim sNome As String

On Error GoTo Erro_Back_Caixa_Excluir

    'Abertura dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 118775
    Next

    'Inicializa a variável que receberá o NomeReduzido
    sNome = String(STRING_CAIXA_NOME_REDUZIDO, 0)

    'Verifica se já existe Caixa cadastrado com o código utilizado
    lErro = Comando_ExecutarPos(alComando(1), "SELECT NomeReduzido FROM Caixa WHERE Codigo = ? AND FilialEmpresa=?", 0, sNome, objCaixa.iCodigo, objCaixa.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 118776

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118777

    'Se não encontrou
    If lErro = AD_SQL_SEM_DADOS Then gError 118778
    
    'Faz o lock do Caixa
    lErro = Comando_LockExclusive(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 118779
    
    'Verifica se o caixa não está vinculado à outras tabelas
    lErro = CF("Caixa_Valida_Exclusao", objCaixa, alComando)
    If lErro <> SUCESSO Then gError 118828
    
    'E altera o registro na tabela Caixa
    lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM Caixa ", alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 118780

    'Fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Back_Caixa_Excluir = SUCESSO

    Exit Function

Erro_Back_Caixa_Excluir:

    Back_Caixa_Excluir = gErr

    Select Case gErr

        Case 118775
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 118776, 118777
            Call Rotina_Erro(vbOKOnly, "ERRO_CAIXA_LEITURA", gErr)
            
        Case 118778
            lErro = Rotina_Erro(vbOKOnly, "ERRO_CAIXA_NAO_CADASTRADO", gErr, objCaixa.iCodigo)
                
        Case 118779
            Call Rotina_Erro(vbOKOnly, "ERRO_CAIXA_LOCK", gErr, objCaixa.iCodigo, objCaixa.iFilialEmpresa)
            
        Case 118780
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CAIXA", gErr, objCaixa.iCodigo, objCaixa.iFilialEmpresa)
        
        Case 118828
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151288)

    End Select

    'Fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Registro_Back_ECF(ByVal colRegistro As Collection, sArquivo As String, lRegistro As Long, ByVal iOperacao As Integer) As Long
'Trata o registro de ECF e coloca os dados no bd do backoffice. sArquivo contem o nome do arquivo em que sRegistro foi lido.
'iRegistro é o numero do registro.

Dim iPosAtual As Integer
Dim iPosFimAtual As Integer
Dim sRegistro As String
Dim iRegistroCol As Integer
Dim objECF As New ClassECF
Dim lErro As Long

On Error GoTo Erro_Registro_Back_ECF

    sRegistro = colRegistro.Item(1)

    iPosFimAtual = InStr(sRegistro, Chr(vbKeyEscape))
    
    Select Case iOperacao

        Case INCLUSAO_ECF_CAIXA_CENTRAL
            'guarda as infos de ECF
            lErro = CF("Back_ECF", iPosAtual, iPosFimAtual, sRegistro, objECF)
            If lErro <> SUCESSO Then gError 118617

            'inclui as infos de ECF
            lErro = CF("Back_ECF_Incluir", objECF)
            If lErro <> SUCESSO Then gError 118618

        Case ALTERACAO_ECF_CAIXA_CENTRAL
            'guarda as infos de ECF
            lErro = CF("Back_ECF", iPosAtual, iPosFimAtual, sRegistro, objECF)
            If lErro <> SUCESSO Then gError 118781

            'altera as infos de ECF
            lErro = CF("Back_ECF_Alterar", objECF)
            If lErro <> SUCESSO Then gError 118619
        
        Case EXCLUSAO_ECF_CAIXA_CENTRAL
            'guarda as infos de ECF
            lErro = CF("Back_Excluir_ECF", iPosAtual, iPosFimAtual, sRegistro, objECF)
            If lErro <> SUCESSO Then gError 118782

            'altera as infos de ECF
            lErro = CF("Back_ECF_Excluir", objECF)
            If lErro <> SUCESSO Then gError 118783

    End Select

    Registro_Back_ECF = SUCESSO

    Exit Function

Erro_Registro_Back_ECF:

    Registro_Back_ECF = gErr

    Select Case gErr

        Case 118617, 118618, 118619, 118781, 118782, 118783

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151289)

    End Select

    Exit Function

End Function

Function Back_ECF(iPosAtual As Integer, iPosFimAtual As Integer, sRegistro As String, objECF As ClassECF) As Long
'le as infos de ECF

On Error GoTo Erro_Back_ECF

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objECF.iCodigo = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objECF.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objECF.iCaixa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objECF.iImpressoraECF = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objECF.iImpressoraCheque = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objECF.iHorarioVerao = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objECF.iAtivo = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    Back_ECF = SUCESSO

    Exit Function

Erro_Back_ECF:

    Back_ECF = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151290)

    End Select

    Exit Function

End Function

Function Back_Excluir_ECF(iPosAtual As Integer, iPosFimAtual As Integer, sRegistro As String, objECF As ClassECF) As Long
'le as infos de ECF

On Error GoTo Erro_Back_Excluir_ECF

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objECF.iCodigo = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objECF.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
    Back_Excluir_ECF = SUCESSO

    Exit Function

Erro_Back_Excluir_ECF:

    Back_Excluir_ECF = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151291)

    End Select

    Exit Function

End Function

Function Back_ECF_Incluir(objECF As ClassECF) As Long
'inclui um ECF

Dim lErro As Long
Dim alComando(0 To 3) As Long
Dim iIndice As Integer
Dim iCodigo As Integer
Dim iCaixa As Integer

On Error GoTo Erro_Back_ECF_Incluir

    'Abertura dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 118620
    Next

    'Faz os lock's compartilhados necessários para a gravação
    lErro = CF("ECF_Lock_Gravacao", objECF)
    If lErro <> SUCESSO Then gError 118627

    'Então, insere um novo registro na tabela ECF
    lErro = Comando_Executar(alComando(1), "INSERT INTO ECF (Codigo, FilialEmpresa, Caixa, ImpressoraECF, ImpressoraCheque, HorarioVerao, Ativo ) VALUES (?,?,?,?,?,?,?)", objECF.iCodigo, objECF.iFilialEmpresa, objECF.iCaixa, objECF.iImpressoraECF, objECF.iImpressoraCheque, objECF.iHorarioVerao, objECF.iAtivo)
    If lErro <> AD_SQL_SUCESSO Then gError 118628

    'Fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Back_ECF_Incluir = SUCESSO

    Exit Function

Erro_Back_ECF_Incluir:

    Back_ECF_Incluir = gErr

    Select Case gErr

        Case 118620
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 118621, 118622, 118624, 118625, 118971, 118972
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ECF", gErr)
                
        Case 118623
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ECF_ATIVO_CAIXA", gErr, objECF.iCaixa)
        
        Case 118626
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ECF_ATIVO_VARIOS_CAIXAS", gErr, iCaixa)
        
        Case 118627
                
        Case 118628
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_ECF", gErr, objECF.iCodigo)
        
        Case 118973
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ECF_CADASTRADO", gErr, objECF.iCodigo)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151292)

    End Select

    'Fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Back_ECF_Alterar(objECF As ClassECF) As Long
'altera um ECF

Dim lErro As Long
Dim alComando(0 To 2) As Long
Dim iIndice As Integer
Dim iCaixa As Integer

On Error GoTo Erro_Back_ECF_Alterar

    'Abertura dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 118629
    Next

    'Faz os lock's compartilhados necessários para a gravação
    lErro = CF("ECF_Lock_Gravacao", objECF)
    If lErro <> SUCESSO Then gError 118636

    'Verifica se já existe ECF cadastrado com o código/caixa utilizado
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Codigo FROM ECF WHERE Codigo = ? AND FilialEmpresa = ?", 0, iCodigo, objECF.iCodigo, objECF.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 118637

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118638

    'Se não encontrou
    If lErro = AD_SQL_SEM_DADOS Then gError 118639

    'Faz o lock do ECF
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 118641

    'E altera o registro na tabela ECF
    lErro = Comando_ExecutarPos(alComando(1), "UPDATE ECF SET Caixa = ?, ImpressoraECF = ?, ImpressoraCheque = ? , HorarioVerao = ?, Ativo = ? ", alComando(0), objECF.iCaixa, objECF.iImpressoraECF, objECF.iImpressoraCheque, objECF.iHorarioVerao, objECF.iAtivo)
    If lErro <> AD_SQL_SUCESSO Then gError 118642

    'Fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Back_ECF_Alterar = SUCESSO

    Exit Function

Erro_Back_ECF_Alterar:

    Back_ECF_Alterar = gErr

    Select Case gErr

        Case 118629
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 118630, 118631, 118633, 118634, 118637, 118638
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ECF", gErr)
        
        Case 118632
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ECF_ATIVO_CAIXA", gErr, objECF.iCaixa)
        
        Case 118635
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ECF_ATIVO_VARIOS_CAIXAS", gErr, iCaixa)
        
        Case 118636
                
        Case 118639
            Call Rotina_Erro(vbOKOnly, "ERRO_ECF_NAO_CADASTRADO", gErr, objECF.iCodigo)
        
        Case 118641
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_ECF", gErr)

        Case 118642
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_ECF", gErr, objECF.iCodigo)
        
        Case 118640
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_ECF_TROCA_CAIXA_IMP", gErr)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151293)

    End Select

    'Fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Back_ECF_Excluir(ByVal objECF As ClassECF) As Long
'Exclui o ECF

Dim iIndice As Integer
Dim lErro As Long
Dim lTransacao As Long
Dim alComando(0 To 1) As Long
Dim dtDataLog As Date
Dim objLog As New ClassLog

On Error GoTo Erro_Back_ECF_Excluir

   'Abre os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 118784
    Next

    'Busca no BD o ECF a ser excluído
    lErro = Comando_ExecutarPos(alComando(0), "SELECT DataLog FROM ECF WHERE FilialEmpresa = ? AND Codigo = ?", 0, dtDataLog, objECF.iFilialEmpresa, objECF.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 118785

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118786
    
    'Se não encontrou => erro
    If lErro = AD_SQL_SEM_DADOS Then gError 118787

    'Faz o lock do ECF
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 118788

    'Exclui o ECF
    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM ECF", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 118790
    
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Back_ECF_Excluir = SUCESSO

    Exit Function

Erro_Back_ECF_Excluir:

    Back_ECF_Excluir = gErr

    Select Case gErr

        Case 118784
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 118785, 118786
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ECF", gErr, objECF.iCodigo)

        Case 118787
            Call Rotina_Erro(vbOKOnly, "ERRO_ECF_NAO_CADASTRADO", gErr, objECF.iCodigo)
        
        Case 118788
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_ECF", gErr, objECF.iCodigo)
        
        Case 118789
        
        Case 118790
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_ECF", gErr, objECF.iCodigo)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151294)

    End Select

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Registro_Back_ImpressoraECF(ByVal colRegistro As Collection, sArquivo As String, lRegistro As Long, ByVal iOperacao As Integer) As Long
'Trata o registro de ImpressoraECF e coloca os dados no bd do backoffice. sArquivo contem o nome do arquivo em que sRegistro foi lido.
'iRegistro é o numero do registro.

Dim iPosAtual As Integer
Dim iPosFimAtual As Integer
Dim sRegistro As String
Dim iRegistroCol As Integer
Dim objImpressoraECF As New ClassImpressoraECF
Dim lErro As Long

On Error GoTo Erro_Registro_Back_ImpressoraECF

    sRegistro = colRegistro.Item(1)

    iPosFimAtual = InStr(sRegistro, Chr(vbKeyEscape))
    
    'guarda as infos de ECF
    lErro = CF("Back_ImpressoraECF", iPosAtual, iPosFimAtual, sRegistro, objImpressoraECF)
    If lErro <> SUCESSO Then gError 117576
    
    Select Case iOperacao

        Case INCLUSAO_IMPRESSORAECF
            
            'inclui as infos de impressoraECF
            lErro = CF("Back_ImpressoraECF_Incluir", objImpressoraECF)
            If lErro <> SUCESSO And lErro <> 118973 Then gError 117577

        Case ALTERACAO_IMPRESSORAECF

            'altera as infos de impressoraECF
            lErro = CF("Back_ImpressoraECF_Alterar", objImpressoraECF)
            If lErro <> SUCESSO Then gError 117578
        
        Case EXCLUSAO_IMPRESSORAECF
            
            'altera as infos de impressoraECF
            lErro = CF("Back_ImpressoraECF_Excluir", objImpressoraECF)
            If lErro <> SUCESSO Then gError 117579

    End Select

    Registro_Back_ImpressoraECF = SUCESSO

    Exit Function

Erro_Registro_Back_ImpressoraECF:

    Registro_Back_ImpressoraECF = gErr

    Select Case gErr

        Case 117576 To 117579

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151295)

    End Select

    Exit Function

End Function

Function Back_ImpressoraECF(iPosAtual As Integer, iPosFimAtual As Integer, sRegistro As String, objImpressoraECF As ClassImpressoraECF) As Long
'le as infos de ECF

On Error GoTo Erro_Back_ImpressoraECF

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objImpressoraECF.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objImpressoraECF.iCodigo = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objImpressoraECF.iCodModelo = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objImpressoraECF.sNumSerie = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)

    Back_ImpressoraECF = SUCESSO

    Exit Function

Erro_Back_ImpressoraECF:

    Back_ImpressoraECF = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151296)

    End Select

    Exit Function

End Function

Function Back_ImpressoraECF_Incluir(objImpressoraECF As ClassImpressoraECF) As Long
'inclui uma ImpressoraECF

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iIndice As Integer
Dim iCodigo As Integer

On Error GoTo Erro_Back_ImpressoraECF_Incluir

    'Abertura dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 117580
    Next

    'Verifica se o ModeloECF existe
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Codigo FROM ModeloECF WHERE Codigo = ?", 0, iCodigo, objImpressoraECF.iCodModelo)
    If lErro <> AD_SQL_SUCESSO Then gError 117581

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 117582

    If lErro <> AD_SQL_SUCESSO Then gError 117583

    'Faz o lock do ModeloECF
    lErro = Comando_LockShared(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 117584

    'Então, insere um novo registro na tabela POS
    lErro = Comando_Executar(alComando(1), "INSERT INTO ImpressoraECF(FilialEmpresa, Codigo, CodModelo, NumSerie) VALUES (?,?,?,?)", _
    objImpressoraECF.iFilialEmpresa, objImpressoraECF.iCodigo, objImpressoraECF.iCodModelo, objImpressoraECF.sNumSerie)
    If lErro <> AD_SQL_SUCESSO Then gError 117585

    'Fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Back_ImpressoraECF_Incluir = SUCESSO

    Exit Function

Erro_Back_ImpressoraECF_Incluir:

    Back_ImpressoraECF_Incluir = gErr

    Select Case gErr

        Case 117580
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 117581, 117582
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MODELOECF", gErr)

        Case 117583
            Call Rotina_Erro(vbOKOnly, "ERRO_MODELO_ECF_NAO_CADASTRADO", gErr)
        
        Case 117584
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_MODELO", gErr)

        Case 117585
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_IMPRESSORA", gErr)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151297)

    End Select

    'Fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Back_ImpressoraECF_Alterar(objImpressoraECF As ClassImpressoraECF) As Long
'altera uma ImpressoraECF

Dim lErro As Long
Dim alComando(0 To 2) As Long
Dim iIndice As Integer
Dim iCodigo As Integer
Dim iCodModelo As Integer

On Error GoTo Erro_Back_ImpressoraECF_Alterar

    'Abertura dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 117581
    Next

    'Verifica se o ModeloECF existe
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Codigo FROM ModeloECF WHERE Codigo = ?", 0, iCodigo, objImpressoraECF.iCodModelo)
    If lErro <> AD_SQL_SUCESSO Then gError 117582

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 117583

    If lErro <> AD_SQL_SUCESSO Then gError 117584

    'Faz o lock do ModeloECF
    lErro = Comando_LockShared(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 117585

    'Verifica se já existe ImpressoraECF cadastrado com o código utilizado
    lErro = Comando_ExecutarPos(alComando(1), "SELECT CodModelo FROM ImpressoraECF WHERE Codigo = ? AND FilialEmpresa = ?", 0, iCodModelo, objImpressoraECF.iCodigo, objImpressoraECF.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 117586

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 117587

    'Se não encontrou
    If lErro = AD_SQL_SEM_DADOS Then gError 117588

    'Faz o lock
    lErro = Comando_LockExclusive(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 117589
        
    'E altera o registro na tabela
    lErro = Comando_ExecutarPos(alComando(2), "UPDATE ImpressoraECF SET CodModelo = ?, NumSerie = ?", _
    alComando(1), objImpressoraECF.iCodModelo, objImpressoraECF.sNumSerie)
    If lErro <> AD_SQL_SUCESSO Then gError 117590

    'Fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Back_ImpressoraECF_Alterar = SUCESSO

    Exit Function

Erro_Back_ImpressoraECF_Alterar:

    Back_ImpressoraECF_Alterar = gErr

    Select Case gErr
        
        Case 117581
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 117582, 117583
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MODELOECF", gErr)

        Case 117584
            Call Rotina_Erro(vbOKOnly, "ERRO_MODELO_ECF_NAO_CADASTRADO", gErr)
        
        Case 117585
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_MODELO", gErr)

        Case 117586, 117587
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_IMPRESSORACF", gErr)

        Case 117588
            Call Rotina_Erro(vbOKOnly, "ERRO_IMPRESSORA_ECF_NAO_CADASTRADO", gErr, objImpressoraECF.iCodigo)

        Case 117589
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_IMPRESSORA", gErr)
            
        Case 117590
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_IMPRESSORA", gErr)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151298)

    End Select

    'Fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Back_ImpressoraECF_Excluir(ByVal objImpressoraECF As ClassImpressoraECF) As Long
'Exclui a ImpressoraECF

Dim iIndice As Integer
Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim iCodigo As Integer

On Error GoTo Erro_Back_ImpressoraECF_Excluir

   'Abre os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 117591
    Next

    'Busca no BD o ImpressoraECF a ser excluído
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Codigo FROM ImpressoraECF WHERE FilialEmpresa = ? AND Codigo = ?", 0, iCodigo, objImpressoraECF.iFilialEmpresa, objImpressoraECF.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 117592

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 117593
    
    'Se não encontrou => erro
    If lErro = AD_SQL_SEM_DADOS Then gError 117594

    'Faz o lock do ImpressoraECF
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 117595
        
    'Exclui o ImpressoraECF
    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM ImpressoraECF", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 117596
    
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Back_ImpressoraECF_Excluir = SUCESSO

    Exit Function

Erro_Back_ImpressoraECF_Excluir:

    Back_ImpressoraECF_Excluir = gErr

    Select Case gErr

        Case 117591
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 117592, 117593
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_IMPRESSORAECF", gErr, objImpressoraECF.iCodigo)

        Case 117594
            Call Rotina_Erro(vbOKOnly, "ERRO_IMPRESSORA_NAO_CADASTRADA", gErr, objImpressoraECF.iCodigo)
        
        Case 117595
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_IMPRESSORA", gErr)

        Case 117596
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_IMPRESSORAECF", gErr, objImpressoraECF.iCodigo)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151299)

    End Select

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Registro_Back_Operador(ByVal colRegistro As Collection, sArquivo As String, lRegistro As Long, ByVal iOperacao As Integer) As Long
'Trata o registro de Operador e coloca os dados no bd do backoffice. sArquivo contem o nome do arquivo em que sRegistro foi lido.
'iRegistro é o numero do registro.

Dim iPosAtual As Integer
Dim iPosFimAtual As Integer
Dim sRegistro As String
Dim iRegistroCol As Integer
Dim objOperador As New ClassOperador
Dim lErro As Long

On Error GoTo Erro_Registro_Back_Operador

    sRegistro = colRegistro.Item(1)

    iPosFimAtual = InStr(sRegistro, Chr(vbKeyEscape))
    
    Select Case iOperacao

        Case INCLUSAO_OPERADOR_CAIXA_CENTRAL
            'guarda as infos de Operador
            lErro = CF("Back_Operador", iPosAtual, iPosFimAtual, sRegistro, objOperador)
            If lErro <> SUCESSO Then gError 118642

            'inclui as infos de Operador
            lErro = CF("Back_Operador_Incluir", objOperador)
            If lErro <> SUCESSO And lErro <> 118976 Then gError 118643

        Case ALTERACAO_OPERADOR_CAIXA_CENTRAL
            'guarda as infos de Operador
            lErro = CF("Back_Operador", iPosAtual, iPosFimAtual, sRegistro, objOperador)
            If lErro <> SUCESSO Then gError 118791

            'altera as infos de Operador
            lErro = CF("Back_Operador_Alterar", objOperador)
            If lErro <> SUCESSO Then gError 118644
        
        Case EXCLUSAO_OPERADOR_CAIXA_CENTRAL
            'guarda as infos de Operador
            lErro = CF("Back_Exclui_Operador", iPosAtual, iPosFimAtual, sRegistro, objOperador)
            If lErro <> SUCESSO Then gError 118792

            'altera as infos de Operador
            lErro = CF("Back_Operador_Excluir", objOperador)
            If lErro <> SUCESSO And lErro <> 118799 Then gError 118793

    End Select

    Registro_Back_Operador = SUCESSO

    Exit Function

Erro_Registro_Back_Operador:

    Registro_Back_Operador = gErr

    Select Case gErr

        Case 118642, 118643, 118644, 118791, 118792, 118793

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151300)

    End Select

    Exit Function

End Function

Function Back_Operador(iPosAtual As Integer, iPosFimAtual As Integer, sRegistro As String, objOperador As ClassOperador) As Long
'le as infos de Operador

On Error GoTo Erro_Back_Operador

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objOperador.iCodigo = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objOperador.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objOperador.sNome = CStr(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objOperador.sSenha = CStr(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objOperador.iCodigoVendedor = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objOperador.iDesconto = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objOperador.iLimiteDesconto = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objOperador.iGerente = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objOperador.iAtivo = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    Back_Operador = SUCESSO

    Exit Function

Erro_Back_Operador:

    Back_Operador = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151301)

    End Select

    Exit Function

End Function

Function Back_Exclui_Operador(iPosAtual As Integer, iPosFimAtual As Integer, sRegistro As String, objOperador As ClassOperador) As Long
'le as infos de Operador

On Error GoTo Erro_Back_Exclui_Operador

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objOperador.iCodigo = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objOperador.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    Back_Exclui_Operador = SUCESSO

    Exit Function

Erro_Back_Exclui_Operador:

    Back_Exclui_Operador = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151302)

    End Select

    Exit Function

End Function

Function Back_Operador_Incluir(objOperador As ClassOperador) As Long
'inclui um Operador

Dim lErro As Long
Dim alComando(0 To 2) As Long
Dim iIndice As Integer
Dim iCodigo As Integer
Dim sNome As String

On Error GoTo Erro_Back_Operador_Incluir

    'Abertura dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 118645
    Next
    
    'inicializa o Buffer
    sNome = String(STRING_OPERADOR_NOME, 0)
    
    'Seleciona na Tabela Operador para saber se já existe com o Nome passado como Filtro no Bd
    lErro = Comando_ExecutarPos(alComando(2), "SELECT Nome FROM Operador WHERE Nome=? AND FilialEmpresa =? AND Codigo <> ?", 0, sNome, objOperador.sNome, objOperador.iFilialEmpresa, objOperador.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 118829

    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118830

    'Verifica se o nome que está tentando ser gravado já existe se exitir Erro
    If lErro = AD_SQL_SUCESSO Then gError 118831

    'Só faz o IF se existir vendedor Selecionado na Combo Vendedores
    If objOperador.iCodigoVendedor <> 0 Then

        'Seleciona na tabela de Vendedores
        lErro = Comando_ExecutarPos(alComando(0), "SELECT Codigo FROM Vendedores WHERE Codigo = ? And Exists(SELECT Vendedor FROM VendedorLoja WHERE FilialEmpresa = ? AND VendedorLoja.Vendedor = Vendedores.Codigo)", 0, iCodigo, objOperador.iCodigoVendedor, objOperador.iFilialEmpresa)
        If lErro <> AD_SQL_SUCESSO Then gError 118646

        lErro = Comando_BuscarPrimeiro(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118647

        If lErro <> AD_SQL_SUCESSO Then gError 118649

        'Faz um Lock no Registro Encontrado
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> SUCESSO Then gError 118648

    End If

    'Insere nova Rede no Bd
    lErro = Comando_Executar(alComando(1), "INSERT INTO Operador (Codigo, FilialEmpresa, Nome, Senha , Desconto , LimiteDesconto , CodVendedor , Gerente, Ativo) VALUES (?, ?, ?, ? , ?, ?, ?, ?,?)", objOperador.iCodigo, objOperador.iFilialEmpresa, objOperador.sNome, objOperador.sSenha, objOperador.iDesconto, objOperador.iLimiteDesconto, objOperador.iCodigoVendedor, objOperador.iGerente, objOperador.iAtivo)
    If lErro <> AD_SQL_SUCESSO Then gError 118650

    'Fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Back_Operador_Incluir = SUCESSO

    Exit Function

Erro_Back_Operador_Incluir:

    Back_Operador_Incluir = gErr

    Select Case gErr

        Case 118645
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 118646, 118647
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_VENDEDOR", gErr, objOperador.iCodigoVendedor)
        
        Case 118648
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_VENDEDOR", gErr)
        
        Case 118649
            lErro = Rotina_Erro(vbOKOnly, "ERRO_VENDEDOR_NAO_CADASTRADO", gErr, objOperador.iCodigoVendedor)
        
        Case 118650
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_OPERADOR", gErr, objOperador.iCodigo)
        
        Case 118829, 118830
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_OPERADOR", gErr, objOperador.iCodigo)
        
        Case 118831
            lErro = Rotina_Erro(vbOKOnly, "ERRO_OPERADOR_NOME_EXISTENTE", gErr)
        
        Case 118974, 118975
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_OPERADOR", gErr, objOperador.iCodigo)
        
        Case 118976
            lErro = Rotina_Erro(vbOKOnly, "ERRO_OPERADOR_CADASTRADO", gErr, objOperador.iCodigo)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151303)

    End Select

    'Fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Back_Operador_Alterar(objOperador As ClassOperador) As Long
'altera um Operador

Dim lErro As Long
Dim alComando(0 To 3) As Long
Dim iIndice As Integer
Dim sNome As String

On Error GoTo Erro_Back_Operador_Alterar

    'Abertura dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 118651
    Next
    
    'inicializa o Buffer
    sNome = String(STRING_OPERADOR_NOME, 0)
    
    'Seleciona na Tabela Operador para saber se já existe com o Nome passado como Filtro no Bd
    lErro = Comando_ExecutarPos(alComando(2), "SELECT Nome FROM Operador WHERE Nome=? AND FilialEmpresa =? AND Codigo <> ?", 0, sNome, objOperador.sNome, objOperador.iFilialEmpresa, objOperador.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 118832

    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118833
    
    'Verifica se o nome que está tentando ser gravado já existe se exitir Erro
    If lErro = AD_SQL_SUCESSO Then gError 118834

    'Só faz o IF se existir vendedor Selecionado na Combo Vendedores
    If objOperador.iCodigoVendedor <> 0 Then

        'Seleciona na tabela de Vendedores
        lErro = Comando_ExecutarPos(alComando(0), "SELECT Codigo FROM Vendedores WHERE Codigo = ? And Exists(SELECT Vendedor FROM VendedorLoja WHERE FilialEmpresa = ? AND VendedorLoja.Vendedor = Vendedores.Codigo)", 0, iCodigo, objOperador.iCodigoVendedor, objOperador.iFilialEmpresa)
        If lErro <> AD_SQL_SUCESSO Then gError 118652

        lErro = Comando_BuscarPrimeiro(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118653

        'Se Encontro algum Registro
        If lErro <> AD_SQL_SUCESSO Then gError 118655
            
        'Faz um Lock no Registro Encontrado
        lErro = Comando_LockExclusive(alComando(0))
        If lErro <> SUCESSO Then gError 118654

    End If

    'Seleciona na Tabela de Operador pela Chave Primária
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Nome FROM Operador WHERE Codigo =? AND FilialEmpresa =? ", 0, sNome, objOperador.iCodigo, objOperador.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 118656

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118657

    'Verifica se já Existe o Operador
    If lErro = AD_SQL_SEM_DADOS Then gError 118658

    lErro = Comando_LockExclusive(alComando(1))
    If lErro <> SUCESSO Then gError 118659

    'Atualiza os Dados do Operador
    lErro = Comando_ExecutarPos(alComando(3), "UPDATE Operador SET  Nome = ?, Senha = ? ,Desconto = ? , LimiteDesconto = ? , CodVendedor = ? , Gerente = ?, Ativo = ? ", alComando(1), objOperador.sNome, objOperador.sSenha, objOperador.iDesconto, objOperador.iLimiteDesconto, objOperador.iCodigoVendedor, objOperador.iGerente, objOperador.iAtivo)
    If lErro <> AD_SQL_SUCESSO Then gError 118660

    'Fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Back_Operador_Alterar = SUCESSO

    Exit Function

Erro_Back_Operador_Alterar:

    Back_Operador_Alterar = gErr

    Select Case gErr

        Case 118651
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 118652, 118653
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_VENDEDOR", gErr, objOperador.iCodigoVendedor)
        
        Case 118654
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_VENDEDOR", gErr)
        
        Case 118655
            lErro = Rotina_Erro(vbOKOnly, "ERRO_VENDEDOR_NAO_CADASTRADO", gErr, objOperador.iCodigoVendedor)
                    
        Case 118656, 118657, 118832, 118833
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_OPERADOR", gErr, objOperador.iCodigo)
        
        Case 118658
            lErro = Rotina_Erro(vbOKOnly, "ERRO_OPERADOR_NAO_CADASTRADO", gErr, objOperador.iCodigo)
                
        Case 118659
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_OPERADOR", gErr)

        Case 118660
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_OPERADOR", gErr, objOperador.iCodigo)
            
        Case 118834
            lErro = Rotina_Erro(vbOKOnly, "ERRO_OPERADOR_NOME_EXISTENTE", gErr)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151304)

    End Select

    'Fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Back_Operador_Excluir(ByVal objOperador As ClassOperador) As Long
'Exclui o Operador da tabela

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim lTransacao As Long
Dim iCodigo As Integer
Dim iIndice As Integer
Dim sNome As String
Dim iNumInt As Integer
Dim iTipoLog As Integer
Dim objLog As New ClassLog
Dim dtDataLog As Date

On Error GoTo Erro_Back_Operador_Excluir

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 118794
    Next
    
    'Seleciona o Operador no bd
    lErro = Comando_ExecutarPos(alComando(0), "SELECT DataLog FROM Operador WHERE Codigo = ? AND FilialEmpresa = ? ", 0, dtDataLog, objOperador.iCodigo, objOperador.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 118795

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 118796
    
    If lErro = AD_SQL_SEM_DADOS Then gError 118799
    
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> SUCESSO Then gError 118797

    'Exclui a Operador do BD
    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM Operador", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 118798

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Back_Operador_Excluir = SUCESSO

    Exit Function

Erro_Back_Operador_Excluir:

    Back_Operador_Excluir = gErr

    Select Case gErr

        Case 118794
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 118795, 118796
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_OPERADOR1", gErr, objOperador.iCodigo)

        Case 118797
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_OPERADOR", gErr)

        Case 118798
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_OPERADOR", gErr, objOperador.iCodigo)
        
        Case 118799
            lErro = Rotina_Erro(vbOKOnly, "ERRO_OPERADOR_NAO_CADASTRADO", gErr, objOperador.iCodigo)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151305)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Registro_Back_Rede(ByVal colRegistro As Collection, sArquivo As String, lRegistro As Long, ByVal iOperacao As Integer) As Long
'Trata o registro de Rede e coloca os dados no bd do backoffice. sArquivo contem o nome do arquivo em que sRegistro foi lido.
'iRegistro é o numero do registro.

Dim iPosAtual As Integer
Dim iPosFimAtual As Integer
Dim sRegistro As String
Dim iRegistroCol As Integer
Dim objRede As New ClassRede
Dim lErro As Long

On Error GoTo Erro_Registro_Back_Rede

    sRegistro = colRegistro.Item(1)

    iPosFimAtual = InStr(sRegistro, Chr(vbKeyEscape))

    Select Case iOperacao

        Case INCLUSAO_REDE_CAIXA_CENTRAL
            'guarda as infos de Rede
            lErro = CF("Back_Rede", iPosAtual, iPosFimAtual, sRegistro, objRede)
            If lErro <> SUCESSO Then gError 118800

            'inclui as infos de Rede
            lErro = CF("Back_Rede_Incluir", objRede)
            If lErro <> SUCESSO And lErro <> 118979 Then gError 118662

        Case ALTERACAO_REDE_CAIXA_CENTRAL
            'guarda as infos de Rede
            lErro = CF("Back_Rede", iPosAtual, iPosFimAtual, sRegistro, objRede)
            If lErro <> SUCESSO Then gError 118661

            'altera as infos de Rede
            lErro = CF("Back_Rede_Alterar", objRede)
            If lErro <> SUCESSO Then gError 118663
        
        Case EXCLUSAO_REDE_CAIXA_CENTRAL
            'guarda as infos de Rede
            lErro = CF("Back_Exclui_Rede", iPosAtual, iPosFimAtual, sRegistro, objRede)
            If lErro <> SUCESSO Then gError 118801

            'altera as infos de Rede
            lErro = CF("Back_Rede_Excluir", objRede)
            If lErro <> SUCESSO And lErro <> 118806 Then gError 118802

    End Select

    Registro_Back_Rede = SUCESSO

    Exit Function

Erro_Registro_Back_Rede:

    Registro_Back_Rede = gErr

    Select Case gErr

        Case 118661, 118662, 118663, 118800, 118801, 118802

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151306)

    End Select

    Exit Function

End Function

Function Back_Rede(iPosAtual As Integer, iPosFimAtual As Integer, sRegistro As String, objRede As ClassRede) As Long
'le as infos de Rede

On Error GoTo Erro_Back_Rede

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objRede.iCodigo = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objRede.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objRede.sNome = CStr(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objRede.lCliente = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objRede.iFilialCli = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objRede.iAtivo = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    Back_Rede = SUCESSO

    Exit Function

Erro_Back_Rede:

    Back_Rede = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151307)

    End Select

    Exit Function

End Function

Function Back_Exclui_Rede(iPosAtual As Integer, iPosFimAtual As Integer, sRegistro As String, objRede As ClassRede) As Long
'le as infos de Rede

On Error GoTo Erro_Back_Exclui_Rede

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objRede.iCodigo = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objRede.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    Back_Exclui_Rede = SUCESSO

    Exit Function

Erro_Back_Exclui_Rede:

    Back_Exclui_Rede = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151308)

    End Select

    Exit Function

End Function

Function Back_Rede_Incluir(ByVal objRede As ClassRede) As Long
'inclui um Rede

Dim lErro As Long
Dim alComando(1 To 4) As Long
Dim iIndice As Integer
Dim iCodFilial As Integer
Dim lCliente As Long
Dim iFilialCli As Integer
Dim lCodCliente As Long
Dim iCodigo As Integer

On Error GoTo Erro_Back_Rede_Incluir

    'Abertura dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 118664
    Next
    
    'Seleciona na Tabela Rede para saber se já existe com o Nome passado como Filtro no Bd
    lErro = Comando_ExecutarPos(alComando(4), "SELECT Codigo FROM Redes WHERE Nome=? AND FilialEmpresa =? AND Codigo <> ?", 0, iCodigo, objRede.sNome, objRede.iFilialEmpresa, objRede.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 118977

    lErro = Comando_BuscarPrimeiro(alComando(4))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118978
    
    'Verifica se o nome que está tentando ser gravado já existe se exitir Erro
    If lErro = AD_SQL_SUCESSO Then gError 118979
    
    'Seleciona na Tabela FiliaisCientes a fim de locar
    lErro = Comando_ExecutarPos(alComando(3), "SELECT CodFilial FROM FiliaisClientes WHERE CodCliente=? And CodFilial=?", 0, lCodCliente, objRede.lCliente, objRede.iFilialCli)
    If lErro <> AD_SQL_SUCESSO Then gError 118665

    lErro = Comando_BuscarPrimeiro(alComando(3))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118666
    
    lCliente = objRede.lCliente
    iFilialCli = objRede.iFilialCli

    'SeVerifica se o nome que está tentando ser gravado já existe se exitir Erro
    If lErro = AD_SQL_SEM_DADOS Then gError 118669
        
    'Faz um Lock no Registro Encontrado
    lErro = Comando_LockExclusive(alComando(3))
    If lErro <> SUCESSO Then gError 118670
    
    'Insere nova Rede no Bd
    lErro = Comando_Executar(alComando(1), "INSERT INTO Redes (Codigo, FilialEmpresa, Nome, Cliente, FilialCli, Ativo) VALUES (?, ?, ?, ?, ?, ?)", objRede.iCodigo, objRede.iFilialEmpresa, objRede.sNome, objRede.lCliente, objRede.iFilialCli, objRede.iAtivo)
    If lErro <> AD_SQL_SUCESSO Then gError 118671

    'Fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Back_Rede_Incluir = SUCESSO

    Exit Function

Erro_Back_Rede_Incluir:

    Back_Rede_Incluir = gErr

    Select Case gErr

        Case 118664
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 118665 To 118668
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIAISCLIENTES", gErr, lCliente, iFilialCli)
        
        Case 118669
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FILIALCLIENTE_NAO_CADASTRADA", gErr, lCliente, iFilialCli)

        Case 118670
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_FILIAISCLIENTES", gErr, lCliente, iFilialCli)
        
        Case 118671
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERSAO_REDE", gErr)
        
        Case 118835, 118836, 118977, 118978
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_REDE", gErr, objRede.iCodigo)
        
        Case 118837
            lErro = Rotina_Erro(vbOKOnly, "ERRO_JA_EXISTE_REDE_COM_MESMO_NOME", gErr, iCodigo)
        
        Case 118979
            lErro = Rotina_Erro(vbOKOnly, "ERRO_REDE_ENCONTRADA", gErr, objRede.iCodigo)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151309)

    End Select

    'Fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Back_Rede_Alterar(objRede As ClassRede) As Long
'altera os dados de uma Rede

Dim lErro As Long
Dim alComando(0 To 3) As Long
Dim iIndice As Integer
Dim iCodigo As Integer
Dim lCodCliente As Long
Dim iFilialCli As Integer
Dim lCliente As Long
Dim iFilialCliente As Integer
Dim iCodFilial As Integer
Dim sNome As String

On Error GoTo Erro_Back_Rede_Alterar

    'Abertura dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 118672
    Next

    'Seleciona na Tabela FiliaisClientes a fim de locar
    lErro = Comando_ExecutarPos(alComando(3), "SELECT CodFilial FROM FiliaisClientes WHERE CodCliente=? And CodFilial=?", 0, lCodCliente, objRede.lCliente, objRede.iFilialCli)
    If lErro <> AD_SQL_SUCESSO Then gError 118673

    lErro = Comando_BuscarPrimeiro(alComando(3))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118674
    
    lCliente = objRede.lCliente
    iFilialCliente = objRede.iFilialCli


    'Verifica se a filial do cliente está cadastrado, se nao estiver ==> erro
    If lErro = AD_SQL_SEM_DADOS Then gError 118677

    'Faz um Lock no Registro Encontrado
    lErro = Comando_LockExclusive(alComando(3))
    If lErro <> SUCESSO Then gError 118678
    
    'Seleciona na Tabela Rede para saber se já existe com o Nome passado como Filtro no Bd
    lErro = Comando_ExecutarPos(alComando(2), "SELECT Codigo FROM Redes WHERE Nome=? AND FilialEmpresa =? AND Codigo <> ?", 0, iCodigo, objRede.sNome, objRede.iFilialEmpresa, objRede.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 118838

    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118839
    
    'Verifica se o nome que está tentando ser gravado já existe se exitir Erro
    If lErro = AD_SQL_SUCESSO Then gError 118840
    
    'Inicializar o Buffer
    sNome = String(STRING_REDE_NOME, 0)

    'Seleciona na tabela Rede a Rede passada
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Nome FROM Redes WHERE Codigo = ? AND FilialEmpresa =? ", 0, sNome, objRede.iCodigo, objRede.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 118679

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118680

    'se nao encontrou a rede ==> erro
    If lErro <> AD_SQL_SUCESSO Then gError 118681

    'Faz um Lock no Registro Encontrado
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> SUCESSO Then gError 118682

    'Atualiza os Dados da Rede
    lErro = Comando_ExecutarPos(alComando(1), "UPDATE Redes SET  Nome = ?, Cliente = ?, FilialCli = ?, Ativo = ? ", alComando(0), objRede.sNome, objRede.lCliente, objRede.iFilialCli, objRede.iAtivo)
    If lErro <> AD_SQL_SUCESSO Then gError 118683

    'Fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Back_Rede_Alterar = SUCESSO

    Exit Function

Erro_Back_Rede_Alterar:

    Back_Rede_Alterar = gErr

    Select Case gErr

        Case 118672
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 118673 To 118676
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIAISCLIENTES", gErr, lCliente, iFilialCliente)
        
        Case 118677
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FILIALCLIENTE_NAO_CADASTRADA", gErr, lCliente, iFilialCliente)

        Case 118678
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_FILIAISCLIENTES", gErr, lCliente, iFilialCliente)
        
        Case 118679, 118680, 118838, 118839
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_REDE", gErr, objRede.iCodigo)
        
        Case 118681
            lErro = Rotina_Erro(vbOKOnly, "ERRO_REDE_NAO_ENCONTRADA", gErr, objRede.iCodigo)
                
        Case 118682
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_REDE", gErr, objRede.iCodigo)

        Case 118683
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_REDE", gErr, objRede.iCodigo)
    
        Case 118840
            lErro = Rotina_Erro(vbOKOnly, "ERRO_JA_EXISTE_REDE_COM_MESMO_NOME", gErr, iCodigo)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151310)

    End Select

    'Fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Back_Rede_Excluir(ByVal objRede As ClassRede) As Long
'Função que Vai Exclui do Bd a Rede passada por parâmetro

Dim lErro As Long
Dim alComando(0 To 2) As Long
Dim lTransacao As Long
Dim iCodigo As Integer

Dim sNome As String
Dim iRede As Integer
Dim iIndice As Integer
Dim objLog As New ClassLog
Dim iTipoLog As Integer
Dim dtDataLog As Date

On Error GoTo Erro_Back_Rede_Excluir

    'Abre os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 118803
    Next
        
    'Inicializar o Buffer
    sNome = String(STRING_REDE_NOME, 0)
    
    'Seleciona na tabela Rede a Rede passada
    lErro = Comando_ExecutarPos(alComando(0), "SELECT Codigo , Nome, DataLog FROM Redes WHERE Codigo = ? AND FilialEmpresa =? ", 0, iCodigo, sNome, dtDataLog, objRede.iCodigo, objRede.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 118804

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118805
    
    'Se não Existir no bd a Rede sai por Erro
    If lErro = AD_SQL_SEM_DADOS Then gError 118806
    
    'Faz um Lock no Registro Encontrado
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> SUCESSO Then gError 118807
        
    'Seleciona na tabela AdmMeioPagto se Existe Rede
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Rede  FROM AdmMeioPagto WHERE Rede = ? AND FilialEmpresa =? ", 0, iRede, objRede.iCodigo, objRede.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 118808

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118809
        
    'Se a Rede esta Sendo usada em AdmMeioPagto sai por Erro
    If lErro = AD_SQL_SUCESSO Then gError 118810
        
    'Exclui Rede no banco de dados
    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM Redes", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 118811
                
    'Fecha os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Comando_Fechar (alComando(iIndice))
    Next

    Back_Rede_Excluir = SUCESSO

    Exit Function

Erro_Back_Rede_Excluir:
    
    Back_Rede_Excluir = gErr
    
    Select Case gErr
            
        Case 118803
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 118804, 118805
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_REDE", gErr, objRede.iCodigo)
        
        Case 118807
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LOCK_REDE", gErr, objRede.iCodigo)
        
        Case 118806
            lErro = Rotina_Erro(vbOKOnly, "ERRO_REDE_NAO_ENCONTRADA", gErr, objRede.iCodigo)

        Case 118808, 118809
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ADMMEOPAGTO1", gErr)

        Case 118810
            lErro = Rotina_Erro(vbOKOnly, "ERRO_REDE_USADA_ADMMEIOPAGTO", gErr, objRede.iCodigo)

        Case 118811
            lErro = Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_REDE", gErr)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151311)

    End Select
      
    'Fecha comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Registro_Back_Cliente(ByVal colRegistro As Collection, sArquivo As String, lRegistro As Long, ByVal iOperacao As Integer) As Long
'Trata o registro de Cliente e coloca os dados no bd do backoffice. sArquivo contem o nome do arquivo em que sRegistro foi lido.
'iRegistro é o numero do registro.

Dim iPosAtual As Integer
Dim iPosFimAtual As Integer
Dim sRegistro As String
Dim iRegistroCol As Integer
Dim objCliente As New ClassCliente
Dim objEndereco As New ClassEndereco
Dim lErro As Long

On Error GoTo Erro_Registro_Back_Cliente

    sRegistro = colRegistro.Item(1)

    iPosFimAtual = InStr(sRegistro, Chr(vbKeyEscape))

    'guarda as infos de Cliente
    lErro = CF("Back_Cliente", iPosAtual, iPosFimAtual, sRegistro, objCliente, objEndereco)
    If lErro <> SUCESSO Then gError 118684

    Select Case iOperacao

        Case INCLUSAO_CLIENTE
            'inclui as infos de Cliente
            lErro = CF("Back_Cliente_Incluir", objCliente, objEndereco)
            If lErro <> SUCESSO And lErro <> 118983 Then gError 118685

        Case ALTERACAO_CLIENTE
            'altera as infos de Cliente
            lErro = CF("Back_Cliente_Alterar", objCliente, objEndereco)
            If lErro <> SUCESSO Then gError 118686

    End Select

    Registro_Back_Cliente = SUCESSO

    Exit Function

Erro_Registro_Back_Cliente:

    Registro_Back_Cliente = gErr

    Select Case gErr

        Case 118684, 118685, 118686

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151312)

    End Select

    Exit Function

End Function

Function Back_Cliente(iPosAtual As Integer, iPosFimAtual As Integer, sRegistro As String, objCliente As ClassCliente, objEndereco As ClassEndereco) As Long
'le as infos de Cliente

On Error GoTo Erro_Back_Cliente
        
    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCliente.lCodigo = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCliente.lCodigoLoja = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCliente.sCgc = CStr(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCliente.sNomeReduzido = CStr(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCliente.sRG = CStr(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCliente.sRazaoSocial = CStr(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCliente.iAtivo = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCliente.iFilialEmpresaLoja = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objEndereco.iCodigoPais = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objEndereco.lCodigo = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objEndereco.sBairro = CStr(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objEndereco.sCEP = CStr(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objEndereco.sCidade = CStr(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objEndereco.sContato = CStr(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objEndereco.sEmail = CStr(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objEndereco.sEndereco = CStr(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objEndereco.sFax = CStr(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objEndereco.sSiglaEstado = CStr(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objEndereco.sTelefone1 = CStr(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objEndereco.sTelefone2 = CStr(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    Back_Cliente = SUCESSO

    Exit Function

Erro_Back_Cliente:

    Back_Cliente = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151313)

    End Select

    Exit Function

End Function

Function Back_Cliente_Incluir(objCliente As ClassCliente, objEndereco As ClassEndereco) As Long
'inclui um Cliente

Dim lErro As Long
Dim alComando(0 To 5) As Long
Dim iIndice As Integer
Dim lCodigo As Long
Dim lCodigoCli As Long
Dim lCodigoCliente As Long
Dim objClienteHistorico As New ClassClienteHistorico
Dim objPais As New ClassPais
Dim sNomeReduzido As String
Dim sNomeReduzido1 As String
Dim sNomeReduzido2 As String
Dim lCodEndereco As Long

On Error GoTo Erro_Back_Cliente_Incluir

    'Abertura dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 118687
    Next

    'pega o proximo numero de cliente disponivel para o cliente que está sendo inserido
    lErro = CF("Config_ObterAutomatico_EmTrans", "CPRConfig", "NUM_PROX_CLIENTE", "Clientes", "Codigo", lCodigo)
    If lErro <> SUCESSO Then gError 118688
    
    'Procura pelo cliente em questao pelo codigoloja
    lErro = Comando_Executar(alComando(5), "SELECT CodigoLoja FROM Clientes WHERE CodigoLoja=? AND FilialEmpresaLoja=?", lCodigoCli, objCliente.lCodigoLoja, objCliente.iFilialEmpresaLoja)
    If lErro <> AD_SQL_SUCESSO Then gError 118981

    'Tenta ler o código deste Cliente
    lErro = Comando_BuscarPrimeiro(alComando(5))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118982

    'se encontrou o registro referente ao cliente ==> erro
    If lErro = AD_SQL_SUCESSO Then gError 118983

    objCliente.lCodigo = lCodigo
    sNomeReduzido = objCliente.sNomeReduzido
    sNomeReduzido1 = objCliente.sNomeReduzido

    lErro = AD_SQL_SUCESSO

    Do While lErro = AD_SQL_SUCESSO

        'Procura por um outro Cliente com o mesmo Nome Reduzido
        lErro = Comando_Executar(alComando(0), "SELECT Codigo FROM Clientes WHERE NomeReduzido=?", lCodigo, sNomeReduzido)
        If lErro <> AD_SQL_SUCESSO Then gError 118689

        'Tenta ler o código deste Cliente
        lErro = Comando_BuscarPrimeiro(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118690

        'se já existe um cliente com este nome reduzido ==> tenta acoplar a filial
        If lErro = AD_SQL_SUCESSO Then

            If Len(sNomeReduzido) + Len(CStr(objCliente.iFilialEmpresaLoja)) + 1 > STRING_CLIENTE_NOME_REDUZIDO Then

                'guarda o nome do cliente antes de colocar os sufixos
                sNomeReduzido2 = sNomeReduzido1

                'se o tamanho do nome que restar for menor que 1 caracter ==> erro
                If Len(sNomeReduzido1) - (Len(CStr(objCliente.iFilialEmpresaLoja)) + 1) < 1 Then gError 118691
                
                'retira do nome original o espaco para o sufixo
                sNomeReduzido1 = left(sNomeReduzido1, Len(sNomeReduzido1) - (Len(CStr(objCliente.iFilialEmpresaLoja)) + 1))

                'guarda o nome com os sufixos
                sNomeReduzido = sNomeReduzido1

            End If

            sNomeReduzido = sNomeReduzido & "_" & CStr(objCliente.iFilialEmpresaLoja)

        End If

    Loop

    objCliente.sNomeReduzido = sNomeReduzido

    'Atualiza os dados para futura gravacao de histórico
    With objClienteHistorico

        .dtDataAtualizacao = Date
        .iFilialCliente = FILIAL_MATRIZ
        .lCodigo = objCliente.lCodigo
        .sCgc = objCliente.sCgc
        .sInscricaoEstadual = objCliente.sInscricaoEstadual
        .sInscricaoMunicipal = objCliente.sInscricaoMunicipal
        .sRazaoSocial = objCliente.sRazaoSocial
        .sEndereco = objEndereco.sEndereco
        .sBairro = objEndereco.sBairro
        .sCEP = objEndereco.sCEP
        .sCidade = objEndereco.sCidade
        .sUF = objEndereco.sSiglaEstado
        .iAtivo = objCliente.iAtivo
        .lCodigoLoja = objCliente.lCodigoLoja
        .iFilialEmpresaLoja = objCliente.iFilialEmpresaLoja

        'Le o nome do Pais com o codigo no obj
        objPais.iCodigo = objEndereco.iCodigoPais
        lErro = CF("Paises_Le", objPais)
        If lErro <> SUCESSO And lErro <> 47876 Then gError 118692

        'Pais não está cadastrado - --- -> Erro
        If lErro = 47876 Then gError 118693

        .sPais = objPais.sNome

    End With

    'Faz "locks" nas tabelas dos objetos relacionados ao Cliente
    lErro = CF("Clientes_Le_Tabelas_Lock", objCliente)
    If lErro <> SUCESSO Then gError 118695

    'FAZ A GRAVACAO DO HISTORICO
    lErro = CF("ClienteHistorico_Grava", objClienteHistorico)
    If lErro <> SUCESSO Then gError 118694

    lErro = CF("Endereco_Automatico", lCodEndereco)
    If lErro <> SUCESSO Then gError 118696

    objEndereco.lCodigo = lCodEndereco

    lErro = CF("Endereco_Grava", objEndereco)
    If lErro <> SUCESSO Then gError 118697

    objCliente.lEndereco = objEndereco.lCodigo
    objCliente.iTipo = TIPO_CLIENTE_LOJA

    lErro = Comando_Executar(alComando(2), "INSERT INTO Clientes (Codigo,RazaoSocial,NomeReduzido,Tipo,Observacao,LimiteCredito,CondicaoPagto,Desconto,CodMensagem,TabelaPreco,ProxCodFilial, CodPadraoCobranca, Ativo, CodigoLoja,FilialEmpresaLoja) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
        objCliente.lCodigo, objCliente.sRazaoSocial, objCliente.sNomeReduzido, objCliente.iTipo, objCliente.sObservacao, objCliente.dLimiteCredito, objCliente.iCondicaoPagto, objCliente.dDesconto, objCliente.iCodMensagem, objCliente.iTabelaPreco, FILIAL_MATRIZ + 1, objCliente.iCodPadraoCobranca, objCliente.iAtivo, objCliente.lCodigoLoja, objCliente.iFilialEmpresaLoja)
    If lErro <> AD_SQL_SUCESSO Then gError 118698

    lErro = Comando_Executar(alComando(3), "INSERT INTO FiliaisClientes (CodCliente,CodFilial,Nome,CGC,InscricaoEstadual,InscricaoMunicipal,Endereco,EnderecoEntrega,EnderecoCobranca,CodTransportadora,Observacao,ContaContabil,Vendedor,ComissaoVendas,Regiao,FreqVisitas,DataUltVisita,CodCobrador,InscricaoSuframa, RG, CodFilialLoja, FilialEmpresaLoja, CodClienteLoja, Ativo) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
                             objCliente.lCodigo, FILIAL_MATRIZ, MATRIZ, objCliente.sCgc, objCliente.sInscricaoEstadual, objCliente.sInscricaoMunicipal, objCliente.lEndereco, objCliente.lEnderecoEntrega, objCliente.lEnderecoCobranca, objCliente.iCodTransportadora, objCliente.sObservacao2, objCliente.sContaContabil, objCliente.iVendedor, objCliente.dComissaoVendas, objCliente.iRegiao, objCliente.iFreqVisitas, objCliente.dtDataUltVisita, objCliente.iCodCobrador, objCliente.sInscricaoSuframa, objCliente.sRG, FILIAL_MATRIZ, objCliente.iFilialEmpresaLoja, objCliente.lCodigoLoja, objCliente.iAtivo)
    If lErro <> AD_SQL_SUCESSO Then gError 118699

    'Fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Back_Cliente_Incluir = SUCESSO

    Exit Function

Erro_Back_Cliente_Incluir:

    Back_Cliente_Incluir = gErr

    Select Case gErr

        Case 118687
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 118688, 118692, 118694 To 118697
        
        Case 118689, 118690, 118980 To 118982
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CLIENTES", gErr)
        
        Case 118691
            Call Rotina_Erro(vbOKOnly, "ERRO_NOMEREDUZIDO_INVALIDO", gErr)
        
        Case 118693
            Call Rotina_Erro(vbOKOnly, "ERRO_PAIS_NAO_CADASTRADO", gErr, objPais.iCodigo)
        
        Case 118698
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CLIENTES", gErr, lCodigoCliente)
            
        Case 118699
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FILIAISCLIENTES", gErr)
        
        Case 118983
            Call Rotina_Erro(vbOKOnly, "ERRO_CLIENTE_CADASTRADO", gErr, lCodigoCli)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151314)

    End Select

    'Fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Back_Cliente_Alterar(objCliente As ClassCliente, objEndereco As ClassEndereco) As Long
'altera os dados de um Cliente

Dim lErro As Long
Dim alComando(0 To 4) As Long
Dim lCodigo As Long
Dim lCodCliente As Long
Dim iFilialCli As Integer
Dim sNomeReduzido As String
Dim sNomeReduzido1 As String
Dim sNomeReduzido2 As String
Dim objClienteHistorico As New ClassClienteHistorico
Dim objPais As New ClassPais
Dim lCodigoCliente As Long
Dim iIndice As Integer
Dim tFilialCliente As typeFilialCliente
Dim tCliente As typeCliente

On Error GoTo Erro_Back_Cliente_Alterar

    'Inicializa os atributos STRING dos types Cliente e FilialCliente
    tCliente.sRazaoSocial = String(STRING_CLIENTE_RAZAO_SOCIAL, 0)
    tCliente.sNomeReduzido = String(STRING_CLIENTE_NOME_REDUZIDO, 0)
    tCliente.sObservacao = String(STRING_CLIENTE_OBSERVACAO, 0)
    tFilialCliente.sNome = String(STRING_FILIAL_CLIENTE_NOME, 0)
    tFilialCliente.sCgc = String(STRING_CGC, 0)
    tFilialCliente.sRG = String(STRING_RG, 0)
    tFilialCliente.sInscricaoEstadual = String(STRING_INSCR_EST, 0)
    tFilialCliente.sInscricaoMunicipal = String(STRING_INSCR_MUN, 0)
    tFilialCliente.sInscricaoSuframa = String(STRING_INSCR_SUF, 0)
    tFilialCliente.sObservacao = String(STRING_CLIENTE_OBSERVACAO, 0)
    tFilialCliente.sContaContabil = String(STRING_CONTA, 0)

    'Abertura dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 118701
    Next

    sNomeReduzido = String(STRING_CLIENTE_NOME_REDUZIDO, 0)

    If objCliente.lCodigo <> 0 Then

        'Procura pelo cliente em questao pelo codigo do cliente
        lErro = Comando_ExecutarPos(alComando(0), "SELECT NomeReduzido FROM Clientes WHERE Codigo=?", 0, sNomeReduzido, objCliente.lCodigo)
        If lErro <> AD_SQL_SUCESSO Then gError 118702
        
        lCodigoCliente = objCliente.lCodigo
    Else

        'Procura pelo cliente em questao pelo codigoloja
        lErro = Comando_ExecutarPos(alComando(0), "SELECT NomeReduzido FROM Clientes WHERE CodigoLoja=? AND FilialEmpresaLoja=?", 0, sNomeReduzido, objCliente.lCodigoLoja, objCliente.iFilialEmpresaLoja)
        If lErro <> AD_SQL_SUCESSO Then gError 118703
        
        lCodigoCliente = objCliente.lCodigoLoja
    End If

    'Tenta ler o código deste Cliente
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118704

    'se nao encontrou o registro referente ao cliente ==> erro
    If lErro = AD_SQL_SEM_DADOS Then gError 118705

    If sNomeReduzido <> objCliente.sNomeReduzido Then

        sNomeReduzido = objCliente.sNomeReduzido
        sNomeReduzido1 = objCliente.sNomeReduzido

        lErro = AD_SQL_SUCESSO

        Do While lErro = AD_SQL_SUCESSO

            'Procura por um outro Cliente com o mesmo Nome Reduzido
            lErro = Comando_Executar(alComando(1), "SELECT Codigo FROM Clientes WHERE NomeReduzido=?", lCodigo, sNomeReduzido)
            If lErro <> AD_SQL_SUCESSO Then gError 118706

            'Tenta ler o código deste Cliente
            lErro = Comando_BuscarPrimeiro(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118707

            'se já existe um cliente com este nome reduzido ==> tenta acoplar a filial
            If lErro = AD_SQL_SUCESSO Then

                If Len(sNomeReduzido) + Len(CStr(objCliente.iFilialEmpresaLoja)) + 1 > STRING_CLIENTE_NOME_REDUZIDO Then

                    'guarda o nome do cliente antes de colocar os sufixos
                    sNomeReduzido2 = sNomeReduzido1

                    'se o tamanho do nome que restar for menor que 1 caracter ==> erro
                    If Len(sNomeReduzido1) - (Len(CStr(objCliente.iFilialEmpresaLoja)) + 1) < 1 Then gError 118708
                    
                    'guarda o nome encolhido do cliente sem os sufixos
                    sNomeReduzido1 = left(sNomeReduzido1, Len(sNomeReduzido1) - (Len(CStr(objCliente.iFilialEmpresaLoja)) + 1))

                    'guarda o nome encolhido do cliente sem os sufixos
                    sNomeReduzido = sNomeReduzido1

                End If

                sNomeReduzido = sNomeReduzido & "_" & CStr(objCliente.iFilialEmpresaLoja)

            End If
        Loop

        objCliente.sNomeReduzido = sNomeReduzido

    End If

    'Atualiza os dados para futura gravacao de histórico
    With objClienteHistorico

        .dtDataAtualizacao = Date
        .iFilialCliente = FILIAL_MATRIZ
        .lCodigo = objCliente.lCodigo
        .sCgc = objCliente.sCgc
        .sInscricaoEstadual = objCliente.sInscricaoEstadual
        .sInscricaoMunicipal = objCliente.sInscricaoMunicipal
        .sRazaoSocial = objCliente.sRazaoSocial
        .sEndereco = objEndereco.sEndereco
        .sBairro = objEndereco.sBairro
        .sCEP = objEndereco.sCEP
        .sCidade = objEndereco.sCidade
        .sUF = objEndereco.sSiglaEstado
        .iAtivo = objCliente.iAtivo
        .lCodigoLoja = objCliente.lCodigoLoja
        .iFilialEmpresaLoja = objCliente.iFilialEmpresaLoja

        'Le o nome do Pais com o codigo no obj
        objPais.iCodigo = objEndereco.iCodigoPais

        lErro = CF("Paises_Le", objPais)
        If lErro <> SUCESSO And lErro <> 47876 Then gError 118709

        'Pais não está cadastrado - --- -> Erro
        If lErro = 47876 Then gError 118710

        .sPais = objPais.sNome

    End With

    'Faz "locks" nas tabelas dos objetos relacionados ao Cliente
    lErro = CF("Clientes_Le_Tabelas_Lock", objCliente)
    If lErro <> SUCESSO Then gError 118712

    'FAZ A GRAVACAO DO HISTORICO
    lErro = CF("ClienteHistorico_Grava", objClienteHistorico)
    If lErro <> SUCESSO Then gError 118711

    'Seleciona a tabela de Filiais Clientes (para modificar a Matriz e pegar os Codigos de Enderecos em tFilial.lEndereco)
    If objCliente.lCodigo = 0 Then
        lErro = Comando_ExecutarPos(alComando(3), "SELECT CGC, InscricaoEstadual, InscricaoMunicipal, Endereco, EnderecoEntrega, EnderecoCobranca, CodTransportadora, Observacao, ContaContabil, Vendedor, ComissaoVendas, Regiao, FreqVisitas, DataUltVisita, CodCobrador,InscricaoSuframa, RG FROM  FiliaisClientes WHERE CodClienteLoja = ? AND CodFilialLoja = ?", 0, _
            tFilialCliente.sCgc, tFilialCliente.sInscricaoEstadual, tFilialCliente.sInscricaoMunicipal, tFilialCliente.lEndereco, tFilialCliente.lEnderecoEntrega, tFilialCliente.lEnderecoCobranca, tFilialCliente.iCodTransportadora, tFilialCliente.sObservacao, tFilialCliente.sContaContabil, tFilialCliente.iVendedor, tFilialCliente.dComissaoVendas, tFilialCliente.iRegiao, tFilialCliente.iFreqVisitas, tFilialCliente.dtDataUltVisita, tFilialCliente.iCodCobrador, tFilialCliente.sInscricaoSuframa, tFilialCliente.sRG, objCliente.lCodigoLoja, FILIAL_MATRIZ)
        If lErro <> AD_SQL_SUCESSO Then gError 118713
    Else
        lErro = Comando_ExecutarPos(alComando(3), "SELECT CGC, InscricaoEstadual, InscricaoMunicipal, Endereco, EnderecoEntrega, EnderecoCobranca, CodTransportadora, Observacao, ContaContabil, Vendedor, ComissaoVendas, Regiao, FreqVisitas, DataUltVisita, CodCobrador,InscricaoSuframa, RG FROM  FiliaisClientes WHERE CodCliente = ? AND CodFilial = ?", 0, _
            tFilialCliente.sCgc, tFilialCliente.sInscricaoEstadual, tFilialCliente.sInscricaoMunicipal, tFilialCliente.lEndereco, tFilialCliente.lEnderecoEntrega, tFilialCliente.lEnderecoCobranca, tFilialCliente.iCodTransportadora, tFilialCliente.sObservacao, tFilialCliente.sContaContabil, tFilialCliente.iVendedor, tFilialCliente.dComissaoVendas, tFilialCliente.iRegiao, tFilialCliente.iFreqVisitas, tFilialCliente.dtDataUltVisita, tFilialCliente.iCodCobrador, tFilialCliente.sInscricaoSuframa, tFilialCliente.sRG, objCliente.lCodigo, FILIAL_MATRIZ)
        If lErro <> AD_SQL_SUCESSO Then gError 118714
    End If

    'Verifica se filial cliente existe
    lErro = Comando_BuscarPrimeiro(alComando(3))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118715

    If lErro = AD_SQL_SEM_DADOS Then gError 118716

    If tFilialCliente.lEndereco <> 0 Then

        objEndereco.lCodigo = tFilialCliente.lEndereco
        
    Else
    
        lErro = CF("Endereco_Automatico", tFilialCliente.lEndereco)
        If lErro <> SUCESSO Then gError 126016
            
        objEndereco.lCodigo = tFilialCliente.lEndereco
    
    End If

    lErro = CF("Endereco_Grava", objEndereco)
    If lErro <> SUCESSO Then gError 118717

    'Atualiza a tabela de Clientes
    lErro = Comando_ExecutarPos(alComando(2), "UPDATE Clientes SET RazaoSocial = ?, NomeReduzido = ?, Ativo = ?", alComando(0), _
        objCliente.sRazaoSocial, objCliente.sNomeReduzido, objCliente.iAtivo)
    If lErro <> AD_SQL_SUCESSO Then gError 118718

    'Atualiza a tabela de FiliaisClientes
    lErro = Comando_ExecutarPos(alComando(4), "UPDATE FiliaisClientes SET CGC = ?, RG=?, Ativo = ?, Endereco = ?", alComando(3), _
        objCliente.sCgc, objCliente.sRG, objCliente.iAtivo, objEndereco.lCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 118719

    'Fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Back_Cliente_Alterar = SUCESSO

    Exit Function

Erro_Back_Cliente_Alterar:

    Back_Cliente_Alterar = gErr

    Select Case gErr

        Case 118701
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 118702, 118703, 118704, 118706, 118707
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CLIENTES", gErr)
        
        Case 118705
            Call Rotina_Erro(vbOKOnly, "ERRO_CLIENTE_NAO_CADASTRADO_2", gErr)
        
        Case 118708
            Call Rotina_Erro(vbOKOnly, "ERRO_NOMEREDUZIDO_INVALIDO", gErr)
        
        Case 118709, 118711, 118712, 118717, 126016
        
        Case 118710
            Call Rotina_Erro(vbOKOnly, "ERRO_PAIS_NAO_CADASTRADO", gErr, objPais.iCodigo)
            
        Case 118713, 118714, 118715
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIAISCLIENTES2", gErr)
            
        Case 118716
            Call Rotina_Erro(vbOKOnly, "ERRO_FILIALCLIENTE_NAO_EXISTENTE", gErr)
        
        Case 118718
            Call Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_CLIENTE", gErr, lCodigoCliente)

        Case 118719
            Call Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_FILIAISCLIENTES", gErr)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151315)

    End Select

    'Fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Registro_Back_FilialCliente(ByVal colRegistro As Collection, sArquivo As String, lRegistro As Long, ByVal iOperacao As Integer) As Long
'Trata o registro de FilialCliente e coloca os dados no bd do backoffice. sArquivo contem o nome do arquivo em que sRegistro foi lido.
'iRegistro é o numero do registro.

Dim iPosAtual As Integer
Dim iPosFimAtual As Integer
Dim sRegistro As String
Dim iRegistroCol As Integer
Dim objFilialCliente As New ClassFilialCliente
Dim objEndereco As New ClassEndereco
Dim lErro As Long

On Error GoTo Erro_Registro_Back_FilialCliente

    sRegistro = colRegistro.Item(1)

    iPosFimAtual = InStr(sRegistro, Chr(vbKeyEscape))

    'guarda as infos de FilialCliente
    lErro = CF("Back_FilialCliente", iPosAtual, iPosFimAtual, sRegistro, objFilialCliente, objEndereco)
    If lErro <> SUCESSO Then gError 118720

    Select Case iOperacao

        Case INCLUSAO_FILIALCLIENTE
            'inclui as infos de FilialCliente
            lErro = CF("Back_FilialCliente_Incluir", objFilialCliente, objEndereco)
            If lErro <> SUCESSO Then gError 118721

        Case ALTERACAO_FILIALCLIENTE
            'altera as infos de FilialCliente
            lErro = CF("Back_FilialCliente_Alterar", objFilialCliente, objEndereco)
            If lErro <> SUCESSO Then gError 118722

    End Select

    Registro_Back_FilialCliente = SUCESSO

    Exit Function

Erro_Registro_Back_FilialCliente:

    Registro_Back_FilialCliente = gErr

    Select Case gErr

        Case 118720, 118721, 118722

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151316)

    End Select

    Exit Function

End Function

Function Back_FilialCliente(iPosAtual As Integer, iPosFimAtual As Integer, sRegistro As String, objFilialCliente As ClassFilialCliente, objEndereco As ClassEndereco) As Long
'le as infos de FilialCliente

On Error GoTo Erro_Back_FilialCliente
       
    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objFilialCliente.lCodCliente = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objFilialCliente.iCodFilial = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objFilialCliente.lCodClienteLoja = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objFilialCliente.iCodFilialLoja = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objFilialCliente.sCgc = CStr(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objFilialCliente.sNome = CStr(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objFilialCliente.sRG = CStr(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objFilialCliente.iFilialEmpresaLoja = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objFilialCliente.iAtivo = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objEndereco.iCodigoPais = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objEndereco.lCodigo = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objEndereco.sBairro = CStr(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objEndereco.sCEP = CStr(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objEndereco.sCidade = CStr(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objEndereco.sContato = CStr(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objEndereco.sEmail = CStr(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objEndereco.sEndereco = CStr(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objEndereco.sFax = CStr(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objEndereco.sSiglaEstado = CStr(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objEndereco.sTelefone1 = CStr(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objEndereco.sTelefone2 = CStr(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    Back_FilialCliente = SUCESSO

    Exit Function

Erro_Back_FilialCliente:

    Back_FilialCliente = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151317)

    End Select

    Exit Function

End Function

Function Back_FilialCliente_Incluir(objFilialCliente As ClassFilialCliente, objEndereco As ClassEndereco) As Long
'inclui uma FilialCliente

Dim lErro As Long
Dim alComando(0 To 3) As Long
Dim iIndice As Integer
Dim iCodigo As Integer
Dim objClienteHistorico As New ClassClienteHistorico
Dim objPais As New ClassPais
Dim sNome As String
Dim sNome1 As String
Dim sNome2 As String
Dim objCliente As New ClassCliente
Dim lCodEndereco As Long
Dim lCodCliente As Long
Dim iFilial As Integer

On Error GoTo Erro_Back_FilialCliente_Incluir

    'Abertura dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 118723
    Next
    
    If objFilialCliente.iCodFilial <> 0 Then

        'Procura a filialcliente em questao pelo codigo do filial
        lErro = Comando_Executar(alComando(2), "SELECT CodCliente, CodFilial FROM FiliaisClientes WHERE CodCliente=? AND CodFilial=?", lCodCliente, iFilial, objFilialCliente.lCodCliente, objFilialCliente.iCodFilial)
        If lErro <> AD_SQL_SUCESSO Then gError 118985

    Else

        If objFilialCliente.lCodCliente <> 0 Then
        
            'Procura pela filial cliente em questao pelo CodFilialLoja
            lErro = Comando_Executar(alComando(2), "SELECT CodCliente, CodFilialLoja FROM FiliaisClientes WHERE FilialEmpresaLoja=? AND CodCliente=? AND CodFilialLoja=? ", lCodCliente, iFilial, objFilialCliente.iFilialEmpresaLoja, objFilialCliente.lCodCliente, objFilialCliente.iCodFilialLoja)
            If lErro <> AD_SQL_SUCESSO Then gError 117614
        

        Else
        
            'Procura pela filial cliente em questao pelo CodFilialLoja
            lErro = Comando_Executar(alComando(2), "SELECT CodClienteLoja, CodFilialLoja FROM FiliaisClientes WHERE FilialEmpresaLoja=? AND CodClienteLoja=? AND CodFilialLoja=? ", lCodCliente, iFilial, objFilialCliente.iFilialEmpresaLoja, objFilialCliente.lCodClienteLoja, objFilialCliente.iCodFilialLoja)
            If lErro <> AD_SQL_SUCESSO Then gError 118986

        End If

    End If

    'Tenta ler a filial cliente
    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118987

    'se encontrou o registro referente a filial cliente ==> erro
    If lErro = AD_SQL_SUCESSO Then gError 118988
    
    'Tenta ler a filial cliente
    lErro = Comando_LockShared(alComando(2))
    If lErro <> AD_SQL_SUCESSO Then gError 117600
    
    If objFilialCliente.lCodCliente <> 0 Then
    
        'Procura pelo cliente em questao pelo CodFilialLoja
        lErro = Comando_Executar(alComando(3), "SELECT Codigo FROM Clientes WHERE Codigo=? ", lCodCliente, objFilialCliente.lCodCliente)
        If lErro <> AD_SQL_SUCESSO Then gError 117599
    
    Else
    
        'Procura pelo cliente em questao pelo CodFilialLoja
        lErro = Comando_Executar(alComando(3), "SELECT Codigo FROM Clientes WHERE CodigoLoja=? ", lCodCliente, objFilialCliente.lCodClienteLoja)
        If lErro <> AD_SQL_SUCESSO Then gError 119017
    
    End If
    
    'Tenta ler a filial cliente
    lErro = Comando_BuscarPrimeiro(alComando(3))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 119018

    'se naum encontrou o registro referente ao cliente ==> erro
    If lErro = AD_SQL_SEM_DADOS Then gError 119019

    'Tenta ler a filial cliente
    lErro = Comando_LockShared(alComando(3))
    If lErro <> AD_SQL_SUCESSO Then gError 117601

    'Gera código automático de Filial
    lErro = CF("FiliaisClientes_Automatico_EmTrans", lCodCliente, iCodigo)
    If lErro <> SUCESSO Then gError 118724

    objFilialCliente.iCodFilial = iCodigo
    sNome = objFilialCliente.sNome
    sNome1 = objFilialCliente.sNome

    lErro = AD_SQL_SUCESSO

    Do While lErro = AD_SQL_SUCESSO

        If objFilialCliente.lCodCliente = 0 Then

            'Procura por uma outra Filial Cliente com o mesmo Nome Reduzido para o mesmo cliente
            lErro = Comando_Executar(alComando(0), "SELECT CodFilial FROM FiliaisClientes WHERE CodCliente=? AND Nome=?", iCodigo, objFilialCliente.lCodCliente, sNome)
            If lErro <> AD_SQL_SUCESSO Then gError 118725

        Else

            'Procura por uma outra Filial Cliente com o mesmo Nome Reduzido para o mesmo cliente
            lErro = Comando_Executar(alComando(0), "SELECT CodFilial FROM FiliaisClientes WHERE FilialEmpresaLoja = ? AND CodClienteLoja=? AND Nome=?", iCodigo, objFilialCliente.iFilialEmpresaLoja, objFilialCliente.lCodClienteLoja, sNome)
            If lErro <> AD_SQL_SUCESSO Then gError 118726

        End If

        'Tenta ler o código deste Cliente
        lErro = Comando_BuscarPrimeiro(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118727

        'se já existe uma filial cliente com este nome ==> tenta acoplar a filial
        If lErro = AD_SQL_SUCESSO Then

            If Len(sNome) + Len(CStr(objFilialCliente.iFilialEmpresaLoja)) + 1 > STRING_FILIAL_CLIENTE_NOME Then

                'guarda o nome da filial antes de colocar os sufixos
                sNome2 = sNome1

                'se o tamanho do nome que restar for menor que 1 caracter ==> erro
                If Len(sNome1) - (Len(CStr(objFilialCliente.iFilialEmpresaLoja)) + 1) < 1 Then gError 118728

                'guarda o nome da filial cliente sem os sufixos
                sNome1 = left(sNome1, Len(sNome1) - (Len(CStr(objFilialCliente.iFilialEmpresaLoja)) + 1))

                'guarda o nome com os sufixos
                sNome = sNome1

            End If

            sNome = sNome & "_" & CStr(objFilialCliente.iFilialEmpresaLoja)

        End If

    Loop

    'Atualiza os dados para futura gravacao de histórico
    With objClienteHistorico

        .dtDataAtualizacao = Date
        .iFilialCliente = objFilialCliente.iCodFilial
        .lCodigo = objFilialCliente.lCodCliente
        .sCgc = objFilialCliente.sCgc
        .sInscricaoEstadual = objFilialCliente.sInscricaoEstadual
        .sInscricaoMunicipal = objFilialCliente.sInscricaoMunicipal
        .iAtivo = objFilialCliente.iAtivo
        .lCodigoLoja = objFilialCliente.lCodClienteLoja
        .iFilialEmpresaLoja = objFilialCliente.iFilialEmpresaLoja
        .iCodFilialLoja = objFilialCliente.iCodFilialLoja
        .sBairro = objEndereco.sBairro
        .sCEP = objEndereco.sCEP
        .sCidade = objEndereco.sCidade
        .sEndereco = objEndereco.sEndereco
        .sUF = objEndereco.sSiglaEstado

        objCliente.lCodigoLoja = objFilialCliente.lCodClienteLoja
        objCliente.lCodigo = objFilialCliente.lCodCliente

        lErro = CF("Cliente_Le", objCliente)
        If lErro <> SUCESSO And lErro <> 12293 Then gError 118730

        'Verifica se Cliente nao esta cadastrado
        If lErro = 12293 Then gError 118731

        .sRazaoSocial = objCliente.sRazaoSocial

        'Le o nome do Pais com o codigo no obj
        objPais.iCodigo = objEndereco.iCodigoPais

        lErro = CF("Paises_Le", objPais)
        If lErro <> SUCESSO And lErro <> 47876 Then gError 118732

        'Pais não está cadastrado - --- -> Erro
        If lErro = 47876 Then gError 118733

        .sPais = objPais.sNome

    End With

    'FAZ A GRAVACAO DO HISTORICO
    lErro = CF("ClienteHistorico_Grava", objClienteHistorico)
    If lErro <> SUCESSO Then gError 118734

    lErro = CF("Endereco_Automatico", lCodEndereco)
    If lErro <> SUCESSO Then gError 118735

    objEndereco.lCodigo = lCodEndereco
        
    lErro = CF("Endereco_Grava", objEndereco)
    If lErro <> SUCESSO Then gError 118736
    
    objFilialCliente.lEndereco = objEndereco.lCodigo
    
    'Insere a FilialCliente na tabela FiliaisClientes
    lErro = Comando_Executar(alComando(1), "INSERT INTO FiliaisClientes (CodCliente,CodFilial,Nome,CGC,InscricaoEstadual,InscricaoMunicipal,Endereco,EnderecoEntrega,EnderecoCobranca,CodTransportadora,Observacao,ContaContabil,Vendedor,ComissaoVendas,Regiao,FreqVisitas,DataUltVisita,CodCobrador,TipoFrete,InscricaoSuframa,RG, CodFilialLoja, FilialEmpresaLoja, CodClienteLoja, Ativo) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
    objFilialCliente.lCodCliente, objFilialCliente.iCodFilial, objFilialCliente.sNome, objFilialCliente.sCgc, objFilialCliente.sInscricaoEstadual, objFilialCliente.sInscricaoMunicipal, objFilialCliente.lEndereco, objFilialCliente.lEnderecoCobranca, objFilialCliente.lEnderecoEntrega, objFilialCliente.iCodTransportadora, objFilialCliente.sObservacao, objFilialCliente.sContaContabil, objFilialCliente.iVendedor, objFilialCliente.dComissaoVendas, objFilialCliente.iRegiao, objFilialCliente.iFreqVisitas, objFilialCliente.dtDataUltVisita, objFilialCliente.iCodCobrador, objFilialCliente.iTipoFrete, objFilialCliente.sInscricaoSuframa, objFilialCliente.sRG, objFilialCliente.iCodFilialLoja, objFilialCliente.iFilialEmpresaLoja, objFilialCliente.lCodClienteLoja, objFilialCliente.iAtivo)
    If lErro <> AD_SQL_SUCESSO Then gError 118737

    'Fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Back_FilialCliente_Incluir = SUCESSO

    Exit Function

Erro_Back_FilialCliente_Incluir:

    Back_FilialCliente_Incluir = gErr

    Select Case gErr

        Case 117600
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_FILIAISCLIENTES", Err, lCodCliente, iFilial)

        Case 117601
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CLIENTES", Err, lCodCliente)

        Case 117614, 118725, 118726, 118727, 118985, 118986, 118987
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIAISCLIENTES2", Err)

        Case 118723
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 118724, 118729, 118730, 118732, 118734, 118735, 118736
        
        Case 118728
            Call Rotina_Erro(vbOKOnly, "ERRO_NOMEREDUZIDO_INVALIDO", gErr)
        
        Case 118731, 119019
            Call Rotina_Erro(vbOKOnly, "ERRO_CLIENTE_NAO_CADASTRADO", gErr, objFilialCliente.lCodCliente)
        
        Case 118733
            Call Rotina_Erro(vbOKOnly, "ERRO_PAIS_NAO_CADASTRADO", gErr, objPais.iCodigo)
        
        Case 118737
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_FILIAISCLIENTES", Err)
        
        Case 118988
            Call Rotina_Erro(vbOKOnly, "ERRO_FILIALCLIENTE_EXISTENTE", gErr, iFilial, lCodCliente)
        
        Case 119017, 119018
            Call Rotina_Erro(vbOKOnly, "ERRO_CLIENTE_NAO_CADASTRADO_2", gErr)
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151318)

    End Select

    'Fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Back_FilialCliente_Alterar(objFilialCliente As ClassFilialCliente, objEndereco As ClassEndereco) As Long
'altera os dados de uma FilialCliente

Dim lErro As Long
Dim alComando(0 To 4) As Long
Dim iCodigo As Long
Dim lCodCliente As Long
Dim iFilialCli As Integer
Dim sNome As String
Dim sNome1 As String
Dim sNome2 As String
Dim objClienteHistorico As New ClassClienteHistorico
Dim objPais As New ClassPais
Dim lEndereco As Long
Dim iIndice As Integer
Dim sNomeReduzido As String

On Error GoTo Erro_Back_FilialCliente_Alterar

    'Abertura dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 118739
    Next

    sNome = String(STRING_FILIAL_CLIENTE_NOME, 0)

    If objFilialCliente.iCodFilial <> 0 Then

        'Procura a filialcliente em questao pelo codigo do filial
        lErro = Comando_Executar(alComando(0), "SELECT Nome, Endereco, CodCliente, CodFilial FROM FiliaisClientes WHERE CodCliente=? AND CodFilial=?", sNome, lEndereco, lCodCliente, iFilialCli, objFilialCliente.lCodCliente, objFilialCliente.iCodFilial)
        If lErro <> AD_SQL_SUCESSO Then gError 118740

    Else

        If objFilialCliente.lCodCliente <> 0 Then

            'Procura pela filial cliente em questao pelo CodFilialLoja
            lErro = Comando_Executar(alComando(0), "SELECT Nome, Endereco, CodCliente, CodFilial FROM FiliaisClientes WHERE FilialEmpresaLoja = ?, CodCliente=? AND CodFilialLoja=? ", sNomeReduzido, lEndereco, lCodCliente, iFilialCli, objFilialCliente.iFilialEmpresaLoja, objFilialCliente.lCodCliente, objFilialCliente.iCodFilialLoja)
            If lErro <> AD_SQL_SUCESSO Then gError 118741

        Else

            'Procura pela filial cliente em questao pelo CodFilialLoja
            lErro = Comando_Executar(alComando(0), "SELECT Nome, Endereco, CodCliente, CodFilial FROM FiliaisClientes WHERE FilialEmpresaLoja = ?, CodClienteLoja=? AND CodFilialLoja=? ", sNomeReduzido, lEndereco, lCodCliente, iFilialCli, objFilialCliente.iFilialEmpresaLoja, objFilialCliente.lCodClienteLoja, objFilialCliente.iCodFilialLoja)
            If lErro <> AD_SQL_SUCESSO Then gError 118741

        End If

    End If

    'Tenta ler a filial cliente
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118742

    'se nao encontrou o registro referente a filial cliente ==> erro
    If lErro = AD_SQL_SEM_DADOS Then gError 118743

    'Tenta ler a filial cliente
    lErro = Comando_LockShared(alComando(2))
    If lErro <> AD_SQL_SUCESSO Then gError 117602

    If sNome <> objFilialCliente.sNome Then

        sNome = objFilialCliente.sNome
        sNome1 = objFilialCliente.sNome

        lErro = AD_SQL_SUCESSO

        Do While lErro = AD_SQL_SUCESSO

            If objFilialCliente.lCodCliente = 0 Then

                'Procura por uma outra Filial Cliente com o mesmo Nome Reduzido para o mesmo cliente
                lErro = Comando_Executar(alComando(0), "SELECT CodFilial FROM FiliaisClientes WHERE CodCliente=? AND Nome=?", iCodigo, objFilialCliente.lCodCliente, sNome)
                If lErro <> AD_SQL_SUCESSO Then gError 118744


            Else

                'Procura por uma outra Filial Cliente com o mesmo Nome Reduzido para o mesmo cliente
                lErro = Comando_Executar(alComando(0), "SELECT CodFilial FROM FiliaisClientes WHERE FilialEmpresaLoja=? AND CodClienteLoja=? AND Nome=?", iCodigo, objFilialCliente.iFilialEmpresaLoja, objFilialCliente.lCodClienteLoja, sNome)
                If lErro <> AD_SQL_SUCESSO Then gError 118745

            End If

            'Tenta ler o código deste Cliente
            lErro = Comando_BuscarPrimeiro(alComando(0))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 118746

            'se já existe uma filial cliente com este nome ==> tenta acoplar a filial
            If lErro = AD_SQL_SUCESSO Then

                If Len(sNome) + Len(CStr(objFilialCliente.iFilialEmpresaLoja)) + 1 > STRING_FILIAL_CLIENTE_NOME Then

                    'guarda o nome da filial antes de colocar os sufixos
                    sNome2 = sNome1

                    'se o tamanho do nome que restar for menor que 1 caracter ==> erro
                    If Len(sNome1) - (Len(sNome) + Len(CStr(objFilialCliente.iFilialEmpresaLoja)) + 1 - STRING_FILIAL_CLIENTE_NOME) < 1 Then gError 118747

                    'guarda o nome da filial cliente sem os sufixos
                    sNome1 = left(sNome1, Len(sNome1) - (Len(sNome) + Len(CStr(objFilialCliente.iFilialEmpresaLoja)) + 1 - STRING_FILIAL_CLIENTE_NOME))

                    'guarda o nome com os sufixos
                    sNome = sNome1 & right(sNome, Len(sNome) - Len(sNome2))

                End If

                sNome = sNome & "_" & CStr(objFilialCliente.iFilialEmpresaLoja)

            End If

        Loop

        objFilialCliente.sNome = sNome

    End If

    'Atualiza os dados para futura gravacao de histórico
    With objClienteHistorico

        .dtDataAtualizacao = Date
        .iFilialCliente = FILIAL_MATRIZ
        .lCodigo = objFilialCliente.lCodCliente
        .sCgc = objFilialCliente.sCgc
        .sInscricaoEstadual = objFilialCliente.sInscricaoEstadual
        .sInscricaoMunicipal = objFilialCliente.sInscricaoMunicipal
        .sRazaoSocial = objFilialCliente.sRazaoSocialCli
        .sEndereco = objEndereco.sEndereco
        .sBairro = objEndereco.sBairro
        .sCEP = objEndereco.sCEP
        .sCidade = objEndereco.sCidade
        .sUF = objEndereco.sSiglaEstado
        .iAtivo = objFilialCliente.iAtivo
        .lCodigoLoja = objFilialCliente.lCodClienteLoja
        .iFilialEmpresaLoja = objFilialCliente.iFilialEmpresaLoja

        'Le o nome do Pais com o codigo no obj
        objPais.iCodigo = objEndereco.iCodigoPais

        lErro = CF("Paises_Le", objPais)
        If lErro <> SUCESSO And lErro <> 47876 Then gError 118749

        'Pais não está cadastrado - --- -> Erro
        If lErro = 47876 Then gError 118750

        .sPais = objPais.sNome

    End With

    'FAZ A GRAVACAO DO HISTORICO
    lErro = CF("ClienteHistorico_Grava", objClienteHistorico)
    If lErro <> SUCESSO Then gError 118751

    If lEndereco <> 0 Then

        objEndereco.lCodigo = lEndereco
        
    Else
    
        lErro = CF("Endereco_Automatico", lEndereco)
        If lErro <> SUCESSO Then gError 126014
            
        objEndereco.lCodigo = lEndereco
    
    End If

    lErro = CF("Endereco_Grava", objEndereco)
    If lErro <> SUCESSO Then gError 118752

    'Atualiza a tabela de FiliaisClientes
    lErro = Comando_ExecutarPos(alComando(4), "UPDATE FiliaisClientes SET Nome = ? AND CGC = ?, RG=?, Ativo = ?", alComando(3), _
        objFilialCliente.sNome, objFilialCliente.sCgc, objFilialCliente.sRG, objFilialCliente.iAtivo)
    If lErro <> AD_SQL_SUCESSO Then gError 118753

    'Fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Back_FilialCliente_Alterar = SUCESSO

    Exit Function

Erro_Back_FilialCliente_Alterar:

    Back_FilialCliente_Alterar = gErr

    Select Case gErr

        Case 117602
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_FILIAISCLIENTES", Err, lCodCliente, objFilialCliente.iCodFilial)

        Case 118739
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", Err)
        
        Case 118740, 118741, 118742, 118744, 118745, 118746
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIAISCLIENTES2", Err)
        
        Case 118743
            Call Rotina_Erro(vbOKOnly, "ERRO_FILIALCLIENTE_NAO_EXISTENTE", gErr)
        
        Case 118747
            Call Rotina_Erro(vbOKOnly, "ERRO_NOMEREDUZIDO_INVALIDO", gErr)
        
        Case 118748, 118749, 118751, 118752, 126014
        
        Case 118750
            Call Rotina_Erro(vbOKOnly, "ERRO_PAIS_NAO_CADASTRADO", gErr, objPais.iCodigo)
                
        Case 118753
            Call Rotina_Erro(vbOKOnly, "ERRO_MODIFICACAO_FILIAISCLIENTES", Err)
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151319)

    End Select

    'Fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Cheque_Grava(ByVal objCheque As ClassChequePre, colCheque As Collection) As Long
'Grava os Cheques especificados  e altera o valor do nao especificado ou exlclui

Dim lErro As Long
Dim iIndice As Integer
Dim lTransacao As Long
Dim alComando(1 To 2) As Long
Dim objCheque1 As ClassChequePre
Dim tCheque As typeChequePre
Dim lSequencial As Long
Dim lSeqLojaNovo As Long
Dim lSeqBackNovo As Long
Dim dValorTotal As Double
Dim objTipoMeioPagtoLojaFilial As New ClassTMPLojaFilial
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim objMovCaixa As New ClassMovimentoCaixa
Dim objLog As New ClassLog
Dim colMovCaixa As New Collection
Dim lNumMovto As Long

On Error GoTo Erro_Cheque_Grava

    'Abre a Transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 105052
    
    'Inicia a Abertura de o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 105056
    Next
    
    'se estiver operando no caixa central
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then

        lSequencial = objCheque.lSequencialLoja

        'consulta  pelo sequencialloja e filialEmpresaloja
        lErro = Comando_ExecutarPos(alComando(1), "SELECT NumIntCheque, NumMovtoCaixa , Valor, NaoEspecificado, Localizacao FROM ChequePre WHERE SequencialLoja = ? AND FilialEmpresaLoja = ? AND Status <> ?", 0, tCheque.lNumIntCheque, tCheque.lNumMovtoCaixa, tCheque.dValor, tCheque.iNaoEspecificado, tCheque.iLocalizacao, objCheque.lSequencialLoja, objCheque.iFilialEmpresaLoja, STATUS_EXCLUIDO)
        If lErro <> AD_SQL_SUCESSO Then gError 105054
        
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 105055
        
        If lErro = AD_SQL_SEM_DADOS Then gError 126049
        
        If tCheque.iLocalizacao <> CHEQUEPRE_LOCALIZACAO_LOJA Then gError 105075
        
    Else

        lSequencial = objCheque.lSequencialBack

        lErro = Comando_ExecutarPos(alComando(1), "SELECT NumIntCheque, NumMovtoCaixa , Valor, NaoEspecificado, Localizacao FROM ChequePre WHERE SequencialBack = ? And Status <> ?", 0, tCheque.lNumIntCheque, tCheque.lNumMovtoCaixa, tCheque.dValor, tCheque.iNaoEspecificado, tCheque.iLocalizacao, objCheque.lSequencialBack, STATUS_EXCLUIDO)
        If lErro <> AD_SQL_SUCESSO Then gError 105053

        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126046
        
        If lErro = AD_SQL_SEM_DADOS Then gError 126050

        If tCheque.iLocalizacao <> CHEQUEPRE_LOCALIZACAO_BACKOFFICE Then gError 105076

    End If
    
    
    lErro = Comando_LockExclusive(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 105059
    
    'se o cheque já tiver sido especificado ==> erro
    If tCheque.iNaoEspecificado = CHEQUE_ESPECIFICADO Then gError 105060
    
    'le o cheque nao especificado em questao. Esta leitura pega campos como ECF e CupomFiscal que serao
    'necessarios para gravar os cheques especificados
    lErro = CF("Cheque_Le", objCheque)
    If lErro <> SUCESSO And lErro <> 104346 Then gError 105062
    
    If lErro = 104346 Then gError 105063
    
    For Each objCheque1 In colCheque
        
        objCheque1.iNaoEspecificado = CHEQUE_ESPECIFICADO
        objCheque1.iFilialEmpresa = objCheque.iFilialEmpresa
        objCheque1.iFilialEmpresaLoja = objCheque.iFilialEmpresaLoja
        objCheque1.iLocalizacao = objCheque.iLocalizacao
        objCheque1.iCaixa = objCheque.iCaixa
        objCheque1.iStatus = objCheque.iStatus
        objCheque1.lNumMovtoSangria = objCheque.lNumMovtoSangria
        objCheque1.lSequencialCaixa = objCheque.lSequencialCaixa
        objCheque1.lCupomFiscal = objCheque.lCupomFiscal
        objCheque1.dtDataEmissao = objCheque.dtDataEmissao
        
        'Chama a rotina que gera o sequencial
        lErro = CF("Config_ObterNumInt", "LojaConfig", "COD_PROX_CHEQUE_LOJA", lSeqLojaNovo, 1, objCheque.iFilialEmpresaLoja)
        If lErro <> SUCESSO Then gError 105066

        'preencho o sequencialLoja com o novo código gerado
        objCheque1.lSequencialLoja = lSeqLojaNovo

        'se nao estiver trabalhando no caixa central ==> tem que descobrir
        If giLocalOperacao <> LOCALOPERACAO_CAIXA_CENTRAL Then

            'Chama a rotina que gera o sequencial
            lErro = CF("Config_ObterNumInt", "CPRConfig", "COD_PROX_CHEQUE_BACKOFFICE", lSeqBackNovo, 1)
            If lErro <> SUCESSO Then gError 105067

            'preencho o sequencialLoja com o novo código gerado
            objCheque1.lSequencialBack = lSeqBackNovo
    
        End If
            
        dValorTotal = dValorTotal + objCheque1.dValor
            
        If giLocalOperacao = LOCALOPERACAO_BACKOFFICE Then
        
            objCheque1.lNumMovtoCaixa = objCheque.lNumMovtoCaixa
        
        Else
            
            'pegar o proximo numero de movimento caixa para o cheque especificado
            lErro = CF("Config_ObterNumInt", "LojaConfig", "NUM_PROX_MOVCAIXACENTRAL", lNumMovto, 1, objCheque1.iFilialEmpresaLoja)
            If lErro <> SUCESSO Then gError 105078
    
            objCheque1.lNumMovtoCaixa = lNumMovto
            
        End If
            
         'Chamar a Função que Insere o novo Cheque no banco de Dados
        lErro = CF("Cheque_Insere", objCheque1)
        If lErro <> SUCESSO Then gError 105068
            
        Set objMovCaixa = New ClassMovimentoCaixa
            
        objMovCaixa.lNumMovto = objCheque1.lNumMovtoCaixa
        objMovCaixa.iTipo = MOVIMENTOCAIXA_ENTRADA_CHEQUE_ESPECIFICACAO
            
        'insere um movimento de caixa para o cheque em questao.
        lErro = MovimentoCaixa_Insere_Cheque(objCheque1, objMovCaixa)
        If lErro <> SUCESSO Then gError 105084
        
        colMovCaixa.Add objMovCaixa
        
    Next
    
    'se o valor do cheque nao especificado for menor do que o valor dos cheques especificados ==> Erro
    If objCheque.dValor < dValorTotal Then gError 105069
    
    'se o valor do cheque nao especificado for igual ao valor dos cheques especificados ==> exclui logicamente o cheque
    If objCheque.dValor = dValorTotal Then
    
        objCheque.iStatus = STATUS_EXCLUIDO
    
        lErro = Comando_ExecutarPos(alComando(2), "UPDATE ChequePre SET Status = ?", alComando(1), objCheque.iStatus)
        If lErro <> AD_SQL_SUCESSO Then gError 105070
    
    Else
    
        objCheque.dValor = objCheque.dValor - dValorTotal
    
        lErro = Comando_ExecutarPos(alComando(2), "UPDATE ChequePre SET Valor = ?", alComando(1), objCheque.dValor)
        If lErro <> AD_SQL_SUCESSO Then gError 105071
    
    End If
    
    Set objMovCaixa = New ClassMovimentoCaixa
    
    objMovCaixa.iTipo = MOVIMENTOCAIXA_SAIDA_CHEQUE_ESPECIFICACAO
    objCheque.dValor = dValorTotal
    
    'pegar o proximo numero de movimento caixa para o cheque especificado
    lErro = CF("Config_ObterNumInt", "LojaConfig", "NUM_PROX_MOVCAIXACENTRAL", lNumMovto, 1, objCheque.iFilialEmpresaLoja)
    If lErro <> SUCESSO Then gError 126048

    objCheque.lNumMovtoCaixa = lNumMovto
    objMovCaixa.lNumMovto = lNumMovto
    
    'insere um movimento de caixa para o cheque em questao.
    lErro = MovimentoCaixa_Insere_Cheque(objCheque, objMovCaixa)
    If lErro <> SUCESSO Then gError 105086
    
    'Mover Valor dos Saldo para admMeioPagtoCondPagto.Saldo
    objAdmMeioPagtoCondPagto.dSaldo = dValorTotal

    'Vincula-se ao Meio_Pagamento_Cheque para o AdmMeioPagtoCondPagto.iAdmMeioPagto
    objAdmMeioPagtoCondPagto.iAdmMeioPagto = MEIO_PAGAMENTO_CHEQUE
    
    'Vincula-se ao Pagamento_Avista para o AdmMeioPagtoCondPagto.parcelamento
    objAdmMeioPagtoCondPagto.iParcelamento = PARCELAMENTO_AVISTA
    
    'Vincula-se FilialEmpresa a o Meio de Pagamento
    objAdmMeioPagtoCondPagto.iFilialEmpresa = objCheque.iFilialEmpresaLoja
    
    'Função para Alteração de Saldo
    lErro = CF("AdmMeioPagtoCondPagto_Altera_Saldo", objAdmMeioPagtoCondPagto)
    If lErro <> SUCESSO And lErro <> 104398 Then gError 105073
        
    'Retira o total dos Cheques Especificados do Saldo de Cheques Nao Especificados
    objTipoMeioPagtoLojaFilial.dSaldo = -dValorTotal
    objTipoMeioPagtoLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_CHEQUE
    objTipoMeioPagtoLojaFilial.iFilialEmpresa = objCheque.iFilialEmpresaLoja
    
    'Função que Serve para atualizar Saldo
    lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTipoMeioPagtoLojaFilial)
    If lErro <> SUCESSO Then gError 105072
    
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
    
        objLog.iOperacao = ESPECIFICACAO_CHEQUE
    
        'Função que Prepara para a Gravação do Log
        lErro = CF("Mover_Dados_Cheque_Log2", objCheque, objMovCaixa, colCheque, colMovCaixa, objLog)
        If lErro <> SUCESSO Then gError 105081
    
        'Função de Gravação de Log
        lErro = CF("Log_Grava", objLog)
        If lErro <> SUCESSO Then gError 105082
    
    End If
    
    'Confirma Transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 105074

    'Fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Cheque_Grava = SUCESSO

    Exit Function

Erro_Cheque_Grava:

    Cheque_Grava = gErr

    Select Case gErr

        Case 105052
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 105053, 105054, 105055, 105063, 126046
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUEPRE_LOJA", gErr, lSequencial, objCheque.iFilialEmpresaLoja)

        Case 105056
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 105057
            Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPRE_NAOENCONTRADO_CAIXACENTRAL", gErr, objCheque.iFilialEmpresaLoja, lSequencial)

        Case 105058
            Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPRE_NAOENCONTRADO_BACKOFFICE", gErr, objCheque.iFilialEmpresaLoja, lSequencial)

        Case 105059
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CHEQUEPRE1", gErr, objCheque.iFilialEmpresaLoja, lSequencial)

        Case 105060
            Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPRE_ESPECIFICADO", gErr, objCheque.iFilialEmpresaLoja, lSequencial)

        Case 105062, 105066, 105067, 105068, 105072, 105073, 105078, 105081, 105082, 105084, 105085, 105086, 126048

        Case 105069
            Call Rotina_Erro(vbOKOnly, "ERRO_VALORCHEQUES_MAIOR_NESPECIFICADO", gErr, dValorTotal, objCheque.dValor)
        
        Case 105070, 105071
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_CHEQUEPRE_LOJA", gErr, objCheque.lSequencialLoja, objCheque.iFilialEmpresaLoja)

        Case 105074
             Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case 105075, 126049
            Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPRE_NAOENCONTRADO_CAIXACENTRAL", gErr, objCheque.lSequencialLoja, objCheque.iFilialEmpresaLoja)
                
        Case 105076, 126050
            Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPRE_NAOENCONTRADO_BACKOFFICE", gErr, objCheque.lSequencialBack)
                
                
                
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151320)

    End Select

    Call Transacao_Rollback

    'Fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function MovimentoCaixa_Insere_Cheque(ByVal objCheque As ClassChequePre, ByVal objMovCaixa As ClassMovimentoCaixa, Optional ByVal iCargaLog As Integer = 0) As Long
'insere um movimento de caixa para o cheque em questao.

Dim lErro As Long
Dim lNumMovto As Long
Dim lSeq As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer
Dim objCCMovDia As ClassCCMovDia

On Error GoTo Erro_MovimentoCaixa_Insere_Cheque

    If giLocalOperacao <> LOCALOPERACAO_BACKOFFICE Or iCargaLog = CARGA_LOG_BACKOFFICE Then

        'Inicia a Abertura de o comando
        For iIndice = LBound(alComando) To UBound(alComando)
            alComando(iIndice) = Comando_Abrir()
            If alComando(iIndice) = 0 Then gError 105083
        Next
    
       If iCargaLog <> CARGA_LOG_BACKOFFICE Then
    
           'chama funcao para obter seq
           lErro = CF("Caixa_Sequencial_EmTrans", CODIGO_CAIXA_CENTRAL, objCheque.iFilialEmpresaLoja, lSeq)
           If lErro <> SUCESSO Then gError 105079
        
           objMovCaixa.lSequencial = lSeq
           
           objMovCaixa.iFilialEmpresa = objCheque.iFilialEmpresaLoja
           objMovCaixa.iCaixa = CODIGO_CAIXA_CENTRAL
           objMovCaixa.iAdmMeioPagto = MEIO_PAGAMENTO_CHEQUE
           objMovCaixa.iParcelamento = PARCELAMENTO_AVISTA
           objMovCaixa.lNumero = objCheque.lNumero
           objMovCaixa.dHora = CDbl(Time())
           objMovCaixa.dtDataMovimento = gdtDataAtual
           objMovCaixa.dValor = objCheque.dValor
           objMovCaixa.lCupomFiscal = objCheque.lCupomFiscal
           
            If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
                objMovCaixa.lNumRefInterna = objCheque.lSequencialLoja
            Else
                objMovCaixa.lNumRefInterna = objCheque.lSequencialBack
            End If
        
        End If
        
       
        'insiro na tabela de movto caixa
        lErro = Comando_Executar(alComando(1), "INSERT INTO MovimentosCaixa " & _
                                               "(FilialEmpresa, NumMovto, Caixa, Operador, Sequencial, Tipo, AdmMeioPagto, Parcelamento, TipoCartao, Numero, DataMovimento, Valor, Historico, Favorecido, CupomFiscal, NumRefInterna, MovtoTransf, MovtoEstorno, Gerente, CodConta, Hora, Transferencia, NumIntExt, NumIntDocLog, QuantLog) " & _
                                               "VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, " & _
                                               "?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", _
                                               objMovCaixa.iFilialEmpresa, objMovCaixa.lNumMovto, objMovCaixa.iCaixa, objMovCaixa.iCodOperador, objMovCaixa.lSequencial, objMovCaixa.iTipo, objMovCaixa.iAdmMeioPagto, objMovCaixa.iParcelamento, objMovCaixa.iTipoCartao, objMovCaixa.lNumero, objMovCaixa.dtDataMovimento, objMovCaixa.dValor, objMovCaixa.sHistorico, _
                                               objMovCaixa.sFavorecido, objMovCaixa.lCupomFiscal, objMovCaixa.lNumRefInterna, objMovCaixa.lMovtoTransf, objMovCaixa.lMovtoEstorno, objMovCaixa.iGerente, objMovCaixa.iCodConta, objMovCaixa.dHora, objMovCaixa.lTransferencia, objMovCaixa.lNumIntExt, objMovCaixa.lNumIntDocLog, objMovCaixa.iQuantLog)
        If lErro <> SUCESSO Then gError 105080
    
        Set objCCMovDia = New ClassCCMovDia
        
        If objMovCaixa.iTipo = MOVIMENTOCAIXA_SAIDA_CHEQUE_ESPECIFICACAO Then
        
            'preenche um objccmovdia com os dados do movimento de saque do caixa
            lErro = CF("Mover_Dados_Saque_CCMovDia", objMovCaixa, objCCMovDia)
            If lErro <> SUCESSO Then gError 105087
    
        Else
        
            'preenche um objccmovdia com os dados do movimento de deposito no caixa central
            lErro = Mover_Dados_Deposito_CCMovDia(objMovCaixa, objCCMovDia)
            If lErro <> SUCESSO Then gError 105088

        End If
    
        objCCMovDia.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_CHEQUE
    
        'adiciona o mesmo no consolidado diário
        lErro = CF("CCMovDia_Grava", objCCMovDia)
        If lErro <> SUCESSO Then gError 105089
    
        'adiciona o mesmo no consolidado anual no mês em questão
        lErro = CF("CCMov_Grava", objCCMovDia)
        If lErro <> SUCESSO Then gError 105090
    
        'Fecha o comando
        For iIndice = LBound(alComando) To UBound(alComando)
            Call Comando_Fechar(alComando(iIndice))
        Next

    End If
    
    MovimentoCaixa_Insere_Cheque = SUCESSO

    Exit Function

Erro_MovimentoCaixa_Insere_Cheque:

    MovimentoCaixa_Insere_Cheque = gErr

    Select Case gErr

        Case 105079, 105087, 105088, 105089, 105090, 126047

        Case 105080
            Call Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_MOVIMENTOSCAIXA", gErr, objMovCaixa.lNumMovto)
                
        Case 105083
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
                
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151321)

    End Select

    'Fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Mover_Dados_Cheque_Log2(ByVal objCheque As ClassChequePre, objMovCaixa As ClassMovimentoCaixa, colCheque As Collection, colMovCaixa As Collection, objLog As ClassLog) As Long
'Função que carrega o objLog para a Gravação do Log Criando uma String

Dim iIndice As Integer
Dim objCheque1 As ClassChequePre
Dim objMovCaixa1 As ClassMovimentoCaixa

    'Carrega a String concatenando todos os campos do obj separados por Caracter Escape
    objLog.sLog = CStr(objCheque.iFilialEmpresaLoja) & Chr(vbKeyEscape) & _
                            CStr(objCheque.lSequencialLoja) & Chr(vbKeyEscape) & _
                            CStr(objCheque.dValor) & Chr(vbKeyEscape) & _
                            CStr(objCheque.iStatus) & Chr(vbKeyEscape) & _
                            CStr(objMovCaixa.lNumMovto) & Chr(vbKeyEscape) & _
                            CStr(objMovCaixa.lSequencial) & Chr(vbKeyEscape) & _
                            CStr(objMovCaixa.iFilialEmpresa) & Chr(vbKeyEscape) & _
                            CStr(objMovCaixa.iCaixa) & Chr(vbKeyEscape) & _
                            CStr(objMovCaixa.iTipo) & Chr(vbKeyEscape) & _
                            CStr(objMovCaixa.iAdmMeioPagto) & Chr(vbKeyEscape) & _
                            CStr(objMovCaixa.iParcelamento) & Chr(vbKeyEscape) & _
                            CStr(objMovCaixa.lNumero) & Chr(vbKeyEscape) & _
                            CStr(objMovCaixa.dHora) & Chr(vbKeyEscape) & _
                            CStr(objMovCaixa.dtDataMovimento) & Chr(vbKeyEscape) & _
                            CStr(objMovCaixa.dValor) & Chr(vbKeyEscape) & _
                            CStr(objMovCaixa.lCupomFiscal) & Chr(vbKeyEscape) & _
                            CStr(objMovCaixa.lNumRefInterna) & Chr(vbKeyEscape)
                           
    For iIndice = 1 To colCheque.Count
    
        Set objCheque1 = colCheque.Item(iIndice)
        Set objMovCaixa1 = colMovCaixa.Item(iIndice)
                           
        objLog.sLog = objLog.sLog & Chr(vbKeyShift) & _
                            CStr(objCheque1.iBanco) & Chr(vbKeyEscape) & _
                            CStr(objCheque1.sAgencia) & Chr(vbKeyEscape) & _
                            CStr(objCheque1.sContaCorrente) & Chr(vbKeyEscape) & _
                            CStr(objCheque1.lNumero) & Chr(vbKeyEscape) & _
                            CStr(objCheque1.dtDataDeposito) & Chr(vbKeyEscape) & _
                            CStr(objCheque1.dValor) & Chr(vbKeyEscape) & _
                            CStr(objCheque1.sCPFCGC) & Chr(vbKeyEscape) & _
                            CStr(objCheque1.lNumMovtoCaixa) & Chr(vbKeyEscape) & _
                            CStr(objCheque1.iAprovado) & Chr(vbKeyEscape) & _
                            CStr(objCheque1.iNaoEspecificado) & Chr(vbKeyEscape) & _
                            CStr(objCheque1.iFilialEmpresa) & Chr(vbKeyEscape) & _
                            CStr(objCheque1.lSequencialLoja) & Chr(vbKeyEscape) & _
                            CStr(objCheque1.iFilialEmpresaLoja) & Chr(vbKeyEscape) & _
                            CStr(objCheque1.iStatus) & Chr(vbKeyEscape) & _
                            CStr(objCheque1.iCaixa) & Chr(vbKeyEscape) & _
                            CStr(objCheque1.lSequencialCaixa) & Chr(vbKeyEscape) & _
                            CStr(objCheque1.iLocalizacao) & Chr(vbKeyEscape) & _
                            CStr(objCheque1.lNumMovtoSangria) & Chr(vbKeyEscape) & _
                            CStr(objCheque1.dtDataEmissao) & Chr(vbKeyEscape)

        objLog.sLog = objLog.sLog & _
                            CStr(objMovCaixa1.lNumMovto) & Chr(vbKeyEscape) & _
                            CStr(objMovCaixa1.lSequencial) & Chr(vbKeyEscape) & _
                            CStr(objMovCaixa1.iFilialEmpresa) & Chr(vbKeyEscape) & _
                            CStr(objMovCaixa1.iCaixa) & Chr(vbKeyEscape) & _
                            CStr(objMovCaixa1.iTipo) & Chr(vbKeyEscape) & _
                            CStr(objMovCaixa1.iAdmMeioPagto) & Chr(vbKeyEscape) & _
                            CStr(objMovCaixa1.iParcelamento) & Chr(vbKeyEscape) & _
                            CStr(objMovCaixa1.lNumero) & Chr(vbKeyEscape) & _
                            CStr(objMovCaixa1.dHora) & Chr(vbKeyEscape) & _
                            CStr(objMovCaixa1.dtDataMovimento) & Chr(vbKeyEscape) & _
                            CStr(objMovCaixa1.dValor) & Chr(vbKeyEscape) & _
                            CStr(objMovCaixa1.lCupomFiscal) & Chr(vbKeyEscape)
                            
    Next
    
    'Coloca ao final da String o indicador de "Fim de String (vbKeyEnd)"
    objLog.sLog = objLog.sLog & Chr(vbKeyEnd)
    
    Mover_Dados_Cheque_Log2 = SUCESSO
    
    Exit Function
    
Erro_Mover_Dados_Cheque_Log2:

    Mover_Dados_Cheque_Log2 = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151322)

    End Select

    Exit Function

End Function

Function AdmMeioPagtoParcelamento_Automatico(ByVal iCodAdmMeioPagto As Integer, iCodigo As Integer, ByVal iFilialEmpresa As Integer) As Long
'retorna o número do proximo Parcelamento disponivel em iParcelamento em relacao ao numero do AdmMeioPagto passado em lAdmMeioPagto

Dim iIndice As Integer
Dim alComando(1 To 3) As Long
Dim lErro As Long
Dim lTransacao As Long
Dim iParcelamento As Integer

On Error GoTo Erro_AdmMeioPagtoParcelamento_Automatico

    'Abre os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 115022
    Next
'
'    lTransacao = Transacao_Abrir()
'    If lTransacao = 0 Then gError 115023

    'Seleciona o Proximo Codigo do Parcelamento , do respectivo AdmMeioPagto
    lErro = Comando_ExecutarPos(alComando(1), "SELECT ProxCodParcelamento FROM AdmMeioPagto WHERE Codigo = ? And FilialEmpresa = ?", 0, iCodigo, iCodAdmMeioPagto, iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 115024

    'le o registro com o número do próximo Parcelamento
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 115025
    
    'loca o registro que guarda o numero do Parcelamento gerado automaticamente
    lErro = Comando_LockExclusive(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 115026

    'atualiza o numero do parcelamento gerado automaticamente
    lErro = Comando_ExecutarPos(alComando(3), "UPDATE AdmMeioPagto SET ProxCodParcelamento = ?", alComando(1), iCodigo + 1)
    If lErro <> AD_SQL_SUCESSO Then gError 115027
'
'    lErro = Transacao_Commit()
'    If lErro <> AD_SQL_SUCESSO Then gError 115028

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    AdmMeioPagtoParcelamento_Automatico = SUCESSO

    Exit Function

Erro_AdmMeioPagtoParcelamento_Automatico:

    AdmMeioPagtoParcelamento_Automatico = gErr

    Select Case gErr

    Case 115022
        Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
'
'    Case 115023
'        Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

    Case 115024, 115025, 115027
        Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ADMMEIOPAGTO", gErr)

    Case 115026
        Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_ADMMEIOPAGTO", gErr)

    Case 115027
        Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_ADMMEIOPAGTO", gErr)

    Case Else
        Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151323)

    End Select
'
'    Call Transacao_Rollback
    
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function


Private Sub Mover_Dados_TransfCentral_Log(objTransfCaixa As ClassTransfCaixa, objChequeDe As ClassChequePre, objChequePara As ClassChequePre, objLog As ClassLog)


On Error GoTo Erro_Mover_Dados_TransfCentral_Log

    'preenche os dados do log com cada atributo do objMovimentoCaixa separado por vbkeyscape
    objLog.sLog = objTransfCaixa.lCodigo & Chr(vbKeyEscape)

    'preenche os dados do log com cada atributo do objMovimentoCaixa separado por vbkeyscape
    With objTransfCaixa.objMovCaixaDe
        objLog.sLog = objLog.sLog & CStr(.iFilialEmpresa) & Chr(vbKeyEscape) & _
                      CStr(.lNumMovto) & Chr(vbKeyEscape) & _
                      CStr(.iCaixa) & Chr(vbKeyEscape) & _
                      CStr(.iCodOperador) & Chr(vbKeyEscape) & _
                      CStr(.lSequencial) & Chr(vbKeyEscape) & _
                      CStr(.iTipo) & Chr(vbKeyEscape) & _
                      CStr(.iAdmMeioPagto) & Chr(vbKeyEscape) & _
                      CStr(.iParcelamento) & Chr(vbKeyEscape) & _
                      CStr(.iTipoCartao) & Chr(vbKeyEscape) & _
                      CStr(.lNumero) & Chr(vbKeyEscape) & _
                      CStr(.dtDataMovimento) & Chr(vbKeyEscape) & _
                      CStr(.dValor) & Chr(vbKeyEscape) & _
                      CStr(.lCupomFiscal) & Chr(vbKeyEscape) & _
                      CStr(.lNumRefInterna) & Chr(vbKeyEscape) & _
                      CStr(.lMovtoTransf) & Chr(vbKeyEscape) & _
                      CStr(.dHora) & Chr(vbKeyEscape) & _
                      CStr(.lTransferencia) & Chr(vbKeyEscape)

    End With

    With objTransfCaixa.objMovCaixaPara
        
        objLog.sLog = objLog.sLog & _
                      CStr(.iFilialEmpresa) & Chr(vbKeyEscape) & _
                      CStr(.lNumMovto) & Chr(vbKeyEscape) & _
                      CStr(.iCaixa) & Chr(vbKeyEscape) & _
                      CStr(.iCodOperador) & Chr(vbKeyEscape) & _
                      CStr(.lSequencial) & Chr(vbKeyEscape) & _
                      CStr(.iTipo) & Chr(vbKeyEscape) & _
                      CStr(.iAdmMeioPagto) & Chr(vbKeyEscape) & _
                      CStr(.iParcelamento) & Chr(vbKeyEscape) & _
                      CStr(.iTipoCartao) & Chr(vbKeyEscape) & _
                      CStr(.lNumero) & Chr(vbKeyEscape) & _
                      CStr(.dtDataMovimento) & Chr(vbKeyEscape) & _
                      CStr(.dValor) & Chr(vbKeyEscape) & _
                      CStr(.lCupomFiscal) & Chr(vbKeyEscape) & _
                      CStr(.lNumRefInterna) & Chr(vbKeyEscape) & _
                      CStr(.lMovtoTransf) & Chr(vbKeyEscape) & _
                      CStr(.dHora) & Chr(vbKeyEscape) & _
                      CStr(.lTransferencia) & Chr(vbKeyEscape)

    End With

    If objTransfCaixa.objMovCaixaPara.iTipo = MOVIMENTOCAIXA_ENTRADA_TRANSF_CHEQUE Then

        With objChequePara
    
                objLog.sLog = objLog.sLog & CStr(.iBanco) & Chr(vbKeyEscape) & _
                              CStr(.sAgencia) & Chr(vbKeyEscape) & _
                              CStr(.sContaCorrente) & Chr(vbKeyEscape) & _
                              CStr(.lNumero) & Chr(vbKeyEscape) & _
                              CStr(.dtDataDeposito) & Chr(vbKeyEscape) & _
                              CStr(.dValor) & Chr(vbKeyEscape) & _
                              CStr(.sCPFCGC) & Chr(vbKeyEscape) & _
                              CStr(.iAprovado) & Chr(vbKeyEscape) & _
                              CStr(.iNaoEspecificado) & Chr(vbKeyEscape) & _
                              CStr(.lSequencialLoja) & Chr(vbKeyEscape) & _
                              CStr(.iCaixa) & Chr(vbKeyEscape) & _
                              CStr(.lSequencialCaixa) & Chr(vbKeyEscape) & _
                              CStr(.iLocalizacao) & Chr(vbKeyEscape) & _
                              CStr(.dtDataDeposito) & Chr(vbKeyEscape)

        End With

    End If

    objLog.sLog = objLog.sLog & Chr(vbKeyEnd)

    Exit Sub

Erro_Mover_Dados_TransfCentral_Log:

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151324)

    End Select

    Exit Sub

End Sub

Function AdmMeioPagto_Grava_Ativo(ByVal objAdmMeioPagto As ClassAdmMeioPagto) As Long
'Altera o campo ativo da administradora
'iCodigo eh parametro de INPUT que traz o codigo da administradora
'iAtivo eh parametro de INPUT que traz o novo valor do campo ativo

'Motivacao:
'   Essa funcao foi feita para que se pudesse alterar o valor do campo ativo para
'as administradoras pre-cadastradas.
'Como soh se pode mudar esse campo de tais administradoras, entao achei de bom grado
'fazer uma funcao simples que alterasse o valor desse campo.

'Obs:
'   Essa funcao leva em conta que o admmeiopagto ja existe e grava no log
'as informacoes que constam no bd + novo valor ativo


Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_AdmMeioPagto_Grava_Ativo

    'Abre a Transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 120032
    
    lErro = AdmMeioPagto_Grava_Ativo_Trans(objAdmMeioPagto)
    If lErro <> SUCESSO Then gError 126053
    
    'Confirma Transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 120033
        
    AdmMeioPagto_Grava_Ativo = SUCESSO

    Exit Function

Erro_AdmMeioPagto_Grava_Ativo:

    AdmMeioPagto_Grava_Ativo = gErr

    Select Case gErr

        Case 120032
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 120033
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
               
        Case 126053

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151325)

    End Select

    Call Transacao_Rollback

    Exit Function

End Function

Function AdmMeioPagto_Grava_Ativo_Trans(ByVal objAdmMeioPagto As ClassAdmMeioPagto) As Long
'Altera o campo ativo da administradora
'iCodigo eh parametro de INPUT que traz o codigo da administradora
'iAtivo eh parametro de INPUT que traz o novo valor do campo ativo

'Motivacao:
'   Essa funcao foi feita para que se pudesse alterar o valor do campo ativo para
'as administradoras pre-cadastradas.
'Como soh se pode mudar esse campo de tais administradoras, entao achei de bom grado
'fazer uma funcao simples que alterasse o valor desse campo.

'Obs:
'   Essa funcao leva em conta que o admmeiopagto ja existe e grava no log
'as informacoes que constam no bd + novo valor ativo


Dim lErro As Long
Dim iCod As Integer
Dim lComando As Long
Dim lComando2 As Long
Dim objLog As New ClassLog
Dim objAdmMeioPagtoBD As New ClassAdmMeioPagto

On Error GoTo Erro_AdmMeioPagto_Grava_Ativo_Trans

    'Abertura dos Comandos
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 120031
    
    lComando2 = Comando_Abrir()
    If lComando2 = 0 Then gError 120039
    
    'Le a administradora para fazer o lock
    lErro = Comando_ExecutarPos(lComando, "SELECT Codigo FROM AdmMeioPagto WHERE Codigo = ? AND FilialEmpresa = ? ", 0, iCod, objAdmMeioPagto.iCodigo, objAdmMeioPagto.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 104110

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 120038
   
    If lErro = AD_SQL_SEM_DADOS Then gError 105957
   
    'Sempre serah alteracao...
    objLog.iOperacao = ALTERACAO_ADMMEIOPAGTO_CAIXA_CENTRAL
    
    'Faz LockExclusive na Administradora
    lErro = Comando_LockExclusive(lComando)
    If lErro <> AD_SQL_SUCESSO Then gError 120037
    
    objAdmMeioPagtoBD.iCodigo = iCod
    objAdmMeioPagtoBD.iFilialEmpresa = objAdmMeioPagto.iFilialEmpresa
    
    lErro = Comando_ExecutarPos(lComando2, "UPDATE AdmMeioPagto SET Ativo = ?", lComando, objAdmMeioPagto.iAtivo)
    If lErro <> AD_SQL_SUCESSO Then gError 120035
    
    lErro = AdmMeioPagtoCondPagto_Grava_Ativo(objAdmMeioPagto)
    If lErro <> SUCESSO Then gError 105963
    
    objAdmMeioPagto.iTipoLog = ALTERACAO_ADMMEIOPAGTO_CAIXA_CENTRAL
    
    Call AdmMeioPagto_Carrega_Log(objLog, objAdmMeioPagto)
    
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
        'Monta Registro Para a Tabela de Log
        lErro = CF("Log_Grava", objLog)
        If lErro <> SUCESSO Then gError 120034
    End If
    
    'Fechamento do Comando
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)
    
    AdmMeioPagto_Grava_Ativo_Trans = SUCESSO

    Exit Function

Erro_AdmMeioPagto_Grava_Ativo_Trans:

    AdmMeioPagto_Grava_Ativo_Trans = gErr

    Select Case gErr

        Case 105957
            Call Rotina_Erro(vbOKOnly, "ERRO_ADMMEIOPAGTO_NAO_CADASTRADO1", gErr, objAdmMeioPagto.iFilialEmpresa, objAdmMeioPagto.iCodigo)

        Case 105963, 120034

        Case 120031, 120039
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 120032
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 120033
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
               
        Case 120035
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_ADMINISTRADORA", gErr, objAdmMeioPagto.iCodigo)

        Case 120036, 120038
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ADMMEIOPAGTO", gErr, objAdmMeioPagto.iCodigo)

        Case 120037
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_ADMMEIOPAGTO", gErr, objAdmMeioPagto.iCodigo)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151326)

    End Select

    'Fechamento do Comando
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando2)

    Exit Function

End Function


Private Function AdmMeioPagtoCondPagto_Grava_Ativo(ByVal objAdmMeioPagto As ClassAdmMeioPagto) As Long
'Altera o campo ativo do parcelamento
'iCodigo eh parametro de INPUT que traz o codigo da administradora

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim iIndice As Integer
Dim iParcelamento As Integer

On Error GoTo Erro_AdmMeioPagtoCondPagto_Grava_Ativo

    'Abertura dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 105959
    Next
    
    If objAdmMeioPagto.colCondPagtoLoja.Count = 0 Then gError 105960
    
    For Each objAdmMeioPagtoCondPagto In objAdmMeioPagto.colCondPagtoLoja

        'Atribuições de Chave Primária
        objAdmMeioPagtoCondPagto.iAdmMeioPagto = objAdmMeioPagto.iCodigo
        objAdmMeioPagtoCondPagto.iFilialEmpresa = objAdmMeioPagto.iFilialEmpresa
        
        'Lê e Seleciona os Parcelamntos Vinculados a AdmMeioPagtoCondPagto
        lErro = Comando_ExecutarPos(alComando(0), "SELECT Parcelamento FROM AdmMeioPagtoCondPagto WHERE FilialEmpresa =? AND AdmMeiopagto = ? AND Parcelamento = ? ", 0, iParcelamento, objAdmMeioPagtoCondPagto.iFilialEmpresa, objAdmMeioPagtoCondPagto.iAdmMeioPagto, objAdmMeioPagtoCondPagto.iParcelamento)
        If lErro <> AD_SQL_SUCESSO Then gError 105961

        lErro = Comando_BuscarPrimeiro(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 105962

        If lErro = AD_SQL_SEM_DADOS Then gError 105963

        'Atualiza os Dados da Administradora
        lErro = Comando_ExecutarPos(alComando(1), "UPDATE AdmMeioPagtoCondPagto SET Ativo = ?, ValorMinimo = ? ", alComando(0), objAdmMeioPagtoCondPagto.iAtivo, objAdmMeioPagtoCondPagto.dValorMinimo)
        If lErro <> AD_SQL_SUCESSO Then gError 105964

    Next
    
    'Fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    AdmMeioPagtoCondPagto_Grava_Ativo = SUCESSO

    Exit Function

Erro_AdmMeioPagtoCondPagto_Grava_Ativo:

    AdmMeioPagtoCondPagto_Grava_Ativo = gErr

    Select Case gErr
        
        Case 105959
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 105960
            Call Rotina_Erro(vbOKOnly, "ERRO_SEM_ADMMEIOPAGTOCONDPAGTO", gErr)

        Case 105961, 105962
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ADMMEIOPAGTOCONDPAGTO2", gErr, objAdmMeioPagtoCondPagto.iFilialEmpresa, objAdmMeioPagtoCondPagto.iAdmMeioPagto, objAdmMeioPagtoCondPagto.iParcelamento)
        
        Case 105963
            Call Rotina_Erro(vbOKOnly, "ERRO_ADMMEIOPAGTOCONDPAGTO_INEXISTENTE1", gErr, objAdmMeioPagtoCondPagto.iFilialEmpresa, objAdmMeioPagtoCondPagto.iAdmMeioPagto, objAdmMeioPagtoCondPagto.iParcelamento)

        Case 105964
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_ADMMEIOPAGTOCONDPAGTO", gErr, objAdmMeioPagtoCondPagto.iParcelamento, objAdmMeioPagtoCondPagto.iAdmMeioPagto)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151327)

    End Select

    'Fechamento dos Comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function


Function ItensCF_Gravar_Venda(ByVal objCupomFiscal As ClassCupomFiscal, objLog As ClassLog, ByVal objCliente As ClassCliente, ByVal iFilialCli As Integer, ByVal colComissoes As Collection, ByVal objMovEstoque As ClassMovEstoque) As Long
'gravar os itens do cupom fiscal contidos na colecao.
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lNumAuto As Long
Dim lErro As Long
Dim alComando(1 To 13) As Long
Dim iIndice As Integer
Dim objItens As ClassItemCupomFiscal
Dim iItem As Integer
Dim iFilialEmpresa As Integer
Dim objProduto As New ClassProduto
Dim dFator As Double
Dim iNumVendas As Integer
Dim sMes As String
Dim dQuantVenda As Double
Dim lCodigo As Long
Dim dQuantEstoque As Double
Dim colInsumos As Collection
Dim colRastroMovto As Collection
Dim sNomeReduzidoAlmox As String
Dim iAlmoxarifadoPadrao As Integer
Dim objItemMovEstoque As ClassItemMovEstoque
Dim colItensRomaneioGrade As New Collection
Dim objItensRomaneio As ClassItemRomaneioGrade
Dim objProduto1 As New ClassProduto
Dim objKitVenda As New ClassKitVenda
Dim sProdAux As String, bAchouProd As Boolean

On Error GoTo Erro_ItensCF_Gravar_Venda

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 112119
    Next
    
    'gera um novo número interno de itens de cupom fiscal
    lErro = CF("Config_ObterNumInt", "LojaConfig", "NUM_PROX_ITEM_CUPOMFISCAL", lNumAuto, objCupomFiscal.colItens.Count, objCupomFiscal.iFilialEmpresa)
    If lErro <> SUCESSO Then gError 112120

    iItem = 1

''    objMovEstoque.dtData = Date
''    objMovEstoque.dtHora = CDbl(Time)
    objMovEstoque.dtData = objCupomFiscal.dtDataEmissao
    objMovEstoque.dtHora = objCupomFiscal.dHoraEmissao
    objMovEstoque.iFilialEmpresa = objCupomFiscal.iFilialEmpresa
    objMovEstoque.sDocOrigem = "CF"

    For Each objItens In objCupomFiscal.colItens

        If objItens.iStatus <> STATUS_CANCELADO Then

            objItens.lNumIntDoc = lNumAuto
            objItens.iItem = iItem
            objItens.lNumIntCupom = objCupomFiscal.lNumIntDoc
    
            iNumVendas = 1
    
            For iIndice = 1 To iItem - 1
                If objCupomFiscal.colItens.Item(iIndice).sProduto = objItens.sProduto And objCupomFiscal.colItens.Item(iIndice).iStatus <> STATUS_CANCELADO Then
                    iNumVendas = 0
                    Exit For
                    
                End If
            Next
            
            objProduto.sCodigo = objItens.sProduto
    
            'Lê na tabela de Produto a UM de venda
            lErro = CF("Produto_Le", objProduto)
            If lErro <> SUCESSO And lErro <> 28030 Then gError 112122
    
            'Se não encontrar o produto ==> Erro
            If lErro = 28030 Then 'gError 112123
            
                bAchouProd = False
                
                sProdAux = String(STRING_PRODUTO, 0)
            
                lErro = Comando_Executar(alComando(12), "SELECT Codigo FROM Produtos WHERE REPLACE(Codigo,'.','') = ? ", sProdAux, objProduto.sCodigo)
                If lErro <> AD_SQL_SUCESSO Then gError 112123
    
                lErro = Comando_BuscarProximo(alComando(12))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112123
           
                If lErro = AD_SQL_SUCESSO Then bAchouProd = True
                
                If Not bAchouProd Then
                
                    sProdAux = String(STRING_PRODUTO, 0)
                
                    lErro = Comando_Executar(alComando(13), "SELECT Codigo FROM Produtos WHERE REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(Codigo,'.',''),'/',''),'\',''),'-',''),'_','') = ? ", sProdAux, objProduto.sCodigo)
                    If lErro <> AD_SQL_SUCESSO Then gError 212043
        
                    lErro = Comando_BuscarProximo(alComando(13))
                    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112123
               
                    If lErro = AD_SQL_SUCESSO Then bAchouProd = True
                    
                End If
                
                If bAchouProd Then
                
                    Set objProduto = New ClassProduto
                    objProduto.sCodigo = sProdAux
                    
                    lErro = CF("Produto_Le", objProduto)
                    If lErro <> SUCESSO And lErro <> 28030 Then gError 112123
                
                    If lErro <> SUCESSO Then bAchouProd = False
                End If
            
                If Not bAchouProd Then gError 112123
            
            End If
    
            'Obtém fator de conversão para unidade de medida de Venda
            lErro = CF("UM_Conversao", objProduto.iClasseUM, objItens.sUnidadeMed, objProduto.sSiglaUMVenda, dFator)
            If lErro <> SUCESSO Then gError 112124
    
            dQuantVenda = objItens.dQuantidade * dFator
            
            'Obtém fator de conversão para unidade de medida de Venda
            lErro = CF("UM_Conversao", objProduto.iClasseUM, objItens.sUnidadeMed, objProduto.sSiglaUMEstoque, dFator)
            If lErro <> SUCESSO Then gError 126500
    
            dQuantEstoque = objItens.dQuantidade * dFator
            
            If objCupomFiscal.iTipo = OPTION_CF Or objCupomFiscal.iStatus = STATUS_BAIXADO Then
            
                'se estiver operando caixa central + backoffice ==> atualiza o estoque, caso contrario o backoffice vai atualizar
                'If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL_BACKOFFICE Then
            
                    If objProduto.iControleEstoque <> PRODUTO_CONTROLE_SEM_ESTOQUE Then
                        Set colInsumos = New Collection
                        Set colRastroMovto = New Collection
                    
                        iAlmoxarifadoPadrao = 0
                        sNomeReduzidoAlmox = ""
                    
                        lErro = CF("AlmoxarifadoPadrao_Le_CodNomeRed", objMovEstoque.iFilialEmpresa, objProduto.sCodigo, sNomeReduzidoAlmox, iAlmoxarifadoPadrao)
                        If lErro <> SUCESSO And lErro <> 118756 Then gError 118759
                
                        Set objItemMovEstoque = objMovEstoque.colItens.Add(0, MOV_EST_CUPOM_FISCAL, 0, 0, objProduto.sCodigo, objProduto.sDescricao, objProduto.sSiglaUMEstoque, dQuantEstoque, iAlmoxarifadoPadrao, sNomeReduzidoAlmox, objItens.lNumIntCupom, "", 0, "", "", "", "", 0, colRastroMovto, colInsumos, DATA_NULA)
                
                        objItemMovEstoque.iClasseUM = objProduto.iClasseUM
                        objItemMovEstoque.iControleEstoque = objProduto.iControleEstoque
                        objItemMovEstoque.sSiglaUMEst = objProduto.sSiglaUMEstoque
                        objItemMovEstoque.iTipoNumIntDocOrigem = MOVEST_TIPONUMINTDOCORIGEM_CUPOMFISCAL
                        
                        'guarda a posicao do registro para posteriormente poder descobrir o NumIntDoc do Movimento de Estoque
                        objItens.lNumIntMovEst = objMovEstoque.colItens.Count
                        
                    ElseIf objProduto.iKitVendaComp = MARCADO Then
                        
                        lErro = CF("ProdutoKitVenda_Le_Romaneio", objProduto, colItensRomaneioGrade)
                        If lErro <> SUCESSO Then gError 180035
                        
                        objKitVenda.sProduto = objProduto.sCodigo
                        objKitVenda.sUM = objItens.sUnidadeMed
                        objKitVenda.dQuantidade = objItens.dQuantidade
                        
                        lErro = CF("ProdutoKitVenda_Atualiza_Romaneio", objProduto, objKitVenda, colItensRomaneioGrade)
                        If lErro <> SUCESSO Then gError 180036
                        
                        
                        For Each objItensRomaneio In colItensRomaneioGrade
                    
                            objProduto1.sCodigo = objItensRomaneio.sProduto
                    
                            'Lê na tabela de Produto a UM de venda
                            lErro = CF("Produto_Le", objProduto1)
                            If lErro <> SUCESSO And lErro <> 28030 Then gError 112122
                    
                            If lErro <> SUCESSO Then gError 42765 'Não encontrou
                    
                            If objProduto1.iControleEstoque <> PRODUTO_CONTROLE_SEM_ESTOQUE Then
                                Set colInsumos = New Collection
                                Set colRastroMovto = New Collection
                            
                                iAlmoxarifadoPadrao = 0
                                sNomeReduzidoAlmox = ""
                            
                                lErro = CF("AlmoxarifadoPadrao_Le_CodNomeRed", objMovEstoque.iFilialEmpresa, objProduto1.sCodigo, sNomeReduzidoAlmox, iAlmoxarifadoPadrao)
                                If lErro <> SUCESSO And lErro <> 118756 Then gError 118759
                    
                                Set objItemMovEstoque = objMovEstoque.colItens.Add(0, MOV_EST_CUPOM_FISCAL, 0, 0, objProduto1.sCodigo, objProduto1.sDescricao, objProduto1.sSiglaUMEstoque, objItensRomaneio.dQuantidade, iAlmoxarifadoPadrao, sNomeReduzidoAlmox, objItens.lNumIntCupom, "", 0, "", "", "", "", 0, colRastroMovto, colInsumos, DATA_NULA)
                    
                                objItemMovEstoque.iClasseUM = objProduto1.iClasseUM
                                objItemMovEstoque.iControleEstoque = objProduto1.iControleEstoque
                                objItemMovEstoque.sSiglaUMEst = objProduto1.sSiglaUMEstoque
                                objItemMovEstoque.iTipoNumIntDocOrigem = MOVEST_TIPONUMINTDOCORIGEM_CUPOMFISCAL
                            
                                'guarda a posicao do registro para posteriormente poder descobrir o NumIntDoc do Movimento de Estoque
                                If objItens.lNumIntMovEst = 0 Then objItens.lNumIntMovEst = objMovEstoque.colItens.Count
                                
                            End If
                                
                        Next
                        
                    End If
           
                'grava a comissao se o vendedor foi especificado
                lErro = Comissoes_Gera_Loja(objCupomFiscal, objItens, objCliente, iFilialCli, colComissoes)
                If lErro <> AD_SQL_SUCESSO Then gError 126285
    
                'End If
           
                lErro = Comando_ExecutarPos(alComando(2), "SELECT FilialEmpresa FROM SldDiaFatCx WHERE FilialEmpresa = ? AND Caixa = ? AND Data = ? AND Produto = ?", 0, iFilialEmpresa, objCupomFiscal.iFilialEmpresa, objCupomFiscal.iCodCaixa, objCupomFiscal.dtDataEmissao, objProduto.sCodigo)
                If lErro <> AD_SQL_SUCESSO Then gError 112125
        
                lErro = Comando_BuscarPrimeiro(alComando(2))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112126
        
                If lErro = AD_SQL_SUCESSO Then
        
                    lErro = Comando_ExecutarPos(alComando(3), "UPDATE SldDiaFatCx SET ValorFaturado = ValorFaturado + ?, QuantFaturada = QuantFaturada + ?, NumVendas = NumVendas + ?", alComando(2), (objItens.dPrecoUnitario * objItens.dQuantidade) - objItens.dValorDesconto, dQuantVenda, iNumVendas)
                    If lErro <> AD_SQL_SUCESSO Then gError 112127
        
                Else
        
                    lErro = Comando_Executar(alComando(4), "INSERT INTO SldDiaFatCx (FilialEmpresa, Caixa, Data, Produto, ValorFaturado, QuantFaturada, NumVendas) VALUES (?,?,?,?,?,?,?)", objCupomFiscal.iFilialEmpresa, objCupomFiscal.iCodCaixa, objCupomFiscal.dtDataEmissao, objProduto.sCodigo, (objItens.dPrecoUnitario * objItens.dQuantidade) - objItens.dValorDesconto, dQuantVenda, iNumVendas)
                    If lErro <> AD_SQL_SUCESSO Then gError 112128
        
                End If
        
                sMes = Month(objCupomFiscal.dtDataEmissao)
                
                lErro = Comando_ExecutarPos(alComando(5), "SELECT FilialEmpresa FROM SldMesFatCx WHERE FilialEmpresa = ? AND Caixa = ? AND Ano = ? AND Produto = ?", 0, iFilialEmpresa, objCupomFiscal.iFilialEmpresa, objCupomFiscal.iCodCaixa, Year(objCupomFiscal.dtDataEmissao), objProduto.sCodigo)
                If lErro <> AD_SQL_SUCESSO Then gError 112129
        
                lErro = Comando_BuscarPrimeiro(alComando(5))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112130
        
                If lErro = AD_SQL_SUCESSO Then
        
                    lErro = Comando_ExecutarPos(alComando(6), "UPDATE SldMesFatCx SET ValorFaturado" & sMes & " = ValorFaturado" & sMes & " + ?, QuantFaturada" & sMes & " = QuantFaturada" & sMes & " + ?, NumVendas" & sMes & " = NumVendas" & sMes & " + ?", alComando(5), (objItens.dPrecoUnitario * objItens.dQuantidade) - objItens.dValorDesconto, dQuantVenda, iNumVendas)
                    If lErro <> AD_SQL_SUCESSO Then gError 112132
                    
                Else
        
                    lErro = Comando_Executar(alComando(6), "INSERT INTO SldMesFatCx (FilialEmpresa, Caixa, Ano, Produto, ValorFaturado" & sMes & " , QuantFaturada" & sMes & ", NumVendas" & sMes & ") VALUES (?,?,?,?,?,?,?)", objCupomFiscal.iFilialEmpresa, objCupomFiscal.iCodCaixa, Year(objCupomFiscal.dtDataEmissao), objProduto.sCodigo, (objItens.dPrecoUnitario * objItens.dQuantidade) - objItens.dValorDesconto, dQuantVenda, iNumVendas)
                    If lErro <> AD_SQL_SUCESSO Then gError 112131
        
                End If
        
                'se nao for nfce, sat cfe,...
                If Len(objCupomFiscal.sNFeArqXml) = 0 Then
                
                    lErro = Comando_ExecutarPos(alComando(7), "SELECT FilialEmpresa FROM SldDiaFat WHERE FilialEmpresa = ? AND Data = ? AND Produto = ?", 0, iFilialEmpresa, objCupomFiscal.iFilialEmpresa, objCupomFiscal.dtDataEmissao, objProduto.sCodigo)
                    If lErro <> AD_SQL_SUCESSO Then gError 112133
            
                    lErro = Comando_BuscarPrimeiro(alComando(7))
                    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112134
            
                    If lErro = AD_SQL_SUCESSO Then
            
                        lErro = Comando_ExecutarPos(alComando(8), "UPDATE SldDiaFat SET ValorFaturado = ValorFaturado + ?, QuantFaturada = QuantFaturada + ?", alComando(7), (objItens.dPrecoUnitario * objItens.dQuantidade) - objItens.dValorDesconto, dQuantVenda)
                        If lErro <> AD_SQL_SUCESSO Then gError 112135
            
                    Else
            
                        lErro = Comando_Executar(alComando(9), "INSERT INTO SldDiaFat (FilialEmpresa, Data, Produto, ValorFaturado, QuantFaturada) VALUES (?,?,?,?,?)", objCupomFiscal.iFilialEmpresa, objCupomFiscal.dtDataEmissao, objProduto.sCodigo, (objItens.dPrecoUnitario * objItens.dQuantidade) - objItens.dValorDesconto, dQuantVenda)
                        If lErro <> AD_SQL_SUCESSO Then gError 112136
            
                    End If
            
                    lErro = Comando_ExecutarPos(alComando(10), "SELECT FilialEmpresa FROM SldMesFat WHERE FilialEmpresa = ? AND  Ano = ? AND Produto = ?", 0, iFilialEmpresa, objCupomFiscal.iFilialEmpresa, Year(objCupomFiscal.dtDataEmissao), objProduto.sCodigo)
                    If lErro <> AD_SQL_SUCESSO Then gError 112137
            
                    lErro = Comando_BuscarPrimeiro(alComando(10))
                    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112138
            
                    If lErro = AD_SQL_SUCESSO Then
                    
                        lErro = Comando_ExecutarPos(alComando(11), "UPDATE SldMesFat SET ValorFaturado" & sMes & " = ValorFaturado" & sMes & " + ?, QuantFaturada" & sMes & " = QuantFaturada" & sMes & " + ?", alComando(10), (objItens.dPrecoUnitario * objItens.dQuantidade) - objItens.dValorDesconto, dQuantVenda)
                        If lErro <> AD_SQL_SUCESSO Then gError 112140
                        
                    Else
            
                        lErro = Comando_Executar(alComando(11), "INSERT INTO SldMesFat (FilialEmpresa, Ano, Produto, ValorFaturado" & sMes & " , QuantFaturada" & sMes & ") VALUES (?,?,?,?,?)", objCupomFiscal.iFilialEmpresa, Year(objCupomFiscal.dtDataEmissao), objProduto.sCodigo, (objItens.dPrecoUnitario * objItens.dQuantidade) - objItens.dValorDesconto, dQuantVenda)
                        If lErro <> AD_SQL_SUCESSO Then gError 112139
            
                    End If
                
                End If
            
            End If
                    
            lNumAuto = lNumAuto + 1
            
        End If
            
            iItem = iItem + 1
            
    Next
   
        
    For Each objItens In objCupomFiscal.colItens
        
        If objItens.iStatus <> STATUS_CANCELADO Then
        
            'insere novo registro na tabela de ItensCupomFiscal
            lErro = Comando_Executar(alComando(1), "INSERT INTO ItensCupomFiscal(FilialEmpresa, NumIntDoc, NumIntCupom, Item, Status, Produto, UnidadeMed, Quantidade, PrecoUnitario, PercDesc, ValorDesconto, AliquotaICMS, NumIntMovEst, SituacaoTrib) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)", objCupomFiscal.iFilialEmpresa, objItens.lNumIntDoc, objItens.lNumIntCupom, objItens.iItem, objItens.iStatus, objItens.sProduto, objItens.sUnidadeMed, objItens.dQuantidade, objItens.dPrecoUnitario, objItens.dPercDesc, objItens.dValorDesconto, objItens.dAliquotaICMS, objItens.lNumIntMovEst, objItens.sSituacaoTrib)
            If lErro <> AD_SQL_SUCESSO Then gError 112121

        End If

    Next
        
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
        
        Call Mover_Dados_ItensCF_Log(objCupomFiscal, objLog)

    End If

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    ItensCF_Gravar_Venda = SUCESSO

    Exit Function

Erro_ItensCF_Gravar_Venda:

    ItensCF_Gravar_Venda = gErr

    Select Case gErr

        Case 112119, 118194
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 112120, 112122, 112124, 11819, 118759, 118196, 126285, 126500

        Case 112121
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_ITEMCF", gErr, objCupomFiscal.iFilialEmpresa, objCupomFiscal.iECF, objCupomFiscal.lNumero, objItens.iItem)

        Case 112123
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTO_NAO_CADASTRADO", gErr, objProduto.sCodigo)
        
        Case 112125, 112126
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDDIAFATCX", gErr)
        
        Case 112127
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_SLDDIAFATCX", gErr)
        
        Case 112128
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_SLDDIAFATCX", gErr)
        
        Case 112129, 112130
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESFATCX", gErr)
        
        Case 112131
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_SLDMESFATCX", gErr)
        
        Case 112132
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_SLDMESFATCX", gErr)
        
        Case 112133, 112134
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDDIAFAT", gErr, objCupomFiscal.iFilialEmpresa, objItens.sProduto, objCupomFiscal.dtDataEmissao)
        
        Case 112135
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_SLDDIAFAT", gErr)
        
        Case 112136
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_SLDDIAFAT", gErr, objCupomFiscal.iFilialEmpresa, objItens.sProduto, objCupomFiscal.dtDataEmissao)
        
        Case 112137, 112138
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_SLDMESFAT", gErr, objCupomFiscal.iFilialEmpresa, objItens.sProduto, objCupomFiscal.dtDataEmissao)
        
        Case 112139
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_SLDMESFAT", gErr)
        
        Case 112140
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_SLDMESFAT", gErr)
        
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151328)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Registro_ECF_TransfCaixa(ByVal colRegistro As Collection, ByVal sArquivo As String, ByVal iRegistro As Integer) As Long
'Trata o registro de transferencia no caixa e coloca os dados no bd do caixa central. sArquivo contem o nome do arquivo em que sRegistro foi lido.
'iRegistro é o numero do registro.

Dim objMovCxDe As New ClassMovimentoCaixa
Dim objMovCxPara As New ClassMovimentoCaixa
Dim objChequePara As New ClassChequePre
Dim lErro As Long
Dim objTransfCaixa As New ClassTransfCaixa
Dim iPosKeyLButton As Integer
Dim sRegistro As String

On Error GoTo Erro_Registro_ECF_TransfCaixa

    sRegistro = colRegistro(1)

    iPosKeyLButton = InStr(sRegistro, Chr(vbKeyLButton))

    If iPosKeyLButton <> 0 Then

        objTransfCaixa.lNumMovtoArq = CLng(left(sRegistro, iPosKeyLButton - 1))

    End If

    objTransfCaixa.sArquivo = sArquivo


    'guarda as infos de movimento de caixa
    lErro = TransfCaixa_Movcx(colRegistro, objMovCxDe, objMovCxPara, objChequePara)
    If lErro <> SUCESSO Then gError 105476
    
    lErro = Verifica_Existencia_Sequencial(objMovCxDe.lSequencial, objMovCxDe.iCaixa, objMovCxDe.iFilialEmpresa)
    If lErro <> SUCESSO And lErro <> 112627 Then gError 105477
    
    Set objTransfCaixa.objMovCaixaDe = objMovCxDe
    Set objTransfCaixa.objMovCaixaPara = objMovCxPara
    objTransfCaixa.iFilialEmpresa = objMovCxDe.iFilialEmpresa

    'guarda as infos de movimento de caixa
    lErro = TransfCaixa_Grava(objTransfCaixa, objChequePara)
    If lErro <> SUCESSO Then gError 105499

    Registro_ECF_TransfCaixa = SUCESSO

    Exit Function

Erro_Registro_ECF_TransfCaixa:

    Registro_ECF_TransfCaixa = gErr

    Select Case gErr

        Case 105476, 105477, 105499

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151329)

    End Select

    Exit Function

End Function

Private Function TransfCaixa_Movcx(ByVal colRegistro As Collection, ByVal objMovCxDe As ClassMovimentoCaixa, ByVal objMovCxPara As ClassMovimentoCaixa, ByVal objChequePara As ClassChequePre) As Long
'guarda as infos de trasnferencia de caixa

Dim lErro As Long
Dim iPosAtual As Integer
Dim iPosFimAtual As Integer
Dim sRegistro As String


On Error GoTo Erro_TransfCaixa_Movcx
    
    sRegistro = colRegistro(1)
    
    iPosFimAtual = InStr(sRegistro, Chr(vbKeyControl))

    
    
    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCxDe.iTipo = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCxDe.lSequencial = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCxDe.iAdmMeioPagto = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCxDe.iParcelamento = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCxDe.dHora = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCxDe.iTipoCartao = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCxDe.lCupomFiscal = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCxDe.lNumRefInterna = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCxPara.iTipo = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCxPara.lSequencial = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCxPara.iAdmMeioPagto = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCxPara.iParcelamento = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCxPara.dHora = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCxPara.iTipoCartao = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCxPara.lCupomFiscal = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCxPara.lNumRefInterna = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCxDe.iCaixa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    objMovCxPara.iCaixa = objMovCxDe.iCaixa

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCxDe.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    objMovCxPara.iFilialEmpresa = objMovCxDe.iFilialEmpresa

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCxDe.iCodOperador = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    objMovCxPara.iCodOperador = objMovCxDe.iCodOperador

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCxDe.dtDataMovimento = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    objMovCxPara.dtDataMovimento = objMovCxDe.dtDataMovimento

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCxDe.dValor = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    objMovCxPara.dValor = objMovCxDe.dValor

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCxDe.lTransferencia = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    objMovCxPara.lTransferencia = objMovCxDe.lTransferencia

    'se entrou um cheque
    If objMovCxPara.iTipo = MOVIMENTOCAIXA_ENTRADA_TRANSF_CHEQUE Then
    
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objChequePara.dtDataDeposito = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objChequePara.iBanco = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objChequePara.iNaoEspecificado = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objChequePara.iStatus = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objChequePara.lNumero = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objChequePara.lSequencialCaixa = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objChequePara.sAgencia = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)

        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objChequePara.sContaCorrente = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)

        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objChequePara.sCPFCGC = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)

        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objChequePara.iLocalizacao = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objChequePara.iECF = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    End If

    TransfCaixa_Movcx = SUCESSO

    Exit Function

Erro_TransfCaixa_Movcx:

    TransfCaixa_Movcx = gErr

    Select Case gErr

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151330)

    End Select

    Exit Function

End Function

Private Function TransfCaixa_Grava(objTransfCaixa As ClassTransfCaixa, objChequePara As ClassChequePre) As Long
'Gera os sequenciais, toma as providencias para acertar os saldos e grava o log
'objTransfCaixa eh parametro de INPUT que traz os dados da transf

Dim lNumMovto As Long
Dim objLog As New ClassLog
Dim lErro As Long
Dim alComando(1 To 3) As Long
Dim iIndice As Integer
Dim iTipoMeioPagto As Integer
Dim objChequeDe As New ClassChequePre
Dim lCodigo As Long

On Error GoTo Erro_TransfCaixa_Grava

     For iIndice = LBound(alComando) To UBound(alComando)
         alComando(iIndice) = Comando_Abrir()
         If alComando(iIndice) = 0 Then gError 105507
     Next
    
    'pegar o proximo numero de movimento disponivel na tabela.
    lErro = CF("Config_ObterNumInt", "LojaConfig", "NUM_PROX_MOVCAIXACENTRAL", lNumMovto, 2, objTransfCaixa.iFilialEmpresa)
    If lErro <> SUCESSO Then gError 105485
    
    objTransfCaixa.objMovCaixaDe.lNumMovto = lNumMovto
    objTransfCaixa.objMovCaixaPara.lMovtoTransf = lNumMovto
    objTransfCaixa.lNumMovtoCxDe = lNumMovto
    
    objTransfCaixa.objMovCaixaPara.lNumMovto = lNumMovto + 1
    objTransfCaixa.objMovCaixaDe.lMovtoTransf = lNumMovto + 1
    objTransfCaixa.lNumMovtoCxPara = lNumMovto + 1
    
    lErro = TransfCaixa_Grava_De(objTransfCaixa)
    If lErro <> SUCESSO Then gError 105500
    
    lErro = TransfCaixa_Grava_Para(objTransfCaixa, objChequePara)
    If lErro <> SUCESSO Then gError 105501
    
    'pegar o proximo numero de movimento disponivel na tabela.
    lErro = CF("Config_ObterNumInt", "LojaConfig", "NUM_PROX_TRANSFCAIXA", lCodigo, 1, objTransfCaixa.iFilialEmpresa)
    If lErro <> SUCESSO Then gError 105508
    
    objTransfCaixa.lCodigoCaixa = objTransfCaixa.objMovCaixaDe.lTransferencia
    objTransfCaixa.iCaixa = objTransfCaixa.objMovCaixaDe.iCaixa
    objTransfCaixa.lCodigo = lCodigo
    objTransfCaixa.objMovCaixaDe.lTransferencia = lCodigo
    objTransfCaixa.objMovCaixaPara.lTransferencia = lCodigo
    

    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then

        objLog.iOperacao = INCLUSAO_TRANSFERENCIA_CAIXA
    
        Call Mover_Dados_TransfCaixa_Log(objTransfCaixa, objChequePara, objLog)
       
        'grava o log
        lErro = CF("Log_Grava", objLog)
        If lErro <> SUCESSO Then gError 105503
       
    End If
    
    objTransfCaixa.objMovCaixaDe.iQuantLog = objLog.iQuantLog
    objTransfCaixa.objMovCaixaDe.lNumIntDocLog = objLog.lNumIntDoc
    objTransfCaixa.objMovCaixaPara.iQuantLog = objLog.iQuantLog
    objTransfCaixa.objMovCaixaPara.lNumIntDocLog = objLog.lNumIntDoc
    
    'inserir na tabela de movto caixa de
    lErro = Comando_Executar(alComando(1), "INSERT INTO MovimentosCaixa " & _
                                           "(FilialEmpresa, NumMovto, Caixa, Operador, Sequencial, Tipo, AdmMeioPagto, Parcelamento, TipoCartao, Numero, DataMovimento, Valor, Historico, Favorecido, CupomFiscal, NumRefInterna, MovtoTransf, MovtoEstorno, Gerente, CodConta, Hora, Transferencia, NumIntExt, NumIntDocLog, QuantLog, Arquivo, NumMovtoArq) " & _
                                           "VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, " & _
                                           "?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?)", _
                                           objTransfCaixa.objMovCaixaDe.iFilialEmpresa, objTransfCaixa.objMovCaixaDe.lNumMovto, objTransfCaixa.objMovCaixaDe.iCaixa, objTransfCaixa.objMovCaixaDe.iCodOperador, objTransfCaixa.objMovCaixaDe.lSequencial, objTransfCaixa.objMovCaixaDe.iTipo, objTransfCaixa.objMovCaixaDe.iAdmMeioPagto, objTransfCaixa.objMovCaixaDe.iParcelamento, objTransfCaixa.objMovCaixaDe.iTipoCartao, objTransfCaixa.objMovCaixaDe.lNumero, objTransfCaixa.objMovCaixaDe.dtDataMovimento, objTransfCaixa.objMovCaixaDe.dValor, objTransfCaixa.objMovCaixaDe.sHistorico, _
                                           objTransfCaixa.objMovCaixaDe.sFavorecido, objTransfCaixa.objMovCaixaDe.lCupomFiscal, objTransfCaixa.objMovCaixaDe.lNumRefInterna, objTransfCaixa.objMovCaixaDe.lMovtoTransf, objTransfCaixa.objMovCaixaDe.lMovtoEstorno, objTransfCaixa.objMovCaixaDe.iGerente, objTransfCaixa.objMovCaixaDe.iCodConta, objTransfCaixa.objMovCaixaDe.dHora, objTransfCaixa.objMovCaixaDe.lTransferencia, objTransfCaixa.objMovCaixaDe.lNumIntExt, objTransfCaixa.objMovCaixaDe.lNumIntDocLog, objTransfCaixa.objMovCaixaDe.iQuantLog, objTransfCaixa.sArquivo, objTransfCaixa.lNumMovtoArq)
    If lErro <> SUCESSO Then gError 105504
    
    'inserir na tabela de movto caixa para
    lErro = Comando_Executar(alComando(2), "INSERT INTO MovimentosCaixa " & _
                                           "(FilialEmpresa, NumMovto, Caixa, Operador, Sequencial, Tipo, AdmMeioPagto, Parcelamento, TipoCartao, Numero, DataMovimento, Valor, Historico, Favorecido, CupomFiscal, NumRefInterna, MovtoTransf, MovtoEstorno, Gerente, CodConta, Hora, Transferencia, NumIntExt, NumIntDocLog, QuantLog, Arquivo, NumMovtoArq) " & _
                                           "VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, " & _
                                           "?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?)", _
                                           objTransfCaixa.objMovCaixaPara.iFilialEmpresa, objTransfCaixa.objMovCaixaPara.lNumMovto, objTransfCaixa.objMovCaixaPara.iCaixa, objTransfCaixa.objMovCaixaPara.iCodOperador, objTransfCaixa.objMovCaixaPara.lSequencial, objTransfCaixa.objMovCaixaPara.iTipo, objTransfCaixa.objMovCaixaPara.iAdmMeioPagto, objTransfCaixa.objMovCaixaPara.iParcelamento, objTransfCaixa.objMovCaixaPara.iTipoCartao, objTransfCaixa.objMovCaixaPara.lNumero, objTransfCaixa.objMovCaixaPara.dtDataMovimento, objTransfCaixa.objMovCaixaPara.dValor, objTransfCaixa.objMovCaixaPara.sHistorico, _
                                           objTransfCaixa.objMovCaixaPara.sFavorecido, objTransfCaixa.objMovCaixaPara.lCupomFiscal, objTransfCaixa.objMovCaixaPara.lNumRefInterna, objTransfCaixa.objMovCaixaPara.lMovtoTransf, objTransfCaixa.objMovCaixaPara.lMovtoEstorno, objTransfCaixa.objMovCaixaPara.iGerente, objTransfCaixa.objMovCaixaPara.iCodConta, objTransfCaixa.objMovCaixaPara.dHora, objTransfCaixa.objMovCaixaPara.lTransferencia, objTransfCaixa.objMovCaixaPara.lNumIntExt, objTransfCaixa.objMovCaixaPara.lNumIntDocLog, objTransfCaixa.objMovCaixaPara.iQuantLog, objTransfCaixa.sArquivo, objTransfCaixa.lNumMovtoArq)
    If lErro <> SUCESSO Then gError 105505

    'inserir na tabela transferencialoja
    lErro = Comando_Executar(alComando(3), "INSERT INTO TransferenciaCaixa " & _
                                           "(FilialEmpresa, Codigo, NumMovtoCxDe, NumMovtoCxPara, CodigoCaixa, Caixa, Arquivo, NumMovtoArq) VALUES (?,?,?,?,?,?,?,?)", _
                                           objTransfCaixa.iFilialEmpresa, objTransfCaixa.lCodigo, objTransfCaixa.lNumMovtoCxDe, objTransfCaixa.lNumMovtoCxPara, objTransfCaixa.lCodigoCaixa, objTransfCaixa.iCaixa, objTransfCaixa.sArquivo, objTransfCaixa.lNumMovtoArq)
    If lErro <> SUCESSO Then gError 105506


    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

   TransfCaixa_Grava = SUCESSO

   Exit Function

Erro_TransfCaixa_Grava:

    TransfCaixa_Grava = gErr
    
    Select Case gErr
         
        Case 105485, 105500, 105501, 105503, 105508
         
        Case 105504
            Call Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_MOVIMENTOSCAIXA", gErr, objTransfCaixa.objMovCaixaDe.lNumMovto)
    
        Case 105505
            Call Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_MOVIMENTOSCAIXA", gErr, objTransfCaixa.objMovCaixaPara.lNumMovto)
    
        Case 105506
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_TRANSFERENCIACAIXA", gErr, objTransfCaixa.iFilialEmpresa, objTransfCaixa.lCodigo)
    
        Case 105507
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151331)
    
    End Select

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

   Exit Function

End Function

Private Function TransfCaixa_Grava_De(objTransfCaixa As ClassTransfCaixa) As Long
'Gera os sequenciais, toma as providencias para acertar os saldos e grava o log
'objTransfCaixa eh parametro de INPUT que traz os dados da transf

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer
Dim iTipoMeioPagto As Integer
Dim objChequeDe As New ClassChequePre
Dim objCCMovDia As New ClassCCMovDia

On Error GoTo Erro_TransfCaixa_Grava_De

     For iIndice = LBound(alComando) To UBound(alComando)
         alComando(iIndice) = Comando_Abrir()
         If alComando(iIndice) = 0 Then gError 105484
     Next
    
    'preenche um objccmovdia com os dados do movimento de saque do caixa
    lErro = CF("Mover_Dados_Saque_CCMovDia", objTransfCaixa.objMovCaixaDe, objCCMovDia)
    If lErro <> SUCESSO Then gError 105486

    'seleciona registro na tabela de TiposMovtocaixa
    lErro = Comando_Executar(alComando(1), "SELECT TipoMeioPagto FROM TiposMovtoCaixa WHERE Codigo=?", iTipoMeioPagto, objTransfCaixa.objMovCaixaDe.iTipo)
    If lErro <> AD_SQL_SUCESSO Then gError 105487

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 105488
    
    objCCMovDia.iTipoMeioPagto = iTipoMeioPagto

    'adiciona o mesmo no consolidado diário
    lErro = CF("CCMovDia_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 105489

    'adiciona o mesmo no consolidado anual no mês em questão
    lErro = CF("CCMov_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 105490
    
    If iTipoMeioPagto = TIPOMEIOPAGTOLOJA_CHEQUE Then
    
        objChequeDe.iFilialEmpresaLoja = objTransfCaixa.objMovCaixaDe.iFilialEmpresa
        objChequeDe.iCaixa = objTransfCaixa.objMovCaixaDe.iCaixa
        objChequeDe.lSequencialCaixa = objTransfCaixa.objMovCaixaDe.lNumRefInterna
        
        lErro = CF("Cheque_Le_SequencialCaixa1", objChequeDe)
        If lErro <> SUCESSO And lErro <> 105481 Then gError 105482
        
        If lErro = 105481 Then gError 105814
        
        objChequeDe.iStatus = STATUS_EXCLUIDO
        
        'exclui o cheque em questao, alterando sua flag de status para excluido
        lErro = Cheque_Altera_Status_EmTrans(objChequeDe)
        If lErro <> SUCESSO Then gError 105813
        
        objTransfCaixa.objMovCaixaDe.lCupomFiscal = objChequeDe.lCupomFiscal
        
        If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL_BACKOFFICE Then
            objTransfCaixa.objMovCaixaDe.lNumRefInterna = objChequeDe.lSequencialBack
        Else
            objTransfCaixa.objMovCaixaDe.lNumRefInterna = objChequeDe.lSequencialLoja
        End If
        
    End If

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

   TransfCaixa_Grava_De = SUCESSO

   Exit Function

Erro_TransfCaixa_Grava_De:

    TransfCaixa_Grava_De = gErr
    
    Select Case gErr
    
        Case 105482, 105486, 105489, 105490, 105813
         
        Case 105484
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
         
        Case 105487, 105488
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOSMOVTOCAIXA1", gErr, objTransfCaixa.objMovCaixaDe.iTipo)
         
        Case 105814
            Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPRE_NAOENCONTRADO_CAIXA", gErr, objChequeDe.iFilialEmpresa, objChequeDe.iCaixa, objChequeDe.lSequencialCaixa)
         
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151332)
    
    End Select

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

   Exit Function

End Function

Private Function TransfCaixa_Grava_Para(objTransfCaixa As ClassTransfCaixa, objChequePara As ClassChequePre) As Long
'Gera os sequenciais, toma as providencias para acertar os saldos e grava o log
'objTransfCaixa eh parametro de INPUT que traz os dados da transf

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer
Dim iTipoMeioPagto As Integer
Dim lSeqLojaNovo As Long
Dim lSeqBackNovo As Long
Dim objCCMovDia As New ClassCCMovDia
Dim objCupomFiscal As New ClassCupomFiscal

On Error GoTo Erro_TransfCaixa_Grava_Para

     For iIndice = LBound(alComando) To UBound(alComando)
         alComando(iIndice) = Comando_Abrir()
         If alComando(iIndice) = 0 Then gError 105502
     Next
    
    'seleciona registro na tabela de TiposMovtocaixa
    lErro = Comando_Executar(alComando(1), "SELECT TipoMeioPagto FROM TiposMovtoCaixa WHERE Codigo=?", iTipoMeioPagto, objTransfCaixa.objMovCaixaPara.iTipo)
    If lErro <> AD_SQL_SUCESSO Then gError 105491

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 105492
    
    objCCMovDia.iTipoMeioPagto = iTipoMeioPagto

    If iTipoMeioPagto = TIPOMEIOPAGTOLOJA_CHEQUE Then

        'preencho o número de movto do cheque
        objChequePara.lNumMovtoCaixa = objTransfCaixa.objMovCaixaPara.lNumMovto
        objChequePara.iFilialEmpresaLoja = objTransfCaixa.objMovCaixaPara.iFilialEmpresa
        objChequePara.iFilialEmpresa = objChequePara.iFilialEmpresaLoja
        objChequePara.lSequencialCaixa = objTransfCaixa.objMovCaixaPara.lNumRefInterna
        objChequePara.iCaixa = objTransfCaixa.objMovCaixaPara.iCaixa
        objChequePara.dValor = objTransfCaixa.objMovCaixaPara.dValor
        objChequePara.dtDataEmissao = objTransfCaixa.objMovCaixaPara.dtDataMovimento
        
        'Chama a rotina que gera o sequencial
        lErro = CF("Config_ObterNumInt", "LojaConfig", "COD_PROX_CHEQUE_LOJA", lSeqLojaNovo, 1, objChequePara.iFilialEmpresaLoja)
        If lErro <> SUCESSO Then gError 105493
    
        'preencho o sequencialLoja com o novo código gerado
        objChequePara.lSequencialLoja = lSeqLojaNovo
    
        'se nao estiver trabalhando no caixa central ==> tem que descobrir
        If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL_BACKOFFICE Then
    
            'Chama a rotina que gera o sequencial
            lErro = CF("Config_ObterNumInt", "CPRConfig", "COD_PROX_CHEQUE_BACKOFFICE", lSeqBackNovo, 1)
            If lErro <> SUCESSO Then gError 105494
    
            'preencho o sequencialLoja com o novo código gerado
            objChequePara.lSequencialBack = lSeqBackNovo
            objTransfCaixa.objMovCaixaPara.lNumRefInterna = lSeqBackNovo
    
        ElseIf giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
        
            objTransfCaixa.objMovCaixaPara.lNumRefInterna = lSeqLojaNovo
    
        End If
        
        'insiro o mesmo na tabela de cheques
        lErro = CF("Cheque_Insere", objChequePara)
        If lErro <> SUCESSO Then gError 105495

        objCupomFiscal.iFilialEmpresa = objChequePara.iFilialEmpresaLoja
        objCupomFiscal.lNumero = objTransfCaixa.objMovCaixaPara.lCupomFiscal
        objCupomFiscal.iECF = objChequePara.iECF

        'leitura do cupomfiscal para descobrir o NumIntDoc do cupom que será gravado no movimento de caixa de transferencia
        lErro = CF("CupomFiscal_Le", objCupomFiscal)
        If lErro <> SUCESSO And lErro <> 105262 Then gError 105495

        If lErro = 105262 Then gError 105815

        objTransfCaixa.objMovCaixaPara.lCupomFiscal = objCupomFiscal.lNumIntDoc

    End If

    'preenche um objccmovdia com os dados do movimento de saque do caixa
    lErro = Mover_Dados_Deposito_CCMovDia(objTransfCaixa.objMovCaixaPara, objCCMovDia)
    If lErro <> SUCESSO Then gError 105496

    'adiciona o mesmo no consolidado diário
    lErro = CF("CCMovDia_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 105497

    'adiciona o mesmo no consolidado anual no mês em questão
    lErro = CF("CCMov_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 105498

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

   TransfCaixa_Grava_Para = SUCESSO

   Exit Function

Erro_TransfCaixa_Grava_Para:

    TransfCaixa_Grava_Para = gErr
    
    Select Case gErr
   
        Case 105491, 105492
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOSMOVTOCAIXA1", gErr, objTransfCaixa.objMovCaixaPara.iTipo)
    
        Case 105493 To 105498
         
        Case 105502
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
         
        Case 105815
            Call Rotina_Erro(vbOKOnly, "ERRO_CUPOM_FISCAL_NAO_CADASTRADO2", gErr, objCupomFiscal.lNumero, objCupomFiscal.iFilialEmpresa, objCupomFiscal.iECF)
         
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151333)
    
    End Select

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

   Exit Function

End Function

Private Sub Mover_Dados_TransfCaixa_Log(objTransfCaixa As ClassTransfCaixa, objChequePara As ClassChequePre, objLog As ClassLog)

On Error GoTo Erro_Mover_Dados_TransfCaixa_Log

    'preenche os dados do log com cada atributo do objMovimentoCaixa separado por vbkeyscape
    objLog.sLog = objTransfCaixa.lCodigoCaixa & Chr(vbKeyEscape)
    
    With objTransfCaixa.objMovCaixaDe
        objLog.sLog = objLog.sLog & _
                      CStr(.iFilialEmpresa) & Chr(vbKeyEscape) & _
                      CStr(.lNumMovto) & Chr(vbKeyEscape) & _
                      CStr(.iCaixa) & Chr(vbKeyEscape) & _
                      CStr(.iCodOperador) & Chr(vbKeyEscape) & _
                      CStr(.lSequencial) & Chr(vbKeyEscape) & _
                      CStr(.iTipo) & Chr(vbKeyEscape) & _
                      CStr(.iAdmMeioPagto) & Chr(vbKeyEscape) & _
                      CStr(.iParcelamento) & Chr(vbKeyEscape) & _
                      CStr(.iTipoCartao) & Chr(vbKeyEscape) & _
                      CStr(.lNumero) & Chr(vbKeyEscape) & _
                      CStr(.dtDataMovimento) & Chr(vbKeyEscape) & _
                      CStr(.dValor) & Chr(vbKeyEscape) & _
                      CStr(.lCupomFiscal) & Chr(vbKeyEscape) & _
                      CStr(.lNumRefInterna) & Chr(vbKeyEscape) & _
                      CStr(.lMovtoTransf) & Chr(vbKeyEscape) & _
                      CStr(.dHora) & Chr(vbKeyEscape) & _
                      CStr(.lTransferencia) & Chr(vbKeyEscape)

    End With

    With objTransfCaixa.objMovCaixaPara
        
        objLog.sLog = objLog.sLog & _
                      CStr(.iFilialEmpresa) & Chr(vbKeyEscape) & _
                      CStr(.lNumMovto) & Chr(vbKeyEscape) & _
                      CStr(.iCaixa) & Chr(vbKeyEscape) & _
                      CStr(.iCodOperador) & Chr(vbKeyEscape) & _
                      CStr(.lSequencial) & Chr(vbKeyEscape) & _
                      CStr(.iTipo) & Chr(vbKeyEscape) & _
                      CStr(.iAdmMeioPagto) & Chr(vbKeyEscape) & _
                      CStr(.iParcelamento) & Chr(vbKeyEscape) & _
                      CStr(.iTipoCartao) & Chr(vbKeyEscape) & _
                      CStr(.lNumero) & Chr(vbKeyEscape) & _
                      CStr(.dtDataMovimento) & Chr(vbKeyEscape) & _
                      CStr(.dValor) & Chr(vbKeyEscape) & _
                      CStr(.lCupomFiscal) & Chr(vbKeyEscape) & _
                      CStr(.lNumRefInterna) & Chr(vbKeyEscape) & _
                      CStr(.lMovtoTransf) & Chr(vbKeyEscape) & _
                      CStr(.dHora) & Chr(vbKeyEscape) & _
                      CStr(.lTransferencia) & Chr(vbKeyEscape)

    End With

    If objTransfCaixa.objMovCaixaPara.iTipo = MOVIMENTOCAIXA_ENTRADA_TRANSF_CHEQUE Then

        With objChequePara
    
                objLog.sLog = objLog.sLog & CStr(.iBanco) & Chr(vbKeyEscape) & _
                              CStr(.sAgencia) & Chr(vbKeyEscape) & _
                              CStr(.sContaCorrente) & Chr(vbKeyEscape) & _
                              CStr(.lNumero) & Chr(vbKeyEscape) & _
                              CStr(.dtDataDeposito) & Chr(vbKeyEscape) & _
                              CStr(.dValor) & Chr(vbKeyEscape) & _
                              CStr(.sCPFCGC) & Chr(vbKeyEscape) & _
                              CStr(.iAprovado) & Chr(vbKeyEscape) & _
                              CStr(.iNaoEspecificado) & Chr(vbKeyEscape) & _
                              CStr(.lSequencialLoja) & Chr(vbKeyEscape) & _
                              CStr(.iCaixa) & Chr(vbKeyEscape) & _
                              CStr(.lSequencialCaixa) & Chr(vbKeyEscape) & _
                              CStr(.iLocalizacao) & Chr(vbKeyEscape)

        End With

    End If

    objLog.sLog = objLog.sLog & Chr(vbKeyEnd)

    Exit Sub

Erro_Mover_Dados_TransfCaixa_Log:

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151334)

    End Select

    Exit Sub

End Sub

Function Registro_ECF_TransfCaixa_Exclusao(ByVal colRegistro As Collection, ByVal sArquivo As String, ByVal iRegistro As Integer) As Long
'Trata o registro de exclusao transferencia no caixa e coloca os dados no bd do caixa central. sArquivo contem o nome do arquivo em que sRegistro foi lido.
'iRegistro é o numero do registro.

Dim objMovCxDe As New ClassMovimentoCaixa
Dim objMovCxPara As New ClassMovimentoCaixa
Dim objChequePara As New ClassChequePre
Dim lErro As Long
Dim objTransfCaixa As New ClassTransfCaixa

On Error GoTo Erro_Registro_ECF_TransfCaixa_Exclusao

    'guarda as infos de movimento de caixa
    lErro = TransfCaixa_Movcx_Exclusao(colRegistro, objTransfCaixa)
    If lErro <> SUCESSO Then gError 105527
    
    'guarda as infos de movimento de caixa
    lErro = TransfCaixa_Exclui(objTransfCaixa)
    If lErro <> SUCESSO Then gError 105528

    Registro_ECF_TransfCaixa_Exclusao = SUCESSO

    Exit Function

Erro_Registro_ECF_TransfCaixa_Exclusao:

    Registro_ECF_TransfCaixa_Exclusao = gErr

    Select Case gErr

        Case 105527, 105528

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151335)

    End Select

    Exit Function

End Function

Private Function TransfCaixa_Movcx_Exclusao(ByVal colRegistro As Collection, ByVal objTransfCaixa As ClassTransfCaixa) As Long
'guarda as infos de trasnferencia de caixa

Dim lErro As Long
Dim iPosAtual As Integer
Dim iPosFimAtual As Integer
Dim sRegistro As String

On Error GoTo Erro_TransfCaixa_Movcx_Exclusao
    
    sRegistro = colRegistro(1)
    
    iPosFimAtual = InStr(sRegistro, Chr(vbKeyControl))
    
    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.iCaixa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.lCodigoCaixa = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    TransfCaixa_Movcx_Exclusao = SUCESSO

    Exit Function

Erro_TransfCaixa_Movcx_Exclusao:

    TransfCaixa_Movcx_Exclusao = gErr

    Select Case gErr

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151336)

    End Select

    Exit Function

End Function

Public Function TransfCaixa_Exclui(ByVal objTransfCaixa As ClassTransfCaixa) As Long

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(1 To 2) As Long
Dim tTransfCaixa As typeTransfCaixa

On Error GoTo Erro_TransfCaixa_Exclui

    'abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 105529
    Next
    
    'le a TransferenciaCaixa
    lErro = Comando_ExecutarPos(alComando(1), "SELECT DataBackoffice, NumMovtoCxDe, NumMovtoCxPara FROM TransferenciaCaixa " & _
                                              "WHERE FilialEmpresa = ? AND Caixa = ? AND CodigoCaixa = ?", 0, _
                                              tTransfCaixa.dtDataBackoffice, tTransfCaixa.lNumMovtoCxDe, tTransfCaixa.lNumMovtoCxPara, objTransfCaixa.iFilialEmpresa, objTransfCaixa.iCaixa, objTransfCaixa.lCodigoCaixa)
    If lErro <> AD_SQL_SUCESSO Then gError 105530
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 105531
    
    If lErro = AD_SQL_SEM_DADOS Then gError 105532
    
    'lock da transferencia
    lErro = Comando_LockExclusive(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 105533
    
    objTransfCaixa.lNumMovtoCxDe = tTransfCaixa.lNumMovtoCxDe
    objTransfCaixa.lNumMovtoCxPara = tTransfCaixa.lNumMovtoCxPara
    objTransfCaixa.dtDataBackoffice = tTransfCaixa.dtDataBackoffice
    
    'exclui a origem de uma transferencia
    lErro = TransfCaixa_Exclui_De(objTransfCaixa)
    If lErro <> SUCESSO Then gError 105534
    
    'exclui o destino de uma transferencia
    lErro = TransfCaixa_Exclui_Para(objTransfCaixa)
    If lErro <> SUCESSO Then gError 105535
   
    'exclui a transferencia
    lErro = Comando_ExecutarPos(alComando(2), "DELETE FROM TransferenciaCaixa", alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 105536
    
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    TransfCaixa_Exclui = SUCESSO
    
    Exit Function
    
Erro_TransfCaixa_Exclui:
    
    TransfCaixa_Exclui = gErr
    
    Select Case gErr
    
        Case 105529
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
    
        Case 105530, 105531
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TRANSFERENCIACAIXA", gErr, objTransfCaixa.iFilialEmpresa, objTransfCaixa.iCaixa, objTransfCaixa.lCodigoCaixa)
    
        Case 105532
            Call Rotina_Erro(vbOKOnly, "ERRO_TRANSFERENCIACAIXA_NAOCADASTRADA", gErr, objTransfCaixa.iFilialEmpresa, objTransfCaixa.iCaixa, objTransfCaixa.lCodigoCaixa)
    
        Case 105533
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_TRANSFERENCIACAIXA", gErr, objTransfCaixa.iFilialEmpresa, objTransfCaixa.iCaixa, objTransfCaixa.lCodigoCaixa)
        
        Case 105534, 105535
        
        Case 105536
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_TRANSFERENCIACAIXA", gErr, objTransfCaixa.iFilialEmpresa, objTransfCaixa.iCaixa, objTransfCaixa.lCodigoCaixa)
    
    End Select
    
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Private Function TransfCaixa_Exclui_De(objTransfCaixa As ClassTransfCaixa) As Long
'exclui a origem de uma transferencia

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(0 To 3) As Long
Dim tCheque As typeChequePre
Dim objTipoMovtoCaixa As New ClassTipoMovtoCaixa
Dim tMovCx As typeMovimentoCaixa
Dim lSequencial As Long
Dim iFilialEmpresa As Integer
Dim objCCMovDia As New ClassCCMovDia

On Error GoTo Erro_TransfCaixa_Exclui_De

    'abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 105512
    Next

    'ler o movimento de caixa referente a origem ("DE") da transferencia
    lErro = Comando_ExecutarPos(alComando(0), "SELECT NumRefInterna, Tipo, AdmMeioPagto, Parcelamento, Valor, DataMovimento, Caixa, FilialEmpresa, NumIntDocLog, QuantLog " & _
                                              "FROM MovimentosCaixa " & _
                                              "WHERE NumMovto = ? " & _
                                              "AND FilialEmpresa = ? ", 0, _
                                              tMovCx.lNumRefInterna, tMovCx.iTipo, tMovCx.iAdmMeioPagto, tMovCx.iParcelamento, tMovCx.dValor, tMovCx.dtDataMovimento, tMovCx.iCaixa, tMovCx.iFilialEmpresa, tMovCx.lNumIntDocLog, tMovCx.iQuantLog, _
                                              objTransfCaixa.lNumMovtoCxDe, _
                                              objTransfCaixa.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 105513
    
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 105514
    
    'se não encontrar, erro
    If lErro = AD_SQL_SEM_DADOS Then gError 105515
    
    'locko o movtoCaixa
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 105516
    
    'preencho um codigo de movtocaixa
    objTipoMovtoCaixa.iCodigo = tMovCx.iTipo
    
    'leio-o na memória
    lErro = CF("TiposMovtoCaixa_Le_Codigo", objTipoMovtoCaixa)
    If lErro <> SUCESSO Then gError 105517
    
    'se o tipo "DE" for um cheque, o mesmo precisa ser "desexcluído"
    If objTipoMovtoCaixa.iTMPLoja = TIPOMEIOPAGTOLOJA_CHEQUE Then
        
        
        If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
        
            'seleciono o cheque na tabela de cheques
            lErro = Comando_ExecutarPos(alComando(1), "SELECT FilialEmpresaLoja, SequencialLoja, NaoEspecificado, Localizacao " & _
                                                      "FROM ChequePre WHERE FilialEmpresaLoja = ? AND SequencialLoja  = ? ", 0, _
                                                      iFilialEmpresa, lSequencial, tCheque.iNaoEspecificado, tCheque.iLocalizacao, _
                                                      tMovCx.iFilialEmpresa, tMovCx.lNumRefInterna)
            If lErro <> AD_SQL_SUCESSO Then gError 105518
                        
        Else
                        
            'seleciono o cheque na tabela de cheques
            lErro = Comando_ExecutarPos(alComando(1), "SELECT FilialEmpresaLoja, SequencialLoja, NaoEspecificado, Localizacao " & _
                                                      "FROM ChequePre WHERE SequencialBack = ?", 0, _
                                                      iFilialEmpresa, lSequencial, tCheque.iNaoEspecificado, tCheque.iLocalizacao, _
                                                      tMovCx.lNumRefInterna)
            If lErro <> AD_SQL_SUCESSO Then gError 105817
                        
        End If
                        
        'busco o primeiro
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 105519
        
        'se não encontrar->erro
        If lErro = AD_SQL_SEM_DADOS Then gError 105520
        
        'locko o cara
        lErro = Comando_LockExclusive(alComando(1))
        If lErro <> AD_SQL_SUCESSO Then gError 105521
        
        'atualizo o seu status para ativo
        lErro = Comando_ExecutarPos(alComando(2), "UPDATE ChequePre SET Status = ?", alComando(1), STATUS_ATIVO)
        If lErro <> AD_SQL_SUCESSO Then gError 105522
    
    End If
    
    'excluir o movimento "de"
    lErro = Comando_ExecutarPos(alComando(3), "DELETE FROM MovimentosCaixa", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 105523
    
    objTransfCaixa.objMovCaixaDe.iAdmMeioPagto = tMovCx.iAdmMeioPagto
    objTransfCaixa.objMovCaixaDe.iParcelamento = tMovCx.iParcelamento
    objTransfCaixa.objMovCaixaDe.dValor = tMovCx.dValor
    objTransfCaixa.objMovCaixaDe.dtDataMovimento = tMovCx.dtDataMovimento
    objTransfCaixa.objMovCaixaDe.iCaixa = tMovCx.iCaixa
    objTransfCaixa.objMovCaixaDe.iFilialEmpresa = tMovCx.iFilialEmpresa
    
    'preenche um objccmovdia com os dados do movimento de saque do caixa
    lErro = CF("Mover_Dados_Saque_CCMovDia", objTransfCaixa.objMovCaixaDe, objCCMovDia)
    If lErro <> SUCESSO Then gError 105524

    objCCMovDia.iTipoMeioPagto = objTipoMovtoCaixa.iTMPLoja
    
    lErro = CF("CCMovDia_Exclui", objCCMovDia)
    If lErro <> SUCESSO Then gError 105525

    lErro = CF("CCMov_Exclui", objCCMovDia)
    If lErro <> SUCESSO Then gError 105526

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    TransfCaixa_Exclui_De = SUCESSO
    
    Exit Function
    
Erro_TransfCaixa_Exclui_De:

    TransfCaixa_Exclui_De = gErr

    Select Case gErr
        
        Case 105512
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 105513, 105514
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCAIXA1", gErr, objTransfCaixa.iFilialEmpresa, objTransfCaixa.lNumMovtoCxDe)
        
        Case 105515
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_NÃO_ENCONTRADO1", gErr, objTransfCaixa.iFilialEmpresa, objTransfCaixa.lNumMovtoCxDe)
            
        Case 105516
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_MOVIMENTOSCAIXA2", gErr, objTransfCaixa.iFilialEmpresa, objTransfCaixa.lNumMovtoCxDe)
        
        Case 105517, 105524, 105525, 105526
    
        Case 105518, 105519
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUE2", gErr, tMovCx.iFilialEmpresa, tMovCx.iCaixa, tMovCx.lNumRefInterna)
        
        Case 105520
            Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPRE_NAOENCONTRADO_CAIXA", gErr, tMovCx.iFilialEmpresa, tMovCx.iCaixa, tMovCx.lNumRefInterna)
            
        Case 105521
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CHEQUEPRE2", gErr, tMovCx.iFilialEmpresa, tMovCx.iCaixa, tMovCx.lNumRefInterna)
            
        Case 105522
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_CHEQUEPRE_LOJA1", gErr, tMovCx.iFilialEmpresa, tMovCx.iCaixa, tMovCx.lNumRefInterna)
            
        Case 105523
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_MOVCAIXA1", gErr, objTransfCaixa.iFilialEmpresa, objTransfCaixa.lNumMovtoCxDe)
    
        Case 105817
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUE3", gErr, tMovCx.lNumRefInterna)
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151337)
        
    End Select
    
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Private Function TransfCaixa_Exclui_Para(objTransfCaixa As ClassTransfCaixa) As Long
'exclui o destino de uma transferencia

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(1 To 4) As Long
Dim tCheque As typeChequePre
Dim objTipoMovtoCaixa As New ClassTipoMovtoCaixa
Dim tMovCx As typeMovimentoCaixa
Dim lSequencial As Long
Dim iFilialEmpresa As Integer
Dim objCCMovDia As New ClassCCMovDia
Dim objLog As New ClassLog

On Error GoTo Erro_TransfCaixa_Exclui_Para

    'abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 105537
    Next

    'ler o movimento de caixa referente ao destino ("PARA") da transferencia
    lErro = Comando_ExecutarPos(alComando(1), "SELECT NumRefInterna, Tipo, AdmMeioPagto, Parcelamento, Valor, DataMovimento, Caixa, FilialEmpresa, NumIntDocLog, QuantLog " & _
                                              "FROM MovimentosCaixa " & _
                                              "WHERE NumMovto = ? " & _
                                              "AND FilialEmpresa = ? ", 0, _
                                              tMovCx.lNumRefInterna, tMovCx.iTipo, tMovCx.iAdmMeioPagto, tMovCx.iParcelamento, tMovCx.dValor, tMovCx.dtDataMovimento, tMovCx.iCaixa, tMovCx.iFilialEmpresa, tMovCx.lNumIntDocLog, tMovCx.iQuantLog, _
                                              objTransfCaixa.lNumMovtoCxPara, _
                                              objTransfCaixa.iFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 105538

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 105539

    'se não encontrar, erro
    If lErro = AD_SQL_SEM_DADOS Then gError 105540

    'locko o movtoCaixa
    lErro = Comando_LockExclusive(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 105541

    'preencho um codigo de movtocaixa
    objTipoMovtoCaixa.iCodigo = tMovCx.iTipo

    'leio-o na memória
    lErro = CF("TiposMovtoCaixa_Le_Codigo", objTipoMovtoCaixa)
    If lErro <> SUCESSO Then gError 105542

    'se o tipo "PARA" for um cheque, o mesmo precisa ser excluído
    If objTipoMovtoCaixa.iTMPLoja = TIPOMEIOPAGTOLOJA_CHEQUE Then

        If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
        
            'seleciono o cheque na tabela de cheques
            lErro = Comando_ExecutarPos(alComando(2), "SELECT FilialEmpresaLoja, SequencialLoja, NaoEspecificado, Localizacao " & _
                                                      "FROM ChequePre WHERE FilialEmpresaLoja = ? AND Caixa = ? AND SequencialLoja  = ? ", 0, _
                                                      iFilialEmpresa, lSequencial, tCheque.iNaoEspecificado, tCheque.iLocalizacao, _
                                                      tMovCx.iFilialEmpresa, tMovCx.iCaixa, tMovCx.lNumRefInterna)
            If lErro <> AD_SQL_SUCESSO Then gError 105543
                        
        Else
                        
            'seleciono o cheque na tabela de cheques
            lErro = Comando_ExecutarPos(alComando(2), "SELECT FilialEmpresaLoja, SequencialLoja, NaoEspecificado, Localizacao " & _
                                                      "FROM ChequePre WHERE SequencialBack = ?", 0, _
                                                      iFilialEmpresa, lSequencial, tCheque.iNaoEspecificado, tCheque.iLocalizacao, _
                                                      tMovCx.lNumRefInterna)
            If lErro <> AD_SQL_SUCESSO Then gError 105818
                        
        End If


        'busco o primeiro
        lErro = Comando_BuscarPrimeiro(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 105544

        'se não encontrar->erro
        If lErro = AD_SQL_SEM_DADOS Then gError 105545

        'locko o cara
        lErro = Comando_LockExclusive(alComando(2))
        If lErro <> AD_SQL_SUCESSO Then gError 105546

        'atualizo o seu status para excluido
        lErro = Comando_ExecutarPos(alComando(3), "DELETE FROM ChequePre", alComando(2))
        If lErro <> AD_SQL_SUCESSO Then gError 105547

    End If

    'excluo o movimento "Para"
    lErro = Comando_ExecutarPos(alComando(4), "DELETE FROM MovimentosCaixa", alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 105548

    objTransfCaixa.objMovCaixaPara.iAdmMeioPagto = tMovCx.iAdmMeioPagto
    objTransfCaixa.objMovCaixaPara.iParcelamento = tMovCx.iParcelamento
    objTransfCaixa.objMovCaixaPara.dValor = tMovCx.dValor
    objTransfCaixa.objMovCaixaPara.dtDataMovimento = tMovCx.dtDataMovimento
    objTransfCaixa.objMovCaixaPara.iCaixa = tMovCx.iCaixa
    objTransfCaixa.objMovCaixaPara.iFilialEmpresa = tMovCx.iFilialEmpresa

    Set objCCMovDia = New ClassCCMovDia

    'preenche um objccmovdia com os dados do movimento de saque do caixa
    lErro = Mover_Dados_Deposito_CCMovDia(objTransfCaixa.objMovCaixaPara, objCCMovDia)
    If lErro <> SUCESSO Then gError 105549

    objCCMovDia.iTipoMeioPagto = objTipoMovtoCaixa.iTMPLoja

    lErro = CF("CCMovDia_Exclui", objCCMovDia)
    If lErro <> SUCESSO Then gError 105550

    lErro = CF("CCMov_Exclui", objCCMovDia)
    If lErro <> SUCESSO Then gError 105551

    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then

        'se a transferencia já está no backoffice ==> erro
        If objTransfCaixa.dtDataBackoffice <> DATA_NULA Then gError 105554

        objLog.lNumIntDoc = tMovCx.lNumIntDocLog
        objLog.iQuantLog = tMovCx.iQuantLog

        'grava o log
        lErro = CF("Log_Exclui", objLog)
        If lErro <> SUCESSO Then gError 105552

    End If

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    TransfCaixa_Exclui_Para = SUCESSO

    Exit Function

Erro_TransfCaixa_Exclui_Para:

    TransfCaixa_Exclui_Para = gErr

    Select Case gErr

        Case 105537
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 105538, 105539
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCAIXA1", gErr, objTransfCaixa.iFilialEmpresa, objTransfCaixa.lNumMovtoCxPara)

        Case 105540
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_NÃO_ENCONTRADO1", gErr, objTransfCaixa.iFilialEmpresa, objTransfCaixa.lNumMovtoCxPara)

        Case 105541
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_MOVIMENTOSCAIXA2", gErr, objTransfCaixa.iFilialEmpresa, objTransfCaixa.lNumMovtoCxPara)

        Case 105542, 105549, 105550, 105551, 105552

        Case 105543, 105544
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUE2", gErr, tMovCx.iFilialEmpresa, tMovCx.iCaixa, tMovCx.lNumRefInterna)

        Case 105545
            Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPRE_NAOENCONTRADO_CAIXA", gErr, tMovCx.iFilialEmpresa, tMovCx.iCaixa, tMovCx.lNumRefInterna)

        Case 105546
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CHEQUEPRE2", gErr, tMovCx.iFilialEmpresa, tMovCx.iCaixa, tMovCx.lNumRefInterna)

        Case 105547
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_CHEQUESPRE1", gErr, tMovCx.iFilialEmpresa, tMovCx.iCaixa, tMovCx.lNumRefInterna)

        Case 105548
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_MOVCAIXA1", gErr, objTransfCaixa.iFilialEmpresa, objTransfCaixa.lNumMovtoCxPara)

        Case 105554
            Call Rotina_Erro(vbOKOnly, "ERRO_TRANSFERENCIALOJA_DATABACKOFFICE", gErr, objTransfCaixa.iFilialEmpresa, objTransfCaixa.iCaixa, objTransfCaixa.lCodigoCaixa)

        Case 105818
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUE3", gErr, tMovCx.lNumRefInterna)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151338)

    End Select

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Registro_Back_TransfCaixa(ByVal colRegistro As Collection, sArquivo As String, lRegistro As Long) As Long
'Trata o registro de transferencia caixa e coloca os dados no bd do caixa central. sArquivo contem o nome do arquivo em que sRegistro foi lido.
'iRegistro é o numero do registro.

Dim iPosAtual As Integer
Dim iPosFimAtual As Integer
Dim objMovCx As New ClassTransfCaixa
Dim lErro As Long
Dim sRegistro As String
Dim objTransfCaixa As New ClassTransfCaixa
Dim objChequePara As New ClassChequePre

On Error GoTo Erro_Registro_Back_TransfCaixa
    
    sRegistro = colRegistro.Item(1)
    
    iPosFimAtual = InStr(sRegistro, Chr(vbKeyEscape))

    'guarda as infos da transferencia caixa
    lErro = CF("Back_TransfCaixa_Movcx", iPosAtual, iPosFimAtual, sRegistro, objTransfCaixa, objChequePara)
    If lErro <> SUCESSO Then gError 105556
    
    lErro = Verifica_Existencia_Sequencial(objTransfCaixa.objMovCaixaDe.lSequencial, objTransfCaixa.objMovCaixaDe.iCaixa, objMovCx.iFilialEmpresa)
    If lErro <> SUCESSO And lErro <> 112627 Then gError 105557
    
    If lErro <> 112627 Then
        'guarda as infos da transferencia caixa
        lErro = CF("Back_TransfCaixa_Grava", objTransfCaixa, objChequePara)
        If lErro <> SUCESSO Then gError 105558
    End If
    
    Registro_Back_TransfCaixa = SUCESSO

    Exit Function

Erro_Registro_Back_TransfCaixa:

    Registro_Back_TransfCaixa = gErr

    Select Case gErr

        Case 105556 To 105558

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151339)

    End Select

    Exit Function

End Function

Function Back_TransfCaixa_Movcx(iPosAtual As Integer, iPosFimAtual As Integer, sRegistro As String, ByVal objTransfCaixa As ClassTransfCaixa, ByVal objChequePara As ClassChequePre) As Long
'guarda as infos de movimento de caixa relativos a transferencia caixa

Dim lErro As Long

On Error GoTo Erro_Back_TransfCaixa_Movcx

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.lCodigoCaixa = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaDe.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaDe.lNumMovto = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaDe.iCaixa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaDe.iCodOperador = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaDe.lSequencial = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaDe.iTipo = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaDe.iAdmMeioPagto = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaDe.iParcelamento = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaDe.iTipoCartao = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaDe.lNumero = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaDe.dtDataMovimento = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaDe.dValor = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaDe.lCupomFiscal = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaDe.lNumRefInterna = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaDe.lMovtoTransf = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaDe.dHora = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaDe.lTransferencia = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaPara.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaPara.lNumMovto = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaPara.iCaixa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaPara.iCodOperador = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaPara.lSequencial = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaPara.iTipo = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaPara.iAdmMeioPagto = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaPara.iParcelamento = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaPara.iTipoCartao = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaPara.lNumero = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaPara.dtDataMovimento = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaPara.dValor = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaPara.lCupomFiscal = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaPara.lNumRefInterna = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaPara.lMovtoTransf = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaPara.dHora = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaPara.lTransferencia = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    If objTransfCaixa.objMovCaixaPara.iTipo = MOVIMENTOCAIXA_ENTRADA_TRANSF_CHEQUE Then

        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objChequePara.iBanco = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objChequePara.sAgencia = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)
    
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objChequePara.sContaCorrente = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)
    
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objChequePara.lNumero = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objChequePara.dtDataDeposito = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objChequePara.dValor = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objChequePara.sCPFCGC = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)
    
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objChequePara.iAprovado = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objChequePara.iNaoEspecificado = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objChequePara.lSequencialLoja = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objChequePara.iCaixa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objChequePara.lSequencialCaixa = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objChequePara.iLocalizacao = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
    End If

    Back_TransfCaixa_Movcx = SUCESSO

    Exit Function

Erro_Back_TransfCaixa_Movcx:

    Back_TransfCaixa_Movcx = gErr

    Select Case gErr

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151340)

    End Select

    Exit Function

End Function

Function Back_TransfCaixa_Grava(objTransfCaixa As ClassTransfCaixa, objChequePara As ClassChequePre) As Long
'toma as providencias para acertar os saldos e grava o log
'objTransfCaixa eh parametro de INPUT que traz os dados da transf

Dim lNumMovto As Long
Dim objLog As New ClassLog
Dim lErro As Long
Dim alComando(1 To 3) As Long
Dim iIndice As Integer
Dim iTipoMeioPagto As Integer
Dim objChequeDe As New ClassChequePre
Dim lCodigo As Long

On Error GoTo Erro_Back_TransfCaixa_Grava

     For iIndice = LBound(alComando) To UBound(alComando)
         alComando(iIndice) = Comando_Abrir()
         If alComando(iIndice) = 0 Then gError 105559
     Next
    
    objTransfCaixa.lNumMovtoCxDe = objTransfCaixa.objMovCaixaDe.lNumMovto
    objTransfCaixa.lNumMovtoCxPara = objTransfCaixa.objMovCaixaPara.lNumMovto
    
    lErro = Back_TransfCaixa_Grava_De(objTransfCaixa)
    If lErro <> SUCESSO Then gError 105560
    
    lErro = Back_TransfCaixa_Grava_Para(objTransfCaixa, objChequePara)
    If lErro <> SUCESSO Then gError 105561
    
    objTransfCaixa.iCaixa = objTransfCaixa.objMovCaixaDe.iCaixa
    objTransfCaixa.iFilialEmpresa = objTransfCaixa.objMovCaixaDe.iFilialEmpresa
    objTransfCaixa.lCodigo = objTransfCaixa.objMovCaixaDe.lTransferencia

    'inserir na tabela de movto caixa de
    lErro = Comando_Executar(alComando(1), "INSERT INTO MovimentosCaixa " & _
                                           "(FilialEmpresa, NumMovto, Caixa, Operador, Sequencial, Tipo, AdmMeioPagto, Parcelamento, TipoCartao, Numero, DataMovimento, Valor, Historico, Favorecido, CupomFiscal, NumRefInterna, MovtoTransf, MovtoEstorno, Gerente, CodConta, Hora, Transferencia, NumIntExt, NumIntDocLog, QuantLog) " & _
                                           "VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, " & _
                                           "?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", _
                                           objTransfCaixa.objMovCaixaDe.iFilialEmpresa, objTransfCaixa.objMovCaixaDe.lNumMovto, objTransfCaixa.objMovCaixaDe.iCaixa, objTransfCaixa.objMovCaixaDe.iCodOperador, objTransfCaixa.objMovCaixaDe.lSequencial, objTransfCaixa.objMovCaixaDe.iTipo, objTransfCaixa.objMovCaixaDe.iAdmMeioPagto, objTransfCaixa.objMovCaixaDe.iParcelamento, objTransfCaixa.objMovCaixaDe.iTipoCartao, objTransfCaixa.objMovCaixaDe.lNumero, objTransfCaixa.objMovCaixaDe.dtDataMovimento, objTransfCaixa.objMovCaixaDe.dValor, objTransfCaixa.objMovCaixaDe.sHistorico, _
                                           objTransfCaixa.objMovCaixaDe.sFavorecido, objTransfCaixa.objMovCaixaDe.lCupomFiscal, objTransfCaixa.objMovCaixaDe.lNumRefInterna, objTransfCaixa.objMovCaixaDe.lMovtoTransf, objTransfCaixa.objMovCaixaDe.lMovtoEstorno, objTransfCaixa.objMovCaixaDe.iGerente, objTransfCaixa.objMovCaixaDe.iCodConta, objTransfCaixa.objMovCaixaDe.dHora, objTransfCaixa.objMovCaixaDe.lTransferencia, objTransfCaixa.objMovCaixaDe.lNumIntExt, objTransfCaixa.objMovCaixaDe.lNumIntDocLog, objTransfCaixa.objMovCaixaDe.iQuantLog)
    If lErro <> SUCESSO Then gError 105562
    
    'inserir na tabela de movto caixa para
    lErro = Comando_Executar(alComando(2), "INSERT INTO MovimentosCaixa " & _
                                           "(FilialEmpresa, NumMovto, Caixa, Operador, Sequencial, Tipo, AdmMeioPagto, Parcelamento, TipoCartao, Numero, DataMovimento, Valor, Historico, Favorecido, CupomFiscal, NumRefInterna, MovtoTransf, MovtoEstorno, Gerente, CodConta, Hora, Transferencia, NumIntExt, NumIntDocLog, QuantLog) " & _
                                           "VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, " & _
                                           "?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", _
                                           objTransfCaixa.objMovCaixaPara.iFilialEmpresa, objTransfCaixa.objMovCaixaPara.lNumMovto, objTransfCaixa.objMovCaixaPara.iCaixa, objTransfCaixa.objMovCaixaPara.iCodOperador, objTransfCaixa.objMovCaixaPara.lSequencial, objTransfCaixa.objMovCaixaPara.iTipo, objTransfCaixa.objMovCaixaPara.iAdmMeioPagto, objTransfCaixa.objMovCaixaPara.iParcelamento, objTransfCaixa.objMovCaixaPara.iTipoCartao, objTransfCaixa.objMovCaixaPara.lNumero, objTransfCaixa.objMovCaixaPara.dtDataMovimento, objTransfCaixa.objMovCaixaPara.dValor, objTransfCaixa.objMovCaixaPara.sHistorico, _
                                           objTransfCaixa.objMovCaixaPara.sFavorecido, objTransfCaixa.objMovCaixaPara.lCupomFiscal, objTransfCaixa.objMovCaixaPara.lNumRefInterna, objTransfCaixa.objMovCaixaPara.lMovtoTransf, objTransfCaixa.objMovCaixaPara.lMovtoEstorno, objTransfCaixa.objMovCaixaPara.iGerente, objTransfCaixa.objMovCaixaPara.iCodConta, objTransfCaixa.objMovCaixaPara.dHora, objTransfCaixa.objMovCaixaPara.lTransferencia, objTransfCaixa.objMovCaixaPara.lNumIntExt, objTransfCaixa.objMovCaixaPara.lNumIntDocLog, objTransfCaixa.objMovCaixaPara.iQuantLog)
    If lErro <> SUCESSO Then gError 105563

    'inserir na tabela transferencialoja
    lErro = Comando_Executar(alComando(3), "INSERT INTO TransferenciaCaixa " & _
                                           "(FilialEmpresa, Codigo, NumMovtoCxDe, NumMovtoCxPara, CodigoCaixa, Caixa) VALUES (?,?,?,?,?,?)", _
                                           objTransfCaixa.iFilialEmpresa, objTransfCaixa.lCodigo, objTransfCaixa.lNumMovtoCxDe, objTransfCaixa.lNumMovtoCxPara, objTransfCaixa.lCodigoCaixa, objTransfCaixa.iCaixa)
    If lErro <> SUCESSO Then gError 105564


    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

   Back_TransfCaixa_Grava = SUCESSO

   Exit Function

Erro_Back_TransfCaixa_Grava:

    Back_TransfCaixa_Grava = gErr
    
    Select Case gErr
         
        Case 105559
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
    
        Case 105560, 105561
         
        Case 105562
            Call Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_MOVIMENTOSCAIXA", gErr, objTransfCaixa.objMovCaixaDe.lNumMovto)
    
        Case 105563
            Call Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_MOVIMENTOSCAIXA", gErr, objTransfCaixa.objMovCaixaPara.lNumMovto)
    
        Case 105564
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_TRANSFERENCIACAIXA", gErr, objTransfCaixa.iFilialEmpresa, objTransfCaixa.lCodigo)
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151341)
    
    End Select

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

   Exit Function

End Function

Private Function Back_TransfCaixa_Grava_De(objTransfCaixa As ClassTransfCaixa) As Long
'Gera os sequenciais, toma as providencias para acertar os saldos e grava o log
'objTransfCaixa eh parametro de INPUT que traz os dados da transf

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer
Dim iTipoMeioPagto As Integer
Dim objChequeDe As New ClassChequePre
Dim objCCMovDia As New ClassCCMovDia

On Error GoTo Erro_Back_TransfCaixa_Grava_De

     For iIndice = LBound(alComando) To UBound(alComando)
         alComando(iIndice) = Comando_Abrir()
         If alComando(iIndice) = 0 Then gError 105565
     Next
    
    'preenche um objccmovdia com os dados do movimento de saque do caixa
    lErro = CF("Mover_Dados_Saque_CCMovDia", objTransfCaixa.objMovCaixaDe, objCCMovDia)
    If lErro <> SUCESSO Then gError 105566

    'seleciona registro na tabela de TiposMovtocaixa
    lErro = Comando_Executar(alComando(1), "SELECT TipoMeioPagto FROM TiposMovtoCaixa WHERE Codigo=?", iTipoMeioPagto, objTransfCaixa.objMovCaixaDe.iTipo)
    If lErro <> AD_SQL_SUCESSO Then gError 105567

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 105568
    
    objCCMovDia.iTipoMeioPagto = iTipoMeioPagto

    'adiciona o mesmo no consolidado diário
    lErro = CF("CCMovDia_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 105569

    'adiciona o mesmo no consolidado anual no mês em questão
    lErro = CF("CCMov_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 105570
    
    If iTipoMeioPagto = TIPOMEIOPAGTOLOJA_CHEQUE Then
    
        objChequeDe.iFilialEmpresaLoja = objTransfCaixa.objMovCaixaDe.iFilialEmpresa
        objChequeDe.lSequencialLoja = objTransfCaixa.objMovCaixaDe.lNumRefInterna
    
        'Função que lê as Informações do Cheque passado como parâmetro no banco de dados, Carregando no objCheque
        lErro = CF("Cheque_Le_SequencialLoja", objChequeDe)
        If lErro <> SUCESSO And lErro <> 126049 Then gError 105571
    
        'se o cheque nao tiver sido encontrado ==> erro
        If lErro = 126049 Then gError 105572
    
        objChequeDe.iStatus = STATUS_EXCLUIDO
        
        'exclui o cheque em questao, alterando sua flag de status para excluido
        lErro = Cheque_Altera_Status_EmTrans(objChequeDe)
        If lErro <> SUCESSO Then gError 126003
    
        objTransfCaixa.objMovCaixaDe.lNumRefInterna = objChequeDe.lSequencialBack
        
    End If

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

   Back_TransfCaixa_Grava_De = SUCESSO

   Exit Function

Erro_Back_TransfCaixa_Grava_De:

    Back_TransfCaixa_Grava_De = gErr
    
    Select Case gErr
    
        Case 105565
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
    
        Case 105566, 105569, 105570, 105571, 126003
         
        Case 105567, 105568
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOSMOVTOCAIXA1", gErr, objTransfCaixa.objMovCaixaDe.iTipo)
    
        Case 105572
            Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPRE_NAOENCONTRADO_CAIXA", gErr, objChequeDe.iFilialEmpresaLoja, objChequeDe.iCaixa, objChequeDe.lSequencialCaixa)
         
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151342)
    
    End Select

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

   Exit Function

End Function

Private Function Back_TransfCaixa_Grava_Para(objTransfCaixa As ClassTransfCaixa, objChequePara As ClassChequePre) As Long
'Gera os sequenciais, toma as providencias para acertar os saldos e grava o log
'objTransfCaixa eh parametro de INPUT que traz os dados da transf

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer
Dim iTipoMeioPagto As Integer
Dim lSeqBackNovo As Long
Dim objCCMovDia As New ClassCCMovDia

On Error GoTo Erro_Back_TransfCaixa_Grava_Para

     For iIndice = LBound(alComando) To UBound(alComando)
         alComando(iIndice) = Comando_Abrir()
         If alComando(iIndice) = 0 Then gError 105573
     Next
    
    'seleciona registro na tabela de TiposMovtocaixa
    lErro = Comando_Executar(alComando(1), "SELECT TipoMeioPagto FROM TiposMovtoCaixa WHERE Codigo=?", iTipoMeioPagto, objTransfCaixa.objMovCaixaPara.iTipo)
    If lErro <> AD_SQL_SUCESSO Then gError 105574

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 105575
    
    objCCMovDia.iTipoMeioPagto = iTipoMeioPagto

    If iTipoMeioPagto = TIPOMEIOPAGTOLOJA_CHEQUE Then

        'preencho o número de movto do cheque
        objChequePara.iFilialEmpresaLoja = objTransfCaixa.objMovCaixaPara.iFilialEmpresa
        
        'Chama a rotina que gera o sequencial
        lErro = CF("Config_ObterNumInt", "CPRConfig", "COD_PROX_CHEQUE_BACKOFFICE", lSeqBackNovo, 1)
        If lErro <> SUCESSO Then gError 105576

        'preencho o sequencialLoja com o novo código gerado
        objChequePara.lSequencialBack = lSeqBackNovo
        objTransfCaixa.objMovCaixaPara.lNumRefInterna = lSeqBackNovo
        objChequePara.lNumMovtoCaixa = objTransfCaixa.objMovCaixaPara.lNumMovto
        objChequePara.iFilialEmpresa = objChequePara.iFilialEmpresaLoja
        objChequePara.dtDataEmissao = objTransfCaixa.objMovCaixaPara.dtDataMovimento

        'insiro o mesmo na tabela de cheques
        lErro = CF("Cheque_Insere", objChequePara)
        If lErro <> SUCESSO Then gError 105577

    End If

    'preenche um objccmovdia com os dados do movimento de saque do caixa
    lErro = Mover_Dados_Deposito_CCMovDia(objTransfCaixa.objMovCaixaPara, objCCMovDia)
    If lErro <> SUCESSO Then gError 105578

    'adiciona o mesmo no consolidado diário
    lErro = CF("CCMovDia_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 105579

    'adiciona o mesmo no consolidado anual no mês em questão
    lErro = CF("CCMov_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 105580

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

   Back_TransfCaixa_Grava_Para = SUCESSO

   Exit Function

Erro_Back_TransfCaixa_Grava_Para:

    Back_TransfCaixa_Grava_Para = gErr
    
    Select Case gErr
   
        Case 105573
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
         
        Case 105574, 105575
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOSMOVTOCAIXA1", gErr, objTransfCaixa.objMovCaixaPara.iTipo)
    
        Case 105576 To 105580
         
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151343)
    
    End Select

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

   Exit Function

End Function

Function Registro_Back_TransfCentral(ByVal colRegistro As Collection, sArquivo As String, lRegistro As Long) As Long
'Trata o registro de transferencia caixa e coloca os dados no bd do caixa central. sArquivo contem o nome do arquivo em que sRegistro foi lido.
'iRegistro é o numero do registro.

Dim iPosAtual As Integer
Dim iPosFimAtual As Integer
Dim objMovCx As New ClassTransfCaixa
Dim lErro As Long
Dim sRegistro As String
Dim objTransfCaixa As New ClassTransfCaixa
Dim objChequePara As New ClassChequePre

On Error GoTo Erro_Registro_Back_TransfCentral
    
    sRegistro = colRegistro.Item(1)
    
    iPosFimAtual = InStr(sRegistro, Chr(vbKeyEscape))

    'guarda as infos da transferencia caixa
    lErro = CF("Back_TransfCentral_Movcx", iPosAtual, iPosFimAtual, sRegistro, objTransfCaixa, objChequePara)
    If lErro <> SUCESSO Then gError 105596
    
    lErro = Verifica_Existencia_Sequencial(objTransfCaixa.objMovCaixaDe.lSequencial, objTransfCaixa.objMovCaixaDe.iCaixa, objMovCx.iFilialEmpresa)
    If lErro <> SUCESSO And lErro <> 112627 Then gError 105597
    
    If lErro <> 112627 Then
        'guarda as infos da transferencia caixa
        lErro = CF("Back_TransfCentral_Grava", objTransfCaixa, objChequePara)
        If lErro <> SUCESSO Then gError 105598
    End If
    
    Registro_Back_TransfCentral = SUCESSO

    Exit Function

Erro_Registro_Back_TransfCentral:

    Registro_Back_TransfCentral = gErr

    Select Case gErr

        Case 105596 To 105598

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151344)

    End Select

    Exit Function

End Function

Function Back_TransfCentral_Movcx(iPosAtual As Integer, iPosFimAtual As Integer, sRegistro As String, ByVal objTransfCaixa As ClassTransfCaixa, ByVal objChequePara As ClassChequePre) As Long
'guarda as infos de movimento de caixa relativos a transferencia caixa

Dim lErro As Long

On Error GoTo Erro_Back_TransfCentral_Movcx

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.lCodigo = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaDe.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaDe.lNumMovto = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaDe.iCaixa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaDe.iCodOperador = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaDe.lSequencial = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaDe.iTipo = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaDe.iAdmMeioPagto = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaDe.iParcelamento = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaDe.iTipoCartao = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaDe.lNumero = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaDe.dtDataMovimento = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaDe.dValor = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaDe.lCupomFiscal = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaDe.lNumRefInterna = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaDe.lMovtoTransf = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaDe.dHora = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaDe.lTransferencia = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaPara.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaPara.lNumMovto = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaPara.iCaixa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))


    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaPara.iCodOperador = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaPara.lSequencial = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaPara.iTipo = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaPara.iAdmMeioPagto = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaPara.iParcelamento = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaPara.iTipoCartao = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaPara.lNumero = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaPara.dtDataMovimento = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaPara.dValor = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaPara.lCupomFiscal = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaPara.lNumRefInterna = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaPara.lMovtoTransf = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaPara.dHora = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objTransfCaixa.objMovCaixaPara.lTransferencia = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    If objTransfCaixa.objMovCaixaPara.iTipo = MOVIMENTOCAIXA_ENTRADA_TRANSF_CHEQUE Then
    
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objChequePara.iBanco = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objChequePara.sAgencia = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)
    
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objChequePara.sContaCorrente = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)
    
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objChequePara.lNumero = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objChequePara.dtDataDeposito = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objChequePara.dValor = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objChequePara.sCPFCGC = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)
    
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objChequePara.iAprovado = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objChequePara.iNaoEspecificado = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objChequePara.lSequencialLoja = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objChequePara.iCaixa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objChequePara.lSequencialCaixa = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objChequePara.iLocalizacao = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
        iPosAtual = iPosFimAtual + 1
        iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
        objChequePara.dtDataEmissao = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
        objChequePara.iFilialEmpresaLoja = objTransfCaixa.objMovCaixaPara.iFilialEmpresa
        objChequePara.iFilialEmpresa = objTransfCaixa.objMovCaixaPara.iFilialEmpresa
    
    End If

    Back_TransfCentral_Movcx = SUCESSO

    Exit Function

Erro_Back_TransfCentral_Movcx:

    Back_TransfCentral_Movcx = gErr

    Select Case gErr

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151345)

    End Select

    Exit Function

End Function

Public Function Back_TransfCentral_Grava(ByVal objTransfCaixa As ClassTransfCaixa, ByVal objChequePara As ClassChequePre) As Long
'Essa funcao grava/altera dados da transferencia...
'no caso da alteracao, ela exclui o registro antigo e inclui um novo
'objTransfCaixa eh parametro de INPUT e traz os dados da transf a serem gravados
'objChequeDe e Para sao parametros de INPUT que trazem os dados do cheque
'envolvidos numa transferencia

Dim lErro As Long
Dim lTransacao As Long
Dim lComando As Long
Dim objCaixa As New ClassCaixa
Dim objTransfCaixaAux As New ClassTransfCaixa

On Error GoTo Erro_Back_TransfCentral_Grava

    'abre o comando
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 105586
    
    'pega o codigo e filial do caixa central para locka-lo
    objCaixa.iCodigo = CODIGO_CAIXA_CENTRAL
    objCaixa.iFilialEmpresa = objTransfCaixa.iFilialEmpresa
    
    'fazer o lock do caixa central
    lErro = CF("Caixa_Lock", objCaixa)
    If lErro <> SUCESSO And lErro <> 103776 Then gError 105587
    
    If lErro = 103776 Then gError 105588
    
    'se a transf for menor do q a data inicial da caixa
    If objCaixa.dtDataInicial > objTransfCaixa.objMovCaixaDe.dtDataMovimento Then gError 105589
    
    objTransfCaixaAux.iFilialEmpresa = objTransfCaixa.iFilialEmpresa
    objTransfCaixaAux.lCodigo = objTransfCaixa.lCodigo
    
    'tenta ler a transferencia
    lErro = CF("TransferenciaLoja_Le", objTransfCaixaAux)
    If lErro <> SUCESSO And lErro <> 105235 Then gError 105590
    
    'se  tiver sido cadastrada, exclui primeiro para depois reincluí-la
    If lErro = SUCESSO Then
    
        lErro = CF("TransfCentral_Exclui_EmTrans", objTransfCaixaAux)
        If lErro <> SUCESSO Then gError 105591
    
    End If
    
    'inclui a transferência
    lErro = Back_TransfCentral_Inclui(objTransfCaixa, objChequePara)
    If lErro <> SUCESSO Then gError 105592
    
    Call Comando_Fechar(lComando)
    
    Back_TransfCentral_Grava = SUCESSO
    
    Exit Function

Erro_Back_TransfCentral_Grava:

    Back_TransfCentral_Grava = gErr

    Select Case gErr
        
        Case 105586
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 105587, 105590 To 105592
        
        Case 105588
            Call Rotina_Erro(vbOKOnly, "ERRO_CAIXACENTRAL_NAO_EXISTENTE", gErr)
        
        Case 105589
            Call Rotina_Erro(vbOKOnly, "ERRO_DATATRANSF_MENOR_DATAINICAIXA", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151346)
        
    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Public Function Back_TransfCentral_Inclui(objTransfCaixa As ClassTransfCaixa, objChequePara As ClassChequePre) As Long
'Gera os sequenciais, toma as providencias para acertar os saldos e grava o log
'objTransfCaixa eh parametro de INPUT que traz os dados da transf
'objChequeDe e Para sao parametros de INPUT que trazem os cheques
'associados as transfs

Dim lNumMovto As Long
Dim lSeq As Long
Dim objLog As New ClassLog
Dim lErro As Long
Dim alComando(1 To 3) As Long
Dim iIndice As Integer
Dim objChequeDe As New ClassChequePre

On Error GoTo Erro_Back_TransfCentral_Inclui

     For iIndice = LBound(alComando) To UBound(alComando)
         alComando(iIndice) = Comando_Abrir()
         If alComando(iIndice) = 0 Then gError 105593
     Next
    
    objChequeDe.lSequencialLoja = objTransfCaixa.objMovCaixaDe.lNumRefInterna
    objChequeDe.iFilialEmpresaLoja = objTransfCaixa.objMovCaixaDe.iFilialEmpresa
    
    'chama funcao para tratar a gravacao de origem
    lErro = Back_TransfCentral_GravaDe(objTransfCaixa, objChequeDe)
    If lErro <> SUCESSO Then gError 105605
    
    'chama funcao para tratar a gravacao de destino
    lErro = Back_TransfCentral_GravaPara(objTransfCaixa, objChequePara)
    If lErro <> SUCESSO Then gError 105606

    objTransfCaixa.iFilialEmpresa = objTransfCaixa.objMovCaixaDe.iFilialEmpresa
    objTransfCaixa.lNumMovtoCxDe = objTransfCaixa.objMovCaixaDe.lNumMovto
    objTransfCaixa.lNumMovtoCxPara = objTransfCaixa.objMovCaixaPara.lNumMovto

    'inserir na tabela de movto caixa de
    lErro = Comando_Executar(alComando(1), "INSERT INTO MovimentosCaixa " & _
                                           "(FilialEmpresa, NumMovto, Caixa, Operador, Sequencial, Tipo, AdmMeioPagto, Parcelamento, TipoCartao, Numero, DataMovimento, Valor, Historico, Favorecido, CupomFiscal, NumRefInterna, MovtoTransf, MovtoEstorno, Gerente, CodConta, Hora, Transferencia, NumIntExt, NumIntDocLog, QuantLog) " & _
                                           "VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, " & _
                                           "?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", _
                                           objTransfCaixa.objMovCaixaDe.iFilialEmpresa, objTransfCaixa.objMovCaixaDe.lNumMovto, objTransfCaixa.objMovCaixaDe.iCaixa, objTransfCaixa.objMovCaixaDe.iCodOperador, objTransfCaixa.objMovCaixaDe.lSequencial, objTransfCaixa.objMovCaixaDe.iTipo, objTransfCaixa.objMovCaixaDe.iAdmMeioPagto, objTransfCaixa.objMovCaixaDe.iParcelamento, objTransfCaixa.objMovCaixaDe.iTipoCartao, objTransfCaixa.objMovCaixaDe.lNumero, objTransfCaixa.objMovCaixaDe.dtDataMovimento, objTransfCaixa.objMovCaixaDe.dValor, objTransfCaixa.objMovCaixaDe.sHistorico, _
                                           objTransfCaixa.objMovCaixaDe.sFavorecido, objTransfCaixa.objMovCaixaDe.lCupomFiscal, objTransfCaixa.objMovCaixaDe.lNumRefInterna, objTransfCaixa.objMovCaixaDe.lMovtoTransf, objTransfCaixa.objMovCaixaDe.lMovtoEstorno, objTransfCaixa.objMovCaixaDe.iGerente, objTransfCaixa.objMovCaixaDe.iCodConta, objTransfCaixa.objMovCaixaDe.dHora, objTransfCaixa.objMovCaixaDe.lTransferencia, objTransfCaixa.objMovCaixaDe.lNumIntExt, objTransfCaixa.objMovCaixaDe.lNumIntDocLog, objTransfCaixa.objMovCaixaDe.iQuantLog)
    If lErro <> SUCESSO Then gError 105607
    
    'inserir na tabela de movto caixa para
    lErro = Comando_Executar(alComando(2), "INSERT INTO MovimentosCaixa " & _
                                           "(FilialEmpresa, NumMovto, Caixa, Operador, Sequencial, Tipo, AdmMeioPagto, Parcelamento, TipoCartao, Numero, DataMovimento, Valor, Historico, Favorecido, CupomFiscal, NumRefInterna, MovtoTransf, MovtoEstorno, Gerente, CodConta, Hora, Transferencia, NumIntExt, NumIntDocLog, QuantLog) " & _
                                           "VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, " & _
                                           "?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", _
                                           objTransfCaixa.objMovCaixaPara.iFilialEmpresa, objTransfCaixa.objMovCaixaPara.lNumMovto, objTransfCaixa.objMovCaixaPara.iCaixa, objTransfCaixa.objMovCaixaPara.iCodOperador, objTransfCaixa.objMovCaixaPara.lSequencial, objTransfCaixa.objMovCaixaPara.iTipo, objTransfCaixa.objMovCaixaPara.iAdmMeioPagto, objTransfCaixa.objMovCaixaPara.iParcelamento, objTransfCaixa.objMovCaixaPara.iTipoCartao, objTransfCaixa.objMovCaixaPara.lNumero, objTransfCaixa.objMovCaixaPara.dtDataMovimento, objTransfCaixa.objMovCaixaPara.dValor, objTransfCaixa.objMovCaixaPara.sHistorico, _
                                           objTransfCaixa.objMovCaixaPara.sFavorecido, objTransfCaixa.objMovCaixaPara.lCupomFiscal, objTransfCaixa.objMovCaixaPara.lNumRefInterna, objTransfCaixa.objMovCaixaPara.lMovtoTransf, objTransfCaixa.objMovCaixaPara.lMovtoEstorno, objTransfCaixa.objMovCaixaPara.iGerente, objTransfCaixa.objMovCaixaPara.iCodConta, objTransfCaixa.objMovCaixaPara.dHora, objTransfCaixa.objMovCaixaPara.lTransferencia, objTransfCaixa.objMovCaixaPara.lNumIntExt, objTransfCaixa.objMovCaixaPara.lNumIntDocLog, objTransfCaixa.objMovCaixaPara.iQuantLog)
    If lErro <> SUCESSO Then gError 105608

    'inserir na tabela transferencialoja
    lErro = Comando_Executar(alComando(3), "INSERT INTO TransferenciaLoja " & _
                                           "(FilialEmpresa, Codigo, NumMovtoCxDe, NumMovtoCxPara) VALUES ( ?, ?, ?, ?)", _
                                           objTransfCaixa.iFilialEmpresa, objTransfCaixa.lCodigo, objTransfCaixa.lNumMovtoCxDe, objTransfCaixa.lNumMovtoCxPara)
    If lErro <> SUCESSO Then gError 105609

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

   Back_TransfCentral_Inclui = SUCESSO

   Exit Function

Erro_Back_TransfCentral_Inclui:

    Back_TransfCentral_Inclui = gErr
    
    Select Case gErr
    
        Case 105593
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
    
        Case 105605, 105606
         
        Case 105607
            Call Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_MOVIMENTOSCAIXA", gErr, objTransfCaixa.objMovCaixaDe.lNumMovto)
    
        Case 105608
            Call Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_MOVIMENTOSCAIXA", gErr, objTransfCaixa.objMovCaixaPara.lNumMovto)
    
        Case 105609
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_TRANSFERENCIALOJA", gErr, objTransfCaixa.iFilialEmpresa, objTransfCaixa.lCodigo)
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151347)
    
    End Select

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

   Exit Function

End Function

Private Function Back_TransfCentral_GravaDe(ByVal objTransfCaixa As ClassTransfCaixa, ByVal objChequeDe As ClassChequePre) As Long
'deve ser chamada em TRANS!!!
'objTransfCaixa eh parametro de Input que traz os dados da transferencia
'objChequeDe eh parametro de input q traz os dados do cheque caso o tipo meio pagto de origem seja cheque

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim objTipoMovtoCaixa As New ClassTipoMovtoCaixa
Dim objTMPLojaFilial As New ClassTMPLojaFilial
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim objBorderoCheque As New ClassBorderoCheque
Dim iIndice As Integer
Dim lNumIntCheque As Long
Dim objCCMovDia As New ClassCCMovDia
Dim objCupomFiscal As New ClassCupomFiscal
Dim objCarne As New ClassCarne
Dim objBaixaCarne As New ClassBaixasCarne

On Error GoTo Erro_Back_TransfCentral_GravaDe

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 105610
    Next

    'preencho codigo de um tipomovtocaixa
    objTipoMovtoCaixa.iCodigo = objTransfCaixa.objMovCaixaDe.iTipo

    'leio o tmplojafilial desse movto caixa
    lErro = CF("TiposMovtoCaixa_Le_Codigo", objTipoMovtoCaixa)
    If lErro <> SUCESSO Then gError 105611

    'guardo os dados para alterar qq coisa que seja não especificada
    objTMPLojaFilial.iTipo = objTipoMovtoCaixa.iTMPLoja
    objTMPLojaFilial.iFilialEmpresa = objTransfCaixa.objMovCaixaDe.iFilialEmpresa
    objTMPLojaFilial.dSaldo = -objTransfCaixa.objMovCaixaDe.dValor

    'guardo os dados para alterar qq coisa que seja especificada
    objAdmMeioPagtoCondPagto.iFilialEmpresa = objTransfCaixa.objMovCaixaDe.iFilialEmpresa
    objAdmMeioPagtoCondPagto.iAdmMeioPagto = objTransfCaixa.objMovCaixaDe.iAdmMeioPagto
    objAdmMeioPagtoCondPagto.iParcelamento = objTransfCaixa.objMovCaixaDe.iParcelamento
    objAdmMeioPagtoCondPagto.dSaldo = -objTransfCaixa.objMovCaixaDe.dValor

    Select Case objTipoMovtoCaixa.iTMPLoja

        Case TIPOMEIOPAGTOLOJA_DINHEIRO

            'altera o saldo em dinheiro
            lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTMPLojaFilial, FAZ_TESTE_SALDO)
            If lErro <> SUCESSO Then gError 105612

        Case TIPOMEIOPAGTOLOJA_CHEQUE

            'locka o cheque
            lErro = CF("Cheque_Lock1", objChequeDe)
            If lErro <> SUCESSO And lErro <> 105584 Then gError 105613

            objTransfCaixa.objMovCaixaDe.lNumRefInterna = objChequeDe.lSequencialBack

            'se o cheque não for encontrado-> erro
            If lErro = 105584 Then gError 105614

            If objChequeDe.iStatus = STATUS_EXCLUIDO Then gError 105615

            'se o cheque for especificado
            If objChequeDe.iNaoEspecificado = CHEQUE_ESPECIFICADO Then

                'altera na de especificados
                lErro = CF("AdmMeioPagtoCondPagto_Altera_Saldo", objAdmMeioPagtoCondPagto, FAZ_TESTE_SALDO)
                If lErro <> SUCESSO Then gError 105616

            'caso contrário
            Else

                'altera na de não-especificados
                lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTMPLojaFilial, FAZ_TESTE_SALDO)
                If lErro <> SUCESSO Then gError 105617

            End If

            'exclui o cheque
            lErro = CF("Cheque_Exclui_EmTrans", objChequeDe)
            If lErro <> SUCESSO Then gError 105618

        Case TIPOMEIOPAGTOLOJA_CARTAO_CREDITO, TIPOMEIOPAGTOLOJA_CARTAO_DEBITO, TIPOMEIOPAGTOLOJA_VALE_TICKET, TIPOMEIOPAGTOLOJA_OUTROS, TIPOMEIOPAGTOLOJA_VALE_REFEICAO, TIPOMEIOPAGTOLOJA_VALE_PRESENTE, TIPOMEIOPAGTOLOJA_VALE_COMBUSTIVEL
            
            'se for especificado
            If objTransfCaixa.objMovCaixaDe.iAdmMeioPagto <> 0 Then
            
                'altero na tabela de especificados
                lErro = CF("AdmMeioPagtoCondPagto_Altera_Saldo", objAdmMeioPagtoCondPagto, FAZ_TESTE_SALDO)
                If lErro <> SUCESSO Then gError 105624
                
            Else
            
                'caso contrário, altero na de não especificados
                lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTMPLojaFilial, FAZ_TESTE_SALDO)
                If lErro <> SUCESSO Then gError 105625
            
            End If
    
    End Select
    
    'preenche um objccmovdia com os dados do movimento de saque do caixa
    lErro = CF("Mover_Dados_Saque_CCMovDia", objTransfCaixa.objMovCaixaDe, objCCMovDia)
    If lErro <> SUCESSO Then gError 105626

    objCCMovDia.iTipoMeioPagto = objTipoMovtoCaixa.iTMPLoja

    'adiciona o mesmo no consolidado diário
    lErro = CF("CCMovDia_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 105627

    'adiciona o mesmo no consolidado anual no mês em questão
    lErro = CF("CCMov_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 105628
    
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Back_TransfCentral_GravaDe = SUCESSO
    
    Exit Function

Erro_Back_TransfCentral_GravaDe:
    
    Back_TransfCentral_GravaDe = gErr
    
    Select Case gErr
    
        Case 105610
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
    
        Case 105611, 105612, 105613, 105616, 105617, 105618, 105624 To 105628
            
        Case 105614
            Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPRE_NAOENCONTRADO_LOJA", gErr, objChequeDe.iFilialEmpresaLoja, objChequeDe.lSequencialLoja)
            
        Case 105615
            Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUE_EXCLUIDO", gErr, objChequeDe.lSequencialLoja)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151348)
    
    End Select
    
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Private Function Back_TransfCentral_GravaPara(ByVal objTransfCaixa As ClassTransfCaixa, ByVal objChequePara As ClassChequePre) As Long
'Deve ser chamada em TRANS!!!
'objTransfCaixa eh parametro de Input que traz os dados da transferencia
'objChequePara eh parametro de input q traz os dados do cheque caso o tipo meio pagto de origem seja cheque

Dim lErro As Long
Dim objMovimentoCaixa As ClassMovimentoCaixa
Dim sComando As String
Dim iIndice As Integer
Dim objTipoMovtoCaixa As New ClassTipoMovtoCaixa
Dim objTMPLojaFilial As New ClassTMPLojaFilial
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim objCupomFiscal As New ClassCupomFiscal
Dim lCodigo As Long
Dim objCCMovDia As New ClassCCMovDia
Dim lSeqLojaNovo As Long
Dim lSeqBackNovo As Long
Dim objCarne As New ClassCarne
Dim objBaixaCarne As New ClassBaixasCarne

On Error GoTo Erro_Back_TransfCentral_GravaPara

    'verifico o tipo movtocaixa
    objTipoMovtoCaixa.iCodigo = objTransfCaixa.objMovCaixaPara.iTipo
    
    lErro = CF("TiposMovtoCaixa_Le_Codigo", objTipoMovtoCaixa)
    If lErro <> SUCESSO Then gError 105629
    
    'guardo os dados para alterar qq coisa que seja não especificada
    objTMPLojaFilial.iTipo = objTipoMovtoCaixa.iTMPLoja
    objTMPLojaFilial.iFilialEmpresa = objTransfCaixa.objMovCaixaPara.iFilialEmpresa
    objTMPLojaFilial.dSaldo = objTransfCaixa.objMovCaixaPara.dValor

    'guardo os dados para alterar qq coisa que seja especificada
    objAdmMeioPagtoCondPagto.iFilialEmpresa = objTransfCaixa.objMovCaixaPara.iFilialEmpresa
    objAdmMeioPagtoCondPagto.iAdmMeioPagto = objTransfCaixa.objMovCaixaPara.iAdmMeioPagto
    objAdmMeioPagtoCondPagto.iParcelamento = objTransfCaixa.objMovCaixaPara.iParcelamento
    objAdmMeioPagtoCondPagto.dSaldo = objTransfCaixa.objMovCaixaPara.dValor
    
    'verifica qual eh o tipo de Destino
    Select Case objTipoMovtoCaixa.iTMPLoja
    
        Case TIPOMEIOPAGTOLOJA_DINHEIRO
        
            'altero na tabela TipoMeioPagtoLojaFilial o saldo em dinheiro
            lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTMPLojaFilial)
            If lErro <> SUCESSO Then gError 105630
        
        Case TIPOMEIOPAGTOLOJA_CHEQUE
        
            'se o cheque for especificado
            If objChequePara.iNaoEspecificado = CHEQUE_ESPECIFICADO Then
            
                'soma o saldo na tabela admmeiopagtocondpagto
                lErro = CF("AdmMeioPagtoCondPagto_Altera_Saldo", objAdmMeioPagtoCondPagto)
                If lErro <> SUCESSO Then gError 105631
            
            Else
            
                'se for não especificado, somo o saldo na tabela tipomeiopagtolojafilial
                lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTMPLojaFilial)
                If lErro <> SUCESSO Then gError 105632
            
            End If
            
            'preencho o número de movto do cheque
            objChequePara.lNumMovtoCaixa = objTransfCaixa.objMovCaixaPara.lNumMovto
            
            'Chama a rotina que gera o sequencial
            lErro = CF("Config_ObterNumInt", "CPRConfig", "COD_PROX_CHEQUE_BACKOFFICE", lSeqBackNovo, 1)
            If lErro <> SUCESSO Then gError 105633
    
            'preencho o sequencialLoja com o novo código gerado
            objChequePara.lSequencialBack = lSeqBackNovo
            objTransfCaixa.objMovCaixaPara.lNumRefInterna = lSeqBackNovo
        
            'insiro o mesmo na tabela de cheques
            lErro = CF("Cheque_Insere", objChequePara)
            If lErro <> SUCESSO Then gError 105634
        
        Case TIPOMEIOPAGTOLOJA_CARTAO_CREDITO, TIPOMEIOPAGTOLOJA_CARTAO_DEBITO, TIPOMEIOPAGTOLOJA_VALE_TICKET, TIPOMEIOPAGTOLOJA_OUTROS, TIPOMEIOPAGTOLOJA_VALE_REFEICAO, TIPOMEIOPAGTOLOJA_VALE_PRESENTE, TIPOMEIOPAGTOLOJA_VALE_COMBUSTIVEL
        
            'se a administradora foi especificada
            If objTransfCaixa.objMovCaixaPara.iAdmMeioPagto <> 0 Then
            
                'altero saldo na tabela admmeiopagtocondpagto
                lErro = CF("AdmMeioPagtoCondPagto_Altera_Saldo", objAdmMeioPagtoCondPagto)
                If lErro <> SUCESSO Then gError 105635
            
            Else
            
                'altero saldo na tabela tipomeiopagtolojafilial
                lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTMPLojaFilial)
                If lErro <> SUCESSO Then gError 105636
            
            End If
        
    End Select
    
    'preenche um objccmovdia com os dados do movimento de saque do caixa
    lErro = Mover_Dados_Deposito_CCMovDia(objTransfCaixa.objMovCaixaPara, objCCMovDia)
    If lErro <> SUCESSO Then gError 105637

    objCCMovDia.iTipoMeioPagto = objTipoMovtoCaixa.iTMPLoja
    
    'adiciona o mesmo no consolidado diário
    lErro = CF("CCMovDia_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 105638

    'adiciona o mesmo no consolidado anual no mês em questão
    lErro = CF("CCMov_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 105639
    
    Back_TransfCentral_GravaPara = SUCESSO
    
    Exit Function

Erro_Back_TransfCentral_GravaPara:
    
    Back_TransfCentral_GravaPara = gErr
    
    Select Case gErr
    
        Case 105629 To 105639
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151349)
    
    End Select
    
    Exit Function
    
End Function

Private Function CCBack_TransfCentral(ByVal objLog As ClassLog) As Long
'grava em TransfCentral a DataBackoffice

Dim lErro As Long
Dim sRegistro As String
Dim iPosAtual As Integer
Dim iPosFimAtual As Integer
Dim iFilialEmpresa As Integer
Dim lCodigo As Long
Dim iIndice As Integer
Dim alComando(1 To 2) As Long
Dim dtDataBackoffice As Date

On Error GoTo Erro_CCBack_TransfCentral

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 105599
    Next

    sRegistro = objLog.sLog

    iPosAtual = 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    lCodigo = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    'seleciona o transfcentral em questao
    lErro = Comando_ExecutarPos(alComando(1), "SELECT DataBackoffice FROM TransferenciaLoja WHERE FilialEmpresa=? AND Codigo=?", 0, dtDataBackoffice, iFilialEmpresa, lCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 105600

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 105601

    'se nao existir-> erro
    If lErro = AD_SQL_SEM_DADOS Then gError 105602

    'seleciona o bordero em questao
    lErro = Comando_ExecutarPos(alComando(2), "UPDATE TransferenciaLoja SET DataBackoffice = ?", alComando(1), gdtDataAtual)
    If lErro <> AD_SQL_SUCESSO Then gError 105603

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    CCBack_TransfCentral = SUCESSO

    Exit Function

Erro_CCBack_TransfCentral:

    CCBack_TransfCentral = gErr

    Select Case gErr

        Case 105599
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 105600, 105601
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TRANSFERENCIALOJA", gErr, iFilialEmpresa, lCodigo)

        Case 105602
            Call Rotina_Erro(vbOKOnly, "ERRO_TRANSFERENCIALOJA_NAOCADASTRADA", gErr, iFilialEmpresa, lCodigo)

        Case 105603
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_TRANSFERENCIALOJA", gErr, iFilialEmpresa, lCodigo)

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151350)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Cheque_Altera_Status_EmTrans(objCheque As ClassChequePre) As Long
'altera o status do cheque passado como parametro.
'IMPORTANTE: DEVE ESTAR EM TRANSACAO

Dim lErro As Long
Dim alComando(1 To 2) As Long
Dim iIndice As Integer
Dim tCheque As typeChequePre

On Error GoTo Erro_Cheque_Altera_Status_EmTrans

    'abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 105808
    Next

    'seleciono o cheque na tabela de cheques
    lErro = Comando_ExecutarPos(alComando(1), "SELECT SequencialLoja, SequencialBack " & _
                                              "FROM ChequePre WHERE FilialEmpresaLoja = ? AND Caixa = ? AND SequencialCaixa = ?", 0, _
                                              tCheque.lSequencialLoja, tCheque.lSequencialBack, _
                                              objCheque.iFilialEmpresaLoja, objCheque.iCaixa, objCheque.lSequencialCaixa)
    If lErro <> AD_SQL_SUCESSO Then gError 105809
                    
    'busco o primeiro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 105810
    
    'se não encontrar->erro
    If lErro = AD_SQL_SEM_DADOS Then gError 105811
    
    'locko o cara
    lErro = Comando_LockExclusive(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 105812
    
    objCheque.lSequencialLoja = tCheque.lSequencialLoja
    objCheque.lSequencialBack = tCheque.lSequencialBack
    
    'atualizo o seu status para ativo
    lErro = Comando_ExecutarPos(alComando(2), "UPDATE ChequePre SET Status = ?", alComando(1), objCheque.iStatus)
    If lErro <> AD_SQL_SUCESSO Then gError 105813

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Cheque_Altera_Status_EmTrans = SUCESSO

    Exit Function

Erro_Cheque_Altera_Status_EmTrans:

    Cheque_Altera_Status_EmTrans = gErr

    Select Case gErr

        Case 105808
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 105809, 105810
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUE2", gErr, objCheque.iFilialEmpresa, objCheque.iCaixa, objCheque.lSequencialCaixa)
        
        Case 105811
            Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPRE_NAOENCONTRADO_CAIXA", gErr, objCheque.iFilialEmpresa, objCheque.iCaixa, objCheque.lSequencialCaixa)
            
        Case 105812
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CHEQUEPRE2", gErr, objCheque.iFilialEmpresa, objCheque.iCaixa, objCheque.lSequencialCaixa)
            
        Case 105813
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_CHEQUEPRE_LOJA1", gErr, objCheque.iFilialEmpresa, objCheque.iCaixa, objCheque.lSequencialCaixa)
            
        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151351)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function BorderoCheque_MovCCI_Grava(ByVal objBorderoCheque As ClassBorderoCheque) As Long
'prepara e insere o movto de cta corrente correspondente ao deposito do bordero como um todo

Dim lErro As Long
Dim objContasCorrentesInternas As New ClassContasCorrentesInternas
Dim objMovContaCorrente As New ClassMovContaCorrente
Dim objCCI As New ClassContasCorrentesInternas
Dim iCodNossaConta As Integer

On Error GoTo Erro_BorderoCheque_MovCCI_Grava

    If objBorderoCheque.iCodNossaConta = 0 Then

        objCCI.iFilialEmpresa = objBorderoCheque.iFilialEmpresa
    
        'Retorna o codigo da conta de cheque pre da filial passada como parametro.
        lErro = CF("CCI_Le_ContaChequePre", objCCI)
        If lErro <> SUCESSO And lErro <> 126131 Then gError 126130

        If lErro <> SUCESSO Then gError 126132

        iCodNossaConta = objCCI.iCodigo

    Else
    
        iCodNossaConta = objBorderoCheque.iCodNossaConta

    End If
    
    lErro = CF("ContaCorrenteInt_Le", iCodNossaConta, objContasCorrentesInternas)
    If lErro <> SUCESSO And lErro <> 11807 Then gError 126018

    'se a conta corrente nao estiver cadastrada ==> erro
    If lErro = 11807 Then gError 126039

    'Incluir o deposito do bordero na conta
    objMovContaCorrente.dtDataMovimento = objBorderoCheque.dtDataEnvio
    objMovContaCorrente.dValor = objBorderoCheque.dValorEspec + objBorderoCheque.dValorNEspec
    objMovContaCorrente.iCodConta = iCodNossaConta
    objMovContaCorrente.iFilialEmpresa = objContasCorrentesInternas.iFilialEmpresa
    objMovContaCorrente.iPortador = 0
    objMovContaCorrente.iTipo = MOVCCI_BORDERO_CHEQUE_LOJA
    objMovContaCorrente.iTipoMeioPagto = BORDERO
    objMovContaCorrente.lNumero = objBorderoCheque.lNumBordero
    objMovContaCorrente.lNumRefInterna = objBorderoCheque.lNumBordero
    objMovContaCorrente.sHistorico = "Depósito de Cheques Loja"
    objMovContaCorrente.sNumRefExterna = ""

    objMovContaCorrente.iConciliado = NAO_CONCILIADO
    objMovContaCorrente.iExcluido = MOVCONTACORRENTE_NAO_EXCLUIDO

    'Grava o Pagamento no BD
    lErro = CF("MovCCI_Grava_PagRec", objMovContaCorrente)
    If lErro <> SUCESSO Then gError 126019
        
    BorderoCheque_MovCCI_Grava = SUCESSO
     
    Exit Function
    
Erro_BorderoCheque_MovCCI_Grava:

    BorderoCheque_MovCCI_Grava = gErr
     
    Select Case gErr
          
        Case 126018, 126019
        
        Case 126039
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTACORRENTE_INEXISTENTE", gErr, objBorderoCheque.iCodNossaConta)

        Case 126132
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTACHEQUEPRE_INEXISTENTE", gErr, objBorderoCheque.iFilialEmpresa)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151352)
     
    End Select
     
    Exit Function

End Function

Function BorderoCheque_MovCCI_Exclui(ByVal objBorderoCheque As ClassBorderoCheque) As Long
'exclui o movto de cta corrente correspondente ao deposito do bordero como um todo

Dim objMovCCI As New ClassMovContaCorrente
Dim lErro As Long
Dim lNumMovto As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer

On Error GoTo Erro_BorderoCheque_MovCCI_Exclui

    'abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 126022
    Next

    'descobrir o movimento de cci associado a devolução de cheque
    lErro = Comando_Executar(alComando(1), "SELECT NumMovto FROM MovimentosContaCorrente WHERE Tipo = ? AND NumRefInterna = ?", lNumMovto, MOVCCI_BORDERO_CHEQUE_LOJA, objBorderoCheque.lNumBordero)
    If lErro <> AD_SQL_SUCESSO Then gError 126023

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126024
    
    'movimento naum existe
    If lErro = AD_SQL_SEM_DADOS Then gError 126025
       
    objMovCCI.lNumMovto = lNumMovto
    
    lErro = CF("MovCCI_Exclui_EmTransacao_1", objMovCCI)
    If lErro <> SUCESSO Then gError 126026

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    BorderoCheque_MovCCI_Exclui = SUCESSO
     
    Exit Function
    
Erro_BorderoCheque_MovCCI_Exclui:

    BorderoCheque_MovCCI_Exclui = gErr
     
    Select Case gErr
          
        Case 126022
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
          
        Case 126023, 126024
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCONTACORRENTE", gErr)
        
        Case 126025
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCONTACORRENTE_NAO_EXISTE", gErr)
        
        Case 126026
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151353)
     
    End Select
     
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
     
    Exit Function

End Function

Function Registro_Back_EspecifCheque(ByVal colRegistro As Collection, sArquivo As String, lRegistro As Long) As Long
'Trata o registro de especificação de cheque e coloca os dados no bd do backoffice. sArquivo contem o nome do arquivo em que sRegistro foi lido.
'iRegistro é o numero do registro.

Dim iPosAtual As Integer
Dim iPosFimAtual As Integer
Dim objCheque As New ClassChequePre
Dim objMovCx As New ClassMovimentoCaixa
Dim colCheque As New Collection
Dim colMovCx As New Collection
Dim sRegistro As String
Dim lErro As Long

On Error GoTo Erro_Registro_Back_EspecifCheque

    sRegistro = colRegistro.Item(1)

    iPosFimAtual = InStr(sRegistro, Chr(vbKeyEscape))

    'guarda as infos de especificacao do cheque
    lErro = CF("Back_EspecifCheque", iPosAtual, iPosFimAtual, sRegistro, objCheque, objMovCx)
    If lErro <> SUCESSO Then gError 126065

    'guarda as infos dos cheques
    lErro = CF("Back_EspecifCheque_Col", iPosAtual, iPosFimAtual, colRegistro, colCheque, colMovCx)
    If lErro <> SUCESSO Then gError 126066

    'guarda as infos de bordero cheque
    lErro = CF("Back_EspecifCheque_Grava", objCheque, objMovCx, colCheque, colMovCx)
    If lErro <> SUCESSO Then gError 126067

    Registro_Back_EspecifCheque = SUCESSO

    Exit Function

Erro_Registro_Back_EspecifCheque:

    Registro_Back_EspecifCheque = gErr

    Select Case gErr

        Case 126065 To 126067

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151354)

    End Select

    Exit Function

End Function

Function Back_EspecifCheque(iPosAtual As Integer, iPosFimAtual As Integer, sRegistro As String, ByVal objCheque As ClassChequePre, ByVal objMovCaixa As ClassMovimentoCaixa) As Long
'guarda as infos de movimento de caixa relativos a bordero cheque

Dim lErro As Long

On Error GoTo Erro_Back_EspecifCheque

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCheque.iFilialEmpresaLoja = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCheque.lSequencialLoja = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCheque.dValor = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objCheque.iStatus = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCaixa.lNumMovto = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCaixa.lSequencial = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCaixa.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCaixa.iCaixa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCaixa.iTipo = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCaixa.iAdmMeioPagto = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCaixa.iParcelamento = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCaixa.lNumero = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCaixa.dHora = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCaixa.dtDataMovimento = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCaixa.dValor = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCaixa.lCupomFiscal = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCaixa.lNumRefInterna = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    Back_EspecifCheque = SUCESSO

    Exit Function

Erro_Back_EspecifCheque:

    Back_EspecifCheque = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151355)

    End Select

    Exit Function

End Function

Function Back_EspecifCheque_Col(iPosAtual As Integer, iPosFimAtual As Integer, ByVal colRegistro As Collection, ByVal colCheque As Collection, ByVal colMovCx As Collection) As Long
'guarda as infos de cheques

Dim lErro As Long
Dim vRegistro As Variant
Dim objCheque As ClassChequePre
Dim objMovCaixa As ClassMovimentoCaixa
Dim sRegistro As String

On Error GoTo Erro_Back_EspecifCheque_Col

    For Each vRegistro In colRegistro

        sRegistro = vRegistro

        Do While Mid(vRegistro, iPosFimAtual + 1, 1) = Chr(vbKeyShift)

            'passa a apontar para o vbKeyShift
            iPosFimAtual = iPosFimAtual + 1

            Set objCheque = New ClassChequePre
            Set objMovCaixa = New ClassMovimentoCaixa

            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objCheque.iBanco = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
            
            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objCheque.sAgencia = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)
            
            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objCheque.sContaCorrente = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)
            
            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objCheque.lNumero = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
            
            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objCheque.dtDataDeposito = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
            
            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objCheque.dValor = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
            
            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objCheque.sCPFCGC = Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual)
            
            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objCheque.lNumMovtoCaixa = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                                    
            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objCheque.iAprovado = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                                    
            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objCheque.iNaoEspecificado = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                                    
            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objCheque.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                                    
            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objCheque.lSequencialLoja = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                                    
            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objCheque.iFilialEmpresaLoja = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                                    
            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objCheque.iStatus = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                                    
            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objCheque.iCaixa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                                    
            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objCheque.lSequencialCaixa = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                                    
            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objCheque.iLocalizacao = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                                    
            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objCheque.lNumMovtoSangria = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                                    
            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objCheque.dtDataEmissao = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                                    
            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objMovCaixa.lNumMovto = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
            
            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objMovCaixa.lSequencial = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
            
            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objMovCaixa.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
            
            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objMovCaixa.iCaixa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
            
            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objMovCaixa.iTipo = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
            
            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objMovCaixa.iAdmMeioPagto = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
            
            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objMovCaixa.iParcelamento = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
            
            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objMovCaixa.lNumero = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
            
            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objMovCaixa.dHora = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
            
            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objMovCaixa.dtDataMovimento = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
            
            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objMovCaixa.dValor = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
            
            iPosAtual = iPosFimAtual + 1
            iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
            objMovCaixa.lCupomFiscal = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
            
            colCheque.Add objCheque
            colMovCx.Add objMovCaixa

        Loop

    Next

    Back_EspecifCheque_Col = SUCESSO

    Exit Function

Erro_Back_EspecifCheque_Col:

    Back_EspecifCheque_Col = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151356)

    End Select

    Exit Function

End Function

Function Back_EspecifCheque_Grava(ByVal objCheque As ClassChequePre, ByVal objMovCx As ClassMovimentoCaixa, ByVal colCheque As Collection, ByVal colMovCx As Collection) As Long
'Grava os Cheques especificados  e altera o valor do nao especificado ou exclui

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(1 To 2) As Long
Dim objCheque1 As ClassChequePre
Dim tCheque As typeChequePre
Dim lSequencial As Long
Dim lSeqBackNovo As Long
Dim dValorTotal As Double
Dim objTipoMeioPagtoLojaFilial As New ClassTMPLojaFilial
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim objMovCaixa As New ClassMovimentoCaixa

On Error GoTo Erro_Back_EspecifCheque_Grava

    'Inicia a Abertura de o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 126052
    Next
    
    lSequencial = objCheque.lSequencialLoja

    'consulta  pelo sequencialloja e filialEmpresaloja
    lErro = Comando_ExecutarPos(alComando(1), "SELECT NumIntCheque, NumMovtoCaixa , Valor, NaoEspecificado, Localizacao, DataEmissao FROM ChequePre WHERE SequencialLoja = ? AND FilialEmpresaLoja = ? AND Status <> ?", 0, tCheque.lNumIntCheque, tCheque.lNumMovtoCaixa, tCheque.dValor, tCheque.iNaoEspecificado, tCheque.iLocalizacao, tCheque.dtDataEmissao, objCheque.lSequencialLoja, objCheque.iFilialEmpresaLoja, STATUS_EXCLUIDO)
    If lErro <> AD_SQL_SUCESSO Then gError 126053
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126054
    
    If lErro = AD_SQL_SEM_DADOS Then gError 126055
    
    If tCheque.iLocalizacao <> CHEQUEPRE_LOCALIZACAO_LOJA Then gError 126056
        
    lErro = Comando_LockExclusive(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 126057
    
    'se o cheque já tiver sido especificado ==> erro
    If tCheque.iNaoEspecificado = CHEQUE_ESPECIFICADO Then gError 126058
    
    For iIndice = 1 To colCheque.Count
        
        Set objCheque1 = colCheque.Item(iIndice)
        Set objMovCaixa = colMovCx.Item(iIndice)
        
        'Chama a rotina que gera o sequencial
        lErro = CF("Config_ObterNumInt", "CPRConfig", "COD_PROX_CHEQUE_BACKOFFICE", lSeqBackNovo, 1)
        If lErro <> SUCESSO Then gError 126059

        'preencho o sequencialLoja com o novo código gerado
        objCheque1.lSequencialBack = lSeqBackNovo
            
        dValorTotal = dValorTotal + objCheque1.dValor
            
        'Chamar a Função que Insere o novo Cheque no banco de Dados
        lErro = CF("Cheque_Insere", objCheque1)
        If lErro <> SUCESSO Then gError 126060
            
        objMovCaixa.lNumRefInterna = objCheque1.lSequencialBack
            
        'insere um movimento de caixa para o cheque em questao.
        lErro = MovimentoCaixa_Insere_Cheque(objCheque1, objMovCaixa, CARGA_LOG_BACKOFFICE)
        If lErro <> SUCESSO Then gError 126061
        
    Next
    
    objCheque.dValor = tCheque.dValor
    
    'se o valor do cheque nao especificado for igual ao valor dos cheques especificados ==> exclui logicamente o cheque
    If objCheque.dValor = dValorTotal Then
    
        lErro = Comando_ExecutarPos(alComando(2), "UPDATE ChequePre SET Status = ?", alComando(1), STATUS_EXCLUIDO)
        If lErro <> AD_SQL_SUCESSO Then gError 126062
    
    Else
    
        objCheque.dValor = objCheque.dValor - dValorTotal
    
        lErro = Comando_ExecutarPos(alComando(2), "UPDATE ChequePre SET Valor = ?", alComando(1), objCheque.dValor)
        If lErro <> AD_SQL_SUCESSO Then gError 126063
    
    End If
    
    'insere um movimento de caixa para o cheque em questao.
    lErro = MovimentoCaixa_Insere_Cheque(objCheque, objMovCx, CARGA_LOG_BACKOFFICE)
    If lErro <> SUCESSO Then gError 126064
    
    'Mover Valor dos Saldo para admMeioPagtoCondPagto.Saldo
    objAdmMeioPagtoCondPagto.dSaldo = dValorTotal

    'Vincula-se ao Meio_Pagamento_Cheque para o AdmMeioPagtoCondPagto.iAdmMeioPagto
    objAdmMeioPagtoCondPagto.iAdmMeioPagto = MEIO_PAGAMENTO_CHEQUE
    
    'Vincula-se ao Pagamento_Avista para o AdmMeioPagtoCondPagto.parcelamento
    objAdmMeioPagtoCondPagto.iParcelamento = PARCELAMENTO_AVISTA
    
    'Vincula-se FilialEmpresa a o Meio de Pagamento
    objAdmMeioPagtoCondPagto.iFilialEmpresa = objCheque.iFilialEmpresaLoja
    
    'Função para Alteração de Saldo
    lErro = CF("AdmMeioPagtoCondPagto_Altera_Saldo", objAdmMeioPagtoCondPagto)
    If lErro <> SUCESSO And lErro <> 104398 Then gError 126065
        
    'Retira o total dos Cheques Especificados do Saldo de Cheques Nao Especificados
    objTipoMeioPagtoLojaFilial.dSaldo = -dValorTotal
    objTipoMeioPagtoLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_CHEQUE
    objTipoMeioPagtoLojaFilial.iFilialEmpresa = objCheque.iFilialEmpresaLoja
    
    'Função que Serve para atualizar Saldo
    lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTipoMeioPagtoLojaFilial)
    If lErro <> SUCESSO Then gError 126066
    
    'Fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Back_EspecifCheque_Grava = SUCESSO

    Exit Function

Erro_Back_EspecifCheque_Grava:

    Back_EspecifCheque_Grava = gErr

    Select Case gErr

        Case 126052
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 126053, 126054
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CHEQUEPRE_LOJA", gErr, lSequencial, objCheque.iFilialEmpresaLoja)

        Case 126055, 126056
            Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPRE_NAOENCONTRADO_CAIXACENTRAL", gErr, objCheque.lSequencialLoja, objCheque.iFilialEmpresaLoja)
                
        Case 126057
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_CHEQUEPRE1", gErr, objCheque.iFilialEmpresaLoja, lSequencial)

        Case 126058
            Call Rotina_Erro(vbOKOnly, "ERRO_CHEQUEPRE_ESPECIFICADO", gErr, objCheque.iFilialEmpresaLoja, lSequencial)

        Case 126059, 126060, 126061, 126064 To 126066

        Case 126062, 126063
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_CHEQUEPRE_LOJA", gErr, objCheque.lSequencialLoja, objCheque.iFilialEmpresaLoja)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151357)

    End Select

    'Fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function MovimentosCaixa_MovCCI_Grava(ByVal objMovCx As ClassMovimentoCaixa) As Long
'prepara e insere o movto de cta corrente correspondente ao movimendo de caixa (sangria)

Dim lErro As Long
Dim objContasCorrentesInternas As New ClassContasCorrentesInternas
Dim objMovContaCorrente As New ClassMovContaCorrente
Dim objCCI As New ClassContasCorrentesInternas

On Error GoTo Erro_MovimentosCaixa_MovCCI_Grava

    objCCI.iFilialEmpresa = objMovCx.iFilialEmpresa

    'Retorna o codigo da conta de cheque pre da filial passada como parametro.
    lErro = CF("CCI_Le_ContaChequePre", objCCI)
    If lErro <> SUCESSO And lErro <> 126131 Then gError 126134

    If lErro <> SUCESSO Then gError 126135
    
    'Incluir o deposito do bordero na conta
    objMovContaCorrente.dtDataMovimento = objMovCx.dtDataMovimento
    objMovContaCorrente.dValor = objMovCx.dValor
    objMovContaCorrente.iCodConta = objCCI.iCodigo
    objMovContaCorrente.iFilialEmpresa = objMovCx.iFilialEmpresa
    objMovContaCorrente.iPortador = 0
    objMovContaCorrente.iTipo = MOVCCI_CHEQUE_SANGRIA_LOJA
    objMovContaCorrente.iTipoMeioPagto = Cheque
    objMovContaCorrente.lNumero = objMovCx.lNumMovto
    objMovContaCorrente.lNumRefInterna = objMovCx.lNumMovto
    objMovContaCorrente.sHistorico = "Entrada de Cheque por Sangria Loja"
    objMovContaCorrente.sNumRefExterna = ""

    objMovContaCorrente.iConciliado = NAO_CONCILIADO
    objMovContaCorrente.iExcluido = MOVCONTACORRENTE_NAO_EXCLUIDO

    'Grava o Pagamento no BD
    lErro = CF("MovCCI_Grava_PagRec", objMovContaCorrente)
    If lErro <> SUCESSO Then gError 126138
        
    MovimentosCaixa_MovCCI_Grava = SUCESSO
     
    Exit Function
    
Erro_MovimentosCaixa_MovCCI_Grava:

    MovimentosCaixa_MovCCI_Grava = gErr
     
    Select Case gErr
          
        Case 126134, 126136, 126138
        
        Case 126135
            Call Rotina_Erro(vbOKOnly, "ERRO_CONTACHEQUEPRE_INEXISTENTE", gErr, objMovCx.iFilialEmpresa)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151358)
     
    End Select
     
    Exit Function

End Function

Function MovimentosCaixa_MovCCI_Exclui(ByVal objMovCx As ClassMovimentoCaixa, ByVal iTipo As Integer) As Long
'exclui o movto de cta corrente correspondente ao movimento de caixa especificado

Dim objMovCCI As New ClassMovContaCorrente
Dim lErro As Long
Dim lNumMovto As Long
Dim alComando(1 To 1) As Long
Dim iIndice As Integer

On Error GoTo Erro_MovimentosCaixa_MovCCI_Exclui

    'abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 126140
    Next

    'descobrir o movimento de cci associado a devolução de cheque
    lErro = Comando_Executar(alComando(1), "SELECT NumMovto FROM MovimentosContaCorrente WHERE Tipo = ? AND NumRefInterna = ?", lNumMovto, iTipo, objMovCx.lNumMovto)
    If lErro <> AD_SQL_SUCESSO Then gError 126141

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126142
    
    'movimento naum existe
    If lErro = AD_SQL_SEM_DADOS Then gError 126143
       
    objMovCCI.lNumMovto = lNumMovto
    
    lErro = CF("MovCCI_Exclui_EmTransacao_1", objMovCCI)
    If lErro <> SUCESSO Then gError 126144

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    MovimentosCaixa_MovCCI_Exclui = SUCESSO
     
    Exit Function
    
Erro_MovimentosCaixa_MovCCI_Exclui:

    MovimentosCaixa_MovCCI_Exclui = gErr
     
    Select Case gErr
          
        Case 126140
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
          
        Case 126141, 126142
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOSCONTACORRENTE", gErr)
        
        Case 126143
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCONTACORRENTE_NAO_EXISTE", gErr)
        
        Case 126144
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151359)
     
    End Select
     
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
     
    Exit Function

End Function

Function Comissoes_Excluir_Loja(ByVal objCupomFiscal As ClassCupomFiscal) As Long
'exclui os registros de comissao para o vendedor que fez a venda

Dim lErro As Long
Dim iIndice As Integer
Dim alComando(1 To 5) As Long
Dim lNumIntCom As Long
Dim dValorBase As Double
Dim dValorComissao As Double
Dim dPercentual As Double
Dim iStatus As Integer
Dim tComissoesCF As typeComissoesCF

On Error GoTo Erro_Comissoes_Excluir_Loja

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 126329
    Next
    
    lErro = Comando_ExecutarPos(alComando(1), "SELECT CodVendedor, ValorBase, ValorComissao, Indireta FROM ComissoesCupomFiscal WHERE FilialEmpresa = ? AND NumIntDoc = ? ORDER BY CodVendedor", 0, tComissoesCF.iCodVendedor, tComissoesCF.dValorBase, tComissoesCF.dValorComissao, tComissoesCF.iIndireta, objCupomFiscal.iFilialEmpresa, objCupomFiscal.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 126336
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126337
    
    Do While lErro = AD_SQL_SUCESSO
    
        lErro = Comando_LockExclusive(alComando(1))
        If lErro <> AD_SQL_SUCESSO Then gError 126338
    
        'Insere a comissao no BD
        lErro = Comando_ExecutarPos(alComando(2), "SELECT Status, ValorBase, Valor FROM Comissoes WHERE FilialEmpresa = ? AND TipoTitulo = ? AND CodVendedor =? AND DataGeracao = ? ", 0, iStatus, dValorBase, dValorComissao, objCupomFiscal.iFilialEmpresa, TIPO_COMISSAO_LOJA, tComissoesCF.iCodVendedor, objCupomFiscal.dtDataEmissao)
        If lErro <> AD_SQL_SUCESSO Then gError 126331
        
        lErro = Comando_BuscarPrimeiro(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126332
    
        lErro = Comando_LockExclusive(alComando(2))
        If lErro <> AD_SQL_SUCESSO Then gError 126333
        
        If iStatus = STATUS_BAIXADO Then gError 126335
        
        dValorBase = dValorBase - tComissoesCF.dValorBase
        
        If dValorBase > 0.0001 Then
        
            dValorComissao = dValorComissao - tComissoesCF.dValorComissao
            dPercentual = dValorComissao / dValorBase
        
            lErro = Comando_ExecutarPos(alComando(3), "UPDATE Comissoes SET ValorBase = ?, Valor = ?, Percentual = ?", alComando(2), dValorBase, dValorComissao, dPercentual)
            If lErro <> AD_SQL_SUCESSO Then gError 126340
                
        Else
        
            lErro = Comando_ExecutarPos(alComando(4), "DELETE FROM Comissoes", alComando(2))
            If lErro <> AD_SQL_SUCESSO Then gError 126341
        
        End If
                    
        lErro = Comando_ExecutarPos(alComando(5), "DELETE FROM ComissoesCupomFiscal", alComando(1))
        If lErro <> AD_SQL_SUCESSO Then gError 126342

        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126339

    Loop
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Comissoes_Excluir_Loja = SUCESSO
    
    Exit Function

Erro_Comissoes_Excluir_Loja:

    Comissoes_Excluir_Loja = gErr
    
    Select Case gErr

        Case 126329
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 126331, 126332
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_COMISSOES4", gErr, objCupomFiscal.iFilialEmpresa, TIPO_COMISSAO_LOJA, tComissoesCF.iCodVendedor, objCupomFiscal.dtDataEmissao)

        Case 126333
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_COMISSOES1", gErr, objCupomFiscal.iFilialEmpresa, TIPO_COMISSAO_LOJA, tComissoesCF.iCodVendedor, objCupomFiscal.dtDataEmissao)

        Case 126335
            Call Rotina_Erro(vbOKOnly, "ERRO_COMISSOES_BAIXADA_CF", gErr, objCupomFiscal.iFilialEmpresa, TIPO_COMISSAO_LOJA, tComissoesCF.iCodVendedor, objCupomFiscal.dtDataEmissao)

        Case 126336, 126337, 126339
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_COMISSOESCF", gErr, objCupomFiscal.iFilialEmpresa, objCupomFiscal.lNumIntDoc)
            
        Case 126338
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_COMISSOESCF", gErr, objCupomFiscal.iFilialEmpresa, objCupomFiscal.lNumIntDoc)

        Case 126340
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_COMISSOES_CF", gErr, objCupomFiscal.iFilialEmpresa, TIPO_COMISSAO_LOJA, tComissoesCF.iCodVendedor, objCupomFiscal.dtDataEmissao)

        Case 126341
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_COMISSOES_CF", gErr, objCupomFiscal.iFilialEmpresa, TIPO_COMISSAO_LOJA, tComissoesCF.iCodVendedor, objCupomFiscal.dtDataEmissao)

        Case 126342
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_COMISSOESCUPOMFISCAL", gErr, objCupomFiscal.iFilialEmpresa, objCupomFiscal.lNumIntDoc)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151360)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Comissoes_Gravar_Loja_1(objCupomFiscal As ClassCupomFiscal, colComissao As Collection) As Long

Dim lErro As Long
Dim iIndice As Integer
Dim lTransacao As Long

On Error GoTo Erro_Comissoes_Gravar_Loja_1

    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 126355

    lErro = CF("Comissoes_Excluir_Loja", objCupomFiscal)
    If lErro <> SUCESSO Then gError 126347
    
    'Grava a Comissão de Pedido de Venda
    lErro = CF("Comissoes_Gravar_Loja", objCupomFiscal, colComissao)
    If lErro <> SUCESSO Then gError 126348

    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 126356
    
    Comissoes_Gravar_Loja_1 = SUCESSO
    
    Exit Function

Erro_Comissoes_Gravar_Loja_1:

    Comissoes_Gravar_Loja_1 = gErr
    
    Select Case gErr

        Case 126347, 126348

        Case 126355
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 126356
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151361)

    End Select

    Call Transacao_Rollback

    Exit Function

End Function

Function LojaConfig_Grava(ByVal objLojaConfig As ClassLojaConfig) As Long
'grava registro em LojaConfig. Apenas altera o conteudo, se nao existir insere o registro.

Dim lErro As Long
Dim lTransacao As Long

On Error GoTo Erro_LojaConfig_Grava

    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 126364

    lErro = LojaConfig_Grava_EmTrans(objLojaConfig)
    If lErro <> SUCESSO Then gError 126365

    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 126366

    LojaConfig_Grava = SUCESSO

    Exit Function

Erro_LojaConfig_Grava:

    LojaConfig_Grava = gErr

    Select Case gErr

        Case 126364
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 126365

        Case 126366
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151362)

    End Select

    Call Transacao_Rollback

    Exit Function

End Function

Function GeracaoArqBack_Grava(BarraProgresso As Object, objMsgs As Object, Optional ByVal bRecalculaTribProd As Boolean = True) As Long
'gera o arquivo com os dados do backoffice que devem ser transportados para o caixa central/caixas.

Dim lErro As Long
Dim sArquivo As String
Dim iIndice As Integer
Dim colArquivo As New Collection
Dim objCaixa As New ClassCaixa
Dim colTabPreco As New Collection
Dim colTabPrecoItens As New Collection
Dim colProduto1 As New Collection
Dim sRetorno As String
Dim lTamanho As Long
Dim sArquivoTemp As String
Dim sArquivoDir As String
Dim lTransacao As Long
Dim lTotalRegistros As Long
Dim lRegProcessados As Long
Dim sNomeArqParam As String
Dim objObject As Object
Dim objLojaConfig As New ClassLojaConfig

On Error GoTo Erro_GeracaoArqBack_Grava
       
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 126396
       
    BarraProgresso.Value = 0
       
    lTotalRegistros = 0
    
    lErro = GravacaoCaixas_TotalRegistros(lTotalRegistros)
    If lErro <> SUCESSO Then gError 105649
       
    lRegProcessados = 0
    
    objLojaConfig.iFilialEmpresa = EMPRESA_TODA
    objLojaConfig.sCodigo = DIRETORIO_TELA_EXIBIRARQUIVOSCCBACK
    
    lErro = CF("LojaConfig_Le1", objLojaConfig)
    If lErro <> SUCESSO And lErro <> 126361 Then gError 133623
    
    'se nao encontrou o registro q armazena o ultimo diretorio acessado para esta tela
    If lErro = 126361 Then objLojaConfig.sConteudo = CurDir
    
    sRetorno = objLojaConfig.sConteudo
    
    'se o diretorio nao for terminado por \  ===> acrescentar
    If right(sRetorno, 1) <> "\" Then sRetorno = sRetorno & "\"
    
    sArquivoTemp = sRetorno & glEmpresa & "_" & giFilialEmpresa & "_" & NOME_ARQUIVOBACK_TEMP
    
    'Cria o arquivo de remessa
    Open sArquivoTemp For Output As #1
    
    'Busca as classes e unidades de medida
    lErro = Gera_Arquivo_ClasseUM(lTotalRegistros, lRegProcessados, BarraProgresso)
    If lErro <> SUCESSO Then gError 105921
    
    'Busca as classes e unidades de medida
    lErro = Gera_Arquivo_CategoriaProdutoItem(lTotalRegistros, lRegProcessados, BarraProgresso)
    If lErro <> SUCESSO Then gError 126763
    
    'Busca as classes e unidades de medida
    lErro = Gera_Arquivo_ProdutoCategoria(lTotalRegistros, lRegProcessados, BarraProgresso)
    If lErro <> SUCESSO Then gError 126758
    
    'Busca os Dados das Tabelas de Preço
    lErro = Gera_Arquivo_TabelaPreco(lTotalRegistros, lRegProcessados, BarraProgresso)
    If lErro <> SUCESSO Then gError 112585
    
    'Busca os preços dos produtos nas tabelas de preço
    lErro = CF("Gera_Arquivo_TabelaPrecoItens", lTotalRegistros, lRegProcessados, BarraProgresso)
    If lErro <> SUCESSO Then gError 112586
    
    'Busca os dados dos produtos
    lErro = CF("Gera_Arquivo_Produtos", lTotalRegistros, lRegProcessados, BarraProgresso, bRecalculaTribProd)
    If lErro <> SUCESSO Then gError 112587
        
    lErro = Gera_Arquivo_Vendedores(lTotalRegistros, lRegProcessados, BarraProgresso)
    If lErro <> SUCESSO Then gError 112588
    
    lErro = Gera_Arquivo_Cliente(lTotalRegistros, lRegProcessados, BarraProgresso)
    If lErro <> SUCESSO Then gError 112589

    lErro = Gera_Arquivo_Bancos(lTotalRegistros, lRegProcessados, BarraProgresso)
    If lErro <> SUCESSO Then gError 126395

    lErro = Gera_Arquivo_ContasCorrentes(lTotalRegistros, lRegProcessados, BarraProgresso)
    If lErro <> SUCESSO Then gError 117623
    
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 126397

    Close #1
    
    sArquivo = sRetorno & glEmpresa & "_" & giFilialEmpresa & "_" & NOME_ARQUIVOBACK
    
    'verifica se o arquivo NOME_ARQUIVOBACK existe
    sArquivoDir = Dir(sArquivo)
    
    'se o arquivo existir ==> remove o arquivo NOME_ARQUIVOBACK
    If Len(sArquivoDir) > 0 Then Kill (sArquivo)
    
    'renomeando os arquivos
    Name sArquivoTemp As sArquivo
    
    If Len(gobjLoja.sFTPURL) > 0 Then
    
        objMsgs.AddItem GRAVACAO_CONCLUIDA
    
        'Prepara para chamar rotina batch
        lErro = Sistema_Preparar_Batch(sNomeArqParam)
        If lErro <> SUCESSO Then gError 133570
            
        gobjLoja.sNomeArqParam = sNomeArqParam
            
        Set objObject = gobjLoja
            
        objMsgs.AddItem TRANSMISSAO_INICIADA
            
        lErro = CF("Rotina_FTP_Recepcao_CC", objObject, 3)
        If lErro <> SUCESSO And lErro <> 133628 Then gError 133571
    
        If lErro <> SUCESSO Then gError 133629
    
        objMsgs.AddItem TRANSMISSAO_CONCLUIDA
    
        Call Rotina_Aviso(vbOKOnly, "AVISO_TRANSMISSAO_CONCLUIDA")
    
    Else
    
    'avisa que a gravacao foi  concluida
    Call Rotina_Aviso(vbOKOnly, "AVISO_GRAVACAO_DADOSBACK.BCC_CONCLUIDA_COM_SUCESSO")
    
    End If
    
    BarraProgresso.Value = 0
    
    GeracaoArqBack_Grava = SUCESSO

    Exit Function
    
Erro_GeracaoArqBack_Grava:
    
    GeracaoArqBack_Grava = gErr
    
    Close #1
   
    Select Case gErr

        Case 53, 76
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCAL_ARQUIVO_INVALIDO", gErr, sArquivo)
        
        Case 105649, 105921, 112549, 112585 To 112589, 117623, 126395, 126758, 126763, 133623
        
        Case 127095
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCAL_ARQUIVO_NAO_CONFIGURADO", gErr, NOME_ARQUIVOBACK)
        
        Case 126396
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
        
        Case 126397
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case 133629
            Call Rotina_Erro(vbOKOnly, "AVISO_NAO_CARREGOU_ROTINA_RECEPCAO", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151363)

    End Select
        
    Call Transacao_Rollback
        
    Exit Function
    
End Function

Private Function GravacaoCaixas_TotalRegistros(lTotal As Long) As Long
'descobre o total da barra de progresso

Dim alComando(1 To 8) As Long
Dim iIndice As Integer
Dim lErro As Long
Dim lNumRegistros As Long
Dim sSelect As String
Dim iAtivoCli As Integer
Dim iAtivoFil As Integer
Dim iNumRegistro As Integer

On Error GoTo Erro_GravacaoCaixas_TotalRegistros
        
    'Inicializa os array de lComandos
    For iIndice = LBound(alComando) To UBound(alComando)
         alComando(iIndice) = Comando_Abrir()
         If alComando(iIndice) = 0 Then gError 105650
    Next
    
    sSelect = "SELECT Count(*) FROM TabelasDePreco, TabelasdePrecoItens a WHERE Codigo = CodTabela AND TabelasdePreco.Ativo = ? AND TabelasdePrecoItens.Ativo = ? AND a.CodProduto IN (SELECT Codigo FROM Produtos, ProdutosFilial WHERE (Produtos.Codigo IN (SELECT CodProduto FROM ProdutoCodBarras) OR Referencia <> '') )  AND (EXISTS (SELECT CodTabela AS DataV FROM TabelasDePrecoItens WHERE DataVigencia <= ?  GROUP BY CodTabela, CodProduto  HAVING  a.CodTabela=CodTabela AND a.CodProduto=CodProduto AND a.DataVigencia=MAX(DataVigencia) AND MAX(DataVigencia) <= ?)) AND FilialEmpresa =?"
    
    'Pega o total de registros da TabeladePrecoItens que serao processados
    lErro = Comando_Executar(alComando(1), sSelect, lNumRegistros, Ativo, Ativo, Date, Date, giFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 105651
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 105652
        
    lTotal = lTotal + lNumRegistros
        
    'Pega o total de registros da tabela produtos , produtos filial e Códigos de barras que serao processados
    lErro = Comando_Executar(alComando(2), "SELECT  Count(*) FROM Produtos, ProdutosFilial WHERE ( Produtos.Codigo IN (SELECT CodProduto FROM ProdutoCodBarras) OR Referencia <> '' ) AND ProdutosFilial.FilialEmpresa = ? AND Produtos.Codigo = ProdutosFilial.Produto AND Produtos.Ativo = ?", lNumRegistros, giFilialEmpresa, PRODUTO_ATIVO)
    If lErro <> AD_SQL_SUCESSO Then gError 105653

    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 105654
        
    lTotal = lTotal + lNumRegistros
        
    'Pega o total de registros de ClasseUM que serao processados
    lErro = Comando_Executar(alComando(3), "SELECT COUNT(*) FROM ClasseUM", lNumRegistros)
    If lErro <> AD_SQL_SUCESSO Then gError 126402
    
    lErro = Comando_BuscarPrimeiro(alComando(3))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126403
    
    lTotal = lTotal + lNumRegistros
    
    'Pega o total de registros da TabeladePreco que serao processados
    lErro = Comando_Executar(alComando(4), "SELECT Count(*) FROM TabelasDePreco", lNumRegistros)
    If lErro <> AD_SQL_SUCESSO Then gError 126398

    lErro = Comando_BuscarPrimeiro(alComando(4))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126399
    
    lTotal = lTotal + lNumRegistros
    
    'Pega o total de registros da Tabela de Vendedores que serao processados
    lErro = Comando_Executar(alComando(5), "SELECT Count(*) FROM Vendedores", lNumRegistros)
    If lErro <> AD_SQL_SUCESSO Then gError 126419

    lErro = Comando_BuscarPrimeiro(alComando(5))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126420
    
    lTotal = lTotal + lNumRegistros
    
    'Pega o total de registros de Cliente que serao processados
    lErro = Comando_Executar(alComando(6), "SELECT Count(*) FROM Clientes", lNumRegistros)
    If lErro <> AD_SQL_SUCESSO Then gError 105655

    lErro = Comando_BuscarPrimeiro(alComando(6))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 105656
        
    lTotal = lTotal + lNumRegistros
    
    'Pega os dados de todas as Tabelas de Preço
    lErro = Comando_Executar(alComando(7), "SELECT Count(*) FROM Bancos", lNumRegistros)
    If lErro <> AD_SQL_SUCESSO Then gError 126441

    'BUsca a primeira tabela
    lErro = Comando_BuscarPrimeiro(alComando(7))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126442
    
    lTotal = lTotal + lNumRegistros
        
    'Pega os dados de todas as Tabelas de Preço
    lErro = Comando_Executar(alComando(8), "SELECT Count(*) FROM CategoriaProdutoItem", lNumRegistros)
    If lErro <> AD_SQL_SUCESSO Then gError 126767

    'BUsca a primeira tabela
    lErro = Comando_BuscarPrimeiro(alComando(8))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126768
    
    lTotal = lTotal + lNumRegistros
        
        
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    GravacaoCaixas_TotalRegistros = SUCESSO
    
    Exit Function

Erro_GravacaoCaixas_TotalRegistros:

    GravacaoCaixas_TotalRegistros = gErr
    
    Select Case gErr
                
        Case 105650
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 105651, 105652
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TABELA_PRECO", gErr)
            
        Case 105653, 105654
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOS1", gErr)
            
        Case 105655, 105656
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CLIENTES", gErr)
            
        Case 105922
        
        Case 126398, 126399
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TABELASDEPRECO", gErr)
            
        Case 126402, 126403
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CLASSEUM1", gErr)
            
        Case 126419, 126420
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_VENDEDORES", gErr)
            
        Case 126441, 126442
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BANCOS1", gErr)
            
        Case 126767, 126768
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CATEGORIAPRODUTOITEM", gErr)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151364)
            
    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function Gera_Arquivo_ClasseUM(ByVal lTotalRegistros As Long, lRegProcessados As Long, BarraProgresso As Object) As Long
'Guarda na coleção os registros com as informações das Classes e Unidades de Medida

Dim alComando(0 To 2) As Long
Dim iIndice As Integer
Dim sDescricao As String
Dim sSigla As String
Dim iClasse As Integer
Dim lErro As Long
Dim colSiglas As New Collection
Dim objUM As ClassUnidadeDeMedida
Dim sArquivo As String
Dim sNome As String
Dim sSigla1 As String
Dim sSiglaUMBase As String
Dim tUnidadeMedida As typeUnidadeMedida

On Error GoTo Erro_Gera_Arquivo_ClasseUM
        
    'Inicializa os array de lComandos
    For iIndice = LBound(alComando) To UBound(alComando)
         alComando(iIndice) = Comando_Abrir()
         If alComando(iIndice) = 0 Then gError 105923
    Next
    
    sDescricao = String(STRING_CLASSEUM_DESCRICAO, 0)
    sSigla = String(STRING_UM_SIGLA, 0)

    'Lê todas as classes
    lErro = Comando_Executar(alComando(0), "SELECT Classe, Descricao, Sigla FROM ClasseUM", iClasse, sDescricao, sSigla)
    If lErro <> AD_SQL_SUCESSO Then gError 105924

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 105925

    Do While lErro = AD_SQL_SUCESSO

        sArquivo = TIPOREGISTROECF_UNIDADE_MEDIDA & Chr(vbKeyControl) & iClasse & Chr(vbKeyEscape) & sDescricao & Chr(vbKeyEscape) & sSigla & Chr(vbKeyEscape)

        sSigla1 = String(STRING_UM_SIGLA, 0)
        sNome = String(STRING_CLASSEUM_NOME, 0)
        sSiglaUMBase = String(STRING_UM_SIGLA, 0)
    
        'Executar comando SQL
        lErro = Comando_ExecutarPos(alComando(1), "SELECT Classe, Sigla, Nome, Quantidade, SiglaUMBase, Ativo, DataLog FROM UnidadesDeMedida WHERE Classe = ? ORDER BY Sigla", 0, tUnidadeMedida.iClasse, tUnidadeMedida.sSigla, tUnidadeMedida.sNome, tUnidadeMedida.dQuantidade, tUnidadeMedida.sSiglaUMBase, tUnidadeMedida.iAtivo, tUnidadeMedida.dtDataLog, iClasse)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126400
    
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126401

        Do While lErro = AD_SQL_SUCESSO

            'Inclui o registro no Arquivo .txt
            sArquivo = sArquivo & tUnidadeMedida.sNome & Chr(vbKeyEscape) & tUnidadeMedida.sSigla & Chr(vbKeyEscape) & tUnidadeMedida.dQuantidade & Chr(vbKeyEscape) & tUnidadeMedida.iAtivo & Chr(vbKeyEscape)

            If tUnidadeMedida.dtDataLog = DATA_NULA Then

                'seta nao editavel e datalog para impedir alterar a unidade de medida uma vez que ela foi transferida para o caixa central/caixas e pode ser usada
                lErro = Comando_ExecutarPos(alComando(2), "UPDATE UnidadesDeMedida SET Editavel = ?, DataLog = ?", alComando(1), UM_NAO_EDITAVEL, gdtDataAtual)
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126404

            End If

            lErro = Comando_BuscarProximo(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126405
            
        Loop
        
        sArquivo = sArquivo & Chr(vbKeyEnd)
            
        Print #1, sArquivo
        
        lRegProcessados = lRegProcessados + 1
        BarraProgresso.Value = CInt((lRegProcessados / lTotalRegistros) * 100)
        
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 105927

    Loop

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Gera_Arquivo_ClasseUM = SUCESSO

    Exit Function

Erro_Gera_Arquivo_ClasseUM:

    Gera_Arquivo_ClasseUM = gErr

    Select Case gErr

        Case 105923
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 105924, 105925, 105927
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CLASSEUM", gErr)

        Case 126400, 126401, 126405
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_UNIDADESDEMEDIDA1", gErr, iClasse)

        Case 126404
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_UNIDADEMEDIDA", gErr, iClasse, sSigla)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151365)

    End Select

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function Gera_Arquivo_ProdutoCategoria(ByVal lTotalRegistros As Long, lRegProcessados As Long, BarraProgresso As Object) As Long
'Guarda na coleção os registros com as informações de ProdutoCategoria

Dim alComando(0 To 2) As Long
Dim iIndice As Integer
Dim lErro As Long
Dim sArquivo As String
Dim sProduto As String
Dim sCategoria As String
Dim sItem As String

On Error GoTo Erro_Gera_Arquivo_ProdutoCategoria
        
    'Inicializa os array de lComandos
    For iIndice = LBound(alComando) To UBound(alComando)
         alComando(iIndice) = Comando_Abrir()
         If alComando(iIndice) = 0 Then gError 126754
    Next
    
    sProduto = String(STRING_PRODUTO, 0)
    sCategoria = String(STRING_PRODUTO_CATEGORIA, 0)
    sItem = String(STRING_PRODUTO_ITEM, 0)

    'Lê todas as classes
    lErro = Comando_Executar(alComando(0), "SELECT Produto, Categoria, Item FROM ProdutoCategoria", sProduto, sCategoria, sItem)
    If lErro <> AD_SQL_SUCESSO Then gError 126755

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126756

    Do While lErro = AD_SQL_SUCESSO

        sArquivo = TIPOREGISTROECF_PRODUTO_CATEGORIA & Chr(vbKeyControl) & sProduto & Chr(vbKeyEscape) & sCategoria & Chr(vbKeyEscape) & sItem & Chr(vbKeyEscape)

        sArquivo = sArquivo & Chr(vbKeyEnd)
            
        Print #1, sArquivo
        
        lRegProcessados = lRegProcessados + 1
        BarraProgresso.Value = CInt((lRegProcessados / lTotalRegistros) * 100)
        
        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126757

    Loop

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Gera_Arquivo_ProdutoCategoria = SUCESSO

    Exit Function

Erro_Gera_Arquivo_ProdutoCategoria:

    Gera_Arquivo_ProdutoCategoria = gErr

    Select Case gErr

        Case 126754
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 126755, 126756, 126757
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOCATEGORIA1", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151366)

    End Select

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function Gera_Arquivo_CategoriaProdutoItem(ByVal lTotalRegistros As Long, lRegProcessados As Long, BarraProgresso As Object) As Long
'Guarda na coleção os registros com as informações de CategoriaProdutoItem

Dim alComando(0 To 0) As Long
Dim iIndice As Integer
Dim lErro As Long
Dim sArquivo As String
Dim sCategoriaAnterior As String
Dim tCatProdItem As typeCategoriaProdutoItem

On Error GoTo Erro_Gera_Arquivo_CategoriaProdutoItem
        
    'Inicializa os array de lComandos
    For iIndice = LBound(alComando) To UBound(alComando)
         alComando(iIndice) = Comando_Abrir()
         If alComando(iIndice) = 0 Then gError 126759
    Next
    
    tCatProdItem.sCategoria = String(STRING_PRODUTO_CATEGORIA, 0)
    tCatProdItem.sItem = String(STRING_PRODUTO_ITEM, 0)
    tCatProdItem.sDescricao = String(STRING_CATEGORIAPRODUTOITEM_DESCRICAO, 0)
    
    'Lê todas as classes
    lErro = Comando_Executar(alComando(0), "SELECT Categoria, Item, Ordem, Descricao, Valor1, Valor2, Valor3, Valor4, Valor5, Valor6, Valor7, Valor8 FROM CategoriaProdutoItem ORDER BY Categoria", tCatProdItem.sCategoria, tCatProdItem.sItem, tCatProdItem.iOrdem, tCatProdItem.sDescricao, _
    tCatProdItem.dvalor1, tCatProdItem.dvalor2, tCatProdItem.dvalor3, tCatProdItem.dvalor4, tCatProdItem.dvalor5, tCatProdItem.dvalor6, tCatProdItem.dvalor7, tCatProdItem.dvalor8)
    If lErro <> AD_SQL_SUCESSO Then gError 126760

    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126761

    Do While lErro = AD_SQL_SUCESSO

        If sCategoriaAnterior <> tCatProdItem.sCategoria Then

            If Len(sArquivo) > 0 Then

                sArquivo = sArquivo & Chr(vbKeyEnd)
                    
                Print #1, sArquivo
                
            End If

            sArquivo = TIPOREGISTROECF_CATEGORIA_PRODUTO_ITEM & Chr(vbKeyControl)
            
            sCategoriaAnterior = tCatProdItem.sCategoria
            
        End If
        
        sArquivo = sArquivo & tCatProdItem.sCategoria & Chr(vbKeyEscape) & tCatProdItem.sItem & Chr(vbKeyEscape) & tCatProdItem.iOrdem & Chr(vbKeyEscape) & tCatProdItem.sDescricao & Chr(vbKeyEscape) & tCatProdItem.dvalor1 & Chr(vbKeyEscape)
        sArquivo = sArquivo & tCatProdItem.dvalor2 & Chr(vbKeyEscape) & tCatProdItem.dvalor3 & Chr(vbKeyEscape) & tCatProdItem.dvalor4 & Chr(vbKeyEscape) & tCatProdItem.dvalor5 & Chr(vbKeyEscape) & tCatProdItem.dvalor6 & Chr(vbKeyEscape) & tCatProdItem.dvalor7 & Chr(vbKeyEscape) & tCatProdItem.dvalor8 & Chr(vbKeyEscape)

        lRegProcessados = lRegProcessados + 1
        BarraProgresso.Value = CInt((lRegProcessados / lTotalRegistros) * 100)

        lErro = Comando_BuscarProximo(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126762

    Loop

    If Len(sArquivo) > 0 Then

        sArquivo = sArquivo & Chr(vbKeyEnd)
            
        Print #1, sArquivo
        
    End If

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Gera_Arquivo_CategoriaProdutoItem = SUCESSO

    Exit Function

Erro_Gera_Arquivo_CategoriaProdutoItem:

    Gera_Arquivo_CategoriaProdutoItem = gErr

    Select Case gErr

        Case 126759
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 126760, 126761, 126762
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CATEGORIAPRODUTOITEM", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151367)

    End Select

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function Gera_Arquivo_TabelaPreco(ByVal lTotalRegistros As Long, lRegProcessados As Long, BarraProgresso As Object) As Long
'Guarda na coleção os registros com as informações das Tabelas de Preço

Dim alComando(1 To 2) As Long
Dim iIndice As Integer
Dim sDescricao As String
Dim iCodigo As Integer
Dim lErro As Long
Dim sArquivo As String
Dim iAtivo As Integer
Dim tTabelaPreco As typeTabelaPreco

On Error GoTo Erro_Gera_Arquivo_TabelaPreco
        
    'Inicializa os array de lComandos
    For iIndice = LBound(alComando) To UBound(alComando)
         alComando(iIndice) = Comando_Abrir()
         If alComando(iIndice) = 0 Then gError 112590
    Next
    
    'Inicializa a variárel de texto
    sDescricao = String(STRING_TABELA_DESCRICAO, 0)
    
    'Pega os dados de todas as Tabelas de Preço
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Codigo, Descricao, Ativo, DataLog FROM TabelasDePreco ORDER BY Codigo ", 0, tTabelaPreco.iCodigo, tTabelaPreco.sDescricao, tTabelaPreco.iAtivo, tTabelaPreco.dtDataLog)
    If lErro <> AD_SQL_SUCESSO Then gError 112591

    'BUsca a primeira tabela
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112592
    
    'Enquanto a busca retornar alguma tabela
    Do While lErro = AD_SQL_SUCESSO
        
        'Monta o registro a ser inserido no arquivo
        sArquivo = TIPOREGISTROECF_TABELAPRECO & Chr(vbKeyControl) & iCodigo & Chr(vbKeyEscape) & sDescricao & Chr(vbKeyEscape) & iAtivo & Chr(vbKeyEscape)
            
        sArquivo = sArquivo & Chr(vbKeyEnd)
            
        Print #1, sArquivo
            
        lRegProcessados = lRegProcessados + 1
        BarraProgresso.Value = CInt((lRegProcessados / lTotalRegistros) * 100)
            
        If tTabelaPreco.dtDataLog = DATA_NULA Then
            
            'seta datalog para impedir excluir a tabela de preco uma vez que ela foi transferida para o caixa central/caixas e pode ser usada
            lErro = Comando_ExecutarPos(alComando(2), "UPDATE TabelasDePreco SET DataLog = ?", alComando(1), gdtDataAtual)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126406
            
        End If
            
        'Busca a próxima tabela
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112593
        
    Loop
        
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Gera_Arquivo_TabelaPreco = SUCESSO
    
    Exit Function

Erro_Gera_Arquivo_TabelaPreco:

    Gera_Arquivo_TabelaPreco = gErr
    
    Select Case gErr
                
        Case 112590
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 112591, 112592, 112593
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TABELA_PRECO", gErr)
            
        Case 126406
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_TABELA_PRECO", gErr, iCodigo)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151368)
            
    End Select

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Gera_Arquivo_TabelaPrecoItens(ByVal lTotalRegistros As Long, lRegProcessados As Long, BarraProgresso As Object) As Long
'Busca os dados de preços dos produtos nas tabelas de preço e retorna
'os registros montados para arquivo na coleção

Dim alComando(1 To 1) As Long
Dim iIndice As Integer
Dim lErro As Long
Dim sSelect As String
Dim sArquivo As String
Dim tTabelaPrecoItem As typeTabelaPrecoItem

On Error GoTo Erro_Gera_Arquivo_TabelaPrecoItens
        
    'Inicializa os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
         alComando(iIndice) = Comando_Abrir()
         If alComando(iIndice) = 0 Then gError 112547
    Next
    
    tTabelaPrecoItem.sCodProduto = String(STRING_PRODUTO, 0)
    
    'Monta o SELECT a ser executado.
    sSelect = "SELECT a.CodTabela, a.CodProduto,a.DataVigencia, a.Preco, a.DataLog FROM TabelasDePreco, TabelasdePrecoItens a WHERE Codigo = CodTabela AND TabelasdePreco.Ativo = ? AND a.Ativo = ? AND a.CodProduto IN (SELECT Codigo FROM Produtos, ProdutosFilial WHERE (Produtos.Codigo IN (SELECT CodProduto FROM ProdutoCodBarras) OR Referencia <> '') )  AND (EXISTS (SELECT CodTabela AS DataV FROM TabelasDePrecoItens WHERE DataVigencia <= ? AND FilialEmpresa = ? GROUP BY CodTabela, CodProduto  HAVING  a.CodTabela=CodTabela AND a.CodProduto=CodProduto AND a.DataVigencia=MAX(DataVigencia) AND MAX(DataVigencia)<= ?)) AND FilialEmpresa =? ORDER BY a.CodTabela, a.CodProduto"
    
    'Pega os dados da tabela de preco
    lErro = Comando_Executar(alComando(1), sSelect, tTabelaPrecoItem.iCodTabela, tTabelaPrecoItem.sCodProduto, tTabelaPrecoItem.dtDataVigencia, tTabelaPrecoItem.dPreco, tTabelaPrecoItem.dtDataLog, 1, Ativo, Date, giFilialEmpresa, Date, giFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 112557

    'Busca o primeiro registro de preço
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112558
        
    'Enquanto existir novos preços
    Do While lErro = AD_SQL_SUCESSO
        
        'Monta o registro para o arquivo
        sArquivo = TIPOREGISTROECF_TABELAPRECOITENS & Chr(vbKeyControl) & tTabelaPrecoItem.iCodTabela & Chr(vbKeyEscape) & tTabelaPrecoItem.sCodProduto & Chr(vbKeyEscape) & tTabelaPrecoItem.dtDataVigencia & Chr(vbKeyEscape) & tTabelaPrecoItem.dPreco & Chr(vbKeyEscape)
            
        sArquivo = sArquivo & Chr(vbKeyEnd)
        
        Print #1, sArquivo
            
        lRegProcessados = lRegProcessados + 1
        BarraProgresso.Value = CInt((lRegProcessados / lTotalRegistros) * 100)
            
        'Busca o próximo preço
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112559
        
    Loop
        
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
         Call Comando_Fechar(alComando(iIndice))
    Next
    
    Gera_Arquivo_TabelaPrecoItens = SUCESSO
    
    Exit Function

Erro_Gera_Arquivo_TabelaPrecoItens:

    Gera_Arquivo_TabelaPrecoItens = gErr
    
    Select Case gErr
                
        Case 112547
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 112557 To 112559
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TABELA_PRECO", gErr)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151369)
            
    End Select

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
         Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Gera_Arquivo_Produtos(lTotalRegistros As Long, lRegProcessados As Long, BarraProgresso As Object, ByVal bRecalculaTribProd As Boolean) As Long
'Busca os dados de produtos nas tabelas que envolvem produto e retorna
'os registros montados para arquivo na coleção

Dim alComando(1 To 9) As Long
Dim tProduto As typeProduto
Dim lErro As Long
Dim sArquivo As String
Dim dDesconto As Double
Dim iAtivo As Integer
Dim iIndice As Integer
Dim dLimiteDesconto As Double
Dim objEstoqueProduto As New ClassEstoqueProduto
Dim iAlmoxarifado As Integer, lNumIntDocTrib As Long
Dim objTributacaoDocItem As New ClassTributacaoDocItem
Dim objProduto As ClassProduto, objItemNF As ClassItemNF, objNF As ClassNFiscal

On Error GoTo Erro_Gera_Arquivo_Produtos

    'Inicializa os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
         alComando(iIndice) = Comando_Abrir()
         If alComando(iIndice) = 0 Then gError 126407
    Next

    With tProduto

        'Inicialização das variáveis texto para a leitura
        .sSiglaUMVenda = String(STRING_PRODUTO_SIGLAUMVENDA, 0)
        .sNomeReduzido = String(STRING_PRODUTO_NOME_REDUZIDO, 0)
        .sCodigo = String(STRING_PRODUTO, 0)
        .sReferencia = String(STRING_PRODUTO_REFERENCIA, 0)
        .sFigura = String(STRING_PRODUTO_FIGURA, 0)
        .sSituacaoTribECF = String(STRING_PRODUTOFILIAL_SITUACAOTRIBECF, 0)
        .sICMSAliquota = String(STRING_PRODUTOFILIAL_ICMS, 0)
        .sDescricao = String(STRING_PRODUTO_DESCRICAO, 0)
        .sSiglaUMEstoque = String(STRING_PRODUTO_SIGLAUMESTOQUE, 0)
        .sSiglaUMCompra = String(STRING_PRODUTO_SIGLAUMCOMPRA, 0)
        .sIPICodigo = String(STRING_PRODUTO_IPI_CODIGO, 0)
        .sCEST = String(STRING_CEST, 0)

        'Busca os dados da tabela de produtos , produtos filial e Códigos de barras
        lErro = Comando_Executar(alComando(1), "SELECT  Codigo, NomeReduzido, SiglaUMVenda, Referencia, Figura, SituacaoTribECF, ICMSAliquota,Descricao, Ativo, ClasseUM, SiglaUMEstoque, SiglaUMCompra, DataLog, UsaBalanca, Compras, IPICodigo, CEST FROM Produtos, ProdutosFilial WHERE SituacaoTribECF <> '' AND ( Produtos.Codigo IN (SELECT CodProduto FROM ProdutoCodBarras) OR Referencia <> '' ) AND ProdutosFilial.FilialEmpresa = ? AND Produtos.Codigo = ProdutosFilial.Produto AND Produtos.Ativo = ? ORDER BY Codigo ", _
            .sCodigo, .sNomeReduzido, .sSiglaUMVenda, .sReferencia, .sFigura, .sSituacaoTribECF, .sICMSAliquota, .sDescricao, iAtivo, .iClasseUM, .sSiglaUMEstoque, .sSiglaUMCompra, .dtDataLog, .iUsaBalanca, .iCompras, .sIPICodigo, .sCEST, giFilialEmpresa, PRODUTO_ATIVO)
        If lErro <> AD_SQL_SUCESSO Then gError 99590

        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 99591

        'Enquanto achar produtos com codigobarras
        Do While lErro = AD_SQL_SUCESSO
        
            Set objProduto = New ClassProduto
            Set objItemNF = New ClassItemNF
            Set objNF = New ClassNFiscal
            
            If Len(Trim(.sIPICodigo)) > 0 Then
                objItemNF.objTributacao.sIPICodProduto = .sIPICodigo
                objNF.dtDataEmissao = Date
                objProduto.sCodigo = .sCodigo
                
                lErro = CF("NFiscal_Valida_NCM", alComando(9), objProduto, objItemNF, objNF)
                If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
            End If
            
            'Busca os dados da tabela de produtos , produtos filial e tabeladeprecoitens
            lErro = Comando_Executar(alComando(5), "SELECT Valor1 FROM ProdutoCategoria, CategoriaProdutoItem WHERE Produto = ? AND UPPER(ProdutoCategoria.Categoria) = ? AND ProdutoCategoria.Categoria = CategoriaProdutoItem.Categoria AND ProdutoCategoria.Item = CategoriaProdutoItem.Item", dLimiteDesconto, .sCodigo, LIMITE_DESCONTO)
            If lErro <> AD_SQL_SUCESSO Then gError 126752
    
            lErro = Comando_BuscarPrimeiro(alComando(5))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126753
            
            If lErro = AD_SQL_SEM_DADOS Then dLimiteDesconto = 1

            'obter estoque disponivel do almoxarifado padrão
            Set objEstoqueProduto = New ClassEstoqueProduto
    
            'Busca o Almoxarifado padrão
            lErro = CF("AlmoxarifadoPadrao_Le", giFilialEmpresa, tProduto.sCodigo, iAlmoxarifado)
            If lErro <> SUCESSO And lErro <> 23796 Then gError 204600
            
            If lErro = SUCESSO Then

                objEstoqueProduto.sProduto = tProduto.sCodigo
                objEstoqueProduto.iAlmoxarifado = iAlmoxarifado
                
                'Le os estoques desse produto nesse almoxarifado
                lErro = CF("EstoqueProduto_Le", objEstoqueProduto)
                If lErro <> SUCESSO And lErro <> 21306 Then gError 204601

            End If
            
            If .sSituacaoTribECF = TIPOTRIBISS_SITUACAOTRIBECF_NAO_TRIBUTADO Then
                .sSituacaoTribECF = "NS"
            ElseIf .sSituacaoTribECF = TIPOTRIBISS_SITUACAOTRIBECF_ISENTA Then
                .sSituacaoTribECF = "IS"
            ElseIf .sSituacaoTribECF = TIPOTRIBISS_SITUACAOTRIBECF_TRIB_SUBST Then
                .sSituacaoTribECF = "FS"
            End If

            sArquivo = TIPOREGISTROECF_PRODUTOSNOME & Chr(vbKeyControl) & .sCodigo & Chr(vbKeyEscape) & .sNomeReduzido & Chr(vbKeyEscape) & .sSiglaUMVenda & Chr(vbKeyEscape) & .sReferencia & Chr(vbKeyEscape) & .sFigura & Chr(vbKeyEscape) & .sSituacaoTribECF & Chr(vbKeyEscape) & .sICMSAliquota & Chr(vbKeyEscape) & .sDescricao & Chr(vbKeyEscape) & .iClasseUM & Chr(vbKeyEscape) & .sSiglaUMEstoque & Chr(vbKeyEscape) & .sSiglaUMCompra & Chr(vbKeyEscape) & iAtivo & Chr(vbKeyEscape) & CStr(dLimiteDesconto) & Chr(vbKeyEscape) & .iUsaBalanca & Chr(vbKeyEscape) & .iCompras & Chr(vbKeyEscape) & objEstoqueProduto.dQuantDispNossa & Chr(vbKeyEscape)
            
            
            
'**** acrescentado em funcao do ECF de SP *********

            If Not bRecalculaTribProd Then

                lErro = Comando_Executar(alComando(6), "SELECT T.NumIntDoc FROM ProdutoLojaTrib P, TributacaoDocItem T WHERE P.NumIntDoc = T.NumIntDoc AND T.TipoDoc = ? AND P.FilialEmpresa = ? AND P.Produto = ?", lNumIntDocTrib, TIPODOC_TRIB_PRODLOJA, giFilialEmpresa, .sCodigo)
                If lErro <> AD_SQL_SUCESSO Then gError 214035
        
                lErro = Comando_BuscarProximo(alComando(6))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 214036
                
            Else
            
                lErro = AD_SQL_SEM_DADOS
    
            End If
            
            If lErro <> AD_SQL_SUCESSO Then
            
                lErro = CF("ProdutoLojaTrib_Gera_EmTrans", giFilialEmpresa, .sCodigo, lNumIntDocTrib)
                If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
            
            End If

            Set objTributacaoDocItem = New ClassTributacaoDocItem

            objTributacaoDocItem.iTipoDoc = TIPODOC_TRIB_PRODLOJA
            objTributacaoDocItem.lNumIntDocItem = lNumIntDocTrib
            
            lErro = CF("TributacaoDocItem_Le", objTributacaoDocItem)
            If lErro <> SUCESSO And lErro <> ERRO_LEITURA_SEM_DADOS Then gError ERRO_SEM_MENSAGEM
            
            If lErro <> SUCESSO Then gError 214040
            
            
            sArquivo = sArquivo & objTributacaoDocItem.dQuantidade & Chr(vbKeyEscape)
            sArquivo = sArquivo & objTributacaoDocItem.dPrecoUnitario & Chr(vbKeyEscape)
            sArquivo = sArquivo & objTributacaoDocItem.sNaturezaOp & Chr(vbKeyEscape)
            sArquivo = sArquivo & objTributacaoDocItem.iTipoTributacao & Chr(vbKeyEscape)
            sArquivo = sArquivo & objTributacaoDocItem.iICMSTipo & Chr(vbKeyEscape)
            sArquivo = sArquivo & objTributacaoDocItem.dICMSBase & Chr(vbKeyEscape)
            sArquivo = sArquivo & objTributacaoDocItem.dICMSPercRedBase & Chr(vbKeyEscape)
            sArquivo = sArquivo & objTributacaoDocItem.dICMSAliquota & Chr(vbKeyEscape)
            sArquivo = sArquivo & objTributacaoDocItem.dICMSValor & Chr(vbKeyEscape)
            
            sArquivo = sArquivo & objTributacaoDocItem.iPISTipo & Chr(vbKeyEscape)
            sArquivo = sArquivo & objTributacaoDocItem.iPISTipoCalculo & Chr(vbKeyEscape)
            sArquivo = sArquivo & objTributacaoDocItem.dPISBase & Chr(vbKeyEscape)
            sArquivo = sArquivo & objTributacaoDocItem.dPISAliquota & Chr(vbKeyEscape)
            sArquivo = sArquivo & objTributacaoDocItem.dPISAliquotaValor & Chr(vbKeyEscape)
            sArquivo = sArquivo & objTributacaoDocItem.dPISQtde & Chr(vbKeyEscape)
            sArquivo = sArquivo & objTributacaoDocItem.dPISValor & Chr(vbKeyEscape)
            
            sArquivo = sArquivo & objTributacaoDocItem.iPISSTTipoCalculo & Chr(vbKeyEscape)
            sArquivo = sArquivo & objTributacaoDocItem.dPISSTBase & Chr(vbKeyEscape)
            sArquivo = sArquivo & objTributacaoDocItem.dPISSTAliquota & Chr(vbKeyEscape)
            sArquivo = sArquivo & objTributacaoDocItem.dPISSTAliquotaValor & Chr(vbKeyEscape)
            sArquivo = sArquivo & objTributacaoDocItem.dPISSTQtde & Chr(vbKeyEscape)
            sArquivo = sArquivo & objTributacaoDocItem.dPISSTValor & Chr(vbKeyEscape)

            
            sArquivo = sArquivo & objTributacaoDocItem.iCOFINSTipo & Chr(vbKeyEscape)
            sArquivo = sArquivo & objTributacaoDocItem.iCOFINSTipoCalculo & Chr(vbKeyEscape)
            sArquivo = sArquivo & objTributacaoDocItem.dCOFINSBase & Chr(vbKeyEscape)
            sArquivo = sArquivo & objTributacaoDocItem.dCOFINSAliquota & Chr(vbKeyEscape)
            sArquivo = sArquivo & objTributacaoDocItem.dCOFINSAliquotaValor & Chr(vbKeyEscape)
            sArquivo = sArquivo & objTributacaoDocItem.dCOFINSQtde & Chr(vbKeyEscape)
            sArquivo = sArquivo & objTributacaoDocItem.dCOFINSValor & Chr(vbKeyEscape)
            
            
            sArquivo = sArquivo & objTributacaoDocItem.iCOFINSSTTipoCalculo & Chr(vbKeyEscape)
            sArquivo = sArquivo & objTributacaoDocItem.dCOFINSSTBase & Chr(vbKeyEscape)
            sArquivo = sArquivo & objTributacaoDocItem.dCOFINSSTAliquota & Chr(vbKeyEscape)
            sArquivo = sArquivo & objTributacaoDocItem.dCOFINSSTAliquotaValor & Chr(vbKeyEscape)
            sArquivo = sArquivo & objTributacaoDocItem.dCOFINSSTQtde & Chr(vbKeyEscape)
            sArquivo = sArquivo & objTributacaoDocItem.dCOFINSSTValor & Chr(vbKeyEscape)
            
            sArquivo = sArquivo & objTributacaoDocItem.sCST & Chr(vbKeyEscape)
            sArquivo = sArquivo & objTributacaoDocItem.sISSQN & Chr(vbKeyEscape)
            sArquivo = sArquivo & objTributacaoDocItem.dISSBase & Chr(vbKeyEscape)
            sArquivo = sArquivo & objTributacaoDocItem.dISSAliquota & Chr(vbKeyEscape)
            sArquivo = sArquivo & objTributacaoDocItem.sISSCidadeIBGE & Chr(vbKeyEscape)
            sArquivo = sArquivo & objTributacaoDocItem.dISSValor & Chr(vbKeyEscape)
            
            sArquivo = sArquivo & objTributacaoDocItem.iICMSBaseModalidade & Chr(vbKeyEscape)
            sArquivo = sArquivo & objTributacaoDocItem.iOrigemMercadoria & Chr(vbKeyEscape)
            sArquivo = sArquivo & objTributacaoDocItem.sGenero & Chr(vbKeyEscape)
            sArquivo = sArquivo & objTributacaoDocItem.dQtdTrib & Chr(vbKeyEscape)
            sArquivo = sArquivo & objTributacaoDocItem.sUMTrib & Chr(vbKeyEscape)
            sArquivo = sArquivo & objTributacaoDocItem.dValorUnitTrib & Chr(vbKeyEscape)
            
            sArquivo = sArquivo & objTributacaoDocItem.sISSCST & Chr(vbKeyEscape)
            sArquivo = sArquivo & objTributacaoDocItem.dICMSValorIsento & Chr(vbKeyEscape)
            sArquivo = sArquivo & objTributacaoDocItem.iICMSMotivo & Chr(vbKeyEscape)
            sArquivo = sArquivo & objTributacaoDocItem.iICMSSimplesTipo & Chr(vbKeyEscape)
            sArquivo = sArquivo & objTributacaoDocItem.iISSTipo & Chr(vbKeyEscape)
            
            sArquivo = sArquivo & objTributacaoDocItem.iRegimeTributario & Chr(vbKeyEscape)
            sArquivo = sArquivo & objTributacaoDocItem.sCSOSN & Chr(vbKeyEscape)
            sArquivo = sArquivo & objTributacaoDocItem.dTotTrib & Chr(vbKeyEscape)
            sArquivo = sArquivo & objTributacaoDocItem.iTotTribTipo & Chr(vbKeyEscape)
            sArquivo = sArquivo & Trim(tProduto.sIPICodigo) & Chr(vbKeyEscape)
            
            
'**** fim do acrescentado em funcao do ECF de SP *********
            
            'campo novo em 21/03/2016
            sArquivo = sArquivo & Trim(tProduto.sCEST) & Chr(vbKeyEscape)
            '25/10/2017
            sArquivo = sArquivo & objTributacaoDocItem.dICMSpFCP & Chr(vbKeyEscape)
            sArquivo = sArquivo & objTributacaoDocItem.dICMSvFCP & Chr(vbKeyEscape)
            sArquivo = sArquivo & objTributacaoDocItem.scBenef & Chr(vbKeyEscape)
            sArquivo = sArquivo & objTributacaoDocItem.sindEscala & Chr(vbKeyEscape)
            sArquivo = sArquivo & objTributacaoDocItem.sCNPJFab & Chr(vbKeyEscape)
            
            .sCodigoBarras = String(STRING_PRODUTO_CODIGO_BARRAS, 0)
            
            'Busca os dados da tabela de produtos , produtos filial e tabeladeprecoitens
            lErro = Comando_Executar(alComando(2), "SELECT CodBarras FROM ProdutoCodBarras WHERE CodProduto = ?", .sCodigoBarras, .sCodigo)
            If lErro <> AD_SQL_SUCESSO Then gError 99593
    
            lErro = Comando_BuscarPrimeiro(alComando(2))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 99594
    
            'Enquanto achar produtos com Referencia
            Do While lErro = AD_SQL_SUCESSO
    
                'Inclui o registro no Arquivo .txt
                sArquivo = sArquivo & .sCodigoBarras & Chr(vbKeyEscape)
    
                lErro = Comando_BuscarProximo(alComando(2))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 99595
    
            Loop
            

            sArquivo = sArquivo & Chr(vbKeyEnd)
                
            Print #1, sArquivo
            
            lRegProcessados = lRegProcessados + 1
            BarraProgresso.Value = CInt((lRegProcessados / lTotalRegistros) * 100)
            
            If .dtDataLog = DATA_NULA Then
            
                .sNomeReduzido = String(STRING_PRODUTO_NOME_REDUZIDO, 0)
            
                'Busca os dados da tabela de produtos , produtos filial e Códigos de barras
                lErro = Comando_ExecutarPos(alComando(3), "SELECT NomeReduzido FROM Produtos WHERE Codigo = ?", 0, .sNomeReduzido, .sCodigo)
                If lErro <> AD_SQL_SUCESSO Then gError 126408
        
                lErro = Comando_BuscarPrimeiro(alComando(3))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126409
            
                'Busca os dados da tabela de produtos , produtos filial e Códigos de barras
                lErro = Comando_ExecutarPos(alComando(4), "UPDATE Produtos SET DataLog = ?", alComando(3), gdtDataAtual)
                If lErro <> AD_SQL_SUCESSO Then gError 126410
            
            End If
            
            lErro = Comando_BuscarProximo(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 99595
        
        Loop
        
        
    End With

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
         Call Comando_Fechar(alComando(iIndice))
    Next

    Gera_Arquivo_Produtos = SUCESSO

    Exit Function

Erro_Gera_Arquivo_Produtos:

    Gera_Arquivo_Produtos = gErr

    Select Case gErr

        Case 99589, 99596
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 99590 To 99595
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOS1", gErr)
    
        Case 126408, 126409
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOS", gErr, tProduto.sCodigo)

        Case 126410
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_PRODUTO", gErr, tProduto.sCodigo)

        Case 126752, 126753
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CATEGORIAPRODUTOITEM", gErr)

        Case 204600, 204601
        
        Case 214035 To 214038
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOLOJATRIB", gErr)

        Case 214039
            Call Rotina_Erro(vbOKOnly, "ERRO_PRODUTOLOJATRIB_NAO_ENCONTRADO", gErr, TIPODOC_TRIB_PRODLOJA, giFilialEmpresa, tProduto.sCodigo)

        Case 214040
            Call Rotina_Erro(vbOKOnly, "ERRO_TRIBUTACAODOCITEM_NAO_ENCONTRADO", gErr)

        Case ERRO_SEM_MENSAGEM

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151370)

    End Select

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
         Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function Gera_Arquivo_Vendedores(lTotalRegistros As Long, lRegProcessados As Long, BarraProgresso As Object) As Long

Dim lErro As Long
Dim alComando(1 To 3) As Long
Dim sNome As String
Dim iCodigo As Integer
Dim sArquivo As String
Dim objEndereco As New ClassEndereco
Dim tVendedor As typeVendedor
Dim iFilialEmpresa As Integer
Dim iIndice As Integer

On Error GoTo Erro_Gera_Arquivo_Vendedores
        
    'Inicializa os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
         alComando(iIndice) = Comando_Abrir()
         If alComando(iIndice) = 0 Then gError 126411
    Next
    
    'Seleciona todos os Vendedores Ativos
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Codigo, NomeReduzido, Nome, Endereco, Tipo, Matricula, CodRegiao, SaldoComissao, PercComissao, PercComissaoBaixa, PercComissaoEmissao, ComissaoSobreTotal, ComissaoFrete, ComissaoICM, ComissaoIPI, ComissaoSeguro, Banco, Agencia, ContaCorrente, Ativo, DataLog " & _
                                       "FROM Vendedores", 0, _
                                       tVendedor.iCodigo, tVendedor.sNomeReduzido, tVendedor.sNome, tVendedor.lEndereco, tVendedor.iTipo, tVendedor.sMatricula, tVendedor.iCodRegiao, tVendedor.dSaldoComissao, tVendedor.dPercComissao, tVendedor.dPercComissaoBaixa, tVendedor.dPercComissaoEmissao, tVendedor.iComissaoSobreTotal, tVendedor.iComissaoFrete, tVendedor.iComissaoICM, tVendedor.iComissaoIPI, tVendedor.iComissaoSeguro, tVendedor.iBanco, tVendedor.sAgencia, tVendedor.sContaCorrente, tVendedor.iAtivo, tVendedor.dtDataLog)
    If lErro <> AD_SQL_SUCESSO Then gError 126415

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126416
    
    Do While lErro = AD_SQL_SUCESSO
            
        If tVendedor.lEndereco > 0 Then
            objEndereco.lCodigo = tVendedor.lEndereco
            
            'Pega os dados do endereço
            lErro = CF("Endereco_Le", objEndereco)
            If lErro <> AD_SQL_SUCESSO And lErro <> 12309 Then gError 112568
                
            If lErro = 12309 Then gError 112569
            
        End If
        
        With tVendedor
        
            'Inclui cada registro no arquivo .txt
            sArquivo = TIPOREGISTROECF_VENDEDORES & Chr(vbKeyControl) & .iCodigo & Chr(vbKeyEscape) & .sNomeReduzido & Chr(vbKeyEscape) & .sNome & Chr(vbKeyEscape) & .lEndereco & Chr(vbKeyEscape) & .iTipo & Chr(vbKeyEscape) & .sMatricula & Chr(vbKeyEscape) & .iCodRegiao & Chr(vbKeyEscape) & .dSaldoComissao & Chr(vbKeyEscape) & .dPercComissao & Chr(vbKeyEscape) & .dPercComissaoBaixa & Chr(vbKeyEscape) & .dPercComissaoEmissao & Chr(vbKeyEscape) & .iComissaoSobreTotal & Chr(vbKeyEscape) & .iComissaoFrete & Chr(vbKeyEscape) & .iComissaoICM & Chr(vbKeyEscape) & .iComissaoIPI & Chr(vbKeyEscape) & .iComissaoSeguro & Chr(vbKeyEscape) & .iBanco & Chr(vbKeyEscape) & .sAgencia & Chr(vbKeyEscape) & .sContaCorrente & Chr(vbKeyEscape) & .iAtivo & Chr(vbKeyEscape)
            
            If tVendedor.lEndereco > 0 Then
                sArquivo = sArquivo & objEndereco.sBairro & Chr(vbKeyEscape) & objEndereco.sCidade & Chr(vbKeyEscape) & objEndereco.sSiglaEstado & Chr(vbKeyEscape) & objEndereco.iCodigoPais & Chr(vbKeyEscape) & objEndereco.sCEP & Chr(vbKeyEscape) & objEndereco.sTelefone1 & Chr(vbKeyEscape) & objEndereco.sTelefone2 & Chr(vbKeyEscape) & objEndereco.sEmail & Chr(vbKeyEscape) & objEndereco.sFax & Chr(vbKeyEscape) & objEndereco.sContato & Chr(vbKeyEscape) & objEndereco.sEndereco & Chr(vbKeyEscape)
            End If
            
            'Seleciona todas as Filiais que o Vendedor esta Cadastrado
            lErro = Comando_Executar(alComando(2), "SELECT FilialEmpresa FROM VendedorLoja WHERE Vendedor = ?", iFilialEmpresa, .iCodigo)
            If lErro <> AD_SQL_SUCESSO Then gError 126412
        
            lErro = Comando_BuscarPrimeiro(alComando(2))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126413
        
            Do While lErro = AD_SQL_SUCESSO
            
                sArquivo = sArquivo & iFilialEmpresa & Chr(vbKeyEscape)
        
                lErro = Comando_BuscarProximo(alComando(2))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126414
        
            Loop
            
            sArquivo = sArquivo & Chr(vbKeyEnd)
        
        End With
        
        Print #1, sArquivo
                          
        lRegProcessados = lRegProcessados + 1
        BarraProgresso.Value = CInt((lRegProcessados / lTotalRegistros) * 100)
                          
        If tVendedor.dtDataLog = DATA_NULA Then
        
            'Atualiza o campo DataLog
            lErro = Comando_ExecutarPos(alComando(3), "UPDATE Vendedores SET DataLog = ?", alComando(1), gdtDataAtual)
            If lErro <> AD_SQL_SUCESSO Then gError 126418
        
        End If
                          
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126417
                          
    Loop
        
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
         Call Comando_Fechar(alComando(iIndice))
    Next
     
    Gera_Arquivo_Vendedores = SUCESSO
    
    Exit Function

Erro_Gera_Arquivo_Vendedores:

    Gera_Arquivo_Vendedores = gErr
    
    Select Case gErr
                
        Case 112568
        
        Case 112569
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ENDERECO_NAO_CADASTRADO", gErr)
            
        Case 126411
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 126412, 126413, 126414
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_VENDEDORLOJA", gErr, tVendedor.iCodigo)
        
        Case 126415, 126416, 126417
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_VENDEDORES", gErr)
        
        Case 126418
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_VENDEDOR", gErr, tVendedor.iCodigo)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151371)
            
    End Select
    
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
         Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function Gera_Arquivo_Cliente(lTotalRegistros As Long, lRegProcessados As Long, BarraProgresso As Object) As Long

Dim lErro As Long
Dim lComando As Long
Dim sNome As String
Dim iCodigo As Integer
Dim sArquivo As String
Dim tCliente As typeCliente
Dim objEndereco As New ClassEndereco
Dim objCliente As New ClassCliente
Dim tFilialCliente As typeFilialCliente
Dim alComando(1 To 4) As Long
Dim iIndice As Integer

On Error GoTo Erro_Gera_Arquivo_Cliente
        
    'Inicializa os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
         alComando(iIndice) = Comando_Abrir()
         If alComando(iIndice) = 0 Then gError 109589
    Next
    
    tCliente.sNomeReduzido = String(STRING_CLIENTE_NOME_REDUZIDO, 0)
    tCliente.sRazaoSocial = String(STRING_CLIENTE_RAZAO_SOCIAL, 0)
    
    'Pega os dados do Cliente
    lErro = Comando_ExecutarPos(alComando(1), "SELECT CodigoLoja, NomeReduzido, Codigo, Tipo, RazaoSocial, FilialEmpresaLoja, Ativo, Transferido FROM Clientes", 0, tCliente.lCodigoLoja, tCliente.sNomeReduzido, tCliente.lCodigo, tCliente.iTipo, tCliente.sRazaoSocial, tCliente.iFilialEmpresaLoja, tCliente.iAtivo, tCliente.iTransferido)
    If lErro <> AD_SQL_SUCESSO Then gError 109590

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109591
    
    tFilialCliente.sCgc = String(STRING_CLIENTE_CGC, 0)
    tFilialCliente.sRG = String(STRING_RG, 0)
    tFilialCliente.sNome = String(STRING_NOME, 0)
    
    Do While lErro = AD_SQL_SUCESSO
        
        'Pega os dados das Filiais do Cliente
        lErro = Comando_ExecutarPos(alComando(2), "SELECT CGC, RG, Endereco, FilialEmpresaLoja, CodFilial, Nome, CodFilialLoja, Ativo, Transferido FROM Clientes, FiliaisClientes WHERE CodCliente = ?", 0, tFilialCliente.sCgc, tFilialCliente.sRG, tFilialCliente.lEndereco, tFilialCliente.iFilialEmpresaLoja, tFilialCliente.iCodFilial, tFilialCliente.sNome, tFilialCliente.iCodFilialLoja, tFilialCliente.iAtivo, tFilialCliente.iTransferido, tCliente.lCodigo)
        If lErro <> AD_SQL_SUCESSO Then gError 126431
        
        lErro = Comando_BuscarPrimeiro(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126432
        
        Do While lErro = AD_SQL_SUCESSO
        
            If tFilialCliente.lEndereco > 0 Then
                objEndereco.lCodigo = tFilialCliente.lEndereco
                
                'Pega os dados do endereço
                lErro = CF("Endereco_Le", objEndereco)
                If lErro <> AD_SQL_SUCESSO And lErro <> 12309 Then gError 112571
                    
                If lErro = 12309 Then gError 112572
            End If
                    
            With tCliente
            
                sArquivo = TIPOREGISTROECF_CLIENTE & Chr(vbKeyControl) & .lCodigoLoja & Chr(vbKeyEscape) & .sNomeReduzido & Chr(vbKeyEscape) & tFilialCliente.sCgc & Chr(vbKeyEscape) & .lCodigo & Chr(vbKeyEscape) & .iTipo & Chr(vbKeyEscape) & .sRazaoSocial & Chr(vbKeyEscape) & tFilialCliente.sRG & Chr(vbKeyEscape) & tFilialCliente.lEndereco & Chr(vbKeyEscape) & .iFilialEmpresaFilialLoja & Chr(vbKeyEscape) & tFilialCliente.iCodFilial & Chr(vbKeyEscape) & tFilialCliente.sNome & Chr(vbKeyEscape) & tFilialCliente.iCodFilialLoja & Chr(vbKeyEscape) & tFilialCliente.iFilialEmpresaLoja & Chr(vbKeyEscape) & .iAtivo & Chr(vbKeyEscape) & tFilialCliente.iAtivo & Chr(vbKeyEscape)
                
                If .lEndereco > 0 Then
                    sArquivo = sArquivo & objEndereco.sBairro & Chr(vbKeyEscape) & objEndereco.sCidade & Chr(vbKeyEscape) & objEndereco.sSiglaEstado & Chr(vbKeyEscape) & objEndereco.iCodigoPais & Chr(vbKeyEscape) & objEndereco.sCEP & Chr(vbKeyEscape) & objEndereco.sTelefone1 & Chr(vbKeyEscape) & objEndereco.sTelefone2 & Chr(vbKeyEscape) & objEndereco.sEmail & Chr(vbKeyEscape) & objEndereco.sFax & Chr(vbKeyEscape) & objEndereco.sContato & Chr(vbKeyEscape) & objEndereco.sEndereco & Chr(vbKeyEscape)
                End If
                
                sArquivo = sArquivo & Chr(vbKeyEnd)
                   
                Print #1, sArquivo
                
            End With
            
            If tFilialCliente.iTransferido <> TRANSFERIDO Then
            
                'Atualiza o campo Transferido
                lErro = Comando_ExecutarPos(alComando(3), "UPDATE FiliaisClientes SET Transferido = ?", alComando(2), TRANSFERIDO)
                If lErro <> AD_SQL_SUCESSO Then gError 126434
            
            End If
            
            lErro = Comando_BuscarProximo(alComando(2))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126433
            
        Loop
            
        lRegProcessados = lRegProcessados + 1
        BarraProgresso.Value = CInt((lRegProcessados / lTotalRegistros) * 100)
    
        If tCliente.iTransferido <> TRANSFERIDO Then
        
            'Atualiza o campo Transferido
            lErro = Comando_ExecutarPos(alComando(4), "UPDATE Clientes SET Transferido = ?", alComando(1), TRANSFERIDO)
            If lErro <> AD_SQL_SUCESSO Then gError 126435
        
        End If
    
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109592
            
    Loop
        
    For iIndice = LBound(alComando) To UBound(alComando)
         Call Comando_Fechar(alComando(iIndice))
    Next
        
    Gera_Arquivo_Cliente = SUCESSO
    
    Exit Function

Erro_Gera_Arquivo_Cliente:

    Gera_Arquivo_Cliente = gErr
    
    Select Case gErr
                
        Case 109589
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 109590, 109591, 109592
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CLIENTES", gErr)
            
        Case 112571
        
        Case 112572
            Call Rotina_Erro(vbOKOnly, "ERRO_ENDERECO_NAO_CADASTRADO", gErr)
            
        Case 126431, 126432, 126433
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIAISCLIENTES2", gErr)
            
        Case 126434
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_FILIALCLIENTE1", gErr, tCliente.lCodigo, tFilialCliente.iCodFilial)
            
        Case 126435
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_CLIENTES", gErr, tCliente.lCodigo)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151372)
            
    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
         Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Private Function Gera_Arquivo_Bancos(lTotalRegistros As Long, lRegProcessados As Long, BarraProgresso As Object) As Long
'Guarda na coleção os registros com as informações dos Bancos

Dim alComando(1 To 2) As Long
Dim iIndice As Integer
Dim lErro As Long
Dim sArquivo As String
Dim tBanco As typeBanco

On Error GoTo Erro_Gera_Arquivo_Bancos
        
    'Inicializa os array de lComandos
    For iIndice = LBound(alComando) To UBound(alComando)
         alComando(iIndice) = Comando_Abrir()
         If alComando(iIndice) = 0 Then gError 126436
    Next
    
    'Inicializa a variárel de texto
    tBanco.sNome = String(STRING_BANCO_NOME, 0)
    tBanco.sNomeReduzido = String(STRING_BANCO_NOME_REDUZIDO, 0)
    tBanco.sLayoutCheque = String(STRING_BANCO_LAYOUT_CHEQUE, 0)
    tBanco.sLayoutBoleto = String(STRING_BANCO_LAYOUT_BOLETO, 0)
    
    'Pega os dados de todos os bancos
    lErro = Comando_Executar(alComando(1), "SELECT CodBanco, Nome, NomeReduzido, LayoutCheque, LayoutBoleto, DataLog, Ativo FROM Bancos", tBanco.iCodBanco, tBanco.sNome, tBanco.sNomeReduzido, tBanco.sLayoutCheque, tBanco.sLayoutBoleto, tBanco.dtDataLog, tBanco.iAtivo)
    If lErro <> AD_SQL_SUCESSO Then gError 126437

    'BUsca a primeira tabela
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126438
    
    'Enquanto a busca retornar alguma tabela
    Do While lErro = AD_SQL_SUCESSO
        
        'Monta o registro a ser inserido no arquivo
        sArquivo = TIPOREGISTROECF_BANCO & Chr(vbKeyControl) & tBanco.iCodBanco & Chr(vbKeyEscape) & tBanco.sNome & Chr(vbKeyEscape) & tBanco.sNomeReduzido & Chr(vbKeyEscape) & tBanco.sLayoutCheque & Chr(vbKeyEscape) & tBanco.sLayoutBoleto & Chr(vbKeyEscape) & tBanco.iAtivo & Chr(vbKeyEscape)
            
        sArquivo = sArquivo & Chr(vbKeyEnd)
            
        Print #1, sArquivo
            
        lRegProcessados = lRegProcessados + 1
        BarraProgresso.Value = CInt((lRegProcessados / lTotalRegistros) * 100)
            
        If tBanco.dtDataLog = DATA_NULA Then
        
            'Atualiza o campo DataLog
            lErro = Comando_ExecutarPos(alComando(2), "UPDATE Bancos SET DataLog = ?", alComando(1), gdtDataAtual)
            If lErro <> AD_SQL_SUCESSO Then gError 126439
        
        
        End If
            
        'Busca a próxima tabela
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126440
        
    Loop
        
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Gera_Arquivo_Bancos = SUCESSO
    
    Exit Function

Erro_Gera_Arquivo_Bancos:

    Gera_Arquivo_Bancos = gErr
    
    Select Case gErr
                
        Case 126436
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 126437, 126438, 126440
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BANCOS1", gErr)
            
        Case 126439
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_BANCOS", gErr, tBanco.iCodBanco)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151373)
            
    End Select

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function Gera_Arquivo_ContasCorrentes(lTotalRegistros As Long, lRegProcessados As Long, BarraProgresso As Object) As Long
'Guarda na coleção os registros com as informações das Contas Correntes

Dim alComando(1 To 2) As Long
Dim iIndice As Integer
Dim lErro As Long
Dim sArquivo As String
Dim tContaCorrenteInt As typeContaCorrenteInt

On Error GoTo Erro_Gera_Arquivo_ContasCorrentes
        
    'Inicializa os array de lComandos
    For iIndice = LBound(alComando) To UBound(alComando)
         alComando(iIndice) = Comando_Abrir()
         If alComando(iIndice) = 0 Then gError 117618
    Next
    
    tContaCorrenteInt.sAgencia = String(STRING_AGENCIA, 0)
    tContaCorrenteInt.sContaContabil = String(STRING_CONTA, 0)
    tContaCorrenteInt.sContato = String(STRING_CONTATO, 0)
    tContaCorrenteInt.sDescricao = String(STRING_CONTA_CORRENTE_DESCRICAO, 0)
    tContaCorrenteInt.sDVAgConta = String(STRING_DV, 0)
    tContaCorrenteInt.sDVAgencia = String(STRING_DV, 0)
    tContaCorrenteInt.sDVNumConta = String(STRING_DV, 0)
    tContaCorrenteInt.sNomeReduzido = String(STRING_NOME, 0)
    tContaCorrenteInt.sNumConta = String(STRING_NUMCONTA, 0)
    tContaCorrenteInt.stelefone = String(STRING_TELEFONE, 0)
    tContaCorrenteInt.sFax = String(STRING_TELEFONE, 0)
    
    'Seleciona todos os dados relacionados a conta passada como parametro
    lErro = Comando_Executar(alComando(1), "SELECT Codigo, FilialEmpresa, NomeReduzido, Descricao, CodBanco, Agencia, DVAgencia, NumConta, DVNumConta, DVagConta, Contato, Telefone,Fax, SaldoInicial, DataSaldoInicial, ContaContabil, Ativo, DataLog FROM ContasCorrentesInternas", _
    tContaCorrenteInt.iCodigo, tContaCorrenteInt.iFilialEmpresa, tContaCorrenteInt.sNomeReduzido, tContaCorrenteInt.sDescricao, _
    tContaCorrenteInt.iCodBanco, tContaCorrenteInt.sAgencia, tContaCorrenteInt.sDVAgencia, tContaCorrenteInt.sNumConta, tContaCorrenteInt.sDVNumConta, tContaCorrenteInt.sDVAgConta, tContaCorrenteInt.sContato, tContaCorrenteInt.stelefone, tContaCorrenteInt.sFax, _
    tContaCorrenteInt.dSaldoInicial, tContaCorrenteInt.dtDataSaldoInicial, tContaCorrenteInt.sContaContabil, tContaCorrenteInt.iAtivo, tContaCorrenteInt.dtDataLog)
    If lErro <> AD_SQL_SUCESSO Then gError 117619

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 117620
    
    'Enquanto a busca retornar alguma tabela
    Do While lErro = AD_SQL_SUCESSO
        
        'Monta o registro a ser inserido no arquivo
        sArquivo = TIPOREGISTROECF_CCI & Chr(vbKeyControl) & tContaCorrenteInt.iCodigo & Chr(vbKeyEscape) & tContaCorrenteInt.iFilialEmpresa & Chr(vbKeyEscape) & tContaCorrenteInt.sNomeReduzido & Chr(vbKeyEscape) & tContaCorrenteInt.sDescricao & Chr(vbKeyEscape)
            
        sArquivo = sArquivo & tContaCorrenteInt.iCodBanco & Chr(vbKeyEscape) & tContaCorrenteInt.sAgencia & Chr(vbKeyEscape) & tContaCorrenteInt.sDVAgencia & Chr(vbKeyEscape) & tContaCorrenteInt.sNumConta & Chr(vbKeyEscape) & tContaCorrenteInt.sDVNumConta & Chr(vbKeyEscape) & tContaCorrenteInt.sDVAgConta & Chr(vbKeyEscape) & tContaCorrenteInt.sContato & Chr(vbKeyEscape) & tContaCorrenteInt.stelefone & Chr(vbKeyEscape) & tContaCorrenteInt.sFax & Chr(vbKeyEscape)
        
        sArquivo = sArquivo & tContaCorrenteInt.dSaldoInicial & Chr(vbKeyEscape) & tContaCorrenteInt.dtDataSaldoInicial & Chr(vbKeyEscape) & tContaCorrenteInt.sContaContabil & Chr(vbKeyEscape) & tContaCorrenteInt.iAtivo & Chr(vbKeyEscape)
            
        sArquivo = sArquivo & Chr(vbKeyEnd)
            
        Print #1, sArquivo
            
        lRegProcessados = lRegProcessados + 1
        BarraProgresso.Value = CInt((lRegProcessados / lTotalRegistros) * 100)
            
        If tContaCorrenteInt.dtDataLog = DATA_NULA Then
        
            'Atualiza o campo DataLog
            lErro = Comando_ExecutarPos(alComando(2), "UPDATE ContasCorrentesInternas SET DataLog = ?", alComando(1), gdtDataAtual)
            If lErro <> AD_SQL_SUCESSO Then gError 117621
        
        End If
            
        'Busca a próxima tabela
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 117622
        
    Loop
        
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Gera_Arquivo_ContasCorrentes = SUCESSO
    
    Exit Function

Erro_Gera_Arquivo_ContasCorrentes:

    Gera_Arquivo_ContasCorrentes = gErr
    
    Select Case gErr
                
        Case 117618
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 117619, 117620, 117622
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CONTASCORRENTESINTERNAS", gErr)
            
        Case 117621
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_CONTASCORRENTESINTERNAS", gErr)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151374)
            
    End Select

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function GeracaoArqCC_Grava(BarraProgresso As Object, objMsgs As Object, Optional ByVal bRecalculaTribProd As Boolean = True) As Long
'gera o arquivo com os dados do caixa central que devem ser transportados para os caixas.

Dim lErro As Long
Dim sArquivo As String
Dim iIndice As Integer
Dim colArquivo As New Collection
Dim objCaixa As New ClassCaixa
Dim colTabPreco As New Collection
Dim colTabPrecoItens As New Collection
Dim colProduto1 As New Collection
Dim sRetorno As String
Dim lTamanho As Long
Dim sArquivoTemp As String
Dim sArquivoDir As String
Dim lTransacao As Long
Dim lTotalRegistros As Long
Dim lRegProcessados As Long
Dim objObject As Object
Dim sNomeArqParam As String
Dim objLojaConfig As New ClassLojaConfig

On Error GoTo Erro_GeracaoArqCC_Grava
       
    objLojaConfig.iFilialEmpresa = EMPRESA_TODA
    objLojaConfig.sCodigo = DIRETORIO_TELA_EXIBIRARQUIVOSCCBACK
    
    lErro = CF("LojaConfig_Le1", objLojaConfig)
    If lErro <> SUCESSO And lErro <> 126361 Then gError 133624
    
    'se nao encontrou o registro q armazena o ultimo diretorio acessado para esta tela
    If lErro = 126361 Then objLojaConfig.sConteudo = CurDir
    
    sRetorno = objLojaConfig.sConteudo
       
    'se o diretorio nao for terminado por \  ===> acrescentar
    If right(sRetorno, 1) <> "\" Then sRetorno = sRetorno & "\"
    
    sArquivoTemp = sRetorno & glEmpresa & "_" & giFilialEmpresa & "_" & NOME_ARQUIVOCC_TEMP
    
    'Cria o arquivo de remessa
    Open sArquivoTemp For Output As #1
    
    Print #1, CStr(VERSAO_ECF)

    BarraProgresso.Value = 0
    
    'Abre a Transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 105932
    
    lErro = CF("GravacaoCaixaCC_TotalRegistros", lTotalRegistros)
    If lErro <> SUCESSO Then gError 105674
    
    lErro = CF("Gera_ArquivoCC_Vendedores", lTotalRegistros, lRegProcessados, BarraProgresso)
    If lErro <> SUCESSO Then gError 105675
    
    lErro = CF("Gera_ArquivoCC_MeiosPagamentos", lTotalRegistros, lRegProcessados, BarraProgresso)
    If lErro <> SUCESSO Then gError 105676
    
    lErro = CF("Gera_ArquivoCC_Redes", lTotalRegistros, lRegProcessados, BarraProgresso)
    If lErro <> SUCESSO Then gError 105677
    
    lErro = CF("Gera_ArquivoCC_Operadores", lTotalRegistros, lRegProcessados, BarraProgresso)
    If lErro <> SUCESSO Then gError 105678
    
    lErro = CF("Gera_ArquivoCC_ConfiguracaoLoja")
    If lErro <> SUCESSO Then gError 105679
    
    lErro = CF("Gera_ArquivoCC_Caixas", lTotalRegistros, lRegProcessados, BarraProgresso)
    If lErro <> SUCESSO Then gError 105680
    
    lErro = CF("Gera_ArquivoCC_ECF", lTotalRegistros, lRegProcessados, BarraProgresso)
    If lErro <> SUCESSO Then gError 105681
    
    lErro = CF("Gera_ArquivoCC_Teclados")
    If lErro <> SUCESSO Then gError 105682
    
    lErro = CF("Gera_ArquivoCC_TiposMeiosPagtos")
    If lErro <> SUCESSO Then gError 105683
    
    lErro = CF("Gera_ArquivoCC_Cliente", lTotalRegistros, lRegProcessados, BarraProgresso)
    If lErro <> SUCESSO Then gError 105684
    
    lErro = CF("Gera_ArquivoCC_ProdutoDesconto", lTotalRegistros, lRegProcessados, BarraProgresso)
    If lErro <> SUCESSO Then gError 105685
    
    'Busca os preços dos produtos nas tabelas de preço
    lErro = CF("Gera_Arquivo_TabelaPrecoItens", lTotalRegistros, lRegProcessados, BarraProgresso)
    If lErro <> SUCESSO Then gError 126487
    
    'Busca os dados dos produtos
    lErro = CF("Gera_Arquivo_Produtos", lTotalRegistros, lRegProcessados, BarraProgresso, bRecalculaTribProd)
    If lErro <> SUCESSO Then gError 126486
    
    'confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 105933
    
    Close #1
    
    sArquivo = sRetorno & glEmpresa & "_" & giFilialEmpresa & "_" & NOME_ARQUIVOCC
    
    'verifica se o arquivo NOME_ARQUIVOCC existe
    sArquivoDir = Dir(sArquivo)
    
    'se o arquivo existir ==> remove o arquivo NOME_ARQUIVOCC
    If Len(sArquivoDir) > 0 Then Kill (sArquivo)
    
    'renomeando os arquivos
    Name sArquivoTemp As sArquivo
    
'    If gobjLoja.lIntervaloTrans > 0 Then
    If Len(Trim(gobjLoja.sFTPURL)) > 0 Then
    
        objMsgs.AddItem GRAVACAO_CONCLUIDA
    
        'Prepara para chamar rotina batch
        lErro = Sistema_Preparar_Batch(sNomeArqParam)
        If lErro <> SUCESSO Then gError 133570
            
        gobjLoja.sNomeArqParam = sNomeArqParam
            
        Set objObject = gobjLoja
            
        objMsgs.AddItem TRANSMISSAO_INICIADA
            
        lErro = CF("Rotina_FTP_Recepcao_CC", objObject, 1)
        If lErro <> SUCESSO And lErro <> 133628 Then gError 133571
    
        If lErro <> SUCESSO Then gError 133630
    
        objMsgs.AddItem TRANSMISSAO_CONCLUIDA
    
        Call Rotina_Aviso(vbOKOnly, "AVISO_TRANSMISSAO_CONCLUIDA")
    
    Else
    
        'avisa que a gravacao foi  concluida
        Call Rotina_Aviso(vbOKOnly, "AVISO_GRAVACAO_CONCLUIDA_COM_SUCESSO")
    
    End If
    
    BarraProgresso.Value = 0
    
    GeracaoArqCC_Grava = SUCESSO

    Exit Function
    
Erro_GeracaoArqCC_Grava:
    
    GeracaoArqCC_Grava = gErr
    
    Close #1
   
    BarraProgresso.Value = 0
   
    Select Case gErr

        Case 53, 76
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCAL_ARQUIVO_INVALIDO", gErr, sArquivo)
            
        Case 105674 To 105685, 133570, 133624

        Case 105932
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 105933
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case 126486, 126487
            
        Case 127098
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCAL_ARQUIVO_NAO_CONFIGURADO", gErr, glEmpresa & "_" & giFilialEmpresa & "_" & NOME_ARQUIVOCC)
        
        Case 133571
            Call Rotina_Erro(vbOKOnly, "ERRO_NA_TRANSMISSAO_FTP", gErr, glEmpresa & "_" & giFilialEmpresa & "_" & NOME_ARQUIVOCC)
        
        Case 133629
            Call Rotina_Erro(vbOKOnly, "AVISO_NAO_CARREGOU_ROTINA_RECEPCAO", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151375)

        End Select
        
    Call Transacao_Rollback
        
    Exit Function
    
End Function

Function GravacaoCaixaCC_TotalRegistros(lTotal As Long) As Long
'descobre o total da barra de progresso

Dim alComando(1 To 10) As Long
Dim iIndice As Integer
Dim lErro As Long
Dim lNumRegistros As Long
Dim sSelect As String

On Error GoTo Erro_GravacaoCaixaCC_TotalRegistros
        
    'Inicializa os array de lComandos
    For iIndice = LBound(alComando) To UBound(alComando)
         alComando(iIndice) = Comando_Abrir()
         If alComando(iIndice) = 0 Then gError 105657
    Next
    
    'Pega os dados do Vendedor
    lErro = Comando_Executar(alComando(1), "SELECT Count(*) FROM Vendedores,VendedorLoja WHERE vendedores.Codigo=VendedorLoja.Vendedor AND FilialEmpresa=? AND Ativo=?", lNumRegistros, giFilialEmpresa, VENDEDOR_ATIVO)
    If lErro <> AD_SQL_SUCESSO Then gError 105658

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 105659
    
    lTotal = lTotal + lNumRegistros
    
    'Pega os dados do AdmMeioPagto
    lErro = Comando_Executar(alComando(2), "SELECT Count(*) FROM AdmMeioPagto WHERE FilialEmpresa = ? ", lNumRegistros, giFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 105660

    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 105661
    
    lTotal = lTotal + lNumRegistros
    
    'Pega os dados do Redes
    lErro = Comando_Executar(alComando(3), "SELECT Count(*) FROM Redes WHERE FilialEmpresa=? AND Ativo = ?", lNumRegistros, giFilialEmpresa, REDE_ATIVO)
    If lErro <> AD_SQL_SUCESSO Then gError 105662

    lErro = Comando_BuscarPrimeiro(alComando(3))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 105663
        
    lTotal = lTotal + lNumRegistros
    
    'Busca os dados dos operadores
    lErro = Comando_Executar(alComando(4), "SELECT Count(*) FROM Operador WHERE FilialEmpresa=? AND Ativo=?", lNumRegistros, giFilialEmpresa, OPERADOR_ATIVO)
    If lErro <> AD_SQL_SUCESSO Then gError 105664

    lErro = Comando_BuscarPrimeiro(alComando(4))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 105665
               
    lTotal = lTotal + lNumRegistros
    
    'Busca os dados da caixa
    lErro = Comando_Executar(alComando(5), "SELECT Count(*) FROM Caixa WHERE FilialEmpresa=? AND Ativo =? ", lNumRegistros, giFilialEmpresa, CAIXA_ATIVO)
    If lErro <> AD_SQL_SUCESSO Then gError 105666

    lErro = Comando_BuscarPrimeiro(alComando(5))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 105667
               
    lTotal = lTotal + lNumRegistros
    
    'Busca os dados do ECF
    lErro = Comando_Executar(alComando(6), "SELECT Count(*) FROM ECF WHERE FilialEmpresa=? AND Ativo = ? ", lNumRegistros, giFilialEmpresa, ECF_ATIVO)
    If lErro <> AD_SQL_SUCESSO Then gError 105668

    lErro = Comando_BuscarPrimeiro(alComando(6))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 105669
                   
    lTotal = lTotal + lNumRegistros
        
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
        'Pega os dados do Vendedor
        lErro = Comando_Executar(alComando(7), "SELECT Count(*) FROM Clientes, FiliaisClientes WHERE Clientes.CodigoLoja=FiliaisClientes.CodClienteLoja  AND CGC<>? AND Clientes.Ativo =? AND FiliaisClientes.Ativo=? ", lNumRegistros, "", CLIENTE_ATIVO, CLIENTE_ATIVO)
    Else
        'Pega os dados do Vendedor
        lErro = Comando_Executar(alComando(7), "SELECT Count(*) FROM Clientes, FiliaisClientes WHERE Clientes.Codigo=FiliaisClientes.CodCliente  AND CGC<>? AND Clientes.Ativo =? AND FiliaisClientes.Ativo=?", lNumRegistros, "", CLIENTE_ATIVO, CLIENTE_ATIVO)
    End If
    If lErro <> AD_SQL_SUCESSO Then gError 105670

    lErro = Comando_BuscarPrimeiro(alComando(7))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 105671
        
    lTotal = lTotal + lNumRegistros
            
    'Busca os dados da tabela de produtos , produtos filial
    lErro = Comando_Executar(alComando(8), "SELECT Count(*) FROM Produtos, ProdutosFilial WHERE  ProdutosFilial.FilialEmpresa=? AND Produtos.Codigo = ProdutosFilial.Produto AND (descontoItem <> 0 Or DescontoValor <>0) AND Ativo=? ", lNumRegistros, giFilialEmpresa, PRODUTO_ATIVO)
    If lErro <> AD_SQL_SUCESSO Then gError 105672

    lErro = Comando_BuscarPrimeiro(alComando(8))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 105673
            
    lTotal = lTotal + lNumRegistros
            
    sSelect = "SELECT Count(*) FROM TabelasDePreco, TabelasdePrecoItens a WHERE Codigo = CodTabela AND TabelasdePreco.Ativo = ? AND a.Ativo = ? AND a.CodProduto IN (SELECT Codigo FROM Produtos, ProdutosFilial WHERE (Produtos.Codigo IN (SELECT CodProduto FROM ProdutoCodBarras) OR Referencia <> '') )  AND (EXISTS (SELECT CodTabela AS DataV FROM TabelasDePrecoItens WHERE DataVigencia <= ?  AND FilialEmpresa = ? GROUP BY CodTabela, CodProduto  HAVING  a.CodTabela=CodTabela AND a.CodProduto=CodProduto AND a.DataVigencia=MAX(DataVigencia) AND MAX(DataVigencia) <= ?)) AND FilialEmpresa =?"
    
    'Pega o total de registros da TabeladePrecoItens que serao processados
    lErro = Comando_Executar(alComando(9), sSelect, lNumRegistros, 1, Ativo, gdtDataAtual, giFilialEmpresa, gdtDataAtual, giFilialEmpresa)
    If lErro <> AD_SQL_SUCESSO Then gError 126482
    
    lErro = Comando_BuscarPrimeiro(alComando(9))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126483
        
    lTotal = lTotal + lNumRegistros
        
    'Pega o total de registros da tabela produtos , produtos filial e Códigos de barras que serao processados
    lErro = Comando_Executar(alComando(10), "SELECT Count(*) FROM Produtos, ProdutosFilial WHERE ( Produtos.Codigo IN (SELECT CodProduto FROM ProdutoCodBarras) OR Referencia <> '' ) AND ProdutosFilial.FilialEmpresa = ? AND Produtos.Codigo = ProdutosFilial.Produto AND Produtos.Ativo = ?", lNumRegistros, giFilialEmpresa, PRODUTO_ATIVO)
    If lErro <> AD_SQL_SUCESSO Then gError 126484

    lErro = Comando_BuscarPrimeiro(alComando(10))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 126485
        
    lTotal = lTotal + lNumRegistros
            
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    GravacaoCaixaCC_TotalRegistros = SUCESSO
    
    Exit Function

Erro_GravacaoCaixaCC_TotalRegistros:

    GravacaoCaixaCC_TotalRegistros = gErr
    
    Select Case gErr
                
        Case 105657
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 105658, 105659
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_VENDEDOR", gErr)
            
        Case 105660, 105661
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ADMMEIOPAGTO1", gErr)
            
        Case 105662, 105663
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_REDE1", gErr)
            
        Case 105664, 105665
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_OPERADOR", gErr)
            
        Case 105666, 105667
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CAIXAS1", gErr)
            
        Case 105668, 105669
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ECF", gErr)
            
        Case 105670, 105671
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CLIENTES", gErr)
            
        Case 105672, 105673, 126484, 126485
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOS1", gErr)
            
        Case 126482, 126483
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TABELA_PRECO", gErr)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151376)
            
    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Gera_ArquivoCC_Vendedores(ByVal lTotalRegistros As Long, lRegProcessados As Long, BarraProgresso As Object) As Long

Dim lErro As Long
Dim sNome As String
Dim iCodigo As Integer
Dim iCodigo1 As Integer
Dim sArquivo As String
Dim dtDataLog As Date
Dim alComando(1 To 3) As Long
Dim iIndice As Integer

On Error GoTo Erro_Gera_ArquivoCC_Vendedores
        
    'Abre os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 99581
    Next
    
    sNome = String(STRING_VENDEDOR_NOME, 0)
    
    'Pega os dados do Vendedor
    lErro = Comando_Executar(alComando(1), "SELECT Vendedor,NomeReduzido, DataLog FROM Vendedores,VendedorLoja WHERE vendedores.Codigo=VendedorLoja.Vendedor AND FilialEmpresa=? AND Ativo=? Order BY Vendedor", iCodigo, sNome, dtDataLog, giFilialEmpresa, VENDEDOR_ATIVO)
    If lErro <> AD_SQL_SUCESSO Then gError 99582

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 99583
        
    Do While lErro = AD_SQL_SUCESSO
    
        'Inclui cada registro no arquivo .txt
        sArquivo = TIPOREGISTROECF_VENDEDORES & Chr(vbKeyControl) & iCodigo & Chr(vbKeyEscape) & sNome & Chr(vbKeyEscape) & Chr(vbKeyEnd)
            
        Print #1, sArquivo
        
        lRegProcessados = lRegProcessados + 1
        BarraProgresso.Value = CInt((lRegProcessados / lTotalRegistros) * 100)
        
        If dtDataLog = DATA_NULA Then
        
            lErro = Comando_ExecutarPos(alComando(2), "SELECT Codigo FROM Vendedores WHERE Codigo=?", 0, iCodigo1, iCodigo)
            If lErro <> AD_SQL_SUCESSO Then gError 126468
        
            lErro = Comando_BuscarPrimeiro(alComando(2))
            If lErro <> AD_SQL_SUCESSO Then gError 126469
        
            lErro = Comando_ExecutarPos(alComando(3), "UPDATE Vendedores SET DataLog = ?", alComando(2), gdtDataAtual)
            If lErro <> AD_SQL_SUCESSO Then gError 126470
        
        End If
        
        
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 99584
                  
    Loop
        
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
        
    Gera_ArquivoCC_Vendedores = SUCESSO
    
    Exit Function

Erro_Gera_ArquivoCC_Vendedores:

    Gera_ArquivoCC_Vendedores = gErr
    
    Select Case gErr
                
        Case 99581
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 99582, 99583, 99584, 126468, 126469
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_VENDEDOR", gErr, iCodigo)
            
        Case 126470
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_VENDEDOR", gErr, iCodigo)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151377)
            
    End Select
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function Gera_ArquivoCC_MeiosPagamentos(ByVal lTotalRegistros As Long, lRegProcessados As Long, BarraProgresso As Object) As Long

Dim lErro As Long
Dim alComando(1 To 5) As Long
Dim sNome As String
Dim iCodigo As Integer
Dim iIndice As Integer
Dim sParc As String
Dim sPagto As String
Dim sArquivo As String
Dim tAdmMeioPagto As typeAdmMeioPagto
Dim tAdmMeioPagtoCondPagto As typeAdmMeioPagtoCondPagto
Dim tAdmMeioPagtoParc As typeAdmMeioPagtoParcelas

On Error GoTo Erro_Gera_ArquivoCC_MeiosPagamentos
        
    'Abre os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 99628
    Next
    
    With tAdmMeioPagto
    
        .sNome = String(STRING_ADMMEIOPAGTO_NOME, 0)
        
        'Pega os dados do AdmMeioPagto
        lErro = Comando_ExecutarPos(alComando(1), "SELECT Codigo, Nome, Rede, TipoMeioPagto, DataLog, Ativo FROM AdmMeioPagto WHERE FilialEmpresa = ? AND Codigo <> 0 Order BY Codigo", 0, .iCodigo, .sNome, .iRede, .iTipoMeioPagto, .dtDataLog, .iAtivo, giFilialEmpresa)
        If lErro <> AD_SQL_SUCESSO Then gError 99629
    
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 99630
    
    End With
    
    Do While lErro = AD_SQL_SUCESSO
            
        With tAdmMeioPagtoCondPagto
        
            .sNomeParcelamento = String(STRING_ADMMEIOPAGTOCONDPAGTO_NOME, 0)
            
            'Pega os dados do AdmMeioPagtoCondPagto
            lErro = Comando_ExecutarPos(alComando(2), "SELECT Parcelamento, NomeParcelamento, NumParcelas, ParcelasRecebto, ValorMinimo, Desconto, JurosParcelamento, Juros, DataLog, Ativo, PreDatado FROM AdmMeioPagtoCondPagto WHERE AdmMeioPagto = ? AND FilialEmpresa=? Order BY Parcelamento", 0, .iParcelamento, .sNomeParcelamento, .iNumParcelas, .iParcelasRecebto, .dValorMinimo, .dDesconto, .iJurosParcelamento, .dJuros, .dtDataLog, .iAtivo, .iPreDatado, tAdmMeioPagto.iCodigo, giFilialEmpresa)
            If lErro <> AD_SQL_SUCESSO Then gError 99691
        
            lErro = Comando_BuscarPrimeiro(alComando(2))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 99692
            
        End With
        
        sPagto = ""
        
        'Enquanto achar CondPagto --> Incluir
        Do While lErro = AD_SQL_SUCESSO
        
            With tAdmMeioPagtoParc
        
                'Pega os dados do AdmMeioPagtoParcelas
                lErro = Comando_Executar(alComando(3), "SELECT Parcela, PercRecebimento, IntervaloRecebto FROM AdmMeioPagtoParcelas WHERE AdmMeioPagto = ? AND FilialEmpresa = ? AND Parcelamento = ? Order BY Parcela", .iParcela, .dPercRecebimento, .iIntervaloRecebto, tAdmMeioPagto.iCodigo, giFilialEmpresa, tAdmMeioPagtoCondPagto.iParcelamento)
                If lErro <> AD_SQL_SUCESSO Then gError 99693
            
                lErro = Comando_BuscarPrimeiro(alComando(3))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 99694
                
                sParc = ""
                
                'Enquanto achar parcelas --> inclui
                Do While lErro = AD_SQL_SUCESSO
                    
                    'Inclui cada registro no arquivo .txt
                    sParc = sParc & Chr(vbKeyShift) & .iParcela & Chr(vbKeyEscape) & .dPercRecebimento & Chr(vbKeyEscape) & .iIntervaloRecebto & Chr(vbKeyEscape)
                        
                    lErro = Comando_BuscarProximo(alComando(3))
                    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 99695
                    
                Loop
            
            End With
            
            With tAdmMeioPagtoCondPagto
            
                'Inclui cada registro no arquivo .txt
                sPagto = sPagto & Chr(vbKeyControl) & .iParcelamento & Chr(vbKeyEscape) & .sNomeParcelamento & Chr(vbKeyEscape) & .iNumParcelas & Chr(vbKeyEscape) & .iParcelasRecebto & Chr(vbKeyEscape) & .dValorMinimo & Chr(vbKeyEscape) & .dDesconto & Chr(vbKeyEscape) & .iJurosParcelamento & Chr(vbKeyEscape) & .dJuros & Chr(vbKeyEscape) & .iAtivo & Chr(vbKeyEscape) & .iPreDatado & Chr(vbKeyEscape) & sParc
            
            End With
            
            If tAdmMeioPagtoCondPagto.dtDataLog = DATA_NULA Then
            
                lErro = Comando_ExecutarPos(alComando(5), "UPDATE AdmMeioPagtoCondPagto SET DataLog = ?", alComando(2), gdtDataAtual)
                If lErro <> AD_SQL_SUCESSO Then gError 105935
            
            End If
            
            lErro = Comando_BuscarProximo(alComando(2))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 99696
        Loop
        
        With tAdmMeioPagto
        
            'Inclui cada registro no arquivo .txt
            sArquivo = TIPOREGISTROECF_MEIOSPAGAMENTOS & Chr(vbKeyControl) & .iCodigo & Chr(vbKeyEscape) & .sNome & Chr(vbKeyEscape) & .iRede & Chr(vbKeyEscape) & .iTipoMeioPagto & Chr(vbKeyEscape) & .iAtivo & Chr(vbKeyEscape) & sPagto & Chr(vbKeyEnd)
            
            lRegProcessados = lRegProcessados + 1
            BarraProgresso.Value = CInt((lRegProcessados / lTotalRegistros) * 100)
            
            Print #1, sArquivo
        
        End With
        
        If tAdmMeioPagto.dtDataLog = DATA_NULA Then
        
            lErro = Comando_ExecutarPos(alComando(4), "UPDATE AdmMeioPagto SET DataLog = ?", alComando(1), gdtDataAtual)
            If lErro <> AD_SQL_SUCESSO Then gError 105934
        
        End If
        
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 99697
        
    Loop
        
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Gera_ArquivoCC_MeiosPagamentos = SUCESSO
    
    Exit Function

Erro_Gera_ArquivoCC_MeiosPagamentos:

    Gera_ArquivoCC_MeiosPagamentos = gErr
    
    Select Case gErr
                
        Case 99628
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 99629, 99630, 99631, 99691 To 99697
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ADMMEIOPAGTO1", gErr)
            
        Case 105934
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_ADMMEIOPAGTO", gErr, tAdmMeioPagto.sNome)
            
        Case 105935
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_ADMMEIOPAGTOCONDPAGTO", gErr, tAdmMeioPagtoCondPagto.sNomeParcelamento, tAdmMeioPagto.sNome)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151378)
            
    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Function Gera_ArquivoCC_Redes(ByVal lTotalRegistros As Long, lRegProcessados As Long, BarraProgresso As Object) As Long

Dim lErro As Long
Dim alComando(1 To 2) As Long
Dim tRede As typeRede
Dim sArquivo As String
Dim iIndice As Integer, sCgc As String

On Error GoTo Erro_Gera_ArquivoCC_Redes
        
    'Abre os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 99698
    Next
    
    With tRede
    
        .sNome = String(STRING_REDE_NOME, 0)
        sCgc = String(STRING_CGC, 0)
        
        'Pega os dados do Redes
        lErro = Comando_Executar(alComando(1), "SELECT R.Codigo , R.Nome, R.DataLog, F.CGC FROM Redes R, FiliaisClientes F WHERE R.FilialEmpresa=? And R.Ativo = ? AND R.FilialCli = F.CodFilial AND R.Cliente = F.CodCliente Order BY Codigo", .iCodigo, .sNome, .dtDataLog, sCgc, giFilialEmpresa, REDE_ATIVO)
        If lErro <> AD_SQL_SUCESSO Then gError 99699
    
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 99700
            
        Do While lErro = AD_SQL_SUCESSO
        
            'Inclui cada registro no arquivo .txt
            sArquivo = TIPOREGISTROECF_REDES & Chr(vbKeyControl) & .iCodigo & Chr(vbKeyEscape) & .sNome & Chr(vbKeyEscape) & sCgc & Chr(vbKeyEnd)
                
            Print #1, sArquivo
            
            lRegProcessados = lRegProcessados + 1
            BarraProgresso.Value = CInt((lRegProcessados / lTotalRegistros) * 100)
            
            If .dtDataLog = DATA_NULA Then
            
                lErro = Comando_Executar(alComando(2), "UPDATE Redes SET DataLog = ? WHERE Codigo = ?", gdtDataAtual, .iCodigo)
                If lErro <> AD_SQL_SUCESSO Then gError 126445
            
            End If
            
            lErro = Comando_BuscarProximo(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 99701
                      
        Loop
        
    End With
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Gera_ArquivoCC_Redes = SUCESSO
    
    Exit Function

Erro_Gera_ArquivoCC_Redes:

    Gera_ArquivoCC_Redes = gErr
    
    Select Case gErr
                
        Case 99698
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 99699, 99700, 99701
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_REDE1", gErr, iCodigo)
            
        Case 126445
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_REDE", gErr, iCodigo)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151379)
            
    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Function Gera_ArquivoCC_Operadores(ByVal lTotalRegistros As Long, lRegProcessados As Long, BarraProgresso As Object) As Long

Dim lErro As Long
Dim tOperador As typeOperador
Dim sArquivo As String
Dim alComando(1 To 2) As Long
Dim iIndice As Integer

On Error GoTo Erro_Gera_ArquivoCC_Operadores
        
    'Abre os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 99585
    Next
    
    With tOperador
    
        .sNome = String(STRING_OPERADOR_NOME, 0)
        .sSenha = String(STRING_OPERADOR_SENHA, 0)
        
        'Busca os dados dos operadores
        lErro = Comando_ExecutarPos(alComando(1), "SELECT Codigo, Nome, Senha, Desconto, LimiteDesconto, CodVendedor, Gerente, Datalog FROM Operador WHERE FilialEmpresa=? AND Ativo=? Order BY Codigo", 0, .iCodigo, .sNome, .sSenha, .iDesconto, .iLimiteDesconto, .iCodigoVendedor, .iGerente, .dtDataLog, giFilialEmpresa, VENDEDOR_ATIVO)
        If lErro <> AD_SQL_SUCESSO Then gError 99586
    
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 99587
                   
        Do While lErro = AD_SQL_SUCESSO
        
            'Inclui cada registro no arquivo .txt
            sArquivo = TIPOREGISTROECF_OPERADORES & Chr(vbKeyControl) & .iCodigo & Chr(vbKeyEscape) & .sNome & Chr(vbKeyEscape) & .sSenha & Chr(vbKeyEscape) & .iDesconto & Chr(vbKeyEscape) & .iLimiteDesconto & Chr(vbKeyEscape) & .iCodigoVendedor & Chr(vbKeyEscape) & .iGerente & Chr(vbKeyEnd)
                
            Print #1, sArquivo
            
            lRegProcessados = lRegProcessados + 1
            BarraProgresso.Value = CInt((lRegProcessados / lTotalRegistros) * 100)
            
            If .dtDataLog = DATA_NULA Then
            
                lErro = Comando_ExecutarPos(alComando(2), "UPDATE Operador SET DataLog = ?", alComando(1), gdtDataAtual)
                If lErro <> AD_SQL_SUCESSO Then gError 126452
            
            End If
            
            lErro = Comando_BuscarProximo(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 99588
                      
        Loop
    
    End With
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Gera_ArquivoCC_Operadores = SUCESSO
    
    Exit Function

Erro_Gera_ArquivoCC_Operadores:

    Gera_ArquivoCC_Operadores = gErr
    
    Select Case gErr
                
        Case 99585
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 99586, 99587, 99588
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_OPERADOR", gErr, tOperador.iCodigo)
            
        Case 126452
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_OPERADOR", gErr, tOperador.iCodigo)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151380)
            
    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Function Gera_ArquivoCC_Caixas(ByVal lTotalRegistros As Long, lRegProcessados As Long, BarraProgresso As Object) As Long

Dim lErro As Long
Dim tCaixa As typeCaixa
Dim sArquivo As String
Dim alComando(1 To 2) As Long
Dim iIndice As Integer

On Error GoTo Erro_Gera_ArquivoCC_Caixas
        
    'Abre os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 99702
    Next
    
    With tCaixa
    
        .sNomeReduzido = String(STRING_CAIXA_NOME_REDUZIDO, 0)
              
        'Busca os dados da caixa
        lErro = Comando_ExecutarPos(alComando(1), "SELECT Codigo, NomeReduzido, POS, TEF, BoletoManual, Teclado, SoOrcamento, DataLog FROM Caixa WHERE FilialEmpresa=? AND Ativo =? ", 0, .iCodigo, .sNomeReduzido, .iPos, .iTEF, .iBoletoManual, .iTeclado, .iOrcamentoECF, .dtDataLog, giFilialEmpresa, CAIXA_ATIVO)
        If lErro <> AD_SQL_SUCESSO Then gError 99703
    
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 99704
                   
        Do While lErro = AD_SQL_SUCESSO
        
            'Inclui cada registro no arquivo .txt
            sArquivo = TIPOREGISTROECF_CAIXAS & Chr(vbKeyControl) & .iCodigo & Chr(vbKeyEscape) & .sNomeReduzido & Chr(vbKeyEscape) & .iPos & Chr(vbKeyEscape) & .iTEF & Chr(vbKeyEscape) & .iBoletoManual & Chr(vbKeyEscape) & .iTeclado & Chr(vbKeyEscape) & .iOrcamentoECF & Chr(vbKeyEnd)
                
            Print #1, sArquivo
            
            lRegProcessados = lRegProcessados + 1
            BarraProgresso.Value = CInt((lRegProcessados / lTotalRegistros) * 100)
            
            If .dtDataLog = DATA_NULA Then
            
                lErro = Comando_ExecutarPos(alComando(2), "UPDATE Caixa SET DataLog = ?", alComando(1), gdtDataAtual)
                If lErro <> AD_SQL_SUCESSO Then gError 126453
            
            End If
            
            lErro = Comando_BuscarProximo(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 99705
                      
        Loop
    
    End With
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Gera_ArquivoCC_Caixas = SUCESSO
    
    Exit Function

Erro_Gera_ArquivoCC_Caixas:

    Gera_ArquivoCC_Caixas = gErr
    
    Select Case gErr
                
        Case 99702
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 99703, 99704, 99705
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CAIXAS1", gErr)
            
        Case 126453
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_CAIXA", gErr, tCaixa.iCodigo, tCaixa.sNomeReduzido)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151381)
            
    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Function Gera_ArquivoCC_ECF(ByVal lTotalRegistros As Long, lRegProcessados As Long, BarraProgresso As Object) As Long

Dim lErro As Long
Dim tECF As typeECF
Dim sArquivo As String
Dim alComando(1 To 3) As Long
Dim iIndice As Integer
Dim iCodModeloECF As Integer

On Error GoTo Erro_Gera_ArquivoCC_ECF
        
    'Abre os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 99706
    Next
        
    With tECF
        
        'Busca os dados do ECF
        lErro = Comando_ExecutarPos(alComando(1), "SELECT Caixa, Codigo, ImpressoraECF, ImpressoraCheque, DataLog FROM ECF WHERE FilialEmpresa=? AND Ativo = ? Order BY Codigo", 0, .iCaixa, .iCodigo, .iImpressoraECF, .iImpressoraCheque, .dtDataLog, giFilialEmpresa, ECF_ATIVO)
        If lErro <> AD_SQL_SUCESSO Then gError 99707
    
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 99708
                   
        Do While lErro = AD_SQL_SUCESSO
        
            'Busca os dados do ECF
            lErro = Comando_Executar(alComando(3), "SELECT CodModelo FROM ImpressoraECF WHERE FilialEmpresa=? AND Codigo = ? ", iCodModeloECF, giFilialEmpresa, .iImpressoraECF)
            If lErro <> AD_SQL_SUCESSO Then gError 133000
        
            lErro = Comando_BuscarPrimeiro(alComando(3))
            If lErro <> AD_SQL_SUCESSO Then gError 133001
        
            'Inclui cada registro no arquivo .txt
            sArquivo = TIPOREGISTROECF_ECF & Chr(vbKeyControl) & .iCaixa & Chr(vbKeyEscape) & .iCodigo & Chr(vbKeyEscape) & .iImpressoraECF & Chr(vbKeyEscape) & .iImpressoraCheque & Chr(vbKeyEscape) & iCodModeloECF & Chr(vbKeyEscape) & Chr(vbKeyEnd)
                
            Print #1, sArquivo
            
            lRegProcessados = lRegProcessados + 1
            BarraProgresso.Value = CInt((lRegProcessados / lTotalRegistros) * 100)
            
            If .dtDataLog = DATA_NULA Then
            
                lErro = Comando_ExecutarPos(alComando(2), "UPDATE ECF SET DataLog = ?", alComando(1), gdtDataAtual)
                If lErro <> AD_SQL_SUCESSO Then gError 126454
            
            End If
            
            lErro = Comando_BuscarProximo(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 99709
                      
        Loop
        
    End With
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Gera_ArquivoCC_ECF = SUCESSO
    
    Exit Function

Erro_Gera_ArquivoCC_ECF:

    Gera_ArquivoCC_ECF = gErr
    
    Select Case gErr
                
        Case 99706
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 99707, 99708, 99709
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ECF", gErr)
            
        Case 126454
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_ECF", gErr, tECF.iCodigo)
            
        Case 133000, 133001
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_IMPRESSORAECF", gErr, giFilialEmpresa, tECF.iImpressoraECF)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151382)
            
    End Select
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Function Gera_ArquivoCC_Teclados() As Long

Dim lErro As Long
Dim alComando(1 To 5) As Long
Dim sItem As String
Dim iIndice As Integer
Dim sArquivo As String
Dim tTecladoProduto As typeTecladoProduto
Dim tTecladoProdutoItens As typeTecladoProdutoItens
Dim sReferencia As String
Dim sCodigoBarras As String
Dim sProduto As String

On Error GoTo Erro_Gera_ArquivoCC_Teclados
        
    'Abre os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 99710
    Next
    
    With tTecladoProduto
    
        .sDescricao = String(STRING_TECLADOPRODUTO_DESCRICAO, 0)
        
        'Pega os dados do Teclado Produto
        lErro = Comando_Executar(alComando(1), "SELECT Teclado, Descricao, Padrao, Codigo FROM TecladoProduto WHERE FilialEmpresa = ?  Order BY Codigo", .iTeclado, .sDescricao, .iPadrao, .iCodigo, giFilialEmpresa)
        If lErro <> AD_SQL_SUCESSO Then gError 99711
        
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 99712
        
    End With
    'Enquanto houver TecladoProduto
    Do While lErro = AD_SQL_SUCESSO
            
        With tTecladoProdutoItens
            
            sItem = ""
            .sProduto = ""
            sReferencia = ""
            sCodigoBarras = ""
            
            .sTitulo = String(STRING_TECLADOPRODUTOITENS_TITULO, 0)
            .sArvoreKey = String(STRING_TECLADOPRODUTOITENS_ARVOREKEY, 0)
            
            'Pega os dados do Teclado Produto Itens
            lErro = Comando_Executar(alComando(5), "SELECT Titulo, Cor, Tecla, Indice, ArvoreKey FROM TecladoProdutoItem " & _
            " WHERE Teclado = ? AND FilialEmpresa=? AND Len(Produto) = 0 ORDER BY ArvoreKey", _
            .sTitulo, .lCor, .iTecla, .iIndice, .sArvoreKey, tTecladoProduto.iCodigo, giFilialEmpresa)
            If lErro <> AD_SQL_SUCESSO Then gError 99713
        
            lErro = Comando_BuscarPrimeiro(alComando(5))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 99714
            
            'Enquanto achar Itens --> Incluir
            Do While lErro = AD_SQL_SUCESSO
                
                
                'Inclui cada registro no arquivo .txt
                sItem = sItem & Chr(vbKeyControl) & .sProduto & Chr(vbKeyEscape) & .sTitulo & Chr(vbKeyEscape) & .lCor & Chr(vbKeyEscape) & .iTecla & Chr(vbKeyEscape) & .iIndice & Chr(vbKeyEscape) & sReferencia & Chr(vbKeyEscape) & sCodigoBarras & Chr(vbKeyEscape) & .sArvoreKey
                
                lErro = Comando_BuscarProximo(alComando(5))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 99715
            Loop
            
            
            .sProduto = String(STRING_TECLADOPRODUTOITENS_PRODUTO, 0)
            .sTitulo = String(STRING_TECLADOPRODUTOITENS_TITULO, 0)
            sReferencia = String(STRING_PRODUTO_REFERENCIA, 0)
            .sArvoreKey = String(STRING_TECLADOPRODUTOITENS_ARVOREKEY, 0)
            
            'Pega os dados do Teclado Produto Itens e Ler Tabela de produto Campo referencia
            lErro = Comando_Executar(alComando(2), "SELECT MAX(Produto),MAX(Titulo), MAX(TecladoProdutoItem.Cor), MAX(Tecla), MAX(Indice), MAX(Referencia), MAX(ArvoreKey) FROM TecladoProdutoItem, Produtos, TabelasDePrecoItens, TabelasDePreco " & _
            " WHERE Teclado = ? AND TecladoProdutoItem.FilialEmpresa=? AND Produtos.Codigo=TecladoProdutoItem.Produto AND Produtos.Ativo = ? AND TabelasDePrecoItens.CodTabela = ? AND TabelasDePrecoItens.FilialEmpresa = TecladoProdutoItem.FilialEmpresa AND " & _
            " TabelasDePrecoItens.CodProduto = Produtos.Codigo AND TabelasDePrecoItens.DataVigencia <= ? AND TabelasDePreco.Codigo = TabelasDePrecoItens.CodTabela AND TabelasDePreco.Ativo = ? GROUP BY Produto ORDER BY Max(ArvoreKey)", _
            .sProduto, .sTitulo, .lCor, .iTecla, .iIndice, sReferencia, .sArvoreKey, tTecladoProduto.iCodigo, giFilialEmpresa, PRODUTO_ATIVO, gobjLoja.iTabelaPreco, gdtDataAtual, 1)
            If lErro <> AD_SQL_SUCESSO Then gError 99713
        
            lErro = Comando_BuscarPrimeiro(alComando(2))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 99714
            
            'Enquanto achar Itens --> Incluir
            Do While lErro = AD_SQL_SUCESSO
                
                    'se referencia nao estiver preenchida
                    If Len(Trim(sReferencia)) = 0 Then
                        
                        sCodigoBarras = String(STRING_PRODUTO_CODIGO_BARRAS, 0)
                        
                        'Ler um Código de barras p\ esse produto
                        lErro = Comando_Executar(alComando(3), "SELECT  CodBarras FROM ProdutoCodBarras WHERE CodProduto=? Order BY CodBarras", sCodigoBarras, tTecladoProdutoItens.sProduto)
                        If lErro <> AD_SQL_SUCESSO Then gError 99743
                    
                        lErro = Comando_BuscarPrimeiro(alComando(3))
                        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 99744
                        
                    End If
                    
                    'Inclui cada registro no arquivo .txt
                    sItem = sItem & Chr(vbKeyControl) & .sProduto & Chr(vbKeyEscape) & .sTitulo & Chr(vbKeyEscape) & .lCor & Chr(vbKeyEscape) & .iTecla & Chr(vbKeyEscape) & .iIndice & Chr(vbKeyEscape) & sReferencia & Chr(vbKeyEscape) & sCodigoBarras & Chr(vbKeyEscape) & .sArvoreKey
                
                'End If
                
                lErro = Comando_BuscarProximo(alComando(2))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 99715
            Loop
                        
        End With
        
        With tTecladoProduto
            
            'Inclui cada registro no arquivo .txt
            sArquivo = TIPOREGISTROECF_TECLADOS & Chr(vbKeyControl) & .iTeclado & Chr(vbKeyEscape) & .sDescricao & Chr(vbKeyEscape) & .iPadrao & Chr(vbKeyEscape) & .iCodigo & Chr(vbKeyEscape) & sItem & Chr(vbKeyEnd)
            
            Print #1, sArquivo
        
        End With
        
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 99716
        
    Loop
    
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
        
    Gera_ArquivoCC_Teclados = SUCESSO
    
    Exit Function

Erro_Gera_ArquivoCC_Teclados:

    Gera_ArquivoCC_Teclados = gErr
    
    Select Case gErr
                
        Case 99710
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 99711 To 99716
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TECLADOPRODUTO1", gErr)
            
        Case 99743, 99744
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOS1", gErr)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151383)
            
    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Function Gera_ArquivoCC_TiposMeiosPagtos() As Long

Dim lErro As Long
Dim lComando As Long
Dim iTipo As Integer
Dim sArquivo As String
Dim sDescricao As String
Dim iTransf As Integer
Dim iIndice As Integer
Dim iCodigoCFe As Integer

On Error GoTo Erro_Gera_ArquivoCC_TiposMeiosPagtos
        
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 99879
    
    sDescricao = String(STRING_TIPOMEIOPAGTOLOJA_DESCRICAO, 0)
    
    'Pega os dados do TipoMeioPagto
    lErro = Comando_Executar(lComando, "SELECT Tipo, Descricao, Transferencia, Indice, CodigoCFe FROM TipoMeioPagtoLoja Order BY Tipo", iTipo, sDescricao, iTransf, iIndice, iCodigoCFe)
    If lErro <> AD_SQL_SUCESSO Then gError 99880

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 99881
        
    Do While lErro = AD_SQL_SUCESSO
    
        'Inclui cada registro no arquivo .txt
        sArquivo = TIPOREGISTROECF_TIPOSMEIOSPAGAMENTOS & Chr(vbKeyControl) & iTipo & Chr(vbKeyEscape) & sDescricao & Chr(vbKeyEscape) & iTransf & Chr(vbKeyEscape) & iIndice & Chr(vbKeyEscape) & CStr(iCodigoCFe) & Chr(vbKeyEnd)
            
        Print #1, sArquivo
        
        lErro = Comando_BuscarProximo(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 99882
                  
    Loop
        
    Call Comando_Fechar(lComando)
    
    Gera_ArquivoCC_TiposMeiosPagtos = SUCESSO
    
    Exit Function

Erro_Gera_ArquivoCC_TiposMeiosPagtos:

    Gera_ArquivoCC_TiposMeiosPagtos = gErr
    
    Select Case gErr
                
        Case 99879
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 99880 To 99882
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TIPOMEIOPAGTOLOJA", gErr)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151384)
            
    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function Gera_ArquivoCC_Cliente(ByVal lTotalRegistros As Long, lRegProcessados As Long, BarraProgresso As Object) As Long

Dim lErro As Long
Dim sArquivo As String
Dim tCliente As typeCliente
Dim iTransferidoFilial As Integer
Dim alComando(1 To 5) As Long
Dim iIndice As Integer
Dim iCodFilial As Integer
Dim iCodFilial1 As Integer
Dim lCodigo As Long

On Error GoTo Erro_Gera_ArquivoCC_Cliente
        
    'Abre os  comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 109589
    Next
        
    With tCliente
    
    .sNomeReduzido = String(STRING_CLIENTE_NOME_REDUZIDO, 0)
    .sCgc = String(STRING_CLIENTE_CGC, 0)
    
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
        'Pega os dados do Cliente
        lErro = Comando_Executar(alComando(1), "SELECT CodigoLoja, NomeReduzido, CGC, Clientes.Transferido, FiliaisClientes.Transferido, CodFilialLoja FROM Clientes, FiliaisClientes WHERE Clientes.CodigoLoja=FiliaisClientes.CodClienteLoja  AND CGC<>? AND Clientes.Ativo =? AND FiliaisClientes.Ativo=? Order BY Codigo", .lCodigo, .sNomeReduzido, .sCgc, .iTransferido, iTransferidoFilial, iCodFilial, "", CLIENTE_ATIVO, CLIENTE_ATIVO)
    Else
        'Pega os dados do Cliente
        lErro = Comando_Executar(alComando(1), "SELECT Codigo, NomeReduzido, CGC, Clientes.Transferido, FiliaisClientes.Transferido, CodFilial  FROM Clientes, FiliaisClientes WHERE Clientes.Codigo=FiliaisClientes.CodCliente  AND CGC<>? AND Clientes.Ativo =? AND FiliaisClientes.Ativo=? Order BY Codigo", .lCodigo, .sNomeReduzido, .sCgc, .iTransferido, iTransferidoFilial, iCodFilial, "", CLIENTE_ATIVO, CLIENTE_ATIVO)
    End If
    If lErro <> AD_SQL_SUCESSO Then gError 109590

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109591
        
    End With
    
    Do While lErro = AD_SQL_SUCESSO
        
        With tCliente
            'Inclui cada registro no arquivo .txt
            sArquivo = TIPOREGISTROECF_CLIENTE & Chr(vbKeyControl) & .lCodigo & Chr(vbKeyEscape) & .sNomeReduzido & Chr(vbKeyEscape) & .sCgc & Chr(vbKeyEnd)
                
            Print #1, sArquivo
            
            lRegProcessados = lRegProcessados + 1
            BarraProgresso.Value = CInt((lRegProcessados / lTotalRegistros) * 100)
            
            If .iTransferido = NAO_TRANSFERIDO Then
            
                If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
                    'Pega os dados do Cliente
                    lErro = Comando_ExecutarPos(alComando(2), "SELECT CodigoLoja FROM Clientes WHERE CodigoLoja= ?", 0, lCodigo, .lCodigo)
                Else
                    'Pega os dados do Cliente
                    lErro = Comando_ExecutarPos(alComando(2), "SELECT Codigo  FROM Clientes WHERE Codigo=?", 0, lCodigo, .lCodigo)
                End If
                If lErro <> AD_SQL_SUCESSO Then gError 126455
                
                lErro = Comando_BuscarPrimeiro(alComando(2))
                If lErro <> AD_SQL_SUCESSO Then gError 126456
                
                lErro = Comando_ExecutarPos(alComando(3), "UPDATE Clientes SET Transferido = ?", alComando(2), TRANSFERIDO)
                If lErro <> AD_SQL_SUCESSO Then gError 126457
            
            End If
            
            If iTransferidoFilial = NAO_TRANSFERIDO Then
            
                If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
                    'Pega os dados do Cliente
                    lErro = Comando_ExecutarPos(alComando(4), "SELECT CodFilialLoja FROM FiliaisClientes WHERE CodClienteLoja= ? AND CodFilialLoja=?", 0, iCodFilial1, .lCodigo, iCodFilial)
                Else
                    'Pega os dados do Cliente
                    lErro = Comando_ExecutarPos(alComando(4), "SELECT CodFilial FROM FiliaisClientes WHERE CodCliente= ? AND CodFilial=?", 0, iCodFilial1, .lCodigo, iCodFilial)
                End If
                If lErro <> AD_SQL_SUCESSO Then gError 126458
                
                lErro = Comando_BuscarPrimeiro(alComando(4))
                If lErro <> AD_SQL_SUCESSO Then gError 126459
                
                lErro = Comando_ExecutarPos(alComando(5), "UPDATE FiliaisClientes SET Transferido = ?", alComando(4), TRANSFERIDO)
                If lErro <> AD_SQL_SUCESSO Then gError 126460
            
            End If
            
            lErro = Comando_BuscarProximo(alComando(1))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 109592
            
        End With
        
    Loop
        
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Gera_ArquivoCC_Cliente = SUCESSO
    
    Exit Function

Erro_Gera_ArquivoCC_Cliente:

    Gera_ArquivoCC_Cliente = gErr
    
    Select Case gErr
                
        Case 109589
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 109590, 109591, 109592
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CLIENTES", gErr)
            
        Case 126455, 126456
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_CLIENTES1", gErr, tCliente.lCodigo)
            
        Case 126457
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_CLIENTES", gErr, tCliente.lCodigo)
            
        Case 126458, 126459
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_FILIAISCLIENTES", gErr, tCliente.lCodigo, iCodFilial)
            
        Case 126460
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_FILIALCLIENTE1", gErr, tCliente.lCodigo, iCodFilial)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151385)
            
    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Function Gera_ArquivoCC_ProdutoDesconto(ByVal lTotalRegistros As Long, lRegProcessados As Long, BarraProgresso As Object) As Long

Dim lErro As Long
Dim lComando As Long
Dim lComando1 As Long
Dim tProduto As typeProduto
Dim objProduto As ClassProduto
Dim sArquivo As String
Dim dDesconto As Double
Dim dDescontoValor As Double

On Error GoTo Erro_Gera_ArquivoCC_ProdutoDesconto
    
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 99589
    
    lComando1 = Comando_Abrir()
    If lComando1 = 0 Then gError 99596
    
    With tProduto
        
        .sNomeReduzido = String(STRING_PRODUTO_NOME_REDUZIDO, 0)
        .sCodigo = String(STRING_PRODUTO, 0)
        
        'Busca os dados da tabela de produtos , produtos filial e tabeladeprecoitens
        lErro = Comando_Executar(lComando, "SELECT Codigo, NomeReduzido, DescontoItem, DescontoValor FROM Produtos, ProdutosFilial WHERE  ProdutosFilial.FilialEmpresa=? AND Produtos.Codigo = ProdutosFilial.Produto AND (descontoItem <>0 Or DescontoValor <> 0) And Ativo = ? Order BY Codigo", .sCodigo, .sNomeReduzido, dDesconto, dDescontoValor, giFilialEmpresa, PRODUTO_ATIVO)
        If lErro <> AD_SQL_SUCESSO Then gError 99590
    
        lErro = Comando_BuscarPrimeiro(lComando)
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 99591
            
        'Enquanto achar produtos com codigobarras
        Do While lErro = AD_SQL_SUCESSO
                
            'Inclui o registro no Arquivo .txt
            sArquivo = TIPOREGISTROECF_PRODUTODESCONTO & Chr(vbKeyControl) & .sCodigo & Chr(vbKeyEscape) & .sNomeReduzido & Chr(vbKeyEscape) & dDesconto & Chr(vbKeyEscape) & dDescontoValor & Chr(vbKeyEscape) & Chr(vbKeyEnd)
        
            Print #1, sArquivo
            
            lRegProcessados = lRegProcessados + 1
            BarraProgresso.Value = CInt((lRegProcessados / lTotalRegistros) * 100)
            
            lErro = Comando_BuscarProximo(lComando)
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 99592
        
        Loop
    
    End With
    
    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    
    Gera_ArquivoCC_ProdutoDesconto = SUCESSO
    
    Exit Function

Erro_Gera_ArquivoCC_ProdutoDesconto:

    Gera_ArquivoCC_ProdutoDesconto = gErr
    
    Select Case gErr
                
        Case 99589, 99596
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 99590 To 99595
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_PRODUTOS1", gErr)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151386)
            
    End Select

    Call Comando_Fechar(lComando)
    Call Comando_Fechar(lComando1)
    
    Exit Function

End Function

Function Gera_ArquivoCC_ConfiguracaoLoja() As Long

Dim lErro As Long
Dim objAliquotaICMS As ClassAliquotaICMS
Dim sAliquota As String
Dim sArquivo As String

On Error GoTo Erro_Gera_ArquivoCC_ConfiguracaoLoja
               
    For Each objAliquotaICMS In gobjLoja.colAliquotaICMS
        
        sAliquota = sAliquota & Chr(vbKeyControl) & objAliquotaICMS.dAliquota & Chr(vbKeyEscape) & objAliquotaICMS.iISS & Chr(vbKeyEscape) & objAliquotaICMS.sSigla
        
    Next
    
    With gobjLoja
    
        'Inclui cada registro no arquivo .txt
        sArquivo = TIPOREGISTROECF_CONFIGURACAOLOJA & Chr(vbKeyControl) & gdtDataAtual & Chr(vbKeyEscape) & .iAtualizacaoECF & Chr(vbKeyEscape) & .iCupomDescreveFormaPagto & Chr(vbKeyEscape) & _
        .iGerenteAutoriza & Chr(vbKeyEscape) & .iHorarioVerao & Chr(vbKeyEscape) & .iImprimeItemAItem & Chr(vbKeyEscape) & _
        .iLinhasEntreCupons & Chr(vbKeyEscape) & .iOperadorIgualVendedor & Chr(vbKeyEscape) & .iTabelaPreco & Chr(vbKeyEscape) & _
        .iTelaVendaMP & Chr(vbKeyEscape) & .lEspacoEntreLinhas & Chr(vbKeyEscape) & .sMensagemCupom & Chr(vbKeyEscape) & .sNatOpPadrao & Chr(vbKeyEscape) & _
        .sNumLimRO & Chr(vbKeyEscape) & .sSimboloMoeda & Chr(vbKeyEscape) & .sTruncamentoArredondamento & Chr(vbKeyEscape) & _
        .iAbreAposFechamento & Chr(vbKeyEscape) & .iVendedorObrigatorio & Chr(vbKeyEscape) & .sFTPURL & Chr(vbKeyEscape) & _
        .sFTPUserName & Chr(vbKeyEscape) & .sFTPPassword & Chr(vbKeyEscape) & .sFTPDiretorio & Chr(vbKeyEscape) & .lIntervaloTrans & Chr(vbKeyEscape) & Chr(vbKeyControl) & sAliquota & Chr(vbKeyEnd)
        
        Print #1, sArquivo
    
    End With
    
    Gera_ArquivoCC_ConfiguracaoLoja = SUCESSO
    
    Exit Function

Erro_Gera_ArquivoCC_ConfiguracaoLoja:

    Gera_ArquivoCC_ConfiguracaoLoja = gErr
    
    Select Case gErr
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151387)
            
    End Select

    Exit Function

End Function

Function ConfiguraLoja_Gravar(objLojaConfig As ClassLoja) As Long
'Rotina que abre a transação para chamda a função que irá _
 Gravar os dados

Dim lErro As Long
Dim lTransacao As Long
Dim colLojaConfig As New colLojaConfig

On Error GoTo Erro_ConfiguraLoja_Gravar

    'Inicia a Transacao
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 80060
    
    'Chamada a função que passa os dados para o coleção
    lErro = CF("ConfiguraLoja_MoverCampos_ColLojaConfig", objLojaConfig, colLojaConfig)
    If lErro <> SUCESSO Then gError 80076

    'Chamada a função responsável pela gravação dos dados
    lErro = CF("ConfiguraLoja_GravarTrans", objLojaConfig, colLojaConfig)
    If lErro <> SUCESSO Then gError 80061

    'Confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 80062

    ConfiguraLoja_Gravar = SUCESSO

    Exit Function

Erro_ConfiguraLoja_Gravar:

    ConfiguraLoja_Gravar = gErr

    Select Case gErr

        Case 80060
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 80061

        Case 80062
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151388)

    End Select

    Call Transacao_Rollback

    Exit Function

End Function

Function Rotina_Carga_Back_Caixa_Central(objBarraProgresso As Object) As Long

Dim sRegistro As String
Dim iPos As Integer
Dim sTipo As String
Dim iPosInicio As Integer
Dim lErro As Long
Dim lTransacao As Long
Dim colTabPreco As New Collection
Dim lRegistroAtual As Long
Dim lNumRegistros As Long
Dim sRetorno As String
Dim sArquivo As String
Dim objLojaConfig As New ClassLojaConfig

On Error GoTo Erro_Rotina_Carga_Back_Caixa_Central

    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 112574

    objLojaConfig.iFilialEmpresa = EMPRESA_TODA
    objLojaConfig.sCodigo = DIRETORIO_TELA_EXIBIRARQUIVOSCCBACK
    
    lErro = CF("LojaConfig_Le1", objLojaConfig)
    If lErro <> SUCESSO And lErro <> 126361 Then gError 133625
    
    'se nao encontrou o registro q armazena o ultimo diretorio acessado para esta tela
    If lErro = 126361 Then objLojaConfig.sConteudo = CurDir
    
    sRetorno = objLojaConfig.sConteudo

    'se o diretorio nao for terminado por \  ===> acrescentar
    If right(sRetorno, 1) <> "\" Then sRetorno = sRetorno & "\"
    
    sArquivo = sRetorno & glEmpresa & "_" & giFilialEmpresa & "_" & NOME_ARQUIVOBACK
    
    'Abre o arquivo de retorno
    Open sArquivo For Input As #1
      
    lNumRegistros = LOF(1)
    
    objBarraProgresso.Value = 0
    
    lErro = CF("ProdutoCategoria_Exclui_Trans")
    If lErro <> SUCESSO Then gError 126775
    
    'Até chegar ao fim do arquivo
    Do While Not EOF(1)
    
        'Busca o próximo registro do arquivo
        Line Input #1, sRegistro
        
        lRegistroAtual = Loc(1)
        
        objBarraProgresso.Value = CInt((lRegistroAtual / lNumRegistros) * 100)
        
        If sRegistro <> "" Then
            iPosInicio = 1
            
            'Procura o Primeiro Control para saber o tipo do registro
            iPos = InStr(iPosInicio, sRegistro, Chr(vbKeyControl))
            
            sTipo = Mid(sRegistro, iPosInicio, iPos - iPosInicio)
            
            'Seleciona de acordo com o tipo
            Select Case StrParaLong(sTipo)
                    
                Case TIPOREGISTROECF_VENDEDORES
                    lErro = Carrega_Dados_Vendedores(sRegistro)
                    If lErro <> SUCESSO Then gError 112563
                                                        
                Case TIPOREGISTROECF_PRODUTOSNOME
                    lErro = Carrega_Dados_ProdutosNome(sRegistro)
                    If lErro <> SUCESSO Then gError 112564
                
                Case TIPOREGISTROECF_TABELAPRECO
                    lErro = Carrega_Dados_TabelaPreco(sRegistro)
                    If lErro <> SUCESSO And lErro <> 112562 Then gError 112565
                
                Case TIPOREGISTROECF_CLIENTE
                    lErro = Carrega_Dados_Cliente(sRegistro)
                    If lErro <> SUCESSO Then gError 112566
            
                Case TIPOREGISTROECF_UNIDADE_MEDIDA
                    lErro = Carrega_Dados_ClasseUM(sRegistro)
                    If lErro <> SUCESSO Then gError 105928
            
                Case TIPOREGISTROECF_BANCO
                    lErro = Carrega_Dados_Banco(sRegistro)
                    If lErro <> SUCESSO Then gError 126471
            
                Case TIPOREGISTROECF_CCI
                    lErro = Carrega_Dados_CCI(sRegistro)
                    If lErro <> SUCESSO Then gError 126472
            
                Case TIPOREGISTROECF_TABELAPRECOITENS
                    lErro = Carrega_Dados_TabelaPrecoItens(sRegistro)
                    If lErro <> SUCESSO Then gError 126474
            
                Case TIPOREGISTROECF_PRODUTO_CATEGORIA
                    lErro = Carrega_Dados_ProdutoCategoria(sRegistro)
                    If lErro <> SUCESSO Then gError 126765
            
                Case TIPOREGISTROECF_CATEGORIA_PRODUTO_ITEM
                    lErro = Carrega_Dados_CategoriaProdutoItem(sRegistro)
                    If lErro <> SUCESSO Then gError 126766
            
            End Select
        End If
    Loop
    
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 112575
    
    'avisa que a gravacao foi  concluida
    Call Rotina_Aviso(vbOKOnly, "AVISO_LEITURA_CONCLUIDA_COM_SUCESSO")

    objBarraProgresso.Value = 0

    Close #1
    
    Rotina_Carga_Back_Caixa_Central = SUCESSO
    
    Exit Function
    
Erro_Rotina_Carga_Back_Caixa_Central:

    Rotina_Carga_Back_Caixa_Central = gErr

    Select Case gErr
    
        Case 53
            Call Rotina_Erro(vbOKOnly, "ERRO_ARQUIVO_INEXISTENTE", gErr, NOME_ARQUIVOBACK)
            
        Case 105928, 112563 To 112566, 126471, 126472, 126474, 126765, 126766, 126775, 133625
        
        Case 112574
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)
        
        Case 112575
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case 126372
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCAL_ARQUIVO_NAO_CONFIGURADO", gErr, NOME_ARQUIVOBACK)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151389)
        
    End Select
    
    Close #1
    
    Call Transacao_Rollback

    Exit Function

End Function

Private Function Carrega_Dados_ClasseUM(sRegistro As String) As Long

Dim lErro As Long
Dim iPosInicio As Integer
Dim iPosFim As Integer
Dim iPosMeio As Integer
Dim objClasseUM As New ClassClasseUM
Dim colSiglas As New Collection
Dim objUnidadeDeMedida As New ClassUnidadeDeMedida

On Error GoTo Erro_Carrega_Dados_ClasseUM

    'Procura o Primeiro Control para saber onde começa a string
    iPosInicio = InStr(1, sRegistro, Chr(vbKeyControl)) + 1
    
    'Procura o Primeiro Escape dentro da String
    iPosMeio = (InStr(iPosInicio, sRegistro, Chr(vbKeyEscape)))
    
    'Pega última posição e guarda
    iPosFim = (InStr(iPosInicio, sRegistro, Chr(vbKeyEnd)))
    
    objClasseUM.iClasse = StrParaInt(Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio))
    
    'Atualiza as Posições
    iPosInicio = iPosMeio + 1
    iPosMeio = (InStr(iPosInicio, sRegistro, Chr(vbKeyEscape)))
    
    objClasseUM.sDescricao = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
    
    'Atualiza as Posições
    iPosInicio = iPosMeio + 1
    iPosMeio = (InStr(iPosInicio, sRegistro, Chr(vbKeyEscape)))
    
    objClasseUM.sSiglaUMBase = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
    
    'Atualiza as Posições
    iPosInicio = iPosMeio + 1
    iPosMeio = (InStr(iPosInicio, sRegistro, Chr(vbKeyEscape)))
    
    
    Do While iPosMeio <> 0
        
        Set objUnidadeDeMedida = New ClassUnidadeDeMedida
        
        objUnidadeDeMedida.iClasse = objClasseUM.iClasse
        
        objUnidadeDeMedida.sNome = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
        
        'Atualiza as Posições
        iPosInicio = iPosMeio + 1
        iPosMeio = (InStr(iPosInicio, sRegistro, Chr(vbKeyEscape)))
        
        objUnidadeDeMedida.sSigla = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
 
        'Atualiza as Posições
        iPosInicio = iPosMeio + 1
        iPosMeio = (InStr(iPosInicio, sRegistro, Chr(vbKeyEscape)))
        
        objUnidadeDeMedida.dQuantidade = StrParaDbl(Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio))
        
        'Atualiza as Posições
        iPosInicio = iPosMeio + 1
        iPosMeio = (InStr(iPosInicio, sRegistro, Chr(vbKeyEscape)))
        
        objUnidadeDeMedida.iAtivo = StrParaInt(Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio))
        
        objUnidadeDeMedida.sSiglaUMBase = objClasseUM.sSiglaUMBase
        
        colSiglas.Add objUnidadeDeMedida
        
        'Atualiza as Posições
        iPosInicio = iPosMeio + 1
        iPosMeio = (InStr(iPosInicio, sRegistro, Chr(vbKeyEscape)))
        
    Loop
    
    'Chama a função de gravação
    lErro = CF("ClasseUM_Grava", objClasseUM, colSiglas)
    If lErro <> SUCESSO Then gError 105929
    
    Carrega_Dados_ClasseUM = SUCESSO
    
    Exit Function
    
Erro_Carrega_Dados_ClasseUM:

    Carrega_Dados_ClasseUM = gErr

    Select Case gErr
    
        Case 105929
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151390)
        
    End Select
    
    Exit Function
    
End Function

Private Function Carrega_Dados_CategoriaProdutoItem(sRegistro As String) As Long

Dim lErro As Long
Dim iPosInicio As Integer
Dim iPosFim As Integer
Dim iPosMeio As Integer
Dim objCatProd As New ClassCategoriaProduto
Dim colItem As New Collection
Dim objItem As ClassCategoriaProdutoItem

On Error GoTo Erro_Carrega_Dados_CategoriaProdutoItem

    'Procura o Primeiro Control para saber onde começa a string
    iPosInicio = InStr(1, sRegistro, Chr(vbKeyControl)) + 1
    
    'Procura o Primeiro Escape dentro da String
    iPosMeio = (InStr(iPosInicio, sRegistro, Chr(vbKeyEscape)))
    
    'Pega última posição e guarda
    iPosFim = (InStr(iPosInicio, sRegistro, Chr(vbKeyEnd)))
    
    Do While iPosMeio <> 0
        
        Set objItem = New ClassCategoriaProdutoItem
        
        objItem.sCategoria = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
        
        'Atualiza as Posições
        iPosInicio = iPosMeio + 1
        iPosMeio = (InStr(iPosInicio, sRegistro, Chr(vbKeyEscape)))
        
        objItem.sItem = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
 
        'Atualiza as Posições
        iPosInicio = iPosMeio + 1
        iPosMeio = (InStr(iPosInicio, sRegistro, Chr(vbKeyEscape)))
        
        objItem.iOrdem = StrParaInt(Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio))
        
        'Atualiza as Posições
        iPosInicio = iPosMeio + 1
        iPosMeio = (InStr(iPosInicio, sRegistro, Chr(vbKeyEscape)))
        
        objItem.sDescricao = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
        
        'Atualiza as Posições
        iPosInicio = iPosMeio + 1
        iPosMeio = (InStr(iPosInicio, sRegistro, Chr(vbKeyEscape)))
        
        objItem.dvalor1 = StrParaDbl(Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio))
        
        'Atualiza as Posições
        iPosInicio = iPosMeio + 1
        iPosMeio = (InStr(iPosInicio, sRegistro, Chr(vbKeyEscape)))
        
        objItem.dvalor2 = StrParaDbl(Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio))
        
        'Atualiza as Posições
        iPosInicio = iPosMeio + 1
        iPosMeio = (InStr(iPosInicio, sRegistro, Chr(vbKeyEscape)))
        
        objItem.dvalor3 = StrParaDbl(Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio))
        
        'Atualiza as Posições
        iPosInicio = iPosMeio + 1
        iPosMeio = (InStr(iPosInicio, sRegistro, Chr(vbKeyEscape)))
        
        objItem.dvalor4 = StrParaDbl(Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio))
        
        'Atualiza as Posições
        iPosInicio = iPosMeio + 1
        iPosMeio = (InStr(iPosInicio, sRegistro, Chr(vbKeyEscape)))
        
        objItem.dvalor5 = StrParaDbl(Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio))
        
        'Atualiza as Posições
        iPosInicio = iPosMeio + 1
        iPosMeio = (InStr(iPosInicio, sRegistro, Chr(vbKeyEscape)))
        
        objItem.dvalor6 = StrParaDbl(Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio))
        
        'Atualiza as Posições
        iPosInicio = iPosMeio + 1
        iPosMeio = (InStr(iPosInicio, sRegistro, Chr(vbKeyEscape)))
        
        objItem.dvalor7 = StrParaDbl(Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio))
        
        'Atualiza as Posições
        iPosInicio = iPosMeio + 1
        iPosMeio = (InStr(iPosInicio, sRegistro, Chr(vbKeyEscape)))
        
        objItem.dvalor8 = StrParaDbl(Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio))
        
        colItem.Add objItem
        
        'Atualiza as Posições
        iPosInicio = iPosMeio + 1
        iPosMeio = (InStr(iPosInicio, sRegistro, Chr(vbKeyEscape)))
        
    Loop
    
    objCatProd.sCategoria = objItem.sCategoria
    
    'Chama a função de gravação
    lErro = CF("CategoriaProduto_Grava", objCatProd, colItem)
    If lErro <> SUCESSO Then gError 126769
    
    Carrega_Dados_CategoriaProdutoItem = SUCESSO
    
    Exit Function
    
Erro_Carrega_Dados_CategoriaProdutoItem:

    Carrega_Dados_CategoriaProdutoItem = gErr

    Select Case gErr
    
        Case 126769
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151391)
        
    End Select
    
    Exit Function
    
End Function

Private Function Carrega_Dados_ProdutoCategoria(sRegistro As String) As Long

Dim lErro As Long
Dim iPosInicio As Integer
Dim iPosFim As Integer
Dim iPosMeio As Integer
Dim objCatProd As New ClassCategoriaProduto
Dim colItem As New Collection
Dim objProdCat As ClassProdutoCategoria

On Error GoTo Erro_Carrega_Dados_ProdutoCategoria

    'Procura o Primeiro Control para saber onde começa a string
    iPosInicio = InStr(1, sRegistro, Chr(vbKeyControl)) + 1
    
    'Procura o Primeiro Escape dentro da String
    iPosMeio = (InStr(iPosInicio, sRegistro, Chr(vbKeyEscape)))
    
    'Pega última posição e guarda
    iPosFim = (InStr(iPosInicio, sRegistro, Chr(vbKeyEnd)))
    
    Set objProdCat = New ClassProdutoCategoria
    
    objProdCat.sProduto = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
    
    'Atualiza as Posições
    iPosInicio = iPosMeio + 1
    iPosMeio = (InStr(iPosInicio, sRegistro, Chr(vbKeyEscape)))
    
    objProdCat.sCategoria = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
    
    'Atualiza as Posições
    iPosInicio = iPosMeio + 1
    iPosMeio = (InStr(iPosInicio, sRegistro, Chr(vbKeyEscape)))
    
    objProdCat.sItem = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
    
    'Chama a função de gravação
    lErro = CF("ProdutoCategoria_Insere_Trans", objProdCat)
    If lErro <> SUCESSO Then gError 126776
    
    Carrega_Dados_ProdutoCategoria = SUCESSO
    
    Exit Function
    
Erro_Carrega_Dados_ProdutoCategoria:

    Carrega_Dados_ProdutoCategoria = gErr

    Select Case gErr
    
        Case 126776
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151392)
        
    End Select
    
    Exit Function
    
End Function


Private Function Carrega_Dados_Vendedores(sRegistro As String) As Long

Dim iPos As Integer
Dim lErro As Long
Dim objVendedor As New ClassVendedor
Dim objEndereco As New ClassEndereco
Dim iIndice As Integer
Dim iPosInicio As Integer
Dim iPosFim As Integer
Dim iPosMeio As Integer
Dim iPosShift As Integer
Dim objFilialEmpresa As AdmFiliais

On Error GoTo Erro_Carrega_Dados_Vendedores

    'Procura o Primeiro Control para saber onde começa a string
    iPosInicio = InStr(1, sRegistro, Chr(vbKeyControl)) + 1
    
    'Procura o Primeiro Escape dentro da String
    iPosMeio = (InStr(iPosInicio, sRegistro, Chr(vbKeyEscape)))
    
    'Pega última posição e guarda
    iPosFim = (InStr(iPosInicio, sRegistro, Chr(vbKeyEnd)))
    
    iIndice = 0
            
    Do While iPosMeio <> 0
        
       iIndice = iIndice + 1
        
        Select Case iIndice
            
            Case 1: objVendedor.iCodigo = StrParaInt(Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio))
            Case 2: objVendedor.sNomeReduzido = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            Case 3: objVendedor.sNome = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            Case 4: objVendedor.lEndereco = StrParaLong(Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio))
            Case 5: objVendedor.iTipo = 0
            Case 6: objVendedor.sMatricula = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            Case 7: objVendedor.iCodRegiao = 0
            Case 8: objVendedor.dSaldoComissao = StrParaDbl(Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio))
            Case 9: objVendedor.dPercComissao = StrParaDbl(Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio))
            Case 10: objVendedor.dPercComissaoBaixa = StrParaDbl(Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio))
            Case 11: objVendedor.dPercComissaoEmissao = StrParaDbl(Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio))
            Case 12: objVendedor.iComissaoSobreTotal = StrParaInt(Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio))
            Case 13: objVendedor.iComissaoFrete = StrParaInt(Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio))
            Case 14: objVendedor.iComissaoICM = StrParaInt(Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio))
            Case 15: objVendedor.iComissaoIPI = StrParaInt(Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio))
            Case 16: objVendedor.iComissaoSeguro = StrParaInt(Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio))
            Case 17: objVendedor.iBanco = StrParaInt(Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio))
            Case 18: objVendedor.sAgencia = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            Case 19: objVendedor.sContaCorrente = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            Case 20: objVendedor.iAtivo = StrParaInt(Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio))
            
            If objVendedor.lEndereco = 0 Then Exit Do
            
            Case 21: objEndereco.sBairro = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            Case 22: objEndereco.sCidade = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            Case 23: objEndereco.sSiglaEstado = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            Case 24: objEndereco.iCodigoPais = StrParaInt(Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio))
            Case 25: objEndereco.sCEP = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            Case 26: objEndereco.sTelefone1 = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            Case 27: objEndereco.sTelefone2 = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            Case 28: objEndereco.sEmail = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            Case 29: objEndereco.sFax = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            Case 30: objEndereco.sContato = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            Case 31: objEndereco.sEndereco = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
                     Exit Do
            
        End Select
        
        'Atualiza as Posições
        iPosInicio = iPosMeio + 1
        iPosMeio = (InStr(iPosInicio, sRegistro, Chr(vbKeyEscape)))
        
    Loop
            
    'Atualiza as Posições
    iPosInicio = iPosMeio + 1
    iPosMeio = (InStr(iPosInicio, sRegistro, Chr(vbKeyEscape)))
            
    'carrega as filiais parao qual o vendedor está habilitado
    Do While iPosMeio <> 0
        
        Set objFilialEmpresa = New AdmFiliais
        
        objFilialEmpresa.iCodFilial = StrParaInt(Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio))
        
        'Atualiza as Posições
        iPosInicio = iPosMeio + 1
        iPosMeio = (InStr(iPosInicio, sRegistro, Chr(vbKeyEscape)))
        
        objVendedor.colFiliaisLoja.Add objFilialEmpresa
        
    Loop
            
    lErro = CF("Vendedor_Grava_EmTrans", objVendedor, objEndereco)
    If lErro <> SUCESSO Then gError 112568
    
    'Função que Grava os Vendedores Relacionados a Filial Empresa Correspondente.
    lErro = CF("VendedorLoja_Filial_Grava", objVendedor)
    If lErro <> SUCESSO Then gError 105931
    
    Carrega_Dados_Vendedores = SUCESSO
    
    Exit Function
    
Erro_Carrega_Dados_Vendedores:

    Carrega_Dados_Vendedores = gErr

    Select Case gErr
    
        Case 105931, 112568
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151393)
        
    End Select
    
    Exit Function
    
End Function

Private Function Carrega_Dados_TabelaPreco(sRegistro As String) As Long

Dim iPos As Integer
Dim iIndice As Integer
Dim iPosInicio As Integer
Dim iPosFim As Integer
Dim iPosMeio As Integer
Dim objTab As New ClassTabelaPreco
Dim bAchou As Boolean
Dim lErro As Long
Dim lComando As Long
Dim iCodigo As Integer

On Error GoTo Erro_Carrega_Dados_TabelaPreco
    
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 112594

    Set objTab = New ClassTabelaPreco
            
    'Primeira Posição
    iPosInicio = 1
    
    'Procura o Primeiro Control para saber onde começa a string
    iPosInicio = InStr(iPosInicio, sRegistro, Chr(vbKeyControl)) + 1
    
    'Procura o Primeiro Escape dentro da String
    iPosMeio = (InStr(iPosInicio, sRegistro, Chr(vbKeyEscape)))
    
    'Pega última posição e guarda
    iPosFim = (InStr(iPosInicio, sRegistro, Chr(vbKeyEnd)))
    
    iIndice = 0
    
    Do While iPosMeio <> 0
        
       iIndice = iIndice + 1
        
        Select Case iIndice
            
            Case 1: objTab.iCodigo = StrParaInt(Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio))
            Case 2: objTab.sDescricao = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            Case 3: objTab.iAtivo = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            
        End Select
        
        'Atualiza as Posições
        iPosInicio = iPosMeio + 1
        iPosMeio = (InStr(iPosInicio, sRegistro, Chr(vbKeyEscape)))
        
    Loop
    
    'Pesquisa no BD a Tabela de Preço
    lErro = Comando_Executar(lComando, "SELECT Codigo FROM TabelasDePreco WHERE Codigo = ?", iCodigo, objTab.iCodigo)
    If lErro <> AD_SQL_SUCESSO Then gError 112595

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112596

    'Encontrou a Tabela no BD ==> Erro
    If lErro = AD_SQL_SUCESSO Then
        lErro = CF("TabelaPreco_Altera_Trans", objTab)
        If lErro <> SUCESSO Then gError 112597
    Else
        lErro = CF("TabelaPreco_Cria_Trans", objTab)
        If lErro <> SUCESSO Then gError 112598
    End If
    
    Call Comando_Fechar(lComando)

    Carrega_Dados_TabelaPreco = SUCESSO
    
    Exit Function
    
Erro_Carrega_Dados_TabelaPreco:

    Carrega_Dados_TabelaPreco = gErr

    Select Case gErr
    
        Case 112570, 112597, 112598
            
        Case 112595, 112596
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TABELASDEPRECO1", gErr, objTab.iCodigo)

        Case 112594
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151394)
        
    End Select
    
    Call Comando_Fechar(lComando)
    
    Exit Function
    
End Function

Private Function Carrega_Dados_Cliente(sRegistro As String) As Long

Dim iPos As Integer
Dim objCliente As New ClassCliente
Dim iIndice As Integer
Dim iPosInicio As Integer
Dim iPosMeio As Integer
Dim colEndereco As New Collection
Dim objEndereco As New ClassEndereco
Dim objEnderecoComp As New ClassEndereco
Dim lErro As Long
Dim iCodigo As Integer
Dim objClienteComp As New ClassCliente
Dim objFilialClienteComp As New ClassFilialCliente
Dim vbMsgResp As VbMsgBoxResult
Dim bContinua As Boolean
Dim objFilialCliente As New ClassFilialCliente
Dim bCritica As Boolean
Dim lCodigo As Long

On Error GoTo Erro_Carrega_Dados_Cliente

    lErro = Carrega_Dados_Cliente1(sRegistro, objCliente, objFilialCliente, objEndereco)
    If lErro <> SUCESSO Then gError 105916

    lErro = Carrega_Dados_Cliente2(objCliente, objFilialCliente, objEndereco)
    If lErro <> SUCESSO Then gError 105917

    Carrega_Dados_Cliente = SUCESSO
    
    Exit Function
    
Erro_Carrega_Dados_Cliente:

    Carrega_Dados_Cliente = gErr

    Select Case gErr
    
        Case 105916, 105917
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151395)
        
    End Select
    
    Exit Function
    
End Function

Private Function Carrega_Dados_Cliente1(sRegistro As String, ByVal objCliente As ClassCliente, ByVal objFilialCliente As ClassFilialCliente, ByVal objEndereco As ClassEndereco) As Long
'carrega os dados de cliente de sRegistro para os objetos

Dim iIndice As Integer
Dim iPosInicio As Integer
Dim iPosMeio As Integer

On Error GoTo Erro_Carrega_Dados_Cliente1

    'Procura o Primeiro Control para saber onde começa a string
    iPosInicio = InStr(1, sRegistro, Chr(vbKeyControl)) + 1
    
    'Procura o Primeiro Escape dentro da String
    iPosMeio = (InStr(iPosInicio, sRegistro, Chr(vbKeyEscape)))
    
    iIndice = 0
            
    Do While iPosMeio <> 0
        
       iIndice = iIndice + 1
        
        Select Case iIndice
            
            Case 1: objCliente.lCodigoLoja = StrParaLong(Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio))
            Case 2: objCliente.sNomeReduzido = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            Case 3: objCliente.sCgc = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            Case 4: objCliente.lCodigo = StrParaLong(Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio))
            Case 5: objCliente.iTipo = StrParaInt(Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio))
            Case 6: objCliente.sRazaoSocial = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            Case 7: objCliente.sRG = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            Case 8: objCliente.lEndereco = StrParaLong(Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio))
            Case 9: objFilialCliente.iFilialEmpresaLoja = StrParaInt(Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio))
            Case 10: objFilialCliente.iCodFilial = StrParaInt(Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio))
            Case 11: objFilialCliente.sNome = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            Case 12: objFilialCliente.iCodFilialLoja = StrParaInt(Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio))
            Case 13: objCliente.iFilialEmpresaLoja = StrParaInt(Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio))
            Case 14: objCliente.iAtivo = StrParaInt(Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio))
            Case 15: objFilialCliente.iAtivo = StrParaInt(Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio))
            
            Case 16:  If objCliente.lEndereco > 0 Then Exit Do
                      objEndereco.sBairro = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            Case 17: objEndereco.sCidade = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            Case 18: objEndereco.sSiglaEstado = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            Case 19: objEndereco.iCodigoPais = StrParaInt(Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio))
            Case 20: objEndereco.sCEP = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            Case 21: objEndereco.sTelefone1 = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            Case 22: objEndereco.sTelefone2 = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            Case 23: objEndereco.sEmail = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            Case 24: objEndereco.sFax = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            Case 25: objEndereco.sContato = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            Case 26: objEndereco.sEndereco = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            Case 27: Exit Do
            
        End Select
        
        'Atualiza as Posições
        iPosInicio = iPosMeio + 1
        iPosMeio = (InStr(iPosInicio, sRegistro, Chr(vbKeyEscape)))
        
    Loop

    Carrega_Dados_Cliente1 = SUCESSO
    
    Exit Function

Erro_Carrega_Dados_Cliente1:

    Carrega_Dados_Cliente1 = gErr
    
    Select Case gErr
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151396)
        
    End Select
    
    Exit Function
    
End Function

Private Function Carrega_Dados_Cliente2(ByVal objCliente As ClassCliente, ByVal objFilialCliente As ClassFilialCliente, ByVal objEndereco As ClassEndereco) As Long

Dim colEndereco As New Collection
Dim lErro As Long
Dim iCodigo As Integer
Dim objClienteComp As New ClassCliente
Dim objFilialClienteComp As New ClassFilialCliente
Dim lCodigo As Long

On Error GoTo Erro_Carrega_Dados_Cliente2

    'se a filial nao coincidir com a filial onde estão sendo carregados os dados ==> sinal de que tem que conseguir um codigo proprio para a filial
    If objCliente.iFilialEmpresaLoja <> giFilialEmpresa Then objCliente.lCodigoLoja = 0
    
    If objFilialCliente.iFilialEmpresaLoja <> giFilialEmpresa Then objFilialCliente.iCodFilialLoja = 0

    'Se o país nao estiver preenchido atribui BRASIL
    If objEndereco.iCodigoPais = 0 Then objEndereco.iCodigoPais = 1
    
    'gravação no bd
    colEndereco.Add objEndereco
    
    objClienteComp.lCodigoLoja = objCliente.lCodigoLoja
    objClienteComp.iFilialEmpresaLoja = objCliente.iFilialEmpresaLoja
    objClienteComp.lCodigo = objCliente.lCodigo

    'Busca o Cliente na Tabela de Clientes do Caixa Central
    lErro = CF("Cliente_Le_Loja", objClienteComp)
    If lErro <> SUCESSO And lErro <> 112606 Then gError 112573

    'se encontrou o codigoloja ou o codigo do cliente
    If lErro = SUCESSO Then
        'se o codigo loja está em branco mas existe o codigo no banco de dados ==> assume o codigo do banco de dados
         'a filialloja é = giFilialEmpresa pois está no banco de dados local
        If objCliente.lCodigoLoja = 0 Then
            objCliente.lCodigoLoja = objClienteComp.lCodigoLoja
            objCliente.iFilialEmpresaLoja = objClienteComp.iFilialEmpresaLoja
        Else
            'se o codigoloja foi passado como parametro e difere do codigoloja encontrado no bd ==> erro
           If objCliente.lCodigoLoja <> objClienteComp.lCodigoLoja Or _
            objCliente.iFilialEmpresaLoja <> objClienteComp.iFilialEmpresaLoja Then gError 105919
        End If

    Else
    
        'se nao encontrou o cliente no bd
        'Gera código automático do próximo cliente
        lErro = CF("Config_ObterAutomatico_EmTrans", "LojaConfig", "NUM_PROX_CLIENTELOJA", "Clientes", "CodigoLoja", lCodigo)
        If lErro <> SUCESSO Then gError 112574
        
        objCliente.lCodigoLoja = lCodigo
    
    End If
    
    lErro = CF("ClienteLoja_Grava_EmTrans", objCliente, colEndereco)
    If lErro <> SUCESSO Then gError 112573
    
    'Se For a Filial Matriz
    If objFilialCliente.iCodFilial <> FILIAL_MATRIZ Then
    
        objFilialClienteComp.iCodFilialLoja = objFilialCliente.iCodFilialLoja
        objFilialClienteComp.iFilialEmpresaLoja = objFilialCliente.iFilialEmpresaLoja
        objFilialClienteComp.lCodClienteLoja = objCliente.lCodigoLoja
        objFilialClienteComp.iCodFilial = objFilialCliente.iCodFilial
        objFilialClienteComp.lCodCliente = objCliente.lCodigo

        'Busca a Filial do Cliente no Banco
        lErro = CF("FilialCliente_Le_Loja", objFilialClienteComp)
        If lErro <> SUCESSO And lErro <> 112607 Then gError 112573
    
        'se encontrou o codFilialloja ou o codFilial
        If lErro = SUCESSO Then
             'se o codigo filial loja está em branco mas existe o codigo no banco de dados ==> assume o codigo do banco de dados
             'a filialloja é = giFilialEmpresa pois está no banco de dados local
            If objFilialCliente.iCodFilialLoja = 0 Then
                objFilialCliente.iCodFilialLoja = objFilialClienteComp.iCodFilialLoja
                objFilialCliente.iFilialEmpresaLoja = objFilialClienteComp.iFilialEmpresaLoja
                objFilialCliente.lCodClienteLoja = objFilialClienteComp.lCodClienteLoja
                objCliente.lCodigoLoja = objFilialClienteComp.lCodClienteLoja
                objCliente.iFilialEmpresaLoja = objFilialClienteComp.iFilialEmpresaLoja
            Else
                
                'se o codigofilialloja foi passado como parametro e difere do codigofilial loja encontrado no bd ==> erro
                If objFilialCliente.iCodFilialLoja <> objFilialClienteComp.iCodFilialLoja Or _
                   objFilialCliente.iFilialEmpresaLoja <> objFilialClienteComp.iFilialEmpresaLoja Or _
                   objFilialCliente.lCodClienteLoja <> objFilialClienteComp.lCodClienteLoja Then gError 105920
                   
            End If
    
        'se a filial do cliente nao está cadastrada
        Else
    
            'Gera código automático do próximo cliente
            lErro = CF("FilialClienteLoja_Automatico_EmTrans", objCliente.lCodigoLoja, iCodigo)
            If lErro <> SUCESSO Then gError 112574
            
            objFilialCliente.iCodFilialLoja = iCodigo
        
        End If
        
        objFilialCliente.lCodCliente = objCliente.lCodigo
        objFilialCliente.sRG = objCliente.sRG
        objFilialCliente.sCgc = objCliente.sCgc
        objFilialCliente.lEndereco = objCliente.lEndereco
        
        lErro = CF("FiliaisClientesLoja_Grava_EmTrans", objFilialCliente, colEndereco)
        If lErro <> SUCESSO Then gError 112573
    
    End If
    
    Carrega_Dados_Cliente2 = SUCESSO
    
    Exit Function
    
Erro_Carrega_Dados_Cliente2:

    Carrega_Dados_Cliente2 = gErr

    Select Case gErr
    
        Case 105919
            Call Rotina_Erro(vbOKOnly, "ERRO_CODIGO_LOJA_INVALIDO", gErr, objCliente.lCodigoLoja, objCliente.iFilialEmpresaLoja, objClienteComp.lCodigoLoja, objClienteComp.iFilialEmpresaLoja)

        Case 105920
            Call Rotina_Erro(vbOKOnly, "ERRO_CODIGOFILIALLOJA_INVALIDO", gErr, objFilialCliente.iCodFilialLoja, objFilialCliente.lCodClienteLoja, objFilialCliente.iFilialEmpresaLoja, objFilialClienteComp.iCodFilialLoja, objFilialClienteComp.lCodClienteLoja, objFilialClienteComp.iFilialEmpresaLoja)

        Case 112573, 112574, 112576, 112611, 112612
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151397)
        
    End Select
    
    Exit Function

End Function


Private Function Carrega_Dados_ProdutosNome(sRegistro As String) As Long

Dim iPos As Integer
Dim objProduto As New ClassProduto
Dim objProduto2 As ClassProduto
Dim iIndice As Integer
Dim iPosInicio As Integer
Dim iPosFim As Integer
Dim iPosMeio As Integer
Dim iPosColInicio As Integer
Dim sProduto As String
Dim objTabPreco As New ClassTabelaPrecoItem
Dim colTab As New Collection
Dim dValor As Double
Dim lErro As Long

On Error GoTo Erro_Carrega_Dados_ProdutosNome

    'Procura o Primeiro Control para saber onde começa a string
    iPosInicio = InStr(1, sRegistro, Chr(vbKeyControl)) + 1
    
    'Procura o Primeiro Escape dentro da String
    iPosMeio = (InStr(iPosInicio, sRegistro, Chr(vbKeyEscape)))
    
    'Pega última posição e guarda
    iPosFim = (InStr(iPosInicio, sRegistro, Chr(vbKeyEnd)))
    
    iIndice = 0
    
    Do While iPosMeio <> 0
        
       iIndice = iIndice + 1
        
        Select Case iIndice
            
            Case 1: objProduto.sCodigo = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            Case 2: objProduto.sNomeReduzido = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            Case 3: objProduto.sSiglaUMVenda = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            Case 4: objProduto.sReferencia = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            Case 5: objProduto.sFigura = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            Case 6: objProduto.sSituacaoTribECF = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            Case 7: objProduto.sICMSAliquota = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            Case 8: objProduto.sDescricao = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            Case 9: objProduto.iClasseUM = StrParaInt(Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio))
            Case 10: objProduto.sSiglaUMEstoque = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            Case 11: objProduto.sSiglaUMCompra = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            Case 12: objProduto.iAtivo = StrParaInt(Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio))
            Case 13: objProduto.dLimiteDesconto = StrParaDbl(Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio))
            Case 14: objProduto.iUsaBalanca = StrParaInt(Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio))
            Case 15: objProduto.iCompras = StrParaInt(Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio))
                     objProduto.sTruncamento = gobjLojaECF.sTruncamentoArredondamento
            Case 16: objProduto.dQuantEstLoja = StrParaDbl(Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio))
                     
            Case 17 To (17 + NUM_MAX_CODBARRAS_PRODUTO)
                objProduto.sCodigoBarras = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
                
                objProduto.colCodBarras.Add objProduto.sCodigoBarras
                
        End Select
        
        'Atualiza as Posições
        iPosInicio = iPosMeio + 1
        iPosMeio = (InStr(iPosInicio, sRegistro, Chr(vbKeyEscape)))
        
    Loop
    
    lErro = CF("Produto_Grava_Trans", objProduto, colTab)
    If lErro <> SUCESSO Then gError 112569
    
    Carrega_Dados_ProdutosNome = SUCESSO
    
    Exit Function
    
Erro_Carrega_Dados_ProdutosNome:

    Carrega_Dados_ProdutosNome = gErr

    Select Case gErr
    
        Case 112569
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151398)
        
    End Select
    
    Exit Function
    
End Function

Private Function Carrega_Dados_Banco(sRegistro As String) As Long

Dim iPos As Integer
Dim objBanco As New ClassBanco
Dim iIndice As Integer
Dim iPosInicio As Integer
Dim iPosFim As Integer
Dim iPosMeio As Integer
Dim iPosColInicio As Integer
Dim lErro As Long

On Error GoTo Erro_Carrega_Dados_Banco

    'Procura o Primeiro Control para saber onde começa a string
    iPosInicio = InStr(1, sRegistro, Chr(vbKeyControl)) + 1
    
    'Procura o Primeiro Escape dentro da String
    iPosMeio = (InStr(iPosInicio, sRegistro, Chr(vbKeyEscape)))
    
    'Pega última posição e guarda
    iPosFim = (InStr(iPosInicio, sRegistro, Chr(vbKeyEnd)))
    
    iIndice = 0
    
    Do While iPosMeio <> 0
        
       iIndice = iIndice + 1
        
        Select Case iIndice
            
            
            Case 1: objBanco.iCodBanco = StrParaInt(Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio))
            Case 2: objBanco.sNome = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            Case 3: objBanco.sNomeReduzido = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            Case 4: objBanco.sLayoutCheque = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            Case 5: objBanco.sLayoutBoleto = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            Case 6: objBanco.iAtivo = StrParaInt(Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio))
            
        End Select
        
        'Atualiza as Posições
        iPosInicio = iPosMeio + 1
        iPosMeio = (InStr(iPosInicio, sRegistro, Chr(vbKeyEscape)))
        
    Loop
    
    lErro = CF("Banco_Grava_Trans", objBanco)
    If lErro <> SUCESSO Then gError 126442
    
    Carrega_Dados_Banco = SUCESSO
    
    Exit Function
    
Erro_Carrega_Dados_Banco:

    Carrega_Dados_Banco = gErr

    Select Case gErr
    
        Case 126442
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151399)
        
    End Select
    
    Exit Function
    
End Function

Private Function Carrega_Dados_CCI(sRegistro As String) As Long

Dim iPos As Integer
Dim iIndice As Integer
Dim iPosInicio As Integer
Dim iPosFim As Integer
Dim iPosMeio As Integer
Dim iPosColInicio As Integer
Dim lErro As Long
Dim objCCI As New ClassContasCorrentesInternas

On Error GoTo Erro_Carrega_Dados_CCI

    'Procura o Primeiro Control para saber onde começa a string
    iPosInicio = InStr(1, sRegistro, Chr(vbKeyControl)) + 1
    
    'Procura o Primeiro Escape dentro da String
    iPosMeio = (InStr(iPosInicio, sRegistro, Chr(vbKeyEscape)))
    
    'Pega última posição e guarda
    iPosFim = (InStr(iPosInicio, sRegistro, Chr(vbKeyEnd)))
    
    iIndice = 0
    
    Do While iPosMeio <> 0
        
       iIndice = iIndice + 1
        
        Select Case iIndice
            
            Case 1: objCCI.iCodigo = StrParaInt(Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio))
            Case 2: objCCI.iFilialEmpresa = StrParaInt(Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio))
            Case 3: objCCI.sNomeReduzido = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            Case 4: objCCI.sDescricao = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            Case 5: objCCI.iCodBanco = StrParaInt(Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio))
            Case 6: objCCI.sAgencia = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            Case 7: objCCI.sDVAgencia = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            Case 8: objCCI.sNumConta = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            Case 9: objCCI.sDVNumConta = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            Case 10: objCCI.sDVAgConta = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            Case 11: objCCI.sContato = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            Case 12: objCCI.stelefone = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            Case 13: objCCI.sFax = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            Case 14: objCCI.dSaldoInicial = StrParaDbl(Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio))
            Case 15: objCCI.dtDataInicial = StrParaDate(Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio))
            Case 16: objCCI.sContaContabil = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            Case 17: objCCI.iAtivo = StrParaInt(Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio))
            
        End Select
        
        'Atualiza as Posições
        iPosInicio = iPosMeio + 1
        iPosMeio = (InStr(iPosInicio, sRegistro, Chr(vbKeyEscape)))
        
    Loop
    
    lErro = CF("ContasCorrentesInt_Grava_Trans", objCCI)
    If lErro <> SUCESSO Then gError 126473
    
    Carrega_Dados_CCI = SUCESSO
    
    Exit Function
    
Erro_Carrega_Dados_CCI:

    Carrega_Dados_CCI = gErr

    Select Case gErr
    
        Case 126473
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151400)
        
    End Select
    
    Exit Function
    
End Function

Private Function Carrega_Dados_TabelaPrecoItens(sRegistro As String) As Long

Dim iPos As Integer
Dim iIndice As Integer
Dim iPosInicio As Integer
Dim iPosFim As Integer
Dim iPosMeio As Integer
Dim bAchou As Boolean
Dim lErro As Long
Dim lComando As Long
Dim iCodigo As Integer
Dim objTabelaPrecoItem As New ClassTabelaPrecoItem

On Error GoTo Erro_Carrega_Dados_TabelaPrecoItens
    
    'Primeira Posição
    iPosInicio = 1
    
    'Procura o Primeiro Control para saber onde começa a string
    iPosInicio = InStr(iPosInicio, sRegistro, Chr(vbKeyControl)) + 1
    
    'Procura o Primeiro Escape dentro da String
    iPosMeio = (InStr(iPosInicio, sRegistro, Chr(vbKeyEscape)))
    
    'Pega última posição e guarda
    iPosFim = (InStr(iPosInicio, sRegistro, Chr(vbKeyEnd)))
    
    iIndice = 0
    
    Do While iPosMeio <> 0
        
       iIndice = iIndice + 1
        
        Select Case iIndice
            
            Case 1: objTabelaPrecoItem.iCodTabela = StrParaInt(Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio))
            Case 2: objTabelaPrecoItem.sCodProduto = Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio)
            Case 3: objTabelaPrecoItem.dtDataVigencia = StrParaDate(Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio))
            Case 4: objTabelaPrecoItem.dPreco = StrParaDbl(Mid(sRegistro, iPosInicio, iPosMeio - iPosInicio))
            
        End Select
        
        'Atualiza as Posições
        iPosInicio = iPosMeio + 1
        iPosMeio = (InStr(iPosInicio, sRegistro, Chr(vbKeyEscape)))
        
    Loop
    
    'Chama função que grava na tabela : TabelaDePrecoItens
    lErro = CF("TabelaPrecoItem_Grava_EmTrans", objTabelaPrecoItem)
    If lErro <> SUCESSO Then gError 126476
    
    Carrega_Dados_TabelaPrecoItens = SUCESSO
    
    Exit Function
    
Erro_Carrega_Dados_TabelaPrecoItens:

    Carrega_Dados_TabelaPrecoItens = gErr

    Select Case gErr
    
        Case 126476
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151401)
        
    End Select
    
    Exit Function
    
End Function

Function Recebimento_Carne_Dinheiro(ByVal objMovCx As ClassMovimentoCaixa) As Long

Dim objCCMovDia As New ClassCCMovDia
Dim objTipoMeioPagtoLojaFilial As New ClassTMPLojaFilial
Dim lErro As Long
    
On Error GoTo Erro_Recebimento_Carne_Dinheiro

    'preenche um objccmovdia com os dados do movimento de deposito no caixa central
    lErro = Mover_Dados_Deposito_CCMovDia(objMovCx, objCCMovDia)
    If lErro <> SUCESSO Then gError 133810

    objCCMovDia.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_DINHEIRO

    'adiciona o mesmo no consolidado diário
    lErro = CF("CCMovDia_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 133811

    'adiciona o mesmo no consolidado anual no mês em questão
    lErro = CF("CCMov_Grava", objCCMovDia)
    If lErro <> SUCESSO Then gError 133812

    objTipoMeioPagtoLojaFilial.dSaldo = objMovCx.dValor
    objTipoMeioPagtoLojaFilial.iFilialEmpresa = objMovCx.iFilialEmpresa

    'mover Meio_pagamento_Dineiro para objtipomeiopagtoloja.itipo
    objTipoMeioPagtoLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_DINHEIRO

    'altera o saldo atual na tabela de tipomeiopagtoloja
    lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTipoMeioPagtoLojaFilial)
    If lErro <> SUCESSO Then gError 133813

    Recebimento_Carne_Dinheiro = SUCESSO
    
    Exit Function
    
Erro_Recebimento_Carne_Dinheiro:

    Recebimento_Carne_Dinheiro = gErr
    
    Select Case gErr
    
        Case 133810, 133811, 133812, 133813
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151402)
    
    End Select
    
    Exit Function

End Function

Function Gera_Arquivo_CargaBalanca(ByVal iFilialEmpresa As Integer, ByVal iCodTabela As Integer, BarraProgresso As Object) As Long
'Busca os dados de preços dos produtos nas tabelas de preço e retorna
'os registros montados para arquivo na coleção

Dim alComando(1 To 2) As Long
Dim iIndice As Integer
Dim lErro As Long
Dim sSelect As String
Dim sRegistro As String * 47
Dim dPreco As Double
Dim sNomeReduzido As String
Dim sReferencia As String
Dim sFrom As String
Dim lNumReg As Long
Dim sAux As String
Dim iPos As Integer
Dim sChar As String
Dim sNomeRed As String
Dim lRegProcessados As Long
Dim dRet As Double
Dim sPorta As String
Dim sBalanca As String
Dim lTamanho As Long
Dim sRefInicio As String, sRetorno As String

On Error GoTo Erro_Gera_Arquivo_CargaBalanca
        
    'Inicializa os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
         alComando(iIndice) = Comando_Abrir()
         If alComando(iIndice) = 0 Then gError 112547
    Next
    
    sNomeReduzido = String(STRING_PRODUTO_NOME_REDUZIDO, 0)
    sReferencia = String(STRING_PRODUTO_REFERENCIA, 0)

    sFrom = " FROM TabelasdePreco d, TabelasdePrecoItens a, Produtos b, ProdutosFilial c, ProdutoCategoria e WHERE b.Codigo = c.Produto AND a.CodTabela = d.Codigo AND d.Ativo = ? AND  a.Ativo = ? AND a.CodProduto = b.Codigo AND a.CodProduto = e.Produto AND UPPER(e.Categoria) = 'BALANCA' AND UPPER(e.Item) = 'PESO' AND b.Referencia <> '' AND (EXISTS (SELECT CodTabela AS DataV FROM TabelasDePrecoItens WHERE DataVigencia <= ? AND FilialEmpresa = c.FilialEmpresa GROUP BY CodTabela, CodProduto  HAVING  a.CodTabela=CodTabela AND a.CodProduto=CodProduto AND a.DataVigencia=MAX(DataVigencia) AND MAX(DataVigencia)<= ?)) AND c.FilialEmpresa =? AND a.CodTabela = ? "

    'Pega os dados da tabela de preco
    lErro = Comando_Executar(alComando(1), "SELECT Count(*) " & sFrom, lNumReg, Ativo, Ativo, Date, Date, iFilialEmpresa, iCodTabela)
    If lErro <> AD_SQL_SUCESSO Then gError 112557

    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 112558

    If lNumReg > 0 Then

        If lNumReg > 1600 Then gError 999999
    
        If Len(Dir("Produtos.Txt")) > 0 Then
            Kill "Produtos.Txt"
        End If
        
        Open "Produtos.Txt" For Binary As #1 Len = 47
    
        BarraProgresso.Min = 0
        BarraProgresso.Max = 100
    
        'Monta o SELECT a ser executado.
        sSelect = "SELECT b.NomeReduzido, a.Preco, b.Referencia " & sFrom & " ORDER BY {fn CONVERT(b.Referencia, SQL_SMALLINT)}"
        
        'Pega os dados da tabela de preco
        lErro = Comando_Executar(alComando(2), sSelect, sNomeReduzido, dPreco, sReferencia, Ativo, Ativo, Date, Date, iFilialEmpresa, iCodTabela)
        If lErro <> AD_SQL_SUCESSO Then gError 112557
    
        'Busca o primeiro registro de preço
        lErro = Comando_BuscarPrimeiro(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112558
            
        sRefInicio = sReferencia
            
        'Enquanto existir novos preços
        Do While lErro = AD_SQL_SUCESSO
            
            sAux = Format(UCase(sNomeReduzido), "!@@@@@@@@@@@@@@@@@@@@@@")
            
            sNomeRed = ""
            
            For iPos = 1 To Len(sAux)
            
                sChar = Mid(sAux, iPos, 1)
                
                If Asc(sChar) >= 192 And Asc(sChar) <= 197 Then
                    sChar = "A"
                ElseIf Asc(sChar) >= 200 And Asc(sChar) <= 203 Then
                    sChar = "E"
                ElseIf Asc(sChar) >= 204 And Asc(sChar) <= 207 Then
                    sChar = "I"
                ElseIf Asc(sChar) >= 210 And Asc(sChar) <= 214 Then
                    sChar = "O"
                ElseIf Asc(sChar) >= 217 And Asc(sChar) <= 220 Then
                    sChar = "U"
                ElseIf Asc(sChar) = 199 Then
                    sChar = "C"
                ElseIf Asc(sChar) >= 32 And Asc(sChar) <= 90 Then
                    
                Else
                    sChar = " "
                End If
                
                sNomeRed = sNomeRed & sChar
            
            Next
            
            'Monta o registro para o arquivo
            sRegistro = "P" & Format(sReferencia, "000000") & "*" & sNomeRed & Format(dPreco * 100, "000000") & "*000*0000*" & Chr(10)
                
            Put #1, , sRegistro
                
            lRegProcessados = lRegProcessados + 1
            BarraProgresso.Value = CInt((lRegProcessados / lNumReg) * 100)
                
            'Busca o próximo preço
            lErro = Comando_BuscarProximo(alComando(2))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 112559
            
        Loop
            
        Close #1
        
        lTamanho = 255
        sRetorno = String(lTamanho, 0)
        
        Call GetPrivateProfileString("Filizola", "PORTA", CONSTANTE_ERRO, sPorta, lTamanho, NOME_ARQUIVO_ADM)
        If sPorta = String(lTamanho, 0) Then gError 105760
        
        sRetorno = String(lTamanho, 0)
        
        Call GetPrivateProfileString("Filizola", "BALANCA", CONSTANTE_ERRO, sBalanca, lTamanho, NOME_ARQUIVO_ADM)
        If sBalanca = String(lTamanho, 0) Then gError 105760
        
        dRet = Shell("Carga.exe " & sPorta & " " & sBalanca & " " & sRefInicio & " " & sReferencia, 6)
        If dRet = 0 Then gError 99999
            
    End If
            
        
    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
         Call Comando_Fechar(alComando(iIndice))
    Next
    
    Gera_Arquivo_CargaBalanca = SUCESSO
    
    Exit Function

Erro_Gera_Arquivo_CargaBalanca:

    Gera_Arquivo_CargaBalanca = gErr
    
    Select Case gErr
                
        Case 112547
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
        
        Case 112557 To 112559
            lErro = Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TABELA_PRECO", gErr)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151369)
            
    End Select

    'Fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
         Call Comando_Fechar(alComando(iIndice))
    Next

    Close #1

    Exit Function

End Function

Function Rotina_Carga_ECF_Caixa_Central(sArquivo As String, ByVal objBarraProgresso As Object, Optional ByVal iBatch As Integer = 0) As Long
'Faz a carga dos dados dos caixas. Le o arquivo passado como parametro e carrega o bd do caixa central.

'Pendencias: Colocar a funcao num batch e colocar chamada

Dim sNomeArq As String
Dim sRegistro As String
Dim iRegistro As Integer
Dim colRegistro As New Collection
Dim colRegistroTemp As New Collection
Dim bAchouAbert As Boolean
Dim sSeqAbert As String
Dim sSeqFech As String
Dim bAchou As Boolean
Dim sTipo As String
Dim lTransacao As Long
Dim iPos As Integer
Dim iIndice As Integer
Dim lErro As Long
Dim dtDataInicio As Date
Dim dHoraInicio As Double
Dim lComando As Long
Dim iCaixa As Integer
Dim lSeq As Long
Dim iUnder1 As Integer
Dim iUnder2 As Integer
Dim iUnder3 As Integer
Dim iIndiceReg As Integer
Dim iPonto As Integer
Dim lRegistroAtual As Long
Dim lNumRegistros As Long
Dim iFilialEmpresa As Integer
Dim lVersao As Long
Dim iFreeFile As Integer, bAbriuArq As Boolean

On Error GoTo Erro_Rotina_Carga_ECF_Caixa_Central

    bAbriuArq = False
    
    'pesquisa a existencia do arquivo
    sNomeArq = Dir(sArquivo)

    'se o arquivo não foi encontrado ==> erro
    If Len(sNomeArq) = 0 Then gError 110001
    
    dtDataInicio = Date
    dHoraInicio = CDbl(Time)
    
    iFreeFile = FreeFile
    Open sArquivo For Input Lock Write As #iFreeFile
    bAbriuArq = True

    'Abre a Transação
    lTransacao = Transacao_Abrir()
    If lTransacao = 0 Then gError 110012
        
    bAchouAbert = False
    bAchou = False
    iIndiceReg = 1
    
    If LOF(iFreeFile) = 0 Then gError 133842
    
    lNumRegistros = LOF(iFreeFile) + 1
    
    objBarraProgresso.Value = 0
    
    Do While Not EOF(iFreeFile)

        Line Input #iFreeFile, sRegistro
        
        If EOF(iFreeFile) Then Exit Do
        
        lRegistroAtual = Seek(iFreeFile)
        
        objBarraProgresso.Value = CInt((lRegistroAtual / lNumRegistros) * 100)
        
        If sRegistro <> "" Then
        
            If iIndiceReg = 1 Then
                If sRegistro <> sNomeArq Then gError 112727
                
            ElseIf iIndiceReg = 2 Then
            
                lVersao = StrParaLong(sRegistro)
                
                If lVersao > VERSAO_ECF Then gError 133823
                
                If lVersao = 301 Then
                
                    Close #iFreeFile
    
                    'cancela a transacao
                    Call Transacao_Rollback
                
                    lErro = CF("Rotina_Carga_ECF_Caixa_Central_Old", sArquivo, objBarraProgresso, TRANSMISSAO_ARQ_BATCH)
                    If lErro <> SUCESSO Then gError 210897
                
                    GoTo Label_Rotina_Carga_ECF_Caixa_Central
                End If
                
                
            Else
            
                colRegistro.Add sRegistro
                
                If Mid(sRegistro, Len(sRegistro), 1) = Chr(vbKeyEnd) Then
                 
                    lErro = CF("Registro_ECF_CC", colRegistro, sArquivo, iIndiceReg)
                    If lErro <> SUCESSO Then gError 110002
                    
                    Set colRegistro = New Collection
                    
                End If
                
            End If
        End If
                
        iIndiceReg = iIndiceReg + 1
    
    Loop
                
    If LOF(iFreeFile) <> StrParaLong(sRegistro) Then gError 133843
    
    'inclui o registro de controle
    
    lComando = Comando_Abrir()
    If lComando = 0 Then gError 112728
    
    iUnder1 = InStr(1, sNomeArq, "_")
    
    iUnder2 = InStr(iUnder1 + 1, sNomeArq, "_")
    
    iFilialEmpresa = StrParaInt(Mid(sNomeArq, iUnder1 + 1, iUnder2 - (iUnder1 + 1)))
    
    iUnder3 = InStr(iUnder2 + 1, sNomeArq, "_")
    
    iCaixa = StrParaInt(Mid(sNomeArq, iUnder2 + 1, iUnder3 - (iUnder2 + 1)))
    
    iPonto = InStr(iUnder3 + 1, sNomeArq, ".")
        
    lSeq = StrParaLong(Mid(sNomeArq, iUnder3 + 1, iPonto - (iUnder3 + 1)))
    
    'insere novo registro na tabela de Controle
    lErro = Comando_Executar(lComando, "INSERT INTO ControleLogCaixaCC(FilialEmpresa, Caixa, Sequencial, DataInicio, HoraInicio, DataFim, HoraFim) VALUES (?,?,?,?,?,?,?)", iFilialEmpresa, iCaixa, lSeq, dtDataInicio, dHoraInicio, Date, CDbl(Time))
    If lErro <> AD_SQL_SUCESSO Then gError 112729

    Call Comando_Fechar(lComando)
    
    'confirma a transação
    lErro = Transacao_Commit()
    If lErro <> AD_SQL_SUCESSO Then gError 110013

    'Fecha o Arquivo
    Close #iFreeFile
    bAbriuArq = False

    'avisa que a gravacao foi  concluida
    If iBatch <> TRANSMISSAO_ARQ_BATCH Then Call Rotina_Aviso(vbOKOnly, "AVISO_LEITURA_CONCLUIDA_COM_SUCESSO")

    objBarraProgresso.Value = 0

Label_Rotina_Carga_ECF_Caixa_Central:
    
    Rotina_Carga_ECF_Caixa_Central = SUCESSO

    Exit Function

Erro_Rotina_Carga_ECF_Caixa_Central:

    Rotina_Carga_ECF_Caixa_Central = gErr
    
    objBarraProgresso.Value = 0
    
    Select Case gErr

        Case 110001
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ARQUIVO_INEXISTENTE", gErr, sArquivo)

        Case 110002

        Case 110012
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 110013
            lErro = Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)
        
        Case 112727
            lErro = Rotina_Erro(vbOKOnly, "ERRO_ARQ_INVALIDO", gErr)
            
        Case 112728
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 112729
            lErro = Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_CONTROLELOGCAIXACC", gErr)
            
        Case 133823
            Call Rotina_Erro(vbOKOnly, "ERRO_VERSAO_ARQUIVO_MAIOR_PROGRAMA", gErr, sArquivo, lVersao, VERSAO_ECF)

        Case 133842
            Call Rotina_Erro(vbOKOnly, "ERRO_ARQUIVO_VAZIO", gErr, sArquivo)

        Case 133843
            Call Rotina_Erro(vbOKOnly, "ERRO_NUMERO_REGISTROS_INCONSISTENTE", gErr, sArquivo, LOF(1))

        Case 210897

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151078)

    End Select
    
    'Fecha o Arquivo
    If bAbriuArq Then Close #iFreeFile
    
    Call Comando_Fechar(lComando)
    
    'cancela a transacao
    Call Transacao_Rollback

    Exit Function

End Function


Function Registro_ECF_Sintegra(ByVal colRegistro As Collection, ByVal sArquivo As String, ByVal iRegistro As Integer) As Long
'Trata o registro de comando de geracao do arquivo SINTEGRA para o PAFECF
'iRegistro é o numero do registro.

Dim iPosAtual As Integer
Dim iPosFimAtual As Integer
Dim lErro As Long
Dim dtDataInicio As Date
Dim dtDataFim As Date
Dim sRegistro As String
Dim objMovCx As New ClassMovimentoCaixa

On Error GoTo Erro_Registro_ECF_Sintegra

    iPosFimAtual = InStr(colRegistro.Item(1), Chr(vbKeyControl))

    sRegistro = colRegistro.Item(1)

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iTipo = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dHora = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dtDataMovimento = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iGerente = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iCodOperador = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.lSequencial = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    dtDataInicio = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    dtDataFim = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    lErro = CF("Gerar_SINTEGRA_PAFECF", dtDataInicio, dtDataFim)
    If lErro <> SUCESSO Then gError 210120
    
    Registro_ECF_Sintegra = SUCESSO

    Exit Function

Erro_Registro_ECF_Sintegra:

    Registro_ECF_Sintegra = gErr

    Select Case gErr

        Case 210120
            Resume Next

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 210121)

    End Select

    Exit Function

End Function


Function Registro_ECF_SpedFiscal(ByVal colRegistro As Collection, ByVal sArquivo As String, ByVal iRegistro As Integer) As Long
'Trata o registro de comando de geracao do arquivo SINTEGRA para o PAFECF
'iRegistro é o numero do registro.

Dim iPosAtual As Integer
Dim iPosFimAtual As Integer
Dim lErro As Long
Dim dtDataInicio As Date
Dim dtDataFim As Date
Dim sRegistro As String
Dim objMovCx As New ClassMovimentoCaixa

On Error GoTo Erro_Registro_ECF_SpedFiscal

    iPosFimAtual = InStr(colRegistro.Item(1), Chr(vbKeyControl))

    sRegistro = colRegistro.Item(1)


    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iTipo = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dHora = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dtDataMovimento = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iGerente = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iCodOperador = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.lSequencial = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    dtDataInicio = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    dtDataFim = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    lErro = CF("Gerar_SPEDFISCAL_PAFECF", dtDataInicio, dtDataFim)
    If lErro <> SUCESSO Then gError 210124

    Registro_ECF_SpedFiscal = SUCESSO

    Exit Function

Erro_Registro_ECF_SpedFiscal:

    Registro_ECF_SpedFiscal = gErr

    Select Case gErr

        Case 210124
            Resume Next

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 210125)

    End Select

    Exit Function

End Function

Function MovcxSPED_Movcx(iPosAtual As Integer, iPosFimAtual As Integer, ByVal sRegistro As String, ByVal objMovCx As ClassMovimentoCaixa) As Long
'guarda as infos de movimento de caixa

Dim lErro As Long

On Error GoTo Erro_MovcxSPED_Movcx
 
    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iTipo = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dHora = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dtDataMovimento = CDate(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iGerente = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iCodOperador = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.lSequencial = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iFilialEmpresa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.dValor = CDbl(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iAdmMeioPagto = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iParcelamento = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))

    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.iCaixa = CInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
        
    iPosAtual = iPosFimAtual + 1
    iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeyEscape))
    objMovCx.lNumMovto = CLng(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
    
    MovcxSPED_Movcx = SUCESSO

    Exit Function

Erro_MovcxSPED_Movcx:

    MovcxSPED_Movcx = gErr

    Select Case gErr

        Case Else
            lErro = Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151109)

    End Select

    Exit Function

End Function

Function Insere_ImportMovCaixa(ByVal lNumMovto As Long, ByVal sArquivo As String, ByVal sMsg As String, ByVal iSeq As Integer, ByVal iTipoRegistro As Integer) As Long

Dim lComando As Long
Dim lErro As Long
Dim dtData As Date
Dim dHora As Double

On Error GoTo Erro_Insere_ImportMovCaixa

    lComando = Comando_Abrir()
    If lComando = 0 Then gError 210913
    
    'seleciona registro na tabela de movimentos
    lErro = Comando_Executar(lComando, "SELECT Data, Hora FROM ImportMovCaixa WHERE Arquivo =? AND NumMovto=? ", dtData, dHora, sArquivo, lNumMovto)
    If lErro <> AD_SQL_SUCESSO Then gError 210914

    lErro = Comando_BuscarPrimeiro(lComando)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 210915
    
    If lErro = AD_SQL_SUCESSO Then gError 210916
    
    'seleciona registro na tabela de movimentos
    lErro = Comando_Executar(lComando, "INSERT INTO ImportMovCaixa (NumMovto, Data, Tipo, Msg, Hora, Seq, Arquivo) VALUES (?,?,?,?,?,?,?) ", lNumMovto, Date, iTipoRegistro, sMsg, CDbl(Time), iSeq, sArquivo)
    If lErro <> AD_SQL_SUCESSO Then gError 210917
    
    Call Comando_Fechar(lComando)

    Insere_ImportMovCaixa = SUCESSO

    Exit Function

Erro_Insere_ImportMovCaixa:

    Insere_ImportMovCaixa = gErr

    Select Case gErr

        Case 210913
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 210914, 210915
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_IMPORTMOVCAIXA", gErr)
        
        Case 210916
            
        Case 210917
            Call Rotina_Erro(vbOKOnly, "ERRO_INCLUSAO_IMPORTMOVCAIXA", gErr)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 210918)

    End Select

    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Function MovimentosCaixa_Gravar_MovcxBol_New(ByVal objMovCx As ClassMovimentoCaixa) As Long
'gravar o movimento de caixa
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lErro As Long
Dim alComando(1 To 2) As Long
Dim iIndice As Integer
Dim objCCMovDia As New ClassCCMovDia
Dim objTipoMeioPagtoLojaFilial As New ClassTMPLojaFilial
Dim dValorEspecif As Double
Dim dValorNaoEspecif As Double
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim objLog As New ClassLog
Dim lNumAuto As Long
Dim iTipoMeioPagto As Integer
Dim lSeq As Long

On Error GoTo Erro_MovimentosCaixa_Gravar_MovcxBol_New

'    'se os movimentos forem de cartao de debito ou credito
'    If (objMovCx.iTipo = MOVIMENTOCAIXA_RECEB_CARTAOCREDITO Or _
'       objMovCx.iTipo = MOVIMENTOCAIXA_RECEB_CARTAODEBITO) _
'       And (objMovCx.iTipoCartao = TIPO_TEF Or objMovCx.iTipoCartao = TIPO_POS) Then


    If (objMovCx.iTipo = MOVIMENTOCAIXA_RECEB_CARTAOCREDITO Or _
       objMovCx.iTipo = MOVIMENTOCAIXA_RECEB_CARTAODEBITO Or _
       objMovCx.iTipo = MOVIMENTOCAIXA_RECEB_VALETICKET Or _
       objMovCx.iTipo = MOVIMENTOCAIXA_RECEB_OUTROS) _
       And (objMovCx.iTipoCartao = TIPO_TEF Or objMovCx.iTipoCartao = TIPO_POS) Then
       
        For iIndice = LBound(alComando) To UBound(alComando)
            alComando(iIndice) = Comando_Abrir()
            If alComando(iIndice) = 0 Then gError 214726
        Next
    
    
        objTipoMeioPagtoLojaFilial.dSaldo = objMovCx.dValor
        objTipoMeioPagtoLojaFilial.iFilialEmpresa = objMovCx.iFilialEmpresa
    
        'se for um movimento nao especificado
        If objMovCx.iAdmMeioPagto = 0 Then
    
            'Valor dos boletos não Especificados
            objTipoMeioPagtoLojaFilial.dSaldo = objMovCx.dValor
            objTipoMeioPagtoLojaFilial.iFilialEmpresa = objMovCx.iFilialEmpresa
    
            If objMovCx.iTipo = MOVIMENTOCAIXA_RECEB_CARTAODEBITO Then
                objTipoMeioPagtoLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_CARTAO_DEBITO
            ElseIf objMovCx.iTipo = MOVIMENTOCAIXA_RECEB_CARTAOCREDITO Then
                objTipoMeioPagtoLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_CARTAO_CREDITO
            ElseIf objMovCx.iTipo = MOVIMENTOCAIXA_RECEB_VALETICKET Then
                objTipoMeioPagtoLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_VALE_TICKET
            ElseIf objMovCx.iTipo = MOVIMENTOCAIXA_RECEB_OUTROS Then
                objTipoMeioPagtoLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_OUTROS
            End If
    
            'Função que Serve para atualizar Saldo dos boletos nao especificados
            lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTipoMeioPagtoLojaFilial)
            If lErro <> SUCESSO Then gError 214727
    
    
        ElseIf objMovCx.iTipo = MOVIMENTOCAIXA_RECEB_CARTAODEBITO Or objMovCx.iTipo = MOVIMENTOCAIXA_RECEB_CARTAOCREDITO Then
    
            'cria/atualiza o borderoautomatico de cartao credito/debito para os movimentos de sangria de POS detalhado e TEF
            lErro = BorderoAutomatico_POSTEF_New(objMovCx)
            If lErro <> SUCESSO Then gError 214728
    
        ElseIf objMovCx.iTipo = MOVIMENTOCAIXA_RECEB_VALETICKET Then
    
            'cria/atualiza o borderoautomatico de vale ticket para os movimentos de sangria de POS detalhado e TEF
            lErro = BorderoAutomatico_POSTEF_Vale(objMovCx)
            If lErro <> SUCESSO Then gError 214729
    
        ElseIf objMovCx.iTipo = MOVIMENTOCAIXA_RECEB_OUTROS Then
    
            'cria/atualiza o borderoautomatico de outros para os movimentos de sangria de POS detalhado e TEF
            lErro = BorderoAutomatico_POSTEF_Outros(objMovCx)
            If lErro <> SUCESSO Then gError 214730
    
        End If
    
        For iIndice = LBound(alComando) To UBound(alComando)
            Call Comando_Fechar(alComando(iIndice))
        Next

    End If

    MovimentosCaixa_Gravar_MovcxBol_New = SUCESSO

    Exit Function

Erro_MovimentosCaixa_Gravar_MovcxBol_New:

    MovimentosCaixa_Gravar_MovcxBol_New = gErr

    Select Case gErr

        Case 214726
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 214727 To 214730

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 214731)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function BorderoAutomatico_POSTEF_New(objMovCx As ClassMovimentoCaixa) As Long
'cria ou atualiza o bordero automatico que o sistema gera para cada dia para os movimentos TEF e POS detalhado.

Dim lErro As Long
Dim alComando(1 To 8) As Long
Dim tBorderoBoletoItem As typeBorderoBoletoItem
Dim objBorderoBoleto As New ClassBorderoBoleto
Dim objBorderoBoletoItem As New ClassBorderoBoletoItem
Dim dValor As Double
Dim iIndice As Integer
Dim lNumIntDocLog As Long
Dim iQuantLog As Integer
Dim iRede As Integer
Dim tBorderoBoleto As typeBorderoBoleto

On Error GoTo Erro_BorderoAutomatico_POSTEF_New

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 105457
    Next

    'se se tratar de sangria de tef ou pos especificado ==>
    'gera bordero de boleto automaticamente
    If objMovCx.iTipoCartao = TIPO_TEF Or (objMovCx.iTipoCartao = TIPO_POS And objMovCx.iAdmMeioPagto <> 0) Then
        
        'verifica a rede do movimento de caixa em questao
        lErro = Comando_Executar(alComando(8), "SELECT Rede FROM AdmMeioPagto WHERE FilialEmpresa=? AND Codigo=?", iRede, objMovCx.iFilialEmpresa, objMovCx.iAdmMeioPagto)
        If lErro <> AD_SQL_SUCESSO Then gError 105459

        'busca a rede
        lErro = Comando_BuscarPrimeiro(alComando(8))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 105460
        
        If lErro = AD_SQL_SEM_DADOS Then gError 105461
        
        objBorderoBoleto.iCodigoRede = iRede
        
        
        'inserir o bordero propriamente dito
        lErro = BorderoBoleto_Inserir0(objMovCx, objBorderoBoleto, tBorderoBoletoItem.lNumBordero)
        If lErro <> SUCESSO Then gError 105826
    
        'insere borderoboletoitem, o movimento de caixa associado e gera titulos a receber se estiver operando no caixa central+backoffice
        lErro = BorderoBoletoItem_Insere_New(objMovCx, tBorderoBoletoItem.lNumBordero, objBorderoBoleto, objBorderoBoletoItem, iRede)
        If lErro <> SUCESSO Then gError 105828
        
        
        
'        'verifica se existe um borderoboletoitem com as caracteristicas do movimendo de caixa (mesma data, admmeiopagto, exibetela=1, parcelamento,databackoffice nula)
'        lErro = Comando_Executar(alComando(1), "SELECT BorderoBoleto.NumBordero, BorderoBoleto.DataEnvio, BorderoBoletoItem.NumIntDoc, BorderoBoletoItem.NumMovtoCx, BorderoBoletoItem.NumIntDocCPR " & _
'        "FROM BorderoBoleto, BorderoBoletoItem WHERE BorderoBoleto.FilialEmpresa=? AND BorderoBoleto.FilialEmpresa = BorderoBoletoItem.FilialEmpresa AND " & _
'        " BorderoBoleto.NumBordero = BorderoBoletoItem.NumBordero AND BorderoBoleto.DataEnvio=? AND BorderoBoleto.ExibeTela = 1 AND BorderoBoletoItem.AdmMeioPagto = ? AND BorderoBoletoItem.Parcelamento = ? AND BorderoBoleto.DataBackoffice = ?  AND BorderoBoletoItem.DataPreDatado=?", _
'        tBorderoBoletoItem.lNumBordero, tBorderoBoleto.dtDataEnvio, tBorderoBoletoItem.lNumIntDoc, tBorderoBoletoItem.lNumMovtoCx, tBorderoBoletoItem.lNumIntDocCPR, objMovCx.iFilialEmpresa, objMovCx.dtDataMovimento, objMovCx.iAdmMeioPagto, objMovCx.iParcelamento, DATA_NULA, objMovCx.dtDataPreDatado)
'        If lErro <> AD_SQL_SUCESSO Then gError 105431
'
'        'busca o primeiro
'        lErro = Comando_BuscarPrimeiro(alComando(1))
'        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 105432
'
'        'se encontrou um item de bordero com as caracteristicas desejadas ==> atualiza-o bem como seu movcx associado
'        If lErro = SUCESSO Then
'
'            objBorderoBoletoItem.lNumIntDoc = tBorderoBoletoItem.lNumIntDoc
'            objBorderoBoletoItem.objMovCx.lNumMovto = tBorderoBoletoItem.lNumMovtoCx
'            objBorderoBoleto.dtDataEnvio = tBorderoBoleto.dtDataEnvio
'            objBorderoBoleto.iFilialEmpresa = objMovCx.iFilialEmpresa
'            objBorderoBoleto.lNumBordero = tBorderoBoletoItem.lNumBordero
'
'            'os erros 105821 e 105821 se referem a pagamento dos titulos a receber que iriam ser alterados
'            lErro = BorderoBoletoItem_Atualiza_New(objMovCx, objBorderoBoletoItem, objBorderoBoleto)
'            If lErro <> SUCESSO And lErro <> 105821 And lErro <> 105822 Then gError 105473
'
'            'se nao conseguiu atualizar o bordero pois já tinha titulo baixado ou parcialmente baixado ==> insere um novo bordero
'            If lErro <> SUCESSO Then
'
'                'inserir o bordero propriamente dito
'                lErro = BorderoBoleto_Inserir0(objMovCx, objBorderoBoleto, tBorderoBoletoItem.lNumBordero)
'                If lErro <> SUCESSO Then gError 105826
'
'                'insere borderoboletoitem, o movimento de caixa associado e gera titulos a receber se estiver operando no caixa central+backoffice
'                lErro = BorderoBoletoItem_Insere_New(objMovCx, tBorderoBoletoItem.lNumBordero, objBorderoBoleto, objBorderoBoletoItem, iRede)
'                If lErro <> SUCESSO Then gError 105828
'
'            End If
'
'        Else
'
'
'            'verifica se existe um borderoboleto com as caracteristicas do movimento de caixa (mesma data, exibetela=1, databackoffice nula, mesma rede)
'            lErro = Comando_Executar(alComando(1), "SELECT BorderoBoleto.NumBordero " & _
'            "FROM BorderoBoleto, BorderoBoletoItem, AdmMeioPagto WHERE BorderoBoleto.FilialEmpresa=? AND BorderoBoleto.DataEnvio=? AND BorderoBoleto.ExibeTela = 1 AND BorderoBoleto.DataBackoffice = ? " & _
'            " AND BorderoBoleto.FilialEmpresa = BorderoBoletoItem.FilialEmpresa AND BorderoBoleto.NumBordero = BorderoBoletoItem.NumBordero AND " & _
'            "BorderoBoletoItem.FilialEmpresa = AdmMeioPagto.FilialEmpresa AND BorderoBoletoItem.AdmMeioPagto = AdmMeioPagto.Codigo AND AdmMeioPagto.Rede = ?", _
'            tBorderoBoletoItem.lNumBordero, objMovCx.iFilialEmpresa, objMovCx.dtDataMovimento, DATA_NULA, iRede)
'            If lErro <> AD_SQL_SUCESSO Then gError 105443
'
'            'busca o primeiro
'            lErro = Comando_BuscarPrimeiro(alComando(1))
'            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 105444
'
'            If lErro = AD_SQL_SEM_DADOS Then
'
'                'inserir o bordero propriamente dito
'                lErro = BorderoBoleto_Inserir0(objMovCx, objBorderoBoleto, tBorderoBoletoItem.lNumBordero)
'                If lErro <> SUCESSO Then gError 105825
'
'            Else
'
'                objBorderoBoleto.iFilialEmpresa = objMovCx.iFilialEmpresa
'                objBorderoBoleto.lNumBordero = tBorderoBoletoItem.lNumBordero
'
'                'descobre o lNumIntDocLog associado ao BorderoBoleto que está sendo alterado
'                lErro = Comando_Executar(alComando(7), "SELECT MovimentosCaixa.NumIntDocLog, MovimentosCaixa.QuantLog " & _
'                "FROM BorderoBoleto, BorderoBoletoItem, MovimentosCaixa WHERE BorderoBoleto.FilialEmpresa=? AND BorderoBoleto.NumBordero =? " & _
'                " AND BorderoBoleto.FilialEmpresa = BorderoBoletoItem.FilialEmpresa AND BorderoBoleto.NumBordero = BorderoBoletoItem.NumBordero " & _
'                " AND BorderoBoletoItem.FilialEmpresa = MovimentosCaixa.FilialEmpresa AND BorderoBoletoItem.NumMovtoCx = MovimentosCaixa.NumMovto ", _
'                lNumIntDocLog, iQuantLog, objBorderoBoleto.iFilialEmpresa, objBorderoBoleto.lNumBordero)
'                If lErro <> AD_SQL_SUCESSO Then gError 105795
'
'                'busca o primeiro
'                lErro = Comando_BuscarPrimeiro(alComando(7))
'                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 105796
'
'            End If
'
'            'insere borderoboletoitem, o movimento de caixa associado e gera titulos a receber se estiver operando no caixa central+backoffice
'            lErro = BorderoBoletoItem_Insere_New(objMovCx, tBorderoBoletoItem.lNumBordero, objBorderoBoleto, objBorderoBoletoItem, iRede)
'            If lErro <> SUCESSO Then gError 105828
'
'        End If

        lErro = BorderoAutomatico_POSTEF1(objMovCx, objBorderoBoleto, objBorderoBoletoItem, lNumIntDocLog, iQuantLog)
        If lErro <> AD_SQL_SUCESSO Then gError 105823

    End If

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    BorderoAutomatico_POSTEF_New = SUCESSO
    
    Exit Function

Erro_BorderoAutomatico_POSTEF_New:

    BorderoAutomatico_POSTEF_New = gErr

    Select Case gErr

        Case 105431, 105432, 105443, 105444, 105795, 105796
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BORDEROBOLETO", gErr)

        Case 105433, 105434
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOS_CAIXA1", gErr, tBorderoBoletoItem.lNumMovtoCx)

        Case 105435
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVCAIXA_NAO_CADASTRADA1", gErr, objMovCx.iFilialEmpresa, tBorderoBoletoItem.lNumMovtoCx)

        Case 105436
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_MOVIMENTOSCAIXA2", gErr, objMovCx.iFilialEmpresa, tBorderoBoletoItem.lNumMovtoCx)

        Case 105437
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_MOVCAIXA", gErr, objMovCx.iFilialEmpresa, tBorderoBoletoItem.lNumMovtoCx)

        Case 105438, 105439
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BORDEROBOLETOITEM", gErr, objMovCx.iFilialEmpresa, tBorderoBoletoItem.lNumIntDoc)

        Case 105440
            Call Rotina_Erro(vbOKOnly, "ERRO_BORDEROBOLETOITEM_NAO_CADASTRADO", gErr, objMovCx.iFilialEmpresa, tBorderoBoletoItem.lNumIntDoc)

        Case 105441
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_BORDEROBOLETOITEM", gErr, objMovCx.iFilialEmpresa, tBorderoBoletoItem.lNumIntDoc)

        Case 105442
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_BORDEROBOLETOITEM", gErr, objMovCx.iFilialEmpresa, tBorderoBoletoItem.lNumIntDoc)

        Case 105823, 105825, 105826, 105828

        Case 105457
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 105459, 105460
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ADMMEIOPAGTO2", gErr, objMovCx.iFilialEmpresa, objMovCx.iAdmMeioPagto)

        Case 105461
            Call Rotina_Erro(vbOKOnly, "ERRO_ADMMEIOPAGTO_NAO_CADASTRADO", gErr, objMovCx.iFilialEmpresa, objMovCx.iAdmMeioPagto)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151128)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function BorderoBoletoItem_Atualiza_New(objMovCx As ClassMovimentoCaixa, objBorderoBoletoItem As ClassBorderoBoletoItem, objBorderoBoleto As ClassBorderoBoleto) As Long

Dim lErro As Long
Dim lNumIntDocLog As Long
Dim iQuantLog As Integer
Dim alComando(1 To 6) As Long
Dim iIndice As Integer
Dim dValor As Double
Dim lNumIntDocCPR As Long
Dim iRede As Integer
Dim objRede As New ClassRede
Dim iAdmMeioPagto As Integer
Dim iParcelamento As Integer

On Error GoTo Erro_BorderoBoletoItem_Atualiza_New

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 105474
    Next

    'le o movimento caixa associado
    lErro = Comando_ExecutarPos(alComando(1), "SELECT NumIntDocLog, QuantLog FROM MovimentosCaixa WHERE FilialEmpresa = ? AND NumMovto = ?", 0, _
    lNumIntDocLog, iQuantLog, objMovCx.iFilialEmpresa, objBorderoBoletoItem.objMovCx.lNumMovto)
    If lErro <> AD_SQL_SUCESSO Then gError 105433
    
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 105434
    
    'se não estiver cadastrado ==> erro
    If lErro <> AD_SQL_SUCESSO Then gError 105435
        
    lErro = Comando_LockExclusive(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 105436
        
    'le o bordero boleto item associado
    lErro = Comando_ExecutarPos(alComando(3), "SELECT AdmMeioPagto, Parcelamento, Valor, NumIntDocCPR FROM BorderoBoletoItem WHERE FilialEmpresa = ? AND NumIntDoc = ?", 0, _
    iAdmMeioPagto, iParcelamento, dValor, lNumIntDocCPR, objMovCx.iFilialEmpresa, objBorderoBoletoItem.lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 105438
    
    lErro = Comando_BuscarPrimeiro(alComando(3))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 105439
    
    'se não estiver cadastrado ==> erro
    If lErro <> AD_SQL_SUCESSO Then gError 105440
        
    lErro = Comando_LockExclusive(alComando(3))
    If lErro <> AD_SQL_SUCESSO Then gError 105441
        
    objBorderoBoletoItem.iAdmMeioPagto = iAdmMeioPagto
    objBorderoBoletoItem.iParcelamento = iParcelamento
    objBorderoBoletoItem.dValor = dValor + objMovCx.dValor
    objBorderoBoletoItem.dtDataPreDatado = objMovCx.dtDataPreDatado
        
    'se estiver no Caixa Central em COnjunto com o Backoffice
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL_BACKOFFICE Then

        objBorderoBoletoItem.lNumIntDocCPR = lNumIntDocCPR
        objBorderoBoletoItem.iFilialEmpresa = objMovCx.iFilialEmpresa
    
        'Exclui o titulo associado a borderoboletoItem
        lErro = BorderoBoleto_TituloRec_Exclui(objBorderoBoletoItem)
        If lErro <> SUCESSO And lErro <> 107325 And lErro <> 107326 Then gError 105788

        If lErro = 107325 Then gError 105821
        
        If lErro = 107326 Then gError 105822

        'verifica a rede do movimento de caixa em questao
        lErro = Comando_Executar(alComando(5), "SELECT Rede FROM AdmMeioPagto WHERE FilialEmpresa=? AND Codigo=?", iRede, objMovCx.iFilialEmpresa, objMovCx.iAdmMeioPagto)
        If lErro <> AD_SQL_SUCESSO Then gError 105790

        'busca a rede
        lErro = Comando_BuscarPrimeiro(alComando(5))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 105791
        
        If lErro = AD_SQL_SEM_DADOS Then gError 105792

        objRede.iCodigo = iRede

        'Le a rede associada ao item do bordero
        lErro = CF("Rede_Le", objRede)
        If lErro <> SUCESSO And lErro <> 104244 Then gError 105793
        
        'se a rede nao estiver cadastrada ==> erro
        If lErro <> SUCESSO Then gError 105794

        'gera o titulo a receber associado ao bordero de boleto
        lErro = BorderoBoleto_TituloRec_Gera(objBorderoBoleto, objBorderoBoletoItem, objRede)
        If lErro <> SUCESSO Then gError 105789

        'insere o borderoboletoitem na tabela de borderoboletoitem
        lErro = Comando_Executar(alComando(6), "INSERT INTO BorderoBoletoItemMovCx " & _
                                           "(FilialEmpresa,NumIntDocBordItem,NumIntDocMovcx) " & _
                                           "VALUES (?,?,?) ", _
                                           objMovCx.iFilialEmpresa, objBorderoBoletoItem.lNumIntDoc, objMovCx.lNumMovto)
        If lErro <> AD_SQL_SUCESSO Then gError 214637


    End If

    lErro = Comando_ExecutarPos(alComando(2), "UPDATE MovimentosCaixa SET Valor = Valor + ?", alComando(1), objMovCx.dValor)
    If lErro <> AD_SQL_SUCESSO Then gError 105437
    
    lErro = Comando_ExecutarPos(alComando(4), "UPDATE BorderoBoletoItem SET Valor = Valor + ?, NumINtDocCPR = ?", alComando(3), objMovCx.dValor, objBorderoBoletoItem.lNumIntDocCPR)
    If lErro <> AD_SQL_SUCESSO Then gError 105442

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    BorderoBoletoItem_Atualiza_New = SUCESSO
    
    Exit Function
    
Erro_BorderoBoletoItem_Atualiza_New:

    BorderoBoletoItem_Atualiza_New = gErr

    Select Case gErr

        Case 105474
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 105433, 105434
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOS_CAIXA1", gErr, objBorderoBoletoItem.objMovCx.lNumMovto)

        Case 105435
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVCAIXA_NAO_CADASTRADA1", gErr, objMovCx.iFilialEmpresa, objBorderoBoletoItem.objMovCx.lNumMovto)

        Case 105436
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_MOVIMENTOSCAIXA2", gErr, objMovCx.iFilialEmpresa, objBorderoBoletoItem.objMovCx.lNumMovto)

        Case 105437
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_MOVCAIXA", gErr, objMovCx.iFilialEmpresa, objBorderoBoletoItem.objMovCx.lNumMovto)

        Case 105438, 105439
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BORDEROBOLETOITEM", gErr, objMovCx.iFilialEmpresa, objBorderoBoletoItem.lNumIntDoc)

        Case 105440
            Call Rotina_Erro(vbOKOnly, "ERRO_BORDEROBOLETOITEM_NAO_CADASTRADO", gErr, objMovCx.iFilialEmpresa, objBorderoBoletoItem.lNumIntDoc)

        Case 105441
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_BORDEROBOLETOITEM", gErr, objMovCx.iFilialEmpresa, objBorderoBoletoItem.lNumIntDoc)

        Case 105442
            Call Rotina_Erro(vbOKOnly, "ERRO_ATUALIZACAO_BORDEROBOLETOITEM", gErr, objMovCx.iFilialEmpresa, objBorderoBoletoItem.lNumIntDoc)

        Case 105788, 105789, 105793, 105821, 105822

        Case 105790, 105791
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_ADMMEIOPAGTO2", gErr, objMovCx.iFilialEmpresa, objMovCx.iAdmMeioPagto)

        Case 105792
            Call Rotina_Erro(vbOKOnly, "ERRO_ADMMEIOPAGTO_NAO_CADASTRADO", gErr, objMovCx.iFilialEmpresa, objMovCx.iAdmMeioPagto)

        Case 105794
            Call Rotina_Erro(vbOKOnly, "ERRO_REDE_NAO_ENCONTRADA", gErr, objRede.iCodigo)

        Case 214637
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_BORDEROBOLETOITEMMOVCX", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151132)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function BorderoBoletoItem_Insere_New(objMovCx As ClassMovimentoCaixa, lNumBordero As Long, objBorderoBoleto As ClassBorderoBoleto, objBorderoBoletoItem As ClassBorderoBoletoItem, iRede As Integer) As Long
'insere borderoboletoitem, o movimento de caixa associado e gera titulos a receber se estiver operando no caixa central+backoffice


Dim lErro As Long
Dim lNumMovto As Long
Dim lSeq As Long
Dim lNumAuto As Long
Dim alComando(1 To 3) As Long
Dim objRede As New ClassRede
Dim iIndice As Integer
Dim objAdmMeioPagto As New ClassAdmMeioPagto

On Error GoTo Erro_BorderoBoletoItem_Insere_New

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 105827
    Next


    'gera um número interno para o borderoboletoitem
    lErro = CF("Config_ObterNumInt", "LojaConfig", "NUM_PROX_BORDEROBOLETOITEM", lNumAuto, 1, objMovCx.iFilialEmpresa)
    If lErro <> SUCESSO Then gError 105449

    objBorderoBoletoItem.lNumIntDoc = lNumAuto
    
    'insere o borderoboletoitem na tabela de borderoboletoitem
    lErro = Comando_Executar(alComando(3), "INSERT INTO BorderoBoletoItemMovCx " & _
                                       "(FilialEmpresa,NumIntDocBordItem,NumIntDocMovcx) " & _
                                       "VALUES (?,?,?) ", _
                                       objMovCx.iFilialEmpresa, objBorderoBoletoItem.lNumIntDoc, objMovCx.lNumMovto)
    If lErro <> AD_SQL_SUCESSO Then gError 214636
    

    'pegar o proximo numero de movimento disponivel na tabela.
    lErro = CF("Config_ObterNumInt", "LojaConfig", "NUM_PROX_MOVCAIXACENTRAL", lNumMovto, 1, objMovCx.iFilialEmpresa)
    If lErro <> SUCESSO Then gError 105447

    objAdmMeioPagto.iCodigo = objMovCx.iAdmMeioPagto
    objAdmMeioPagto.iFilialEmpresa = objMovCx.iFilialEmpresa
    
    'Lê a admmeiopagto
    lErro = CF("AdmMeioPagto_Le", objAdmMeioPagto)
    If lErro <> SUCESSO And lErro <> 104017 Then gError 126076

    If objAdmMeioPagto.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_CARTAO_CREDITO Then objMovCx.iTipo = MOVIMENTOCAIXA_BORDERO_BOLETO_CC

    If objAdmMeioPagto.iTipoMeioPagto = TIPOMEIOPAGTOLOJA_CARTAO_DEBITO Then objMovCx.iTipo = MOVIMENTOCAIXA_BORDERO_BOLETO_CD

    objMovCx.lNumMovto = lNumMovto

    lErro = CF("Caixa_Sequencial_EmTrans", CODIGO_CAIXA_CENTRAL, objMovCx.iFilialEmpresa, lSeq)
    If lErro <> SUCESSO Then gError 105829
    
    objMovCx.lSequencial = lSeq

    'executa a inserção na tabela de movimentos de caixa
    lErro = Comando_Executar(alComando(1), "INSERT INTO MovimentosCaixa(FilialEmpresa,NumMovto,Caixa,Sequencial,Tipo,AdmMeioPagto,Parcelamento,TipoCartao,Numero,DataMovimento,Valor,Historico,Favorecido,CupomFiscal,NumRefInterna,MovtoTransf,MovtoEstorno,Gerente,CodConta,Hora, NumIntDocLog, QuantLog, DataPreDatado) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
    objMovCx.iFilialEmpresa, objMovCx.lNumMovto, CODIGO_CAIXA_CENTRAL, objMovCx.lSequencial, objMovCx.iTipo, objMovCx.iAdmMeioPagto, objMovCx.iParcelamento, objMovCx.iTipoCartao, objMovCx.lNumero, objMovCx.dtDataMovimento, objMovCx.dValor, objMovCx.sHistorico, objMovCx.sFavorecido, 0, objMovCx.lNumRefInterna, objMovCx.lMovtoTransf, objMovCx.lMovtoEstorno, objMovCx.iGerente, objMovCx.iCodConta, objMovCx.dHora, 0, 0, objMovCx.dtDataPreDatado)
    If lErro <> SUCESSO Then gError 105448


    objBorderoBoleto.dtDataEnvio = objMovCx.dtDataMovimento
    objBorderoBoletoItem.dValor = objMovCx.dValor
    objBorderoBoletoItem.iFilialEmpresa = objMovCx.iFilialEmpresa
    objBorderoBoletoItem.iAdmMeioPagto = objMovCx.iAdmMeioPagto
    objBorderoBoletoItem.iParcelamento = objMovCx.iParcelamento
    objBorderoBoletoItem.lNumBordero = lNumBordero
    objBorderoBoletoItem.dtDataPreDatado = objMovCx.dtDataPreDatado

    'se estiver em backoffice+caixacentral ==> gera o titulo a receber associado ao bordero
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL_BACKOFFICE Then

        objRede.iCodigo = iRede

        'Le a rede associada ao item do bordero
        lErro = CF("Rede_Le", objRede)
        If lErro <> SUCESSO And lErro <> 104244 Then gError 105786
        
        'se a rede nao estiver cadastrada ==> erro
        If lErro <> SUCESSO Then gError 105785

        'gera o titulo a receber associado ao bordero de boleto
        lErro = BorderoBoleto_TituloRec_Gera(objBorderoBoleto, objBorderoBoletoItem, objRede)
        If lErro <> SUCESSO Then gError 105784

    End If

    'insere o borderoboletoitem na tabela de borderoboletoitem
    lErro = Comando_Executar(alComando(2), "INSERT INTO BorderoBoletoItem " & _
                                       "(FilialEmpresa,NumIntDoc,AdmMeioPagto,Valor,Parcelamento,NumBordero,NumIntDocCPR, NumMovtoCx, DataPreDatado) " & _
                                       "VALUES (?,?,?,?,?,?,?,?,?) ", _
                                       objBorderoBoletoItem.iFilialEmpresa, objBorderoBoletoItem.lNumIntDoc, objBorderoBoletoItem.iAdmMeioPagto, objBorderoBoletoItem.dValor, objBorderoBoletoItem.iParcelamento, objBorderoBoletoItem.lNumBordero, objBorderoBoletoItem.lNumIntDocCPR, lNumMovto, objBorderoBoletoItem.dtDataPreDatado)
    If lErro <> AD_SQL_SUCESSO Then gError 105450

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    BorderoBoletoItem_Insere_New = SUCESSO
    
    Exit Function
    
Erro_BorderoBoletoItem_Insere_New:

    BorderoBoletoItem_Insere_New = gErr
    
    Select Case gErr

        Case 105447, 105449, 105784, 105786, 105829, 126076

        Case 105448
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_MOVCAIXA1", gErr)

        Case 105450
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_BORDEROBOLETOITEM", gErr)

        Case 105785
            Call Rotina_Erro(vbOKOnly, "ERRO_REDE_NAO_ENCONTRADA", gErr, objRede.iCodigo)

        Case 105827
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 214636
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_BORDEROBOLETOITEMMOVCX", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151129)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function BorderoAutomatico_POSTEF_Vale(objMovCx As ClassMovimentoCaixa) As Long
'cria ou atualiza o bordero automatico que o sistema gera para cada dia para os movimentos TEF e POS detalhado de cartao de vale ticket

Dim lErro As Long
Dim lComando As Long
Dim lTransacao As Long
Dim iIndice As Integer
Dim tBorderoValeTicket As typeBorderoValeTicket
Dim objCCMovDia As New ClassCCMovDia
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim objTMPLojaFilial As ClassTMPLojaFilial
Dim objAdmMeioPagto As New ClassAdmMeioPagto
Dim objBorderoValeTicket As New ClassBorderoValeTicket

On Error GoTo Erro_BorderoAutomatico_POSTEF_Vale

    'se se tratar de sangria de tef ou pos especificado ==>
    'gera bordero de boleto automaticamente
    If objMovCx.iTipoCartao = TIPO_TEF Or (objMovCx.iTipoCartao = TIPO_POS And objMovCx.iAdmMeioPagto <> 0) Then


        'abre os comando
        lComando = Comando_Abrir()
        If lComando = 0 Then gError 214676
        
        objAdmMeioPagto.iCodigo = objMovCx.iAdmMeioPagto
        objAdmMeioPagto.iFilialEmpresa = objMovCx.iFilialEmpresa
        
        'Lê em colCodPagtoLoja as Codiçoes de Pagamento relacionados a Admnistradora
        lErro = CF("AdmMeioPagtoCondPagto_Le", objAdmMeioPagto)
        If lErro <> SUCESSO And lErro <> 104086 Then gError 214677
        
        'se nao encontrou ==> erro
        If lErro = 104086 Then gError 214678
        
        'chama a função de inserção
        lErro = BorderoValeTicket_Insere_New(objMovCx, objBorderoValeTicket)
        If lErro <> SUCESSO Then gError 214683
        
'        'verifica se existe um bordero com as caracteristicas do movimendo de caixa (mesma data, admmeiopagto, exibetela=1, parcelamento,databackoffice nula)
'        lErro = Comando_ExecutarPos(lComando, "SELECT FilialEmpresa,NumBordero,AdmMeioPagto,Parcelamento,DataEnvio,DataImpressao,DataBackoffice,Valor,NumIntDocCPR,NumMovtoCx " & _
'                                              "FROM BorderoValeTicket " & _
'                                              "WHERE FilialEmpresa=? AND  " & _
'                                              "DataEnvio=? AND ExibeTela = 1 AND AdmMeioPagto = ? AND Parcelamento = ? AND DataBackoffice = ? ", 0, _
'                                              tBorderoValeTicket.iFilialEmpresa, tBorderoValeTicket.lNumBordero, tBorderoValeTicket.iAdmMeioPagto, tBorderoValeTicket.iParcelamento, tBorderoValeTicket.dtDataEnvio, tBorderoValeTicket.dtDataImpressao, tBorderoValeTicket.dtDataBackoffice, tBorderoValeTicket.dValor, tBorderoValeTicket.lNumIntDocCPR, tBorderoValeTicket.lNumMovtoCx, _
'                                              objMovCx.iFilialEmpresa, objMovCx.dtDataMovimento, objMovCx.iAdmMeioPagto, objMovCx.iParcelamento, DATA_NULA)
'        If lErro <> AD_SQL_SUCESSO Then gError 214679
'
'        lErro = Comando_BuscarPrimeiro(lComando)
'        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 214680
'
'        'se encontrou-> alteração
'        If lErro = AD_SQL_SUCESSO Then
'
'            objBorderoValeTicket.iFilialEmpresa = tBorderoValeTicket.iFilialEmpresa
'            objBorderoValeTicket.lNumBordero = tBorderoValeTicket.lNumBordero
'            objBorderoValeTicket.iAdmMeioPagto = tBorderoValeTicket.iAdmMeioPagto
'            objBorderoValeTicket.iParcelamento = tBorderoValeTicket.iParcelamento
'            objBorderoValeTicket.dtDataEnvio = tBorderoValeTicket.dtDataEnvio
'            objBorderoValeTicket.dtDataImpressao = tBorderoValeTicket.dtDataImpressao
'            objBorderoValeTicket.dtDataBackoffice = tBorderoValeTicket.dtDataBackoffice
'            objBorderoValeTicket.dValor = tBorderoValeTicket.dValor
'            objBorderoValeTicket.lNumIntDocCPR = tBorderoValeTicket.lNumIntDocCPR
'            objBorderoValeTicket.lNumMovtoCx = tBorderoValeTicket.lNumMovtoCx
'
'            'chama a função de alteração
'            lErro = BorderoValeTicket_Altera_New(objMovCx, objBorderoValeTicket)
'            If lErro <> SUCESSO And lErro <> 214647 And lErro <> 214648 Then gError 214681
'
'            'se nao conseguiu atualizar o bordero pois já tinha titulo baixado ou parcialmente baixado ==> insere um novo bordero
'            If lErro <> SUCESSO Then
'                'chama a função de inserção
'                lErro = BorderoValeTicket_Insere_New(objMovCx, objBorderoValeTicket)
'                If lErro <> SUCESSO Then gError 214682
'
'            End If
'
'        'se não encontrou-> inclusão
'        Else
'
'            'chama a função de inserção
'            lErro = BorderoValeTicket_Insere_New(objMovCx, objBorderoValeTicket)
'            If lErro <> SUCESSO Then gError 214683
'
'        End If
        
        objBorderoValeTicket.dValor = objMovCx.dValor
        
        'preenche um ccmovdia
        Call Mover_Dados_BorderoValeTicket_CCMovDia(objBorderoValeTicket, objCCMovDia)
        
        'adiciona no acumulado diário
        lErro = CF("CCMovDia_Grava", objCCMovDia)
        If lErro <> SUCESSO Then gError 214684
        
        'adiciona no acumulado mensal
        lErro = CF("CCMov_Grava", objCCMovDia)
        If lErro <> SUCESSO Then gError 214685
            
'        'preenche um admmeiopagtocondpagto
'        Call Mover_Dados_BorderoValeTicket_AdmMeioPagtoCondPagto1(objBorderoValeTicket, objAdmMeioPagtoCondPagto)
'
'        'altera o seu saldo
'        lErro = CF("AdmMeioPagtoCondPagto_Altera_Saldo", objAdmMeioPagtoCondPagto, FAZ_TESTE_SALDO)
'        If lErro <> SUCESSO Then gError 214686
        
        
        'fecha o comando
        Call Comando_Fechar(lComando)
    
    End If
    
    BorderoAutomatico_POSTEF_Vale = SUCESSO
    
    Exit Function

Erro_BorderoAutomatico_POSTEF_Vale:

    BorderoAutomatico_POSTEF_Vale = gErr
    
    Select Case gErr
    
        Case 214676
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 214677
        
        Case 214678
            Call Rotina_Erro(vbOKOnly, "ERRO_ADMMEIOPAGTOCONDPAGTO_INEXISTENTE", gErr, objBorderoValeTicket.iAdmMeioPagto)
        
        Case 214679, 214680
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BORDEROVALETICKET2", gErr, objMovCx.iFilialEmpresa, 1, objMovCx.dtDataMovimento, objMovCx.iAdmMeioPagto, objMovCx.iParcelamento, DATA_NULA)
            
        Case 214681 To 214686
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 214687)

    End Select

    'fecha os comandos
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Private Function BorderoValeTicket_Altera_New(ByVal objMovCx As ClassMovimentoCaixa, ByVal objBorderoValeTicket As ClassBorderoValeTicket) As Long
'Função que recebe um objborderovaleticket novo, um tborderovaleticket velho e efetua as alterações pertinentes no BD. Deve ser chamada dentro de transação
'é private pq recebe um type como parâmetro.

Dim lErro As Long
Dim tTituloReceber As typeTituloReceber
Dim objTituloReceber As New ClassTituloReceber
Dim objContabil As New ClassContabil
Dim alComando(0 To 4) As Long
Dim lNumMovto As Long
Dim objCCMovDia As New ClassCCMovDia
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim iIndice As Integer
Dim objLog As New ClassLog
Dim tMovimentoCaixa As typeMovimentoCaixa
Dim objMovimentoCaixa As New ClassMovimentoCaixa
Dim dValorOld As Double
Dim tBorderoValeTicket As typeBorderoValeTicket


On Error GoTo Erro_BorderoValeTicket_Altera_New

    'abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 214644
    Next
    
    
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL_BACKOFFICE Then
    
        'seleciona o titulo receber associado
        lErro = Comando_Executar(alComando(0), "SELECT Status, Saldo, Valor " & _
                                               "FROM TitulosRecTodos " & _
                                               "WHERE NumIntDoc=? " & _
                                               "AND FilialEmpresa=? ", _
                                               tTituloReceber.iStatus, tTituloReceber.dSaldo, tTituloReceber.dValor, _
                                               objBorderoValeTicket.lNumIntDocCPR, _
                                               objBorderoValeTicket.iFilialEmpresa)
        If lErro <> AD_SQL_SUCESSO Then gError 214645
        
        'busca o primeiro
        lErro = Comando_BuscarPrimeiro(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 214646
        
        'se não encontrar-> erro
        If lErro = AD_SQL_SEM_DADOS Then gError 214647
        
        'se o título já estiver baixado-> erro
        If tTituloReceber.iStatus = STATUS_BAIXADO Then gError 214648
        
        'se o título estiver parcialmente pago-> erro
        If Abs(tTituloReceber.dSaldo - tTituloReceber.dValor) > 0.0001 Then gError 214649
                
        'preenche os dados para exclusão de um titulo a receber
        objTituloReceber.lNumIntDoc = objBorderoValeTicket.lNumIntDocCPR
        objTituloReceber.sSiglaDocumento = TIPODOC_LOJA
        objTituloReceber.iExclusao = 1
        
        lErro = CF("TituloReceber_Exclui_EmTransacao", objTituloReceber, objContabil)
        If lErro <> SUCESSO Then gError 214650
                
        dValorOld = objBorderoValeTicket.dValor
        
        objBorderoValeTicket.dValor = objBorderoValeTicket.dValor + objMovCx.dValor
                
        'gera um título a receber através do borderô
        lErro = CF("TituloReceber_Gera_BorderoValeTicket", objBorderoValeTicket)
        If lErro <> SUCESSO Then gError 214651
        
        objBorderoValeTicket.dValor = dValorOld
        
    End If
    
    'seleciona o movimento de caixa relacionado ao borderovaleticket
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Tipo, Sequencial, Caixa, NumIntDocLog, QuantLog " & _
                                              "FROM MovimentosCaixa " & _
                                              "WHERE FilialEmpresa=? " & _
                                              "AND NumMovto=?", 0, _
                                              tMovimentoCaixa.iTipo, tMovimentoCaixa.lSequencial, tMovimentoCaixa.iCaixa, tMovimentoCaixa.lNumIntDocLog, tMovimentoCaixa.iQuantLog, _
                                              objBorderoValeTicket.iFilialEmpresa, _
                                              objBorderoValeTicket.lNumMovtoCx)
    If lErro <> AD_SQL_SUCESSO Then gError 214652
    
    'busca o primeiro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 214653
    
    'se não encontrar-> erro
    If lErro = AD_SQL_SEM_DADOS Then gError 214654
    
    'locka o movimento de caixa
    lErro = Comando_LockExclusive(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 214655
        
    'atualiza os dados do movimento de caixa
    lErro = Comando_ExecutarPos(alComando(2), "UPDATE MovimentosCaixa " & _
                                              "SET Valor= Valor + ?, NumIntDocLog = ?, QuantLog = ?", alComando(1), _
                                               objMovCx.dValor, objLog.lNumIntDoc, objLog.iQuantLog)
    If lErro <> AD_SQL_SUCESSO Then gError 214658
    
    tBorderoValeTicket.dValor = objBorderoValeTicket.dValor
    tBorderoValeTicket.dtDataEnvio = objBorderoValeTicket.dtDataEnvio
    tBorderoValeTicket.iAdmMeioPagto = objBorderoValeTicket.iAdmMeioPagto
    tBorderoValeTicket.iFilialEmpresa = objBorderoValeTicket.iFilialEmpresa
    tBorderoValeTicket.iParcelamento = objBorderoValeTicket.iParcelamento
        
'    'preencho um ccmovdia com os dados do borderovaleticket
'    Call Mover_Dados_BorderoValeTicket_CCMovDia1(tBorderoValeTicket, objCCMovDia)
'
'    'subtrai do acumulado diário
'    lErro = CF("CCMovDia_Exclui", objCCMovDia)
'    If lErro <> SUCESSO Then gError 214659
'
'    'subtrai do acumulado mensal
'    lErro = CF("CCMov_Exclui", objCCMovDia)
'    If lErro <> SUCESSO Then gError 214660
'
'    'preenche um admmeiopagtocondpagto
'    Call Mover_Dados_BorderoValeTicket_AdmMeioPagtoCondPagto(tBorderoValeTicket, objAdmMeioPagtoCondPagto)
'
'    'adiciona ao acumulado por parcelamento
'    lErro = CF("AdmMeioPagtoCondPagto_Altera_Saldo", objAdmMeioPagtoCondPagto)
'    If lErro <> SUCESSO Then gError 214661
    
    'verifica se existe um bordero com as caracteristicas do movimendo de caixa (mesma data, admmeiopagto, exibetela=1, parcelamento,databackoffice nula)
    lErro = Comando_ExecutarPos(alComando(4), "SELECT FilialEmpresa FROM BorderoValeTicket WHERE FilialEmpresa=? AND NumBordero = ? ", 0, _
                                          tBorderoValeTicket.iFilialEmpresa, objBorderoValeTicket.iFilialEmpresa, objBorderoValeTicket.lNumBordero)
    If lErro <> AD_SQL_SUCESSO Then gError 214662
    
    lErro = Comando_BuscarPrimeiro(alComando(4))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 214663
    
    'locka o movimento de caixa
    lErro = Comando_LockExclusive(alComando(4))
    If lErro <> AD_SQL_SUCESSO Then gError 214664
    
    'altera os campos do borderovaleticket
    lErro = Comando_ExecutarPos(alComando(3), "UPDATE BorderoValeTicket " & _
                                              "SET Valor= Valor + ?,NumIntDocCPR=?", alComando(4), _
                                              objMovCx.dValor, objBorderoValeTicket.lNumIntDocCPR)
    If lErro <> AD_SQL_SUCESSO Then gError 214665
    
    objBorderoValeTicket.dValor = objBorderoValeTicket.dValor + objMovCx.dValor
    
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    BorderoValeTicket_Altera_New = SUCESSO
    
    Exit Function

Erro_BorderoValeTicket_Altera_New:

    BorderoValeTicket_Altera_New = gErr
    
    Select Case gErr
    
        Case 214644
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 214645, 214646
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TITULOSRECTODOS_BORDEROVT", gErr, tBorderoValeTicket.lNumIntDocCPR, objBorderoValeTicket.iFilialEmpresa, objBorderoValeTicket.lNumBordero)
        
        Case 214647
            Call Rotina_Erro(vbOKOnly, "ERRO_TITULOSRECTODOS_BORDEROVT_NAOENCONTRADO", gErr, tBorderoValeTicket.lNumIntDocCPR, objBorderoValeTicket.iFilialEmpresa, objBorderoValeTicket.lNumBordero)
            
        Case 214648 To 214651, 214656, 214657, 214659 To 214661
        
        Case 214652, 214653
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVTOCAIXA_BORDEROVALETICKET", gErr, objBorderoValeTicket.iFilialEmpresa, objBorderoValeTicket.lNumBordero)
        
        Case 214654
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVTOCAIXA_BORDEROVALETICKET_NAOENCONTRADO", gErr, objBorderoValeTicket.iFilialEmpresa, objBorderoValeTicket.lNumBordero)
            
        Case 214655
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_MOVTOCAIXA_BORDEROVALETICKET", gErr, objBorderoValeTicket.iFilialEmpresa, objBorderoValeTicket.lNumBordero)
            
        Case 214658
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_MOVTOCAIXA_BORDEROVALETICKET", gErr, objBorderoValeTicket.iFilialEmpresa, objBorderoValeTicket.lNumBordero)
        
        Case 214662, 214663
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BORDEROVALETICKET", gErr, objBorderoValeTicket.iFilialEmpresa, objBorderoValeTicket.lNumBordero)
        
        Case 214664
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_BORDEROVALETICKET", gErr, objBorderoValeTicket.iFilialEmpresa, objBorderoValeTicket.lNumBordero)
            
        Case 214665
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_BORDEROVALETICKET", gErr, objBorderoValeTicket.iFilialEmpresa, objBorderoValeTicket.lNumBordero)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 214666)

    End Select
    
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Function BorderoValeTicket_Insere_New(ByVal objMovCx As ClassMovimentoCaixa, ByVal objBorderoValeTicket As ClassBorderoValeTicket) As Long
'função que insere um borderoValeticket e gera o título a receber se for o caso

Dim lErro As Long
Dim objMovimentoCaixa As New ClassMovimentoCaixa
Dim lSequencial As Long
Dim objLog As New ClassLog
Dim lNumMovto As Long
Dim lComando As Long
Dim lNumBordero As Long
Dim alComando(1 To 2) As Long
Dim iIndice As Integer

On Error GoTo Erro_BorderoValeTicket_Insere_New

    'abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 214667
    Next


    'busca o próximo número de borderô automático
    lErro = CF("Config_ObterAutomatico_EmTrans", "LojaConfig", "COD_PROX_BORDEROVALETICKET", "BorderoValeTicket", "NumBordero", lNumBordero)
    If lErro <> SUCESSO Then gError 214668

    objBorderoValeTicket.iFilialEmpresa = objMovCx.iFilialEmpresa
    objBorderoValeTicket.lNumBordero = lNumBordero
    objBorderoValeTicket.iAdmMeioPagto = objMovCx.iAdmMeioPagto
    objBorderoValeTicket.iParcelamento = objMovCx.iParcelamento
    objBorderoValeTicket.dtDataEnvio = objMovCx.dtDataMovimento
    objBorderoValeTicket.iExibeTela = BORDERO_BOLETO_NAO_EXIBE_TELA
    objBorderoValeTicket.dtDataBackoffice = DATA_NULA
    objBorderoValeTicket.dtDataImpressao = DATA_NULA
    objBorderoValeTicket.dValor = objMovCx.dValor


    'insere o borderoboletoitem na tabela de borderoboletoitem
    lErro = Comando_Executar(alComando(1), "INSERT INTO BorderoValeMovCx " & _
                                       "(FilialEmpresa,NumBordero,NumIntDocMovcx) " & _
                                       "VALUES (?,?,?) ", _
                                       objMovCx.iFilialEmpresa, lNumBordero, objMovCx.lNumMovto)
    If lErro <> AD_SQL_SUCESSO Then gError 214733


    'preenche o movimento de caixa
    Call Mover_Dados_BorderoValeTicket_MovCaixa(objBorderoValeTicket, objMovimentoCaixa)
    
    'pegar o proximo numero de movimento disponivel na tabela.
    lErro = CF("Config_ObterNumInt", "LojaConfig", "NUM_PROX_MOVCAIXACENTRAL", lNumMovto, 1, objBorderoValeTicket.iFilialEmpresa)
    If lErro <> SUCESSO Then gError 214669
    
    'se o sequencial ainda estiver zerado
    If objMovimentoCaixa.lSequencial = 0 Then
        
        'cria um
        lErro = CF("Caixa_Sequencial_Automatico", objMovimentoCaixa.iCaixa, objMovimentoCaixa.iFilialEmpresa, lSequencial)
        If lErro <> SUCESSO Then gError 214670
        
        objMovimentoCaixa.lSequencial = lSequencial
    
    End If
        
    'preencher o movimentocaixa com número de movimento novo gerado
    objMovimentoCaixa.lNumMovto = lNumMovto
    
    'executa a inserção na tabela de movimentos de caixa
    lErro = Comando_Executar(alComando(2), "INSERT INTO MovimentosCaixa(FilialEmpresa,NumMovto,Caixa,Sequencial,Tipo,AdmMeioPagto,Parcelamento,TipoCartao,Numero,DataMovimento,Valor,Historico,Favorecido,CupomFiscal,NumRefInterna,MovtoTransf,MovtoEstorno,Gerente,CodConta,Hora, NumIntDocLog, QuantLog) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
    objMovimentoCaixa.iFilialEmpresa, objMovimentoCaixa.lNumMovto, objMovimentoCaixa.iCaixa, objMovimentoCaixa.lSequencial, objMovimentoCaixa.iTipo, objMovimentoCaixa.iAdmMeioPagto, objMovimentoCaixa.iParcelamento, objMovimentoCaixa.iTipoCartao, objMovimentoCaixa.lNumero, objMovimentoCaixa.dtDataMovimento, objMovimentoCaixa.dValor, objMovimentoCaixa.sHistorico, objMovimentoCaixa.sFavorecido, objMovimentoCaixa.lCupomFiscal, objMovimentoCaixa.lNumRefInterna, objMovimentoCaixa.lMovtoTransf, objMovimentoCaixa.lMovtoEstorno, objMovimentoCaixa.iGerente, objMovimentoCaixa.iCodConta, objMovimentoCaixa.dHora, objLog.lNumIntDoc, objLog.iQuantLog)
    If lErro <> SUCESSO Then gError 214672
    
    'se estiver em BO +CC
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL_BACKOFFICE Then
    
        'gera o título a receber associado ao borderô
        lErro = CF("TituloReceber_Gera_BorderoValeTicket", objBorderoValeTicket)
        If lErro <> SUCESSO Then gError 214673
    
    End If
    
    objBorderoValeTicket.lNumMovtoCx = objMovimentoCaixa.lNumMovto
    
    'insere o borderô pp dito
    lErro = CF("BorderoValeTicket_Inserir", objBorderoValeTicket)
    If lErro <> SUCESSO Then gError 214674
    
    BorderoValeTicket_Insere_New = SUCESSO

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

Erro_BorderoValeTicket_Insere_New:

    BorderoValeTicket_Insere_New = gErr
    
    Select Case gErr
    
        Case 214667
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 214668 To 214671, 214673, 214674
    
        Case 214672
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_INSERCAO", gErr, STRING_CAIXA_CENTRAL, objMovimentoCaixa.lSequencial)
    
        Case 214733
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_BORDEROVALEMOVCX", gErr)
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 214675)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function BorderoAutomatico_POSTEF_Outros(objMovCx As ClassMovimentoCaixa) As Long
'cria ou atualiza o bordero automatico que o sistema gera para cada dia para os movimentos TEF e POS detalhado de outros cartoes

Dim lErro As Long
Dim lComando As Long
Dim lTransacao As Long
Dim iIndice As Integer
Dim tBorderoOutros As typeBorderoOutros
Dim objCCMovDia As New ClassCCMovDia
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim objTMPLojaFilial As ClassTMPLojaFilial
Dim objAdmMeioPagto As New ClassAdmMeioPagto
Dim objBorderoOutros As New ClassBorderoOutros

On Error GoTo Erro_BorderoAutomatico_POSTEF_Outros

    'se se tratar de sangria de tef ou pos especificado ==>
    'gera bordero de boleto automaticamente
    If objMovCx.iTipoCartao = TIPO_TEF Or (objMovCx.iTipoCartao = TIPO_POS And objMovCx.iAdmMeioPagto <> 0) Then


        'abre os comando
        lComando = Comando_Abrir()
        If lComando = 0 Then gError 214688
        
        objAdmMeioPagto.iCodigo = objMovCx.iAdmMeioPagto
        objAdmMeioPagto.iFilialEmpresa = objMovCx.iFilialEmpresa
        
        'Lê em colCodPagtoLoja as Codiçoes de Pagamento relacionados a Admnistradora
        lErro = CF("AdmMeioPagtoCondPagto_Le", objAdmMeioPagto)
        If lErro <> SUCESSO And lErro <> 104086 Then gError 214689
        
        'se nao encontrou ==> erro
        If lErro = 104086 Then gError 214690
        
        'chama a função de inserção
        lErro = BorderoOutros_Insere_New(objMovCx, objBorderoOutros)
        If lErro <> SUCESSO Then gError 214695
        
        
'        'verifica se existe um bordero com as caracteristicas do movimendo de caixa (mesma data, admmeiopagto, exibetela=1, parcelamento,databackoffice nula)
'        lErro = Comando_ExecutarPos(lComando, "SELECT FilialEmpresa,NumBordero,AdmMeioPagto,Parcelamento,DataEnvio,DataImpressao,DataBackoffice,Valor,NumIntDocCPR,NumMovtoCx " & _
'                                              "FROM BorderoOutros " & _
'                                              "WHERE FilialEmpresa=? AND  " & _
'                                              "DataEnvio=? AND ExibeTela = 1 AND AdmMeioPagto = ? AND Parcelamento = ? AND DataBackoffice = ? ", 0, _
'                                              tBorderoOutros.iFilialEmpresa, tBorderoOutros.lNumBordero, tBorderoOutros.iAdmMeioPagto, tBorderoOutros.iParcelamento, tBorderoOutros.dtDataEnvio, tBorderoOutros.dtDataImpressao, tBorderoOutros.dtDataBackoffice, tBorderoOutros.dValor, tBorderoOutros.lNumIntDocCPR, tBorderoOutros.lNumMovtoCx, _
'                                              objMovCx.iFilialEmpresa, objMovCx.dtDataMovimento, objMovCx.iAdmMeioPagto, objMovCx.iParcelamento, DATA_NULA)
'        If lErro <> AD_SQL_SUCESSO Then gError 214691
'
'        lErro = Comando_BuscarPrimeiro(lComando)
'        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 214692
'
'        'se encontrou-> alteração
'        If lErro = AD_SQL_SUCESSO Then
'
'            objBorderoOutros.iFilialEmpresa = tBorderoOutros.iFilialEmpresa
'            objBorderoOutros.lNumBordero = tBorderoOutros.lNumBordero
'            objBorderoOutros.iAdmMeioPagto = tBorderoOutros.iAdmMeioPagto
'            objBorderoOutros.iParcelamento = tBorderoOutros.iParcelamento
'            objBorderoOutros.dtDataEnvio = tBorderoOutros.dtDataEnvio
'            objBorderoOutros.dtDataImpressao = tBorderoOutros.dtDataImpressao
'            objBorderoOutros.dtDataBackoffice = tBorderoOutros.dtDataBackoffice
'            objBorderoOutros.dValor = tBorderoOutros.dValor
'            objBorderoOutros.lNumIntDocCPR = tBorderoOutros.lNumIntDocCPR
'            objBorderoOutros.lNumMovtoCx = tBorderoOutros.lNumMovtoCx
'
'            'chama a função de alteração
'            lErro = BorderoOutros_Altera_New(objMovCx, objBorderoOutros)
'            If lErro <> SUCESSO And lErro <> 214704 And lErro <> 214705 Then gError 214693
'
'            'se nao conseguiu atualizar o bordero pois já tinha titulo baixado ou parcialmente baixado ==> insere um novo bordero
'            If lErro <> SUCESSO Then
'                'chama a função de inserção
'                lErro = BorderoOutros_Insere_New(objMovCx, objBorderoOutros)
'                If lErro <> SUCESSO Then gError 214694
'
'            End If
'
'
'        'se não encontrou-> inclusão
'        Else
'
'            'chama a função de inserção
'            lErro = BorderoOutros_Insere_New(objMovCx, objBorderoOutros)
'            If lErro <> SUCESSO Then gError 214695
'
'        End If
        
        objBorderoOutros.dValor = objMovCx.dValor
        
        'preenche um ccmovdia
        Call Mover_Dados_BorderoOutros_CCMovDia(objBorderoOutros, objCCMovDia)
        
        'adiciona no acumulado diário
        lErro = CF("CCMovDia_Grava", objCCMovDia)
        If lErro <> SUCESSO Then gError 214696
        
        'adiciona no acumulado mensal
        lErro = CF("CCMov_Grava", objCCMovDia)
        If lErro <> SUCESSO Then gError 214697
            
'        'preenche um admmeiopagtocondpagto
'        Call Mover_Dados_BorderoOutros_AdmMeioPagtoCondPagto1(objBorderoOutros, objAdmMeioPagtoCondPagto)
'
'        'altera o seu saldo
'        lErro = CF("AdmMeioPagtoCondPagto_Altera_Saldo", objAdmMeioPagtoCondPagto, FAZ_TESTE_SALDO)
'        If lErro <> SUCESSO Then gError 214698
        
        
        'fecha o comando
        Call Comando_Fechar(lComando)
    
    End If
    
    BorderoAutomatico_POSTEF_Outros = SUCESSO
    
    Exit Function

Erro_BorderoAutomatico_POSTEF_Outros:

    BorderoAutomatico_POSTEF_Outros = gErr
    
    Select Case gErr
    
        Case 214688
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 214689
        
        Case 214690
            Call Rotina_Erro(vbOKOnly, "ERRO_ADMMEIOPAGTOCONDPAGTO_INEXISTENTE", gErr, objBorderoOutros.iAdmMeioPagto)
            
        Case 214691, 214692
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BORDEROOUTROS2", gErr, objMovCx.iFilialEmpresa, 1, objMovCx.dtDataMovimento, objMovCx.iAdmMeioPagto, objMovCx.iParcelamento, DATA_NULA)
            
        Case 214693 To 214698
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 214699)

    End Select

    'fecha os comandos
    Call Comando_Fechar(lComando)
    
    Exit Function

End Function

Private Function BorderoOutros_Altera_New(ByVal objMovCx As ClassMovimentoCaixa, ByVal objBorderoOutros As ClassBorderoOutros) As Long

Dim lErro As Long
Dim tTituloReceber As typeTituloReceber
Dim objTituloReceber As New ClassTituloReceber
Dim objContabil As New ClassContabil
Dim alComando(0 To 4) As Long
Dim lNumMovto As Long
Dim objCCMovDia As New ClassCCMovDia
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim iIndice As Integer
Dim objLog As New ClassLog
Dim tMovimentoCaixa As typeMovimentoCaixa
Dim objMovimentoCaixa As New ClassMovimentoCaixa
Dim dValorOld As Double
Dim tBorderoOutros As typeBorderoOutros


On Error GoTo Erro_BorderoOutros_Altera_New

    'abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 214700
    Next
    
    
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL_BACKOFFICE Then
    
        'seleciona o titulo receber associado
        lErro = Comando_Executar(alComando(0), "SELECT Status, Saldo, Valor " & _
                                               "FROM TitulosRecTodos " & _
                                               "WHERE NumIntDoc=? " & _
                                               "AND FilialEmpresa=? ", _
                                               tTituloReceber.iStatus, tTituloReceber.dSaldo, tTituloReceber.dValor, _
                                               objBorderoOutros.lNumIntDocCPR, _
                                               objBorderoOutros.iFilialEmpresa)
        If lErro <> AD_SQL_SUCESSO Then gError 214701
        
        'busca o primeiro
        lErro = Comando_BuscarPrimeiro(alComando(0))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 214702
        
        'se não encontrar-> erro
        If lErro = AD_SQL_SEM_DADOS Then gError 214703
        
        'se o título já estiver baixado-> erro
        If tTituloReceber.iStatus = STATUS_BAIXADO Then gError 214704
        
        'se o título estiver parcialmente pago-> erro
        If Abs(tTituloReceber.dSaldo - tTituloReceber.dValor) > 0.0001 Then gError 214705
                
        'preenche os dados para exclusão de um titulo a receber
        objTituloReceber.lNumIntDoc = objBorderoOutros.lNumIntDocCPR
        objTituloReceber.sSiglaDocumento = TIPODOC_LOJA
        objTituloReceber.iExclusao = 1
        
        lErro = CF("TituloReceber_Exclui_EmTransacao", objTituloReceber, objContabil)
        If lErro <> SUCESSO Then gError 214706
                
        dValorOld = objBorderoOutros.dValor
        
        objBorderoOutros.dValor = objBorderoOutros.dValor + objMovCx.dValor
                
        'gera um título a receber através do borderô
        lErro = CF("TituloReceber_Gera_BorderoOutros", objBorderoOutros)
        If lErro <> SUCESSO Then gError 214707
        
        objBorderoOutros.dValor = dValorOld
        
    End If
    
    'seleciona o movimento de caixa relacionado ao borderoOutros
    lErro = Comando_ExecutarPos(alComando(1), "SELECT Tipo, Sequencial, Caixa, NumIntDocLog, QuantLog " & _
                                              "FROM MovimentosCaixa " & _
                                              "WHERE FilialEmpresa=? " & _
                                              "AND NumMovto=?", 0, _
                                              tMovimentoCaixa.iTipo, tMovimentoCaixa.lSequencial, tMovimentoCaixa.iCaixa, tMovimentoCaixa.lNumIntDocLog, tMovimentoCaixa.iQuantLog, _
                                              objBorderoOutros.iFilialEmpresa, _
                                              objBorderoOutros.lNumMovtoCx)
    If lErro <> AD_SQL_SUCESSO Then gError 214708
    
    'busca o primeiro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 214709
    
    'se não encontrar-> erro
    If lErro = AD_SQL_SEM_DADOS Then gError 214710
    
    'locka o movimento de caixa
    lErro = Comando_LockExclusive(alComando(1))
    If lErro <> AD_SQL_SUCESSO Then gError 214711
        
    'atualiza os dados do movimento de caixa
    lErro = Comando_ExecutarPos(alComando(2), "UPDATE MovimentosCaixa " & _
                                              "SET Valor= Valor + ?, NumIntDocLog = ?, QuantLog = ?", alComando(1), _
                                               objMovCx.dValor, objLog.lNumIntDoc, objLog.iQuantLog)
    If lErro <> AD_SQL_SUCESSO Then gError 214712
    
    tBorderoOutros.dValor = objBorderoOutros.dValor
    tBorderoOutros.dtDataEnvio = objBorderoOutros.dtDataEnvio
    tBorderoOutros.iAdmMeioPagto = objBorderoOutros.iAdmMeioPagto
    tBorderoOutros.iFilialEmpresa = objBorderoOutros.iFilialEmpresa
    tBorderoOutros.iParcelamento = objBorderoOutros.iParcelamento
        
'    'preencho um ccmovdia com os dados do borderoOutros
'    Call Mover_Dados_BorderoOutros_CCMovDia1(tBorderoOutros, objCCMovDia)
'
'    'subtrai do acumulado diário
'    lErro = CF("CCMovDia_Exclui", objCCMovDia)
'    If lErro <> SUCESSO Then gError 214659
'
'    'subtrai do acumulado mensal
'    lErro = CF("CCMov_Exclui", objCCMovDia)
'    If lErro <> SUCESSO Then gError 214660
'
'    'preenche um admmeiopagtocondpagto
'    Call Mover_Dados_BorderoOutros_AdmMeioPagtoCondPagto(tBorderoOutros, objAdmMeioPagtoCondPagto)
'
'    'adiciona ao acumulado por parcelamento
'    lErro = CF("AdmMeioPagtoCondPagto_Altera_Saldo", objAdmMeioPagtoCondPagto)
'    If lErro <> SUCESSO Then gError 214661
    
    'verifica se existe um bordero com as caracteristicas do movimendo de caixa (mesma data, admmeiopagto, exibetela=1, parcelamento,databackoffice nula)
    lErro = Comando_ExecutarPos(alComando(4), "SELECT FilialEmpresa FROM BorderoOutros WHERE FilialEmpresa=? AND NumBordero = ? ", 0, _
                                          tBorderoOutros.iFilialEmpresa, objBorderoOutros.iFilialEmpresa, objBorderoOutros.lNumBordero)
    If lErro <> AD_SQL_SUCESSO Then gError 214713
    
    lErro = Comando_BuscarPrimeiro(alComando(4))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 214714
    
    'locka o movimento de caixa
    lErro = Comando_LockExclusive(alComando(4))
    If lErro <> AD_SQL_SUCESSO Then gError 214715
    
    'altera os campos do borderoOutros
    lErro = Comando_ExecutarPos(alComando(3), "UPDATE BorderoOutros " & _
                                              "SET Valor= Valor + ?,NumIntDocCPR=?", alComando(4), _
                                              objMovCx.dValor, objBorderoOutros.lNumIntDocCPR)
    If lErro <> AD_SQL_SUCESSO Then gError 214716
    
    objBorderoOutros.dValor = objBorderoOutros.dValor + objMovCx.dValor
    
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
    
        Call Comando_Fechar(alComando(iIndice))
    
    Next
    
    BorderoOutros_Altera_New = SUCESSO
    
    Exit Function

Erro_BorderoOutros_Altera_New:

    BorderoOutros_Altera_New = gErr
    
    Select Case gErr
    
        Case 214700
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 214701, 214702
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TITULOSRECTODOS_BORDEROOUTROS", gErr, tBorderoOutros.lNumIntDocCPR, objBorderoOutros.iFilialEmpresa, objBorderoOutros.lNumBordero)
        
        Case 214703
            Call Rotina_Erro(vbOKOnly, "ERRO_TITULOSRECTODOS_BORDEROOUTROS_NAOENCONTRADO", gErr, tBorderoOutros.lNumIntDocCPR, objBorderoOutros.iFilialEmpresa, objBorderoOutros.lNumBordero)
            
        Case 214704 To 214707, 214648 To 214651, 214656, 214657, 214659 To 214661
        
        Case 214708, 21479
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVTOCAIXA_BORDEROOUTROS", gErr, objBorderoOutros.iFilialEmpresa, objBorderoOutros.lNumBordero)
        
        Case 214710
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVTOCAIXA_BORDEROOUTROS_NAOENCONTRADO", gErr, objBorderoOutros.iFilialEmpresa, objBorderoOutros.lNumBordero)
            
        Case 214711
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_MOVTOCAIXA_BORDEROOUTROS", gErr, objBorderoOutros.iFilialEmpresa, objBorderoOutros.lNumBordero)
            
        Case 214712
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_MOVTOCAIXA_BORDEROOUTROS", gErr, objBorderoOutros.iFilialEmpresa, objBorderoOutros.lNumBordero)
        
        Case 214713, 214714
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BORDEROOUTROS", gErr, objBorderoOutros.iFilialEmpresa, objBorderoOutros.lNumBordero)
        
        Case 214715
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_BORDEROOUTROS", gErr, objBorderoOutros.iFilialEmpresa, objBorderoOutros.lNumBordero)
            
        Case 214716
            Call Rotina_Erro(vbOKOnly, "ERRO_ALTERACAO_BORDEROOUTROS", gErr, objBorderoOutros.iFilialEmpresa, objBorderoOutros.lNumBordero)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 214717)

    End Select
    
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Function BorderoOutros_Insere_New(ByVal objMovCx As ClassMovimentoCaixa, ByVal objBorderoOutros As ClassBorderoOutros) As Long
'função que insere um borderoOutros e gera o título a receber se for o caso

Dim lErro As Long
Dim objMovimentoCaixa As New ClassMovimentoCaixa
Dim lSequencial As Long
Dim objLog As New ClassLog
Dim lNumMovto As Long
Dim alComando(1 To 2) As Long
Dim lNumBordero As Long
Dim iIndice As Integer

On Error GoTo Erro_BorderoOutros_Insere_New

    'abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 214718
    Next


    'busca o próximo número de borderô automático
    lErro = CF("Config_ObterAutomatico_EmTrans", "LojaConfig", "COD_PROX_BORDEROOUTROS", "BorderoOutros", "NumBordero", lNumBordero)
    If lErro <> SUCESSO Then gError 214719

    objBorderoOutros.iFilialEmpresa = objMovCx.iFilialEmpresa
    objBorderoOutros.lNumBordero = lNumBordero
    objBorderoOutros.iAdmMeioPagto = objMovCx.iAdmMeioPagto
    objBorderoOutros.iParcelamento = objMovCx.iParcelamento
    objBorderoOutros.dtDataEnvio = objMovCx.dtDataMovimento
    objBorderoOutros.iExibeTela = BORDERO_BOLETO_NAO_EXIBE_TELA
    objBorderoOutros.dtDataBackoffice = DATA_NULA
    objBorderoOutros.dtDataImpressao = DATA_NULA
    objBorderoOutros.dValor = objMovCx.dValor

    'insere o borderoboletoitem na tabela de borderoboletoitem
    lErro = Comando_Executar(alComando(1), "INSERT INTO BorderoOutrosMovCx " & _
                                       "(FilialEmpresa,NumBordero,NumIntDocMovcx) " & _
                                       "VALUES (?,?,?) ", _
                                       objMovCx.iFilialEmpresa, lNumBordero, objMovCx.lNumMovto)
    If lErro <> AD_SQL_SUCESSO Then gError 214734

    'preenche o movimento de caixa
    Call Mover_Dados_BorderoOutros_MovCaixa(objBorderoOutros, objMovimentoCaixa)
    
    'pegar o proximo numero de movimento disponivel na tabela.
    lErro = CF("Config_ObterNumInt", "LojaConfig", "NUM_PROX_MOVCAIXACENTRAL", lNumMovto, 1, objBorderoOutros.iFilialEmpresa)
    If lErro <> SUCESSO Then gError 214720
    
    'se o sequencial ainda estiver zerado
    If objMovimentoCaixa.lSequencial = 0 Then
        
        'cria um
        lErro = CF("Caixa_Sequencial_Automatico", objMovimentoCaixa.iCaixa, objMovimentoCaixa.iFilialEmpresa, lSequencial)
        If lErro <> SUCESSO Then gError 214721
        
        objMovimentoCaixa.lSequencial = lSequencial
    
    End If
        
    'preencher o movimentocaixa com número de movimento novo gerado
    objMovimentoCaixa.lNumMovto = lNumMovto
    
    'executa a inserção na tabela de movimentos de caixa
    lErro = Comando_Executar(alComando(2), "INSERT INTO MovimentosCaixa(FilialEmpresa,NumMovto,Caixa,Sequencial,Tipo,AdmMeioPagto,Parcelamento,TipoCartao,Numero,DataMovimento,Valor,Historico,Favorecido,CupomFiscal,NumRefInterna,MovtoTransf,MovtoEstorno,Gerente,CodConta,Hora, NumIntDocLog, QuantLog) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", _
    objMovimentoCaixa.iFilialEmpresa, objMovimentoCaixa.lNumMovto, objMovimentoCaixa.iCaixa, objMovimentoCaixa.lSequencial, objMovimentoCaixa.iTipo, objMovimentoCaixa.iAdmMeioPagto, objMovimentoCaixa.iParcelamento, objMovimentoCaixa.iTipoCartao, objMovimentoCaixa.lNumero, objMovimentoCaixa.dtDataMovimento, objMovimentoCaixa.dValor, objMovimentoCaixa.sHistorico, objMovimentoCaixa.sFavorecido, objMovimentoCaixa.lCupomFiscal, objMovimentoCaixa.lNumRefInterna, objMovimentoCaixa.lMovtoTransf, objMovimentoCaixa.lMovtoEstorno, objMovimentoCaixa.iGerente, objMovimentoCaixa.iCodConta, objMovimentoCaixa.dHora, objLog.lNumIntDoc, objLog.iQuantLog)
    If lErro <> SUCESSO Then gError 214722
    
    'se estiver em BO +CC
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL_BACKOFFICE Then
    
        'gera o título a receber associado ao borderô
        lErro = CF("TituloReceber_Gera_BorderoOutros", objBorderoOutros)
        If lErro <> SUCESSO Then gError 214723
    
    End If
    
    objBorderoOutros.lNumMovtoCx = objMovimentoCaixa.lNumMovto
    
    'insere o borderô pp dito
    lErro = CF("BorderoOutros_Inserir", objBorderoOutros)
    If lErro <> SUCESSO Then gError 214724
    
    BorderoOutros_Insere_New = SUCESSO

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

Erro_BorderoOutros_Insere_New:

    BorderoOutros_Insere_New = gErr
    
    Select Case gErr
    
        Case 214718
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 214719, 214720, 214721, 214723, 214724
    
        Case 214722
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVIMENTOSCAIXA_INSERCAO", gErr, STRING_CAIXA_CENTRAL, objMovimentoCaixa.lSequencial)
    
        Case 214734
            Call Rotina_Erro(vbOKOnly, "ERRO_INSERCAO_BORDEROOUTROSMOVCX", gErr)
    
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 214725)

    End Select

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Function MovimentosCaixa_Excluir_MovcxBol_New(ByVal objMovCx As ClassMovimentoCaixa) As Long
'excluir o movimento de caixa
'IMPORTANTE: TEM QUE SER CHAMADO DENTRO DE TRANSACAO

Dim lErro As Long
Dim alComando(1 To 2) As Long
Dim iIndice As Integer
Dim objCCMovDia As New ClassCCMovDia
Dim objTipoMeioPagtoLojaFilial As New ClassTMPLojaFilial
Dim dValorEspecif As Double
Dim dValorNaoEspecif As Double
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim objLog As New ClassLog
Dim lNumAuto As Long
Dim iTipoMeioPagto As Integer
Dim lSeq As Long

On Error GoTo Erro_MovimentosCaixa_Excluir_MovcxBol_New


    If (objMovCx.iTipo = MOVIMENTOCAIXA_RECEB_CARTAOCREDITO Or _
       objMovCx.iTipo = MOVIMENTOCAIXA_RECEB_CARTAODEBITO Or _
       objMovCx.iTipo = MOVIMENTOCAIXA_RECEB_VALETICKET Or _
       objMovCx.iTipo = MOVIMENTOCAIXA_RECEB_OUTROS) _
       And (objMovCx.iTipoCartao = TIPO_TEF Or objMovCx.iTipoCartao = TIPO_POS) Then
       
        For iIndice = LBound(alComando) To UBound(alComando)
            alComando(iIndice) = Comando_Abrir()
            If alComando(iIndice) = 0 Then gError 214726
        Next
    
    
        objTipoMeioPagtoLojaFilial.dSaldo = objMovCx.dValor
        objTipoMeioPagtoLojaFilial.iFilialEmpresa = objMovCx.iFilialEmpresa
    
        'se for um movimento nao especificado
        If objMovCx.iAdmMeioPagto = 0 Then
    
            'Valor dos boletos não Especificados
            objTipoMeioPagtoLojaFilial.dSaldo = objMovCx.dValor
            objTipoMeioPagtoLojaFilial.iFilialEmpresa = objMovCx.iFilialEmpresa
    
            If objMovCx.iTipo = MOVIMENTOCAIXA_RECEB_CARTAODEBITO Then
                objTipoMeioPagtoLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_CARTAO_DEBITO
            ElseIf objMovCx.iTipo = MOVIMENTOCAIXA_RECEB_CARTAOCREDITO Then
                objTipoMeioPagtoLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_CARTAO_CREDITO
            ElseIf objMovCx.iTipo = MOVIMENTOCAIXA_RECEB_VALETICKET Then
                objTipoMeioPagtoLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_VALE_TICKET
            ElseIf objMovCx.iTipo = MOVIMENTOCAIXA_RECEB_OUTROS Then
                objTipoMeioPagtoLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_OUTROS
            End If
    
            'Função que Serve para atualizar Saldo dos boletos nao especificados
            lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTipoMeioPagtoLojaFilial)
            If lErro <> SUCESSO Then gError 214727
    
    
        ElseIf objMovCx.iTipo = MOVIMENTOCAIXA_RECEB_CARTAODEBITO Or objMovCx.iTipo = MOVIMENTOCAIXA_RECEB_CARTAOCREDITO Then
    
            'cria/atualiza o borderoautomatico de cartao credito/debito para os movimentos de sangria de POS detalhado e TEF
            lErro = Bordero_POSTEF_New_Exclui(objMovCx)
            If lErro <> SUCESSO Then gError 214728
    
        ElseIf objMovCx.iTipo = MOVIMENTOCAIXA_RECEB_VALETICKET Then
    
            'cria/atualiza o borderoautomatico de vale ticket para os movimentos de sangria de POS detalhado e TEF
            lErro = Bordero_POSTEF_Vale_Exclui(objMovCx)
            If lErro <> SUCESSO Then gError 214729
    
        ElseIf objMovCx.iTipo = MOVIMENTOCAIXA_RECEB_OUTROS Then
    
            'cria/atualiza o borderoautomatico de outros para os movimentos de sangria de POS detalhado e TEF
            lErro = Bordero_POSTEF_Outros_Exclui(objMovCx)
            If lErro <> SUCESSO Then gError 214730
    
        End If
    
        For iIndice = LBound(alComando) To UBound(alComando)
            Call Comando_Fechar(alComando(iIndice))
        Next

    End If

    MovimentosCaixa_Excluir_MovcxBol_New = SUCESSO

    Exit Function

Erro_MovimentosCaixa_Excluir_MovcxBol_New:

    MovimentosCaixa_Excluir_MovcxBol_New = gErr

    Select Case gErr

        Case 214726
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 214727 To 214730

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 214731)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function Bordero_POSTEF_New_Exclui(objMovCx As ClassMovimentoCaixa) As Long
'exclui o bordero automatico associado se existir

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim tBorderoBoletoItem As typeBorderoBoletoItem
Dim objBorderoBoleto As New ClassBorderoBoleto
Dim iIndice As Integer

On Error GoTo Erro_Bordero_POSTEF_New_Exclui

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 214735
    Next

    'se se tratar de sangria de tef ou pos especificado ==>
    'gera bordero de boleto automaticamente
    If objMovCx.iTipoCartao = TIPO_TEF Or (objMovCx.iTipoCartao = TIPO_POS And objMovCx.iAdmMeioPagto <> 0) Then
        
        
        'verifica se existe um borderoboletoitem com as caracteristicas do movimendo de caixa (mesma data, admmeiopagto, exibetela=1, parcelamento,databackoffice nula)
        lErro = Comando_Executar(alComando(1), "SELECT BB.NumBordero " & _
        "FROM BorderoBoletoItemMovCx As BM , BorderoBoletoItem AS BB WHERE BM.FilialEmpresa=? AND BM.NumIntDocMovcx = ? AND BM.NumIntDocBordItem = BB.NumIntDoc AND BB.FilialEmpresa = BM.FilialEmpresa", _
        tBorderoBoletoItem.lNumBordero, objMovCx.iFilialEmpresa, objMovCx.lNumMovto)
        If lErro <> AD_SQL_SUCESSO Then gError 214736

        'busca o primeiro
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 214737


        'se encontrou o bordero com as caracteristicas desejadas ==> exclui
        If lErro = AD_SQL_SUCESSO Then
        
            objBorderoBoleto.iFilialEmpresa = objMovCx.iFilialEmpresa
            objBorderoBoleto.lNumBordero = tBorderoBoletoItem.lNumBordero
        
            lErro = CF("BorderoBoleto_Exclui_EmTrans", objBorderoBoleto)
            If lErro <> SUCESSO Then gError 214738
        
        End If
        
        
    End If

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Bordero_POSTEF_New_Exclui = SUCESSO
    
    Exit Function

Erro_Bordero_POSTEF_New_Exclui:

    Bordero_POSTEF_New_Exclui = gErr

    Select Case gErr

        Case 214735
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 214736, 214737
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BORDEROBOLETOITEMMOVCX", gErr, objMovCx.iFilialEmpresa, objMovCx.lNumMovto)

        Case 214738

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 214739)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Private Function Bordero_POSTEF_Vale_Exclui(objMovCx As ClassMovimentoCaixa) As Long
'exclui o bordero vale ticket automatico associado se existir

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim lNumBordero As Long
Dim objBorderoValeTicket As New ClassBorderoValeTicket
Dim iIndice As Integer

On Error GoTo Erro_Bordero_POSTEF_Vale_Exclui

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 214747
    Next

    'se se tratar de sangria de tef ou pos especificado ==>
    'gera bordero de boleto automaticamente
    If objMovCx.iTipoCartao = TIPO_TEF Or (objMovCx.iTipoCartao = TIPO_POS And objMovCx.iAdmMeioPagto <> 0) Then
        
        
        'verifica se existe um borderovaleticket com as caracteristicas do movimendo de caixa
        lErro = Comando_Executar(alComando(1), "SELECT NumBordero FROM BorderoValeMovCx WHERE FilialEmpresa=? AND NumIntDocMovcx = ?", _
        lNumBordero, objMovCx.iFilialEmpresa, objMovCx.lNumMovto)
        If lErro <> AD_SQL_SUCESSO Then gError 214748

        'busca o primeiro
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 214749


        'se encontrou o bordero com as caracteristicas desejadas ==> exclui
        If lErro = AD_SQL_SUCESSO Then
        
            objBorderoValeTicket.iFilialEmpresa = objMovCx.iFilialEmpresa
            objBorderoValeTicket.lNumBordero = lNumBordero
        
            lErro = CF("BorderoValeTicket_Exclui_EmTrans", objBorderoValeTicket)
            If lErro <> SUCESSO Then gError 214750
        
        
        End If
        
        
    End If

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Bordero_POSTEF_Vale_Exclui = SUCESSO
    
    Exit Function

Erro_Bordero_POSTEF_Vale_Exclui:

    Bordero_POSTEF_Vale_Exclui = gErr

    Select Case gErr

        Case 214747
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 214748, 214749
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BORDEROVALEMOVCX", gErr, objMovCx.iFilialEmpresa, objMovCx.lNumMovto)

        Case 214750

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 214751)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function


Public Function BorderoBoleto_Exclui_EmTrans(ByVal objBorderoBoleto As ClassBorderoBoleto) As Long
'Função que recebe um borderoBoleto com sua filial e número preenchidos e deleta

Dim lErro As Long
Dim alComando(0 To 1) As Long
Dim lTransacao As Long
Dim dtDataBackoffice As Date
Dim objLog As New ClassLog
Dim dtDataEnvio As Date
Dim iIndice As Integer
Dim dValorNCD As Double
Dim dValorNCC As Double
Dim objTMPLojaFilial As New ClassTMPLojaFilial

On Error GoTo Erro_BorderoBoleto_Exclui_EmTrans

    
    'abre o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 107376
    Next
    
    
    'seleciona o borderoboleto
    lErro = Comando_ExecutarPos(alComando(0), "SELECT DataBackOffice,DataEnvio, ValorNCC, ValorNCD " & _
                                              "FROM BorderoBoleto " & _
                                              "WHERE FilialEmpresa = ? " & _
                                              "AND NumBordero = ? ", 0, _
                                              dtDataBackoffice, dtDataEnvio, dValorNCC, dValorNCD, _
                                              objBorderoBoleto.iFilialEmpresa, _
                                              objBorderoBoleto.lNumBordero)
    If lErro <> AD_SQL_SUCESSO Then gError 107379
    
    'busca o primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 107380
    
    'se não encontrar-> erro
    If lErro = AD_SQL_SEM_DADOS Then gError 107381
    
    'locka o registro
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 107384
    
    'se estiver no caixa central
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
        If dtDataBackoffice <> DATA_NULA Then gError 107382
    End If
    
    'preenche a data para base de exclusão do Movimento de Caixa
    objBorderoBoleto.dtDataEnvio = dtDataEnvio
    
    'exclui os itens do borderoboleto
    lErro = CF("BorderoBoletoItens_Exclui", objBorderoBoleto)
    If lErro <> SUCESSO Then gError 107383
    
    'deleta o BorderoBoleto
    lErro = Comando_ExecutarPos(alComando(1), "DELETE FROM BorderoBoleto", alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 107385
    
    'se o valor não especificado for diferente de 0
    If dValorNCC <> 0 Then

        'preenche os dados de um objtmplojafilial
        objTMPLojaFilial.dSaldo = dValorNCC
        objTMPLojaFilial.iFilialEmpresa = objBorderoBoleto.iFilialEmpresa
        objTMPLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_CARTAO_CREDITO

        'altera o saldo na tabela de tipomeiopagtolojafilial
        lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTMPLojaFilial)
        If lErro <> SUCESSO Then gError 214758
        
    End If
        
    'se o valor não especificado for diferente de 0
    If dValorNCD <> 0 Then
        
        'preenche os dados de um objtmplojafilial
        objTMPLojaFilial.dSaldo = dValorNCD
        objTMPLojaFilial.iFilialEmpresa = objBorderoBoleto.iFilialEmpresa
        objTMPLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_CARTAO_DEBITO

        'altera o saldo na tabela de tipomeiopagtolojafilial
        lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTMPLojaFilial)
        If lErro <> SUCESSO Then gError 214759

    End If
    
    
    
    'fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    BorderoBoleto_Exclui_EmTrans = SUCESSO
    
    Exit Function

Erro_BorderoBoleto_Exclui_EmTrans:
    
    BorderoBoleto_Exclui_EmTrans = gErr
    
    Select Case gErr
    
        Case 107376
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 107379, 107380
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BORDEROBOLETO", gErr, objBorderoBoleto.iFilialEmpresa, objBorderoBoleto.lNumBordero)
            
        Case 107381
            Call Rotina_Erro(vbOKOnly, "ERRO_BORDEROBOLETO_NAOENCONTRADO", gErr, objBorderoBoleto.iFilialEmpresa, objBorderoBoleto.lNumBordero)
            
        Case 107382
            Call Rotina_Erro(vbOKOnly, "ERRO_BORDEROBOLETO_BACKOFFICE", gErr, objBorderoBoleto.iFilialEmpresa, objBorderoBoleto.lNumBordero, dtDataBackoffice)
            
        Case 107383, 107386, 214758, 214759
            
        Case 107384
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_BORDEROBOLETO", gErr, objBorderoBoleto.iFilialEmpresa, objBorderoBoleto.lNumBordero)
            
        Case 107385
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_BORDEROBOLETO", gErr, objBorderoBoleto.iFilialEmpresa, objBorderoBoleto.lNumBordero)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150969)

    End Select
    
    'fecha o comando
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function


Public Function BorderoValeTicket_Exclui_EmTrans(ByVal objBorderoValeTicket As ClassBorderoValeTicket) As Long
'Função que recebe um objBorderoValeticket com filialempresa e numbordero preenchidos e o exclui do bd

Dim lTransacao As Long
Dim alComando(0 To 5) As Long
Dim iIndice As Integer
Dim lErro As Long
Dim dSaldo As Long
Dim dValor As Long
Dim iStatus As Integer
Dim lNumMovto As Long
Dim tBorderoValeTicket As typeBorderoValeTicket
Dim objCCMovDia As New ClassCCMovDia
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim objLog As New ClassLog
Dim objTituloReceber As New ClassTituloReceber
Dim objContabil As New ClassContabil
Dim tMovCx As typeMovimentoCaixa
Dim objMovimentoCaixa As New ClassMovimentoCaixa
Dim lNumTitulo As Long
Dim objTMPLojaFilial As New ClassTMPLojaFilial
Dim dValorN As Double

On Error GoTo Erro_BorderoValeTicket_Exclui_EmTrans
    
    'abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 107483
    Next
    
    'busca o bordero no bd
    lErro = Comando_ExecutarPos(alComando(0), "SELECT DataBackoffice,NumIntDocCPR,FilialEmpresa,NumBordero,AdmMeioPagto,Parcelamento,DataEnvio,DataImpressao,Valor, NumMovtoCx, ValorN " & _
                                              "FROM BorderoValeTicket " & _
                                              "WHERE FilialEmpresa=? " & _
                                              "AND NumBordero=? ", 0, _
                                              tBorderoValeTicket.dtDataBackoffice, tBorderoValeTicket.lNumIntDocCPR, tBorderoValeTicket.iFilialEmpresa, tBorderoValeTicket.lNumBordero, tBorderoValeTicket.iAdmMeioPagto, tBorderoValeTicket.iParcelamento, tBorderoValeTicket.dtDataEnvio, tBorderoValeTicket.dtDataImpressao, tBorderoValeTicket.dValor, tBorderoValeTicket.lNumMovtoCx, dValorN, _
                                              objBorderoValeTicket.iFilialEmpresa, _
                                              objBorderoValeTicket.lNumBordero)
    If lErro <> AD_SQL_SUCESSO Then gError 107486
    
    'busca o primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 107487
    
    'se não encontrar-> erro
    If lErro = AD_SQL_SEM_DADOS Then gError 107488
    
    'locka o borderô
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 110077
    
    'se estiver no caixa central e a databackoffice estiver preenchida
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL And tBorderoValeTicket.dtDataBackoffice <> DATA_NULA Then gError 107489
    
    'se estiver operando no Bo ou BO+CC
    If giLocalOperacao = LOCALOPERACAO_BACKOFFICE Or giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL_BACKOFFICE Then
    
        'seleciona o titulo a receber associado
        lErro = Comando_Executar(alComando(1), "SELECT NumTitulo, Saldo, Valor, Status " & _
                                               "FROM TitulosRecTodos " & _
                                               "WHERE FilialEmpresa=? AND NumIntDoc=? ", _
                                               lNumTitulo, dSaldo, dValor, iStatus, _
                                               objBorderoValeTicket.iFilialEmpresa, tBorderoValeTicket.lNumIntDocCPR)
        If lErro <> AD_SQL_SUCESSO Then gError 107490
        
        'busca o primeiro
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 107491
        
        'se não encontrou-> erro
        If lErro = AD_SQL_SEM_DADOS Then gError 107492
        
        'se estiver baixado-> erro
        If iStatus = STATUS_BAIXADO Then gError 107493
        
        'se estiver parcialmente pago-> erro
        If Abs(dValor - dSaldo) > 0.0001 Then gError 107494
        
        'preenche os dados para exclusão do tit a receber
        objTituloReceber.lNumIntDoc = tBorderoValeTicket.lNumIntDocCPR
        objTituloReceber.sSiglaDocumento = TIPODOC_LOJA
        objTituloReceber.iExclusao = 1

        'exclui o Titulo a receber associado
        lErro = CF("TituloReceber_Exclui_EmTransacao", objTituloReceber, objContabil)
        If lErro <> SUCESSO Then gError 107495
    
    End If
    
    'seleciona o movimento de caixa associado
    lErro = Comando_ExecutarPos(alComando(2), "SELECT NumIntDocLog, QuantLog " & _
                                              "FROM MovimentosCaixa " & _
                                              "WHERE FilialEmpresa=? " & _
                                              "AND NumMovto=?", 0, _
                                              tMovCx.lNumIntDocLog, tMovCx.iQuantLog, _
                                              objBorderoValeTicket.iFilialEmpresa, _
                                              tBorderoValeTicket.lNumMovtoCx)
    If lErro <> AD_SQL_SUCESSO Then gError 107496
    
    'busca o primeiro
    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 107497
    
    'se não encontrar-> erro
    If lErro = AD_SQL_SEM_DADOS Then gError 107498
    
    'locka o movimento
    lErro = Comando_LockExclusive(alComando(2))
    If lErro <> AD_SQL_SUCESSO Then gError 107499
    
    'deleta o movimento de caixa
    lErro = Comando_ExecutarPos(alComando(3), "DELETE FROM MovimentosCaixa", alComando(2))
    If lErro <> AD_SQL_SUCESSO Then gError 108000
    
    'preenche um ccmovdia
    Call Mover_Dados_BorderoValeTicket_CCMovDia1(tBorderoValeTicket, objCCMovDia)
    
    'subtrai do acumulado diário
    lErro = CF("CCMovDia_Exclui", objCCMovDia)
    If lErro <> SUCESSO Then gError 108001
    
    'subtrai do acumulado mensal
    lErro = CF("CCMov_Exclui", objCCMovDia)
    If lErro <> SUCESSO Then gError 108002
    
    'preenche um admmeiopagtocondpagto
    Call Mover_Dados_BorderoValeTicket_AdmMeioPagtoCondPagto(tBorderoValeTicket, objAdmMeioPagtoCondPagto)
    
    'adiciona ao saldo do admmeiopagtocondpagto
    lErro = CF("AdmMeioPagtoCondPagto_Altera_Saldo", objAdmMeioPagtoCondPagto)
    If lErro <> SUCESSO Then gError 108003
    
    'verifica se existe um borderovalemovcx
    lErro = Comando_Executar(alComando(5), "DELETE FROM BorderoValeMovCx  WHERE FilialEmpresa=? AND NumBordero = ?", _
    objBorderoValeTicket.iFilialEmpresa, objBorderoValeTicket.lNumBordero)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 214743
    
    'exclui o borderovaleticket
    lErro = Comando_ExecutarPos(alComando(4), "DELETE FROM BorderoValeTicket", alComando(0))
    If lErro <> SUCESSO Then gError 108004
    
    'se estiver operando no caixa central
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
    
        objLog.lNumIntDoc = tMovCx.lNumIntDocLog
        objLog.iQuantLog = tMovCx.iQuantLog
    
        'grava o log
        lErro = CF("Log_Exclui", objLog)
        If lErro <> SUCESSO Then gError 110068
    
    'se estiver operando no backoffice ==> transferir o log para excluir o bordero do backoffice
    ElseIf giLocalOperacao = LOCALOPERACAO_BACKOFFICE Then
    
        'preenche o tipo de operação no log
        objLog.iOperacao = EXCLUSAO_BORDEROVALETICKET
        
        'preenche o log
        Call Mover_Dados_BorderoValeTicket_Log(objBorderoValeTicket, objMovimentoCaixa, objLog)
        
        'grava o log
        lErro = CF("Log_Grava", objLog)
        If lErro <> SUCESSO Then gError 108005

    End If
    
    'se o valor não especificado for diferente de 0
    If dValorN <> 0 Then

        'preenche os dados de um objtmplojafilial
        objTMPLojaFilial.dSaldo = dValorN
        objTMPLojaFilial.iFilialEmpresa = objBorderoValeTicket.iFilialEmpresa
        objTMPLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_VALE_TICKET

        'altera o saldo na tabela de tipomeiopagtolojafilial
        lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTMPLojaFilial)
        If lErro <> SUCESSO Then gError 214760
        
    End If
    
    
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    BorderoValeTicket_Exclui_EmTrans = SUCESSO

    Exit Function

Erro_BorderoValeTicket_Exclui_EmTrans:

    BorderoValeTicket_Exclui_EmTrans = gErr
    
    Select Case gErr
    
        Case 107483
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 107486, 107487
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BORDEROVALETICKET", gErr, objBorderoValeTicket.iFilialEmpresa, objBorderoValeTicket.lNumBordero)
            
        Case 107488
            Call Rotina_Erro(vbOKOnly, "ERRO_BORDEROVALETICKET_NAOENCONTRADO", gErr, objBorderoValeTicket.iFilialEmpresa, objBorderoValeTicket.lNumBordero)
            
        Case 107489
            Call Rotina_Erro(vbOKOnly, "ERRO_BORDEROVALETICKET_BACKOFFICE", gErr, objBorderoValeTicket.iFilialEmpresa, objBorderoValeTicket.lNumBordero, tBorderoValeTicket.dtDataBackoffice)
            
        Case 107490, 107491
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TITULOSRECTODOS_BORDEROVT", gErr, tBorderoValeTicket.lNumIntDocCPR, objBorderoValeTicket.iFilialEmpresa, objBorderoValeTicket.lNumBordero)
        
        Case 107492
            Call Rotina_Erro(vbOKOnly, "ERRO_TITULOSRECTODOS_BORDEROVT_NAOENCONTRADO", gErr, tBorderoValeTicket.lNumIntDocCPR, objBorderoValeTicket.iFilialEmpresa, objBorderoValeTicket.lNumBordero)
            
        Case 107493
            Call Rotina_Erro(vbOKOnly, "ERRO_TITULOSRECTODOS_BORDEROVT_BAIXADO", gErr, lNumTitulo, objBorderoValeTicket.iFilialEmpresa, objBorderoValeTicket.lNumBordero)
            
        Case 107494
            Call Rotina_Erro(vbOKOnly, "ERRO_TITULOSRECTODOS_BORDEROVT_PARCPAGO", gErr, lNumTitulo, objBorderoValeTicket.iFilialEmpresa, objBorderoValeTicket.lNumBordero)
            
        Case 107495
        
        Case 107496, 107497
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVTOCAIXA_BORDEROVALETICKET", gErr, objBorderoValeTicket.iFilialEmpresa, objBorderoValeTicket.lNumBordero)
            
        Case 107498
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVTOCAIXA_BORDEROVALETICKET_NAOENCONTRADO", gErr, objBorderoValeTicket.iFilialEmpresa, objBorderoValeTicket.lNumBordero)
            
        Case 107499
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_MOVTOCAIXA_BORDEROVALETICKET", gErr, objBorderoValeTicket.iFilialEmpresa, objBorderoValeTicket.lNumBordero)
            
        Case 108000
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_MOVTOCAIXA_BORDEROVALETICKET", gErr, objBorderoValeTicket.iFilialEmpresa, objBorderoValeTicket.lNumBordero)
            
        Case 108001 To 108003, 110068, 214760
        
        Case 108004
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_BORDEROVALETICKET", gErr, objBorderoValeTicket.iFilialEmpresa, objBorderoValeTicket.lNumBordero)
            
        Case 108005
        
        Case 110077
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_BORDEROVALETICKET", gErr, objBorderoValeTicket.iFilialEmpresa, objBorderoValeTicket.lNumBordero)
        
        Case 214743
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_BORDEROVALEMOVCX", gErr)
        
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150959)

    End Select
    
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function


Private Function Bordero_POSTEF_Outros_Exclui(objMovCx As ClassMovimentoCaixa) As Long
'exclui o bordero outros automatico associado se existir

Dim lErro As Long
Dim alComando(1 To 1) As Long
Dim lNumBordero As Long
Dim objBorderoOutros As New ClassBorderoOutros
Dim iIndice As Integer

On Error GoTo Erro_Bordero_POSTEF_Outros_Exclui

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 214752
    Next

    'se se tratar de sangria de tef ou pos especificado ==>
    'gera bordero de boleto automaticamente
    If objMovCx.iTipoCartao = TIPO_TEF Or (objMovCx.iTipoCartao = TIPO_POS And objMovCx.iAdmMeioPagto <> 0) Then
        
        
        'verifica se existe um borderooutros com as caracteristicas do movimendo de caixa
        lErro = Comando_Executar(alComando(1), "SELECT NumBordero FROM BorderoOutrosMovCx WHERE FilialEmpresa=? AND NumIntDocMovcx = ?", _
        lNumBordero, objMovCx.iFilialEmpresa, objMovCx.lNumMovto)
        If lErro <> AD_SQL_SUCESSO Then gError 214753

        'busca o primeiro
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 214754


        'se encontrou o bordero com as caracteristicas desejadas ==> exclui
        If lErro = AD_SQL_SUCESSO Then
        
            objBorderoOutros.iFilialEmpresa = objMovCx.iFilialEmpresa
            objBorderoOutros.lNumBordero = lNumBordero
        
            lErro = CF("BorderoOutros_Exclui_EmTrans", objBorderoOutros)
            If lErro <> SUCESSO Then gError 214755
        
        End If
        
    End If

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Bordero_POSTEF_Outros_Exclui = SUCESSO
    
    Exit Function

Erro_Bordero_POSTEF_Outros_Exclui:

    Bordero_POSTEF_Outros_Exclui = gErr

    Select Case gErr

        Case 214752
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 214753, 214754
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BORDEROOUTROSMOVCX", gErr, objMovCx.iFilialEmpresa, objMovCx.lNumMovto)

        Case 214755

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 214756)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    Exit Function

End Function

Public Function BorderoOutros_Exclui_EmTrans(ByVal objBorderoOutros As ClassBorderoOutros) As Long
'Função que recebe um objBorderooutros com filialempresa e numbordero preenchidos e o exclui do bd

Dim lTransacao As Long
Dim alComando(0 To 5) As Long
Dim iIndice As Integer
Dim lErro As Long
Dim dSaldo As Double
Dim dValor As Double
Dim iStatus As Integer
Dim lNumMovto As Long
Dim tBorderoOutros As typeBorderoOutros
Dim objCCMovDia As New ClassCCMovDia
Dim objAdmMeioPagtoCondPagto As New ClassAdmMeioPagtoCondPagto
Dim objLog As New ClassLog
Dim objTituloReceber As New ClassTituloReceber
Dim objContabil As New ClassContabil
Dim tMovCx As typeMovimentoCaixa
Dim objMovimentoCaixa As New ClassMovimentoCaixa
Dim objTMPLojaFilial As New ClassTMPLojaFilial
Dim dValorN As Double

On Error GoTo Erro_BorderoOutros_Exclui_EmTrans
    
    'abre os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 108135
    Next
    
    'busca o bordero no bd
    lErro = Comando_ExecutarPos(alComando(0), "SELECT DataBackoffice,NumIntDocCPR,FilialEmpresa,NumBordero,AdmMeioPagto,Parcelamento,DataEnvio,DataImpressao,Valor, NumMovtoCx, ValorN  " & _
                                              "FROM BorderoOutros " & _
                                              "WHERE FilialEmpresa=? " & _
                                              "AND NumBordero=? ", 0, _
                                              tBorderoOutros.dtDataBackoffice, tBorderoOutros.lNumIntDocCPR, tBorderoOutros.iFilialEmpresa, tBorderoOutros.lNumBordero, tBorderoOutros.iAdmMeioPagto, tBorderoOutros.iParcelamento, tBorderoOutros.dtDataEnvio, tBorderoOutros.dtDataImpressao, tBorderoOutros.dValor, tBorderoOutros.lNumMovtoCx, dValorN, _
                                              objBorderoOutros.iFilialEmpresa, _
                                              objBorderoOutros.lNumBordero)
    If lErro <> AD_SQL_SUCESSO Then gError 108137
    
    'busca o primeiro
    lErro = Comando_BuscarPrimeiro(alComando(0))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 108157
    
    'se não encontrar-> erro
    If lErro = AD_SQL_SEM_DADOS Then gError 108138
    
    'locka o borderô
    lErro = Comando_LockExclusive(alComando(0))
    If lErro <> AD_SQL_SUCESSO Then gError 110092
    
    'se estiver no caixa central e a databackoffice estiver preenchida
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL And tBorderoOutros.dtDataBackoffice <> DATA_NULA Then gError 108139
    
    'se estiver operando no Bo ou BO+CC
    If giLocalOperacao = LOCALOPERACAO_BACKOFFICE Or giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL_BACKOFFICE Then
    
        'seleciona o titulo a receber associado
        lErro = Comando_Executar(alComando(1), "SELECT Saldo, Valor, Status " & _
                                               "FROM TitulosRecTodos " & _
                                               "WHERE FilialEmpresa=? AND NumIntDoc=? ", _
                                               dSaldo, dValor, iStatus, _
                                               objBorderoOutros.iFilialEmpresa, tBorderoOutros.lNumIntDocCPR)
        If lErro <> AD_SQL_SUCESSO Then gError 108140
        
        'busca o primeiro
        lErro = Comando_BuscarPrimeiro(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 108141
        
        'se não encontrou-> erro
        If lErro = AD_SQL_SEM_DADOS Then gError 108142
        
        'se estiver baixado-> erro
        If iStatus = STATUS_BAIXADO Then gError 108143
        
        'se estiver parcialmente pago-> erro
        If Abs(dValor - dSaldo) > 0.0001 Then gError 108144
        
        'preenche os dados para exclusão do tit a receber
        objTituloReceber.lNumIntDoc = tBorderoOutros.lNumIntDocCPR
        objTituloReceber.sSiglaDocumento = TIPODOC_LOJA
        objTituloReceber.iExclusao = 1

        'exclui o Titulo a receber associado
        lErro = CF("TituloReceber_Exclui_EmTransacao", objTituloReceber, objContabil)
        If lErro <> SUCESSO Then gError 108145
    
    End If
    
    'seleciona o movimento de caixa associado
    lErro = Comando_ExecutarPos(alComando(2), "SELECT NumIntDocLog, QuantLog " & _
                                              "FROM MovimentosCaixa " & _
                                              "WHERE FilialEmpresa=? " & _
                                              "AND NumMovto=? ", 0, _
                                              tMovCx.lNumIntDocLog, tMovCx.iQuantLog, _
                                               objBorderoOutros.iFilialEmpresa, tBorderoOutros.lNumMovtoCx)
    If lErro <> AD_SQL_SUCESSO Then gError 108146
    
    'busca o primeiro
    lErro = Comando_BuscarPrimeiro(alComando(2))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 108147
    
    'se não encontrar-> erro
    If lErro = AD_SQL_SEM_DADOS Then gError 108148
    
    'locka o movimento
    lErro = Comando_LockExclusive(alComando(2))
    If lErro <> AD_SQL_SUCESSO Then gError 108149
    
    'deleta o movimento de caixa
    lErro = Comando_ExecutarPos(alComando(3), "DELETE FROM MovimentosCaixa", alComando(2))
    If lErro <> AD_SQL_SUCESSO Then gError 108150
    
    'preenche um ccmovdia
    Call Mover_Dados_BorderoOutros_CCMovDia1(tBorderoOutros, objCCMovDia)
    
    'subtrai do acumulado diário
    lErro = CF("CCMovDia_Exclui", objCCMovDia)
    If lErro <> SUCESSO Then gError 108151
    
    'subtrai do acumulado mensal
    lErro = CF("CCMov_Exclui", objCCMovDia)
    If lErro <> SUCESSO Then gError 108152
    
    'preenche um admmeiopagtocondpagto
    Call Mover_Dados_BorderoOutros_AdmMeioPagtoCondPagto(tBorderoOutros, objAdmMeioPagtoCondPagto)
    
    'adiciona ao saldo do admmeiopagtocondpagto
    lErro = CF("AdmMeioPagtoCondPagto_Altera_Saldo", objAdmMeioPagtoCondPagto)
    If lErro <> SUCESSO Then gError 108153
    
    'verifica se existe um borderovalemovcx
    lErro = Comando_Executar(alComando(5), "DELETE FROM BorderoOutrosMovCx  WHERE FilialEmpresa=? AND NumBordero = ?", _
    objBorderoOutros.iFilialEmpresa, objBorderoOutros.lNumBordero)
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 214757
    
    'exclui o borderooutros
    lErro = Comando_ExecutarPos(alComando(4), "DELETE FROM BorderoOutros", alComando(0))
    If lErro <> SUCESSO Then gError 108154
    
    'se estiver operando no caixa central
    If giLocalOperacao = LOCALOPERACAO_CAIXA_CENTRAL Then
    
        objLog.lNumIntDoc = tMovCx.lNumIntDocLog
        objLog.iQuantLog = tMovCx.iQuantLog
    
        'grava o log
        lErro = CF("Log_Exclui", objLog)
        If lErro <> SUCESSO Then gError 110094
    
    'se estiver operando no backoffice ==> transferir o log para excluir o bordero do backoffice
    ElseIf giLocalOperacao = LOCALOPERACAO_BACKOFFICE Then
    
        'preenche o tipo de operação no log
        objLog.iOperacao = EXCLUSAO_BORDEROOUTROS
        
        'preenche o log
        Call Mover_Dados_BorderoOutros_Log(objBorderoOutros, objMovimentoCaixa, objLog)
        
        'grava o log
        lErro = CF("Log_Grava", objLog)
        If lErro <> SUCESSO Then gError 110095

    End If
    
    
    'se o valor não especificado for diferente de 0
    If dValorN <> 0 Then

        'preenche os dados de um objtmplojafilial
        objTMPLojaFilial.dSaldo = dValorN
        objTMPLojaFilial.iFilialEmpresa = objBorderoOutros.iFilialEmpresa
        objTMPLojaFilial.iTipo = TIPOMEIOPAGTOLOJA_OUTROS

        'altera o saldo na tabela de tipomeiopagtolojafilial
        lErro = CF("TipoMeioPagtoLojaFilial_AlteraSaldo", objTMPLojaFilial)
        If lErro <> SUCESSO Then gError 214761
        
    End If
    
    
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    BorderoOutros_Exclui_EmTrans = SUCESSO

    Exit Function

Erro_BorderoOutros_Exclui_EmTrans:

    BorderoOutros_Exclui_EmTrans = gErr
    
    Select Case gErr
    
        Case 108135
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)
            
        Case 108137, 108157
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_BORDEROOUTROS", gErr, objBorderoOutros.iFilialEmpresa, objBorderoOutros.lNumBordero)
            
        Case 108138
            Call Rotina_Erro(vbOKOnly, "ERRO_BORDEROOUTROS_NAOENCONTRADO", gErr, objBorderoOutros.iFilialEmpresa, objBorderoOutros.lNumBordero)
            
        Case 108139
            Call Rotina_Erro(vbOKOnly, "ERRO_BORDEROOUTROS_BACKOFFICE", gErr, objBorderoOutros.iFilialEmpresa, objBorderoOutros.lNumBordero)
            
        Case 108140, 108141
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_TITULOSRECTODOS_BORDEROVT", gErr, objBorderoOutros.lNumIntDocCPR, objBorderoOutros.iFilialEmpresa, objBorderoOutros.lNumBordero)
        
        Case 108142
            Call Rotina_Erro(vbOKOnly, "ERRO_TITULOSRECTODOS_BORDEROVT_NAOENCONTRADO", gErr, objBorderoOutros.lNumIntDocCPR, objBorderoOutros.iFilialEmpresa, objBorderoOutros.lNumBordero)
            
        Case 108143
            Call Rotina_Erro(vbOKOnly, "ERRO_TITULOSRECTODOS_BORDEROVT_BAIXADO", gErr, objBorderoOutros.lNumIntDocCPR, objBorderoOutros.iFilialEmpresa, objBorderoOutros.lNumBordero)
            
        Case 108144
            Call Rotina_Erro(vbOKOnly, "ERRO_TITULOSRECTODOS_BORDEROVT_PARCPAGO", gErr, objBorderoOutros.lNumIntDocCPR, objBorderoOutros.iFilialEmpresa, objBorderoOutros.lNumBordero)
            
        Case 108145
        
        Case 108146, 108147
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVTOCAIXA_BORDEROOUTROS", gErr, objBorderoOutros.iFilialEmpresa, objBorderoOutros.lNumBordero)
            
        Case 108148
            Call Rotina_Erro(vbOKOnly, "ERRO_MOVTOCAIXA_BORDEROOUTROS_NAOENCONTRADO", gErr, objBorderoOutros.iFilialEmpresa, objBorderoOutros.lNumBordero)
            
        Case 108149
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_MOVTOCAIXA_BORDEROOUTROS", gErr, objBorderoOutros.iFilialEmpresa, objBorderoOutros.lNumBordero)
            
        Case 108150
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_MOVTOCAIXA_BORDEROOUTROS", gErr, objBorderoOutros.iFilialEmpresa, objBorderoOutros.lNumBordero)
            
        Case 108151 To 108153
        
        Case 108154
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_BORDEROOUTROS", gErr, objBorderoOutros.iFilialEmpresa, objBorderoOutros.lNumBordero)
            
        Case 108155, 110094, 110095, 214761
        
        Case 110092
            Call Rotina_Erro(vbOKOnly, "ERRO_LOCK_BORDEROOUTROS", gErr, objBorderoOutros.iFilialEmpresa, objBorderoOutros.lNumBordero)
        
        Case 214757
            Call Rotina_Erro(vbOKOnly, "ERRO_EXCLUSAO_BORDEROOUTROSMOVCX", gErr)
            
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 150947)

    End Select
    
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Public Function LJ_Instalacao_Filial(ByVal iFilialEmpresa As Integer) As Long
'cria registros especificos para a nova filialempresa que não são de lojaconfig

Dim lErro As Long
Dim alComando(0 To 5) As Long
Dim iIndice As Integer

On Error GoTo Erro_LJ_Instalacao_Filial

    'a matriz já vem pré-inicializada
    If iFilialEmpresa <> FILIAL_MATRIZ Then
    
        'abre os comandos
        For iIndice = LBound(alComando) To UBound(alComando)
            alComando(iIndice) = Comando_Abrir()
            If alComando(iIndice) = 0 Then gError 108135
        Next
    
        lErro = Comando_Executar(alComando(0), "INSERT INTO Caixa (Codigo, FilialEmpresa, NomeReduzido, Descricao, Status, DataInicial, ProxSeqMov, Teclado, Ativo, SoOrcamento) VALUES (?,?,?,?,?,?,?,?,?,?)", _
            CODIGO_CAIXA_CENTRAL, iFilialEmpresa, "Caixa Central " & CStr(iFilialEmpresa), "Caixa Central " & CStr(iFilialEmpresa), 0, DATA_NULA, 1, 0, 1, 0)
        If lErro <> AD_SQL_SUCESSO Then gError 201574
    
        lErro = Comando_Executar(alComando(1), "INSERT INTO AdmMeioPagto (Codigo,FilialEmpresa,Nome,Rede,TaxaVista,TaxaParcelado,TipoMeioPagto,DefasagemPagtoVista,ContaCorrenteInterna,GeraTituloRec,Endereco,CodBanco,Agencia,Lote,Ativo,DataLog,ProxCodParcelamento) SELECT Codigo," & CStr(iFilialEmpresa) & ",Nome,Rede,TaxaVista,TaxaParcelado,TipoMeioPagto,DefasagemPagtoVista,ContaCorrenteInterna,GeraTituloRec,Endereco,CodBanco,Agencia,Lote,Ativo,DataLog,ProxCodParcelamento FROM AdmMeioPagto WHERE FilialEmpresa = 1 AND Codigo <= 5")
        If lErro <> AD_SQL_SUCESSO Then gError 201575
        
        lErro = Comando_Executar(alComando(2), "INSERT INTO AdmMeioPagtoCondPagto (AdmMeioPagto,FilialEmpresa,Parcelamento,NomeParcelamento,NumParcelas,ParcelasRecebto,Taxa,ValorMinimo,Desconto,JurosParcelamento,Juros,Saldo,Ativo,DataLog,PreDatado) SELECT AdmMeioPagto," & CStr(iFilialEmpresa) & ",Parcelamento,NomeParcelamento,NumParcelas,ParcelasRecebto,Taxa,ValorMinimo,Desconto,JurosParcelamento,Juros,0,Ativo,DataLog,PreDatado FROM AdmMeioPagtoCondPagto WHERE AdmMeioPagto <= 5 AND FilialEmpresa = 1")
        If lErro <> AD_SQL_SUCESSO Then gError 201576
    
        lErro = Comando_Executar(alComando(3), "INSERT INTO AdmMeioPagtoParcelas (AdmMeioPagto,FilialEmpresa,Parcelamento,Parcela,PercRecebimento,IntervaloRecebto) SELECT AdmMeioPagto," & CStr(iFilialEmpresa) & ",Parcelamento,Parcela,PercRecebimento,IntervaloRecebto FROM AdmMeioPagtoParcelas WHERE AdmMeioPagto <= 5 AND FilialEmpresa = 1")
        If lErro <> AD_SQL_SUCESSO Then gError 201577
    
        'fecha os comandos
        For iIndice = LBound(alComando) To UBound(alComando)
            Call Comando_Fechar(alComando(iIndice))
        Next
    
    End If
    
    LJ_Instalacao_Filial = SUCESSO
    
    Exit Function
    
Erro_LJ_Instalacao_Filial:

    LJ_Instalacao_Filial = gErr

    Select Case gErr

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 201573)

    End Select
    
    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function

Function CupomFiscal_Reprocessa() As Long
'Lê os cupons errados e acerta a movimentação

Dim lErro As Long
Dim lTransacao As Long
Dim alComando(0 To 6) As Long
Dim iIndice As Integer
Dim objLojaConfig As New ClassLojaConfig
Dim iFilialEmpresa As Integer, lNumIntDoc As Long, dtDataEmissao As Date, iCaixa As Integer
Dim dValorTotal As Double, dHoraEmissao As Double, lNumMovtoArq As Long, sArquivo As String
Dim objMovimentoCaixa As ClassMovimentoCaixa

Dim iPosAtual As Integer
Dim iPosFimAtual As Integer
Dim objVenda As ClassVenda
Dim sRegistro As String
Dim iRegistroCol As Integer
Dim colRegistro As Collection

Dim sMsg As String, iSeq As Integer

On Error GoTo Erro_CupomFiscal_Reprocessa

    objLojaConfig.sCodigo = "REPROCESSA_CUPONS_LOGIN"
    objLojaConfig.iFilialEmpresa = EMPRESA_TODA

    lErro = CF("LojaConfig_Le1", objLojaConfig)
    If lErro <> SUCESSO And lErro <> 126361 Then gError ERRO_SEM_MENSAGEM
    
    If StrParaInt(objLojaConfig.sConteudo) <> DESMARCADO Then

        'Inicia a Transacao
        lTransacao = Transacao_Abrir()
        If lTransacao = 0 Then gError 216200
        
        'abre os comandos
        For iIndice = LBound(alComando) To UBound(alComando)
            alComando(iIndice) = Comando_Abrir()
            If alComando(iIndice) = 0 Then gError 216201
        Next
            
        If StrParaInt(objLojaConfig.sConteudo) = 1 Then
            
            'Faz o Update de status dos cupons tipo venda sem nota que estão canceladas de forma errada (quando na verdade o orçamento que deveria estar cancelado e não a venda)
            lErro = Comando_Executar(alComando(0), "UPDATE CupomFiscal SET Status = 2 WHERE Tipo = 2 AND Status = 7 AND EXISTS (SELECT C.NumOrcamento FROM CupomFiscal AS C WHERE C.Tipo = 3 AND C.Status = 0 AND C.NumOrcamento = CupomFiscal.NumOrcamento AND C.FilialEmpresa = CupomFiscal.FilialEmpresa)")
            If lErro <> AD_SQL_SUCESSO Then gError 216202
            
            lErro = Comando_Executar(alComando(6), "UPDATE ItensCupomFiscal SET Status = 2 WHERE NumIntCupom IN (SELECT NumIntDoc FROM CupomFiscal WHERE Status = 2) AND Status = 7")
            If lErro <> AD_SQL_SUCESSO Then gError 216202
            
            'Le os cupons para acertar a data/hora
            lErro = Comando_Executar(alComando(3), "SELECT NumIntDoc, DataEmissao, HoraEmissao FROM CupomFiscal ORDER BY NumIntDoc ", lNumIntDoc, dtDataEmissao, dHoraEmissao)
            If lErro <> AD_SQL_SUCESSO Then gError 216203
            
            'busca o primeiro
            lErro = Comando_BuscarPrimeiro(alComando(3))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 216204
    
            Do While lErro <> AD_SQL_SEM_DADOS
            
                lErro = Comando_Executar(alComando(4), "UPDATE MovimentosCaixa SET DataMovimento = ?, Hora = ? WHERE CupomFiscal = ?", dtDataEmissao, dHoraEmissao, lNumIntDoc)
                If lErro <> AD_SQL_SUCESSO Then gError 216202
            
                lErro = Comando_BuscarProximo(alComando(3))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 216205
            
            Loop
            
            sArquivo = String(STRING_MAXIMO, 0)
            
            'Le os cupons que ficaram sem o movimento de caixa
            lErro = Comando_Executar(alComando(2), "SELECT FilialEmpresa, NumIntDoc, DataEmissao, Caixa, ValorTotal, HoraEmissao, NumMovtoArq, Arquivo FROM CupomFiscal WHERE Status = 2 AND NumIntDoc NOT IN (SELECT CupomFiscal FROM MovimentosCaixa ) ", iFilialEmpresa, lNumIntDoc, dtDataEmissao, iCaixa, dValorTotal, dHoraEmissao, lNumMovtoArq, sArquivo)
            If lErro <> AD_SQL_SUCESSO Then gError 216203
            
            'busca o primeiro
            lErro = Comando_BuscarPrimeiro(alComando(2))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 216204
    
            Do While lErro <> AD_SQL_SEM_DADOS
            
    '            Set objMovimentoCaixa = New ClassMovimentoCaixa
    '
    '            objMovimentoCaixa.dHora = dHoraEmissao
    '            objMovimentoCaixa.dValor = dValorTotal
    '            objMovimentoCaixa.iAdmMeioPagto = 1
    '            objMovimentoCaixa.iCaixa = iCaixa
    '            objMovimentoCaixa.iCodOperador = 1
    '            objMovimentoCaixa.iFilialEmpresa = iFilialEmpresa
    '            objMovimentoCaixa.iTipo = MOVIMENTOCAIXA_RECEB_DINHEIRO
    '            objMovimentoCaixa.lCupomFiscal = lNumIntDoc
    '            objMovimentoCaixa.sArquivo = sArquivo
    '            objMovimentoCaixa.dtDataMovimento = dtDataEmissao
    '            objMovimentoCaixa.lNumMovtoArq = lNumMovtoArq
    '            objMovimentoCaixa.dtDataPreDatado = DATA_NULA
    '
    '            lErro = MovimentosCaixa_Inserir(objMovimentoCaixa)
    '            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
    
                Set colRegistro = New Collection
                
                sMsg = String(STRING_MOVIMENTOCAIXA_MSG, 0)
                
                'Le os registros que foram processados para esse cupom
                lErro = Comando_Executar(alComando(5), "SELECT Msg, Seq FROM ImportMovcaixa WHERE Arquivo = ? AND NumMovto >= ? ORDER BY NumMovto", sMsg, iSeq, sArquivo, lNumMovtoArq)
                If lErro <> AD_SQL_SUCESSO Then gError 216203
                
                'busca o primeiro
                lErro = Comando_BuscarPrimeiro(alComando(5))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 216204
                
                Do While lErro <> AD_SQL_SEM_DADOS
                
                    If iSeq <= colRegistro.Count Then Exit Do
                    
                    colRegistro.Add sMsg
                
                    lErro = Comando_BuscarProximo(alComando(5))
                    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 216204
                
                Loop
    
                Set objVenda = New ClassVenda
    
                sRegistro = colRegistro(1)
                   
                iPosAtual = InStr(sRegistro, Chr(vbKeyControl))
                iPosAtual = iPosAtual + 1
                iPosFimAtual = InStr(iPosAtual, sRegistro, Chr(vbKeySeparator))
            
                objVenda.iTipo = StrParaInt(Mid(sRegistro, iPosAtual, iPosFimAtual - iPosAtual))
                objVenda.objCupomFiscal.iTipo = objVenda.iTipo
                
                iRegistroCol = 1
               
                'guarda as infos de carne se houverem
                lErro = CF("Vendas_Carne", iPosAtual, iPosFimAtual, colRegistro, iRegistroCol, objVenda.objCarne)
                If lErro <> SUCESSO Then gError 110006
            
                objVenda.objCupomFiscal.iTipo = objVenda.iTipo
            
                'guarda as infos de cupom
                lErro = CF("Vendas_Cupom", iPosAtual, iPosFimAtual, colRegistro, iRegistroCol, objVenda.objCupomFiscal)
                If lErro <> SUCESSO Then gError 110007
            
                'guarda as infos de movimento de caixa
                lErro = CF("Vendas_Movcx", iPosAtual, iPosFimAtual, colRegistro, iRegistroCol, objVenda.colMovimentosCaixa)
                If lErro <> SUCESSO Then gError 110008
                
                'guarda as infos de cheque se houverem
                lErro = CF("Vendas_Cheque", iPosAtual, iPosFimAtual, colRegistro, iRegistroCol, objVenda.colCheques)
                If lErro <> SUCESSO Then gError 110009
            
                'guarda as infos de troca se houverem
                lErro = CF("Vendas_Troca", iPosAtual, iPosFimAtual, colRegistro, iRegistroCol, objVenda.colTroca)
                If lErro <> SUCESSO Then gError 110010
                
                For Each objMovimentoCaixa In objVenda.colMovimentosCaixa
                
                    objMovimentoCaixa.dHora = dHoraEmissao
                    objMovimentoCaixa.dtDataMovimento = dtDataEmissao
                    objMovimentoCaixa.lCupomFiscal = lNumIntDoc
                    objMovimentoCaixa.iCaixa = iCaixa
                
                    lErro = MovimentosCaixa_Inserir(objMovimentoCaixa)
                    If lErro <> SUCESSO Then
                        gError ERRO_SEM_MENSAGEM
                    End If
                    
                Next
            
                lErro = Comando_BuscarProximo(alComando(2))
                If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 216205
            
            Loop
            
        ElseIf StrParaInt(objLojaConfig.sConteudo) = 2 Then
        
            lErro = CupomFiscal_Reprocessa_MovEst
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
            
        ElseIf StrParaInt(objLojaConfig.sConteudo) = 3 Then
            
            lErro = CupomFiscal_Reprocessa_Comissao
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM

        End If

        'Marca que não é necessário reprocessar de novo
        lErro = Comando_Executar(alComando(1), "UPDATE LojaConfig SET Conteudo = '0' WHERE Codigo = 'REPROCESSA_CUPONS_LOGIN' AND FilialEmpresa = 0")
        If lErro <> AD_SQL_SUCESSO Then gError 216206
    
        'fecha os comandos
        For iIndice = LBound(alComando) To UBound(alComando)
            Call Comando_Fechar(alComando(iIndice))
        Next
        
        'Confirma a transação
        lErro = Transacao_Commit()
        If lErro <> AD_SQL_SUCESSO Then gError 216207
        
    End If

    CupomFiscal_Reprocessa = SUCESSO

    Exit Function

Erro_CupomFiscal_Reprocessa:

    CupomFiscal_Reprocessa = gErr

    Select Case gErr
    
        Case ERRO_SEM_MENSAGEM

       Case 216200
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_TRANSACAO", gErr)

        Case 216201
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case 216202 To 216206
            Call Rotina_Erro(vbOKOnly, "ERRO_LEITURA_MOVIMENTOS_CAIXA", gErr)

        Case 216207
            Call Rotina_Erro(vbOKOnly, "ERRO_COMMIT", gErr)

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 216208)

    End Select

    'fecha os comandos
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Call Transacao_Rollback

    Exit Function

End Function

Private Function Verifica_Nome_Arquivo2(ByVal sNome As String, ByRef iFilialEmpresa As Integer) As Long

Dim lErro As Long
Dim iUnder1 As Integer
Dim iUnder2 As Integer
Dim lEmpresa As Long

On Error GoTo Erro_Verifica_Nome_Arquivo2
    
    iUnder1 = InStr(1, sNome, "_")
    If iUnder1 = 0 Then gError 133424
    
    lEmpresa = StrParaLong(left(sNome, iUnder1 - 1))
    
    If lEmpresa <> glEmpresa Then gError 133645
    
    iUnder2 = InStr(iUnder1 + 1, sNome, "_")
    If iUnder2 = 0 Then gError 133425
    
    iFilialEmpresa = StrParaInt(Mid(sNome, iUnder1 + 1, iUnder2 - (iUnder1 + 1)))
    
    Verifica_Nome_Arquivo2 = SUCESSO

    Exit Function

Erro_Verifica_Nome_Arquivo2:

    Verifica_Nome_Arquivo2 = gErr

    Select Case gErr

        Case 133424, 133425, 133645
            Call Rotina_Erro(vbOKOnly, "ERRO_ARQUIVO_INVALIDO1", gErr)
                
        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error, 151530)

    End Select

    Exit Function

End Function

Private Function CupomFiscal_Reprocessa_MovEst() As Long

Dim lErro As Long
Dim alComando(1 To 6) As Long
Dim alComando1(1 To NUM_MAX_LCOMANDO_MOVESTOQUE) As Long
Dim iIndice As Integer, iFilialEmpresa As Integer, lNumIntDoc As Long
Dim objItens As ClassItemCupomFiscal
Dim objProduto As New ClassProduto
Dim dFator As Double
Dim dQuantEstoque As Double
Dim colInsumos As Collection
Dim colRastroMovto As Collection
Dim sNomeReduzidoAlmox As String
Dim iAlmoxarifadoPadrao As Integer
Dim objItemMovEstoque As ClassItemMovEstoque
Dim objCupomFiscal As ClassCupomFiscal
Dim objMovEstoque As ClassMovEstoque
Dim tItem As typeItemCupomFiscal
Dim lCodigo As Long

On Error GoTo Erro_CupomFiscal_Reprocessa_MovEst

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 112119
    Next
    
    For iIndice = LBound(alComando1) To UBound(alComando1)
        alComando1(iIndice) = Comando_Abrir()
        If alComando1(iIndice) = 0 Then gError 118194
    Next
    
    'Le os cupons para sem movimento de estoque
    lErro = Comando_Executar(alComando(1), "SELECT DISTINCT C.FilialEmpresa, C.NumIntDoc FROM CupomFiscal As C, ItensCupomFiscal AS I WHERE C.NumIntDoc = I.NumIntCupom AND C.Status = 2 AND  C.NumIntDoc NOT IN (SELECT NumIntDocOrigem FROM MovimentoEstoque WHERE TipoNumIntDocOrigem = 6) ORDER BY C.NumIntDoc DESC ", iFilialEmpresa, lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 216203
    
    'busca o primeiro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 216204

    Do While lErro <> AD_SQL_SEM_DADOS
    
        Set objCupomFiscal = New ClassCupomFiscal
        Set objMovEstoque = New ClassMovEstoque
  
        objCupomFiscal.lNumIntDoc = lNumIntDoc
        objCupomFiscal.iFilialEmpresa = iFilialEmpresa
  
        lErro = CF("CupomFiscal_Le_NumIntDoc", objCupomFiscal)
        If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
      
        objMovEstoque.dtData = objCupomFiscal.dtDataEmissao
        objMovEstoque.dtHora = objCupomFiscal.dHoraEmissao
        objMovEstoque.iFilialEmpresa = objCupomFiscal.iFilialEmpresa
        objMovEstoque.sDocOrigem = "CF"
        
        tItem.sProduto = String(STRING_MAXIMO, 0)
        tItem.sUnidadeMed = String(STRING_MAXIMO, 0)
    
        'Le os itens
        lErro = Comando_Executar(alComando(2), "SELECT NumIntDoc, Produto, UnidadeMed, Quantidade FROM ItensCupomFiscal WHERE NumIntCupom = ? AND FilialEmpresa = ? AND Status <> 7 ", tItem.lNumIntDoc, tItem.sProduto, tItem.sUnidadeMed, tItem.dQuantidade, objCupomFiscal.lNumIntDoc, objCupomFiscal.iFilialEmpresa)
        If lErro <> AD_SQL_SUCESSO Then gError 216205
        
        'busca o primeiro
        lErro = Comando_BuscarPrimeiro(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 216206
    
        Do While lErro <> AD_SQL_SEM_DADOS
        
            Set objItens = New ClassItemCupomFiscal
            Set objProduto = New ClassProduto
            
            objItens.lNumIntCupom = objCupomFiscal.lNumIntDoc
            objItens.iFilialEmpresa = objCupomFiscal.iFilialEmpresa
            objItens.lNumIntDoc = tItem.lNumIntDoc
            objItens.sProduto = tItem.sProduto
            objItens.sUnidadeMed = tItem.sUnidadeMed
            objItens.dQuantidade = tItem.dQuantidade
            
            objCupomFiscal.colItens.Add objItens
            
            objProduto.sCodigo = objItens.sProduto
    
            'Lê na tabela de Produto a UM de venda
            lErro = CF("Produto_Le", objProduto)
            If lErro <> SUCESSO And lErro <> 28030 Then gError 112122
              
            'Obtém fator de conversão para unidade de medida de Venda
            lErro = CF("UM_Conversao", objProduto.iClasseUM, objItens.sUnidadeMed, objProduto.sSiglaUMEstoque, dFator)
            If lErro <> SUCESSO Then gError 126500
    
            dQuantEstoque = objItens.dQuantidade * dFator
                           
            If objProduto.iControleEstoque <> PRODUTO_CONTROLE_SEM_ESTOQUE Then
            
                Set colInsumos = New Collection
                Set colRastroMovto = New Collection
            
                iAlmoxarifadoPadrao = 0
                sNomeReduzidoAlmox = ""
            
                lErro = CF("AlmoxarifadoPadrao_Le_CodNomeRed", objMovEstoque.iFilialEmpresa, objProduto.sCodigo, sNomeReduzidoAlmox, iAlmoxarifadoPadrao)
                If lErro <> SUCESSO And lErro <> 118756 Then gError 118759
        
                Set objItemMovEstoque = objMovEstoque.colItens.Add(0, MOV_EST_CUPOM_FISCAL, 0, 0, objProduto.sCodigo, objProduto.sDescricao, objProduto.sSiglaUMEstoque, dQuantEstoque, iAlmoxarifadoPadrao, sNomeReduzidoAlmox, objItens.lNumIntCupom, "", 0, "", "", "", "", 0, colRastroMovto, colInsumos, DATA_NULA)
        
                objItemMovEstoque.iClasseUM = objProduto.iClasseUM
                objItemMovEstoque.iControleEstoque = objProduto.iControleEstoque
                objItemMovEstoque.sSiglaUMEst = objProduto.sSiglaUMEstoque
                objItemMovEstoque.iTipoNumIntDocOrigem = MOVEST_TIPONUMINTDOCORIGEM_CUPOMFISCAL
                
                'guarda a posicao do registro para posteriormente poder descobrir o NumIntDoc do Movimento de Estoque
                objItens.lNumIntMovEst = objMovEstoque.colItens.Count
            End If
                 
            lErro = Comando_BuscarProximo(alComando(2))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 216205
        
        Loop
        
        If objMovEstoque.colItens.Count > 0 Then
            
            'Obtém o Código do Movimento
            lErro = CF("MovEstoque_Automatico_EmTransacao1", alComando(3), alComando(4), alComando(5), objMovEstoque.iFilialEmpresa, lCodigo)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
            
            objMovEstoque.lCodigo = lCodigo
            
            lErro = CF("EstoqueInicial_Gera_Zerado", objMovEstoque)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
            
            'Grava os Movimentos de Estoque relacionados ao Cupom Fiscal
            lErro = CF("MovEstoque_Grava1", alComando1(), objMovEstoque)
            If lErro <> SUCESSO Then gError ERRO_SEM_MENSAGEM
        
            For Each objItens In objCupomFiscal.colItens
                               
                objItens.lNumIntMovEst = objMovEstoque.colItens(objItens.lNumIntMovEst).lNumIntDoc
            
                'insere novo registro na tabela de ItensCupomFiscal
                lErro = Comando_Executar(alComando(6), "UPDATE ItensCupomFiscal SET NumIntMovEst = ? WHERE FilialEmpresa = ? AND NumIntDoc = ?", objItens.lNumIntMovEst, objCupomFiscal.iFilialEmpresa, objItens.lNumIntDoc)
                If lErro <> AD_SQL_SUCESSO Then gError 204645
    
            Next
        
        End If
                
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 216205
    
    Loop
        
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    For iIndice = LBound(alComando1) To UBound(alComando1)
        Call Comando_Fechar(alComando1(iIndice))
    Next
    
    CupomFiscal_Reprocessa_MovEst = SUCESSO

    Exit Function

Erro_CupomFiscal_Reprocessa_MovEst:

    CupomFiscal_Reprocessa_MovEst = gErr

    Select Case gErr

        Case 112119, 118194
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case ERRO_SEM_MENSAGEM

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151328)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next

    For iIndice = LBound(alComando1) To UBound(alComando1)
        Call Comando_Fechar(alComando1(iIndice))
    Next
    
    Exit Function

End Function


Private Function CupomFiscal_Reprocessa_Comissao() As Long

Dim lErro As Long
Dim alComando(1 To 2) As Long
Dim iIndice As Integer
Dim iFilialEmpresa As Integer, lNumIntDoc As Long
Dim objCupomFiscal As ClassCupomFiscal
Dim objItens As ClassItemCupomFiscal
Dim objProduto As New ClassProduto
Dim tItem As typeItemCupomFiscal
Dim colComissoes As Collection
Dim objCliente As New ClassCliente
Dim iFilialCli As Integer

On Error GoTo Erro_CupomFiscal_Reprocessa_Comissao

    For iIndice = LBound(alComando) To UBound(alComando)
        alComando(iIndice) = Comando_Abrir()
        If alComando(iIndice) = 0 Then gError 112119
    Next
    
    'Le os cupons para sem comissão
    lErro = Comando_Executar(alComando(1), "SELECT C.FilialEmpresa, C.NumIntDoc FROM CupomFiscal As C WHERE (C.Status = 2 OR ( C.Tipo = 1 AND C.Status <> 7)) AND C.Vendedor <> 0 AND DataEmissao >= {d '2016-10-01'} AND C.NumIntDoc NOT IN (SELECT NumIntDoc FROM ComissoesCupomFiscal) ORDER BY C.NumIntDoc DESC ", iFilialEmpresa, lNumIntDoc)
    If lErro <> AD_SQL_SUCESSO Then gError 216203
    
    'busca o primeiro
    lErro = Comando_BuscarPrimeiro(alComando(1))
    If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 216204

    Do While lErro <> AD_SQL_SEM_DADOS
    
        Set objCupomFiscal = New ClassCupomFiscal
        Set colComissoes = New Collection
        
        objCupomFiscal.lNumIntDoc = lNumIntDoc
        objCupomFiscal.iFilialEmpresa = iFilialEmpresa
    
        lErro = CF("CupomFiscal_Le_NumIntDoc", objCupomFiscal)
        If lErro <> SUCESSO And lErro <> 105262 Then gError 126343
        
        tItem.sProduto = String(STRING_MAXIMO, 0)
        tItem.sUnidadeMed = String(STRING_MAXIMO, 0)
    
        'Le os itens
        lErro = Comando_Executar(alComando(2), "SELECT NumIntDoc, Produto, UnidadeMed, Quantidade, PrecoUnitario, PercDesc, ValorDesconto FROM ItensCupomFiscal WHERE NumIntCupom = ? AND FilialEmpresa = ? AND Status <> 7 ", tItem.lNumIntDoc, tItem.sProduto, tItem.sUnidadeMed, tItem.dQuantidade, tItem.dPrecoUnitario, tItem.dPercDesc, tItem.dValorDesconto, objCupomFiscal.lNumIntDoc, objCupomFiscal.iFilialEmpresa)
        If lErro <> AD_SQL_SUCESSO Then gError 216205
        
        'busca o primeiro
        lErro = Comando_BuscarPrimeiro(alComando(2))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 216206
    
        Do While lErro <> AD_SQL_SEM_DADOS
        
            Set objItens = New ClassItemCupomFiscal
            
            objItens.lNumIntCupom = objCupomFiscal.lNumIntDoc
            objItens.iFilialEmpresa = objCupomFiscal.iFilialEmpresa
            objItens.lNumIntDoc = tItem.lNumIntDoc
            objItens.sProduto = tItem.sProduto
            objItens.sUnidadeMed = tItem.sUnidadeMed
            objItens.dQuantidade = tItem.dQuantidade
            objItens.dPrecoUnitario = tItem.dPrecoUnitario
            objItens.dPercDesc = tItem.dPercDesc
            objItens.dValorDesconto = tItem.dValorDesconto
            
            lErro = Comissoes_Gera_Loja(objCupomFiscal, objItens, objCliente, iFilialCli, colComissoes)
            If lErro <> AD_SQL_SUCESSO Then gError 126285
            
            'busca o primeiro
            lErro = Comando_BuscarProximo(alComando(2))
            If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 216206
            
        Loop
                
        'grava as comissoes associadas ao cupom
        lErro = Comissoes_Gravar_Loja(objCupomFiscal, colComissoes)
        If lErro <> SUCESSO Then gError 126289
               
        lErro = Comando_BuscarProximo(alComando(1))
        If lErro <> AD_SQL_SUCESSO And lErro <> AD_SQL_SEM_DADOS Then gError 216205
    
    Loop
        
    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    CupomFiscal_Reprocessa_Comissao = SUCESSO

    Exit Function

Erro_CupomFiscal_Reprocessa_Comissao:

    CupomFiscal_Reprocessa_Comissao = gErr

    Select Case gErr

        Case 112119, 118194
            Call Rotina_Erro(vbOKOnly, "ERRO_ABERTURA_COMANDO", gErr)

        Case ERRO_SEM_MENSAGEM

        Case Else
            Call Rotina_Erro(vbOKOnly, "ERRO_FORNECIDO_PELO_VB", gErr, Error$, 151328)

    End Select

    For iIndice = LBound(alComando) To UBound(alComando)
        Call Comando_Fechar(alComando(iIndice))
    Next
    
    Exit Function

End Function
